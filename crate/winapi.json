{"root":"0:0:1659","crate_version":"0.3.9","includes_private":false,"index":{"2:12020:24552":{"id":"2:12020:24552","crate_id":2,"name":"eq_ignore_ascii_case","span":null,"visibility":"public","docs":"Checks that two strings are an ASCII case-insensitive match.\n\nSame as `to_ascii_lowercase(a) == to_ascii_lowercase(b)`,\nbut without allocating and copying temporaries.\n\n# Examples\n\n```\nassert!(\"Ferris\".eq_ignore_ascii_case(\"FERRIS\"));\nassert!(\"Ferrös\".eq_ignore_ascii_case(\"FERRöS\"));\nassert!(!\"Ferrös\".eq_ignore_ascii_case(\"FERRÖS\"));\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["other",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11963:25102":{"id":"2:11963:25102","crate_id":2,"name":"splitn","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by a\npattern, restricted to returning at most `n` items.\n\nIf `n` substrings are returned, the last substring (the `n`th substring)\nwill contain the remainder of the string.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will not be double ended, because it is\nnot efficient to support.\n\nIf the pattern allows a reverse search, the [`rsplitn`] method can be\nused.\n\n[`rsplitn`]: str::rsplitn\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lambda\".splitn(3, ' ').collect();\nassert_eq!(v, [\"Mary\", \"had\", \"a little lambda\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".splitn(3, \"X\").collect();\nassert_eq!(v, [\"lion\", \"\", \"tigerXleopard\"]);\n\nlet v: Vec<&str> = \"abcXdef\".splitn(1, 'X').collect();\nassert_eq!(v, [\"abcXdef\"]);\n\nlet v: Vec<&str> = \"\".splitn(1, 'X').collect();\nassert_eq!(v, [\"\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".splitn(2, |c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"abc\", \"defXghi\"]);\n```","links":{"prim@char":"1:11871:415","self::pattern":"2:11600:7664","str::rsplitn":"2:11966:25104"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["n",{"kind":"primitive","inner":"usize"}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"SplitN","id":"2:43264:7653","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11605:7660","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:12007:31136":{"id":"2:12007:31136","crate_id":2,"name":"trim_end_matches","span":null,"visibility":"public","docs":"Returns a string slice with all suffixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. `end` in this context means the last\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be right side, and for right-to-left languages like\nArabic or Hebrew, this will be the left side.\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_end_matches('1'), \"11foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_end_matches(char::is_numeric), \"123foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_end_matches(x), \"12foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1fooX\".trim_end_matches(|c| c == '1' || c == 'X'), \"1foo\");\n```","links":{"prim@char":"1:11871:415","self::pattern":"2:11600:7664"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11605:7660","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"2:11605:7660","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11620:7661","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:12023:31140":{"id":"2:12023:31140","crate_id":2,"name":"escape_debug","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_debug`].\n\nNote: only extended grapheme codepoints that begin the string will be\nescaped.\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"❤\\n!\".escape_debug() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"❤\\n!\".escape_debug());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"❤\\\\n!\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"❤\\n!\".escape_debug().to_string(), \"❤\\\\n!\");\n```","links":{"`char::escape_debug`":"2:4526:31140"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"EscapeDebug","id":"2:43459:7675","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11923:27807":{"id":"2:11923:27807","crate_id":2,"name":"chars","span":null,"visibility":"public","docs":"Returns an iterator over the [`char`]s of a string slice.\n\nAs a string slice consists of valid UTF-8, we can iterate through a\nstring slice by [`char`]. This method returns such an iterator.\n\nIt's important to remember that [`char`] represents a Unicode Scalar\nValue, and might not match your idea of what a 'character' is. Iteration\nover grapheme clusters may be what you actually want. This functionality\nis not provided by Rust's standard library, check crates.io instead.\n\n# Examples\n\nBasic usage:\n\n```\nlet word = \"goodbye\";\n\nlet count = word.chars().count();\nassert_eq!(7, count);\n\nlet mut chars = word.chars();\n\nassert_eq!(Some('g'), chars.next());\nassert_eq!(Some('o'), chars.next());\nassert_eq!(Some('o'), chars.next());\nassert_eq!(Some('d'), chars.next());\nassert_eq!(Some('b'), chars.next());\nassert_eq!(Some('y'), chars.next());\nassert_eq!(Some('e'), chars.next());\n\nassert_eq!(None, chars.next());\n```\n\nRemember, [`char`]s might not match your intuition about characters:\n\n[`char`]: prim@char\n\n```\nlet y = \"y̆\";\n\nlet mut chars = y.chars();\n\nassert_eq!(Some('y'), chars.next()); // not 'y̆'\nassert_eq!(Some('\\u{0306}'), chars.next());\n\nassert_eq!(None, chars.next());\n```","links":{"prim@char":"1:11871:415"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Chars","id":"2:43130:7671","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11972:31125":{"id":"2:11972:31125","crate_id":2,"name":"rsplit_once","span":null,"visibility":"public","docs":"Splits the string on the last occurrence of the specified delimiter and\nreturns prefix before delimiter and suffix after delimiter.\n\n# Examples\n\n```\nassert_eq!(\"cfg\".rsplit_once('='), None);\nassert_eq!(\"cfg=foo\".rsplit_once('='), Some((\"cfg\", \"foo\")));\nassert_eq!(\"cfg=foo=bar\".rsplit_once('='), Some((\"cfg=foo\", \"bar\")));\n```","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["delimiter",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:41195:179","args":{"angle_bracketed":{"args":[{"type":{"kind":"tuple","inner":[{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}},{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11605:7660","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"2:11605:7660","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11620:7661","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11919:31119":{"id":"2:11919:31119","crate_id":2,"name":"slice_unchecked","span":null,"visibility":"public","docs":"Creates a string slice from another string slice, bypassing safety\nchecks.\n\nThis is generally not recommended, use with caution! For a safe\nalternative see [`str`] and [`Index`].\n\n[`Index`]: crate::ops::Index\n\nThis new slice goes from `begin` to `end`, including `begin` but\nexcluding `end`.\n\nTo get a mutable string slice instead, see the\n[`slice_mut_unchecked`] method.\n\n[`slice_mut_unchecked`]: str::slice_mut_unchecked\n\n# Safety\n\nCallers of this function are responsible that three preconditions are\nsatisfied:\n\n* `begin` must not exceed `end`.\n* `begin` and `end` must be byte positions within the string slice.\n* `begin` and `end` must lie on UTF-8 sequence boundaries.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\n\nunsafe {\n    assert_eq!(\"Löwe 老虎 Léopard\", s.slice_unchecked(0, 21));\n}\n\nlet s = \"Hello, world!\";\n\nunsafe {\n    assert_eq!(\"world\", s.slice_unchecked(7, 12));\n}\n```","links":{"`str`":"1:11877:1388","str::slice_mut_unchecked":"2:11920:31120","crate::ops::Index":"2:2969:2068"},"attrs":["#[deprecated(since = \"1.29.0\", note =\n\"use `get_unchecked(begin..end)` instead\")]","#[must_use]"],"deprecation":{"since":"1.29.0","note":"use `get_unchecked(begin..end)` instead"},"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["begin",{"kind":"primitive","inner":"usize"}],["end",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}},"5:5400:24550":{"id":"5:5400:24550","crate_id":5,"name":"to_ascii_uppercase","span":null,"visibility":"public","docs":"Returns a copy of this string where each character is mapped to its\nASCII upper case equivalent.\n\nASCII letters 'a' to 'z' are mapped to 'A' to 'Z',\nbut non-ASCII letters are unchanged.\n\nTo uppercase the value in-place, use [`make_ascii_uppercase`].\n\nTo uppercase ASCII characters in addition to non-ASCII characters, use\n[`to_uppercase`].\n\n# Examples\n\n```\nlet s = \"Grüße, Jürgen ❤\";\n\nassert_eq!(\"GRüßE, JüRGEN ❤\", s.to_ascii_uppercase());\n```\n\n[`make_ascii_uppercase`]: str::make_ascii_uppercase\n[`to_uppercase`]: #method.to_uppercase","links":{"str::make_ascii_uppercase":"2:12021:24548"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use = \"to uppercase the value in-place, use `make_ascii_uppercase()`\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:7250:222","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11948:24116":{"id":"2:11948:24116","crate_id":2,"name":"split","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by\ncharacters matched by a pattern.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rsplit`] method can be used.\n\n[`rsplit`]: str::rsplit\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".split(' ').collect();\nassert_eq!(v, [\"Mary\", \"had\", \"a\", \"little\", \"lamb\"]);\n\nlet v: Vec<&str> = \"\".split('X').collect();\nassert_eq!(v, [\"\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".split('X').collect();\nassert_eq!(v, [\"lion\", \"\", \"tiger\", \"leopard\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".split(\"::\").collect();\nassert_eq!(v, [\"lion\", \"tiger\", \"leopard\"]);\n\nlet v: Vec<&str> = \"abc1def2ghi\".split(char::is_numeric).collect();\nassert_eq!(v, [\"abc\", \"def\", \"ghi\"]);\n\nlet v: Vec<&str> = \"lionXtigerXleopard\".split(char::is_uppercase).collect();\nassert_eq!(v, [\"lion\", \"tiger\", \"leopard\"]);\n```\n\nIf the pattern is a slice of chars, split on each occurrence of any of the characters:\n\n```\nlet v: Vec<&str> = \"2020-11-03 23:59\".split(&['-', ' ', ':', '@'][..]).collect();\nassert_eq!(v, [\"2020\", \"11\", \"03\", \"23\", \"59\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".split(|c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"abc\", \"def\", \"ghi\"]);\n```\n\nIf a string contains multiple contiguous separators, you will end up\nwith empty strings in the output:\n\n```\nlet x = \"||||a||b|c\".to_string();\nlet d: Vec<_> = x.split('|').collect();\n\nassert_eq!(d, &[\"\", \"\", \"\", \"\", \"a\", \"\", \"b\", \"c\"]);\n```\n\nContiguous separators are separated by the empty string.\n\n```\nlet x = \"(///)\".to_string();\nlet d: Vec<_> = x.split('/').collect();\n\nassert_eq!(d, &[\"(\", \"\", \"\", \")\"]);\n```\n\nSeparators at the start or end of a string are neighbored\nby empty strings.\n\n```\nlet d: Vec<_> = \"010\".split(\"0\").collect();\nassert_eq!(d, &[\"\", \"1\", \"\"]);\n```\n\nWhen the empty string is used as a separator, it separates\nevery character in the string, along with the beginning\nand end of the string.\n\n```\nlet f: Vec<_> = \"rust\".split(\"\").collect();\nassert_eq!(f, &[\"\", \"r\", \"u\", \"s\", \"t\", \"\"]);\n```\n\nContiguous separators can lead to possibly surprising behavior\nwhen whitespace is used as the separator. This code is correct:\n\n```\nlet x = \"    a  b c\".to_string();\nlet d: Vec<_> = x.split(' ').collect();\n\nassert_eq!(d, &[\"\", \"\", \"\", \"\", \"a\", \"\", \"b\", \"c\"]);\n```\n\nIt does _not_ give you:\n\n```,ignore\nassert_eq!(d, &[\"a\", \"b\", \"c\"]);\n```\n\nUse [`split_whitespace`] for this behavior.\n\n[`split_whitespace`]: str::split_whitespace","links":{"self::pattern":"2:11600:7664","`DoubleEndedIterator`":"2:7193:119","prim@char":"1:11871:415","str::split_whitespace":"2:11926:27792","str::rsplit":"2:11954:25100"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Split","id":"2:43160:2173","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11605:7660","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:12010:31137":{"id":"2:12010:31137","crate_id":2,"name":"trim_left_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. 'Left' in this context means the first\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _right_ side, not the left.\n\n# Examples\n\nBasic usage:\n\n```\nassert_eq!(\"11foo1bar11\".trim_left_matches('1'), \"foo1bar11\");\nassert_eq!(\"123foo1bar123\".trim_left_matches(char::is_numeric), \"foo1bar123\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_left_matches(x), \"foo1bar12\");\n```","links":{"prim@char":"1:11871:415","self::pattern":"2:11600:7664"},"attrs":["#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_start_matches`\",\nsuggestion = \"trim_start_matches\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_start_matches`"},"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11605:7660","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11922:25090":{"id":"2:11922:25090","crate_id":2,"name":"split_at_mut","span":null,"visibility":"public","docs":"Divide one mutable string slice into two at an index.\n\nThe argument, `mid`, should be a byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get immutable string slices instead, see the [`split_at`] method.\n\n[`split_at`]: str::split_at\n\n# Panics\n\nPanics if `mid` is not on a UTF-8 code point boundary, or if it is\npast the end of the last code point of the string slice.\n\n# Examples\n\nBasic usage:\n\n```\nlet mut s = \"Per Martin-Löf\".to_string();\n{\n    let (first, last) = s.split_at_mut(3);\n    first.make_ascii_uppercase();\n    assert_eq!(\"PER\", first);\n    assert_eq!(\" Martin-Löf\", last);\n}\nassert_eq!(\"PER Martin-Löf\", s);\n```","links":{"str::split_at":"2:11921:25089"},"attrs":["#[must_use]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["mid",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"tuple","inner":[{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"primitive","inner":"str"}}},{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"primitive","inner":"str"}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:12022:24547":{"id":"2:12022:24547","crate_id":2,"name":"make_ascii_lowercase","span":null,"visibility":"public","docs":"Converts this string to its ASCII lower case equivalent in-place.\n\nASCII letters 'A' to 'Z' are mapped to 'a' to 'z',\nbut non-ASCII letters are unchanged.\n\nTo return a new lowercased value without modifying the existing one, use\n[`to_ascii_lowercase()`].\n\n[`to_ascii_lowercase()`]: #method.to_ascii_lowercase\n\n# Examples\n\n```\nlet mut s = String::from(\"GRÜßE, JÜRGEN ❤\");\n\ns.make_ascii_lowercase();\n\nassert_eq!(\"grÜße, jÜrgen ❤\", s);\n```","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11911:25063":{"id":"2:11911:25063","crate_id":2,"name":"get","span":null,"visibility":"public","docs":"Returns a subslice of `str`.\n\nThis is the non-panicking alternative to indexing the `str`. Returns\n[`None`] whenever equivalent indexing operation would panic.\n\n# Examples\n\n```\nlet v = String::from(\"🗻∈🌏\");\n\nassert_eq!(Some(\"🗻\"), v.get(0..4));\n\n// indices not on UTF-8 sequence boundaries\nassert!(v.get(1..).is_none());\nassert!(v.get(..8).is_none());\n\n// out of bounds\nassert!(v.get(..42).is_none());\n```","links":{"`None`":"2:41197:177"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["i",{"kind":"generic","inner":"I"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:41195:179","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"qualified_path","inner":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"I"},"trait":{"name":"SliceIndex","id":"2:9780:220","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}}}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"2:9780:220","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"5:5398:31796":{"id":"5:5398:31796","crate_id":5,"name":"into_string","span":null,"visibility":"public","docs":"Converts a [`Box<str>`] into a [`String`] without copying or allocating.\n\n# Examples\n\nBasic usage:\n\n```\nlet string = String::from(\"birthday gift\");\nlet boxed_str = string.clone().into_boxed_str();\n\nassert_eq!(boxed_str.into_string(), string);\n```","links":{"`Box<str>`":"5:279:1908","`String`":"5:7250:222"},"attrs":["#[must_use = \"`self` will be dropped if the result is not used\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"resolved_path","inner":{"name":"Box","id":"5:279:1908","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}},{"type":{"kind":"resolved_path","inner":{"name":"Global","id":"5:6999:2058","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:7250:222","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11898":{"id":"2:11898","crate_id":2,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":["#[cfg(not(test))]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"kind":"primitive","inner":"str"},"items":["2:11899:807","2:11900:19830","2:11901:31115","2:11902:31116","2:11904:31117","2:11907:26318","2:11908:31118","2:11909:312","2:11910:25067","2:11911:25063","2:11913:25064","2:11915:25065","2:11917:25066","2:11919:31119","2:11920:31120","2:11921:25089","2:11922:25090","2:11923:27807","2:11924:27890","2:11925:19518","2:11926:27792","2:11927:27802","2:11928:24117","2:11929:31121","2:11930:27808","2:11931:25106","2:11934:24711","2:11937:24713","2:11940:19405","2:11944:19406","2:11948:24116","2:11951:25098","2:11954:25100","2:11957:31122","2:11960:31123","2:11963:25102","2:11966:25104","2:11969:31124","2:11972:31125","2:11975:1877","2:11978:31126","2:11981:31127","2:11984:31128","2:11987:31129","2:11989:31130","2:11991:31131","2:11993:31132","2:11994:31133","2:11995:31134","2:11998:31135","2:12001:20202","2:12004:25107","2:12007:31136","2:12010:31137","2:12013:31138","2:12016:31139","2:12018:24551","2:12019:26322","2:12020:24552","2:12021:24548","2:12022:24547","2:12023:31140","2:12025:1986","2:12026:31141"],"negative":false,"synthetic":false,"blanket_impl":null}},"2:11994:31133":{"id":"2:11994:31133","crate_id":2,"name":"trim_right","span":null,"visibility":"public","docs":"Returns a string slice with trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`.\n\n# Text directionality\n\nA string is a sequence of bytes. 'Right' in this context means the last\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _left_ side, not the right.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \" Hello\\tworld\\t\";\n\nassert_eq!(\" Hello\\tworld\", s.trim_right());\n```\n\nDirectionality:\n\n```\nlet s = \"English  \";\nassert!(Some('h') == s.trim_right().chars().rev().next());\n\nlet s = \"עברית  \";\nassert!(Some('ת') == s.trim_right().chars().rev().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_end`\", suggestion =\n\"trim_end\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_end`"},"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11909:312":{"id":"2:11909:312","crate_id":2,"name":"as_ptr","span":null,"visibility":"public","docs":"Converts a string slice to a raw pointer.\n\nAs string slices are a slice of bytes, the raw pointer points to a\n[`u8`]. This pointer will be pointing to the first byte of the string\nslice.\n\nThe caller must ensure that the returned pointer is never written to.\nIf you need to mutate the contents of the string slice, use [`as_mut_ptr`].\n\n[`as_mut_ptr`]: str::as_mut_ptr\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"Hello\";\nlet ptr = s.as_ptr();\n```","links":{"str::as_mut_ptr":"2:11910:25067","`u8`":"1:11888:1486"},"attrs":["#[must_use]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"raw_pointer","inner":{"mutable":false,"type":{"kind":"primitive","inner":"u8"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11989:31130":{"id":"2:11989:31130","crate_id":2,"name":"trim_start","span":null,"visibility":"public","docs":"Returns a string slice with leading whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Text directionality\n\nA string is a sequence of bytes. `start` in this context means the first\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be left side, and for right-to-left languages like\nArabic or Hebrew, this will be the right side.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\nassert_eq!(\"Hello\\tworld\\t\\n\", s.trim_start());\n```\n\nDirectionality:\n\n```\nlet s = \"  English  \";\nassert!(Some('E') == s.trim_start().chars().next());\n\nlet s = \"  עברית  \";\nassert!(Some('ע') == s.trim_start().chars().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_trim_start\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11902:31116":{"id":"2:11902:31116","crate_id":2,"name":"floor_char_boundary","span":null,"visibility":"public","docs":"Finds the closest `x` not exceeding `index` where `is_char_boundary(x)` is `true`.\n\nThis method can help you truncate a string so that it's still valid UTF-8, but doesn't\nexceed a given number of bytes. Note that this is done purely at the character level\nand can still visually split graphemes, even though the underlying characters aren't\nsplit. For example, the emoji 🧑‍🔬 (scientist) could be split so that the string only\nincludes 🧑 (person) instead.\n\n# Examples\n\n```\n#![feature(round_char_boundary)]\nlet s = \"❤️🧡💛💚💙💜\";\nassert_eq!(s.len(), 26);\nassert!(!s.is_char_boundary(13));\n\nlet closest = s.floor_char_boundary(13);\nassert_eq!(closest, 10);\nassert_eq!(&s[..closest], \"❤️🧡\");\n```","links":{},"attrs":["#[unstable(feature = \"round_char_boundary\", issue = \"93743\")]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["index",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"primitive","inner":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11957:31122":{"id":"2:11957:31122","crate_id":2,"name":"split_terminator","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by\ncharacters matched by a pattern.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\nEquivalent to [`split`], except that the trailing substring\nis skipped if empty.\n\n[`split`]: str::split\n\nThis method can be used for string data that is _terminated_,\nrather than _separated_ by a pattern.\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rsplit_terminator`] method can be used.\n\n[`rsplit_terminator`]: str::rsplit_terminator\n\n# Examples\n\nBasic usage:\n\n```\nlet v: Vec<&str> = \"A.B.\".split_terminator('.').collect();\nassert_eq!(v, [\"A\", \"B\"]);\n\nlet v: Vec<&str> = \"A..B..\".split_terminator(\".\").collect();\nassert_eq!(v, [\"A\", \"\", \"B\", \"\"]);\n\nlet v: Vec<&str> = \"A.B:C.D\".split_terminator(&['.', ':'][..]).collect();\nassert_eq!(v, [\"A\", \"B\", \"C\", \"D\"]);\n```","links":{"self::pattern":"2:11600:7664","str::split":"2:11948:24116","prim@char":"1:11871:415","`DoubleEndedIterator`":"2:7193:119","str::rsplit_terminator":"2:11960:31123"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"SplitTerminator","id":"2:43210:7684","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11605:7660","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11987:31129":{"id":"2:11987:31129","crate_id":2,"name":"trim","span":null,"visibility":"public","docs":"Returns a string slice with leading and trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\n\nassert_eq!(\"Hello\\tworld\", s.trim());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a slice, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_trim\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11991:31131":{"id":"2:11991:31131","crate_id":2,"name":"trim_end","span":null,"visibility":"public","docs":"Returns a string slice with trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Text directionality\n\nA string is a sequence of bytes. `end` in this context means the last\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be right side, and for right-to-left languages like\nArabic or Hebrew, this will be the left side.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\nassert_eq!(\"\\n Hello\\tworld\", s.trim_end());\n```\n\nDirectionality:\n\n```\nlet s = \"  English  \";\nassert!(Some('h') == s.trim_end().chars().rev().next());\n\nlet s = \"  עברית  \";\nassert!(Some('ת') == s.trim_end().chars().rev().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_trim_end\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11951:25098":{"id":"2:11951:25098","crate_id":2,"name":"split_inclusive","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by\ncharacters matched by a pattern. Differs from the iterator produced by\n`split` in that `split_inclusive` leaves the matched part as the\nterminator of the substring.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\\nlittle lamb\\nlittle lamb.\"\n    .split_inclusive('\\n').collect();\nassert_eq!(v, [\"Mary had a little lamb\\n\", \"little lamb\\n\", \"little lamb.\"]);\n```\n\nIf the last element of the string is matched,\nthat element will be considered the terminator of the preceding substring.\nThat substring will be the last item returned by the iterator.\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\\nlittle lamb\\nlittle lamb.\\n\"\n    .split_inclusive('\\n').collect();\nassert_eq!(v, [\"Mary had a little lamb\\n\", \"little lamb\\n\", \"little lamb.\\n\"]);\n```","links":{"prim@char":"1:11871:415","self::pattern":"2:11600:7664"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"SplitInclusive","id":"2:11423:7655","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11605:7660","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11927:27802":{"id":"2:11927:27802","crate_id":2,"name":"split_ascii_whitespace","span":null,"visibility":"public","docs":"Splits a string slice by ASCII whitespace.\n\nThe iterator returned will return string slices that are sub-slices of\nthe original string slice, separated by any amount of ASCII whitespace.\n\nTo split by Unicode `Whitespace` instead, use [`split_whitespace`].\n\n[`split_whitespace`]: str::split_whitespace\n\n# Examples\n\nBasic usage:\n\n```\nlet mut iter = \"A few words\".split_ascii_whitespace();\n\nassert_eq!(Some(\"A\"), iter.next());\nassert_eq!(Some(\"few\"), iter.next());\nassert_eq!(Some(\"words\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nAll kinds of ASCII whitespace are considered:\n\n```\nlet mut iter = \" Mary   had\\ta little  \\n\\t lamb\".split_ascii_whitespace();\nassert_eq!(Some(\"Mary\"), iter.next());\nassert_eq!(Some(\"had\"), iter.next());\nassert_eq!(Some(\"a\"), iter.next());\nassert_eq!(Some(\"little\"), iter.next());\nassert_eq!(Some(\"lamb\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nIf the string is empty or all ASCII whitespace, the iterator yields no string slices:\n```\nassert_eq!(\"\".split_ascii_whitespace().next(), None);\nassert_eq!(\"   \".split_ascii_whitespace().next(), None);\n```","links":{"str::split_whitespace":"2:11926:27792"},"attrs":["#[must_use =\n\"this returns the split string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"SplitAsciiWhitespace","id":"2:43443:7666","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11899:807":{"id":"2:11899:807","crate_id":2,"name":"len","span":null,"visibility":"public","docs":"Returns the length of `self`.\n\nThis length is in bytes, not [`char`]s or graphemes. In other words,\nit might not be what a human considers the length of the string.\n\n[`char`]: prim@char\n\n# Examples\n\nBasic usage:\n\n```\nlet len = \"foo\".len();\nassert_eq!(3, len);\n\nassert_eq!(\"ƒoo\".len(), 4); // fancy f!\nassert_eq!(\"ƒoo\".chars().count(), 3);\n```","links":{"prim@char":"1:11871:415"},"attrs":["#[must_use]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11910:25067":{"id":"2:11910:25067","crate_id":2,"name":"as_mut_ptr","span":null,"visibility":"public","docs":"Converts a mutable string slice to a raw pointer.\n\nAs string slices are a slice of bytes, the raw pointer points to a\n[`u8`]. This pointer will be pointing to the first byte of the string\nslice.\n\nIt is your responsibility to make sure that the string slice only gets\nmodified in a way that it remains valid UTF-8.","links":{"`u8`":"1:11888:1486"},"attrs":["#[must_use]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"raw_pointer","inner":{"mutable":true,"type":{"kind":"primitive","inner":"u8"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:12026:31141":{"id":"2:12026:31141","crate_id":2,"name":"escape_unicode","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_unicode`].\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"❤\\n!\".escape_unicode() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"❤\\n!\".escape_unicode());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"\\\\u{{2764}}\\\\u{{a}}\\\\u{{21}}\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"❤\\n!\".escape_unicode().to_string(), \"\\\\u{2764}\\\\u{a}\\\\u{21}\");\n```","links":{"`char::escape_unicode`":"2:4524:31141"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"EscapeUnicode","id":"2:43477:7676","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:12018:24551":{"id":"2:12018:24551","crate_id":2,"name":"is_ascii","span":null,"visibility":"public","docs":"Checks if all characters in this string are within the ASCII range.\n\n# Examples\n\n```\nlet ascii = \"hello!\\n\";\nlet non_ascii = \"Grüße, Jürgen ❤\";\n\nassert!(ascii.is_ascii());\nassert!(!non_ascii.is_ascii());\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"5:5401:24549":{"id":"5:5401:24549","crate_id":5,"name":"to_ascii_lowercase","span":null,"visibility":"public","docs":"Returns a copy of this string where each character is mapped to its\nASCII lower case equivalent.\n\nASCII letters 'A' to 'Z' are mapped to 'a' to 'z',\nbut non-ASCII letters are unchanged.\n\nTo lowercase the value in-place, use [`make_ascii_lowercase`].\n\nTo lowercase ASCII characters in addition to non-ASCII characters, use\n[`to_lowercase`].\n\n# Examples\n\n```\nlet s = \"Grüße, Jürgen ❤\";\n\nassert_eq!(\"grüße, jürgen ❤\", s.to_ascii_lowercase());\n```\n\n[`make_ascii_lowercase`]: str::make_ascii_lowercase\n[`to_lowercase`]: #method.to_lowercase","links":{"str::make_ascii_lowercase":"2:12022:24547"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use = \"to lowercase the value in-place, use `make_ascii_lowercase()`\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:7250:222","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11907:26318":{"id":"2:11907:26318","crate_id":2,"name":"as_bytes","span":null,"visibility":"public","docs":"Converts a string slice to a byte slice. To convert the byte slice back\ninto a string slice, use the [`from_utf8`] function.\n\n# Examples\n\nBasic usage:\n\n```\nlet bytes = \"bors\".as_bytes();\nassert_eq!(b\"bors\", bytes);\n```","links":{"`from_utf8`":"2:11167:7668"},"attrs":["#[must_use]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"slice","inner":{"kind":"primitive","inner":"u8"}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11995:31134":{"id":"2:11995:31134","crate_id":2,"name":"trim_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes and suffixes that match a\npattern repeatedly removed.\n\nThe [pattern] can be a [`char`], a slice of [`char`]s, or a function\nor closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_matches('1'), \"foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_matches(char::is_numeric), \"foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_matches(x), \"foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1foo1barXX\".trim_matches(|c| c == '1' || c == 'X'), \"foo1bar\");\n```","links":{"prim@char":"1:11871:415","self::pattern":"2:11600:7664"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11605:7660","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"2:11605:7660","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"DoubleEndedSearcher","id":"2:11625:7659","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11915:25065":{"id":"2:11915:25065","crate_id":2,"name":"get_unchecked","span":null,"visibility":"public","docs":"Returns an unchecked subslice of `str`.\n\nThis is the unchecked alternative to indexing the `str`.\n\n# Safety\n\nCallers of this function are responsible that these preconditions are\nsatisfied:\n\n* The starting index must not exceed the ending index;\n* Indexes must be within bounds of the original slice;\n* Indexes must lie on UTF-8 sequence boundaries.\n\nFailing that, the returned string slice may reference invalid memory or\nviolate the invariants communicated by the `str` type.\n\n# Examples\n\n```\nlet v = \"🗻∈🌏\";\nunsafe {\n    assert_eq!(\"🗻\", v.get_unchecked(0..4));\n    assert_eq!(\"∈\", v.get_unchecked(4..7));\n    assert_eq!(\"🌏\", v.get_unchecked(7..11));\n}\n```","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["i",{"kind":"generic","inner":"I"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"qualified_path","inner":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"I"},"trait":{"name":"SliceIndex","id":"2:9780:220","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}}}}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"2:9780:220","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}},"2:11960:31123":{"id":"2:11960:31123","crate_id":2,"name":"rsplit_terminator","span":null,"visibility":"public","docs":"An iterator over substrings of `self`, separated by characters\nmatched by a pattern and yielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\nEquivalent to [`split`], except that the trailing substring is\nskipped if empty.\n\n[`split`]: str::split\n\nThis method can be used for string data that is _terminated_,\nrather than _separated_ by a pattern.\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a\nreverse search, and it will be double ended if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`split_terminator`] method can be\nused.\n\n[`split_terminator`]: str::split_terminator\n\n# Examples\n\n```\nlet v: Vec<&str> = \"A.B.\".rsplit_terminator('.').collect();\nassert_eq!(v, [\"B\", \"A\"]);\n\nlet v: Vec<&str> = \"A..B..\".rsplit_terminator(\".\").collect();\nassert_eq!(v, [\"\", \"B\", \"\", \"A\"]);\n\nlet v: Vec<&str> = \"A.B:C.D\".rsplit_terminator(&['.', ':'][..]).collect();\nassert_eq!(v, [\"D\", \"C\", \"B\", \"A\"]);\n```","links":{"self::pattern":"2:11600:7664","str::split":"2:11948:24116","prim@char":"1:11871:415","str::split_terminator":"2:11957:31122"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"RSplitTerminator","id":"2:43228:7683","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11605:7660","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"2:11605:7660","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11620:7661","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11966:25104":{"id":"2:11966:25104","crate_id":2,"name":"rsplitn","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by a\npattern, starting from the end of the string, restricted to returning\nat most `n` items.\n\nIf `n` substrings are returned, the last substring (the `n`th substring)\nwill contain the remainder of the string.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will not be double ended, because it is not\nefficient to support.\n\nFor splitting from the front, the [`splitn`] method can be used.\n\n[`splitn`]: str::splitn\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".rsplitn(3, ' ').collect();\nassert_eq!(v, [\"lamb\", \"little\", \"Mary had a\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".rsplitn(3, 'X').collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"lionX\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".rsplitn(2, \"::\").collect();\nassert_eq!(v, [\"leopard\", \"lion::tiger\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".rsplitn(2, |c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"ghi\", \"abc1def\"]);\n```","links":{"prim@char":"1:11871:415","str::splitn":"2:11963:25102","self::pattern":"2:11600:7664"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["n",{"kind":"primitive","inner":"usize"}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"RSplitN","id":"2:43282:7651","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11605:7660","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"2:11605:7660","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11620:7661","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:12013:31138":{"id":"2:12013:31138","crate_id":2,"name":"trim_right_matches","span":null,"visibility":"public","docs":"Returns a string slice with all suffixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. 'Right' in this context means the last\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _left_ side, not the right.\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_right_matches('1'), \"11foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_right_matches(char::is_numeric), \"123foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_right_matches(x), \"12foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1fooX\".trim_right_matches(|c| c == '1' || c == 'X'), \"1foo\");\n```","links":{"prim@char":"1:11871:415","self::pattern":"2:11600:7664"},"attrs":["#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_end_matches`\",\nsuggestion = \"trim_end_matches\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_end_matches`"},"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11605:7660","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"2:11605:7660","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11620:7661","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:12016:31139":{"id":"2:12016:31139","crate_id":2,"name":"parse","span":null,"visibility":"public","docs":"Parses this string slice into another type.\n\nBecause `parse` is so general, it can cause problems with type\ninference. As such, `parse` is one of the few times you'll see\nthe syntax affectionately known as the 'turbofish': `::<>`. This\nhelps the inference algorithm understand specifically which type\nyou're trying to parse into.\n\n`parse` can parse into any type that implements the [`FromStr`] trait.\n\n# Errors\n\nWill return [`Err`] if it's not possible to parse this string slice into\nthe desired type.\n\n[`Err`]: FromStr::Err\n\n# Examples\n\nBasic usage\n\n```\nlet four: u32 = \"4\".parse().unwrap();\n\nassert_eq!(4, four);\n```\n\nUsing the 'turbofish' instead of annotating `four`:\n\n```\nlet four = \"4\".parse::<u32>();\n\nassert_eq!(Ok(4), four);\n```\n\nFailing to parse:\n\n```\nlet nope = \"j\".parse::<u32>();\n\nassert!(nope.is_err());\n```","links":{"FromStr::Err":"2:11561:125","`FromStr`":"2:11560:2343"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Result","id":"2:41339:208","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"F"}},{"type":{"kind":"qualified_path","inner":{"name":"Err","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"F"},"trait":{"name":"FromStr","id":"2:11560:2343","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"F"},"bounds":[{"trait_bound":{"trait":{"name":"FromStr","id":"2:11560:2343","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11954:25100":{"id":"2:11954:25100","crate_id":2,"name":"rsplit","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by\ncharacters matched by a pattern and yielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`split`] method can be used.\n\n[`split`]: str::split\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".rsplit(' ').collect();\nassert_eq!(v, [\"lamb\", \"little\", \"a\", \"had\", \"Mary\"]);\n\nlet v: Vec<&str> = \"\".rsplit('X').collect();\nassert_eq!(v, [\"\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".rsplit('X').collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"\", \"lion\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".rsplit(\"::\").collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"lion\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".rsplit(|c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"ghi\", \"def\", \"abc\"]);\n```","links":{"self::pattern":"2:11600:7664","`DoubleEndedIterator`":"2:7193:119","prim@char":"1:11871:415","str::split":"2:11948:24116"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"RSplit","id":"2:43178:7649","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11605:7660","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"2:11605:7660","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11620:7661","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11975:1877":{"id":"2:11975:1877","crate_id":2,"name":"matches","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within the given string\nslice.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rmatches`] method can be used.\n\n[`rmatches`]: str::matches\n\n# Examples\n\nBasic usage:\n\n```\nlet v: Vec<&str> = \"abcXXXabcYYYabc\".matches(\"abc\").collect();\nassert_eq!(v, [\"abc\", \"abc\", \"abc\"]);\n\nlet v: Vec<&str> = \"1abc2abc3\".matches(char::is_numeric).collect();\nassert_eq!(v, [\"1\", \"2\", \"3\"]);\n```","links":{"self::pattern":"2:11600:7664","`DoubleEndedIterator`":"2:7193:119","prim@char":"1:11871:415","str::matches":"2:11975:1877"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Matches","id":"2:43364:7681","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11605:7660","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11925:19518":{"id":"2:11925:19518","crate_id":2,"name":"bytes","span":null,"visibility":"public","docs":"An iterator over the bytes of a string slice.\n\nAs a string slice consists of a sequence of bytes, we can iterate\nthrough a string slice by byte. This method returns such an iterator.\n\n# Examples\n\nBasic usage:\n\n```\nlet mut bytes = \"bors\".bytes();\n\nassert_eq!(Some(b'b'), bytes.next());\nassert_eq!(Some(b'o'), bytes.next());\nassert_eq!(Some(b'r'), bytes.next());\nassert_eq!(Some(b's'), bytes.next());\n\nassert_eq!(None, bytes.next());\n```","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Bytes","id":"2:43146:2172","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11993:31132":{"id":"2:11993:31132","crate_id":2,"name":"trim_left","span":null,"visibility":"public","docs":"Returns a string slice with leading whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`.\n\n# Text directionality\n\nA string is a sequence of bytes. 'Left' in this context means the first\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _right_ side, not the left.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \" Hello\\tworld\\t\";\n\nassert_eq!(\"Hello\\tworld\\t\", s.trim_left());\n```\n\nDirectionality:\n\n```\nlet s = \"  English\";\nassert!(Some('E') == s.trim_left().chars().next());\n\nlet s = \"  עברית\";\nassert!(Some('ע') == s.trim_left().chars().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_start`\", suggestion\n= \"trim_start\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_start`"},"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"5:5386:31793":{"id":"5:5386:31793","crate_id":5,"name":"replacen","span":null,"visibility":"public","docs":"Replaces first N matches of a pattern with another string.\n\n`replacen` creates a new [`String`], and copies the data from this string slice into it.\nWhile doing so, it attempts to find matches of a pattern. If it finds any, it\nreplaces them with the replacement string slice at most `count` times.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"foo foo 123 foo\";\nassert_eq!(\"new new 123 foo\", s.replacen(\"foo\", \"new\", 2));\nassert_eq!(\"faa fao 123 foo\", s.replacen('o', \"a\", 3));\nassert_eq!(\"foo foo new23 foo\", s.replacen(char::is_numeric, \"new\", 1));\n```\n\nWhen the pattern doesn't match, it returns this string slice as [`String`]:\n\n```\nlet s = \"this is old\";\nassert_eq!(s, s.replacen(\"cookie monster\", \"little lamb\", 10));\n```","links":{"`String`":"5:7250:222"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the replaced string as a new allocation, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}],["to",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}],["count",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:7250:222","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11605:7660","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11934:24711":{"id":"2:11934:24711","crate_id":2,"name":"starts_with","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a prefix of this\nstring slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nBasic usage:\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.starts_with(\"bana\"));\nassert!(!bananas.starts_with(\"nana\"));\n```","links":{"prim@char":"1:11871:415","self::pattern":"2:11600:7664"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11605:7660","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"5:5399:2197":{"id":"5:5399:2197","crate_id":5,"name":"repeat","span":null,"visibility":"public","docs":"Creates a new [`String`] by repeating a string `n` times.\n\n# Panics\n\nThis function will panic if the capacity would overflow.\n\n# Examples\n\nBasic usage:\n\n```\nassert_eq!(\"abc\".repeat(4), String::from(\"abcabcabcabc\"));\n```\n\nA panic upon overflow:\n\n```should_panic\n// this will panic at runtime\nlet huge = \"0123456789abcdef\".repeat(usize::MAX);\n```","links":{"`String`":"5:7250:222"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["n",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:7250:222","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11928:24117":{"id":"2:11928:24117","crate_id":2,"name":"lines","span":null,"visibility":"public","docs":"An iterator over the lines of a string, as string slices.\n\nLines are split at line endings that are either newlines (`\\n`) or\nsequences of a carriage return followed by a line feed (`\\r\\n`).\n\nLine terminators are not included in the lines returned by the iterator.\n\nThe final line ending is optional. A string that ends with a final line\nending will return the same lines as an otherwise identical string\nwithout a final line ending.\n\n# Examples\n\nBasic usage:\n\n```\nlet text = \"foo\\r\\nbar\\n\\nbaz\\n\";\nlet mut lines = text.lines();\n\nassert_eq!(Some(\"foo\"), lines.next());\nassert_eq!(Some(\"bar\"), lines.next());\nassert_eq!(Some(\"\"), lines.next());\nassert_eq!(Some(\"baz\"), lines.next());\n\nassert_eq!(None, lines.next());\n```\n\nThe final line ending isn't required:\n\n```\nlet text = \"foo\\nbar\\n\\r\\nbaz\";\nlet mut lines = text.lines();\n\nassert_eq!(Some(\"foo\"), lines.next());\nassert_eq!(Some(\"bar\"), lines.next());\nassert_eq!(Some(\"\"), lines.next());\nassert_eq!(Some(\"baz\"), lines.next());\n\nassert_eq!(None, lines.next());\n```","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Lines","id":"2:43414:2169","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11940:19405":{"id":"2:11940:19405","crate_id":2,"name":"find","span":null,"visibility":"public","docs":"Returns the byte index of the first character of this string slice that\nmatches the pattern.\n\nReturns [`None`] if the pattern doesn't match.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nlet s = \"Löwe 老虎 Léopard Gepardi\";\n\nassert_eq!(s.find('L'), Some(0));\nassert_eq!(s.find('é'), Some(14));\nassert_eq!(s.find(\"pard\"), Some(17));\n```\n\nMore complex patterns using point-free style and closures:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\n\nassert_eq!(s.find(char::is_whitespace), Some(5));\nassert_eq!(s.find(char::is_lowercase), Some(1));\nassert_eq!(s.find(|c: char| c.is_whitespace() || c.is_lowercase()), Some(1));\nassert_eq!(s.find(|c: char| (c < 'o') && (c > 'a')), Some(4));\n```\n\nNot finding the pattern:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\nlet x: &[_] = &['1', '2'];\n\nassert_eq!(s.find(x), None);\n```","links":{"`None`":"2:41197:177","prim@char":"1:11871:415","self::pattern":"2:11600:7664"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:41195:179","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11605:7660","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"5:5381":{"id":"5:5381","crate_id":5,"name":null,"span":null,"visibility":"default","docs":"Methods for string slices.","links":{},"attrs":["#[cfg(not(test))]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"kind":"primitive","inner":"str"},"items":["5:5382:31792","5:5383:8012","5:5386:31793","5:5389:31794","5:5397:31795","5:5398:31796","5:5399:2197","5:5400:24550","5:5401:24549"],"negative":false,"synthetic":false,"blanket_impl":null}},"2:11924:27890":{"id":"2:11924:27890","crate_id":2,"name":"char_indices","span":null,"visibility":"public","docs":"Returns an iterator over the [`char`]s of a string slice, and their\npositions.\n\nAs a string slice consists of valid UTF-8, we can iterate through a\nstring slice by [`char`]. This method returns an iterator of both\nthese [`char`]s, as well as their byte positions.\n\nThe iterator yields tuples. The position is first, the [`char`] is\nsecond.\n\n# Examples\n\nBasic usage:\n\n```\nlet word = \"goodbye\";\n\nlet count = word.char_indices().count();\nassert_eq!(7, count);\n\nlet mut char_indices = word.char_indices();\n\nassert_eq!(Some((0, 'g')), char_indices.next());\nassert_eq!(Some((1, 'o')), char_indices.next());\nassert_eq!(Some((2, 'o')), char_indices.next());\nassert_eq!(Some((3, 'd')), char_indices.next());\nassert_eq!(Some((4, 'b')), char_indices.next());\nassert_eq!(Some((5, 'y')), char_indices.next());\nassert_eq!(Some((6, 'e')), char_indices.next());\n\nassert_eq!(None, char_indices.next());\n```\n\nRemember, [`char`]s might not match your intuition about characters:\n\n[`char`]: prim@char\n\n```\nlet yes = \"y̆es\";\n\nlet mut char_indices = yes.char_indices();\n\nassert_eq!(Some((0, 'y')), char_indices.next()); // not (0, 'y̆')\nassert_eq!(Some((1, '\\u{0306}')), char_indices.next());\n\n// note the 3 here - the last character took up two bytes\nassert_eq!(Some((3, 'e')), char_indices.next());\nassert_eq!(Some((4, 's')), char_indices.next());\n\nassert_eq!(None, char_indices.next());\n```","links":{"prim@char":"1:11871:415"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"CharIndices","id":"2:43136:7670","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"5:5382:31792":{"id":"5:5382:31792","crate_id":5,"name":"into_boxed_bytes","span":null,"visibility":"public","docs":"Converts a `Box<str>` into a `Box<[u8]>` without copying or allocating.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"this is a string\";\nlet boxed_str = s.to_owned().into_boxed_str();\nlet boxed_bytes = boxed_str.into_boxed_bytes();\nassert_eq!(*boxed_bytes, *s.as_bytes());\n```","links":{},"attrs":["#[must_use = \"`self` will be dropped if the result is not used\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"resolved_path","inner":{"name":"Box","id":"5:279:1908","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}},{"type":{"kind":"resolved_path","inner":{"name":"Global","id":"5:6999:2058","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}]],"output":{"kind":"resolved_path","inner":{"name":"Box","id":"5:279:1908","args":{"angle_bracketed":{"args":[{"type":{"kind":"slice","inner":{"kind":"primitive","inner":"u8"}}},{"type":{"kind":"resolved_path","inner":{"name":"Global","id":"5:6999:2058","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11984:31128":{"id":"2:11984:31128","crate_id":2,"name":"rmatch_indices","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within `self`,\nyielded in reverse order along with the index of the match.\n\nFor matches of `pat` within `self` that overlap, only the indices\ncorresponding to the last match are returned.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`match_indices`] method can be used.\n\n[`match_indices`]: str::match_indices\n\n# Examples\n\nBasic usage:\n\n```\nlet v: Vec<_> = \"abcXXXabcYYYabc\".rmatch_indices(\"abc\").collect();\nassert_eq!(v, [(12, \"abc\"), (6, \"abc\"), (0, \"abc\")]);\n\nlet v: Vec<_> = \"1abcabc2\".rmatch_indices(\"abc\").collect();\nassert_eq!(v, [(4, \"abc\"), (1, \"abc\")]);\n\nlet v: Vec<_> = \"ababa\".rmatch_indices(\"aba\").collect();\nassert_eq!(v, [(2, \"aba\")]); // only the last `aba`\n```","links":{"self::pattern":"2:11600:7664","`DoubleEndedIterator`":"2:7193:119","prim@char":"1:11871:415","str::match_indices":"2:11981:31127"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"RMatchIndices","id":"2:43328:7680","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11605:7660","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"2:11605:7660","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11620:7661","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11929:31121":{"id":"2:11929:31121","crate_id":2,"name":"lines_any","span":null,"visibility":"public","docs":"An iterator over the lines of a string.","links":{},"attrs":["#[deprecated(since = \"1.4.0\", note = \"use lines() instead now\")]"],"deprecation":{"since":"1.4.0","note":"use lines() instead now"},"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"LinesAny","id":"2:43424:7678","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11937:24713":{"id":"2:11937:24713","crate_id":2,"name":"ends_with","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a suffix of this\nstring slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nBasic usage:\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.ends_with(\"anas\"));\nassert!(!bananas.ends_with(\"nana\"));\n```","links":{"prim@char":"1:11871:415","self::pattern":"2:11600:7664"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11605:7660","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"2:11605:7660","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11620:7661","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11904:31117":{"id":"2:11904:31117","crate_id":2,"name":"ceil_char_boundary","span":null,"visibility":"public","docs":"Finds the closest `x` not below `index` where `is_char_boundary(x)` is `true`.\n\nThis method is the natural complement to [`floor_char_boundary`]. See that method\nfor more details.\n\n[`floor_char_boundary`]: str::floor_char_boundary\n\n# Panics\n\nPanics if `index > self.len()`.\n\n# Examples\n\n```\n#![feature(round_char_boundary)]\nlet s = \"❤️🧡💛💚💙💜\";\nassert_eq!(s.len(), 26);\nassert!(!s.is_char_boundary(13));\n\nlet closest = s.ceil_char_boundary(13);\nassert_eq!(closest, 14);\nassert_eq!(&s[..closest], \"❤️🧡💛\");\n```","links":{"str::floor_char_boundary":"2:11902:31116"},"attrs":["#[unstable(feature = \"round_char_boundary\", issue = \"93743\")]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["index",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"primitive","inner":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11917:25066":{"id":"2:11917:25066","crate_id":2,"name":"get_unchecked_mut","span":null,"visibility":"public","docs":"Returns a mutable, unchecked subslice of `str`.\n\nThis is the unchecked alternative to indexing the `str`.\n\n# Safety\n\nCallers of this function are responsible that these preconditions are\nsatisfied:\n\n* The starting index must not exceed the ending index;\n* Indexes must be within bounds of the original slice;\n* Indexes must lie on UTF-8 sequence boundaries.\n\nFailing that, the returned string slice may reference invalid memory or\nviolate the invariants communicated by the `str` type.\n\n# Examples\n\n```\nlet mut v = String::from(\"🗻∈🌏\");\nunsafe {\n    assert_eq!(\"🗻\", v.get_unchecked_mut(0..4));\n    assert_eq!(\"∈\", v.get_unchecked_mut(4..7));\n    assert_eq!(\"🌏\", v.get_unchecked_mut(7..11));\n}\n```","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["i",{"kind":"generic","inner":"I"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"qualified_path","inner":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"I"},"trait":{"name":"SliceIndex","id":"2:9780:220","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}}}}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"2:9780:220","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}},"2:11913:25064":{"id":"2:11913:25064","crate_id":2,"name":"get_mut","span":null,"visibility":"public","docs":"Returns a mutable subslice of `str`.\n\nThis is the non-panicking alternative to indexing the `str`. Returns\n[`None`] whenever equivalent indexing operation would panic.\n\n# Examples\n\n```\nlet mut v = String::from(\"hello\");\n// correct length\nassert!(v.get_mut(0..5).is_some());\n// out of bounds\nassert!(v.get_mut(..42).is_none());\nassert_eq!(Some(\"he\"), v.get_mut(0..2).map(|v| &*v));\n\nassert_eq!(\"hello\", v);\n{\n    let s = v.get_mut(0..2);\n    let s = s.map(|s| {\n        s.make_ascii_uppercase();\n        &*s\n    });\n    assert_eq!(Some(\"HE\"), s);\n}\nassert_eq!(\"HEllo\", v);\n```","links":{"`None`":"2:41197:177"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["i",{"kind":"generic","inner":"I"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:41195:179","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"qualified_path","inner":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"I"},"trait":{"name":"SliceIndex","id":"2:9780:220","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}}}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"2:9780:220","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:12001:20202":{"id":"2:12001:20202","crate_id":2,"name":"strip_prefix","span":null,"visibility":"public","docs":"Returns a string slice with the prefix removed.\n\nIf the string starts with the pattern `prefix`, returns substring after the prefix, wrapped\nin `Some`.  Unlike `trim_start_matches`, this method removes the prefix exactly once.\n\nIf the string does not start with `prefix`, returns `None`.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nassert_eq!(\"foo:bar\".strip_prefix(\"foo:\"), Some(\"bar\"));\nassert_eq!(\"foo:bar\".strip_prefix(\"bar\"), None);\nassert_eq!(\"foofoo\".strip_prefix(\"foo\"), Some(\"foo\"));\n```","links":{"prim@char":"1:11871:415","self::pattern":"2:11600:7664"},"attrs":["#[must_use =\n\"this returns the remaining substring as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["prefix",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:41195:179","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11605:7660","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11920:31120":{"id":"2:11920:31120","crate_id":2,"name":"slice_mut_unchecked","span":null,"visibility":"public","docs":"Creates a string slice from another string slice, bypassing safety\nchecks.\nThis is generally not recommended, use with caution! For a safe\nalternative see [`str`] and [`IndexMut`].\n\n[`IndexMut`]: crate::ops::IndexMut\n\nThis new slice goes from `begin` to `end`, including `begin` but\nexcluding `end`.\n\nTo get an immutable string slice instead, see the\n[`slice_unchecked`] method.\n\n[`slice_unchecked`]: str::slice_unchecked\n\n# Safety\n\nCallers of this function are responsible that three preconditions are\nsatisfied:\n\n* `begin` must not exceed `end`.\n* `begin` and `end` must be byte positions within the string slice.\n* `begin` and `end` must lie on UTF-8 sequence boundaries.","links":{"`str`":"1:11877:1388","crate::ops::IndexMut":"2:2973:2069","str::slice_unchecked":"2:11919:31119"},"attrs":["#[deprecated(since = \"1.29.0\", note =\n\"use `get_unchecked_mut(begin..end)` instead\")]"],"deprecation":{"since":"1.29.0","note":"use `get_unchecked_mut(begin..end)` instead"},"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["begin",{"kind":"primitive","inner":"usize"}],["end",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}},"2:11921:25089":{"id":"2:11921:25089","crate_id":2,"name":"split_at","span":null,"visibility":"public","docs":"Divide one string slice into two at an index.\n\nThe argument, `mid`, should be a byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get mutable string slices instead, see the [`split_at_mut`]\nmethod.\n\n[`split_at_mut`]: str::split_at_mut\n\n# Panics\n\nPanics if `mid` is not on a UTF-8 code point boundary, or if it is\npast the end of the last code point of the string slice.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"Per Martin-Löf\";\n\nlet (first, last) = s.split_at(3);\n\nassert_eq!(\"Per\", first);\nassert_eq!(\" Martin-Löf\", last);\n```","links":{"str::split_at_mut":"2:11922:25090"},"attrs":["#[must_use]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["mid",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"tuple","inner":[{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11978:31126":{"id":"2:11978:31126","crate_id":2,"name":"rmatches","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within this string slice,\nyielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`matches`] method can be used.\n\n[`matches`]: str::matches\n\n# Examples\n\nBasic usage:\n\n```\nlet v: Vec<&str> = \"abcXXXabcYYYabc\".rmatches(\"abc\").collect();\nassert_eq!(v, [\"abc\", \"abc\", \"abc\"]);\n\nlet v: Vec<&str> = \"1abc2abc3\".rmatches(char::is_numeric).collect();\nassert_eq!(v, [\"3\", \"2\", \"1\"]);\n```","links":{"self::pattern":"2:11600:7664","`DoubleEndedIterator`":"2:7193:119","prim@char":"1:11871:415","str::matches":"2:11975:1877"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"RMatches","id":"2:43382:7682","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11605:7660","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"2:11605:7660","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11620:7661","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:12019:26322":{"id":"2:12019:26322","crate_id":2,"name":"as_ascii","span":null,"visibility":"public","docs":"If this string slice [`is_ascii`](Self::is_ascii), returns it as a slice\nof [ASCII characters](`ascii::Char`), otherwise returns `None`.","links":{"`ascii::Char`":"2:39353:26317","Self::is_ascii":"2:12018:24551"},"attrs":["#[unstable(feature = \"ascii_char\", issue = \"110998\")]","#[must_use]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:41195:179","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"slice","inner":{"kind":"resolved_path","inner":{"name":"AsciiChar","id":"2:39353:26317","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11901:31115":{"id":"2:11901:31115","crate_id":2,"name":"is_char_boundary","span":null,"visibility":"public","docs":"Checks that `index`-th byte is the first byte in a UTF-8 code point\nsequence or the end of the string.\n\nThe start and end of the string (when `index == self.len()`) are\nconsidered to be boundaries.\n\nReturns `false` if `index` is greater than `self.len()`.\n\n# Examples\n\n```\nlet s = \"Löwe 老虎 Léopard\";\nassert!(s.is_char_boundary(0));\n// start of `老`\nassert!(s.is_char_boundary(6));\nassert!(s.is_char_boundary(s.len()));\n\n// second byte of `ö`\nassert!(!s.is_char_boundary(2));\n\n// third byte of `老`\nassert!(!s.is_char_boundary(8));\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["index",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11908:31118":{"id":"2:11908:31118","crate_id":2,"name":"as_bytes_mut","span":null,"visibility":"public","docs":"Converts a mutable string slice to a mutable byte slice.\n\n# Safety\n\nThe caller must ensure that the content of the slice is valid UTF-8\nbefore the borrow ends and the underlying `str` is used.\n\nUse of a `str` whose contents are not valid UTF-8 is undefined behavior.\n\n# Examples\n\nBasic usage:\n\n```\nlet mut s = String::from(\"Hello\");\nlet bytes = unsafe { s.as_bytes_mut() };\n\nassert_eq!(b\"Hello\", bytes);\n```\n\nMutability:\n\n```\nlet mut s = String::from(\"🗻∈🌏\");\n\nunsafe {\n    let bytes = s.as_bytes_mut();\n\n    bytes[0] = 0xF0;\n    bytes[1] = 0x9F;\n    bytes[2] = 0x8D;\n    bytes[3] = 0x94;\n}\n\nassert_eq!(\"🍔∈🌏\", s);\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"slice","inner":{"kind":"primitive","inner":"u8"}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}},"5:5383:8012":{"id":"5:5383:8012","crate_id":5,"name":"replace","span":null,"visibility":"public","docs":"Replaces all matches of a pattern with another string.\n\n`replace` creates a new [`String`], and copies the data from this string slice into it.\nWhile doing so, it attempts to find matches of a pattern. If it finds any, it\nreplaces them with the replacement string slice.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"this is old\";\n\nassert_eq!(\"this is new\", s.replace(\"old\", \"new\"));\nassert_eq!(\"than an old\", s.replace(\"is\", \"an\"));\n```\n\nWhen the pattern doesn't match, it returns this string slice as [`String`]:\n\n```\nlet s = \"this is old\";\nassert_eq!(s, s.replace(\"cookie monster\", \"little lamb\"));\n```","links":{"`String`":"5:7250:222"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the replaced string as a new allocation, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["from",{"kind":"generic","inner":"P"}],["to",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:7250:222","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11605:7660","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11931:25106":{"id":"2:11931:25106","crate_id":2,"name":"contains","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a sub-slice of\nthis string slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nBasic usage:\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.contains(\"nana\"));\nassert!(!bananas.contains(\"apples\"));\n```","links":{"prim@char":"1:11871:415","self::pattern":"2:11600:7664"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11605:7660","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"5:5397:31795":{"id":"5:5397:31795","crate_id":5,"name":"to_uppercase","span":null,"visibility":"public","docs":"Returns the uppercase equivalent of this string slice, as a new [`String`].\n\n'Uppercase' is defined according to the terms of the Unicode Derived Core Property\n`Uppercase`.\n\nSince some characters can expand into multiple characters when changing\nthe case, this function returns a [`String`] instead of modifying the\nparameter in-place.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"hello\";\n\nassert_eq!(\"HELLO\", s.to_uppercase());\n```\n\nScripts without case are not changed:\n\n```\nlet new_year = \"农历新年\";\n\nassert_eq!(new_year, new_year.to_uppercase());\n```\n\nOne character can become multiple:\n```\nlet s = \"tschüß\";\n\nassert_eq!(\"TSCHÜSS\", s.to_uppercase());\n```","links":{"`String`":"5:7250:222"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the uppercase string as a new String, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:7250:222","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11981:31127":{"id":"2:11981:31127","crate_id":2,"name":"match_indices","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within this string\nslice as well as the index that the match starts at.\n\nFor matches of `pat` within `self` that overlap, only the indices\ncorresponding to the first match are returned.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rmatch_indices`] method can be used.\n\n[`rmatch_indices`]: str::rmatch_indices\n\n# Examples\n\nBasic usage:\n\n```\nlet v: Vec<_> = \"abcXXXabcYYYabc\".match_indices(\"abc\").collect();\nassert_eq!(v, [(0, \"abc\"), (6, \"abc\"), (12, \"abc\")]);\n\nlet v: Vec<_> = \"1abcabc2\".match_indices(\"abc\").collect();\nassert_eq!(v, [(1, \"abc\"), (4, \"abc\")]);\n\nlet v: Vec<_> = \"ababa\".match_indices(\"aba\").collect();\nassert_eq!(v, [(0, \"aba\")]); // only the first `aba`\n```","links":{"self::pattern":"2:11600:7664","`DoubleEndedIterator`":"2:7193:119","prim@char":"1:11871:415","str::rmatch_indices":"2:11984:31128"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"MatchIndices","id":"2:43310:7679","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11605:7660","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:0:1659":{"id":"0:0:1659","crate_id":0,"name":"winapi","span":{"filename":"src/lib.rs","begin":[6,0],"end":[71,1]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"module","inner":{"is_crate":true,"items":[],"is_stripped":false}},"2:12021:24548":{"id":"2:12021:24548","crate_id":2,"name":"make_ascii_uppercase","span":null,"visibility":"public","docs":"Converts this string to its ASCII upper case equivalent in-place.\n\nASCII letters 'a' to 'z' are mapped to 'A' to 'Z',\nbut non-ASCII letters are unchanged.\n\nTo return a new uppercased value without modifying the existing one, use\n[`to_ascii_uppercase()`].\n\n[`to_ascii_uppercase()`]: #method.to_ascii_uppercase\n\n# Examples\n\n```\nlet mut s = String::from(\"Grüße, Jürgen ❤\");\n\ns.make_ascii_uppercase();\n\nassert_eq!(\"GRüßE, JüRGEN ❤\", s);\n```","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11930:27808":{"id":"2:11930:27808","crate_id":2,"name":"encode_utf16","span":null,"visibility":"public","docs":"Returns an iterator of `u16` over the string encoded as UTF-16.\n\n# Examples\n\nBasic usage:\n\n```\nlet text = \"Zażółć gęślą jaźń\";\n\nlet utf8_len = text.len();\nlet utf16_len = text.encode_utf16().count();\n\nassert!(utf16_len <= utf8_len);\n```","links":{},"attrs":["#[must_use =\n\"this returns the encoded string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"EncodeUtf16","id":"2:43452:7665","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11926:27792":{"id":"2:11926:27792","crate_id":2,"name":"split_whitespace","span":null,"visibility":"public","docs":"Splits a string slice by whitespace.\n\nThe iterator returned will return string slices that are sub-slices of\nthe original string slice, separated by any amount of whitespace.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`. If you only want to split on ASCII whitespace\ninstead, use [`split_ascii_whitespace`].\n\n[`split_ascii_whitespace`]: str::split_ascii_whitespace\n\n# Examples\n\nBasic usage:\n\n```\nlet mut iter = \"A few words\".split_whitespace();\n\nassert_eq!(Some(\"A\"), iter.next());\nassert_eq!(Some(\"few\"), iter.next());\nassert_eq!(Some(\"words\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nAll kinds of whitespace are considered:\n\n```\nlet mut iter = \" Mary   had\\ta\\u{2009}little  \\n\\t lamb\".split_whitespace();\nassert_eq!(Some(\"Mary\"), iter.next());\nassert_eq!(Some(\"had\"), iter.next());\nassert_eq!(Some(\"a\"), iter.next());\nassert_eq!(Some(\"little\"), iter.next());\nassert_eq!(Some(\"lamb\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nIf the string is empty or all whitespace, the iterator yields no string slices:\n```\nassert_eq!(\"\".split_whitespace().next(), None);\nassert_eq!(\"   \".split_whitespace().next(), None);\n```","links":{"str::split_ascii_whitespace":"2:11927:27802"},"attrs":["#[must_use =\n\"this returns the split string as an iterator, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_split_whitespace\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"SplitWhitespace","id":"2:43434:7667","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11900:19830":{"id":"2:11900:19830","crate_id":2,"name":"is_empty","span":null,"visibility":"public","docs":"Returns `true` if `self` has a length of zero bytes.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\";\nassert!(s.is_empty());\n\nlet s = \"not empty\";\nassert!(!s.is_empty());\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11969:31124":{"id":"2:11969:31124","crate_id":2,"name":"split_once","span":null,"visibility":"public","docs":"Splits the string on the first occurrence of the specified delimiter and\nreturns prefix before delimiter and suffix after delimiter.\n\n# Examples\n\n```\nassert_eq!(\"cfg\".split_once('='), None);\nassert_eq!(\"cfg=\".split_once('='), Some((\"cfg\", \"\")));\nassert_eq!(\"cfg=foo\".split_once('='), Some((\"cfg\", \"foo\")));\nassert_eq!(\"cfg=foo=bar\".split_once('='), Some((\"cfg\", \"foo=bar\")));\n```","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["delimiter",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:41195:179","args":{"angle_bracketed":{"args":[{"type":{"kind":"tuple","inner":[{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}},{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11605:7660","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11998:31135":{"id":"2:11998:31135","crate_id":2,"name":"trim_start_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. `start` in this context means the first\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be left side, and for right-to-left languages like\nArabic or Hebrew, this will be the right side.\n\n# Examples\n\nBasic usage:\n\n```\nassert_eq!(\"11foo1bar11\".trim_start_matches('1'), \"foo1bar11\");\nassert_eq!(\"123foo1bar123\".trim_start_matches(char::is_numeric), \"foo1bar123\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_start_matches(x), \"foo1bar12\");\n```","links":{"prim@char":"1:11871:415","self::pattern":"2:11600:7664"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11605:7660","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"5:5389:31794":{"id":"5:5389:31794","crate_id":5,"name":"to_lowercase","span":null,"visibility":"public","docs":"Returns the lowercase equivalent of this string slice, as a new [`String`].\n\n'Lowercase' is defined according to the terms of the Unicode Derived Core Property\n`Lowercase`.\n\nSince some characters can expand into multiple characters when changing\nthe case, this function returns a [`String`] instead of modifying the\nparameter in-place.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"HELLO\";\n\nassert_eq!(\"hello\", s.to_lowercase());\n```\n\nA tricky example, with sigma:\n\n```\nlet sigma = \"Σ\";\n\nassert_eq!(\"σ\", sigma.to_lowercase());\n\n// but at the end of a word, it's ς, not σ:\nlet odysseus = \"ὈΔΥΣΣΕΎΣ\";\n\nassert_eq!(\"ὀδυσσεύς\", odysseus.to_lowercase());\n```\n\nLanguages without case are not changed:\n\n```\nlet new_year = \"农历新年\";\n\nassert_eq!(new_year, new_year.to_lowercase());\n```","links":{"`String`":"5:7250:222"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the lowercase string as a new String, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:7250:222","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:12004:25107":{"id":"2:12004:25107","crate_id":2,"name":"strip_suffix","span":null,"visibility":"public","docs":"Returns a string slice with the suffix removed.\n\nIf the string ends with the pattern `suffix`, returns the substring before the suffix,\nwrapped in `Some`.  Unlike `trim_end_matches`, this method removes the suffix exactly once.\n\nIf the string does not end with `suffix`, returns `None`.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nassert_eq!(\"bar:foo\".strip_suffix(\":foo\"), Some(\"bar\"));\nassert_eq!(\"bar:foo\".strip_suffix(\"bar\"), None);\nassert_eq!(\"foofoo\".strip_suffix(\"foo\"), Some(\"foo\"));\n```","links":{"prim@char":"1:11871:415","self::pattern":"2:11600:7664"},"attrs":["#[must_use =\n\"this returns the remaining substring as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["suffix",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:41195:179","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11605:7660","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"2:11605:7660","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11620:7661","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11944:19406":{"id":"2:11944:19406","crate_id":2,"name":"rfind","span":null,"visibility":"public","docs":"Returns the byte index for the first character of the last match of the pattern in\nthis string slice.\n\nReturns [`None`] if the pattern doesn't match.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nlet s = \"Löwe 老虎 Léopard Gepardi\";\n\nassert_eq!(s.rfind('L'), Some(13));\nassert_eq!(s.rfind('é'), Some(14));\nassert_eq!(s.rfind(\"pard\"), Some(24));\n```\n\nMore complex patterns with closures:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\n\nassert_eq!(s.rfind(char::is_whitespace), Some(12));\nassert_eq!(s.rfind(char::is_lowercase), Some(20));\n```\n\nNot finding the pattern:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\nlet x: &[_] = &['1', '2'];\n\nassert_eq!(s.rfind(x), None);\n```","links":{"`None`":"2:41197:177","prim@char":"1:11871:415","self::pattern":"2:11600:7664"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:41195:179","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11605:7660","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"2:11605:7660","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11620:7661","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:12025:1986":{"id":"2:12025:1986","crate_id":2,"name":"escape_default","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_default`].\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"❤\\n!\".escape_default() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"❤\\n!\".escape_default());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"\\\\u{{2764}}\\\\n!\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"❤\\n!\".escape_default().to_string(), \"\\\\u{2764}\\\\n!\");\n```","links":{"`char::escape_default`":"2:4527:1986"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"EscapeDefault","id":"2:43468:1987","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"paths":{"2:47239:7558":{"crate_id":2,"path":["core","core_arch","x86","__m256"],"kind":"struct"},"17:13678:19366":{"crate_id":17,"path":["object","pe","ImageAlphaRuntimeFunctionEntry"],"kind":"struct"},"17:13332:19339":{"crate_id":17,"path":["object","pe","ImageTlsDirectory64"],"kind":"struct"},"2:41313:2321":{"crate_id":2,"path":["core","panic","panic_info","PanicInfo"],"kind":"struct"},"16:5616:15094":{"crate_id":16,"path":["gimli","read","cfi","ParsedEhFrameHdr"],"kind":"struct"},"16:6179:15114":{"crate_id":16,"path":["gimli","read","dwarf","Dwarf"],"kind":"struct"},"1:8828:2399":{"crate_id":1,"path":["std","sync","mpsc","TryRecvError"],"kind":"enum"},"1:8198:2214":{"crate_id":1,"path":["std","os","unix","net","addr","SocketAddr"],"kind":"struct"},"17:13698:19368":{"crate_id":17,"path":["object","pe","ImageEnclaveConfig32"],"kind":"struct"},"17:13159:19324":{"crate_id":17,"path":["object","pe","ImageSymbolExBytes"],"kind":"struct"},"17:13651:19363":{"crate_id":17,"path":["object","pe","ImageArmRuntimeFunctionEntry"],"kind":"struct"},"2:43039:7645":{"crate_id":2,"path":["core","slice","iter","RChunks"],"kind":"struct"},"17:13240:19331":{"crate_id":17,"path":["object","pe","ImageRelocation"],"kind":"struct"},"6:5935:12936":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","regex_t"],"kind":"struct"},"2:42204:67":{"crate_id":2,"path":["core","fmt","rt","Alignment"],"kind":"enum"},"17:10840:15287":{"crate_id":17,"path":["object","read","SymbolIndex"],"kind":"struct"},"17:11721:18550":{"crate_id":17,"path":["object","macho","DyldCacheHeader"],"kind":"struct"},"6:4422:12235":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_absinfo"],"kind":"struct"},"17:12622:15296":{"crate_id":17,"path":["object","macho","Relocation"],"kind":"struct"},"1:7932:2186":{"crate_id":1,"path":["std","io","error","ErrorKind"],"kind":"enum"},"18:681:19412":{"crate_id":18,"path":["memchr","memmem","Finder"],"kind":"struct"},"1:11321:2221":{"crate_id":1,"path":["std","sys_common","net","TcpStream"],"kind":"struct"},"16:7743:15177":{"crate_id":16,"path":["gimli","read","unit","DebugInfo"],"kind":"struct"},"1:11476:14126":{"crate_id":1,"path":["std","backtrace_rs","backtrace","Frame"],"kind":"struct"},"17:10897:15290":{"crate_id":17,"path":["object","read","SymbolMapName"],"kind":"struct"},"16:2967:14197":{"crate_id":16,"path":["gimli","common","SectionId"],"kind":"enum"},"2:20486:28766":{"crate_id":2,"path":["core","core_simd","swizzle","interleave","Hi"],"kind":"struct"},"6:1617:9713":{"crate_id":6,"path":["libc","unix","linux_like","lconv"],"kind":"struct"},"1:2213:2119":{"crate_id":1,"path":["std","fs","read_to_string"],"kind":"function"},"17:13385:19344":{"crate_id":17,"path":["object","pe","ImageDelayloadDescriptor"],"kind":"struct"},"5:1980:2050":{"crate_id":5,"path":["alloc","collections","btree","map","Cursor"],"kind":"struct"},"2:40288:7992":{"crate_id":2,"path":["core","iter","adapters","zip","Zip"],"kind":"struct"},"16:4480:14728":{"crate_id":16,"path":["gimli","constants","DwLle"],"kind":"struct"},"2:40471:7960":{"crate_id":2,"path":["core","iter","sources","from_fn","FromFn"],"kind":"struct"},"6:4521:12247":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_ff_upload"],"kind":"struct"},"6:4834:12279":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlattr"],"kind":"struct"},"2:43178:7649":{"crate_id":2,"path":["core","str","iter","RSplit"],"kind":"struct"},"2:45425:2500":{"crate_id":2,"path":["core","core_arch","simd","i8x16"],"kind":"struct"},"2:39835:7676":{"crate_id":2,"path":["core","char","EscapeUnicode"],"kind":"struct"},"6:5947:12937":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","Elf64_Chdr"],"kind":"struct"},"16:7478:15161":{"crate_id":16,"path":["gimli","read","pubnames","DebugPubNames"],"kind":"struct"},"17:11011:15243":{"crate_id":17,"path":["object","read","CodeView"],"kind":"struct"},"6:4455:12239":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_trigger"],"kind":"struct"},"2:20712:2252":{"crate_id":2,"path":["core","core_simd","elements","sealed","Sealed"],"kind":"trait"},"6:4387:12231":{"crate_id":6,"path":["libc","unix","linux_like","linux","msginfo"],"kind":"struct"},"2:40500:2200":{"crate_id":2,"path":["core","iter","sources","repeat","Repeat"],"kind":"struct"},"5:632:30661":{"crate_id":5,"path":["alloc","boxed","from","StringError"],"kind":"struct"},"17:13506:19357":{"crate_id":17,"path":["object","pe","ImageEpilogueDynamicRelocationHeader"],"kind":"struct"},"5:5034:2376":{"crate_id":5,"path":["alloc","rc","Weak"],"kind":"struct"},"6:4715:12264":{"crate_id":6,"path":["libc","unix","linux_like","linux","arpd_request"],"kind":"struct"},"2:47181:2482":{"crate_id":2,"path":["core","core_arch","simd","f64x8"],"kind":"struct"},"1:6005:19816":{"crate_id":1,"path":["std","sync","mpmc","list","Channel"],"kind":"struct"},"2:22445:2230":{"crate_id":2,"path":["core","num","nonzero","NonZeroIsize"],"kind":"struct"},"1:10452:1968":{"crate_id":1,"path":["std","sys","unix","thread","Thread"],"kind":"struct"},"17:12236:18578":{"crate_id":17,"path":["object","macho","DylibModule32"],"kind":"struct"},"2:21427:2252":{"crate_id":2,"path":["core","core_simd","vector","sealed","Sealed"],"kind":"trait"},"2:2780:8027":{"crate_id":2,"path":["core","ops","arith","MulAssign"],"kind":"trait"},"2:8309:7660":{"crate_id":2,"path":["core","panicking","assert_matches_failed","Pattern"],"kind":"struct"},"11:632:2011":{"crate_id":11,"path":["hashbrown","map","Iter"],"kind":"struct"},"17:10885:15289":{"crate_id":17,"path":["object","read","SymbolMap"],"kind":"struct"},"17:13488:19355":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation64V2"],"kind":"struct"},"1:8377:2337":{"crate_id":1,"path":["std","path","State"],"kind":"enum"},"6:5923:12935":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ntptimeval"],"kind":"struct"},"16:6293:15119":{"crate_id":16,"path":["gimli","read","reader","ReaderOffsetId"],"kind":"struct"},"2:21800:29855":{"crate_id":2,"path":["core","num","fmt","Formatted"],"kind":"struct"},"17:11520:18059":{"crate_id":17,"path":["object","elf","Dyn32"],"kind":"struct"},"11:1534:14092":{"crate_id":11,"path":["hashbrown","rustc_entry","RustcOccupiedEntry"],"kind":"struct"},"2:6674:29360":{"crate_id":2,"path":["core","iter","adapters","GenericShunt"],"kind":"struct"},"11:353:32753":{"crate_id":11,"path":["hashbrown","raw","RawDrain"],"kind":"struct"},"17:11446:18054":{"crate_id":17,"path":["object","elf","Rela32"],"kind":"struct"},"1:8156:2218":{"crate_id":1,"path":["std","net","tcp","IntoIncoming"],"kind":"struct"},"5:3533:2011":{"crate_id":5,"path":["alloc","collections","linked_list","Iter"],"kind":"struct"},"17:12563:18600":{"crate_id":17,"path":["object","macho","DataInCodeEntry"],"kind":"struct"},"6:1900:9864":{"crate_id":6,"path":["libc","unix","linux_like","linux","fpos64_t"],"kind":"enum"},"1:638:1992":{"crate_id":1,"path":["std","backtrace","BacktraceSymbol"],"kind":"struct"},"6:532:8797":{"crate_id":6,"path":["libc","unix","hostent"],"kind":"struct"},"6:5034:12299":{"crate_id":6,"path":["libc","unix","linux_like","linux","ifreq"],"kind":"struct"},"2:30119:28091":{"crate_id":2,"path":["core","ptr","alignment","AlignmentEnum16"],"kind":"enum"},"1:6582:215":{"crate_id":1,"path":["std","sync","rwlock","RwLock"],"kind":"struct"},"1:9071:2434":{"crate_id":1,"path":["std","time","SystemTimeError"],"kind":"struct"},"2:9780:220":{"crate_id":2,"path":["core","slice","index","SliceIndex"],"kind":"trait"},"9:421:13971":{"crate_id":9,"path":["miniz_oxide","MZStatus"],"kind":"enum"},"2:42699:8162":{"crate_id":2,"path":["core","slice","sort","TimSortRun"],"kind":"struct"},"2:41280:2320":{"crate_id":2,"path":["core","panic","location","Location"],"kind":"struct"},"17:8683:15244":{"crate_id":17,"path":["object","endian","U16Bytes"],"kind":"struct"},"2:22346:169":{"crate_id":2,"path":["core","num","nonzero","NonZeroI32"],"kind":"struct"},"6:5705:12862":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","statx"],"kind":"struct"},"17:8632:15240":{"crate_id":17,"path":["object","endian","Endianness"],"kind":"enum"},"16:6575:15138":{"crate_id":16,"path":["gimli","read","line","LineInstruction"],"kind":"enum"},"16:7498:15163":{"crate_id":16,"path":["gimli","read","pubtypes","PubTypesEntry"],"kind":"struct"},"15:0:1769":{"crate_id":15,"path":["addr2line"],"kind":"module"},"1:2367:2133":{"crate_id":1,"path":["std","fs","read_dir"],"kind":"function"},"11:1628:32763":{"crate_id":11,"path":["hashbrown","scopeguard","ScopeGuard"],"kind":"struct"},"16:7543:15167":{"crate_id":16,"path":["gimli","read","rnglists","DebugRngLists"],"kind":"struct"},"5:3621:30276":{"crate_id":5,"path":["alloc","collections","linked_list","drop","DropGuard"],"kind":"struct"},"16:4624:14752":{"crate_id":16,"path":["gimli","constants","DwVirtuality"],"kind":"struct"},"1:3163:2192":{"crate_id":1,"path":["std","io","stdio","Stdin"],"kind":"struct"},"11:2205:2009":{"crate_id":11,"path":["hashbrown","TryReserveError"],"kind":"enum"},"2:3999:28693":{"crate_id":2,"path":["core","asserting","TryCaptureWithDebug"],"kind":"struct"},"1:11483:14126":{"crate_id":1,"path":["std","backtrace_rs","backtrace","libunwind","Frame"],"kind":"enum"},"16:4037:14381":{"crate_id":16,"path":["gimli","constants","DwTag"],"kind":"struct"},"1:9868:20133":{"crate_id":1,"path":["std","sys","unix","net","Socket"],"kind":"struct"},"11:2178:32748":{"crate_id":11,"path":["hashbrown","raw","sse2","Group"],"kind":"struct"},"16:4932:14844":{"crate_id":16,"path":["gimli","constants","DwDefaulted"],"kind":"struct"},"16:6132:15113":{"crate_id":16,"path":["gimli","read","cfi","CallFrameInstructionIter"],"kind":"struct"},"1:2864:126":{"crate_id":1,"path":["std","io","error","Error"],"kind":"struct"},"6:6639:9641":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statfs64"],"kind":"struct"},"9:352:13985":{"crate_id":9,"path":["miniz_oxide","inflate","TINFLStatus"],"kind":"enum"},"1:7561:2252":{"crate_id":1,"path":["std","sealed","Sealed"],"kind":"trait"},"16:8269:126":{"crate_id":16,"path":["gimli","read","Error"],"kind":"enum"},"1:3127:22620":{"crate_id":1,"path":["std","io","stdio","StdoutRaw"],"kind":"struct"},"1:901:2016":{"crate_id":1,"path":["std","collections","hash","map","Drain"],"kind":"struct"},"16:8129:15188":{"crate_id":16,"path":["gimli","read","unit","EntriesTreeNode"],"kind":"struct"},"2:40190:7986":{"crate_id":2,"path":["core","iter","adapters","peekable","Peekable"],"kind":"struct"},"16:5944:15108":{"crate_id":16,"path":["gimli","read","cfi","UnwindTable"],"kind":"struct"},"2:12393:105":{"crate_id":2,"path":["core","task","wake","Context"],"kind":"struct"},"17:9826:15335":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdatIterator"],"kind":"struct"},"1:11892:1482":{"crate_id":1,"path":["std","u128"],"kind":"primitive"},"5:5234:7621":{"crate_id":5,"path":["alloc","slice","Concat"],"kind":"trait"},"1:635:1991":{"crate_id":1,"path":["std","backtrace","BacktraceFrame"],"kind":"struct"},"1:11885:739":{"crate_id":1,"path":["std","i32"],"kind":"primitive"},"11:815:2021":{"crate_id":11,"path":["hashbrown","map","RawEntryBuilderMut"],"kind":"struct"},"6:4573:12252":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Ehdr"],"kind":"struct"},"1:10921:19814":{"crate_id":1,"path":["std","sys","unix","process","process_inner","do_exec","Reset"],"kind":"struct"},"6:4915:12287":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_nxtinfo"],"kind":"struct"},"17:1787:15342":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbolIterator"],"kind":"struct"},"5:5794:69":{"crate_id":5,"path":["alloc","sync","Arc"],"kind":"struct"},"17:386:15256":{"crate_id":17,"path":["object","read","any","Segment"],"kind":"struct"},"2:38974:198":{"crate_id":2,"path":["core","ops","range","RangeFull"],"kind":"struct"},"17:9796:15341":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbol"],"kind":"struct"},"1:7788:2140":{"crate_id":1,"path":["std","fs","FileTimes"],"kind":"struct"},"6:7485:12449":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_condattr_t"],"kind":"struct"},"2:30049:2046":{"crate_id":2,"path":["core","mem","manually_drop","ManuallyDrop"],"kind":"struct"},"17:13145:19323":{"crate_id":17,"path":["object","pe","ImageSymbolEx"],"kind":"struct"},"17:10316:15401":{"crate_id":17,"path":["object","read","macho","section","MachOSectionInternal"],"kind":"struct"},"16:6662:15139":{"crate_id":16,"path":["gimli","read","line","LineInstructions"],"kind":"struct"},"1:10347:19826":{"crate_id":1,"path":["std","sys","unix","stack_overflow","Handler"],"kind":"struct"},"17:8909:2172":{"crate_id":17,"path":["object","read","util","Bytes"],"kind":"struct"},"16:6321:15121":{"crate_id":16,"path":["gimli","read","abbrev","AbbreviationsCache"],"kind":"struct"},"1:3610:2217":{"crate_id":1,"path":["std","net","socket_addr","ToSocketAddrs"],"kind":"trait"},"17:9028:15275":{"crate_id":17,"path":["object","read","any","SegmentIterator"],"kind":"struct"},"2:41133:2223":{"crate_id":2,"path":["core","net","parser","AddrParseError"],"kind":"struct"},"1:11362:2220":{"crate_id":1,"path":["std","sys_common","net","TcpListener"],"kind":"struct"},"17:13309:19336":{"crate_id":17,"path":["object","pe","ImageImportByName"],"kind":"struct"},"1:11889:1483":{"crate_id":1,"path":["std","u16"],"kind":"primitive"},"1:8726:184":{"crate_id":1,"path":["std","process","Output"],"kind":"struct"},"1:4637:2277":{"crate_id":1,"path":["std","os","linux","process","CommandExt"],"kind":"trait"},"6:6679:13355":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_fpxreg"],"kind":"struct"},"2:9321:143":{"crate_id":2,"path":["core","hash","Hasher"],"kind":"trait"},"2:40225:7989":{"crate_id":2,"path":["core","iter","adapters","skip","Skip"],"kind":"struct"},"16:2404:14174":{"crate_id":16,"path":["gimli","common","DebugAddrBase"],"kind":"struct"},"16:7103:15154":{"crate_id":16,"path":["gimli","read","op","Operation"],"kind":"enum"},"2:40209:7988":{"crate_id":2,"path":["core","iter","adapters","scan","Scan"],"kind":"struct"},"17:11532:18060":{"crate_id":17,"path":["object","elf","Dyn64"],"kind":"struct"},"2:21771:28171":{"crate_id":2,"path":["core","num","fmt","Part"],"kind":"enum"},"17:11969:18561":{"crate_id":17,"path":["object","macho","Section64"],"kind":"struct"},"17:10721:15460":{"crate_id":17,"path":["object","read","pe","rich","RichHeaderInfo"],"kind":"struct"},"17:13265:19334":{"crate_id":17,"path":["object","pe","ImageArchiveMemberHeader"],"kind":"struct"},"2:4799:791":{"crate_id":2,"path":["core","iter"],"kind":"module"},"2:46997:2514":{"crate_id":2,"path":["core","core_arch","simd","u32x16"],"kind":"struct"},"1:5330:2349":{"crate_id":1,"path":["std","process","ChildStdin"],"kind":"struct"},"16:7767:15179":{"crate_id":16,"path":["gimli","read","unit","UnitType"],"kind":"enum"},"1:8908:1962":{"crate_id":1,"path":["std","sync","mpmc","context","Inner"],"kind":"struct"},"2:47254:7559":{"crate_id":2,"path":["core","core_arch","x86","__m256d"],"kind":"struct"},"2:7271:157":{"crate_id":2,"path":["core","iter","traits","iterator","Iterator"],"kind":"trait"},"0:0:1659":{"crate_id":0,"path":["winapi"],"kind":"module"},"11:1003:2027":{"crate_id":11,"path":["hashbrown","map","OccupiedEntry"],"kind":"struct"},"13:226:32765":{"crate_id":13,"path":["std_detect","detect","cache","Initializer"],"kind":"struct"},"2:2505:131":{"crate_id":2,"path":["core","convert","From"],"kind":"trait"},"17:9478:15327":{"crate_id":17,"path":["object","read","coff","file","CoffCommon"],"kind":"struct"},"5:6574:7730":{"crate_id":5,"path":["alloc","vec","set_len_on_drop","SetLenOnDrop"],"kind":"struct"},"17:13612:19360":{"crate_id":17,"path":["object","pe","ImageHotPatchInfo"],"kind":"struct"},"17:13791:19373":{"crate_id":17,"path":["object","pe","ImageDebugMisc"],"kind":"struct"},"17:12496:18595":{"crate_id":17,"path":["object","macho","SymsegCommand"],"kind":"struct"},"2:4133:7774":{"crate_id":2,"path":["core","cell","once","OnceCell"],"kind":"struct"},"2:3356:7735":{"crate_id":2,"path":["core","any","Provider"],"kind":"trait"},"2:29860:2226":{"crate_id":2,"path":["core","num","FpCategory"],"kind":"enum"},"1:2535:2183":{"crate_id":1,"path":["std","io","buffered","bufwriter","BufWriter"],"kind":"struct"},"16:6164:33196":{"crate_id":16,"path":["gimli","read","cfi","PointerEncodingParameters"],"kind":"struct"},"1:11874:1043":{"crate_id":1,"path":["std","pointer"],"kind":"primitive"},"1:1071:2028":{"crate_id":1,"path":["std","collections","hash","map","VacantEntry"],"kind":"struct"},"2:38912:7591":{"crate_id":2,"path":["core","ops","generator","GeneratorState"],"kind":"enum"},"6:6773:13361":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ipc_perm"],"kind":"struct"},"16:5071:14887":{"crate_id":16,"path":["gimli","constants","DwMacro"],"kind":"struct"},"6:4780:12272":{"crate_id":6,"path":["libc","unix","linux_like","linux","can_filter"],"kind":"struct"},"1:5906:2392":{"crate_id":1,"path":["std","sync","mpmc","counter","Sender"],"kind":"struct"},"1:8114:2170":{"crate_id":1,"path":["std","io","Chain"],"kind":"struct"},"16:8072:15185":{"crate_id":16,"path":["gimli","read","unit","EntriesRaw"],"kind":"struct"},"2:39783:28105":{"crate_id":2,"path":["core","char","convert","CharErrorKind"],"kind":"enum"},"1:11081:2402":{"crate_id":1,"path":["std","sys","unix","time","inner","Instant"],"kind":"struct"},"17:13659:19364":{"crate_id":17,"path":["object","pe","ImageArm64RuntimeFunctionEntry"],"kind":"struct"},"6:7240:13735":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","align","max_align_t"],"kind":"struct"},"16:7293:15155":{"crate_id":16,"path":["gimli","read","op","Piece"],"kind":"struct"},"17:10989:15294":{"crate_id":17,"path":["object","read","Export"],"kind":"struct"},"17:12372:18587":{"crate_id":17,"path":["object","macho","FilesetEntryCommand"],"kind":"struct"},"2:41512:80":{"crate_id":2,"path":["core","sync","atomic","AtomicI16"],"kind":"struct"},"2:3140:232":{"crate_id":2,"path":["core","ops","try_trait","Try"],"kind":"trait"},"16:6376:15126":{"crate_id":16,"path":["gimli","read","aranges","DebugAranges"],"kind":"struct"},"17:13763:19371":{"crate_id":17,"path":["object","pe","ImageDebugDirectory"],"kind":"struct"},"6:5005:12297":{"crate_id":6,"path":["libc","unix","linux_like","linux","mq_attr"],"kind":"struct"},"2:2459:2252":{"crate_id":2,"path":["core","convert","num","private","Sealed"],"kind":"trait"},"2:39851:7675":{"crate_id":2,"path":["core","char","EscapeDebug"],"kind":"struct"},"6:1527:9703":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreq_source"],"kind":"struct"},"2:4102:7773":{"crate_id":2,"path":["core","cell","lazy","LazyCell"],"kind":"struct"},"1:930:2021":{"crate_id":1,"path":["std","collections","hash","map","RawEntryBuilderMut"],"kind":"struct"},"1:888:2015":{"crate_id":1,"path":["std","collections","hash","map","Values"],"kind":"struct"},"1:7660:2031":{"crate_id":1,"path":["std","collections","hash","map","DefaultHasher"],"kind":"struct"},"2:9313:139":{"crate_id":2,"path":["core","hash","Hash"],"kind":"trait"},"1:8860:2400":{"crate_id":1,"path":["std","sync","mpsc","TrySendError"],"kind":"enum"},"16:3872:14264":{"crate_id":16,"path":["gimli","constants","DwCfa"],"kind":"struct"},"5:2076:1958":{"crate_id":5,"path":["alloc","collections","btree","mem","replace","PanicGuard"],"kind":"struct"},"1:5498:2356":{"crate_id":1,"path":["std","process","Termination"],"kind":"trait"},"1:2204:127":{"crate_id":1,"path":["std","fs","File"],"kind":"struct"},"6:4671:12259":{"crate_id":6,"path":["libc","unix","linux_like","linux","mntent"],"kind":"struct"},"17:9148:33919":{"crate_id":17,"path":["object","read","any","ComdatIteratorInternal"],"kind":"enum"},"17:11299:18045":{"crate_id":17,"path":["object","elf","SectionHeader32"],"kind":"struct"},"16:6868:33170":{"crate_id":16,"path":["gimli","read","lists","ListsHeader"],"kind":"struct"},"17:10104:15399":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandIterator"],"kind":"struct"},"1:8065:2199":{"crate_id":1,"path":["std","io","util","Empty"],"kind":"struct"},"17:13721:19369":{"crate_id":17,"path":["object","pe","ImageEnclaveConfig64"],"kind":"struct"},"1:6861:21112":{"crate_id":1,"path":["std","sys_common","backtrace","_print","DisplayBacktrace"],"kind":"struct"},"6:5850:12931":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_mmap_req"],"kind":"struct"},"6:6673:13354":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","pthread_attr_t"],"kind":"struct"},"2:2499:73":{"crate_id":2,"path":["core","convert","AsMut"],"kind":"trait"},"17:11109:15299":{"crate_id":17,"path":["object","read","CompressedData"],"kind":"struct"},"10:36:32738":{"crate_id":10,"path":["adler","algo","U32X4"],"kind":"struct"},"17:13041:19317":{"crate_id":17,"path":["object","pe","Guid"],"kind":"struct"},"17:11037:15295":{"crate_id":17,"path":["object","read","RelocationTarget"],"kind":"enum"},"5:6289:30276":{"crate_id":5,"path":["alloc","vec","drain","drop","DropGuard"],"kind":"struct"},"17:1947:15336":{"crate_id":17,"path":["object","read","elf","relocation","ElfDynamicRelocationIterator"],"kind":"struct"},"17:12331:18584":{"crate_id":17,"path":["object","macho","UuidCommand"],"kind":"struct"},"16:2319:14170":{"crate_id":16,"path":["gimli","common","Encoding"],"kind":"struct"},"6:4602:12254":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Sym"],"kind":"struct"},"17:9512:15320":{"crate_id":17,"path":["object","read","coff","section","CoffSegmentIterator"],"kind":"struct"},"11:2053:2026":{"crate_id":11,"path":["hashbrown","set","Entry"],"kind":"enum"},"17:13121:19321":{"crate_id":17,"path":["object","pe","ImageSymbol"],"kind":"struct"},"2:45949:2513":{"crate_id":2,"path":["core","core_arch","simd","u32x8"],"kind":"struct"},"2:3157:7756":{"crate_id":2,"path":["core","ops","try_trait","NeverShortCircuit"],"kind":"struct"},"2:3151:7757":{"crate_id":2,"path":["core","ops","try_trait","Residual"],"kind":"trait"},"5:862:2038":{"crate_id":5,"path":["alloc","collections","binary_heap","Hole"],"kind":"struct"},"1:5760:2388":{"crate_id":1,"path":["std","sync","lazy_lock","LazyLock"],"kind":"struct"},"5:2911:30800":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Mut"],"kind":"struct"},"2:2737:8001":{"crate_id":2,"path":["core","marker","FnPtr"],"kind":"trait"},"16:5811:15104":{"crate_id":16,"path":["gimli","read","cfi","CommonInformationEntry"],"kind":"struct"},"2:43013:7628":{"crate_id":2,"path":["core","slice","iter","ArrayChunks"],"kind":"struct"},"17:13053:19318":{"crate_id":17,"path":["object","pe","AnonObjectHeader"],"kind":"struct"},"6:4796:12274":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_filter"],"kind":"struct"},"11:300:32749":{"crate_id":11,"path":["hashbrown","raw","RawIter"],"kind":"struct"},"5:879:2011":{"crate_id":5,"path":["alloc","collections","binary_heap","Iter"],"kind":"struct"},"2:39964:1632":{"crate_id":2,"path":["core","ffi","c_char"],"kind":"typedef"},"17:12259:18579":{"crate_id":17,"path":["object","macho","DylibModule64"],"kind":"struct"},"16:6981:15151":{"crate_id":16,"path":["gimli","read","loclists","LocListIter"],"kind":"struct"},"5:1611:30276":{"crate_id":5,"path":["alloc","collections","btree","map","drop","DropGuard"],"kind":"struct"},"2:22082:176":{"crate_id":2,"path":["core","num","nonzero","NonZeroU8"],"kind":"struct"},"17:8667:14136":{"crate_id":17,"path":["object","endian","BigEndian"],"kind":"struct"},"2:43477:7676":{"crate_id":2,"path":["core","str","iter","EscapeUnicode"],"kind":"struct"},"11:853:2024":{"crate_id":11,"path":["hashbrown","map","RawVacantEntryMut"],"kind":"struct"},"17:11459:18055":{"crate_id":17,"path":["object","elf","Rel64"],"kind":"struct"},"1:10412:2190":{"crate_id":1,"path":["std","sys","unix","stdio","Stderr"],"kind":"struct"},"17:10283:15404":{"crate_id":17,"path":["object","read","macho","segment","MachOSegmentInternal"],"kind":"struct"},"2:2235:97":{"crate_id":2,"path":["core","borrow","BorrowMut"],"kind":"trait"},"6:554:8800":{"crate_id":6,"path":["libc","unix","winsize"],"kind":"struct"},"1:3675:2220":{"crate_id":1,"path":["std","net","tcp","TcpListener"],"kind":"struct"},"16:7803:15180":{"crate_id":16,"path":["gimli","read","unit","UnitHeader"],"kind":"struct"},"17:8979:33921":{"crate_id":17,"path":["object","read","any","FileInternal"],"kind":"enum"},"17:9946:15363":{"crate_id":17,"path":["object","read","elf","version","VerdefIterator"],"kind":"struct"},"2:44094:193":{"crate_id":2,"path":["core","task","poll","Poll"],"kind":"enum"},"5:3752:2017":{"crate_id":5,"path":["alloc","collections","linked_list","DrainFilter"],"kind":"struct"},"1:8400:2338":{"crate_id":1,"path":["std","path","PrefixComponent"],"kind":"struct"},"2:2815:8033":{"crate_id":2,"path":["core","ops","bit","Shl"],"kind":"trait"},"16:6717:14114":{"crate_id":16,"path":["gimli","read","line","LineSequence"],"kind":"struct"},"2:45569:2480":{"crate_id":2,"path":["core","core_arch","simd","f64x2"],"kind":"struct"},"17:13399:19345":{"crate_id":17,"path":["object","pe","ImageResourceDirectory"],"kind":"struct"},"1:7562:1984":{"crate_id":1,"path":["std","thread","local","AccessError"],"kind":"struct"},"17:9228:33920":{"crate_id":17,"path":["object","read","any","SymbolTableInternal"],"kind":"enum"},"2:43687:7700":{"crate_id":2,"path":["core","str","pattern","CharPredicateSearcher"],"kind":"struct"},"17:11410:18051":{"crate_id":17,"path":["object","elf","Syminfo32"],"kind":"struct"},"17:420:14144":{"crate_id":17,"path":["object","read","any","Section"],"kind":"struct"},"2:10015:7655":{"crate_id":2,"path":["core","slice","iter","SplitInclusive"],"kind":"struct"},"1:7667:2095":{"crate_id":1,"path":["std","env","VarError"],"kind":"enum"},"6:4492:12244":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_periodic_effect"],"kind":"struct"},"17:13316:19337":{"crate_id":17,"path":["object","pe","ImageThunkData64"],"kind":"struct"},"6:4953:12292":{"crate_id":6,"path":["libc","unix","linux_like","linux","dirent64"],"kind":"struct"},"17:11879:18556":{"crate_id":17,"path":["object","macho","LoadCommand"],"kind":"struct"},"1:8093:2146":{"crate_id":1,"path":["std","io","SeekFrom"],"kind":"enum"},"2:4398:1972":{"crate_id":2,"path":["core","cell","UnsafeCell"],"kind":"struct"},"2:4752:386":{"crate_id":2,"path":["core","ffi","c_void"],"kind":"enum"},"11:119:32745":{"crate_id":11,"path":["hashbrown","raw","RawTable"],"kind":"struct"},"1:8945:21828":{"crate_id":1,"path":["std","sync","mpmc","list","ListToken"],"kind":"struct"},"2:45125:2499":{"crate_id":2,"path":["core","core_arch","simd","i8x8"],"kind":"struct"},"2:43310:7679":{"crate_id":2,"path":["core","str","iter","MatchIndices"],"kind":"struct"},"17:12345:18585":{"crate_id":17,"path":["object","macho","RpathCommand"],"kind":"struct"},"2:43595:7697":{"crate_id":2,"path":["core","str","pattern","CharArraySearcher"],"kind":"struct"},"5:7330:2017":{"crate_id":5,"path":["alloc","vec","drain_filter","DrainFilter"],"kind":"struct"},"5:1227:2027":{"crate_id":5,"path":["alloc","collections","btree","map","entry","OccupiedEntry"],"kind":"struct"},"6:7543:12457":{"crate_id":6,"path":["libc","unix","linux_like","linux","canfd_frame"],"kind":"struct"},"17:11556:18062":{"crate_id":17,"path":["object","elf","Verdef"],"kind":"struct"},"1:7836:22622":{"crate_id":1,"path":["std","io","buffered","linewritershim","LineWriterShim"],"kind":"struct"},"1:11005:2359":{"crate_id":1,"path":["std","sys","unix","process","process_inner","ExitStatusError"],"kind":"struct"},"2:42947:7637":{"crate_id":2,"path":["core","slice","iter","Chunks"],"kind":"struct"},"16:6935:15149":{"crate_id":16,"path":["gimli","read","loclists","RawLocListIter"],"kind":"struct"},"17:13803:19374":{"crate_id":17,"path":["object","pe","ImageFunctionEntry"],"kind":"struct"},"2:3368:7739":{"crate_id":2,"path":["core","any","Demand"],"kind":"struct"},"11:1120:14090":{"crate_id":11,"path":["hashbrown","map","VacantEntryRef"],"kind":"struct"},"1:8782:2401":{"crate_id":1,"path":["std","sync","mpsc","TryIter"],"kind":"struct"},"17:562:15258":{"crate_id":17,"path":["object","read","any","Symbol"],"kind":"struct"},"2:11388:8182":{"crate_id":2,"path":["core","str","iter","MatchesInternal"],"kind":"struct"},"16:4818:14826":{"crate_id":16,"path":["gimli","constants","DwInl"],"kind":"struct"},"2:1812:2054":{"crate_id":2,"path":["core","ptr","non_null","NonNull"],"kind":"struct"},"17:12592:18602":{"crate_id":17,"path":["object","macho","Nlist32"],"kind":"struct"},"6:4624:12256":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Phdr"],"kind":"struct"},"16:6351:15124":{"crate_id":16,"path":["gimli","read","abbrev","Attributes"],"kind":"enum"},"16:7065:33191":{"crate_id":16,"path":["gimli","read","lookup","PubStuffParser"],"kind":"struct"},"2:4247:7761":{"crate_id":2,"path":["core","cell","BorrowError"],"kind":"struct"},"2:2835:8037":{"crate_id":2,"path":["core","ops","bit","BitXorAssign"],"kind":"trait"},"11:320:32755":{"crate_id":11,"path":["hashbrown","raw","RawIntoIter"],"kind":"struct"},"5:4365:2158":{"crate_id":5,"path":["alloc","collections","vec_deque","write_iter_wrapping","Guard"],"kind":"struct"},"1:1985:182":{"crate_id":1,"path":["std","ffi","os_str","OsStr"],"kind":"struct"},"2:46139:2489":{"crate_id":2,"path":["core","core_arch","simd","i16x16"],"kind":"struct"},"6:7431:13896":{"crate_id":6,"path":["libc","unix","linux_like","linux","arch","generic","termios2"],"kind":"struct"},"11:1065:32757":{"crate_id":11,"path":["hashbrown","map","KeyOrRef"],"kind":"enum"},"2:21694:28090":{"crate_id":2,"path":["core","num","dec2flt","FloatErrorKind"],"kind":"enum"},"2:44179:7576":{"crate_id":2,"path":["core","alloc","AllocError"],"kind":"struct"},"2:39056:199":{"crate_id":2,"path":["core","ops","range","RangeInclusive"],"kind":"struct"},"17:13219:19329":{"crate_id":17,"path":["object","pe","ImageAuxSymbolSection"],"kind":"struct"},"16:2808:14191":{"crate_id":16,"path":["gimli","common","DebugStrOffsetsIndex"],"kind":"struct"},"18:531:19421":{"crate_id":18,"path":["memchr","memmem","prefilter","PrefilterState"],"kind":"struct"},"16:8047:15184":{"crate_id":16,"path":["gimli","read","unit","AttrsIter"],"kind":"struct"},"17:8931:15242":{"crate_id":17,"path":["object","read","util","ByteString"],"kind":"struct"},"17:8443:15264":{"crate_id":17,"path":["object","common","RelocationKind"],"kind":"enum"},"6:6616:9667":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stat64"],"kind":"struct"},"1:8752:2359":{"crate_id":1,"path":["std","process","ExitStatusError"],"kind":"struct"},"2:7548:7967":{"crate_id":2,"path":["core","iter","traits","marker","TrustedStep"],"kind":"trait"},"17:9312:15281":{"crate_id":17,"path":["object","read","any","DynamicRelocationIterator"],"kind":"struct"},"2:41181:2216":{"crate_id":2,"path":["core","net","socket_addr","SocketAddrV6"],"kind":"struct"},"17:10428:15485":{"crate_id":17,"path":["object","read","pe","file","PeComdat"],"kind":"struct"},"10:0:1765":{"crate_id":10,"path":["adler"],"kind":"module"},"2:20905:2252":{"crate_id":2,"path":["core","core_simd","masks","sealed","Sealed"],"kind":"trait"},"1:11891:1485":{"crate_id":1,"path":["std","u64"],"kind":"primitive"},"17:10615:15481":{"crate_id":17,"path":["object","read","pe","import","DelayLoadImportTable"],"kind":"struct"},"6:5888:12934":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","timex"],"kind":"struct"},"2:42259:67":{"crate_id":2,"path":["core","fmt","Alignment"],"kind":"enum"},"2:21709:28559":{"crate_id":2,"path":["core","num","diy_float","Fp"],"kind":"struct"},"17:10026:15440":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCacheImageIterator"],"kind":"struct"},"5:3123:2033":{"crate_id":5,"path":["alloc","collections","btree","set","Difference"],"kind":"struct"},"16:6146:192":{"crate_id":16,"path":["gimli","read","cfi","Pointer"],"kind":"enum"},"1:11888:1486":{"crate_id":1,"path":["std","u8"],"kind":"primitive"},"1:10672:2140":{"crate_id":1,"path":["std","sys","unix","fs","FileTimes"],"kind":"struct"},"5:7014:2039":{"crate_id":5,"path":["alloc","collections","binary_heap","IntoIterSorted"],"kind":"struct"},"17:11319:18046":{"crate_id":17,"path":["object","elf","SectionHeader64"],"kind":"struct"},"15:219:14122":{"crate_id":15,"path":["addr2line","RangeAttributes"],"kind":"struct"},"2:40274:7991":{"crate_id":2,"path":["core","iter","adapters","take_while","TakeWhile"],"kind":"struct"},"1:11135:19845":{"crate_id":1,"path":["std","sys_common","once","futex","CompletionGuard"],"kind":"struct"},"17:12282:18580":{"crate_id":17,"path":["object","macho","DylibReference"],"kind":"struct"},"17:9424:15307":{"crate_id":17,"path":["object","read","archive","ArchiveFile"],"kind":"struct"},"5:3546:2012":{"crate_id":5,"path":["alloc","collections","linked_list","IterMut"],"kind":"struct"},"17:11832:15446":{"crate_id":17,"path":["object","macho","FatArch64"],"kind":"struct"},"6:5041:12300":{"crate_id":6,"path":["libc","unix","linux_like","linux","hwtstamp_config"],"kind":"struct"},"17:11060:15296":{"crate_id":17,"path":["object","read","Relocation"],"kind":"struct"},"16:7588:15169":{"crate_id":16,"path":["gimli","read","rnglists","RawRngListIter"],"kind":"struct"},"6:5955:12938":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","Elf32_Chdr"],"kind":"struct"},"1:8993:20218":{"crate_id":1,"path":["std","sync","mpmc","utils","CachePadded"],"kind":"struct"},"6:5773:12926":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","glob64_t"],"kind":"struct"},"16:5630:15095":{"crate_id":16,"path":["gimli","read","cfi","EhHdrTableIter"],"kind":"struct"},"17:9839:15334":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdat"],"kind":"struct"},"5:5190:30276":{"crate_id":5,"path":["alloc","slice","hack","to_vec","DropGuard"],"kind":"struct"},"1:7585:1971":{"crate_id":1,"path":["std","thread","ThreadId"],"kind":"struct"},"2:2910:1902":{"crate_id":2,"path":["core","ops","drop","Drop"],"kind":"trait"},"17:242:33913":{"crate_id":17,"path":["object","read","util","DebugByte"],"kind":"struct"},"18:582:7809":{"crate_id":18,"path":["memchr","memmem","twoway","Reverse"],"kind":"struct"},"16:7557:15168":{"crate_id":16,"path":["gimli","read","rnglists","RangeLists"],"kind":"struct"},"16:3446:14203":{"crate_id":16,"path":["gimli","arch","RiscV"],"kind":"struct"},"2:43452:7665":{"crate_id":2,"path":["core","str","iter","EncodeUtf16"],"kind":"struct"},"2:2784:8026":{"crate_id":2,"path":["core","ops","arith","DivAssign"],"kind":"trait"},"2:2338:180":{"crate_id":2,"path":["core","cmp","Ord"],"kind":"trait"},"1:480:19821":{"crate_id":1,"path":["std","thread","spawn_unchecked_","MaybeDangling"],"kind":"struct"},"1:11869:369":{"crate_id":1,"path":["std","bool"],"kind":"primitive"},"2:43544:7694":{"crate_id":2,"path":["core","str","pattern","SearchStep"],"kind":"enum"},"2:2821:8034":{"crate_id":2,"path":["core","ops","bit","Shr"],"kind":"trait"},"2:1537:2158":{"crate_id":2,"path":["core","mem","maybe_uninit","write_slice_cloned","Guard"],"kind":"struct"},"6:4536:12249":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_abs_setup"],"kind":"struct"},"6:5761:12924":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__exit_status"],"kind":"struct"},"5:7220:2111":{"crate_id":5,"path":["alloc","ffi","c_str","FromVecWithNulError"],"kind":"struct"},"5:7173:101":{"crate_id":5,"path":["alloc","ffi","c_str","CString"],"kind":"struct"},"1:7771:2138":{"crate_id":1,"path":["std","fs","Metadata"],"kind":"struct"},"2:39917:100":{"crate_id":2,"path":["core","ffi","c_str","CStr"],"kind":"struct"},"17:11844:18554":{"crate_id":17,"path":["object","macho","MachHeader32"],"kind":"struct"},"16:3640:14205":{"crate_id":16,"path":["gimli","arch","X86_64"],"kind":"struct"},"1:1572:2017":{"crate_id":1,"path":["std","collections","hash","set","DrainFilter"],"kind":"struct"},"1:3205:2195":{"crate_id":1,"path":["std","io","stdio","StdoutLock"],"kind":"struct"},"2:11423:7655":{"crate_id":2,"path":["core","str","iter","SplitInclusive"],"kind":"struct"},"2:30283:28056":{"crate_id":2,"path":["core","ptr","alignment","AlignmentEnum64"],"kind":"enum"},"17:8490:15265":{"crate_id":17,"path":["object","common","RelocationEncoding"],"kind":"enum"},"6:5767:12925":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__timeval"],"kind":"struct"},"1:8459:2340":{"crate_id":1,"path":["std","path","Components"],"kind":"struct"},"11:822:2022":{"crate_id":11,"path":["hashbrown","map","RawEntryMut"],"kind":"enum"},"16:2742:14188":{"crate_id":16,"path":["gimli","common","DebugRngListsIndex"],"kind":"struct"},"16:7029:33207":{"crate_id":16,"path":["gimli","read","lookup","LookupEntryIter"],"kind":"struct"},"1:3165:2193":{"crate_id":1,"path":["std","io","stdio","StdinLock"],"kind":"struct"},"17:9973:15364":{"crate_id":17,"path":["object","read","elf","version","VerneedIterator"],"kind":"struct"},"17:13469:19353":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation64"],"kind":"struct"},"2:3185:7588":{"crate_id":2,"path":["core","ops","unsize","CoerceUnsized"],"kind":"trait"},"16:2470:14177":{"crate_id":16,"path":["gimli","common","DebugInfoOffset"],"kind":"struct"},"2:12516:2057":{"crate_id":2,"path":["core","alloc","Allocator"],"kind":"trait"},"2:11560:2343":{"crate_id":2,"path":["core","str","traits","FromStr"],"kind":"trait"},"2:9104:7604":{"crate_id":2,"path":["core","fmt","LowerHex"],"kind":"trait"},"1:2609:2185":{"crate_id":1,"path":["std","io","buffered","linewriter","LineWriter"],"kind":"struct"},"17:13082:19320":{"crate_id":17,"path":["object","pe","AnonObjectHeaderBigobj"],"kind":"struct"},"2:21520:28342":{"crate_id":2,"path":["core","num","bignum","Big32x40"],"kind":"struct"},"6:4873:12283":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_initmsg"],"kind":"struct"},"1:5017:24526":{"crate_id":1,"path":["std","path","fmt","DebugHelper"],"kind":"struct"},"6:5976:12940":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ptrace_peeksiginfo_args"],"kind":"struct"},"2:49635:244":{"crate_id":2,"path":["core","core_simd","fmt","fmt","Wrapper"],"kind":"struct"},"2:39014:197":{"crate_id":2,"path":["core","ops","range","RangeFrom"],"kind":"struct"},"16:4845:14829":{"crate_id":16,"path":["gimli","constants","DwOrd"],"kind":"struct"},"2:3496:2016":{"crate_id":2,"path":["core","array","drain","Drain"],"kind":"struct"},"2:39858:7790":{"crate_id":2,"path":["core","char","EscapeDebugInner"],"kind":"enum"},"11:98:32744":{"crate_id":11,"path":["hashbrown","raw","Bucket"],"kind":"struct"},"17:12224:18577":{"crate_id":17,"path":["object","macho","DylibTableOfContents"],"kind":"struct"},"1:4840:2302":{"crate_id":1,"path":["std","os","net","linux_ext","addr","SocketAddrExt"],"kind":"trait"},"1:3055:2202":{"crate_id":1,"path":["std","io","readbuf","BorrowedBuf"],"kind":"struct"},"2:40116:7981":{"crate_id":2,"path":["core","iter","adapters","filter_map","FilterMap"],"kind":"struct"},"6:4290:12223":{"crate_id":6,"path":["libc","unix","linux_like","linux","passwd"],"kind":"struct"},"2:40007:2115":{"crate_id":2,"path":["core","ffi","VaList"],"kind":"struct"},"17:12607:18603":{"crate_id":17,"path":["object","macho","Nlist64"],"kind":"struct"},"1:2206:2117":{"crate_id":1,"path":["std","fs","DirEntry"],"kind":"struct"},"1:11890:1484":{"crate_id":1,"path":["std","u32"],"kind":"primitive"},"2:31877:8088":{"crate_id":2,"path":["core","error","Source"],"kind":"struct"},"1:4099:2269":{"crate_id":1,"path":["std","os","unix","net","ancillary","ScmCredentials"],"kind":"struct"},"17:11502:18058":{"crate_id":17,"path":["object","elf","ProgramHeader64"],"kind":"struct"},"2:12196:149":{"crate_id":2,"path":["core","future","into_future","IntoFuture"],"kind":"trait"},"1:11894:1539":{"crate_id":1,"path":["std","usize"],"kind":"primitive"},"1:5063:189":{"crate_id":1,"path":["std","path","PathBuf"],"kind":"struct"},"17:10416:15484":{"crate_id":17,"path":["object","read","pe","file","PeComdatIterator"],"kind":"struct"},"5:5640:230":{"crate_id":5,"path":["alloc","string","ToString"],"kind":"trait"},"16:6544:15136":{"crate_id":16,"path":["gimli","read","line","DebugLine"],"kind":"struct"},"1:2382:1778":{"crate_id":1,"path":["std","io"],"kind":"module"},"9:325:14024":{"crate_id":9,"path":["miniz_oxide","inflate","core","LocalVars"],"kind":"struct"},"17:11924:18559":{"crate_id":17,"path":["object","macho","SegmentCommand64"],"kind":"struct"},"18:564:19423":{"crate_id":18,"path":["memchr","memmem","rarebytes","RareNeedleBytes"],"kind":"struct"},"2:39799:7794":{"crate_id":2,"path":["core","char","convert","CharTryFromError"],"kind":"struct"},"6:5743:12923":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","aiocb"],"kind":"struct"},"6:7497:12451":{"crate_id":6,"path":["libc","unix","linux_like","linux","fanotify_event_metadata"],"kind":"struct"},"11:777:14086":{"crate_id":11,"path":["hashbrown","map","ConsumeAllOnDrop"],"kind":"struct"},"2:7216:1906":{"crate_id":2,"path":["core","iter","traits","exact_size","ExactSizeIterator"],"kind":"trait"},"17:11573:18063":{"crate_id":17,"path":["object","elf","Verdaux"],"kind":"struct"},"2:41968:7604":{"crate_id":2,"path":["core","fmt","num","LowerHex"],"kind":"struct"},"2:45593:2481":{"crate_id":2,"path":["core","core_arch","simd","f64x4"],"kind":"struct"},"2:40097:7979":{"crate_id":2,"path":["core","iter","adapters","enumerate","Enumerate"],"kind":"struct"},"2:41552:87":{"crate_id":2,"path":["core","sync","atomic","AtomicU16"],"kind":"struct"},"2:43581:7696":{"crate_id":2,"path":["core","str","pattern","MultiCharEqSearcher"],"kind":"struct"},"2:10165:7650":{"crate_id":2,"path":["core","slice","iter","RSplitMut"],"kind":"struct"},"18:766:19409":{"crate_id":18,"path":["memchr","memmem","SearcherRevKind"],"kind":"enum"},"1:11876:1358":{"crate_id":1,"path":["std","slice"],"kind":"primitive"},"2:42938:7638":{"crate_id":2,"path":["core","slice","iter","Windows"],"kind":"struct"},"18:515:19420":{"crate_id":18,"path":["memchr","memmem","prefilter","PrefilterFn"],"kind":"struct"},"17:11355:18048":{"crate_id":17,"path":["object","elf","CompressionHeader64"],"kind":"struct"},"1:6481:2386":{"crate_id":1,"path":["std","sync","poison","TryLockError"],"kind":"enum"},"2:45155:2487":{"crate_id":2,"path":["core","core_arch","simd","i16x4"],"kind":"struct"},"16:6218:15116":{"crate_id":16,"path":["gimli","read","dwarf","Unit"],"kind":"struct"},"11:1029:2028":{"crate_id":11,"path":["hashbrown","map","VacantEntry"],"kind":"struct"},"2:40168:7985":{"crate_id":2,"path":["core","iter","adapters","map","Map"],"kind":"struct"},"17:12138:18573":{"crate_id":17,"path":["object","macho","RoutinesCommand32"],"kind":"struct"},"16:6431:15129":{"crate_id":16,"path":["gimli","read","aranges","ArangeEntryIter"],"kind":"struct"},"17:9866:15355":{"crate_id":17,"path":["object","read","elf","note","NoteIterator"],"kind":"struct"},"1:1583:2033":{"crate_id":1,"path":["std","collections","hash","set","Difference"],"kind":"struct"},"5:7069:30375":{"crate_id":5,"path":["alloc","collections","btree","set_val","SetValZST"],"kind":"struct"},"17:12178:18575":{"crate_id":17,"path":["object","macho","SymtabCommand"],"kind":"struct"},"1:6617:24527":{"crate_id":1,"path":["std","sync","rwlock","fmt","LockedPlaceholder"],"kind":"struct"},"2:39823:7797":{"crate_id":2,"path":["core","char","decode","DecodeUtf16Error"],"kind":"struct"},"17:13419:19347":{"crate_id":17,"path":["object","pe","ImageResourceDirectoryString"],"kind":"struct"},"18:652:33936":{"crate_id":18,"path":["memchr","memmem","x86","sse","Forward"],"kind":"struct"},"2:42956:7641":{"crate_id":2,"path":["core","slice","iter","ChunksMut"],"kind":"struct"},"1:8327:2336":{"crate_id":1,"path":["std","path","Prefix"],"kind":"enum"},"5:814:2037":{"crate_id":5,"path":["alloc","collections","binary_heap","RebuildOnDrop"],"kind":"struct"},"2:41632:88":{"crate_id":2,"path":["core","sync","atomic","AtomicU32"],"kind":"struct"},"2:2736:8000":{"crate_id":2,"path":["core","marker","ConstParamTy"],"kind":"trait"},"1:5175:188":{"crate_id":1,"path":["std","path","Path"],"kind":"struct"},"5:2086:30793":{"crate_id":5,"path":["alloc","collections","btree","merge_iter","MergeIterInner"],"kind":"struct"},"16:5104:14896":{"crate_id":16,"path":["gimli","constants","DwRle"],"kind":"struct"},"2:41832:2377":{"crate_id":2,"path":["core","sync","exclusive","Exclusive"],"kind":"struct"},"16:2378:14173":{"crate_id":16,"path":["gimli","common","DebugAbbrevOffset"],"kind":"struct"},"17:9917:15387":{"crate_id":17,"path":["object","read","elf","version","Version"],"kind":"struct"},"2:2776:2438":{"crate_id":2,"path":["core","ops","arith","SubAssign"],"kind":"trait"},"17:8651:14138":{"crate_id":17,"path":["object","endian","LittleEndian"],"kind":"struct"},"6:6533:8841":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","sigaction"],"kind":"struct"},"6:1663:9716":{"crate_id":6,"path":["libc","unix","linux_like","in6_rtmsg"],"kind":"struct"},"1:4849:2303":{"crate_id":1,"path":["std","os","net","linux_ext","tcp","TcpStreamExt"],"kind":"trait"},"2:41246:8045":{"crate_id":2,"path":["core","option","Item"],"kind":"struct"},"2:41432:83":{"crate_id":2,"path":["core","sync","atomic","AtomicI8"],"kind":"struct"},"2:47228:7557":{"crate_id":2,"path":["core","core_arch","x86","__m256i"],"kind":"struct"},"2:12435:203":{"crate_id":2,"path":["core","task","ready","Ready"],"kind":"struct"},"2:42222:108":{"crate_id":2,"path":["core","fmt","rt","Count"],"kind":"enum"},"5:4398:30302":{"crate_id":5,"path":["alloc","collections","vec_deque","truncate","Dropper"],"kind":"struct"},"16:3225:14201":{"crate_id":16,"path":["gimli","arch","AArch64"],"kind":"struct"},"1:11152:21843":{"crate_id":1,"path":["std","sys_common","process","CommandEnv"],"kind":"struct"},"2:43160:2173":{"crate_id":2,"path":["core","str","iter","Split"],"kind":"struct"},"6:6035:12945":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_data"],"kind":"union"},"16:7077:15153":{"crate_id":16,"path":["gimli","read","op","DieReference"],"kind":"enum"},"6:4271:12221":{"crate_id":6,"path":["libc","unix","linux_like","linux","rlimit64"],"kind":"struct"},"17:9380:15305":{"crate_id":17,"path":["object","read","archive","ArchiveKind"],"kind":"enum"},"6:568:8802":{"crate_id":6,"path":["libc","unix","sigval"],"kind":"struct"},"17:12536:18598":{"crate_id":17,"path":["object","macho","EntryPointCommand"],"kind":"struct"},"1:9018:165":{"crate_id":1,"path":["std","sync","mutex","MutexGuard"],"kind":"struct"},"11:1681:142":{"crate_id":11,"path":["hashbrown","set","HashSet"],"kind":"struct"},"9:481:13968":{"crate_id":9,"path":["miniz_oxide","DataFormat"],"kind":"enum"},"17:8823:15272":{"crate_id":17,"path":["object","endian","I32Bytes"],"kind":"struct"},"5:2907:30782":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Immut"],"kind":"struct"},"1:11853:20210":{"crate_id":1,"path":["std","backtrace_rs","print","PrintFmt"],"kind":"enum"},"2:10220:7651":{"crate_id":2,"path":["core","slice","iter","RSplitN"],"kind":"struct"},"6:4482:12243":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_condition_effect"],"kind":"struct"},"16:5797:32868":{"crate_id":16,"path":["gimli","read","cfi","AugmentationData"],"kind":"struct"},"2:41169:2215":{"crate_id":2,"path":["core","net","socket_addr","SocketAddrV4"],"kind":"struct"},"6:1520:9702":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreqn"],"kind":"struct"},"5:1212:2028":{"crate_id":5,"path":["alloc","collections","btree","map","entry","VacantEntry"],"kind":"struct"},"11:2198:32746":{"crate_id":11,"path":["hashbrown","raw","TableLayout"],"kind":"struct"},"5:5903:2158":{"crate_id":5,"path":["alloc","sync","from_iter_exact","Guard"],"kind":"struct"},"6:1687:9718":{"crate_id":6,"path":["libc","unix","linux_like","arpreq_old"],"kind":"struct"},"6:4819:12277":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlmsghdr"],"kind":"struct"},"17:9853:15388":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdatSectionIterator"],"kind":"struct"},"6:541:8798":{"crate_id":6,"path":["libc","unix","iovec"],"kind":"struct"},"1:1062:2027":{"crate_id":1,"path":["std","collections","hash","map","OccupiedEntry"],"kind":"struct"},"1:3934:2240":{"crate_id":1,"path":["std","os","unix","fs","MetadataExt"],"kind":"trait"},"18:0:1772":{"crate_id":18,"path":["memchr"],"kind":"module"},"2:11372:8180":{"crate_id":2,"path":["core","str","iter","MatchIndicesInternal"],"kind":"struct"},"2:2684:224":{"crate_id":2,"path":["core","marker","StructuralPartialEq"],"kind":"trait"},"1:643:1993":{"crate_id":1,"path":["std","backtrace","BytesOrWide"],"kind":"enum"},"1:4503:2295":{"crate_id":1,"path":["std","os","unix","thread","JoinHandleExt"],"kind":"trait"},"1:9088:24504":{"crate_id":1,"path":["std","sys","common","thread_local","fast_local","Key"],"kind":"struct"},"5:5830:8392":{"crate_id":5,"path":["alloc","sync","ArcInner"],"kind":"struct"},"6:119:8472":{"crate_id":6,"path":["libc","unix","FILE"],"kind":"enum"},"17:10649:15492":{"crate_id":17,"path":["object","read","pe","relocation","RelocationIterator"],"kind":"struct"},"17:11615:18066":{"crate_id":17,"path":["object","elf","NoteHeader32"],"kind":"struct"},"14:0:1768":{"crate_id":14,"path":["rustc_demangle"],"kind":"module"},"18:671:19411":{"crate_id":18,"path":["memchr","memmem","FindRevIter"],"kind":"struct"},"16:7859:15182":{"crate_id":16,"path":["gimli","read","unit","AttributeValue"],"kind":"enum"},"2:41672:82":{"crate_id":2,"path":["core","sync","atomic","AtomicI64"],"kind":"struct"},"16:7467:15160":{"crate_id":16,"path":["gimli","read","pubnames","PubNamesEntry"],"kind":"struct"},"5:1381:2013":{"crate_id":5,"path":["alloc","collections","btree","map","IntoIter"],"kind":"struct"},"17:8788:15271":{"crate_id":17,"path":["object","endian","I16Bytes"],"kind":"struct"},"17:12072:18568":{"crate_id":17,"path":["object","macho","SubUmbrellaCommand"],"kind":"struct"},"2:43282:7651":{"crate_id":2,"path":["core","str","iter","RSplitN"],"kind":"struct"},"1:3244:2191":{"crate_id":1,"path":["std","io","stdio","StderrLock"],"kind":"struct"},"16:7437:15158":{"crate_id":16,"path":["gimli","read","op","OperationIter"],"kind":"struct"},"2:2800:8029":{"crate_id":2,"path":["core","ops","bit","BitAnd"],"kind":"trait"},"2:44900:27972":{"crate_id":2,"path":["core","core_arch","simd","i8x2"],"kind":"struct"},"18:719:19407":{"crate_id":18,"path":["memchr","memmem","NeedleInfo"],"kind":"struct"},"17:13249:19332":{"crate_id":17,"path":["object","pe","ImageLinenumber"],"kind":"struct"},"17:12634:18604":{"crate_id":17,"path":["object","macho","RelocationInfo"],"kind":"struct"},"17:12318:18583":{"crate_id":17,"path":["object","macho","PrebindCksumCommand"],"kind":"struct"},"17:12085:18569":{"crate_id":17,"path":["object","macho","SubLibraryCommand"],"kind":"struct"},"5:1994:2051":{"crate_id":5,"path":["alloc","collections","btree","map","CursorMut"],"kind":"struct"},"16:6696:15140":{"crate_id":16,"path":["gimli","read","line","ColumnType"],"kind":"enum"},"2:2917:1904":{"crate_id":2,"path":["core","ops","function","FnMut"],"kind":"trait"},"2:21321:2441":{"crate_id":2,"path":["core","core_simd","vector","Simd"],"kind":"struct"},"1:8766:2360":{"crate_id":1,"path":["std","process","ExitCode"],"kind":"struct"},"2:2762:8025":{"crate_id":2,"path":["core","ops","arith","Rem"],"kind":"trait"},"6:1747:9724":{"crate_id":6,"path":["libc","unix","linux_like","sigevent"],"kind":"struct"},"6:4804:12275":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_fprog"],"kind":"struct"},"1:11200:20114":{"crate_id":1,"path":["std","sys_common","wtf8","Wtf8Buf"],"kind":"struct"},"6:4924:12288":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_prinfo"],"kind":"struct"},"17:13344:19340":{"crate_id":17,"path":["object","pe","ImageTlsDirectory32"],"kind":"struct"},"1:6365:1998":{"crate_id":1,"path":["std","sync","once","Once"],"kind":"struct"},"1:5552:204":{"crate_id":1,"path":["std","sync","mpsc","Receiver"],"kind":"struct"},"1:6903:19711":{"crate_id":1,"path":["std","sys_common","lazy_box","LazyBox"],"kind":"struct"},"5:7008:2013":{"crate_id":5,"path":["alloc","collections","binary_heap","IntoIter"],"kind":"struct"},"6:7218:8751":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","not_x32","statvfs"],"kind":"struct"},"19:0:1025":{"crate_id":19,"path":["panic_unwind"],"kind":"module"},"14:165:14100":{"crate_id":14,"path":["rustc_demangle","DemangleStyle"],"kind":"enum"},"1:8216:2266":{"crate_id":1,"path":["std","os","unix","net","ancillary","SocketAncillary"],"kind":"struct"},"2:2593:126":{"crate_id":2,"path":["core","error","Error"],"kind":"trait"},"16:8180:15192":{"crate_id":16,"path":["gimli","read","value","ValueType"],"kind":"enum"},"11:725:2014":{"crate_id":11,"path":["hashbrown","map","Keys"],"kind":"struct"},"17:10761:15284":{"crate_id":17,"path":["object","read","FileKind"],"kind":"enum"},"1:3978:2242":{"crate_id":1,"path":["std","os","unix","fs","DirEntryExt"],"kind":"trait"},"2:7151:132":{"crate_id":2,"path":["core","iter","traits","collect","FromIterator"],"kind":"trait"},"5:1421:2018":{"crate_id":5,"path":["alloc","collections","btree","map","ValuesMut"],"kind":"struct"},"2:45722:28162":{"crate_id":2,"path":["core","core_arch","simd","m32x4"],"kind":"struct"},"2:43724:7701":{"crate_id":2,"path":["core","str","pattern","StrSearcher"],"kind":"struct"},"5:7250:222":{"crate_id":5,"path":["alloc","string","String"],"kind":"struct"},"2:21333:28588":{"crate_id":2,"path":["core","core_simd","vector","splat","Splat"],"kind":"struct"},"2:43883:8172":{"crate_id":2,"path":["core","str","CharEscapeDebugContinue"],"kind":"struct"},"17:10478:15457":{"crate_id":17,"path":["object","read","pe","section","PeSectionIterator"],"kind":"struct"},"7:32:13941":{"crate_id":7,"path":["unwind","libunwind","_Unwind_Reason_Code"],"kind":"enum"},"17:3142:15407":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbolIterator"],"kind":"struct"},"1:10837:20232":{"crate_id":1,"path":["std","sys","unix","process","process_common","ProgramKind"],"kind":"enum"},"2:21807:2229":{"crate_id":2,"path":["core","num","error","TryFromIntError"],"kind":"struct"},"6:4375:12230":{"crate_id":6,"path":["libc","unix","linux_like","linux","cpu_set_t"],"kind":"struct"},"17:12006:18563":{"crate_id":17,"path":["object","macho","FvmlibCommand"],"kind":"struct"},"2:49557:244":{"crate_id":2,"path":["core","core_simd","fmt","fmt","Wrapper"],"kind":"struct"},"17:3266:15425":{"crate_id":17,"path":["object","read","macho","relocation","MachORelocationIterator"],"kind":"struct"},"17:9628:15315":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdat"],"kind":"struct"},"1:11215:20226":{"crate_id":1,"path":["std","sys_common","wtf8","Wtf8"],"kind":"struct"},"16:8090:15186":{"crate_id":16,"path":["gimli","read","unit","EntriesCursor"],"kind":"struct"},"6:526:8796":{"crate_id":6,"path":["libc","unix","ipv6_mreq"],"kind":"struct"},"1:11044:2150":{"crate_id":1,"path":["std","sys","unix","time","SystemTime"],"kind":"struct"},"2:44129:2523":{"crate_id":2,"path":["core","task","wake","RawWaker"],"kind":"struct"},"18:548:139":{"crate_id":18,"path":["memchr","memmem","rabinkarp","Hash"],"kind":"struct"},"17:9534:15318":{"crate_id":17,"path":["object","read","coff","section","CoffSectionIterator"],"kind":"struct"},"11:697:2020":{"crate_id":11,"path":["hashbrown","map","IntoValues"],"kind":"struct"},"2:45195:28116":{"crate_id":2,"path":["core","core_arch","simd","i64x1"],"kind":"struct"},"2:2844:8039":{"crate_id":2,"path":["core","ops","bit","ShrAssign"],"kind":"trait"},"2:39173:7768":{"crate_id":2,"path":["core","any","tags","Ref"],"kind":"struct"},"17:12550:18599":{"crate_id":17,"path":["object","macho","SourceVersionCommand"],"kind":"struct"},"2:49200:2522":{"crate_id":2,"path":["core","core_simd","swizzle","Which"],"kind":"enum"},"17:10555:15453":{"crate_id":17,"path":["object","read","pe","export","ExportTable"],"kind":"struct"},"1:6405:2389":{"crate_id":1,"path":["std","sync","once_lock","OnceLock"],"kind":"struct"},"2:39922:2114":{"crate_id":2,"path":["core","ffi","c_str","FromBytesWithNulError"],"kind":"struct"},"2:21821:2228":{"crate_id":2,"path":["core","num","error","ParseIntError"],"kind":"struct"},"2:2839:8038":{"crate_id":2,"path":["core","ops","bit","ShlAssign"],"kind":"trait"},"17:1919:15376":{"crate_id":17,"path":["object","read","elf","relocation","ElfRelaIterator"],"kind":"enum"},"5:7053:2013":{"crate_id":5,"path":["alloc","collections","btree","set","IntoIter"],"kind":"struct"},"2:7155:150":{"crate_id":2,"path":["core","iter","traits","collect","IntoIterator"],"kind":"trait"},"2:14:1880":{"crate_id":2,"path":["core","write"],"kind":"macro"},"5:4913:2158":{"crate_id":5,"path":["alloc","rc","from_iter_exact","Guard"],"kind":"struct"},"6:4664:2234":{"crate_id":6,"path":["libc","unix","linux_like","linux","ucred"],"kind":"struct"},"6:1716:2263":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_un"],"kind":"struct"},"5:1057:30802":{"crate_id":5,"path":["alloc","collections","btree","borrow","DormantMutRef"],"kind":"struct"},"17:12835:19307":{"crate_id":17,"path":["object","pe","ImageVxdHeader"],"kind":"struct"},"6:6802:13363":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","seccomp_notif_sizes"],"kind":"struct"},"9:388:13970":{"crate_id":9,"path":["miniz_oxide","MZFlush"],"kind":"enum"},"17:9443:15308":{"crate_id":17,"path":["object","read","archive","ArchiveMemberIterator"],"kind":"struct"},"11:2184:28423":{"crate_id":11,"path":["hashbrown","raw","bitmask","BitMask"],"kind":"struct"},"2:42506:27428":{"crate_id":2,"path":["core","hash","sip","Sip13Rounds"],"kind":"struct"},"1:4069:24095":{"crate_id":1,"path":["std","os","unix","net","ancillary","AncillaryDataIter"],"kind":"struct"},"2:25696:2225":{"crate_id":2,"path":["core","num","wrapping","Wrapping"],"kind":"struct"},"6:1550:9706":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_in6"],"kind":"struct"},"16:5594:15093":{"crate_id":16,"path":["gimli","read","cfi","EhFrameHdr"],"kind":"struct"},"2:21:677":{"crate_id":2,"path":["core","format_args"],"kind":"macro"},"2:47333:7564":{"crate_id":2,"path":["core","core_arch","x86","__m256bh"],"kind":"struct"},"17:10705:15495":{"crate_id":17,"path":["object","read","pe","resource","ResourceName"],"kind":"struct"},"2:44946:2506":{"crate_id":2,"path":["core","core_arch","simd","u16x2"],"kind":"struct"},"6:7566:13925":{"crate_id":6,"path":["libc","unix","align","in6_addr"],"kind":"struct"},"1:8815:2396":{"crate_id":1,"path":["std","sync","mpsc","RecvError"],"kind":"struct"},"2:45214:2476":{"crate_id":2,"path":["core","core_arch","simd","f32x2"],"kind":"struct"},"2:44880:28098":{"crate_id":2,"path":["core","core_arch","simd","u8x2"],"kind":"struct"},"2:11671:7688":{"crate_id":2,"path":["core","str","pattern","MultiCharEqPattern"],"kind":"struct"},"1:2341:2123":{"crate_id":1,"path":["std","fs","symlink_metadata"],"kind":"function"},"2:46061:2501":{"crate_id":2,"path":["core","core_arch","simd","i8x32"],"kind":"struct"},"15:198:14118":{"crate_id":15,"path":["addr2line","LocationRangeUnitIter"],"kind":"struct"},"2:1621:584":{"crate_id":2,"path":["core","mem","drop"],"kind":"function"},"17:8195:15241":{"crate_id":17,"path":["object","common","Architecture"],"kind":"enum"},"11:738:2015":{"crate_id":11,"path":["hashbrown","map","Values"],"kind":"struct"},"17:11891:18557":{"crate_id":17,"path":["object","macho","LcStr"],"kind":"struct"},"1:1846:2093":{"crate_id":1,"path":["std","env","ArgsOs"],"kind":"struct"},"5:1462:2049":{"crate_id":5,"path":["alloc","collections","btree","map","RangeMut"],"kind":"struct"},"16:4568:14744":{"crate_id":16,"path":["gimli","constants","DwAccess"],"kind":"struct"},"2:31837:2361":{"crate_id":2,"path":["core","convert","Infallible"],"kind":"enum"},"2:46249:2478":{"crate_id":2,"path":["core","core_arch","simd","f32x8"],"kind":"struct"},"16:2524:14179":{"crate_id":16,"path":["gimli","common","DebugLineStrOffset"],"kind":"struct"},"6:1645:9714":{"crate_id":6,"path":["libc","unix","linux_like","in_pktinfo"],"kind":"struct"},"2:43468:1987":{"crate_id":2,"path":["core","str","iter","EscapeDefault"],"kind":"struct"},"6:488:8792":{"crate_id":6,"path":["libc","unix","timeval"],"kind":"struct"},"5:1365:2012":{"crate_id":5,"path":["alloc","collections","btree","map","IterMut"],"kind":"struct"},"2:7541:2041":{"crate_id":2,"path":["core","iter","traits","marker","FusedIterator"],"kind":"trait"},"17:10452:15459":{"crate_id":17,"path":["object","read","pe","section","PeSegmentIterator"],"kind":"struct"},"2:2254:104":{"crate_id":2,"path":["core","clone","Clone"],"kind":"trait"},"1:3982:2243":{"crate_id":1,"path":["std","os","unix","fs","DirEntryExt2"],"kind":"trait"},"2:4:1008":{"crate_id":2,"path":["core","panic"],"kind":"macro"},"2:20881:2252":{"crate_id":2,"path":["core","core_simd","masks","to_bitmask","sealed","Sealed"],"kind":"trait"},"1:10855:2360":{"crate_id":1,"path":["std","sys","unix","process","process_common","ExitCode"],"kind":"struct"},"17:10626:15491":{"crate_id":17,"path":["object","read","pe","import","DelayLoadDescriptorIterator"],"kind":"struct"},"2:2793:8032":{"crate_id":2,"path":["core","ops","bit","Not"],"kind":"trait"},"17:13066:19319":{"crate_id":17,"path":["object","pe","AnonObjectHeaderV2"],"kind":"struct"},"1:4676:2255":{"crate_id":1,"path":["std","os","fd","raw","FromRawFd"],"kind":"trait"},"2:43792:7686":{"crate_id":2,"path":["core","str","lossy","Utf8Chunks"],"kind":"struct"},"6:4592:12253":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Sym"],"kind":"struct"},"2:9246:28692":{"crate_id":2,"path":["core","fmt","fmt","BorrowedPlaceholder"],"kind":"struct"},"14:40:18044":{"crate_id":14,"path":["rustc_demangle","v0","Ident"],"kind":"struct"},"17:10967:15293":{"crate_id":17,"path":["object","read","Import"],"kind":"struct"},"17:11422:18052":{"crate_id":17,"path":["object","elf","Syminfo64"],"kind":"struct"},"18:80:19392":{"crate_id":18,"path":["memchr","memchr","iter","Memchr"],"kind":"struct"},"1:3350:2158":{"crate_id":1,"path":["std","io","Guard"],"kind":"struct"},"17:11544:18061":{"crate_id":17,"path":["object","elf","Versym"],"kind":"struct"},"14:31:14099":{"crate_id":14,"path":["rustc_demangle","v0","Demangle"],"kind":"struct"},"17:10823:15286":{"crate_id":17,"path":["object","read","SectionIndex"],"kind":"struct"},"2:2512:235":{"crate_id":2,"path":["core","convert","TryFrom"],"kind":"trait"},"5:6760:30315":{"crate_id":5,"path":["alloc","vec","dedup_by","FillGapOnDrop"],"kind":"struct"},"2:2810:8031":{"crate_id":2,"path":["core","ops","bit","BitXor"],"kind":"trait"},"2:42484:143":{"crate_id":2,"path":["core","hash","sip","Hasher"],"kind":"struct"},"6:482:8791":{"crate_id":6,"path":["libc","unix","utimbuf"],"kind":"struct"},"16:6506:15134":{"crate_id":16,"path":["gimli","read","index","UnitIndexSectionIterator"],"kind":"struct"},"2:41004:153":{"crate_id":2,"path":["core","net","ip_addr","IpAddr"],"kind":"enum"},"2:4378:7770":{"crate_id":2,"path":["core","cell","RefMut"],"kind":"struct"},"6:4327:12226":{"crate_id":6,"path":["libc","unix","linux_like","linux","signalfd_siginfo"],"kind":"struct"},"17:9453:15309":{"crate_id":17,"path":["object","read","archive","MemberHeader"],"kind":"enum"},"16:5677:15098":{"crate_id":16,"path":["gimli","read","cfi","CieOffsetEncoding"],"kind":"enum"},"17:9188:33917":{"crate_id":17,"path":["object","read","any","ComdatSectionIteratorInternal"],"kind":"enum"},"2:47143:2517":{"crate_id":2,"path":["core","core_arch","simd","u64x8"],"kind":"struct"},"2:22280:171":{"crate_id":2,"path":["core","num","nonzero","NonZeroI8"],"kind":"struct"},"6:7263:13737":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","align","sem_t"],"kind":"struct"},"11:1845:2017":{"crate_id":11,"path":["hashbrown","set","DrainFilter"],"kind":"struct"},"2:11137:8131":{"crate_id":2,"path":["core","slice","SlicePattern"],"kind":"trait"},"6:4612:12255":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Phdr"],"kind":"struct"},"6:474:8790":{"crate_id":6,"path":["libc","unix","group"],"kind":"struct"},"2:2502:147":{"crate_id":2,"path":["core","convert","Into"],"kind":"trait"},"17:9557:15279":{"crate_id":17,"path":["object","read","coff","symbol","SymbolTable"],"kind":"struct"},"8:0:1763":{"crate_id":8,"path":["cfg_if"],"kind":"module"},"1:6534:2390":{"crate_id":1,"path":["std","sync","remutex","ReentrantMutex"],"kind":"struct"},"6:4406:12233":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_event"],"kind":"struct"},"1:8958:15154":{"crate_id":1,"path":["std","sync","mpmc","select","Operation"],"kind":"struct"},"17:8310:15260":{"crate_id":17,"path":["object","common","SectionKind"],"kind":"enum"},"17:10000:15438":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCache"],"kind":"struct"},"5:6603:7732":{"crate_id":5,"path":["alloc","vec","in_place_drop","InPlaceDstBufDrop"],"kind":"struct"},"2:43955:2439":{"crate_id":2,"path":["core","time","TryFromFloatSecsError"],"kind":"struct"},"1:8224:2219":{"crate_id":1,"path":["std","os","unix","net","listener","Incoming"],"kind":"struct"},"1:4678:2256":{"crate_id":1,"path":["std","os","fd","raw","IntoRawFd"],"kind":"trait"},"1:11451:22211":{"crate_id":1,"path":["std","personality","dwarf","eh","EHContext"],"kind":"struct"},"6:6004:12944":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ptrace_syscall_info"],"kind":"struct"},"16:6767:15142":{"crate_id":16,"path":["gimli","read","line","IncompleteLineProgram"],"kind":"struct"},"16:4728:14808":{"crate_id":16,"path":["gimli","constants","DwAddr"],"kind":"struct"},"11:274:32741":{"crate_id":11,"path":["hashbrown","raw","RawIterRange"],"kind":"struct"},"16:2298:14142":{"crate_id":16,"path":["gimli","common","Format"],"kind":"enum"},"1:3460:2167":{"crate_id":1,"path":["std","io","BufRead"],"kind":"trait"},"5:3974:2016":{"crate_id":5,"path":["alloc","collections","vec_deque","drain","Drain"],"kind":"struct"},"6:4301:12224":{"crate_id":6,"path":["libc","unix","linux_like","linux","spwd"],"kind":"struct"},"17:12646:18605":{"crate_id":17,"path":["object","macho","ScatteredRelocationInfo"],"kind":"struct"},"11:1840:2016":{"crate_id":11,"path":["hashbrown","set","Drain"],"kind":"struct"},"1:947:2023":{"crate_id":1,"path":["std","collections","hash","map","RawOccupiedEntryMut"],"kind":"struct"},"6:62:8418":{"crate_id":6,"path":["libc","unix","DIR"],"kind":"enum"},"6:0:812":{"crate_id":6,"path":["libc"],"kind":"module"},"2:39034:200":{"crate_id":2,"path":["core","ops","range","RangeTo"],"kind":"struct"},"2:46857:2510":{"crate_id":2,"path":["core","core_arch","simd","u16x32"],"kind":"struct"},"2:43048:7648":{"crate_id":2,"path":["core","slice","iter","RChunksMut"],"kind":"struct"},"16:8025:15183":{"crate_id":16,"path":["gimli","read","unit","Attribute"],"kind":"struct"},"2:20886:2445":{"crate_id":2,"path":["core","core_simd","masks","to_bitmask","ToBitMask"],"kind":"trait"},"17:13233:19330":{"crate_id":17,"path":["object","pe","ImageAuxSymbolCrc"],"kind":"struct"},"2:31873:24540":{"crate_id":2,"path":["core","error","private","Internal"],"kind":"struct"},"2:39756:1987":{"crate_id":2,"path":["core","ascii","EscapeDefault"],"kind":"struct"},"11:1832:2011":{"crate_id":11,"path":["hashbrown","set","Iter"],"kind":"struct"},"6:4442:12237":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_mask"],"kind":"struct"},"16:3815:14231":{"crate_id":16,"path":["gimli","constants","DwUt"],"kind":"struct"},"17:10857:15288":{"crate_id":17,"path":["object","read","SymbolSection"],"kind":"enum"},"5:3116:2011":{"crate_id":5,"path":["alloc","collections","btree","set","Iter"],"kind":"struct"},"2:2920:1905":{"crate_id":2,"path":["core","ops","function","FnOnce"],"kind":"trait"},"6:1559:9707":{"crate_id":6,"path":["libc","unix","linux_like","addrinfo"],"kind":"struct"},"1:10642:22220":{"crate_id":1,"path":["std","sys","unix","fs","StatxExtraFields"],"kind":"struct"},"2:38873:7755":{"crate_id":2,"path":["core","ops","control_flow","ControlFlow"],"kind":"enum"},"2:41961:7596":{"crate_id":2,"path":["core","fmt","num","Octal"],"kind":"struct"},"1:731:140":{"crate_id":1,"path":["std","collections","hash","map","HashMap"],"kind":"struct"},"1:3672:2221":{"crate_id":1,"path":["std","net","tcp","TcpStream"],"kind":"struct"},"1:844:2011":{"crate_id":1,"path":["std","collections","hash","map","Iter"],"kind":"struct"},"2:43146:2172":{"crate_id":2,"path":["core","str","iter","Bytes"],"kind":"struct"},"2:11614:7662":{"crate_id":2,"path":["core","str","pattern","Searcher"],"kind":"trait"},"1:6292:164":{"crate_id":1,"path":["std","sync","mutex","Mutex"],"kind":"struct"},"1:11871:415":{"crate_id":1,"path":["std","char"],"kind":"primitive"},"18:538:19422":{"crate_id":18,"path":["memchr","memmem","rabinkarp","NeedleHash"],"kind":"struct"},"1:4571:22194":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt","st_mtime"],"kind":"foreign_type"},"16:6535:33144":{"crate_id":16,"path":["gimli","read","lazy","imp","LazyArc"],"kind":"struct"},"16:2668:14185":{"crate_id":16,"path":["gimli","common","RawRangeListsOffset"],"kind":"struct"},"1:4755:2250":{"crate_id":1,"path":["std","os","fd","owned","AsFd"],"kind":"trait"},"16:5963:15109":{"crate_id":16,"path":["gimli","read","cfi","RegisterRuleIter"],"kind":"struct"},"2:20467:28585":{"crate_id":2,"path":["core","core_simd","swizzle","rotate_lanes_right","Rotate"],"kind":"struct"},"2:22313:168":{"crate_id":2,"path":["core","num","nonzero","NonZeroI16"],"kind":"struct"},"17:1978:15360":{"crate_id":17,"path":["object","read","elf","relocation","ElfSectionRelocationIterator"],"kind":"struct"},"16:8170:15191":{"crate_id":16,"path":["gimli","read","unit","DebugTypesUnitHeadersIter"],"kind":"struct"},"2:7193:119":{"crate_id":2,"path":["core","iter","traits","double_ended","DoubleEndedIterator"],"kind":"trait"},"16:5693:15099":{"crate_id":16,"path":["gimli","read","cfi","BaseAddresses"],"kind":"struct"},"1:8417:2339":{"crate_id":1,"path":["std","path","Component"],"kind":"enum"},"16:5724:15101":{"crate_id":16,"path":["gimli","read","cfi","CfiEntriesIter"],"kind":"struct"},"17:11770:18551":{"crate_id":17,"path":["object","macho","DyldCacheMappingInfo"],"kind":"struct"},"6:4840:12280":{"crate_id":6,"path":["libc","unix","linux_like","linux","file_clone_range"],"kind":"struct"},"2:20439:7809":{"crate_id":2,"path":["core","core_simd","swizzle","reverse","Reverse"],"kind":"struct"},"16:6460:15131":{"crate_id":16,"path":["gimli","read","index","DebugCuIndex"],"kind":"struct"},"1:10647:2136":{"crate_id":1,"path":["std","sys","unix","fs","OpenOptions"],"kind":"struct"},"16:7042:33121":{"crate_id":16,"path":["gimli","read","lookup","PubStuffHeader"],"kind":"struct"},"1:1982:183":{"crate_id":1,"path":["std","ffi","os_str","OsString"],"kind":"struct"},"17:12449:18592":{"crate_id":17,"path":["object","macho","BuildToolVersion"],"kind":"struct"},"2:44167:7578":{"crate_id":2,"path":["core","alloc","layout","LayoutError"],"kind":"struct"},"2:42459:7823":{"crate_id":2,"path":["core","hash","sip","SipHasher13"],"kind":"struct"},"5:0:284":{"crate_id":5,"path":["alloc"],"kind":"module"},"17:12403:18589":{"crate_id":17,"path":["object","macho","EncryptionInfoCommand64"],"kind":"struct"},"6:4773:12271":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_j1939"],"kind":"struct"},"16:6854:15145":{"crate_id":16,"path":["gimli","read","line","FileEntryFormat"],"kind":"struct"},"5:1715:2017":{"crate_id":5,"path":["alloc","collections","btree","map","DrainFilter"],"kind":"struct"},"2:2579:114":{"crate_id":2,"path":["core","default","Default"],"kind":"trait"},"2:43364:7681":{"crate_id":2,"path":["core","str","iter","Matches"],"kind":"struct"},"11:646:2012":{"crate_id":11,"path":["hashbrown","map","IterMut"],"kind":"struct"},"2:41331:191":{"crate_id":2,"path":["core","pin","Pin"],"kind":"struct"},"6:1541:9705":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_in"],"kind":"struct"},"2:12244:190":{"crate_id":2,"path":["core","future","pending","Pending"],"kind":"struct"},"17:9907:15390":{"crate_id":17,"path":["object","read","elf","version","VersionIndex"],"kind":"struct"},"2:46605:2521":{"crate_id":2,"path":["core","core_arch","simd","u8x64"],"kind":"struct"},"17:9340:15282":{"crate_id":17,"path":["object","read","any","SectionRelocationIterator"],"kind":"struct"},"1:3396:2143":{"crate_id":1,"path":["std","io","IoSliceMut"],"kind":"struct"},"2:11826:110":{"crate_id":2,"path":["core","str","lossy","Debug"],"kind":"struct"},"11:1085:14089":{"crate_id":11,"path":["hashbrown","map","OccupiedEntryRef"],"kind":"struct"},"5:4817:202":{"crate_id":5,"path":["alloc","rc","Rc"],"kind":"struct"},"11:387:32759":{"crate_id":11,"path":["hashbrown","raw","RawIterHash"],"kind":"struct"},"17:10936:15292":{"crate_id":17,"path":["object","read","ObjectMapEntry"],"kind":"struct"},"2:43026:7629":{"crate_id":2,"path":["core","slice","iter","ArrayChunksMut"],"kind":"struct"},"1:8738:2358":{"crate_id":1,"path":["std","process","ExitStatus"],"kind":"struct"},"1:959:2025":{"crate_id":1,"path":["std","collections","hash","map","RawEntryBuilder"],"kind":"struct"},"17:10923:15291":{"crate_id":17,"path":["object","read","ObjectMap"],"kind":"struct"},"5:6735:30290":{"crate_id":5,"path":["alloc","vec","retain_mut","BackshiftOnDrop"],"kind":"struct"},"2:46215:2496":{"crate_id":2,"path":["core","core_arch","simd","i64x4"],"kind":"struct"},"5:7023:2016":{"crate_id":5,"path":["alloc","collections","binary_heap","Drain"],"kind":"struct"},"17:10465:15458":{"crate_id":17,"path":["object","read","pe","section","PeSegment"],"kind":"struct"},"5:4335:30302":{"crate_id":5,"path":["alloc","collections","vec_deque","drop","Dropper"],"kind":"struct"},"1:9028:217":{"crate_id":1,"path":["std","sync","rwlock","RwLockWriteGuard"],"kind":"struct"},"1:7781:2136":{"crate_id":1,"path":["std","fs","OpenOptions"],"kind":"struct"},"17:13777:19372":{"crate_id":17,"path":["object","pe","ImageCoffSymbolsHeader"],"kind":"struct"},"6:4354:12227":{"crate_id":6,"path":["libc","unix","linux_like","linux","itimerspec"],"kind":"struct"},"11:0:1766":{"crate_id":11,"path":["hashbrown"],"kind":"module"},"2:2344:187":{"crate_id":2,"path":["core","cmp","PartialOrd"],"kind":"trait"},"2:3987:28664":{"crate_id":2,"path":["core","asserting","TryCaptureWithoutDebug"],"kind":"struct"},"17:12033:18565":{"crate_id":17,"path":["object","macho","DylibCommand"],"kind":"struct"},"5:6999:2058":{"crate_id":5,"path":["alloc","alloc","Global"],"kind":"struct"},"16:7697:15175":{"crate_id":16,"path":["gimli","read","str","DebugLineStr"],"kind":"struct"},"2:4252:7762":{"crate_id":2,"path":["core","cell","BorrowMutError"],"kind":"struct"},"2:20505:28762":{"crate_id":2,"path":["core","core_simd","swizzle","deinterleave","Even"],"kind":"struct"},"1:11886:740":{"crate_id":1,"path":["std","i64"],"kind":"primitive"},"1:4323:2267":{"crate_id":1,"path":["std","os","unix","net","stream","UnixStream"],"kind":"struct"},"1:7683:2096":{"crate_id":1,"path":["std","env","JoinPathsError"],"kind":"struct"},"1:7922:24536":{"crate_id":1,"path":["std","io","error","SimpleMessage"],"kind":"struct"},"2:39132:8042":{"crate_id":2,"path":["core","ops","try_trait","Yeet"],"kind":"struct"},"2:21734:28150":{"crate_id":2,"path":["core","num","flt2dec","decoder","FullDecoded"],"kind":"enum"},"1:4107:2270":{"crate_id":1,"path":["std","os","unix","net","ancillary","AncillaryData"],"kind":"enum"},"2:45745:28152":{"crate_id":2,"path":["core","core_arch","simd","m64x2"],"kind":"struct"},"5:7190:2113":{"crate_id":5,"path":["alloc","ffi","c_str","NulError"],"kind":"struct"},"6:6764:13360":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","mcontext_t"],"kind":"struct"},"6:4399:12232":{"crate_id":6,"path":["libc","unix","linux_like","linux","sembuf"],"kind":"struct"},"2:40027:7628":{"crate_id":2,"path":["core","iter","adapters","array_chunks","ArrayChunks"],"kind":"struct"},"1:6478:2385":{"crate_id":1,"path":["std","sync","poison","PoisonError"],"kind":"struct"},"6:4963:12293":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_alg"],"kind":"struct"},"1:1844:2092":{"crate_id":1,"path":["std","env","Args"],"kind":"struct"},"1:1895:2107":{"crate_id":1,"path":["std","error","Report"],"kind":"struct"},"1:8790:2013":{"crate_id":1,"path":["std","sync","mpsc","IntoIter"],"kind":"struct"},"17:12419:18590":{"crate_id":17,"path":["object","macho","VersionMinCommand"],"kind":"struct"},"17:12307:18582":{"crate_id":17,"path":["object","macho","TwolevelHint"],"kind":"struct"},"17:8573:15268":{"crate_id":17,"path":["object","common","SectionFlags"],"kind":"enum"},"2:43759:7704":{"crate_id":2,"path":["core","str","pattern","TwoWaySearcher"],"kind":"struct"},"5:6092:2527":{"crate_id":5,"path":["alloc","task","Wake"],"kind":"trait"},"2:6538:7970":{"crate_id":2,"path":["core","iter","adapters","zip","zip"],"kind":"function"},"1:676:1994":{"crate_id":1,"path":["std","backtrace","LazilyResolvedCapture"],"kind":"struct"},"1:11882:639":{"crate_id":1,"path":["std","f64"],"kind":"primitive"},"2:45325:2508":{"crate_id":2,"path":["core","core_arch","simd","u16x8"],"kind":"struct"},"17:9653:15354":{"crate_id":17,"path":["object","read","elf","file","ElfFile"],"kind":"struct"},"6:4360:12228":{"crate_id":6,"path":["libc","unix","linux_like","linux","fsid_t"],"kind":"struct"},"2:44992:2486":{"crate_id":2,"path":["core","core_arch","simd","i16x2"],"kind":"struct"},"6:5962:12939":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","seminfo"],"kind":"struct"},"6:7479:12448":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_rwlockattr_t"],"kind":"struct"},"2:3305:68":{"crate_id":2,"path":["core","any","Any"],"kind":"trait"},"17:9670:15340":{"crate_id":17,"path":["object","read","elf","segment","ElfSegmentIterator"],"kind":"struct"},"5:1403:2014":{"crate_id":5,"path":["alloc","collections","btree","map","Keys"],"kind":"struct"},"1:1594:2035":{"crate_id":1,"path":["std","collections","hash","set","Union"],"kind":"struct"},"2:42250:70":{"crate_id":2,"path":["core","fmt","rt","Argument"],"kind":"struct"},"5:7264:7706":{"crate_id":5,"path":["alloc","string","FromUtf8Error"],"kind":"struct"},"9:52:13988":{"crate_id":9,"path":["miniz_oxide","inflate","core","DecompressorOxide"],"kind":"struct"},"2:2768:8024":{"crate_id":2,"path":["core","ops","arith","Neg"],"kind":"trait"},"1:2357:2128":{"crate_id":1,"path":["std","fs","canonicalize"],"kind":"function"},"2:0:493":{"crate_id":2,"path":["core"],"kind":"module"},"2:2899:2047":{"crate_id":2,"path":["core","ops","deref","DerefMut"],"kind":"trait"},"17:10334:15279":{"crate_id":17,"path":["object","read","macho","symbol","SymbolTable"],"kind":"struct"},"17:13477:19354":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation32V2"],"kind":"struct"},"1:2545:19841":{"crate_id":1,"path":["std","io","buffered","bufwriter","flush_buf","BufGuard"],"kind":"struct"},"5:7204:28131":{"crate_id":5,"path":["alloc","ffi","c_str","FromBytesWithNulErrorKind"],"kind":"enum"},"2:39997:2116":{"crate_id":2,"path":["core","ffi","VaListImpl"],"kind":"struct"},"2:9576:19841":{"crate_id":2,"path":["core","slice","sort","merge_sort","BufGuard"],"kind":"struct"},"2:44970:2498":{"crate_id":2,"path":["core","core_arch","simd","i8x4"],"kind":"struct"},"17:10712:15496":{"crate_id":17,"path":["object","read","pe","resource","ResourceNameOrId"],"kind":"enum"},"17:12894:19308":{"crate_id":17,"path":["object","pe","MaskedRichHeaderEntry"],"kind":"struct"},"5:7098:2013":{"crate_id":5,"path":["alloc","collections","vec_deque","into_iter","IntoIter"],"kind":"struct"},"1:8254:2307":{"crate_id":1,"path":["std","os","linux","raw","arch","stat"],"kind":"struct"},"1:4674:2251":{"crate_id":1,"path":["std","os","fd","raw","AsRawFd"],"kind":"trait"},"2:2681:1900":{"crate_id":2,"path":["core","marker","Sized"],"kind":"trait"},"2:22148:174":{"crate_id":2,"path":["core","num","nonzero","NonZeroU32"],"kind":"struct"},"2:43058:7646":{"crate_id":2,"path":["core","slice","iter","RChunksExact"],"kind":"struct"},"16:6474:15132":{"crate_id":16,"path":["gimli","read","index","DebugTuIndex"],"kind":"struct"},"5:1241:2029":{"crate_id":5,"path":["alloc","collections","btree","map","entry","OccupiedError"],"kind":"struct"},"1:6232:204":{"crate_id":1,"path":["std","sync","mpmc","Receiver"],"kind":"struct"},"2:20761:2448":{"crate_id":2,"path":["core","core_simd","lane_count","SupportedLaneCount"],"kind":"trait"},"17:9409:15306":{"crate_id":17,"path":["object","read","archive","Members"],"kind":"enum"},"2:42496:2337":{"crate_id":2,"path":["core","hash","sip","State"],"kind":"struct"},"16:2502:14178":{"crate_id":16,"path":["gimli","common","DebugLineOffset"],"kind":"struct"},"2:44086:209":{"crate_id":2,"path":["core","future","ResumeTy"],"kind":"struct"},"1:8883:2381":{"crate_id":1,"path":["std","sync","condvar","WaitTimeoutResult"],"kind":"struct"},"2:4011:102":{"crate_id":2,"path":["core","asserting","Capture"],"kind":"struct"},"16:535:33146":{"crate_id":16,"path":["gimli","read","cfi","RegisterRuleMap"],"kind":"struct"},"1:11820:20220":{"crate_id":1,"path":["std","backtrace_rs","symbolize","gimli","parse_running_mmaps","MapsEntry"],"kind":"struct"},"17:10527:15488":{"crate_id":17,"path":["object","read","pe","export","ExportTarget"],"kind":"enum"},"1:8131:2172":{"crate_id":1,"path":["std","io","Bytes"],"kind":"struct"},"6:5786:12927":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","msghdr"],"kind":"struct"},"1:11842:1997":{"crate_id":1,"path":["std","backtrace_rs","types","BytesOrWideString"],"kind":"enum"},"17:10691:15494":{"crate_id":17,"path":["object","read","pe","resource","ResourceDirectoryEntryData"],"kind":"enum"},"17:13857:19378":{"crate_id":17,"path":["object","pe","ImageArchitectureEntry"],"kind":"struct"},"2:21833:2231":{"crate_id":2,"path":["core","num","error","IntErrorKind"],"kind":"enum"},"2:45644:28176":{"crate_id":2,"path":["core","core_arch","simd","m8x16"],"kind":"struct"},"16:5741:15102":{"crate_id":16,"path":["gimli","read","cfi","CieOrFde"],"kind":"enum"},"17:12959:19312":{"crate_id":17,"path":["object","pe","ImageRomOptionalHeader"],"kind":"struct"},"17:13499:19356":{"crate_id":17,"path":["object","pe","ImagePrologueDynamicRelocationHeader"],"kind":"struct"},"16:0:1770":{"crate_id":16,"path":["gimli"],"kind":"module"},"2:45471:2488":{"crate_id":2,"path":["core","core_arch","simd","i16x8"],"kind":"struct"},"1:11870:932":{"crate_id":1,"path":["std","never"],"kind":"primitive"},"2:42718:7631":{"crate_id":2,"path":["core","slice","ascii","EscapeAscii"],"kind":"struct"},"1:11837:21830":{"crate_id":1,"path":["std","backtrace_rs","symbolize","gimli","Cache"],"kind":"struct"},"2:47059:2479":{"crate_id":2,"path":["core","core_arch","simd","f32x16"],"kind":"struct"},"2:3630:2013":{"crate_id":2,"path":["core","array","iter","IntoIter"],"kind":"struct"},"17:11258:18043":{"crate_id":17,"path":["object","elf","FileHeader64"],"kind":"struct"},"1:530:1963":{"crate_id":1,"path":["std","thread","Packet"],"kind":"struct"},"2:41061:2213":{"crate_id":2,"path":["core","net","ip_addr","Ipv6MulticastScope"],"kind":"enum"},"1:5922:204":{"crate_id":1,"path":["std","sync","mpmc","counter","Receiver"],"kind":"struct"},"6:6104:12137":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","sysinfo"],"kind":"struct"},"17:1034:15326":{"crate_id":17,"path":["object","read","coff","relocation","CoffRelocationIterator"],"kind":"struct"},"17:975:15322":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbolIterator"],"kind":"struct"},"1:7461:21109":{"crate_id":1,"path":["std","backtrace_rs","symbolize","SymbolName"],"kind":"struct"},"6:500:8794":{"crate_id":6,"path":["libc","unix","rlimit"],"kind":"struct"},"1:11878:1468":{"crate_id":1,"path":["std","tuple"],"kind":"primitive"},"1:8144:2169":{"crate_id":1,"path":["std","io","Lines"],"kind":"struct"},"5:4136:2158":{"crate_id":5,"path":["alloc","collections","vec_deque","into_iter","try_fold","Guard"],"kind":"struct"},"2:46399:2502":{"crate_id":2,"path":["core","core_arch","simd","i8x64"],"kind":"struct"},"2:30089:8015":{"crate_id":2,"path":["core","mem","transmutability","Assume"],"kind":"struct"},"17:9886:15362":{"crate_id":17,"path":["object","read","elf","hash","HashTable"],"kind":"struct"},"1:8486:2342":{"crate_id":1,"path":["std","path","StripPrefixError"],"kind":"struct"},"2:45979:2516":{"crate_id":2,"path":["core","core_arch","simd","u64x4"],"kind":"struct"},"17:0:1771":{"crate_id":17,"path":["object"],"kind":"module"},"1:11185:20116":{"crate_id":1,"path":["std","sys_common","wtf8","CodePoint"],"kind":"struct"},"2:10127:7649":{"crate_id":2,"path":["core","slice","iter","RSplit"],"kind":"struct"},"17:13453:19351":{"crate_id":17,"path":["object","pe","ImageDynamicRelocationTable"],"kind":"struct"},"1:5316:2348":{"crate_id":1,"path":["std","process","Child"],"kind":"struct"},"17:8548:15267":{"crate_id":17,"path":["object","common","SegmentFlags"],"kind":"enum"},"2:10054:7642":{"crate_id":2,"path":["core","slice","iter","SplitMut"],"kind":"struct"},"2:21717:28153":{"crate_id":2,"path":["core","num","flt2dec","decoder","Decoded"],"kind":"struct"},"1:7580:1969":{"crate_id":1,"path":["std","thread","Builder"],"kind":"struct"},"1:10825:2353":{"crate_id":1,"path":["std","sys","unix","process","process_common","Stdio"],"kind":"enum"},"11:669:2019":{"crate_id":11,"path":["hashbrown","map","IntoKeys"],"kind":"struct"},"2:39870:7791":{"crate_id":2,"path":["core","char","ToLowercase"],"kind":"struct"},"18:574:33936":{"crate_id":18,"path":["memchr","memmem","twoway","Forward"],"kind":"struct"},"2:21429:2447":{"crate_id":2,"path":["core","core_simd","vector","SimdElement"],"kind":"trait"},"1:618:1989":{"crate_id":1,"path":["std","backtrace","Backtrace"],"kind":"struct"},"17:13015:19314":{"crate_id":17,"path":["object","pe","ImageNtHeaders64"],"kind":"struct"},"1:8938:24514":{"crate_id":1,"path":["std","sync","mpmc","list","Position"],"kind":"struct"},"16:7519:15165":{"crate_id":16,"path":["gimli","read","pubtypes","PubTypesEntryIter"],"kind":"struct"},"2:40527:7966":{"crate_id":2,"path":["core","iter","sources","successors","Successors"],"kind":"struct"},"1:10932:19714":{"crate_id":1,"path":["std","sys","unix","process","process_inner","posix_spawn","PosixSpawnFileActions"],"kind":"struct"},"6:4542:12250":{"crate_id":6,"path":["libc","unix","linux_like","linux","dl_phdr_info"],"kind":"struct"},"1:7776:2139":{"crate_id":1,"path":["std","fs","ReadDir"],"kind":"struct"},"1:10041:21098":{"crate_id":1,"path":["std","sys","unix","os_str","Slice"],"kind":"struct"},"17:12510:18596":{"crate_id":17,"path":["object","macho","IdentCommand"],"kind":"struct"},"6:7514:12453":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_mutex_t"],"kind":"struct"},"2:43911:8171":{"crate_id":2,"path":["core","str","UnsafeBytesToStr"],"kind":"struct"},"2:45024:2519":{"crate_id":2,"path":["core","core_arch","simd","u8x8"],"kind":"struct"},"2:9559:29458":{"crate_id":2,"path":["core","slice","sort","merge","MergeHole"],"kind":"struct"},"5:2188:30730":{"crate_id":5,"path":["alloc","collections","btree","navigate","LazyLeafRange"],"kind":"struct"},"1:11872:1502":{"crate_id":1,"path":["std","unit"],"kind":"primitive"},"6:4828:12278":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlmsgerr"],"kind":"struct"},"16:2616:14183":{"crate_id":16,"path":["gimli","common","DebugMacinfoOffset"],"kind":"struct"},"17:10377:15406":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbol"],"kind":"struct"},"16:2862:14193":{"crate_id":16,"path":["gimli","common","DebugTypeSignature"],"kind":"struct"},"17:10743:15283":{"crate_id":17,"path":["object","read","traits","NoDynamicRelocationIterator"],"kind":"struct"},"1:8902:105":{"crate_id":1,"path":["std","sync","mpmc","context","Context"],"kind":"struct"},"2:4314:7767":{"crate_id":2,"path":["core","cell","BorrowRef"],"kind":"struct"},"11:1852:2032":{"crate_id":11,"path":["hashbrown","set","Intersection"],"kind":"struct"},"2:43566:7695":{"crate_id":2,"path":["core","str","pattern","CharSearcher"],"kind":"struct"},"17:10092:15443":{"crate_id":17,"path":["object","read","macho","file","MachOComdatSectionIterator"],"kind":"struct"},"2:44924:2518":{"crate_id":2,"path":["core","core_arch","simd","u8x4"],"kind":"struct"},"16:7366:15156":{"crate_id":16,"path":["gimli","read","op","EvaluationResult"],"kind":"enum"},"1:7844:2184":{"crate_id":1,"path":["std","io","buffered","IntoInnerError"],"kind":"struct"},"2:3067:2070":{"crate_id":2,"path":["core","ops","range","RangeBounds"],"kind":"trait"},"5:210:7594":{"crate_id":5,"path":["alloc","boxed","thin","ThinBox"],"kind":"struct"},"2:40200:7987":{"crate_id":2,"path":["core","iter","adapters","rev","Rev"],"kind":"struct"},"5:2915:30801":{"crate_id":5,"path":["alloc","collections","btree","node","marker","ValMut"],"kind":"struct"},"17:2933:15402":{"crate_id":17,"path":["object","read","macho","section","MachOSectionIterator"],"kind":"struct"},"18:614:33956":{"crate_id":18,"path":["memchr","memmem","twoway","SuffixKind"],"kind":"enum"},"11:659:2013":{"crate_id":11,"path":["hashbrown","map","IntoIter"],"kind":"struct"},"2:4592:7783":{"crate_id":2,"path":["core","char","REPLACEMENT_CHARACTER"],"kind":"constant"},"2:41382:2011":{"crate_id":2,"path":["core","result","Iter"],"kind":"struct"},"2:42987:7630":{"crate_id":2,"path":["core","slice","iter","ArrayWindows"],"kind":"struct"},"5:2115:30756":{"crate_id":5,"path":["alloc","collections","btree","navigate","LeafRange"],"kind":"struct"},"2:4324:7768":{"crate_id":2,"path":["core","cell","Ref"],"kind":"struct"},"1:7011:24090":{"crate_id":1,"path":["std","sys_common","wstr","WStrUnits"],"kind":"struct"},"1:10682:128":{"crate_id":1,"path":["std","sys","unix","fs","FileType"],"kind":"struct"},"5:6593:7731":{"crate_id":5,"path":["alloc","vec","in_place_drop","InPlaceDrop"],"kind":"struct"},"6:1583:9709":{"crate_id":6,"path":["libc","unix","linux_like","fd_set"],"kind":"struct"},"17:11234:18042":{"crate_id":17,"path":["object","elf","FileHeader32"],"kind":"struct"},"2:45232:27974":{"crate_id":2,"path":["core","core_arch","simd","f64x1"],"kind":"struct"},"1:3990:2245":{"crate_id":1,"path":["std","os","unix","fs","DirBuilderExt"],"kind":"trait"},"16:3030:14198":{"crate_id":16,"path":["gimli","common","DwoId"],"kind":"struct"},"17:11069:15297":{"crate_id":17,"path":["object","read","CompressionFormat"],"kind":"enum"},"16:3047:14199":{"crate_id":16,"path":["gimli","common","DwarfFileType"],"kind":"enum"},"2:4243:205":{"crate_id":2,"path":["core","cell","RefCell"],"kind":"struct"},"2:41407:181":{"crate_id":2,"path":["core","sync","atomic","Ordering"],"kind":"enum"},"2:7164:1907":{"crate_id":2,"path":["core","iter","traits","collect","Extend"],"kind":"trait"},"6:4381:12072":{"crate_id":6,"path":["libc","unix","linux_like","linux","if_nameindex"],"kind":"struct"},"17:11902:18558":{"crate_id":17,"path":["object","macho","SegmentCommand32"],"kind":"struct"},"1:2827:19850":{"crate_id":1,"path":["std","io","error","repr_bitpacked","Repr"],"kind":"struct"},"1:10216:22323":{"crate_id":1,"path":["std","sys","unix","process","process_common","Argv"],"kind":"struct"},"2:20699:2455":{"crate_id":2,"path":["core","core_simd","elements","uint","SimdUint"],"kind":"trait"},"2:12183:134":{"crate_id":2,"path":["core","future","future","Future"],"kind":"trait"},"1:1561:2011":{"crate_id":1,"path":["std","collections","hash","set","Iter"],"kind":"struct"},"5:3774:30276":{"crate_id":5,"path":["alloc","collections","linked_list","drop","DropGuard"],"kind":"struct"},"5:7145:2009":{"crate_id":5,"path":["alloc","collections","TryReserveError"],"kind":"struct"},"6:4750:12268":{"crate_id":6,"path":["libc","unix","linux_like","linux","regmatch_t"],"kind":"struct"},"16:2546:14180":{"crate_id":16,"path":["gimli","common","LocationListsOffset"],"kind":"struct"},"2:9923:2011":{"crate_id":2,"path":["core","slice","iter","Iter"],"kind":"struct"},"16:2572:14181":{"crate_id":16,"path":["gimli","common","DebugLocListsBase"],"kind":"struct"},"1:5435:2353":{"crate_id":1,"path":["std","process","Stdio"],"kind":"struct"},"2:43772:7685":{"crate_id":2,"path":["core","str","lossy","Utf8Chunk"],"kind":"struct"},"1:3435:2109":{"crate_id":1,"path":["std","io","Write"],"kind":"trait"},"1:5689:2379":{"crate_id":1,"path":["std","sync","barrier","BarrierWaitResult"],"kind":"struct"},"1:11895:1118":{"crate_id":1,"path":["std","reference"],"kind":"primitive"},"17:13516:19358":{"crate_id":17,"path":["object","pe","ImageLoadConfigDirectory32"],"kind":"struct"},"2:3130:8041":{"crate_id":2,"path":["core","ops","range","OneSidedRange"],"kind":"trait"},"6:6124:12974":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","msqid_ds"],"kind":"struct"},"2:30653:181":{"crate_id":2,"path":["core","cmp","Ordering"],"kind":"enum"},"17:13211:19328":{"crate_id":17,"path":["object","pe","ImageAuxSymbolWeak"],"kind":"struct"},"2:9058:2109":{"crate_id":2,"path":["core","fmt","Write"],"kind":"trait"},"11:1866:2034":{"crate_id":11,"path":["hashbrown","set","SymmetricDifference"],"kind":"struct"},"16:5655:15097":{"crate_id":16,"path":["gimli","read","cfi","EhFrame"],"kind":"struct"},"16:6904:15148":{"crate_id":16,"path":["gimli","read","loclists","LocationLists"],"kind":"struct"},"16:7317:33240":{"crate_id":16,"path":["gimli","read","op","EvaluationState"],"kind":"enum"},"13:110:32812":{"crate_id":13,"path":["std_detect","detect","arch","x86","Feature"],"kind":"enum"},"17:13324:19338":{"crate_id":17,"path":["object","pe","ImageThunkData32"],"kind":"struct"},"6:1677:9717":{"crate_id":6,"path":["libc","unix","linux_like","arpreq"],"kind":"struct"},"2:11153:8133":{"crate_id":2,"path":["core","slice","GetManyMutError"],"kind":"struct"},"1:8137:2173":{"crate_id":1,"path":["std","io","Split"],"kind":"struct"},"2:20507:28767":{"crate_id":2,"path":["core","core_simd","swizzle","deinterleave","Odd"],"kind":"struct"},"17:13033:19316":{"crate_id":17,"path":["object","pe","ImageRomHeaders"],"kind":"struct"},"17:10735:15497":{"crate_id":17,"path":["object","read","pe","rich","RichHeaderEntry"],"kind":"struct"},"16:6671:14115":{"crate_id":16,"path":["gimli","read","line","LineRow"],"kind":"struct"},"16:6728:15141":{"crate_id":16,"path":["gimli","read","line","LineProgramHeader"],"kind":"struct"},"16:3749:14213":{"crate_id":16,"path":["gimli","constants","DwSect"],"kind":"struct"},"6:4930:12289":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_authinfo"],"kind":"struct"},"17:12433:18591":{"crate_id":17,"path":["object","macho","BuildVersionCommand"],"kind":"struct"},"17:13292:19335":{"crate_id":17,"path":["object","pe","ImageExportDirectory"],"kind":"struct"},"1:10406:2192":{"crate_id":1,"path":["std","sys","unix","stdio","Stdin"],"kind":"struct"},"18:755:19416":{"crate_id":18,"path":["memchr","memmem","SearcherRev"],"kind":"struct"},"6:4943:12291":{"crate_id":6,"path":["libc","unix","linux_like","linux","dirent"],"kind":"struct"},"16:2879:14194":{"crate_id":16,"path":["gimli","common","DebugFrameOffset"],"kind":"struct"},"5:4320:243":{"crate_id":5,"path":["alloc","collections","vec_deque","VecDeque"],"kind":"struct"},"1:7655:2030":{"crate_id":1,"path":["std","collections","hash","map","RandomState"],"kind":"struct"},"2:6930:2371":{"crate_id":2,"path":["core","iter","sources","once","once"],"kind":"function"},"2:2772:2436":{"crate_id":2,"path":["core","ops","arith","AddAssign"],"kind":"trait"},"16:6336:15123":{"crate_id":16,"path":["gimli","read","abbrev","Abbreviation"],"kind":"struct"},"17:13667:19365":{"crate_id":17,"path":["object","pe","ImageAlpha64RuntimeFunctionEntry"],"kind":"struct"},"18:699:19414":{"crate_id":18,"path":["memchr","memmem","FinderBuilder"],"kind":"struct"},"17:11641:18068":{"crate_id":17,"path":["object","elf","HashHeader"],"kind":"struct"},"17:9178:15278":{"crate_id":17,"path":["object","read","any","ComdatSectionIterator"],"kind":"struct"},"6:4314:12225":{"crate_id":6,"path":["libc","unix","linux_like","linux","dqblk"],"kind":"struct"},"17:10068:15441":{"crate_id":17,"path":["object","read","macho","file","MachOComdatIterator"],"kind":"struct"},"6:123:8473":{"crate_id":6,"path":["libc","unix","fpos_t"],"kind":"enum"},"2:2232:96":{"crate_id":2,"path":["core","borrow","Borrow"],"kind":"trait"},"16:7244:33239":{"crate_id":16,"path":["gimli","read","op","OperationEvaluationResult"],"kind":"enum"},"16:7669:15173":{"crate_id":16,"path":["gimli","read","str","DebugStr"],"kind":"struct"},"17:9098:15276":{"crate_id":17,"path":["object","read","any","SectionIterator"],"kind":"struct"},"2:20636:2453":{"crate_id":2,"path":["core","core_simd","elements","float","SimdFloat"],"kind":"trait"},"1:6548:2391":{"crate_id":1,"path":["std","sync","remutex","ReentrantMutexGuard"],"kind":"struct"},"1:7649:1996":{"crate_id":1,"path":["std","backtrace","RawFrame"],"kind":"enum"},"17:10545:15294":{"crate_id":17,"path":["object","read","pe","export","Export"],"kind":"struct"},"2:5539:7973":{"crate_id":2,"path":["core","iter","adapters","flatten","Flatten"],"kind":"struct"},"2:39903:7789":{"crate_id":2,"path":["core","char","TryFromCharError"],"kind":"struct"},"16:6254:15118":{"crate_id":16,"path":["gimli","read","endian_slice","EndianSlice"],"kind":"struct"},"5:6691:242":{"crate_id":5,"path":["alloc","vec","Vec"],"kind":"struct"},"17:247:33904":{"crate_id":17,"path":["object","read","util","DebugLen"],"kind":"struct"},"1:7606:1968":{"crate_id":1,"path":["std","thread","Thread"],"kind":"struct"},"17:13842:19377":{"crate_id":17,"path":["object","pe","NonPagedDebugInfo"],"kind":"struct"},"2:10234:7654":{"crate_id":2,"path":["core","slice","iter","SplitNMut"],"kind":"struct"},"16:2764:14189":{"crate_id":16,"path":["gimli","common","DebugStrOffset"],"kind":"struct"},"2:39843:1987":{"crate_id":2,"path":["core","char","EscapeDefault"],"kind":"struct"},"1:9372:2139":{"crate_id":1,"path":["std","sys","unix","fs","ReadDir"],"kind":"struct"},"11:2080:2028":{"crate_id":11,"path":["hashbrown","set","VacantEntry"],"kind":"struct"},"16:7335:33233":{"crate_id":16,"path":["gimli","read","op","EvaluationWaiting"],"kind":"enum"},"2:39762:7759":{"crate_id":2,"path":["core","async_iter","from_iter","FromIter"],"kind":"struct"},"5:6441:30276":{"crate_id":5,"path":["alloc","vec","into_iter","drop","DropGuard"],"kind":"struct"},"2:9112:7603":{"crate_id":2,"path":["core","fmt","UpperExp"],"kind":"trait"},"16:5708:15100":{"crate_id":16,"path":["gimli","read","cfi","SectionBaseAddresses"],"kind":"struct"},"2:1628:7949":{"crate_id":2,"path":["core","mem","Discriminant"],"kind":"struct"},"1:585:1985":{"crate_id":1,"path":["std","ascii","AsciiExt"],"kind":"trait"},"1:11877:1388":{"crate_id":1,"path":["std","str"],"kind":"primitive"},"2:47105:2497":{"crate_id":2,"path":["core","core_arch","simd","i64x8"],"kind":"struct"},"6:4461:12240":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_envelope"],"kind":"struct"},"1:10692:117":{"crate_id":1,"path":["std","sys","unix","fs","DirBuilder"],"kind":"struct"},"2:43915:8189":{"crate_id":2,"path":["core","time","Nanoseconds"],"kind":"struct"},"2:42966:7639":{"crate_id":2,"path":["core","slice","iter","ChunksExact"],"kind":"struct"},"11:60:32758":{"crate_id":11,"path":["hashbrown","raw","bitmask","BitMaskIter"],"kind":"struct"},"2:9972:2173":{"crate_id":2,"path":["core","slice","iter","Split"],"kind":"struct"},"2:43903:8176":{"crate_id":2,"path":["core","str","IsNotEmpty"],"kind":"struct"},"6:4998:12296":{"crate_id":6,"path":["libc","unix","linux_like","linux","af_alg_iv"],"kind":"struct"},"2:43424:7678":{"crate_id":2,"path":["core","str","iter","LinesAny"],"kind":"struct"},"14:187:14107":{"crate_id":14,"path":["rustc_demangle","SizeLimitedFmtAdapter"],"kind":"struct"},"6:5996:12943":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_seccomp"],"kind":"struct"},"2:1724:8066":{"crate_id":2,"path":["core","ptr","metadata","Pointee"],"kind":"trait"},"11:1518:14091":{"crate_id":11,"path":["hashbrown","rustc_entry","RustcEntry"],"kind":"enum"},"16:3585:14204":{"crate_id":16,"path":["gimli","arch","X86"],"kind":"struct"},"5:1196:2026":{"crate_id":5,"path":["alloc","collections","btree","map","entry","Entry"],"kind":"enum"},"2:21164:2450":{"crate_id":2,"path":["core","core_simd","ord","SimdPartialOrd"],"kind":"trait"},"6:4414:12234":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_id"],"kind":"struct"},"16:3300:14202":{"crate_id":16,"path":["gimli","arch","LoongArch"],"kind":"struct"},"16:6990:15152":{"crate_id":16,"path":["gimli","read","loclists","LocationListEntry"],"kind":"struct"},"2:43879:8169":{"crate_id":2,"path":["core","str","LinesMap"],"kind":"struct"},"2:43887:8174":{"crate_id":2,"path":["core","str","CharEscapeUnicode"],"kind":"struct"},"6:1731:9723":{"crate_id":6,"path":["libc","unix","linux_like","utsname"],"kind":"struct"},"16:2786:14190":{"crate_id":16,"path":["gimli","common","DebugStrOffsetsBase"],"kind":"struct"},"17:9772:15343":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbolTable"],"kind":"struct"},"2:41090:27356":{"crate_id":2,"path":["core","net","ip_addr","fmt","Span"],"kind":"struct"},"1:9377:19856":{"crate_id":1,"path":["std","sys","unix","fs","Dir"],"kind":"struct"},"16:7683:15174":{"crate_id":16,"path":["gimli","read","str","DebugStrOffsets"],"kind":"struct"},"1:9023:216":{"crate_id":1,"path":["std","sync","rwlock","RwLockReadGuard"],"kind":"struct"},"6:6836:13366":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ucontext_t"],"kind":"struct"},"16:5402:14136":{"crate_id":16,"path":["gimli","endianity","BigEndian"],"kind":"struct"},"6:7520:12454":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_rwlock_t"],"kind":"struct"},"2:3145:133":{"crate_id":2,"path":["core","ops","try_trait","FromResidual"],"kind":"trait"},"1:4569:22192":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt","st_atime"],"kind":"foreign_type"},"6:562:8801":{"crate_id":6,"path":["libc","unix","linger"],"kind":"struct"},"2:40494:7962":{"crate_id":2,"path":["core","iter","sources","once_with","OnceWith"],"kind":"struct"},"1:7518:19837":{"crate_id":1,"path":["std","backtrace_rs","Bomb"],"kind":"struct"},"16:7757:15178":{"crate_id":16,"path":["gimli","read","unit","DebugInfoUnitHeadersIter"],"kind":"struct"},"1:6369:2382":{"crate_id":1,"path":["std","sync","once","OnceState"],"kind":"struct"},"1:7499:19812":{"crate_id":1,"path":["std","backtrace_rs","print","BacktraceFrameFmt"],"kind":"struct"},"2:43459:7675":{"crate_id":2,"path":["core","str","iter","EscapeDebug"],"kind":"struct"},"6:4702:12262":{"crate_id":6,"path":["libc","unix","linux_like","linux","genlmsghdr"],"kind":"struct"},"11:444:140":{"crate_id":11,"path":["hashbrown","map","HashMap"],"kind":"struct"},"5:7039:30797":{"crate_id":5,"path":["alloc","collections","btree","merge_iter","Peeked"],"kind":"enum"},"18:521:19417":{"crate_id":18,"path":["memchr","memmem","prefilter","Prefilter"],"kind":"enum"},"2:41752:84":{"crate_id":2,"path":["core","sync","atomic","AtomicIsize"],"kind":"struct"},"1:917:2018":{"crate_id":1,"path":["std","collections","hash","map","ValuesMut"],"kind":"struct"},"2:11312:8181":{"crate_id":2,"path":["core","str","iter","SplitInternal"],"kind":"struct"},"17:10580:15489":{"crate_id":17,"path":["object","read","pe","import","ImportDescriptorIterator"],"kind":"struct"},"17:11628:18067":{"crate_id":17,"path":["object","elf","NoteHeader64"],"kind":"struct"},"2:41271:2013":{"crate_id":2,"path":["core","option","IntoIter"],"kind":"struct"},"1:4251:2273":{"crate_id":1,"path":["std","os","unix","net","listener","UnixListener"],"kind":"struct"},"16:5367:14140":{"crate_id":16,"path":["gimli","endianity","RunTimeEndian"],"kind":"enum"},"16:55:14137":{"crate_id":16,"path":["gimli","endianity","Endianity"],"kind":"trait"},"1:7852:2050":{"crate_id":1,"path":["std","io","cursor","Cursor"],"kind":"struct"},"2:22379:170":{"crate_id":2,"path":["core","num","nonzero","NonZeroI64"],"kind":"struct"},"5:5708:2016":{"crate_id":5,"path":["alloc","string","Drain"],"kind":"struct"},"11:1859:2033":{"crate_id":11,"path":["hashbrown","set","Difference"],"kind":"struct"},"11:1138:2029":{"crate_id":11,"path":["hashbrown","map","OccupiedError"],"kind":"struct"},"1:10816:21099":{"crate_id":1,"path":["std","sys","unix","os_str","Buf"],"kind":"struct"},"2:40139:7983":{"crate_id":2,"path":["core","iter","adapters","fuse","Fuse"],"kind":"struct"},"2:47318:7563":{"crate_id":2,"path":["core","core_arch","x86","__m128bh"],"kind":"struct"},"2:41027:2211":{"crate_id":2,"path":["core","net","ip_addr","Ipv4Addr"],"kind":"struct"},"1:3870:2236":{"crate_id":1,"path":["std","os","unix","ffi","os_str","OsStringExt"],"kind":"trait"},"6:6566:13351":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","flock64"],"kind":"struct"},"6:547:8799":{"crate_id":6,"path":["libc","unix","pollfd"],"kind":"struct"},"2:45177:2491":{"crate_id":2,"path":["core","core_arch","simd","i32x2"],"kind":"struct"},"14:7:14099":{"crate_id":14,"path":["rustc_demangle","legacy","Demangle"],"kind":"struct"},"6:653:8853":{"crate_id":6,"path":["libc","unix","linux_like","timezone"],"kind":"enum"},"2:40519:7964":{"crate_id":2,"path":["core","iter","sources","repeat_with","RepeatWith"],"kind":"struct"},"2:2674:218":{"crate_id":2,"path":["core","marker","Send"],"kind":"trait"},"16:3063:14200":{"crate_id":16,"path":["gimli","arch","Arm"],"kind":"struct"},"1:8950:21826":{"crate_id":1,"path":["std","sync","mpmc","select","Token"],"kind":"struct"},"17:10670:15483":{"crate_id":17,"path":["object","read","pe","resource","ResourceDirectory"],"kind":"struct"},"1:11025:8189":{"crate_id":1,"path":["std","sys","unix","time","Nanoseconds"],"kind":"struct"},"16:6201:15115":{"crate_id":16,"path":["gimli","read","dwarf","DwarfPackage"],"kind":"struct"},"6:1723:9722":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_storage"],"kind":"struct"},"2:49622:244":{"crate_id":2,"path":["core","core_simd","fmt","fmt","Wrapper"],"kind":"struct"},"1:6184:2392":{"crate_id":1,"path":["std","sync","mpmc","Sender"],"kind":"struct"},"5:5814:2376":{"crate_id":5,"path":["alloc","sync","Weak"],"kind":"struct"},"17:13376:19343":{"crate_id":17,"path":["object","pe","ImageBoundForwarderRef"],"kind":"struct"},"17:9895:15361":{"crate_id":17,"path":["object","read","elf","hash","GnuHashTable"],"kind":"struct"},"6:1571:9708":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_ll"],"kind":"struct"},"2:49596:244":{"crate_id":2,"path":["core","core_simd","fmt","fmt","Wrapper"],"kind":"struct"},"6:6743:13359":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user"],"kind":"struct"},"2:39877:7792":{"crate_id":2,"path":["core","char","ToUppercase"],"kind":"struct"},"5:7031:2040":{"crate_id":5,"path":["alloc","collections","binary_heap","DrainSorted"],"kind":"struct"},"15:180:14117":{"crate_id":15,"path":["addr2line","LocationRangeIter"],"kind":"struct"},"1:11298:19852":{"crate_id":1,"path":["std","sys_common","net","LookupHost"],"kind":"struct"},"2:30177:28122":{"crate_id":2,"path":["core","ptr","alignment","AlignmentEnum32"],"kind":"enum"},"1:8796:2398":{"crate_id":1,"path":["std","sync","mpsc","SendError"],"kind":"struct"},"6:1509:9700":{"crate_id":6,"path":["libc","unix","linux_like","in_addr"],"kind":"struct"},"11:2069:2027":{"crate_id":11,"path":["hashbrown","set","OccupiedEntry"],"kind":"struct"},"2:45903:2509":{"crate_id":2,"path":["core","core_arch","simd","u16x16"],"kind":"struct"},"2:47356:7565":{"crate_id":2,"path":["core","core_arch","x86","__m512bh"],"kind":"struct"},"6:7491:12450":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_barrierattr_t"],"kind":"struct"},"16:5305:15073":{"crate_id":16,"path":["gimli","constants","DwOp"],"kind":"struct"},"6:1534:9704":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr"],"kind":"struct"},"6:506:8795":{"crate_id":6,"path":["libc","unix","rusage"],"kind":"struct"},"2:20912:2451":{"crate_id":2,"path":["core","core_simd","masks","MaskElement"],"kind":"trait"},"6:4681:12260":{"crate_id":6,"path":["libc","unix","linux_like","linux","posix_spawn_file_actions_t"],"kind":"struct"},"16:2337:14171":{"crate_id":16,"path":["gimli","common","LineEncoding"],"kind":"struct"},"1:1565:2013":{"crate_id":1,"path":["std","collections","hash","set","IntoIter"],"kind":"struct"},"11:810:2018":{"crate_id":11,"path":["hashbrown","map","ValuesMut"],"kind":"struct"},"2:2691:226":{"crate_id":2,"path":["core","marker","Sync"],"kind":"trait"},"2:7118:7968":{"crate_id":2,"path":["core","iter","traits","accum","Product"],"kind":"trait"},"1:8037:2141":{"crate_id":1,"path":["std","io","readbuf","BorrowedCursor"],"kind":"struct"},"18:590:28695":{"crate_id":18,"path":["memchr","memmem","twoway","TwoWay"],"kind":"struct"},"1:10618:2306":{"crate_id":1,"path":["std","sys","unix","fd","FileDesc"],"kind":"struct"},"1:926:2020":{"crate_id":1,"path":["std","collections","hash","map","IntoValues"],"kind":"struct"},"11:985:2026":{"crate_id":11,"path":["hashbrown","map","Entry"],"kind":"enum"},"1:9110:22203":{"crate_id":1,"path":["std","sys","common","thread_local","fast_local","DtorState"],"kind":"enum"},"17:10516:15452":{"crate_id":17,"path":["object","read","pe","data_directory","DataDirectories"],"kind":"struct"},"16:6390:15127":{"crate_id":16,"path":["gimli","read","aranges","ArangeHeaderIter"],"kind":"struct"},"1:2355:2127":{"crate_id":1,"path":["std","fs","read_link"],"kind":"function"},"5:3087:94":{"crate_id":5,"path":["alloc","collections","btree","set","BTreeSet"],"kind":"struct"},"17:11484:18057":{"crate_id":17,"path":["object","elf","ProgramHeader32"],"kind":"struct"},"17:9822:15348":{"crate_id":17,"path":["object","read","elf","relocation","RelocationSections"],"kind":"struct"},"18:707:7662":{"crate_id":18,"path":["memchr","memmem","Searcher"],"kind":"struct"},"5:7233:2112":{"crate_id":5,"path":["alloc","ffi","c_str","IntoStringError"],"kind":"struct"},"17:10080:15442":{"crate_id":17,"path":["object","read","macho","file","MachOComdat"],"kind":"struct"},"17:10660:15296":{"crate_id":17,"path":["object","read","pe","relocation","Relocation"],"kind":"struct"},"17:11800:18553":{"crate_id":17,"path":["object","macho","DyldSubCacheInfo"],"kind":"struct"},"2:42194:28560":{"crate_id":2,"path":["core","fmt","rt","Placeholder"],"kind":"struct"},"17:11090:15298":{"crate_id":17,"path":["object","read","CompressedFileRange"],"kind":"struct"},"4:0:1762":{"crate_id":4,"path":["rustc_std_workspace_core"],"kind":"module"},"17:12576:18601":{"crate_id":17,"path":["object","macho","NoteCommand"],"kind":"struct"},"17:9488:15325":{"crate_id":17,"path":["object","read","coff","file","CoffFile"],"kind":"struct"},"2:40260:2171":{"crate_id":2,"path":["core","iter","adapters","take","Take"],"kind":"struct"},"1:3287:2179":{"crate_id":1,"path":["std","io","stdio","IsTerminal"],"kind":"trait"},"2:39159:15193":{"crate_id":2,"path":["core","any","tags","Value"],"kind":"struct"},"2:50910:28556":{"crate_id":2,"path":["core","core_simd","vector","ptr","SimdConstPtr"],"kind":"struct"},"17:12915:19310":{"crate_id":17,"path":["object","pe","ImageDataDirectory"],"kind":"struct"},"1:9033:2402":{"crate_id":1,"path":["std","time","Instant"],"kind":"struct"},"11:751:2016":{"crate_id":11,"path":["hashbrown","map","Drain"],"kind":"struct"},"1:1048:2026":{"crate_id":1,"path":["std","collections","hash","map","Entry"],"kind":"enum"},"1:10409:2194":{"crate_id":1,"path":["std","sys","unix","stdio","Stdout"],"kind":"struct"},"5:4046:2012":{"crate_id":5,"path":["alloc","collections","vec_deque","iter_mut","IterMut"],"kind":"struct"},"5:3183:2035":{"crate_id":5,"path":["alloc","collections","btree","set","Union"],"kind":"struct"},"5:35:2071":{"crate_id":5,"path":["alloc","raw_vec","RawVec"],"kind":"struct"},"17:11339:18047":{"crate_id":17,"path":["object","elf","CompressionHeader32"],"kind":"struct"},"1:3378:2144":{"crate_id":1,"path":["std","io","Read"],"kind":"trait"},"17:9876:15389":{"crate_id":17,"path":["object","read","elf","note","Note"],"kind":"struct"},"2:2686:107":{"crate_id":2,"path":["core","marker","Copy"],"kind":"trait"},"17:13101:19304":{"crate_id":17,"path":["object","pe","ImageSectionHeader"],"kind":"struct"},"6:5015:12298":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_ifr_ifru"],"kind":"union"},"1:5350:2350":{"crate_id":1,"path":["std","process","ChildStdout"],"kind":"struct"},"16:4757:14813":{"crate_id":16,"path":["gimli","constants","DwId"],"kind":"struct"},"1:5495:2354":{"crate_id":1,"path":["std","process","exit"],"kind":"function"},"16:3899:14267":{"crate_id":16,"path":["gimli","constants","DwChildren"],"kind":"struct"},"2:21755:28119":{"crate_id":2,"path":["core","num","flt2dec","Sign"],"kind":"enum"},"6:6694:13357":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_fpstate"],"kind":"struct"},"1:5366:2351":{"crate_id":1,"path":["std","process","ChildStderr"],"kind":"struct"},"2:43899:8175":{"crate_id":2,"path":["core","str","IsAsciiWhitespace"],"kind":"struct"},"17:11163:15503":{"crate_id":17,"path":["object","archive","AixHeader"],"kind":"struct"},"16:8256:15194":{"crate_id":16,"path":["gimli","read","StoreOnHeap"],"kind":"struct"},"17:8858:15273":{"crate_id":17,"path":["object","endian","I64Bytes"],"kind":"struct"},"2:8202:2324":{"crate_id":2,"path":["core","panic","unwind_safe","UnwindSafe"],"kind":"trait"},"1:10128:2363":{"crate_id":1,"path":["std","sys","unix","pipe","AnonPipe"],"kind":"struct"},"2:43136:7670":{"crate_id":2,"path":["core","str","iter","CharIndices"],"kind":"struct"},"1:5243:118":{"crate_id":1,"path":["std","path","Display"],"kind":"struct"},"1:857:2012":{"crate_id":1,"path":["std","collections","hash","map","IterMut"],"kind":"struct"},"1:10702:2142":{"crate_id":1,"path":["std","sys","unix","io","IoSlice"],"kind":"struct"},"1:8972:20242":{"crate_id":1,"path":["std","sync","mpmc","select","Selected"],"kind":"enum"},"6:4982:12295":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_user_dev"],"kind":"struct"},"16:6243:33256":{"crate_id":16,"path":["gimli","read","dwarf","RangeIterInner"],"kind":"enum"},"17:11471:18056":{"crate_id":17,"path":["object","elf","Rela64"],"kind":"struct"},"2:22412:167":{"crate_id":2,"path":["core","num","nonzero","NonZeroI128"],"kind":"struct"},"1:10938:19834":{"crate_id":1,"path":["std","sys","unix","process","process_inner","posix_spawn","PosixSpawnattr"],"kind":"struct"},"2:46185:2493":{"crate_id":2,"path":["core","core_arch","simd","i32x8"],"kind":"struct"},"16:2642:14184":{"crate_id":16,"path":["gimli","common","DebugMacroOffset"],"kind":"struct"},"1:355:1982":{"crate_id":1,"path":["std","thread","scoped","Scope"],"kind":"struct"},"6:1514:9701":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreq"],"kind":"struct"},"2:3222:7589":{"crate_id":2,"path":["core","ops","unsize","DispatchFromDyn"],"kind":"trait"},"16:6327:15122":{"crate_id":16,"path":["gimli","read","abbrev","Abbreviations"],"kind":"struct"},"17:13564:19359":{"crate_id":17,"path":["object","pe","ImageLoadConfigDirectory64"],"kind":"struct"},"16:7711:15176":{"crate_id":16,"path":["gimli","read","UnitOffset"],"kind":"struct"},"5:962:30276":{"crate_id":5,"path":["alloc","collections","binary_heap","drop","DropGuard"],"kind":"struct"},"1:1785:2076":{"crate_id":1,"path":["std","env","VarsOs"],"kind":"struct"},"16:6061:14141":{"crate_id":16,"path":["gimli","read","cfi","CallFrameInstruction"],"kind":"enum"},"1:5559:2392":{"crate_id":1,"path":["std","sync","mpsc","Sender"],"kind":"struct"},"2:7544:2044":{"crate_id":2,"path":["core","iter","traits","marker","TrustedLen"],"kind":"trait"},"2:40148:7984":{"crate_id":2,"path":["core","iter","adapters","inspect","Inspect"],"kind":"struct"},"2:45076:2511":{"crate_id":2,"path":["core","core_arch","simd","u32x2"],"kind":"struct"},"1:11017:20194":{"crate_id":1,"path":["std","sys","unix","thread","cgroups","Cgroup"],"kind":"enum"},"2:2827:8035":{"crate_id":2,"path":["core","ops","bit","BitAndAssign"],"kind":"trait"},"11:762:2017":{"crate_id":11,"path":["hashbrown","map","DrainFilter"],"kind":"struct"},"2:45054:2507":{"crate_id":2,"path":["core","core_arch","simd","u16x4"],"kind":"struct"},"2:8203:2323":{"crate_id":2,"path":["core","panic","unwind_safe","RefUnwindSafe"],"kind":"trait"},"18:636:33932":{"crate_id":18,"path":["memchr","memmem","twoway","ApproximateByteSet"],"kind":"struct"},"6:5983:12941":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_entry"],"kind":"struct"},"2:12461:138":{"crate_id":2,"path":["core","alloc","global","GlobalAlloc"],"kind":"trait"},"16:5032:14872":{"crate_id":16,"path":["gimli","constants","DwLnct"],"kind":"struct"},"17:13169:19325":{"crate_id":17,"path":["object","pe","ImageAuxSymbolTokenDef"],"kind":"struct"},"1:2339:2122":{"crate_id":1,"path":["std","fs","metadata"],"kind":"function"},"17:8256:15239":{"crate_id":17,"path":["object","common","AddressSize"],"kind":"enum"},"2:41390:2012":{"crate_id":2,"path":["core","result","IterMut"],"kind":"struct"},"17:12158:18574":{"crate_id":17,"path":["object","macho","RoutinesCommand64"],"kind":"struct"},"6:4848:12281":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_ifru_map"],"kind":"struct"},"17:9265:15280":{"crate_id":17,"path":["object","read","any","SymbolIterator"],"kind":"struct"},"2:44137:2524":{"crate_id":2,"path":["core","task","wake","RawWakerVTable"],"kind":"struct"},"17:13433:19349":{"crate_id":17,"path":["object","pe","ImageResourceDataEntry"],"kind":"struct"},"2:9093:110":{"crate_id":2,"path":["core","fmt","Debug"],"kind":"trait"},"2:42475:7822":{"crate_id":2,"path":["core","hash","sip","SipHasher"],"kind":"struct"},"17:10681:15493":{"crate_id":17,"path":["object","read","pe","resource","ResourceDirectoryTable"],"kind":"struct"},"1:413:163":{"crate_id":1,"path":["std","thread","local","LocalKey"],"kind":"struct"},"6:6541:9640":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statfs"],"kind":"struct"},"2:47199:7554":{"crate_id":2,"path":["core","core_arch","x86","__m128i"],"kind":"struct"},"17:9933:15365":{"crate_id":17,"path":["object","read","elf","version","VersionTable"],"kind":"struct"},"6:4469:12241":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_constant_effect"],"kind":"struct"},"2:42976:7640":{"crate_id":2,"path":["core","slice","iter","ChunksExactMut"],"kind":"struct"},"2:4424:7771":{"crate_id":2,"path":["core","cell","SyncUnsafeCell"],"kind":"struct"},"16:5418:33212":{"crate_id":16,"path":["gimli","read","util","sealed","CapacityFull"],"kind":"struct"},"17:11136:15502":{"crate_id":17,"path":["object","archive","Header"],"kind":"struct"},"1:3968:2241":{"crate_id":1,"path":["std","os","unix","fs","FileTypeExt"],"kind":"trait"},"2:22115:173":{"crate_id":2,"path":["core","num","nonzero","NonZeroU16"],"kind":"struct"},"6:4726:12265":{"crate_id":6,"path":["libc","unix","linux_like","linux","inotify_event"],"kind":"struct"},"16:7596:15170":{"crate_id":16,"path":["gimli","read","rnglists","RawRngListEntry"],"kind":"enum"},"16:4872:14832":{"crate_id":16,"path":["gimli","constants","DwDsc"],"kind":"struct"},"16:2720:14187":{"crate_id":16,"path":["gimli","common","DebugRngListsBase"],"kind":"struct"},"17:11282:18044":{"crate_id":17,"path":["object","elf","Ident"],"kind":"struct"},"6:6098:12973":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","sigset_t"],"kind":"struct"},"17:12358:18586":{"crate_id":17,"path":["object","macho","LinkeditDataCommand"],"kind":"struct"},"6:4903:12286":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_rcvinfo"],"kind":"struct"},"17:9566:15280":{"crate_id":17,"path":["object","read","coff","symbol","SymbolIterator"],"kind":"struct"},"17:10303:15400":{"crate_id":17,"path":["object","read","macho","section","MachOSection"],"kind":"struct"},"17:10569:15455":{"crate_id":17,"path":["object","read","pe","import","ImportTable"],"kind":"struct"},"6:4650:12258":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Shdr"],"kind":"struct"},"17:11993:18562":{"crate_id":17,"path":["object","macho","Fvmlib"],"kind":"struct"},"5:1313:93":{"crate_id":5,"path":["alloc","collections","btree","map","BTreeMap"],"kind":"struct"},"2:10206:7653":{"crate_id":2,"path":["core","slice","iter","SplitN"],"kind":"struct"},"6:587:8805":{"crate_id":6,"path":["libc","unix","servent"],"kind":"struct"},"1:11896:13":{"crate_id":1,"path":["std","fn"],"kind":"primitive"},"6:579:8804":{"crate_id":6,"path":["libc","unix","tms"],"kind":"struct"},"1:11383:2222":{"crate_id":1,"path":["std","sys_common","net","UdpSocket"],"kind":"struct"},"1:11887:736":{"crate_id":1,"path":["std","i128"],"kind":"primitive"},"6:6139:12975":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","semid_ds"],"kind":"struct"},"3:229:208":{"crate_id":3,"path":["compiler_builtins","float","cmp","Result"],"kind":"enum"},"16:2448:14176":{"crate_id":16,"path":["gimli","common","DebugArangesOffset"],"kind":"struct"},"17:10257:15405":{"crate_id":17,"path":["object","read","macho","segment","MachOSegmentIterator"],"kind":"struct"},"17:8283:15259":{"crate_id":17,"path":["object","common","BinaryFormat"],"kind":"enum"},"2:4034:7585":{"crate_id":2,"path":["core","async_iter","async_iter","AsyncIterator"],"kind":"trait"},"16:5920:15107":{"crate_id":16,"path":["gimli","read","cfi","UnwindContext"],"kind":"struct"},"1:1589:2034":{"crate_id":1,"path":["std","collections","hash","set","SymmetricDifference"],"kind":"struct"},"1:361:1983":{"crate_id":1,"path":["std","thread","scoped","ScopedJoinHandle"],"kind":"struct"},"16:5847:15105":{"crate_id":16,"path":["gimli","read","cfi","PartialFrameDescriptionEntry"],"kind":"struct"},"2:9100:7596":{"crate_id":2,"path":["core","fmt","Octal"],"kind":"trait"},"6:5990:12942":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_exit"],"kind":"struct"},"2:45094:27973":{"crate_id":2,"path":["core","core_arch","simd","u64x1"],"kind":"struct"},"6:4510:12246":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_effect"],"kind":"struct"},"16:2830:14192":{"crate_id":16,"path":["gimli","common","DebugTypesOffset"],"kind":"struct"},"17:8953:15274":{"crate_id":17,"path":["object","read","util","StringTable"],"kind":"struct"},"2:49609:244":{"crate_id":2,"path":["core","core_simd","fmt","fmt","Wrapper"],"kind":"struct"},"1:4634:2304":{"crate_id":1,"path":["std","os","linux","process","ChildExt"],"kind":"trait"},"2:3923:2158":{"crate_id":2,"path":["core","array","Guard"],"kind":"struct"},"16:4400:14696":{"crate_id":16,"path":["gimli","constants","DwForm"],"kind":"struct"},"5:7090:2013":{"crate_id":5,"path":["alloc","collections","linked_list","IntoIter"],"kind":"struct"},"2:31942:8003":{"crate_id":2,"path":["core","marker","PhantomPinned"],"kind":"struct"},"17:10039:15398":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCacheImage"],"kind":"struct"},"2:2141:585":{"crate_id":2,"path":["core","ptr","drop_in_place"],"kind":"function"},"5:3157:2032":{"crate_id":5,"path":["alloc","collections","btree","set","Intersection"],"kind":"struct"},"5:7275:7707":{"crate_id":5,"path":["alloc","string","FromUtf16Error"],"kind":"struct"},"2:47208:7555":{"crate_id":2,"path":["core","core_arch","x86","__m128"],"kind":"struct"},"17:9959:15391":{"crate_id":17,"path":["object","read","elf","version","VerdauxIterator"],"kind":"struct"},"5:6243:2016":{"crate_id":5,"path":["alloc","vec","drain","Drain"],"kind":"struct"},"11:2190:32752":{"crate_id":11,"path":["hashbrown","raw","Fallibility"],"kind":"enum"},"5:6175:30290":{"crate_id":5,"path":["alloc","vec","drain_filter","drop","BackshiftOnDrop"],"kind":"struct"},"1:1821:2086":{"crate_id":1,"path":["std","env","SplitPaths"],"kind":"struct"},"1:2862:208":{"crate_id":1,"path":["std","io","error","Result"],"kind":"typedef"},"2:9110:7602":{"crate_id":2,"path":["core","fmt","LowerExp"],"kind":"trait"},"6:6656:9644":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statvfs64"],"kind":"struct"},"2:43130:7671":{"crate_id":2,"path":["core","str","iter","Chars"],"kind":"struct"},"2:11167:7668":{"crate_id":2,"path":["core","str","converts","from_utf8"],"kind":"function"},"2:49570:244":{"crate_id":2,"path":["core","core_simd","fmt","fmt","Wrapper"],"kind":"struct"},"16:6793:15143":{"crate_id":16,"path":["gimli","read","line","CompleteLineProgram"],"kind":"struct"},"5:3275:2017":{"crate_id":5,"path":["alloc","collections","btree","set","DrainFilter"],"kind":"struct"},"6:5735:12922":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","statx_timestamp"],"kind":"struct"},"9:174:14072":{"crate_id":9,"path":["miniz_oxide","inflate","stream","InflateState"],"kind":"struct"},"6:1609:9712":{"crate_id":6,"path":["libc","unix","linux_like","Dl_info"],"kind":"struct"},"2:41592:81":{"crate_id":2,"path":["core","sync","atomic","AtomicI32"],"kind":"struct"},"17:13367:19342":{"crate_id":17,"path":["object","pe","ImageBoundImportDescriptor"],"kind":"struct"},"18:690:19413":{"crate_id":18,"path":["memchr","memmem","FinderRev"],"kind":"struct"},"16:7529:15166":{"crate_id":16,"path":["gimli","read","rnglists","DebugRanges"],"kind":"struct"},"17:13135:19322":{"crate_id":17,"path":["object","pe","ImageSymbolBytes"],"kind":"struct"},"6:5804:12929":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","termios"],"kind":"struct"},"9:234:2337":{"crate_id":9,"path":["miniz_oxide","inflate","core","State"],"kind":"enum"},"17:11813:15447":{"crate_id":17,"path":["object","macho","FatHeader"],"kind":"struct"},"6:4865:996":{"crate_id":6,"path":["libc","unix","linux_like","linux","option"],"kind":"struct"},"1:5682:2378":{"crate_id":1,"path":["std","sync","barrier","Barrier"],"kind":"struct"},"17:12923:19311":{"crate_id":17,"path":["object","pe","ImageOptionalHeader32"],"kind":"struct"},"2:22181:175":{"crate_id":2,"path":["core","num","nonzero","NonZeroU64"],"kind":"struct"},"2:43660:7699":{"crate_id":2,"path":["core","str","pattern","CharSliceSearcher"],"kind":"struct"},"17:12461:18593":{"crate_id":17,"path":["object","macho","DyldInfoCommand"],"kind":"struct"},"6:7526:12455":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_barrier_t"],"kind":"struct"},"17:8971:127":{"crate_id":17,"path":["object","read","any","File"],"kind":"struct"},"1:4732:2257":{"crate_id":1,"path":["std","os","fd","owned","OwnedFd"],"kind":"struct"},"16:4327:14647":{"crate_id":16,"path":["gimli","constants","DwAt"],"kind":"struct"},"16:4702:14806":{"crate_id":16,"path":["gimli","constants","DwLang"],"kind":"struct"},"6:6818:13365":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user_fpregs_struct"],"kind":"struct"},"1:3242:2190":{"crate_id":1,"path":["std","io","stdio","Stderr"],"kind":"struct"},"6:4974:12294":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_setup"],"kind":"struct"},"2:2746:2437":{"crate_id":2,"path":["core","ops","arith","Sub"],"kind":"trait"},"16:5346:15090":{"crate_id":16,"path":["gimli","constants","DwEhPe"],"kind":"struct"},"1:867:2013":{"crate_id":1,"path":["std","collections","hash","map","IntoIter"],"kind":"struct"},"5:3128:30920":{"crate_id":5,"path":["alloc","collections","btree","set","DifferenceInner"],"kind":"enum"},"17:13461:19352":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation32"],"kind":"struct"},"1:9991:22324":{"crate_id":1,"path":["std","sys","unix","os","Env"],"kind":"struct"},"14:215:14108":{"crate_id":14,"path":["rustc_demangle","TryDemangleError"],"kind":"struct"},"17:9523:15319":{"crate_id":17,"path":["object","read","coff","section","CoffSegment"],"kind":"struct"},"2:42467:27427":{"crate_id":2,"path":["core","hash","sip","SipHasher24"],"kind":"struct"},"2:47219:7556":{"crate_id":2,"path":["core","core_arch","x86","__m128d"],"kind":"struct"},"2:2756:8022":{"crate_id":2,"path":["core","ops","arith","Div"],"kind":"trait"},"2:43934:120":{"crate_id":2,"path":["core","time","Duration"],"kind":"struct"},"16:4969:14857":{"crate_id":16,"path":["gimli","constants","DwLns"],"kind":"struct"},"17:12194:18576":{"crate_id":17,"path":["object","macho","DysymtabCommand"],"kind":"struct"},"2:20914:2449":{"crate_id":2,"path":["core","core_simd","masks","Mask"],"kind":"struct"},"5:779:95":{"crate_id":5,"path":["alloc","collections","binary_heap","BinaryHeap"],"kind":"struct"},"16:7259:2320":{"crate_id":16,"path":["gimli","read","op","Location"],"kind":"enum"},"5:2635:30759":{"crate_id":5,"path":["alloc","collections","btree","node","Handle"],"kind":"struct"},"5:7061:196":{"crate_id":5,"path":["alloc","collections","btree","set","Range"],"kind":"struct"},"2:43907:8170":{"crate_id":2,"path":["core","str","BytesIsNotEmpty"],"kind":"struct"},"1:7687:24540":{"crate_id":1,"path":["std","error","private","Internal"],"kind":"struct"},"2:47395:7566":{"crate_id":2,"path":["core","core_arch","x86","cpuid","CpuidResult"],"kind":"struct"},"2:4369:7769":{"crate_id":2,"path":["core","cell","BorrowRefMut"],"kind":"struct"},"6:6557:8674":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","flock"],"kind":"struct"},"9:502:13972":{"crate_id":9,"path":["miniz_oxide","StreamResult"],"kind":"struct"},"1:1924:2108":{"crate_id":1,"path":["std","error","Indented"],"kind":"struct"},"16:7488:15162":{"crate_id":16,"path":["gimli","read","pubnames","PubNamesEntryIter"],"kind":"struct"},"2:44192:28674":{"crate_id":2,"path":["core","escape","EscapeIterInner"],"kind":"struct"},"17:10598:15293":{"crate_id":17,"path":["object","read","pe","import","Import"],"kind":"enum"},"5:279:1908":{"crate_id":5,"path":["alloc","boxed","Box"],"kind":"struct"},"2:40485:1998":{"crate_id":2,"path":["core","iter","sources","once","Once"],"kind":"struct"},"1:8915:20200":{"crate_id":1,"path":["std","sync","mpmc","error","SendTimeoutError"],"kind":"enum"},"1:11227:22177":{"crate_id":1,"path":["std","sys_common","wtf8","Wtf8CodePoints"],"kind":"struct"},"18:96:19393":{"crate_id":18,"path":["memchr","memchr","iter","Memchr2"],"kind":"struct"},"5:4206:2011":{"crate_id":5,"path":["alloc","collections","vec_deque","iter","Iter"],"kind":"struct"},"2:40239:7990":{"crate_id":2,"path":["core","iter","adapters","skip_while","SkipWhile"],"kind":"struct"},"17:8420:15263":{"crate_id":17,"path":["object","common","SymbolScope"],"kind":"enum"},"2:2741:2435":{"crate_id":2,"path":["core","ops","arith","Add"],"kind":"trait"},"17:10142:15444":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandVariant"],"kind":"enum"},"2:30105:67":{"crate_id":2,"path":["core","ptr","alignment","Alignment"],"kind":"struct"},"2:8628:85":{"crate_id":2,"path":["core","sync","atomic","AtomicPtr"],"kind":"struct"},"1:1080:2029":{"crate_id":1,"path":["std","collections","hash","map","OccupiedError"],"kind":"struct"},"16:2357:14172":{"crate_id":16,"path":["gimli","common","Register"],"kind":"struct"},"17:12046:18566":{"crate_id":17,"path":["object","macho","SubFrameworkCommand"],"kind":"struct"},"17:11372:18049":{"crate_id":17,"path":["object","elf","Sym32"],"kind":"struct"},"16:8214:15193":{"crate_id":16,"path":["gimli","read","value","Value"],"kind":"enum"},"16:3782:14222":{"crate_id":16,"path":["gimli","constants","DwSectV2"],"kind":"struct"},"16:7016:33174":{"crate_id":16,"path":["gimli","read","lookup","DebugLookup"],"kind":"struct"},"6:6012:32285":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","sifields_sigchld"],"kind":"struct"},"2:46747:2490":{"crate_id":2,"path":["core","core_arch","simd","i16x32"],"kind":"struct"},"6:1710:9721":{"crate_id":6,"path":["libc","unix","linux_like","epoll_event"],"kind":"struct"},"2:4175:7617":{"crate_id":2,"path":["core","cell","Cell"],"kind":"struct"},"17:9617:15316":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdatIterator"],"kind":"struct"},"1:4120:2271":{"crate_id":1,"path":["std","os","unix","net","ancillary","Messages"],"kind":"struct"},"17:9683:15339":{"crate_id":17,"path":["object","read","elf","segment","ElfSegment"],"kind":"struct"},"1:8897:21778":{"crate_id":1,"path":["std","sync","mpmc","array","ArrayToken"],"kind":"struct"},"17:12770:19305":{"crate_id":17,"path":["object","pe","ImageDosHeader"],"kind":"struct"},"6:6688:13356":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_xmmreg"],"kind":"struct"},"16:4510:14734":{"crate_id":16,"path":["gimli","constants","DwDs"],"kind":"struct"},"17:11821:15445":{"crate_id":17,"path":["object","macho","FatArch32"],"kind":"struct"},"18:727:19415":{"crate_id":18,"path":["memchr","memmem","SearcherConfig"],"kind":"struct"},"2:41263:2012":{"crate_id":2,"path":["core","option","IterMut"],"kind":"struct"},"1:8774:2011":{"crate_id":1,"path":["std","sync","mpsc","Iter"],"kind":"struct"},"2:21626:27360":{"crate_id":2,"path":["core","num","dec2flt","common","BiasedFp"],"kind":"struct"},"13:0:1761":{"crate_id":13,"path":["std_detect"],"kind":"module"},"2:20673:2454":{"crate_id":2,"path":["core","core_simd","elements","int","SimdInt"],"kind":"trait"},"2:10092:7656":{"crate_id":2,"path":["core","slice","iter","SplitInclusiveMut"],"kind":"struct"},"2:22247:1974":{"crate_id":2,"path":["core","num","nonzero","NonZeroUsize"],"kind":"struct"},"2:38959:8040":{"crate_id":2,"path":["core","ops","index_range","IndexRange"],"kind":"struct"},"16:8156:15190":{"crate_id":16,"path":["gimli","read","unit","DebugTypes"],"kind":"struct"},"6:4504:12245":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_rumble_effect"],"kind":"struct"},"2:43104:7677":{"crate_id":2,"path":["core","str","error","Utf8Error"],"kind":"struct"},"2:41044:2212":{"crate_id":2,"path":["core","net","ip_addr","Ipv6Addr"],"kind":"struct"},"2:2682:7587":{"crate_id":2,"path":["core","marker","Unsize"],"kind":"trait"},"17:13812:19375":{"crate_id":17,"path":["object","pe","ImageFunctionEntry64"],"kind":"struct"},"2:43118:7674":{"crate_id":2,"path":["core","str","error","ParseBoolError"],"kind":"struct"},"6:4277:12222":{"crate_id":6,"path":["libc","unix","linux_like","linux","glob_t"],"kind":"struct"},"2:2734:7586":{"crate_id":2,"path":["core","marker","Tuple"],"kind":"trait"},"16:8142:15189":{"crate_id":16,"path":["gimli","read","unit","EntriesTreeIter"],"kind":"struct"},"17:13356:19341":{"crate_id":17,"path":["object","pe","ImageImportDescriptor"],"kind":"struct"},"11:1044:14088":{"crate_id":11,"path":["hashbrown","map","EntryRef"],"kind":"enum"},"16:4445:14717":{"crate_id":16,"path":["gimli","constants","DwAte"],"kind":"struct"},"2:39100:2003":{"crate_id":2,"path":["core","ops","range","Bound"],"kind":"enum"},"2:45377:2515":{"crate_id":2,"path":["core","core_arch","simd","u64x2"],"kind":"struct"},"6:1604:9711":{"crate_id":6,"path":["libc","unix","linux_like","sched_param"],"kind":"struct"},"18:644:33936":{"crate_id":18,"path":["memchr","memmem","x86","avx","nostd","Forward"],"kind":"struct"},"2:3170:29961":{"crate_id":2,"path":["core","ops","try_trait","NeverShortCircuitResidual"],"kind":"enum"},"2:2788:8028":{"crate_id":2,"path":["core","ops","arith","RemAssign"],"kind":"trait"},"6:4786:12273":{"crate_id":6,"path":["libc","unix","linux_like","linux","j1939_filter"],"kind":"struct"},"17:9596:15321":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbol"],"kind":"struct"},"16:6361:15125":{"crate_id":16,"path":["gimli","read","abbrev","AttributeSpecification"],"kind":"struct"},"6:494:8793":{"crate_id":6,"path":["libc","unix","timespec"],"kind":"struct"},"17:13865:19379":{"crate_id":17,"path":["object","pe","ImportObjectHeader"],"kind":"struct"},"16:4540:14740":{"crate_id":16,"path":["gimli","constants","DwEnd"],"kind":"struct"},"1:1433:142":{"crate_id":1,"path":["std","collections","hash","set","HashSet"],"kind":"struct"},"17:10354:15408":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbolTable"],"kind":"struct"},"2:40478:28701":{"crate_id":2,"path":["core","iter","sources","from_generator","FromGenerator"],"kind":"struct"},"2:43382:7682":{"crate_id":2,"path":["core","str","iter","RMatches"],"kind":"struct"},"2:7114:7969":{"crate_id":2,"path":["core","iter","traits","accum","Sum"],"kind":"trait"},"2:20802:2449":{"crate_id":2,"path":["core","core_simd","masks","mask_impl","Mask"],"kind":"struct"},"17:9038:33926":{"crate_id":17,"path":["object","read","any","SegmentIteratorInternal"],"kind":"enum"},"17:9734:15337":{"crate_id":17,"path":["object","read","elf","section","ElfSection"],"kind":"struct"},"2:40509:7963":{"crate_id":2,"path":["core","iter","sources","repeat_n","RepeatN"],"kind":"struct"},"17:13821:19376":{"crate_id":17,"path":["object","pe","ImageSeparateDebugHeader"],"kind":"struct"},"1:8720:2357":{"crate_id":1,"path":["std","process","CommandArgs"],"kind":"struct"},"18:624:33945":{"crate_id":18,"path":["memchr","memmem","twoway","SuffixOrdering"],"kind":"enum"},"1:8072:2201":{"crate_id":1,"path":["std","io","util","Sink"],"kind":"struct"},"11:861:2025":{"crate_id":11,"path":["hashbrown","map","RawEntryBuilder"],"kind":"struct"},"5:1431:2019":{"crate_id":5,"path":["alloc","collections","btree","map","IntoKeys"],"kind":"struct"},"16:6558:15137":{"crate_id":16,"path":["gimli","read","line","LineRows"],"kind":"struct"},"2:2696:1973":{"crate_id":2,"path":["core","marker","PhantomData"],"kind":"struct"},"2:12404:2525":{"crate_id":2,"path":["core","task","wake","Waker"],"kind":"struct"},"2:2731:1901":{"crate_id":2,"path":["core","marker","Unpin"],"kind":"trait"},"1:1577:2032":{"crate_id":1,"path":["std","collections","hash","set","Intersection"],"kind":"struct"},"17:10589:15490":{"crate_id":17,"path":["object","read","pe","import","ImportThunkList"],"kind":"struct"},"2:41712:89":{"crate_id":2,"path":["core","sync","atomic","AtomicU64"],"kind":"struct"},"1:4409:2277":{"crate_id":1,"path":["std","os","unix","process","CommandExt"],"kind":"trait"},"16:2931:14196":{"crate_id":16,"path":["gimli","common","UnitSectionOffset"],"kind":"enum"},"17:9748:15279":{"crate_id":17,"path":["object","read","elf","symbol","SymbolTable"],"kind":"struct"},"2:41792:91":{"crate_id":2,"path":["core","sync","atomic","AtomicUsize"],"kind":"struct"},"1:11893:785":{"crate_id":1,"path":["std","isize"],"kind":"primitive"},"6:6593:2307":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stat"],"kind":"struct"},"17:10015:15439":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldSubCache"],"kind":"struct"},"6:595:8806":{"crate_id":6,"path":["libc","unix","protoent"],"kind":"struct"},"2:22214:172":{"crate_id":2,"path":["core","num","nonzero","NonZeroU128"],"kind":"struct"},"6:4935:12290":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_nl"],"kind":"struct"},"1:11233:22216":{"crate_id":1,"path":["std","sys_common","wtf8","EncodeWide"],"kind":"struct"},"5:264:30276":{"crate_id":5,"path":["alloc","boxed","thin","drop","DropGuard"],"kind":"struct"},"6:4554:12251":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Ehdr"],"kind":"struct"},"5:1412:2015":{"crate_id":5,"path":["alloc","collections","btree","map","Values"],"kind":"struct"},"2:38990:196":{"crate_id":2,"path":["core","ops","range","Range"],"kind":"struct"},"18:660:19410":{"crate_id":18,"path":["memchr","memmem","FindIter"],"kind":"struct"},"2:11620:7661":{"crate_id":2,"path":["core","str","pattern","ReverseSearcher"],"kind":"trait"},"2:21169:2473":{"crate_id":2,"path":["core","core_simd","ord","SimdOrd"],"kind":"trait"},"16:5000:14864":{"crate_id":16,"path":["gimli","constants","DwLne"],"kind":"struct"},"1:6081:2525":{"crate_id":1,"path":["std","sync","mpmc","waker","Waker"],"kind":"struct"},"1:11671:19835":{"crate_id":1,"path":["std","backtrace_rs","symbolize","gimli","mmap","Mmap"],"kind":"struct"},"1:7634:1995":{"crate_id":1,"path":["std","backtrace","BacktraceStatus"],"kind":"enum"},"16:4789:14821":{"crate_id":16,"path":["gimli","constants","DwCc"],"kind":"struct"},"17:13443:19350":{"crate_id":17,"path":["object","pe","ImageLoadConfigCodeIntegrity"],"kind":"struct"},"2:2751:8023":{"crate_id":2,"path":["core","ops","arith","Mul"],"kind":"trait"},"2:11605:7660":{"crate_id":2,"path":["core","str","pattern","Pattern"],"kind":"trait"},"16:2905:14195":{"crate_id":16,"path":["gimli","common","EhFrameOffset"],"kind":"struct"},"1:10712:20295":{"crate_id":1,"path":["std","sys","unix","kernel_copy","SpliceMode"],"kind":"enum"},"2:45547:2477":{"crate_id":2,"path":["core","core_arch","simd","f32x4"],"kind":"struct"},"16:7411:15157":{"crate_id":16,"path":["gimli","read","op","Expression"],"kind":"struct"},"5:7347:7727":{"crate_id":5,"path":["alloc","vec","splice","Splice"],"kind":"struct"},"16:6488:15133":{"crate_id":16,"path":["gimli","read","index","UnitIndex"],"kind":"struct"},"2:40087:7978":{"crate_id":2,"path":["core","iter","adapters","cycle","Cycle"],"kind":"struct"},"10:44:14077":{"crate_id":10,"path":["adler","Adler32"],"kind":"struct"},"6:1589:9710":{"crate_id":6,"path":["libc","unix","linux_like","tm"],"kind":"struct"},"6:5868:12933":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","rtentry"],"kind":"struct"},"17:9322:33914":{"crate_id":17,"path":["object","read","any","DynamicRelocationIteratorInternal"],"kind":"enum"},"2:1906:2055":{"crate_id":2,"path":["core","ptr","unique","Unique"],"kind":"struct"},"2:8623:78":{"crate_id":2,"path":["core","sync","atomic","AtomicBool"],"kind":"struct"},"2:42277:126":{"crate_id":2,"path":["core","fmt","Error"],"kind":"struct"},"17:12059:18567":{"crate_id":17,"path":["object","macho","SubClientCommand"],"kind":"struct"},"2:6870:2199":{"crate_id":2,"path":["core","iter","sources","empty","Empty"],"kind":"struct"},"6:4881:12284":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_sndrcvinfo"],"kind":"struct"},"2:9591:27295":{"crate_id":2,"path":["core","slice","sort","merge_sort","RunVec"],"kind":"struct"},"6:5831:12891":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","mallinfo2"],"kind":"struct"},"2:39139:7743":{"crate_id":2,"path":["core","any","TypeId"],"kind":"struct"},"2:9356:7820":{"crate_id":2,"path":["core","hash","BuildHasher"],"kind":"trait"},"5:7157:2010":{"crate_id":5,"path":["alloc","collections","TryReserveErrorKind"],"kind":"enum"},"14:202:7705":{"crate_id":14,"path":["rustc_demangle","v0","ParseError"],"kind":"enum"},"17:9138:15277":{"crate_id":17,"path":["object","read","any","ComdatIterator"],"kind":"struct"},"2:9947:2012":{"crate_id":2,"path":["core","slice","iter","IterMut"],"kind":"struct"},"2:43264:7653":{"crate_id":2,"path":["core","str","iter","SplitN"],"kind":"struct"},"2:9361:7821":{"crate_id":2,"path":["core","hash","BuildHasherDefault"],"kind":"struct"},"6:1652:9715":{"crate_id":6,"path":["libc","unix","linux_like","ifaddrs"],"kind":"struct"},"2:44150:159":{"crate_id":2,"path":["core","alloc","layout","Layout"],"kind":"struct"},"1:8844:2397":{"crate_id":1,"path":["std","sync","mpsc","RecvTimeoutError"],"kind":"enum"},"2:40107:7980":{"crate_id":2,"path":["core","iter","adapters","filter","Filter"],"kind":"struct"},"17:10635:15482":{"crate_id":17,"path":["object","read","pe","relocation","RelocationBlockIterator"],"kind":"struct"},"1:11881:638":{"crate_id":1,"path":["std","f32"],"kind":"primitive"},"1:3876:2235":{"crate_id":1,"path":["std","os","unix","ffi","os_str","OsStrExt"],"kind":"trait"},"2:22886:2224":{"crate_id":2,"path":["core","num","saturating","Saturating"],"kind":"struct"},"17:11653:18069":{"crate_id":17,"path":["object","elf","GnuHashHeader"],"kind":"struct"},"2:39078:201":{"crate_id":2,"path":["core","ops","range","RangeToInclusive"],"kind":"struct"},"2:43414:2169":{"crate_id":2,"path":["core","str","iter","Lines"],"kind":"struct"},"17:10052:15420":{"crate_id":17,"path":["object","read","macho","file","MachOFile"],"kind":"struct"},"2:4773:29520":{"crate_id":2,"path":["core","ffi","sealed_trait","VaArgSafe"],"kind":"trait"},"17:12293:18581":{"crate_id":17,"path":["object","macho","TwolevelHintsCommand"],"kind":"struct"},"16:5557:15091":{"crate_id":16,"path":["gimli","read","addr","DebugAddr"],"kind":"struct"},"2:2302:186":{"crate_id":2,"path":["core","cmp","PartialEq"],"kind":"trait"},"9:0:1764":{"crate_id":9,"path":["miniz_oxide"],"kind":"module"},"5:3520:161":{"crate_id":5,"path":["alloc","collections","linked_list","LinkedList"],"kind":"struct"},"2:40249:7975":{"crate_id":2,"path":["core","iter","adapters","step_by","StepBy"],"kind":"struct"},"17:11193:15504":{"crate_id":17,"path":["object","archive","AixFileHeader"],"kind":"struct"},"2:6627:7977":{"crate_id":2,"path":["core","iter","adapters","zip","TrustedRandomAccessNoCoerce"],"kind":"trait"},"6:5048:12301":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_txtime"],"kind":"struct"},"2:6721:7958":{"crate_id":2,"path":["core","iter","range","Step"],"kind":"trait"},"2:40125:28702":{"crate_id":2,"path":["core","iter","adapters","flatten","FlattenCompat"],"kind":"struct"},"17:9498:15324":{"crate_id":17,"path":["object","read","coff","section","SectionTable"],"kind":"struct"},"1:501:1958":{"crate_id":1,"path":["std","thread","PanicGuard"],"kind":"struct"},"2:49583:244":{"crate_id":2,"path":["core","core_simd","fmt","fmt","Wrapper"],"kind":"struct"},"5:4004:30276":{"crate_id":5,"path":["alloc","collections","vec_deque","drain","drop","DropGuard"],"kind":"struct"},"1:922:2019":{"crate_id":1,"path":["std","collections","hash","map","IntoKeys"],"kind":"struct"},"17:9721:15338":{"crate_id":17,"path":["object","read","elf","section","ElfSectionIterator"],"kind":"struct"},"5:2904:7580":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Owned"],"kind":"enum"},"6:573:8803":{"crate_id":6,"path":["libc","unix","itimerval"],"kind":"struct"},"1:6328:24527":{"crate_id":1,"path":["std","sync","mutex","fmt","LockedPlaceholder"],"kind":"struct"},"5:2168:30783":{"crate_id":5,"path":["alloc","collections","btree","navigate","LazyLeafHandle"],"kind":"enum"},"2:41195:179":{"crate_id":2,"path":["core","option","Option"],"kind":"enum"},"2:41339:208":{"crate_id":2,"path":["core","result","Result"],"kind":"enum"},"16:6022:15112":{"crate_id":16,"path":["gimli","read","cfi","RegisterRule"],"kind":"enum"},"6:4740:12267":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_vm"],"kind":"struct"},"1:9175:2092":{"crate_id":1,"path":["std","sys","unix","args","Args"],"kind":"struct"},"17:11946:18560":{"crate_id":17,"path":["object","macho","Section32"],"kind":"struct"},"2:42299:72":{"crate_id":2,"path":["core","fmt","Arguments"],"kind":"struct"},"2:45355:2512":{"crate_id":2,"path":["core","core_arch","simd","u32x4"],"kind":"struct"},"2:47265:7560":{"crate_id":2,"path":["core","core_arch","x86","__m512i"],"kind":"struct"},"2:42714:27223":{"crate_id":2,"path":["core","slice","ascii","EscapeByte"],"kind":"struct"},"2:39353:26317":{"crate_id":2,"path":["core","ascii","ascii_char","AsciiChar"],"kind":"enum"},"2:2951:7590":{"crate_id":2,"path":["core","ops","generator","Generator"],"kind":"trait"},"1:5715:2380":{"crate_id":1,"path":["std","sync","condvar","Condvar"],"kind":"struct"},"2:43891:8173":{"crate_id":2,"path":["core","str","CharEscapeDefault"],"kind":"struct"},"2:20724:2444":{"crate_id":2,"path":["core","core_simd","eq","SimdPartialEq"],"kind":"trait"},"2:43967:8190":{"crate_id":2,"path":["core","time","TryFromFloatSecsErrorKind"],"kind":"enum"},"17:10125:15419":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandData"],"kind":"struct"},"1:7927:21849":{"crate_id":1,"path":["std","io","error","Custom"],"kind":"struct"},"17:12799:19306":{"crate_id":17,"path":["object","pe","ImageOs2Header"],"kind":"struct"},"11:1836:2013":{"crate_id":11,"path":["hashbrown","set","IntoIter"],"kind":"struct"},"1:2569:2175":{"crate_id":1,"path":["std","io","buffered","bufwriter","WriterPanicked"],"kind":"struct"},"2:21642:27416":{"crate_id":2,"path":["core","num","dec2flt","decimal","Decimal"],"kind":"struct"},"18:481:19418":{"crate_id":18,"path":["memchr","cow","CowBytes"],"kind":"struct"},"17:8521:15266":{"crate_id":17,"path":["object","common","FileFlags"],"kind":"enum"},"2:43895:8177":{"crate_id":2,"path":["core","str","IsWhitespace"],"kind":"struct"},"1:11439:7572":{"crate_id":1,"path":["std","alloc","System"],"kind":"struct"},"1:10304:2357":{"crate_id":1,"path":["std","sys","unix","process","process_common","CommandArgs"],"kind":"struct"},"16:154:14147":{"crate_id":16,"path":["gimli","read","util","ArrayVec"],"kind":"struct"},"1:7811:128":{"crate_id":1,"path":["std","fs","FileType"],"kind":"struct"},"1:10993:2358":{"crate_id":1,"path":["std","sys","unix","process","process_inner","ExitStatus"],"kind":"struct"},"1:5566:2393":{"crate_id":1,"path":["std","sync","mpsc","SyncSender"],"kind":"struct"},"16:7635:15172":{"crate_id":16,"path":["gimli","read","rnglists","RawRange"],"kind":"struct"},"1:11875:310":{"crate_id":1,"path":["std","array"],"kind":"primitive"},"2:9102:7595":{"crate_id":2,"path":["core","fmt","Binary"],"kind":"trait"},"17:9986:15392":{"crate_id":17,"path":["object","read","elf","version","VernauxIterator"],"kind":"struct"},"5:1077:30883":{"crate_id":5,"path":["alloc","collections","btree","dedup_sorted_iter","DedupSortedIter"],"kind":"struct"},"17:9275:33924":{"crate_id":17,"path":["object","read","any","SymbolIteratorInternal"],"kind":"enum"},"11:1555:14093":{"crate_id":11,"path":["hashbrown","rustc_entry","RustcVacantEntry"],"kind":"struct"},"18:609:33962":{"crate_id":18,"path":["memchr","memmem","twoway","Suffix"],"kind":"struct"},"16:5571:15092":{"crate_id":16,"path":["gimli","read","cfi","DebugFrame"],"kind":"struct"},"5:782:2036":{"crate_id":5,"path":["alloc","collections","binary_heap","PeekMut"],"kind":"struct"},"5:2905:30799":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Dying"],"kind":"enum"},"2:41472:90":{"crate_id":2,"path":["core","sync","atomic","AtomicU8"],"kind":"struct"},"5:3687:2051":{"crate_id":5,"path":["alloc","collections","linked_list","CursorMut"],"kind":"struct"},"9:445:13969":{"crate_id":9,"path":["miniz_oxide","MZError"],"kind":"enum"},"2:44076:203":{"crate_id":2,"path":["core","future","ready","Ready"],"kind":"struct"},"2:9068:130":{"crate_id":2,"path":["core","fmt","Formatter"],"kind":"struct"},"17:13639:19362":{"crate_id":17,"path":["object","pe","ImageHotPatchHashes"],"kind":"struct"},"5:3149:2034":{"crate_id":5,"path":["alloc","collections","btree","set","SymmetricDifference"],"kind":"struct"},"16:5998:15111":{"crate_id":16,"path":["gimli","read","cfi","CfaRule"],"kind":"enum"},"6:7473:12447":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_mutexattr_t"],"kind":"struct"},"2:8796:27342":{"crate_id":2,"path":["core","fmt","builders","PadAdapterState"],"kind":"struct"},"17:12522:18597":{"crate_id":17,"path":["object","macho","FvmfileCommand"],"kind":"struct"},"1:11158:2364":{"crate_id":1,"path":["std","sys_common","process","CommandEnvs"],"kind":"struct"},"2:8791:27779":{"crate_id":2,"path":["core","fmt","builders","PadAdapter"],"kind":"struct"},"6:6809:13364":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ptrace_rseq_configuration"],"kind":"struct"},"17:8753:15270":{"crate_id":17,"path":["object","endian","U64Bytes"],"kind":"struct"},"16:6520:15135":{"crate_id":16,"path":["gimli","read","index","UnitIndexSection"],"kind":"struct"},"2:41975:7605":{"crate_id":2,"path":["core","fmt","num","UpperHex"],"kind":"struct"},"2:39934:28131":{"crate_id":2,"path":["core","ffi","c_str","FromBytesWithNulErrorKind"],"kind":"enum"},"16:7837:15181":{"crate_id":16,"path":["gimli","read","unit","DebuggingInformationEntry"],"kind":"struct"},"18:507:33936":{"crate_id":18,"path":["memchr","memmem","genericsimd","Forward"],"kind":"struct"},"1:0:1380":{"crate_id":1,"path":["std"],"kind":"module"},"5:1041:30882":{"crate_id":5,"path":["alloc","collections","btree","append","MergeIter"],"kind":"struct"},"1:4986:24526":{"crate_id":1,"path":["std","path","fmt","DebugHelper"],"kind":"struct"},"17:13744:19370":{"crate_id":17,"path":["object","pe","ImageEnclaveImport"],"kind":"struct"},"3:0:439":{"crate_id":3,"path":["compiler_builtins"],"kind":"module"},"6:4529:12248":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_ff_erase"],"kind":"struct"},"2:1658:1081":{"crate_id":2,"path":["core","ptr"],"kind":"module"},"17:12019:18564":{"crate_id":17,"path":["object","macho","Dylib"],"kind":"struct"},"2:21658:27409":{"crate_id":2,"path":["core","num","dec2flt","number","Number"],"kind":"struct"},"1:7798:2137":{"crate_id":1,"path":["std","fs","Permissions"],"kind":"struct"},"17:10505:15487":{"crate_id":17,"path":["object","read","pe","section","PeRelocationIterator"],"kind":"struct"},"2:42887:28683":{"crate_id":2,"path":["core","slice","iter","GenericSplitN"],"kind":"struct"},"2:41110:28128":{"crate_id":2,"path":["core","net","parser","AddrKind"],"kind":"enum"},"1:1768:606":{"crate_id":1,"path":["std","env"],"kind":"module"},"7:79:13948":{"crate_id":7,"path":["unwind","libunwind","_Unwind_Action"],"kind":"enum"},"6:6045:12946":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","utmpx"],"kind":"struct"},"17:12388:18588":{"crate_id":17,"path":["object","macho","EncryptionInfoCommand32"],"kind":"struct"},"2:2496:74":{"crate_id":2,"path":["core","convert","AsRef"],"kind":"trait"},"2:43612:7698":{"crate_id":2,"path":["core","str","pattern","CharArrayRefSearcher"],"kind":"struct"},"17:487:15257":{"crate_id":17,"path":["object","read","any","Comdat"],"kind":"struct"},"1:10199:2352":{"crate_id":1,"path":["std","sys","unix","process","process_common","Command"],"kind":"struct"},"2:11625:7659":{"crate_id":2,"path":["core","str","pattern","DoubleEndedSearcher"],"kind":"trait"},"1:4091:2268":{"crate_id":1,"path":["std","os","unix","net","ancillary","ScmRights"],"kind":"struct"},"17:12098:18570":{"crate_id":17,"path":["object","macho","PreboundDylibCommand"],"kind":"struct"},"2:9770:2252":{"crate_id":2,"path":["core","slice","index","private_slice_index","Sealed"],"kind":"trait"},"2:43210:7684":{"crate_id":2,"path":["core","str","iter","SplitTerminator"],"kind":"struct"},"2:47303:7562":{"crate_id":2,"path":["core","core_arch","x86","__m512d"],"kind":"struct"},"2:42514:27329":{"crate_id":2,"path":["core","hash","sip","Sip24Rounds"],"kind":"struct"},"6:4767:12270":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_tp"],"kind":"struct"},"6:4636:12257":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Shdr"],"kind":"struct"},"2:39813:7796":{"crate_id":2,"path":["core","char","decode","DecodeUtf16"],"kind":"struct"},"17:9108:33922":{"crate_id":17,"path":["object","read","any","SectionIteratorInternal"],"kind":"enum"},"2:41146:2214":{"crate_id":2,"path":["core","net","socket_addr","SocketAddr"],"kind":"enum"},"16:5386:14138":{"crate_id":16,"path":["gimli","endianity","LittleEndian"],"kind":"struct"},"2:7585:27780":{"crate_id":2,"path":["core","net","display_buffer","DisplayBuffer"],"kind":"struct"},"5:679:229":{"crate_id":5,"path":["alloc","borrow","ToOwned"],"kind":"trait"},"17:10491:15456":{"crate_id":17,"path":["object","read","pe","section","PeSection"],"kind":"struct"},"17:9350:33907":{"crate_id":17,"path":["object","read","any","SectionRelocationIteratorInternal"],"kind":"enum"},"1:8210:2275":{"crate_id":1,"path":["std","os","unix","net","ancillary","AncillaryError"],"kind":"enum"},"17:12483:18594":{"crate_id":17,"path":["object","macho","LinkerOptionCommand"],"kind":"struct"},"1:4431:2278":{"crate_id":1,"path":["std","os","unix","process","ExitStatusExt"],"kind":"trait"},"2:43443:7666":{"crate_id":2,"path":["core","str","iter","SplitAsciiWhitespace"],"kind":"struct"},"7:0:1529":{"crate_id":7,"path":["unwind"],"kind":"module"},"2:43228:7683":{"crate_id":2,"path":["core","str","iter","RSplitTerminator"],"kind":"struct"},"17:11391:18050":{"crate_id":17,"path":["object","elf","Sym64"],"kind":"struct"},"6:6586:13353":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stack_t"],"kind":"struct"},"6:6712:13358":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user_regs_struct"],"kind":"struct"},"2:45501:2492":{"crate_id":2,"path":["core","core_arch","simd","i32x4"],"kind":"struct"},"2:2973:2069":{"crate_id":2,"path":["core","ops","index","IndexMut"],"kind":"trait"},"1:936:2022":{"crate_id":1,"path":["std","collections","hash","map","RawEntryMut"],"kind":"enum"},"16:2694:14186":{"crate_id":16,"path":["gimli","common","RangeListsOffset"],"kind":"struct"},"6:4810:12276":{"crate_id":6,"path":["libc","unix","linux_like","linux","seccomp_data"],"kind":"struct"},"5:1453:196":{"crate_id":5,"path":["alloc","collections","btree","map","Range"],"kind":"struct"},"1:7252:21850":{"crate_id":1,"path":["std","panicking","Hook"],"kind":"enum"},"16:4904:14840":{"crate_id":16,"path":["gimli","constants","DwIdx"],"kind":"struct"},"1:2472:2182":{"crate_id":1,"path":["std","io","buffered","bufreader","BufReader"],"kind":"struct"},"1:9365:127":{"crate_id":1,"path":["std","sys","unix","fs","File"],"kind":"struct"},"2:2914:1903":{"crate_id":2,"path":["core","ops","function","Fn"],"kind":"trait"},"2:39884:7793":{"crate_id":2,"path":["core","char","CaseMappingIter"],"kind":"enum"},"1:4171:2272":{"crate_id":1,"path":["std","os","unix","net","datagram","UnixDatagram"],"kind":"struct"},"17:9545:15317":{"crate_id":17,"path":["object","read","coff","section","CoffSection"],"kind":"struct"},"6:6575:13352":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","siginfo_t"],"kind":"struct"},"1:4898:2312":{"crate_id":1,"path":["std","panic","always_abort"],"kind":"function"},"16:6442:15130":{"crate_id":16,"path":["gimli","read","aranges","ArangeEntry"],"kind":"struct"},"1:3453:2145":{"crate_id":1,"path":["std","io","Seek"],"kind":"trait"},"18:736:19408":{"crate_id":18,"path":["memchr","memmem","SearcherKind"],"kind":"enum"},"2:9108:192":{"crate_id":2,"path":["core","fmt","Pointer"],"kind":"trait"},"2:2805:8030":{"crate_id":2,"path":["core","ops","bit","BitOr"],"kind":"trait"},"6:7246:13736":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","align","clone_args"],"kind":"struct"},"1:10660:20234":{"crate_id":1,"path":["std","sys","unix","fs","FilePermissions"],"kind":"struct"},"2:12217:29853":{"crate_id":2,"path":["core","future","join","MaybeDone"],"kind":"enum"},"17:13879:19380":{"crate_id":17,"path":["object","pe","ImageCor20Header"],"kind":"struct"},"1:8309:2316":{"crate_id":1,"path":["std","panic","BacktraceStyle"],"kind":"enum"},"2:20484:28764":{"crate_id":2,"path":["core","core_simd","swizzle","interleave","Lo"],"kind":"struct"},"2:10766:7644":{"crate_id":2,"path":["core","slice","iter","GroupByMut"],"kind":"struct"},"2:5481:7982":{"crate_id":2,"path":["core","iter","adapters","flatten","FlatMap"],"kind":"struct"},"5:3672:2050":{"crate_id":5,"path":["alloc","collections","linked_list","Cursor"],"kind":"struct"},"16:7449:15159":{"crate_id":16,"path":["gimli","read","op","Evaluation"],"kind":"struct"},"2:40069:7971":{"crate_id":2,"path":["core","iter","adapters","cloned","Cloned"],"kind":"struct"},"1:3928:2239":{"crate_id":1,"path":["std","os","unix","fs","OpenOptionsExt"],"kind":"trait"},"1:6129:21829":{"crate_id":1,"path":["std","sync","mpmc","zero","ZeroToken"],"kind":"struct"},"6:5845:12930":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_pktinfo"],"kind":"struct"},"6:7556:13924":{"crate_id":6,"path":["libc","unix","linux_like","linux","non_exhaustive","open_how"],"kind":"struct"},"1:4573:22196":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt","st_ctime"],"kind":"foreign_type"},"2:20755:2446":{"crate_id":2,"path":["core","core_simd","lane_count","LaneCount"],"kind":"struct"},"17:10402:15472":{"crate_id":17,"path":["object","read","pe","file","PeFile"],"kind":"struct"},"2:2831:8036":{"crate_id":2,"path":["core","ops","bit","BitOrAssign"],"kind":"trait"},"16:4596:14748":{"crate_id":16,"path":["gimli","constants","DwVis"],"kind":"struct"},"2:9098:118":{"crate_id":2,"path":["core","fmt","Display"],"kind":"trait"},"16:7509:15164":{"crate_id":16,"path":["gimli","read","pubtypes","DebugPubTypes"],"kind":"struct"},"6:4366:12229":{"crate_id":6,"path":["libc","unix","linux_like","linux","packet_mreq"],"kind":"struct"},"2:39950:8108":{"crate_id":2,"path":["core","ffi","c_str","FromBytesUntilNulError"],"kind":"struct"},"17:12126:18572":{"crate_id":17,"path":["object","macho","ThreadCommand"],"kind":"struct"},"6:4858:12282":{"crate_id":6,"path":["libc","unix","linux_like","linux","in6_ifreq"],"kind":"struct"},"1:2209:2118":{"crate_id":1,"path":["std","fs","read"],"kind":"function"},"16:2594:14182":{"crate_id":16,"path":["gimli","common","DebugLocListsIndex"],"kind":"struct"},"14:160:14099":{"crate_id":14,"path":["rustc_demangle","Demangle"],"kind":"struct"},"2:39180:7752":{"crate_id":2,"path":["core","array","TryFromSliceError"],"kind":"struct"},"2:45523:2495":{"crate_id":2,"path":["core","core_arch","simd","i64x2"],"kind":"struct"},"5:6362:2013":{"crate_id":5,"path":["alloc","vec","into_iter","IntoIter"],"kind":"struct"},"6:4894:12285":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_sndinfo"],"kind":"struct"},"2:47280:7561":{"crate_id":2,"path":["core","core_arch","x86","__m512"],"kind":"struct"},"1:8475:2341":{"crate_id":1,"path":["std","path","Ancestors"],"kind":"struct"},"17:10270:15403":{"crate_id":17,"path":["object","read","macho","segment","MachOSegment"],"kind":"struct"},"16:7626:15171":{"crate_id":16,"path":["gimli","read","rnglists","RngListIter"],"kind":"struct"},"1:911:2017":{"crate_id":1,"path":["std","collections","hash","map","DrainFilter"],"kind":"struct"},"17:10440:15486":{"crate_id":17,"path":["object","read","pe","file","PeComdatSectionIterator"],"kind":"struct"},"2:30083:7726":{"crate_id":2,"path":["core","mem","maybe_uninit","MaybeUninit"],"kind":"union"},"17:9469:15310":{"crate_id":17,"path":["object","read","archive","ArchiveMember"],"kind":"struct"},"6:4475:12242":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_ramp_effect"],"kind":"struct"},"5:688:109":{"crate_id":5,"path":["alloc","borrow","Cow"],"kind":"enum"},"1:6753:2440":{"crate_id":1,"path":["std","std_float","StdFloat"],"kind":"trait"},"1:8276:2254":{"crate_id":1,"path":["std","os","fd","owned","BorrowedFd"],"kind":"struct"},"17:9068:33909":{"crate_id":17,"path":["object","read","any","SegmentInternal"],"kind":"enum"},"2:20753:2252":{"crate_id":2,"path":["core","core_simd","lane_count","sealed","Sealed"],"kind":"trait"},"1:11884:738":{"crate_id":1,"path":["std","i16"],"kind":"primitive"},"17:8718:15245":{"crate_id":17,"path":["object","endian","U32Bytes"],"kind":"struct"},"1:953:2024":{"crate_id":1,"path":["std","collections","hash","map","RawVacantEntryMut"],"kind":"struct"},"1:554:1965":{"crate_id":1,"path":["std","thread","JoinHandle"],"kind":"struct"},"1:3777:2222":{"crate_id":1,"path":["std","net","udp","UdpSocket"],"kind":"struct"},"2:41255:2011":{"crate_id":2,"path":["core","option","Iter"],"kind":"struct"},"1:3130:22611":{"crate_id":1,"path":["std","io","stdio","StderrRaw"],"kind":"struct"},"2:40056:2170":{"crate_id":2,"path":["core","iter","adapters","chain","Chain"],"kind":"struct"},"2:40047:2066":{"crate_id":2,"path":["core","iter","adapters","by_ref_sized","ByRefSized"],"kind":"struct"},"5:3162:30914":{"crate_id":5,"path":["alloc","collections","btree","set","IntersectionInner"],"kind":"enum"},"17:9696:15324":{"crate_id":17,"path":["object","read","elf","section","SectionTable"],"kind":"struct"},"2:2508:236":{"crate_id":2,"path":["core","convert","TryInto"],"kind":"trait"},"2:2685:223":{"crate_id":2,"path":["core","marker","StructuralEq"],"kind":"trait"},"2:21573:28343":{"crate_id":2,"path":["core","num","bignum","tests","Big8x3"],"kind":"struct"},"6:4734:12266":{"crate_id":6,"path":["libc","unix","linux_like","linux","fanotify_response"],"kind":"struct"},"2:43328:7680":{"crate_id":2,"path":["core","str","iter","RMatchIndices"],"kind":"struct"},"17:13194:19327":{"crate_id":17,"path":["object","pe","ImageAuxSymbolFunctionBeginEnd"],"kind":"struct"},"2:2886:115":{"crate_id":2,"path":["core","ops","deref","Deref"],"kind":"trait"},"17:12902:19309":{"crate_id":17,"path":["object","pe","ImageFileHeader"],"kind":"struct"},"6:4756:12269":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_extended_err"],"kind":"struct"},"6:4709:12263":{"crate_id":6,"path":["libc","unix","linux_like","linux","in6_pktinfo"],"kind":"struct"},"17:11600:18065":{"crate_id":17,"path":["object","elf","Vernaux"],"kind":"struct"},"17:11220:15505":{"crate_id":17,"path":["object","archive","AixMemberOffset"],"kind":"struct"},"2:45691:28159":{"crate_id":2,"path":["core","core_arch","simd","m16x8"],"kind":"struct"},"6:5797:12928":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","cmsghdr"],"kind":"struct"},"16:6236:15117":{"crate_id":16,"path":["gimli","read","dwarf","RangeIter"],"kind":"struct"},"18:491:33957":{"crate_id":18,"path":["memchr","cow","Imp"],"kind":"struct"},"2:42234:28572":{"crate_id":2,"path":["core","fmt","rt","Flag"],"kind":"enum"},"17:9641:15328":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdatSectionIterator"],"kind":"struct"},"1:3444:26868":{"crate_id":1,"path":["std","io","Write","write_fmt","Adapter"],"kind":"struct"},"6:6788:13362":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","shmid_ds"],"kind":"struct"},"1:3920:2238":{"crate_id":1,"path":["std","os","unix","fs","PermissionsExt"],"kind":"trait"},"2:21682:2227":{"crate_id":2,"path":["core","num","dec2flt","ParseFloatError"],"kind":"struct"},"1:3906:2237":{"crate_id":1,"path":["std","os","unix","fs","FileExt"],"kind":"trait"},"17:11434:18053":{"crate_id":17,"path":["object","elf","Rel32"],"kind":"struct"},"1:3124:20739":{"crate_id":1,"path":["std","io","stdio","StdinRaw"],"kind":"struct"},"11:1872:2035":{"crate_id":11,"path":["hashbrown","set","Union"],"kind":"struct"},"18:599:33941":{"crate_id":18,"path":["memchr","memmem","twoway","Shift"],"kind":"enum"},"16:6307:15120":{"crate_id":16,"path":["gimli","read","abbrev","DebugAbbrev"],"kind":"struct"},"17:13411:19346":{"crate_id":17,"path":["object","pe","ImageResourceDirectoryEntry"],"kind":"struct"},"16:6919:32955":{"crate_id":16,"path":["gimli","read","loclists","LocListsFormat"],"kind":"enum"},"1:8232:2276":{"crate_id":1,"path":["std","os","unix","ucred","UCred"],"kind":"struct"},"16:6890:15147":{"crate_id":16,"path":["gimli","read","loclists","DebugLocLists"],"kind":"struct"},"11:393:32760":{"crate_id":11,"path":["hashbrown","raw","RawIterHashInner"],"kind":"struct"},"14:221:14109":{"crate_id":14,"path":["rustc_demangle","SizeLimitExhausted"],"kind":"struct"},"2:43434:7667":{"crate_id":2,"path":["core","str","iter","SplitWhitespace"],"kind":"struct"},"2:41322:8118":{"crate_id":2,"path":["core","panicking","AssertKind"],"kind":"enum"},"2:10733:7643":{"crate_id":2,"path":["core","slice","iter","GroupBy"],"kind":"struct"},"1:9052:2150":{"crate_id":1,"path":["std","time","SystemTime"],"kind":"struct"},"2:5940:7994":{"crate_id":2,"path":["core","iter","adapters","intersperse","IntersperseWith"],"kind":"struct"},"6:4432:12236":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_keymap_entry"],"kind":"struct"},"1:8081:2142":{"crate_id":1,"path":["std","io","IoSlice"],"kind":"struct"},"17:13024:19315":{"crate_id":17,"path":["object","pe","ImageNtHeaders32"],"kind":"struct"},"6:4449:12238":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_replay"],"kind":"struct"},"6:4690:12261":{"crate_id":6,"path":["libc","unix","linux_like","linux","posix_spawnattr_t"],"kind":"struct"},"5:5484:7730":{"crate_id":5,"path":["alloc","string","retain","SetLenOnDrop"],"kind":"struct"},"16:5779:15103":{"crate_id":16,"path":["gimli","read","cfi","Augmentation"],"kind":"struct"},"1:875:2014":{"crate_id":1,"path":["std","collections","hash","map","Keys"],"kind":"struct"},"2:43738:7702":{"crate_id":2,"path":["core","str","pattern","StrSearcherImpl"],"kind":"enum"},"2:40177:7974":{"crate_id":2,"path":["core","iter","adapters","map_while","MapWhile"],"kind":"struct"},"2:41954:7595":{"crate_id":2,"path":["core","fmt","num","Binary"],"kind":"struct"},"2:46935:2494":{"crate_id":2,"path":["core","core_arch","simd","i32x16"],"kind":"struct"},"16:6876:15146":{"crate_id":16,"path":["gimli","read","loclists","DebugLoc"],"kind":"struct"},"18:113:19394":{"crate_id":18,"path":["memchr","memchr","iter","Memchr3"],"kind":"struct"},"2:20452:28585":{"crate_id":2,"path":["core","core_simd","swizzle","rotate_lanes_left","Rotate"],"kind":"struct"},"17:8598:15269":{"crate_id":17,"path":["object","common","SymbolFlags"],"kind":"enum"},"2:30681:7809":{"crate_id":2,"path":["core","cmp","Reverse"],"kind":"struct"},"17:11785:18552":{"crate_id":17,"path":["object","macho","DyldCacheImageInfo"],"kind":"struct"},"5:1350:2011":{"crate_id":5,"path":["alloc","collections","btree","map","Iter"],"kind":"struct"},"16:6819:15144":{"crate_id":16,"path":["gimli","read","line","FileEntry"],"kind":"struct"},"2:39771:7795":{"crate_id":2,"path":["core","char","convert","ParseCharError"],"kind":"struct"},"5:1442:2020":{"crate_id":5,"path":["alloc","collections","btree","map","IntoValues"],"kind":"struct"},"2:9106:7605":{"crate_id":2,"path":["core","fmt","UpperHex"],"kind":"trait"},"1:11883:741":{"crate_id":1,"path":["std","i8"],"kind":"primitive"},"1:8250:2305":{"crate_id":1,"path":["std","os","linux","process","PidFd"],"kind":"struct"},"6:7532:12456":{"crate_id":6,"path":["libc","unix","linux_like","linux","can_frame"],"kind":"struct"},"1:8161:2210":{"crate_id":1,"path":["std","net","Shutdown"],"kind":"enum"},"1:10812:2096":{"crate_id":1,"path":["std","sys","unix","os","JoinPathsError"],"kind":"struct"},"2:9477:8143":{"crate_id":2,"path":["core","slice","sort","InsertionHole"],"kind":"struct"},"1:8469:2011":{"crate_id":1,"path":["std","path","Iter"],"kind":"struct"},"17:13257:19333":{"crate_id":17,"path":["object","pe","ImageBaseRelocation"],"kind":"struct"},"2:40157:7993":{"crate_id":2,"path":["core","iter","adapters","intersperse","Intersperse"],"kind":"struct"},"16:6943:15150":{"crate_id":16,"path":["gimli","read","loclists","RawLocListEntry"],"kind":"enum"},"1:11062:20237":{"crate_id":1,"path":["std","sys","unix","time","Timespec"],"kind":"struct"},"17:13625:19361":{"crate_id":17,"path":["object","pe","ImageHotPatchBase"],"kind":"struct"},"6:5060:12303":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_can"],"kind":"struct"},"6:5858:12932":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_mmap_hdr"],"kind":"struct"},"2:10248:7652":{"crate_id":2,"path":["core","slice","iter","RSplitNMut"],"kind":"struct"},"2:39166:27646":{"crate_id":2,"path":["core","any","tags","MaybeSizedValue"],"kind":"struct"},"5:5238:7622":{"crate_id":5,"path":["alloc","slice","Join"],"kind":"trait"},"17:9218:15279":{"crate_id":17,"path":["object","read","any","SymbolTable"],"kind":"struct"},"1:6097:19829":{"crate_id":1,"path":["std","sync","mpmc","waker","SyncWaker"],"kind":"struct"},"2:12269:7818":{"crate_id":2,"path":["core","future","poll_fn","PollFn"],"kind":"struct"},"6:1695:9719":{"crate_id":6,"path":["libc","unix","linux_like","arphdr"],"kind":"struct"},"17:8389:15262":{"crate_id":17,"path":["object","common","SymbolKind"],"kind":"enum"},"6:5054:12302":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_can_addr"],"kind":"union"},"2:50931:28561":{"crate_id":2,"path":["core","core_simd","vector","ptr","SimdMutPtr"],"kind":"struct"},"6:7508:12452":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_cond_t"],"kind":"struct"},"2:40078:7972":{"crate_id":2,"path":["core","iter","adapters","copied","Copied"],"kind":"struct"},"1:10637:22168":{"crate_id":1,"path":["std","sys","unix","fs","FileAttr"],"kind":"struct"},"2:1738:28562":{"crate_id":2,"path":["core","ptr","metadata","PtrComponents"],"kind":"struct"},"1:3320:2200":{"crate_id":1,"path":["std","io","util","Repeat"],"kind":"struct"},"12:0:1767":{"crate_id":12,"path":["rustc_std_workspace_alloc"],"kind":"module"},"17:10747:126":{"crate_id":17,"path":["object","read","Error"],"kind":"struct"},"16:5643:15096":{"crate_id":16,"path":["gimli","read","cfi","EhHdrTable"],"kind":"struct"},"5:2406:30788":{"crate_id":5,"path":["alloc","collections","btree","node","NodeRef"],"kind":"struct"},"1:8124:2171":{"crate_id":1,"path":["std","io","Take"],"kind":"struct"},"17:11585:18064":{"crate_id":17,"path":["object","elf","Verneed"],"kind":"struct"},"17:8360:15261":{"crate_id":17,"path":["object","common","ComdatKind"],"kind":"enum"},"11:834:2023":{"crate_id":11,"path":["hashbrown","map","RawOccupiedEntryMut"],"kind":"struct"},"1:7450:15258":{"crate_id":1,"path":["std","backtrace_rs","symbolize","Symbol"],"kind":"struct"},"6:5817:12890":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","mallinfo"],"kind":"struct"},"16:5976:15110":{"crate_id":16,"path":["gimli","read","cfi","UnwindTableRow"],"kind":"struct"},"1:8205:2274":{"crate_id":1,"path":["std","os","unix","net","ancillary","SocketCred"],"kind":"struct"},"2:45279:2443":{"crate_id":2,"path":["core","core_arch","simd","u8x16"],"kind":"struct"},"2:11349:8183":{"crate_id":2,"path":["core","str","iter","SplitNInternal"],"kind":"struct"},"1:5381:2352":{"crate_id":1,"path":["std","process","Command"],"kind":"struct"},"16:8109:15187":{"crate_id":16,"path":["gimli","read","unit","EntriesTree"],"kind":"struct"},"2:45825:2520":{"crate_id":2,"path":["core","core_arch","simd","u8x32"],"kind":"struct"},"1:4559:2240":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt"],"kind":"trait"},"2:2969:2068":{"crate_id":2,"path":["core","ops","index","Index"],"kind":"trait"},"2:43068:7647":{"crate_id":2,"path":["core","slice","iter","RChunksExactMut"],"kind":"struct"},"17:12113:18571":{"crate_id":17,"path":["object","macho","DylinkerCommand"],"kind":"struct"},"2:2460:7813":{"crate_id":2,"path":["core","convert","num","FloatToInt"],"kind":"trait"},"1:1568:2016":{"crate_id":1,"path":["std","collections","hash","set","Drain"],"kind":"struct"},"1:9972:2086":{"crate_id":1,"path":["std","sys","unix","os","SplitPaths"],"kind":"struct"},"2:41398:2013":{"crate_id":2,"path":["core","result","IntoIter"],"kind":"struct"},"17:11861:18555":{"crate_id":17,"path":["object","macho","MachHeader64"],"kind":"struct"},"17:13426:19348":{"crate_id":17,"path":["object","pe","ImageResourceDirStringU"],"kind":"struct"},"1:1783:2075":{"crate_id":1,"path":["std","env","Vars"],"kind":"struct"},"17:9577:15323":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbolTable"],"kind":"struct"},"2:43749:7703":{"crate_id":2,"path":["core","str","pattern","EmptyNeedle"],"kind":"struct"},"16:7652:196":{"crate_id":16,"path":["gimli","read","rnglists","Range"],"kind":"struct"},"1:7828:117":{"crate_id":1,"path":["std","fs","DirBuilder"],"kind":"struct"},"16:6400:15128":{"crate_id":16,"path":["gimli","read","aranges","ArangeHeader"],"kind":"struct"},"17:12980:19313":{"crate_id":17,"path":["object","pe","ImageOptionalHeader64"],"kind":"struct"},"1:3203:2194":{"crate_id":1,"path":["std","io","stdio","Stdout"],"kind":"struct"},"16:5886:15106":{"crate_id":16,"path":["gimli","read","cfi","FrameDescriptionEntry"],"kind":"struct"},"5:4166:2158":{"crate_id":5,"path":["alloc","collections","vec_deque","into_iter","try_rfold","Guard"],"kind":"struct"},"2:2307:123":{"crate_id":2,"path":["core","cmp","Eq"],"kind":"trait"},"1:8150:2219":{"crate_id":1,"path":["std","net","tcp","Incoming"],"kind":"struct"},"2:11600:7664":{"crate_id":2,"path":["core","str","pattern"],"kind":"module"},"17:13181:19326":{"crate_id":17,"path":["object","pe","ImageAuxSymbolFunction"],"kind":"struct"},"17:13689:19367":{"crate_id":17,"path":["object","pe","ImageRuntimeFunctionEntry"],"kind":"struct"},"2:8204:2322":{"crate_id":2,"path":["core","panic","unwind_safe","AssertUnwindSafe"],"kind":"struct"},"17:10798:15285":{"crate_id":17,"path":["object","read","ObjectKind"],"kind":"enum"},"2:1747:8065":{"crate_id":2,"path":["core","ptr","metadata","DynMetadata"],"kind":"struct"},"16:2426:14175":{"crate_id":16,"path":["gimli","common","DebugAddrIndex"],"kind":"struct"},"6:1704:9720":{"crate_id":6,"path":["libc","unix","linux_like","mmsghdr"],"kind":"struct"},"16:7572:33064":{"crate_id":16,"path":["gimli","read","rnglists","RangeListsFormat"],"kind":"enum"}},"external_crates":{"17":{"name":"object","html_root_url":"https://doc.rust-lang.org/nightly/"},"14":{"name":"rustc_demangle","html_root_url":"https://doc.rust-lang.org/nightly/"},"11":{"name":"hashbrown","html_root_url":"https://doc.rust-lang.org/nightly/"},"8":{"name":"cfg_if","html_root_url":"https://docs.rs/cfg-if/"},"5":{"name":"alloc","html_root_url":"https://doc.rust-lang.org/nightly/"},"2":{"name":"core","html_root_url":"https://doc.rust-lang.org/nightly/"},"19":{"name":"panic_unwind","html_root_url":"https://doc.rust-lang.org/nightly/"},"16":{"name":"gimli","html_root_url":"https://doc.rust-lang.org/nightly/"},"13":{"name":"std_detect","html_root_url":"https://doc.rust-lang.org/nightly/"},"10":{"name":"adler","html_root_url":"https://docs.rs/adler/1.0.2/"},"7":{"name":"unwind","html_root_url":"https://doc.rust-lang.org/nightly/"},"4":{"name":"rustc_std_workspace_core","html_root_url":"https://doc.rust-lang.org/nightly/"},"1":{"name":"std","html_root_url":"https://doc.rust-lang.org/nightly/"},"18":{"name":"memchr","html_root_url":"https://doc.rust-lang.org/nightly/"},"15":{"name":"addr2line","html_root_url":"https://doc.rust-lang.org/nightly/"},"12":{"name":"rustc_std_workspace_alloc","html_root_url":"https://doc.rust-lang.org/nightly/"},"9":{"name":"miniz_oxide","html_root_url":"https://doc.rust-lang.org/nightly/"},"6":{"name":"libc","html_root_url":"https://doc.rust-lang.org/nightly/"},"3":{"name":"compiler_builtins","html_root_url":"https://doc.rust-lang.org/nightly/"}},"format_version":24}