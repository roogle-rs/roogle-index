{"root":"0:0:1621","crate_version":"0.3.9","includes_private":false,"index":{"2:11460:50972":{"id":"2:11460:50972","crate_id":2,"name":"eq_ignore_ascii_case","span":null,"visibility":"public","docs":"Checks that two strings are an ASCII case-insensitive match.\n\nSame as `to_ascii_lowercase(a) == to_ascii_lowercase(b)`,\nbut without allocating and copying temporaries.\n\n# Examples\n\n```\nassert!(\"Ferris\".eq_ignore_ascii_case(\"FERRIS\"));\nassert!(\"Ferr√∂s\".eq_ignore_ascii_case(\"FERR√∂S\"));\nassert!(!\"Ferr√∂s\".eq_ignore_ascii_case(\"FERR√ñS\"));\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["other",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"5:5120:59022":{"id":"5:5120:59022","crate_id":5,"name":"into_string","span":null,"visibility":"public","docs":"Converts a [`Box<str>`] into a [`String`] without copying or allocating.\n\n# Examples\n\nBasic usage:\n\n```\nlet string = String::from(\"birthday gift\");\nlet boxed_str = string.clone().into_boxed_str();\n\nassert_eq!(boxed_str.into_string(), string);\n```","links":{"`Box<str>`":"5:286:1865","`String`":"5:6992:220"},"attrs":["#[must_use = \"`self` will be dropped if the result is not used\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"resolved_path","inner":{"name":"Box","id":"5:286:1865","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}},{"type":{"kind":"resolved_path","inner":{"name":"Global","id":"5:6737:1989","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:6992:220","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11461:50973":{"id":"2:11461:50973","crate_id":2,"name":"make_ascii_uppercase","span":null,"visibility":"public","docs":"Converts this string to its ASCII upper case equivalent in-place.\n\nASCII letters 'a' to 'z' are mapped to 'A' to 'Z',\nbut non-ASCII letters are unchanged.\n\nTo return a new uppercased value without modifying the existing one, use\n[`to_ascii_uppercase()`].\n\n[`to_ascii_uppercase()`]: #method.to_ascii_uppercase\n\n# Examples\n\n```\nlet mut s = String::from(\"Gr√º√üe, J√ºrgen ‚ù§\");\n\ns.make_ascii_uppercase();\n\nassert_eq!(\"GR√º√üE, J√ºRGEN ‚ù§\", s);\n```","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11459:3134":{"id":"2:11459:3134","crate_id":2,"name":"is_ascii","span":null,"visibility":"public","docs":"Checks if all characters in this string are within the ASCII range.\n\n# Examples\n\n```\nlet ascii = \"hello!\\n\";\nlet non_ascii = \"Gr√º√üe, J√ºrgen ‚ù§\";\n\nassert!(ascii.is_ascii());\nassert!(!non_ascii.is_ascii());\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11358:54121":{"id":"2:11358:54121","crate_id":2,"name":"get_unchecked_mut","span":null,"visibility":"public","docs":"Returns a mutable, unchecked subslice of `str`.\n\nThis is the unchecked alternative to indexing the `str`.\n\n# Safety\n\nCallers of this function are responsible that these preconditions are\nsatisfied:\n\n* The starting index must not exceed the ending index;\n* Indexes must be within bounds of the original slice;\n* Indexes must lie on UTF-8 sequence boundaries.\n\nFailing that, the returned string slice may reference invalid memory or\nviolate the invariants communicated by the `str` type.\n\n# Examples\n\n```\nlet mut v = String::from(\"üóª‚ààüåè\");\nunsafe {\n    assert_eq!(\"üóª\", v.get_unchecked_mut(0..4));\n    assert_eq!(\"‚àà\", v.get_unchecked_mut(4..7));\n    assert_eq!(\"üåè\", v.get_unchecked_mut(7..11));\n}\n```","links":{},"attrs":["#[rustc_const_unstable(feature = \"const_slice_index\", issue = \"none\")]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["i",{"kind":"generic","inner":"I"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"qualified_path","inner":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"I"},"trait":{"name":"SliceIndex","id":"2:9138:218","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}}}}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"2:9138:218","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}},"2:11451:58382":{"id":"2:11451:58382","crate_id":2,"name":"trim_left_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. 'Left' in this context means the first\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _right_ side, not the left.\n\n# Examples\n\nBasic usage:\n\n```\nassert_eq!(\"11foo1bar11\".trim_left_matches('1'), \"foo1bar11\");\nassert_eq!(\"123foo1bar123\".trim_left_matches(char::is_numeric), \"foo1bar123\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_left_matches(x), \"foo1bar12\");\n```","links":{"prim@char":"1:12300:407","self::pattern":"2:11041:2619"},"attrs":["#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_start_matches`\",\nsuggestion = \"trim_start_matches\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_start_matches`"},"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11046:2618","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11422:58372":{"id":"2:11422:58372","crate_id":2,"name":"match_indices","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within this string\nslice as well as the index that the match starts at.\n\nFor matches of `pat` within `self` that overlap, only the indices\ncorresponding to the first match are returned.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rmatch_indices`] method can be used.\n\n[`rmatch_indices`]: str::rmatch_indices\n\n# Examples\n\nBasic usage:\n\n```\nlet v: Vec<_> = \"abcXXXabcYYYabc\".match_indices(\"abc\").collect();\nassert_eq!(v, [(0, \"abc\"), (6, \"abc\"), (12, \"abc\")]);\n\nlet v: Vec<_> = \"1abcabc2\".match_indices(\"abc\").collect();\nassert_eq!(v, [(1, \"abc\"), (4, \"abc\")]);\n\nlet v: Vec<_> = \"ababa\".match_indices(\"aba\").collect();\nassert_eq!(v, [(0, \"aba\")]); // only the first `aba`\n```","links":{"`DoubleEndedIterator`":"2:7079:119","self::pattern":"2:11041:2619","prim@char":"1:12300:407","str::rmatch_indices":"2:11425:58373"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"MatchIndices","id":"2:50173:2929","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11046:2618","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11404:54157":{"id":"2:11404:54157","crate_id":2,"name":"splitn","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by a\npattern, restricted to returning at most `n` items.\n\nIf `n` substrings are returned, the last substring (the `n`th substring)\nwill contain the remainder of the string.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will not be double ended, because it is\nnot efficient to support.\n\nIf the pattern allows a reverse search, the [`rsplitn`] method can be\nused.\n\n[`rsplitn`]: str::rsplitn\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lambda\".splitn(3, ' ').collect();\nassert_eq!(v, [\"Mary\", \"had\", \"a little lambda\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".splitn(3, \"X\").collect();\nassert_eq!(v, [\"lion\", \"\", \"tigerXleopard\"]);\n\nlet v: Vec<&str> = \"abcXdef\".splitn(1, 'X').collect();\nassert_eq!(v, [\"abcXdef\"]);\n\nlet v: Vec<&str> = \"\".splitn(1, 'X').collect();\nassert_eq!(v, [\"\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".splitn(2, |c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"abc\", \"defXghi\"]);\n```","links":{"prim@char":"1:12300:407","str::rsplitn":"2:11407:54159","self::pattern":"2:11041:2619"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["n",{"kind":"primitive","inner":"usize"}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"SplitN","id":"2:50127:2018","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11046:2618","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11407:54159":{"id":"2:11407:54159","crate_id":2,"name":"rsplitn","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by a\npattern, starting from the end of the string, restricted to returning\nat most `n` items.\n\nIf `n` substrings are returned, the last substring (the `n`th substring)\nwill contain the remainder of the string.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will not be double ended, because it is not\nefficient to support.\n\nFor splitting from the front, the [`splitn`] method can be used.\n\n[`splitn`]: str::splitn\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".rsplitn(3, ' ').collect();\nassert_eq!(v, [\"lamb\", \"little\", \"Mary had a\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".rsplitn(3, 'X').collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"lionX\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".rsplitn(2, \"::\").collect();\nassert_eq!(v, [\"leopard\", \"lion::tiger\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".rsplitn(2, |c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"ghi\", \"abc1def\"]);\n```","links":{"str::splitn":"2:11404:54157","prim@char":"1:12300:407","self::pattern":"2:11041:2619"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["n",{"kind":"primitive","inner":"usize"}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"RSplitN","id":"2:50145:2016","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11046:2618","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"2:11046:2618","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11061:2622","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"5:5105:2240":{"id":"5:5105:2240","crate_id":5,"name":"replace","span":null,"visibility":"public","docs":"Replaces all matches of a pattern with another string.\n\n`replace` creates a new [`String`], and copies the data from this string slice into it.\nWhile doing so, it attempts to find matches of a pattern. If it finds any, it\nreplaces them with the replacement string slice.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"this is old\";\n\nassert_eq!(\"this is new\", s.replace(\"old\", \"new\"));\nassert_eq!(\"than an old\", s.replace(\"is\", \"an\"));\n```\n\nWhen the pattern doesn't match:\n\n```\nlet s = \"this is old\";\nassert_eq!(s, s.replace(\"cookie monster\", \"little lamb\"));\n```","links":{"`String`":"5:6992:220"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the replaced string as a new allocation, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["from",{"kind":"generic","inner":"P"}],["to",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:6992:220","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11046:2618","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11368:56074":{"id":"2:11368:56074","crate_id":2,"name":"split_ascii_whitespace","span":null,"visibility":"public","docs":"Splits a string slice by ASCII whitespace.\n\nThe iterator returned will return string slices that are sub-slices of\nthe original string slice, separated by any amount of ASCII whitespace.\n\nTo split by Unicode `Whitespace` instead, use [`split_whitespace`].\n\n[`split_whitespace`]: str::split_whitespace\n\n# Examples\n\nBasic usage:\n\n```\nlet mut iter = \"A few words\".split_ascii_whitespace();\n\nassert_eq!(Some(\"A\"), iter.next());\nassert_eq!(Some(\"few\"), iter.next());\nassert_eq!(Some(\"words\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nAll kinds of ASCII whitespace are considered:\n\n```\nlet mut iter = \" Mary   had\\ta little  \\n\\t lamb\".split_ascii_whitespace();\nassert_eq!(Some(\"Mary\"), iter.next());\nassert_eq!(Some(\"had\"), iter.next());\nassert_eq!(Some(\"a\"), iter.next());\nassert_eq!(Some(\"little\"), iter.next());\nassert_eq!(Some(\"lamb\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nIf the string is empty or all ASCII whitespace, the iterator yields no string slices:\n```\nassert_eq!(\"\".split_ascii_whitespace().next(), None);\nassert_eq!(\"   \".split_ascii_whitespace().next(), None);\n```","links":{"str::split_whitespace":"2:11367:56080"},"attrs":["#[must_use =\n\"this returns the split string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"SplitAsciiWhitespace","id":"2:50306:2936","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11434:58377":{"id":"2:11434:58377","crate_id":2,"name":"trim_left","span":null,"visibility":"public","docs":"Returns a string slice with leading whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`.\n\n# Text directionality\n\nA string is a sequence of bytes. 'Left' in this context means the first\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _right_ side, not the left.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \" Hello\\tworld\\t\";\n\nassert_eq!(\"Hello\\tworld\\t\", s.trim_left());\n```\n\nDirectionality:\n\n```\nlet s = \"  English\";\nassert!(Some('E') == s.trim_left().chars().next());\n\nlet s = \"  ◊¢◊ë◊®◊ô◊™\";\nassert!(Some('◊¢') == s.trim_left().chars().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_start`\", suggestion\n= \"trim_start\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_start`"},"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"5:5123:50971":{"id":"5:5123:50971","crate_id":5,"name":"to_ascii_lowercase","span":null,"visibility":"public","docs":"Returns a copy of this string where each character is mapped to its\nASCII lower case equivalent.\n\nASCII letters 'A' to 'Z' are mapped to 'a' to 'z',\nbut non-ASCII letters are unchanged.\n\nTo lowercase the value in-place, use [`make_ascii_lowercase`].\n\nTo lowercase ASCII characters in addition to non-ASCII characters, use\n[`to_lowercase`].\n\n# Examples\n\n```\nlet s = \"Gr√º√üe, J√ºrgen ‚ù§\";\n\nassert_eq!(\"gr√º√üe, j√ºrgen ‚ù§\", s.to_ascii_lowercase());\n```\n\n[`make_ascii_lowercase`]: str::make_ascii_lowercase\n[`to_lowercase`]: #method.to_lowercase","links":{"str::make_ascii_lowercase":"2:11462:50974"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use = \"to lowercase the value in-place, use `make_ascii_lowercase()`\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:6992:220","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11432:58376":{"id":"2:11432:58376","crate_id":2,"name":"trim_end","span":null,"visibility":"public","docs":"Returns a string slice with trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Text directionality\n\nA string is a sequence of bytes. `end` in this context means the last\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be right side, and for right-to-left languages like\nArabic or Hebrew, this will be the left side.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\nassert_eq!(\"\\n Hello\\tworld\", s.trim_end());\n```\n\nDirectionality:\n\n```\nlet s = \"  English  \";\nassert!(Some('h') == s.trim_end().chars().rev().next());\n\nlet s = \"  ◊¢◊ë◊®◊ô◊™  \";\nassert!(Some('◊™') == s.trim_end().chars().rev().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_trim_end\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11352:54118":{"id":"2:11352:54118","crate_id":2,"name":"get","span":null,"visibility":"public","docs":"Returns a subslice of `str`.\n\nThis is the non-panicking alternative to indexing the `str`. Returns\n[`None`] whenever equivalent indexing operation would panic.\n\n# Examples\n\n```\nlet v = String::from(\"üóª‚ààüåè\");\n\nassert_eq!(Some(\"üóª\"), v.get(0..4));\n\n// indices not on UTF-8 sequence boundaries\nassert!(v.get(1..).is_none());\nassert!(v.get(..8).is_none());\n\n// out of bounds\nassert!(v.get(..42).is_none());\n```","links":{"`None`":"2:48057:175"},"attrs":["#[rustc_const_unstable(feature = \"const_slice_index\", issue = \"none\")]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["i",{"kind":"generic","inner":"I"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:48055:177","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"qualified_path","inner":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"I"},"trait":{"name":"SliceIndex","id":"2:9138:218","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}}}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"2:9138:218","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11378:53779":{"id":"2:11378:53779","crate_id":2,"name":"ends_with","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a suffix of this\nstring slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nBasic usage:\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.ends_with(\"anas\"));\nassert!(!bananas.ends_with(\"nana\"));\n```","links":{"self::pattern":"2:11041:2619","prim@char":"1:12300:407"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11046:2618","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"2:11046:2618","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11061:2622","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11364:2957":{"id":"2:11364:2957","crate_id":2,"name":"chars","span":null,"visibility":"public","docs":"Returns an iterator over the [`char`]s of a string slice.\n\nAs a string slice consists of valid UTF-8, we can iterate through a\nstring slice by [`char`]. This method returns such an iterator.\n\nIt's important to remember that [`char`] represents a Unicode Scalar\nValue, and might not match your idea of what a 'character' is. Iteration\nover grapheme clusters may be what you actually want. This functionality\nis not provided by Rust's standard library, check crates.io instead.\n\n# Examples\n\nBasic usage:\n\n```\nlet word = \"goodbye\";\n\nlet count = word.chars().count();\nassert_eq!(7, count);\n\nlet mut chars = word.chars();\n\nassert_eq!(Some('g'), chars.next());\nassert_eq!(Some('o'), chars.next());\nassert_eq!(Some('o'), chars.next());\nassert_eq!(Some('d'), chars.next());\nassert_eq!(Some('b'), chars.next());\nassert_eq!(Some('y'), chars.next());\nassert_eq!(Some('e'), chars.next());\n\nassert_eq!(None, chars.next());\n```\n\nRemember, [`char`]s might not match your intuition about characters:\n\n[`char`]: prim@char\n\n```\nlet y = \"yÃÜ\";\n\nlet mut chars = y.chars();\n\nassert_eq!(Some('y'), chars.next()); // not 'yÃÜ'\nassert_eq!(Some('\\u{0306}'), chars.next());\n\nassert_eq!(None, chars.next());\n```","links":{"prim@char":"1:12300:407"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Chars","id":"2:49993:2920","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"5:5104:59018":{"id":"5:5104:59018","crate_id":5,"name":"into_boxed_bytes","span":null,"visibility":"public","docs":"Converts a `Box<str>` into a `Box<[u8]>` without copying or allocating.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"this is a string\";\nlet boxed_str = s.to_owned().into_boxed_str();\nlet boxed_bytes = boxed_str.into_boxed_bytes();\nassert_eq!(*boxed_bytes, *s.as_bytes());\n```","links":{},"attrs":["#[must_use = \"`self` will be dropped if the result is not used\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"resolved_path","inner":{"name":"Box","id":"5:286:1865","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}},{"type":{"kind":"resolved_path","inner":{"name":"Global","id":"5:6737:1989","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}]],"output":{"kind":"resolved_path","inner":{"name":"Box","id":"5:286:1865","args":{"angle_bracketed":{"args":[{"type":{"kind":"slice","inner":{"kind":"primitive","inner":"u8"}}},{"type":{"kind":"resolved_path","inner":{"name":"Global","id":"5:6737:1989","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11356:54120":{"id":"2:11356:54120","crate_id":2,"name":"get_unchecked","span":null,"visibility":"public","docs":"Returns an unchecked subslice of `str`.\n\nThis is the unchecked alternative to indexing the `str`.\n\n# Safety\n\nCallers of this function are responsible that these preconditions are\nsatisfied:\n\n* The starting index must not exceed the ending index;\n* Indexes must be within bounds of the original slice;\n* Indexes must lie on UTF-8 sequence boundaries.\n\nFailing that, the returned string slice may reference invalid memory or\nviolate the invariants communicated by the `str` type.\n\n# Examples\n\n```\nlet v = \"üóª‚ààüåè\";\nunsafe {\n    assert_eq!(\"üóª\", v.get_unchecked(0..4));\n    assert_eq!(\"‚àà\", v.get_unchecked(4..7));\n    assert_eq!(\"üåè\", v.get_unchecked(7..11));\n}\n```","links":{},"attrs":["#[rustc_const_unstable(feature = \"const_slice_index\", issue = \"none\")]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["i",{"kind":"generic","inner":"I"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"qualified_path","inner":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"I"},"trait":{"name":"SliceIndex","id":"2:9138:218","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}}}}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"2:9138:218","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}},"2:11385:4079":{"id":"2:11385:4079","crate_id":2,"name":"rfind","span":null,"visibility":"public","docs":"Returns the byte index for the first character of the last match of the pattern in\nthis string slice.\n\nReturns [`None`] if the pattern doesn't match.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nlet s = \"L√∂we ËÄÅËôé L√©opard Gepardi\";\n\nassert_eq!(s.rfind('L'), Some(13));\nassert_eq!(s.rfind('√©'), Some(14));\nassert_eq!(s.rfind(\"pard\"), Some(24));\n```\n\nMore complex patterns with closures:\n\n```\nlet s = \"L√∂we ËÄÅËôé L√©opard\";\n\nassert_eq!(s.rfind(char::is_whitespace), Some(12));\nassert_eq!(s.rfind(char::is_lowercase), Some(20));\n```\n\nNot finding the pattern:\n\n```\nlet s = \"L√∂we ËÄÅËôé L√©opard\";\nlet x: &[_] = &['1', '2'];\n\nassert_eq!(s.rfind(x), None);\n```","links":{"`None`":"2:48057:175","self::pattern":"2:11041:2619","prim@char":"1:12300:407"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:48055:177","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11046:2618","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"2:11046:2618","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11061:2622","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"5:5111:59020":{"id":"5:5111:59020","crate_id":5,"name":"to_lowercase","span":null,"visibility":"public","docs":"Returns the lowercase equivalent of this string slice, as a new [`String`].\n\n'Lowercase' is defined according to the terms of the Unicode Derived Core Property\n`Lowercase`.\n\nSince some characters can expand into multiple characters when changing\nthe case, this function returns a [`String`] instead of modifying the\nparameter in-place.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"HELLO\";\n\nassert_eq!(\"hello\", s.to_lowercase());\n```\n\nA tricky example, with sigma:\n\n```\nlet sigma = \"Œ£\";\n\nassert_eq!(\"œÉ\", sigma.to_lowercase());\n\n// but at the end of a word, it's œÇ, not œÉ:\nlet odysseus = \"·ΩàŒîŒ•Œ£Œ£ŒïŒéŒ£\";\n\nassert_eq!(\"·ΩÄŒ¥œÖœÉœÉŒµœçœÇ\", odysseus.to_lowercase());\n```\n\nLanguages without case are not changed:\n\n```\nlet new_year = \"ÂÜúÂéÜÊñ∞Âπ¥\";\n\nassert_eq!(new_year, new_year.to_lowercase());\n```","links":{"`String`":"5:6992:220"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the lowercase string as a new String, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:6992:220","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11362:54143":{"id":"2:11362:54143","crate_id":2,"name":"split_at","span":null,"visibility":"public","docs":"Divide one string slice into two at an index.\n\nThe argument, `mid`, should be a byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get mutable string slices instead, see the [`split_at_mut`]\nmethod.\n\n[`split_at_mut`]: str::split_at_mut\n\n# Panics\n\nPanics if `mid` is not on a UTF-8 code point boundary, or if it is\npast the end of the last code point of the string slice.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"Per Martin-L√∂f\";\n\nlet (first, last) = s.split_at(3);\n\nassert_eq!(\"Per\", first);\nassert_eq!(\" Martin-L√∂f\", last);\n```","links":{"str::split_at_mut":"2:11363:54144"},"attrs":["#[must_use]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["mid",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"tuple","inner":[{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11342:58360":{"id":"2:11342:58360","crate_id":2,"name":"is_char_boundary","span":null,"visibility":"public","docs":"Checks that `index`-th byte is the first byte in a UTF-8 code point\nsequence or the end of the string.\n\nThe start and end of the string (when `index == self.len()`) are\nconsidered to be boundaries.\n\nReturns `false` if `index` is greater than `self.len()`.\n\n# Examples\n\n```\nlet s = \"L√∂we ËÄÅËôé L√©opard\";\nassert!(s.is_char_boundary(0));\n// start of `ËÄÅ`\nassert!(s.is_char_boundary(6));\nassert!(s.is_char_boundary(s.len()));\n\n// second byte of `√∂`\nassert!(!s.is_char_boundary(2));\n\n// third byte of `ËÄÅ`\nassert!(!s.is_char_boundary(8));\n```","links":{},"attrs":["#[must_use]","#[rustc_const_unstable(feature = \"const_is_char_boundary\", issue = \"none\")]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["index",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11354:54119":{"id":"2:11354:54119","crate_id":2,"name":"get_mut","span":null,"visibility":"public","docs":"Returns a mutable subslice of `str`.\n\nThis is the non-panicking alternative to indexing the `str`. Returns\n[`None`] whenever equivalent indexing operation would panic.\n\n# Examples\n\n```\nlet mut v = String::from(\"hello\");\n// correct length\nassert!(v.get_mut(0..5).is_some());\n// out of bounds\nassert!(v.get_mut(..42).is_none());\nassert_eq!(Some(\"he\"), v.get_mut(0..2).map(|v| &*v));\n\nassert_eq!(\"hello\", v);\n{\n    let s = v.get_mut(0..2);\n    let s = s.map(|s| {\n        s.make_ascii_uppercase();\n        &*s\n    });\n    assert_eq!(Some(\"HE\"), s);\n}\nassert_eq!(\"HEllo\", v);\n```","links":{"`None`":"2:48057:175"},"attrs":["#[rustc_const_unstable(feature = \"const_slice_index\", issue = \"none\")]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["i",{"kind":"generic","inner":"I"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:48055:177","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"qualified_path","inner":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"I"},"trait":{"name":"SliceIndex","id":"2:9138:218","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}}}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"2:9138:218","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"5:5119:59021":{"id":"5:5119:59021","crate_id":5,"name":"to_uppercase","span":null,"visibility":"public","docs":"Returns the uppercase equivalent of this string slice, as a new [`String`].\n\n'Uppercase' is defined according to the terms of the Unicode Derived Core Property\n`Uppercase`.\n\nSince some characters can expand into multiple characters when changing\nthe case, this function returns a [`String`] instead of modifying the\nparameter in-place.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"hello\";\n\nassert_eq!(\"HELLO\", s.to_uppercase());\n```\n\nScripts without case are not changed:\n\n```\nlet new_year = \"ÂÜúÂéÜÊñ∞Âπ¥\";\n\nassert_eq!(new_year, new_year.to_uppercase());\n```\n\nOne character can become multiple:\n```\nlet s = \"tsch√º√ü\";\n\nassert_eq!(\"TSCH√úSS\", s.to_uppercase());\n```","links":{"`String`":"5:6992:220"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the uppercase string as a new String, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:6992:220","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11349:58363":{"id":"2:11349:58363","crate_id":2,"name":"as_bytes_mut","span":null,"visibility":"public","docs":"Converts a mutable string slice to a mutable byte slice.\n\n# Safety\n\nThe caller must ensure that the content of the slice is valid UTF-8\nbefore the borrow ends and the underlying `str` is used.\n\nUse of a `str` whose contents are not valid UTF-8 is undefined behavior.\n\n# Examples\n\nBasic usage:\n\n```\nlet mut s = String::from(\"Hello\");\nlet bytes = unsafe { s.as_bytes_mut() };\n\nassert_eq!(b\"Hello\", bytes);\n```\n\nMutability:\n\n```\nlet mut s = String::from(\"üóª‚ààüåè\");\n\nunsafe {\n    let bytes = s.as_bytes_mut();\n\n    bytes[0] = 0xF0;\n    bytes[1] = 0x9F;\n    bytes[2] = 0x8D;\n    bytes[3] = 0x94;\n}\n\nassert_eq!(\"üçî‚ààüåè\", s);\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"slice","inner":{"kind":"primitive","inner":"u8"}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}},"2:11360:58364":{"id":"2:11360:58364","crate_id":2,"name":"slice_unchecked","span":null,"visibility":"public","docs":"Creates a string slice from another string slice, bypassing safety\nchecks.\n\nThis is generally not recommended, use with caution! For a safe\nalternative see [`str`] and [`Index`].\n\n[`Index`]: crate::ops::Index\n\nThis new slice goes from `begin` to `end`, including `begin` but\nexcluding `end`.\n\nTo get a mutable string slice instead, see the\n[`slice_mut_unchecked`] method.\n\n[`slice_mut_unchecked`]: str::slice_mut_unchecked\n\n# Safety\n\nCallers of this function are responsible that three preconditions are\nsatisfied:\n\n* `begin` must not exceed `end`.\n* `begin` and `end` must be byte positions within the string slice.\n* `begin` and `end` must lie on UTF-8 sequence boundaries.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"L√∂we ËÄÅËôé L√©opard\";\n\nunsafe {\n    assert_eq!(\"L√∂we ËÄÅËôé L√©opard\", s.slice_unchecked(0, 21));\n}\n\nlet s = \"Hello, world!\";\n\nunsafe {\n    assert_eq!(\"world\", s.slice_unchecked(7, 12));\n}\n```","links":{"crate::ops::Index":"2:2987:2063","`str`":"1:12306:1351","str::slice_mut_unchecked":"2:11361:58365"},"attrs":["#[deprecated(since = \"1.29.0\", note =\n\"use `get_unchecked(begin..end)` instead\")]","#[must_use]"],"deprecation":{"since":"1.29.0","note":"use `get_unchecked(begin..end)` instead"},"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["begin",{"kind":"primitive","inner":"usize"}],["end",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}},"5:5108:59019":{"id":"5:5108:59019","crate_id":5,"name":"replacen","span":null,"visibility":"public","docs":"Replaces first N matches of a pattern with another string.\n\n`replacen` creates a new [`String`], and copies the data from this string slice into it.\nWhile doing so, it attempts to find matches of a pattern. If it finds any, it\nreplaces them with the replacement string slice at most `count` times.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"foo foo 123 foo\";\nassert_eq!(\"new new 123 foo\", s.replacen(\"foo\", \"new\", 2));\nassert_eq!(\"faa fao 123 foo\", s.replacen('o', \"a\", 3));\nassert_eq!(\"foo foo new23 foo\", s.replacen(char::is_numeric, \"new\", 1));\n```\n\nWhen the pattern doesn't match:\n\n```\nlet s = \"this is old\";\nassert_eq!(s, s.replacen(\"cookie monster\", \"little lamb\", 10));\n```","links":{"`String`":"5:6992:220"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the replaced string as a new allocation, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}],["to",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}],["count",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:6992:220","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11046:2618","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11340:788":{"id":"2:11340:788","crate_id":2,"name":"len","span":null,"visibility":"public","docs":"Returns the length of `self`.\n\nThis length is in bytes, not [`char`]s or graphemes. In other words,\nit might not be what a human considers the length of the string.\n\n[`char`]: prim@char\n\n# Examples\n\nBasic usage:\n\n```\nlet len = \"foo\".len();\nassert_eq!(3, len);\n\nassert_eq!(\"∆íoo\".len(), 4); // fancy f!\nassert_eq!(\"∆íoo\".chars().count(), 3);\n```","links":{"prim@char":"1:12300:407"},"attrs":["#[must_use]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11401:58368":{"id":"2:11401:58368","crate_id":2,"name":"rsplit_terminator","span":null,"visibility":"public","docs":"An iterator over substrings of `self`, separated by characters\nmatched by a pattern and yielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\nEquivalent to [`split`], except that the trailing substring is\nskipped if empty.\n\n[`split`]: str::split\n\nThis method can be used for string data that is _terminated_,\nrather than _separated_ by a pattern.\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a\nreverse search, and it will be double ended if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`split_terminator`] method can be\nused.\n\n[`split_terminator`]: str::split_terminator\n\n# Examples\n\n```\nlet v: Vec<&str> = \"A.B.\".rsplit_terminator('.').collect();\nassert_eq!(v, [\"B\", \"A\"]);\n\nlet v: Vec<&str> = \"A..B..\".rsplit_terminator(\".\").collect();\nassert_eq!(v, [\"\", \"B\", \"\", \"A\"]);\n\nlet v: Vec<&str> = \"A.B:C.D\".rsplit_terminator(&['.', ':'][..]).collect();\nassert_eq!(v, [\"D\", \"C\", \"B\", \"A\"]);\n```","links":{"str::split_terminator":"2:11398:58367","str::split":"2:11389:54151","self::pattern":"2:11041:2619","prim@char":"1:12300:407"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"RSplitTerminator","id":"2:50091:2926","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11046:2618","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"2:11046:2618","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11061:2622","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11439:58380":{"id":"2:11439:58380","crate_id":2,"name":"trim_start_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. `start` in this context means the first\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be left side, and for right-to-left languages like\nArabic or Hebrew, this will be the right side.\n\n# Examples\n\nBasic usage:\n\n```\nassert_eq!(\"11foo1bar11\".trim_start_matches('1'), \"foo1bar11\");\nassert_eq!(\"123foo1bar123\".trim_start_matches(char::is_numeric), \"foo1bar123\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_start_matches(x), \"foo1bar12\");\n```","links":{"prim@char":"1:12300:407","self::pattern":"2:11041:2619"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11046:2618","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11416:1834":{"id":"2:11416:1834","crate_id":2,"name":"matches","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within the given string\nslice.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rmatches`] method can be used.\n\n[`rmatches`]: str::matches\n\n# Examples\n\nBasic usage:\n\n```\nlet v: Vec<&str> = \"abcXXXabcYYYabc\".matches(\"abc\").collect();\nassert_eq!(v, [\"abc\", \"abc\", \"abc\"]);\n\nlet v: Vec<&str> = \"1abc2abc3\".matches(char::is_numeric).collect();\nassert_eq!(v, [\"1\", \"2\", \"3\"]);\n```","links":{"self::pattern":"2:11041:2619","prim@char":"1:12300:407","`DoubleEndedIterator`":"2:7079:119","str::matches":"2:11416:1834"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Matches","id":"2:50227:2932","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11046:2618","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11372:54161":{"id":"2:11372:54161","crate_id":2,"name":"contains","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a sub-slice of\nthis string slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nBasic usage:\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.contains(\"nana\"));\nassert!(!bananas.contains(\"apples\"));\n```","links":{"self::pattern":"2:11041:2619","prim@char":"1:12300:407"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11046:2618","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:0:1621":{"id":"0:0:1621","crate_id":0,"name":"winapi","span":{"filename":"src/lib.rs","begin":[6,0],"end":[71,1]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"module","inner":{"is_crate":true,"items":[],"is_stripped":false}},"2:11413:58370":{"id":"2:11413:58370","crate_id":2,"name":"rsplit_once","span":null,"visibility":"public","docs":"Splits the string on the last occurrence of the specified delimiter and\nreturns prefix before delimiter and suffix after delimiter.\n\n# Examples\n\n```\nassert_eq!(\"cfg\".rsplit_once('='), None);\nassert_eq!(\"cfg=foo\".rsplit_once('='), Some((\"cfg\", \"foo\")));\nassert_eq!(\"cfg=foo=bar\".rsplit_once('='), Some((\"cfg=foo\", \"bar\")));\n```","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["delimiter",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:48055:177","args":{"angle_bracketed":{"args":[{"type":{"kind":"tuple","inner":[{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}},{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11046:2618","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"2:11046:2618","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11061:2622","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11462:50974":{"id":"2:11462:50974","crate_id":2,"name":"make_ascii_lowercase","span":null,"visibility":"public","docs":"Converts this string to its ASCII lower case equivalent in-place.\n\nASCII letters 'A' to 'Z' are mapped to 'a' to 'z',\nbut non-ASCII letters are unchanged.\n\nTo return a new lowercased value without modifying the existing one, use\n[`to_ascii_lowercase()`].\n\n[`to_ascii_lowercase()`]: #method.to_ascii_lowercase\n\n# Examples\n\n```\nlet mut s = String::from(\"GR√ú√üE, J√úRGEN ‚ù§\");\n\ns.make_ascii_lowercase();\n\nassert_eq!(\"gr√ú√üe, j√úrgen ‚ù§\", s);\n```","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11466:58385":{"id":"2:11466:58385","crate_id":2,"name":"escape_unicode","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_unicode`].\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"‚ù§\\n!\".escape_unicode() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"‚ù§\\n!\".escape_unicode());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"\\\\u{{2764}}\\\\u{{a}}\\\\u{{21}}\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"‚ù§\\n!\".escape_unicode().to_string(), \"\\\\u{2764}\\\\u{a}\\\\u{21}\");\n```","links":{"`char::escape_unicode`":"2:4465:58385"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"EscapeUnicode","id":"2:50340:2939","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"5:5103":{"id":"5:5103","crate_id":5,"name":null,"span":null,"visibility":{"restricted":{"parent":"5:5014:1351","path":"::str"}},"docs":"Methods for string slices.","links":{},"attrs":["#[cfg(not(test))]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"kind":"primitive","inner":"str"},"items":["5:5104:59018","5:5105:2240","5:5108:59019","5:5111:59020","5:5119:59021","5:5120:59022","5:5121:2261","5:5122:50970","5:5123:50971"],"negative":false,"synthetic":false,"blanket_impl":null}},"2:11361:58365":{"id":"2:11361:58365","crate_id":2,"name":"slice_mut_unchecked","span":null,"visibility":"public","docs":"Creates a string slice from another string slice, bypassing safety\nchecks.\nThis is generally not recommended, use with caution! For a safe\nalternative see [`str`] and [`IndexMut`].\n\n[`IndexMut`]: crate::ops::IndexMut\n\nThis new slice goes from `begin` to `end`, including `begin` but\nexcluding `end`.\n\nTo get an immutable string slice instead, see the\n[`slice_unchecked`] method.\n\n[`slice_unchecked`]: str::slice_unchecked\n\n# Safety\n\nCallers of this function are responsible that three preconditions are\nsatisfied:\n\n* `begin` must not exceed `end`.\n* `begin` and `end` must be byte positions within the string slice.\n* `begin` and `end` must lie on UTF-8 sequence boundaries.","links":{"crate::ops::IndexMut":"2:2991:2064","`str`":"1:12306:1351","str::slice_unchecked":"2:11360:58364"},"attrs":["#[deprecated(since = \"1.29.0\", note =\n\"use `get_unchecked_mut(begin..end)` instead\")]"],"deprecation":{"since":"1.29.0","note":"use `get_unchecked_mut(begin..end)` instead"},"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["begin",{"kind":"primitive","inner":"usize"}],["end",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}},"2:11419:58371":{"id":"2:11419:58371","crate_id":2,"name":"rmatches","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within this string slice,\nyielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`matches`] method can be used.\n\n[`matches`]: str::matches\n\n# Examples\n\nBasic usage:\n\n```\nlet v: Vec<&str> = \"abcXXXabcYYYabc\".rmatches(\"abc\").collect();\nassert_eq!(v, [\"abc\", \"abc\", \"abc\"]);\n\nlet v: Vec<&str> = \"1abc2abc3\".rmatches(char::is_numeric).collect();\nassert_eq!(v, [\"3\", \"2\", \"1\"]);\n```","links":{"prim@char":"1:12300:407","self::pattern":"2:11041:2619","str::matches":"2:11416:1834","`DoubleEndedIterator`":"2:7079:119"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"RMatches","id":"2:50245:2933","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11046:2618","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"2:11046:2618","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11061:2622","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11366:3180":{"id":"2:11366:3180","crate_id":2,"name":"bytes","span":null,"visibility":"public","docs":"An iterator over the bytes of a string slice.\n\nAs a string slice consists of a sequence of bytes, we can iterate\nthrough a string slice by byte. This method returns such an iterator.\n\n# Examples\n\nBasic usage:\n\n```\nlet mut bytes = \"bors\".bytes();\n\nassert_eq!(Some(b'b'), bytes.next());\nassert_eq!(Some(b'o'), bytes.next());\nassert_eq!(Some(b'r'), bytes.next());\nassert_eq!(Some(b's'), bytes.next());\n\nassert_eq!(None, bytes.next());\n```","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Bytes","id":"2:50009:2237","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11448:58381":{"id":"2:11448:58381","crate_id":2,"name":"trim_end_matches","span":null,"visibility":"public","docs":"Returns a string slice with all suffixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. `end` in this context means the last\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be right side, and for right-to-left languages like\nArabic or Hebrew, this will be the left side.\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_end_matches('1'), \"11foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_end_matches(char::is_numeric), \"123foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_end_matches(x), \"12foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1fooX\".trim_end_matches(|c| c == '1' || c == 'X'), \"1foo\");\n```","links":{"self::pattern":"2:11041:2619","prim@char":"1:12300:407"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11046:2618","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"2:11046:2618","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11061:2622","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11375:53777":{"id":"2:11375:53777","crate_id":2,"name":"starts_with","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a prefix of this\nstring slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nBasic usage:\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.starts_with(\"bana\"));\nassert!(!bananas.starts_with(\"nana\"));\n```","links":{"self::pattern":"2:11041:2619","prim@char":"1:12300:407"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11046:2618","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11351:54122":{"id":"2:11351:54122","crate_id":2,"name":"as_mut_ptr","span":null,"visibility":"public","docs":"Converts a mutable string slice to a raw pointer.\n\nAs string slices are a slice of bytes, the raw pointer points to a\n[`u8`]. This pointer will be pointing to the first byte of the string\nslice.\n\nIt is your responsibility to make sure that the string slice only gets\nmodified in a way that it remains valid UTF-8.","links":{"`u8`":"1:12317:1447"},"attrs":["#[must_use]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"raw_pointer","inner":{"mutable":true,"type":{"kind":"primitive","inner":"u8"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11389:54151":{"id":"2:11389:54151","crate_id":2,"name":"split","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by\ncharacters matched by a pattern.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rsplit`] method can be used.\n\n[`rsplit`]: str::rsplit\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".split(' ').collect();\nassert_eq!(v, [\"Mary\", \"had\", \"a\", \"little\", \"lamb\"]);\n\nlet v: Vec<&str> = \"\".split('X').collect();\nassert_eq!(v, [\"\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".split('X').collect();\nassert_eq!(v, [\"lion\", \"\", \"tiger\", \"leopard\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".split(\"::\").collect();\nassert_eq!(v, [\"lion\", \"tiger\", \"leopard\"]);\n\nlet v: Vec<&str> = \"abc1def2ghi\".split(char::is_numeric).collect();\nassert_eq!(v, [\"abc\", \"def\", \"ghi\"]);\n\nlet v: Vec<&str> = \"lionXtigerXleopard\".split(char::is_uppercase).collect();\nassert_eq!(v, [\"lion\", \"tiger\", \"leopard\"]);\n```\n\nIf the pattern is a slice of chars, split on each occurrence of any of the characters:\n\n```\nlet v: Vec<&str> = \"2020-11-03 23:59\".split(&['-', ' ', ':', '@'][..]).collect();\nassert_eq!(v, [\"2020\", \"11\", \"03\", \"23\", \"59\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".split(|c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"abc\", \"def\", \"ghi\"]);\n```\n\nIf a string contains multiple contiguous separators, you will end up\nwith empty strings in the output:\n\n```\nlet x = \"||||a||b|c\".to_string();\nlet d: Vec<_> = x.split('|').collect();\n\nassert_eq!(d, &[\"\", \"\", \"\", \"\", \"a\", \"\", \"b\", \"c\"]);\n```\n\nContiguous separators are separated by the empty string.\n\n```\nlet x = \"(///)\".to_string();\nlet d: Vec<_> = x.split('/').collect();\n\nassert_eq!(d, &[\"(\", \"\", \"\", \")\"]);\n```\n\nSeparators at the start or end of a string are neighbored\nby empty strings.\n\n```\nlet d: Vec<_> = \"010\".split(\"0\").collect();\nassert_eq!(d, &[\"\", \"1\", \"\"]);\n```\n\nWhen the empty string is used as a separator, it separates\nevery character in the string, along with the beginning\nand end of the string.\n\n```\nlet f: Vec<_> = \"rust\".split(\"\").collect();\nassert_eq!(f, &[\"\", \"r\", \"u\", \"s\", \"t\", \"\"]);\n```\n\nContiguous separators can lead to possibly surprising behavior\nwhen whitespace is used as the separator. This code is correct:\n\n```\nlet x = \"    a  b c\".to_string();\nlet d: Vec<_> = x.split(' ').collect();\n\nassert_eq!(d, &[\"\", \"\", \"\", \"\", \"a\", \"\", \"b\", \"c\"]);\n```\n\nIt does _not_ give you:\n\n```,ignore\nassert_eq!(d, &[\"a\", \"b\", \"c\"]);\n```\n\nUse [`split_whitespace`] for this behavior.\n\n[`split_whitespace`]: str::split_whitespace","links":{"self::pattern":"2:11041:2619","`DoubleEndedIterator`":"2:7079:119","str::rsplit":"2:11395:54155","prim@char":"1:12300:407","str::split_whitespace":"2:11367:56080"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Split","id":"2:50023:2005","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11046:2618","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11339":{"id":"2:11339","crate_id":2,"name":null,"span":null,"visibility":{"restricted":{"parent":"2:10604:1351","path":"::str"}},"docs":null,"links":{},"attrs":["#[cfg(not(test))]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"kind":"primitive","inner":"str"},"items":["2:11340:788","2:11341:51664","2:11342:58360","2:11343:58361","2:11345:58362","2:11348:53753","2:11349:58363","2:11350:308","2:11351:54122","2:11352:54118","2:11354:54119","2:11356:54120","2:11358:54121","2:11360:58364","2:11361:58365","2:11362:54143","2:11363:54144","2:11364:2957","2:11365:2650","2:11366:3180","2:11367:56080","2:11368:56074","2:11369:3502","2:11370:58366","2:11371:56085","2:11372:54161","2:11375:53777","2:11378:53779","2:11381:4078","2:11385:4079","2:11389:54151","2:11392:54153","2:11395:54155","2:11398:58367","2:11401:58368","2:11404:54157","2:11407:54159","2:11410:58369","2:11413:58370","2:11416:1834","2:11419:58371","2:11422:58372","2:11425:58373","2:11428:58374","2:11430:58375","2:11432:58376","2:11434:58377","2:11435:58378","2:11436:58379","2:11439:58380","2:11442:51516","2:11445:54162","2:11448:58381","2:11451:58382","2:11454:58383","2:11457:2752","2:11459:3134","2:11460:50972","2:11461:50973","2:11462:50974","2:11463:58384","2:11465:1892","2:11466:58385"],"negative":false,"synthetic":false,"blanket_impl":null}},"2:11428:58374":{"id":"2:11428:58374","crate_id":2,"name":"trim","span":null,"visibility":"public","docs":"Returns a string slice with leading and trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\n\nassert_eq!(\"Hello\\tworld\", s.trim());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a slice, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_trim\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11454:58383":{"id":"2:11454:58383","crate_id":2,"name":"trim_right_matches","span":null,"visibility":"public","docs":"Returns a string slice with all suffixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. 'Right' in this context means the last\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _left_ side, not the right.\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_right_matches('1'), \"11foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_right_matches(char::is_numeric), \"123foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_right_matches(x), \"12foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1fooX\".trim_right_matches(|c| c == '1' || c == 'X'), \"1foo\");\n```","links":{"prim@char":"1:12300:407","self::pattern":"2:11041:2619"},"attrs":["#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_end_matches`\",\nsuggestion = \"trim_end_matches\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_end_matches`"},"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11046:2618","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"2:11046:2618","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11061:2622","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11370:58366":{"id":"2:11370:58366","crate_id":2,"name":"lines_any","span":null,"visibility":"public","docs":"An iterator over the lines of a string.","links":{},"attrs":["#[deprecated(since = \"1.4.0\", note = \"use lines() instead now\")]"],"deprecation":{"since":"1.4.0","note":"use lines() instead now"},"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"LinesAny","id":"2:50287:2934","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11445:54162":{"id":"2:11445:54162","crate_id":2,"name":"strip_suffix","span":null,"visibility":"public","docs":"Returns a string slice with the suffix removed.\n\nIf the string ends with the pattern `suffix`, returns the substring before the suffix,\nwrapped in `Some`.  Unlike `trim_end_matches`, this method removes the suffix exactly once.\n\nIf the string does not end with `suffix`, returns `None`.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nassert_eq!(\"bar:foo\".strip_suffix(\":foo\"), Some(\"bar\"));\nassert_eq!(\"bar:foo\".strip_suffix(\"bar\"), None);\nassert_eq!(\"foofoo\".strip_suffix(\"foo\"), Some(\"foo\"));\n```","links":{"prim@char":"1:12300:407","self::pattern":"2:11041:2619"},"attrs":["#[must_use =\n\"this returns the remaining substring as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["suffix",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:48055:177","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11046:2618","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"2:11046:2618","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11061:2622","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11350:308":{"id":"2:11350:308","crate_id":2,"name":"as_ptr","span":null,"visibility":"public","docs":"Converts a string slice to a raw pointer.\n\nAs string slices are a slice of bytes, the raw pointer points to a\n[`u8`]. This pointer will be pointing to the first byte of the string\nslice.\n\nThe caller must ensure that the returned pointer is never written to.\nIf you need to mutate the contents of the string slice, use [`as_mut_ptr`].\n\n[`as_mut_ptr`]: str::as_mut_ptr\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"Hello\";\nlet ptr = s.as_ptr();\n```","links":{"`u8`":"1:12317:1447","str::as_mut_ptr":"2:11351:54122"},"attrs":["#[must_use]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"raw_pointer","inner":{"mutable":false,"type":{"kind":"primitive","inner":"u8"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11465:1892":{"id":"2:11465:1892","crate_id":2,"name":"escape_default","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_default`].\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"‚ù§\\n!\".escape_default() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"‚ù§\\n!\".escape_default());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"\\\\u{{2764}}\\\\n!\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"‚ù§\\n!\".escape_default().to_string(), \"\\\\u{2764}\\\\n!\");\n```","links":{"`char::escape_default`":"2:4468:1892"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"EscapeDefault","id":"2:50331:1893","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11436:58379":{"id":"2:11436:58379","crate_id":2,"name":"trim_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes and suffixes that match a\npattern repeatedly removed.\n\nThe [pattern] can be a [`char`], a slice of [`char`]s, or a function\nor closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_matches('1'), \"foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_matches(char::is_numeric), \"foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_matches(x), \"foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1foo1barXX\".trim_matches(|c| c == '1' || c == 'X'), \"foo1bar\");\n```","links":{"prim@char":"1:12300:407","self::pattern":"2:11041:2619"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11046:2618","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"2:11046:2618","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"DoubleEndedSearcher","id":"2:11066:2623","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11381:4078":{"id":"2:11381:4078","crate_id":2,"name":"find","span":null,"visibility":"public","docs":"Returns the byte index of the first character of this string slice that\nmatches the pattern.\n\nReturns [`None`] if the pattern doesn't match.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nlet s = \"L√∂we ËÄÅËôé L√©opard Gepardi\";\n\nassert_eq!(s.find('L'), Some(0));\nassert_eq!(s.find('√©'), Some(14));\nassert_eq!(s.find(\"pard\"), Some(17));\n```\n\nMore complex patterns using point-free style and closures:\n\n```\nlet s = \"L√∂we ËÄÅËôé L√©opard\";\n\nassert_eq!(s.find(char::is_whitespace), Some(5));\nassert_eq!(s.find(char::is_lowercase), Some(1));\nassert_eq!(s.find(|c: char| c.is_whitespace() || c.is_lowercase()), Some(1));\nassert_eq!(s.find(|c: char| (c < 'o') && (c > 'a')), Some(4));\n```\n\nNot finding the pattern:\n\n```\nlet s = \"L√∂we ËÄÅËôé L√©opard\";\nlet x: &[_] = &['1', '2'];\n\nassert_eq!(s.find(x), None);\n```","links":{"`None`":"2:48057:175","self::pattern":"2:11041:2619","prim@char":"1:12300:407"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:48055:177","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11046:2618","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11371:56085":{"id":"2:11371:56085","crate_id":2,"name":"encode_utf16","span":null,"visibility":"public","docs":"Returns an iterator of `u16` over the string encoded as UTF-16.\n\n# Examples\n\nBasic usage:\n\n```\nlet text = \"Za≈º√≥≈Çƒá gƒô≈õlƒÖ ja≈∫≈Ñ\";\n\nlet utf8_len = text.len();\nlet utf16_len = text.encode_utf16().count();\n\nassert!(utf16_len <= utf8_len);\n```","links":{},"attrs":["#[must_use =\n\"this returns the encoded string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"EncodeUtf16","id":"2:50315:2937","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11367:56080":{"id":"2:11367:56080","crate_id":2,"name":"split_whitespace","span":null,"visibility":"public","docs":"Splits a string slice by whitespace.\n\nThe iterator returned will return string slices that are sub-slices of\nthe original string slice, separated by any amount of whitespace.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`. If you only want to split on ASCII whitespace\ninstead, use [`split_ascii_whitespace`].\n\n[`split_ascii_whitespace`]: str::split_ascii_whitespace\n\n# Examples\n\nBasic usage:\n\n```\nlet mut iter = \"A few words\".split_whitespace();\n\nassert_eq!(Some(\"A\"), iter.next());\nassert_eq!(Some(\"few\"), iter.next());\nassert_eq!(Some(\"words\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nAll kinds of whitespace are considered:\n\n```\nlet mut iter = \" Mary   had\\ta\\u{2009}little  \\n\\t lamb\".split_whitespace();\nassert_eq!(Some(\"Mary\"), iter.next());\nassert_eq!(Some(\"had\"), iter.next());\nassert_eq!(Some(\"a\"), iter.next());\nassert_eq!(Some(\"little\"), iter.next());\nassert_eq!(Some(\"lamb\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nIf the string is empty or all whitespace, the iterator yields no string slices:\n```\nassert_eq!(\"\".split_whitespace().next(), None);\nassert_eq!(\"   \".split_whitespace().next(), None);\n```","links":{"str::split_ascii_whitespace":"2:11368:56074"},"attrs":["#[must_use =\n\"this returns the split string as an iterator, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_split_whitespace\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"SplitWhitespace","id":"2:50297:2935","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11363:54144":{"id":"2:11363:54144","crate_id":2,"name":"split_at_mut","span":null,"visibility":"public","docs":"Divide one mutable string slice into two at an index.\n\nThe argument, `mid`, should be a byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get immutable string slices instead, see the [`split_at`] method.\n\n[`split_at`]: str::split_at\n\n# Panics\n\nPanics if `mid` is not on a UTF-8 code point boundary, or if it is\npast the end of the last code point of the string slice.\n\n# Examples\n\nBasic usage:\n\n```\nlet mut s = \"Per Martin-L√∂f\".to_string();\n{\n    let (first, last) = s.split_at_mut(3);\n    first.make_ascii_uppercase();\n    assert_eq!(\"PER\", first);\n    assert_eq!(\" Martin-L√∂f\", last);\n}\nassert_eq!(\"PER Martin-L√∂f\", s);\n```","links":{"str::split_at":"2:11362:54143"},"attrs":["#[must_use]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["mid",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"tuple","inner":[{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"primitive","inner":"str"}}},{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"primitive","inner":"str"}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11435:58378":{"id":"2:11435:58378","crate_id":2,"name":"trim_right","span":null,"visibility":"public","docs":"Returns a string slice with trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`.\n\n# Text directionality\n\nA string is a sequence of bytes. 'Right' in this context means the last\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _left_ side, not the right.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \" Hello\\tworld\\t\";\n\nassert_eq!(\" Hello\\tworld\", s.trim_right());\n```\n\nDirectionality:\n\n```\nlet s = \"English  \";\nassert!(Some('h') == s.trim_right().chars().rev().next());\n\nlet s = \"◊¢◊ë◊®◊ô◊™  \";\nassert!(Some('◊™') == s.trim_right().chars().rev().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_end`\", suggestion =\n\"trim_end\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_end`"},"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11463:58384":{"id":"2:11463:58384","crate_id":2,"name":"escape_debug","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_debug`].\n\nNote: only extended grapheme codepoints that begin the string will be\nescaped.\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"‚ù§\\n!\".escape_debug() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"‚ù§\\n!\".escape_debug());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"‚ù§\\\\n!\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"‚ù§\\n!\".escape_debug().to_string(), \"‚ù§\\\\n!\");\n```","links":{"`char::escape_debug`":"2:4467:58384"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"EscapeDebug","id":"2:50322:2938","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11395:54155":{"id":"2:11395:54155","crate_id":2,"name":"rsplit","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by\ncharacters matched by a pattern and yielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`split`] method can be used.\n\n[`split`]: str::split\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".rsplit(' ').collect();\nassert_eq!(v, [\"lamb\", \"little\", \"a\", \"had\", \"Mary\"]);\n\nlet v: Vec<&str> = \"\".rsplit('X').collect();\nassert_eq!(v, [\"\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".rsplit('X').collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"\", \"lion\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".rsplit(\"::\").collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"lion\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".rsplit(|c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"ghi\", \"def\", \"abc\"]);\n```","links":{"str::split":"2:11389:54151","prim@char":"1:12300:407","`DoubleEndedIterator`":"2:7079:119","self::pattern":"2:11041:2619"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"RSplit","id":"2:50041:2014","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11046:2618","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"2:11046:2618","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11061:2622","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11442:51516":{"id":"2:11442:51516","crate_id":2,"name":"strip_prefix","span":null,"visibility":"public","docs":"Returns a string slice with the prefix removed.\n\nIf the string starts with the pattern `prefix`, returns substring after the prefix, wrapped\nin `Some`.  Unlike `trim_start_matches`, this method removes the prefix exactly once.\n\nIf the string does not start with `prefix`, returns `None`.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nassert_eq!(\"foo:bar\".strip_prefix(\"foo:\"), Some(\"bar\"));\nassert_eq!(\"foo:bar\".strip_prefix(\"bar\"), None);\nassert_eq!(\"foofoo\".strip_prefix(\"foo\"), Some(\"foo\"));\n```","links":{"prim@char":"1:12300:407","self::pattern":"2:11041:2619"},"attrs":["#[must_use =\n\"this returns the remaining substring as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["prefix",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:48055:177","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11046:2618","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"5:5122:50970":{"id":"5:5122:50970","crate_id":5,"name":"to_ascii_uppercase","span":null,"visibility":"public","docs":"Returns a copy of this string where each character is mapped to its\nASCII upper case equivalent.\n\nASCII letters 'a' to 'z' are mapped to 'A' to 'Z',\nbut non-ASCII letters are unchanged.\n\nTo uppercase the value in-place, use [`make_ascii_uppercase`].\n\nTo uppercase ASCII characters in addition to non-ASCII characters, use\n[`to_uppercase`].\n\n# Examples\n\n```\nlet s = \"Gr√º√üe, J√ºrgen ‚ù§\";\n\nassert_eq!(\"GR√º√üE, J√ºRGEN ‚ù§\", s.to_ascii_uppercase());\n```\n\n[`make_ascii_uppercase`]: str::make_ascii_uppercase\n[`to_uppercase`]: #method.to_uppercase","links":{"str::make_ascii_uppercase":"2:11461:50973"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use = \"to uppercase the value in-place, use `make_ascii_uppercase()`\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:6992:220","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11343:58361":{"id":"2:11343:58361","crate_id":2,"name":"floor_char_boundary","span":null,"visibility":"public","docs":"Finds the closest `x` not exceeding `index` where `is_char_boundary(x)` is `true`.\n\nThis method can help you truncate a string so that it's still valid UTF-8, but doesn't\nexceed a given number of bytes. Note that this is done purely at the character level\nand can still visually split graphemes, even though the underlying characters aren't\nsplit. For example, the emoji üßë‚Äçüî¨ (scientist) could be split so that the string only\nincludes üßë (person) instead.\n\n# Examples\n\n```\n#![feature(round_char_boundary)]\nlet s = \"‚ù§Ô∏èüß°üíõüíöüíôüíú\";\nassert_eq!(s.len(), 26);\nassert!(!s.is_char_boundary(13));\n\nlet closest = s.floor_char_boundary(13);\nassert_eq!(closest, 10);\nassert_eq!(&s[..closest], \"‚ù§Ô∏èüß°\");\n```","links":{},"attrs":["#[unstable(feature = \"round_char_boundary\", issue = \"93743\")]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["index",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"primitive","inner":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11457:2752":{"id":"2:11457:2752","crate_id":2,"name":"parse","span":null,"visibility":"public","docs":"Parses this string slice into another type.\n\nBecause `parse` is so general, it can cause problems with type\ninference. As such, `parse` is one of the few times you'll see\nthe syntax affectionately known as the 'turbofish': `::<>`. This\nhelps the inference algorithm understand specifically which type\nyou're trying to parse into.\n\n`parse` can parse into any type that implements the [`FromStr`] trait.\n\n# Errors\n\nWill return [`Err`] if it's not possible to parse this string slice into\nthe desired type.\n\n[`Err`]: FromStr::Err\n\n# Examples\n\nBasic usage\n\n```\nlet four: u32 = \"4\".parse().unwrap();\n\nassert_eq!(4, four);\n```\n\nUsing the 'turbofish' instead of annotating `four`:\n\n```\nlet four = \"4\".parse::<u32>();\n\nassert_eq!(Ok(4), four);\n```\n\nFailing to parse:\n\n```\nlet nope = \"j\".parse::<u32>();\n\nassert!(nope.is_err());\n```","links":{"`FromStr`":"2:11002:2034","FromStr::Err":"2:11003:125"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Result","id":"2:48199:206","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"F"}},{"type":{"kind":"qualified_path","inner":{"name":"Err","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"F"},"trait":{"name":"FromStr","id":"2:11002:2034","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"F"},"bounds":[{"trait_bound":{"trait":{"name":"FromStr","id":"2:11002:2034","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11392:54153":{"id":"2:11392:54153","crate_id":2,"name":"split_inclusive","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by\ncharacters matched by a pattern. Differs from the iterator produced by\n`split` in that `split_inclusive` leaves the matched part as the\nterminator of the substring.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\\nlittle lamb\\nlittle lamb.\"\n    .split_inclusive('\\n').collect();\nassert_eq!(v, [\"Mary had a little lamb\\n\", \"little lamb\\n\", \"little lamb.\"]);\n```\n\nIf the last element of the string is matched,\nthat element will be considered the terminator of the preceding substring.\nThat substring will be the last item returned by the iterator.\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\\nlittle lamb\\nlittle lamb.\\n\"\n    .split_inclusive('\\n').collect();\nassert_eq!(v, [\"Mary had a little lamb\\n\", \"little lamb\\n\", \"little lamb.\\n\"]);\n```","links":{"prim@char":"1:12300:407","self::pattern":"2:11041:2619"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"SplitInclusive","id":"2:10865:2020","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11046:2618","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11348:53753":{"id":"2:11348:53753","crate_id":2,"name":"as_bytes","span":null,"visibility":"public","docs":"Converts a string slice to a byte slice. To convert the byte slice back\ninto a string slice, use the [`from_utf8`] function.\n\n# Examples\n\nBasic usage:\n\n```\nlet bytes = \"bors\".as_bytes();\nassert_eq!(b\"bors\", bytes);\n```","links":{"`from_utf8`":"2:10609:3091"},"attrs":["#[must_use]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"slice","inner":{"kind":"primitive","inner":"u8"}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11398:58367":{"id":"2:11398:58367","crate_id":2,"name":"split_terminator","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by\ncharacters matched by a pattern.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\nEquivalent to [`split`], except that the trailing substring\nis skipped if empty.\n\n[`split`]: str::split\n\nThis method can be used for string data that is _terminated_,\nrather than _separated_ by a pattern.\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rsplit_terminator`] method can be used.\n\n[`rsplit_terminator`]: str::rsplit_terminator\n\n# Examples\n\nBasic usage:\n\n```\nlet v: Vec<&str> = \"A.B.\".split_terminator('.').collect();\nassert_eq!(v, [\"A\", \"B\"]);\n\nlet v: Vec<&str> = \"A..B..\".split_terminator(\".\").collect();\nassert_eq!(v, [\"A\", \"\", \"B\", \"\"]);\n\nlet v: Vec<&str> = \"A.B:C.D\".split_terminator(&['.', ':'][..]).collect();\nassert_eq!(v, [\"A\", \"B\", \"C\", \"D\"]);\n```","links":{"`DoubleEndedIterator`":"2:7079:119","str::rsplit_terminator":"2:11401:58368","self::pattern":"2:11041:2619","prim@char":"1:12300:407","str::split":"2:11389:54151"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"SplitTerminator","id":"2:50073:2925","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11046:2618","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11425:58373":{"id":"2:11425:58373","crate_id":2,"name":"rmatch_indices","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within `self`,\nyielded in reverse order along with the index of the match.\n\nFor matches of `pat` within `self` that overlap, only the indices\ncorresponding to the last match are returned.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`match_indices`] method can be used.\n\n[`match_indices`]: str::match_indices\n\n# Examples\n\nBasic usage:\n\n```\nlet v: Vec<_> = \"abcXXXabcYYYabc\".rmatch_indices(\"abc\").collect();\nassert_eq!(v, [(12, \"abc\"), (6, \"abc\"), (0, \"abc\")]);\n\nlet v: Vec<_> = \"1abcabc2\".rmatch_indices(\"abc\").collect();\nassert_eq!(v, [(4, \"abc\"), (1, \"abc\")]);\n\nlet v: Vec<_> = \"ababa\".rmatch_indices(\"aba\").collect();\nassert_eq!(v, [(2, \"aba\")]); // only the last `aba`\n```","links":{"`DoubleEndedIterator`":"2:7079:119","str::match_indices":"2:11422:58372","self::pattern":"2:11041:2619","prim@char":"1:12300:407"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"RMatchIndices","id":"2:50191:2930","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11046:2618","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"2:11046:2618","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11061:2622","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11341:51664":{"id":"2:11341:51664","crate_id":2,"name":"is_empty","span":null,"visibility":"public","docs":"Returns `true` if `self` has a length of zero bytes.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\";\nassert!(s.is_empty());\n\nlet s = \"not empty\";\nassert!(!s.is_empty());\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11345:58362":{"id":"2:11345:58362","crate_id":2,"name":"ceil_char_boundary","span":null,"visibility":"public","docs":"Finds the closest `x` not below `index` where `is_char_boundary(x)` is `true`.\n\nThis method is the natural complement to [`floor_char_boundary`]. See that method\nfor more details.\n\n[`floor_char_boundary`]: str::floor_char_boundary\n\n# Panics\n\nPanics if `index > self.len()`.\n\n# Examples\n\n```\n#![feature(round_char_boundary)]\nlet s = \"‚ù§Ô∏èüß°üíõüíöüíôüíú\";\nassert_eq!(s.len(), 26);\nassert!(!s.is_char_boundary(13));\n\nlet closest = s.ceil_char_boundary(13);\nassert_eq!(closest, 14);\nassert_eq!(&s[..closest], \"‚ù§Ô∏èüß°üíõ\");\n```","links":{"str::floor_char_boundary":"2:11343:58361"},"attrs":["#[unstable(feature = \"round_char_boundary\", issue = \"93743\")]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["index",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"primitive","inner":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"5:5121:2261":{"id":"5:5121:2261","crate_id":5,"name":"repeat","span":null,"visibility":"public","docs":"Creates a new [`String`] by repeating a string `n` times.\n\n# Panics\n\nThis function will panic if the capacity would overflow.\n\n# Examples\n\nBasic usage:\n\n```\nassert_eq!(\"abc\".repeat(4), String::from(\"abcabcabcabc\"));\n```\n\nA panic upon overflow:\n\n```should_panic\n// this will panic at runtime\nlet huge = \"0123456789abcdef\".repeat(usize::MAX);\n```","links":{"`String`":"5:6992:220"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["n",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:6992:220","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11410:58369":{"id":"2:11410:58369","crate_id":2,"name":"split_once","span":null,"visibility":"public","docs":"Splits the string on the first occurrence of the specified delimiter and\nreturns prefix before delimiter and suffix after delimiter.\n\n# Examples\n\n```\nassert_eq!(\"cfg\".split_once('='), None);\nassert_eq!(\"cfg=\".split_once('='), Some((\"cfg\", \"\")));\nassert_eq!(\"cfg=foo\".split_once('='), Some((\"cfg\", \"foo\")));\nassert_eq!(\"cfg=foo=bar\".split_once('='), Some((\"cfg\", \"foo=bar\")));\n```","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["delimiter",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:48055:177","args":{"angle_bracketed":{"args":[{"type":{"kind":"tuple","inner":[{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}},{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11046:2618","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11430:58375":{"id":"2:11430:58375","crate_id":2,"name":"trim_start","span":null,"visibility":"public","docs":"Returns a string slice with leading whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Text directionality\n\nA string is a sequence of bytes. `start` in this context means the first\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be left side, and for right-to-left languages like\nArabic or Hebrew, this will be the right side.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\nassert_eq!(\"Hello\\tworld\\t\\n\", s.trim_start());\n```\n\nDirectionality:\n\n```\nlet s = \"  English  \";\nassert!(Some('E') == s.trim_start().chars().next());\n\nlet s = \"  ◊¢◊ë◊®◊ô◊™  \";\nassert!(Some('◊¢') == s.trim_start().chars().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_trim_start\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11369:3502":{"id":"2:11369:3502","crate_id":2,"name":"lines","span":null,"visibility":"public","docs":"An iterator over the lines of a string, as string slices.\n\nLines are split at line endings that are either newlines (`\\n`) or\nsequences of a carriage return followed by a line feed (`\\r\\n`).\n\nLine terminators are not included in the lines returned by the iterator.\n\nThe final line ending is optional. A string that ends with a final line\nending will return the same lines as an otherwise identical string\nwithout a final line ending.\n\n# Examples\n\nBasic usage:\n\n```\nlet text = \"foo\\r\\nbar\\n\\nbaz\\n\";\nlet mut lines = text.lines();\n\nassert_eq!(Some(\"foo\"), lines.next());\nassert_eq!(Some(\"bar\"), lines.next());\nassert_eq!(Some(\"\"), lines.next());\nassert_eq!(Some(\"baz\"), lines.next());\n\nassert_eq!(None, lines.next());\n```\n\nThe final line ending isn't required:\n\n```\nlet text = \"foo\\nbar\\n\\r\\nbaz\";\nlet mut lines = text.lines();\n\nassert_eq!(Some(\"foo\"), lines.next());\nassert_eq!(Some(\"bar\"), lines.next());\nassert_eq!(Some(\"\"), lines.next());\nassert_eq!(Some(\"baz\"), lines.next());\n\nassert_eq!(None, lines.next());\n```","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Lines","id":"2:50277:2239","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11365:2650":{"id":"2:11365:2650","crate_id":2,"name":"char_indices","span":null,"visibility":"public","docs":"Returns an iterator over the [`char`]s of a string slice, and their\npositions.\n\nAs a string slice consists of valid UTF-8, we can iterate through a\nstring slice by [`char`]. This method returns an iterator of both\nthese [`char`]s, as well as their byte positions.\n\nThe iterator yields tuples. The position is first, the [`char`] is\nsecond.\n\n# Examples\n\nBasic usage:\n\n```\nlet word = \"goodbye\";\n\nlet count = word.char_indices().count();\nassert_eq!(7, count);\n\nlet mut char_indices = word.char_indices();\n\nassert_eq!(Some((0, 'g')), char_indices.next());\nassert_eq!(Some((1, 'o')), char_indices.next());\nassert_eq!(Some((2, 'o')), char_indices.next());\nassert_eq!(Some((3, 'd')), char_indices.next());\nassert_eq!(Some((4, 'b')), char_indices.next());\nassert_eq!(Some((5, 'y')), char_indices.next());\nassert_eq!(Some((6, 'e')), char_indices.next());\n\nassert_eq!(None, char_indices.next());\n```\n\nRemember, [`char`]s might not match your intuition about characters:\n\n[`char`]: prim@char\n\n```\nlet yes = \"yÃÜes\";\n\nlet mut char_indices = yes.char_indices();\n\nassert_eq!(Some((0, 'y')), char_indices.next()); // not (0, 'yÃÜ')\nassert_eq!(Some((1, '\\u{0306}')), char_indices.next());\n\n// note the 3 here - the last character took up two bytes\nassert_eq!(Some((3, 'e')), char_indices.next());\nassert_eq!(Some((4, 's')), char_indices.next());\n\nassert_eq!(None, char_indices.next());\n```","links":{"prim@char":"1:12300:407"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"CharIndices","id":"2:49999:2921","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"paths":{"1:8083:2479":{"crate_id":1,"path":["std","fs","FileTimes"],"kind":"struct"},"2:47140:2182":{"crate_id":2,"path":["core","iter","adapters","enumerate","Enumerate"],"kind":"struct"},"5:6926:3257":{"crate_id":5,"path":["alloc","ffi","c_str","NulError"],"kind":"struct"},"6:4804:39861":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_txtime"],"kind":"struct"},"2:11920:138":{"crate_id":2,"path":["core","alloc","global","GlobalAlloc"],"kind":"trait"},"12:274:59954":{"crate_id":12,"path":["hashbrown","raw","RawIterRange"],"kind":"struct"},"16:7825:3746":{"crate_id":16,"path":["gimli","read","unit","Attribute"],"kind":"struct"},"2:49578:3132":{"crate_id":2,"path":["core","slice","ascii","EscapeByte"],"kind":"struct"},"17:13518:50320":{"crate_id":17,"path":["object","pe","ImageFunctionEntry"],"kind":"struct"},"5:2742:57767":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Mut"],"kind":"struct"},"2:52727:2830":{"crate_id":2,"path":["core","core_arch","simd","u16x16"],"kind":"struct"},"16:2411:3857":{"crate_id":16,"path":["gimli","common","DebugArangesOffset"],"kind":"struct"},"1:1002:2305":{"crate_id":1,"path":["std","collections","hash","map","RawEntryBuilder"],"kind":"struct"},"6:1707:2535":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_un"],"kind":"struct"},"12:777:3444":{"crate_id":12,"path":["hashbrown","map","ConsumeAllOnDrop"],"kind":"struct"},"17:12278:49125":{"crate_id":17,"path":["object","macho","DataInCodeEntry"],"kind":"struct"},"5:6940:3016":{"crate_id":5,"path":["alloc","ffi","c_str","FromBytesWithNulErrorKind"],"kind":"enum"},"16:2657:3852":{"crate_id":16,"path":["gimli","common","RangeListsOffset"],"kind":"struct"},"6:4461:39825":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Shdr"],"kind":"struct"},"2:48368:81":{"crate_id":2,"path":["core","sync","atomic","AtomicI16"],"kind":"struct"},"2:8749:56376":{"crate_id":2,"path":["core","fmt","fmt","BorrowedPlaceholder"],"kind":"struct"},"5:4071:2226":{"crate_id":5,"path":["alloc","collections","vec_deque","write_iter_wrapping","Guard"],"kind":"struct"},"17:9539:3920":{"crate_id":17,"path":["object","read","elf","section","ElfSection"],"kind":"struct"},"2:29584:3005":{"crate_id":2,"path":["core","ptr","alignment","AlignmentEnum16"],"kind":"enum"},"2:8873:1902":{"crate_id":2,"path":["core","hash","BuildHasherDefault"],"kind":"struct"},"6:6554:40908":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user_fpregs_struct"],"kind":"struct"},"2:50546:2633":{"crate_id":2,"path":["core","str","pattern","CharPredicateSearcher"],"kind":"struct"},"16:3457:42429":{"crate_id":16,"path":["gimli","arch","X86_64"],"kind":"struct"},"16:4689:43056":{"crate_id":16,"path":["gimli","constants","DwDsc"],"kind":"struct"},"16:5949:3602":{"crate_id":16,"path":["gimli","read","cfi","CallFrameInstructionIter"],"kind":"struct"},"1:4585:2540":{"crate_id":1,"path":["std","os","unix","net","listener","UnixListener"],"kind":"struct"},"6:4437:39823":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Phdr"],"kind":"struct"},"2:1552:2226":{"crate_id":2,"path":["core","mem","maybe_uninit","write_slice_cloned","Guard"],"kind":"struct"},"17:9644:3917":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdat"],"kind":"struct"},"17:9897:44322":{"crate_id":17,"path":["object","read","macho","file","MachOComdatSectionIterator"],"kind":"struct"},"16:7511:3547":{"crate_id":16,"path":["gimli","read","UnitOffset"],"kind":"struct"},"1:10426:8104":{"crate_id":1,"path":["std","sys","unix","os","SplitPaths"],"kind":"struct"},"6:4683:39850":{"crate_id":6,"path":["libc","unix","linux_like","linux","in6_ifreq"],"kind":"struct"},"17:8796:3909":{"crate_id":17,"path":["object","read","util","StringTable"],"kind":"struct"},"16:7956:3682":{"crate_id":16,"path":["gimli","read","unit","DebugTypes"],"kind":"struct"},"1:12303:1016":{"crate_id":1,"path":["std","pointer"],"kind":"primitive"},"6:6998:41279":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","align","sem_t"],"kind":"struct"},"16:7166:3533":{"crate_id":16,"path":["gimli","read","op","EvaluationResult"],"kind":"enum"},"17:12955:49835":{"crate_id":17,"path":["object","pe","ImageRelocation"],"kind":"struct"},"2:6516:2178":{"crate_id":2,"path":["core","iter","adapters","zip","TrustedRandomAccessNoCoerce"],"kind":"trait"},"12:1840:1936":{"crate_id":12,"path":["hashbrown","set","Drain"],"kind":"struct"},"1:6079:2561":{"crate_id":1,"path":["std","sync","lazy_lock","LazyLock"],"kind":"struct"},"2:5380:2186":{"crate_id":2,"path":["core","iter","adapters","flatten","FlatMap"],"kind":"struct"},"6:5582:40474":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_pktinfo"],"kind":"struct"},"17:10546:44107":{"crate_id":17,"path":["object","read","FileKind"],"kind":"enum"},"17:9658:44213":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdatSectionIterator"],"kind":"struct"},"6:4690:972":{"crate_id":6,"path":["libc","unix","linux_like","linux","option"],"kind":"struct"},"1:3953:2284":{"crate_id":1,"path":["std","net","socket_addr","ToSocketAddrs"],"kind":"trait"},"16:7659:3667":{"crate_id":16,"path":["gimli","read","unit","AttributeValue"],"kind":"enum"},"17:12118:49053":{"crate_id":17,"path":["object","macho","EncryptionInfoCommand64"],"kind":"struct"},"17:9947:44323":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandVariant"],"kind":"enum"},"2:47306:2202":{"crate_id":2,"path":["core","iter","adapters","take","Take"],"kind":"struct"},"17:8981:44102":{"crate_id":17,"path":["object","read","any","ComdatIterator"],"kind":"struct"},"1:8066:2430":{"crate_id":1,"path":["std","fs","Metadata"],"kind":"struct"},"16:6517:3471":{"crate_id":16,"path":["gimli","read","line","LineSequence"],"kind":"struct"},"18:636:60922":{"crate_id":18,"path":["memchr","memmem","twoway","ApproximateByteSet"],"kind":"struct"},"17:420:3611":{"crate_id":17,"path":["object","read","any","Section"],"kind":"struct"},"16:4385:42968":{"crate_id":16,"path":["gimli","constants","DwAccess"],"kind":"struct"},"2:4191:203":{"crate_id":2,"path":["core","cell","RefCell"],"kind":"struct"},"16:6593:3733":{"crate_id":16,"path":["gimli","read","line","CompleteLineProgram"],"kind":"struct"},"5:7069:1937":{"crate_id":5,"path":["alloc","vec","drain_filter","DrainFilter"],"kind":"struct"},"2:21396:2995":{"crate_id":2,"path":["core","num","error","IntErrorKind"],"kind":"enum"},"7:79:41568":{"crate_id":7,"path":["unwind","libunwind","_Unwind_Action"],"kind":"enum"},"17:9700:3987":{"crate_id":17,"path":["object","read","elf","hash","GnuHashTable"],"kind":"struct"},"2:10128:2008":{"crate_id":2,"path":["core","slice","iter","GroupByMut"],"kind":"struct"},"17:8418:3970":{"crate_id":17,"path":["object","common","SectionFlags"],"kind":"enum"},"2:50793:120":{"crate_id":2,"path":["core","time","Duration"],"kind":"struct"},"2:53967:2838":{"crate_id":2,"path":["core","core_arch","simd","u64x8"],"kind":"struct"},"2:11657:57675":{"crate_id":2,"path":["core","future","join","MaybeDone"],"kind":"enum"},"18:736:4087":{"crate_id":18,"path":["memchr","memmem","SearcherKind"],"kind":"enum"},"17:13059:50192":{"crate_id":17,"path":["object","pe","ImageTlsDirectory32"],"kind":"struct"},"6:6293:36427":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","flock"],"kind":"struct"},"5:852:3217":{"crate_id":5,"path":["alloc","collections","binary_heap","Hole"],"kind":"struct"},"17:10350:3901":{"crate_id":17,"path":["object","read","pe","export","Export"],"kind":"struct"},"12:2080:2308":{"crate_id":12,"path":["hashbrown","set","VacantEntry"],"kind":"struct"},"2:57012:241":{"crate_id":2,"path":["core","core_simd","fmt","fmt","Wrapper"],"kind":"struct"},"6:1518:37438":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreq_source"],"kind":"struct"},"2:2484:74":{"crate_id":2,"path":["core","convert","AsMut"],"kind":"trait"},"2:46554:56427":{"crate_id":2,"path":["core","any","tags","MaybeSizedValue"],"kind":"struct"},"16:6903:3526":{"crate_id":16,"path":["gimli","read","op","Operation"],"kind":"enum"},"2:49852:1992":{"crate_id":2,"path":["core","slice","iter","ArrayWindows"],"kind":"struct"},"16:7567:3698":{"crate_id":16,"path":["gimli","read","unit","UnitType"],"kind":"enum"},"2:47168:56062":{"crate_id":2,"path":["core","iter","adapters","flatten","FlattenCompat"],"kind":"struct"},"18:624:60918":{"crate_id":18,"path":["memchr","memmem","twoway","SuffixOrdering"],"kind":"enum"},"16:2320:3542":{"crate_id":16,"path":["gimli","common","Register"],"kind":"struct"},"2:50191:2930":{"crate_id":2,"path":["core","str","iter","RMatchIndices"],"kind":"struct"},"1:7939:7098":{"crate_id":1,"path":["std","backtrace","RawFrame"],"kind":"enum"},"1:9347:2326":{"crate_id":1,"path":["std","sync","mpsc","TrySendError"],"kind":"enum"},"17:10845:4025":{"crate_id":17,"path":["object","read","Relocation"],"kind":"struct"},"6:4737:39855":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_setup"],"kind":"struct"},"1:8071:2477":{"crate_id":1,"path":["std","fs","ReadDir"],"kind":"struct"},"2:20297:2421":{"crate_id":2,"path":["core","core_simd","lane_count","LaneCount"],"kind":"struct"},"6:4152:39794":{"crate_id":6,"path":["libc","unix","linux_like","linux","signalfd_siginfo"],"kind":"struct"},"17:13572:50328":{"crate_id":17,"path":["object","pe","ImageArchitectureEntry"],"kind":"struct"},"1:11640:50960":{"crate_id":1,"path":["std","sys_common","wtf8","CodePoint"],"kind":"struct"},"6:5749:59352":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","sifields_sigchld"],"kind":"struct"},"1:11847:2529":{"crate_id":1,"path":["std","sys_common","net","UdpSocket"],"kind":"struct"},"5:686:109":{"crate_id":5,"path":["alloc","borrow","Cow"],"kind":"enum"},"2:51724:56310":{"crate_id":2,"path":["core","core_arch","simd","i8x2"],"kind":"struct"},"6:1600:37447":{"crate_id":6,"path":["libc","unix","linux_like","Dl_info"],"kind":"struct"},"17:12237:49122":{"crate_id":17,"path":["object","macho","FvmfileCommand"],"kind":"struct"},"2:47182:2185":{"crate_id":2,"path":["core","iter","adapters","fuse","Fuse"],"kind":"struct"},"18:590:56373":{"crate_id":18,"path":["memchr","memmem","twoway","TwoWay"],"kind":"struct"},"6:4592:39838":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_tp"],"kind":"struct"},"2:2763:2044":{"crate_id":2,"path":["core","ops","arith","Mul"],"kind":"trait"},"1:9464:51461":{"crate_id":1,"path":["std","sync","mpmc","select","Selected"],"kind":"enum"},"17:12884:49817":{"crate_id":17,"path":["object","pe","ImageAuxSymbolTokenDef"],"kind":"struct"},"1:7737:44092":{"crate_id":1,"path":["std","backtrace_rs","symbolize","Symbol"],"kind":"struct"},"2:5624:57616":{"crate_id":2,"path":["core","iter","adapters","flatten","TrustedConstSize"],"kind":"trait"},"2:54219:17888":{"crate_id":2,"path":["core","core_arch","x86","cpuid","CpuidResult"],"kind":"struct"},"6:7289:41467":{"crate_id":6,"path":["libc","unix","align","in6_addr"],"kind":"struct"},"17:9601:3924":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbol"],"kind":"struct"},"17:9488:3922":{"crate_id":17,"path":["object","read","elf","segment","ElfSegment"],"kind":"struct"},"2:11623:134":{"crate_id":2,"path":["core","future","future","Future"],"kind":"trait"},"18:652:60910":{"crate_id":18,"path":["memchr","memmem","x86","sse","Forward"],"kind":"struct"},"1:1604:1934":{"crate_id":1,"path":["std","collections","hash","set","Iter"],"kind":"struct"},"17:10075:44292":{"crate_id":17,"path":["object","read","macho","segment","MachOSegment"],"kind":"struct"},"16:7388:3693":{"crate_id":16,"path":["gimli","read","rnglists","RawRngListIter"],"kind":"struct"},"2:47159:2184":{"crate_id":2,"path":["core","iter","adapters","filter_map","FilterMap"],"kind":"struct"},"18:521:4090":{"crate_id":18,"path":["memchr","memmem","prefilter","Prefilter"],"kind":"enum"},"9:188:3356":{"crate_id":9,"path":["miniz_oxide","deflate","core","HuffmanOxide"],"kind":"struct"},"12:98:3456":{"crate_id":12,"path":["hashbrown","raw","Bucket"],"kind":"struct"},"2:3174:2719":{"crate_id":2,"path":["core","ops","try_trait","NeverShortCircuit"],"kind":"struct"},"2:46959:101":{"crate_id":2,"path":["core","ffi","c_str","CStr"],"kind":"struct"},"5:3472:2252":{"crate_id":5,"path":["alloc","collections","linked_list","Cursor"],"kind":"struct"},"1:4316:1956":{"crate_id":1,"path":["std","os","unix","fs","DirEntryExt2"],"kind":"trait"},"1:10756:2114":{"crate_id":1,"path":["std","sys","unix","process","process_common","CommandArgs"],"kind":"struct"},"1:8577:2579":{"crate_id":1,"path":["std","net","parser","AddrParseError"],"kind":"struct"},"6:1562:37443":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_ll"],"kind":"struct"},"1:12271:7102":{"crate_id":1,"path":["std","backtrace_rs","types","BytesOrWideString"],"kind":"enum"},"2:52001:2812":{"crate_id":2,"path":["core","core_arch","simd","i32x2"],"kind":"struct"},"17:13134:50202":{"crate_id":17,"path":["object","pe","ImageResourceDirectoryString"],"kind":"struct"},"1:7192:53759":{"crate_id":1,"path":["std","sys_common","lazy_box","LazyBox"],"kind":"struct"},"16:8014:3548":{"crate_id":16,"path":["gimli","read","value","Value"],"kind":"enum"},"13:108:60013":{"crate_id":13,"path":["std_detect","detect","arch","x86","Feature"],"kind":"enum"},"11:36:59953":{"crate_id":11,"path":["adler","algo","U32X4"],"kind":"struct"},"9:649:3333":{"crate_id":9,"path":["miniz_oxide","deflate","core","TDEFLStatus"],"kind":"enum"},"1:9574:2339":{"crate_id":1,"path":["std","time","SystemTimeError"],"kind":"struct"},"1:12142:53761":{"crate_id":1,"path":["std","backtrace_rs","symbolize","gimli","mmap","Mmap"],"kind":"struct"},"16:7452:194":{"crate_id":16,"path":["gimli","read","rnglists","Range"],"kind":"struct"},"2:50425:2624":{"crate_id":2,"path":["core","str","pattern","CharSearcher"],"kind":"struct"},"17:12361:49199":{"crate_id":17,"path":["object","macho","ScatteredRelocationInfo"],"kind":"struct"},"1:4425:2584":{"crate_id":1,"path":["std","os","unix","net","ancillary","ScmRights"],"kind":"struct"},"1:6640:51429":{"crate_id":1,"path":["std","sync","mutex","fmt","LockedPlaceholder"],"kind":"struct"},"17:12033:49047":{"crate_id":17,"path":["object","macho","PrebindCksumCommand"],"kind":"struct"},"17:13007:50185":{"crate_id":17,"path":["object","pe","ImageExportDirectory"],"kind":"struct"},"2:46926:3115":{"crate_id":2,"path":["core","char","CaseMappingIter"],"kind":"enum"},"5:3804:2009":{"crate_id":5,"path":["alloc","collections","vec_deque","iter_mut","IterMut"],"kind":"struct"},"2:46846:3117":{"crate_id":2,"path":["core","char","decode","DecodeUtf16Error"],"kind":"struct"},"17:12046:49048":{"crate_id":17,"path":["object","macho","UuidCommand"],"kind":"struct"},"1:8962:2369":{"crate_id":1,"path":["std","path","Ancestors"],"kind":"struct"},"1:7924:7095":{"crate_id":1,"path":["std","backtrace","BacktraceStatus"],"kind":"enum"},"1:524:55449":{"crate_id":1,"path":["std","thread","spawn_unchecked_","MaybeDangling"],"kind":"struct"},"16:2509:3851":{"crate_id":16,"path":["gimli","common","LocationListsOffset"],"kind":"struct"},"2:50754:2953":{"crate_id":2,"path":["core","str","IsWhitespace"],"kind":"struct"},"17:10476:44410":{"crate_id":17,"path":["object","read","pe","resource","ResourceDirectoryEntryData"],"kind":"enum"},"1:5064:2032":{"crate_id":1,"path":["std","os","fd","owned","OwnedFd"],"kind":"struct"},"1:8741:10438":{"crate_id":1,"path":["std","os","linux","raw","arch","stat"],"kind":"struct"},"1:6838:2517":{"crate_id":1,"path":["std","sync","remutex","ReentrantMutex"],"kind":"struct"},"2:51018:2429":{"crate_id":2,"path":["core","alloc","layout","LayoutError"],"kind":"struct"},"2:54078:17881":{"crate_id":2,"path":["core","core_arch","x86","__m256d"],"kind":"struct"},"1:996:2304":{"crate_id":1,"path":["std","collections","hash","map","RawVacantEntryMut"],"kind":"struct"},"17:12148:49055":{"crate_id":17,"path":["object","macho","BuildVersionCommand"],"kind":"struct"},"6:1738:37459":{"crate_id":6,"path":["libc","unix","linux_like","sigevent"],"kind":"struct"},"2:2928:1859":{"crate_id":2,"path":["core","ops","drop","Drop"],"kind":"trait"},"2:47099:1945":{"crate_id":2,"path":["core","iter","adapters","chain","Chain"],"kind":"struct"},"6:7249:39991":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_rwlock_t"],"kind":"struct"},"16:6829:3874":{"crate_id":16,"path":["gimli","read","lookup","LookupEntryIter"],"kind":"struct"},"1:7978:8106":{"crate_id":1,"path":["std","env","JoinPathsError"],"kind":"struct"},"17:12768:49705":{"crate_id":17,"path":["object","pe","AnonObjectHeader"],"kind":"struct"},"2:21370:3062":{"crate_id":2,"path":["core","num","error","TryFromIntError"],"kind":"struct"},"1:411:161":{"crate_id":1,"path":["std","thread","local","LocalKey"],"kind":"struct"},"16:5460:3575":{"crate_id":16,"path":["gimli","read","cfi","EhHdrTable"],"kind":"struct"},"2:2674:107":{"crate_id":2,"path":["core","marker","Copy"],"kind":"trait"},"2:7735:2347":{"crate_id":2,"path":["core","panic","unwind_safe","UnwindSafe"],"kind":"trait"},"2:2497:232":{"crate_id":2,"path":["core","convert","TryFrom"],"kind":"trait"},"6:4565:39835":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_vm"],"kind":"struct"},"6:4212:39799":{"crate_id":6,"path":["libc","unix","linux_like","linux","msginfo"],"kind":"struct"},"16:3689:42488":{"crate_id":16,"path":["gimli","constants","DwCfa"],"kind":"struct"},"1:960:2298":{"crate_id":1,"path":["std","collections","hash","map","ValuesMut"],"kind":"struct"},"1:4657:2541":{"crate_id":1,"path":["std","os","unix","net","stream","UnixStream"],"kind":"struct"},"2:50826:3043":{"crate_id":2,"path":["core","time","TryFromFloatSecsErrorKind"],"kind":"enum"},"16:6877:3525":{"crate_id":16,"path":["gimli","read","op","DieReference"],"kind":"enum"},"6:4300:39810":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_ramp_effect"],"kind":"struct"},"17:13100:50196":{"crate_id":17,"path":["object","pe","ImageDelayloadDescriptor"],"kind":"struct"},"5:5561:3206":{"crate_id":5,"path":["alloc","sync","ArcInner"],"kind":"struct"},"6:1695:37455":{"crate_id":6,"path":["libc","unix","linux_like","mmsghdr"],"kind":"struct"},"2:52803:2837":{"crate_id":2,"path":["core","core_arch","simd","u64x4"],"kind":"struct"},"16:5981:3604":{"crate_id":16,"path":["gimli","read","cfi","PointerEncodingParameters"],"kind":"struct"},"16:4297:42952":{"crate_id":16,"path":["gimli","constants","DwLle"],"kind":"struct"},"6:7237:39989":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_cond_t"],"kind":"struct"},"2:8546:1977":{"crate_id":2,"path":["core","fmt","Write"],"kind":"trait"},"1:678:7097":{"crate_id":1,"path":["std","backtrace","BacktraceFrame"],"kind":"struct"},"16:2683:3842":{"crate_id":16,"path":["gimli","common","DebugRngListsBase"],"kind":"struct"},"17:11515:48848":{"crate_id":17,"path":["object","macho","DyldSubCacheInfo"],"kind":"struct"},"2:50945:191":{"crate_id":2,"path":["core","task","poll","Poll"],"kind":"enum"},"2:49368:2364":{"crate_id":2,"path":["core","hash","sip","State"],"kind":"struct"},"1:7982:3249":{"crate_id":1,"path":["std","error","private","Internal"],"kind":"struct"},"17:9223:44153":{"crate_id":17,"path":["object","read","archive","ArchiveKind"],"kind":"enum"},"9:709:2364":{"crate_id":9,"path":["miniz_oxide","inflate","core","State"],"kind":"enum"},"2:46261:2037":{"crate_id":2,"path":["core","ops","control_flow","ControlFlow"],"kind":"enum"},"16:4574:43037":{"crate_id":16,"path":["gimli","constants","DwId"],"kind":"struct"},"1:1864:8104":{"crate_id":1,"path":["std","env","SplitPaths"],"kind":"struct"},"1:12313:719":{"crate_id":1,"path":["std","i16"],"kind":"primitive"},"1:11826:2522":{"crate_id":1,"path":["std","sys_common","net","TcpListener"],"kind":"struct"},"6:539:36552":{"crate_id":6,"path":["libc","unix","ipv6_mreq"],"kind":"struct"},"18:766:4089":{"crate_id":18,"path":["memchr","memmem","SearcherRevKind"],"kind":"enum"},"17:11087:44730":{"crate_id":17,"path":["object","elf","Sym32"],"kind":"struct"},"2:51794:2819":{"crate_id":2,"path":["core","core_arch","simd","i8x4"],"kind":"struct"},"2:2827:1915":{"crate_id":2,"path":["core","ops","bit","Shl"],"kind":"trait"},"2:20428:12320":{"crate_id":2,"path":["core","core_simd","masks","to_bitmask","ToBitMask"],"kind":"trait"},"2:2726:1858":{"crate_id":2,"path":["core","marker","Unpin"],"kind":"trait"},"17:13203:50231":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation64V2"],"kind":"struct"},"16:7942:3749":{"crate_id":16,"path":["gimli","read","unit","EntriesTreeIter"],"kind":"struct"},"17:11247:44825":{"crate_id":17,"path":["object","elf","Dyn64"],"kind":"struct"},"5:5525:69":{"crate_id":5,"path":["alloc","sync","Arc"],"kind":"struct"},"12:1003:2307":{"crate_id":12,"path":["hashbrown","map","OccupiedEntry"],"kind":"struct"},"2:11061:2622":{"crate_id":2,"path":["core","str","pattern","ReverseSearcher"],"kind":"trait"},"2:10205:56503":{"crate_id":2,"path":["core","slice","sort","CopyOnDrop"],"kind":"struct"},"2:10609:3091":{"crate_id":2,"path":["core","str","converts","from_utf8"],"kind":"function"},"6:5727:40486":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_exit"],"kind":"struct"},"2:52325:2813":{"crate_id":2,"path":["core","core_arch","simd","i32x4"],"kind":"struct"},"1:11655:50904":{"crate_id":1,"path":["std","sys_common","wtf8","Wtf8Buf"],"kind":"struct"},"1:10857:2256":{"crate_id":1,"path":["std","sys","unix","stdio","Stdin"],"kind":"struct"},"2:46347:2791":{"crate_id":2,"path":["core","ops","index_range","IndexRange"],"kind":"struct"},"17:12739:49660":{"crate_id":17,"path":["object","pe","ImageNtHeaders32"],"kind":"struct"},"9:896:3291":{"crate_id":9,"path":["miniz_oxide","MZStatus"],"kind":"enum"},"2:50127:2018":{"crate_id":2,"path":["core","str","iter","SplitN"],"kind":"struct"},"2:2681:2090":{"crate_id":2,"path":["core","marker","PhantomData"],"kind":"struct"},"2:52038:2797":{"crate_id":2,"path":["core","core_arch","simd","f32x2"],"kind":"struct"},"16:5596:3585":{"crate_id":16,"path":["gimli","read","cfi","Augmentation"],"kind":"struct"},"1:6409:55446":{"crate_id":1,"path":["std","sync","mpmc","waker","SyncWaker"],"kind":"struct"},"2:51001:157":{"crate_id":2,"path":["core","alloc","layout","Layout"],"kind":"struct"},"16:3854:42605":{"crate_id":16,"path":["gimli","constants","DwTag"],"kind":"struct"},"6:560:36555":{"crate_id":6,"path":["libc","unix","pollfd"],"kind":"struct"},"17:9577:3926":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbolTable"],"kind":"struct"},"1:4505:2531":{"crate_id":1,"path":["std","os","unix","net","datagram","UnixDatagram"],"kind":"struct"},"6:4635:39844":{"crate_id":6,"path":["libc","unix","linux_like","linux","seccomp_data"],"kind":"struct"},"2:54032:17877":{"crate_id":2,"path":["core","core_arch","x86","__m128"],"kind":"struct"},"15:214:3479":{"crate_id":15,"path":["addr2line","RangeAttributes"],"kind":"struct"},"1:12324:1090":{"crate_id":1,"path":["std","reference"],"kind":"primitive"},"1:7945:1949":{"crate_id":1,"path":["std","collections","hash","map","RandomState"],"kind":"struct"},"12:1866:1940":{"crate_id":12,"path":["hashbrown","set","SymmetricDifference"],"kind":"struct"},"12:1859:1939":{"crate_id":12,"path":["hashbrown","set","Difference"],"kind":"struct"},"2:49052:70":{"crate_id":2,"path":["core","fmt","rt","v1","Argument"],"kind":"struct"},"2:51878:2828":{"crate_id":2,"path":["core","core_arch","simd","u16x4"],"kind":"struct"},"2:48815:2073":{"crate_id":2,"path":["core","fmt","num","UpperHex"],"kind":"struct"},"1:9485:53098":{"crate_id":1,"path":["std","sync","mpmc","utils","CachePadded"],"kind":"struct"},"6:1654:37451":{"crate_id":6,"path":["libc","unix","linux_like","in6_rtmsg"],"kind":"struct"},"16:0:1726":{"crate_id":16,"path":["gimli"],"kind":"module"},"2:54157:17886":{"crate_id":2,"path":["core","core_arch","x86","__m256bh"],"kind":"struct"},"1:7748:51503":{"crate_id":1,"path":["std","backtrace_rs","symbolize","SymbolName"],"kind":"struct"},"2:52417:2802":{"crate_id":2,"path":["core","core_arch","simd","f64x4"],"kind":"struct"},"5:2254:3246":{"crate_id":5,"path":["alloc","collections","btree","node","NodeRef"],"kind":"struct"},"16:7469:3679":{"crate_id":16,"path":["gimli","read","str","DebugStr"],"kind":"struct"},"2:47090:2177":{"crate_id":2,"path":["core","iter","adapters","by_ref_sized","ByRefSized"],"kind":"struct"},"2:46806:2704":{"crate_id":2,"path":["core","char","convert","CharErrorKind"],"kind":"enum"},"1:1967:2473":{"crate_id":1,"path":["std","error","Indented"],"kind":"struct"},"17:9339:4040":{"crate_id":17,"path":["object","read","coff","section","CoffSectionIterator"],"kind":"struct"},"17:12337:4025":{"crate_id":17,"path":["object","macho","Relocation"],"kind":"struct"},"1:8076:1969":{"crate_id":1,"path":["std","fs","OpenOptions"],"kind":"struct"},"1:353:2432":{"crate_id":1,"path":["std","thread","scoped","Scope"],"kind":"struct"},"1:12310:628":{"crate_id":1,"path":["std","f32"],"kind":"primitive"},"6:6448:40901":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user_regs_struct"],"kind":"struct"},"17:9350:4041":{"crate_id":17,"path":["object","read","coff","section","CoffSection"],"kind":"struct"},"2:50440:2627":{"crate_id":2,"path":["core","str","pattern","MultiCharEqSearcher"],"kind":"struct"},"17:10445:4025":{"crate_id":17,"path":["object","read","pe","relocation","Relocation"],"kind":"struct"},"1:954:1937":{"crate_id":1,"path":["std","collections","hash","map","DrainFilter"],"kind":"struct"},"6:4417:39821":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Sym"],"kind":"struct"},"2:51848:2840":{"crate_id":2,"path":["core","core_arch","simd","u8x8"],"kind":"struct"},"1:359:2433":{"crate_id":1,"path":["std","thread","scoped","ScopedJoinHandle"],"kind":"struct"},"2:4195:2865":{"crate_id":2,"path":["core","cell","BorrowError"],"kind":"struct"},"16:6171:3715":{"crate_id":16,"path":["gimli","read","abbrev","AttributeSpecification"],"kind":"struct"},"17:8752:2237":{"crate_id":17,"path":["object","read","util","Bytes"],"kind":"struct"},"1:8625:2287":{"crate_id":1,"path":["std","net","socket_addr","SocketAddrV6"],"kind":"struct"},"2:51770:2827":{"crate_id":2,"path":["core","core_arch","simd","u16x2"],"kind":"struct"},"12:834:2303":{"crate_id":12,"path":["hashbrown","map","RawOccupiedEntryMut"],"kind":"struct"},"1:8650:2525":{"crate_id":1,"path":["std","net","Shutdown"],"kind":"enum"},"2:51704:56399":{"crate_id":2,"path":["core","core_arch","simd","u8x2"],"kind":"struct"},"1:3154:2507":{"crate_id":1,"path":["std","io","stdio","StdinRaw"],"kind":"struct"},"1:4972:2148":{"crate_id":1,"path":["std","os","linux","process","CommandExt"],"kind":"trait"},"17:247:60448":{"crate_id":17,"path":["object","read","util","DebugLen"],"kind":"struct"},"5:1226:2307":{"crate_id":5,"path":["alloc","collections","btree","map","entry","OccupiedEntry"],"kind":"struct"},"16:6816:3873":{"crate_id":16,"path":["gimli","read","lookup","DebugLookup"],"kind":"struct"},"6:7266:39993":{"crate_id":6,"path":["libc","unix","linux_like","linux","canfd_frame"],"kind":"struct"},"2:52649:2842":{"crate_id":2,"path":["core","core_arch","simd","u8x32"],"kind":"struct"},"17:1962:3986":{"crate_id":17,"path":["object","read","elf","relocation","ElfSectionRelocationIterator"],"kind":"struct"},"16:6790:3737":{"crate_id":16,"path":["gimli","read","loclists","LocationListEntry"],"kind":"struct"},"2:4317:2872":{"crate_id":2,"path":["core","cell","BorrowRefMut"],"kind":"struct"},"1:3422:2124":{"crate_id":1,"path":["std","io","IoSliceMut"],"kind":"struct"},"17:11054:44722":{"crate_id":17,"path":["object","elf","CompressionHeader32"],"kind":"struct"},"2:50340:2939":{"crate_id":2,"path":["core","str","iter","EscapeUnicode"],"kind":"struct"},"17:9791:44217":{"crate_id":17,"path":["object","read","elf","version","VernauxIterator"],"kind":"struct"},"6:5587:40475":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_mmap_req"],"kind":"struct"},"2:49097:126":{"crate_id":2,"path":["core","fmt","Error"],"kind":"struct"},"2:50762:2952":{"crate_id":2,"path":["core","str","IsNotEmpty"],"kind":"struct"},"2:2235:98":{"crate_id":2,"path":["core","borrow","BorrowMut"],"kind":"trait"},"1:8590:1898":{"crate_id":1,"path":["std","net","socket_addr","SocketAddr"],"kind":"enum"},"1:8737:2147":{"crate_id":1,"path":["std","os","linux","process","PidFd"],"kind":"struct"},"2:39348:2168":{"crate_id":2,"path":["core","marker","PhantomPinned"],"kind":"struct"},"5:1386:2296":{"crate_id":5,"path":["alloc","collections","btree","map","Keys"],"kind":"struct"},"17:9293:4042":{"crate_id":17,"path":["object","read","coff","file","CoffFile"],"kind":"struct"},"2:20026:57548":{"crate_id":2,"path":["core","core_simd","swizzle","interleave","Lo"],"kind":"struct"},"1:11585:55454":{"crate_id":1,"path":["std","sys_common","once","futex","CompletionGuard"],"kind":"struct"},"1:12323:1500":{"crate_id":1,"path":["std","usize"],"kind":"primitive"},"1:12321:1443":{"crate_id":1,"path":["std","u128"],"kind":"primitive"},"6:4716:39853":{"crate_id":6,"path":["libc","unix","linux_like","linux","dirent64"],"kind":"struct"},"6:4496:39827":{"crate_id":6,"path":["libc","unix","linux_like","linux","mntent"],"kind":"struct"},"16:5184:42424":{"crate_id":16,"path":["gimli","endianity","RunTimeEndian"],"kind":"enum"},"2:4:982":{"crate_id":2,"path":["core","panic"],"kind":"macro"},"16:5541:3582":{"crate_id":16,"path":["gimli","read","cfi","CfiEntriesIter"],"kind":"struct"},"17:487:44091":{"crate_id":17,"path":["object","read","any","Comdat"],"kind":"struct"},"17:13536:50322":{"crate_id":17,"path":["object","pe","ImageSeparateDebugHeader"],"kind":"struct"},"6:4653:39846":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlmsgerr"],"kind":"struct"},"5:4626:2226":{"crate_id":5,"path":["alloc","rc","from_iter_exact","Guard"],"kind":"struct"},"2:49085:108":{"crate_id":2,"path":["core","fmt","rt","v1","Count"],"kind":"enum"},"17:10182:44295":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbol"],"kind":"struct"},"6:4239:39802":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_id"],"kind":"struct"},"2:21678:171":{"crate_id":2,"path":["core","num","nonzero","NonZeroU16"],"kind":"struct"},"12:387:59961":{"crate_id":12,"path":["hashbrown","raw","RawIterHash"],"kind":"struct"},"2:2285:184":{"crate_id":2,"path":["core","cmp","PartialEq"],"kind":"trait"},"5:1077:3241":{"crate_id":5,"path":["alloc","collections","btree","dedup_sorted_iter","DedupSortedIter"],"kind":"struct"},"1:9213:182":{"crate_id":1,"path":["std","process","Output"],"kind":"struct"},"2:2673:221":{"crate_id":2,"path":["core","marker","StructuralEq"],"kind":"trait"},"2:50227:2932":{"crate_id":2,"path":["core","str","iter","Matches"],"kind":"struct"},"1:8106:128":{"crate_id":1,"path":["std","fs","FileType"],"kind":"struct"},"2:46866:3111":{"crate_id":2,"path":["core","char","EscapeUnicodeState"],"kind":"enum"},"1:8379:2123":{"crate_id":1,"path":["std","io","IoSlice"],"kind":"struct"},"17:11909:49038":{"crate_id":17,"path":["object","macho","DysymtabCommand"],"kind":"struct"},"2:2739:2169":{"crate_id":2,"path":["core","marker","Tuple"],"kind":"trait"},"5:5976:1936":{"crate_id":5,"path":["alloc","vec","drain","Drain"],"kind":"struct"},"2:22407:2610":{"crate_id":2,"path":["core","num","saturating","Saturating"],"kind":"struct"},"1:9253:2118":{"crate_id":1,"path":["std","process","ExitCode"],"kind":"struct"},"2:50403:2620":{"crate_id":2,"path":["core","str","pattern","SearchStep"],"kind":"enum"},"16:2993:3850":{"crate_id":16,"path":["gimli","common","DwoId"],"kind":"struct"},"16:6463:3730":{"crate_id":16,"path":["gimli","read","line","LineInstructions"],"kind":"struct"},"1:6393:2962":{"crate_id":1,"path":["std","sync","mpmc","waker","Waker"],"kind":"struct"},"17:10332:4065":{"crate_id":17,"path":["object","read","pe","export","ExportTarget"],"kind":"enum"},"16:7557:3673":{"crate_id":16,"path":["gimli","read","unit","DebugInfoUnitHeadersIter"],"kind":"struct"},"2:8556:130":{"crate_id":2,"path":["core","fmt","Formatter"],"kind":"struct"},"17:11259:44934":{"crate_id":17,"path":["object","elf","Versym"],"kind":"struct"},"6:1532:37440":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_in"],"kind":"struct"},"2:38142:1875":{"crate_id":2,"path":["core","cmp","Reverse"],"kind":"struct"},"16:2341:3856":{"crate_id":16,"path":["gimli","common","DebugAbbrevOffset"],"kind":"struct"},"12:725:2296":{"crate_id":12,"path":["hashbrown","map","Keys"],"kind":"struct"},"2:29333:3057":{"crate_id":2,"path":["core","num","FpCategory"],"kind":"enum"},"17:12836:49750":{"crate_id":17,"path":["object","pe","ImageSymbol"],"kind":"struct"},"17:9857:3973":{"crate_id":17,"path":["object","read","macho","file","MachOFile"],"kind":"struct"},"1:12316:717":{"crate_id":1,"path":["std","i128"],"kind":"primitive"},"17:8881:60639":{"crate_id":17,"path":["object","read","any","SegmentIteratorInternal"],"kind":"enum"},"17:3249:3974":{"crate_id":17,"path":["object","read","macho","relocation","MachORelocationIterator"],"kind":"struct"},"6:4534:39831":{"crate_id":6,"path":["libc","unix","linux_like","linux","in6_pktinfo"],"kind":"struct"},"1:11089:51149":{"crate_id":1,"path":["std","sys","unix","fs","FileAttr"],"kind":"struct"},"14:31:42346":{"crate_id":14,"path":["rustc_demangle","v0","Demangle"],"kind":"struct"},"2:49034:67":{"crate_id":2,"path":["core","fmt","Alignment"],"kind":"enum"},"2:29748:3007":{"crate_id":2,"path":["core","ptr","alignment","AlignmentEnum64"],"kind":"enum"},"2:48123:2009":{"crate_id":2,"path":["core","option","IterMut"],"kind":"struct"},"2:8607:2072":{"crate_id":2,"path":["core","fmt","LowerHex"],"kind":"trait"},"16:5219:42421":{"crate_id":16,"path":["gimli","endianity","BigEndian"],"kind":"struct"},"2:51900:2832":{"crate_id":2,"path":["core","core_arch","simd","u32x2"],"kind":"struct"},"2:3616:1935":{"crate_id":2,"path":["core","array","iter","IntoIter"],"kind":"struct"},"1:1626:1939":{"crate_id":1,"path":["std","collections","hash","set","Difference"],"kind":"struct"},"2:9138:218":{"crate_id":2,"path":["core","slice","index","SliceIndex"],"kind":"trait"},"1:1114:2308":{"crate_id":1,"path":["std","collections","hash","map","VacantEntry"],"kind":"struct"},"2:21245:2754":{"crate_id":2,"path":["core","num","dec2flt","ParseFloatError"],"kind":"struct"},"1:11954:3483":{"crate_id":1,"path":["std","backtrace_rs","backtrace","libunwind","Frame"],"kind":"enum"},"2:21168:56093":{"crate_id":2,"path":["core","num","dec2flt","common","AsciiStr"],"kind":"struct"},"1:7539:53449":{"crate_id":1,"path":["std","panicking","Hook"],"kind":"enum"},"2:21272:56403":{"crate_id":2,"path":["core","num","diy_float","Fp"],"kind":"struct"},"8:0:1719":{"crate_id":8,"path":["cfg_if"],"kind":"module"},"12:119:3460":{"crate_id":12,"path":["hashbrown","raw","RawTable"],"kind":"struct"},"1:8222:2389":{"crate_id":1,"path":["std","io","error","Custom"],"kind":"struct"},"1:973:2301":{"crate_id":1,"path":["std","collections","hash","map","RawEntryBuilderMut"],"kind":"struct"},"1:2869:2391":{"crate_id":1,"path":["std","io","error","repr_bitpacked","Repr"],"kind":"struct"},"2:51979:2808":{"crate_id":2,"path":["core","core_arch","simd","i16x4"],"kind":"struct"},"12:1555:3467":{"crate_id":12,"path":["hashbrown","rustc_entry","RustcVacantEntry"],"kind":"struct"},"17:10854:3985":{"crate_id":17,"path":["object","read","CompressionFormat"],"kind":"enum"},"16:4749:43068":{"crate_id":16,"path":["gimli","constants","DwDefaulted"],"kind":"struct"},"6:575:36557":{"crate_id":6,"path":["libc","unix","linger"],"kind":"struct"},"1:918:2296":{"crate_id":1,"path":["std","collections","hash","map","Keys"],"kind":"struct"},"2:10595:3130":{"crate_id":2,"path":["core","slice","GetManyMutError"],"kind":"struct"},"1:5646:2109":{"crate_id":1,"path":["std","process","Child"],"kind":"struct"},"2:50774:3041":{"crate_id":2,"path":["core","time","Nanoseconds"],"kind":"struct"},"6:1574:37444":{"crate_id":6,"path":["libc","unix","linux_like","fd_set"],"kind":"struct"},"16:7288:3740":{"crate_id":16,"path":["gimli","read","pubnames","PubNamesEntryIter"],"kind":"struct"},"12:1138:2309":{"crate_id":12,"path":["hashbrown","map","OccupiedError"],"kind":"struct"},"16:4413:42972":{"crate_id":16,"path":["gimli","constants","DwVis"],"kind":"struct"},"16:6567:3688":{"crate_id":16,"path":["gimli","read","line","IncompleteLineProgram"],"kind":"struct"},"2:21334:56387":{"crate_id":2,"path":["core","num","fmt","Part"],"kind":"enum"},"14:0:1724":{"crate_id":14,"path":["rustc_demangle"],"kind":"module"},"2:54127:17884":{"crate_id":2,"path":["core","core_arch","x86","__m512d"],"kind":"struct"},"2:2564:114":{"crate_id":2,"path":["core","default","Default"],"kind":"trait"},"16:6316:3697":{"crate_id":16,"path":["gimli","read","index","UnitIndexSectionIterator"],"kind":"struct"},"16:2389:3539":{"crate_id":16,"path":["gimli","common","DebugAddrIndex"],"kind":"struct"},"6:6415:40898":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_fpxreg"],"kind":"struct"},"17:9183:44106":{"crate_id":17,"path":["object","read","any","SectionRelocationIterator"],"kind":"struct"},"18:614:60921":{"crate_id":18,"path":["memchr","memmem","twoway","SuffixKind"],"kind":"enum"},"2:7736:2346":{"crate_id":2,"path":["core","panic","unwind_safe","RefUnwindSafe"],"kind":"trait"},"16:5163:3609":{"crate_id":16,"path":["gimli","constants","DwEhPe"],"kind":"struct"},"1:2257:2234":{"crate_id":1,"path":["std","fs","read_to_string"],"kind":"function"},"9:382:3284":{"crate_id":9,"path":["miniz_oxide","inflate","core","DecompressorOxide"],"kind":"struct"},"2:46561:2085":{"crate_id":2,"path":["core","any","tags","Ref"],"kind":"struct"},"12:751:1936":{"crate_id":12,"path":["hashbrown","map","Drain"],"kind":"struct"},"1:5695:2112":{"crate_id":1,"path":["std","process","ChildStderr"],"kind":"struct"},"1:8435:2005":{"crate_id":1,"path":["std","io","Split"],"kind":"struct"},"17:8510:42421":{"crate_id":17,"path":["object","endian","BigEndian"],"kind":"struct"},"2:7841:2618":{"crate_id":2,"path":["core","panicking","assert_matches_failed","Pattern"],"kind":"struct"},"2:48258:1935":{"crate_id":2,"path":["core","result","IntoIter"],"kind":"struct"},"2:25217:2686":{"crate_id":2,"path":["core","num","wrapping","Wrapping"],"kind":"struct"},"2:3980:103":{"crate_id":2,"path":["core","asserting","Capture"],"kind":"struct"},"17:10875:3968":{"crate_id":17,"path":["object","read","CompressedFileRange"],"kind":"struct"},"1:9526:214":{"crate_id":1,"path":["std","sync","rwlock","RwLockReadGuard"],"kind":"struct"},"17:12022:49046":{"crate_id":17,"path":["object","macho","TwolevelHint"],"kind":"struct"},"2:2833:1918":{"crate_id":2,"path":["core","ops","bit","Shr"],"kind":"trait"},"17:11368:44964":{"crate_id":17,"path":["object","elf","GnuHashHeader"],"kind":"struct"},"2:11894:201":{"crate_id":2,"path":["core","task","ready","Ready"],"kind":"struct"},"17:8911:60738":{"crate_id":17,"path":["object","read","any","SegmentInternal"],"kind":"enum"},"2:9128:1899":{"crate_id":2,"path":["core","slice","index","private_slice_index","Sealed"],"kind":"trait"},"1:8864:2364":{"crate_id":1,"path":["std","path","State"],"kind":"enum"},"17:12638:49653":{"crate_id":17,"path":["object","pe","ImageOptionalHeader32"],"kind":"struct"},"1:8887:2365":{"crate_id":1,"path":["std","path","PrefixComponent"],"kind":"struct"},"6:4139:39793":{"crate_id":6,"path":["libc","unix","linux_like","linux","dqblk"],"kind":"struct"},"6:5720:40485":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_entry"],"kind":"struct"},"6:4605:39840":{"crate_id":6,"path":["libc","unix","linux_like","linux","can_filter"],"kind":"struct"},"6:4816:39863":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_can"],"kind":"struct"},"2:47200:2188":{"crate_id":2,"path":["core","iter","adapters","intersperse","Intersperse"],"kind":"struct"},"6:6500:40903":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","mcontext_t"],"kind":"struct"},"1:1637:1941":{"crate_id":1,"path":["std","collections","hash","set","Union"],"kind":"struct"},"5:781:3216":{"crate_id":5,"path":["alloc","collections","binary_heap","PeekMut"],"kind":"struct"},"16:7267:3738":{"crate_id":16,"path":["gimli","read","pubnames","PubNamesEntry"],"kind":"struct"},"5:1445:3238":{"crate_id":5,"path":["alloc","collections","btree","map","RangeMut"],"kind":"struct"},"5:3763:59106":{"crate_id":5,"path":["alloc","collections","vec_deque","drain","drop","DropGuard"],"kind":"struct"},"2:53009:2814":{"crate_id":2,"path":["core","core_arch","simd","i32x8"],"kind":"struct"},"2:2904:115":{"crate_id":2,"path":["core","ops","deref","Deref"],"kind":"trait"},"1:5880:202":{"crate_id":1,"path":["std","sync","mpsc","Receiver"],"kind":"struct"},"2:20241:2861":{"crate_id":2,"path":["core","core_simd","elements","uint","SimdUint"],"kind":"trait"},"2:52149:2829":{"crate_id":2,"path":["core","core_arch","simd","u16x8"],"kind":"struct"},"6:1714:37457":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_storage"],"kind":"struct"},"6:6524:40905":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","shmid_ds"],"kind":"struct"},"2:29508:2858":{"crate_id":2,"path":["core","mem","manually_drop","ManuallyDrop"],"kind":"struct"},"2:20454:2795":{"crate_id":2,"path":["core","core_simd","masks","MaskElement"],"kind":"trait"},"2:20028:57552":{"crate_id":2,"path":["core","core_simd","swizzle","interleave","Hi"],"kind":"struct"},"2:9568:2018":{"crate_id":2,"path":["core","slice","iter","SplitN"],"kind":"struct"},"17:12874:49755":{"crate_id":17,"path":["object","pe","ImageSymbolExBytes"],"kind":"struct"},"2:46362:196":{"crate_id":2,"path":["core","ops","range","RangeFull"],"kind":"struct"},"16:6472:3472":{"crate_id":16,"path":["gimli","read","line","LineRow"],"kind":"struct"},"17:11034:44662":{"crate_id":17,"path":["object","elf","SectionHeader64"],"kind":"struct"},"2:50738:2945":{"crate_id":2,"path":["core","str","LinesAnyMap"],"kind":"struct"},"5:2737:57782":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Dying"],"kind":"enum"},"18:755:4088":{"crate_id":18,"path":["memchr","memmem","SearcherRev"],"kind":"struct"},"16:4786:43081":{"crate_id":16,"path":["gimli","constants","DwLns"],"kind":"struct"},"17:11828:49033":{"crate_id":17,"path":["object","macho","DylinkerCommand"],"kind":"struct"},"1:2248:127":{"crate_id":1,"path":["std","fs","File"],"kind":"struct"},"6:4191:39797":{"crate_id":6,"path":["libc","unix","linux_like","linux","packet_mreq"],"kind":"struct"},"5:2954:1939":{"crate_id":5,"path":["alloc","collections","btree","set","Difference"],"kind":"struct"},"2:46779:1893":{"crate_id":2,"path":["core","ascii","EscapeDefault"],"kind":"struct"},"2:49981:2036":{"crate_id":2,"path":["core","str","error","ParseBoolError"],"kind":"struct"},"17:13557:50323":{"crate_id":17,"path":["object","pe","NonPagedDebugInfo"],"kind":"struct"},"17:11536:44324":{"crate_id":17,"path":["object","macho","FatArch32"],"kind":"struct"},"6:4427:39822":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Sym"],"kind":"struct"},"2:56973:241":{"crate_id":2,"path":["core","core_simd","fmt","fmt","Wrapper"],"kind":"struct"},"17:11734:49026":{"crate_id":17,"path":["object","macho","Dylib"],"kind":"struct"},"5:6022:59106":{"crate_id":5,"path":["alloc","vec","drain","drop","DropGuard"],"kind":"struct"},"2:11041:2619":{"crate_id":2,"path":["core","str","pattern"],"kind":"module"},"2:11112:2626":{"crate_id":2,"path":["core","str","pattern","MultiCharEqPattern"],"kind":"struct"},"1:6496:2320":{"crate_id":1,"path":["std","sync","mpmc","Sender"],"kind":"struct"},"16:5447:3574":{"crate_id":16,"path":["gimli","read","cfi","EhHdrTableIter"],"kind":"struct"},"6:4317:39812":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_periodic_effect"],"kind":"struct"},"2:49067:67":{"crate_id":2,"path":["core","fmt","rt","v1","Alignment"],"kind":"enum"},"16:7396:3745":{"crate_id":16,"path":["gimli","read","rnglists","RawRngListEntry"],"kind":"enum"},"2:49967:3026":{"crate_id":2,"path":["core","str","error","Utf8Error"],"kind":"struct"},"17:10752:3903":{"crate_id":17,"path":["object","read","Import"],"kind":"struct"},"1:10495:2385":{"crate_id":1,"path":["std","sys","unix","os_str","Slice"],"kind":"struct"},"1:9407:51441":{"crate_id":1,"path":["std","sync","mpmc","error","SendTimeoutError"],"kind":"enum"},"5:4747:3194":{"crate_id":5,"path":["alloc","rc","Weak"],"kind":"struct"},"18:113:50715":{"crate_id":18,"path":["memchr","memchr","iter","Memchr3"],"kind":"struct"},"16:4217:42920":{"crate_id":16,"path":["gimli","constants","DwForm"],"kind":"struct"},"2:53429:2843":{"crate_id":2,"path":["core","core_arch","simd","u8x64"],"kind":"struct"},"9:800:41718":{"crate_id":9,"path":["miniz_oxide","inflate","core","LocalVars"],"kind":"struct"},"17:13039:50188":{"crate_id":17,"path":["object","pe","ImageThunkData32"],"kind":"struct"},"6:1505:37436":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreq"],"kind":"struct"},"1:8131:2501":{"crate_id":1,"path":["std","io","buffered","linewritershim","LineWriterShim"],"kind":"struct"},"1:2026:181":{"crate_id":1,"path":["std","ffi","os_str","OsString"],"kind":"struct"},"17:8774:3900":{"crate_id":17,"path":["object","read","util","ByteString"],"kind":"struct"},"17:12550:49597":{"crate_id":17,"path":["object","pe","ImageVxdHeader"],"kind":"struct"},"6:6538:40906":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","seccomp_notif_sizes"],"kind":"struct"},"2:48292:84":{"crate_id":2,"path":["core","sync","atomic","AtomicI8"],"kind":"struct"},"17:13279:50240":{"crate_id":17,"path":["object","pe","ImageLoadConfigDirectory64"],"kind":"struct"},"0:0:1621":{"crate_id":0,"path":["winapi"],"kind":"module"},"2:52056:56420":{"crate_id":2,"path":["core","core_arch","simd","f64x1"],"kind":"struct"},"17:9328:4039":{"crate_id":17,"path":["object","read","coff","section","CoffSegment"],"kind":"struct"},"17:13404:50282":{"crate_id":17,"path":["object","pe","ImageRuntimeFunctionEntry"],"kind":"struct"},"6:1541:37441":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_in6"],"kind":"struct"},"16:2465:3862":{"crate_id":16,"path":["gimli","common","DebugLineOffset"],"kind":"struct"},"2:8613:2074":{"crate_id":2,"path":["core","fmt","LowerExp"],"kind":"trait"},"2:49891:1991":{"crate_id":2,"path":["core","slice","iter","ArrayChunksMut"],"kind":"struct"},"5:5633:2226":{"crate_id":5,"path":["alloc","sync","from_iter_exact","Guard"],"kind":"struct"},"18:644:60910":{"crate_id":18,"path":["memchr","memmem","x86","avx","nostd","Forward"],"kind":"struct"},"6:5876:40519":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","semid_ds"],"kind":"struct"},"17:10062:44294":{"crate_id":17,"path":["object","read","macho","segment","MachOSegmentIterator"],"kind":"struct"},"1:8946:2367":{"crate_id":1,"path":["std","path","Components"],"kind":"struct"},"6:4551:39833":{"crate_id":6,"path":["libc","unix","linux_like","linux","inotify_event"],"kind":"struct"},"2:7102:1863":{"crate_id":2,"path":["core","iter","traits","exact_size","ExactSizeIterator"],"kind":"trait"},"17:12748:49661":{"crate_id":17,"path":["object","pe","ImageRomHeaders"],"kind":"struct"},"17:11300:44945":{"crate_id":17,"path":["object","elf","Verneed"],"kind":"struct"},"1:11921:53100":{"crate_id":1,"path":["std","personality","dwarf","eh","EHContext"],"kind":"struct"},"1:3314:2245":{"crate_id":1,"path":["std","io","stdio","IsTerminal"],"kind":"trait"},"2:14:1837":{"crate_id":2,"path":["core","write"],"kind":"macro"},"1:12307:1429":{"crate_id":1,"path":["std","tuple"],"kind":"primitive"},"1:4433:2585":{"crate_id":1,"path":["std","os","unix","net","ancillary","ScmCredentials"],"kind":"struct"},"6:4475:39826":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Shdr"],"kind":"struct"},"2:49993:2920":{"crate_id":2,"path":["core","str","iter","Chars"],"kind":"struct"},"6:1722:37458":{"crate_id":6,"path":["libc","unix","linux_like","utsname"],"kind":"struct"},"2:46822:2706":{"crate_id":2,"path":["core","char","convert","CharTryFromError"],"kind":"struct"},"16:6109:3565":{"crate_id":16,"path":["gimli","read","reader","ReaderOffsetId"],"kind":"struct"},"6:4224:39800":{"crate_id":6,"path":["libc","unix","linux_like","linux","sembuf"],"kind":"struct"},"17:13231:50239":{"crate_id":17,"path":["object","pe","ImageLoadConfigDirectory32"],"kind":"struct"},"6:7279:41466":{"crate_id":6,"path":["libc","unix","linux_like","linux","non_exhaustive","open_how"],"kind":"struct"},"2:54180:17887":{"crate_id":2,"path":["core","core_arch","x86","__m512bh"],"kind":"struct"},"1:8814:2354":{"crate_id":1,"path":["std","path","Prefix"],"kind":"enum"},"2:8160:79":{"crate_id":2,"path":["core","sync","atomic","AtomicBool"],"kind":"struct"},"16:3010:3849":{"crate_id":16,"path":["gimli","common","DwarfFileType"],"kind":"enum"},"2:52249:2821":{"crate_id":2,"path":["core","core_arch","simd","i8x16"],"kind":"struct"},"2:46836:3116":{"crate_id":2,"path":["core","char","decode","DecodeUtf16"],"kind":"struct"},"2:52347:2816":{"crate_id":2,"path":["core","core_arch","simd","i64x2"],"kind":"struct"},"18:481:4091":{"crate_id":18,"path":["memchr","cow","CowBytes"],"kind":"struct"},"17:13478:50295":{"crate_id":17,"path":["object","pe","ImageDebugDirectory"],"kind":"struct"},"2:3956:2787":{"crate_id":2,"path":["core","asserting","TryCaptureWithoutDebug"],"kind":"struct"},"12:1065:3453":{"crate_id":12,"path":["hashbrown","map","KeyOrRef"],"kind":"enum"},"16:7357:3691":{"crate_id":16,"path":["gimli","read","rnglists","RangeLists"],"kind":"struct"},"2:4346:2088":{"crate_id":2,"path":["core","cell","UnsafeCell"],"kind":"struct"},"6:4115:39791":{"crate_id":6,"path":["libc","unix","linux_like","linux","passwd"],"kind":"struct"},"2:47551:2264":{"crate_id":2,"path":["core","iter","sources","repeat","Repeat"],"kind":"struct"},"6:1580:37445":{"crate_id":6,"path":["libc","unix","linux_like","tm"],"kind":"struct"},"16:534:3594":{"crate_id":16,"path":["gimli","read","cfi","RegisterRuleMap"],"kind":"struct"},"1:6782:2558":{"crate_id":1,"path":["std","sync","poison","PoisonError"],"kind":"struct"},"9:586:3329":{"crate_id":9,"path":["miniz_oxide","deflate","core","SymFreq"],"kind":"struct"},"17:12291:49131":{"crate_id":17,"path":["object","macho","NoteCommand"],"kind":"struct"},"17:12164:49056":{"crate_id":17,"path":["object","macho","BuildToolVersion"],"kind":"struct"},"12:632:1934":{"crate_id":12,"path":["hashbrown","map","Iter"],"kind":"struct"},"6:7166:41438":{"crate_id":6,"path":["libc","unix","linux_like","linux","arch","generic","termios2"],"kind":"struct"},"6:5504:40469":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__timeval"],"kind":"struct"},"2:20711:12338":{"crate_id":2,"path":["core","core_simd","ord","SimdOrd"],"kind":"trait"},"2:7156:155":{"crate_id":2,"path":["core","iter","traits","iterator","Iterator"],"kind":"trait"},"2:48199:206":{"crate_id":2,"path":["core","result","Result"],"kind":"enum"},"2:4719:772":{"crate_id":2,"path":["core","iter"],"kind":"module"},"2:8165:86":{"crate_id":2,"path":["core","sync","atomic","AtomicPtr"],"kind":"struct"},"17:12972:50156":{"crate_id":17,"path":["object","pe","ImageBaseRelocation"],"kind":"struct"},"5:1594:59106":{"crate_id":5,"path":["alloc","collections","btree","map","drop","DropGuard"],"kind":"struct"},"17:10708:4024":{"crate_id":17,"path":["object","read","ObjectMap"],"kind":"struct"},"12:810:2298":{"crate_id":12,"path":["hashbrown","map","ValuesMut"],"kind":"struct"},"2:9377:2020":{"crate_id":2,"path":["core","slice","iter","SplitInclusive"],"kind":"struct"},"5:6909:102":{"crate_id":5,"path":["alloc","ffi","c_str","CString"],"kind":"struct"},"12:659:1935":{"crate_id":12,"path":["hashbrown","map","IntoIter"],"kind":"struct"},"6:6572:40909":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ucontext_t"],"kind":"struct"},"6:5660:40479":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ntptimeval"],"kind":"struct"},"6:4307:39811":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_condition_effect"],"kind":"struct"},"17:8295:44094":{"crate_id":17,"path":["object","common","RelocationKind"],"kind":"enum"},"18:548:139":{"crate_id":18,"path":["memchr","memmem","rabinkarp","Hash"],"kind":"struct"},"17:11576:48856":{"crate_id":17,"path":["object","macho","MachHeader64"],"kind":"struct"},"2:2796:2059":{"crate_id":2,"path":["core","ops","arith","DivAssign"],"kind":"trait"},"2:46912:3113":{"crate_id":2,"path":["core","char","ToLowercase"],"kind":"struct"},"5:6737:1989":{"crate_id":5,"path":["alloc","alloc","Global"],"kind":"struct"},"16:4817:43088":{"crate_id":16,"path":["gimli","constants","DwLne"],"kind":"struct"},"6:4726:39854":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_alg"],"kind":"struct"},"2:11046:2618":{"crate_id":2,"path":["core","str","pattern","Pattern"],"kind":"trait"},"16:6252:3726":{"crate_id":16,"path":["gimli","read","aranges","ArangeEntry"],"kind":"struct"},"2:4003:2411":{"crate_id":2,"path":["core","async_iter","async_iter","AsyncIterator"],"kind":"trait"},"1:2905:126":{"crate_id":1,"path":["std","io","error","Error"],"kind":"struct"},"2:46785:28837":{"crate_id":2,"path":["core","async_iter","from_iter","FromIter"],"kind":"struct"},"1:9331:2325":{"crate_id":1,"path":["std","sync","mpsc","RecvTimeoutError"],"kind":"enum"},"2:20047:57550":{"crate_id":2,"path":["core","core_simd","swizzle","deinterleave","Even"],"kind":"struct"},"1:9836:51870":{"crate_id":1,"path":["std","sys","unix","fs","Dir"],"kind":"struct"},"2:49803:2001":{"crate_id":2,"path":["core","slice","iter","Windows"],"kind":"struct"},"5:6488:59121":{"crate_id":5,"path":["alloc","vec","dedup_by","FillGapOnDrop"],"kind":"struct"},"16:2557:3841":{"crate_id":16,"path":["gimli","common","DebugLocListsIndex"],"kind":"struct"},"2:50750:2949":{"crate_id":2,"path":["core","str","CharEscapeDefault"],"kind":"struct"},"12:697:2300":{"crate_id":12,"path":["hashbrown","map","IntoValues"],"kind":"struct"},"17:12134:49054":{"crate_id":17,"path":["object","macho","VersionMinCommand"],"kind":"struct"},"17:8494:42422":{"crate_id":17,"path":["object","endian","LittleEndian"],"kind":"struct"},"2:48794:2071":{"crate_id":2,"path":["core","fmt","num","Binary"],"kind":"struct"},"4:0:1718":{"crate_id":4,"path":["rustc_std_workspace_core"],"kind":"module"},"5:7086:3155":{"crate_id":5,"path":["alloc","vec","splice","Splice"],"kind":"struct"},"1:5506:186":{"crate_id":1,"path":["std","path","Path"],"kind":"struct"},"1:2652:2251":{"crate_id":1,"path":["std","io","buffered","linewriter","LineWriter"],"kind":"struct"},"16:6676:3676":{"crate_id":16,"path":["gimli","read","loclists","DebugLoc"],"kind":"struct"},"5:3910:1934":{"crate_id":5,"path":["alloc","collections","vec_deque","iter","Iter"],"kind":"struct"},"2:54043:17878":{"crate_id":2,"path":["core","core_arch","x86","__m128d"],"kind":"struct"},"2:48131:1935":{"crate_id":2,"path":["core","option","IntoIter"],"kind":"struct"},"14:160:42346":{"crate_id":14,"path":["rustc_demangle","Demangle"],"kind":"struct"},"2:21280:56327":{"crate_id":2,"path":["core","num","flt2dec","decoder","Decoded"],"kind":"struct"},"2:48558:90":{"crate_id":2,"path":["core","sync","atomic","AtomicU64"],"kind":"struct"},"16:6210:3724":{"crate_id":16,"path":["gimli","read","aranges","ArangeHeader"],"kind":"struct"},"2:21777:170":{"crate_id":2,"path":["core","num","nonzero","NonZeroU128"],"kind":"struct"},"5:1211:2308":{"crate_id":5,"path":["alloc","collections","btree","map","entry","VacantEntry"],"kind":"struct"},"2:21221:56430":{"crate_id":2,"path":["core","num","dec2flt","number","Number"],"kind":"struct"},"1:7875:2460":{"crate_id":1,"path":["std","thread","ThreadId"],"kind":"struct"},"16:2579:3892":{"crate_id":16,"path":["gimli","common","DebugMacinfoOffset"],"kind":"struct"},"1:1811:596":{"crate_id":1,"path":["std","env"],"kind":"module"},"2:53039:2817":{"crate_id":2,"path":["core","core_arch","simd","i64x4"],"kind":"struct"},"1:9824:127":{"crate_id":1,"path":["std","sys","unix","fs","File"],"kind":"struct"},"1:5763:2115":{"crate_id":1,"path":["std","process","Stdio"],"kind":"struct"},"5:2029:57854":{"crate_id":5,"path":["alloc","collections","btree","navigate","LazyLeafHandle"],"kind":"enum"},"17:11761:49028":{"crate_id":17,"path":["object","macho","SubFrameworkCommand"],"kind":"struct"},"18:564:4096":{"crate_id":18,"path":["memchr","memmem","rarebytes","RareNeedleBytes"],"kind":"struct"},"17:10721:44108":{"crate_id":17,"path":["object","read","ObjectMapEntry"],"kind":"struct"},"2:7001:2191":{"crate_id":2,"path":["core","iter","traits","accum","Sum"],"kind":"trait"},"17:12103:49052":{"crate_id":17,"path":["object","macho","EncryptionInfoCommand32"],"kind":"struct"},"2:50471:2631":{"crate_id":2,"path":["core","str","pattern","CharArrayRefSearcher"],"kind":"struct"},"1:11154:2123":{"crate_id":1,"path":["std","sys","unix","io","IoSlice"],"kind":"struct"},"2:10095:2007":{"crate_id":2,"path":["core","slice","iter","GroupBy"],"kind":"struct"},"17:2916:3962":{"crate_id":17,"path":["object","read","macho","section","MachOSectionIterator"],"kind":"struct"},"16:4721:43064":{"crate_id":16,"path":["gimli","constants","DwIdx"],"kind":"struct"},"2:1919:2412":{"crate_id":2,"path":["core","ptr","unique","Unique"],"kind":"struct"},"2:2822:1913":{"crate_id":2,"path":["core","ops","bit","BitXor"],"kind":"trait"},"2:7038:132":{"crate_id":2,"path":["core","iter","traits","collect","FromIterator"],"kind":"trait"},"17:8596:44096":{"crate_id":17,"path":["object","endian","U64Bytes"],"kind":"struct"},"5:4944:1983":{"crate_id":5,"path":["alloc","slice","Concat"],"kind":"trait"},"1:11947:3483":{"crate_id":1,"path":["std","backtrace_rs","backtrace","Frame"],"kind":"struct"},"2:53073:2799":{"crate_id":2,"path":["core","core_arch","simd","f32x8"],"kind":"struct"},"12:1120:3455":{"crate_id":12,"path":["hashbrown","map","VacantEntryRef"],"kind":"struct"},"17:10257:44383":{"crate_id":17,"path":["object","read","pe","section","PeSegmentIterator"],"kind":"struct"},"6:6424:40899":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_xmmreg"],"kind":"struct"},"2:2800:2061":{"crate_id":2,"path":["core","ops","arith","RemAssign"],"kind":"trait"},"5:5211:3159":{"crate_id":5,"path":["alloc","string","retain","SetLenOnDrop"],"kind":"struct"},"12:2053:2306":{"crate_id":12,"path":["hashbrown","set","Entry"],"kind":"enum"},"2:46794:2703":{"crate_id":2,"path":["core","char","convert","ParseCharError"],"kind":"struct"},"1:12319:1445":{"crate_id":1,"path":["std","u32"],"kind":"primitive"},"17:12674:49654":{"crate_id":17,"path":["object","pe","ImageRomOptionalHeader"],"kind":"struct"},"17:13114:50198":{"crate_id":17,"path":["object","pe","ImageResourceDirectory"],"kind":"struct"},"17:11186:44771":{"crate_id":17,"path":["object","elf","Rela64"],"kind":"struct"},"2:2805:1908":{"crate_id":2,"path":["core","ops","bit","Not"],"kind":"trait"},"17:8822:60454":{"crate_id":17,"path":["object","read","any","FileInternal"],"kind":"enum"},"16:7278:3739":{"crate_id":16,"path":["gimli","read","pubnames","DebugPubNames"],"kind":"struct"},"2:9596:2019":{"crate_id":2,"path":["core","slice","iter","SplitNMut"],"kind":"struct"},"2:11852:2413":{"crate_id":2,"path":["core","task","wake","Context"],"kind":"struct"},"5:6769:3219":{"crate_id":5,"path":["alloc","collections","binary_heap","DrainSorted"],"kind":"struct"},"17:11199:44772":{"crate_id":17,"path":["object","elf","ProgramHeader32"],"kind":"struct"},"1:8705:2534":{"crate_id":1,"path":["std","os","unix","net","ancillary","SocketAncillary"],"kind":"struct"},"1:1889:8111":{"crate_id":1,"path":["std","env","ArgsOs"],"kind":"struct"},"1:6544:202":{"crate_id":1,"path":["std","sync","mpmc","Receiver"],"kind":"struct"},"2:46520:2724":{"crate_id":2,"path":["core","ops","try_trait","Yeet"],"kind":"struct"},"16:2282:3541":{"crate_id":16,"path":["gimli","common","Encoding"],"kind":"struct"},"1:12301:1463":{"crate_id":1,"path":["std","unit"],"kind":"primitive"},"1:910:1935":{"crate_id":1,"path":["std","collections","hash","map","IntoIter"],"kind":"struct"},"17:10921:44539":{"crate_id":17,"path":["object","archive","Header"],"kind":"struct"},"6:4294:39809":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_constant_effect"],"kind":"struct"},"17:13126:50201":{"crate_id":17,"path":["object","pe","ImageResourceDirectoryEntry"],"kind":"struct"},"5:2746:57768":{"crate_id":5,"path":["alloc","collections","btree","node","marker","ValMut"],"kind":"struct"},"2:11002:2034":{"crate_id":2,"path":["core","str","traits","FromStr"],"kind":"trait"},"2:2938:1862":{"crate_id":2,"path":["core","ops","function","FnOnce"],"kind":"trait"},"2:48055:177":{"crate_id":2,"path":["core","option","Option"],"kind":"enum"},"2:11863:2962":{"crate_id":2,"path":["core","task","wake","Waker"],"kind":"struct"},"1:4262:1959":{"crate_id":1,"path":["std","os","unix","fs","OpenOptionsExt"],"kind":"trait"},"16:2367:3838":{"crate_id":16,"path":["gimli","common","DebugAddrBase"],"kind":"struct"},"1:7955:2310":{"crate_id":1,"path":["std","collections","hash","map","DefaultHasher"],"kind":"struct"},"2:54142:17885":{"crate_id":2,"path":["core","core_arch","x86","__m128bh"],"kind":"struct"},"1:11601:51512":{"crate_id":1,"path":["std","sys_common","process","CommandEnv"],"kind":"struct"},"17:12176:49070":{"crate_id":17,"path":["object","macho","DyldInfoCommand"],"kind":"struct"},"2:4369:2087":{"crate_id":2,"path":["core","cell","SyncUnsafeCell"],"kind":"struct"},"17:11721:49025":{"crate_id":17,"path":["object","macho","FvmlibCommand"],"kind":"struct"},"2:1672:1054":{"crate_id":2,"path":["core","ptr"],"kind":"module"},"16:5780:3595":{"crate_id":16,"path":["gimli","read","cfi","RegisterRuleIter"],"kind":"struct"},"6:4185:39796":{"crate_id":6,"path":["libc","unix","linux_like","linux","fsid_t"],"kind":"struct"},"17:10434:44408":{"crate_id":17,"path":["object","read","pe","relocation","RelocationIterator"],"kind":"struct"},"2:47234:2196":{"crate_id":2,"path":["core","iter","adapters","peekable","Peekable"],"kind":"struct"},"6:6329:10438":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stat"],"kind":"struct"},"2:47130:2181":{"crate_id":2,"path":["core","iter","adapters","cycle","Cycle"],"kind":"struct"},"1:9437:51473":{"crate_id":1,"path":["std","sync","mpmc","list","ListToken"],"kind":"struct"},"16:6241:3725":{"crate_id":16,"path":["gimli","read","aranges","ArangeEntryIter"],"kind":"struct"},"6:1701:37456":{"crate_id":6,"path":["libc","unix","linux_like","epoll_event"],"kind":"struct"},"17:11271:44937":{"crate_id":17,"path":["object","elf","Verdef"],"kind":"struct"},"1:3470:55482":{"crate_id":1,"path":["std","io","Write","write_fmt","Adapter"],"kind":"struct"},"1:4744:2148":{"crate_id":1,"path":["std","os","unix","process","CommandExt"],"kind":"trait"},"17:9250:44154":{"crate_id":17,"path":["object","read","archive","ArchiveFile"],"kind":"struct"},"2:21711:172":{"crate_id":2,"path":["core","num","nonzero","NonZeroU32"],"kind":"struct"},"2:11761:57405":{"crate_id":2,"path":["core","future","from_generator","GenFuture"],"kind":"struct"},"5:6986:57778":{"crate_id":5,"path":["alloc","slice","merge_sort","Run"],"kind":"struct"},"2:50770:2947":{"crate_id":2,"path":["core","str","UnsafeBytesToStr"],"kind":"struct"},"1:628:1890":{"crate_id":1,"path":["std","ascii","AsciiExt"],"kind":"trait"},"2:50631:3030":{"crate_id":2,"path":["core","str","lossy","Utf8Chunk"],"kind":"struct"},"5:869:1934":{"crate_id":5,"path":["alloc","collections","binary_heap","Iter"],"kind":"struct"},"17:9681:44214":{"crate_id":17,"path":["object","read","elf","note","Note"],"kind":"struct"},"2:20009:57508":{"crate_id":2,"path":["core","core_simd","swizzle","rotate_lanes_right","Rotate"],"kind":"struct"},"2:52773:2834":{"crate_id":2,"path":["core","core_arch","simd","u32x8"],"kind":"struct"},"16:6330:3727":{"crate_id":16,"path":["gimli","read","index","UnitIndexSection"],"kind":"struct"},"17:13506:50319":{"crate_id":17,"path":["object","pe","ImageDebugMisc"],"kind":"struct"},"2:2670:2165":{"crate_id":2,"path":["core","marker","Unsize"],"kind":"trait"},"6:4515:39829":{"crate_id":6,"path":["libc","unix","linux_like","linux","posix_spawnattr_t"],"kind":"struct"},"17:13184:50229":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation64"],"kind":"struct"},"7:32:41561":{"crate_id":7,"path":["unwind","libunwind","_Unwind_Reason_Code"],"kind":"enum"},"2:11066:2623":{"crate_id":2,"path":["core","str","pattern","DoubleEndedSearcher"],"kind":"trait"},"1:10799:55416":{"crate_id":1,"path":["std","sys","unix","stack_overflow","Handler"],"kind":"struct"},"17:11997:49044":{"crate_id":17,"path":["object","macho","DylibReference"],"kind":"struct"},"17:12934:49822":{"crate_id":17,"path":["object","pe","ImageAuxSymbolSection"],"kind":"struct"},"17:13141:50203":{"crate_id":17,"path":["object","pe","ImageResourceDirStringU"],"kind":"struct"},"2:4262:2871":{"crate_id":2,"path":["core","cell","BorrowRef"],"kind":"struct"},"17:8941:44101":{"crate_id":17,"path":["object","read","any","SectionIterator"],"kind":"struct"},"1:4302:1961":{"crate_id":1,"path":["std","os","unix","fs","FileTypeExt"],"kind":"trait"},"1:10668:51871":{"crate_id":1,"path":["std","sys","unix","process","process_common","Argv"],"kind":"struct"},"16:6200:3723":{"crate_id":16,"path":["gimli","read","aranges","ArangeHeaderIter"],"kind":"struct"},"17:11684:48965":{"crate_id":17,"path":["object","macho","Section64"],"kind":"struct"},"16:7872:3686":{"crate_id":16,"path":["gimli","read","unit","EntriesRaw"],"kind":"struct"},"18:0:1728":{"crate_id":18,"path":["memchr"],"kind":"module"},"5:5545:3194":{"crate_id":5,"path":["alloc","sync","Weak"],"kind":"struct"},"2:5457:2187":{"crate_id":2,"path":["core","iter","adapters","flatten","Flatten"],"kind":"struct"},"1:11264:8106":{"crate_id":1,"path":["std","sys","unix","os","JoinPathsError"],"kind":"struct"},"2:51949:2820":{"crate_id":2,"path":["core","core_arch","simd","i8x8"],"kind":"struct"},"2:11267:110":{"crate_id":2,"path":["core","str","lossy","Debug"],"kind":"struct"},"1:8093:1970":{"crate_id":1,"path":["std","fs","Permissions"],"kind":"struct"},"6:513:36550":{"crate_id":6,"path":["libc","unix","rlimit"],"kind":"struct"},"6:6479:40902":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user"],"kind":"struct"},"2:50145:2016":{"crate_id":2,"path":["core","str","iter","RSplitN"],"kind":"struct"},"6:4745:39856":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_user_dev"],"kind":"struct"},"6:4581:39837":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_extended_err"],"kind":"struct"},"2:49812:2000":{"crate_id":2,"path":["core","slice","iter","Chunks"],"kind":"struct"},"1:5011:2029":{"crate_id":1,"path":["std","os","fd","raw","FromRawFd"],"kind":"trait"},"17:10245:44406":{"crate_id":17,"path":["object","read","pe","file","PeComdatSectionIterator"],"kind":"struct"},"6:4575:39836":{"crate_id":6,"path":["libc","unix","linux_like","linux","regmatch_t"],"kind":"struct"},"2:47270:2199":{"crate_id":2,"path":["core","iter","adapters","skip","Skip"],"kind":"struct"},"1:8694:2583":{"crate_id":1,"path":["std","os","unix","net","ancillary","SocketCred"],"kind":"struct"},"2:53681:2831":{"crate_id":2,"path":["core","core_arch","simd","u16x32"],"kind":"struct"},"6:4629:39843":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_fprog"],"kind":"struct"},"16:6345:3674":{"crate_id":16,"path":["gimli","read","line","DebugLine"],"kind":"struct"},"2:50651:3031":{"crate_id":2,"path":["core","str","lossy","Utf8Chunks"],"kind":"struct"},"16:2930:3608":{"crate_id":16,"path":["gimli","common","SectionId"],"kind":"enum"},"1:9450:3526":{"crate_id":1,"path":["std","sync","mpmc","select","Operation"],"kind":"struct"},"13:220:59969":{"crate_id":13,"path":["std_detect","detect","cache","Initializer"],"kind":"struct"},"2:48634:92":{"crate_id":2,"path":["core","sync","atomic","AtomicUsize"],"kind":"struct"},"2:8596:110":{"crate_id":2,"path":["core","fmt","Debug"],"kind":"trait"},"2:51816:2807":{"crate_id":2,"path":["core","core_arch","simd","i16x2"],"kind":"struct"},"2:8603:2070":{"crate_id":2,"path":["core","fmt","Octal"],"kind":"trait"},"16:7890:3685":{"crate_id":16,"path":["gimli","read","unit","EntriesCursor"],"kind":"struct"},"17:13374:50279":{"crate_id":17,"path":["object","pe","ImageArm64RuntimeFunctionEntry"],"kind":"struct"},"17:9526:3921":{"crate_id":17,"path":["object","read","elf","section","ElfSectionIterator"],"kind":"struct"},"17:12964:50155":{"crate_id":17,"path":["object","pe","ImageLinenumber"],"kind":"struct"},"1:5894:2321":{"crate_id":1,"path":["std","sync","mpsc","SyncSender"],"kind":"struct"},"17:11288:44944":{"crate_id":17,"path":["object","elf","Verdaux"],"kind":"struct"},"12:1518:3465":{"crate_id":12,"path":["hashbrown","rustc_entry","RustcEntry"],"kind":"enum"},"2:46466:199":{"crate_id":2,"path":["core","ops","range","RangeToInclusive"],"kind":"struct"},"17:9303:3933":{"crate_id":17,"path":["object","read","coff","section","SectionTable"],"kind":"struct"},"16:5664:3588":{"crate_id":16,"path":["gimli","read","cfi","PartialFrameDescriptionEntry"],"kind":"struct"},"2:4086:2864":{"crate_id":2,"path":["core","cell","once","OnceCell"],"kind":"struct"},"6:4257:39804":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_keymap_entry"],"kind":"struct"},"5:6956:3258":{"crate_id":5,"path":["alloc","ffi","c_str","FromVecWithNulError"],"kind":"struct"},"5:5822:12532":{"crate_id":5,"path":["alloc","task","Wake"],"kind":"trait"},"12:300:3459":{"crate_id":12,"path":["hashbrown","raw","RawIter"],"kind":"struct"},"12:2184:57432":{"crate_id":12,"path":["hashbrown","raw","bitmask","BitMask"],"kind":"struct"},"2:3382:2141":{"crate_id":2,"path":["core","any","Demand"],"kind":"struct"},"6:507:36549":{"crate_id":6,"path":["libc","unix","timespec"],"kind":"struct"},"12:1832:1934":{"crate_id":12,"path":["hashbrown","set","Iter"],"kind":"struct"},"2:46889:3112":{"crate_id":2,"path":["core","char","EscapeDefaultState"],"kind":"enum"},"5:7003:3175":{"crate_id":5,"path":["alloc","string","FromUtf8Error"],"kind":"struct"},"17:9118:60520":{"crate_id":17,"path":["object","read","any","SymbolIteratorInternal"],"kind":"enum"},"2:52515:56419":{"crate_id":2,"path":["core","core_arch","simd","m16x8"],"kind":"struct"},"16:5525:3581":{"crate_id":16,"path":["gimli","read","cfi","SectionBaseAddresses"],"kind":"struct"},"2:50073:2925":{"crate_id":2,"path":["core","str","iter","SplitTerminator"],"kind":"struct"},"2:58300:56428":{"crate_id":2,"path":["core","core_simd","vector","ptr","SimdConstPtr"],"kind":"struct"},"5:3429:59106":{"crate_id":5,"path":["alloc","collections","linked_list","drop","DropGuard"],"kind":"struct"},"6:5782:40490":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","utmpx"],"kind":"struct"},"1:11099:1969":{"crate_id":1,"path":["std","sys","unix","fs","OpenOptions"],"kind":"struct"},"1:11688:51874":{"crate_id":1,"path":["std","sys_common","wtf8","EncodeWide"],"kind":"struct"},"17:9274:44156":{"crate_id":17,"path":["object","read","archive","ArchiveMember"],"kind":"struct"},"17:12980:50183":{"crate_id":17,"path":["object","pe","ImageArchiveMemberHeader"],"kind":"struct"},"1:5887:2320":{"crate_id":1,"path":["std","sync","mpsc","Sender"],"kind":"struct"},"16:7117:3531":{"crate_id":16,"path":["gimli","read","op","EvaluationState"],"kind":"enum"},"1:5169:1895":{"crate_id":1,"path":["std","os","net","linux_ext","addr","SocketAddrExt"],"kind":"trait"},"6:7208:39985":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_mutexattr_t"],"kind":"struct"},"5:1311:94":{"crate_id":5,"path":["alloc","collections","btree","map","BTreeMap"],"kind":"struct"},"17:13580:50330":{"crate_id":17,"path":["object","pe","ImportObjectHeader"],"kind":"struct"},"2:11684:188":{"crate_id":2,"path":["core","future","pending","Pending"],"kind":"struct"},"2:50331:1893":{"crate_id":2,"path":["core","str","iter","EscapeDefault"],"kind":"struct"},"15:0:1725":{"crate_id":15,"path":["addr2line"],"kind":"module"},"17:8561:3984":{"crate_id":17,"path":["object","endian","U32Bytes"],"kind":"struct"},"6:6409:40897":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","pthread_attr_t"],"kind":"struct"},"2:2969:2607":{"crate_id":2,"path":["core","ops","generator","Generator"],"kind":"trait"},"2:57025:241":{"crate_id":2,"path":["core","core_simd","fmt","fmt","Wrapper"],"kind":"struct"},"5:1358:2009":{"crate_id":5,"path":["alloc","collections","btree","map","IterMut"],"kind":"struct"},"2:2444:1899":{"crate_id":2,"path":["core","convert","num","private","Sealed"],"kind":"trait"},"6:5861:40518":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","msqid_ds"],"kind":"struct"},"2:50245:2933":{"crate_id":2,"path":["core","str","iter","RMatches"],"kind":"struct"},"18:491:60909":{"crate_id":18,"path":["memchr","cow","Imp"],"kind":"struct"},"17:10270:44382":{"crate_id":17,"path":["object","read","pe","section","PeSegment"],"kind":"struct"},"2:9416:2006":{"crate_id":2,"path":["core","slice","iter","SplitMut"],"kind":"struct"},"6:4231:39801":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_event"],"kind":"struct"},"2:2487:146":{"crate_id":2,"path":["core","convert","Into"],"kind":"trait"},"5:3349:1934":{"crate_id":5,"path":["alloc","collections","linked_list","Iter"],"kind":"struct"},"1:5348:51420":{"crate_id":1,"path":["std","path","fmt","DebugHelper"],"kind":"struct"},"16:5122:43297":{"crate_id":16,"path":["gimli","constants","DwOp"],"kind":"struct"},"17:12322:49133":{"crate_id":17,"path":["object","macho","Nlist64"],"kind":"struct"},"6:6545:40907":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ptrace_rseq_configuration"],"kind":"struct"},"6:6269:36468":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","sigaction"],"kind":"struct"},"5:217:3214":{"crate_id":5,"path":["alloc","boxed","thin","ThinBox"],"kind":"struct"},"1:4908:51179":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt","st_ctime"],"kind":"foreign_type"},"2:21843:169":{"crate_id":2,"path":["core","num","nonzero","NonZeroI8"],"kind":"struct"},"1:8713:2523":{"crate_id":1,"path":["std","os","unix","net","listener","Incoming"],"kind":"struct"},"17:10466:44409":{"crate_id":17,"path":["object","read","pe","resource","ResourceDirectoryTable"],"kind":"struct"},"6:5472:40466":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","statx_timestamp"],"kind":"struct"},"17:12948:49823":{"crate_id":17,"path":["object","pe","ImageAuxSymbolCrc"],"kind":"struct"},"16:8069:126":{"crate_id":16,"path":["gimli","read","Error"],"kind":"enum"},"5:6799:194":{"crate_id":5,"path":["alloc","collections","btree","set","Range"],"kind":"struct"},"2:49155:2069":{"crate_id":2,"path":["core","fmt","FlagV1"],"kind":"enum"},"18:671:4081":{"crate_id":18,"path":["memchr","memmem","FindRevIter"],"kind":"struct"},"1:944:1936":{"crate_id":1,"path":["std","collections","hash","map","Drain"],"kind":"struct"},"1:2515:2248":{"crate_id":1,"path":["std","io","buffered","bufreader","BufReader"],"kind":"struct"},"16:5761:3593":{"crate_id":16,"path":["gimli","read","cfi","UnwindTable"],"kind":"struct"},"16:6059:3837":{"crate_id":16,"path":["gimli","read","dwarf","RangeIterInner"],"kind":"enum"},"17:12797:49707":{"crate_id":17,"path":["object","pe","AnonObjectHeaderBigobj"],"kind":"struct"},"17:10774:3901":{"crate_id":17,"path":["object","read","Export"],"kind":"struct"},"16:7298:3741":{"crate_id":16,"path":["gimli","read","pubtypes","PubTypesEntry"],"kind":"struct"},"18:660:4080":{"crate_id":18,"path":["memchr","memmem","FindIter"],"kind":"struct"},"9:622:3332":{"crate_id":9,"path":["miniz_oxide","deflate","core","TDEFLFlush"],"kind":"enum"},"2:7426:1946":{"crate_id":2,"path":["core","iter","traits","marker","FusedIterator"],"kind":"trait"},"16:6668:3871":{"crate_id":16,"path":["gimli","read","lists","ListsHeader"],"kind":"struct"},"2:21:664":{"crate_id":2,"path":["core","format_args"],"kind":"macro"},"1:5660:2110":{"crate_id":1,"path":["std","process","ChildStdin"],"kind":"struct"},"2:52371:2798":{"crate_id":2,"path":["core","core_arch","simd","f32x4"],"kind":"struct"},"9:111:3348":{"crate_id":9,"path":["miniz_oxide","deflate","core","CompressorOxide"],"kind":"struct"},"6:4329:39813":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_rumble_effect"],"kind":"struct"},"1:3269:2254":{"crate_id":1,"path":["std","io","stdio","Stderr"],"kind":"struct"},"6:5713:40484":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ptrace_peeksiginfo_args"],"kind":"struct"},"16:8056:3546":{"crate_id":16,"path":["gimli","read","StoreOnHeap"],"kind":"struct"},"1:5394:187":{"crate_id":1,"path":["std","path","PathBuf"],"kind":"struct"},"2:21645:174":{"crate_id":2,"path":["core","num","nonzero","NonZeroU8"],"kind":"struct"},"2:52885:2822":{"crate_id":2,"path":["core","core_arch","simd","i8x32"],"kind":"struct"},"17:11841:49034":{"crate_id":17,"path":["object","macho","ThreadCommand"],"kind":"struct"},"5:1953:3185":{"crate_id":5,"path":["alloc","collections","btree","merge_iter","MergeIterInner"],"kind":"struct"},"16:6528:3732":{"crate_id":16,"path":["gimli","read","line","LineProgramHeader"],"kind":"struct"},"17:8475:3912":{"crate_id":17,"path":["object","endian","Endianness"],"kind":"enum"},"17:8666:44098":{"crate_id":17,"path":["object","endian","I32Bytes"],"kind":"struct"},"2:2847:1925":{"crate_id":2,"path":["core","ops","bit","BitXorAssign"],"kind":"trait"},"6:4449:39824":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Phdr"],"kind":"struct"},"1:8429:2237":{"crate_id":1,"path":["std","io","Bytes"],"kind":"struct"},"17:9712:44215":{"crate_id":17,"path":["object","read","elf","version","VersionIndex"],"kind":"struct"},"6:5554:40439":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","mallinfo"],"kind":"struct"},"1:6852:2518":{"crate_id":1,"path":["std","sync","remutex","ReentrantMutexGuard"],"kind":"struct"},"17:562:44092":{"crate_id":17,"path":["object","read","any","Symbol"],"kind":"struct"},"16:6704:3690":{"crate_id":16,"path":["gimli","read","loclists","LocationLists"],"kind":"struct"},"16:4849:43096":{"crate_id":16,"path":["gimli","constants","DwLnct"],"kind":"struct"},"1:12266:53435":{"crate_id":1,"path":["std","backtrace_rs","symbolize","gimli","Cache"],"kind":"struct"},"17:12816:49709":{"crate_id":17,"path":["object","pe","ImageSectionHeader"],"kind":"struct"},"17:12781:49706":{"crate_id":17,"path":["object","pe","AnonObjectHeaderV2"],"kind":"struct"},"16:7980:3549":{"crate_id":16,"path":["gimli","read","value","ValueType"],"kind":"enum"},"1:11607:2128":{"crate_id":1,"path":["std","sys_common","process","CommandEnvs"],"kind":"struct"},"16:7059:3019":{"crate_id":16,"path":["gimli","read","op","Location"],"kind":"enum"},"2:0:484":{"crate_id":2,"path":["core"],"kind":"module"},"1:12305:1321":{"crate_id":1,"path":["std","slice"],"kind":"primitive"},"2:54052:17879":{"crate_id":2,"path":["core","core_arch","x86","__m256i"],"kind":"struct"},"17:9371:44104":{"crate_id":17,"path":["object","read","coff","symbol","SymbolIterator"],"kind":"struct"},"1:12282:53106":{"crate_id":1,"path":["std","backtrace_rs","print","PrintFmt"],"kind":"enum"},"2:19994:57508":{"crate_id":2,"path":["core","core_simd","swizzle","rotate_lanes_left","Rotate"],"kind":"struct"},"17:10973:44548":{"crate_id":17,"path":["object","elf","FileHeader64"],"kind":"struct"},"1:2612:2242":{"crate_id":1,"path":["std","io","buffered","bufwriter","WriterPanicked"],"kind":"struct"},"6:4673:39849":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_ifru_map"],"kind":"struct"},"1:9389:2413":{"crate_id":1,"path":["std","sync","mpmc","context","Context"],"kind":"struct"},"2:48406:88":{"crate_id":2,"path":["core","sync","atomic","AtomicU16"],"kind":"struct"},"17:8055:3899":{"crate_id":17,"path":["object","common","Architecture"],"kind":"enum"},"2:3908:2226":{"crate_id":2,"path":["core","array","Guard"],"kind":"struct"},"16:6270:3671":{"crate_id":16,"path":["gimli","read","index","DebugCuIndex"],"kind":"struct"},"2:52546:56372":{"crate_id":2,"path":["core","core_arch","simd","m32x4"],"kind":"struct"},"2:20215:2792":{"crate_id":2,"path":["core","core_simd","elements","int","SimdInt"],"kind":"trait"},"17:8951:60862":{"crate_id":17,"path":["object","read","any","SectionIteratorInternal"],"kind":"enum"},"17:386:44090":{"crate_id":17,"path":["object","read","any","Segment"],"kind":"struct"},"1:11390:55415":{"crate_id":1,"path":["std","sys","unix","process","process_inner","posix_spawn","PosixSpawnattr"],"kind":"struct"},"2:2662:216":{"crate_id":2,"path":["core","marker","Send"],"kind":"trait"},"2:50454:2630":{"crate_id":2,"path":["core","str","pattern","CharArraySearcher"],"kind":"struct"},"6:0:793":{"crate_id":6,"path":["libc"],"kind":"module"},"1:12314:720":{"crate_id":1,"path":["std","i32"],"kind":"primitive"},"5:2049:3242":{"crate_id":5,"path":["alloc","collections","btree","navigate","LazyLeafRange"],"kind":"struct"},"17:9671:3958":{"crate_id":17,"path":["object","read","elf","note","NoteIterator"],"kind":"struct"},"17:13340:50242":{"crate_id":17,"path":["object","pe","ImageHotPatchBase"],"kind":"struct"},"1:11457:2117":{"crate_id":1,"path":["std","sys","unix","process","process_inner","ExitStatusError"],"kind":"struct"},"2:53883:2800":{"crate_id":2,"path":["core","core_arch","simd","f32x16"],"kind":"struct"},"2:8324:2905":{"crate_id":2,"path":["core","fmt","builders","PadAdapter"],"kind":"struct"},"17:10642:4031":{"crate_id":17,"path":["object","read","SymbolSection"],"kind":"enum"},"5:3338:159":{"crate_id":5,"path":["alloc","collections","linked_list","LinkedList"],"kind":"struct"},"17:10682:4029":{"crate_id":17,"path":["object","read","SymbolMapName"],"kind":"struct"},"1:8534:53092":{"crate_id":1,"path":["std","net","ip_addr","fmt","Span"],"kind":"struct"},"16:6359:3728":{"crate_id":16,"path":["gimli","read","line","LineRows"],"kind":"struct"},"1:12318:1444":{"crate_id":1,"path":["std","u16"],"kind":"primitive"},"1:11384:55451":{"crate_id":1,"path":["std","sys","unix","process","process_inner","posix_spawn","PosixSpawnFileActions"],"kind":"struct"},"12:2205:1944":{"crate_id":12,"path":["hashbrown","TryReserveError"],"kind":"enum"},"6:501:36548":{"crate_id":6,"path":["libc","unix","timeval"],"kind":"struct"},"17:13594:50364":{"crate_id":17,"path":["object","pe","ImageCor20Header"],"kind":"struct"},"5:2476:3245":{"crate_id":5,"path":["alloc","collections","btree","node","Handle"],"kind":"struct"},"1:12311:629":{"crate_id":1,"path":["std","f64"],"kind":"primitive"},"16:3716:42491":{"crate_id":16,"path":["gimli","constants","DwChildren"],"kind":"struct"},"2:49841:2003":{"crate_id":2,"path":["core","slice","iter","ChunksExactMut"],"kind":"struct"},"2:48191:189":{"crate_id":2,"path":["core","pin","Pin"],"kind":"struct"},"5:4948:1981":{"crate_id":5,"path":["alloc","slice","Join"],"kind":"trait"},"17:8110:44086":{"crate_id":17,"path":["object","common","AddressSize"],"kind":"enum"},"17:11974:49043":{"crate_id":17,"path":["object","macho","DylibModule64"],"kind":"struct"},"1:4268:1960":{"crate_id":1,"path":["std","os","unix","fs","MetadataExt"],"kind":"trait"},"1:8699:2586":{"crate_id":1,"path":["std","os","unix","net","ancillary","AncillaryError"],"kind":"enum"},"1:2253:2480":{"crate_id":1,"path":["std","fs","read"],"kind":"function"},"17:9433:44167":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdat"],"kind":"struct"},"2:56999:241":{"crate_id":2,"path":["core","core_simd","fmt","fmt","Wrapper"],"kind":"struct"},"2:47545:31238":{"crate_id":2,"path":["core","iter","sources","once_with","OnceWith"],"kind":"struct"},"2:46945:2708":{"crate_id":2,"path":["core","char","TryFromCharError"],"kind":"struct"},"17:8631:44097":{"crate_id":17,"path":["object","endian","I16Bytes"],"kind":"struct"},"2:47049:8617":{"crate_id":2,"path":["core","ffi","VaList"],"kind":"struct"},"1:6677:2348":{"crate_id":1,"path":["std","sync","once","Once"],"kind":"struct"},"17:11594:48900":{"crate_id":17,"path":["object","macho","LoadCommand"],"kind":"struct"},"1:5013:2031":{"crate_id":1,"path":["std","os","fd","raw","IntoRawFd"],"kind":"trait"},"16:2868:3607":{"crate_id":16,"path":["gimli","common","EhFrameOffset"],"kind":"struct"},"1:5823:2119":{"crate_id":1,"path":["std","process","exit"],"kind":"function"},"16:4519:43030":{"crate_id":16,"path":["gimli","constants","DwLang"],"kind":"struct"},"6:4102:39790":{"crate_id":6,"path":["libc","unix","linux_like","linux","glob_t"],"kind":"struct"},"2:2672:222":{"crate_id":2,"path":["core","marker","StructuralPartialEq"],"kind":"trait"},"17:10455:4060":{"crate_id":17,"path":["object","read","pe","resource","ResourceDirectory"],"kind":"struct"},"17:9820:4046":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldSubCache"],"kind":"struct"},"1:10445:51872":{"crate_id":1,"path":["std","sys","unix","os","Env"],"kind":"struct"},"12:444:140":{"crate_id":12,"path":["hashbrown","map","HashMap"],"kind":"struct"},"17:10159:44297":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbolTable"],"kind":"struct"},"2:49821:2004":{"crate_id":2,"path":["core","slice","iter","ChunksMut"],"kind":"struct"},"2:50315:2937":{"crate_id":2,"path":["core","str","iter","EncodeUtf16"],"kind":"struct"},"1:8973:2370":{"crate_id":1,"path":["std","path","StripPrefixError"],"kind":"struct"},"16:5703:3589":{"crate_id":16,"path":["gimli","read","cfi","FrameDescriptionEntry"],"kind":"struct"},"1:681:7099":{"crate_id":1,"path":["std","backtrace","BacktraceSymbol"],"kind":"struct"},"1:6316:55441":{"crate_id":1,"path":["std","sync","mpmc","list","Channel"],"kind":"struct"},"2:20875:57511":{"crate_id":2,"path":["core","core_simd","vector","splat","Splat"],"kind":"struct"},"1:7786:55457":{"crate_id":1,"path":["std","backtrace_rs","print","BacktraceFrameFmt"],"kind":"struct"},"1:11763:2289":{"crate_id":1,"path":["std","sys_common","net","LookupHost"],"kind":"struct"},"5:1425:2300":{"crate_id":5,"path":["alloc","collections","btree","map","IntoValues"],"kind":"struct"},"1:7057:2420":{"crate_id":1,"path":["std","std_float","StdFloat"],"kind":"trait"},"6:5841:39704":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","sysinfo"],"kind":"struct"},"2:20423:1899":{"crate_id":2,"path":["core","core_simd","masks","to_bitmask","sealed","Sealed"],"kind":"trait"},"17:9193:60299":{"crate_id":17,"path":["object","read","any","SectionRelocationIteratorInternal"],"kind":"enum"},"1:8422:2202":{"crate_id":1,"path":["std","io","Take"],"kind":"struct"},"6:4621:39842":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_filter"],"kind":"struct"},"2:4200:2866":{"crate_id":2,"path":["core","cell","BorrowMutError"],"kind":"struct"},"2:53821:2835":{"crate_id":2,"path":["core","core_arch","simd","u32x16"],"kind":"struct"},"1:6709:2344":{"crate_id":1,"path":["std","sync","once_lock","OnceLock"],"kind":"struct"},"6:4810:39862":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_can_addr"],"kind":"union"},"2:50041:2014":{"crate_id":2,"path":["core","str","iter","RSplit"],"kind":"struct"},"2:50287:2934":{"crate_id":2,"path":["core","str","iter","LinesAny"],"kind":"struct"},"2:46919:3114":{"crate_id":2,"path":["core","char","ToUppercase"],"kind":"struct"},"2:20969:1899":{"crate_id":2,"path":["core","core_simd","vector","sealed","Sealed"],"kind":"trait"},"17:9722:44212":{"crate_id":17,"path":["object","read","elf","version","Version"],"kind":"struct"},"2:54089:17882":{"crate_id":2,"path":["core","core_arch","x86","__m512i"],"kind":"struct"},"17:11330:44949":{"crate_id":17,"path":["object","elf","NoteHeader32"],"kind":"struct"},"5:6302:3159":{"crate_id":5,"path":["alloc","vec","set_len_on_drop","SetLenOnDrop"],"kind":"struct"},"1:12312:722":{"crate_id":1,"path":["std","i8"],"kind":"primitive"},"17:12211:49120":{"crate_id":17,"path":["object","macho","SymsegCommand"],"kind":"struct"},"16:7637:3684":{"crate_id":16,"path":["gimli","read","unit","DebuggingInformationEntry"],"kind":"struct"},"1:2385:2484":{"crate_id":1,"path":["std","fs","symlink_metadata"],"kind":"function"},"2:2758:1947":{"crate_id":2,"path":["core","ops","arith","Sub"],"kind":"trait"},"6:7243:39990":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_mutex_t"],"kind":"struct"},"6:592:36560":{"crate_id":6,"path":["libc","unix","tms"],"kind":"struct"},"6:4506:39828":{"crate_id":6,"path":["libc","unix","linux_like","linux","posix_spawn_file_actions_t"],"kind":"struct"},"16:5433:3573":{"crate_id":16,"path":["gimli","read","cfi","ParsedEhFrameHdr"],"kind":"struct"},"1:5009:1972":{"crate_id":1,"path":["std","os","fd","raw","AsRawFd"],"kind":"trait"},"6:5684:40481":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","Elf64_Chdr"],"kind":"struct"},"2:3147:3010":{"crate_id":2,"path":["core","ops","range","OneSidedRange"],"kind":"trait"},"6:1668:37452":{"crate_id":6,"path":["libc","unix","linux_like","arpreq"],"kind":"struct"},"2:47220:2195":{"crate_id":2,"path":["core","iter","adapters","map_while","MapWhile"],"kind":"struct"},"6:1686:37454":{"crate_id":6,"path":["libc","unix","linux_like","arphdr"],"kind":"struct"},"2:56947:241":{"crate_id":2,"path":["core","core_simd","fmt","fmt","Wrapper"],"kind":"struct"},"1:7896:2439":{"crate_id":1,"path":["std","thread","Thread"],"kind":"struct"},"6:4540:39832":{"crate_id":6,"path":["libc","unix","linux_like","linux","arpd_request"],"kind":"struct"},"17:9382:44171":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbolTable"],"kind":"struct"},"2:47253:2198":{"crate_id":2,"path":["core","iter","adapters","scan","Scan"],"kind":"struct"},"11:44:3442":{"crate_id":11,"path":["adler","Adler32"],"kind":"struct"},"5:1195:2306":{"crate_id":5,"path":["alloc","collections","btree","map","entry","Entry"],"kind":"enum"},"16:5472:3576":{"crate_id":16,"path":["gimli","read","cfi","EhFrame"],"kind":"struct"},"5:3560:59106":{"crate_id":5,"path":["alloc","collections","linked_list","drop","DropGuard"],"kind":"struct"},"2:2753:2041":{"crate_id":2,"path":["core","ops","arith","Add"],"kind":"trait"},"3:223:206":{"crate_id":3,"path":["compiler_builtins","float","cmp","Result"],"kind":"enum"},"1:2578:2249":{"crate_id":1,"path":["std","io","buffered","bufwriter","BufWriter"],"kind":"struct"},"1:5087:1971":{"crate_id":1,"path":["std","os","fd","owned","AsFd"],"kind":"trait"},"1:5574:118":{"crate_id":1,"path":["std","path","Display"],"kind":"struct"},"16:4888:43111":{"crate_id":16,"path":["gimli","constants","DwMacro"],"kind":"struct"},"2:46547:3548":{"crate_id":2,"path":["core","any","tags","Value"],"kind":"struct"},"2:21876:166":{"crate_id":2,"path":["core","num","nonzero","NonZeroI16"],"kind":"struct"},"6:4361:39817":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_abs_setup"],"kind":"struct"},"16:5628:3587":{"crate_id":16,"path":["gimli","read","cfi","CommonInformationEntry"],"kind":"struct"},"17:12307:49132":{"crate_id":17,"path":["object","macho","Nlist32"],"kind":"struct"},"12:2198:59967":{"crate_id":12,"path":["hashbrown","raw","TableLayout"],"kind":"struct"},"5:1943:2457":{"crate_id":5,"path":["alloc","collections","btree","mem","replace","PanicGuard"],"kind":"struct"},"17:9764:44216":{"crate_id":17,"path":["object","read","elf","version","VerdauxIterator"],"kind":"struct"},"16:2705:3843":{"crate_id":16,"path":["gimli","common","DebugRngListsIndex"],"kind":"struct"},"6:5672:40480":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","regex_t"],"kind":"struct"},"2:3199:2743":{"crate_id":2,"path":["core","ops","unsize","CoerceUnsized"],"kind":"trait"},"1:774:140":{"crate_id":1,"path":["std","collections","hash","map","HashMap"],"kind":"struct"},"1:1091:2306":{"crate_id":1,"path":["std","collections","hash","map","Entry"],"kind":"enum"},"2:50009:2237":{"crate_id":2,"path":["core","str","iter","Bytes"],"kind":"struct"},"17:12909:49820":{"crate_id":17,"path":["object","pe","ImageAuxSymbolFunctionBeginEnd"],"kind":"struct"},"17:10385:4001":{"crate_id":17,"path":["object","read","pe","import","ImportDescriptorIterator"],"kind":"struct"},"2:2817:1906":{"crate_id":2,"path":["core","ops","bit","BitOr"],"kind":"trait"},"2:21205:56894":{"crate_id":2,"path":["core","num","dec2flt","decimal","Decimal"],"kind":"struct"},"1:598:2409":{"crate_id":1,"path":["std","thread","JoinHandle"],"kind":"struct"},"12:1681:142":{"crate_id":12,"path":["hashbrown","set","HashSet"],"kind":"struct"},"1:8330:2267":{"crate_id":1,"path":["std","io","readbuf","BorrowedCursor"],"kind":"struct"},"17:13413:50285":{"crate_id":17,"path":["object","pe","ImageEnclaveConfig32"],"kind":"struct"},"5:1981:3243":{"crate_id":5,"path":["alloc","collections","btree","navigate","LeafRange"],"kind":"struct"},"2:49933:2012":{"crate_id":2,"path":["core","slice","iter","RChunksExactMut"],"kind":"struct"},"16:4357:42964":{"crate_id":16,"path":["gimli","constants","DwEnd"],"kind":"struct"},"5:3541:1937":{"crate_id":5,"path":["alloc","collections","linked_list","DrainFilter"],"kind":"struct"},"1:5227:10444":{"crate_id":1,"path":["std","panic","always_abort"],"kind":"function"},"17:10894:3967":{"crate_id":17,"path":["object","read","CompressedData"],"kind":"struct"},"16:5737:3592":{"crate_id":16,"path":["gimli","read","cfi","UnwindContext"],"kind":"struct"},"2:51748:2839":{"crate_id":2,"path":["core","core_arch","simd","u8x4"],"kind":"struct"},"16:6284:3681":{"crate_id":16,"path":["gimli","read","index","DebugTuIndex"],"kind":"struct"},"2:20266:2692":{"crate_id":2,"path":["core","core_simd","eq","SimdPartialEq"],"kind":"trait"},"2:1643:2856":{"crate_id":2,"path":["core","mem","Discriminant"],"kind":"struct"},"2:2839:1921":{"crate_id":2,"path":["core","ops","bit","BitAndAssign"],"kind":"trait"},"16:4262:42941":{"crate_id":16,"path":["gimli","constants","DwAte"],"kind":"struct"},"2:19981:1875":{"crate_id":2,"path":["core","core_simd","swizzle","reverse","Reverse"],"kind":"struct"},"18:96:50714":{"crate_id":18,"path":["memchr","memchr","iter","Memchr2"],"kind":"struct"},"2:52295:2809":{"crate_id":2,"path":["core","core_arch","simd","i16x8"],"kind":"struct"},"17:11485:48846":{"crate_id":17,"path":["object","macho","DyldCacheMappingInfo"],"kind":"struct"},"2:52569:56388":{"crate_id":2,"path":["core","core_arch","simd","m64x2"],"kind":"struct"},"1:2401:2489":{"crate_id":1,"path":["std","fs","canonicalize"],"kind":"function"},"1:1608:1935":{"crate_id":1,"path":["std","collections","hash","set","IntoIter"],"kind":"struct"},"6:5498:40468":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__exit_status"],"kind":"struct"},"2:8605:2071":{"crate_id":2,"path":["core","fmt","Binary"],"kind":"trait"},"1:7300:53089":{"crate_id":1,"path":["std","sys_common","wstr","WStrUnits"],"kind":"struct"},"1:8442:2239":{"crate_id":1,"path":["std","io","Lines"],"kind":"struct"},"2:48182:35790":{"crate_id":2,"path":["core","panicking","AssertKind"],"kind":"enum"},"6:7220:39987":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_condattr_t"],"kind":"struct"},"1:11704:51515":{"crate_id":1,"path":["std","sys_common","thread_local_key","Key"],"kind":"struct"},"1:4324:1964":{"crate_id":1,"path":["std","os","unix","fs","DirBuilderExt"],"kind":"trait"},"6:4611:39841":{"crate_id":6,"path":["libc","unix","linux_like","linux","j1939_filter"],"kind":"struct"},"2:3319:68":{"crate_id":2,"path":["core","any","Any"],"kind":"trait"},"17:11661:48964":{"crate_id":17,"path":["object","macho","Section32"],"kind":"struct"},"16:7483:3680":{"crate_id":16,"path":["gimli","read","str","DebugStrOffsets"],"kind":"struct"},"17:8701:44099":{"crate_id":17,"path":["object","endian","I64Bytes"],"kind":"struct"},"2:49058:129":{"crate_id":2,"path":["core","fmt","rt","v1","FormatSpec"],"kind":"struct"},"1:11289:51495":{"crate_id":1,"path":["std","sys","unix","process","process_common","ProgramKind"],"kind":"enum"},"2:49378:56414":{"crate_id":2,"path":["core","hash","sip","Sip13Rounds"],"kind":"struct"},"17:10506:44384":{"crate_id":17,"path":["object","read","pe","rich","RichHeaderInfo"],"kind":"struct"},"2:4126:2084":{"crate_id":2,"path":["core","cell","Cell"],"kind":"struct"},"17:11161:44769":{"crate_id":17,"path":["object","elf","Rela32"],"kind":"struct"},"17:10520:44413":{"crate_id":17,"path":["object","read","pe","rich","RichHeaderEntry"],"kind":"struct"},"1:1615:1937":{"crate_id":1,"path":["std","collections","hash","set","DrainFilter"],"kind":"struct"},"1:8391:2235":{"crate_id":1,"path":["std","io","SeekFrom"],"kind":"enum"},"16:153:3538":{"crate_id":16,"path":["gimli","read","util","ArrayVec"],"kind":"struct"},"17:8441:4026":{"crate_id":17,"path":["object","common","SymbolFlags"],"kind":"enum"},"17:1771:3925":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbolIterator"],"kind":"struct"},"6:6953:36505":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","not_x32","statvfs"],"kind":"struct"},"13:0:1717":{"crate_id":13,"path":["std_detect"],"kind":"module"},"1:9442:51463":{"crate_id":1,"path":["std","sync","mpmc","select","Token"],"kind":"struct"},"2:4059:2863":{"crate_id":2,"path":["core","cell","lazy","LazyCell"],"kind":"struct"},"16:5388:3571":{"crate_id":16,"path":["gimli","read","cfi","DebugFrame"],"kind":"struct"},"5:3733:1936":{"crate_id":5,"path":["alloc","collections","vec_deque","drain","Drain"],"kind":"struct"},"18:727:4086":{"crate_id":18,"path":["memchr","memmem","SearcherConfig"],"kind":"struct"},"6:5443:40410":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","statx"],"kind":"struct"},"2:52963:2810":{"crate_id":2,"path":["core","core_arch","simd","i16x16"],"kind":"struct"},"16:2894:3854":{"crate_id":16,"path":["gimli","common","UnitSectionOffset"],"kind":"enum"},"17:12349:49196":{"crate_id":17,"path":["object","macho","RelocationInfo"],"kind":"struct"},"2:2481:75":{"crate_id":2,"path":["core","convert","AsRef"],"kind":"trait"},"1:8687:1898":{"crate_id":1,"path":["std","os","unix","net","addr","SocketAddr"],"kind":"struct"},"2:56986:241":{"crate_id":2,"path":["core","core_simd","fmt","fmt","Wrapper"],"kind":"struct"},"18:690:4083":{"crate_id":18,"path":["memchr","memmem","FinderRev"],"kind":"struct"},"2:11636:29401":{"crate_id":2,"path":["core","future","into_future","IntoFuture"],"kind":"trait"},"17:13148:50204":{"crate_id":17,"path":["object","pe","ImageResourceDataEntry"],"kind":"struct"},"2:20456:2690":{"crate_id":2,"path":["core","core_simd","masks","Mask"],"kind":"struct"},"1:11670:50909":{"crate_id":1,"path":["std","sys_common","wtf8","Wtf8"],"kind":"struct"},"6:545:36553":{"crate_id":6,"path":["libc","unix","hostent"],"kind":"struct"},"17:13031:50187":{"crate_id":17,"path":["object","pe","ImageThunkData64"],"kind":"struct"},"17:9831:4048":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCacheImageIterator"],"kind":"struct"},"17:9805:4045":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCache"],"kind":"struct"},"1:10322:2536":{"crate_id":1,"path":["std","sys","unix","net","Socket"],"kind":"struct"},"2:2327:185":{"crate_id":2,"path":["core","cmp","PartialOrd"],"kind":"trait"},"5:0:281":{"crate_id":5,"path":["alloc"],"kind":"module"},"17:11617:48957":{"crate_id":17,"path":["object","macho","SegmentCommand32"],"kind":"struct"},"2:4272:2085":{"crate_id":2,"path":["core","cell","Ref"],"kind":"struct"},"2:8329:2906":{"crate_id":2,"path":["core","fmt","builders","PadAdapterState"],"kind":"struct"},"2:47285:2200":{"crate_id":2,"path":["core","iter","adapters","skip_while","SkipWhile"],"kind":"struct"},"5:949:59106":{"crate_id":5,"path":["alloc","collections","binary_heap","drop","DropGuard"],"kind":"struct"},"1:7870:2437":{"crate_id":1,"path":["std","thread","Builder"],"kind":"struct"},"9:33:3381":{"crate_id":9,"path":["miniz_oxide","deflate","buffer","LocalBuf"],"kind":"struct"},"5:6095:1935":{"crate_id":5,"path":["alloc","vec","into_iter","IntoIter"],"kind":"struct"},"2:9489:2014":{"crate_id":2,"path":["core","slice","iter","RSplit"],"kind":"struct"},"17:9283:44172":{"crate_id":17,"path":["object","read","coff","file","CoffCommon"],"kind":"struct"},"2:46905:2938":{"crate_id":2,"path":["core","char","EscapeDebug"],"kind":"struct"},"17:0:1727":{"crate_id":17,"path":["object"],"kind":"module"},"16:6137:3666":{"crate_id":16,"path":["gimli","read","abbrev","Abbreviations"],"kind":"struct"},"17:8393:3957":{"crate_id":17,"path":["object","common","SegmentFlags"],"kind":"enum"},"6:4286:39808":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_envelope"],"kind":"struct"},"17:11547:44325":{"crate_id":17,"path":["object","macho","FatArch64"],"kind":"struct"},"1:4216:2404":{"crate_id":1,"path":["std","os","unix","ffi","os_str","OsStrExt"],"kind":"trait"},"6:4527:39830":{"crate_id":6,"path":["libc","unix","linux_like","linux","genlmsghdr"],"kind":"struct"},"1:3192:2256":{"crate_id":1,"path":["std","io","stdio","Stdin"],"kind":"struct"},"5:3014:1941":{"crate_id":5,"path":["alloc","collections","btree","set","Union"],"kind":"struct"},"14:40:44549":{"crate_id":14,"path":["rustc_demangle","v0","Ident"],"kind":"struct"},"2:2154:576":{"crate_id":2,"path":["core","ptr","drop_in_place"],"kind":"function"},"2:2774:2049":{"crate_id":2,"path":["core","ops","arith","Rem"],"kind":"trait"},"1:965:2299":{"crate_id":1,"path":["std","collections","hash","map","IntoKeys"],"kind":"struct"},"12:1845:1937":{"crate_id":12,"path":["hashbrown","set","DrainFilter"],"kind":"struct"},"17:12514:49596":{"crate_id":17,"path":["object","pe","ImageOs2Header"],"kind":"struct"},"2:48267:179":{"crate_id":2,"path":["core","sync","atomic","Ordering"],"kind":"enum"},"16:7343:3678":{"crate_id":16,"path":["gimli","read","rnglists","DebugRngLists"],"kind":"struct"},"16:2842:3606":{"crate_id":16,"path":["gimli","common","DebugFrameOffset"],"kind":"struct"},"2:8833:143":{"crate_id":2,"path":["core","hash","Hasher"],"kind":"trait"},"12:1534:3466":{"crate_id":12,"path":["hashbrown","rustc_entry","RustcOccupiedEntry"],"kind":"struct"},"2:49831:2002":{"crate_id":2,"path":["core","slice","iter","ChunksExact"],"kind":"struct"},"2:48106:2699":{"crate_id":2,"path":["core","option","Item"],"kind":"struct"},"1:4838:2406":{"crate_id":1,"path":["std","os","unix","thread","JoinHandleExt"],"kind":"trait"},"2:1636:575":{"crate_id":2,"path":["core","mem","drop"],"kind":"function"},"5:3362:2009":{"crate_id":5,"path":["alloc","collections","linked_list","IterMut"],"kind":"struct"},"1:11144:117":{"crate_id":1,"path":["std","sys","unix","fs","DirBuilder"],"kind":"struct"},"1:969:2300":{"crate_id":1,"path":["std","collections","hash","map","IntoValues"],"kind":"struct"},"16:2825:3847":{"crate_id":16,"path":["gimli","common","DebugTypeSignature"],"kind":"struct"},"16:6034:3720":{"crate_id":16,"path":["gimli","read","dwarf","Unit"],"kind":"struct"},"17:13436:50286":{"crate_id":17,"path":["object","pe","ImageEnclaveConfig64"],"kind":"struct"},"12:1029:2308":{"crate_id":12,"path":["hashbrown","map","VacantEntry"],"kind":"struct"},"1:5826:2121":{"crate_id":1,"path":["std","process","Termination"],"kind":"trait"},"1:8645:2524":{"crate_id":1,"path":["std","net","tcp","IntoIncoming"],"kind":"struct"},"2:20303:2423":{"crate_id":2,"path":["core","core_simd","lane_count","SupportedLaneCount"],"kind":"trait"},"17:9501:3933":{"crate_id":17,"path":["object","read","elf","section","SectionTable"],"kind":"struct"},"2:46858:2939":{"crate_id":2,"path":["core","char","EscapeUnicode"],"kind":"struct"},"16:6161:3722":{"crate_id":16,"path":["gimli","read","abbrev","Attributes"],"kind":"enum"},"5:1240:2309":{"crate_id":5,"path":["alloc","collections","btree","map","entry","OccupiedError"],"kind":"struct"},"6:6277:37376":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statfs"],"kind":"struct"},"2:46976:3016":{"crate_id":2,"path":["core","ffi","c_str","FromBytesWithNulErrorKind"],"kind":"enum"},"2:50766:2946":{"crate_id":2,"path":["core","str","BytesIsNotEmpty"],"kind":"struct"},"17:12630:49651":{"crate_id":17,"path":["object","pe","ImageDataDirectory"],"kind":"struct"},"1:6137:55441":{"crate_id":1,"path":["std","sync","mpmc","array","Channel"],"kind":"struct"},"16:6735:3692":{"crate_id":16,"path":["gimli","read","loclists","RawLocListIter"],"kind":"struct"},"2:6610:2337":{"crate_id":2,"path":["core","iter","range","Step"],"kind":"trait"},"16:6619:3734":{"crate_id":16,"path":["gimli","read","line","FileEntry"],"kind":"struct"},"1:11445:2116":{"crate_id":1,"path":["std","sys","unix","process","process_inner","ExitStatus"],"kind":"struct"},"18:719:4085":{"crate_id":18,"path":["memchr","memmem","NeedleInfo"],"kind":"struct"},"2:21909:167":{"crate_id":2,"path":["core","num","nonzero","NonZeroI32"],"kind":"struct"},"1:8370:2265":{"crate_id":1,"path":["std","io","util","Sink"],"kind":"struct"},"1:990:2303":{"crate_id":1,"path":["std","collections","hash","map","RawOccupiedEntryMut"],"kind":"struct"},"6:6981:41278":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","align","clone_args"],"kind":"struct"},"6:1550:37442":{"crate_id":6,"path":["libc","unix","linux_like","addrinfo"],"kind":"struct"},"17:11853:49035":{"crate_id":17,"path":["object","macho","RoutinesCommand32"],"kind":"struct"},"2:54063:17880":{"crate_id":2,"path":["core","core_arch","x86","__m256"],"kind":"struct"},"17:12265:49124":{"crate_id":17,"path":["object","macho","SourceVersionCommand"],"kind":"struct"},"11:0:1722":{"crate_id":11,"path":["adler"],"kind":"module"},"6:600:36561":{"crate_id":6,"path":["libc","unix","servent"],"kind":"struct"},"16:7135:3532":{"crate_id":16,"path":["gimli","read","op","EvaluationWaiting"],"kind":"enum"},"5:6969:3259":{"crate_id":5,"path":["alloc","ffi","c_str","IntoStringError"],"kind":"struct"},"1:11164:53684":{"crate_id":1,"path":["std","sys","unix","kernel_copy","SpliceMode"],"kind":"enum"},"1:4246:1957":{"crate_id":1,"path":["std","os","unix","fs","FileExt"],"kind":"trait"},"2:2843:1923":{"crate_id":2,"path":["core","ops","bit","BitOrAssign"],"kind":"trait"},"1:12298:365":{"crate_id":1,"path":["std","bool"],"kind":"primitive"},"2:7042:148":{"crate_id":2,"path":["core","iter","traits","collect","IntoIterator"],"kind":"trait"},"2:46488:3008":{"crate_id":2,"path":["core","ops","range","Bound"],"kind":"enum"},"2:48250:2009":{"crate_id":2,"path":["core","result","IterMut"],"kind":"struct"},"18:574:60910":{"crate_id":18,"path":["memchr","memmem","twoway","Forward"],"kind":"struct"},"1:887:1934":{"crate_id":1,"path":["std","collections","hash","map","Iter"],"kind":"struct"},"2:48140:3019":{"crate_id":2,"path":["core","panic","location","Location"],"kind":"struct"},"1:4906:51177":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt","st_mtime"],"kind":"foreign_type"},"16:7543:3672":{"crate_id":16,"path":["gimli","read","unit","DebugInfo"],"kind":"struct"},"17:3125:44296":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbolIterator"],"kind":"struct"},"17:8241:4027":{"crate_id":17,"path":["object","common","SymbolKind"],"kind":"enum"},"1:2029:180":{"crate_id":1,"path":["std","ffi","os_str","OsStr"],"kind":"struct"},"16:7929:3748":{"crate_id":16,"path":["gimli","read","unit","EntriesTreeNode"],"kind":"struct"},"17:1931:3919":{"crate_id":17,"path":["object","read","elf","relocation","ElfDynamicRelocationIterator"],"kind":"struct"},"1:10860:2258":{"crate_id":1,"path":["std","sys","unix","stdio","Stdout"],"kind":"struct"},"16:2433:3540":{"crate_id":16,"path":["gimli","common","DebugInfoOffset"],"kind":"struct"},"2:21384:2996":{"crate_id":2,"path":["core","num","error","ParseIntError"],"kind":"struct"},"2:6563:2682":{"crate_id":2,"path":["core","iter","adapters","GenericShunt"],"kind":"struct"},"6:62:36167":{"crate_id":6,"path":["libc","unix","DIR"],"kind":"enum"},"6:4761:39857":{"crate_id":6,"path":["libc","unix","linux_like","linux","af_alg_iv"],"kind":"struct"},"16:2727:3844":{"crate_id":16,"path":["gimli","common","DebugStrOffset"],"kind":"struct"},"1:11903:26396":{"crate_id":1,"path":["std","alloc","System"],"kind":"struct"},"1:1105:2307":{"crate_id":1,"path":["std","collections","hash","map","OccupiedEntry"],"kind":"struct"},"6:4280:39807":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_trigger"],"kind":"struct"},"16:2631:3853":{"crate_id":16,"path":["gimli","common","RawRangeListsOffset"],"kind":"struct"},"17:11528:44326":{"crate_id":17,"path":["object","macho","FatHeader"],"kind":"struct"},"17:9108:44104":{"crate_id":17,"path":["object","read","any","SymbolIterator"],"kind":"struct"},"17:9627:3931":{"crate_id":17,"path":["object","read","elf","relocation","RelocationSections"],"kind":"struct"},"5:5000:59137":{"crate_id":5,"path":["alloc","slice","merge","MergeHole"],"kind":"struct"},"2:53223:2823":{"crate_id":2,"path":["core","core_arch","simd","i8x64"],"kind":"struct"},"2:38125:179":{"crate_id":2,"path":["core","cmp","Ordering"],"kind":"enum"},"16:6865:3876":{"crate_id":16,"path":["gimli","read","lookup","PubStuffParser"],"kind":"struct"},"17:13492:50313":{"crate_id":17,"path":["object","pe","ImageCoffSymbolsHeader"],"kind":"struct"},"17:9401:44169":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbol"],"kind":"struct"},"1:9384:51481":{"crate_id":1,"path":["std","sync","mpmc","array","ArrayToken"],"kind":"struct"},"18:538:4095":{"crate_id":18,"path":["memchr","memmem","rabinkarp","NeedleHash"],"kind":"struct"},"2:47069:1990":{"crate_id":2,"path":["core","iter","adapters","array_chunks","ArrayChunks"],"kind":"struct"},"2:10830:2931":{"crate_id":2,"path":["core","str","iter","MatchesInternal"],"kind":"struct"},"1:3271:2255":{"crate_id":1,"path":["std","io","stdio","StderrLock"],"kind":"struct"},"12:1085:3454":{"crate_id":12,"path":["hashbrown","map","OccupiedEntryRef"],"kind":"struct"},"17:11951:49042":{"crate_id":17,"path":["object","macho","DylibModule32"],"kind":"struct"},"2:2676:224":{"crate_id":2,"path":["core","marker","Sync"],"kind":"trait"},"5:7014:3176":{"crate_id":5,"path":["alloc","string","FromUtf16Error"],"kind":"struct"},"16:7847:3747":{"crate_id":16,"path":["gimli","read","unit","AttrsIter"],"kind":"struct"},"5:6321:3160":{"crate_id":5,"path":["alloc","vec","in_place_drop","InPlaceDrop"],"kind":"struct"},"6:4096:39789":{"crate_id":6,"path":["libc","unix","linux_like","linux","rlimit64"],"kind":"struct"},"6:4247:39803":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_absinfo"],"kind":"struct"},"17:1021:4043":{"crate_id":17,"path":["object","read","coff","relocation","CoffRelocationIterator"],"kind":"struct"},"2:50927:201":{"crate_id":2,"path":["core","future","ready","Ready"],"kind":"struct"},"1:10581:2126":{"crate_id":1,"path":["std","sys","unix","pipe","AnonPipe"],"kind":"struct"},"2:56960:241":{"crate_id":2,"path":["core","core_simd","fmt","fmt","Wrapper"],"kind":"struct"},"17:11559:48853":{"crate_id":17,"path":["object","macho","MachHeader32"],"kind":"struct"},"12:762:1937":{"crate_id":12,"path":["hashbrown","map","DrainFilter"],"kind":"struct"},"17:242:60652":{"crate_id":17,"path":["object","read","util","DebugByte"],"kind":"struct"},"5:2947:1934":{"crate_id":5,"path":["alloc","collections","btree","set","Iter"],"kind":"struct"},"2:2935:1861":{"crate_id":2,"path":["core","ops","function","FnMut"],"kind":"trait"},"5:3106:1937":{"crate_id":5,"path":["alloc","collections","btree","set","DrainFilter"],"kind":"struct"},"2:50988:2961":{"crate_id":2,"path":["core","task","wake","RawWakerVTable"],"kind":"struct"},"2:39299:2122":{"crate_id":2,"path":["core","convert","Infallible"],"kind":"enum"},"6:5733:40487":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_seccomp"],"kind":"struct"},"6:5772:40489":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_data"],"kind":"union"},"2:20344:2690":{"crate_id":2,"path":["core","core_simd","masks","mask_impl","Mask"],"kind":"struct"},"5:6752:3218":{"crate_id":5,"path":["alloc","collections","binary_heap","IntoIterSorted"],"kind":"struct"},"2:48801:2070":{"crate_id":2,"path":["core","fmt","num","Octal"],"kind":"struct"},"17:11149:44768":{"crate_id":17,"path":["object","elf","Rel32"],"kind":"struct"},"16:3188:42426":{"crate_id":16,"path":["gimli","arch","AArch64"],"kind":"struct"},"17:12198:49119":{"crate_id":17,"path":["object","macho","LinkerOptionCommand"],"kind":"struct"},"19:0:998":{"crate_id":19,"path":["panic_unwind"],"kind":"module"},"1:9269:2319":{"crate_id":1,"path":["std","sync","mpsc","TryIter"],"kind":"struct"},"16:3599:42446":{"crate_id":16,"path":["gimli","constants","DwSectV2"],"kind":"struct"},"17:8814:127":{"crate_id":17,"path":["object","read","any","File"],"kind":"struct"},"16:4144:42871":{"crate_id":16,"path":["gimli","constants","DwAt"],"kind":"struct"},"2:51918:56314":{"crate_id":2,"path":["core","core_arch","simd","u64x1"],"kind":"struct"},"2:48808:2072":{"crate_id":2,"path":["core","fmt","num","LowerHex"],"kind":"struct"},"5:6777:57762":{"crate_id":5,"path":["alloc","collections","btree","merge_iter","Peeked"],"kind":"enum"},"1:6017:2551":{"crate_id":1,"path":["std","sync","barrier","BarrierWaitResult"],"kind":"struct"},"17:11436:48845":{"crate_id":17,"path":["object","macho","DyldCacheHeader"],"kind":"struct"},"1:12325:13":{"crate_id":1,"path":["std","fn"],"kind":"primitive"},"17:12850:49752":{"crate_id":17,"path":["object","pe","ImageSymbolBytes"],"kind":"struct"},"2:7429:2334":{"crate_id":2,"path":["core","iter","traits","marker","TrustedLen"],"kind":"trait"},"17:10532:126":{"crate_id":17,"path":["object","read","Error"],"kind":"struct"},"17:10296:44380":{"crate_id":17,"path":["object","read","pe","section","PeSection"],"kind":"struct"},"9:592:3331":{"crate_id":9,"path":["miniz_oxide","deflate","core","CompressionStrategy"],"kind":"enum"},"1:6604:162":{"crate_id":1,"path":["std","sync","mutex","Mutex"],"kind":"struct"},"1:12306:1351":{"crate_id":1,"path":["std","str"],"kind":"primitive"},"1:1887:4596":{"crate_id":1,"path":["std","env","Args"],"kind":"struct"},"1:686:7100":{"crate_id":1,"path":["std","backtrace","BytesOrWide"],"kind":"enum"},"2:2784:2040":{"crate_id":2,"path":["core","ops","arith","AddAssign"],"kind":"trait"},"17:12485:49595":{"crate_id":17,"path":["object","pe","ImageDosHeader"],"kind":"struct"},"17:11106:44731":{"crate_id":17,"path":["object","elf","Sym64"],"kind":"struct"},"5:1043:57780":{"crate_id":5,"path":["alloc","collections","btree","append","MergeIter"],"kind":"struct"},"16:7249:3536":{"crate_id":16,"path":["gimli","read","op","Evaluation"],"kind":"struct"},"2:20447:1899":{"crate_id":2,"path":["core","core_simd","masks","sealed","Sealed"],"kind":"trait"},"2:52179:2833":{"crate_id":2,"path":["core","core_arch","simd","u32x4"],"kind":"struct"},"2:48330:91":{"crate_id":2,"path":["core","sync","atomic","AtomicU8"],"kind":"struct"},"1:0:1343":{"crate_id":1,"path":["std"],"kind":"module"},"5:6170:59106":{"crate_id":5,"path":["alloc","vec","into_iter","drop","DropGuard"],"kind":"struct"},"12:1836:1935":{"crate_id":12,"path":["hashbrown","set","IntoIter"],"kind":"struct"},"16:7970:3683":{"crate_id":16,"path":["gimli","read","unit","DebugTypesUnitHeadersIter"],"kind":"struct"},"6:5699:40483":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","seminfo"],"kind":"struct"},"2:49386:56380":{"crate_id":2,"path":["core","hash","sip","Sip24Rounds"],"kind":"struct"},"1:2250:2478":{"crate_id":1,"path":["std","fs","DirEntry"],"kind":"struct"},"17:13192:50230":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation32V2"],"kind":"struct"},"1:9831:2477":{"crate_id":1,"path":["std","sys","unix","fs","ReadDir"],"kind":"struct"},"6:4489:2543":{"crate_id":6,"path":["libc","unix","linux_like","linux","ucred"],"kind":"struct"},"16:6496:3731":{"crate_id":16,"path":["gimli","read","line","ColumnType"],"kind":"enum"},"6:4644:39845":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlmsghdr"],"kind":"struct"},"17:10625:3910":{"crate_id":17,"path":["object","read","SymbolIndex"],"kind":"struct"},"6:4335:39814":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_effect"],"kind":"struct"},"12:815:2301":{"crate_id":12,"path":["hashbrown","map","RawEntryBuilderMut"],"kind":"struct"},"2:21297:56325":{"crate_id":2,"path":["core","num","flt2dec","decoder","FullDecoded"],"kind":"enum"},"16:6146:3714":{"crate_id":16,"path":["gimli","read","abbrev","Abbreviation"],"kind":"struct"},"2:4693:56512":{"crate_id":2,"path":["core","ffi","sealed_trait","VaArgSafe"],"kind":"trait"},"17:11748:49027":{"crate_id":17,"path":["object","macho","DylibCommand"],"kind":"struct"},"2:46300:2608":{"crate_id":2,"path":["core","ops","generator","GeneratorState"],"kind":"enum"},"2:20706:2693":{"crate_id":2,"path":["core","core_simd","ord","SimdPartialOrd"],"kind":"trait"},"17:9930:44307":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandData"],"kind":"struct"},"17:10233:44405":{"crate_id":17,"path":["object","read","pe","file","PeComdat"],"kind":"struct"},"17:9738:3991":{"crate_id":17,"path":["object","read","elf","version","VersionTable"],"kind":"struct"},"9:827:3286":{"crate_id":9,"path":["miniz_oxide","inflate","TINFLStatus"],"kind":"enum"},"16:3632:42455":{"crate_id":16,"path":["gimli","constants","DwUt"],"kind":"struct"},"2:48242:1934":{"crate_id":2,"path":["core","result","Iter"],"kind":"struct"},"9:863:3289":{"crate_id":9,"path":["miniz_oxide","MZFlush"],"kind":"enum"},"14:215:42348":{"crate_id":14,"path":["rustc_demangle","TryDemangleError"],"kind":"struct"},"5:36:3154":{"crate_id":5,"path":["alloc","raw_vec","RawVec"],"kind":"struct"},"17:13024:50186":{"crate_id":17,"path":["object","pe","ImageImportByName"],"kind":"struct"},"2:2255:105":{"crate_id":2,"path":["core","clone","Clone"],"kind":"trait"},"1:8471:2157":{"crate_id":1,"path":["std","net","ip_addr","Ipv4Addr"],"kind":"struct"},"17:12251:49123":{"crate_id":17,"path":["object","macho","EntryPointCommand"],"kind":"struct"},"2:50980:2960":{"crate_id":2,"path":["core","task","wake","RawWaker"],"kind":"struct"},"1:1620:1938":{"crate_id":1,"path":["std","collections","hash","set","Intersection"],"kind":"struct"},"17:9317:4038":{"crate_id":17,"path":["object","read","coff","section","CoffSegmentIterator"],"kind":"struct"},"2:20254:1899":{"crate_id":2,"path":["core","core_simd","elements","sealed","Sealed"],"kind":"trait"},"1:12320:1446":{"crate_id":1,"path":["std","u64"],"kind":"primitive"},"2:1737:3067":{"crate_id":2,"path":["core","ptr","metadata","Pointee"],"kind":"trait"},"2:21257:2755":{"crate_id":2,"path":["core","num","dec2flt","FloatErrorKind"],"kind":"enum"},"17:13176:50228":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation32"],"kind":"struct"},"16:4635:43050":{"crate_id":16,"path":["gimli","constants","DwInl"],"kind":"struct"},"6:646:36591":{"crate_id":6,"path":["libc","unix","linux_like","timezone"],"kind":"enum"},"17:9071:60710":{"crate_id":17,"path":["object","read","any","SymbolTableInternal"],"kind":"enum"},"17:9263:44155":{"crate_id":17,"path":["object","read","archive","ArchiveMemberIterator"],"kind":"struct"},"9:920:3288":{"crate_id":9,"path":["miniz_oxide","MZError"],"kind":"enum"},"17:10360:4058":{"crate_id":17,"path":["object","read","pe","export","ExportTable"],"kind":"struct"},"17:8162:3971":{"crate_id":17,"path":["object","common","SectionKind"],"kind":"enum"},"2:8611:190":{"crate_id":2,"path":["core","fmt","Pointer"],"kind":"trait"},"18:507:60910":{"crate_id":18,"path":["memchr","memmem","genericsimd","Forward"],"kind":"struct"},"2:1760:3066":{"crate_id":2,"path":["core","ptr","metadata","DynMetadata"],"kind":"struct"},"2:52103:2841":{"crate_id":2,"path":["core","core_arch","simd","u8x16"],"kind":"struct"},"17:10949:44547":{"crate_id":17,"path":["object","elf","FileHeader32"],"kind":"struct"},"2:20178:2687":{"crate_id":2,"path":["core","core_simd","elements","float","SimdFloat"],"kind":"trait"},"17:11343:44950":{"crate_id":17,"path":["object","elf","NoteHeader64"],"kind":"struct"},"2:7005:2190":{"crate_id":2,"path":["core","iter","traits","accum","Product"],"kind":"trait"},"1:5680:2111":{"crate_id":1,"path":["std","process","ChildStdout"],"kind":"struct"},"9:676:3378":{"crate_id":9,"path":["miniz_oxide","deflate","CompressionLevel"],"kind":"enum"},"1:3232:2259":{"crate_id":1,"path":["std","io","stdio","StdoutLock"],"kind":"struct"},"2:20971:2691":{"crate_id":2,"path":["core","core_simd","vector","SimdElement"],"kind":"trait"},"17:11787:49030":{"crate_id":17,"path":["object","macho","SubUmbrellaCommand"],"kind":"struct"},"12:853:2304":{"crate_id":12,"path":["hashbrown","map","RawVacantEntryMut"],"kind":"struct"},"17:10403:3903":{"crate_id":17,"path":["object","read","pe","import","Import"],"kind":"enum"},"18:681:4082":{"crate_id":18,"path":["memchr","memmem","Finder"],"kind":"struct"},"16:4606:43045":{"crate_id":16,"path":["gimli","constants","DwCc"],"kind":"struct"},"5:5436:1936":{"crate_id":5,"path":["alloc","string","Drain"],"kind":"struct"},"16:2605:3893":{"crate_id":16,"path":["gimli","common","DebugMacroOffset"],"kind":"struct"},"5:6881:1944":{"crate_id":5,"path":["alloc","collections","TryReserveError"],"kind":"struct"},"2:50277:2239":{"crate_id":2,"path":["core","str","iter","Lines"],"kind":"struct"},"6:4398:39820":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Ehdr"],"kind":"struct"},"5:6992:220":{"crate_id":5,"path":["alloc","string","String"],"kind":"struct"},"2:39335:3249":{"crate_id":2,"path":["core","error","private","Internal"],"kind":"struct"},"17:10121:3966":{"crate_id":17,"path":["object","read","macho","section","MachOSectionInternal"],"kind":"struct"},"10:0:1721":{"crate_id":10,"path":["rustc_std_workspace_alloc"],"kind":"module"},"2:2932:1860":{"crate_id":2,"path":["core","ops","function","Fn"],"kind":"trait"},"12:646:2009":{"crate_id":12,"path":["hashbrown","map","IterMut"],"kind":"struct"},"1:3594:2161":{"crate_id":1,"path":["std","net","display_buffer","DisplayBuffer"],"kind":"struct"},"16:2300:3863":{"crate_id":16,"path":["gimli","common","LineEncoding"],"kind":"struct"},"2:50023:2005":{"crate_id":2,"path":["core","str","iter","Split"],"kind":"struct"},"2:47112:2179":{"crate_id":2,"path":["core","iter","adapters","cloned","Cloned"],"kind":"struct"},"16:5374:3669":{"crate_id":16,"path":["gimli","read","addr","DebugAddr"],"kind":"struct"},"2:47536:2348":{"crate_id":2,"path":["core","iter","sources","once","Once"],"kind":"struct"},"6:5480:40467":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","aiocb"],"kind":"struct"},"9:956:3287":{"crate_id":9,"path":["miniz_oxide","DataFormat"],"kind":"enum"},"2:47121:2180":{"crate_id":2,"path":["core","iter","adapters","copied","Copied"],"kind":"struct"},"5:2988:1938":{"crate_id":5,"path":["alloc","collections","btree","set","Intersection"],"kind":"struct"},"2:49582:1993":{"crate_id":2,"path":["core","slice","ascii","EscapeAscii"],"kind":"struct"},"17:10374:4000":{"crate_id":17,"path":["object","read","pe","import","ImportTable"],"kind":"struct"},"1:931:2297":{"crate_id":1,"path":["std","collections","hash","map","Values"],"kind":"struct"},"2:11975:1988":{"crate_id":2,"path":["core","alloc","Allocator"],"kind":"trait"},"1:6233:202":{"crate_id":1,"path":["std","sync","mpmc","counter","Receiver"],"kind":"struct"},"2:2490:131":{"crate_id":2,"path":["core","convert","From"],"kind":"trait"},"1:8448:151":{"crate_id":1,"path":["std","net","ip_addr","IpAddr"],"kind":"enum"},"2:9454:2021":{"crate_id":2,"path":["core","slice","iter","SplitInclusiveMut"],"kind":"struct"},"5:630:57747":{"crate_id":5,"path":["alloc","boxed","from","StringError"],"kind":"struct"},"16:7093:3528":{"crate_id":16,"path":["gimli","read","op","Piece"],"kind":"struct"},"2:50746:2950":{"crate_id":2,"path":["core","str","CharEscapeUnicode"],"kind":"struct"},"17:10497:44412":{"crate_id":17,"path":["object","read","pe","resource","ResourceNameOrId"],"kind":"enum"},"6:4126:39792":{"crate_id":6,"path":["libc","unix","linux_like","linux","spwd"],"kind":"struct"},"2:21189:2759":{"crate_id":2,"path":["core","num","dec2flt","common","BiasedFp"],"kind":"struct"},"1:8139:2250":{"crate_id":1,"path":["std","io","buffered","IntoInnerError"],"kind":"struct"},"1:9370:2557":{"crate_id":1,"path":["std","sync","condvar","WaitTimeoutResult"],"kind":"struct"},"17:9458:3898":{"crate_id":17,"path":["object","read","elf","file","ElfFile"],"kind":"struct"},"1:8904:2366":{"crate_id":1,"path":["std","path","Component"],"kind":"enum"},"2:50306:2936":{"crate_id":2,"path":["core","str","iter","SplitAsciiWhitespace"],"kind":"struct"},"2:49331:1904":{"crate_id":2,"path":["core","hash","sip","SipHasher13"],"kind":"struct"},"17:10583:3905":{"crate_id":17,"path":["object","read","ObjectKind"],"kind":"enum"},"1:1123:2309":{"crate_id":1,"path":["std","collections","hash","map","OccupiedError"],"kind":"struct"},"1:9515:163":{"crate_id":1,"path":["std","sync","mutex","MutexGuard"],"kind":"struct"},"1:11094:53410":{"crate_id":1,"path":["std","sys","unix","fs","StatxExtraFields"],"kind":"struct"},"15:193:3475":{"crate_id":15,"path":["addr2line","LocationRangeUnitIter"],"kind":"struct"},"1:11469:53688":{"crate_id":1,"path":["std","sys","unix","thread","cgroups","Cgroup"],"kind":"enum"},"16:4441:42976":{"crate_id":16,"path":["gimli","constants","DwVirtuality"],"kind":"struct"},"6:4379:39819":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Ehdr"],"kind":"struct"},"1:4441:2587":{"crate_id":1,"path":["std","os","unix","net","ancillary","AncillaryData"],"kind":"enum"},"17:13214:50237":{"crate_id":17,"path":["object","pe","ImagePrologueDynamicRelocationHeader"],"kind":"struct"},"6:487:36546":{"crate_id":6,"path":["libc","unix","group"],"kind":"struct"},"17:10394:4002":{"crate_id":17,"path":["object","read","pe","import","ImportThunkList"],"kind":"struct"},"12:2069:2307":{"crate_id":12,"path":["hashbrown","set","OccupiedEntry"],"kind":"struct"},"17:11356:44963":{"crate_id":17,"path":["object","elf","HashHeader"],"kind":"struct"},"17:11893:49037":{"crate_id":17,"path":["object","macho","SymtabCommand"],"kind":"struct"},"17:13327:50241":{"crate_id":17,"path":["object","pe","ImageHotPatchInfo"],"kind":"struct"},"12:1044:3452":{"crate_id":12,"path":["hashbrown","map","EntryRef"],"kind":"enum"},"2:49339:56421":{"crate_id":2,"path":["core","hash","sip","SipHasher24"],"kind":"struct"},"2:47150:2183":{"crate_id":2,"path":["core","iter","adapters","filter","Filter"],"kind":"struct"},"2:48672:3025":{"crate_id":2,"path":["core","sync","exclusive","Exclusive"],"kind":"struct"},"2:52468:56389":{"crate_id":2,"path":["core","core_arch","simd","m8x16"],"kind":"struct"},"16:6743:3736":{"crate_id":16,"path":["gimli","read","loclists","RawLocListEntry"],"kind":"enum"},"12:1628:59962":{"crate_id":12,"path":["hashbrown","scopeguard","ScopeGuard"],"kind":"struct"},"2:49913:2013":{"crate_id":2,"path":["core","slice","iter","RChunksMut"],"kind":"struct"},"6:608:36562":{"crate_id":6,"path":["libc","unix","protoent"],"kind":"struct"},"16:2261:3566":{"crate_id":16,"path":["gimli","common","Format"],"kind":"enum"},"1:11070:2150":{"crate_id":1,"path":["std","sys","unix","fd","FileDesc"],"kind":"struct"},"2:46527:2143":{"crate_id":2,"path":["core","any","TypeId"],"kind":"struct"},"1:4969:2146":{"crate_id":1,"path":["std","os","linux","process","ChildExt"],"kind":"trait"},"1:8796:10445":{"crate_id":1,"path":["std","panic","BacktraceStyle"],"kind":"enum"},"17:9061:3935":{"crate_id":17,"path":["object","read","any","SymbolTable"],"kind":"struct"},"16:5614:3586":{"crate_id":16,"path":["gimli","read","cfi","AugmentationData"],"kind":"struct"},"2:46444:197":{"crate_id":2,"path":["core","ops","range","RangeInclusive"],"kind":"struct"},"17:13047:50191":{"crate_id":17,"path":["object","pe","ImageTlsDirectory64"],"kind":"struct"},"2:29570:67":{"crate_id":2,"path":["core","ptr","alignment","Alignment"],"kind":"struct"},"1:7860:53096":{"crate_id":1,"path":["std","thread","local","fast","DtorState"],"kind":"enum"},"17:11014:44661":{"crate_id":17,"path":["object","elf","SectionHeader32"],"kind":"struct"},"17:11873:49036":{"crate_id":17,"path":["object","macho","RoutinesCommand64"],"kind":"struct"},"1:9555:2338":{"crate_id":1,"path":["std","time","SystemTime"],"kind":"struct"},"17:10221:44404":{"crate_id":17,"path":["object","read","pe","file","PeComdatIterator"],"kind":"struct"},"5:6419:239":{"crate_id":5,"path":["alloc","vec","Vec"],"kind":"struct"},"2:47039:8618":{"crate_id":2,"path":["core","ffi","VaListImpl"],"kind":"struct"},"1:3347:2264":{"crate_id":1,"path":["std","io","util","Repeat"],"kind":"struct"},"14:187:42355":{"crate_id":14,"path":["rustc_demangle","SizeLimitedFmtAdapter"],"kind":"struct"},"17:11174:44770":{"crate_id":17,"path":["object","elf","Rel64"],"kind":"struct"},"1:8639:2523":{"crate_id":1,"path":["std","net","tcp","Incoming"],"kind":"struct"},"16:6070:3610":{"crate_id":16,"path":["gimli","read","endian_slice","EndianSlice"],"kind":"struct"},"1:6785:2396":{"crate_id":1,"path":["std","sync","poison","TryLockError"],"kind":"enum"},"1:1938:2472":{"crate_id":1,"path":["std","error","Report"],"kind":"struct"},"2:52201:2836":{"crate_id":2,"path":["core","core_arch","simd","u64x2"],"kind":"struct"},"1:11682:53088":{"crate_id":1,"path":["std","sys_common","wtf8","Wtf8CodePoints"],"kind":"struct"},"2:47191:2193":{"crate_id":2,"path":["core","iter","adapters","inspect","Inspect"],"kind":"struct"},"17:9909:44291":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandIterator"],"kind":"struct"},"17:9362:3935":{"crate_id":17,"path":["object","read","coff","symbol","SymbolTable"],"kind":"struct"},"1:4254:1958":{"crate_id":1,"path":["std","os","unix","fs","PermissionsExt"],"kind":"trait"},"6:6375:37377":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statfs64"],"kind":"struct"},"2:48173:3021":{"crate_id":2,"path":["core","panic","panic_info","PanicInfo"],"kind":"struct"},"2:49356:143":{"crate_id":2,"path":["core","hash","sip","Hasher"],"kind":"struct"},"16:7237:3535":{"crate_id":16,"path":["gimli","read","op","OperationIter"],"kind":"struct"},"6:5625:40478":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","timex"],"kind":"struct"},"2:12017:1883":{"crate_id":2,"path":["core","const_closure","ConstFnMutClosure"],"kind":"struct"},"1:8123:117":{"crate_id":1,"path":["std","fs","DirBuilder"],"kind":"struct"},"2:3168:2175":{"crate_id":2,"path":["core","ops","try_trait","Residual"],"kind":"trait"},"6:6302:40894":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","flock64"],"kind":"struct"},"1:6441:51520":{"crate_id":1,"path":["std","sync","mpmc","zero","ZeroToken"],"kind":"struct"},"2:7433:2336":{"crate_id":2,"path":["core","iter","traits","marker","TrustedStep"],"kind":"trait"},"6:1636:37449":{"crate_id":6,"path":["libc","unix","linux_like","in_pktinfo"],"kind":"struct"},"12:985:2306":{"crate_id":12,"path":["hashbrown","map","Entry"],"kind":"enum"},"2:2321:178":{"crate_id":2,"path":["core","cmp","Ord"],"kind":"trait"},"2:1751:57108":{"crate_id":2,"path":["core","ptr","metadata","PtrComponents"],"kind":"struct"},"1:979:2302":{"crate_id":1,"path":["std","collections","hash","map","RawEntryMut"],"kind":"enum"},"2:47578:31242":{"crate_id":2,"path":["core","iter","sources","successors","Successors"],"kind":"struct"},"5:6807:3186":{"crate_id":5,"path":["alloc","collections","btree","set_val","SetValZST"],"kind":"struct"},"6:6392:37380":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statvfs64"],"kind":"struct"},"6:5534:40472":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","cmsghdr"],"kind":"struct"},"6:581:36558":{"crate_id":6,"path":["libc","unix","sigval"],"kind":"struct"},"5:1436:194":{"crate_id":5,"path":["alloc","collections","btree","map","Range"],"kind":"struct"},"2:48596:85":{"crate_id":2,"path":["core","sync","atomic","AtomicIsize"],"kind":"struct"},"1:484:51515":{"crate_id":1,"path":["std","thread","local","fast","Key"],"kind":"struct"},"16:7497:3675":{"crate_id":16,"path":["gimli","read","str","DebugLineStr"],"kind":"struct"},"1:9531:215":{"crate_id":1,"path":["std","sync","rwlock","RwLockWriteGuard"],"kind":"struct"},"6:6509:40904":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ipc_perm"],"kind":"struct"},"5:677:227":{"crate_id":5,"path":["alloc","borrow","ToOwned"],"kind":"trait"},"2:8601:118":{"crate_id":2,"path":["core","fmt","Display"],"kind":"trait"},"17:11639:48958":{"crate_id":17,"path":["object","macho","SegmentCommand64"],"kind":"struct"},"2:6759:2263":{"crate_id":2,"path":["core","iter","sources","empty","Empty"],"kind":"struct"},"16:5996:3718":{"crate_id":16,"path":["gimli","read","dwarf","Dwarf"],"kind":"struct"},"5:6761:1936":{"crate_id":5,"path":["alloc","collections","binary_heap","Drain"],"kind":"struct"},"1:11477:3041":{"crate_id":1,"path":["std","sys","unix","time","Nanoseconds"],"kind":"struct"},"17:9778:3990":{"crate_id":17,"path":["object","read","elf","version","VerneedIterator"],"kind":"struct"},"2:48520:83":{"crate_id":2,"path":["core","sync","atomic","AtomicI64"],"kind":"struct"},"1:6886:213":{"crate_id":1,"path":["std","sync","rwlock","RwLock"],"kind":"struct"},"5:6828:1935":{"crate_id":5,"path":["alloc","collections","linked_list","IntoIter"],"kind":"struct"},"1:11124:2479":{"crate_id":1,"path":["std","sys","unix","fs","FileTimes"],"kind":"struct"},"1:5709:2113":{"crate_id":1,"path":["std","process","Command"],"kind":"struct"},"17:10997:44549":{"crate_id":17,"path":["object","elf","Ident"],"kind":"struct"},"16:4327:42958":{"crate_id":16,"path":["gimli","constants","DwDs"],"kind":"struct"},"17:13071:50193":{"crate_id":17,"path":["object","pe","ImageImportDescriptor"],"kind":"struct"},"2:50173:2929":{"crate_id":2,"path":["core","str","iter","MatchIndices"],"kind":"struct"},"1:6043:2552":{"crate_id":1,"path":["std","sync","condvar","Condvar"],"kind":"struct"},"17:8339:44095":{"crate_id":17,"path":["object","common","RelocationEncoding"],"kind":"enum"},"2:7737:2410":{"crate_id":2,"path":["core","panic","unwind_safe","AssertUnwindSafe"],"kind":"struct"},"2:48115:1934":{"crate_id":2,"path":["core","option","Iter"],"kind":"struct"},"17:13459:50289":{"crate_id":17,"path":["object","pe","ImageEnclaveImport"],"kind":"struct"},"1:9315:2324":{"crate_id":1,"path":["std","sync","mpsc","TryRecvError"],"kind":"enum"},"2:2290:123":{"crate_id":2,"path":["core","cmp","Eq"],"kind":"trait"},"1:574:2462":{"crate_id":1,"path":["std","thread","Packet"],"kind":"struct"},"2:47522:31236":{"crate_id":2,"path":["core","iter","sources","from_fn","FromFn"],"kind":"struct"},"2:11055:2621":{"crate_id":2,"path":["core","str","pattern","Searcher"],"kind":"trait"},"2:51030:2427":{"crate_id":2,"path":["core","alloc","AllocError"],"kind":"struct"},"2:50322:2938":{"crate_id":2,"path":["core","str","iter","EscapeDebug"],"kind":"struct"},"16:7435:3710":{"crate_id":16,"path":["gimli","read","rnglists","RawRange"],"kind":"struct"},"6:586:36559":{"crate_id":6,"path":["libc","unix","itimerval"],"kind":"struct"},"1:3194:2257":{"crate_id":1,"path":["std","io","stdio","StdinLock"],"kind":"struct"},"6:4354:39816":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_ff_erase"],"kind":"struct"},"2:2788:2055":{"crate_id":2,"path":["core","ops","arith","SubAssign"],"kind":"trait"},"1:11496:2338":{"crate_id":1,"path":["std","sys","unix","time","SystemTime"],"kind":"struct"},"1:2588:55438":{"crate_id":1,"path":["std","io","buffered","bufwriter","flush_buf","BufGuard"],"kind":"struct"},"2:10579:3128":{"crate_id":2,"path":["core","slice","SlicePattern"],"kind":"trait"},"1:12322:766":{"crate_id":1,"path":["std","isize"],"kind":"primitive"},"2:21062:2977":{"crate_id":2,"path":["core","num","bignum","Big32x40"],"kind":"struct"},"1:7150:51823":{"crate_id":1,"path":["std","sys_common","backtrace","_print","DisplayBacktrace"],"kind":"struct"},"6:4665:39848":{"crate_id":6,"path":["libc","unix","linux_like","linux","file_clone_range"],"kind":"struct"},"2:7051:1864":{"crate_id":2,"path":["core","iter","traits","collect","Extend"],"kind":"trait"},"12:669:2299":{"crate_id":12,"path":["hashbrown","map","IntoKeys"],"kind":"struct"},"2:50608:2636":{"crate_id":2,"path":["core","str","pattern","EmptyNeedle"],"kind":"struct"},"5:5370:228":{"crate_id":5,"path":["alloc","string","ToString"],"kind":"trait"},"6:5568:40440":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","mallinfo2"],"kind":"struct"},"2:3236:2742":{"crate_id":2,"path":["core","ops","unsize","DispatchFromDyn"],"kind":"trait"},"2:50742:2948":{"crate_id":2,"path":["core","str","CharEscapeDebugContinue"],"kind":"struct"},"17:10088:44293":{"crate_id":17,"path":["object","read","macho","segment","MachOSegmentInternal"],"kind":"struct"},"16:7329:3744":{"crate_id":16,"path":["gimli","read","rnglists","DebugRanges"],"kind":"struct"},"6:5692:40482":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","Elf32_Chdr"],"kind":"struct"},"17:9844:4049":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCacheImage"],"kind":"struct"},"1:2411:2494":{"crate_id":1,"path":["std","fs","read_dir"],"kind":"function"},"1:4312:1962":{"crate_id":1,"path":["std","os","unix","fs","DirEntryExt"],"kind":"trait"},"2:10791:2927":{"crate_id":2,"path":["core","str","iter","SplitNInternal"],"kind":"struct"},"17:10796:4022":{"crate_id":17,"path":["object","read","CodeView"],"kind":"struct"},"1:3486:2129":{"crate_id":1,"path":["std","io","BufRead"],"kind":"trait"},"6:495:36547":{"crate_id":6,"path":["libc","unix","utimbuf"],"kind":"struct"},"17:13221:50238":{"crate_id":17,"path":["object","pe","ImageEpilogueDynamicRelocationHeader"],"kind":"struct"},"2:20049:57553":{"crate_id":2,"path":["core","core_simd","swizzle","deinterleave","Odd"],"kind":"struct"},"2:8615:2075":{"crate_id":2,"path":["core","fmt","UpperExp"],"kind":"trait"},"17:10310:44407":{"crate_id":17,"path":["object","read","pe","section","PeRelocationIterator"],"kind":"struct"},"6:5541:40473":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","termios"],"kind":"struct"},"2:4326:2086":{"crate_id":2,"path":["core","cell","RefMut"],"kind":"struct"},"1:1611:1936":{"crate_id":1,"path":["std","collections","hash","set","Drain"],"kind":"struct"},"6:4179:39795":{"crate_id":6,"path":["libc","unix","linux_like","linux","itimerspec"],"kind":"struct"},"17:12926:49821":{"crate_id":17,"path":["object","pe","ImageAuxSymbolWeak"],"kind":"struct"},"2:4530:3108":{"crate_id":2,"path":["core","char","REPLACEMENT_CHARACTER"],"kind":"constant"},"6:4367:39818":{"crate_id":6,"path":["libc","unix","linux_like","linux","dl_phdr_info"],"kind":"struct"},"2:2917:2241":{"crate_id":2,"path":["core","ops","deref","DerefMut"],"kind":"trait"},"5:4026:240":{"crate_id":5,"path":["alloc","collections","vec_deque","VecDeque"],"kind":"struct"},"17:9475:3923":{"crate_id":17,"path":["object","read","elf","segment","ElfSegmentIterator"],"kind":"struct"},"17:12617:49599":{"crate_id":17,"path":["object","pe","ImageFileHeader"],"kind":"struct"},"17:11800:49031":{"crate_id":17,"path":["object","macho","SubLibraryCommand"],"kind":"struct"},"17:9155:44105":{"crate_id":17,"path":["object","read","any","DynamicRelocationIterator"],"kind":"struct"},"6:4797:39860":{"crate_id":6,"path":["libc","unix","linux_like","linux","ifreq"],"kind":"struct"},"1:8613:2286":{"crate_id":1,"path":["std","net","socket_addr","SocketAddrV4"],"kind":"struct"},"1:3377:2226":{"crate_id":1,"path":["std","io","Guard"],"kind":"struct"},"2:29542:2345":{"crate_id":2,"path":["core","mem","maybe_uninit","MaybeUninit"],"kind":"union"},"2:2780:2052":{"crate_id":2,"path":["core","ops","arith","Neg"],"kind":"trait"},"16:2535:3840":{"crate_id":16,"path":["gimli","common","DebugLocListsBase"],"kind":"struct"},"16:5411:3572":{"crate_id":16,"path":["gimli","read","cfi","EhFrameHdr"],"kind":"struct"},"16:5203:42422":{"crate_id":16,"path":["gimli","endianity","LittleEndian"],"kind":"struct"},"2:8609:2073":{"crate_id":2,"path":["core","fmt","UpperHex"],"kind":"trait"},"1:3086:2266":{"crate_id":1,"path":["std","io","readbuf","BorrowedBuf"],"kind":"struct"},"17:12730:49659":{"crate_id":17,"path":["object","pe","ImageNtHeaders64"],"kind":"struct"},"2:3968:2788":{"crate_id":2,"path":["core","asserting","TryCaptureWithDebug"],"kind":"struct"},"6:4659:39847":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlattr"],"kind":"struct"},"6:4768:39858":{"crate_id":6,"path":["libc","unix","linux_like","linux","mq_attr"],"kind":"struct"},"2:2851:1927":{"crate_id":2,"path":["core","ops","bit","ShlAssign"],"kind":"trait"},"2:21810:2465":{"crate_id":2,"path":["core","num","nonzero","NonZeroUsize"],"kind":"struct"},"17:9885:44321":{"crate_id":17,"path":["object","read","macho","file","MachOComdat"],"kind":"struct"},"1:1476:142":{"crate_id":1,"path":["std","collections","hash","set","HashSet"],"kind":"struct"},"18:515:4093":{"crate_id":18,"path":["memchr","memmem","prefilter","PrefilterFn"],"kind":"struct"},"1:3479:2130":{"crate_id":1,"path":["std","io","Seek"],"kind":"trait"},"17:10283:44381":{"crate_id":17,"path":["object","read","pe","section","PeSectionIterator"],"kind":"struct"},"1:4210:2405":{"crate_id":1,"path":["std","os","unix","ffi","os_str","OsStringExt"],"kind":"trait"},"17:10822:44109":{"crate_id":17,"path":["object","read","RelocationTarget"],"kind":"enum"},"17:13168:50227":{"crate_id":17,"path":["object","pe","ImageDynamicRelocationTable"],"kind":"struct"},"16:6123:3668":{"crate_id":16,"path":["gimli","read","abbrev","DebugAbbrev"],"kind":"struct"},"6:5605:40477":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","rtentry"],"kind":"struct"},"2:46378:194":{"crate_id":2,"path":["core","ops","range","Range"],"kind":"struct"},"17:11500:48847":{"crate_id":17,"path":["object","macho","DyldCacheImageInfo"],"kind":"struct"},"6:5595:40476":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_mmap_hdr"],"kind":"struct"},"2:1825:2393":{"crate_id":2,"path":["core","ptr","non_null","NonNull"],"kind":"struct"},"16:6186:3670":{"crate_id":16,"path":["gimli","read","aranges","DebugAranges"],"kind":"struct"},"5:2959:3182":{"crate_id":5,"path":["alloc","collections","btree","set","DifferenceInner"],"kind":"enum"},"17:12087:49051":{"crate_id":17,"path":["object","macho","FilesetEntryCommand"],"kind":"struct"},"17:12609:49598":{"crate_id":17,"path":["object","pe","MaskedRichHeaderEntry"],"kind":"struct"},"14:202:3178":{"crate_id":14,"path":["rustc_demangle","v0","ParseError"],"kind":"enum"},"6:1525:37439":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr"],"kind":"struct"},"5:1690:1937":{"crate_id":5,"path":["alloc","collections","btree","map","DrainFilter"],"kind":"struct"},"16:3263:42427":{"crate_id":16,"path":["gimli","arch","RiscV"],"kind":"struct"},"1:5178:2282":{"crate_id":1,"path":["std","os","net","linux_ext","tcp","TcpStreamExt"],"kind":"trait"},"18:582:1875":{"crate_id":18,"path":["memchr","memmem","twoway","Reverse"],"kind":"struct"},"7:0:1490":{"crate_id":7,"path":["unwind"],"kind":"module"},"2:2669:1857":{"crate_id":2,"path":["core","marker","Sized"],"kind":"trait"},"1:9536:2330":{"crate_id":1,"path":["std","time","Instant"],"kind":"struct"},"12:393:59958":{"crate_id":12,"path":["hashbrown","raw","RawIterHashInner"],"kind":"struct"},"2:47321:2203":{"crate_id":2,"path":["core","iter","adapters","take_while","TakeWhile"],"kind":"struct"},"1:6921:51429":{"crate_id":1,"path":["std","sync","rwlock","fmt","LockedPlaceholder"],"kind":"struct"},"2:53759:2815":{"crate_id":2,"path":["core","core_arch","simd","i32x16"],"kind":"struct"},"2:50091:2926":{"crate_id":2,"path":["core","str","iter","RSplitTerminator"],"kind":"struct"},"16:3026:42425":{"crate_id":16,"path":["gimli","arch","Arm"],"kind":"struct"},"1:11514:50873":{"crate_id":1,"path":["std","sys","unix","time","Timespec"],"kind":"struct"},"5:2738:57769":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Immut"],"kind":"struct"},"2:4672:1593":{"crate_id":2,"path":["core","ffi","c_void"],"kind":"enum"},"2:50519:2632":{"crate_id":2,"path":["core","str","pattern","CharSliceSearcher"],"kind":"struct"},"2:53929:2818":{"crate_id":2,"path":["core","core_arch","simd","i64x8"],"kind":"struct"},"1:8763:2149":{"crate_id":1,"path":["std","os","fd","owned","BorrowedFd"],"kind":"struct"},"1:11134:128":{"crate_id":1,"path":["std","sys","unix","fs","FileType"],"kind":"struct"},"2:29642:3006":{"crate_id":2,"path":["core","ptr","alignment","AlignmentEnum32"],"kind":"enum"},"5:4104:59108":{"crate_id":5,"path":["alloc","collections","vec_deque","truncate","Dropper"],"kind":"struct"},"1:8505:2159":{"crate_id":1,"path":["std","net","ip_addr","Ipv6MulticastScope"],"kind":"enum"},"2:2792:2057":{"crate_id":2,"path":["core","ops","arith","MulAssign"],"kind":"trait"},"16:6376:3729":{"crate_id":16,"path":["gimli","read","line","LineInstruction"],"kind":"enum"},"1:8227:2253":{"crate_id":1,"path":["std","io","error","ErrorKind"],"kind":"enum"},"17:13527:50321":{"crate_id":17,"path":["object","pe","ImageFunctionEntry64"],"kind":"struct"},"2:50618:2637":{"crate_id":2,"path":["core","str","pattern","TwoWaySearcher"],"kind":"struct"},"1:9637:4596":{"crate_id":1,"path":["std","sys","unix","args","Args"],"kind":"struct"},"2:50814:2341":{"crate_id":2,"path":["core","time","TryFromFloatSecsError"],"kind":"struct"},"1:12315:721":{"crate_id":1,"path":["std","i64"],"kind":"primitive"},"5:1369:1935":{"crate_id":5,"path":["alloc","collections","btree","map","IntoIter"],"kind":"struct"},"2:2812:1910":{"crate_id":2,"path":["core","ops","bit","BitAnd"],"kind":"trait"},"18:80:50713":{"crate_id":18,"path":["memchr","memchr","iter","Memchr"],"kind":"struct"},"2:50758:2951":{"crate_id":2,"path":["core","str","IsAsciiWhitespace"],"kind":"struct"},"1:10863:2254":{"crate_id":1,"path":["std","sys","unix","stdio","Stderr"],"kind":"struct"},"12:2190:59966":{"crate_id":12,"path":["hashbrown","raw","Fallibility"],"kind":"enum"},"17:11125:44732":{"crate_id":17,"path":["object","elf","Syminfo32"],"kind":"struct"},"1:7805:55447":{"crate_id":1,"path":["std","backtrace_rs","Bomb"],"kind":"struct"},"12:822:2302":{"crate_id":12,"path":["hashbrown","map","RawEntryMut"],"kind":"enum"},"1:9207:2114":{"crate_id":1,"path":["std","process","CommandArgs"],"kind":"struct"},"2:39339:2140":{"crate_id":2,"path":["core","error","Source"],"kind":"struct"},"17:11137:44733":{"crate_id":17,"path":["object","elf","Syminfo64"],"kind":"struct"},"16:2487:3839":{"crate_id":16,"path":["gimli","common","DebugLineStrOffset"],"kind":"struct"},"1:661:2474":{"crate_id":1,"path":["std","backtrace","Backtrace"],"kind":"struct"},"1:4117:2529":{"crate_id":1,"path":["std","net","udp","UdpSocket"],"kind":"struct"},"16:7309:3742":{"crate_id":16,"path":["gimli","read","pubtypes","DebugPubTypes"],"kind":"struct"},"18:531:4094":{"crate_id":18,"path":["memchr","memmem","prefilter","PrefilterState"],"kind":"struct"},"17:12695:49655":{"crate_id":17,"path":["object","pe","ImageOptionalHeader64"],"kind":"struct"},"6:6430:40900":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_fpstate"],"kind":"struct"},"15:175:3474":{"crate_id":15,"path":["addr2line","LocationRangeIter"],"kind":"struct"},"1:1632:1940":{"crate_id":1,"path":["std","collections","hash","set","SymmetricDifference"],"kind":"struct"},"5:6893:2313":{"crate_id":5,"path":["alloc","collections","TryReserveErrorKind"],"kind":"enum"},"5:2736:2164":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Owned"],"kind":"enum"},"17:10670:4028":{"crate_id":17,"path":["object","read","SymbolMap"],"kind":"struct"},"6:135:36234":{"crate_id":6,"path":["libc","unix","fpos_t"],"kind":"enum"},"16:6654:3735":{"crate_id":16,"path":["gimli","read","line","FileEntryFormat"],"kind":"struct"},"6:4346:39815":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_ff_upload"],"kind":"struct"},"17:10321:4057":{"crate_id":17,"path":["object","read","pe","data_directory","DataDirectories"],"kind":"struct"},"1:8554:2578":{"crate_id":1,"path":["std","net","parser","AddrKind"],"kind":"enum"},"6:6975:41277":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","align","max_align_t"],"kind":"struct"},"12:1872:1941":{"crate_id":12,"path":["hashbrown","set","Union"],"kind":"struct"},"5:6746:1935":{"crate_id":5,"path":["alloc","collections","binary_heap","IntoIter"],"kind":"struct"},"1:11373:55452":{"crate_id":1,"path":["std","sys","unix","process","process_inner","do_exec","Reset"],"kind":"struct"},"1:6681:2562":{"crate_id":1,"path":["std","sync","once","OnceState"],"kind":"struct"},"3:0:431":{"crate_id":3,"path":["compiler_builtins"],"kind":"module"},"17:8526:4004":{"crate_id":17,"path":["object","endian","U16Bytes"],"kind":"struct"},"12:0:1723":{"crate_id":12,"path":["hashbrown"],"kind":"module"},"2:49999:2921":{"crate_id":2,"path":["core","str","iter","CharIndices"],"kind":"struct"},"5:4900:59106":{"crate_id":5,"path":["alloc","slice","hack","to_vec","DropGuard"],"kind":"struct"},"1:3160:2509":{"crate_id":1,"path":["std","io","stdio","StderrRaw"],"kind":"struct"},"6:131:36233":{"crate_id":6,"path":["libc","unix","FILE"],"kind":"enum"},"17:13091:50195":{"crate_id":17,"path":["object","pe","ImageBoundForwarderRef"],"kind":"struct"},"2:10865:2020":{"crate_id":2,"path":["core","str","iter","SplitInclusive"],"kind":"struct"},"2:49347:1903":{"crate_id":2,"path":["core","hash","sip","SipHasher"],"kind":"struct"},"2:3184:2723":{"crate_id":2,"path":["core","ops","try_trait","NeverShortCircuitResidual"],"kind":"enum"},"5:1404:2298":{"crate_id":5,"path":["alloc","collections","btree","map","ValuesMut"],"kind":"struct"},"5:2918:95":{"crate_id":5,"path":["alloc","collections","btree","set","BTreeSet"],"kind":"struct"},"6:4706:39852":{"crate_id":6,"path":["libc","unix","linux_like","linux","dirent"],"kind":"struct"},"1:1826:8092":{"crate_id":1,"path":["std","env","Vars"],"kind":"struct"},"2:5845:2189":{"crate_id":2,"path":["core","iter","adapters","intersperse","IntersperseWith"],"kind":"struct"},"5:286:1865":{"crate_id":5,"path":["alloc","boxed","Box"],"kind":"struct"},"2:49923:2011":{"crate_id":2,"path":["core","slice","iter","RChunksExact"],"kind":"struct"},"5:6331:3161":{"crate_id":5,"path":["alloc","vec","in_place_drop","InPlaceDstBufDrop"],"kind":"struct"},"1:545:2457":{"crate_id":1,"path":["std","thread","PanicGuard"],"kind":"struct"},"6:1511:37437":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreqn"],"kind":"struct"},"2:46606:2712":{"crate_id":2,"path":["core","array","TryFromSliceError"],"kind":"struct"},"1:7962:8099":{"crate_id":1,"path":["std","env","VarError"],"kind":"enum"},"17:11708:49024":{"crate_id":17,"path":["object","macho","Fvmlib"],"kind":"struct"},"6:6352:37403":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stat64"],"kind":"struct"},"16:2771:3846":{"crate_id":16,"path":["gimli","common","DebugStrOffsetsIndex"],"kind":"struct"},"16:3402:42428":{"crate_id":16,"path":["gimli","arch","X86"],"kind":"struct"},"17:9751:3989":{"crate_id":17,"path":["object","read","elf","version","VerdefIterator"],"kind":"struct"},"2:47244:2197":{"crate_id":2,"path":["core","iter","adapters","rev","Rev"],"kind":"struct"},"14:165:42347":{"crate_id":14,"path":["rustc_demangle","DemangleStyle"],"kind":"enum"},"1:11277:2115":{"crate_id":1,"path":["std","sys","unix","process","process_common","Stdio"],"kind":"enum"},"1:2383:2483":{"crate_id":1,"path":["std","fs","metadata"],"kind":"function"},"6:7226:39988":{"crate_id":6,"path":["libc","unix","linux_like","linux","fanotify_event_metadata"],"kind":"struct"},"17:9021:44103":{"crate_id":17,"path":["object","read","any","ComdatSectionIterator"],"kind":"struct"},"1:6010:2549":{"crate_id":1,"path":["std","sync","barrier","Barrier"],"kind":"struct"},"17:9031:60874":{"crate_id":17,"path":["object","read","any","ComdatSectionIteratorInternal"],"kind":"enum"},"2:9285:1934":{"crate_id":2,"path":["core","slice","iter","Iter"],"kind":"struct"},"2:50937:207":{"crate_id":2,"path":["core","future","ResumeTy"],"kind":"struct"},"1:8412:1945":{"crate_id":1,"path":["std","io","Chain"],"kind":"struct"},"14:221:42354":{"crate_id":14,"path":["rustc_demangle","SizeLimitExhausted"],"kind":"struct"},"1:12300:407":{"crate_id":1,"path":["std","char"],"kind":"primitive"},"17:12225:49121":{"crate_id":17,"path":["object","macho","IdentCommand"],"kind":"struct"},"6:4698:39851":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_nl"],"kind":"struct"},"16:4662:43053":{"crate_id":16,"path":["gimli","constants","DwOrd"],"kind":"struct"},"2:21942:168":{"crate_id":2,"path":["core","num","nonzero","NonZeroI64"],"kind":"struct"},"16:5510:3580":{"crate_id":16,"path":["gimli","read","cfi","BaseAddresses"],"kind":"struct"},"16:6719:3869":{"crate_id":16,"path":["gimli","read","loclists","LocListsFormat"],"kind":"enum"},"16:5963:190":{"crate_id":16,"path":["gimli","read","cfi","Pointer"],"kind":"enum"},"17:9553:3935":{"crate_id":17,"path":["object","read","elf","symbol","SymbolTable"],"kind":"struct"},"6:5835:40517":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","sigset_t"],"kind":"struct"},"2:8599:110":{"crate_id":2,"path":["core","fmt","macros","Debug"],"kind":"proc_derive"},"6:5510:40470":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","glob64_t"],"kind":"struct"},"5:778:96":{"crate_id":5,"path":["alloc","collections","binary_heap","BinaryHeap"],"kind":"struct"},"1:9277:1935":{"crate_id":1,"path":["std","sync","mpsc","IntoIter"],"kind":"struct"},"1:2903:206":{"crate_id":1,"path":["std","io","error","Result"],"kind":"typedef"},"1:1828:8093":{"crate_id":1,"path":["std","env","VarsOs"],"kind":"struct"},"17:10207:44395":{"crate_id":17,"path":["object","read","pe","file","PeFile"],"kind":"struct"},"6:6322:40896":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stack_t"],"kind":"struct"},"2:52019:56312":{"crate_id":2,"path":["core","core_arch","simd","i64x1"],"kind":"struct"},"1:719:7101":{"crate_id":1,"path":["std","backtrace","LazilyResolvedCapture"],"kind":"struct"},"16:6298:3696":{"crate_id":16,"path":["gimli","read","index","UnitIndex"],"kind":"struct"},"2:21363:57217":{"crate_id":2,"path":["core","num","fmt","Formatted"],"kind":"struct"},"17:8871:44100":{"crate_id":17,"path":["object","read","any","SegmentIterator"],"kind":"struct"},"2:48444:82":{"crate_id":2,"path":["core","sync","atomic","AtomicI32"],"kind":"struct"},"12:861:2305":{"crate_id":12,"path":["hashbrown","map","RawEntryBuilder"],"kind":"struct"},"1:8719:2544":{"crate_id":1,"path":["std","os","unix","ucred","UCred"],"kind":"struct"},"1:4403:2582":{"crate_id":1,"path":["std","os","unix","net","ancillary","AncillaryDataIter"],"kind":"struct"},"2:9334:2005":{"crate_id":2,"path":["core","slice","iter","Split"],"kind":"struct"},"16:2793:3848":{"crate_id":16,"path":["gimli","common","DebugTypesOffset"],"kind":"struct"},"6:1595:37446":{"crate_id":6,"path":["libc","unix","linux_like","sched_param"],"kind":"struct"},"1:4894:1960":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt"],"kind":"trait"},"1:10902:2439":{"crate_id":1,"path":["std","sys","unix","thread","Thread"],"kind":"struct"},"1:8363:2263":{"crate_id":1,"path":["std","io","util","Empty"],"kind":"struct"},"17:8137:44093":{"crate_id":17,"path":["object","common","BinaryFormat"],"kind":"enum"},"2:46402:195":{"crate_id":2,"path":["core","ops","range","RangeFrom"],"kind":"struct"},"16:7909:3687":{"crate_id":16,"path":["gimli","read","unit","EntriesTree"],"kind":"struct"},"1:9395:2461":{"crate_id":1,"path":["std","sync","mpmc","context","Inner"],"kind":"struct"},"17:11606:48956":{"crate_id":17,"path":["object","macho","LcStr"],"kind":"struct"},"2:2987:2063":{"crate_id":2,"path":["core","ops","index","Index"],"kind":"trait"},"2:2445:2219":{"crate_id":2,"path":["core","convert","num","FloatToInt"],"kind":"trait"},"2:47529:56090":{"crate_id":2,"path":["core","iter","sources","from_generator","FromGenerator"],"kind":"struct"},"16:6017:3719":{"crate_id":16,"path":["gimli","read","dwarf","DwarfPackage"],"kind":"struct"},"17:9631:3918":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdatIterator"],"kind":"struct"},"14:7:42346":{"crate_id":14,"path":["rustc_demangle","legacy","Demangle"],"kind":"struct"},"1:7849:2450":{"crate_id":1,"path":["std","thread","local","AccessError"],"kind":"struct"},"17:9691:3988":{"crate_id":17,"path":["object","read","elf","hash","HashTable"],"kind":"struct"},"2:54023:17876":{"crate_id":2,"path":["core","core_arch","x86","__m128i"],"kind":"struct"},"6:6311:40895":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","siginfo_t"],"kind":"struct"},"17:12860:49753":{"crate_id":17,"path":["object","pe","ImageSymbolEx"],"kind":"struct"},"1:11307:2118":{"crate_id":1,"path":["std","sys","unix","process","process_common","ExitCode"],"kind":"struct"},"1:12317:1447":{"crate_id":1,"path":["std","u8"],"kind":"primitive"},"17:9446:44173":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdatSectionIterator"],"kind":"struct"},"2:20295:1899":{"crate_id":2,"path":["core","core_simd","lane_count","sealed","Sealed"],"kind":"trait"},"1:4014:2521":{"crate_id":1,"path":["std","net","tcp","TcpStream"],"kind":"struct"},"17:9873:44320":{"crate_id":17,"path":["object","read","macho","file","MachOComdatIterator"],"kind":"struct"},"1:4017:2522":{"crate_id":1,"path":["std","net","tcp","TcpListener"],"kind":"struct"},"16:4921:43120":{"crate_id":16,"path":["gimli","constants","DwRle"],"kind":"struct"},"1:4904:51175":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt","st_atime"],"kind":"foreign_type"},"2:20863:2422":{"crate_id":2,"path":["core","core_simd","vector","Simd"],"kind":"struct"},"5:2993:3183":{"crate_id":5,"path":["alloc","collections","btree","set","IntersectionInner"],"kind":"enum"},"17:8272:4030":{"crate_id":17,"path":["object","common","SymbolScope"],"kind":"enum"},"9:0:1720":{"crate_id":9,"path":["miniz_oxide"],"kind":"module"},"5:4531:200":{"crate_id":5,"path":["alloc","rc","Rc"],"kind":"struct"},"2:3157:229":{"crate_id":2,"path":["core","ops","try_trait","Try"],"kind":"trait"},"17:11939:49041":{"crate_id":17,"path":["object","macho","DylibTableOfContents"],"kind":"struct"},"16:5815:3597":{"crate_id":16,"path":["gimli","read","cfi","CfaRule"],"kind":"enum"},"17:11235:44824":{"crate_id":17,"path":["object","elf","Dyn32"],"kind":"struct"},"2:2991:2064":{"crate_id":2,"path":["core","ops","index","IndexMut"],"kind":"trait"},"2:21318:56424":{"crate_id":2,"path":["core","num","flt2dec","Sign"],"kind":"enum"},"9:19:3380":{"crate_id":9,"path":["miniz_oxide","deflate","buffer","HashBuffers"],"kind":"struct"},"12:60:59957":{"crate_id":12,"path":["hashbrown","raw","bitmask","BitMaskIter"],"kind":"struct"},"16:3566:42437":{"crate_id":16,"path":["gimli","constants","DwSect"],"kind":"struct"},"17:10608:3908":{"crate_id":17,"path":["object","read","SectionIndex"],"kind":"struct"},"12:1852:1938":{"crate_id":12,"path":["hashbrown","set","Intersection"],"kind":"struct"},"2:6819:2349":{"crate_id":2,"path":["core","iter","sources","once","once"],"kind":"function"},"6:7214:39986":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_rwlockattr_t"],"kind":"struct"},"2:52393:2801":{"crate_id":2,"path":["core","core_arch","simd","f64x2"],"kind":"struct"},"2:2493:233":{"crate_id":2,"path":["core","convert","TryInto"],"kind":"trait"},"16:2749:3845":{"crate_id":16,"path":["gimli","common","DebugStrOffsetsBase"],"kind":"struct"},"17:11774:49029":{"crate_id":17,"path":["object","macho","SubClientCommand"],"kind":"struct"},"2:3162:133":{"crate_id":2,"path":["core","ops","try_trait","FromResidual"],"kind":"trait"},"6:5741:40488":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ptrace_syscall_info"],"kind":"struct"},"2:46422:198":{"crate_id":2,"path":["core","ops","range","RangeTo"],"kind":"struct"},"2:22008:2982":{"crate_id":2,"path":["core","num","nonzero","NonZeroIsize"],"kind":"struct"},"16:5494:3577":{"crate_id":16,"path":["gimli","read","cfi","CieOffsetEncoding"],"kind":"enum"},"5:1414:2299":{"crate_id":5,"path":["alloc","collections","btree","map","IntoKeys"],"kind":"struct"},"2:29548:2859":{"crate_id":2,"path":["core","mem","transmutability","Assume"],"kind":"struct"},"6:554:36554":{"crate_id":6,"path":["libc","unix","iovec"],"kind":"struct"},"2:10754:2924":{"crate_id":2,"path":["core","str","iter","SplitInternal"],"kind":"struct"},"1:8147:2252":{"crate_id":1,"path":["std","io","cursor","Cursor"],"kind":"struct"},"17:13354:50243":{"crate_id":17,"path":["object","pe","ImageHotPatchHashes"],"kind":"struct"},"1:9430:51478":{"crate_id":1,"path":["std","sync","mpmc","list","Position"],"kind":"struct"},"2:8819:139":{"crate_id":2,"path":["core","hash","Hash"],"kind":"trait"},"2:9309:2009":{"crate_id":2,"path":["core","slice","iter","IterMut"],"kind":"struct"},"16:4545:43032":{"crate_id":16,"path":["gimli","constants","DwAddr"],"kind":"struct"},"17:8368:3902":{"crate_id":17,"path":["object","common","FileFlags"],"kind":"enum"},"16:5235:60240":{"crate_id":16,"path":["gimli","read","util","sealed","CapacityFull"],"kind":"struct"},"2:3370:2142":{"crate_id":2,"path":["core","any","Provider"],"kind":"trait"},"2:2856:1930":{"crate_id":2,"path":["core","ops","bit","ShrAssign"],"kind":"trait"},"1:9225:2116":{"crate_id":1,"path":["std","process","ExitStatus"],"kind":"struct"},"2:9582:2016":{"crate_id":2,"path":["core","slice","iter","RSplitN"],"kind":"struct"},"2:48482:89":{"crate_id":2,"path":["core","sync","atomic","AtomicU32"],"kind":"struct"},"17:13082:50194":{"crate_id":17,"path":["object","pe","ImageBoundImportDescriptor"],"kind":"struct"},"17:8991:60697":{"crate_id":17,"path":["object","read","any","ComdatIteratorInternal"],"kind":"enum"},"2:3084:3009":{"crate_id":2,"path":["core","ops","range","RangeBounds"],"kind":"trait"},"17:12073:49050":{"crate_id":17,"path":["object","macho","LinkeditDataCommand"],"kind":"struct"},"2:50297:2935":{"crate_id":2,"path":["core","str","iter","SplitWhitespace"],"kind":"struct"},"2:46992:3017":{"crate_id":2,"path":["core","ffi","c_str","FromBytesUntilNulError"],"kind":"struct"},"1:9283:2322":{"crate_id":1,"path":["std","sync","mpsc","SendError"],"kind":"struct"},"2:49171:73":{"crate_id":2,"path":["core","fmt","Arguments"],"kind":"struct"},"17:13382:50280":{"crate_id":17,"path":["object","pe","ImageAlpha64RuntimeFunctionEntry"],"kind":"struct"},"6:567:36556":{"crate_id":6,"path":["libc","unix","winsize"],"kind":"struct"},"5:6463:59125":{"crate_id":5,"path":["alloc","vec","retain_mut","BackshiftOnDrop"],"kind":"struct"},"17:1903:44201":{"crate_id":17,"path":["object","read","elf","relocation","ElfRelaIterator"],"kind":"enum"},"1:900:2009":{"crate_id":1,"path":["std","collections","hash","map","IterMut"],"kind":"struct"},"2:47295:2201":{"crate_id":2,"path":["core","iter","adapters","step_by","StepBy"],"kind":"struct"},"17:12896:49819":{"crate_id":17,"path":["object","pe","ImageAuxSymbolFunction"],"kind":"struct"},"16:7603:3695":{"crate_id":16,"path":["gimli","read","unit","UnitHeader"],"kind":"struct"},"5:3484:3263":{"crate_id":5,"path":["alloc","collections","linked_list","CursorMut"],"kind":"struct"},"6:4559:39834":{"crate_id":6,"path":["libc","unix","linux_like","linux","fanotify_response"],"kind":"struct"},"5:6791:1935":{"crate_id":5,"path":["alloc","collections","btree","set","IntoIter"],"kind":"struct"},"6:4206:39644":{"crate_id":6,"path":["libc","unix","linux_like","linux","if_nameindex"],"kind":"struct"},"16:7319:3743":{"crate_id":16,"path":["gimli","read","pubtypes","PubTypesEntryIter"],"kind":"struct"},"6:1887:37595":{"crate_id":6,"path":["libc","unix","linux_like","linux","fpos64_t"],"kind":"enum"},"1:9261:1934":{"crate_id":1,"path":["std","sync","mpsc","Iter"],"kind":"struct"},"6:1500:37435":{"crate_id":6,"path":["libc","unix","linux_like","in_addr"],"kind":"struct"},"12:738:2297":{"crate_id":12,"path":["hashbrown","map","Values"],"kind":"struct"},"17:13158:50226":{"crate_id":17,"path":["object","pe","ImageLoadConfigCodeIntegrity"],"kind":"struct"},"5:4041:59108":{"crate_id":5,"path":["alloc","collections","vec_deque","drop","Dropper"],"kind":"struct"},"2:49119:71":{"crate_id":2,"path":["core","fmt","ArgumentV1"],"kind":"struct"},"2:2578:126":{"crate_id":2,"path":["core","error","Error"],"kind":"trait"},"2:2768:2046":{"crate_id":2,"path":["core","ops","arith","Div"],"kind":"trait"},"6:4598:39839":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_j1939"],"kind":"struct"},"9:977:3292":{"crate_id":9,"path":["miniz_oxide","StreamResult"],"kind":"struct"},"12:2178:59964":{"crate_id":12,"path":["hashbrown","raw","sse2","Group"],"kind":"struct"},"16:7044:3527":{"crate_id":16,"path":["gimli","read","op","OperationEvaluationResult"],"kind":"enum"},"5:6834:1935":{"crate_id":5,"path":["alloc","collections","vec_deque","into_iter","IntoIter"],"kind":"struct"},"2:11709:29402":{"crate_id":2,"path":["core","future","poll_fn","PollFn"],"kind":"struct"},"1:12304:306":{"crate_id":1,"path":["std","array"],"kind":"primitive"},"2:50597:2635":{"crate_id":2,"path":["core","str","pattern","StrSearcherImpl"],"kind":"enum"},"16:6781:3689":{"crate_id":16,"path":["gimli","read","loclists","LocListIter"],"kind":"struct"},"6:1608:37448":{"crate_id":6,"path":["libc","unix","linux_like","lconv"],"kind":"struct"},"2:46883:1893":{"crate_id":2,"path":["core","char","EscapeDefault"],"kind":"struct"},"18:699:4084":{"crate_id":18,"path":["memchr","memmem","FinderBuilder"],"kind":"struct"},"17:12756:49703":{"crate_id":17,"path":["object","pe","Guid"],"kind":"struct"},"5:5908:59125":{"crate_id":5,"path":["alloc","vec","drain_filter","drop","BackshiftOnDrop"],"kind":"struct"},"2:58321:56333":{"crate_id":2,"path":["core","core_simd","vector","ptr","SimdMutPtr"],"kind":"struct"},"16:7211:3534":{"crate_id":16,"path":["gimli","read","op","Expression"],"kind":"struct"},"6:1678:37453":{"crate_id":6,"path":["libc","unix","linux_like","arpreq_old"],"kind":"struct"},"17:12008:49045":{"crate_id":17,"path":["object","macho","TwolevelHintsCommand"],"kind":"struct"},"2:47336:2192":{"crate_id":2,"path":["core","iter","adapters","zip","Zip"],"kind":"struct"},"17:11315:44948":{"crate_id":17,"path":["object","elf","Vernaux"],"kind":"struct"},"2:47570:31240":{"crate_id":2,"path":["core","iter","sources","repeat_with","RepeatWith"],"kind":"struct"},"6:4778:39859":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_ifr_ifru"],"kind":"union"},"2:50583:2634":{"crate_id":2,"path":["core","str","pattern","StrSearcher"],"kind":"struct"},"2:49752:2919":{"crate_id":2,"path":["core","slice","iter","GenericSplitN"],"kind":"struct"},"17:13366:50278":{"crate_id":17,"path":["object","pe","ImageArmRuntimeFunctionEntry"],"kind":"struct"},"17:10528:4021":{"crate_id":17,"path":["object","read","traits","NoDynamicRelocationIterator"],"kind":"struct"},"1:11786:2521":{"crate_id":1,"path":["std","sys_common","net","TcpStream"],"kind":"struct"},"1:9302:2323":{"crate_id":1,"path":["std","sync","mpsc","RecvError"],"kind":"struct"},"1:3230:2258":{"crate_id":1,"path":["std","io","stdio","Stdout"],"kind":"struct"},"1:5317:51420":{"crate_id":1,"path":["std","path","fmt","DebugHelper"],"kind":"struct"},"1:9239:2117":{"crate_id":1,"path":["std","process","ExitStatusError"],"kind":"struct"},"1:12299:911":{"crate_id":1,"path":["std","never"],"kind":"primitive"},"1:8956:1934":{"crate_id":1,"path":["std","path","Iter"],"kind":"struct"},"2:21115:2979":{"crate_id":2,"path":["core","num","bignum","tests","Big8x3"],"kind":"struct"},"1:6217:2320":{"crate_id":1,"path":["std","sync","mpmc","counter","Sender"],"kind":"struct"},"6:5523:40471":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","msghdr"],"kind":"struct"},"17:967:44170":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbolIterator"],"kind":"struct"},"5:2980:1940":{"crate_id":5,"path":["alloc","collections","btree","set","SymmetricDifference"],"kind":"struct"},"16:5878:3599":{"crate_id":16,"path":["gimli","read","cfi","CallFrameInstruction"],"kind":"enum"},"2:2232:97":{"crate_id":2,"path":["core","borrow","Borrow"],"kind":"trait"},"1:3404:1976":{"crate_id":1,"path":["std","io","Read"],"kind":"trait"},"17:13393:50281":{"crate_id":17,"path":["object","pe","ImageAlphaRuntimeFunctionEntry"],"kind":"struct"},"2:56590:2967":{"crate_id":2,"path":["core","core_simd","swizzle","Which"],"kind":"enum"},"2:8868:1901":{"crate_id":2,"path":["core","hash","BuildHasher"],"kind":"trait"},"6:7255:39992":{"crate_id":6,"path":["libc","unix","linux_like","linux","can_frame"],"kind":"struct"},"16:5793:3596":{"crate_id":16,"path":["gimli","read","cfi","UnwindTableRow"],"kind":"struct"},"2:7079:119":{"crate_id":2,"path":["core","iter","traits","double_ended","DoubleEndedIterator"],"kind":"trait"},"5:1395:2297":{"crate_id":5,"path":["alloc","collections","btree","map","Values"],"kind":"struct"},"1:4766:2154":{"crate_id":1,"path":["std","os","unix","process","ExitStatusExt"],"kind":"trait"},"12:353:3457":{"crate_id":12,"path":["hashbrown","raw","RawDrain"],"kind":"struct"},"1:4454:2588":{"crate_id":1,"path":["std","os","unix","net","ancillary","Messages"],"kind":"struct"},"18:599:60914":{"crate_id":18,"path":["memchr","memmem","twoway","Shift"],"kind":"enum"},"1:3157:2508":{"crate_id":1,"path":["std","io","stdio","StdoutRaw"],"kind":"struct"},"16:6690:3677":{"crate_id":16,"path":["gimli","read","loclists","DebugLocLists"],"kind":"struct"},"6:4200:39798":{"crate_id":6,"path":["libc","unix","linux_like","linux","cpu_set_t"],"kind":"struct"},"1:8217:2388":{"crate_id":1,"path":["std","io","error","SimpleMessage"],"kind":"struct"},"1:7848:1899":{"crate_id":1,"path":["std","sealed","Sealed"],"kind":"trait"},"17:8212:4023":{"crate_id":17,"path":["object","common","ComdatKind"],"kind":"enum"},"1:11533:2330":{"crate_id":1,"path":["std","sys","unix","time","inner","Instant"],"kind":"struct"},"2:9527:2015":{"crate_id":2,"path":["core","slice","iter","RSplitMut"],"kind":"struct"},"1:10651:2113":{"crate_id":1,"path":["std","sys","unix","process","process_common","Command"],"kind":"struct"},"1:11268:2384":{"crate_id":1,"path":["std","sys","unix","os_str","Buf"],"kind":"struct"},"17:9165:60704":{"crate_id":17,"path":["object","read","any","DynamicRelocationIteratorInternal"],"kind":"enum"},"1:8488:2158":{"crate_id":1,"path":["std","net","ip_addr","Ipv6Addr"],"kind":"struct"},"17:10139:3935":{"crate_id":17,"path":["object","read","macho","symbol","SymbolTable"],"kind":"struct"},"2:10814:2928":{"crate_id":2,"path":["core","str","iter","MatchIndicesInternal"],"kind":"struct"},"2:47211:2194":{"crate_id":2,"path":["core","iter","adapters","map","Map"],"kind":"struct"},"17:10420:4059":{"crate_id":17,"path":["object","read","pe","relocation","RelocationBlockIterator"],"kind":"struct"},"9:505:3279":{"crate_id":9,"path":["miniz_oxide","inflate","stream","InflateState"],"kind":"struct"},"2:54104:17883":{"crate_id":2,"path":["core","core_arch","x86","__m512"],"kind":"struct"},"2:53571:2811":{"crate_id":2,"path":["core","core_arch","simd","i16x32"],"kind":"struct"},"17:11217:44773":{"crate_id":17,"path":["object","elf","ProgramHeader64"],"kind":"struct"},"2:21975:165":{"crate_id":2,"path":["core","num","nonzero","NonZeroI128"],"kind":"struct"},"2:21744:173":{"crate_id":2,"path":["core","num","nonzero","NonZeroU64"],"kind":"struct"},"1:11112:51185":{"crate_id":1,"path":["std","sys","unix","fs","FilePermissions"],"kind":"struct"},"17:12060:49049":{"crate_id":17,"path":["object","macho","RpathCommand"],"kind":"struct"},"17:10108:3965":{"crate_id":17,"path":["object","read","macho","section","MachOSection"],"kind":"struct"},"6:4267:39805":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_mask"],"kind":"struct"},"5:1348:1934":{"crate_id":5,"path":["alloc","collections","btree","map","Iter"],"kind":"struct"},"16:6052:3721":{"crate_id":16,"path":["gimli","read","dwarf","RangeIter"],"kind":"struct"},"1:3461:1977":{"crate_id":1,"path":["std","io","Write"],"kind":"trait"},"6:1643:37450":{"crate_id":6,"path":["libc","unix","linux_like","ifaddrs"],"kind":"struct"},"16:5839:3598":{"crate_id":16,"path":["gimli","read","cfi","RegisterRule"],"kind":"enum"},"2:9610:2017":{"crate_id":2,"path":["core","slice","iter","RSplitNMut"],"kind":"struct"},"2:46964:3015":{"crate_id":2,"path":["core","ffi","c_str","FromBytesWithNulError"],"kind":"struct"},"16:7372:3880":{"crate_id":16,"path":["gimli","read","rnglists","RangeListsFormat"],"kind":"enum"},"2:6430:2204":{"crate_id":2,"path":["core","iter","adapters","zip","zip"],"kind":"function"},"17:10490:44411":{"crate_id":17,"path":["object","read","pe","resource","ResourceName"],"kind":"struct"},"2:47560:31239":{"crate_id":2,"path":["core","iter","sources","repeat_n","RepeatN"],"kind":"struct"},"5:4986:59124":{"crate_id":5,"path":["alloc","slice","insert_head","InsertionHole"],"kind":"struct"},"16:5558:3583":{"crate_id":16,"path":["gimli","read","cfi","CieOrFde"],"kind":"enum"},"16:6842:60200":{"crate_id":16,"path":["gimli","read","lookup","PubStuffHeader"],"kind":"struct"},"17:11070:44723":{"crate_id":17,"path":["object","elf","CompressionHeader64"],"kind":"struct"},"6:519:36551":{"crate_id":6,"path":["libc","unix","rusage"],"kind":"struct"},"6:4274:39806":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_replay"],"kind":"struct"},"2:54005:2803":{"crate_id":2,"path":["core","core_arch","simd","f64x8"],"kind":"struct"},"12:320:3458":{"crate_id":12,"path":["hashbrown","raw","RawIntoIter"],"kind":"struct"},"1:2399:2488":{"crate_id":1,"path":["std","fs","read_link"],"kind":"function"},"2:49878:1990":{"crate_id":2,"path":["core","slice","iter","ArrayChunks"],"kind":"struct"},"2:49904:2010":{"crate_id":2,"path":["core","slice","iter","RChunks"],"kind":"struct"},"16:7426:3694":{"crate_id":16,"path":["gimli","read","rnglists","RngListIter"],"kind":"struct"},"5:271:59106":{"crate_id":5,"path":["alloc","boxed","thin","drop","DropGuard"],"kind":"struct"},"5:1059:3240":{"crate_id":5,"path":["alloc","collections","btree","borrow","DormantMutRef"],"kind":"struct"},"18:609:60924":{"crate_id":18,"path":["memchr","memmem","twoway","Suffix"],"kind":"struct"},"17:9422:44168":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdatIterator"],"kind":"struct"},"18:707:2621":{"crate_id":18,"path":["memchr","memmem","Searcher"],"kind":"struct"},"17:11813:49032":{"crate_id":17,"path":["object","macho","PreboundDylibCommand"],"kind":"struct"}},"external_crates":{"3":{"name":"compiler_builtins","html_root_url":"https://doc.rust-lang.org/nightly/"},"16":{"name":"gimli","html_root_url":"https://doc.rust-lang.org/nightly/"},"11":{"name":"adler","html_root_url":"https://docs.rs/adler/1.0.2/"},"18":{"name":"memchr","html_root_url":"https://doc.rust-lang.org/nightly/"},"14":{"name":"rustc_demangle","html_root_url":"https://doc.rust-lang.org/nightly/"},"13":{"name":"std_detect","html_root_url":"https://doc.rust-lang.org/nightly/"},"4":{"name":"rustc_std_workspace_core","html_root_url":"https://doc.rust-lang.org/nightly/"},"12":{"name":"hashbrown","html_root_url":"https://doc.rust-lang.org/nightly/"},"6":{"name":"libc","html_root_url":"https://doc.rust-lang.org/nightly/"},"19":{"name":"panic_unwind","html_root_url":"https://doc.rust-lang.org/nightly/"},"7":{"name":"unwind","html_root_url":"https://doc.rust-lang.org/nightly/"},"2":{"name":"core","html_root_url":"https://doc.rust-lang.org/nightly/"},"9":{"name":"miniz_oxide","html_root_url":"https://doc.rust-lang.org/nightly/"},"8":{"name":"cfg_if","html_root_url":"https://docs.rs/cfg-if/"},"15":{"name":"addr2line","html_root_url":"https://doc.rust-lang.org/nightly/"},"1":{"name":"std","html_root_url":"https://doc.rust-lang.org/nightly/"},"17":{"name":"object","html_root_url":"https://doc.rust-lang.org/nightly/"},"10":{"name":"rustc_std_workspace_alloc","html_root_url":"https://doc.rust-lang.org/nightly/"},"5":{"name":"alloc","html_root_url":"https://doc.rust-lang.org/nightly/"}},"format_version":24}