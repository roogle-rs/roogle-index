{"root":"0:0:1673","crate_version":"0.3.9","includes_private":false,"index":{"2:12097:31056":{"id":"2:12097:31056","crate_id":2,"name":"match_indices","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within this string\nslice as well as the index that the match starts at.\n\nFor matches of `pat` within `self` that overlap, only the indices\ncorresponding to the first match are returned.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rmatch_indices`] method can be used.\n\n[`rmatch_indices`]: str::rmatch_indices\n\n# Examples\n\nBasic usage:\n\n```\nlet v: Vec<_> = \"abcXXXabcYYYabc\".match_indices(\"abc\").collect();\nassert_eq!(v, [(0, \"abc\"), (6, \"abc\"), (12, \"abc\")]);\n\nlet v: Vec<_> = \"1abcabc2\".match_indices(\"abc\").collect();\nassert_eq!(v, [(1, \"abc\"), (4, \"abc\")]);\n\nlet v: Vec<_> = \"ababa\".match_indices(\"aba\").collect();\nassert_eq!(v, [(0, \"aba\")]); // only the first `aba`\n```","links":{"self::pattern":"2:11716:7738","`DoubleEndedIterator`":"2:7244:121","prim@char":"1:11894:419","str::rmatch_indices":"2:12100:31057"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"MatchIndices","id":"2:43516:7753","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11721:7734","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12114:31064":{"id":"2:12114:31064","crate_id":2,"name":"trim_start_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. `start` in this context means the first\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be left side, and for right-to-left languages like\nArabic or Hebrew, this will be the right side.\n\n# Examples\n\nBasic usage:\n\n```\nassert_eq!(\"11foo1bar11\".trim_start_matches('1'), \"foo1bar11\");\nassert_eq!(\"123foo1bar123\".trim_start_matches(char::is_numeric), \"foo1bar123\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_start_matches(x), \"foo1bar12\");\n```","links":{"prim@char":"1:11894:419","self::pattern":"2:11716:7738"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11721:7734","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12027:23453":{"id":"2:12027:23453","crate_id":2,"name":"get","span":null,"visibility":"public","docs":"Returns a subslice of `str`.\n\nThis is the non-panicking alternative to indexing the `str`. Returns\n[`None`] whenever equivalent indexing operation would panic.\n\n# Examples\n\n```\nlet v = String::from(\"üóª‚ààüåè\");\n\nassert_eq!(Some(\"üóª\"), v.get(0..4));\n\n// indices not on UTF-8 sequence boundaries\nassert!(v.get(1..).is_none());\nassert!(v.get(..8).is_none());\n\n// out of bounds\nassert!(v.get(..42).is_none());\n```","links":{"`None`":"2:41405:179"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"resolved_path":{"name":"Option","id":"2:41403:181","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"2:9817:222","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"2:9817:222","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12014":{"id":"2:12014","crate_id":2,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":["#[cfg(not(test))]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"primitive":"str"},"items":["2:12015:811","2:12016:19727","2:12017:31044","2:12018:31045","2:12020:31046","2:12023:23434","2:12024:31047","2:12025:314","2:12026:23457","2:12027:23453","2:12029:23454","2:12031:23455","2:12033:23456","2:12035:31048","2:12036:31049","2:12037:23481","2:12038:23482","2:12039:28377","2:12040:28200","2:12041:19658","2:12042:28250","2:12043:28256","2:12044:21940","2:12045:31050","2:12046:28378","2:12047:23498","2:12050:23499","2:12053:23500","2:12056:19509","2:12060:19510","2:12064:21939","2:12067:23490","2:12070:23492","2:12073:31051","2:12076:31052","2:12079:23494","2:12082:23496","2:12085:31053","2:12088:31054","2:12091:1893","2:12094:31055","2:12097:31056","2:12100:31057","2:12103:31058","2:12105:31059","2:12107:31060","2:12109:31061","2:12110:31062","2:12111:31063","2:12114:31064","2:12117:20825","2:12120:23501","2:12123:31065","2:12126:31066","2:12129:31067","2:12132:31068","2:12134:23142","2:12135:24651","2:12136:23143","2:12137:23139","2:12138:23138","2:12139:31069","2:12141:2002","2:12142:31070"],"negative":false,"synthetic":false,"blanket_impl":null}}},"2:12067:23490":{"id":"2:12067:23490","crate_id":2,"name":"split_inclusive","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by\ncharacters matched by a pattern. Differs from the iterator produced by\n`split` in that `split_inclusive` leaves the matched part as the\nterminator of the substring.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\\nlittle lamb\\nlittle lamb.\"\n    .split_inclusive('\\n').collect();\nassert_eq!(v, [\"Mary had a little lamb\\n\", \"little lamb\\n\", \"little lamb.\"]);\n```\n\nIf the last element of the string is matched,\nthat element will be considered the terminator of the preceding substring.\nThat substring will be the last item returned by the iterator.\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\\nlittle lamb\\nlittle lamb.\\n\"\n    .split_inclusive('\\n').collect();\nassert_eq!(v, [\"Mary had a little lamb\\n\", \"little lamb\\n\", \"little lamb.\\n\"]);\n```","links":{"prim@char":"1:11894:419","self::pattern":"2:11716:7738"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"SplitInclusive","id":"2:11539:7729","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11721:7734","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12064:21939":{"id":"2:12064:21939","crate_id":2,"name":"split","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by\ncharacters matched by a pattern.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rsplit`] method can be used.\n\n[`rsplit`]: str::rsplit\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".split(' ').collect();\nassert_eq!(v, [\"Mary\", \"had\", \"a\", \"little\", \"lamb\"]);\n\nlet v: Vec<&str> = \"\".split('X').collect();\nassert_eq!(v, [\"\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".split('X').collect();\nassert_eq!(v, [\"lion\", \"\", \"tiger\", \"leopard\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".split(\"::\").collect();\nassert_eq!(v, [\"lion\", \"tiger\", \"leopard\"]);\n\nlet v: Vec<&str> = \"abc1def2ghi\".split(char::is_numeric).collect();\nassert_eq!(v, [\"abc\", \"def\", \"ghi\"]);\n\nlet v: Vec<&str> = \"lionXtigerXleopard\".split(char::is_uppercase).collect();\nassert_eq!(v, [\"lion\", \"tiger\", \"leopard\"]);\n```\n\nIf the pattern is a slice of chars, split on each occurrence of any of the characters:\n\n```\nlet v: Vec<&str> = \"2020-11-03 23:59\".split(&['-', ' ', ':', '@'][..]).collect();\nassert_eq!(v, [\"2020\", \"11\", \"03\", \"23\", \"59\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".split(|c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"abc\", \"def\", \"ghi\"]);\n```\n\nIf a string contains multiple contiguous separators, you will end up\nwith empty strings in the output:\n\n```\nlet x = \"||||a||b|c\".to_string();\nlet d: Vec<_> = x.split('|').collect();\n\nassert_eq!(d, &[\"\", \"\", \"\", \"\", \"a\", \"\", \"b\", \"c\"]);\n```\n\nContiguous separators are separated by the empty string.\n\n```\nlet x = \"(///)\".to_string();\nlet d: Vec<_> = x.split('/').collect();\n\nassert_eq!(d, &[\"(\", \"\", \"\", \")\"]);\n```\n\nSeparators at the start or end of a string are neighbored\nby empty strings.\n\n```\nlet d: Vec<_> = \"010\".split(\"0\").collect();\nassert_eq!(d, &[\"\", \"1\", \"\"]);\n```\n\nWhen the empty string is used as a separator, it separates\nevery character in the string, along with the beginning\nand end of the string.\n\n```\nlet f: Vec<_> = \"rust\".split(\"\").collect();\nassert_eq!(f, &[\"\", \"r\", \"u\", \"s\", \"t\", \"\"]);\n```\n\nContiguous separators can lead to possibly surprising behavior\nwhen whitespace is used as the separator. This code is correct:\n\n```\nlet x = \"    a  b c\".to_string();\nlet d: Vec<_> = x.split(' ').collect();\n\nassert_eq!(d, &[\"\", \"\", \"\", \"\", \"a\", \"\", \"b\", \"c\"]);\n```\n\nIt does _not_ give you:\n\n```,ignore\nassert_eq!(d, &[\"a\", \"b\", \"c\"]);\n```\n\nUse [`split_whitespace`] for this behavior.\n\n[`split_whitespace`]: str::split_whitespace","links":{"self::pattern":"2:11716:7738","`DoubleEndedIterator`":"2:7244:121","prim@char":"1:11894:419","str::split_whitespace":"2:12042:28250","str::rsplit":"2:12070:23492"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Split","id":"2:43366:2190","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11721:7734","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12015:811":{"id":"2:12015:811","crate_id":2,"name":"len","span":null,"visibility":"public","docs":"Returns the length of `self`.\n\nThis length is in bytes, not [`char`]s or graphemes. In other words,\nit might not be what a human considers the length of the string.\n\n[`char`]: prim@char\n\n# Examples\n\nBasic usage:\n\n```\nlet len = \"foo\".len();\nassert_eq!(3, len);\n\nassert_eq!(\"∆íoo\".len(), 4); // fancy f!\nassert_eq!(\"∆íoo\".chars().count(), 3);\n```","links":{"prim@char":"1:11894:419"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12079:23494":{"id":"2:12079:23494","crate_id":2,"name":"splitn","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by a\npattern, restricted to returning at most `n` items.\n\nIf `n` substrings are returned, the last substring (the `n`th substring)\nwill contain the remainder of the string.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will not be double ended, because it is\nnot efficient to support.\n\nIf the pattern allows a reverse search, the [`rsplitn`] method can be\nused.\n\n[`rsplitn`]: str::rsplitn\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lambda\".splitn(3, ' ').collect();\nassert_eq!(v, [\"Mary\", \"had\", \"a little lambda\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".splitn(3, \"X\").collect();\nassert_eq!(v, [\"lion\", \"\", \"tigerXleopard\"]);\n\nlet v: Vec<&str> = \"abcXdef\".splitn(1, 'X').collect();\nassert_eq!(v, [\"abcXdef\"]);\n\nlet v: Vec<&str> = \"\".splitn(1, 'X').collect();\nassert_eq!(v, [\"\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".splitn(2, |c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"abc\", \"defXghi\"]);\n```","links":{"prim@char":"1:11894:419","self::pattern":"2:11716:7738","str::rsplitn":"2:12082:23496"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["n",{"primitive":"usize"}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"SplitN","id":"2:43470:7727","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11721:7734","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12111:31063":{"id":"2:12111:31063","crate_id":2,"name":"trim_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes and suffixes that match a\npattern repeatedly removed.\n\nThe [pattern] can be a [`char`], a slice of [`char`]s, or a function\nor closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_matches('1'), \"foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_matches(char::is_numeric), \"foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_matches(x), \"foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1foo1barXX\".trim_matches(|c| c == '1' || c == 'X'), \"foo1bar\");\n```","links":{"prim@char":"1:11894:419","self::pattern":"2:11716:7738"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11721:7734","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:11721:7734","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"DoubleEndedSearcher","id":"2:11741:7733","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12031:23455":{"id":"2:12031:23455","crate_id":2,"name":"get_unchecked","span":null,"visibility":"public","docs":"Returns an unchecked subslice of `str`.\n\nThis is the unchecked alternative to indexing the `str`.\n\n# Safety\n\nCallers of this function are responsible that these preconditions are\nsatisfied:\n\n* The starting index must not exceed the ending index;\n* Indexes must be within bounds of the original slice;\n* Indexes must lie on UTF-8 sequence boundaries.\n\nFailing that, the returned string slice may reference invalid memory or\nviolate the invariants communicated by the `str` type.\n\n# Examples\n\n```\nlet v = \"üóª‚ààüåè\";\nunsafe {\n    assert_eq!(\"üóª\", v.get_unchecked(0..4));\n    assert_eq!(\"‚àà\", v.get_unchecked(4..7));\n    assert_eq!(\"üåè\", v.get_unchecked(7..11));\n}\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"2:9817:222","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"2:9817:222","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"2:12025:314":{"id":"2:12025:314","crate_id":2,"name":"as_ptr","span":null,"visibility":"public","docs":"Converts a string slice to a raw pointer.\n\nAs string slices are a slice of bytes, the raw pointer points to a\n[`u8`]. This pointer will be pointing to the first byte of the string\nslice.\n\nThe caller must ensure that the returned pointer is never written to.\nIf you need to mutate the contents of the string slice, use [`as_mut_ptr`].\n\n[`as_mut_ptr`]: str::as_mut_ptr\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"Hello\";\nlet ptr = s.as_ptr();\n```","links":{"str::as_mut_ptr":"2:12026:23457","`u8`":"1:11911:1499"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"raw_pointer":{"mutable":false,"type":{"primitive":"u8"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12076:31052":{"id":"2:12076:31052","crate_id":2,"name":"rsplit_terminator","span":null,"visibility":"public","docs":"An iterator over substrings of `self`, separated by characters\nmatched by a pattern and yielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\nEquivalent to [`split`], except that the trailing substring is\nskipped if empty.\n\n[`split`]: str::split\n\nThis method can be used for string data that is _terminated_,\nrather than _separated_ by a pattern.\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a\nreverse search, and it will be double ended if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`split_terminator`] method can be\nused.\n\n[`split_terminator`]: str::split_terminator\n\n# Examples\n\n```\nlet v: Vec<&str> = \"A.B.\".rsplit_terminator('.').collect();\nassert_eq!(v, [\"B\", \"A\"]);\n\nlet v: Vec<&str> = \"A..B..\".rsplit_terminator(\".\").collect();\nassert_eq!(v, [\"\", \"B\", \"\", \"A\"]);\n\nlet v: Vec<&str> = \"A.B:C.D\".rsplit_terminator(&['.', ':'][..]).collect();\nassert_eq!(v, [\"D\", \"C\", \"B\", \"A\"]);\n```","links":{"self::pattern":"2:11716:7738","str::split":"2:12064:21939","prim@char":"1:11894:419","str::split_terminator":"2:12073:31051"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RSplitTerminator","id":"2:43434:7757","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11721:7734","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:11721:7734","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11736:7735","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12129:31067":{"id":"2:12129:31067","crate_id":2,"name":"trim_right_matches","span":null,"visibility":"public","docs":"Returns a string slice with all suffixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. 'Right' in this context means the last\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _left_ side, not the right.\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_right_matches('1'), \"11foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_right_matches(char::is_numeric), \"123foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_right_matches(x), \"12foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1fooX\".trim_right_matches(|c| c == '1' || c == 'X'), \"1foo\");\n```","links":{"prim@char":"1:11894:419","self::pattern":"2:11716:7738"},"attrs":["#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_end_matches`\",\nsuggestion = \"trim_end_matches\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_end_matches`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11721:7734","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:11721:7734","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11736:7735","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5387:31722":{"id":"5:5387:31722","crate_id":5,"name":"replacen","span":null,"visibility":"public","docs":"Replaces first N matches of a pattern with another string.\n\n`replacen` creates a new [`String`], and copies the data from this string slice into it.\nWhile doing so, it attempts to find matches of a pattern. If it finds any, it\nreplaces them with the replacement string slice at most `count` times.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"foo foo 123 foo\";\nassert_eq!(\"new new 123 foo\", s.replacen(\"foo\", \"new\", 2));\nassert_eq!(\"faa fao 123 foo\", s.replacen('o', \"a\", 3));\nassert_eq!(\"foo foo new23 foo\", s.replacen(char::is_numeric, \"new\", 1));\n```\n\nWhen the pattern doesn't match, it returns this string slice as [`String`]:\n\n```\nlet s = \"this is old\";\nassert_eq!(s, s.replacen(\"cookie monster\", \"little lamb\", 10));\n```","links":{"`String`":"5:7241:224"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the replaced string as a new allocation, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}],["to",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}],["count",{"primitive":"usize"}]],"output":{"resolved_path":{"name":"String","id":"5:7241:224","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11721:7734","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5399:31725":{"id":"5:5399:31725","crate_id":5,"name":"into_string","span":null,"visibility":"public","docs":"Converts a [`Box<str>`] into a [`String`] without copying or allocating.\n\n# Examples\n\nBasic usage:\n\n```\nlet string = String::from(\"birthday gift\");\nlet boxed_str = string.clone().into_boxed_str();\n\nassert_eq!(boxed_str.into_string(), string);\n```","links":{"`Box<str>`":"5:280:1924","`String`":"5:7241:224"},"attrs":["#[must_use = \"`self` will be dropped if the result is not used\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"resolved_path":{"name":"Box","id":"5:280:1924","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}},{"type":{"resolved_path":{"name":"Global","id":"5:6990:2074","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}]],"output":{"resolved_path":{"name":"String","id":"5:7241:224","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5382":{"id":"5:5382","crate_id":5,"name":null,"span":null,"visibility":"default","docs":"Methods for string slices.","links":{},"attrs":["#[cfg(not(test))]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"primitive":"str"},"items":["5:5383:31721","5:5384:8082","5:5387:31722","5:5390:31723","5:5398:31724","5:5399:31725","5:5400:2214","5:5401:23141","5:5402:23140"],"negative":false,"synthetic":false,"blanket_impl":null}}},"2:12117:20825":{"id":"2:12117:20825","crate_id":2,"name":"strip_prefix","span":null,"visibility":"public","docs":"Returns a string slice with the prefix removed.\n\nIf the string starts with the pattern `prefix`, returns substring after the prefix, wrapped\nin `Some`.  Unlike `trim_start_matches`, this method removes the prefix exactly once.\n\nIf the string does not start with `prefix`, returns `None`.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nassert_eq!(\"foo:bar\".strip_prefix(\"foo:\"), Some(\"bar\"));\nassert_eq!(\"foo:bar\".strip_prefix(\"bar\"), None);\nassert_eq!(\"foofoo\".strip_prefix(\"foo\"), Some(\"foo\"));\n```","links":{"prim@char":"1:11894:419","self::pattern":"2:11716:7738"},"attrs":["#[must_use =\n\"this returns the remaining substring as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["prefix",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:41403:181","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11721:7734","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12088:31054":{"id":"2:12088:31054","crate_id":2,"name":"rsplit_once","span":null,"visibility":"public","docs":"Splits the string on the last occurrence of the specified delimiter and\nreturns prefix before delimiter and suffix after delimiter.\n\n# Examples\n\n```\nassert_eq!(\"cfg\".rsplit_once('='), None);\nassert_eq!(\"cfg=foo\".rsplit_once('='), Some((\"cfg\", \"foo\")));\nassert_eq!(\"cfg=foo=bar\".rsplit_once('='), Some((\"cfg=foo\", \"bar\")));\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["delimiter",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:41403:181","args":{"angle_bracketed":{"args":[{"type":{"tuple":[{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11721:7734","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:11721:7734","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11736:7735","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12136:23143":{"id":"2:12136:23143","crate_id":2,"name":"eq_ignore_ascii_case","span":null,"visibility":"public","docs":"Checks that two strings are an ASCII case-insensitive match.\n\nSame as `to_ascii_lowercase(a) == to_ascii_lowercase(b)`,\nbut without allocating and copying temporaries.\n\n# Examples\n\n```\nassert!(\"Ferris\".eq_ignore_ascii_case(\"FERRIS\"));\nassert!(\"Ferr√∂s\".eq_ignore_ascii_case(\"FERR√∂S\"));\nassert!(!\"Ferr√∂s\".eq_ignore_ascii_case(\"FERR√ñS\"));\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["other",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12141:2002":{"id":"2:12141:2002","crate_id":2,"name":"escape_default","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_default`].\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"‚ù§\\n!\".escape_default() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"‚ù§\\n!\".escape_default());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"\\\\u{{2764}}\\\\n!\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"‚ù§\\n!\".escape_default().to_string(), \"\\\\u{2764}\\\\n!\");\n```","links":{"`char::escape_default`":"2:4540:2002"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EscapeDefault","id":"2:43674:2003","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12085:31053":{"id":"2:12085:31053","crate_id":2,"name":"split_once","span":null,"visibility":"public","docs":"Splits the string on the first occurrence of the specified delimiter and\nreturns prefix before delimiter and suffix after delimiter.\n\n# Examples\n\n```\nassert_eq!(\"cfg\".split_once('='), None);\nassert_eq!(\"cfg=\".split_once('='), Some((\"cfg\", \"\")));\nassert_eq!(\"cfg=foo\".split_once('='), Some((\"cfg\", \"foo\")));\nassert_eq!(\"cfg=foo=bar\".split_once('='), Some((\"cfg\", \"foo=bar\")));\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["delimiter",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:41403:181","args":{"angle_bracketed":{"args":[{"type":{"tuple":[{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11721:7734","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5401:23141":{"id":"5:5401:23141","crate_id":5,"name":"to_ascii_uppercase","span":null,"visibility":"public","docs":"Returns a copy of this string where each character is mapped to its\nASCII upper case equivalent.\n\nASCII letters 'a' to 'z' are mapped to 'A' to 'Z',\nbut non-ASCII letters are unchanged.\n\nTo uppercase the value in-place, use [`make_ascii_uppercase`].\n\nTo uppercase ASCII characters in addition to non-ASCII characters, use\n[`to_uppercase`].\n\n# Examples\n\n```\nlet s = \"Gr√º√üe, J√ºrgen ‚ù§\";\n\nassert_eq!(\"GR√º√üE, J√ºRGEN ‚ù§\", s.to_ascii_uppercase());\n```\n\n[`make_ascii_uppercase`]: str::make_ascii_uppercase\n[`to_uppercase`]: #method.to_uppercase","links":{"str::make_ascii_uppercase":"2:12137:23139"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use = \"to uppercase the value in-place, use `make_ascii_uppercase()`\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7241:224","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12035:31048":{"id":"2:12035:31048","crate_id":2,"name":"slice_unchecked","span":null,"visibility":"public","docs":"Creates a string slice from another string slice, bypassing safety\nchecks.\n\nThis is generally not recommended, use with caution! For a safe\nalternative see [`str`] and [`Index`].\n\n[`Index`]: crate::ops::Index\n\nThis new slice goes from `begin` to `end`, including `begin` but\nexcluding `end`.\n\nTo get a mutable string slice instead, see the\n[`slice_mut_unchecked`] method.\n\n[`slice_mut_unchecked`]: str::slice_mut_unchecked\n\n# Safety\n\nCallers of this function are responsible that three preconditions are\nsatisfied:\n\n* `begin` must not exceed `end`.\n* `begin` and `end` must be byte positions within the string slice.\n* `begin` and `end` must lie on UTF-8 sequence boundaries.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"L√∂we ËÄÅËôé L√©opard\";\n\nunsafe {\n    assert_eq!(\"L√∂we ËÄÅËôé L√©opard\", s.slice_unchecked(0, 21));\n}\n\nlet s = \"Hello, world!\";\n\nunsafe {\n    assert_eq!(\"world\", s.slice_unchecked(7, 12));\n}\n```","links":{"`str`":"1:11900:1397","str::slice_mut_unchecked":"2:12036:31049","crate::ops::Index":"2:2981:2084"},"attrs":["#[deprecated(since = \"1.29.0\", note =\n\"use `get_unchecked(begin..end)` instead\")]","#[must_use]"],"deprecation":{"since":"1.29.0","note":"use `get_unchecked(begin..end)` instead"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["begin",{"primitive":"usize"}],["end",{"primitive":"usize"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"2:12070:23492":{"id":"2:12070:23492","crate_id":2,"name":"rsplit","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by\ncharacters matched by a pattern and yielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`split`] method can be used.\n\n[`split`]: str::split\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".rsplit(' ').collect();\nassert_eq!(v, [\"lamb\", \"little\", \"a\", \"had\", \"Mary\"]);\n\nlet v: Vec<&str> = \"\".rsplit('X').collect();\nassert_eq!(v, [\"\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".rsplit('X').collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"\", \"lion\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".rsplit(\"::\").collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"lion\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".rsplit(|c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"ghi\", \"def\", \"abc\"]);\n```","links":{"self::pattern":"2:11716:7738","`DoubleEndedIterator`":"2:7244:121","prim@char":"1:11894:419","str::split":"2:12064:21939"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RSplit","id":"2:43384:7723","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11721:7734","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:11721:7734","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11736:7735","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12044:21940":{"id":"2:12044:21940","crate_id":2,"name":"lines","span":null,"visibility":"public","docs":"An iterator over the lines of a string, as string slices.\n\nLines are split at line endings that are either newlines (`\\n`) or\nsequences of a carriage return followed by a line feed (`\\r\\n`).\n\nLine terminators are not included in the lines returned by the iterator.\n\nThe final line ending is optional. A string that ends with a final line\nending will return the same lines as an otherwise identical string\nwithout a final line ending.\n\n# Examples\n\nBasic usage:\n\n```\nlet text = \"foo\\r\\nbar\\n\\nbaz\\n\";\nlet mut lines = text.lines();\n\nassert_eq!(Some(\"foo\"), lines.next());\nassert_eq!(Some(\"bar\"), lines.next());\nassert_eq!(Some(\"\"), lines.next());\nassert_eq!(Some(\"baz\"), lines.next());\n\nassert_eq!(None, lines.next());\n```\n\nThe final line ending isn't required:\n\n```\nlet text = \"foo\\nbar\\n\\r\\nbaz\";\nlet mut lines = text.lines();\n\nassert_eq!(Some(\"foo\"), lines.next());\nassert_eq!(Some(\"bar\"), lines.next());\nassert_eq!(Some(\"\"), lines.next());\nassert_eq!(Some(\"baz\"), lines.next());\n\nassert_eq!(None, lines.next());\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Lines","id":"2:43620:2186","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12060:19510":{"id":"2:12060:19510","crate_id":2,"name":"rfind","span":null,"visibility":"public","docs":"Returns the byte index for the first character of the last match of the pattern in\nthis string slice.\n\nReturns [`None`] if the pattern doesn't match.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nlet s = \"L√∂we ËÄÅËôé L√©opard Gepardi\";\n\nassert_eq!(s.rfind('L'), Some(13));\nassert_eq!(s.rfind('√©'), Some(14));\nassert_eq!(s.rfind(\"pard\"), Some(24));\n```\n\nMore complex patterns with closures:\n\n```\nlet s = \"L√∂we ËÄÅËôé L√©opard\";\n\nassert_eq!(s.rfind(char::is_whitespace), Some(12));\nassert_eq!(s.rfind(char::is_lowercase), Some(20));\n```\n\nNot finding the pattern:\n\n```\nlet s = \"L√∂we ËÄÅËôé L√©opard\";\nlet x: &[_] = &['1', '2'];\n\nassert_eq!(s.rfind(x), None);\n```","links":{"`None`":"2:41405:179","prim@char":"1:11894:419","self::pattern":"2:11716:7738"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:41403:181","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11721:7734","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:11721:7734","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11736:7735","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12100:31057":{"id":"2:12100:31057","crate_id":2,"name":"rmatch_indices","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within `self`,\nyielded in reverse order along with the index of the match.\n\nFor matches of `pat` within `self` that overlap, only the indices\ncorresponding to the last match are returned.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`match_indices`] method can be used.\n\n[`match_indices`]: str::match_indices\n\n# Examples\n\nBasic usage:\n\n```\nlet v: Vec<_> = \"abcXXXabcYYYabc\".rmatch_indices(\"abc\").collect();\nassert_eq!(v, [(12, \"abc\"), (6, \"abc\"), (0, \"abc\")]);\n\nlet v: Vec<_> = \"1abcabc2\".rmatch_indices(\"abc\").collect();\nassert_eq!(v, [(4, \"abc\"), (1, \"abc\")]);\n\nlet v: Vec<_> = \"ababa\".rmatch_indices(\"aba\").collect();\nassert_eq!(v, [(2, \"aba\")]); // only the last `aba`\n```","links":{"self::pattern":"2:11716:7738","`DoubleEndedIterator`":"2:7244:121","prim@char":"1:11894:419","str::match_indices":"2:12097:31056"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RMatchIndices","id":"2:43534:7754","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11721:7734","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:11721:7734","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11736:7735","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12038:23482":{"id":"2:12038:23482","crate_id":2,"name":"split_at_mut","span":null,"visibility":"public","docs":"Divide one mutable string slice into two at an index.\n\nThe argument, `mid`, should be a byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get immutable string slices instead, see the [`split_at`] method.\n\n[`split_at`]: str::split_at\n\n# Panics\n\nPanics if `mid` is not on a UTF-8 code point boundary, or if it is\npast the end of the last code point of the string slice.\n\n# Examples\n\nBasic usage:\n\n```\nlet mut s = \"Per Martin-L√∂f\".to_string();\n{\n    let (first, last) = s.split_at_mut(3);\n    first.make_ascii_uppercase();\n    assert_eq!(\"PER\", first);\n    assert_eq!(\" Martin-L√∂f\", last);\n}\nassert_eq!(\"PER Martin-L√∂f\", s);\n```","links":{"str::split_at":"2:12037:23481"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["mid",{"primitive":"usize"}]],"output":{"tuple":[{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12017:31044":{"id":"2:12017:31044","crate_id":2,"name":"is_char_boundary","span":null,"visibility":"public","docs":"Checks that `index`-th byte is the first byte in a UTF-8 code point\nsequence or the end of the string.\n\nThe start and end of the string (when `index == self.len()`) are\nconsidered to be boundaries.\n\nReturns `false` if `index` is greater than `self.len()`.\n\n# Examples\n\n```\nlet s = \"L√∂we ËÄÅËôé L√©opard\";\nassert!(s.is_char_boundary(0));\n// start of `ËÄÅ`\nassert!(s.is_char_boundary(6));\nassert!(s.is_char_boundary(s.len()));\n\n// second byte of `√∂`\nassert!(!s.is_char_boundary(2));\n\n// third byte of `ËÄÅ`\nassert!(!s.is_char_boundary(8));\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["index",{"primitive":"usize"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12041:19658":{"id":"2:12041:19658","crate_id":2,"name":"bytes","span":null,"visibility":"public","docs":"An iterator over the bytes of a string slice.\n\nAs a string slice consists of a sequence of bytes, we can iterate\nthrough a string slice by byte. This method returns such an iterator.\n\n# Examples\n\nBasic usage:\n\n```\nlet mut bytes = \"bors\".bytes();\n\nassert_eq!(Some(b'b'), bytes.next());\nassert_eq!(Some(b'o'), bytes.next());\nassert_eq!(Some(b'r'), bytes.next());\nassert_eq!(Some(b's'), bytes.next());\n\nassert_eq!(None, bytes.next());\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Bytes","id":"2:43352:2189","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12110:31062":{"id":"2:12110:31062","crate_id":2,"name":"trim_right","span":null,"visibility":"public","docs":"Returns a string slice with trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`.\n\n# Text directionality\n\nA string is a sequence of bytes. 'Right' in this context means the last\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _left_ side, not the right.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \" Hello\\tworld\\t\";\n\nassert_eq!(\" Hello\\tworld\", s.trim_right());\n```\n\nDirectionality:\n\n```\nlet s = \"English  \";\nassert!(Some('h') == s.trim_right().chars().rev().next());\n\nlet s = \"◊¢◊ë◊®◊ô◊™  \";\nassert!(Some('◊™') == s.trim_right().chars().rev().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_end`\", suggestion =\n\"trim_end\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_end`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12137:23139":{"id":"2:12137:23139","crate_id":2,"name":"make_ascii_uppercase","span":null,"visibility":"public","docs":"Converts this string to its ASCII upper case equivalent in-place.\n\nASCII letters 'a' to 'z' are mapped to 'A' to 'Z',\nbut non-ASCII letters are unchanged.\n\nTo return a new uppercased value without modifying the existing one, use\n[`to_ascii_uppercase()`].\n\n[`to_ascii_uppercase()`]: #method.to_ascii_uppercase\n\n# Examples\n\n```\nlet mut s = String::from(\"Gr√º√üe, J√ºrgen ‚ù§\");\n\ns.make_ascii_uppercase();\n\nassert_eq!(\"GR√º√üE, J√ºRGEN ‚ù§\", s);\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12018:31045":{"id":"2:12018:31045","crate_id":2,"name":"floor_char_boundary","span":null,"visibility":"public","docs":"Finds the closest `x` not exceeding `index` where `is_char_boundary(x)` is `true`.\n\nThis method can help you truncate a string so that it's still valid UTF-8, but doesn't\nexceed a given number of bytes. Note that this is done purely at the character level\nand can still visually split graphemes, even though the underlying characters aren't\nsplit. For example, the emoji üßë‚Äçüî¨ (scientist) could be split so that the string only\nincludes üßë (person) instead.\n\n# Examples\n\n```\n#![feature(round_char_boundary)]\nlet s = \"‚ù§Ô∏èüß°üíõüíöüíôüíú\";\nassert_eq!(s.len(), 26);\nassert!(!s.is_char_boundary(13));\n\nlet closest = s.floor_char_boundary(13);\nassert_eq!(closest, 10);\nassert_eq!(&s[..closest], \"‚ù§Ô∏èüß°\");\n```","links":{},"attrs":["#[unstable(feature = \"round_char_boundary\", issue = \"93743\")]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["index",{"primitive":"usize"}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12026:23457":{"id":"2:12026:23457","crate_id":2,"name":"as_mut_ptr","span":null,"visibility":"public","docs":"Converts a mutable string slice to a raw pointer.\n\nAs string slices are a slice of bytes, the raw pointer points to a\n[`u8`]. This pointer will be pointing to the first byte of the string\nslice.\n\nIt is your responsibility to make sure that the string slice only gets\nmodified in a way that it remains valid UTF-8.","links":{"`u8`":"1:11911:1499"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"raw_pointer":{"mutable":true,"type":{"primitive":"u8"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12042:28250":{"id":"2:12042:28250","crate_id":2,"name":"split_whitespace","span":null,"visibility":"public","docs":"Splits a string slice by whitespace.\n\nThe iterator returned will return string slices that are sub-slices of\nthe original string slice, separated by any amount of whitespace.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`. If you only want to split on ASCII whitespace\ninstead, use [`split_ascii_whitespace`].\n\n[`split_ascii_whitespace`]: str::split_ascii_whitespace\n\n# Examples\n\nBasic usage:\n\n```\nlet mut iter = \"A few words\".split_whitespace();\n\nassert_eq!(Some(\"A\"), iter.next());\nassert_eq!(Some(\"few\"), iter.next());\nassert_eq!(Some(\"words\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nAll kinds of whitespace are considered:\n\n```\nlet mut iter = \" Mary   had\\ta\\u{2009}little  \\n\\t lamb\".split_whitespace();\nassert_eq!(Some(\"Mary\"), iter.next());\nassert_eq!(Some(\"had\"), iter.next());\nassert_eq!(Some(\"a\"), iter.next());\nassert_eq!(Some(\"little\"), iter.next());\nassert_eq!(Some(\"lamb\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nIf the string is empty or all whitespace, the iterator yields no string slices:\n```\nassert_eq!(\"\".split_whitespace().next(), None);\nassert_eq!(\"   \".split_whitespace().next(), None);\n```","links":{"str::split_ascii_whitespace":"2:12043:28256"},"attrs":["#[must_use =\n\"this returns the split string as an iterator, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_split_whitespace\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"SplitWhitespace","id":"2:43640:7741","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12135:24651":{"id":"2:12135:24651","crate_id":2,"name":"as_ascii","span":null,"visibility":"public","docs":"If this string slice [`is_ascii`](Self::is_ascii), returns it as a slice\nof [ASCII characters](`ascii::Char`), otherwise returns `None`.","links":{"`ascii::Char`":"2:39561:23433","Self::is_ascii":"2:12134:23142"},"attrs":["#[unstable(feature = \"ascii_char\", issue = \"110998\")]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Option","id":"2:41403:181","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"resolved_path":{"name":"AsciiChar","id":"2:39561:23433","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12107:31060":{"id":"2:12107:31060","crate_id":2,"name":"trim_end","span":null,"visibility":"public","docs":"Returns a string slice with trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Text directionality\n\nA string is a sequence of bytes. `end` in this context means the last\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be right side, and for right-to-left languages like\nArabic or Hebrew, this will be the left side.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\nassert_eq!(\"\\n Hello\\tworld\", s.trim_end());\n```\n\nDirectionality:\n\n```\nlet s = \"  English  \";\nassert!(Some('h') == s.trim_end().chars().rev().next());\n\nlet s = \"  ◊¢◊ë◊®◊ô◊™  \";\nassert!(Some('◊™') == s.trim_end().chars().rev().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_trim_end\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12103:31058":{"id":"2:12103:31058","crate_id":2,"name":"trim","span":null,"visibility":"public","docs":"Returns a string slice with leading and trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\n\nassert_eq!(\"Hello\\tworld\", s.trim());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a slice, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_trim\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12105:31059":{"id":"2:12105:31059","crate_id":2,"name":"trim_start","span":null,"visibility":"public","docs":"Returns a string slice with leading whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Text directionality\n\nA string is a sequence of bytes. `start` in this context means the first\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be left side, and for right-to-left languages like\nArabic or Hebrew, this will be the right side.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\nassert_eq!(\"Hello\\tworld\\t\\n\", s.trim_start());\n```\n\nDirectionality:\n\n```\nlet s = \"  English  \";\nassert!(Some('E') == s.trim_start().chars().next());\n\nlet s = \"  ◊¢◊ë◊®◊ô◊™  \";\nassert!(Some('◊¢') == s.trim_start().chars().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_trim_start\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12138:23138":{"id":"2:12138:23138","crate_id":2,"name":"make_ascii_lowercase","span":null,"visibility":"public","docs":"Converts this string to its ASCII lower case equivalent in-place.\n\nASCII letters 'A' to 'Z' are mapped to 'a' to 'z',\nbut non-ASCII letters are unchanged.\n\nTo return a new lowercased value without modifying the existing one, use\n[`to_ascii_lowercase()`].\n\n[`to_ascii_lowercase()`]: #method.to_ascii_lowercase\n\n# Examples\n\n```\nlet mut s = String::from(\"GR√ú√üE, J√úRGEN ‚ù§\");\n\ns.make_ascii_lowercase();\n\nassert_eq!(\"gr√ú√üe, j√úrgen ‚ù§\", s);\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12123:31065":{"id":"2:12123:31065","crate_id":2,"name":"trim_end_matches","span":null,"visibility":"public","docs":"Returns a string slice with all suffixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. `end` in this context means the last\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be right side, and for right-to-left languages like\nArabic or Hebrew, this will be the left side.\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_end_matches('1'), \"11foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_end_matches(char::is_numeric), \"123foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_end_matches(x), \"12foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1fooX\".trim_end_matches(|c| c == '1' || c == 'X'), \"1foo\");\n```","links":{"prim@char":"1:11894:419","self::pattern":"2:11716:7738"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11721:7734","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:11721:7734","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11736:7735","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5398:31724":{"id":"5:5398:31724","crate_id":5,"name":"to_uppercase","span":null,"visibility":"public","docs":"Returns the uppercase equivalent of this string slice, as a new [`String`].\n\n'Uppercase' is defined according to the terms of the Unicode Derived Core Property\n`Uppercase`.\n\nSince some characters can expand into multiple characters when changing\nthe case, this function returns a [`String`] instead of modifying the\nparameter in-place.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"hello\";\n\nassert_eq!(\"HELLO\", s.to_uppercase());\n```\n\nScripts without case are not changed:\n\n```\nlet new_year = \"ÂÜúÂéÜÊñ∞Âπ¥\";\n\nassert_eq!(new_year, new_year.to_uppercase());\n```\n\nOne character can become multiple:\n```\nlet s = \"tsch√º√ü\";\n\nassert_eq!(\"TSCH√úSS\", s.to_uppercase());\n```","links":{"`String`":"5:7241:224"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the uppercase string as a new String, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7241:224","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12073:31051":{"id":"2:12073:31051","crate_id":2,"name":"split_terminator","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by\ncharacters matched by a pattern.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\nEquivalent to [`split`], except that the trailing substring\nis skipped if empty.\n\n[`split`]: str::split\n\nThis method can be used for string data that is _terminated_,\nrather than _separated_ by a pattern.\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rsplit_terminator`] method can be used.\n\n[`rsplit_terminator`]: str::rsplit_terminator\n\n# Examples\n\nBasic usage:\n\n```\nlet v: Vec<&str> = \"A.B.\".split_terminator('.').collect();\nassert_eq!(v, [\"A\", \"B\"]);\n\nlet v: Vec<&str> = \"A..B..\".split_terminator(\".\").collect();\nassert_eq!(v, [\"A\", \"\", \"B\", \"\"]);\n\nlet v: Vec<&str> = \"A.B:C.D\".split_terminator(&['.', ':'][..]).collect();\nassert_eq!(v, [\"A\", \"B\", \"C\", \"D\"]);\n```","links":{"self::pattern":"2:11716:7738","str::split":"2:12064:21939","prim@char":"1:11894:419","`DoubleEndedIterator`":"2:7244:121","str::rsplit_terminator":"2:12076:31052"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"SplitTerminator","id":"2:43416:7758","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11721:7734","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12094:31055":{"id":"2:12094:31055","crate_id":2,"name":"rmatches","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within this string slice,\nyielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`matches`] method can be used.\n\n[`matches`]: str::matches\n\n# Examples\n\nBasic usage:\n\n```\nlet v: Vec<&str> = \"abcXXXabcYYYabc\".rmatches(\"abc\").collect();\nassert_eq!(v, [\"abc\", \"abc\", \"abc\"]);\n\nlet v: Vec<&str> = \"1abc2abc3\".rmatches(char::is_numeric).collect();\nassert_eq!(v, [\"3\", \"2\", \"1\"]);\n```","links":{"self::pattern":"2:11716:7738","`DoubleEndedIterator`":"2:7244:121","prim@char":"1:11894:419","str::matches":"2:12091:1893"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RMatches","id":"2:43588:7756","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11721:7734","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:11721:7734","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11736:7735","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12036:31049":{"id":"2:12036:31049","crate_id":2,"name":"slice_mut_unchecked","span":null,"visibility":"public","docs":"Creates a string slice from another string slice, bypassing safety\nchecks.\nThis is generally not recommended, use with caution! For a safe\nalternative see [`str`] and [`IndexMut`].\n\n[`IndexMut`]: crate::ops::IndexMut\n\nThis new slice goes from `begin` to `end`, including `begin` but\nexcluding `end`.\n\nTo get an immutable string slice instead, see the\n[`slice_unchecked`] method.\n\n[`slice_unchecked`]: str::slice_unchecked\n\n# Safety\n\nCallers of this function are responsible that three preconditions are\nsatisfied:\n\n* `begin` must not exceed `end`.\n* `begin` and `end` must be byte positions within the string slice.\n* `begin` and `end` must lie on UTF-8 sequence boundaries.","links":{"`str`":"1:11900:1397","crate::ops::IndexMut":"2:2985:2085","str::slice_unchecked":"2:12035:31048"},"attrs":["#[deprecated(since = \"1.29.0\", note =\n\"use `get_unchecked_mut(begin..end)` instead\")]"],"deprecation":{"since":"1.29.0","note":"use `get_unchecked_mut(begin..end)` instead"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["begin",{"primitive":"usize"}],["end",{"primitive":"usize"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"2:12120:23501":{"id":"2:12120:23501","crate_id":2,"name":"strip_suffix","span":null,"visibility":"public","docs":"Returns a string slice with the suffix removed.\n\nIf the string ends with the pattern `suffix`, returns the substring before the suffix,\nwrapped in `Some`.  Unlike `trim_end_matches`, this method removes the suffix exactly once.\n\nIf the string does not end with `suffix`, returns `None`.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nassert_eq!(\"bar:foo\".strip_suffix(\":foo\"), Some(\"bar\"));\nassert_eq!(\"bar:foo\".strip_suffix(\"bar\"), None);\nassert_eq!(\"foofoo\".strip_suffix(\"foo\"), Some(\"foo\"));\n```","links":{"prim@char":"1:11894:419","self::pattern":"2:11716:7738"},"attrs":["#[must_use =\n\"this returns the remaining substring as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["suffix",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:41403:181","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11721:7734","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:11721:7734","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11736:7735","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12033:23456":{"id":"2:12033:23456","crate_id":2,"name":"get_unchecked_mut","span":null,"visibility":"public","docs":"Returns a mutable, unchecked subslice of `str`.\n\nThis is the unchecked alternative to indexing the `str`.\n\n# Safety\n\nCallers of this function are responsible that these preconditions are\nsatisfied:\n\n* The starting index must not exceed the ending index;\n* Indexes must be within bounds of the original slice;\n* Indexes must lie on UTF-8 sequence boundaries.\n\nFailing that, the returned string slice may reference invalid memory or\nviolate the invariants communicated by the `str` type.\n\n# Examples\n\n```\nlet mut v = String::from(\"üóª‚ààüåè\");\nunsafe {\n    assert_eq!(\"üóª\", v.get_unchecked_mut(0..4));\n    assert_eq!(\"‚àà\", v.get_unchecked_mut(4..7));\n    assert_eq!(\"üåè\", v.get_unchecked_mut(7..11));\n}\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"2:9817:222","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"2:9817:222","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"2:12139:31069":{"id":"2:12139:31069","crate_id":2,"name":"escape_debug","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_debug`].\n\nNote: only extended grapheme codepoints that begin the string will be\nescaped.\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"‚ù§\\n!\".escape_debug() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"‚ù§\\n!\".escape_debug());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"‚ù§\\\\n!\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"‚ù§\\n!\".escape_debug().to_string(), \"‚ù§\\\\n!\");\n```","links":{"`char::escape_debug`":"2:4539:31069"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EscapeDebug","id":"2:43665:7749","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5402:23140":{"id":"5:5402:23140","crate_id":5,"name":"to_ascii_lowercase","span":null,"visibility":"public","docs":"Returns a copy of this string where each character is mapped to its\nASCII lower case equivalent.\n\nASCII letters 'A' to 'Z' are mapped to 'a' to 'z',\nbut non-ASCII letters are unchanged.\n\nTo lowercase the value in-place, use [`make_ascii_lowercase`].\n\nTo lowercase ASCII characters in addition to non-ASCII characters, use\n[`to_lowercase`].\n\n# Examples\n\n```\nlet s = \"Gr√º√üe, J√ºrgen ‚ù§\";\n\nassert_eq!(\"gr√º√üe, j√ºrgen ‚ù§\", s.to_ascii_lowercase());\n```\n\n[`make_ascii_lowercase`]: str::make_ascii_lowercase\n[`to_lowercase`]: #method.to_lowercase","links":{"str::make_ascii_lowercase":"2:12138:23138"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use = \"to lowercase the value in-place, use `make_ascii_lowercase()`\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7241:224","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12024:31047":{"id":"2:12024:31047","crate_id":2,"name":"as_bytes_mut","span":null,"visibility":"public","docs":"Converts a mutable string slice to a mutable byte slice.\n\n# Safety\n\nThe caller must ensure that the content of the slice is valid UTF-8\nbefore the borrow ends and the underlying `str` is used.\n\nUse of a `str` whose contents are not valid UTF-8 is undefined behavior.\n\n# Examples\n\nBasic usage:\n\n```\nlet mut s = String::from(\"Hello\");\nlet bytes = unsafe { s.as_bytes_mut() };\n\nassert_eq!(b\"Hello\", bytes);\n```\n\nMutability:\n\n```\nlet mut s = String::from(\"üóª‚ààüåè\");\n\nunsafe {\n    let bytes = s.as_bytes_mut();\n\n    bytes[0] = 0xF0;\n    bytes[1] = 0x9F;\n    bytes[2] = 0x8D;\n    bytes[3] = 0x94;\n}\n\nassert_eq!(\"üçî‚ààüåè\", s);\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"slice":{"primitive":"u8"}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"2:12047:23498":{"id":"2:12047:23498","crate_id":2,"name":"contains","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a sub-slice of\nthis string slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nBasic usage:\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.contains(\"nana\"));\nassert!(!bananas.contains(\"apples\"));\n```","links":{"prim@char":"1:11894:419","self::pattern":"2:11716:7738"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11721:7734","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12039:28377":{"id":"2:12039:28377","crate_id":2,"name":"chars","span":null,"visibility":"public","docs":"Returns an iterator over the [`char`]s of a string slice.\n\nAs a string slice consists of valid UTF-8, we can iterate through a\nstring slice by [`char`]. This method returns such an iterator.\n\nIt's important to remember that [`char`] represents a Unicode Scalar\nValue, and might not match your idea of what a 'character' is. Iteration\nover grapheme clusters may be what you actually want. This functionality\nis not provided by Rust's standard library, check crates.io instead.\n\n# Examples\n\nBasic usage:\n\n```\nlet word = \"goodbye\";\n\nlet count = word.chars().count();\nassert_eq!(7, count);\n\nlet mut chars = word.chars();\n\nassert_eq!(Some('g'), chars.next());\nassert_eq!(Some('o'), chars.next());\nassert_eq!(Some('o'), chars.next());\nassert_eq!(Some('d'), chars.next());\nassert_eq!(Some('b'), chars.next());\nassert_eq!(Some('y'), chars.next());\nassert_eq!(Some('e'), chars.next());\n\nassert_eq!(None, chars.next());\n```\n\nRemember, [`char`]s might not match your intuition about characters:\n\n[`char`]: prim@char\n\n```\nlet y = \"yÃÜ\";\n\nlet mut chars = y.chars();\n\nassert_eq!(Some('y'), chars.next()); // not 'yÃÜ'\nassert_eq!(Some('\\u{0306}'), chars.next());\n\nassert_eq!(None, chars.next());\n```","links":{"prim@char":"1:11894:419"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Chars","id":"2:43336:7745","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12091:1893":{"id":"2:12091:1893","crate_id":2,"name":"matches","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within the given string\nslice.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rmatches`] method can be used.\n\n[`rmatches`]: str::matches\n\n# Examples\n\nBasic usage:\n\n```\nlet v: Vec<&str> = \"abcXXXabcYYYabc\".matches(\"abc\").collect();\nassert_eq!(v, [\"abc\", \"abc\", \"abc\"]);\n\nlet v: Vec<&str> = \"1abc2abc3\".matches(char::is_numeric).collect();\nassert_eq!(v, [\"1\", \"2\", \"3\"]);\n```","links":{"self::pattern":"2:11716:7738","`DoubleEndedIterator`":"2:7244:121","prim@char":"1:11894:419","str::matches":"2:12091:1893"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Matches","id":"2:43570:7755","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11721:7734","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12050:23499":{"id":"2:12050:23499","crate_id":2,"name":"starts_with","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a prefix of this\nstring slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nBasic usage:\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.starts_with(\"bana\"));\nassert!(!bananas.starts_with(\"nana\"));\n```","links":{"prim@char":"1:11894:419","self::pattern":"2:11716:7738"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11721:7734","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12142:31070":{"id":"2:12142:31070","crate_id":2,"name":"escape_unicode","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_unicode`].\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"‚ù§\\n!\".escape_unicode() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"‚ù§\\n!\".escape_unicode());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"\\\\u{{2764}}\\\\u{{a}}\\\\u{{21}}\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"‚ù§\\n!\".escape_unicode().to_string(), \"\\\\u{2764}\\\\u{a}\\\\u{21}\");\n```","links":{"`char::escape_unicode`":"2:4537:31070"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EscapeUnicode","id":"2:43683:7750","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12053:23500":{"id":"2:12053:23500","crate_id":2,"name":"ends_with","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a suffix of this\nstring slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nBasic usage:\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.ends_with(\"anas\"));\nassert!(!bananas.ends_with(\"nana\"));\n```","links":{"prim@char":"1:11894:419","self::pattern":"2:11716:7738"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11721:7734","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:11721:7734","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11736:7735","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12043:28256":{"id":"2:12043:28256","crate_id":2,"name":"split_ascii_whitespace","span":null,"visibility":"public","docs":"Splits a string slice by ASCII whitespace.\n\nThe iterator returned will return string slices that are sub-slices of\nthe original string slice, separated by any amount of ASCII whitespace.\n\nTo split by Unicode `Whitespace` instead, use [`split_whitespace`].\n\n[`split_whitespace`]: str::split_whitespace\n\n# Examples\n\nBasic usage:\n\n```\nlet mut iter = \"A few words\".split_ascii_whitespace();\n\nassert_eq!(Some(\"A\"), iter.next());\nassert_eq!(Some(\"few\"), iter.next());\nassert_eq!(Some(\"words\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nAll kinds of ASCII whitespace are considered:\n\n```\nlet mut iter = \" Mary   had\\ta little  \\n\\t lamb\".split_ascii_whitespace();\nassert_eq!(Some(\"Mary\"), iter.next());\nassert_eq!(Some(\"had\"), iter.next());\nassert_eq!(Some(\"a\"), iter.next());\nassert_eq!(Some(\"little\"), iter.next());\nassert_eq!(Some(\"lamb\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nIf the string is empty or all ASCII whitespace, the iterator yields no string slices:\n```\nassert_eq!(\"\".split_ascii_whitespace().next(), None);\nassert_eq!(\"   \".split_ascii_whitespace().next(), None);\n```","links":{"str::split_whitespace":"2:12042:28250"},"attrs":["#[must_use =\n\"this returns the split string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"SplitAsciiWhitespace","id":"2:43649:7740","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12126:31066":{"id":"2:12126:31066","crate_id":2,"name":"trim_left_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. 'Left' in this context means the first\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _right_ side, not the left.\n\n# Examples\n\nBasic usage:\n\n```\nassert_eq!(\"11foo1bar11\".trim_left_matches('1'), \"foo1bar11\");\nassert_eq!(\"123foo1bar123\".trim_left_matches(char::is_numeric), \"foo1bar123\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_left_matches(x), \"foo1bar12\");\n```","links":{"prim@char":"1:11894:419","self::pattern":"2:11716:7738"},"attrs":["#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_start_matches`\",\nsuggestion = \"trim_start_matches\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_start_matches`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11721:7734","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5384:8082":{"id":"5:5384:8082","crate_id":5,"name":"replace","span":null,"visibility":"public","docs":"Replaces all matches of a pattern with another string.\n\n`replace` creates a new [`String`], and copies the data from this string slice into it.\nWhile doing so, it attempts to find matches of a pattern. If it finds any, it\nreplaces them with the replacement string slice.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"this is old\";\n\nassert_eq!(\"this is new\", s.replace(\"old\", \"new\"));\nassert_eq!(\"than an old\", s.replace(\"is\", \"an\"));\n```\n\nWhen the pattern doesn't match, it returns this string slice as [`String`]:\n\n```\nlet s = \"this is old\";\nassert_eq!(s, s.replace(\"cookie monster\", \"little lamb\"));\n```","links":{"`String`":"5:7241:224"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the replaced string as a new allocation, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["from",{"generic":"P"}],["to",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7241:224","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11721:7734","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:0:1673":{"id":"0:0:1673","crate_id":0,"name":"winapi","span":{"filename":"src/lib.rs","begin":[6,0],"end":[71,1]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"module":{"is_crate":true,"items":[],"is_stripped":false}}},"2:12045:31050":{"id":"2:12045:31050","crate_id":2,"name":"lines_any","span":null,"visibility":"public","docs":"An iterator over the lines of a string.","links":{},"attrs":["#[deprecated(since = \"1.4.0\", note = \"use lines() instead now\")]"],"deprecation":{"since":"1.4.0","note":"use lines() instead now"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"LinesAny","id":"2:43630:7752","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12082:23496":{"id":"2:12082:23496","crate_id":2,"name":"rsplitn","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by a\npattern, starting from the end of the string, restricted to returning\nat most `n` items.\n\nIf `n` substrings are returned, the last substring (the `n`th substring)\nwill contain the remainder of the string.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will not be double ended, because it is not\nefficient to support.\n\nFor splitting from the front, the [`splitn`] method can be used.\n\n[`splitn`]: str::splitn\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".rsplitn(3, ' ').collect();\nassert_eq!(v, [\"lamb\", \"little\", \"Mary had a\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".rsplitn(3, 'X').collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"lionX\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".rsplitn(2, \"::\").collect();\nassert_eq!(v, [\"leopard\", \"lion::tiger\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".rsplitn(2, |c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"ghi\", \"abc1def\"]);\n```","links":{"prim@char":"1:11894:419","str::splitn":"2:12079:23494","self::pattern":"2:11716:7738"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["n",{"primitive":"usize"}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RSplitN","id":"2:43488:7725","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11721:7734","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:11721:7734","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11736:7735","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5383:31721":{"id":"5:5383:31721","crate_id":5,"name":"into_boxed_bytes","span":null,"visibility":"public","docs":"Converts a `Box<str>` into a `Box<[u8]>` without copying or allocating.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"this is a string\";\nlet boxed_str = s.to_owned().into_boxed_str();\nlet boxed_bytes = boxed_str.into_boxed_bytes();\nassert_eq!(*boxed_bytes, *s.as_bytes());\n```","links":{},"attrs":["#[must_use = \"`self` will be dropped if the result is not used\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"resolved_path":{"name":"Box","id":"5:280:1924","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}},{"type":{"resolved_path":{"name":"Global","id":"5:6990:2074","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}]],"output":{"resolved_path":{"name":"Box","id":"5:280:1924","args":{"angle_bracketed":{"args":[{"type":{"slice":{"primitive":"u8"}}},{"type":{"resolved_path":{"name":"Global","id":"5:6990:2074","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12134:23142":{"id":"2:12134:23142","crate_id":2,"name":"is_ascii","span":null,"visibility":"public","docs":"Checks if all characters in this string are within the ASCII range.\n\n# Examples\n\n```\nlet ascii = \"hello!\\n\";\nlet non_ascii = \"Gr√º√üe, J√ºrgen ‚ù§\";\n\nassert!(ascii.is_ascii());\nassert!(!non_ascii.is_ascii());\n```","links":{},"attrs":["#[rustc_const_unstable(feature = \"const_slice_is_ascii\", issue = \"111090\")]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12109:31061":{"id":"2:12109:31061","crate_id":2,"name":"trim_left","span":null,"visibility":"public","docs":"Returns a string slice with leading whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`.\n\n# Text directionality\n\nA string is a sequence of bytes. 'Left' in this context means the first\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _right_ side, not the left.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \" Hello\\tworld\\t\";\n\nassert_eq!(\"Hello\\tworld\\t\", s.trim_left());\n```\n\nDirectionality:\n\n```\nlet s = \"  English\";\nassert!(Some('E') == s.trim_left().chars().next());\n\nlet s = \"  ◊¢◊ë◊®◊ô◊™\";\nassert!(Some('◊¢') == s.trim_left().chars().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_start`\", suggestion\n= \"trim_start\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_start`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5400:2214":{"id":"5:5400:2214","crate_id":5,"name":"repeat","span":null,"visibility":"public","docs":"Creates a new [`String`] by repeating a string `n` times.\n\n# Panics\n\nThis function will panic if the capacity would overflow.\n\n# Examples\n\nBasic usage:\n\n```\nassert_eq!(\"abc\".repeat(4), String::from(\"abcabcabcabc\"));\n```\n\nA panic upon overflow:\n\n```should_panic\n// this will panic at runtime\nlet huge = \"0123456789abcdef\".repeat(usize::MAX);\n```","links":{"`String`":"5:7241:224"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["n",{"primitive":"usize"}]],"output":{"resolved_path":{"name":"String","id":"5:7241:224","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12037:23481":{"id":"2:12037:23481","crate_id":2,"name":"split_at","span":null,"visibility":"public","docs":"Divide one string slice into two at an index.\n\nThe argument, `mid`, should be a byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get mutable string slices instead, see the [`split_at_mut`]\nmethod.\n\n[`split_at_mut`]: str::split_at_mut\n\n# Panics\n\nPanics if `mid` is not on a UTF-8 code point boundary, or if it is\npast the end of the last code point of the string slice.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"Per Martin-L√∂f\";\n\nlet (first, last) = s.split_at(3);\n\nassert_eq!(\"Per\", first);\nassert_eq!(\" Martin-L√∂f\", last);\n```","links":{"str::split_at_mut":"2:12038:23482"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["mid",{"primitive":"usize"}]],"output":{"tuple":[{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12020:31046":{"id":"2:12020:31046","crate_id":2,"name":"ceil_char_boundary","span":null,"visibility":"public","docs":"Finds the closest `x` not below `index` where `is_char_boundary(x)` is `true`.\n\nThis method is the natural complement to [`floor_char_boundary`]. See that method\nfor more details.\n\n[`floor_char_boundary`]: str::floor_char_boundary\n\n# Panics\n\nPanics if `index > self.len()`.\n\n# Examples\n\n```\n#![feature(round_char_boundary)]\nlet s = \"‚ù§Ô∏èüß°üíõüíöüíôüíú\";\nassert_eq!(s.len(), 26);\nassert!(!s.is_char_boundary(13));\n\nlet closest = s.ceil_char_boundary(13);\nassert_eq!(closest, 14);\nassert_eq!(&s[..closest], \"‚ù§Ô∏èüß°üíõ\");\n```","links":{"str::floor_char_boundary":"2:12018:31045"},"attrs":["#[unstable(feature = \"round_char_boundary\", issue = \"93743\")]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["index",{"primitive":"usize"}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12040:28200":{"id":"2:12040:28200","crate_id":2,"name":"char_indices","span":null,"visibility":"public","docs":"Returns an iterator over the [`char`]s of a string slice, and their\npositions.\n\nAs a string slice consists of valid UTF-8, we can iterate through a\nstring slice by [`char`]. This method returns an iterator of both\nthese [`char`]s, as well as their byte positions.\n\nThe iterator yields tuples. The position is first, the [`char`] is\nsecond.\n\n# Examples\n\nBasic usage:\n\n```\nlet word = \"goodbye\";\n\nlet count = word.char_indices().count();\nassert_eq!(7, count);\n\nlet mut char_indices = word.char_indices();\n\nassert_eq!(Some((0, 'g')), char_indices.next());\nassert_eq!(Some((1, 'o')), char_indices.next());\nassert_eq!(Some((2, 'o')), char_indices.next());\nassert_eq!(Some((3, 'd')), char_indices.next());\nassert_eq!(Some((4, 'b')), char_indices.next());\nassert_eq!(Some((5, 'y')), char_indices.next());\nassert_eq!(Some((6, 'e')), char_indices.next());\n\nassert_eq!(None, char_indices.next());\n```\n\nRemember, [`char`]s might not match your intuition about characters:\n\n[`char`]: prim@char\n\n```\nlet yes = \"yÃÜes\";\n\nlet mut char_indices = yes.char_indices();\n\nassert_eq!(Some((0, 'y')), char_indices.next()); // not (0, 'yÃÜ')\nassert_eq!(Some((1, '\\u{0306}')), char_indices.next());\n\n// note the 3 here - the last character took up two bytes\nassert_eq!(Some((3, 'e')), char_indices.next());\nassert_eq!(Some((4, 's')), char_indices.next());\n\nassert_eq!(None, char_indices.next());\n```","links":{"prim@char":"1:11894:419"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"CharIndices","id":"2:43342:7744","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12046:28378":{"id":"2:12046:28378","crate_id":2,"name":"encode_utf16","span":null,"visibility":"public","docs":"Returns an iterator of `u16` over the string encoded as UTF-16.\n\n# Examples\n\nBasic usage:\n\n```\nlet text = \"Za≈º√≥≈Çƒá gƒô≈õlƒÖ ja≈∫≈Ñ\";\n\nlet utf8_len = text.len();\nlet utf16_len = text.encode_utf16().count();\n\nassert!(utf16_len <= utf8_len);\n```","links":{},"attrs":["#[must_use =\n\"this returns the encoded string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EncodeUtf16","id":"2:43658:7739","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12056:19509":{"id":"2:12056:19509","crate_id":2,"name":"find","span":null,"visibility":"public","docs":"Returns the byte index of the first character of this string slice that\nmatches the pattern.\n\nReturns [`None`] if the pattern doesn't match.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nlet s = \"L√∂we ËÄÅËôé L√©opard Gepardi\";\n\nassert_eq!(s.find('L'), Some(0));\nassert_eq!(s.find('√©'), Some(14));\nassert_eq!(s.find(\"pard\"), Some(17));\n```\n\nMore complex patterns using point-free style and closures:\n\n```\nlet s = \"L√∂we ËÄÅËôé L√©opard\";\n\nassert_eq!(s.find(char::is_whitespace), Some(5));\nassert_eq!(s.find(char::is_lowercase), Some(1));\nassert_eq!(s.find(|c: char| c.is_whitespace() || c.is_lowercase()), Some(1));\nassert_eq!(s.find(|c: char| (c < 'o') && (c > 'a')), Some(4));\n```\n\nNot finding the pattern:\n\n```\nlet s = \"L√∂we ËÄÅËôé L√©opard\";\nlet x: &[_] = &['1', '2'];\n\nassert_eq!(s.find(x), None);\n```","links":{"`None`":"2:41405:179","prim@char":"1:11894:419","self::pattern":"2:11716:7738"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:41403:181","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11721:7734","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12016:19727":{"id":"2:12016:19727","crate_id":2,"name":"is_empty","span":null,"visibility":"public","docs":"Returns `true` if `self` has a length of zero bytes.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\";\nassert!(s.is_empty());\n\nlet s = \"not empty\";\nassert!(!s.is_empty());\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12132:31068":{"id":"2:12132:31068","crate_id":2,"name":"parse","span":null,"visibility":"public","docs":"Parses this string slice into another type.\n\nBecause `parse` is so general, it can cause problems with type\ninference. As such, `parse` is one of the few times you'll see\nthe syntax affectionately known as the 'turbofish': `::<>`. This\nhelps the inference algorithm understand specifically which type\nyou're trying to parse into.\n\n`parse` can parse into any type that implements the [`FromStr`] trait.\n\n# Errors\n\nWill return [`Err`] if it's not possible to parse this string slice into\nthe desired type.\n\n[`Err`]: FromStr::Err\n\n# Examples\n\nBasic usage\n\n```\nlet four: u32 = \"4\".parse().unwrap();\n\nassert_eq!(4, four);\n```\n\nUsing the 'turbofish' instead of annotating `four`:\n\n```\nlet four = \"4\".parse::<u32>();\n\nassert_eq!(Ok(4), four);\n```\n\nFailing to parse:\n\n```\nlet nope = \"j\".parse::<u32>();\n\nassert!(nope.is_err());\n```","links":{"FromStr::Err":"2:11677:127","`FromStr`":"2:11676:2358"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Result","id":"2:41547:210","args":{"angle_bracketed":{"args":[{"type":{"generic":"F"}},{"type":{"qualified_path":{"name":"Err","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"F"},"trait":{"name":"FromStr","id":"2:11676:2358","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"F"},"bounds":[{"trait_bound":{"trait":{"name":"FromStr","id":"2:11676:2358","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12023:23434":{"id":"2:12023:23434","crate_id":2,"name":"as_bytes","span":null,"visibility":"public","docs":"Converts a string slice to a byte slice. To convert the byte slice back\ninto a string slice, use the [`from_utf8`] function.\n\n# Examples\n\nBasic usage:\n\n```\nlet bytes = \"bors\".as_bytes();\nassert_eq!(b\"bors\", bytes);\n```","links":{"`from_utf8`":"2:11283:7742"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"primitive":"u8"}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12029:23454":{"id":"2:12029:23454","crate_id":2,"name":"get_mut","span":null,"visibility":"public","docs":"Returns a mutable subslice of `str`.\n\nThis is the non-panicking alternative to indexing the `str`. Returns\n[`None`] whenever equivalent indexing operation would panic.\n\n# Examples\n\n```\nlet mut v = String::from(\"hello\");\n// correct length\nassert!(v.get_mut(0..5).is_some());\n// out of bounds\nassert!(v.get_mut(..42).is_none());\nassert_eq!(Some(\"he\"), v.get_mut(0..2).map(|v| &*v));\n\nassert_eq!(\"hello\", v);\n{\n    let s = v.get_mut(0..2);\n    let s = s.map(|s| {\n        s.make_ascii_uppercase();\n        &*s\n    });\n    assert_eq!(Some(\"HE\"), s);\n}\nassert_eq!(\"HEllo\", v);\n```","links":{"`None`":"2:41405:179"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"resolved_path":{"name":"Option","id":"2:41403:181","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"2:9817:222","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"2:9817:222","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5390:31723":{"id":"5:5390:31723","crate_id":5,"name":"to_lowercase","span":null,"visibility":"public","docs":"Returns the lowercase equivalent of this string slice, as a new [`String`].\n\n'Lowercase' is defined according to the terms of the Unicode Derived Core Property\n`Lowercase`.\n\nSince some characters can expand into multiple characters when changing\nthe case, this function returns a [`String`] instead of modifying the\nparameter in-place.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"HELLO\";\n\nassert_eq!(\"hello\", s.to_lowercase());\n```\n\nA tricky example, with sigma:\n\n```\nlet sigma = \"Œ£\";\n\nassert_eq!(\"œÉ\", sigma.to_lowercase());\n\n// but at the end of a word, it's œÇ, not œÉ:\nlet odysseus = \"·ΩàŒîŒ•Œ£Œ£ŒïŒéŒ£\";\n\nassert_eq!(\"·ΩÄŒ¥œÖœÉœÉŒµœçœÇ\", odysseus.to_lowercase());\n```\n\nLanguages without case are not changed:\n\n```\nlet new_year = \"ÂÜúÂéÜÊñ∞Âπ¥\";\n\nassert_eq!(new_year, new_year.to_lowercase());\n```","links":{"`String`":"5:7241:224"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the lowercase string as a new String, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7241:224","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}}},"paths":{"16:6558:15241":{"crate_id":16,"path":["gimli","read","line","LineRows"],"kind":"struct"},"2:45356:2515":{"crate_id":2,"path":["core","core_arch","simd","u8x2"],"kind":"struct"},"17:12331:18688":{"crate_id":17,"path":["object","macho","UuidCommand"],"kind":"struct"},"16:8214:15297":{"crate_id":16,"path":["gimli","read","value","Value"],"kind":"enum"},"2:7322:159":{"crate_id":2,"path":["core","iter","traits","iterator","Iterator"],"kind":"trait"},"17:12307:18686":{"crate_id":17,"path":["object","macho","TwolevelHint"],"kind":"struct"},"5:3117:2027":{"crate_id":5,"path":["alloc","collections","btree","set","Iter"],"kind":"struct"},"2:43144:7712":{"crate_id":2,"path":["core","slice","iter","Windows"],"kind":"struct"},"2:46069:2557":{"crate_id":2,"path":["core","core_arch","simd","f64x4"],"kind":"struct"},"16:5616:15198":{"crate_id":16,"path":["gimli","read","cfi","ParsedEhFrameHdr"],"kind":"struct"},"2:8842:30249":{"crate_id":2,"path":["core","fmt","builders","PadAdapter"],"kind":"struct"},"2:40215:2131":{"crate_id":2,"path":["core","ffi","VaList"],"kind":"struct"},"2:44097:8243":{"crate_id":2,"path":["core","str","CharEscapeDefault"],"kind":"struct"},"1:4436:2294":{"crate_id":1,"path":["std","os","unix","process","ExitStatusExt"],"kind":"trait"},"2:39346:8112":{"crate_id":2,"path":["core","ops","try_trait","Yeet"],"kind":"struct"},"17:12006:18667":{"crate_id":17,"path":["object","macho","FvmlibCommand"],"kind":"struct"},"2:11716:7738":{"crate_id":2,"path":["core","str","pattern"],"kind":"module"},"17:9312:15385":{"crate_id":17,"path":["object","read","any","DynamicRelocationIterator"],"kind":"struct"},"2:41760:88":{"crate_id":2,"path":["core","sync","atomic","AtomicU16"],"kind":"struct"},"17:13181:19430":{"crate_id":17,"path":["object","pe","ImageAuxSymbolFunction"],"kind":"struct"},"5:1454:198":{"crate_id":5,"path":["alloc","collections","btree","map","Range"],"kind":"struct"},"16:5346:15194":{"crate_id":16,"path":["gimli","constants","DwEhPe"],"kind":"struct"},"2:41454:8115":{"crate_id":2,"path":["core","option","Item"],"kind":"struct"},"2:47223:2491":{"crate_id":2,"path":["core","core_arch","simd","i16x32"],"kind":"struct"},"2:3182:30395":{"crate_id":2,"path":["core","ops","try_trait","NeverShortCircuitResidual"],"kind":"enum"},"1:8343:2351":{"crate_id":1,"path":["std","path","Prefix"],"kind":"enum"},"2:43153:7711":{"crate_id":2,"path":["core","slice","iter","Chunks"],"kind":"struct"},"2:40482:8063":{"crate_id":2,"path":["core","iter","adapters","take_while","TakeWhile"],"kind":"struct"},"17:13041:19421":{"crate_id":17,"path":["object","pe","Guid"],"kind":"struct"},"1:8433:2354":{"crate_id":1,"path":["std","path","Component"],"kind":"enum"},"17:9380:15409":{"crate_id":17,"path":["object","read","archive","ArchiveKind"],"kind":"enum"},"16:6400:15232":{"crate_id":16,"path":["gimli","read","aranges","ArangeHeader"],"kind":"struct"},"11:768:2033":{"crate_id":11,"path":["hashbrown","map","DrainFilter"],"kind":"struct"},"1:9034:167":{"crate_id":1,"path":["std","sync","mutex","MutexGuard"],"kind":"struct"},"7:79:14051":{"crate_id":7,"path":["unwind","libunwind","_Unwind_Action"],"kind":"enum"},"6:5919:13037":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","timex"],"kind":"struct"},"2:2589:116":{"crate_id":2,"path":["core","default","Default"],"kind":"trait"},"5:863:2054":{"crate_id":5,"path":["alloc","collections","binary_heap","Hole"],"kind":"struct"},"2:10207:7724":{"crate_id":2,"path":["core","slice","iter","RSplitMut"],"kind":"struct"},"6:1594:9766":{"crate_id":6,"path":["libc","unix","linux_like","Dl_info"],"kind":"struct"},"2:2348:182":{"crate_id":2,"path":["core","cmp","Ord"],"kind":"trait"},"6:62:8488":{"crate_id":6,"path":["libc","unix","DIR"],"kind":"enum"},"3:229:210":{"crate_id":3,"path":["compiler_builtins","float","cmp","Result"],"kind":"enum"},"17:9895:15465":{"crate_id":17,"path":["object","read","elf","hash","GnuHashTable"],"kind":"struct"},"2:9965:2027":{"crate_id":2,"path":["core","slice","iter","Iter"],"kind":"struct"},"16:6717:14218":{"crate_id":16,"path":["gimli","read","line","LineSequence"],"kind":"struct"},"5:2905:7654":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Owned"],"kind":"enum"},"6:4684:12344":{"crate_id":6,"path":["libc","unix","linux_like","linux","mntent"],"kind":"struct"},"2:10808:7718":{"crate_id":2,"path":["core","slice","iter","GroupByMut"],"kind":"struct"},"5:1058:30615":{"crate_id":5,"path":["alloc","collections","btree","borrow","DormantMutRef"],"kind":"struct"},"1:6373:2397":{"crate_id":1,"path":["std","sync","once","OnceState"],"kind":"struct"},"1:3383:2160":{"crate_id":1,"path":["std","io","Read"],"kind":"trait"},"17:12072:18672":{"crate_id":17,"path":["object","macho","SubUmbrellaCommand"],"kind":"struct"},"2:11721:7734":{"crate_id":2,"path":["core","str","pattern","Pattern"],"kind":"trait"},"16:6696:15244":{"crate_id":16,"path":["gimli","read","line","ColumnType"],"kind":"enum"},"2:7215:1923":{"crate_id":2,"path":["core","iter","traits","collect","Extend"],"kind":"trait"},"2:44335:2596":{"crate_id":2,"path":["core","task","wake","RawWaker"],"kind":"struct"},"1:1080:2045":{"crate_id":1,"path":["std","collections","hash","map","OccupiedError"],"kind":"struct"},"11:1561:14197":{"crate_id":11,"path":["hashbrown","rustc_entry","RustcVacantEntry"],"kind":"struct"},"6:595:8875":{"crate_id":6,"path":["libc","unix","protoent"],"kind":"struct"},"1:7465:15362":{"crate_id":1,"path":["std","backtrace_rs","symbolize","Symbol"],"kind":"struct"},"2:43274:7721":{"crate_id":2,"path":["core","slice","iter","RChunksExactMut"],"kind":"struct"},"2:9121:132":{"crate_id":2,"path":["core","fmt","Formatter"],"kind":"struct"},"2:9153:7670":{"crate_id":2,"path":["core","fmt","Octal"],"kind":"trait"},"2:9165:7677":{"crate_id":2,"path":["core","fmt","UpperExp"],"kind":"trait"},"11:1873:2050":{"crate_id":11,"path":["hashbrown","set","SymmetricDifference"],"kind":"struct"},"5:3753:2033":{"crate_id":5,"path":["alloc","collections","linked_list","DrainFilter"],"kind":"struct"},"1:7577:2000":{"crate_id":1,"path":["std","thread","local","AccessError"],"kind":"struct"},"17:9907:15494":{"crate_id":17,"path":["object","read","elf","version","VersionIndex"],"kind":"struct"},"1:10718:2158":{"crate_id":1,"path":["std","sys","unix","io","IoSlice"],"kind":"struct"},"6:4517:12330":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_rumble_effect"],"kind":"struct"},"17:12923:19415":{"crate_id":17,"path":["object","pe","ImageOptionalHeader32"],"kind":"struct"},"1:9987:2102":{"crate_id":1,"path":["std","sys","unix","os","SplitPaths"],"kind":"struct"},"17:11785:18656":{"crate_id":17,"path":["object","macho","DyldCacheImageInfo"],"kind":"struct"},"1:3782:2239":{"crate_id":1,"path":["std","net","udp","UdpSocket"],"kind":"struct"},"17:8310:15364":{"crate_id":17,"path":["object","common","SectionKind"],"kind":"enum"},"1:10708:119":{"crate_id":1,"path":["std","sys","unix","fs","DirBuilder"],"kind":"struct"},"2:2985:2085":{"crate_id":2,"path":["core","ops","index","IndexMut"],"kind":"trait"},"2:4187:7691":{"crate_id":2,"path":["core","cell","Cell"],"kind":"struct"},"11:1839:2027":{"crate_id":11,"path":["hashbrown","set","Iter"],"kind":"struct"},"5:6764:30744":{"crate_id":5,"path":["alloc","vec","dedup_by","FillGapOnDrop"],"kind":"struct"},"2:2800:8098":{"crate_id":2,"path":["core","ops","arith","RemAssign"],"kind":"trait"},"2:40158:8178":{"crate_id":2,"path":["core","ffi","c_str","FromBytesUntilNulError"],"kind":"struct"},"2:2856:8109":{"crate_id":2,"path":["core","ops","bit","ShrAssign"],"kind":"trait"},"2:22503:171":{"crate_id":2,"path":["core","num","nonzero","NonZeroI32"],"kind":"struct"},"6:4728:12349":{"crate_id":6,"path":["libc","unix","linux_like","linux","arpd_request"],"kind":"struct"},"17:8931:15346":{"crate_id":17,"path":["object","read","util","ByteString"],"kind":"struct"},"6:1630:9768":{"crate_id":6,"path":["libc","unix","linux_like","in_pktinfo"],"kind":"struct"},"1:8214:2231":{"crate_id":1,"path":["std","os","unix","net","addr","SocketAddr"],"kind":"struct"},"16:6351:15228":{"crate_id":16,"path":["gimli","read","abbrev","Attributes"],"kind":"enum"},"1:11897:1049":{"crate_id":1,"path":["std","pointer"],"kind":"primitive"},"2:42402:28160":{"crate_id":2,"path":["core","fmt","rt","Placeholder"],"kind":"struct"},"6:1589:9765":{"crate_id":6,"path":["libc","unix","linux_like","sched_param"],"kind":"struct"},"2:43674:2003":{"crate_id":2,"path":["core","str","iter","EscapeDefault"],"kind":"struct"},"11:1688:144":{"crate_id":11,"path":["hashbrown","set","HashSet"],"kind":"struct"},"16:7259:2336":{"crate_id":16,"path":["gimli","read","op","Location"],"kind":"enum"},"2:46167:27477":{"crate_id":2,"path":["core","core_arch","simd","m16x8"],"kind":"struct"},"17:12019:18668":{"crate_id":17,"path":["object","macho","Dylib"],"kind":"struct"},"1:11499:14230":{"crate_id":1,"path":["std","backtrace_rs","backtrace","Frame"],"kind":"struct"},"2:7202:134":{"crate_id":2,"path":["core","iter","traits","collect","FromIterator"],"kind":"trait"},"2:6772:8030":{"crate_id":2,"path":["core","iter","range","Step"],"kind":"trait"},"2:9146:112":{"crate_id":2,"path":["core","fmt","Debug"],"kind":"trait"},"16:2616:14287":{"crate_id":16,"path":["gimli","common","DebugMacinfoOffset"],"kind":"struct"},"2:1667:1087":{"crate_id":2,"path":["core","ptr"],"kind":"module"},"17:13066:19423":{"crate_id":17,"path":["object","pe","AnonObjectHeaderV2"],"kind":"struct"},"2:42485:128":{"crate_id":2,"path":["core","fmt","Error"],"kind":"struct"},"5:0:286":{"crate_id":5,"path":["alloc"],"kind":"module"},"16:7065:33301":{"crate_id":16,"path":["gimli","read","lookup","PubStuffParser"],"kind":"struct"},"2:2847:8107":{"crate_id":2,"path":["core","ops","bit","BitXorAssign"],"kind":"trait"},"1:10215:2367":{"crate_id":1,"path":["std","sys","unix","process","process_common","Command"],"kind":"struct"},"6:6007:13043":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ptrace_peeksiginfo_args"],"kind":"struct"},"16:8256:15298":{"crate_id":16,"path":["gimli","read","StoreOnHeap"],"kind":"struct"},"6:1637:9769":{"crate_id":6,"path":["libc","unix","linux_like","ifaddrs"],"kind":"struct"},"5:5191:30724":{"crate_id":5,"path":["alloc","slice","hack","to_vec","DropGuard"],"kind":"struct"},"1:1982:185":{"crate_id":1,"path":["std","ffi","os_str","OsString"],"kind":"struct"},"17:13516:19462":{"crate_id":17,"path":["object","pe","ImageLoadConfigDirectory32"],"kind":"struct"},"2:44292:211":{"crate_id":2,"path":["core","future","ResumeTy"],"kind":"struct"},"5:5818:2391":{"crate_id":5,"path":["alloc","sync","Weak"],"kind":"struct"},"16:7519:15269":{"crate_id":16,"path":["gimli","read","pubtypes","PubTypesEntryIter"],"kind":"struct"},"2:45631:2488":{"crate_id":2,"path":["core","core_arch","simd","i16x4"],"kind":"struct"},"16:5847:15209":{"crate_id":16,"path":["gimli","read","cfi","PartialFrameDescriptionEntry"],"kind":"struct"},"2:41212:155":{"crate_id":2,"path":["core","net","ip_addr","IpAddr"],"kind":"enum"},"14:165:14204":{"crate_id":14,"path":["rustc_demangle","DemangleStyle"],"kind":"enum"},"5:5642:232":{"crate_id":5,"path":["alloc","string","ToString"],"kind":"trait"},"6:4615:12339":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Sym"],"kind":"struct"},"1:10871:2375":{"crate_id":1,"path":["std","sys","unix","process","process_common","ExitCode"],"kind":"struct"},"2:2163:8125":{"crate_id":2,"path":["core","ptr","from_exposed_addr_mut"],"kind":"function"},"16:3782:14326":{"crate_id":16,"path":["gimli","constants","DwSectV2"],"kind":"struct"},"17:13667:19469":{"crate_id":17,"path":["object","pe","ImageAlpha64RuntimeFunctionEntry"],"kind":"struct"},"1:9392:20671":{"crate_id":1,"path":["std","sys","unix","fs","Dir"],"kind":"struct"},"14:160:14203":{"crate_id":14,"path":["rustc_demangle","Demangle"],"kind":"struct"},"17:12046:18670":{"crate_id":17,"path":["object","macho","SubFrameworkCommand"],"kind":"struct"},"17:11821:15549":{"crate_id":17,"path":["object","macho","FatArch32"],"kind":"struct"},"17:11282:18148":{"crate_id":17,"path":["object","elf","Ident"],"kind":"struct"},"1:11893:936":{"crate_id":1,"path":["std","never"],"kind":"primitive"},"2:47657:2558":{"crate_id":2,"path":["core","core_arch","simd","f64x8"],"kind":"struct"},"16:3872:14368":{"crate_id":16,"path":["gimli","constants","DwCfa"],"kind":"struct"},"9:481:14071":{"crate_id":9,"path":["miniz_oxide","DataFormat"],"kind":"enum"},"2:30876:7881":{"crate_id":2,"path":["core","cmp","Reverse"],"kind":"struct"},"17:12646:18709":{"crate_id":17,"path":["object","macho","ScatteredRelocationInfo"],"kind":"struct"},"2:4326:7839":{"crate_id":2,"path":["core","cell","BorrowRef"],"kind":"struct"},"17:9946:15467":{"crate_id":17,"path":["object","read","elf","version","VerdefIterator"],"kind":"struct"},"11:991:2042":{"crate_id":11,"path":["hashbrown","map","Entry"],"kind":"enum"},"17:11220:15609":{"crate_id":17,"path":["object","archive","AixMemberOffset"],"kind":"struct"},"17:13367:19446":{"crate_id":17,"path":["object","pe","ImageBoundImportDescriptor"],"kind":"struct"},"17:11844:18658":{"crate_id":17,"path":["object","macho","MachHeader32"],"kind":"struct"},"16:7572:33513":{"crate_id":16,"path":["gimli","read","rnglists","RangeListsFormat"],"kind":"enum"},"2:39970:7831":{"crate_id":2,"path":["core","async_iter","from_iter","FromIter"],"kind":"struct"},"16:6236:15221":{"crate_id":16,"path":["gimli","read","dwarf","RangeIter"],"kind":"struct"},"2:1544:2175":{"crate_id":2,"path":["core","mem","maybe_uninit","write_slice_cloned","Guard"],"kind":"struct"},"2:11504:8252":{"crate_id":2,"path":["core","str","iter","MatchesInternal"],"kind":"struct"},"2:40255:2082":{"crate_id":2,"path":["core","iter","adapters","by_ref_sized","ByRefSized"],"kind":"struct"},"11:1524:14195":{"crate_id":11,"path":["hashbrown","rustc_entry","RustcEntry"],"kind":"enum"},"2:43750:7768":{"crate_id":2,"path":["core","str","pattern","SearchStep"],"kind":"enum"},"16:2642:14288":{"crate_id":16,"path":["gimli","common","DebugMacroOffset"],"kind":"struct"},"2:45901:2483":{"crate_id":2,"path":["core","core_arch","simd","i8x16"],"kind":"struct"},"17:12224:18681":{"crate_id":17,"path":["object","macho","DylibTableOfContents"],"kind":"struct"},"1:5926:206":{"crate_id":1,"path":["std","sync","mpmc","counter","Receiver"],"kind":"struct"},"5:5235:7695":{"crate_id":5,"path":["alloc","slice","Concat"],"kind":"trait"},"17:11641:18172":{"crate_id":17,"path":["object","elf","HashHeader"],"kind":"struct"},"1:5764:2403":{"crate_id":1,"path":["std","sync","lazy_lock","LazyLock"],"kind":"struct"},"1:1594:2051":{"crate_id":1,"path":["std","collections","hash","set","Union"],"kind":"struct"},"2:21677:28070":{"crate_id":2,"path":["core","num","bignum","Big32x40"],"kind":"struct"},"11:1634:33043":{"crate_id":11,"path":["hashbrown","scopeguard","ScopeGuard"],"kind":"struct"},"5:5798:70":{"crate_id":5,"path":["alloc","sync","Arc"],"kind":"struct"},"1:10658:25176":{"crate_id":1,"path":["std","sys","unix","fs","StatxExtraFields"],"kind":"struct"},"17:9822:15452":{"crate_id":17,"path":["object","read","elf","relocation","RelocationSections"],"kind":"struct"},"6:4793:12357":{"crate_id":6,"path":["libc","unix","linux_like","linux","can_filter"],"kind":"struct"},"18:481:19522":{"crate_id":18,"path":["memchr","cow","CowBytes"],"kind":"struct"},"17:12372:18691":{"crate_id":17,"path":["object","macho","FilesetEntryCommand"],"kind":"struct"},"1:4112:2286":{"crate_id":1,"path":["std","os","unix","net","ancillary","AncillaryData"],"kind":"enum"},"2:39204:198":{"crate_id":2,"path":["core","ops","range","Range"],"kind":"struct"},"1:10698:130":{"crate_id":1,"path":["std","sys","unix","fs","FileType"],"kind":"struct"},"5:7089:2029":{"crate_id":5,"path":["alloc","collections","vec_deque","into_iter","IntoIter"],"kind":"struct"},"2:44109:8246":{"crate_id":2,"path":["core","str","IsNotEmpty"],"kind":"struct"},"18:582:7881":{"crate_id":18,"path":["memchr","memmem","twoway","Reverse"],"kind":"struct"},"2:3163:7829":{"crate_id":2,"path":["core","ops","try_trait","Residual"],"kind":"trait"},"1:8097:2158":{"crate_id":1,"path":["std","io","IoSlice"],"kind":"struct"},"17:12388:18692":{"crate_id":17,"path":["object","macho","EncryptionInfoCommand32"],"kind":"struct"},"17:11628:18171":{"crate_id":17,"path":["object","elf","NoteHeader64"],"kind":"struct"},"5:7164:102":{"crate_id":5,"path":["alloc","ffi","c_str","CString"],"kind":"struct"},"1:1048:2042":{"crate_id":1,"path":["std","collections","hash","map","Entry"],"kind":"enum"},"1:5067:191":{"crate_id":1,"path":["std","path","PathBuf"],"kind":"struct"},"2:45400:2516":{"crate_id":2,"path":["core","core_arch","simd","u8x4"],"kind":"struct"},"5:2916:30613":{"crate_id":5,"path":["alloc","collections","btree","node","marker","ValMut"],"kind":"struct"},"16:5677:15202":{"crate_id":16,"path":["gimli","read","cfi","CieOffsetEncoding"],"kind":"enum"},"2:42907:8232":{"crate_id":2,"path":["core","slice","sort","TimSortRun"],"kind":"struct"},"1:480:22288":{"crate_id":1,"path":["std","thread","spawn_unchecked_","MaybeDangling"],"kind":"struct"},"2:42922:27697":{"crate_id":2,"path":["core","slice","ascii","EscapeByte"],"kind":"struct"},"11:675:2035":{"crate_id":11,"path":["hashbrown","map","IntoKeys"],"kind":"struct"},"17:1919:15480":{"crate_id":17,"path":["object","read","elf","relocation","ElfRelaIterator"],"kind":"enum"},"7:32:14044":{"crate_id":7,"path":["unwind","libunwind","_Unwind_Reason_Code"],"kind":"enum"},"6:4400:12316":{"crate_id":6,"path":["libc","unix","linux_like","linux","msginfo"],"kind":"struct"},"2:43772:7769":{"crate_id":2,"path":["core","str","pattern","CharSearcher"],"kind":"struct"},"16:2546:14284":{"crate_id":16,"path":["gimli","common","LocationListsOffset"],"kind":"struct"},"16:2879:14298":{"crate_id":16,"path":["gimli","common","DebugFrameOffset"],"kind":"struct"},"1:1821:2102":{"crate_id":1,"path":["std","env","SplitPaths"],"kind":"struct"},"6:4379:12314":{"crate_id":6,"path":["libc","unix","linux_like","linux","packet_mreq"],"kind":"struct"},"2:41720:81":{"crate_id":2,"path":["core","sync","atomic","AtomicI16"],"kind":"struct"},"6:4983:12379":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_setup"],"kind":"struct"},"16:4327:14751":{"crate_id":16,"path":["gimli","constants","DwAt"],"kind":"struct"},"17:13461:19456":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation32"],"kind":"struct"},"17:10989:15398":{"crate_id":17,"path":["object","read","Export"],"kind":"struct"},"5:4167:2175":{"crate_id":5,"path":["alloc","collections","vec_deque","into_iter","try_rfold","Guard"],"kind":"struct"},"17:9721:15442":{"crate_id":17,"path":["object","read","elf","section","ElfSectionIterator"],"kind":"struct"},"6:5986:13041":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","Elf32_Chdr"],"kind":"struct"},"17:13145:19427":{"crate_id":17,"path":["object","pe","ImageSymbolEx"],"kind":"struct"},"16:7557:15272":{"crate_id":16,"path":["gimli","read","rnglists","RangeLists"],"kind":"struct"},"2:20608:30061":{"crate_id":2,"path":["core","core_simd","swizzle","deinterleave","Odd"],"kind":"struct"},"2:4786:29444":{"crate_id":2,"path":["core","ffi","sealed_trait","VaArgSafe"],"kind":"trait"},"2:47715:7632":{"crate_id":2,"path":["core","core_arch","x86","__m256"],"kind":"struct"},"2:4145:7846":{"crate_id":2,"path":["core","cell","once","OnceCell"],"kind":"struct"},"17:9959:15495":{"crate_id":17,"path":["object","read","elf","version","VerdauxIterator"],"kind":"struct"},"11:2212:33040":{"crate_id":11,"path":["hashbrown","raw","TableLayout"],"kind":"struct"},"1:11455:7646":{"crate_id":1,"path":["std","alloc","System"],"kind":"struct"},"16:2862:14297":{"crate_id":16,"path":["gimli","common","DebugTypeSignature"],"kind":"struct"},"17:13488:19459":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation64V2"],"kind":"struct"},"17:13265:19438":{"crate_id":17,"path":["object","pe","ImageArchiveMemberHeader"],"kind":"struct"},"2:4410:1988":{"crate_id":2,"path":["core","cell","UnsafeCell"],"kind":"struct"},"17:10580:15593":{"crate_id":17,"path":["object","read","pe","import","ImportDescriptorIterator"],"kind":"struct"},"2:43588:7756":{"crate_id":2,"path":["core","str","iter","RMatches"],"kind":"struct"},"5:4818:204":{"crate_id":5,"path":["alloc","rc","Rc"],"kind":"struct"},"5:2912:30614":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Mut"],"kind":"struct"},"2:47704:7631":{"crate_id":2,"path":["core","core_arch","x86","__m256i"],"kind":"struct"},"1:5179:190":{"crate_id":1,"path":["std","path","Path"],"kind":"struct"},"2:40708:2217":{"crate_id":2,"path":["core","iter","sources","repeat","Repeat"],"kind":"struct"},"1:926:2036":{"crate_id":1,"path":["std","collections","hash","map","IntoValues"],"kind":"struct"},"6:4991:12380":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_user_dev"],"kind":"struct"},"1:8147:2189":{"crate_id":1,"path":["std","io","Bytes"],"kind":"struct"},"5:6367:2029":{"crate_id":5,"path":["alloc","vec","into_iter","IntoIter"],"kind":"struct"},"1:8782:2375":{"crate_id":1,"path":["std","process","ExitCode"],"kind":"struct"},"2:44282:205":{"crate_id":2,"path":["core","future","ready","Ready"],"kind":"struct"},"1:10841:2368":{"crate_id":1,"path":["std","sys","unix","process","process_common","Stdio"],"kind":"enum"},"11:2076:2043":{"crate_id":11,"path":["hashbrown","set","OccupiedEntry"],"kind":"struct"},"17:9409:15410":{"crate_id":17,"path":["object","read","archive","Members"],"kind":"enum"},"16:6431:15233":{"crate_id":16,"path":["gimli","read","aranges","ArangeEntryIter"],"kind":"struct"},"6:5050:12385":{"crate_id":6,"path":["libc","unix","linux_like","linux","hwtstamp_config"],"kind":"struct"},"1:5385:2367":{"crate_id":1,"path":["std","process","Command"],"kind":"struct"},"1:11905:643":{"crate_id":1,"path":["std","f64"],"kind":"primitive"},"2:40398:8058":{"crate_id":2,"path":["core","iter","adapters","peekable","Peekable"],"kind":"struct"},"11:2087:2044":{"crate_id":11,"path":["hashbrown","set","VacantEntry"],"kind":"struct"},"2:39126:7665":{"crate_id":2,"path":["core","ops","generator","GeneratorState"],"kind":"enum"},"1:11694:22287":{"crate_id":1,"path":["std","backtrace_rs","symbolize","gimli","mmap","Mmap"],"kind":"struct"},"2:21912:27658":{"crate_id":2,"path":["core","num","flt2dec","Sign"],"kind":"enum"},"16:6990:15256":{"crate_id":16,"path":["gimli","read","loclists","LocationListEntry"],"kind":"struct"},"17:10923:15395":{"crate_id":17,"path":["object","read","ObjectMap"],"kind":"struct"},"5:7211:2127":{"crate_id":5,"path":["alloc","ffi","c_str","FromVecWithNulError"],"kind":"struct"},"18:521:19521":{"crate_id":18,"path":["memchr","memmem","prefilter","Prefilter"],"kind":"enum"},"2:42169:7670":{"crate_id":2,"path":["core","fmt","num","Octal"],"kind":"struct"},"2:11736:7735":{"crate_id":2,"path":["core","str","pattern","ReverseSearcher"],"kind":"trait"},"1:6369:2014":{"crate_id":1,"path":["std","sync","once","Once"],"kind":"struct"},"16:5557:15195":{"crate_id":16,"path":["gimli","read","addr","DebugAddr"],"kind":"struct"},"17:9275:33984":{"crate_id":17,"path":["object","read","any","SymbolIteratorInternal"],"kind":"enum"},"2:40205:2132":{"crate_id":2,"path":["core","ffi","VaListImpl"],"kind":"struct"},"6:6849:13468":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user_fpregs_struct"],"kind":"struct"},"1:3925:2255":{"crate_id":1,"path":["std","os","unix","fs","PermissionsExt"],"kind":"trait"},"16:6876:15250":{"crate_id":16,"path":["gimli","read","loclists","DebugLoc"],"kind":"struct"},"1:5693:2394":{"crate_id":1,"path":["std","sync","barrier","BarrierWaitResult"],"kind":"struct"},"17:11060:15400":{"crate_id":17,"path":["object","read","Relocation"],"kind":"struct"},"17:386:15360":{"crate_id":17,"path":["object","read","any","Segment"],"kind":"struct"},"5:2087:30837":{"crate_id":5,"path":["alloc","collections","btree","merge_iter","MergeIterInner"],"kind":"struct"},"16:6307:15224":{"crate_id":16,"path":["gimli","read","abbrev","DebugAbbrev"],"kind":"struct"},"1:8913:20231":{"crate_id":1,"path":["std","sync","mpmc","array","ArrayToken"],"kind":"struct"},"1:676:2010":{"crate_id":1,"path":["std","backtrace","LazilyResolvedCapture"],"kind":"struct"},"1:11314:20676":{"crate_id":1,"path":["std","sys_common","net","LookupHost"],"kind":"struct"},"2:8253:2340":{"crate_id":2,"path":["core","panic","unwind_safe","UnwindSafe"],"kind":"trait"},"2:4255:207":{"crate_id":2,"path":["core","cell","RefCell"],"kind":"struct"},"2:9807:2163":{"crate_id":2,"path":["core","slice","index","private_slice_index","Sealed"],"kind":"trait"},"1:501:1974":{"crate_id":1,"path":["std","thread","PanicGuard"],"kind":"struct"},"1:530:1979":{"crate_id":1,"path":["std","thread","Packet"],"kind":"struct"},"6:7574:12557":{"crate_id":6,"path":["libc","unix","linux_like","linux","canfd_frame"],"kind":"struct"},"2:41318:27498":{"crate_id":2,"path":["core","net","parser","AddrKind"],"kind":"enum"},"5:2077:1974":{"crate_id":5,"path":["alloc","collections","btree","mem","replace","PanicGuard"],"kind":"struct"},"2:40286:8044":{"crate_id":2,"path":["core","iter","adapters","copied","Copied"],"kind":"struct"},"17:11109:15403":{"crate_id":17,"path":["object","read","CompressedData"],"kind":"struct"},"17:10660:15400":{"crate_id":17,"path":["object","read","pe","relocation","Relocation"],"kind":"struct"},"1:7827:130":{"crate_id":1,"path":["std","fs","FileType"],"kind":"struct"},"5:6578:7802":{"crate_id":5,"path":["alloc","vec","set_len_on_drop","SetLenOnDrop"],"kind":"struct"},"1:7868:2066":{"crate_id":1,"path":["std","io","cursor","Cursor"],"kind":"struct"},"2:21783:27492":{"crate_id":2,"path":["core","num","dec2flt","common","BiasedFp"],"kind":"struct"},"5:7022:2056":{"crate_id":5,"path":["alloc","collections","binary_heap","DrainSorted"],"kind":"struct"},"16:6254:15222":{"crate_id":16,"path":["gimli","read","endian_slice","EndianSlice"],"kind":"struct"},"17:13477:19458":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation32V2"],"kind":"struct"},"1:3881:2252":{"crate_id":1,"path":["std","os","unix","ffi","os_str","OsStrExt"],"kind":"trait"},"2:45801:2523":{"crate_id":2,"path":["core","core_arch","simd","u16x8"],"kind":"struct"},"6:4327:12310":{"crate_id":6,"path":["libc","unix","linux_like","linux","dqblk"],"kind":"struct"},"17:11258:18147":{"crate_id":17,"path":["object","elf","FileHeader64"],"kind":"struct"},"2:44121:8259":{"crate_id":2,"path":["core","time","Nanoseconds"],"kind":"struct"},"14:0:1784":{"crate_id":14,"path":["rustc_demangle"],"kind":"module"},"1:11041:8259":{"crate_id":1,"path":["std","sys","unix","time","Nanoseconds"],"kind":"struct"},"18:736:19512":{"crate_id":18,"path":["memchr","memmem","SearcherKind"],"kind":"enum"},"2:43182:7714":{"crate_id":2,"path":["core","slice","iter","ChunksExactMut"],"kind":"struct"},"1:7650:2011":{"crate_id":1,"path":["std","backtrace","BacktraceStatus"],"kind":"enum"},"17:10015:15543":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldSubCache"],"kind":"struct"},"1:9049:2417":{"crate_id":1,"path":["std","time","Instant"],"kind":"struct"},"16:154:14251":{"crate_id":16,"path":["gimli","read","util","ArrayVec"],"kind":"struct"},"5:6739:30746":{"crate_id":5,"path":["alloc","vec","retain_mut","BackshiftOnDrop"],"kind":"struct"},"16:7488:15266":{"crate_id":16,"path":["gimli","read","pubnames","PubNamesEntryIter"],"kind":"struct"},"2:45671:2500":{"crate_id":2,"path":["core","core_arch","simd","i64x1"],"kind":"struct"},"16:5071:14991":{"crate_id":16,"path":["gimli","constants","DwMacro"],"kind":"struct"},"16:7652:198":{"crate_id":16,"path":["gimli","read","rnglists","Range"],"kind":"struct"},"1:8266:2321":{"crate_id":1,"path":["std","os","linux","process","PidFd"],"kind":"struct"},"2:45690:2549":{"crate_id":2,"path":["core","core_arch","simd","f32x2"],"kind":"struct"},"1:8130:2187":{"crate_id":1,"path":["std","io","Chain"],"kind":"struct"},"17:9453:15413":{"crate_id":17,"path":["object","read","archive","MemberHeader"],"kind":"enum"},"9:421:14074":{"crate_id":9,"path":["miniz_oxide","MZStatus"],"kind":"enum"},"2:2833:8104":{"crate_id":2,"path":["core","ops","bit","Shr"],"kind":"trait"},"2:20772:2466":{"crate_id":2,"path":["core","core_simd","elements","const_ptr","SimdConstPtr"],"kind":"trait"},"1:6296:166":{"crate_id":1,"path":["std","sync","mutex","Mutex"],"kind":"struct"},"2:3386:7811":{"crate_id":2,"path":["core","any","Demand"],"kind":"struct"},"6:4340:12311":{"crate_id":6,"path":["libc","unix","linux_like","linux","signalfd_siginfo"],"kind":"struct"},"6:4474:12325":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_envelope"],"kind":"struct"},"5:7181:2129":{"crate_id":5,"path":["alloc","ffi","c_str","NulError"],"kind":"struct"},"1:8742:186":{"crate_id":1,"path":["std","process","Output"],"kind":"struct"},"1:11919:13":{"crate_id":1,"path":["std","fn"],"kind":"primitive"},"16:8170:15295":{"crate_id":16,"path":["gimli","read","unit","DebugTypesUnitHeadersIter"],"kind":"struct"},"5:7014:2032":{"crate_id":5,"path":["alloc","collections","binary_heap","Drain"],"kind":"struct"},"2:2469:2163":{"crate_id":2,"path":["core","convert","num","private","Sealed"],"kind":"trait"},"2:6921:2216":{"crate_id":2,"path":["core","iter","sources","empty","Empty"],"kind":"struct"},"1:7814:2153":{"crate_id":1,"path":["std","fs","Permissions"],"kind":"struct"},"1:10468:1984":{"crate_id":1,"path":["std","sys","unix","thread","Thread"],"kind":"struct"},"16:6376:15230":{"crate_id":16,"path":["gimli","read","aranges","DebugAranges"],"kind":"struct"},"2:45422:2521":{"crate_id":2,"path":["core","core_arch","simd","u16x2"],"kind":"struct"},"2:12334:28765":{"crate_id":2,"path":["core","future","join","MaybeDone"],"kind":"enum"},"17:12358:18690":{"crate_id":17,"path":["object","macho","LinkeditDataCommand"],"kind":"struct"},"6:5899:13036":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","rtentry"],"kind":"struct"},"5:7005:2055":{"crate_id":5,"path":["alloc","collections","binary_heap","IntoIterSorted"],"kind":"struct"},"16:7767:15283":{"crate_id":16,"path":["gimli","read","unit","UnitType"],"kind":"enum"},"2:21957:29431":{"crate_id":2,"path":["core","num","fmt","Formatted"],"kind":"struct"},"1:3210:2212":{"crate_id":1,"path":["std","io","stdio","StdoutLock"],"kind":"struct"},"2:41463:2027":{"crate_id":2,"path":["core","option","Iter"],"kind":"struct"},"17:9424:15411":{"crate_id":17,"path":["object","read","archive","ArchiveFile"],"kind":"struct"},"1:10832:20602":{"crate_id":1,"path":["std","sys","unix","os_str","Buf"],"kind":"struct"},"14:7:14203":{"crate_id":14,"path":["rustc_demangle","legacy","Demangle"],"kind":"struct"},"17:13344:19444":{"crate_id":17,"path":["object","pe","ImageTlsDirectory32"],"kind":"struct"},"17:9653:15458":{"crate_id":17,"path":["object","read","elf","file","ElfFile"],"kind":"struct"},"5:1432:2035":{"crate_id":5,"path":["alloc","collections","btree","map","IntoKeys"],"kind":"struct"},"2:22305:176":{"crate_id":2,"path":["core","num","nonzero","NonZeroU32"],"kind":"struct"},"17:10334:15383":{"crate_id":17,"path":["object","read","macho","symbol","SymbolTable"],"kind":"struct"},"17:13803:19478":{"crate_id":17,"path":["object","pe","ImageFunctionEntry"],"kind":"struct"},"2:3142:8111":{"crate_id":2,"path":["core","ops","range","OneSidedRange"],"kind":"trait"},"5:280:1924":{"crate_id":5,"path":["alloc","boxed","Box"],"kind":"struct"},"2:2843:8106":{"crate_id":2,"path":["core","ops","bit","BitOrAssign"],"kind":"trait"},"16:7697:15279":{"crate_id":16,"path":["gimli","read","str","DebugLineStr"],"kind":"struct"},"16:6390:15231":{"crate_id":16,"path":["gimli","read","aranges","ArangeHeaderIter"],"kind":"struct"},"5:1422:2034":{"crate_id":5,"path":["alloc","collections","btree","map","ValuesMut"],"kind":"struct"},"1:3325:2217":{"crate_id":1,"path":["std","io","util","Repeat"],"kind":"struct"},"2:43488:7725":{"crate_id":2,"path":["core","str","iter","RSplitN"],"kind":"struct"},"16:5797:33262":{"crate_id":16,"path":["gimli","read","cfi","AugmentationData"],"kind":"struct"},"1:7804:2156":{"crate_id":1,"path":["std","fs","FileTimes"],"kind":"struct"},"2:20606:30059":{"crate_id":2,"path":["core","core_simd","swizzle","deinterleave","Even"],"kind":"struct"},"2:9159:7679":{"crate_id":2,"path":["core","fmt","UpperHex"],"kind":"trait"},"17:10735:15601":{"crate_id":17,"path":["object","read","pe","rich","RichHeaderEntry"],"kind":"struct"},"17:10257:15509":{"crate_id":17,"path":["object","read","macho","segment","MachOSegmentIterator"],"kind":"struct"},"11:1866:2049":{"crate_id":11,"path":["hashbrown","set","Difference"],"kind":"struct"},"1:361:1999":{"crate_id":1,"path":["std","thread","scoped","ScopedJoinHandle"],"kind":"struct"},"1:11243:25173":{"crate_id":1,"path":["std","sys_common","wtf8","Wtf8CodePoints"],"kind":"struct"},"17:12158:18678":{"crate_id":17,"path":["object","macho","RoutinesCommand64"],"kind":"struct"},"2:1637:8021":{"crate_id":2,"path":["core","mem","Discriminant"],"kind":"struct"},"2:4046:7659":{"crate_id":2,"path":["core","async_iter","async_iter","AsyncIterator"],"kind":"trait"},"1:8088:2218":{"crate_id":1,"path":["std","io","util","Sink"],"kind":"struct"},"1:8961:20323":{"crate_id":1,"path":["std","sync","mpmc","list","ListToken"],"kind":"struct"},"2:40031:7869":{"crate_id":2,"path":["core","char","decode","DecodeUtf16Error"],"kind":"struct"},"6:4586:12337":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Ehdr"],"kind":"struct"},"2:9157:7678":{"crate_id":2,"path":["core","fmt","LowerHex"],"kind":"trait"},"1:2344:2138":{"crate_id":1,"path":["std","fs","metadata"],"kind":"function"},"16:2830:14296":{"crate_id":16,"path":["gimli","common","DebugTypesOffset"],"kind":"struct"},"1:11337:2238":{"crate_id":1,"path":["std","sys_common","net","TcpStream"],"kind":"struct"},"17:9826:15439":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdatIterator"],"kind":"struct"},"1:5499:2369":{"crate_id":1,"path":["std","process","exit"],"kind":"function"},"1:10948:22300":{"crate_id":1,"path":["std","sys","unix","process","process_inner","posix_spawn","PosixSpawnFileActions"],"kind":"struct"},"17:11193:15608":{"crate_id":17,"path":["object","archive","AixFileHeader"],"kind":"struct"},"6:5889:13035":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_mmap_hdr"],"kind":"struct"},"6:7271:13838":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","align","max_align_t"],"kind":"struct"},"6:1544:9761":{"crate_id":6,"path":["libc","unix","linux_like","addrinfo"],"kind":"struct"},"2:42704:2352":{"crate_id":2,"path":["core","hash","sip","State"],"kind":"struct"},"1:8270:2323":{"crate_id":1,"path":["std","os","linux","raw","arch","stat"],"kind":"struct"},"17:12835:19411":{"crate_id":17,"path":["object","pe","ImageVxdHeader"],"kind":"struct"},"17:10691:15598":{"crate_id":17,"path":["object","read","pe","resource","ResourceDirectoryEntryData"],"kind":"enum"},"6:541:8867":{"crate_id":6,"path":["libc","unix","iovec"],"kind":"struct"},"1:11913:1497":{"crate_id":1,"path":["std","u32"],"kind":"primitive"},"2:44105:8245":{"crate_id":2,"path":["core","str","IsAsciiWhitespace"],"kind":"struct"},"16:2808:14295":{"crate_id":16,"path":["gimli","common","DebugStrOffsetsIndex"],"kind":"struct"},"1:3168:2209":{"crate_id":1,"path":["std","io","stdio","Stdin"],"kind":"struct"},"11:731:2030":{"crate_id":11,"path":["hashbrown","map","Keys"],"kind":"struct"},"2:11269:8204":{"crate_id":2,"path":["core","slice","GetManyMutError"],"kind":"struct"},"17:10440:15590":{"crate_id":17,"path":["object","read","pe","file","PeComdatSectionIterator"],"kind":"struct"},"2:41298:28172":{"crate_id":2,"path":["core","net","ip_addr","fmt","Span"],"kind":"struct"},"2:41389:2233":{"crate_id":2,"path":["core","net","socket_addr","SocketAddrV6"],"kind":"struct"},"2:45446:2481":{"crate_id":2,"path":["core","core_arch","simd","i8x4"],"kind":"struct"},"1:3465:2184":{"crate_id":1,"path":["std","io","BufRead"],"kind":"trait"},"1:731:142":{"crate_id":1,"path":["std","collections","hash","map","HashMap"],"kind":"struct"},"2:9414:7892":{"crate_id":2,"path":["core","hash","BuildHasherDefault"],"kind":"struct"},"6:4505:12329":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_periodic_effect"],"kind":"struct"},"17:10283:15508":{"crate_id":17,"path":["object","read","macho","segment","MachOSegmentInternal"],"kind":"struct"},"1:7576:2163":{"crate_id":1,"path":["std","sealed","Sealed"],"kind":"trait"},"2:9817:222":{"crate_id":2,"path":["core","slice","index","SliceIndex"],"kind":"trait"},"17:13024:19419":{"crate_id":17,"path":["object","pe","ImageNtHeaders32"],"kind":"struct"},"6:6027:13046":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_seccomp"],"kind":"struct"},"6:5057:12386":{"crate_id":6,"path":["libc","unix","linux_like","linux","dirent64"],"kind":"struct"},"2:9596:29399":{"crate_id":2,"path":["core","slice","sort","merge","MergeHole"],"kind":"struct"},"16:5741:15206":{"crate_id":16,"path":["gimli","read","cfi","CieOrFde"],"kind":"enum"},"11:1050:14192":{"crate_id":11,"path":["hashbrown","map","EntryRef"],"kind":"enum"},"2:42507:73":{"crate_id":2,"path":["core","fmt","Arguments"],"kind":"struct"},"6:500:8863":{"crate_id":6,"path":["libc","unix","rlimit"],"kind":"struct"},"16:3899:14371":{"crate_id":16,"path":["gimli","constants","DwChildren"],"kind":"struct"},"11:1126:14194":{"crate_id":11,"path":["hashbrown","map","VacantEntryRef"],"kind":"struct"},"17:13564:19463":{"crate_id":17,"path":["object","pe","ImageLoadConfigDirectory64"],"kind":"struct"},"2:45601:2482":{"crate_id":2,"path":["core","core_arch","simd","i8x8"],"kind":"struct"},"1:3973:2258":{"crate_id":1,"path":["std","os","unix","fs","FileTypeExt"],"kind":"trait"},"17:12345:18689":{"crate_id":17,"path":["object","macho","RpathCommand"],"kind":"struct"},"16:8025:15287":{"crate_id":16,"path":["gimli","read","unit","Attribute"],"kind":"struct"},"17:12259:18683":{"crate_id":17,"path":["object","macho","DylibModule64"],"kind":"struct"},"5:5485:7802":{"crate_id":5,"path":["alloc","string","retain","SetLenOnDrop"],"kind":"struct"},"17:10798:15389":{"crate_id":17,"path":["object","read","ObjectKind"],"kind":"enum"},"17:11993:18666":{"crate_id":17,"path":["object","macho","Fvmlib"],"kind":"struct"},"17:10125:15523":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandData"],"kind":"struct"},"5:680:231":{"crate_id":5,"path":["alloc","borrow","ToOwned"],"kind":"trait"},"2:43264:7720":{"crate_id":2,"path":["core","slice","iter","RChunksExact"],"kind":"struct"},"17:11471:18160":{"crate_id":17,"path":["object","elf","Rela64"],"kind":"struct"},"6:547:8868":{"crate_id":6,"path":["libc","unix","pollfd"],"kind":"struct"},"2:43254:7722":{"crate_id":2,"path":["core","slice","iter","RChunksMut"],"kind":"struct"},"2:8674:79":{"crate_id":2,"path":["core","sync","atomic","AtomicBool"],"kind":"struct"},"1:2574:2192":{"crate_id":1,"path":["std","io","buffered","bufwriter","WriterPanicked"],"kind":"struct"},"17:10545:15398":{"crate_id":17,"path":["object","read","pe","export","Export"],"kind":"struct"},"1:7020:27248":{"crate_id":1,"path":["std","sys_common","wstr","WStrUnits"],"kind":"struct"},"17:8521:15370":{"crate_id":17,"path":["object","common","FileFlags"],"kind":"enum"},"2:41880:83":{"crate_id":2,"path":["core","sync","atomic","AtomicI64"],"kind":"struct"},"1:11909:744":{"crate_id":1,"path":["std","i64"],"kind":"primitive"},"5:5712:2032":{"crate_id":5,"path":["alloc","string","Drain"],"kind":"struct"},"5:7224:2128":{"crate_id":5,"path":["alloc","ffi","c_str","IntoStringError"],"kind":"struct"},"2:7206:152":{"crate_id":2,"path":["core","iter","traits","collect","IntoIterator"],"kind":"trait"},"17:10068:15545":{"crate_id":17,"path":["object","read","macho","file","MachOComdatIterator"],"kind":"struct"},"1:11174:2379":{"crate_id":1,"path":["std","sys_common","process","CommandEnvs"],"kind":"struct"},"1:1071:2044":{"crate_id":1,"path":["std","collections","hash","map","VacantEntry"],"kind":"struct"},"17:12461:18697":{"crate_id":17,"path":["object","macho","DyldInfoCommand"],"kind":"struct"},"2:45468:2487":{"crate_id":2,"path":["core","core_arch","simd","i16x2"],"kind":"struct"},"2:41354:2231":{"crate_id":2,"path":["core","net","socket_addr","SocketAddr"],"kind":"enum"},"6:4303:12308":{"crate_id":6,"path":["libc","unix","linux_like","linux","passwd"],"kind":"struct"},"18:652:34217":{"crate_id":18,"path":["memchr","memmem","x86","sse","Forward"],"kind":"struct"},"13:226:33051":{"crate_id":13,"path":["std_detect","detect","cache","Initializer"],"kind":"struct"},"6:6704:13457":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","pthread_attr_t"],"kind":"struct"},"1:7683:2111":{"crate_id":1,"path":["std","env","VarError"],"kind":"enum"},"1:10056:21881":{"crate_id":1,"path":["std","sys","unix","os_str","Slice"],"kind":"struct"},"17:8979:33814":{"crate_id":17,"path":["object","read","any","FileInternal"],"kind":"enum"},"16:7543:15271":{"crate_id":16,"path":["gimli","read","rnglists","DebugRngLists"],"kind":"struct"},"16:2426:14279":{"crate_id":16,"path":["gimli","common","DebugAddrIndex"],"kind":"struct"},"1:10676:20600":{"crate_id":1,"path":["std","sys","unix","fs","FilePermissions"],"kind":"struct"},"17:9986:15496":{"crate_id":17,"path":["object","read","elf","version","VernauxIterator"],"kind":"struct"},"6:6014:13044":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_entry"],"kind":"struct"},"11:744:2031":{"crate_id":11,"path":["hashbrown","map","Values"],"kind":"struct"},"2:40264:2187":{"crate_id":2,"path":["core","iter","adapters","chain","Chain"],"kind":"struct"},"2:42692:145":{"crate_id":2,"path":["core","hash","sip","Hasher"],"kind":"struct"},"17:13443:19454":{"crate_id":17,"path":["object","pe","ImageLoadConfigCodeIntegrity"],"kind":"struct"},"16:6520:15239":{"crate_id":16,"path":["gimli","read","index","UnitIndexSection"],"kind":"struct"},"16:6506:15238":{"crate_id":16,"path":["gimli","read","index","UnitIndexSectionIterator"],"kind":"struct"},"1:8248:2292":{"crate_id":1,"path":["std","os","unix","ucred","UCred"],"kind":"struct"},"2:43998:7760":{"crate_id":2,"path":["core","str","lossy","Utf8Chunks"],"kind":"struct"},"6:5848:12991":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","mallinfo"],"kind":"struct"},"16:4596:14852":{"crate_id":16,"path":["gimli","constants","DwVis"],"kind":"struct"},"2:2696:109":{"crate_id":2,"path":["core","marker","Copy"],"kind":"trait"},"6:6035:13047":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ptrace_syscall_info"],"kind":"struct"},"16:7478:15265":{"crate_id":16,"path":["gimli","read","pubnames","DebugPubNames"],"kind":"struct"},"1:635:2007":{"crate_id":1,"path":["std","backtrace","BacktraceFrame"],"kind":"struct"},"2:41615:183":{"crate_id":2,"path":["core","sync","atomic","Ordering"],"kind":"enum"},"11:1879:2051":{"crate_id":11,"path":["hashbrown","set","Union"],"kind":"struct"},"1:1846:2109":{"crate_id":1,"path":["std","env","ArgsOs"],"kind":"struct"},"6:5043:12384":{"crate_id":6,"path":["libc","unix","linux_like","linux","ifreq"],"kind":"struct"},"2:20994:2163":{"crate_id":2,"path":["core","core_simd","lane_count","sealed","Sealed"],"kind":"trait"},"1:8177:2227":{"crate_id":1,"path":["std","net","Shutdown"],"kind":"enum"},"6:6076:13049":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","utmpx"],"kind":"struct"},"17:8490:15369":{"crate_id":17,"path":["object","common","RelocationEncoding"],"kind":"enum"},"5:1463:2065":{"crate_id":5,"path":["alloc","collections","btree","map","RangeMut"],"kind":"struct"},"2:3374:7807":{"crate_id":2,"path":["core","any","Provider"],"kind":"trait"},"17:1947:15440":{"crate_id":17,"path":["object","read","elf","relocation","ElfDynamicRelocationIterator"],"kind":"struct"},"17:13651:19467":{"crate_id":17,"path":["object","pe","ImageArmRuntimeFunctionEntry"],"kind":"struct"},"6:4419:12318":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_event"],"kind":"struct"},"1:10688:2156":{"crate_id":1,"path":["std","sys","unix","fs","FileTimes"],"kind":"struct"},"16:7016:33419":{"crate_id":16,"path":["gimli","read","lookup","DebugLookup"],"kind":"struct"},"17:10000:15542":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCache"],"kind":"struct"},"1:11916:789":{"crate_id":1,"path":["std","isize"],"kind":"primitive"},"6:4677:2251":{"crate_id":6,"path":["libc","unix","linux_like","linux","ucred"],"kind":"struct"},"2:2509:74":{"crate_id":2,"path":["core","convert","AsMut"],"kind":"trait"},"5:4047:2028":{"crate_id":5,"path":["alloc","collections","vec_deque","iter_mut","IterMut"],"kind":"struct"},"17:8683:15348":{"crate_id":17,"path":["object","endian","U16Bytes"],"kind":"struct"},"2:21928:27520":{"crate_id":2,"path":["core","num","fmt","Part"],"kind":"enum"},"17:13159:19428":{"crate_id":17,"path":["object","pe","ImageSymbolExBytes"],"kind":"struct"},"17:12622:15400":{"crate_id":17,"path":["object","macho","Relocation"],"kind":"struct"},"17:11372:18153":{"crate_id":17,"path":["object","elf","Sym32"],"kind":"struct"},"17:13240:19435":{"crate_id":17,"path":["object","pe","ImageRelocation"],"kind":"struct"},"6:6725:13460":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_fpstate"],"kind":"struct"},"16:6544:15240":{"crate_id":16,"path":["gimli","read","line","DebugLine"],"kind":"struct"},"2:46425:2530":{"crate_id":2,"path":["core","core_arch","simd","u32x8"],"kind":"struct"},"16:4872:14936":{"crate_id":16,"path":["gimli","constants","DwDsc"],"kind":"struct"},"1:8876:2415":{"crate_id":1,"path":["std","sync","mpsc","TrySendError"],"kind":"enum"},"6:4663:12343":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Shdr"],"kind":"struct"},"2:46379:2524":{"crate_id":2,"path":["core","core_arch","simd","u16x16"],"kind":"struct"},"6:5073:12388":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_can_addr"],"kind":"union"},"16:4757:14917":{"crate_id":16,"path":["gimli","constants","DwId"],"kind":"struct"},"5:4336:30752":{"crate_id":5,"path":["alloc","collections","vec_deque","drop","Dropper"],"kind":"struct"},"1:11860:20299":{"crate_id":1,"path":["std","backtrace_rs","symbolize","gimli","Cache"],"kind":"struct"},"2:40376:8057":{"crate_id":2,"path":["core","iter","adapters","map","Map"],"kind":"struct"},"1:10728:21020":{"crate_id":1,"path":["std","sys","unix","kernel_copy","SpliceMode"],"kind":"enum"},"1:11907:742":{"crate_id":1,"path":["std","i16"],"kind":"primitive"},"9:52:14091":{"crate_id":9,"path":["miniz_oxide","inflate","core","DecompressorOxide"],"kind":"struct"},"2:42926:7705":{"crate_id":2,"path":["core","slice","ascii","EscapeAscii"],"kind":"struct"},"6:6129:13076":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","sigset_t"],"kind":"struct"},"14:187:14211":{"crate_id":14,"path":["rustc_demangle","SizeLimitedFmtAdapter"],"kind":"struct"},"16:7366:15260":{"crate_id":16,"path":["gimli","read","op","EvaluationResult"],"kind":"enum"},"5:2116:30581":{"crate_id":5,"path":["alloc","collections","btree","navigate","LeafRange"],"kind":"struct"},"2:43172:7713":{"crate_id":2,"path":["core","slice","iter","ChunksExact"],"kind":"struct"},"2:47871:7640":{"crate_id":2,"path":["core","core_arch","x86","cpuid","CpuidResult"],"kind":"struct"},"6:4694:12345":{"crate_id":6,"path":["libc","unix","linux_like","linux","posix_spawn_file_actions_t"],"kind":"struct"},"2:12312:151":{"crate_id":2,"path":["core","future","into_future","IntoFuture"],"kind":"trait"},"1:11865:2013":{"crate_id":1,"path":["std","backtrace_rs","types","BytesOrWideString"],"kind":"enum"},"2:45755:2458":{"crate_id":2,"path":["core","core_arch","simd","u8x16"],"kind":"struct"},"2:3648:2029":{"crate_id":2,"path":["core","array","iter","IntoIter"],"kind":"struct"},"9:388:14073":{"crate_id":9,"path":["miniz_oxide","MZFlush"],"kind":"enum"},"1:917:2034":{"crate_id":1,"path":["std","collections","hash","map","ValuesMut"],"kind":"struct"},"16:6793:15247":{"crate_id":16,"path":["gimli","read","line","CompleteLineProgram"],"kind":"struct"},"1:11021:2374":{"crate_id":1,"path":["std","sys","unix","process","process_inner","ExitStatusError"],"kind":"struct"},"18:699:19518":{"crate_id":18,"path":["memchr","memmem","FinderBuilder"],"kind":"struct"},"11:1843:2029":{"crate_id":11,"path":["hashbrown","set","IntoIter"],"kind":"struct"},"2:11488:8250":{"crate_id":2,"path":["core","str","iter","MatchIndicesInternal"],"kind":"struct"},"16:7449:15263":{"crate_id":16,"path":["gimli","read","op","Evaluation"],"kind":"struct"},"1:1931:653":{"crate_id":1,"path":["std","ffi"],"kind":"module"},"2:7165:8041":{"crate_id":2,"path":["core","iter","traits","accum","Sum"],"kind":"trait"},"18:538:19526":{"crate_id":18,"path":["memchr","memmem","rabinkarp","NeedleHash"],"kind":"struct"},"2:9299:28376":{"crate_id":2,"path":["core","fmt","fmt","BorrowedPlaceholder"],"kind":"struct"},"1:3355:2175":{"crate_id":1,"path":["std","io","Guard"],"kind":"struct"},"2:45500:2517":{"crate_id":2,"path":["core","core_arch","simd","u8x8"],"kind":"struct"},"17:13411:19450":{"crate_id":17,"path":["object","pe","ImageResourceDirectoryEntry"],"kind":"struct"},"5:1314:94":{"crate_id":5,"path":["alloc","collections","btree","map","BTreeMap"],"kind":"struct"},"1:888:2031":{"crate_id":1,"path":["std","collections","hash","map","Values"],"kind":"struct"},"6:4907:12370":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_sndinfo"],"kind":"struct"},"18:614:34223":{"crate_id":18,"path":["memchr","memmem","twoway","SuffixKind"],"kind":"enum"},"2:40433:8061":{"crate_id":2,"path":["core","iter","adapters","skip","Skip"],"kind":"struct"},"2:47411:2497":{"crate_id":2,"path":["core","core_arch","simd","i32x16"],"kind":"struct"},"16:4702:14910":{"crate_id":16,"path":["gimli","constants","DwLang"],"kind":"struct"},"17:13211:19432":{"crate_id":17,"path":["object","pe","ImageAuxSymbolWeak"],"kind":"struct"},"1:4760:2267":{"crate_id":1,"path":["std","os","fd","owned","AsFd"],"kind":"trait"},"2:2929:1920":{"crate_id":2,"path":["core","ops","function","FnMut"],"kind":"trait"},"16:3063:14304":{"crate_id":16,"path":["gimli","arch","Arm"],"kind":"struct"},"6:6743:13461":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user_regs_struct"],"kind":"struct"},"1:3933:2256":{"crate_id":1,"path":["std","os","unix","fs","OpenOptionsExt"],"kind":"trait"},"11:2198:30015":{"crate_id":11,"path":["hashbrown","raw","bitmask","BitMask"],"kind":"struct"},"18:0:1788":{"crate_id":18,"path":["memchr"],"kind":"module"},"1:6870:21880":{"crate_id":1,"path":["std","sys_common","backtrace","_print","DisplayBacktrace"],"kind":"struct"},"1:4903:2328":{"crate_id":1,"path":["std","panic","always_abort"],"kind":"function"},"8:0:1779":{"crate_id":8,"path":["cfg_if"],"kind":"module"},"6:4523:12331":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_effect"],"kind":"struct"},"2:11730:7736":{"crate_id":2,"path":["core","str","pattern","Searcher"],"kind":"trait"},"17:11532:18164":{"crate_id":17,"path":["object","elf","Dyn64"],"kind":"struct"},"1:6101:22304":{"crate_id":1,"path":["std","sync","mpmc","waker","SyncWaker"],"kind":"struct"},"17:9933:15469":{"crate_id":17,"path":["object","read","elf","version","VersionTable"],"kind":"struct"},"5:6446:30724":{"crate_id":5,"path":["alloc","vec","into_iter","drop","DropGuard"],"kind":"struct"},"17:11585:18168":{"crate_id":17,"path":["object","elf","Verneed"],"kind":"struct"},"1:4679:2268":{"crate_id":1,"path":["std","os","fd","raw","AsRawFd"],"kind":"trait"},"17:12138:18677":{"crate_id":17,"path":["object","macho","RoutinesCommand32"],"kind":"struct"},"1:2869:128":{"crate_id":1,"path":["std","io","error","Error"],"kind":"struct"},"6:4809:12359":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_filter"],"kind":"struct"},"1:11249:21507":{"crate_id":1,"path":["std","sys_common","wtf8","EncodeWide"],"kind":"struct"},"2:3234:7663":{"crate_id":2,"path":["core","ops","unsize","DispatchFromDyn"],"kind":"trait"},"2:32159:8073":{"crate_id":2,"path":["core","marker","PhantomPinned"],"kind":"struct"},"17:8360:15365":{"crate_id":17,"path":["object","common","ComdatKind"],"kind":"enum"},"2:46661:2496":{"crate_id":2,"path":["core","core_arch","simd","i32x8"],"kind":"struct"},"6:5024:12383":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_ifr_ifru"],"kind":"union"},"9:234:2352":{"crate_id":9,"path":["miniz_oxide","inflate","core","State"],"kind":"enum"},"2:4:1014":{"crate_id":2,"path":["core","panic"],"kind":"macro"},"16:4789:14925":{"crate_id":16,"path":["gimli","constants","DwCc"],"kind":"struct"},"2:43640:7741":{"crate_id":2,"path":["core","str","iter","SplitWhitespace"],"kind":"struct"},"16:6662:15243":{"crate_id":16,"path":["gimli","read","line","LineInstructions"],"kind":"struct"},"6:1526:9759":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_in"],"kind":"struct"},"1:7676:2047":{"crate_id":1,"path":["std","collections","hash","map","DefaultHasher"],"kind":"struct"},"16:2298:14246":{"crate_id":16,"path":["gimli","common","Format"],"kind":"enum"},"2:40295:8050":{"crate_id":2,"path":["core","iter","adapters","cycle","Cycle"],"kind":"struct"},"1:8924:1978":{"crate_id":1,"path":["std","sync","mpmc","context","Inner"],"kind":"struct"},"6:7528:12551":{"crate_id":6,"path":["libc","unix","linux_like","linux","fanotify_event_metadata"],"kind":"struct"},"17:12522:18701":{"crate_id":17,"path":["object","macho","FvmfileCommand"],"kind":"struct"},"2:2796:8096":{"crate_id":2,"path":["core","ops","arith","DivAssign"],"kind":"trait"},"2:4606:7855":{"crate_id":2,"path":["core","char","REPLACEMENT_CHARACTER"],"kind":"constant"},"10:36:33024":{"crate_id":10,"path":["adler","algo","U32X4"],"kind":"struct"},"17:13053:19422":{"crate_id":17,"path":["object","pe","AnonObjectHeader"],"kind":"struct"},"1:1577:2048":{"crate_id":1,"path":["std","collections","hash","set","Intersection"],"kind":"struct"},"2:20754:2470":{"crate_id":2,"path":["core","core_simd","cast","SimdCastPtr"],"kind":"trait"},"2:9409:7891":{"crate_id":2,"path":["core","hash","BuildHasher"],"kind":"trait"},"16:7669:15277":{"crate_id":16,"path":["gimli","read","str","DebugStr"],"kind":"struct"},"1:9126:22874":{"crate_id":1,"path":["std","sys","common","thread_local","fast_local","DtorState"],"kind":"enum"},"2:44093:8244":{"crate_id":2,"path":["core","str","CharEscapeUnicode"],"kind":"struct"},"16:5402:14240":{"crate_id":16,"path":["gimli","endianity","BigEndian"],"kind":"struct"},"17:9028:15379":{"crate_id":17,"path":["object","read","any","SegmentIterator"],"kind":"struct"},"2:2522:237":{"crate_id":2,"path":["core","convert","TryFrom"],"kind":"trait"},"1:11876:21056":{"crate_id":1,"path":["std","backtrace_rs","print","PrintFmt"],"kind":"enum"},"5:1981:2066":{"crate_id":5,"path":["alloc","collections","btree","map","Cursor"],"kind":"struct"},"14:40:18148":{"crate_id":14,"path":["rustc_demangle","v0","Ident"],"kind":"struct"},"18:548:141":{"crate_id":18,"path":["memchr","memmem","rabinkarp","Hash"],"kind":"struct"},"6:6597:13454":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","flock64"],"kind":"struct"},"1:11009:2373":{"crate_id":1,"path":["std","sys","unix","process","process_inner","ExitStatus"],"kind":"struct"},"6:7510:12548":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_rwlockattr_t"],"kind":"struct"},"17:10354:15512":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbolTable"],"kind":"struct"},"2:3514:2032":{"crate_id":2,"path":["core","array","drain","Drain"],"kind":"struct"},"16:6671:14219":{"crate_id":16,"path":["gimli","read","line","LineRow"],"kind":"struct"},"11:757:2032":{"crate_id":11,"path":["hashbrown","map","Drain"],"kind":"struct"},"5:7321:2033":{"crate_id":5,"path":["alloc","vec","drain_filter","DrainFilter"],"kind":"struct"},"6:6795:13463":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","mcontext_t"],"kind":"struct"},"1:3292:2196":{"crate_id":1,"path":["std","io","stdio","IsTerminal"],"kind":"trait"},"6:4534:12332":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_ff_upload"],"kind":"struct"},"17:12770:19409":{"crate_id":17,"path":["object","pe","ImageDosHeader"],"kind":"struct"},"17:12902:19413":{"crate_id":17,"path":["object","pe","ImageFileHeader"],"kind":"struct"},"17:12085:18673":{"crate_id":17,"path":["object","macho","SubLibraryCommand"],"kind":"struct"},"1:7797:2152":{"crate_id":1,"path":["std","fs","OpenOptions"],"kind":"struct"},"1:8918:107":{"crate_id":1,"path":["std","sync","mpmc","context","Context"],"kind":"struct"},"17:11770:18655":{"crate_id":17,"path":["object","macho","DyldCacheMappingInfo"],"kind":"struct"},"17:13763:19475":{"crate_id":17,"path":["object","pe","ImageDebugDirectory"],"kind":"struct"},"2:21002:2463":{"crate_id":2,"path":["core","core_simd","lane_count","SupportedLaneCount"],"kind":"trait"},"17:13249:19436":{"crate_id":17,"path":["object","pe","ImageLinenumber"],"kind":"struct"},"6:6624:2323":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stat"],"kind":"struct"},"7:0:1543":{"crate_id":7,"path":["unwind"],"kind":"module"},"6:6867:13469":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ucontext_t"],"kind":"struct"},"1:3170:2210":{"crate_id":1,"path":["std","io","stdio","StdinLock"],"kind":"struct"},"16:2404:14278":{"crate_id":16,"path":["gimli","common","DebugAddrBase"],"kind":"struct"},"16:7683:15278":{"crate_id":16,"path":["gimli","read","str","DebugStrOffsets"],"kind":"struct"},"2:46198:27521":{"crate_id":2,"path":["core","core_arch","simd","m32x4"],"kind":"struct"},"2:2922:1918":{"crate_id":2,"path":["core","ops","drop","Drop"],"kind":"trait"},"17:13419:19451":{"crate_id":17,"path":["object","pe","ImageResourceDirectoryString"],"kind":"struct"},"2:8679:86":{"crate_id":2,"path":["core","sync","atomic","AtomicPtr"],"kind":"struct"},"6:5828:13031":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","cmsghdr"],"kind":"struct"},"11:652:2028":{"crate_id":11,"path":["hashbrown","map","IterMut"],"kind":"struct"},"17:13842:19481":{"crate_id":17,"path":["object","pe","NonPagedDebugInfo"],"kind":"struct"},"16:3640:14309":{"crate_id":16,"path":["gimli","arch","X86_64"],"kind":"struct"},"1:5719:2395":{"crate_id":1,"path":["std","sync","condvar","Condvar"],"kind":"struct"},"1:1565:2029":{"crate_id":1,"path":["std","collections","hash","set","IntoIter"],"kind":"struct"},"2:39228:199":{"crate_id":2,"path":["core","ops","range","RangeFrom"],"kind":"struct"},"5:1404:2030":{"crate_id":5,"path":["alloc","collections","btree","map","Keys"],"kind":"struct"},"2:4023:103":{"crate_id":2,"path":["core","asserting","Capture"],"kind":"struct"},"17:10967:15397":{"crate_id":17,"path":["object","read","Import"],"kind":"struct"},"2:7244:121":{"crate_id":2,"path":["core","iter","traits","double_ended","DoubleEndedIterator"],"kind":"trait"},"17:10516:15556":{"crate_id":17,"path":["object","read","pe","data_directory","DataDirectories"],"kind":"struct"},"11:1091:14193":{"crate_id":11,"path":["hashbrown","map","OccupiedEntryRef"],"kind":"struct"},"16:2319:14274":{"crate_id":16,"path":["gimli","common","Encoding"],"kind":"struct"},"6:7608:14028":{"crate_id":6,"path":["libc","unix","align","in6_addr"],"kind":"struct"},"5:35:2087":{"crate_id":5,"path":["alloc","raw_vec","RawVec"],"kind":"struct"},"2:20921:2474":{"crate_id":2,"path":["core","core_simd","elements","uint","SimdUint"],"kind":"trait"},"5:3547:2028":{"crate_id":5,"path":["alloc","collections","linked_list","IterMut"],"kind":"struct"},"18:719:19511":{"crate_id":18,"path":["memchr","memmem","NeedleInfo"],"kind":"struct"},"2:14:1896":{"crate_id":2,"path":["core","write"],"kind":"macro"},"6:4455:12322":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_mask"],"kind":"struct"},"17:12318:18687":{"crate_id":17,"path":["object","macho","PrebindCksumCommand"],"kind":"struct"},"17:9973:15468":{"crate_id":17,"path":["object","read","elf","version","VerneedIterator"],"kind":"struct"},"12:0:1783":{"crate_id":12,"path":["rustc_std_workspace_alloc"],"kind":"module"},"2:45552:2528":{"crate_id":2,"path":["core","core_arch","simd","u32x2"],"kind":"struct"},"2:10775:7717":{"crate_id":2,"path":["core","slice","iter","GroupBy"],"kind":"struct"},"2:44356:161":{"crate_id":2,"path":["core","alloc","layout","Layout"],"kind":"struct"},"5:3158:2048":{"crate_id":5,"path":["alloc","collections","btree","set","Intersection"],"kind":"struct"},"2:2744:7660":{"crate_id":2,"path":["core","marker","Tuple"],"kind":"trait"},"2:41539:193":{"crate_id":2,"path":["core","pin","Pin"],"kind":"struct"},"11:867:2041":{"crate_id":11,"path":["hashbrown","map","RawEntryBuilder"],"kind":"struct"},"17:11861:18659":{"crate_id":17,"path":["object","macho","MachHeader64"],"kind":"struct"},"2:44161:2454":{"crate_id":2,"path":["core","time","TryFromFloatSecsError"],"kind":"struct"},"6:5774:13026":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","aiocb"],"kind":"struct"},"5:633:30641":{"crate_id":5,"path":["alloc","boxed","from","StringError"],"kind":"struct"},"19:0:1031":{"crate_id":19,"path":["panic_unwind"],"kind":"module"},"5:2636:30796":{"crate_id":5,"path":["alloc","collections","btree","node","Handle"],"kind":"struct"},"6:6719:13459":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_xmmreg"],"kind":"struct"},"13:110:33098":{"crate_id":13,"path":["std_detect","detect","arch","x86","Feature"],"kind":"enum"},"2:21571:2163":{"crate_id":2,"path":["core","core_simd","vector","sealed","Sealed"],"kind":"trait"},"17:13453:19455":{"crate_id":17,"path":["object","pe","ImageDynamicRelocationTable"],"kind":"struct"},"5:1995:2067":{"crate_id":5,"path":["alloc","collections","btree","map","CursorMut"],"kind":"struct"},"2:3157:135":{"crate_id":2,"path":["core","ops","try_trait","FromResidual"],"kind":"trait"},"1:10425:2211":{"crate_id":1,"path":["std","sys","unix","stdio","Stdout"],"kind":"struct"},"6:4435:12320":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_absinfo"],"kind":"struct"},"1:11474:22775":{"crate_id":1,"path":["std","personality","dwarf","eh","EHContext"],"kind":"struct"},"6:5079:12389":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_can"],"kind":"struct"},"6:4555:12335":{"crate_id":6,"path":["libc","unix","linux_like","linux","dl_phdr_info"],"kind":"struct"},"2:40347:8055":{"crate_id":2,"path":["core","iter","adapters","fuse","Fuse"],"kind":"struct"},"5:1213:2044":{"crate_id":5,"path":["alloc","collections","btree","map","entry","VacantEntry"],"kind":"struct"},"6:1602:9767":{"crate_id":6,"path":["libc","unix","linux_like","lconv"],"kind":"struct"},"2:7592:2057":{"crate_id":2,"path":["core","iter","traits","marker","FusedIterator"],"kind":"trait"},"16:5630:15199":{"crate_id":16,"path":["gimli","read","cfi","EhHdrTableIter"],"kind":"struct"},"17:10452:15563":{"crate_id":17,"path":["object","read","pe","section","PeSegmentIterator"],"kind":"struct"},"6:4769:12354":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_extended_err"],"kind":"struct"},"5:4137:2175":{"crate_id":5,"path":["alloc","collections","vec_deque","into_iter","try_fold","Guard"],"kind":"struct"},"16:4510:14838":{"crate_id":16,"path":["gimli","constants","DwDs"],"kind":"struct"},"1:3875:2253":{"crate_id":1,"path":["std","os","unix","ffi","os_str","OsStringExt"],"kind":"trait"},"3:0:443":{"crate_id":3,"path":["compiler_builtins"],"kind":"module"},"6:6170:13078":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","semid_ds"],"kind":"struct"},"5:5035:2391":{"crate_id":5,"path":["alloc","rc","Weak"],"kind":"struct"},"16:7293:15259":{"crate_id":16,"path":["gimli","read","op","Piece"],"kind":"struct"},"17:12634:18708":{"crate_id":17,"path":["object","macho","RelocationInfo"],"kind":"struct"},"2:47779:7636":{"crate_id":2,"path":["core","core_arch","x86","__m512d"],"kind":"struct"},"2:2898:117":{"crate_id":2,"path":["core","ops","deref","Deref"],"kind":"trait"},"6:7522:12550":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_barrierattr_t"],"kind":"struct"},"2:2706:1989":{"crate_id":2,"path":["core","marker","PhantomData"],"kind":"struct"},"14:215:14212":{"crate_id":14,"path":["rustc_demangle","TryDemangleError"],"kind":"struct"},"9:445:14072":{"crate_id":9,"path":["miniz_oxide","MZError"],"kind":"enum"},"17:13506:19461":{"crate_id":17,"path":["object","pe","ImageEpilogueDynamicRelocationHeader"],"kind":"struct"},"2:12361:192":{"crate_id":2,"path":["core","future","pending","Pending"],"kind":"struct"},"16:5643:15200":{"crate_id":16,"path":["gimli","read","cfi","EhHdrTable"],"kind":"struct"},"2:7169:8040":{"crate_id":2,"path":["core","iter","traits","accum","Product"],"kind":"trait"},"1:8081:2216":{"crate_id":1,"path":["std","io","util","Empty"],"kind":"struct"},"1:7476:21869":{"crate_id":1,"path":["std","backtrace_rs","symbolize","SymbolName"],"kind":"struct"},"2:47809:7638":{"crate_id":2,"path":["core","core_arch","x86","__m256bh"],"kind":"struct"},"17:10303:15504":{"crate_id":17,"path":["object","read","macho","section","MachOSection"],"kind":"struct"},"1:9039:218":{"crate_id":1,"path":["std","sync","rwlock","RwLockReadGuard"],"kind":"struct"},"17:9670:15444":{"crate_id":17,"path":["object","read","elf","segment","ElfSegmentIterator"],"kind":"struct"},"16:7711:15280":{"crate_id":16,"path":["gimli","read","UnitOffset"],"kind":"struct"},"17:9683:15443":{"crate_id":17,"path":["object","read","elf","segment","ElfSegment"],"kind":"struct"},"2:2768:8092":{"crate_id":2,"path":["core","ops","arith","Div"],"kind":"trait"},"16:8090:15290":{"crate_id":16,"path":["gimli","read","unit","EntriesCursor"],"kind":"struct"},"6:474:8859":{"crate_id":6,"path":["libc","unix","group"],"kind":"struct"},"11:1009:2043":{"crate_id":11,"path":["hashbrown","map","OccupiedEntry"],"kind":"struct"},"1:3440:2125":{"crate_id":1,"path":["std","io","Write"],"kind":"trait"},"2:3152:234":{"crate_id":2,"path":["core","ops","try_trait","Try"],"kind":"trait"},"6:5966:13039":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","regex_t"],"kind":"struct"},"5:7241:224":{"crate_id":5,"path":["alloc","string","String"],"kind":"struct"},"2:2515:133":{"crate_id":2,"path":["core","convert","From"],"kind":"trait"},"2:43232:7703":{"crate_id":2,"path":["core","slice","iter","ArrayChunksMut"],"kind":"struct"},"2:9111:2125":{"crate_id":2,"path":["core","fmt","Write"],"kind":"trait"},"5:6097:2600":{"crate_id":5,"path":["alloc","task","Wake"],"kind":"trait"},"2:47741:7634":{"crate_id":2,"path":["core","core_arch","x86","__m512i"],"kind":"struct"},"17:12563:18704":{"crate_id":17,"path":["object","macho","DataInCodeEntry"],"kind":"struct"},"1:8485:2027":{"crate_id":1,"path":["std","path","Iter"],"kind":"struct"},"2:40092:7865":{"crate_id":2,"path":["core","char","CaseMappingIter"],"kind":"enum"},"17:8788:15375":{"crate_id":17,"path":["object","endian","I16Bytes"],"kind":"struct"},"18:624:34216":{"crate_id":18,"path":["memchr","memmem","twoway","SuffixOrdering"],"kind":"enum"},"2:21978:2245":{"crate_id":2,"path":["core","num","error","ParseIntError"],"kind":"struct"},"14:31:14203":{"crate_id":14,"path":["rustc_demangle","v0","Demangle"],"kind":"struct"},"1:11911:1499":{"crate_id":1,"path":["std","u8"],"kind":"primitive"},"1:11918:1126":{"crate_id":1,"path":["std","reference"],"kind":"primitive"},"1:3677:2238":{"crate_id":1,"path":["std","net","tcp","TcpStream"],"kind":"struct"},"6:7598:14027":{"crate_id":6,"path":["libc","unix","linux_like","linux","non_exhaustive","open_how"],"kind":"struct"},"5:4914:2175":{"crate_id":5,"path":["alloc","rc","from_iter_exact","Guard"],"kind":"struct"},"17:11800:18657":{"crate_id":17,"path":["object","macho","DyldSubCacheInfo"],"kind":"struct"},"2:2827:8103":{"crate_id":2,"path":["core","ops","bit","Shl"],"kind":"trait"},"9:174:14175":{"crate_id":9,"path":["miniz_oxide","inflate","stream","InflateState"],"kind":"struct"},"2:43630:7752":{"crate_id":2,"path":["core","str","iter","LinesAny"],"kind":"struct"},"16:6819:15248":{"crate_id":16,"path":["gimli","read","line","FileEntry"],"kind":"struct"},"2:21839:2244":{"crate_id":2,"path":["core","num","dec2flt","ParseFloatError"],"kind":"struct"},"2:2161:8124":{"crate_id":2,"path":["core","ptr","from_exposed_addr"],"kind":"function"},"6:5007:12381":{"crate_id":6,"path":["libc","unix","linux_like","linux","af_alg_iv"],"kind":"struct"},"17:13689:19471":{"crate_id":17,"path":["object","pe","ImageRuntimeFunctionEntry"],"kind":"struct"},"17:9617:15420":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdatIterator"],"kind":"struct"},"1:8140:2188":{"crate_id":1,"path":["std","io","Take"],"kind":"struct"},"2:43683:7750":{"crate_id":2,"path":["core","str","iter","EscapeUnicode"],"kind":"struct"},"1:11900:1397":{"crate_id":1,"path":["std","str"],"kind":"primitive"},"2:40324:8053":{"crate_id":2,"path":["core","iter","adapters","filter_map","FilterMap"],"kind":"struct"},"16:2742:14292":{"crate_id":16,"path":["gimli","common","DebugRngListsIndex"],"kind":"struct"},"2:12386:7889":{"crate_id":2,"path":["core","future","poll_fn","PollFn"],"kind":"struct"},"2:4011:28368":{"crate_id":2,"path":["core","asserting","TryCaptureWithDebug"],"kind":"struct"},"17:10428:15589":{"crate_id":17,"path":["object","read","pe","file","PeComdat"],"kind":"struct"},"2:20853:2473":{"crate_id":2,"path":["core","core_simd","elements","int","SimdInt"],"kind":"trait"},"16:3047:14303":{"crate_id":16,"path":["gimli","common","DwarfFileType"],"kind":"enum"},"1:8899:2396":{"crate_id":1,"path":["std","sync","condvar","WaitTimeoutResult"],"kind":"struct"},"2:4264:7834":{"crate_id":2,"path":["core","cell","BorrowMutError"],"kind":"struct"},"2:21891:27661":{"crate_id":2,"path":["core","num","flt2dec","decoder","FullDecoded"],"kind":"enum"},"5:3775:30724":{"crate_id":5,"path":["alloc","collections","linked_list","drop","DropGuard"],"kind":"struct"},"2:42430:110":{"crate_id":2,"path":["core","fmt","rt","Count"],"kind":"enum"},"2:40702:8034":{"crate_id":2,"path":["core","iter","sources","once_with","OnceWith"],"kind":"struct"},"6:554:8869":{"crate_id":6,"path":["libc","unix","winsize"],"kind":"struct"},"16:7743:15281":{"crate_id":16,"path":["gimli","read","unit","DebugInfo"],"kind":"struct"},"1:844:2027":{"crate_id":1,"path":["std","collections","hash","map","Iter"],"kind":"struct"},"2:1747:28170":{"crate_id":2,"path":["core","ptr","metadata","PtrComponents"],"kind":"struct"},"18:80:19496":{"crate_id":18,"path":["memchr","memchr","iter","Memchr"],"kind":"struct"},"16:8129:15292":{"crate_id":16,"path":["gimli","read","unit","EntriesTreeNode"],"kind":"struct"},"2:4381:7841":{"crate_id":2,"path":["core","cell","BorrowRefMut"],"kind":"struct"},"17:11813:15551":{"crate_id":17,"path":["object","macho","FatHeader"],"kind":"struct"},"2:4812:795":{"crate_id":2,"path":["core","iter"],"kind":"module"},"6:573:8872":{"crate_id":6,"path":["libc","unix","itimerval"],"kind":"struct"},"1:4125:2287":{"crate_id":1,"path":["std","os","unix","net","ancillary","Messages"],"kind":"struct"},"17:12194:18680":{"crate_id":17,"path":["object","macho","DysymtabCommand"],"kind":"struct"},"1:4574:22888":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt","st_atime"],"kind":"foreign_type"},"2:47730:7633":{"crate_id":2,"path":["core","core_arch","x86","__m256d"],"kind":"struct"},"2:1733:8136":{"crate_id":2,"path":["core","ptr","metadata","Pointee"],"kind":"trait"},"1:7844:119":{"crate_id":1,"path":["std","fs","DirBuilder"],"kind":"struct"},"2:40142:27580":{"crate_id":2,"path":["core","ffi","c_str","FromBytesWithNulErrorKind"],"kind":"enum"},"1:554:1981":{"crate_id":1,"path":["std","thread","JoinHandle"],"kind":"struct"},"17:9108:33745":{"crate_id":17,"path":["object","read","any","SectionIteratorInternal"],"kind":"enum"},"17:11902:18662":{"crate_id":17,"path":["object","macho","SegmentCommand32"],"kind":"struct"},"17:0:1787":{"crate_id":17,"path":["object"],"kind":"module"},"11:1035:2044":{"crate_id":11,"path":["hashbrown","map","VacantEntry"],"kind":"struct"},"17:13135:19426":{"crate_id":17,"path":["object","pe","ImageSymbolBytes"],"kind":"struct"},"2:21126:2468":{"crate_id":2,"path":["core","core_simd","masks","MaskElement"],"kind":"trait"},"16:4400:14800":{"crate_id":16,"path":["gimli","constants","DwForm"],"kind":"struct"},"5:6180:30746":{"crate_id":5,"path":["alloc","vec","drain_filter","drop","BackshiftOnDrop"],"kind":"struct"},"1:6621:22962":{"crate_id":1,"path":["std","sync","rwlock","fmt","LockedPlaceholder"],"kind":"struct"},"17:10681:15597":{"crate_id":17,"path":["object","read","pe","resource","ResourceDirectoryTable"],"kind":"struct"},"17:12536:18702":{"crate_id":17,"path":["object","macho","EntryPointCommand"],"kind":"struct"},"17:10743:15387":{"crate_id":17,"path":["object","read","traits","NoDynamicRelocationIterator"],"kind":"struct"},"17:13121:19425":{"crate_id":17,"path":["object","pe","ImageSymbol"],"kind":"struct"},"2:2780:8094":{"crate_id":2,"path":["core","ops","arith","Neg"],"kind":"trait"},"2:43470:7727":{"crate_id":2,"path":["core","str","iter","SplitN"],"kind":"struct"},"17:562:15362":{"crate_id":17,"path":["object","read","any","Symbol"],"kind":"struct"},"17:13169:19429":{"crate_id":17,"path":["object","pe","ImageAuxSymbolTokenDef"],"kind":"struct"},"2:46725:2551":{"crate_id":2,"path":["core","core_arch","simd","f32x8"],"kind":"struct"},"17:10416:15588":{"crate_id":17,"path":["object","read","pe","file","PeComdatIterator"],"kind":"struct"},"1:2477:2199":{"crate_id":1,"path":["std","io","buffered","bufreader","BufReader"],"kind":"struct"},"2:45831:2529":{"crate_id":2,"path":["core","core_arch","simd","u32x4"],"kind":"struct"},"1:2208:2133":{"crate_id":1,"path":["std","fs","DirEntry"],"kind":"struct"},"17:13678:19470":{"crate_id":17,"path":["object","pe","ImageAlphaRuntimeFunctionEntry"],"kind":"struct"},"5:5834:8462":{"crate_id":5,"path":["alloc","sync","ArcInner"],"kind":"struct"},"11:399:33047":{"crate_id":11,"path":["hashbrown","raw","RawIterHashInner"],"kind":"struct"},"2:11539:7729":{"crate_id":2,"path":["core","str","iter","SplitInclusive"],"kind":"struct"},"6:0:816":{"crate_id":6,"path":["libc"],"kind":"module"},"17:13082:19424":{"crate_id":17,"path":["object","pe","AnonObjectHeaderBigobj"],"kind":"struct"},"16:4480:14832":{"crate_id":16,"path":["gimli","constants","DwLle"],"kind":"struct"},"2:40130:2130":{"crate_id":2,"path":["core","ffi","c_str","FromBytesWithNulError"],"kind":"struct"},"2:46615:2490":{"crate_id":2,"path":["core","core_arch","simd","i16x16"],"kind":"struct"},"6:6804:13464":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ipc_perm"],"kind":"struct"},"6:4954:12376":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_nl"],"kind":"struct"},"2:42162:7669":{"crate_id":2,"path":["core","fmt","num","Binary"],"kind":"struct"},"6:4763:12353":{"crate_id":6,"path":["libc","unix","linux_like","linux","regmatch_t"],"kind":"struct"},"5:1228:2043":{"crate_id":5,"path":["alloc","collections","btree","map","entry","OccupiedEntry"],"kind":"struct"},"2:21990:2248":{"crate_id":2,"path":["core","num","error","IntErrorKind"],"kind":"enum"},"17:9218:15383":{"crate_id":17,"path":["object","read","any","SymbolTable"],"kind":"struct"},"1:9104:22987":{"crate_id":1,"path":["std","sys","common","thread_local","fast_local","Key"],"kind":"struct"},"17:13879:19484":{"crate_id":17,"path":["object","pe","ImageCor20Header"],"kind":"struct"},"2:41606:2029":{"crate_id":2,"path":["core","result","IntoIter"],"kind":"struct"},"6:4567:12336":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Ehdr"],"kind":"struct"},"16:7596:15274":{"crate_id":16,"path":["gimli","read","rnglists","RawRngListEntry"],"kind":"enum"},"17:10505:15591":{"crate_id":17,"path":["object","read","pe","section","PeRelocationIterator"],"kind":"struct"},"2:2763:8093":{"crate_id":2,"path":["core","ops","arith","Mul"],"kind":"trait"},"6:6572:9714":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statfs"],"kind":"struct"},"2:43893:7774":{"crate_id":2,"path":["core","str","pattern","CharPredicateSearcher"],"kind":"struct"},"2:39188:200":{"crate_id":2,"path":["core","ops","range","RangeFull"],"kind":"struct"},"17:10142:15548":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandVariant"],"kind":"enum"},"17:9534:15422":{"crate_id":17,"path":["object","read","coff","section","CoffSectionIterator"],"kind":"struct"},"2:21:681":{"crate_id":2,"path":["core","format_args"],"kind":"macro"},"6:1662:9771":{"crate_id":6,"path":["libc","unix","linux_like","arpreq"],"kind":"struct"},"15:0:1785":{"crate_id":15,"path":["addr2line"],"kind":"module"},"1:4854:2319":{"crate_id":1,"path":["std","os","net","linux_ext","tcp","TcpStreamExt"],"kind":"trait"},"2:47756:7635":{"crate_id":2,"path":["core","core_arch","x86","__m512"],"kind":"struct"},"17:11891:18661":{"crate_id":17,"path":["object","macho","LcStr"],"kind":"struct"},"1:2540:2200":{"crate_id":1,"path":["std","io","buffered","bufwriter","BufWriter"],"kind":"struct"},"16:6218:15220":{"crate_id":16,"path":["gimli","read","dwarf","Unit"],"kind":"struct"},"5:1716:2033":{"crate_id":5,"path":["alloc","collections","btree","map","DrainFilter"],"kind":"struct"},"17:12550:18703":{"crate_id":17,"path":["object","macho","SourceVersionCommand"],"kind":"struct"},"16:2448:14280":{"crate_id":16,"path":["gimli","common","DebugArangesOffset"],"kind":"struct"},"6:506:8864":{"crate_id":6,"path":["libc","unix","rusage"],"kind":"struct"},"1:1433:144":{"crate_id":1,"path":["std","collections","hash","set","HashSet"],"kind":"struct"},"2:45977:2495":{"crate_id":2,"path":["core","core_arch","simd","i32x4"],"kind":"struct"},"16:5418:33450":{"crate_id":16,"path":["gimli","read","util","sealed","CapacityFull"],"kind":"struct"},"17:9577:15427":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbolTable"],"kind":"struct"},"2:12299:136":{"crate_id":2,"path":["core","future","future","Future"],"kind":"trait"},"2:39381:7840":{"crate_id":2,"path":["core","any","tags","Ref"],"kind":"struct"},"2:3169:7828":{"crate_id":2,"path":["core","ops","try_trait","NeverShortCircuit"],"kind":"struct"},"1:5354:2365":{"crate_id":1,"path":["std","process","ChildStdout"],"kind":"struct"},"2:22569:169":{"crate_id":2,"path":["core","num","nonzero","NonZeroI128"],"kind":"struct"},"17:11832:15550":{"crate_id":17,"path":["object","macho","FatArch64"],"kind":"struct"},"17:10626:15595":{"crate_id":17,"path":["object","read","pe","import","DelayLoadDescriptorIterator"],"kind":"struct"},"6:1556:9762":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_ll"],"kind":"struct"},"6:7516:12549":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_condattr_t"],"kind":"struct"},"2:2753:2450":{"crate_id":2,"path":["core","ops","arith","Add"],"kind":"trait"},"1:1783:2091":{"crate_id":1,"path":["std","env","Vars"],"kind":"struct"},"11:97:33033":{"crate_id":11,"path":["hashbrown","raw","Bucket"],"kind":"struct"},"17:10598:15397":{"crate_id":17,"path":["object","read","pe","import","Import"],"kind":"enum"},"16:5963:15213":{"crate_id":16,"path":["gimli","read","cfi","RegisterRuleIter"],"kind":"struct"},"17:9178:15382":{"crate_id":17,"path":["object","read","any","ComdatSectionIterator"],"kind":"struct"},"1:8475:2355":{"crate_id":1,"path":["std","path","Components"],"kind":"struct"},"2:42675:28343":{"crate_id":2,"path":["core","hash","sip","SipHasher24"],"kind":"struct"},"1:3247:2207":{"crate_id":1,"path":["std","io","stdio","Stderr"],"kind":"struct"},"1:10663:2152":{"crate_id":1,"path":["std","sys","unix","fs","OpenOptions"],"kind":"struct"},"6:587:8874":{"crate_id":6,"path":["libc","unix","servent"],"kind":"struct"},"6:5014:12382":{"crate_id":6,"path":["libc","unix","linux_like","linux","mq_attr"],"kind":"struct"},"2:43310:7751":{"crate_id":2,"path":["core","str","error","Utf8Error"],"kind":"struct"},"9:0:1780":{"crate_id":9,"path":["miniz_oxide"],"kind":"module"},"5:4399:30752":{"crate_id":5,"path":["alloc","collections","vec_deque","truncate","Dropper"],"kind":"struct"},"2:45947:2489":{"crate_id":2,"path":["core","core_arch","simd","i16x8"],"kind":"struct"},"17:13316:19441":{"crate_id":17,"path":["object","pe","ImageThunkData64"],"kind":"struct"},"2:41471:2028":{"crate_id":2,"path":["core","option","IterMut"],"kind":"struct"},"1:959:2041":{"crate_id":1,"path":["std","collections","hash","map","RawEntryBuilder"],"kind":"struct"},"2:42176:7678":{"crate_id":2,"path":["core","fmt","num","LowerHex"],"kind":"struct"},"2:11465:8253":{"crate_id":2,"path":["core","str","iter","SplitNInternal"],"kind":"struct"},"1:8232:2282":{"crate_id":1,"path":["std","os","unix","net","ancillary","SocketAncillary"],"kind":"struct"},"6:488:8861":{"crate_id":6,"path":["libc","unix","timeval"],"kind":"struct"},"16:7437:15262":{"crate_id":16,"path":["gimli","read","op","OperationIter"],"kind":"struct"},"2:2784:2451":{"crate_id":2,"path":["core","ops","arith","AddAssign"],"kind":"trait"},"6:1732:9778":{"crate_id":6,"path":["libc","unix","linux_like","sigevent"],"kind":"struct"},"2:40447:8062":{"crate_id":2,"path":["core","iter","adapters","skip_while","SkipWhile"],"kind":"struct"},"1:8491:2356":{"crate_id":1,"path":["std","path","Ancestors"],"kind":"struct"},"17:12098:18674":{"crate_id":17,"path":["object","macho","PreboundDylibCommand"],"kind":"struct"},"16:5104:15000":{"crate_id":16,"path":["gimli","constants","DwRle"],"kind":"struct"},"14:202:7779":{"crate_id":14,"path":["rustc_demangle","v0","ParseError"],"kind":"enum"},"16:6728:15245":{"crate_id":16,"path":["gimli","read","line","LineProgramHeader"],"kind":"struct"},"17:8283:15363":{"crate_id":17,"path":["object","common","BinaryFormat"],"kind":"enum"},"6:4786:12356":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_j1939"],"kind":"struct"},"17:11355:18152":{"crate_id":17,"path":["object","elf","CompressionHeader64"],"kind":"struct"},"1:8806:2029":{"crate_id":1,"path":["std","sync","mpsc","IntoIter"],"kind":"struct"},"6:1672:9772":{"crate_id":6,"path":["libc","unix","linux_like","arpreq_old"],"kind":"struct"},"6:4886:12368":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_initmsg"],"kind":"struct"},"1:7671:2046":{"crate_id":1,"path":["std","collections","hash","map","RandomState"],"kind":"struct"},"2:11253:8202":{"crate_id":2,"path":["core","slice","SlicePattern"],"kind":"trait"},"2:40111:7861":{"crate_id":2,"path":["core","char","TryFromCharError"],"kind":"struct"},"1:5686:2393":{"crate_id":1,"path":["std","sync","barrier","Barrier"],"kind":"struct"},"16:4728:14912":{"crate_id":16,"path":["gimli","constants","DwAddr"],"kind":"struct"},"2:10290:7726":{"crate_id":2,"path":["core","slice","iter","RSplitNMut"],"kind":"struct"},"2:41377:2232":{"crate_id":2,"path":["core","net","socket_addr","SocketAddrV4"],"kind":"struct"},"2:25859:2242":{"crate_id":2,"path":["core","num","wrapping","Wrapping"],"kind":"struct"},"2:42467:68":{"crate_id":2,"path":["core","fmt","Alignment"],"kind":"enum"},"2:2981:2084":{"crate_id":2,"path":["core","ops","index","Index"],"kind":"trait"},"17:1034:15430":{"crate_id":17,"path":["object","read","coff","relocation","CoffRelocationIterator"],"kind":"struct"},"1:643:2009":{"crate_id":1,"path":["std","backtrace","BytesOrWide"],"kind":"enum"},"1:10853:21051":{"crate_id":1,"path":["std","sys","unix","process","process_common","ProgramKind"],"kind":"enum"},"17:12483:18698":{"crate_id":17,"path":["object","macho","LinkerOptionCommand"],"kind":"struct"},"6:4394:12159":{"crate_id":6,"path":["libc","unix","linux_like","linux","if_nameindex"],"kind":"struct"},"16:8142:15293":{"crate_id":16,"path":["gimli","read","unit","EntriesTreeIter"],"kind":"struct"},"2:2312:188":{"crate_id":2,"path":["core","cmp","PartialEq"],"kind":"trait"},"17:11319:18150":{"crate_id":17,"path":["object","elf","SectionHeader64"],"kind":"struct"},"5:2908:30612":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Immut"],"kind":"struct"},"1:11914:1498":{"crate_id":1,"path":["std","u64"],"kind":"primitive"},"2:42683:7893":{"crate_id":2,"path":["core","hash","sip","SipHasher"],"kind":"struct"},"6:5881:13034":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_mmap_req"],"kind":"struct"},"2:30244:2062":{"crate_id":2,"path":["core","mem","manually_drop","ManuallyDrop"],"kind":"struct"},"2:43955:7777":{"crate_id":2,"path":["core","str","pattern","EmptyNeedle"],"kind":"struct"},"18:727:19519":{"crate_id":18,"path":["memchr","memmem","SearcherConfig"],"kind":"struct"},"5:1413:2031":{"crate_id":5,"path":["alloc","collections","btree","map","Values"],"kind":"struct"},"2:41530:8188":{"crate_id":2,"path":["core","panicking","AssertKind"],"kind":"enum"},"6:6647:9899":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stat64"],"kind":"struct"},"2:43818:7772":{"crate_id":2,"path":["core","str","pattern","CharArrayRefSearcher"],"kind":"struct"},"1:11097:2417":{"crate_id":1,"path":["std","sys","unix","time","inner","Instant"],"kind":"struct"},"6:4948:12375":{"crate_id":6,"path":["libc","unix","linux_like","linux","rlimit64"],"kind":"struct"},"1:10828:2112":{"crate_id":1,"path":["std","sys","unix","os","JoinPathsError"],"kind":"struct"},"17:8718:15349":{"crate_id":17,"path":["object","endian","U32Bytes"],"kind":"struct"},"6:653:8922":{"crate_id":6,"path":["libc","unix","linux_like","timezone"],"kind":"enum"},"5:2906:30629":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Dying"],"kind":"enum"},"1:7262:20320":{"crate_id":1,"path":["std","panicking","Hook"],"kind":"enum"},"11:2060:2042":{"crate_id":11,"path":["hashbrown","set","Entry"],"kind":"enum"},"2:1756:8135":{"crate_id":2,"path":["core","ptr","metadata","DynMetadata"],"kind":"struct"},"2:39270:201":{"crate_id":2,"path":["core","ops","range","RangeInclusive"],"kind":"struct"},"2:2932:1921":{"crate_id":2,"path":["core","ops","function","FnOnce"],"kind":"trait"},"16:5594:15197":{"crate_id":16,"path":["gimli","read","cfi","EhFrameHdr"],"kind":"struct"},"2:20591:30064":{"crate_id":2,"path":["core","core_simd","swizzle","interleave","Hi"],"kind":"struct"},"17:9098:15380":{"crate_id":17,"path":["object","read","any","SectionIterator"],"kind":"struct"},"1:11917:1553":{"crate_id":1,"path":["std","usize"],"kind":"primitive"},"17:11556:18166":{"crate_id":17,"path":["object","elf","Verdef"],"kind":"struct"},"2:2851:8108":{"crate_id":2,"path":["core","ops","bit","ShlAssign"],"kind":"trait"},"1:8798:2416":{"crate_id":1,"path":["std","sync","mpsc","TryIter"],"kind":"struct"},"2:2512:149":{"crate_id":2,"path":["core","convert","Into"],"kind":"trait"},"2:2746:106":{"crate_id":2,"path":["core","marker","ConstParamTy"],"kind":"trait"},"2:21443:2456":{"crate_id":2,"path":["core","core_simd","vector","Simd"],"kind":"struct"},"17:8195:15345":{"crate_id":17,"path":["object","common","Architecture"],"kind":"enum"},"1:8416:2353":{"crate_id":1,"path":["std","path","PrefixComponent"],"kind":"struct"},"16:4445:14821":{"crate_id":16,"path":["gimli","constants","DwAte"],"kind":"struct"},"5:7081:2029":{"crate_id":5,"path":["alloc","collections","linked_list","IntoIter"],"kind":"struct"},"17:9839:15438":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdat"],"kind":"struct"},"2:21349:2475":{"crate_id":2,"path":["core","core_simd","ord","SimdOrd"],"kind":"trait"},"6:4972:12378":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_alg"],"kind":"struct"},"2:45376:2480":{"crate_id":2,"path":["core","core_arch","simd","i8x2"],"kind":"struct"},"17:9796:15445":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbol"],"kind":"struct"},"16:7244:33291":{"crate_id":16,"path":["gimli","read","op","OperationEvaluationResult"],"kind":"enum"},"2:43342:7744":{"crate_id":2,"path":["core","str","iter","CharIndices"],"kind":"struct"},"17:13356:19445":{"crate_id":17,"path":["object","pe","ImageImportDescriptor"],"kind":"struct"},"1:4074:25953":{"crate_id":1,"path":["std","os","unix","net","ancillary","AncillaryDataIter"],"kind":"struct"},"11:393:33045":{"crate_id":11,"path":["hashbrown","raw","RawIterHash"],"kind":"struct"},"1:413:165":{"crate_id":1,"path":["std","thread","local","LocalKey"],"kind":"struct"},"5:3129:30833":{"crate_id":5,"path":["alloc","collections","btree","set","DifferenceInner"],"kind":"enum"},"16:8156:15294":{"crate_id":16,"path":["gimli","read","unit","DebugTypes"],"kind":"struct"},"2:20950:2459":{"crate_id":2,"path":["core","core_simd","eq","SimdPartialEq"],"kind":"trait"},"16:5944:15212":{"crate_id":16,"path":["gimli","read","cfi","UnwindTable"],"kind":"struct"},"1:8954:22985":{"crate_id":1,"path":["std","sync","mpmc","list","Position"],"kind":"struct"},"18:766:19513":{"crate_id":18,"path":["memchr","memmem","SearcherRevKind"],"kind":"enum"},"2:22272:175":{"crate_id":2,"path":["core","num","nonzero","NonZeroU16"],"kind":"struct"},"2:47675:7628":{"crate_id":2,"path":["core","core_arch","x86","__m128i"],"kind":"struct"},"16:3749:14317":{"crate_id":16,"path":["gimli","constants","DwSect"],"kind":"struct"},"2:49677:2478":{"crate_id":2,"path":["core","core_simd","swizzle","Which"],"kind":"enum"},"1:3911:2254":{"crate_id":1,"path":["std","os","unix","fs","FileExt"],"kind":"trait"},"6:5736:12963":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","statx"],"kind":"struct"},"2:43787:7770":{"crate_id":2,"path":["core","str","pattern","MultiCharEqSearcher"],"kind":"struct"},"2:47473:2531":{"crate_id":2,"path":["core","core_arch","simd","u32x16"],"kind":"struct"},"1:10954:22303":{"crate_id":1,"path":["std","sys","unix","process","process_inner","posix_spawn","PosixSpawnattr"],"kind":"struct"},"17:13426:19452":{"crate_id":17,"path":["object","pe","ImageResourceDirStringU"],"kind":"struct"},"1:5021:22984":{"crate_id":1,"path":["std","path","fmt","DebugHelper"],"kind":"struct"},"16:5032:14976":{"crate_id":16,"path":["gimli","constants","DwLnct"],"kind":"struct"},"5:2407:30621":{"crate_id":5,"path":["alloc","collections","btree","node","NodeRef"],"kind":"struct"},"6:4861:12366":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_ifru_map"],"kind":"struct"},"6:4841:12363":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlmsgerr"],"kind":"struct"},"1:8790:2027":{"crate_id":1,"path":["std","sync","mpsc","Iter"],"kind":"struct"},"1:10653:20596":{"crate_id":1,"path":["std","sys","unix","fs","FileAttr"],"kind":"struct"},"1:10363:22293":{"crate_id":1,"path":["std","sys","unix","stack_overflow","Handler"],"kind":"struct"},"17:11615:18170":{"crate_id":17,"path":["object","elf","NoteHeader32"],"kind":"struct"},"16:6935:15253":{"crate_id":16,"path":["gimli","read","loclists","RawLocListIter"],"kind":"struct"},"16:3446:14307":{"crate_id":16,"path":["gimli","arch","RiscV"],"kind":"struct"},"1:11892:371":{"crate_id":1,"path":["std","bool"],"kind":"primitive"},"1:9044:219":{"crate_id":1,"path":["std","sync","rwlock","RwLockWriteGuard"],"kind":"struct"},"2:7599:8039":{"crate_id":2,"path":["core","iter","traits","marker","TrustedStep"],"kind":"trait"},"5:5239:7696":{"crate_id":5,"path":["alloc","slice","Join"],"kind":"trait"},"17:13257:19437":{"crate_id":17,"path":["object","pe","ImageBaseRelocation"],"kind":"struct"},"2:20780:28672":{"crate_id":2,"path":["core","core_simd","elements","const_ptr","SimdConstPtr","with_addr"],"kind":"foreign_type"},"1:3135:21669":{"crate_id":1,"path":["std","io","stdio","StderrRaw"],"kind":"struct"},"16:2905:14299":{"crate_id":16,"path":["gimli","common","EhFrameOffset"],"kind":"struct"},"17:9038:34026":{"crate_id":17,"path":["object","read","any","SegmentIteratorInternal"],"kind":"enum"},"16:5367:14244":{"crate_id":16,"path":["gimli","endianity","RunTimeEndian"],"kind":"enum"},"2:7595:2060":{"crate_id":2,"path":["core","iter","traits","marker","TrustedLen"],"kind":"trait"},"11:859:2040":{"crate_id":11,"path":["hashbrown","map","RawVacantEntryMut"],"kind":"struct"},"1:11901:1481":{"crate_id":1,"path":["std","tuple"],"kind":"primitive"},"11:816:2034":{"crate_id":11,"path":["hashbrown","map","ValuesMut"],"kind":"struct"},"17:12282:18684":{"crate_id":17,"path":["object","macho","DylibReference"],"kind":"struct"},"2:1630:588":{"crate_id":2,"path":["core","mem","drop"],"kind":"function"},"16:2720:14291":{"crate_id":16,"path":["gimli","common","DebugRngListsBase"],"kind":"struct"},"2:21851:27487":{"crate_id":2,"path":["core","num","dec2flt","FloatErrorKind"],"kind":"enum"},"1:10006:20673":{"crate_id":1,"path":["std","sys","unix","os","Env"],"kind":"struct"},"1:5439:2368":{"crate_id":1,"path":["std","process","Stdio"],"kind":"struct"},"1:3060:2219":{"crate_id":1,"path":["std","io","readbuf","BorrowedBuf"],"kind":"struct"},"2:2788:2453":{"crate_id":2,"path":["core","ops","arith","SubAssign"],"kind":"trait"},"1:5320:2363":{"crate_id":1,"path":["std","process","Child"],"kind":"struct"},"1:8153:2190":{"crate_id":1,"path":["std","io","Split"],"kind":"struct"},"17:13659:19468":{"crate_id":17,"path":["object","pe","ImageArm64RuntimeFunctionEntry"],"kind":"struct"},"2:40735:8038":{"crate_id":2,"path":["core","iter","sources","successors","Successors"],"kind":"struct"},"6:5817:13030":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","msghdr"],"kind":"struct"},"2:2518:238":{"crate_id":2,"path":["core","convert","TryInto"],"kind":"trait"},"6:4747:12351":{"crate_id":6,"path":["libc","unix","linux_like","linux","fanotify_response"],"kind":"struct"},"0:0:1673":{"crate_id":0,"path":["winapi"],"kind":"module"},"1:4681:2271":{"crate_id":1,"path":["std","os","fd","raw","FromRawFd"],"kind":"trait"},"6:6819:13465":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","shmid_ds"],"kind":"struct"},"5:1078:31854":{"crate_id":5,"path":["alloc","collections","btree","dedup_sorted_iter","DedupSortedIter"],"kind":"struct"},"2:2242:97":{"crate_id":2,"path":["core","borrow","Borrow"],"kind":"trait"},"17:9876:15493":{"crate_id":17,"path":["object","read","elf","note","Note"],"kind":"struct"},"1:6332:22962":{"crate_id":1,"path":["std","sync","mutex","fmt","LockedPlaceholder"],"kind":"struct"},"5:5908:2175":{"crate_id":5,"path":["alloc","sync","from_iter_exact","Guard"],"kind":"struct"},"5:7338:7799":{"crate_id":5,"path":["alloc","vec","splice","Splice"],"kind":"struct"},"17:10052:15524":{"crate_id":17,"path":["object","read","macho","file","MachOFile"],"kind":"struct"},"6:6774:13462":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user"],"kind":"struct"},"2:2695:225":{"crate_id":2,"path":["core","marker","StructuralEq"],"kind":"trait"},"16:4932:14948":{"crate_id":16,"path":["gimli","constants","DwDefaulted"],"kind":"struct"},"17:8971:129":{"crate_id":17,"path":["object","read","any","File"],"kind":"struct"},"2:22536:172":{"crate_id":2,"path":["core","num","nonzero","NonZeroI64"],"kind":"struct"},"17:9138:15381":{"crate_id":17,"path":["object","read","any","ComdatIterator"],"kind":"struct"},"17:9734:15441":{"crate_id":17,"path":["object","read","elf","section","ElfSection"],"kind":"struct"},"17:13332:19443":{"crate_id":17,"path":["object","pe","ImageTlsDirectory64"],"kind":"struct"},"2:46023:2550":{"crate_id":2,"path":["core","core_arch","simd","f32x4"],"kind":"struct"},"17:11544:18165":{"crate_id":17,"path":["object","elf","Versym"],"kind":"struct"},"16:3585:14308":{"crate_id":16,"path":["gimli","arch","X86"],"kind":"struct"},"2:11428:8251":{"crate_id":2,"path":["core","str","iter","SplitInternal"],"kind":"struct"},"16:7626:15275":{"crate_id":16,"path":["gimli","read","rnglists","RngListIter"],"kind":"struct"},"17:11879:18660":{"crate_id":17,"path":["object","macho","LoadCommand"],"kind":"struct"},"17:8573:15372":{"crate_id":17,"path":["object","common","SectionFlags"],"kind":"enum"},"17:12059:18671":{"crate_id":17,"path":["object","macho","SubClientCommand"],"kind":"struct"},"2:20934:2163":{"crate_id":2,"path":["core","core_simd","elements","sealed","Sealed"],"kind":"trait"},"2:46691:2502":{"crate_id":2,"path":["core","core_arch","simd","i64x4"],"kind":"struct"},"5:4366:2175":{"crate_id":5,"path":["alloc","collections","vec_deque","write_iter_wrapping","Guard"],"kind":"struct"},"2:22239:178":{"crate_id":2,"path":["core","num","nonzero","NonZeroU8"],"kind":"struct"},"2:2694:226":{"crate_id":2,"path":["core","marker","StructuralPartialEq"],"kind":"trait"},"2:6725:28379":{"crate_id":2,"path":["core","iter","adapters","GenericShunt"],"kind":"struct"},"2:10276:7728":{"crate_id":2,"path":["core","slice","iter","SplitNMut"],"kind":"struct"},"17:975:15426":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbolIterator"],"kind":"struct"},"17:9886:15466":{"crate_id":17,"path":["object","read","elf","hash","HashTable"],"kind":"struct"},"1:10422:2209":{"crate_id":1,"path":["std","sys","unix","stdio","Stdin"],"kind":"struct"},"2:47333:2525":{"crate_id":2,"path":["core","core_arch","simd","u16x32"],"kind":"struct"},"17:9545:15421":{"crate_id":17,"path":["object","read","coff","section","CoffSection"],"kind":"struct"},"1:11895:1515":{"crate_id":1,"path":["std","unit"],"kind":"primitive"},"17:12980:19417":{"crate_id":17,"path":["object","pe","ImageOptionalHeader64"],"kind":"struct"},"4:0:1778":{"crate_id":4,"path":["rustc_std_workspace_core"],"kind":"module"},"1:8931:20827":{"crate_id":1,"path":["std","sync","mpmc","error","SendTimeoutError"],"kind":"enum"},"16:7803:15284":{"crate_id":16,"path":["gimli","read","unit","UnitHeader"],"kind":"struct"},"6:4928:12372":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_nxtinfo"],"kind":"struct"},"2:40125:101":{"crate_id":2,"path":["core","ffi","c_str","CStr"],"kind":"struct"},"1:11506:14230":{"crate_id":1,"path":["std","backtrace_rs","backtrace","libunwind","Frame"],"kind":"enum"},"17:8632:15344":{"crate_id":17,"path":["object","endian","Endianness"],"kind":"enum"},"5:815:2053":{"crate_id":5,"path":["alloc","collections","binary_heap","RebuildOnDrop"],"kind":"struct"},"17:10555:15557":{"crate_id":17,"path":["object","read","pe","export","ExportTable"],"kind":"struct"},"17:9641:15432":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdatSectionIterator"],"kind":"struct"},"6:1689:9774":{"crate_id":6,"path":["libc","unix","linux_like","mmsghdr"],"kind":"struct"},"16:2470:14281":{"crate_id":16,"path":["gimli","common","DebugInfoOffset"],"kind":"struct"},"1:4328:2283":{"crate_id":1,"path":["std","os","unix","net","stream","UnixStream"],"kind":"struct"},"2:5472:2175":{"crate_id":2,"path":["core","iter","adapters","filter_map","next_chunk","Guard"],"kind":"struct"},"5:7052:198":{"crate_id":5,"path":["alloc","collections","btree","set","Range"],"kind":"struct"},"17:12293:18685":{"crate_id":17,"path":["object","macho","TwolevelHintsCommand"],"kind":"struct"},"17:8753:15374":{"crate_id":17,"path":["object","endian","U64Bytes"],"kind":"struct"},"2:8255:2338":{"crate_id":2,"path":["core","panic","unwind_safe","AssertUnwindSafe"],"kind":"struct"},"1:5910:2407":{"crate_id":1,"path":["std","sync","mpmc","counter","Sender"],"kind":"struct"},"2:2749:8072":{"crate_id":2,"path":["core","marker","FnPtr"],"kind":"trait"},"11:665:2029":{"crate_id":11,"path":["hashbrown","map","IntoIter"],"kind":"struct"},"17:12113:18675":{"crate_id":17,"path":["object","macho","DylinkerCommand"],"kind":"struct"},"2:4336:7840":{"crate_id":2,"path":["core","cell","Ref"],"kind":"struct"},"2:20589:30062":{"crate_id":2,"path":["core","core_simd","swizzle","interleave","Lo"],"kind":"struct"},"16:3225:14305":{"crate_id":16,"path":["gimli","arch","AArch64"],"kind":"struct"},"16:2524:14283":{"crate_id":16,"path":["gimli","common","DebugLineStrOffset"],"kind":"struct"},"6:5798:13028":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__timeval"],"kind":"struct"},"2:39173:8110":{"crate_id":2,"path":["core","ops","index_range","IndexRange"],"kind":"struct"},"6:4937:12373":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_prinfo"],"kind":"struct"},"2:7636:30250":{"crate_id":2,"path":["core","net","display_buffer","DisplayBuffer"],"kind":"struct"},"2:6981:2386":{"crate_id":2,"path":["core","iter","sources","once","once"],"kind":"function"},"18:609:34248":{"crate_id":18,"path":["memchr","memmem","twoway","Suffix"],"kind":"struct"},"2:45853:2535":{"crate_id":2,"path":["core","core_arch","simd","u64x2"],"kind":"struct"},"6:4871:12367":{"crate_id":6,"path":["libc","unix","linux_like","linux","in6_ifreq"],"kind":"struct"},"17:10092:15547":{"crate_id":17,"path":["object","read","macho","file","MachOComdatSectionIterator"],"kind":"struct"},"1:4683:2272":{"crate_id":1,"path":["std","os","fd","raw","IntoRawFd"],"kind":"trait"},"13:0:1777":{"crate_id":13,"path":["std_detect"],"kind":"module"},"2:43219:7702":{"crate_id":2,"path":["core","slice","iter","ArrayChunks"],"kind":"struct"},"6:5067:12387":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_txtime"],"kind":"struct"},"17:11136:15606":{"crate_id":17,"path":["object","archive","Header"],"kind":"struct"},"5:689:111":{"crate_id":5,"path":["alloc","borrow","Cow"],"kind":"enum"},"6:4625:12340":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Phdr"],"kind":"struct"},"1:5570:2408":{"crate_id":1,"path":["std","sync","mpsc","SyncSender"],"kind":"struct"},"17:11090:15402":{"crate_id":17,"path":["object","read","CompressedFileRange"],"kind":"struct"},"2:7267:1922":{"crate_id":2,"path":["core","iter","traits","exact_size","ExactSizeIterator"],"kind":"trait"},"11:840:2039":{"crate_id":11,"path":["hashbrown","map","RawOccupiedEntryMut"],"kind":"struct"},"18:644:34217":{"crate_id":18,"path":["memchr","memmem","x86","avx","nostd","Forward"],"kind":"struct"},"2:43434:7757":{"crate_id":2,"path":["core","str","iter","RSplitTerminator"],"kind":"struct"},"6:4943:12374":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_authinfo"],"kind":"struct"},"2:22602:2247":{"crate_id":2,"path":["core","num","nonzero","NonZeroIsize"],"kind":"struct"},"6:5804:13029":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","glob64_t"],"kind":"struct"},"1:9190:2108":{"crate_id":1,"path":["std","sys","unix","args","Args"],"kind":"struct"},"6:6617:13456":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stack_t"],"kind":"struct"},"2:6589:8042":{"crate_id":2,"path":["core","iter","adapters","zip","zip"],"kind":"function"},"17:12236:18682":{"crate_id":17,"path":["object","macho","DylibModule32"],"kind":"struct"},"2:20548:7881":{"crate_id":2,"path":["core","core_simd","swizzle","reverse","Reverse"],"kind":"struct"},"1:6757:2455":{"crate_id":1,"path":["std","std_float","StdFloat"],"kind":"trait"},"1:0:1389":{"crate_id":1,"path":["std"],"kind":"module"},"1:1561:2027":{"crate_id":1,"path":["std","collections","hash","set","Iter"],"kind":"struct"},"2:30478:27696":{"crate_id":2,"path":["core","ptr","alignment","AlignmentEnum64"],"kind":"enum"},"6:5978:13040":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","Elf64_Chdr"],"kind":"struct"},"17:9557:15383":{"crate_id":17,"path":["object","read","coff","symbol","SymbolTable"],"kind":"struct"},"6:579:8873":{"crate_id":6,"path":["libc","unix","tms"],"kind":"struct"},"2:41341:2240":{"crate_id":2,"path":["core","net","parser","AddrParseError"],"kind":"struct"},"2:41235:2228":{"crate_id":2,"path":["core","net","ip_addr","Ipv4Addr"],"kind":"struct"},"1:11910:740":{"crate_id":1,"path":["std","i128"],"kind":"primitive"},"2:20816:2472":{"crate_id":2,"path":["core","core_simd","elements","float","SimdFloat"],"kind":"trait"},"2:43930:7775":{"crate_id":2,"path":["core","str","pattern","StrSearcher"],"kind":"struct"},"6:4715:12347":{"crate_id":6,"path":["libc","unix","linux_like","linux","genlmsghdr"],"kind":"struct"},"2:6678:8049":{"crate_id":2,"path":["core","iter","adapters","zip","TrustedRandomAccessNoCoerce"],"kind":"trait"},"2:43658:7739":{"crate_id":2,"path":["core","str","iter","EncodeUtf16"],"kind":"struct"},"2:44343:2597":{"crate_id":2,"path":["core","task","wake","RawWakerVTable"],"kind":"struct"},"2:47794:7637":{"crate_id":2,"path":["core","core_arch","x86","__m128bh"],"kind":"struct"},"1:7860:2201":{"crate_id":1,"path":["std","io","buffered","IntoInnerError"],"kind":"struct"},"17:13744:19474":{"crate_id":17,"path":["object","pe","ImageEnclaveImport"],"kind":"struct"},"6:6021:13045":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_exit"],"kind":"struct"},"2:21344:2465":{"crate_id":2,"path":["core","core_simd","ord","SimdPartialOrd"],"kind":"trait"},"1:3987:2260":{"crate_id":1,"path":["std","os","unix","fs","DirEntryExt2"],"kind":"trait"},"2:43649:7740":{"crate_id":2,"path":["core","str","iter","SplitAsciiWhitespace"],"kind":"struct"},"1:6409:2404":{"crate_id":1,"path":["std","sync","once_lock","OnceLock"],"kind":"struct"},"2:40172:1646":{"crate_id":2,"path":["core","ffi","c_char"],"kind":"typedef"},"1:5563:2407":{"crate_id":1,"path":["std","sync","mpsc","Sender"],"kind":"struct"},"2:12517:2598":{"crate_id":2,"path":["core","task","wake","Waker"],"kind":"struct"},"17:8443:15368":{"crate_id":17,"path":["object","common","RelocationKind"],"kind":"enum"},"17:13033:19420":{"crate_id":17,"path":["object","pe","ImageRomHeaders"],"kind":"struct"},"1:3132:21673":{"crate_id":1,"path":["std","io","stdio","StdoutRaw"],"kind":"struct"},"16:6981:15255":{"crate_id":16,"path":["gimli","read","loclists","LocListIter"],"kind":"struct"},"14:221:14213":{"crate_id":14,"path":["rustc_demangle","SizeLimitExhausted"],"kind":"struct"},"5:3521:163":{"crate_id":5,"path":["alloc","collections","linked_list","LinkedList"],"kind":"struct"},"18:690:19517":{"crate_id":18,"path":["memchr","memmem","FinderRev"],"kind":"struct"},"2:9628:27767":{"crate_id":2,"path":["core","slice","sort","merge_sort","RunVec"],"kind":"struct"},"16:6179:15218":{"crate_id":16,"path":["gimli","read","dwarf","Dwarf"],"kind":"struct"},"2:21573:2462":{"crate_id":2,"path":["core","core_simd","vector","SimdElement"],"kind":"trait"},"2:12554:140":{"crate_id":2,"path":["core","alloc","global","GlobalAlloc"],"kind":"trait"},"6:1910:9941":{"crate_id":6,"path":["libc","unix","linux_like","linux","fpos64_t"],"kind":"enum"},"17:10823:15390":{"crate_id":17,"path":["object","read","SectionIndex"],"kind":"struct"},"5:963:30724":{"crate_id":5,"path":["alloc","collections","binary_heap","drop","DropGuard"],"kind":"struct"},"11:60:33046":{"crate_id":11,"path":["hashbrown","raw","bitmask","BitMaskIter"],"kind":"struct"},"2:45530:2522":{"crate_id":2,"path":["core","core_arch","simd","u16x4"],"kind":"struct"},"5:1042:31856":{"crate_id":5,"path":["alloc","collections","btree","append","MergeIter"],"kind":"struct"},"1:11168:20303":{"crate_id":1,"path":["std","sys_common","process","CommandEnv"],"kind":"struct"},"2:39388:7824":{"crate_id":2,"path":["core","array","TryFromSliceError"],"kind":"struct"},"2:11942:112":{"crate_id":2,"path":["core","str","lossy","Debug"],"kind":"struct"},"6:532:8866":{"crate_id":6,"path":["libc","unix","hostent"],"kind":"struct"},"16:5976:15214":{"crate_id":16,"path":["gimli","read","cfi","UnwindTableRow"],"kind":"struct"},"2:43093:28326":{"crate_id":2,"path":["core","slice","iter","GenericSplitN"],"kind":"struct"},"2:42040:2392":{"crate_id":2,"path":["core","sync","exclusive","Exclusive"],"kind":"struct"},"6:6833:13466":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","seccomp_notif_sizes"],"kind":"struct"},"2:21016:2464":{"crate_id":2,"path":["core","core_simd","masks","mask_impl","Mask"],"kind":"struct"},"1:2206:129":{"crate_id":1,"path":["std","fs","File"],"kind":"struct"},"2:40007:7866":{"crate_id":2,"path":["core","char","convert","CharTryFromError"],"kind":"struct"},"2:39561:23433":{"crate_id":2,"path":["core","ascii","ascii_char","AsciiChar"],"kind":"enum"},"1:3983:2259":{"crate_id":1,"path":["std","os","unix","fs","DirEntryExt"],"kind":"trait"},"1:7601:1987":{"crate_id":1,"path":["std","thread","ThreadId"],"kind":"struct"},"2:10096:7716":{"crate_id":2,"path":["core","slice","iter","SplitMut"],"kind":"struct"},"6:6840:13467":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ptrace_rseq_configuration"],"kind":"struct"},"16:2967:14301":{"crate_id":16,"path":["gimli","common","SectionId"],"kind":"enum"},"1:9068:2167":{"crate_id":1,"path":["std","time","SystemTime"],"kind":"struct"},"1:11908:743":{"crate_id":1,"path":["std","i32"],"kind":"primitive"},"17:11391:18154":{"crate_id":17,"path":["object","elf","Sym64"],"kind":"struct"},"2:40021:7868":{"crate_id":2,"path":["core","char","decode","DecodeUtf16"],"kind":"struct"},"17:13194:19431":{"crate_id":17,"path":["object","pe","ImageAuxSymbolFunctionBeginEnd"],"kind":"struct"},"17:10270:15507":{"crate_id":17,"path":["object","read","macho","segment","MachOSegment"],"kind":"struct"},"17:11446:18158":{"crate_id":17,"path":["object","elf","Rela32"],"kind":"struct"},"6:1494:9754":{"crate_id":6,"path":["libc","unix","linux_like","in_addr"],"kind":"struct"},"6:4722:12348":{"crate_id":6,"path":["libc","unix","linux_like","linux","in6_pktinfo"],"kind":"struct"},"6:4799:12358":{"crate_id":6,"path":["libc","unix","linux_like","linux","j1939_filter"],"kind":"struct"},"1:11201:19674":{"crate_id":1,"path":["std","sys_common","wtf8","CodePoint"],"kind":"struct"},"17:12496:18699":{"crate_id":17,"path":["object","macho","SymsegCommand"],"kind":"struct"},"6:7277:13839":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","align","clone_args"],"kind":"struct"},"1:8221:2290":{"crate_id":1,"path":["std","os","unix","net","ancillary","SocketCred"],"kind":"struct"},"1:1785:2092":{"crate_id":1,"path":["std","env","VarsOs"],"kind":"struct"},"2:9530:8215":{"crate_id":2,"path":["core","slice","sort","InsertionHole"],"kind":"struct"},"16:4624:14856":{"crate_id":16,"path":["gimli","constants","DwVirtuality"],"kind":"struct"},"5:4005:30724":{"crate_id":5,"path":["alloc","collections","vec_deque","drain","drop","DropGuard"],"kind":"struct"},"16:5920:15211":{"crate_id":16,"path":["gimli","read","cfi","UnwindContext"],"kind":"struct"},"16:4969:14961":{"crate_id":16,"path":["gimli","constants","DwLns"],"kind":"struct"},"1:1583:2049":{"crate_id":1,"path":["std","collections","hash","set","Difference"],"kind":"struct"},"1:10144:2378":{"crate_id":1,"path":["std","sys","unix","pipe","AnonPipe"],"kind":"struct"},"1:2550:22290":{"crate_id":1,"path":["std","io","buffered","bufwriter","flush_buf","BufGuard"],"kind":"struct"},"9:325:14127":{"crate_id":9,"path":["miniz_oxide","inflate","core","LocalVars"],"kind":"struct"},"1:8109:2162":{"crate_id":1,"path":["std","io","SeekFrom"],"kind":"enum"},"17:13469:19457":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation64"],"kind":"struct"},"11:1540:14196":{"crate_id":11,"path":["hashbrown","rustc_entry","RustcOccupiedEntry"],"kind":"struct"},"18:636:34231":{"crate_id":18,"path":["memchr","memmem","twoway","ApproximateByteSet"],"kind":"struct"},"1:11399:2239":{"crate_id":1,"path":["std","sys_common","net","UdpSocket"],"kind":"struct"},"1:8172:2235":{"crate_id":1,"path":["std","net","tcp","IntoIncoming"],"kind":"struct"},"6:4314:12309":{"crate_id":6,"path":["libc","unix","linux_like","linux","spwd"],"kind":"struct"},"2:45653:2494":{"crate_id":2,"path":["core","core_arch","simd","i32x2"],"kind":"struct"},"2:43665:7749":{"crate_id":2,"path":["core","str","iter","EscapeDebug"],"kind":"struct"},"17:10721:15564":{"crate_id":17,"path":["object","read","pe","rich","RichHeaderInfo"],"kind":"struct"},"16:3815:14335":{"crate_id":16,"path":["gimli","constants","DwUt"],"kind":"struct"},"17:10705:15599":{"crate_id":17,"path":["object","read","pe","resource","ResourceName"],"kind":"struct"},"1:6482:2400":{"crate_id":1,"path":["std","sync","poison","PoisonError"],"kind":"struct"},"2:41488:2336":{"crate_id":2,"path":["core","panic","location","Location"],"kind":"struct"},"6:4847:12364":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlattr"],"kind":"struct"},"2:43620:2186":{"crate_id":2,"path":["core","str","iter","Lines"],"kind":"struct"},"6:1535:9760":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_in6"],"kind":"struct"},"1:875:2030":{"crate_id":1,"path":["std","collections","hash","map","Keys"],"kind":"struct"},"1:4576:22890":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt","st_mtime"],"kind":"foreign_type"},"2:2470:7885":{"crate_id":2,"path":["core","convert","num","FloatToInt"],"kind":"trait"},"17:8420:15367":{"crate_id":17,"path":["object","common","SymbolScope"],"kind":"enum"},"17:9853:15492":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdatSectionIterator"],"kind":"struct"},"1:11378:2237":{"crate_id":1,"path":["std","sys_common","net","TcpListener"],"kind":"struct"},"1:3680:2237":{"crate_id":1,"path":["std","net","tcp","TcpListener"],"kind":"struct"},"2:2758:2452":{"crate_id":2,"path":["core","ops","arith","Sub"],"kind":"trait"},"6:7551:12554":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_rwlock_t"],"kind":"struct"},"1:3458:2161":{"crate_id":1,"path":["std","io","Seek"],"kind":"trait"},"16:5693:15203":{"crate_id":16,"path":["gimli","read","cfi","BaseAddresses"],"kind":"struct"},"2:41269:2230":{"crate_id":2,"path":["core","net","ip_addr","Ipv6MulticastScope"],"kind":"enum"},"1:1589:2050":{"crate_id":1,"path":["std","collections","hash","set","SymmetricDifference"],"kind":"struct"},"2:20741:2469":{"crate_id":2,"path":["core","core_simd","cast","SimdCast"],"kind":"trait"},"16:6854:15249":{"crate_id":16,"path":["gimli","read","line","FileEntryFormat"],"kind":"struct"},"2:41800:82":{"crate_id":2,"path":["core","sync","atomic","AtomicI32"],"kind":"struct"},"6:6043:32515":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","sifields_sigchld"],"kind":"struct"},"17:11484:18161":{"crate_id":17,"path":["object","elf","ProgramHeader32"],"kind":"struct"},"1:585:2001":{"crate_id":1,"path":["std","ascii","AsciiExt"],"kind":"trait"},"18:491:34247":{"crate_id":18,"path":["memchr","cow","Imp"],"kind":"struct"},"6:4468:12324":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_trigger"],"kind":"struct"},"1:2360:2143":{"crate_id":1,"path":["std","fs","read_link"],"kind":"function"},"17:1978:15464":{"crate_id":17,"path":["object","read","elf","relocation","ElfSectionRelocationIterator"],"kind":"struct"},"17:13292:19439":{"crate_id":17,"path":["object","pe","ImageExportDirectory"],"kind":"struct"},"17:10039:15502":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCacheImage"],"kind":"struct"},"1:6552:2406":{"crate_id":1,"path":["std","sync","remutex","ReentrantMutexGuard"],"kind":"struct"},"6:1505:9756":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreqn"],"kind":"struct"},"6:4495:12328":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_condition_effect"],"kind":"struct"},"5:6597:7803":{"crate_id":5,"path":["alloc","vec","in_place_drop","InPlaceDrop"],"kind":"struct"},"2:9989:2028":{"crate_id":2,"path":["core","slice","iter","IterMut"],"kind":"struct"},"1:11216:19663":{"crate_id":1,"path":["std","sys_common","wtf8","Wtf8Buf"],"kind":"struct"},"2:39292:203":{"crate_id":2,"path":["core","ops","range","RangeToInclusive"],"kind":"struct"},"17:9443:15412":{"crate_id":17,"path":["object","read","archive","ArchiveMemberIterator"],"kind":"struct"},"16:5708:15204":{"crate_id":16,"path":["gimli","read","cfi","SectionBaseAddresses"],"kind":"struct"},"17:10936:15396":{"crate_id":17,"path":["object","read","ObjectMapEntry"],"kind":"struct"},"2:43366:2190":{"crate_id":2,"path":["core","str","iter","Split"],"kind":"struct"},"1:3401:2159":{"crate_id":1,"path":["std","io","IoSliceMut"],"kind":"struct"},"2:40315:8052":{"crate_id":2,"path":["core","iter","adapters","filter","Filter"],"kind":"struct"},"17:10615:15585":{"crate_id":17,"path":["object","read","pe","import","DelayLoadImportTable"],"kind":"struct"},"6:7462:13999":{"crate_id":6,"path":["libc","unix","linux_like","linux","arch","generic","termios2"],"kind":"struct"},"2:21799:29423":{"crate_id":2,"path":["core","num","dec2flt","decimal","Decimal"],"kind":"struct"},"1:4639:2320":{"crate_id":1,"path":["std","os","linux","process","ChildExt"],"kind":"trait"},"16:2357:14276":{"crate_id":16,"path":["gimli","common","Register"],"kind":"struct"},"2:43336:7745":{"crate_id":2,"path":["core","str","iter","Chars"],"kind":"struct"},"16:2931:14300":{"crate_id":16,"path":["gimli","common","UnitSectionOffset"],"kind":"enum"},"1:4256:2289":{"crate_id":1,"path":["std","os","unix","net","listener","UnixListener"],"kind":"struct"},"17:13777:19476":{"crate_id":17,"path":["object","pe","ImageCoffSymbolsHeader"],"kind":"struct"},"2:41960:85":{"crate_id":2,"path":["core","sync","atomic","AtomicIsize"],"kind":"struct"},"2:39979:7867":{"crate_id":2,"path":["core","char","convert","ParseCharError"],"kind":"struct"},"6:4894:12369":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_sndrcvinfo"],"kind":"struct"},"6:6588:8744":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","flock"],"kind":"struct"},"17:8389:15366":{"crate_id":17,"path":["object","common","SymbolKind"],"kind":"enum"},"16:2594:14286":{"crate_id":16,"path":["gimli","common","DebugLocListsIndex"],"kind":"struct"},"2:40457:8047":{"crate_id":2,"path":["core","iter","adapters","step_by","StepBy"],"kind":"struct"},"2:9613:22290":{"crate_id":2,"path":["core","slice","sort","merge_sort","BufGuard"],"kind":"struct"},"6:5876:13033":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_pktinfo"],"kind":"struct"},"2:40051:2003":{"crate_id":2,"path":["core","char","EscapeDefault"],"kind":"struct"},"2:3999:28375":{"crate_id":2,"path":["core","asserting","TryCaptureWithoutDebug"],"kind":"struct"},"2:43352:2189":{"crate_id":2,"path":["core","str","iter","Bytes"],"kind":"struct"},"1:11151:22284":{"crate_id":1,"path":["std","sys_common","once","futex","CompletionGuard"],"kind":"struct"},"17:11600:18169":{"crate_id":17,"path":["object","elf","Vernaux"],"kind":"struct"},"17:13376:19447":{"crate_id":17,"path":["object","pe","ImageBoundForwarderRef"],"kind":"struct"},"2:44085:8239":{"crate_id":2,"path":["core","str","LinesMap"],"kind":"struct"},"17:13821:19480":{"crate_id":17,"path":["object","pe","ImageSeparateDebugHeader"],"kind":"struct"},"17:10080:15546":{"crate_id":17,"path":["object","read","macho","file","MachOComdat"],"kind":"struct"},"2:39248:202":{"crate_id":2,"path":["core","ops","range","RangeTo"],"kind":"struct"},"2:44398:28366":{"crate_id":2,"path":["core","escape","EscapeIterInner"],"kind":"struct"},"6:1574:9764":{"crate_id":6,"path":["libc","unix","linux_like","tm"],"kind":"struct"},"16:7317:33461":{"crate_id":16,"path":["gimli","read","op","EvaluationState"],"kind":"enum"},"2:3318:69":{"crate_id":2,"path":["core","any","Any"],"kind":"trait"},"6:562:8870":{"crate_id":6,"path":["libc","unix","linger"],"kind":"struct"},"1:922:2035":{"crate_id":1,"path":["std","collections","hash","map","IntoKeys"],"kind":"struct"},"11:703:2036":{"crate_id":11,"path":["hashbrown","map","IntoValues"],"kind":"struct"},"16:4540:14844":{"crate_id":16,"path":["gimli","constants","DwEnd"],"kind":"struct"},"16:8180:15296":{"crate_id":16,"path":["gimli","read","value","ValueType"],"kind":"enum"},"16:55:14241":{"crate_id":16,"path":["gimli","endianity","Endianity"],"kind":"trait"},"15:198:14222":{"crate_id":15,"path":["addr2line","LocationRangeUnitIter"],"kind":"struct"},"6:5862:12992":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","mallinfo2"],"kind":"struct"},"5:1351:2027":{"crate_id":5,"path":["alloc","collections","btree","map","Iter"],"kind":"struct"},"2:2692:7661":{"crate_id":2,"path":["core","marker","Unsize"],"kind":"trait"},"5:4207:2027":{"crate_id":5,"path":["alloc","collections","vec_deque","iter","Iter"],"kind":"struct"},"1:2867:210":{"crate_id":1,"path":["std","io","error","Result"],"kind":"typedef"},"1:4578:22892":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt","st_ctime"],"kind":"foreign_type"},"2:21874:27522":{"crate_id":2,"path":["core","num","flt2dec","decoder","Decoded"],"kind":"struct"},"2:45570:2534":{"crate_id":2,"path":["core","core_arch","simd","u64x1"],"kind":"struct"},"1:7787:2154":{"crate_id":1,"path":["std","fs","Metadata"],"kind":"struct"},"17:13865:19483":{"crate_id":17,"path":["object","pe","ImportObjectHeader"],"kind":"struct"},"6:4823:12361":{"crate_id":6,"path":["libc","unix","linux_like","linux","seccomp_data"],"kind":"struct"},"6:4462:12323":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_replay"],"kind":"struct"},"10:44:14180":{"crate_id":10,"path":["adler","Adler32"],"kind":"struct"},"1:2614:2202":{"crate_id":1,"path":["std","io","buffered","linewriter","LineWriter"],"kind":"struct"},"17:12419:18694":{"crate_id":17,"path":["object","macho","VersionMinCommand"],"kind":"struct"},"17:10712:15600":{"crate_id":17,"path":["object","read","pe","resource","ResourceNameOrId"],"kind":"enum"},"2:21730:28082":{"crate_id":2,"path":["core","num","bignum","tests","Big8x3"],"kind":"struct"},"1:4564:2257":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt"],"kind":"trait"},"1:6188:2407":{"crate_id":1,"path":["std","sync","mpmc","Sender"],"kind":"struct"},"6:6066:13048":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_data"],"kind":"union"},"5:7136:2025":{"crate_id":5,"path":["alloc","collections","TryReserveError"],"kind":"struct"},"1:3249:2208":{"crate_id":1,"path":["std","io","stdio","StderrLock"],"kind":"struct"},"2:9155:7669":{"crate_id":2,"path":["core","fmt","Binary"],"kind":"trait"},"1:6912:20944":{"crate_id":1,"path":["std","sys_common","lazy_box","LazyBox"],"kind":"struct"},"17:9478:15431":{"crate_id":17,"path":["object","read","coff","file","CoffCommon"],"kind":"struct"},"5:3673:2066":{"crate_id":5,"path":["alloc","collections","linked_list","Cursor"],"kind":"struct"},"1:8325:2332":{"crate_id":1,"path":["std","panic","BacktraceStyle"],"kind":"enum"},"2:1916:2071":{"crate_id":2,"path":["core","ptr","unique","Unique"],"kind":"struct"},"6:6155:13077":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","msqid_ds"],"kind":"struct"},"11:1071:33050":{"crate_id":11,"path":["hashbrown","map","KeyOrRef"],"kind":"enum"},"1:8768:2374":{"crate_id":1,"path":["std","process","ExitStatusError"],"kind":"struct"},"16:7859:15286":{"crate_id":16,"path":["gimli","read","unit","AttributeValue"],"kind":"enum"},"6:4427:12319":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_id"],"kind":"struct"},"1:8831:2411":{"crate_id":1,"path":["std","sync","mpsc","RecvError"],"kind":"struct"},"1:5502:2371":{"crate_id":1,"path":["std","process","Termination"],"kind":"trait"},"1:5247:120":{"crate_id":1,"path":["std","path","Display"],"kind":"struct"},"2:46301:2518":{"crate_id":2,"path":["core","core_arch","simd","u8x32"],"kind":"struct"},"2:11787:7762":{"crate_id":2,"path":["core","str","pattern","MultiCharEqPattern"],"kind":"struct"},"1:936:2038":{"crate_id":1,"path":["std","collections","hash","map","RawEntryMut"],"kind":"enum"},"6:6606:13455":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","siginfo_t"],"kind":"struct"},"6:5835:13032":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","termios"],"kind":"struct"},"2:40365:8065":{"crate_id":2,"path":["core","iter","adapters","intersperse","Intersperse"],"kind":"struct"},"16:6061:14245":{"crate_id":16,"path":["gimli","read","cfi","CallFrameInstruction"],"kind":"enum"},"2:44101:8247":{"crate_id":2,"path":["core","str","IsWhitespace"],"kind":"struct"},"17:13219:19433":{"crate_id":17,"path":["object","pe","ImageAuxSymbolSection"],"kind":"struct"},"5:3124:2049":{"crate_id":5,"path":["alloc","collections","btree","set","Difference"],"kind":"struct"},"1:8502:2357":{"crate_id":1,"path":["std","path","StripPrefixError"],"kind":"struct"},"17:9917:15491":{"crate_id":17,"path":["object","read","elf","version","Version"],"kind":"struct"},"2:30314:27640":{"crate_id":2,"path":["core","ptr","alignment","AlignmentEnum16"],"kind":"enum"},"17:10857:15392":{"crate_id":17,"path":["object","read","SymbolSection"],"kind":"enum"},"1:4176:2288":{"crate_id":1,"path":["std","os","unix","net","datagram","UnixDatagram"],"kind":"struct"},"1:1844:2108":{"crate_id":1,"path":["std","env","Args"],"kind":"struct"},"2:44385:7650":{"crate_id":2,"path":["core","alloc","AllocError"],"kind":"struct"},"2:12609:2073":{"crate_id":2,"path":["core","alloc","Allocator"],"kind":"trait"},"6:5993:13042":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","seminfo"],"kind":"struct"},"6:1695:9775":{"crate_id":6,"path":["libc","unix","linux_like","epoll_event"],"kind":"struct"},"5:780:96":{"crate_id":5,"path":["alloc","collections","binary_heap","BinaryHeap"],"kind":"struct"},"5:2189:30592":{"crate_id":5,"path":["alloc","collections","btree","navigate","LazyLeafRange"],"kind":"struct"},"2:46045:2556":{"crate_id":2,"path":["core","core_arch","simd","f64x2"],"kind":"struct"},"16:6361:15229":{"crate_id":16,"path":["gimli","read","abbrev","AttributeSpecification"],"kind":"struct"},"16:6904:15252":{"crate_id":16,"path":["gimli","read","loclists","LocationLists"],"kind":"struct"},"2:30053:2243":{"crate_id":2,"path":["core","num","FpCategory"],"kind":"enum"},"2:2506:75":{"crate_id":2,"path":["core","convert","AsRef"],"kind":"trait"},"16:6488:15237":{"crate_id":16,"path":["gimli","read","index","UnitIndex"],"kind":"struct"},"2:5384:2175":{"crate_id":2,"path":["core","iter","adapters","filter","next_chunk","Guard"],"kind":"struct"},"16:5779:15207":{"crate_id":16,"path":["gimli","read","cfi","Augmentation"],"kind":"struct"},"2:4114:7845":{"crate_id":2,"path":["core","cell","lazy","LazyCell"],"kind":"struct"},"2:46455:2536":{"crate_id":2,"path":["core","core_arch","simd","u64x4"],"kind":"struct"},"17:10589:15594":{"crate_id":17,"path":["object","read","pe","import","ImportThunkList"],"kind":"struct"},"2:44173:8260":{"crate_id":2,"path":["core","time","TryFromFloatSecsErrorKind"],"kind":"enum"},"2:43978:7759":{"crate_id":2,"path":["core","str","lossy","Utf8Chunk"],"kind":"struct"},"2:40496:8064":{"crate_id":2,"path":["core","iter","adapters","zip","Zip"],"kind":"struct"},"11:638:2027":{"crate_id":11,"path":["hashbrown","map","Iter"],"kind":"struct"},"16:2337:14275":{"crate_id":16,"path":["gimli","common","LineEncoding"],"kind":"struct"},"17:10478:15561":{"crate_id":17,"path":["object","read","pe","section","PeSectionIterator"],"kind":"struct"},"17:13499:19460":{"crate_id":17,"path":["object","pe","ImagePrologueDynamicRelocationHeader"],"kind":"struct"},"2:41640:84":{"crate_id":2,"path":["core","sync","atomic","AtomicI8"],"kind":"struct"},"17:10104:15503":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandIterator"],"kind":"struct"},"1:7948:2203":{"crate_id":1,"path":["std","io","error","ErrorKind"],"kind":"enum"},"2:21815:27600":{"crate_id":2,"path":["core","num","dec2flt","number","Number"],"kind":"struct"},"1:1895:2123":{"crate_id":1,"path":["std","error","Report"],"kind":"struct"},"5:7044:2029":{"crate_id":5,"path":["alloc","collections","btree","set","IntoIter"],"kind":"struct"},"11:1852:2033":{"crate_id":11,"path":["hashbrown","set","DrainFilter"],"kind":"struct"},"1:7596:1985":{"crate_id":1,"path":["std","thread","Builder"],"kind":"struct"},"16:8072:15289":{"crate_id":16,"path":["gimli","read","unit","EntriesRaw"],"kind":"struct"},"2:40333:28247":{"crate_id":2,"path":["core","iter","adapters","flatten","FlattenCompat"],"kind":"struct"},"1:3129:20131":{"crate_id":1,"path":["std","io","stdio","StdinRaw"],"kind":"struct"},"17:13857:19482":{"crate_id":17,"path":["object","pe","ImageArchitectureEntry"],"kind":"struct"},"2:30848:183":{"crate_id":2,"path":["core","cmp","Ordering"],"kind":"enum"},"17:9696:15428":{"crate_id":17,"path":["object","read","elf","section","SectionTable"],"kind":"struct"},"2:43534:7754":{"crate_id":2,"path":["core","str","iter","RMatchIndices"],"kind":"struct"},"17:8909:2189":{"crate_id":17,"path":["object","read","util","Bytes"],"kind":"struct"},"2:40356:8056":{"crate_id":2,"path":["core","iter","adapters","inspect","Inspect"],"kind":"struct"},"17:13015:19418":{"crate_id":17,"path":["object","pe","ImageNtHeaders64"],"kind":"struct"},"16:4845:14933":{"crate_id":16,"path":["gimli","constants","DwOrd"],"kind":"struct"},"2:42458:71":{"crate_id":2,"path":["core","fmt","rt","Argument"],"kind":"struct"},"5:1443:2036":{"crate_id":5,"path":["alloc","collections","btree","map","IntoValues"],"kind":"struct"},"16:5886:15210":{"crate_id":16,"path":["gimli","read","cfi","FrameDescriptionEntry"],"kind":"struct"},"2:11283:7742":{"crate_id":2,"path":["core","str","converts","from_utf8"],"kind":"function"},"17:9322:34185":{"crate_id":17,"path":["object","read","any","DynamicRelocationIteratorInternal"],"kind":"enum"},"16:6575:15242":{"crate_id":16,"path":["gimli","read","line","LineInstruction"],"kind":"enum"},"17:8953:15378":{"crate_id":17,"path":["object","read","util","StringTable"],"kind":"struct"},"2:3079:2086":{"crate_id":2,"path":["core","ops","range","RangeBounds"],"kind":"trait"},"5:6607:7804":{"crate_id":5,"path":["alloc","vec","in_place_drop","InPlaceDstBufDrop"],"kind":"struct"},"17:9866:15459":{"crate_id":17,"path":["object","read","elf","note","NoteIterator"],"kind":"struct"},"1:8754:2373":{"crate_id":1,"path":["std","process","ExitStatus"],"kind":"struct"},"5:7195:27580":{"crate_id":5,"path":["alloc","ffi","c_str","FromBytesWithNulErrorKind"],"kind":"enum"},"6:4549:12334":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_abs_setup"],"kind":"struct"},"2:30300:68":{"crate_id":2,"path":["core","ptr","alignment","Alignment"],"kind":"struct"},"1:618:2005":{"crate_id":1,"path":["std","backtrace","Backtrace"],"kind":"struct"},"17:3142:15511":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbolIterator"],"kind":"struct"},"5:1382:2029":{"crate_id":5,"path":["alloc","collections","btree","map","IntoIter"],"kind":"struct"},"2:11741:7733":{"crate_id":2,"path":["core","str","pattern","DoubleEndedSearcher"],"kind":"trait"},"1:7665:2012":{"crate_id":1,"path":["std","backtrace","RawFrame"],"kind":"enum"},"1:11915:1495":{"crate_id":1,"path":["std","u128"],"kind":"primitive"},"1:2362:2144":{"crate_id":1,"path":["std","fs","canonicalize"],"kind":"function"},"2:2264:105":{"crate_id":2,"path":["core","clone","Clone"],"kind":"trait"},"17:9523:15423":{"crate_id":17,"path":["object","read","coff","section","CoffSegment"],"kind":"struct"},"17:9340:15386":{"crate_id":17,"path":["object","read","any","SectionRelocationIterator"],"kind":"struct"},"17:8256:15343":{"crate_id":17,"path":["object","common","AddressSize"],"kind":"enum"},"6:1708:9776":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_storage"],"kind":"struct"},"1:9883:20591":{"crate_id":1,"path":["std","sys","unix","net","Socket"],"kind":"struct"},"5:6990:2074":{"crate_id":5,"path":["alloc","alloc","Global"],"kind":"struct"},"6:1568:9763":{"crate_id":6,"path":["libc","unix","linux_like","fd_set"],"kind":"struct"},"16:8047:15288":{"crate_id":16,"path":["gimli","read","unit","AttrsIter"],"kind":"struct"},"17:9628:15419":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdat"],"kind":"struct"},"16:4818:14930":{"crate_id":16,"path":["gimli","constants","DwInl"],"kind":"struct"},"2:41521:2337":{"crate_id":2,"path":["core","panic","panic_info","PanicInfo"],"kind":"struct"},"5:7148:2026":{"crate_id":5,"path":["alloc","collections","TryReserveErrorKind"],"kind":"enum"},"1:1768:610":{"crate_id":1,"path":["std","env"],"kind":"module"},"17:12449:18696":{"crate_id":17,"path":["object","macho","BuildToolVersion"],"kind":"struct"},"5:211:7668":{"crate_id":5,"path":["alloc","boxed","thin","ThinBox"],"kind":"struct"},"6:1701:2279":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_un"],"kind":"struct"},"2:39367:15297":{"crate_id":2,"path":["core","any","tags","Value"],"kind":"struct"},"5:1612:30724":{"crate_id":5,"path":["alloc","collections","btree","map","drop","DropGuard"],"kind":"struct"},"2:4259:7833":{"crate_id":2,"path":["core","cell","BorrowError"],"kind":"struct"},"2:42183:7679":{"crate_id":2,"path":["core","fmt","num","UpperHex"],"kind":"struct"},"16:6243:33449":{"crate_id":16,"path":["gimli","read","dwarf","RangeIterInner"],"kind":"enum"},"17:10316:15505":{"crate_id":17,"path":["object","read","macho","section","MachOSectionInternal"],"kind":"struct"},"5:3184:2051":{"crate_id":5,"path":["alloc","collections","btree","set","Union"],"kind":"struct"},"18:681:19516":{"crate_id":18,"path":["memchr","memmem","Finder"],"kind":"struct"},"6:7504:12547":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_mutexattr_t"],"kind":"struct"},"1:8226:2291":{"crate_id":1,"path":["std","os","unix","net","ancillary","AncillaryError"],"kind":"enum"},"2:44117:8241":{"crate_id":2,"path":["core","str","UnsafeBytesToStr"],"kind":"struct"},"17:8651:14242":{"crate_id":17,"path":["object","endian","LittleEndian"],"kind":"struct"},"16:8269:128":{"crate_id":16,"path":["gimli","read","Error"],"kind":"enum"},"17:13625:19465":{"crate_id":17,"path":["object","pe","ImageHotPatchBase"],"kind":"struct"},"16:2572:14285":{"crate_id":16,"path":["gimli","common","DebugLocListsBase"],"kind":"struct"},"2:4390:7842":{"crate_id":2,"path":["core","cell","RefMut"],"kind":"struct"},"17:12510:18700":{"crate_id":17,"path":["object","macho","IdentCommand"],"kind":"struct"},"2:2812:8099":{"crate_id":2,"path":["core","ops","bit","BitAnd"],"kind":"trait"},"16:6442:15234":{"crate_id":16,"path":["gimli","read","aranges","ArangeEntry"],"kind":"struct"},"17:10840:15391":{"crate_id":17,"path":["object","read","SymbolIndex"],"kind":"struct"},"16:2764:14293":{"crate_id":16,"path":["gimli","common","DebugStrOffset"],"kind":"struct"},"1:7792:2155":{"crate_id":1,"path":["std","fs","ReadDir"],"kind":"struct"},"1:10428:2207":{"crate_id":1,"path":["std","sys","unix","stdio","Stderr"],"kind":"struct"},"6:7545:12553":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_mutex_t"],"kind":"struct"},"16:7635:15276":{"crate_id":16,"path":["gimli","read","rnglists","RawRange"],"kind":"struct"},"6:4649:12342":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Shdr"],"kind":"struct"},"17:12433:18695":{"crate_id":17,"path":["object","macho","BuildVersionCommand"],"kind":"struct"},"2:22404:1990":{"crate_id":2,"path":["core","num","nonzero","NonZeroUsize"],"kind":"struct"},"1:8160:2186":{"crate_id":1,"path":["std","io","Lines"],"kind":"struct"},"16:6767:15246":{"crate_id":16,"path":["gimli","read","line","IncompleteLineProgram"],"kind":"struct"},"1:7938:22986":{"crate_id":1,"path":["std","io","error","SimpleMessage"],"kind":"struct"},"17:12799:19410":{"crate_id":17,"path":["object","pe","ImageOs2Header"],"kind":"struct"},"16:6890:15251":{"crate_id":16,"path":["gimli","read","loclists","DebugLocLists"],"kind":"struct"},"1:10634:2322":{"crate_id":1,"path":["std","sys","unix","fd","FileDesc"],"kind":"struct"},"2:39991:27583":{"crate_id":2,"path":["core","char","convert","CharErrorKind"],"kind":"enum"},"5:265:30724":{"crate_id":5,"path":["alloc","boxed","thin","drop","DropGuard"],"kind":"struct"},"6:4916:12371":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_rcvinfo"],"kind":"struct"},"2:10057:7729":{"crate_id":2,"path":["core","slice","iter","SplitInclusive"],"kind":"struct"},"11:279:33035":{"crate_id":11,"path":["hashbrown","raw","RawIterRange"],"kind":"struct"},"17:13385:19448":{"crate_id":17,"path":["object","pe","ImageDelayloadDescriptor"],"kind":"struct"},"16:4568:14848":{"crate_id":16,"path":["gimli","constants","DwAccess"],"kind":"struct"},"2:40686:28328":{"crate_id":2,"path":["core","iter","sources","from_generator","FromGenerator"],"kind":"struct"},"16:3030:14302":{"crate_id":16,"path":["gimli","common","DwoId"],"kind":"struct"},"1:8844:2414":{"crate_id":1,"path":["std","sync","mpsc","TryRecvError"],"kind":"enum"},"6:123:8543":{"crate_id":6,"path":["libc","unix","fpos_t"],"kind":"enum"},"2:3197:7662":{"crate_id":2,"path":["core","ops","unsize","CoerceUnsized"],"kind":"trait"},"5:3688:2067":{"crate_id":5,"path":["alloc","collections","linked_list","CursorMut"],"kind":"struct"},"6:6710:13458":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_fpxreg"],"kind":"struct"},"2:41547:210":{"crate_id":2,"path":["core","result","Result"],"kind":"enum"},"16:5305:15177":{"crate_id":16,"path":["gimli","constants","DwOp"],"kind":"struct"},"17:11520:18163":{"crate_id":17,"path":["object","elf","Dyn32"],"kind":"struct"},"2:47695:7630":{"crate_id":2,"path":["core","core_arch","x86","__m128d"],"kind":"struct"},"2:2317:125":{"crate_id":2,"path":["core","cmp","Eq"],"kind":"trait"},"17:10402:15576":{"crate_id":17,"path":["object","read","pe","file","PeFile"],"kind":"struct"},"1:911:2033":{"crate_id":1,"path":["std","collections","hash","map","DrainFilter"],"kind":"struct"},"17:13233:19434":{"crate_id":17,"path":["object","pe","ImageAuxSymbolCrc"],"kind":"struct"},"16:4037:14485":{"crate_id":16,"path":["gimli","constants","DwTag"],"kind":"struct"},"1:2372:2149":{"crate_id":1,"path":["std","fs","read_dir"],"kind":"function"},"17:10885:15393":{"crate_id":17,"path":["object","read","SymbolMap"],"kind":"struct"},"17:11969:18665":{"crate_id":17,"path":["object","macho","Section64"],"kind":"struct"},"16:6132:15217":{"crate_id":16,"path":["gimli","read","cfi","CallFrameInstructionIter"],"kind":"struct"},"16:5000:14968":{"crate_id":16,"path":["gimli","constants","DwLne"],"kind":"struct"},"16:7837:15285":{"crate_id":16,"path":["gimli","read","unit","DebuggingInformationEntry"],"kind":"struct"},"6:4388:12315":{"crate_id":6,"path":["libc","unix","linux_like","linux","cpu_set_t"],"kind":"struct"},"2:40043:7750":{"crate_id":2,"path":["core","char","EscapeUnicode"],"kind":"struct"},"2:2805:8102":{"crate_id":2,"path":["core","ops","bit","Not"],"kind":"trait"},"16:2668:14289":{"crate_id":16,"path":["gimli","common","RawRangeListsOffset"],"kind":"struct"},"17:13433:19453":{"crate_id":17,"path":["object","pe","ImageResourceDataEntry"],"kind":"struct"},"2:2822:8101":{"crate_id":2,"path":["core","ops","bit","BitXor"],"kind":"trait"},"2:22338:177":{"crate_id":2,"path":["core","num","nonzero","NonZeroU64"],"kind":"struct"},"6:4817:12360":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_fprog"],"kind":"struct"},"16:2378:14277":{"crate_id":16,"path":["gimli","common","DebugAbbrevOffset"],"kind":"struct"},"16:6868:33384":{"crate_id":16,"path":["gimli","read","lists","ListsHeader"],"kind":"struct"},"16:7077:15257":{"crate_id":16,"path":["gimli","read","op","DieReference"],"kind":"enum"},"2:10134:7730":{"crate_id":2,"path":["core","slice","iter","SplitInclusiveMut"],"kind":"struct"},"2:41920:90":{"crate_id":2,"path":["core","sync","atomic","AtomicU64"],"kind":"struct"},"17:13639:19466":{"crate_id":17,"path":["object","pe","ImageHotPatchHashes"],"kind":"struct"},"2:21455:29653":{"crate_id":2,"path":["core","core_simd","vector","splat","Splat"],"kind":"struct"},"2:43384:7723":{"crate_id":2,"path":["core","str","iter","RSplit"],"kind":"struct"},"16:7509:15268":{"crate_id":16,"path":["gimli","read","pubtypes","DebugPubTypes"],"kind":"struct"},"6:4780:12355":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_tp"],"kind":"struct"},"6:482:8860":{"crate_id":6,"path":["libc","unix","utimbuf"],"kind":"struct"},"1:11033:21073":{"crate_id":1,"path":["std","sys","unix","thread","cgroups","Cgroup"],"kind":"enum"},"2:8847:30331":{"crate_id":2,"path":["core","fmt","builders","PadAdapterState"],"kind":"struct"},"2:3935:2175":{"crate_id":2,"path":["core","array","Guard"],"kind":"struct"},"5:4321:245":{"crate_id":5,"path":["alloc","collections","vec_deque","VecDeque"],"kind":"struct"},"2:40277:8043":{"crate_id":2,"path":["core","iter","adapters","cloned","Cloned"],"kind":"struct"},"1:9087:2449":{"crate_id":1,"path":["std","time","SystemTimeError"],"kind":"struct"},"5:7030:30834":{"crate_id":5,"path":["alloc","collections","btree","merge_iter","Peeked"],"kind":"enum"},"1:7514:22295":{"crate_id":1,"path":["std","backtrace_rs","print","BacktraceFrameFmt"],"kind":"struct"},"2:41252:2229":{"crate_id":2,"path":["core","net","ip_addr","Ipv6Addr"],"kind":"struct"},"6:119:8542":{"crate_id":6,"path":["libc","unix","FILE"],"kind":"enum"},"2:2151:589":{"crate_id":2,"path":["core","ptr","drop_in_place"],"kind":"function"},"18:707:7736":{"crate_id":18,"path":["memchr","memmem","Searcher"],"kind":"struct"},"2:40727:8036":{"crate_id":2,"path":["core","iter","sources","repeat_with","RepeatWith"],"kind":"struct"},"17:13309:19440":{"crate_id":17,"path":["object","pe","ImageImportByName"],"kind":"struct"},"1:7703:20762":{"crate_id":1,"path":["std","error","private","Internal"],"kind":"struct"},"6:1519:9758":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr"],"kind":"struct"},"2:42722:27952":{"crate_id":2,"path":["core","hash","sip","Sip24Rounds"],"kind":"struct"},"17:9350:33958":{"crate_id":17,"path":["object","read","any","SectionRelocationIteratorInternal"],"kind":"enum"},"6:1648:9770":{"crate_id":6,"path":["libc","unix","linux_like","in6_rtmsg"],"kind":"struct"},"1:355:1998":{"crate_id":1,"path":["std","thread","scoped","Scope"],"kind":"struct"},"1:8053:2157":{"crate_id":1,"path":["std","io","readbuf","BorrowedCursor"],"kind":"struct"},"17:8598:15373":{"crate_id":17,"path":["object","common","SymbolFlags"],"kind":"enum"},"6:4962:12377":{"crate_id":6,"path":["libc","unix","linux_like","linux","dirent"],"kind":"struct"},"1:7622:1984":{"crate_id":1,"path":["std","thread","Thread"],"kind":"struct"},"5:1366:2028":{"crate_id":5,"path":["alloc","collections","btree","map","IterMut"],"kind":"struct"},"1:11906:745":{"crate_id":1,"path":["std","i8"],"kind":"primitive"},"2:9151:120":{"crate_id":2,"path":["core","fmt","Display"],"kind":"trait"},"5:3163:30826":{"crate_id":5,"path":["alloc","collections","btree","set","IntersectionInner"],"kind":"enum"},"5:1197:2042":{"crate_id":5,"path":["alloc","collections","btree","map","entry","Entry"],"kind":"enum"},"1:6236:206":{"crate_id":1,"path":["std","sync","mpmc","Receiver"],"kind":"struct"},"2:43944:7776":{"crate_id":2,"path":["core","str","pattern","StrSearcherImpl"],"kind":"enum"},"1:2346:2139":{"crate_id":1,"path":["std","fs","symlink_metadata"],"kind":"function"},"2:46221:27499":{"crate_id":2,"path":["core","core_arch","simd","m64x2"],"kind":"struct"},"6:4703:12346":{"crate_id":6,"path":["libc","unix","linux_like","linux","posix_spawnattr_t"],"kind":"struct"},"2:47581:2503":{"crate_id":2,"path":["core","core_arch","simd","i64x8"],"kind":"struct"},"2:2911:2063":{"crate_id":2,"path":["core","ops","deref","DerefMut"],"kind":"trait"},"6:1680:9773":{"crate_id":6,"path":["libc","unix","linux_like","arphdr"],"kind":"struct"},"1:4104:2285":{"crate_id":1,"path":["std","os","unix","net","ancillary","ScmCredentials"],"kind":"struct"},"1:4414:2293":{"crate_id":1,"path":["std","os","unix","process","CommandExt"],"kind":"trait"},"2:21095:2163":{"crate_id":2,"path":["core","core_simd","masks","to_bitmask","sealed","Sealed"],"kind":"trait"},"5:3534:2027":{"crate_id":5,"path":["alloc","collections","linked_list","Iter"],"kind":"struct"},"17:247:34021":{"crate_id":17,"path":["object","read","util","DebugLen"],"kind":"struct"},"6:1512:9757":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreq_source"],"kind":"struct"},"2:32032:2376":{"crate_id":2,"path":["core","convert","Infallible"],"kind":"enum"},"16:6474:15236":{"crate_id":16,"path":["gimli","read","index","DebugTuIndex"],"kind":"struct"},"16:2502:14282":{"crate_id":16,"path":["gimli","common","DebugLineOffset"],"kind":"struct"},"17:11339:18151":{"crate_id":17,"path":["object","elf","CompressionHeader32"],"kind":"struct"},"6:4878:1001":{"crate_id":6,"path":["libc","unix","linux_like","linux","option"],"kind":"struct"},"11:0:1782":{"crate_id":11,"path":["hashbrown"],"kind":"module"},"17:12178:18679":{"crate_id":17,"path":["object","macho","SymtabCommand"],"kind":"struct"},"1:4990:22984":{"crate_id":1,"path":["std","path","fmt","DebugHelper"],"kind":"struct"},"1:8988:20186":{"crate_id":1,"path":["std","sync","mpmc","select","Selected"],"kind":"enum"},"16:5571:15196":{"crate_id":16,"path":["gimli","read","cfi","DebugFrame"],"kind":"struct"},"2:20561:29649":{"crate_id":2,"path":["core","core_simd","swizzle","rotate_lanes_left","Rotate"],"kind":"struct"},"1:8736:2372":{"crate_id":1,"path":["std","process","CommandArgs"],"kind":"struct"},"1:11894:419":{"crate_id":1,"path":["std","char"],"kind":"primitive"},"2:21119:2163":{"crate_id":2,"path":["core","core_simd","masks","sealed","Sealed"],"kind":"trait"},"5:3622:30724":{"crate_id":5,"path":["alloc","collections","linked_list","drop","DropGuard"],"kind":"struct"},"2:23049:2241":{"crate_id":2,"path":["core","num","saturating","Saturating"],"kind":"struct"},"17:9772:15447":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbolTable"],"kind":"struct"},"1:4642:2293":{"crate_id":1,"path":["std","os","linux","process","CommandExt"],"kind":"trait"},"17:242:34142":{"crate_id":17,"path":["object","read","util","DebugByte"],"kind":"struct"},"9:502:14075":{"crate_id":9,"path":["miniz_oxide","StreamResult"],"kind":"struct"},"17:13612:19464":{"crate_id":17,"path":["object","pe","ImageHotPatchInfo"],"kind":"struct"},"2:2792:8097":{"crate_id":2,"path":["core","ops","arith","MulAssign"],"kind":"trait"},"2:43801:7771":{"crate_id":2,"path":["core","str","pattern","CharArraySearcher"],"kind":"struct"},"17:11924:18663":{"crate_id":17,"path":["object","macho","SegmentCommand64"],"kind":"struct"},"6:7539:12552":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_cond_t"],"kind":"struct"},"17:10377:15510":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbol"],"kind":"struct"},"2:44113:8240":{"crate_id":2,"path":["core","str","BytesIsNotEmpty"],"kind":"struct"},"1:2387:1794":{"crate_id":1,"path":["std","io"],"kind":"module"},"5:6999:2029":{"crate_id":5,"path":["alloc","collections","binary_heap","IntoIter"],"kind":"struct"},"1:8860:2412":{"crate_id":1,"path":["std","sync","mpsc","RecvTimeoutError"],"kind":"enum"},"6:494:8862":{"crate_id":6,"path":["libc","unix","timespec"],"kind":"struct"},"5:6294:30724":{"crate_id":5,"path":["alloc","vec","drain","drop","DropGuard"],"kind":"struct"},"1:1985:184":{"crate_id":1,"path":["std","ffi","os_str","OsStr"],"kind":"struct"},"1:8812:2413":{"crate_id":1,"path":["std","sync","mpsc","SendError"],"kind":"struct"},"16:7335:33289":{"crate_id":16,"path":["gimli","read","op","EvaluationWaiting"],"kind":"enum"},"1:11231:19657":{"crate_id":1,"path":["std","sys_common","wtf8","Wtf8"],"kind":"struct"},"5:2169:31803":{"crate_id":5,"path":["alloc","collections","btree","navigate","LazyLeafHandle"],"kind":"enum"},"17:12915:19414":{"crate_id":17,"path":["object","pe","ImageDataDirectory"],"kind":"struct"},"2:41403:181":{"crate_id":2,"path":["core","option","Option"],"kind":"enum"},"5:7060:30575":{"crate_id":5,"path":["alloc","collections","btree","set_val","SetValZST"],"kind":"struct"},"2:43965:7778":{"crate_id":2,"path":["core","str","pattern","TwoWaySearcher"],"kind":"struct"},"2:44089:8242":{"crate_id":2,"path":["core","str","CharEscapeDebugContinue"],"kind":"struct"},"2:40693:2014":{"crate_id":2,"path":["core","iter","sources","once","Once"],"kind":"struct"},"6:4753:12352":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_vm"],"kind":"struct"},"2:43866:7773":{"crate_id":2,"path":["core","str","pattern","CharSliceSearcher"],"kind":"struct"},"1:9380:129":{"crate_id":1,"path":["std","sys","unix","fs","File"],"kind":"struct"},"18:507:34217":{"crate_id":18,"path":["memchr","memmem","genericsimd","Forward"],"kind":"struct"},"2:30284:8085":{"crate_id":2,"path":["core","mem","transmutability","Assume"],"kind":"struct"},"1:867:2029":{"crate_id":1,"path":["std","collections","hash","map","IntoIter"],"kind":"struct"},"1:3208:2211":{"crate_id":1,"path":["std","io","stdio","Stdout"],"kind":"struct"},"18:113:19498":{"crate_id":18,"path":["memchr","memchr","iter","Memchr3"],"kind":"struct"},"9:352:14088":{"crate_id":9,"path":["miniz_oxide","inflate","TINFLStatus"],"kind":"enum"},"1:3615:2234":{"crate_id":1,"path":["std","net","socket_addr","ToSocketAddrs"],"kind":"trait"},"16:7467:15264":{"crate_id":16,"path":["gimli","read","pubnames","PubNamesEntry"],"kind":"struct"},"2:2817:8100":{"crate_id":2,"path":["core","ops","bit","BitOr"],"kind":"trait"},"2:2774:8095":{"crate_id":2,"path":["core","ops","arith","Rem"],"kind":"trait"},"11:828:2038":{"crate_id":11,"path":["hashbrown","map","RawEntryMut"],"kind":"enum"},"2:5532:8054":{"crate_id":2,"path":["core","iter","adapters","flatten","FlatMap"],"kind":"struct"},"6:4373:12313":{"crate_id":6,"path":["libc","unix","linux_like","linux","fsid_t"],"kind":"struct"},"1:8166:2236":{"crate_id":1,"path":["std","net","tcp","Incoming"],"kind":"struct"},"2:43570:7755":{"crate_id":2,"path":["core","str","iter","Matches"],"kind":"struct"},"1:7699:2112":{"crate_id":1,"path":["std","env","JoinPathsError"],"kind":"struct"},"17:12959:19416":{"crate_id":17,"path":["object","pe","ImageRomOptionalHeader"],"kind":"struct"},"1:4096:2284":{"crate_id":1,"path":["std","os","unix","net","ancillary","ScmRights"],"kind":"struct"},"1:7943:20319":{"crate_id":1,"path":["std","io","error","Custom"],"kind":"struct"},"11:2219:2025":{"crate_id":11,"path":["hashbrown","TryReserveError"],"kind":"enum"},"11:119:33034":{"crate_id":11,"path":["hashbrown","raw","RawTable"],"kind":"struct"},"6:4832:12362":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlmsghdr"],"kind":"struct"},"2:2354:189":{"crate_id":2,"path":["core","cmp","PartialOrd"],"kind":"trait"},"11:2204:33039":{"crate_id":11,"path":["hashbrown","raw","Fallibility"],"kind":"enum"},"17:11459:18159":{"crate_id":17,"path":["object","elf","Rel64"],"kind":"struct"},"11:1847:2032":{"crate_id":11,"path":["hashbrown","set","Drain"],"kind":"struct"},"2:30372:27639":{"crate_id":2,"path":["core","ptr","alignment","AlignmentEnum32"],"kind":"enum"},"2:20996:2461":{"crate_id":2,"path":["core","core_simd","lane_count","LaneCount"],"kind":"struct"},"17:9488:15429":{"crate_id":17,"path":["object","read","coff","file","CoffFile"],"kind":"struct"},"2:8254:2339":{"crate_id":2,"path":["core","panic","unwind_safe","RefUnwindSafe"],"kind":"trait"},"1:6485:2401":{"crate_id":1,"path":["std","sync","poison","TryLockError"],"kind":"enum"},"17:11422:18156":{"crate_id":17,"path":["object","elf","Syminfo64"],"kind":"struct"},"18:660:19514":{"crate_id":18,"path":["memchr","memmem","FindIter"],"kind":"struct"},"2:11676:2358":{"crate_id":2,"path":["core","str","traits","FromStr"],"kind":"trait"},"17:13721:19473":{"crate_id":17,"path":["object","pe","ImageEnclaveConfig64"],"kind":"struct"},"17:12894:19412":{"crate_id":17,"path":["object","pe","MaskedRichHeaderEntry"],"kind":"struct"},"16:5724:15205":{"crate_id":16,"path":["gimli","read","cfi","CfiEntriesIter"],"kind":"struct"},"2:22470:170":{"crate_id":2,"path":["core","num","nonzero","NonZeroI16"],"kind":"struct"},"1:1572:2033":{"crate_id":1,"path":["std","collections","hash","set","DrainFilter"],"kind":"struct"},"1:5334:2364":{"crate_id":1,"path":["std","process","ChildStdin"],"kind":"struct"},"6:7563:12556":{"crate_id":6,"path":["libc","unix","linux_like","linux","can_frame"],"kind":"struct"},"5:1242:2045":{"crate_id":5,"path":["alloc","collections","btree","map","entry","OccupiedError"],"kind":"struct"},"5:880:2027":{"crate_id":5,"path":["alloc","collections","binary_heap","Iter"],"kind":"struct"},"1:2832:20674":{"crate_id":1,"path":["std","io","error","repr_bitpacked","Repr"],"kind":"struct"},"2:2839:8105":{"crate_id":2,"path":["core","ops","bit","BitAndAssign"],"kind":"trait"},"1:2215:2135":{"crate_id":1,"path":["std","fs","read_to_string"],"kind":"function"},"6:5954:13038":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ntptimeval"],"kind":"struct"},"17:11946:18664":{"crate_id":17,"path":["object","macho","Section32"],"kind":"struct"},"2:41590:2027":{"crate_id":2,"path":["core","result","Iter"],"kind":"struct"},"1:8292:2270":{"crate_id":1,"path":["std","os","fd","owned","BorrowedFd"],"kind":"struct"},"1:638:2008":{"crate_id":1,"path":["std","backtrace","BacktraceSymbol"],"kind":"struct"},"2:9161:194":{"crate_id":2,"path":["core","fmt","Pointer"],"kind":"trait"},"2:46875:2485":{"crate_id":2,"path":["core","core_arch","simd","i8x64"],"kind":"struct"},"17:10761:15388":{"crate_id":17,"path":["object","read","FileKind"],"kind":"enum"},"2:8360:7734":{"crate_id":2,"path":["core","panicking","assert_matches_failed","Pattern"],"kind":"struct"},"16:535:33428":{"crate_id":16,"path":["gimli","read","cfi","RegisterRuleMap"],"kind":"struct"},"2:40679:8032":{"crate_id":2,"path":["core","iter","sources","from_fn","FromFn"],"kind":"struct"},"2:45999:2501":{"crate_id":2,"path":["core","core_arch","simd","i64x2"],"kind":"struct"},"2:43193:7704":{"crate_id":2,"path":["core","slice","iter","ArrayWindows"],"kind":"struct"},"2:1821:2070":{"crate_id":2,"path":["core","ptr","non_null","NonNull"],"kind":"struct"},"17:8548:15371":{"crate_id":17,"path":["object","common","SegmentFlags"],"kind":"enum"},"17:11721:18654":{"crate_id":17,"path":["object","macho","DyldCacheHeader"],"kind":"struct"},"2:44300:195":{"crate_id":2,"path":["core","task","poll","Poll"],"kind":"enum"},"6:4290:12307":{"crate_id":6,"path":["libc","unix","linux_like","linux","glob_t"],"kind":"struct"},"1:11899:1367":{"crate_id":1,"path":["std","slice"],"kind":"primitive"},"6:5766:13025":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","statx_timestamp"],"kind":"struct"},"2:40066:7862":{"crate_id":2,"path":["core","char","EscapeDebugInner"],"kind":"enum"},"17:13698:19472":{"crate_id":17,"path":["object","pe","ImageEnclaveConfig32"],"kind":"struct"},"17:9265:15384":{"crate_id":17,"path":["object","read","any","SymbolIterator"],"kind":"struct"},"17:11037:15399":{"crate_id":17,"path":["object","read","RelocationTarget"],"kind":"enum"},"17:420:14248":{"crate_id":17,"path":["object","read","any","Section"],"kind":"struct"},"2:42667:7894":{"crate_id":2,"path":["core","hash","sip","SipHasher13"],"kind":"struct"},"17:10897:15394":{"crate_id":17,"path":["object","read","SymbolMapName"],"kind":"struct"},"6:4853:12365":{"crate_id":6,"path":["libc","unix","linux_like","linux","file_clone_range"],"kind":"struct"},"17:3266:15529":{"crate_id":17,"path":["object","read","macho","relocation","MachORelocationIterator"],"kind":"struct"},"16:5811:15208":{"crate_id":16,"path":["gimli","read","cfi","CommonInformationEntry"],"kind":"struct"},"16:6146:194":{"crate_id":16,"path":["gimli","read","cfi","Pointer"],"kind":"enum"},"10:0:1781":{"crate_id":10,"path":["adler"],"kind":"module"},"5:3088:95":{"crate_id":5,"path":["alloc","collections","btree","set","BTreeSet"],"kind":"struct"},"16:7103:15258":{"crate_id":16,"path":["gimli","read","op","Operation"],"kind":"enum"},"17:10747:128":{"crate_id":17,"path":["object","read","Error"],"kind":"struct"},"17:12126:18676":{"crate_id":17,"path":["object","macho","ThreadCommand"],"kind":"struct"},"6:4542:12333":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_ff_erase"],"kind":"struct"},"16:7411:15261":{"crate_id":16,"path":["gimli","read","op","Expression"],"kind":"struct"},"17:11234:18146":{"crate_id":17,"path":["object","elf","FileHeader32"],"kind":"struct"},"6:7557:12555":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_barrier_t"],"kind":"struct"},"2:47684:7629":{"crate_id":2,"path":["core","core_arch","x86","__m128"],"kind":"struct"},"17:13324:19442":{"crate_id":17,"path":["object","pe","ImageThunkData32"],"kind":"struct"},"16:5998:15215":{"crate_id":16,"path":["gimli","read","cfi","CfaRule"],"kind":"enum"},"17:2933:15506":{"crate_id":17,"path":["object","read","macho","section","MachOSectionIterator"],"kind":"struct"},"16:6327:15226":{"crate_id":16,"path":["gimli","read","abbrev","Abbreviations"],"kind":"struct"},"17:9188:34062":{"crate_id":17,"path":["object","read","any","ComdatSectionIteratorInternal"],"kind":"enum"},"2:21964:2246":{"crate_id":2,"path":["core","num","error","TryFromIntError"],"kind":"struct"},"1:10937:22307":{"crate_id":1,"path":["std","sys","unix","process","process_inner","do_exec","Reset"],"kind":"struct"},"17:9498:15428":{"crate_id":17,"path":["object","read","coff","section","SectionTable"],"kind":"struct"},"2:46537:2484":{"crate_id":2,"path":["core","core_arch","simd","i8x32"],"kind":"struct"},"2:20891:8124":{"crate_id":2,"path":["core","core_simd","elements","mut_ptr","SimdMutPtr","from_exposed_addr"],"kind":"foreign_type"},"2:2741:1917":{"crate_id":2,"path":["core","marker","Unpin"],"kind":"trait"},"17:12592:18706":{"crate_id":17,"path":["object","macho","Nlist32"],"kind":"struct"},"2:40408:8059":{"crate_id":2,"path":["core","iter","adapters","rev","Rev"],"kind":"struct"},"16:6943:15254":{"crate_id":16,"path":["gimli","read","loclists","RawLocListEntry"],"kind":"enum"},"2:21866:28169":{"crate_id":2,"path":["core","num","diy_float","Fp"],"kind":"struct"},"1:947:2039":{"crate_id":1,"path":["std","collections","hash","map","RawOccupiedEntryMut"],"kind":"struct"},"17:10491:15560":{"crate_id":17,"path":["object","read","pe","section","PeSection"],"kind":"struct"},"1:6586:217":{"crate_id":1,"path":["std","sync","rwlock","RwLock"],"kind":"struct"},"2:47535:2552":{"crate_id":2,"path":["core","core_arch","simd","f32x16"],"kind":"struct"},"2:43162:7715":{"crate_id":2,"path":["core","slice","iter","ChunksMut"],"kind":"struct"},"1:6538:2405":{"crate_id":1,"path":["std","sync","remutex","ReentrantMutex"],"kind":"struct"},"16:6022:15216":{"crate_id":16,"path":["gimli","read","cfi","RegisterRule"],"kind":"enum"},"16:3300:14306":{"crate_id":16,"path":["gimli","arch","LoongArch"],"kind":"struct"},"5:6695:244":{"crate_id":5,"path":["alloc","vec","Vec"],"kind":"struct"},"18:531:19525":{"crate_id":18,"path":["memchr","memmem","prefilter","PrefilterState"],"kind":"struct"},"2:43416:7758":{"crate_id":2,"path":["core","str","iter","SplitTerminator"],"kind":"struct"},"18:96:19497":{"crate_id":18,"path":["memchr","memchr","iter","Memchr2"],"kind":"struct"},"2:10014:2190":{"crate_id":2,"path":["core","slice","iter","Split"],"kind":"struct"},"2:32072:8158":{"crate_id":2,"path":["core","error","Source"],"kind":"struct"},"16:5655:15201":{"crate_id":16,"path":["gimli","read","cfi","EhFrame"],"kind":"struct"},"6:1499:9755":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreq"],"kind":"struct"},"5:7255:7780":{"crate_id":5,"path":["alloc","string","FromUtf8Error"],"kind":"struct"},"2:4765:389":{"crate_id":2,"path":["core","ffi","c_void"],"kind":"enum"},"6:526:8865":{"crate_id":6,"path":["libc","unix","ipv6_mreq"],"kind":"struct"},"17:11502:18162":{"crate_id":17,"path":["object","elf","ProgramHeader64"],"kind":"struct"},"18:599:34229":{"crate_id":18,"path":["memchr","memmem","twoway","Shift"],"kind":"enum"},"11:1859:2048":{"crate_id":11,"path":["hashbrown","set","Intersection"],"kind":"struct"},"6:7294:13840":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","align","sem_t"],"kind":"struct"},"1:10232:20650":{"crate_id":1,"path":["std","sys","unix","process","process_common","Argv"],"kind":"struct"},"2:45708:2555":{"crate_id":2,"path":["core","core_arch","simd","f64x1"],"kind":"struct"},"2:10169:7723":{"crate_id":2,"path":["core","slice","iter","RSplit"],"kind":"struct"},"6:4488:12327":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_ramp_effect"],"kind":"struct"},"17:9512:15424":{"crate_id":17,"path":["object","read","coff","section","CoffSegmentIterator"],"kind":"struct"},"1:930:2037":{"crate_id":1,"path":["std","collections","hash","map","RawEntryBuilderMut"],"kind":"struct"},"17:9148:34186":{"crate_id":17,"path":["object","read","any","ComdatIteratorInternal"],"kind":"enum"},"2:40085:7864":{"crate_id":2,"path":["core","char","ToUppercase"],"kind":"struct"},"1:901:2032":{"crate_id":1,"path":["std","collections","hash","map","Drain"],"kind":"struct"},"1:11912:1496":{"crate_id":1,"path":["std","u16"],"kind":"primitive"},"16:7029:33502":{"crate_id":16,"path":["gimli","read","lookup","LookupEntryIter"],"kind":"struct"},"17:10569:15559":{"crate_id":17,"path":["object","read","pe","import","ImportTable"],"kind":"struct"},"2:40305:8051":{"crate_id":2,"path":["core","iter","adapters","enumerate","Enumerate"],"kind":"struct"},"17:10026:15544":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCacheImageIterator"],"kind":"struct"},"17:11653:18173":{"crate_id":17,"path":["object","elf","GnuHashHeader"],"kind":"struct"},"16:5386:14242":{"crate_id":16,"path":["gimli","endianity","LittleEndian"],"kind":"struct"},"6:6135:12224":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","sysinfo"],"kind":"struct"},"16:8109:15291":{"crate_id":16,"path":["gimli","read","unit","EntriesTree"],"kind":"struct"},"2:41598:2028":{"crate_id":2,"path":["core","result","IterMut"],"kind":"struct"},"17:11011:15347":{"crate_id":17,"path":["object","read","CodeView"],"kind":"struct"},"2:20782:8124":{"crate_id":2,"path":["core","core_simd","elements","const_ptr","SimdConstPtr","from_exposed_addr"],"kind":"foreign_type"},"1:3995:2262":{"crate_id":1,"path":["std","os","unix","fs","DirBuilderExt"],"kind":"trait"},"1:1062:2043":{"crate_id":1,"path":["std","collections","hash","map","OccupiedEntry"],"kind":"struct"},"11:452:142":{"crate_id":11,"path":["hashbrown","map","HashMap"],"kind":"struct"},"2:2963:7664":{"crate_id":2,"path":["core","ops","generator","Generator"],"kind":"trait"},"2:46120:27596":{"crate_id":2,"path":["core","core_arch","simd","m8x16"],"kind":"struct"},"5:3276:2033":{"crate_id":5,"path":["alloc","collections","btree","set","DrainFilter"],"kind":"struct"},"11:821:2037":{"crate_id":11,"path":["hashbrown","map","RawEntryBuilderMut"],"kind":"struct"},"5:3975:2032":{"crate_id":5,"path":["alloc","collections","vec_deque","drain","Drain"],"kind":"struct"},"2:41840:89":{"crate_id":2,"path":["core","sync","atomic","AtomicU32"],"kind":"struct"},"17:9596:15425":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbol"],"kind":"struct"},"17:11163:15607":{"crate_id":17,"path":["object","archive","AixHeader"],"kind":"struct"},"5:7266:7781":{"crate_id":5,"path":["alloc","string","FromUtf16Error"],"kind":"struct"},"17:9228:33917":{"crate_id":17,"path":["object","read","any","SymbolTableInternal"],"kind":"enum"},"2:21128:2464":{"crate_id":2,"path":["core","core_simd","masks","Mask"],"kind":"struct"},"6:4445:12321":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_keymap_entry"],"kind":"struct"},"1:11078:19716":{"crate_id":1,"path":["std","sys","unix","time","Timespec"],"kind":"struct"},"2:22371:174":{"crate_id":2,"path":["core","num","nonzero","NonZeroU128"],"kind":"struct"},"16:6293:15223":{"crate_id":16,"path":["gimli","read","reader","ReaderOffsetId"],"kind":"struct"},"2:42442:28159":{"crate_id":2,"path":["core","fmt","rt","Flag"],"kind":"enum"},"16:6336:15227":{"crate_id":16,"path":["gimli","read","abbrev","Abbreviation"],"kind":"struct"},"2:42714:27953":{"crate_id":2,"path":["core","hash","sip","Sip13Rounds"],"kind":"struct"},"2:30278:7798":{"crate_id":2,"path":["core","mem","maybe_uninit","MaybeUninit"],"kind":"union"},"2:43245:7719":{"crate_id":2,"path":["core","slice","iter","RChunks"],"kind":"struct"},"18:755:19520":{"crate_id":18,"path":["memchr","memmem","SearcherRev"],"kind":"struct"},"2:9374:145":{"crate_id":2,"path":["core","hash","Hasher"],"kind":"trait"},"2:20881:2467":{"crate_id":2,"path":["core","core_simd","elements","mut_ptr","SimdMutPtr"],"kind":"trait"},"1:9009:20324":{"crate_id":1,"path":["std","sync","mpmc","utils","CachePadded"],"kind":"struct"},"17:9068:33815":{"crate_id":17,"path":["object","read","any","SegmentInternal"],"kind":"enum"},"2:47832:7639":{"crate_id":2,"path":["core","core_arch","x86","__m512bh"],"kind":"struct"},"2:2926:1919":{"crate_id":2,"path":["core","ops","function","Fn"],"kind":"trait"},"2:40385:8046":{"crate_id":2,"path":["core","iter","adapters","map_while","MapWhile"],"kind":"struct"},"16:7588:15273":{"crate_id":16,"path":["gimli","read","rnglists","RawRngListIter"],"kind":"struct"},"1:11060:2167":{"crate_id":1,"path":["std","sys","unix","time","SystemTime"],"kind":"struct"},"2:47081:2519":{"crate_id":2,"path":["core","core_arch","simd","u8x64"],"kind":"struct"},"1:4845:2318":{"crate_id":1,"path":["std","os","net","linux_ext","addr","SocketAddrExt"],"kind":"trait"},"2:10248:7727":{"crate_id":2,"path":["core","slice","iter","SplitN"],"kind":"struct"},"1:4737:2273":{"crate_id":1,"path":["std","os","fd","owned","OwnedFd"],"kind":"struct"},"17:12607:18707":{"crate_id":17,"path":["object","macho","Nlist64"],"kind":"struct"},"6:6687:9882":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statvfs64"],"kind":"struct"},"2:44140:122":{"crate_id":2,"path":["core","time","Duration"],"kind":"struct"},"2:41479:2029":{"crate_id":2,"path":["core","option","IntoIter"],"kind":"struct"},"2:44373:7652":{"crate_id":2,"path":["core","alloc","layout","LayoutError"],"kind":"struct"},"1:8966:20287":{"crate_id":1,"path":["std","sync","mpmc","select","Token"],"kind":"struct"},"2:0:497":{"crate_id":2,"path":["core"],"kind":"module"},"1:3939:2257":{"crate_id":1,"path":["std","os","unix","fs","MetadataExt"],"kind":"trait"},"17:11069:15401":{"crate_id":17,"path":["object","read","CompressionFormat"],"kind":"enum"},"2:2245:98":{"crate_id":2,"path":["core","borrow","BorrowMut"],"kind":"trait"},"17:11573:18167":{"crate_id":17,"path":["object","elf","Verdaux"],"kind":"struct"},"16:7042:33381":{"crate_id":16,"path":["gimli","read","lookup","PubStuffHeader"],"kind":"struct"},"16:7529:15270":{"crate_id":16,"path":["gimli","read","rnglists","DebugRanges"],"kind":"struct"},"1:5370:2366":{"crate_id":1,"path":["std","process","ChildStderr"],"kind":"struct"},"1:1568:2032":{"crate_id":1,"path":["std","collections","hash","set","Drain"],"kind":"struct"},"6:4367:12312":{"crate_id":6,"path":["libc","unix","linux_like","linux","itimerspec"],"kind":"struct"},"2:2691:1916":{"crate_id":2,"path":["core","marker","Sized"],"kind":"trait"},"16:2694:14290":{"crate_id":16,"path":["gimli","common","RangeListsOffset"],"kind":"struct"},"1:11843:21039":{"crate_id":1,"path":["std","backtrace_rs","symbolize","gimli","parse_running_mmaps","MapsEntry"],"kind":"struct"},"6:1716:9777":{"crate_id":6,"path":["libc","unix","linux_like","utsname"],"kind":"struct"},"2:9163:7676":{"crate_id":2,"path":["core","fmt","LowerExp"],"kind":"trait"},"15:180:14221":{"crate_id":15,"path":["addr2line","LocationRangeIter"],"kind":"struct"},"1:8240:2236":{"crate_id":1,"path":["std","os","unix","net","listener","Incoming"],"kind":"struct"},"16:0:1786":{"crate_id":16,"path":["gimli"],"kind":"module"},"2:39087:7827":{"crate_id":2,"path":["core","ops","control_flow","ControlFlow"],"kind":"enum"},"1:857:2028":{"crate_id":1,"path":["std","collections","hash","map","IterMut"],"kind":"struct"},"2:40468:2188":{"crate_id":2,"path":["core","iter","adapters","take","Take"],"kind":"struct"},"6:4637:12341":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Phdr"],"kind":"struct"},"17:10670:15587":{"crate_id":17,"path":["object","read","pe","resource","ResourceDirectory"],"kind":"struct"},"17:11299:18149":{"crate_id":17,"path":["object","elf","SectionHeader32"],"kind":"struct"},"2:39353:7815":{"crate_id":2,"path":["core","any","TypeId"],"kind":"struct"},"2:2684:220":{"crate_id":2,"path":["core","marker","Send"],"kind":"trait"},"17:1787:15446":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbolIterator"],"kind":"struct"},"5:6248:2032":{"crate_id":5,"path":["alloc","vec","drain","Drain"],"kind":"struct"},"1:953:2040":{"crate_id":1,"path":["std","collections","hash","map","RawVacantEntryMut"],"kind":"struct"},"2:22437:173":{"crate_id":2,"path":["core","num","nonzero","NonZeroI8"],"kind":"struct"},"16:7498:15267":{"crate_id":16,"path":["gimli","read","pubtypes","PubTypesEntry"],"kind":"struct"},"17:487:15361":{"crate_id":17,"path":["object","read","any","Comdat"],"kind":"struct"},"2:5590:8045":{"crate_id":2,"path":["core","iter","adapters","flatten","Flatten"],"kind":"struct"},"1:10320:2372":{"crate_id":1,"path":["std","sys","unix","process","process_common","CommandArgs"],"kind":"struct"},"17:13791:19477":{"crate_id":17,"path":["object","pe","ImageDebugMisc"],"kind":"struct"},"17:11434:18157":{"crate_id":17,"path":["object","elf","Rel32"],"kind":"struct"},"1:3449:20141":{"crate_id":1,"path":["std","io","Write","write_fmt","Adapter"],"kind":"struct"},"2:21100:2460":{"crate_id":2,"path":["core","core_simd","masks","to_bitmask","ToBitMask"],"kind":"trait"},"16:7757:15282":{"crate_id":16,"path":["gimli","read","unit","DebugInfoUnitHeadersIter"],"kind":"struct"},"17:12576:18705":{"crate_id":17,"path":["object","macho","NoteCommand"],"kind":"struct"},"18:564:19527":{"crate_id":18,"path":["memchr","memmem","rarebytes","RareNeedleBytes"],"kind":"struct"},"5:783:2052":{"crate_id":5,"path":["alloc","collections","binary_heap","PeekMut"],"kind":"struct"},"6:4482:12326":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_constant_effect"],"kind":"struct"},"1:7852:21675":{"crate_id":1,"path":["std","io","buffered","linewritershim","LineWriterShim"],"kind":"struct"},"17:8858:15377":{"crate_id":17,"path":["object","endian","I64Bytes"],"kind":"struct"},"18:574:34217":{"crate_id":18,"path":["memchr","memmem","twoway","Forward"],"kind":"struct"},"6:7249:8820":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","not_x32","statvfs"],"kind":"struct"},"5:3150:2050":{"crate_id":5,"path":["alloc","collections","btree","set","SymmetricDifference"],"kind":"struct"},"16:6460:15235":{"crate_id":16,"path":["gimli","read","index","DebugCuIndex"],"kind":"struct"},"6:4739:12350":{"crate_id":6,"path":["libc","unix","linux_like","linux","inotify_event"],"kind":"struct"},"2:43324:7748":{"crate_id":2,"path":["core","str","error","ParseBoolError"],"kind":"struct"},"15:219:14226":{"crate_id":15,"path":["addr2line","RangeAttributes"],"kind":"struct"},"2:12506:107":{"crate_id":2,"path":["core","task","wake","Context"],"kind":"struct"},"1:7533:22305":{"crate_id":1,"path":["std","backtrace_rs","Bomb"],"kind":"struct"},"16:4904:14944":{"crate_id":16,"path":["gimli","constants","DwIdx"],"kind":"struct"},"18:515:19524":{"crate_id":18,"path":["memchr","memmem","prefilter","PrefilterFn"],"kind":"struct"},"11:2192:33042":{"crate_id":11,"path":["hashbrown","raw","sse2","Group"],"kind":"struct"},"11:305:33030":{"crate_id":11,"path":["hashbrown","raw","RawIter"],"kind":"struct"},"1:6842:22301":{"crate_id":1,"path":["std","sys","common","thread_local","abort_on_dtor_unwind","DtorUnwindGuard"],"kind":"struct"},"2:32068:20762":{"crate_id":2,"path":["core","error","private","Internal"],"kind":"struct"},"2:2701:228":{"crate_id":2,"path":["core","marker","Sync"],"kind":"trait"},"1:11467:22995":{"crate_id":1,"path":["std","panicking","panic_count","MustAbort"],"kind":"enum"},"2:40078:7863":{"crate_id":2,"path":["core","char","ToLowercase"],"kind":"struct"},"18:590:28349":{"crate_id":18,"path":["memchr","memmem","twoway","TwoWay"],"kind":"struct"},"1:9387:2155":{"crate_id":1,"path":["std","sys","unix","fs","ReadDir"],"kind":"struct"},"1:11898:312":{"crate_id":1,"path":["std","array"],"kind":"primitive"},"6:6564:8910":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","sigaction"],"kind":"struct"},"2:2603:128":{"crate_id":2,"path":["core","error","Error"],"kind":"trait"},"1:5556:206":{"crate_id":1,"path":["std","sync","mpsc","Receiver"],"kind":"struct"},"1:6085:2598":{"crate_id":1,"path":["std","sync","mpmc","waker","Waker"],"kind":"struct"},"11:1144:2045":{"crate_id":11,"path":["hashbrown","map","OccupiedError"],"kind":"struct"},"2:40417:8060":{"crate_id":2,"path":["core","iter","adapters","scan","Scan"],"kind":"struct"},"17:12403:18693":{"crate_id":17,"path":["object","macho","EncryptionInfoCommand64"],"kind":"struct"},"2:5991:8066":{"crate_id":2,"path":["core","iter","adapters","intersperse","IntersperseWith"],"kind":"struct"},"6:6670:9884":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statfs64"],"kind":"struct"},"2:20576:29649":{"crate_id":2,"path":["core","core_simd","swizzle","rotate_lanes_right","Rotate"],"kind":"struct"},"17:12033:18669":{"crate_id":17,"path":["object","macho","DylibCommand"],"kind":"struct"},"17:10649:15596":{"crate_id":17,"path":["object","read","pe","relocation","RelocationIterator"],"kind":"struct"},"2:41680:91":{"crate_id":2,"path":["core","sync","atomic","AtomicU8"],"kind":"struct"},"17:10465:15562":{"crate_id":17,"path":["object","read","pe","section","PeSegment"],"kind":"struct"},"2:40059:7749":{"crate_id":2,"path":["core","char","EscapeDebug"],"kind":"struct"},"16:6201:15219":{"crate_id":16,"path":["gimli","read","dwarf","DwarfPackage"],"kind":"struct"},"2:9366:141":{"crate_id":2,"path":["core","hash","Hash"],"kind":"trait"},"2:40235:7702":{"crate_id":2,"path":["core","iter","adapters","array_chunks","ArrayChunks"],"kind":"struct"},"1:2211:2134":{"crate_id":1,"path":["std","fs","read"],"kind":"function"},"6:4605:12338":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Sym"],"kind":"struct"},"11:326:33025":{"crate_id":11,"path":["hashbrown","raw","RawIntoIter"],"kind":"struct"},"1:6009:22297":{"crate_id":1,"path":["std","sync","mpmc","list","Channel"],"kind":"struct"},"1:11904:642":{"crate_id":1,"path":["std","f32"],"kind":"primitive"},"2:42000:92":{"crate_id":2,"path":["core","sync","atomic","AtomicUsize"],"kind":"struct"},"11:783:14190":{"crate_id":11,"path":["hashbrown","map","ConsumeAllOnDrop"],"kind":"struct"},"16:6535:33377":{"crate_id":16,"path":["gimli","read","lazy","imp","LazyArc"],"kind":"struct"},"17:9469:15414":{"crate_id":17,"path":["object","read","archive","ArchiveMember"],"kind":"struct"},"16:2786:14294":{"crate_id":16,"path":["gimli","common","DebugStrOffsetsBase"],"kind":"struct"},"2:42412:68":{"crate_id":2,"path":["core","fmt","rt","Alignment"],"kind":"enum"},"2:43516:7753":{"crate_id":2,"path":["core","str","iter","MatchIndices"],"kind":"struct"},"6:5792:13027":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__exit_status"],"kind":"struct"},"2:47619:2537":{"crate_id":2,"path":["core","core_arch","simd","u64x8"],"kind":"struct"},"2:39314:2019":{"crate_id":2,"path":["core","ops","range","Bound"],"kind":"enum"},"17:13101:19408":{"crate_id":17,"path":["object","pe","ImageSectionHeader"],"kind":"struct"},"16:6321:15225":{"crate_id":16,"path":["gimli","read","abbrev","AbbreviationsCache"],"kind":"struct"},"17:13399:19449":{"crate_id":17,"path":["object","pe","ImageResourceDirectory"],"kind":"struct"},"2:39964:2003":{"crate_id":2,"path":["core","ascii","EscapeDefault"],"kind":"struct"},"17:9566:15384":{"crate_id":17,"path":["object","read","coff","symbol","SymbolIterator"],"kind":"struct"},"11:359:33027":{"crate_id":11,"path":["hashbrown","raw","RawDrain"],"kind":"struct"},"2:40717:8035":{"crate_id":2,"path":["core","iter","sources","repeat_n","RepeatN"],"kind":"struct"},"6:7585:12558":{"crate_id":6,"path":["libc","unix","linux_like","linux","canxl_frame"],"kind":"struct"},"2:4437:7843":{"crate_id":2,"path":["core","cell","SyncUnsafeCell"],"kind":"struct"},"1:4508:2311":{"crate_id":1,"path":["std","os","unix","thread","JoinHandleExt"],"kind":"trait"},"6:568:8871":{"crate_id":6,"path":["libc","unix","sigval"],"kind":"struct"},"2:10262:7725":{"crate_id":2,"path":["core","slice","iter","RSplitN"],"kind":"struct"},"16:6164:33294":{"crate_id":16,"path":["gimli","read","cfi","PointerEncodingParameters"],"kind":"struct"},"1:8393:2352":{"crate_id":1,"path":["std","path","State"],"kind":"enum"},"16:6919:33435":{"crate_id":16,"path":["gimli","read","loclists","LocListsFormat"],"kind":"enum"},"1:6133:20283":{"crate_id":1,"path":["std","sync","mpmc","zero","ZeroToken"],"kind":"struct"},"1:8974:15258":{"crate_id":1,"path":["std","sync","mpmc","select","Operation"],"kind":"struct"},"1:1924:2124":{"crate_id":1,"path":["std","error","Indented"],"kind":"struct"},"17:10635:15586":{"crate_id":17,"path":["object","read","pe","relocation","RelocationBlockIterator"],"kind":"struct"},"17:8823:15376":{"crate_id":17,"path":["object","endian","I32Bytes"],"kind":"struct"},"17:8667:14240":{"crate_id":17,"path":["object","endian","BigEndian"],"kind":"struct"},"17:9748:15383":{"crate_id":17,"path":["object","read","elf","symbol","SymbolTable"],"kind":"struct"},"17:10527:15592":{"crate_id":17,"path":["object","read","pe","export","ExportTarget"],"kind":"enum"},"17:13812:19479":{"crate_id":17,"path":["object","pe","ImageFunctionEntry64"],"kind":"struct"},"2:39374:28373":{"crate_id":2,"path":["core","any","tags","MaybeSizedValue"],"kind":"struct"},"17:11410:18155":{"crate_id":17,"path":["object","elf","Syminfo32"],"kind":"struct"},"18:671:19515":{"crate_id":18,"path":["memchr","memmem","FindRevIter"],"kind":"struct"},"6:4412:12317":{"crate_id":6,"path":["libc","unix","linux_like","linux","sembuf"],"kind":"struct"}},"external_crates":{"17":{"name":"object","html_root_url":"https://doc.rust-lang.org/nightly/"},"14":{"name":"rustc_demangle","html_root_url":"https://doc.rust-lang.org/nightly/"},"11":{"name":"hashbrown","html_root_url":"https://doc.rust-lang.org/nightly/"},"8":{"name":"cfg_if","html_root_url":"https://docs.rs/cfg-if/"},"5":{"name":"alloc","html_root_url":"https://doc.rust-lang.org/nightly/"},"2":{"name":"core","html_root_url":"https://doc.rust-lang.org/nightly/"},"19":{"name":"panic_unwind","html_root_url":"https://doc.rust-lang.org/nightly/"},"16":{"name":"gimli","html_root_url":"https://doc.rust-lang.org/nightly/"},"13":{"name":"std_detect","html_root_url":"https://doc.rust-lang.org/nightly/"},"10":{"name":"adler","html_root_url":"https://docs.rs/adler/1.0.2/"},"7":{"name":"unwind","html_root_url":"https://doc.rust-lang.org/nightly/"},"4":{"name":"rustc_std_workspace_core","html_root_url":"https://doc.rust-lang.org/nightly/"},"1":{"name":"std","html_root_url":"https://doc.rust-lang.org/nightly/"},"18":{"name":"memchr","html_root_url":"https://doc.rust-lang.org/nightly/"},"15":{"name":"addr2line","html_root_url":"https://doc.rust-lang.org/nightly/"},"12":{"name":"rustc_std_workspace_alloc","html_root_url":"https://doc.rust-lang.org/nightly/"},"9":{"name":"miniz_oxide","html_root_url":"https://doc.rust-lang.org/nightly/"},"6":{"name":"libc","html_root_url":"https://doc.rust-lang.org/nightly/"},"3":{"name":"compiler_builtins","html_root_url":"https://doc.rust-lang.org/nightly/"}},"format_version":26}