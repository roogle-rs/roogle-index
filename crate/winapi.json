{"root":"0:0:1637","crate_version":"0.3.9","includes_private":false,"index":{"2:11893:30514":{"id":"2:11893:30514","crate_id":2,"name":"rsplit_once","span":null,"visibility":"public","docs":"Splits the string on the last occurrence of the specified delimiter and\nreturns prefix before delimiter and suffix after delimiter.\n\n# Examples\n\n```\nassert_eq!(\"cfg\".rsplit_once('='), None);\nassert_eq!(\"cfg=foo\".rsplit_once('='), Some((\"cfg\", \"foo\")));\nassert_eq!(\"cfg=foo=bar\".rsplit_once('='), Some((\"cfg=foo\", \"bar\")));\n```","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["delimiter",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:48734:178","args":{"angle_bracketed":{"args":[{"type":{"kind":"tuple","inner":[{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}},{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11526:7640","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"2:11526:7640","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11541:7641","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11834:22962":{"id":"2:11834:22962","crate_id":2,"name":"get_mut","span":null,"visibility":"public","docs":"Returns a mutable subslice of `str`.\n\nThis is the non-panicking alternative to indexing the `str`. Returns\n[`None`] whenever equivalent indexing operation would panic.\n\n# Examples\n\n```\nlet mut v = String::from(\"hello\");\n// correct length\nassert!(v.get_mut(0..5).is_some());\n// out of bounds\nassert!(v.get_mut(..42).is_none());\nassert_eq!(Some(\"he\"), v.get_mut(0..2).map(|v| &*v));\n\nassert_eq!(\"hello\", v);\n{\n    let s = v.get_mut(0..2);\n    let s = s.map(|s| {\n        s.make_ascii_uppercase();\n        &*s\n    });\n    assert_eq!(Some(\"HE\"), s);\n}\nassert_eq!(\"HEllo\", v);\n```","links":{"`None`":"2:48736:176"},"attrs":["#[rustc_const_unstable(feature = \"const_slice_index\", issue = \"none\")]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["i",{"kind":"generic","inner":"I"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:48734:178","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"qualified_path","inner":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"I"},"trait":{"name":"SliceIndex","id":"2:9702:219","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}}}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"2:9702:219","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"5:5303:31184":{"id":"5:5303:31184","crate_id":5,"name":"into_string","span":null,"visibility":"public","docs":"Converts a [`Box<str>`] into a [`String`] without copying or allocating.\n\n# Examples\n\nBasic usage:\n\n```\nlet string = String::from(\"birthday gift\");\nlet boxed_str = string.clone().into_boxed_str();\n\nassert_eq!(boxed_str.into_string(), string);\n```","links":{"`Box<str>`":"5:288:1882","`String`":"5:7158:221"},"attrs":["#[must_use = \"`self` will be dropped if the result is not used\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"resolved_path","inner":{"name":"Box","id":"5:288:1882","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}},{"type":{"kind":"resolved_path","inner":{"name":"Global","id":"5:6909:2042","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:7158:221","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11825:30506":{"id":"2:11825:30506","crate_id":2,"name":"ceil_char_boundary","span":null,"visibility":"public","docs":"Finds the closest `x` not below `index` where `is_char_boundary(x)` is `true`.\n\nThis method is the natural complement to [`floor_char_boundary`]. See that method\nfor more details.\n\n[`floor_char_boundary`]: str::floor_char_boundary\n\n# Panics\n\nPanics if `index > self.len()`.\n\n# Examples\n\n```\n#![feature(round_char_boundary)]\nlet s = \"❤️🧡💛💚💙💜\";\nassert_eq!(s.len(), 26);\nassert!(!s.is_char_boundary(13));\n\nlet closest = s.ceil_char_boundary(13);\nassert_eq!(closest, 14);\nassert_eq!(&s[..closest], \"❤️🧡💛\");\n```","links":{"str::floor_char_boundary":"2:11823:30505"},"attrs":["#[unstable(feature = \"round_char_boundary\", issue = \"93743\")]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["index",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"primitive","inner":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11830:310":{"id":"2:11830:310","crate_id":2,"name":"as_ptr","span":null,"visibility":"public","docs":"Converts a string slice to a raw pointer.\n\nAs string slices are a slice of bytes, the raw pointer points to a\n[`u8`]. This pointer will be pointing to the first byte of the string\nslice.\n\nThe caller must ensure that the returned pointer is never written to.\nIf you need to mutate the contents of the string slice, use [`as_mut_ptr`].\n\n[`as_mut_ptr`]: str::as_mut_ptr\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"Hello\";\nlet ptr = s.as_ptr();\n```","links":{"str::as_mut_ptr":"2:11831:22965","`u8`":"1:11860:1464"},"attrs":["#[must_use]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"raw_pointer","inner":{"mutable":false,"type":{"kind":"primitive","inner":"u8"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11843:22988":{"id":"2:11843:22988","crate_id":2,"name":"split_at_mut","span":null,"visibility":"public","docs":"Divide one mutable string slice into two at an index.\n\nThe argument, `mid`, should be a byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get immutable string slices instead, see the [`split_at`] method.\n\n[`split_at`]: str::split_at\n\n# Panics\n\nPanics if `mid` is not on a UTF-8 code point boundary, or if it is\npast the end of the last code point of the string slice.\n\n# Examples\n\nBasic usage:\n\n```\nlet mut s = \"Per Martin-Löf\".to_string();\n{\n    let (first, last) = s.split_at_mut(3);\n    first.make_ascii_uppercase();\n    assert_eq!(\"PER\", first);\n    assert_eq!(\" Martin-Löf\", last);\n}\nassert_eq!(\"PER Martin-Löf\", s);\n```","links":{"str::split_at":"2:11842:22987"},"attrs":["#[must_use]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["mid",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"tuple","inner":[{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"primitive","inner":"str"}}},{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"primitive","inner":"str"}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11905:30517":{"id":"2:11905:30517","crate_id":2,"name":"rmatch_indices","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within `self`,\nyielded in reverse order along with the index of the match.\n\nFor matches of `pat` within `self` that overlap, only the indices\ncorresponding to the last match are returned.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`match_indices`] method can be used.\n\n[`match_indices`]: str::match_indices\n\n# Examples\n\nBasic usage:\n\n```\nlet v: Vec<_> = \"abcXXXabcYYYabc\".rmatch_indices(\"abc\").collect();\nassert_eq!(v, [(12, \"abc\"), (6, \"abc\"), (0, \"abc\")]);\n\nlet v: Vec<_> = \"1abcabc2\".rmatch_indices(\"abc\").collect();\nassert_eq!(v, [(4, \"abc\"), (1, \"abc\")]);\n\nlet v: Vec<_> = \"ababa\".rmatch_indices(\"aba\").collect();\nassert_eq!(v, [(2, \"aba\")]); // only the last `aba`\n```","links":{"self::pattern":"2:11521:7644","`DoubleEndedIterator`":"2:7125:120","prim@char":"1:11843:410","str::match_indices":"2:11902:30516"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"RMatchIndices","id":"2:50894:7660","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11526:7640","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"2:11526:7640","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11541:7641","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11846:20270":{"id":"2:11846:20270","crate_id":2,"name":"bytes","span":null,"visibility":"public","docs":"An iterator over the bytes of a string slice.\n\nAs a string slice consists of a sequence of bytes, we can iterate\nthrough a string slice by byte. This method returns such an iterator.\n\n# Examples\n\nBasic usage:\n\n```\nlet mut bytes = \"bors\".bytes();\n\nassert_eq!(Some(b'b'), bytes.next());\nassert_eq!(Some(b'o'), bytes.next());\nassert_eq!(Some(b'r'), bytes.next());\nassert_eq!(Some(b's'), bytes.next());\n\nassert_eq!(None, bytes.next());\n```","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Bytes","id":"2:50712:2142","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11872:22996":{"id":"2:11872:22996","crate_id":2,"name":"split_inclusive","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by\ncharacters matched by a pattern. Differs from the iterator produced by\n`split` in that `split_inclusive` leaves the matched part as the\nterminator of the substring.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\\nlittle lamb\\nlittle lamb.\"\n    .split_inclusive('\\n').collect();\nassert_eq!(v, [\"Mary had a little lamb\\n\", \"little lamb\\n\", \"little lamb.\"]);\n```\n\nIf the last element of the string is matched,\nthat element will be considered the terminator of the preceding substring.\nThat substring will be the last item returned by the iterator.\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\\nlittle lamb\\nlittle lamb.\\n\"\n    .split_inclusive('\\n').collect();\nassert_eq!(v, [\"Mary had a little lamb\\n\", \"little lamb\\n\", \"little lamb.\\n\"]);\n```","links":{"prim@char":"1:11843:410","self::pattern":"2:11521:7644"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"SplitInclusive","id":"2:11345:7633","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11526:7640","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11912:30520":{"id":"2:11912:30520","crate_id":2,"name":"trim_end","span":null,"visibility":"public","docs":"Returns a string slice with trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Text directionality\n\nA string is a sequence of bytes. `end` in this context means the last\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be right side, and for right-to-left languages like\nArabic or Hebrew, this will be the left side.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\nassert_eq!(\"\\n Hello\\tworld\", s.trim_end());\n```\n\nDirectionality:\n\n```\nlet s = \"  English  \";\nassert!(Some('h') == s.trim_end().chars().rev().next());\n\nlet s = \"  עברית  \";\nassert!(Some('ת') == s.trim_end().chars().rev().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_trim_end\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11849:20929":{"id":"2:11849:20929","crate_id":2,"name":"lines","span":null,"visibility":"public","docs":"An iterator over the lines of a string, as string slices.\n\nLines are split at line endings that are either newlines (`\\n`) or\nsequences of a carriage return followed by a line feed (`\\r\\n`).\n\nLine terminators are not included in the lines returned by the iterator.\n\nThe final line ending is optional. A string that ends with a final line\nending will return the same lines as an otherwise identical string\nwithout a final line ending.\n\n# Examples\n\nBasic usage:\n\n```\nlet text = \"foo\\r\\nbar\\n\\nbaz\\n\";\nlet mut lines = text.lines();\n\nassert_eq!(Some(\"foo\"), lines.next());\nassert_eq!(Some(\"bar\"), lines.next());\nassert_eq!(Some(\"\"), lines.next());\nassert_eq!(Some(\"baz\"), lines.next());\n\nassert_eq!(None, lines.next());\n```\n\nThe final line ending isn't required:\n\n```\nlet text = \"foo\\nbar\\n\\r\\nbaz\";\nlet mut lines = text.lines();\n\nassert_eq!(Some(\"foo\"), lines.next());\nassert_eq!(Some(\"bar\"), lines.next());\nassert_eq!(Some(\"\"), lines.next());\nassert_eq!(Some(\"baz\"), lines.next());\n\nassert_eq!(None, lines.next());\n```","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Lines","id":"2:50980:2145","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11942:22844":{"id":"2:11942:22844","crate_id":2,"name":"make_ascii_lowercase","span":null,"visibility":"public","docs":"Converts this string to its ASCII lower case equivalent in-place.\n\nASCII letters 'A' to 'Z' are mapped to 'a' to 'z',\nbut non-ASCII letters are unchanged.\n\nTo return a new lowercased value without modifying the existing one, use\n[`to_ascii_lowercase()`].\n\n[`to_ascii_lowercase()`]: #method.to_ascii_lowercase\n\n# Examples\n\n```\nlet mut s = String::from(\"GRÜßE, JÜRGEN ❤\");\n\ns.make_ascii_lowercase();\n\nassert_eq!(\"grÜße, jÜrgen ❤\", s);\n```","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11946:30530":{"id":"2:11946:30530","crate_id":2,"name":"escape_unicode","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_unicode`].\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"❤\\n!\".escape_unicode() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"❤\\n!\".escape_unicode());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"\\\\u{{2764}}\\\\u{{a}}\\\\u{{21}}\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"❤\\n!\".escape_unicode().to_string(), \"\\\\u{2764}\\\\u{a}\\\\u{21}\");\n```","links":{"`char::escape_unicode`":"2:4498:30530"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"EscapeUnicode","id":"2:51043:7656","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11875:22998":{"id":"2:11875:22998","crate_id":2,"name":"rsplit","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by\ncharacters matched by a pattern and yielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`split`] method can be used.\n\n[`split`]: str::split\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".rsplit(' ').collect();\nassert_eq!(v, [\"lamb\", \"little\", \"a\", \"had\", \"Mary\"]);\n\nlet v: Vec<&str> = \"\".rsplit('X').collect();\nassert_eq!(v, [\"\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".rsplit('X').collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"\", \"lion\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".rsplit(\"::\").collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"lion\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".rsplit(|c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"ghi\", \"def\", \"abc\"]);\n```","links":{"self::pattern":"2:11521:7644","`DoubleEndedIterator`":"2:7125:120","prim@char":"1:11843:410","str::split":"2:11869:20928"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"RSplit","id":"2:50744:7627","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11526:7640","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"2:11526:7640","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11541:7641","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11881:30512":{"id":"2:11881:30512","crate_id":2,"name":"rsplit_terminator","span":null,"visibility":"public","docs":"An iterator over substrings of `self`, separated by characters\nmatched by a pattern and yielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\nEquivalent to [`split`], except that the trailing substring is\nskipped if empty.\n\n[`split`]: str::split\n\nThis method can be used for string data that is _terminated_,\nrather than _separated_ by a pattern.\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a\nreverse search, and it will be double ended if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`split_terminator`] method can be\nused.\n\n[`split_terminator`]: str::split_terminator\n\n# Examples\n\n```\nlet v: Vec<&str> = \"A.B.\".rsplit_terminator('.').collect();\nassert_eq!(v, [\"B\", \"A\"]);\n\nlet v: Vec<&str> = \"A..B..\".rsplit_terminator(\".\").collect();\nassert_eq!(v, [\"\", \"B\", \"\", \"A\"]);\n\nlet v: Vec<&str> = \"A.B:C.D\".rsplit_terminator(&['.', ':'][..]).collect();\nassert_eq!(v, [\"D\", \"C\", \"B\", \"A\"]);\n```","links":{"self::pattern":"2:11521:7644","str::split":"2:11869:20928","prim@char":"1:11843:410","str::split_terminator":"2:11878:30511"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"RSplitTerminator","id":"2:50794:7663","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11526:7640","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"2:11526:7640","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11541:7641","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11887:23002":{"id":"2:11887:23002","crate_id":2,"name":"rsplitn","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by a\npattern, starting from the end of the string, restricted to returning\nat most `n` items.\n\nIf `n` substrings are returned, the last substring (the `n`th substring)\nwill contain the remainder of the string.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will not be double ended, because it is not\nefficient to support.\n\nFor splitting from the front, the [`splitn`] method can be used.\n\n[`splitn`]: str::splitn\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".rsplitn(3, ' ').collect();\nassert_eq!(v, [\"lamb\", \"little\", \"Mary had a\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".rsplitn(3, 'X').collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"lionX\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".rsplitn(2, \"::\").collect();\nassert_eq!(v, [\"leopard\", \"lion::tiger\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".rsplitn(2, |c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"ghi\", \"abc1def\"]);\n```","links":{"prim@char":"1:11843:410","str::splitn":"2:11884:23000","self::pattern":"2:11521:7644"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["n",{"kind":"primitive","inner":"usize"}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"RSplitN","id":"2:50848:7629","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11526:7640","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"2:11526:7640","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11541:7641","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"5:5291:31181":{"id":"5:5291:31181","crate_id":5,"name":"replacen","span":null,"visibility":"public","docs":"Replaces first N matches of a pattern with another string.\n\n`replacen` creates a new [`String`], and copies the data from this string slice into it.\nWhile doing so, it attempts to find matches of a pattern. If it finds any, it\nreplaces them with the replacement string slice at most `count` times.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"foo foo 123 foo\";\nassert_eq!(\"new new 123 foo\", s.replacen(\"foo\", \"new\", 2));\nassert_eq!(\"faa fao 123 foo\", s.replacen('o', \"a\", 3));\nassert_eq!(\"foo foo new23 foo\", s.replacen(char::is_numeric, \"new\", 1));\n```\n\nWhen the pattern doesn't match:\n\n```\nlet s = \"this is old\";\nassert_eq!(s, s.replacen(\"cookie monster\", \"little lamb\", 10));\n```","links":{"`String`":"5:7158:221"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the replaced string as a new allocation, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}],["to",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}],["count",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:7158:221","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11526:7640","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11940:22849":{"id":"2:11940:22849","crate_id":2,"name":"eq_ignore_ascii_case","span":null,"visibility":"public","docs":"Checks that two strings are an ASCII case-insensitive match.\n\nSame as `to_ascii_lowercase(a) == to_ascii_lowercase(b)`,\nbut without allocating and copying temporaries.\n\n# Examples\n\n```\nassert!(\"Ferris\".eq_ignore_ascii_case(\"FERRIS\"));\nassert!(\"Ferrös\".eq_ignore_ascii_case(\"FERRöS\"));\nassert!(!\"Ferrös\".eq_ignore_ascii_case(\"FERRÖS\"));\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["other",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:0:1637":{"id":"0:0:1637","crate_id":0,"name":"winapi","span":{"filename":"src/lib.rs","begin":[6,0],"end":[71,1]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"module","inner":{"is_crate":true,"items":[],"is_stripped":false}},"2:11865:19203":{"id":"2:11865:19203","crate_id":2,"name":"rfind","span":null,"visibility":"public","docs":"Returns the byte index for the first character of the last match of the pattern in\nthis string slice.\n\nReturns [`None`] if the pattern doesn't match.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nlet s = \"Löwe 老虎 Léopard Gepardi\";\n\nassert_eq!(s.rfind('L'), Some(13));\nassert_eq!(s.rfind('é'), Some(14));\nassert_eq!(s.rfind(\"pard\"), Some(24));\n```\n\nMore complex patterns with closures:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\n\nassert_eq!(s.rfind(char::is_whitespace), Some(12));\nassert_eq!(s.rfind(char::is_lowercase), Some(20));\n```\n\nNot finding the pattern:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\nlet x: &[_] = &['1', '2'];\n\nassert_eq!(s.rfind(x), None);\n```","links":{"`None`":"2:48736:176","prim@char":"1:11843:410","self::pattern":"2:11521:7644"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:48734:178","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11526:7640","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"2:11526:7640","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11541:7641","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11919:30524":{"id":"2:11919:30524","crate_id":2,"name":"trim_start_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. `start` in this context means the first\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be left side, and for right-to-left languages like\nArabic or Hebrew, this will be the right side.\n\n# Examples\n\nBasic usage:\n\n```\nassert_eq!(\"11foo1bar11\".trim_start_matches('1'), \"foo1bar11\");\nassert_eq!(\"123foo1bar123\".trim_start_matches(char::is_numeric), \"foo1bar123\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_start_matches(x), \"foo1bar12\");\n```","links":{"prim@char":"1:11843:410","self::pattern":"2:11521:7644"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11526:7640","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11844:27910":{"id":"2:11844:27910","crate_id":2,"name":"chars","span":null,"visibility":"public","docs":"Returns an iterator over the [`char`]s of a string slice.\n\nAs a string slice consists of valid UTF-8, we can iterate through a\nstring slice by [`char`]. This method returns such an iterator.\n\nIt's important to remember that [`char`] represents a Unicode Scalar\nValue, and might not match your idea of what a 'character' is. Iteration\nover grapheme clusters may be what you actually want. This functionality\nis not provided by Rust's standard library, check crates.io instead.\n\n# Examples\n\nBasic usage:\n\n```\nlet word = \"goodbye\";\n\nlet count = word.chars().count();\nassert_eq!(7, count);\n\nlet mut chars = word.chars();\n\nassert_eq!(Some('g'), chars.next());\nassert_eq!(Some('o'), chars.next());\nassert_eq!(Some('o'), chars.next());\nassert_eq!(Some('d'), chars.next());\nassert_eq!(Some('b'), chars.next());\nassert_eq!(Some('y'), chars.next());\nassert_eq!(Some('e'), chars.next());\n\nassert_eq!(None, chars.next());\n```\n\nRemember, [`char`]s might not match your intuition about characters:\n\n[`char`]: prim@char\n\n```\nlet y = \"y̆\";\n\nlet mut chars = y.chars();\n\nassert_eq!(Some('y'), chars.next()); // not 'y̆'\nassert_eq!(Some('\\u{0306}'), chars.next());\n\nassert_eq!(None, chars.next());\n```","links":{"prim@char":"1:11843:410"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Chars","id":"2:50696:7651","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11890:30513":{"id":"2:11890:30513","crate_id":2,"name":"split_once","span":null,"visibility":"public","docs":"Splits the string on the first occurrence of the specified delimiter and\nreturns prefix before delimiter and suffix after delimiter.\n\n# Examples\n\n```\nassert_eq!(\"cfg\".split_once('='), None);\nassert_eq!(\"cfg=\".split_once('='), Some((\"cfg\", \"\")));\nassert_eq!(\"cfg=foo\".split_once('='), Some((\"cfg\", \"foo\")));\nassert_eq!(\"cfg=foo=bar\".split_once('='), Some((\"cfg\", \"foo=bar\")));\n```","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["delimiter",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:48734:178","args":{"angle_bracketed":{"args":[{"type":{"kind":"tuple","inner":[{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}},{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11526:7640","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11836:22963":{"id":"2:11836:22963","crate_id":2,"name":"get_unchecked","span":null,"visibility":"public","docs":"Returns an unchecked subslice of `str`.\n\nThis is the unchecked alternative to indexing the `str`.\n\n# Safety\n\nCallers of this function are responsible that these preconditions are\nsatisfied:\n\n* The starting index must not exceed the ending index;\n* Indexes must be within bounds of the original slice;\n* Indexes must lie on UTF-8 sequence boundaries.\n\nFailing that, the returned string slice may reference invalid memory or\nviolate the invariants communicated by the `str` type.\n\n# Examples\n\n```\nlet v = \"🗻∈🌏\";\nunsafe {\n    assert_eq!(\"🗻\", v.get_unchecked(0..4));\n    assert_eq!(\"∈\", v.get_unchecked(4..7));\n    assert_eq!(\"🌏\", v.get_unchecked(7..11));\n}\n```","links":{},"attrs":["#[rustc_const_unstable(feature = \"const_slice_index\", issue = \"none\")]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["i",{"kind":"generic","inner":"I"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"qualified_path","inner":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"I"},"trait":{"name":"SliceIndex","id":"2:9702:219","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}}}}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"2:9702:219","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}},"5:5305:22847":{"id":"5:5305:22847","crate_id":5,"name":"to_ascii_uppercase","span":null,"visibility":"public","docs":"Returns a copy of this string where each character is mapped to its\nASCII upper case equivalent.\n\nASCII letters 'a' to 'z' are mapped to 'A' to 'Z',\nbut non-ASCII letters are unchanged.\n\nTo uppercase the value in-place, use [`make_ascii_uppercase`].\n\nTo uppercase ASCII characters in addition to non-ASCII characters, use\n[`to_uppercase`].\n\n# Examples\n\n```\nlet s = \"Grüße, Jürgen ❤\";\n\nassert_eq!(\"GRüßE, JüRGEN ❤\", s.to_ascii_uppercase());\n```\n\n[`make_ascii_uppercase`]: str::make_ascii_uppercase\n[`to_uppercase`]: #method.to_uppercase","links":{"str::make_ascii_uppercase":"2:11941:22845"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use = \"to uppercase the value in-place, use `make_ascii_uppercase()`\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:7158:221","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11831:22965":{"id":"2:11831:22965","crate_id":2,"name":"as_mut_ptr","span":null,"visibility":"public","docs":"Converts a mutable string slice to a raw pointer.\n\nAs string slices are a slice of bytes, the raw pointer points to a\n[`u8`]. This pointer will be pointing to the first byte of the string\nslice.\n\nIt is your responsibility to make sure that the string slice only gets\nmodified in a way that it remains valid UTF-8.","links":{"`u8`":"1:11860:1464"},"attrs":["#[must_use]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"raw_pointer","inner":{"mutable":true,"type":{"kind":"primitive","inner":"u8"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11922:20306":{"id":"2:11922:20306","crate_id":2,"name":"strip_prefix","span":null,"visibility":"public","docs":"Returns a string slice with the prefix removed.\n\nIf the string starts with the pattern `prefix`, returns substring after the prefix, wrapped\nin `Some`.  Unlike `trim_start_matches`, this method removes the prefix exactly once.\n\nIf the string does not start with `prefix`, returns `None`.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nassert_eq!(\"foo:bar\".strip_prefix(\"foo:\"), Some(\"bar\"));\nassert_eq!(\"foo:bar\".strip_prefix(\"bar\"), None);\nassert_eq!(\"foofoo\".strip_prefix(\"foo\"), Some(\"foo\"));\n```","links":{"prim@char":"1:11843:410","self::pattern":"2:11521:7644"},"attrs":["#[must_use =\n\"this returns the remaining substring as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["prefix",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:48734:178","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11526:7640","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11820:797":{"id":"2:11820:797","crate_id":2,"name":"len","span":null,"visibility":"public","docs":"Returns the length of `self`.\n\nThis length is in bytes, not [`char`]s or graphemes. In other words,\nit might not be what a human considers the length of the string.\n\n[`char`]: prim@char\n\n# Examples\n\nBasic usage:\n\n```\nlet len = \"foo\".len();\nassert_eq!(3, len);\n\nassert_eq!(\"ƒoo\".len(), 4); // fancy f!\nassert_eq!(\"ƒoo\".chars().count(), 3);\n```","links":{"prim@char":"1:11843:410"},"attrs":["#[must_use]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11884:23000":{"id":"2:11884:23000","crate_id":2,"name":"splitn","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by a\npattern, restricted to returning at most `n` items.\n\nIf `n` substrings are returned, the last substring (the `n`th substring)\nwill contain the remainder of the string.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will not be double ended, because it is\nnot efficient to support.\n\nIf the pattern allows a reverse search, the [`rsplitn`] method can be\nused.\n\n[`rsplitn`]: str::rsplitn\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lambda\".splitn(3, ' ').collect();\nassert_eq!(v, [\"Mary\", \"had\", \"a little lambda\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".splitn(3, \"X\").collect();\nassert_eq!(v, [\"lion\", \"\", \"tigerXleopard\"]);\n\nlet v: Vec<&str> = \"abcXdef\".splitn(1, 'X').collect();\nassert_eq!(v, [\"abcXdef\"]);\n\nlet v: Vec<&str> = \"\".splitn(1, 'X').collect();\nassert_eq!(v, [\"\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".splitn(2, |c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"abc\", \"defXghi\"]);\n```","links":{"prim@char":"1:11843:410","self::pattern":"2:11521:7644","str::rsplitn":"2:11887:23002"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["n",{"kind":"primitive","inner":"usize"}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"SplitN","id":"2:50830:7631","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11526:7640","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11840:30508":{"id":"2:11840:30508","crate_id":2,"name":"slice_unchecked","span":null,"visibility":"public","docs":"Creates a string slice from another string slice, bypassing safety\nchecks.\n\nThis is generally not recommended, use with caution! For a safe\nalternative see [`str`] and [`Index`].\n\n[`Index`]: crate::ops::Index\n\nThis new slice goes from `begin` to `end`, including `begin` but\nexcluding `end`.\n\nTo get a mutable string slice instead, see the\n[`slice_mut_unchecked`] method.\n\n[`slice_mut_unchecked`]: str::slice_mut_unchecked\n\n# Safety\n\nCallers of this function are responsible that three preconditions are\nsatisfied:\n\n* `begin` must not exceed `end`.\n* `begin` and `end` must be byte positions within the string slice.\n* `begin` and `end` must lie on UTF-8 sequence boundaries.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\n\nunsafe {\n    assert_eq!(\"Löwe 老虎 Léopard\", s.slice_unchecked(0, 21));\n}\n\nlet s = \"Hello, world!\";\n\nunsafe {\n    assert_eq!(\"world\", s.slice_unchecked(7, 12));\n}\n```","links":{"`str`":"1:11849:1368","str::slice_mut_unchecked":"2:11841:30509","crate::ops::Index":"2:2991:2038"},"attrs":["#[deprecated(since = \"1.29.0\", note =\n\"use `get_unchecked(begin..end)` instead\")]","#[must_use]"],"deprecation":{"since":"1.29.0","note":"use `get_unchecked(begin..end)` instead"},"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["begin",{"kind":"primitive","inner":"usize"}],["end",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}},"2:11896:1851":{"id":"2:11896:1851","crate_id":2,"name":"matches","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within the given string\nslice.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rmatches`] method can be used.\n\n[`rmatches`]: str::matches\n\n# Examples\n\nBasic usage:\n\n```\nlet v: Vec<&str> = \"abcXXXabcYYYabc\".matches(\"abc\").collect();\nassert_eq!(v, [\"abc\", \"abc\", \"abc\"]);\n\nlet v: Vec<&str> = \"1abc2abc3\".matches(char::is_numeric).collect();\nassert_eq!(v, [\"1\", \"2\", \"3\"]);\n```","links":{"self::pattern":"2:11521:7644","`DoubleEndedIterator`":"2:7125:120","prim@char":"1:11843:410","str::matches":"2:11896:1851"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Matches","id":"2:50930:7661","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11526:7640","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11852:23004":{"id":"2:11852:23004","crate_id":2,"name":"contains","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a sub-slice of\nthis string slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nBasic usage:\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.contains(\"nana\"));\nassert!(!bananas.contains(\"apples\"));\n```","links":{"prim@char":"1:11843:410","self::pattern":"2:11521:7644"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11526:7640","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11847:27912":{"id":"2:11847:27912","crate_id":2,"name":"split_whitespace","span":null,"visibility":"public","docs":"Splits a string slice by whitespace.\n\nThe iterator returned will return string slices that are sub-slices of\nthe original string slice, separated by any amount of whitespace.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`. If you only want to split on ASCII whitespace\ninstead, use [`split_ascii_whitespace`].\n\n[`split_ascii_whitespace`]: str::split_ascii_whitespace\n\n# Examples\n\nBasic usage:\n\n```\nlet mut iter = \"A few words\".split_whitespace();\n\nassert_eq!(Some(\"A\"), iter.next());\nassert_eq!(Some(\"few\"), iter.next());\nassert_eq!(Some(\"words\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nAll kinds of whitespace are considered:\n\n```\nlet mut iter = \" Mary   had\\ta\\u{2009}little  \\n\\t lamb\".split_whitespace();\nassert_eq!(Some(\"Mary\"), iter.next());\nassert_eq!(Some(\"had\"), iter.next());\nassert_eq!(Some(\"a\"), iter.next());\nassert_eq!(Some(\"little\"), iter.next());\nassert_eq!(Some(\"lamb\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nIf the string is empty or all whitespace, the iterator yields no string slices:\n```\nassert_eq!(\"\".split_whitespace().next(), None);\nassert_eq!(\"   \".split_whitespace().next(), None);\n```","links":{"str::split_ascii_whitespace":"2:11848:27926"},"attrs":["#[must_use =\n\"this returns the split string as an iterator, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_split_whitespace\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"SplitWhitespace","id":"2:51000:7647","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11869:20928":{"id":"2:11869:20928","crate_id":2,"name":"split","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by\ncharacters matched by a pattern.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rsplit`] method can be used.\n\n[`rsplit`]: str::rsplit\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".split(' ').collect();\nassert_eq!(v, [\"Mary\", \"had\", \"a\", \"little\", \"lamb\"]);\n\nlet v: Vec<&str> = \"\".split('X').collect();\nassert_eq!(v, [\"\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".split('X').collect();\nassert_eq!(v, [\"lion\", \"\", \"tiger\", \"leopard\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".split(\"::\").collect();\nassert_eq!(v, [\"lion\", \"tiger\", \"leopard\"]);\n\nlet v: Vec<&str> = \"abc1def2ghi\".split(char::is_numeric).collect();\nassert_eq!(v, [\"abc\", \"def\", \"ghi\"]);\n\nlet v: Vec<&str> = \"lionXtigerXleopard\".split(char::is_uppercase).collect();\nassert_eq!(v, [\"lion\", \"tiger\", \"leopard\"]);\n```\n\nIf the pattern is a slice of chars, split on each occurrence of any of the characters:\n\n```\nlet v: Vec<&str> = \"2020-11-03 23:59\".split(&['-', ' ', ':', '@'][..]).collect();\nassert_eq!(v, [\"2020\", \"11\", \"03\", \"23\", \"59\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".split(|c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"abc\", \"def\", \"ghi\"]);\n```\n\nIf a string contains multiple contiguous separators, you will end up\nwith empty strings in the output:\n\n```\nlet x = \"||||a||b|c\".to_string();\nlet d: Vec<_> = x.split('|').collect();\n\nassert_eq!(d, &[\"\", \"\", \"\", \"\", \"a\", \"\", \"b\", \"c\"]);\n```\n\nContiguous separators are separated by the empty string.\n\n```\nlet x = \"(///)\".to_string();\nlet d: Vec<_> = x.split('/').collect();\n\nassert_eq!(d, &[\"(\", \"\", \"\", \")\"]);\n```\n\nSeparators at the start or end of a string are neighbored\nby empty strings.\n\n```\nlet d: Vec<_> = \"010\".split(\"0\").collect();\nassert_eq!(d, &[\"\", \"1\", \"\"]);\n```\n\nWhen the empty string is used as a separator, it separates\nevery character in the string, along with the beginning\nand end of the string.\n\n```\nlet f: Vec<_> = \"rust\".split(\"\").collect();\nassert_eq!(f, &[\"\", \"r\", \"u\", \"s\", \"t\", \"\"]);\n```\n\nContiguous separators can lead to possibly surprising behavior\nwhen whitespace is used as the separator. This code is correct:\n\n```\nlet x = \"    a  b c\".to_string();\nlet d: Vec<_> = x.split(' ').collect();\n\nassert_eq!(d, &[\"\", \"\", \"\", \"\", \"a\", \"\", \"b\", \"c\"]);\n```\n\nIt does _not_ give you:\n\n```,ignore\nassert_eq!(d, &[\"a\", \"b\", \"c\"]);\n```\n\nUse [`split_whitespace`] for this behavior.\n\n[`split_whitespace`]: str::split_whitespace","links":{"self::pattern":"2:11521:7644","`DoubleEndedIterator`":"2:7125:120","prim@char":"1:11843:410","str::split_whitespace":"2:11847:27912","str::rsplit":"2:11875:22998"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Split","id":"2:50726:2144","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11526:7640","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11937:30528":{"id":"2:11937:30528","crate_id":2,"name":"parse","span":null,"visibility":"public","docs":"Parses this string slice into another type.\n\nBecause `parse` is so general, it can cause problems with type\ninference. As such, `parse` is one of the few times you'll see\nthe syntax affectionately known as the 'turbofish': `::<>`. This\nhelps the inference algorithm understand specifically which type\nyou're trying to parse into.\n\n`parse` can parse into any type that implements the [`FromStr`] trait.\n\n# Errors\n\nWill return [`Err`] if it's not possible to parse this string slice into\nthe desired type.\n\n[`Err`]: FromStr::Err\n\n# Examples\n\nBasic usage\n\n```\nlet four: u32 = \"4\".parse().unwrap();\n\nassert_eq!(4, four);\n```\n\nUsing the 'turbofish' instead of annotating `four`:\n\n```\nlet four = \"4\".parse::<u32>();\n\nassert_eq!(Ok(4), four);\n```\n\nFailing to parse:\n\n```\nlet nope = \"j\".parse::<u32>();\n\nassert!(nope.is_err());\n```","links":{"FromStr::Err":"2:11483:126","`FromStr`":"2:11482:2318"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Result","id":"2:48878:207","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"F"}},{"type":{"kind":"qualified_path","inner":{"name":"Err","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"F"},"trait":{"name":"FromStr","id":"2:11482:2318","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"F"},"bounds":[{"trait_bound":{"trait":{"name":"FromStr","id":"2:11482:2318","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11861:19202":{"id":"2:11861:19202","crate_id":2,"name":"find","span":null,"visibility":"public","docs":"Returns the byte index of the first character of this string slice that\nmatches the pattern.\n\nReturns [`None`] if the pattern doesn't match.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nlet s = \"Löwe 老虎 Léopard Gepardi\";\n\nassert_eq!(s.find('L'), Some(0));\nassert_eq!(s.find('é'), Some(14));\nassert_eq!(s.find(\"pard\"), Some(17));\n```\n\nMore complex patterns using point-free style and closures:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\n\nassert_eq!(s.find(char::is_whitespace), Some(5));\nassert_eq!(s.find(char::is_lowercase), Some(1));\nassert_eq!(s.find(|c: char| c.is_whitespace() || c.is_lowercase()), Some(1));\nassert_eq!(s.find(|c: char| (c < 'o') && (c > 'a')), Some(4));\n```\n\nNot finding the pattern:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\nlet x: &[_] = &['1', '2'];\n\nassert_eq!(s.find(x), None);\n```","links":{"`None`":"2:48736:176","prim@char":"1:11843:410","self::pattern":"2:11521:7644"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:48734:178","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11526:7640","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11829:30507":{"id":"2:11829:30507","crate_id":2,"name":"as_bytes_mut","span":null,"visibility":"public","docs":"Converts a mutable string slice to a mutable byte slice.\n\n# Safety\n\nThe caller must ensure that the content of the slice is valid UTF-8\nbefore the borrow ends and the underlying `str` is used.\n\nUse of a `str` whose contents are not valid UTF-8 is undefined behavior.\n\n# Examples\n\nBasic usage:\n\n```\nlet mut s = String::from(\"Hello\");\nlet bytes = unsafe { s.as_bytes_mut() };\n\nassert_eq!(b\"Hello\", bytes);\n```\n\nMutability:\n\n```\nlet mut s = String::from(\"🗻∈🌏\");\n\nunsafe {\n    let bytes = s.as_bytes_mut();\n\n    bytes[0] = 0xF0;\n    bytes[1] = 0x9F;\n    bytes[2] = 0x8D;\n    bytes[3] = 0x94;\n}\n\nassert_eq!(\"🍔∈🌏\", s);\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"slice","inner":{"kind":"primitive","inner":"u8"}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}},"2:11851:27911":{"id":"2:11851:27911","crate_id":2,"name":"encode_utf16","span":null,"visibility":"public","docs":"Returns an iterator of `u16` over the string encoded as UTF-16.\n\n# Examples\n\nBasic usage:\n\n```\nlet text = \"Zażółć gęślą jaźń\";\n\nlet utf8_len = text.len();\nlet utf16_len = text.encode_utf16().count();\n\nassert!(utf16_len <= utf8_len);\n```","links":{},"attrs":["#[must_use =\n\"this returns the encoded string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"EncodeUtf16","id":"2:51018:7645","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11931:30526":{"id":"2:11931:30526","crate_id":2,"name":"trim_left_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. 'Left' in this context means the first\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _right_ side, not the left.\n\n# Examples\n\nBasic usage:\n\n```\nassert_eq!(\"11foo1bar11\".trim_left_matches('1'), \"foo1bar11\");\nassert_eq!(\"123foo1bar123\".trim_left_matches(char::is_numeric), \"foo1bar123\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_left_matches(x), \"foo1bar12\");\n```","links":{"prim@char":"1:11843:410","self::pattern":"2:11521:7644"},"attrs":["#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_start_matches`\",\nsuggestion = \"trim_start_matches\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_start_matches`"},"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11526:7640","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11945:1961":{"id":"2:11945:1961","crate_id":2,"name":"escape_default","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_default`].\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"❤\\n!\".escape_default() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"❤\\n!\".escape_default());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"\\\\u{{2764}}\\\\n!\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"❤\\n!\".escape_default().to_string(), \"\\\\u{2764}\\\\n!\");\n```","links":{"`char::escape_default`":"2:4501:1961"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"EscapeDefault","id":"2:51034:1962","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11828:26747":{"id":"2:11828:26747","crate_id":2,"name":"as_bytes","span":null,"visibility":"public","docs":"Converts a string slice to a byte slice. To convert the byte slice back\ninto a string slice, use the [`from_utf8`] function.\n\n# Examples\n\nBasic usage:\n\n```\nlet bytes = \"bors\".as_bytes();\nassert_eq!(b\"bors\", bytes);\n```","links":{"`from_utf8`":"2:11089:7648"},"attrs":["#[must_use]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"slice","inner":{"kind":"primitive","inner":"u8"}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11821:22842":{"id":"2:11821:22842","crate_id":2,"name":"is_empty","span":null,"visibility":"public","docs":"Returns `true` if `self` has a length of zero bytes.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\";\nassert!(s.is_empty());\n\nlet s = \"not empty\";\nassert!(!s.is_empty());\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11943:30529":{"id":"2:11943:30529","crate_id":2,"name":"escape_debug","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_debug`].\n\nNote: only extended grapheme codepoints that begin the string will be\nescaped.\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"❤\\n!\".escape_debug() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"❤\\n!\".escape_debug());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"❤\\\\n!\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"❤\\n!\".escape_debug().to_string(), \"❤\\\\n!\");\n```","links":{"`char::escape_debug`":"2:4500:30529"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"EscapeDebug","id":"2:51025:7655","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11934:30527":{"id":"2:11934:30527","crate_id":2,"name":"trim_right_matches","span":null,"visibility":"public","docs":"Returns a string slice with all suffixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. 'Right' in this context means the last\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _left_ side, not the right.\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_right_matches('1'), \"11foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_right_matches(char::is_numeric), \"123foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_right_matches(x), \"12foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1fooX\".trim_right_matches(|c| c == '1' || c == 'X'), \"1foo\");\n```","links":{"prim@char":"1:11843:410","self::pattern":"2:11521:7644"},"attrs":["#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_end_matches`\",\nsuggestion = \"trim_end_matches\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_end_matches`"},"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11526:7640","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"2:11526:7640","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11541:7641","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"5:5287:31180":{"id":"5:5287:31180","crate_id":5,"name":"into_boxed_bytes","span":null,"visibility":"public","docs":"Converts a `Box<str>` into a `Box<[u8]>` without copying or allocating.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"this is a string\";\nlet boxed_str = s.to_owned().into_boxed_str();\nlet boxed_bytes = boxed_str.into_boxed_bytes();\nassert_eq!(*boxed_bytes, *s.as_bytes());\n```","links":{},"attrs":["#[must_use = \"`self` will be dropped if the result is not used\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"resolved_path","inner":{"name":"Box","id":"5:288:1882","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}},{"type":{"kind":"resolved_path","inner":{"name":"Global","id":"5:6909:2042","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}]],"output":{"kind":"resolved_path","inner":{"name":"Box","id":"5:288:1882","args":{"angle_bracketed":{"args":[{"type":{"kind":"slice","inner":{"kind":"primitive","inner":"u8"}}},{"type":{"kind":"resolved_path","inner":{"name":"Global","id":"5:6909:2042","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"5:5302:31183":{"id":"5:5302:31183","crate_id":5,"name":"to_uppercase","span":null,"visibility":"public","docs":"Returns the uppercase equivalent of this string slice, as a new [`String`].\n\n'Uppercase' is defined according to the terms of the Unicode Derived Core Property\n`Uppercase`.\n\nSince some characters can expand into multiple characters when changing\nthe case, this function returns a [`String`] instead of modifying the\nparameter in-place.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"hello\";\n\nassert_eq!(\"HELLO\", s.to_uppercase());\n```\n\nScripts without case are not changed:\n\n```\nlet new_year = \"农历新年\";\n\nassert_eq!(new_year, new_year.to_uppercase());\n```\n\nOne character can become multiple:\n```\nlet s = \"tschüß\";\n\nassert_eq!(\"TSCHÜSS\", s.to_uppercase());\n```","links":{"`String`":"5:7158:221"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the uppercase string as a new String, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:7158:221","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11908:30518":{"id":"2:11908:30518","crate_id":2,"name":"trim","span":null,"visibility":"public","docs":"Returns a string slice with leading and trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\n\nassert_eq!(\"Hello\\tworld\", s.trim());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a slice, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_trim\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11823:30505":{"id":"2:11823:30505","crate_id":2,"name":"floor_char_boundary","span":null,"visibility":"public","docs":"Finds the closest `x` not exceeding `index` where `is_char_boundary(x)` is `true`.\n\nThis method can help you truncate a string so that it's still valid UTF-8, but doesn't\nexceed a given number of bytes. Note that this is done purely at the character level\nand can still visually split graphemes, even though the underlying characters aren't\nsplit. For example, the emoji 🧑‍🔬 (scientist) could be split so that the string only\nincludes 🧑 (person) instead.\n\n# Examples\n\n```\n#![feature(round_char_boundary)]\nlet s = \"❤️🧡💛💚💙💜\";\nassert_eq!(s.len(), 26);\nassert!(!s.is_char_boundary(13));\n\nlet closest = s.floor_char_boundary(13);\nassert_eq!(closest, 10);\nassert_eq!(&s[..closest], \"❤️🧡\");\n```","links":{},"attrs":["#[unstable(feature = \"round_char_boundary\", issue = \"93743\")]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["index",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"primitive","inner":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11850:30510":{"id":"2:11850:30510","crate_id":2,"name":"lines_any","span":null,"visibility":"public","docs":"An iterator over the lines of a string.","links":{},"attrs":["#[deprecated(since = \"1.4.0\", note = \"use lines() instead now\")]"],"deprecation":{"since":"1.4.0","note":"use lines() instead now"},"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"LinesAny","id":"2:50990:7658","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11899:30515":{"id":"2:11899:30515","crate_id":2,"name":"rmatches","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within this string slice,\nyielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`matches`] method can be used.\n\n[`matches`]: str::matches\n\n# Examples\n\nBasic usage:\n\n```\nlet v: Vec<&str> = \"abcXXXabcYYYabc\".rmatches(\"abc\").collect();\nassert_eq!(v, [\"abc\", \"abc\", \"abc\"]);\n\nlet v: Vec<&str> = \"1abc2abc3\".rmatches(char::is_numeric).collect();\nassert_eq!(v, [\"3\", \"2\", \"1\"]);\n```","links":{"self::pattern":"2:11521:7644","`DoubleEndedIterator`":"2:7125:120","prim@char":"1:11843:410","str::matches":"2:11896:1851"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"RMatches","id":"2:50948:7662","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11526:7640","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"2:11526:7640","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11541:7641","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11915:30522":{"id":"2:11915:30522","crate_id":2,"name":"trim_right","span":null,"visibility":"public","docs":"Returns a string slice with trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`.\n\n# Text directionality\n\nA string is a sequence of bytes. 'Right' in this context means the last\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _left_ side, not the right.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \" Hello\\tworld\\t\";\n\nassert_eq!(\" Hello\\tworld\", s.trim_right());\n```\n\nDirectionality:\n\n```\nlet s = \"English  \";\nassert!(Some('h') == s.trim_right().chars().rev().next());\n\nlet s = \"עברית  \";\nassert!(Some('ת') == s.trim_right().chars().rev().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_end`\", suggestion =\n\"trim_end\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_end`"},"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"5:5288:2146":{"id":"5:5288:2146","crate_id":5,"name":"replace","span":null,"visibility":"public","docs":"Replaces all matches of a pattern with another string.\n\n`replace` creates a new [`String`], and copies the data from this string slice into it.\nWhile doing so, it attempts to find matches of a pattern. If it finds any, it\nreplaces them with the replacement string slice.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"this is old\";\n\nassert_eq!(\"this is new\", s.replace(\"old\", \"new\"));\nassert_eq!(\"than an old\", s.replace(\"is\", \"an\"));\n```\n\nWhen the pattern doesn't match:\n\n```\nlet s = \"this is old\";\nassert_eq!(s, s.replace(\"cookie monster\", \"little lamb\"));\n```","links":{"`String`":"5:7158:221"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the replaced string as a new allocation, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["from",{"kind":"generic","inner":"P"}],["to",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:7158:221","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11526:7640","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"5:5294:31182":{"id":"5:5294:31182","crate_id":5,"name":"to_lowercase","span":null,"visibility":"public","docs":"Returns the lowercase equivalent of this string slice, as a new [`String`].\n\n'Lowercase' is defined according to the terms of the Unicode Derived Core Property\n`Lowercase`.\n\nSince some characters can expand into multiple characters when changing\nthe case, this function returns a [`String`] instead of modifying the\nparameter in-place.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"HELLO\";\n\nassert_eq!(\"hello\", s.to_lowercase());\n```\n\nA tricky example, with sigma:\n\n```\nlet sigma = \"Σ\";\n\nassert_eq!(\"σ\", sigma.to_lowercase());\n\n// but at the end of a word, it's ς, not σ:\nlet odysseus = \"ὈΔΥΣΣΕΎΣ\";\n\nassert_eq!(\"ὀδυσσεύς\", odysseus.to_lowercase());\n```\n\nLanguages without case are not changed:\n\n```\nlet new_year = \"农历新年\";\n\nassert_eq!(new_year, new_year.to_lowercase());\n```","links":{"`String`":"5:7158:221"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the lowercase string as a new String, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:7158:221","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11910:30519":{"id":"2:11910:30519","crate_id":2,"name":"trim_start","span":null,"visibility":"public","docs":"Returns a string slice with leading whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Text directionality\n\nA string is a sequence of bytes. `start` in this context means the first\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be left side, and for right-to-left languages like\nArabic or Hebrew, this will be the right side.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\nassert_eq!(\"Hello\\tworld\\t\\n\", s.trim_start());\n```\n\nDirectionality:\n\n```\nlet s = \"  English  \";\nassert!(Some('E') == s.trim_start().chars().next());\n\nlet s = \"  עברית  \";\nassert!(Some('ע') == s.trim_start().chars().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_trim_start\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11914:30521":{"id":"2:11914:30521","crate_id":2,"name":"trim_left","span":null,"visibility":"public","docs":"Returns a string slice with leading whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`.\n\n# Text directionality\n\nA string is a sequence of bytes. 'Left' in this context means the first\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _right_ side, not the left.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \" Hello\\tworld\\t\";\n\nassert_eq!(\"Hello\\tworld\\t\", s.trim_left());\n```\n\nDirectionality:\n\n```\nlet s = \"  English\";\nassert!(Some('E') == s.trim_left().chars().next());\n\nlet s = \"  עברית\";\nassert!(Some('ע') == s.trim_left().chars().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_start`\", suggestion\n= \"trim_start\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_start`"},"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11939:22848":{"id":"2:11939:22848","crate_id":2,"name":"is_ascii","span":null,"visibility":"public","docs":"Checks if all characters in this string are within the ASCII range.\n\n# Examples\n\n```\nlet ascii = \"hello!\\n\";\nlet non_ascii = \"Grüße, Jürgen ❤\";\n\nassert!(ascii.is_ascii());\nassert!(!non_ascii.is_ascii());\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11819":{"id":"2:11819","crate_id":2,"name":null,"span":null,"visibility":{"restricted":{"parent":"2:11084:1368","path":"::str"}},"docs":null,"links":{},"attrs":["#[cfg(not(test))]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"kind":"primitive","inner":"str"},"items":["2:11820:797","2:11821:22842","2:11822:30504","2:11823:30505","2:11825:30506","2:11828:26747","2:11829:30507","2:11830:310","2:11831:22965","2:11832:22961","2:11834:22962","2:11836:22963","2:11838:22964","2:11840:30508","2:11841:30509","2:11842:22987","2:11843:22988","2:11844:27910","2:11845:27446","2:11846:20270","2:11847:27912","2:11848:27926","2:11849:20929","2:11850:30510","2:11851:27911","2:11852:23004","2:11855:23005","2:11858:23006","2:11861:19202","2:11865:19203","2:11869:20928","2:11872:22996","2:11875:22998","2:11878:30511","2:11881:30512","2:11884:23000","2:11887:23002","2:11890:30513","2:11893:30514","2:11896:1851","2:11899:30515","2:11902:30516","2:11905:30517","2:11908:30518","2:11910:30519","2:11912:30520","2:11914:30521","2:11915:30522","2:11916:30523","2:11919:30524","2:11922:20306","2:11925:23007","2:11928:30525","2:11931:30526","2:11934:30527","2:11937:30528","2:11939:22848","2:11940:22849","2:11941:22845","2:11942:22844","2:11943:30529","2:11945:1961","2:11946:30530"],"negative":false,"synthetic":false,"blanket_impl":null}},"5:5286":{"id":"5:5286","crate_id":5,"name":null,"span":null,"visibility":{"restricted":{"parent":"5:5197:1368","path":"::str"}},"docs":"Methods for string slices.","links":{},"attrs":["#[cfg(not(test))]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"kind":"primitive","inner":"str"},"items":["5:5287:31180","5:5288:2146","5:5291:31181","5:5294:31182","5:5302:31183","5:5303:31184","5:5304:2169","5:5305:22847","5:5306:22846"],"negative":false,"synthetic":false,"blanket_impl":null}},"2:11838:22964":{"id":"2:11838:22964","crate_id":2,"name":"get_unchecked_mut","span":null,"visibility":"public","docs":"Returns a mutable, unchecked subslice of `str`.\n\nThis is the unchecked alternative to indexing the `str`.\n\n# Safety\n\nCallers of this function are responsible that these preconditions are\nsatisfied:\n\n* The starting index must not exceed the ending index;\n* Indexes must be within bounds of the original slice;\n* Indexes must lie on UTF-8 sequence boundaries.\n\nFailing that, the returned string slice may reference invalid memory or\nviolate the invariants communicated by the `str` type.\n\n# Examples\n\n```\nlet mut v = String::from(\"🗻∈🌏\");\nunsafe {\n    assert_eq!(\"🗻\", v.get_unchecked_mut(0..4));\n    assert_eq!(\"∈\", v.get_unchecked_mut(4..7));\n    assert_eq!(\"🌏\", v.get_unchecked_mut(7..11));\n}\n```","links":{},"attrs":["#[rustc_const_unstable(feature = \"const_slice_index\", issue = \"none\")]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["i",{"kind":"generic","inner":"I"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"qualified_path","inner":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"I"},"trait":{"name":"SliceIndex","id":"2:9702:219","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}}}}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"2:9702:219","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}},"2:11832:22961":{"id":"2:11832:22961","crate_id":2,"name":"get","span":null,"visibility":"public","docs":"Returns a subslice of `str`.\n\nThis is the non-panicking alternative to indexing the `str`. Returns\n[`None`] whenever equivalent indexing operation would panic.\n\n# Examples\n\n```\nlet v = String::from(\"🗻∈🌏\");\n\nassert_eq!(Some(\"🗻\"), v.get(0..4));\n\n// indices not on UTF-8 sequence boundaries\nassert!(v.get(1..).is_none());\nassert!(v.get(..8).is_none());\n\n// out of bounds\nassert!(v.get(..42).is_none());\n```","links":{"`None`":"2:48736:176"},"attrs":["#[rustc_const_unstable(feature = \"const_slice_index\", issue = \"none\")]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["i",{"kind":"generic","inner":"I"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:48734:178","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"qualified_path","inner":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"I"},"trait":{"name":"SliceIndex","id":"2:9702:219","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}}}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"2:9702:219","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11848:27926":{"id":"2:11848:27926","crate_id":2,"name":"split_ascii_whitespace","span":null,"visibility":"public","docs":"Splits a string slice by ASCII whitespace.\n\nThe iterator returned will return string slices that are sub-slices of\nthe original string slice, separated by any amount of ASCII whitespace.\n\nTo split by Unicode `Whitespace` instead, use [`split_whitespace`].\n\n[`split_whitespace`]: str::split_whitespace\n\n# Examples\n\nBasic usage:\n\n```\nlet mut iter = \"A few words\".split_ascii_whitespace();\n\nassert_eq!(Some(\"A\"), iter.next());\nassert_eq!(Some(\"few\"), iter.next());\nassert_eq!(Some(\"words\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nAll kinds of ASCII whitespace are considered:\n\n```\nlet mut iter = \" Mary   had\\ta little  \\n\\t lamb\".split_ascii_whitespace();\nassert_eq!(Some(\"Mary\"), iter.next());\nassert_eq!(Some(\"had\"), iter.next());\nassert_eq!(Some(\"a\"), iter.next());\nassert_eq!(Some(\"little\"), iter.next());\nassert_eq!(Some(\"lamb\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nIf the string is empty or all ASCII whitespace, the iterator yields no string slices:\n```\nassert_eq!(\"\".split_ascii_whitespace().next(), None);\nassert_eq!(\"   \".split_ascii_whitespace().next(), None);\n```","links":{"str::split_whitespace":"2:11847:27912"},"attrs":["#[must_use =\n\"this returns the split string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"SplitAsciiWhitespace","id":"2:51009:7646","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11928:30525":{"id":"2:11928:30525","crate_id":2,"name":"trim_end_matches","span":null,"visibility":"public","docs":"Returns a string slice with all suffixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. `end` in this context means the last\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be right side, and for right-to-left languages like\nArabic or Hebrew, this will be the left side.\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_end_matches('1'), \"11foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_end_matches(char::is_numeric), \"123foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_end_matches(x), \"12foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1fooX\".trim_end_matches(|c| c == '1' || c == 'X'), \"1foo\");\n```","links":{"prim@char":"1:11843:410","self::pattern":"2:11521:7644"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11526:7640","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"2:11526:7640","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11541:7641","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"5:5306:22846":{"id":"5:5306:22846","crate_id":5,"name":"to_ascii_lowercase","span":null,"visibility":"public","docs":"Returns a copy of this string where each character is mapped to its\nASCII lower case equivalent.\n\nASCII letters 'A' to 'Z' are mapped to 'a' to 'z',\nbut non-ASCII letters are unchanged.\n\nTo lowercase the value in-place, use [`make_ascii_lowercase`].\n\nTo lowercase ASCII characters in addition to non-ASCII characters, use\n[`to_lowercase`].\n\n# Examples\n\n```\nlet s = \"Grüße, Jürgen ❤\";\n\nassert_eq!(\"grüße, jürgen ❤\", s.to_ascii_lowercase());\n```\n\n[`make_ascii_lowercase`]: str::make_ascii_lowercase\n[`to_lowercase`]: #method.to_lowercase","links":{"str::make_ascii_lowercase":"2:11942:22844"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use = \"to lowercase the value in-place, use `make_ascii_lowercase()`\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:7158:221","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11822:30504":{"id":"2:11822:30504","crate_id":2,"name":"is_char_boundary","span":null,"visibility":"public","docs":"Checks that `index`-th byte is the first byte in a UTF-8 code point\nsequence or the end of the string.\n\nThe start and end of the string (when `index == self.len()`) are\nconsidered to be boundaries.\n\nReturns `false` if `index` is greater than `self.len()`.\n\n# Examples\n\n```\nlet s = \"Löwe 老虎 Léopard\";\nassert!(s.is_char_boundary(0));\n// start of `老`\nassert!(s.is_char_boundary(6));\nassert!(s.is_char_boundary(s.len()));\n\n// second byte of `ö`\nassert!(!s.is_char_boundary(2));\n\n// third byte of `老`\nassert!(!s.is_char_boundary(8));\n```","links":{},"attrs":["#[must_use]","#[rustc_const_unstable(feature = \"const_is_char_boundary\", issue = \"none\")]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["index",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11878:30511":{"id":"2:11878:30511","crate_id":2,"name":"split_terminator","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by\ncharacters matched by a pattern.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\nEquivalent to [`split`], except that the trailing substring\nis skipped if empty.\n\n[`split`]: str::split\n\nThis method can be used for string data that is _terminated_,\nrather than _separated_ by a pattern.\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rsplit_terminator`] method can be used.\n\n[`rsplit_terminator`]: str::rsplit_terminator\n\n# Examples\n\nBasic usage:\n\n```\nlet v: Vec<&str> = \"A.B.\".split_terminator('.').collect();\nassert_eq!(v, [\"A\", \"B\"]);\n\nlet v: Vec<&str> = \"A..B..\".split_terminator(\".\").collect();\nassert_eq!(v, [\"A\", \"\", \"B\", \"\"]);\n\nlet v: Vec<&str> = \"A.B:C.D\".split_terminator(&['.', ':'][..]).collect();\nassert_eq!(v, [\"A\", \"B\", \"C\", \"D\"]);\n```","links":{"self::pattern":"2:11521:7644","str::split":"2:11869:20928","prim@char":"1:11843:410","`DoubleEndedIterator`":"2:7125:120","str::rsplit_terminator":"2:11881:30512"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"SplitTerminator","id":"2:50776:7664","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11526:7640","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11841:30509":{"id":"2:11841:30509","crate_id":2,"name":"slice_mut_unchecked","span":null,"visibility":"public","docs":"Creates a string slice from another string slice, bypassing safety\nchecks.\nThis is generally not recommended, use with caution! For a safe\nalternative see [`str`] and [`IndexMut`].\n\n[`IndexMut`]: crate::ops::IndexMut\n\nThis new slice goes from `begin` to `end`, including `begin` but\nexcluding `end`.\n\nTo get an immutable string slice instead, see the\n[`slice_unchecked`] method.\n\n[`slice_unchecked`]: str::slice_unchecked\n\n# Safety\n\nCallers of this function are responsible that three preconditions are\nsatisfied:\n\n* `begin` must not exceed `end`.\n* `begin` and `end` must be byte positions within the string slice.\n* `begin` and `end` must lie on UTF-8 sequence boundaries.","links":{"`str`":"1:11849:1368","crate::ops::IndexMut":"2:2995:2039","str::slice_unchecked":"2:11840:30508"},"attrs":["#[deprecated(since = \"1.29.0\", note =\n\"use `get_unchecked_mut(begin..end)` instead\")]"],"deprecation":{"since":"1.29.0","note":"use `get_unchecked_mut(begin..end)` instead"},"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["begin",{"kind":"primitive","inner":"usize"}],["end",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}},"2:11858:23006":{"id":"2:11858:23006","crate_id":2,"name":"ends_with","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a suffix of this\nstring slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nBasic usage:\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.ends_with(\"anas\"));\nassert!(!bananas.ends_with(\"nana\"));\n```","links":{"prim@char":"1:11843:410","self::pattern":"2:11521:7644"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11526:7640","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"2:11526:7640","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11541:7641","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11842:22987":{"id":"2:11842:22987","crate_id":2,"name":"split_at","span":null,"visibility":"public","docs":"Divide one string slice into two at an index.\n\nThe argument, `mid`, should be a byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get mutable string slices instead, see the [`split_at_mut`]\nmethod.\n\n[`split_at_mut`]: str::split_at_mut\n\n# Panics\n\nPanics if `mid` is not on a UTF-8 code point boundary, or if it is\npast the end of the last code point of the string slice.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"Per Martin-Löf\";\n\nlet (first, last) = s.split_at(3);\n\nassert_eq!(\"Per\", first);\nassert_eq!(\" Martin-Löf\", last);\n```","links":{"str::split_at_mut":"2:11843:22988"},"attrs":["#[must_use]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["mid",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"tuple","inner":[{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11845:27446":{"id":"2:11845:27446","crate_id":2,"name":"char_indices","span":null,"visibility":"public","docs":"Returns an iterator over the [`char`]s of a string slice, and their\npositions.\n\nAs a string slice consists of valid UTF-8, we can iterate through a\nstring slice by [`char`]. This method returns an iterator of both\nthese [`char`]s, as well as their byte positions.\n\nThe iterator yields tuples. The position is first, the [`char`] is\nsecond.\n\n# Examples\n\nBasic usage:\n\n```\nlet word = \"goodbye\";\n\nlet count = word.char_indices().count();\nassert_eq!(7, count);\n\nlet mut char_indices = word.char_indices();\n\nassert_eq!(Some((0, 'g')), char_indices.next());\nassert_eq!(Some((1, 'o')), char_indices.next());\nassert_eq!(Some((2, 'o')), char_indices.next());\nassert_eq!(Some((3, 'd')), char_indices.next());\nassert_eq!(Some((4, 'b')), char_indices.next());\nassert_eq!(Some((5, 'y')), char_indices.next());\nassert_eq!(Some((6, 'e')), char_indices.next());\n\nassert_eq!(None, char_indices.next());\n```\n\nRemember, [`char`]s might not match your intuition about characters:\n\n[`char`]: prim@char\n\n```\nlet yes = \"y̆es\";\n\nlet mut char_indices = yes.char_indices();\n\nassert_eq!(Some((0, 'y')), char_indices.next()); // not (0, 'y̆')\nassert_eq!(Some((1, '\\u{0306}')), char_indices.next());\n\n// note the 3 here - the last character took up two bytes\nassert_eq!(Some((3, 'e')), char_indices.next());\nassert_eq!(Some((4, 's')), char_indices.next());\n\nassert_eq!(None, char_indices.next());\n```","links":{"prim@char":"1:11843:410"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"CharIndices","id":"2:50702:7650","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11855:23005":{"id":"2:11855:23005","crate_id":2,"name":"starts_with","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a prefix of this\nstring slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nBasic usage:\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.starts_with(\"bana\"));\nassert!(!bananas.starts_with(\"nana\"));\n```","links":{"prim@char":"1:11843:410","self::pattern":"2:11521:7644"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11526:7640","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11925:23007":{"id":"2:11925:23007","crate_id":2,"name":"strip_suffix","span":null,"visibility":"public","docs":"Returns a string slice with the suffix removed.\n\nIf the string ends with the pattern `suffix`, returns the substring before the suffix,\nwrapped in `Some`.  Unlike `trim_end_matches`, this method removes the suffix exactly once.\n\nIf the string does not end with `suffix`, returns `None`.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nassert_eq!(\"bar:foo\".strip_suffix(\":foo\"), Some(\"bar\"));\nassert_eq!(\"bar:foo\".strip_suffix(\"bar\"), None);\nassert_eq!(\"foofoo\".strip_suffix(\"foo\"), Some(\"foo\"));\n```","links":{"prim@char":"1:11843:410","self::pattern":"2:11521:7644"},"attrs":["#[must_use =\n\"this returns the remaining substring as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["suffix",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:48734:178","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11526:7640","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"2:11526:7640","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11541:7641","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"5:5304:2169":{"id":"5:5304:2169","crate_id":5,"name":"repeat","span":null,"visibility":"public","docs":"Creates a new [`String`] by repeating a string `n` times.\n\n# Panics\n\nThis function will panic if the capacity would overflow.\n\n# Examples\n\nBasic usage:\n\n```\nassert_eq!(\"abc\".repeat(4), String::from(\"abcabcabcabc\"));\n```\n\nA panic upon overflow:\n\n```should_panic\n// this will panic at runtime\nlet huge = \"0123456789abcdef\".repeat(usize::MAX);\n```","links":{"`String`":"5:7158:221"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["n",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:7158:221","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11902:30516":{"id":"2:11902:30516","crate_id":2,"name":"match_indices","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within this string\nslice as well as the index that the match starts at.\n\nFor matches of `pat` within `self` that overlap, only the indices\ncorresponding to the first match are returned.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rmatch_indices`] method can be used.\n\n[`rmatch_indices`]: str::rmatch_indices\n\n# Examples\n\nBasic usage:\n\n```\nlet v: Vec<_> = \"abcXXXabcYYYabc\".match_indices(\"abc\").collect();\nassert_eq!(v, [(0, \"abc\"), (6, \"abc\"), (12, \"abc\")]);\n\nlet v: Vec<_> = \"1abcabc2\".match_indices(\"abc\").collect();\nassert_eq!(v, [(1, \"abc\"), (4, \"abc\")]);\n\nlet v: Vec<_> = \"ababa\".match_indices(\"aba\").collect();\nassert_eq!(v, [(0, \"aba\")]); // only the first `aba`\n```","links":{"self::pattern":"2:11521:7644","`DoubleEndedIterator`":"2:7125:120","prim@char":"1:11843:410","str::rmatch_indices":"2:11905:30517"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"MatchIndices","id":"2:50876:7659","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11526:7640","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11941:22845":{"id":"2:11941:22845","crate_id":2,"name":"make_ascii_uppercase","span":null,"visibility":"public","docs":"Converts this string to its ASCII upper case equivalent in-place.\n\nASCII letters 'a' to 'z' are mapped to 'A' to 'Z',\nbut non-ASCII letters are unchanged.\n\nTo return a new uppercased value without modifying the existing one, use\n[`to_ascii_uppercase()`].\n\n[`to_ascii_uppercase()`]: #method.to_ascii_uppercase\n\n# Examples\n\n```\nlet mut s = String::from(\"Grüße, Jürgen ❤\");\n\ns.make_ascii_uppercase();\n\nassert_eq!(\"GRüßE, JüRGEN ❤\", s);\n```","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11916:30523":{"id":"2:11916:30523","crate_id":2,"name":"trim_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes and suffixes that match a\npattern repeatedly removed.\n\nThe [pattern] can be a [`char`], a slice of [`char`]s, or a function\nor closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_matches('1'), \"foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_matches(char::is_numeric), \"foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_matches(x), \"foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1foo1barXX\".trim_matches(|c| c == '1' || c == 'X'), \"foo1bar\");\n```","links":{"prim@char":"1:11843:410","self::pattern":"2:11521:7644"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11526:7640","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"2:11526:7640","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"DoubleEndedSearcher","id":"2:11546:7639","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"paths":{"5:1257:2003":{"crate_id":5,"path":["alloc","collections","btree","map","entry","OccupiedError"],"kind":"struct"},"17:12980:18996":{"crate_id":17,"path":["object","pe","ImageArchiveMemberHeader"],"kind":"struct"},"2:11294:8183":{"crate_id":2,"path":["core","str","iter","MatchIndicesInternal"],"kind":"struct"},"2:47729:7972":{"crate_id":2,"path":["core","iter","adapters","peekable","Peekable"],"kind":"struct"},"16:5203:14043":{"crate_id":16,"path":["gimli","endianity","LittleEndian"],"kind":"struct"},"17:13100:19009":{"crate_id":17,"path":["object","pe","ImageDelayloadDescriptor"],"kind":"struct"},"6:7276:12276":{"crate_id":6,"path":["libc","unix","linux_like","linux","canfd_frame"],"kind":"struct"},"2:2784:8007":{"crate_id":2,"path":["core","ops","arith","Rem"],"kind":"trait"},"2:11592:7670":{"crate_id":2,"path":["core","str","pattern","MultiCharEqPattern"],"kind":"struct"},"2:47282:7743":{"crate_id":2,"path":["core","async_iter","from_iter","FromIter"],"kind":"struct"},"2:2686:225":{"crate_id":2,"path":["core","marker","Sync"],"kind":"trait"},"1:11199:20269":{"crate_id":1,"path":["std","sys_common","wtf8","Wtf8Buf"],"kind":"struct"},"2:22102:172":{"crate_id":2,"path":["core","num","nonzero","NonZeroU16"],"kind":"struct"},"6:4639:12126":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_fprog"],"kind":"struct"},"2:2229:97":{"crate_id":2,"path":["core","borrow","Borrow"],"kind":"trait"},"6:5520:12753":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","glob64_t"],"kind":"struct"},"2:51338:7665":{"crate_id":2,"path":["core","str","lossy","Utf8Chunk"],"kind":"struct"},"1:7576:1957":{"crate_id":1,"path":["std","thread","local","AccessError"],"kind":"struct"},"17:10774:15198":{"crate_id":17,"path":["object","read","Export"],"kind":"struct"},"17:9831:15344":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCacheImageIterator"],"kind":"struct"},"16:6528:15044":{"crate_id":16,"path":["gimli","read","line","LineProgramHeader"],"kind":"struct"},"5:288:1882":{"crate_id":5,"path":["alloc","boxed","Box"],"kind":"struct"},"5:219:7572":{"crate_id":5,"path":["alloc","boxed","thin","ThinBox"],"kind":"struct"},"6:5759:32030":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","sifields_sigchld"],"kind":"struct"},"2:39883:7983":{"crate_id":2,"path":["core","marker","PhantomPinned"],"kind":"struct"},"2:47503:1610":{"crate_id":2,"path":["core","ffi","c_char"],"kind":"typedef"},"2:47536:2088":{"crate_id":2,"path":["core","ffi","VaListImpl"],"kind":"struct"},"1:1824:2059":{"crate_id":1,"path":["std","env","SplitPaths"],"kind":"struct"},"6:4820:12145":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_can_addr"],"kind":"union"},"9:111:13810":{"crate_id":9,"path":["miniz_oxide","deflate","core","CompressorOxide"],"kind":"struct"},"16:6719:32685":{"crate_id":16,"path":["gimli","read","loclists","LocListsFormat"],"kind":"enum"},"2:46913:195":{"crate_id":2,"path":["core","ops","range","Range"],"kind":"struct"},"1:6390:2364":{"crate_id":1,"path":["std","sync","once_lock","OnceLock"],"kind":"struct"},"2:50542:7618":{"crate_id":2,"path":["core","slice","iter","ChunksExactMut"],"kind":"struct"},"6:4210:12081":{"crate_id":6,"path":["libc","unix","linux_like","linux","cpu_set_t"],"kind":"struct"},"5:6276:1987":{"crate_id":5,"path":["alloc","vec","into_iter","IntoIter"],"kind":"struct"},"5:36:2043":{"crate_id":5,"path":["alloc","raw_vec","RawVec"],"kind":"struct"},"1:11848:1338":{"crate_id":1,"path":["std","slice"],"kind":"primitive"},"17:10997:15406":{"crate_id":17,"path":["object","elf","Ident"],"kind":"struct"},"2:47595:2140":{"crate_id":2,"path":["core","iter","adapters","chain","Chain"],"kind":"struct"},"2:47355:7656":{"crate_id":2,"path":["core","char","EscapeUnicode"],"kind":"struct"},"2:58912:27507":{"crate_id":2,"path":["core","core_simd","vector","ptr","SimdConstPtr"],"kind":"struct"},"2:53835:2479":{"crate_id":2,"path":["core","core_arch","simd","i8x64"],"kind":"struct"},"17:11436:17994":{"crate_id":17,"path":["object","macho","DyldCacheHeader"],"kind":"struct"},"2:8569:86":{"crate_id":2,"path":["core","sync","atomic","AtomicPtr"],"kind":"struct"},"2:48066:7952":{"crate_id":2,"path":["core","iter","sources","successors","Successors"],"kind":"struct"},"16:5374:14995":{"crate_id":16,"path":["gimli","read","addr","DebugAddr"],"kind":"struct"},"1:11863:1463":{"crate_id":1,"path":["std","u64"],"kind":"primitive"},"2:52613:2468":{"crate_id":2,"path":["core","core_arch","simd","i32x2"],"kind":"struct"},"16:7872:15088":{"crate_id":16,"path":["gimli","read","unit","EntriesRaw"],"kind":"struct"},"16:7469:15076":{"crate_id":16,"path":["gimli","read","str","DebugStr"],"kind":"struct"},"1:3970:2216":{"crate_id":1,"path":["std","os","unix","fs","DirEntryExt2"],"kind":"trait"},"6:5508:12751":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__exit_status"],"kind":"struct"},"17:9691:15266":{"crate_id":17,"path":["object","read","elf","hash","HashTable"],"kind":"struct"},"16:7329:15069":{"crate_id":16,"path":["gimli","read","rnglists","DebugRanges"],"kind":"struct"},"17:12008:18194":{"crate_id":17,"path":["object","macho","TwolevelHintsCommand"],"kind":"struct"},"5:3086:1985":{"crate_id":5,"path":["alloc","collections","btree","set","Iter"],"kind":"struct"},"1:8741:183":{"crate_id":1,"path":["std","process","Output"],"kind":"struct"},"6:4162:12077":{"crate_id":6,"path":["libc","unix","linux_like","linux","signalfd_siginfo"],"kind":"struct"},"2:8141:2295":{"crate_id":2,"path":["core","panic","unwind_safe","AssertUnwindSafe"],"kind":"struct"},"1:4397:2252":{"crate_id":1,"path":["std","os","unix","process","CommandExt"],"kind":"trait"},"16:6690:15050":{"crate_id":16,"path":["gimli","read","loclists","DebugLocLists"],"kind":"struct"},"16:7825:15086":{"crate_id":16,"path":["gimli","read","unit","Attribute"],"kind":"struct"},"17:9627:15252":{"crate_id":17,"path":["object","read","elf","relocation","RelocationSections"],"kind":"struct"},"1:6602:26141":{"crate_id":1,"path":["std","sync","rwlock","fmt","LockedPlaceholder"],"kind":"struct"},"6:4125:12074":{"crate_id":6,"path":["libc","unix","linux_like","linux","passwd"],"kind":"struct"},"2:51725:7555":{"crate_id":2,"path":["core","alloc","layout","LayoutError"],"kind":"struct"},"2:21721:27025":{"crate_id":2,"path":["core","num","flt2dec","decoder","FullDecoded"],"kind":"enum"},"17:11149:15625":{"crate_id":17,"path":["object","elf","Rel32"],"kind":"struct"},"2:3640:1987":{"crate_id":2,"path":["core","array","iter","IntoIter"],"kind":"struct"},"1:534:1940":{"crate_id":1,"path":["std","thread","Packet"],"kind":"struct"},"1:7641:1964":{"crate_id":1,"path":["std","backtrace","BacktraceStatus"],"kind":"enum"},"6:547:8814":{"crate_id":6,"path":["libc","unix","pollfd"],"kind":"struct"},"6:1517:9715":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreqn"],"kind":"struct"},"1:2869:127":{"crate_id":1,"path":["std","io","error","Error"],"kind":"struct"},"1:10405:2162":{"crate_id":1,"path":["std","sys","unix","stdio","Stderr"],"kind":"struct"},"2:12116:7803":{"crate_id":2,"path":["core","future","into_future","IntoFuture"],"kind":"trait"},"17:12948:18636":{"crate_id":17,"path":["object","pe","ImageAuxSymbolCrc"],"kind":"struct"},"1:3234:2162":{"crate_id":1,"path":["std","io","stdio","Stderr"],"kind":"struct"},"17:12485:18408":{"crate_id":17,"path":["object","pe","ImageDosHeader"],"kind":"struct"},"5:5741:8407":{"crate_id":5,"path":["alloc","sync","ArcInner"],"kind":"struct"},"2:3506:1990":{"crate_id":2,"path":["core","array","drain","Drain"],"kind":"struct"},"1:3125:20121":{"crate_id":1,"path":["std","io","stdio","StderrRaw"],"kind":"struct"},"2:7202:156":{"crate_id":2,"path":["core","iter","traits","iterator","Iterator"],"kind":"trait"},"6:5544:12755":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","cmsghdr"],"kind":"struct"},"12:1852:2006":{"crate_id":12,"path":["hashbrown","set","Intersection"],"kind":"struct"},"1:11842:921":{"crate_id":1,"path":["std","never"],"kind":"primitive"},"17:12617:18412":{"crate_id":17,"path":["object","pe","ImageFileHeader"],"kind":"struct"},"5:3057:95":{"crate_id":5,"path":["alloc","collections","btree","set","BTreeSet"],"kind":"struct"},"2:47461:2086":{"crate_id":2,"path":["core","ffi","c_str","FromBytesWithNulError"],"kind":"struct"},"6:4356:12098":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_ff_upload"],"kind":"struct"},"2:2832:8013":{"crate_id":2,"path":["core","ops","bit","BitXor"],"kind":"trait"},"1:7800:2093":{"crate_id":1,"path":["std","fs","FileTimes"],"kind":"struct"},"17:9223:15208":{"crate_id":17,"path":["object","read","archive","ArchiveKind"],"kind":"enum"},"17:11800:18180":{"crate_id":17,"path":["object","macho","SubLibraryCommand"],"kind":"struct"},"2:2768:2414":{"crate_id":2,"path":["core","ops","arith","Sub"],"kind":"trait"},"5:1071:31393":{"crate_id":5,"path":["alloc","collections","btree","borrow","DormantMutRef"],"kind":"struct"},"2:9020:7583":{"crate_id":2,"path":["core","fmt","UpperHex"],"kind":"trait"},"17:12896:18632":{"crate_id":17,"path":["object","pe","ImageAuxSymbolFunction"],"kind":"struct"},"16:5460:15000":{"crate_id":16,"path":["gimli","read","cfi","EhHdrTable"],"kind":"struct"},"17:12964:18968":{"crate_id":17,"path":["object","pe","ImageLinenumber"],"kind":"struct"},"16:8014:15096":{"crate_id":16,"path":["gimli","read","value","Value"],"kind":"enum"},"1:7266:20785":{"crate_id":1,"path":["std","panicking","Hook"],"kind":"enum"},"1:1436:143":{"crate_id":1,"path":["std","collections","hash","set","HashSet"],"kind":"struct"},"6:526:8811":{"crate_id":6,"path":["libc","unix","ipv6_mreq"],"kind":"struct"},"12:659:1987":{"crate_id":12,"path":["hashbrown","map","IntoIter"],"kind":"struct"},"5:3098:31416":{"crate_id":5,"path":["alloc","collections","btree","set","DifferenceInner"],"kind":"enum"},"16:5664:15009":{"crate_id":16,"path":["gimli","read","cfi","PartialFrameDescriptionEntry"],"kind":"struct"},"18:548:140":{"crate_id":18,"path":["memchr","memmem","rabinkarp","Hash"],"kind":"struct"},"17:13536:19135":{"crate_id":17,"path":["object","pe","ImageSeparateDebugHeader"],"kind":"struct"},"2:57559:243":{"crate_id":2,"path":["core","core_simd","fmt","fmt","Wrapper"],"kind":"struct"},"6:5605:12759":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_mmap_hdr"],"kind":"struct"},"1:4557:19302":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt","st_atime"],"kind":"foreign_type"},"17:11536:15349":{"crate_id":17,"path":["object","macho","FatArch32"],"kind":"struct"},"1:11685:24592":{"crate_id":1,"path":["std","backtrace_rs","symbolize","gimli","mmap","Mmap"],"kind":"struct"},"6:4485:12109":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Shdr"],"kind":"struct"},"6:6548:13189":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","seccomp_notif_sizes"],"kind":"struct"},"1:8139:2141":{"crate_id":1,"path":["std","io","Take"],"kind":"struct"},"5:0:283":{"crate_id":5,"path":["alloc"],"kind":"module"},"2:50634:7625":{"crate_id":2,"path":["core","slice","iter","RChunksExactMut"],"kind":"struct"},"2:11075:8135":{"crate_id":2,"path":["core","slice","GetManyMutError"],"kind":"struct"},"2:47386:7774":{"crate_id":2,"path":["core","char","EscapeDefaultState"],"kind":"enum"},"17:9071:33425":{"crate_id":17,"path":["object","read","any","SymbolTableInternal"],"kind":"enum"},"2:49251:90":{"crate_id":2,"path":["core","sync","atomic","AtomicU64"],"kind":"struct"},"17:12022:18195":{"crate_id":17,"path":["object","macho","TwolevelHint"],"kind":"struct"},"2:51708:158":{"crate_id":2,"path":["core","alloc","layout","Layout"],"kind":"struct"},"2:2815:8014":{"crate_id":2,"path":["core","ops","bit","Not"],"kind":"trait"},"1:8767:2331":{"crate_id":1,"path":["std","process","ExitStatusError"],"kind":"struct"},"1:5482:2333":{"crate_id":1,"path":["std","process","exit"],"kind":"function"},"16:2605:14089":{"crate_id":16,"path":["gimli","common","DebugMacroOffset"],"kind":"struct"},"2:48734:178":{"crate_id":2,"path":["core","option","Option"],"kind":"enum"},"2:21592:27064":{"crate_id":2,"path":["core","num","dec2flt","common","AsciiStr"],"kind":"struct"},"16:6017:15019":{"crate_id":16,"path":["gimli","read","dwarf","DwarfPackage"],"kind":"struct"},"2:12355:202":{"crate_id":2,"path":["core","task","ready","Ready"],"kind":"struct"},"5:6484:7713":{"crate_id":5,"path":["alloc","vec","set_len_on_drop","SetLenOnDrop"],"kind":"struct"},"2:20639:2431":{"crate_id":2,"path":["core","core_simd","elements","int","SimdInt"],"kind":"trait"},"2:9894:2144":{"crate_id":2,"path":["core","slice","iter","Split"],"kind":"struct"},"2:47617:7958":{"crate_id":2,"path":["core","iter","adapters","copied","Copied"],"kind":"struct"},"17:9631:15239":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdatIterator"],"kind":"struct"},"2:48878:207":{"crate_id":2,"path":["core","result","Result"],"kind":"enum"},"2:6656:7944":{"crate_id":2,"path":["core","iter","range","Step"],"kind":"trait"},"16:7942:15092":{"crate_id":16,"path":["gimli","read","unit","EntriesTreeIter"],"kind":"struct"},"17:10822:15199":{"crate_id":17,"path":["object","read","RelocationTarget"],"kind":"enum"},"18:507:33466":{"crate_id":18,"path":["memchr","memmem","genericsimd","Forward"],"kind":"struct"},"5:784:2010":{"crate_id":5,"path":["alloc","collections","binary_heap","PeekMut"],"kind":"struct"},"17:9820:15343":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldSubCache"],"kind":"struct"},"2:47489:8102":{"crate_id":2,"path":["core","ffi","c_str","FromBytesUntilNulError"],"kind":"struct"},"2:47303:27245":{"crate_id":2,"path":["core","char","convert","CharErrorKind"],"kind":"enum"},"6:6991:13561":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","align","clone_args"],"kind":"struct"},"1:5319:2324":{"crate_id":1,"path":["std","process","ChildStdin"],"kind":"struct"},"1:1586:2007":{"crate_id":1,"path":["std","collections","hash","set","Difference"],"kind":"struct"},"9:800:13928":{"crate_id":9,"path":["miniz_oxide","inflate","core","LocalVars"],"kind":"struct"},"16:4413:14652":{"crate_id":16,"path":["gimli","constants","DwVis"],"kind":"struct"},"17:9371:15184":{"crate_id":17,"path":["object","read","coff","symbol","SymbolIterator"],"kind":"struct"},"17:10310:15390":{"crate_id":17,"path":["object","read","pe","section","PeRelocationIterator"],"kind":"struct"},"1:4743:2223":{"crate_id":1,"path":["std","os","fd","owned","AsFd"],"kind":"trait"},"17:13091:19008":{"crate_id":17,"path":["object","pe","ImageBoundForwarderRef"],"kind":"struct"},"17:8526:15148":{"crate_id":17,"path":["object","endian","U16Bytes"],"kind":"struct"},"17:13354:19056":{"crate_id":17,"path":["object","pe","ImageHotPatchHashes"],"kind":"struct"},"17:12972:18969":{"crate_id":17,"path":["object","pe","ImageBaseRelocation"],"kind":"struct"},"16:2509:14085":{"crate_id":16,"path":["gimli","common","LocationListsOffset"],"kind":"struct"},"17:13192:19043":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation32V2"],"kind":"struct"},"12:1518:13997":{"crate_id":12,"path":["hashbrown","rustc_entry","RustcEntry"],"kind":"enum"},"16:4385:14648":{"crate_id":16,"path":["gimli","constants","DwAccess"],"kind":"struct"},"6:0:802":{"crate_id":6,"path":["libc"],"kind":"module"},"17:11873:18185":{"crate_id":17,"path":["object","macho","RoutinesCommand64"],"kind":"struct"},"6:5670:12762":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ntptimeval"],"kind":"struct"},"1:8811:2370":{"crate_id":1,"path":["std","sync","mpsc","SendError"],"kind":"struct"},"2:49854:8118":{"crate_id":2,"path":["core","fmt","FlagV1"],"kind":"enum"},"2:7097:1881":{"crate_id":2,"path":["core","iter","traits","collect","Extend"],"kind":"trait"},"1:3435:20211":{"crate_id":1,"path":["std","io","Write","write_fmt","Adapter"],"kind":"struct"},"2:7516:29020":{"crate_id":2,"path":["core","net","display_buffer","DisplayBuffer"],"kind":"struct"},"2:49500:7574":{"crate_id":2,"path":["core","fmt","num","Octal"],"kind":"struct"},"2:49091:88":{"crate_id":2,"path":["core","sync","atomic","AtomicU16"],"kind":"struct"},"1:7532:24875":{"crate_id":1,"path":["std","backtrace_rs","Bomb"],"kind":"struct"},"1:3051:2174":{"crate_id":1,"path":["std","io","readbuf","BorrowedBuf"],"kind":"struct"},"1:6277:163":{"crate_id":1,"path":["std","sync","mutex","Mutex"],"kind":"struct"},"17:12781:18519":{"crate_id":17,"path":["object","pe","AnonObjectHeaderV2"],"kind":"struct"},"2:53651:2473":{"crate_id":2,"path":["core","core_arch","simd","i64x4"],"kind":"struct"},"9:977:13798":{"crate_id":9,"path":["miniz_oxide","StreamResult"],"kind":"struct"},"1:3342:2130":{"crate_id":1,"path":["std","io","Guard"],"kind":"struct"},"2:1643:7933":{"crate_id":2,"path":["core","mem","Discriminant"],"kind":"struct"},"1:9102:2410":{"crate_id":1,"path":["std","time","SystemTimeError"],"kind":"struct"},"6:4447:12106":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Phdr"],"kind":"struct"},"2:52907:2465":{"crate_id":2,"path":["core","core_arch","simd","i16x8"],"kind":"struct"},"16:7426:15074":{"crate_id":16,"path":["gimli","read","rnglists","RngListIter"],"kind":"struct"},"2:5417:7968":{"crate_id":2,"path":["core","iter","adapters","flatten","FlatMap"],"kind":"struct"},"2:51477:8180":{"crate_id":2,"path":["core","str","UnsafeBytesToStr"],"kind":"struct"},"1:5007:26114":{"crate_id":1,"path":["std","path","fmt","DebugHelper"],"kind":"struct"},"17:13492:19126":{"crate_id":17,"path":["object","pe","ImageCoffSymbolsHeader"],"kind":"struct"},"16:7497:15078":{"crate_id":16,"path":["gimli","read","str","DebugLineStr"],"kind":"struct"},"5:7065:1984":{"crate_id":5,"path":["alloc","collections","TryReserveErrorKind"],"kind":"enum"},"17:11684:18114":{"crate_id":17,"path":["object","macho","Section64"],"kind":"struct"},"2:2511:234":{"crate_id":2,"path":["core","convert","TryFrom"],"kind":"trait"},"17:8475:15144":{"crate_id":17,"path":["object","endian","Endianness"],"kind":"enum"},"1:8176:2181":{"crate_id":1,"path":["std","net","Shutdown"],"kind":"enum"},"6:4249:12085":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_id"],"kind":"struct"},"2:47739:7973":{"crate_id":2,"path":["core","iter","adapters","rev","Rev"],"kind":"struct"},"6:6303:8688":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","flock"],"kind":"struct"},"1:2549:24863":{"crate_id":1,"path":["std","io","buffered","bufwriter","flush_buf","BufGuard"],"kind":"struct"},"1:4666:2229":{"crate_id":1,"path":["std","os","fd","raw","IntoRawFd"],"kind":"trait"},"2:4150:7595":{"crate_id":2,"path":["core","cell","Cell"],"kind":"struct"},"1:7856:2156":{"crate_id":1,"path":["std","io","buffered","IntoInnerError"],"kind":"struct"},"16:5596:15007":{"crate_id":16,"path":["gimli","read","cfi","Augmentation"],"kind":"struct"},"2:11089:7648":{"crate_id":2,"path":["core","str","converts","from_utf8"],"kind":"function"},"6:1580:9722":{"crate_id":6,"path":["libc","unix","linux_like","fd_set"],"kind":"struct"},"2:3151:8023":{"crate_id":2,"path":["core","ops","range","OneSidedRange"],"kind":"trait"},"2:47082:15096":{"crate_id":2,"path":["core","any","tags","Value"],"kind":"struct"},"17:12322:18282":{"crate_id":17,"path":["object","macho","Nlist64"],"kind":"struct"},"5:7081:102":{"crate_id":5,"path":["alloc","ffi","c_str","CString"],"kind":"struct"},"17:11174:15627":{"crate_id":17,"path":["object","elf","Rel64"],"kind":"struct"},"6:5851:11986":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","sysinfo"],"kind":"struct"},"5:6918:1987":{"crate_id":5,"path":["alloc","collections","binary_heap","IntoIter"],"kind":"struct"},"6:4693:12133":{"crate_id":6,"path":["libc","unix","linux_like","linux","in6_ifreq"],"kind":"struct"},"14:215:14008":{"crate_id":14,"path":["rustc_demangle","TryDemangleError"],"kind":"struct"},"18:681:19206":{"crate_id":18,"path":["memchr","memmem","Finder"],"kind":"struct"},"2:53415:2493":{"crate_id":2,"path":["core","core_arch","simd","u64x4"],"kind":"struct"},"6:4284:12089":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_replay"],"kind":"struct"},"6:4290:12090":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_trigger"],"kind":"struct"},"12:1859:2007":{"crate_id":12,"path":["hashbrown","set","Difference"],"kind":"struct"},"2:48802:1986":{"crate_id":2,"path":["core","option","IterMut"],"kind":"struct"},"2:51533:8194":{"crate_id":2,"path":["core","time","TryFromFloatSecsErrorKind"],"kind":"enum"},"16:6171:15028":{"crate_id":16,"path":["gimli","read","abbrev","AttributeSpecification"],"kind":"struct"},"1:5669:2353":{"crate_id":1,"path":["std","sync","barrier","Barrier"],"kind":"struct"},"2:9692:2225":{"crate_id":2,"path":["core","slice","index","private_slice_index","Sealed"],"kind":"trait"},"6:4663:12129":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlmsgerr"],"kind":"struct"},"2:54371:2471":{"crate_id":2,"path":["core","core_arch","simd","i32x16"],"kind":"struct"},"5:1463:2023":{"crate_id":5,"path":["alloc","collections","btree","map","RangeMut"],"kind":"struct"},"17:10608:15190":{"crate_id":17,"path":["object","read","SectionIndex"],"kind":"struct"},"5:688:110":{"crate_id":5,"path":["alloc","borrow","Cow"],"kind":"enum"},"5:6670:31287":{"crate_id":5,"path":["alloc","vec","dedup_by","FillGapOnDrop"],"kind":"struct"},"5:7252:7710":{"crate_id":5,"path":["alloc","vec","splice","Splice"],"kind":"struct"},"6:6419:13180":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","pthread_attr_t"],"kind":"struct"},"2:11482:2318":{"crate_id":2,"path":["core","str","traits","FromStr"],"kind":"trait"},"12:393:32307":{"crate_id":12,"path":["hashbrown","raw","RawIterHashInner"],"kind":"struct"},"2:48010:7946":{"crate_id":2,"path":["core","iter","sources","from_fn","FromFn"],"kind":"struct"},"1:10999:2331":{"crate_id":1,"path":["std","sys","unix","process","process_inner","ExitStatusError"],"kind":"struct"},"1:8805:1987":{"crate_id":1,"path":["std","sync","mpsc","IntoIter"],"kind":"struct"},"2:50876:7659":{"crate_id":2,"path":["core","str","iter","MatchIndices"],"kind":"struct"},"2:21704:27159":{"crate_id":2,"path":["core","num","flt2dec","decoder","Decoded"],"kind":"struct"},"17:13594:19177":{"crate_id":17,"path":["object","pe","ImageCor20Header"],"kind":"struct"},"16:7543:15080":{"crate_id":16,"path":["gimli","read","unit","DebugInfo"],"kind":"struct"},"2:48971:84":{"crate_id":2,"path":["core","sync","atomic","AtomicI8"],"kind":"struct"},"5:5725:2351":{"crate_id":5,"path":["alloc","sync","Weak"],"kind":"struct"},"5:2055:1933":{"crate_id":5,"path":["alloc","collections","btree","mem","replace","PanicGuard"],"kind":"struct"},"1:8917:106":{"crate_id":1,"path":["std","sync","mpmc","context","Context"],"kind":"struct"},"1:10399:2164":{"crate_id":1,"path":["std","sys","unix","stdio","Stdin"],"kind":"struct"},"1:3279:2151":{"crate_id":1,"path":["std","io","stdio","IsTerminal"],"kind":"trait"},"1:8080:2171":{"crate_id":1,"path":["std","io","util","Empty"],"kind":"struct"},"1:11853:631":{"crate_id":1,"path":["std","f32"],"kind":"primitive"},"1:920:1992":{"crate_id":1,"path":["std","collections","hash","map","ValuesMut"],"kind":"struct"},"17:1771:15246":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbolIterator"],"kind":"struct"},"6:4778:12141":{"crate_id":6,"path":["libc","unix","linux_like","linux","mq_attr"],"kind":"struct"},"17:9458:15258":{"crate_id":17,"path":["object","read","elf","file","ElfFile"],"kind":"struct"},"6:1701:9733":{"crate_id":6,"path":["libc","unix","linux_like","mmsghdr"],"kind":"struct"},"2:47096:7752":{"crate_id":2,"path":["core","any","tags","Ref"],"kind":"struct"},"1:1927:2080":{"crate_id":1,"path":["std","error","Indented"],"kind":"struct"},"1:10298:2328":{"crate_id":1,"path":["std","sys","unix","process","process_common","CommandArgs"],"kind":"struct"},"17:11343:15807":{"crate_id":17,"path":["object","elf","NoteHeader64"],"kind":"struct"},"2:50522:7619":{"crate_id":2,"path":["core","slice","iter","ChunksMut"],"kind":"struct"},"17:8339:15169":{"crate_id":17,"path":["object","common","RelocationEncoding"],"kind":"enum"},"17:9897:15347":{"crate_id":17,"path":["object","read","macho","file","MachOComdatSectionIterator"],"kind":"struct"},"17:10332:15391":{"crate_id":17,"path":["object","read","pe","export","ExportTarget"],"kind":"enum"},"2:11747:111":{"crate_id":2,"path":["core","str","lossy","Debug"],"kind":"struct"},"2:50030:7809":{"crate_id":2,"path":["core","hash","sip","SipHasher13"],"kind":"struct"},"17:11974:18192":{"crate_id":17,"path":["object","macho","DylibModule64"],"kind":"struct"},"18:624:33483":{"crate_id":18,"path":["memchr","memmem","twoway","SuffixOrdering"],"kind":"enum"},"5:6963:1987":{"crate_id":5,"path":["alloc","collections","btree","set","IntoIter"],"kind":"struct"},"16:4786:14761":{"crate_id":16,"path":["gimli","constants","DwLns"],"kind":"struct"},"17:13158:19039":{"crate_id":17,"path":["object","pe","ImageLoadConfigCodeIntegrity"],"kind":"struct"},"2:2810:8010":{"crate_id":2,"path":["core","ops","arith","RemAssign"],"kind":"trait"},"2:49371:2352":{"crate_id":2,"path":["core","sync","exclusive","Exclusive"],"kind":"struct"},"16:2389:14080":{"crate_id":16,"path":["gimli","common","DebugAddrIndex"],"kind":"struct"},"1:3197:2167":{"crate_id":1,"path":["std","io","stdio","StdoutLock"],"kind":"struct"},"12:1840:1990":{"crate_id":12,"path":["hashbrown","set","Drain"],"kind":"struct"},"6:6434:13182":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_xmmreg"],"kind":"struct"},"16:4606:14725":{"crate_id":16,"path":["gimli","constants","DwCc"],"kind":"struct"},"17:13059:19005":{"crate_id":17,"path":["object","pe","ImageTlsDirectory32"],"kind":"struct"},"16:5510:15003":{"crate_id":16,"path":["gimli","read","cfi","BaseAddresses"],"kind":"struct"},"2:21645:27153":{"crate_id":2,"path":["core","num","dec2flt","number","Number"],"kind":"struct"},"1:7575:2225":{"crate_id":1,"path":["std","sealed","Sealed"],"kind":"trait"},"15:214:14027":{"crate_id":15,"path":["addr2line","RangeAttributes"],"kind":"struct"},"2:48861:8109":{"crate_id":2,"path":["core","panicking","AssertKind"],"kind":"enum"},"16:8069:127":{"crate_id":16,"path":["gimli","read","Error"],"kind":"enum"},"2:25641:2197":{"crate_id":2,"path":["core","num","wrapping","Wrapping"],"kind":"struct"},"2:47546:2087":{"crate_id":2,"path":["core","ffi","VaList"],"kind":"struct"},"6:4585:12119":{"crate_id":6,"path":["libc","unix","linux_like","linux","regmatch_t"],"kind":"struct"},"16:2579:14088":{"crate_id":16,"path":["gimli","common","DebugMacinfoOffset"],"kind":"struct"},"1:5422:2329":{"crate_id":1,"path":["std","process","Stdio"],"kind":"struct"},"2:47023:1977":{"crate_id":2,"path":["core","ops","range","Bound"],"kind":"enum"},"1:7793:2092":{"crate_id":1,"path":["std","fs","OpenOptions"],"kind":"struct"},"2:53497:2478":{"crate_id":2,"path":["core","core_arch","simd","i8x32"],"kind":"struct"},"6:4525:12112":{"crate_id":6,"path":["libc","unix","linux_like","linux","posix_spawnattr_t"],"kind":"struct"},"2:4353:7754":{"crate_id":2,"path":["core","cell","RefMut"],"kind":"struct"},"17:10854:15201":{"crate_id":17,"path":["object","read","CompressionFormat"],"kind":"enum"},"16:4441:14656":{"crate_id":16,"path":["gimli","constants","DwVirtuality"],"kind":"struct"},"1:6818:24868":{"crate_id":1,"path":["std","sys","common","thread_local","fast_local","fast","Key"],"kind":"struct"},"2:6563:7963":{"crate_id":2,"path":["core","iter","adapters","zip","TrustedRandomAccessNoCoerce"],"kind":"trait"},"2:53029:2458":{"crate_id":2,"path":["core","core_arch","simd","f64x4"],"kind":"struct"},"2:53127:27168":{"crate_id":2,"path":["core","core_arch","simd","m16x8"],"kind":"struct"},"2:20450:29015":{"crate_id":2,"path":["core","core_simd","swizzle","interleave","Lo"],"kind":"struct"},"16:7117:32789":{"crate_id":16,"path":["gimli","read","op","EvaluationState"],"kind":"enum"},"1:8490:2313":{"crate_id":1,"path":["std","path","Ancestors"],"kind":"struct"},"2:54293:2487":{"crate_id":2,"path":["core","core_arch","simd","u16x32"],"kind":"struct"},"7:0:1507":{"crate_id":7,"path":["unwind"],"kind":"module"},"17:10949:15404":{"crate_id":17,"path":["object","elf","FileHeader32"],"kind":"struct"},"1:8781:2332":{"crate_id":1,"path":["std","process","ExitCode"],"kind":"struct"},"2:50614:7626":{"crate_id":2,"path":["core","slice","iter","RChunksMut"],"kind":"struct"},"2:48937:1987":{"crate_id":2,"path":["core","result","IntoIter"],"kind":"struct"},"17:10182:15310":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbol"],"kind":"struct"},"16:7267:15063":{"crate_id":16,"path":["gimli","read","pubnames","PubNamesEntry"],"kind":"struct"},"2:48017:27968":{"crate_id":2,"path":["core","iter","sources","from_generator","FromGenerator"],"kind":"struct"},"2:22201:171":{"crate_id":2,"path":["core","num","nonzero","NonZeroU128"],"kind":"struct"},"2:20405:7787":{"crate_id":2,"path":["core","core_simd","swizzle","reverse","Reverse"],"kind":"struct"},"16:5703:15010":{"crate_id":16,"path":["gimli","read","cfi","FrameDescriptionEntry"],"kind":"struct"},"1:3426:2081":{"crate_id":1,"path":["std","io","Write"],"kind":"trait"},"6:7253:12273":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_mutex_t"],"kind":"struct"},"17:8991:33447":{"crate_id":17,"path":["object","read","any","ComdatIteratorInternal"],"kind":"enum"},"2:3377:7719":{"crate_id":2,"path":["core","any","Provider"],"kind":"trait"},"17:12291:18280":{"crate_id":17,"path":["object","macho","NoteCommand"],"kind":"struct"},"18:590:27929":{"crate_id":18,"path":["memchr","memmem","twoway","TwoWay"],"kind":"struct"},"1:7848:20119":{"crate_id":1,"path":["std","io","buffered","linewritershim","LineWriterShim"],"kind":"struct"},"1:1788:2048":{"crate_id":1,"path":["std","env","VarsOs"],"kind":"struct"},"2:2942:1879":{"crate_id":2,"path":["core","ops","function","FnOnce"],"kind":"trait"},"2:30016:27102":{"crate_id":2,"path":["core","ptr","alignment","AlignmentEnum16"],"kind":"enum"},"17:10350:15198":{"crate_id":17,"path":["object","read","pe","export","Export"],"kind":"struct"},"2:10049:7627":{"crate_id":2,"path":["core","slice","iter","RSplit"],"kind":"struct"},"17:11014:15518":{"crate_id":17,"path":["object","elf","SectionHeader32"],"kind":"struct"},"17:10221:15387":{"crate_id":17,"path":["object","read","pe","file","PeComdatIterator"],"kind":"struct"},"17:13506:19132":{"crate_id":17,"path":["object","pe","ImageDebugMisc"],"kind":"struct"},"16:4262:14621":{"crate_id":16,"path":["gimli","constants","DwAte"],"kind":"struct"},"2:50744:7627":{"crate_id":2,"path":["core","str","iter","RSplit"],"kind":"struct"},"6:6985:13560":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","align","max_align_t"],"kind":"struct"},"12:861:1999":{"crate_id":12,"path":["hashbrown","map","RawEntryBuilder"],"kind":"struct"},"2:52715:2420":{"crate_id":2,"path":["core","core_arch","simd","u8x16"],"kind":"struct"},"6:7289:13749":{"crate_id":6,"path":["libc","unix","linux_like","linux","non_exhaustive","open_how"],"kind":"struct"},"17:9539:15241":{"crate_id":17,"path":["object","read","elf","section","ElfSection"],"kind":"struct"},"2:50085:27946":{"crate_id":2,"path":["core","hash","sip","Sip24Rounds"],"kind":"struct"},"2:22399:166":{"crate_id":2,"path":["core","num","nonzero","NonZeroI128"],"kind":"struct"},"2:57585:243":{"crate_id":2,"path":["core","core_simd","fmt","fmt","Wrapper"],"kind":"struct"},"16:7237:15061":{"crate_id":16,"path":["gimli","read","op","OperationIter"],"kind":"struct"},"17:12337:15200":{"crate_id":17,"path":["object","macho","Relocation"],"kind":"struct"},"5:7006:1987":{"crate_id":5,"path":["alloc","collections","vec_deque","into_iter","IntoIter"],"kind":"struct"},"2:0:487":{"crate_id":2,"path":["core"],"kind":"module"},"16:3402:14108":{"crate_id":16,"path":["gimli","arch","X86"],"kind":"struct"},"2:6805:2171":{"crate_id":2,"path":["core","iter","sources","empty","Empty"],"kind":"struct"},"17:9317:15224":{"crate_id":17,"path":["object","read","coff","section","CoffSegmentIterator"],"kind":"struct"},"1:11859:727":{"crate_id":1,"path":["std","i128"],"kind":"primitive"},"1:11856:729":{"crate_id":1,"path":["std","i16"],"kind":"primitive"},"1:11861:1461":{"crate_id":1,"path":["std","u16"],"kind":"primitive"},"16:6252:15033":{"crate_id":16,"path":["gimli","read","aranges","ArangeEntry"],"kind":"struct"},"2:47089:27744":{"crate_id":2,"path":["core","any","tags","MaybeSizedValue"],"kind":"struct"},"2:51110:7667":{"crate_id":2,"path":["core","str","pattern","SearchStep"],"kind":"enum"},"2:12436:2041":{"crate_id":2,"path":["core","alloc","Allocator"],"kind":"trait"},"9:592:13815":{"crate_id":9,"path":["miniz_oxide","deflate","core","CompressionStrategy"],"kind":"enum"},"2:49757:130":{"crate_id":2,"path":["core","fmt","rt","v1","FormatSpec"],"kind":"struct"},"12:834:1997":{"crate_id":12,"path":["hashbrown","map","RawOccupiedEntryMut"],"kind":"struct"},"2:49796:127":{"crate_id":2,"path":["core","fmt","Error"],"kind":"struct"},"16:6842:32403":{"crate_id":16,"path":["gimli","read","lookup","PubStuffHeader"],"kind":"struct"},"2:21696:27503":{"crate_id":2,"path":["core","num","diy_float","Fp"],"kind":"struct"},"17:10497:15398":{"crate_id":17,"path":["object","read","pe","resource","ResourceNameOrId"],"kind":"enum"},"1:3894:2210":{"crate_id":1,"path":["std","os","unix","fs","FileExt"],"kind":"trait"},"6:554:8815":{"crate_id":6,"path":["libc","unix","winsize"],"kind":"struct"},"2:51178:7675":{"crate_id":2,"path":["core","str","pattern","CharArrayRefSearcher"],"kind":"struct"},"16:6593:15046":{"crate_id":16,"path":["gimli","read","line","CompleteLineProgram"],"kind":"struct"},"1:11825:20321":{"crate_id":1,"path":["std","backtrace_rs","print","PrintFmt"],"kind":"enum"},"2:29974:7709":{"crate_id":2,"path":["core","mem","maybe_uninit","MaybeUninit"],"kind":"union"},"16:5949:15017":{"crate_id":16,"path":["gimli","read","cfi","CallFrameInstructionIter"],"kind":"struct"},"1:10341:24870":{"crate_id":1,"path":["std","sys","unix","stack_overflow","Handler"],"kind":"struct"},"1:1083:2003":{"crate_id":1,"path":["std","collections","hash","map","OccupiedError"],"kind":"struct"},"16:7567:15082":{"crate_id":16,"path":["gimli","read","unit","UnitType"],"kind":"enum"},"2:50930:7661":{"crate_id":2,"path":["core","str","iter","Matches"],"kind":"struct"},"1:7934:26117":{"crate_id":1,"path":["std","io","error","SimpleMessage"],"kind":"struct"},"2:2459:7797":{"crate_id":2,"path":["core","convert","num","FloatToInt"],"kind":"trait"},"2:1737:8052":{"crate_id":2,"path":["core","ptr","metadata","Pointee"],"kind":"trait"},"2:52959:2472":{"crate_id":2,"path":["core","core_arch","simd","i64x2"],"kind":"struct"},"17:9738:15269":{"crate_id":17,"path":["object","read","elf","version","VersionTable"],"kind":"struct"},"2:47687:7970":{"crate_id":2,"path":["core","iter","adapters","inspect","Inspect"],"kind":"struct"},"16:2411:14081":{"crate_id":16,"path":["gimli","common","DebugArangesOffset"],"kind":"struct"},"17:10270:15362":{"crate_id":17,"path":["object","read","pe","section","PeSegment"],"kind":"struct"},"18:574:33466":{"crate_id":18,"path":["memchr","memmem","twoway","Forward"],"kind":"struct"},"2:48852:2294":{"crate_id":2,"path":["core","panic","panic_info","PanicInfo"],"kind":"struct"},"6:5730:12768":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_entry"],"kind":"struct"},"5:2880:31396":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Mut"],"kind":"struct"},"16:6146:15026":{"crate_id":16,"path":["gimli","read","abbrev","Abbreviation"],"kind":"struct"},"2:2936:1877":{"crate_id":2,"path":["core","ops","function","Fn"],"kind":"trait"},"16:5839:15016":{"crate_id":16,"path":["gimli","read","cfi","RegisterRule"],"kind":"enum"},"12:60:32310":{"crate_id":12,"path":["hashbrown","raw","bitmask","BitMaskIter"],"kind":"struct"},"17:12874:18568":{"crate_id":17,"path":["object","pe","ImageSymbolExBytes"],"kind":"struct"},"17:13039:19001":{"crate_id":17,"path":["object","pe","ImageThunkData32"],"kind":"struct"},"1:7699:25487":{"crate_id":1,"path":["std","error","private","Internal"],"kind":"struct"},"6:4136:12075":{"crate_id":6,"path":["libc","unix","linux_like","linux","spwd"],"kind":"struct"},"17:8796:15178":{"crate_id":17,"path":["object","read","util","StringTable"],"kind":"struct"},"17:8162:15164":{"crate_id":17,"path":["object","common","SectionKind"],"kind":"enum"},"1:8923:1938":{"crate_id":1,"path":["std","sync","mpmc","context","Inner"],"kind":"struct"},"2:47813:7977":{"crate_id":2,"path":["core","iter","adapters","take_while","TakeWhile"],"kind":"struct"},"2:20847:2225":{"crate_id":2,"path":["core","core_simd","masks","to_bitmask","sealed","Sealed"],"kind":"trait"},"17:10159:15312":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbolTable"],"kind":"struct"},"2:50702:7650":{"crate_id":2,"path":["core","str","iter","CharIndices"],"kind":"struct"},"2:22069:175":{"crate_id":2,"path":["core","num","nonzero","NonZeroU8"],"kind":"struct"},"17:12909:18633":{"crate_id":17,"path":["object","pe","ImageAuxSymbolFunctionBeginEnd"],"kind":"struct"},"2:21794:2201":{"crate_id":2,"path":["core","num","error","TryFromIntError"],"kind":"struct"},"17:9061:15183":{"crate_id":17,"path":["object","read","any","SymbolTable"],"kind":"struct"},"1:2361:2105":{"crate_id":1,"path":["std","fs","canonicalize"],"kind":"function"},"1:355:1955":{"crate_id":1,"path":["std","thread","scoped","Scope"],"kind":"struct"},"1:8247:2249":{"crate_id":1,"path":["std","os","unix","ucred","UCred"],"kind":"struct"},"2:54183:2467":{"crate_id":2,"path":["core","core_arch","simd","i16x32"],"kind":"struct"},"15:193:14023":{"crate_id":15,"path":["addr2line","LocationRangeUnitIter"],"kind":"struct"},"2:2822:8011":{"crate_id":2,"path":["core","ops","bit","BitAnd"],"kind":"trait"},"17:9909:15303":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandIterator"],"kind":"struct"},"17:11356:15820":{"crate_id":17,"path":["object","elf","HashHeader"],"kind":"struct"},"6:1601:9724":{"crate_id":6,"path":["libc","unix","linux_like","sched_param"],"kind":"struct"},"6:4296:12091":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_envelope"],"kind":"struct"},"2:47001:200":{"crate_id":2,"path":["core","ops","range","RangeToInclusive"],"kind":"struct"},"2:20768:2426":{"crate_id":2,"path":["core","core_simd","masks","mask_impl","Mask"],"kind":"struct"},"2:9869:1986":{"crate_id":2,"path":["core","slice","iter","IterMut"],"kind":"struct"},"18:755:19212":{"crate_id":18,"path":["memchr","memmem","SearcherRev"],"kind":"struct"},"14:31:14005":{"crate_id":14,"path":["rustc_demangle","v0","Demangle"],"kind":"struct"},"1:6875:26718":{"crate_id":1,"path":["std","sys_common","backtrace","_print","DisplayBacktrace"],"kind":"struct"},"2:48685:2186":{"crate_id":2,"path":["core","net","socket_addr","SocketAddr"],"kind":"enum"},"5:864:2011":{"crate_id":5,"path":["alloc","collections","binary_heap","Hole"],"kind":"struct"},"17:12307:18281":{"crate_id":17,"path":["object","macho","Nlist32"],"kind":"struct"},"6:4602:12121":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_tp"],"kind":"struct"},"2:6610:28403":{"crate_id":2,"path":["core","iter","adapters","GenericShunt"],"kind":"struct"},"17:12225:18270":{"crate_id":17,"path":["object","macho","IdentCommand"],"kind":"struct"},"1:3159:2165":{"crate_id":1,"path":["std","io","stdio","StdinLock"],"kind":"struct"},"17:9930:15323":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandData"],"kind":"struct"},"16:3263:14107":{"crate_id":16,"path":["gimli","arch","RiscV"],"kind":"struct"},"6:5871:12801":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","msqid_ds"],"kind":"struct"},"1:1564:1985":{"crate_id":1,"path":["std","collections","hash","set","Iter"],"kind":"struct"},"12:2080:2002":{"crate_id":12,"path":["hashbrown","set","VacantEntry"],"kind":"struct"},"17:9155:15185":{"crate_id":17,"path":["object","read","any","DynamicRelocationIterator"],"kind":"struct"},"17:11106:15588":{"crate_id":17,"path":["object","elf","Sym64"],"kind":"struct"},"2:51025:7655":{"crate_id":2,"path":["core","str","iter","EscapeDebug"],"kind":"struct"},"1:2359:2104":{"crate_id":1,"path":["std","fs","read_link"],"kind":"function"},"16:2993:14103":{"crate_id":16,"path":["gimli","common","DwoId"],"kind":"struct"},"12:2178:32299":{"crate_id":12,"path":["hashbrown","raw","sse2","Group"],"kind":"struct"},"6:1674:9730":{"crate_id":6,"path":["libc","unix","linux_like","arpreq"],"kind":"struct"},"2:54831:7543":{"crate_id":2,"path":["core","core_arch","x86","cpuid","CpuidResult"],"kind":"struct"},"2:58933:27506":{"crate_id":2,"path":["core","core_simd","vector","ptr","SimdMutPtr"],"kind":"struct"},"1:5811:24848":{"crate_id":1,"path":["std","sync","mpmc","array","Channel"],"kind":"struct"},"5:1413:1989":{"crate_id":5,"path":["alloc","collections","btree","map","Values"],"kind":"struct"},"17:10360:15357":{"crate_id":17,"path":["object","read","pe","export","ExportTable"],"kind":"struct"},"17:13168:19040":{"crate_id":17,"path":["object","pe","ImageDynamicRelocationTable"],"kind":"struct"},"16:153:14052":{"crate_id":16,"path":["gimli","read","util","ArrayVec"],"kind":"struct"},"2:50553:7608":{"crate_id":2,"path":["core","slice","iter","ArrayWindows"],"kind":"struct"},"17:9422:15220":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdatIterator"],"kind":"struct"},"1:11038:2122":{"crate_id":1,"path":["std","sys","unix","time","SystemTime"],"kind":"struct"},"2:9702:219":{"crate_id":2,"path":["core","slice","index","SliceIndex"],"kind":"trait"},"16:2300:14076":{"crate_id":16,"path":["gimli","common","LineEncoding"],"kind":"struct"},"5:4818:2130":{"crate_id":5,"path":["alloc","rc","from_iter_exact","Guard"],"kind":"struct"},"17:9671:15259":{"crate_id":17,"path":["object","read","elf","note","NoteIterator"],"kind":"struct"},"6:506:8810":{"crate_id":6,"path":["libc","unix","rusage"],"kind":"struct"},"16:6496:15043":{"crate_id":16,"path":["gimli","read","line","ColumnType"],"kind":"enum"},"1:10926:24851":{"crate_id":1,"path":["std","sys","unix","process","process_inner","posix_spawn","PosixSpawnFileActions"],"kind":"struct"},"2:51687:2500":{"crate_id":2,"path":["core","task","wake","RawWaker"],"kind":"struct"},"1:9987:22753":{"crate_id":1,"path":["std","sys","unix","os","Env"],"kind":"struct"},"17:8137:15163":{"crate_id":17,"path":["object","common","BinaryFormat"],"kind":"enum"},"2:53181:27246":{"crate_id":2,"path":["core","core_arch","simd","m64x2"],"kind":"struct"},"2:12103:135":{"crate_id":2,"path":["core","future","future","Future"],"kind":"trait"},"16:6735:15052":{"crate_id":16,"path":["gimli","read","loclists","RawLocListIter"],"kind":"struct"},"17:420:14049":{"crate_id":17,"path":["object","read","any","Section"],"kind":"struct"},"17:10466:15395":{"crate_id":17,"path":["object","read","pe","resource","ResourceDirectoryTable"],"kind":"struct"},"2:4001:103":{"crate_id":2,"path":["core","asserting","Capture"],"kind":"struct"},"2:53261:2497":{"crate_id":2,"path":["core","core_arch","simd","u8x32"],"kind":"struct"},"6:4317:12094":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_condition_effect"],"kind":"struct"},"2:21820:2203":{"crate_id":2,"path":["core","num","error","IntErrorKind"],"kind":"enum"},"6:5782:12772":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_data"],"kind":"union"},"17:12278:18274":{"crate_id":17,"path":["object","macho","DataInCodeEntry"],"kind":"struct"},"12:822:1996":{"crate_id":12,"path":["hashbrown","map","RawEntryMut"],"kind":"enum"},"17:10520:15399":{"crate_id":17,"path":["object","read","pe","rich","RichHeaderEntry"],"kind":"struct"},"17:247:33451":{"crate_id":17,"path":["object","read","util","DebugLen"],"kind":"struct"},"1:11865:775":{"crate_id":1,"path":["std","isize"],"kind":"primitive"},"6:1586:9723":{"crate_id":6,"path":["libc","unix","linux_like","tm"],"kind":"struct"},"14:202:7690":{"crate_id":14,"path":["rustc_demangle","v0","ParseError"],"kind":"enum"},"5:5549:229":{"crate_id":5,"path":["alloc","string","ToString"],"kind":"trait"},"2:51043:7656":{"crate_id":2,"path":["core","str","iter","EscapeUnicode"],"kind":"struct"},"17:9601:15245":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbol"],"kind":"struct"},"16:6619:15047":{"crate_id":16,"path":["gimli","read","line","FileEntry"],"kind":"struct"},"14:0:1741":{"crate_id":14,"path":["rustc_demangle"],"kind":"module"},"2:2798:2415":{"crate_id":2,"path":["core","ops","arith","SubAssign"],"kind":"trait"},"16:2535:14086":{"crate_id":16,"path":["gimli","common","DebugLocListsBase"],"kind":"struct"},"1:9864:20587":{"crate_id":1,"path":["std","sys","unix","net","Socket"],"kind":"struct"},"2:7125:120":{"crate_id":2,"path":["core","iter","traits","double_ended","DoubleEndedIterator"],"kind":"trait"},"2:54433:2491":{"crate_id":2,"path":["core","core_arch","simd","u32x16"],"kind":"struct"},"5:3872:1990":{"crate_id":5,"path":["alloc","collections","vec_deque","drain","Drain"],"kind":"struct"},"6:6489:13185":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user"],"kind":"struct"},"1:5485:2335":{"crate_id":1,"path":["std","process","Termination"],"kind":"trait"},"2:22300:167":{"crate_id":2,"path":["core","num","nonzero","NonZeroI16"],"kind":"struct"},"1:8970:20798":{"crate_id":1,"path":["std","sync","mpmc","select","Token"],"kind":"struct"},"6:1506:9713":{"crate_id":6,"path":["libc","unix","linux_like","in_addr"],"kind":"struct"},"2:54716:7538":{"crate_id":2,"path":["core","core_arch","x86","__m512"],"kind":"struct"},"2:49784:109":{"crate_id":2,"path":["core","fmt","rt","v1","Count"],"kind":"enum"},"2:47319:7779":{"crate_id":2,"path":["core","char","convert","CharTryFromError"],"kind":"struct"},"1:7810:2094":{"crate_id":1,"path":["std","fs","Permissions"],"kind":"struct"},"16:4635:14730":{"crate_id":16,"path":["gimli","constants","DwInl"],"kind":"struct"},"2:46882:8022":{"crate_id":2,"path":["core","ops","index_range","IndexRange"],"kind":"struct"},"1:588:1959":{"crate_id":1,"path":["std","ascii","AsciiExt"],"kind":"trait"},"2:2827:8012":{"crate_id":2,"path":["core","ops","bit","BitOr"],"kind":"trait"},"1:4976:26114":{"crate_id":1,"path":["std","path","fmt","DebugHelper"],"kind":"struct"},"1:7939:20784":{"crate_id":1,"path":["std","io","error","Custom"],"kind":"struct"},"1:6350:1972":{"crate_id":1,"path":["std","sync","once","Once"],"kind":"struct"},"1:8220:2247":{"crate_id":1,"path":["std","os","unix","net","ancillary","SocketCred"],"kind":"struct"},"2:46937:196":{"crate_id":2,"path":["core","ops","range","RangeFrom"],"kind":"struct"},"1:1771:599":{"crate_id":1,"path":["std","env"],"kind":"module"},"16:2894:14101":{"crate_id":16,"path":["gimli","common","UnitSectionOffset"],"kind":"enum"},"5:1612:31279":{"crate_id":5,"path":["alloc","collections","btree","map","drop","DropGuard"],"kind":"struct"},"17:9681:15293":{"crate_id":17,"path":["object","read","elf","note","Note"],"kind":"struct"},"13:108:32357":{"crate_id":13,"path":["std_detect","detect","arch","x86","Feature"],"kind":"enum"},"2:47586:2036":{"crate_id":2,"path":["core","iter","adapters","by_ref_sized","ByRefSized"],"kind":"struct"},"2:2680:7564":{"crate_id":2,"path":["core","marker","Unsize"],"kind":"trait"},"2:9026:7581":{"crate_id":2,"path":["core","fmt","UpperExp"],"kind":"trait"},"2:29757:2198":{"crate_id":2,"path":["core","num","FpCategory"],"kind":"enum"},"17:12926:18634":{"crate_id":17,"path":["object","pe","ImageAuxSymbolWeak"],"kind":"struct"},"16:4921:14800":{"crate_id":16,"path":["gimli","constants","DwRle"],"kind":"struct"},"16:5525:15004":{"crate_id":16,"path":["gimli","read","cfi","SectionBaseAddresses"],"kind":"struct"},"17:11161:15626":{"crate_id":17,"path":["object","elf","Rela32"],"kind":"struct"},"6:7218:12268":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_mutexattr_t"],"kind":"struct"},"16:6829:32731":{"crate_id":16,"path":["gimli","read","lookup","LookupEntryIter"],"kind":"struct"},"17:8510:14041":{"crate_id":17,"path":["object","endian","BigEndian"],"kind":"struct"},"18:707:7642":{"crate_id":18,"path":["memchr","memmem","Searcher"],"kind":"struct"},"17:487:15161":{"crate_id":17,"path":["object","read","any","Comdat"],"kind":"struct"},"2:51290:7678":{"crate_id":2,"path":["core","str","pattern","StrSearcher"],"kind":"struct"},"17:10403:15197":{"crate_id":17,"path":["object","read","pe","import","Import"],"kind":"enum"},"2:12313:106":{"crate_id":2,"path":["core","task","wake","Context"],"kind":"struct"},"17:10296:15360":{"crate_id":17,"path":["object","read","pe","section","PeSection"],"kind":"struct"},"5:3568:31279":{"crate_id":5,"path":["alloc","collections","linked_list","drop","DropGuard"],"kind":"struct"},"17:0:1744":{"crate_id":17,"path":["object"],"kind":"module"},"1:11864:1460":{"crate_id":1,"path":["std","u128"],"kind":"primitive"},"2:50038:27930":{"crate_id":2,"path":["core","hash","sip","SipHasher24"],"kind":"struct"},"6:1744:9737":{"crate_id":6,"path":["libc","unix","linux_like","sigevent"],"kind":"struct"},"17:13031:19000":{"crate_id":17,"path":["object","pe","ImageThunkData64"],"kind":"struct"},"5:3680:1991":{"crate_id":5,"path":["alloc","collections","linked_list","DrainFilter"],"kind":"struct"},"2:50670:7657":{"crate_id":2,"path":["core","str","error","Utf8Error"],"kind":"struct"},"9:863:13793":{"crate_id":9,"path":["miniz_oxide","MZFlush"],"kind":"enum"},"6:1692:9732":{"crate_id":6,"path":["libc","unix","linux_like","arphdr"],"kind":"struct"},"17:9947:15348":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandVariant"],"kind":"enum"},"12:119:32293":{"crate_id":12,"path":["hashbrown","raw","RawTable"],"kind":"struct"},"2:50055:144":{"crate_id":2,"path":["core","hash","sip","Hasher"],"kind":"struct"},"17:12850:18565":{"crate_id":17,"path":["object","pe","ImageSymbolBytes"],"kind":"struct"},"6:6963:8766":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","not_x32","statvfs"],"kind":"struct"},"1:8152:2144":{"crate_id":1,"path":["std","io","Split"],"kind":"struct"},"17:1931:15240":{"crate_id":17,"path":["object","read","elf","relocation","ElfDynamicRelocationIterator"],"kind":"struct"},"1:7695:2061":{"crate_id":1,"path":["std","env","JoinPathsError"],"kind":"struct"},"2:53621:2470":{"crate_id":2,"path":["core","core_arch","simd","i32x8"],"kind":"struct"},"2:52983:2454":{"crate_id":2,"path":["core","core_arch","simd","f32x4"],"kind":"struct"},"18:491:33462":{"crate_id":18,"path":["memchr","cow","Imp"],"kind":"struct"},"1:5233:119":{"crate_id":1,"path":["std","path","Display"],"kind":"struct"},"2:3326:68":{"crate_id":2,"path":["core","any","Any"],"kind":"trait"},"2:8966:131":{"crate_id":2,"path":["core","fmt","Formatter"],"kind":"struct"},"17:13114:19011":{"crate_id":17,"path":["object","pe","ImageResourceDirectory"],"kind":"struct"},"16:5494:15002":{"crate_id":16,"path":["gimli","read","cfi","CieOffsetEncoding"],"kind":"enum"},"5:6949:31370":{"crate_id":5,"path":["alloc","collections","btree","merge_iter","Peeked"],"kind":"enum"},"2:48033:7948":{"crate_id":2,"path":["core","iter","sources","once_with","OnceWith"],"kind":"struct"},"1:3916:2212":{"crate_id":1,"path":["std","os","unix","fs","OpenOptionsExt"],"kind":"trait"},"1:8324:2286":{"crate_id":1,"path":["std","panic","BacktraceStyle"],"kind":"enum"},"17:13141:19016":{"crate_id":17,"path":["object","pe","ImageResourceDirStringU"],"kind":"struct"},"17:11951:18191":{"crate_id":17,"path":["object","macho","DylibModule32"],"kind":"struct"},"12:444:141":{"crate_id":12,"path":["hashbrown","map","HashMap"],"kind":"struct"},"16:5447:14999":{"crate_id":16,"path":["gimli","read","cfi","EhHdrTableIter"],"kind":"struct"},"1:962:1999":{"crate_id":1,"path":["std","collections","hash","map","RawEntryBuilder"],"kind":"struct"},"1:10631:22762":{"crate_id":1,"path":["std","sys","unix","fs","FileAttr"],"kind":"struct"},"2:47655:7967":{"crate_id":2,"path":["core","iter","adapters","filter_map","FilterMap"],"kind":"struct"},"2:47678:7969":{"crate_id":2,"path":["core","iter","adapters","fuse","Fuse"],"kind":"struct"},"2:9012:119":{"crate_id":2,"path":["core","fmt","Display"],"kind":"trait"},"1:7840:118":{"crate_id":1,"path":["std","fs","DirBuilder"],"kind":"struct"},"14:165:14006":{"crate_id":14,"path":["rustc_demangle","DemangleStyle"],"kind":"enum"},"2:2806:8008":{"crate_id":2,"path":["core","ops","arith","DivAssign"],"kind":"trait"},"1:1849:2067":{"crate_id":1,"path":["std","env","ArgsOs"],"kind":"struct"},"1:11857:730":{"crate_id":1,"path":["std","i32"],"kind":"primitive"},"2:1552:2130":{"crate_id":2,"path":["core","mem","maybe_uninit","write_slice_cloned","Guard"],"kind":"struct"},"2:47764:7975":{"crate_id":2,"path":["core","iter","adapters","skip","Skip"],"kind":"struct"},"2:48810:1987":{"crate_id":2,"path":["core","option","IntoIter"],"kind":"struct"},"2:2301:185":{"crate_id":2,"path":["core","cmp","PartialEq"],"kind":"trait"},"16:6161:15027":{"crate_id":16,"path":["gimli","read","abbrev","Attributes"],"kind":"enum"},"1:11844:1480":{"crate_id":1,"path":["std","unit"],"kind":"primitive"},"6:4561:12116":{"crate_id":6,"path":["libc","unix","linux_like","linux","inotify_event"],"kind":"struct"},"6:562:8816":{"crate_id":6,"path":["libc","unix","linger"],"kind":"struct"},"17:1962:15264":{"crate_id":17,"path":["object","read","elf","relocation","ElfSectionRelocationIterator"],"kind":"struct"},"2:2763:2412":{"crate_id":2,"path":["core","ops","arith","Add"],"kind":"trait"},"2:21539:27486":{"crate_id":2,"path":["core","num","bignum","tests","Big8x3"],"kind":"struct"},"17:9873:15345":{"crate_id":17,"path":["object","read","macho","file","MachOComdatIterator"],"kind":"struct"},"5:3611:2024":{"crate_id":5,"path":["alloc","collections","linked_list","Cursor"],"kind":"struct"},"16:5433:14998":{"crate_id":16,"path":["gimli","read","cfi","ParsedEhFrameHdr"],"kind":"struct"},"12:646:1986":{"crate_id":12,"path":["hashbrown","map","IterMut"],"kind":"struct"},"6:4267:12087":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_keymap_entry"],"kind":"struct"},"1:6114:20737":{"crate_id":1,"path":["std","sync","mpmc","zero","ZeroToken"],"kind":"struct"},"2:20433:28957":{"crate_id":2,"path":["core","core_simd","swizzle","rotate_lanes_right","Rotate"],"kind":"struct"},"6:568:8817":{"crate_id":6,"path":["libc","unix","sigval"],"kind":"struct"},"5:4034:2130":{"crate_id":5,"path":["alloc","collections","vec_deque","into_iter","try_fold","Guard"],"kind":"struct"},"5:1443:1994":{"crate_id":5,"path":["alloc","collections","btree","map","IntoValues"],"kind":"struct"},"17:13393:19094":{"crate_id":17,"path":["object","pe","ImageAlphaRuntimeFunctionEntry"],"kind":"struct"},"13:0:1734":{"crate_id":13,"path":["std_detect"],"kind":"module"},"17:9501:15228":{"crate_id":17,"path":["object","read","elf","section","SectionTable"],"kind":"struct"},"2:47416:7776":{"crate_id":2,"path":["core","char","ToUppercase"],"kind":"struct"},"1:11809:20790":{"crate_id":1,"path":["std","backtrace_rs","symbolize","gimli","Cache"],"kind":"struct"},"16:6877:15056":{"crate_id":16,"path":["gimli","read","op","DieReference"],"kind":"enum"},"12:1044:13994":{"crate_id":12,"path":["hashbrown","map","EntryRef"],"kind":"enum"},"6:1606:9725":{"crate_id":6,"path":["libc","unix","linux_like","Dl_info"],"kind":"struct"},"1:8474:2311":{"crate_id":1,"path":["std","path","Components"],"kind":"struct"},"17:9751:15267":{"crate_id":17,"path":["object","read","elf","version","VerdefIterator"],"kind":"struct"},"17:13214:19050":{"crate_id":17,"path":["object","pe","ImagePrologueDynamicRelocationHeader"],"kind":"struct"},"16:3632:14135":{"crate_id":16,"path":["gimli","constants","DwUt"],"kind":"struct"},"16:3566:14117":{"crate_id":16,"path":["gimli","constants","DwSect"],"kind":"struct"},"17:10075:15307":{"crate_id":17,"path":["object","read","macho","segment","MachOSegment"],"kind":"struct"},"2:4344:7753":{"crate_id":2,"path":["core","cell","BorrowRefMut"],"kind":"struct"},"12:1138:2003":{"crate_id":12,"path":["hashbrown","map","OccupiedError"],"kind":"struct"},"6:4550:12115":{"crate_id":6,"path":["libc","unix","linux_like","linux","arpd_request"],"kind":"struct"},"1:10210:25856":{"crate_id":1,"path":["std","sys","unix","process","process_common","Argv"],"kind":"struct"},"6:4716:12135":{"crate_id":6,"path":["libc","unix","linux_like","linux","dirent"],"kind":"struct"},"1:1575:1991":{"crate_id":1,"path":["std","collections","hash","set","DrainFilter"],"kind":"struct"},"16:7357:15071":{"crate_id":16,"path":["gimli","read","rnglists","RangeLists"],"kind":"struct"},"1:11447:7544":{"crate_id":1,"path":["std","alloc","System"],"kind":"struct"},"2:2921:2020":{"crate_id":2,"path":["core","ops","deref","DerefMut"],"kind":"trait"},"6:4826:12146":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_can"],"kind":"struct"},"17:11330:15806":{"crate_id":17,"path":["object","elf","NoteHeader32"],"kind":"struct"},"6:4216:11926":{"crate_id":6,"path":["libc","unix","linux_like","linux","if_nameindex"],"kind":"struct"},"2:48870:190":{"crate_id":2,"path":["core","pin","Pin"],"kind":"struct"},"5:3093:2007":{"crate_id":5,"path":["alloc","collections","btree","set","Difference"],"kind":"struct"},"17:9401:15225":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbol"],"kind":"struct"},"16:6743:15053":{"crate_id":16,"path":["gimli","read","loclists","RawLocListEntry"],"kind":"enum"},"2:47103:7729":{"crate_id":2,"path":["core","array","TryFromSliceError"],"kind":"struct"},"2:51634:202":{"crate_id":2,"path":["core","future","ready","Ready"],"kind":"struct"},"16:5963:191":{"crate_id":16,"path":["gimli","read","cfi","Pointer"],"kind":"enum"},"16:2793:14097":{"crate_id":16,"path":["gimli","common","DebugTypesOffset"],"kind":"struct"},"6:6510:13186":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","mcontext_t"],"kind":"struct"},"16:4662:14733":{"crate_id":16,"path":["gimli","constants","DwOrd"],"kind":"struct"},"1:8843:2372":{"crate_id":1,"path":["std","sync","mpsc","TryRecvError"],"kind":"enum"},"1:4239:2246":{"crate_id":1,"path":["std","os","unix","net","listener","UnixListener"],"kind":"struct"},"1:11151:2339":{"crate_id":1,"path":["std","sys_common","process","CommandEnvs"],"kind":"struct"},"5:3132:31411":{"crate_id":5,"path":["alloc","collections","btree","set","IntersectionInner"],"kind":"enum"},"17:13478:19108":{"crate_id":17,"path":["object","pe","ImageDebugDirectory"],"kind":"struct"},"2:52360:2495":{"crate_id":2,"path":["core","core_arch","simd","u8x4"],"kind":"struct"},"17:9118:33424":{"crate_id":17,"path":["object","read","any","SymbolIteratorInternal"],"kind":"enum"},"6:1707:9734":{"crate_id":6,"path":["libc","unix","linux_like","epoll_event"],"kind":"struct"},"1:3119:25773":{"crate_id":1,"path":["std","io","stdio","StdinRaw"],"kind":"struct"},"2:11271:8186":{"crate_id":2,"path":["core","str","iter","SplitNInternal"],"kind":"struct"},"2:2498:74":{"crate_id":2,"path":["core","convert","AsMut"],"kind":"trait"},"2:49507:7582":{"crate_id":2,"path":["core","fmt","num","LowerHex"],"kind":"struct"},"12:815:1995":{"crate_id":12,"path":["hashbrown","map","RawEntryBuilderMut"],"kind":"struct"},"17:12198:18268":{"crate_id":17,"path":["object","macho","LinkerOptionCommand"],"kind":"struct"},"2:21808:2200":{"crate_id":2,"path":["core","num","error","ParseIntError"],"kind":"struct"},"5:6909:2042":{"crate_id":5,"path":["alloc","alloc","Global"],"kind":"struct"},"17:11288:15801":{"crate_id":17,"path":["object","elf","Verdaux"],"kind":"struct"},"2:21613:27221":{"crate_id":2,"path":["core","num","dec2flt","common","BiasedFp"],"kind":"struct"},"18:636:33484":{"crate_id":18,"path":["memchr","memmem","twoway","ApproximateByteSet"],"kind":"struct"},"2:1636:578":{"crate_id":2,"path":["core","mem","drop"],"kind":"function"},"6:494:8808":{"crate_id":6,"path":["libc","unix","timespec"],"kind":"struct"},"16:7396:15073":{"crate_id":16,"path":["gimli","read","rnglists","RawRngListEntry"],"kind":"enum"},"17:13024:18999":{"crate_id":17,"path":["object","pe","ImageImportByName"],"kind":"struct"},"1:3765:2194":{"crate_id":1,"path":["std","net","udp","UdpSocket"],"kind":"struct"},"17:9031:33436":{"crate_id":17,"path":["object","read","any","ComdatSectionIteratorInternal"],"kind":"enum"},"16:7166:15059":{"crate_id":16,"path":["gimli","read","op","EvaluationResult"],"kind":"enum"},"12:2184:28758":{"crate_id":12,"path":["hashbrown","raw","bitmask","BitMask"],"kind":"struct"},"6:4736:12137":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_alg"],"kind":"struct"},"2:48929:1986":{"crate_id":2,"path":["core","result","IterMut"],"kind":"struct"},"6:474:8805":{"crate_id":6,"path":["libc","unix","group"],"kind":"struct"},"1:2343:2099":{"crate_id":1,"path":["std","fs","metadata"],"kind":"function"},"2:7475:2017":{"crate_id":2,"path":["core","iter","traits","marker","TrustedLen"],"kind":"trait"},"16:3854:14285":{"crate_id":16,"path":["gimli","constants","DwTag"],"kind":"struct"},"5:6351:31279":{"crate_id":5,"path":["alloc","vec","into_iter","drop","DropGuard"],"kind":"struct"},"2:49870:73":{"crate_id":2,"path":["core","fmt","Arguments"],"kind":"struct"},"2:11546:7639":{"crate_id":2,"path":["core","str","pattern","DoubleEndedSearcher"],"kind":"trait"},"2:49733:67":{"crate_id":2,"path":["core","fmt","Alignment"],"kind":"enum"},"6:4201:12080":{"crate_id":6,"path":["libc","unix","linux_like","linux","packet_mreq"],"kind":"struct"},"17:10321:15356":{"crate_id":17,"path":["object","read","pe","data_directory","DataDirectories"],"kind":"struct"},"2:47799:2141":{"crate_id":2,"path":["core","iter","adapters","take","Take"],"kind":"struct"},"2:50624:7624":{"crate_id":2,"path":["core","slice","iter","RChunksExact"],"kind":"struct"},"1:5546:2368":{"crate_id":1,"path":["std","sync","mpsc","Sender"],"kind":"struct"},"2:50894:7660":{"crate_id":2,"path":["core","str","iter","RMatchIndices"],"kind":"struct"},"2:54041:2498":{"crate_id":2,"path":["core","core_arch","simd","u8x64"],"kind":"struct"},"1:8859:2373":{"crate_id":1,"path":["std","sync","mpsc","RecvTimeoutError"],"kind":"enum"},"14:160:14005":{"crate_id":14,"path":["rustc_demangle","Demangle"],"kind":"struct"},"2:10014:7634":{"crate_id":2,"path":["core","slice","iter","SplitInclusiveMut"],"kind":"struct"},"2:52650:2453":{"crate_id":2,"path":["core","core_arch","simd","f32x2"],"kind":"struct"},"2:52561:2476":{"crate_id":2,"path":["core","core_arch","simd","i8x8"],"kind":"struct"},"17:3125:15311":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbolIterator"],"kind":"struct"},"2:51018:7645":{"crate_id":2,"path":["core","str","iter","EncodeUtf16"],"kind":"struct"},"6:4234:12083":{"crate_id":6,"path":["libc","unix","linux_like","linux","sembuf"],"kind":"struct"},"2:8737:28466":{"crate_id":2,"path":["core","fmt","builders","PadAdapterState"],"kind":"struct"},"2:52791:2489":{"crate_id":2,"path":["core","core_arch","simd","u32x4"],"kind":"struct"},"2:46979:198":{"crate_id":2,"path":["core","ops","range","RangeInclusive"],"kind":"struct"},"3:0:434":{"crate_id":3,"path":["compiler_builtins"],"kind":"module"},"17:9250:15209":{"crate_id":17,"path":["object","read","archive","ArchiveFile"],"kind":"struct"},"1:10641:2092":{"crate_id":1,"path":["std","sys","unix","fs","OpenOptions"],"kind":"struct"},"6:595:8821":{"crate_id":6,"path":["libc","unix","protoent"],"kind":"struct"},"16:2631:14090":{"crate_id":16,"path":["gimli","common","RawRangeListsOffset"],"kind":"struct"},"6:4437:12105":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Sym"],"kind":"struct"},"17:12739:18473":{"crate_id":17,"path":["object","pe","ImageNtHeaders32"],"kind":"struct"},"1:6519:2365":{"crate_id":1,"path":["std","sync","remutex","ReentrantMutex"],"kind":"struct"},"1:6169:2368":{"crate_id":1,"path":["std","sync","mpmc","Sender"],"kind":"struct"},"6:119:8487":{"crate_id":6,"path":["libc","unix","FILE"],"kind":"enum"},"2:52631:27063":{"crate_id":2,"path":["core","core_arch","simd","i64x1"],"kind":"struct"},"1:2213:2095":{"crate_id":1,"path":["std","fs","read"],"kind":"function"},"12:810:1992":{"crate_id":12,"path":["hashbrown","map","ValuesMut"],"kind":"struct"},"17:12955:18648":{"crate_id":17,"path":["object","pe","ImageRelocation"],"kind":"struct"},"2:2849:8017":{"crate_id":2,"path":["core","ops","bit","BitAndAssign"],"kind":"trait"},"5:3488:1985":{"crate_id":5,"path":["alloc","collections","linked_list","Iter"],"kind":"struct"},"1:9364:128":{"crate_id":1,"path":["std","sys","unix","fs","File"],"kind":"struct"},"17:9644:15238":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdat"],"kind":"struct"},"2:53158:27217":{"crate_id":2,"path":["core","core_arch","simd","m32x4"],"kind":"struct"},"1:939:1996":{"crate_id":1,"path":["std","collections","hash","map","RawEntryMut"],"kind":"enum"},"2:20727:2425":{"crate_id":2,"path":["core","core_simd","lane_count","SupportedLaneCount"],"kind":"trait"},"16:2868:14100":{"crate_id":16,"path":["gimli","common","EhFrameOffset"],"kind":"struct"},"5:4297:31273":{"crate_id":5,"path":["alloc","collections","vec_deque","truncate","Dropper"],"kind":"struct"},"2:20665:2432":{"crate_id":2,"path":["core","core_simd","elements","uint","SimdUint"],"kind":"trait"},"16:6070:15022":{"crate_id":16,"path":["gimli","read","endian_slice","EndianSlice"],"kind":"struct"},"0:0:1637":{"crate_id":0,"path":["winapi"],"kind":"module"},"17:11271:15794":{"crate_id":17,"path":["object","elf","Verdef"],"kind":"struct"},"2:48039:2172":{"crate_id":2,"path":["core","iter","sources","repeat","Repeat"],"kind":"struct"},"1:4559:19304":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt","st_mtime"],"kind":"foreign_type"},"1:11814:1971":{"crate_id":1,"path":["std","backtrace_rs","types","BytesOrWideString"],"kind":"enum"},"1:3444:2117":{"crate_id":1,"path":["std","io","Seek"],"kind":"trait"},"17:11576:18005":{"crate_id":17,"path":["object","macho","MachHeader64"],"kind":"struct"},"16:5981:32777":{"crate_id":16,"path":["gimli","read","cfi","PointerEncodingParameters"],"kind":"struct"},"18:671:19205":{"crate_id":18,"path":["memchr","memmem","FindRevIter"],"kind":"struct"},"16:6059:32773":{"crate_id":16,"path":["gimli","read","dwarf","RangeIterInner"],"kind":"enum"},"9:188:13846":{"crate_id":9,"path":["miniz_oxide","deflate","core","HuffmanOxide"],"kind":"struct"},"5:3699:31279":{"crate_id":5,"path":["alloc","collections","linked_list","drop","DropGuard"],"kind":"struct"},"17:11217:15630":{"crate_id":17,"path":["object","elf","ProgramHeader64"],"kind":"struct"},"1:8047:2113":{"crate_id":1,"path":["std","io","readbuf","BorrowedCursor"],"kind":"struct"},"17:11893:18186":{"crate_id":17,"path":["object","macho","SymtabCommand"],"kind":"struct"},"1:11248:24868":{"crate_id":1,"path":["std","sys_common","thread_local_key","Key"],"kind":"struct"},"2:47409:7775":{"crate_id":2,"path":["core","char","ToLowercase"],"kind":"struct"},"6:5514:12752":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__timeval"],"kind":"struct"},"5:781:96":{"crate_id":5,"path":["alloc","collections","binary_heap","BinaryHeap"],"kind":"struct"},"16:6668:32696":{"crate_id":16,"path":["gimli","read","lists","ListsHeader"],"kind":"struct"},"6:6564:13191":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user_fpregs_struct"],"kind":"struct"},"1:3858:2209":{"crate_id":1,"path":["std","os","unix","ffi","os_str","OsStringExt"],"kind":"trait"},"5:3943:1986":{"crate_id":5,"path":["alloc","collections","vec_deque","iter_mut","IterMut"],"kind":"struct"},"5:5705:69":{"crate_id":5,"path":["alloc","sync","Arc"],"kind":"struct"},"17:10385:15392":{"crate_id":17,"path":["object","read","pe","import","ImportDescriptorIterator"],"kind":"struct"},"12:387:32311":{"crate_id":12,"path":["hashbrown","raw","RawIterHash"],"kind":"struct"},"17:9108:15184":{"crate_id":17,"path":["object","read","any","SymbolIterator"],"kind":"struct"},"2:54769:7541":{"crate_id":2,"path":["core","core_arch","x86","__m256bh"],"kind":"struct"},"6:7236:12271":{"crate_id":6,"path":["libc","unix","linux_like","linux","fanotify_event_metadata"],"kind":"struct"},"5:6601:241":{"crate_id":5,"path":["alloc","vec","Vec"],"kind":"struct"},"9:19:13866":{"crate_id":9,"path":["miniz_oxide","deflate","buffer","HashBuffers"],"kind":"struct"},"18:515:19217":{"crate_id":18,"path":["memchr","memmem","prefilter","PrefilterFn"],"kind":"struct"},"17:9293:15229":{"crate_id":17,"path":["object","read","coff","file","CoffFile"],"kind":"struct"},"2:3389:7723":{"crate_id":2,"path":["core","any","Demand"],"kind":"struct"},"17:10490:15397":{"crate_id":17,"path":["object","read","pe","resource","ResourceName"],"kind":"struct"},"16:5780:15013":{"crate_id":16,"path":["gimli","read","cfi","RegisterRuleIter"],"kind":"struct"},"1:7592:1937":{"crate_id":1,"path":["std","thread","ThreadId"],"kind":"struct"},"17:12251:18272":{"crate_id":17,"path":["object","macho","EntryPointCommand"],"kind":"struct"},"16:7483:15077":{"crate_id":16,"path":["gimli","read","str","DebugStrOffsets"],"kind":"struct"},"16:6109:15023":{"crate_id":16,"path":["gimli","read","reader","ReaderOffsetId"],"kind":"struct"},"1:8225:2248":{"crate_id":1,"path":["std","os","unix","net","ancillary","AncillaryError"],"kind":"enum"},"15:175:14022":{"crate_id":15,"path":["addr2line","LocationRangeIter"],"kind":"struct"},"13:220:32312":{"crate_id":13,"path":["std_detect","detect","cache","Initializer"],"kind":"struct"},"9:382:13901":{"crate_id":9,"path":["miniz_oxide","inflate","core","DecompressorOxide"],"kind":"struct"},"2:52937:2469":{"crate_id":2,"path":["core","core_arch","simd","i32x4"],"kind":"struct"},"2:54655:7533":{"crate_id":2,"path":["core","core_arch","x86","__m128d"],"kind":"struct"},"5:2094:31360":{"crate_id":5,"path":["alloc","collections","btree","navigate","LeafRange"],"kind":"struct"},"17:8752:2142":{"crate_id":17,"path":["object","read","util","Bytes"],"kind":"struct"},"5:1959:2024":{"crate_id":5,"path":["alloc","collections","btree","map","Cursor"],"kind":"struct"},"2:9500:24863":{"crate_id":2,"path":["core","slice","sort","merge_sort","BufGuard"],"kind":"struct"},"1:3157:2164":{"crate_id":1,"path":["std","io","stdio","Stdin"],"kind":"struct"},"1:5891:2368":{"crate_id":1,"path":["std","sync","mpmc","counter","Sender"],"kind":"struct"},"2:21681:27214":{"crate_id":2,"path":["core","num","dec2flt","FloatErrorKind"],"kind":"enum"},"1:6217:203":{"crate_id":1,"path":["std","sync","mpmc","Receiver"],"kind":"struct"},"2:4227:7746":{"crate_id":2,"path":["core","cell","BorrowMutError"],"kind":"struct"},"12:777:13992":{"crate_id":12,"path":["hashbrown","map","ConsumeAllOnDrop"],"kind":"struct"},"1:9064:2377":{"crate_id":1,"path":["std","time","Instant"],"kind":"struct"},"1:2573:2147":{"crate_id":1,"path":["std","io","buffered","bufwriter","WriterPanicked"],"kind":"struct"},"2:54739:7539":{"crate_id":2,"path":["core","core_arch","x86","__m512d"],"kind":"struct"},"6:5482:12749":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","statx_timestamp"],"kind":"struct"},"16:7659:15085":{"crate_id":16,"path":["gimli","read","unit","AttributeValue"],"kind":"enum"},"1:10831:20331":{"crate_id":1,"path":["std","sys","unix","process","process_common","ProgramKind"],"kind":"enum"},"1:4159:2245":{"crate_id":1,"path":["std","os","unix","net","datagram","UnixDatagram"],"kind":"struct"},"16:4144:14551":{"crate_id":16,"path":["gimli","constants","DwAt"],"kind":"struct"},"2:9230:140":{"crate_id":2,"path":["core","hash","Hash"],"kind":"trait"},"2:20880:2426":{"crate_id":2,"path":["core","core_simd","masks","Mask"],"kind":"struct"},"2:48543:152":{"crate_id":2,"path":["core","net","ip_addr","IpAddr"],"kind":"enum"},"2:7148:1880":{"crate_id":2,"path":["core","iter","traits","exact_size","ExactSizeIterator"],"kind":"trait"},"1:7788:2090":{"crate_id":1,"path":["std","fs","ReadDir"],"kind":"struct"},"6:4814:12144":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_txtime"],"kind":"struct"},"12:2053:2000":{"crate_id":12,"path":["hashbrown","set","Entry"],"kind":"enum"},"1:7823:129":{"crate_id":1,"path":["std","fs","FileType"],"kind":"struct"},"17:9283:15231":{"crate_id":17,"path":["object","read","coff","file","CoffCommon"],"kind":"struct"},"2:51473:8179":{"crate_id":2,"path":["core","str","BytesIsNotEmpty"],"kind":"struct"},"2:4299:7752":{"crate_id":2,"path":["core","cell","Ref"],"kind":"struct"},"2:29940:2019":{"crate_id":2,"path":["core","mem","manually_drop","ManuallyDrop"],"kind":"struct"},"17:13382:19093":{"crate_id":17,"path":["object","pe","ImageAlpha64RuntimeFunctionEntry"],"kind":"struct"},"16:5628:15008":{"crate_id":16,"path":["gimli","read","cfi","CommonInformationEntry"],"kind":"struct"},"7:79:13773":{"crate_id":7,"path":["unwind","libunwind","_Unwind_Action"],"kind":"enum"},"17:9165:33426":{"crate_id":17,"path":["object","read","any","DynamicRelocationIteratorInternal"],"kind":"enum"},"6:5723:12767":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ptrace_peeksiginfo_args"],"kind":"struct"},"17:11748:18176":{"crate_id":17,"path":["object","macho","DylibCommand"],"kind":"struct"},"2:21:668":{"crate_id":2,"path":["core","format_args"],"kind":"macro"},"17:12176:18219":{"crate_id":17,"path":["object","macho","DyldInfoCommand"],"kind":"struct"},"5:7158:221":{"crate_id":5,"path":["alloc","string","String"],"kind":"struct"},"2:39834:2336":{"crate_id":2,"path":["core","convert","Infallible"],"kind":"enum"},"17:10062:15309":{"crate_id":17,"path":["object","read","macho","segment","MachOSegmentIterator"],"kind":"struct"},"16:7211:15060":{"crate_id":16,"path":["gimli","read","op","Expression"],"kind":"struct"},"1:3662:2193":{"crate_id":1,"path":["std","net","tcp","TcpStream"],"kind":"struct"},"1:8978:15057":{"crate_id":1,"path":["std","sync","mpmc","select","Operation"],"kind":"struct"},"9:505:13977":{"crate_id":9,"path":["miniz_oxide","inflate","stream","InflateState"],"kind":"struct"},"2:52591:2464":{"crate_id":2,"path":["core","core_arch","simd","i16x4"],"kind":"struct"},"3:223:207":{"crate_id":3,"path":["compiler_builtins","float","cmp","Result"],"kind":"enum"},"1:8898:2356":{"crate_id":1,"path":["std","sync","condvar","WaitTimeoutResult"],"kind":"struct"},"2:3989:27928":{"crate_id":2,"path":["core","asserting","TryCaptureWithDebug"],"kind":"struct"},"2:6865:2346":{"crate_id":2,"path":["core","iter","sources","once","once"],"kind":"function"},"17:8368:15170":{"crate_id":17,"path":["object","common","FileFlags"],"kind":"enum"},"2:2991:2038":{"crate_id":2,"path":["core","ops","index","Index"],"kind":"trait"},"6:62:8433":{"crate_id":6,"path":["libc","unix","DIR"],"kind":"enum"},"2:50513:7615":{"crate_id":2,"path":["core","slice","iter","Chunks"],"kind":"struct"},"1:8735:2328":{"crate_id":1,"path":["std","process","CommandArgs"],"kind":"struct"},"2:14:1854":{"crate_id":2,"path":["core","write"],"kind":"macro"},"2:4222:7745":{"crate_id":2,"path":["core","cell","BorrowError"],"kind":"struct"},"17:10121:15305":{"crate_id":17,"path":["object","read","macho","section","MachOSectionInternal"],"kind":"struct"},"1:8231:2239":{"crate_id":1,"path":["std","os","unix","net","ancillary","SocketAncillary"],"kind":"struct"},"2:47456:101":{"crate_id":2,"path":["core","ffi","c_str","CStr"],"kind":"struct"},"1:11866:1517":{"crate_id":1,"path":["std","usize"],"kind":"primitive"},"17:1903:15280":{"crate_id":17,"path":["object","read","elf","relocation","ElfRelaIterator"],"kind":"enum"},"2:22831:2196":{"crate_id":2,"path":["core","num","saturating","Saturating"],"kind":"struct"},"17:8871:15179":{"crate_id":17,"path":["object","read","any","SegmentIterator"],"kind":"struct"},"17:13221:19051":{"crate_id":17,"path":["object","pe","ImageEpilogueDynamicRelocationHeader"],"kind":"struct"},"5:1708:1991":{"crate_id":5,"path":["alloc","collections","btree","map","DrainFilter"],"kind":"struct"},"17:11547:15350":{"crate_id":17,"path":["object","macho","FatArch64"],"kind":"struct"},"5:7128:2083":{"crate_id":5,"path":["alloc","ffi","c_str","FromVecWithNulError"],"kind":"struct"},"2:7051:7954":{"crate_id":2,"path":["core","iter","traits","accum","Product"],"kind":"trait"},"17:12884:18630":{"crate_id":17,"path":["object","pe","ImageAuxSymbolTokenDef"],"kind":"struct"},"5:6089:31274":{"crate_id":5,"path":["alloc","vec","drain_filter","drop","BackshiftOnDrop"],"kind":"struct"},"2:2501:147":{"crate_id":2,"path":["core","convert","Into"],"kind":"trait"},"1:11056:19774":{"crate_id":1,"path":["std","sys","unix","time","Timespec"],"kind":"struct"},"2:30002:67":{"crate_id":2,"path":["core","ptr","alignment","Alignment"],"kind":"struct"},"12:353:32286":{"crate_id":12,"path":["hashbrown","raw","RawDrain"],"kind":"struct"},"5:2375:30188":{"crate_id":5,"path":["alloc","collections","btree","node","NodeRef"],"kind":"struct"},"2:52428:2463":{"crate_id":2,"path":["core","core_arch","simd","i16x2"],"kind":"struct"},"17:11606:18105":{"crate_id":17,"path":["object","macho","LcStr"],"kind":"struct"},"1:2539:2155":{"crate_id":1,"path":["std","io","buffered","bufwriter","BufWriter"],"kind":"struct"},"19:0:1011":{"crate_id":19,"path":["panic_unwind"],"kind":"module"},"1:4720:2230":{"crate_id":1,"path":["std","os","fd","owned","OwnedFd"],"kind":"struct"},"2:11541:7641":{"crate_id":2,"path":["core","str","pattern","ReverseSearcher"],"kind":"trait"},"2:2790:8006":{"crate_id":2,"path":["core","ops","arith","Neg"],"kind":"trait"},"11:36:32285":{"crate_id":11,"path":["adler","algo","U32X4"],"kind":"struct"},"17:11853:18184":{"crate_id":17,"path":["object","macho","RoutinesCommand32"],"kind":"struct"},"1:11862:1462":{"crate_id":1,"path":["std","u32"],"kind":"primitive"},"5:3902:31279":{"crate_id":5,"path":["alloc","collections","vec_deque","drain","drop","DropGuard"],"kind":"struct"},"6:7230:12270":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_condattr_t"],"kind":"struct"},"16:6210:15031":{"crate_id":16,"path":["gimli","read","aranges","ArangeHeader"],"kind":"struct"},"1:8484:1985":{"crate_id":1,"path":["std","path","Iter"],"kind":"struct"},"17:9526:15242":{"crate_id":17,"path":["object","read","elf","section","ElfSectionIterator"],"kind":"struct"},"1:11019:8192":{"crate_id":1,"path":["std","sys","unix","time","Nanoseconds"],"kind":"struct"},"2:9976:7620":{"crate_id":2,"path":["core","slice","iter","SplitMut"],"kind":"struct"},"16:6517:14019":{"crate_id":16,"path":["gimli","read","line","LineSequence"],"kind":"struct"},"6:1894:9874":{"crate_id":6,"path":["libc","unix","linux_like","linux","fpos64_t"],"kind":"enum"},"12:98:32294":{"crate_id":12,"path":["hashbrown","raw","Bucket"],"kind":"struct"},"1:4108:2244":{"crate_id":1,"path":["std","os","unix","net","ancillary","Messages"],"kind":"struct"},"2:57637:243":{"crate_id":2,"path":["core","core_simd","fmt","fmt","Wrapper"],"kind":"struct"},"1:10849:2332":{"crate_id":1,"path":["std","sys","unix","process","process_common","ExitCode"],"kind":"struct"},"2:48819:2293":{"crate_id":2,"path":["core","panic","location","Location"],"kind":"struct"},"2:47423:7777":{"crate_id":2,"path":["core","char","CaseMappingIter"],"kind":"enum"},"6:4675:12131":{"crate_id":6,"path":["libc","unix","linux_like","linux","file_clone_range"],"kind":"struct"},"1:3665:2192":{"crate_id":1,"path":["std","net","tcp","TcpListener"],"kind":"struct"},"1:8992:19708":{"crate_id":1,"path":["std","sync","mpmc","select","Selected"],"kind":"enum"},"1:11226:22752":{"crate_id":1,"path":["std","sys_common","wtf8","Wtf8CodePoints"],"kind":"struct"},"5:6503:7714":{"crate_id":5,"path":["alloc","vec","in_place_drop","InPlaceDrop"],"kind":"struct"},"17:9328:15223":{"crate_id":17,"path":["object","read","coff","section","CoffSegment"],"kind":"struct"},"1:1989:181":{"crate_id":1,"path":["std","ffi","os_str","OsStr"],"kind":"struct"},"2:9022:191":{"crate_id":2,"path":["core","fmt","Pointer"],"kind":"trait"},"17:13436:19099":{"crate_id":17,"path":["object","pe","ImageEnclaveConfig64"],"kind":"struct"},"14:187:14015":{"crate_id":14,"path":["rustc_demangle","SizeLimitedFmtAdapter"],"kind":"struct"},"12:632:1985":{"crate_id":12,"path":["hashbrown","map","Iter"],"kind":"struct"},"17:8941:15180":{"crate_id":17,"path":["object","read","any","SectionIterator"],"kind":"struct"},"16:2683:14092":{"crate_id":16,"path":["gimli","common","DebugRngListsBase"],"kind":"struct"},"16:2749:14095":{"crate_id":16,"path":["gimli","common","DebugStrOffsetsBase"],"kind":"struct"},"6:5694:12764":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","Elf64_Chdr"],"kind":"struct"},"2:2458:2225":{"crate_id":2,"path":["core","convert","num","private","Sealed"],"kind":"trait"},"1:5702:2355":{"crate_id":1,"path":["std","sync","condvar","Condvar"],"kind":"struct"},"1:1074:2002":{"crate_id":1,"path":["std","collections","hash","map","VacantEntry"],"kind":"struct"},"2:54635:7531":{"crate_id":2,"path":["core","core_arch","x86","__m128i"],"kind":"struct"},"18:609:33476":{"crate_id":18,"path":["memchr","memmem","twoway","Suffix"],"kind":"struct"},"1:11490:14031":{"crate_id":1,"path":["std","backtrace_rs","backtrace","Frame"],"kind":"struct"},"6:482:8806":{"crate_id":6,"path":["libc","unix","utimbuf"],"kind":"struct"},"17:9722:15291":{"crate_id":17,"path":["object","read","elf","version","Version"],"kind":"struct"},"1:3966:2215":{"crate_id":1,"path":["std","os","unix","fs","DirEntryExt"],"kind":"trait"},"17:9263:15210":{"crate_id":17,"path":["object","read","archive","ArchiveMemberIterator"],"kind":"struct"},"1:9054:215":{"crate_id":1,"path":["std","sync","rwlock","RwLockReadGuard"],"kind":"struct"},"1:8965:20815":{"crate_id":1,"path":["std","sync","mpmc","list","ListToken"],"kind":"struct"},"2:20473:29014":{"crate_id":2,"path":["core","core_simd","swizzle","deinterleave","Odd"],"kind":"struct"},"17:12134:18203":{"crate_id":17,"path":["object","macho","VersionMinCommand"],"kind":"struct"},"1:3864:2208":{"crate_id":1,"path":["std","os","unix","ffi","os_str","OsStrExt"],"kind":"trait"},"16:7059:2293":{"crate_id":16,"path":["gimli","read","op","Location"],"kind":"enum"},"17:12816:18522":{"crate_id":17,"path":["object","pe","ImageSectionHeader"],"kind":"struct"},"16:6034:15020":{"crate_id":16,"path":["gimli","read","dwarf","Unit"],"kind":"struct"},"2:20878:2428":{"crate_id":2,"path":["core","core_simd","masks","MaskElement"],"kind":"trait"},"9:676:13803":{"crate_id":9,"path":["miniz_oxide","deflate","CompressionLevel"],"kind":"enum"},"5:3623:2025":{"crate_id":5,"path":["alloc","collections","linked_list","CursorMut"],"kind":"struct"},"1:11855:732":{"crate_id":1,"path":["std","i8"],"kind":"primitive"},"1:2217:2096":{"crate_id":1,"path":["std","fs","read_to_string"],"kind":"function"},"1:11370:2192":{"crate_id":1,"path":["std","sys_common","net","TcpListener"],"kind":"struct"},"2:2683:222":{"crate_id":2,"path":["core","marker","StructuralEq"],"kind":"trait"},"2:47473:27019":{"crate_id":2,"path":["core","ffi","c_str","FromBytesWithNulErrorKind"],"kind":"enum"},"1:10444:1939":{"crate_id":1,"path":["std","sys","unix","thread","Thread"],"kind":"struct"},"2:50848:7629":{"crate_id":2,"path":["core","str","iter","RSplitN"],"kind":"struct"},"2:49291:85":{"crate_id":2,"path":["core","sync","atomic","AtomicIsize"],"kind":"struct"},"16:2557:14087":{"crate_id":16,"path":["gimli","common","DebugLocListsIndex"],"kind":"struct"},"16:2825:14098":{"crate_id":16,"path":["gimli","common","DebugTypeSignature"],"kind":"struct"},"2:10128:7631":{"crate_id":2,"path":["core","slice","iter","SplitN"],"kind":"struct"},"16:5541:15005":{"crate_id":16,"path":["gimli","read","cfi","CfiEntriesIter"],"kind":"struct"},"2:47788:7961":{"crate_id":2,"path":["core","iter","adapters","step_by","StepBy"],"kind":"struct"},"1:7864:2024":{"crate_id":1,"path":["std","io","cursor","Cursor"],"kind":"struct"},"6:1547:9719":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_in6"],"kind":"struct"},"2:12164:189":{"crate_id":2,"path":["core","future","pending","Pending"],"kind":"struct"},"6:488:8807":{"crate_id":6,"path":["libc","unix","timeval"],"kind":"struct"},"2:4563:7767":{"crate_id":2,"path":["core","char","REPLACEMENT_CHARACTER"],"kind":"constant"},"5:3477:160":{"crate_id":5,"path":["alloc","collections","linked_list","LinkedList"],"kind":"struct"},"17:13082:19007":{"crate_id":17,"path":["object","pe","ImageBoundImportDescriptor"],"kind":"struct"},"2:2837:8015":{"crate_id":2,"path":["core","ops","bit","Shl"],"kind":"trait"},"17:11708:18173":{"crate_id":17,"path":["object","macho","Fvmlib"],"kind":"struct"},"1:7025:22759":{"crate_id":1,"path":["std","sys_common","wstr","WStrUnits"],"kind":"struct"},"1:1568:1987":{"crate_id":1,"path":["std","collections","hash","set","IntoIter"],"kind":"struct"},"17:12237:18271":{"crate_id":17,"path":["object","macho","FvmfileCommand"],"kind":"struct"},"2:3088:2040":{"crate_id":2,"path":["core","ops","range","RangeBounds"],"kind":"trait"},"1:3451:2139":{"crate_id":1,"path":["std","io","BufRead"],"kind":"trait"},"16:7452:195":{"crate_id":16,"path":["gimli","read","rnglists","Range"],"kind":"struct"},"5:7000:1987":{"crate_id":5,"path":["alloc","collections","linked_list","IntoIter"],"kind":"struct"},"1:10037:22776":{"crate_id":1,"path":["std","sys","unix","os_str","Slice"],"kind":"struct"},"16:3689:14168":{"crate_id":16,"path":["gimli","constants","DwCfa"],"kind":"struct"},"12:762:1991":{"crate_id":12,"path":["hashbrown","map","DrainFilter"],"kind":"struct"},"1:413:162":{"crate_id":1,"path":["std","thread","local","LocalKey"],"kind":"struct"},"1:7783:2089":{"crate_id":1,"path":["std","fs","Metadata"],"kind":"struct"},"2:3243:7566":{"crate_id":2,"path":["core","ops","unsize","DispatchFromDyn"],"kind":"trait"},"5:836:31281":{"crate_id":5,"path":["alloc","collections","binary_heap","retain","RebuildOnDrop"],"kind":"struct"},"6:5635:12761":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","timex"],"kind":"struct"},"17:10476:15396":{"crate_id":17,"path":["object","read","pe","resource","ResourceDirectoryEntryData"],"kind":"enum"},"12:1120:13996":{"crate_id":12,"path":["hashbrown","map","VacantEntryRef"],"kind":"struct"},"18:481:19215":{"crate_id":18,"path":["memchr","cow","CowBytes"],"kind":"struct"},"17:386:15160":{"crate_id":17,"path":["object","read","any","Segment"],"kind":"struct"},"18:727:19210":{"crate_id":18,"path":["memchr","memmem","SearcherConfig"],"kind":"struct"},"6:1524:9716":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreq_source"],"kind":"struct"},"6:5886:12802":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","semid_ds"],"kind":"struct"},"1:11145:20795":{"crate_id":1,"path":["std","sys_common","process","CommandEnv"],"kind":"struct"},"2:47626:7964":{"crate_id":2,"path":["core","iter","adapters","cycle","Cycle"],"kind":"struct"},"5:3127:2006":{"crate_id":5,"path":["alloc","collections","btree","set","Intersection"],"kind":"struct"},"2:47073:7717":{"crate_id":2,"path":["core","any","TypeId"],"kind":"struct"},"10:0:1738":{"crate_id":10,"path":["rustc_std_workspace_alloc"],"kind":"module"},"1:11011:20312":{"crate_id":1,"path":["std","sys","unix","thread","cgroups","Cgroup"],"kind":"enum"},"2:50948:7662":{"crate_id":2,"path":["core","str","iter","RMatches"],"kind":"struct"},"17:11515:17997":{"crate_id":17,"path":["object","macho","DyldSubCacheInfo"],"kind":"struct"},"1:8129:2140":{"crate_id":1,"path":["std","io","Chain"],"kind":"struct"},"16:4817:14768":{"crate_id":16,"path":["gimli","constants","DwLne"],"kind":"struct"},"17:13572:19141":{"crate_id":17,"path":["object","pe","ImageArchitectureEntry"],"kind":"struct"},"2:4:995":{"crate_id":2,"path":["core","panic"],"kind":"macro"},"14:221:14014":{"crate_id":14,"path":["rustc_demangle","SizeLimitExhausted"],"kind":"struct"},"2:51465:8177":{"crate_id":2,"path":["core","str","IsAsciiWhitespace"],"kind":"struct"},"18:614:33480":{"crate_id":18,"path":["memchr","memmem","twoway","SuffixKind"],"kind":"enum"},"17:2916:15306":{"crate_id":17,"path":["object","read","macho","section","MachOSectionIterator"],"kind":"struct"},"12:1085:13995":{"crate_id":12,"path":["hashbrown","map","OccupiedEntryRef"],"kind":"struct"},"5:3245:1991":{"crate_id":5,"path":["alloc","collections","btree","set","DrainFilter"],"kind":"struct"},"12:274:32295":{"crate_id":12,"path":["hashbrown","raw","RawIterRange"],"kind":"struct"},"1:6567:214":{"crate_id":1,"path":["std","sync","rwlock","RwLock"],"kind":"struct"},"6:4471:12108":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Shdr"],"kind":"struct"},"16:3010:14104":{"crate_id":16,"path":["gimli","common","DwarfFileType"],"kind":"enum"},"17:9857:15324":{"crate_id":17,"path":["object","read","macho","file","MachOFile"],"kind":"struct"},"2:1672:1067":{"crate_id":2,"path":["core","ptr"],"kind":"module"},"17:10973:15405":{"crate_id":17,"path":["object","elf","FileHeader64"],"kind":"struct"},"16:3188:14106":{"crate_id":16,"path":["gimli","arch","AArch64"],"kind":"struct"},"5:7098:2085":{"crate_id":5,"path":["alloc","ffi","c_str","NulError"],"kind":"struct"},"2:50046:7808":{"crate_id":2,"path":["core","hash","sip","SipHasher"],"kind":"struct"},"17:13459:19102":{"crate_id":17,"path":["object","pe","ImageEnclaveImport"],"kind":"struct"},"16:2465:14083":{"crate_id":16,"path":["gimli","common","DebugLineOffset"],"kind":"struct"},"1:10654:20293":{"crate_id":1,"path":["std","sys","unix","fs","FilePermissions"],"kind":"struct"},"1:6533:2366":{"crate_id":1,"path":["std","sync","remutex","ReentrantMutexGuard"],"kind":"struct"},"2:2995:2039":{"crate_id":2,"path":["core","ops","index","IndexMut"],"kind":"trait"},"1:11841:367":{"crate_id":1,"path":["std","bool"],"kind":"primitive"},"1:4087:2242":{"crate_id":1,"path":["std","os","unix","net","ancillary","ScmCredentials"],"kind":"struct"},"1:6313:26141":{"crate_id":1,"path":["std","sync","mutex","fmt","LockedPlaceholder"],"kind":"struct"},"2:51253:7677":{"crate_id":2,"path":["core","str","pattern","CharPredicateSearcher"],"kind":"struct"},"1:11867:1104":{"crate_id":1,"path":["std","reference"],"kind":"primitive"},"17:11559:18002":{"crate_id":17,"path":["object","macho","MachHeader32"],"kind":"struct"},"2:22234:1947":{"crate_id":2,"path":["core","num","nonzero","NonZeroUsize"],"kind":"struct"},"2:8139:2297":{"crate_id":2,"path":["core","panic","unwind_safe","UnwindSafe"],"kind":"trait"},"17:12118:18202":{"crate_id":17,"path":["object","macho","EncryptionInfoCommand64"],"kind":"struct"},"1:1898:2079":{"crate_id":1,"path":["std","error","Report"],"kind":"struct"},"17:9488:15243":{"crate_id":17,"path":["object","read","elf","segment","ElfSegment"],"kind":"struct"},"2:22168:174":{"crate_id":2,"path":["core","num","nonzero","NonZeroU64"],"kind":"struct"},"17:11235:15681":{"crate_id":17,"path":["object","elf","Dyn32"],"kind":"struct"},"2:51500:121":{"crate_id":2,"path":["core","time","Duration"],"kind":"struct"},"17:8951:33452":{"crate_id":17,"path":["object","read","any","SectionIteratorInternal"],"kind":"enum"},"17:9382:15227":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbolTable"],"kind":"struct"},"2:21135:2450":{"crate_id":2,"path":["core","core_simd","ord","SimdOrd"],"kind":"trait"},"6:4516:12111":{"crate_id":6,"path":["libc","unix","linux_like","linux","posix_spawn_file_actions_t"],"kind":"struct"},"2:3977:27931":{"crate_id":2,"path":["core","asserting","TryCaptureWithoutDebug"],"kind":"struct"},"6:5737:12769":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_exit"],"kind":"struct"},"5:1404:1988":{"crate_id":5,"path":["alloc","collections","btree","map","Keys"],"kind":"struct"},"17:12638:18466":{"crate_id":17,"path":["object","pe","ImageOptionalHeader32"],"kind":"struct"},"2:54792:7542":{"crate_id":2,"path":["core","core_arch","x86","__m512bh"],"kind":"struct"},"2:48794:1985":{"crate_id":2,"path":["core","option","Iter"],"kind":"struct"},"2:50270:8162":{"crate_id":2,"path":["core","slice","sort","TimSortRun"],"kind":"struct"},"2:7047:7955":{"crate_id":2,"path":["core","iter","traits","accum","Sum"],"kind":"trait"},"1:5165:187":{"crate_id":1,"path":["std","path","Path"],"kind":"struct"},"18:564:19220":{"crate_id":18,"path":["memchr","memmem","rarebytes","RareNeedleBytes"],"kind":"struct"},"17:9700:15265":{"crate_id":17,"path":["object","read","elf","hash","GnuHashTable"],"kind":"struct"},"6:5578:12723":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","mallinfo2"],"kind":"struct"},"16:7249:15062":{"crate_id":16,"path":["gimli","read","op","Evaluation"],"kind":"struct"},"17:11315:15805":{"crate_id":17,"path":["object","elf","Vernaux"],"kind":"struct"},"1:10123:2338":{"crate_id":1,"path":["std","sys","unix","pipe","AnonPipe"],"kind":"struct"},"17:9764:15295":{"crate_id":17,"path":["object","read","elf","version","VerdauxIterator"],"kind":"struct"},"6:1684:9731":{"crate_id":6,"path":["libc","unix","linux_like","arpreq_old"],"kind":"struct"},"2:38661:180":{"crate_id":2,"path":["core","cmp","Ordering"],"kind":"enum"},"1:860:1986":{"crate_id":1,"path":["std","collections","hash","map","IterMut"],"kind":"struct"},"1:8830:2371":{"crate_id":1,"path":["std","sync","mpsc","RecvError"],"kind":"struct"},"17:242:33446":{"crate_id":17,"path":["object","read","util","DebugByte"],"kind":"struct"},"17:12103:18201":{"crate_id":17,"path":["object","macho","EncryptionInfoCommand32"],"kind":"struct"},"1:5339:2325":{"crate_id":1,"path":["std","process","ChildStdout"],"kind":"struct"},"17:9446:15232":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdatSectionIterator"],"kind":"struct"},"1:5354:2326":{"crate_id":1,"path":["std","process","ChildStderr"],"kind":"struct"},"12:1832:1985":{"crate_id":12,"path":["hashbrown","set","Iter"],"kind":"struct"},"17:13374:19092":{"crate_id":17,"path":["object","pe","ImageArm64RuntimeFunctionEntry"],"kind":"struct"},"6:6402:9658":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statvfs64"],"kind":"struct"},"2:6474:7956":{"crate_id":2,"path":["core","iter","adapters","zip","zip"],"kind":"function"},"5:6941:2013":{"crate_id":5,"path":["alloc","collections","binary_heap","DrainSorted"],"kind":"struct"},"17:11594:18049":{"crate_id":17,"path":["object","macho","LoadCommand"],"kind":"struct"},"2:52861:2477":{"crate_id":2,"path":["core","core_arch","simd","i8x16"],"kind":"struct"},"7:32:13766":{"crate_id":7,"path":["unwind","libunwind","_Unwind_Reason_Code"],"kind":"enum"},"16:7135:32753":{"crate_id":16,"path":["gimli","read","op","EvaluationWaiting"],"kind":"enum"},"17:13518:19133":{"crate_id":17,"path":["object","pe","ImageFunctionEntry"],"kind":"struct"},"2:21299:28961":{"crate_id":2,"path":["core","core_simd","vector","splat","Splat"],"kind":"struct"},"1:3122:20115":{"crate_id":1,"path":["std","io","stdio","StdoutRaw"],"kind":"struct"},"1:11854:632":{"crate_id":1,"path":["std","f64"],"kind":"primitive"},"16:4357:14644":{"crate_id":16,"path":["gimli","constants","DwEnd"],"kind":"struct"},"1:505:1933":{"crate_id":1,"path":["std","thread","PanicGuard"],"kind":"struct"},"17:9805:15342":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCache"],"kind":"struct"},"12:853:1998":{"crate_id":12,"path":["hashbrown","map","RawVacantEntryMut"],"kind":"struct"},"17:13231:19052":{"crate_id":17,"path":["object","pe","ImageLoadConfigDirectory32"],"kind":"struct"},"17:8822:33427":{"crate_id":17,"path":["object","read","any","FileInternal"],"kind":"enum"},"1:4057:22750":{"crate_id":1,"path":["std","os","unix","net","ancillary","AncillaryDataIter"],"kind":"struct"},"2:51449:8173":{"crate_id":2,"path":["core","str","CharEscapeDebugContinue"],"kind":"struct"},"1:9968:2059":{"crate_id":1,"path":["std","sys","unix","os","SplitPaths"],"kind":"struct"},"17:13047:19004":{"crate_id":17,"path":["object","pe","ImageTlsDirectory64"],"kind":"struct"},"1:2210:2091":{"crate_id":1,"path":["std","fs","DirEntry"],"kind":"struct"},"9:956:13796":{"crate_id":9,"path":["miniz_oxide","DataFormat"],"kind":"enum"},"17:8631:15175":{"crate_id":17,"path":["object","endian","I16Bytes"],"kind":"struct"},"2:50453:27941":{"crate_id":2,"path":["core","slice","iter","GenericSplitN"],"kind":"struct"},"6:5845:12800":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","sigset_t"],"kind":"struct"},"17:10420:15385":{"crate_id":17,"path":["object","read","pe","relocation","RelocationBlockIterator"],"kind":"struct"},"6:541:8813":{"crate_id":6,"path":["libc","unix","iovec"],"kind":"struct"},"17:13404:19095":{"crate_id":17,"path":["object","pe","ImageRuntimeFunctionEntry"],"kind":"struct"},"6:6385:9655":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statfs64"],"kind":"struct"},"2:4108:7758":{"crate_id":2,"path":["core","cell","once","OnceCell"],"kind":"struct"},"16:5614:32543":{"crate_id":16,"path":["gimli","read","cfi","AugmentationData"],"kind":"struct"},"6:5615:12760":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","rtentry"],"kind":"struct"},"6:4747:12138":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_setup"],"kind":"struct"},"1:4311:2240":{"crate_id":1,"path":["std","os","unix","net","stream","UnixStream"],"kind":"struct"},"1:9013:20336":{"crate_id":1,"path":["std","sync","mpmc","utils","CachePadded"],"kind":"struct"},"5:2142:31358":{"crate_id":5,"path":["alloc","collections","btree","navigate","LazyLeafHandle"],"kind":"enum"},"6:4591:12120":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_extended_err"],"kind":"struct"},"5:632:31352":{"crate_id":5,"path":["alloc","boxed","from","StringError"],"kind":"struct"},"1:1051:2000":{"crate_id":1,"path":["std","collections","hash","map","Entry"],"kind":"enum"},"2:49331:92":{"crate_id":2,"path":["core","sync","atomic","AtomicUsize"],"kind":"struct"},"17:11734:18175":{"crate_id":17,"path":["object","macho","Dylib"],"kind":"struct"},"6:5564:12722":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","mallinfo"],"kind":"struct"},"2:10655:7621":{"crate_id":2,"path":["core","slice","iter","GroupBy"],"kind":"struct"},"2:49493:7573":{"crate_id":2,"path":["core","fmt","num","Binary"],"kind":"struct"},"6:6287:9654":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statfs"],"kind":"struct"},"2:7479:7953":{"crate_id":2,"path":["core","iter","traits","marker","TrustedStep"],"kind":"trait"},"2:54541:2474":{"crate_id":2,"path":["core","core_arch","simd","i64x8"],"kind":"struct"},"5:7112:27019":{"crate_id":5,"path":["alloc","ffi","c_str","FromBytesWithNulErrorKind"],"kind":"enum"},"6:4377:12101":{"crate_id":6,"path":["libc","unix","linux_like","linux","dl_phdr_info"],"kind":"struct"},"5:6513:7715":{"crate_id":5,"path":["alloc","vec","in_place_drop","InPlaceDstBufDrop"],"kind":"struct"},"1:4625:2252":{"crate_id":1,"path":["std","os","linux","process","CommandExt"],"kind":"trait"},"9:649:13817":{"crate_id":9,"path":["miniz_oxide","deflate","core","TDEFLStatus"],"kind":"enum"},"16:2433:14082":{"crate_id":16,"path":["gimli","common","DebugInfoOffset"],"kind":"struct"},"5:4234:31273":{"crate_id":5,"path":["alloc","collections","vec_deque","drop","Dropper"],"kind":"struct"},"17:1021:15230":{"crate_id":17,"path":["object","read","coff","relocation","CoffRelocationIterator"],"kind":"struct"},"12:985:2000":{"crate_id":12,"path":["hashbrown","map","Entry"],"kind":"enum"},"17:12265:18273":{"crate_id":17,"path":["object","macho","SourceVersionCommand"],"kind":"struct"},"16:4327:14638":{"crate_id":16,"path":["gimli","constants","DwDs"],"kind":"struct"},"17:11034:15519":{"crate_id":17,"path":["object","elf","SectionHeader64"],"kind":"struct"},"5:2874:31395":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Dying"],"kind":"enum"},"2:12189:7804":{"crate_id":2,"path":["core","future","poll_fn","PollFn"],"kind":"struct"},"17:8241:15166":{"crate_id":17,"path":["object","common","SymbolKind"],"kind":"enum"},"1:10810:21357":{"crate_id":1,"path":["std","sys","unix","os_str","Buf"],"kind":"struct"},"2:48921:1985":{"crate_id":2,"path":["core","result","Iter"],"kind":"struct"},"12:1534:13998":{"crate_id":12,"path":["hashbrown","rustc_entry","RustcOccupiedEntry"],"kind":"struct"},"17:12860:18566":{"crate_id":17,"path":["object","pe","ImageSymbolEx"],"kind":"struct"},"5:6645:31274":{"crate_id":5,"path":["alloc","vec","retain_mut","BackshiftOnDrop"],"kind":"struct"},"17:13134:19015":{"crate_id":17,"path":["object","pe","ImageResourceDirectoryString"],"kind":"struct"},"2:50684:7654":{"crate_id":2,"path":["core","str","error","ParseBoolError"],"kind":"struct"},"6:4788:12142":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_ifr_ifru"],"kind":"union"},"4:0:1735":{"crate_id":4,"path":["rustc_std_workspace_core"],"kind":"module"},"6:1720:9735":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_storage"],"kind":"struct"},"17:8561:15149":{"crate_id":17,"path":["object","endian","U32Bytes"],"kind":"struct"},"2:47664:27954":{"crate_id":2,"path":["core","iter","adapters","flatten","FlattenCompat"],"kind":"struct"},"2:54495:2456":{"crate_id":2,"path":["core","core_arch","simd","f32x16"],"kind":"struct"},"2:47363:7773":{"crate_id":2,"path":["core","char","EscapeUnicodeState"],"kind":"enum"},"6:5597:12758":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_mmap_req"],"kind":"struct"},"2:47707:7971":{"crate_id":2,"path":["core","iter","adapters","map","Map"],"kind":"struct"},"16:7319:15068":{"crate_id":16,"path":["gimli","read","pubtypes","PubTypesEntryIter"],"kind":"struct"},"2:50830:7631":{"crate_id":2,"path":["core","str","iter","SplitN"],"kind":"struct"},"6:4149:12076":{"crate_id":6,"path":["libc","unix","linux_like","linux","dqblk"],"kind":"struct"},"16:6903:15057":{"crate_id":16,"path":["gimli","read","op","Operation"],"kind":"enum"},"2:51147:7671":{"crate_id":2,"path":["core","str","pattern","MultiCharEqSearcher"],"kind":"struct"},"6:4257:12086":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_absinfo"],"kind":"struct"},"2:21395:2424":{"crate_id":2,"path":["core","core_simd","vector","SimdElement"],"kind":"trait"},"6:7247:12272":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_cond_t"],"kind":"struct"},"16:2842:14099":{"crate_id":16,"path":["gimli","common","DebugFrameOffset"],"kind":"struct"},"17:13413:19098":{"crate_id":17,"path":["object","pe","ImageEnclaveConfig32"],"kind":"struct"},"6:4608:12122":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_j1939"],"kind":"struct"},"2:51469:8178":{"crate_id":2,"path":["core","str","IsNotEmpty"],"kind":"struct"},"17:10532:127":{"crate_id":17,"path":["object","read","Error"],"kind":"struct"},"17:10108:15304":{"crate_id":17,"path":["object","read","macho","section","MachOSection"],"kind":"struct"},"6:6582:13192":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ucontext_t"],"kind":"struct"},"17:9553:15183":{"crate_id":17,"path":["object","read","elf","symbol","SymbolTable"],"kind":"struct"},"2:46835:7568":{"crate_id":2,"path":["core","ops","generator","GeneratorState"],"kind":"enum"},"1:6738:2417":{"crate_id":1,"path":["std","std_float","StdFloat"],"kind":"trait"},"17:11485:17995":{"crate_id":17,"path":["object","macho","DyldCacheMappingInfo"],"kind":"struct"},"2:53005:2457":{"crate_id":2,"path":["core","core_arch","simd","f64x2"],"kind":"struct"},"6:4310:12093":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_ramp_effect"],"kind":"struct"},"1:3978:2218":{"crate_id":1,"path":["std","os","unix","fs","DirBuilderExt"],"kind":"trait"},"18:80:19189":{"crate_id":18,"path":["memchr","memchr","iter","Memchr"],"kind":"struct"},"2:53685:2455":{"crate_id":2,"path":["core","core_arch","simd","f32x8"],"kind":"struct"},"2:52761:2485":{"crate_id":2,"path":["core","core_arch","simd","u16x8"],"kind":"struct"},"1:1592:2008":{"crate_id":1,"path":["std","collections","hash","set","SymmetricDifference"],"kind":"struct"},"16:2341:14078":{"crate_id":16,"path":["gimli","common","DebugAbbrevOffset"],"kind":"struct"},"2:4024:7561":{"crate_id":2,"path":["core","async_iter","async_iter","AsyncIterator"],"kind":"trait"},"1:870:1987":{"crate_id":1,"path":["std","collections","hash","map","IntoIter"],"kind":"struct"},"17:10796:15147":{"crate_id":17,"path":["object","read","CodeView"],"kind":"struct"},"2:48720:2188":{"crate_id":2,"path":["core","net","socket_addr","SocketAddrV6"],"kind":"struct"},"2:12324:2502":{"crate_id":2,"path":["core","task","wake","Waker"],"kind":"struct"},"2:10156:7632":{"crate_id":2,"path":["core","slice","iter","SplitNMut"],"kind":"struct"},"2:11535:7642":{"crate_id":2,"path":["core","str","pattern","Searcher"],"kind":"trait"},"17:10670:15193":{"crate_id":17,"path":["object","read","SymbolMap"],"kind":"struct"},"17:9339:15222":{"crate_id":17,"path":["object","read","coff","section","CoffSectionIterator"],"kind":"struct"},"9:709:2308":{"crate_id":9,"path":["miniz_oxide","inflate","core","State"],"kind":"enum"},"16:7044:32770":{"crate_id":16,"path":["gimli","read","op","OperationEvaluationResult"],"kind":"enum"},"2:4728:28914":{"crate_id":2,"path":["core","ffi","sealed_trait","VaArgSafe"],"kind":"trait"},"2:9401:8145":{"crate_id":2,"path":["core","slice","sort","InsertionHole"],"kind":"struct"},"2:8564:79":{"crate_id":2,"path":["core","sync","atomic","AtomicBool"],"kind":"struct"},"2:48629:27492":{"crate_id":2,"path":["core","net","ip_addr","fmt","Span"],"kind":"struct"},"6:532:8812":{"crate_id":6,"path":["libc","unix","hostent"],"kind":"struct"},"2:48672:2195":{"crate_id":2,"path":["core","net","parser","AddrParseError"],"kind":"struct"},"16:6284:15035":{"crate_id":16,"path":["gimli","read","index","DebugTuIndex"],"kind":"struct"},"16:7847:15087":{"crate_id":16,"path":["gimli","read","unit","AttrsIter"],"kind":"struct"},"5:881:1985":{"crate_id":5,"path":["alloc","collections","binary_heap","Iter"],"kind":"struct"},"1:4547:2213":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt"],"kind":"trait"},"5:2065:31364":{"crate_id":5,"path":["alloc","collections","btree","merge_iter","MergeIterInner"],"kind":"struct"},"1:4828:2275":{"crate_id":1,"path":["std","os","net","linux_ext","addr","SocketAddrExt"],"kind":"trait"},"6:4575:12118":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_vm"],"kind":"struct"},"2:21486:27483":{"crate_id":2,"path":["core","num","bignum","Big32x40"],"kind":"struct"},"18:766:19213":{"crate_id":18,"path":["memchr","memmem","SearcherRevKind"],"kind":"enum"},"6:1728:9736":{"crate_id":6,"path":["libc","unix","linux_like","utsname"],"kind":"struct"},"1:8432:2310":{"crate_id":1,"path":["std","path","Component"],"kind":"enum"},"18:113:19191":{"crate_id":18,"path":["memchr","memchr","iter","Memchr3"],"kind":"struct"},"1:7464:15162":{"crate_id":1,"path":["std","backtrace_rs","symbolize","Symbol"],"kind":"struct"},"2:20690:2421":{"crate_id":2,"path":["core","core_simd","eq","SimdPartialEq"],"kind":"trait"},"1:11858:731":{"crate_id":1,"path":["std","i64"],"kind":"primitive"},"5:1212:2000":{"crate_id":5,"path":["alloc","collections","btree","map","entry","Entry"],"kind":"enum"},"1:950:1997":{"crate_id":1,"path":["std","collections","hash","map","RawOccupiedEntryMut"],"kind":"struct"},"2:20719:2225":{"crate_id":2,"path":["core","core_simd","lane_count","sealed","Sealed"],"kind":"trait"},"2:2908:116":{"crate_id":2,"path":["core","ops","deref","Deref"],"kind":"trait"},"1:8342:2298":{"crate_id":1,"path":["std","path","Prefix"],"kind":"enum"},"2:2843:8016":{"crate_id":2,"path":["core","ops","bit","Shr"],"kind":"trait"},"1:8958:26146":{"crate_id":1,"path":["std","sync","mpmc","list","Position"],"kind":"struct"},"16:6359:15040":{"crate_id":16,"path":["gimli","read","line","LineRows"],"kind":"struct"},"6:4371:12100":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_abs_setup"],"kind":"struct"},"17:9183:15186":{"crate_id":17,"path":["object","read","any","SectionRelocationIterator"],"kind":"struct"},"12:751:1990":{"crate_id":12,"path":["hashbrown","map","Drain"],"kind":"struct"},"1:8912:20786":{"crate_id":1,"path":["std","sync","mpmc","array","ArrayToken"],"kind":"struct"},"17:967:15226":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbolIterator"],"kind":"struct"},"17:10139:15183":{"crate_id":17,"path":["object","read","macho","symbol","SymbolTable"],"kind":"struct"},"16:4217:14600":{"crate_id":16,"path":["gimli","constants","DwForm"],"kind":"struct"},"6:4771:12140":{"crate_id":6,"path":["libc","unix","linux_like","linux","af_alg_iv"],"kind":"struct"},"1:8108:2118":{"crate_id":1,"path":["std","io","SeekFrom"],"kind":"enum"},"2:10142:7629":{"crate_id":2,"path":["core","slice","iter","RSplitN"],"kind":"struct"},"2:48600:2185":{"crate_id":2,"path":["core","net","ip_addr","Ipv6MulticastScope"],"kind":"enum"},"6:7008:13562":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","align","sem_t"],"kind":"struct"},"16:2727:14094":{"crate_id":16,"path":["gimli","common","DebugStrOffset"],"kind":"struct"},"17:13203:19044":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation64V2"],"kind":"struct"},"5:6971:195":{"crate_id":5,"path":["alloc","collections","btree","set","Range"],"kind":"struct"},"1:621:1963":{"crate_id":1,"path":["std","backtrace","Backtrace"],"kind":"struct"},"1:9110:20555":{"crate_id":1,"path":["std","sys","common","thread_local","fast_local","fast","DtorState"],"kind":"enum"},"2:51358:7666":{"crate_id":2,"path":["core","str","lossy","Utf8Chunks"],"kind":"struct"},"18:736:19211":{"crate_id":18,"path":["memchr","memmem","SearcherKind"],"kind":"enum"},"17:10625:15191":{"crate_id":17,"path":["object","read","SymbolIndex"],"kind":"struct"},"17:11774:18178":{"crate_id":17,"path":["object","macho","SubClientCommand"],"kind":"struct"},"16:534:32708":{"crate_id":16,"path":["gimli","read","cfi","RegisterRuleMap"],"kind":"struct"},"2:51453:8174":{"crate_id":2,"path":["core","str","CharEscapeUnicode"],"kind":"struct"},"17:9844:15302":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCacheImage"],"kind":"struct"},"2:2866:8021":{"crate_id":2,"path":["core","ops","bit","ShrAssign"],"kind":"trait"},"17:9274:15211":{"crate_id":17,"path":["object","read","archive","ArchiveMember"],"kind":"struct"},"2:47566:7606":{"crate_id":2,"path":["core","iter","adapters","array_chunks","ArrayChunks"],"kind":"struct"},"2:22333:168":{"crate_id":2,"path":["core","num","nonzero","NonZeroI32"],"kind":"struct"},"1:4622:2278":{"crate_id":1,"path":["std","os","linux","process","ChildExt"],"kind":"trait"},"1:11307:22754":{"crate_id":1,"path":["std","sys_common","net","LookupHost"],"kind":"struct"},"1:1847:2066":{"crate_id":1,"path":["std","env","Args"],"kind":"struct"},"1:2476:2154":{"crate_id":1,"path":["std","io","buffered","bufreader","BufReader"],"kind":"struct"},"6:579:8819":{"crate_id":6,"path":["libc","unix","tms"],"kind":"struct"},"16:5472:15001":{"crate_id":16,"path":["gimli","read","cfi","EhFrame"],"kind":"struct"},"16:7093:15058":{"crate_id":16,"path":["gimli","read","op","Piece"],"kind":"struct"},"2:53080:27028":{"crate_id":2,"path":["core","core_arch","simd","m8x16"],"kind":"struct"},"2:22135:173":{"crate_id":2,"path":["core","num","nonzero","NonZeroU32"],"kind":"struct"},"1:5676:2354":{"crate_id":1,"path":["std","sync","barrier","BarrierWaitResult"],"kind":"struct"},"5:1243:2001":{"crate_id":5,"path":["alloc","collections","btree","map","entry","OccupiedEntry"],"kind":"struct"},"1:8501:2314":{"crate_id":1,"path":["std","path","StripPrefixError"],"kind":"struct"},"1:11465:20558":{"crate_id":1,"path":["std","personality","dwarf","eh","EHContext"],"kind":"struct"},"17:11787:18179":{"crate_id":17,"path":["object","macho","SubUmbrellaCommand"],"kind":"struct"},"16:6345:15039":{"crate_id":16,"path":["gimli","read","line","DebugLine"],"kind":"struct"},"1:9176:2066":{"crate_id":1,"path":["std","sys","unix","args","Args"],"kind":"struct"},"5:4219:242":{"crate_id":5,"path":["alloc","collections","vec_deque","VecDeque"],"kind":"struct"},"17:12836:18563":{"crate_id":17,"path":["object","pe","ImageSymbol"],"kind":"struct"},"2:51226:7676":{"crate_id":2,"path":["core","str","pattern","CharSliceSearcher"],"kind":"struct"},"5:5615:1990":{"crate_id":5,"path":["alloc","string","Drain"],"kind":"struct"},"1:8269:2280":{"crate_id":1,"path":["std","os","linux","raw","arch","stat"],"kind":"struct"},"2:4399:7755":{"crate_id":2,"path":["core","cell","SyncUnsafeCell"],"kind":"struct"},"2:49131:82":{"crate_id":2,"path":["core","sync","atomic","AtomicI32"],"kind":"struct"},"2:11310:8185":{"crate_id":2,"path":["core","str","iter","MatchesInternal"],"kind":"struct"},"2:50726:2144":{"crate_id":2,"path":["core","str","iter","Split"],"kind":"struct"},"5:7235:1991":{"crate_id":5,"path":["alloc","vec","drain_filter","DrainFilter"],"kind":"struct"},"16:7970:15094":{"crate_id":16,"path":["gimli","read","unit","DebugTypesUnitHeadersIter"],"kind":"struct"},"1:7662:2004":{"crate_id":1,"path":["std","collections","hash","map","RandomState"],"kind":"struct"},"2:3166:134":{"crate_id":2,"path":["core","ops","try_trait","FromResidual"],"kind":"trait"},"16:6676:15049":{"crate_id":16,"path":["gimli","read","loclists","DebugLoc"],"kind":"struct"},"6:5490:12750":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","aiocb"],"kind":"struct"},"16:5878:14046":{"crate_id":16,"path":["gimli","read","cfi","CallFrameInstruction"],"kind":"enum"},"2:49818:71":{"crate_id":2,"path":["core","fmt","ArgumentV1"],"kind":"struct"},"2:49514:7583":{"crate_id":2,"path":["core","fmt","num","UpperHex"],"kind":"struct"},"12:0:1740":{"crate_id":12,"path":["hashbrown"],"kind":"module"},"6:4621:12124":{"crate_id":6,"path":["libc","unix","linux_like","linux","j1939_filter"],"kind":"struct"},"1:1571:1990":{"crate_id":1,"path":["std","collections","hash","set","Drain"],"kind":"struct"},"17:13126:19014":{"crate_id":17,"path":["object","pe","ImageResourceDirectoryEntry"],"kind":"struct"},"2:57598:243":{"crate_id":2,"path":["core","core_simd","fmt","fmt","Wrapper"],"kind":"struct"},"2:50285:27894":{"crate_id":2,"path":["core","slice","ascii","EscapeByte"],"kind":"struct"},"2:2679:1874":{"crate_id":2,"path":["core","marker","Sized"],"kind":"trait"},"2:51737:7553":{"crate_id":2,"path":["core","alloc","AllocError"],"kind":"struct"},"5:1366:1985":{"crate_id":5,"path":["alloc","collections","btree","map","Iter"],"kind":"struct"},"2:5661:29052":{"crate_id":2,"path":["core","iter","adapters","flatten","TrustedConstSize"],"kind":"trait"},"2:21669:2199":{"crate_id":2,"path":["core","num","dec2flt","ParseFloatError"],"kind":"struct"},"1:4095:2243":{"crate_id":1,"path":["std","os","unix","net","ancillary","AncillaryData"],"kind":"enum"},"17:12609:18411":{"crate_id":17,"path":["object","pe","MaskedRichHeaderEntry"],"kind":"struct"},"1:878:1988":{"crate_id":1,"path":["std","collections","hash","map","Keys"],"kind":"struct"},"6:6534:13188":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","shmid_ds"],"kind":"struct"},"12:669:1993":{"crate_id":12,"path":["hashbrown","map","IntoKeys"],"kind":"struct"},"6:6312:13177":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","flock64"],"kind":"struct"},"2:2857:8019":{"crate_id":2,"path":["core","ops","bit","BitXorAssign"],"kind":"trait"},"1:11847:308":{"crate_id":1,"path":["std","array"],"kind":"primitive"},"2:10170:7630":{"crate_id":2,"path":["core","slice","iter","RSplitNMut"],"kind":"struct"},"2:51457:8175":{"crate_id":2,"path":["core","str","CharEscapeDefault"],"kind":"struct"},"1:1065:2001":{"crate_id":1,"path":["std","collections","hash","map","OccupiedEntry"],"kind":"struct"},"16:5122:14977":{"crate_id":16,"path":["gimli","constants","DwOp"],"kind":"struct"},"1:11184:20272":{"crate_id":1,"path":["std","sys_common","wtf8","CodePoint"],"kind":"struct"},"2:49766:67":{"crate_id":2,"path":["core","fmt","rt","v1","Alignment"],"kind":"enum"},"17:10546:15188":{"crate_id":17,"path":["object","read","FileKind"],"kind":"enum"},"1:2208:128":{"crate_id":1,"path":["std","fs","File"],"kind":"struct"},"5:5814:2130":{"crate_id":5,"path":["alloc","sync","from_iter_exact","Guard"],"kind":"struct"},"17:13366:19091":{"crate_id":17,"path":["object","pe","ImageArmRuntimeFunctionEntry"],"kind":"struct"},"1:4837:2276":{"crate_id":1,"path":["std","os","net","linux_ext","tcp","TcpStreamExt"],"kind":"trait"},"16:2367:14079":{"crate_id":16,"path":["gimli","common","DebugAddrBase"],"kind":"struct"},"2:1760:8051":{"crate_id":2,"path":["core","ptr","metadata","DynMetadata"],"kind":"struct"},"17:8272:15167":{"crate_id":17,"path":["object","common","SymbolScope"],"kind":"enum"},"17:10894:15203":{"crate_id":17,"path":["object","read","CompressedData"],"kind":"struct"},"2:47748:7974":{"crate_id":2,"path":["core","iter","adapters","scan","Scan"],"kind":"struct"},"1:5745:2363":{"crate_id":1,"path":["std","sync","lazy_lock","LazyLock"],"kind":"struct"},"5:2604:30185":{"crate_id":5,"path":["alloc","collections","btree","node","Handle"],"kind":"struct"},"5:6203:31279":{"crate_id":5,"path":["alloc","vec","drain","drop","DropGuard"],"kind":"struct"},"18:538:19219":{"crate_id":18,"path":["memchr","memmem","rabinkarp","NeedleHash"],"kind":"struct"},"2:3932:2130":{"crate_id":2,"path":["core","array","Guard"],"kind":"struct"},"17:12060:18198":{"crate_id":17,"path":["object","macho","RpathCommand"],"kind":"struct"},"16:4849:14776":{"crate_id":16,"path":["gimli","constants","DwLnct"],"kind":"struct"},"6:6425:13181":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_fpxreg"],"kind":"struct"},"17:12748:18474":{"crate_id":17,"path":["object","pe","ImageRomHeaders"],"kind":"struct"},"1:11497:14031":{"crate_id":1,"path":["std","backtrace_rs","backtrace","libunwind","Frame"],"kind":"enum"},"17:13176:19041":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation32"],"kind":"struct"},"2:50592:7607":{"crate_id":2,"path":["core","slice","iter","ArrayChunksMut"],"kind":"struct"},"16:6137:15025":{"crate_id":16,"path":["gimli","read","abbrev","Abbreviations"],"kind":"struct"},"6:1713:2236":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_un"],"kind":"struct"},"2:51304:7679":{"crate_id":2,"path":["core","str","pattern","StrSearcherImpl"],"kind":"enum"},"2:48058:7950":{"crate_id":2,"path":["core","iter","sources","repeat_with","RepeatWith"],"kind":"struct"},"2:9937:7633":{"crate_id":2,"path":["core","slice","iter","SplitInclusive"],"kind":"struct"},"17:11186:15628":{"crate_id":17,"path":["object","elf","Rela64"],"kind":"struct"},"2:7472:2014":{"crate_id":2,"path":["core","iter","traits","marker","FusedIterator"],"kind":"trait"},"9:827:13892":{"crate_id":9,"path":["miniz_oxide","inflate","TINFLStatus"],"kind":"enum"},"17:11199:15629":{"crate_id":17,"path":["object","elf","ProgramHeader32"],"kind":"struct"},"2:39870:25487":{"crate_id":2,"path":["core","error","private","Internal"],"kind":"struct"},"17:8055:15145":{"crate_id":17,"path":["object","common","Architecture"],"kind":"enum"},"17:8981:15181":{"crate_id":17,"path":["object","read","any","ComdatIterator"],"kind":"struct"},"2:2682:223":{"crate_id":2,"path":["core","marker","StructuralPartialEq"],"kind":"trait"},"2:8732:29019":{"crate_id":2,"path":["core","fmt","builders","PadAdapter"],"kind":"struct"},"18:719:19209":{"crate_id":18,"path":["memchr","memmem","NeedleInfo"],"kind":"struct"},"2:53339:2486":{"crate_id":2,"path":["core","core_arch","simd","u16x16"],"kind":"struct"},"1:7587:1927":{"crate_id":1,"path":["std","thread","Builder"],"kind":"struct"},"1:10987:2330":{"crate_id":1,"path":["std","sys","unix","process","process_inner","ExitStatus"],"kind":"struct"},"2:9515:27528":{"crate_id":2,"path":["core","slice","sort","merge_sort","RunVec"],"kind":"struct"},"2:47696:7979":{"crate_id":2,"path":["core","iter","adapters","intersperse","Intersperse"],"kind":"struct"},"17:11528:15351":{"crate_id":17,"path":["object","macho","FatHeader"],"kind":"struct"},"16:7388:15072":{"crate_id":16,"path":["gimli","read","rnglists","RawRngListIter"],"kind":"struct"},"2:50504:7616":{"crate_id":2,"path":["core","slice","iter","Windows"],"kind":"struct"},"18:599:33474":{"crate_id":18,"path":["memchr","memmem","twoway","Shift"],"kind":"enum"},"2:9160:27943":{"crate_id":2,"path":["core","fmt","fmt","BorrowedPlaceholder"],"kind":"struct"},"1:8096:2114":{"crate_id":1,"path":["std","io","IoSlice"],"kind":"struct"},"2:12137:27841":{"crate_id":2,"path":["core","future","join","MaybeDone"],"kind":"enum"},"18:0:1745":{"crate_id":18,"path":["memchr"],"kind":"module"},"2:4289:7751":{"crate_id":2,"path":["core","cell","BorrowRef"],"kind":"struct"},"2:47276:1962":{"crate_id":2,"path":["core","ascii","EscapeDefault"],"kind":"struct"},"16:5761:15012":{"crate_id":16,"path":["gimli","read","cfi","UnwindTable"],"kind":"struct"},"2:50712:2142":{"crate_id":2,"path":["core","str","iter","Bytes"],"kind":"struct"},"1:5368:2327":{"crate_id":1,"path":["std","process","Command"],"kind":"struct"},"1:10676:129":{"crate_id":1,"path":["std","sys","unix","fs","FileType"],"kind":"struct"},"16:5163:14994":{"crate_id":16,"path":["gimli","constants","DwEhPe"],"kind":"struct"},"2:47778:7976":{"crate_id":2,"path":["core","iter","adapters","skip_while","SkipWhile"],"kind":"struct"},"2:50990:7658":{"crate_id":2,"path":["core","str","iter","LinesAny"],"kind":"struct"},"17:10207:15376":{"crate_id":17,"path":["object","read","pe","file","PeFile"],"kind":"struct"},"17:10921:15403":{"crate_id":17,"path":["object","archive","Header"],"kind":"struct"},"17:9362:15183":{"crate_id":17,"path":["object","read","coff","symbol","SymbolTable"],"kind":"struct"},"16:7637:15084":{"crate_id":16,"path":["gimli","read","unit","DebuggingInformationEntry"],"kind":"struct"},"16:5411:14997":{"crate_id":16,"path":["gimli","read","cfi","EhFrameHdr"],"kind":"struct"},"1:4491:2268":{"crate_id":1,"path":["std","os","unix","thread","JoinHandleExt"],"kind":"trait"},"16:6316:15037":{"crate_id":16,"path":["gimli","read","index","UnitIndexSectionIterator"],"kind":"struct"},"17:11070:15580":{"crate_id":17,"path":["object","elf","CompressionHeader64"],"kind":"struct"},"1:8165:2191":{"crate_id":1,"path":["std","net","tcp","Incoming"],"kind":"struct"},"6:6519:13187":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ipc_perm"],"kind":"struct"},"6:4345:12097":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_effect"],"kind":"struct"},"17:12674:18467":{"crate_id":17,"path":["object","pe","ImageRomOptionalHeader"],"kind":"struct"},"1:7475:26138":{"crate_id":1,"path":["std","backtrace_rs","symbolize","SymbolName"],"kind":"struct"},"2:3178:7740":{"crate_id":2,"path":["core","ops","try_trait","NeverShortCircuit"],"kind":"struct"},"5:2884:31394":{"crate_id":5,"path":["alloc","collections","btree","node","marker","ValMut"],"kind":"struct"},"2:2773:8005":{"crate_id":2,"path":["core","ops","arith","Mul"],"kind":"trait"},"2:2672:217":{"crate_id":2,"path":["core","marker","Send"],"kind":"trait"},"6:1568:9721":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_ll"],"kind":"struct"},"17:10752:15197":{"crate_id":17,"path":["object","read","Import"],"kind":"struct"},"2:46796:7739":{"crate_id":2,"path":["core","ops","control_flow","ControlFlow"],"kind":"enum"},"17:13007:18998":{"crate_id":17,"path":["object","pe","ImageExportDirectory"],"kind":"struct"},"16:4721:14744":{"crate_id":16,"path":["gimli","constants","DwIdx"],"kind":"struct"},"2:47402:7655":{"crate_id":2,"path":["core","char","EscapeDebug"],"kind":"struct"},"2:47380:1962":{"crate_id":2,"path":["core","char","EscapeDefault"],"kind":"struct"},"2:51695:2501":{"crate_id":2,"path":["core","task","wake","RawWakerVTable"],"kind":"struct"},"2:52512:2488":{"crate_id":2,"path":["core","core_arch","simd","u32x2"],"kind":"struct"},"17:13340:19055":{"crate_id":17,"path":["object","pe","ImageHotPatchBase"],"kind":"struct"},"17:11368:15821":{"crate_id":17,"path":["object","elf","GnuHashHeader"],"kind":"struct"},"2:50696:7651":{"crate_id":2,"path":["core","str","iter","Chars"],"kind":"struct"},"6:652:8868":{"crate_id":6,"path":["libc","unix","linux_like","timezone"],"kind":"enum"},"1:5907:203":{"crate_id":1,"path":["std","sync","mpmc","counter","Receiver"],"kind":"struct"},"5:1432:1993":{"crate_id":5,"path":["alloc","collections","btree","map","IntoKeys"],"kind":"struct"},"2:20471:29010":{"crate_id":2,"path":["core","core_simd","swizzle","deinterleave","Even"],"kind":"struct"},"1:925:1993":{"crate_id":1,"path":["std","collections","hash","map","IntoKeys"],"kind":"struct"},"5:4064:2130":{"crate_id":5,"path":["alloc","collections","vec_deque","into_iter","try_rfold","Guard"],"kind":"struct"},"5:4939:2351":{"crate_id":5,"path":["alloc","rc","Weak"],"kind":"struct"},"17:10642:15192":{"crate_id":17,"path":["object","read","SymbolSection"],"kind":"enum"},"16:6567:15045":{"crate_id":16,"path":["gimli","read","line","IncompleteLineProgram"],"kind":"struct"},"17:13148:19017":{"crate_id":17,"path":["object","pe","ImageResourceDataEntry"],"kind":"struct"},"2:5882:7980":{"crate_id":2,"path":["core","iter","adapters","intersperse","IntersperseWith"],"kind":"struct"},"16:2705:14093":{"crate_id":16,"path":["gimli","common","DebugRngListsIndex"],"kind":"struct"},"17:11125:15589":{"crate_id":17,"path":["object","elf","Syminfo32"],"kind":"struct"},"5:6157:1990":{"crate_id":5,"path":["alloc","vec","drain","Drain"],"kind":"struct"},"17:9577:15247":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbolTable"],"kind":"struct"},"17:11661:18113":{"crate_id":17,"path":["object","macho","Section32"],"kind":"struct"},"5:1091:30303":{"crate_id":5,"path":["alloc","collections","btree","dedup_sorted_iter","DedupSortedIter"],"kind":"struct"},"5:6979:30169":{"crate_id":5,"path":["alloc","collections","btree","set_val","SetValZST"],"kind":"struct"},"17:12073:18199":{"crate_id":17,"path":["object","macho","LinkeditDataCommand"],"kind":"struct"},"2:48785:8028":{"crate_id":2,"path":["core","option","Item"],"kind":"struct"},"2:30180:27144":{"crate_id":2,"path":["core","ptr","alignment","AlignmentEnum64"],"kind":"enum"},"2:2778:8004":{"crate_id":2,"path":["core","ops","arith","Div"],"kind":"trait"},"2:51481:8192":{"crate_id":2,"path":["core","time","Nanoseconds"],"kind":"struct"},"17:13279:19053":{"crate_id":17,"path":["object","pe","ImageLoadConfigDirectory64"],"kind":"struct"},"17:8666:15176":{"crate_id":17,"path":["object","endian","I32Bytes"],"kind":"struct"},"17:11137:15590":{"crate_id":17,"path":["object","elf","Syminfo64"],"kind":"struct"},"2:21758:27229":{"crate_id":2,"path":["core","num","fmt","Part"],"kind":"enum"},"6:6555:13190":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ptrace_rseq_configuration"],"kind":"struct"},"17:12695:18468":{"crate_id":17,"path":["object","pe","ImageOptionalHeader64"],"kind":"struct"},"2:52382:2483":{"crate_id":2,"path":["core","core_arch","simd","u16x2"],"kind":"struct"},"1:5539:203":{"crate_id":1,"path":["std","sync","mpsc","Receiver"],"kind":"struct"},"17:8911:33444":{"crate_id":17,"path":["object","read","any","SegmentInternal"],"kind":"enum"},"2:2973:7567":{"crate_id":2,"path":["core","ops","generator","Generator"],"kind":"trait"},"1:2371:2110":{"crate_id":1,"path":["std","fs","read_dir"],"kind":"function"},"2:2684:108":{"crate_id":2,"path":["core","marker","Copy"],"kind":"trait"},"2:47442:7778":{"crate_id":2,"path":["core","char","TryFromCharError"],"kind":"struct"},"1:4664:2228":{"crate_id":1,"path":["std","os","fd","raw","FromRawFd"],"kind":"trait"},"9:586:13828":{"crate_id":9,"path":["miniz_oxide","deflate","core","SymFreq"],"kind":"struct"},"16:3026:14105":{"crate_id":16,"path":["gimli","arch","Arm"],"kind":"struct"},"2:52316:27216":{"crate_id":2,"path":["core","core_arch","simd","u8x2"],"kind":"struct"},"2:11345:7633":{"crate_id":2,"path":["core","str","iter","SplitInclusive"],"kind":"struct"},"1:638:1966":{"crate_id":1,"path":["std","backtrace","BacktraceFrame"],"kind":"struct"},"2:49051:81":{"crate_id":2,"path":["core","sync","atomic","AtomicI16"],"kind":"struct"},"16:0:1743":{"crate_id":16,"path":["gimli"],"kind":"module"},"6:1556:9720":{"crate_id":6,"path":["libc","unix","linux_like","addrinfo"],"kind":"struct"},"16:5235:32702":{"crate_id":16,"path":["gimli","read","util","sealed","CapacityFull"],"kind":"struct"},"16:5793:15014":{"crate_id":16,"path":["gimli","read","cfi","UnwindTableRow"],"kind":"struct"},"5:679:228":{"crate_id":5,"path":["alloc","borrow","ToOwned"],"kind":"trait"},"12:1866:2008":{"crate_id":12,"path":["hashbrown","set","SymmetricDifference"],"kind":"struct"},"5:7053:1983":{"crate_id":5,"path":["alloc","collections","TryReserveError"],"kind":"struct"},"2:51034:1962":{"crate_id":2,"path":["core","str","iter","EscapeDefault"],"kind":"struct"},"1:8213:2186":{"crate_id":1,"path":["std","os","unix","net","addr","SocketAddr"],"kind":"struct"},"6:4700:984":{"crate_id":6,"path":["libc","unix","linux_like","linux","option"],"kind":"struct"},"16:4888:14791":{"crate_id":16,"path":["gimli","constants","DwMacro"],"kind":"struct"},"2:7088:149":{"crate_id":2,"path":["core","iter","traits","collect","IntoIterator"],"kind":"trait"},"2:47646:7966":{"crate_id":2,"path":["core","iter","adapters","filter","Filter"],"kind":"struct"},"6:5702:12765":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","Elf32_Chdr"],"kind":"struct"},"2:47716:7960":{"crate_id":2,"path":["core","iter","adapters","map_while","MapWhile"],"kind":"struct"},"1:847:1985":{"crate_id":1,"path":["std","collections","hash","map","Iter"],"kind":"struct"},"1:1597:2009":{"crate_id":1,"path":["std","collections","hash","set","Union"],"kind":"struct"},"1:3369:2116":{"crate_id":1,"path":["std","io","Read"],"kind":"trait"},"16:6376:15041":{"crate_id":16,"path":["gimli","read","line","LineInstruction"],"kind":"enum"},"17:12550:18410":{"crate_id":17,"path":["object","pe","ImageVxdHeader"],"kind":"struct"},"17:8393:15171":{"crate_id":17,"path":["object","common","SegmentFlags"],"kind":"enum"},"1:3387:2115":{"crate_id":1,"path":["std","io","IoSliceMut"],"kind":"struct"},"12:1003:2001":{"crate_id":12,"path":["hashbrown","map","OccupiedEntry"],"kind":"struct"},"1:11860:1464":{"crate_id":1,"path":["std","u8"],"kind":"primitive"},"2:2691:1946":{"crate_id":2,"path":["core","marker","PhantomData"],"kind":"struct"},"12:1029:2002":{"crate_id":12,"path":["hashbrown","map","VacantEntry"],"kind":"struct"},"5:1454:195":{"crate_id":5,"path":["alloc","collections","btree","map","Range"],"kind":"struct"},"16:4749:14748":{"crate_id":16,"path":["gimli","constants","DwDefaulted"],"kind":"struct"},"17:10245:15389":{"crate_id":17,"path":["object","read","pe","file","PeComdatSectionIterator"],"kind":"struct"},"17:10583:15189":{"crate_id":17,"path":["object","read","ObjectKind"],"kind":"enum"},"1:11849:1368":{"crate_id":1,"path":["std","str"],"kind":"primitive"},"17:562:15162":{"crate_id":17,"path":["object","read","any","Symbol"],"kind":"struct"},"6:5792:12773":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","utmpx"],"kind":"struct"},"5:2876:30190":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Immut"],"kind":"struct"},"2:21787:29179":{"crate_id":2,"path":["core","num","fmt","Formatted"],"kind":"struct"},"17:13071:19006":{"crate_id":17,"path":["object","pe","ImageImportDescriptor"],"kind":"struct"},"2:47291:7780":{"crate_id":2,"path":["core","char","convert","ParseCharError"],"kind":"struct"},"2:50532:7617":{"crate_id":2,"path":["core","slice","iter","ChunksExact"],"kind":"struct"},"1:8087:2173":{"crate_id":1,"path":["std","io","util","Sink"],"kind":"struct"},"1:10636:25830":{"crate_id":1,"path":["std","sys","unix","fs","StatxExtraFields"],"kind":"struct"},"5:1973:2025":{"crate_id":5,"path":["alloc","collections","btree","map","CursorMut"],"kind":"struct"},"6:4615:12123":{"crate_id":6,"path":["libc","unix","linux_like","linux","can_filter"],"kind":"struct"},"1:6066:2502":{"crate_id":1,"path":["std","sync","mpmc","waker","Waker"],"kind":"struct"},"2:12381:139":{"crate_id":2,"path":["core","alloc","global","GlobalAlloc"],"kind":"trait"},"2:2736:1875":{"crate_id":2,"path":["core","marker","Unpin"],"kind":"trait"},"9:0:1737":{"crate_id":9,"path":["miniz_oxide"],"kind":"module"},"12:1845:1991":{"crate_id":12,"path":["hashbrown","set","DrainFilter"],"kind":"struct"},"17:9712:15294":{"crate_id":17,"path":["object","read","elf","version","VersionIndex"],"kind":"struct"},"1:8415:2309":{"crate_id":1,"path":["std","path","PrefixComponent"],"kind":"struct"},"16:6200:15030":{"crate_id":16,"path":["gimli","read","aranges","ArangeHeaderIter"],"kind":"struct"},"16:5558:15006":{"crate_id":16,"path":["gimli","read","cfi","CieOrFde"],"kind":"enum"},"17:12211:18269":{"crate_id":17,"path":["object","macho","SymsegCommand"],"kind":"struct"},"16:2261:14047":{"crate_id":16,"path":["gimli","common","Format"],"kind":"enum"},"5:4722:201":{"crate_id":5,"path":["alloc","rc","Rc"],"kind":"struct"},"1:891:1989":{"crate_id":1,"path":["std","collections","hash","map","Values"],"kind":"struct"},"1:929:1994":{"crate_id":1,"path":["std","collections","hash","map","IntoValues"],"kind":"struct"},"1:11214:20332":{"crate_id":1,"path":["std","sys_common","wtf8","Wtf8"],"kind":"struct"},"16:6816:32705":{"crate_id":16,"path":["gimli","read","lookup","DebugLookup"],"kind":"struct"},"2:57202:2499":{"crate_id":2,"path":["core","core_simd","swizzle","Which"],"kind":"enum"},"17:11617:18106":{"crate_id":17,"path":["object","macho","SegmentCommand32"],"kind":"struct"},"6:4569:12117":{"crate_id":6,"path":["libc","unix","linux_like","linux","fanotify_response"],"kind":"struct"},"2:20871:2225":{"crate_id":2,"path":["core","core_simd","masks","sealed","Sealed"],"kind":"trait"},"2:48583:2184":{"crate_id":2,"path":["core","net","ip_addr","Ipv6Addr"],"kind":"struct"},"17:10434:15394":{"crate_id":17,"path":["object","read","pe","relocation","RelocationIterator"],"kind":"struct"},"2:11059:8133":{"crate_id":2,"path":["core","slice","SlicePattern"],"kind":"trait"},"2:7084:133":{"crate_id":2,"path":["core","iter","traits","collect","FromIterator"],"kind":"trait"},"6:4544:12114":{"crate_id":6,"path":["libc","unix","linux_like","linux","in6_pktinfo"],"kind":"struct"},"2:3206:7565":{"crate_id":2,"path":["core","ops","unsize","CoerceUnsized"],"kind":"trait"},"2:2939:1878":{"crate_id":2,"path":["core","ops","function","FnMut"],"kind":"trait"},"2:50605:7623":{"crate_id":2,"path":["core","slice","iter","RChunks"],"kind":"struct"},"17:9193:33445":{"crate_id":17,"path":["object","read","any","SectionRelocationIteratorInternal"],"kind":"enum"},"2:47608:7957":{"crate_id":2,"path":["core","iter","adapters","cloned","Cloned"],"kind":"struct"},"2:52490:2484":{"crate_id":2,"path":["core","core_arch","simd","u16x4"],"kind":"struct"},"1:3922:2213":{"crate_id":1,"path":["std","os","unix","fs","MetadataExt"],"kind":"trait"},"17:10708:15195":{"crate_id":17,"path":["object","read","ObjectMap"],"kind":"struct"},"1:4662:2224":{"crate_id":1,"path":["std","os","fd","raw","AsRawFd"],"kind":"trait"},"1:11128:24880":{"crate_id":1,"path":["std","sys_common","once","futex","CompletionGuard"],"kind":"struct"},"1:11232:21145":{"crate_id":1,"path":["std","sys_common","wtf8","EncodeWide"],"kind":"struct"},"2:20721:2423":{"crate_id":2,"path":["core","core_simd","lane_count","LaneCount"],"kind":"struct"},"2:8956:2081":{"crate_id":2,"path":["core","fmt","Write"],"kind":"trait"},"2:48566:2183":{"crate_id":2,"path":["core","net","ip_addr","Ipv4Addr"],"kind":"struct"},"6:4708:12134":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_nl"],"kind":"struct"},"2:52530:27027":{"crate_id":2,"path":["core","core_arch","simd","u64x1"],"kind":"struct"},"1:4561:19306":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt","st_ctime"],"kind":"foreign_type"},"16:6704:15051":{"crate_id":16,"path":["gimli","read","loclists","LocationLists"],"kind":"struct"},"5:1376:1986":{"crate_id":5,"path":["alloc","collections","btree","map","IterMut"],"kind":"struct"},"2:11234:8184":{"crate_id":2,"path":["core","str","iter","SplitInternal"],"kind":"struct"},"2:9284:7807":{"crate_id":2,"path":["core","hash","BuildHasherDefault"],"kind":"struct"},"16:3599:14126":{"crate_id":16,"path":["gimli","constants","DwSectV2"],"kind":"struct"},"17:10257:15363":{"crate_id":17,"path":["object","read","pe","section","PeSegmentIterator"],"kind":"struct"},"1:8797:2367":{"crate_id":1,"path":["std","sync","mpsc","TryIter"],"kind":"struct"},"17:11813:18181":{"crate_id":17,"path":["object","macho","PreboundDylibCommand"],"kind":"struct"},"2:9024:7580":{"crate_id":2,"path":["core","fmt","LowerExp"],"kind":"trait"},"1:8265:2277":{"crate_id":1,"path":["std","os","linux","process","PidFd"],"kind":"struct"},"17:12768:18518":{"crate_id":17,"path":["object","pe","AnonObjectHeader"],"kind":"struct"},"16:8056:15097":{"crate_id":16,"path":["gimli","read","StoreOnHeap"],"kind":"struct"},"11:44:13982":{"crate_id":11,"path":["adler","Adler32"],"kind":"struct"},"2:20852:2422":{"crate_id":2,"path":["core","core_simd","masks","to_bitmask","ToBitMask"],"kind":"trait"},"6:6440:13183":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_fpstate"],"kind":"struct"},"1:11843:410":{"crate_id":1,"path":["std","char"],"kind":"primitive"},"6:500:8809":{"crate_id":6,"path":["libc","unix","rlimit"],"kind":"struct"},"6:7299:13750":{"crate_id":6,"path":["libc","unix","align","in6_addr"],"kind":"struct"},"1:734:141":{"crate_id":1,"path":["std","collections","hash","map","HashMap"],"kind":"struct"},"2:51000:7647":{"crate_id":2,"path":["core","str","iter","SplitWhitespace"],"kind":"struct"},"9:920:13795":{"crate_id":9,"path":["miniz_oxide","MZError"],"kind":"enum"},"6:4726:12136":{"crate_id":6,"path":["libc","unix","linux_like","linux","dirent64"],"kind":"struct"},"17:10088:15308":{"crate_id":17,"path":["object","read","macho","segment","MachOSegmentInternal"],"kind":"struct"},"6:5453:12693":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","statx"],"kind":"struct"},"12:2190:32305":{"crate_id":12,"path":["hashbrown","raw","Fallibility"],"kind":"enum"},"17:13527:19134":{"crate_id":17,"path":["object","pe","ImageFunctionEntry64"],"kind":"struct"},"1:956:1998":{"crate_id":1,"path":["std","collections","hash","map","RawVacantEntryMut"],"kind":"struct"},"5:1329:94":{"crate_id":5,"path":["alloc","collections","btree","map","BTreeMap"],"kind":"struct"},"2:2507:235":{"crate_id":2,"path":["core","convert","TryInto"],"kind":"trait"},"6:4537:12113":{"crate_id":6,"path":["libc","unix","linux_like","linux","genlmsghdr"],"kind":"struct"},"17:3249:15329":{"crate_id":17,"path":["object","read","macho","relocation","MachORelocationIterator"],"kind":"struct"},"5:5143:7600":{"crate_id":5,"path":["alloc","slice","Join"],"kind":"trait"},"16:6781:15054":{"crate_id":16,"path":["gimli","read","loclists","LocListIter"],"kind":"struct"},"6:4277:12088":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_mask"],"kind":"struct"},"2:21287:2418":{"crate_id":2,"path":["core","core_simd","vector","Simd"],"kind":"struct"},"5:7169:7687":{"crate_id":5,"path":["alloc","string","FromUtf8Error"],"kind":"struct"},"1:646:1969":{"crate_id":1,"path":["std","backtrace","BytesOrWide"],"kind":"enum"},"2:2853:8018":{"crate_id":2,"path":["core","ops","bit","BitOrAssign"],"kind":"trait"},"2:9014:7574":{"crate_id":2,"path":["core","fmt","Octal"],"kind":"trait"},"1:7679:2054":{"crate_id":1,"path":["std","env","VarError"],"kind":"enum"},"6:4339:12096":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_rumble_effect"],"kind":"struct"},"1:2831:24877":{"crate_id":1,"path":["std","io","error","repr_bitpacked","Repr"],"kind":"struct"},"16:6330:15038":{"crate_id":16,"path":["gimli","read","index","UnitIndexSection"],"kind":"struct"},"2:10087:7628":{"crate_id":2,"path":["core","slice","iter","RSplitMut"],"kind":"struct"},"1:3312:2172":{"crate_id":1,"path":["std","io","util","Repeat"],"kind":"struct"},"16:2771:14096":{"crate_id":16,"path":["gimli","common","DebugStrOffsetsIndex"],"kind":"struct"},"5:1055:30305":{"crate_id":5,"path":["alloc","collections","btree","append","MergeIter"],"kind":"struct"},"12:738:1989":{"crate_id":12,"path":["hashbrown","map","Values"],"kind":"struct"},"1:2613:2157":{"crate_id":1,"path":["std","io","buffered","linewriter","LineWriter"],"kind":"struct"},"1:4886:2285":{"crate_id":1,"path":["std","panic","always_abort"],"kind":"function"},"17:12756:18516":{"crate_id":17,"path":["object","pe","Guid"],"kind":"struct"},"16:2487:14084":{"crate_id":16,"path":["gimli","common","DebugLineStrOffset"],"kind":"struct"},"6:5551:12756":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","termios"],"kind":"struct"},"2:39874:8080":{"crate_id":2,"path":["core","error","Source"],"kind":"struct"},"16:6186:15029":{"crate_id":16,"path":["gimli","read","aranges","DebugAranges"],"kind":"struct"},"2:51521:2416":{"crate_id":2,"path":["core","time","TryFromFloatSecsError"],"kind":"struct"},"6:4427:12104":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Sym"],"kind":"struct"},"6:5743:12770":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_seccomp"],"kind":"struct"},"16:2320:14077":{"crate_id":16,"path":["gimli","common","Register"],"kind":"struct"},"18:531:19218":{"crate_id":18,"path":["memchr","memmem","prefilter","PrefilterState"],"kind":"struct"},"1:914:1991":{"crate_id":1,"path":["std","collections","hash","map","DrainFilter"],"kind":"struct"},"14:7:14005":{"crate_id":14,"path":["rustc_demangle","legacy","Demangle"],"kind":"struct"},"2:2592:127":{"crate_id":2,"path":["core","error","Error"],"kind":"trait"},"17:12934:18635":{"crate_id":17,"path":["object","pe","ImageAuxSymbolSection"],"kind":"struct"},"1:10932:24761":{"crate_id":1,"path":["std","sys","unix","process","process_inner","posix_spawn","PosixSpawnattr"],"kind":"struct"},"2:2802:8009":{"crate_id":2,"path":["core","ops","arith","MulAssign"],"kind":"trait"},"2:50067:2308":{"crate_id":2,"path":["core","hash","sip","State"],"kind":"struct"},"1:5553:2369":{"crate_id":1,"path":["std","sync","mpsc","SyncSender"],"kind":"struct"},"9:622:13816":{"crate_id":9,"path":["miniz_oxide","deflate","core","TDEFLFlush"],"kind":"enum"},"1:9376:24862":{"crate_id":1,"path":["std","sys","unix","fs","Dir"],"kind":"struct"},"1:11330:2193":{"crate_id":1,"path":["std","sys_common","net","TcpStream"],"kind":"struct"},"6:6321:13178":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","siginfo_t"],"kind":"struct"},"16:6463:15042":{"crate_id":16,"path":["gimli","read","line","LineInstructions"],"kind":"struct"},"5:5139:7599":{"crate_id":5,"path":["alloc","slice","Concat"],"kind":"trait"},"2:47636:7965":{"crate_id":2,"path":["core","iter","adapters","enumerate","Enumerate"],"kind":"struct"},"17:10506:15364":{"crate_id":17,"path":["object","read","pe","rich","RichHeaderInfo"],"kind":"struct"},"12:320:32291":{"crate_id":12,"path":["hashbrown","raw","RawIntoIter"],"kind":"struct"},"2:47333:7781":{"crate_id":2,"path":["core","char","decode","DecodeUtf16"],"kind":"struct"},"2:51009:7646":{"crate_id":2,"path":["core","str","iter","SplitAsciiWhitespace"],"kind":"struct"},"2:54579:2494":{"crate_id":2,"path":["core","core_arch","simd","u64x8"],"kind":"struct"},"17:10528:15187":{"crate_id":17,"path":["object","read","traits","NoDynamicRelocationIterator"],"kind":"struct"},"2:51161:7674":{"crate_id":2,"path":["core","str","pattern","CharArraySearcher"],"kind":"struct"},"1:2345:2100":{"crate_id":1,"path":["std","fs","symlink_metadata"],"kind":"function"},"5:1228:2002":{"crate_id":5,"path":["alloc","collections","btree","map","entry","VacantEntry"],"kind":"struct"},"2:4754:781":{"crate_id":2,"path":["core","iter"],"kind":"module"},"6:7224:12269":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_rwlockattr_t"],"kind":"struct"},"6:1614:9726":{"crate_id":6,"path":["libc","unix","linux_like","lconv"],"kind":"struct"},"1:1786:2047":{"crate_id":1,"path":["std","env","Vars"],"kind":"struct"},"1:5990:24848":{"crate_id":1,"path":["std","sync","mpmc","list","Channel"],"kind":"struct"},"6:123:8488":{"crate_id":6,"path":["libc","unix","fpos_t"],"kind":"enum"},"2:47827:7978":{"crate_id":2,"path":["core","iter","adapters","zip","Zip"],"kind":"struct"},"6:4755:12139":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_user_dev"],"kind":"struct"},"5:1422:1992":{"crate_id":5,"path":["alloc","collections","btree","map","ValuesMut"],"kind":"struct"},"17:9021:15182":{"crate_id":17,"path":["object","read","any","ComdatSectionIterator"],"kind":"struct"},"2:5494:7959":{"crate_id":2,"path":["core","iter","adapters","flatten","Flatten"],"kind":"struct"},"18:699:19208":{"crate_id":18,"path":["memchr","memmem","FinderBuilder"],"kind":"struct"},"2:11521:7644":{"crate_id":2,"path":["core","str","pattern"],"kind":"module"},"2:51325:7681":{"crate_id":2,"path":["core","str","pattern","TwoWaySearcher"],"kind":"struct"},"1:10706:20323":{"crate_id":1,"path":["std","sys","unix","kernel_copy","SpliceMode"],"kind":"enum"},"2:9279:7806":{"crate_id":2,"path":["core","hash","BuildHasher"],"kind":"trait"},"16:7603:15083":{"crate_id":16,"path":["gimli","read","unit","UnitHeader"],"kind":"struct"},"18:644:33466":{"crate_id":18,"path":["memchr","memmem","x86","avx","nostd","Forward"],"kind":"struct"},"2:54617:2459":{"crate_id":2,"path":["core","core_arch","simd","f64x8"],"kind":"struct"},"12:1555:13999":{"crate_id":12,"path":["hashbrown","rustc_entry","RustcVacantEntry"],"kind":"struct"},"16:5996:15018":{"crate_id":16,"path":["gimli","read","dwarf","Dwarf"],"kind":"struct"},"16:4519:14710":{"crate_id":16,"path":["gimli","constants","DwLang"],"kind":"struct"},"6:4222:12082":{"crate_id":6,"path":["libc","unix","linux_like","linux","msginfo"],"kind":"struct"},"16:7890:15089":{"crate_id":16,"path":["gimli","read","unit","EntriesCursor"],"kind":"struct"},"5:961:31279":{"crate_id":5,"path":["alloc","collections","binary_heap","drop","DropGuard"],"kind":"struct"},"6:4364:12099":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_ff_erase"],"kind":"struct"},"2:3172:7741":{"crate_id":2,"path":["core","ops","try_trait","Residual"],"kind":"trait"},"2:48024:1972":{"crate_id":2,"path":["core","iter","sources","once","Once"],"kind":"struct"},"1:1580:2006":{"crate_id":1,"path":["std","collections","hash","set","Intersection"],"kind":"struct"},"14:40:15406":{"crate_id":14,"path":["rustc_demangle","v0","Ident"],"kind":"struct"},"1:9059:216":{"crate_id":1,"path":["std","sync","rwlock","RwLockWriteGuard"],"kind":"struct"},"6:4195:12079":{"crate_id":6,"path":["libc","unix","linux_like","linux","fsid_t"],"kind":"struct"},"2:54690:7536":{"crate_id":2,"path":["core","core_arch","x86","__m256d"],"kind":"struct"},"5:3501:1986":{"crate_id":5,"path":["alloc","collections","linked_list","IterMut"],"kind":"struct"},"16:5184:14045":{"crate_id":16,"path":["gimli","endianity","RunTimeEndian"],"kind":"enum"},"17:11909:18187":{"crate_id":17,"path":["object","macho","DysymtabCommand"],"kind":"struct"},"2:38678:7787":{"crate_id":2,"path":["core","cmp","Reverse"],"kind":"struct"},"5:4264:2130":{"crate_id":5,"path":["alloc","collections","vec_deque","write_iter_wrapping","Guard"],"kind":"struct"},"1:4419:2253":{"crate_id":1,"path":["std","os","unix","process","ExitStatusExt"],"kind":"trait"},"1:8146:2142":{"crate_id":1,"path":["std","io","Bytes"],"kind":"struct"},"1:9083:2122":{"crate_id":1,"path":["std","time","SystemTime"],"kind":"struct"},"16:6270:15034":{"crate_id":16,"path":["gimli","read","index","DebugCuIndex"],"kind":"struct"},"12:1836:1987":{"crate_id":12,"path":["hashbrown","set","IntoIter"],"kind":"struct"},"12:300:32302":{"crate_id":12,"path":["hashbrown","raw","RawIter"],"kind":"struct"},"2:2306:124":{"crate_id":2,"path":["core","cmp","Eq"],"kind":"trait"},"6:6458:13184":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user_regs_struct"],"kind":"struct"},"16:7956:15093":{"crate_id":16,"path":["gimli","read","unit","DebugTypes"],"kind":"struct"},"11:0:1739":{"crate_id":11,"path":["adler"],"kind":"module"},"6:4106:12072":{"crate_id":6,"path":["libc","unix","linux_like","linux","rlimit64"],"kind":"struct"},"17:12349:18345":{"crate_id":17,"path":["object","macho","RelocationInfo"],"kind":"struct"},"16:7343:15070":{"crate_id":16,"path":["gimli","read","rnglists","DebugRngLists"],"kind":"struct"},"1:8171:2190":{"crate_id":1,"path":["std","net","tcp","IntoIncoming"],"kind":"struct"},"17:9658:15292":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdatSectionIterator"],"kind":"struct"},"16:4689:14736":{"crate_id":16,"path":["gimli","constants","DwDsc"],"kind":"struct"},"16:7435:15075":{"crate_id":16,"path":["gimli","read","rnglists","RawRange"],"kind":"struct"},"16:7909:15090":{"crate_id":16,"path":["gimli","read","unit","EntriesTree"],"kind":"struct"},"1:9043:164":{"crate_id":1,"path":["std","sync","mutex","MutexGuard"],"kind":"struct"},"2:9016:7573":{"crate_id":2,"path":["core","fmt","Binary"],"kind":"trait"},"1:10402:2166":{"crate_id":1,"path":["std","sys","unix","stdio","Stdout"],"kind":"struct"},"2:47055:8024":{"crate_id":2,"path":["core","ops","try_trait","Yeet"],"kind":"struct"},"16:6052:15021":{"crate_id":16,"path":["gimli","read","dwarf","RangeIter"],"kind":"struct"},"1:6082:24879":{"crate_id":1,"path":["std","sync","mpmc","waker","SyncWaker"],"kind":"struct"},"2:4707:1609":{"crate_id":2,"path":["core","ffi","c_void"],"kind":"enum"},"17:11828:18182":{"crate_id":17,"path":["object","macho","DylinkerCommand"],"kind":"struct"},"17:9885:15346":{"crate_id":17,"path":["object","read","macho","file","MachOComdat"],"kind":"struct"},"16:6865:32376":{"crate_id":16,"path":["gimli","read","lookup","PubStuffParser"],"kind":"struct"},"2:8140:2296":{"crate_id":2,"path":["core","panic","unwind_safe","RefUnwindSafe"],"kind":"trait"},"17:8701:15177":{"crate_id":17,"path":["object","endian","I64Bytes"],"kind":"struct"},"17:9303:15228":{"crate_id":17,"path":["object","read","coff","section","SectionTable"],"kind":"struct"},"17:8881:33453":{"crate_id":17,"path":["object","read","any","SegmentIteratorInternal"],"kind":"enum"},"5:5391:7713":{"crate_id":5,"path":["alloc","string","retain","SetLenOnDrop"],"kind":"struct"},"6:1660:9729":{"crate_id":6,"path":["libc","unix","linux_like","in6_rtmsg"],"kind":"struct"},"1:0:1360":{"crate_id":1,"path":["std"],"kind":"module"},"16:7278:15064":{"crate_id":16,"path":["gimli","read","pubnames","DebugPubNames"],"kind":"struct"},"2:57611:243":{"crate_id":2,"path":["core","core_simd","fmt","fmt","Wrapper"],"kind":"struct"},"5:6924:2012":{"crate_id":5,"path":["alloc","collections","binary_heap","IntoIterSorted"],"kind":"struct"},"16:6123:15024":{"crate_id":16,"path":["gimli","read","abbrev","DebugAbbrev"],"kind":"struct"},"1:484:24859":{"crate_id":1,"path":["std","thread","spawn_unchecked_","MaybeDangling"],"kind":"struct"},"16:2930:14102":{"crate_id":16,"path":["gimli","common","SectionId"],"kind":"enum"},"1:6354:2357":{"crate_id":1,"path":["std","sync","once","OnceState"],"kind":"struct"},"17:8596:15174":{"crate_id":17,"path":["object","endian","U64Bytes"],"kind":"struct"},"6:4241:12084":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_event"],"kind":"struct"},"2:9244:144":{"crate_id":2,"path":["core","hash","Hasher"],"kind":"trait"},"12:697:1994":{"crate_id":12,"path":["hashbrown","map","IntoValues"],"kind":"struct"},"16:7557:15081":{"crate_id":16,"path":["gimli","read","unit","DebugInfoUnitHeadersIter"],"kind":"struct"},"2:9845:1985":{"crate_id":2,"path":["core","slice","iter","Iter"],"kind":"struct"},"17:9433:15219":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdat"],"kind":"struct"},"16:5219:14041":{"crate_id":16,"path":["gimli","endianity","BigEndian"],"kind":"struct"},"12:1065:32306":{"crate_id":12,"path":["hashbrown","map","KeyOrRef"],"kind":"enum"},"17:10283:15361":{"crate_id":17,"path":["object","read","pe","section","PeSectionIterator"],"kind":"struct"},"12:1628:32289":{"crate_id":12,"path":["hashbrown","scopeguard","ScopeGuard"],"kind":"struct"},"1:7672:2005":{"crate_id":1,"path":["std","collections","hash","map","DefaultHasher"],"kind":"struct"},"1:8159:2145":{"crate_id":1,"path":["std","io","Lines"],"kind":"struct"},"17:11300:15802":{"crate_id":17,"path":["object","elf","Verneed"],"kind":"struct"},"5:7180:7688":{"crate_id":5,"path":["alloc","string","FromUtf16Error"],"kind":"struct"},"1:8291:2227":{"crate_id":1,"path":["std","os","fd","owned","BorrowedFd"],"kind":"struct"},"2:50289:7609":{"crate_id":2,"path":["core","slice","ascii","EscapeAscii"],"kind":"struct"},"1:8875:2374":{"crate_id":1,"path":["std","sync","mpsc","TrySendError"],"kind":"enum"},"17:8295:15168":{"crate_id":17,"path":["object","common","RelocationKind"],"kind":"enum"},"1:3601:2189":{"crate_id":1,"path":["std","net","socket_addr","ToSocketAddrs"],"kind":"trait"},"6:6279:8856":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","sigaction"],"kind":"struct"},"16:3716:14171":{"crate_id":16,"path":["gimli","constants","DwChildren"],"kind":"struct"},"2:21629:28458":{"crate_id":2,"path":["core","num","dec2flt","decimal","Decimal"],"kind":"struct"},"2:1751:27493":{"crate_id":2,"path":["core","ptr","metadata","PtrComponents"],"kind":"struct"},"5:4103:1985":{"crate_id":5,"path":["alloc","collections","vec_deque","iter","Iter"],"kind":"struct"},"16:7298:15066":{"crate_id":16,"path":["gimli","read","pubtypes","PubTypesEntry"],"kind":"struct"},"18:582:7787":{"crate_id":18,"path":["memchr","memmem","twoway","Reverse"],"kind":"struct"},"6:4189:12078":{"crate_id":6,"path":["libc","unix","linux_like","linux","itimerspec"],"kind":"struct"},"6:4408:12103":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Ehdr"],"kind":"struct"},"2:49171:89":{"crate_id":2,"path":["core","sync","atomic","AtomicU32"],"kind":"struct"},"12:2198:32300":{"crate_id":12,"path":["hashbrown","raw","TableLayout"],"kind":"struct"},"5:7141:2084":{"crate_id":5,"path":["alloc","ffi","c_str","IntoStringError"],"kind":"struct"},"16:2282:14075":{"crate_id":16,"path":["gimli","common","Encoding"],"kind":"struct"},"2:51652:192":{"crate_id":2,"path":["core","task","poll","Poll"],"kind":"enum"},"2:2337:179":{"crate_id":2,"path":["core","cmp","Ord"],"kind":"trait"},"6:1511:9714":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreq"],"kind":"struct"},"6:4631:12125":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_filter"],"kind":"struct"},"1:933:1995":{"crate_id":1,"path":["std","collections","hash","map","RawEntryBuilderMut"],"kind":"struct"},"1:679:1970":{"crate_id":1,"path":["std","backtrace","LazilyResolvedCapture"],"kind":"struct"},"12:1872:2009":{"crate_id":12,"path":["hashbrown","set","Union"],"kind":"struct"},"18:521:19214":{"crate_id":18,"path":["memchr","memmem","prefilter","Prefilter"],"kind":"enum"},"16:3457:14109":{"crate_id":16,"path":["gimli","arch","X86_64"],"kind":"struct"},"1:6466:2361":{"crate_id":1,"path":["std","sync","poison","TryLockError"],"kind":"enum"},"17:8110:15143":{"crate_id":17,"path":["object","common","AddressSize"],"kind":"enum"},"2:48048:7949":{"crate_id":2,"path":["core","iter","sources","repeat_n","RepeatN"],"kind":"struct"},"1:904:1990":{"crate_id":1,"path":["std","collections","hash","map","Drain"],"kind":"struct"},"17:8774:15146":{"crate_id":17,"path":["object","read","util","ByteString"],"kind":"struct"},"1:5053:188":{"crate_id":1,"path":["std","path","PathBuf"],"kind":"struct"},"5:273:31279":{"crate_id":5,"path":["alloc","boxed","thin","drop","DropGuard"],"kind":"struct"},"16:7929:15091":{"crate_id":16,"path":["gimli","read","unit","EntriesTreeNode"],"kind":"struct"},"17:9475:15244":{"crate_id":17,"path":["object","read","elf","segment","ElfSegmentIterator"],"kind":"struct"},"9:33:13867":{"crate_id":9,"path":["miniz_oxide","deflate","buffer","LocalBuf"],"kind":"struct"},"2:51644:208":{"crate_id":2,"path":["core","future","ResumeTy"],"kind":"struct"},"1:3908:2211":{"crate_id":1,"path":["std","os","unix","fs","PermissionsExt"],"kind":"trait"},"17:11639:18107":{"crate_id":17,"path":["object","macho","SegmentCommand64"],"kind":"struct"},"16:4574:14717":{"crate_id":16,"path":["gimli","constants","DwId"],"kind":"struct"},"17:12797:18520":{"crate_id":17,"path":["object","pe","AnonObjectHeaderBigobj"],"kind":"struct"},"2:21130:2427":{"crate_id":2,"path":["core","core_simd","ord","SimdPartialOrd"],"kind":"trait"},"16:5388:14996":{"crate_id":16,"path":["gimli","read","cfi","DebugFrame"],"kind":"struct"},"1:2867:207":{"crate_id":1,"path":["std","io","error","Result"],"kind":"typedef"},"17:12164:18205":{"crate_id":17,"path":["object","macho","BuildToolVersion"],"kind":"struct"},"1:7944:2158":{"crate_id":1,"path":["std","io","error","ErrorKind"],"kind":"enum"},"6:4683:12132":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_ifru_map"],"kind":"struct"},"6:6339:2280":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stat"],"kind":"struct"},"2:52406:2475":{"crate_id":2,"path":["core","core_arch","simd","i8x4"],"kind":"struct"},"2:2578:115":{"crate_id":2,"path":["core","default","Default"],"kind":"trait"},"1:11075:2377":{"crate_id":1,"path":["std","sys","unix","time","inner","Instant"],"kind":"struct"},"17:10682:15194":{"crate_id":17,"path":["object","read","SymbolMapName"],"kind":"struct"},"1:11868:13":{"crate_id":1,"path":["std","fn"],"kind":"primitive"},"2:49751:70":{"crate_id":2,"path":["core","fmt","rt","v1","Argument"],"kind":"struct"},"2:57572:243":{"crate_id":2,"path":["core","core_simd","fmt","fmt","Wrapper"],"kind":"struct"},"2:21393:2225":{"crate_id":2,"path":["core","core_simd","vector","sealed","Sealed"],"kind":"trait"},"6:5682:12763":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","regex_t"],"kind":"struct"},"18:660:19204":{"crate_id":18,"path":["memchr","memmem","FindIter"],"kind":"struct"},"17:11500:17996":{"crate_id":17,"path":["object","macho","DyldCacheImageInfo"],"kind":"struct"},"2:51445:8171":{"crate_id":2,"path":["core","str","LinesAnyMap"],"kind":"struct"},"2:2343:186":{"crate_id":2,"path":["core","cmp","PartialOrd"],"kind":"trait"},"6:7259:12274":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_rwlock_t"],"kind":"struct"},"2:4373:1945":{"crate_id":2,"path":["core","cell","UnsafeCell"],"kind":"struct"},"6:4459:12107":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Phdr"],"kind":"struct"},"16:6654:15048":{"crate_id":16,"path":["gimli","read","line","FileEntryFormat"],"kind":"struct"},"1:8789:1985":{"crate_id":1,"path":["std","sync","mpsc","Iter"],"kind":"struct"},"2:2861:8020":{"crate_id":2,"path":["core","ops","bit","ShlAssign"],"kind":"trait"},"5:5095:31279":{"crate_id":5,"path":["alloc","slice","hack","to_vec","DropGuard"],"kind":"struct"},"2:2252:105":{"crate_id":2,"path":["core","clone","Clone"],"kind":"trait"},"1:5305:2323":{"crate_id":1,"path":["std","process","Child"],"kind":"struct"},"16:6241:15032":{"crate_id":16,"path":["gimli","read","aranges","ArangeEntryIter"],"kind":"struct"},"2:9483:28751":{"crate_id":2,"path":["core","slice","sort","merge","MergeHole"],"kind":"struct"},"16:6472:14020":{"crate_id":16,"path":["gimli","read","line","LineRow"],"kind":"struct"},"2:52336:27204":{"crate_id":2,"path":["core","core_arch","simd","i8x2"],"kind":"struct"},"2:30074:27101":{"crate_id":2,"path":["core","ptr","alignment","AlignmentEnum32"],"kind":"enum"},"1:8935:19765":{"crate_id":1,"path":["std","sync","mpmc","error","SendTimeoutError"],"kind":"enum"},"2:54701:7537":{"crate_id":2,"path":["core","core_arch","x86","__m512i"],"kind":"struct"},"17:11247:15682":{"crate_id":17,"path":["object","elf","Dyn64"],"kind":"struct"},"1:3236:2163":{"crate_id":1,"path":["std","io","stdio","StderrLock"],"kind":"struct"},"1:10666:2093":{"crate_id":1,"path":["std","sys","unix","fs","FileTimes"],"kind":"struct"},"2:22432:2202":{"crate_id":2,"path":["core","num","nonzero","NonZeroIsize"],"kind":"struct"},"6:4645:12127":{"crate_id":6,"path":["libc","unix","linux_like","linux","seccomp_data"],"kind":"struct"},"2:54664:7534":{"crate_id":2,"path":["core","core_arch","x86","__m256i"],"kind":"struct"},"2:48946:180":{"crate_id":2,"path":["core","sync","atomic","Ordering"],"kind":"enum"},"1:10915:24857":{"crate_id":1,"path":["std","sys","unix","process","process_inner","do_exec","Reset"],"kind":"struct"},"2:20678:2225":{"crate_id":2,"path":["core","core_simd","elements","sealed","Sealed"],"kind":"trait"},"2:2794:2413":{"crate_id":2,"path":["core","ops","arith","AddAssign"],"kind":"trait"},"12:2069:2001":{"crate_id":12,"path":["hashbrown","set","OccupiedEntry"],"kind":"struct"},"2:48708:2187":{"crate_id":2,"path":["core","net","socket_addr","SocketAddrV4"],"kind":"struct"},"6:5751:12771":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ptrace_syscall_info"],"kind":"struct"},"2:2504:132":{"crate_id":2,"path":["core","convert","From"],"kind":"trait"},"17:11761:18177":{"crate_id":17,"path":["object","macho","SubFrameworkCommand"],"kind":"struct"},"1:361:1956":{"crate_id":1,"path":["std","thread","scoped","ScopedJoinHandle"],"kind":"struct"},"2:10688:7622":{"crate_id":2,"path":["core","slice","iter","GroupByMut"],"kind":"struct"},"16:6790:15055":{"crate_id":16,"path":["gimli","read","loclists","LocationListEntry"],"kind":"struct"},"16:7372:32519":{"crate_id":16,"path":["gimli","read","rnglists","RangeListsFormat"],"kind":"enum"},"2:54754:7540":{"crate_id":2,"path":["core","core_arch","x86","__m128bh"],"kind":"struct"},"2:53385:2490":{"crate_id":2,"path":["core","core_arch","simd","u32x8"],"kind":"struct"},"6:4807:12143":{"crate_id":6,"path":["libc","unix","linux_like","linux","ifreq"],"kind":"struct"},"2:2232:98":{"crate_id":2,"path":["core","borrow","BorrowMut"],"kind":"trait"},"1:3195:2166":{"crate_id":1,"path":["std","io","stdio","Stdout"],"kind":"struct"},"17:13327:19054":{"crate_id":17,"path":["object","pe","ImageHotPatchInfo"],"kind":"struct"},"2:1919:7569":{"crate_id":2,"path":["core","ptr","unique","Unique"],"kind":"struct"},"6:4112:12073":{"crate_id":6,"path":["libc","unix","linux_like","linux","glob_t"],"kind":"struct"},"2:22366:169":{"crate_id":2,"path":["core","num","nonzero","NonZeroI64"],"kind":"struct"},"2:21742:27234":{"crate_id":2,"path":["core","num","flt2dec","Sign"],"kind":"enum"},"5:2873:7557":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Owned"],"kind":"enum"},"2:52460:2496":{"crate_id":2,"path":["core","core_arch","simd","u8x8"],"kind":"struct"},"1:641:1968":{"crate_id":1,"path":["std","backtrace","BacktraceSymbol"],"kind":"struct"},"17:10374:15359":{"crate_id":17,"path":["object","read","pe","import","ImportTable"],"kind":"struct"},"2:50579:7606":{"crate_id":2,"path":["core","slice","iter","ArrayChunks"],"kind":"struct"},"17:10233:15388":{"crate_id":17,"path":["object","read","pe","file","PeComdat"],"kind":"struct"},"1:3956:2214":{"crate_id":1,"path":["std","os","unix","fs","FileTypeExt"],"kind":"trait"},"2:49011:91":{"crate_id":2,"path":["core","sync","atomic","AtomicU8"],"kind":"struct"},"12:725:1988":{"crate_id":12,"path":["hashbrown","map","Keys"],"kind":"struct"},"2:50794:7663":{"crate_id":2,"path":["core","str","iter","RSplitTerminator"],"kind":"struct"},"17:8418:15172":{"crate_id":17,"path":["object","common","SectionFlags"],"kind":"enum"},"2:4081:7757":{"crate_id":2,"path":["core","cell","lazy","LazyCell"],"kind":"struct"},"6:587:8820":{"crate_id":6,"path":["libc","unix","servent"],"kind":"struct"},"2:3191:27625":{"crate_id":2,"path":["core","ops","try_trait","NeverShortCircuitResidual"],"kind":"enum"},"17:8494:14043":{"crate_id":17,"path":["object","endian","LittleEndian"],"kind":"struct"},"2:2495:75":{"crate_id":2,"path":["core","convert","AsRef"],"kind":"trait"},"17:11259:15791":{"crate_id":17,"path":["object","elf","Versym"],"kind":"struct"},"17:10845:15200":{"crate_id":17,"path":["object","read","Relocation"],"kind":"struct"},"16:2657:14091":{"crate_id":16,"path":["gimli","common","RangeListsOffset"],"kind":"struct"},"1:7656:1967":{"crate_id":1,"path":["std","backtrace","RawFrame"],"kind":"enum"},"17:8212:15165":{"crate_id":17,"path":["object","common","ComdatKind"],"kind":"enum"},"17:12730:18472":{"crate_id":17,"path":["object","pe","ImageNtHeaders64"],"kind":"struct"},"6:1642:9727":{"crate_id":6,"path":["libc","unix","linux_like","in_pktinfo"],"kind":"struct"},"2:22267:170":{"crate_id":2,"path":["core","num","nonzero","NonZeroI8"],"kind":"struct"},"17:11997:18193":{"crate_id":17,"path":["object","macho","DylibReference"],"kind":"struct"},"1:7513:24866":{"crate_id":1,"path":["std","backtrace_rs","print","BacktraceFrameFmt"],"kind":"struct"},"1:8753:2330":{"crate_id":1,"path":["std","process","ExitStatus"],"kind":"struct"},"9:896:13794":{"crate_id":9,"path":["miniz_oxide","MZStatus"],"kind":"enum"},"1:6463:2360":{"crate_id":1,"path":["std","sync","poison","PoisonError"],"kind":"struct"},"1:1986:182":{"crate_id":1,"path":["std","ffi","os_str","OsString"],"kind":"struct"},"2:9007:111":{"crate_id":2,"path":["core","fmt","Debug"],"kind":"trait"},"6:4506:12110":{"crate_id":6,"path":["libc","unix","linux_like","linux","mntent"],"kind":"struct"},"6:5592:12757":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_pktinfo"],"kind":"struct"},"2:1825:2028":{"crate_id":2,"path":["core","ptr","non_null","NonNull"],"kind":"struct"},"17:11841:18183":{"crate_id":17,"path":["object","macho","ThreadCommand"],"kind":"struct"},"2:47343:7782":{"crate_id":2,"path":["core","char","decode","DecodeUtf16Error"],"kind":"struct"},"1:9371:2090":{"crate_id":1,"path":["std","sys","unix","fs","ReadDir"],"kind":"struct"},"1:8239:2191":{"crate_id":1,"path":["std","os","unix","net","listener","Incoming"],"kind":"struct"},"2:20418:28957":{"crate_id":2,"path":["core","core_simd","swizzle","rotate_lanes_left","Rotate"],"kind":"struct"},"16:4297:14632":{"crate_id":16,"path":["gimli","constants","DwLle"],"kind":"struct"},"12:1681:143":{"crate_id":12,"path":["hashbrown","set","HashSet"],"kind":"struct"},"17:9350:15221":{"crate_id":17,"path":["object","read","coff","section","CoffSection"],"kind":"struct"},"6:573:8818":{"crate_id":6,"path":["libc","unix","itimerval"],"kind":"struct"},"6:4499:2207":{"crate_id":6,"path":["libc","unix","linux_like","linux","ucred"],"kind":"struct"},"2:50077:27908":{"crate_id":2,"path":["core","hash","sip","Sip13Rounds"],"kind":"struct"},"6:1531:9717":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr"],"kind":"struct"},"16:5737:15011":{"crate_id":16,"path":["gimli","read","cfi","UnwindContext"],"kind":"struct"},"17:12148:18204":{"crate_id":17,"path":["object","macho","BuildVersionCommand"],"kind":"struct"},"2:52668:27165":{"crate_id":2,"path":["core","core_arch","simd","f64x1"],"kind":"struct"},"1:558:1942":{"crate_id":1,"path":["std","thread","JoinHandle"],"kind":"struct"},"2:8245:7640":{"crate_id":2,"path":["core","panicking","assert_matches_failed","Pattern"],"kind":"struct"},"2:2932:1876":{"crate_id":2,"path":["core","ops","drop","Drop"],"kind":"trait"},"1:10806:2061":{"crate_id":1,"path":["std","sys","unix","os","JoinPathsError"],"kind":"struct"},"2:11526:7640":{"crate_id":2,"path":["core","str","pattern","Pattern"],"kind":"trait"},"17:11721:18174":{"crate_id":17,"path":["object","macho","FvmlibCommand"],"kind":"struct"},"5:6003:2504":{"crate_id":5,"path":["alloc","task","Wake"],"kind":"trait"},"17:12046:18197":{"crate_id":17,"path":["object","macho","UuidCommand"],"kind":"struct"},"1:10686:118":{"crate_id":1,"path":["std","sys","unix","fs","DirBuilder"],"kind":"struct"},"2:20452:29012":{"crate_id":2,"path":["core","core_simd","swizzle","interleave","Hi"],"kind":"struct"},"17:10721:15196":{"crate_id":17,"path":["object","read","ObjectMapEntry"],"kind":"struct"},"8:0:1736":{"crate_id":8,"path":["cfg_if"],"kind":"module"},"1:11850:1446":{"crate_id":1,"path":["std","tuple"],"kind":"primitive"},"16:7309:15067":{"crate_id":16,"path":["gimli","read","pubtypes","DebugPubTypes"],"kind":"struct"},"2:46957:199":{"crate_id":2,"path":["core","ops","range","RangeTo"],"kind":"struct"},"17:13580:19143":{"crate_id":17,"path":["object","pe","ImportObjectHeader"],"kind":"struct"},"17:13184:19042":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation64"],"kind":"struct"},"1:11391:2194":{"crate_id":1,"path":["std","sys_common","net","UdpSocket"],"kind":"struct"},"1:10819:2329":{"crate_id":1,"path":["std","sys","unix","process","process_common","Stdio"],"kind":"enum"},"17:9791:15296":{"crate_id":17,"path":["object","read","elf","version","VernauxIterator"],"kind":"struct"},"2:20602:2430":{"crate_id":2,"path":["core","core_simd","elements","float","SimdFloat"],"kind":"trait"},"2:51315:7680":{"crate_id":2,"path":["core","str","pattern","EmptyNeedle"],"kind":"struct"},"17:11939:18190":{"crate_id":17,"path":["object","macho","DylibTableOfContents"],"kind":"struct"},"1:10696:2114":{"crate_id":1,"path":["std","sys","unix","io","IoSlice"],"kind":"struct"},"6:7176:13721":{"crate_id":6,"path":["libc","unix","linux_like","linux","arch","generic","termios2"],"kind":"struct"},"2:4218:204":{"crate_id":2,"path":["core","cell","RefCell"],"kind":"struct"},"1:11846:1029":{"crate_id":1,"path":["std","pointer"],"kind":"primitive"},"17:10445:15200":{"crate_id":17,"path":["object","read","pe","relocation","Relocation"],"kind":"struct"},"18:652:33466":{"crate_id":18,"path":["memchr","memmem","x86","sse","Forward"],"kind":"struct"},"2:53575:2466":{"crate_id":2,"path":["core","core_arch","simd","i16x16"],"kind":"struct"},"18:690:19207":{"crate_id":18,"path":["memchr","memmem","FinderRev"],"kind":"struct"},"16:6298:15036":{"crate_id":16,"path":["gimli","read","index","UnitIndex"],"kind":"struct"},"2:2749:7562":{"crate_id":2,"path":["core","marker","Tuple"],"kind":"trait"},"6:6332:13179":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stack_t"],"kind":"struct"},"17:11054:15579":{"crate_id":17,"path":["object","elf","CompressionHeader32"],"kind":"struct"},"17:9778:15268":{"crate_id":17,"path":["object","read","elf","version","VerneedIterator"],"kind":"struct"},"1:7613:1939":{"crate_id":1,"path":["std","thread","Thread"],"kind":"struct"},"6:4654:12128":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlmsghdr"],"kind":"struct"},"6:4389:12102":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Ehdr"],"kind":"struct"},"2:52813:2492":{"crate_id":2,"path":["core","core_arch","simd","u64x2"],"kind":"struct"},"17:12033:18196":{"crate_id":17,"path":["object","macho","PrebindCksumCommand"],"kind":"struct"},"17:10394:15393":{"crate_id":17,"path":["object","read","pe","import","ImportThunkList"],"kind":"struct"},"6:5533:12754":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","msghdr"],"kind":"struct"},"17:12361:18348":{"crate_id":17,"path":["object","macho","ScatteredRelocationInfo"],"kind":"struct"},"17:8441:15173":{"crate_id":17,"path":["object","common","SymbolFlags"],"kind":"enum"},"5:3119:2008":{"crate_id":5,"path":["alloc","collections","btree","set","SymmetricDifference"],"kind":"struct"},"18:96:19190":{"crate_id":18,"path":["memchr","memchr","iter","Memchr2"],"kind":"struct"},"2:49211:83":{"crate_id":2,"path":["core","sync","atomic","AtomicI64"],"kind":"struct"},"2:51461:8176":{"crate_id":2,"path":["core","str","IsWhitespace"],"kind":"struct"},"17:10875:15202":{"crate_id":17,"path":["object","read","CompressedFileRange"],"kind":"struct"},"2:3161:231":{"crate_id":2,"path":["core","ops","try_trait","Try"],"kind":"trait"},"2:54644:7532":{"crate_id":2,"path":["core","core_arch","x86","__m128"],"kind":"struct"},"6:5709:12766":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","seminfo"],"kind":"struct"},"6:7265:12275":{"crate_id":6,"path":["libc","unix","linux_like","linux","can_frame"],"kind":"struct"},"5:1387:1987":{"crate_id":5,"path":["alloc","collections","btree","map","IntoIter"],"kind":"struct"},"16:7980:15095":{"crate_id":16,"path":["gimli","read","value","ValueType"],"kind":"enum"},"6:1538:9718":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_in"],"kind":"struct"},"5:3153:2009":{"crate_id":5,"path":["alloc","collections","btree","set","Union"],"kind":"struct"},"12:2205:1983":{"crate_id":12,"path":["hashbrown","TryReserveError"],"kind":"enum"},"6:1649:9728":{"crate_id":6,"path":["libc","unix","linux_like","ifaddrs"],"kind":"struct"},"17:12087:18200":{"crate_id":17,"path":["object","macho","FilesetEntryCommand"],"kind":"struct"},"1:8392:2308":{"crate_id":1,"path":["std","path","State"],"kind":"enum"},"17:10455:15386":{"crate_id":17,"path":["object","read","pe","resource","ResourceDirectory"],"kind":"struct"},"6:6362:9681":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stat64"],"kind":"struct"},"2:57624:243":{"crate_id":2,"path":["core","core_simd","fmt","fmt","Wrapper"],"kind":"struct"},"17:12630:18464":{"crate_id":17,"path":["object","pe","ImageDataDirectory"],"kind":"struct"},"17:12514:18409":{"crate_id":17,"path":["object","pe","ImageOs2Header"],"kind":"struct"},"1:10193:2327":{"crate_id":1,"path":["std","sys","unix","process","process_common","Command"],"kind":"struct"},"16:5815:15015":{"crate_id":16,"path":["gimli","read","cfi","CfaRule"],"kind":"enum"},"2:50776:7664":{"crate_id":2,"path":["core","str","iter","SplitTerminator"],"kind":"struct"},"2:48649:27212":{"crate_id":2,"path":["core","net","parser","AddrKind"],"kind":"enum"},"2:2154:579":{"crate_id":2,"path":["core","ptr","drop_in_place"],"kind":"function"},"2:51132:7668":{"crate_id":2,"path":["core","str","pattern","CharSearcher"],"kind":"struct"},"15:0:1742":{"crate_id":15,"path":["addr2line"],"kind":"module"},"2:50980:2145":{"crate_id":2,"path":["core","str","iter","Lines"],"kind":"struct"},"5:6933:1990":{"crate_id":5,"path":["alloc","collections","binary_heap","Drain"],"kind":"struct"},"17:13557:19136":{"crate_id":17,"path":["object","pe","NonPagedDebugInfo"],"kind":"struct"},"6:4304:12092":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_constant_effect"],"kind":"struct"},"2:46897:197":{"crate_id":2,"path":["core","ops","range","RangeFull"],"kind":"struct"},"16:7511:15079":{"crate_id":16,"path":["gimli","read","UnitOffset"],"kind":"struct"},"1:6917:22834":{"crate_id":1,"path":["std","sys_common","lazy_box","LazyBox"],"kind":"struct"},"2:29980:7997":{"crate_id":2,"path":["core","mem","transmutability","Assume"],"kind":"struct"},"17:11087:15587":{"crate_id":17,"path":["object","elf","Sym32"],"kind":"struct"},"17:8814:128":{"crate_id":17,"path":["object","read","any","File"],"kind":"struct"},"2:9018:7582":{"crate_id":2,"path":["core","fmt","LowerHex"],"kind":"trait"},"1:4079:2241":{"crate_id":1,"path":["std","os","unix","net","ancillary","ScmRights"],"kind":"struct"},"1:10612:2279":{"crate_id":1,"path":["std","sys","unix","fd","FileDesc"],"kind":"struct"},"6:4327:12095":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_periodic_effect"],"kind":"struct"},"2:54675:7535":{"crate_id":2,"path":["core","core_arch","x86","__m256"],"kind":"struct"},"6:4669:12130":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlattr"],"kind":"struct"},"5:2162:31361":{"crate_id":5,"path":["alloc","collections","btree","navigate","LazyLeafRange"],"kind":"struct"},"16:4545:14712":{"crate_id":16,"path":["gimli","constants","DwAddr"],"kind":"struct"},"16:7288:15065":{"crate_id":16,"path":["gimli","read","pubnames","PubNamesEntryIter"],"kind":"struct"}},"external_crates":{"17":{"name":"object","html_root_url":"https://doc.rust-lang.org/nightly/"},"14":{"name":"rustc_demangle","html_root_url":"https://doc.rust-lang.org/nightly/"},"11":{"name":"adler","html_root_url":"https://docs.rs/adler/1.0.2/"},"8":{"name":"cfg_if","html_root_url":"https://docs.rs/cfg-if/"},"5":{"name":"alloc","html_root_url":"https://doc.rust-lang.org/nightly/"},"2":{"name":"core","html_root_url":"https://doc.rust-lang.org/nightly/"},"19":{"name":"panic_unwind","html_root_url":"https://doc.rust-lang.org/nightly/"},"16":{"name":"gimli","html_root_url":"https://doc.rust-lang.org/nightly/"},"13":{"name":"std_detect","html_root_url":"https://doc.rust-lang.org/nightly/"},"10":{"name":"rustc_std_workspace_alloc","html_root_url":"https://doc.rust-lang.org/nightly/"},"7":{"name":"unwind","html_root_url":"https://doc.rust-lang.org/nightly/"},"4":{"name":"rustc_std_workspace_core","html_root_url":"https://doc.rust-lang.org/nightly/"},"1":{"name":"std","html_root_url":"https://doc.rust-lang.org/nightly/"},"18":{"name":"memchr","html_root_url":"https://doc.rust-lang.org/nightly/"},"15":{"name":"addr2line","html_root_url":"https://doc.rust-lang.org/nightly/"},"12":{"name":"hashbrown","html_root_url":"https://doc.rust-lang.org/nightly/"},"9":{"name":"miniz_oxide","html_root_url":"https://doc.rust-lang.org/nightly/"},"6":{"name":"libc","html_root_url":"https://doc.rust-lang.org/nightly/"},"3":{"name":"compiler_builtins","html_root_url":"https://doc.rust-lang.org/nightly/"}},"format_version":24}