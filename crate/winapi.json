{"root":"0:0:1651","crate_version":"0.3.9","includes_private":false,"index":{"2:11919:19394":{"id":"2:11919:19394","crate_id":2,"name":"rfind","span":null,"visibility":"public","docs":"Returns the byte index for the first character of the last match of the pattern in\nthis string slice.\n\nReturns [`None`] if the pattern doesn't match.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nlet s = \"Löwe 老虎 Léopard Gepardi\";\n\nassert_eq!(s.rfind('L'), Some(13));\nassert_eq!(s.rfind('é'), Some(14));\nassert_eq!(s.rfind(\"pard\"), Some(24));\n```\n\nMore complex patterns with closures:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\n\nassert_eq!(s.rfind(char::is_whitespace), Some(12));\nassert_eq!(s.rfind(char::is_lowercase), Some(20));\n```\n\nNot finding the pattern:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\nlet x: &[_] = &['1', '2'];\n\nassert_eq!(s.rfind(x), None);\n```","links":{"`None`":"2:40684:176","prim@char":"1:11872:411","self::pattern":"2:11575:7653"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:40682:178","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11580:7649","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"2:11580:7649","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11595:7650","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"5:5389:30806":{"id":"5:5389:30806","crate_id":5,"name":"into_string","span":null,"visibility":"public","docs":"Converts a [`Box<str>`] into a [`String`] without copying or allocating.\n\n# Examples\n\nBasic usage:\n\n```\nlet string = String::from(\"birthday gift\");\nlet boxed_str = string.clone().into_boxed_str();\n\nassert_eq!(boxed_str.into_string(), string);\n```","links":{"`Box<str>`":"5:279:1899","`String`":"5:7239:221"},"attrs":["#[must_use = \"`self` will be dropped if the result is not used\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"resolved_path","inner":{"name":"Box","id":"5:279:1899","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}},{"type":{"kind":"resolved_path","inner":{"name":"Global","id":"5:6988:2048","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:7239:221","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11944:30136":{"id":"2:11944:30136","crate_id":2,"name":"split_once","span":null,"visibility":"public","docs":"Splits the string on the first occurrence of the specified delimiter and\nreturns prefix before delimiter and suffix after delimiter.\n\n# Examples\n\n```\nassert_eq!(\"cfg\".split_once('='), None);\nassert_eq!(\"cfg=\".split_once('='), Some((\"cfg\", \"\")));\nassert_eq!(\"cfg=foo\".split_once('='), Some((\"cfg\", \"foo\")));\nassert_eq!(\"cfg=foo=bar\".split_once('='), Some((\"cfg\", \"foo=bar\")));\n```","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["delimiter",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:40682:178","args":{"angle_bracketed":{"args":[{"type":{"kind":"tuple","inner":[{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}},{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11580:7649","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11884:311":{"id":"2:11884:311","crate_id":2,"name":"as_ptr","span":null,"visibility":"public","docs":"Converts a string slice to a raw pointer.\n\nAs string slices are a slice of bytes, the raw pointer points to a\n[`u8`]. This pointer will be pointing to the first byte of the string\nslice.\n\nThe caller must ensure that the returned pointer is never written to.\nIf you need to mutate the contents of the string slice, use [`as_mut_ptr`].\n\n[`as_mut_ptr`]: str::as_mut_ptr\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"Hello\";\nlet ptr = s.as_ptr();\n```","links":{"str::as_mut_ptr":"2:11885:20645","`u8`":"1:11889:1478"},"attrs":["#[must_use]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"raw_pointer","inner":{"mutable":false,"type":{"kind":"primitive","inner":"u8"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:0:1651":{"id":"0:0:1651","crate_id":0,"name":"winapi","span":{"filename":"src/lib.rs","begin":[6,0],"end":[71,1]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"module","inner":{"is_crate":true,"items":[],"is_stripped":false}},"2:11901:27241":{"id":"2:11901:27241","crate_id":2,"name":"split_whitespace","span":null,"visibility":"public","docs":"Splits a string slice by whitespace.\n\nThe iterator returned will return string slices that are sub-slices of\nthe original string slice, separated by any amount of whitespace.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`. If you only want to split on ASCII whitespace\ninstead, use [`split_ascii_whitespace`].\n\n[`split_ascii_whitespace`]: str::split_ascii_whitespace\n\n# Examples\n\nBasic usage:\n\n```\nlet mut iter = \"A few words\".split_whitespace();\n\nassert_eq!(Some(\"A\"), iter.next());\nassert_eq!(Some(\"few\"), iter.next());\nassert_eq!(Some(\"words\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nAll kinds of whitespace are considered:\n\n```\nlet mut iter = \" Mary   had\\ta\\u{2009}little  \\n\\t lamb\".split_whitespace();\nassert_eq!(Some(\"Mary\"), iter.next());\nassert_eq!(Some(\"had\"), iter.next());\nassert_eq!(Some(\"a\"), iter.next());\nassert_eq!(Some(\"little\"), iter.next());\nassert_eq!(Some(\"lamb\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nIf the string is empty or all whitespace, the iterator yields no string slices:\n```\nassert_eq!(\"\".split_whitespace().next(), None);\nassert_eq!(\"   \".split_whitespace().next(), None);\n```","links":{"str::split_ascii_whitespace":"2:11902:27255"},"attrs":["#[must_use =\n\"this returns the split string as an iterator, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_split_whitespace\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"SplitWhitespace","id":"2:42921:7656","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11886:20641":{"id":"2:11886:20641","crate_id":2,"name":"get","span":null,"visibility":"public","docs":"Returns a subslice of `str`.\n\nThis is the non-panicking alternative to indexing the `str`. Returns\n[`None`] whenever equivalent indexing operation would panic.\n\n# Examples\n\n```\nlet v = String::from(\"🗻∈🌏\");\n\nassert_eq!(Some(\"🗻\"), v.get(0..4));\n\n// indices not on UTF-8 sequence boundaries\nassert!(v.get(1..).is_none());\nassert!(v.get(..8).is_none());\n\n// out of bounds\nassert!(v.get(..42).is_none());\n```","links":{"`None`":"2:40684:176"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["i",{"kind":"generic","inner":"I"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:40682:178","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"qualified_path","inner":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"I"},"trait":{"name":"SliceIndex","id":"2:9756:219","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}}}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"2:9756:219","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11915:19393":{"id":"2:11915:19393","crate_id":2,"name":"find","span":null,"visibility":"public","docs":"Returns the byte index of the first character of this string slice that\nmatches the pattern.\n\nReturns [`None`] if the pattern doesn't match.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nlet s = \"Löwe 老虎 Léopard Gepardi\";\n\nassert_eq!(s.find('L'), Some(0));\nassert_eq!(s.find('é'), Some(14));\nassert_eq!(s.find(\"pard\"), Some(17));\n```\n\nMore complex patterns using point-free style and closures:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\n\nassert_eq!(s.find(char::is_whitespace), Some(5));\nassert_eq!(s.find(char::is_lowercase), Some(1));\nassert_eq!(s.find(|c: char| c.is_whitespace() || c.is_lowercase()), Some(1));\nassert_eq!(s.find(|c: char| (c < 'o') && (c > 'a')), Some(4));\n```\n\nNot finding the pattern:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\nlet x: &[_] = &['1', '2'];\n\nassert_eq!(s.find(x), None);\n```","links":{"`None`":"2:40684:176","prim@char":"1:11872:411","self::pattern":"2:11575:7653"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:40682:178","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11580:7649","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11953:30138":{"id":"2:11953:30138","crate_id":2,"name":"rmatches","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within this string slice,\nyielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`matches`] method can be used.\n\n[`matches`]: str::matches\n\n# Examples\n\nBasic usage:\n\n```\nlet v: Vec<&str> = \"abcXXXabcYYYabc\".rmatches(\"abc\").collect();\nassert_eq!(v, [\"abc\", \"abc\", \"abc\"]);\n\nlet v: Vec<&str> = \"1abc2abc3\".rmatches(char::is_numeric).collect();\nassert_eq!(v, [\"3\", \"2\", \"1\"]);\n```","links":{"self::pattern":"2:11575:7653","`DoubleEndedIterator`":"2:7169:119","prim@char":"1:11872:411","str::matches":"2:11950:1868"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"RMatches","id":"2:42869:7671","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11580:7649","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"2:11580:7649","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11595:7650","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11976:19965":{"id":"2:11976:19965","crate_id":2,"name":"strip_prefix","span":null,"visibility":"public","docs":"Returns a string slice with the prefix removed.\n\nIf the string starts with the pattern `prefix`, returns substring after the prefix, wrapped\nin `Some`.  Unlike `trim_start_matches`, this method removes the prefix exactly once.\n\nIf the string does not start with `prefix`, returns `None`.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nassert_eq!(\"foo:bar\".strip_prefix(\"foo:\"), Some(\"bar\"));\nassert_eq!(\"foo:bar\".strip_prefix(\"bar\"), None);\nassert_eq!(\"foofoo\".strip_prefix(\"foo\"), Some(\"foo\"));\n```","links":{"prim@char":"1:11872:411","self::pattern":"2:11575:7653"},"attrs":["#[must_use =\n\"this returns the remaining substring as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["prefix",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:40682:178","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11580:7649","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11997:30152":{"id":"2:11997:30152","crate_id":2,"name":"escape_debug","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_debug`].\n\nNote: only extended grapheme codepoints that begin the string will be\nescaped.\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"❤\\n!\".escape_debug() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"❤\\n!\".escape_debug());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"❤\\\\n!\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"❤\\n!\".escape_debug().to_string(), \"❤\\\\n!\");\n```","links":{"`char::escape_debug`":"2:4521:30152"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"EscapeDebug","id":"2:42946:7664","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11877:30128":{"id":"2:11877:30128","crate_id":2,"name":"floor_char_boundary","span":null,"visibility":"public","docs":"Finds the closest `x` not exceeding `index` where `is_char_boundary(x)` is `true`.\n\nThis method can help you truncate a string so that it's still valid UTF-8, but doesn't\nexceed a given number of bytes. Note that this is done purely at the character level\nand can still visually split graphemes, even though the underlying characters aren't\nsplit. For example, the emoji 🧑‍🔬 (scientist) could be split so that the string only\nincludes 🧑 (person) instead.\n\n# Examples\n\n```\n#![feature(round_char_boundary)]\nlet s = \"❤️🧡💛💚💙💜\";\nassert_eq!(s.len(), 26);\nassert!(!s.is_char_boundary(13));\n\nlet closest = s.floor_char_boundary(13);\nassert_eq!(closest, 10);\nassert_eq!(&s[..closest], \"❤️🧡\");\n```","links":{},"attrs":["#[unstable(feature = \"round_char_boundary\", issue = \"93743\")]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["index",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"primitive","inner":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11966:30143":{"id":"2:11966:30143","crate_id":2,"name":"trim_end","span":null,"visibility":"public","docs":"Returns a string slice with trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Text directionality\n\nA string is a sequence of bytes. `end` in this context means the last\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be right side, and for right-to-left languages like\nArabic or Hebrew, this will be the left side.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\nassert_eq!(\"\\n Hello\\tworld\", s.trim_end());\n```\n\nDirectionality:\n\n```\nlet s = \"  English  \";\nassert!(Some('h') == s.trim_end().chars().rev().next());\n\nlet s = \"  עברית  \";\nassert!(Some('ת') == s.trim_end().chars().rev().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_trim_end\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11882:26712":{"id":"2:11882:26712","crate_id":2,"name":"as_bytes","span":null,"visibility":"public","docs":"Converts a string slice to a byte slice. To convert the byte slice back\ninto a string slice, use the [`from_utf8`] function.\n\n# Examples\n\nBasic usage:\n\n```\nlet bytes = \"bors\".as_bytes();\nassert_eq!(b\"bors\", bytes);\n```","links":{"`from_utf8`":"2:11143:7657"},"attrs":["#[must_use]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"slice","inner":{"kind":"primitive","inner":"u8"}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11896:20669":{"id":"2:11896:20669","crate_id":2,"name":"split_at","span":null,"visibility":"public","docs":"Divide one string slice into two at an index.\n\nThe argument, `mid`, should be a byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get mutable string slices instead, see the [`split_at_mut`]\nmethod.\n\n[`split_at_mut`]: str::split_at_mut\n\n# Panics\n\nPanics if `mid` is not on a UTF-8 code point boundary, or if it is\npast the end of the last code point of the string slice.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"Per Martin-Löf\";\n\nlet (first, last) = s.split_at(3);\n\nassert_eq!(\"Per\", first);\nassert_eq!(\" Martin-Löf\", last);\n```","links":{"str::split_at_mut":"2:11897:20670"},"attrs":["#[must_use]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["mid",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"tuple","inner":[{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11938:20683":{"id":"2:11938:20683","crate_id":2,"name":"splitn","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by a\npattern, restricted to returning at most `n` items.\n\nIf `n` substrings are returned, the last substring (the `n`th substring)\nwill contain the remainder of the string.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will not be double ended, because it is\nnot efficient to support.\n\nIf the pattern allows a reverse search, the [`rsplitn`] method can be\nused.\n\n[`rsplitn`]: str::rsplitn\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lambda\".splitn(3, ' ').collect();\nassert_eq!(v, [\"Mary\", \"had\", \"a little lambda\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".splitn(3, \"X\").collect();\nassert_eq!(v, [\"lion\", \"\", \"tigerXleopard\"]);\n\nlet v: Vec<&str> = \"abcXdef\".splitn(1, 'X').collect();\nassert_eq!(v, [\"abcXdef\"]);\n\nlet v: Vec<&str> = \"\".splitn(1, 'X').collect();\nassert_eq!(v, [\"\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".splitn(2, |c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"abc\", \"defXghi\"]);\n```","links":{"prim@char":"1:11872:411","self::pattern":"2:11575:7653","str::rsplitn":"2:11941:20685"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["n",{"kind":"primitive","inner":"usize"}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"SplitN","id":"2:42751:7642","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11580:7649","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11993:20560":{"id":"2:11993:20560","crate_id":2,"name":"is_ascii","span":null,"visibility":"public","docs":"Checks if all characters in this string are within the ASCII range.\n\n# Examples\n\n```\nlet ascii = \"hello!\\n\";\nlet non_ascii = \"Grüße, Jürgen ❤\";\n\nassert!(ascii.is_ascii());\nassert!(!non_ascii.is_ascii());\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11929:20681":{"id":"2:11929:20681","crate_id":2,"name":"rsplit","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by\ncharacters matched by a pattern and yielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`split`] method can be used.\n\n[`split`]: str::split\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".rsplit(' ').collect();\nassert_eq!(v, [\"lamb\", \"little\", \"a\", \"had\", \"Mary\"]);\n\nlet v: Vec<&str> = \"\".rsplit('X').collect();\nassert_eq!(v, [\"\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".rsplit('X').collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"\", \"lion\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".rsplit(\"::\").collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"lion\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".rsplit(|c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"ghi\", \"def\", \"abc\"]);\n```","links":{"self::pattern":"2:11575:7653","`DoubleEndedIterator`":"2:7169:119","prim@char":"1:11872:411","str::split":"2:11923:20677"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"RSplit","id":"2:42665:7638","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11580:7649","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"2:11580:7649","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11595:7650","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11879:30129":{"id":"2:11879:30129","crate_id":2,"name":"ceil_char_boundary","span":null,"visibility":"public","docs":"Finds the closest `x` not below `index` where `is_char_boundary(x)` is `true`.\n\nThis method is the natural complement to [`floor_char_boundary`]. See that method\nfor more details.\n\n[`floor_char_boundary`]: str::floor_char_boundary\n\n# Panics\n\nPanics if `index > self.len()`.\n\n# Examples\n\n```\n#![feature(round_char_boundary)]\nlet s = \"❤️🧡💛💚💙💜\";\nassert_eq!(s.len(), 26);\nassert!(!s.is_char_boundary(13));\n\nlet closest = s.ceil_char_boundary(13);\nassert_eq!(closest, 14);\nassert_eq!(&s[..closest], \"❤️🧡💛\");\n```","links":{"str::floor_char_boundary":"2:11877:30128"},"attrs":["#[unstable(feature = \"round_char_boundary\", issue = \"93743\")]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["index",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"primitive","inner":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11898:27229":{"id":"2:11898:27229","crate_id":2,"name":"chars","span":null,"visibility":"public","docs":"Returns an iterator over the [`char`]s of a string slice.\n\nAs a string slice consists of valid UTF-8, we can iterate through a\nstring slice by [`char`]. This method returns such an iterator.\n\nIt's important to remember that [`char`] represents a Unicode Scalar\nValue, and might not match your idea of what a 'character' is. Iteration\nover grapheme clusters may be what you actually want. This functionality\nis not provided by Rust's standard library, check crates.io instead.\n\n# Examples\n\nBasic usage:\n\n```\nlet word = \"goodbye\";\n\nlet count = word.chars().count();\nassert_eq!(7, count);\n\nlet mut chars = word.chars();\n\nassert_eq!(Some('g'), chars.next());\nassert_eq!(Some('o'), chars.next());\nassert_eq!(Some('o'), chars.next());\nassert_eq!(Some('d'), chars.next());\nassert_eq!(Some('b'), chars.next());\nassert_eq!(Some('y'), chars.next());\nassert_eq!(Some('e'), chars.next());\n\nassert_eq!(None, chars.next());\n```\n\nRemember, [`char`]s might not match your intuition about characters:\n\n[`char`]: prim@char\n\n```\nlet y = \"y̆\";\n\nlet mut chars = y.chars();\n\nassert_eq!(Some('y'), chars.next()); // not 'y̆'\nassert_eq!(Some('\\u{0306}'), chars.next());\n\nassert_eq!(None, chars.next());\n```","links":{"prim@char":"1:11872:411"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Chars","id":"2:42617:7660","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11899:27367":{"id":"2:11899:27367","crate_id":2,"name":"char_indices","span":null,"visibility":"public","docs":"Returns an iterator over the [`char`]s of a string slice, and their\npositions.\n\nAs a string slice consists of valid UTF-8, we can iterate through a\nstring slice by [`char`]. This method returns an iterator of both\nthese [`char`]s, as well as their byte positions.\n\nThe iterator yields tuples. The position is first, the [`char`] is\nsecond.\n\n# Examples\n\nBasic usage:\n\n```\nlet word = \"goodbye\";\n\nlet count = word.char_indices().count();\nassert_eq!(7, count);\n\nlet mut char_indices = word.char_indices();\n\nassert_eq!(Some((0, 'g')), char_indices.next());\nassert_eq!(Some((1, 'o')), char_indices.next());\nassert_eq!(Some((2, 'o')), char_indices.next());\nassert_eq!(Some((3, 'd')), char_indices.next());\nassert_eq!(Some((4, 'b')), char_indices.next());\nassert_eq!(Some((5, 'y')), char_indices.next());\nassert_eq!(Some((6, 'e')), char_indices.next());\n\nassert_eq!(None, char_indices.next());\n```\n\nRemember, [`char`]s might not match your intuition about characters:\n\n[`char`]: prim@char\n\n```\nlet yes = \"y̆es\";\n\nlet mut char_indices = yes.char_indices();\n\nassert_eq!(Some((0, 'y')), char_indices.next()); // not (0, 'y̆')\nassert_eq!(Some((1, '\\u{0306}')), char_indices.next());\n\n// note the 3 here - the last character took up two bytes\nassert_eq!(Some((3, 'e')), char_indices.next());\nassert_eq!(Some((4, 's')), char_indices.next());\n\nassert_eq!(None, char_indices.next());\n```","links":{"prim@char":"1:11872:411"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"CharIndices","id":"2:42623:7659","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11883:30130":{"id":"2:11883:30130","crate_id":2,"name":"as_bytes_mut","span":null,"visibility":"public","docs":"Converts a mutable string slice to a mutable byte slice.\n\n# Safety\n\nThe caller must ensure that the content of the slice is valid UTF-8\nbefore the borrow ends and the underlying `str` is used.\n\nUse of a `str` whose contents are not valid UTF-8 is undefined behavior.\n\n# Examples\n\nBasic usage:\n\n```\nlet mut s = String::from(\"Hello\");\nlet bytes = unsafe { s.as_bytes_mut() };\n\nassert_eq!(b\"Hello\", bytes);\n```\n\nMutability:\n\n```\nlet mut s = String::from(\"🗻∈🌏\");\n\nunsafe {\n    let bytes = s.as_bytes_mut();\n\n    bytes[0] = 0xF0;\n    bytes[1] = 0x9F;\n    bytes[2] = 0x8D;\n    bytes[3] = 0x94;\n}\n\nassert_eq!(\"🍔∈🌏\", s);\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"slice","inner":{"kind":"primitive","inner":"u8"}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}},"2:11991:30151":{"id":"2:11991:30151","crate_id":2,"name":"parse","span":null,"visibility":"public","docs":"Parses this string slice into another type.\n\nBecause `parse` is so general, it can cause problems with type\ninference. As such, `parse` is one of the few times you'll see\nthe syntax affectionately known as the 'turbofish': `::<>`. This\nhelps the inference algorithm understand specifically which type\nyou're trying to parse into.\n\n`parse` can parse into any type that implements the [`FromStr`] trait.\n\n# Errors\n\nWill return [`Err`] if it's not possible to parse this string slice into\nthe desired type.\n\n[`Err`]: FromStr::Err\n\n# Examples\n\nBasic usage\n\n```\nlet four: u32 = \"4\".parse().unwrap();\n\nassert_eq!(4, four);\n```\n\nUsing the 'turbofish' instead of annotating `four`:\n\n```\nlet four = \"4\".parse::<u32>();\n\nassert_eq!(Ok(4), four);\n```\n\nFailing to parse:\n\n```\nlet nope = \"j\".parse::<u32>();\n\nassert!(nope.is_err());\n```","links":{"FromStr::Err":"2:11537:125","`FromStr`":"2:11536:2333"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Result","id":"2:40826:207","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"F"}},{"type":{"kind":"qualified_path","inner":{"name":"Err","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"F"},"trait":{"name":"FromStr","id":"2:11536:2333","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"F"},"bounds":[{"trait_bound":{"trait":{"name":"FromStr","id":"2:11536:2333","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11995:20562":{"id":"2:11995:20562","crate_id":2,"name":"make_ascii_uppercase","span":null,"visibility":"public","docs":"Converts this string to its ASCII upper case equivalent in-place.\n\nASCII letters 'a' to 'z' are mapped to 'A' to 'Z',\nbut non-ASCII letters are unchanged.\n\nTo return a new uppercased value without modifying the existing one, use\n[`to_ascii_uppercase()`].\n\n[`to_ascii_uppercase()`]: #method.to_ascii_uppercase\n\n# Examples\n\n```\nlet mut s = String::from(\"Grüße, Jürgen ❤\");\n\ns.make_ascii_uppercase();\n\nassert_eq!(\"GRüßE, JüRGEN ❤\", s);\n```","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11979:20688":{"id":"2:11979:20688","crate_id":2,"name":"strip_suffix","span":null,"visibility":"public","docs":"Returns a string slice with the suffix removed.\n\nIf the string ends with the pattern `suffix`, returns the substring before the suffix,\nwrapped in `Some`.  Unlike `trim_end_matches`, this method removes the suffix exactly once.\n\nIf the string does not end with `suffix`, returns `None`.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nassert_eq!(\"bar:foo\".strip_suffix(\":foo\"), Some(\"bar\"));\nassert_eq!(\"bar:foo\".strip_suffix(\"bar\"), None);\nassert_eq!(\"foofoo\".strip_suffix(\"foo\"), Some(\"foo\"));\n```","links":{"prim@char":"1:11872:411","self::pattern":"2:11575:7653"},"attrs":["#[must_use =\n\"this returns the remaining substring as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["suffix",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:40682:178","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11580:7649","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"2:11580:7649","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11595:7650","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"5:5392:21878":{"id":"5:5392:21878","crate_id":5,"name":"to_ascii_lowercase","span":null,"visibility":"public","docs":"Returns a copy of this string where each character is mapped to its\nASCII lower case equivalent.\n\nASCII letters 'A' to 'Z' are mapped to 'a' to 'z',\nbut non-ASCII letters are unchanged.\n\nTo lowercase the value in-place, use [`make_ascii_lowercase`].\n\nTo lowercase ASCII characters in addition to non-ASCII characters, use\n[`to_lowercase`].\n\n# Examples\n\n```\nlet s = \"Grüße, Jürgen ❤\";\n\nassert_eq!(\"grüße, jürgen ❤\", s.to_ascii_lowercase());\n```\n\n[`make_ascii_lowercase`]: str::make_ascii_lowercase\n[`to_lowercase`]: #method.to_lowercase","links":{"str::make_ascii_lowercase":"2:11996:20563"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use = \"to lowercase the value in-place, use `make_ascii_lowercase()`\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:7239:221","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11996:20563":{"id":"2:11996:20563","crate_id":2,"name":"make_ascii_lowercase","span":null,"visibility":"public","docs":"Converts this string to its ASCII lower case equivalent in-place.\n\nASCII letters 'A' to 'Z' are mapped to 'a' to 'z',\nbut non-ASCII letters are unchanged.\n\nTo return a new lowercased value without modifying the existing one, use\n[`to_ascii_lowercase()`].\n\n[`to_ascii_lowercase()`]: #method.to_ascii_lowercase\n\n# Examples\n\n```\nlet mut s = String::from(\"GRÜßE, JÜRGEN ❤\");\n\ns.make_ascii_lowercase();\n\nassert_eq!(\"grÜße, jÜrgen ❤\", s);\n```","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11947:30137":{"id":"2:11947:30137","crate_id":2,"name":"rsplit_once","span":null,"visibility":"public","docs":"Splits the string on the last occurrence of the specified delimiter and\nreturns prefix before delimiter and suffix after delimiter.\n\n# Examples\n\n```\nassert_eq!(\"cfg\".rsplit_once('='), None);\nassert_eq!(\"cfg=foo\".rsplit_once('='), Some((\"cfg\", \"foo\")));\nassert_eq!(\"cfg=foo=bar\".rsplit_once('='), Some((\"cfg=foo\", \"bar\")));\n```","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["delimiter",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:40682:178","args":{"angle_bracketed":{"args":[{"type":{"kind":"tuple","inner":[{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}},{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11580:7649","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"2:11580:7649","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11595:7650","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11969:30145":{"id":"2:11969:30145","crate_id":2,"name":"trim_right","span":null,"visibility":"public","docs":"Returns a string slice with trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`.\n\n# Text directionality\n\nA string is a sequence of bytes. 'Right' in this context means the last\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _left_ side, not the right.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \" Hello\\tworld\\t\";\n\nassert_eq!(\" Hello\\tworld\", s.trim_right());\n```\n\nDirectionality:\n\n```\nlet s = \"English  \";\nassert!(Some('h') == s.trim_right().chars().rev().next());\n\nlet s = \"עברית  \";\nassert!(Some('ת') == s.trim_right().chars().rev().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_end`\", suggestion =\n\"trim_end\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_end`"},"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11999:1977":{"id":"2:11999:1977","crate_id":2,"name":"escape_default","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_default`].\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"❤\\n!\".escape_default() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"❤\\n!\".escape_default());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"\\\\u{{2764}}\\\\n!\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"❤\\n!\".escape_default().to_string(), \"\\\\u{2764}\\\\n!\");\n```","links":{"`char::escape_default`":"2:4522:1977"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"EscapeDefault","id":"2:42955:1978","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"5:5377:30803":{"id":"5:5377:30803","crate_id":5,"name":"replacen","span":null,"visibility":"public","docs":"Replaces first N matches of a pattern with another string.\n\n`replacen` creates a new [`String`], and copies the data from this string slice into it.\nWhile doing so, it attempts to find matches of a pattern. If it finds any, it\nreplaces them with the replacement string slice at most `count` times.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"foo foo 123 foo\";\nassert_eq!(\"new new 123 foo\", s.replacen(\"foo\", \"new\", 2));\nassert_eq!(\"faa fao 123 foo\", s.replacen('o', \"a\", 3));\nassert_eq!(\"foo foo new23 foo\", s.replacen(char::is_numeric, \"new\", 1));\n```\n\nWhen the pattern doesn't match, it returns this string slice as [`String`]:\n\n```\nlet s = \"this is old\";\nassert_eq!(s, s.replacen(\"cookie monster\", \"little lamb\", 10));\n```","links":{"`String`":"5:7239:221"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the replaced string as a new allocation, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}],["to",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}],["count",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:7239:221","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11580:7649","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11923:20677":{"id":"2:11923:20677","crate_id":2,"name":"split","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by\ncharacters matched by a pattern.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rsplit`] method can be used.\n\n[`rsplit`]: str::rsplit\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".split(' ').collect();\nassert_eq!(v, [\"Mary\", \"had\", \"a\", \"little\", \"lamb\"]);\n\nlet v: Vec<&str> = \"\".split('X').collect();\nassert_eq!(v, [\"\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".split('X').collect();\nassert_eq!(v, [\"lion\", \"\", \"tiger\", \"leopard\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".split(\"::\").collect();\nassert_eq!(v, [\"lion\", \"tiger\", \"leopard\"]);\n\nlet v: Vec<&str> = \"abc1def2ghi\".split(char::is_numeric).collect();\nassert_eq!(v, [\"abc\", \"def\", \"ghi\"]);\n\nlet v: Vec<&str> = \"lionXtigerXleopard\".split(char::is_uppercase).collect();\nassert_eq!(v, [\"lion\", \"tiger\", \"leopard\"]);\n```\n\nIf the pattern is a slice of chars, split on each occurrence of any of the characters:\n\n```\nlet v: Vec<&str> = \"2020-11-03 23:59\".split(&['-', ' ', ':', '@'][..]).collect();\nassert_eq!(v, [\"2020\", \"11\", \"03\", \"23\", \"59\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".split(|c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"abc\", \"def\", \"ghi\"]);\n```\n\nIf a string contains multiple contiguous separators, you will end up\nwith empty strings in the output:\n\n```\nlet x = \"||||a||b|c\".to_string();\nlet d: Vec<_> = x.split('|').collect();\n\nassert_eq!(d, &[\"\", \"\", \"\", \"\", \"a\", \"\", \"b\", \"c\"]);\n```\n\nContiguous separators are separated by the empty string.\n\n```\nlet x = \"(///)\".to_string();\nlet d: Vec<_> = x.split('/').collect();\n\nassert_eq!(d, &[\"(\", \"\", \"\", \")\"]);\n```\n\nSeparators at the start or end of a string are neighbored\nby empty strings.\n\n```\nlet d: Vec<_> = \"010\".split(\"0\").collect();\nassert_eq!(d, &[\"\", \"1\", \"\"]);\n```\n\nWhen the empty string is used as a separator, it separates\nevery character in the string, along with the beginning\nand end of the string.\n\n```\nlet f: Vec<_> = \"rust\".split(\"\").collect();\nassert_eq!(f, &[\"\", \"r\", \"u\", \"s\", \"t\", \"\"]);\n```\n\nContiguous separators can lead to possibly surprising behavior\nwhen whitespace is used as the separator. This code is correct:\n\n```\nlet x = \"    a  b c\".to_string();\nlet d: Vec<_> = x.split(' ').collect();\n\nassert_eq!(d, &[\"\", \"\", \"\", \"\", \"a\", \"\", \"b\", \"c\"]);\n```\n\nIt does _not_ give you:\n\n```,ignore\nassert_eq!(d, &[\"a\", \"b\", \"c\"]);\n```\n\nUse [`split_whitespace`] for this behavior.\n\n[`split_whitespace`]: str::split_whitespace","links":{"self::pattern":"2:11575:7653","`DoubleEndedIterator`":"2:7169:119","prim@char":"1:11872:411","str::split_whitespace":"2:11901:27241","str::rsplit":"2:11929:20681"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Split","id":"2:42647:2163","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11580:7649","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"5:5390:2187":{"id":"5:5390:2187","crate_id":5,"name":"repeat","span":null,"visibility":"public","docs":"Creates a new [`String`] by repeating a string `n` times.\n\n# Panics\n\nThis function will panic if the capacity would overflow.\n\n# Examples\n\nBasic usage:\n\n```\nassert_eq!(\"abc\".repeat(4), String::from(\"abcabcabcabc\"));\n```\n\nA panic upon overflow:\n\n```should_panic\n// this will panic at runtime\nlet huge = \"0123456789abcdef\".repeat(usize::MAX);\n```","links":{"`String`":"5:7239:221"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["n",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:7239:221","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11875:20632":{"id":"2:11875:20632","crate_id":2,"name":"is_empty","span":null,"visibility":"public","docs":"Returns `true` if `self` has a length of zero bytes.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\";\nassert!(s.is_empty());\n\nlet s = \"not empty\";\nassert!(!s.is_empty());\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11905:27230":{"id":"2:11905:27230","crate_id":2,"name":"encode_utf16","span":null,"visibility":"public","docs":"Returns an iterator of `u16` over the string encoded as UTF-16.\n\n# Examples\n\nBasic usage:\n\n```\nlet text = \"Zażółć gęślą jaźń\";\n\nlet utf8_len = text.len();\nlet utf16_len = text.encode_utf16().count();\n\nassert!(utf16_len <= utf8_len);\n```","links":{},"attrs":["#[must_use =\n\"this returns the encoded string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"EncodeUtf16","id":"2:42939:7654","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11962:30141":{"id":"2:11962:30141","crate_id":2,"name":"trim","span":null,"visibility":"public","docs":"Returns a string slice with leading and trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\n\nassert_eq!(\"Hello\\tworld\", s.trim());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a slice, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_trim\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11970:30146":{"id":"2:11970:30146","crate_id":2,"name":"trim_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes and suffixes that match a\npattern repeatedly removed.\n\nThe [pattern] can be a [`char`], a slice of [`char`]s, or a function\nor closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_matches('1'), \"foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_matches(char::is_numeric), \"foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_matches(x), \"foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1foo1barXX\".trim_matches(|c| c == '1' || c == 'X'), \"foo1bar\");\n```","links":{"prim@char":"1:11872:411","self::pattern":"2:11575:7653"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11580:7649","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"2:11580:7649","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"DoubleEndedSearcher","id":"2:11600:7648","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11902:27255":{"id":"2:11902:27255","crate_id":2,"name":"split_ascii_whitespace","span":null,"visibility":"public","docs":"Splits a string slice by ASCII whitespace.\n\nThe iterator returned will return string slices that are sub-slices of\nthe original string slice, separated by any amount of ASCII whitespace.\n\nTo split by Unicode `Whitespace` instead, use [`split_whitespace`].\n\n[`split_whitespace`]: str::split_whitespace\n\n# Examples\n\nBasic usage:\n\n```\nlet mut iter = \"A few words\".split_ascii_whitespace();\n\nassert_eq!(Some(\"A\"), iter.next());\nassert_eq!(Some(\"few\"), iter.next());\nassert_eq!(Some(\"words\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nAll kinds of ASCII whitespace are considered:\n\n```\nlet mut iter = \" Mary   had\\ta little  \\n\\t lamb\".split_ascii_whitespace();\nassert_eq!(Some(\"Mary\"), iter.next());\nassert_eq!(Some(\"had\"), iter.next());\nassert_eq!(Some(\"a\"), iter.next());\nassert_eq!(Some(\"little\"), iter.next());\nassert_eq!(Some(\"lamb\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nIf the string is empty or all ASCII whitespace, the iterator yields no string slices:\n```\nassert_eq!(\"\".split_ascii_whitespace().next(), None);\nassert_eq!(\"   \".split_ascii_whitespace().next(), None);\n```","links":{"str::split_whitespace":"2:11901:27241"},"attrs":["#[must_use =\n\"this returns the split string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"SplitAsciiWhitespace","id":"2:42930:7655","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"5:5380:30804":{"id":"5:5380:30804","crate_id":5,"name":"to_lowercase","span":null,"visibility":"public","docs":"Returns the lowercase equivalent of this string slice, as a new [`String`].\n\n'Lowercase' is defined according to the terms of the Unicode Derived Core Property\n`Lowercase`.\n\nSince some characters can expand into multiple characters when changing\nthe case, this function returns a [`String`] instead of modifying the\nparameter in-place.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"HELLO\";\n\nassert_eq!(\"hello\", s.to_lowercase());\n```\n\nA tricky example, with sigma:\n\n```\nlet sigma = \"Σ\";\n\nassert_eq!(\"σ\", sigma.to_lowercase());\n\n// but at the end of a word, it's ς, not σ:\nlet odysseus = \"ὈΔΥΣΣΕΎΣ\";\n\nassert_eq!(\"ὀδυσσεύς\", odysseus.to_lowercase());\n```\n\nLanguages without case are not changed:\n\n```\nlet new_year = \"农历新年\";\n\nassert_eq!(new_year, new_year.to_lowercase());\n```","links":{"`String`":"5:7239:221"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the lowercase string as a new String, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:7239:221","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"5:5374:8000":{"id":"5:5374:8000","crate_id":5,"name":"replace","span":null,"visibility":"public","docs":"Replaces all matches of a pattern with another string.\n\n`replace` creates a new [`String`], and copies the data from this string slice into it.\nWhile doing so, it attempts to find matches of a pattern. If it finds any, it\nreplaces them with the replacement string slice.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"this is old\";\n\nassert_eq!(\"this is new\", s.replace(\"old\", \"new\"));\nassert_eq!(\"than an old\", s.replace(\"is\", \"an\"));\n```\n\nWhen the pattern doesn't match, it returns this string slice as [`String`]:\n\n```\nlet s = \"this is old\";\nassert_eq!(s, s.replace(\"cookie monster\", \"little lamb\"));\n```","links":{"`String`":"5:7239:221"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the replaced string as a new allocation, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["from",{"kind":"generic","inner":"P"}],["to",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:7239:221","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11580:7649","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11932:30134":{"id":"2:11932:30134","crate_id":2,"name":"split_terminator","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by\ncharacters matched by a pattern.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\nEquivalent to [`split`], except that the trailing substring\nis skipped if empty.\n\n[`split`]: str::split\n\nThis method can be used for string data that is _terminated_,\nrather than _separated_ by a pattern.\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rsplit_terminator`] method can be used.\n\n[`rsplit_terminator`]: str::rsplit_terminator\n\n# Examples\n\nBasic usage:\n\n```\nlet v: Vec<&str> = \"A.B.\".split_terminator('.').collect();\nassert_eq!(v, [\"A\", \"B\"]);\n\nlet v: Vec<&str> = \"A..B..\".split_terminator(\".\").collect();\nassert_eq!(v, [\"A\", \"\", \"B\", \"\"]);\n\nlet v: Vec<&str> = \"A.B:C.D\".split_terminator(&['.', ':'][..]).collect();\nassert_eq!(v, [\"A\", \"B\", \"C\", \"D\"]);\n```","links":{"self::pattern":"2:11575:7653","str::split":"2:11923:20677","prim@char":"1:11872:411","`DoubleEndedIterator`":"2:7169:119","str::rsplit_terminator":"2:11935:30135"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"SplitTerminator","id":"2:42697:7673","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11580:7649","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11956:30139":{"id":"2:11956:30139","crate_id":2,"name":"match_indices","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within this string\nslice as well as the index that the match starts at.\n\nFor matches of `pat` within `self` that overlap, only the indices\ncorresponding to the first match are returned.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rmatch_indices`] method can be used.\n\n[`rmatch_indices`]: str::rmatch_indices\n\n# Examples\n\nBasic usage:\n\n```\nlet v: Vec<_> = \"abcXXXabcYYYabc\".match_indices(\"abc\").collect();\nassert_eq!(v, [(0, \"abc\"), (6, \"abc\"), (12, \"abc\")]);\n\nlet v: Vec<_> = \"1abcabc2\".match_indices(\"abc\").collect();\nassert_eq!(v, [(1, \"abc\"), (4, \"abc\")]);\n\nlet v: Vec<_> = \"ababa\".match_indices(\"aba\").collect();\nassert_eq!(v, [(0, \"aba\")]); // only the first `aba`\n```","links":{"self::pattern":"2:11575:7653","`DoubleEndedIterator`":"2:7169:119","prim@char":"1:11872:411","str::rmatch_indices":"2:11959:30140"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"MatchIndices","id":"2:42797:7668","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11580:7649","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"5:5388:30805":{"id":"5:5388:30805","crate_id":5,"name":"to_uppercase","span":null,"visibility":"public","docs":"Returns the uppercase equivalent of this string slice, as a new [`String`].\n\n'Uppercase' is defined according to the terms of the Unicode Derived Core Property\n`Uppercase`.\n\nSince some characters can expand into multiple characters when changing\nthe case, this function returns a [`String`] instead of modifying the\nparameter in-place.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"hello\";\n\nassert_eq!(\"HELLO\", s.to_uppercase());\n```\n\nScripts without case are not changed:\n\n```\nlet new_year = \"农历新年\";\n\nassert_eq!(new_year, new_year.to_uppercase());\n```\n\nOne character can become multiple:\n```\nlet s = \"tschüß\";\n\nassert_eq!(\"TSCHÜSS\", s.to_uppercase());\n```","links":{"`String`":"5:7239:221"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the uppercase string as a new String, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:7239:221","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11904:30133":{"id":"2:11904:30133","crate_id":2,"name":"lines_any","span":null,"visibility":"public","docs":"An iterator over the lines of a string.","links":{},"attrs":["#[deprecated(since = \"1.4.0\", note = \"use lines() instead now\")]"],"deprecation":{"since":"1.4.0","note":"use lines() instead now"},"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"LinesAny","id":"2:42911:7667","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11941:20685":{"id":"2:11941:20685","crate_id":2,"name":"rsplitn","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by a\npattern, starting from the end of the string, restricted to returning\nat most `n` items.\n\nIf `n` substrings are returned, the last substring (the `n`th substring)\nwill contain the remainder of the string.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will not be double ended, because it is not\nefficient to support.\n\nFor splitting from the front, the [`splitn`] method can be used.\n\n[`splitn`]: str::splitn\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".rsplitn(3, ' ').collect();\nassert_eq!(v, [\"lamb\", \"little\", \"Mary had a\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".rsplitn(3, 'X').collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"lionX\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".rsplitn(2, \"::\").collect();\nassert_eq!(v, [\"leopard\", \"lion::tiger\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".rsplitn(2, |c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"ghi\", \"abc1def\"]);\n```","links":{"prim@char":"1:11872:411","str::splitn":"2:11938:20683","self::pattern":"2:11575:7653"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["n",{"kind":"primitive","inner":"usize"}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"RSplitN","id":"2:42769:7640","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11580:7649","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"2:11580:7649","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11595:7650","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11892:20644":{"id":"2:11892:20644","crate_id":2,"name":"get_unchecked_mut","span":null,"visibility":"public","docs":"Returns a mutable, unchecked subslice of `str`.\n\nThis is the unchecked alternative to indexing the `str`.\n\n# Safety\n\nCallers of this function are responsible that these preconditions are\nsatisfied:\n\n* The starting index must not exceed the ending index;\n* Indexes must be within bounds of the original slice;\n* Indexes must lie on UTF-8 sequence boundaries.\n\nFailing that, the returned string slice may reference invalid memory or\nviolate the invariants communicated by the `str` type.\n\n# Examples\n\n```\nlet mut v = String::from(\"🗻∈🌏\");\nunsafe {\n    assert_eq!(\"🗻\", v.get_unchecked_mut(0..4));\n    assert_eq!(\"∈\", v.get_unchecked_mut(4..7));\n    assert_eq!(\"🌏\", v.get_unchecked_mut(7..11));\n}\n```","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["i",{"kind":"generic","inner":"I"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"qualified_path","inner":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"I"},"trait":{"name":"SliceIndex","id":"2:9756:219","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}}}}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"2:9756:219","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}},"2:11890:20643":{"id":"2:11890:20643","crate_id":2,"name":"get_unchecked","span":null,"visibility":"public","docs":"Returns an unchecked subslice of `str`.\n\nThis is the unchecked alternative to indexing the `str`.\n\n# Safety\n\nCallers of this function are responsible that these preconditions are\nsatisfied:\n\n* The starting index must not exceed the ending index;\n* Indexes must be within bounds of the original slice;\n* Indexes must lie on UTF-8 sequence boundaries.\n\nFailing that, the returned string slice may reference invalid memory or\nviolate the invariants communicated by the `str` type.\n\n# Examples\n\n```\nlet v = \"🗻∈🌏\";\nunsafe {\n    assert_eq!(\"🗻\", v.get_unchecked(0..4));\n    assert_eq!(\"∈\", v.get_unchecked(4..7));\n    assert_eq!(\"🌏\", v.get_unchecked(7..11));\n}\n```","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["i",{"kind":"generic","inner":"I"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"qualified_path","inner":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"I"},"trait":{"name":"SliceIndex","id":"2:9756:219","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}}}}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"2:9756:219","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}},"2:11885:20645":{"id":"2:11885:20645","crate_id":2,"name":"as_mut_ptr","span":null,"visibility":"public","docs":"Converts a mutable string slice to a raw pointer.\n\nAs string slices are a slice of bytes, the raw pointer points to a\n[`u8`]. This pointer will be pointing to the first byte of the string\nslice.\n\nIt is your responsibility to make sure that the string slice only gets\nmodified in a way that it remains valid UTF-8.","links":{"`u8`":"1:11889:1478"},"attrs":["#[must_use]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"raw_pointer","inner":{"mutable":true,"type":{"kind":"primitive","inner":"u8"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11874:802":{"id":"2:11874:802","crate_id":2,"name":"len","span":null,"visibility":"public","docs":"Returns the length of `self`.\n\nThis length is in bytes, not [`char`]s or graphemes. In other words,\nit might not be what a human considers the length of the string.\n\n[`char`]: prim@char\n\n# Examples\n\nBasic usage:\n\n```\nlet len = \"foo\".len();\nassert_eq!(3, len);\n\nassert_eq!(\"ƒoo\".len(), 4); // fancy f!\nassert_eq!(\"ƒoo\".chars().count(), 3);\n```","links":{"prim@char":"1:11872:411"},"attrs":["#[must_use]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11973:30147":{"id":"2:11973:30147","crate_id":2,"name":"trim_start_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. `start` in this context means the first\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be left side, and for right-to-left languages like\nArabic or Hebrew, this will be the right side.\n\n# Examples\n\nBasic usage:\n\n```\nassert_eq!(\"11foo1bar11\".trim_start_matches('1'), \"foo1bar11\");\nassert_eq!(\"123foo1bar123\".trim_start_matches(char::is_numeric), \"foo1bar123\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_start_matches(x), \"foo1bar12\");\n```","links":{"prim@char":"1:11872:411","self::pattern":"2:11575:7653"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11580:7649","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11926:20679":{"id":"2:11926:20679","crate_id":2,"name":"split_inclusive","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by\ncharacters matched by a pattern. Differs from the iterator produced by\n`split` in that `split_inclusive` leaves the matched part as the\nterminator of the substring.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\\nlittle lamb\\nlittle lamb.\"\n    .split_inclusive('\\n').collect();\nassert_eq!(v, [\"Mary had a little lamb\\n\", \"little lamb\\n\", \"little lamb.\"]);\n```\n\nIf the last element of the string is matched,\nthat element will be considered the terminator of the preceding substring.\nThat substring will be the last item returned by the iterator.\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\\nlittle lamb\\nlittle lamb.\\n\"\n    .split_inclusive('\\n').collect();\nassert_eq!(v, [\"Mary had a little lamb\\n\", \"little lamb\\n\", \"little lamb.\\n\"]);\n```","links":{"prim@char":"1:11872:411","self::pattern":"2:11575:7653"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"SplitInclusive","id":"2:11399:7644","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11580:7649","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11903:25651":{"id":"2:11903:25651","crate_id":2,"name":"lines","span":null,"visibility":"public","docs":"An iterator over the lines of a string, as string slices.\n\nLines are split at line endings that are either newlines (`\\n`) or\nsequences of a carriage return followed by a line feed (`\\r\\n`).\n\nLine terminators are not included in the lines returned by the iterator.\n\nThe final line ending is optional. A string that ends with a final line\nending will return the same lines as an otherwise identical string\nwithout a final line ending.\n\n# Examples\n\nBasic usage:\n\n```\nlet text = \"foo\\r\\nbar\\n\\nbaz\\n\";\nlet mut lines = text.lines();\n\nassert_eq!(Some(\"foo\"), lines.next());\nassert_eq!(Some(\"bar\"), lines.next());\nassert_eq!(Some(\"\"), lines.next());\nassert_eq!(Some(\"baz\"), lines.next());\n\nassert_eq!(None, lines.next());\n```\n\nThe final line ending isn't required:\n\n```\nlet text = \"foo\\nbar\\n\\r\\nbaz\";\nlet mut lines = text.lines();\n\nassert_eq!(Some(\"foo\"), lines.next());\nassert_eq!(Some(\"bar\"), lines.next());\nassert_eq!(Some(\"\"), lines.next());\nassert_eq!(Some(\"baz\"), lines.next());\n\nassert_eq!(None, lines.next());\n```","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Lines","id":"2:42901:2159","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"5:5372":{"id":"5:5372","crate_id":5,"name":null,"span":null,"visibility":"default","docs":"Methods for string slices.","links":{},"attrs":["#[cfg(not(test))]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"kind":"primitive","inner":"str"},"items":["5:5373:30802","5:5374:8000","5:5377:30803","5:5380:30804","5:5388:30805","5:5389:30806","5:5390:2187","5:5391:21877","5:5392:21878"],"negative":false,"synthetic":false,"blanket_impl":null}},"2:11985:30149":{"id":"2:11985:30149","crate_id":2,"name":"trim_left_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. 'Left' in this context means the first\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _right_ side, not the left.\n\n# Examples\n\nBasic usage:\n\n```\nassert_eq!(\"11foo1bar11\".trim_left_matches('1'), \"foo1bar11\");\nassert_eq!(\"123foo1bar123\".trim_left_matches(char::is_numeric), \"foo1bar123\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_left_matches(x), \"foo1bar12\");\n```","links":{"prim@char":"1:11872:411","self::pattern":"2:11575:7653"},"attrs":["#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_start_matches`\",\nsuggestion = \"trim_start_matches\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_start_matches`"},"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11580:7649","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11897:20670":{"id":"2:11897:20670","crate_id":2,"name":"split_at_mut","span":null,"visibility":"public","docs":"Divide one mutable string slice into two at an index.\n\nThe argument, `mid`, should be a byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get immutable string slices instead, see the [`split_at`] method.\n\n[`split_at`]: str::split_at\n\n# Panics\n\nPanics if `mid` is not on a UTF-8 code point boundary, or if it is\npast the end of the last code point of the string slice.\n\n# Examples\n\nBasic usage:\n\n```\nlet mut s = \"Per Martin-Löf\".to_string();\n{\n    let (first, last) = s.split_at_mut(3);\n    first.make_ascii_uppercase();\n    assert_eq!(\"PER\", first);\n    assert_eq!(\" Martin-Löf\", last);\n}\nassert_eq!(\"PER Martin-Löf\", s);\n```","links":{"str::split_at":"2:11896:20669"},"attrs":["#[must_use]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["mid",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"tuple","inner":[{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"primitive","inner":"str"}}},{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"primitive","inner":"str"}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:12000:30153":{"id":"2:12000:30153","crate_id":2,"name":"escape_unicode","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_unicode`].\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"❤\\n!\".escape_unicode() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"❤\\n!\".escape_unicode());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"\\\\u{{2764}}\\\\u{{a}}\\\\u{{21}}\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"❤\\n!\".escape_unicode().to_string(), \"\\\\u{2764}\\\\u{a}\\\\u{21}\");\n```","links":{"`char::escape_unicode`":"2:4519:30153"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"EscapeUnicode","id":"2:42964:7665","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11873":{"id":"2:11873","crate_id":2,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":["#[cfg(not(test))]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"kind":"primitive","inner":"str"},"items":["2:11874:802","2:11875:20632","2:11876:30127","2:11877:30128","2:11879:30129","2:11882:26712","2:11883:30130","2:11884:311","2:11885:20645","2:11886:20641","2:11888:20642","2:11890:20643","2:11892:20644","2:11894:30131","2:11895:30132","2:11896:20669","2:11897:20670","2:11898:27229","2:11899:27367","2:11900:19837","2:11901:27241","2:11902:27255","2:11903:25651","2:11904:30133","2:11905:27230","2:11906:20687","2:11909:20200","2:11912:20202","2:11915:19393","2:11919:19394","2:11923:20677","2:11926:20679","2:11929:20681","2:11932:30134","2:11935:30135","2:11938:20683","2:11941:20685","2:11944:30136","2:11947:30137","2:11950:1868","2:11953:30138","2:11956:30139","2:11959:30140","2:11962:30141","2:11964:30142","2:11966:30143","2:11968:30144","2:11969:30145","2:11970:30146","2:11973:30147","2:11976:19965","2:11979:20688","2:11982:30148","2:11985:30149","2:11988:30150","2:11991:30151","2:11993:20560","2:11994:20561","2:11995:20562","2:11996:20563","2:11997:30152","2:11999:1977","2:12000:30153"],"negative":false,"synthetic":false,"blanket_impl":null}},"2:11982:30148":{"id":"2:11982:30148","crate_id":2,"name":"trim_end_matches","span":null,"visibility":"public","docs":"Returns a string slice with all suffixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. `end` in this context means the last\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be right side, and for right-to-left languages like\nArabic or Hebrew, this will be the left side.\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_end_matches('1'), \"11foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_end_matches(char::is_numeric), \"123foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_end_matches(x), \"12foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1fooX\".trim_end_matches(|c| c == '1' || c == 'X'), \"1foo\");\n```","links":{"prim@char":"1:11872:411","self::pattern":"2:11575:7653"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11580:7649","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"2:11580:7649","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11595:7650","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11888:20642":{"id":"2:11888:20642","crate_id":2,"name":"get_mut","span":null,"visibility":"public","docs":"Returns a mutable subslice of `str`.\n\nThis is the non-panicking alternative to indexing the `str`. Returns\n[`None`] whenever equivalent indexing operation would panic.\n\n# Examples\n\n```\nlet mut v = String::from(\"hello\");\n// correct length\nassert!(v.get_mut(0..5).is_some());\n// out of bounds\nassert!(v.get_mut(..42).is_none());\nassert_eq!(Some(\"he\"), v.get_mut(0..2).map(|v| &*v));\n\nassert_eq!(\"hello\", v);\n{\n    let s = v.get_mut(0..2);\n    let s = s.map(|s| {\n        s.make_ascii_uppercase();\n        &*s\n    });\n    assert_eq!(Some(\"HE\"), s);\n}\nassert_eq!(\"HEllo\", v);\n```","links":{"`None`":"2:40684:176"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["i",{"kind":"generic","inner":"I"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:40682:178","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"qualified_path","inner":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"I"},"trait":{"name":"SliceIndex","id":"2:9756:219","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}}}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"2:9756:219","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11900:19837":{"id":"2:11900:19837","crate_id":2,"name":"bytes","span":null,"visibility":"public","docs":"An iterator over the bytes of a string slice.\n\nAs a string slice consists of a sequence of bytes, we can iterate\nthrough a string slice by byte. This method returns such an iterator.\n\n# Examples\n\nBasic usage:\n\n```\nlet mut bytes = \"bors\".bytes();\n\nassert_eq!(Some(b'b'), bytes.next());\nassert_eq!(Some(b'o'), bytes.next());\nassert_eq!(Some(b'r'), bytes.next());\nassert_eq!(Some(b's'), bytes.next());\n\nassert_eq!(None, bytes.next());\n```","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Bytes","id":"2:42633:2162","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11906:20687":{"id":"2:11906:20687","crate_id":2,"name":"contains","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a sub-slice of\nthis string slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nBasic usage:\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.contains(\"nana\"));\nassert!(!bananas.contains(\"apples\"));\n```","links":{"prim@char":"1:11872:411","self::pattern":"2:11575:7653"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11580:7649","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11909:20200":{"id":"2:11909:20200","crate_id":2,"name":"starts_with","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a prefix of this\nstring slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nBasic usage:\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.starts_with(\"bana\"));\nassert!(!bananas.starts_with(\"nana\"));\n```","links":{"prim@char":"1:11872:411","self::pattern":"2:11575:7653"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11580:7649","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11964:30142":{"id":"2:11964:30142","crate_id":2,"name":"trim_start","span":null,"visibility":"public","docs":"Returns a string slice with leading whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Text directionality\n\nA string is a sequence of bytes. `start` in this context means the first\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be left side, and for right-to-left languages like\nArabic or Hebrew, this will be the right side.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\nassert_eq!(\"Hello\\tworld\\t\\n\", s.trim_start());\n```\n\nDirectionality:\n\n```\nlet s = \"  English  \";\nassert!(Some('E') == s.trim_start().chars().next());\n\nlet s = \"  עברית  \";\nassert!(Some('ע') == s.trim_start().chars().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_trim_start\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11876:30127":{"id":"2:11876:30127","crate_id":2,"name":"is_char_boundary","span":null,"visibility":"public","docs":"Checks that `index`-th byte is the first byte in a UTF-8 code point\nsequence or the end of the string.\n\nThe start and end of the string (when `index == self.len()`) are\nconsidered to be boundaries.\n\nReturns `false` if `index` is greater than `self.len()`.\n\n# Examples\n\n```\nlet s = \"Löwe 老虎 Léopard\";\nassert!(s.is_char_boundary(0));\n// start of `老`\nassert!(s.is_char_boundary(6));\nassert!(s.is_char_boundary(s.len()));\n\n// second byte of `ö`\nassert!(!s.is_char_boundary(2));\n\n// third byte of `老`\nassert!(!s.is_char_boundary(8));\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["index",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11994:20561":{"id":"2:11994:20561","crate_id":2,"name":"eq_ignore_ascii_case","span":null,"visibility":"public","docs":"Checks that two strings are an ASCII case-insensitive match.\n\nSame as `to_ascii_lowercase(a) == to_ascii_lowercase(b)`,\nbut without allocating and copying temporaries.\n\n# Examples\n\n```\nassert!(\"Ferris\".eq_ignore_ascii_case(\"FERRIS\"));\nassert!(\"Ferrös\".eq_ignore_ascii_case(\"FERRöS\"));\nassert!(!\"Ferrös\".eq_ignore_ascii_case(\"FERRÖS\"));\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["other",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"5:5391:21877":{"id":"5:5391:21877","crate_id":5,"name":"to_ascii_uppercase","span":null,"visibility":"public","docs":"Returns a copy of this string where each character is mapped to its\nASCII upper case equivalent.\n\nASCII letters 'a' to 'z' are mapped to 'A' to 'Z',\nbut non-ASCII letters are unchanged.\n\nTo uppercase the value in-place, use [`make_ascii_uppercase`].\n\nTo uppercase ASCII characters in addition to non-ASCII characters, use\n[`to_uppercase`].\n\n# Examples\n\n```\nlet s = \"Grüße, Jürgen ❤\";\n\nassert_eq!(\"GRüßE, JüRGEN ❤\", s.to_ascii_uppercase());\n```\n\n[`make_ascii_uppercase`]: str::make_ascii_uppercase\n[`to_uppercase`]: #method.to_uppercase","links":{"str::make_ascii_uppercase":"2:11995:20562"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use = \"to uppercase the value in-place, use `make_ascii_uppercase()`\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:7239:221","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11895:30132":{"id":"2:11895:30132","crate_id":2,"name":"slice_mut_unchecked","span":null,"visibility":"public","docs":"Creates a string slice from another string slice, bypassing safety\nchecks.\nThis is generally not recommended, use with caution! For a safe\nalternative see [`str`] and [`IndexMut`].\n\n[`IndexMut`]: crate::ops::IndexMut\n\nThis new slice goes from `begin` to `end`, including `begin` but\nexcluding `end`.\n\nTo get an immutable string slice instead, see the\n[`slice_unchecked`] method.\n\n[`slice_unchecked`]: str::slice_unchecked\n\n# Safety\n\nCallers of this function are responsible that three preconditions are\nsatisfied:\n\n* `begin` must not exceed `end`.\n* `begin` and `end` must be byte positions within the string slice.\n* `begin` and `end` must lie on UTF-8 sequence boundaries.","links":{"`str`":"1:11878:1380","crate::ops::IndexMut":"2:2999:2059","str::slice_unchecked":"2:11894:30131"},"attrs":["#[deprecated(since = \"1.29.0\", note =\n\"use `get_unchecked_mut(begin..end)` instead\")]"],"deprecation":{"since":"1.29.0","note":"use `get_unchecked_mut(begin..end)` instead"},"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["begin",{"kind":"primitive","inner":"usize"}],["end",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}},"2:11935:30135":{"id":"2:11935:30135","crate_id":2,"name":"rsplit_terminator","span":null,"visibility":"public","docs":"An iterator over substrings of `self`, separated by characters\nmatched by a pattern and yielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\nEquivalent to [`split`], except that the trailing substring is\nskipped if empty.\n\n[`split`]: str::split\n\nThis method can be used for string data that is _terminated_,\nrather than _separated_ by a pattern.\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a\nreverse search, and it will be double ended if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`split_terminator`] method can be\nused.\n\n[`split_terminator`]: str::split_terminator\n\n# Examples\n\n```\nlet v: Vec<&str> = \"A.B.\".rsplit_terminator('.').collect();\nassert_eq!(v, [\"B\", \"A\"]);\n\nlet v: Vec<&str> = \"A..B..\".rsplit_terminator(\".\").collect();\nassert_eq!(v, [\"\", \"B\", \"\", \"A\"]);\n\nlet v: Vec<&str> = \"A.B:C.D\".rsplit_terminator(&['.', ':'][..]).collect();\nassert_eq!(v, [\"D\", \"C\", \"B\", \"A\"]);\n```","links":{"self::pattern":"2:11575:7653","str::split":"2:11923:20677","prim@char":"1:11872:411","str::split_terminator":"2:11932:30134"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"RSplitTerminator","id":"2:42715:7672","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11580:7649","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"2:11580:7649","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11595:7650","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11912:20202":{"id":"2:11912:20202","crate_id":2,"name":"ends_with","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a suffix of this\nstring slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nBasic usage:\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.ends_with(\"anas\"));\nassert!(!bananas.ends_with(\"nana\"));\n```","links":{"prim@char":"1:11872:411","self::pattern":"2:11575:7653"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11580:7649","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"2:11580:7649","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11595:7650","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11894:30131":{"id":"2:11894:30131","crate_id":2,"name":"slice_unchecked","span":null,"visibility":"public","docs":"Creates a string slice from another string slice, bypassing safety\nchecks.\n\nThis is generally not recommended, use with caution! For a safe\nalternative see [`str`] and [`Index`].\n\n[`Index`]: crate::ops::Index\n\nThis new slice goes from `begin` to `end`, including `begin` but\nexcluding `end`.\n\nTo get a mutable string slice instead, see the\n[`slice_mut_unchecked`] method.\n\n[`slice_mut_unchecked`]: str::slice_mut_unchecked\n\n# Safety\n\nCallers of this function are responsible that three preconditions are\nsatisfied:\n\n* `begin` must not exceed `end`.\n* `begin` and `end` must be byte positions within the string slice.\n* `begin` and `end` must lie on UTF-8 sequence boundaries.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\n\nunsafe {\n    assert_eq!(\"Löwe 老虎 Léopard\", s.slice_unchecked(0, 21));\n}\n\nlet s = \"Hello, world!\";\n\nunsafe {\n    assert_eq!(\"world\", s.slice_unchecked(7, 12));\n}\n```","links":{"`str`":"1:11878:1380","str::slice_mut_unchecked":"2:11895:30132","crate::ops::Index":"2:2995:2058"},"attrs":["#[deprecated(since = \"1.29.0\", note =\n\"use `get_unchecked(begin..end)` instead\")]","#[must_use]"],"deprecation":{"since":"1.29.0","note":"use `get_unchecked(begin..end)` instead"},"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["begin",{"kind":"primitive","inner":"usize"}],["end",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}},"2:11968:30144":{"id":"2:11968:30144","crate_id":2,"name":"trim_left","span":null,"visibility":"public","docs":"Returns a string slice with leading whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`.\n\n# Text directionality\n\nA string is a sequence of bytes. 'Left' in this context means the first\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _right_ side, not the left.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \" Hello\\tworld\\t\";\n\nassert_eq!(\"Hello\\tworld\\t\", s.trim_left());\n```\n\nDirectionality:\n\n```\nlet s = \"  English\";\nassert!(Some('E') == s.trim_left().chars().next());\n\nlet s = \"  עברית\";\nassert!(Some('ע') == s.trim_left().chars().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_start`\", suggestion\n= \"trim_start\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_start`"},"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11950:1868":{"id":"2:11950:1868","crate_id":2,"name":"matches","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within the given string\nslice.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rmatches`] method can be used.\n\n[`rmatches`]: str::matches\n\n# Examples\n\nBasic usage:\n\n```\nlet v: Vec<&str> = \"abcXXXabcYYYabc\".matches(\"abc\").collect();\nassert_eq!(v, [\"abc\", \"abc\", \"abc\"]);\n\nlet v: Vec<&str> = \"1abc2abc3\".matches(char::is_numeric).collect();\nassert_eq!(v, [\"1\", \"2\", \"3\"]);\n```","links":{"self::pattern":"2:11575:7653","`DoubleEndedIterator`":"2:7169:119","prim@char":"1:11872:411","str::matches":"2:11950:1868"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Matches","id":"2:42851:7670","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11580:7649","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11959:30140":{"id":"2:11959:30140","crate_id":2,"name":"rmatch_indices","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within `self`,\nyielded in reverse order along with the index of the match.\n\nFor matches of `pat` within `self` that overlap, only the indices\ncorresponding to the last match are returned.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`match_indices`] method can be used.\n\n[`match_indices`]: str::match_indices\n\n# Examples\n\nBasic usage:\n\n```\nlet v: Vec<_> = \"abcXXXabcYYYabc\".rmatch_indices(\"abc\").collect();\nassert_eq!(v, [(12, \"abc\"), (6, \"abc\"), (0, \"abc\")]);\n\nlet v: Vec<_> = \"1abcabc2\".rmatch_indices(\"abc\").collect();\nassert_eq!(v, [(4, \"abc\"), (1, \"abc\")]);\n\nlet v: Vec<_> = \"ababa\".rmatch_indices(\"aba\").collect();\nassert_eq!(v, [(2, \"aba\")]); // only the last `aba`\n```","links":{"self::pattern":"2:11575:7653","`DoubleEndedIterator`":"2:7169:119","prim@char":"1:11872:411","str::match_indices":"2:11956:30139"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"RMatchIndices","id":"2:42815:7669","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11580:7649","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"2:11580:7649","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11595:7650","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11988:30150":{"id":"2:11988:30150","crate_id":2,"name":"trim_right_matches","span":null,"visibility":"public","docs":"Returns a string slice with all suffixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. 'Right' in this context means the last\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _left_ side, not the right.\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_right_matches('1'), \"11foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_right_matches(char::is_numeric), \"123foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_right_matches(x), \"12foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1fooX\".trim_right_matches(|c| c == '1' || c == 'X'), \"1foo\");\n```","links":{"prim@char":"1:11872:411","self::pattern":"2:11575:7653"},"attrs":["#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_end_matches`\",\nsuggestion = \"trim_end_matches\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_end_matches`"},"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11580:7649","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"2:11580:7649","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11595:7650","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"5:5373:30802":{"id":"5:5373:30802","crate_id":5,"name":"into_boxed_bytes","span":null,"visibility":"public","docs":"Converts a `Box<str>` into a `Box<[u8]>` without copying or allocating.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"this is a string\";\nlet boxed_str = s.to_owned().into_boxed_str();\nlet boxed_bytes = boxed_str.into_boxed_bytes();\nassert_eq!(*boxed_bytes, *s.as_bytes());\n```","links":{},"attrs":["#[must_use = \"`self` will be dropped if the result is not used\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"resolved_path","inner":{"name":"Box","id":"5:279:1899","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}},{"type":{"kind":"resolved_path","inner":{"name":"Global","id":"5:6988:2048","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}]],"output":{"kind":"resolved_path","inner":{"name":"Box","id":"5:279:1899","args":{"angle_bracketed":{"args":[{"type":{"kind":"slice","inner":{"kind":"primitive","inner":"u8"}}},{"type":{"kind":"resolved_path","inner":{"name":"Global","id":"5:6988:2048","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"paths":{"16:2786:14178":{"crate_id":16,"path":["gimli","common","DebugStrOffsetsBase"],"kind":"struct"},"17:13324:19326":{"crate_id":17,"path":["object","pe","ImageThunkData32"],"kind":"struct"},"1:5249:118":{"crate_id":1,"path":["std","path","Display"],"kind":"struct"},"2:4728:1623":{"crate_id":2,"path":["core","ffi","c_void"],"kind":"enum"},"2:2685:222":{"crate_id":2,"path":["core","marker","StructuralEq"],"kind":"trait"},"5:1985:2041":{"crate_id":5,"path":["alloc","collections","btree","map","CursorMut"],"kind":"struct"},"6:526:8784":{"crate_id":6,"path":["libc","unix","ipv6_mreq"],"kind":"struct"},"6:4834:12267":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlattr"],"kind":"struct"},"2:39565:7962":{"crate_id":2,"path":["core","iter","adapters","copied","Copied"],"kind":"struct"},"6:573:8791":{"crate_id":6,"path":["libc","unix","itimerval"],"kind":"struct"},"2:1734:28201":{"crate_id":2,"path":["core","ptr","metadata","PtrComponents"],"kind":"struct"},"6:4455:12227":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_trigger"],"kind":"struct"},"17:10555:15441":{"crate_id":17,"path":["object","read","pe","export","ExportTable"],"kind":"struct"},"17:12550:18587":{"crate_id":17,"path":["object","macho","SourceVersionCommand"],"kind":"struct"},"17:10857:15276":{"crate_id":17,"path":["object","read","SymbolSection"],"kind":"enum"},"2:41159:82":{"crate_id":2,"path":["core","sync","atomic","AtomicI64"],"kind":"struct"},"6:1534:9692":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr"],"kind":"struct"},"16:6717:14102":{"crate_id":16,"path":["gimli","read","line","LineSequence"],"kind":"struct"},"16:7626:15159":{"crate_id":16,"path":["gimli","read","rnglists","RngListIter"],"kind":"struct"},"17:12510:18584":{"crate_id":17,"path":["object","macho","IdentCommand"],"kind":"struct"},"1:4680:2241":{"crate_id":1,"path":["std","os","fd","raw","AsRawFd"],"kind":"trait"},"5:1203:2018":{"crate_id":5,"path":["alloc","collections","btree","map","entry","VacantEntry"],"kind":"struct"},"17:9826:15323":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdatIterator"],"kind":"struct"},"2:3938:2148":{"crate_id":2,"path":["core","array","Guard"],"kind":"struct"},"16:5305:15061":{"crate_id":16,"path":["gimli","constants","DwOp"],"kind":"struct"},"5:1218:2017":{"crate_id":5,"path":["alloc","collections","btree","map","entry","OccupiedEntry"],"kind":"struct"},"1:7770:2128":{"crate_id":1,"path":["std","fs","Metadata"],"kind":"struct"},"17:12194:18564":{"crate_id":17,"path":["object","macho","DysymtabCommand"],"kind":"struct"},"16:4757:14801":{"crate_id":16,"path":["gimli","constants","DwId"],"kind":"struct"},"2:6697:7948":{"crate_id":2,"path":["core","iter","range","Step"],"kind":"trait"},"1:7579:1961":{"crate_id":1,"path":["std","thread","Builder"],"kind":"struct"},"16:7635:15160":{"crate_id":16,"path":["gimli","read","rnglists","RawRange"],"kind":"struct"},"17:8420:15251":{"crate_id":17,"path":["object","common","SymbolScope"],"kind":"enum"},"2:41737:70":{"crate_id":2,"path":["core","fmt","rt","Argument"],"kind":"struct"},"1:5336:2339":{"crate_id":1,"path":["std","process","ChildStdin"],"kind":"struct"},"17:10840:15275":{"crate_id":17,"path":["object","read","SymbolIndex"],"kind":"struct"},"17:13469:19341":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation64"],"kind":"struct"},"1:11322:2211":{"crate_id":1,"path":["std","sys_common","net","TcpStream"],"kind":"struct"},"17:11319:18034":{"crate_id":17,"path":["object","elf","SectionHeader64"],"kind":"struct"},"6:6694:13345":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_fpstate"],"kind":"struct"},"2:41971:143":{"crate_id":2,"path":["core","hash","sip","Hasher"],"kind":"struct"},"6:4840:12268":{"crate_id":6,"path":["libc","unix","linux_like","linux","file_clone_range"],"kind":"struct"},"1:4329:2257":{"crate_id":1,"path":["std","os","unix","net","stream","UnixStream"],"kind":"struct"},"2:2500:73":{"crate_id":2,"path":["core","convert","AsMut"],"kind":"trait"},"2:43394:8158":{"crate_id":2,"path":["core","str","BytesIsNotEmpty"],"kind":"struct"},"2:1655:1075":{"crate_id":2,"path":["core","ptr"],"kind":"module"},"6:4536:12237":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_abs_setup"],"kind":"struct"},"5:7087:2003":{"crate_id":5,"path":["alloc","collections","vec_deque","into_iter","IntoIter"],"kind":"struct"},"16:5886:15094":{"crate_id":16,"path":["gimli","read","cfi","FrameDescriptionEntry"],"kind":"struct"},"11:1029:2018":{"crate_id":11,"path":["hashbrown","map","VacantEntry"],"kind":"struct"},"5:2397:31233":{"crate_id":5,"path":["alloc","collections","btree","node","NodeRef"],"kind":"struct"},"2:30626:7798":{"crate_id":2,"path":["core","cmp","Reverse"],"kind":"struct"},"17:11011:15231":{"crate_id":17,"path":["object","read","CodeView"],"kind":"struct"},"2:3156:8029":{"crate_id":2,"path":["core","ops","range","OneSidedRange"],"kind":"trait"},"5:2896:31236":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Dying"],"kind":"enum"},"1:3209:2184":{"crate_id":1,"path":["std","io","stdio","Stdout"],"kind":"struct"},"1:11159:2354":{"crate_id":1,"path":["std","sys_common","process","CommandEnvs"],"kind":"struct"},"1:1595:2024":{"crate_id":1,"path":["std","collections","hash","set","SymmetricDifference"],"kind":"struct"},"17:9409:15294":{"crate_id":17,"path":["object","read","archive","Members"],"kind":"enum"},"6:5804:12917":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","termios"],"kind":"struct"},"17:9907:15378":{"crate_id":17,"path":["object","read","elf","version","VersionIndex"],"kind":"struct"},"17:13564:19347":{"crate_id":17,"path":["object","pe","ImageLoadConfigDirectory64"],"kind":"struct"},"17:10142:15432":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandVariant"],"kind":"enum"},"1:6238:203":{"crate_id":1,"path":["std","sync","mpmc","Receiver"],"kind":"struct"},"2:43666:7566":{"crate_id":2,"path":["core","alloc","AllocError"],"kind":"struct"},"1:942:2012":{"crate_id":1,"path":["std","collections","hash","map","RawEntryMut"],"kind":"enum"},"5:2906:31240":{"crate_id":5,"path":["alloc","collections","btree","node","marker","ValMut"],"kind":"struct"},"2:10182:7642":{"crate_id":2,"path":["core","slice","iter","SplitN"],"kind":"struct"},"1:8223:2209":{"crate_id":1,"path":["std","os","unix","net","listener","Incoming"],"kind":"struct"},"5:3524:2001":{"crate_id":5,"path":["alloc","collections","linked_list","Iter"],"kind":"struct"},"2:40809:8106":{"crate_id":2,"path":["core","panicking","AssertKind"],"kind":"enum"},"16:6022:15100":{"crate_id":16,"path":["gimli","read","cfi","RegisterRule"],"kind":"enum"},"1:8080:2132":{"crate_id":1,"path":["std","io","IoSlice"],"kind":"struct"},"17:13292:19323":{"crate_id":17,"path":["object","pe","ImageExportDirectory"],"kind":"struct"},"16:2862:14181":{"crate_id":16,"path":["gimli","common","DebugTypeSignature"],"kind":"struct"},"11:1003:2017":{"crate_id":11,"path":["hashbrown","map","OccupiedEntry"],"kind":"struct"},"5:1412:2008":{"crate_id":5,"path":["alloc","collections","btree","map","ValuesMut"],"kind":"struct"},"6:1704:9708":{"crate_id":6,"path":["libc","unix","linux_like","mmsghdr"],"kind":"struct"},"18:681:19400":{"crate_id":18,"path":["memchr","memmem","Finder"],"kind":"struct"},"17:562:15246":{"crate_id":17,"path":["object","read","any","Symbol"],"kind":"struct"},"16:5963:15097":{"crate_id":16,"path":["gimli","read","cfi","RegisterRuleIter"],"kind":"struct"},"6:4664:2224":{"crate_id":6,"path":["libc","unix","linux_like","linux","ucred"],"kind":"struct"},"1:11893:1474":{"crate_id":1,"path":["std","u128"],"kind":"primitive"},"1:10303:2347":{"crate_id":1,"path":["std","sys","unix","process","process_common","CommandArgs"],"kind":"struct"},"16:5557:15079":{"crate_id":16,"path":["gimli","read","addr","DebugAddr"],"kind":"struct"},"16:7588:15157":{"crate_id":16,"path":["gimli","read","rnglists","RawRngListIter"],"kind":"struct"},"2:22396:2220":{"crate_id":2,"path":["core","num","nonzero","NonZeroIsize"],"kind":"struct"},"2:44934:2470":{"crate_id":2,"path":["core","core_arch","simd","f64x2"],"kind":"struct"},"2:2853:8023":{"crate_id":2,"path":["core","ops","bit","BitAndAssign"],"kind":"trait"},"1:649:1983":{"crate_id":1,"path":["std","backtrace","BytesOrWide"],"kind":"enum"},"6:4521:12235":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_ff_upload"],"kind":"struct"},"2:43402:8177":{"crate_id":2,"path":["core","time","Nanoseconds"],"kind":"struct"},"16:2720:14175":{"crate_id":16,"path":["gimli","common","DebugRngListsBase"],"kind":"struct"},"16:7543:15155":{"crate_id":16,"path":["gimli","read","rnglists","DebugRngLists"],"kind":"struct"},"16:7498:15151":{"crate_id":16,"path":["gimli","read","pubtypes","PubTypesEntry"],"kind":"struct"},"17:10377:15394":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbol"],"kind":"struct"},"16:8269:126":{"crate_id":16,"path":["gimli","read","Error"],"kind":"enum"},"5:4037:2002":{"crate_id":5,"path":["alloc","collections","vec_deque","iter_mut","IterMut"],"kind":"struct"},"17:8598:15257":{"crate_id":17,"path":["object","common","SymbolFlags"],"kind":"enum"},"1:1574:2006":{"crate_id":1,"path":["std","collections","hash","set","Drain"],"kind":"struct"},"2:39390:7778":{"crate_id":2,"path":["core","char","TryFromCharError"],"kind":"struct"},"1:8773:2001":{"crate_id":1,"path":["std","sync","mpsc","Iter"],"kind":"struct"},"1:6759:2430":{"crate_id":1,"path":["std","std_float","StdFloat"],"kind":"trait"},"5:1372:2003":{"crate_id":5,"path":["alloc","collections","btree","map","IntoIter"],"kind":"struct"},"1:3876:2226":{"crate_id":1,"path":["std","os","unix","ffi","os_str","OsStringExt"],"kind":"trait"},"17:12915:19298":{"crate_id":17,"path":["object","pe","ImageDataDirectory"],"kind":"struct"},"2:22264:167":{"crate_id":2,"path":["core","num","nonzero","NonZeroI16"],"kind":"struct"},"6:6098:12961":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","sigset_t"],"kind":"struct"},"1:8468:2001":{"crate_id":1,"path":["std","path","Iter"],"kind":"struct"},"2:42633:2162":{"crate_id":2,"path":["core","str","iter","Bytes"],"kind":"struct"},"1:8827:2389":{"crate_id":1,"path":["std","sync","mpsc","TryRecvError"],"kind":"enum"},"1:1791:2066":{"crate_id":1,"path":["std","env","VarsOs"],"kind":"struct"},"2:46546:2472":{"crate_id":2,"path":["core","core_arch","simd","f64x8"],"kind":"struct"},"17:12098:18558":{"crate_id":17,"path":["object","macho","PreboundDylibCommand"],"kind":"struct"},"5:5892:2148":{"crate_id":5,"path":["alloc","sync","from_iter_exact","Guard"],"kind":"struct"},"11:1872:2025":{"crate_id":11,"path":["hashbrown","set","Union"],"kind":"struct"},"2:39594:7970":{"crate_id":2,"path":["core","iter","adapters","filter","Filter"],"kind":"struct"},"2:43382:8165":{"crate_id":2,"path":["core","str","IsWhitespace"],"kind":"struct"},"18:652:33780":{"crate_id":18,"path":["memchr","memmem","x86","sse","Forward"],"kind":"struct"},"1:9867:20131":{"crate_id":1,"path":["std","sys","unix","net","Socket"],"kind":"struct"},"16:6164:33063":{"crate_id":16,"path":["gimli","read","cfi","PointerEncodingParameters"],"kind":"struct"},"2:7094:7958":{"crate_id":2,"path":["core","iter","traits","accum","Product"],"kind":"trait"},"11:810:2008":{"crate_id":11,"path":["hashbrown","map","ValuesMut"],"kind":"struct"},"2:21577:27549":{"crate_id":2,"path":["core","num","dec2flt","common","BiasedFp"],"kind":"struct"},"2:9899:2001":{"crate_id":2,"path":["core","slice","iter","Iter"],"kind":"struct"},"2:31782:2351":{"crate_id":2,"path":["core","convert","Infallible"],"kind":"enum"},"2:42001:28259":{"crate_id":2,"path":["core","hash","sip","Sip24Rounds"],"kind":"struct"},"5:0:283":{"crate_id":5,"path":["alloc"],"kind":"module"},"9:0:1755":{"crate_id":9,"path":["miniz_oxide"],"kind":"module"},"5:4311:242":{"crate_id":5,"path":["alloc","collections","vec_deque","VecDeque"],"kind":"struct"},"1:8814:2386":{"crate_id":1,"path":["std","sync","mpsc","RecvError"],"kind":"struct"},"5:6997:2003":{"crate_id":5,"path":["alloc","collections","binary_heap","IntoIter"],"kind":"struct"},"17:13612:19348":{"crate_id":17,"path":["object","pe","ImageHotPatchInfo"],"kind":"struct"},"1:8204:2264":{"crate_id":1,"path":["std","os","unix","net","ancillary","SocketCred"],"kind":"struct"},"2:43637:158":{"crate_id":2,"path":["core","alloc","layout","Layout"],"kind":"struct"},"17:12483:18582":{"crate_id":17,"path":["object","macho","LinkerOptionCommand"],"kind":"struct"},"17:11391:18038":{"crate_id":17,"path":["object","elf","Sym64"],"kind":"struct"},"11:387:32601":{"crate_id":11,"path":["hashbrown","raw","RawIterHash"],"kind":"struct"},"1:1774:601":{"crate_id":1,"path":["std","env"],"kind":"module"},"1:8725:183":{"crate_id":1,"path":["std","process","Output"],"kind":"struct"},"2:12218:189":{"crate_id":2,"path":["core","future","pending","Pending"],"kind":"struct"},"2:2847:8022":{"crate_id":2,"path":["core","ops","bit","Shr"],"kind":"trait"},"2:44311:2496":{"crate_id":2,"path":["core","core_arch","simd","u16x2"],"kind":"struct"},"17:9453:15297":{"crate_id":17,"path":["object","read","archive","MemberHeader"],"kind":"enum"},"1:3402:2133":{"crate_id":1,"path":["std","io","IoSliceMut"],"kind":"struct"},"17:11220:15493":{"crate_id":17,"path":["object","archive","AixMemberOffset"],"kind":"struct"},"5:4356:2148":{"crate_id":5,"path":["alloc","collections","vec_deque","write_iter_wrapping","Guard"],"kind":"struct"},"2:40656:2205":{"crate_id":2,"path":["core","net","socket_addr","SocketAddrV4"],"kind":"struct"},"11:0:1757":{"crate_id":11,"path":["hashbrown"],"kind":"module"},"16:5616:15082":{"crate_id":16,"path":["gimli","read","cfi","ParsedEhFrameHdr"],"kind":"struct"},"16:6179:15102":{"crate_id":16,"path":["gimli","read","dwarf","Dwarf"],"kind":"struct"},"6:568:8790":{"crate_id":6,"path":["libc","unix","sigval"],"kind":"struct"},"18:481:19406":{"crate_id":18,"path":["memchr","cow","CowBytes"],"kind":"struct"},"1:8937:22845":{"crate_id":1,"path":["std","sync","mpmc","list","Position"],"kind":"struct"},"2:46222:2500":{"crate_id":2,"path":["core","core_arch","simd","u16x32"],"kind":"struct"},"2:39364:7782":{"crate_id":2,"path":["core","char","ToUppercase"],"kind":"struct"},"5:3537:2002":{"crate_id":5,"path":["alloc","collections","linked_list","IterMut"],"kind":"struct"},"1:1077:2018":{"crate_id":1,"path":["std","collections","hash","map","VacantEntry"],"kind":"struct"},"1:361:1974":{"crate_id":1,"path":["std","thread","scoped","ScopedJoinHandle"],"kind":"struct"},"1:3061:2192":{"crate_id":1,"path":["std","io","readbuf","BorrowedBuf"],"kind":"struct"},"1:5766:2378":{"crate_id":1,"path":["std","sync","lazy_lock","LazyLock"],"kind":"struct"},"16:2470:14165":{"crate_id":16,"path":["gimli","common","DebugInfoOffset"],"kind":"struct"},"6:1509:9688":{"crate_id":6,"path":["libc","unix","linux_like","in_addr"],"kind":"struct"},"18:644:33780":{"crate_id":18,"path":["memchr","memmem","x86","avx","nostd","Forward"],"kind":"struct"},"1:9971:2076":{"crate_id":1,"path":["std","sys","unix","os","SplitPaths"],"kind":"struct"},"5:853:2028":{"crate_id":5,"path":["alloc","collections","binary_heap","Hole"],"kind":"struct"},"2:40959:90":{"crate_id":2,"path":["core","sync","atomic","AtomicU8"],"kind":"struct"},"2:30598:180":{"crate_id":2,"path":["core","cmp","Ordering"],"kind":"enum"},"1:10922:23434":{"crate_id":1,"path":["std","sys","unix","process","process_inner","do_exec","Reset"],"kind":"struct"},"16:4845:14817":{"crate_id":16,"path":["gimli","constants","DwOrd"],"kind":"struct"},"2:21668:27581":{"crate_id":2,"path":["core","num","flt2dec","decoder","Decoded"],"kind":"struct"},"1:6540:2380":{"crate_id":1,"path":["std","sync","remutex","ReentrantMutex"],"kind":"struct"},"17:11434:18041":{"crate_id":17,"path":["object","elf","Rel32"],"kind":"struct"},"17:11532:18048":{"crate_id":17,"path":["object","elf","Dyn64"],"kind":"struct"},"2:7140:1898":{"crate_id":2,"path":["core","iter","traits","collect","Extend"],"kind":"trait"},"16:2594:14170":{"crate_id":16,"path":["gimli","common","DebugLocListsIndex"],"kind":"struct"},"17:11924:18547":{"crate_id":17,"path":["object","macho","SegmentCommand64"],"kind":"struct"},"2:2751:7575":{"crate_id":2,"path":["core","marker","Tuple"],"kind":"trait"},"11:738:2005":{"crate_id":11,"path":["hashbrown","map","Values"],"kind":"struct"},"16:5386:14126":{"crate_id":16,"path":["gimli","endianity","LittleEndian"],"kind":"struct"},"17:10923:15279":{"crate_id":17,"path":["object","read","ObjectMap"],"kind":"struct"},"6:6818:13353":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user_fpregs_struct"],"kind":"struct"},"2:49000:243":{"crate_id":2,"path":["core","core_simd","fmt","fmt","Wrapper"],"kind":"struct"},"16:5920:15095":{"crate_id":16,"path":["gimli","read","cfi","UnwindContext"],"kind":"struct"},"6:4573:12240":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Ehdr"],"kind":"struct"},"16:6243:33029":{"crate_id":16,"path":["gimli","read","dwarf","RangeIterInner"],"kind":"enum"},"11:632:2001":{"crate_id":11,"path":["hashbrown","map","Iter"],"kind":"struct"},"1:4640:2294":{"crate_id":1,"path":["std","os","linux","process","ChildExt"],"kind":"trait"},"2:43174:7689":{"crate_id":2,"path":["core","str","pattern","CharPredicateSearcher"],"kind":"struct"},"6:4671:12247":{"crate_id":6,"path":["libc","unix","linux_like","linux","mntent"],"kind":"struct"},"17:10465:15446":{"crate_id":17,"path":["object","read","pe","section","PeSegment"],"kind":"struct"},"6:1514:9689":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreq"],"kind":"struct"},"6:7246:13724":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","align","clone_args"],"kind":"struct"},"17:10660:15284":{"crate_id":17,"path":["object","read","pe","relocation","Relocation"],"kind":"struct"},"17:11770:18539":{"crate_id":17,"path":["object","macho","DyldCacheMappingInfo"],"kind":"struct"},"2:2255:104":{"crate_id":2,"path":["core","clone","Clone"],"kind":"trait"},"2:41954:28399":{"crate_id":2,"path":["core","hash","sip","SipHasher24"],"kind":"struct"},"17:1978:15348":{"crate_id":17,"path":["object","read","elf","relocation","ElfSectionRelocationIterator"],"kind":"struct"},"17:10402:15460":{"crate_id":17,"path":["object","read","pe","file","PeFile"],"kind":"struct"},"2:44912:2467":{"crate_id":2,"path":["core","core_arch","simd","f32x4"],"kind":"struct"},"16:6236:15105":{"crate_id":16,"path":["gimli","read","dwarf","RangeIter"],"kind":"struct"},"2:42797:7668":{"crate_id":2,"path":["core","str","iter","MatchIndices"],"kind":"struct"},"16:6544:15124":{"crate_id":16,"path":["gimli","read","line","DebugLine"],"kind":"struct"},"16:7509:15152":{"crate_id":16,"path":["gimli","read","pubtypes","DebugPubTypes"],"kind":"struct"},"2:42647:2163":{"crate_id":2,"path":["core","str","iter","Split"],"kind":"struct"},"2:2681:1891":{"crate_id":2,"path":["core","marker","Sized"],"kind":"trait"},"6:7497:12439":{"crate_id":6,"path":["libc","unix","linux_like","linux","fanotify_event_metadata"],"kind":"struct"},"2:4030:7574":{"crate_id":2,"path":["core","async_iter","async_iter","AsyncIterator"],"kind":"trait"},"1:9174:2082":{"crate_id":1,"path":["std","sys","unix","args","Args"],"kind":"struct"},"2:4239:204":{"crate_id":2,"path":["core","cell","RefCell"],"kind":"struct"},"2:42623:7659":{"crate_id":2,"path":["core","str","iter","CharIndices"],"kind":"struct"},"1:11892:1477":{"crate_id":1,"path":["std","u64"],"kind":"primitive"},"2:38971:1993":{"crate_id":2,"path":["core","ops","range","Bound"],"kind":"enum"},"2:11646:7677":{"crate_id":2,"path":["core","str","pattern","MultiCharEqPattern"],"kind":"struct"},"1:3926:2228":{"crate_id":1,"path":["std","os","unix","fs","PermissionsExt"],"kind":"trait"},"6:4858:12270":{"crate_id":6,"path":["libc","unix","linux_like","linux","in6_ifreq"],"kind":"struct"},"17:13257:19321":{"crate_id":17,"path":["object","pe","ImageBaseRelocation"],"kind":"struct"},"16:6431:15117":{"crate_id":16,"path":["gimli","read","aranges","ArangeEntryIter"],"kind":"struct"},"16:3446:14191":{"crate_id":16,"path":["gimli","arch","RiscV"],"kind":"struct"},"2:9090:7592":{"crate_id":2,"path":["core","fmt","UpperExp"],"kind":"trait"},"16:6662:15127":{"crate_id":16,"path":["gimli","read","line","LineInstructions"],"kind":"struct"},"1:4761:2240":{"crate_id":1,"path":["std","os","fd","owned","AsFd"],"kind":"trait"},"16:5402:14124":{"crate_id":16,"path":["gimli","endianity","BigEndian"],"kind":"struct"},"2:20587:2443":{"crate_id":2,"path":["core","core_simd","elements","float","SimdFloat"],"kind":"trait"},"2:2857:8024":{"crate_id":2,"path":["core","ops","bit","BitOrAssign"],"kind":"trait"},"9:445:13957":{"crate_id":9,"path":["miniz_oxide","MZError"],"kind":"enum"},"2:2946:1896":{"crate_id":2,"path":["core","ops","function","FnOnce"],"kind":"trait"},"17:13763:19359":{"crate_id":17,"path":["object","pe","ImageDebugDirectory"],"kind":"struct"},"17:8632:15228":{"crate_id":17,"path":["object","endian","Endianness"],"kind":"enum"},"17:8667:14124":{"crate_id":17,"path":["object","endian","BigEndian"],"kind":"struct"},"14:0:1759":{"crate_id":14,"path":["rustc_demangle"],"kind":"module"},"14:7:14087":{"crate_id":14,"path":["rustc_demangle","legacy","Demangle"],"kind":"struct"},"1:1988:182":{"crate_id":1,"path":["std","ffi","os_str","OsString"],"kind":"struct"},"2:10196:7640":{"crate_id":2,"path":["core","slice","iter","RSplitN"],"kind":"struct"},"2:44720:2502":{"crate_id":2,"path":["core","core_arch","simd","u32x4"],"kind":"struct"},"17:11109:15287":{"crate_id":17,"path":["object","read","CompressedData"],"kind":"struct"},"2:8774:29045":{"crate_id":2,"path":["core","fmt","builders","PadAdapterState"],"kind":"struct"},"6:4542:12238":{"crate_id":6,"path":["libc","unix","linux_like","linux","dl_phdr_info"],"kind":"struct"},"5:953:31244":{"crate_id":5,"path":["alloc","collections","binary_heap","drop","DropGuard"],"kind":"struct"},"1:7921:22882":{"crate_id":1,"path":["std","io","error","SimpleMessage"],"kind":"struct"},"16:3782:14210":{"crate_id":16,"path":["gimli","constants","DwSectV2"],"kind":"struct"},"2:40869:2001":{"crate_id":2,"path":["core","result","Iter"],"kind":"struct"},"1:11872:411":{"crate_id":1,"path":["std","char"],"kind":"primitive"},"2:39635:7974":{"crate_id":2,"path":["core","iter","adapters","inspect","Inspect"],"kind":"struct"},"1:907:2006":{"crate_id":1,"path":["std","collections","hash","map","Drain"],"kind":"struct"},"5:210:7583":{"crate_id":5,"path":["alloc","boxed","thin","ThinBox"],"kind":"struct"},"2:45970:2511":{"crate_id":2,"path":["core","core_arch","simd","u8x64"],"kind":"struct"},"2:9076:118":{"crate_id":2,"path":["core","fmt","Display"],"kind":"trait"},"6:6688:13344":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_xmmreg"],"kind":"struct"},"2:40885:2003":{"crate_id":2,"path":["core","result","IntoIter"],"kind":"struct"},"1:6588:214":{"crate_id":1,"path":["std","sync","rwlock","RwLock"],"kind":"struct"},"6:5962:12927":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","seminfo"],"kind":"struct"},"6:4848:12269":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_ifru_map"],"kind":"struct"},"9:174:14060":{"crate_id":9,"path":["miniz_oxide","inflate","stream","InflateState"],"kind":"struct"},"2:22198:1965":{"crate_id":2,"path":["core","num","nonzero","NonZeroUsize"],"kind":"struct"},"2:45764:2492":{"crate_id":2,"path":["core","core_arch","simd","i8x64"],"kind":"struct"},"11:1836:2003":{"crate_id":11,"path":["hashbrown","set","IntoIter"],"kind":"struct"},"17:13721:19357":{"crate_id":17,"path":["object","pe","ImageEnclaveConfig64"],"kind":"struct"},"2:9082:7593":{"crate_id":2,"path":["core","fmt","LowerHex"],"kind":"trait"},"2:4243:7750":{"crate_id":2,"path":["core","cell","BorrowError"],"kind":"struct"},"1:10346:23423":{"crate_id":1,"path":["std","sys","unix","stack_overflow","Handler"],"kind":"struct"},"17:12259:18567":{"crate_id":17,"path":["object","macho","DylibModule64"],"kind":"struct"},"9:52:13976":{"crate_id":9,"path":["miniz_oxide","inflate","core","DecompressorOxide"],"kind":"struct"},"6:4780:12260":{"crate_id":6,"path":["libc","unix","linux_like","linux","can_filter"],"kind":"struct"},"1:11082:2392":{"crate_id":1,"path":["std","sys","unix","time","inner","Instant"],"kind":"struct"},"2:9537:29864":{"crate_id":2,"path":["core","slice","sort","merge","MergeHole"],"kind":"struct"},"2:39239:7785":{"crate_id":2,"path":["core","char","convert","ParseCharError"],"kind":"struct"},"17:8443:15252":{"crate_id":17,"path":["object","common","RelocationKind"],"kind":"enum"},"18:96:19381":{"crate_id":18,"path":["memchr","memchr","iter","Memchr2"],"kind":"struct"},"1:1583:2022":{"crate_id":1,"path":["std","collections","hash","set","Intersection"],"kind":"struct"},"2:38861:195":{"crate_id":2,"path":["core","ops","range","Range"],"kind":"struct"},"1:6298:163":{"crate_id":1,"path":["std","sync","mutex","Mutex"],"kind":"struct"},"2:21751:28416":{"crate_id":2,"path":["core","num","fmt","Formatted"],"kind":"struct"},"17:10589:15478":{"crate_id":17,"path":["object","read","pe","import","ImportThunkList"],"kind":"struct"},"1:2388:1769":{"crate_id":1,"path":["std","io"],"kind":"module"},"2:14:1871":{"crate_id":2,"path":["core","write"],"kind":"macro"},"2:9291:139":{"crate_id":2,"path":["core","hash","Hash"],"kind":"trait"},"17:11258:18031":{"crate_id":17,"path":["object","elf","FileHeader64"],"kind":"struct"},"17:13857:19366":{"crate_id":17,"path":["object","pe","ImageArchitectureEntry"],"kind":"struct"},"2:21645:27580":{"crate_id":2,"path":["core","num","dec2flt","FloatErrorKind"],"kind":"enum"},"16:6488:15121":{"crate_id":16,"path":["gimli","read","index","UnitIndex"],"kind":"struct"},"6:5041:12288":{"crate_id":6,"path":["libc","unix","linux_like","linux","hwtstamp_config"],"kind":"struct"},"16:154:14135":{"crate_id":16,"path":["gimli","read","util","ArrayVec"],"kind":"struct"},"17:10516:15440":{"crate_id":17,"path":["object","read","pe","data_directory","DataDirectories"],"kind":"struct"},"6:7485:12437":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_condattr_t"],"kind":"struct"},"17:12799:19294":{"crate_id":17,"path":["object","pe","ImageOs2Header"],"kind":"struct"},"2:40577:28217":{"crate_id":2,"path":["core","net","ip_addr","fmt","Span"],"kind":"struct"},"1:10703:2132":{"crate_id":1,"path":["std","sys","unix","io","IoSlice"],"kind":"struct"},"16:5643:15084":{"crate_id":16,"path":["gimli","read","cfi","EhHdrTable"],"kind":"struct"},"1:11871:926":{"crate_id":1,"path":["std","never"],"kind":"primitive"},"17:10125:15407":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandData"],"kind":"struct"},"2:43563:202":{"crate_id":2,"path":["core","future","ready","Ready"],"kind":"struct"},"17:11800:18541":{"crate_id":17,"path":["object","macho","DyldSubCacheInfo"],"kind":"struct"},"1:4855:2293":{"crate_id":1,"path":["std","os","net","linux_ext","tcp","TcpStreamExt"],"kind":"trait"},"1:11672:21984":{"crate_id":1,"path":["std","backtrace_rs","symbolize","gimli","mmap","Mmap"],"kind":"struct"},"16:2404:14162":{"crate_id":16,"path":["gimli","common","DebugAddrBase"],"kind":"struct"},"17:11410:18039":{"crate_id":17,"path":["object","elf","Syminfo32"],"kind":"struct"},"2:20418:29758":{"crate_id":2,"path":["core","core_simd","swizzle","rotate_lanes_right","Rotate"],"kind":"struct"},"5:1422:2009":{"crate_id":5,"path":["alloc","collections","btree","map","IntoKeys"],"kind":"struct"},"17:8360:15249":{"crate_id":17,"path":["object","common","ComdatKind"],"kind":"enum"},"2:39534:2056":{"crate_id":2,"path":["core","iter","adapters","by_ref_sized","ByRefSized"],"kind":"struct"},"18:624:33792":{"crate_id":18,"path":["memchr","memmem","twoway","SuffixOrdering"],"kind":"enum"},"16:7697:15163":{"crate_id":16,"path":["gimli","read","str","DebugLineStr"],"kind":"struct"},"7:32:13929":{"crate_id":7,"path":["unwind","libunwind","_Unwind_Reason_Code"],"kind":"enum"},"16:55:14125":{"crate_id":16,"path":["gimli","endianity","Endianity"],"kind":"trait"},"17:13426:19336":{"crate_id":17,"path":["object","pe","ImageResourceDirStringU"],"kind":"struct"},"5:35:2061":{"crate_id":5,"path":["alloc","raw_vec","RawVec"],"kind":"struct"},"5:1304:93":{"crate_id":5,"path":["alloc","collections","btree","map","BTreeMap"],"kind":"struct"},"1:917:2007":{"crate_id":1,"path":["std","collections","hash","map","DrainFilter"],"kind":"struct"},"11:1866:2024":{"crate_id":11,"path":["hashbrown","set","SymmetricDifference"],"kind":"struct"},"2:7524:7957":{"crate_id":2,"path":["core","iter","traits","marker","TrustedStep"],"kind":"trait"},"16:5367:14128":{"crate_id":16,"path":["gimli","endianity","RunTimeEndian"],"kind":"enum"},"18:766:19397":{"crate_id":18,"path":["memchr","memmem","SearcherRevKind"],"kind":"enum"},"5:6988:2048":{"crate_id":5,"path":["alloc","alloc","Global"],"kind":"struct"},"17:9772:15331":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbolTable"],"kind":"struct"},"1:8209:2265":{"crate_id":1,"path":["std","os","unix","net","ancillary","AncillaryError"],"kind":"enum"},"2:50296:28216":{"crate_id":2,"path":["core","core_simd","vector","ptr","SimdMutPtr"],"kind":"struct"},"16:5594:15081":{"crate_id":16,"path":["gimli","read","cfi","EhFrameHdr"],"kind":"struct"},"1:537:1955":{"crate_id":1,"path":["std","thread","Packet"],"kind":"struct"},"16:4818:14814":{"crate_id":16,"path":["gimli","constants","DwInl"],"kind":"struct"},"1:8160:2200":{"crate_id":1,"path":["std","net","Shutdown"],"kind":"enum"},"2:2767:2425":{"crate_id":2,"path":["core","ops","arith","Add"],"kind":"trait"},"17:11653:18057":{"crate_id":17,"path":["object","elf","GnuHashHeader"],"kind":"struct"},"16:6935:15137":{"crate_id":16,"path":["gimli","read","loclists","RawLocListIter"],"kind":"struct"},"2:42715:7672":{"crate_id":2,"path":["core","str","iter","RSplitTerminator"],"kind":"struct"},"16:7467:15148":{"crate_id":16,"path":["gimli","read","pubnames","PubNamesEntry"],"kind":"struct"},"1:7787:2130":{"crate_id":1,"path":["std","fs","FileTimes"],"kind":"struct"},"2:40682:178":{"crate_id":2,"path":["core","option","Option"],"kind":"enum"},"17:13219:19317":{"crate_id":17,"path":["object","pe","ImageAuxSymbolSection"],"kind":"struct"},"1:1571:2003":{"crate_id":1,"path":["std","collections","hash","set","IntoIter"],"kind":"struct"},"2:31822:8077":{"crate_id":2,"path":["core","error","Source"],"kind":"struct"},"1:7780:2126":{"crate_id":1,"path":["std","fs","OpenOptions"],"kind":"struct"},"17:8683:15232":{"crate_id":17,"path":["object","endian","U16Bytes"],"kind":"struct"},"2:7090:7959":{"crate_id":2,"path":["core","iter","traits","accum","Sum"],"kind":"trait"},"1:3384:2134":{"crate_id":1,"path":["std","io","Read"],"kind":"trait"},"17:9545:15305":{"crate_id":17,"path":["object","read","coff","section","CoffSection"],"kind":"struct"},"17:10052:15408":{"crate_id":17,"path":["object","read","macho","file","MachOFile"],"kind":"struct"},"18:660:19398":{"crate_id":18,"path":["memchr","memmem","FindIter"],"kind":"struct"},"17:9566:15268":{"crate_id":17,"path":["object","read","coff","symbol","SymbolIterator"],"kind":"struct"},"2:7517:2031":{"crate_id":2,"path":["core","iter","traits","marker","FusedIterator"],"kind":"trait"},"9:502:13960":{"crate_id":9,"path":["miniz_oxide","StreamResult"],"kind":"struct"},"17:9670:15328":{"crate_id":17,"path":["object","read","elf","segment","ElfSegmentIterator"],"kind":"struct"},"17:10798:15273":{"crate_id":17,"path":["object","read","ObjectKind"],"kind":"enum"},"17:13135:19310":{"crate_id":17,"path":["object","pe","ImageSymbolBytes"],"kind":"struct"},"2:1808:2044":{"crate_id":2,"path":["core","ptr","non_null","NonNull"],"kind":"struct"},"16:535:32727":{"crate_id":16,"path":["gimli","read","cfi","RegisterRuleMap"],"kind":"struct"},"1:7659:2021":{"crate_id":1,"path":["std","collections","hash","map","DefaultHasher"],"kind":"struct"},"17:2933:15390":{"crate_id":17,"path":["object","read","macho","section","MachOSectionIterator"],"kind":"struct"},"5:7319:2007":{"crate_id":5,"path":["alloc","vec","drain_filter","DrainFilter"],"kind":"struct"},"16:5418:33030":{"crate_id":16,"path":["gimli","read","util","sealed","CapacityFull"],"kind":"struct"},"2:39712:7979":{"crate_id":2,"path":["core","iter","adapters","skip","Skip"],"kind":"struct"},"6:4953:12280":{"crate_id":6,"path":["libc","unix","linux_like","linux","dirent64"],"kind":"struct"},"2:42453:7628":{"crate_id":2,"path":["core","slice","iter","ChunksExact"],"kind":"struct"},"16:2337:14159":{"crate_id":16,"path":["gimli","common","LineEncoding"],"kind":"struct"},"1:3940:2230":{"crate_id":1,"path":["std","os","unix","fs","MetadataExt"],"kind":"trait"},"1:508:1950":{"crate_id":1,"path":["std","thread","PanicGuard"],"kind":"struct"},"16:3225:14189":{"crate_id":16,"path":["gimli","arch","AArch64"],"kind":"struct"},"16:3047:14187":{"crate_id":16,"path":["gimli","common","DwarfFileType"],"kind":"enum"},"2:45056:27524":{"crate_id":2,"path":["core","core_arch","simd","m16x8"],"kind":"struct"},"17:13385:19332":{"crate_id":17,"path":["object","pe","ImageDelayloadDescriptor"],"kind":"struct"},"5:1403:2005":{"crate_id":5,"path":["alloc","collections","btree","map","Values"],"kind":"struct"},"17:9340:15270":{"crate_id":17,"path":["object","read","any","SectionRelocationIterator"],"kind":"struct"},"17:10452:15447":{"crate_id":17,"path":["object","read","pe","section","PeSegmentIterator"],"kind":"struct"},"6:7543:12445":{"crate_id":6,"path":["libc","unix","linux_like","linux","canfd_frame"],"kind":"struct"},"16:4400:14684":{"crate_id":16,"path":["gimli","constants","DwForm"],"kind":"struct"},"18:507:33780":{"crate_id":18,"path":["memchr","memmem","genericsimd","Forward"],"kind":"struct"},"17:11832:15434":{"crate_id":17,"path":["object","macho","FatArch64"],"kind":"struct"},"16:4872:14820":{"crate_id":16,"path":["gimli","constants","DwDsc"],"kind":"struct"},"17:13678:19354":{"crate_id":17,"path":["object","pe","ImageAlphaRuntimeFunctionEntry"],"kind":"struct"},"16:2426:14163":{"crate_id":16,"path":["gimli","common","DebugAddrIndex"],"kind":"struct"},"17:8979:33620":{"crate_id":17,"path":["object","read","any","FileInternal"],"kind":"enum"},"1:3133:25620":{"crate_id":1,"path":["std","io","stdio","StdoutRaw"],"kind":"struct"},"1:8914:19918":{"crate_id":1,"path":["std","sync","mpmc","error","SendTimeoutError"],"kind":"enum"},"5:7239:221":{"crate_id":5,"path":["alloc","string","String"],"kind":"struct"},"2:21272:2431":{"crate_id":2,"path":["core","core_simd","vector","Simd"],"kind":"struct"},"16:7029:33096":{"crate_id":16,"path":["gimli","read","lookup","LookupEntryIter"],"kind":"struct"},"17:11946:18548":{"crate_id":17,"path":["object","macho","Section32"],"kind":"struct"},"1:11384:2212":{"crate_id":1,"path":["std","sys_common","net","UdpSocket"],"kind":"struct"},"17:13233:19318":{"crate_id":17,"path":["object","pe","ImageAuxSymbolCrc"],"kind":"struct"},"1:850:2001":{"crate_id":1,"path":["std","collections","hash","map","Iter"],"kind":"struct"},"6:5786:12915":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","msghdr"],"kind":"struct"},"9:388:13958":{"crate_id":9,"path":["miniz_oxide","MZFlush"],"kind":"enum"},"18:113:19382":{"crate_id":18,"path":["memchr","memchr","iter","Memchr3"],"kind":"struct"},"17:420:14132":{"crate_id":17,"path":["object","read","any","Section"],"kind":"struct"},"6:4624:12244":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Phdr"],"kind":"struct"},"1:7682:2086":{"crate_id":1,"path":["std","env","JoinPathsError"],"kind":"struct"},"6:1652:9703":{"crate_id":6,"path":["libc","unix","linux_like","ifaddrs"],"kind":"struct"},"6:532:8785":{"crate_id":6,"path":["libc","unix","hostent"],"kind":"struct"},"16:7016:33093":{"crate_id":16,"path":["gimli","read","lookup","DebugLookup"],"kind":"struct"},"1:5356:2340":{"crate_id":1,"path":["std","process","ChildStdout"],"kind":"struct"},"16:5000:14852":{"crate_id":16,"path":["gimli","constants","DwLne"],"kind":"struct"},"5:7079:2003":{"crate_id":5,"path":["alloc","collections","linked_list","IntoIter"],"kind":"struct"},"17:10039:15386":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCacheImage"],"kind":"struct"},"2:43378:8161":{"crate_id":2,"path":["core","str","CharEscapeDefault"],"kind":"struct"},"2:2674:217":{"crate_id":2,"path":["core","marker","Send"],"kind":"trait"},"17:13240:19319":{"crate_id":17,"path":["object","pe","ImageRelocation"],"kind":"struct"},"6:1695:9707":{"crate_id":6,"path":["libc","unix","linux_like","arphdr"],"kind":"struct"},"2:42697:7673":{"crate_id":2,"path":["core","str","iter","SplitTerminator"],"kind":"struct"},"5:3765:31244":{"crate_id":5,"path":["alloc","collections","linked_list","drop","DropGuard"],"kind":"struct"},"2:40800:2311":{"crate_id":2,"path":["core","panic","panic_info","PanicInfo"],"kind":"struct"},"1:8253:2297":{"crate_id":1,"path":["std","os","linux","raw","arch","stat"],"kind":"struct"},"1:4682:2245":{"crate_id":1,"path":["std","os","fd","raw","FromRawFd"],"kind":"trait"},"6:7431:13884":{"crate_id":6,"path":["libc","unix","linux_like","linux","arch","generic","termios2"],"kind":"struct"},"5:1068:31419":{"crate_id":5,"path":["alloc","collections","btree","dedup_sorted_iter","DedupSortedIter"],"kind":"struct"},"1:8113:2160":{"crate_id":1,"path":["std","io","Chain"],"kind":"struct"},"6:1571:9696":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_ll"],"kind":"struct"},"2:2763:7990":{"crate_id":2,"path":["core","marker","FnPtr"],"kind":"trait"},"16:6351:15112":{"crate_id":16,"path":["gimli","read","abbrev","Attributes"],"kind":"enum"},"5:7162:101":{"crate_id":5,"path":["alloc","ffi","c_str","CString"],"kind":"struct"},"16:6146:191":{"crate_id":16,"path":["gimli","read","cfi","Pointer"],"kind":"enum"},"16:5571:15080":{"crate_id":16,"path":["gimli","read","cfi","DebugFrame"],"kind":"struct"},"16:2524:14167":{"crate_id":16,"path":["gimli","common","DebugLineStrOffset"],"kind":"struct"},"1:2347:2113":{"crate_id":1,"path":["std","fs","symlink_metadata"],"kind":"function"},"1:8949:22125":{"crate_id":1,"path":["std","sync","mpmc","select","Token"],"kind":"struct"},"15:0:1760":{"crate_id":15,"path":["addr2line"],"kind":"module"},"2:2788:8013":{"crate_id":2,"path":["core","ops","arith","Rem"],"kind":"trait"},"1:11452:24135":{"crate_id":1,"path":["std","personality","dwarf","eh","EHContext"],"kind":"struct"},"1:8064:2189":{"crate_id":1,"path":["std","io","util","Empty"],"kind":"struct"},"17:12622:15284":{"crate_id":17,"path":["object","macho","Relocation"],"kind":"struct"},"2:40818:190":{"crate_id":2,"path":["core","pin","Pin"],"kind":"struct"},"6:4796:12262":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_filter"],"kind":"struct"},"1:4509:2285":{"crate_id":1,"path":["std","os","unix","thread","JoinHandleExt"],"kind":"trait"},"17:12576:18589":{"crate_id":17,"path":["object","macho","NoteCommand"],"kind":"struct"},"16:4568:14732":{"crate_id":16,"path":["gimli","constants","DwAccess"],"kind":"struct"},"11:861:2015":{"crate_id":11,"path":["hashbrown","map","RawEntryBuilder"],"kind":"struct"},"16:2967:14185":{"crate_id":16,"path":["gimli","common","SectionId"],"kind":"enum"},"2:44419:2497":{"crate_id":2,"path":["core","core_arch","simd","u16x4"],"kind":"struct"},"2:42591:7666":{"crate_id":2,"path":["core","str","error","Utf8Error"],"kind":"struct"},"1:5558:203":{"crate_id":1,"path":["std","sync","mpsc","Receiver"],"kind":"struct"},"2:43442:2429":{"crate_id":2,"path":["core","time","TryFromFloatSecsError"],"kind":"struct"},"2:43573:208":{"crate_id":2,"path":["core","future","ResumeTy"],"kind":"struct"},"17:1919:15364":{"crate_id":17,"path":["object","read","elf","relocation","ElfRelaIterator"],"kind":"enum"},"2:9088:7591":{"crate_id":2,"path":["core","fmt","LowerExp"],"kind":"trait"},"16:3030:14186":{"crate_id":16,"path":["gimli","common","DwoId"],"kind":"struct"},"1:8130:2162":{"crate_id":1,"path":["std","io","Bytes"],"kind":"struct"},"17:11372:18037":{"crate_id":17,"path":["object","elf","Sym32"],"kind":"struct"},"17:9596:15309":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbol"],"kind":"struct"},"17:10068:15429":{"crate_id":17,"path":["object","read","macho","file","MachOComdatIterator"],"kind":"struct"},"1:11477:14114":{"crate_id":1,"path":["std","backtrace_rs","backtrace","Frame"],"kind":"struct"},"1:11363:2210":{"crate_id":1,"path":["std","sys_common","net","TcpListener"],"kind":"struct"},"9:481:13956":{"crate_id":9,"path":["miniz_oxide","DataFormat"],"kind":"enum"},"17:10440:15474":{"crate_id":17,"path":["object","read","pe","file","PeComdatSectionIterator"],"kind":"struct"},"1:11186:19932":{"crate_id":1,"path":["std","sys_common","wtf8","CodePoint"],"kind":"struct"},"17:8573:15256":{"crate_id":17,"path":["object","common","SectionFlags"],"kind":"enum"},"5:5697:2006":{"crate_id":5,"path":["alloc","string","Drain"],"kind":"struct"},"16:7244:33102":{"crate_id":16,"path":["gimli","read","op","OperationEvaluationResult"],"kind":"enum"},"2:39996:7953":{"crate_id":2,"path":["core","iter","sources","repeat_n","RepeatN"],"kind":"struct"},"1:5372:2341":{"crate_id":1,"path":["std","process","ChildStderr"],"kind":"struct"},"1:0:1372":{"crate_id":1,"path":["std"],"kind":"module"},"5:1032:31418":{"crate_id":5,"path":["alloc","collections","btree","append","MergeIter"],"kind":"struct"},"16:5998:15099":{"crate_id":16,"path":["gimli","read","cfi","CfaRule"],"kind":"enum"},"5:1356:2002":{"crate_id":5,"path":["alloc","collections","btree","map","IterMut"],"kind":"struct"},"11:1859:2023":{"crate_id":11,"path":["hashbrown","set","Difference"],"kind":"struct"},"15:219:14110":{"crate_id":15,"path":["addr2line","RangeAttributes"],"kind":"struct"},"2:11600:7648":{"crate_id":2,"path":["core","str","pattern","DoubleEndedSearcher"],"kind":"trait"},"1:8882:2371":{"crate_id":1,"path":["std","sync","condvar","WaitTimeoutResult"],"kind":"struct"},"2:42555:7636":{"crate_id":2,"path":["core","slice","iter","RChunksExactMut"],"kind":"struct"},"6:4492:12232":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_periodic_effect"],"kind":"struct"},"16:6868:32679":{"crate_id":16,"path":["gimli","read","lists","ListsHeader"],"kind":"struct"},"2:2940:1894":{"crate_id":2,"path":["core","ops","function","Fn"],"kind":"trait"},"2:43068:7685":{"crate_id":2,"path":["core","str","pattern","MultiCharEqSearcher"],"kind":"struct"},"17:12461:18581":{"crate_id":17,"path":["object","macho","DyldInfoCommand"],"kind":"struct"},"17:8548:15255":{"crate_id":17,"path":["object","common","SegmentFlags"],"kind":"enum"},"2:12367:105":{"crate_id":2,"path":["core","task","wake","Context"],"kind":"struct"},"1:10127:2353":{"crate_id":1,"path":["std","sys","unix","pipe","AnonPipe"],"kind":"struct"},"16:2742:14176":{"crate_id":16,"path":["gimli","common","DebugRngListsIndex"],"kind":"struct"},"2:41962:7812":{"crate_id":2,"path":["core","hash","sip","SipHasher"],"kind":"struct"},"2:9554:23437":{"crate_id":2,"path":["core","slice","sort","merge_sort","BufGuard"],"kind":"struct"},"16:6506:15122":{"crate_id":16,"path":["gimli","read","index","UnitIndexSectionIterator"],"kind":"struct"},"1:10693:117":{"crate_id":1,"path":["std","sys","unix","fs","DirBuilder"],"kind":"struct"},"6:6139:12963":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","semid_ds"],"kind":"struct"},"2:45314:2503":{"crate_id":2,"path":["core","core_arch","simd","u32x8"],"kind":"struct"},"5:1453:2039":{"crate_id":5,"path":["alloc","collections","btree","map","RangeMut"],"kind":"struct"},"2:2345:186":{"crate_id":2,"path":["core","cmp","PartialOrd"],"kind":"trait"},"17:9265:15268":{"crate_id":17,"path":["object","read","any","SymbolIterator"],"kind":"struct"},"1:8123:2161":{"crate_id":1,"path":["std","io","Take"],"kind":"struct"},"1:6371:1988":{"crate_id":1,"path":["std","sync","once","Once"],"kind":"struct"},"1:11440:7562":{"crate_id":1,"path":["std","alloc","System"],"kind":"struct"},"1:4257:2263":{"crate_id":1,"path":["std","os","unix","net","listener","UnixListener"],"kind":"struct"},"1:8143:2159":{"crate_id":1,"path":["std","io","Lines"],"kind":"struct"},"16:2572:14169":{"crate_id":16,"path":["gimli","common","DebugLocListsBase"],"kind":"struct"},"2:45268:2499":{"crate_id":2,"path":["core","core_arch","simd","u16x16"],"kind":"struct"},"5:4197:2001":{"crate_id":5,"path":["alloc","collections","vec_deque","iter","Iter"],"kind":"struct"},"6:1645:9702":{"crate_id":6,"path":["libc","unix","linux_like","in_pktinfo"],"kind":"struct"},"2:39224:1978":{"crate_id":2,"path":["core","ascii","EscapeDefault"],"kind":"struct"},"2:30034:8003":{"crate_id":2,"path":["core","mem","transmutability","Assume"],"kind":"struct"},"2:40750:2002":{"crate_id":2,"path":["core","option","IterMut"],"kind":"struct"},"2:41441:7584":{"crate_id":2,"path":["core","fmt","num","Binary"],"kind":"struct"},"2:30064:27547":{"crate_id":2,"path":["core","ptr","alignment","AlignmentEnum16"],"kind":"enum"},"5:3743:2007":{"crate_id":5,"path":["alloc","collections","linked_list","DrainFilter"],"kind":"struct"},"17:10989:15282":{"crate_id":17,"path":["object","read","Export"],"kind":"struct"},"16:3749:14201":{"crate_id":16,"path":["gimli","constants","DwSect"],"kind":"struct"},"11:2198:32608":{"crate_id":11,"path":["hashbrown","raw","TableLayout"],"kind":"struct"},"1:10683:128":{"crate_id":1,"path":["std","sys","unix","fs","FileType"],"kind":"struct"},"1:8485:2332":{"crate_id":1,"path":["std","path","StripPrefixError"],"kind":"struct"},"6:4681:12248":{"crate_id":6,"path":["libc","unix","linux_like","linux","posix_spawn_file_actions_t"],"kind":"struct"},"1:4105:2259":{"crate_id":1,"path":["std","os","unix","net","ancillary","ScmCredentials"],"kind":"struct"},"1:11877:1350":{"crate_id":1,"path":["std","slice"],"kind":"primitive"},"16:6793:15131":{"crate_id":16,"path":["gimli","read","line","CompleteLineProgram"],"kind":"struct"},"16:2298:14130":{"crate_id":16,"path":["gimli","common","Format"],"kind":"enum"},"2:39350:7664":{"crate_id":2,"path":["core","char","EscapeDebug"],"kind":"struct"},"2:39328:1978":{"crate_id":2,"path":["core","char","EscapeDefault"],"kind":"struct"},"2:46424:2469":{"crate_id":2,"path":["core","core_arch","simd","f32x16"],"kind":"struct"},"6:5735:12910":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","statx_timestamp"],"kind":"struct"},"17:9488:15313":{"crate_id":17,"path":["object","read","coff","file","CoffFile"],"kind":"struct"},"6:1677:9705":{"crate_id":6,"path":["libc","unix","linux_like","arpreq"],"kind":"struct"},"11:60:32597":{"crate_id":11,"path":["hashbrown","raw","bitmask","BitMaskIter"],"kind":"struct"},"11:659:2003":{"crate_id":11,"path":["hashbrown","map","IntoIter"],"kind":"struct"},"2:43370:8160":{"crate_id":2,"path":["core","str","CharEscapeDebugContinue"],"kind":"struct"},"1:4177:2262":{"crate_id":1,"path":["std","os","unix","net","datagram","UnixDatagram"],"kind":"struct"},"1:8781:2391":{"crate_id":1,"path":["std","sync","mpsc","TryIter"],"kind":"struct"},"1:9027:216":{"crate_id":1,"path":["std","sync","rwlock","RwLockWriteGuard"],"kind":"struct"},"16:7335:33052":{"crate_id":16,"path":["gimli","read","op","EvaluationWaiting"],"kind":"enum"},"17:9322:33767":{"crate_id":17,"path":["object","read","any","DynamicRelocationIteratorInternal"],"kind":"enum"},"17:9498:15312":{"crate_id":17,"path":["object","read","coff","section","SectionTable"],"kind":"struct"},"17:242:33772":{"crate_id":17,"path":["object","read","util","DebugByte"],"kind":"struct"},"17:10545:15282":{"crate_id":17,"path":["object","read","pe","export","Export"],"kind":"struct"},"17:12178:18563":{"crate_id":17,"path":["object","macho","SymtabCommand"],"kind":"struct"},"2:6906:2361":{"crate_id":2,"path":["core","iter","sources","once","once"],"kind":"function"},"6:4935:12278":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_nl"],"kind":"struct"},"6:4554:12239":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Ehdr"],"kind":"struct"},"6:4873:12271":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_initmsg"],"kind":"struct"},"17:9886:15350":{"crate_id":17,"path":["object","read","elf","hash","HashTable"],"kind":"struct"},"5:7058:30121":{"crate_id":5,"path":["alloc","collections","btree","set_val","SetValZST"],"kind":"struct"},"18:707:7651":{"crate_id":18,"path":["memchr","memmem","Searcher"],"kind":"struct"},"16:3815:14219":{"crate_id":16,"path":["gimli","constants","DwUt"],"kind":"struct"},"5:7050:195":{"crate_id":5,"path":["alloc","collections","btree","set","Range"],"kind":"struct"},"2:20856:2242":{"crate_id":2,"path":["core","core_simd","masks","sealed","Sealed"],"kind":"trait"},"5:2902:31238":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Mut"],"kind":"struct"},"2:41279:91":{"crate_id":2,"path":["core","sync","atomic","AtomicUsize"],"kind":"struct"},"2:46593:7547":{"crate_id":2,"path":["core","core_arch","x86","__m256i"],"kind":"struct"},"2:2682:7576":{"crate_id":2,"path":["core","marker","Unsize"],"kind":"trait"},"17:8858:15261":{"crate_id":17,"path":["object","endian","I64Bytes"],"kind":"struct"},"6:1663:9704":{"crate_id":6,"path":["libc","unix","linux_like","in6_rtmsg"],"kind":"struct"},"2:6514:7960":{"crate_id":2,"path":["core","iter","adapters","zip","zip"],"kind":"function"},"2:4098:7762":{"crate_id":2,"path":["core","cell","lazy","LazyCell"],"kind":"struct"},"5:1048:31237":{"crate_id":5,"path":["alloc","collections","btree","borrow","DormantMutRef"],"kind":"struct"},"1:863:2002":{"crate_id":1,"path":["std","collections","hash","map","IterMut"],"kind":"struct"},"11:1681:142":{"crate_id":11,"path":["hashbrown","set","HashSet"],"kind":"struct"},"1:11894:780":{"crate_id":1,"path":["std","isize"],"kind":"primitive"},"6:1747:9712":{"crate_id":6,"path":["libc","unix","linux_like","sigevent"],"kind":"struct"},"2:42869:7671":{"crate_id":2,"path":["core","str","iter","RMatches"],"kind":"struct"},"6:4915:12275":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_nxtinfo"],"kind":"struct"},"16:6767:15130":{"crate_id":16,"path":["gimli","read","line","IncompleteLineProgram"],"kind":"struct"},"18:564:19411":{"crate_id":18,"path":["memchr","memmem","rarebytes","RareNeedleBytes"],"kind":"struct"},"2:43082:7686":{"crate_id":2,"path":["core","str","pattern","CharArraySearcher"],"kind":"struct"},"17:9218:15267":{"crate_id":17,"path":["object","read","any","SymbolTable"],"kind":"struct"},"6:595:8794":{"crate_id":6,"path":["libc","unix","protoent"],"kind":"struct"},"2:39334:7780":{"crate_id":2,"path":["core","char","EscapeDefaultState"],"kind":"enum"},"2:2977:7579":{"crate_id":2,"path":["core","ops","generator","Generator"],"kind":"trait"},"1:10619:2296":{"crate_id":1,"path":["std","sys","unix","fd","FileDesc"],"kind":"struct"},"1:9017:164":{"crate_id":1,"path":["std","sync","mutex","MutexGuard"],"kind":"struct"},"1:682:1984":{"crate_id":1,"path":["std","backtrace","LazilyResolvedCapture"],"kind":"struct"},"17:9721:15326":{"crate_id":17,"path":["object","read","elf","section","ElfSectionIterator"],"kind":"struct"},"6:5797:12916":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","cmsghdr"],"kind":"struct"},"17:13041:19305":{"crate_id":17,"path":["object","pe","Guid"],"kind":"struct"},"6:5831:12879":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","mallinfo2"],"kind":"struct"},"6:4360:12216":{"crate_id":6,"path":["libc","unix","linux_like","linux","fsid_t"],"kind":"struct"},"2:43211:7690":{"crate_id":2,"path":["core","str","pattern","StrSearcher"],"kind":"struct"},"2:41691:67":{"crate_id":2,"path":["core","fmt","rt","Alignment"],"kind":"enum"},"6:500:8782":{"crate_id":6,"path":["libc","unix","rlimit"],"kind":"struct"},"16:6728:15129":{"crate_id":16,"path":["gimli","read","line","LineProgramHeader"],"kind":"struct"},"2:2772:2427":{"crate_id":2,"path":["core","ops","arith","Sub"],"kind":"trait"},"5:5819:8380":{"crate_id":5,"path":["alloc","sync","ArcInner"],"kind":"struct"},"2:2782:8010":{"crate_id":2,"path":["core","ops","arith","Div"],"kind":"trait"},"2:20675:2434":{"crate_id":2,"path":["core","core_simd","eq","SimdPartialEq"],"kind":"trait"},"1:7524:23440":{"crate_id":1,"path":["std","backtrace_rs","Bomb"],"kind":"struct"},"17:12059:18555":{"crate_id":17,"path":["object","macho","SubClientCommand"],"kind":"struct"},"6:4715:12252":{"crate_id":6,"path":["libc","unix","linux_like","linux","arpd_request"],"kind":"struct"},"2:11348:8168":{"crate_id":2,"path":["core","str","iter","MatchIndicesInternal"],"kind":"struct"},"5:6724:31272":{"crate_id":5,"path":["alloc","vec","retain_mut","BackshiftOnDrop"],"kind":"struct"},"6:6712:13346":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user_regs_struct"],"kind":"struct"},"2:2806:8015":{"crate_id":2,"path":["core","ops","arith","MulAssign"],"kind":"trait"},"1:11882:633":{"crate_id":1,"path":["std","f32"],"kind":"primitive"},"1:8155:2208":{"crate_id":1,"path":["std","net","tcp","IntoIncoming"],"kind":"struct"},"6:4924:12276":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_prinfo"],"kind":"struct"},"17:9534:15306":{"crate_id":17,"path":["object","read","coff","section","CoffSectionIterator"],"kind":"struct"},"11:777:14074":{"crate_id":11,"path":["hashbrown","map","ConsumeAllOnDrop"],"kind":"struct"},"17:13777:19360":{"crate_id":17,"path":["object","pe","ImageCoffSymbolsHeader"],"kind":"struct"},"2:8287:7649":{"crate_id":2,"path":["core","panicking","assert_matches_failed","Pattern"],"kind":"struct"},"5:3965:2006":{"crate_id":5,"path":["alloc","collections","vec_deque","drain","Drain"],"kind":"struct"},"2:40877:2002":{"crate_id":2,"path":["core","result","IterMut"],"kind":"struct"},"2:41746:67":{"crate_id":2,"path":["core","fmt","Alignment"],"kind":"enum"},"1:2551:23437":{"crate_id":1,"path":["std","io","buffered","bufwriter","flush_buf","BufGuard"],"kind":"struct"},"17:12072:18556":{"crate_id":17,"path":["object","macho","SubUmbrellaCommand"],"kind":"struct"},"1:5504:2346":{"crate_id":1,"path":["std","process","Termination"],"kind":"trait"},"2:39409:2104":{"crate_id":2,"path":["core","ffi","c_str","FromBytesWithNulError"],"kind":"struct"},"17:11339:18035":{"crate_id":17,"path":["object","elf","CompressionHeader32"],"kind":"struct"},"2:38927:198":{"crate_id":2,"path":["core","ops","range","RangeInclusive"],"kind":"struct"},"8:0:1754":{"crate_id":8,"path":["cfg_if"],"kind":"module"},"17:9796:15329":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbol"],"kind":"struct"},"2:44866:2482":{"crate_id":2,"path":["core","core_arch","simd","i32x4"],"kind":"struct"},"2:20435:29962":{"crate_id":2,"path":["core","core_simd","swizzle","interleave","Lo"],"kind":"struct"},"11:1120:14078":{"crate_id":11,"path":["hashbrown","map","VacantEntryRef"],"kind":"struct"},"6:5983:12929":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_entry"],"kind":"struct"},"2:39556:7961":{"crate_id":2,"path":["core","iter","adapters","cloned","Cloned"],"kind":"struct"},"6:6639:9629":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statfs64"],"kind":"struct"},"1:7686:22673":{"crate_id":1,"path":["std","error","private","Internal"],"kind":"struct"},"6:587:8793":{"crate_id":6,"path":["libc","unix","servent"],"kind":"struct"},"2:45087:27489":{"crate_id":2,"path":["core","core_arch","simd","m32x4"],"kind":"struct"},"1:7648:1986":{"crate_id":1,"path":["std","backtrace","RawFrame"],"kind":"enum"},"16:5944:15096":{"crate_id":16,"path":["gimli","read","cfi","UnwindTable"],"kind":"struct"},"17:13821:19364":{"crate_id":17,"path":["object","pe","ImageSeparateDebugHeader"],"kind":"struct"},"17:10478:15445":{"crate_id":17,"path":["object","read","pe","section","PeSectionIterator"],"kind":"struct"},"17:12282:18568":{"crate_id":17,"path":["object","macho","DylibReference"],"kind":"struct"},"14:31:14087":{"crate_id":14,"path":["rustc_demangle","v0","Demangle"],"kind":"struct"},"2:4420:7760":{"crate_id":2,"path":["core","cell","SyncUnsafeCell"],"kind":"struct"},"1:7017:25456":{"crate_id":1,"path":["std","sys_common","wstr","WStrUnits"],"kind":"struct"},"1:3130:22376":{"crate_id":1,"path":["std","io","stdio","StdinRaw"],"kind":"struct"},"6:4482:12231":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_condition_effect"],"kind":"struct"},"6:554:8788":{"crate_id":6,"path":["libc","unix","winsize"],"kind":"struct"},"6:5996:12931":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_seccomp"],"kind":"struct"},"6:4469:12229":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_constant_effect"],"kind":"struct"},"1:5695:2369":{"crate_id":1,"path":["std","sync","barrier","BarrierWaitResult"],"kind":"struct"},"17:13015:19302":{"crate_id":17,"path":["object","pe","ImageNtHeaders64"],"kind":"struct"},"17:10080:15430":{"crate_id":17,"path":["object","read","macho","file","MachOComdat"],"kind":"struct"},"1:10215:23327":{"crate_id":1,"path":["std","sys","unix","process","process_common","Argv"],"kind":"struct"},"1:8474:2331":{"crate_id":1,"path":["std","path","Ancestors"],"kind":"struct"},"17:11136:15490":{"crate_id":17,"path":["object","archive","Header"],"kind":"struct"},"2:46112:2480":{"crate_id":2,"path":["core","core_arch","simd","i16x32"],"kind":"struct"},"2:2777:8011":{"crate_id":2,"path":["core","ops","arith","Mul"],"kind":"trait"},"2:42186:8150":{"crate_id":2,"path":["core","slice","sort","TimSortRun"],"kind":"struct"},"6:6566:13339":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","flock64"],"kind":"struct"},"2:39044:7757":{"crate_id":2,"path":["core","any","tags","Ref"],"kind":"struct"},"17:12923:19299":{"crate_id":17,"path":["object","pe","ImageOptionalHeader32"],"kind":"struct"},"5:2898:31239":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Immut"],"kind":"struct"},"2:29805:2216":{"crate_id":2,"path":["core","num","FpCategory"],"kind":"enum"},"6:1687:9706":{"crate_id":6,"path":["libc","unix","linux_like","arpreq_old"],"kind":"struct"},"17:12536:18586":{"crate_id":17,"path":["object","macho","EntryPointCommand"],"kind":"struct"},"16:3899:14255":{"crate_id":16,"path":["gimli","constants","DwChildren"],"kind":"struct"},"2:20865:2439":{"crate_id":2,"path":["core","core_simd","masks","Mask"],"kind":"struct"},"2:42939:7654":{"crate_id":2,"path":["core","str","iter","EncodeUtf16"],"kind":"struct"},"2:3211:7577":{"crate_id":2,"path":["core","ops","unsize","CoerceUnsized"],"kind":"trait"},"1:5501:2344":{"crate_id":1,"path":["std","process","exit"],"kind":"function"},"1:11888:731":{"crate_id":1,"path":["std","i128"],"kind":"primitive"},"16:6327:15110":{"crate_id":16,"path":["gimli","read","abbrev","Abbreviations"],"kind":"struct"},"18:548:139":{"crate_id":18,"path":["memchr","memmem","rabinkarp","Hash"],"kind":"struct"},"17:12959:19300":{"crate_id":17,"path":["object","pe","ImageRomOptionalHeader"],"kind":"struct"},"17:13443:19338":{"crate_id":17,"path":["object","pe","ImageLoadConfigCodeIntegrity"],"kind":"struct"},"16:2319:14158":{"crate_id":16,"path":["gimli","common","Encoding"],"kind":"struct"},"1:11887:735":{"crate_id":1,"path":["std","i64"],"kind":"primitive"},"17:8931:15230":{"crate_id":17,"path":["object","read","util","ByteString"],"kind":"struct"},"17:13159:19312":{"crate_id":17,"path":["object","pe","ImageSymbolExBytes"],"kind":"struct"},"6:6788:13350":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","shmid_ds"],"kind":"struct"},"16:2357:14160":{"crate_id":16,"path":["gimli","common","Register"],"kind":"struct"},"2:20456:29961":{"crate_id":2,"path":["core","core_simd","swizzle","deinterleave","Even"],"kind":"struct"},"18:590:28393":{"crate_id":18,"path":["memchr","memmem","twoway","TwoWay"],"kind":"struct"},"18:671:19399":{"crate_id":18,"path":["memchr","memmem","FindRevIter"],"kind":"struct"},"2:2688:225":{"crate_id":2,"path":["core","marker","Sync"],"kind":"trait"},"2:43031:7683":{"crate_id":2,"path":["core","str","pattern","SearchStep"],"kind":"enum"},"1:3616:2207":{"crate_id":1,"path":["std","net","socket_addr","ToSocketAddrs"],"kind":"trait"},"2:42815:7669":{"crate_id":2,"path":["core","str","iter","RMatchIndices"],"kind":"struct"},"5:2067:1950":{"crate_id":5,"path":["alloc","collections","btree","mem","replace","PanicGuard"],"kind":"struct"},"1:4684:2246":{"crate_id":1,"path":["std","os","fd","raw","IntoRawFd"],"kind":"trait"},"2:43374:8162":{"crate_id":2,"path":["core","str","CharEscapeUnicode"],"kind":"struct"},"2:46668:7552":{"crate_id":2,"path":["core","core_arch","x86","__m512d"],"kind":"struct"},"2:11575:7653":{"crate_id":2,"path":["core","str","pattern"],"kind":"module"},"1:8765:2350":{"crate_id":1,"path":["std","process","ExitCode"],"kind":"struct"},"2:43390:8164":{"crate_id":2,"path":["core","str","IsNotEmpty"],"kind":"struct"},"1:11838:22089":{"crate_id":1,"path":["std","backtrace_rs","symbolize","gimli","Cache"],"kind":"struct"},"1:9070:2424":{"crate_id":1,"path":["std","time","SystemTimeError"],"kind":"struct"},"2:2836:8019":{"crate_id":2,"path":["core","ops","bit","BitXor"],"kind":"trait"},"2:3331:68":{"crate_id":2,"path":["core","any","Any"],"kind":"trait"},"17:10428:15473":{"crate_id":17,"path":["object","read","pe","file","PeComdat"],"kind":"struct"},"1:11879:1460":{"crate_id":1,"path":["std","tuple"],"kind":"primitive"},"2:46584:7546":{"crate_id":2,"path":["core","core_arch","x86","__m128d"],"kind":"struct"},"17:11879:18544":{"crate_id":17,"path":["object","macho","LoadCommand"],"kind":"struct"},"2:41079:81":{"crate_id":2,"path":["core","sync","atomic","AtomicI32"],"kind":"struct"},"17:13744:19358":{"crate_id":17,"path":["object","pe","ImageEnclaveImport"],"kind":"struct"},"2:42500:7617":{"crate_id":2,"path":["core","slice","iter","ArrayChunks"],"kind":"struct"},"16:5741:15090":{"crate_id":16,"path":["gimli","read","cfi","CieOrFde"],"kind":"enum"},"17:9512:15308":{"crate_id":17,"path":["object","read","coff","section","CoffSegmentIterator"],"kind":"struct"},"2:41786:72":{"crate_id":2,"path":["core","fmt","Arguments"],"kind":"struct"},"2:31818:22673":{"crate_id":2,"path":["core","error","private","Internal"],"kind":"struct"},"17:11060:15284":{"crate_id":17,"path":["object","read","Relocation"],"kind":"struct"},"2:21:672":{"crate_id":2,"path":["core","format_args"],"kind":"macro"},"1:11045:2140":{"crate_id":1,"path":["std","sys","unix","time","SystemTime"],"kind":"struct"},"2:9948:2163":{"crate_id":2,"path":["core","slice","iter","Split"],"kind":"struct"},"2:42946:7664":{"crate_id":2,"path":["core","str","iter","EscapeDebug"],"kind":"struct"},"2:40767:2310":{"crate_id":2,"path":["core","panic","location","Location"],"kind":"struct"},"17:10527:15476":{"crate_id":17,"path":["object","read","pe","export","ExportTarget"],"kind":"enum"},"16:6400:15116":{"crate_id":16,"path":["gimli","read","aranges","ArangeHeader"],"kind":"struct"},"2:39626:7973":{"crate_id":2,"path":["core","iter","adapters","fuse","Fuse"],"kind":"struct"},"2:12435:138":{"crate_id":2,"path":["core","alloc","global","GlobalAlloc"],"kind":"trait"},"2:44742:2505":{"crate_id":2,"path":["core","core_arch","simd","u64x2"],"kind":"struct"},"2:39747:2161":{"crate_id":2,"path":["core","iter","adapters","take","Take"],"kind":"struct"},"17:12433:18579":{"crate_id":17,"path":["object","macho","BuildVersionCommand"],"kind":"struct"},"6:1604:9699":{"crate_id":6,"path":["libc","unix","linux_like","sched_param"],"kind":"struct"},"16:7711:15164":{"crate_id":16,"path":["gimli","read","UnitOffset"],"kind":"struct"},"5:6749:31286":{"crate_id":5,"path":["alloc","vec","dedup_by","FillGapOnDrop"],"kind":"struct"},"6:7240:13723":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","align","max_align_t"],"kind":"struct"},"3:0:435":{"crate_id":3,"path":["compiler_builtins"],"kind":"module"},"10:44:14065":{"crate_id":10,"path":["adler","Adler32"],"kind":"struct"},"5:4904:2148":{"crate_id":5,"path":["alloc","rc","from_iter_exact","Guard"],"kind":"struct"},"2:12378:2515":{"crate_id":2,"path":["core","task","wake","Waker"],"kind":"struct"},"6:7218:8739":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","not_x32","statvfs"],"kind":"struct"},"17:13433:19337":{"crate_id":17,"path":["object","pe","ImageResourceDataEntry"],"kind":"struct"},"17:9188:33306":{"crate_id":17,"path":["object","read","any","ComdatSectionIteratorInternal"],"kind":"enum"},"3:229:207":{"crate_id":3,"path":["compiler_builtins","float","cmp","Result"],"kind":"enum"},"1:11063:19844":{"crate_id":1,"path":["std","sys","unix","time","Timespec"],"kind":"struct"},"2:42769:7640":{"crate_id":2,"path":["core","str","iter","RSplitN"],"kind":"struct"},"16:4445:14705":{"crate_id":16,"path":["gimli","constants","DwAte"],"kind":"struct"},"17:12607:18591":{"crate_id":17,"path":["object","macho","Nlist64"],"kind":"struct"},"16:7803:15168":{"crate_id":16,"path":["gimli","read","unit","UnitHeader"],"kind":"struct"},"16:7411:15145":{"crate_id":16,"path":["gimli","read","op","Expression"],"kind":"struct"},"6:4930:12277":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_authinfo"],"kind":"struct"},"5:7003:2029":{"crate_id":5,"path":["alloc","collections","binary_heap","IntoIterSorted"],"kind":"struct"},"1:923:2008":{"crate_id":1,"path":["std","collections","hash","map","ValuesMut"],"kind":"struct"},"2:41764:126":{"crate_id":2,"path":["core","fmt","Error"],"kind":"struct"},"11:834:2013":{"crate_id":11,"path":["hashbrown","map","RawOccupiedEntryMut"],"kind":"struct"},"2:45614:2468":{"crate_id":2,"path":["core","core_arch","simd","f32x8"],"kind":"struct"},"2:46619:7549":{"crate_id":2,"path":["core","core_arch","x86","__m256d"],"kind":"struct"},"6:488:8780":{"crate_id":6,"path":["libc","unix","timeval"],"kind":"struct"},"1:4992:22879":{"crate_id":1,"path":["std","path","fmt","DebugHelper"],"kind":"struct"},"13:0:1752":{"crate_id":13,"path":["std_detect"],"kind":"module"},"5:7209:2101":{"crate_id":5,"path":["alloc","ffi","c_str","FromVecWithNulError"],"kind":"struct"},"1:6909:21990":{"crate_id":1,"path":["std","sys_common","lazy_box","LazyBox"],"kind":"struct"},"2:10141:7639":{"crate_id":2,"path":["core","slice","iter","RSplitMut"],"kind":"struct"},"6:4865:990":{"crate_id":6,"path":["libc","unix","linux_like","linux","option"],"kind":"struct"},"15:198:14106":{"crate_id":15,"path":["addr2line","LocationRangeUnitIter"],"kind":"struct"},"5:4127:2148":{"crate_id":5,"path":["alloc","collections","vec_deque","into_iter","try_fold","Guard"],"kind":"struct"},"16:6061:14129":{"crate_id":16,"path":["gimli","read","cfi","CallFrameInstruction"],"kind":"enum"},"2:39003:8030":{"crate_id":2,"path":["core","ops","try_trait","Yeet"],"kind":"struct"},"2:12170:7807":{"crate_id":2,"path":["core","future","into_future","IntoFuture"],"kind":"trait"},"17:9917:15375":{"crate_id":17,"path":["object","read","elf","version","Version"],"kind":"struct"},"16:7572:32985":{"crate_id":16,"path":["gimli","read","rnglists","RangeListsFormat"],"kind":"enum"},"2:9756:219":{"crate_id":2,"path":["core","slice","index","SliceIndex"],"kind":"trait"},"2:42851:7670":{"crate_id":2,"path":["core","str","iter","Matches"],"kind":"struct"},"1:5721:2370":{"crate_id":1,"path":["std","sync","condvar","Condvar"],"kind":"struct"},"13:226:32611":{"crate_id":13,"path":["std_detect","detect","cache","Initializer"],"kind":"struct"},"17:10354:15396":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbolTable"],"kind":"struct"},"17:9068:33509":{"crate_id":17,"path":["object","read","any","SegmentInternal"],"kind":"enum"},"6:4461:12228":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_envelope"],"kind":"struct"},"18:0:1763":{"crate_id":18,"path":["memchr"],"kind":"module"},"2:11580:7649":{"crate_id":2,"path":["core","str","pattern","Pattern"],"kind":"trait"},"17:9028:15263":{"crate_id":17,"path":["object","read","any","SegmentIterator"],"kind":"struct"},"1:7851:2040":{"crate_id":1,"path":["std","io","cursor","Cursor"],"kind":"struct"},"2:21380:2437":{"crate_id":2,"path":["core","core_simd","vector","SimdElement"],"kind":"trait"},"6:4804:12263":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_fprog"],"kind":"struct"},"1:894:2005":{"crate_id":1,"path":["std","collections","hash","map","Values"],"kind":"struct"},"1:11885:733":{"crate_id":1,"path":["std","i16"],"kind":"primitive"},"6:4773:12259":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_j1939"],"kind":"struct"},"2:21378:2242":{"crate_id":2,"path":["core","core_simd","vector","sealed","Sealed"],"kind":"trait"},"17:12634:18592":{"crate_id":17,"path":["object","macho","RelocationInfo"],"kind":"struct"},"2:4394:1963":{"crate_id":2,"path":["core","cell","UnsafeCell"],"kind":"struct"},"2:2802:2428":{"crate_id":2,"path":["core","ops","arith","SubAssign"],"kind":"trait"},"1:11884:736":{"crate_id":1,"path":["std","i8"],"kind":"primitive"},"17:9866:15343":{"crate_id":17,"path":["object","read","elf","note","NoteIterator"],"kind":"struct"},"17:12224:18565":{"crate_id":17,"path":["object","macho","DylibTableOfContents"],"kind":"struct"},"2:42513:7618":{"crate_id":2,"path":["core","slice","iter","ArrayChunksMut"],"kind":"struct"},"1:7926:22121":{"crate_id":1,"path":["std","io","error","Custom"],"kind":"struct"},"6:5034:12287":{"crate_id":6,"path":["libc","unix","linux_like","linux","ifreq"],"kind":"struct"},"2:2339:179":{"crate_id":2,"path":["core","cmp","Ord"],"kind":"trait"},"18:614:33784":{"crate_id":18,"path":["memchr","memmem","twoway","SuffixKind"],"kind":"enum"},"2:30050:67":{"crate_id":2,"path":["core","ptr","alignment","Alignment"],"kind":"struct"},"2:0:488":{"crate_id":2,"path":["core"],"kind":"module"},"16:5797:32723":{"crate_id":16,"path":["gimli","read","cfi","AugmentationData"],"kind":"struct"},"2:39404:100":{"crate_id":2,"path":["core","ffi","c_str","CStr"],"kind":"struct"},"2:8181:2313":{"crate_id":2,"path":["core","panic","unwind_safe","RefUnwindSafe"],"kind":"trait"},"17:9734:15325":{"crate_id":17,"path":["object","read","elf","section","ElfSection"],"kind":"struct"},"1:5023:22879":{"crate_id":1,"path":["std","path","fmt","DebugHelper"],"kind":"struct"},"6:4327:12214":{"crate_id":6,"path":["libc","unix","linux_like","linux","signalfd_siginfo"],"kind":"struct"},"1:8197:2204":{"crate_id":1,"path":["std","os","unix","net","addr","SocketAddr"],"kind":"struct"},"17:10735:15485":{"crate_id":17,"path":["object","read","pe","rich","RichHeaderEntry"],"kind":"struct"},"16:6943:15138":{"crate_id":16,"path":["gimli","read","loclists","RawLocListEntry"],"kind":"enum"},"1:5565:2382":{"crate_id":1,"path":["std","sync","mpsc","Sender"],"kind":"struct"},"2:39267:7784":{"crate_id":2,"path":["core","char","convert","CharTryFromError"],"kind":"struct"},"1:3974:2231":{"crate_id":1,"path":["std","os","unix","fs","FileTypeExt"],"kind":"trait"},"2:45190:2510":{"crate_id":2,"path":["core","core_arch","simd","u8x32"],"kind":"struct"},"1:3681:2210":{"crate_id":1,"path":["std","net","tcp","TcpListener"],"kind":"struct"},"1:1850:2082":{"crate_id":1,"path":["std","env","Args"],"kind":"struct"},"2:39371:7783":{"crate_id":2,"path":["core","char","CaseMappingIter"],"kind":"enum"},"1:6487:2376":{"crate_id":1,"path":["std","sync","poison","TryLockError"],"kind":"enum"},"16:5677:15086":{"crate_id":16,"path":["gimli","read","cfi","CieOffsetEncoding"],"kind":"enum"},"16:4480:14716":{"crate_id":16,"path":["gimli","constants","DwLle"],"kind":"struct"},"16:5655:15085":{"crate_id":16,"path":["gimli","read","cfi","EhFrame"],"kind":"struct"},"1:8215:2256":{"crate_id":1,"path":["std","os","unix","net","ancillary","SocketAncillary"],"kind":"struct"},"17:13194:19315":{"crate_id":17,"path":["object","pe","ImageAuxSymbolFunctionBeginEnd"],"kind":"struct"},"2:2814:8016":{"crate_id":2,"path":["core","ops","arith","RemAssign"],"kind":"trait"},"6:5935:12924":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","regex_t"],"kind":"struct"},"1:1901:2097":{"crate_id":1,"path":["std","error","Report"],"kind":"struct"},"2:44245:27552":{"crate_id":2,"path":["core","core_arch","simd","u8x2"],"kind":"struct"},"1:1578:2007":{"crate_id":1,"path":["std","collections","hash","set","DrainFilter"],"kind":"struct"},"2:43624:2514":{"crate_id":2,"path":["core","task","wake","RawWakerVTable"],"kind":"struct"},"1:3441:2099":{"crate_id":1,"path":["std","io","Write"],"kind":"trait"},"1:9022:215":{"crate_id":1,"path":["std","sync","rwlock","RwLockReadGuard"],"kind":"struct"},"18:599:33789":{"crate_id":18,"path":["memchr","memmem","twoway","Shift"],"kind":"enum"},"2:22132:174":{"crate_id":2,"path":["core","num","nonzero","NonZeroU64"],"kind":"struct"},"1:3466:2157":{"crate_id":1,"path":["std","io","BufRead"],"kind":"trait"},"5:4157:2148":{"crate_id":5,"path":["alloc","collections","vec_deque","into_iter","try_rfold","Guard"],"kind":"struct"},"6:653:8841":{"crate_id":6,"path":["libc","unix","linux_like","timezone"],"kind":"enum"},"16:4702:14794":{"crate_id":16,"path":["gimli","constants","DwLang"],"kind":"struct"},"16:3063:14188":{"crate_id":16,"path":["gimli","arch","Arm"],"kind":"struct"},"2:39574:7968":{"crate_id":2,"path":["core","iter","adapters","cycle","Cycle"],"kind":"struct"},"16:2694:14174":{"crate_id":16,"path":["gimli","common","RangeListsOffset"],"kind":"struct"},"2:4374:7759":{"crate_id":2,"path":["core","cell","RefMut"],"kind":"struct"},"17:8823:15260":{"crate_id":17,"path":["object","endian","I32Bytes"],"kind":"struct"},"2:4248:7751":{"crate_id":2,"path":["core","cell","BorrowMutError"],"kind":"struct"},"16:6336:15111":{"crate_id":16,"path":["gimli","read","abbrev","Abbreviation"],"kind":"struct"},"2:11325:8171":{"crate_id":2,"path":["core","str","iter","SplitNInternal"],"kind":"struct"},"2:40620:2213":{"crate_id":2,"path":["core","net","parser","AddrParseError"],"kind":"struct"},"6:5947:12925":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","Elf64_Chdr"],"kind":"struct"},"6:4442:12225":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_mask"],"kind":"struct"},"2:22099:173":{"crate_id":2,"path":["core","num","nonzero","NonZeroU32"],"kind":"struct"},"2:40006:7954":{"crate_id":2,"path":["core","iter","sources","repeat_with","RepeatWith"],"kind":"struct"},"11:2053:2016":{"crate_id":11,"path":["hashbrown","set","Entry"],"kind":"enum"},"17:11193:15492":{"crate_id":17,"path":["object","archive","AixFileHeader"],"kind":"struct"},"5:5803:2366":{"crate_id":5,"path":["alloc","sync","Weak"],"kind":"struct"},"1:11216:19836":{"crate_id":1,"path":["std","sys_common","wtf8","Wtf8"],"kind":"struct"},"1:1567:2001":{"crate_id":1,"path":["std","collections","hash","set","Iter"],"kind":"struct"},"17:11573:18051":{"crate_id":17,"path":["object","elf","Verdaux"],"kind":"struct"},"2:40597:27546":{"crate_id":2,"path":["core","net","parser","AddrKind"],"kind":"enum"},"2:11288:8169":{"crate_id":2,"path":["core","str","iter","SplitInternal"],"kind":"struct"},"17:10257:15393":{"crate_id":17,"path":["object","read","macho","segment","MachOSegmentIterator"],"kind":"struct"},"2:46683:7553":{"crate_id":2,"path":["core","core_arch","x86","__m128bh"],"kind":"struct"},"6:4290:12211":{"crate_id":6,"path":["libc","unix","linux_like","linux","passwd"],"kind":"struct"},"17:11163:15491":{"crate_id":17,"path":["object","archive","AixHeader"],"kind":"struct"},"1:3356:2148":{"crate_id":1,"path":["std","io","Guard"],"kind":"struct"},"17:9959:15379":{"crate_id":17,"path":["object","read","elf","version","VerdauxIterator"],"kind":"struct"},"16:7259:2310":{"crate_id":16,"path":["gimli","read","op","Location"],"kind":"enum"},"11:853:2014":{"crate_id":11,"path":["hashbrown","map","RawVacantEntryMut"],"kind":"struct"},"17:9148:33420":{"crate_id":17,"path":["object","read","any","ComdatIteratorInternal"],"kind":"enum"},"1:4565:2230":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt"],"kind":"trait"},"16:5630:15083":{"crate_id":16,"path":["gimli","read","cfi","EhHdrTableIter"],"kind":"struct"},"17:3266:15413":{"crate_id":17,"path":["object","read","macho","relocation","MachORelocationIterator"],"kind":"struct"},"16:5104:14884":{"crate_id":16,"path":["gimli","constants","DwRle"],"kind":"struct"},"2:46508:2507":{"crate_id":2,"path":["core","core_arch","simd","u64x8"],"kind":"struct"},"6:119:8460":{"crate_id":6,"path":["libc","unix","FILE"],"kind":"enum"},"2:3511:2006":{"crate_id":2,"path":["core","array","drain","Drain"],"kind":"struct"},"2:21660:28198":{"crate_id":2,"path":["core","num","diy_float","Fp"],"kind":"struct"},"6:5705:12850":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","statx"],"kind":"struct"},"5:279:1899":{"crate_id":5,"path":["alloc","boxed","Box"],"kind":"struct"},"16:7449:15147":{"crate_id":16,"path":["gimli","read","op","Evaluation"],"kind":"struct"},"2:12191:29655":{"crate_id":2,"path":["core","future","join","MaybeDone"],"kind":"enum"},"16:2546:14168":{"crate_id":16,"path":["gimli","common","LocationListsOffset"],"kind":"struct"},"17:11299:18033":{"crate_id":17,"path":["object","elf","SectionHeader32"],"kind":"struct"},"2:44597:27591":{"crate_id":2,"path":["core","core_arch","simd","f64x1"],"kind":"struct"},"17:12835:19295":{"crate_id":17,"path":["object","pe","ImageVxdHeader"],"kind":"struct"},"2:40548:2203":{"crate_id":2,"path":["core","net","ip_addr","Ipv6MulticastScope"],"kind":"enum"},"2:39251:27455":{"crate_id":2,"path":["core","char","convert","CharErrorKind"],"kind":"enum"},"1:5181:187":{"crate_id":1,"path":["std","path","Path"],"kind":"struct"},"11:1628:32588":{"crate_id":11,"path":["hashbrown","scopeguard","ScopeGuard"],"kind":"struct"},"6:6586:13341":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stack_t"],"kind":"struct"},"1:8458:2330":{"crate_id":1,"path":["std","path","Components"],"kind":"struct"},"2:3166:231":{"crate_id":2,"path":["core","ops","try_trait","Try"],"kind":"trait"},"6:4612:12243":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Phdr"],"kind":"struct"},"1:3783:2212":{"crate_id":1,"path":["std","net","udp","UdpSocket"],"kind":"struct"},"16:5346:15078":{"crate_id":16,"path":["gimli","constants","DwEhPe"],"kind":"struct"},"17:10712:15484":{"crate_id":17,"path":["object","read","pe","resource","ResourceNameOrId"],"kind":"enum"},"17:12033:18553":{"crate_id":17,"path":["object","macho","DylibCommand"],"kind":"struct"},"1:3293:2169":{"crate_id":1,"path":["std","io","stdio","IsTerminal"],"kind":"trait"},"5:7253:7695":{"crate_id":5,"path":["alloc","string","FromUtf8Error"],"kind":"struct"},"2:10068:7645":{"crate_id":2,"path":["core","slice","iter","SplitInclusiveMut"],"kind":"struct"},"6:7526:12443":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_barrier_t"],"kind":"struct"},"2:9046:130":{"crate_id":2,"path":["core","fmt","Formatter"],"kind":"struct"},"2:39981:7952":{"crate_id":2,"path":["core","iter","sources","once_with","OnceWith"],"kind":"struct"},"1:4437:2268":{"crate_id":1,"path":["std","os","unix","process","ExitStatusExt"],"kind":"trait"},"2:45550:2483":{"crate_id":2,"path":["core","core_arch","simd","i32x8"],"kind":"struct"},"2:3248:7578":{"crate_id":2,"path":["core","ops","unsize","DispatchFromDyn"],"kind":"trait"},"16:6854:15133":{"crate_id":16,"path":["gimli","read","line","FileEntryFormat"],"kind":"struct"},"1:7775:2129":{"crate_id":1,"path":["std","fs","ReadDir"],"kind":"struct"},"11:274:32592":{"crate_id":11,"path":["hashbrown","raw","RawIterRange"],"kind":"struct"},"1:561:1957":{"crate_id":1,"path":["std","thread","JoinHandle"],"kind":"struct"},"1:10405:2182":{"crate_id":1,"path":["std","sys","unix","stdio","Stdin"],"kind":"struct"},"1:1991:181":{"crate_id":1,"path":["std","ffi","os_str","OsStr"],"kind":"struct"},"2:42425:7627":{"crate_id":2,"path":["core","slice","iter","Windows"],"kind":"struct"},"11:762:2007":{"crate_id":11,"path":["hashbrown","map","DrainFilter"],"kind":"struct"},"2:39051:7741":{"crate_id":2,"path":["core","array","TryFromSliceError"],"kind":"struct"},"17:386:15244":{"crate_id":17,"path":["object","read","any","Segment"],"kind":"struct"},"5:6164:31272":{"crate_id":5,"path":["alloc","vec","drain_filter","drop","BackshiftOnDrop"],"kind":"struct"},"17:9557:15267":{"crate_id":17,"path":["object","read","coff","symbol","SymbolTable"],"kind":"struct"},"2:39357:7781":{"crate_id":2,"path":["core","char","ToLowercase"],"kind":"struct"},"2:3183:7745":{"crate_id":2,"path":["core","ops","try_trait","NeverShortCircuit"],"kind":"struct"},"2:44289:2508":{"crate_id":2,"path":["core","core_arch","simd","u8x4"],"kind":"struct"},"17:12085:18557":{"crate_id":17,"path":["object","macho","SubLibraryCommand"],"kind":"struct"},"2:2503:147":{"crate_id":2,"path":["core","convert","Into"],"kind":"trait"},"16:3640:14193":{"crate_id":16,"path":["gimli","arch","X86_64"],"kind":"struct"},"1:8399:2328":{"crate_id":1,"path":["std","path","PrefixComponent"],"kind":"struct"},"5:264:31244":{"crate_id":5,"path":["alloc","boxed","thin","drop","DropGuard"],"kind":"struct"},"1:881:2004":{"crate_id":1,"path":["std","collections","hash","map","Keys"],"kind":"struct"},"2:21685:27567":{"crate_id":2,"path":["core","num","flt2dec","decoder","FullDecoded"],"kind":"enum"},"6:4354:12215":{"crate_id":6,"path":["libc","unix","linux_like","linux","itimerspec"],"kind":"struct"},"1:3250:2181":{"crate_id":1,"path":["std","io","stdio","StderrLock"],"kind":"struct"},"2:1743:8054":{"crate_id":2,"path":["core","ptr","metadata","DynMetadata"],"kind":"struct"},"1:8789:2003":{"crate_id":1,"path":["std","sync","mpsc","IntoIter"],"kind":"struct"},"17:11090:15286":{"crate_id":17,"path":["object","read","CompressedFileRange"],"kind":"struct"},"16:6990:15140":{"crate_id":16,"path":["gimli","read","loclists","LocationListEntry"],"kind":"struct"},"17:11556:18050":{"crate_id":17,"path":["object","elf","Verdef"],"kind":"struct"},"1:6554:2381":{"crate_id":1,"path":["std","sync","remutex","ReentrantMutexGuard"],"kind":"struct"},"1:487:23421":{"crate_id":1,"path":["std","thread","spawn_unchecked_","MaybeDangling"],"kind":"struct"},"18:609:33799":{"crate_id":18,"path":["memchr","memmem","twoway","Suffix"],"kind":"struct"},"1:11299:22126":{"crate_id":1,"path":["std","sys_common","net","LookupHost"],"kind":"struct"},"16:2905:14183":{"crate_id":16,"path":["gimli","common","EhFrameOffset"],"kind":"struct"},"11:98:32605":{"crate_id":11,"path":["hashbrown","raw","Bucket"],"kind":"struct"},"6:6679:13343":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_fpxreg"],"kind":"struct"},"5:5631:229":{"crate_id":5,"path":["alloc","string","ToString"],"kind":"trait"},"6:4819:12265":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlmsghdr"],"kind":"struct"},"6:1617:9701":{"crate_id":6,"path":["libc","unix","linux_like","lconv"],"kind":"struct"},"1:7797:2127":{"crate_id":1,"path":["std","fs","Permissions"],"kind":"struct"},"5:6081:2517":{"crate_id":5,"path":["alloc","task","Wake"],"kind":"trait"},"2:2233:96":{"crate_id":2,"path":["core","borrow","Borrow"],"kind":"trait"},"11:2184:27078":{"crate_id":11,"path":["hashbrown","raw","bitmask","BitMask"],"kind":"struct"},"2:42617:7660":{"crate_id":2,"path":["core","str","iter","Chars"],"kind":"struct"},"2:42901:2159":{"crate_id":2,"path":["core","str","iter","Lines"],"kind":"struct"},"11:1044:14076":{"crate_id":11,"path":["hashbrown","map","EntryRef"],"kind":"enum"},"17:13803:19362":{"crate_id":17,"path":["object","pe","ImageFunctionEntry"],"kind":"struct"},"1:2212:2107":{"crate_id":1,"path":["std","fs","DirEntry"],"kind":"struct"},"2:2999:2059":{"crate_id":2,"path":["core","ops","index","IndexMut"],"kind":"trait"},"1:6190:2382":{"crate_id":1,"path":["std","sync","mpmc","Sender"],"kind":"struct"},"16:6819:15132":{"crate_id":16,"path":["gimli","read","line","FileEntry"],"kind":"struct"},"17:12345:18573":{"crate_id":17,"path":["object","macho","RpathCommand"],"kind":"struct"},"6:6836:13354":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ucontext_t"],"kind":"struct"},"17:13181:19314":{"crate_id":17,"path":["object","pe","ImageAuxSymbolFunction"],"kind":"struct"},"6:6773:13349":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ipc_perm"],"kind":"struct"},"6:4399:12220":{"crate_id":6,"path":["libc","unix","linux_like","linux","sembuf"],"kind":"struct"},"2:39972:1988":{"crate_id":2,"path":["core","iter","sources","once","Once"],"kind":"struct"},"2:4007:102":{"crate_id":2,"path":["core","asserting","Capture"],"kind":"struct"},"18:574:33780":{"crate_id":18,"path":["memchr","memmem","twoway","Forward"],"kind":"struct"},"2:40668:2206":{"crate_id":2,"path":["core","net","socket_addr","SocketAddrV6"],"kind":"struct"},"2:11113:8119":{"crate_id":2,"path":["core","slice","SlicePattern"],"kind":"trait"},"1:4904:2302":{"crate_id":1,"path":["std","panic","always_abort"],"kind":"function"},"5:1602:31244":{"crate_id":5,"path":["alloc","collections","btree","map","drop","DropGuard"],"kind":"struct"},"17:12592:18590":{"crate_id":17,"path":["object","macho","Nlist32"],"kind":"struct"},"6:4963:12281":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_alg"],"kind":"struct"},"2:20712:2438":{"crate_id":2,"path":["core","core_simd","lane_count","SupportedLaneCount"],"kind":"trait"},"2:42955:1978":{"crate_id":2,"path":["core","str","iter","EscapeDefault"],"kind":"struct"},"17:10705:15483":{"crate_id":17,"path":["object","read","pe","resource","ResourceName"],"kind":"struct"},"2:20458:29957":{"crate_id":2,"path":["core","core_simd","swizzle","deinterleave","Odd"],"kind":"struct"},"2:42474:7619":{"crate_id":2,"path":["core","slice","iter","ArrayWindows"],"kind":"struct"},"17:9895:15349":{"crate_id":17,"path":["object","read","elf","hash","GnuHashTable"],"kind":"struct"},"16:8180:15180":{"crate_id":16,"path":["gimli","read","value","ValueType"],"kind":"enum"},"1:11889:1478":{"crate_id":1,"path":["std","u8"],"kind":"primitive"},"11:2205:1999":{"crate_id":11,"path":["hashbrown","TryReserveError"],"kind":"enum"},"5:2077:31231":{"crate_id":5,"path":["alloc","collections","btree","merge_iter","MergeIterInner"],"kind":"struct"},"2:9080:7584":{"crate_id":2,"path":["core","fmt","Binary"],"kind":"trait"},"6:4828:12266":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlmsgerr"],"kind":"struct"},"17:13651:19351":{"crate_id":17,"path":["object","pe","ImageArmRuntimeFunctionEntry"],"kind":"struct"},"17:10761:15272":{"crate_id":17,"path":["object","read","FileKind"],"kind":"enum"},"1:413:162":{"crate_id":1,"path":["std","thread","local","LocalKey"],"kind":"struct"},"2:46470:2487":{"crate_id":2,"path":["core","core_arch","simd","i64x8"],"kind":"struct"},"17:13332:19327":{"crate_id":17,"path":["object","pe","ImageTlsDirectory64"],"kind":"struct"},"16:6696:15128":{"crate_id":16,"path":["gimli","read","line","ColumnType"],"kind":"enum"},"17:9380:15293":{"crate_id":17,"path":["object","read","archive","ArchiveKind"],"kind":"enum"},"1:10939:23329":{"crate_id":1,"path":["std","sys","unix","process","process_inner","posix_spawn","PosixSpawnattr"],"kind":"struct"},"18:736:19396":{"crate_id":18,"path":["memchr","memmem","SearcherKind"],"kind":"enum"},"2:41239:84":{"crate_id":2,"path":["core","sync","atomic","AtomicIsize"],"kind":"struct"},"11:1845:2007":{"crate_id":11,"path":["hashbrown","set","DrainFilter"],"kind":"struct"},"5:7146:2000":{"crate_id":5,"path":["alloc","collections","TryReserveErrorKind"],"kind":"enum"},"2:40919:83":{"crate_id":2,"path":["core","sync","atomic","AtomicI8"],"kind":"struct"},"2:39655:7975":{"crate_id":2,"path":["core","iter","adapters","map","Map"],"kind":"struct"},"16:8090:15174":{"crate_id":16,"path":["gimli","read","unit","EntriesCursor"],"kind":"struct"},"2:40014:7956":{"crate_id":2,"path":["core","iter","sources","successors","Successors"],"kind":"struct"},"17:10092:15431":{"crate_id":17,"path":["object","read","macho","file","MachOComdatSectionIterator"],"kind":"struct"},"17:13066:19307":{"crate_id":17,"path":["object","pe","AnonObjectHeaderV2"],"kind":"struct"},"2:39291:7787":{"crate_id":2,"path":["core","char","decode","DecodeUtf16Error"],"kind":"struct"},"17:9683:15327":{"crate_id":17,"path":["object","read","elf","segment","ElfSegment"],"kind":"struct"},"2:3177:7746":{"crate_id":2,"path":["core","ops","try_trait","Residual"],"kind":"trait"},"5:6582:7720":{"crate_id":5,"path":["alloc","vec","in_place_drop","InPlaceDrop"],"kind":"struct"},"1:10643:24145":{"crate_id":1,"path":["std","sys","unix","fs","StatxExtraFields"],"kind":"struct"},"2:21609:27532":{"crate_id":2,"path":["core","num","dec2flt","number","Number"],"kind":"struct"},"17:13169:19313":{"crate_id":17,"path":["object","pe","ImageAuxSymbolTokenDef"],"kind":"struct"},"2:4320:7757":{"crate_id":2,"path":["core","cell","Ref"],"kind":"struct"},"16:4540:14728":{"crate_id":16,"path":["gimli","constants","DwEnd"],"kind":"struct"},"1:3136:25618":{"crate_id":1,"path":["std","io","stdio","StderrRaw"],"kind":"struct"},"17:13506:19345":{"crate_id":17,"path":["object","pe","ImageEpilogueDynamicRelocationHeader"],"kind":"struct"},"6:579:8792":{"crate_id":6,"path":["libc","unix","tms"],"kind":"struct"},"2:44958:2471":{"crate_id":2,"path":["core","core_arch","simd","f64x4"],"kind":"struct"},"6:6533:8829":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","sigaction"],"kind":"struct"},"11:1840:2006":{"crate_id":11,"path":["hashbrown","set","Drain"],"kind":"struct"},"17:10691:15482":{"crate_id":17,"path":["object","read","pe","resource","ResourceDirectoryEntryData"],"kind":"enum"},"17:9228:33360":{"crate_id":17,"path":["object","read","any","SymbolTableInternal"],"kind":"enum"},"17:9839:15322":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdat"],"kind":"struct"},"6:6673:13342":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","pthread_attr_t"],"kind":"struct"},"11:320:32595":{"crate_id":11,"path":["hashbrown","raw","RawIntoIter"],"kind":"struct"},"6:4750:12256":{"crate_id":6,"path":["libc","unix","linux_like","linux","regmatch_t"],"kind":"struct"},"2:1618:579":{"crate_id":2,"path":["core","mem","drop"],"kind":"function"},"6:4943:12279":{"crate_id":6,"path":["libc","unix","linux_like","linux","dirent"],"kind":"struct"},"2:21471:28197":{"crate_id":2,"path":["core","num","bignum","Big32x40"],"kind":"struct"},"1:4113:2260":{"crate_id":1,"path":["std","os","unix","net","ancillary","AncillaryData"],"kind":"enum"},"1:10661:19977":{"crate_id":1,"path":["std","sys","unix","fs","FilePermissions"],"kind":"struct"},"11:2080:2018":{"crate_id":11,"path":["hashbrown","set","VacantEntry"],"kind":"struct"},"1:4415:2267":{"crate_id":1,"path":["std","os","unix","process","CommandExt"],"kind":"trait"},"2:39612:28390":{"crate_id":2,"path":["core","iter","adapters","flatten","FlattenCompat"],"kind":"struct"},"2:2798:2426":{"crate_id":2,"path":["core","ops","arith","AddAssign"],"kind":"trait"},"17:11282:18032":{"crate_id":17,"path":["object","elf","Ident"],"kind":"struct"},"17:10681:15481":{"crate_id":17,"path":["object","read","pe","resource","ResourceDirectoryTable"],"kind":"struct"},"1:7456:15246":{"crate_id":1,"path":["std","backtrace_rs","symbolize","Symbol"],"kind":"struct"},"1:953:2013":{"crate_id":1,"path":["std","collections","hash","map","RawOccupiedEntryMut"],"kind":"struct"},"17:9617:15304":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdatIterator"],"kind":"struct"},"17:13879:19368":{"crate_id":17,"path":["object","pe","ImageCor20Header"],"kind":"struct"},"2:4365:7758":{"crate_id":2,"path":["core","cell","BorrowRefMut"],"kind":"struct"},"1:644:1982":{"crate_id":1,"path":["std","backtrace","BacktraceSymbol"],"kind":"struct"},"6:5888:12922":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","timex"],"kind":"struct"},"5:5475:7719":{"crate_id":5,"path":["alloc","string","retain","SetLenOnDrop"],"kind":"struct"},"2:41709:108":{"crate_id":2,"path":["core","fmt","rt","Count"],"kind":"enum"},"2:39311:7779":{"crate_id":2,"path":["core","char","EscapeUnicodeState"],"kind":"enum"},"17:12980:19301":{"crate_id":17,"path":["object","pe","ImageOptionalHeader64"],"kind":"struct"},"16:2830:14180":{"crate_id":16,"path":["gimli","common","DebugTypesOffset"],"kind":"struct"},"6:5868:12921":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","rtentry"],"kind":"struct"},"17:9523:15307":{"crate_id":17,"path":["object","read","coff","section","CoffSegment"],"kind":"struct"},"16:6321:15109":{"crate_id":16,"path":["gimli","read","abbrev","AbbreviationsCache"],"kind":"struct"},"5:3511:160":{"crate_id":5,"path":["alloc","collections","linked_list","LinkedList"],"kind":"struct"},"6:7514:12441":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_mutex_t"],"kind":"struct"},"17:10569:15443":{"crate_id":17,"path":["object","read","pe","import","ImportTable"],"kind":"struct"},"2:31831:7991":{"crate_id":2,"path":["core","marker","PhantomPinned"],"kind":"struct"},"11:2178:32610":{"crate_id":11,"path":["hashbrown","raw","sse2","Group"],"kind":"struct"},"2:48935:243":{"crate_id":2,"path":["core","core_simd","fmt","fmt","Wrapper"],"kind":"struct"},"2:39958:7950":{"crate_id":2,"path":["core","iter","sources","from_fn","FromFn"],"kind":"struct"},"17:9350:33454":{"crate_id":17,"path":["object","read","any","SectionRelocationIteratorInternal"],"kind":"enum"},"10:36:32584":{"crate_id":10,"path":["adler","algo","U32X4"],"kind":"struct"},"2:40514:2201":{"crate_id":2,"path":["core","net","ip_addr","Ipv4Addr"],"kind":"struct"},"2:12409:202":{"crate_id":2,"path":["core","task","ready","Ready"],"kind":"struct"},"2:20650:2445":{"crate_id":2,"path":["core","core_simd","elements","uint","SimdUint"],"kind":"trait"},"6:5955:12926":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","Elf32_Chdr"],"kind":"struct"},"11:1534:14080":{"crate_id":11,"path":["hashbrown","rustc_entry","RustcOccupiedEntry"],"kind":"struct"},"1:6334:22852":{"crate_id":1,"path":["std","sync","mutex","fmt","LockedPlaceholder"],"kind":"struct"},"1:6103:23425":{"crate_id":1,"path":["std","sync","mpmc","waker","SyncWaker"],"kind":"struct"},"17:10967:15281":{"crate_id":17,"path":["object","read","Import"],"kind":"struct"},"1:6011:23418":{"crate_id":1,"path":["std","sync","mpmc","list","Channel"],"kind":"struct"},"2:39514:7617":{"crate_id":2,"path":["core","iter","adapters","array_chunks","ArrayChunks"],"kind":"struct"},"1:8071:2191":{"crate_id":1,"path":["std","io","util","Sink"],"kind":"struct"},"1:959:2014":{"crate_id":1,"path":["std","collections","hash","map","RawVacantEntryMut"],"kind":"struct"},"6:1527:9691":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreq_source"],"kind":"struct"},"18:531:19409":{"crate_id":18,"path":["memchr","memmem","prefilter","PrefilterState"],"kind":"struct"},"2:42930:7655":{"crate_id":2,"path":["core","str","iter","SplitAsciiWhitespace"],"kind":"struct"},"17:13667:19353":{"crate_id":17,"path":["object","pe","ImageAlpha64RuntimeFunctionEntry"],"kind":"struct"},"6:4592:12241":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Sym"],"kind":"struct"},"2:2925:2037":{"crate_id":2,"path":["core","ops","deref","DerefMut"],"kind":"trait"},"2:39030:15181":{"crate_id":2,"path":["core","any","tags","Value"],"kind":"struct"},"5:3678:2041":{"crate_id":5,"path":["alloc","collections","linked_list","CursorMut"],"kind":"struct"},"1:10408:2184":{"crate_id":1,"path":["std","sys","unix","stdio","Stdout"],"kind":"struct"},"2:39965:28389":{"crate_id":2,"path":["core","iter","sources","from_generator","FromGenerator"],"kind":"struct"},"16:6671:14103":{"crate_id":16,"path":["gimli","read","line","LineRow"],"kind":"struct"},"2:45344:2506":{"crate_id":2,"path":["core","core_arch","simd","u64x4"],"kind":"struct"},"1:11821:19919":{"crate_id":1,"path":["std","backtrace_rs","symbolize","gimli","parse_running_mmaps","MapsEntry"],"kind":"struct"},"2:44357:2476":{"crate_id":2,"path":["core","core_arch","simd","i16x2"],"kind":"struct"},"6:4381:12060":{"crate_id":6,"path":["libc","unix","linux_like","linux","if_nameindex"],"kind":"struct"},"2:4775:786":{"crate_id":2,"path":["core","iter"],"kind":"module"},"2:45009:27595":{"crate_id":2,"path":["core","core_arch","simd","m8x16"],"kind":"struct"},"6:1589:9698":{"crate_id":6,"path":["libc","unix","linux_like","tm"],"kind":"struct"},"1:7827:117":{"crate_id":1,"path":["std","fs","DirBuilder"],"kind":"struct"},"2:41319:2367":{"crate_id":2,"path":["core","sync","exclusive","Exclusive"],"kind":"struct"},"1:5441:2343":{"crate_id":1,"path":["std","process","Stdio"],"kind":"struct"},"16:7065:33081":{"crate_id":16,"path":["gimli","read","lookup","PubStuffParser"],"kind":"struct"},"2:21115:2440":{"crate_id":2,"path":["core","core_simd","ord","SimdPartialOrd"],"kind":"trait"},"6:6656:9632":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statvfs64"],"kind":"struct"},"2:2831:8018":{"crate_id":2,"path":["core","ops","bit","BitOr"],"kind":"trait"},"17:12522:18585":{"crate_id":17,"path":["object","macho","FvmfileCommand"],"kind":"struct"},"1:965:2015":{"crate_id":1,"path":["std","collections","hash","map","RawEntryBuilder"],"kind":"struct"},"1:8092:2136":{"crate_id":1,"path":["std","io","SeekFrom"],"kind":"enum"},"16:8129:15176":{"crate_id":16,"path":["gimli","read","unit","EntriesTreeNode"],"kind":"struct"},"5:2159:31393":{"crate_id":5,"path":["alloc","collections","btree","navigate","LazyLeafHandle"],"kind":"enum"},"6:7263:13725":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","align","sem_t"],"kind":"struct"},"17:8651:14126":{"crate_id":17,"path":["object","endian","LittleEndian"],"kind":"struct"},"2:9923:2002":{"crate_id":2,"path":["core","slice","iter","IterMut"],"kind":"struct"},"17:10416:15472":{"crate_id":17,"path":["object","read","pe","file","PeComdatIterator"],"kind":"struct"},"17:12449:18580":{"crate_id":17,"path":["object","macho","BuildToolVersion"],"kind":"struct"},"17:12236:18566":{"crate_id":17,"path":["object","macho","DylibModule32"],"kind":"struct"},"16:7557:15156":{"crate_id":16,"path":["gimli","read","rnglists","RangeLists"],"kind":"struct"},"6:4406:12221":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_event"],"kind":"struct"},"2:46564:7544":{"crate_id":2,"path":["core","core_arch","x86","__m128i"],"kind":"struct"},"1:7931:2176":{"crate_id":1,"path":["std","io","error","ErrorKind"],"kind":"enum"},"2:3196:27216":{"crate_id":2,"path":["core","ops","try_trait","NeverShortCircuitResidual"],"kind":"enum"},"5:5225:7610":{"crate_id":5,"path":["alloc","slice","Concat"],"kind":"trait"},"9:325:14012":{"crate_id":9,"path":["miniz_oxide","inflate","core","LocalVars"],"kind":"struct"},"11:2069:2017":{"crate_id":11,"path":["hashbrown","set","OccupiedEntry"],"kind":"struct"},"2:21524:28191":{"crate_id":2,"path":["core","num","bignum","tests","Big8x3"],"kind":"struct"},"11:751:2006":{"crate_id":11,"path":["hashbrown","map","Drain"],"kind":"struct"},"16:2764:14177":{"crate_id":16,"path":["gimli","common","DebugStrOffset"],"kind":"struct"},"1:1589:2023":{"crate_id":1,"path":["std","collections","hash","set","Difference"],"kind":"struct"},"6:6541:9628":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statfs"],"kind":"struct"},"2:44690:2498":{"crate_id":2,"path":["core","core_arch","simd","u16x8"],"kind":"struct"},"16:6520:15123":{"crate_id":16,"path":["gimli","read","index","UnitIndexSection"],"kind":"struct"},"16:8109:15175":{"crate_id":16,"path":["gimli","read","unit","EntriesTree"],"kind":"struct"},"16:5976:15098":{"crate_id":16,"path":["gimli","read","cfi","UnwindTableRow"],"kind":"struct"},"5:2106:31143":{"crate_id":5,"path":["alloc","collections","btree","navigate","LeafRange"],"kind":"struct"},"18:755:19404":{"crate_id":18,"path":["memchr","memmem","SearcherRev"],"kind":"struct"},"17:13265:19322":{"crate_id":17,"path":["object","pe","ImageArchiveMemberHeader"],"kind":"struct"},"6:494:8781":{"crate_id":6,"path":["libc","unix","timespec"],"kind":"struct"},"1:8896:22118":{"crate_id":1,"path":["std","sync","mpmc","array","ArrayToken"],"kind":"struct"},"6:482:8779":{"crate_id":6,"path":["libc","unix","utimbuf"],"kind":"struct"},"17:9986:15380":{"crate_id":17,"path":["object","read","elf","version","VernauxIterator"],"kind":"struct"},"17:12902:19297":{"crate_id":17,"path":["object","pe","ImageFileHeader"],"kind":"struct"},"6:5990:12930":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_exit"],"kind":"struct"},"6:7566:13913":{"crate_id":6,"path":["libc","unix","align","in6_addr"],"kind":"struct"},"17:11628:18055":{"crate_id":17,"path":["object","elf","NoteHeader64"],"kind":"struct"},"17:12496:18583":{"crate_id":17,"path":["object","macho","SymsegCommand"],"kind":"struct"},"17:10598:15281":{"crate_id":17,"path":["object","read","pe","import","Import"],"kind":"enum"},"6:4690:12249":{"crate_id":6,"path":["libc","unix","linux_like","linux","posix_spawnattr_t"],"kind":"struct"},"1:8249:2295":{"crate_id":1,"path":["std","os","linux","process","PidFd"],"kind":"struct"},"2:1720:8055":{"crate_id":2,"path":["core","ptr","metadata","Pointee"],"kind":"trait"},"5:670:228":{"crate_id":5,"path":["alloc","borrow","ToOwned"],"kind":"trait"},"1:7467:22896":{"crate_id":1,"path":["std","backtrace_rs","symbolize","SymbolName"],"kind":"struct"},"2:2995:2058":{"crate_id":2,"path":["core","ops","index","Index"],"kind":"trait"},"1:8751:2349":{"crate_id":1,"path":["std","process","ExitStatusError"],"kind":"struct"},"2:43225:7691":{"crate_id":2,"path":["core","str","pattern","StrSearcherImpl"],"kind":"enum"},"2:2861:8025":{"crate_id":2,"path":["core","ops","bit","BitXorAssign"],"kind":"trait"},"16:2642:14172":{"crate_id":16,"path":["gimli","common","DebugMacroOffset"],"kind":"struct"},"2:41983:2327":{"crate_id":2,"path":["core","hash","sip","State"],"kind":"struct"},"1:1439:142":{"crate_id":1,"path":["std","collections","hash","set","HashSet"],"kind":"struct"},"2:39696:7978":{"crate_id":2,"path":["core","iter","adapters","scan","Scan"],"kind":"struct"},"1:11890:1475":{"crate_id":1,"path":["std","u16"],"kind":"primitive"},"2:39451:1624":{"crate_id":2,"path":["core","ffi","c_char"],"kind":"typedef"},"5:3174:2025":{"crate_id":5,"path":["alloc","collections","btree","set","Union"],"kind":"struct"},"18:538:19410":{"crate_id":18,"path":["memchr","memmem","rabinkarp","NeedleHash"],"kind":"struct"},"16:4789:14809":{"crate_id":16,"path":["gimli","constants","DwCc"],"kind":"struct"},"2:6603:7967":{"crate_id":2,"path":["core","iter","adapters","zip","TrustedRandomAccessNoCoerce"],"kind":"trait"},"2:44441:2501":{"crate_id":2,"path":["core","core_arch","simd","u32x2"],"kind":"struct"},"2:40758:2003":{"crate_id":2,"path":["core","option","IntoIter"],"kind":"struct"},"6:5850:12919":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_mmap_req"],"kind":"struct"},"6:5773:12914":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","glob64_t"],"kind":"struct"},"2:40742:2001":{"crate_id":2,"path":["core","option","Iter"],"kind":"struct"},"1:3988:2233":{"crate_id":1,"path":["std","os","unix","fs","DirEntryExt2"],"kind":"trait"},"2:20663:2242":{"crate_id":2,"path":["core","core_simd","elements","sealed","Sealed"],"kind":"trait"},"6:1583:9697":{"crate_id":6,"path":["libc","unix","linux_like","fd_set"],"kind":"struct"},"16:4037:14369":{"crate_id":16,"path":["gimli","constants","DwTag"],"kind":"struct"},"11:444:140":{"crate_id":11,"path":["hashbrown","map","HashMap"],"kind":"struct"},"16:8047:15172":{"crate_id":16,"path":["gimli","read","unit","AttrsIter"],"kind":"struct"},"6:6809:13352":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ptrace_rseq_configuration"],"kind":"struct"},"1:11897:13":{"crate_id":1,"path":["std","fn"],"kind":"primitive"},"2:20706:2436":{"crate_id":2,"path":["core","core_simd","lane_count","LaneCount"],"kind":"struct"},"2:8601:78":{"crate_id":2,"path":["core","sync","atomic","AtomicBool"],"kind":"struct"},"2:43099:7687":{"crate_id":2,"path":["core","str","pattern","CharArrayRefSearcher"],"kind":"struct"},"14:165:14088":{"crate_id":14,"path":["rustc_demangle","DemangleStyle"],"kind":"enum"},"14:40:18032":{"crate_id":14,"path":["rustc_demangle","v0","Ident"],"kind":"struct"},"1:2615:2175":{"crate_id":1,"path":["std","io","buffered","linewriter","LineWriter"],"kind":"struct"},"1:4579:24130":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt","st_ctime"],"kind":"foreign_type"},"2:9339:7811":{"crate_id":2,"path":["core","hash","BuildHasherDefault"],"kind":"struct"},"16:6254:15106":{"crate_id":16,"path":["gimli","read","endian_slice","EndianSlice"],"kind":"struct"},"14:160:14087":{"crate_id":14,"path":["rustc_demangle","Demangle"],"kind":"struct"},"1:5688:2368":{"crate_id":1,"path":["std","sync","barrier","Barrier"],"kind":"struct"},"1:1930:2098":{"crate_id":1,"path":["std","error","Indented"],"kind":"struct"},"5:4808:201":{"crate_id":5,"path":["alloc","rc","Rc"],"kind":"struct"},"2:42545:7635":{"crate_id":2,"path":["core","slice","iter","RChunksExact"],"kind":"struct"},"2:21772:2218":{"crate_id":2,"path":["core","num","error","ParseIntError"],"kind":"struct"},"17:9748:15267":{"crate_id":17,"path":["object","read","elf","symbol","SymbolTable"],"kind":"struct"},"2:46645:7551":{"crate_id":2,"path":["core","core_arch","x86","__m512"],"kind":"struct"},"1:1086:2019":{"crate_id":1,"path":["std","collections","hash","map","OccupiedError"],"kind":"struct"},"2:12490:2047":{"crate_id":2,"path":["core","alloc","Allocator"],"kind":"trait"},"1:10933:23436":{"crate_id":1,"path":["std","sys","unix","process","process_inner","posix_spawn","PosixSpawnFileActions"],"kind":"struct"},"1:11870:368":{"crate_id":1,"path":["std","bool"],"kind":"primitive"},"5:3148:2022":{"crate_id":5,"path":["alloc","collections","btree","set","Intersection"],"kind":"struct"},"2:2461:7802":{"crate_id":2,"path":["core","convert","num","FloatToInt"],"kind":"trait"},"17:487:15245":{"crate_id":17,"path":["object","read","any","Comdat"],"kind":"struct"},"17:12307:18570":{"crate_id":17,"path":["object","macho","TwolevelHint"],"kind":"struct"},"1:928:2009":{"crate_id":1,"path":["std","collections","hash","map","IntoKeys"],"kind":"struct"},"6:4998:12284":{"crate_id":6,"path":["libc","unix","linux_like","linux","af_alg_iv"],"kind":"struct"},"16:6575:15126":{"crate_id":16,"path":["gimli","read","line","LineInstruction"],"kind":"enum"},"5:1444:195":{"crate_id":5,"path":["alloc","collections","btree","map","Range"],"kind":"struct"},"14:221:14097":{"crate_id":14,"path":["rustc_demangle","SizeLimitExhausted"],"kind":"struct"},"1:10198:2342":{"crate_id":1,"path":["std","sys","unix","process","process_common","Command"],"kind":"struct"},"2:44459:27548":{"crate_id":2,"path":["core","core_arch","simd","u64x1"],"kind":"struct"},"16:7437:15146":{"crate_id":16,"path":["gimli","read","op","OperationIter"],"kind":"struct"},"1:3248:2180":{"crate_id":1,"path":["std","io","stdio","Stderr"],"kind":"struct"},"2:38949:200":{"crate_id":2,"path":["core","ops","range","RangeToInclusive"],"kind":"struct"},"1:4738:2247":{"crate_id":1,"path":["std","os","fd","owned","OwnedFd"],"kind":"struct"},"17:1947:15324":{"crate_id":17,"path":["object","read","elf","relocation","ElfDynamicRelocationIterator"],"kind":"struct"},"2:42751:7642":{"crate_id":2,"path":["core","str","iter","SplitN"],"kind":"struct"},"17:12126:18560":{"crate_id":17,"path":["object","macho","ThreadCommand"],"kind":"struct"},"17:13101:19292":{"crate_id":17,"path":["object","pe","ImageSectionHeader"],"kind":"struct"},"17:13812:19363":{"crate_id":17,"path":["object","pe","ImageFunctionEntry64"],"kind":"struct"},"1:11895:1531":{"crate_id":1,"path":["std","usize"],"kind":"primitive"},"11:2190:32607":{"crate_id":11,"path":["hashbrown","raw","Fallibility"],"kind":"enum"},"17:11037:15283":{"crate_id":17,"path":["object","read","RelocationTarget"],"kind":"enum"},"2:39543:2160":{"crate_id":2,"path":["core","iter","adapters","chain","Chain"],"kind":"struct"},"2:3995:28248":{"crate_id":2,"path":["core","asserting","TryCaptureWithDebug"],"kind":"struct"},"7:0:1521":{"crate_id":7,"path":["unwind"],"kind":"module"},"16:6442:15118":{"crate_id":16,"path":["gimli","read","aranges","ArangeEntry"],"kind":"struct"},"17:10015:15427":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldSubCache"],"kind":"struct"},"2:4129:7763":{"crate_id":2,"path":["core","cell","once","OnceCell"],"kind":"struct"},"6:562:8789":{"crate_id":6,"path":["libc","unix","linger"],"kind":"struct"},"16:7767:15167":{"crate_id":16,"path":["gimli","read","unit","UnitType"],"kind":"enum"},"1:8416:2329":{"crate_id":1,"path":["std","path","Component"],"kind":"enum"},"6:4301:12212":{"crate_id":6,"path":["libc","unix","linux_like","linux","spwd"],"kind":"struct"},"2:1625:7939":{"crate_id":2,"path":["core","mem","Discriminant"],"kind":"struct"},"2:43366:8157":{"crate_id":2,"path":["core","str","LinesMap"],"kind":"struct"},"2:10210:7643":{"crate_id":2,"path":["core","slice","iter","SplitNMut"],"kind":"struct"},"6:4702:12250":{"crate_id":6,"path":["libc","unix","linux_like","linux","genlmsghdr"],"kind":"struct"},"18:582:7798":{"crate_id":18,"path":["memchr","memmem","twoway","Reverse"],"kind":"struct"},"11:393:32598":{"crate_id":11,"path":["hashbrown","raw","RawIterHashInner"],"kind":"struct"},"18:521:19405":{"crate_id":18,"path":["memchr","memmem","prefilter","Prefilter"],"kind":"enum"},"14:187:14095":{"crate_id":14,"path":["rustc_demangle","SizeLimitedFmtAdapter"],"kind":"struct"},"1:3450:25917":{"crate_id":1,"path":["std","io","Write","write_fmt","Adapter"],"kind":"struct"},"1:3984:2232":{"crate_id":1,"path":["std","os","unix","fs","DirEntryExt"],"kind":"trait"},"1:11136:23429":{"crate_id":1,"path":["std","sys_common","once","futex","CompletionGuard"],"kind":"struct"},"17:12331:18572":{"crate_id":17,"path":["object","macho","UuidCommand"],"kind":"struct"},"17:9946:15351":{"crate_id":17,"path":["object","read","elf","version","VerdefIterator"],"kind":"struct"},"2:10030:7631":{"crate_id":2,"path":["core","slice","iter","SplitMut"],"kind":"struct"},"18:80:19380":{"crate_id":18,"path":["memchr","memchr","iter","Memchr"],"kind":"struct"},"5:7179:2103":{"crate_id":5,"path":["alloc","ffi","c_str","NulError"],"kind":"struct"},"2:22033:175":{"crate_id":2,"path":["core","num","nonzero","NonZeroU8"],"kind":"struct"},"2:44790:2490":{"crate_id":2,"path":["core","core_arch","simd","i8x16"],"kind":"struct"},"16:8156:15178":{"crate_id":16,"path":["gimli","read","unit","DebugTypes"],"kind":"struct"},"5:6680:241":{"crate_id":5,"path":["alloc","vec","Vec"],"kind":"struct"},"1:2870:126":{"crate_id":1,"path":["std","io","error","Error"],"kind":"struct"},"6:4314:12213":{"crate_id":6,"path":["libc","unix","linux_like","linux","dqblk"],"kind":"struct"},"1:8326:2326":{"crate_id":1,"path":["std","path","Prefix"],"kind":"enum"},"2:9455:8131":{"crate_id":2,"path":["core","slice","sort","InsertionHole"],"kind":"struct"},"1:6375:2372":{"crate_id":1,"path":["std","sync","once","OnceState"],"kind":"struct"},"1:10648:2126":{"crate_id":1,"path":["std","sys","unix","fs","OpenOptions"],"kind":"struct"},"16:2668:14173":{"crate_id":16,"path":["gimli","common","RawRangeListsOffset"],"kind":"struct"},"17:11471:18044":{"crate_id":17,"path":["object","elf","Rela64"],"kind":"struct"},"1:737:140":{"crate_id":1,"path":["std","collections","hash","map","HashMap"],"kind":"struct"},"17:9108:33543":{"crate_id":17,"path":["object","read","any","SectionIteratorInternal"],"kind":"enum"},"1:8136:2163":{"crate_id":1,"path":["std","io","Split"],"kind":"struct"},"6:1609:9700":{"crate_id":6,"path":["libc","unix","linux_like","Dl_info"],"kind":"struct"},"5:1706:2007":{"crate_id":5,"path":["alloc","collections","btree","map","DrainFilter"],"kind":"struct"},"2:21722:27555":{"crate_id":2,"path":["core","num","fmt","Part"],"kind":"enum"},"16:6218:15104":{"crate_id":16,"path":["gimli","read","dwarf","Unit"],"kind":"struct"},"1:936:2011":{"crate_id":1,"path":["std","collections","hash","map","RawEntryBuilderMut"],"kind":"struct"},"16:3585:14192":{"crate_id":16,"path":["gimli","arch","X86"],"kind":"struct"},"1:4577:24128":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt","st_mtime"],"kind":"foreign_type"},"2:43398:8159":{"crate_id":2,"path":["core","str","UnsafeBytesToStr"],"kind":"struct"},"2:42526:7634":{"crate_id":2,"path":["core","slice","iter","RChunks"],"kind":"struct"},"2:48948:243":{"crate_id":2,"path":["core","core_simd","fmt","fmt","Wrapper"],"kind":"struct"},"1:6087:2515":{"crate_id":1,"path":["std","sync","mpmc","waker","Waker"],"kind":"struct"},"5:3663:2040":{"crate_id":5,"path":["alloc","collections","linked_list","Cursor"],"kind":"struct"},"2:2686:107":{"crate_id":2,"path":["core","marker","Copy"],"kind":"trait"},"2:6650:28983":{"crate_id":2,"path":["core","iter","adapters","GenericShunt"],"kind":"struct"},"15:180:14105":{"crate_id":15,"path":["addr2line","LocationRangeIter"],"kind":"struct"},"1:7654:2020":{"crate_id":1,"path":["std","collections","hash","map","RandomState"],"kind":"struct"},"1:7505:23432":{"crate_id":1,"path":["std","backtrace_rs","print","BacktraceFrameFmt"],"kind":"struct"},"17:13865:19367":{"crate_id":17,"path":["object","pe","ImportObjectHeader"],"kind":"struct"},"2:2810:8014":{"crate_id":2,"path":["core","ops","arith","DivAssign"],"kind":"trait"},"1:4575:24126":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt","st_atime"],"kind":"foreign_type"},"17:12894:19296":{"crate_id":17,"path":["object","pe","MaskedRichHeaderEntry"],"kind":"struct"},"17:3142:15395":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbolIterator"],"kind":"struct"},"1:11875:1037":{"crate_id":1,"path":["std","pointer"],"kind":"primitive"},"1:10638:23475":{"crate_id":1,"path":["std","sys","unix","fs","FileAttr"],"kind":"struct"},"2:46604:7548":{"crate_id":2,"path":["core","core_arch","x86","__m256"],"kind":"struct"},"17:9275:33228":{"crate_id":17,"path":["object","read","any","SymbolIteratorInternal"],"kind":"enum"},"2:42201:27596":{"crate_id":2,"path":["core","slice","ascii","EscapeByte"],"kind":"struct"},"2:7127:132":{"crate_id":2,"path":["core","iter","traits","collect","FromIterator"],"kind":"trait"},"17:11785:18540":{"crate_id":17,"path":["object","macho","DyldCacheImageInfo"],"kind":"struct"},"1:3678:2211":{"crate_id":1,"path":["std","net","tcp","TcpStream"],"kind":"struct"},"2:39677:7976":{"crate_id":2,"path":["core","iter","adapters","peekable","Peekable"],"kind":"struct"},"2:7131:149":{"crate_id":2,"path":["core","iter","traits","collect","IntoIterator"],"kind":"trait"},"2:2912:115":{"crate_id":2,"path":["core","ops","deref","Deref"],"kind":"trait"},"2:39421:27523":{"crate_id":2,"path":["core","ffi","c_str","FromBytesWithNulErrorKind"],"kind":"enum"},"5:770:95":{"crate_id":5,"path":["alloc","collections","binary_heap","BinaryHeap"],"kind":"struct"},"6:6012:31825":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","sifields_sigchld"],"kind":"struct"},"2:7247:156":{"crate_id":2,"path":["core","iter","traits","iterator","Iterator"],"kind":"trait"},"17:10104:15387":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandIterator"],"kind":"struct"},"1:11886:734":{"crate_id":1,"path":["std","i32"],"kind":"primitive"},"17:12113:18559":{"crate_id":17,"path":["object","macho","DylinkerCommand"],"kind":"struct"},"11:985:2016":{"crate_id":11,"path":["hashbrown","map","Entry"],"kind":"enum"},"6:4387:12219":{"crate_id":6,"path":["libc","unix","linux_like","linux","msginfo"],"kind":"struct"},"2:46300:2484":{"crate_id":2,"path":["core","core_arch","simd","i32x16"],"kind":"struct"},"2:2513:234":{"crate_id":2,"path":["core","convert","TryFrom"],"kind":"trait"},"1:2361:2117":{"crate_id":1,"path":["std","fs","read_link"],"kind":"function"},"1:10826:2343":{"crate_id":1,"path":["std","sys","unix","process","process_common","Stdio"],"kind":"enum"},"12:0:1758":{"crate_id":12,"path":["rustc_std_workspace_alloc"],"kind":"module"},"6:1541:9693":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_in"],"kind":"struct"},"1:8737:2348":{"crate_id":1,"path":["std","process","ExitStatus"],"kind":"struct"},"17:12293:18569":{"crate_id":17,"path":["object","macho","TwolevelHintsCommand"],"kind":"struct"},"2:39584:7969":{"crate_id":2,"path":["core","iter","adapters","enumerate","Enumerate"],"kind":"struct"},"16:6376:15114":{"crate_id":16,"path":["gimli","read","aranges","DebugAranges"],"kind":"struct"},"1:6135:22097":{"crate_id":1,"path":["std","sync","mpmc","zero","ZeroToken"],"kind":"struct"},"17:11459:18043":{"crate_id":17,"path":["object","elf","Rel64"],"kind":"struct"},"2:9991:7644":{"crate_id":2,"path":["core","slice","iter","SplitInclusive"],"kind":"struct"},"1:5912:2382":{"crate_id":1,"path":["std","sync","mpmc","counter","Sender"],"kind":"struct"},"16:7652:195":{"crate_id":16,"path":["gimli","read","rnglists","Range"],"kind":"struct"},"2:48974:243":{"crate_id":2,"path":["core","core_simd","fmt","fmt","Wrapper"],"kind":"struct"},"1:3171:2183":{"crate_id":1,"path":["std","io","stdio","StdinLock"],"kind":"struct"},"5:4389:31271":{"crate_id":5,"path":["alloc","collections","vec_deque","truncate","Dropper"],"kind":"struct"},"2:12243:7808":{"crate_id":2,"path":["core","future","poll_fn","PollFn"],"kind":"struct"},"2:42921:7656":{"crate_id":2,"path":["core","str","iter","SplitWhitespace"],"kind":"struct"},"2:29994:2036":{"crate_id":2,"path":["core","mem","manually_drop","ManuallyDrop"],"kind":"struct"},"17:11069:15285":{"crate_id":17,"path":["object","read","CompressionFormat"],"kind":"enum"},"2:10224:7641":{"crate_id":2,"path":["core","slice","iter","RSplitNMut"],"kind":"struct"},"11:1832:2001":{"crate_id":11,"path":["hashbrown","set","Iter"],"kind":"struct"},"2:41039:87":{"crate_id":2,"path":["core","sync","atomic","AtomicU16"],"kind":"struct"},"2:2794:8012":{"crate_id":2,"path":["core","ops","arith","Neg"],"kind":"trait"},"5:3995:31244":{"crate_id":5,"path":["alloc","collections","vec_deque","drain","drop","DropGuard"],"kind":"struct"},"6:5060:12291":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_can"],"kind":"struct"},"1:5928:203":{"crate_id":1,"path":["std","sync","mpmc","counter","Receiver"],"kind":"struct"},"2:9086:191":{"crate_id":2,"path":["core","fmt","Pointer"],"kind":"trait"},"17:13316:19325":{"crate_id":17,"path":["object","pe","ImageThunkData64"],"kind":"struct"},"17:9178:15266":{"crate_id":17,"path":["object","read","any","ComdatSectionIterator"],"kind":"struct"},"17:8283:15247":{"crate_id":17,"path":["object","common","BinaryFormat"],"kind":"enum"},"1:10994:2348":{"crate_id":1,"path":["std","sys","unix","process","process_inner","ExitStatus"],"kind":"struct"},"6:5054:12290":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_can_addr"],"kind":"union"},"2:2738:1892":{"crate_id":2,"path":["core","marker","Unpin"],"kind":"trait"},"2:42443:7630":{"crate_id":2,"path":["core","slice","iter","ChunksMut"],"kind":"struct"},"16:8256:15182":{"crate_id":16,"path":["gimli","read","StoreOnHeap"],"kind":"struct"},"17:13344:19328":{"crate_id":17,"path":["object","pe","ImageTlsDirectory32"],"kind":"struct"},"2:45426:2491":{"crate_id":2,"path":["core","core_arch","simd","i8x32"],"kind":"struct"},"2:41455:7593":{"crate_id":2,"path":["core","fmt","num","LowerHex"],"kind":"struct"},"5:6232:2006":{"crate_id":5,"path":["alloc","vec","drain","Drain"],"kind":"struct"},"17:11844:18542":{"crate_id":17,"path":["object","macho","MachHeader32"],"kind":"struct"},"17:9973:15352":{"crate_id":17,"path":["object","read","elf","version","VerneedIterator"],"kind":"struct"},"2:3394:7728":{"crate_id":2,"path":["core","any","Demand"],"kind":"struct"},"2:2594:126":{"crate_id":2,"path":["core","error","Error"],"kind":"trait"},"5:5025:2366":{"crate_id":5,"path":["alloc","rc","Weak"],"kind":"struct"},"2:2236:97":{"crate_id":2,"path":["core","borrow","BorrowMut"],"kind":"trait"},"6:1731:9711":{"crate_id":6,"path":["libc","unix","linux_like","utsname"],"kind":"struct"},"1:11018:19963":{"crate_id":1,"path":["std","sys","unix","thread","cgroups","Cgroup"],"kind":"enum"},"2:39664:7964":{"crate_id":2,"path":["core","iter","adapters","map_while","MapWhile"],"kind":"struct"},"2:50275:28207":{"crate_id":2,"path":["core","core_simd","vector","ptr","SimdConstPtr"],"kind":"struct"},"5:3119:31230":{"crate_id":5,"path":["alloc","collections","btree","set","DifferenceInner"],"kind":"enum"},"2:25641:2215":{"crate_id":2,"path":["core","num","wrapping","Wrapping"],"kind":"struct"},"5:7042:2003":{"crate_id":5,"path":["alloc","collections","btree","set","IntoIter"],"kind":"struct"},"1:2210:127":{"crate_id":1,"path":["std","fs","File"],"kind":"struct"},"17:10823:15274":{"crate_id":17,"path":["object","read","SectionIndex"],"kind":"struct"},"6:5858:12920":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_mmap_hdr"],"kind":"struct"},"2:41946:7813":{"crate_id":2,"path":["core","hash","sip","SipHasher13"],"kind":"struct"},"6:6593:2297":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stat"],"kind":"struct"},"2:40733:8033":{"crate_id":2,"path":["core","option","Item"],"kind":"struct"},"17:10897:15278":{"crate_id":17,"path":["object","read","SymbolMapName"],"kind":"struct"},"18:636:33786":{"crate_id":18,"path":["memchr","memmem","twoway","ApproximateByteSet"],"kind":"struct"},"17:13698:19356":{"crate_id":17,"path":["object","pe","ImageEnclaveConfig32"],"kind":"struct"},"1:641:1981":{"crate_id":1,"path":["std","backtrace","BacktraceFrame"],"kind":"struct"},"17:13516:19346":{"crate_id":17,"path":["object","pe","ImageLoadConfigDirectory32"],"kind":"struct"},"2:11589:7651":{"crate_id":2,"path":["core","str","pattern","Searcher"],"kind":"trait"},"17:12046:18554":{"crate_id":17,"path":["object","macho","SubFrameworkCommand"],"kind":"struct"},"6:7479:12436":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_rwlockattr_t"],"kind":"struct"},"1:7605:1960":{"crate_id":1,"path":["std","thread","Thread"],"kind":"struct"},"5:1232:2019":{"crate_id":5,"path":["alloc","collections","btree","map","entry","OccupiedError"],"kind":"struct"},"5:7264:7696":{"crate_id":5,"path":["alloc","string","FromUtf16Error"],"kind":"struct"},"6:123:8461":{"crate_id":6,"path":["libc","unix","fpos_t"],"kind":"enum"},"16:7366:15144":{"crate_id":16,"path":["gimli","read","op","EvaluationResult"],"kind":"enum"},"16:5032:14860":{"crate_id":16,"path":["gimli","constants","DwLnct"],"kind":"struct"},"1:1054:2016":{"crate_id":1,"path":["std","collections","hash","map","Entry"],"kind":"enum"},"1:2575:2165":{"crate_id":1,"path":["std","io","buffered","bufwriter","WriterPanicked"],"kind":"struct"},"17:13689:19355":{"crate_id":17,"path":["object","pe","ImageRuntimeFunctionEntry"],"kind":"struct"},"1:8231:2266":{"crate_id":1,"path":["std","os","unix","ucred","UCred"],"kind":"struct"},"16:6981:15139":{"crate_id":16,"path":["gimli","read","loclists","LocListIter"],"kind":"struct"},"6:62:8406":{"crate_id":6,"path":["libc","unix","DIR"],"kind":"enum"},"2:41119:88":{"crate_id":2,"path":["core","sync","atomic","AtomicU32"],"kind":"struct"},"17:8909:2162":{"crate_id":17,"path":["object","read","util","Bytes"],"kind":"struct"},"2:7169:119":{"crate_id":2,"path":["core","iter","traits","double_ended","DoubleEndedIterator"],"kind":"trait"},"2:20832:2242":{"crate_id":2,"path":["core","core_simd","masks","to_bitmask","sealed","Sealed"],"kind":"trait"},"17:13842:19365":{"crate_id":17,"path":["object","pe","NonPagedDebugInfo"],"kind":"struct"},"1:1600:2025":{"crate_id":1,"path":["std","collections","hash","set","Union"],"kind":"struct"},"2:4749:29877":{"crate_id":2,"path":["core","ffi","sealed_trait","VaArgSafe"],"kind":"trait"},"17:8971:127":{"crate_id":17,"path":["object","read","any","File"],"kind":"struct"},"1:1789:2065":{"crate_id":1,"path":["std","env","Vars"],"kind":"struct"},"2:38905:199":{"crate_id":2,"path":["core","ops","range","RangeTo"],"kind":"struct"},"2:2684:223":{"crate_id":2,"path":["core","marker","StructuralPartialEq"],"kind":"trait"},"6:4903:12274":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_rcvinfo"],"kind":"struct"},"2:11536:2333":{"crate_id":2,"path":["core","str","traits","FromStr"],"kind":"trait"},"2:21784:2221":{"crate_id":2,"path":["core","num","error","IntErrorKind"],"kind":"enum"},"2:7561:27873":{"crate_id":2,"path":["core","net","display_buffer","DisplayBuffer"],"kind":"struct"},"17:13145:19311":{"crate_id":17,"path":["object","pe","ImageSymbolEx"],"kind":"struct"},"17:13639:19350":{"crate_id":17,"path":["object","pe","ImageHotPatchHashes"],"kind":"struct"},"1:10856:2350":{"crate_id":1,"path":["std","sys","unix","process","process_common","ExitCode"],"kind":"struct"},"1:10411:2180":{"crate_id":1,"path":["std","sys","unix","stdio","Stderr"],"kind":"struct"},"1:7843:2174":{"crate_id":1,"path":["std","io","buffered","IntoInnerError"],"kind":"struct"},"14:215:14096":{"crate_id":14,"path":["rustc_demangle","TryDemangleError"],"kind":"struct"},"2:9334:7810":{"crate_id":2,"path":["core","hash","BuildHasher"],"kind":"trait"},"6:6802:13351":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","seccomp_notif_sizes"],"kind":"struct"},"1:2345:2112":{"crate_id":1,"path":["std","fs","metadata"],"kind":"function"},"1:8036:2131":{"crate_id":1,"path":["std","io","readbuf","BorrowedCursor"],"kind":"struct"},"1:2541:2173":{"crate_id":1,"path":["std","io","buffered","bufwriter","BufWriter"],"kind":"struct"},"1:11153:22113":{"crate_id":1,"path":["std","sys_common","process","CommandEnv"],"kind":"struct"},"5:6592:7721":{"crate_id":5,"path":["alloc","vec","in_place_drop","InPlaceDstBufDrop"],"kind":"struct"},"6:4510:12234":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_effect"],"kind":"struct"},"2:9224:28948":{"crate_id":2,"path":["core","fmt","fmt","BorrowedPlaceholder"],"kind":"struct"},"5:3078:94":{"crate_id":5,"path":["alloc","collections","btree","set","BTreeSet"],"kind":"struct"},"16:5847:15093":{"crate_id":16,"path":["gimli","read","cfi","PartialFrameDescriptionEntry"],"kind":"struct"},"11:1518:14079":{"crate_id":11,"path":["hashbrown","rustc_entry","RustcEntry"],"kind":"enum"},"17:11813:15435":{"crate_id":17,"path":["object","macho","FatHeader"],"kind":"struct"},"2:43386:8163":{"crate_id":2,"path":["core","str","IsAsciiWhitespace"],"kind":"struct"},"6:4271:12209":{"crate_id":6,"path":["libc","unix","linux_like","linux","rlimit64"],"kind":"struct"},"16:7478:15149":{"crate_id":16,"path":["gimli","read","pubnames","DebugPubNames"],"kind":"struct"},"16:4969:14845":{"crate_id":16,"path":["gimli","constants","DwLns"],"kind":"struct"},"5:3612:31244":{"crate_id":5,"path":["alloc","collections","linked_list","drop","DropGuard"],"kind":"struct"},"2:20624:2444":{"crate_id":2,"path":["core","core_simd","elements","int","SimdInt"],"kind":"trait"},"2:9746:2242":{"crate_id":2,"path":["core","slice","index","private_slice_index","Sealed"],"kind":"trait"},"17:13033:19304":{"crate_id":17,"path":["object","pe","ImageRomHeaders"],"kind":"struct"},"1:8719:2347":{"crate_id":1,"path":["std","process","CommandArgs"],"kind":"struct"},"1:2219:2109":{"crate_id":1,"path":["std","fs","read_to_string"],"kind":"function"},"17:10885:15277":{"crate_id":17,"path":["object","read","SymbolMap"],"kind":"struct"},"17:10491:15444":{"crate_id":17,"path":["object","read","pe","section","PeSection"],"kind":"struct"},"17:10626:15479":{"crate_id":17,"path":["object","read","pe","import","DelayLoadDescriptorIterator"],"kind":"struct"},"2:44579:2466":{"crate_id":2,"path":["core","core_arch","simd","f32x2"],"kind":"struct"},"18:690:19401":{"crate_id":18,"path":["memchr","memmem","FinderRev"],"kind":"struct"},"17:9696:15312":{"crate_id":17,"path":["object","read","elf","section","SectionTable"],"kind":"struct"},"2:44644:2433":{"crate_id":2,"path":["core","core_arch","simd","u8x16"],"kind":"struct"},"2:42911:7667":{"crate_id":2,"path":["core","str","iter","LinesAny"],"kind":"struct"},"2:44888:2485":{"crate_id":2,"path":["core","core_arch","simd","i64x2"],"kind":"struct"},"11:725:2004":{"crate_id":11,"path":["hashbrown","map","Keys"],"kind":"struct"},"17:9312:15269":{"crate_id":17,"path":["object","read","any","DynamicRelocationIterator"],"kind":"struct"},"16:7519:15153":{"crate_id":16,"path":["gimli","read","pubtypes","PubTypesEntryIter"],"kind":"struct"},"17:12770:19293":{"crate_id":17,"path":["object","pe","ImageDosHeader"],"kind":"struct"},"17:11446:18042":{"crate_id":17,"path":["object","elf","Rela32"],"kind":"struct"},"1:7258:22122":{"crate_id":1,"path":["std","panicking","Hook"],"kind":"enum"},"17:9853:15376":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdatSectionIterator"],"kind":"struct"},"1:355:1973":{"crate_id":1,"path":["std","thread","scoped","Scope"],"kind":"struct"},"2:20837:2435":{"crate_id":2,"path":["core","core_simd","masks","to_bitmask","ToBitMask"],"kind":"trait"},"2:43454:8178":{"crate_id":2,"path":["core","time","TryFromFloatSecsErrorKind"],"kind":"enum"},"2:39987:2190":{"crate_id":2,"path":["core","iter","sources","repeat","Repeat"],"kind":"struct"},"2:43246:7693":{"crate_id":2,"path":["core","str","pattern","TwoWaySearcher"],"kind":"struct"},"16:6293:15107":{"crate_id":16,"path":["gimli","read","reader","ReaderOffsetId"],"kind":"struct"},"17:8753:15258":{"crate_id":17,"path":["object","endian","U64Bytes"],"kind":"struct"},"5:7193:27523":{"crate_id":5,"path":["alloc","ffi","c_str","FromBytesWithNulErrorKind"],"kind":"enum"},"1:7835:22821":{"crate_id":1,"path":["std","io","buffered","linewritershim","LineWriterShim"],"kind":"struct"},"16:8214:15181":{"crate_id":16,"path":["gimli","read","value","Value"],"kind":"enum"},"17:9876:15377":{"crate_id":17,"path":["object","read","elf","note","Note"],"kind":"struct"},"17:11502:18046":{"crate_id":17,"path":["object","elf","ProgramHeader64"],"kind":"struct"},"1:11896:1112":{"crate_id":1,"path":["std","reference"],"kind":"primitive"},"1:1068:2017":{"crate_id":1,"path":["std","collections","hash","map","OccupiedEntry"],"kind":"struct"},"16:7743:15165":{"crate_id":16,"path":["gimli","read","unit","DebugInfo"],"kind":"struct"},"1:7810:128":{"crate_id":1,"path":["std","fs","FileType"],"kind":"struct"},"2:43236:7692":{"crate_id":2,"path":["core","str","pattern","EmptyNeedle"],"kind":"struct"},"1:11201:19867":{"crate_id":1,"path":["std","sys_common","wtf8","Wtf8Buf"],"kind":"struct"},"17:13082:19308":{"crate_id":17,"path":["object","pe","AnonObjectHeaderBigobj"],"kind":"struct"},"16:7596:15158":{"crate_id":16,"path":["gimli","read","rnglists","RawRngListEntry"],"kind":"enum"},"2:42605:7663":{"crate_id":2,"path":["core","str","error","ParseBoolError"],"kind":"struct"},"1:3211:2185":{"crate_id":1,"path":["std","io","stdio","StdoutLock"],"kind":"struct"},"17:11615:18054":{"crate_id":17,"path":["object","elf","NoteHeader32"],"kind":"struct"},"16:4596:14736":{"crate_id":16,"path":["gimli","constants","DwVis"],"kind":"struct"},"16:7077:15141":{"crate_id":16,"path":["gimli","read","op","DieReference"],"kind":"enum"},"16:4932:14832":{"crate_id":16,"path":["gimli","constants","DwDefaulted"],"kind":"struct"},"6:4726:12253":{"crate_id":6,"path":["libc","unix","linux_like","linux","inotify_event"],"kind":"struct"},"14:202:7694":{"crate_id":14,"path":["rustc_demangle","v0","ParseError"],"kind":"enum"},"2:48922:243":{"crate_id":2,"path":["core","core_simd","fmt","fmt","Wrapper"],"kind":"struct"},"1:3169:2182":{"crate_id":1,"path":["std","io","stdio","Stdin"],"kind":"struct"},"1:11878:1380":{"crate_id":1,"path":["std","str"],"kind":"primitive"},"1:11854:19931":{"crate_id":1,"path":["std","backtrace_rs","print","PrintFmt"],"kind":"enum"},"2:2826:8017":{"crate_id":2,"path":["core","ops","bit","BitAnd"],"kind":"trait"},"2:2308:123":{"crate_id":2,"path":["core","cmp","Eq"],"kind":"trait"},"6:4422:12223":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_absinfo"],"kind":"struct"},"2:2580:114":{"crate_id":2,"path":["core","default","Default"],"kind":"trait"},"6:6004:12932":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ptrace_syscall_info"],"kind":"struct"},"16:6132:15101":{"crate_id":16,"path":["gimli","read","cfi","CallFrameInstructionIter"],"kind":"struct"},"16:6919:32811":{"crate_id":16,"path":["gimli","read","loclists","LocListsFormat"],"kind":"enum"},"1:9032:2392":{"crate_id":1,"path":["std","time","Instant"],"kind":"struct"},"2:3382:7724":{"crate_id":2,"path":["core","any","Provider"],"kind":"trait"},"6:6045:12934":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","utmpx"],"kind":"struct"},"2:4:1002":{"crate_id":2,"path":["core","panic"],"kind":"macro"},"17:8195:15229":{"crate_id":17,"path":["object","common","Architecture"],"kind":"enum"},"17:11641:18056":{"crate_id":17,"path":["object","elf","HashHeader"],"kind":"struct"},"2:2137:580":{"crate_id":2,"path":["core","ptr","drop_in_place"],"kind":"function"},"5:7222:2102":{"crate_id":5,"path":["alloc","ffi","c_str","IntoStringError"],"kind":"struct"},"2:2865:8026":{"crate_id":2,"path":["core","ops","bit","ShlAssign"],"kind":"trait"},"16:4904:14828":{"crate_id":16,"path":["gimli","constants","DwIdx"],"kind":"struct"},"2:30122:27449":{"crate_id":2,"path":["core","ptr","alignment","AlignmentEnum32"],"kind":"enum"},"2:9569:27641":{"crate_id":2,"path":["core","slice","sort","merge_sort","RunVec"],"kind":"struct"},"2:11143:7657":{"crate_id":2,"path":["core","str","converts","from_utf8"],"kind":"function"},"2:46760:7556":{"crate_id":2,"path":["core","core_arch","x86","cpuid","CpuidResult"],"kind":"struct"},"17:9933:15353":{"crate_id":17,"path":["object","read","elf","version","VersionTable"],"kind":"struct"},"16:5071:14875":{"crate_id":16,"path":["gimli","constants","DwMacro"],"kind":"struct"},"2:42964:7665":{"crate_id":2,"path":["core","str","iter","EscapeUnicode"],"kind":"struct"},"6:5048:12289":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_txtime"],"kind":"struct"},"2:48565:2512":{"crate_id":2,"path":["core","core_simd","swizzle","Which"],"kind":"enum"},"1:3459:2135":{"crate_id":1,"path":["std","io","Seek"],"kind":"trait"},"2:42434:7626":{"crate_id":2,"path":["core","slice","iter","Chunks"],"kind":"struct"},"17:10334:15267":{"crate_id":17,"path":["object","read","macho","symbol","SymbolTable"],"kind":"struct"},"17:12138:18561":{"crate_id":17,"path":["object","macho","RoutinesCommand32"],"kind":"struct"},"1:2478:2172":{"crate_id":1,"path":["std","io","buffered","bufreader","BufReader"],"kind":"struct"},"6:1710:9709":{"crate_id":6,"path":["libc","unix","linux_like","epoll_event"],"kind":"struct"},"1:11484:14114":{"crate_id":1,"path":["std","backtrace_rs","backtrace","libunwind","Frame"],"kind":"enum"},"2:41199:89":{"crate_id":2,"path":["core","sync","atomic","AtomicU64"],"kind":"struct"},"2:5457:7972":{"crate_id":2,"path":["core","iter","adapters","flatten","FlatMap"],"kind":"struct"},"16:2879:14182":{"crate_id":16,"path":["gimli","common","DebugFrameOffset"],"kind":"struct"},"2:2497:74":{"crate_id":2,"path":["core","convert","AsRef"],"kind":"trait"},"2:21593:28411":{"crate_id":2,"path":["core","num","dec2flt","decimal","Decimal"],"kind":"struct"},"2:22363:166":{"crate_id":2,"path":["core","num","nonzero","NonZeroI128"],"kind":"struct"},"2:3093:2060":{"crate_id":2,"path":["core","ops","range","RangeBounds"],"kind":"trait"},"16:7103:15142":{"crate_id":16,"path":["gimli","read","op","Operation"],"kind":"enum"},"16:7859:15170":{"crate_id":16,"path":["gimli","read","unit","AttributeValue"],"kind":"enum"},"6:0:807":{"crate_id":6,"path":["libc"],"kind":"module"},"16:5708:15088":{"crate_id":16,"path":["gimli","read","cfi","SectionBaseAddresses"],"kind":"struct"},"1:8901:105":{"crate_id":1,"path":["std","sync","mpmc","context","Context"],"kind":"struct"},"1:3912:2227":{"crate_id":1,"path":["std","os","unix","fs","FileExt"],"kind":"trait"},"5:6563:7719":{"crate_id":5,"path":["alloc","vec","set_len_on_drop","SetLenOnDrop"],"kind":"struct"},"1:11234:23850":{"crate_id":1,"path":["std","sys_common","wtf8","EncodeWide"],"kind":"struct"},"2:11399:7644":{"crate_id":2,"path":["core","str","iter","SplitInclusive"],"kind":"struct"},"11:669:2009":{"crate_id":11,"path":["hashbrown","map","IntoKeys"],"kind":"struct"},"2:42665:7638":{"crate_id":2,"path":["core","str","iter","RSplit"],"kind":"struct"},"16:4624:14740":{"crate_id":16,"path":["gimli","constants","DwVirtuality"],"kind":"struct"},"6:5743:12911":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","aiocb"],"kind":"struct"},"2:6846:2189":{"crate_id":2,"path":["core","iter","sources","empty","Empty"],"kind":"struct"},"17:13453:19339":{"crate_id":17,"path":["object","pe","ImageDynamicRelocationTable"],"kind":"struct"},"2:46698:7554":{"crate_id":2,"path":["core","core_arch","x86","__m256bh"],"kind":"struct"},"16:7837:15169":{"crate_id":16,"path":["gimli","read","unit","DebuggingInformationEntry"],"kind":"struct"},"1:6623:22852":{"crate_id":1,"path":["std","sync","rwlock","fmt","LockedPlaceholder"],"kind":"struct"},"6:541:8786":{"crate_id":6,"path":["libc","unix","iovec"],"kind":"struct"},"11:1065:32604":{"crate_id":11,"path":["hashbrown","map","KeyOrRef"],"kind":"enum"},"17:10635:15470":{"crate_id":17,"path":["object","read","pe","relocation","RelocationBlockIterator"],"kind":"struct"},"17:8521:15254":{"crate_id":17,"path":["object","common","FileFlags"],"kind":"enum"},"2:3983:28257":{"crate_id":2,"path":["core","asserting","TryCaptureWithoutDebug"],"kind":"struct"},"6:4277:12210":{"crate_id":6,"path":["libc","unix","linux_like","linux","glob_t"],"kind":"struct"},"16:6201:15103":{"crate_id":16,"path":["gimli","read","dwarf","DwarfPackage"],"kind":"struct"},"5:6278:31244":{"crate_id":5,"path":["alloc","vec","drain","drop","DropGuard"],"kind":"struct"},"2:11595:7650":{"crate_id":2,"path":["core","str","pattern","ReverseSearcher"],"kind":"trait"},"6:4974:12282":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_setup"],"kind":"struct"},"2:39484:2106":{"crate_id":2,"path":["core","ffi","VaListImpl"],"kind":"struct"},"17:11600:18053":{"crate_id":17,"path":["object","elf","Vernaux"],"kind":"struct"},"16:2448:14164":{"crate_id":16,"path":["gimli","common","DebugArangesOffset"],"kind":"struct"},"18:699:19402":{"crate_id":18,"path":["memchr","memmem","FinderBuilder"],"kind":"struct"},"6:6575:13340":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","siginfo_t"],"kind":"struct"},"2:48987:243":{"crate_id":2,"path":["core","core_simd","fmt","fmt","Wrapper"],"kind":"struct"},"2:42374:28943":{"crate_id":2,"path":["core","slice","iter","GenericSplitN"],"kind":"struct"},"2:5515:7963":{"crate_id":2,"path":["core","iter","adapters","flatten","Flatten"],"kind":"struct"},"2:22831:2214":{"crate_id":2,"path":["core","num","saturating","Saturating"],"kind":"struct"},"17:11721:18538":{"crate_id":17,"path":["object","macho","DyldCacheHeader"],"kind":"struct"},"16:7669:15161":{"crate_id":16,"path":["gimli","read","str","DebugStr"],"kind":"struct"},"17:8256:15227":{"crate_id":17,"path":["object","common","AddressSize"],"kind":"enum"},"11:1852:2022":{"crate_id":11,"path":["hashbrown","set","Intersection"],"kind":"struct"},"6:4786:12261":{"crate_id":6,"path":["libc","unix","linux_like","linux","j1939_filter"],"kind":"struct"},"2:9299:143":{"crate_id":2,"path":["core","hash","Hasher"],"kind":"trait"},"16:7293:15143":{"crate_id":16,"path":["gimli","read","op","Piece"],"kind":"struct"},"1:1827:2076":{"crate_id":1,"path":["std","env","SplitPaths"],"kind":"struct"},"1:2373:2123":{"crate_id":1,"path":["std","fs","read_dir"],"kind":"function"},"17:10316:15389":{"crate_id":17,"path":["object","read","macho","section","MachOSectionInternal"],"kind":"struct"},"5:3140:2024":{"crate_id":5,"path":["alloc","collections","btree","set","SymmetricDifference"],"kind":"struct"},"6:1716:2253":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_un"],"kind":"struct"},"2:22066:172":{"crate_id":2,"path":["core","num","nonzero","NonZeroU16"],"kind":"struct"},"1:9364:127":{"crate_id":1,"path":["std","sys","unix","fs","File"],"kind":"struct"},"5:3107:2001":{"crate_id":5,"path":["alloc","collections","btree","set","Iter"],"kind":"struct"},"17:12419:18578":{"crate_id":17,"path":["object","macho","VersionMinCommand"],"kind":"struct"},"5:1394:2004":{"crate_id":5,"path":["alloc","collections","btree","map","Keys"],"kind":"struct"},"2:43279:7675":{"crate_id":2,"path":["core","str","lossy","Utf8Chunks"],"kind":"struct"},"17:10615:15469":{"crate_id":17,"path":["object","read","pe","import","DelayLoadImportTable"],"kind":"struct"},"2:38830:8028":{"crate_id":2,"path":["core","ops","index_range","IndexRange"],"kind":"struct"},"16:7757:15166":{"crate_id":16,"path":["gimli","read","unit","DebugInfoUnitHeadersIter"],"kind":"struct"},"2:41462:7594":{"crate_id":2,"path":["core","fmt","num","UpperHex"],"kind":"struct"},"11:815:2011":{"crate_id":11,"path":["hashbrown","map","RawEntryBuilderMut"],"kind":"struct"},"2:3171:133":{"crate_id":2,"path":["core","ops","try_trait","FromResidual"],"kind":"trait"},"17:11861:18543":{"crate_id":17,"path":["object","macho","MachHeader64"],"kind":"struct"},"17:10283:15392":{"crate_id":17,"path":["object","read","macho","segment","MachOSegmentInternal"],"kind":"struct"},"11:1555:14081":{"crate_id":11,"path":["hashbrown","rustc_entry","RustcVacantEntry"],"kind":"struct"},"1:10813:2086":{"crate_id":1,"path":["std","sys","unix","os","JoinPathsError"],"kind":"struct"},"16:8072:15173":{"crate_id":16,"path":["gimli","read","unit","EntriesRaw"],"kind":"struct"},"1:3326:2190":{"crate_id":1,"path":["std","io","util","Repeat"],"kind":"struct"},"2:21120:2463":{"crate_id":2,"path":["core","core_simd","ord","SimdOrd"],"kind":"trait"},"1:10838:19936":{"crate_id":1,"path":["std","sys","unix","process","process_common","ProgramKind"],"kind":"enum"},"2:10742:7633":{"crate_id":2,"path":["core","slice","iter","GroupByMut"],"kind":"struct"},"1:11873:1494":{"crate_id":1,"path":["std","unit"],"kind":"primitive"},"17:13625:19349":{"crate_id":17,"path":["object","pe","ImageHotPatchBase"],"kind":"struct"},"2:39281:7786":{"crate_id":2,"path":["core","char","decode","DecodeUtf16"],"kind":"struct"},"11:1085:14077":{"crate_id":11,"path":["hashbrown","map","OccupiedEntryRef"],"kind":"struct"},"17:11902:18546":{"crate_id":17,"path":["object","macho","SegmentCommand32"],"kind":"struct"},"16:4728:14796":{"crate_id":16,"path":["gimli","constants","DwAddr"],"kind":"struct"},"16:3872:14252":{"crate_id":16,"path":["gimli","constants","DwCfa"],"kind":"struct"},"6:6764:13348":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","mcontext_t"],"kind":"struct"},"2:10103:7638":{"crate_id":2,"path":["core","slice","iter","RSplit"],"kind":"struct"},"2:42463:7629":{"crate_id":2,"path":["core","slice","iter","ChunksExactMut"],"kind":"struct"},"5:6351:2003":{"crate_id":5,"path":["alloc","vec","into_iter","IntoIter"],"kind":"struct"},"16:6307:15108":{"crate_id":16,"path":["gimli","read","abbrev","DebugAbbrev"],"kind":"struct"},"17:8490:15253":{"crate_id":17,"path":["object","common","RelocationEncoding"],"kind":"enum"},"17:10270:15391":{"crate_id":17,"path":["object","read","macho","segment","MachOSegment"],"kind":"struct"},"6:7556:13912":{"crate_id":6,"path":["libc","unix","linux_like","linux","non_exhaustive","open_how"],"kind":"struct"},"16:7042:32803":{"crate_id":16,"path":["gimli","read","lookup","PubStuffHeader"],"kind":"struct"},"2:44520:2477":{"crate_id":2,"path":["core","core_arch","simd","i16x4"],"kind":"struct"},"17:13249:19320":{"crate_id":17,"path":["object","pe","ImageLinenumber"],"kind":"struct"},"17:13024:19303":{"crate_id":17,"path":["object","pe","ImageNtHeaders32"],"kind":"struct"},"16:5724:15089":{"crate_id":16,"path":["gimli","read","cfi","CfiEntriesIter"],"kind":"struct"},"1:10817:22883":{"crate_id":1,"path":["std","sys","unix","os_str","Buf"],"kind":"struct"},"2:38783:7580":{"crate_id":2,"path":["core","ops","generator","GeneratorState"],"kind":"enum"},"6:4414:12222":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_id"],"kind":"struct"},"2:2506:131":{"crate_id":2,"path":["core","convert","From"],"kind":"trait"},"2:20390:7798":{"crate_id":2,"path":["core","core_simd","swizzle","reverse","Reverse"],"kind":"struct"},"0:0:1651":{"crate_id":0,"path":["winapi"],"kind":"module"},"16:2502:14166":{"crate_id":16,"path":["gimli","common","DebugLineOffset"],"kind":"struct"},"1:9371:2129":{"crate_id":1,"path":["std","sys","unix","fs","ReadDir"],"kind":"struct"},"16:2931:14184":{"crate_id":16,"path":["gimli","common","UnitSectionOffset"],"kind":"enum"},"16:5779:15091":{"crate_id":16,"path":["gimli","read","cfi","Augmentation"],"kind":"struct"},"2:46721:7555":{"crate_id":2,"path":["core","core_arch","x86","__m512bh"],"kind":"struct"},"2:44560:27527":{"crate_id":2,"path":["core","core_arch","simd","i64x1"],"kind":"struct"},"16:5811:15092":{"crate_id":16,"path":["gimli","read","cfi","CommonInformationEntry"],"kind":"struct"},"1:8859:2390":{"crate_id":1,"path":["std","sync","mpsc","TrySendError"],"kind":"enum"},"5:3153:31213":{"crate_id":5,"path":["alloc","collections","btree","set","IntersectionInner"],"kind":"enum"},"18:727:19403":{"crate_id":18,"path":["memchr","memmem","SearcherConfig"],"kind":"struct"},"2:44335:2488":{"crate_id":2,"path":["core","core_arch","simd","i8x4"],"kind":"struct"},"1:5069:188":{"crate_id":1,"path":["std","path","PathBuf"],"kind":"struct"},"2:48961:243":{"crate_id":2,"path":["core","core_simd","fmt","fmt","Wrapper"],"kind":"struct"},"2:1902:2045":{"crate_id":2,"path":["core","ptr","unique","Unique"],"kind":"struct"},"6:7520:12442":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_rwlock_t"],"kind":"struct"},"2:2460:2242":{"crate_id":2,"path":["core","convert","num","private","Sealed"],"kind":"trait"},"17:11422:18040":{"crate_id":17,"path":["object","elf","Syminfo64"],"kind":"struct"},"2:21284:29762":{"crate_id":2,"path":["core","core_simd","vector","splat","Splat"],"kind":"struct"},"17:12358:18574":{"crate_id":17,"path":["object","macho","LinkeditDataCommand"],"kind":"struct"},"6:4504:12233":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_rumble_effect"],"kind":"struct"},"16:6361:15113":{"crate_id":16,"path":["gimli","read","abbrev","AttributeSpecification"],"kind":"struct"},"1:7633:1985":{"crate_id":1,"path":["std","backtrace","BacktraceStatus"],"kind":"enum"},"1:1852:2083":{"crate_id":1,"path":["std","env","ArgsOs"],"kind":"struct"},"2:4584:7772":{"crate_id":2,"path":["core","char","REPLACEMENT_CHARACTER"],"kind":"constant"},"5:2179:31114":{"crate_id":5,"path":["alloc","collections","btree","navigate","LazyLeafRange"],"kind":"struct"},"1:873:2003":{"crate_id":1,"path":["std","collections","hash","map","IntoIter"],"kind":"struct"},"2:45110:27397":{"crate_id":2,"path":["core","core_arch","simd","m64x2"],"kind":"struct"},"6:6557:8662":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","flock"],"kind":"struct"},"5:1341:2001":{"crate_id":5,"path":["alloc","collections","btree","map","Iter"],"kind":"struct"},"17:1787:15330":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbolIterator"],"kind":"struct"},"1:9990:23326":{"crate_id":1,"path":["std","sys","unix","os","Env"],"kind":"struct"},"13:110:32658":{"crate_id":13,"path":["std_detect","detect","arch","x86","Feature"],"kind":"enum"},"2:22330:169":{"crate_id":2,"path":["core","num","nonzero","NonZeroI64"],"kind":"struct"},"5:4326:31271":{"crate_id":5,"path":["alloc","collections","vec_deque","drop","Dropper"],"kind":"struct"},"1:8907:1954":{"crate_id":1,"path":["std","sync","mpmc","context","Inner"],"kind":"struct"},"5:1433:2010":{"crate_id":5,"path":["alloc","collections","btree","map","IntoValues"],"kind":"struct"},"1:4126:2261":{"crate_id":1,"path":["std","os","unix","net","ancillary","Messages"],"kind":"struct"},"17:12646:18593":{"crate_id":17,"path":["object","macho","ScatteredRelocationInfo"],"kind":"struct"},"17:8718:15233":{"crate_id":17,"path":["object","endian","U32Bytes"],"kind":"struct"},"1:11891:1476":{"crate_id":1,"path":["std","u32"],"kind":"primitive"},"17:9641:15316":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdatSectionIterator"],"kind":"struct"},"5:6430:31244":{"crate_id":5,"path":["alloc","vec","into_iter","drop","DropGuard"],"kind":"struct"},"2:21706:27452":{"crate_id":2,"path":["core","num","flt2dec","Sign"],"kind":"enum"},"5:5229:7611":{"crate_id":5,"path":["alloc","slice","Join"],"kind":"trait"},"1:8795:2388":{"crate_id":1,"path":["std","sync","mpsc","SendError"],"kind":"struct"},"1:11843:1987":{"crate_id":1,"path":["std","backtrace_rs","types","BytesOrWideString"],"kind":"enum"},"2:5916:7984":{"crate_id":2,"path":["core","iter","adapters","intersperse","IntersperseWith"],"kind":"struct"},"1:4643:2267":{"crate_id":1,"path":["std","os","linux","process","CommandExt"],"kind":"trait"},"17:0:1762":{"crate_id":17,"path":["object"],"kind":"module"},"1:11006:2349":{"crate_id":1,"path":["std","sys","unix","process","process_inner","ExitStatusError"],"kind":"struct"},"1:3882:2225":{"crate_id":1,"path":["std","os","unix","ffi","os_str","OsStrExt"],"kind":"trait"},"6:4767:12258":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_tp"],"kind":"struct"},"17:13211:19316":{"crate_id":17,"path":["object","pe","ImageAuxSymbolWeak"],"kind":"struct"},"2:9084:7594":{"crate_id":2,"path":["core","fmt","UpperHex"],"kind":"trait"},"1:8957:15142":{"crate_id":1,"path":["std","sync","mpmc","select","Operation"],"kind":"struct"},"16:3300:14190":{"crate_id":16,"path":["gimli","arch","LoongArch"],"kind":"struct"},"16:7317:33086":{"crate_id":16,"path":["gimli","read","op","EvaluationState"],"kind":"enum"},"1:11026:8177":{"crate_id":1,"path":["std","sys","unix","time","Nanoseconds"],"kind":"struct"},"2:2303:185":{"crate_id":2,"path":["core","cmp","PartialEq"],"kind":"trait"},"6:4529:12236":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_ff_erase"],"kind":"struct"},"6:5976:12928":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ptrace_peeksiginfo_args"],"kind":"struct"},"2:22165:171":{"crate_id":2,"path":["core","num","nonzero","NonZeroU128"],"kind":"struct"},"6:1723:9710":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_storage"],"kind":"struct"},"17:10505:15475":{"crate_id":17,"path":["object","read","pe","section","PeRelocationIterator"],"kind":"struct"},"16:6904:15136":{"crate_id":16,"path":["gimli","read","loclists","LocationLists"],"kind":"struct"},"2:40491:152":{"crate_id":2,"path":["core","net","ip_addr","IpAddr"],"kind":"enum"},"2:44542:2481":{"crate_id":2,"path":["core","core_arch","simd","i32x2"],"kind":"struct"},"2:41993:28258":{"crate_id":2,"path":["core","hash","sip","Sip13Rounds"],"kind":"struct"},"11:300:32602":{"crate_id":11,"path":["hashbrown","raw","RawIter"],"kind":"struct"},"17:9098:15264":{"crate_id":17,"path":["object","read","any","SectionIterator"],"kind":"struct"},"2:2841:8021":{"crate_id":2,"path":["core","ops","bit","Shl"],"kind":"trait"},"5:870:2001":{"crate_id":5,"path":["alloc","collections","binary_heap","Iter"],"kind":"struct"},"9:352:13973":{"crate_id":9,"path":["miniz_oxide","inflate","TINFLStatus"],"kind":"enum"},"1:6484:2375":{"crate_id":1,"path":["std","sync","poison","PoisonError"],"kind":"struct"},"17:10743:15271":{"crate_id":17,"path":["object","read","traits","NoDynamicRelocationIterator"],"kind":"struct"},"17:11891:18545":{"crate_id":17,"path":["object","macho","LcStr"],"kind":"struct"},"5:7012:2006":{"crate_id":5,"path":["alloc","collections","binary_heap","Drain"],"kind":"struct"},"2:40894:180":{"crate_id":2,"path":["core","sync","atomic","Ordering"],"kind":"enum"},"6:4740:12255":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_vm"],"kind":"struct"},"2:30028:7715":{"crate_id":2,"path":["core","mem","maybe_uninit","MaybeUninit"],"kind":"union"},"1:8275:2244":{"crate_id":1,"path":["std","os","fd","owned","BorrowedFd"],"kind":"struct"},"1:4846:2292":{"crate_id":1,"path":["std","os","net","linux_ext","addr","SocketAddrExt"],"kind":"trait"},"6:6104:12125":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","sysinfo"],"kind":"struct"},"2:38744:7744":{"crate_id":2,"path":["core","ops","control_flow","ControlFlow"],"kind":"enum"},"2:22297:168":{"crate_id":2,"path":["core","num","nonzero","NonZeroI32"],"kind":"struct"},"17:975:15310":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbolIterator"],"kind":"struct"},"2:8180:2314":{"crate_id":2,"path":["core","panic","unwind_safe","UnwindSafe"],"kind":"trait"},"6:4602:12242":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Sym"],"kind":"struct"},"17:12019:18552":{"crate_id":17,"path":["object","macho","Dylib"],"kind":"struct"},"1:8944:22123":{"crate_id":1,"path":["std","sync","mpmc","list","ListToken"],"kind":"struct"},"11:646:2002":{"crate_id":11,"path":["hashbrown","map","IterMut"],"kind":"struct"},"1:6411:2379":{"crate_id":1,"path":["std","sync","once_lock","OnceLock"],"kind":"struct"},"2:43581:192":{"crate_id":2,"path":["core","task","poll","Poll"],"kind":"enum"},"17:9469:15298":{"crate_id":17,"path":["object","read","archive","ArchiveMember"],"kind":"struct"},"6:1550:9694":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_in6"],"kind":"struct"},"5:7134:1999":{"crate_id":5,"path":["alloc","collections","TryReserveError"],"kind":"struct"},"16:8025:15171":{"crate_id":16,"path":["gimli","read","unit","Attribute"],"kind":"struct"},"2:22231:170":{"crate_id":2,"path":["core","num","nonzero","NonZeroI8"],"kind":"struct"},"2:20863:2441":{"crate_id":2,"path":["core","core_simd","masks","MaskElement"],"kind":"trait"},"2:39736:7965":{"crate_id":2,"path":["core","iter","adapters","step_by","StepBy"],"kind":"struct"},"17:8788:15259":{"crate_id":17,"path":["object","endian","I16Bytes"],"kind":"struct"},"5:623:31206":{"crate_id":5,"path":["alloc","boxed","from","StringError"],"kind":"struct"},"2:30228:27488":{"crate_id":2,"path":["core","ptr","alignment","AlignmentEnum64"],"kind":"enum"},"2:11364:8170":{"crate_id":2,"path":["core","str","iter","MatchesInternal"],"kind":"struct"},"1:10040:22873":{"crate_id":1,"path":["std","sys","unix","os_str","Slice"],"kind":"struct"},"2:39437:8096":{"crate_id":2,"path":["core","ffi","c_str","FromBytesUntilNulError"],"kind":"struct"},"6:5923:12923":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ntptimeval"],"kind":"struct"},"7:79:13936":{"crate_id":7,"path":["unwind","libunwind","_Unwind_Action"],"kind":"enum"},"2:41448:7585":{"crate_id":2,"path":["core","fmt","num","Octal"],"kind":"struct"},"16:7529:15154":{"crate_id":16,"path":["gimli","read","rnglists","DebugRanges"],"kind":"struct"},"10:0:1756":{"crate_id":10,"path":["adler"],"kind":"module"},"5:773:2026":{"crate_id":5,"path":["alloc","collections","binary_heap","PeekMut"],"kind":"struct"},"5:5181:31244":{"crate_id":5,"path":["alloc","slice","hack","to_vec","DropGuard"],"kind":"struct"},"17:13367:19330":{"crate_id":17,"path":["object","pe","ImageBoundImportDescriptor"],"kind":"struct"},"6:5845:12918":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_pktinfo"],"kind":"struct"},"17:10000:15426":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCache"],"kind":"struct"},"2:39761:7981":{"crate_id":2,"path":["core","iter","adapters","take_while","TakeWhile"],"kind":"struct"},"2:4171:7606":{"crate_id":2,"path":["core","cell","Cell"],"kind":"struct"},"2:38885:196":{"crate_id":2,"path":["core","ops","range","RangeFrom"],"kind":"struct"},"2:41721:28215":{"crate_id":2,"path":["core","fmt","rt","Flag"],"kind":"enum"},"2:40633:2204":{"crate_id":2,"path":["core","net","socket_addr","SocketAddr"],"kind":"enum"},"16:4327:14635":{"crate_id":16,"path":["gimli","constants","DwAt"],"kind":"struct"},"2:12157:134":{"crate_id":2,"path":["core","future","future","Future"],"kind":"trait"},"1:10673:2130":{"crate_id":1,"path":["std","sys","unix","fs","FileTimes"],"kind":"struct"},"16:2808:14179":{"crate_id":16,"path":["gimli","common","DebugStrOffsetsIndex"],"kind":"struct"},"1:5572:2383":{"crate_id":1,"path":["std","sync","mpsc","SyncSender"],"kind":"struct"},"6:4881:12272":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_sndrcvinfo"],"kind":"struct"},"17:12388:18576":{"crate_id":17,"path":["object","macho","EncryptionInfoCommand32"],"kind":"struct"},"2:39775:7982":{"crate_id":2,"path":["core","iter","adapters","zip","Zip"],"kind":"struct"},"2:40999:80":{"crate_id":2,"path":["core","sync","atomic","AtomicI16"],"kind":"struct"},"4:0:1753":{"crate_id":4,"path":["rustc_std_workspace_core"],"kind":"module"},"17:9443:15296":{"crate_id":17,"path":["object","read","archive","ArchiveMemberIterator"],"kind":"struct"},"1:11876:309":{"crate_id":1,"path":["std","array"],"kind":"primitive"},"11:1138:2019":{"crate_id":11,"path":["hashbrown","map","OccupiedError"],"kind":"struct"},"2:46362:2504":{"crate_id":2,"path":["core","core_arch","simd","u32x16"],"kind":"struct"},"9:234:2327":{"crate_id":9,"path":["miniz_oxide","inflate","core","State"],"kind":"enum"},"2:39230:7748":{"crate_id":2,"path":["core","async_iter","from_iter","FromIter"],"kind":"struct"},"6:5761:12912":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__exit_status"],"kind":"struct"},"2:21758:2219":{"crate_id":2,"path":["core","num","error","TryFromIntError"],"kind":"struct"},"5:7028:31214":{"crate_id":5,"path":["alloc","collections","btree","merge_iter","Peeked"],"kind":"enum"},"17:11520:18047":{"crate_id":17,"path":["object","elf","Dyn32"],"kind":"struct"},"2:39303:7665":{"crate_id":2,"path":["core","char","EscapeUnicode"],"kind":"struct"},"17:10026:15428":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCacheImageIterator"],"kind":"struct"},"6:4982:12283":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_user_dev"],"kind":"struct"},"5:1971:2040":{"crate_id":5,"path":["alloc","collections","btree","map","Cursor"],"kind":"struct"},"6:5767:12913":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__timeval"],"kind":"struct"},"2:9071:110":{"crate_id":2,"path":["core","fmt","Debug"],"kind":"trait"},"2:2943:1895":{"crate_id":2,"path":["core","ops","function","FnMut"],"kind":"trait"},"6:7473:12435":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_mutexattr_t"],"kind":"struct"},"2:44490:2489":{"crate_id":2,"path":["core","core_arch","simd","i8x8"],"kind":"struct"},"2:1534:2148":{"crate_id":2,"path":["core","mem","maybe_uninit","write_slice_cloned","Guard"],"kind":"struct"},"11:697:2010":{"crate_id":11,"path":["hashbrown","map","IntoValues"],"kind":"struct"},"5:2626:31402":{"crate_id":5,"path":["alloc","collections","btree","node","Handle"],"kind":"struct"},"2:39644:7983":{"crate_id":2,"path":["core","iter","adapters","intersperse","Intersperse"],"kind":"struct"},"2:8606:85":{"crate_id":2,"path":["core","sync","atomic","AtomicPtr"],"kind":"struct"},"17:10936:15280":{"crate_id":17,"path":["object","read","ObjectMapEntry"],"kind":"struct"},"17:13488:19343":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation64V2"],"kind":"struct"},"6:4366:12217":{"crate_id":6,"path":["libc","unix","linux_like","linux","packet_mreq"],"kind":"struct"},"9:421:13959":{"crate_id":9,"path":["miniz_oxide","MZStatus"],"kind":"enum"},"17:11969:18549":{"crate_id":17,"path":["object","macho","Section64"],"kind":"struct"},"2:2819:8020":{"crate_id":2,"path":["core","ops","bit","Not"],"kind":"trait"},"17:10721:15448":{"crate_id":17,"path":["object","read","pe","rich","RichHeaderInfo"],"kind":"struct"},"2:46630:7550":{"crate_id":2,"path":["core","core_arch","x86","__m512i"],"kind":"struct"},"17:13461:19340":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation32"],"kind":"struct"},"1:2363:2118":{"crate_id":1,"path":["std","fs","canonicalize"],"kind":"function"},"2:44836:2478":{"crate_id":2,"path":["core","core_arch","simd","i16x8"],"kind":"struct"},"16:7488:15150":{"crate_id":16,"path":["gimli","read","pubnames","PubNamesEntryIter"],"kind":"struct"},"2:42205:7620":{"crate_id":2,"path":["core","slice","ascii","EscapeAscii"],"kind":"struct"},"1:5387:2342":{"crate_id":1,"path":["std","process","Command"],"kind":"struct"},"2:2870:8027":{"crate_id":2,"path":["core","ops","bit","ShrAssign"],"kind":"trait"},"1:8992:19953":{"crate_id":1,"path":["std","sync","mpmc","utils","CachePadded"],"kind":"struct"},"1:8843:2387":{"crate_id":1,"path":["std","sync","mpsc","RecvTimeoutError"],"kind":"enum"},"1:7666:2085":{"crate_id":1,"path":["std","env","VarError"],"kind":"enum"},"16:6535:32726":{"crate_id":16,"path":["gimli","read","lazy","imp","LazyArc"],"kind":"struct"},"6:6616:9655":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stat64"],"kind":"struct"},"17:247:33762":{"crate_id":17,"path":["object","read","util","DebugLen"],"kind":"struct"},"1:2833:22859":{"crate_id":1,"path":["std","io","error","repr_bitpacked","Repr"],"kind":"struct"},"17:9822:15336":{"crate_id":17,"path":["object","read","elf","relocation","RelocationSections"],"kind":"struct"},"2:11129:8121":{"crate_id":2,"path":["core","slice","GetManyMutError"],"kind":"struct"},"2:4310:7756":{"crate_id":2,"path":["core","cell","BorrowRef"],"kind":"struct"},"2:43616:2513":{"crate_id":2,"path":["core","task","wake","RawWaker"],"kind":"struct"},"6:4636:12245":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Shdr"],"kind":"struct"},"2:2509:235":{"crate_id":2,"path":["core","convert","TryInto"],"kind":"trait"},"6:4756:12257":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_extended_err"],"kind":"struct"},"2:21633:2217":{"crate_id":2,"path":["core","num","dec2flt","ParseFloatError"],"kind":"struct"},"17:13053:19306":{"crate_id":17,"path":["object","pe","AnonObjectHeader"],"kind":"struct"},"2:39037:27725":{"crate_id":2,"path":["core","any","tags","MaybeSizedValue"],"kind":"struct"},"17:13791:19361":{"crate_id":17,"path":["object","pe","ImageDebugMisc"],"kind":"struct"},"6:6124:12962":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","msqid_ds"],"kind":"struct"},"2:20403:29758":{"crate_id":2,"path":["core","core_simd","swizzle","rotate_lanes_left","Rotate"],"kind":"struct"},"5:3266:2007":{"crate_id":5,"path":["alloc","collections","btree","set","DrainFilter"],"kind":"struct"},"2:9036:2099":{"crate_id":2,"path":["core","fmt","Write"],"kind":"trait"},"1:11883:634":{"crate_id":1,"path":["std","f64"],"kind":"primitive"},"17:13659:19352":{"crate_id":17,"path":["object","pe","ImageArm64RuntimeFunctionEntry"],"kind":"struct"},"2:39687:7977":{"crate_id":2,"path":["core","iter","adapters","rev","Rev"],"kind":"struct"},"1:10451:1960":{"crate_id":1,"path":["std","sys","unix","thread","Thread"],"kind":"struct"},"17:13419:19335":{"crate_id":17,"path":["object","pe","ImageResourceDirectoryString"],"kind":"struct"},"2:2936:1893":{"crate_id":2,"path":["core","ops","drop","Drop"],"kind":"trait"},"6:474:8778":{"crate_id":6,"path":["libc","unix","group"],"kind":"struct"},"6:4810:12264":{"crate_id":6,"path":["libc","unix","linux_like","linux","seccomp_data"],"kind":"struct"},"2:10709:7632":{"crate_id":2,"path":["core","slice","iter","GroupBy"],"kind":"struct"},"1:9376:23328":{"crate_id":1,"path":["std","sys","unix","fs","Dir"],"kind":"struct"},"17:11821:15433":{"crate_id":17,"path":["object","macho","FatArch32"],"kind":"struct"},"5:5783:69":{"crate_id":5,"path":["alloc","sync","Arc"],"kind":"struct"},"2:39603:7971":{"crate_id":2,"path":["core","iter","adapters","filter_map","FilterMap"],"kind":"struct"},"11:353:32590":{"crate_id":11,"path":["hashbrown","raw","RawDrain"],"kind":"struct"},"2:11801:110":{"crate_id":2,"path":["core","str","lossy","Debug"],"kind":"struct"},"17:11484:18045":{"crate_id":17,"path":["object","elf","ProgramHeader32"],"kind":"struct"},"1:9087:22848":{"crate_id":1,"path":["std","sys","common","thread_local","fast_local","Key"],"kind":"struct"},"17:9653:15342":{"crate_id":17,"path":["object","read","elf","file","ElfFile"],"kind":"struct"},"17:11355:18036":{"crate_id":17,"path":["object","elf","CompressionHeader64"],"kind":"struct"},"2:43259:7674":{"crate_id":2,"path":["core","str","lossy","Utf8Chunk"],"kind":"struct"},"17:13376:19331":{"crate_id":17,"path":["object","pe","ImageBoundForwarderRef"],"kind":"struct"},"17:13309:19324":{"crate_id":17,"path":["object","pe","ImageImportByName"],"kind":"struct"},"17:9424:15295":{"crate_id":17,"path":["object","read","archive","ArchiveFile"],"kind":"struct"},"2:44265:27575":{"crate_id":2,"path":["core","core_arch","simd","i8x2"],"kind":"struct"},"17:10580:15477":{"crate_id":17,"path":["object","read","pe","import","ImportDescriptorIterator"],"kind":"struct"},"5:805:2027":{"crate_id":5,"path":["alloc","collections","binary_heap","RebuildOnDrop"],"kind":"struct"},"17:12372:18575":{"crate_id":17,"path":["object","macho","FilesetEntryCommand"],"kind":"struct"},"6:4449:12226":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_replay"],"kind":"struct"},"16:0:1761":{"crate_id":16,"path":["gimli"],"kind":"module"},"17:13411:19334":{"crate_id":17,"path":["object","pe","ImageResourceDirectoryEntry"],"kind":"struct"},"2:8182:2312":{"crate_id":2,"path":["core","panic","unwind_safe","AssertUnwindSafe"],"kind":"struct"},"1:932:2010":{"crate_id":1,"path":["std","collections","hash","map","IntoValues"],"kind":"struct"},"2:43053:7684":{"crate_id":2,"path":["core","str","pattern","CharSearcher"],"kind":"struct"},"17:8310:15248":{"crate_id":17,"path":["object","common","SectionKind"],"kind":"enum"},"17:10670:15471":{"crate_id":17,"path":["object","read","pe","resource","ResourceDirectory"],"kind":"struct"},"6:547:8787":{"crate_id":6,"path":["libc","unix","pollfd"],"kind":"struct"},"2:38845:197":{"crate_id":2,"path":["core","ops","range","RangeFull"],"kind":"struct"},"2:20704:2242":{"crate_id":2,"path":["core","core_simd","lane_count","sealed","Sealed"],"kind":"trait"},"16:2378:14161":{"crate_id":16,"path":["gimli","common","DebugAbbrevOffset"],"kind":"struct"},"6:4375:12218":{"crate_id":6,"path":["libc","unix","linux_like","linux","cpu_set_t"],"kind":"struct"},"2:40531:2202":{"crate_id":2,"path":["core","net","ip_addr","Ipv6Addr"],"kind":"struct"},"17:13477:19342":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation32V2"],"kind":"struct"},"16:6460:15119":{"crate_id":16,"path":["gimli","read","index","DebugCuIndex"],"kind":"struct"},"1:8376:2327":{"crate_id":1,"path":["std","path","State"],"kind":"enum"},"17:1034:15314":{"crate_id":17,"path":["object","read","coff","relocation","CoffRelocationIterator"],"kind":"struct"},"6:5817:12878":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","mallinfo"],"kind":"struct"},"1:3996:2235":{"crate_id":1,"path":["std","os","unix","fs","DirBuilderExt"],"kind":"trait"},"17:12403:18577":{"crate_id":17,"path":["object","macho","EncryptionInfoCommand64"],"kind":"struct"},"1:7584:1962":{"crate_id":1,"path":["std","thread","ThreadId"],"kind":"struct"},"18:491:33800":{"crate_id":18,"path":["memchr","cow","Imp"],"kind":"struct"},"1:8308:2306":{"crate_id":1,"path":["std","panic","BacktraceStyle"],"kind":"enum"},"2:44389:2509":{"crate_id":2,"path":["core","core_arch","simd","u8x8"],"kind":"struct"},"16:6890:15135":{"crate_id":16,"path":["gimli","read","loclists","DebugLocLists"],"kind":"struct"},"18:515:19408":{"crate_id":18,"path":["memchr","memmem","prefilter","PrefilterFn"],"kind":"struct"},"17:8389:15250":{"crate_id":17,"path":["object","common","SymbolKind"],"kind":"enum"},"17:12563:18588":{"crate_id":17,"path":["object","macho","DataInCodeEntry"],"kind":"struct"},"17:12006:18551":{"crate_id":17,"path":["object","macho","FvmlibCommand"],"kind":"struct"},"5:679:109":{"crate_id":5,"path":["alloc","borrow","Cow"],"kind":"enum"},"17:9138:15265":{"crate_id":17,"path":["object","read","any","ComdatIterator"],"kind":"struct"},"11:822:2012":{"crate_id":11,"path":["hashbrown","map","RawEntryMut"],"kind":"enum"},"1:624:1979":{"crate_id":1,"path":["std","backtrace","Backtrace"],"kind":"struct"},"6:506:8783":{"crate_id":6,"path":["libc","unix","rusage"],"kind":"struct"},"6:4475:12230":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_ramp_effect"],"kind":"struct"},"16:4510:14722":{"crate_id":16,"path":["gimli","constants","DwDs"],"kind":"struct"},"2:42535:7637":{"crate_id":2,"path":["core","slice","iter","RChunksMut"],"kind":"struct"},"16:5693:15087":{"crate_id":16,"path":["gimli","read","cfi","BaseAddresses"],"kind":"struct"},"1:7567:2242":{"crate_id":1,"path":["std","sealed","Sealed"],"kind":"trait"},"6:4734:12254":{"crate_id":6,"path":["libc","unix","linux_like","linux","fanotify_response"],"kind":"struct"},"2:43147:7688":{"crate_id":2,"path":["core","str","pattern","CharSliceSearcher"],"kind":"struct"},"2:39494:2105":{"crate_id":2,"path":["core","ffi","VaList"],"kind":"struct"},"17:11585:18052":{"crate_id":17,"path":["object","elf","Verneed"],"kind":"struct"},"6:4709:12251":{"crate_id":6,"path":["libc","unix","linux_like","linux","in6_pktinfo"],"kind":"struct"},"2:20437:29959":{"crate_id":2,"path":["core","core_simd","swizzle","interleave","Hi"],"kind":"struct"},"17:9628:15303":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdat"],"kind":"struct"},"16:6474:15120":{"crate_id":16,"path":["gimli","read","index","DebugTuIndex"],"kind":"struct"},"5:1187:2016":{"crate_id":5,"path":["alloc","collections","btree","map","entry","Entry"],"kind":"enum"},"1:591:1976":{"crate_id":1,"path":["std","ascii","AsciiExt"],"kind":"trait"},"1:9109:24114":{"crate_id":1,"path":["std","sys","common","thread_local","fast_local","DtorState"],"kind":"enum"},"19:0:1019":{"crate_id":19,"path":["panic_unwind"],"kind":"module"},"5:3114:2023":{"crate_id":5,"path":["alloc","collections","btree","set","Difference"],"kind":"struct"},"2:7520:2034":{"crate_id":2,"path":["core","iter","traits","marker","TrustedLen"],"kind":"trait"},"17:9577:15311":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbolTable"],"kind":"struct"},"2:39726:7980":{"crate_id":2,"path":["core","iter","adapters","skip_while","SkipWhile"],"kind":"struct"},"17:13121:19309":{"crate_id":17,"path":["object","pe","ImageSymbol"],"kind":"struct"},"17:10649:15480":{"crate_id":17,"path":["object","read","pe","relocation","RelocationIterator"],"kind":"struct"},"2:2693:1964":{"crate_id":2,"path":["core","marker","PhantomData"],"kind":"struct"},"17:13399:19333":{"crate_id":17,"path":["object","pe","ImageResourceDirectory"],"kind":"struct"},"1:4075:25455":{"crate_id":1,"path":["std","os","unix","net","ancillary","AncillaryDataIter"],"kind":"struct"},"2:43421:120":{"crate_id":2,"path":["core","time","Duration"],"kind":"struct"},"2:40826:207":{"crate_id":2,"path":["core","result","Result"],"kind":"enum"},"17:10747:126":{"crate_id":17,"path":["object","read","Error"],"kind":"struct"},"5:7336:7716":{"crate_id":5,"path":["alloc","vec","splice","Splice"],"kind":"struct"},"1:6867:23286":{"crate_id":1,"path":["std","sys_common","backtrace","_print","DisplayBacktrace"],"kind":"struct"},"5:7020:2030":{"crate_id":5,"path":["alloc","collections","binary_heap","DrainSorted"],"kind":"struct"},"2:9078:7585":{"crate_id":2,"path":["core","fmt","Octal"],"kind":"trait"},"6:4432:12224":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_keymap_entry"],"kind":"struct"},"2:46573:7545":{"crate_id":2,"path":["core","core_arch","x86","__m128"],"kind":"struct"},"17:13356:19329":{"crate_id":17,"path":["object","pe","ImageImportDescriptor"],"kind":"struct"},"6:5015:12286":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_ifr_ifru"],"kind":"union"},"1:4097:2258":{"crate_id":1,"path":["std","os","unix","net","ancillary","ScmRights"],"kind":"struct"},"1:5322:2338":{"crate_id":1,"path":["std","process","Child"],"kind":"struct"},"17:9478:15315":{"crate_id":17,"path":["object","read","coff","file","CoffCommon"],"kind":"struct"},"17:9038:33280":{"crate_id":17,"path":["object","read","any","SegmentIteratorInternal"],"kind":"enum"},"1:11228:24134":{"crate_id":1,"path":["std","sys_common","wtf8","Wtf8CodePoints"],"kind":"struct"},"17:12158:18562":{"crate_id":17,"path":["object","macho","RoutinesCommand64"],"kind":"struct"},"1:10713:19946":{"crate_id":1,"path":["std","sys","unix","kernel_copy","SpliceMode"],"kind":"enum"},"6:7491:12438":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_barrierattr_t"],"kind":"struct"},"6:6035:12933":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_data"],"kind":"union"},"2:45504:2479":{"crate_id":2,"path":["core","core_arch","simd","i16x16"],"kind":"struct"},"1:9051:2140":{"crate_id":1,"path":["std","time","SystemTime"],"kind":"struct"},"1:2868:207":{"crate_id":1,"path":["std","io","error","Result"],"kind":"typedef"},"16:6558:15125":{"crate_id":16,"path":["gimli","read","line","LineRows"],"kind":"struct"},"1:8971:19843":{"crate_id":1,"path":["std","sync","mpmc","select","Selected"],"kind":"enum"},"1:8149:2209":{"crate_id":1,"path":["std","net","tcp","Incoming"],"kind":"struct"},"1:3934:2229":{"crate_id":1,"path":["std","os","unix","fs","OpenOptionsExt"],"kind":"trait"},"2:7192:1897":{"crate_id":2,"path":["core","iter","traits","exact_size","ExactSizeIterator"],"kind":"trait"},"2:3645:2003":{"crate_id":2,"path":["core","array","iter","IntoIter"],"kind":"struct"},"5:2895:7570":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Owned"],"kind":"enum"},"16:8170:15179":{"crate_id":16,"path":["gimli","read","unit","DebugTypesUnitHeadersIter"],"kind":"struct"},"17:11544:18049":{"crate_id":17,"path":["object","elf","Versym"],"kind":"struct"},"2:39010:7732":{"crate_id":2,"path":["core","any","TypeId"],"kind":"struct"},"17:12318:18571":{"crate_id":17,"path":["object","macho","PrebindCksumCommand"],"kind":"struct"},"17:10303:15388":{"crate_id":17,"path":["object","read","macho","section","MachOSection"],"kind":"struct"},"2:20753:2439":{"crate_id":2,"path":["core","core_simd","masks","mask_impl","Mask"],"kind":"struct"},"16:6876:15134":{"crate_id":16,"path":["gimli","read","loclists","DebugLoc"],"kind":"struct"},"16:2616:14171":{"crate_id":16,"path":["gimli","common","DebugMacinfoOffset"],"kind":"struct"},"17:11234:18030":{"crate_id":17,"path":["object","elf","FileHeader32"],"kind":"struct"},"2:41681:28205":{"crate_id":2,"path":["core","fmt","rt","Placeholder"],"kind":"struct"},"16:7683:15162":{"crate_id":16,"path":["gimli","read","str","DebugStrOffsets"],"kind":"struct"},"6:1559:9695":{"crate_id":6,"path":["libc","unix","linux_like","addrinfo"],"kind":"struct"},"6:7532:12444":{"crate_id":6,"path":["libc","unix","linux_like","linux","can_frame"],"kind":"struct"},"6:6743:13347":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user"],"kind":"struct"},"17:8953:15262":{"crate_id":17,"path":["object","read","util","StringTable"],"kind":"struct"},"1:7568:1975":{"crate_id":1,"path":["std","thread","local","AccessError"],"kind":"struct"},"11:119:32585":{"crate_id":11,"path":["hashbrown","raw","RawTable"],"kind":"struct"},"17:13499:19344":{"crate_id":17,"path":["object","pe","ImagePrologueDynamicRelocationHeader"],"kind":"struct"},"18:719:19395":{"crate_id":18,"path":["memchr","memmem","NeedleInfo"],"kind":"struct"},"2:8769:27872":{"crate_id":2,"path":["core","fmt","builders","PadAdapter"],"kind":"struct"},"6:1900:9852":{"crate_id":6,"path":["libc","unix","linux_like","linux","fpos64_t"],"kind":"enum"},"2:43654:7568":{"crate_id":2,"path":["core","alloc","layout","LayoutError"],"kind":"struct"},"2:45580:2486":{"crate_id":2,"path":["core","core_arch","simd","i64x4"],"kind":"struct"},"6:4894:12273":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_sndinfo"],"kind":"struct"},"16:8142:15177":{"crate_id":16,"path":["gimli","read","unit","EntriesTreeIter"],"kind":"struct"},"6:5005:12285":{"crate_id":6,"path":["libc","unix","linux_like","linux","mq_attr"],"kind":"struct"},"6:4650:12246":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Shdr"],"kind":"struct"},"6:7508:12440":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_cond_t"],"kind":"struct"},"6:1520:9690":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreqn"],"kind":"struct"},"16:6390:15115":{"crate_id":16,"path":["gimli","read","aranges","ArangeHeaderIter"],"kind":"struct"},"17:11993:18550":{"crate_id":17,"path":["object","macho","Fvmlib"],"kind":"struct"},"1:2215:2108":{"crate_id":1,"path":["std","fs","read"],"kind":"function"}},"external_crates":{"17":{"name":"object","html_root_url":"https://doc.rust-lang.org/nightly/"},"14":{"name":"rustc_demangle","html_root_url":"https://doc.rust-lang.org/nightly/"},"11":{"name":"hashbrown","html_root_url":"https://doc.rust-lang.org/nightly/"},"8":{"name":"cfg_if","html_root_url":"https://docs.rs/cfg-if/"},"5":{"name":"alloc","html_root_url":"https://doc.rust-lang.org/nightly/"},"2":{"name":"core","html_root_url":"https://doc.rust-lang.org/nightly/"},"19":{"name":"panic_unwind","html_root_url":"https://doc.rust-lang.org/nightly/"},"16":{"name":"gimli","html_root_url":"https://doc.rust-lang.org/nightly/"},"13":{"name":"std_detect","html_root_url":"https://doc.rust-lang.org/nightly/"},"10":{"name":"adler","html_root_url":"https://docs.rs/adler/1.0.2/"},"7":{"name":"unwind","html_root_url":"https://doc.rust-lang.org/nightly/"},"4":{"name":"rustc_std_workspace_core","html_root_url":"https://doc.rust-lang.org/nightly/"},"1":{"name":"std","html_root_url":"https://doc.rust-lang.org/nightly/"},"18":{"name":"memchr","html_root_url":"https://doc.rust-lang.org/nightly/"},"15":{"name":"addr2line","html_root_url":"https://doc.rust-lang.org/nightly/"},"12":{"name":"rustc_std_workspace_alloc","html_root_url":"https://doc.rust-lang.org/nightly/"},"9":{"name":"miniz_oxide","html_root_url":"https://doc.rust-lang.org/nightly/"},"6":{"name":"libc","html_root_url":"https://doc.rust-lang.org/nightly/"},"3":{"name":"compiler_builtins","html_root_url":"https://doc.rust-lang.org/nightly/"}},"format_version":24}