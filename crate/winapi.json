{"root":"0:0:1633","crate_version":"0.3.9","includes_private":false,"index":{"2:11835:21502":{"id":"2:11835:21502","crate_id":2,"name":"split_at_mut","span":null,"visibility":"public","docs":"Divide one mutable string slice into two at an index.\n\nThe argument, `mid`, should be a byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get immutable string slices instead, see the [`split_at`] method.\n\n[`split_at`]: str::split_at\n\n# Panics\n\nPanics if `mid` is not on a UTF-8 code point boundary, or if it is\npast the end of the last code point of the string slice.\n\n# Examples\n\nBasic usage:\n\n```\nlet mut s = \"Per Martin-Löf\".to_string();\n{\n    let (first, last) = s.split_at_mut(3);\n    first.make_ascii_uppercase();\n    assert_eq!(\"PER\", first);\n    assert_eq!(\" Martin-Löf\", last);\n}\nassert_eq!(\"PER Martin-Löf\", s);\n```","links":{"str::split_at":"2:11834:21501"},"attrs":["#[must_use]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["mid",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"tuple","inner":[{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"primitive","inner":"str"}}},{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"primitive","inner":"str"}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11838:19326":{"id":"2:11838:19326","crate_id":2,"name":"bytes","span":null,"visibility":"public","docs":"An iterator over the bytes of a string slice.\n\nAs a string slice consists of a sequence of bytes, we can iterate\nthrough a string slice by byte. This method returns such an iterator.\n\n# Examples\n\nBasic usage:\n\n```\nlet mut bytes = \"bors\".bytes();\n\nassert_eq!(Some(b'b'), bytes.next());\nassert_eq!(Some(b'o'), bytes.next());\nassert_eq!(Some(b'r'), bytes.next());\nassert_eq!(Some(b's'), bytes.next());\n\nassert_eq!(None, bytes.next());\n```","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Bytes","id":"2:50682:2139","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11938:30034":{"id":"2:11938:30034","crate_id":2,"name":"escape_unicode","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_unicode`].\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"❤\\n!\".escape_unicode() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"❤\\n!\".escape_unicode());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"\\\\u{{2764}}\\\\u{{a}}\\\\u{{21}}\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"❤\\n!\".escape_unicode().to_string(), \"\\\\u{2764}\\\\u{a}\\\\u{21}\");\n```","links":{"`char::escape_unicode`":"2:4496:30034"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"EscapeUnicode","id":"2:51013:7653","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11841:25583":{"id":"2:11841:25583","crate_id":2,"name":"lines","span":null,"visibility":"public","docs":"An iterator over the lines of a string, as string slices.\n\nLines are split at line endings that are either newlines (`\\n`) or\nsequences of a carriage return followed by a line feed (`\\r\\n`).\n\nLine terminators are not included in the lines returned by the iterator.\n\nThe final line ending is optional. A string that ends with a final line\nending will return the same lines as an otherwise identical string\nwithout a final line ending.\n\n# Examples\n\nBasic usage:\n\n```\nlet text = \"foo\\r\\nbar\\n\\nbaz\\n\";\nlet mut lines = text.lines();\n\nassert_eq!(Some(\"foo\"), lines.next());\nassert_eq!(Some(\"bar\"), lines.next());\nassert_eq!(Some(\"\"), lines.next());\nassert_eq!(Some(\"baz\"), lines.next());\n\nassert_eq!(None, lines.next());\n```\n\nThe final line ending isn't required:\n\n```\nlet text = \"foo\\nbar\\n\\r\\nbaz\";\nlet mut lines = text.lines();\n\nassert_eq!(Some(\"foo\"), lines.next());\nassert_eq!(Some(\"bar\"), lines.next());\nassert_eq!(Some(\"\"), lines.next());\nassert_eq!(Some(\"baz\"), lines.next());\n\nassert_eq!(None, lines.next());\n```","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Lines","id":"2:50950:2142","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11906:30025":{"id":"2:11906:30025","crate_id":2,"name":"trim_left","span":null,"visibility":"public","docs":"Returns a string slice with leading whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`.\n\n# Text directionality\n\nA string is a sequence of bytes. 'Left' in this context means the first\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _right_ side, not the left.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \" Hello\\tworld\\t\";\n\nassert_eq!(\"Hello\\tworld\\t\", s.trim_left());\n```\n\nDirectionality:\n\n```\nlet s = \"  English\";\nassert!(Some('E') == s.trim_left().chars().next());\n\nlet s = \"  עברית\";\nassert!(Some('ע') == s.trim_left().chars().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_start`\", suggestion\n= \"trim_start\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_start`"},"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"5:5285":{"id":"5:5285","crate_id":5,"name":null,"span":null,"visibility":{"restricted":{"parent":"5:5196:1364","path":"::str"}},"docs":"Methods for string slices.","links":{},"attrs":["#[cfg(not(test))]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"kind":"primitive","inner":"str"},"items":["5:5286:30684","5:5287:2143","5:5290:30685","5:5293:30686","5:5301:30687","5:5302:30688","5:5303:2166","5:5304:19697","5:5305:19698"],"negative":false,"synthetic":false,"blanket_impl":null}},"2:11882:30017":{"id":"2:11882:30017","crate_id":2,"name":"split_once","span":null,"visibility":"public","docs":"Splits the string on the first occurrence of the specified delimiter and\nreturns prefix before delimiter and suffix after delimiter.\n\n# Examples\n\n```\nassert_eq!(\"cfg\".split_once('='), None);\nassert_eq!(\"cfg=\".split_once('='), Some((\"cfg\", \"\")));\nassert_eq!(\"cfg=foo\".split_once('='), Some((\"cfg\", \"foo\")));\nassert_eq!(\"cfg=foo=bar\".split_once('='), Some((\"cfg\", \"foo=bar\")));\n```","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["delimiter",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:48726:178","args":{"angle_bracketed":{"args":[{"type":{"kind":"tuple","inner":[{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}},{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11518:7637","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11937:1958":{"id":"2:11937:1958","crate_id":2,"name":"escape_default","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_default`].\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"❤\\n!\".escape_default() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"❤\\n!\".escape_default());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"\\\\u{{2764}}\\\\n!\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"❤\\n!\".escape_default().to_string(), \"\\\\u{2764}\\\\n!\");\n```","links":{"`char::escape_default`":"2:4499:1958"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"EscapeDefault","id":"2:51004:1959","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11826:21474":{"id":"2:11826:21474","crate_id":2,"name":"get_mut","span":null,"visibility":"public","docs":"Returns a mutable subslice of `str`.\n\nThis is the non-panicking alternative to indexing the `str`. Returns\n[`None`] whenever equivalent indexing operation would panic.\n\n# Examples\n\n```\nlet mut v = String::from(\"hello\");\n// correct length\nassert!(v.get_mut(0..5).is_some());\n// out of bounds\nassert!(v.get_mut(..42).is_none());\nassert_eq!(Some(\"he\"), v.get_mut(0..2).map(|v| &*v));\n\nassert_eq!(\"hello\", v);\n{\n    let s = v.get_mut(0..2);\n    let s = s.map(|s| {\n        s.make_ascii_uppercase();\n        &*s\n    });\n    assert_eq!(Some(\"HE\"), s);\n}\nassert_eq!(\"HEllo\", v);\n```","links":{"`None`":"2:48728:176"},"attrs":["#[rustc_const_unstable(feature = \"const_slice_index\", issue = \"none\")]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["i",{"kind":"generic","inner":"I"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:48726:178","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"qualified_path","inner":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"I"},"trait":{"name":"SliceIndex","id":"2:9694:219","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}}}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"2:9694:219","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11842:30014":{"id":"2:11842:30014","crate_id":2,"name":"lines_any","span":null,"visibility":"public","docs":"An iterator over the lines of a string.","links":{},"attrs":["#[deprecated(since = \"1.4.0\", note = \"use lines() instead now\")]"],"deprecation":{"since":"1.4.0","note":"use lines() instead now"},"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"LinesAny","id":"2:50960:7655","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11891:30019":{"id":"2:11891:30019","crate_id":2,"name":"rmatches","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within this string slice,\nyielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`matches`] method can be used.\n\n[`matches`]: str::matches\n\n# Examples\n\nBasic usage:\n\n```\nlet v: Vec<&str> = \"abcXXXabcYYYabc\".rmatches(\"abc\").collect();\nassert_eq!(v, [\"abc\", \"abc\", \"abc\"]);\n\nlet v: Vec<&str> = \"1abc2abc3\".rmatches(char::is_numeric).collect();\nassert_eq!(v, [\"3\", \"2\", \"1\"]);\n```","links":{"self::pattern":"2:11513:7641","`DoubleEndedIterator`":"2:7123:120","prim@char":"1:11828:409","str::matches":"2:11888:1847"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"RMatches","id":"2:50918:7659","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11518:7637","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"2:11518:7637","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11533:7638","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11897:30021":{"id":"2:11897:30021","crate_id":2,"name":"rmatch_indices","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within `self`,\nyielded in reverse order along with the index of the match.\n\nFor matches of `pat` within `self` that overlap, only the indices\ncorresponding to the last match are returned.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`match_indices`] method can be used.\n\n[`match_indices`]: str::match_indices\n\n# Examples\n\nBasic usage:\n\n```\nlet v: Vec<_> = \"abcXXXabcYYYabc\".rmatch_indices(\"abc\").collect();\nassert_eq!(v, [(12, \"abc\"), (6, \"abc\"), (0, \"abc\")]);\n\nlet v: Vec<_> = \"1abcabc2\".rmatch_indices(\"abc\").collect();\nassert_eq!(v, [(4, \"abc\"), (1, \"abc\")]);\n\nlet v: Vec<_> = \"ababa\".rmatch_indices(\"aba\").collect();\nassert_eq!(v, [(2, \"aba\")]); // only the last `aba`\n```","links":{"self::pattern":"2:11513:7641","str::match_indices":"2:11894:30020","prim@char":"1:11828:409","`DoubleEndedIterator`":"2:7123:120"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"RMatchIndices","id":"2:50864:7657","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11518:7637","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"2:11518:7637","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11533:7638","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11817:30010":{"id":"2:11817:30010","crate_id":2,"name":"ceil_char_boundary","span":null,"visibility":"public","docs":"Finds the closest `x` not below `index` where `is_char_boundary(x)` is `true`.\n\nThis method is the natural complement to [`floor_char_boundary`]. See that method\nfor more details.\n\n[`floor_char_boundary`]: str::floor_char_boundary\n\n# Panics\n\nPanics if `index > self.len()`.\n\n# Examples\n\n```\n#![feature(round_char_boundary)]\nlet s = \"❤️🧡💛💚💙💜\";\nassert_eq!(s.len(), 26);\nassert!(!s.is_char_boundary(13));\n\nlet closest = s.ceil_char_boundary(13);\nassert_eq!(closest, 14);\nassert_eq!(&s[..closest], \"❤️🧡💛\");\n```","links":{"str::floor_char_boundary":"2:11815:30009"},"attrs":["#[unstable(feature = \"round_char_boundary\", issue = \"93743\")]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["index",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"primitive","inner":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11929:30032":{"id":"2:11929:30032","crate_id":2,"name":"parse","span":null,"visibility":"public","docs":"Parses this string slice into another type.\n\nBecause `parse` is so general, it can cause problems with type\ninference. As such, `parse` is one of the few times you'll see\nthe syntax affectionately known as the 'turbofish': `::<>`. This\nhelps the inference algorithm understand specifically which type\nyou're trying to parse into.\n\n`parse` can parse into any type that implements the [`FromStr`] trait.\n\n# Errors\n\nWill return [`Err`] if it's not possible to parse this string slice into\nthe desired type.\n\n[`Err`]: FromStr::Err\n\n# Examples\n\nBasic usage\n\n```\nlet four: u32 = \"4\".parse().unwrap();\n\nassert_eq!(4, four);\n```\n\nUsing the 'turbofish' instead of annotating `four`:\n\n```\nlet four = \"4\".parse::<u32>();\n\nassert_eq!(Ok(4), four);\n```\n\nFailing to parse:\n\n```\nlet nope = \"j\".parse::<u32>();\n\nassert!(nope.is_err());\n```","links":{"`FromStr`":"2:11474:2315","FromStr::Err":"2:11475:126"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Result","id":"2:48870:207","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"F"}},{"type":{"kind":"qualified_path","inner":{"name":"Err","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"F"},"trait":{"name":"FromStr","id":"2:11474:2315","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"F"},"bounds":[{"trait_bound":{"trait":{"name":"FromStr","id":"2:11474:2315","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11847:21520":{"id":"2:11847:21520","crate_id":2,"name":"starts_with","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a prefix of this\nstring slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nBasic usage:\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.starts_with(\"bana\"));\nassert!(!bananas.starts_with(\"nana\"));\n```","links":{"prim@char":"1:11828:409","self::pattern":"2:11513:7641"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11518:7637","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11857:19199":{"id":"2:11857:19199","crate_id":2,"name":"rfind","span":null,"visibility":"public","docs":"Returns the byte index for the first character of the last match of the pattern in\nthis string slice.\n\nReturns [`None`] if the pattern doesn't match.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nlet s = \"Löwe 老虎 Léopard Gepardi\";\n\nassert_eq!(s.rfind('L'), Some(13));\nassert_eq!(s.rfind('é'), Some(14));\nassert_eq!(s.rfind(\"pard\"), Some(24));\n```\n\nMore complex patterns with closures:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\n\nassert_eq!(s.rfind(char::is_whitespace), Some(12));\nassert_eq!(s.rfind(char::is_lowercase), Some(20));\n```\n\nNot finding the pattern:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\nlet x: &[_] = &['1', '2'];\n\nassert_eq!(s.rfind(x), None);\n```","links":{"self::pattern":"2:11513:7641","prim@char":"1:11828:409","`None`":"2:48728:176"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:48726:178","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11518:7637","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"2:11518:7637","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11533:7638","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11917:21522":{"id":"2:11917:21522","crate_id":2,"name":"strip_suffix","span":null,"visibility":"public","docs":"Returns a string slice with the suffix removed.\n\nIf the string ends with the pattern `suffix`, returns the substring before the suffix,\nwrapped in `Some`.  Unlike `trim_end_matches`, this method removes the suffix exactly once.\n\nIf the string does not end with `suffix`, returns `None`.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nassert_eq!(\"bar:foo\".strip_suffix(\":foo\"), Some(\"bar\"));\nassert_eq!(\"bar:foo\".strip_suffix(\"bar\"), None);\nassert_eq!(\"foofoo\".strip_suffix(\"foo\"), Some(\"foo\"));\n```","links":{"prim@char":"1:11828:409","self::pattern":"2:11513:7641"},"attrs":["#[must_use =\n\"this returns the remaining substring as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["suffix",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:48726:178","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11518:7637","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"2:11518:7637","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11533:7638","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11832:30012":{"id":"2:11832:30012","crate_id":2,"name":"slice_unchecked","span":null,"visibility":"public","docs":"Creates a string slice from another string slice, bypassing safety\nchecks.\n\nThis is generally not recommended, use with caution! For a safe\nalternative see [`str`] and [`Index`].\n\n[`Index`]: crate::ops::Index\n\nThis new slice goes from `begin` to `end`, including `begin` but\nexcluding `end`.\n\nTo get a mutable string slice instead, see the\n[`slice_mut_unchecked`] method.\n\n[`slice_mut_unchecked`]: str::slice_mut_unchecked\n\n# Safety\n\nCallers of this function are responsible that three preconditions are\nsatisfied:\n\n* `begin` must not exceed `end`.\n* `begin` and `end` must be byte positions within the string slice.\n* `begin` and `end` must lie on UTF-8 sequence boundaries.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\n\nunsafe {\n    assert_eq!(\"Löwe 老虎 Léopard\", s.slice_unchecked(0, 21));\n}\n\nlet s = \"Hello, world!\";\n\nunsafe {\n    assert_eq!(\"world\", s.slice_unchecked(7, 12));\n}\n```","links":{"crate::ops::Index":"2:2990:2035","`str`":"1:11834:1364","str::slice_mut_unchecked":"2:11833:30013"},"attrs":["#[deprecated(since = \"1.29.0\", note =\n\"use `get_unchecked(begin..end)` instead\")]","#[must_use]"],"deprecation":{"since":"1.29.0","note":"use `get_unchecked(begin..end)` instead"},"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["begin",{"kind":"primitive","inner":"usize"}],["end",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}},"2:11843:27519":{"id":"2:11843:27519","crate_id":2,"name":"encode_utf16","span":null,"visibility":"public","docs":"Returns an iterator of `u16` over the string encoded as UTF-16.\n\n# Examples\n\nBasic usage:\n\n```\nlet text = \"Zażółć gęślą jaźń\";\n\nlet utf8_len = text.len();\nlet utf16_len = text.encode_utf16().count();\n\nassert!(utf16_len <= utf8_len);\n```","links":{},"attrs":["#[must_use =\n\"this returns the encoded string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"EncodeUtf16","id":"2:50988:7642","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"5:5286:30684":{"id":"5:5286:30684","crate_id":5,"name":"into_boxed_bytes","span":null,"visibility":"public","docs":"Converts a `Box<str>` into a `Box<[u8]>` without copying or allocating.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"this is a string\";\nlet boxed_str = s.to_owned().into_boxed_str();\nlet boxed_bytes = boxed_str.into_boxed_bytes();\nassert_eq!(*boxed_bytes, *s.as_bytes());\n```","links":{},"attrs":["#[must_use = \"`self` will be dropped if the result is not used\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"resolved_path","inner":{"name":"Box","id":"5:288:1878","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}},{"type":{"kind":"resolved_path","inner":{"name":"Global","id":"5:6908:2039","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}]],"output":{"kind":"resolved_path","inner":{"name":"Box","id":"5:288:1878","args":{"angle_bracketed":{"args":[{"type":{"kind":"slice","inner":{"kind":"primitive","inner":"u8"}}},{"type":{"kind":"resolved_path","inner":{"name":"Global","id":"5:6908:2039","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11879:21517":{"id":"2:11879:21517","crate_id":2,"name":"rsplitn","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by a\npattern, starting from the end of the string, restricted to returning\nat most `n` items.\n\nIf `n` substrings are returned, the last substring (the `n`th substring)\nwill contain the remainder of the string.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will not be double ended, because it is not\nefficient to support.\n\nFor splitting from the front, the [`splitn`] method can be used.\n\n[`splitn`]: str::splitn\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".rsplitn(3, ' ').collect();\nassert_eq!(v, [\"lamb\", \"little\", \"Mary had a\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".rsplitn(3, 'X').collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"lionX\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".rsplitn(2, \"::\").collect();\nassert_eq!(v, [\"leopard\", \"lion::tiger\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".rsplitn(2, |c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"ghi\", \"abc1def\"]);\n```","links":{"prim@char":"1:11828:409","str::splitn":"2:11876:21515","self::pattern":"2:11513:7641"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["n",{"kind":"primitive","inner":"usize"}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"RSplitN","id":"2:50818:7626","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11518:7637","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"2:11518:7637","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11533:7638","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11821:30011":{"id":"2:11821:30011","crate_id":2,"name":"as_bytes_mut","span":null,"visibility":"public","docs":"Converts a mutable string slice to a mutable byte slice.\n\n# Safety\n\nThe caller must ensure that the content of the slice is valid UTF-8\nbefore the borrow ends and the underlying `str` is used.\n\nUse of a `str` whose contents are not valid UTF-8 is undefined behavior.\n\n# Examples\n\nBasic usage:\n\n```\nlet mut s = String::from(\"Hello\");\nlet bytes = unsafe { s.as_bytes_mut() };\n\nassert_eq!(b\"Hello\", bytes);\n```\n\nMutability:\n\n```\nlet mut s = String::from(\"🗻∈🌏\");\n\nunsafe {\n    let bytes = s.as_bytes_mut();\n\n    bytes[0] = 0xF0;\n    bytes[1] = 0x9F;\n    bytes[2] = 0x8D;\n    bytes[3] = 0x94;\n}\n\nassert_eq!(\"🍔∈🌏\", s);\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"slice","inner":{"kind":"primitive","inner":"u8"}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}},"2:11820:21419":{"id":"2:11820:21419","crate_id":2,"name":"as_bytes","span":null,"visibility":"public","docs":"Converts a string slice to a byte slice. To convert the byte slice back\ninto a string slice, use the [`from_utf8`] function.\n\n# Examples\n\nBasic usage:\n\n```\nlet bytes = \"bors\".as_bytes();\nassert_eq!(b\"bors\", bytes);\n```","links":{"`from_utf8`":"2:11081:7645"},"attrs":["#[must_use]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"slice","inner":{"kind":"primitive","inner":"u8"}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11850:21521":{"id":"2:11850:21521","crate_id":2,"name":"ends_with","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a suffix of this\nstring slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nBasic usage:\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.ends_with(\"anas\"));\nassert!(!bananas.ends_with(\"nana\"));\n```","links":{"self::pattern":"2:11513:7641","prim@char":"1:11828:409"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11518:7637","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"2:11518:7637","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11533:7638","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11870:30015":{"id":"2:11870:30015","crate_id":2,"name":"split_terminator","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by\ncharacters matched by a pattern.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\nEquivalent to [`split`], except that the trailing substring\nis skipped if empty.\n\n[`split`]: str::split\n\nThis method can be used for string data that is _terminated_,\nrather than _separated_ by a pattern.\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rsplit_terminator`] method can be used.\n\n[`rsplit_terminator`]: str::rsplit_terminator\n\n# Examples\n\nBasic usage:\n\n```\nlet v: Vec<&str> = \"A.B.\".split_terminator('.').collect();\nassert_eq!(v, [\"A\", \"B\"]);\n\nlet v: Vec<&str> = \"A..B..\".split_terminator(\".\").collect();\nassert_eq!(v, [\"A\", \"\", \"B\", \"\"]);\n\nlet v: Vec<&str> = \"A.B:C.D\".split_terminator(&['.', ':'][..]).collect();\nassert_eq!(v, [\"A\", \"B\", \"C\", \"D\"]);\n```","links":{"prim@char":"1:11828:409","str::rsplit_terminator":"2:11873:30016","self::pattern":"2:11513:7641","str::split":"2:11861:21509","`DoubleEndedIterator`":"2:7123:120"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"SplitTerminator","id":"2:50746:7661","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11518:7637","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:0:1633":{"id":"0:0:1633","crate_id":0,"name":"winapi","span":{"filename":"src/lib.rs","begin":[6,0],"end":[71,1]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"module","inner":{"is_crate":true,"items":[],"is_stripped":false}},"5:5303:2166":{"id":"5:5303:2166","crate_id":5,"name":"repeat","span":null,"visibility":"public","docs":"Creates a new [`String`] by repeating a string `n` times.\n\n# Panics\n\nThis function will panic if the capacity would overflow.\n\n# Examples\n\nBasic usage:\n\n```\nassert_eq!(\"abc\".repeat(4), String::from(\"abcabcabcabc\"));\n```\n\nA panic upon overflow:\n\n```should_panic\n// this will panic at runtime\nlet huge = \"0123456789abcdef\".repeat(usize::MAX);\n```","links":{"`String`":"5:7157:221"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["n",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:7157:221","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11837:27144":{"id":"2:11837:27144","crate_id":2,"name":"char_indices","span":null,"visibility":"public","docs":"Returns an iterator over the [`char`]s of a string slice, and their\npositions.\n\nAs a string slice consists of valid UTF-8, we can iterate through a\nstring slice by [`char`]. This method returns an iterator of both\nthese [`char`]s, as well as their byte positions.\n\nThe iterator yields tuples. The position is first, the [`char`] is\nsecond.\n\n# Examples\n\nBasic usage:\n\n```\nlet word = \"goodbye\";\n\nlet count = word.char_indices().count();\nassert_eq!(7, count);\n\nlet mut char_indices = word.char_indices();\n\nassert_eq!(Some((0, 'g')), char_indices.next());\nassert_eq!(Some((1, 'o')), char_indices.next());\nassert_eq!(Some((2, 'o')), char_indices.next());\nassert_eq!(Some((3, 'd')), char_indices.next());\nassert_eq!(Some((4, 'b')), char_indices.next());\nassert_eq!(Some((5, 'y')), char_indices.next());\nassert_eq!(Some((6, 'e')), char_indices.next());\n\nassert_eq!(None, char_indices.next());\n```\n\nRemember, [`char`]s might not match your intuition about characters:\n\n[`char`]: prim@char\n\n```\nlet yes = \"y̆es\";\n\nlet mut char_indices = yes.char_indices();\n\nassert_eq!(Some((0, 'y')), char_indices.next()); // not (0, 'y̆')\nassert_eq!(Some((1, '\\u{0306}')), char_indices.next());\n\n// note the 3 here - the last character took up two bytes\nassert_eq!(Some((3, 'e')), char_indices.next());\nassert_eq!(Some((4, 's')), char_indices.next());\n\nassert_eq!(None, char_indices.next());\n```","links":{"prim@char":"1:11828:409"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"CharIndices","id":"2:50672:7647","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"5:5287:2143":{"id":"5:5287:2143","crate_id":5,"name":"replace","span":null,"visibility":"public","docs":"Replaces all matches of a pattern with another string.\n\n`replace` creates a new [`String`], and copies the data from this string slice into it.\nWhile doing so, it attempts to find matches of a pattern. If it finds any, it\nreplaces them with the replacement string slice.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"this is old\";\n\nassert_eq!(\"this is new\", s.replace(\"old\", \"new\"));\nassert_eq!(\"than an old\", s.replace(\"is\", \"an\"));\n```\n\nWhen the pattern doesn't match:\n\n```\nlet s = \"this is old\";\nassert_eq!(s, s.replace(\"cookie monster\", \"little lamb\"));\n```","links":{"`String`":"5:7157:221"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the replaced string as a new allocation, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["from",{"kind":"generic","inner":"P"}],["to",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:7157:221","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11518:7637","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11934:19701":{"id":"2:11934:19701","crate_id":2,"name":"make_ascii_lowercase","span":null,"visibility":"public","docs":"Converts this string to its ASCII lower case equivalent in-place.\n\nASCII letters 'A' to 'Z' are mapped to 'a' to 'z',\nbut non-ASCII letters are unchanged.\n\nTo return a new lowercased value without modifying the existing one, use\n[`to_ascii_lowercase()`].\n\n[`to_ascii_lowercase()`]: #method.to_ascii_lowercase\n\n# Examples\n\n```\nlet mut s = String::from(\"GRÜßE, JÜRGEN ❤\");\n\ns.make_ascii_lowercase();\n\nassert_eq!(\"grÜße, jÜrgen ❤\", s);\n```","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11926:30031":{"id":"2:11926:30031","crate_id":2,"name":"trim_right_matches","span":null,"visibility":"public","docs":"Returns a string slice with all suffixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. 'Right' in this context means the last\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _left_ side, not the right.\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_right_matches('1'), \"11foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_right_matches(char::is_numeric), \"123foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_right_matches(x), \"12foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1fooX\".trim_right_matches(|c| c == '1' || c == 'X'), \"1foo\");\n```","links":{"self::pattern":"2:11513:7641","prim@char":"1:11828:409"},"attrs":["#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_end_matches`\",\nsuggestion = \"trim_end_matches\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_end_matches`"},"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11518:7637","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"2:11518:7637","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11533:7638","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11900:30022":{"id":"2:11900:30022","crate_id":2,"name":"trim","span":null,"visibility":"public","docs":"Returns a string slice with leading and trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\n\nassert_eq!(\"Hello\\tworld\", s.trim());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a slice, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_trim\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11907:30026":{"id":"2:11907:30026","crate_id":2,"name":"trim_right","span":null,"visibility":"public","docs":"Returns a string slice with trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`.\n\n# Text directionality\n\nA string is a sequence of bytes. 'Right' in this context means the last\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _left_ side, not the right.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \" Hello\\tworld\\t\";\n\nassert_eq!(\" Hello\\tworld\", s.trim_right());\n```\n\nDirectionality:\n\n```\nlet s = \"English  \";\nassert!(Some('h') == s.trim_right().chars().rev().next());\n\nlet s = \"עברית  \";\nassert!(Some('ת') == s.trim_right().chars().rev().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_end`\", suggestion =\n\"trim_end\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_end`"},"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11931:19696":{"id":"2:11931:19696","crate_id":2,"name":"is_ascii","span":null,"visibility":"public","docs":"Checks if all characters in this string are within the ASCII range.\n\n# Examples\n\n```\nlet ascii = \"hello!\\n\";\nlet non_ascii = \"Grüße, Jürgen ❤\";\n\nassert!(ascii.is_ascii());\nassert!(!non_ascii.is_ascii());\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11876:21515":{"id":"2:11876:21515","crate_id":2,"name":"splitn","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by a\npattern, restricted to returning at most `n` items.\n\nIf `n` substrings are returned, the last substring (the `n`th substring)\nwill contain the remainder of the string.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will not be double ended, because it is\nnot efficient to support.\n\nIf the pattern allows a reverse search, the [`rsplitn`] method can be\nused.\n\n[`rsplitn`]: str::rsplitn\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lambda\".splitn(3, ' ').collect();\nassert_eq!(v, [\"Mary\", \"had\", \"a little lambda\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".splitn(3, \"X\").collect();\nassert_eq!(v, [\"lion\", \"\", \"tigerXleopard\"]);\n\nlet v: Vec<&str> = \"abcXdef\".splitn(1, 'X').collect();\nassert_eq!(v, [\"abcXdef\"]);\n\nlet v: Vec<&str> = \"\".splitn(1, 'X').collect();\nassert_eq!(v, [\"\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".splitn(2, |c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"abc\", \"defXghi\"]);\n```","links":{"self::pattern":"2:11513:7641","prim@char":"1:11828:409","str::rsplitn":"2:11879:21517"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["n",{"kind":"primitive","inner":"usize"}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"SplitN","id":"2:50800:7628","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11518:7637","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11894:30020":{"id":"2:11894:30020","crate_id":2,"name":"match_indices","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within this string\nslice as well as the index that the match starts at.\n\nFor matches of `pat` within `self` that overlap, only the indices\ncorresponding to the first match are returned.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rmatch_indices`] method can be used.\n\n[`rmatch_indices`]: str::rmatch_indices\n\n# Examples\n\nBasic usage:\n\n```\nlet v: Vec<_> = \"abcXXXabcYYYabc\".match_indices(\"abc\").collect();\nassert_eq!(v, [(0, \"abc\"), (6, \"abc\"), (12, \"abc\")]);\n\nlet v: Vec<_> = \"1abcabc2\".match_indices(\"abc\").collect();\nassert_eq!(v, [(1, \"abc\"), (4, \"abc\")]);\n\nlet v: Vec<_> = \"ababa\".match_indices(\"aba\").collect();\nassert_eq!(v, [(0, \"aba\")]); // only the first `aba`\n```","links":{"self::pattern":"2:11513:7641","str::rmatch_indices":"2:11897:30021","prim@char":"1:11828:409","`DoubleEndedIterator`":"2:7123:120"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"MatchIndices","id":"2:50846:7656","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11518:7637","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11861:21509":{"id":"2:11861:21509","crate_id":2,"name":"split","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by\ncharacters matched by a pattern.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rsplit`] method can be used.\n\n[`rsplit`]: str::rsplit\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".split(' ').collect();\nassert_eq!(v, [\"Mary\", \"had\", \"a\", \"little\", \"lamb\"]);\n\nlet v: Vec<&str> = \"\".split('X').collect();\nassert_eq!(v, [\"\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".split('X').collect();\nassert_eq!(v, [\"lion\", \"\", \"tiger\", \"leopard\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".split(\"::\").collect();\nassert_eq!(v, [\"lion\", \"tiger\", \"leopard\"]);\n\nlet v: Vec<&str> = \"abc1def2ghi\".split(char::is_numeric).collect();\nassert_eq!(v, [\"abc\", \"def\", \"ghi\"]);\n\nlet v: Vec<&str> = \"lionXtigerXleopard\".split(char::is_uppercase).collect();\nassert_eq!(v, [\"lion\", \"tiger\", \"leopard\"]);\n```\n\nIf the pattern is a slice of chars, split on each occurrence of any of the characters:\n\n```\nlet v: Vec<&str> = \"2020-11-03 23:59\".split(&['-', ' ', ':', '@'][..]).collect();\nassert_eq!(v, [\"2020\", \"11\", \"03\", \"23\", \"59\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".split(|c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"abc\", \"def\", \"ghi\"]);\n```\n\nIf a string contains multiple contiguous separators, you will end up\nwith empty strings in the output:\n\n```\nlet x = \"||||a||b|c\".to_string();\nlet d: Vec<_> = x.split('|').collect();\n\nassert_eq!(d, &[\"\", \"\", \"\", \"\", \"a\", \"\", \"b\", \"c\"]);\n```\n\nContiguous separators are separated by the empty string.\n\n```\nlet x = \"(///)\".to_string();\nlet d: Vec<_> = x.split('/').collect();\n\nassert_eq!(d, &[\"(\", \"\", \"\", \")\"]);\n```\n\nSeparators at the start or end of a string are neighbored\nby empty strings.\n\n```\nlet d: Vec<_> = \"010\".split(\"0\").collect();\nassert_eq!(d, &[\"\", \"1\", \"\"]);\n```\n\nWhen the empty string is used as a separator, it separates\nevery character in the string, along with the beginning\nand end of the string.\n\n```\nlet f: Vec<_> = \"rust\".split(\"\").collect();\nassert_eq!(f, &[\"\", \"r\", \"u\", \"s\", \"t\", \"\"]);\n```\n\nContiguous separators can lead to possibly surprising behavior\nwhen whitespace is used as the separator. This code is correct:\n\n```\nlet x = \"    a  b c\".to_string();\nlet d: Vec<_> = x.split(' ').collect();\n\nassert_eq!(d, &[\"\", \"\", \"\", \"\", \"a\", \"\", \"b\", \"c\"]);\n```\n\nIt does _not_ give you:\n\n```,ignore\nassert_eq!(d, &[\"a\", \"b\", \"c\"]);\n```\n\nUse [`split_whitespace`] for this behavior.\n\n[`split_whitespace`]: str::split_whitespace","links":{"self::pattern":"2:11513:7641","str::rsplit":"2:11867:21513","str::split_whitespace":"2:11839:27349","`DoubleEndedIterator`":"2:7123:120","prim@char":"1:11828:409"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Split","id":"2:50696:2141","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11518:7637","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11873:30016":{"id":"2:11873:30016","crate_id":2,"name":"rsplit_terminator","span":null,"visibility":"public","docs":"An iterator over substrings of `self`, separated by characters\nmatched by a pattern and yielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\nEquivalent to [`split`], except that the trailing substring is\nskipped if empty.\n\n[`split`]: str::split\n\nThis method can be used for string data that is _terminated_,\nrather than _separated_ by a pattern.\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a\nreverse search, and it will be double ended if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`split_terminator`] method can be\nused.\n\n[`split_terminator`]: str::split_terminator\n\n# Examples\n\n```\nlet v: Vec<&str> = \"A.B.\".rsplit_terminator('.').collect();\nassert_eq!(v, [\"B\", \"A\"]);\n\nlet v: Vec<&str> = \"A..B..\".rsplit_terminator(\".\").collect();\nassert_eq!(v, [\"\", \"B\", \"\", \"A\"]);\n\nlet v: Vec<&str> = \"A.B:C.D\".rsplit_terminator(&['.', ':'][..]).collect();\nassert_eq!(v, [\"D\", \"C\", \"B\", \"A\"]);\n```","links":{"self::pattern":"2:11513:7641","prim@char":"1:11828:409","str::split_terminator":"2:11870:30015","str::split":"2:11861:21509"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"RSplitTerminator","id":"2:50764:7660","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11518:7637","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"2:11518:7637","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11533:7638","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11822:310":{"id":"2:11822:310","crate_id":2,"name":"as_ptr","span":null,"visibility":"public","docs":"Converts a string slice to a raw pointer.\n\nAs string slices are a slice of bytes, the raw pointer points to a\n[`u8`]. This pointer will be pointing to the first byte of the string\nslice.\n\nThe caller must ensure that the returned pointer is never written to.\nIf you need to mutate the contents of the string slice, use [`as_mut_ptr`].\n\n[`as_mut_ptr`]: str::as_mut_ptr\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"Hello\";\nlet ptr = s.as_ptr();\n```","links":{"`u8`":"1:11845:1460","str::as_mut_ptr":"2:11823:21477"},"attrs":["#[must_use]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"raw_pointer","inner":{"mutable":false,"type":{"kind":"primitive","inner":"u8"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11836:27518":{"id":"2:11836:27518","crate_id":2,"name":"chars","span":null,"visibility":"public","docs":"Returns an iterator over the [`char`]s of a string slice.\n\nAs a string slice consists of valid UTF-8, we can iterate through a\nstring slice by [`char`]. This method returns such an iterator.\n\nIt's important to remember that [`char`] represents a Unicode Scalar\nValue, and might not match your idea of what a 'character' is. Iteration\nover grapheme clusters may be what you actually want. This functionality\nis not provided by Rust's standard library, check crates.io instead.\n\n# Examples\n\nBasic usage:\n\n```\nlet word = \"goodbye\";\n\nlet count = word.chars().count();\nassert_eq!(7, count);\n\nlet mut chars = word.chars();\n\nassert_eq!(Some('g'), chars.next());\nassert_eq!(Some('o'), chars.next());\nassert_eq!(Some('o'), chars.next());\nassert_eq!(Some('d'), chars.next());\nassert_eq!(Some('b'), chars.next());\nassert_eq!(Some('y'), chars.next());\nassert_eq!(Some('e'), chars.next());\n\nassert_eq!(None, chars.next());\n```\n\nRemember, [`char`]s might not match your intuition about characters:\n\n[`char`]: prim@char\n\n```\nlet y = \"y̆\";\n\nlet mut chars = y.chars();\n\nassert_eq!(Some('y'), chars.next()); // not 'y̆'\nassert_eq!(Some('\\u{0306}'), chars.next());\n\nassert_eq!(None, chars.next());\n```","links":{"prim@char":"1:11828:409"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Chars","id":"2:50666:7648","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11830:21476":{"id":"2:11830:21476","crate_id":2,"name":"get_unchecked_mut","span":null,"visibility":"public","docs":"Returns a mutable, unchecked subslice of `str`.\n\nThis is the unchecked alternative to indexing the `str`.\n\n# Safety\n\nCallers of this function are responsible that these preconditions are\nsatisfied:\n\n* The starting index must not exceed the ending index;\n* Indexes must be within bounds of the original slice;\n* Indexes must lie on UTF-8 sequence boundaries.\n\nFailing that, the returned string slice may reference invalid memory or\nviolate the invariants communicated by the `str` type.\n\n# Examples\n\n```\nlet mut v = String::from(\"🗻∈🌏\");\nunsafe {\n    assert_eq!(\"🗻\", v.get_unchecked_mut(0..4));\n    assert_eq!(\"∈\", v.get_unchecked_mut(4..7));\n    assert_eq!(\"🌏\", v.get_unchecked_mut(7..11));\n}\n```","links":{},"attrs":["#[rustc_const_unstable(feature = \"const_slice_index\", issue = \"none\")]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["i",{"kind":"generic","inner":"I"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"qualified_path","inner":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"I"},"trait":{"name":"SliceIndex","id":"2:9694:219","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}}}}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"2:9694:219","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}},"2:11932:19699":{"id":"2:11932:19699","crate_id":2,"name":"eq_ignore_ascii_case","span":null,"visibility":"public","docs":"Checks that two strings are an ASCII case-insensitive match.\n\nSame as `to_ascii_lowercase(a) == to_ascii_lowercase(b)`,\nbut without allocating and copying temporaries.\n\n# Examples\n\n```\nassert!(\"Ferris\".eq_ignore_ascii_case(\"FERRIS\"));\nassert!(\"Ferrös\".eq_ignore_ascii_case(\"FERRöS\"));\nassert!(!\"Ferrös\".eq_ignore_ascii_case(\"FERRÖS\"));\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["other",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11828:21475":{"id":"2:11828:21475","crate_id":2,"name":"get_unchecked","span":null,"visibility":"public","docs":"Returns an unchecked subslice of `str`.\n\nThis is the unchecked alternative to indexing the `str`.\n\n# Safety\n\nCallers of this function are responsible that these preconditions are\nsatisfied:\n\n* The starting index must not exceed the ending index;\n* Indexes must be within bounds of the original slice;\n* Indexes must lie on UTF-8 sequence boundaries.\n\nFailing that, the returned string slice may reference invalid memory or\nviolate the invariants communicated by the `str` type.\n\n# Examples\n\n```\nlet v = \"🗻∈🌏\";\nunsafe {\n    assert_eq!(\"🗻\", v.get_unchecked(0..4));\n    assert_eq!(\"∈\", v.get_unchecked(4..7));\n    assert_eq!(\"🌏\", v.get_unchecked(7..11));\n}\n```","links":{},"attrs":["#[rustc_const_unstable(feature = \"const_slice_index\", issue = \"none\")]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["i",{"kind":"generic","inner":"I"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"qualified_path","inner":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"I"},"trait":{"name":"SliceIndex","id":"2:9694:219","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}}}}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"2:9694:219","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}},"2:11811":{"id":"2:11811","crate_id":2,"name":null,"span":null,"visibility":{"restricted":{"parent":"2:11076:1364","path":"::str"}},"docs":null,"links":{},"attrs":["#[cfg(not(test))]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"kind":"primitive","inner":"str"},"items":["2:11812:797","2:11813:21339","2:11814:30008","2:11815:30009","2:11817:30010","2:11820:21419","2:11821:30011","2:11822:310","2:11823:21477","2:11824:21473","2:11826:21474","2:11828:21475","2:11830:21476","2:11832:30012","2:11833:30013","2:11834:21501","2:11835:21502","2:11836:27518","2:11837:27144","2:11838:19326","2:11839:27349","2:11840:27441","2:11841:25583","2:11842:30014","2:11843:27519","2:11844:21519","2:11847:21520","2:11850:21521","2:11853:19198","2:11857:19199","2:11861:21509","2:11864:21511","2:11867:21513","2:11870:30015","2:11873:30016","2:11876:21515","2:11879:21517","2:11882:30017","2:11885:30018","2:11888:1847","2:11891:30019","2:11894:30020","2:11897:30021","2:11900:30022","2:11902:30023","2:11904:30024","2:11906:30025","2:11907:30026","2:11908:30027","2:11911:30028","2:11914:19600","2:11917:21522","2:11920:30029","2:11923:30030","2:11926:30031","2:11929:30032","2:11931:19696","2:11932:19699","2:11933:19700","2:11934:19701","2:11935:30033","2:11937:1958","2:11938:30034"],"negative":false,"synthetic":false,"blanket_impl":null}},"5:5302:30688":{"id":"5:5302:30688","crate_id":5,"name":"into_string","span":null,"visibility":"public","docs":"Converts a [`Box<str>`] into a [`String`] without copying or allocating.\n\n# Examples\n\nBasic usage:\n\n```\nlet string = String::from(\"birthday gift\");\nlet boxed_str = string.clone().into_boxed_str();\n\nassert_eq!(boxed_str.into_string(), string);\n```","links":{"`Box<str>`":"5:288:1878","`String`":"5:7157:221"},"attrs":["#[must_use = \"`self` will be dropped if the result is not used\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"resolved_path","inner":{"name":"Box","id":"5:288:1878","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}},{"type":{"kind":"resolved_path","inner":{"name":"Global","id":"5:6908:2039","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:7157:221","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"5:5305:19698":{"id":"5:5305:19698","crate_id":5,"name":"to_ascii_lowercase","span":null,"visibility":"public","docs":"Returns a copy of this string where each character is mapped to its\nASCII lower case equivalent.\n\nASCII letters 'A' to 'Z' are mapped to 'a' to 'z',\nbut non-ASCII letters are unchanged.\n\nTo lowercase the value in-place, use [`make_ascii_lowercase`].\n\nTo lowercase ASCII characters in addition to non-ASCII characters, use\n[`to_lowercase`].\n\n# Examples\n\n```\nlet s = \"Grüße, Jürgen ❤\";\n\nassert_eq!(\"grüße, jürgen ❤\", s.to_ascii_lowercase());\n```\n\n[`make_ascii_lowercase`]: str::make_ascii_lowercase\n[`to_lowercase`]: #method.to_lowercase","links":{"str::make_ascii_lowercase":"2:11934:19701"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use = \"to lowercase the value in-place, use `make_ascii_lowercase()`\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:7157:221","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11935:30033":{"id":"2:11935:30033","crate_id":2,"name":"escape_debug","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_debug`].\n\nNote: only extended grapheme codepoints that begin the string will be\nescaped.\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"❤\\n!\".escape_debug() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"❤\\n!\".escape_debug());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"❤\\\\n!\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"❤\\n!\".escape_debug().to_string(), \"❤\\\\n!\");\n```","links":{"`char::escape_debug`":"2:4498:30033"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"EscapeDebug","id":"2:50995:7652","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11867:21513":{"id":"2:11867:21513","crate_id":2,"name":"rsplit","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by\ncharacters matched by a pattern and yielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`split`] method can be used.\n\n[`split`]: str::split\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".rsplit(' ').collect();\nassert_eq!(v, [\"lamb\", \"little\", \"a\", \"had\", \"Mary\"]);\n\nlet v: Vec<&str> = \"\".rsplit('X').collect();\nassert_eq!(v, [\"\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".rsplit('X').collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"\", \"lion\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".rsplit(\"::\").collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"lion\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".rsplit(|c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"ghi\", \"def\", \"abc\"]);\n```","links":{"str::split":"2:11861:21509","self::pattern":"2:11513:7641","prim@char":"1:11828:409","`DoubleEndedIterator`":"2:7123:120"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"RSplit","id":"2:50714:7624","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11518:7637","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"2:11518:7637","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11533:7638","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11902:30023":{"id":"2:11902:30023","crate_id":2,"name":"trim_start","span":null,"visibility":"public","docs":"Returns a string slice with leading whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Text directionality\n\nA string is a sequence of bytes. `start` in this context means the first\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be left side, and for right-to-left languages like\nArabic or Hebrew, this will be the right side.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\nassert_eq!(\"Hello\\tworld\\t\\n\", s.trim_start());\n```\n\nDirectionality:\n\n```\nlet s = \"  English  \";\nassert!(Some('E') == s.trim_start().chars().next());\n\nlet s = \"  עברית  \";\nassert!(Some('ע') == s.trim_start().chars().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_trim_start\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11908:30027":{"id":"2:11908:30027","crate_id":2,"name":"trim_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes and suffixes that match a\npattern repeatedly removed.\n\nThe [pattern] can be a [`char`], a slice of [`char`]s, or a function\nor closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_matches('1'), \"foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_matches(char::is_numeric), \"foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_matches(x), \"foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1foo1barXX\".trim_matches(|c| c == '1' || c == 'X'), \"foo1bar\");\n```","links":{"self::pattern":"2:11513:7641","prim@char":"1:11828:409"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11518:7637","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"2:11518:7637","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"DoubleEndedSearcher","id":"2:11538:7636","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11911:30028":{"id":"2:11911:30028","crate_id":2,"name":"trim_start_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. `start` in this context means the first\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be left side, and for right-to-left languages like\nArabic or Hebrew, this will be the right side.\n\n# Examples\n\nBasic usage:\n\n```\nassert_eq!(\"11foo1bar11\".trim_start_matches('1'), \"foo1bar11\");\nassert_eq!(\"123foo1bar123\".trim_start_matches(char::is_numeric), \"foo1bar123\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_start_matches(x), \"foo1bar12\");\n```","links":{"self::pattern":"2:11513:7641","prim@char":"1:11828:409"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11518:7637","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11923:30030":{"id":"2:11923:30030","crate_id":2,"name":"trim_left_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. 'Left' in this context means the first\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _right_ side, not the left.\n\n# Examples\n\nBasic usage:\n\n```\nassert_eq!(\"11foo1bar11\".trim_left_matches('1'), \"foo1bar11\");\nassert_eq!(\"123foo1bar123\".trim_left_matches(char::is_numeric), \"foo1bar123\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_left_matches(x), \"foo1bar12\");\n```","links":{"self::pattern":"2:11513:7641","prim@char":"1:11828:409"},"attrs":["#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_start_matches`\",\nsuggestion = \"trim_start_matches\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_start_matches`"},"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11518:7637","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"5:5304:19697":{"id":"5:5304:19697","crate_id":5,"name":"to_ascii_uppercase","span":null,"visibility":"public","docs":"Returns a copy of this string where each character is mapped to its\nASCII upper case equivalent.\n\nASCII letters 'a' to 'z' are mapped to 'A' to 'Z',\nbut non-ASCII letters are unchanged.\n\nTo uppercase the value in-place, use [`make_ascii_uppercase`].\n\nTo uppercase ASCII characters in addition to non-ASCII characters, use\n[`to_uppercase`].\n\n# Examples\n\n```\nlet s = \"Grüße, Jürgen ❤\";\n\nassert_eq!(\"GRüßE, JüRGEN ❤\", s.to_ascii_uppercase());\n```\n\n[`make_ascii_uppercase`]: str::make_ascii_uppercase\n[`to_uppercase`]: #method.to_uppercase","links":{"str::make_ascii_uppercase":"2:11933:19700"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use = \"to uppercase the value in-place, use `make_ascii_uppercase()`\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:7157:221","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11813:21339":{"id":"2:11813:21339","crate_id":2,"name":"is_empty","span":null,"visibility":"public","docs":"Returns `true` if `self` has a length of zero bytes.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\";\nassert!(s.is_empty());\n\nlet s = \"not empty\";\nassert!(!s.is_empty());\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11933:19700":{"id":"2:11933:19700","crate_id":2,"name":"make_ascii_uppercase","span":null,"visibility":"public","docs":"Converts this string to its ASCII upper case equivalent in-place.\n\nASCII letters 'a' to 'z' are mapped to 'A' to 'Z',\nbut non-ASCII letters are unchanged.\n\nTo return a new uppercased value without modifying the existing one, use\n[`to_ascii_uppercase()`].\n\n[`to_ascii_uppercase()`]: #method.to_ascii_uppercase\n\n# Examples\n\n```\nlet mut s = String::from(\"Grüße, Jürgen ❤\");\n\ns.make_ascii_uppercase();\n\nassert_eq!(\"GRüßE, JüRGEN ❤\", s);\n```","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11814:30008":{"id":"2:11814:30008","crate_id":2,"name":"is_char_boundary","span":null,"visibility":"public","docs":"Checks that `index`-th byte is the first byte in a UTF-8 code point\nsequence or the end of the string.\n\nThe start and end of the string (when `index == self.len()`) are\nconsidered to be boundaries.\n\nReturns `false` if `index` is greater than `self.len()`.\n\n# Examples\n\n```\nlet s = \"Löwe 老虎 Léopard\";\nassert!(s.is_char_boundary(0));\n// start of `老`\nassert!(s.is_char_boundary(6));\nassert!(s.is_char_boundary(s.len()));\n\n// second byte of `ö`\nassert!(!s.is_char_boundary(2));\n\n// third byte of `老`\nassert!(!s.is_char_boundary(8));\n```","links":{},"attrs":["#[must_use]","#[rustc_const_unstable(feature = \"const_is_char_boundary\", issue = \"none\")]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["index",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11840:27441":{"id":"2:11840:27441","crate_id":2,"name":"split_ascii_whitespace","span":null,"visibility":"public","docs":"Splits a string slice by ASCII whitespace.\n\nThe iterator returned will return string slices that are sub-slices of\nthe original string slice, separated by any amount of ASCII whitespace.\n\nTo split by Unicode `Whitespace` instead, use [`split_whitespace`].\n\n[`split_whitespace`]: str::split_whitespace\n\n# Examples\n\nBasic usage:\n\n```\nlet mut iter = \"A few words\".split_ascii_whitespace();\n\nassert_eq!(Some(\"A\"), iter.next());\nassert_eq!(Some(\"few\"), iter.next());\nassert_eq!(Some(\"words\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nAll kinds of ASCII whitespace are considered:\n\n```\nlet mut iter = \" Mary   had\\ta little  \\n\\t lamb\".split_ascii_whitespace();\nassert_eq!(Some(\"Mary\"), iter.next());\nassert_eq!(Some(\"had\"), iter.next());\nassert_eq!(Some(\"a\"), iter.next());\nassert_eq!(Some(\"little\"), iter.next());\nassert_eq!(Some(\"lamb\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nIf the string is empty or all ASCII whitespace, the iterator yields no string slices:\n```\nassert_eq!(\"\".split_ascii_whitespace().next(), None);\nassert_eq!(\"   \".split_ascii_whitespace().next(), None);\n```","links":{"str::split_whitespace":"2:11839:27349"},"attrs":["#[must_use =\n\"this returns the split string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"SplitAsciiWhitespace","id":"2:50979:7643","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11914:19600":{"id":"2:11914:19600","crate_id":2,"name":"strip_prefix","span":null,"visibility":"public","docs":"Returns a string slice with the prefix removed.\n\nIf the string starts with the pattern `prefix`, returns substring after the prefix, wrapped\nin `Some`.  Unlike `trim_start_matches`, this method removes the prefix exactly once.\n\nIf the string does not start with `prefix`, returns `None`.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nassert_eq!(\"foo:bar\".strip_prefix(\"foo:\"), Some(\"bar\"));\nassert_eq!(\"foo:bar\".strip_prefix(\"bar\"), None);\nassert_eq!(\"foofoo\".strip_prefix(\"foo\"), Some(\"foo\"));\n```","links":{"prim@char":"1:11828:409","self::pattern":"2:11513:7641"},"attrs":["#[must_use =\n\"this returns the remaining substring as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["prefix",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:48726:178","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11518:7637","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"5:5301:30687":{"id":"5:5301:30687","crate_id":5,"name":"to_uppercase","span":null,"visibility":"public","docs":"Returns the uppercase equivalent of this string slice, as a new [`String`].\n\n'Uppercase' is defined according to the terms of the Unicode Derived Core Property\n`Uppercase`.\n\nSince some characters can expand into multiple characters when changing\nthe case, this function returns a [`String`] instead of modifying the\nparameter in-place.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"hello\";\n\nassert_eq!(\"HELLO\", s.to_uppercase());\n```\n\nScripts without case are not changed:\n\n```\nlet new_year = \"农历新年\";\n\nassert_eq!(new_year, new_year.to_uppercase());\n```\n\nOne character can become multiple:\n```\nlet s = \"tschüß\";\n\nassert_eq!(\"TSCHÜSS\", s.to_uppercase());\n```","links":{"`String`":"5:7157:221"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the uppercase string as a new String, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:7157:221","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"5:5293:30686":{"id":"5:5293:30686","crate_id":5,"name":"to_lowercase","span":null,"visibility":"public","docs":"Returns the lowercase equivalent of this string slice, as a new [`String`].\n\n'Lowercase' is defined according to the terms of the Unicode Derived Core Property\n`Lowercase`.\n\nSince some characters can expand into multiple characters when changing\nthe case, this function returns a [`String`] instead of modifying the\nparameter in-place.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"HELLO\";\n\nassert_eq!(\"hello\", s.to_lowercase());\n```\n\nA tricky example, with sigma:\n\n```\nlet sigma = \"Σ\";\n\nassert_eq!(\"σ\", sigma.to_lowercase());\n\n// but at the end of a word, it's ς, not σ:\nlet odysseus = \"ὈΔΥΣΣΕΎΣ\";\n\nassert_eq!(\"ὀδυσσεύς\", odysseus.to_lowercase());\n```\n\nLanguages without case are not changed:\n\n```\nlet new_year = \"农历新年\";\n\nassert_eq!(new_year, new_year.to_lowercase());\n```","links":{"`String`":"5:7157:221"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the lowercase string as a new String, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:7157:221","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11844:21519":{"id":"2:11844:21519","crate_id":2,"name":"contains","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a sub-slice of\nthis string slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nBasic usage:\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.contains(\"nana\"));\nassert!(!bananas.contains(\"apples\"));\n```","links":{"self::pattern":"2:11513:7641","prim@char":"1:11828:409"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11518:7637","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"5:5290:30685":{"id":"5:5290:30685","crate_id":5,"name":"replacen","span":null,"visibility":"public","docs":"Replaces first N matches of a pattern with another string.\n\n`replacen` creates a new [`String`], and copies the data from this string slice into it.\nWhile doing so, it attempts to find matches of a pattern. If it finds any, it\nreplaces them with the replacement string slice at most `count` times.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"foo foo 123 foo\";\nassert_eq!(\"new new 123 foo\", s.replacen(\"foo\", \"new\", 2));\nassert_eq!(\"faa fao 123 foo\", s.replacen('o', \"a\", 3));\nassert_eq!(\"foo foo new23 foo\", s.replacen(char::is_numeric, \"new\", 1));\n```\n\nWhen the pattern doesn't match:\n\n```\nlet s = \"this is old\";\nassert_eq!(s, s.replacen(\"cookie monster\", \"little lamb\", 10));\n```","links":{"`String`":"5:7157:221"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the replaced string as a new allocation, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}],["to",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}],["count",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:7157:221","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11518:7637","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11815:30009":{"id":"2:11815:30009","crate_id":2,"name":"floor_char_boundary","span":null,"visibility":"public","docs":"Finds the closest `x` not exceeding `index` where `is_char_boundary(x)` is `true`.\n\nThis method can help you truncate a string so that it's still valid UTF-8, but doesn't\nexceed a given number of bytes. Note that this is done purely at the character level\nand can still visually split graphemes, even though the underlying characters aren't\nsplit. For example, the emoji 🧑‍🔬 (scientist) could be split so that the string only\nincludes 🧑 (person) instead.\n\n# Examples\n\n```\n#![feature(round_char_boundary)]\nlet s = \"❤️🧡💛💚💙💜\";\nassert_eq!(s.len(), 26);\nassert!(!s.is_char_boundary(13));\n\nlet closest = s.floor_char_boundary(13);\nassert_eq!(closest, 10);\nassert_eq!(&s[..closest], \"❤️🧡\");\n```","links":{},"attrs":["#[unstable(feature = \"round_char_boundary\", issue = \"93743\")]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["index",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"primitive","inner":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11833:30013":{"id":"2:11833:30013","crate_id":2,"name":"slice_mut_unchecked","span":null,"visibility":"public","docs":"Creates a string slice from another string slice, bypassing safety\nchecks.\nThis is generally not recommended, use with caution! For a safe\nalternative see [`str`] and [`IndexMut`].\n\n[`IndexMut`]: crate::ops::IndexMut\n\nThis new slice goes from `begin` to `end`, including `begin` but\nexcluding `end`.\n\nTo get an immutable string slice instead, see the\n[`slice_unchecked`] method.\n\n[`slice_unchecked`]: str::slice_unchecked\n\n# Safety\n\nCallers of this function are responsible that three preconditions are\nsatisfied:\n\n* `begin` must not exceed `end`.\n* `begin` and `end` must be byte positions within the string slice.\n* `begin` and `end` must lie on UTF-8 sequence boundaries.","links":{"crate::ops::IndexMut":"2:2994:2036","`str`":"1:11834:1364","str::slice_unchecked":"2:11832:30012"},"attrs":["#[deprecated(since = \"1.29.0\", note =\n\"use `get_unchecked_mut(begin..end)` instead\")]"],"deprecation":{"since":"1.29.0","note":"use `get_unchecked_mut(begin..end)` instead"},"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["begin",{"kind":"primitive","inner":"usize"}],["end",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}},"2:11812:797":{"id":"2:11812:797","crate_id":2,"name":"len","span":null,"visibility":"public","docs":"Returns the length of `self`.\n\nThis length is in bytes, not [`char`]s or graphemes. In other words,\nit might not be what a human considers the length of the string.\n\n[`char`]: prim@char\n\n# Examples\n\nBasic usage:\n\n```\nlet len = \"foo\".len();\nassert_eq!(3, len);\n\nassert_eq!(\"ƒoo\".len(), 4); // fancy f!\nassert_eq!(\"ƒoo\".chars().count(), 3);\n```","links":{"prim@char":"1:11828:409"},"attrs":["#[must_use]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11823:21477":{"id":"2:11823:21477","crate_id":2,"name":"as_mut_ptr","span":null,"visibility":"public","docs":"Converts a mutable string slice to a raw pointer.\n\nAs string slices are a slice of bytes, the raw pointer points to a\n[`u8`]. This pointer will be pointing to the first byte of the string\nslice.\n\nIt is your responsibility to make sure that the string slice only gets\nmodified in a way that it remains valid UTF-8.","links":{"`u8`":"1:11845:1460"},"attrs":["#[must_use]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"raw_pointer","inner":{"mutable":true,"type":{"kind":"primitive","inner":"u8"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11839:27349":{"id":"2:11839:27349","crate_id":2,"name":"split_whitespace","span":null,"visibility":"public","docs":"Splits a string slice by whitespace.\n\nThe iterator returned will return string slices that are sub-slices of\nthe original string slice, separated by any amount of whitespace.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`. If you only want to split on ASCII whitespace\ninstead, use [`split_ascii_whitespace`].\n\n[`split_ascii_whitespace`]: str::split_ascii_whitespace\n\n# Examples\n\nBasic usage:\n\n```\nlet mut iter = \"A few words\".split_whitespace();\n\nassert_eq!(Some(\"A\"), iter.next());\nassert_eq!(Some(\"few\"), iter.next());\nassert_eq!(Some(\"words\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nAll kinds of whitespace are considered:\n\n```\nlet mut iter = \" Mary   had\\ta\\u{2009}little  \\n\\t lamb\".split_whitespace();\nassert_eq!(Some(\"Mary\"), iter.next());\nassert_eq!(Some(\"had\"), iter.next());\nassert_eq!(Some(\"a\"), iter.next());\nassert_eq!(Some(\"little\"), iter.next());\nassert_eq!(Some(\"lamb\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nIf the string is empty or all whitespace, the iterator yields no string slices:\n```\nassert_eq!(\"\".split_whitespace().next(), None);\nassert_eq!(\"   \".split_whitespace().next(), None);\n```","links":{"str::split_ascii_whitespace":"2:11840:27441"},"attrs":["#[must_use =\n\"this returns the split string as an iterator, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_split_whitespace\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"SplitWhitespace","id":"2:50970:7644","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11904:30024":{"id":"2:11904:30024","crate_id":2,"name":"trim_end","span":null,"visibility":"public","docs":"Returns a string slice with trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Text directionality\n\nA string is a sequence of bytes. `end` in this context means the last\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be right side, and for right-to-left languages like\nArabic or Hebrew, this will be the left side.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\nassert_eq!(\"\\n Hello\\tworld\", s.trim_end());\n```\n\nDirectionality:\n\n```\nlet s = \"  English  \";\nassert!(Some('h') == s.trim_end().chars().rev().next());\n\nlet s = \"  עברית  \";\nassert!(Some('ת') == s.trim_end().chars().rev().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_trim_end\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11834:21501":{"id":"2:11834:21501","crate_id":2,"name":"split_at","span":null,"visibility":"public","docs":"Divide one string slice into two at an index.\n\nThe argument, `mid`, should be a byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get mutable string slices instead, see the [`split_at_mut`]\nmethod.\n\n[`split_at_mut`]: str::split_at_mut\n\n# Panics\n\nPanics if `mid` is not on a UTF-8 code point boundary, or if it is\npast the end of the last code point of the string slice.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"Per Martin-Löf\";\n\nlet (first, last) = s.split_at(3);\n\nassert_eq!(\"Per\", first);\nassert_eq!(\" Martin-Löf\", last);\n```","links":{"str::split_at_mut":"2:11835:21502"},"attrs":["#[must_use]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["mid",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"tuple","inner":[{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11853:19198":{"id":"2:11853:19198","crate_id":2,"name":"find","span":null,"visibility":"public","docs":"Returns the byte index of the first character of this string slice that\nmatches the pattern.\n\nReturns [`None`] if the pattern doesn't match.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nlet s = \"Löwe 老虎 Léopard Gepardi\";\n\nassert_eq!(s.find('L'), Some(0));\nassert_eq!(s.find('é'), Some(14));\nassert_eq!(s.find(\"pard\"), Some(17));\n```\n\nMore complex patterns using point-free style and closures:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\n\nassert_eq!(s.find(char::is_whitespace), Some(5));\nassert_eq!(s.find(char::is_lowercase), Some(1));\nassert_eq!(s.find(|c: char| c.is_whitespace() || c.is_lowercase()), Some(1));\nassert_eq!(s.find(|c: char| (c < 'o') && (c > 'a')), Some(4));\n```\n\nNot finding the pattern:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\nlet x: &[_] = &['1', '2'];\n\nassert_eq!(s.find(x), None);\n```","links":{"prim@char":"1:11828:409","`None`":"2:48728:176","self::pattern":"2:11513:7641"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:48726:178","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11518:7637","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11885:30018":{"id":"2:11885:30018","crate_id":2,"name":"rsplit_once","span":null,"visibility":"public","docs":"Splits the string on the last occurrence of the specified delimiter and\nreturns prefix before delimiter and suffix after delimiter.\n\n# Examples\n\n```\nassert_eq!(\"cfg\".rsplit_once('='), None);\nassert_eq!(\"cfg=foo\".rsplit_once('='), Some((\"cfg\", \"foo\")));\nassert_eq!(\"cfg=foo=bar\".rsplit_once('='), Some((\"cfg=foo\", \"bar\")));\n```","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["delimiter",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:48726:178","args":{"angle_bracketed":{"args":[{"type":{"kind":"tuple","inner":[{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}},{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11518:7637","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"2:11518:7637","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11533:7638","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11920:30029":{"id":"2:11920:30029","crate_id":2,"name":"trim_end_matches","span":null,"visibility":"public","docs":"Returns a string slice with all suffixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. `end` in this context means the last\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be right side, and for right-to-left languages like\nArabic or Hebrew, this will be the left side.\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_end_matches('1'), \"11foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_end_matches(char::is_numeric), \"123foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_end_matches(x), \"12foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1fooX\".trim_end_matches(|c| c == '1' || c == 'X'), \"1foo\");\n```","links":{"self::pattern":"2:11513:7641","prim@char":"1:11828:409"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11518:7637","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"2:11518:7637","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11533:7638","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11888:1847":{"id":"2:11888:1847","crate_id":2,"name":"matches","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within the given string\nslice.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rmatches`] method can be used.\n\n[`rmatches`]: str::matches\n\n# Examples\n\nBasic usage:\n\n```\nlet v: Vec<&str> = \"abcXXXabcYYYabc\".matches(\"abc\").collect();\nassert_eq!(v, [\"abc\", \"abc\", \"abc\"]);\n\nlet v: Vec<&str> = \"1abc2abc3\".matches(char::is_numeric).collect();\nassert_eq!(v, [\"1\", \"2\", \"3\"]);\n```","links":{"`DoubleEndedIterator`":"2:7123:120","prim@char":"1:11828:409","str::matches":"2:11888:1847","self::pattern":"2:11513:7641"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Matches","id":"2:50900:7658","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11518:7637","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11864:21511":{"id":"2:11864:21511","crate_id":2,"name":"split_inclusive","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by\ncharacters matched by a pattern. Differs from the iterator produced by\n`split` in that `split_inclusive` leaves the matched part as the\nterminator of the substring.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\\nlittle lamb\\nlittle lamb.\"\n    .split_inclusive('\\n').collect();\nassert_eq!(v, [\"Mary had a little lamb\\n\", \"little lamb\\n\", \"little lamb.\"]);\n```\n\nIf the last element of the string is matched,\nthat element will be considered the terminator of the preceding substring.\nThat substring will be the last item returned by the iterator.\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\\nlittle lamb\\nlittle lamb.\\n\"\n    .split_inclusive('\\n').collect();\nassert_eq!(v, [\"Mary had a little lamb\\n\", \"little lamb\\n\", \"little lamb.\\n\"]);\n```","links":{"self::pattern":"2:11513:7641","prim@char":"1:11828:409"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"SplitInclusive","id":"2:11337:7630","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11518:7637","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11824:21473":{"id":"2:11824:21473","crate_id":2,"name":"get","span":null,"visibility":"public","docs":"Returns a subslice of `str`.\n\nThis is the non-panicking alternative to indexing the `str`. Returns\n[`None`] whenever equivalent indexing operation would panic.\n\n# Examples\n\n```\nlet v = String::from(\"🗻∈🌏\");\n\nassert_eq!(Some(\"🗻\"), v.get(0..4));\n\n// indices not on UTF-8 sequence boundaries\nassert!(v.get(1..).is_none());\nassert!(v.get(..8).is_none());\n\n// out of bounds\nassert!(v.get(..42).is_none());\n```","links":{"`None`":"2:48728:176"},"attrs":["#[rustc_const_unstable(feature = \"const_slice_index\", issue = \"none\")]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["i",{"kind":"generic","inner":"I"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:48726:178","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"qualified_path","inner":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"I"},"trait":{"name":"SliceIndex","id":"2:9694:219","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}}}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"2:9694:219","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"paths":{"2:7146:1876":{"crate_id":2,"path":["core","iter","traits","exact_size","ExactSizeIterator"],"kind":"trait"},"1:8978:15053":{"crate_id":1,"path":["std","sync","mpmc","select","Operation"],"kind":"struct"},"1:353:1952":{"crate_id":1,"path":["std","thread","scoped","Scope"],"kind":"struct"},"6:4296:12087":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_envelope"],"kind":"struct"},"16:6137:15021":{"crate_id":16,"path":["gimli","read","abbrev","Abbreviations"],"kind":"struct"},"2:2510:234":{"crate_id":2,"path":["core","convert","TryFrom"],"kind":"trait"},"2:2994:2036":{"crate_id":2,"path":["core","ops","index","IndexMut"],"kind":"trait"},"9:920:13791":{"crate_id":9,"path":["miniz_oxide","MZError"],"kind":"enum"},"2:54007:2495":{"crate_id":2,"path":["core","core_arch","simd","u8x64"],"kind":"struct"},"1:2257:2093":{"crate_id":1,"path":["std","fs","read_to_string"],"kind":"function"},"2:8960:131":{"crate_id":2,"path":["core","fmt","Formatter"],"kind":"struct"},"1:11041:19584":{"crate_id":1,"path":["std","sys","unix","time","Timespec"],"kind":"struct"},"6:5851:11982":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","sysinfo"],"kind":"struct"},"2:11081:7645":{"crate_id":2,"path":["core","str","converts","from_utf8"],"kind":"function"},"2:2814:8011":{"crate_id":2,"path":["core","ops","bit","Not"],"kind":"trait"},"2:12129:28751":{"crate_id":2,"path":["core","future","join","MaybeDone"],"kind":"enum"},"5:4938:2348":{"crate_id":5,"path":["alloc","rc","Weak"],"kind":"struct"},"2:11474:2315":{"crate_id":2,"path":["core","str","traits","FromStr"],"kind":"trait"},"2:2856:8016":{"crate_id":2,"path":["core","ops","bit","BitXorAssign"],"kind":"trait"},"2:9929:7630":{"crate_id":2,"path":["core","slice","iter","SplitInclusive"],"kind":"struct"},"5:1612:30979":{"crate_id":5,"path":["alloc","collections","btree","map","drop","DropGuard"],"kind":"struct"},"2:49115:82":{"crate_id":2,"path":["core","sync","atomic","AtomicI32"],"kind":"struct"},"6:4621:12120":{"crate_id":6,"path":["libc","unix","linux_like","linux","j1939_filter"],"kind":"struct"},"1:1611:1987":{"crate_id":1,"path":["std","collections","hash","set","Drain"],"kind":"struct"},"17:9791:15292":{"crate_id":17,"path":["object","read","elf","version","VernauxIterator"],"kind":"struct"},"2:50551:7603":{"crate_id":2,"path":["core","slice","iter","ArrayChunks"],"kind":"struct"},"6:5845:12796":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","sigset_t"],"kind":"struct"},"16:8014:15092":{"crate_id":16,"path":["gimli","read","value","Value"],"kind":"enum"},"12:2184:27148":{"crate_id":12,"path":["hashbrown","raw","bitmask","BitMask"],"kind":"struct"},"1:678:1963":{"crate_id":1,"path":["std","backtrace","BacktraceFrame"],"kind":"struct"},"12:2205:1980":{"crate_id":12,"path":["hashbrown","TryReserveError"],"kind":"enum"},"6:119:8483":{"crate_id":6,"path":["libc","unix","FILE"],"kind":"enum"},"2:20441:27849":{"crate_id":2,"path":["core","core_simd","swizzle","interleave","Hi"],"kind":"struct"},"1:4000:2212":{"crate_id":1,"path":["std","os","unix","fs","DirEntryExt"],"kind":"trait"},"1:9363:20376":{"crate_id":1,"path":["std","sys","unix","fs","Dir"],"kind":"struct"},"17:12617:18408":{"crate_id":17,"path":["object","pe","ImageFileHeader"],"kind":"struct"},"2:52873:2462":{"crate_id":2,"path":["core","core_arch","simd","i16x8"],"kind":"struct"},"2:2836:8012":{"crate_id":2,"path":["core","ops","bit","Shl"],"kind":"trait"},"17:9223:15204":{"crate_id":17,"path":["object","read","archive","ArchiveKind"],"kind":"enum"},"2:52995:2455":{"crate_id":2,"path":["core","core_arch","simd","f64x4"],"kind":"struct"},"17:10321:15352":{"crate_id":17,"path":["object","read","pe","data_directory","DataDirectories"],"kind":"struct"},"1:10108:2335":{"crate_id":1,"path":["std","sys","unix","pipe","AnonPipe"],"kind":"struct"},"2:25630:2194":{"crate_id":2,"path":["core","num","wrapping","Wrapping"],"kind":"struct"},"16:6298:15032":{"crate_id":16,"path":["gimli","read","index","UnitIndex"],"kind":"struct"},"2:7514:27551":{"crate_id":2,"path":["core","net","display_buffer","DisplayBuffer"],"kind":"struct"},"1:1889:2064":{"crate_id":1,"path":["std","env","ArgsOs"],"kind":"struct"},"12:1003:1998":{"crate_id":12,"path":["hashbrown","map","OccupiedEntry"],"kind":"struct"},"5:1959:2021":{"crate_id":5,"path":["alloc","collections","btree","map","Cursor"],"kind":"struct"},"2:47047:8021":{"crate_id":2,"path":["core","ops","try_trait","Yeet"],"kind":"struct"},"1:8213:2183":{"crate_id":1,"path":["std","os","unix","net","addr","SocketAddr"],"kind":"struct"},"1:10816:19576":{"crate_id":1,"path":["std","sys","unix","process","process_common","ProgramKind"],"kind":"enum"},"2:47268:1959":{"crate_id":2,"path":["core","ascii","EscapeDefault"],"kind":"struct"},"2:7095:1877":{"crate_id":2,"path":["core","iter","traits","collect","Extend"],"kind":"trait"},"17:13091:19004":{"crate_id":17,"path":["object","pe","ImageBoundForwarderRef"],"kind":"struct"},"1:8923:1935":{"crate_id":1,"path":["std","sync","mpmc","context","Inner"],"kind":"struct"},"6:4788:12138":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_ifr_ifru"],"kind":"union"},"17:9501:15224":{"crate_id":17,"path":["object","read","elf","section","SectionTable"],"kind":"struct"},"1:411:162":{"crate_id":1,"path":["std","thread","local","LocalKey"],"kind":"struct"},"2:51144:7672":{"crate_id":2,"path":["core","str","pattern","CharArrayRefSearcher"],"kind":"struct"},"2:11527:7639":{"crate_id":2,"path":["core","str","pattern","Searcher"],"kind":"trait"},"6:7236:12267":{"crate_id":6,"path":["libc","unix","linux_like","linux","fanotify_event_metadata"],"kind":"struct"},"6:7008:13558":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","align","sem_t"],"kind":"struct"},"1:2383:2096":{"crate_id":1,"path":["std","fs","metadata"],"kind":"function"},"5:6600:241":{"crate_id":5,"path":["alloc","vec","Vec"],"kind":"struct"},"17:12514:18405":{"crate_id":17,"path":["object","pe","ImageOs2Header"],"kind":"struct"},"16:4385:14644":{"crate_id":16,"path":["gimli","constants","DwAccess"],"kind":"struct"},"17:9401:15221":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbol"],"kind":"struct"},"2:4351:7751":{"crate_id":2,"path":["core","cell","RefMut"],"kind":"struct"},"1:1826:2044":{"crate_id":1,"path":["std","env","Vars"],"kind":"struct"},"6:541:8809":{"crate_id":6,"path":["libc","unix","iovec"],"kind":"struct"},"2:47335:7779":{"crate_id":2,"path":["core","char","decode","DecodeUtf16Error"],"kind":"struct"},"1:1002:1996":{"crate_id":1,"path":["std","collections","hash","map","RawEntryBuilder"],"kind":"struct"},"12:1836:1984":{"crate_id":12,"path":["hashbrown","set","IntoIter"],"kind":"struct"},"18:515:19213":{"crate_id":18,"path":["memchr","memmem","prefilter","PrefilterFn"],"kind":"struct"},"16:6735:15048":{"crate_id":16,"path":["gimli","read","loclists","RawLocListIter"],"kind":"struct"},"2:47538:2084":{"crate_id":2,"path":["core","ffi","VaList"],"kind":"struct"},"1:1637:2006":{"crate_id":1,"path":["std","collections","hash","set","Union"],"kind":"struct"},"17:12739:18469":{"crate_id":17,"path":["object","pe","ImageNtHeaders32"],"kind":"struct"},"2:54656:7533":{"crate_id":2,"path":["core","core_arch","x86","__m256d"],"kind":"struct"},"16:7117:32762":{"crate_id":16,"path":["gimli","read","op","EvaluationState"],"kind":"enum"},"6:4716:12131":{"crate_id":6,"path":["libc","unix","linux_like","linux","dirent"],"kind":"struct"},"16:4635:14726":{"crate_id":16,"path":["gimli","constants","DwInl"],"kind":"struct"},"16:6146:15022":{"crate_id":16,"path":["gimli","read","abbrev","Abbreviation"],"kind":"struct"},"1:10691:19910":{"crate_id":1,"path":["std","sys","unix","kernel_copy","SpliceMode"],"kind":"enum"},"1:5736:2352":{"crate_id":1,"path":["std","sync","condvar","Condvar"],"kind":"struct"},"6:5514:12748":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__timeval"],"kind":"struct"},"2:50525:7605":{"crate_id":2,"path":["core","slice","iter","ArrayWindows"],"kind":"struct"},"5:2375:29889":{"crate_id":5,"path":["alloc","collections","btree","node","NodeRef"],"kind":"struct"},"6:1524:9712":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreq_source"],"kind":"struct"},"2:2865:8018":{"crate_id":2,"path":["core","ops","bit","ShrAssign"],"kind":"trait"},"16:4574:14713":{"crate_id":16,"path":["gimli","constants","DwId"],"kind":"struct"},"9:709:2305":{"crate_id":9,"path":["miniz_oxide","inflate","core","State"],"kind":"enum"},"2:57577:243":{"crate_id":2,"path":["core","core_simd","fmt","fmt","Wrapper"],"kind":"struct"},"18:507:33455":{"crate_id":18,"path":["memchr","memmem","genericsimd","Forward"],"kind":"struct"},"17:11300:15798":{"crate_id":17,"path":["object","elf","Verneed"],"kind":"struct"},"2:2821:8008":{"crate_id":2,"path":["core","ops","bit","BitAnd"],"kind":"trait"},"1:8490:2310":{"crate_id":1,"path":["std","path","Ancestors"],"kind":"struct"},"5:3086:1982":{"crate_id":5,"path":["alloc","collections","btree","set","Iter"],"kind":"struct"},"1:5573:203":{"crate_id":1,"path":["std","sync","mpsc","Receiver"],"kind":"struct"},"17:10088:15304":{"crate_id":17,"path":["object","read","macho","segment","MachOSegmentInternal"],"kind":"struct"},"1:6148:20877":{"crate_id":1,"path":["std","sync","mpmc","zero","ZeroToken"],"kind":"struct"},"5:6350:30979":{"crate_id":5,"path":["alloc","vec","into_iter","drop","DropGuard"],"kind":"struct"},"7:79:13769":{"crate_id":7,"path":["unwind","libunwind","_Unwind_Action"],"kind":"enum"},"2:47656:27377":{"crate_id":2,"path":["core","iter","adapters","flatten","FlattenCompat"],"kind":"struct"},"5:36:2040":{"crate_id":5,"path":["alloc","raw_vec","RawVec"],"kind":"struct"},"6:573:8814":{"crate_id":6,"path":["libc","unix","itimerval"],"kind":"struct"},"18:538:19215":{"crate_id":18,"path":["memchr","memmem","rabinkarp","NeedleHash"],"kind":"struct"},"16:5494:14998":{"crate_id":16,"path":["gimli","read","cfi","CieOffsetEncoding"],"kind":"enum"},"17:12349:18341":{"crate_id":17,"path":["object","macho","RelocationInfo"],"kind":"struct"},"17:11515:17993":{"crate_id":17,"path":["object","macho","DyldSubCacheInfo"],"kind":"struct"},"2:7082:133":{"crate_id":2,"path":["core","iter","traits","collect","FromIterator"],"kind":"trait"},"17:9108:15180":{"crate_id":17,"path":["object","read","any","SymbolIterator"],"kind":"struct"},"1:11848:1459":{"crate_id":1,"path":["std","u64"],"kind":"primitive"},"17:13184:19038":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation64"],"kind":"struct"},"16:7357:15067":{"crate_id":16,"path":["gimli","read","rnglists","RangeLists"],"kind":"struct"},"6:4241:12080":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_event"],"kind":"struct"},"17:9627:15248":{"crate_id":17,"path":["object","read","elf","relocation","RelocationSections"],"kind":"struct"},"2:47074:15092":{"crate_id":2,"path":["core","any","tags","Value"],"kind":"struct"},"17:11606:18101":{"crate_id":17,"path":["object","macho","LcStr"],"kind":"struct"},"2:2852:8015":{"crate_id":2,"path":["core","ops","bit","BitOrAssign"],"kind":"trait"},"2:7123:120":{"crate_id":2,"path":["core","iter","traits","double_ended","DoubleEndedIterator"],"kind":"trait"},"17:10332:15387":{"crate_id":17,"path":["object","read","pe","export","ExportTarget"],"kind":"enum"},"2:51431:8174":{"crate_id":2,"path":["core","str","IsAsciiWhitespace"],"kind":"struct"},"5:781:96":{"crate_id":5,"path":["alloc","collections","binary_heap","BinaryHeap"],"kind":"struct"},"17:8596:15170":{"crate_id":17,"path":["object","endian","U64Bytes"],"kind":"struct"},"17:13100:19005":{"crate_id":17,"path":["object","pe","ImageDelayloadDescriptor"],"kind":"struct"},"17:11761:18173":{"crate_id":17,"path":["object","macho","SubFrameworkCommand"],"kind":"struct"},"5:4103:1982":{"crate_id":5,"path":["alloc","collections","vec_deque","iter","Iter"],"kind":"struct"},"17:11485:17991":{"crate_id":17,"path":["object","macho","DyldCacheMappingInfo"],"kind":"struct"},"16:2631:14086":{"crate_id":16,"path":["gimli","common","RawRangeListsOffset"],"kind":"struct"},"17:8368:15166":{"crate_id":17,"path":["object","common","FileFlags"],"kind":"enum"},"6:1720:9731":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_storage"],"kind":"struct"},"16:2993:14099":{"crate_id":16,"path":["gimli","common","DwoId"],"kind":"struct"},"17:9644:15234":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdat"],"kind":"struct"},"2:2990:2035":{"crate_id":2,"path":["core","ops","index","Index"],"kind":"trait"},"1:931:1986":{"crate_id":1,"path":["std","collections","hash","map","Values"],"kind":"struct"},"2:51674:158":{"crate_id":2,"path":["core","alloc","layout","Layout"],"kind":"struct"},"1:4012:2215":{"crate_id":1,"path":["std","os","unix","fs","DirBuilderExt"],"kind":"trait"},"16:7343:15066":{"crate_id":16,"path":["gimli","read","rnglists","DebugRngLists"],"kind":"struct"},"5:4297:30978":{"crate_id":5,"path":["alloc","collections","vec_deque","truncate","Dropper"],"kind":"struct"},"2:9019:7578":{"crate_id":2,"path":["core","fmt","UpperExp"],"kind":"trait"},"17:8701:15173":{"crate_id":17,"path":["object","endian","I64Bytes"],"kind":"struct"},"6:5544:12751":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","cmsghdr"],"kind":"struct"},"5:1091:31008":{"crate_id":5,"path":["alloc","collections","btree","dedup_sorted_iter","DedupSortedIter"],"kind":"struct"},"16:5163:14990":{"crate_id":16,"path":["gimli","constants","DwEhPe"],"kind":"struct"},"1:8171:2187":{"crate_id":1,"path":["std","net","tcp","IntoIncoming"],"kind":"struct"},"17:12816:18518":{"crate_id":17,"path":["object","pe","ImageSectionHeader"],"kind":"struct"},"17:12797:18516":{"crate_id":17,"path":["object","pe","AnonObjectHeaderBigobj"],"kind":"struct"},"1:7823:129":{"crate_id":1,"path":["std","fs","FileType"],"kind":"struct"},"12:387:32280":{"crate_id":12,"path":["hashbrown","raw","RawIterHash"],"kind":"struct"},"2:47770:7973":{"crate_id":2,"path":["core","iter","adapters","skip_while","SkipWhile"],"kind":"struct"},"17:11247:15678":{"crate_id":17,"path":["object","elf","Dyn64"],"kind":"struct"},"5:6088:30962":{"crate_id":5,"path":["alloc","vec","drain_filter","drop","BackshiftOnDrop"],"kind":"struct"},"1:11355:2189":{"crate_id":1,"path":["std","sys_common","net","TcpListener"],"kind":"struct"},"2:2681:223":{"crate_id":2,"path":["core","marker","StructuralPartialEq"],"kind":"trait"},"17:13327:19050":{"crate_id":17,"path":["object","pe","ImageHotPatchInfo"],"kind":"struct"},"6:1556:9716":{"crate_id":6,"path":["libc","unix","linux_like","addrinfo"],"kind":"struct"},"6:5759:32000":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","sifields_sigchld"],"kind":"struct"},"16:2749:14091":{"crate_id":16,"path":["gimli","common","DebugStrOffsetsBase"],"kind":"struct"},"1:11217:24990":{"crate_id":1,"path":["std","sys_common","wtf8","EncodeWide"],"kind":"struct"},"16:2579:14084":{"crate_id":16,"path":["gimli","common","DebugMacinfoOffset"],"kind":"struct"},"17:12896:18628":{"crate_id":17,"path":["object","pe","ImageAuxSymbolFunction"],"kind":"struct"},"5:3623:2022":{"crate_id":5,"path":["alloc","collections","linked_list","CursorMut"],"kind":"struct"},"17:8666:15172":{"crate_id":17,"path":["object","endian","I32Bytes"],"kind":"struct"},"1:2907:207":{"crate_id":1,"path":["std","io","error","Result"],"kind":"typedef"},"2:1821:2025":{"crate_id":2,"path":["core","ptr","non_null","NonNull"],"kind":"struct"},"1:10681:2111":{"crate_id":1,"path":["std","sys","unix","io","IoSlice"],"kind":"struct"},"1:8970:20873":{"crate_id":1,"path":["std","sync","mpmc","select","Token"],"kind":"struct"},"17:13141:19012":{"crate_id":17,"path":["object","pe","ImageResourceDirStringU"],"kind":"struct"},"2:48929:1984":{"crate_id":2,"path":["core","result","IntoIter"],"kind":"struct"},"5:1228:1999":{"crate_id":5,"path":["alloc","collections","btree","map","entry","VacantEntry"],"kind":"struct"},"2:47731:7970":{"crate_id":2,"path":["core","iter","adapters","rev","Rev"],"kind":"struct"},"2:20422:27529":{"crate_id":2,"path":["core","core_simd","swizzle","rotate_lanes_right","Rotate"],"kind":"struct"},"17:247:33425":{"crate_id":17,"path":["object","read","util","DebugLen"],"kind":"struct"},"17:13572:19137":{"crate_id":17,"path":["object","pe","ImageArchitectureEntry"],"kind":"struct"},"2:21797:2197":{"crate_id":2,"path":["core","num","error","ParseIntError"],"kind":"struct"},"1:2250:2088":{"crate_id":1,"path":["std","fs","DirEntry"],"kind":"struct"},"1:11833:1334":{"crate_id":1,"path":["std","slice"],"kind":"primitive"},"17:13279:19049":{"crate_id":17,"path":["object","pe","ImageLoadConfigDirectory64"],"kind":"struct"},"17:11070:15576":{"crate_id":17,"path":["object","elf","CompressionHeader64"],"kind":"struct"},"2:50261:7606":{"crate_id":2,"path":["core","slice","ascii","EscapeAscii"],"kind":"struct"},"18:736:19207":{"crate_id":18,"path":["memchr","memmem","SearcherKind"],"kind":"enum"},"16:7637:15080":{"crate_id":16,"path":["gimli","read","unit","DebuggingInformationEntry"],"kind":"struct"},"1:4595:23345":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt","st_ctime"],"kind":"foreign_type"},"1:10387:2163":{"crate_id":1,"path":["std","sys","unix","stdio","Stdout"],"kind":"struct"},"2:52757:2486":{"crate_id":2,"path":["core","core_arch","simd","u32x4"],"kind":"struct"},"16:6070:15018":{"crate_id":16,"path":["gimli","read","endian_slice","EndianSlice"],"kind":"struct"},"7:32:13762":{"crate_id":7,"path":["unwind","libunwind","_Unwind_Reason_Code"],"kind":"enum"},"1:8392:2305":{"crate_id":1,"path":["std","path","State"],"kind":"enum"},"6:4257:12082":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_absinfo"],"kind":"struct"},"5:1387:1984":{"crate_id":5,"path":["alloc","collections","btree","map","IntoIter"],"kind":"struct"},"1:6772:2414":{"crate_id":1,"path":["std","std_float","StdFloat"],"kind":"trait"},"1:3934:2207":{"crate_id":1,"path":["std","os","unix","fs","FileExt"],"kind":"trait"},"1:5267:119":{"crate_id":1,"path":["std","path","Display"],"kind":"struct"},"1:8741:183":{"crate_id":1,"path":["std","process","Output"],"kind":"struct"},"5:6962:1984":{"crate_id":5,"path":["alloc","collections","btree","set","IntoIter"],"kind":"struct"},"2:48040:7946":{"crate_id":2,"path":["core","iter","sources","repeat_n","RepeatN"],"kind":"struct"},"17:12103:18197":{"crate_id":17,"path":["object","macho","EncryptionInfoCommand32"],"kind":"struct"},"1:7848:20887":{"crate_id":1,"path":["std","io","buffered","linewritershim","LineWriterShim"],"kind":"struct"},"2:57590:243":{"crate_id":2,"path":["core","core_simd","fmt","fmt","Wrapper"],"kind":"struct"},"2:57525:243":{"crate_id":2,"path":["core","core_simd","fmt","fmt","Wrapper"],"kind":"struct"},"16:7511:15075":{"crate_id":16,"path":["gimli","read","UnitOffset"],"kind":"struct"},"6:4814:12140":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_txtime"],"kind":"struct"},"16:2341:14074":{"crate_id":16,"path":["gimli","common","DebugAbbrevOffset"],"kind":"struct"},"2:54507:2471":{"crate_id":2,"path":["core","core_arch","simd","i64x8"],"kind":"struct"},"6:4506:12106":{"crate_id":6,"path":["libc","unix","linux_like","linux","mntent"],"kind":"struct"},"1:11199:19611":{"crate_id":1,"path":["std","sys_common","wtf8","Wtf8"],"kind":"struct"},"2:48575:2181":{"crate_id":2,"path":["core","net","ip_addr","Ipv6Addr"],"kind":"struct"},"18:636:33447":{"crate_id":18,"path":["memchr","memmem","twoway","ApproximateByteSet"],"kind":"struct"},"17:11259:15787":{"crate_id":17,"path":["object","elf","Versym"],"kind":"struct"},"16:7388:15068":{"crate_id":16,"path":["gimli","read","rnglists","RawRngListIter"],"kind":"struct"},"17:10642:15188":{"crate_id":17,"path":["object","read","SymbolSection"],"kind":"enum"},"17:13492:19122":{"crate_id":17,"path":["object","pe","ImageCoffSymbolsHeader"],"kind":"struct"},"16:2465:14079":{"crate_id":16,"path":["gimli","common","DebugLineOffset"],"kind":"struct"},"17:12609:18407":{"crate_id":17,"path":["object","pe","MaskedRichHeaderEntry"],"kind":"struct"},"2:47495:1606":{"crate_id":2,"path":["core","ffi","c_char"],"kind":"typedef"},"2:47401:7772":{"crate_id":2,"path":["core","char","ToLowercase"],"kind":"struct"},"2:3375:7716":{"crate_id":2,"path":["core","any","Provider"],"kind":"trait"},"17:12148:18200":{"crate_id":17,"path":["object","macho","BuildVersionCommand"],"kind":"struct"},"6:1586:9719":{"crate_id":6,"path":["libc","unix","linux_like","tm"],"kind":"struct"},"2:51127:7671":{"crate_id":2,"path":["core","str","pattern","CharArraySearcher"],"kind":"struct"},"6:4778:12137":{"crate_id":6,"path":["libc","unix","linux_like","linux","mq_attr"],"kind":"struct"},"9:977:13794":{"crate_id":9,"path":["miniz_oxide","StreamResult"],"kind":"struct"},"1:5199:187":{"crate_id":1,"path":["std","path","Path"],"kind":"struct"},"16:6241:15028":{"crate_id":16,"path":["gimli","read","aranges","ArangeEntryIter"],"kind":"struct"},"5:3902:30979":{"crate_id":5,"path":["alloc","collections","vec_deque","drain","drop","DropGuard"],"kind":"struct"},"6:1707:9730":{"crate_id":6,"path":["libc","unix","linux_like","epoll_event"],"kind":"struct"},"17:9362:15179":{"crate_id":17,"path":["object","read","coff","symbol","SymbolTable"],"kind":"struct"},"5:3057:95":{"crate_id":5,"path":["alloc","collections","btree","set","BTreeSet"],"kind":"struct"},"1:7864:2021":{"crate_id":1,"path":["std","io","cursor","Cursor"],"kind":"struct"},"2:12373:139":{"crate_id":2,"path":["core","alloc","global","GlobalAlloc"],"kind":"trait"},"6:4544:12110":{"crate_id":6,"path":["libc","unix","linux_like","linux","in6_pktinfo"],"kind":"struct"},"2:21382:2222":{"crate_id":2,"path":["core","core_simd","vector","sealed","Sealed"],"kind":"trait"},"6:4471:12104":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Shdr"],"kind":"struct"},"2:53587:2467":{"crate_id":2,"path":["core","core_arch","simd","i32x8"],"kind":"struct"},"2:54667:7534":{"crate_id":2,"path":["core","core_arch","x86","__m512i"],"kind":"struct"},"17:11721:18170":{"crate_id":17,"path":["object","macho","FvmlibCommand"],"kind":"struct"},"5:1257:2000":{"crate_id":5,"path":["alloc","collections","btree","map","entry","OccupiedError"],"kind":"struct"},"5:3501:1983":{"crate_id":5,"path":["alloc","collections","linked_list","IterMut"],"kind":"struct"},"2:2671:217":{"crate_id":2,"path":["core","marker","Send"],"kind":"trait"},"16:2683:14088":{"crate_id":16,"path":["gimli","common","DebugRngListsBase"],"kind":"struct"},"5:2880:29924":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Mut"],"kind":"struct"},"12:853:1995":{"crate_id":12,"path":["hashbrown","map","RawVacantEntryMut"],"kind":"struct"},"16:7970:15090":{"crate_id":16,"path":["gimli","read","unit","DebugTypesUnitHeadersIter"],"kind":"struct"},"17:12361:18344":{"crate_id":17,"path":["object","macho","ScatteredRelocationInfo"],"kind":"struct"},"6:4485:12105":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Shdr"],"kind":"struct"},"1:10661:129":{"crate_id":1,"path":["std","sys","unix","fs","FileType"],"kind":"struct"},"12:1555:13995":{"crate_id":12,"path":["hashbrown","rustc_entry","RustcVacantEntry"],"kind":"struct"},"1:11810:19598":{"crate_id":1,"path":["std","backtrace_rs","print","PrintFmt"],"kind":"enum"},"17:9909:15299":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandIterator"],"kind":"struct"},"18:766:19209":{"crate_id":18,"path":["memchr","memmem","SearcherRevKind"],"kind":"enum"},"2:47780:7958":{"crate_id":2,"path":["core","iter","adapters","step_by","StepBy"],"kind":"struct"},"17:12134:18199":{"crate_id":17,"path":["object","macho","VersionMinCommand"],"kind":"struct"},"16:7603:15079":{"crate_id":16,"path":["gimli","read","unit","UnitHeader"],"kind":"struct"},"17:10997:15402":{"crate_id":17,"path":["object","elf","Ident"],"kind":"struct"},"2:29746:2195":{"crate_id":2,"path":["core","num","FpCategory"],"kind":"enum"},"2:9017:7577":{"crate_id":2,"path":["core","fmt","LowerExp"],"kind":"trait"},"1:7810:2091":{"crate_id":1,"path":["std","fs","Permissions"],"kind":"struct"},"1:7587:1924":{"crate_id":1,"path":["std","thread","Builder"],"kind":"struct"},"16:6781:15050":{"crate_id":16,"path":["gimli","read","loclists","LocListIter"],"kind":"struct"},"2:51415:8170":{"crate_id":2,"path":["core","str","CharEscapeDebugContinue"],"kind":"struct"},"18:644:33455":{"crate_id":18,"path":["memchr","memmem","x86","avx","nostd","Forward"],"kind":"struct"},"2:46787:7736":{"crate_id":2,"path":["core","ops","control_flow","ControlFlow"],"kind":"enum"},"1:10429:1936":{"crate_id":1,"path":["std","sys","unix","thread","Thread"],"kind":"struct"},"16:5614:32478":{"crate_id":16,"path":["gimli","read","cfi","AugmentationData"],"kind":"struct"},"17:13527:19130":{"crate_id":17,"path":["object","pe","ImageFunctionEntry64"],"kind":"struct"},"2:21710:26910":{"crate_id":2,"path":["core","num","flt2dec","decoder","FullDecoded"],"kind":"enum"},"1:8146:2139":{"crate_id":1,"path":["std","io","Bytes"],"kind":"struct"},"17:13047:19000":{"crate_id":17,"path":["object","pe","ImageTlsDirectory64"],"kind":"struct"},"5:1376:1983":{"crate_id":5,"path":["alloc","collections","btree","map","IterMut"],"kind":"struct"},"2:2685:225":{"crate_id":2,"path":["core","marker","Sync"],"kind":"trait"},"1:5010:20884":{"crate_id":1,"path":["std","path","fmt","DebugHelper"],"kind":"struct"},"16:6345:15035":{"crate_id":16,"path":["gimli","read","line","DebugLine"],"kind":"struct"},"2:6803:2168":{"crate_id":2,"path":["core","iter","sources","empty","Empty"],"kind":"struct"},"1:8220:2244":{"crate_id":1,"path":["std","os","unix","net","ancillary","SocketCred"],"kind":"struct"},"17:9844:15298":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCacheImage"],"kind":"struct"},"2:20757:2423":{"crate_id":2,"path":["core","core_simd","masks","mask_impl","Mask"],"kind":"struct"},"1:918:1985":{"crate_id":1,"path":["std","collections","hash","map","Keys"],"kind":"struct"},"2:54259:2484":{"crate_id":2,"path":["core","core_arch","simd","u16x32"],"kind":"struct"},"2:47095:7726":{"crate_id":2,"path":["core","array","TryFromSliceError"],"kind":"struct"},"6:4327:12091":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_periodic_effect"],"kind":"struct"},"1:9064:2374":{"crate_id":1,"path":["std","time","Instant"],"kind":"struct"},"1:5353:2321":{"crate_id":1,"path":["std","process","ChildStdin"],"kind":"struct"},"17:10608:15186":{"crate_id":17,"path":["object","read","SectionIndex"],"kind":"struct"},"1:9849:19811":{"crate_id":1,"path":["std","sys","unix","net","Socket"],"kind":"struct"},"17:1962:15260":{"crate_id":17,"path":["object","read","elf","relocation","ElfSectionRelocationIterator"],"kind":"struct"},"5:3699:30979":{"crate_id":5,"path":["alloc","collections","linked_list","drop","DropGuard"],"kind":"struct"},"1:4593:23343":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt","st_mtime"],"kind":"foreign_type"},"1:1811:598":{"crate_id":1,"path":["std","env"],"kind":"module"},"2:21747:26869":{"crate_id":2,"path":["core","num","fmt","Part"],"kind":"enum"},"1:960:1989":{"crate_id":1,"path":["std","collections","hash","map","ValuesMut"],"kind":"struct"},"1:3475:19748":{"crate_id":1,"path":["std","io","Write","write_fmt","Adapter"],"kind":"struct"},"6:1894:9870":{"crate_id":6,"path":["libc","unix","linux_like","linux","fpos64_t"],"kind":"enum"},"2:51076:7664":{"crate_id":2,"path":["core","str","pattern","SearchStep"],"kind":"enum"},"16:7847:15083":{"crate_id":16,"path":["gimli","read","unit","AttrsIter"],"kind":"struct"},"2:21528:27169":{"crate_id":2,"path":["core","num","bignum","tests","Big8x3"],"kind":"struct"},"5:3119:2005":{"crate_id":5,"path":["alloc","collections","btree","set","SymmetricDifference"],"kind":"struct"},"1:10917:23579":{"crate_id":1,"path":["std","sys","unix","process","process_inner","posix_spawn","PosixSpawnattr"],"kind":"struct"},"17:11500:17992":{"crate_id":17,"path":["object","macho","DyldCacheImageInfo"],"kind":"struct"},"16:2509:14081":{"crate_id":16,"path":["gimli","common","LocationListsOffset"],"kind":"struct"},"1:11482:14027":{"crate_id":1,"path":["std","backtrace_rs","backtrace","libunwind","Frame"],"kind":"enum"},"2:51324:7663":{"crate_id":2,"path":["core","str","lossy","Utf8Chunks"],"kind":"struct"},"17:8110:15139":{"crate_id":17,"path":["object","common","AddressSize"],"kind":"enum"},"1:8080:2168":{"crate_id":1,"path":["std","io","util","Empty"],"kind":"struct"},"1:1967:2077":{"crate_id":1,"path":["std","error","Indented"],"kind":"struct"},"18:80:19185":{"crate_id":18,"path":["memchr","memchr","iter","Memchr"],"kind":"struct"},"2:48786:1982":{"crate_id":2,"path":["core","option","Iter"],"kind":"struct"},"5:1366:1982":{"crate_id":5,"path":["alloc","collections","btree","map","Iter"],"kind":"struct"},"2:47347:7653":{"crate_id":2,"path":["core","char","EscapeUnicode"],"kind":"struct"},"16:6359:15036":{"crate_id":16,"path":["gimli","read","line","LineRows"],"kind":"struct"},"17:10708:15191":{"crate_id":17,"path":["object","read","ObjectMap"],"kind":"struct"},"6:6279:8852":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","sigaction"],"kind":"struct"},"2:47434:7775":{"crate_id":2,"path":["core","char","TryFromCharError"],"kind":"struct"},"12:738:1986":{"crate_id":12,"path":["hashbrown","map","Values"],"kind":"struct"},"2:46928:196":{"crate_id":2,"path":["core","ops","range","RangeFrom"],"kind":"struct"},"16:6161:15023":{"crate_id":16,"path":["gimli","read","abbrev","Attributes"],"kind":"enum"},"6:5694:12760":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","Elf64_Chdr"],"kind":"struct"},"1:887:1982":{"crate_id":1,"path":["std","collections","hash","map","Iter"],"kind":"struct"},"17:12073:18195":{"crate_id":17,"path":["object","macho","LinkeditDataCommand"],"kind":"struct"},"2:50900:7658":{"crate_id":2,"path":["core","str","iter","Matches"],"kind":"struct"},"16:2771:14092":{"crate_id":16,"path":["gimli","common","DebugStrOffsetsIndex"],"kind":"struct"},"2:47295:26859":{"crate_id":2,"path":["core","char","convert","CharErrorKind"],"kind":"enum"},"17:9738:15265":{"crate_id":17,"path":["object","read","elf","version","VersionTable"],"kind":"struct"},"2:51610:208":{"crate_id":2,"path":["core","future","ResumeTy"],"kind":"struct"},"17:9631:15235":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdatIterator"],"kind":"struct"},"16:2605:14085":{"crate_id":16,"path":["gimli","common","DebugMacroOffset"],"kind":"struct"},"2:47448:101":{"crate_id":2,"path":["core","ffi","c_str","CStr"],"kind":"struct"},"17:10625:15187":{"crate_id":17,"path":["object","read","SymbolIndex"],"kind":"struct"},"17:8510:14037":{"crate_id":17,"path":["object","endian","BigEndian"],"kind":"struct"},"2:57603:243":{"crate_id":2,"path":["core","core_simd","fmt","fmt","Wrapper"],"kind":"struct"},"3:0:433":{"crate_id":3,"path":["compiler_builtins"],"kind":"module"},"6:4591:12116":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_extended_err"],"kind":"struct"},"2:12316:2499":{"crate_id":2,"path":["core","task","wake","Waker"],"kind":"struct"},"2:49077:88":{"crate_id":2,"path":["core","sync","atomic","AtomicU16"],"kind":"struct"},"17:12748:18470":{"crate_id":17,"path":["object","pe","ImageRomHeaders"],"kind":"struct"},"2:49229:90":{"crate_id":2,"path":["core","sync","atomic","AtomicU64"],"kind":"struct"},"6:6519:13183":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ipc_perm"],"kind":"struct"},"17:11708:18169":{"crate_id":17,"path":["object","macho","Fvmlib"],"kind":"struct"},"2:9005:119":{"crate_id":2,"path":["core","fmt","Display"],"kind":"trait"},"5:784:2007":{"crate_id":5,"path":["alloc","collections","binary_heap","PeekMut"],"kind":"struct"},"17:11217:15626":{"crate_id":17,"path":["object","elf","ProgramHeader64"],"kind":"struct"},"17:9165:33422":{"crate_id":17,"path":["object","read","any","DynamicRelocationIteratorInternal"],"kind":"enum"},"1:11794:25174":{"crate_id":1,"path":["std","backtrace_rs","symbolize","gimli","Cache"],"kind":"struct"},"16:153:14048":{"crate_id":16,"path":["gimli","read","util","ArrayVec"],"kind":"struct"},"1:5925:2365":{"crate_id":1,"path":["std","sync","mpmc","counter","Sender"],"kind":"struct"},"12:393:32282":{"crate_id":12,"path":["hashbrown","raw","RawIterHashInner"],"kind":"struct"},"6:7253:12269":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_mutex_t"],"kind":"struct"},"17:8241:15162":{"crate_id":17,"path":["object","common","SymbolKind"],"kind":"enum"},"2:48535:152":{"crate_id":2,"path":["core","net","ip_addr","IpAddr"],"kind":"enum"},"17:487:15157":{"crate_id":17,"path":["object","read","any","Comdat"],"kind":"struct"},"17:10476:15392":{"crate_id":17,"path":["object","read","pe","resource","ResourceDirectoryEntryData"],"kind":"enum"},"6:5730:12764":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_entry"],"kind":"struct"},"1:8811:2367":{"crate_id":1,"path":["std","sync","mpsc","SendError"],"kind":"struct"},"2:50010:27429":{"crate_id":2,"path":["core","hash","sip","SipHasher24"],"kind":"struct"},"16:5219:14037":{"crate_id":16,"path":["gimli","endianity","BigEndian"],"kind":"struct"},"6:0:802":{"crate_id":6,"path":["libc"],"kind":"module"},"2:2920:2017":{"crate_id":2,"path":["core","ops","deref","DerefMut"],"kind":"trait"},"5:1463:2020":{"crate_id":5,"path":["alloc","collections","btree","map","RangeMut"],"kind":"struct"},"2:54545:2491":{"crate_id":2,"path":["core","core_arch","simd","u64x8"],"kind":"struct"},"17:10682:15190":{"crate_id":17,"path":["object","read","SymbolMapName"],"kind":"struct"},"5:6483:7710":{"crate_id":5,"path":["alloc","vec","set_len_on_drop","SetLenOnDrop"],"kind":"struct"},"17:13436:19095":{"crate_id":17,"path":["object","pe","ImageEnclaveConfig64"],"kind":"struct"},"2:2860:8017":{"crate_id":2,"path":["core","ops","bit","ShlAssign"],"kind":"trait"},"17:9658:15288":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdatSectionIterator"],"kind":"struct"},"2:3987:27930":{"crate_id":2,"path":["core","asserting","TryCaptureWithDebug"],"kind":"struct"},"6:6339:2277":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stat"],"kind":"struct"},"17:13071:19002":{"crate_id":17,"path":["object","pe","ImageImportDescriptor"],"kind":"struct"},"5:679:228":{"crate_id":5,"path":["alloc","borrow","ToOwned"],"kind":"trait"},"2:20667:2222":{"crate_id":2,"path":["core","core_simd","elements","sealed","Sealed"],"kind":"trait"},"6:5482:12745":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","statx_timestamp"],"kind":"struct"},"2:50988:7642":{"crate_id":2,"path":["core","str","iter","EncodeUtf16"],"kind":"struct"},"6:6963:8762":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","not_x32","statvfs"],"kind":"struct"},"16:3457:14105":{"crate_id":16,"path":["gimli","arch","X86_64"],"kind":"struct"},"6:488:8803":{"crate_id":6,"path":["libc","unix","timeval"],"kind":"struct"},"2:4225:7743":{"crate_id":2,"path":["core","cell","BorrowMutError"],"kind":"struct"},"2:46873:8019":{"crate_id":2,"path":["core","ops","index_range","IndexRange"],"kind":"struct"},"1:8159:2142":{"crate_id":1,"path":["std","io","Lines"],"kind":"struct"},"2:51443:8177":{"crate_id":2,"path":["core","str","UnsafeBytesToStr"],"kind":"struct"},"16:3263:14103":{"crate_id":16,"path":["gimli","arch","RiscV"],"kind":"struct"},"2:48009:27458":{"crate_id":2,"path":["core","iter","sources","from_generator","FromGenerator"],"kind":"struct"},"2:4220:7742":{"crate_id":2,"path":["core","cell","BorrowError"],"kind":"struct"},"2:4561:7764":{"crate_id":2,"path":["core","char","REPLACEMENT_CHARACTER"],"kind":"constant"},"1:5580:2365":{"crate_id":1,"path":["std","sync","mpsc","Sender"],"kind":"struct"},"5:1454:195":{"crate_id":5,"path":["alloc","collections","btree","map","Range"],"kind":"struct"},"2:47670:7966":{"crate_id":2,"path":["core","iter","adapters","fuse","Fuse"],"kind":"struct"},"6:6582:13188":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ucontext_t"],"kind":"struct"},"16:4849:14772":{"crate_id":16,"path":["gimli","constants","DwLnct"],"kind":"struct"},"6:4654:12124":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlmsghdr"],"kind":"struct"},"2:51499:8191":{"crate_id":2,"path":["core","time","TryFromFloatSecsErrorKind"],"kind":"enum"},"2:49479:7579":{"crate_id":2,"path":["core","fmt","num","LowerHex"],"kind":"struct"},"1:10283:2325":{"crate_id":1,"path":["std","sys","unix","process","process_common","CommandArgs"],"kind":"struct"},"1:2871:20374":{"crate_id":1,"path":["std","io","error","repr_bitpacked","Repr"],"kind":"struct"},"2:22124:173":{"crate_id":2,"path":["core","num","nonzero","NonZeroU32"],"kind":"struct"},"2:20628:2428":{"crate_id":2,"path":["core","core_simd","elements","int","SimdInt"],"kind":"trait"},"16:3689:14164":{"crate_id":16,"path":["gimli","constants","DwCfa"],"kind":"struct"},"5:4219:242":{"crate_id":5,"path":["alloc","collections","vec_deque","VecDeque"],"kind":"struct"},"16:6472:14016":{"crate_id":16,"path":["gimli","read","line","LineRow"],"kind":"struct"},"1:4525:2265":{"crate_id":1,"path":["std","os","unix","thread","JoinHandleExt"],"kind":"trait"},"2:50476:7613":{"crate_id":2,"path":["core","slice","iter","Windows"],"kind":"struct"},"6:7176:13717":{"crate_id":6,"path":["libc","unix","linux_like","linux","arch","generic","termios2"],"kind":"struct"},"16:534:32657":{"crate_id":16,"path":["gimli","read","cfi","RegisterRuleMap"],"kind":"struct"},"6:474:8801":{"crate_id":6,"path":["libc","unix","group"],"kind":"struct"},"2:7473:2014":{"crate_id":2,"path":["core","iter","traits","marker","TrustedLen"],"kind":"trait"},"1:5388:2323":{"crate_id":1,"path":["std","process","ChildStderr"],"kind":"struct"},"2:20460:27846":{"crate_id":2,"path":["core","core_simd","swizzle","deinterleave","Even"],"kind":"struct"},"17:9873:15341":{"crate_id":17,"path":["object","read","macho","file","MachOComdatIterator"],"kind":"struct"},"5:7234:1988":{"crate_id":5,"path":["alloc","vec","drain_filter","DrainFilter"],"kind":"struct"},"1:2653:2154":{"crate_id":1,"path":["std","io","buffered","linewriter","LineWriter"],"kind":"struct"},"2:50682:2139":{"crate_id":2,"path":["core","str","iter","Bytes"],"kind":"struct"},"1:11853:13":{"crate_id":1,"path":["std","fn"],"kind":"primitive"},"6:1692:9728":{"crate_id":6,"path":["libc","unix","linux_like","arphdr"],"kind":"struct"},"6:6402:9654":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statvfs64"],"kind":"struct"},"17:12008:18190":{"crate_id":17,"path":["object","macho","TwolevelHintsCommand"],"kind":"struct"},"2:47065:7714":{"crate_id":2,"path":["core","any","TypeId"],"kind":"struct"},"6:4267:12083":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_keymap_entry"],"kind":"struct"},"5:2065:29961":{"crate_id":5,"path":["alloc","collections","btree","merge_iter","MergeIterInner"],"kind":"struct"},"17:10159:15308":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbolTable"],"kind":"struct"},"1:6388:2354":{"crate_id":1,"path":["std","sync","once","OnceState"],"kind":"struct"},"2:21783:2198":{"crate_id":2,"path":["core","num","error","TryFromIntError"],"kind":"struct"},"16:5839:15012":{"crate_id":16,"path":["gimli","read","cfi","RegisterRule"],"kind":"enum"},"2:47311:7776":{"crate_id":2,"path":["core","char","convert","CharTryFromError"],"kind":"struct"},"16:2894:14097":{"crate_id":16,"path":["gimli","common","UnitSectionOffset"],"kind":"enum"},"15:175:14018":{"crate_id":15,"path":["addr2line","LocationRangeIter"],"kind":"struct"},"17:10434:15390":{"crate_id":17,"path":["object","read","pe","relocation","RelocationIterator"],"kind":"struct"},"17:9700:15261":{"crate_id":17,"path":["object","read","elf","hash","GnuHashTable"],"kind":"struct"},"12:1534:13994":{"crate_id":12,"path":["hashbrown","rustc_entry","RustcOccupiedEntry"],"kind":"struct"},"2:48712:2185":{"crate_id":2,"path":["core","net","socket_addr","SocketAddrV6"],"kind":"struct"},"1:4659:2249":{"crate_id":1,"path":["std","os","linux","process","CommandExt"],"kind":"trait"},"2:9223:140":{"crate_id":2,"path":["core","hash","Hash"],"kind":"trait"},"16:5815:15011":{"crate_id":16,"path":["gimli","read","cfi","CfaRule"],"kind":"enum"},"1:10195:20377":{"crate_id":1,"path":["std","sys","unix","process","process_common","Argv"],"kind":"struct"},"16:2825:14094":{"crate_id":16,"path":["gimli","common","DebugTypeSignature"],"kind":"struct"},"2:3975:27917":{"crate_id":2,"path":["core","asserting","TryCaptureWithoutDebug"],"kind":"struct"},"1:1828:2045":{"crate_id":1,"path":["std","env","VarsOs"],"kind":"struct"},"6:4277:12084":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_mask"],"kind":"struct"},"6:4826:12142":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_can"],"kind":"struct"},"1:7800:2090":{"crate_id":1,"path":["std","fs","FileTimes"],"kind":"struct"},"2:47805:7974":{"crate_id":2,"path":["core","iter","adapters","take_while","TakeWhile"],"kind":"struct"},"17:9317:15220":{"crate_id":17,"path":["object","read","coff","section","CoffSegmentIterator"],"kind":"struct"},"2:54621:7530":{"crate_id":2,"path":["core","core_arch","x86","__m128d"],"kind":"struct"},"2:11584:7667":{"crate_id":2,"path":["core","str","pattern","MultiCharEqPattern"],"kind":"struct"},"17:10506:15360":{"crate_id":17,"path":["object","read","pe","rich","RichHeaderInfo"],"kind":"struct"},"6:4290:12086":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_trigger"],"kind":"struct"},"17:10670:15189":{"crate_id":17,"path":["object","read","SymbolMap"],"kind":"struct"},"2:50995:7652":{"crate_id":2,"path":["core","str","iter","EscapeDebug"],"kind":"struct"},"2:2231:98":{"crate_id":2,"path":["core","borrow","BorrowMut"],"kind":"trait"},"2:9394:8142":{"crate_id":2,"path":["core","slice","sort","InsertionHole"],"kind":"struct"},"6:579:8815":{"crate_id":6,"path":["libc","unix","tms"],"kind":"struct"},"5:1071:29910":{"crate_id":5,"path":["alloc","collections","btree","borrow","DormantMutRef"],"kind":"struct"},"1:686:1966":{"crate_id":1,"path":["std","backtrace","BytesOrWide"],"kind":"enum"},"1:8965:20879":{"crate_id":1,"path":["std","sync","mpmc","list","ListToken"],"kind":"struct"},"5:219:7569":{"crate_id":5,"path":["alloc","boxed","thin","ThinBox"],"kind":"struct"},"2:11067:8132":{"crate_id":2,"path":["core","slice","GetManyMutError"],"kind":"struct"},"2:4752:781":{"crate_id":2,"path":["core","iter"],"kind":"module"},"17:10233:15384":{"crate_id":17,"path":["object","read","pe","file","PeComdat"],"kind":"struct"},"2:22322:168":{"crate_id":2,"path":["core","num","nonzero","NonZeroI32"],"kind":"struct"},"6:4136:12071":{"crate_id":6,"path":["libc","unix","linux_like","linux","spwd"],"kind":"struct"},"2:7086:149":{"crate_id":2,"path":["core","iter","traits","collect","IntoIterator"],"kind":"trait"},"2:51004:1959":{"crate_id":2,"path":["core","str","iter","EscapeDefault"],"kind":"struct"},"2:47465:26934":{"crate_id":2,"path":["core","ffi","c_str","FromBytesWithNulErrorKind"],"kind":"enum"},"17:13374:19088":{"crate_id":17,"path":["object","pe","ImageArm64RuntimeFunctionEntry"],"kind":"struct"},"1:11004:8189":{"crate_id":1,"path":["std","sys","unix","time","Nanoseconds"],"kind":"struct"},"14:0:1737":{"crate_id":14,"path":["rustc_demangle"],"kind":"module"},"5:0:283":{"crate_id":5,"path":["alloc"],"kind":"module"},"16:3188:14102":{"crate_id":16,"path":["gimli","arch","AArch64"],"kind":"struct"},"2:57538:243":{"crate_id":2,"path":["core","core_simd","fmt","fmt","Wrapper"],"kind":"struct"},"1:7695:2058":{"crate_id":1,"path":["std","env","JoinPathsError"],"kind":"struct"},"1:6553:2362":{"crate_id":1,"path":["std","sync","remutex","ReentrantMutex"],"kind":"struct"},"2:52579:2465":{"crate_id":2,"path":["core","core_arch","simd","i32x2"],"kind":"struct"},"1:1632:2005":{"crate_id":1,"path":["std","collections","hash","set","SymmetricDifference"],"kind":"struct"},"1:4777:2220":{"crate_id":1,"path":["std","os","fd","owned","AsFd"],"kind":"trait"},"18:481:19211":{"crate_id":18,"path":["memchr","cow","CowBytes"],"kind":"struct"},"2:48913:1982":{"crate_id":2,"path":["core","result","Iter"],"kind":"struct"},"17:12485:18404":{"crate_id":17,"path":["object","pe","ImageDosHeader"],"kind":"struct"},"2:46888:197":{"crate_id":2,"path":["core","ops","range","RangeFull"],"kind":"struct"},"17:13594:19173":{"crate_id":17,"path":["object","pe","ImageCor20Header"],"kind":"struct"},"1:8484:1982":{"crate_id":1,"path":["std","path","Iter"],"kind":"struct"},"17:9805:15338":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCache"],"kind":"struct"},"1:2613:2144":{"crate_id":1,"path":["std","io","buffered","bufwriter","WriterPanicked"],"kind":"struct"},"6:4525:12108":{"crate_id":6,"path":["libc","unix","linux_like","linux","posix_spawnattr_t"],"kind":"struct"},"2:2251:105":{"crate_id":2,"path":["core","clone","Clone"],"kind":"trait"},"1:8805:1984":{"crate_id":1,"path":["std","sync","mpsc","IntoIter"],"kind":"struct"},"2:47481:8099":{"crate_id":2,"path":["core","ffi","c_str","FromBytesUntilNulError"],"kind":"struct"},"1:9953:2056":{"crate_id":1,"path":["std","sys","unix","os","SplitPaths"],"kind":"struct"},"16:5122:14973":{"crate_id":16,"path":["gimli","constants","DwOp"],"kind":"struct"},"1:628:1956":{"crate_id":1,"path":["std","ascii","AsciiExt"],"kind":"trait"},"1:8096:2111":{"crate_id":1,"path":["std","io","IoSlice"],"kind":"struct"},"17:12874:18564":{"crate_id":17,"path":["object","pe","ImageSymbolExBytes"],"kind":"struct"},"2:20679:2418":{"crate_id":2,"path":["core","core_simd","eq","SimdPartialEq"],"kind":"trait"},"2:51653:2497":{"crate_id":2,"path":["core","task","wake","RawWaker"],"kind":"struct"},"1:10639:19609":{"crate_id":1,"path":["std","sys","unix","fs","FilePermissions"],"kind":"struct"},"2:48592:2182":{"crate_id":2,"path":["core","net","ip_addr","Ipv6MulticastScope"],"kind":"enum"},"12:1866:2005":{"crate_id":12,"path":["hashbrown","set","SymmetricDifference"],"kind":"struct"},"2:47325:7778":{"crate_id":2,"path":["core","char","decode","DecodeUtf16"],"kind":"struct"},"2:48621:27498":{"crate_id":2,"path":["core","net","ip_addr","fmt","Span"],"kind":"struct"},"2:52282:27442":{"crate_id":2,"path":["core","core_arch","simd","u8x2"],"kind":"struct"},"1:7793:2089":{"crate_id":1,"path":["std","fs","OpenOptions"],"kind":"struct"},"17:11174:15623":{"crate_id":17,"path":["object","elf","Rel64"],"kind":"struct"},"17:9263:15206":{"crate_id":17,"path":["object","read","archive","ArchiveMemberIterator"],"kind":"struct"},"2:52634:27447":{"crate_id":2,"path":["core","core_arch","simd","f64x1"],"kind":"struct"},"6:4112:12069":{"crate_id":6,"path":["libc","unix","linux_like","linux","glob_t"],"kind":"struct"},"2:9009:7570":{"crate_id":2,"path":["core","fmt","Binary"],"kind":"trait"},"2:30065:26854":{"crate_id":2,"path":["core","ptr","alignment","AlignmentEnum32"],"kind":"enum"},"1:2579:2152":{"crate_id":1,"path":["std","io","buffered","bufwriter","BufWriter"],"kind":"struct"},"2:50654:7651":{"crate_id":2,"path":["core","str","error","ParseBoolError"],"kind":"struct"},"2:50027:144":{"crate_id":2,"path":["core","hash","sip","Hasher"],"kind":"struct"},"17:13382:19089":{"crate_id":17,"path":["object","pe","ImageAlpha64RuntimeFunctionEntry"],"kind":"struct"},"2:51256:7675":{"crate_id":2,"path":["core","str","pattern","StrSearcher"],"kind":"struct"},"6:4189:12074":{"crate_id":6,"path":["libc","unix","linux_like","linux","itimerspec"],"kind":"struct"},"2:2735:1871":{"crate_id":2,"path":["core","marker","Unpin"],"kind":"trait"},"6:4771:12136":{"crate_id":6,"path":["libc","unix","linux_like","linux","af_alg_iv"],"kind":"struct"},"1:10791:2058":{"crate_id":1,"path":["std","sys","unix","os","JoinPathsError"],"kind":"struct"},"1:3352:2169":{"crate_id":1,"path":["std","io","util","Repeat"],"kind":"struct"},"16:6463:15038":{"crate_id":16,"path":["gimli","read","line","LineInstructions"],"kind":"struct"},"17:13459:19098":{"crate_id":17,"path":["object","pe","ImageEnclaveImport"],"kind":"struct"},"2:50846:7656":{"crate_id":2,"path":["core","str","iter","MatchIndices"],"kind":"struct"},"12:1120:13992":{"crate_id":12,"path":["hashbrown","map","VacantEntryRef"],"kind":"struct"},"5:7064:1981":{"crate_id":5,"path":["alloc","collections","TryReserveErrorKind"],"kind":"enum"},"1:3904:2205":{"crate_id":1,"path":["std","os","unix","ffi","os_str","OsStrExt"],"kind":"trait"},"6:4210:12077":{"crate_id":6,"path":["libc","unix","linux_like","linux","cpu_set_t"],"kind":"struct"},"5:836:31001":{"crate_id":5,"path":["alloc","collections","binary_heap","retain","RebuildOnDrop"],"kind":"struct"},"17:3125:15307":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbolIterator"],"kind":"struct"},"2:10680:7619":{"crate_id":2,"path":["core","slice","iter","GroupByMut"],"kind":"struct"},"12:2190:32265":{"crate_id":12,"path":["hashbrown","raw","Fallibility"],"kind":"enum"},"1:10996:19907":{"crate_id":1,"path":["std","sys","unix","thread","cgroups","Cgroup"],"kind":"enum"},"2:12108:7799":{"crate_id":2,"path":["core","future","into_future","IntoFuture"],"kind":"trait"},"1:11849:1456":{"crate_id":1,"path":["std","u128"],"kind":"primitive"},"1:8935:19608":{"crate_id":1,"path":["std","sync","mpmc","error","SendTimeoutError"],"kind":"enum"},"17:10360:15353":{"crate_id":17,"path":["object","read","pe","export","ExportTable"],"kind":"struct"},"1:10597:2276":{"crate_id":1,"path":["std","sys","unix","fd","FileDesc"],"kind":"struct"},"2:10162:7627":{"crate_id":2,"path":["core","slice","iter","RSplitNMut"],"kind":"struct"},"6:4615:12119":{"crate_id":6,"path":["libc","unix","linux_like","linux","can_filter"],"kind":"struct"},"1:0:1356":{"crate_id":1,"path":["std"],"kind":"module"},"1:3702:2190":{"crate_id":1,"path":["std","net","tcp","TcpStream"],"kind":"struct"},"2:47721:7969":{"crate_id":2,"path":["core","iter","adapters","peekable","Peekable"],"kind":"struct"},"2:47378:7771":{"crate_id":2,"path":["core","char","EscapeDefaultState"],"kind":"enum"},"2:54601:7528":{"crate_id":2,"path":["core","core_arch","x86","__m128i"],"kind":"struct"},"17:12164:18201":{"crate_id":17,"path":["object","macho","BuildToolVersion"],"kind":"struct"},"2:2683:108":{"crate_id":2,"path":["core","marker","Copy"],"kind":"trait"},"1:990:1994":{"crate_id":1,"path":["std","collections","hash","map","RawOccupiedEntryMut"],"kind":"struct"},"1:8342:2295":{"crate_id":1,"path":["std","path","Prefix"],"kind":"enum"},"2:1747:27427":{"crate_id":2,"path":["core","ptr","metadata","PtrComponents"],"kind":"struct"},"2:48016:1969":{"crate_id":2,"path":["core","iter","sources","once","Once"],"kind":"struct"},"17:11813:18177":{"crate_id":17,"path":["object","macho","PreboundDylibCommand"],"kind":"struct"},"2:4705:1605":{"crate_id":2,"path":["core","ffi","c_void"],"kind":"enum"},"2:57564:243":{"crate_id":2,"path":["core","core_simd","fmt","fmt","Wrapper"],"kind":"struct"},"17:9118:33423":{"crate_id":17,"path":["object","read","any","SymbolIteratorInternal"],"kind":"enum"},"2:49705:67":{"crate_id":2,"path":["core","fmt","Alignment"],"kind":"enum"},"18:521:19210":{"crate_id":18,"path":["memchr","memmem","prefilter","Prefilter"],"kind":"enum"},"17:12033:18192":{"crate_id":17,"path":["object","macho","PrebindCksumCommand"],"kind":"struct"},"5:6202:30979":{"crate_id":5,"path":["alloc","vec","drain","drop","DropGuard"],"kind":"struct"},"12:300:32276":{"crate_id":12,"path":["hashbrown","raw","RawIter"],"kind":"struct"},"17:12948:18632":{"crate_id":17,"path":["object","pe","ImageAuxSymbolCrc"],"kind":"struct"},"2:54149:2464":{"crate_id":2,"path":["core","core_arch","simd","i16x32"],"kind":"struct"},"1:1476:143":{"crate_id":1,"path":["std","collections","hash","set","HashSet"],"kind":"struct"},"2:50494:7616":{"crate_id":2,"path":["core","slice","iter","ChunksMut"],"kind":"struct"},"6:4669:12126":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlattr"],"kind":"struct"},"16:7567:15078":{"crate_id":16,"path":["gimli","read","unit","UnitType"],"kind":"enum"},"1:8912:20923":{"crate_id":1,"path":["std","sync","mpmc","array","ArrayToken"],"kind":"struct"},"12:632:1982":{"crate_id":12,"path":["hashbrown","map","Iter"],"kind":"struct"},"1:3705:2189":{"crate_id":1,"path":["std","net","tcp","TcpListener"],"kind":"struct"},"12:1085:13991":{"crate_id":12,"path":["hashbrown","map","OccupiedEntryRef"],"kind":"struct"},"17:9193:33416":{"crate_id":17,"path":["object","read","any","SectionRelocationIteratorInternal"],"kind":"enum"},"2:2300:185":{"crate_id":2,"path":["core","cmp","PartialEq"],"kind":"trait"},"17:9303:15224":{"crate_id":17,"path":["object","read","coff","section","SectionTable"],"kind":"struct"},"1:3382:2127":{"crate_id":1,"path":["std","io","Guard"],"kind":"struct"},"5:1708:1988":{"crate_id":5,"path":["alloc","collections","btree","map","DrainFilter"],"kind":"struct"},"17:13478:19104":{"crate_id":17,"path":["object","pe","ImageDebugDirectory"],"kind":"struct"},"2:50979:7643":{"crate_id":2,"path":["core","str","iter","SplitAsciiWhitespace"],"kind":"struct"},"17:11436:17990":{"crate_id":17,"path":["object","macho","DyldCacheHeader"],"kind":"struct"},"17:11594:18045":{"crate_id":17,"path":["object","macho","LoadCommand"],"kind":"struct"},"1:9165:2063":{"crate_id":1,"path":["std","sys","unix","args","Args"],"kind":"struct"},"17:9475:15240":{"crate_id":17,"path":["object","read","elf","segment","ElfSegmentIterator"],"kind":"struct"},"2:10120:7628":{"crate_id":2,"path":["core","slice","iter","SplitN"],"kind":"struct"},"18:727:19206":{"crate_id":18,"path":["memchr","memmem","SearcherConfig"],"kind":"struct"},"2:9013:7580":{"crate_id":2,"path":["core","fmt","UpperHex"],"kind":"trait"},"6:4807:12139":{"crate_id":6,"path":["libc","unix","linux_like","linux","ifreq"],"kind":"struct"},"2:53617:2470":{"crate_id":2,"path":["core","core_arch","simd","i64x4"],"kind":"struct"},"17:12198:18264":{"crate_id":17,"path":["object","macho","LinkerOptionCommand"],"kind":"struct"},"2:48025:7945":{"crate_id":2,"path":["core","iter","sources","once_with","OnceWith"],"kind":"struct"},"17:11343:15803":{"crate_id":17,"path":["object","elf","NoteHeader64"],"kind":"struct"},"1:1105:1998":{"crate_id":1,"path":["std","collections","hash","map","OccupiedEntry"],"kind":"struct"},"17:10490:15393":{"crate_id":17,"path":["object","read","pe","resource","ResourceName"],"kind":"struct"},"17:10721:15192":{"crate_id":17,"path":["object","read","ObjectMapEntry"],"kind":"struct"},"1:4754:2227":{"crate_id":1,"path":["std","os","fd","owned","OwnedFd"],"kind":"struct"},"17:12756:18512":{"crate_id":17,"path":["object","pe","Guid"],"kind":"struct"},"16:6496:15039":{"crate_id":16,"path":["gimli","read","line","ColumnType"],"kind":"enum"},"1:7565:2222":{"crate_id":1,"path":["std","sealed","Sealed"],"kind":"trait"},"16:6109:15019":{"crate_id":16,"path":["gimli","read","reader","ReaderOffsetId"],"kind":"struct"},"17:13506:19128":{"crate_id":17,"path":["object","pe","ImageDebugMisc"],"kind":"struct"},"17:12630:18460":{"crate_id":17,"path":["object","pe","ImageDataDirectory"],"kind":"struct"},"6:5709:12762":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","seminfo"],"kind":"struct"},"17:12211:18265":{"crate_id":17,"path":["object","macho","SymsegCommand"],"kind":"struct"},"17:10497:15394":{"crate_id":17,"path":["object","read","pe","resource","ResourceNameOrId"],"kind":"enum"},"1:5041:20884":{"crate_id":1,"path":["std","path","fmt","DebugHelper"],"kind":"struct"},"2:2678:1870":{"crate_id":2,"path":["core","marker","Sized"],"kind":"trait"},"1:7566:1954":{"crate_id":1,"path":["std","thread","local","AccessError"],"kind":"struct"},"2:20841:2419":{"crate_id":2,"path":["core","core_simd","masks","to_bitmask","ToBitMask"],"kind":"trait"},"2:51439:8176":{"crate_id":2,"path":["core","str","BytesIsNotEmpty"],"kind":"struct"},"15:0:1738":{"crate_id":15,"path":["addr2line"],"kind":"module"},"1:910:1984":{"crate_id":1,"path":["std","collections","hash","map","IntoIter"],"kind":"struct"},"2:29971:7994":{"crate_id":2,"path":["core","mem","transmutability","Assume"],"kind":"struct"},"16:4262:14617":{"crate_id":16,"path":["gimli","constants","DwAte"],"kind":"struct"},"2:9684:2222":{"crate_id":2,"path":["core","slice","index","private_slice_index","Sealed"],"kind":"trait"},"5:2162:31395":{"crate_id":5,"path":["alloc","collections","btree","navigate","LazyLeafRange"],"kind":"struct"},"16:7557:15077":{"crate_id":16,"path":["gimli","read","unit","DebugInfoUnitHeadersIter"],"kind":"struct"},"2:51661:2498":{"crate_id":2,"path":["core","task","wake","RawWakerVTable"],"kind":"struct"},"14:215:14004":{"crate_id":14,"path":["rustc_demangle","TryDemangleError"],"kind":"struct"},"2:47628:7962":{"crate_id":2,"path":["core","iter","adapters","enumerate","Enumerate"],"kind":"struct"},"2:51466:121":{"crate_id":2,"path":["core","time","Duration"],"kind":"struct"},"2:54705:7536":{"crate_id":2,"path":["core","core_arch","x86","__m512d"],"kind":"struct"},"2:50606:7622":{"crate_id":2,"path":["core","slice","iter","RChunksExactMut"],"kind":"struct"},"1:11846:1457":{"crate_id":1,"path":["std","u16"],"kind":"primitive"},"14:160:14001":{"crate_id":14,"path":["rustc_demangle","Demangle"],"kind":"struct"},"2:20462:27844":{"crate_id":2,"path":["core","core_simd","swizzle","deinterleave","Odd"],"kind":"struct"},"2:46992:200":{"crate_id":2,"path":["core","ops","range","RangeToInclusive"],"kind":"struct"},"16:2868:14096":{"crate_id":16,"path":["gimli","common","EhFrameOffset"],"kind":"struct"},"2:2842:8013":{"crate_id":2,"path":["core","ops","bit","Shr"],"kind":"trait"},"12:1681:143":{"crate_id":12,"path":["hashbrown","set","HashSet"],"kind":"struct"},"18:590:27451":{"crate_id":18,"path":["memchr","memmem","twoway","TwoWay"],"kind":"struct"},"16:4662:14729":{"crate_id":16,"path":["gimli","constants","DwOrd"],"kind":"struct"},"2:2801:8006":{"crate_id":2,"path":["core","ops","arith","MulAssign"],"kind":"trait"},"2:2848:8014":{"crate_id":2,"path":["core","ops","bit","BitAndAssign"],"kind":"trait"},"5:4722:201":{"crate_id":5,"path":["alloc","rc","Rc"],"kind":"struct"},"17:13340:19051":{"crate_id":17,"path":["object","pe","ImageHotPatchBase"],"kind":"struct"},"2:21581:26873":{"crate_id":2,"path":["core","num","dec2flt","common","AsciiStr"],"kind":"struct"},"18:574:33455":{"crate_id":18,"path":["memchr","memmem","twoway","Forward"],"kind":"struct"},"6:5615:12756":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","rtentry"],"kind":"struct"},"17:11787:18175":{"crate_id":17,"path":["object","macho","SubUmbrellaCommand"],"kind":"struct"},"17:10796:15143":{"crate_id":17,"path":["object","read","CodeView"],"kind":"struct"},"17:8814:128":{"crate_id":17,"path":["object","read","any","File"],"kind":"struct"},"2:2494:75":{"crate_id":2,"path":["core","convert","AsRef"],"kind":"trait"},"1:5339:2320":{"crate_id":1,"path":["std","process","Child"],"kind":"struct"},"16:5411:14993":{"crate_id":16,"path":["gimli","read","cfi","EhFrameHdr"],"kind":"struct"},"12:119:32285":{"crate_id":12,"path":["hashbrown","raw","RawTable"],"kind":"struct"},"16:5510:14999":{"crate_id":16,"path":["gimli","read","cfi","BaseAddresses"],"kind":"struct"},"17:9897:15343":{"crate_id":17,"path":["object","read","macho","file","MachOComdatSectionIterator"],"kind":"struct"},"1:7662:2001":{"crate_id":1,"path":["std","collections","hash","map","RandomState"],"kind":"struct"},"1:8992:19481":{"crate_id":1,"path":["std","sync","mpmc","select","Selected"],"kind":"enum"},"17:13134:19011":{"crate_id":17,"path":["object","pe","ImageResourceDirectoryString"],"kind":"struct"},"2:12156:189":{"crate_id":2,"path":["core","future","pending","Pending"],"kind":"struct"},"2:4397:7752":{"crate_id":2,"path":["core","cell","SyncUnsafeCell"],"kind":"struct"},"12:861:1996":{"crate_id":12,"path":["hashbrown","map","RawEntryBuilder"],"kind":"struct"},"2:49472:7571":{"crate_id":2,"path":["core","fmt","num","Octal"],"kind":"struct"},"2:9694:219":{"crate_id":2,"path":["core","slice","index","SliceIndex"],"kind":"trait"},"1:3199:2162":{"crate_id":1,"path":["std","io","stdio","StdinLock"],"kind":"struct"},"17:13158:19035":{"crate_id":17,"path":["object","pe","ImageLoadConfigCodeIntegrity"],"kind":"struct"},"1:774:141":{"crate_id":1,"path":["std","collections","hash","map","HashMap"],"kind":"struct"},"1:8047:2110":{"crate_id":1,"path":["std","io","readbuf","BorrowedCursor"],"kind":"struct"},"2:3160:231":{"crate_id":2,"path":["core","ops","try_trait","Try"],"kind":"trait"},"18:690:19203":{"crate_id":18,"path":["memchr","memmem","FinderRev"],"kind":"struct"},"17:8631:15171":{"crate_id":17,"path":["object","endian","I16Bytes"],"kind":"struct"},"2:2809:8007":{"crate_id":2,"path":["core","ops","arith","RemAssign"],"kind":"trait"},"2:47453:2083":{"crate_id":2,"path":["core","ffi","c_str","FromBytesWithNulError"],"kind":"struct"},"2:3241:7563":{"crate_id":2,"path":["core","ops","unsize","DispatchFromDyn"],"kind":"trait"},"17:9722:15287":{"crate_id":17,"path":["object","read","elf","version","Version"],"kind":"struct"},"1:5587:2366":{"crate_id":1,"path":["std","sync","mpsc","SyncSender"],"kind":"struct"},"17:9371:15180":{"crate_id":17,"path":["object","read","coff","symbol","SymbolIterator"],"kind":"struct"},"1:3274:2159":{"crate_id":1,"path":["std","io","stdio","Stderr"],"kind":"struct"},"2:39861:20932":{"crate_id":2,"path":["core","error","private","Internal"],"kind":"struct"},"17:13404:19091":{"crate_id":17,"path":["object","pe","ImageRuntimeFunctionEntry"],"kind":"struct"},"12:444:141":{"crate_id":12,"path":["hashbrown","map","HashMap"],"kind":"struct"},"2:22223:1944":{"crate_id":2,"path":["core","num","nonzero","NonZeroUsize"],"kind":"struct"},"2:0:486":{"crate_id":2,"path":["core"],"kind":"module"},"16:3026:14101":{"crate_id":16,"path":["gimli","arch","Arm"],"kind":"struct"},"17:9681:15289":{"crate_id":17,"path":["object","read","elf","note","Note"],"kind":"struct"},"12:1852:2003":{"crate_id":12,"path":["hashbrown","set","Intersection"],"kind":"struct"},"16:4786:14757":{"crate_id":16,"path":["gimli","constants","DwLns"],"kind":"struct"},"17:11186:15624":{"crate_id":17,"path":["object","elf","Rela64"],"kind":"struct"},"2:5415:7965":{"crate_id":2,"path":["core","iter","adapters","flatten","FlatMap"],"kind":"struct"},"1:2411:2107":{"crate_id":1,"path":["std","fs","read_dir"],"kind":"function"},"17:420:14045":{"crate_id":17,"path":["object","read","any","Section"],"kind":"struct"},"17:9350:15217":{"crate_id":17,"path":["object","read","coff","section","CoffSection"],"kind":"struct"},"2:10134:7626":{"crate_id":2,"path":["core","slice","iter","RSplitN"],"kind":"struct"},"1:10384:2161":{"crate_id":1,"path":["std","sys","unix","stdio","Stdin"],"kind":"struct"},"6:4427:12100":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Sym"],"kind":"struct"},"2:20654:2429":{"crate_id":2,"path":["core","core_simd","elements","uint","SimdUint"],"kind":"trait"},"16:6816:32720":{"crate_id":16,"path":["gimli","read","lookup","DebugLookup"],"kind":"struct"},"17:9831:15340":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCacheImageIterator"],"kind":"struct"},"2:50425:27922":{"crate_id":2,"path":["core","slice","iter","GenericSplitN"],"kind":"struct"},"1:3409:2113":{"crate_id":1,"path":["std","io","Read"],"kind":"trait"},"16:6284:15031":{"crate_id":16,"path":["gimli","read","index","DebugTuIndex"],"kind":"struct"},"2:50057:27507":{"crate_id":2,"path":["core","hash","sip","Sip24Rounds"],"kind":"struct"},"14:7:14001":{"crate_id":14,"path":["rustc_demangle","legacy","Demangle"],"kind":"struct"},"16:6123:15020":{"crate_id":16,"path":["gimli","read","abbrev","DebugAbbrev"],"kind":"struct"},"2:4342:7750":{"crate_id":2,"path":["core","cell","BorrowRefMut"],"kind":"struct"},"2:47618:7961":{"crate_id":2,"path":["core","iter","adapters","cycle","Cycle"],"kind":"struct"},"17:10182:15306":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbol"],"kind":"struct"},"0:0:1633":{"crate_id":0,"path":["winapi"],"kind":"module"},"1:1620:2003":{"crate_id":1,"path":["std","collections","hash","set","Intersection"],"kind":"struct"},"6:5551:12752":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","termios"],"kind":"struct"},"17:9601:15241":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbol"],"kind":"struct"},"5:5094:30979":{"crate_id":5,"path":["alloc","slice","hack","to_vec","DropGuard"],"kind":"struct"},"16:7872:15084":{"crate_id":16,"path":["gimli","read","unit","EntriesRaw"],"kind":"struct"},"17:8871:15175":{"crate_id":17,"path":["object","read","any","SegmentIterator"],"kind":"struct"},"5:6978:29855":{"crate_id":5,"path":["alloc","collections","btree","set_val","SetValZST"],"kind":"struct"},"6:4516:12107":{"crate_id":6,"path":["libc","unix","linux_like","linux","posix_spawn_file_actions_t"],"kind":"struct"},"16:5235:32695":{"crate_id":16,"path":["gimli","read","util","sealed","CapacityFull"],"kind":"struct"},"16:2535:14082":{"crate_id":16,"path":["gimli","common","DebugLocListsBase"],"kind":"struct"},"6:4106:12068":{"crate_id":6,"path":["libc","unix","linux_like","linux","rlimit64"],"kind":"struct"},"1:6907:23256":{"crate_id":1,"path":["std","sys_common","lazy_box","LazyBox"],"kind":"struct"},"1:11828:409":{"crate_id":1,"path":["std","char"],"kind":"primitive"},"17:10466:15391":{"crate_id":17,"path":["object","read","pe","resource","ResourceDirectoryTable"],"kind":"struct"},"16:2930:14098":{"crate_id":16,"path":["gimli","common","SectionId"],"kind":"enum"},"1:11315:2190":{"crate_id":1,"path":["std","sys_common","net","TcpStream"],"kind":"struct"},"2:9007:7571":{"crate_id":2,"path":["core","fmt","Octal"],"kind":"trait"},"2:48031:2169":{"crate_id":2,"path":["core","iter","sources","repeat","Repeat"],"kind":"struct"},"2:49039:81":{"crate_id":2,"path":["core","sync","atomic","AtomicI16"],"kind":"struct"},"1:8875:2371":{"crate_id":1,"path":["std","sync","mpsc","TrySendError"],"kind":"enum"},"5:5142:7597":{"crate_id":5,"path":["alloc","slice","Join"],"kind":"trait"},"6:6555:13186":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ptrace_rseq_configuration"],"kind":"struct"},"2:52779:2489":{"crate_id":2,"path":["core","core_arch","simd","u64x2"],"kind":"struct"},"5:2874:29926":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Dying"],"kind":"enum"},"17:8295:15164":{"crate_id":17,"path":["object","common","RelocationKind"],"kind":"enum"},"1:3427:2112":{"crate_id":1,"path":["std","io","IoSliceMut"],"kind":"struct"},"17:10532:127":{"crate_id":17,"path":["object","read","Error"],"kind":"struct"},"1:9102:2407":{"crate_id":1,"path":["std","time","SystemTimeError"],"kind":"struct"},"2:1733:8049":{"crate_id":2,"path":["core","ptr","metadata","Pointee"],"kind":"trait"},"16:8069:127":{"crate_id":16,"path":["gimli","read","Error"],"kind":"enum"},"17:10921:15399":{"crate_id":17,"path":["object","archive","Header"],"kind":"struct"},"6:5597:12754":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_mmap_req"],"kind":"struct"},"1:1887:2063":{"crate_id":1,"path":["std","env","Args"],"kind":"struct"},"1:6100:2499":{"crate_id":1,"path":["std","sync","mpmc","waker","Waker"],"kind":"struct"},"2:48862:190":{"crate_id":2,"path":["core","pin","Pin"],"kind":"struct"},"5:688:110":{"crate_id":5,"path":["alloc","borrow","Cow"],"kind":"enum"},"17:11909:18183":{"crate_id":17,"path":["object","macho","DysymtabCommand"],"kind":"struct"},"2:1632:577":{"crate_id":2,"path":["core","mem","drop"],"kind":"function"},"17:8418:15168":{"crate_id":17,"path":["object","common","SectionFlags"],"kind":"enum"},"17:12768:18514":{"crate_id":17,"path":["object","pe","AnonObjectHeader"],"kind":"struct"},"18:548:140":{"crate_id":18,"path":["memchr","memmem","rabinkarp","Hash"],"kind":"struct"},"2:52727:2482":{"crate_id":2,"path":["core","core_arch","simd","u16x8"],"kind":"struct"},"17:13231:19048":{"crate_id":17,"path":["object","pe","ImageLoadConfigDirectory32"],"kind":"struct"},"2:53351:2487":{"crate_id":2,"path":["core","core_arch","simd","u32x8"],"kind":"struct"},"16:6210:15027":{"crate_id":16,"path":["gimli","read","aranges","ArangeHeader"],"kind":"struct"},"6:4364:12095":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_ff_erase"],"kind":"struct"},"1:4698:2225":{"crate_id":1,"path":["std","os","fd","raw","FromRawFd"],"kind":"trait"},"1:4004:2213":{"crate_id":1,"path":["std","os","unix","fs","DirEntryExt2"],"kind":"trait"},"17:11873:18181":{"crate_id":17,"path":["object","macho","RoutinesCommand64"],"kind":"struct"},"6:6303:8684":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","flock"],"kind":"struct"},"1:954:1988":{"crate_id":1,"path":["std","collections","hash","map","DrainFilter"],"kind":"struct"},"16:8056:15093":{"crate_id":16,"path":["gimli","read","StoreOnHeap"],"kind":"struct"},"2:49305:92":{"crate_id":2,"path":["core","sync","atomic","AtomicUsize"],"kind":"struct"},"16:7249:15058":{"crate_id":16,"path":["gimli","read","op","Evaluation"],"kind":"struct"},"6:4683:12128":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_ifru_map"],"kind":"struct"},"1:3990:2211":{"crate_id":1,"path":["std","os","unix","fs","FileTypeExt"],"kind":"trait"},"2:47756:7972":{"crate_id":2,"path":["core","iter","adapters","skip","Skip"],"kind":"struct"},"16:2300:14072":{"crate_id":16,"path":["gimli","common","LineEncoding"],"kind":"struct"},"1:574:1937":{"crate_id":1,"path":["std","thread","Packet"],"kind":"struct"},"1:8767:2328":{"crate_id":1,"path":["std","process","ExitStatusError"],"kind":"struct"},"2:48853:8106":{"crate_id":2,"path":["core","panicking","AssertKind"],"kind":"enum"},"6:123:8484":{"crate_id":6,"path":["libc","unix","fpos_t"],"kind":"enum"},"1:4273:2243":{"crate_id":1,"path":["std","os","unix","net","listener","UnixListener"],"kind":"struct"},"1:6311:163":{"crate_id":1,"path":["std","sync","mutex","Mutex"],"kind":"struct"},"1:969:1991":{"crate_id":1,"path":["std","collections","hash","map","IntoValues"],"kind":"struct"},"5:3245:1988":{"crate_id":5,"path":["alloc","collections","btree","set","DrainFilter"],"kind":"struct"},"2:52372:2472":{"crate_id":2,"path":["core","core_arch","simd","i8x4"],"kind":"struct"},"2:52426:2493":{"crate_id":2,"path":["core","core_arch","simd","u8x8"],"kind":"struct"},"2:2577:115":{"crate_id":2,"path":["core","default","Default"],"kind":"trait"},"2:51270:7676":{"crate_id":2,"path":["core","str","pattern","StrSearcherImpl"],"kind":"enum"},"6:4149:12072":{"crate_id":6,"path":["libc","unix","linux_like","linux","dqblk"],"kind":"struct"},"16:6517:14015":{"crate_id":16,"path":["gimli","read","line","LineSequence"],"kind":"struct"},"17:11734:18171":{"crate_id":17,"path":["object","macho","Dylib"],"kind":"struct"},"2:10647:7618":{"crate_id":2,"path":["core","slice","iter","GroupBy"],"kind":"struct"},"16:5981:32673":{"crate_id":16,"path":["gimli","read","cfi","PointerEncodingParameters"],"kind":"struct"},"2:47528:2085":{"crate_id":2,"path":["core","ffi","VaListImpl"],"kind":"struct"},"2:48777:8025":{"crate_id":2,"path":["core","option","Item"],"kind":"struct"},"1:4193:2242":{"crate_id":1,"path":["std","os","unix","net","datagram","UnixDatagram"],"kind":"struct"},"2:22355:169":{"crate_id":2,"path":["core","num","nonzero","NonZeroI64"],"kind":"struct"},"12:822:1993":{"crate_id":12,"path":["hashbrown","map","RawEntryMut"],"kind":"enum"},"2:11263:8183":{"crate_id":2,"path":["core","str","iter","SplitNInternal"],"kind":"struct"},"5:7111:26934":{"crate_id":5,"path":["alloc","ffi","c_str","FromBytesWithNulErrorKind"],"kind":"enum"},"6:5871:12797":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","msqid_ds"],"kind":"struct"},"1:3898:2206":{"crate_id":1,"path":["std","os","unix","ffi","os_str","OsStringExt"],"kind":"trait"},"2:54735:7538":{"crate_id":2,"path":["core","core_arch","x86","__m256bh"],"kind":"struct"},"16:7278:15060":{"crate_id":16,"path":["gimli","read","pubnames","DebugPubNames"],"kind":"struct"},"17:12850:18561":{"crate_id":17,"path":["object","pe","ImageSymbolBytes"],"kind":"struct"},"17:8752:2139":{"crate_id":17,"path":["object","read","util","Bytes"],"kind":"struct"},"1:900:1983":{"crate_id":1,"path":["std","collections","hash","map","IterMut"],"kind":"struct"},"1:1864:2056":{"crate_id":1,"path":["std","env","SplitPaths"],"kind":"struct"},"1:10022:20035":{"crate_id":1,"path":["std","sys","unix","os_str","Slice"],"kind":"struct"},"1:11832:308":{"crate_id":1,"path":["std","array"],"kind":"primitive"},"2:50970:7644":{"crate_id":2,"path":["core","str","iter","SplitWhitespace"],"kind":"struct"},"2:54758:7539":{"crate_id":2,"path":["core","core_arch","x86","__m512bh"],"kind":"struct"},"17:11828:18178":{"crate_id":17,"path":["object","macho","DylinkerCommand"],"kind":"struct"},"1:10626:2089":{"crate_id":1,"path":["std","sys","unix","fs","OpenOptions"],"kind":"struct"},"1:11169:19328":{"crate_id":1,"path":["std","sys_common","wtf8","CodePoint"],"kind":"struct"},"2:11513:7641":{"crate_id":2,"path":["core","str","pattern"],"kind":"module"},"17:12972:18965":{"crate_id":17,"path":["object","pe","ImageBaseRelocation"],"kind":"struct"},"2:3324:68":{"crate_id":2,"path":["core","any","Any"],"kind":"trait"},"6:4371:12096":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_abs_setup"],"kind":"struct"},"2:6608:27877":{"crate_id":2,"path":["core","iter","adapters","GenericShunt"],"kind":"struct"},"16:7288:15061":{"crate_id":16,"path":["gimli","read","pubnames","PubNamesEntryIter"],"kind":"struct"},"2:2831:8010":{"crate_id":2,"path":["core","ops","bit","BitXor"],"kind":"trait"},"2:3504:1987":{"crate_id":2,"path":["core","array","drain","Drain"],"kind":"struct"},"1:11130:20864":{"crate_id":1,"path":["std","sys_common","process","CommandEnv"],"kind":"struct"},"1:9043:164":{"crate_id":1,"path":["std","sync","mutex","MutexGuard"],"kind":"struct"},"1:5373:2322":{"crate_id":1,"path":["std","process","ChildStdout"],"kind":"struct"},"2:6863:2343":{"crate_id":2,"path":["core","iter","sources","once","once"],"kind":"function"},"2:51487:2413":{"crate_id":2,"path":["core","time","TryFromFloatSecsError"],"kind":"struct"},"2:8243:7637":{"crate_id":2,"path":["core","panicking","assert_matches_failed","Pattern"],"kind":"struct"},"2:50049:27448":{"crate_id":2,"path":["core","hash","sip","Sip13Rounds"],"kind":"struct"},"2:29965:7706":{"crate_id":2,"path":["core","mem","maybe_uninit","MaybeUninit"],"kind":"union"},"2:47819:7975":{"crate_id":2,"path":["core","iter","adapters","zip","Zip"],"kind":"struct"},"2:54337:2468":{"crate_id":2,"path":["core","core_arch","simd","i32x16"],"kind":"struct"},"6:5635:12757":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","timex"],"kind":"struct"},"2:50950:2142":{"crate_id":2,"path":["core","str","iter","Lines"],"kind":"struct"},"17:9458:15254":{"crate_id":17,"path":["object","read","elf","file","ElfFile"],"kind":"struct"},"1:2909:127":{"crate_id":1,"path":["std","io","error","Error"],"kind":"struct"},"17:10528:15183":{"crate_id":17,"path":["object","read","traits","NoDynamicRelocationIterator"],"kind":"struct"},"1:11847:1458":{"crate_id":1,"path":["std","u32"],"kind":"primitive"},"1:6251:203":{"crate_id":1,"path":["std","sync","mpmc","Receiver"],"kind":"struct"},"2:47408:7773":{"crate_id":2,"path":["core","char","ToUppercase"],"kind":"struct"},"2:2690:1943":{"crate_id":2,"path":["core","marker","PhantomData"],"kind":"struct"},"16:2389:14076":{"crate_id":16,"path":["gimli","common","DebugAddrIndex"],"kind":"struct"},"18:614:33446":{"crate_id":18,"path":["memchr","memmem","twoway","SuffixKind"],"kind":"enum"},"17:12695:18464":{"crate_id":17,"path":["object","pe","ImageOptionalHeader64"],"kind":"struct"},"5:6156:1987":{"crate_id":5,"path":["alloc","vec","drain","Drain"],"kind":"struct"},"2:48921:1983":{"crate_id":2,"path":["core","result","IterMut"],"kind":"struct"},"5:881:1982":{"crate_id":5,"path":["alloc","collections","binary_heap","Iter"],"kind":"struct"},"1:4696:2221":{"crate_id":1,"path":["std","os","fd","raw","AsRawFd"],"kind":"trait"},"17:9283:15227":{"crate_id":17,"path":["object","read","coff","file","CoffCommon"],"kind":"struct"},"2:9272:7802":{"crate_id":2,"path":["core","hash","BuildHasher"],"kind":"trait"},"17:13354:19052":{"crate_id":17,"path":["object","pe","ImageHotPatchHashes"],"kind":"struct"},"6:5782:12768":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_data"],"kind":"union"},"1:11842:729":{"crate_id":1,"path":["std","i32"],"kind":"primitive"},"2:8950:2078":{"crate_id":2,"path":["core","fmt","Write"],"kind":"trait"},"17:12118:18198":{"crate_id":17,"path":["object","macho","EncryptionInfoCommand64"],"kind":"struct"},"12:60:32281":{"crate_id":12,"path":["hashbrown","raw","bitmask","BitMaskIter"],"kind":"struct"},"2:52971:2454":{"crate_id":2,"path":["core","core_arch","simd","f64x2"],"kind":"struct"},"6:5490:12746":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","aiocb"],"kind":"struct"},"1:11233:20911":{"crate_id":1,"path":["std","sys_common","thread_local_key","Key"],"kind":"struct"},"1:2399:2101":{"crate_id":1,"path":["std","fs","read_link"],"kind":"function"},"1:719:1967":{"crate_id":1,"path":["std","backtrace","LazilyResolvedCapture"],"kind":"struct"},"17:11853:18180":{"crate_id":17,"path":["object","macho","RoutinesCommand32"],"kind":"struct"},"12:751:1987":{"crate_id":12,"path":["hashbrown","map","Drain"],"kind":"struct"},"5:7052:1980":{"crate_id":5,"path":["alloc","collections","TryReserveError"],"kind":"struct"},"1:8781:2329":{"crate_id":1,"path":["std","process","ExitCode"],"kind":"struct"},"17:12291:18276":{"crate_id":17,"path":["object","macho","NoteCommand"],"kind":"struct"},"5:3477:160":{"crate_id":5,"path":["alloc","collections","linked_list","LinkedList"],"kind":"struct"},"2:30007:26888":{"crate_id":2,"path":["core","ptr","alignment","AlignmentEnum16"],"kind":"enum"},"2:2907:116":{"crate_id":2,"path":["core","ops","deref","Deref"],"kind":"trait"},"17:13518:19129":{"crate_id":17,"path":["object","pe","ImageFunctionEntry"],"kind":"struct"},"2:20710:2420":{"crate_id":2,"path":["core","core_simd","lane_count","LaneCount"],"kind":"struct"},"6:547:8810":{"crate_id":6,"path":["libc","unix","pollfd"],"kind":"struct"},"16:6270:15030":{"crate_id":16,"path":["gimli","read","index","DebugCuIndex"],"kind":"struct"},"5:6923:2009":{"crate_id":5,"path":["alloc","collections","binary_heap","IntoIterSorted"],"kind":"struct"},"2:49723:70":{"crate_id":2,"path":["core","fmt","rt","v1","Argument"],"kind":"struct"},"16:6171:15024":{"crate_id":16,"path":["gimli","read","abbrev","AttributeSpecification"],"kind":"struct"},"1:1938:2076":{"crate_id":1,"path":["std","error","Report"],"kind":"struct"},"6:4345:12093":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_effect"],"kind":"struct"},"17:10845:15196":{"crate_id":17,"path":["object","read","Relocation"],"kind":"struct"},"5:1055:31007":{"crate_id":5,"path":["alloc","collections","btree","append","MergeIter"],"kind":"struct"},"17:13031:18996":{"crate_id":17,"path":["object","pe","ImageThunkData64"],"kind":"struct"},"2:48677:2183":{"crate_id":2,"path":["core","net","socket_addr","SocketAddr"],"kind":"enum"},"17:13413:19094":{"crate_id":17,"path":["object","pe","ImageEnclaveConfig32"],"kind":"struct"},"1:2253:2092":{"crate_id":1,"path":["std","fs","read"],"kind":"function"},"12:1029:1999":{"crate_id":12,"path":["hashbrown","map","VacantEntry"],"kind":"struct"},"1:6203:2365":{"crate_id":1,"path":["std","sync","mpmc","Sender"],"kind":"struct"},"17:9820:15339":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldSubCache"],"kind":"struct"},"17:12955:18644":{"crate_id":17,"path":["object","pe","ImageRelocation"],"kind":"struct"},"16:7909:15086":{"crate_id":16,"path":["gimli","read","unit","EntriesTree"],"kind":"struct"},"6:532:8808":{"crate_id":6,"path":["libc","unix","hostent"],"kind":"struct"},"6:5737:12765":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_exit"],"kind":"struct"},"16:5184:14041":{"crate_id":16,"path":["gimli","endianity","RunTimeEndian"],"kind":"enum"},"1:11844:726":{"crate_id":1,"path":["std","i128"],"kind":"primitive"},"6:1642:9723":{"crate_id":6,"path":["libc","unix","linux_like","in_pktinfo"],"kind":"struct"},"16:7267:15059":{"crate_id":16,"path":["gimli","read","pubnames","PubNamesEntry"],"kind":"struct"},"2:21685:27517":{"crate_id":2,"path":["core","num","diy_float","Fp"],"kind":"struct"},"17:11800:18176":{"crate_id":17,"path":["object","macho","SubLibraryCommand"],"kind":"struct"},"16:7319:15064":{"crate_id":16,"path":["gimli","read","pubtypes","PubTypesEntryIter"],"kind":"struct"},"6:4201:12076":{"crate_id":6,"path":["libc","unix","linux_like","linux","packet_mreq"],"kind":"struct"},"12:353:32278":{"crate_id":12,"path":["hashbrown","raw","RawDrain"],"kind":"struct"},"2:51691:7552":{"crate_id":2,"path":["core","alloc","layout","LayoutError"],"kind":"struct"},"17:8137:15159":{"crate_id":17,"path":["object","common","BinaryFormat"],"kind":"enum"},"2:21:667":{"crate_id":2,"path":["core","format_args"],"kind":"macro"},"1:11475:14027":{"crate_id":1,"path":["std","backtrace_rs","backtrace","Frame"],"kind":"struct"},"5:3132:29958":{"crate_id":5,"path":["alloc","collections","btree","set","IntersectionInner"],"kind":"enum"},"6:5702:12761":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","Elf32_Chdr"],"kind":"struct"},"1:9083:2119":{"crate_id":1,"path":["std","time","SystemTime"],"kind":"struct"},"16:6903:15053":{"crate_id":16,"path":["gimli","read","op","Operation"],"kind":"enum"},"1:11852:1102":{"crate_id":1,"path":["std","reference"],"kind":"primitive"},"16:4297:14628":{"crate_id":16,"path":["gimli","constants","DwLle"],"kind":"struct"},"17:12237:18267":{"crate_id":17,"path":["object","macho","FvmfileCommand"],"kind":"struct"},"2:9237:144":{"crate_id":2,"path":["core","hash","Hasher"],"kind":"trait"},"17:10894:15199":{"crate_id":17,"path":["object","read","CompressedData"],"kind":"struct"},"17:9691:15262":{"crate_id":17,"path":["object","read","elf","hash","HashTable"],"kind":"struct"},"1:8958:20927":{"crate_id":1,"path":["std","sync","mpmc","list","Position"],"kind":"struct"},"5:1973:2022":{"crate_id":5,"path":["alloc","collections","btree","map","CursorMut"],"kind":"struct"},"2:22820:2193":{"crate_id":2,"path":["core","num","saturating","Saturating"],"kind":"struct"},"2:47679:7967":{"crate_id":2,"path":["core","iter","adapters","inspect","Inspect"],"kind":"struct"},"18:719:19205":{"crate_id":18,"path":["memchr","memmem","NeedleInfo"],"kind":"struct"},"9:649:13813":{"crate_id":9,"path":["miniz_oxide","deflate","core","TDEFLStatus"],"kind":"enum"},"11:0:1735":{"crate_id":11,"path":["adler"],"kind":"module"},"17:9061:15179":{"crate_id":17,"path":["object","read","any","SymbolTable"],"kind":"struct"},"5:7005:1984":{"crate_id":5,"path":["alloc","collections","vec_deque","into_iter","IntoIter"],"kind":"struct"},"17:9031:33410":{"crate_id":17,"path":["object","read","any","ComdatSectionIteratorInternal"],"kind":"enum"},"16:6376:15037":{"crate_id":16,"path":["gimli","read","line","LineInstruction"],"kind":"enum"},"17:11149:15621":{"crate_id":17,"path":["object","elf","Rel32"],"kind":"struct"},"6:482:8802":{"crate_id":6,"path":["libc","unix","utimbuf"],"kind":"struct"},"17:12046:18193":{"crate_id":17,"path":["object","macho","UuidCommand"],"kind":"struct"},"12:697:1991":{"crate_id":12,"path":["hashbrown","map","IntoValues"],"kind":"struct"},"5:7157:221":{"crate_id":5,"path":["alloc","string","String"],"kind":"struct"},"2:2972:7564":{"crate_id":2,"path":["core","ops","generator","Generator"],"kind":"trait"},"5:2055:1930":{"crate_id":5,"path":["alloc","collections","btree","mem","replace","PanicGuard"],"kind":"struct"},"12:320:32271":{"crate_id":12,"path":["hashbrown","raw","RawIntoIter"],"kind":"struct"},"2:52527:2473":{"crate_id":2,"path":["core","core_arch","simd","i8x8"],"kind":"struct"},"2:8726:27550":{"crate_id":2,"path":["core","fmt","builders","PadAdapter"],"kind":"struct"},"6:1517:9711":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreqn"],"kind":"struct"},"1:8898:2353":{"crate_id":1,"path":["std","sync","condvar","WaitTimeoutResult"],"kind":"struct"},"17:9155:15181":{"crate_id":17,"path":["object","read","any","DynamicRelocationIterator"],"kind":"struct"},"6:6425:13177":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_fpxreg"],"kind":"struct"},"6:568:8813":{"crate_id":6,"path":["libc","unix","sigval"],"kind":"struct"},"6:4602:12117":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_tp"],"kind":"struct"},"1:8108:2115":{"crate_id":1,"path":["std","io","SeekFrom"],"kind":"enum"},"1:3165:25894":{"crate_id":1,"path":["std","io","stdio","StderrRaw"],"kind":"struct"},"5:7097:2082":{"crate_id":5,"path":["alloc","ffi","c_str","NulError"],"kind":"struct"},"17:13168:19036":{"crate_id":17,"path":["object","pe","ImageDynamicRelocationTable"],"kind":"struct"},"17:8339:15165":{"crate_id":17,"path":["object","common","RelocationEncoding"],"kind":"enum"},"6:1684:9727":{"crate_id":6,"path":["libc","unix","linux_like","arpreq_old"],"kind":"struct"},"17:9488:15239":{"crate_id":17,"path":["object","read","elf","segment","ElfSegment"],"kind":"struct"},"1:11060:2374":{"crate_id":1,"path":["std","sys","unix","time","inner","Instant"],"kind":"struct"},"2:3638:1984":{"crate_id":2,"path":["core","array","iter","IntoIter"],"kind":"struct"},"16:5203:14039":{"crate_id":16,"path":["gimli","endianity","LittleEndian"],"kind":"struct"},"17:13039:18997":{"crate_id":17,"path":["object","pe","ImageThunkData32"],"kind":"struct"},"17:11617:18102":{"crate_id":17,"path":["object","macho","SegmentCommand32"],"kind":"struct"},"6:6385:9651":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statfs64"],"kind":"struct"},"2:21634:26903":{"crate_id":2,"path":["core","num","dec2flt","number","Number"],"kind":"struct"},"1:3276:2160":{"crate_id":1,"path":["std","io","stdio","StderrLock"],"kind":"struct"},"1:9059:216":{"crate_id":1,"path":["std","sync","rwlock","RwLockWriteGuard"],"kind":"struct"},"2:52326:2492":{"crate_id":2,"path":["core","core_arch","simd","u8x4"],"kind":"struct"},"2:47708:7957":{"crate_id":2,"path":["core","iter","adapters","map_while","MapWhile"],"kind":"struct"},"6:1606:9721":{"crate_id":6,"path":["libc","unix","linux_like","Dl_info"],"kind":"struct"},"2:7477:7950":{"crate_id":2,"path":["core","iter","traits","marker","TrustedStep"],"kind":"trait"},"5:5704:69":{"crate_id":5,"path":["alloc","sync","Arc"],"kind":"struct"},"2:1756:8048":{"crate_id":2,"path":["core","ptr","metadata","DynMetadata"],"kind":"struct"},"2:3171:7738":{"crate_id":2,"path":["core","ops","try_trait","Residual"],"kind":"trait"},"17:9526:15238":{"crate_id":17,"path":["object","read","elf","section","ElfSectionIterator"],"kind":"struct"},"9:896:13790":{"crate_id":9,"path":["miniz_oxide","MZStatus"],"kind":"enum"},"18:582:7784":{"crate_id":18,"path":["memchr","memmem","twoway","Reverse"],"kind":"struct"},"6:6434:13178":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_xmmreg"],"kind":"struct"},"6:4747:12134":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_setup"],"kind":"struct"},"1:8231:2236":{"crate_id":1,"path":["std","os","unix","net","ancillary","SocketAncillary"],"kind":"struct"},"13:108:32333":{"crate_id":13,"path":["std_detect","detect","arch","x86","Feature"],"kind":"enum"},"2:50746:7661":{"crate_id":2,"path":["core","str","iter","SplitTerminator"],"kind":"struct"},"12:1518:13993":{"crate_id":12,"path":["hashbrown","rustc_entry","RustcEntry"],"kind":"enum"},"13:0:1730":{"crate_id":13,"path":["std_detect"],"kind":"module"},"16:5761:15008":{"crate_id":16,"path":["gimli","read","cfi","UnwindTable"],"kind":"struct"},"12:1832:1982":{"crate_id":12,"path":["hashbrown","set","Iter"],"kind":"struct"},"1:8789:1982":{"crate_id":1,"path":["std","sync","mpsc","Iter"],"kind":"struct"},"17:9328:15219":{"crate_id":17,"path":["object","read","coff","section","CoffSegment"],"kind":"struct"},"18:699:19204":{"crate_id":18,"path":["memchr","memmem","FinderBuilder"],"kind":"struct"},"2:49842:73":{"crate_id":2,"path":["core","fmt","Arguments"],"kind":"struct"},"1:11843:730":{"crate_id":1,"path":["std","i64"],"kind":"primitive"},"2:21693:26937":{"crate_id":2,"path":["core","num","flt2dec","decoder","Decoded"],"kind":"struct"},"2:2805:8005":{"crate_id":2,"path":["core","ops","arith","DivAssign"],"kind":"trait"},"16:2411:14077":{"crate_id":16,"path":["gimli","common","DebugArangesOffset"],"kind":"struct"},"1:11831:1028":{"crate_id":1,"path":["std","pointer"],"kind":"primitive"},"1:11839:631":{"crate_id":1,"path":["std","f64"],"kind":"primitive"},"9:0:1733":{"crate_id":9,"path":["miniz_oxide"],"kind":"module"},"2:8567:86":{"crate_id":2,"path":["core","sync","atomic","AtomicPtr"],"kind":"struct"},"2:53541:2463":{"crate_id":2,"path":["core","core_arch","simd","i16x16"],"kind":"struct"},"6:4700:983":{"crate_id":6,"path":["libc","unix","linux_like","linux","option"],"kind":"struct"},"6:4736:12133":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_alg"],"kind":"struct"},"1:11826:367":{"crate_id":1,"path":["std","bool"],"kind":"primitive"},"2:21475:27168":{"crate_id":2,"path":["core","num","bignum","Big32x40"],"kind":"struct"},"2:2506:235":{"crate_id":2,"path":["core","convert","TryInto"],"kind":"trait"},"17:11684:18110":{"crate_id":17,"path":["object","macho","Section64"],"kind":"struct"},"17:11014:15514":{"crate_id":17,"path":["object","elf","SectionHeader32"],"kind":"struct"},"17:11536:15345":{"crate_id":17,"path":["object","macho","FatArch32"],"kind":"struct"},"17:8561:15145":{"crate_id":17,"path":["object","endian","U32Bytes"],"kind":"struct"},"9:622:13812":{"crate_id":9,"path":["miniz_oxide","deflate","core","TDEFLFlush"],"kind":"enum"},"6:6991:13557":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","align","clone_args"],"kind":"struct"},"17:9577:15243":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbolTable"],"kind":"struct"},"9:505:13973":{"crate_id":9,"path":["miniz_oxide","inflate","stream","InflateState"],"kind":"struct"},"6:4608:12118":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_j1939"],"kind":"struct"},"17:13221:19047":{"crate_id":17,"path":["object","pe","ImageEpilogueDynamicRelocationHeader"],"kind":"struct"},"6:5520:12749":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","glob64_t"],"kind":"struct"},"2:48641:26866":{"crate_id":2,"path":["core","net","parser","AddrKind"],"kind":"enum"},"17:12781:18515":{"crate_id":17,"path":["object","pe","AnonObjectHeaderV2"],"kind":"struct"},"1:2026:182":{"crate_id":1,"path":["std","ffi","os_str","OsString"],"kind":"struct"},"1:7934:20909":{"crate_id":1,"path":["std","io","error","SimpleMessage"],"kind":"struct"},"1:7454:15158":{"crate_id":1,"path":["std","backtrace_rs","symbolize","Symbol"],"kind":"struct"},"6:6332:13175":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stack_t"],"kind":"struct"},"6:1744:9733":{"crate_id":6,"path":["libc","unix","linux_like","sigevent"],"kind":"struct"},"1:8843:2369":{"crate_id":1,"path":["std","sync","mpsc","TryRecvError"],"kind":"enum"},"16:4721:14740":{"crate_id":16,"path":["gimli","constants","DwIdx"],"kind":"struct"},"2:49768:127":{"crate_id":2,"path":["core","fmt","Error"],"kind":"struct"},"2:51427:8173":{"crate_id":2,"path":["core","str","IsWhitespace"],"kind":"struct"},"1:11113:23591":{"crate_id":1,"path":["std","sys_common","once","futex","CompletionGuard"],"kind":"struct"},"9:800:13924":{"crate_id":9,"path":["miniz_oxide","inflate","core","LocalVars"],"kind":"struct"},"17:10774:15194":{"crate_id":17,"path":["object","read","Export"],"kind":"struct"},"6:526:8807":{"crate_id":6,"path":["libc","unix","ipv6_mreq"],"kind":"struct"},"17:9021:15178":{"crate_id":17,"path":["object","read","any","ComdatSectionIterator"],"kind":"struct"},"6:6564:13187":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user_fpregs_struct"],"kind":"struct"},"2:1548:2127":{"crate_id":2,"path":["core","mem","maybe_uninit","write_slice_cloned","Guard"],"kind":"struct"},"2:47355:7770":{"crate_id":2,"path":["core","char","EscapeUnicodeState"],"kind":"enum"},"2:47394:7652":{"crate_id":2,"path":["core","char","EscapeDebug"],"kind":"struct"},"2:2748:7559":{"crate_id":2,"path":["core","marker","Tuple"],"kind":"trait"},"1:2029:181":{"crate_id":1,"path":["std","ffi","os_str","OsStr"],"kind":"struct"},"2:54583:2456":{"crate_id":2,"path":["core","core_arch","simd","f64x8"],"kind":"struct"},"6:4537:12109":{"crate_id":6,"path":["libc","unix","linux_like","linux","genlmsghdr"],"kind":"struct"},"5:288:1878":{"crate_id":5,"path":["alloc","boxed","Box"],"kind":"struct"},"1:5516:2330":{"crate_id":1,"path":["std","process","exit"],"kind":"function"},"16:6034:15016":{"crate_id":16,"path":["gimli","read","dwarf","Unit"],"kind":"struct"},"5:1404:1985":{"crate_id":5,"path":["alloc","collections","btree","map","Keys"],"kind":"struct"},"17:9250:15205":{"crate_id":17,"path":["object","read","archive","ArchiveFile"],"kind":"struct"},"17:10221:15383":{"crate_id":17,"path":["object","read","pe","file","PeComdatIterator"],"kind":"struct"},"5:4034:2127":{"crate_id":5,"path":["alloc","collections","vec_deque","into_iter","try_fold","Guard"],"kind":"struct"},"16:2557:14083":{"crate_id":16,"path":["gimli","common","DebugLocListsIndex"],"kind":"struct"},"16:6704:15047":{"crate_id":16,"path":["gimli","read","loclists","LocationLists"],"kind":"struct"},"2:21276:2415":{"crate_id":2,"path":["core","core_simd","vector","Simd"],"kind":"struct"},"1:11799:1968":{"crate_id":1,"path":["std","backtrace_rs","types","BytesOrWideString"],"kind":"enum"},"2:49001:91":{"crate_id":2,"path":["core","sync","atomic","AtomicU8"],"kind":"struct"},"5:6644:30962":{"crate_id":5,"path":["alloc","vec","retain_mut","BackshiftOnDrop"],"kind":"struct"},"2:50696:2141":{"crate_id":2,"path":["core","str","iter","Split"],"kind":"struct"},"17:1021:15226":{"crate_id":17,"path":["object","read","coff","relocation","CoffRelocationIterator"],"kind":"struct"},"2:30171:26993":{"crate_id":2,"path":["core","ptr","alignment","AlignmentEnum64"],"kind":"enum"},"6:1506:9709":{"crate_id":6,"path":["libc","unix","linux_like","in_addr"],"kind":"struct"},"6:4693:12129":{"crate_id":6,"path":["libc","unix","linux_like","linux","in6_ifreq"],"kind":"struct"},"17:11106:15584":{"crate_id":17,"path":["object","elf","Sym64"],"kind":"struct"},"16:7942:15088":{"crate_id":16,"path":["gimli","read","unit","EntriesTreeIter"],"kind":"struct"},"17:12926:18630":{"crate_id":17,"path":["object","pe","ImageAuxSymbolWeak"],"kind":"struct"},"6:1674:9726":{"crate_id":6,"path":["libc","unix","linux_like","arpreq"],"kind":"struct"},"1:4431:2249":{"crate_id":1,"path":["std","os","unix","process","CommandExt"],"kind":"trait"},"2:20708:2222":{"crate_id":2,"path":["core","core_simd","lane_count","sealed","Sealed"],"kind":"trait"},"2:51291:7678":{"crate_id":2,"path":["core","str","pattern","TwoWaySearcher"],"kind":"struct"},"2:22157:174":{"crate_id":2,"path":["core","num","nonzero","NonZeroU64"],"kind":"struct"},"1:7840:118":{"crate_id":1,"path":["std","fs","DirBuilder"],"kind":"struct"},"6:4575:12114":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_vm"],"kind":"struct"},"2:57551:243":{"crate_id":2,"path":["core","core_simd","fmt","fmt","Wrapper"],"kind":"struct"},"16:7890:15085":{"crate_id":16,"path":["gimli","read","unit","EntriesCursor"],"kind":"struct"},"1:1615:1988":{"crate_id":1,"path":["std","collections","hash","set","DrainFilter"],"kind":"struct"},"2:2591:127":{"crate_id":2,"path":["core","error","Error"],"kind":"trait"},"17:10455:15382":{"crate_id":17,"path":["object","read","pe","resource","ResourceDirectory"],"kind":"struct"},"16:2261:14043":{"crate_id":16,"path":["gimli","common","Format"],"kind":"enum"},"17:13536:19131":{"crate_id":17,"path":["object","pe","ImageSeparateDebugHeader"],"kind":"struct"},"2:47081:27221":{"crate_id":2,"path":["core","any","tags","MaybeSizedValue"],"kind":"struct"},"2:47587:2137":{"crate_id":2,"path":["core","iter","adapters","chain","Chain"],"kind":"struct"},"1:10804:2326":{"crate_id":1,"path":["std","sys","unix","process","process_common","Stdio"],"kind":"enum"},"2:4148:7592":{"crate_id":2,"path":["core","cell","Cell"],"kind":"struct"},"16:2367:14075":{"crate_id":16,"path":["gimli","common","DebugAddrBase"],"kind":"struct"},"12:1138:2000":{"crate_id":12,"path":["hashbrown","map","OccupiedError"],"kind":"struct"},"2:47791:2138":{"crate_id":2,"path":["core","iter","adapters","take","Take"],"kind":"struct"},"5:3127:2003":{"crate_id":5,"path":["alloc","collections","btree","set","Intersection"],"kind":"struct"},"12:725:1985":{"crate_id":12,"path":["hashbrown","map","Keys"],"kind":"struct"},"2:38669:7784":{"crate_id":2,"path":["core","cmp","Reverse"],"kind":"struct"},"17:11528:15347":{"crate_id":17,"path":["object","macho","FatHeader"],"kind":"struct"},"17:10403:15193":{"crate_id":17,"path":["object","read","pe","import","Import"],"kind":"enum"},"17:12176:18215":{"crate_id":17,"path":["object","macho","DyldInfoCommand"],"kind":"struct"},"1:8415:2306":{"crate_id":1,"path":["std","path","PrefixComponent"],"kind":"struct"},"17:13059:19001":{"crate_id":17,"path":["object","pe","ImageTlsDirectory32"],"kind":"struct"},"2:9153:27920":{"crate_id":2,"path":["core","fmt","fmt","BorrowedPlaceholder"],"kind":"struct"},"1:6347:20886":{"crate_id":1,"path":["std","sync","mutex","fmt","LockedPlaceholder"],"kind":"struct"},"16:5558:15002":{"crate_id":16,"path":["gimli","read","cfi","CieOrFde"],"kind":"enum"},"1:8830:2368":{"crate_id":1,"path":["std","sync","mpsc","RecvError"],"kind":"struct"},"12:646:1983":{"crate_id":12,"path":["hashbrown","map","IterMut"],"kind":"struct"},"17:12060:18194":{"crate_id":17,"path":["object","macho","RpathCommand"],"kind":"struct"},"17:12087:18196":{"crate_id":17,"path":["object","macho","FilesetEntryCommand"],"kind":"struct"},"18:707:7639":{"crate_id":18,"path":["memchr","memmem","Searcher"],"kind":"struct"},"6:7276:12272":{"crate_id":6,"path":["libc","unix","linux_like","linux","canfd_frame"],"kind":"struct"},"1:10178:2324":{"crate_id":1,"path":["std","sys","unix","process","process_common","Command"],"kind":"struct"},"16:6743:15049":{"crate_id":16,"path":["gimli","read","loclists","RawLocListEntry"],"kind":"enum"},"1:1114:1999":{"crate_id":1,"path":["std","collections","hash","map","VacantEntry"],"kind":"struct"},"16:7929:15087":{"crate_id":16,"path":["gimli","read","unit","EntriesTreeNode"],"kind":"struct"},"17:12980:18992":{"crate_id":17,"path":["object","pe","ImageArchiveMemberHeader"],"kind":"struct"},"1:3162:25893":{"crate_id":1,"path":["std","io","stdio","StdoutRaw"],"kind":"struct"},"2:14:1850":{"crate_id":2,"path":["core","write"],"kind":"macro"},"2:9000:111":{"crate_id":2,"path":["core","fmt","Debug"],"kind":"trait"},"2:53305:2483":{"crate_id":2,"path":["core","core_arch","simd","u16x16"],"kind":"struct"},"2:21119:2424":{"crate_id":2,"path":["core","core_simd","ord","SimdPartialOrd"],"kind":"trait"},"2:2767:2411":{"crate_id":2,"path":["core","ops","arith","Sub"],"kind":"trait"},"16:7543:15076":{"crate_id":16,"path":["gimli","read","unit","DebugInfo"],"kind":"struct"},"6:4222:12078":{"crate_id":6,"path":["libc","unix","linux_like","linux","msginfo"],"kind":"struct"},"5:7251:7707":{"crate_id":5,"path":["alloc","vec","splice","Splice"],"kind":"struct"},"17:11893:18182":{"crate_id":17,"path":["object","macho","SymtabCommand"],"kind":"struct"},"2:2682:222":{"crate_id":2,"path":["core","marker","StructuralEq"],"kind":"trait"},"17:13557:19132":{"crate_id":17,"path":["object","pe","NonPagedDebugInfo"],"kind":"struct"},"5:6970:195":{"crate_id":5,"path":["alloc","collections","btree","set","Range"],"kind":"struct"},"17:9764:15291":{"crate_id":17,"path":["object","read","elf","version","VerdauxIterator"],"kind":"struct"},"17:9778:15264":{"crate_id":17,"path":["object","read","elf","version","VerneedIterator"],"kind":"struct"},"2:50485:7612":{"crate_id":2,"path":["core","slice","iter","Chunks"],"kind":"struct"},"2:53124:27499":{"crate_id":2,"path":["core","core_arch","simd","m32x4"],"kind":"struct"},"16:6719:32654":{"crate_id":16,"path":["gimli","read","loclists","LocListsFormat"],"kind":"enum"},"5:7179:7685":{"crate_id":5,"path":["alloc","string","FromUtf16Error"],"kind":"struct"},"14:221:14010":{"crate_id":14,"path":["rustc_demangle","SizeLimitExhausted"],"kind":"struct"},"17:10420:15381":{"crate_id":17,"path":["object","read","pe","relocation","RelocationBlockIterator"],"kind":"struct"},"2:2793:2410":{"crate_id":2,"path":["core","ops","arith","AddAssign"],"kind":"trait"},"1:9054:215":{"crate_id":1,"path":["std","sync","rwlock","RwLockReadGuard"],"kind":"struct"},"17:8475:15140":{"crate_id":17,"path":["object","endian","Endianness"],"kind":"enum"},"1:10671:118":{"crate_id":1,"path":["std","sys","unix","fs","DirBuilder"],"kind":"struct"},"17:13366:19087":{"crate_id":17,"path":["object","pe","ImageArmRuntimeFunctionEntry"],"kind":"struct"},"2:8731:29471":{"crate_id":2,"path":["core","fmt","builders","PadAdapterState"],"kind":"struct"},"5:1432:1990":{"crate_id":5,"path":["alloc","collections","btree","map","IntoKeys"],"kind":"struct"},"2:52496:27449":{"crate_id":2,"path":["core","core_arch","simd","u64x1"],"kind":"struct"},"1:8797:2364":{"crate_id":1,"path":["std","sync","mpsc","TryIter"],"kind":"struct"},"1:7503:23575":{"crate_id":1,"path":["std","backtrace_rs","print","BacktraceFrameFmt"],"kind":"struct"},"5:7168:7684":{"crate_id":5,"path":["alloc","string","FromUtf8Error"],"kind":"struct"},"17:11137:15586":{"crate_id":17,"path":["object","elf","Syminfo64"],"kind":"struct"},"2:50596:7621":{"crate_id":2,"path":["core","slice","iter","RChunksExact"],"kind":"struct"},"17:10973:15401":{"crate_id":17,"path":["object","elf","FileHeader64"],"kind":"struct"},"17:12251:18268":{"crate_id":17,"path":["object","macho","EntryPointCommand"],"kind":"struct"},"12:2178:32268":{"crate_id":12,"path":["hashbrown","raw","sse2","Group"],"kind":"struct"},"18:652:33455":{"crate_id":18,"path":["memchr","memmem","x86","sse","Forward"],"kind":"struct"},"17:8951:33427":{"crate_id":17,"path":["object","read","any","SectionIteratorInternal"],"kind":"enum"},"1:5456:2326":{"crate_id":1,"path":["std","process","Stdio"],"kind":"struct"},"2:5880:7977":{"crate_id":2,"path":["core","iter","adapters","intersperse","IntersperseWith"],"kind":"struct"},"16:3854:14281":{"crate_id":16,"path":["gimli","constants","DwTag"],"kind":"struct"},"2:39825:2333":{"crate_id":2,"path":["core","convert","Infallible"],"kind":"enum"},"2:51423:8172":{"crate_id":2,"path":["core","str","CharEscapeDefault"],"kind":"struct"},"17:10854:15197":{"crate_id":17,"path":["object","read","CompressionFormat"],"kind":"enum"},"2:54682:7535":{"crate_id":2,"path":["core","core_arch","x86","__m512"],"kind":"struct"},"1:11023:2119":{"crate_id":1,"path":["std","sys","unix","time","SystemTime"],"kind":"struct"},"17:12278:18270":{"crate_id":17,"path":["object","macho","DataInCodeEntry"],"kind":"struct"},"16:2705:14089":{"crate_id":16,"path":["gimli","common","DebugRngListsIndex"],"kind":"struct"},"1:8239:2188":{"crate_id":1,"path":["std","os","unix","net","listener","Incoming"],"kind":"struct"},"17:8822:33431":{"crate_id":17,"path":["object","read","any","FileInternal"],"kind":"enum"},"1:8139:2138":{"crate_id":1,"path":["std","io","Take"],"kind":"struct"},"16:2433:14078":{"crate_id":16,"path":["gimli","common","DebugInfoOffset"],"kind":"struct"},"5:3153:2006":{"crate_id":5,"path":["alloc","collections","btree","set","Union"],"kind":"struct"},"16:4519:14706":{"crate_id":16,"path":["gimli","constants","DwLang"],"kind":"struct"},"6:4125:12070":{"crate_id":6,"path":["libc","unix","linux_like","linux","passwd"],"kind":"struct"},"17:0:1740":{"crate_id":17,"path":["object"],"kind":"module"},"1:10795:19929":{"crate_id":1,"path":["std","sys","unix","os_str","Buf"],"kind":"struct"},"16:7980:15091":{"crate_id":16,"path":["gimli","read","value","ValueType"],"kind":"enum"},"6:554:8811":{"crate_id":6,"path":["libc","unix","winsize"],"kind":"struct"},"2:9968:7617":{"crate_id":2,"path":["core","slice","iter","SplitMut"],"kind":"struct"},"1:11850:775":{"crate_id":1,"path":["std","isize"],"kind":"primitive"},"1:7788:2087":{"crate_id":1,"path":["std","fs","ReadDir"],"kind":"struct"},"1:8265:2274":{"crate_id":1,"path":["std","os","linux","process","PidFd"],"kind":"struct"},"16:7237:15057":{"crate_id":16,"path":["gimli","read","op","OperationIter"],"kind":"struct"},"2:20394:7784":{"crate_id":2,"path":["core","core_simd","swizzle","reverse","Reverse"],"kind":"struct"},"16:2320:14073":{"crate_id":16,"path":["gimli","common","Register"],"kind":"struct"},"2:3999:103":{"crate_id":2,"path":["core","asserting","Capture"],"kind":"struct"},"2:21776:27438":{"crate_id":2,"path":["core","num","fmt","Formatted"],"kind":"struct"},"1:4129:2240":{"crate_id":1,"path":["std","os","unix","net","ancillary","AncillaryData"],"kind":"enum"},"17:10310:15386":{"crate_id":17,"path":["object","read","pe","section","PeRelocationIterator"],"kind":"struct"},"2:21809:2200":{"crate_id":2,"path":["core","num","error","IntErrorKind"],"kind":"enum"},"16:5525:15000":{"crate_id":16,"path":["gimli","read","cfi","SectionBaseAddresses"],"kind":"struct"},"6:4310:12089":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_ramp_effect"],"kind":"struct"},"16:2842:14095":{"crate_id":16,"path":["gimli","common","DebugFrameOffset"],"kind":"struct"},"2:47372:1959":{"crate_id":2,"path":["core","char","EscapeDefault"],"kind":"struct"},"5:3872:1987":{"crate_id":5,"path":["alloc","collections","vec_deque","drain","Drain"],"kind":"struct"},"5:6940:2010":{"crate_id":5,"path":["alloc","collections","binary_heap","DrainSorted"],"kind":"struct"},"2:20836:2222":{"crate_id":2,"path":["core","core_simd","masks","to_bitmask","sealed","Sealed"],"kind":"trait"},"2:2772:8002":{"crate_id":2,"path":["core","ops","arith","Mul"],"kind":"trait"},"16:5949:15013":{"crate_id":16,"path":["gimli","read","cfi","CallFrameInstructionIter"],"kind":"struct"},"1:7465:20038":{"crate_id":1,"path":["std","backtrace_rs","symbolize","SymbolName"],"kind":"struct"},"2:9015:191":{"crate_id":2,"path":["core","fmt","Pointer"],"kind":"trait"},"16:4817:14764":{"crate_id":16,"path":["gimli","constants","DwLne"],"kind":"struct"},"1:11827:921":{"crate_id":1,"path":["std","never"],"kind":"primitive"},"1:4656:2275":{"crate_id":1,"path":["std","os","linux","process","ChildExt"],"kind":"trait"},"16:5374:14991":{"crate_id":16,"path":["gimli","read","addr","DebugAddr"],"kind":"struct"},"1:8176:2178":{"crate_id":1,"path":["std","net","Shutdown"],"kind":"enum"},"2:49826:8115":{"crate_id":2,"path":["core","fmt","FlagV1"],"kind":"enum"},"2:47699:7968":{"crate_id":2,"path":["core","iter","adapters","map","Map"],"kind":"struct"},"2:49756:109":{"crate_id":2,"path":["core","fmt","rt","v1","Count"],"kind":"enum"},"2:50257:27020":{"crate_id":2,"path":["core","slice","ascii","EscapeByte"],"kind":"struct"},"1:5087:188":{"crate_id":1,"path":["std","path","PathBuf"],"kind":"struct"},"5:1443:1991":{"crate_id":5,"path":["alloc","collections","btree","map","IntoValues"],"kind":"struct"},"2:52903:2466":{"crate_id":2,"path":["core","core_arch","simd","i32x4"],"kind":"struct"},"17:9433:15215":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdat"],"kind":"struct"},"2:50504:7614":{"crate_id":2,"path":["core","slice","iter","ChunksExact"],"kind":"struct"},"10:0:1734":{"crate_id":10,"path":["rustc_std_workspace_alloc"],"kind":"module"},"1:6424:2361":{"crate_id":1,"path":["std","sync","once_lock","OnceLock"],"kind":"struct"},"6:7224:12265":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_rwlockattr_t"],"kind":"struct"},"2:52394:2460":{"crate_id":2,"path":["core","core_arch","simd","i16x2"],"kind":"struct"},"1:3466:2078":{"crate_id":1,"path":["std","io","Write"],"kind":"trait"},"2:50514:7615":{"crate_id":2,"path":["core","slice","iter","ChunksExactMut"],"kind":"struct"},"17:10445:15196":{"crate_id":17,"path":["object","read","pe","relocation","Relocation"],"kind":"struct"},"12:1065:32289":{"crate_id":12,"path":["hashbrown","map","KeyOrRef"],"kind":"enum"},"2:8137:2294":{"crate_id":2,"path":["core","panic","unwind_safe","UnwindSafe"],"kind":"trait"},"2:2938:1874":{"crate_id":2,"path":["core","ops","function","FnMut"],"kind":"trait"},"5:1422:1989":{"crate_id":5,"path":["alloc","collections","btree","map","ValuesMut"],"kind":"struct"},"9:827:13888":{"crate_id":9,"path":["miniz_oxide","inflate","TINFLStatus"],"kind":"enum"},"2:48050:7947":{"crate_id":2,"path":["core","iter","sources","repeat_with","RepeatWith"],"kind":"struct"},"1:9013:19613":{"crate_id":1,"path":["std","sync","mpmc","utils","CachePadded"],"kind":"struct"},"12:659:1984":{"crate_id":12,"path":["hashbrown","map","IntoIter"],"kind":"struct"},"12:1845:1988":{"crate_id":12,"path":["hashbrown","set","DrainFilter"],"kind":"struct"},"16:4888:14787":{"crate_id":16,"path":["gimli","constants","DwMacro"],"kind":"struct"},"17:10822:15195":{"crate_id":17,"path":["object","read","RelocationTarget"],"kind":"enum"},"2:22058:175":{"crate_id":2,"path":["core","num","nonzero","NonZeroU8"],"kind":"struct"},"2:2931:1872":{"crate_id":2,"path":["core","ops","drop","Drop"],"kind":"trait"},"17:9293:15225":{"crate_id":17,"path":["object","read","coff","file","CoffFile"],"kind":"struct"},"17:8911:33428":{"crate_id":17,"path":["object","read","any","SegmentInternal"],"kind":"enum"},"1:3159:20767":{"crate_id":1,"path":["std","io","stdio","StdinRaw"],"kind":"struct"},"2:9886:2141":{"crate_id":2,"path":["core","slice","iter","Split"],"kind":"struct"},"16:4413:14648":{"crate_id":16,"path":["gimli","constants","DwVis"],"kind":"struct"},"17:11368:15817":{"crate_id":17,"path":["object","elf","GnuHashHeader"],"kind":"struct"},"2:2497:74":{"crate_id":2,"path":["core","convert","AsMut"],"kind":"trait"},"1:598:1939":{"crate_id":1,"path":["std","thread","JoinHandle"],"kind":"struct"},"1:1091:1997":{"crate_id":1,"path":["std","collections","hash","map","Entry"],"kind":"enum"},"16:7372:32610":{"crate_id":16,"path":["gimli","read","rnglists","RangeListsFormat"],"kind":"enum"},"5:3568:30979":{"crate_id":5,"path":["alloc","collections","linked_list","drop","DropGuard"],"kind":"struct"},"2:21602:26860":{"crate_id":2,"path":["core","num","dec2flt","common","BiasedFp"],"kind":"struct"},"16:4217:14596":{"crate_id":16,"path":["gimli","constants","DwForm"],"kind":"struct"},"17:13148:19013":{"crate_id":17,"path":["object","pe","ImageResourceDataEntry"],"kind":"struct"},"2:3204:7562":{"crate_id":2,"path":["core","ops","unsize","CoerceUnsized"],"kind":"trait"},"1:5703:2350":{"crate_id":1,"path":["std","sync","barrier","Barrier"],"kind":"struct"},"2:21731:26945":{"crate_id":2,"path":["core","num","flt2dec","Sign"],"kind":"enum"},"16:4749:14744":{"crate_id":16,"path":["gimli","constants","DwDefaulted"],"kind":"struct"},"2:47274:7740":{"crate_id":2,"path":["core","async_iter","from_iter","FromIter"],"kind":"struct"},"17:8991:33411":{"crate_id":17,"path":["object","read","any","ComdatIteratorInternal"],"kind":"enum"},"16:7044:32740":{"crate_id":16,"path":["gimli","read","op","OperationEvaluationResult"],"kind":"enum"},"2:11051:8130":{"crate_id":2,"path":["core","slice","SlicePattern"],"kind":"trait"},"16:7483:15073":{"crate_id":16,"path":["gimli","read","str","DebugStrOffsets"],"kind":"struct"},"1:2516:2151":{"crate_id":1,"path":["std","io","buffered","bufreader","BufReader"],"kind":"struct"},"6:4284:12085":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_replay"],"kind":"struct"},"16:4689:14732":{"crate_id":16,"path":["gimli","constants","DwDsc"],"kind":"struct"},"2:4216:204":{"crate_id":2,"path":["core","cell","RefCell"],"kind":"struct"},"6:1538:9714":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_in"],"kind":"struct"},"16:3599:14122":{"crate_id":16,"path":["gimli","constants","DwSectV2"],"kind":"struct"},"16:5447:14995":{"crate_id":16,"path":["gimli","read","cfi","EhHdrTableIter"],"kind":"struct"},"2:57168:2496":{"crate_id":2,"path":["core","core_simd","swizzle","Which"],"kind":"enum"},"16:7059:2290":{"crate_id":16,"path":["gimli","read","op","Location"],"kind":"enum"},"2:48963:84":{"crate_id":2,"path":["core","sync","atomic","AtomicI8"],"kind":"struct"},"1:3197:2161":{"crate_id":1,"path":["std","io","stdio","Stdin"],"kind":"struct"},"2:9508:27900":{"crate_id":2,"path":["core","slice","sort","merge_sort","RunVec"],"kind":"struct"},"5:1329:94":{"crate_id":5,"path":["alloc","collections","btree","map","BTreeMap"],"kind":"struct"},"6:7265:12271":{"crate_id":6,"path":["libc","unix","linux_like","linux","can_frame"],"kind":"struct"},"1:11845:1460":{"crate_id":1,"path":["std","u8"],"kind":"primitive"},"16:7659:15081":{"crate_id":16,"path":["gimli","read","unit","AttributeValue"],"kind":"enum"},"2:50714:7624":{"crate_id":2,"path":["core","str","iter","RSplit"],"kind":"struct"},"1:11840:731":{"crate_id":1,"path":["std","i8"],"kind":"primitive"},"2:12428:2038":{"crate_id":2,"path":["core","alloc","Allocator"],"kind":"trait"},"17:9382:15223":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbolTable"],"kind":"struct"},"12:1859:2004":{"crate_id":12,"path":["hashbrown","set","Difference"],"kind":"struct"},"17:11087:15583":{"crate_id":17,"path":["object","elf","Sym32"],"kind":"struct"},"1:6567:2363":{"crate_id":1,"path":["std","sync","remutex","ReentrantMutexGuard"],"kind":"struct"},"17:10108:15300":{"crate_id":17,"path":["object","read","macho","section","MachOSection"],"kind":"struct"},"1:8501:2311":{"crate_id":1,"path":["std","path","StripPrefixError"],"kind":"struct"},"2:50640:7654":{"crate_id":2,"path":["core","str","error","Utf8Error"],"kind":"struct"},"2:46826:7565":{"crate_id":2,"path":["core","ops","generator","GeneratorState"],"kind":"enum"},"2:50818:7626":{"crate_id":2,"path":["core","str","iter","RSplitN"],"kind":"struct"},"2:50242:8159":{"crate_id":2,"path":["core","slice","sort","TimSortRun"],"kind":"struct"},"17:1931:15236":{"crate_id":17,"path":["object","read","elf","relocation","ElfDynamicRelocationIterator"],"kind":"struct"},"18:531:19214":{"crate_id":18,"path":["memchr","memmem","prefilter","PrefilterState"],"kind":"struct"},"1:6024:23580":{"crate_id":1,"path":["std","sync","mpmc","list","Channel"],"kind":"struct"},"17:8796:15174":{"crate_id":17,"path":["object","read","util","StringTable"],"kind":"struct"},"17:8881:33415":{"crate_id":17,"path":["object","read","any","SegmentIteratorInternal"],"kind":"enum"},"2:48002:7943":{"crate_id":2,"path":["core","iter","sources","from_fn","FromFn"],"kind":"struct"},"16:7452:195":{"crate_id":16,"path":["gimli","read","rnglists","Range"],"kind":"struct"},"5:632:29903":{"crate_id":5,"path":["alloc","boxed","from","StringError"],"kind":"struct"},"17:10283:15357":{"crate_id":17,"path":["object","read","pe","section","PeSectionIterator"],"kind":"struct"},"2:1915:7566":{"crate_id":2,"path":["core","ptr","unique","Unique"],"kind":"struct"},"2:2783:8004":{"crate_id":2,"path":["core","ops","arith","Rem"],"kind":"trait"},"1:7856:2153":{"crate_id":1,"path":["std","io","buffered","IntoInnerError"],"kind":"struct"},"1:8735:2325":{"crate_id":1,"path":["std","process","CommandArgs"],"kind":"struct"},"2:52925:2469":{"crate_id":2,"path":["core","core_arch","simd","i64x2"],"kind":"struct"},"2:2150:578":{"crate_id":2,"path":["core","ptr","drop_in_place"],"kind":"function"},"17:11939:18186":{"crate_id":17,"path":["object","macho","DylibTableOfContents"],"kind":"struct"},"6:6548:13185":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","seccomp_notif_sizes"],"kind":"struct"},"2:2305:124":{"crate_id":2,"path":["core","cmp","Eq"],"kind":"trait"},"5:5740:8403":{"crate_id":5,"path":["alloc","sync","ArcInner"],"kind":"struct"},"2:3387:7720":{"crate_id":2,"path":["core","any","Demand"],"kind":"struct"},"16:4606:14721":{"crate_id":16,"path":["gimli","constants","DwCc"],"kind":"struct"},"5:7127:2080":{"crate_id":5,"path":["alloc","ffi","c_str","FromVecWithNulError"],"kind":"struct"},"17:11330:15802":{"crate_id":17,"path":["object","elf","NoteHeader32"],"kind":"struct"},"2:9837:1982":{"crate_id":2,"path":["core","slice","iter","Iter"],"kind":"struct"},"1:1123:2000":{"crate_id":1,"path":["std","collections","hash","map","OccupiedError"],"kind":"struct"},"12:834:1994":{"crate_id":12,"path":["hashbrown","map","RawOccupiedEntryMut"],"kind":"struct"},"16:3716:14167":{"crate_id":16,"path":["gimli","constants","DwChildren"],"kind":"struct"},"6:62:8429":{"crate_id":6,"path":["libc","unix","DIR"],"kind":"enum"},"1:7656:1964":{"crate_id":1,"path":["std","backtrace","RawFrame"],"kind":"enum"},"2:1639:7930":{"crate_id":2,"path":["core","mem","Discriminant"],"kind":"struct"},"16:6186:15025":{"crate_id":16,"path":["gimli","read","aranges","DebugAranges"],"kind":"struct"},"1:10900:23600":{"crate_id":1,"path":["std","sys","unix","process","process_inner","do_exec","Reset"],"kind":"struct"},"2:50577:7620":{"crate_id":2,"path":["core","slice","iter","RChunks"],"kind":"struct"},"1:8432:2307":{"crate_id":1,"path":["std","path","Component"],"kind":"enum"},"9:863:13789":{"crate_id":9,"path":["miniz_oxide","MZFlush"],"kind":"enum"},"17:10139:15179":{"crate_id":17,"path":["object","read","macho","symbol","SymbolTable"],"kind":"struct"},"6:4437:12101":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Sym"],"kind":"struct"},"1:8087:2170":{"crate_id":1,"path":["std","io","util","Sink"],"kind":"struct"},"2:47014:1974":{"crate_id":2,"path":["core","ops","range","Bound"],"kind":"enum"},"2:48811:2290":{"crate_id":2,"path":["core","panic","location","Location"],"kind":"struct"},"6:6534:13184":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","shmid_ds"],"kind":"struct"},"2:5659:28430":{"crate_id":2,"path":["core","iter","adapters","flatten","TrustedConstSize"],"kind":"trait"},"1:3950:2209":{"crate_id":1,"path":["std","os","unix","fs","OpenOptionsExt"],"kind":"trait"},"1:10390:2159":{"crate_id":1,"path":["std","sys","unix","stdio","Stderr"],"kind":"struct"},"16:3632:14131":{"crate_id":16,"path":["gimli","constants","DwUt"],"kind":"struct"},"12:0:1736":{"crate_id":12,"path":["hashbrown"],"kind":"module"},"1:6865:20036":{"crate_id":1,"path":["std","sys_common","backtrace","_print","DisplayBacktrace"],"kind":"struct"},"1:8225:2245":{"crate_id":1,"path":["std","os","unix","net","ancillary","AncillaryError"],"kind":"enum"},"2:50672:7647":{"crate_id":2,"path":["core","str","iter","CharIndices"],"kind":"struct"},"16:6316:15033":{"crate_id":16,"path":["gimli","read","index","UnitIndexSectionIterator"],"kind":"struct"},"2:4726:29820":{"crate_id":2,"path":["core","ffi","sealed_trait","VaArgSafe"],"kind":"trait"},"2:20407:27529":{"crate_id":2,"path":["core","core_simd","swizzle","rotate_lanes_left","Rotate"],"kind":"struct"},"2:53147:27503":{"crate_id":2,"path":["core","core_arch","simd","m64x2"],"kind":"struct"},"16:5996:15014":{"crate_id":16,"path":["gimli","read","dwarf","Dwarf"],"kind":"struct"},"17:11951:18187":{"crate_id":17,"path":["object","macho","DylibModule32"],"kind":"struct"},"1:5845:23580":{"crate_id":1,"path":["std","sync","mpmc","array","Channel"],"kind":"struct"},"2:50764:7660":{"crate_id":2,"path":["core","str","iter","RSplitTerminator"],"kind":"struct"},"2:2679:7561":{"crate_id":2,"path":["core","marker","Unsize"],"kind":"trait"},"17:9422:15216":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdatIterator"],"kind":"struct"},"6:500:8805":{"crate_id":6,"path":["libc","unix","rlimit"],"kind":"struct"},"2:2503:132":{"crate_id":2,"path":["core","convert","From"],"kind":"trait"},"2:53801:2476":{"crate_id":2,"path":["core","core_arch","simd","i8x64"],"kind":"struct"},"12:777:13988":{"crate_id":12,"path":["hashbrown","map","ConsumeAllOnDrop"],"kind":"struct"},"1:7944:2155":{"crate_id":1,"path":["std","io","error","ErrorKind"],"kind":"enum"},"9:33:13863":{"crate_id":9,"path":["miniz_oxide","deflate","buffer","LocalBuf"],"kind":"struct"},"1:11838:630":{"crate_id":1,"path":["std","f32"],"kind":"primitive"},"2:22190:171":{"crate_id":2,"path":["core","num","nonzero","NonZeroU128"],"kind":"struct"},"12:762:1988":{"crate_id":12,"path":["hashbrown","map","DrainFilter"],"kind":"struct"},"1:1608:1984":{"crate_id":1,"path":["std","collections","hash","set","IntoIter"],"kind":"struct"},"17:10546:15184":{"crate_id":17,"path":["object","read","FileKind"],"kind":"enum"},"17:8272:15163":{"crate_id":17,"path":["object","common","SymbolScope"],"kind":"enum"},"1:965:1990":{"crate_id":1,"path":["std","collections","hash","map","IntoKeys"],"kind":"struct"},"16:2282:14071":{"crate_id":16,"path":["gimli","common","Encoding"],"kind":"struct"},"1:5519:2332":{"crate_id":1,"path":["std","process","Termination"],"kind":"trait"},"1:8269:2277":{"crate_id":1,"path":["std","os","linux","raw","arch","stat"],"kind":"struct"},"12:1628:32287":{"crate_id":12,"path":["hashbrown","scopeguard","ScopeGuard"],"kind":"struct"},"2:11337:7630":{"crate_id":2,"path":["core","str","iter","SplitInclusive"],"kind":"struct"},"18:681:19202":{"crate_id":18,"path":["memchr","memmem","Finder"],"kind":"struct"},"9:592:13811":{"crate_id":9,"path":["miniz_oxide","deflate","core","CompressionStrategy"],"kind":"enum"},"2:48802:1984":{"crate_id":2,"path":["core","option","IntoIter"],"kind":"struct"},"1:4121:2239":{"crate_id":1,"path":["std","os","unix","net","ancillary","ScmCredentials"],"kind":"struct"},"5:273:30979":{"crate_id":5,"path":["alloc","boxed","thin","drop","DropGuard"],"kind":"struct"},"5:6917:1984":{"crate_id":5,"path":["alloc","collections","binary_heap","IntoIter"],"kind":"struct"},"9:382:13897":{"crate_id":9,"path":["miniz_oxide","inflate","core","DecompressorOxide"],"kind":"struct"},"5:1212:1997":{"crate_id":5,"path":["alloc","collections","btree","map","entry","Entry"],"kind":"enum"},"6:5533:12750":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","msghdr"],"kind":"struct"},"17:10207:15372":{"crate_id":17,"path":["object","read","pe","file","PeFile"],"kind":"struct"},"6:4820:12141":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_can_addr"],"kind":"union"},"15:214:14023":{"crate_id":15,"path":["addr2line","RangeAttributes"],"kind":"struct"},"1:4345:2237":{"crate_id":1,"path":["std","os","unix","net","stream","UnixStream"],"kind":"struct"},"2:21124:2447":{"crate_id":2,"path":["core","core_simd","ord","SimdOrd"],"kind":"trait"},"2:8562:79":{"crate_id":2,"path":["core","sync","atomic","AtomicBool"],"kind":"struct"},"17:8774:15142":{"crate_id":17,"path":["object","read","util","ByteString"],"kind":"struct"},"16:7956:15089":{"crate_id":16,"path":["gimli","read","unit","DebugTypes"],"kind":"struct"},"9:188:13842":{"crate_id":9,"path":["miniz_oxide","deflate","core","HuffmanOxide"],"kind":"struct"},"12:815:1992":{"crate_id":12,"path":["hashbrown","map","RawEntryBuilderMut"],"kind":"struct"},"1:11835:1442":{"crate_id":1,"path":["std","tuple"],"kind":"primitive"},"2:50960:7655":{"crate_id":2,"path":["core","str","iter","LinesAny"],"kind":"struct"},"5:7140:2081":{"crate_id":5,"path":["alloc","ffi","c_str","IntoStringError"],"kind":"struct"},"1:7592:1934":{"crate_id":1,"path":["std","thread","ThreadId"],"kind":"struct"},"6:5743:12766":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_seccomp"],"kind":"struct"},"16:6059:32751":{"crate_id":16,"path":["gimli","read","dwarf","RangeIterInner"],"kind":"enum"},"2:4287:7748":{"crate_id":2,"path":["core","cell","BorrowRef"],"kind":"struct"},"6:4499:2204":{"crate_id":6,"path":["libc","unix","linux_like","linux","ucred"],"kind":"struct"},"5:6932:1987":{"crate_id":5,"path":["alloc","collections","binary_heap","Drain"],"kind":"struct"},"17:9751:15263":{"crate_id":17,"path":["object","read","elf","version","VerdefIterator"],"kind":"struct"},"1:10911:23599":{"crate_id":1,"path":["std","sys","unix","process","process_inner","posix_spawn","PosixSpawnFileActions"],"kind":"struct"},"2:39874:7980":{"crate_id":2,"path":["core","marker","PhantomPinned"],"kind":"struct"},"2:20716:2422":{"crate_id":2,"path":["core","core_simd","lane_count","SupportedLaneCount"],"kind":"trait"},"17:10394:15389":{"crate_id":17,"path":["object","read","pe","import","ImportThunkList"],"kind":"struct"},"2:20591:2427":{"crate_id":2,"path":["core","core_simd","elements","float","SimdFloat"],"kind":"trait"},"16:5433:14994":{"crate_id":16,"path":["gimli","read","cfi","ParsedEhFrameHdr"],"kind":"struct"},"17:10245:15385":{"crate_id":17,"path":["object","read","pe","file","PeComdatSectionIterator"],"kind":"struct"},"2:3930:2127":{"crate_id":2,"path":["core","array","Guard"],"kind":"struct"},"2:29931:2016":{"crate_id":2,"path":["core","mem","manually_drop","ManuallyDrop"],"kind":"struct"},"16:5596:15003":{"crate_id":16,"path":["gimli","read","cfi","Augmentation"],"kind":"struct"},"17:10296:15356":{"crate_id":17,"path":["object","read","pe","section","PeSection"],"kind":"struct"},"17:3249:15325":{"crate_id":17,"path":["object","read","macho","relocation","MachORelocationIterator"],"kind":"struct"},"17:13007:18994":{"crate_id":17,"path":["object","pe","ImageExportDirectory"],"kind":"struct"},"17:11774:18174":{"crate_id":17,"path":["object","macho","SubClientCommand"],"kind":"struct"},"1:484:20911":{"crate_id":1,"path":["std","thread","local","fast","Key"],"kind":"struct"},"1:3319:2148":{"crate_id":1,"path":["std","io","stdio","IsTerminal"],"kind":"trait"},"5:5724:2348":{"crate_id":5,"path":["alloc","sync","Weak"],"kind":"struct"},"1:8247:2246":{"crate_id":1,"path":["std","os","unix","ucred","UCred"],"kind":"struct"},"17:10257:15359":{"crate_id":17,"path":["object","read","pe","section","PeSegmentIterator"],"kind":"struct"},"12:2053:1997":{"crate_id":12,"path":["hashbrown","set","Entry"],"kind":"enum"},"1:7577:20558":{"crate_id":1,"path":["std","thread","local","fast","DtorState"],"kind":"enum"},"17:13203:19040":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation64V2"],"kind":"struct"},"1:3484:2114":{"crate_id":1,"path":["std","io","Seek"],"kind":"trait"},"2:48870:207":{"crate_id":2,"path":["core","result","Result"],"kind":"enum"},"2:5492:7956":{"crate_id":2,"path":["core","iter","adapters","flatten","Flatten"],"kind":"struct"},"17:9071:33429":{"crate_id":17,"path":["object","read","any","SymbolTableInternal"],"kind":"enum"},"17:13580:19139":{"crate_id":17,"path":["object","pe","ImportObjectHeader"],"kind":"struct"},"6:6458:13180":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user_regs_struct"],"kind":"struct"},"9:586:13824":{"crate_id":9,"path":["miniz_oxide","deflate","core","SymFreq"],"kind":"struct"},"12:1840:1987":{"crate_id":12,"path":["hashbrown","set","Drain"],"kind":"struct"},"2:50586:7623":{"crate_id":2,"path":["core","slice","iter","RChunksMut"],"kind":"struct"},"2:52616:2450":{"crate_id":2,"path":["core","core_arch","simd","f32x2"],"kind":"struct"},"1:973:1992":{"crate_id":1,"path":["std","collections","hash","map","RawEntryBuilderMut"],"kind":"struct"},"2:50666:7648":{"crate_id":2,"path":["core","str","iter","Chars"],"kind":"struct"},"5:7080:102":{"crate_id":5,"path":["alloc","ffi","c_str","CString"],"kind":"struct"},"5:2873:7554":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Owned"],"kind":"enum"},"11:44:13978":{"crate_id":11,"path":["adler","Adler32"],"kind":"struct"},"1:8324:2283":{"crate_id":1,"path":["std","panic","BacktraceStyle"],"kind":"enum"},"17:10121:15301":{"crate_id":17,"path":["object","read","macho","section","MachOSectionInternal"],"kind":"struct"},"7:0:1503":{"crate_id":7,"path":["unwind"],"kind":"module"},"16:7211:15056":{"crate_id":16,"path":["gimli","read","op","Expression"],"kind":"struct"},"2:52557:2461":{"crate_id":2,"path":["core","core_arch","simd","i16x4"],"kind":"struct"},"17:13114:19007":{"crate_id":17,"path":["object","pe","ImageResourceDirectory"],"kind":"struct"},"17:11034:15515":{"crate_id":17,"path":["object","elf","SectionHeader64"],"kind":"struct"},"17:10062:15305":{"crate_id":17,"path":["object","read","macho","segment","MachOSegmentIterator"],"kind":"struct"},"5:3943:1983":{"crate_id":5,"path":["alloc","collections","vec_deque","iter_mut","IterMut"],"kind":"struct"},"1:681:1965":{"crate_id":1,"path":["std","backtrace","BacktraceSymbol"],"kind":"struct"},"1:4581:2210":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt"],"kind":"trait"},"2:49486:7580":{"crate_id":2,"path":["core","fmt","num","UpperHex"],"kind":"struct"},"6:4447:12102":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Phdr"],"kind":"struct"},"2:54797:7540":{"crate_id":2,"path":["core","core_arch","x86","cpuid","CpuidResult"],"kind":"struct"},"2:47647:7964":{"crate_id":2,"path":["core","iter","adapters","filter_map","FilterMap"],"kind":"struct"},"1:6601:214":{"crate_id":1,"path":["std","sync","rwlock","RwLock"],"kind":"struct"},"2:11302:8182":{"crate_id":2,"path":["core","str","iter","MatchesInternal"],"kind":"struct"},"6:494:8804":{"crate_id":6,"path":["libc","unix","timespec"],"kind":"struct"},"2:7045:7952":{"crate_id":2,"path":["core","iter","traits","accum","Sum"],"kind":"trait"},"5:5138:7596":{"crate_id":5,"path":["alloc","slice","Concat"],"kind":"trait"},"6:6287:9650":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statfs"],"kind":"struct"},"2:48844:2291":{"crate_id":2,"path":["core","panic","panic_info","PanicInfo"],"kind":"struct"},"2:51219:7674":{"crate_id":2,"path":["core","str","pattern","CharPredicateSearcher"],"kind":"struct"},"8:0:1732":{"crate_id":8,"path":["cfg_if"],"kind":"module"},"2:3177:7737":{"crate_id":2,"path":["core","ops","try_trait","NeverShortCircuit"],"kind":"struct"},"14:202:7687":{"crate_id":14,"path":["rustc_demangle","v0","ParseError"],"kind":"enum"},"1:6636:20886":{"crate_id":1,"path":["std","sync","rwlock","fmt","LockedPlaceholder"],"kind":"struct"},"2:54720:7537":{"crate_id":2,"path":["core","core_arch","x86","__m128bh"],"kind":"struct"},"6:4755:12135":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_user_dev"],"kind":"struct"},"17:13192:19039":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation32V2"],"kind":"struct"},"16:6676:15045":{"crate_id":16,"path":["gimli","read","loclists","DebugLoc"],"kind":"struct"},"18:671:19201":{"crate_id":18,"path":["memchr","memmem","FindRevIter"],"kind":"struct"},"6:1511:9710":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreq"],"kind":"struct"},"6:1660:9725":{"crate_id":6,"path":["libc","unix","linux_like","in6_rtmsg"],"kind":"struct"},"1:7939:20885":{"crate_id":1,"path":["std","io","error","Custom"],"kind":"struct"},"1:7672:2002":{"crate_id":1,"path":["std","collections","hash","map","DefaultHasher"],"kind":"struct"},"2:51192:7673":{"crate_id":2,"path":["core","str","pattern","CharSliceSearcher"],"kind":"struct"},"2:9011:7579":{"crate_id":2,"path":["core","fmt","LowerHex"],"kind":"trait"},"2:4371:1942":{"crate_id":2,"path":["core","cell","UnsafeCell"],"kind":"struct"},"16:6528:15040":{"crate_id":16,"path":["gimli","read","line","LineProgramHeader"],"kind":"struct"},"16:6593:15042":{"crate_id":16,"path":["gimli","read","line","CompleteLineProgram"],"kind":"struct"},"2:50018:7804":{"crate_id":2,"path":["core","hash","sip","SipHasher"],"kind":"struct"},"2:9277:7803":{"crate_id":2,"path":["core","hash","BuildHasherDefault"],"kind":"struct"},"5:6002:2501":{"crate_id":5,"path":["alloc","task","Wake"],"kind":"trait"},"18:609:33466":{"crate_id":18,"path":["memchr","memmem","twoway","Suffix"],"kind":"struct"},"6:5751:12767":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ptrace_syscall_info"],"kind":"struct"},"1:8291:2224":{"crate_id":1,"path":["std","os","fd","owned","BorrowedFd"],"kind":"struct"},"6:652:8864":{"crate_id":6,"path":["libc","unix","linux_like","timezone"],"kind":"enum"},"1:359:1953":{"crate_id":1,"path":["std","thread","scoped","ScopedJoinHandle"],"kind":"struct"},"16:4327:14634":{"crate_id":16,"path":["gimli","constants","DwDs"],"kind":"struct"},"2:49343:2349":{"crate_id":2,"path":["core","sync","exclusive","Exclusive"],"kind":"struct"},"2:8139:2292":{"crate_id":2,"path":["core","panic","unwind_safe","AssertUnwindSafe"],"kind":"struct"},"2:4022:7558":{"crate_id":2,"path":["core","async_iter","async_iter","AsyncIterator"],"kind":"trait"},"1:11851:1513":{"crate_id":1,"path":["std","usize"],"kind":"primitive"},"5:6502:7711":{"crate_id":5,"path":["alloc","vec","in_place_drop","InPlaceDrop"],"kind":"struct"},"6:4377:12097":{"crate_id":6,"path":["libc","unix","linux_like","linux","dl_phdr_info"],"kind":"struct"},"5:6999:1984":{"crate_id":5,"path":["alloc","collections","linked_list","IntoIter"],"kind":"struct"},"17:12550:18406":{"crate_id":17,"path":["object","pe","ImageVxdHeader"],"kind":"struct"},"16:5628:15004":{"crate_id":16,"path":["gimli","read","cfi","CommonInformationEntry"],"kind":"struct"},"5:6908:2039":{"crate_id":5,"path":["alloc","alloc","Global"],"kind":"struct"},"2:49267:85":{"crate_id":2,"path":["core","sync","atomic","AtomicIsize"],"kind":"struct"},"14:31:14001":{"crate_id":14,"path":["rustc_demangle","v0","Demangle"],"kind":"struct"},"6:4550:12111":{"crate_id":6,"path":["libc","unix","linux_like","linux","arpd_request"],"kind":"struct"},"6:6489:13181":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user"],"kind":"struct"},"1:979:1993":{"crate_id":1,"path":["std","collections","hash","map","RawEntryMut"],"kind":"enum"},"1:3805:2191":{"crate_id":1,"path":["std","net","udp","UdpSocket"],"kind":"struct"},"6:4356:12094":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_ff_upload"],"kind":"struct"},"1:3956:2210":{"crate_id":1,"path":["std","os","unix","fs","MetadataExt"],"kind":"trait"},"16:6252:15029":{"crate_id":16,"path":["gimli","read","aranges","ArangeEntry"],"kind":"struct"},"2:21670:26893":{"crate_id":2,"path":["core","num","dec2flt","FloatErrorKind"],"kind":"enum"},"2:49729:130":{"crate_id":2,"path":["core","fmt","rt","v1","FormatSpec"],"kind":"struct"},"6:4162:12073":{"crate_id":6,"path":["libc","unix","linux_like","linux","signalfd_siginfo"],"kind":"struct"},"16:5963:191":{"crate_id":16,"path":["gimli","read","cfi","Pointer"],"kind":"enum"},"2:51304:7662":{"crate_id":2,"path":["core","str","lossy","Utf8Chunk"],"kind":"struct"},"17:8212:15161":{"crate_id":17,"path":["object","common","ComdatKind"],"kind":"enum"},"2:2500:147":{"crate_id":2,"path":["core","convert","Into"],"kind":"trait"},"2:49153:89":{"crate_id":2,"path":["core","sync","atomic","AtomicU32"],"kind":"struct"},"16:7298:15062":{"crate_id":16,"path":["gimli","read","pubtypes","PubTypesEntry"],"kind":"struct"},"6:7218:12264":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_mutexattr_t"],"kind":"struct"},"2:51435:8175":{"crate_id":2,"path":["core","str","IsNotEmpty"],"kind":"struct"},"16:7166:15055":{"crate_id":16,"path":["gimli","read","op","EvaluationResult"],"kind":"enum"},"6:4249:12081":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_id"],"kind":"struct"},"1:944:1987":{"crate_id":1,"path":["std","collections","hash","map","Drain"],"kind":"struct"},"1:11292:20368":{"crate_id":1,"path":["std","sys_common","net","LookupHost"],"kind":"struct"},"6:4234:12079":{"crate_id":6,"path":["libc","unix","linux_like","linux","sembuf"],"kind":"struct"},"1:4700:2226":{"crate_id":1,"path":["std","os","fd","raw","IntoRawFd"],"kind":"trait"},"16:4921:14796":{"crate_id":16,"path":["gimli","constants","DwRle"],"kind":"struct"},"2:46970:198":{"crate_id":2,"path":["core","ops","range","RangeInclusive"],"kind":"struct"},"5:5549:229":{"crate_id":5,"path":["alloc","string","ToString"],"kind":"trait"},"2:52456:2481":{"crate_id":2,"path":["core","core_arch","simd","u16x4"],"kind":"struct"},"17:8981:15177":{"crate_id":17,"path":["object","read","any","ComdatIterator"],"kind":"struct"},"17:10075:15303":{"crate_id":17,"path":["object","read","macho","segment","MachOSegment"],"kind":"struct"},"2:47415:7774":{"crate_id":2,"path":["core","char","CaseMappingIter"],"kind":"enum"},"6:1713:2233":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_un"],"kind":"struct"},"6:5592:12753":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_pktinfo"],"kind":"struct"},"17:9712:15290":{"crate_id":17,"path":["object","read","elf","version","VersionIndex"],"kind":"struct"},"2:3165:134":{"crate_id":2,"path":["core","ops","try_trait","FromResidual"],"kind":"trait"},"16:0:1739":{"crate_id":16,"path":["gimli"],"kind":"module"},"17:9671:15255":{"crate_id":17,"path":["object","read","elf","note","NoteIterator"],"kind":"struct"},"2:2458:7794":{"crate_id":2,"path":["core","convert","num","FloatToInt"],"kind":"trait"},"2:47088:7749":{"crate_id":2,"path":["core","any","tags","Ref"],"kind":"struct"},"2:11739:111":{"crate_id":2,"path":["core","str","lossy","Debug"],"kind":"struct"},"17:11748:18172":{"crate_id":17,"path":["object","macho","DylibCommand"],"kind":"struct"},"2:20439:27847":{"crate_id":2,"path":["core","core_simd","swizzle","interleave","Lo"],"kind":"struct"},"5:3093:2004":{"crate_id":5,"path":["alloc","collections","btree","set","Difference"],"kind":"struct"},"6:7299:13746":{"crate_id":6,"path":["libc","unix","align","in6_addr"],"kind":"struct"},"17:11315:15801":{"crate_id":17,"path":["object","elf","Vernaux"],"kind":"struct"},"12:1872:2006":{"crate_id":12,"path":["hashbrown","set","Union"],"kind":"struct"},"2:22091:172":{"crate_id":2,"path":["core","num","nonzero","NonZeroU16"],"kind":"struct"},"2:49465:7570":{"crate_id":2,"path":["core","fmt","num","Binary"],"kind":"struct"},"2:50039:2305":{"crate_id":2,"path":["core","hash","sip","State"],"kind":"struct"},"16:6200:15026":{"crate_id":16,"path":["gimli","read","aranges","ArangeHeaderIter"],"kind":"struct"},"6:4663:12125":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlmsgerr"],"kind":"struct"},"16:6668:32715":{"crate_id":16,"path":["gimli","read","lists","ListsHeader"],"kind":"struct"},"6:6510:13182":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","mcontext_t"],"kind":"struct"},"2:48058:7949":{"crate_id":2,"path":["core","iter","sources","successors","Successors"],"kind":"struct"},"1:8474:2308":{"crate_id":1,"path":["std","path","Components"],"kind":"struct"},"18:660:19200":{"crate_id":18,"path":["memchr","memmem","FindIter"],"kind":"struct"},"2:6654:7941":{"crate_id":2,"path":["core","iter","range","Step"],"kind":"trait"},"2:51113:7668":{"crate_id":2,"path":["core","str","pattern","MultiCharEqSearcher"],"kind":"struct"},"2:51419:8171":{"crate_id":2,"path":["core","str","CharEscapeUnicode"],"kind":"struct"},"18:755:19208":{"crate_id":18,"path":["memchr","memmem","SearcherRev"],"kind":"struct"},"16:7435:15071":{"crate_id":16,"path":["gimli","read","rnglists","RawRange"],"kind":"struct"},"6:1580:9718":{"crate_id":6,"path":["libc","unix","linux_like","fd_set"],"kind":"struct"},"17:12638:18462":{"crate_id":17,"path":["object","pe","ImageOptionalHeader32"],"kind":"struct"},"1:5941:203":{"crate_id":1,"path":["std","sync","mpmc","counter","Receiver"],"kind":"struct"},"16:6567:15041":{"crate_id":16,"path":["gimli","read","line","IncompleteLineProgram"],"kind":"struct"},"2:47609:7955":{"crate_id":2,"path":["core","iter","adapters","copied","Copied"],"kind":"struct"},"1:11829:1476":{"crate_id":1,"path":["std","unit"],"kind":"primitive"},"16:5703:15006":{"crate_id":16,"path":["gimli","read","cfi","FrameDescriptionEntry"],"kind":"struct"},"16:7497:15074":{"crate_id":16,"path":["gimli","read","str","DebugLineStr"],"kind":"struct"},"2:2826:8009":{"crate_id":2,"path":["core","ops","bit","BitOr"],"kind":"trait"},"17:11576:18001":{"crate_id":17,"path":["object","macho","MachHeader64"],"kind":"struct"},"1:10984:2328":{"crate_id":1,"path":["std","sys","unix","process","process_inner","ExitStatusError"],"kind":"struct"},"2:46948:199":{"crate_id":2,"path":["core","ops","range","RangeTo"],"kind":"struct"},"16:5793:15010":{"crate_id":16,"path":["gimli","read","cfi","UnwindTableRow"],"kind":"struct"},"2:6472:7953":{"crate_id":2,"path":["core","iter","adapters","zip","zip"],"kind":"function"},"12:98:32286":{"crate_id":12,"path":["hashbrown","raw","Bucket"],"kind":"struct"},"18:564:19216":{"crate_id":18,"path":["memchr","memmem","rarebytes","RareNeedleBytes"],"kind":"struct"},"6:1649:9724":{"crate_id":6,"path":["libc","unix","linux_like","ifaddrs"],"kind":"struct"},"2:51281:7677":{"crate_id":2,"path":["core","str","pattern","EmptyNeedle"],"kind":"struct"},"17:12860:18562":{"crate_id":17,"path":["object","pe","ImageSymbolEx"],"kind":"struct"},"6:562:8812":{"crate_id":6,"path":["libc","unix","linger"],"kind":"struct"},"6:506:8806":{"crate_id":6,"path":["libc","unix","rusage"],"kind":"struct"},"2:3150:8020":{"crate_id":2,"path":["core","ops","range","OneSidedRange"],"kind":"trait"},"2:46904:195":{"crate_id":2,"path":["core","ops","range","Range"],"kind":"struct"},"16:5460:14996":{"crate_id":16,"path":["gimli","read","cfi","EhHdrTable"],"kind":"struct"},"5:2142:31393":{"crate_id":5,"path":["alloc","collections","btree","navigate","LazyLeafHandle"],"kind":"enum"},"9:111:13806":{"crate_id":9,"path":["miniz_oxide","deflate","core","CompressorOxide"],"kind":"struct"},"2:20860:2222":{"crate_id":2,"path":["core","core_simd","masks","sealed","Sealed"],"kind":"trait"},"2:54641:7532":{"crate_id":2,"path":["core","core_arch","x86","__m256"],"kind":"struct"},"2:47600:7954":{"crate_id":2,"path":["core","iter","adapters","cloned","Cloned"],"kind":"struct"},"6:6362:9677":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stat64"],"kind":"struct"},"5:4817:2127":{"crate_id":5,"path":["alloc","rc","from_iter_exact","Guard"],"kind":"struct"},"2:2336:179":{"crate_id":2,"path":["core","cmp","Ord"],"kind":"trait"},"1:5779:2360":{"crate_id":1,"path":["std","sync","lazy_lock","LazyLock"],"kind":"struct"},"2:49790:71":{"crate_id":2,"path":["core","fmt","ArgumentV1"],"kind":"struct"},"2:7200:156":{"crate_id":2,"path":["core","iter","traits","iterator","Iterator"],"kind":"trait"},"1:6384:1969":{"crate_id":1,"path":["std","sync","once","Once"],"kind":"struct"},"16:7825:15082":{"crate_id":16,"path":["gimli","read","unit","Attribute"],"kind":"struct"},"2:3087:2037":{"crate_id":2,"path":["core","ops","range","RangeBounds"],"kind":"trait"},"18:491:33452":{"crate_id":18,"path":["memchr","cow","Imp"],"kind":"struct"},"12:985:1997":{"crate_id":12,"path":["hashbrown","map","Entry"],"kind":"enum"},"2:47638:7963":{"crate_id":2,"path":["core","iter","adapters","filter","Filter"],"kind":"struct"},"1:9972:20371":{"crate_id":1,"path":["std","sys","unix","os","Env"],"kind":"struct"},"16:3566:14113":{"crate_id":16,"path":["gimli","constants","DwSect"],"kind":"struct"},"6:6440:13179":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_fpstate"],"kind":"struct"},"16:6017:15015":{"crate_id":16,"path":["gimli","read","dwarf","DwarfPackage"],"kind":"struct"},"2:10079:7625":{"crate_id":2,"path":["core","slice","iter","RSplitMut"],"kind":"struct"},"5:2094:31384":{"crate_id":5,"path":["alloc","collections","btree","navigate","LeafRange"],"kind":"struct"},"18:0:1741":{"crate_id":18,"path":["memchr"],"kind":"module"},"17:1771:15242":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbolIterator"],"kind":"struct"},"2:29993:67":{"crate_id":2,"path":["core","ptr","alignment","Alignment"],"kind":"struct"},"1:11432:7541":{"crate_id":1,"path":["std","alloc","System"],"kind":"struct"},"6:4408:12099":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Ehdr"],"kind":"struct"},"12:810:1989":{"crate_id":12,"path":["hashbrown","map","ValuesMut"],"kind":"struct"},"6:5453:12689":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","statx"],"kind":"struct"},"1:10326:23487":{"crate_id":1,"path":["std","sys","unix","stack_overflow","Handler"],"kind":"struct"},"17:8494:14039":{"crate_id":17,"path":["object","endian","LittleEndian"],"kind":"struct"},"17:9183:15182":{"crate_id":17,"path":["object","read","any","SectionRelocationIterator"],"kind":"struct"},"2:20867:2425":{"crate_id":2,"path":["core","core_simd","masks","MaskElement"],"kind":"trait"},"2:53651:2452":{"crate_id":2,"path":["core","core_arch","simd","f32x8"],"kind":"struct"},"2:12181:7800":{"crate_id":2,"path":["core","future","poll_fn","PollFn"],"kind":"struct"},"6:4645:12123":{"crate_id":6,"path":["libc","unix","linux_like","linux","seccomp_data"],"kind":"struct"},"1:10651:2090":{"crate_id":1,"path":["std","sys","unix","fs","FileTimes"],"kind":"struct"},"18:599:33450":{"crate_id":18,"path":["memchr","memmem","twoway","Shift"],"kind":"enum"},"2:12347:202":{"crate_id":2,"path":["core","task","ready","Ready"],"kind":"struct"},"17:13214:19046":{"crate_id":17,"path":["object","pe","ImagePrologueDynamicRelocationHeader"],"kind":"struct"},"17:11639:18103":{"crate_id":17,"path":["object","macho","SegmentCommand64"],"kind":"struct"},"1:10616:19927":{"crate_id":1,"path":["std","sys","unix","fs","FileAttr"],"kind":"struct"},"16:2793:14093":{"crate_id":16,"path":["gimli","common","DebugTypesOffset"],"kind":"struct"},"1:5710:2351":{"crate_id":1,"path":["std","sync","barrier","BarrierWaitResult"],"kind":"struct"},"1:545:1930":{"crate_id":1,"path":["std","thread","PanicGuard"],"kind":"struct"},"2:2762:2409":{"crate_id":2,"path":["core","ops","arith","Add"],"kind":"trait"},"1:4113:2238":{"crate_id":1,"path":["std","os","unix","net","ancillary","ScmRights"],"kind":"struct"},"2:2935:1873":{"crate_id":2,"path":["core","ops","function","Fn"],"kind":"trait"},"17:967:15222":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbolIterator"],"kind":"struct"},"2:22421:2199":{"crate_id":2,"path":["core","num","nonzero","NonZeroIsize"],"kind":"struct"},"1:7613:1936":{"crate_id":1,"path":["std","thread","Thread"],"kind":"struct"},"6:4459:12103":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Phdr"],"kind":"struct"},"2:12305:106":{"crate_id":2,"path":["core","task","wake","Context"],"kind":"struct"},"1:8165:2188":{"crate_id":1,"path":["std","net","tcp","Incoming"],"kind":"struct"},"16:6865:32354":{"crate_id":16,"path":["gimli","read","lookup","PubStuffParser"],"kind":"struct"},"17:9947:15344":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandVariant"],"kind":"enum"},"5:5615:1987":{"crate_id":5,"path":["alloc","string","Drain"],"kind":"struct"},"2:21288:27527":{"crate_id":2,"path":["core","core_simd","vector","splat","Splat"],"kind":"struct"},"16:6330:15034":{"crate_id":16,"path":["gimli","read","index","UnitIndexSection"],"kind":"struct"},"16:4144:14547":{"crate_id":16,"path":["gimli","constants","DwAt"],"kind":"struct"},"2:51098:7665":{"crate_id":2,"path":["core","str","pattern","CharSearcher"],"kind":"struct"},"5:1413:1986":{"crate_id":5,"path":["alloc","collections","btree","map","Values"],"kind":"struct"},"1:2248:128":{"crate_id":1,"path":["std","fs","File"],"kind":"struct"},"16:3010:14100":{"crate_id":16,"path":["gimli","common","DwarfFileType"],"kind":"enum"},"6:587:8816":{"crate_id":6,"path":["libc","unix","servent"],"kind":"struct"},"2:11538:7636":{"crate_id":2,"path":["core","str","pattern","DoubleEndedSearcher"],"kind":"trait"},"2:7049:7951":{"crate_id":2,"path":["core","iter","traits","accum","Product"],"kind":"trait"},"17:10374:15355":{"crate_id":17,"path":["object","read","pe","import","ImportTable"],"kind":"struct"},"6:4708:12130":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_nl"],"kind":"struct"},"1:3235:2163":{"crate_id":1,"path":["std","io","stdio","Stdout"],"kind":"struct"},"2:47558:7603":{"crate_id":2,"path":["core","iter","adapters","array_chunks","ArrayChunks"],"kind":"struct"},"18:96:19186":{"crate_id":18,"path":["memchr","memchr","iter","Memchr2"],"kind":"struct"},"2:10006:7631":{"crate_id":2,"path":["core","slice","iter","SplitInclusiveMut"],"kind":"struct"},"2:21384:2421":{"crate_id":2,"path":["core","core_simd","vector","SimdElement"],"kind":"trait"},"17:9539:15237":{"crate_id":17,"path":["object","read","elf","section","ElfSection"],"kind":"struct"},"14:40:15402":{"crate_id":14,"path":["rustc_demangle","v0","Ident"],"kind":"struct"},"16:3402:14104":{"crate_id":16,"path":["gimli","arch","X86"],"kind":"struct"},"2:50564:7604":{"crate_id":2,"path":["core","slice","iter","ArrayChunksMut"],"kind":"struct"},"16:5780:15009":{"crate_id":16,"path":["gimli","read","cfi","RegisterRuleIter"],"kind":"struct"},"2:9493:23594":{"crate_id":2,"path":["core","slice","sort","merge_sort","BufGuard"],"kind":"struct"},"5:4064:2127":{"crate_id":5,"path":["alloc","collections","vec_deque","into_iter","try_rfold","Guard"],"kind":"struct"},"2:48700:2184":{"crate_id":2,"path":["core","net","socket_addr","SocketAddrV4"],"kind":"struct"},"16:6829:32711":{"crate_id":16,"path":["gimli","read","lookup","LookupEntryIter"],"kind":"struct"},"6:6312:13173":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","flock64"],"kind":"struct"},"1:7256:25177":{"crate_id":1,"path":["std","panicking","Hook"],"kind":"enum"},"16:4441:14652":{"crate_id":16,"path":["gimli","constants","DwVirtuality"],"kind":"struct"},"2:53463:2475":{"crate_id":2,"path":["core","core_arch","simd","i8x32"],"kind":"struct"},"2:8138:2293":{"crate_id":2,"path":["core","panic","unwind_safe","RefUnwindSafe"],"kind":"trait"},"6:6419:13176":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","pthread_attr_t"],"kind":"struct"},"2:2228:97":{"crate_id":2,"path":["core","borrow","Borrow"],"kind":"trait"},"14:165:14002":{"crate_id":14,"path":["rustc_demangle","DemangleStyle"],"kind":"enum"},"17:2916:15302":{"crate_id":17,"path":["object","read","macho","section","MachOSectionIterator"],"kind":"struct"},"1:7641:1961":{"crate_id":1,"path":["std","backtrace","BacktraceStatus"],"kind":"enum"},"16:5541:15001":{"crate_id":16,"path":["gimli","read","cfi","CfiEntriesIter"],"kind":"struct"},"6:7230:12266":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_condattr_t"],"kind":"struct"},"2:47283:7777":{"crate_id":2,"path":["core","char","convert","ParseCharError"],"kind":"struct"},"1:6116:23577":{"crate_id":1,"path":["std","sync","mpmc","waker","SyncWaker"],"kind":"struct"},"16:7329:15065":{"crate_id":16,"path":["gimli","read","rnglists","DebugRanges"],"kind":"struct"},"17:11559:17998":{"crate_id":17,"path":["object","macho","MachHeader32"],"kind":"struct"},"17:12964:18964":{"crate_id":17,"path":["object","pe","ImageLinenumber"],"kind":"struct"},"16:6052:15017":{"crate_id":16,"path":["gimli","read","dwarf","RangeIter"],"kind":"struct"},"2:52681:2417":{"crate_id":2,"path":["core","core_arch","simd","u8x16"],"kind":"struct"},"5:961:30979":{"crate_id":5,"path":["alloc","collections","binary_heap","drop","DropGuard"],"kind":"struct"},"16:6654:15044":{"crate_id":16,"path":["gimli","read","line","FileEntryFormat"],"kind":"struct"},"17:13126:19010":{"crate_id":17,"path":["object","pe","ImageResourceDirectoryEntry"],"kind":"struct"},"6:6985:13556":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","align","max_align_t"],"kind":"struct"},"5:4234:30978":{"crate_id":5,"path":["alloc","collections","vec_deque","drop","Dropper"],"kind":"struct"},"17:11841:18179":{"crate_id":17,"path":["object","macho","ThreadCommand"],"kind":"struct"},"2:11518:7637":{"crate_id":2,"path":["core","str","pattern","Pattern"],"kind":"trait"},"2:51411:8168":{"crate_id":2,"path":["core","str","LinesAnyMap"],"kind":"struct"},"2:49191:83":{"crate_id":2,"path":["core","sync","atomic","AtomicI64"],"kind":"struct"},"2:58878:27516":{"crate_id":2,"path":["core","core_simd","vector","ptr","SimdConstPtr"],"kind":"struct"},"2:4106:7755":{"crate_id":2,"path":["core","cell","once","OnceCell"],"kind":"struct"},"6:4726:12132":{"crate_id":6,"path":["libc","unix","linux_like","linux","dirent64"],"kind":"struct"},"1:3491:2136":{"crate_id":1,"path":["std","io","BufRead"],"kind":"trait"},"1:2401:2102":{"crate_id":1,"path":["std","fs","canonicalize"],"kind":"function"},"17:9553:15179":{"crate_id":17,"path":["object","read","elf","symbol","SymbolTable"],"kind":"struct"},"2:20869:2423":{"crate_id":2,"path":["core","core_simd","masks","Mask"],"kind":"struct"},"6:4304:12088":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_constant_effect"],"kind":"struct"},"2:9476:29730":{"crate_id":2,"path":["core","slice","sort","merge","MergeHole"],"kind":"struct"},"11:36:32263":{"crate_id":11,"path":["adler","algo","U32X4"],"kind":"struct"},"1:11184:19325":{"crate_id":1,"path":["std","sys_common","wtf8","Wtf8Buf"],"kind":"struct"},"1:11670:23255":{"crate_id":1,"path":["std","backtrace_rs","symbolize","gimli","mmap","Mmap"],"kind":"struct"},"1:8129:2137":{"crate_id":1,"path":["std","io","Chain"],"kind":"struct"},"17:13024:18995":{"crate_id":17,"path":["object","pe","ImageImportByName"],"kind":"struct"},"6:1614:9722":{"crate_id":6,"path":["libc","unix","linux_like","lconv"],"kind":"struct"},"17:13393:19090":{"crate_id":17,"path":["object","pe","ImageAlphaRuntimeFunctionEntry"],"kind":"struct"},"5:6948:29950":{"crate_id":5,"path":["alloc","collections","btree","merge_iter","Peeked"],"kind":"enum"},"5:5813:2127":{"crate_id":5,"path":["alloc","sync","from_iter_exact","Guard"],"kind":"struct"},"2:50918:7659":{"crate_id":2,"path":["core","str","iter","RMatches"],"kind":"struct"},"5:1243:1998":{"crate_id":5,"path":["alloc","collections","btree","map","entry","OccupiedEntry"],"kind":"struct"},"16:6877:15052":{"crate_id":16,"path":["gimli","read","op","DieReference"],"kind":"enum"},"16:2727:14090":{"crate_id":16,"path":["gimli","common","DebugStrOffset"],"kind":"struct"},"2:11226:8181":{"crate_id":2,"path":["core","str","iter","SplitInternal"],"kind":"struct"},"12:2198:32266":{"crate_id":12,"path":["hashbrown","raw","TableLayout"],"kind":"struct"},"14:187:14011":{"crate_id":14,"path":["rustc_demangle","SizeLimitedFmtAdapter"],"kind":"struct"},"17:11661:18109":{"crate_id":17,"path":["object","macho","Section32"],"kind":"struct"},"2:54610:7529":{"crate_id":2,"path":["core","core_arch","x86","__m128"],"kind":"struct"},"12:2080:1999":{"crate_id":12,"path":["hashbrown","set","VacantEntry"],"kind":"struct"},"2:21658:2196":{"crate_id":2,"path":["core","num","dec2flt","ParseFloatError"],"kind":"struct"},"16:5388:14992":{"crate_id":16,"path":["gimli","read","cfi","DebugFrame"],"kind":"struct"},"5:4264:2127":{"crate_id":5,"path":["alloc","collections","vec_deque","write_iter_wrapping","Guard"],"kind":"struct"},"1:11376:2191":{"crate_id":1,"path":["std","sys_common","net","UdpSocket"],"kind":"struct"},"1:11136:2336":{"crate_id":1,"path":["std","sys_common","process","CommandEnvs"],"kind":"struct"},"6:6321:13174":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","siginfo_t"],"kind":"struct"},"2:2789:8003":{"crate_id":2,"path":["core","ops","arith","Neg"],"kind":"trait"},"6:1601:9720":{"crate_id":6,"path":["libc","unix","linux_like","sched_param"],"kind":"struct"},"9:676:13799":{"crate_id":9,"path":["miniz_oxide","deflate","CompressionLevel"],"kind":"enum"},"2:51447:8189":{"crate_id":2,"path":["core","time","Nanoseconds"],"kind":"struct"},"5:2884:29927":{"crate_id":5,"path":["alloc","collections","btree","node","marker","ValMut"],"kind":"struct"},"1:10972:2327":{"crate_id":1,"path":["std","sys","unix","process","process_inner","ExitStatus"],"kind":"struct"},"6:1531:9713":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr"],"kind":"struct"},"2:52478:2485":{"crate_id":2,"path":["core","core_arch","simd","u32x2"],"kind":"struct"},"1:3641:2186":{"crate_id":1,"path":["std","net","socket_addr","ToSocketAddrs"],"kind":"trait"},"5:3680:1988":{"crate_id":5,"path":["alloc","collections","linked_list","DrainFilter"],"kind":"struct"},"5:3611:2021":{"crate_id":5,"path":["alloc","collections","linked_list","Cursor"],"kind":"struct"},"2:3189:28645":{"crate_id":2,"path":["core","ops","try_trait","NeverShortCircuitResidual"],"kind":"enum"},"2:51618:192":{"crate_id":2,"path":["core","task","poll","Poll"],"kind":"enum"},"1:1604:1982":{"crate_id":1,"path":["std","collections","hash","set","Iter"],"kind":"struct"},"6:4317:12090":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_condition_effect"],"kind":"struct"},"1:9358:2087":{"crate_id":1,"path":["std","sys","unix","fs","ReadDir"],"kind":"struct"},"17:386:15156":{"crate_id":17,"path":["object","read","any","Segment"],"kind":"struct"},"2:50864:7657":{"crate_id":2,"path":["core","str","iter","RMatchIndices"],"kind":"struct"},"1:11211:24989":{"crate_id":1,"path":["std","sys_common","wtf8","Wtf8CodePoints"],"kind":"struct"},"2:4:994":{"crate_id":2,"path":["core","panic"],"kind":"macro"},"6:5886:12798":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","semid_ds"],"kind":"struct"},"17:11271:15790":{"crate_id":17,"path":["object","elf","Verdef"],"kind":"struct"},"16:5878:14042":{"crate_id":16,"path":["gimli","read","cfi","CallFrameInstruction"],"kind":"enum"},"6:1547:9715":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_in6"],"kind":"struct"},"17:8441:15169":{"crate_id":17,"path":["object","common","SymbolFlags"],"kind":"enum"},"2:51703:7550":{"crate_id":2,"path":["core","alloc","AllocError"],"kind":"struct"},"16:5737:15007":{"crate_id":16,"path":["gimli","read","cfi","UnwindContext"],"kind":"struct"},"2:22256:170":{"crate_id":2,"path":["core","num","nonzero","NonZeroI8"],"kind":"struct"},"2:51013:7653":{"crate_id":2,"path":["core","str","iter","EscapeUnicode"],"kind":"struct"},"1:7679:2051":{"crate_id":1,"path":["std","env","VarError"],"kind":"enum"},"2:11286:8180":{"crate_id":2,"path":["core","str","iter","MatchIndicesInternal"],"kind":"struct"},"2:47688:7976":{"crate_id":2,"path":["core","iter","adapters","intersperse","Intersperse"],"kind":"struct"},"2:7470:2011":{"crate_id":2,"path":["core","iter","traits","marker","FusedIterator"],"kind":"trait"},"1:8152:2141":{"crate_id":1,"path":["std","io","Split"],"kind":"struct"},"2:48938:180":{"crate_id":2,"path":["core","sync","atomic","Ordering"],"kind":"enum"},"2:2777:8001":{"crate_id":2,"path":["core","ops","arith","Div"],"kind":"trait"},"1:6497:2357":{"crate_id":1,"path":["std","sync","poison","PoisonError"],"kind":"struct"},"16:7469:15072":{"crate_id":16,"path":["gimli","read","str","DebugStr"],"kind":"struct"},"1:10621:26433":{"crate_id":1,"path":["std","sys","unix","fs","StatxExtraFields"],"kind":"struct"},"17:12884:18626":{"crate_id":17,"path":["object","pe","ImageAuxSymbolTokenDef"],"kind":"struct"},"2:2797:2412":{"crate_id":2,"path":["core","ops","arith","SubAssign"],"kind":"trait"},"16:6690:15046":{"crate_id":16,"path":["gimli","read","loclists","DebugLocLists"],"kind":"struct"},"6:4561:12112":{"crate_id":6,"path":["libc","unix","linux_like","linux","inotify_event"],"kind":"struct"},"6:5605:12755":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_mmap_hdr"],"kind":"struct"},"17:9339:15218":{"crate_id":17,"path":["object","read","coff","section","CoffSectionIterator"],"kind":"struct"},"17:11288:15797":{"crate_id":17,"path":["object","elf","Verdaux"],"kind":"struct"},"16:7426:15070":{"crate_id":16,"path":["gimli","read","rnglists","RngListIter"],"kind":"struct"},"1:4453:2250":{"crate_id":1,"path":["std","os","unix","process","ExitStatusExt"],"kind":"trait"},"5:3488:1982":{"crate_id":5,"path":["alloc","collections","linked_list","Iter"],"kind":"struct"},"17:12265:18269":{"crate_id":17,"path":["object","macho","SourceVersionCommand"],"kind":"struct"},"1:7783:2086":{"crate_id":1,"path":["std","fs","Metadata"],"kind":"struct"},"17:10949:15400":{"crate_id":17,"path":["object","elf","FileHeader32"],"kind":"struct"},"2:52302:27467":{"crate_id":2,"path":["core","core_arch","simd","i8x2"],"kind":"struct"},"17:11547:15346":{"crate_id":17,"path":["object","macho","FatArch64"],"kind":"struct"},"2:53046:27500":{"crate_id":2,"path":["core","core_arch","simd","m8x16"],"kind":"struct"},"1:4091:24986":{"crate_id":1,"path":["std","os","unix","net","ancillary","AncillaryDataIter"],"kind":"struct"},"6:1728:9732":{"crate_id":6,"path":["libc","unix","linux_like","utsname"],"kind":"struct"},"16:2657:14087":{"crate_id":16,"path":["gimli","common","RangeListsOffset"],"kind":"struct"},"1:2589:23594":{"crate_id":1,"path":["std","io","buffered","bufwriter","flush_buf","BufGuard"],"kind":"struct"},"1:11450:20550":{"crate_id":1,"path":["std","personality","dwarf","eh","EHContext"],"kind":"struct"},"17:1903:15276":{"crate_id":17,"path":["object","read","elf","relocation","ElfRelaIterator"],"kind":"enum"},"1:4920:2282":{"crate_id":1,"path":["std","panic","always_abort"],"kind":"function"},"17:10270:15358":{"crate_id":17,"path":["object","read","pe","section","PeSegment"],"kind":"struct"},"2:54461:2453":{"crate_id":2,"path":["core","core_arch","simd","f32x16"],"kind":"struct"},"2:50002:7805":{"crate_id":2,"path":["core","hash","sip","SipHasher13"],"kind":"struct"},"16:5472:14997":{"crate_id":16,"path":["gimli","read","cfi","EhFrame"],"kind":"struct"},"16:7093:15054":{"crate_id":16,"path":["gimli","read","op","Piece"],"kind":"struct"},"6:7247:12268":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_cond_t"],"kind":"struct"},"1:3237:2164":{"crate_id":1,"path":["std","io","stdio","StdoutLock"],"kind":"struct"},"2:2457:2222":{"crate_id":2,"path":["core","convert","num","private","Sealed"],"kind":"trait"},"2:48558:2180":{"crate_id":2,"path":["core","net","ip_addr","Ipv4Addr"],"kind":"struct"},"17:9274:15207":{"crate_id":17,"path":["object","read","archive","ArchiveMember"],"kind":"struct"},"2:11533:7638":{"crate_id":2,"path":["core","str","pattern","ReverseSearcher"],"kind":"trait"},"6:5682:12759":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","regex_t"],"kind":"struct"},"5:864:2008":{"crate_id":5,"path":["alloc","collections","binary_heap","Hole"],"kind":"struct"},"17:12307:18277":{"crate_id":17,"path":["object","macho","Nlist32"],"kind":"struct"},"2:39865:8077":{"crate_id":2,"path":["core","error","Source"],"kind":"struct"},"2:58899:27497":{"crate_id":2,"path":["core","core_simd","vector","ptr","SimdMutPtr"],"kind":"struct"},"4:0:1731":{"crate_id":4,"path":["rustc_std_workspace_core"],"kind":"module"},"17:12674:18463":{"crate_id":17,"path":["object","pe","ImageRomOptionalHeader"],"kind":"struct"},"5:3098:29935":{"crate_id":5,"path":["alloc","collections","btree","set","DifferenceInner"],"kind":"enum"},"6:1568:9717":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_ll"],"kind":"struct"},"17:10385:15388":{"crate_id":17,"path":["object","read","pe","import","ImportDescriptorIterator"],"kind":"struct"},"17:8162:15160":{"crate_id":17,"path":["object","common","SectionKind"],"kind":"enum"},"17:13176:19037":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation32"],"kind":"struct"},"17:12337:15196":{"crate_id":17,"path":["object","macho","Relocation"],"kind":"struct"},"2:38652:180":{"crate_id":2,"path":["core","cmp","Ordering"],"kind":"enum"},"9:19:13862":{"crate_id":9,"path":["miniz_oxide","deflate","buffer","HashBuffers"],"kind":"struct"},"1:7015:24983":{"crate_id":1,"path":["std","sys_common","wstr","WStrUnits"],"kind":"struct"},"13:220:32334":{"crate_id":13,"path":["std_detect","detect","cache","Initializer"],"kind":"struct"},"2:54399:2488":{"crate_id":2,"path":["core","core_arch","simd","u32x16"],"kind":"struct"},"16:4357:14640":{"crate_id":16,"path":["gimli","constants","DwEnd"],"kind":"struct"},"16:7135:32761":{"crate_id":16,"path":["gimli","read","op","EvaluationWaiting"],"kind":"enum"},"1:2385:2097":{"crate_id":1,"path":["std","fs","symlink_metadata"],"kind":"function"},"1:7522:23586":{"crate_id":1,"path":["std","backtrace_rs","Bomb"],"kind":"struct"},"2:53227:2494":{"crate_id":2,"path":["core","core_arch","simd","u8x32"],"kind":"struct"},"17:11235:15677":{"crate_id":17,"path":["object","elf","Dyn32"],"kind":"struct"},"16:5664:15005":{"crate_id":16,"path":["gimli","read","cfi","PartialFrameDescriptionEntry"],"kind":"struct"},"2:48726:178":{"crate_id":2,"path":["core","option","Option"],"kind":"enum"},"17:12022:18191":{"crate_id":17,"path":["object","macho","TwolevelHint"],"kind":"struct"},"2:49738:67":{"crate_id":2,"path":["core","fmt","rt","v1","Alignment"],"kind":"enum"},"6:5564:12718":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","mallinfo"],"kind":"struct"},"2:52597:27437":{"crate_id":2,"path":["core","core_arch","simd","i64x1"],"kind":"struct"},"17:11161:15622":{"crate_id":17,"path":["object","elf","Rela32"],"kind":"struct"},"5:2876:29923":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Immut"],"kind":"struct"},"17:8055:15141":{"crate_id":17,"path":["object","common","Architecture"],"kind":"enum"},"6:4195:12075":{"crate_id":6,"path":["libc","unix","linux_like","linux","fsid_t"],"kind":"struct"},"17:11199:15625":{"crate_id":17,"path":["object","elf","ProgramHeader32"],"kind":"struct"},"2:22388:166":{"crate_id":2,"path":["core","num","nonzero","NonZeroI128"],"kind":"struct"},"2:54630:7531":{"crate_id":2,"path":["core","core_arch","x86","__m256i"],"kind":"struct"},"17:562:15158":{"crate_id":17,"path":["object","read","any","Symbol"],"kind":"struct"},"2:47578:2033":{"crate_id":2,"path":["core","iter","adapters","by_ref_sized","ByRefSized"],"kind":"struct"},"1:1626:2004":{"crate_id":1,"path":["std","collections","hash","set","Difference"],"kind":"struct"},"17:10875:15198":{"crate_id":17,"path":["object","read","CompressedFileRange"],"kind":"struct"},"17:12909:18629":{"crate_id":17,"path":["object","pe","ImageAuxSymbolFunctionBeginEnd"],"kind":"struct"},"2:22289:167":{"crate_id":2,"path":["core","num","nonzero","NonZeroI16"],"kind":"struct"},"16:6619:15043":{"crate_id":16,"path":["gimli","read","line","FileEntry"],"kind":"struct"},"17:8941:15176":{"crate_id":17,"path":["object","read","any","SectionIterator"],"kind":"struct"},"16:6790:15051":{"crate_id":16,"path":["gimli","read","loclists","LocationListEntry"],"kind":"struct"},"6:5578:12719":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","mallinfo2"],"kind":"struct"},"6:5670:12758":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ntptimeval"],"kind":"struct"},"1:4862:2272":{"crate_id":1,"path":["std","os","net","linux_ext","addr","SocketAddrExt"],"kind":"trait"},"6:1701:9729":{"crate_id":6,"path":["libc","unix","linux_like","mmsghdr"],"kind":"struct"},"1:6500:2358":{"crate_id":1,"path":["std","sync","poison","TryLockError"],"kind":"enum"},"6:4339:12092":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_rumble_effect"],"kind":"struct"},"6:4675:12127":{"crate_id":6,"path":["libc","unix","linux_like","linux","file_clone_range"],"kind":"struct"},"12:1044:13990":{"crate_id":12,"path":["hashbrown","map","EntryRef"],"kind":"enum"},"1:4871:2273":{"crate_id":1,"path":["std","os","net","linux_ext","tcp","TcpStreamExt"],"kind":"trait"},"1:4142:2241":{"crate_id":1,"path":["std","os","unix","net","ancillary","Messages"],"kind":"struct"},"6:4631:12121":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_filter"],"kind":"struct"},"17:10520:15395":{"crate_id":17,"path":["object","read","pe","rich","RichHeaderEntry"],"kind":"struct"},"9:956:13792":{"crate_id":9,"path":["miniz_oxide","DataFormat"],"kind":"enum"},"12:669:1990":{"crate_id":12,"path":["hashbrown","map","IntoKeys"],"kind":"struct"},"2:52827:2474":{"crate_id":2,"path":["core","core_arch","simd","i8x16"],"kind":"struct"},"2:4079:7754":{"crate_id":2,"path":["core","cell","lazy","LazyCell"],"kind":"struct"},"17:12730:18468":{"crate_id":17,"path":["object","pe","ImageNtHeaders64"],"kind":"struct"},"17:12225:18266":{"crate_id":17,"path":["object","macho","IdentCommand"],"kind":"struct"},"1:11834:1364":{"crate_id":1,"path":["std","str"],"kind":"primitive"},"2:53093:27510":{"crate_id":2,"path":["core","core_arch","simd","m16x8"],"kind":"struct"},"2:53381:2490":{"crate_id":2,"path":["core","core_arch","simd","u64x4"],"kind":"struct"},"2:12095:135":{"crate_id":2,"path":["core","future","future","Future"],"kind":"trait"},"17:11356:15816":{"crate_id":17,"path":["object","elf","HashHeader"],"kind":"struct"},"17:9885:15342":{"crate_id":17,"path":["object","read","macho","file","MachOComdat"],"kind":"struct"},"17:11125:15585":{"crate_id":17,"path":["object","elf","Syminfo32"],"kind":"struct"},"1:10834:2329":{"crate_id":1,"path":["std","sys","unix","process","process_common","ExitCode"],"kind":"struct"},"17:8393:15167":{"crate_id":17,"path":["object","common","SegmentFlags"],"kind":"enum"},"1:661:1960":{"crate_id":1,"path":["std","backtrace","Backtrace"],"kind":"struct"},"17:242:33430":{"crate_id":17,"path":["object","read","util","DebugByte"],"kind":"struct"},"17:8526:15144":{"crate_id":17,"path":["object","endian","U16Bytes"],"kind":"struct"},"1:3091:2171":{"crate_id":1,"path":["std","io","readbuf","BorrowedBuf"],"kind":"struct"},"1:9351:128":{"crate_id":1,"path":["std","sys","unix","fs","File"],"kind":"struct"},"6:5508:12747":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__exit_status"],"kind":"struct"},"2:48664:2192":{"crate_id":2,"path":["core","net","parser","AddrParseError"],"kind":"struct"},"6:4585:12115":{"crate_id":6,"path":["libc","unix","linux_like","linux","regmatch_t"],"kind":"struct"},"17:11997:18189":{"crate_id":17,"path":["object","macho","DylibReference"],"kind":"struct"},"2:21618:27491":{"crate_id":2,"path":["core","num","dec2flt","decimal","Decimal"],"kind":"struct"},"2:10148:7629":{"crate_id":2,"path":["core","slice","iter","SplitNMut"],"kind":"struct"},"6:4569:12113":{"crate_id":6,"path":["libc","unix","linux_like","linux","fanotify_response"],"kind":"struct"},"6:595:8817":{"crate_id":6,"path":["libc","unix","protoent"],"kind":"struct"},"6:5723:12763":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ptrace_peeksiginfo_args"],"kind":"struct"},"2:9861:1983":{"crate_id":2,"path":["core","slice","iter","IterMut"],"kind":"struct"},"6:7259:12270":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_rwlock_t"],"kind":"struct"},"16:7396:15069":{"crate_id":16,"path":["gimli","read","rnglists","RawRngListEntry"],"kind":"enum"},"16:7309:15063":{"crate_id":16,"path":["gimli","read","pubtypes","DebugPubTypes"],"kind":"struct"},"17:12934:18631":{"crate_id":17,"path":["object","pe","ImageAuxSymbolSection"],"kind":"struct"},"16:2487:14080":{"crate_id":16,"path":["gimli","common","DebugLineStrOffset"],"kind":"struct"},"17:11974:18188":{"crate_id":17,"path":["object","macho","DylibModule64"],"kind":"struct"},"1:524:23597":{"crate_id":1,"path":["std","thread","spawn_unchecked_","MaybeDangling"],"kind":"struct"},"17:11054:15575":{"crate_id":17,"path":["object","elf","CompressionHeader32"],"kind":"struct"},"2:52949:2451":{"crate_id":2,"path":["core","core_arch","simd","f32x4"],"kind":"struct"},"1:7699:20932":{"crate_id":1,"path":["std","error","private","Internal"],"kind":"struct"},"3:223:207":{"crate_id":3,"path":["compiler_builtins","float","cmp","Result"],"kind":"enum"},"6:5792:12769":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","utmpx"],"kind":"struct"},"17:9930:15319":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandData"],"kind":"struct"},"1:8753:2327":{"crate_id":1,"path":["std","process","ExitStatus"],"kind":"struct"},"17:12322:18278":{"crate_id":17,"path":["object","macho","Nlist64"],"kind":"struct"},"6:4389:12098":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Ehdr"],"kind":"struct"},"19:0:1010":{"crate_id":19,"path":["panic_unwind"],"kind":"module"},"2:48794:1983":{"crate_id":2,"path":["core","option","IterMut"],"kind":"struct"},"17:10350:15194":{"crate_id":17,"path":["object","read","pe","export","Export"],"kind":"struct"},"2:4297:7749":{"crate_id":2,"path":["core","cell","Ref"],"kind":"struct"},"17:9446:15228":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdatSectionIterator"],"kind":"struct"},"6:7289:13745":{"crate_id":6,"path":["libc","unix","linux_like","linux","non_exhaustive","open_how"],"kind":"struct"},"5:2604:29886":{"crate_id":5,"path":["alloc","collections","btree","node","Handle"],"kind":"struct"},"1:5402:2324":{"crate_id":1,"path":["std","process","Command"],"kind":"struct"},"2:47740:7971":{"crate_id":2,"path":["core","iter","adapters","scan","Scan"],"kind":"struct"},"18:113:19187":{"crate_id":18,"path":["memchr","memchr","iter","Memchr3"],"kind":"struct"},"5:5390:7710":{"crate_id":5,"path":["alloc","string","retain","SetLenOnDrop"],"kind":"struct"},"1:996:1995":{"crate_id":1,"path":["std","collections","hash","map","RawVacantEntryMut"],"kind":"struct"},"17:12836:18559":{"crate_id":17,"path":["object","pe","ImageSymbol"],"kind":"struct"},"2:2941:1875":{"crate_id":2,"path":["core","ops","function","FnOnce"],"kind":"trait"},"17:10583:15185":{"crate_id":17,"path":["object","read","ObjectKind"],"kind":"enum"},"17:13082:19003":{"crate_id":17,"path":["object","pe","ImageBoundImportDescriptor"],"kind":"struct"},"12:2069:1998":{"crate_id":12,"path":["hashbrown","set","OccupiedEntry"],"kind":"struct"},"5:6512:7712":{"crate_id":5,"path":["alloc","vec","in_place_drop","InPlaceDstBufDrop"],"kind":"struct"},"2:6561:7960":{"crate_id":2,"path":["core","iter","adapters","zip","TrustedRandomAccessNoCoerce"],"kind":"trait"},"2:1668:1066":{"crate_id":2,"path":["core","ptr"],"kind":"module"},"1:4591:23341":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt","st_atime"],"kind":"foreign_type"},"6:4216:11922":{"crate_id":6,"path":["libc","unix","linux_like","linux","if_nameindex"],"kind":"struct"},"18:624:33461":{"crate_id":18,"path":["memchr","memmem","twoway","SuffixOrdering"],"kind":"enum"},"2:51600:202":{"crate_id":2,"path":["core","future","ready","Ready"],"kind":"struct"},"1:11841:728":{"crate_id":1,"path":["std","i16"],"kind":"primitive"},"2:2342:186":{"crate_id":2,"path":["core","cmp","PartialOrd"],"kind":"trait"},"12:274:32273":{"crate_id":12,"path":["hashbrown","raw","RawIterRange"],"kind":"struct"},"1:8859:2370":{"crate_id":1,"path":["std","sync","mpsc","RecvTimeoutError"],"kind":"enum"},"17:10752:15193":{"crate_id":17,"path":["object","read","Import"],"kind":"struct"},"1:3942:2208":{"crate_id":1,"path":["std","os","unix","fs","PermissionsExt"],"kind":"trait"},"17:9857:15320":{"crate_id":17,"path":["object","read","macho","file","MachOFile"],"kind":"struct"},"2:50800:7628":{"crate_id":2,"path":["core","str","iter","SplitN"],"kind":"struct"},"16:6842:32536":{"crate_id":16,"path":["gimli","read","lookup","PubStuffHeader"],"kind":"struct"},"5:6669:30980":{"crate_id":5,"path":["alloc","vec","dedup_by","FillGapOnDrop"],"kind":"struct"},"16:4545:14708":{"crate_id":16,"path":["gimli","constants","DwAddr"],"kind":"struct"},"5:6275:1984":{"crate_id":5,"path":["alloc","vec","into_iter","IntoIter"],"kind":"struct"},"15:193:14019":{"crate_id":15,"path":["addr2line","LocationRangeUnitIter"],"kind":"struct"},"6:4639:12122":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_fprog"],"kind":"struct"},"2:52348:2480":{"crate_id":2,"path":["core","core_arch","simd","u16x2"],"kind":"struct"},"2:10041:7624":{"crate_id":2,"path":["core","slice","iter","RSplit"],"kind":"struct"},"1:8917:106":{"crate_id":1,"path":["std","sync","mpmc","context","Context"],"kind":"struct"}},"external_crates":{"10":{"name":"rustc_std_workspace_alloc","html_root_url":"https://doc.rust-lang.org/nightly/"},"17":{"name":"object","html_root_url":"https://doc.rust-lang.org/nightly/"},"14":{"name":"rustc_demangle","html_root_url":"https://doc.rust-lang.org/nightly/"},"8":{"name":"cfg_if","html_root_url":"https://docs.rs/cfg-if/"},"4":{"name":"rustc_std_workspace_core","html_root_url":"https://doc.rust-lang.org/nightly/"},"13":{"name":"std_detect","html_root_url":"https://doc.rust-lang.org/nightly/"},"3":{"name":"compiler_builtins","html_root_url":"https://doc.rust-lang.org/nightly/"},"16":{"name":"gimli","html_root_url":"https://doc.rust-lang.org/nightly/"},"9":{"name":"miniz_oxide","html_root_url":"https://doc.rust-lang.org/nightly/"},"19":{"name":"panic_unwind","html_root_url":"https://doc.rust-lang.org/nightly/"},"18":{"name":"memchr","html_root_url":"https://doc.rust-lang.org/nightly/"},"5":{"name":"alloc","html_root_url":"https://doc.rust-lang.org/nightly/"},"2":{"name":"core","html_root_url":"https://doc.rust-lang.org/nightly/"},"15":{"name":"addr2line","html_root_url":"https://doc.rust-lang.org/nightly/"},"6":{"name":"libc","html_root_url":"https://doc.rust-lang.org/nightly/"},"1":{"name":"std","html_root_url":"https://doc.rust-lang.org/nightly/"},"7":{"name":"unwind","html_root_url":"https://doc.rust-lang.org/nightly/"},"11":{"name":"adler","html_root_url":"https://docs.rs/adler/1.0.2/"},"12":{"name":"hashbrown","html_root_url":"https://doc.rust-lang.org/nightly/"}},"format_version":24}