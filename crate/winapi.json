{"root":"0:0:1627","crate_version":"0.3.9","includes_private":false,"index":{"2:13709:798":{"id":"2:13709:798","crate_id":2,"name":"len","span":null,"visibility":"public","docs":"Returns the length of `self`.\n\nThis length is in bytes, not [`char`]s or graphemes. In other words,\nit might not be what a human considers the length of the string.\n\n[`char`]: prim@char\n\n# Examples\n\nBasic usage:\n\n```\nlet len = \"foo\".len();\nassert_eq!(3, len);\n\nassert_eq!(\"∆íoo\".len(), 4); // fancy f!\nassert_eq!(\"∆íoo\".chars().count(), 3);\n```","links":{"prim@char":"1:15883:1756"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]","#[rustc_const_stable(feature = \"const_str_len\", since = \"1.39.0\")]","#[must_use]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13817:57527":{"id":"2:13817:57527","crate_id":2,"name":"trim_end_matches","span":null,"visibility":"public","docs":"Returns a string slice with all suffixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. `end` in this context means the last\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be right side, and for right-to-left languages like\nArabic or Hebrew, this will be the left side.\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_end_matches('1'), \"11foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_end_matches(char::is_numeric), \"123foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_end_matches(x), \"12foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1fooX\".trim_end_matches(|c| c == '1' || c == 'X'), \"1foo\");\n```","links":{"prim@char":"1:15883:1756","self::pattern":"2:13334:2495"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[stable(feature = \"trim_direction\", since = \"1.30.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13344:2496","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"2:13344:2496","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:13359:2498","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"5:5910:3147":{"id":"5:5910:3147","crate_id":5,"name":"Join","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["5:5912:183","5:5913:29401"],"generics":{"params":[{"name":"Separator","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:13725:51792":{"id":"2:13725:51792","crate_id":2,"name":"get_unchecked","span":null,"visibility":"public","docs":"Returns an unchecked subslice of `str`.\n\nThis is the unchecked alternative to indexing the `str`.\n\n# Safety\n\nCallers of this function are responsible that these preconditions are\nsatisfied:\n\n* The starting index must not exceed the ending index;\n* Indexes must be within bounds of the original slice;\n* Indexes must lie on UTF-8 sequence boundaries.\n\nFailing that, the returned string slice may reference invalid memory or\nviolate the invariants communicated by the `str` type.\n\n# Examples\n\n```\nlet v = \"üóª‚ààüåè\";\nunsafe {\n    assert_eq!(\"üóª\", v.get_unchecked(0..4));\n    assert_eq!(\"‚àà\", v.get_unchecked(4..7));\n    assert_eq!(\"üåè\", v.get_unchecked(7..11));\n}\n```","links":{},"attrs":["#[stable(feature = \"str_checked_slicing\", since = \"1.20.0\")]","#[rustc_const_unstable(feature = \"const_slice_index\", issue = \"none\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["i",{"kind":"generic","inner":"I"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"qualified_path","inner":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"I"},"trait":{"name":"SliceIndex","id":"2:11207:218","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}}}}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"2:11207:218","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}},"2:3274:128":{"id":"2:3274:128","crate_id":2,"name":"Error","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3275:3045","2:3277:53409","2:3278:53410","2:3279:53411"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"name":"Debug","id":"2:10565:110","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Display","id":"2:10572:120","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:3455:2441":{"id":"2:3455:2441","crate_id":2,"name":"Rem","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3457:183","2:3458:1111"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"5:6183:58169":{"id":"5:6183:58169","crate_id":5,"name":"to_uppercase","span":null,"visibility":"public","docs":"Returns the uppercase equivalent of this string slice, as a new [`String`].\n\n'Uppercase' is defined according to the terms of the Unicode Derived Core Property\n`Uppercase`.\n\nSince some characters can expand into multiple characters when changing\nthe case, this function returns a [`String`] instead of modifying the\nparameter in-place.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"hello\";\n\nassert_eq!(\"HELLO\", s.to_uppercase());\n```\n\nScripts without case are not changed:\n\n```\nlet new_year = \"ÂÜúÂéÜÊñ∞Âπ¥\";\n\nassert_eq!(new_year, new_year.to_uppercase());\n```\n\nOne character can become multiple:\n```\nlet s = \"tsch√º√ü\";\n\nassert_eq!(\"TSCH√úSS\", s.to_uppercase());\n```","links":{"`String`":"5:8472:220"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the uppercase string as a new String, \\\n                  without modifying the original\"]","#[stable(feature = \"unicode_case_mapping\", since = \"1.2.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:8472:220","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13710:51228":{"id":"2:13710:51228","crate_id":2,"name":"is_empty","span":null,"visibility":"public","docs":"Returns `true` if `self` has a length of zero bytes.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\";\nassert!(s.is_empty());\n\nlet s = \"not empty\";\nassert!(!s.is_empty());\n```","links":{},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]","#[rustc_const_stable(feature = \"const_str_is_empty\", since = \"1.39.0\")]","#[must_use]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13803:57523":{"id":"2:13803:57523","crate_id":2,"name":"trim_left","span":null,"visibility":"public","docs":"Returns a string slice with leading whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`.\n\n# Text directionality\n\nA string is a sequence of bytes. 'Left' in this context means the first\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _right_ side, not the left.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \" Hello\\tworld\\t\";\n\nassert_eq!(\"Hello\\tworld\\t\", s.trim_left());\n```\n\nDirectionality:\n\n```\nlet s = \"  English\";\nassert!(Some('E') == s.trim_left().chars().next());\n\nlet s = \"  ◊¢◊ë◊®◊ô◊™\";\nassert!(Some('◊¢') == s.trim_left().chars().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[stable(feature = \"rust1\", since = \"1.0.0\")]","#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_start`\", suggestion\n= \"trim_start\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_start`"},"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:6745:1967":{"id":"1:6745:1967","crate_id":1,"name":"AsFd","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:6746:51729"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:13733:2977":{"id":"2:13733:2977","crate_id":2,"name":"chars","span":null,"visibility":"public","docs":"Returns an iterator over the [`char`]s of a string slice.\n\nAs a string slice consists of valid UTF-8, we can iterate through a\nstring slice by [`char`]. This method returns such an iterator.\n\nIt's important to remember that [`char`] represents a Unicode Scalar\nValue, and might not match your idea of what a 'character' is. Iteration\nover grapheme clusters may be what you actually want. This functionality\nis not provided by Rust's standard library, check crates.io instead.\n\n# Examples\n\nBasic usage:\n\n```\nlet word = \"goodbye\";\n\nlet count = word.chars().count();\nassert_eq!(7, count);\n\nlet mut chars = word.chars();\n\nassert_eq!(Some('g'), chars.next());\nassert_eq!(Some('o'), chars.next());\nassert_eq!(Some('o'), chars.next());\nassert_eq!(Some('d'), chars.next());\nassert_eq!(Some('b'), chars.next());\nassert_eq!(Some('y'), chars.next());\nassert_eq!(Some('e'), chars.next());\n\nassert_eq!(None, chars.next());\n```\n\nRemember, [`char`]s might not match your intuition about characters:\n\n[`char`]: prim@char\n\n```\nlet y = \"yÃÜ\";\n\nlet mut chars = y.chars();\n\nassert_eq!(Some('y'), chars.next()); // not 'yÃÜ'\nassert_eq!(Some('\\u{0306}'), chars.next());\n\nassert_eq!(None, chars.next());\n```","links":{"prim@char":"1:15883:1756"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Chars","id":"2:49761:2941","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:8671:137":{"id":"2:8671:137","crate_id":2,"name":"FromIterator","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:8673:688"],"generics":{"params":[{"name":"A","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:13773:51827":{"id":"2:13773:51827","crate_id":2,"name":"splitn","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by a\npattern, restricted to returning at most `n` items.\n\nIf `n` substrings are returned, the last substring (the `n`th substring)\nwill contain the remainder of the string.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will not be double ended, because it is\nnot efficient to support.\n\nIf the pattern allows a reverse search, the [`rsplitn`] method can be\nused.\n\n[`rsplitn`]: str::rsplitn\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lambda\".splitn(3, ' ').collect();\nassert_eq!(v, [\"Mary\", \"had\", \"a little lambda\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".splitn(3, \"X\").collect();\nassert_eq!(v, [\"lion\", \"\", \"tigerXleopard\"]);\n\nlet v: Vec<&str> = \"abcXdef\".splitn(1, 'X').collect();\nassert_eq!(v, [\"abcXdef\"]);\n\nlet v: Vec<&str> = \"\".splitn(1, 'X').collect();\nassert_eq!(v, [\"\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".splitn(2, |c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"abc\", \"defXghi\"]);\n```","links":{"self::pattern":"2:13334:2495","prim@char":"1:15883:1756","str::rsplitn":"1:15889:1761"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["n",{"kind":"primitive","inner":"usize"}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"SplitN","id":"2:49895:2920","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13344:2496","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:5519:1956":{"id":"1:5519:1956","crate_id":1,"name":"MetadataExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:5520:51446","1:5521:51447","1:5522:50730","1:5523:51448","1:5524:2344","1:5525:2345","1:5526:51449","1:5527:1318","1:5528:51450","1:5529:51451","1:5530:51452","1:5531:51453","1:5532:51454","1:5533:51455","1:5534:51456","1:5535:51457"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:24074:2577":{"id":"2:24074:2577","crate_id":2,"name":"SimdElement","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":true,"items":["2:24075:2576"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"name":"Sealed","id":"2:24070:1972","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Copy","id":"2:3376:107","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"1:5505:1954":{"id":"1:5505:1954","crate_id":1,"name":"PermissionsExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:5506:50730","1:5507:50899","1:5508:50900"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:13747:51833":{"id":"2:13747:51833","crate_id":2,"name":"ends_with","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a suffix of this\nstring slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nBasic usage:\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.ends_with(\"anas\"));\nassert!(!bananas.ends_with(\"nana\"));\n```","links":{"self::pattern":"2:13334:2495","prim@char":"1:15883:1756"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13344:2496","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"2:13344:2496","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:13359:2498","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:6339:2029":{"id":"1:6339:2029","crate_id":1,"name":"JoinHandleExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:6340:50695","1:6341:50696"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:4752:2002":{"id":"1:4752:2002","crate_id":1,"name":"ToSocketAddrs","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:4753:2034","1:4754:51739"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:13359:2498":{"id":"2:13359:2498","crate_id":2,"name":"ReverseSearcher","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":true,"items":["2:13361:50559","2:13362:55975","2:13363:55976"],"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"name":"Searcher","id":"2:13353:2494","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:3678:2607":{"id":"2:3678:2607","crate_id":2,"name":"IndexMut","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3680:758"],"generics":{"params":[{"name":"Idx","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"Idx"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:3371:1866","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"bounds":[{"trait_bound":{"trait":{"name":"Index","id":"2:3674:2208","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"Idx"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"1:9143:1994":{"id":"1:9143:1994","crate_id":1,"name":"StdFloat","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:9144:50539","1:9145:50540","1:9146:50541","1:9147:50542","1:9148:50543","1:9149:35836","1:9150:50538"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"name":"Sealed","id":"1:10416:1972","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:3170:74":{"id":"2:3170:74","crate_id":2,"name":"AsMut","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3172:55490"],"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:3371:1866","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"bounds":[],"implementations":[]}},"2:3872:2423":{"id":"2:3872:2423","crate_id":2,"name":"CoerceUnsized","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":[],"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:3371:1866","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"bounds":[],"implementations":[]}},"2:3371:1866":{"id":"2:3371:1866","crate_id":2,"name":"Sized","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:9159:2571":{"id":"2:9159:2571","crate_id":2,"name":"TrustedLen","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":true,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"name":"Iterator","id":"2:8876:158","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:13767:57513":{"id":"2:13767:57513","crate_id":2,"name":"split_terminator","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by\ncharacters matched by a pattern.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\nEquivalent to [`split`], except that the trailing substring\nis skipped if empty.\n\n[`split`]: str::split\n\nThis method can be used for string data that is _terminated_,\nrather than _separated_ by a pattern.\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rsplit_terminator`] method can be used.\n\n[`rsplit_terminator`]: str::rsplit_terminator\n\n# Examples\n\nBasic usage:\n\n```\nlet v: Vec<&str> = \"A.B.\".split_terminator('.').collect();\nassert_eq!(v, [\"A\", \"B\"]);\n\nlet v: Vec<&str> = \"A..B..\".split_terminator(\".\").collect();\nassert_eq!(v, [\"A\", \"\", \"B\", \"\"]);\n\nlet v: Vec<&str> = \"A.B:C.D\".split_terminator(&['.', ':'][..]).collect();\nassert_eq!(v, [\"A\", \"B\", \"C\", \"D\"]);\n```","links":{"self::pattern":"2:13334:2495","str::split":"1:15889:1761","`DoubleEndedIterator`":"2:8719:121","str::rsplit_terminator":"1:15889:1761","prim@char":"1:15883:1756"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"SplitTerminator","id":"2:49841:2946","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13344:2496","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:3831:138":{"id":"2:3831:138","crate_id":2,"name":"FromResidual","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3833:691"],"generics":{"params":[{"name":"R","kind":{"type":{"bounds":[],"default":{"kind":"qualified_path","inner":{"name":"Residual","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"Self"},"trait":{"name":"Try","id":"2:3826:229","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:13718:57510":{"id":"2:13718:57510","crate_id":2,"name":"as_bytes_mut","span":null,"visibility":"public","docs":"Converts a mutable string slice to a mutable byte slice.\n\n# Safety\n\nThe caller must ensure that the content of the slice is valid UTF-8\nbefore the borrow ends and the underlying `str` is used.\n\nUse of a `str` whose contents are not valid UTF-8 is undefined behavior.\n\n# Examples\n\nBasic usage:\n\n```\nlet mut s = String::from(\"Hello\");\nlet bytes = unsafe { s.as_bytes_mut() };\n\nassert_eq!(b\"Hello\", bytes);\n```\n\nMutability:\n\n```\nlet mut s = String::from(\"üóª‚ààüåè\");\n\nunsafe {\n    let bytes = s.as_bytes_mut();\n\n    bytes[0] = 0xF0;\n    bytes[1] = 0x9F;\n    bytes[2] = 0x8D;\n    bytes[3] = 0x94;\n}\n\nassert_eq!(\"üçî‚ààüåè\", s);\n```","links":{},"attrs":["#[stable(feature = \"str_mut_extras\", since = \"1.20.0\")]","#[must_use]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"slice","inner":{"kind":"primitive","inner":"u8"}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}},"2:13735:2074":{"id":"2:13735:2074","crate_id":2,"name":"bytes","span":null,"visibility":"public","docs":"An iterator over the bytes of a string slice.\n\nAs a string slice consists of a sequence of bytes, we can iterate\nthrough a string slice by byte. This method returns such an iterator.\n\n# Examples\n\nBasic usage:\n\n```\nlet mut bytes = \"bors\".bytes();\n\nassert_eq!(Some(b'b'), bytes.next());\nassert_eq!(Some(b'o'), bytes.next());\nassert_eq!(Some(b'r'), bytes.next());\nassert_eq!(Some(b's'), bytes.next());\n\nassert_eq!(None, bytes.next());\n```","links":{},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Bytes","id":"2:49777:1906","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13714:57509":{"id":"2:13714:57509","crate_id":2,"name":"ceil_char_boundary","span":null,"visibility":"public","docs":"Finds the closest `x` not below `index` where `is_char_boundary(x)` is `true`.\n\nThis method is the natural complement to [`floor_char_boundary`]. See that method\nfor more details.\n\n[`floor_char_boundary`]: str::floor_char_boundary\n\n# Panics\n\nPanics if `index > self.len()`.\n\n# Examples\n\n```\n#![feature(round_char_boundary)]\nlet s = \"‚ù§Ô∏èüß°üíõüíöüíôüíú\";\nassert_eq!(s.len(), 26);\nassert!(!s.is_char_boundary(13));\n\nlet closest = s.ceil_char_boundary(13);\nassert_eq!(closest, 14);\nassert_eq!(&s[..closest], \"‚ù§Ô∏èüß°üíõ\");\n```","links":{"str::floor_char_boundary":"1:15889:1761"},"attrs":["#[unstable(feature = \"round_char_boundary\", issue = \"93743\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["index",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"primitive","inner":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:9536:2217":{"id":"2:9536:2217","crate_id":2,"name":"RefUnwindSafe","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":true,"is_unsafe":false,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:3481:2452":{"id":"2:3481:2452","crate_id":2,"name":"RemAssign","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3483:1112"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:3619:132":{"id":"2:3619:132","crate_id":2,"name":"FnMut","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3621:383"],"generics":{"params":[{"name":"Args","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"name":"FnOnce","id":"2:3622:133","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"Args"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:2955:179":{"id":"2:2955:179","crate_id":2,"name":"Ord","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:2956:421","2:2957:2586","2:2958:2583","2:2959:51417"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"name":"Eq","id":"2:2924:125","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"PartialOrd","id":"2:2965:186","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"Self"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:8634:2771":{"id":"2:8634:2771","crate_id":2,"name":"Sum","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:8636:54179"],"generics":{"params":[{"name":"A","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:3465:2084":{"id":"2:3465:2084","crate_id":2,"name":"AddAssign","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3467:271"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:13719:310":{"id":"2:13719:310","crate_id":2,"name":"as_ptr","span":null,"visibility":"public","docs":"Converts a string slice to a raw pointer.\n\nAs string slices are a slice of bytes, the raw pointer points to a\n[`u8`]. This pointer will be pointing to the first byte of the string\nslice.\n\nThe caller must ensure that the returned pointer is never written to.\nIf you need to mutate the contents of the string slice, use [`as_mut_ptr`].\n\n[`as_mut_ptr`]: str::as_mut_ptr\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"Hello\";\nlet ptr = s.as_ptr();\n```","links":{"str::as_mut_ptr":"1:15889:1761","`u8`":"1:15900:1770"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]","#[rustc_const_stable(feature = \"rustc_str_as_ptr\", since = \"1.32.0\")]","#[must_use]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"raw_pointer","inner":{"mutable":false,"type":{"kind":"primitive","inner":"u8"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:2886:105":{"id":"2:2886:105","crate_id":2,"name":"Clone","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:2887:414","2:2888:416"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:10582:191":{"id":"2:10582:191","crate_id":2,"name":"Pointer","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:10583:664"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:3909:2424":{"id":"2:3909:2424","crate_id":2,"name":"DispatchFromDyn","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":[],"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:13711:57507":{"id":"2:13711:57507","crate_id":2,"name":"is_char_boundary","span":null,"visibility":"public","docs":"Checks that `index`-th byte is the first byte in a UTF-8 code point\nsequence or the end of the string.\n\nThe start and end of the string (when `index == self.len()`) are\nconsidered to be boundaries.\n\nReturns `false` if `index` is greater than `self.len()`.\n\n# Examples\n\n```\nlet s = \"L√∂we ËÄÅËôé L√©opard\";\nassert!(s.is_char_boundary(0));\n// start of `ËÄÅ`\nassert!(s.is_char_boundary(6));\nassert!(s.is_char_boundary(s.len()));\n\n// second byte of `√∂`\nassert!(!s.is_char_boundary(2));\n\n// third byte of `ËÄÅ`\nassert!(!s.is_char_boundary(8));\n```","links":{},"attrs":["#[must_use]","#[stable(feature = \"is_char_boundary\", since = \"1.9.0\")]","#[rustc_const_unstable(feature = \"const_is_char_boundary\", issue = \"none\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["index",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13732:51815":{"id":"2:13732:51815","crate_id":2,"name":"split_at_mut","span":null,"visibility":"public","docs":"Divide one mutable string slice into two at an index.\n\nThe argument, `mid`, should be a byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get immutable string slices instead, see the [`split_at`] method.\n\n[`split_at`]: str::split_at\n\n# Panics\n\nPanics if `mid` is not on a UTF-8 code point boundary, or if it is\npast the end of the last code point of the string slice.\n\n# Examples\n\nBasic usage:\n\n```\nlet mut s = \"Per Martin-L√∂f\".to_string();\n{\n    let (first, last) = s.split_at_mut(3);\n    first.make_ascii_uppercase();\n    assert_eq!(\"PER\", first);\n    assert_eq!(\" Martin-L√∂f\", last);\n}\nassert_eq!(\"PER Martin-L√∂f\", s);\n```","links":{"str::split_at":"1:15889:1761"},"attrs":["#[must_use]","#[stable(feature = \"str_split_at\", since = \"1.4.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["mid",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"tuple","inner":[{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"primitive","inner":"str"}}},{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"primitive","inner":"str"}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:3486:2534":{"id":"2:3486:2534","crate_id":2,"name":"Not","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3487:183","2:3488:958"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:3622:133":{"id":"2:3622:133","crate_id":2,"name":"FnOnce","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3624:183","2:3625:384"],"generics":{"params":[{"name":"Args","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:3449:2438":{"id":"2:3449:2438","crate_id":2,"name":"Div","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3451:183","2:3452:563"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:5553:1957":{"id":"1:5553:1957","crate_id":1,"name":"FileTypeExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:5554:50520","1:5555:50521","1:5556:50522","1:5557:50523"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:3444:2434":{"id":"2:3444:2434","crate_id":2,"name":"Mul","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3446:183","2:3447:898"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:23140:2755":{"id":"2:23140:2755","crate_id":2,"name":"SimdUint","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:23141:55789","2:23142:1239","2:23143:1240","2:23144:55790","2:23145:55791","2:23146:55792","2:23147:55793","2:23148:55794","2:23149:55795","2:23150:55796"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"name":"Copy","id":"2:3376:107","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Sealed","id":"2:23153:1972","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:3745:3019":{"id":"2:3745:3019","crate_id":2,"name":"RangeBounds","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3747:56625","2:3748:56626","2:3749:51831"],"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:3371:1866","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"bounds":[],"implementations":[]}},"2:13744:51832":{"id":"2:13744:51832","crate_id":2,"name":"starts_with","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a prefix of this\nstring slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nBasic usage:\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.starts_with(\"bana\"));\nassert!(!bananas.starts_with(\"nana\"));\n```","links":{"self::pattern":"2:13334:2495","prim@char":"1:15883:1756"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13344:2496","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:4485:1900":{"id":"1:4485:1900","crate_id":1,"name":"Seek","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:4486:53786","1:4487:36246","1:4488:53788","1:4489:53787"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:13761:28176":{"id":"2:13761:28176","crate_id":2,"name":"split_inclusive","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by\ncharacters matched by a pattern. Differs from the iterator produced by\n`split` in that `split_inclusive` leaves the matched part as the\nterminator of the substring.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\\nlittle lamb\\nlittle lamb.\"\n    .split_inclusive('\\n').collect();\nassert_eq!(v, [\"Mary had a little lamb\\n\", \"little lamb\\n\", \"little lamb.\"]);\n```\n\nIf the last element of the string is matched,\nthat element will be considered the terminator of the preceding substring.\nThat substring will be the last item returned by the iterator.\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\\nlittle lamb\\nlittle lamb.\\n\"\n    .split_inclusive('\\n').collect();\nassert_eq!(v, [\"Mary had a little lamb\\n\", \"little lamb\\n\", \"little lamb.\\n\"]);\n```","links":{"self::pattern":"2:13334:2495","prim@char":"1:15883:1756"},"attrs":["#[stable(feature = \"split_inclusive\", since = \"1.51.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"SplitInclusive","id":"2:13126:2914","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13344:2496","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13814:51834":{"id":"2:13814:51834","crate_id":2,"name":"strip_suffix","span":null,"visibility":"public","docs":"Returns a string slice with the suffix removed.\n\nIf the string ends with the pattern `suffix`, returns the substring before the suffix,\nwrapped in `Some`.  Unlike `trim_end_matches`, this method removes the suffix exactly once.\n\nIf the string does not end with `suffix`, returns `None`.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nassert_eq!(\"bar:foo\".strip_suffix(\":foo\"), Some(\"bar\"));\nassert_eq!(\"bar:foo\".strip_suffix(\"bar\"), None);\nassert_eq!(\"foofoo\".strip_suffix(\"foo\"), Some(\"foo\"));\n```","links":{"self::pattern":"2:13334:2495","prim@char":"1:15883:1756"},"attrs":["#[must_use =\n\"this returns the remaining substring as a new slice, \\\n                  without modifying the original\"]","#[stable(feature = \"str_strip\", since = \"1.45.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["suffix",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:47810:178","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13344:2496","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"2:13344:2496","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:13359:2498","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"5:6163":{"id":"5:6163","crate_id":5,"name":null,"span":null,"visibility":{"restricted":{"parent":"5:5976:1354","path":"::str"}},"docs":"Methods for string slices.","links":{},"attrs":["#[cfg(not(test))]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"kind":"primitive","inner":"str"},"items":["5:6164:58166","5:6165:1910","5:6168:58167","5:6171:58168","5:6183:58169","5:6184:58170","5:6185:1932","5:6186:51031","5:6187:51032"],"negative":false,"synthetic":false,"blanket_impl":null}},"5:6165:1910":{"id":"5:6165:1910","crate_id":5,"name":"replace","span":null,"visibility":"public","docs":"Replaces all matches of a pattern with another string.\n\n`replace` creates a new [`String`], and copies the data from this string slice into it.\nWhile doing so, it attempts to find matches of a pattern. If it finds any, it\nreplaces them with the replacement string slice.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"this is old\";\n\nassert_eq!(\"this is new\", s.replace(\"old\", \"new\"));\nassert_eq!(\"than an old\", s.replace(\"is\", \"an\"));\n```\n\nWhen the pattern doesn't match:\n\n```\nlet s = \"this is old\";\nassert_eq!(s, s.replace(\"cookie monster\", \"little lamb\"));\n```","links":{"`String`":"5:8472:220"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the replaced string as a new allocation, \\\n                  without modifying the original\"]","#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["from",{"kind":"generic","inner":"P"}],["to",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:8472:220","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13344:2496","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:4492:1903":{"id":"1:4492:1903","crate_id":1,"name":"BufRead","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:4493:55349","1:4494:55350","1:4495:55352","1:4497:1902","1:4498:55351","1:4500:51822","1:4501:3494"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"name":"Read","id":"1:4410:1896","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:10813:147":{"id":"2:10813:147","crate_id":2,"name":"Hasher","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:10814:656","2:10815:1844","2:10816:53459","2:10817:53460","2:10818:53461","2:10819:53462","2:10820:53463","2:10821:53464","2:10822:53465","2:10823:53466","2:10824:53467","2:10825:53468","2:10826:53469","2:10827:53470","2:10828:53471","2:10829:1550"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:8719:121":{"id":"2:8719:121","crate_id":2,"name":"DoubleEndedIterator","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:8720:50559","2:8721:50560","2:8722:50561","2:8723:50562","2:8727:50563","2:8730:3992"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"name":"Iterator","id":"2:8876:158","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:13737:28299":{"id":"2:13737:28299","crate_id":2,"name":"split_ascii_whitespace","span":null,"visibility":"public","docs":"Splits a string slice by ASCII whitespace.\n\nThe iterator returned will return string slices that are sub-slices of\nthe original string slice, separated by any amount of ASCII whitespace.\n\nTo split by Unicode `Whitespace` instead, use [`split_whitespace`].\n\n[`split_whitespace`]: str::split_whitespace\n\n# Examples\n\nBasic usage:\n\n```\nlet mut iter = \"A few words\".split_ascii_whitespace();\n\nassert_eq!(Some(\"A\"), iter.next());\nassert_eq!(Some(\"few\"), iter.next());\nassert_eq!(Some(\"words\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nAll kinds of ASCII whitespace are considered:\n\n```\nlet mut iter = \" Mary   had\\ta little  \\n\\t lamb\".split_ascii_whitespace();\nassert_eq!(Some(\"Mary\"), iter.next());\nassert_eq!(Some(\"had\"), iter.next());\nassert_eq!(Some(\"a\"), iter.next());\nassert_eq!(Some(\"little\"), iter.next());\nassert_eq!(Some(\"lamb\"), iter.next());\n\nassert_eq!(None, iter.next());\n```","links":{"str::split_whitespace":"1:15889:1761"},"attrs":["#[must_use =\n\"this returns the split string as an iterator, \\\n                  without modifying the original\"]","#[stable(feature = \"split_ascii_whitespace\", since = \"1.34.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"SplitAsciiWhitespace","id":"2:50074:2957","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:10586:2464":{"id":"2:10586:2464","crate_id":2,"name":"UpperExp","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:10587:664"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:13785:1841":{"id":"2:13785:1841","crate_id":2,"name":"matches","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within the given string\nslice.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rmatches`] method can be used.\n\n[`rmatches`]: str::matches\n\n# Examples\n\nBasic usage:\n\n```\nlet v: Vec<&str> = \"abcXXXabcYYYabc\".matches(\"abc\").collect();\nassert_eq!(v, [\"abc\", \"abc\", \"abc\"]);\n\nlet v: Vec<&str> = \"1abc2abc3\".matches(char::is_numeric).collect();\nassert_eq!(v, [\"1\", \"2\", \"3\"]);\n```","links":{"self::pattern":"2:13334:2495","prim@char":"1:15883:1756","str::matches":"1:15889:1761","`DoubleEndedIterator`":"2:8719:121"},"attrs":["#[stable(feature = \"str_matches\", since = \"1.2.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Matches","id":"2:49995:2953","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13344:2496","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13750:3991":{"id":"2:13750:3991","crate_id":2,"name":"find","span":null,"visibility":"public","docs":"Returns the byte index of the first character of this string slice that\nmatches the pattern.\n\nReturns [`None`] if the pattern doesn't match.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nlet s = \"L√∂we ËÄÅËôé L√©opard Gepardi\";\n\nassert_eq!(s.find('L'), Some(0));\nassert_eq!(s.find('√©'), Some(14));\nassert_eq!(s.find(\"pard\"), Some(17));\n```\n\nMore complex patterns using point-free style and closures:\n\n```\nlet s = \"L√∂we ËÄÅËôé L√©opard\";\n\nassert_eq!(s.find(char::is_whitespace), Some(5));\nassert_eq!(s.find(char::is_lowercase), Some(1));\nassert_eq!(s.find(|c: char| c.is_whitespace() || c.is_lowercase()), Some(1));\nassert_eq!(s.find(|c: char| (c < 'o') && (c > 'a')), Some(4));\n```\n\nNot finding the pattern:\n\n```\nlet s = \"L√∂we ËÄÅËôé L√©opard\";\nlet x: &[_] = &['1', '2'];\n\nassert_eq!(s.find(x), None);\n```","links":{"prim@char":"1:15883:1756","self::pattern":"2:13334:2495","`None`":"2:47810:178"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:47810:178","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13344:2496","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13808:57526":{"id":"2:13808:57526","crate_id":2,"name":"trim_start_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. `start` in this context means the first\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be left side, and for right-to-left languages like\nArabic or Hebrew, this will be the right side.\n\n# Examples\n\nBasic usage:\n\n```\nassert_eq!(\"11foo1bar11\".trim_start_matches('1'), \"foo1bar11\");\nassert_eq!(\"123foo1bar123\".trim_start_matches(char::is_numeric), \"foo1bar123\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_start_matches(x), \"foo1bar12\");\n```","links":{"self::pattern":"2:13334:2495","prim@char":"1:15883:1756"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[stable(feature = \"trim_direction\", since = \"1.30.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13344:2496","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13273:2119":{"id":"2:13273:2119","crate_id":2,"name":"FromStr","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:13274:127","2:13275:53927"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:5567:1958":{"id":"1:5567:1958","crate_id":1,"name":"DirEntryExt2","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:5568:51334"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"name":"Sealed","id":"1:10416:1972","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"1:1031:2023":{"id":"1:1031:2023","crate_id":1,"name":"AsciiExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:1032:3144","1:1033:3138","1:1034:51031","1:1035:51032","1:1036:51033","1:1037:51034","1:1038:51035"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:13730:57511":{"id":"2:13730:57511","crate_id":2,"name":"slice_mut_unchecked","span":null,"visibility":"public","docs":"Creates a string slice from another string slice, bypassing safety\nchecks.\nThis is generally not recommended, use with caution! For a safe\nalternative see [`str`] and [`IndexMut`].\n\n[`IndexMut`]: crate::ops::IndexMut\n\nThis new slice goes from `begin` to `end`, including `begin` but\nexcluding `end`.\n\nTo get an immutable string slice instead, see the\n[`slice_unchecked`] method.\n\n[`slice_unchecked`]: str::slice_unchecked\n\n# Safety\n\nCallers of this function are responsible that three preconditions are\nsatisfied:\n\n* `begin` must not exceed `end`.\n* `begin` and `end` must be byte positions within the string slice.\n* `begin` and `end` must lie on UTF-8 sequence boundaries.","links":{"str::slice_unchecked":"1:15889:1761","crate::ops::IndexMut":"2:3678:2607","`str`":"1:15889:1761"},"attrs":["#[stable(feature = \"str_slice_mut\", since = \"1.5.0\")]","#[deprecated(since = \"1.29.0\", note =\n\"use `get_unchecked_mut(begin..end)` instead\")]"],"deprecation":{"since":"1.29.0","note":"use `get_unchecked_mut(begin..end)` instead"},"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["begin",{"kind":"primitive","inner":"usize"}],["end",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}},"2:23437:2624":{"id":"2:23437:2624","crate_id":2,"name":"MaskElement","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":true,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"name":"SimdElement","id":"2:24074:2577","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Sealed","id":"2:23428:1972","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:13830:51034":{"id":"2:13830:51034","crate_id":2,"name":"make_ascii_uppercase","span":null,"visibility":"public","docs":"Converts this string to its ASCII upper case equivalent in-place.\n\nASCII letters 'a' to 'z' are mapped to 'A' to 'Z',\nbut non-ASCII letters are unchanged.\n\nTo return a new uppercased value without modifying the existing one, use\n[`to_ascii_uppercase()`].\n\n[`to_ascii_uppercase()`]: #method.to_ascii_uppercase\n\n# Examples\n\n```\nlet mut s = String::from(\"Gr√º√üe, J√ºrgen ‚ù§\");\n\ns.make_ascii_uppercase();\n\nassert_eq!(\"GR√º√üE, J√ºRGEN ‚ù§\", s);\n```","links":{},"attrs":["#[stable(feature = \"ascii_methods_on_intrinsics\", since = \"1.23.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13832:57530":{"id":"2:13832:57530","crate_id":2,"name":"escape_debug","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_debug`].\n\nNote: only extended grapheme codepoints that begin the string will be\nescaped.\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"‚ù§\\n!\".escape_debug() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"‚ù§\\n!\".escape_debug());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"‚ù§\\\\n!\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"‚ù§\\n!\".escape_debug().to_string(), \"‚ù§\\\\n!\");\n```","links":{"`char::escape_debug`":"1:15883:1756"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]","#[stable(feature = \"str_escape\", since = \"1.34.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"EscapeDebug","id":"2:50090:2959","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:6841:2020":{"id":"1:6841:2020","crate_id":1,"name":"TcpStreamExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:6842:51319","1:6843:51320"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"name":"Sealed","id":"1:10416:1972","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:8876:158":{"id":"2:8876:158","crate_id":2,"name":"Iterator","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:8877:2794","2:8878:928","2:8879:54159","2:8882:54158","2:8883:500","2:8885:51788","2:8888:54160","2:8889:54161","2:8890:2696","2:8891:2680","2:8893:2560","2:8895:2690","2:8896:54162","2:8898:847","2:8901:54163","2:8908:2685","2:8910:2686","2:8913:2684","2:8914:2692","2:8915:2695","2:8917:2698","2:8919:2691","2:8922:1322","2:8923:2697","2:8924:2694","2:8928:54164","2:8931:2687","2:8932:2688","2:8933:2689","2:8935:51367","2:8936:1876","2:8938:54165","2:8941:54166","2:8943:54167","2:8953:54168","2:8968:54169","2:8970:54170","2:8974:54171","2:8983:54172","2:8986:54173","2:8988:54174","2:8991:282","2:8998:300","2:9005:3991","2:9012:54175","2:9021:54176","2:9031:1021","2:9038:54177","2:9045:2586","2:9046:2583","2:9047:2588","2:9059:2587","2:9066:2585","2:9078:2584","2:9085:2693","2:9086:54178","2:9091:2682","2:9094:2681","2:9097:2683","2:9098:2678","2:9100:54179","2:9102:54180","2:9104:421","2:9107:54181","2:9110:1004","2:9113:54182","2:9116:608","2:9119:54183","2:9122:913","2:9124:832","2:9126:797","2:9128:716","2:9130:700","2:9132:51857","2:9133:51858","2:9141:51859"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:6241:1975":{"id":"1:6241:1975","crate_id":1,"name":"ExitStatusExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:6242:54064","1:6243:36396","1:6244:54065","1:6245:54066","1:6246:54067","1:6247:54068"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"name":"Sealed","id":"1:10416:1972","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"1:5425:1989":{"id":"1:5425:1989","crate_id":1,"name":"OsStringExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:5426:50702","1:5427:3232"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"name":"Sealed","id":"1:10416:1972","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:3461:2444":{"id":"2:3461:2444","crate_id":2,"name":"Neg","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3462:183","2:3463:919"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:3537:2554":{"id":"2:3537:2554","crate_id":2,"name":"ShrAssign","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3539:1249"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:3532:2551":{"id":"2:3532:2551","crate_id":2,"name":"ShlAssign","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3534:1246"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:13776:51829":{"id":"2:13776:51829","crate_id":2,"name":"rsplitn","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by a\npattern, starting from the end of the string, restricted to returning\nat most `n` items.\n\nIf `n` substrings are returned, the last substring (the `n`th substring)\nwill contain the remainder of the string.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will not be double ended, because it is not\nefficient to support.\n\nFor splitting from the front, the [`splitn`] method can be used.\n\n[`splitn`]: str::splitn\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".rsplitn(3, ' ').collect();\nassert_eq!(v, [\"lamb\", \"little\", \"Mary had a\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".rsplitn(3, 'X').collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"lionX\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".rsplitn(2, \"::\").collect();\nassert_eq!(v, [\"leopard\", \"lion::tiger\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".rsplitn(2, |c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"ghi\", \"abc1def\"]);\n```","links":{"self::pattern":"2:13334:2495","str::splitn":"1:15889:1761","prim@char":"1:15883:1756"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["n",{"kind":"primitive","inner":"usize"}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"RSplitN","id":"2:49913:2921","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13344:2496","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"2:13344:2496","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:13359:2498","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:23770:12281":{"id":"2:23770:12281","crate_id":2,"name":"SimdOrd","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:23771:56036","2:23772:56035","2:23773:56037"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"name":"SimdPartialOrd","id":"2:23765:2579","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:8638:2770":{"id":"2:8638:2770","crate_id":2,"name":"Product","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:8640:54180"],"generics":{"params":[{"name":"A","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:6645:1968":{"id":"1:6645:1968","crate_id":1,"name":"AsRawFd","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:6646:51069"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:13764:51825":{"id":"2:13764:51825","crate_id":2,"name":"rsplit","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by\ncharacters matched by a pattern and yielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`split`] method can be used.\n\n[`split`]: str::split\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".rsplit(' ').collect();\nassert_eq!(v, [\"lamb\", \"little\", \"a\", \"had\", \"Mary\"]);\n\nlet v: Vec<&str> = \"\".rsplit('X').collect();\nassert_eq!(v, [\"\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".rsplit('X').collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"\", \"lion\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".rsplit(\"::\").collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"lion\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".rsplit(|c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"ghi\", \"def\", \"abc\"]);\n```","links":{"self::pattern":"2:13334:2495","`DoubleEndedIterator`":"2:8719:121","prim@char":"1:15883:1756","str::split":"1:15889:1761"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"RSplit","id":"2:49809:2917","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13344:2496","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"2:13344:2496","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:13359:2498","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:10565:110":{"id":"2:10565:110","crate_id":2,"name":"Debug","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:10566:664"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:13811:10775":{"id":"2:13811:10775","crate_id":2,"name":"strip_prefix","span":null,"visibility":"public","docs":"Returns a string slice with the prefix removed.\n\nIf the string starts with the pattern `prefix`, returns substring after the prefix, wrapped\nin `Some`.  Unlike `trim_start_matches`, this method removes the prefix exactly once.\n\nIf the string does not start with `prefix`, returns `None`.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nassert_eq!(\"foo:bar\".strip_prefix(\"foo:\"), Some(\"bar\"));\nassert_eq!(\"foo:bar\".strip_prefix(\"bar\"), None);\nassert_eq!(\"foofoo\".strip_prefix(\"foo\"), Some(\"foo\"));\n```","links":{"prim@char":"1:15883:1756","self::pattern":"2:13334:2495"},"attrs":["#[must_use =\n\"this returns the remaining substring as a new slice, \\\n                  without modifying the original\"]","#[stable(feature = \"str_strip\", since = \"1.45.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["prefix",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:47810:178","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13344:2496","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:3508:2539":{"id":"2:3508:2539","crate_id":2,"name":"Shl","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3510:183","2:3511:1245"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:13717:50512":{"id":"2:13717:50512","crate_id":2,"name":"as_bytes","span":null,"visibility":"public","docs":"Converts a string slice to a byte slice. To convert the byte slice back\ninto a string slice, use the [`from_utf8`] function.\n\n# Examples\n\nBasic usage:\n\n```\nlet bytes = \"bors\".as_bytes();\nassert_eq!(b\"bors\", bytes);\n```","links":{"`from_utf8`":"2:12798:3094"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]","#[rustc_const_stable(feature = \"str_as_bytes\", since = \"1.39.0\")]","#[must_use]","#[allow(unused_attributes)]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"slice","inner":{"kind":"primitive","inner":"u8"}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:23389:12262":{"id":"2:23389:12262","crate_id":2,"name":"ToBitMask","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:23390:55639","2:23391:55640","2:23392:55641"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"name":"Sealed","id":"2:23382:1972","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:10576:2460":{"id":"2:10576:2460","crate_id":2,"name":"Binary","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:10577:664"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:14059:139":{"id":"2:14059:139","crate_id":2,"name":"Future","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:14060:183","2:14061:1020"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:13741:51831":{"id":"2:13741:51831","crate_id":2,"name":"contains","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a sub-slice of\nthis string slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nBasic usage:\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.contains(\"nana\"));\nassert!(!bananas.contains(\"apples\"));\n```","links":{"self::pattern":"2:13334:2495","prim@char":"1:15883:1756"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13344:2496","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13834:2025":{"id":"2:13834:2025","crate_id":2,"name":"escape_default","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_default`].\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"‚ù§\\n!\".escape_default() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"‚ù§\\n!\".escape_default());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"\\\\u{{2764}}\\\\n!\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"‚ù§\\n!\".escape_default().to_string(), \"\\\\u{2764}\\\\n!\");\n```","links":{"`char::escape_default`":"1:15883:1756"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]","#[stable(feature = \"str_escape\", since = \"1.34.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"EscapeDefault","id":"2:50099:2026","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:6573:1992":{"id":"1:6573:1992","crate_id":1,"name":"ChildExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:6574:50933","1:6575:51347"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"name":"Sealed","id":"1:10416:1972","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:3477:2450":{"id":"2:3477:2450","crate_id":2,"name":"DivAssign","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3479:564"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:14458:142":{"id":"2:14458:142","crate_id":2,"name":"GlobalAlloc","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":true,"items":["2:14459:283","2:14460:523","2:14461:286","2:14462:1088"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:3814:3020":{"id":"2:3814:3020","crate_id":2,"name":"OneSidedRange","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":[],"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:3371:1866","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"bounds":[{"trait_bound":{"trait":{"name":"RangeBounds","id":"2:3745:3019","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:13782:57516":{"id":"2:13782:57516","crate_id":2,"name":"rsplit_once","span":null,"visibility":"public","docs":"Splits the string on the last occurrence of the specified delimiter and\nreturns prefix before delimiter and suffix after delimiter.\n\n# Examples\n\n```\nassert_eq!(\"cfg\".rsplit_once('='), None);\nassert_eq!(\"cfg=foo\".rsplit_once('='), Some((\"cfg\", \"foo\")));\nassert_eq!(\"cfg=foo=bar\".rsplit_once('='), Some((\"cfg=foo\", \"bar\")));\n```","links":{},"attrs":["#[stable(feature = \"str_split_once\", since = \"1.52.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["delimiter",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:47810:178","args":{"angle_bracketed":{"args":[{"type":{"kind":"tuple","inner":[{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}},{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13344:2496","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"2:13344:2496","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:13359:2498","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:3503:2049":{"id":"2:3503:2049","crate_id":2,"name":"BitXor","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3505:183","2:3506:362"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:13801:57522":{"id":"2:13801:57522","crate_id":2,"name":"trim_end","span":null,"visibility":"public","docs":"Returns a string slice with trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Text directionality\n\nA string is a sequence of bytes. `end` in this context means the last\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be right side, and for right-to-left languages like\nArabic or Hebrew, this will be the left side.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\nassert_eq!(\"\\n Hello\\tworld\", s.trim_end());\n```\n\nDirectionality:\n\n```\nlet s = \"  English  \";\nassert!(Some('h') == s.trim_end().chars().rev().next());\n\nlet s = \"  ◊¢◊ë◊®◊ô◊™  \";\nassert!(Some('◊™') == s.trim_end().chars().rev().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[stable(feature = \"trim_direction\", since = \"1.30.0\")]","#[rustc_diagnostic_item = \"str_trim_end\"]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:4467:1880":{"id":"1:4467:1880","crate_id":1,"name":"Write","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:4468:1844","1:4469:53941","1:4471:53942","1:4472:3417","1:4473:53940","1:4474:53943","1:4475:51285","1:4484:51367"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:13805:57525":{"id":"2:13805:57525","crate_id":2,"name":"trim_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes and suffixes that match a\npattern repeatedly removed.\n\nThe [pattern] can be a [`char`], a slice of [`char`]s, or a function\nor closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_matches('1'), \"foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_matches(char::is_numeric), \"foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_matches(x), \"foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1foo1barXX\".trim_matches(|c| c == '1' || c == 'X'), \"foo1bar\");\n```","links":{"self::pattern":"2:13334:2495","prim@char":"1:15883:1756"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13344:2496","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"2:13344:2496","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"DoubleEndedSearcher","id":"2:13364:2499","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"5:6184:58170":{"id":"5:6184:58170","crate_id":5,"name":"into_string","span":null,"visibility":"public","docs":"Converts a [`Box<str>`] into a [`String`] without copying or allocating.\n\n# Examples\n\nBasic usage:\n\n```\nlet string = String::from(\"birthday gift\");\nlet boxed_str = string.clone().into_boxed_str();\n\nassert_eq!(boxed_str.into_string(), string);\n```","links":{"`Box<str>`":"5:444:1871","`String`":"5:8472:220"},"attrs":["#[stable(feature = \"box_str\", since = \"1.4.0\")]","#[must_use = \"`self` will be dropped if the result is not used\"]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"resolved_path","inner":{"name":"Box","id":"5:444:1871","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}},{"type":{"kind":"resolved_path","inner":{"name":"Global","id":"5:8217:3151","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:8472:220","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13727:51793":{"id":"2:13727:51793","crate_id":2,"name":"get_unchecked_mut","span":null,"visibility":"public","docs":"Returns a mutable, unchecked subslice of `str`.\n\nThis is the unchecked alternative to indexing the `str`.\n\n# Safety\n\nCallers of this function are responsible that these preconditions are\nsatisfied:\n\n* The starting index must not exceed the ending index;\n* Indexes must be within bounds of the original slice;\n* Indexes must lie on UTF-8 sequence boundaries.\n\nFailing that, the returned string slice may reference invalid memory or\nviolate the invariants communicated by the `str` type.\n\n# Examples\n\n```\nlet mut v = String::from(\"üóª‚ààüåè\");\nunsafe {\n    assert_eq!(\"üóª\", v.get_unchecked_mut(0..4));\n    assert_eq!(\"‚àà\", v.get_unchecked_mut(4..7));\n    assert_eq!(\"üåè\", v.get_unchecked_mut(7..11));\n}\n```","links":{},"attrs":["#[stable(feature = \"str_checked_slicing\", since = \"1.20.0\")]","#[rustc_const_unstable(feature = \"const_slice_index\", issue = \"none\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["i",{"kind":"generic","inner":"I"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"qualified_path","inner":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"I"},"trait":{"name":"SliceIndex","id":"2:11207:218","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}}}}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"2:11207:218","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}},"2:13754:3992":{"id":"2:13754:3992","crate_id":2,"name":"rfind","span":null,"visibility":"public","docs":"Returns the byte index for the first character of the last match of the pattern in\nthis string slice.\n\nReturns [`None`] if the pattern doesn't match.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nlet s = \"L√∂we ËÄÅËôé L√©opard Gepardi\";\n\nassert_eq!(s.rfind('L'), Some(13));\nassert_eq!(s.rfind('√©'), Some(14));\nassert_eq!(s.rfind(\"pard\"), Some(24));\n```\n\nMore complex patterns with closures:\n\n```\nlet s = \"L√∂we ËÄÅËôé L√©opard\";\n\nassert_eq!(s.rfind(char::is_whitespace), Some(12));\nassert_eq!(s.rfind(char::is_lowercase), Some(20));\n```\n\nNot finding the pattern:\n\n```\nlet s = \"L√∂we ËÄÅËôé L√©opard\";\nlet x: &[_] = &['1', '2'];\n\nassert_eq!(s.rfind(x), None);\n```","links":{"self::pattern":"2:13334:2495","prim@char":"1:15883:1756","`None`":"2:47810:178"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:47810:178","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13344:2496","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"2:13344:2496","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:13359:2498","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13364:2499":{"id":"2:13364:2499","crate_id":2,"name":"DoubleEndedSearcher","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":[],"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:13359:2498","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:13831:51035":{"id":"2:13831:51035","crate_id":2,"name":"make_ascii_lowercase","span":null,"visibility":"public","docs":"Converts this string to its ASCII lower case equivalent in-place.\n\nASCII letters 'A' to 'Z' are mapped to 'a' to 'z',\nbut non-ASCII letters are unchanged.\n\nTo return a new lowercased value without modifying the existing one, use\n[`to_ascii_lowercase()`].\n\n[`to_ascii_lowercase()`]: #method.to_ascii_lowercase\n\n# Examples\n\n```\nlet mut s = String::from(\"GR√ú√üE, J√úRGEN ‚ù§\");\n\ns.make_ascii_lowercase();\n\nassert_eq!(\"gr√ú√üe, j√úrgen ‚ù§\", s);\n```","links":{},"attrs":["#[stable(feature = \"ascii_methods_on_intrinsics\", since = \"1.23.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13820:57528":{"id":"2:13820:57528","crate_id":2,"name":"trim_left_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. 'Left' in this context means the first\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _right_ side, not the left.\n\n# Examples\n\nBasic usage:\n\n```\nassert_eq!(\"11foo1bar11\".trim_left_matches('1'), \"foo1bar11\");\nassert_eq!(\"123foo1bar123\".trim_left_matches(char::is_numeric), \"foo1bar123\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_left_matches(x), \"foo1bar12\");\n```","links":{"self::pattern":"2:13334:2495","prim@char":"1:15883:1756"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]","#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_start_matches`\",\nsuggestion = \"trim_start_matches\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_start_matches`"},"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13344:2496","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:10848:2045":{"id":"2:10848:2045","crate_id":2,"name":"BuildHasher","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:10849:147","2:10850:29647","2:10851:50847"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:3378:224":{"id":"2:3378:224","crate_id":2,"name":"Sync","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":true,"is_unsafe":true,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:3376:107":{"id":"2:3376:107","crate_id":2,"name":"Copy","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"name":"Clone","id":"2:2886:105","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:13758:51822":{"id":"2:13758:51822","crate_id":2,"name":"split","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by\ncharacters matched by a pattern.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rsplit`] method can be used.\n\n[`rsplit`]: str::rsplit\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".split(' ').collect();\nassert_eq!(v, [\"Mary\", \"had\", \"a\", \"little\", \"lamb\"]);\n\nlet v: Vec<&str> = \"\".split('X').collect();\nassert_eq!(v, [\"\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".split('X').collect();\nassert_eq!(v, [\"lion\", \"\", \"tiger\", \"leopard\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".split(\"::\").collect();\nassert_eq!(v, [\"lion\", \"tiger\", \"leopard\"]);\n\nlet v: Vec<&str> = \"abc1def2ghi\".split(char::is_numeric).collect();\nassert_eq!(v, [\"abc\", \"def\", \"ghi\"]);\n\nlet v: Vec<&str> = \"lionXtigerXleopard\".split(char::is_uppercase).collect();\nassert_eq!(v, [\"lion\", \"tiger\", \"leopard\"]);\n```\n\nIf the pattern is a slice of chars, split on each occurrence of any of the characters:\n\n```\nlet v: Vec<&str> = \"2020-11-03 23:59\".split(&['-', ' ', ':', '@'][..]).collect();\nassert_eq!(v, [\"2020\", \"11\", \"03\", \"23\", \"59\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".split(|c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"abc\", \"def\", \"ghi\"]);\n```\n\nIf a string contains multiple contiguous separators, you will end up\nwith empty strings in the output:\n\n```\nlet x = \"||||a||b|c\".to_string();\nlet d: Vec<_> = x.split('|').collect();\n\nassert_eq!(d, &[\"\", \"\", \"\", \"\", \"a\", \"\", \"b\", \"c\"]);\n```\n\nContiguous separators are separated by the empty string.\n\n```\nlet x = \"(///)\".to_string();\nlet d: Vec<_> = x.split('/').collect();\n\nassert_eq!(d, &[\"(\", \"\", \"\", \")\"]);\n```\n\nSeparators at the start or end of a string are neighbored\nby empty strings.\n\n```\nlet d: Vec<_> = \"010\".split(\"0\").collect();\nassert_eq!(d, &[\"\", \"1\", \"\"]);\n```\n\nWhen the empty string is used as a separator, it separates\nevery character in the string, along with the beginning\nand end of the string.\n\n```\nlet f: Vec<_> = \"rust\".split(\"\").collect();\nassert_eq!(f, &[\"\", \"r\", \"u\", \"s\", \"t\", \"\"]);\n```\n\nContiguous separators can lead to possibly surprising behavior\nwhen whitespace is used as the separator. This code is correct:\n\n```\nlet x = \"    a  b c\".to_string();\nlet d: Vec<_> = x.split(' ').collect();\n\nassert_eq!(d, &[\"\", \"\", \"\", \"\", \"a\", \"\", \"b\", \"c\"]);\n```\n\nIt does _not_ give you:\n\n```,ignore\nassert_eq!(d, &[\"a\", \"b\", \"c\"]);\n```\n\nUse [`split_whitespace`] for this behavior.\n\n[`split_whitespace`]: str::split_whitespace","links":{"self::pattern":"2:13334:2495","`DoubleEndedIterator`":"2:8719:121","prim@char":"1:15883:1756","str::rsplit":"1:15889:1761","str::split_whitespace":"1:15889:1761"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Split","id":"2:49791:1908","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13344:2496","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:3183:232":{"id":"2:3183:232","crate_id":2,"name":"TryFrom","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3185:128","2:3186:1431"],"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:13788:57517":{"id":"2:13788:57517","crate_id":2,"name":"rmatches","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within this string slice,\nyielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`matches`] method can be used.\n\n[`matches`]: str::matches\n\n# Examples\n\nBasic usage:\n\n```\nlet v: Vec<&str> = \"abcXXXabcYYYabc\".rmatches(\"abc\").collect();\nassert_eq!(v, [\"abc\", \"abc\", \"abc\"]);\n\nlet v: Vec<&str> = \"1abc2abc3\".rmatches(char::is_numeric).collect();\nassert_eq!(v, [\"3\", \"2\", \"1\"]);\n```","links":{"self::pattern":"2:13334:2495","str::matches":"1:15889:1761","prim@char":"1:15883:1756","`DoubleEndedIterator`":"2:8719:121"},"attrs":["#[stable(feature = \"str_matches\", since = \"1.2.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"RMatches","id":"2:50013:2954","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13344:2496","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"2:13344:2496","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:13359:2498","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:3498:2048":{"id":"2:3498:2048","crate_id":2,"name":"BitOr","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3500:183","2:3501:359"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:10574:2459":{"id":"2:10574:2459","crate_id":2,"name":"Octal","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:10575:664"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:13804:57524":{"id":"2:13804:57524","crate_id":2,"name":"trim_right","span":null,"visibility":"public","docs":"Returns a string slice with trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`.\n\n# Text directionality\n\nA string is a sequence of bytes. 'Right' in this context means the last\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _left_ side, not the right.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \" Hello\\tworld\\t\";\n\nassert_eq!(\" Hello\\tworld\", s.trim_right());\n```\n\nDirectionality:\n\n```\nlet s = \"English  \";\nassert!(Some('h') == s.trim_right().chars().rev().next());\n\nlet s = \"◊¢◊ë◊®◊ô◊™  \";\nassert!(Some('◊™') == s.trim_right().chars().rev().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[stable(feature = \"rust1\", since = \"1.0.0\")]","#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_end`\", suggestion =\n\"trim_end\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_end`"},"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13797:57520":{"id":"2:13797:57520","crate_id":2,"name":"trim","span":null,"visibility":"public","docs":"Returns a string slice with leading and trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\n\nassert_eq!(\"Hello\\tworld\", s.trim());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a slice, \\\n                  without modifying the original\"]","#[stable(feature = \"rust1\", since = \"1.0.0\")]","#[rustc_diagnostic_item = \"str_trim\"]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:3407:1867":{"id":"2:3407:1867","crate_id":2,"name":"Unpin","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":true,"is_unsafe":false,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:13794:57519":{"id":"2:13794:57519","crate_id":2,"name":"rmatch_indices","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within `self`,\nyielded in reverse order along with the index of the match.\n\nFor matches of `pat` within `self` that overlap, only the indices\ncorresponding to the last match are returned.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`match_indices`] method can be used.\n\n[`match_indices`]: str::match_indices\n\n# Examples\n\nBasic usage:\n\n```\nlet v: Vec<_> = \"abcXXXabcYYYabc\".rmatch_indices(\"abc\").collect();\nassert_eq!(v, [(12, \"abc\"), (6, \"abc\"), (0, \"abc\")]);\n\nlet v: Vec<_> = \"1abcabc2\".rmatch_indices(\"abc\").collect();\nassert_eq!(v, [(4, \"abc\"), (1, \"abc\")]);\n\nlet v: Vec<_> = \"ababa\".rmatch_indices(\"aba\").collect();\nassert_eq!(v, [(2, \"aba\")]); // only the last `aba`\n```","links":{"str::match_indices":"1:15889:1761","self::pattern":"2:13334:2495","prim@char":"1:15883:1756","`DoubleEndedIterator`":"2:8719:121"},"attrs":["#[stable(feature = \"str_match_indices\", since = \"1.5.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"RMatchIndices","id":"2:49959:2951","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13344:2496","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"2:13344:2496","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:13359:2498","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:5513:1955":{"id":"1:5513:1955","crate_id":1,"name":"OpenOptionsExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:5514:50730","1:5515:50966"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:3439:2050":{"id":"2:3439:2050","crate_id":2,"name":"Sub","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3441:183","2:3442:1369"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:3589:117":{"id":"2:3589:117","crate_id":2,"name":"Deref","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3590:226","2:3591:548"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:3837:2427":{"id":"2:3837:2427","crate_id":2,"name":"Residual","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3839:54821"],"generics":{"params":[{"name":"O","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:9156:2046":{"id":"2:9156:2046","crate_id":2,"name":"FusedIterator","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"name":"Iterator","id":"2:8876:158","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:13828:3138":{"id":"2:13828:3138","crate_id":2,"name":"is_ascii","span":null,"visibility":"public","docs":"Checks if all characters in this string are within the ASCII range.\n\n# Examples\n\n```\nlet ascii = \"hello!\\n\";\nlet non_ascii = \"Gr√º√üe, J√ºrgen ‚ù§\";\n\nassert!(ascii.is_ascii());\nassert!(!non_ascii.is_ascii());\n```","links":{},"attrs":["#[stable(feature = \"ascii_methods_on_intrinsics\", since = \"1.23.0\")]","#[must_use]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:23177:2578":{"id":"2:23177:2578","crate_id":2,"name":"SimdPartialEq","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:23178:2576","2:23179:1261","2:23180:1286"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:3173:150":{"id":"2:3173:150","crate_id":2,"name":"Into","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3175:54133"],"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:23240:1997":{"id":"2:23240:1997","crate_id":2,"name":"SupportedLaneCount","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"name":"Sealed","id":"2:23230:1972","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"1:6576:1978":{"id":"1:6576:1978","crate_id":1,"name":"CommandExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:6577:51002"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"name":"Sealed","id":"1:10416:1972","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:9535:2218":{"id":"2:9535:2218","crate_id":2,"name":"UnwindSafe","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":true,"is_unsafe":false,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:13731:51814":{"id":"2:13731:51814","crate_id":2,"name":"split_at","span":null,"visibility":"public","docs":"Divide one string slice into two at an index.\n\nThe argument, `mid`, should be a byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get mutable string slices instead, see the [`split_at_mut`]\nmethod.\n\n[`split_at_mut`]: str::split_at_mut\n\n# Panics\n\nPanics if `mid` is not on a UTF-8 code point boundary, or if it is\npast the end of the last code point of the string slice.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"Per Martin-L√∂f\";\n\nlet (first, last) = s.split_at(3);\n\nassert_eq!(\"Per\", first);\nassert_eq!(\" Martin-L√∂f\", last);\n```","links":{"str::split_at_mut":"1:15889:1761"},"attrs":["#[must_use]","#[stable(feature = \"str_split_at\", since = \"1.4.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["mid",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"tuple","inner":[{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13344:2496":{"id":"2:13344:2496","crate_id":2,"name":"Pattern","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:13346:2494","2:13347:56574","2:13348:56575","2:13349:56576","2:13350:56578","2:13351:56577","2:13352:56579"],"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"5:6187:51032":{"id":"5:6187:51032","crate_id":5,"name":"to_ascii_lowercase","span":null,"visibility":"public","docs":"Returns a copy of this string where each character is mapped to its\nASCII lower case equivalent.\n\nASCII letters 'A' to 'Z' are mapped to 'a' to 'z',\nbut non-ASCII letters are unchanged.\n\nTo lowercase the value in-place, use [`make_ascii_lowercase`].\n\nTo lowercase ASCII characters in addition to non-ASCII characters, use\n[`to_lowercase`].\n\n# Examples\n\n```\nlet s = \"Gr√º√üe, J√ºrgen ‚ù§\";\n\nassert_eq!(\"gr√º√üe, j√ºrgen ‚ù§\", s.to_ascii_lowercase());\n```\n\n[`make_ascii_lowercase`]: str::make_ascii_lowercase\n[`to_lowercase`]: #method.to_lowercase","links":{"str::make_ascii_lowercase":"1:15889:1761"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use = \"to lowercase the value in-place, use `make_ascii_lowercase()`\"]","#[stable(feature = \"ascii_methods_on_intrinsics\", since = \"1.23.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:8472:220","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13826:2805":{"id":"2:13826:2805","crate_id":2,"name":"parse","span":null,"visibility":"public","docs":"Parses this string slice into another type.\n\nBecause `parse` is so general, it can cause problems with type\ninference. As such, `parse` is one of the few times you'll see\nthe syntax affectionately known as the 'turbofish': `::<>`. This\nhelps the inference algorithm understand specifically which type\nyou're trying to parse into.\n\n`parse` can parse into any type that implements the [`FromStr`] trait.\n\n# Errors\n\nWill return [`Err`] if it's not possible to parse this string slice into\nthe desired type.\n\n[`Err`]: FromStr::Err\n\n# Examples\n\nBasic usage\n\n```\nlet four: u32 = \"4\".parse().unwrap();\n\nassert_eq!(4, four);\n```\n\nUsing the 'turbofish' instead of annotating `four`:\n\n```\nlet four = \"4\".parse::<u32>();\n\nassert_eq!(Ok(4), four);\n```\n\nFailing to parse:\n\n```\nlet nope = \"j\".parse::<u32>();\n\nassert!(nope.is_err());\n```","links":{"FromStr::Err":"2:13273:2119","`FromStr`":"2:13273:2119"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Result","id":"2:47935:207","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"F"}},{"type":{"kind":"qualified_path","inner":{"name":"Err","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"F"},"trait":{"name":"FromStr","id":"2:13273:2119","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"F"},"bounds":[{"trait_bound":{"trait":{"name":"FromStr","id":"2:13273:2119","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"5:6168:58167":{"id":"5:6168:58167","crate_id":5,"name":"replacen","span":null,"visibility":"public","docs":"Replaces first N matches of a pattern with another string.\n\n`replacen` creates a new [`String`], and copies the data from this string slice into it.\nWhile doing so, it attempts to find matches of a pattern. If it finds any, it\nreplaces them with the replacement string slice at most `count` times.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"foo foo 123 foo\";\nassert_eq!(\"new new 123 foo\", s.replacen(\"foo\", \"new\", 2));\nassert_eq!(\"faa fao 123 foo\", s.replacen('o', \"a\", 3));\nassert_eq!(\"foo foo new23 foo\", s.replacen(char::is_numeric, \"new\", 1));\n```\n\nWhen the pattern doesn't match:\n\n```\nlet s = \"this is old\";\nassert_eq!(s, s.replacen(\"cookie monster\", \"little lamb\", 10));\n```","links":{"`String`":"5:8472:220"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the replaced string as a new allocation, \\\n                  without modifying the original\"]","#[stable(feature = \"str_replacen\", since = \"1.16.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}],["to",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}],["count",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:8472:220","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13344:2496","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:10584:2463":{"id":"2:10584:2463","crate_id":2,"name":"LowerExp","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:10585:664"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:13770:57514":{"id":"2:13770:57514","crate_id":2,"name":"rsplit_terminator","span":null,"visibility":"public","docs":"An iterator over substrings of `self`, separated by characters\nmatched by a pattern and yielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\nEquivalent to [`split`], except that the trailing substring is\nskipped if empty.\n\n[`split`]: str::split\n\nThis method can be used for string data that is _terminated_,\nrather than _separated_ by a pattern.\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a\nreverse search, and it will be double ended if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`split_terminator`] method can be\nused.\n\n[`split_terminator`]: str::split_terminator\n\n# Examples\n\n```\nlet v: Vec<&str> = \"A.B.\".rsplit_terminator('.').collect();\nassert_eq!(v, [\"B\", \"A\"]);\n\nlet v: Vec<&str> = \"A..B..\".rsplit_terminator(\".\").collect();\nassert_eq!(v, [\"\", \"B\", \"\", \"A\"]);\n\nlet v: Vec<&str> = \"A.B:C.D\".rsplit_terminator(&['.', ':'][..]).collect();\nassert_eq!(v, [\"D\", \"C\", \"B\", \"A\"]);\n```","links":{"self::pattern":"2:13334:2495","str::split_terminator":"1:15889:1761","prim@char":"1:15883:1756","str::split":"1:15889:1761"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"RSplitTerminator","id":"2:49859:2947","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13344:2496","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"2:13344:2496","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:13359:2498","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13740:28294":{"id":"2:13740:28294","crate_id":2,"name":"encode_utf16","span":null,"visibility":"public","docs":"Returns an iterator of `u16` over the string encoded as UTF-16.\n\n# Examples\n\nBasic usage:\n\n```\nlet text = \"Za≈º√≥≈Çƒá gƒô≈õlƒÖ ja≈∫≈Ñ\";\n\nlet utf8_len = text.len();\nlet utf16_len = text.encode_utf16().count();\n\nassert!(utf16_len <= utf8_len);\n```","links":{},"attrs":["#[must_use =\n\"this returns the encoded string as an iterator, \\\n                  without modifying the original\"]","#[stable(feature = \"encode_utf16\", since = \"1.8.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"EncodeUtf16","id":"2:50083:2958","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:2861:97":{"id":"2:2861:97","crate_id":2,"name":"Borrow","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:2863:1826"],"generics":{"params":[{"name":"Borrowed","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"Borrowed"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:3371:1866","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"bounds":[],"implementations":[]}},"2:3167:75":{"id":"2:3167:75","crate_id":2,"name":"AsRef","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3169:311"],"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:3371:1866","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"bounds":[],"implementations":[]}},"2:9163:2676":{"id":"2:9163:2676","crate_id":2,"name":"TrustedStep","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":true,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"name":"Step","id":"2:8199:2677","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:3602:1911":{"id":"2:3602:1911","crate_id":2,"name":"DerefMut","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3603:550"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"name":"Deref","id":"2:3589:117","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"1:6219:1978":{"id":"1:6219:1978","crate_id":1,"name":"CommandExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:6220:2344","1:6221:2345","1:6222:51001","1:6223:51116","1:6225:51120","1:6227:51117","1:6228:51118","1:6230:51119"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"name":"Sealed","id":"1:10416:1972","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:3514:2542":{"id":"2:3514:2542","crate_id":2,"name":"Shr","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3516:183","2:3517:1248"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:2965:186":{"id":"2:2965:186","crate_id":2,"name":"PartialOrd","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:2967:1004","2:2968:832","2:2969:797","2:2970:716","2:2971:700"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"Rhs"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:3371:1866","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"bounds":[{"trait_bound":{"trait":{"name":"PartialEq","id":"2:2919:185","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"Rhs"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:3616:131":{"id":"2:3616:131","crate_id":2,"name":"Fn","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3618:382"],"generics":{"params":[{"name":"Args","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"name":"FnMut","id":"2:3619:132","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"Args"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:13721:51790":{"id":"2:13721:51790","crate_id":2,"name":"get","span":null,"visibility":"public","docs":"Returns a subslice of `str`.\n\nThis is the non-panicking alternative to indexing the `str`. Returns\n[`None`] whenever equivalent indexing operation would panic.\n\n# Examples\n\n```\nlet v = String::from(\"üóª‚ààüåè\");\n\nassert_eq!(Some(\"üóª\"), v.get(0..4));\n\n// indices not on UTF-8 sequence boundaries\nassert!(v.get(1..).is_none());\nassert!(v.get(..8).is_none());\n\n// out of bounds\nassert!(v.get(..42).is_none());\n```","links":{"`None`":"2:47810:178"},"attrs":["#[stable(feature = \"str_checked_slicing\", since = \"1.20.0\")]","#[rustc_const_unstable(feature = \"const_slice_index\", issue = \"none\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["i",{"kind":"generic","inner":"I"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:47810:178","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"qualified_path","inner":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"I"},"trait":{"name":"SliceIndex","id":"2:11207:218","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}}}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"2:11207:218","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:12774:3131":{"id":"2:12774:3131","crate_id":2,"name":"SlicePattern","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:12775:2794","2:12776:57053"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:3473:2448":{"id":"2:3473:2448","crate_id":2,"name":"MulAssign","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3475:899"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:8684:1870":{"id":"2:8684:1870","crate_id":2,"name":"Extend","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:8686:35834","2:8688:4223","2:8689:51495"],"generics":{"params":[{"name":"A","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:5497:1953":{"id":"1:5497:1953","crate_id":1,"name":"FileExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:5498:53871","1:5499:53873","1:5500:53872","1:5501:53874"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:3524:2547":{"id":"2:3524:2547","crate_id":2,"name":"BitOrAssign","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3526:360"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:3656:2492":{"id":"2:3656:2492","crate_id":2,"name":"Generator","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3658:242","2:3659:208","2:3660:57060"],"generics":{"params":[{"name":"R","kind":{"type":{"bounds":[],"default":{"kind":"tuple","inner":[]},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:3179:233":{"id":"2:3179:233","crate_id":2,"name":"TryInto","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3181:128","2:3182:1432"],"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:13720:51794":{"id":"2:13720:51794","crate_id":2,"name":"as_mut_ptr","span":null,"visibility":"public","docs":"Converts a mutable string slice to a raw pointer.\n\nAs string slices are a slice of bytes, the raw pointer points to a\n[`u8`]. This pointer will be pointing to the first byte of the string\nslice.\n\nIt is your responsibility to make sure that the string slice only gets\nmodified in a way that it remains valid UTF-8.","links":{"`u8`":"1:15900:1770"},"attrs":["#[stable(feature = \"str_as_mut_ptr\", since = \"1.36.0\")]","#[must_use]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"raw_pointer","inner":{"mutable":true,"type":{"kind":"primitive","inner":"u8"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:0:1627":{"id":"0:0:1627","crate_id":0,"name":"winapi","span":{"filename":"src/lib.rs","begin":[6,0],"end":[71,1]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"module","inner":{"is_crate":true,"items":[],"is_stripped":false}},"2:10578:2461":{"id":"2:10578:2461","crate_id":2,"name":"LowerHex","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:10579:664"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:8199:2677":{"id":"2:8199:2677","crate_id":2,"name":"Step","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:8200:55519","2:8201:55520","2:8202:55517","2:8203:55513","2:8204:55521","2:8205:55518","2:8206:55516"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"name":"Clone","id":"2:2886:105","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"PartialOrd","id":"2:2965:186","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"Self"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:3528:2549":{"id":"2:3528:2549","crate_id":2,"name":"BitXorAssign","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3530:363"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:3374:222":{"id":"2:3374:222","crate_id":2,"name":"StructuralPartialEq","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:13712:57508":{"id":"2:13712:57508","crate_id":2,"name":"floor_char_boundary","span":null,"visibility":"public","docs":"Finds the closest `x` not exceeding `index` where `is_char_boundary(x)` is `true`.\n\nThis method can help you truncate a string so that it's still valid UTF-8, but doesn't\nexceed a given number of bytes. Note that this is done purely at the character level\nand can still visually split graphemes, even though the underlying characters aren't\nsplit. For example, the emoji üßë‚Äçüî¨ (scientist) could be split so that the string only\nincludes üßë (person) instead.\n\n# Examples\n\n```\n#![feature(round_char_boundary)]\nlet s = \"‚ù§Ô∏èüß°üíõüíöüíôüíú\";\nassert_eq!(s.len(), 26);\nassert!(!s.is_char_boundary(13));\n\nlet closest = s.floor_char_boundary(13);\nassert_eq!(closest, 10);\nassert_eq!(&s[..closest], \"‚ù§Ô∏èüß°\");\n```","links":{},"attrs":["#[unstable(feature = \"round_char_boundary\", issue = \"93743\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["index",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"primitive","inner":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:14074:151":{"id":"2:14074:151","crate_id":2,"name":"IntoFuture","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:14075:183","2:14076:151","2:14077:772"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:13829:51033":{"id":"2:13829:51033","crate_id":2,"name":"eq_ignore_ascii_case","span":null,"visibility":"public","docs":"Checks that two strings are an ASCII case-insensitive match.\n\nSame as `to_ascii_lowercase(a) == to_ascii_lowercase(b)`,\nbut without allocating and copying temporaries.\n\n# Examples\n\n```\nassert!(\"Ferris\".eq_ignore_ascii_case(\"FERRIS\"));\nassert!(\"Ferr√∂s\".eq_ignore_ascii_case(\"FERR√∂S\"));\nassert!(!\"Ferr√∂s\".eq_ignore_ascii_case(\"FERR√ñS\"));\n```","links":{},"attrs":["#[stable(feature = \"ascii_methods_on_intrinsics\", since = \"1.23.0\")]","#[must_use]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["other",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:3250:116":{"id":"2:3250:116","crate_id":2,"name":"Default","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3251:59"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:3493:2047":{"id":"2:3493:2047","crate_id":2,"name":"BitAnd","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3495:183","2:3496:357"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"5:6185:1932":{"id":"5:6185:1932","crate_id":5,"name":"repeat","span":null,"visibility":"public","docs":"Creates a new [`String`] by repeating a string `n` times.\n\n# Panics\n\nThis function will panic if the capacity would overflow.\n\n# Examples\n\nBasic usage:\n\n```\nassert_eq!(\"abc\".repeat(4), String::from(\"abcabcabcabc\"));\n```\n\nA panic upon overflow:\n\n```should_panic\n// this will panic at runtime\nlet huge = \"0123456789abcdef\".repeat(usize::MAX);\n```","links":{"`String`":"5:8472:220"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use]","#[stable(feature = \"repeat_str\", since = \"1.16.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["n",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:8472:220","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13734:2524":{"id":"2:13734:2524","crate_id":2,"name":"char_indices","span":null,"visibility":"public","docs":"Returns an iterator over the [`char`]s of a string slice, and their\npositions.\n\nAs a string slice consists of valid UTF-8, we can iterate through a\nstring slice by [`char`]. This method returns an iterator of both\nthese [`char`]s, as well as their byte positions.\n\nThe iterator yields tuples. The position is first, the [`char`] is\nsecond.\n\n# Examples\n\nBasic usage:\n\n```\nlet word = \"goodbye\";\n\nlet count = word.char_indices().count();\nassert_eq!(7, count);\n\nlet mut char_indices = word.char_indices();\n\nassert_eq!(Some((0, 'g')), char_indices.next());\nassert_eq!(Some((1, 'o')), char_indices.next());\nassert_eq!(Some((2, 'o')), char_indices.next());\nassert_eq!(Some((3, 'd')), char_indices.next());\nassert_eq!(Some((4, 'b')), char_indices.next());\nassert_eq!(Some((5, 'y')), char_indices.next());\nassert_eq!(Some((6, 'e')), char_indices.next());\n\nassert_eq!(None, char_indices.next());\n```\n\nRemember, [`char`]s might not match your intuition about characters:\n\n[`char`]: prim@char\n\n```\nlet yes = \"yÃÜes\";\n\nlet mut char_indices = yes.char_indices();\n\nassert_eq!(Some((0, 'y')), char_indices.next()); // not (0, 'yÃÜ')\nassert_eq!(Some((1, '\\u{0306}')), char_indices.next());\n\n// note the 3 here - the last character took up two bytes\nassert_eq!(Some((3, 'e')), char_indices.next());\nassert_eq!(Some((4, 's')), char_indices.next());\n\nassert_eq!(None, char_indices.next());\n```","links":{"prim@char":"1:15883:1756"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"CharIndices","id":"2:49767:2942","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:10580:2462":{"id":"2:10580:2462","crate_id":2,"name":"UpperHex","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:10581:664"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:3375:221":{"id":"2:3375:221","crate_id":2,"name":"StructuralEq","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:5563:1952":{"id":"1:5563:1952","crate_id":1,"name":"DirEntryExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:5564:51447"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:23765:2579":{"id":"2:23765:2579","crate_id":2,"name":"SimdPartialOrd","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:23766:1284","2:23767:1283","2:23768:1281","2:23769:1280"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"name":"SimdPartialEq","id":"2:23177:2578","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:13736:28309":{"id":"2:13736:28309","crate_id":2,"name":"split_whitespace","span":null,"visibility":"public","docs":"Splits a string slice by whitespace.\n\nThe iterator returned will return string slices that are sub-slices of\nthe original string slice, separated by any amount of whitespace.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`. If you only want to split on ASCII whitespace\ninstead, use [`split_ascii_whitespace`].\n\n[`split_ascii_whitespace`]: str::split_ascii_whitespace\n\n# Examples\n\nBasic usage:\n\n```\nlet mut iter = \"A few words\".split_whitespace();\n\nassert_eq!(Some(\"A\"), iter.next());\nassert_eq!(Some(\"few\"), iter.next());\nassert_eq!(Some(\"words\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nAll kinds of whitespace are considered:\n\n```\nlet mut iter = \" Mary   had\\ta\\u{2009}little  \\n\\t lamb\".split_whitespace();\nassert_eq!(Some(\"Mary\"), iter.next());\nassert_eq!(Some(\"had\"), iter.next());\nassert_eq!(Some(\"a\"), iter.next());\nassert_eq!(Some(\"little\"), iter.next());\nassert_eq!(Some(\"lamb\"), iter.next());\n\nassert_eq!(None, iter.next());\n```","links":{"str::split_ascii_whitespace":"1:15889:1761"},"attrs":["#[must_use =\n\"this returns the split string as an iterator, \\\n                  without modifying the original\"]","#[stable(feature = \"split_whitespace\", since = \"1.1.0\")]","#[rustc_diagnostic_item = \"str_split_whitespace\"]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"SplitWhitespace","id":"2:50065:2956","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:23051:2573":{"id":"2:23051:2573","crate_id":2,"name":"SimdFloat","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:23052:2576","2:23053:55789","2:23054:56020","2:23055:56021","2:23056:56022","2:23057:39285","2:23058:56024","2:23059:56025","2:23060:56026","2:23061:56027","2:23062:56028","2:23063:56029","2:23064:56030","2:23065:56031","2:23066:56032","2:23067:56033","2:23068:55837","2:23069:56034","2:23070:56035","2:23071:56036","2:23072:56037","2:23073:55790","2:23074:55791","2:23075:55792","2:23076:55793"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"name":"Copy","id":"2:3376:107","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Sealed","id":"2:23153:1972","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:8675:152":{"id":"2:8675:152","crate_id":2,"name":"IntoIterator","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:8676:2794","2:8677:2035","2:8678:773"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:13791:57518":{"id":"2:13791:57518","crate_id":2,"name":"match_indices","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within this string\nslice as well as the index that the match starts at.\n\nFor matches of `pat` within `self` that overlap, only the indices\ncorresponding to the first match are returned.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rmatch_indices`] method can be used.\n\n[`rmatch_indices`]: str::rmatch_indices\n\n# Examples\n\nBasic usage:\n\n```\nlet v: Vec<_> = \"abcXXXabcYYYabc\".match_indices(\"abc\").collect();\nassert_eq!(v, [(0, \"abc\"), (6, \"abc\"), (12, \"abc\")]);\n\nlet v: Vec<_> = \"1abcabc2\".match_indices(\"abc\").collect();\nassert_eq!(v, [(1, \"abc\"), (4, \"abc\")]);\n\nlet v: Vec<_> = \"ababa\".match_indices(\"aba\").collect();\nassert_eq!(v, [(0, \"aba\")]); // only the first `aba`\n```","links":{"self::pattern":"2:13334:2495","`DoubleEndedIterator`":"2:8719:121","prim@char":"1:15883:1756","str::rmatch_indices":"1:15889:1761"},"attrs":["#[stable(feature = \"str_match_indices\", since = \"1.5.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"MatchIndices","id":"2:49941:2950","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13344:2496","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13738:3494":{"id":"2:13738:3494","crate_id":2,"name":"lines","span":null,"visibility":"public","docs":"An iterator over the lines of a string, as string slices.\n\nLines are ended with either a newline (`\\n`) or a carriage return with\na line feed (`\\r\\n`).\n\nThe final line ending is optional. A string that ends with a final line\nending will return the same lines as an otherwise identical string\nwithout a final line ending.\n\n# Examples\n\nBasic usage:\n\n```\nlet text = \"foo\\r\\nbar\\n\\nbaz\\n\";\nlet mut lines = text.lines();\n\nassert_eq!(Some(\"foo\"), lines.next());\nassert_eq!(Some(\"bar\"), lines.next());\nassert_eq!(Some(\"\"), lines.next());\nassert_eq!(Some(\"baz\"), lines.next());\n\nassert_eq!(None, lines.next());\n```\n\nThe final line ending isn't required:\n\n```\nlet text = \"foo\\nbar\\n\\r\\nbaz\";\nlet mut lines = text.lines();\n\nassert_eq!(Some(\"foo\"), lines.next());\nassert_eq!(Some(\"bar\"), lines.next());\nassert_eq!(Some(\"\"), lines.next());\nassert_eq!(Some(\"baz\"), lines.next());\n\nassert_eq!(None, lines.next());\n```","links":{},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Lines","id":"2:50045:1909","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13823:57529":{"id":"2:13823:57529","crate_id":2,"name":"trim_right_matches","span":null,"visibility":"public","docs":"Returns a string slice with all suffixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. 'Right' in this context means the last\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _left_ side, not the right.\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_right_matches('1'), \"11foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_right_matches(char::is_numeric), \"123foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_right_matches(x), \"12foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1fooX\".trim_right_matches(|c| c == '1' || c == 'X'), \"1foo\");\n```","links":{"self::pattern":"2:13334:2495","prim@char":"1:15883:1756"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]","#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_end_matches`\",\nsuggestion = \"trim_end_matches\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_end_matches`"},"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13344:2496","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"2:13344:2496","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:13359:2498","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:3469:2085":{"id":"2:3469:2085","crate_id":2,"name":"SubAssign","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3471:1370"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:3520:2545":{"id":"2:3520:2545","crate_id":2,"name":"BitAndAssign","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3522:358"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:6467:1956":{"id":"1:6467:1956","crate_id":1,"name":"MetadataExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:6468:50382","1:6469:50383","1:6470:50384","1:6471:50385","1:6472:50386","1:6473:50387","1:6474:50388","1:6475:50389","1:6476:50390","1:6477:50391","1:6478:50392","1:6479:50393","1:6480:50394","1:6481:50395","1:6482:50396","1:6483:50397","1:6484:50398"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:3434:2083":{"id":"2:3434:2083","crate_id":2,"name":"Add","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3436:183","2:3437:270"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:13739:57512":{"id":"2:13739:57512","crate_id":2,"name":"lines_any","span":null,"visibility":"public","docs":"An iterator over the lines of a string.","links":{},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]","#[deprecated(since = \"1.4.0\", note = \"use lines() instead now\")]","#[allow(deprecated)]"],"deprecation":{"since":"1.4.0","note":"use lines() instead now"},"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"LinesAny","id":"2:50055:2955","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:10572:120":{"id":"2:10572:120","crate_id":2,"name":"Display","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:10573:664"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:10515:1880":{"id":"2:10515:1880","crate_id":2,"name":"Write","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:10516:1550","2:10517:51284","2:10519:51285"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:4097:68":{"id":"2:4097:68","crate_id":2,"name":"Any","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:4098:1444"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"outlives":"'static"}],"implementations":[]}},"1:6647:1981":{"id":"1:6647:1981","crate_id":1,"name":"FromRawFd","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:6648:51708"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:3613:1868":{"id":"2:3613:1868","crate_id":2,"name":"Drop","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3614:583"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:14542:2091":{"id":"2:14542:2091","crate_id":2,"name":"Allocator","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":true,"items":["2:14543:51361","2:14544:51362","2:14545:51363","2:14546:51364","2:14547:51365","2:14548:51366","2:14549:51367"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:5575:1960":{"id":"1:5575:1960","crate_id":1,"name":"DirBuilderExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:5576:50730"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"5:6164:58166":{"id":"5:6164:58166","crate_id":5,"name":"into_boxed_bytes","span":null,"visibility":"public","docs":"Converts a `Box<str>` into a `Box<[u8]>` without copying or allocating.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"this is a string\";\nlet boxed_str = s.to_owned().into_boxed_str();\nlet boxed_bytes = boxed_str.into_boxed_bytes();\nassert_eq!(*boxed_bytes, *s.as_bytes());\n```","links":{},"attrs":["#[stable(feature = \"str_box_extras\", since = \"1.20.0\")]","#[must_use = \"`self` will be dropped if the result is not used\"]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"resolved_path","inner":{"name":"Box","id":"5:444:1871","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}},{"type":{"kind":"resolved_path","inner":{"name":"Global","id":"5:8217:3151","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}]],"output":{"kind":"resolved_path","inner":{"name":"Box","id":"5:444:1871","args":{"angle_bracketed":{"args":[{"type":{"kind":"slice","inner":{"kind":"primitive","inner":"u8"}}},{"type":{"kind":"resolved_path","inner":{"name":"Global","id":"5:8217:3151","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:10803:143":{"id":"2:10803:143","crate_id":2,"name":"Hash","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:10804:718","2:10806:50705"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:8744:1869":{"id":"2:8744:1869","crate_id":2,"name":"ExactSizeIterator","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:8745:798","2:8746:51228"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"name":"Iterator","id":"2:8876:158","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:2919:185":{"id":"2:2919:185","crate_id":2,"name":"PartialEq","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:2921:608","2:2922:913"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"Rhs"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:3371:1866","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"bounds":[],"implementations":[]}},"5:6186:51031":{"id":"5:6186:51031","crate_id":5,"name":"to_ascii_uppercase","span":null,"visibility":"public","docs":"Returns a copy of this string where each character is mapped to its\nASCII upper case equivalent.\n\nASCII letters 'a' to 'z' are mapped to 'A' to 'Z',\nbut non-ASCII letters are unchanged.\n\nTo uppercase the value in-place, use [`make_ascii_uppercase`].\n\nTo uppercase ASCII characters in addition to non-ASCII characters, use\n[`to_uppercase`].\n\n# Examples\n\n```\nlet s = \"Gr√º√üe, J√ºrgen ‚ù§\";\n\nassert_eq!(\"GR√º√üE, J√ºRGEN ‚ù§\", s.to_ascii_uppercase());\n```\n\n[`make_ascii_uppercase`]: str::make_ascii_uppercase\n[`to_uppercase`]: #method.to_uppercase","links":{"str::make_ascii_uppercase":"1:15889:1761"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use = \"to uppercase the value in-place, use `make_ascii_uppercase()`\"]","#[stable(feature = \"ascii_methods_on_intrinsics\", since = \"1.23.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:8472:220","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13723:51791":{"id":"2:13723:51791","crate_id":2,"name":"get_mut","span":null,"visibility":"public","docs":"Returns a mutable subslice of `str`.\n\nThis is the non-panicking alternative to indexing the `str`. Returns\n[`None`] whenever equivalent indexing operation would panic.\n\n# Examples\n\n```\nlet mut v = String::from(\"hello\");\n// correct length\nassert!(v.get_mut(0..5).is_some());\n// out of bounds\nassert!(v.get_mut(..42).is_none());\nassert_eq!(Some(\"he\"), v.get_mut(0..2).map(|v| &*v));\n\nassert_eq!(\"hello\", v);\n{\n    let s = v.get_mut(0..2);\n    let s = s.map(|s| {\n        s.make_ascii_uppercase();\n        &*s\n    });\n    assert_eq!(Some(\"HE\"), s);\n}\nassert_eq!(\"HEllo\", v);\n```","links":{"`None`":"2:47810:178"},"attrs":["#[stable(feature = \"str_checked_slicing\", since = \"1.20.0\")]","#[rustc_const_unstable(feature = \"const_slice_index\", issue = \"none\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["i",{"kind":"generic","inner":"I"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:47810:178","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"qualified_path","inner":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"I"},"trait":{"name":"SliceIndex","id":"2:11207:218","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}}}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"2:11207:218","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"5:844:227":{"id":"5:844:227","crate_id":5,"name":"ToOwned","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["5:845:3144","5:846:50883","5:847:50884"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:13835:57531":{"id":"2:13835:57531","crate_id":2,"name":"escape_unicode","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_unicode`].\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"‚ù§\\n!\".escape_unicode() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"‚ù§\\n!\".escape_unicode());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"\\\\u{{2764}}\\\\u{{a}}\\\\u{{21}}\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"‚ù§\\n!\".escape_unicode().to_string(), \"\\\\u{2764}\\\\u{a}\\\\u{21}\");\n```","links":{"`char::escape_unicode`":"1:15883:1756"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]","#[stable(feature = \"str_escape\", since = \"1.34.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"EscapeUnicode","id":"2:50108:2960","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:4898:2673":{"id":"2:4898:2673","crate_id":2,"name":"AsyncIterator","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:4899:2794","2:4900:56696","2:4901:54158"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:23104:2742":{"id":"2:23104:2742","crate_id":2,"name":"SimdInt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:23105:2576","2:23106:55789","2:23107:1239","2:23108:1240","2:23109:39285","2:23110:55833","2:23111:55834","2:23112:55835","2:23113:55836","2:23114:55837","2:23115:55790","2:23116:55791","2:23117:55792","2:23118:55793","2:23119:55794","2:23120:55795","2:23121:55796"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"name":"Copy","id":"2:3376:107","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Sealed","id":"2:23153:1972","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:3826:229":{"id":"2:3826:229","crate_id":2,"name":"Try","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3827:183","2:3828:2427","2:3829:690","2:3830:375"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"name":"FromResidual","id":"2:3831:138","args":{"angle_bracketed":{"args":[{"type":{"kind":"qualified_path","inner":{"name":"Residual","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"Self"},"trait":{"name":"Try","id":"2:3826:229","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:13799:57521":{"id":"2:13799:57521","crate_id":2,"name":"trim_start","span":null,"visibility":"public","docs":"Returns a string slice with leading whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Text directionality\n\nA string is a sequence of bytes. `start` in this context means the first\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be left side, and for right-to-left languages like\nArabic or Hebrew, this will be the right side.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\nassert_eq!(\"Hello\\tworld\\t\\n\", s.trim_start());\n```\n\nDirectionality:\n\n```\nlet s = \"  English  \";\nassert!(Some('E') == s.trim_start().chars().next());\n\nlet s = \"  ◊¢◊ë◊®◊ô◊™  \";\nassert!(Some('◊¢') == s.trim_start().chars().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[stable(feature = \"trim_direction\", since = \"1.30.0\")]","#[rustc_diagnostic_item = \"str_trim_start\"]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:3366:215":{"id":"2:3366:215","crate_id":2,"name":"Send","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":true,"is_unsafe":true,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:5431:1987":{"id":"1:5431:1987","crate_id":1,"name":"OsStrExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:5432:3963","1:5433:50512"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"name":"Sealed","id":"1:10416:1972","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:3674:2208":{"id":"2:3674:2208","crate_id":2,"name":"Index","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3676:183","2:3677:757"],"generics":{"params":[{"name":"Idx","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"Idx"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:3371:1866","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"bounds":[],"implementations":[]}},"2:13779:57515":{"id":"2:13779:57515","crate_id":2,"name":"split_once","span":null,"visibility":"public","docs":"Splits the string on the first occurrence of the specified delimiter and\nreturns prefix before delimiter and suffix after delimiter.\n\n# Examples\n\n```\nassert_eq!(\"cfg\".split_once('='), None);\nassert_eq!(\"cfg=\".split_once('='), Some((\"cfg\", \"\")));\nassert_eq!(\"cfg=foo\".split_once('='), Some((\"cfg\", \"foo\")));\nassert_eq!(\"cfg=foo=bar\".split_once('='), Some((\"cfg\", \"foo=bar\")));\n```","links":{},"attrs":["#[stable(feature = \"str_split_once\", since = \"1.52.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["delimiter",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:47810:178","args":{"angle_bracketed":{"args":[{"type":{"kind":"tuple","inner":[{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}},{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13344:2496","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:6649:1982":{"id":"1:6649:1982","crate_id":1,"name":"IntoRawFd","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:6650:53916"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:7602:2160":{"id":"1:7602:2160","crate_id":1,"name":"Termination","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:7603:51028"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:2864:98":{"id":"2:2864:98","crate_id":2,"name":"BorrowMut","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:2866:57125"],"generics":{"params":[{"name":"Borrowed","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"Borrowed"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:3371:1866","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"bounds":[{"trait_bound":{"trait":{"name":"Borrow","id":"2:2861:97","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"Borrowed"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"1:4410:1896":{"id":"1:4410:1896","crate_id":1,"name":"Read","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:4411:2281","1:4412:51541","1:4414:51542","1:4415:51543","1:4416:1897","1:4417:51544","1:4418:50993","1:4420:51545","1:4421:51367","1:4422:2074","1:4423:2680","1:4425:2697"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:13708":{"id":"2:13708","crate_id":2,"name":null,"span":null,"visibility":{"restricted":{"parent":"2:12787:1354","path":"::str"}},"docs":null,"links":{},"attrs":["#[cfg(not(test))]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"kind":"primitive","inner":"str"},"items":["2:13709:798","2:13710:51228","2:13711:57507","2:13712:57508","2:13714:57509","2:13717:50512","2:13718:57510","2:13719:310","2:13720:51794","2:13721:51790","2:13723:51791","2:13725:51792","2:13727:51793","2:13729:2068","2:13730:57511","2:13731:51814","2:13732:51815","2:13733:2977","2:13734:2524","2:13735:2074","2:13736:28309","2:13737:28299","2:13738:3494","2:13739:57512","2:13740:28294","2:13741:51831","2:13744:51832","2:13747:51833","2:13750:3991","2:13754:3992","2:13758:51822","2:13761:28176","2:13764:51825","2:13767:57513","2:13770:57514","2:13773:51827","2:13776:51829","2:13779:57515","2:13782:57516","2:13785:1841","2:13788:57517","2:13791:57518","2:13794:57519","2:13797:57520","2:13799:57521","2:13801:57522","2:13803:57523","2:13804:57524","2:13805:57525","2:13808:57526","2:13811:10775","2:13814:51834","2:13817:57527","2:13820:57528","2:13823:57529","2:13826:2805","2:13828:3138","2:13829:51033","2:13830:51034","2:13831:51035","2:13832:57530","2:13834:2025","2:13835:57531"],"negative":false,"synthetic":false,"blanket_impl":null}},"5:5906:3145":{"id":"5:5906:3145","crate_id":5,"name":"Concat","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["5:5908:183","5:5909:438"],"generics":{"params":[{"name":"Item","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"Item"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:3371:1866","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"bounds":[],"implementations":[]}},"2:2924:125":{"id":"2:2924:125","crate_id":2,"name":"Eq","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"name":"PartialEq","id":"2:2919:185","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"Self"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"5:6171:58168":{"id":"5:6171:58168","crate_id":5,"name":"to_lowercase","span":null,"visibility":"public","docs":"Returns the lowercase equivalent of this string slice, as a new [`String`].\n\n'Lowercase' is defined according to the terms of the Unicode Derived Core Property\n`Lowercase`.\n\nSince some characters can expand into multiple characters when changing\nthe case, this function returns a [`String`] instead of modifying the\nparameter in-place.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"HELLO\";\n\nassert_eq!(\"hello\", s.to_lowercase());\n```\n\nA tricky example, with sigma:\n\n```\nlet sigma = \"Œ£\";\n\nassert_eq!(\"œÉ\", sigma.to_lowercase());\n\n// but at the end of a word, it's œÇ, not œÉ:\nlet odysseus = \"·ΩàŒîŒ•Œ£Œ£ŒïŒéŒ£\";\n\nassert_eq!(\"·ΩÄŒ¥œÖœÉœÉŒµœçœÇ\", odysseus.to_lowercase());\n```\n\nLanguages without case are not changed:\n\n```\nlet new_year = \"ÂÜúÂéÜÊñ∞Âπ¥\";\n\nassert_eq!(new_year, new_year.to_lowercase());\n```","links":{"`String`":"5:8472:220"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the lowercase string as a new String, \\\n                  without modifying the original\"]","#[stable(feature = \"unicode_case_mapping\", since = \"1.2.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:8472:220","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"5:6498:228":{"id":"5:6498:228","crate_id":5,"name":"ToString","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["5:6499:1411"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:13353:2494":{"id":"2:13353:2494","crate_id":2,"name":"Searcher","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":true,"items":["2:13355:2517","2:13356:928","2:13357:57022","2:13358:57023"],"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:4148:2593":{"id":"2:4148:2593","crate_id":2,"name":"Provider","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:4149:53411"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:3105:2558":{"id":"2:3105:2558","crate_id":2,"name":"FloatToInt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":[],"generics":{"params":[{"name":"Int","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"name":"Sealed","id":"2:3104:1972","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:13729:2068":{"id":"2:13729:2068","crate_id":2,"name":"slice_unchecked","span":null,"visibility":"public","docs":"Creates a string slice from another string slice, bypassing safety\nchecks.\n\nThis is generally not recommended, use with caution! For a safe\nalternative see [`str`] and [`Index`].\n\n[`Index`]: crate::ops::Index\n\nThis new slice goes from `begin` to `end`, including `begin` but\nexcluding `end`.\n\nTo get a mutable string slice instead, see the\n[`slice_mut_unchecked`] method.\n\n[`slice_mut_unchecked`]: str::slice_mut_unchecked\n\n# Safety\n\nCallers of this function are responsible that three preconditions are\nsatisfied:\n\n* `begin` must not exceed `end`.\n* `begin` and `end` must be byte positions within the string slice.\n* `begin` and `end` must lie on UTF-8 sequence boundaries.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"L√∂we ËÄÅËôé L√©opard\";\n\nunsafe {\n    assert_eq!(\"L√∂we ËÄÅËôé L√©opard\", s.slice_unchecked(0, 21));\n}\n\nlet s = \"Hello, world!\";\n\nunsafe {\n    assert_eq!(\"world\", s.slice_unchecked(7, 12));\n}\n```","links":{"crate::ops::Index":"2:3674:2208","str::slice_mut_unchecked":"1:15889:1761","`str`":"1:15889:1761"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]","#[deprecated(since = \"1.29.0\", note =\n\"use `get_unchecked(begin..end)` instead\")]","#[must_use]"],"deprecation":{"since":"1.29.0","note":"use `get_unchecked(begin..end)` instead"},"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["begin",{"kind":"primitive","inner":"usize"}],["end",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}},"2:11207:218":{"id":"2:11207:218","crate_id":2,"name":"SliceIndex","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":true,"items":["2:11209:183","2:11210:51790","2:11211:51791","2:11212:51792","2:11213:51793","2:11214:757","2:11215:758"],"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:3371:1866","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"bounds":[{"trait_bound":{"trait":{"name":"Sealed","id":"2:11198:1972","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:3176:136":{"id":"2:3176:136","crate_id":2,"name":"From","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3178:685"],"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}}},"paths":{"1:2909:129":{"crate_id":1,"path":["std","fs","File"],"kind":"struct"},"2:24515:3071":{"crate_id":2,"path":["core","num","error","TryFromIntError"],"kind":"struct"},"16:3366:3818":{"crate_id":16,"path":["gimli","common","UnitSectionOffset"],"kind":"enum"},"12:183:3452":{"crate_id":12,"path":["hashbrown","raw","RawTable"],"kind":"struct"},"6:5378:40184":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","regex_t"],"kind":"struct"},"2:51470:2635":{"crate_id":2,"path":["core","core_arch","simd","i16x2"],"kind":"struct"},"2:53083:2671":{"crate_id":2,"path":["core","core_arch","simd","u8x64"],"kind":"struct"},"1:5431:1987":{"crate_id":1,"path":["std","os","unix","ffi","os_str","OsStrExt"],"kind":"trait"},"2:53475:2663":{"crate_id":2,"path":["core","core_arch","simd","u32x16"],"kind":"struct"},"6:4198:39546":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Sym"],"kind":"struct"},"17:9958:60249":{"crate_id":17,"path":["object","read","any","SectionRelocationIteratorInternal"],"kind":"enum"},"6:4434:39571":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlmsgerr"],"kind":"struct"},"2:3524:2547":{"crate_id":2,"path":["core","ops","bit","BitOrAssign"],"kind":"trait"},"2:14059:139":{"crate_id":2,"path":["core","future","future","Future"],"kind":"trait"},"5:4694:240":{"crate_id":5,"path":["alloc","collections","vec_deque","VecDeque"],"kind":"struct"},"17:13721:49763":{"crate_id":17,"path":["object","pe","ImageHotPatchBase"],"kind":"struct"},"16:7415:3566":{"crate_id":16,"path":["gimli","read","unit","UnitHeader"],"kind":"struct"},"6:6902:39706":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_rwlockattr_t"],"kind":"struct"},"5:8466:57267":{"crate_id":5,"path":["alloc","slice","merge_sort","Run"],"kind":"struct"},"1:9653:6883":{"crate_id":1,"path":["std","sys_common","thread_local_key","Key"],"kind":"struct"},"17:13785:49803":{"crate_id":17,"path":["object","pe","ImageRuntimeFunctionEntry"],"kind":"struct"},"5:7048:3157":{"crate_id":5,"path":["alloc","task","Wake"],"kind":"trait"},"17:9836:60241":{"crate_id":17,"path":["object","read","any","SymbolTableInternal"],"kind":"enum"},"6:6135:40603":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_fpstate"],"kind":"struct"},"6:6016:40598":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","siginfo_t"],"kind":"struct"},"2:46927:2720":{"crate_id":2,"path":["core","iter","adapters","copied","Copied"],"kind":"struct"},"18:712:2582":{"crate_id":18,"path":["memchr","memmem","twoway","Reverse"],"kind":"struct"},"2:48280:83":{"crate_id":2,"path":["core","sync","atomic","AtomicI64"],"kind":"struct"},"2:49123:2606":{"crate_id":2,"path":["core","hash","sip","SipHasher"],"kind":"struct"},"5:3104:3144":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Owned"],"kind":"enum"},"2:3622:133":{"crate_id":2,"path":["core","ops","function","FnOnce"],"kind":"trait"},"1:9427:54100":{"crate_id":1,"path":["std","sys_common","mutex","StaticMutex"],"kind":"struct"},"17:13352:49382":{"crate_id":17,"path":["object","pe","ImageRelocation"],"kind":"struct"},"6:6896:39705":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_mutexattr_t"],"kind":"struct"},"6:3993:39524":{"crate_id":6,"path":["libc","unix","linux_like","linux","msginfo"],"kind":"struct"},"1:7093:50980":{"crate_id":1,"path":["std","path","fmt","DebugHelper"],"kind":"struct"},"1:7739:54099":{"crate_id":1,"path":["std","sync","mpsc","blocking","WaitToken"],"kind":"struct"},"2:48810:67":{"crate_id":2,"path":["core","fmt","Alignment"],"kind":"enum"},"1:5425:1989":{"crate_id":1,"path":["std","os","unix","ffi","os_str","OsStringExt"],"kind":"trait"},"16:3155:3807":{"crate_id":16,"path":["gimli","common","DebugRngListsBase"],"kind":"struct"},"2:46918:2717":{"crate_id":2,"path":["core","iter","adapters","cloned","Cloned"],"kind":"struct"},"17:12770:48750":{"crate_id":17,"path":["object","macho","ScatteredRelocationInfo"],"kind":"struct"},"6:593:36526":{"crate_id":6,"path":["libc","unix","winsize"],"kind":"struct"},"17:681:43696":{"crate_id":17,"path":["object","read","any","Symbol"],"kind":"struct"},"16:5887:3790":{"crate_id":16,"path":["gimli","read","cfi","PointerEncodingParameters"],"kind":"struct"},"17:12015:48507":{"crate_id":17,"path":["object","macho","LcStr"],"kind":"struct"},"1:11518:2137":{"crate_id":1,"path":["std","path","StripPrefixError"],"kind":"struct"},"2:50676:203":{"crate_id":2,"path":["core","future","ready","Ready"],"kind":"struct"},"2:48828:70":{"crate_id":2,"path":["core","fmt","rt","v1","Argument"],"kind":"struct"},"16:5902:3610":{"crate_id":16,"path":["gimli","read","dwarf","Dwarf"],"kind":"struct"},"5:1740:2192":{"crate_id":5,"path":["alloc","collections","btree","map","IntoValues"],"kind":"struct"},"1:3070:2295":{"crate_id":1,"path":["std","fs","read_dir"],"kind":"function"},"1:9434:50473":{"crate_id":1,"path":["std","sys_common","mutex","StaticMutexGuard"],"kind":"struct"},"1:15886:1758":{"crate_id":1,"path":["std","pointer"],"kind":"primitive"},"17:12130:48576":{"crate_id":17,"path":["object","macho","FvmlibCommand"],"kind":"struct"},"18:694:4009":{"crate_id":18,"path":["memchr","memmem","rarebytes","RareNeedleBytes"],"kind":"struct"},"2:3602:1911":{"crate_id":2,"path":["core","ops","deref","DerefMut"],"kind":"trait"},"2:48238:89":{"crate_id":2,"path":["core","sync","atomic","AtomicU32"],"kind":"struct"},"1:15170:2012":{"crate_id":1,"path":["std","sys_common","net","LookupHost"],"kind":"struct"},"1:7456:2150":{"crate_id":1,"path":["std","process","ChildStdout"],"kind":"struct"},"5:1751:196":{"crate_id":5,"path":["alloc","collections","btree","map","Range"],"kind":"struct"},"9:996:3379":{"crate_id":9,"path":["miniz_oxide","MZStatus"],"kind":"enum"},"2:24402:2808":{"crate_id":2,"path":["core","num","dec2flt","FloatErrorKind"],"kind":"enum"},"5:4372:2187":{"crate_id":5,"path":["alloc","collections","vec_deque","iter_mut","IterMut"],"kind":"struct"},"6:1634:37418":{"crate_id":6,"path":["libc","unix","linux_like","lconv"],"kind":"struct"},"17:2484:43816":{"crate_id":17,"path":["object","read","elf","relocation","ElfRelaIterator"],"kind":"enum"},"1:2510:2274":{"crate_id":1,"path":["std","error","Indented"],"kind":"struct"},"2:5280:2474":{"crate_id":2,"path":["core","cell","RefMut"],"kind":"struct"},"1:10930:1899":{"crate_id":1,"path":["std","io","IoSlice"],"kind":"struct"},"1:13607:2163":{"crate_id":1,"path":["std","sys","unix","pipe","AnonPipe"],"kind":"struct"},"6:612:36529":{"crate_id":6,"path":["libc","unix","itimerval"],"kind":"struct"},"2:4855:2757":{"crate_id":2,"path":["core","asserting","TryCaptureWithDebug"],"kind":"struct"},"16:7684:3557":{"crate_id":16,"path":["gimli","read","unit","EntriesRaw"],"kind":"struct"},"5:3838:2187":{"crate_id":5,"path":["alloc","collections","linked_list","IterMut"],"kind":"struct"},"17:13840:49810":{"crate_id":17,"path":["object","pe","ImageEnclaveImport"],"kind":"struct"},"15:248:3467":{"crate_id":15,"path":["addr2line","LocationRangeUnitIter"],"kind":"struct"},"5:5861:57154":{"crate_id":5,"path":["alloc","slice","hack","to_vec","DropGuard"],"kind":"struct"},"18:0:1736":{"crate_id":18,"path":["memchr"],"kind":"module"},"1:4219:1930":{"crate_id":1,"path":["std","io","stdio","StdoutLock"],"kind":"struct"},"17:12543:48605":{"crate_id":17,"path":["object","macho","VersionMinCommand"],"kind":"struct"},"1:15053:2064":{"crate_id":1,"path":["std","sys_common","wtf8","Wtf8"],"kind":"struct"},"17:12892:49143":{"crate_id":17,"path":["object","pe","ImageDosHeader"],"kind":"struct"},"2:14422:203":{"crate_id":2,"path":["core","task","ready","Ready"],"kind":"struct"},"17:4157:3886":{"crate_id":17,"path":["object","read","macho","relocation","MachORelocationIterator"],"kind":"struct"},"2:51633:2636":{"crate_id":2,"path":["core","core_arch","simd","i16x4"],"kind":"struct"},"2:53706:17828":{"crate_id":2,"path":["core","core_arch","x86","__m256i"],"kind":"struct"},"2:51554:2660":{"crate_id":2,"path":["core","core_arch","simd","u32x2"],"kind":"struct"},"17:12117:48575":{"crate_id":17,"path":["object","macho","Fvmlib"],"kind":"struct"},"17:10015:43769":{"crate_id":17,"path":["object","read","archive","ArchiveFile"],"kind":"struct"},"6:1537:37407":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreqn"],"kind":"struct"},"17:10775:43901":{"crate_id":17,"path":["object","read","macho","segment","MachOSegmentIterator"],"kind":"struct"},"2:4843:2756":{"crate_id":2,"path":["core","asserting","TryCaptureWithoutDebug"],"kind":"struct"},"5:2619:3249":{"crate_id":5,"path":["alloc","collections","btree","node","NodeRef"],"kind":"struct"},"14:244:42001":{"crate_id":14,"path":["rustc_demangle","TryDemangleError"],"kind":"struct"},"6:3896:39516":{"crate_id":6,"path":["libc","unix","linux_like","linux","passwd"],"kind":"struct"},"14:189:41999":{"crate_id":14,"path":["rustc_demangle","Demangle"],"kind":"struct"},"16:4840:42719":{"crate_id":16,"path":["gimli","constants","DwLns"],"kind":"struct"},"5:1626:94":{"crate_id":5,"path":["alloc","collections","btree","map","BTreeMap"],"kind":"struct"},"17:10304:3926":{"crate_id":17,"path":["object","read","elf","section","ElfSection"],"kind":"struct"},"1:1374:2034":{"crate_id":1,"path":["std","collections","hash","map","Iter"],"kind":"struct"},"1:8000:50478":{"crate_id":1,"path":["std","sync","mpsc","spsc_queue","Queue"],"kind":"struct"},"5:4509:2034":{"crate_id":5,"path":["alloc","collections","vec_deque","iter","Iter"],"kind":"struct"},"9:0:1728":{"crate_id":9,"path":["miniz_oxide"],"kind":"module"},"2:53583:2646":{"crate_id":2,"path":["core","core_arch","simd","i64x8"],"kind":"struct"},"2:3855:2430":{"crate_id":2,"path":["core","ops","try_trait","NeverShortCircuitResidual"],"kind":"enum"},"1:7436:2149":{"crate_id":1,"path":["std","process","ChildStdin"],"kind":"struct"},"17:12348:48592":{"crate_id":17,"path":["object","macho","DylibTableOfContents"],"kind":"struct"},"2:13075:2949":{"crate_id":2,"path":["core","str","iter","MatchIndicesInternal"],"kind":"struct"},"5:1055:3283":{"crate_id":5,"path":["alloc","collections","binary_heap","Hole"],"kind":"struct"},"16:6035:3584":{"crate_id":16,"path":["gimli","read","abbrev","Abbreviation"],"kind":"struct"},"1:14779:50482":{"crate_id":1,"path":["std","sys","unix","process","process_inner","do_exec","Reset"],"kind":"struct"},"2:9535:2218":{"crate_id":2,"path":["core","panic","unwind_safe","UnwindSafe"],"kind":"trait"},"2:13353:2494":{"crate_id":2,"path":["core","str","pattern","Searcher"],"kind":"trait"},"1:4146:2310":{"crate_id":1,"path":["std","io","stdio","StderrRaw"],"kind":"struct"},"1:6647:1981":{"crate_id":1,"path":["std","os","fd","raw","FromRawFd"],"kind":"trait"},"17:10136:43713":{"crate_id":17,"path":["object","read","coff","symbol","SymbolIterator"],"kind":"struct"},"1:1991:146":{"crate_id":1,"path":["std","collections","hash","set","HashSet"],"kind":"struct"},"2:6902:56904":{"crate_id":2,"path":["core","iter","adapters","flatten","TrustedConstSize"],"kind":"trait"},"2:46255:199":{"crate_id":2,"path":["core","ops","range","RangeInclusive"],"kind":"struct"},"6:5229:40175":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","msghdr"],"kind":"struct"},"2:49354:3136":{"crate_id":2,"path":["core","slice","ascii","EscapeByte"],"kind":"struct"},"1:10921:1936":{"crate_id":1,"path":["std","io","util","Sink"],"kind":"struct"},"1:10914:1934":{"crate_id":1,"path":["std","io","util","Empty"],"kind":"struct"},"16:6873:3029":{"crate_id":16,"path":["gimli","read","op","Location"],"kind":"enum"},"1:7314:120":{"crate_id":1,"path":["std","path","Display"],"kind":"struct"},"1:11134:51105":{"crate_id":1,"path":["std","net","ip","fmt","Span"],"kind":"struct"},"6:6184:40605":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user"],"kind":"struct"},"12:1703:3459":{"crate_id":12,"path":["hashbrown","rustc_entry","RustcVacantEntry"],"kind":"struct"},"1:1108:6994":{"crate_id":1,"path":["std","backtrace","BacktraceSymbol"],"kind":"struct"},"17:9587:60289":{"crate_id":17,"path":["object","read","any","FileInternal"],"kind":"enum"},"1:10993:1909":{"crate_id":1,"path":["std","io","Lines"],"kind":"struct"},"16:3314:3792":{"crate_id":16,"path":["gimli","common","DebugFrameOffset"],"kind":"struct"},"17:2314:3929":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbolIterator"],"kind":"struct"},"6:565:36523":{"crate_id":6,"path":["libc","unix","ipv6_mreq"],"kind":"struct"},"6:5274:40155":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","mallinfo2"],"kind":"struct"},"2:2864:98":{"crate_id":2,"path":["core","borrow","BorrowMut"],"kind":"trait"},"1:10799:1921":{"crate_id":1,"path":["std","io","error","ErrorKind"],"kind":"enum"},"2:3831:138":{"crate_id":2,"path":["core","ops","try_trait","FromResidual"],"kind":"trait"},"16:6533:3833":{"crate_id":16,"path":["gimli","read","loclists","LocListsFormat"],"kind":"enum"},"17:10516:43830":{"crate_id":17,"path":["object","read","elf","version","VernauxIterator"],"kind":"struct"},"2:46716:2959":{"crate_id":2,"path":["core","char","EscapeDebug"],"kind":"struct"},"6:4081:39535":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_ramp_effect"],"kind":"struct"},"1:1431:2036":{"crate_id":1,"path":["std","collections","hash","map","Drain"],"kind":"struct"},"18:729:60310":{"crate_id":18,"path":["memchr","memmem","twoway","Shift"],"kind":"enum"},"2:48843:67":{"crate_id":2,"path":["core","fmt","rt","v1","Alignment"],"kind":"enum"},"1:9558:50475":{"crate_id":1,"path":["std","sys_common","rwlock","StaticRwLockReadGuard"],"kind":"struct"},"1:15253:2329":{"crate_id":1,"path":["std","sys_common","net","UdpSocket"],"kind":"struct"},"16:3686:42093":{"crate_id":16,"path":["gimli","constants","DwUt"],"kind":"struct"},"6:6979:41159":{"crate_id":6,"path":["libc","unix","align","in6_addr"],"kind":"struct"},"16:7155:3643":{"crate_id":16,"path":["gimli","read","rnglists","DebugRngLists"],"kind":"struct"},"2:3514:2542":{"crate_id":2,"path":["core","ops","bit","Shr"],"kind":"trait"},"1:14061:1927":{"crate_id":1,"path":["std","sys","unix","stdio","Stdin"],"kind":"struct"},"1:2917:1897":{"crate_id":1,"path":["std","fs","read_to_string"],"kind":"function"},"2:6719:2719":{"crate_id":2,"path":["core","iter","adapters","flatten","Flatten"],"kind":"struct"},"2:4163:2599":{"crate_id":2,"path":["core","any","Demand"],"kind":"struct"},"2:25087:169":{"crate_id":2,"path":["core","num","nonzero","NonZeroI64"],"kind":"struct"},"2:8024:2559":{"crate_id":2,"path":["core","iter","adapters","zip","TrustedRandomAccessNoCoerce"],"kind":"trait"},"6:4098:39537":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_periodic_effect"],"kind":"struct"},"2:50065:2956":{"crate_id":2,"path":["core","str","iter","SplitWhitespace"],"kind":"struct"},"1:12106:2080":{"crate_id":1,"path":["std","time","SystemTime"],"kind":"struct"},"17:9676:60285":{"crate_id":17,"path":["object","read","any","SegmentInternal"],"kind":"enum"},"17:13180:49253":{"crate_id":17,"path":["object","pe","AnonObjectHeaderV2"],"kind":"struct"},"2:9537:2244":{"crate_id":2,"path":["core","panic","unwind_safe","AssertUnwindSafe"],"kind":"struct"},"5:444:1871":{"crate_id":5,"path":["alloc","boxed","Box"],"kind":"struct"},"17:11754:44628":{"crate_id":17,"path":["object","elf","Verneed"],"kind":"struct"},"12:2045:2037":{"crate_id":12,"path":["hashbrown","set","DrainFilter"],"kind":"struct"},"1:10789:2180":{"crate_id":1,"path":["std","io","error","SimpleMessage"],"kind":"struct"},"2:46997:2707":{"crate_id":2,"path":["core","iter","adapters","inspect","Inspect"],"kind":"struct"},"2:9163:2676":{"crate_id":2,"path":["core","iter","traits","marker","TrustedStep"],"kind":"trait"},"9:41:3363":{"crate_id":9,"path":["miniz_oxide","deflate","buffer","LocalBuf"],"kind":"struct"},"17:10104:3975":{"crate_id":17,"path":["object","read","coff","section","CoffSectionIterator"],"kind":"struct"},"16:6907:3632":{"crate_id":16,"path":["gimli","read","op","Piece"],"kind":"struct"},"6:5216:40174":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","glob64_t"],"kind":"struct"},"2:3455:2441":{"crate_id":2,"path":["core","ops","arith","Rem"],"kind":"trait"},"2:47909:3031":{"crate_id":2,"path":["core","panic","panic_info","PanicInfo"],"kind":"struct"},"12:777:2035":{"crate_id":12,"path":["hashbrown","map","IntoIter"],"kind":"struct"},"2:46633:2833":{"crate_id":2,"path":["core","char","convert","CharTryFromError"],"kind":"struct"},"2:47986:2187":{"crate_id":2,"path":["core","result","IterMut"],"kind":"struct"},"6:5439:40191":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_seccomp"],"kind":"struct"},"17:12687:48676":{"crate_id":17,"path":["object","macho","DataInCodeEntry"],"kind":"struct"},"1:7484:2152":{"crate_id":1,"path":["std","process","Command"],"kind":"struct"},"2:47867:2035":{"crate_id":2,"path":["core","option","IntoIter"],"kind":"struct"},"1:14931:2079":{"crate_id":1,"path":["std","sys","unix","time","inner","Instant"],"kind":"struct"},"6:4038:39529":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_keymap_entry"],"kind":"struct"},"2:24479:35549":{"crate_id":2,"path":["core","num","fmt","Part"],"kind":"enum"},"2:13562:110":{"crate_id":2,"path":["core","str","lossy","Debug"],"kind":"struct"},"5:8271:2035":{"crate_id":5,"path":["alloc","collections","btree","set","IntoIter"],"kind":"struct"},"2:24390:2807":{"crate_id":2,"path":["core","num","dec2flt","ParseFloatError"],"kind":"struct"},"1:14801:50449":{"crate_id":1,"path":["std","sys","unix","process","process_inner","posix_spawn","PosixSpawnattr"],"kind":"struct"},"17:10390:3934":{"crate_id":17,"path":["object","read","elf","relocation","RelocationSections"],"kind":"struct"},"14:216:42008":{"crate_id":14,"path":["rustc_demangle","SizeLimitedFmtAdapter"],"kind":"struct"},"12:2419:2044":{"crate_id":12,"path":["hashbrown","TryReserveError"],"kind":"enum"},"14:0:1732":{"crate_id":14,"path":["rustc_demangle"],"kind":"module"},"5:8361:2044":{"crate_id":5,"path":["alloc","collections","TryReserveError"],"kind":"struct"},"6:4474:39576":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_alg"],"kind":"struct"},"5:7312:2036":{"crate_id":5,"path":["alloc","vec","drain","Drain"],"kind":"struct"},"16:7281:3551":{"crate_id":16,"path":["gimli","read","str","DebugStr"],"kind":"struct"},"1:13394:8012":{"crate_id":1,"path":["std","sys","unix","os","SplitPaths"],"kind":"struct"},"2:48364:85":{"crate_id":2,"path":["core","sync","atomic","AtomicIsize"],"kind":"struct"},"2:2265:2743":{"crate_id":2,"path":["core","ptr","metadata","Pointee"],"kind":"trait"},"17:10211:43788":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdatSectionIterator"],"kind":"struct"},"1:11966:2104":{"crate_id":1,"path":["std","sync","mpsc","SendError"],"kind":"struct"},"2:48322:90":{"crate_id":2,"path":["core","sync","atomic","AtomicU64"],"kind":"struct"},"6:6937:39711":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_rwlock_t"],"kind":"struct"},"1:10655:2280":{"crate_id":1,"path":["std","fs","FileTimes"],"kind":"struct"},"6:3972:39522":{"crate_id":6,"path":["libc","unix","linux_like","linux","packet_mreq"],"kind":"struct"},"1:14862:2155":{"crate_id":1,"path":["std","sys","unix","process","process_inner","ExitStatus"],"kind":"struct"},"17:11474:44340":{"crate_id":17,"path":["object","elf","SectionHeader32"],"kind":"struct"},"2:56244:2614":{"crate_id":2,"path":["core","core_simd","swizzle","Which"],"kind":"enum"},"2:52223:55713":{"crate_id":2,"path":["core","core_arch","simd","m64x2"],"kind":"struct"},"6:6027:40599":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stack_t"],"kind":"struct"},"16:6468:3625":{"crate_id":16,"path":["gimli","read","line","FileEntryFormat"],"kind":"struct"},"2:3167:75":{"crate_id":2,"path":["core","convert","AsRef"],"kind":"trait"},"2:13344:2496":{"crate_id":2,"path":["core","str","pattern","Pattern"],"kind":"trait"},"12:1881:146":{"crate_id":12,"path":["hashbrown","set","HashSet"],"kind":"struct"},"6:5240:40176":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","cmsghdr"],"kind":"struct"},"12:787:2191":{"crate_id":12,"path":["hashbrown","map","IntoKeys"],"kind":"struct"},"17:9716:60290":{"crate_id":17,"path":["object","read","any","SectionIteratorInternal"],"kind":"enum"},"17:13763:49801":{"crate_id":17,"path":["object","pe","ImageAlpha64RuntimeFunctionEntry"],"kind":"struct"},"2:2886:105":{"crate_id":2,"path":["core","clone","Clone"],"kind":"trait"},"1:10278:50476":{"crate_id":1,"path":["std","backtrace_rs","print","BacktraceFrameFmt"],"kind":"struct"},"2:5729:2740":{"crate_id":2,"path":["core","ffi","sealed_trait","VaArgSafe"],"kind":"trait"},"16:7264:196":{"crate_id":16,"path":["gimli","read","rnglists","Range"],"kind":"struct"},"5:5609:3169":{"crate_id":5,"path":["alloc","rc","Weak"],"kind":"struct"},"1:1261:144":{"crate_id":1,"path":["std","collections","hash","map","HashMap"],"kind":"struct"},"2:50365:2511":{"crate_id":2,"path":["core","str","pattern","StrSearcherImpl"],"kind":"enum"},"2:50099:2026":{"crate_id":2,"path":["core","str","iter","EscapeDefault"],"kind":"struct"},"2:24889:174":{"crate_id":2,"path":["core","num","nonzero","NonZeroU64"],"kind":"struct"},"5:4036:57154":{"crate_id":5,"path":["alloc","collections","linked_list","drop","DropGuard"],"kind":"struct"},"1:3755:2183":{"crate_id":1,"path":["std","io","error","repr_bitpacked","Repr"],"kind":"struct"},"17:10068:3936":{"crate_id":17,"path":["object","read","coff","section","SectionTable"],"kind":"struct"},"17:12746:43724":{"crate_id":17,"path":["object","macho","Relocation"],"kind":"struct"},"2:50419:3041":{"crate_id":2,"path":["core","str","lossy","Utf8Chunks"],"kind":"struct"},"18:885:4001":{"crate_id":18,"path":["memchr","memmem","SearcherRev"],"kind":"struct"},"18:837:2494":{"crate_id":18,"path":["memchr","memmem","Searcher"],"kind":"struct"},"1:8288:2102":{"crate_id":1,"path":["std","sync","mpsc","Sender"],"kind":"struct"},"2:48154:88":{"crate_id":2,"path":["core","sync","atomic","AtomicU16"],"kind":"struct"},"6:521:36518":{"crate_id":6,"path":["libc","unix","utimbuf"],"kind":"struct"},"17:11335:3877":{"crate_id":17,"path":["object","read","CompressedFileRange"],"kind":"struct"},"16:5784:3608":{"crate_id":16,"path":["gimli","read","cfi","CallFrameInstruction"],"kind":"enum"},"17:11085:3918":{"crate_id":17,"path":["object","read","SymbolIndex"],"kind":"struct"},"16:5649:3602":{"crate_id":16,"path":["gimli","read","cfi","UnwindContext"],"kind":"struct"},"19:0:1000":{"crate_id":19,"path":["panic_unwind"],"kind":"module"},"2:14458:142":{"crate_id":2,"path":["core","alloc","global","GlobalAlloc"],"kind":"trait"},"5:3106:57266":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Immut"],"kind":"struct"},"2:46126:2493":{"crate_id":2,"path":["core","ops","generator","GeneratorState"],"kind":"enum"},"2:3745:3019":{"crate_id":2,"path":["core","ops","range","RangeBounds"],"kind":"trait"},"17:11797:44633":{"crate_id":17,"path":["object","elf","NoteHeader64"],"kind":"struct"},"1:11868:2156":{"crate_id":1,"path":["std","process","ExitStatusError"],"kind":"struct"},"2:10576:2460":{"crate_id":2,"path":["core","fmt","Binary"],"kind":"trait"},"18:152:50206":{"crate_id":18,"path":["memchr","memchr","iter","Memchr2"],"kind":"struct"},"2:3498:2048":{"crate_id":2,"path":["core","ops","bit","BitOr"],"kind":"trait"},"17:10048:43787":{"crate_id":17,"path":["object","read","coff","file","CoffCommon"],"kind":"struct"},"17:13774:49802":{"crate_id":17,"path":["object","pe","ImageAlphaRuntimeFunctionEntry"],"kind":"struct"},"16:5498:3597":{"crate_id":16,"path":["gimli","read","cfi","Augmentation"],"kind":"struct"},"17:13452:49735":{"crate_id":17,"path":["object","pe","ImageImportDescriptor"],"kind":"struct"},"6:6114:40600":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","pthread_attr_t"],"kind":"struct"},"17:9988:43768":{"crate_id":17,"path":["object","read","archive","ArchiveKind"],"kind":"enum"},"2:50737:2980":{"crate_id":2,"path":["core","task","wake","RawWakerVTable"],"kind":"struct"},"18:637:60297":{"crate_id":18,"path":["memchr","memmem","genericsimd","Forward"],"kind":"struct"},"16:7702:3556":{"crate_id":16,"path":["gimli","read","unit","EntriesCursor"],"kind":"struct"},"16:4198:42509":{"crate_id":16,"path":["gimli","constants","DwAt"],"kind":"struct"},"17:11031:43717":{"crate_id":17,"path":["object","read","FileKind"],"kind":"enum"},"17:10407:3923":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdat"],"kind":"struct"},"1:2135:2038":{"crate_id":1,"path":["std","collections","hash","set","Intersection"],"kind":"struct"},"17:13167:49252":{"crate_id":17,"path":["object","pe","AnonObjectHeader"],"kind":"struct"},"2:8129:2699":{"crate_id":2,"path":["core","iter","adapters","GenericShunt"],"kind":"struct"},"12:559:144":{"crate_id":12,"path":["hashbrown","map","HashMap"],"kind":"struct"},"1:4428:1898":{"crate_id":1,"path":["std","io","IoSliceMut"],"kind":"struct"},"1:11998:2106":{"crate_id":1,"path":["std","sync","mpsc","TryRecvError"],"kind":"enum"},"17:9396:43706":{"crate_id":17,"path":["object","endian","I16Bytes"],"kind":"struct"},"6:607:36528":{"crate_id":6,"path":["libc","unix","sigval"],"kind":"struct"},"2:46173:198":{"crate_id":2,"path":["core","ops","range","RangeFull"],"kind":"struct"},"17:1311:3980":{"crate_id":17,"path":["object","read","coff","relocation","CoffRelocationIterator"],"kind":"struct"},"16:6173:3618":{"crate_id":16,"path":["gimli","read","line","LineRows"],"kind":"struct"},"2:46213:197":{"crate_id":2,"path":["core","ops","range","RangeFrom"],"kind":"struct"},"16:3103:3817":{"crate_id":16,"path":["gimli","common","RawRangeListsOffset"],"kind":"struct"},"16:4628:42675":{"crate_id":16,"path":["gimli","constants","DwId"],"kind":"struct"},"6:4315:39556":{"crate_id":6,"path":["libc","unix","linux_like","linux","in6_pktinfo"],"kind":"struct"},"12:815:2192":{"crate_id":12,"path":["hashbrown","map","IntoValues"],"kind":"struct"},"17:13938:49844":{"crate_id":17,"path":["object","pe","NonPagedDebugInfo"],"kind":"struct"},"17:9431:43707":{"crate_id":17,"path":["object","endian","I32Bytes"],"kind":"struct"},"1:11341:10374":{"crate_id":1,"path":["std","panic","BacktraceStyle"],"kind":"enum"},"16:7792:3582":{"crate_id":16,"path":["gimli","read","value","ValueType"],"kind":"enum"},"1:11836:2153":{"crate_id":1,"path":["std","process","CommandArgs"],"kind":"struct"},"16:4599:42670":{"crate_id":16,"path":["gimli","constants","DwAddr"],"kind":"struct"},"16:6099:3615":{"crate_id":16,"path":["gimli","read","aranges","ArangeHeader"],"kind":"struct"},"1:3284:1916":{"crate_id":1,"path":["std","io","buffered","bufreader","BufReader"],"kind":"struct"},"6:672:36561":{"crate_id":6,"path":["libc","unix","linux_like","timezone"],"kind":"enum"},"18:820:3996":{"crate_id":18,"path":["memchr","memmem","FinderRev"],"kind":"struct"},"6:5293:40179":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_mmap_req"],"kind":"struct"},"6:3877:39514":{"crate_id":6,"path":["libc","unix","linux_like","linux","rlimit64"],"kind":"struct"},"1:4351:1935":{"crate_id":1,"path":["std","io","util","Repeat"],"kind":"struct"},"1:15023:2062":{"crate_id":1,"path":["std","sys_common","wtf8","CodePoint"],"kind":"struct"},"1:783:6883":{"crate_id":1,"path":["std","thread","local","fast","Key"],"kind":"struct"},"2:3613:1868":{"crate_id":2,"path":["core","ops","drop","Drop"],"kind":"trait"},"16:6858:3846":{"crate_id":16,"path":["gimli","read","op","OperationEvaluationResult"],"kind":"enum"},"1:13783:2154":{"crate_id":1,"path":["std","sys","unix","process","process_common","Stdio"],"kind":"enum"},"16:6691:3630":{"crate_id":16,"path":["gimli","read","op","DieReference"],"kind":"enum"},"18:661:4007":{"crate_id":18,"path":["memchr","memmem","prefilter","PrefilterState"],"kind":"struct"},"2:46372:2473":{"crate_id":2,"path":["core","any","tags","Ref"],"kind":"struct"},"6:6914:39708":{"crate_id":6,"path":["libc","unix","linux_like","linux","fanotify_event_metadata"],"kind":"struct"},"16:4573:42668":{"crate_id":16,"path":["gimli","constants","DwLang"],"kind":"struct"},"17:2543:3953":{"crate_id":17,"path":["object","read","elf","relocation","ElfSectionRelocationIterator"],"kind":"struct"},"2:32448:3066":{"crate_id":2,"path":["core","num","FpCategory"],"kind":"enum"},"5:3366:95":{"crate_id":5,"path":["alloc","collections","btree","set","BTreeSet"],"kind":"struct"},"1:4180:1928":{"crate_id":1,"path":["std","io","stdio","StdinLock"],"kind":"struct"},"16:5257:42079":{"crate_id":16,"path":["gimli","endianity","LittleEndian"],"kind":"struct"},"5:3441:3160":{"crate_id":5,"path":["alloc","collections","btree","set","IntersectionInner"],"kind":"enum"},"1:14453:119":{"crate_id":1,"path":["std","sys","unix","fs","DirBuilder"],"kind":"struct"},"16:5998:3516":{"crate_id":16,"path":["gimli","read","reader","ReaderOffsetId"],"kind":"struct"},"2:47935:207":{"crate_id":2,"path":["core","result","Result"],"kind":"enum"},"2:48570:2460":{"crate_id":2,"path":["core","fmt","num","Binary"],"kind":"struct"},"17:8929:43698":{"crate_id":17,"path":["object","common","BinaryFormat"],"kind":"enum"},"16:7238:3565":{"crate_id":16,"path":["gimli","read","rnglists","RngListIter"],"kind":"struct"},"17:12431:48597":{"crate_id":17,"path":["object","macho","TwolevelHint"],"kind":"struct"},"2:11698:2922":{"crate_id":2,"path":["core","slice","iter","SplitNMut"],"kind":"struct"},"1:2152:2041":{"crate_id":1,"path":["std","collections","hash","set","Union"],"kind":"struct"},"2:5323:2475":{"crate_id":2,"path":["core","cell","SyncUnsafeCell"],"kind":"struct"},"1:9512:2317":{"crate_id":1,"path":["std","sys_common","remutex","ReentrantMutex"],"kind":"struct"},"16:6012:3544":{"crate_id":16,"path":["gimli","read","abbrev","DebugAbbrev"],"kind":"struct"},"17:9706:43710":{"crate_id":17,"path":["object","read","any","SectionIterator"],"kind":"struct"},"1:11022:2005":{"crate_id":1,"path":["std","net","addr","SocketAddrV4"],"kind":"struct"},"2:50351:2510":{"crate_id":2,"path":["core","str","pattern","StrSearcher"],"kind":"struct"},"2:3104:1972":{"crate_id":2,"path":["core","convert","num","private","Sealed"],"kind":"trait"},"1:15883:1756":{"crate_id":1,"path":["std","char"],"kind":"primitive"},"17:10975:43987":{"crate_id":17,"path":["object","read","pe","section","PeSectionIterator"],"kind":"struct"},"17:10266:3936":{"crate_id":17,"path":["object","read","elf","section","SectionTable"],"kind":"struct"},"1:10534:8007":{"crate_id":1,"path":["std","env","VarError"],"kind":"enum"},"17:12383:48594":{"crate_id":17,"path":["object","macho","DylibModule64"],"kind":"struct"},"1:5738:2400":{"crate_id":1,"path":["std","os","unix","net","ancillary","ScmCredentials"],"kind":"struct"},"2:52427:2662":{"crate_id":2,"path":["core","core_arch","simd","u32x8"],"kind":"struct"},"1:6649:1982":{"crate_id":1,"path":["std","os","fd","raw","IntoRawFd"],"kind":"trait"},"2:8675:152":{"crate_id":2,"path":["core","iter","traits","collect","IntoIterator"],"kind":"trait"},"2:51949:2637":{"crate_id":2,"path":["core","core_arch","simd","i16x8"],"kind":"struct"},"2:46647:3119":{"crate_id":2,"path":["core","char","decode","DecodeUtf16"],"kind":"struct"},"2:50750:159":{"crate_id":2,"path":["core","alloc","layout","Layout"],"kind":"struct"},"12:2052:2038":{"crate_id":12,"path":["hashbrown","set","Intersection"],"kind":"struct"},"5:3436:2038":{"crate_id":5,"path":["alloc","collections","btree","set","Intersection"],"kind":"struct"},"16:6331:3463":{"crate_id":16,"path":["gimli","read","line","LineSequence"],"kind":"struct"},"1:12072:2362":{"crate_id":1,"path":["std","sync","once","OnceState"],"kind":"struct"},"17:11514:44401":{"crate_id":17,"path":["object","elf","CompressionHeader32"],"kind":"struct"},"17:13975:49885":{"crate_id":17,"path":["object","pe","ImageCor20Header"],"kind":"struct"},"2:52303:2670":{"crate_id":2,"path":["core","core_arch","simd","u8x32"],"kind":"struct"},"1:12087:2079":{"crate_id":1,"path":["std","time","Instant"],"kind":"struct"},"17:13873:49834":{"crate_id":17,"path":["object","pe","ImageCoffSymbolsHeader"],"kind":"struct"},"2:12330:57042":{"crate_id":2,"path":["core","slice","sort","CopyOnDrop"],"kind":"struct"},"1:7599:2158":{"crate_id":1,"path":["std","process","exit"],"kind":"function"},"2:48448:3035":{"crate_id":2,"path":["core","sync","exclusive","Exclusive"],"kind":"struct"},"2:3481:2452":{"crate_id":2,"path":["core","ops","arith","RemAssign"],"kind":"trait"},"2:48406:92":{"crate_id":2,"path":["core","sync","atomic","AtomicUsize"],"kind":"struct"},"16:3243:3811":{"crate_id":16,"path":["gimli","common","DebugStrOffsetsIndex"],"kind":"struct"},"2:46965:2704":{"crate_id":2,"path":["core","iter","adapters","filter_map","FilterMap"],"kind":"struct"},"1:10963:1904":{"crate_id":1,"path":["std","io","Chain"],"kind":"struct"},"17:13859:49816":{"crate_id":17,"path":["object","pe","ImageDebugDirectory"],"kind":"struct"},"2:46590:2026":{"crate_id":2,"path":["core","ascii","EscapeDefault"],"kind":"struct"},"17:13155:49250":{"crate_id":17,"path":["object","pe","Guid"],"kind":"struct"},"17:12093:48516":{"crate_id":17,"path":["object","macho","Section64"],"kind":"struct"},"2:24350:56436":{"crate_id":2,"path":["core","num","dec2flt","decimal","Decimal"],"kind":"struct"},"6:4454:39574":{"crate_id":6,"path":["libc","unix","linux_like","linux","dirent"],"kind":"struct"},"5:6739:69":{"crate_id":5,"path":["alloc","sync","Arc"],"kind":"struct"},"1:10527:2202":{"crate_id":1,"path":["std","collections","hash","map","DefaultHasher"],"kind":"struct"},"2:51603:2648":{"crate_id":2,"path":["core","core_arch","simd","i8x8"],"kind":"struct"},"1:13413:54098":{"crate_id":1,"path":["std","sys","unix","os","Env"],"kind":"struct"},"16:3265:3812":{"crate_id":16,"path":["gimli","common","DebugTypesOffset"],"kind":"struct"},"17:9291:43687":{"crate_id":17,"path":["object","endian","U16Bytes"],"kind":"struct"},"2:47035:2709":{"crate_id":2,"path":["core","iter","adapters","peekable","Peekable"],"kind":"struct"},"2:10525:135":{"crate_id":2,"path":["core","fmt","Formatter"],"kind":"struct"},"16:4467:42610":{"crate_id":16,"path":["gimli","constants","DwVis"],"kind":"struct"},"16:5176:42935":{"crate_id":16,"path":["gimli","constants","DwOp"],"kind":"struct"},"2:22881:56401":{"crate_id":2,"path":["core","core_simd","swizzle","interleave","Lo"],"kind":"struct"},"2:47054:2711":{"crate_id":2,"path":["core","iter","adapters","scan","Scan"],"kind":"struct"},"17:11579:44411":{"crate_id":17,"path":["object","elf","Syminfo32"],"kind":"struct"},"2:46700:3115":{"crate_id":2,"path":["core","char","EscapeDefaultState"],"kind":"enum"},"1:11905:50978":{"crate_id":1,"path":["std","sync","mpsc","sync","Failure"],"kind":"enum"},"5:7960:57157":{"crate_id":5,"path":["alloc","vec","dedup_by","FillGapOnDrop"],"kind":"struct"},"2:56653:241":{"crate_id":2,"path":["core","core_simd","fmt","fmt","Wrapper"],"kind":"struct"},"1:15888:1760":{"crate_id":1,"path":["std","slice"],"kind":"primitive"},"17:11985:48407":{"crate_id":17,"path":["object","macho","MachHeader64"],"kind":"struct"},"2:10568:110":{"crate_id":2,"path":["core","fmt","macros","Debug"],"kind":"proc_derive"},"12:2059:2039":{"crate_id":12,"path":["hashbrown","set","Difference"],"kind":"struct"},"2:22849:56168":{"crate_id":2,"path":["core","core_simd","swizzle","rotate_lanes_left","Rotate"],"kind":"struct"},"2:52663:2642":{"crate_id":2,"path":["core","core_arch","simd","i32x8"],"kind":"struct"},"17:13522:49745":{"crate_id":17,"path":["object","pe","ImageResourceDirStringU"],"kind":"struct"},"12:466:59428":{"crate_id":12,"path":["hashbrown","raw","RawIterHash"],"kind":"struct"},"2:9159:2571":{"crate_id":2,"path":["core","iter","traits","marker","TrustedLen"],"kind":"trait"},"1:15071:2071":{"crate_id":1,"path":["std","sys_common","wtf8","EncodeWide"],"kind":"struct"},"1:10973:1905":{"crate_id":1,"path":["std","io","Take"],"kind":"struct"},"14:11:41999":{"crate_id":14,"path":["rustc_demangle","legacy","Demangle"],"kind":"struct"},"2:47066:2712":{"crate_id":2,"path":["core","iter","adapters","skip","Skip"],"kind":"struct"},"1:2119:2034":{"crate_id":1,"path":["std","collections","hash","set","Iter"],"kind":"struct"},"6:4148:39543":{"crate_id":6,"path":["libc","unix","linux_like","linux","dl_phdr_info"],"kind":"struct"},"6:3987:39370":{"crate_id":6,"path":["libc","unix","linux_like","linux","if_nameindex"],"kind":"struct"},"5:4665:57186":{"crate_id":5,"path":["alloc","collections","vec_deque","spec_extend","spec_extend","WrapAddOnDrop"],"kind":"struct"},"2:47107:2714":{"crate_id":2,"path":["core","iter","adapters","take_while","TakeWhile"],"kind":"struct"},"6:157:36206":{"crate_id":6,"path":["libc","unix","FILE"],"kind":"enum"},"1:14874:2156":{"crate_id":1,"path":["std","sys","unix","process","process_inner","ExitStatusError"],"kind":"struct"},"2:2861:97":{"crate_id":2,"path":["core","borrow","Borrow"],"kind":"trait"},"2:25021:167":{"crate_id":2,"path":["core","num","nonzero","NonZeroI16"],"kind":"struct"},"2:56666:241":{"crate_id":2,"path":["core","core_simd","fmt","fmt","Wrapper"],"kind":"struct"},"1:15192:2321":{"crate_id":1,"path":["std","sys_common","net","TcpStream"],"kind":"struct"},"1:10303:50485":{"crate_id":1,"path":["std","backtrace_rs","Bomb"],"kind":"struct"},"6:4270:2342":{"crate_id":6,"path":["libc","unix","linux_like","linux","ucred"],"kind":"struct"},"17:10558:43929":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCacheImage"],"kind":"struct"},"17:11784:44632":{"crate_id":17,"path":["object","elf","NoteHeader32"],"kind":"struct"},"16:7868:128":{"crate_id":16,"path":["gimli","read","Error"],"kind":"enum"},"17:13345:49370":{"crate_id":17,"path":["object","pe","ImageAuxSymbolCrc"],"kind":"struct"},"2:47076:2713":{"crate_id":2,"path":["core","iter","adapters","skip_while","SkipWhile"],"kind":"struct"},"5:3960:3236":{"crate_id":5,"path":["alloc","collections","linked_list","CursorMut"],"kind":"struct"},"2:4491:2035":{"crate_id":2,"path":["core","array","iter","IntoIter"],"kind":"struct"},"2:23234:1995":{"crate_id":2,"path":["core","core_simd","lane_count","LaneCount"],"kind":"struct"},"1:12014:2107":{"crate_id":1,"path":["std","sync","mpsc","RecvTimeoutError"],"kind":"enum"},"2:46974:55600":{"crate_id":2,"path":["core","iter","adapters","flatten","FlattenCompat"],"kind":"struct"},"2:50542:122":{"crate_id":2,"path":["core","time","Duration"],"kind":"struct"},"6:5331:40182":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","timex"],"kind":"struct"},"1:2651:182":{"crate_id":1,"path":["std","ffi","os_str","OsString"],"kind":"struct"},"12:2398:55639":{"crate_id":12,"path":["hashbrown","raw","bitmask","BitMask"],"kind":"struct"},"16:5362:3590":{"crate_id":16,"path":["gimli","read","cfi","EhHdrTable"],"kind":"struct"},"2:13052:2948":{"crate_id":2,"path":["core","str","iter","SplitNInternal"],"kind":"struct"},"5:7477:2035":{"crate_id":5,"path":["alloc","vec","into_iter","IntoIter"],"kind":"struct"},"16:6490:3626":{"crate_id":16,"path":["gimli","read","loclists","DebugLoc"],"kind":"struct"},"1:10902:1938":{"crate_id":1,"path":["std","io","readbuf","BorrowedCursor"],"kind":"struct"},"1:11250:2401":{"crate_id":1,"path":["std","os","unix","net","ancillary","AncillaryError"],"kind":"enum"},"17:13539:49747":{"crate_id":17,"path":["object","pe","ImageLoadConfigCodeIntegrity"],"kind":"struct"},"6:4242:39550":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Shdr"],"kind":"struct"},"16:7471:3543":{"crate_id":16,"path":["gimli","read","unit","AttributeValue"],"kind":"enum"},"1:11960:2035":{"crate_id":1,"path":["std","sync","mpsc","IntoIter"],"kind":"struct"},"1:15881:1754":{"crate_id":1,"path":["std","bool"],"kind":"primitive"},"1:12596:50985":{"crate_id":1,"path":["std","sys","unix","fs","TimespecDebugAdapter"],"kind":"struct"},"6:4516:39580":{"crate_id":6,"path":["libc","unix","linux_like","linux","mq_attr"],"kind":"struct"},"2:10586:2464":{"crate_id":2,"path":["core","fmt","UpperExp"],"kind":"trait"},"17:9539:3912":{"crate_id":17,"path":["object","read","util","ByteString"],"kind":"struct"},"16:4495:42614":{"crate_id":16,"path":["gimli","constants","DwVirtuality"],"kind":"struct"},"2:24366:35510":{"crate_id":2,"path":["core","num","dec2flt","number","Number"],"kind":"struct"},"1:6479:50393":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt","st_mtime"],"kind":"foreign_type"},"2:53677:17825":{"crate_id":2,"path":["core","core_arch","x86","__m128i"],"kind":"struct"},"12:472:59424":{"crate_id":12,"path":["hashbrown","raw","RawIterHashInner"],"kind":"struct"},"1:5567:1958":{"crate_id":1,"path":["std","os","unix","fs","DirEntryExt2"],"kind":"trait"},"6:4142:39542":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_abs_setup"],"kind":"struct"},"17:12170:48579":{"crate_id":17,"path":["object","macho","SubFrameworkCommand"],"kind":"struct"},"17:12634:48672":{"crate_id":17,"path":["object","macho","IdentCommand"],"kind":"struct"},"3:321:207":{"crate_id":3,"path":["compiler_builtins","float","cmp","Result"],"kind":"enum"},"2:3503:2049":{"crate_id":2,"path":["core","ops","bit","BitXor"],"kind":"trait"},"17:9087:43702":{"crate_id":17,"path":["object","common","RelocationKind"],"kind":"enum"},"1:13928:50501":{"crate_id":1,"path":["std","sys","unix","stack_overflow","Handler"],"kind":"struct"},"2:56601:241":{"crate_id":2,"path":["core","core_simd","fmt","fmt","Wrapper"],"kind":"struct"},"6:4005:39525":{"crate_id":6,"path":["libc","unix","linux_like","linux","sembuf"],"kind":"struct"},"1:7470:2151":{"crate_id":1,"path":["std","process","ChildStderr"],"kind":"struct"},"2:5216:2867":{"crate_id":2,"path":["core","cell","BorrowRef"],"kind":"struct"},"2:8199:2677":{"crate_id":2,"path":["core","iter","range","Step"],"kind":"trait"},"17:9259:42079":{"crate_id":17,"path":["object","endian","LittleEndian"],"kind":"struct"},"1:10942:1901":{"crate_id":1,"path":["std","io","SeekFrom"],"kind":"enum"},"2:50083:2958":{"crate_id":2,"path":["core","str","iter","EncodeUtf16"],"kind":"struct"},"17:12512:48603":{"crate_id":17,"path":["object","macho","EncryptionInfoCommand32"],"kind":"struct"},"17:10988:43986":{"crate_id":17,"path":["object","read","pe","section","PeSection"],"kind":"struct"},"1:13744:2152":{"crate_id":1,"path":["std","sys","unix","process","process_common","Command"],"kind":"struct"},"1:11201:2325":{"crate_id":1,"path":["std","net","Shutdown"],"kind":"enum"},"17:10899:44001":{"crate_id":17,"path":["object","read","pe","file","PeFile"],"kind":"struct"},"6:4218:39548":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Phdr"],"kind":"struct"},"2:3616:131":{"crate_id":2,"path":["core","ops","function","Fn"],"kind":"trait"},"6:5541:40221":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","sigset_t"],"kind":"struct"},"16:5745:3607":{"crate_id":16,"path":["gimli","read","cfi","RegisterRule"],"kind":"enum"},"1:4036:1937":{"crate_id":1,"path":["std","io","readbuf","BorrowedBuf"],"kind":"struct"},"16:4689:42688":{"crate_id":16,"path":["gimli","constants","DwInl"],"kind":"struct"},"1:15388:3475":{"crate_id":1,"path":["std","backtrace_rs","backtrace","libunwind","Frame"],"kind":"enum"},"2:23437:2624":{"crate_id":2,"path":["core","core_simd","masks","MaskElement"],"kind":"trait"},"2:39150:2760":{"crate_id":2,"path":["core","error","Source"],"kind":"struct"},"2:49859:2947":{"crate_id":2,"path":["core","str","iter","RSplitTerminator"],"kind":"struct"},"6:6967:41158":{"crate_id":6,"path":["libc","unix","linux_like","linux","non_exhaustive","open_how"],"kind":"struct"},"2:49358:3135":{"crate_id":2,"path":["core","slice","ascii","EscapeAscii"],"kind":"struct"},"9:27:3362":{"crate_id":9,"path":["miniz_oxide","deflate","buffer","HashBuffers"],"kind":"struct"},"1:14960:51013":{"crate_id":1,"path":["std","sys_common","process","CommandEnv"],"kind":"struct"},"16:5941:3612":{"crate_id":16,"path":["gimli","read","dwarf","RangeIter"],"kind":"struct"},"1:4256:1925":{"crate_id":1,"path":["std","io","stdio","Stderr"],"kind":"struct"},"6:3920:39518":{"crate_id":6,"path":["libc","unix","linux_like","linux","dqblk"],"kind":"struct"},"1:4492:1903":{"crate_id":1,"path":["std","io","BufRead"],"kind":"trait"},"1:2361:8001":{"crate_id":1,"path":["std","env","VarsOs"],"kind":"struct"},"17:11591:44412":{"crate_id":17,"path":["object","elf","Syminfo64"],"kind":"struct"},"2:4097:68":{"crate_id":2,"path":["core","any","Any"],"kind":"trait"},"3:0:436":{"crate_id":3,"path":["compiler_builtins"],"kind":"module"},"6:3960:39520":{"crate_id":6,"path":["libc","unix","linux_like","linux","itimerspec"],"kind":"struct"},"2:47918:35762":{"crate_id":2,"path":["core","panicking","AssertKind"],"kind":"enum"},"2:32794:56890":{"crate_id":2,"path":["core","mem","valid_align","ValidAlignEnum64"],"kind":"enum"},"2:53732:17830":{"crate_id":2,"path":["core","core_arch","x86","__m256d"],"kind":"struct"},"1:10417:2229":{"crate_id":1,"path":["std","thread","local","AccessError"],"kind":"struct"},"6:5288:40178":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_pktinfo"],"kind":"struct"},"6:5405:40187":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","seminfo"],"kind":"struct"},"16:5217:3795":{"crate_id":16,"path":["gimli","constants","DwEhPe"],"kind":"struct"},"1:15884:1757":{"crate_id":1,"path":["std","unit"],"kind":"primitive"},"18:678:143":{"crate_id":18,"path":["memchr","memmem","rabinkarp","Hash"],"kind":"struct"},"2:46936:2701":{"crate_id":2,"path":["core","iter","adapters","cycle","Cycle"],"kind":"struct"},"16:4871:42726":{"crate_id":16,"path":["gimli","constants","DwLne"],"kind":"struct"},"2:46723:3116":{"crate_id":2,"path":["core","char","ToLowercase"],"kind":"struct"},"2:51757:2669":{"crate_id":2,"path":["core","core_arch","simd","u8x16"],"kind":"struct"},"2:51710:55746":{"crate_id":2,"path":["core","core_arch","simd","f64x1"],"kind":"struct"},"17:13037:49200":{"crate_id":17,"path":["object","pe","ImageOptionalHeader32"],"kind":"struct"},"2:53697:17827":{"crate_id":2,"path":["core","core_arch","x86","__m128d"],"kind":"struct"},"2:48895:71":{"crate_id":2,"path":["core","fmt","ArgumentV1"],"kind":"struct"},"2:0:493":{"crate_id":2,"path":["core"],"kind":"module"},"17:12282:48587":{"crate_id":17,"path":["object","macho","RoutinesCommand64"],"kind":"struct"},"17:11701:44509":{"crate_id":17,"path":["object","elf","Dyn64"],"kind":"struct"},"5:8483:3152":{"crate_id":5,"path":["alloc","string","FromUtf8Error"],"kind":"struct"},"2:50386:2513":{"crate_id":2,"path":["core","str","pattern","TwoWaySearcher"],"kind":"struct"},"1:7422:2148":{"crate_id":1,"path":["std","process","Child"],"kind":"struct"},"1:4476:51317":{"crate_id":1,"path":["std","io","Write","write_fmt","Adapter"],"kind":"struct"},"5:8249:3285":{"crate_id":5,"path":["alloc","collections","binary_heap","DrainSorted"],"kind":"struct"},"12:1682:3458":{"crate_id":12,"path":["hashbrown","rustc_entry","RustcOccupiedEntry"],"kind":"struct"},"16:5721:3606":{"crate_id":16,"path":["gimli","read","cfi","CfaRule"],"kind":"enum"},"1:6573:1992":{"crate_id":1,"path":["std","os","linux","process","ChildExt"],"kind":"trait"},"2:47851:2034":{"crate_id":2,"path":["core","option","Iter"],"kind":"struct"},"5:2843:3248":{"crate_id":5,"path":["alloc","collections","btree","node","Handle"],"kind":"struct"},"2:49589:2926":{"crate_id":2,"path":["core","slice","iter","ChunksMut"],"kind":"struct"},"17:9636:43709":{"crate_id":17,"path":["object","read","any","SegmentIterator"],"kind":"struct"},"16:7121:3640":{"crate_id":16,"path":["gimli","read","pubtypes","DebugPubTypes"],"kind":"struct"},"7:85:41258":{"crate_id":7,"path":["unwind","libunwind","_Unwind_Action"],"kind":"enum"},"6:1662:37419":{"crate_id":6,"path":["libc","unix","linux_like","in_pktinfo"],"kind":"struct"},"2:46417:2841":{"crate_id":2,"path":["core","array","TryFromSliceError"],"kind":"struct"},"17:9275:42078":{"crate_id":17,"path":["object","endian","BigEndian"],"kind":"struct"},"2:53781:17833":{"crate_id":2,"path":["core","core_arch","x86","__m512d"],"kind":"struct"},"1:11894:51513":{"crate_id":1,"path":["std","sync","mpsc","shared","StartResult"],"kind":"enum"},"17:13794:49806":{"crate_id":17,"path":["object","pe","ImageEnclaveConfig32"],"kind":"struct"},"6:5426:40189":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_entry"],"kind":"struct"},"5:8420:3026":{"crate_id":5,"path":["alloc","ffi","c_str","FromBytesWithNulErrorKind"],"kind":"enum"},"6:4277:39552":{"crate_id":6,"path":["libc","unix","linux_like","linux","mntent"],"kind":"struct"},"2:3909:2424":{"crate_id":2,"path":["core","ops","unsize","DispatchFromDyn"],"kind":"trait"},"2:37930:180":{"crate_id":2,"path":["core","cmp","Ordering"],"kind":"enum"},"2:47978:2034":{"crate_id":2,"path":["core","result","Iter"],"kind":"struct"},"2:23439:2576":{"crate_id":2,"path":["core","core_simd","masks","Mask"],"kind":"struct"},"17:11922:48399":{"crate_id":17,"path":["object","macho","DyldCacheImageInfo"],"kind":"struct"},"2:5755:784":{"crate_id":2,"path":["core","iter"],"kind":"module"},"18:136:50205":{"crate_id":18,"path":["memchr","memchr","iter","Memchr"],"kind":"struct"},"16:7200:3564":{"crate_id":16,"path":["gimli","read","rnglists","RawRngListIter"],"kind":"struct"},"12:1121:2199":{"crate_id":12,"path":["hashbrown","map","OccupiedEntry"],"kind":"struct"},"17:8849:3911":{"crate_id":17,"path":["object","common","Architecture"],"kind":"enum"},"6:4340:39559":{"crate_id":6,"path":["libc","unix","linux_like","linux","fanotify_response"],"kind":"struct"},"2:3250:116":{"crate_id":2,"path":["core","default","Default"],"kind":"trait"},"18:611:4004":{"crate_id":18,"path":["memchr","cow","CowBytes"],"kind":"struct"},"1:3058:2289":{"crate_id":1,"path":["std","fs","read_link"],"kind":"function"},"17:11212:3915":{"crate_id":17,"path":["object","read","Import"],"kind":"struct"},"2:11207:218":{"crate_id":2,"path":["core","slice","index","SliceIndex"],"kind":"trait"},"17:11181:43722":{"crate_id":17,"path":["object","read","ObjectMapEntry"],"kind":"struct"},"5:1256:58636":{"crate_id":5,"path":["alloc","collections","btree","append","MergeIter"],"kind":"struct"},"2:23230:1972":{"crate_id":2,"path":["core","core_simd","lane_count","sealed","Sealed"],"kind":"trait"},"16:5668:3603":{"crate_id":16,"path":["gimli","read","cfi","UnwindTable"],"kind":"struct"},"6:0:803":{"crate_id":6,"path":["libc"],"kind":"module"},"12:940:2194":{"crate_id":12,"path":["hashbrown","map","RawEntryMut"],"kind":"enum"},"12:928:2190":{"crate_id":12,"path":["hashbrown","map","ValuesMut"],"kind":"struct"},"6:6007:40597":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","flock64"],"kind":"struct"},"17:10464:3954":{"crate_id":17,"path":["object","read","elf","hash","GnuHashTable"],"kind":"struct"},"2:46617:2831":{"crate_id":2,"path":["core","char","convert","CharErrorKind"],"kind":"enum"},"17:10253:3902":{"crate_id":17,"path":["object","read","elf","segment","ElfSegment"],"kind":"struct"},"6:626:36531":{"crate_id":6,"path":["libc","unix","servent"],"kind":"struct"},"2:50563:2086":{"crate_id":2,"path":["core","time","FromFloatSecsError"],"kind":"struct"},"6:4160:39544":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Ehdr"],"kind":"struct"},"16:7110:3639":{"crate_id":16,"path":["gimli","read","pubtypes","PubTypesEntry"],"kind":"struct"},"5:6562:2036":{"crate_id":5,"path":["alloc","string","Drain"],"kind":"struct"},"17:12262:48586":{"crate_id":17,"path":["object","macho","RoutinesCommand32"],"kind":"struct"},"6:1712:37424":{"crate_id":6,"path":["libc","unix","linux_like","arphdr"],"kind":"struct"},"2:49941:2950":{"crate_id":2,"path":["core","str","iter","MatchIndices"],"kind":"struct"},"16:6407:3623":{"crate_id":16,"path":["gimli","read","line","CompleteLineProgram"],"kind":"struct"},"6:4287:39553":{"crate_id":6,"path":["libc","unix","linux_like","linux","posix_spawn_file_actions_t"],"kind":"struct"},"17:13612:49760":{"crate_id":17,"path":["object","pe","ImageLoadConfigDirectory32"],"kind":"struct"},"5:984:3282":{"crate_id":5,"path":["alloc","collections","binary_heap","PeekMut"],"kind":"struct"},"17:12557:48606":{"crate_id":17,"path":["object","macho","BuildVersionCommand"],"kind":"struct"},"1:10554:3252":{"crate_id":1,"path":["std","error","private","Internal"],"kind":"struct"},"2:24529:3010":{"crate_id":2,"path":["core","num","error","ParseIntError"],"kind":"struct"},"2:46596:28868":{"crate_id":2,"path":["core","async_iter","from_iter","FromIter"],"kind":"struct"},"6:4392:39566":{"crate_id":6,"path":["libc","unix","linux_like","linux","j1939_filter"],"kind":"struct"},"6:6097:37350":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statvfs64"],"kind":"struct"},"16:7051:3634":{"crate_id":16,"path":["gimli","read","op","OperationIter"],"kind":"struct"},"6:1704:37423":{"crate_id":6,"path":["libc","unix","linux_like","arpreq_old"],"kind":"struct"},"2:23153:1972":{"crate_id":2,"path":["core","core_simd","elements","sealed","Sealed"],"kind":"trait"},"1:5151:2321":{"crate_id":1,"path":["std","net","tcp","TcpStream"],"kind":"struct"},"2:10578:2461":{"crate_id":2,"path":["core","fmt","LowerHex"],"kind":"trait"},"1:853:2233":{"crate_id":1,"path":["std","thread","scoped","Scope"],"kind":"struct"},"18:754:60301":{"crate_id":18,"path":["memchr","memmem","twoway","SuffixOrdering"],"kind":"enum"},"1:7602:2160":{"crate_id":1,"path":["std","process","Termination"],"kind":"trait"},"6:4308:39555":{"crate_id":6,"path":["libc","unix","linux_like","linux","genlmsghdr"],"kind":"struct"},"5:3395:2034":{"crate_id":5,"path":["alloc","collections","btree","set","Iter"],"kind":"struct"},"9:1020:3380":{"crate_id":9,"path":["miniz_oxide","MZError"],"kind":"enum"},"6:5301:40180":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_mmap_hdr"],"kind":"struct"},"1:6841:2020":{"crate_id":1,"path":["std","os","net","tcp","TcpStreamExt"],"kind":"trait"},"17:9033:43700":{"crate_id":17,"path":["object","common","SymbolKind"],"kind":"enum"},"17:10489:43829":{"crate_id":17,"path":["object","read","elf","version","VerdauxIterator"],"kind":"struct"},"17:10147:43786":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbolTable"],"kind":"struct"},"16:5396:3592":{"crate_id":16,"path":["gimli","read","cfi","CieOffsetEncoding"],"kind":"enum"},"2:49681:2932":{"crate_id":2,"path":["core","slice","iter","RChunksMut"],"kind":"struct"},"1:3060:2290":{"crate_id":1,"path":["std","fs","canonicalize"],"kind":"function"},"18:651:4003":{"crate_id":18,"path":["memchr","memmem","prefilter","Prefilter"],"kind":"enum"},"2:8378:1934":{"crate_id":2,"path":["core","iter","sources","empty","Empty"],"kind":"struct"},"1:4467:1880":{"crate_id":1,"path":["std","io","Write"],"kind":"trait"},"2:3486:2534":{"crate_id":2,"path":["core","ops","bit","Not"],"kind":"trait"},"2:56614:241":{"crate_id":2,"path":["core","core_simd","fmt","fmt","Wrapper"],"kind":"struct"},"18:720:55724":{"crate_id":18,"path":["memchr","memmem","twoway","TwoWay"],"kind":"struct"},"2:3173:150":{"crate_id":2,"path":["core","convert","Into"],"kind":"trait"},"16:5238:42081":{"crate_id":16,"path":["gimli","endianity","RunTimeEndian"],"kind":"enum"},"2:12197:2935":{"crate_id":2,"path":["core","slice","iter","GroupBy"],"kind":"struct"},"1:13761:54094":{"crate_id":1,"path":["std","sys","unix","process","process_common","Argv"],"kind":"struct"},"2:50686:29404":{"crate_id":2,"path":["core","future","ResumeTy"],"kind":"struct"},"1:3801:207":{"crate_id":1,"path":["std","io","error","Result"],"kind":"typedef"},"17:11381:44115":{"crate_id":17,"path":["object","archive","Header"],"kind":"struct"},"1:7939:2262":{"crate_id":1,"path":["std","sync","mpsc","shared","Packet"],"kind":"struct"},"15:269:3471":{"crate_id":15,"path":["addr2line","RangeAttributes"],"kind":"struct"},"17:3743:3869":{"crate_id":17,"path":["object","read","macho","section","MachOSectionIterator"],"kind":"struct"},"17:10435:3906":{"crate_id":17,"path":["object","read","elf","note","NoteIterator"],"kind":"struct"},"6:6214:40607":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ipc_perm"],"kind":"struct"},"18:849:3998":{"crate_id":18,"path":["memchr","memmem","NeedleInfo"],"kind":"struct"},"16:6277:3620":{"crate_id":16,"path":["gimli","read","line","LineInstructions"],"kind":"struct"},"16:3297:3865":{"crate_id":16,"path":["gimli","common","DebugTypeSignature"],"kind":"struct"},"6:6120:40601":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_fpxreg"],"kind":"struct"},"1:4217:1929":{"crate_id":1,"path":["std","io","stdio","Stdout"],"kind":"struct"},"2:3374:222":{"crate_id":2,"path":["core","marker","StructuralPartialEq"],"kind":"trait"},"12:432:3449":{"crate_id":12,"path":["hashbrown","raw","RawDrain"],"kind":"struct"},"1:15315:26413":{"crate_id":1,"path":["std","alloc","System"],"kind":"struct"},"17:12143:48577":{"crate_id":17,"path":["object","macho","Dylib"],"kind":"struct"},"2:50514:2970":{"crate_id":2,"path":["core","str","CharEscapeUnicode"],"kind":"struct"},"17:10455:3955":{"crate_id":17,"path":["object","read","elf","hash","HashTable"],"kind":"struct"},"1:11190:2323":{"crate_id":1,"path":["std","net","tcp","Incoming"],"kind":"struct"},"5:8449:3231":{"crate_id":5,"path":["alloc","ffi","c_str","IntoStringError"],"kind":"struct"},"13:233:59429":{"crate_id":13,"path":["std_detect","detect","cache","Initializer"],"kind":"struct"},"17:13660:49761":{"crate_id":17,"path":["object","pe","ImageLoadConfigDirectory64"],"kind":"struct"},"16:7063:3635":{"crate_id":16,"path":["gimli","read","op","Evaluation"],"kind":"struct"},"2:49767:2942":{"crate_id":2,"path":["core","str","iter","CharIndices"],"kind":"struct"},"16:6141:3617":{"crate_id":16,"path":["gimli","read","aranges","ArangeEntry"],"kind":"struct"},"16:2883:3821":{"crate_id":16,"path":["gimli","common","DebugArangesOffset"],"kind":"struct"},"5:4581:3269":{"crate_id":5,"path":["alloc","collections","vec_deque","pair_slices","PairSlices"],"kind":"struct"},"17:13029:49198":{"crate_id":17,"path":["object","pe","ImageDataDirectory"],"kind":"struct"},"5:2396:3245":{"crate_id":5,"path":["alloc","collections","btree","navigate","LazyLeafRange"],"kind":"struct"},"2:48003:180":{"crate_id":2,"path":["core","sync","atomic","Ordering"],"kind":"enum"},"1:997:2032":{"crate_id":1,"path":["std","thread","JoinHandle"],"kind":"struct"},"17:9920:43714":{"crate_id":17,"path":["object","read","any","DynamicRelocationIterator"],"kind":"struct"},"1:15038:2063":{"crate_id":1,"path":["std","sys_common","wtf8","Wtf8Buf"],"kind":"struct"},"16:5639:3601":{"crate_id":16,"path":["gimli","read","cfi","UninitializedUnwindContext"],"kind":"struct"},"17:12957:49145":{"crate_id":17,"path":["object","pe","ImageVxdHeader"],"kind":"struct"},"17:10530:43927":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCache"],"kind":"struct"},"2:49735:3036":{"crate_id":2,"path":["core","str","error","Utf8Error"],"kind":"struct"},"1:5759:2403":{"crate_id":1,"path":["std","os","unix","net","ancillary","Messages"],"kind":"struct"},"17:12048:48509":{"crate_id":17,"path":["object","macho","SegmentCommand64"],"kind":"struct"},"2:51502:2668":{"crate_id":2,"path":["core","core_arch","simd","u8x8"],"kind":"struct"},"16:6310:3621":{"crate_id":16,"path":["gimli","read","line","ColumnType"],"kind":"enum"},"16:7025:3538":{"crate_id":16,"path":["gimli","read","op","Expression"],"kind":"struct"},"2:49154:55747":{"crate_id":2,"path":["core","hash","sip","Sip13Rounds"],"kind":"struct"},"17:294:60292":{"crate_id":17,"path":["object","read","util","DebugByte"],"kind":"struct"},"1:9394:50468":{"crate_id":1,"path":["std","sys_common","lazy_box","LazyBox"],"kind":"struct"},"16:547:3785":{"crate_id":16,"path":["gimli","read","cfi","RegisterRuleMap"],"kind":"struct"},"1:5708:2397":{"crate_id":1,"path":["std","os","unix","net","ancillary","AncillaryDataIter"],"kind":"struct"},"5:981:96":{"crate_id":5,"path":["alloc","collections","binary_heap","BinaryHeap"],"kind":"struct"},"16:6130:3616":{"crate_id":16,"path":["gimli","read","aranges","ArangeEntryIter"],"kind":"struct"},"1:15893:1763":{"crate_id":1,"path":["std","f32"],"kind":"primitive"},"5:4765:57153":{"crate_id":5,"path":["alloc","collections","vec_deque","truncate","Dropper"],"kind":"struct"},"2:46605:2830":{"crate_id":2,"path":["core","char","convert","ParseCharError"],"kind":"struct"},"1:5497:1953":{"crate_id":1,"path":["std","os","unix","fs","FileExt"],"kind":"trait"},"17:13584:49752":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation64V2"],"kind":"struct"},"6:1912:37564":{"crate_id":6,"path":["libc","unix","linux_like","linux","fpos64_t"],"kind":"enum"},"1:10228:51020":{"crate_id":1,"path":["std","backtrace_rs","symbolize","SymbolName"],"kind":"struct"},"1:10794:2181":{"crate_id":1,"path":["std","io","error","Custom"],"kind":"struct"},"6:5247:40177":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","termios"],"kind":"struct"},"17:10586:43930":{"crate_id":17,"path":["object","read","macho","file","MachOComdatIterator"],"kind":"struct"},"2:48070:91":{"crate_id":2,"path":["core","sync","atomic","AtomicU8"],"kind":"struct"},"1:8497:2351":{"crate_id":1,"path":["std","sync","condvar","Condvar"],"kind":"struct"},"1:14142:2241":{"crate_id":1,"path":["std","sys","unix","thread","Thread"],"kind":"struct"},"5:3814:161":{"crate_id":5,"path":["alloc","collections","linked_list","LinkedList"],"kind":"struct"},"1:2397:8012":{"crate_id":1,"path":["std","env","SplitPaths"],"kind":"struct"},"16:5326:3588":{"crate_id":16,"path":["gimli","read","cfi","EhFrameHdr"],"kind":"struct"},"5:3407:3159":{"crate_id":5,"path":["alloc","collections","btree","set","DifferenceInner"],"kind":"enum"},"1:13245:2336":{"crate_id":1,"path":["std","sys","unix","net","Socket"],"kind":"struct"},"5:6340:3211":{"crate_id":5,"path":["alloc","string","retain","SetLenOnDrop"],"kind":"struct"},"5:6759:3169":{"crate_id":5,"path":["alloc","sync","Weak"],"kind":"struct"},"16:7741:3647":{"crate_id":16,"path":["gimli","read","unit","EntriesTreeNode"],"kind":"struct"},"17:12406:48595":{"crate_id":17,"path":["object","macho","DylibReference"],"kind":"struct"},"12:843:2188":{"crate_id":12,"path":["hashbrown","map","Keys"],"kind":"struct"},"2:49646:2715":{"crate_id":2,"path":["core","slice","iter","ArrayChunks"],"kind":"struct"},"2:3814:3020":{"crate_id":2,"path":["core","ops","range","OneSidedRange"],"kind":"trait"},"1:14429:2280":{"crate_id":1,"path":["std","sys","unix","fs","FileTimes"],"kind":"struct"},"1:859:2234":{"crate_id":1,"path":["std","thread","scoped","ScopedJoinHandle"],"kind":"struct"},"6:586:36525":{"crate_id":6,"path":["libc","unix","pollfd"],"kind":"struct"},"2:5080:2205":{"crate_id":2,"path":["core","cell","Cell"],"kind":"struct"},"12:2072:2041":{"crate_id":12,"path":["hashbrown","set","Union"],"kind":"struct"},"1:15899:1769":{"crate_id":1,"path":["std","i128"],"kind":"primitive"},"2:3465:2084":{"crate_id":2,"path":["core","ops","arith","AddAssign"],"kind":"trait"},"6:4425:39570":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlmsghdr"],"kind":"struct"},"2:5036:2860":{"crate_id":2,"path":["core","cell","once","OnceCell"],"kind":"struct"},"6:5260:40154":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","mallinfo"],"kind":"struct"},"16:4439:42606":{"crate_id":16,"path":["gimli","constants","DwAccess"],"kind":"struct"},"1:11952:2101":{"crate_id":1,"path":["std","sync","mpsc","TryIter"],"kind":"struct"},"6:5178:40170":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","statx_timestamp"],"kind":"struct"},"1:4829:2117":{"crate_id":1,"path":["std","net","ip","display_buffer","IpDisplayBuffer"],"kind":"struct"},"2:24171:2991":{"crate_id":2,"path":["core","num","bignum","Big32x40"],"kind":"struct"},"2:48028:84":{"crate_id":2,"path":["core","sync","atomic","AtomicI8"],"kind":"struct"},"16:5605:3600":{"crate_id":16,"path":["gimli","read","cfi","FrameDescriptionEntry"],"kind":"struct"},"2:3366:215":{"crate_id":2,"path":["core","marker","Send"],"kind":"trait"},"1:11245:2398":{"crate_id":1,"path":["std","os","unix","net","ancillary","SocketCred"],"kind":"struct"},"16:7449:3555":{"crate_id":16,"path":["gimli","read","unit","DebuggingInformationEntry"],"kind":"struct"},"6:3966:39521":{"crate_id":6,"path":["libc","unix","linux_like","linux","fsid_t"],"kind":"struct"},"2:3449:2438":{"crate_id":2,"path":["core","ops","arith","Div"],"kind":"trait"},"12:2404:59418":{"crate_id":12,"path":["hashbrown","raw","Fallibility"],"kind":"enum"},"6:161:36207":{"crate_id":6,"path":["libc","unix","fpos_t"],"kind":"enum"},"17:12250:48585":{"crate_id":17,"path":["object","macho","ThreadCommand"],"kind":"struct"},"17:13917:49843":{"crate_id":17,"path":["object","pe","ImageSeparateDebugHeader"],"kind":"struct"},"16:4271:42558":{"crate_id":16,"path":["gimli","constants","DwForm"],"kind":"struct"},"2:2279:2747":{"crate_id":2,"path":["core","ptr","metadata","PtrComponents"],"kind":"struct"},"17:12731:48684":{"crate_id":17,"path":["object","macho","Nlist64"],"kind":"struct"},"16:6931:3849":{"crate_id":16,"path":["gimli","read","op","EvaluationState"],"kind":"enum"},"17:12573:48607":{"crate_id":17,"path":["object","macho","BuildToolVersion"],"kind":"struct"},"6:5478:40193":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_data"],"kind":"union"},"2:48577:2459":{"crate_id":2,"path":["core","fmt","num","Octal"],"kind":"struct"},"6:1544:37408":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreq_source"],"kind":"struct"},"5:1533:2199":{"crate_id":5,"path":["alloc","collections","btree","map","entry","OccupiedEntry"],"kind":"struct"},"1:15887:1759":{"crate_id":1,"path":["std","array"],"kind":"primitive"},"12:1666:3457":{"crate_id":12,"path":["hashbrown","rustc_entry","RustcEntry"],"kind":"enum"},"6:4067:39533":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_envelope"],"kind":"struct"},"17:12237:48584":{"crate_id":17,"path":["object","macho","DylinkerCommand"],"kind":"struct"},"2:47313:1935":{"crate_id":2,"path":["core","iter","sources","repeat","Repeat"],"kind":"struct"},"1:15902:1772":{"crate_id":1,"path":["std","u32"],"kind":"primitive"},"1:10999:2004":{"crate_id":1,"path":["std","net","addr","SocketAddr"],"kind":"enum"},"6:6243:40609":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","seccomp_notif_sizes"],"kind":"struct"},"17:10223:3904":{"crate_id":17,"path":["object","read","elf","file","ElfFile"],"kind":"struct"},"2:46669:2960":{"crate_id":2,"path":["core","char","EscapeUnicode"],"kind":"struct"},"16:3402:3535":{"crate_id":16,"path":["gimli","common","SectionId"],"kind":"enum"},"1:3371:1917":{"crate_id":1,"path":["std","io","buffered","bufwriter","BufWriter"],"kind":"struct"},"5:853:109":{"crate_id":5,"path":["alloc","borrow","Cow"],"kind":"enum"},"17:12318:48589":{"crate_id":17,"path":["object","macho","DysymtabCommand"],"kind":"struct"},"8:0:1727":{"crate_id":8,"path":["cfg_if"],"kind":"module"},"2:51855:2664":{"crate_id":2,"path":["core","core_arch","simd","u64x2"],"kind":"struct"},"2:3375:221":{"crate_id":2,"path":["core","marker","StructuralEq"],"kind":"trait"},"16:6717:3631":{"crate_id":16,"path":["gimli","read","op","Operation"],"kind":"enum"},"17:11068:3882":{"crate_id":17,"path":["object","read","SectionIndex"],"kind":"struct"},"17:11142:43720":{"crate_id":17,"path":["object","read","SymbolMapName"],"kind":"struct"},"2:3378:224":{"crate_id":2,"path":["core","marker","Sync"],"kind":"trait"},"6:5311:40181":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","rtentry"],"kind":"struct"},"17:13573:49751":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation32V2"],"kind":"struct"},"1:3459:1919":{"crate_id":1,"path":["std","io","buffered","linewriter","LineWriter"],"kind":"struct"},"2:22836:2582":{"crate_id":2,"path":["core","core_simd","swizzle","reverse","Reverse"],"kind":"struct"},"12:1784:59422":{"crate_id":12,"path":["hashbrown","scopeguard","ScopeGuard"],"kind":"struct"},"17:13016:49146":{"crate_id":17,"path":["object","pe","ImageFileHeader"],"kind":"struct"},"2:49115:55714":{"crate_id":2,"path":["core","hash","sip","SipHasher24"],"kind":"struct"},"17:9131:43703":{"crate_id":17,"path":["object","common","RelocationEncoding"],"kind":"enum"},"2:23240:1997":{"crate_id":2,"path":["core","core_simd","lane_count","SupportedLaneCount"],"kind":"trait"},"16:5869:191":{"crate_id":16,"path":["gimli","read","cfi","Pointer"],"kind":"enum"},"6:545:36522":{"crate_id":6,"path":["libc","unix","rusage"],"kind":"struct"},"2:3520:2545":{"crate_id":2,"path":["core","ops","bit","BitAndAssign"],"kind":"trait"},"2:14:1844":{"crate_id":2,"path":["core","write"],"kind":"macro"},"2:10848:2045":{"crate_id":2,"path":["core","hash","BuildHasher"],"kind":"trait"},"2:53225:2639":{"crate_id":2,"path":["core","core_arch","simd","i16x32"],"kind":"struct"},"2:10252:2901":{"crate_id":2,"path":["core","fmt","builders","PadAdapterState"],"kind":"struct"},"2:52693:2645":{"crate_id":2,"path":["core","core_arch","simd","i64x4"],"kind":"struct"},"2:51692:2625":{"crate_id":2,"path":["core","core_arch","simd","f32x2"],"kind":"struct"},"6:1669:37420":{"crate_id":6,"path":["libc","unix","linux_like","ifaddrs"],"kind":"struct"},"17:607:43695":{"crate_id":17,"path":["object","read","any","Comdat"],"kind":"struct"},"17:13129:49206":{"crate_id":17,"path":["object","pe","ImageNtHeaders64"],"kind":"struct"},"9:963:3378":{"crate_id":9,"path":["miniz_oxide","MZFlush"],"kind":"enum"},"1:13481:2120":{"crate_id":1,"path":["std","sys","unix","os_str","Slice"],"kind":"struct"},"2:7161:2722":{"crate_id":2,"path":["core","iter","adapters","intersperse","IntersperseWith"],"kind":"struct"},"17:11769:44631":{"crate_id":17,"path":["object","elf","Vernaux"],"kind":"struct"},"17:13515:49744":{"crate_id":17,"path":["object","pe","ImageResourceDirectoryString"],"kind":"struct"},"17:10925:44011":{"crate_id":17,"path":["object","read","pe","file","PeComdat"],"kind":"struct"},"2:2767:584":{"crate_id":2,"path":["core","ptr","drop_in_place"],"kind":"function"},"5:3825:2034":{"crate_id":5,"path":["alloc","collections","linked_list","Iter"],"kind":"struct"},"9:900:41404":{"crate_id":9,"path":["miniz_oxide","inflate","core","LocalVars"],"kind":"struct"},"2:49580:2925":{"crate_id":2,"path":["core","slice","iter","Chunks"],"kind":"struct"},"17:9183:3881":{"crate_id":17,"path":["object","common","SectionFlags"],"kind":"enum"},"2:3176:136":{"crate_id":2,"path":["core","convert","From"],"kind":"trait"},"17:11547:44409":{"crate_id":17,"path":["object","elf","Sym32"],"kind":"struct"},"1:14795:50504":{"crate_id":1,"path":["std","sys","unix","process","process_inner","posix_spawn","PosixSpawnFileActions"],"kind":"struct"},"12:353:59419":{"crate_id":12,"path":["hashbrown","raw","RawIterRange"],"kind":"struct"},"2:46956:2703":{"crate_id":2,"path":["core","iter","adapters","filter","Filter"],"kind":"struct"},"12:162:3448":{"crate_id":12,"path":["hashbrown","raw","Bucket"],"kind":"struct"},"1:10217:43696":{"crate_id":1,"path":["std","backtrace_rs","symbolize","Symbol"],"kind":"struct"},"17:12921:49144":{"crate_id":17,"path":["object","pe","ImageOs2Header"],"kind":"struct"},"12:2036:2035":{"crate_id":12,"path":["hashbrown","set","IntoIter"],"kind":"struct"},"1:6924:10373":{"crate_id":1,"path":["std","panic","always_abort"],"kind":"function"},"1:12558:129":{"crate_id":1,"path":["std","sys","unix","fs","File"],"kind":"struct"},"12:1162:3444":{"crate_id":12,"path":["hashbrown","map","EntryRef"],"kind":"enum"},"2:22864:56168":{"crate_id":2,"path":["core","core_simd","swizzle","rotate_lanes_right","Rotate"],"kind":"struct"},"2:46277:201":{"crate_id":2,"path":["core","ops","range","RangeToInclusive"],"kind":"struct"},"2:47322:31055":{"crate_id":2,"path":["core","iter","sources","repeat_with","RepeatWith"],"kind":"struct"},"16:6595:3560":{"crate_id":16,"path":["gimli","read","loclists","LocListIter"],"kind":"struct"},"2:3371:1866":{"crate_id":2,"path":["core","marker","Sized"],"kind":"trait"},"2:50526:2971":{"crate_id":2,"path":["core","str","IsAsciiWhitespace"],"kind":"struct"},"2:2215:1057":{"crate_id":2,"path":["core","ptr"],"kind":"module"},"6:1606:37415":{"crate_id":6,"path":["libc","unix","linux_like","tm"],"kind":"struct"},"2:53743:17831":{"crate_id":2,"path":["core","core_arch","x86","__m512i"],"kind":"struct"},"5:8279:196":{"crate_id":5,"path":["alloc","collections","btree","set","Range"],"kind":"struct"},"17:9746:43711":{"crate_id":17,"path":["object","read","any","ComdatIterator"],"kind":"struct"},"1:8295:2103":{"crate_id":1,"path":["std","sync","mpsc","SyncSender"],"kind":"struct"},"6:3907:39517":{"crate_id":6,"path":["libc","unix","linux_like","linux","spwd"],"kind":"struct"},"17:12674:48675":{"crate_id":17,"path":["object","macho","SourceVersionCommand"],"kind":"struct"},"17:10198:43782":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdat"],"kind":"struct"},"17:9826:3938":{"crate_id":17,"path":["object","read","any","SymbolTable"],"kind":"struct"},"16:6604:3629":{"crate_id":16,"path":["gimli","read","loclists","LocationListEntry"],"kind":"struct"},"17:12585:48621":{"crate_id":17,"path":["object","macho","DyldInfoCommand"],"kind":"struct"},"1:14647:51010":{"crate_id":1,"path":["std","sys","unix","process","process_common","ProgramKind"],"kind":"enum"},"17:10082:3973":{"crate_id":17,"path":["object","read","coff","section","CoffSegmentIterator"],"kind":"struct"},"1:10517:2052":{"crate_id":1,"path":["std","collections","hash","map","RandomState"],"kind":"struct"},"2:10574:2459":{"crate_id":2,"path":["core","fmt","Octal"],"kind":"trait"},"1:3405:1912":{"crate_id":1,"path":["std","io","buffered","bufwriter","WriterPanicked"],"kind":"struct"},"17:12209:48582":{"crate_id":17,"path":["object","macho","SubLibraryCommand"],"kind":"struct"},"2:5531:3111":{"crate_id":2,"path":["core","char","REPLACEMENT_CHARACTER"],"kind":"constant"},"6:539:36521":{"crate_id":6,"path":["libc","unix","rlimit"],"kind":"struct"},"1:11292:10370":{"crate_id":1,"path":["std","os","linux","raw","arch","stat"],"kind":"struct"},"17:10187:43783":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdatIterator"],"kind":"struct"},"16:7369:3548":{"crate_id":16,"path":["gimli","read","unit","DebugInfoUnitHeadersIter"],"kind":"struct"},"2:49809:2917":{"crate_id":2,"path":["core","str","iter","RSplit"],"kind":"struct"},"17:11530:44402":{"crate_id":17,"path":["object","elf","CompressionHeader64"],"kind":"struct"},"16:6190:3619":{"crate_id":16,"path":["gimli","read","line","LineInstruction"],"kind":"enum"},"1:9267:53399":{"crate_id":1,"path":["std","sys_common","backtrace","_print","DisplayBacktrace"],"kind":"struct"},"6:4321:39557":{"crate_id":6,"path":["libc","unix","linux_like","linux","arpd_request"],"kind":"struct"},"11:54:3434":{"crate_id":11,"path":["adler","Adler32"],"kind":"struct"},"6:6034:10370":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stat"],"kind":"struct"},"17:13708:49762":{"crate_id":17,"path":["object","pe","ImageHotPatchInfo"],"kind":"struct"},"16:3051:3863":{"crate_id":16,"path":["gimli","common","DebugMacinfoOffset"],"kind":"struct"},"2:47017:2708":{"crate_id":2,"path":["core","iter","adapters","map","Map"],"kind":"struct"},"16:6630:3838":{"crate_id":16,"path":["gimli","read","lookup","DebugLookup"],"kind":"struct"},"6:6057:37373":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stat64"],"kind":"struct"},"1:1113:6995":{"crate_id":1,"path":["std","backtrace","BytesOrWide"],"kind":"enum"},"2:49761:2941":{"crate_id":2,"path":["core","str","iter","Chars"],"kind":"struct"},"2:46657:3120":{"crate_id":2,"path":["core","char","decode","DecodeUtf16Error"],"kind":"struct"},"12:1103:2198":{"crate_id":12,"path":["hashbrown","map","Entry"],"kind":"enum"},"1:6723:1983":{"crate_id":1,"path":["std","os","fd","owned","OwnedFd"],"kind":"struct"},"12:880:2037":{"crate_id":12,"path":["hashbrown","map","DrainFilter"],"kind":"struct"},"2:53811:17835":{"crate_id":2,"path":["core","core_arch","x86","__m256bh"],"kind":"struct"},"2:5300:2113":{"crate_id":2,"path":["core","cell","UnsafeCell"],"kind":"struct"},"2:32642:56896":{"crate_id":2,"path":["core","mem","valid_align","ValidAlignEnum16"],"kind":"enum"},"17:9240:3874":{"crate_id":17,"path":["object","endian","Endianness"],"kind":"enum"},"2:47117:2562":{"crate_id":2,"path":["core","iter","adapters","zip","Zip"],"kind":"struct"},"17:12700:48682":{"crate_id":17,"path":["object","macho","NoteCommand"],"kind":"struct"},"6:4208:39547":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Sym"],"kind":"struct"},"1:2422:8019":{"crate_id":1,"path":["std","env","ArgsOs"],"kind":"struct"},"17:299:60286":{"crate_id":17,"path":["object","read","util","DebugLen"],"kind":"struct"},"16:3521:42083":{"crate_id":16,"path":["gimli","arch","X86"],"kind":"struct"},"18:801:3994":{"crate_id":18,"path":["memchr","memmem","FindRevIter"],"kind":"struct"},"6:5419:40188":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ptrace_peeksiginfo_args"],"kind":"struct"},"5:2005:2037":{"crate_id":5,"path":["alloc","collections","btree","map","DrainFilter"],"kind":"struct"},"9:157:3330":{"crate_id":9,"path":["miniz_oxide","deflate","core","CompressorOxide"],"kind":"struct"},"6:1727:37426":{"crate_id":6,"path":["libc","unix","linux_like","epoll_event"],"kind":"struct"},"1:2654:181":{"crate_id":1,"path":["std","ffi","os_str","OsStr"],"kind":"struct"},"2:48931:2458":{"crate_id":2,"path":["core","fmt","FlagV1"],"kind":"enum"},"12:971:2196":{"crate_id":12,"path":["hashbrown","map","RawVacantEntryMut"],"kind":"struct"},"5:8217:3151":{"crate_id":5,"path":["alloc","alloc","Global"],"kind":"struct"},"18:896:4002":{"crate_id":18,"path":["memchr","memmem","SearcherRevKind"],"kind":"enum"},"16:6549:3563":{"crate_id":16,"path":["gimli","read","loclists","RawLocListIter"],"kind":"struct"},"1:4410:1896":{"crate_id":1,"path":["std","io","Read"],"kind":"trait"},"1:5636:2394":{"crate_id":1,"path":["std","os","unix","net","addr","AsciiEscaped"],"kind":"struct"},"2:47026:2723":{"crate_id":2,"path":["core","iter","adapters","map_while","MapWhile"],"kind":"struct"},"1:14968:2165":{"crate_id":1,"path":["std","sys_common","process","CommandEnvs"],"kind":"struct"},"1:1466:2194":{"crate_id":1,"path":["std","collections","hash","map","RawEntryMut"],"kind":"enum"},"17:9579:129":{"crate_id":17,"path":["object","read","any","File"],"kind":"struct"},"2:9156:2046":{"crate_id":2,"path":["core","iter","traits","marker","FusedIterator"],"kind":"trait"},"1:1452:2191":{"crate_id":1,"path":["std","collections","hash","map","IntoKeys"],"kind":"struct"},"2:50518:2969":{"crate_id":2,"path":["core","str","CharEscapeDefault"],"kind":"struct"},"9:749:3315":{"crate_id":9,"path":["miniz_oxide","deflate","core","TDEFLStatus"],"kind":"enum"},"1:5860:2331":{"crate_id":1,"path":["std","os","unix","net","datagram","UnixDatagram"],"kind":"struct"},"2:50530:2972":{"crate_id":2,"path":["core","str","IsNotEmpty"],"kind":"struct"},"5:4709:57153":{"crate_id":5,"path":["alloc","collections","vec_deque","drop","Dropper"],"kind":"struct"},"1:11912:50745":{"crate_id":1,"path":["std","sync","mpsc","cache_aligned","CacheAligned"],"kind":"struct"},"2:23104:2742":{"crate_id":2,"path":["core","core_simd","elements","int","SimdInt"],"kind":"trait"},"17:11494:44341":{"crate_id":17,"path":["object","elf","SectionHeader64"],"kind":"struct"},"16:6980:3633":{"crate_id":16,"path":["gimli","read","op","EvaluationResult"],"kind":"enum"},"6:5447:40192":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ptrace_syscall_info"],"kind":"struct"},"1:7062:50980":{"crate_id":1,"path":["std","path","fmt","DebugHelper"],"kind":"struct"},"16:6342:3622":{"crate_id":16,"path":["gimli","read","line","LineProgramHeader"],"kind":"struct"},"2:46905:1904":{"crate_id":2,"path":["core","iter","adapters","chain","Chain"],"kind":"struct"},"17:11671:44452":{"crate_id":17,"path":["object","elf","ProgramHeader64"],"kind":"struct"},"17:13463:49736":{"crate_id":17,"path":["object","pe","ImageBoundImportDescriptor"],"kind":"struct"},"1:15633:50480":{"crate_id":1,"path":["std","backtrace_rs","symbolize","gimli","mmap","Mmap"],"kind":"struct"},"2:32628:2216":{"crate_id":2,"path":["core","mem","maybe_uninit","MaybeUninit"],"kind":"union"},"17:13908:49842":{"crate_id":17,"path":["object","pe","ImageFunctionEntry64"],"kind":"struct"},"2:56679:241":{"crate_id":2,"path":["core","core_simd","fmt","fmt","Wrapper"],"kind":"struct"},"1:12053:2356":{"crate_id":1,"path":["std","sync","condvar","WaitTimeoutResult"],"kind":"struct"},"6:1764:37429":{"crate_id":6,"path":["libc","unix","linux_like","sigevent"],"kind":"struct"},"2:53659:2631":{"crate_id":2,"path":["core","core_arch","simd","f64x8"],"kind":"struct"},"2:10580:2462":{"crate_id":2,"path":["core","fmt","UpperHex"],"kind":"trait"},"1:1447:2190":{"crate_id":1,"path":["std","collections","hash","map","ValuesMut"],"kind":"struct"},"1:2141:2039":{"crate_id":1,"path":["std","collections","hash","set","Difference"],"kind":"struct"},"18:790:3993":{"crate_id":18,"path":["memchr","memmem","FindIter"],"kind":"struct"},"6:4135:39541":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_ff_erase"],"kind":"struct"},"2:50222:2506":{"crate_id":2,"path":["core","str","pattern","CharArraySearcher"],"kind":"struct"},"1:11270:2343":{"crate_id":1,"path":["std","os","unix","ucred","UCred"],"kind":"struct"},"5:1518:2200":{"crate_id":5,"path":["alloc","collections","btree","map","entry","VacantEntry"],"kind":"struct"},"1:15849:54116":{"crate_id":1,"path":["std","backtrace_rs","symbolize","gimli","Cache"],"kind":"struct"},"17:12716:48683":{"crate_id":17,"path":["object","macho","Nlist32"],"kind":"struct"},"1:5278:2329":{"crate_id":1,"path":["std","net","udp","UdpSocket"],"kind":"struct"},"17:12646:48673":{"crate_id":17,"path":["object","macho","FvmfileCommand"],"kind":"struct"},"12:933:2193":{"crate_id":12,"path":["hashbrown","map","RawEntryBuilderMut"],"kind":"struct"},"1:2130:2037":{"crate_id":1,"path":["std","collections","hash","set","DrainFilter"],"kind":"struct"},"6:4332:39558":{"crate_id":6,"path":["libc","unix","linux_like","linux","inotify_event"],"kind":"struct"},"6:5998:36398":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","flock"],"kind":"struct"},"17:13817:49807":{"crate_id":17,"path":["object","pe","ImageEnclaveConfig64"],"kind":"struct"},"1:8096:2262":{"crate_id":1,"path":["std","sync","mpsc","stream","Packet"],"kind":"struct"},"6:5210:40173":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__timeval"],"kind":"struct"},"5:3402:2039":{"crate_id":5,"path":["alloc","collections","btree","set","Difference"],"kind":"struct"},"17:4008:43903":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbolIterator"],"kind":"struct"},"2:24922:171":{"crate_id":2,"path":["core","num","nonzero","NonZeroU128"],"kind":"struct"},"17:13472:49737":{"crate_id":17,"path":["object","pe","ImageBoundForwarderRef"],"kind":"struct"},"16:3478:3813":{"crate_id":16,"path":["gimli","common","DwarfFileType"],"kind":"enum"},"12:2412:59415":{"crate_id":12,"path":["hashbrown","raw","TableLayout"],"kind":"struct"},"18:866:4000":{"crate_id":18,"path":["memchr","memmem","SearcherKind"],"kind":"enum"},"18:621:60312":{"crate_id":18,"path":["memchr","cow","Imp"],"kind":"struct"},"1:11359:2121":{"crate_id":1,"path":["std","path","Prefix"],"kind":"enum"},"17:11640:44450":{"crate_id":17,"path":["object","elf","Rela64"],"kind":"struct"},"17:12482:48601":{"crate_id":17,"path":["object","macho","LinkeditDataCommand"],"kind":"struct"},"16:5443:3595":{"crate_id":16,"path":["gimli","read","cfi","CfiEntriesIter"],"kind":"struct"},"1:14665:2157":{"crate_id":1,"path":["std","sys","unix","process","process_common","ExitCode"],"kind":"struct"},"2:24988:170":{"crate_id":2,"path":["core","num","nonzero","NonZeroI8"],"kind":"struct"},"2:3444:2434":{"crate_id":2,"path":["core","ops","arith","Mul"],"kind":"trait"},"2:48861:108":{"crate_id":2,"path":["core","fmt","rt","v1","Count"],"kind":"enum"},"5:1909:57154":{"crate_id":5,"path":["alloc","collections","btree","map","drop","DropGuard"],"kind":"struct"},"6:618:36530":{"crate_id":6,"path":["libc","unix","tms"],"kind":"struct"},"17:9796:60244":{"crate_id":17,"path":["object","read","any","ComdatSectionIteratorInternal"],"kind":"enum"},"1:15894:1764":{"crate_id":1,"path":["std","f64"],"kind":"primitive"},"6:4116:39539":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_effect"],"kind":"struct"},"1:5553:1957":{"crate_id":1,"path":["std","os","unix","fs","FileTypeExt"],"kind":"trait"},"1:11890:53380":{"crate_id":1,"path":["std","sync","mpsc","blocking","SignalToken"],"kind":"struct"},"1:11432:2132":{"crate_id":1,"path":["std","path","PrefixComponent"],"kind":"struct"},"2:51358:55740":{"crate_id":2,"path":["core","core_arch","simd","u8x2"],"kind":"struct"},"2:6642:2705":{"crate_id":2,"path":["core","iter","adapters","flatten","FlatMap"],"kind":"struct"},"5:2266:57188":{"crate_id":5,"path":["alloc","collections","btree","mem","replace","PanicGuard"],"kind":"struct"},"2:46860:8520":{"crate_id":2,"path":["core","ffi","VaList"],"kind":"struct"},"16:3494:42082":{"crate_id":16,"path":["gimli","arch","Arm"],"kind":"struct"},"16:3177:3808":{"crate_id":16,"path":["gimli","common","DebugRngListsIndex"],"kind":"struct"},"1:7834:2262":{"crate_id":1,"path":["std","sync","mpsc","oneshot","Packet"],"kind":"struct"},"2:57954:55764":{"crate_id":2,"path":["core","core_simd","vector","ptr","SimdConstPtr"],"kind":"struct"},"1:11088:2010":{"crate_id":1,"path":["std","net","ip","Ipv6Addr"],"kind":"struct"},"5:1760:3241":{"crate_id":5,"path":["alloc","collections","btree","map","RangeMut"],"kind":"struct"},"2:46365:2738":{"crate_id":2,"path":["core","any","tags","MaybeSizedValue"],"kind":"struct"},"0:0:1627":{"crate_id":0,"path":["winapi"],"kind":"module"},"17:9004:43699":{"crate_id":17,"path":["object","common","ComdatKind"],"kind":"enum"},"17:13961:49851":{"crate_id":17,"path":["object","pe","ImportObjectHeader"],"kind":"struct"},"1:11491:2134":{"crate_id":1,"path":["std","path","Components"],"kind":"struct"},"6:4509:39579":{"crate_id":6,"path":["libc","unix","linux_like","linux","af_alg_iv"],"kind":"struct"},"1:15905:1775":{"crate_id":1,"path":["std","isize"],"kind":"primitive"},"17:10115:3976":{"crate_id":17,"path":["object","read","coff","section","CoffSection"],"kind":"struct"},"2:50090:2959":{"crate_id":2,"path":["core","str","iter","EscapeDebug"],"kind":"struct"},"2:24442:35547":{"crate_id":2,"path":["core","num","flt2dec","decoder","FullDecoded"],"kind":"enum"},"17:13215:49256":{"crate_id":17,"path":["object","pe","ImageSectionHeader"],"kind":"struct"},"16:7768:3553":{"crate_id":16,"path":["gimli","read","unit","DebugTypes"],"kind":"struct"},"17:2512:3925":{"crate_id":17,"path":["object","read","elf","relocation","ElfDynamicRelocationIterator"],"kind":"struct"},"17:10058:3979":{"crate_id":17,"path":["object","read","coff","file","CoffFile"],"kind":"struct"},"17:9883:60242":{"crate_id":17,"path":["object","read","any","SymbolIteratorInternal"],"kind":"enum"},"1:6481:50395":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt","st_ctime"],"kind":"foreign_type"},"2:32634:3055":{"crate_id":2,"path":["core","mem","valid_align","ValidAlign"],"kind":"struct"},"11:0:1730":{"crate_id":11,"path":["adler"],"kind":"module"},"5:7935:57160":{"crate_id":5,"path":["alloc","vec","retain_mut","BackshiftOnDrop"],"kind":"struct"},"2:50522:2973":{"crate_id":2,"path":["core","str","IsWhitespace"],"kind":"struct"},"5:777:57251":{"crate_id":5,"path":["alloc","boxed","from","StringError"],"kind":"struct"},"1:11288:1991":{"crate_id":1,"path":["std","os","linux","process","PidFd"],"kind":"struct"},"12:952:2195":{"crate_id":12,"path":["hashbrown","map","RawOccupiedEntryMut"],"kind":"struct"},"17:10127:3938":{"crate_id":17,"path":["object","read","coff","symbol","SymbolTable"],"kind":"struct"},"17:13196:49254":{"crate_id":17,"path":["object","pe","AnonObjectHeaderBigobj"],"kind":"struct"},"2:49749:2768":{"crate_id":2,"path":["core","str","error","ParseBoolError"],"kind":"struct"},"2:50510:2968":{"crate_id":2,"path":["core","str","CharEscapeDebugContinue"],"kind":"struct"},"1:10703:2302":{"crate_id":1,"path":["std","io","buffered","linewritershim","LineWriterShim"],"kind":"struct"},"16:7355:3547":{"crate_id":16,"path":["gimli","read","unit","DebugInfo"],"kind":"struct"},"2:10582:191":{"crate_id":2,"path":["core","fmt","Pointer"],"kind":"trait"},"6:5398:40186":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","Elf32_Chdr"],"kind":"struct"},"1:1441:2037":{"crate_id":1,"path":["std","collections","hash","map","DrainFilter"],"kind":"struct"},"2:39186:2620":{"crate_id":2,"path":["core","marker","PhantomPinned"],"kind":"struct"},"2:24334:2812":{"crate_id":2,"path":["core","num","dec2flt","common","BiasedFp"],"kind":"struct"},"1:8732:2370":{"crate_id":1,"path":["std","sync","once","WaiterQueue"],"kind":"struct"},"18:645:4006":{"crate_id":18,"path":["memchr","memmem","prefilter","PrefilterFn"],"kind":"struct"},"1:696:2228":{"crate_id":1,"path":["std","thread","local","LocalKey"],"kind":"struct"},"6:1551:37409":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr"],"kind":"struct"},"2:5000:2859":{"crate_id":2,"path":["core","cell","lazy","LazyCell"],"kind":"struct"},"1:5505:1954":{"crate_id":1,"path":["std","os","unix","fs","PermissionsExt"],"kind":"trait"},"2:5145:2231":{"crate_id":2,"path":["core","cell","RefCell"],"kind":"struct"},"1:15901:1771":{"crate_id":1,"path":["std","u16"],"kind":"primitive"},"17:9466:43708":{"crate_id":17,"path":["object","endian","I64Bytes"],"kind":"struct"},"16:7659:3646":{"crate_id":16,"path":["gimli","read","unit","AttrsIter"],"kind":"struct"},"5:6775:3182":{"crate_id":5,"path":["alloc","sync","ArcInner"],"kind":"struct"},"2:24074:2577":{"crate_id":2,"path":["core","core_simd","vector","SimdElement"],"kind":"trait"},"17:12302:48588":{"crate_id":17,"path":["object","macho","SymtabCommand"],"kind":"struct"},"1:2126:2036":{"crate_id":1,"path":["std","collections","hash","set","Drain"],"kind":"struct"},"16:7141:3642":{"crate_id":16,"path":["gimli","read","rnglists","DebugRanges"],"kind":"struct"},"2:21:676":{"crate_id":2,"path":["core","format_args"],"kind":"macro"},"16:7208:3644":{"crate_id":16,"path":["gimli","read","rnglists","RawRngListEntry"],"kind":"enum"},"16:5698:3605":{"crate_id":16,"path":["gimli","read","cfi","UnwindTableRow"],"kind":"struct"},"2:48112:81":{"crate_id":2,"path":["core","sync","atomic","AtomicI16"],"kind":"struct"},"2:3528:2549":{"crate_id":2,"path":["core","ops","bit","BitXorAssign"],"kind":"trait"},"6:6954:39713":{"crate_id":6,"path":["libc","unix","linux_like","linux","canfd_frame"],"kind":"struct"},"1:10511:6993":{"crate_id":1,"path":["std","backtrace","RawFrame"],"kind":"enum"},"2:8719:121":{"crate_id":2,"path":["core","iter","traits","double_ended","DoubleEndedIterator"],"kind":"trait"},"17:9361:43705":{"crate_id":17,"path":["object","endian","U64Bytes"],"kind":"struct"},"2:25120:166":{"crate_id":2,"path":["core","num","nonzero","NonZeroI128"],"kind":"struct"},"1:14894:2080":{"crate_id":1,"path":["std","sys","unix","time","SystemTime"],"kind":"struct"},"17:11937:43936":{"crate_id":17,"path":["object","macho","FatHeader"],"kind":"struct"},"5:8389:102":{"crate_id":5,"path":["alloc","ffi","c_str","CString"],"kind":"struct"},"17:13549:49748":{"crate_id":17,"path":["object","pe","ImageDynamicRelocationTable"],"kind":"struct"},"14:231:3155":{"crate_id":14,"path":["rustc_demangle","v0","ParseError"],"kind":"enum"},"1:10986:1908":{"crate_id":1,"path":["std","io","Split"],"kind":"struct"},"2:4:985":{"crate_id":2,"path":["core","panic"],"kind":"macro"},"2:3837:2427":{"crate_id":2,"path":["core","ops","try_trait","Residual"],"kind":"trait"},"6:6908:39707":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_condattr_t"],"kind":"struct"},"17:10622:43899":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandIterator"],"kind":"struct"},"16:4716:42691":{"crate_id":16,"path":["gimli","constants","DwOrd"],"kind":"struct"},"2:2955:179":{"crate_id":2,"path":["core","cmp","Ord"],"kind":"trait"},"2:51833:2661":{"crate_id":2,"path":["core","core_arch","simd","u32x4"],"kind":"struct"},"2:3826:229":{"crate_id":2,"path":["core","ops","try_trait","Try"],"kind":"trait"},"5:5910:3147":{"crate_id":5,"path":["alloc","slice","Join"],"kind":"trait"},"1:2481:2273":{"crate_id":1,"path":["std","error","Report"],"kind":"struct"},"16:5923:3611":{"crate_id":16,"path":["gimli","read","dwarf","Unit"],"kind":"struct"},"6:1748:37428":{"crate_id":6,"path":["libc","unix","linux_like","utsname"],"kind":"struct"},"6:4416:39569":{"crate_id":6,"path":["libc","unix","linux_like","linux","seccomp_data"],"kind":"struct"},"17:12469:48600":{"crate_id":17,"path":["object","macho","RpathCommand"],"kind":"struct"},"2:48591:2462":{"crate_id":2,"path":["core","fmt","num","UpperHex"],"kind":"struct"},"17:10814:3873":{"crate_id":17,"path":["object","read","macho","section","MachOSectionInternal"],"kind":"struct"},"1:15903:1773":{"crate_id":1,"path":["std","u64"],"kind":"primitive"},"6:4356:39561":{"crate_id":6,"path":["libc","unix","linux_like","linux","regmatch_t"],"kind":"struct"},"2:10247:2900":{"crate_id":2,"path":["core","fmt","builders","PadAdapter"],"kind":"struct"},"1:11507:2136":{"crate_id":1,"path":["std","path","Ancestors"],"kind":"struct"},"12:1238:3447":{"crate_id":12,"path":["hashbrown","map","VacantEntryRef"],"kind":"struct"},"5:5962:57152":{"crate_id":5,"path":["alloc","slice","merge","MergeHole"],"kind":"struct"},"17:9646:60243":{"crate_id":17,"path":["object","read","any","SegmentIteratorInternal"],"kind":"enum"},"17:12183:48580":{"crate_id":17,"path":["object","macho","SubClientCommand"],"kind":"struct"},"17:11234:3913":{"crate_id":17,"path":["object","read","Export"],"kind":"struct"},"7:0:1497":{"crate_id":7,"path":["unwind"],"kind":"module"},"14:47:41999":{"crate_id":14,"path":["rustc_demangle","v0","Demangle"],"kind":"struct"},"5:8549:2037":{"crate_id":5,"path":["alloc","vec","drain_filter","DrainFilter"],"kind":"struct"},"17:10643:43914":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandData"],"kind":"struct"},"1:5730:2399":{"crate_id":1,"path":["std","os","unix","net","ancillary","ScmRights"],"kind":"struct"},"1:14630:8014":{"crate_id":1,"path":["std","sys","unix","os","JoinPathsError"],"kind":"struct"},"6:5186:40171":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","aiocb"],"kind":"struct"},"2:14255:56822":{"crate_id":2,"path":["core","future","from_generator","GenFuture"],"kind":"struct"},"16:2754:3794":{"crate_id":16,"path":["gimli","common","Encoding"],"kind":"struct"},"1:5513:1955":{"crate_id":1,"path":["std","os","unix","fs","OpenOptionsExt"],"kind":"trait"},"12:1256:2201":{"crate_id":12,"path":["hashbrown","map","OccupiedError"],"kind":"struct"},"17:11890:48397":{"crate_id":17,"path":["object","macho","DyldCacheHeader"],"kind":"struct"},"5:3462:2041":{"crate_id":5,"path":["alloc","collections","btree","set","Union"],"kind":"struct"},"1:14634:1990":{"crate_id":1,"path":["std","sys","unix","os_str","Buf"],"kind":"struct"},"5:8472:220":{"crate_id":5,"path":["alloc","string","String"],"kind":"struct"},"2:7938:2560":{"crate_id":2,"path":["core","iter","adapters","zip","zip"],"kind":"function"},"1:1405:2188":{"crate_id":1,"path":["std","collections","hash","map","Keys"],"kind":"struct"},"6:1558:37410":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_in"],"kind":"struct"},"2:51803:2657":{"crate_id":2,"path":["core","core_arch","simd","u16x8"],"kind":"struct"},"6:4012:39526":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_event"],"kind":"struct"},"2:52047:2629":{"crate_id":2,"path":["core","core_arch","simd","f64x2"],"kind":"struct"},"16:7184:3851":{"crate_id":16,"path":["gimli","read","rnglists","RangeListsFormat"],"kind":"enum"},"6:527:36519":{"crate_id":6,"path":["libc","unix","timeval"],"kind":"struct"},"1:1387:2187":{"crate_id":1,"path":["std","collections","hash","map","IterMut"],"kind":"struct"},"17:9326:3951":{"crate_id":17,"path":["object","endian","U32Bytes"],"kind":"struct"},"2:13126:2914":{"crate_id":2,"path":["core","str","iter","SplitInclusive"],"kind":"struct"},"17:13369:49700":{"crate_id":17,"path":["object","pe","ImageBaseRelocation"],"kind":"struct"},"17:11354:3876":{"crate_id":17,"path":["object","read","CompressedData"],"kind":"struct"},"2:4785:1888":{"crate_id":2,"path":["core","array","try_collect_into_array","Guard"],"kind":"struct"},"1:10428:51109":{"crate_id":1,"path":["std","thread","local","fast","DtorState"],"kind":"enum"},"6:5567:40222":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","msqid_ds"],"kind":"struct"},"1:8195:2131":{"crate_id":1,"path":["std","sync","mpsc","sync","State"],"kind":"struct"},"5:8232:3284":{"crate_id":5,"path":["alloc","collections","binary_heap","IntoIterSorted"],"kind":"struct"},"16:3077:3864":{"crate_id":16,"path":["gimli","common","DebugMacroOffset"],"kind":"struct"},"2:50729:2979":{"crate_id":2,"path":["core","task","wake","RawWaker"],"kind":"struct"},"14:194:42000":{"crate_id":14,"path":["rustc_demangle","DemangleStyle"],"kind":"enum"},"17:13361:49699":{"crate_id":17,"path":["object","pe","ImageLinenumber"],"kind":"struct"},"2:5149:2861":{"crate_id":2,"path":["core","cell","BorrowError"],"kind":"struct"},"6:1588:37413":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_ll"],"kind":"struct"},"6:4446:39573":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_nl"],"kind":"struct"},"2:3537:2554":{"crate_id":2,"path":["core","ops","bit","ShrAssign"],"kind":"trait"},"16:4381:42596":{"crate_id":16,"path":["gimli","constants","DwDs"],"kind":"struct"},"17:10913:44010":{"crate_id":17,"path":["object","read","pe","file","PeComdatIterator"],"kind":"struct"},"2:51979:2641":{"crate_id":2,"path":["core","core_arch","simd","i32x4"],"kind":"struct"},"14:56:44125":{"crate_id":14,"path":["rustc_demangle","v0","Ident"],"kind":"struct"},"2:11712:2923":{"crate_id":2,"path":["core","slice","iter","RSplitNMut"],"kind":"struct"},"2:47810:178":{"crate_id":2,"path":["core","option","Option"],"kind":"enum"},"2:46737:3118":{"crate_id":2,"path":["core","char","CaseMappingIter"],"kind":"enum"},"2:47304:31054":{"crate_id":2,"path":["core","iter","sources","once_with","OnceWith"],"kind":"struct"},"17:12070:48515":{"crate_id":17,"path":["object","macho","Section32"],"kind":"struct"},"1:15882:1755":{"crate_id":1,"path":["std","never"],"kind":"primitive"},"17:12003:48451":{"crate_id":17,"path":["object","macho","LoadCommand"],"kind":"struct"},"9:1075:3381":{"crate_id":9,"path":["miniz_oxide","StreamResult"],"kind":"struct"},"6:533:36520":{"crate_id":6,"path":["libc","unix","timespec"],"kind":"struct"},"17:10039:43771":{"crate_id":17,"path":["object","read","archive","ArchiveMember"],"kind":"struct"},"12:895:3436":{"crate_id":12,"path":["hashbrown","map","ConsumeAllOnDrop"],"kind":"struct"},"5:8257:57259":{"crate_id":5,"path":["alloc","collections","btree","merge_iter","Peeked"],"kind":"enum"},"16:3199:3809":{"crate_id":16,"path":["gimli","common","DebugStrOffset"],"kind":"struct"},"2:3674:2208":{"crate_id":2,"path":["core","ops","index","Index"],"kind":"trait"},"6:5547:39430":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","sysinfo"],"kind":"struct"},"9:603:41481":{"crate_id":9,"path":["miniz_oxide","inflate","stream","InflateState"],"kind":"struct"},"16:6643:3839":{"crate_id":16,"path":["gimli","read","lookup","LookupEntryIter"],"kind":"struct"},"16:5348:3589":{"crate_id":16,"path":["gimli","read","cfi","ParsedEhFrameHdr"],"kind":"struct"},"2:51378:55782":{"crate_id":2,"path":["core","core_arch","simd","i8x2"],"kind":"struct"},"14:250:42007":{"crate_id":14,"path":["rustc_demangle","SizeLimitExhausted"],"kind":"struct"},"17:10093:3974":{"crate_id":17,"path":["object","read","coff","section","CoffSegment"],"kind":"struct"},"16:2792:3534":{"crate_id":16,"path":["gimli","common","Register"],"kind":"struct"},"1:1146:6996":{"crate_id":1,"path":["std","backtrace","LazilyResolvedCapture"],"kind":"struct"},"1:8974:50995":{"crate_id":1,"path":["std","sync","rwlock","fmt","LockedPlaceholder"],"kind":"struct"},"1:8217:3235":{"crate_id":1,"path":["std","sync","mpsc","sync","Node"],"kind":"struct"},"1:14379:1993":{"crate_id":1,"path":["std","sys","unix","fd","FileDesc"],"kind":"struct"},"6:1576:37412":{"crate_id":6,"path":["libc","unix","linux_like","addrinfo"],"kind":"struct"},"10:0:1729":{"crate_id":10,"path":["rustc_std_workspace_alloc"],"kind":"module"},"17:10788:43900":{"crate_id":17,"path":["object","read","macho","segment","MachOSegment"],"kind":"struct"},"5:4281:2036":{"crate_id":5,"path":["alloc","collections","vec_deque","drain","Drain"],"kind":"struct"},"6:5488:40194":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","utmpx"],"kind":"struct"},"2:53834:17836":{"crate_id":2,"path":["core","core_arch","x86","__m512bh"],"kind":"struct"},"1:1592:2199":{"crate_id":1,"path":["std","collections","hash","map","OccupiedEntry"],"kind":"struct"},"9:809:2131":{"crate_id":9,"path":["miniz_oxide","inflate","core","State"],"kind":"enum"},"17:13247:49299":{"crate_id":17,"path":["object","pe","ImageSymbolBytes"],"kind":"struct"},"2:11411:2187":{"crate_id":2,"path":["core","slice","iter","IterMut"],"kind":"struct"},"5:8241:2036":{"crate_id":5,"path":["alloc","collections","binary_heap","Drain"],"kind":"struct"},"17:9064:43701":{"crate_id":17,"path":["object","common","SymbolScope"],"kind":"enum"},"5:7551:57154":{"crate_id":5,"path":["alloc","vec","into_iter","drop","DropGuard"],"kind":"struct"},"6:4485:39577":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_setup"],"kind":"struct"},"2:50208:2503":{"crate_id":2,"path":["core","str","pattern","MultiCharEqSearcher"],"kind":"struct"},"17:13331:49369":{"crate_id":17,"path":["object","pe","ImageAuxSymbolSection"],"kind":"struct"},"17:11615:44448":{"crate_id":17,"path":["object","elf","Rela32"],"kind":"struct"},"5:8406:3229":{"crate_id":5,"path":["alloc","ffi","c_str","NulError"],"kind":"struct"},"2:8671:137":{"crate_id":2,"path":["core","iter","traits","collect","FromIterator"],"kind":"trait"},"5:3110:57359":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Mut"],"kind":"struct"},"1:10438:2239":{"crate_id":1,"path":["std","thread","Builder"],"kind":"struct"},"16:5412:3593":{"crate_id":16,"path":["gimli","read","cfi","BaseAddresses"],"kind":"struct"},"1:14437:130":{"crate_id":1,"path":["std","sys","unix","fs","FileType"],"kind":"struct"},"6:6688:40973":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","align","sem_t"],"kind":"struct"},"1:15889:1761":{"crate_id":1,"path":["std","str"],"kind":"primitive"},"16:6504:3627":{"crate_id":16,"path":["gimli","read","loclists","DebugLocLists"],"kind":"struct"},"5:8314:2035":{"crate_id":5,"path":["alloc","collections","vec_deque","into_iter","IntoIter"],"kind":"struct"},"1:4258:1926":{"crate_id":1,"path":["std","io","stdio","StderrLock"],"kind":"struct"},"17:12360:48593":{"crate_id":17,"path":["object","macho","DylibModule32"],"kind":"struct"},"2:22902:56402":{"crate_id":2,"path":["core","core_simd","swizzle","deinterleave","Even"],"kind":"struct"},"17:13281:49364":{"crate_id":17,"path":["object","pe","ImageAuxSymbolTokenDef"],"kind":"struct"},"16:5685:3604":{"crate_id":16,"path":["gimli","read","cfi","RegisterRuleIter"],"kind":"struct"},"1:8715:2219":{"crate_id":1,"path":["std","sync","once","Once"],"kind":"struct"},"16:7721:3558":{"crate_id":16,"path":["gimli","read","unit","EntriesTree"],"kind":"struct"},"2:53621:2666":{"crate_id":2,"path":["core","core_arch","simd","u64x8"],"kind":"struct"},"2:56627:241":{"crate_id":2,"path":["core","core_simd","fmt","fmt","Wrapper"],"kind":"struct"},"1:8446:2348":{"crate_id":1,"path":["std","sync","barrier","Barrier"],"kind":"struct"},"2:50045:1909":{"crate_id":2,"path":["core","str","iter","Lines"],"kind":"struct"},"16:7169:3562":{"crate_id":16,"path":["gimli","read","rnglists","RangeLists"],"kind":"struct"},"2:46233:200":{"crate_id":2,"path":["core","ops","range","RangeTo"],"kind":"struct"},"6:1621:37416":{"crate_id":6,"path":["libc","unix","linux_like","sched_param"],"kind":"struct"},"5:5906:3145":{"crate_id":5,"path":["alloc","slice","Concat"],"kind":"trait"},"6:601:36527":{"crate_id":6,"path":["libc","unix","linger"],"kind":"struct"},"1:8453:2350":{"crate_id":1,"path":["std","sync","barrier","BarrierWaitResult"],"kind":"struct"},"6:4532:39582":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_can_addr"],"kind":"union"},"1:2914:2281":{"crate_id":1,"path":["std","fs","read"],"kind":"function"},"12:399:3450":{"crate_id":12,"path":["hashbrown","raw","RawIntoIter"],"kind":"struct"},"17:10503:3957":{"crate_id":17,"path":["object","read","elf","version","VerneedIterator"],"kind":"struct"},"17:10340:3930":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbolTable"],"kind":"struct"},"5:8287:3142":{"crate_id":5,"path":["alloc","collections","btree","set_val","SetValZST"],"kind":"struct"},"2:10515:1880":{"crate_id":2,"path":["core","fmt","Write"],"kind":"trait"},"2:51532:2656":{"crate_id":2,"path":["core","core_arch","simd","u16x4"],"kind":"struct"},"16:7826:2737":{"crate_id":16,"path":["gimli","read","value","Value"],"kind":"enum"},"2:23382:1972":{"crate_id":2,"path":["core","core_simd","masks","to_bitmask","sealed","Sealed"],"kind":"trait"},"16:2733:3518":{"crate_id":16,"path":["gimli","common","Format"],"kind":"enum"},"17:9517:1906":{"crate_id":17,"path":["object","read","util","Bytes"],"kind":"struct"},"1:11882:2157":{"crate_id":1,"path":["std","process","ExitCode"],"kind":"struct"},"6:6250:40610":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user_fpregs_struct"],"kind":"struct"},"2:9536:2217":{"crate_id":2,"path":["core","panic","unwind_safe","RefUnwindSafe"],"kind":"trait"},"17:11810:44646":{"crate_id":17,"path":["object","elf","HashHeader"],"kind":"struct"},"2:25522:2820":{"crate_id":2,"path":["core","num","saturating","Saturating"],"kind":"struct"},"2:49913:2921":{"crate_id":2,"path":["core","str","iter","RSplitN"],"kind":"struct"},"2:47859:2187":{"crate_id":2,"path":["core","option","IterMut"],"kind":"struct"},"16:7079:3636":{"crate_id":16,"path":["gimli","read","pubnames","PubNamesEntry"],"kind":"struct"},"2:48873:128":{"crate_id":2,"path":["core","fmt","Error"],"kind":"struct"},"2:23428:1972":{"crate_id":2,"path":["core","core_simd","masks","sealed","Sealed"],"kind":"trait"},"2:13334:2495":{"crate_id":2,"path":["core","str","pattern"],"kind":"module"},"16:5948:3800":{"crate_id":16,"path":["gimli","read","dwarf","RangeIterInner"],"kind":"enum"},"5:1276:3243":{"crate_id":5,"path":["alloc","collections","btree","borrow","DormantMutRef"],"kind":"struct"},"16:4942:42749":{"crate_id":16,"path":["gimli","constants","DwMacro"],"kind":"struct"},"1:5575:1960":{"crate_id":1,"path":["std","os","unix","fs","DirBuilderExt"],"kind":"trait"},"16:3461:3814":{"crate_id":16,"path":["gimli","common","DwoId"],"kind":"struct"},"5:1684:2035":{"crate_id":5,"path":["alloc","collections","btree","map","IntoIter"],"kind":"struct"},"2:52071:2630":{"crate_id":2,"path":["core","core_arch","simd","f64x4"],"kind":"struct"},"2:39110:2161":{"crate_id":2,"path":["core","convert","Infallible"],"kind":"enum"},"5:1663:2034":{"crate_id":5,"path":["alloc","collections","btree","map","Iter"],"kind":"struct"},"2:49571:2924":{"crate_id":2,"path":["core","slice","iter","Windows"],"kind":"struct"},"6:4110:39538":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_rumble_effect"],"kind":"struct"},"16:5959:3537":{"crate_id":16,"path":["gimli","read","endian_slice","EndianSlice"],"kind":"struct"},"2:3170:74":{"crate_id":2,"path":["core","convert","AsMut"],"kind":"trait"},"17:10874:43902":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbol"],"kind":"struct"},"5:7207:57160":{"crate_id":5,"path":["alloc","vec","drain_filter","drop","BackshiftOnDrop"],"kind":"struct"},"6:88:36140":{"crate_id":6,"path":["libc","unix","DIR"],"kind":"enum"},"2:46803:3027":{"crate_id":2,"path":["core","ffi","c_str","FromBytesUntilNulError"],"kind":"struct"},"2:3439:2050":{"crate_id":2,"path":["core","ops","arith","Sub"],"kind":"trait"},"16:4660:42683":{"crate_id":16,"path":["gimli","constants","DwCc"],"kind":"struct"},"6:4526:39581":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_txtime"],"kind":"struct"},"16:2981:3815":{"crate_id":16,"path":["gimli","common","LocationListsOffset"],"kind":"struct"},"1:8860:2357":{"crate_id":1,"path":["std","sync","poison","PoisonError"],"kind":"struct"},"17:10240:3899":{"crate_id":17,"path":["object","read","elf","segment","ElfSegmentIterator"],"kind":"struct"},"1:7139:188":{"crate_id":1,"path":["std","path","PathBuf"],"kind":"struct"},"2:23140:2755":{"crate_id":2,"path":["core","core_simd","elements","uint","SimdUint"],"kind":"trait"},"16:5273:42078":{"crate_id":16,"path":["gimli","endianity","BigEndian"],"kind":"struct"},"17:10831:3938":{"crate_id":17,"path":["object","read","macho","symbol","SymbolTable"],"kind":"struct"},"2:50108:2960":{"crate_id":2,"path":["core","str","iter","EscapeUnicode"],"kind":"struct"},"1:6576:1978":{"crate_id":1,"path":["std","os","linux","process","CommandExt"],"kind":"trait"},"2:46946:2702":{"crate_id":2,"path":["core","iter","adapters","enumerate","Enumerate"],"kind":"struct"},"2:2504:2739":{"crate_id":2,"path":["core","ptr","unique","Unique"],"kind":"struct"},"2:3384:2000":{"crate_id":2,"path":["core","marker","PhantomData"],"kind":"struct"},"1:15908:1778":{"crate_id":1,"path":["std","fn"],"kind":"primitive"},"12:2269:2199":{"crate_id":12,"path":["hashbrown","set","OccupiedEntry"],"kind":"struct"},"2:2190:31646":{"crate_id":2,"path":["core","mem","Discriminant"],"kind":"struct"},"2:3105:2558":{"crate_id":2,"path":["core","convert","num","FloatToInt"],"kind":"trait"},"5:5388:202":{"crate_id":5,"path":["alloc","rc","Rc"],"kind":"struct"},"2:47842:2794":{"crate_id":2,"path":["core","option","Item"],"kind":"struct"},"2:49995:2953":{"crate_id":2,"path":["core","str","iter","Matches"],"kind":"struct"},"9:686:3311":{"crate_id":9,"path":["miniz_oxide","deflate","core","SymFreq"],"kind":"struct"},"2:3407:1867":{"crate_id":2,"path":["core","marker","Unpin"],"kind":"trait"},"5:1296:3244":{"crate_id":5,"path":["alloc","collections","btree","dedup_sorted_iter","DedupSortedIter"],"kind":"struct"},"17:11713:44618":{"crate_id":17,"path":["object","elf","Versym"],"kind":"struct"},"1:12125:2081":{"crate_id":1,"path":["std","time","SystemTimeError"],"kind":"struct"},"16:5374:3591":{"crate_id":16,"path":["gimli","read","cfi","EhFrame"],"kind":"struct"},"5:1729:2191":{"crate_id":5,"path":["alloc","collections","btree","map","IntoKeys"],"kind":"struct"},"1:15865:51102":{"crate_id":1,"path":["std","backtrace_rs","print","PrintFmt"],"kind":"enum"},"2:47927:190":{"crate_id":2,"path":["core","pin","Pin"],"kind":"struct"},"1:3044:2285":{"crate_id":1,"path":["std","fs","symlink_metadata"],"kind":"function"},"2:12774:3131":{"crate_id":2,"path":["core","slice","SlicePattern"],"kind":"trait"},"6:4061:39532":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_trigger"],"kind":"struct"},"17:10851:43904":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbolTable"],"kind":"struct"},"6:4055:39531":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_replay"],"kind":"struct"},"16:7754:3648":{"crate_id":16,"path":["gimli","read","unit","EntriesTreeIter"],"kind":"struct"},"6:4362:39562":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_extended_err"],"kind":"struct"},"2:46299:3018":{"crate_id":2,"path":["core","ops","range","Bound"],"kind":"enum"},"17:13323:49368":{"crate_id":17,"path":["object","pe","ImageAuxSymbolWeak"],"kind":"struct"},"2:2046:1888":{"crate_id":2,"path":["core","mem","maybe_uninit","write_slice_cloned","Guard"],"kind":"struct"},"6:5433:40190":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_exit"],"kind":"struct"},"17:13899:49841":{"crate_id":17,"path":["object","pe","ImageFunctionEntry"],"kind":"struct"},"12:1203:3446":{"crate_id":12,"path":["hashbrown","map","OccupiedEntryRef"],"kind":"struct"},"2:5226:2473":{"crate_id":2,"path":["core","cell","Ref"],"kind":"struct"},"2:3179:233":{"crate_id":2,"path":["core","convert","TryInto"],"kind":"trait"},"16:7100:3638":{"crate_id":16,"path":["gimli","read","pubnames","PubNamesEntryIter"],"kind":"struct"},"17:11457:44125":{"crate_id":17,"path":["object","elf","Ident"],"kind":"struct"},"12:750:2034":{"crate_id":12,"path":["hashbrown","map","Iter"],"kind":"struct"},"1:9439:54093":{"crate_id":1,"path":["std","sys_common","mutex","MovableMutex"],"kind":"struct"},"2:23051:2573":{"crate_id":2,"path":["core","core_simd","elements","float","SimdFloat"],"kind":"trait"},"6:4296:39554":{"crate_id":6,"path":["libc","unix","linux_like","linux","posix_spawnattr_t"],"kind":"struct"},"2:50399:3040":{"crate_id":2,"path":["core","str","lossy","Utf8Chunk"],"kind":"struct"},"2:3619:132":{"crate_id":2,"path":["core","ops","function","FnMut"],"kind":"trait"},"1:12567:50474":{"crate_id":1,"path":["std","sys","unix","fs","Dir"],"kind":"struct"},"1:7734:2261":{"crate_id":1,"path":["std","sync","mpsc","blocking","Inner"],"kind":"struct"},"17:13755:49800":{"crate_id":17,"path":["object","pe","ImageArm64RuntimeFunctionEntry"],"kind":"struct"},"16:5855:3609":{"crate_id":16,"path":["gimli","read","cfi","CallFrameInstructionIter"],"kind":"struct"},"1:5563:1952":{"crate_id":1,"path":["std","os","unix","fs","DirEntryExt"],"kind":"trait"},"2:12230:2936":{"crate_id":2,"path":["core","slice","iter","GroupByMut"],"kind":"struct"},"5:0:283":{"crate_id":5,"path":["alloc"],"kind":"module"},"16:5530:3598":{"crate_id":16,"path":["gimli","read","cfi","CommonInformationEntry"],"kind":"struct"},"2:24070:1972":{"crate_id":2,"path":["core","core_simd","vector","sealed","Sealed"],"kind":"trait"},"2:3434:2083":{"crate_id":2,"path":["core","ops","arith","Add"],"kind":"trait"},"2:47876:3029":{"crate_id":2,"path":["core","panic","location","Location"],"kind":"struct"},"2:3656:2492":{"crate_id":2,"path":["core","ops","generator","Generator"],"kind":"trait"},"1:4383:1888":{"crate_id":1,"path":["std","io","Guard"],"kind":"struct"},"16:6679:3842":{"crate_id":16,"path":["gimli","read","lookup","PubStuffParser"],"kind":"struct"},"17:0:1735":{"crate_id":17,"path":["object"],"kind":"module"},"2:13015:2945":{"crate_id":2,"path":["core","str","iter","SplitInternal"],"kind":"struct"},"6:3981:39523":{"crate_id":6,"path":["libc","unix","linux_like","linux","cpu_set_t"],"kind":"struct"},"11:46:59413":{"crate_id":11,"path":["adler","algo","U32X4"],"kind":"struct"},"16:7309:3550":{"crate_id":16,"path":["gimli","read","str","DebugLineStr"],"kind":"struct"},"6:4346:39560":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_vm"],"kind":"struct"},"1:15065:2070":{"crate_id":1,"path":["std","sys_common","wtf8","Wtf8CodePoints"],"kind":"struct"},"5:8308:2035":{"crate_id":5,"path":["alloc","collections","linked_list","IntoIter"],"kind":"struct"},"2:13091:2952":{"crate_id":2,"path":["core","str","iter","MatchesInternal"],"kind":"struct"},"12:2040:2036":{"crate_id":12,"path":["hashbrown","set","Drain"],"kind":"struct"},"6:5982:37346":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statfs"],"kind":"struct"},"1:14460:1899":{"crate_id":1,"path":["std","sys","unix","io","IoSlice"],"kind":"struct"},"17:11282:43723":{"crate_id":17,"path":["object","read","RelocationTarget"],"kind":"enum"},"9:722:3314":{"crate_id":9,"path":["miniz_oxide","deflate","core","TDEFLFlush"],"kind":"enum"},"2:47295:2219":{"crate_id":2,"path":["core","iter","sources","once","Once"],"kind":"struct"},"2:14361:2674":{"crate_id":2,"path":["core","task","wake","Context"],"kind":"struct"},"1:1601:2200":{"crate_id":1,"path":["std","collections","hash","map","VacantEntry"],"kind":"struct"},"2:23389:12262":{"crate_id":2,"path":["core","core_simd","masks","to_bitmask","ToBitMask"],"kind":"trait"},"2:8638:2770":{"crate_id":2,"path":["core","iter","traits","accum","Product"],"kind":"trait"},"2:52539:2650":{"crate_id":2,"path":["core","core_arch","simd","i8x32"],"kind":"struct"},"6:5582:40223":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","semid_ds"],"kind":"struct"},"1:8646:50995":{"crate_id":1,"path":["std","sync","mutex","fmt","LockedPlaceholder"],"kind":"struct"},"2:52381:2658":{"crate_id":2,"path":["core","core_arch","simd","u16x16"],"kind":"struct"},"1:11985:2105":{"crate_id":1,"path":["std","sync","mpsc","RecvError"],"kind":"struct"},"17:10660:43933":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandVariant"],"kind":"enum"},"1:11034:2006":{"crate_id":1,"path":["std","net","addr","SocketAddrV6"],"kind":"struct"},"2:25054:168":{"crate_id":2,"path":["core","num","nonzero","NonZeroI32"],"kind":"struct"},"2:4898:2673":{"crate_id":2,"path":["core","async_iter","async_iter","AsyncIterator"],"kind":"trait"},"2:47045:2710":{"crate_id":2,"path":["core","iter","adapters","rev","Rev"],"kind":"struct"},"1:6100:2341":{"crate_id":1,"path":["std","os","unix","net","stream","UnixStream"],"kind":"struct"},"17:13887:49840":{"crate_id":17,"path":["object","pe","ImageDebugMisc"],"kind":"struct"},"13:121:41954":{"crate_id":13,"path":["std_detect","detect","arch","x86","Feature"],"kind":"enum"},"5:3105:58616":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Dying"],"kind":"enum"},"16:6075:3546":{"crate_id":16,"path":["gimli","read","aranges","DebugAranges"],"kind":"struct"},"1:15895:1765":{"crate_id":1,"path":["std","i8"],"kind":"primitive"},"2:25153:2996":{"crate_id":2,"path":["core","num","nonzero","NonZeroIsize"],"kind":"struct"},"2:10853:2605":{"crate_id":2,"path":["core","hash","BuildHasherDefault"],"kind":"struct"},"1:9143:1994":{"crate_id":1,"path":["std","std_float","StdFloat"],"kind":"trait"},"6:634:36532":{"crate_id":6,"path":["libc","unix","protoent"],"kind":"struct"},"16:6557:3628":{"crate_id":16,"path":["gimli","read","loclists","RawLocListEntry"],"kind":"enum"},"2:52001:2644":{"crate_id":2,"path":["core","core_arch","simd","i64x2"],"kind":"struct"},"2:13364:2499":{"crate_id":2,"path":["core","str","pattern","DoubleEndedSearcher"],"kind":"trait"},"1:1483:2196":{"crate_id":1,"path":["std","collections","hash","map","RawVacantEntryMut"],"kind":"struct"},"2:3183:232":{"crate_id":2,"path":["core","convert","TryFrom"],"kind":"trait"},"6:4402:39567":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_filter"],"kind":"struct"},"2:46775:3025":{"crate_id":2,"path":["core","ffi","c_str","FromBytesWithNulError"],"kind":"struct"},"2:3508:2539":{"crate_id":2,"path":["core","ops","bit","Shl"],"kind":"trait"},"5:8226:2035":{"crate_id":5,"path":["alloc","collections","binary_heap","IntoIter"],"kind":"struct"},"2:8634:2771":{"crate_id":2,"path":["core","iter","traits","accum","Sum"],"kind":"trait"},"6:571:36524":{"crate_id":6,"path":["libc","unix","hostent"],"kind":"struct"},"1:1477:2195":{"crate_id":1,"path":["std","collections","hash","map","RawOccupiedEntryMut"],"kind":"struct"},"2:49609:2928":{"crate_id":2,"path":["core","slice","iter","ChunksExactMut"],"kind":"struct"},"2:28332:2775":{"crate_id":2,"path":["core","num","wrapping","Wrapping"],"kind":"struct"},"6:4020:39527":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_id"],"kind":"struct"},"6:4256:39551":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Shdr"],"kind":"struct"},"2:3376:107":{"crate_id":2,"path":["core","marker","Copy"],"kind":"trait"},"17:10598:43931":{"crate_id":17,"path":["object","read","macho","file","MachOComdat"],"kind":"struct"},"16:5303:3587":{"crate_id":16,"path":["gimli","read","cfi","DebugFrame"],"kind":"struct"},"18:782:60297":{"crate_id":18,"path":["memchr","memmem","x86","sse","Forward"],"kind":"struct"},"2:11591:2917":{"crate_id":2,"path":["core","slice","iter","RSplit"],"kind":"struct"},"1:7539:2154":{"crate_id":1,"path":["std","process","Stdio"],"kind":"struct"},"2:14542:2091":{"crate_id":2,"path":["core","alloc","Allocator"],"kind":"trait"},"6:4464:39575":{"crate_id":6,"path":["libc","unix","linux_like","linux","dirent64"],"kind":"struct"},"18:829:3997":{"crate_id":18,"path":["memchr","memmem","FinderBuilder"],"kind":"struct"},"2:52122:55712":{"crate_id":2,"path":["core","core_arch","simd","m8x16"],"kind":"struct"},"5:5948:57179":{"crate_id":5,"path":["alloc","slice","insert_head","InsertionHole"],"kind":"struct"},"17:13233:49297":{"crate_id":17,"path":["object","pe","ImageSymbol"],"kind":"struct"},"6:4028:39528":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_absinfo"],"kind":"struct"},"17:13529:49746":{"crate_id":17,"path":["object","pe","ImageResourceDataEntry"],"kind":"struct"},"2:10720:55731":{"crate_id":2,"path":["core","fmt","fmt","BorrowedPlaceholder"],"kind":"struct"},"16:3221:3810":{"crate_id":16,"path":["gimli","common","DebugStrOffsetsBase"],"kind":"struct"},"16:2905:3803":{"crate_id":16,"path":["gimli","common","DebugInfoOffset"],"kind":"struct"},"17:11305:43724":{"crate_id":17,"path":["object","read","Relocation"],"kind":"struct"},"15:230:3466":{"crate_id":15,"path":["addr2line","LocationRangeIter"],"kind":"struct"},"6:4373:39563":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_tp"],"kind":"struct"},"1:15854:6997":{"crate_id":1,"path":["std","backtrace_rs","types","BytesOrWideString"],"kind":"enum"},"1:15890:1762":{"crate_id":1,"path":["std","tuple"],"kind":"primitive"},"17:10937:44012":{"crate_id":17,"path":["object","read","pe","file","PeComdatSectionIterator"],"kind":"struct"},"16:4803:42706":{"crate_id":16,"path":["gimli","constants","DwDefaulted"],"kind":"struct"},"17:9206:43704":{"crate_id":17,"path":["object","common","SymbolFlags"],"kind":"enum"},"1:8187:2262":{"crate_id":1,"path":["std","sync","mpsc","sync","Packet"],"kind":"struct"},"2:2924:125":{"crate_id":2,"path":["core","cmp","Eq"],"kind":"trait"},"1:14067:1925":{"crate_id":1,"path":["std","sys","unix","stdio","Stderr"],"kind":"struct"},"17:11314:3952":{"crate_id":17,"path":["object","read","CompressionFormat"],"kind":"enum"},"16:2772:3827":{"crate_id":16,"path":["gimli","common","LineEncoding"],"kind":"struct"},"1:6241:1975":{"crate_id":1,"path":["std","os","unix","process","ExitStatusExt"],"kind":"trait"},"17:9930:60293":{"crate_id":17,"path":["object","read","any","DynamicRelocationIteratorInternal"],"kind":"enum"},"2:10813:147":{"crate_id":2,"path":["core","hash","Hasher"],"kind":"trait"},"17:13377:49727":{"crate_id":17,"path":["object","pe","ImageArchiveMemberHeader"],"kind":"struct"},"5:3554:2037":{"crate_id":5,"path":["alloc","collections","btree","set","DrainFilter"],"kind":"struct"},"17:11256:43686":{"crate_id":17,"path":["object","read","CodeView"],"kind":"struct"},"12:2280:2200":{"crate_id":12,"path":["hashbrown","set","VacantEntry"],"kind":"struct"},"2:51424:2655":{"crate_id":2,"path":["core","core_arch","simd","u16x2"],"kind":"struct"},"2:50376:2512":{"crate_id":2,"path":["core","str","pattern","EmptyNeedle"],"kind":"struct"},"16:7323:3567":{"crate_id":16,"path":["gimli","read","unit","UnitOffset"],"kind":"struct"},"16:6656:3840":{"crate_id":16,"path":["gimli","read","lookup","PubStuffHeader"],"kind":"struct"},"6:6931:39710":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_mutex_t"],"kind":"struct"},"2:5154:2862":{"crate_id":2,"path":["core","cell","BorrowMutError"],"kind":"struct"},"17:8954:3883":{"crate_id":17,"path":["object","common","SectionKind"],"kind":"enum"},"1:11196:2324":{"crate_id":1,"path":["std","net","tcp","IntoIncoming"],"kind":"struct"},"17:12157:48578":{"crate_id":17,"path":["object","macho","DylibCommand"],"kind":"struct"},"17:13271:49302":{"crate_id":17,"path":["object","pe","ImageSymbolExBytes"],"kind":"struct"},"1:12030:2108":{"crate_id":1,"path":["std","sync","mpsc","TrySendError"],"kind":"enum"},"6:5204:40172":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__exit_status"],"kind":"struct"},"16:3029:3806":{"crate_id":16,"path":["gimli","common","DebugLocListsIndex"],"kind":"struct"},"16:6050:3613":{"crate_id":16,"path":["gimli","read","abbrev","Attributes"],"kind":"enum"},"17:10394:3924":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdatIterator"],"kind":"struct"},"2:50287:2508":{"crate_id":2,"path":["core","str","pattern","CharSliceSearcher"],"kind":"struct"},"1:1489:2197":{"crate_id":1,"path":["std","collections","hash","map","RawEntryBuilder"],"kind":"struct"},"17:10610:43932":{"crate_id":17,"path":["object","read","macho","file","MachOComdatSectionIterator"],"kind":"struct"},"17:13953:49849":{"crate_id":17,"path":["object","pe","ImageArchitectureEntry"],"kind":"struct"},"17:11689:44508":{"crate_id":17,"path":["object","elf","Dyn32"],"kind":"struct"},"17:13421:49730":{"crate_id":17,"path":["object","pe","ImageImportByName"],"kind":"struct"},"6:6856:41132":{"crate_id":6,"path":["libc","unix","linux_like","linux","arch","generic","termios2"],"kind":"struct"},"2:53873:17837":{"crate_id":2,"path":["core","core_arch","x86","cpuid","CpuidResult"],"kind":"struct"},"1:973:2262":{"crate_id":1,"path":["std","thread","Packet"],"kind":"struct"},"16:6949:3850":{"crate_id":16,"path":["gimli","read","op","EvaluationWaiting"],"kind":"enum"},"17:11002:44013":{"crate_id":17,"path":["object","read","pe","section","PeRelocationIterator"],"kind":"struct"},"17:11742:44627":{"crate_id":17,"path":["object","elf","Verdaux"],"kind":"struct"},"18:704:60297":{"crate_id":18,"path":["memchr","memmem","twoway","Forward"],"kind":"struct"},"2:13273:2119":{"crate_id":2,"path":["core","str","traits","FromStr"],"kind":"trait"},"5:1547:2201":{"crate_id":5,"path":["alloc","collections","btree","map","entry","OccupiedError"],"kind":"struct"},"17:510:43694":{"crate_id":17,"path":["object","read","any","Segment"],"kind":"struct"},"1:10643:2278":{"crate_id":1,"path":["std","fs","ReadDir"],"kind":"struct"},"5:3114:57360":{"crate_id":5,"path":["alloc","collections","btree","node","marker","ValMut"],"kind":"struct"},"1:15906:1776":{"crate_id":1,"path":["std","usize"],"kind":"primitive"},"2:50074:2957":{"crate_id":2,"path":["core","str","iter","SplitAsciiWhitespace"],"kind":"struct"},"1:11842:183":{"crate_id":1,"path":["std","process","Output"],"kind":"struct"},"1:4485:1900":{"crate_id":1,"path":["std","io","Seek"],"kind":"trait"},"16:3908:42243":{"crate_id":16,"path":["gimli","constants","DwTag"],"kind":"struct"},"5:4017:2037":{"crate_id":5,"path":["alloc","collections","linked_list","DrainFilter"],"kind":"struct"},"2:24242:2993":{"crate_id":2,"path":["core","num","bignum","tests","Big8x3"],"kind":"struct"},"2:48196:82":{"crate_id":2,"path":["core","sync","atomic","AtomicI32"],"kind":"struct"},"16:4743:42694":{"crate_id":16,"path":["gimli","constants","DwDsc"],"kind":"struct"},"2:50534:2966":{"crate_id":2,"path":["core","str","BytesIsNotEmpty"],"kind":"struct"},"2:46850:8521":{"crate_id":2,"path":["core","ffi","VaListImpl"],"kind":"struct"},"1:11256:2334":{"crate_id":1,"path":["std","os","unix","net","ancillary","SocketAncillary"],"kind":"struct"},"1:3381:50470":{"crate_id":1,"path":["std","io","buffered","bufwriter","flush_buf","BufGuard"],"kind":"struct"},"2:46331:2431":{"crate_id":2,"path":["core","ops","try_trait","Yeet"],"kind":"struct"},"6:4127:39540":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_ff_upload"],"kind":"struct"},"6:6671:40972":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","align","clone_args"],"kind":"struct"},"6:5149:40126":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","statx"],"kind":"struct"},"2:11518:2915":{"crate_id":2,"path":["core","slice","iter","SplitMut"],"kind":"struct"},"2:24508:35548":{"crate_id":2,"path":["core","num","fmt","Formatted"],"kind":"struct"},"17:10445:43828":{"crate_id":17,"path":["object","read","elf","note","Note"],"kind":"struct"},"2:51673:55719":{"crate_id":2,"path":["core","core_arch","simd","i64x1"],"kind":"struct"},"1:7782:50478":{"crate_id":1,"path":["std","sync","mpsc","mpsc_queue","Queue"],"kind":"struct"},"16:7379:3568":{"crate_id":16,"path":["gimli","read","unit","UnitType"],"kind":"enum"},"1:10980:1906":{"crate_id":1,"path":["std","io","Bytes"],"kind":"struct"},"6:3933:39519":{"crate_id":6,"path":["libc","unix","linux_like","linux","signalfd_siginfo"],"kind":"struct"},"17:13747:49799":{"crate_id":17,"path":["object","pe","ImageArmRuntimeFunctionEntry"],"kind":"struct"},"17:8902:43697":{"crate_id":17,"path":["object","common","AddressSize"],"kind":"enum"},"12:1147:2200":{"crate_id":12,"path":["hashbrown","map","VacantEntry"],"kind":"struct"},"2:8684:1870":{"crate_id":2,"path":["core","iter","traits","collect","Extend"],"kind":"trait"},"5:1673:2187":{"crate_id":5,"path":["alloc","collections","btree","map","IterMut"],"kind":"struct"},"16:5516:3783":{"crate_id":16,"path":["gimli","read","cfi","AugmentationData"],"kind":"struct"},"2:23765:2579":{"crate_id":2,"path":["core","core_simd","ord","SimdPartialOrd"],"kind":"trait"},"17:11102:43718":{"crate_id":17,"path":["object","read","SymbolSection"],"kind":"enum"},"6:6229:40608":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","shmid_ds"],"kind":"struct"},"2:53758:17832":{"crate_id":2,"path":["core","core_arch","x86","__m512"],"kind":"struct"},"2:47288:31052":{"crate_id":2,"path":["core","iter","sources","from_fn","FromFn"],"kind":"struct"},"12:114:59427":{"crate_id":12,"path":["hashbrown","raw","bitmask","BitMaskIter"],"kind":"struct"},"1:1610:2201":{"crate_id":1,"path":["std","collections","hash","map","OccupiedError"],"kind":"struct"},"2:51903:2649":{"crate_id":2,"path":["core","core_arch","simd","i8x16"],"kind":"struct"},"17:11013:43716":{"crate_id":17,"path":["object","read","traits","NoDynamicRelocationIterator"],"kind":"struct"},"16:5566:3599":{"crate_id":16,"path":["gimli","read","cfi","PartialFrameDescriptionEntry"],"kind":"struct"},"2:5708:1599":{"crate_id":2,"path":["core","ffi","c_void"],"kind":"enum"},"5:3948:1920":{"crate_id":5,"path":["alloc","collections","linked_list","Cursor"],"kind":"struct"},"2:10041:86":{"crate_id":2,"path":["core","sync","atomic","AtomicPtr"],"kind":"struct"},"17:11968:48404":{"crate_id":17,"path":["object","macho","MachHeader32"],"kind":"struct"},"1:11501:2034":{"crate_id":1,"path":["std","path","Iter"],"kind":"struct"},"6:1721:37425":{"crate_id":6,"path":["libc","unix","linux_like","mmsghdr"],"kind":"struct"},"2:3872:2423":{"crate_id":2,"path":["core","ops","unsize","CoerceUnsized"],"kind":"trait"},"1:2147:2040":{"crate_id":1,"path":["std","collections","hash","set","SymmetricDifference"],"kind":"struct"},"18:857:3999":{"crate_id":18,"path":["memchr","memmem","SearcherConfig"],"kind":"struct"},"1:11071:2009":{"crate_id":1,"path":["std","net","ip","Ipv4Addr"],"kind":"struct"},"16:6482:3835":{"crate_id":16,"path":["gimli","read","lists","ListsHeader"],"kind":"struct"},"5:2284:3162":{"crate_id":5,"path":["alloc","collections","btree","merge_iter","MergeIterInner"],"kind":"struct"},"17:12620:48671":{"crate_id":17,"path":["object","macho","SymsegCommand"],"kind":"struct"},"7:38:41251":{"crate_id":7,"path":["unwind","libunwind","_Unwind_Reason_Code"],"kind":"enum"},"5:7731:3211":{"crate_id":5,"path":["alloc","vec","set_len_on_drop","SetLenOnDrop"],"kind":"struct"},"2:23964:1996":{"crate_id":2,"path":["core","core_simd","vector","Simd"],"kind":"struct"},"1:10711:1918":{"crate_id":1,"path":["std","io","buffered","IntoInnerError"],"kind":"struct"},"2:47994:2035":{"crate_id":2,"path":["core","result","IntoIter"],"kind":"struct"},"6:4048:39530":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_mask"],"kind":"struct"},"2:50779:2763":{"crate_id":2,"path":["core","alloc","AllocError"],"kind":"struct"},"2:12798:3094":{"crate_id":2,"path":["core","str","converts","from_utf8"],"kind":"function"},"18:169:50207":{"crate_id":18,"path":["memchr","memchr","iter","Memchr3"],"kind":"struct"},"2:46677:3114":{"crate_id":2,"path":["core","char","EscapeUnicodeState"],"kind":"enum"},"5:6851:1888":{"crate_id":5,"path":["alloc","sync","from_iter_exact","Guard"],"kind":"struct"},"1:11177:2391":{"crate_id":1,"path":["std","net","parser","AddrParseError"],"kind":"struct"},"2:49107:2207":{"crate_id":2,"path":["core","hash","sip","SipHasher13"],"kind":"struct"},"17:13440:49734":{"crate_id":17,"path":["object","pe","ImageTlsDirectory32"],"kind":"struct"},"5:8566:3207":{"crate_id":5,"path":["alloc","vec","splice","Splice"],"kind":"struct"},"2:48947:73":{"crate_id":2,"path":["core","fmt","Arguments"],"kind":"struct"},"17:12758:48747":{"crate_id":17,"path":["object","macho","RelocationInfo"],"kind":"struct"},"12:869:2036":{"crate_id":12,"path":["hashbrown","map","Drain"],"kind":"struct"},"6:6080:37347":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statfs64"],"kind":"struct"},"6:3883:39515":{"crate_id":6,"path":["libc","unix","linux_like","linux","glob_t"],"kind":"struct"},"2:49895:2920":{"crate_id":2,"path":["core","str","iter","SplitN"],"kind":"struct"},"2:49599:2927":{"crate_id":2,"path":["core","slice","iter","ChunksExact"],"kind":"struct"},"2:2393:2171":{"crate_id":2,"path":["core","ptr","non_null","NonNull"],"kind":"struct"},"6:4088:39536":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_condition_effect"],"kind":"struct"},"2:46896:2716":{"crate_id":2,"path":["core","iter","adapters","by_ref_sized","ByRefSized"],"kind":"struct"},"17:12417:48596":{"crate_id":17,"path":["object","macho","TwolevelHintsCommand"],"kind":"struct"},"16:2813:3820":{"crate_id":16,"path":["gimli","common","DebugAbbrevOffset"],"kind":"struct"},"16:7131:3641":{"crate_id":16,"path":["gimli","read","pubtypes","PubTypesEntryIter"],"kind":"struct"},"2:14150:189":{"crate_id":2,"path":["core","future","pending","Pending"],"kind":"struct"},"17:9873:43713":{"crate_id":17,"path":["object","read","any","SymbolIterator"],"kind":"struct"},"2:32990:2610":{"crate_id":2,"path":["core","mem","transmutability","Assume"],"kind":"struct"},"17:11603:44447":{"crate_id":17,"path":["object","elf","Rel32"],"kind":"struct"},"1:8777:2215":{"crate_id":1,"path":["std","sync","once_lock","OnceLock"],"kind":"struct"},"1:11944:2034":{"crate_id":1,"path":["std","sync","mpsc","Iter"],"kind":"struct"},"13:0:1725":{"crate_id":13,"path":["std_detect"],"kind":"module"},"18:766:60307":{"crate_id":18,"path":["memchr","memmem","twoway","ApproximateByteSet"],"kind":"struct"},"6:4379:39564":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_j1939"],"kind":"struct"},"2:53686:17826":{"crate_id":2,"path":["core","core_arch","x86","__m128"],"kind":"struct"},"16:2839:3801":{"crate_id":16,"path":["gimli","common","DebugAddrBase"],"kind":"struct"},"17:13495:49740":{"crate_id":17,"path":["object","pe","ImageResourceDirectory"],"kind":"struct"},"17:12496:48602":{"crate_id":17,"path":["object","macho","FilesetEntryCommand"],"kind":"struct"},"1:8939:2170":{"crate_id":1,"path":["std","sync","rwlock","RwLock"],"kind":"struct"},"5:1719:2190":{"crate_id":5,"path":["alloc","collections","btree","map","ValuesMut"],"kind":"struct"},"2:49691:2933":{"crate_id":2,"path":["core","slice","iter","RChunksExact"],"kind":"struct"},"4:0:1726":{"crate_id":4,"path":["rustc_std_workspace_core"],"kind":"module"},"1:3803:128":{"crate_id":1,"path":["std","io","error","Error"],"kind":"struct"},"1:11154:2390":{"crate_id":1,"path":["std","net","parser","AddrKind"],"kind":"enum"},"16:7637:3645":{"crate_id":16,"path":["gimli","read","unit","Attribute"],"kind":"struct"},"1:11264:2323":{"crate_id":1,"path":["std","os","unix","net","listener","Incoming"],"kind":"struct"},"16:4411:42602":{"crate_id":16,"path":["gimli","constants","DwEnd"],"kind":"struct"},"6:1626:37417":{"crate_id":6,"path":["libc","unix","linux_like","Dl_info"],"kind":"struct"},"16:4351:42590":{"crate_id":16,"path":["gimli","constants","DwLle"],"kind":"struct"},"2:22904:56404":{"crate_id":2,"path":["core","core_simd","swizzle","deinterleave","Odd"],"kind":"struct"},"6:4230:39549":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Phdr"],"kind":"struct"},"2:49791:1908":{"crate_id":2,"path":["core","str","iter","Split"],"kind":"struct"},"2:24417:35528":{"crate_id":2,"path":["core","num","diy_float","Fp"],"kind":"struct"},"2:8451:2220":{"crate_id":2,"path":["core","iter","sources","once","once"],"kind":"function"},"12:2032:2034":{"crate_id":12,"path":["hashbrown","set","Iter"],"kind":"struct"},"2:11198:1972":{"crate_id":2,"path":["core","slice","index","private_slice_index","Sealed"],"kind":"trait"},"1:15900:1770":{"crate_id":1,"path":["std","u8"],"kind":"primitive"},"2:3469:2085":{"crate_id":2,"path":["core","ops","arith","SubAssign"],"kind":"trait"},"2:50694:192":{"crate_id":2,"path":["core","task","poll","Poll"],"kind":"enum"},"5:1701:2188":{"crate_id":5,"path":["alloc","collections","btree","map","Keys"],"kind":"struct"},"1:6339:2029":{"crate_id":1,"path":["std","os","unix","thread","JoinHandleExt"],"kind":"trait"},"5:7891:239":{"crate_id":5,"path":["alloc","vec","Vec"],"kind":"struct"},"17:10028:43770":{"crate_id":17,"path":["object","read","archive","ArchiveMemberIterator"],"kind":"struct"},"1:10496:6990":{"crate_id":1,"path":["std","backtrace","BacktraceStatus"],"kind":"enum"},"2:24425:35546":{"crate_id":2,"path":["core","num","flt2dec","decoder","Decoded"],"kind":"struct"},"17:13138:49207":{"crate_id":17,"path":["object","pe","ImageNtHeaders32"],"kind":"struct"},"1:2326:604":{"crate_id":1,"path":["std","env"],"kind":"module"},"1:6467:1956":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt"],"kind":"trait"},"2:46880:2715":{"crate_id":2,"path":["core","iter","adapters","array_chunks","ArrayChunks"],"kind":"struct"},"16:7247:3579":{"crate_id":16,"path":["gimli","read","rnglists","RawRange"],"kind":"struct"},"1:12077:213":{"crate_id":1,"path":["std","sync","rwlock","RwLockReadGuard"],"kind":"struct"},"17:10545:43928":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCacheImageIterator"],"kind":"struct"},"16:6433:3624":{"crate_id":16,"path":["gimli","read","line","FileEntry"],"kind":"struct"},"17:12026:48508":{"crate_id":17,"path":["object","macho","SegmentCommand32"],"kind":"struct"},"17:9786:43712":{"crate_id":17,"path":["object","read","any","ComdatSectionIterator"],"kind":"struct"},"2:50506:2965":{"crate_id":2,"path":["core","str","LinesAnyMap"],"kind":"struct"},"16:6060:3585":{"crate_id":16,"path":["gimli","read","abbrev","AttributeSpecification"],"kind":"struct"},"1:1460:2193":{"crate_id":1,"path":["std","collections","hash","map","RawEntryBuilderMut"],"kind":"struct"},"17:12222:48583":{"crate_id":17,"path":["object","macho","PreboundDylibCommand"],"kind":"struct"},"2:2965:186":{"crate_id":2,"path":["core","cmp","PartialOrd"],"kind":"trait"},"17:12527:48604":{"crate_id":17,"path":["object","macho","EncryptionInfoCommand64"],"kind":"struct"},"2:50239:2507":{"crate_id":2,"path":["core","str","pattern","CharArrayRefSearcher"],"kind":"struct"},"5:3428:2040":{"crate_id":5,"path":["alloc","collections","btree","set","SymmetricDifference"],"kind":"struct"},"16:3007:3805":{"crate_id":16,"path":["gimli","common","DebugLocListsBase"],"kind":"struct"},"6:4386:39565":{"crate_id":6,"path":["libc","unix","linux_like","linux","can_filter"],"kind":"struct"},"16:7090:3637":{"crate_id":16,"path":["gimli","read","pubnames","DebugPubNames"],"kind":"struct"},"17:12442:48598":{"crate_id":17,"path":["object","macho","PrebindCksumCommand"],"kind":"struct"},"2:11629:2918":{"crate_id":2,"path":["core","slice","iter","RSplitMut"],"kind":"struct"},"17:12660:48674":{"crate_id":17,"path":["object","macho","EntryPointCommand"],"kind":"struct"},"1:14912:50787":{"crate_id":1,"path":["std","sys","unix","time","Timespec"],"kind":"struct"},"2:49620:2929":{"crate_id":2,"path":["core","slice","iter","ArrayWindows"],"kind":"struct"},"2:56640:241":{"crate_id":2,"path":["core","core_simd","fmt","fmt","Wrapper"],"kind":"struct"},"2:11684:2921":{"crate_id":2,"path":["core","slice","iter","RSplitN"],"kind":"struct"},"2:46358:2737":{"crate_id":2,"path":["core","any","tags","Value"],"kind":"struct"},"2:52617:2638":{"crate_id":2,"path":["core","core_arch","simd","i16x16"],"kind":"struct"},"1:6477:50391":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt","st_atime"],"kind":"foreign_type"},"2:48834:134":{"crate_id":2,"path":["core","fmt","rt","v1","FormatSpec"],"kind":"struct"},"17:13595:49758":{"crate_id":17,"path":["object","pe","ImagePrologueDynamicRelocationHeader"],"kind":"struct"},"1:14417:51012":{"crate_id":1,"path":["std","sys","unix","fs","FilePermissions"],"kind":"struct"},"1:8281:204":{"crate_id":1,"path":["std","sync","mpsc","Receiver"],"kind":"struct"},"2:8744:1869":{"crate_id":2,"path":["core","iter","traits","exact_size","ExactSizeIterator"],"kind":"trait"},"2:46338:2594":{"crate_id":2,"path":["core","any","TypeId"],"kind":"struct"},"2:10036:79":{"crate_id":2,"path":["core","sync","atomic","AtomicBool"],"kind":"struct"},"2:52200:55701":{"crate_id":2,"path":["core","core_arch","simd","m32x4"],"kind":"struct"},"2:49144:2131":{"crate_id":2,"path":["core","hash","sip","State"],"kind":"struct"},"1:14886:51760":{"crate_id":1,"path":["std","sys","unix","thread","cgroups","Cgroup"],"kind":"enum"},"2:48584:2461":{"crate_id":2,"path":["core","fmt","num","LowerHex"],"kind":"struct"},"17:10291:3927":{"crate_id":17,"path":["object","read","elf","section","ElfSectionIterator"],"kind":"struct"},"2:47333:31057":{"crate_id":2,"path":["core","iter","sources","successors","Successors"],"kind":"struct"},"1:8863:2174":{"crate_id":1,"path":["std","sync","poison","TryLockError"],"kind":"enum"},"16:2959:3804":{"crate_id":16,"path":["gimli","common","DebugLineStrOffset"],"kind":"struct"},"16:6089:3614":{"crate_id":16,"path":["gimli","read","aranges","ArangeHeaderIter"],"kind":"struct"},"2:13359:2498":{"crate_id":2,"path":["core","str","pattern","ReverseSearcher"],"kind":"trait"},"17:13404:49729":{"crate_id":17,"path":["object","pe","ImageExportDirectory"],"kind":"struct"},"2:49841:2946":{"crate_id":2,"path":["core","str","iter","SplitTerminator"],"kind":"struct"},"12:2392:59414":{"crate_id":12,"path":["hashbrown","raw","sse2","Group"],"kind":"struct"},"6:6205:40606":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","mcontext_t"],"kind":"struct"},"17:11168:43721":{"crate_id":17,"path":["object","read","ObjectMap"],"kind":"struct"},"2:57975:55647":{"crate_id":2,"path":["core","core_simd","vector","ptr","SimdMutPtr"],"kind":"struct"},"2:52169:55726":{"crate_id":2,"path":["core","core_arch","simd","m16x8"],"kind":"struct"},"6:6153:40604":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user_regs_struct"],"kind":"struct"},"2:23177:2578":{"crate_id":2,"path":["core","core_simd","eq","SimdPartialEq"],"kind":"trait"},"16:2937:3826":{"crate_id":16,"path":["gimli","common","DebugLineOffset"],"kind":"struct"},"2:14109:56821":{"crate_id":2,"path":["core","future","join","MaybeDone"],"kind":"enum"},"2:32694:56893":{"crate_id":2,"path":["core","mem","valid_align","ValidAlignEnum32"],"kind":"enum"},"17:13557:49749":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation32"],"kind":"struct"},"1:4143:2309":{"crate_id":1,"path":["std","io","stdio","StdoutRaw"],"kind":"struct"},"2:50314:2509":{"crate_id":2,"path":["core","str","pattern","CharPredicateSearcher"],"kind":"struct"},"2:49672:2931":{"crate_id":2,"path":["core","slice","iter","RChunks"],"kind":"struct"},"17:13428:49733":{"crate_id":17,"path":["object","pe","ImageTlsDirectory64"],"kind":"struct"},"2:51402:2667":{"crate_id":2,"path":["core","core_arch","simd","u8x4"],"kind":"struct"},"17:10318:3938":{"crate_id":17,"path":["object","read","elf","symbol","SymbolTable"],"kind":"struct"},"5:4308:57154":{"crate_id":5,"path":["alloc","collections","vec_deque","drain","drop","DropGuard"],"kind":"struct"},"17:12607:48670":{"crate_id":17,"path":["object","macho","LinkerOptionCommand"],"kind":"struct"},"5:7753:3212":{"crate_id":5,"path":["alloc","vec","in_place_drop","InPlaceDrop"],"kind":"struct"},"2:24856:173":{"crate_id":2,"path":["core","num","nonzero","NonZeroU32"],"kind":"struct"},"2:39146:3252":{"crate_id":2,"path":["core","error","private","Internal"],"kind":"struct"},"17:10962:43988":{"crate_id":17,"path":["object","read","pe","section","PeSegment"],"kind":"struct"},"2:24541:3009":{"crate_id":2,"path":["core","num","error","IntErrorKind"],"kind":"enum"},"2:10803:143":{"crate_id":2,"path":["core","hash","Hash"],"kind":"trait"},"1:15324:51110":{"crate_id":1,"path":["std","panicking","Hook"],"kind":"enum"},"2:51572:55772":{"crate_id":2,"path":["core","core_arch","simd","u64x1"],"kind":"struct"},"9:469:41376":{"crate_id":9,"path":["miniz_oxide","inflate","core","DecompressorOxide"],"kind":"struct"},"2:13410:2502":{"crate_id":2,"path":["core","str","pattern","MultiCharEqPattern"],"kind":"struct"},"2:4148:2593":{"crate_id":2,"path":["core","any","Provider"],"kind":"trait"},"16:4316:42579":{"crate_id":16,"path":["gimli","constants","DwAte"],"kind":"struct"},"2:49701:2934":{"crate_id":2,"path":["core","slice","iter","RChunksExactMut"],"kind":"struct"},"2:49162:55734":{"crate_id":2,"path":["core","hash","sip","Sip24Rounds"],"kind":"struct"},"16:4775:42702":{"crate_id":16,"path":["gimli","constants","DwIdx"],"kind":"struct"},"2:53537:2628":{"crate_id":2,"path":["core","core_arch","simd","f32x16"],"kind":"struct"},"17:10571:3885":{"crate_id":17,"path":["object","read","macho","file","MachOFile"],"kind":"struct"},"6:4440:39572":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlattr"],"kind":"struct"},"2:11670:2920":{"crate_id":2,"path":["core","slice","iter","SplitN"],"kind":"struct"},"5:8494:3153":{"crate_id":5,"path":["alloc","string","FromUtf16Error"],"kind":"struct"},"2:10565:110":{"crate_id":2,"path":["core","fmt","Debug"],"kind":"trait"},"2:3473:2448":{"crate_id":2,"path":["core","ops","arith","MulAssign"],"kind":"trait"},"2:53717:17829":{"crate_id":2,"path":["core","core_arch","x86","__m256"],"kind":"struct"},"2:11556:2916":{"crate_id":2,"path":["core","slice","iter","SplitInclusiveMut"],"kind":"struct"},"2:23976:56166":{"crate_id":2,"path":["core","core_simd","vector","splat","Splat"],"kind":"struct"},"6:513:36517":{"crate_id":6,"path":["libc","unix","group"],"kind":"struct"},"6:4493:39578":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_user_dev"],"kind":"struct"},"1:14064:1929":{"crate_id":1,"path":["std","sys","unix","stdio","Stdout"],"kind":"struct"},"2:2183:583":{"crate_id":2,"path":["core","mem","drop"],"kind":"function"},"6:4075:39534":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_constant_effect"],"kind":"struct"},"12:379:3451":{"crate_id":12,"path":["hashbrown","raw","RawIter"],"kind":"struct"},"5:3905:57154":{"crate_id":5,"path":["alloc","collections","linked_list","drop","DropGuard"],"kind":"struct"},"16:5289:3545":{"crate_id":16,"path":["gimli","read","addr","DebugAddr"],"kind":"struct"},"17:11130:43719":{"crate_id":17,"path":["object","read","SymbolMap"],"kind":"struct"},"18:739:60317":{"crate_id":18,"path":["memchr","memmem","twoway","Suffix"],"kind":"struct"},"17:11409:44123":{"crate_id":17,"path":["object","elf","FileHeader32"],"kind":"struct"},"1:12067:164":{"crate_id":1,"path":["std","sync","mutex","MutexGuard"],"kind":"struct"},"1:5746:2402":{"crate_id":1,"path":["std","os","unix","net","ancillary","AncillaryData"],"kind":"enum"},"6:6665:40971":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","align","max_align_t"],"kind":"struct"},"16:0:1734":{"crate_id":16,"path":["gimli"],"kind":"module"},"1:11105:2116":{"crate_id":1,"path":["std","net","ip","Ipv6MulticastScope"],"kind":"enum"},"2:46189:196":{"crate_id":2,"path":["core","ops","range","Range"],"kind":"struct"},"2:22883:56399":{"crate_id":2,"path":["core","core_simd","swizzle","interleave","Hi"],"kind":"struct"},"1:15897:1767":{"crate_id":1,"path":["std","i32"],"kind":"primitive"},"17:11945:43934":{"crate_id":17,"path":["object","macho","FatArch32"],"kind":"struct"},"16:6026:3542":{"crate_id":16,"path":["gimli","read","abbrev","Abbreviations"],"kind":"struct"},"2:11436:1908":{"crate_id":2,"path":["core","slice","iter","Split"],"kind":"struct"},"1:1088:2275":{"crate_id":1,"path":["std","backtrace","Backtrace"],"kind":"struct"},"2:37954:2582":{"crate_id":2,"path":["core","cmp","Reverse"],"kind":"struct"},"5:5488:1888":{"crate_id":5,"path":["alloc","rc","from_iter_exact","Guard"],"kind":"struct"},"1:9563:50499":{"crate_id":1,"path":["std","sys_common","rwlock","StaticRwLockWriteGuard"],"kind":"struct"},"17:10476:3956":{"crate_id":17,"path":["object","read","elf","version","VerdefIterator"],"kind":"struct"},"18:774:60297":{"crate_id":18,"path":["memchr","memmem","x86","avx","nostd","Forward"],"kind":"struct"},"1:15377:3475":{"crate_id":1,"path":["std","backtrace_rs","backtrace","Frame"],"kind":"struct"},"1:2123:2035":{"crate_id":1,"path":["std","collections","hash","set","IntoIter"],"kind":"struct"},"6:1680:37421":{"crate_id":6,"path":["libc","unix","linux_like","in6_rtmsg"],"kind":"struct"},"2:47006:2721":{"crate_id":2,"path":["core","iter","adapters","intersperse","Intersperse"],"kind":"struct"},"17:13507:49743":{"crate_id":17,"path":["object","pe","ImageResourceDirectoryEntry"],"kind":"struct"},"1:5978:2340":{"crate_id":1,"path":["std","os","unix","net","listener","UnixListener"],"kind":"struct"},"17:1236:43785":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbolIterator"],"kind":"struct"},"2:3678:2607":{"crate_id":2,"path":["core","ops","index","IndexMut"],"kind":"trait"},"1:14394:51066":{"crate_id":1,"path":["std","sys","unix","fs","FileAttr"],"kind":"struct"},"1:10638:2022":{"crate_id":1,"path":["std","fs","Metadata"],"kind":"struct"},"6:1567:37411":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_in6"],"kind":"struct"},"2:3589:117":{"crate_id":2,"path":["core","ops","deref","Deref"],"kind":"trait"},"2:3461:2444":{"crate_id":2,"path":["core","ops","arith","Neg"],"kind":"trait"},"16:7295:3552":{"crate_id":16,"path":["gimli","read","str","DebugStrOffsets"],"kind":"struct"},"1:12565:2278":{"crate_id":1,"path":["std","sys","unix","fs","ReadDir"],"kind":"struct"},"6:1531:37406":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreq"],"kind":"struct"},"6:4410:39568":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_fprog"],"kind":"struct"},"2:46787:3026":{"crate_id":2,"path":["core","ffi","c_str","FromBytesWithNulErrorKind"],"kind":"enum"},"2:8876:158":{"crate_id":2,"path":["core","iter","traits","iterator","Iterator"],"kind":"trait"},"9:776:3360":{"crate_id":9,"path":["miniz_oxide","deflate","CompressionLevel"],"kind":"enum"},"2:49520:2919":{"crate_id":2,"path":["core","slice","iter","GenericSplitN"],"kind":"struct"},"5:1072:2034":{"crate_id":5,"path":["alloc","collections","binary_heap","Iter"],"kind":"struct"},"2:49959:2951":{"crate_id":2,"path":["core","str","iter","RMatchIndices"],"kind":"struct"},"12:764:2187":{"crate_id":12,"path":["hashbrown","map","IterMut"],"kind":"struct"},"1:13859:2153":{"crate_id":1,"path":["std","sys","unix","process","process_common","CommandArgs"],"kind":"struct"},"1:10468:2241":{"crate_id":1,"path":["std","thread","Thread"],"kind":"struct"},"1:10678:130":{"crate_id":1,"path":["std","fs","FileType"],"kind":"struct"},"2:46099:2432":{"crate_id":2,"path":["core","ops","control_flow","ControlFlow"],"kind":"enum"},"17:13481:49738":{"crate_id":17,"path":["object","pe","ImageDelayloadDescriptor"],"kind":"struct"},"17:11822:44647":{"crate_id":17,"path":["object","elf","GnuHashHeader"],"kind":"struct"},"5:2328:3246":{"crate_id":5,"path":["alloc","collections","btree","navigate","LeafRange"],"kind":"struct"},"1:5154:2322":{"crate_id":1,"path":["std","net","tcp","TcpListener"],"kind":"struct"},"6:4179:39545":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Ehdr"],"kind":"struct"},"5:1710:2189":{"crate_id":5,"path":["alloc","collections","btree","map","Values"],"kind":"struct"},"16:3743:42126":{"crate_id":16,"path":["gimli","constants","DwCfa"],"kind":"struct"},"16:6286:3464":{"crate_id":16,"path":["gimli","read","line","LineRow"],"kind":"struct"},"17:11628:44449":{"crate_id":17,"path":["object","elf","Rel64"],"kind":"struct"},"15:0:1733":{"crate_id":15,"path":["addr2line"],"kind":"module"},"1:15896:1766":{"crate_id":1,"path":["std","i16"],"kind":"primitive"},"5:2376:3292":{"crate_id":5,"path":["alloc","collections","btree","navigate","LazyLeafHandle"],"kind":"enum"},"1:15907:1777":{"crate_id":1,"path":["std","reference"],"kind":"primitive"},"5:8373:2206":{"crate_id":5,"path":["alloc","collections","TryReserveErrorKind"],"kind":"enum"},"16:3340:3793":{"crate_id":16,"path":["gimli","common","EhFrameOffset"],"kind":"struct"},"1:1456:2192":{"crate_id":1,"path":["std","collections","hash","map","IntoValues"],"kind":"struct"},"2:9657:2496":{"crate_id":2,"path":["core","panicking","assert_matches_failed","Pattern"],"kind":"struct"},"5:6498:228":{"crate_id":5,"path":["alloc","string","ToString"],"kind":"trait"},"1:14470:51756":{"crate_id":1,"path":["std","sys","unix","kernel_copy","SpliceMode"],"kind":"enum"},"1:10648:1965":{"crate_id":1,"path":["std","fs","OpenOptions"],"kind":"struct"},"2:49777:1906":{"crate_id":2,"path":["core","str","iter","Bytes"],"kind":"struct"},"6:1694:37422":{"crate_id":6,"path":["libc","unix","linux_like","arpreq"],"kind":"struct"},"17:11907:48398":{"crate_id":17,"path":["object","macho","DyldCacheMappingInfo"],"kind":"struct"},"17:9756:60291":{"crate_id":17,"path":["object","read","any","ComdatIteratorInternal"],"kind":"enum"},"2:46730:3117":{"crate_id":2,"path":["core","char","ToUppercase"],"kind":"struct"},"6:580:9282":{"crate_id":6,"path":["libc","unix","iovec"],"kind":"struct"},"1:3042:2284":{"crate_id":1,"path":["std","fs","metadata"],"kind":"function"},"16:4903:42734":{"crate_id":16,"path":["gimli","constants","DwLnct"],"kind":"struct"},"6:5366:40183":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ntptimeval"],"kind":"struct"},"1:10443:2260":{"crate_id":1,"path":["std","thread","ThreadId"],"kind":"struct"},"2:10572:120":{"crate_id":2,"path":["core","fmt","Display"],"kind":"trait"},"17:11653:44451":{"crate_id":17,"path":["object","elf","ProgramHeader32"],"kind":"struct"},"16:3770:42129":{"crate_id":16,"path":["gimli","constants","DwChildren"],"kind":"struct"},"1:2420:4597":{"crate_id":1,"path":["std","env","Args"],"kind":"struct"},"17:11433:44124":{"crate_id":17,"path":["object","elf","FileHeader64"],"kind":"struct"},"2:14185:29405":{"crate_id":2,"path":["core","future","poll_fn","PollFn"],"kind":"struct"},"17:10801:3872":{"crate_id":17,"path":["object","read","macho","section","MachOSection"],"kind":"struct"},"17:13293:49366":{"crate_id":17,"path":["object","pe","ImageAuxSymbolFunction"],"kind":"struct"},"2:50055:2955":{"crate_id":2,"path":["core","str","iter","LinesAny"],"kind":"struct"},"6:1526:37405":{"crate_id":6,"path":["libc","unix","linux_like","in_addr"],"kind":"struct"},"1:0:1345":{"crate_id":1,"path":["std"],"kind":"module"},"17:9948:43715":{"crate_id":17,"path":["object","read","any","SectionRelocationIterator"],"kind":"struct"},"12:1183:3445":{"crate_id":12,"path":["hashbrown","map","KeyOrRef"],"kind":"enum"},"17:12455:48599":{"crate_id":17,"path":["object","macho","UuidCommand"],"kind":"struct"},"17:12196:48581":{"crate_id":17,"path":["object","macho","SubUmbrellaCommand"],"kind":"struct"},"2:24463:35538":{"crate_id":2,"path":["core","num","flt2dec","Sign"],"kind":"enum"},"16:6159:3549":{"crate_id":16,"path":["gimli","read","line","DebugLine"],"kind":"struct"},"2:46988:2706":{"crate_id":2,"path":["core","iter","adapters","fuse","Fuse"],"kind":"struct"},"18:811:3995":{"crate_id":18,"path":["memchr","memmem","Finder"],"kind":"struct"},"16:3576:42084":{"crate_id":16,"path":["gimli","arch","X86_64"],"kind":"struct"},"2:4867:103":{"crate_id":2,"path":["core","asserting","Capture"],"kind":"struct"},"17:542:3522":{"crate_id":17,"path":["object","read","any","Section"],"kind":"struct"},"2:50575:3052":{"crate_id":2,"path":["core","time","FromFloatSecsErrorKind"],"kind":"enum"},"2:52457:2665":{"crate_id":2,"path":["core","core_arch","simd","u64x4"],"kind":"struct"},"1:4178:1927":{"crate_id":1,"path":["std","io","stdio","Stdin"],"kind":"struct"},"2:50013:2954":{"crate_id":2,"path":["core","str","iter","RMatches"],"kind":"struct"},"2:47086:2718":{"crate_id":2,"path":["core","iter","adapters","step_by","StepBy"],"kind":"struct"},"2:5271:2868":{"crate_id":2,"path":["core","cell","BorrowRefMut"],"kind":"struct"},"1:15339:51111":{"crate_id":1,"path":["std","personality","dwarf","eh","EHContext"],"kind":"struct"},"2:14074:151":{"crate_id":2,"path":["core","future","into_future","IntoFuture"],"kind":"trait"},"2:46694:2026":{"crate_id":2,"path":["core","char","EscapeDefault"],"kind":"struct"},"2:3532:2551":{"crate_id":2,"path":["core","ops","bit","ShlAssign"],"kind":"trait"},"16:4975:42758":{"crate_id":16,"path":["gimli","constants","DwRle"],"kind":"struct"},"5:8436:3230":{"crate_id":5,"path":["alloc","ffi","c_str","FromVecWithNulError"],"kind":"struct"},"5:7358:57154":{"crate_id":5,"path":["alloc","vec","drain","drop","DropGuard"],"kind":"struct"},"1:15898:1768":{"crate_id":1,"path":["std","i64"],"kind":"primitive"},"17:13565:49750":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation64"],"kind":"struct"},"6:5974:36439":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","sigaction"],"kind":"struct"},"1:5519:1956":{"crate_id":1,"path":["std","os","unix","fs","MetadataExt"],"kind":"trait"},"5:383:3228":{"crate_id":5,"path":["alloc","boxed","thin","ThinBox"],"kind":"struct"},"2:51655:2640":{"crate_id":2,"path":["core","core_arch","simd","i32x2"],"kind":"struct"},"6:5390:40185":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","Elf64_Chdr"],"kind":"struct"},"1:1105:6992":{"crate_id":1,"path":["std","backtrace","BacktraceFrame"],"kind":"struct"},"12:2253:2198":{"crate_id":12,"path":["hashbrown","set","Entry"],"kind":"enum"},"2:3274:128":{"crate_id":2,"path":["core","error","Error"],"kind":"trait"},"1:6745:1967":{"crate_id":1,"path":["std","os","fd","owned","AsFd"],"kind":"trait"},"2:52877:2651":{"crate_id":2,"path":["core","core_arch","simd","i8x64"],"kind":"struct"},"2:52727:2627":{"crate_id":2,"path":["core","core_arch","simd","f32x8"],"kind":"struct"},"2:50193:2500":{"crate_id":2,"path":["core","str","pattern","CharSearcher"],"kind":"struct"},"1:11409:2131":{"crate_id":1,"path":["std","path","State"],"kind":"enum"},"17:10166:43784":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbol"],"kind":"struct"},"6:1733:2335":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_un"],"kind":"struct"},"17:10422:43827":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdatSectionIterator"],"kind":"struct"},"1:9526:2318":{"crate_id":1,"path":["std","sys_common","remutex","ReentrantMutexGuard"],"kind":"struct"},"2:51448:2647":{"crate_id":2,"path":["core","core_arch","simd","i8x4"],"kind":"struct"},"1:15232:2322":{"crate_id":1,"path":["std","sys_common","net","TcpListener"],"kind":"struct"},"2:24790:175":{"crate_id":2,"path":["core","num","nonzero","NonZeroU8"],"kind":"struct"},"1:10550:8014":{"crate_id":1,"path":["std","env","JoinPathsError"],"kind":"struct"},"1:15904:1774":{"crate_id":1,"path":["std","u128"],"kind":"primitive"},"2:11479:2914":{"crate_id":2,"path":["core","slice","iter","SplitInclusive"],"kind":"struct"},"5:1152:57154":{"crate_id":5,"path":["alloc","collections","binary_heap","drop","DropGuard"],"kind":"struct"},"12:0:1731":{"crate_id":12,"path":["hashbrown"],"kind":"module"},"1:10719:1920":{"crate_id":1,"path":["std","io","cursor","Cursor"],"kind":"struct"},"12:856:2189":{"crate_id":12,"path":["hashbrown","map","Values"],"kind":"struct"},"17:11563:44410":{"crate_id":17,"path":["object","elf","Sym64"],"kind":"struct"},"9:692:3313":{"crate_id":9,"path":["miniz_oxide","deflate","core","CompressionStrategy"],"kind":"enum"},"1:8610:163":{"crate_id":1,"path":["std","sync","mutex","Mutex"],"kind":"struct"},"2:11387:2034":{"crate_id":2,"path":["core","slice","iter","Iter"],"kind":"struct"},"2:23770:12281":{"crate_id":2,"path":["core","core_simd","ord","SimdOrd"],"kind":"trait"},"16:7782:3554":{"crate_id":16,"path":["gimli","read","unit","DebugTypesUnitHeadersIter"],"kind":"struct"},"17:11017:128":{"crate_id":17,"path":["object","read","Error"],"kind":"struct"},"2:10584:2463":{"crate_id":2,"path":["core","fmt","LowerExp"],"kind":"trait"},"2:53335:2659":{"crate_id":2,"path":["core","core_arch","simd","u16x32"],"kind":"struct"},"2:3477:2450":{"crate_id":2,"path":["core","ops","arith","DivAssign"],"kind":"trait"},"2:49132:147":{"crate_id":2,"path":["core","hash","sip","Hasher"],"kind":"struct"},"18:744:60304":{"crate_id":18,"path":["memchr","memmem","twoway","SuffixKind"],"kind":"enum"},"2:3493:2047":{"crate_id":2,"path":["core","ops","bit","BitAnd"],"kind":"trait"},"17:13147:49208":{"crate_id":17,"path":["object","pe","ImageRomHeaders"],"kind":"struct"},"17:10364:3928":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbol"],"kind":"struct"},"17:13094:49202":{"crate_id":17,"path":["object","pe","ImageOptionalHeader64"],"kind":"struct"},"1:6219:1978":{"crate_id":1,"path":["std","os","unix","process","CommandExt"],"kind":"trait"},"1:14404:1965":{"crate_id":1,"path":["std","sys","unix","fs","OpenOptions"],"kind":"struct"},"6:6943:39712":{"crate_id":6,"path":["libc","unix","linux_like","linux","can_frame"],"kind":"struct"},"6:4538:39583":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_can"],"kind":"struct"},"6:1740:37427":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_storage"],"kind":"struct"},"17:11725:44619":{"crate_id":17,"path":["object","elf","Verdef"],"kind":"struct"},"5:69:3206":{"crate_id":5,"path":["alloc","raw_vec","RawVec"],"kind":"struct"},"2:46770:101":{"crate_id":2,"path":["core","ffi","c_str","CStr"],"kind":"struct"},"1:4140:2308":{"crate_id":1,"path":["std","io","stdio","StdinRaw"],"kind":"struct"},"16:6518:3561":{"crate_id":16,"path":["gimli","read","loclists","LocationLists"],"kind":"struct"},"12:979:2197":{"crate_id":12,"path":["hashbrown","map","RawEntryBuilder"],"kind":"struct"},"6:5455:59306":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","sifields_sigchld"],"kind":"struct"},"1:1418:2189":{"crate_id":1,"path":["std","collections","hash","map","Values"],"kind":"struct"},"1:14399:53381":{"crate_id":1,"path":["std","sys","unix","fs","StatxExtraFields"],"kind":"struct"},"1:11449:2133":{"crate_id":1,"path":["std","path","Component"],"kind":"enum"},"9:1056:3373":{"crate_id":9,"path":["miniz_oxide","DataFormat"],"kind":"enum"},"5:844:227":{"crate_id":5,"path":["alloc","borrow","ToOwned"],"kind":"trait"},"2:46756:2835":{"crate_id":2,"path":["core","char","TryFromCharError"],"kind":"struct"},"2:23293:2576":{"crate_id":2,"path":["core","core_simd","masks","mask_impl","Mask"],"kind":"struct"},"17:9160:3914":{"crate_id":17,"path":["object","common","FileFlags"],"kind":"enum"},"2:49659:2930":{"crate_id":2,"path":["core","slice","iter","ArrayChunksMut"],"kind":"struct"},"17:11956:43935":{"crate_id":17,"path":["object","macho","FatArch64"],"kind":"struct"},"1:2359:8000":{"crate_id":1,"path":["std","env","Vars"],"kind":"struct"},"1:12228:4597":{"crate_id":1,"path":["std","sys","unix","args","Args"],"kind":"struct"},"2:2288:2748":{"crate_id":2,"path":["core","ptr","metadata","DynMetadata"],"kind":"struct"},"9:927:41370":{"crate_id":9,"path":["miniz_oxide","inflate","TINFLStatus"],"kind":"enum"},"2:53796:17834":{"crate_id":2,"path":["core","core_arch","x86","__m128bh"],"kind":"struct"},"2:24823:172":{"crate_id":2,"path":["core","num","nonzero","NonZeroU16"],"kind":"struct"},"1:6645:1968":{"crate_id":1,"path":["std","os","fd","raw","AsRawFd"],"kind":"trait"},"1:10416:1972":{"crate_id":1,"path":["std","sealed","Sealed"],"kind":"trait"},"1:11314:1980":{"crate_id":1,"path":["std","os","fd","owned","BorrowedFd"],"kind":"struct"},"17:13735:49764":{"crate_id":17,"path":["object","pe","ImageHotPatchHashes"],"kind":"struct"},"1:1397:2035":{"crate_id":1,"path":["std","collections","hash","map","IntoIter"],"kind":"struct"},"2:3372:2425":{"crate_id":2,"path":["core","marker","Unsize"],"kind":"trait"},"6:6643:36476":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","not_x32","statvfs"],"kind":"struct"},"1:7248:187":{"crate_id":1,"path":["std","path","Path"],"kind":"struct"},"1:11854:2155":{"crate_id":1,"path":["std","process","ExitStatus"],"kind":"struct"},"2:8435:55610":{"crate_id":2,"path":["core","iter","sources","from_generator","FromGenerator"],"kind":"struct"},"1:11238:2004":{"crate_id":1,"path":["std","os","unix","net","addr","SocketAddr"],"kind":"struct"},"1:10695:119":{"crate_id":1,"path":["std","fs","DirBuilder"],"kind":"struct"},"6:6129:40602":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_xmmreg"],"kind":"struct"},"2:14371:2981":{"crate_id":2,"path":["core","task","wake","Waker"],"kind":"struct"},"17:9561:3917":{"crate_id":17,"path":["object","read","util","StringTable"],"kind":"struct"},"2:50171:2497":{"crate_id":2,"path":["core","str","pattern","SearchStep"],"kind":"enum"},"6:1600:37414":{"crate_id":6,"path":["libc","unix","linux_like","fd_set"],"kind":"struct"},"2:50767:2765":{"crate_id":2,"path":["core","alloc","layout","LayoutError"],"kind":"struct"},"17:13602:49759":{"crate_id":17,"path":["object","pe","ImageEpilogueDynamicRelocationHeader"],"kind":"struct"},"1:1031:2023":{"crate_id":1,"path":["std","ascii","AsciiExt"],"kind":"trait"},"2:24313:35522":{"crate_id":2,"path":["core","num","dec2flt","common","AsciiStr"],"kind":"struct"},"16:5427:3594":{"crate_id":16,"path":["gimli","read","cfi","SectionBaseAddresses"],"kind":"struct"},"2:3843:2429":{"crate_id":2,"path":["core","ops","try_trait","NeverShortCircuit"],"kind":"struct"},"1:1578:2198":{"crate_id":1,"path":["std","collections","hash","map","Entry"],"kind":"enum"},"2:53413:2643":{"crate_id":2,"path":["core","core_arch","simd","i32x16"],"kind":"struct"},"1:11048:2008":{"crate_id":1,"path":["std","net","ip","IpAddr"],"kind":"enum"},"1:2911:2279":{"crate_id":1,"path":["std","fs","DirEntry"],"kind":"struct"},"2:52025:2626":{"crate_id":2,"path":["core","core_arch","simd","f32x4"],"kind":"struct"},"6:6925:39709":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_cond_t"],"kind":"struct"},"17:13073:49201":{"crate_id":17,"path":["object","pe","ImageRomOptionalHeader"],"kind":"struct"},"17:10949:43989":{"crate_id":17,"path":["object","read","pe","section","PeSegmentIterator"],"kind":"struct"},"2:50538:2967":{"crate_id":2,"path":["core","str","UnsafeBytesToStr"],"kind":"struct"},"5:1502:2198":{"crate_id":5,"path":["alloc","collections","btree","map","entry","Entry"],"kind":"enum"},"1:8545:2360":{"crate_id":1,"path":["std","sync","lazy_lock","LazyLock"],"kind":"struct"},"12:2066:2040":{"crate_id":12,"path":["hashbrown","set","SymmetricDifference"],"kind":"struct"},"16:6381:3559":{"crate_id":16,"path":["gimli","read","line","IncompleteLineProgram"],"kind":"struct"},"2:24955:2265":{"crate_id":2,"path":["core","num","nonzero","NonZeroUsize"],"kind":"struct"},"9:234:3338":{"crate_id":9,"path":["miniz_oxide","deflate","core","HuffmanOxide"],"kind":"struct"},"18:668:4008":{"crate_id":18,"path":["memchr","memmem","rabinkarp","NeedleHash"],"kind":"struct"},"1:4752:2002":{"crate_id":1,"path":["std","net","addr","ToSocketAddrs"],"kind":"trait"},"16:5460:3596":{"crate_id":16,"path":["gimli","read","cfi","CieOrFde"],"kind":"enum"},"1:12082:214":{"crate_id":1,"path":["std","sync","rwlock","RwLockWriteGuard"],"kind":"struct"},"2:2919:185":{"crate_id":2,"path":["core","cmp","PartialEq"],"kind":"trait"},"1:10665:1966":{"crate_id":1,"path":["std","fs","Permissions"],"kind":"struct"},"2:32594:3017":{"crate_id":2,"path":["core","mem","manually_drop","ManuallyDrop"],"kind":"struct"},"6:6268:40611":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ucontext_t"],"kind":"struct"},"17:13306:49367":{"crate_id":17,"path":["object","pe","ImageAuxSymbolFunctionBeginEnd"],"kind":"struct"},"17:13257:49300":{"crate_id":17,"path":["object","pe","ImageSymbolEx"],"kind":"struct"},"16:3129:3816":{"crate_id":16,"path":["gimli","common","RangeListsOffset"],"kind":"struct"},"2:47097:1905":{"crate_id":2,"path":["core","iter","adapters","take","Take"],"kind":"struct"},"16:2861:3802":{"crate_id":16,"path":["gimli","common","DebugAddrIndex"],"kind":"struct"}},"external_crates":{"4":{"name":"rustc_std_workspace_core","html_root_url":"https://doc.rust-lang.org/nightly/"},"3":{"name":"compiler_builtins","html_root_url":"https://doc.rust-lang.org/nightly/"},"8":{"name":"cfg_if","html_root_url":"https://docs.rs/cfg-if/"},"14":{"name":"rustc_demangle","html_root_url":"https://doc.rust-lang.org/nightly/"},"12":{"name":"hashbrown","html_root_url":"https://doc.rust-lang.org/nightly/"},"19":{"name":"panic_unwind","html_root_url":"https://doc.rust-lang.org/nightly/"},"1":{"name":"std","html_root_url":"https://doc.rust-lang.org/nightly/"},"11":{"name":"adler","html_root_url":"https://docs.rs/adler/0.2.3/"},"15":{"name":"addr2line","html_root_url":"https://doc.rust-lang.org/nightly/"},"9":{"name":"miniz_oxide","html_root_url":"https://doc.rust-lang.org/nightly/"},"13":{"name":"std_detect","html_root_url":"https://doc.rust-lang.org/nightly/"},"16":{"name":"gimli","html_root_url":"https://doc.rust-lang.org/nightly/"},"5":{"name":"alloc","html_root_url":"https://doc.rust-lang.org/nightly/"},"7":{"name":"unwind","html_root_url":"https://doc.rust-lang.org/nightly/"},"17":{"name":"object","html_root_url":"https://doc.rust-lang.org/nightly/"},"18":{"name":"memchr","html_root_url":"https://doc.rust-lang.org/nightly/"},"6":{"name":"libc","html_root_url":"https://doc.rust-lang.org/nightly/"},"2":{"name":"core","html_root_url":"https://doc.rust-lang.org/nightly/"},"10":{"name":"rustc_std_workspace_alloc","html_root_url":"https://doc.rust-lang.org/nightly/"}},"format_version":21}