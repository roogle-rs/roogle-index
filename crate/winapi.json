{"root":"0:0:1614","crate_version":"0.3.9","includes_private":false,"index":{"2:11321:51222":{"id":"2:11321:51222","crate_id":2,"name":"is_empty","span":null,"visibility":"public","docs":"Returns `true` if `self` has a length of zero bytes.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\";\nassert!(s.is_empty());\n\nlet s = \"not empty\";\nassert!(!s.is_empty());\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11381:58199":{"id":"2:11381:58199","crate_id":2,"name":"rsplit_terminator","span":null,"visibility":"public","docs":"An iterator over substrings of `self`, separated by characters\nmatched by a pattern and yielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\nEquivalent to [`split`], except that the trailing substring is\nskipped if empty.\n\n[`split`]: str::split\n\nThis method can be used for string data that is _terminated_,\nrather than _separated_ by a pattern.\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a\nreverse search, and it will be double ended if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`split_terminator`] method can be\nused.\n\n[`split_terminator`]: str::split_terminator\n\n# Examples\n\n```\nlet v: Vec<&str> = \"A.B.\".rsplit_terminator('.').collect();\nassert_eq!(v, [\"B\", \"A\"]);\n\nlet v: Vec<&str> = \"A..B..\".rsplit_terminator(\".\").collect();\nassert_eq!(v, [\"\", \"B\", \"\", \"A\"]);\n\nlet v: Vec<&str> = \"A.B:C.D\".rsplit_terminator(&['.', ':'][..]).collect();\nassert_eq!(v, [\"D\", \"C\", \"B\", \"A\"]);\n```","links":{"prim@char":"1:12350:1740","str::split_terminator":"2:11378:58198","self::pattern":"2:11021:2632","str::split":"2:11369:51454"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"RSplitTerminator","id":"2:50053:2916","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11026:2633","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"2:11026:2633","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11041:2636","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11446:58216":{"id":"2:11446:58216","crate_id":2,"name":"escape_unicode","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_unicode`].\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"❤\\n!\".escape_unicode() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"❤\\n!\".escape_unicode());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"\\\\u{{2764}}\\\\u{{a}}\\\\u{{21}}\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"❤\\n!\".escape_unicode().to_string(), \"\\\\u{2764}\\\\u{a}\\\\u{21}\");\n```","links":{"`char::escape_unicode`":"2:4451:58216"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"EscapeUnicode","id":"2:50302:2929","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11325:58193":{"id":"2:11325:58193","crate_id":2,"name":"ceil_char_boundary","span":null,"visibility":"public","docs":"Finds the closest `x` not below `index` where `is_char_boundary(x)` is `true`.\n\nThis method is the natural complement to [`floor_char_boundary`]. See that method\nfor more details.\n\n[`floor_char_boundary`]: str::floor_char_boundary\n\n# Panics\n\nPanics if `index > self.len()`.\n\n# Examples\n\n```\n#![feature(round_char_boundary)]\nlet s = \"❤️🧡💛💚💙💜\";\nassert_eq!(s.len(), 26);\nassert!(!s.is_char_boundary(13));\n\nlet closest = s.ceil_char_boundary(13);\nassert_eq!(closest, 14);\nassert_eq!(&s[..closest], \"❤️🧡💛\");\n```","links":{"str::floor_char_boundary":"2:11323:58192"},"attrs":["#[unstable(feature = \"round_char_boundary\", issue = \"93743\")]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["index",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"primitive","inner":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11442:52166":{"id":"2:11442:52166","crate_id":2,"name":"make_ascii_lowercase","span":null,"visibility":"public","docs":"Converts this string to its ASCII lower case equivalent in-place.\n\nASCII letters 'A' to 'Z' are mapped to 'a' to 'z',\nbut non-ASCII letters are unchanged.\n\nTo return a new lowercased value without modifying the existing one, use\n[`to_ascii_lowercase()`].\n\n[`to_ascii_lowercase()`]: #method.to_ascii_lowercase\n\n# Examples\n\n```\nlet mut s = String::from(\"GRÜßE, JÜRGEN ❤\");\n\ns.make_ascii_lowercase();\n\nassert_eq!(\"grÜße, jÜrgen ❤\", s);\n```","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11350:58197":{"id":"2:11350:58197","crate_id":2,"name":"lines_any","span":null,"visibility":"public","docs":"An iterator over the lines of a string.","links":{},"attrs":["#[deprecated(since = \"1.4.0\", note = \"use lines() instead now\")]"],"deprecation":{"since":"1.4.0","note":"use lines() instead now"},"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"LinesAny","id":"2:50249:2924","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11422:50770":{"id":"2:11422:50770","crate_id":2,"name":"strip_prefix","span":null,"visibility":"public","docs":"Returns a string slice with the prefix removed.\n\nIf the string starts with the pattern `prefix`, returns substring after the prefix, wrapped\nin `Some`.  Unlike `trim_start_matches`, this method removes the prefix exactly once.\n\nIf the string does not start with `prefix`, returns `None`.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nassert_eq!(\"foo:bar\".strip_prefix(\"foo:\"), Some(\"bar\"));\nassert_eq!(\"foo:bar\".strip_prefix(\"bar\"), None);\nassert_eq!(\"foofoo\".strip_prefix(\"foo\"), Some(\"foo\"));\n```","links":{"self::pattern":"2:11021:2632","prim@char":"1:12350:1740"},"attrs":["#[must_use =\n\"this returns the remaining substring as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["prefix",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:48017:176","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11026:2633","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11331:54071":{"id":"2:11331:54071","crate_id":2,"name":"as_mut_ptr","span":null,"visibility":"public","docs":"Converts a mutable string slice to a raw pointer.\n\nAs string slices are a slice of bytes, the raw pointer points to a\n[`u8`]. This pointer will be pointing to the first byte of the string\nslice.\n\nIt is your responsibility to make sure that the string slice only gets\nmodified in a way that it remains valid UTF-8.","links":{"`u8`":"1:12367:1754"},"attrs":["#[must_use]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"raw_pointer","inner":{"mutable":true,"type":{"kind":"primitive","inner":"u8"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11425:54112":{"id":"2:11425:54112","crate_id":2,"name":"strip_suffix","span":null,"visibility":"public","docs":"Returns a string slice with the suffix removed.\n\nIf the string ends with the pattern `suffix`, returns the substring before the suffix,\nwrapped in `Some`.  Unlike `trim_end_matches`, this method removes the suffix exactly once.\n\nIf the string does not end with `suffix`, returns `None`.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nassert_eq!(\"bar:foo\".strip_suffix(\":foo\"), Some(\"bar\"));\nassert_eq!(\"bar:foo\".strip_suffix(\"bar\"), None);\nassert_eq!(\"foofoo\".strip_suffix(\"foo\"), Some(\"foo\"));\n```","links":{"prim@char":"1:12350:1740","self::pattern":"2:11021:2632"},"attrs":["#[must_use =\n\"this returns the remaining substring as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["suffix",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:48017:176","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11026:2633","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"2:11026:2633","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11041:2636","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11342:54092":{"id":"2:11342:54092","crate_id":2,"name":"split_at","span":null,"visibility":"public","docs":"Divide one string slice into two at an index.\n\nThe argument, `mid`, should be a byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get mutable string slices instead, see the [`split_at_mut`]\nmethod.\n\n[`split_at_mut`]: str::split_at_mut\n\n# Panics\n\nPanics if `mid` is not on a UTF-8 code point boundary, or if it is\npast the end of the last code point of the string slice.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"Per Martin-Löf\";\n\nlet (first, last) = s.split_at(3);\n\nassert_eq!(\"Per\", first);\nassert_eq!(\" Martin-Löf\", last);\n```","links":{"str::split_at_mut":"2:11343:54093"},"attrs":["#[must_use]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["mid",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"tuple","inner":[{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11390:58200":{"id":"2:11390:58200","crate_id":2,"name":"split_once","span":null,"visibility":"public","docs":"Splits the string on the first occurrence of the specified delimiter and\nreturns prefix before delimiter and suffix after delimiter.\n\n# Examples\n\n```\nassert_eq!(\"cfg\".split_once('='), None);\nassert_eq!(\"cfg=\".split_once('='), Some((\"cfg\", \"\")));\nassert_eq!(\"cfg=foo\".split_once('='), Some((\"cfg\", \"foo\")));\nassert_eq!(\"cfg=foo=bar\".split_once('='), Some((\"cfg\", \"foo=bar\")));\n```","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["delimiter",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:48017:176","args":{"angle_bracketed":{"args":[{"type":{"kind":"tuple","inner":[{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}},{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11026:2633","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11372:54101":{"id":"2:11372:54101","crate_id":2,"name":"split_inclusive","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by\ncharacters matched by a pattern. Differs from the iterator produced by\n`split` in that `split_inclusive` leaves the matched part as the\nterminator of the substring.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\\nlittle lamb\\nlittle lamb.\"\n    .split_inclusive('\\n').collect();\nassert_eq!(v, [\"Mary had a little lamb\\n\", \"little lamb\\n\", \"little lamb.\"]);\n```\n\nIf the last element of the string is matched,\nthat element will be considered the terminator of the preceding substring.\nThat substring will be the last item returned by the iterator.\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\\nlittle lamb\\nlittle lamb.\\n\"\n    .split_inclusive('\\n').collect();\nassert_eq!(v, [\"Mary had a little lamb\\n\", \"little lamb\\n\", \"little lamb.\\n\"]);\n```","links":{"self::pattern":"2:11021:2632","prim@char":"1:12350:1740"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"SplitInclusive","id":"2:10845:2327","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11026:2633","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"5:5109:2015":{"id":"5:5109:2015","crate_id":5,"name":"repeat","span":null,"visibility":"public","docs":"Creates a new [`String`] by repeating a string `n` times.\n\n# Panics\n\nThis function will panic if the capacity would overflow.\n\n# Examples\n\nBasic usage:\n\n```\nassert_eq!(\"abc\".repeat(4), String::from(\"abcabcabcabc\"));\n```\n\nA panic upon overflow:\n\n```should_panic\n// this will panic at runtime\nlet huge = \"0123456789abcdef\".repeat(usize::MAX);\n```","links":{"`String`":"5:6978:218"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["n",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:6978:218","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11365:4067":{"id":"2:11365:4067","crate_id":2,"name":"rfind","span":null,"visibility":"public","docs":"Returns the byte index for the first character of the last match of the pattern in\nthis string slice.\n\nReturns [`None`] if the pattern doesn't match.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nlet s = \"Löwe 老虎 Léopard Gepardi\";\n\nassert_eq!(s.rfind('L'), Some(13));\nassert_eq!(s.rfind('é'), Some(14));\nassert_eq!(s.rfind(\"pard\"), Some(24));\n```\n\nMore complex patterns with closures:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\n\nassert_eq!(s.rfind(char::is_whitespace), Some(12));\nassert_eq!(s.rfind(char::is_lowercase), Some(20));\n```\n\nNot finding the pattern:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\nlet x: &[_] = &['1', '2'];\n\nassert_eq!(s.rfind(x), None);\n```","links":{"self::pattern":"2:11021:2632","`None`":"2:48019:174","prim@char":"1:12350:1740"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:48017:176","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11026:2633","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"2:11026:2633","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11041:2636","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11343:54093":{"id":"2:11343:54093","crate_id":2,"name":"split_at_mut","span":null,"visibility":"public","docs":"Divide one mutable string slice into two at an index.\n\nThe argument, `mid`, should be a byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get immutable string slices instead, see the [`split_at`] method.\n\n[`split_at`]: str::split_at\n\n# Panics\n\nPanics if `mid` is not on a UTF-8 code point boundary, or if it is\npast the end of the last code point of the string slice.\n\n# Examples\n\nBasic usage:\n\n```\nlet mut s = \"Per Martin-Löf\".to_string();\n{\n    let (first, last) = s.split_at_mut(3);\n    first.make_ascii_uppercase();\n    assert_eq!(\"PER\", first);\n    assert_eq!(\" Martin-Löf\", last);\n}\nassert_eq!(\"PER Martin-Löf\", s);\n```","links":{"str::split_at":"2:11342:54092"},"attrs":["#[must_use]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["mid",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"tuple","inner":[{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"primitive","inner":"str"}}},{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"primitive","inner":"str"}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11384:54105":{"id":"2:11384:54105","crate_id":2,"name":"splitn","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by a\npattern, restricted to returning at most `n` items.\n\nIf `n` substrings are returned, the last substring (the `n`th substring)\nwill contain the remainder of the string.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will not be double ended, because it is\nnot efficient to support.\n\nIf the pattern allows a reverse search, the [`rsplitn`] method can be\nused.\n\n[`rsplitn`]: str::rsplitn\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lambda\".splitn(3, ' ').collect();\nassert_eq!(v, [\"Mary\", \"had\", \"a little lambda\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".splitn(3, \"X\").collect();\nassert_eq!(v, [\"lion\", \"\", \"tigerXleopard\"]);\n\nlet v: Vec<&str> = \"abcXdef\".splitn(1, 'X').collect();\nassert_eq!(v, [\"abcXdef\"]);\n\nlet v: Vec<&str> = \"\".splitn(1, 'X').collect();\nassert_eq!(v, [\"\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".splitn(2, |c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"abc\", \"defXghi\"]);\n```","links":{"str::rsplitn":"2:11387:54107","prim@char":"1:12350:1740","self::pattern":"2:11021:2632"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["n",{"kind":"primitive","inner":"usize"}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"SplitN","id":"2:50089:2325","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11026:2633","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11419:58211":{"id":"2:11419:58211","crate_id":2,"name":"trim_start_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. `start` in this context means the first\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be left side, and for right-to-left languages like\nArabic or Hebrew, this will be the right side.\n\n# Examples\n\nBasic usage:\n\n```\nassert_eq!(\"11foo1bar11\".trim_start_matches('1'), \"foo1bar11\");\nassert_eq!(\"123foo1bar123\".trim_start_matches(char::is_numeric), \"foo1bar123\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_start_matches(x), \"foo1bar12\");\n```","links":{"self::pattern":"2:11021:2632","prim@char":"1:12350:1740"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11026:2633","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"5:5096:58849":{"id":"5:5096:58849","crate_id":5,"name":"replacen","span":null,"visibility":"public","docs":"Replaces first N matches of a pattern with another string.\n\n`replacen` creates a new [`String`], and copies the data from this string slice into it.\nWhile doing so, it attempts to find matches of a pattern. If it finds any, it\nreplaces them with the replacement string slice at most `count` times.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"foo foo 123 foo\";\nassert_eq!(\"new new 123 foo\", s.replacen(\"foo\", \"new\", 2));\nassert_eq!(\"faa fao 123 foo\", s.replacen('o', \"a\", 3));\nassert_eq!(\"foo foo new23 foo\", s.replacen(char::is_numeric, \"new\", 1));\n```\n\nWhen the pattern doesn't match:\n\n```\nlet s = \"this is old\";\nassert_eq!(s, s.replacen(\"cookie monster\", \"little lamb\", 10));\n```","links":{"`String`":"5:6978:218"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the replaced string as a new allocation, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}],["to",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}],["count",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:6978:218","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11026:2633","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11322:58191":{"id":"2:11322:58191","crate_id":2,"name":"is_char_boundary","span":null,"visibility":"public","docs":"Checks that `index`-th byte is the first byte in a UTF-8 code point\nsequence or the end of the string.\n\nThe start and end of the string (when `index == self.len()`) are\nconsidered to be boundaries.\n\nReturns `false` if `index` is greater than `self.len()`.\n\n# Examples\n\n```\nlet s = \"Löwe 老虎 Léopard\";\nassert!(s.is_char_boundary(0));\n// start of `老`\nassert!(s.is_char_boundary(6));\nassert!(s.is_char_boundary(s.len()));\n\n// second byte of `ö`\nassert!(!s.is_char_boundary(2));\n\n// third byte of `老`\nassert!(!s.is_char_boundary(8));\n```","links":{},"attrs":["#[must_use]","#[rustc_const_unstable(feature = \"const_is_char_boundary\", issue = \"none\")]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["index",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11334:54068":{"id":"2:11334:54068","crate_id":2,"name":"get_mut","span":null,"visibility":"public","docs":"Returns a mutable subslice of `str`.\n\nThis is the non-panicking alternative to indexing the `str`. Returns\n[`None`] whenever equivalent indexing operation would panic.\n\n# Examples\n\n```\nlet mut v = String::from(\"hello\");\n// correct length\nassert!(v.get_mut(0..5).is_some());\n// out of bounds\nassert!(v.get_mut(..42).is_none());\nassert_eq!(Some(\"he\"), v.get_mut(0..2).map(|v| &*v));\n\nassert_eq!(\"hello\", v);\n{\n    let s = v.get_mut(0..2);\n    let s = s.map(|s| {\n        s.make_ascii_uppercase();\n        &*s\n    });\n    assert_eq!(Some(\"HE\"), s);\n}\nassert_eq!(\"HEllo\", v);\n```","links":{"`None`":"2:48019:174"},"attrs":["#[rustc_const_unstable(feature = \"const_slice_index\", issue = \"none\")]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["i",{"kind":"generic","inner":"I"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:48017:176","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"qualified_path","inner":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"I"},"trait":{"name":"SliceIndex","id":"2:9118:216","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}}}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"2:9118:216","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"5:5108:58852":{"id":"5:5108:58852","crate_id":5,"name":"into_string","span":null,"visibility":"public","docs":"Converts a [`Box<str>`] into a [`String`] without copying or allocating.\n\n# Examples\n\nBasic usage:\n\n```\nlet string = String::from(\"birthday gift\");\nlet boxed_str = string.clone().into_boxed_str();\n\nassert_eq!(boxed_str.into_string(), string);\n```","links":{"`Box<str>`":"5:276:1857","`String`":"5:6978:218"},"attrs":["#[must_use = \"`self` will be dropped if the result is not used\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"resolved_path","inner":{"name":"Box","id":"5:276:1857","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}},{"type":{"kind":"resolved_path","inner":{"name":"Global","id":"5:6723:2297","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:6978:218","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11323:58192":{"id":"2:11323:58192","crate_id":2,"name":"floor_char_boundary","span":null,"visibility":"public","docs":"Finds the closest `x` not exceeding `index` where `is_char_boundary(x)` is `true`.\n\nThis method can help you truncate a string so that it's still valid UTF-8, but doesn't\nexceed a given number of bytes. Note that this is done purely at the character level\nand can still visually split graphemes, even though the underlying characters aren't\nsplit. For example, the emoji 🧑‍🔬 (scientist) could be split so that the string only\nincludes 🧑 (person) instead.\n\n# Examples\n\n```\n#![feature(round_char_boundary)]\nlet s = \"❤️🧡💛💚💙💜\";\nassert_eq!(s.len(), 26);\nassert!(!s.is_char_boundary(13));\n\nlet closest = s.floor_char_boundary(13);\nassert_eq!(closest, 10);\nassert_eq!(&s[..closest], \"❤️🧡\");\n```","links":{},"attrs":["#[unstable(feature = \"round_char_boundary\", issue = \"93743\")]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["index",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"primitive","inner":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11431:58213":{"id":"2:11431:58213","crate_id":2,"name":"trim_left_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. 'Left' in this context means the first\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _right_ side, not the left.\n\n# Examples\n\nBasic usage:\n\n```\nassert_eq!(\"11foo1bar11\".trim_left_matches('1'), \"foo1bar11\");\nassert_eq!(\"123foo1bar123\".trim_left_matches(char::is_numeric), \"foo1bar123\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_left_matches(x), \"foo1bar12\");\n```","links":{"self::pattern":"2:11021:2632","prim@char":"1:12350:1740"},"attrs":["#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_start_matches`\",\nsuggestion = \"trim_start_matches\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_start_matches`"},"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11026:2633","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11340:58195":{"id":"2:11340:58195","crate_id":2,"name":"slice_unchecked","span":null,"visibility":"public","docs":"Creates a string slice from another string slice, bypassing safety\nchecks.\n\nThis is generally not recommended, use with caution! For a safe\nalternative see [`str`] and [`Index`].\n\n[`Index`]: crate::ops::Index\n\nThis new slice goes from `begin` to `end`, including `begin` but\nexcluding `end`.\n\nTo get a mutable string slice instead, see the\n[`slice_mut_unchecked`] method.\n\n[`slice_mut_unchecked`]: str::slice_mut_unchecked\n\n# Safety\n\nCallers of this function are responsible that three preconditions are\nsatisfied:\n\n* `begin` must not exceed `end`.\n* `begin` and `end` must be byte positions within the string slice.\n* `begin` and `end` must lie on UTF-8 sequence boundaries.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\n\nunsafe {\n    assert_eq!(\"Löwe 老虎 Léopard\", s.slice_unchecked(0, 21));\n}\n\nlet s = \"Hello, world!\";\n\nunsafe {\n    assert_eq!(\"world\", s.slice_unchecked(7, 12));\n}\n```","links":{"`str`":"1:12356:1745","str::slice_mut_unchecked":"2:11341:58196","crate::ops::Index":"2:2970:2276"},"attrs":["#[deprecated(since = \"1.29.0\", note =\n\"use `get_unchecked(begin..end)` instead\")]","#[must_use]"],"deprecation":{"since":"1.29.0","note":"use `get_unchecked(begin..end)` instead"},"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["begin",{"kind":"primitive","inner":"usize"}],["end",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}},"2:11319":{"id":"2:11319","crate_id":2,"name":null,"span":null,"visibility":{"restricted":{"parent":"2:10584:1344","path":"::str"}},"docs":null,"links":{},"attrs":["#[cfg(not(test))]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"kind":"primitive","inner":"str"},"items":["2:11320:782","2:11321:51222","2:11322:58191","2:11323:58192","2:11325:58193","2:11328:50681","2:11329:58194","2:11330:306","2:11331:54071","2:11332:54067","2:11334:54068","2:11336:54069","2:11338:54070","2:11340:58195","2:11341:58196","2:11342:54092","2:11343:54093","2:11344:2947","2:11345:2663","2:11346:3130","2:11347:57030","2:11348:57032","2:11349:3492","2:11350:58197","2:11351:57025","2:11352:54109","2:11355:54110","2:11358:54111","2:11361:4066","2:11365:4067","2:11369:51454","2:11372:54101","2:11375:54103","2:11378:58198","2:11381:58199","2:11384:54105","2:11387:54107","2:11390:58200","2:11393:58201","2:11396:1826","2:11399:58202","2:11402:58203","2:11405:58204","2:11408:58205","2:11410:58206","2:11412:58207","2:11414:58208","2:11415:58209","2:11416:58210","2:11419:58211","2:11422:50770","2:11425:54112","2:11428:58212","2:11431:58213","2:11434:58214","2:11437:2801","2:11439:3124","2:11440:52164","2:11441:52165","2:11442:52166","2:11443:58215","2:11445:2338","2:11446:58216"],"negative":false,"synthetic":false,"blanket_impl":null}},"2:11399:58202":{"id":"2:11399:58202","crate_id":2,"name":"rmatches","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within this string slice,\nyielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`matches`] method can be used.\n\n[`matches`]: str::matches\n\n# Examples\n\nBasic usage:\n\n```\nlet v: Vec<&str> = \"abcXXXabcYYYabc\".rmatches(\"abc\").collect();\nassert_eq!(v, [\"abc\", \"abc\", \"abc\"]);\n\nlet v: Vec<&str> = \"1abc2abc3\".rmatches(char::is_numeric).collect();\nassert_eq!(v, [\"3\", \"2\", \"1\"]);\n```","links":{"str::matches":"2:11396:1826","self::pattern":"2:11021:2632","`DoubleEndedIterator`":"2:7061:120","prim@char":"1:12350:1740"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"RMatches","id":"2:50207:2923","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11026:2633","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"2:11026:2633","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11041:2636","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11347:57030":{"id":"2:11347:57030","crate_id":2,"name":"split_whitespace","span":null,"visibility":"public","docs":"Splits a string slice by whitespace.\n\nThe iterator returned will return string slices that are sub-slices of\nthe original string slice, separated by any amount of whitespace.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`. If you only want to split on ASCII whitespace\ninstead, use [`split_ascii_whitespace`].\n\n[`split_ascii_whitespace`]: str::split_ascii_whitespace\n\n# Examples\n\nBasic usage:\n\n```\nlet mut iter = \"A few words\".split_whitespace();\n\nassert_eq!(Some(\"A\"), iter.next());\nassert_eq!(Some(\"few\"), iter.next());\nassert_eq!(Some(\"words\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nAll kinds of whitespace are considered:\n\n```\nlet mut iter = \" Mary   had\\ta\\u{2009}little  \\n\\t lamb\".split_whitespace();\nassert_eq!(Some(\"Mary\"), iter.next());\nassert_eq!(Some(\"had\"), iter.next());\nassert_eq!(Some(\"a\"), iter.next());\nassert_eq!(Some(\"little\"), iter.next());\nassert_eq!(Some(\"lamb\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nIf the string is empty or all whitespace, the iterator yields no string slices:\n```\nassert_eq!(\"\".split_whitespace().next(), None);\nassert_eq!(\"   \".split_whitespace().next(), None);\n```","links":{"str::split_ascii_whitespace":"2:11348:57032"},"attrs":["#[must_use =\n\"this returns the split string as an iterator, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_split_whitespace\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"SplitWhitespace","id":"2:50259:2925","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11348:57032":{"id":"2:11348:57032","crate_id":2,"name":"split_ascii_whitespace","span":null,"visibility":"public","docs":"Splits a string slice by ASCII whitespace.\n\nThe iterator returned will return string slices that are sub-slices of\nthe original string slice, separated by any amount of ASCII whitespace.\n\nTo split by Unicode `Whitespace` instead, use [`split_whitespace`].\n\n[`split_whitespace`]: str::split_whitespace\n\n# Examples\n\nBasic usage:\n\n```\nlet mut iter = \"A few words\".split_ascii_whitespace();\n\nassert_eq!(Some(\"A\"), iter.next());\nassert_eq!(Some(\"few\"), iter.next());\nassert_eq!(Some(\"words\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nAll kinds of ASCII whitespace are considered:\n\n```\nlet mut iter = \" Mary   had\\ta little  \\n\\t lamb\".split_ascii_whitespace();\nassert_eq!(Some(\"Mary\"), iter.next());\nassert_eq!(Some(\"had\"), iter.next());\nassert_eq!(Some(\"a\"), iter.next());\nassert_eq!(Some(\"little\"), iter.next());\nassert_eq!(Some(\"lamb\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nIf the string is empty or all ASCII whitespace, the iterator yields no string slices:\n```\nassert_eq!(\"\".split_ascii_whitespace().next(), None);\nassert_eq!(\"   \".split_ascii_whitespace().next(), None);\n```","links":{"str::split_whitespace":"2:11347:57030"},"attrs":["#[must_use =\n\"this returns the split string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"SplitAsciiWhitespace","id":"2:50268:2926","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"5:5092:58848":{"id":"5:5092:58848","crate_id":5,"name":"into_boxed_bytes","span":null,"visibility":"public","docs":"Converts a `Box<str>` into a `Box<[u8]>` without copying or allocating.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"this is a string\";\nlet boxed_str = s.to_owned().into_boxed_str();\nlet boxed_bytes = boxed_str.into_boxed_bytes();\nassert_eq!(*boxed_bytes, *s.as_bytes());\n```","links":{},"attrs":["#[must_use = \"`self` will be dropped if the result is not used\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"resolved_path","inner":{"name":"Box","id":"5:276:1857","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}},{"type":{"kind":"resolved_path","inner":{"name":"Global","id":"5:6723:2297","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}]],"output":{"kind":"resolved_path","inner":{"name":"Box","id":"5:276:1857","args":{"angle_bracketed":{"args":[{"type":{"kind":"slice","inner":{"kind":"primitive","inner":"u8"}}},{"type":{"kind":"resolved_path","inner":{"name":"Global","id":"5:6723:2297","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11375:54103":{"id":"2:11375:54103","crate_id":2,"name":"rsplit","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by\ncharacters matched by a pattern and yielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`split`] method can be used.\n\n[`split`]: str::split\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".rsplit(' ').collect();\nassert_eq!(v, [\"lamb\", \"little\", \"a\", \"had\", \"Mary\"]);\n\nlet v: Vec<&str> = \"\".rsplit('X').collect();\nassert_eq!(v, [\"\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".rsplit('X').collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"\", \"lion\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".rsplit(\"::\").collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"lion\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".rsplit(|c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"ghi\", \"def\", \"abc\"]);\n```","links":{"self::pattern":"2:11021:2632","str::split":"2:11369:51454","`DoubleEndedIterator`":"2:7061:120","prim@char":"1:12350:1740"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"RSplit","id":"2:50003:2321","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11026:2633","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"2:11026:2633","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11041:2636","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11441:52165":{"id":"2:11441:52165","crate_id":2,"name":"make_ascii_uppercase","span":null,"visibility":"public","docs":"Converts this string to its ASCII upper case equivalent in-place.\n\nASCII letters 'a' to 'z' are mapped to 'A' to 'Z',\nbut non-ASCII letters are unchanged.\n\nTo return a new uppercased value without modifying the existing one, use\n[`to_ascii_uppercase()`].\n\n[`to_ascii_uppercase()`]: #method.to_ascii_uppercase\n\n# Examples\n\n```\nlet mut s = String::from(\"Grüße, Jürgen ❤\");\n\ns.make_ascii_uppercase();\n\nassert_eq!(\"GRüßE, JüRGEN ❤\", s);\n```","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11338:54070":{"id":"2:11338:54070","crate_id":2,"name":"get_unchecked_mut","span":null,"visibility":"public","docs":"Returns a mutable, unchecked subslice of `str`.\n\nThis is the unchecked alternative to indexing the `str`.\n\n# Safety\n\nCallers of this function are responsible that these preconditions are\nsatisfied:\n\n* The starting index must not exceed the ending index;\n* Indexes must be within bounds of the original slice;\n* Indexes must lie on UTF-8 sequence boundaries.\n\nFailing that, the returned string slice may reference invalid memory or\nviolate the invariants communicated by the `str` type.\n\n# Examples\n\n```\nlet mut v = String::from(\"🗻∈🌏\");\nunsafe {\n    assert_eq!(\"🗻\", v.get_unchecked_mut(0..4));\n    assert_eq!(\"∈\", v.get_unchecked_mut(4..7));\n    assert_eq!(\"🌏\", v.get_unchecked_mut(7..11));\n}\n```","links":{},"attrs":["#[rustc_const_unstable(feature = \"const_slice_index\", issue = \"none\")]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["i",{"kind":"generic","inner":"I"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"qualified_path","inner":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"I"},"trait":{"name":"SliceIndex","id":"2:9118:216","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}}}}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"2:9118:216","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}},"2:11434:58214":{"id":"2:11434:58214","crate_id":2,"name":"trim_right_matches","span":null,"visibility":"public","docs":"Returns a string slice with all suffixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. 'Right' in this context means the last\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _left_ side, not the right.\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_right_matches('1'), \"11foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_right_matches(char::is_numeric), \"123foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_right_matches(x), \"12foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1fooX\".trim_right_matches(|c| c == '1' || c == 'X'), \"1foo\");\n```","links":{"prim@char":"1:12350:1740","self::pattern":"2:11021:2632"},"attrs":["#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_end_matches`\",\nsuggestion = \"trim_end_matches\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_end_matches`"},"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11026:2633","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"2:11026:2633","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11041:2636","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"5:5110:52162":{"id":"5:5110:52162","crate_id":5,"name":"to_ascii_uppercase","span":null,"visibility":"public","docs":"Returns a copy of this string where each character is mapped to its\nASCII upper case equivalent.\n\nASCII letters 'a' to 'z' are mapped to 'A' to 'Z',\nbut non-ASCII letters are unchanged.\n\nTo uppercase the value in-place, use [`make_ascii_uppercase`].\n\nTo uppercase ASCII characters in addition to non-ASCII characters, use\n[`to_uppercase`].\n\n# Examples\n\n```\nlet s = \"Grüße, Jürgen ❤\";\n\nassert_eq!(\"GRüßE, JüRGEN ❤\", s.to_ascii_uppercase());\n```\n\n[`make_ascii_uppercase`]: str::make_ascii_uppercase\n[`to_uppercase`]: #method.to_uppercase","links":{"str::make_ascii_uppercase":"2:11441:52165"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use = \"to uppercase the value in-place, use `make_ascii_uppercase()`\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:6978:218","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11440:52164":{"id":"2:11440:52164","crate_id":2,"name":"eq_ignore_ascii_case","span":null,"visibility":"public","docs":"Checks that two strings are an ASCII case-insensitive match.\n\nSame as `to_ascii_lowercase(a) == to_ascii_lowercase(b)`,\nbut without allocating and copying temporaries.\n\n# Examples\n\n```\nassert!(\"Ferris\".eq_ignore_ascii_case(\"FERRIS\"));\nassert!(\"Ferrös\".eq_ignore_ascii_case(\"FERRöS\"));\nassert!(!\"Ferrös\".eq_ignore_ascii_case(\"FERRÖS\"));\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["other",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11328:50681":{"id":"2:11328:50681","crate_id":2,"name":"as_bytes","span":null,"visibility":"public","docs":"Converts a string slice to a byte slice. To convert the byte slice back\ninto a string slice, use the [`from_utf8`] function.\n\n# Examples\n\nBasic usage:\n\n```\nlet bytes = \"bors\".as_bytes();\nassert_eq!(b\"bors\", bytes);\n```","links":{"`from_utf8`":"2:10589:3081"},"attrs":["#[must_use]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"slice","inner":{"kind":"primitive","inner":"u8"}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11415:58209":{"id":"2:11415:58209","crate_id":2,"name":"trim_right","span":null,"visibility":"public","docs":"Returns a string slice with trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`.\n\n# Text directionality\n\nA string is a sequence of bytes. 'Right' in this context means the last\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _left_ side, not the right.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \" Hello\\tworld\\t\";\n\nassert_eq!(\" Hello\\tworld\", s.trim_right());\n```\n\nDirectionality:\n\n```\nlet s = \"English  \";\nassert!(Some('h') == s.trim_right().chars().rev().next());\n\nlet s = \"עברית  \";\nassert!(Some('ת') == s.trim_right().chars().rev().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_end`\", suggestion =\n\"trim_end\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_end`"},"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11341:58196":{"id":"2:11341:58196","crate_id":2,"name":"slice_mut_unchecked","span":null,"visibility":"public","docs":"Creates a string slice from another string slice, bypassing safety\nchecks.\nThis is generally not recommended, use with caution! For a safe\nalternative see [`str`] and [`IndexMut`].\n\n[`IndexMut`]: crate::ops::IndexMut\n\nThis new slice goes from `begin` to `end`, including `begin` but\nexcluding `end`.\n\nTo get an immutable string slice instead, see the\n[`slice_unchecked`] method.\n\n[`slice_unchecked`]: str::slice_unchecked\n\n# Safety\n\nCallers of this function are responsible that three preconditions are\nsatisfied:\n\n* `begin` must not exceed `end`.\n* `begin` and `end` must be byte positions within the string slice.\n* `begin` and `end` must lie on UTF-8 sequence boundaries.","links":{"`str`":"1:12356:1745","crate::ops::IndexMut":"2:2974:2335","str::slice_unchecked":"2:11340:58195"},"attrs":["#[deprecated(since = \"1.29.0\", note =\n\"use `get_unchecked_mut(begin..end)` instead\")]"],"deprecation":{"since":"1.29.0","note":"use `get_unchecked_mut(begin..end)` instead"},"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["begin",{"kind":"primitive","inner":"usize"}],["end",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}},"5:5093:1991":{"id":"5:5093:1991","crate_id":5,"name":"replace","span":null,"visibility":"public","docs":"Replaces all matches of a pattern with another string.\n\n`replace` creates a new [`String`], and copies the data from this string slice into it.\nWhile doing so, it attempts to find matches of a pattern. If it finds any, it\nreplaces them with the replacement string slice.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"this is old\";\n\nassert_eq!(\"this is new\", s.replace(\"old\", \"new\"));\nassert_eq!(\"than an old\", s.replace(\"is\", \"an\"));\n```\n\nWhen the pattern doesn't match:\n\n```\nlet s = \"this is old\";\nassert_eq!(s, s.replace(\"cookie monster\", \"little lamb\"));\n```","links":{"`String`":"5:6978:218"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the replaced string as a new allocation, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["from",{"kind":"generic","inner":"P"}],["to",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:6978:218","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11026:2633","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11443:58215":{"id":"2:11443:58215","crate_id":2,"name":"escape_debug","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_debug`].\n\nNote: only extended grapheme codepoints that begin the string will be\nescaped.\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"❤\\n!\".escape_debug() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"❤\\n!\".escape_debug());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"❤\\\\n!\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"❤\\n!\".escape_debug().to_string(), \"❤\\\\n!\");\n```","links":{"`char::escape_debug`":"2:4453:58215"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"EscapeDebug","id":"2:50284:2928","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11355:54110":{"id":"2:11355:54110","crate_id":2,"name":"starts_with","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a prefix of this\nstring slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nBasic usage:\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.starts_with(\"bana\"));\nassert!(!bananas.starts_with(\"nana\"));\n```","links":{"self::pattern":"2:11021:2632","prim@char":"1:12350:1740"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11026:2633","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11344:2947":{"id":"2:11344:2947","crate_id":2,"name":"chars","span":null,"visibility":"public","docs":"Returns an iterator over the [`char`]s of a string slice.\n\nAs a string slice consists of valid UTF-8, we can iterate through a\nstring slice by [`char`]. This method returns such an iterator.\n\nIt's important to remember that [`char`] represents a Unicode Scalar\nValue, and might not match your idea of what a 'character' is. Iteration\nover grapheme clusters may be what you actually want. This functionality\nis not provided by Rust's standard library, check crates.io instead.\n\n# Examples\n\nBasic usage:\n\n```\nlet word = \"goodbye\";\n\nlet count = word.chars().count();\nassert_eq!(7, count);\n\nlet mut chars = word.chars();\n\nassert_eq!(Some('g'), chars.next());\nassert_eq!(Some('o'), chars.next());\nassert_eq!(Some('o'), chars.next());\nassert_eq!(Some('d'), chars.next());\nassert_eq!(Some('b'), chars.next());\nassert_eq!(Some('y'), chars.next());\nassert_eq!(Some('e'), chars.next());\n\nassert_eq!(None, chars.next());\n```\n\nRemember, [`char`]s might not match your intuition about characters:\n\n[`char`]: prim@char\n\n```\nlet y = \"y̆\";\n\nlet mut chars = y.chars();\n\nassert_eq!(Some('y'), chars.next()); // not 'y̆'\nassert_eq!(Some('\\u{0306}'), chars.next());\n\nassert_eq!(None, chars.next());\n```","links":{"prim@char":"1:12350:1740"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Chars","id":"2:49955:2910","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11320:782":{"id":"2:11320:782","crate_id":2,"name":"len","span":null,"visibility":"public","docs":"Returns the length of `self`.\n\nThis length is in bytes, not [`char`]s or graphemes. In other words,\nit might not be what a human considers the length of the string.\n\n[`char`]: prim@char\n\n# Examples\n\nBasic usage:\n\n```\nlet len = \"foo\".len();\nassert_eq!(3, len);\n\nassert_eq!(\"ƒoo\".len(), 4); // fancy f!\nassert_eq!(\"ƒoo\".chars().count(), 3);\n```","links":{"prim@char":"1:12350:1740"},"attrs":["#[must_use]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11408:58205":{"id":"2:11408:58205","crate_id":2,"name":"trim","span":null,"visibility":"public","docs":"Returns a string slice with leading and trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\n\nassert_eq!(\"Hello\\tworld\", s.trim());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a slice, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_trim\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"5:5091":{"id":"5:5091","crate_id":5,"name":null,"span":null,"visibility":{"restricted":{"parent":"5:5002:1344","path":"::str"}},"docs":"Methods for string slices.","links":{},"attrs":["#[cfg(not(test))]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"kind":"primitive","inner":"str"},"items":["5:5092:58848","5:5093:1991","5:5096:58849","5:5099:58850","5:5107:58851","5:5108:58852","5:5109:2015","5:5110:52162","5:5111:52163"],"negative":false,"synthetic":false,"blanket_impl":null}},"2:11437:2801":{"id":"2:11437:2801","crate_id":2,"name":"parse","span":null,"visibility":"public","docs":"Parses this string slice into another type.\n\nBecause `parse` is so general, it can cause problems with type\ninference. As such, `parse` is one of the few times you'll see\nthe syntax affectionately known as the 'turbofish': `::<>`. This\nhelps the inference algorithm understand specifically which type\nyou're trying to parse into.\n\n`parse` can parse into any type that implements the [`FromStr`] trait.\n\n# Errors\n\nWill return [`Err`] if it's not possible to parse this string slice into\nthe desired type.\n\n[`Err`]: FromStr::Err\n\n# Examples\n\nBasic usage\n\n```\nlet four: u32 = \"4\".parse().unwrap();\n\nassert_eq!(4, four);\n```\n\nUsing the 'turbofish' instead of annotating `four`:\n\n```\nlet four = \"4\".parse::<u32>();\n\nassert_eq!(Ok(4), four);\n```\n\nFailing to parse:\n\n```\nlet nope = \"j\".parse::<u32>();\n\nassert!(nope.is_err());\n```","links":{"FromStr::Err":"2:10983:126","`FromStr`":"2:10982:2162"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Result","id":"2:48161:205","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"F"}},{"type":{"kind":"qualified_path","inner":{"name":"Err","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"F"},"trait":{"name":"FromStr","id":"2:10982:2162","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"F"},"bounds":[{"trait_bound":{"trait":{"name":"FromStr","id":"2:10982:2162","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11445:2338":{"id":"2:11445:2338","crate_id":2,"name":"escape_default","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_default`].\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"❤\\n!\".escape_default() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"❤\\n!\".escape_default());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"\\\\u{{2764}}\\\\n!\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"❤\\n!\".escape_default().to_string(), \"\\\\u{2764}\\\\n!\");\n```","links":{"`char::escape_default`":"2:4454:2338"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"EscapeDefault","id":"2:50293:2339","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11396:1826":{"id":"2:11396:1826","crate_id":2,"name":"matches","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within the given string\nslice.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rmatches`] method can be used.\n\n[`rmatches`]: str::matches\n\n# Examples\n\nBasic usage:\n\n```\nlet v: Vec<&str> = \"abcXXXabcYYYabc\".matches(\"abc\").collect();\nassert_eq!(v, [\"abc\", \"abc\", \"abc\"]);\n\nlet v: Vec<&str> = \"1abc2abc3\".matches(char::is_numeric).collect();\nassert_eq!(v, [\"1\", \"2\", \"3\"]);\n```","links":{"prim@char":"1:12350:1740","str::matches":"2:11396:1826","`DoubleEndedIterator`":"2:7061:120","self::pattern":"2:11021:2632"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Matches","id":"2:50189:2922","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11026:2633","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:0:1614":{"id":"0:0:1614","crate_id":0,"name":"winapi","span":{"filename":"src/lib.rs","begin":[6,0],"end":[71,1]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"module","inner":{"is_crate":true,"items":[],"is_stripped":false}},"2:11416:58210":{"id":"2:11416:58210","crate_id":2,"name":"trim_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes and suffixes that match a\npattern repeatedly removed.\n\nThe [pattern] can be a [`char`], a slice of [`char`]s, or a function\nor closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_matches('1'), \"foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_matches(char::is_numeric), \"foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_matches(x), \"foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1foo1barXX\".trim_matches(|c| c == '1' || c == 'X'), \"foo1bar\");\n```","links":{"prim@char":"1:12350:1740","self::pattern":"2:11021:2632"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11026:2633","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"2:11026:2633","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"DoubleEndedSearcher","id":"2:11046:2631","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11358:54111":{"id":"2:11358:54111","crate_id":2,"name":"ends_with","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a suffix of this\nstring slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nBasic usage:\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.ends_with(\"anas\"));\nassert!(!bananas.ends_with(\"nana\"));\n```","links":{"self::pattern":"2:11021:2632","prim@char":"1:12350:1740"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11026:2633","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"2:11026:2633","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11041:2636","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11378:58198":{"id":"2:11378:58198","crate_id":2,"name":"split_terminator","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by\ncharacters matched by a pattern.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\nEquivalent to [`split`], except that the trailing substring\nis skipped if empty.\n\n[`split`]: str::split\n\nThis method can be used for string data that is _terminated_,\nrather than _separated_ by a pattern.\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rsplit_terminator`] method can be used.\n\n[`rsplit_terminator`]: str::rsplit_terminator\n\n# Examples\n\nBasic usage:\n\n```\nlet v: Vec<&str> = \"A.B.\".split_terminator('.').collect();\nassert_eq!(v, [\"A\", \"B\"]);\n\nlet v: Vec<&str> = \"A..B..\".split_terminator(\".\").collect();\nassert_eq!(v, [\"A\", \"\", \"B\", \"\"]);\n\nlet v: Vec<&str> = \"A.B:C.D\".split_terminator(&['.', ':'][..]).collect();\nassert_eq!(v, [\"A\", \"B\", \"C\", \"D\"]);\n```","links":{"str::split":"2:11369:51454","`DoubleEndedIterator`":"2:7061:120","prim@char":"1:12350:1740","str::rsplit_terminator":"2:11381:58199","self::pattern":"2:11021:2632"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"SplitTerminator","id":"2:50035:2915","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11026:2633","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11369:51454":{"id":"2:11369:51454","crate_id":2,"name":"split","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by\ncharacters matched by a pattern.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rsplit`] method can be used.\n\n[`rsplit`]: str::rsplit\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".split(' ').collect();\nassert_eq!(v, [\"Mary\", \"had\", \"a\", \"little\", \"lamb\"]);\n\nlet v: Vec<&str> = \"\".split('X').collect();\nassert_eq!(v, [\"\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".split('X').collect();\nassert_eq!(v, [\"lion\", \"\", \"tiger\", \"leopard\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".split(\"::\").collect();\nassert_eq!(v, [\"lion\", \"tiger\", \"leopard\"]);\n\nlet v: Vec<&str> = \"abc1def2ghi\".split(char::is_numeric).collect();\nassert_eq!(v, [\"abc\", \"def\", \"ghi\"]);\n\nlet v: Vec<&str> = \"lionXtigerXleopard\".split(char::is_uppercase).collect();\nassert_eq!(v, [\"lion\", \"tiger\", \"leopard\"]);\n```\n\nIf the pattern is a slice of chars, split on each occurrence of any of the characters:\n\n```\nlet v: Vec<&str> = \"2020-11-03 23:59\".split(&['-', ' ', ':', '@'][..]).collect();\nassert_eq!(v, [\"2020\", \"11\", \"03\", \"23\", \"59\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".split(|c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"abc\", \"def\", \"ghi\"]);\n```\n\nIf a string contains multiple contiguous separators, you will end up\nwith empty strings in the output:\n\n```\nlet x = \"||||a||b|c\".to_string();\nlet d: Vec<_> = x.split('|').collect();\n\nassert_eq!(d, &[\"\", \"\", \"\", \"\", \"a\", \"\", \"b\", \"c\"]);\n```\n\nContiguous separators are separated by the empty string.\n\n```\nlet x = \"(///)\".to_string();\nlet d: Vec<_> = x.split('/').collect();\n\nassert_eq!(d, &[\"(\", \"\", \"\", \")\"]);\n```\n\nSeparators at the start or end of a string are neighbored\nby empty strings.\n\n```\nlet d: Vec<_> = \"010\".split(\"0\").collect();\nassert_eq!(d, &[\"\", \"1\", \"\"]);\n```\n\nWhen the empty string is used as a separator, it separates\nevery character in the string, along with the beginning\nand end of the string.\n\n```\nlet f: Vec<_> = \"rust\".split(\"\").collect();\nassert_eq!(f, &[\"\", \"r\", \"u\", \"s\", \"t\", \"\"]);\n```\n\nContiguous separators can lead to possibly surprising behavior\nwhen whitespace is used as the separator. This code is correct:\n\n```\nlet x = \"    a  b c\".to_string();\nlet d: Vec<_> = x.split(' ').collect();\n\nassert_eq!(d, &[\"\", \"\", \"\", \"\", \"a\", \"\", \"b\", \"c\"]);\n```\n\nIt does _not_ give you:\n\n```,ignore\nassert_eq!(d, &[\"a\", \"b\", \"c\"]);\n```\n\nUse [`split_whitespace`] for this behavior.\n\n[`split_whitespace`]: str::split_whitespace","links":{"str::rsplit":"2:11375:54103","prim@char":"1:12350:1740","self::pattern":"2:11021:2632","`DoubleEndedIterator`":"2:7061:120","str::split_whitespace":"2:11347:57030"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Split","id":"2:49985:1989","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11026:2633","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11361:4066":{"id":"2:11361:4066","crate_id":2,"name":"find","span":null,"visibility":"public","docs":"Returns the byte index of the first character of this string slice that\nmatches the pattern.\n\nReturns [`None`] if the pattern doesn't match.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nlet s = \"Löwe 老虎 Léopard Gepardi\";\n\nassert_eq!(s.find('L'), Some(0));\nassert_eq!(s.find('é'), Some(14));\nassert_eq!(s.find(\"pard\"), Some(17));\n```\n\nMore complex patterns using point-free style and closures:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\n\nassert_eq!(s.find(char::is_whitespace), Some(5));\nassert_eq!(s.find(char::is_lowercase), Some(1));\nassert_eq!(s.find(|c: char| c.is_whitespace() || c.is_lowercase()), Some(1));\nassert_eq!(s.find(|c: char| (c < 'o') && (c > 'a')), Some(4));\n```\n\nNot finding the pattern:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\nlet x: &[_] = &['1', '2'];\n\nassert_eq!(s.find(x), None);\n```","links":{"`None`":"2:48019:174","self::pattern":"2:11021:2632","prim@char":"1:12350:1740"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:48017:176","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11026:2633","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11387:54107":{"id":"2:11387:54107","crate_id":2,"name":"rsplitn","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by a\npattern, starting from the end of the string, restricted to returning\nat most `n` items.\n\nIf `n` substrings are returned, the last substring (the `n`th substring)\nwill contain the remainder of the string.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will not be double ended, because it is not\nefficient to support.\n\nFor splitting from the front, the [`splitn`] method can be used.\n\n[`splitn`]: str::splitn\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".rsplitn(3, ' ').collect();\nassert_eq!(v, [\"lamb\", \"little\", \"Mary had a\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".rsplitn(3, 'X').collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"lionX\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".rsplitn(2, \"::\").collect();\nassert_eq!(v, [\"leopard\", \"lion::tiger\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".rsplitn(2, |c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"ghi\", \"abc1def\"]);\n```","links":{"prim@char":"1:12350:1740","self::pattern":"2:11021:2632","str::splitn":"2:11384:54105"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["n",{"kind":"primitive","inner":"usize"}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"RSplitN","id":"2:50107:2323","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11026:2633","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"2:11026:2633","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11041:2636","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"5:5111:52163":{"id":"5:5111:52163","crate_id":5,"name":"to_ascii_lowercase","span":null,"visibility":"public","docs":"Returns a copy of this string where each character is mapped to its\nASCII lower case equivalent.\n\nASCII letters 'A' to 'Z' are mapped to 'a' to 'z',\nbut non-ASCII letters are unchanged.\n\nTo lowercase the value in-place, use [`make_ascii_lowercase`].\n\nTo lowercase ASCII characters in addition to non-ASCII characters, use\n[`to_lowercase`].\n\n# Examples\n\n```\nlet s = \"Grüße, Jürgen ❤\";\n\nassert_eq!(\"grüße, jürgen ❤\", s.to_ascii_lowercase());\n```\n\n[`make_ascii_lowercase`]: str::make_ascii_lowercase\n[`to_lowercase`]: #method.to_lowercase","links":{"str::make_ascii_lowercase":"2:11442:52166"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use = \"to lowercase the value in-place, use `make_ascii_lowercase()`\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:6978:218","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11393:58201":{"id":"2:11393:58201","crate_id":2,"name":"rsplit_once","span":null,"visibility":"public","docs":"Splits the string on the last occurrence of the specified delimiter and\nreturns prefix before delimiter and suffix after delimiter.\n\n# Examples\n\n```\nassert_eq!(\"cfg\".rsplit_once('='), None);\nassert_eq!(\"cfg=foo\".rsplit_once('='), Some((\"cfg\", \"foo\")));\nassert_eq!(\"cfg=foo=bar\".rsplit_once('='), Some((\"cfg=foo\", \"bar\")));\n```","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["delimiter",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:48017:176","args":{"angle_bracketed":{"args":[{"type":{"kind":"tuple","inner":[{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}},{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11026:2633","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"2:11026:2633","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11041:2636","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11336:54069":{"id":"2:11336:54069","crate_id":2,"name":"get_unchecked","span":null,"visibility":"public","docs":"Returns an unchecked subslice of `str`.\n\nThis is the unchecked alternative to indexing the `str`.\n\n# Safety\n\nCallers of this function are responsible that these preconditions are\nsatisfied:\n\n* The starting index must not exceed the ending index;\n* Indexes must be within bounds of the original slice;\n* Indexes must lie on UTF-8 sequence boundaries.\n\nFailing that, the returned string slice may reference invalid memory or\nviolate the invariants communicated by the `str` type.\n\n# Examples\n\n```\nlet v = \"🗻∈🌏\";\nunsafe {\n    assert_eq!(\"🗻\", v.get_unchecked(0..4));\n    assert_eq!(\"∈\", v.get_unchecked(4..7));\n    assert_eq!(\"🌏\", v.get_unchecked(7..11));\n}\n```","links":{},"attrs":["#[rustc_const_unstable(feature = \"const_slice_index\", issue = \"none\")]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["i",{"kind":"generic","inner":"I"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"qualified_path","inner":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"I"},"trait":{"name":"SliceIndex","id":"2:9118:216","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}}}}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"2:9118:216","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}},"2:11349:3492":{"id":"2:11349:3492","crate_id":2,"name":"lines","span":null,"visibility":"public","docs":"An iterator over the lines of a string, as string slices.\n\nLines are ended with either a newline (`\\n`) or a carriage return with\na line feed (`\\r\\n`).\n\nThe final line ending is optional. A string that ends with a final line\nending will return the same lines as an otherwise identical string\nwithout a final line ending.\n\n# Examples\n\nBasic usage:\n\n```\nlet text = \"foo\\r\\nbar\\n\\nbaz\\n\";\nlet mut lines = text.lines();\n\nassert_eq!(Some(\"foo\"), lines.next());\nassert_eq!(Some(\"bar\"), lines.next());\nassert_eq!(Some(\"\"), lines.next());\nassert_eq!(Some(\"baz\"), lines.next());\n\nassert_eq!(None, lines.next());\n```\n\nThe final line ending isn't required:\n\n```\nlet text = \"foo\\nbar\\n\\r\\nbaz\";\nlet mut lines = text.lines();\n\nassert_eq!(Some(\"foo\"), lines.next());\nassert_eq!(Some(\"bar\"), lines.next());\nassert_eq!(Some(\"\"), lines.next());\nassert_eq!(Some(\"baz\"), lines.next());\n\nassert_eq!(None, lines.next());\n```","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Lines","id":"2:50239:1990","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11405:58204":{"id":"2:11405:58204","crate_id":2,"name":"rmatch_indices","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within `self`,\nyielded in reverse order along with the index of the match.\n\nFor matches of `pat` within `self` that overlap, only the indices\ncorresponding to the last match are returned.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`match_indices`] method can be used.\n\n[`match_indices`]: str::match_indices\n\n# Examples\n\nBasic usage:\n\n```\nlet v: Vec<_> = \"abcXXXabcYYYabc\".rmatch_indices(\"abc\").collect();\nassert_eq!(v, [(12, \"abc\"), (6, \"abc\"), (0, \"abc\")]);\n\nlet v: Vec<_> = \"1abcabc2\".rmatch_indices(\"abc\").collect();\nassert_eq!(v, [(4, \"abc\"), (1, \"abc\")]);\n\nlet v: Vec<_> = \"ababa\".rmatch_indices(\"aba\").collect();\nassert_eq!(v, [(2, \"aba\")]); // only the last `aba`\n```","links":{"str::match_indices":"2:11402:58203","self::pattern":"2:11021:2632","`DoubleEndedIterator`":"2:7061:120","prim@char":"1:12350:1740"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"RMatchIndices","id":"2:50153:2920","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11026:2633","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"2:11026:2633","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11041:2636","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11346:3130":{"id":"2:11346:3130","crate_id":2,"name":"bytes","span":null,"visibility":"public","docs":"An iterator over the bytes of a string slice.\n\nAs a string slice consists of a sequence of bytes, we can iterate\nthrough a string slice by byte. This method returns such an iterator.\n\n# Examples\n\nBasic usage:\n\n```\nlet mut bytes = \"bors\".bytes();\n\nassert_eq!(Some(b'b'), bytes.next());\nassert_eq!(Some(b'o'), bytes.next());\nassert_eq!(Some(b'r'), bytes.next());\nassert_eq!(Some(b's'), bytes.next());\n\nassert_eq!(None, bytes.next());\n```","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Bytes","id":"2:49971:1987","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11402:58203":{"id":"2:11402:58203","crate_id":2,"name":"match_indices","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within this string\nslice as well as the index that the match starts at.\n\nFor matches of `pat` within `self` that overlap, only the indices\ncorresponding to the first match are returned.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rmatch_indices`] method can be used.\n\n[`rmatch_indices`]: str::rmatch_indices\n\n# Examples\n\nBasic usage:\n\n```\nlet v: Vec<_> = \"abcXXXabcYYYabc\".match_indices(\"abc\").collect();\nassert_eq!(v, [(0, \"abc\"), (6, \"abc\"), (12, \"abc\")]);\n\nlet v: Vec<_> = \"1abcabc2\".match_indices(\"abc\").collect();\nassert_eq!(v, [(1, \"abc\"), (4, \"abc\")]);\n\nlet v: Vec<_> = \"ababa\".match_indices(\"aba\").collect();\nassert_eq!(v, [(0, \"aba\")]); // only the first `aba`\n```","links":{"`DoubleEndedIterator`":"2:7061:120","self::pattern":"2:11021:2632","prim@char":"1:12350:1740","str::rmatch_indices":"2:11405:58204"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"MatchIndices","id":"2:50135:2919","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11026:2633","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11351:57025":{"id":"2:11351:57025","crate_id":2,"name":"encode_utf16","span":null,"visibility":"public","docs":"Returns an iterator of `u16` over the string encoded as UTF-16.\n\n# Examples\n\nBasic usage:\n\n```\nlet text = \"Zażółć gęślą jaźń\";\n\nlet utf8_len = text.len();\nlet utf16_len = text.encode_utf16().count();\n\nassert!(utf16_len <= utf8_len);\n```","links":{},"attrs":["#[must_use =\n\"this returns the encoded string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"EncodeUtf16","id":"2:50277:2927","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11439:3124":{"id":"2:11439:3124","crate_id":2,"name":"is_ascii","span":null,"visibility":"public","docs":"Checks if all characters in this string are within the ASCII range.\n\n# Examples\n\n```\nlet ascii = \"hello!\\n\";\nlet non_ascii = \"Grüße, Jürgen ❤\";\n\nassert!(ascii.is_ascii());\nassert!(!non_ascii.is_ascii());\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11329:58194":{"id":"2:11329:58194","crate_id":2,"name":"as_bytes_mut","span":null,"visibility":"public","docs":"Converts a mutable string slice to a mutable byte slice.\n\n# Safety\n\nThe caller must ensure that the content of the slice is valid UTF-8\nbefore the borrow ends and the underlying `str` is used.\n\nUse of a `str` whose contents are not valid UTF-8 is undefined behavior.\n\n# Examples\n\nBasic usage:\n\n```\nlet mut s = String::from(\"Hello\");\nlet bytes = unsafe { s.as_bytes_mut() };\n\nassert_eq!(b\"Hello\", bytes);\n```\n\nMutability:\n\n```\nlet mut s = String::from(\"🗻∈🌏\");\n\nunsafe {\n    let bytes = s.as_bytes_mut();\n\n    bytes[0] = 0xF0;\n    bytes[1] = 0x9F;\n    bytes[2] = 0x8D;\n    bytes[3] = 0x94;\n}\n\nassert_eq!(\"🍔∈🌏\", s);\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"slice","inner":{"kind":"primitive","inner":"u8"}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}},"2:11330:306":{"id":"2:11330:306","crate_id":2,"name":"as_ptr","span":null,"visibility":"public","docs":"Converts a string slice to a raw pointer.\n\nAs string slices are a slice of bytes, the raw pointer points to a\n[`u8`]. This pointer will be pointing to the first byte of the string\nslice.\n\nThe caller must ensure that the returned pointer is never written to.\nIf you need to mutate the contents of the string slice, use [`as_mut_ptr`].\n\n[`as_mut_ptr`]: str::as_mut_ptr\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"Hello\";\nlet ptr = s.as_ptr();\n```","links":{"`u8`":"1:12367:1754","str::as_mut_ptr":"2:11331:54071"},"attrs":["#[must_use]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"raw_pointer","inner":{"mutable":false,"type":{"kind":"primitive","inner":"u8"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11414:58208":{"id":"2:11414:58208","crate_id":2,"name":"trim_left","span":null,"visibility":"public","docs":"Returns a string slice with leading whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`.\n\n# Text directionality\n\nA string is a sequence of bytes. 'Left' in this context means the first\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _right_ side, not the left.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \" Hello\\tworld\\t\";\n\nassert_eq!(\"Hello\\tworld\\t\", s.trim_left());\n```\n\nDirectionality:\n\n```\nlet s = \"  English\";\nassert!(Some('E') == s.trim_left().chars().next());\n\nlet s = \"  עברית\";\nassert!(Some('ע') == s.trim_left().chars().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_start`\", suggestion\n= \"trim_start\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_start`"},"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11352:54109":{"id":"2:11352:54109","crate_id":2,"name":"contains","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a sub-slice of\nthis string slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nBasic usage:\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.contains(\"nana\"));\nassert!(!bananas.contains(\"apples\"));\n```","links":{"prim@char":"1:12350:1740","self::pattern":"2:11021:2632"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11026:2633","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"5:5107:58851":{"id":"5:5107:58851","crate_id":5,"name":"to_uppercase","span":null,"visibility":"public","docs":"Returns the uppercase equivalent of this string slice, as a new [`String`].\n\n'Uppercase' is defined according to the terms of the Unicode Derived Core Property\n`Uppercase`.\n\nSince some characters can expand into multiple characters when changing\nthe case, this function returns a [`String`] instead of modifying the\nparameter in-place.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"hello\";\n\nassert_eq!(\"HELLO\", s.to_uppercase());\n```\n\nScripts without case are not changed:\n\n```\nlet new_year = \"农历新年\";\n\nassert_eq!(new_year, new_year.to_uppercase());\n```\n\nOne character can become multiple:\n```\nlet s = \"tschüß\";\n\nassert_eq!(\"TSCHÜSS\", s.to_uppercase());\n```","links":{"`String`":"5:6978:218"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the uppercase string as a new String, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:6978:218","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"5:5099:58850":{"id":"5:5099:58850","crate_id":5,"name":"to_lowercase","span":null,"visibility":"public","docs":"Returns the lowercase equivalent of this string slice, as a new [`String`].\n\n'Lowercase' is defined according to the terms of the Unicode Derived Core Property\n`Lowercase`.\n\nSince some characters can expand into multiple characters when changing\nthe case, this function returns a [`String`] instead of modifying the\nparameter in-place.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"HELLO\";\n\nassert_eq!(\"hello\", s.to_lowercase());\n```\n\nA tricky example, with sigma:\n\n```\nlet sigma = \"Σ\";\n\nassert_eq!(\"σ\", sigma.to_lowercase());\n\n// but at the end of a word, it's ς, not σ:\nlet odysseus = \"ὈΔΥΣΣΕΎΣ\";\n\nassert_eq!(\"ὀδυσσεύς\", odysseus.to_lowercase());\n```\n\nLanguages without case are not changed:\n\n```\nlet new_year = \"农历新年\";\n\nassert_eq!(new_year, new_year.to_lowercase());\n```","links":{"`String`":"5:6978:218"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the lowercase string as a new String, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:6978:218","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11332:54067":{"id":"2:11332:54067","crate_id":2,"name":"get","span":null,"visibility":"public","docs":"Returns a subslice of `str`.\n\nThis is the non-panicking alternative to indexing the `str`. Returns\n[`None`] whenever equivalent indexing operation would panic.\n\n# Examples\n\n```\nlet v = String::from(\"🗻∈🌏\");\n\nassert_eq!(Some(\"🗻\"), v.get(0..4));\n\n// indices not on UTF-8 sequence boundaries\nassert!(v.get(1..).is_none());\nassert!(v.get(..8).is_none());\n\n// out of bounds\nassert!(v.get(..42).is_none());\n```","links":{"`None`":"2:48019:174"},"attrs":["#[rustc_const_unstable(feature = \"const_slice_index\", issue = \"none\")]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["i",{"kind":"generic","inner":"I"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:48017:176","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"qualified_path","inner":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"I"},"trait":{"name":"SliceIndex","id":"2:9118:216","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}}}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"2:9118:216","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11412:58207":{"id":"2:11412:58207","crate_id":2,"name":"trim_end","span":null,"visibility":"public","docs":"Returns a string slice with trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Text directionality\n\nA string is a sequence of bytes. `end` in this context means the last\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be right side, and for right-to-left languages like\nArabic or Hebrew, this will be the left side.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\nassert_eq!(\"\\n Hello\\tworld\", s.trim_end());\n```\n\nDirectionality:\n\n```\nlet s = \"  English  \";\nassert!(Some('h') == s.trim_end().chars().rev().next());\n\nlet s = \"  עברית  \";\nassert!(Some('ת') == s.trim_end().chars().rev().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_trim_end\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11428:58212":{"id":"2:11428:58212","crate_id":2,"name":"trim_end_matches","span":null,"visibility":"public","docs":"Returns a string slice with all suffixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. `end` in this context means the last\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be right side, and for right-to-left languages like\nArabic or Hebrew, this will be the left side.\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_end_matches('1'), \"11foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_end_matches(char::is_numeric), \"123foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_end_matches(x), \"12foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1fooX\".trim_end_matches(|c| c == '1' || c == 'X'), \"1foo\");\n```","links":{"prim@char":"1:12350:1740","self::pattern":"2:11021:2632"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11026:2633","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"2:11026:2633","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11041:2636","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11410:58206":{"id":"2:11410:58206","crate_id":2,"name":"trim_start","span":null,"visibility":"public","docs":"Returns a string slice with leading whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Text directionality\n\nA string is a sequence of bytes. `start` in this context means the first\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be left side, and for right-to-left languages like\nArabic or Hebrew, this will be the right side.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\nassert_eq!(\"Hello\\tworld\\t\\n\", s.trim_start());\n```\n\nDirectionality:\n\n```\nlet s = \"  English  \";\nassert!(Some('E') == s.trim_start().chars().next());\n\nlet s = \"  עברית  \";\nassert!(Some('ע') == s.trim_start().chars().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_trim_start\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11345:2663":{"id":"2:11345:2663","crate_id":2,"name":"char_indices","span":null,"visibility":"public","docs":"Returns an iterator over the [`char`]s of a string slice, and their\npositions.\n\nAs a string slice consists of valid UTF-8, we can iterate through a\nstring slice by [`char`]. This method returns an iterator of both\nthese [`char`]s, as well as their byte positions.\n\nThe iterator yields tuples. The position is first, the [`char`] is\nsecond.\n\n# Examples\n\nBasic usage:\n\n```\nlet word = \"goodbye\";\n\nlet count = word.char_indices().count();\nassert_eq!(7, count);\n\nlet mut char_indices = word.char_indices();\n\nassert_eq!(Some((0, 'g')), char_indices.next());\nassert_eq!(Some((1, 'o')), char_indices.next());\nassert_eq!(Some((2, 'o')), char_indices.next());\nassert_eq!(Some((3, 'd')), char_indices.next());\nassert_eq!(Some((4, 'b')), char_indices.next());\nassert_eq!(Some((5, 'y')), char_indices.next());\nassert_eq!(Some((6, 'e')), char_indices.next());\n\nassert_eq!(None, char_indices.next());\n```\n\nRemember, [`char`]s might not match your intuition about characters:\n\n[`char`]: prim@char\n\n```\nlet yes = \"y̆es\";\n\nlet mut char_indices = yes.char_indices();\n\nassert_eq!(Some((0, 'y')), char_indices.next()); // not (0, 'y̆')\nassert_eq!(Some((1, '\\u{0306}')), char_indices.next());\n\n// note the 3 here - the last character took up two bytes\nassert_eq!(Some((3, 'e')), char_indices.next());\nassert_eq!(Some((4, 's')), char_indices.next());\n\nassert_eq!(None, char_indices.next());\n```","links":{"prim@char":"1:12350:1740"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"CharIndices","id":"2:49961:2911","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"paths":{"6:5749:59274":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","sifields_sigchld"],"kind":"struct"},"17:8666:43904":{"crate_id":17,"path":["object","endian","I32Bytes"],"kind":"struct"},"5:1971:3233":{"crate_id":5,"path":["alloc","collections","btree","navigate","LeafRange"],"kind":"struct"},"17:11536:44130":{"crate_id":17,"path":["object","macho","FatArch32"],"kind":"struct"},"2:49971:1987":{"crate_id":2,"path":["core","str","iter","Bytes"],"kind":"struct"},"17:13518:50126":{"crate_id":17,"path":["object","pe","ImageFunctionEntry"],"kind":"struct"},"16:6855:3639":{"crate_id":16,"path":["gimli","read","op","DieReference"],"kind":"enum"},"2:48996:67":{"crate_id":2,"path":["core","fmt","Alignment"],"kind":"enum"},"2:21168:2808":{"crate_id":2,"path":["core","num","dec2flt","common","BiasedFp"],"kind":"struct"},"1:7720:43898":{"crate_id":1,"path":["std","backtrace_rs","symbolize","Symbol"],"kind":"struct"},"1:12349:1739":{"crate_id":1,"path":["std","never"],"kind":"primitive"},"6:5727:40297":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_exit"],"kind":"struct"},"17:13007:49991":{"crate_id":17,"path":["object","pe","ImageExportDirectory"],"kind":"struct"},"6:592:36371":{"crate_id":6,"path":["libc","unix","tms"],"kind":"struct"},"6:539:36363":{"crate_id":6,"path":["libc","unix","ipv6_mreq"],"kind":"struct"},"16:7071:3641":{"crate_id":16,"path":["gimli","read","op","Piece"],"kind":"struct"},"2:20685:2603":{"crate_id":2,"path":["core","core_simd","ord","SimdPartialOrd"],"kind":"trait"},"12:1836:1938":{"crate_id":12,"path":["hashbrown","set","IntoIter"],"kind":"struct"},"2:2304:177":{"crate_id":2,"path":["core","cmp","Ord"],"kind":"trait"},"1:4258:2043":{"crate_id":1,"path":["std","os","unix","fs","OpenOptionsExt"],"kind":"trait"},"17:13100:50002":{"crate_id":17,"path":["object","pe","ImageDelayloadDescriptor"],"kind":"struct"},"16:2885:3842":{"crate_id":16,"path":["gimli","common","UnitSectionOffset"],"kind":"enum"},"12:2205:1947":{"crate_id":12,"path":["hashbrown","TryReserveError"],"kind":"enum"},"1:678:7066":{"crate_id":1,"path":["std","backtrace","BacktraceSymbol"],"kind":"struct"},"17:11125:44538":{"crate_id":17,"path":["object","elf","Syminfo32"],"kind":"struct"},"2:50716:2943":{"crate_id":2,"path":["core","str","IsWhitespace"],"kind":"struct"},"17:12934:49628":{"crate_id":17,"path":["object","pe","ImageAuxSymbolSection"],"kind":"struct"},"6:1525:37250":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr"],"kind":"struct"},"2:2779:1923":{"crate_id":2,"path":["core","ops","arith","DivAssign"],"kind":"trait"},"1:11836:2511":{"crate_id":1,"path":["std","sys_common","net","TcpStream"],"kind":"struct"},"2:4679:56495":{"crate_id":2,"path":["core","ffi","sealed_trait","VaArgSafe"],"kind":"trait"},"2:21094:2969":{"crate_id":2,"path":["core","num","bignum","tests","Big8x3"],"kind":"struct"},"2:46821:2929":{"crate_id":2,"path":["core","char","EscapeUnicode"],"kind":"struct"},"17:9539:3924":{"crate_id":17,"path":["object","read","elf","section","ElfSection"],"kind":"struct"},"6:4581:39648":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_extended_err"],"kind":"struct"},"12:861:2267":{"crate_id":12,"path":["hashbrown","map","RawEntryBuilder"],"kind":"struct"},"2:49885:2318":{"crate_id":2,"path":["core","slice","iter","RChunksExact"],"kind":"struct"},"17:9250:43960":{"crate_id":17,"path":["object","read","archive","ArchiveFile"],"kind":"struct"},"17:10682:4017":{"crate_id":17,"path":["object","read","SymbolMapName"],"kind":"struct"},"2:47284:2398":{"crate_id":2,"path":["core","iter","adapters","take_while","TakeWhile"],"kind":"struct"},"17:13382:50086":{"crate_id":17,"path":["object","pe","ImageAlpha64RuntimeFunctionEntry"],"kind":"struct"},"17:9577:3928":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbolTable"],"kind":"struct"},"17:9108:43910":{"crate_id":17,"path":["object","read","any","SymbolIterator"],"kind":"struct"},"2:46927:3005":{"crate_id":2,"path":["core","ffi","c_str","FromBytesWithNulError"],"kind":"struct"},"9:920:3278":{"crate_id":9,"path":["miniz_oxide","MZError"],"kind":"enum"},"6:1500:37246":{"crate_id":6,"path":["libc","unix","linux_like","in_addr"],"kind":"struct"},"1:6775:2548":{"crate_id":1,"path":["std","sync","poison","PoisonError"],"kind":"struct"},"2:47233:2395":{"crate_id":2,"path":["core","iter","adapters","skip","Skip"],"kind":"struct"},"2:49340:56133":{"crate_id":2,"path":["core","hash","sip","Sip13Rounds"],"kind":"struct"},"18:96:50520":{"crate_id":18,"path":["memchr","memchr","iter","Memchr2"],"kind":"struct"},"2:21349:3052":{"crate_id":2,"path":["core","num","error","TryFromIntError"],"kind":"struct"},"2:11842:2952":{"crate_id":2,"path":["core","task","wake","Waker"],"kind":"struct"},"6:6352:37214":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stat64"],"kind":"struct"},"2:54040:17842":{"crate_id":2,"path":["core","core_arch","x86","__m256d"],"kind":"struct"},"16:6030:3622":{"crate_id":16,"path":["gimli","read","dwarf","RangeIter"],"kind":"struct"},"2:49840:2299":{"crate_id":2,"path":["core","slice","iter","ArrayChunks"],"kind":"struct"},"12:1852:1941":{"crate_id":12,"path":["hashbrown","set","Intersection"],"kind":"struct"},"2:48017:176":{"crate_id":2,"path":["core","option","Option"],"kind":"enum"},"2:2763:1915":{"crate_id":2,"path":["core","ops","arith","Neg"],"kind":"trait"},"2:50545:2647":{"crate_id":2,"path":["core","str","pattern","StrSearcher"],"kind":"struct"},"2:53985:17837":{"crate_id":2,"path":["core","core_arch","x86","__m128i"],"kind":"struct"},"1:2394:2478":{"crate_id":1,"path":["std","fs","read_link"],"kind":"function"},"1:12357:1746":{"crate_id":1,"path":["std","tuple"],"kind":"primitive"},"17:11853:48841":{"crate_id":17,"path":["object","macho","RoutinesCommand32"],"kind":"struct"},"1:4437:2577":{"crate_id":1,"path":["std","os","unix","net","ancillary","AncillaryData"],"kind":"enum"},"17:10221:44210":{"crate_id":17,"path":["object","read","pe","file","PeComdatIterator"],"kind":"struct"},"12:274:59728":{"crate_id":12,"path":["hashbrown","raw","RawIterRange"],"kind":"struct"},"1:1612:1940":{"crate_id":1,"path":["std","collections","hash","set","DrainFilter"],"kind":"struct"},"5:6738:3252":{"crate_id":5,"path":["alloc","collections","binary_heap","IntoIterSorted"],"kind":"struct"},"6:5523:40282":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","msghdr"],"kind":"struct"},"2:49081:71":{"crate_id":2,"path":["core","fmt","ArgumentV1"],"kind":"struct"},"17:12087:48857":{"crate_id":17,"path":["object","macho","FilesetEntryCommand"],"kind":"struct"},"17:11787:48836":{"crate_id":17,"path":["object","macho","SubUmbrellaCommand"],"kind":"struct"},"16:6794:3861":{"crate_id":16,"path":["gimli","read","lookup","DebugLookup"],"kind":"struct"},"3:223:205":{"crate_id":3,"path":["compiler_builtins","float","cmp","Result"],"kind":"enum"},"2:2470:146":{"crate_id":2,"path":["core","convert","Into"],"kind":"trait"},"16:3590:42257":{"crate_id":16,"path":["gimli","constants","DwSectV2"],"kind":"struct"},"6:4489:2533":{"crate_id":6,"path":["libc","unix","linux_like","linux","ucred"],"kind":"struct"},"1:5639:2237":{"crate_id":1,"path":["std","process","Child"],"kind":"struct"},"2:46407:196":{"crate_id":2,"path":["core","ops","range","RangeInclusive"],"kind":"struct"},"6:0:787":{"crate_id":6,"path":["libc"],"kind":"module"},"16:6115:3541":{"crate_id":16,"path":["gimli","read","abbrev","Abbreviations"],"kind":"struct"},"1:4450:2578":{"crate_id":1,"path":["std","os","unix","net","ancillary","Messages"],"kind":"struct"},"6:7249:39802":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_rwlock_t"],"kind":"struct"},"16:5574:3607":{"crate_id":16,"path":["gimli","read","cfi","Augmentation"],"kind":"struct"},"5:1049:3230":{"crate_id":5,"path":["alloc","collections","btree","borrow","DormantMutRef"],"kind":"struct"},"2:7061:120":{"crate_id":2,"path":["core","iter","traits","double_ended","DoubleEndedIterator"],"kind":"trait"},"1:9892:2467":{"crate_id":1,"path":["std","sys","unix","fs","ReadDir"],"kind":"struct"},"1:2607:1993":{"crate_id":1,"path":["std","io","buffered","bufwriter","WriterPanicked"],"kind":"struct"},"5:1067:3231":{"crate_id":5,"path":["alloc","collections","btree","dedup_sorted_iter","DedupSortedIter"],"kind":"struct"},"17:420:3513":{"crate_id":17,"path":["object","read","any","Section"],"kind":"struct"},"1:2510:1999":{"crate_id":1,"path":["std","io","buffered","bufreader","BufReader"],"kind":"struct"},"17:8881:60671":{"crate_id":17,"path":["object","read","any","SegmentIteratorInternal"],"kind":"enum"},"9:382:3274":{"crate_id":9,"path":["miniz_oxide","inflate","core","DecompressorOxide"],"kind":"struct"},"1:2247:2468":{"crate_id":1,"path":["std","fs","DirEntry"],"kind":"struct"},"5:2935:1937":{"crate_id":5,"path":["alloc","collections","btree","set","Iter"],"kind":"struct"},"16:6646:3859":{"crate_id":16,"path":["gimli","read","lists","ListsHeader"],"kind":"struct"},"18:755:4076":{"crate_id":18,"path":["memchr","memmem","SearcherRev"],"kind":"struct"},"2:2431:1870":{"crate_id":2,"path":["core","convert","num","private","Sealed"],"kind":"trait"},"2:4303:2862":{"crate_id":2,"path":["core","cell","BorrowRefMut"],"kind":"struct"},"6:4115:39602":{"crate_id":6,"path":["libc","unix","linux_like","linux","passwd"],"kind":"struct"},"2:20690:12299":{"crate_id":2,"path":["core","core_simd","ord","SimdOrd"],"kind":"trait"},"2:20220:2788":{"crate_id":2,"path":["core","core_simd","elements","uint","SimdUint"],"kind":"trait"},"17:487:43897":{"crate_id":17,"path":["object","read","any","Comdat"],"kind":"struct"},"16:5739:3612":{"crate_id":16,"path":["gimli","read","cfi","UnwindTable"],"kind":"struct"},"16:7521:3547":{"crate_id":16,"path":["gimli","read","unit","DebugInfo"],"kind":"struct"},"6:1511:37248":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreqn"],"kind":"struct"},"2:10075:2315":{"crate_id":2,"path":["core","slice","iter","GroupBy"],"kind":"struct"},"17:12073:48856":{"crate_id":17,"path":["object","macho","LinkeditDataCommand"],"kind":"struct"},"1:3949:2214":{"crate_id":1,"path":["std","net","socket_addr","ToSocketAddrs"],"kind":"trait"},"2:3182:2629":{"crate_id":2,"path":["core","ops","unsize","CoerceUnsized"],"kind":"trait"},"6:4737:39666":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_setup"],"kind":"struct"},"1:12367:1754":{"crate_id":1,"path":["std","u8"],"kind":"primitive"},"6:1532:37251":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_in"],"kind":"struct"},"1:8517:51791":{"crate_id":1,"path":["std","net","ip_addr","fmt","Span"],"kind":"struct"},"2:46510:3589":{"crate_id":2,"path":["core","any","tags","Value"],"kind":"struct"},"9:19:3370":{"crate_id":9,"path":["miniz_oxide","deflate","buffer","HashBuffers"],"kind":"struct"},"5:771:3250":{"crate_id":5,"path":["alloc","collections","binary_heap","PeekMut"],"kind":"struct"},"5:2976:1941":{"crate_id":5,"path":["alloc","collections","btree","set","Intersection"],"kind":"struct"},"16:7887:3562":{"crate_id":16,"path":["gimli","read","unit","EntriesTree"],"kind":"struct"},"1:11220:51256":{"crate_id":1,"path":["std","sys","unix","kernel_copy","SpliceMode"],"kind":"enum"},"18:766:4077":{"crate_id":18,"path":["memchr","memmem","SearcherRevKind"],"kind":"enum"},"6:5568:40251":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","mallinfo2"],"kind":"struct"},"2:7719:2168":{"crate_id":2,"path":["core","panic","unwind_safe","AssertUnwindSafe"],"kind":"struct"},"6:5472:40277":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","statx_timestamp"],"kind":"struct"},"6:5713:40295":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ptrace_peeksiginfo_args"],"kind":"struct"},"2:8813:143":{"crate_id":2,"path":["core","hash","Hasher"],"kind":"trait"},"2:47216:2394":{"crate_id":2,"path":["core","iter","adapters","scan","Scan"],"kind":"struct"},"1:8633:2515":{"crate_id":1,"path":["std","net","Shutdown"],"kind":"enum"},"17:9183:43912":{"crate_id":17,"path":["object","read","any","SectionRelocationIterator"],"kind":"struct"},"6:4257:39615":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_keymap_entry"],"kind":"struct"},"16:7266:3647":{"crate_id":16,"path":["gimli","read","pubnames","PubNamesEntryIter"],"kind":"struct"},"12:669:2261":{"crate_id":12,"path":["hashbrown","map","IntoKeys"],"kind":"struct"},"1:4900:51342":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt","st_atime"],"kind":"foreign_type"},"6:4427:39633":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Sym"],"kind":"struct"},"2:29506:2286":{"crate_id":2,"path":["core","mem","maybe_uninit","MaybeUninit"],"kind":"union"},"6:4475:39637":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Shdr"],"kind":"struct"},"5:1404:2261":{"crate_id":5,"path":["alloc","collections","btree","map","IntoKeys"],"kind":"struct"},"6:4540:39643":{"crate_id":6,"path":["libc","unix","linux_like","linux","arpd_request"],"kind":"struct"},"12:1555:3457":{"crate_id":12,"path":["hashbrown","rustc_entry","RustcVacantEntry"],"kind":"struct"},"2:2911:1851":{"crate_id":2,"path":["core","ops","drop","Drop"],"kind":"trait"},"16:6219:3626":{"crate_id":16,"path":["gimli","read","aranges","ArangeEntryIter"],"kind":"struct"},"2:29534:67":{"crate_id":2,"path":["core","ptr","alignment","Alignment"],"kind":"struct"},"16:5226:60021":{"crate_id":16,"path":["gimli","read","util","sealed","CapacityFull"],"kind":"struct"},"1:8374:1983":{"crate_id":1,"path":["std","io","SeekFrom"],"kind":"enum"},"6:1643:37261":{"crate_id":6,"path":["libc","unix","linux_like","ifaddrs"],"kind":"struct"},"16:6276:3572":{"crate_id":16,"path":["gimli","read","index","UnitIndex"],"kind":"struct"},"5:36:3180":{"crate_id":5,"path":["alloc","raw_vec","RawVec"],"kind":"struct"},"17:11559:48659":{"crate_id":17,"path":["object","macho","MachHeader32"],"kind":"struct"},"5:4974:57515":{"crate_id":5,"path":["alloc","slice","insert_head","InsertionHole"],"kind":"struct"},"17:9631:3922":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdatIterator"],"kind":"struct"},"2:8585:2127":{"crate_id":2,"path":["core","fmt","Binary"],"kind":"trait"},"16:2740:3833":{"crate_id":16,"path":["gimli","common","DebugStrOffsetsBase"],"kind":"struct"},"2:50035:2915":{"crate_id":2,"path":["core","str","iter","SplitTerminator"],"kind":"struct"},"16:2291:3851":{"crate_id":16,"path":["gimli","common","LineEncoding"],"kind":"struct"},"2:3130:3000":{"crate_id":2,"path":["core","ops","range","OneSidedRange"],"kind":"trait"},"1:970:2263":{"crate_id":1,"path":["std","collections","hash","map","RawEntryBuilderMut"],"kind":"struct"},"2:47032:2299":{"crate_id":2,"path":["core","iter","adapters","array_chunks","ArrayChunks"],"kind":"struct"},"2:2952:2682":{"crate_id":2,"path":["core","ops","generator","Generator"],"kind":"trait"},"2:2141:572":{"crate_id":2,"path":["core","ptr","drop_in_place"],"kind":"function"},"6:6448:40712":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user_regs_struct"],"kind":"struct"},"17:9422:43974":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdatIterator"],"kind":"struct"},"9:33:3371":{"crate_id":9,"path":["miniz_oxide","deflate","buffer","LocalBuf"],"kind":"struct"},"14:31:42157":{"crate_id":14,"path":["rustc_demangle","v0","Demangle"],"kind":"struct"},"17:1021:4031":{"crate_id":17,"path":["object","read","coff","relocation","CoffRelocationIterator"],"kind":"struct"},"17:10296:44186":{"crate_id":17,"path":["object","read","pe","section","PeSection"],"kind":"struct"},"1:448:2425":{"crate_id":1,"path":["std","thread","scoped","Scope"],"kind":"struct"},"17:12896:49625":{"crate_id":17,"path":["object","pe","ImageAuxSymbolFunction"],"kind":"struct"},"2:29548:2995":{"crate_id":2,"path":["core","ptr","alignment","AlignmentEnum16"],"kind":"enum"},"5:4888:57495":{"crate_id":5,"path":["alloc","slice","hack","to_vec","DropGuard"],"kind":"struct"},"17:11974:48849":{"crate_id":17,"path":["object","macho","DylibModule64"],"kind":"struct"},"17:10774:3909":{"crate_id":17,"path":["object","read","Export"],"kind":"struct"},"2:54051:17843":{"crate_id":2,"path":["core","core_arch","x86","__m512i"],"kind":"struct"},"6:5660:40290":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ntptimeval"],"kind":"struct"},"16:6308:3628":{"crate_id":16,"path":["gimli","read","index","UnitIndexSection"],"kind":"struct"},"1:8049:2096":{"crate_id":1,"path":["std","fs","Metadata"],"kind":"struct"},"6:131:36044":{"crate_id":6,"path":["libc","unix","FILE"],"kind":"enum"},"17:242:60661":{"crate_id":17,"path":["object","read","util","DebugByte"],"kind":"struct"},"16:2648:3840":{"crate_id":16,"path":["gimli","common","RangeListsOffset"],"kind":"struct"},"2:4355:2143":{"crate_id":2,"path":["core","cell","SyncUnsafeCell"],"kind":"struct"},"14:187:42166":{"crate_id":14,"path":["rustc_demangle","SizeLimitedFmtAdapter"],"kind":"struct"},"2:5443:2383":{"crate_id":2,"path":["core","iter","adapters","flatten","Flatten"],"kind":"struct"},"5:1435:3228":{"crate_id":5,"path":["alloc","collections","btree","map","RangeMut"],"kind":"struct"},"17:11235:44630":{"crate_id":17,"path":["object","elf","Dyn32"],"kind":"struct"},"2:4042:2853":{"crate_id":2,"path":["core","cell","lazy","LazyCell"],"kind":"struct"},"14:215:42159":{"crate_id":14,"path":["rustc_demangle","TryDemangleError"],"kind":"struct"},"6:5684:40292":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","Elf64_Chdr"],"kind":"struct"},"2:9434:2328":{"crate_id":2,"path":["core","slice","iter","SplitInclusiveMut"],"kind":"struct"},"2:21855:165":{"crate_id":2,"path":["core","num","nonzero","NonZeroI16"],"kind":"struct"},"2:4705:767":{"crate_id":2,"path":["core","iter"],"kind":"module"},"2:11035:2635":{"crate_id":2,"path":["core","str","pattern","Searcher"],"kind":"trait"},"2:21657:170":{"crate_id":2,"path":["core","num","nonzero","NonZeroU16"],"kind":"struct"},"5:276:1857":{"crate_id":5,"path":["alloc","boxed","Box"],"kind":"struct"},"16:6101:3543":{"crate_id":16,"path":["gimli","read","abbrev","DebugAbbrev"],"kind":"struct"},"2:50732:2937":{"crate_id":2,"path":["core","str","UnsafeBytesToStr"],"kind":"struct"},"16:5715:3611":{"crate_id":16,"path":["gimli","read","cfi","UnwindContext"],"kind":"struct"},"2:50433:2644":{"crate_id":2,"path":["core","str","pattern","CharArrayRefSearcher"],"kind":"struct"},"2:4516:3098":{"crate_id":2,"path":["core","char","REPLACEMENT_CHARACTER"],"kind":"constant"},"12:777:3440":{"crate_id":12,"path":["hashbrown","map","ConsumeAllOnDrop"],"kind":"struct"},"6:4698:39662":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_nl"],"kind":"struct"},"17:12008:48851":{"crate_id":17,"path":["object","macho","TwolevelHintsCommand"],"kind":"struct"},"6:507:36360":{"crate_id":6,"path":["libc","unix","timespec"],"kind":"struct"},"17:10245:44212":{"crate_id":17,"path":["object","read","pe","file","PeComdatSectionIterator"],"kind":"struct"},"17:1903:44007":{"crate_id":17,"path":["object","read","elf","relocation","ElfRelaIterator"],"kind":"enum"},"6:1686:37265":{"crate_id":6,"path":["libc","unix","linux_like","arphdr"],"kind":"struct"},"2:49955:2910":{"crate_id":2,"path":["core","str","iter","Chars"],"kind":"struct"},"5:1426:193":{"crate_id":5,"path":["alloc","collections","btree","map","Range"],"kind":"struct"},"13:108:59785":{"crate_id":13,"path":["std_detect","detect","arch","x86","Feature"],"kind":"enum"},"17:10497:44218":{"crate_id":17,"path":["object","read","pe","resource","ResourceNameOrId"],"kind":"enum"},"17:13354:50049":{"crate_id":17,"path":["object","pe","ImageHotPatchHashes"],"kind":"struct"},"5:6777:1938":{"crate_id":5,"path":["alloc","collections","btree","set","IntoIter"],"kind":"struct"},"17:11515:48654":{"crate_id":17,"path":["object","macho","DyldSubCacheInfo"],"kind":"struct"},"1:12004:3473":{"crate_id":1,"path":["std","backtrace_rs","backtrace","libunwind","Frame"],"kind":"enum"},"6:5741:40299":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ptrace_syscall_info"],"kind":"struct"},"17:11500:48653":{"crate_id":17,"path":["object","macho","DyldCacheImageInfo"],"kind":"struct"},"17:12972:49962":{"crate_id":17,"path":["object","pe","ImageBaseRelocation"],"kind":"struct"},"14:221:42165":{"crate_id":14,"path":["rustc_demangle","SizeLimitExhausted"],"kind":"struct"},"17:10321:4045":{"crate_id":17,"path":["object","read","pe","data_directory","DataDirectories"],"kind":"struct"},"5:3094:1940":{"crate_id":5,"path":["alloc","collections","btree","set","DrainFilter"],"kind":"struct"},"17:11217:44579":{"crate_id":17,"path":["object","elf","ProgramHeader64"],"kind":"struct"},"17:11951:48848":{"crate_id":17,"path":["object","macho","DylibModule32"],"kind":"struct"},"17:8796:3915":{"crate_id":17,"path":["object","read","util","StringTable"],"kind":"struct"},"1:3590:2209":{"crate_id":1,"path":["std","net","display_buffer","DisplayBuffer"],"kind":"struct"},"6:4139:39604":{"crate_id":6,"path":["libc","unix","linux_like","linux","dqblk"],"kind":"struct"},"2:49330:2184":{"crate_id":2,"path":["core","hash","sip","State"],"kind":"struct"},"2:48204:1937":{"crate_id":2,"path":["core","result","Iter"],"kind":"struct"},"1:976:2264":{"crate_id":1,"path":["std","collections","hash","map","RawEntryMut"],"kind":"enum"},"5:6895:102":{"crate_id":5,"path":["alloc","ffi","c_str","CString"],"kind":"struct"},"17:10506:44190":{"crate_id":17,"path":["object","read","pe","rich","RichHeaderInfo"],"kind":"struct"},"17:8526:3992":{"crate_id":17,"path":["object","endian","U16Bytes"],"kind":"struct"},"18:707:2635":{"crate_id":18,"path":["memchr","memmem","Searcher"],"kind":"struct"},"1:5819:2249":{"crate_id":1,"path":["std","process","Termination"],"kind":"trait"},"17:11149:44574":{"crate_id":17,"path":["object","elf","Rel32"],"kind":"struct"},"17:10270:44188":{"crate_id":17,"path":["object","read","pe","section","PeSegment"],"kind":"struct"},"17:10466:44215":{"crate_id":17,"path":["object","read","pe","resource","ResourceDirectoryTable"],"kind":"struct"},"2:8589:2129":{"crate_id":2,"path":["core","fmt","UpperHex"],"kind":"trait"},"1:10924:2010":{"crate_id":1,"path":["std","sys","unix","stdio","Stdin"],"kind":"struct"},"5:1338:1937":{"crate_id":5,"path":["alloc","collections","btree","map","Iter"],"kind":"struct"},"2:1551:1970":{"crate_id":2,"path":["core","mem","maybe_uninit","write_slice_cloned","Guard"],"kind":"struct"},"2:29512:2705":{"crate_id":2,"path":["core","mem","transmutability","Assume"],"kind":"struct"},"2:49866:2317":{"crate_id":2,"path":["core","slice","iter","RChunks"],"kind":"struct"},"1:8702:2534":{"crate_id":1,"path":["std","os","unix","ucred","UCred"],"kind":"struct"},"1:9456:106":{"crate_id":1,"path":["std","sync","mpmc","context","Context"],"kind":"struct"},"1:9437:2547":{"crate_id":1,"path":["std","sync","condvar","WaitTimeoutResult"],"kind":"struct"},"16:2500:3839":{"crate_id":16,"path":["gimli","common","LocationListsOffset"],"kind":"struct"},"1:8622:2513":{"crate_id":1,"path":["std","net","tcp","Incoming"],"kind":"struct"},"17:12781:49512":{"crate_id":17,"path":["object","pe","AnonObjectHeaderV2"],"kind":"struct"},"2:8304:2895":{"crate_id":2,"path":["core","fmt","builders","PadAdapter"],"kind":"struct"},"17:9165:60675":{"crate_id":17,"path":["object","read","any","DynamicRelocationIteratorInternal"],"kind":"enum"},"2:3365:1897":{"crate_id":2,"path":["core","any","Demand"],"kind":"struct"},"2:2652:1849":{"crate_id":2,"path":["core","marker","Sized"],"kind":"trait"},"6:5672:40291":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","regex_t"],"kind":"struct"},"5:5962:1939":{"crate_id":5,"path":["alloc","vec","drain","Drain"],"kind":"struct"},"6:4496:39638":{"crate_id":6,"path":["libc","unix","linux_like","linux","mntent"],"kind":"struct"},"1:4312:2046":{"crate_id":1,"path":["std","os","unix","fs","DirEntryExt2"],"kind":"trait"},"2:2215:97":{"crate_id":2,"path":["core","borrow","Borrow"],"kind":"trait"},"2:47062:1949":{"crate_id":2,"path":["core","iter","adapters","chain","Chain"],"kind":"struct"},"1:11644:51809":{"crate_id":1,"path":["std","sys_common","process","CommandEnv"],"kind":"struct"},"2:20948:1870":{"crate_id":2,"path":["core","core_simd","vector","sealed","Sealed"],"kind":"trait"},"6:4515:39640":{"crate_id":6,"path":["libc","unix","linux_like","linux","posix_spawnattr_t"],"kind":"struct"},"17:10520:44219":{"crate_id":17,"path":["object","read","pe","rich","RichHeaderEntry"],"kind":"struct"},"12:387:59732":{"crate_id":12,"path":["hashbrown","raw","RawIterHash"],"kind":"struct"},"16:7404:3570":{"crate_id":16,"path":["gimli","read","rnglists","RngListIter"],"kind":"struct"},"16:6597:3635":{"crate_id":16,"path":["gimli","read","line","FileEntry"],"kind":"struct"},"2:20435:2600":{"crate_id":2,"path":["core","core_simd","masks","Mask"],"kind":"struct"},"2:48212:2257":{"crate_id":2,"path":["core","result","IterMut"],"kind":"struct"},"2:3157:2626":{"crate_id":2,"path":["core","ops","try_trait","NeverShortCircuit"],"kind":"struct"},"6:4335:39625":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_effect"],"kind":"struct"},"2:10108:2316":{"crate_id":2,"path":["core","slice","iter","GroupByMut"],"kind":"struct"},"17:10159:44103":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbolTable"],"kind":"struct"},"16:7958:3590":{"crate_id":16,"path":["gimli","read","value","ValueType"],"kind":"enum"},"1:10725:53990":{"crate_id":1,"path":["std","sys","unix","process","process_common","Argv"],"kind":"struct"},"2:2655:220":{"crate_id":2,"path":["core","marker","StructuralPartialEq"],"kind":"trait"},"1:8929:2187":{"crate_id":1,"path":["std","path","Components"],"kind":"struct"},"0:0:1614":{"crate_id":0,"path":["winapi"],"kind":"module"},"16:6323:3549":{"crate_id":16,"path":["gimli","read","line","DebugLine"],"kind":"struct"},"16:6697:3857":{"crate_id":16,"path":["gimli","read","loclists","LocListsFormat"],"kind":"enum"},"16:7321:3553":{"crate_id":16,"path":["gimli","read","rnglists","DebugRngLists"],"kind":"struct"},"6:7237:39800":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_cond_t"],"kind":"struct"},"17:12134:48860":{"crate_id":17,"path":["object","macho","VersionMinCommand"],"kind":"struct"},"16:5488:3603":{"crate_id":16,"path":["gimli","read","cfi","BaseAddresses"],"kind":"struct"},"16:6048:3535":{"crate_id":16,"path":["gimli","read","endian_slice","EndianSlice"],"kind":"struct"},"1:8431:151":{"crate_id":1,"path":["std","net","ip_addr","IpAddr"],"kind":"enum"},"17:10182:44101":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbol"],"kind":"struct"},"6:4506:39639":{"crate_id":6,"path":["libc","unix","linux_like","linux","posix_spawn_file_actions_t"],"kind":"struct"},"1:12370:1757":{"crate_id":1,"path":["std","u64"],"kind":"primitive"},"1:8114:2491":{"crate_id":1,"path":["std","io","buffered","linewritershim","LineWriterShim"],"kind":"struct"},"16:5472:3602":{"crate_id":16,"path":["gimli","read","cfi","CieOffsetEncoding"],"kind":"enum"},"17:11186:44577":{"crate_id":17,"path":["object","elf","Rela64"],"kind":"struct"},"17:12638:49459":{"crate_id":17,"path":["object","pe","ImageOptionalHeader32"],"kind":"struct"},"1:8200:2233":{"crate_id":1,"path":["std","io","error","SimpleMessage"],"kind":"struct"},"2:9469:2321":{"crate_id":2,"path":["core","slice","iter","RSplit"],"kind":"struct"},"15:193:3465":{"crate_id":15,"path":["addr2line","LocationRangeUnitIter"],"kind":"struct"},"1:9280:181":{"crate_id":1,"path":["std","process","Output"],"kind":"struct"},"1:11488:2244":{"crate_id":1,"path":["std","sys","unix","process","process_inner","ExitStatus"],"kind":"struct"},"2:1824:2170":{"crate_id":2,"path":["core","ptr","non_null","NonNull"],"kind":"struct"},"16:2784:3836":{"crate_id":16,"path":["gimli","common","DebugTypesOffset"],"kind":"struct"},"2:50788:3033":{"crate_id":2,"path":["core","time","TryFromFloatSecsErrorKind"],"kind":"enum"},"2:53533:2753":{"crate_id":2,"path":["core","core_arch","simd","i16x32"],"kind":"struct"},"6:4551:39644":{"crate_id":6,"path":["libc","unix","linux_like","linux","inotify_event"],"kind":"struct"},"16:4879:42922":{"crate_id":16,"path":["gimli","constants","DwMacro"],"kind":"struct"},"12:2190:59740":{"crate_id":12,"path":["hashbrown","raw","Fallibility"],"kind":"enum"},"16:5424:3599":{"crate_id":16,"path":["gimli","read","cfi","ParsedEhFrameHdr"],"kind":"struct"},"16:524:3801":{"crate_id":16,"path":["gimli","read","cfi","RegisterRuleMap"],"kind":"struct"},"9:188:3346":{"crate_id":9,"path":["miniz_oxide","deflate","core","HuffmanOxide"],"kind":"struct"},"2:48161:205":{"crate_id":2,"path":["core","result","Result"],"kind":"enum"},"2:20407:12281":{"crate_id":2,"path":["core","core_simd","masks","to_bitmask","ToBitMask"],"kind":"trait"},"5:6755:3253":{"crate_id":5,"path":["alloc","collections","binary_heap","DrainSorted"],"kind":"struct"},"16:2424:3823":{"crate_id":16,"path":["gimli","common","DebugInfoOffset"],"kind":"struct"},"2:20276:2087":{"crate_id":2,"path":["core","core_simd","lane_count","LaneCount"],"kind":"struct"},"5:4029:57510":{"crate_id":5,"path":["alloc","collections","vec_deque","drop","Dropper"],"kind":"struct"},"17:9303:3934":{"crate_id":17,"path":["object","read","coff","section","SectionTable"],"kind":"struct"},"2:50899:29361":{"crate_id":2,"path":["core","future","ResumeTy"],"kind":"struct"},"1:5870:201":{"crate_id":1,"path":["std","sync","mpsc","Receiver"],"kind":"struct"},"9:0:1712":{"crate_id":9,"path":["miniz_oxide"],"kind":"module"},"17:11909:48844":{"crate_id":17,"path":["object","macho","DysymtabCommand"],"kind":"struct"},"2:2751:1909":{"crate_id":2,"path":["core","ops","arith","Div"],"kind":"trait"},"2:52735:2776":{"crate_id":2,"path":["core","core_arch","simd","u32x8"],"kind":"struct"},"1:3466:51852":{"crate_id":1,"path":["std","io","Write","write_fmt","Adapter"],"kind":"struct"},"16:6012:3621":{"crate_id":16,"path":["gimli","read","dwarf","Unit"],"kind":"struct"},"17:11661:48770":{"crate_id":17,"path":["object","macho","Section32"],"kind":"struct"},"2:47154:2389":{"crate_id":2,"path":["core","iter","adapters","inspect","Inspect"],"kind":"struct"},"2:2476:231":{"crate_id":2,"path":["core","convert","TryInto"],"kind":"trait"},"1:12375:1762":{"crate_id":1,"path":["std","fn"],"kind":"primitive"},"2:10771:2917":{"crate_id":2,"path":["core","str","iter","SplitNInternal"],"kind":"struct"},"17:10385:3989":{"crate_id":17,"path":["object","read","pe","import","ImportDescriptorIterator"],"kind":"struct"},"5:6926:3006":{"crate_id":5,"path":["alloc","ffi","c_str","FromBytesWithNulErrorKind"],"kind":"enum"},"17:9820:4034":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldSubCache"],"kind":"struct"},"6:4294:39620":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_constant_effect"],"kind":"struct"},"2:48444:89":{"crate_id":2,"path":["core","sync","atomic","AtomicU32"],"kind":"struct"},"6:4398:39631":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Ehdr"],"kind":"struct"},"16:2622:3841":{"crate_id":16,"path":["gimli","common","RawRangeListsOffset"],"kind":"struct"},"2:50580:2650":{"crate_id":2,"path":["core","str","pattern","TwoWaySearcher"],"kind":"struct"},"1:9474:50774":{"crate_id":1,"path":["std","sync","mpmc","error","SendTimeoutError"],"kind":"enum"},"2:48068:2687":{"crate_id":2,"path":["core","option","Item"],"kind":"struct"},"17:9371:43910":{"crate_id":17,"path":["object","read","coff","symbol","SymbolIterator"],"kind":"struct"},"2:46955:3007":{"crate_id":2,"path":["core","ffi","c_str","FromBytesUntilNulError"],"kind":"struct"},"6:4592:39649":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_tp"],"kind":"struct"},"2:20028:57203":{"crate_id":2,"path":["core","core_simd","swizzle","deinterleave","Odd"],"kind":"struct"},"6:5733:40298":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_seccomp"],"kind":"struct"},"6:4816:39674":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_can"],"kind":"struct"},"17:12730:49465":{"crate_id":17,"path":["object","pe","ImageNtHeaders64"],"kind":"struct"},"17:11639:48764":{"crate_id":17,"path":["object","macho","SegmentCommand64"],"kind":"struct"},"17:12695:49461":{"crate_id":17,"path":["object","pe","ImageOptionalHeader64"],"kind":"struct"},"2:48144:35602":{"crate_id":2,"path":["core","panicking","AssertKind"],"kind":"enum"},"5:6307:3186":{"crate_id":5,"path":["alloc","vec","in_place_drop","InPlaceDrop"],"kind":"struct"},"1:3188:2010":{"crate_id":1,"path":["std","io","stdio","Stdin"],"kind":"struct"},"6:4346:39626":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_ff_upload"],"kind":"struct"},"2:2921:1854":{"crate_id":2,"path":["core","ops","function","FnOnce"],"kind":"trait"},"9:505:3269":{"crate_id":9,"path":["miniz_oxide","inflate","stream","InflateState"],"kind":"struct"},"2:11832:106":{"crate_id":2,"path":["core","task","wake","Context"],"kind":"struct"},"16:6713:3567":{"crate_id":16,"path":["gimli","read","loclists","RawLocListIter"],"kind":"struct"},"1:884:1937":{"crate_id":1,"path":["std","collections","hash","map","Iter"],"kind":"struct"},"2:52000:2739":{"crate_id":2,"path":["core","core_arch","simd","f32x2"],"kind":"struct"},"2:52765:2779":{"crate_id":2,"path":["core","core_arch","simd","u64x4"],"kind":"struct"},"6:4126:39603":{"crate_id":6,"path":["libc","unix","linux_like","linux","spwd"],"kind":"struct"},"18:0:1720":{"crate_id":18,"path":["memchr"],"kind":"module"},"1:8847:2184":{"crate_id":1,"path":["std","path","State"],"kind":"enum"},"17:10233:44211":{"crate_id":17,"path":["object","read","pe","file","PeComdat"],"kind":"struct"},"16:5817:3616":{"crate_id":16,"path":["gimli","read","cfi","RegisterRule"],"kind":"enum"},"1:10930:2008":{"crate_id":1,"path":["std","sys","unix","stdio","Stderr"],"kind":"struct"},"17:13168:50033":{"crate_id":17,"path":["object","pe","ImageDynamicRelocationTable"],"kind":"struct"},"17:9831:4036":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCacheImageIterator"],"kind":"struct"},"1:10639:2251":{"crate_id":1,"path":["std","sys","unix","pipe","AnonPipe"],"kind":"struct"},"16:4208:42731":{"crate_id":16,"path":["gimli","constants","DwForm"],"kind":"struct"},"2:5610:56930":{"crate_id":2,"path":["core","iter","adapters","flatten","TrustedConstSize"],"kind":"trait"},"14:202:3128":{"crate_id":14,"path":["rustc_demangle","v0","ParseError"],"kind":"enum"},"2:3167:2725":{"crate_id":2,"path":["core","ops","try_trait","NeverShortCircuitResidual"],"kind":"enum"},"6:6409:40708":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","pthread_attr_t"],"kind":"struct"},"1:12364:1751":{"crate_id":1,"path":["std","i32"],"kind":"primitive"},"2:50259:2925":{"crate_id":2,"path":["core","str","iter","SplitWhitespace"],"kind":"struct"},"1:3267:2009":{"crate_id":1,"path":["std","io","stdio","StderrLock"],"kind":"struct"},"16:4808:42899":{"crate_id":16,"path":["gimli","constants","DwLne"],"kind":"struct"},"1:7769:51229":{"crate_id":1,"path":["std","backtrace_rs","print","BacktraceFrameFmt"],"kind":"struct"},"5:6972:57606":{"crate_id":5,"path":["alloc","slice","merge_sort","Run"],"kind":"struct"},"17:8596:43902":{"crate_id":17,"path":["object","endian","U64Bytes"],"kind":"struct"},"2:20007:57198":{"crate_id":2,"path":["core","core_simd","swizzle","interleave","Hi"],"kind":"struct"},"6:5861:40329":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","msqid_ds"],"kind":"struct"},"17:8911:60670":{"crate_id":17,"path":["object","read","any","SegmentInternal"],"kind":"enum"},"2:20842:2088":{"crate_id":2,"path":["core","core_simd","vector","Simd"],"kind":"struct"},"16:5519:3605":{"crate_id":16,"path":["gimli","read","cfi","CfiEntriesIter"],"kind":"struct"},"2:21200:55962":{"crate_id":2,"path":["core","num","dec2flt","number","Number"],"kind":"struct"},"17:1771:3927":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbolIterator"],"kind":"struct"},"2:49544:2302":{"crate_id":2,"path":["core","slice","ascii","EscapeAscii"],"kind":"struct"},"1:7731:52564":{"crate_id":1,"path":["std","backtrace_rs","symbolize","SymbolName"],"kind":"struct"},"16:6721:3637":{"crate_id":16,"path":["gimli","read","loclists","RawLocListEntry"],"kind":"enum"},"16:2548:3829":{"crate_id":16,"path":["gimli","common","DebugLocListsIndex"],"kind":"struct"},"2:48777:2129":{"crate_id":2,"path":["core","fmt","num","UpperHex"],"kind":"struct"},"2:8576:111":{"crate_id":2,"path":["core","fmt","Debug"],"kind":"trait"},"16:153:3533":{"crate_id":16,"path":["gimli","read","util","ArrayVec"],"kind":"struct"},"5:1376:2258":{"crate_id":5,"path":["alloc","collections","btree","map","Keys"],"kind":"struct"},"17:9118:60665":{"crate_id":17,"path":["object","read","any","SymbolIteratorInternal"],"kind":"enum"},"2:2547:115":{"crate_id":2,"path":["core","default","Default"],"kind":"trait"},"1:1088:2268":{"crate_id":1,"path":["std","collections","hash","map","Entry"],"kind":"enum"},"17:10207:44201":{"crate_id":17,"path":["object","read","pe","file","PeFile"],"kind":"struct"},"2:47113:2379":{"crate_id":2,"path":["core","iter","adapters","filter","Filter"],"kind":"struct"},"1:9497:55666":{"crate_id":1,"path":["std","sync","mpmc","list","Position"],"kind":"struct"},"1:5500:185":{"crate_id":1,"path":["std","path","Path"],"kind":"struct"},"5:6008:57495":{"crate_id":5,"path":["alloc","vec","drain","drop","DropGuard"],"kind":"struct"},"17:12797:49513":{"crate_id":17,"path":["object","pe","AnonObjectHeaderBigobj"],"kind":"struct"},"17:11594:48706":{"crate_id":17,"path":["object","macho","LoadCommand"],"kind":"struct"},"6:7166:41249":{"crate_id":6,"path":["libc","unix","linux_like","linux","arch","generic","termios2"],"kind":"struct"},"1:12369:1756":{"crate_id":1,"path":["std","u32"],"kind":"primitive"},"1:8130:2003":{"crate_id":1,"path":["std","io","cursor","Cursor"],"kind":"struct"},"17:10894:3955":{"crate_id":17,"path":["object","read","CompressedData"],"kind":"struct"},"2:5831:2385":{"crate_id":2,"path":["core","iter","adapters","intersperse","IntersperseWith"],"kind":"struct"},"6:5720:40296":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_entry"],"kind":"struct"},"6:1887:37406":{"crate_id":6,"path":["libc","unix","linux_like","linux","fpos64_t"],"kind":"enum"},"1:7843:51795":{"crate_id":1,"path":["std","thread","local","fast","DtorState"],"kind":"enum"},"1:12373:1760":{"crate_id":1,"path":["std","usize"],"kind":"primitive"},"2:11741:56477":{"crate_id":2,"path":["core","future","from_generator","GenFuture"],"kind":"struct"},"2:2800:1952":{"crate_id":2,"path":["core","ops","bit","BitOr"],"kind":"trait"},"17:8212:4011":{"crate_id":17,"path":["object","common","ComdatKind"],"kind":"enum"},"16:6881:3640":{"crate_id":16,"path":["gimli","read","op","Operation"],"kind":"enum"},"2:2822:2351":{"crate_id":2,"path":["core","ops","bit","BitAndAssign"],"kind":"trait"},"5:2724:2039":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Owned"],"kind":"enum"},"17:8951:60674":{"crate_id":17,"path":["object","read","any","SectionIteratorInternal"],"kind":"enum"},"18:515:4081":{"crate_id":18,"path":["memchr","memmem","prefilter","PrefilterFn"],"kind":"struct"},"17:11330:44755":{"crate_id":17,"path":["object","elf","NoteHeader32"],"kind":"struct"},"6:6500:40714":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","mcontext_t"],"kind":"struct"},"15:214:3469":{"crate_id":15,"path":["addr2line","RangeAttributes"],"kind":"struct"},"17:11734:48832":{"crate_id":17,"path":["object","macho","Dylib"],"kind":"struct"},"17:10642:4019":{"crate_id":17,"path":["object","read","SymbolSection"],"kind":"enum"},"2:56987:239":{"crate_id":2,"path":["core","core_simd","fmt","fmt","Wrapper"],"kind":"struct"},"16:4740:42879":{"crate_id":16,"path":["gimli","constants","DwDefaulted"],"kind":"struct"},"16:7113:3821":{"crate_id":16,"path":["gimli","read","op","EvaluationWaiting"],"kind":"enum"},"6:4152:39605":{"crate_id":6,"path":["libc","unix","linux_like","linux","signalfd_siginfo"],"kind":"struct"},"3:0:429":{"crate_id":3,"path":["compiler_builtins"],"kind":"module"},"5:4059:1970":{"crate_id":5,"path":["alloc","collections","vec_deque","write_iter_wrapping","Guard"],"kind":"struct"},"2:54005:17839":{"crate_id":2,"path":["core","core_arch","x86","__m128d"],"kind":"struct"},"2:2664:2056":{"crate_id":2,"path":["core","marker","PhantomData"],"kind":"struct"},"17:9778:3978":{"crate_id":17,"path":["object","read","elf","version","VerneedIterator"],"kind":"struct"},"16:6124:3593":{"crate_id":16,"path":["gimli","read","abbrev","Abbreviation"],"kind":"struct"},"9:896:3281":{"crate_id":9,"path":["miniz_oxide","MZStatus"],"kind":"enum"},"2:50277:2927":{"crate_id":2,"path":["core","str","iter","EncodeUtf16"],"kind":"struct"},"2:48634:3015":{"crate_id":2,"path":["core","sync","exclusive","Exclusive"],"kind":"struct"},"18:538:4083":{"crate_id":18,"path":["memchr","memmem","rabinkarp","NeedleHash"],"kind":"struct"},"2:49301:56760":{"crate_id":2,"path":["core","hash","sip","SipHasher24"],"kind":"struct"},"17:8701:43905":{"crate_id":17,"path":["object","endian","I64Bytes"],"kind":"struct"},"18:690:4071":{"crate_id":18,"path":["memchr","memmem","FinderRev"],"kind":"struct"},"2:21236:2804":{"crate_id":2,"path":["core","num","dec2flt","FloatErrorKind"],"kind":"enum"},"2:3963:103":{"crate_id":2,"path":["core","asserting","Capture"],"kind":"struct"},"1:8076:2054":{"crate_id":1,"path":["std","fs","Permissions"],"kind":"struct"},"1:6674:2552":{"crate_id":1,"path":["std","sync","once","OnceState"],"kind":"struct"},"16:8047:127":{"crate_id":16,"path":["gimli","read","Error"],"kind":"enum"},"1:10380:2526":{"crate_id":1,"path":["std","sys","unix","net","Socket"],"kind":"struct"},"5:6723:2297":{"crate_id":5,"path":["alloc","alloc","Global"],"kind":"struct"},"2:2736:1904":{"crate_id":2,"path":["core","ops","arith","Add"],"kind":"trait"},"2:21822:168":{"crate_id":2,"path":["core","num","nonzero","NonZeroI8"],"kind":"struct"},"1:5999:2539":{"crate_id":1,"path":["std","sync","barrier","Barrier"],"kind":"struct"},"5:667:225":{"crate_id":5,"path":["alloc","borrow","ToOwned"],"kind":"trait"},"2:49714:2909":{"crate_id":2,"path":["core","slice","iter","GenericSplitN"],"kind":"struct"},"1:12371:1758":{"crate_id":1,"path":["std","u128"],"kind":"primitive"},"2:20157:2597":{"crate_id":2,"path":["core","core_simd","elements","float","SimdFloat"],"kind":"trait"},"2:1736:3057":{"crate_id":2,"path":["core","ptr","metadata","Pointee"],"kind":"trait"},"5:6405:237":{"crate_id":5,"path":["alloc","vec","Vec"],"kind":"struct"},"1:5687:2240":{"crate_id":1,"path":["std","process","ChildStderr"],"kind":"struct"},"2:8799:139":{"crate_id":2,"path":["core","hash","Hash"],"kind":"trait"},"17:13459:50095":{"crate_id":17,"path":["object","pe","ImageEnclaveImport"],"kind":"struct"},"1:8089:129":{"crate_id":1,"path":["std","fs","FileType"],"kind":"struct"},"1:11210:1981":{"crate_id":1,"path":["std","sys","unix","io","IoSlice"],"kind":"struct"},"5:1359:1938":{"crate_id":5,"path":["alloc","collections","btree","map","IntoIter"],"kind":"struct"},"2:22386:2674":{"crate_id":2,"path":["core","num","saturating","Saturating"],"kind":"struct"},"1:4242:2041":{"crate_id":1,"path":["std","os","unix","fs","FileExt"],"kind":"trait"},"17:12514:49402":{"crate_id":17,"path":["object","pe","ImageOs2Header"],"kind":"struct"},"16:4348:42775":{"crate_id":16,"path":["gimli","constants","DwEnd"],"kind":"struct"},"1:6068:2551":{"crate_id":1,"path":["std","sync","lazy_lock","LazyLock"],"kind":"struct"},"6:5692:40293":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","Elf32_Chdr"],"kind":"struct"},"1:951:1940":{"crate_id":1,"path":["std","collections","hash","map","DrainFilter"],"kind":"struct"},"6:6302:40705":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","flock64"],"kind":"struct"},"1:7965:3239":{"crate_id":1,"path":["std","error","private","Internal"],"kind":"struct"},"1:3373:1970":{"crate_id":1,"path":["std","io","Guard"],"kind":"struct"},"2:56948:239":{"crate_id":2,"path":["core","core_simd","fmt","fmt","Wrapper"],"kind":"struct"},"6:7214:39797":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_rwlockattr_t"],"kind":"struct"},"17:12278:48931":{"crate_id":17,"path":["object","macho","DataInCodeEntry"],"kind":"struct"},"2:47053:2373":{"crate_id":2,"path":["core","iter","adapters","by_ref_sized","ByRefSized"],"kind":"struct"},"12:1866:1943":{"crate_id":12,"path":["hashbrown","set","SymmetricDifference"],"kind":"struct"},"1:957:2260":{"crate_id":1,"path":["std","collections","hash","map","ValuesMut"],"kind":"struct"},"2:11041:2636":{"crate_id":2,"path":["core","str","pattern","ReverseSearcher"],"kind":"trait"},"2:3986:2169":{"crate_id":2,"path":["core","async_iter","async_iter","AsyncIterator"],"kind":"trait"},"16:4376:42779":{"crate_id":16,"path":["gimli","constants","DwAccess"],"kind":"struct"},"2:50712:2939":{"crate_id":2,"path":["core","str","CharEscapeDefault"],"kind":"struct"},"17:9601:3926":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbol"],"kind":"struct"},"17:386:43896":{"crate_id":17,"path":["object","read","any","Segment"],"kind":"struct"},"1:6386:2952":{"crate_id":1,"path":["std","sync","mpmc","waker","Waker"],"kind":"struct"},"16:5758:3613":{"crate_id":16,"path":["gimli","read","cfi","RegisterRuleIter"],"kind":"struct"},"17:12103:48858":{"crate_id":17,"path":["object","macho","EncryptionInfoCommand32"],"kind":"struct"},"17:9293:4030":{"crate_id":17,"path":["object","read","coff","file","CoffFile"],"kind":"struct"},"6:4224:39611":{"crate_id":6,"path":["libc","unix","linux_like","linux","sembuf"],"kind":"struct"},"2:50889:200":{"crate_id":2,"path":["core","future","ready","Ready"],"kind":"struct"},"2:21723:172":{"crate_id":2,"path":["core","num","nonzero","NonZeroU64"],"kind":"struct"},"12:1518:3455":{"crate_id":12,"path":["hashbrown","rustc_entry","RustcEntry"],"kind":"enum"},"1:6402:51221":{"crate_id":1,"path":["std","sync","mpmc","waker","SyncWaker"],"kind":"struct"},"16:5536:3606":{"crate_id":16,"path":["gimli","read","cfi","CieOrFde"],"kind":"enum"},"2:53643:2773":{"crate_id":2,"path":["core","core_arch","simd","u16x32"],"kind":"struct"},"12:2178:59736":{"crate_id":12,"path":["hashbrown","raw","sse2","Group"],"kind":"struct"},"1:3457:1982":{"crate_id":1,"path":["std","io","Write"],"kind":"trait"},"6:1562:37254":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_ll"],"kind":"struct"},"2:47084:2376":{"crate_id":2,"path":["core","iter","adapters","copied","Copied"],"kind":"struct"},"16:3017:42236":{"crate_id":16,"path":["gimli","arch","Arm"],"kind":"struct"},"6:4379:39630":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Ehdr"],"kind":"struct"},"17:13536:50128":{"crate_id":17,"path":["object","pe","ImageSeparateDebugHeader"],"kind":"struct"},"16:5194:42233":{"crate_id":16,"path":["gimli","endianity","LittleEndian"],"kind":"struct"},"2:47485:31067":{"crate_id":2,"path":["core","iter","sources","from_fn","FromFn"],"kind":"struct"},"1:571:2452":{"crate_id":1,"path":["std","thread","Packet"],"kind":"struct"},"16:5927:3618":{"crate_id":16,"path":["gimli","read","cfi","CallFrameInstructionIter"],"kind":"struct"},"6:4804:39672":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_txtime"],"kind":"struct"},"2:2653:2055":{"crate_id":2,"path":["core","marker","Unsize"],"kind":"trait"},"17:13141:50009":{"crate_id":17,"path":["object","pe","ImageResourceDirStringU"],"kind":"struct"},"1:897:2257":{"crate_id":1,"path":["std","collections","hash","map","IterMut"],"kind":"struct"},"12:1029:2270":{"crate_id":12,"path":["hashbrown","map","VacantEntry"],"kind":"struct"},"16:6759:3564":{"crate_id":16,"path":["gimli","read","loclists","LocListIter"],"kind":"struct"},"2:46341:193":{"crate_id":2,"path":["core","ops","range","Range"],"kind":"struct"},"2:4248:2861":{"crate_id":2,"path":["core","cell","BorrowRef"],"kind":"struct"},"1:7283:53962":{"crate_id":1,"path":["std","sys_common","wstr","WStrUnits"],"kind":"struct"},"2:46569:2619":{"crate_id":2,"path":["core","array","TryFromSliceError"],"kind":"struct"},"2:4312:2142":{"crate_id":2,"path":["core","cell","RefMut"],"kind":"struct"},"17:12850:49558":{"crate_id":17,"path":["object","pe","ImageSymbolBytes"],"kind":"struct"},"2:50249:2924":{"crate_id":2,"path":["core","str","iter","LinesAny"],"kind":"struct"},"6:5772:40300":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_data"],"kind":"union"},"17:11708:48830":{"crate_id":17,"path":["object","macho","Fvmlib"],"kind":"struct"},"2:48770:2128":{"crate_id":2,"path":["core","fmt","num","LowerHex"],"kind":"struct"},"17:11014:44467":{"crate_id":17,"path":["object","elf","SectionHeader32"],"kind":"struct"},"17:10583:3913":{"crate_id":17,"path":["object","read","ObjectKind"],"kind":"enum"},"18:681:4070":{"crate_id":18,"path":["memchr","memmem","Finder"],"kind":"struct"},"1:11576:1927":{"crate_id":1,"path":["std","sys","unix","time","inner","Instant"],"kind":"struct"},"6:6415:40709":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_fpxreg"],"kind":"struct"},"2:47197:2392":{"crate_id":2,"path":["core","iter","adapters","peekable","Peekable"],"kind":"struct"},"2:21921:167":{"crate_id":2,"path":["core","num","nonzero","NonZeroI64"],"kind":"struct"},"6:5605:40288":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","rtentry"],"kind":"struct"},"16:4565:42848":{"crate_id":16,"path":["gimli","constants","DwId"],"kind":"struct"},"1:11953:26357":{"crate_id":1,"path":["std","alloc","System"],"kind":"struct"},"17:11997:48850":{"crate_id":17,"path":["object","macho","DylibReference"],"kind":"struct"},"5:1584:57495":{"crate_id":5,"path":["alloc","collections","btree","map","drop","DropGuard"],"kind":"struct"},"1:8395:1949":{"crate_id":1,"path":["std","io","Chain"],"kind":"struct"},"18:582:2073":{"crate_id":18,"path":["memchr","memmem","twoway","Reverse"],"kind":"struct"},"1:10484:8071":{"crate_id":1,"path":["std","sys","unix","os","SplitPaths"],"kind":"struct"},"2:8729:57033":{"crate_id":2,"path":["core","fmt","fmt","BorrowedPlaceholder"],"kind":"struct"},"5:4936:2290":{"crate_id":5,"path":["alloc","slice","Join"],"kind":"trait"},"2:8581:119":{"crate_id":2,"path":["core","fmt","Display"],"kind":"trait"},"2:51862:2774":{"crate_id":2,"path":["core","core_arch","simd","u32x2"],"kind":"struct"},"2:3140:227":{"crate_id":2,"path":["core","ops","try_trait","Try"],"kind":"trait"},"16:4432:42787":{"crate_id":16,"path":["gimli","constants","DwVirtuality"],"kind":"struct"},"2:52141:2775":{"crate_id":2,"path":["core","core_arch","simd","u32x4"],"kind":"struct"},"17:10997:44355":{"crate_id":17,"path":["object","elf","Ident"],"kind":"struct"},"17:9658:44019":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdatSectionIterator"],"kind":"struct"},"5:3002:1944":{"crate_id":5,"path":["alloc","collections","btree","set","Union"],"kind":"struct"},"2:6749:2017":{"crate_id":2,"path":["core","iter","sources","empty","Empty"],"kind":"struct"},"2:49943:2164":{"crate_id":2,"path":["core","str","error","ParseBoolError"],"kind":"struct"},"2:52333:2740":{"crate_id":2,"path":["core","core_arch","simd","f32x4"],"kind":"struct"},"2:47122:2380":{"crate_id":2,"path":["core","iter","adapters","filter_map","FilterMap"],"kind":"struct"},"2:1635:571":{"crate_id":2,"path":["core","mem","drop"],"kind":"function"},"1:9597:1927":{"crate_id":1,"path":["std","time","Instant"],"kind":"struct"},"14:0:1716":{"crate_id":14,"path":["rustc_demangle"],"kind":"module"},"16:4653:42864":{"crate_id":16,"path":["gimli","constants","DwOrd"],"kind":"struct"},"2:53929:2780":{"crate_id":2,"path":["core","core_arch","simd","u64x8"],"kind":"struct"},"2:2218:98":{"crate_id":2,"path":["core","borrow","BorrowMut"],"kind":"trait"},"1:12350:1740":{"crate_id":1,"path":["std","char"],"kind":"primitive"},"2:52211:2763":{"crate_id":2,"path":["core","core_arch","simd","i8x16"],"kind":"struct"},"17:9061:3936":{"crate_id":17,"path":["object","read","any","SymbolTable"],"kind":"struct"},"2:4181:2855":{"crate_id":2,"path":["core","cell","BorrowError"],"kind":"struct"},"2:21954:164":{"crate_id":2,"path":["core","num","nonzero","NonZeroI128"],"kind":"struct"},"1:2406:2484":{"crate_id":1,"path":["std","fs","read_dir"],"kind":"function"},"16:3623:42266":{"crate_id":16,"path":["gimli","constants","DwUt"],"kind":"struct"},"5:4614:1970":{"crate_id":5,"path":["alloc","rc","from_iter_exact","Guard"],"kind":"struct"},"6:501:36359":{"crate_id":6,"path":["libc","unix","timeval"],"kind":"struct"},"2:6416:2399":{"crate_id":2,"path":["core","iter","adapters","zip","zip"],"kind":"function"},"2:48220:1938":{"crate_id":2,"path":["core","result","IntoIter"],"kind":"struct"},"12:1832:1937":{"crate_id":12,"path":["hashbrown","set","Iter"],"kind":"struct"},"2:47174:2390":{"crate_id":2,"path":["core","iter","adapters","map","Map"],"kind":"struct"},"2:50053:2916":{"crate_id":2,"path":["core","str","iter","RSplitTerminator"],"kind":"struct"},"16:4712:42875":{"crate_id":16,"path":["gimli","constants","DwIdx"],"kind":"struct"},"12:659:1938":{"crate_id":12,"path":["hashbrown","map","IntoIter"],"kind":"struct"},"17:12033:48853":{"crate_id":17,"path":["object","macho","PrebindCksumCommand"],"kind":"struct"},"1:11706:51042":{"crate_id":1,"path":["std","sys_common","wtf8","Wtf8Buf"],"kind":"struct"},"1:9698:4584":{"crate_id":1,"path":["std","sys","unix","args","Args"],"kind":"struct"},"1:4421:2574":{"crate_id":1,"path":["std","os","unix","net","ancillary","ScmRights"],"kind":"struct"},"6:554:36365":{"crate_id":6,"path":["libc","unix","iovec"],"kind":"struct"},"17:12816:49515":{"crate_id":17,"path":["object","pe","ImageSectionHeader"],"kind":"struct"},"12:2080:2270":{"crate_id":12,"path":["hashbrown","set","VacantEntry"],"kind":"struct"},"15:175:3464":{"crate_id":15,"path":["addr2line","LocationRangeIter"],"kind":"struct"},"1:8471:2206":{"crate_id":1,"path":["std","net","ip_addr","Ipv6Addr"],"kind":"struct"},"17:247:60673":{"crate_id":17,"path":["object","read","util","DebugLen"],"kind":"struct"},"2:1750:56934":{"crate_id":2,"path":["core","ptr","metadata","PtrComponents"],"kind":"struct"},"16:0:1718":{"crate_id":16,"path":["gimli"],"kind":"module"},"17:9339:4028":{"crate_id":17,"path":["object","read","coff","section","CoffSectionIterator"],"kind":"struct"},"2:51778:2749":{"crate_id":2,"path":["core","core_arch","simd","i16x2"],"kind":"struct"},"1:3190:2011":{"crate_id":1,"path":["std","io","stdio","StdinLock"],"kind":"struct"},"16:2596:3881":{"crate_id":16,"path":["gimli","common","DebugMacroOffset"],"kind":"struct"},"5:3792:2257":{"crate_id":5,"path":["alloc","collections","vec_deque","iter_mut","IterMut"],"kind":"struct"},"16:7992:3589":{"crate_id":16,"path":["gimli","read","value","Value"],"kind":"enum"},"2:8583:2126":{"crate_id":2,"path":["core","fmt","Octal"],"kind":"trait"},"17:12361:49005":{"crate_id":17,"path":["object","macho","ScatteredRelocationInfo"],"kind":"struct"},"12:751:1939":{"crate_id":12,"path":["hashbrown","map","Drain"],"kind":"struct"},"2:29606:2996":{"crate_id":2,"path":["core","ptr","alignment","AlignmentEnum32"],"kind":"enum"},"6:4575:39647":{"crate_id":6,"path":["libc","unix","linux_like","linux","regmatch_t"],"kind":"struct"},"17:10752:3911":{"crate_id":17,"path":["object","read","Import"],"kind":"struct"},"2:46882:3104":{"crate_id":2,"path":["core","char","ToUppercase"],"kind":"struct"},"17:11070:44529":{"crate_id":17,"path":["object","elf","CompressionHeader64"],"kind":"struct"},"5:842:3251":{"crate_id":5,"path":["alloc","collections","binary_heap","Hole"],"kind":"struct"},"17:12225:48927":{"crate_id":17,"path":["object","macho","IdentCommand"],"kind":"struct"},"1:8454:2205":{"crate_id":1,"path":["std","net","ip_addr","Ipv4Addr"],"kind":"struct"},"9:111:3338":{"crate_id":9,"path":["miniz_oxide","deflate","core","CompressorOxide"],"kind":"struct"},"17:12836:49556":{"crate_id":17,"path":["object","pe","ImageSymbol"],"kind":"struct"},"17:9021:43909":{"crate_id":17,"path":["object","read","any","ComdatSectionIterator"],"kind":"struct"},"6:4354:39627":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_ff_erase"],"kind":"struct"},"2:7411:2364":{"crate_id":2,"path":["core","iter","traits","marker","TrustedLen"],"kind":"trait"},"12:320:3447":{"crate_id":12,"path":["hashbrown","raw","RawIntoIter"],"kind":"struct"},"2:8309:2896":{"crate_id":2,"path":["core","fmt","builders","PadAdapterState"],"kind":"struct"},"2:2709:1850":{"crate_id":2,"path":["core","marker","Unpin"],"kind":"trait"},"17:13134:50008":{"crate_id":17,"path":["object","pe","ImageResourceDirectoryString"],"kind":"struct"},"6:4267:39616":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_mask"],"kind":"struct"},"1:2864:2236":{"crate_id":1,"path":["std","io","error","repr_bitpacked","Repr"],"kind":"struct"},"17:11684:48771":{"crate_id":17,"path":["object","macho","Section64"],"kind":"struct"},"2:2788:2340":{"crate_id":2,"path":["core","ops","bit","Not"],"kind":"trait"},"17:9930:44113":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandData"],"kind":"struct"},"16:5379:3597":{"crate_id":16,"path":["gimli","read","cfi","DebugFrame"],"kind":"struct"},"5:5619:1970":{"crate_id":5,"path":["alloc","sync","from_iter_exact","Guard"],"kind":"struct"},"5:2981:3133":{"crate_id":5,"path":["alloc","collections","btree","set","IntersectionInner"],"kind":"enum"},"5:6867:1947":{"crate_id":5,"path":["alloc","collections","TryReserveError"],"kind":"struct"},"2:58262:56936":{"crate_id":2,"path":["core","core_simd","vector","ptr","SimdConstPtr"],"kind":"struct"},"6:7289:41278":{"crate_id":6,"path":["libc","unix","align","in6_addr"],"kind":"struct"},"2:46875:3103":{"crate_id":2,"path":["core","char","ToLowercase"],"kind":"struct"},"17:8752:1987":{"crate_id":17,"path":["object","read","util","Bytes"],"kind":"struct"},"2:7408:1950":{"crate_id":2,"path":["core","iter","traits","marker","FusedIterator"],"kind":"trait"},"1:11971:51800":{"crate_id":1,"path":["std","personality","dwarf","eh","EHContext"],"kind":"struct"},"17:13221:50044":{"crate_id":17,"path":["object","pe","ImageEpilogueDynamicRelocationHeader"],"kind":"struct"},"2:52508:56067":{"crate_id":2,"path":["core","core_arch","simd","m32x4"],"kind":"struct"},"5:2465:3235":{"crate_id":5,"path":["alloc","collections","btree","node","Handle"],"kind":"struct"},"2:9562:2323":{"crate_id":2,"path":["core","slice","iter","RSplitN"],"kind":"struct"},"17:12748:49467":{"crate_id":17,"path":["object","pe","ImageRomHeaders"],"kind":"struct"},"1:8628:2514":{"crate_id":1,"path":["std","net","tcp","IntoIncoming"],"kind":"struct"},"12:2198:59737":{"crate_id":12,"path":["hashbrown","raw","TableLayout"],"kind":"struct"},"2:20194:2727":{"crate_id":2,"path":["core","core_simd","elements","int","SimdInt"],"kind":"trait"},"1:3475:1962":{"crate_id":1,"path":["std","io","Seek"],"kind":"trait"},"2:8848:1948":{"crate_id":2,"path":["core","hash","BuildHasher"],"kind":"trait"},"16:6450:3462":{"crate_id":16,"path":["gimli","read","line","LineRow"],"kind":"struct"},"2:1671:1047":{"crate_id":2,"path":["core","ptr"],"kind":"module"},"1:4429:2575":{"crate_id":1,"path":["std","os","unix","net","ancillary","ScmCredentials"],"kind":"struct"},"17:8295:43900":{"crate_id":17,"path":["object","common","RelocationKind"],"kind":"enum"},"6:1695:37266":{"crate_id":6,"path":["libc","unix","linux_like","mmsghdr"],"kind":"struct"},"16:5154:3811":{"crate_id":16,"path":["gimli","constants","DwEhPe"],"kind":"struct"},"2:2310:184":{"crate_id":2,"path":["core","cmp","PartialOrd"],"kind":"trait"},"2:50508:2646":{"crate_id":2,"path":["core","str","pattern","CharPredicateSearcher"],"kind":"struct"},"14:160:42157":{"crate_id":14,"path":["rustc_demangle","Demangle"],"kind":"struct"},"1:5673:2239":{"crate_id":1,"path":["std","process","ChildStdout"],"kind":"struct"},"1:12348:1738":{"crate_id":1,"path":["std","bool"],"kind":"primitive"},"1:5567:119":{"crate_id":1,"path":["std","path","Display"],"kind":"struct"},"6:1608:37259":{"crate_id":6,"path":["libc","unix","linux_like","lconv"],"kind":"struct"},"16:3845:42416":{"crate_id":16,"path":["gimli","constants","DwTag"],"kind":"struct"},"1:11520:3031":{"crate_id":1,"path":["std","sys","unix","time","Nanoseconds"],"kind":"struct"},"16:6139:3623":{"crate_id":16,"path":["gimli","read","abbrev","Attributes"],"kind":"enum"},"5:0:279":{"crate_id":5,"path":["alloc"],"kind":"module"},"1:8887:2186":{"crate_id":1,"path":["std","path","Component"],"kind":"enum"},"17:11547:44131":{"crate_id":17,"path":["object","macho","FatArch64"],"kind":"struct"},"2:50776:1931":{"crate_id":2,"path":["core","time","TryFromFloatSecsError"],"kind":"struct"},"1:4250:2042":{"crate_id":1,"path":["std","os","unix","fs","PermissionsExt"],"kind":"trait"},"1:12355:1744":{"crate_id":1,"path":["std","slice"],"kind":"primitive"},"17:9885:44127":{"crate_id":17,"path":["object","read","macho","file","MachOComdat"],"kind":"struct"},"2:56909:239":{"crate_id":2,"path":["core","core_simd","fmt","fmt","Wrapper"],"kind":"struct"},"5:5358:226":{"crate_id":5,"path":["alloc","string","ToString"],"kind":"trait"},"17:10374:3988":{"crate_id":17,"path":["object","read","pe","import","ImportTable"],"kind":"struct"},"2:47093:2377":{"crate_id":2,"path":["core","iter","adapters","cycle","Cycle"],"kind":"struct"},"1:2253:1979":{"crate_id":1,"path":["std","fs","read_to_string"],"kind":"function"},"1:3153:2498":{"crate_id":1,"path":["std","io","stdio","StdoutRaw"],"kind":"struct"},"7:79:41379":{"crate_id":7,"path":["unwind","libunwind","_Unwind_Action"],"kind":"enum"},"2:54014:17840":{"crate_id":2,"path":["core","core_arch","x86","__m256i"],"kind":"struct"},"17:12265:48930":{"crate_id":17,"path":["object","macho","SourceVersionCommand"],"kind":"struct"},"2:29472:2704":{"crate_id":2,"path":["core","mem","manually_drop","ManuallyDrop"],"kind":"struct"},"2:11247:111":{"crate_id":2,"path":["core","str","lossy","Debug"],"kind":"struct"},"2:51810:2782":{"crate_id":2,"path":["core","core_arch","simd","u8x8"],"kind":"struct"},"5:3751:57495":{"crate_id":5,"path":["alloc","collections","vec_deque","drain","drop","DropGuard"],"kind":"struct"},"6:7266:39804":{"crate_id":6,"path":["libc","unix","linux_like","linux","canfd_frame"],"kind":"struct"},"2:49029:67":{"crate_id":2,"path":["core","fmt","rt","v1","Alignment"],"kind":"enum"},"2:21756:169":{"crate_id":2,"path":["core","num","nonzero","NonZeroU128"],"kind":"struct"},"2:3067:2999":{"crate_id":2,"path":["core","ops","range","RangeBounds"],"kind":"trait"},"2:52430:56119":{"crate_id":2,"path":["core","core_arch","simd","m8x16"],"kind":"struct"},"5:676:110":{"crate_id":5,"path":["alloc","borrow","Cow"],"kind":"enum"},"17:12874:49561":{"crate_id":17,"path":["object","pe","ImageSymbolExBytes"],"kind":"struct"},"18:599:60679":{"crate_id":18,"path":["memchr","memmem","twoway","Shift"],"kind":"enum"},"17:13393:50087":{"crate_id":17,"path":["object","pe","ImageAlphaRuntimeFunctionEntry"],"kind":"struct"},"5:6449:57511":{"crate_id":5,"path":["alloc","vec","retain_mut","BackshiftOnDrop"],"kind":"struct"},"17:13024:49992":{"crate_id":17,"path":["object","pe","ImageImportByName"],"kind":"struct"},"2:46483:2726":{"crate_id":2,"path":["core","ops","try_trait","Yeet"],"kind":"struct"},"16:7475:3550":{"crate_id":16,"path":["gimli","read","str","DebugLineStr"],"kind":"struct"},"2:20005:57202":{"crate_id":2,"path":["core","core_simd","swizzle","interleave","Lo"],"kind":"struct"},"16:3680:42299":{"crate_id":16,"path":["gimli","constants","DwCfa"],"kind":"struct"},"1:11155:2053":{"crate_id":1,"path":["std","sys","unix","fs","OpenOptions"],"kind":"struct"},"2:2645:214":{"crate_id":2,"path":["core","marker","Send"],"kind":"trait"},"1:11557:51028":{"crate_id":1,"path":["std","sys","unix","time","Timespec"],"kind":"struct"},"1:4298:2040":{"crate_id":1,"path":["std","os","unix","fs","FileTypeExt"],"kind":"trait"},"2:50570:2649":{"crate_id":2,"path":["core","str","pattern","EmptyNeedle"],"kind":"struct"},"5:3460:2003":{"crate_id":5,"path":["alloc","collections","linked_list","Cursor"],"kind":"struct"},"6:6277:37187":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statfs"],"kind":"struct"},"6:1600:37258":{"crate_id":6,"path":["libc","unix","linux_like","Dl_info"],"kind":"struct"},"5:4932:2292":{"crate_id":5,"path":["alloc","slice","Concat"],"kind":"trait"},"2:3951:2790":{"crate_id":2,"path":["core","asserting","TryCaptureWithDebug"],"kind":"struct"},"17:13478:50101":{"crate_id":17,"path":["object","pe","ImageDebugDirectory"],"kind":"struct"},"1:7788:51206":{"crate_id":1,"path":["std","backtrace_rs","Bomb"],"kind":"struct"},"6:5504:40280":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__timeval"],"kind":"struct"},"6:4761:39668":{"crate_id":6,"path":["libc","unix","linux_like","linux","af_alg_iv"],"kind":"struct"},"1:8688:2524":{"crate_id":1,"path":["std","os","unix","net","ancillary","SocketAncillary"],"kind":"struct"},"5:6747:1939":{"crate_id":5,"path":["alloc","collections","binary_heap","Drain"],"kind":"struct"},"2:11689:29365":{"crate_id":2,"path":["core","future","poll_fn","PollFn"],"kind":"struct"},"16:7095:3820":{"crate_id":16,"path":["gimli","read","op","EvaluationState"],"kind":"enum"},"1:915:2258":{"crate_id":1,"path":["std","collections","hash","map","Keys"],"kind":"struct"},"2:53994:17838":{"crate_id":2,"path":["core","core_arch","x86","__m128"],"kind":"struct"},"17:9712:44021":{"crate_id":17,"path":["object","read","elf","version","VersionIndex"],"kind":"struct"},"2:46325:195":{"crate_id":2,"path":["core","ops","range","RangeFull"],"kind":"struct"},"6:487:36357":{"crate_id":6,"path":["libc","unix","group"],"kind":"struct"},"2:51840:2770":{"crate_id":2,"path":["core","core_arch","simd","u16x4"],"kind":"struct"},"2:51710:2781":{"crate_id":2,"path":["core","core_arch","simd","u8x4"],"kind":"struct"},"1:3418:1980":{"crate_id":1,"path":["std","io","IoSliceMut"],"kind":"struct"},"1:12321:7069":{"crate_id":1,"path":["std","backtrace_rs","types","BytesOrWideString"],"kind":"enum"},"17:9071:60672":{"crate_id":17,"path":["object","read","any","SymbolTableInternal"],"kind":"enum"},"12:697:2262":{"crate_id":12,"path":["hashbrown","map","IntoValues"],"kind":"struct"},"2:8587:2128":{"crate_id":2,"path":["core","fmt","LowerHex"],"kind":"trait"},"2:20026:57200":{"crate_id":2,"path":["core","core_simd","swizzle","deinterleave","Even"],"kind":"struct"},"1:8945:2189":{"crate_id":1,"path":["std","path","Ancestors"],"kind":"struct"},"6:4653:39657":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlmsgerr"],"kind":"struct"},"1:7522:52310":{"crate_id":1,"path":["std","panicking","Hook"],"kind":"enum"},"17:10394:3990":{"crate_id":17,"path":["object","read","pe","import","ImportThunkList"],"kind":"struct"},"2:11092:2639":{"crate_id":2,"path":["core","str","pattern","MultiCharEqPattern"],"kind":"struct"},"17:11034:44468":{"crate_id":17,"path":["object","elf","SectionHeader64"],"kind":"struct"},"6:4665:39659":{"crate_id":6,"path":["libc","unix","linux_like","linux","file_clone_range"],"kind":"struct"},"1:8059:2053":{"crate_id":1,"path":["std","fs","OpenOptions"],"kind":"struct"},"17:13366:50084":{"crate_id":17,"path":["object","pe","ImageArmRuntimeFunctionEntry"],"kind":"struct"},"2:14:1829":{"crate_id":2,"path":["core","write"],"kind":"macro"},"1:11876:2512":{"crate_id":1,"path":["std","sys_common","net","TcpListener"],"kind":"struct"},"1:5390:186":{"crate_id":1,"path":["std","path","PathBuf"],"kind":"struct"},"5:2039:3232":{"crate_id":5,"path":["alloc","collections","btree","navigate","LazyLeafRange"],"kind":"struct"},"5:6912:3205":{"crate_id":5,"path":["alloc","ffi","c_str","NulError"],"kind":"struct"},"2:2918:1853":{"crate_id":2,"path":["core","ops","function","FnMut"],"kind":"trait"},"2:50387:2637":{"crate_id":2,"path":["core","str","pattern","CharSearcher"],"kind":"struct"},"2:51756:2761":{"crate_id":2,"path":["core","core_arch","simd","i8x4"],"kind":"struct"},"6:5595:40287":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_mmap_hdr"],"kind":"struct"},"1:11324:1871":{"crate_id":1,"path":["std","sys","unix","os_str","Buf"],"kind":"struct"},"2:48756:2127":{"crate_id":2,"path":["core","fmt","num","Binary"],"kind":"struct"},"17:12307:48938":{"crate_id":17,"path":["object","macho","Nlist32"],"kind":"struct"},"17:12164:48862":{"crate_id":17,"path":["object","macho","BuildToolVersion"],"kind":"struct"},"2:48368:88":{"crate_id":2,"path":["core","sync","atomic","AtomicU16"],"kind":"struct"},"2:0:481":{"crate_id":2,"path":["core"],"kind":"module"},"17:12060:48855":{"crate_id":17,"path":["object","macho","RpathCommand"],"kind":"struct"},"1:8696:2513":{"crate_id":1,"path":["std","os","unix","net","listener","Incoming"],"kind":"struct"},"17:13158:50032":{"crate_id":17,"path":["object","pe","ImageLoadConfigCodeIntegrity"],"kind":"struct"},"1:12353:1742":{"crate_id":1,"path":["std","pointer"],"kind":"primitive"},"1:1120:2271":{"crate_id":1,"path":["std","collections","hash","map","OccupiedError"],"kind":"struct"},"6:4096:39600":{"crate_id":6,"path":["libc","unix","linux_like","linux","rlimit64"],"kind":"struct"},"6:4598:39650":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_j1939"],"kind":"struct"},"17:8339:43901":{"crate_id":17,"path":["object","common","RelocationEncoding"],"kind":"enum"},"1:9616:1928":{"crate_id":1,"path":["std","time","SystemTime"],"kind":"struct"},"17:8981:43908":{"crate_id":17,"path":["object","read","any","ComdatIterator"],"kind":"struct"},"18:80:50519":{"crate_id":18,"path":["memchr","memchr","iter","Memchr"],"kind":"struct"},"1:11433:51215":{"crate_id":1,"path":["std","sys","unix","process","process_inner","posix_spawn","PosixSpawnattr"],"kind":"struct"},"2:21789:2455":{"crate_id":2,"path":["core","num","nonzero","NonZeroUsize"],"kind":"struct"},"2:50907:190":{"crate_id":2,"path":["core","task","poll","Poll"],"kind":"enum"},"2:49875:2320":{"crate_id":2,"path":["core","slice","iter","RChunksMut"],"kind":"struct"},"17:10721:43914":{"crate_id":17,"path":["object","read","ObjectMapEntry"],"kind":"struct"},"17:10121:3954":{"crate_id":17,"path":["object","read","macho","section","MachOSectionInternal"],"kind":"struct"},"17:12926:49627":{"crate_id":17,"path":["object","pe","ImageAuxSymbolWeak"],"kind":"struct"},"17:9897:44128":{"crate_id":17,"path":["object","read","macho","file","MachOComdatSectionIterator"],"kind":"struct"},"12:725:2258":{"crate_id":12,"path":["hashbrown","map","Keys"],"kind":"struct"},"17:10257:44189":{"crate_id":17,"path":["object","read","pe","section","PeSegmentIterator"],"kind":"struct"},"6:4690:966":{"crate_id":6,"path":["libc","unix","linux_like","linux","option"],"kind":"struct"},"2:21342:57192":{"crate_id":2,"path":["core","num","fmt","Formatted"],"kind":"struct"},"16:6087:3569":{"crate_id":16,"path":["gimli","read","reader","ReaderOffsetId"],"kind":"struct"},"17:12756:49509":{"crate_id":17,"path":["object","pe","Guid"],"kind":"struct"},"2:11954:2066":{"crate_id":2,"path":["core","alloc","Allocator"],"kind":"trait"},"1:3081:2020":{"crate_id":1,"path":["std","io","readbuf","BorrowedBuf"],"kind":"struct"},"16:3001:3837":{"crate_id":16,"path":["gimli","common","DwarfFileType"],"kind":"enum"},"2:21297:55961":{"crate_id":2,"path":["core","num","flt2dec","Sign"],"kind":"enum"},"6:1636:37260":{"crate_id":6,"path":["libc","unix","linux_like","in_pktinfo"],"kind":"struct"},"2:9314:1989":{"crate_id":2,"path":["core","slice","iter","Split"],"kind":"struct"},"18:481:4079":{"crate_id":18,"path":["memchr","cow","CowBytes"],"kind":"struct"},"2:53035:2741":{"crate_id":2,"path":["core","core_arch","simd","f32x8"],"kind":"struct"},"6:6424:40710":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_xmmreg"],"kind":"struct"},"6:6329:10400":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stat"],"kind":"struct"},"17:9031:60667":{"crate_id":17,"path":["object","read","any","ComdatSectionIteratorInternal"],"kind":"enum"},"11:36:59725":{"crate_id":11,"path":["adler","algo","U32X4"],"kind":"struct"},"2:50189:2922":{"crate_id":2,"path":["core","str","iter","Matches"],"kind":"struct"},"5:6156:57495":{"crate_id":5,"path":["alloc","vec","into_iter","drop","DropGuard"],"kind":"struct"},"1:542:2447":{"crate_id":1,"path":["std","thread","PanicGuard"],"kind":"struct"},"17:8561:3972":{"crate_id":17,"path":["object","endian","U32Bytes"],"kind":"struct"},"1:10708:2241":{"crate_id":1,"path":["std","sys","unix","process","process_common","Command"],"kind":"struct"},"18:590:57037":{"crate_id":18,"path":["memchr","memmem","twoway","TwoWay"],"kind":"struct"},"6:1574:37255":{"crate_id":6,"path":["libc","unix","linux_like","fd_set"],"kind":"struct"},"1:4653:2531":{"crate_id":1,"path":["std","os","unix","net","stream","UnixStream"],"kind":"struct"},"16:2762:3834":{"crate_id":16,"path":["gimli","common","DebugStrOffsetsIndex"],"kind":"struct"},"5:2906:95":{"crate_id":5,"path":["alloc","collections","btree","set","BTreeSet"],"kind":"struct"},"16:2718:3832":{"crate_id":16,"path":["gimli","common","DebugStrOffset"],"kind":"struct"},"2:51732:2769":{"crate_id":2,"path":["core","core_arch","simd","u16x2"],"kind":"struct"},"5:4092:57510":{"crate_id":5,"path":["alloc","collections","vec_deque","truncate","Dropper"],"kind":"struct"},"17:10332:4053":{"crate_id":17,"path":["object","read","pe","export","ExportTarget"],"kind":"enum"},"16:7037:3009":{"crate_id":16,"path":["gimli","read","op","Location"],"kind":"enum"},"5:4519:199":{"crate_id":5,"path":["alloc","rc","Rc"],"kind":"struct"},"17:8241:4015":{"crate_id":17,"path":["object","common","SymbolKind"],"kind":"enum"},"2:47540:31073":{"crate_id":2,"path":["core","iter","sources","successors","Successors"],"kind":"struct"},"16:3448:42240":{"crate_id":16,"path":["gimli","arch","X86_64"],"kind":"struct"},"2:39311:2059":{"crate_id":2,"path":["core","marker","PhantomPinned"],"kind":"struct"},"6:5582:40285":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_pktinfo"],"kind":"struct"},"16:3179:42237":{"crate_id":16,"path":["gimli","arch","AArch64"],"kind":"struct"},"2:3151:2371":{"crate_id":2,"path":["core","ops","try_trait","Residual"],"kind":"trait"},"17:12291:48937":{"crate_id":17,"path":["object","macho","NoteCommand"],"kind":"struct"},"2:49309:2070":{"crate_id":2,"path":["core","hash","sip","SipHasher"],"kind":"struct"},"1:10866:51213":{"crate_id":1,"path":["std","sys","unix","stack_overflow","Handler"],"kind":"struct"},"17:13594:50170":{"crate_id":17,"path":["object","pe","ImageCor20Header"],"kind":"struct"},"1:10553:2203":{"crate_id":1,"path":["std","sys","unix","os_str","Slice"],"kind":"struct"},"1:8205:2234":{"crate_id":1,"path":["std","io","error","Custom"],"kind":"struct"},"16:6495:3461":{"crate_id":16,"path":["gimli","read","line","LineSequence"],"kind":"struct"},"2:1918:2171":{"crate_id":2,"path":["core","ptr","unique","Unique"],"kind":"struct"},"1:8596:2212":{"crate_id":1,"path":["std","net","socket_addr","SocketAddrV4"],"kind":"struct"},"16:6807:3862":{"crate_id":16,"path":["gimli","read","lookup","LookupEntryIter"],"kind":"struct"},"11:44:3432":{"crate_id":11,"path":["adler","Adler32"],"kind":"struct"},"2:7415:2366":{"crate_id":2,"path":["core","iter","traits","marker","TrustedStep"],"kind":"trait"},"16:7144:3642":{"crate_id":16,"path":["gimli","read","op","EvaluationResult"],"kind":"enum"},"16:6164:3545":{"crate_id":16,"path":["gimli","read","aranges","DebugAranges"],"kind":"struct"},"14:40:44355":{"crate_id":14,"path":["rustc_demangle","v0","Ident"],"kind":"struct"},"18:660:4068":{"crate_id":18,"path":["memchr","memmem","FindIter"],"kind":"struct"},"1:9451:52317":{"crate_id":1,"path":["std","sync","mpmc","array","ArrayToken"],"kind":"struct"},"16:7907:3655":{"crate_id":16,"path":["gimli","read","unit","EntriesTreeNode"],"kind":"struct"},"6:4329:39624":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_rumble_effect"],"kind":"struct"},"17:13572:50134":{"crate_id":17,"path":["object","pe","ImageArchitectureEntry"],"kind":"struct"},"7:32:41372":{"crate_id":7,"path":["unwind","libunwind","_Unwind_Reason_Code"],"kind":"enum"},"1:2900:127":{"crate_id":1,"path":["std","io","error","Error"],"kind":"struct"},"2:47207:2393":{"crate_id":2,"path":["core","iter","adapters","rev","Rev"],"kind":"struct"},"1:3265:2008":{"crate_id":1,"path":["std","io","stdio","Stderr"],"kind":"struct"},"17:10796:4010":{"crate_id":17,"path":["object","read","CodeView"],"kind":"struct"},"2:46365:194":{"crate_id":2,"path":["core","ops","range","RangeFrom"],"kind":"struct"},"2:21363:2986":{"crate_id":2,"path":["core","num","error","ParseIntError"],"kind":"struct"},"17:10845:4013":{"crate_id":17,"path":["object","read","Relocation"],"kind":"struct"},"1:12360:1747":{"crate_id":1,"path":["std","f32"],"kind":"primitive"},"18:574:60680":{"crate_id":18,"path":["memchr","memmem","twoway","Forward"],"kind":"struct"},"6:4212:39610":{"crate_id":6,"path":["libc","unix","linux_like","linux","msginfo"],"kind":"struct"},"1:9531:51027":{"crate_id":1,"path":["std","sync","mpmc","select","Selected"],"kind":"enum"},"2:52971:2756":{"crate_id":2,"path":["core","core_arch","simd","i32x8"],"kind":"struct"},"2:46224:2101":{"crate_id":2,"path":["core","ops","control_flow","ControlFlow"],"kind":"enum"},"5:6879:2275":{"crate_id":5,"path":["alloc","collections","TryReserveErrorKind"],"kind":"enum"},"17:10420:4047":{"crate_id":17,"path":["object","read","pe","relocation","RelocationBlockIterator"],"kind":"struct"},"7:0:1483":{"crate_id":7,"path":["unwind"],"kind":"module"},"17:9681:44020":{"crate_id":17,"path":["object","read","elf","note","Note"],"kind":"struct"},"2:2464:75":{"crate_id":2,"path":["core","convert","AsRef"],"kind":"trait"},"2:10982:2162":{"crate_id":2,"path":["core","str","traits","FromStr"],"kind":"trait"},"2:48763:2126":{"crate_id":2,"path":["core","fmt","num","Octal"],"kind":"struct"},"2:21276:56073":{"crate_id":2,"path":["core","num","flt2dec","decoder","FullDecoded"],"kind":"enum"},"16:7335:3566":{"crate_id":16,"path":["gimli","read","rnglists","RangeLists"],"kind":"struct"},"6:4797:39671":{"crate_id":6,"path":["libc","unix","linux_like","linux","ifreq"],"kind":"struct"},"6:4810:39673":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_can_addr"],"kind":"union"},"2:52257:2751":{"crate_id":2,"path":["core","core_arch","simd","i16x8"],"kind":"struct"},"2:7033:1856":{"crate_id":2,"path":["core","iter","traits","collect","Extend"],"kind":"trait"},"1:6032:2542":{"crate_id":1,"path":["std","sync","condvar","Condvar"],"kind":"struct"},"9:586:3319":{"crate_id":9,"path":["miniz_oxide","deflate","core","SymFreq"],"kind":"struct"},"1:907:1938":{"crate_id":1,"path":["std","collections","hash","map","IntoIter"],"kind":"struct"},"6:5587:40286":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_mmap_req"],"kind":"struct"},"9:800:41529":{"crate_id":9,"path":["miniz_oxide","inflate","core","LocalVars"],"kind":"struct"},"6:6479:40713":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user"],"kind":"struct"},"1:11180:2469":{"crate_id":1,"path":["std","sys","unix","fs","FileTimes"],"kind":"struct"},"2:52309:2758":{"crate_id":2,"path":["core","core_arch","simd","i64x2"],"kind":"struct"},"2:9357:2327":{"crate_id":2,"path":["core","slice","iter","SplitInclusive"],"kind":"struct"},"2:5366:2382":{"crate_id":2,"path":["core","iter","adapters","flatten","FlatMap"],"kind":"struct"},"18:507:60680":{"crate_id":18,"path":["memchr","memmem","genericsimd","Forward"],"kind":"struct"},"1:1623:1942":{"crate_id":1,"path":["std","collections","hash","set","Difference"],"kind":"struct"},"12:1044:3441":{"crate_id":12,"path":["hashbrown","map","EntryRef"],"kind":"enum"},"17:10625:3916":{"crate_id":17,"path":["object","read","SymbolIndex"],"kind":"struct"},"17:12237:48928":{"crate_id":17,"path":["object","macho","FvmfileCommand"],"kind":"struct"},"17:11300:44751":{"crate_id":17,"path":["object","elf","Verneed"],"kind":"struct"},"16:6820:60015":{"crate_id":16,"path":["gimli","read","lookup","PubStuffHeader"],"kind":"struct"},"1:7098:52557":{"crate_id":1,"path":["std","sys_common","backtrace","_print","DisplayBacktrace"],"kind":"struct"},"1:1608:1939":{"crate_id":1,"path":["std","collections","hash","set","Drain"],"kind":"struct"},"1:7221:2508":{"crate_id":1,"path":["std","sys_common","remutex","ReentrantMutexGuard"],"kind":"struct"},"1:10823:2242":{"crate_id":1,"path":["std","sys","unix","process","process_common","CommandArgs"],"kind":"struct"},"2:46939:3006":{"crate_id":2,"path":["core","ffi","c_str","FromBytesWithNulErrorKind"],"kind":"enum"},"1:11150:51806":{"crate_id":1,"path":["std","sys","unix","fs","StatxExtraFields"],"kind":"struct"},"2:2467:74":{"crate_id":2,"path":["core","convert","AsMut"],"kind":"trait"},"2:52477:56075":{"crate_id":2,"path":["core","core_arch","simd","m16x8"],"kind":"struct"},"17:12948:49629":{"crate_id":17,"path":["object","pe","ImageAuxSymbolCrc"],"kind":"struct"},"17:12955:49641":{"crate_id":17,"path":["object","pe","ImageRelocation"],"kind":"struct"},"16:2456:3850":{"crate_id":16,"path":["gimli","common","DebugLineOffset"],"kind":"struct"},"17:10528:4009":{"crate_id":17,"path":["object","read","traits","NoDynamicRelocationIterator"],"kind":"struct"},"2:4072:2854":{"crate_id":2,"path":["core","cell","once","OnceCell"],"kind":"struct"},"17:9263:43961":{"crate_id":17,"path":["object","read","archive","ArchiveMemberIterator"],"kind":"struct"},"12:300:3448":{"crate_id":12,"path":["hashbrown","raw","RawIter"],"kind":"struct"},"17:11774:48835":{"crate_id":17,"path":["object","macho","SubClientCommand"],"kind":"struct"},"2:2741:1902":{"crate_id":2,"path":["core","ops","arith","Sub"],"kind":"trait"},"12:1003:2269":{"crate_id":12,"path":["hashbrown","map","OccupiedEntry"],"kind":"struct"},"2:6809:2288":{"crate_id":2,"path":["core","iter","sources","once","once"],"kind":"function"},"2:52531:56130":{"crate_id":2,"path":["core","core_arch","simd","m64x2"],"kind":"struct"},"1:8956:2190":{"crate_id":1,"path":["std","path","StripPrefixError"],"kind":"struct"},"4:0:1710":{"crate_id":4,"path":["rustc_std_workspace_core"],"kind":"module"},"2:11873:200":{"crate_id":2,"path":["core","task","ready","Ready"],"kind":"struct"},"6:6311:40706":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","siginfo_t"],"kind":"struct"},"17:9691:3976":{"crate_id":17,"path":["object","read","elf","hash","HashTable"],"kind":"struct"},"1:11733:51780":{"crate_id":1,"path":["std","sys_common","wtf8","Wtf8CodePoints"],"kind":"struct"},"16:7374:3652":{"crate_id":16,"path":["gimli","read","rnglists","RawRngListEntry"],"kind":"enum"},"17:11259:44740":{"crate_id":17,"path":["object","elf","Versym"],"kind":"struct"},"6:7208:39796":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_mutexattr_t"],"kind":"struct"},"6:6975:41088":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","align","max_align_t"],"kind":"struct"},"16:2273:3809":{"crate_id":16,"path":["gimli","common","Encoding"],"kind":"struct"},"17:8991:60669":{"crate_id":17,"path":["object","read","any","ComdatIteratorInternal"],"kind":"enum"},"16:5365:3544":{"crate_id":16,"path":["gimli","read","addr","DebugAddr"],"kind":"struct"},"1:11755:51204":{"crate_id":1,"path":["std","sys_common","thread_local_key","Key"],"kind":"struct"},"2:9548:2325":{"crate_id":2,"path":["core","slice","iter","SplitN"],"kind":"struct"},"12:1138:2271":{"crate_id":12,"path":["hashbrown","map","OccupiedError"],"kind":"struct"},"17:11137:44539":{"crate_id":17,"path":["object","elf","Syminfo64"],"kind":"struct"},"17:10608:3914":{"crate_id":17,"path":["object","read","SectionIndex"],"kind":"struct"},"1:3482:1985":{"crate_id":1,"path":["std","io","BufRead"],"kind":"trait"},"1:8412:1987":{"crate_id":1,"path":["std","io","Bytes"],"kind":"struct"},"16:5793:3615":{"crate_id":16,"path":["gimli","read","cfi","CfaRule"],"kind":"enum"},"2:50950:2951":{"crate_id":2,"path":["core","task","wake","RawWakerVTable"],"kind":"struct"},"16:6441:3631":{"crate_id":16,"path":["gimli","read","line","LineInstructions"],"kind":"struct"},"17:12630:49457":{"crate_id":17,"path":["object","pe","ImageDataDirectory"],"kind":"struct"},"2:50268:2926":{"crate_id":2,"path":["core","str","iter","SplitAsciiWhitespace"],"kind":"struct"},"6:4280:39618":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_trigger"],"kind":"struct"},"2:11996:2080":{"crate_id":2,"path":["core","const_closure","ConstFnMutClosure"],"kind":"struct"},"6:6322:40707":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stack_t"],"kind":"struct"},"1:1964:2463":{"crate_id":1,"path":["std","error","Indented"],"kind":"struct"},"2:49985:1989":{"crate_id":2,"path":["core","str","iter","Split"],"kind":"struct"},"17:9751:3977":{"crate_id":17,"path":["object","read","elf","version","VerdefIterator"],"kind":"struct"},"2:29312:3047":{"crate_id":2,"path":["core","num","FpCategory"],"kind":"enum"},"1:4762:2092":{"crate_id":1,"path":["std","os","unix","process","ExitStatusExt"],"kind":"trait"},"1:12332:51016":{"crate_id":1,"path":["std","backtrace_rs","print","PrintFmt"],"kind":"enum"},"16:4404:42783":{"crate_id":16,"path":["gimli","constants","DwVis"],"kind":"struct"},"16:5175:42235":{"crate_id":16,"path":["gimli","endianity","RunTimeEndian"],"kind":"enum"},"1:1629:1943":{"crate_id":1,"path":["std","collections","hash","set","SymmetricDifference"],"kind":"struct"},"6:600:36372":{"crate_id":6,"path":["libc","unix","servent"],"kind":"struct"},"1:11427:51199":{"crate_id":1,"path":["std","sys","unix","process","process_inner","posix_spawn","PosixSpawnFileActions"],"kind":"struct"},"2:48520:90":{"crate_id":2,"path":["core","sync","atomic","AtomicU64"],"kind":"struct"},"1:11691:50997":{"crate_id":1,"path":["std","sys_common","wtf8","CodePoint"],"kind":"struct"},"16:7447:3554":{"crate_id":16,"path":["gimli","read","str","DebugStr"],"kind":"struct"},"17:12550:49403":{"crate_id":17,"path":["object","pe","ImageVxdHeader"],"kind":"struct"},"2:2887:116":{"crate_id":2,"path":["core","ops","deref","Deref"],"kind":"trait"},"17:9947:44129":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandVariant"],"kind":"enum"},"1:3226:2012":{"crate_id":1,"path":["std","io","stdio","Stdout"],"kind":"struct"},"16:7227:3644":{"crate_id":16,"path":["gimli","read","op","Evaluation"],"kind":"struct"},"17:9350:4029":{"crate_id":17,"path":["object","read","coff","section","CoffSection"],"kind":"struct"},"6:581:36369":{"crate_id":6,"path":["libc","unix","sigval"],"kind":"struct"},"2:54066:17844":{"crate_id":2,"path":["core","core_arch","x86","__m512"],"kind":"struct"},"2:7717:2165":{"crate_id":2,"path":["core","panic","unwind_safe","UnwindSafe"],"kind":"trait"},"2:53001:2759":{"crate_id":2,"path":["core","core_arch","simd","i64x4"],"kind":"struct"},"17:11315:44754":{"crate_id":17,"path":["object","elf","Vernaux"],"kind":"struct"},"16:5113:43108":{"crate_id":16,"path":["gimli","constants","DwOp"],"kind":"struct"},"2:11616:29364":{"crate_id":2,"path":["core","future","into_future","IntoFuture"],"kind":"trait"},"17:10310:44213":{"crate_id":17,"path":["object","read","pe","section","PeRelocationIterator"],"kind":"struct"},"2:47492:2287":{"crate_id":2,"path":["core","iter","sources","once","Once"],"kind":"struct"},"5:6081:1938":{"crate_id":5,"path":["alloc","vec","into_iter","IntoIter"],"kind":"struct"},"17:10283:44187":{"crate_id":17,"path":["object","read","pe","section","PeSectionIterator"],"kind":"struct"},"1:4206:1869":{"crate_id":1,"path":["std","os","unix","ffi","os_str","OsStringExt"],"kind":"trait"},"1:1102:2269":{"crate_id":1,"path":["std","collections","hash","map","OccupiedEntry"],"kind":"struct"},"16:5856:3617":{"crate_id":16,"path":["gimli","read","cfi","CallFrameInstruction"],"kind":"enum"},"6:4300:39621":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_ramp_effect"],"kind":"struct"},"5:6317:3187":{"crate_id":5,"path":["alloc","vec","in_place_drop","InPlaceDstBufDrop"],"kind":"struct"},"1:4581:2530":{"crate_id":1,"path":["std","os","unix","net","listener","UnixListener"],"kind":"struct"},"1:12374:1761":{"crate_id":1,"path":["std","reference"],"kind":"primitive"},"1:9344:1938":{"crate_id":1,"path":["std","sync","mpsc","IntoIter"],"kind":"struct"},"1:2647:2002":{"crate_id":1,"path":["std","io","buffered","linewriter","LineWriter"],"kind":"struct"},"1:8054:2467":{"crate_id":1,"path":["std","fs","ReadDir"],"kind":"struct"},"17:967:43976":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbolIterator"],"kind":"struct"},"2:50942:2950":{"crate_id":2,"path":["core","task","wake","RawWaker"],"kind":"struct"},"1:2250:2470":{"crate_id":1,"path":["std","fs","read"],"kind":"function"},"5:939:57495":{"crate_id":5,"path":["alloc","collections","binary_heap","drop","DropGuard"],"kind":"struct"},"5:6474:57520":{"crate_id":5,"path":["alloc","vec","dedup_by","FillGapOnDrop"],"kind":"struct"},"2:48482:83":{"crate_id":2,"path":["core","sync","atomic","AtomicI64"],"kind":"struct"},"2:21041:2967":{"crate_id":2,"path":["core","num","bignum","Big32x40"],"kind":"struct"},"6:1668:37263":{"crate_id":6,"path":["libc","unix","linux_like","arpreq"],"kind":"struct"},"1:4113:2519":{"crate_id":1,"path":["std","net","udp","UdpSocket"],"kind":"struct"},"17:12909:49626":{"crate_id":17,"path":["object","pe","ImageAuxSymbolFunctionBeginEnd"],"kind":"struct"},"17:11721:48831":{"crate_id":17,"path":["object","macho","FvmlibCommand"],"kind":"struct"},"2:49047:109":{"crate_id":2,"path":["core","fmt","rt","v1","Count"],"kind":"enum"},"17:11748:48833":{"crate_id":17,"path":["object","macho","DylibCommand"],"kind":"struct"},"1:1825:8060":{"crate_id":1,"path":["std","env","VarsOs"],"kind":"struct"},"5:5422:1939":{"crate_id":5,"path":["alloc","string","Drain"],"kind":"struct"},"6:5498:40279":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__exit_status"],"kind":"struct"},"12:1681:142":{"crate_id":12,"path":["hashbrown","set","HashSet"],"kind":"struct"},"17:11761:48834":{"crate_id":17,"path":["object","macho","SubFrameworkCommand"],"kind":"struct"},"1:11168:51011":{"crate_id":1,"path":["std","sys","unix","fs","FilePermissions"],"kind":"struct"},"12:1085:3443":{"crate_id":12,"path":["hashbrown","map","OccupiedEntryRef"],"kind":"struct"},"17:12617:49405":{"crate_id":17,"path":["object","pe","ImageFileHeader"],"kind":"struct"},"16:6474:3632":{"crate_id":16,"path":["gimli","read","line","ColumnType"],"kind":"enum"},"2:46829:3101":{"crate_id":2,"path":["core","char","EscapeUnicodeState"],"kind":"enum"},"2:25196:2709":{"crate_id":2,"path":["core","num","wrapping","Wrapping"],"kind":"struct"},"2:46889:3105":{"crate_id":2,"path":["core","char","CaseMappingIter"],"kind":"enum"},"17:12322:48939":{"crate_id":17,"path":["object","macho","Nlist64"],"kind":"struct"},"13:0:1709":{"crate_id":13,"path":["std_detect"],"kind":"module"},"1:9509:52302":{"crate_id":1,"path":["std","sync","mpmc","select","Token"],"kind":"struct"},"2:48085:2257":{"crate_id":2,"path":["core","option","IterMut"],"kind":"struct"},"2:9289:2257":{"crate_id":2,"path":["core","slice","iter","IterMut"],"kind":"struct"},"16:5681:3610":{"crate_id":16,"path":["gimli","read","cfi","FrameDescriptionEntry"],"kind":"struct"},"6:4102:39601":{"crate_id":6,"path":["libc","unix","linux_like","linux","glob_t"],"kind":"struct"},"2:47501:31069":{"crate_id":2,"path":["core","iter","sources","once_with","OnceWith"],"kind":"struct"},"17:9526:3925":{"crate_id":17,"path":["object","read","elf","section","ElfSectionIterator"],"kind":"struct"},"2:56974:239":{"crate_id":2,"path":["core","core_simd","fmt","fmt","Wrapper"],"kind":"struct"},"16:6768:3638":{"crate_id":16,"path":["gimli","read","loclists","LocationListEntry"],"kind":"struct"},"17:11841:48840":{"crate_id":17,"path":["object","macho","ThreadCommand"],"kind":"struct"},"1:1634:1944":{"crate_id":1,"path":["std","collections","hash","set","Union"],"kind":"struct"},"2:3219:2630":{"crate_id":2,"path":["core","ops","unsize","DispatchFromDyn"],"kind":"trait"},"2:20854:57137":{"crate_id":2,"path":["core","core_simd","vector","splat","Splat"],"kind":"struct"},"1:11500:2245":{"crate_id":1,"path":["std","sys","unix","process","process_inner","ExitStatusError"],"kind":"struct"},"2:10810:2921":{"crate_id":2,"path":["core","str","iter","MatchesInternal"],"kind":"struct"},"5:7000:3126":{"crate_id":5,"path":["alloc","string","FromUtf16Error"],"kind":"struct"},"2:8526:1982":{"crate_id":2,"path":["core","fmt","Write"],"kind":"trait"},"1:941:1939":{"crate_id":1,"path":["std","collections","hash","map","Drain"],"kind":"struct"},"12:2184:57016":{"crate_id":12,"path":["hashbrown","raw","bitmask","BitMask"],"kind":"struct"},"2:49348:56132":{"crate_id":2,"path":["core","hash","sip","Sip24Rounds"],"kind":"struct"},"17:11828:48839":{"crate_id":17,"path":["object","macho","DylinkerCommand"],"kind":"struct"},"6:1738:37270":{"crate_id":6,"path":["libc","unix","linux_like","sigevent"],"kind":"struct"},"2:20245:2602":{"crate_id":2,"path":["core","core_simd","eq","SimdPartialEq"],"kind":"trait"},"1:2026:179":{"crate_id":1,"path":["std","ffi","os_str","OsStr"],"kind":"struct"},"16:6262:3556":{"crate_id":16,"path":["gimli","read","index","DebugTuIndex"],"kind":"struct"},"12:1845:1940":{"crate_id":12,"path":["hashbrown","set","DrainFilter"],"kind":"struct"},"2:8146:86":{"crate_id":2,"path":["core","sync","atomic","AtomicPtr"],"kind":"struct"},"16:7948:3558":{"crate_id":16,"path":["gimli","read","unit","DebugTypesUnitHeadersIter"],"kind":"struct"},"1:771:140":{"crate_id":1,"path":["std","collections","hash","map","HashMap"],"kind":"struct"},"17:10445:4013":{"crate_id":17,"path":["object","read","pe","relocation","Relocation"],"kind":"struct"},"16:7430:193":{"crate_id":16,"path":["gimli","read","rnglists","Range"],"kind":"struct"},"6:575:36368":{"crate_id":6,"path":["libc","unix","linger"],"kind":"struct"},"18:671:4069":{"crate_id":18,"path":["memchr","memmem","FindRevIter"],"kind":"struct"},"5:5547:3142":{"crate_id":5,"path":["alloc","sync","ArcInner"],"kind":"struct"},"16:7489:3525":{"crate_id":16,"path":["gimli","read","UnitOffset"],"kind":"struct"},"6:7279:41277":{"crate_id":6,"path":["libc","unix","linux_like","linux","non_exhaustive","open_how"],"kind":"struct"},"2:48153:188":{"crate_id":2,"path":["core","pin","Pin"],"kind":"struct"},"6:4417:39632":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Sym"],"kind":"struct"},"17:10973:44354":{"crate_id":17,"path":["object","elf","FileHeader64"],"kind":"struct"},"1:11739:51798":{"crate_id":1,"path":["std","sys_common","wtf8","EncodeWide"],"kind":"struct"},"6:4437:39634":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Phdr"],"kind":"struct"},"17:13413:50091":{"crate_id":17,"path":["object","pe","ImageEnclaveConfig32"],"kind":"struct"},"1:11628:51208":{"crate_id":1,"path":["std","sys_common","once","futex","CompletionGuard"],"kind":"struct"},"1:1601:1937":{"crate_id":1,"path":["std","collections","hash","set","Iter"],"kind":"struct"},"1:8537:2568":{"crate_id":1,"path":["std","net","parser","AddrKind"],"kind":"enum"},"6:4449:39635":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Phdr"],"kind":"struct"},"17:9458:3896":{"crate_id":17,"path":["object","read","elf","file","ElfFile"],"kind":"struct"},"2:2834:2357":{"crate_id":2,"path":["core","ops","bit","ShlAssign"],"kind":"trait"},"5:2947:3132":{"crate_id":5,"path":["alloc","collections","btree","set","DifferenceInner"],"kind":"enum"},"16:6354:3630":{"crate_id":16,"path":["gimli","read","line","LineInstruction"],"kind":"enum"},"16:7256:3646":{"crate_id":16,"path":["gimli","read","pubnames","DebugPubNames"],"kind":"struct"},"17:12739:49466":{"crate_id":17,"path":["object","pe","ImageNtHeaders32"],"kind":"struct"},"1:658:2464":{"crate_id":1,"path":["std","backtrace","Backtrace"],"kind":"struct"},"16:2859:3808":{"crate_id":16,"path":["gimli","common","EhFrameOffset"],"kind":"struct"},"17:13039:49994":{"crate_id":17,"path":["object","pe","ImageThunkData32"],"kind":"struct"},"1:11333:51002":{"crate_id":1,"path":["std","sys","unix","process","process_common","ProgramKind"],"kind":"enum"},"12:98:3445":{"crate_id":12,"path":["hashbrown","raw","Bucket"],"kind":"struct"},"16:4912:42931":{"crate_id":16,"path":["gimli","constants","DwRle"],"kind":"struct"},"12:60:59731":{"crate_id":12,"path":["hashbrown","raw","bitmask","BitMaskIter"],"kind":"struct"},"16:5606:3608":{"crate_id":16,"path":["gimli","read","cfi","CommonInformationEntry"],"kind":"struct"},"5:6785:193":{"crate_id":5,"path":["alloc","collections","btree","set","Range"],"kind":"struct"},"17:9475:3886":{"crate_id":17,"path":["object","read","elf","segment","ElfSegmentIterator"],"kind":"struct"},"1:9885:128":{"crate_id":1,"path":["std","sys","unix","fs","File"],"kind":"struct"},"2:51941:2750":{"crate_id":2,"path":["core","core_arch","simd","i16x4"],"kind":"struct"},"2:46852:3102":{"crate_id":2,"path":["core","char","EscapeDefaultState"],"kind":"enum"},"16:7803:3653":{"crate_id":16,"path":["gimli","read","unit","Attribute"],"kind":"struct"},"2:50724:2942":{"crate_id":2,"path":["core","str","IsNotEmpty"],"kind":"struct"},"15:0:1717":{"crate_id":15,"path":["addr2line"],"kind":"module"},"1:7853:2430":{"crate_id":1,"path":["std","thread","Builder"],"kind":"struct"},"6:1595:37257":{"crate_id":6,"path":["libc","unix","linux_like","sched_param"],"kind":"struct"},"2:29712:2997":{"crate_id":2,"path":["core","ptr","alignment","AlignmentEnum64"],"kind":"enum"},"2:11021:2632":{"crate_id":2,"path":["core","str","pattern"],"kind":"module"},"1:7961:8073":{"crate_id":1,"path":["std","env","JoinPathsError"],"kind":"struct"},"5:2725:58018":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Dying"],"kind":"enum"},"6:6545:40718":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ptrace_rseq_configuration"],"kind":"struct"},"2:2771:1919":{"crate_id":2,"path":["core","ops","arith","SubAssign"],"kind":"trait"},"16:7297:3650":{"crate_id":16,"path":["gimli","read","pubtypes","PubTypesEntryIter"],"kind":"struct"},"17:9155:43911":{"crate_id":17,"path":["object","read","any","DynamicRelocationIterator"],"kind":"struct"},"9:827:3276":{"crate_id":9,"path":["miniz_oxide","inflate","TINFLStatus"],"kind":"enum"},"2:47258:2397":{"crate_id":2,"path":["core","iter","adapters","step_by","StepBy"],"kind":"struct"},"17:9328:4027":{"crate_id":17,"path":["object","read","coff","section","CoffSegment"],"kind":"struct"},"17:8162:3959":{"crate_id":17,"path":["object","common","SectionKind"],"kind":"enum"},"6:4659:39658":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlattr"],"kind":"struct"},"2:49765:2310":{"crate_id":2,"path":["core","slice","iter","Windows"],"kind":"struct"},"16:5402:3598":{"crate_id":16,"path":["gimli","read","cfi","EhFrameHdr"],"kind":"struct"},"1:9894:51216":{"crate_id":1,"path":["std","sys","unix","fs","Dir"],"kind":"struct"},"1:521:51202":{"crate_id":1,"path":["std","thread","spawn_unchecked_","MaybeDangling"],"kind":"struct"},"2:54119:17847":{"crate_id":2,"path":["core","core_arch","x86","__m256bh"],"kind":"struct"},"9:977:3282":{"crate_id":9,"path":["miniz_oxide","StreamResult"],"kind":"struct"},"2:10185:56412":{"crate_id":2,"path":["core","slice","sort","CopyOnDrop"],"kind":"struct"},"16:7245:3645":{"crate_id":16,"path":["gimli","read","pubnames","PubNamesEntry"],"kind":"struct"},"17:9671:3898":{"crate_id":17,"path":["object","read","elf","note","NoteIterator"],"kind":"struct"},"16:6294:3573":{"crate_id":16,"path":["gimli","read","index","UnitIndexSectionIterator"],"kind":"struct"},"1:1823:8059":{"crate_id":1,"path":["std","env","Vars"],"kind":"struct"},"1:12356:1745":{"crate_id":1,"path":["std","str"],"kind":"primitive"},"2:10845:2327":{"crate_id":2,"path":["core","str","iter","SplitInclusive"],"kind":"struct"},"16:6188:3625":{"crate_id":16,"path":["gimli","read","aranges","ArangeHeader"],"kind":"struct"},"17:13436:50092":{"crate_id":17,"path":["object","pe","ImageEnclaveConfig64"],"kind":"struct"},"2:52611:2784":{"crate_id":2,"path":["core","core_arch","simd","u8x32"],"kind":"struct"},"2:50613:3021":{"crate_id":2,"path":["core","str","lossy","Utf8Chunks"],"kind":"struct"},"17:12349:49002":{"crate_id":17,"path":["object","macho","RelocationInfo"],"kind":"struct"},"18:609:60696":{"crate_id":18,"path":["memchr","memmem","twoway","Suffix"],"kind":"struct"},"17:11800:48837":{"crate_id":17,"path":["object","macho","SubLibraryCommand"],"kind":"struct"},"16:6571:3634":{"crate_id":16,"path":["gimli","read","line","CompleteLineProgram"],"kind":"struct"},"1:5884:2107":{"crate_id":1,"path":["std","sync","mpsc","SyncSender"],"kind":"struct"},"17:12022:48852":{"crate_id":17,"path":["object","macho","TwolevelHint"],"kind":"struct"},"2:2810:2345":{"crate_id":2,"path":["core","ops","bit","Shl"],"kind":"trait"},"1:716:7068":{"crate_id":1,"path":["std","backtrace","LazilyResolvedCapture"],"kind":"struct"},"6:5841:39515":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","sysinfo"],"kind":"struct"},"1:11200:118":{"crate_id":1,"path":["std","sys","unix","fs","DirBuilder"],"kind":"struct"},"5:5511:69":{"crate_id":5,"path":["alloc","sync","Arc"],"kind":"struct"},"1:9635:1929":{"crate_id":1,"path":["std","time","SystemTimeError"],"kind":"struct"},"2:9507:2322":{"crate_id":2,"path":["core","slice","iter","RSplitMut"],"kind":"struct"},"16:7850:3561":{"crate_id":16,"path":["gimli","read","unit","EntriesRaw"],"kind":"struct"},"6:4185:39607":{"crate_id":6,"path":["libc","unix","linux_like","linux","fsid_t"],"kind":"struct"},"2:21690:171":{"crate_id":2,"path":["core","num","nonzero","NonZeroU32"],"kind":"struct"},"12:762:1940":{"crate_id":12,"path":["hashbrown","map","DrainFilter"],"kind":"struct"},"1:7938:2272":{"crate_id":1,"path":["std","collections","hash","map","DefaultHasher"],"kind":"struct"},"16:7022:3817":{"crate_id":16,"path":["gimli","read","op","OperationEvaluationResult"],"kind":"enum"},"6:4534:39642":{"crate_id":6,"path":["libc","unix","linux_like","linux","in6_pktinfo"],"kind":"struct"},"2:2561:127":{"crate_id":2,"path":["core","error","Error"],"kind":"trait"},"1:9517:3640":{"crate_id":1,"path":["std","sync","mpmc","select","Operation"],"kind":"struct"},"16:4135:42682":{"crate_id":16,"path":["gimli","constants","DwAt"],"kind":"struct"},"17:8494:42233":{"crate_id":17,"path":["object","endian","LittleEndian"],"kind":"struct"},"17:3249:3962":{"crate_id":17,"path":["object","read","macho","relocation","MachORelocationIterator"],"kind":"struct"},"5:1348:2257":{"crate_id":5,"path":["alloc","collections","btree","map","IterMut"],"kind":"struct"},"18:531:4082":{"crate_id":18,"path":["memchr","memmem","prefilter","PrefilterState"],"kind":"struct"},"1:7140:51219":{"crate_id":1,"path":["std","sys_common","lazy_box","LazyBox"],"kind":"struct"},"2:51911:2762":{"crate_id":2,"path":["core","core_arch","simd","i8x8"],"kind":"struct"},"2:10575:3120":{"crate_id":2,"path":["core","slice","GetManyMutError"],"kind":"struct"},"2:54089:17845":{"crate_id":2,"path":["core","core_arch","x86","__m512d"],"kind":"struct"},"17:11054:44528":{"crate_id":17,"path":["object","elf","CompressionHeader32"],"kind":"struct"},"1:3310:1996":{"crate_id":1,"path":["std","io","stdio","IsTerminal"],"kind":"trait"},"12:393:59733":{"crate_id":12,"path":["hashbrown","raw","RawIterHashInner"],"kind":"struct"},"5:3350:2257":{"crate_id":5,"path":["alloc","collections","linked_list","IterMut"],"kind":"struct"},"16:7934:3557":{"crate_id":16,"path":["gimli","read","unit","DebugTypes"],"kind":"struct"},"1:7831:1870":{"crate_id":1,"path":["std","sealed","Sealed"],"kind":"trait"},"5:6732:1938":{"crate_id":5,"path":["alloc","collections","binary_heap","IntoIter"],"kind":"struct"},"5:7072:3181":{"crate_id":5,"path":["alloc","vec","splice","Splice"],"kind":"struct"},"17:8441:4014":{"crate_id":17,"path":["object","common","SymbolFlags"],"kind":"enum"},"6:5625:40289":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","timex"],"kind":"struct"},"2:2473:132":{"crate_id":2,"path":["core","convert","From"],"kind":"trait"},"5:620:57481":{"crate_id":5,"path":["alloc","boxed","from","StringError"],"kind":"struct"},"1:8724:10400":{"crate_id":1,"path":["std","os","linux","raw","arch","stat"],"kind":"struct"},"17:8871:43906":{"crate_id":17,"path":["object","read","any","SegmentIterator"],"kind":"struct"},"17:11161:44575":{"crate_id":17,"path":["object","elf","Rela32"],"kind":"struct"},"1:7832:2421":{"crate_id":1,"path":["std","thread","local","AccessError"],"kind":"struct"},"2:7084:1855":{"crate_id":2,"path":["core","iter","traits","exact_size","ExactSizeIterator"],"kind":"trait"},"16:2984:3838":{"crate_id":16,"path":["gimli","common","DwoId"],"kind":"struct"},"6:646:36402":{"crate_id":6,"path":["libc","unix","linux_like","timezone"],"kind":"enum"},"2:46451:2998":{"crate_id":2,"path":["core","ops","range","Bound"],"kind":"enum"},"17:13231:50045":{"crate_id":17,"path":["object","pe","ImageLoadConfigDirectory32"],"kind":"struct"},"2:52163:2778":{"crate_id":2,"path":["core","core_arch","simd","u64x2"],"kind":"struct"},"2:49014:70":{"crate_id":2,"path":["core","fmt","rt","v1","Argument"],"kind":"struct"},"1:11351:2246":{"crate_id":1,"path":["std","sys","unix","process","process_common","ExitCode"],"kind":"struct"},"2:52287:2755":{"crate_id":2,"path":["core","core_arch","simd","i32x4"],"kind":"struct"},"2:56552:2957":{"crate_id":2,"path":["core","core_simd","swizzle","Which"],"kind":"enum"},"17:12768:49511":{"crate_id":17,"path":["object","pe","AnonObjectHeader"],"kind":"struct"},"6:4644:39656":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlmsghdr"],"kind":"struct"},"2:53783:2777":{"crate_id":2,"path":["core","core_arch","simd","u32x16"],"kind":"struct"},"1:11813:2216":{"crate_id":1,"path":["std","sys_common","net","LookupHost"],"kind":"struct"},"1:9328:1937":{"crate_id":1,"path":["std","sync","mpsc","Iter"],"kind":"struct"},"1:962:2261":{"crate_id":1,"path":["std","collections","hash","map","IntoKeys"],"kind":"struct"},"17:9857:3961":{"crate_id":17,"path":["object","read","macho","file","MachOFile"],"kind":"struct"},"2:56935:239":{"crate_id":2,"path":["core","core_simd","fmt","fmt","Wrapper"],"kind":"struct"},"16:2478:3827":{"crate_id":16,"path":["gimli","common","DebugLineStrOffset"],"kind":"struct"},"17:9223:43959":{"crate_id":17,"path":["object","read","archive","ArchiveKind"],"kind":"enum"},"16:7287:3649":{"crate_id":16,"path":["gimli","read","pubtypes","DebugPubTypes"],"kind":"struct"},"13:220:59741":{"crate_id":13,"path":["std_detect","detect","cache","Initializer"],"kind":"struct"},"2:46785:2715":{"crate_id":2,"path":["core","char","convert","CharTryFromError"],"kind":"struct"},"2:21624:173":{"crate_id":2,"path":["core","num","nonzero","NonZeroU8"],"kind":"struct"},"6:1707:2525":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_un"],"kind":"struct"},"2:8536:131":{"crate_id":2,"path":["core","fmt","Formatter"],"kind":"struct"},"6:4231:39612":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_event"],"kind":"struct"},"17:12337:4013":{"crate_id":17,"path":["object","macho","Relocation"],"kind":"struct"},"6:4565:39646":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_vm"],"kind":"struct"},"2:6797:57118":{"crate_id":2,"path":["core","iter","sources","from_generator","FromGenerator"],"kind":"struct"},"6:1654:37262":{"crate_id":6,"path":["libc","unix","linux_like","in6_rtmsg"],"kind":"struct"},"12:985:2268":{"crate_id":12,"path":["hashbrown","map","Entry"],"kind":"enum"},"2:46757:2712":{"crate_id":2,"path":["core","char","convert","ParseCharError"],"kind":"struct"},"2:21251:56943":{"crate_id":2,"path":["core","num","diy_float","Fp"],"kind":"struct"},"17:13184:50035":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation64"],"kind":"struct"},"2:52065:2783":{"crate_id":2,"path":["core","core_arch","simd","u8x16"],"kind":"struct"},"17:9501:3934":{"crate_id":17,"path":["object","read","elf","section","SectionTable"],"kind":"struct"},"6:1541:37252":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_in6"],"kind":"struct"},"1:4501:2521":{"crate_id":1,"path":["std","os","unix","net","datagram","UnixDatagram"],"kind":"struct"},"2:51686:56125":{"crate_id":2,"path":["core","core_arch","simd","i8x2"],"kind":"struct"},"16:7581:3571":{"crate_id":16,"path":["gimli","read","unit","UnitHeader"],"kind":"struct"},"17:10708:4012":{"crate_id":17,"path":["object","read","ObjectMap"],"kind":"struct"},"16:5503:3604":{"crate_id":16,"path":["gimli","read","cfi","SectionBaseAddresses"],"kind":"struct"},"2:47299:2388":{"crate_id":2,"path":["core","iter","adapters","zip","Zip"],"kind":"struct"},"2:2746:1907":{"crate_id":2,"path":["core","ops","arith","Mul"],"kind":"trait"},"2:4112:2140":{"crate_id":2,"path":["core","cell","Cell"],"kind":"struct"},"17:11087:44536":{"crate_id":17,"path":["object","elf","Sym32"],"kind":"struct"},"1:11512:51260":{"crate_id":1,"path":["std","sys","unix","thread","cgroups","Cgroup"],"kind":"enum"},"17:8418:3958":{"crate_id":17,"path":["object","common","SectionFlags"],"kind":"enum"},"1:9320:2246":{"crate_id":1,"path":["std","process","ExitCode"],"kind":"struct"},"2:48406:82":{"crate_id":2,"path":["core","sync","atomic","AtomicI32"],"kind":"struct"},"17:12251:48929":{"crate_id":17,"path":["object","macho","EntryPointCommand"],"kind":"struct"},"1:4320:2048":{"crate_id":1,"path":["std","os","unix","fs","DirBuilderExt"],"kind":"trait"},"2:21987:2972":{"crate_id":2,"path":["core","num","nonzero","NonZeroIsize"],"kind":"struct"},"1:5877:2106":{"crate_id":1,"path":["std","sync","mpsc","Sender"],"kind":"struct"},"1:9582:162":{"crate_id":1,"path":["std","sync","mutex","MutexGuard"],"kind":"struct"},"1:2378:2473":{"crate_id":1,"path":["std","fs","metadata"],"kind":"function"},"1:7005:2086":{"crate_id":1,"path":["std","std_float","StdFloat"],"kind":"trait"},"2:50003:2321":{"crate_id":2,"path":["core","str","iter","RSplit"],"kind":"struct"},"1:1605:1938":{"crate_id":1,"path":["std","collections","hash","set","IntoIter"],"kind":"struct"},"5:4988:57539":{"crate_id":5,"path":["alloc","slice","merge","MergeHole"],"kind":"struct"},"2:21888:166":{"crate_id":2,"path":["core","num","nonzero","NonZeroI32"],"kind":"struct"},"2:4658:1586":{"crate_id":2,"path":["core","ffi","c_void"],"kind":"enum"},"1:6778:2226":{"crate_id":1,"path":["std","sync","poison","TryLockError"],"kind":"enum"},"2:48093:1938":{"crate_id":2,"path":["core","option","IntoIter"],"kind":"struct"},"17:11606:48762":{"crate_id":17,"path":["object","macho","LcStr"],"kind":"struct"},"2:11637:56476":{"crate_id":2,"path":["core","future","join","MaybeDone"],"kind":"enum"},"1:3400:1978":{"crate_id":1,"path":["std","io","Read"],"kind":"trait"},"5:215:3204":{"crate_id":5,"path":["alloc","boxed","thin","ThinBox"],"kind":"struct"},"6:4247:39614":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_absinfo"],"kind":"struct"},"1:2573:2000":{"crate_id":1,"path":["std","io","buffered","bufwriter","BufWriter"],"kind":"struct"},"17:9844:4037":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCacheImage"],"kind":"struct"},"2:19960:2073":{"crate_id":2,"path":["core","core_simd","swizzle","reverse","Reverse"],"kind":"struct"},"2:48596:92":{"crate_id":2,"path":["core","sync","atomic","AtomicUsize"],"kind":"struct"},"6:6269:36279":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","sigaction"],"kind":"struct"},"16:6545:3563":{"crate_id":16,"path":["gimli","read","line","IncompleteLineProgram"],"kind":"struct"},"1:1935:2462":{"crate_id":1,"path":["std","error","Report"],"kind":"struct"},"19:0:991":{"crate_id":19,"path":["panic_unwind"],"kind":"module"},"17:9700:3975":{"crate_id":17,"path":["object","read","elf","hash","GnuHashTable"],"kind":"struct"},"2:47002:8580":{"crate_id":2,"path":["core","ffi","VaListImpl"],"kind":"struct"},"1:4399:2572":{"crate_id":1,"path":["std","os","unix","net","ancillary","AncillaryDataIter"],"kind":"struct"},"9:709:2184":{"crate_id":9,"path":["miniz_oxide","inflate","core","State"],"kind":"enum"},"17:10062:44100":{"crate_id":17,"path":["object","read","macho","segment","MachOSegmentIterator"],"kind":"struct"},"16:5941:189":{"crate_id":16,"path":["gimli","read","cfi","Pointer"],"kind":"enum"},"2:2795:1951":{"crate_id":2,"path":["core","ops","bit","BitAnd"],"kind":"trait"},"17:9805:4033":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCache"],"kind":"struct"},"1:7879:2432":{"crate_id":1,"path":["std","thread","Thread"],"kind":"struct"},"2:9265:1937":{"crate_id":2,"path":["core","slice","iter","Iter"],"kind":"struct"},"5:2968:1943":{"crate_id":5,"path":["alloc","collections","btree","set","SymmetricDifference"],"kind":"struct"},"5:3326:158":{"crate_id":5,"path":["alloc","collections","linked_list","LinkedList"],"kind":"struct"},"6:4239:39613":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_id"],"kind":"struct"},"6:5699:40294":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","seminfo"],"kind":"struct"},"16:4597:42856":{"crate_id":16,"path":["gimli","constants","DwCc"],"kind":"struct"},"17:9446:43979":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdatSectionIterator"],"kind":"struct"},"1:1617:1941":{"crate_id":1,"path":["std","collections","hash","set","Intersection"],"kind":"struct"},"6:6375:37188":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statfs64"],"kind":"struct"},"16:5450:3601":{"crate_id":16,"path":["gimli","read","cfi","EhFrame"],"kind":"struct"},"2:20274:1870":{"crate_id":2,"path":["core","core_simd","lane_count","sealed","Sealed"],"kind":"trait"},"16:2311:3528":{"crate_id":16,"path":["gimli","common","Register"],"kind":"struct"},"17:562:43898":{"crate_id":17,"path":["object","read","any","Symbol"],"kind":"struct"},"2:50284:2928":{"crate_id":2,"path":["core","str","iter","EscapeDebug"],"kind":"struct"},"18:491:60682":{"crate_id":18,"path":["memchr","cow","Imp"],"kind":"struct"},"17:10854:3973":{"crate_id":17,"path":["object","read","CompressionFormat"],"kind":"enum"},"6:6953:36316":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","not_x32","statvfs"],"kind":"struct"},"5:7055:1940":{"crate_id":5,"path":["alloc","vec","drain_filter","DrainFilter"],"kind":"struct"},"17:11106:44537":{"crate_id":17,"path":["object","elf","Sym64"],"kind":"struct"},"17:9274:43962":{"crate_id":17,"path":["object","read","archive","ArchiveMember"],"kind":"struct"},"6:513:36361":{"crate_id":6,"path":["libc","unix","rlimit"],"kind":"struct"},"1:4212:1867":{"crate_id":1,"path":["std","os","unix","ffi","os_str","OsStrExt"],"kind":"trait"},"2:46742:2339":{"crate_id":2,"path":["core","ascii","EscapeDefault"],"kind":"struct"},"12:119:3449":{"crate_id":12,"path":["hashbrown","raw","RawTable"],"kind":"struct"},"1:6308:51194":{"crate_id":1,"path":["std","sync","mpmc","list","Channel"],"kind":"struct"},"2:7020:133":{"crate_id":2,"path":["core","iter","traits","collect","FromIterator"],"kind":"trait"},"1:6869:55665":{"crate_id":1,"path":["std","sync","rwlock","fmt","LockedPlaceholder"],"kind":"struct"},"11:0:1714":{"crate_id":11,"path":["adler"],"kind":"module"},"2:20282:2089":{"crate_id":2,"path":["core","core_simd","lane_count","SupportedLaneCount"],"kind":"trait"},"6:7255:39803":{"crate_id":6,"path":["libc","unix","linux_like","linux","can_frame"],"kind":"struct"},"2:50089:2325":{"crate_id":2,"path":["core","str","iter","SplitN"],"kind":"struct"},"16:7413:3586":{"crate_id":16,"path":["gimli","read","rnglists","RawRange"],"kind":"struct"},"17:0:1719":{"crate_id":17,"path":["object"],"kind":"module"},"1:9382:2110":{"crate_id":1,"path":["std","sync","mpsc","TryRecvError"],"kind":"enum"},"2:49774:2309":{"crate_id":2,"path":["core","slice","iter","Chunks"],"kind":"struct"},"1:7945:8066":{"crate_id":1,"path":["std","env","VarError"],"kind":"enum"},"17:10434:44214":{"crate_id":17,"path":["object","read","pe","relocation","RelocationIterator"],"kind":"struct"},"2:47163:2384":{"crate_id":2,"path":["core","iter","adapters","intersperse","Intersperse"],"kind":"struct"},"17:9488:3889":{"crate_id":17,"path":["object","read","elf","segment","ElfSegment"],"kind":"struct"},"16:7189:3536":{"crate_id":16,"path":["gimli","read","op","Expression"],"kind":"struct"},"17:8368:3910":{"crate_id":17,"path":["object","common","FileFlags"],"kind":"enum"},"5:1385:2259":{"crate_id":5,"path":["alloc","collections","btree","map","Values"],"kind":"struct"},"17:9382:43977":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbolTable"],"kind":"struct"},"1:999:2267":{"crate_id":1,"path":["std","collections","hash","map","RawEntryBuilder"],"kind":"struct"},"2:48330:81":{"crate_id":2,"path":["core","sync","atomic","AtomicI16"],"kind":"struct"},"17:10490:44217":{"crate_id":17,"path":["object","read","pe","resource","ResourceName"],"kind":"struct"},"16:7825:3654":{"crate_id":16,"path":["gimli","read","unit","AttrsIter"],"kind":"struct"},"18:719:4073":{"crate_id":18,"path":["memchr","memmem","NeedleInfo"],"kind":"struct"},"5:2730:57542":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Mut"],"kind":"struct"},"2:51963:2754":{"crate_id":2,"path":["core","core_arch","simd","i32x2"],"kind":"struct"},"6:5534:40283":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","cmsghdr"],"kind":"struct"},"2:50755:121":{"crate_id":2,"path":["core","time","Duration"],"kind":"struct"},"6:4559:39645":{"crate_id":6,"path":["libc","unix","linux_like","linux","fanotify_response"],"kind":"struct"},"2:39262:2098":{"crate_id":2,"path":["core","convert","Infallible"],"kind":"enum"},"2:52847:2764":{"crate_id":2,"path":["core","core_arch","simd","i8x32"],"kind":"struct"},"1:8405:1986":{"crate_id":1,"path":["std","io","Take"],"kind":"struct"},"12:1840:1939":{"crate_id":12,"path":["hashbrown","set","Drain"],"kind":"struct"},"1:5005:1880":{"crate_id":1,"path":["std","os","fd","raw","AsRawFd"],"kind":"trait"},"6:4629:39654":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_fprog"],"kind":"struct"},"6:560:36366":{"crate_id":6,"path":["libc","unix","pollfd"],"kind":"struct"},"12:815:2263":{"crate_id":12,"path":["hashbrown","map","RawEntryBuilderMut"],"kind":"struct"},"2:49318:143":{"crate_id":2,"path":["core","hash","sip","Hasher"],"kind":"struct"},"12:738:2259":{"crate_id":12,"path":["hashbrown","map","Values"],"kind":"struct"},"1:9462:2451":{"crate_id":1,"path":["std","sync","mpmc","context","Inner"],"kind":"struct"},"5:6989:3125":{"crate_id":5,"path":["alloc","string","FromUtf8Error"],"kind":"struct"},"16:2921:3529":{"crate_id":16,"path":["gimli","common","SectionId"],"kind":"enum"},"1:8313:2021":{"crate_id":1,"path":["std","io","readbuf","BorrowedCursor"],"kind":"struct"},"1:2898:205":{"crate_id":1,"path":["std","io","error","Result"],"kind":"typedef"},"1:9292:2244":{"crate_id":1,"path":["std","process","ExitStatus"],"kind":"struct"},"6:1722:37269":{"crate_id":6,"path":["libc","unix","linux_like","utsname"],"kind":"struct"},"1:12351:1741":{"crate_id":1,"path":["std","unit"],"kind":"primitive"},"17:10670:4016":{"crate_id":17,"path":["object","read","SymbolMap"],"kind":"struct"},"2:2974:2335":{"crate_id":2,"path":["core","ops","index","IndexMut"],"kind":"trait"},"2:51981:56069":{"crate_id":2,"path":["core","core_arch","simd","i64x1"],"kind":"struct"},"1:8353:2019":{"crate_id":1,"path":["std","io","util","Sink"],"kind":"struct"},"1:7907:7062":{"crate_id":1,"path":["std","backtrace","BacktraceStatus"],"kind":"enum"},"16:6506:3633":{"crate_id":16,"path":["gimli","read","line","LineProgramHeader"],"kind":"struct"},"5:2726:57540":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Immut"],"kind":"struct"},"9:863:3279":{"crate_id":9,"path":["miniz_oxide","MZFlush"],"kind":"enum"},"5:3417:57495":{"crate_id":5,"path":["alloc","collections","linked_list","drop","DropGuard"],"kind":"struct"},"17:10546:43913":{"crate_id":17,"path":["object","read","FileKind"],"kind":"enum"},"17:9738:3979":{"crate_id":17,"path":["object","read","elf","version","VersionTable"],"kind":"struct"},"2:9590:2324":{"crate_id":2,"path":["core","slice","iter","RSplitNMut"],"kind":"struct"},"2:47510:2018":{"crate_id":2,"path":["core","iter","sources","repeat","Repeat"],"kind":"struct"},"17:11485:48652":{"crate_id":17,"path":["object","macho","DyldCacheMappingInfo"],"kind":"struct"},"16:7461:3555":{"crate_id":16,"path":["gimli","read","str","DebugStrOffsets"],"kind":"struct"},"1:8573:2120":{"crate_id":1,"path":["std","net","socket_addr","SocketAddr"],"kind":"enum"},"16:6230:3627":{"crate_id":16,"path":["gimli","read","aranges","ArangeEntry"],"kind":"struct"},"2:50708:2940":{"crate_id":2,"path":["core","str","CharEscapeUnicode"],"kind":"struct"},"2:4332:2064":{"crate_id":2,"path":["core","cell","UnsafeCell"],"kind":"struct"},"1:11190:129":{"crate_id":1,"path":["std","sys","unix","fs","FileType"],"kind":"struct"},"5:1230:2271":{"crate_id":5,"path":["alloc","collections","btree","map","entry","OccupiedError"],"kind":"struct"},"12:1859:1942":{"crate_id":12,"path":["hashbrown","set","Difference"],"kind":"struct"},"2:47519:31070":{"crate_id":2,"path":["core","iter","sources","repeat_n","RepeatN"],"kind":"struct"},"2:9108:1870":{"crate_id":2,"path":["core","slice","index","private_slice_index","Sealed"],"kind":"trait"},"2:39302:1896":{"crate_id":2,"path":["core","error","Source"],"kind":"struct"},"1:3150:2497":{"crate_id":1,"path":["std","io","stdio","StdinRaw"],"kind":"struct"},"17:12860:49559":{"crate_id":17,"path":["object","pe","ImageSymbolEx"],"kind":"struct"},"6:4367:39629":{"crate_id":6,"path":["libc","unix","linux_like","linux","dl_phdr_info"],"kind":"struct"},"5:3337:1937":{"crate_id":5,"path":["alloc","collections","linked_list","Iter"],"kind":"struct"},"16:7276:3648":{"crate_id":16,"path":["gimli","read","pubtypes","PubTypesEntry"],"kind":"struct"},"1:3156:2499":{"crate_id":1,"path":["std","io","stdio","StderrRaw"],"kind":"struct"},"17:13279:50046":{"crate_id":17,"path":["object","pe","ImageLoadConfigDirectory64"],"kind":"struct"},"1:4968:1876":{"crate_id":1,"path":["std","os","linux","process","CommandExt"],"kind":"trait"},"6:5835:40328":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","sigset_t"],"kind":"struct"},"1:11897:2519":{"crate_id":1,"path":["std","sys_common","net","UdpSocket"],"kind":"struct"},"16:6149:3594":{"crate_id":16,"path":["gimli","read","abbrev","AttributeSpecification"],"kind":"struct"},"2:50963:156":{"crate_id":2,"path":["core","alloc","layout","Layout"],"kind":"struct"},"14:7:42157":{"crate_id":14,"path":["rustc_demangle","legacy","Demangle"],"kind":"struct"},"1:11416:51196":{"crate_id":1,"path":["std","sys","unix","process","process_inner","do_exec","Reset"],"kind":"struct"},"6:4706:39663":{"crate_id":6,"path":["libc","unix","linux_like","linux","dirent"],"kind":"struct"},"17:10075:44098":{"crate_id":17,"path":["object","read","macho","segment","MachOSegment"],"kind":"struct"},"6:4200:39609":{"crate_id":6,"path":["libc","unix","linux_like","linux","cpu_set_t"],"kind":"struct"},"17:12485:49401":{"crate_id":17,"path":["object","pe","ImageDosHeader"],"kind":"struct"},"6:4361:39628":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_abs_setup"],"kind":"struct"},"1:12192:51200":{"crate_id":1,"path":["std","backtrace_rs","symbolize","gimli","mmap","Mmap"],"kind":"struct"},"2:20402:1870":{"crate_id":2,"path":["core","core_simd","masks","to_bitmask","sealed","Sealed"],"kind":"trait"},"17:10350:3909":{"crate_id":17,"path":["object","read","pe","export","Export"],"kind":"struct"},"1:5165:2117":{"crate_id":1,"path":["std","os","net","linux_ext","addr","SocketAddrExt"],"kind":"trait"},"2:2273:124":{"crate_id":2,"path":["core","cmp","Eq"],"kind":"trait"},"2:2830:2355":{"crate_id":2,"path":["core","ops","bit","BitXorAssign"],"kind":"trait"},"2:50992:2418":{"crate_id":2,"path":["core","alloc","AllocError"],"kind":"struct"},"6:6524:40716":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","shmid_ds"],"kind":"struct"},"17:8137:43899":{"crate_id":17,"path":["object","common","BinaryFormat"],"kind":"enum"},"2:38106:2073":{"crate_id":2,"path":["core","cmp","Reverse"],"kind":"struct"},"2:2656:219":{"crate_id":2,"path":["core","marker","StructuralEq"],"kind":"trait"},"2:50153:2920":{"crate_id":2,"path":["core","str","iter","RMatchIndices"],"kind":"struct"},"1:4890:2044":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt"],"kind":"trait"},"2:20233:1870":{"crate_id":2,"path":["core","core_simd","elements","sealed","Sealed"],"kind":"trait"},"1:6633:55665":{"crate_id":1,"path":["std","sync","mutex","fmt","LockedPlaceholder"],"kind":"struct"},"1:5344:55661":{"crate_id":1,"path":["std","path","fmt","DebugHelper"],"kind":"struct"},"1:9414:2112":{"crate_id":1,"path":["std","sync","mpsc","TrySendError"],"kind":"enum"},"6:6293:36238":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","flock"],"kind":"struct"},"17:10139:3936":{"crate_id":17,"path":["object","read","macho","symbol","SymbolTable"],"kind":"struct"},"2:54104:17846":{"crate_id":2,"path":["core","core_arch","x86","__m128bh"],"kind":"struct"},"2:2657:108":{"crate_id":2,"path":["core","marker","Copy"],"kind":"trait"},"1:9369:2109":{"crate_id":1,"path":["std","sync","mpsc","RecvError"],"kind":"struct"},"2:52018:56076":{"crate_id":2,"path":["core","core_arch","simd","f64x1"],"kind":"struct"},"17:12964:49961":{"crate_id":17,"path":["object","pe","ImageLinenumber"],"kind":"struct"},"2:2826:2353":{"crate_id":2,"path":["core","ops","bit","BitOrAssign"],"kind":"trait"},"17:9317:4026":{"crate_id":17,"path":["object","read","coff","section","CoffSegmentIterator"],"kind":"struct"},"1:9274:2242":{"crate_id":1,"path":["std","process","CommandArgs"],"kind":"struct"},"1:8939:1937":{"crate_id":1,"path":["std","path","Iter"],"kind":"struct"},"1:6670:2287":{"crate_id":1,"path":["std","sync","once","Once"],"kind":"struct"},"17:12118:48859":{"crate_id":17,"path":["object","macho","EncryptionInfoCommand64"],"kind":"struct"},"17:12176:48876":{"crate_id":17,"path":["object","macho","DyldInfoCommand"],"kind":"struct"},"1:9398:2111":{"crate_id":1,"path":["std","sync","mpsc","RecvTimeoutError"],"kind":"enum"},"6:6430:40711":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_fpstate"],"kind":"struct"},"17:8272:4018":{"crate_id":17,"path":["object","common","SymbolScope"],"kind":"enum"},"6:6554:40719":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user_fpregs_struct"],"kind":"struct"},"2:21224:2803":{"crate_id":2,"path":["core","num","dec2flt","ParseFloatError"],"kind":"struct"},"17:8510:42232":{"crate_id":17,"path":["object","endian","BigEndian"],"kind":"struct"},"16:7868:3560":{"crate_id":16,"path":["gimli","read","unit","EntriesCursor"],"kind":"struct"},"17:12148:48861":{"crate_id":17,"path":["object","macho","BuildVersionCommand"],"kind":"struct"},"6:6392:37191":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statvfs64"],"kind":"struct"},"16:6654:3551":{"crate_id":16,"path":["gimli","read","loclists","DebugLoc"],"kind":"struct"},"17:9791:44023":{"crate_id":17,"path":["object","read","elf","version","VernauxIterator"],"kind":"struct"},"1:12372:1759":{"crate_id":1,"path":["std","isize"],"kind":"primitive"},"16:6843:3864":{"crate_id":16,"path":["gimli","read","lookup","PubStuffParser"],"kind":"struct"},"12:646:2257":{"crate_id":12,"path":["hashbrown","map","IterMut"],"kind":"struct"},"5:1415:2262":{"crate_id":5,"path":["alloc","collections","btree","map","IntoValues"],"kind":"struct"},"5:768:96":{"crate_id":5,"path":["alloc","collections","binary_heap","BinaryHeap"],"kind":"struct"},"6:4611:39652":{"crate_id":6,"path":["libc","unix","linux_like","linux","j1939_filter"],"kind":"struct"},"2:11664:187":{"crate_id":2,"path":["core","future","pending","Pending"],"kind":"struct"},"2:2775:1921":{"crate_id":2,"path":["core","ops","arith","MulAssign"],"kind":"trait"},"2:10589:3081":{"crate_id":2,"path":["core","str","converts","from_utf8"],"kind":"function"},"16:5959:3805":{"crate_id":16,"path":["gimli","read","cfi","PointerEncodingParameters"],"kind":"struct"},"2:3891:1970":{"crate_id":2,"path":["core","array","Guard"],"kind":"struct"},"1:10747:2243":{"crate_id":1,"path":["std","sys","unix","process","process_common","Stdio"],"kind":"enum"},"1:2396:2479":{"crate_id":1,"path":["std","fs","canonicalize"],"kind":"function"},"2:8595:2131":{"crate_id":2,"path":["core","fmt","UpperExp"],"kind":"trait"},"1:7922:7065":{"crate_id":1,"path":["std","backtrace","RawFrame"],"kind":"enum"},"18:736:4075":{"crate_id":18,"path":["memchr","memmem","SearcherKind"],"kind":"enum"},"6:135:36045":{"crate_id":6,"path":["libc","unix","fpos_t"],"kind":"enum"},"1:10969:2432":{"crate_id":1,"path":["std","sys","unix","thread","Thread"],"kind":"struct"},"2:7822:2633":{"crate_id":2,"path":["core","panicking","assert_matches_failed","Pattern"],"kind":"struct"},"17:1962:3974":{"crate_id":17,"path":["object","read","elf","relocation","ElfSectionRelocationIterator"],"kind":"struct"},"2:2722:2061":{"crate_id":2,"path":["core","marker","Tuple"],"kind":"trait"},"2:48254:84":{"crate_id":2,"path":["core","sync","atomic","AtomicI8"],"kind":"struct"},"18:727:4074":{"crate_id":18,"path":["memchr","memmem","SearcherConfig"],"kind":"struct"},"5:1301:94":{"crate_id":5,"path":["alloc","collections","btree","map","BTreeMap"],"kind":"struct"},"2:51880:56059":{"crate_id":2,"path":["core","core_arch","simd","u64x1"],"kind":"struct"},"16:2816:3835":{"crate_id":16,"path":["gimli","common","DebugTypeSignature"],"kind":"struct"},"2:51666:55985":{"crate_id":2,"path":["core","core_arch","simd","u8x2"],"kind":"struct"},"5:3721:1939":{"crate_id":5,"path":["alloc","collections","vec_deque","drain","Drain"],"kind":"struct"},"17:10088:44099":{"crate_id":17,"path":["object","read","macho","segment","MachOSegmentInternal"],"kind":"struct"},"2:2783:1925":{"crate_id":2,"path":["core","ops","arith","RemAssign"],"kind":"trait"},"2:50293:2339":{"crate_id":2,"path":["core","str","iter","EscapeDefault"],"kind":"struct"},"2:49929:3016":{"crate_id":2,"path":["core","str","error","Utf8Error"],"kind":"struct"},"1:1808:592":{"crate_id":1,"path":["std","env"],"kind":"module"},"2:53185:2765":{"crate_id":2,"path":["core","core_arch","simd","i8x64"],"kind":"struct"},"2:4177:202":{"crate_id":2,"path":["core","cell","RefCell"],"kind":"struct"},"1:3228:2013":{"crate_id":1,"path":["std","io","stdio","StdoutLock"],"kind":"struct"},"1:8797:2174":{"crate_id":1,"path":["std","path","Prefix"],"kind":"enum"},"2:2900:1992":{"crate_id":2,"path":["core","ops","deref","DerefMut"],"kind":"trait"},"16:3707:42302":{"crate_id":16,"path":["gimli","constants","DwChildren"],"kind":"struct"},"1:6702:2285":{"crate_id":1,"path":["std","sync","once_lock","OnceLock"],"kind":"struct"},"16:7350:3868":{"crate_id":16,"path":["gimli","read","rnglists","RangeListsFormat"],"kind":"enum"},"1:625:2336":{"crate_id":1,"path":["std","ascii","AsciiExt"],"kind":"trait"},"12:632:1937":{"crate_id":12,"path":["hashbrown","map","Iter"],"kind":"struct"},"5:6814:1938":{"crate_id":5,"path":["alloc","collections","linked_list","IntoIter"],"kind":"struct"},"17:10360:4046":{"crate_id":17,"path":["object","read","pe","export","ExportTable"],"kind":"struct"},"17:11893:48843":{"crate_id":17,"path":["object","macho","SymtabCommand"],"kind":"struct"},"5:5199:3185":{"crate_id":5,"path":["alloc","string","retain","SetLenOnDrop"],"kind":"struct"},"12:353:3446":{"crate_id":12,"path":["hashbrown","raw","RawDrain"],"kind":"struct"},"6:4286:39619":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_envelope"],"kind":"struct"},"2:3302:68":{"crate_id":2,"path":["core","any","Any"],"kind":"trait"},"6:5541:40284":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","termios"],"kind":"struct"},"17:12674:49460":{"crate_id":17,"path":["object","pe","ImageRomOptionalHeader"],"kind":"struct"},"16:2252:3810":{"crate_id":16,"path":["gimli","common","Format"],"kind":"enum"},"5:1933:2447":{"crate_id":5,"path":["alloc","collections","btree","mem","replace","PanicGuard"],"kind":"struct"},"2:49803:2312":{"crate_id":2,"path":["core","slice","iter","ChunksExactMut"],"kind":"struct"},"2:47183:2391":{"crate_id":2,"path":["core","iter","adapters","map_while","MapWhile"],"kind":"struct"},"1:11145:51399":{"crate_id":1,"path":["std","sys","unix","fs","FileAttr"],"kind":"struct"},"1:4308:2045":{"crate_id":1,"path":["std","os","unix","fs","DirEntryExt"],"kind":"trait"},"1:1886:8078":{"crate_id":1,"path":["std","env","ArgsOs"],"kind":"struct"},"2:56922:239":{"crate_id":2,"path":["core","core_simd","fmt","fmt","Wrapper"],"kind":"struct"},"2:3939:2789":{"crate_id":2,"path":["core","asserting","TryCaptureWithoutDebug"],"kind":"struct"},"16:4536:42843":{"crate_id":16,"path":["gimli","constants","DwAddr"],"kind":"struct"},"12:2069:2269":{"crate_id":12,"path":["hashbrown","set","OccupiedEntry"],"kind":"struct"},"2:21259:56111":{"crate_id":2,"path":["core","num","flt2dec","decoder","Decoded"],"kind":"struct"},"16:7366:3568":{"crate_id":16,"path":["gimli","read","rnglists","RawRngListIter"],"kind":"struct"},"2:11603:135":{"crate_id":2,"path":["core","future","future","Future"],"kind":"trait"},"17:8941:43907":{"crate_id":17,"path":["object","read","any","SectionIterator"],"kind":"struct"},"17:11288:44750":{"crate_id":17,"path":["object","elf","Verdaux"],"kind":"struct"},"17:8110:43892":{"crate_id":17,"path":["object","common","AddressSize"],"kind":"enum"},"2:53391:2785":{"crate_id":2,"path":["core","core_arch","simd","u8x64"],"kind":"struct"},"1:12368:1755":{"crate_id":1,"path":["std","u16"],"kind":"primitive"},"17:12046:48854":{"crate_id":17,"path":["object","macho","UuidCommand"],"kind":"struct"},"17:10921:44345":{"crate_id":17,"path":["object","archive","Header"],"kind":"struct"},"1:6209:2106":{"crate_id":1,"path":["std","sync","mpmc","counter","Sender"],"kind":"struct"},"1:1473:142":{"crate_id":1,"path":["std","collections","hash","set","HashSet"],"kind":"struct"},"17:13557:50129":{"crate_id":17,"path":["object","pe","NonPagedDebugInfo"],"kind":"struct"},"16:7307:3651":{"crate_id":16,"path":["gimli","read","rnglists","DebugRanges"],"kind":"struct"},"5:5894:57511":{"crate_id":5,"path":["alloc","vec","drain_filter","drop","BackshiftOnDrop"],"kind":"struct"},"12:1872:1944":{"crate_id":12,"path":["hashbrown","set","Union"],"kind":"struct"},"2:21:660":{"crate_id":2,"path":["core","format_args"],"kind":"macro"},"2:46524:2141":{"crate_id":2,"path":["core","any","tags","Ref"],"kind":"struct"},"2:46310:2690":{"crate_id":2,"path":["core","ops","index_range","IndexRange"],"kind":"struct"},"2:21147:56126":{"crate_id":2,"path":["core","num","dec2flt","common","AsciiStr"],"kind":"struct"},"2:21184:56782":{"crate_id":2,"path":["core","num","dec2flt","decimal","Decimal"],"kind":"struct"},"12:834:2265":{"crate_id":12,"path":["hashbrown","map","RawOccupiedEntryMut"],"kind":"struct"},"17:9433:43973":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdat"],"kind":"struct"},"12:0:1715":{"crate_id":12,"path":["hashbrown"],"kind":"module"},"17:9193:60659":{"crate_id":17,"path":["object","read","any","SectionRelocationIteratorInternal"],"kind":"enum"},"6:495:36358":{"crate_id":6,"path":["libc","unix","utimbuf"],"kind":"struct"},"2:50593:3020":{"crate_id":2,"path":["core","str","lossy","Utf8Chunk"],"kind":"struct"},"6:608:36373":{"crate_id":6,"path":["libc","unix","protoent"],"kind":"struct"},"2:53721:2757":{"crate_id":2,"path":["core","core_arch","simd","i32x16"],"kind":"struct"},"1:3343:2018":{"crate_id":1,"path":["std","io","util","Repeat"],"kind":"struct"},"1:8418:1989":{"crate_id":1,"path":["std","io","Split"],"kind":"struct"},"16:2380:3822":{"crate_id":16,"path":["gimli","common","DebugAddrIndex"],"kind":"struct"},"2:20323:2600":{"crate_id":2,"path":["core","core_simd","masks","mask_impl","Mask"],"kind":"struct"},"2:2767:1917":{"crate_id":2,"path":["core","ops","arith","AddAssign"],"kind":"trait"},"17:10532:127":{"crate_id":17,"path":["object","read","Error"],"kind":"struct"},"17:11368:44770":{"crate_id":17,"path":["object","elf","GnuHashHeader"],"kind":"struct"},"1:5223:10406":{"crate_id":1,"path":["std","panic","always_abort"],"kind":"function"},"2:52689:2772":{"crate_id":2,"path":["core","core_arch","simd","u16x16"],"kind":"struct"},"2:46846:2339":{"crate_id":2,"path":["core","char","EscapeDefault"],"kind":"struct"},"2:4186:2856":{"crate_id":2,"path":["core","cell","BorrowMutError"],"kind":"struct"},"6:5782:40301":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","utmpx"],"kind":"struct"},"17:13148:50010":{"crate_id":17,"path":["object","pe","ImageResourceDataEntry"],"kind":"struct"},"1:675:7064":{"crate_id":1,"path":["std","backtrace","BacktraceFrame"],"kind":"struct"},"2:47269:1986":{"crate_id":2,"path":["core","iter","adapters","take","Take"],"kind":"struct"},"5:2734:57541":{"crate_id":5,"path":["alloc","collections","btree","node","marker","ValMut"],"kind":"struct"},"1:5060:1884":{"crate_id":1,"path":["std","os","fd","owned","OwnedFd"],"kind":"struct"},"17:11528:44132":{"crate_id":17,"path":["object","macho","FatHeader"],"kind":"struct"},"1:9504:52313":{"crate_id":1,"path":["std","sync","mpmc","list","ListToken"],"kind":"struct"},"2:52379:2744":{"crate_id":2,"path":["core","core_arch","simd","f64x4"],"kind":"struct"},"6:4621:39653":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_filter"],"kind":"struct"},"5:3898:1937":{"crate_id":5,"path":["alloc","collections","vec_deque","iter","Iter"],"kind":"struct"},"1:9552:50995":{"crate_id":1,"path":["std","sync","mpmc","utils","CachePadded"],"kind":"struct"},"16:7545:3574":{"crate_id":16,"path":["gimli","read","unit","UnitType"],"kind":"enum"},"17:11174:44576":{"crate_id":17,"path":["object","elf","Rel64"],"kind":"struct"},"2:46799:3106":{"crate_id":2,"path":["core","char","decode","DecodeUtf16"],"kind":"struct"},"1:7928:1955":{"crate_id":1,"path":["std","collections","hash","map","RandomState"],"kind":"struct"},"6:1550:37253":{"crate_id":6,"path":["libc","unix","linux_like","addrinfo"],"kind":"struct"},"1:410:51204":{"crate_id":1,"path":["std","thread","local","fast","Key"],"kind":"struct"},"1:11320:8073":{"crate_id":1,"path":["std","sys","unix","os","JoinPathsError"],"kind":"struct"},"2:50207:2923":{"crate_id":2,"path":["core","str","iter","RMatches"],"kind":"struct"},"5:6763:57607":{"crate_id":5,"path":["alloc","collections","btree","merge_iter","Peeked"],"kind":"enum"},"2:1642:2702":{"crate_id":2,"path":["core","mem","Discriminant"],"kind":"struct"},"2:49540:3122":{"crate_id":2,"path":["core","slice","ascii","EscapeByte"],"kind":"struct"},"17:11343:44756":{"crate_id":17,"path":["object","elf","NoteHeader64"],"kind":"struct"},"17:11873:48842":{"crate_id":17,"path":["object","macho","RoutinesCommand64"],"kind":"struct"},"18:652:60680":{"crate_id":18,"path":["memchr","memmem","x86","sse","Forward"],"kind":"struct"},"6:4461:39636":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Shdr"],"kind":"struct"},"2:50107:2323":{"crate_id":2,"path":["core","str","iter","RSplitN"],"kind":"struct"},"2:8579:111":{"crate_id":2,"path":["core","fmt","macros","Debug"],"kind":"proc_derive"},"2:46263:2683":{"crate_id":2,"path":["core","ops","generator","GeneratorState"],"kind":"enum"},"1:9306:2245":{"crate_id":1,"path":["std","process","ExitStatusError"],"kind":"struct"},"5:6288:3185":{"crate_id":5,"path":["alloc","vec","set_len_on_drop","SetLenOnDrop"],"kind":"struct"},"1:6597:161":{"crate_id":1,"path":["std","sync","mutex","Mutex"],"kind":"struct"},"2:49814:2301":{"crate_id":2,"path":["core","slice","iter","ArrayWindows"],"kind":"struct"},"17:12980:49989":{"crate_id":17,"path":["object","pe","ImageArchiveMemberHeader"],"kind":"struct"},"18:548:139":{"crate_id":18,"path":["memchr","memmem","rabinkarp","Hash"],"kind":"struct"},"16:2696:3831":{"crate_id":16,"path":["gimli","common","DebugRngListsIndex"],"kind":"struct"},"16:3557:42248":{"crate_id":16,"path":["gimli","constants","DwSect"],"kind":"struct"},"5:2244:3236":{"crate_id":5,"path":["alloc","collections","btree","node","NodeRef"],"kind":"struct"},"17:8814:128":{"crate_id":17,"path":["object","read","any","File"],"kind":"struct"},"2:50302:2929":{"crate_id":2,"path":["core","str","iter","EscapeUnicode"],"kind":"struct"},"17:8475:3890":{"crate_id":17,"path":["object","endian","Endianness"],"kind":"enum"},"9:956:3277":{"crate_id":9,"path":["miniz_oxide","DataFormat"],"kind":"enum"},"2:19973:57134":{"crate_id":2,"path":["core","core_simd","swizzle","rotate_lanes_left","Rotate"],"kind":"struct"},"16:7615:3559":{"crate_id":16,"path":["gimli","read","unit","DebuggingInformationEntry"],"kind":"struct"},"5:4014:238":{"crate_id":5,"path":["alloc","collections","vec_deque","VecDeque"],"kind":"struct"},"16:6632:3636":{"crate_id":16,"path":["gimli","read","line","FileEntryFormat"],"kind":"struct"},"17:13340:50048":{"crate_id":17,"path":["object","pe","ImageHotPatchBase"],"kind":"struct"},"2:21375:2985":{"crate_id":2,"path":["core","num","error","IntErrorKind"],"kind":"enum"},"5:1033:58015":{"crate_id":5,"path":["alloc","collections","btree","append","MergeIter"],"kind":"struct"},"2:8593:2130":{"crate_id":2,"path":["core","fmt","LowerExp"],"kind":"trait"},"2:9576:2326":{"crate_id":2,"path":["core","slice","iter","SplitNMut"],"kind":"struct"},"17:10822:43915":{"crate_id":17,"path":["object","read","RelocationTarget"],"kind":"enum"},"10:0:1713":{"crate_id":10,"path":["rustc_std_workspace_alloc"],"kind":"module"},"1:8608:2213":{"crate_id":1,"path":["std","net","socket_addr","SocketAddrV6"],"kind":"struct"},"2:48102:3009":{"crate_id":2,"path":["core","panic","location","Location"],"kind":"struct"},"2:50980:2420":{"crate_id":2,"path":["core","alloc","layout","LayoutError"],"kind":"struct"},"6:1701:37267":{"crate_id":6,"path":["libc","unix","linux_like","epoll_event"],"kind":"struct"},"2:38089:178":{"crate_id":2,"path":["core","cmp","Ordering"],"kind":"enum"},"1:8560:2569":{"crate_id":1,"path":["std","net","parser","AddrParseError"],"kind":"struct"},"2:49020:130":{"crate_id":2,"path":["core","fmt","rt","v1","FormatSpec"],"kind":"struct"},"2:6987:2386":{"crate_id":2,"path":["core","iter","traits","accum","Product"],"kind":"trait"},"17:12609:49404":{"crate_id":17,"path":["object","pe","MaskedRichHeaderEntry"],"kind":"struct"},"1:9587:212":{"crate_id":1,"path":["std","sync","rwlock","RwLockReadGuard"],"kind":"struct"},"1:2023:180":{"crate_id":1,"path":["std","ffi","os_str","OsString"],"kind":"struct"},"6:5480:40278":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","aiocb"],"kind":"struct"},"2:6549:2851":{"crate_id":2,"path":["core","iter","adapters","GenericShunt"],"kind":"struct"},"17:1931:3923":{"crate_id":17,"path":["object","read","elf","relocation","ElfDynamicRelocationIterator"],"kind":"struct"},"2:48558:85":{"crate_id":2,"path":["core","sync","atomic","AtomicIsize"],"kind":"struct"},"17:10476:44216":{"crate_id":17,"path":["object","read","pe","resource","ResourceDirectoryEntryData"],"kind":"enum"},"5:859:1937":{"crate_id":5,"path":["alloc","collections","binary_heap","Iter"],"kind":"struct"},"2:9118:216":{"crate_id":2,"path":["core","slice","index","SliceIndex"],"kind":"trait"},"16:5642:3609":{"crate_id":16,"path":["gimli","read","cfi","PartialFrameDescriptionEntry"],"kind":"struct"},"1:4013:2512":{"crate_id":1,"path":["std","net","tcp","TcpListener"],"kind":"struct"},"1:12354:1743":{"crate_id":1,"path":["std","array"],"kind":"primitive"},"2:49293:2071":{"crate_id":2,"path":["core","hash","sip","SipHasher13"],"kind":"struct"},"1:4902:51344":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt","st_mtime"],"kind":"foreign_type"},"1:1861:8071":{"crate_id":1,"path":["std","env","SplitPaths"],"kind":"struct"},"6:4635:39655":{"crate_id":6,"path":["libc","unix","linux_like","linux","seccomp_data"],"kind":"struct"},"17:13506:50125":{"crate_id":17,"path":["object","pe","ImageDebugMisc"],"kind":"struct"},"2:2915:1852":{"crate_id":2,"path":["core","ops","function","Fn"],"kind":"trait"},"6:7243:39801":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_mutex_t"],"kind":"struct"},"2:50736:3031":{"crate_id":2,"path":["core","time","Nanoseconds"],"kind":"struct"},"16:7215:3643":{"crate_id":16,"path":["gimli","read","op","OperationIter"],"kind":"struct"},"2:11899:138":{"crate_id":2,"path":["core","alloc","global","GlobalAlloc"],"kind":"trait"},"2:10734:2914":{"crate_id":2,"path":["core","str","iter","SplitInternal"],"kind":"struct"},"9:649:3323":{"crate_id":9,"path":["miniz_oxide","deflate","core","TDEFLStatus"],"kind":"enum"},"1:12316:52315":{"crate_id":1,"path":["std","backtrace_rs","symbolize","gimli","Cache"],"kind":"struct"},"17:9627:3932":{"crate_id":17,"path":["object","read","elf","relocation","RelocationSections"],"kind":"struct"},"5:3529:1940":{"crate_id":5,"path":["alloc","collections","linked_list","DrainFilter"],"kind":"struct"},"2:6502:2374":{"crate_id":2,"path":["core","iter","adapters","zip","TrustedRandomAccessNoCoerce"],"kind":"trait"},"2:3353:1898":{"crate_id":2,"path":["core","any","Provider"],"kind":"trait"},"1:10503:53967":{"crate_id":1,"path":["std","sys","unix","os","Env"],"kind":"struct"},"17:13192:50036":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation32V2"],"kind":"struct"},"8:0:1711":{"crate_id":8,"path":["cfg_if"],"kind":"module"},"1:683:7067":{"crate_id":1,"path":["std","backtrace","BytesOrWide"],"kind":"enum"},"16:5995:3620":{"crate_id":16,"path":["gimli","read","dwarf","DwarfPackage"],"kind":"struct"},"2:4258:2141":{"crate_id":2,"path":["core","cell","Ref"],"kind":"struct"},"17:11271:44743":{"crate_id":17,"path":["object","elf","Verdef"],"kind":"struct"},"16:4288:42763":{"crate_id":16,"path":["gimli","constants","DwLle"],"kind":"struct"},"6:5443:40221":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","statx"],"kind":"struct"},"1:8066:2469":{"crate_id":1,"path":["std","fs","FileTimes"],"kind":"struct"},"2:8853:2069":{"crate_id":2,"path":["core","hash","BuildHasherDefault"],"kind":"struct"},"2:52355:2743":{"crate_id":2,"path":["core","core_arch","simd","f64x2"],"kind":"struct"},"12:2053:2268":{"crate_id":12,"path":["hashbrown","set","Entry"],"kind":"enum"},"2:4:976":{"crate_id":2,"path":["core","panic"],"kind":"macro"},"18:624:60691":{"crate_id":18,"path":["memchr","memmem","twoway","SuffixOrdering"],"kind":"enum"},"16:6248:3546":{"crate_id":16,"path":["gimli","read","index","DebugCuIndex"],"kind":"struct"},"1:928:2259":{"crate_id":1,"path":["std","collections","hash","map","Values"],"kind":"struct"},"17:10875:3956":{"crate_id":17,"path":["object","read","CompressedFileRange"],"kind":"struct"},"17:2916:3950":{"crate_id":17,"path":["object","read","macho","section","MachOSectionIterator"],"kind":"struct"},"2:7718:2167":{"crate_id":2,"path":["core","panic","unwind_safe","RefUnwindSafe"],"kind":"trait"},"2:49793:2311":{"crate_id":2,"path":["core","slice","iter","ChunksExact"],"kind":"struct"},"6:4307:39622":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_condition_effect"],"kind":"struct"},"17:13059:49998":{"crate_id":17,"path":["object","pe","ImageTlsDirectory32"],"kind":"struct"},"5:6942:3206":{"crate_id":5,"path":["alloc","ffi","c_str","FromVecWithNulError"],"kind":"struct"},"1:8670:2120":{"crate_id":1,"path":["std","os","unix","net","addr","SocketAddr"],"kind":"struct"},"2:46748:28798":{"crate_id":2,"path":["core","async_iter","from_iter","FromIter"],"kind":"struct"},"17:13580:50136":{"crate_id":17,"path":["object","pe","ImportObjectHeader"],"kind":"struct"},"2:2432:2099":{"crate_id":2,"path":["core","convert","num","FloatToInt"],"kind":"trait"},"1:6834:211":{"crate_id":1,"path":["std","sync","rwlock","RwLock"],"kind":"struct"},"2:50481:2645":{"crate_id":2,"path":["core","str","pattern","CharSliceSearcher"],"kind":"struct"},"17:9764:44022":{"crate_id":17,"path":["object","read","elf","version","VerdauxIterator"],"kind":"struct"},"2:50720:2941":{"crate_id":2,"path":["core","str","IsAsciiWhitespace"],"kind":"struct"},"2:50704:2938":{"crate_id":2,"path":["core","str","CharEscapeDebugContinue"],"kind":"struct"},"1:8122:2001":{"crate_id":1,"path":["std","io","buffered","IntoInnerError"],"kind":"struct"},"1:8779:10407":{"crate_id":1,"path":["std","panic","BacktraceStyle"],"kind":"enum"},"5:1185:2268":{"crate_id":5,"path":["alloc","collections","btree","map","entry","Entry"],"kind":"enum"},"2:46429:198":{"crate_id":2,"path":["core","ops","range","RangeToInclusive"],"kind":"struct"},"1:12363:1750":{"crate_id":1,"path":["std","i16"],"kind":"primitive"},"16:2674:3830":{"crate_id":16,"path":["gimli","common","DebugRngListsBase"],"kind":"struct"},"17:13327:50047":{"crate_id":17,"path":["object","pe","ImageHotPatchInfo"],"kind":"struct"},"17:11576:48662":{"crate_id":17,"path":["object","macho","MachHeader64"],"kind":"struct"},"2:47012:8579":{"crate_id":2,"path":["core","ffi","VaList"],"kind":"struct"},"6:4726:39665":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_alg"],"kind":"struct"},"17:9873:44126":{"crate_id":17,"path":["object","read","macho","file","MachOComdatIterator"],"kind":"struct"},"1:8425:1990":{"crate_id":1,"path":["std","io","Lines"],"kind":"struct"},"2:48077:1937":{"crate_id":2,"path":["core","option","Iter"],"kind":"struct"},"2:47075:2375":{"crate_id":2,"path":["core","iter","adapters","cloned","Cloned"],"kind":"struct"},"2:52925:2752":{"crate_id":2,"path":["core","core_arch","simd","i16x16"],"kind":"struct"},"12:1628:59726":{"crate_id":12,"path":["hashbrown","scopeguard","ScopeGuard"],"kind":"struct"},"1:8488:2207":{"crate_id":1,"path":["std","net","ip_addr","Ipv6MulticastScope"],"kind":"enum"},"6:5510:40281":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","glob64_t"],"kind":"struct"},"6:6538:40717":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","seccomp_notif_sizes"],"kind":"struct"},"5:3548:57495":{"crate_id":5,"path":["alloc","collections","linked_list","drop","DropGuard"],"kind":"struct"},"2:50135:2919":{"crate_id":2,"path":["core","str","iter","MatchIndices"],"kind":"struct"},"2:49133:73":{"crate_id":2,"path":["core","fmt","Arguments"],"kind":"struct"},"17:13374:50085":{"crate_id":17,"path":["object","pe","ImageArm64RuntimeFunctionEntry"],"kind":"struct"},"1:8362:1981":{"crate_id":1,"path":["std","io","IoSlice"],"kind":"struct"},"1:12362:1749":{"crate_id":1,"path":["std","i8"],"kind":"primitive"},"2:10559:3118":{"crate_id":2,"path":["core","slice","SlicePattern"],"kind":"trait"},"17:10108:3953":{"crate_id":17,"path":["object","read","macho","section","MachOSection"],"kind":"struct"},"12:1065:3442":{"crate_id":12,"path":["hashbrown","map","KeyOrRef"],"kind":"enum"},"1:11134:1886":{"crate_id":1,"path":["std","sys","unix","fd","FileDesc"],"kind":"struct"},"17:11813:48838":{"crate_id":17,"path":["object","macho","PreboundDylibCommand"],"kind":"struct"},"6:4179:39606":{"crate_id":6,"path":["libc","unix","linux_like","linux","itimerspec"],"kind":"struct"},"12:853:2266":{"crate_id":12,"path":["hashbrown","map","RawVacantEntryMut"],"kind":"struct"},"18:614:60685":{"crate_id":18,"path":["memchr","memmem","twoway","SuffixKind"],"kind":"enum"},"2:47529:31071":{"crate_id":2,"path":["core","iter","sources","repeat_with","RepeatWith"],"kind":"struct"},"1:993:2266":{"crate_id":1,"path":["std","collections","hash","map","RawVacantEntryMut"],"kind":"struct"},"9:592:3321":{"crate_id":9,"path":["miniz_oxide","deflate","core","CompressionStrategy"],"kind":"enum"},"1:5756:2243":{"crate_id":1,"path":["std","process","Stdio"],"kind":"struct"},"1:8210:2004":{"crate_id":1,"path":["std","io","error","ErrorKind"],"kind":"enum"},"17:9401:43975":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbol"],"kind":"struct"},"1:7858:2450":{"crate_id":1,"path":["std","thread","ThreadId"],"kind":"struct"},"6:4745:39667":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_user_dev"],"kind":"struct"},"2:49853:2300":{"crate_id":2,"path":["core","slice","iter","ArrayChunksMut"],"kind":"struct"},"12:810:2260":{"crate_id":12,"path":["hashbrown","map","ValuesMut"],"kind":"struct"},"17:13071:49999":{"crate_id":17,"path":["object","pe","ImageImportDescriptor"],"kind":"struct"},"1:6537:201":{"crate_id":1,"path":["std","sync","mpmc","Receiver"],"kind":"struct"},"16:4510:42841":{"crate_id":16,"path":["gimli","constants","DwLang"],"kind":"struct"},"16:6682:3565":{"crate_id":16,"path":["gimli","read","loclists","LocationLists"],"kind":"struct"},"17:8055:3907":{"crate_id":17,"path":["object","common","Architecture"],"kind":"enum"},"17:12198:48925":{"crate_id":17,"path":["object","macho","LinkerOptionCommand"],"kind":"struct"},"1:6225:201":{"crate_id":1,"path":["std","sync","mpmc","counter","Receiver"],"kind":"struct"},"6:6981:41089":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","align","clone_args"],"kind":"struct"},"6:1580:37256":{"crate_id":6,"path":["libc","unix","linux_like","tm"],"kind":"struct"},"2:7024:148":{"crate_id":2,"path":["core","iter","traits","collect","IntoIterator"],"kind":"trait"},"12:444:140":{"crate_id":12,"path":["hashbrown","map","HashMap"],"kind":"struct"},"18:564:4084":{"crate_id":18,"path":["memchr","memmem","rarebytes","RareNeedleBytes"],"kind":"struct"},"2:11026:2633":{"crate_id":2,"path":["core","str","pattern","Pattern"],"kind":"trait"},"2:46517:56521":{"crate_id":2,"path":["core","any","tags","MaybeSizedValue"],"kind":"struct"},"5:2942:1942":{"crate_id":5,"path":["alloc","collections","btree","set","Difference"],"kind":"struct"},"2:54181:17849":{"crate_id":2,"path":["core","core_arch","x86","cpuid","CpuidResult"],"kind":"struct"},"18:644:60680":{"crate_id":18,"path":["memchr","memmem","x86","avx","nostd","Forward"],"kind":"struct"},"2:39298:3239":{"crate_id":2,"path":["core","error","private","Internal"],"kind":"struct"},"6:4778:39670":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_ifr_ifru"],"kind":"union"},"16:3393:42239":{"crate_id":16,"path":["gimli","arch","X86"],"kind":"struct"},"17:8822:60666":{"crate_id":17,"path":["object","read","any","FileInternal"],"kind":"enum"},"16:8034:3526":{"crate_id":16,"path":["gimli","read","StoreOnHeap"],"kind":"struct"},"17:13091:50001":{"crate_id":17,"path":["object","pe","ImageBoundForwarderRef"],"kind":"struct"},"1:11652:2253":{"crate_id":1,"path":["std","sys_common","process","CommandEnvs"],"kind":"struct"},"1:8870:2185":{"crate_id":1,"path":["std","path","PrefixComponent"],"kind":"struct"},"2:46908:2717":{"crate_id":2,"path":["core","char","TryFromCharError"],"kind":"struct"},"1:6489:2106":{"crate_id":1,"path":["std","sync","mpmc","Sender"],"kind":"struct"},"2:21313:56007":{"crate_id":2,"path":["core","num","fmt","Part"],"kind":"enum"},"6:7220:39798":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_condattr_t"],"kind":"struct"},"2:3145:134":{"crate_id":2,"path":["core","ops","try_trait","FromResidual"],"kind":"trait"},"14:165:42158":{"crate_id":14,"path":["rustc_demangle","DemangleStyle"],"kind":"enum"},"2:2970:2276":{"crate_id":2,"path":["core","ops","index","Index"],"kind":"trait"},"2:49059:127":{"crate_id":2,"path":["core","fmt","Error"],"kind":"struct"},"2:3599:1938":{"crate_id":2,"path":["core","array","iter","IntoIter"],"kind":"struct"},"17:13047:49997":{"crate_id":17,"path":["object","pe","ImageTlsDirectory64"],"kind":"struct"},"2:19988:57134":{"crate_id":2,"path":["core","core_simd","swizzle","rotate_lanes_right","Rotate"],"kind":"struct"},"1:8746:1881":{"crate_id":1,"path":["std","os","fd","owned","BorrowedFd"],"kind":"struct"},"2:58283:56946":{"crate_id":2,"path":["core","core_simd","vector","ptr","SimdMutPtr"],"kind":"struct"},"6:4673:39660":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_ifru_map"],"kind":"struct"},"2:2816:2348":{"crate_id":2,"path":["core","ops","bit","Shr"],"kind":"trait"},"2:7138:155":{"crate_id":2,"path":["core","iter","traits","iterator","Iterator"],"kind":"trait"},"17:11939:48847":{"crate_id":17,"path":["object","macho","DylibTableOfContents"],"kind":"struct"},"6:545:36364":{"crate_id":6,"path":["libc","unix","hostent"],"kind":"struct"},"1:11539:1928":{"crate_id":1,"path":["std","sys","unix","time","SystemTime"],"kind":"struct"},"2:20950:2601":{"crate_id":2,"path":["core","core_simd","vector","SimdElement"],"kind":"trait"},"17:12884:49623":{"crate_id":17,"path":["object","pe","ImageAuxSymbolTokenDef"],"kind":"struct"},"2:6596:2367":{"crate_id":2,"path":["core","iter","range","Step"],"kind":"trait"},"17:11199:44578":{"crate_id":17,"path":["object","elf","ProgramHeader32"],"kind":"struct"},"2:48229:178":{"crate_id":2,"path":["core","sync","atomic","Ordering"],"kind":"enum"},"2:2805:1953":{"crate_id":2,"path":["core","ops","bit","BitXor"],"kind":"trait"},"5:6978:218":{"crate_id":5,"path":["alloc","string","String"],"kind":"struct"},"1:8346:2017":{"crate_id":1,"path":["std","io","util","Empty"],"kind":"struct"},"5:4735:3141":{"crate_id":5,"path":["alloc","rc","Weak"],"kind":"struct"},"1:5313:55661":{"crate_id":1,"path":["std","path","fmt","DebugHelper"],"kind":"struct"},"16:5974:3619":{"crate_id":16,"path":["gimli","read","dwarf","Dwarf"],"kind":"struct"},"1:454:2426":{"crate_id":1,"path":["std","thread","scoped","ScopedJoinHandle"],"kind":"struct"},"1:5009:1883":{"crate_id":1,"path":["std","os","fd","raw","IntoRawFd"],"kind":"trait"},"2:53845:2742":{"crate_id":2,"path":["core","core_arch","simd","f32x16"],"kind":"struct"},"2:47131:57027":{"crate_id":2,"path":["core","iter","adapters","flatten","FlattenCompat"],"kind":"struct"},"2:49895:2319":{"crate_id":2,"path":["core","slice","iter","RChunksExactMut"],"kind":"struct"},"2:6983:2387":{"crate_id":2,"path":["core","iter","traits","accum","Sum"],"kind":"trait"},"17:11436:48651":{"crate_id":17,"path":["object","macho","DyldCacheHeader"],"kind":"struct"},"2:8591:189":{"crate_id":2,"path":["core","fmt","Pointer"],"kind":"trait"},"1:4264:2044":{"crate_id":1,"path":["std","os","unix","fs","MetadataExt"],"kind":"trait"},"17:3125:44102":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbolIterator"],"kind":"struct"},"1:8677:2573":{"crate_id":1,"path":["std","os","unix","net","ancillary","SocketCred"],"kind":"struct"},"6:4768:39669":{"crate_id":6,"path":["libc","unix","linux_like","linux","mq_attr"],"kind":"struct"},"2:50559:2648":{"crate_id":2,"path":["core","str","pattern","StrSearcherImpl"],"kind":"enum"},"2:46922:101":{"crate_id":2,"path":["core","ffi","c_str","CStr"],"kind":"struct"},"17:8631:43903":{"crate_id":17,"path":["object","endian","I16Bytes"],"kind":"struct"},"1:966:2262":{"crate_id":1,"path":["std","collections","hash","map","IntoValues"],"kind":"struct"},"16:6178:3624":{"crate_id":16,"path":["gimli","read","aranges","ArangeHeaderIter"],"kind":"struct"},"2:50239:1990":{"crate_id":2,"path":["core","str","iter","Lines"],"kind":"struct"},"2:10794:2918":{"crate_id":2,"path":["core","str","iter","MatchIndicesInternal"],"kind":"struct"},"2:49117:2125":{"crate_id":2,"path":["core","fmt","FlagV1"],"kind":"enum"},"9:676:3368":{"crate_id":9,"path":["miniz_oxide","deflate","CompressionLevel"],"kind":"enum"},"17:13527:50127":{"crate_id":17,"path":["object","pe","ImageFunctionEntry64"],"kind":"struct"},"6:4605:39651":{"crate_id":6,"path":["libc","unix","linux_like","linux","can_filter"],"kind":"struct"},"1:12361:1748":{"crate_id":1,"path":["std","f64"],"kind":"primitive"},"1:11997:3473":{"crate_id":1,"path":["std","backtrace_rs","backtrace","Frame"],"kind":"struct"},"16:4840:42907":{"crate_id":16,"path":["gimli","constants","DwLnct"],"kind":"struct"},"9:622:3322":{"crate_id":9,"path":["miniz_oxide","deflate","core","TDEFLFlush"],"kind":"enum"},"17:13214:50043":{"crate_id":17,"path":["object","pe","ImagePrologueDynamicRelocationHeader"],"kind":"struct"},"6:7226:39799":{"crate_id":6,"path":["libc","unix","linux_like","linux","fanotify_event_metadata"],"kind":"struct"},"2:47103:2378":{"crate_id":2,"path":["core","iter","adapters","enumerate","Enumerate"],"kind":"struct"},"16:4318:42769":{"crate_id":16,"path":["gimli","constants","DwDs"],"kind":"struct"},"2:46385:197":{"crate_id":2,"path":["core","ops","range","RangeTo"],"kind":"struct"},"1:595:1894":{"crate_id":1,"path":["std","thread","JoinHandle"],"kind":"struct"},"1:2380:2474":{"crate_id":1,"path":["std","fs","symlink_metadata"],"kind":"function"},"2:49961:2911":{"crate_id":2,"path":["core","str","iter","CharIndices"],"kind":"struct"},"2:48135:3011":{"crate_id":2,"path":["core","panic","panic_info","PanicInfo"],"kind":"struct"},"1:0:1336":{"crate_id":1,"path":["std"],"kind":"module"},"2:54025:17841":{"crate_id":2,"path":["core","core_arch","x86","__m256"],"kind":"struct"},"2:50700:2935":{"crate_id":2,"path":["core","str","LinesAnyMap"],"kind":"struct"},"16:7535:3548":{"crate_id":16,"path":["gimli","read","unit","DebugInfoUnitHeadersIter"],"kind":"struct"},"17:10949:44353":{"crate_id":17,"path":["object","elf","FileHeader32"],"kind":"struct"},"6:4206:39455":{"crate_id":6,"path":["libc","unix","linux_like","linux","if_nameindex"],"kind":"struct"},"17:13126:50007":{"crate_id":17,"path":["object","pe","ImageResourceDirectoryEntry"],"kind":"struct"},"12:1534:3456":{"crate_id":12,"path":["hashbrown","rustc_entry","RustcOccupiedEntry"],"kind":"struct"},"5:1216:2269":{"crate_id":5,"path":["alloc","collections","btree","map","entry","OccupiedEntry"],"kind":"struct"},"1:2583:51223":{"crate_id":1,"path":["std","io","buffered","bufwriter","flush_buf","BufGuard"],"kind":"struct"},"5:6820:1938":{"crate_id":5,"path":["alloc","collections","vec_deque","into_iter","IntoIter"],"kind":"struct"},"1:2245:128":{"crate_id":1,"path":["std","fs","File"],"kind":"struct"},"1:9350:2108":{"crate_id":1,"path":["std","sync","mpsc","SendError"],"kind":"struct"},"2:2659:222":{"crate_id":2,"path":["core","marker","Sync"],"kind":"trait"},"16:4777:42892":{"crate_id":16,"path":["gimli","constants","DwLns"],"kind":"struct"},"2:11046:2631":{"crate_id":2,"path":["core","str","pattern","DoubleEndedSearcher"],"kind":"trait"},"1:12365:1752":{"crate_id":1,"path":["std","i64"],"kind":"primitive"},"2:54142:17848":{"crate_id":2,"path":["core","core_arch","x86","__m512bh"],"kind":"struct"},"6:1505:37247":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreq"],"kind":"struct"},"1:4904:51346":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt","st_ctime"],"kind":"foreign_type"},"17:11356:44769":{"crate_id":17,"path":["object","elf","HashHeader"],"kind":"struct"},"16:4626:42861":{"crate_id":16,"path":["gimli","constants","DwInl"],"kind":"struct"},"16:2332:3844":{"crate_id":16,"path":["gimli","common","DebugAbbrevOffset"],"kind":"struct"},"2:8141:79":{"crate_id":2,"path":["core","sync","atomic","AtomicBool"],"kind":"struct"},"16:2833:3807":{"crate_id":16,"path":["gimli","common","DebugFrameOffset"],"kind":"struct"},"16:2402:3845":{"crate_id":16,"path":["gimli","common","DebugArangesOffset"],"kind":"struct"},"6:5554:40250":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","mallinfo"],"kind":"struct"},"1:5701:2241":{"crate_id":1,"path":["std","process","Command"],"kind":"struct"},"6:4317:39623":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_periodic_effect"],"kind":"struct"},"5:1680:1940":{"crate_id":5,"path":["alloc","collections","btree","map","DrainFilter"],"kind":"struct"},"5:6793:3136":{"crate_id":5,"path":["alloc","collections","btree","set_val","SetValZST"],"kind":"struct"},"16:7637:3542":{"crate_id":16,"path":["gimli","read","unit","AttributeValue"],"kind":"enum"},"2:47248:2396":{"crate_id":2,"path":["core","iter","adapters","skip_while","SkipWhile"],"kind":"struct"},"2:50365:2634":{"crate_id":2,"path":["core","str","pattern","SearchStep"],"kind":"enum"},"17:9722:44018":{"crate_id":17,"path":["object","read","elf","version","Version"],"kind":"struct"},"1:6434:52286":{"crate_id":1,"path":["std","sync","mpmc","zero","ZeroToken"],"kind":"struct"},"17:8774:3908":{"crate_id":17,"path":["object","read","util","ByteString"],"kind":"struct"},"1:6006:2541":{"crate_id":1,"path":["std","sync","barrier","BarrierWaitResult"],"kind":"struct"},"17:13492:50119":{"crate_id":17,"path":["object","pe","ImageCoffSymbolsHeader"],"kind":"struct"},"16:5592:3799":{"crate_id":16,"path":["gimli","read","cfi","AugmentationData"],"kind":"struct"},"17:9909:44097":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandIterator"],"kind":"struct"},"1:5174:2413":{"crate_id":1,"path":["std","os","net","linux_ext","tcp","TcpStreamExt"],"kind":"trait"},"5:1394:2260":{"crate_id":5,"path":["alloc","collections","btree","map","ValuesMut"],"kind":"struct"},"2:20433:2737":{"crate_id":2,"path":["core","core_simd","masks","MaskElement"],"kind":"trait"},"16:6337:3629":{"crate_id":16,"path":["gimli","read","line","LineRows"],"kind":"struct"},"6:6998:41090":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","align","sem_t"],"kind":"struct"},"17:9283:43978":{"crate_id":17,"path":["object","read","coff","file","CoffCommon"],"kind":"struct"},"2:50402:2640":{"crate_id":2,"path":["core","str","pattern","MultiCharEqSearcher"],"kind":"struct"},"2:1759:3056":{"crate_id":2,"path":["core","ptr","metadata","DynMetadata"],"kind":"struct"},"17:9362:3936":{"crate_id":17,"path":["object","read","coff","symbol","SymbolTable"],"kind":"struct"},"1:8106:118":{"crate_id":1,"path":["std","fs","DirBuilder"],"kind":"struct"},"18:521:4078":{"crate_id":18,"path":["memchr","memmem","prefilter","Prefilter"],"kind":"enum"},"16:6037:3825":{"crate_id":16,"path":["gimli","read","dwarf","RangeIterInner"],"kind":"enum"},"1:5083:1879":{"crate_id":1,"path":["std","os","fd","owned","AsFd"],"kind":"trait"},"1:4740:1876":{"crate_id":1,"path":["std","os","unix","process","CommandExt"],"kind":"trait"},"2:46769:2713":{"crate_id":2,"path":["core","char","convert","CharErrorKind"],"kind":"enum"},"2:46809:3107":{"crate_id":2,"path":["core","char","decode","DecodeUtf16Error"],"kind":"struct"},"1:11721:51004":{"crate_id":1,"path":["std","sys_common","wtf8","Wtf8"],"kind":"struct"},"6:4527:39641":{"crate_id":6,"path":["libc","unix","linux_like","linux","genlmsghdr"],"kind":"struct"},"16:6668:3552":{"crate_id":16,"path":["gimli","read","loclists","DebugLocLists"],"kind":"struct"},"17:13176:50034":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation32"],"kind":"struct"},"5:1201:2270":{"crate_id":5,"path":["alloc","collections","btree","map","entry","VacantEntry"],"kind":"struct"},"12:1120:3444":{"crate_id":12,"path":["hashbrown","map","VacantEntryRef"],"kind":"struct"},"2:2480:230":{"crate_id":2,"path":["core","convert","TryFrom"],"kind":"trait"},"1:4834:1891":{"crate_id":1,"path":["std","os","unix","thread","JoinHandleExt"],"kind":"trait"},"16:4680:42867":{"crate_id":16,"path":["gimli","constants","DwDsc"],"kind":"struct"},"6:1678:37264":{"crate_id":6,"path":["libc","unix","linux_like","arpreq_old"],"kind":"struct"},"2:2238:105":{"crate_id":2,"path":["core","clone","Clone"],"kind":"trait"},"2:2757:1912":{"crate_id":2,"path":["core","ops","arith","Rem"],"kind":"trait"},"6:4716:39664":{"crate_id":6,"path":["libc","unix","linux_like","linux","dirent64"],"kind":"struct"},"2:2268:183":{"crate_id":2,"path":["core","cmp","PartialEq"],"kind":"trait"},"16:2358:3826":{"crate_id":16,"path":["gimli","common","DebugAddrBase"],"kind":"struct"},"2:56961:239":{"crate_id":2,"path":["core","core_simd","fmt","fmt","Wrapper"],"kind":"struct"},"1:9592:213":{"crate_id":1,"path":["std","sync","rwlock","RwLockWriteGuard"],"kind":"struct"},"2:52111:2771":{"crate_id":2,"path":["core","core_arch","simd","u16x8"],"kind":"struct"},"6:6572:40720":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ucontext_t"],"kind":"struct"},"1:4010:2511":{"crate_id":1,"path":["std","net","tcp","TcpStream"],"kind":"struct"},"6:4683:39661":{"crate_id":6,"path":["libc","unix","linux_like","linux","in6_ifreq"],"kind":"struct"},"1:9336:2105":{"crate_id":1,"path":["std","sync","mpsc","TryIter"],"kind":"struct"},"1:339:160":{"crate_id":1,"path":["std","thread","local","LocalKey"],"kind":"struct"},"16:5438:3600":{"crate_id":16,"path":["gimli","read","cfi","EhHdrTable"],"kind":"struct"},"17:9644:3921":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdat"],"kind":"struct"},"17:12211:48926":{"crate_id":17,"path":["object","macho","SymsegCommand"],"kind":"struct"},"17:13203:50037":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation64V2"],"kind":"struct"},"2:48292:91":{"crate_id":2,"path":["core","sync","atomic","AtomicU8"],"kind":"struct"},"2:53891:2760":{"crate_id":2,"path":["core","core_arch","simd","i64x8"],"kind":"struct"},"2:46490:1899":{"crate_id":2,"path":["core","any","TypeId"],"kind":"struct"},"12:822:2264":{"crate_id":12,"path":["hashbrown","map","RawEntryMut"],"kind":"enum"},"1:4965:1878":{"crate_id":1,"path":["std","os","linux","process","ChildExt"],"kind":"trait"},"6:519:36362":{"crate_id":6,"path":["libc","unix","rusage"],"kind":"struct"},"2:50728:2936":{"crate_id":2,"path":["core","str","BytesIsNotEmpty"],"kind":"struct"},"1:1111:2270":{"crate_id":1,"path":["std","collections","hash","map","VacantEntry"],"kind":"struct"},"1:8720:1877":{"crate_id":1,"path":["std","os","linux","process","PidFd"],"kind":"struct"},"17:11247:44631":{"crate_id":17,"path":["object","elf","Dyn64"],"kind":"struct"},"1:12366:1753":{"crate_id":1,"path":["std","i128"],"kind":"primitive"},"6:1518:37249":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreq_source"],"kind":"struct"},"1:7207:2507":{"crate_id":1,"path":["std","sys_common","remutex","ReentrantMutex"],"kind":"struct"},"2:53967:2745":{"crate_id":2,"path":["core","core_arch","simd","f64x8"],"kind":"struct"},"2:9396:2314":{"crate_id":2,"path":["core","slice","iter","SplitMut"],"kind":"struct"},"5:3472:3222":{"crate_id":5,"path":["alloc","collections","linked_list","CursorMut"],"kind":"struct"},"1:5653:2238":{"crate_id":1,"path":["std","process","ChildStdin"],"kind":"struct"},"17:9553:3936":{"crate_id":17,"path":["object","read","elf","symbol","SymbolTable"],"kind":"struct"},"6:5876:40330":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","semid_ds"],"kind":"struct"},"16:4253:42752":{"crate_id":16,"path":["gimli","constants","DwAte"],"kind":"struct"},"6:1714:37268":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_storage"],"kind":"struct"},"1:5007:1882":{"crate_id":1,"path":["std","os","fd","raw","FromRawFd"],"kind":"trait"},"1:1884:4584":{"crate_id":1,"path":["std","env","Args"],"kind":"struct"},"18:699:4072":{"crate_id":18,"path":["memchr","memmem","FinderBuilder"],"kind":"struct"},"2:46868:2928":{"crate_id":2,"path":["core","char","EscapeDebug"],"kind":"struct"},"5:1943:3135":{"crate_id":5,"path":["alloc","collections","btree","merge_iter","MergeIterInner"],"kind":"struct"},"18:636:60688":{"crate_id":18,"path":["memchr","memmem","twoway","ApproximateByteSet"],"kind":"struct"},"16:3254:42238":{"crate_id":16,"path":["gimli","arch","RiscV"],"kind":"struct"},"6:4274:39617":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_replay"],"kind":"struct"},"1:5816:2247":{"crate_id":1,"path":["std","process","exit"],"kind":"function"},"16:5771:3614":{"crate_id":16,"path":["gimli","read","cfi","UnwindTableRow"],"kind":"struct"},"6:6509:40715":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ipc_perm"],"kind":"struct"},"2:50416:2643":{"crate_id":2,"path":["core","str","pattern","CharArraySearcher"],"kind":"struct"},"17:8393:3895":{"crate_id":17,"path":["object","common","SegmentFlags"],"kind":"enum"},"5:5531:3141":{"crate_id":5,"path":["alloc","sync","Weak"],"kind":"struct"},"5:6955:3207":{"crate_id":5,"path":["alloc","ffi","c_str","IntoStringError"],"kind":"struct"},"17:10455:4048":{"crate_id":17,"path":["object","read","pe","resource","ResourceDirectory"],"kind":"struct"},"2:20426:1870":{"crate_id":2,"path":["core","core_simd","masks","sealed","Sealed"],"kind":"trait"},"1:987:2265":{"crate_id":1,"path":["std","collections","hash","map","RawOccupiedEntryMut"],"kind":"struct"},"1:10927:2012":{"crate_id":1,"path":["std","sys","unix","stdio","Stdout"],"kind":"struct"},"17:11617:48763":{"crate_id":17,"path":["object","macho","SegmentCommand32"],"kind":"struct"},"2:2839:2360":{"crate_id":2,"path":["core","ops","bit","ShrAssign"],"kind":"trait"},"16:5210:42232":{"crate_id":16,"path":["gimli","endianity","BigEndian"],"kind":"struct"},"2:47145:2381":{"crate_id":2,"path":["core","iter","adapters","fuse","Fuse"],"kind":"struct"},"6:62:35978":{"crate_id":6,"path":["libc","unix","DIR"],"kind":"enum"},"16:7920:3656":{"crate_id":16,"path":["gimli","read","unit","EntriesTreeIter"],"kind":"struct"},"6:567:36367":{"crate_id":6,"path":["libc","unix","winsize"],"kind":"struct"},"16:2526:3828":{"crate_id":16,"path":["gimli","common","DebugLocListsBase"],"kind":"struct"},"6:586:36370":{"crate_id":6,"path":["libc","unix","itimerval"],"kind":"struct"},"17:13031:49993":{"crate_id":17,"path":["object","pe","ImageThunkData64"],"kind":"struct"},"5:5808:12493":{"crate_id":5,"path":["alloc","task","Wake"],"kind":"trait"},"17:13114:50004":{"crate_id":17,"path":["object","pe","ImageResourceDirectory"],"kind":"struct"},"5:2019:57614":{"crate_id":5,"path":["alloc","collections","btree","navigate","LazyLeafHandle"],"kind":"enum"},"1:6129:51194":{"crate_id":1,"path":["std","sync","mpmc","array","Channel"],"kind":"struct"},"6:4191:39608":{"crate_id":6,"path":["libc","unix","linux_like","linux","packet_mreq"],"kind":"struct"},"18:113:50521":{"crate_id":18,"path":["memchr","memchr","iter","Memchr3"],"kind":"struct"},"16:2570:3880":{"crate_id":16,"path":["gimli","common","DebugMacinfoOffset"],"kind":"struct"},"17:13082:50000":{"crate_id":17,"path":["object","pe","ImageBoundImportDescriptor"],"kind":"struct"},"1:8682:2576":{"crate_id":1,"path":["std","os","unix","net","ancillary","AncillaryError"],"kind":"enum"},"17:13404:50088":{"crate_id":17,"path":["object","pe","ImageRuntimeFunctionEntry"],"kind":"struct"},"17:10403:3911":{"crate_id":17,"path":["object","read","pe","import","Import"],"kind":"enum"},"2:49783:2313":{"crate_id":2,"path":["core","slice","iter","ChunksMut"],"kind":"struct"}},"external_crates":{"14":{"name":"rustc_demangle","html_root_url":"https://doc.rust-lang.org/nightly/"},"11":{"name":"adler","html_root_url":"https://docs.rs/adler/1.0.2/"},"7":{"name":"unwind","html_root_url":"https://doc.rust-lang.org/nightly/"},"4":{"name":"rustc_std_workspace_core","html_root_url":"https://doc.rust-lang.org/nightly/"},"16":{"name":"gimli","html_root_url":"https://doc.rust-lang.org/nightly/"},"2":{"name":"core","html_root_url":"https://doc.rust-lang.org/nightly/"},"15":{"name":"addr2line","html_root_url":"https://doc.rust-lang.org/nightly/"},"1":{"name":"std","html_root_url":"https://doc.rust-lang.org/nightly/"},"5":{"name":"alloc","html_root_url":"https://doc.rust-lang.org/nightly/"},"19":{"name":"panic_unwind","html_root_url":"https://doc.rust-lang.org/nightly/"},"9":{"name":"miniz_oxide","html_root_url":"https://doc.rust-lang.org/nightly/"},"18":{"name":"memchr","html_root_url":"https://doc.rust-lang.org/nightly/"},"13":{"name":"std_detect","html_root_url":"https://doc.rust-lang.org/nightly/"},"17":{"name":"object","html_root_url":"https://doc.rust-lang.org/nightly/"},"10":{"name":"rustc_std_workspace_alloc","html_root_url":"https://doc.rust-lang.org/nightly/"},"6":{"name":"libc","html_root_url":"https://doc.rust-lang.org/nightly/"},"8":{"name":"cfg_if","html_root_url":"https://docs.rs/cfg-if/"},"12":{"name":"hashbrown","html_root_url":"https://doc.rust-lang.org/nightly/"},"3":{"name":"compiler_builtins","html_root_url":"https://doc.rust-lang.org/nightly/"}},"format_version":23}