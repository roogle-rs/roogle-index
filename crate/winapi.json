{"root":"0:0:1630","crate_version":"0.3.9","includes_private":false,"index":{"2:11443:25137":{"id":"2:11443:25137","crate_id":2,"name":"get_mut","span":null,"visibility":"public","docs":"Returns a mutable subslice of `str`.\n\nThis is the non-panicking alternative to indexing the `str`. Returns\n[`None`] whenever equivalent indexing operation would panic.\n\n# Examples\n\n```\nlet mut v = String::from(\"hello\");\n// correct length\nassert!(v.get_mut(0..5).is_some());\n// out of bounds\nassert!(v.get_mut(..42).is_none());\nassert_eq!(Some(\"he\"), v.get_mut(0..2).map(|v| &*v));\n\nassert_eq!(\"hello\", v);\n{\n    let s = v.get_mut(0..2);\n    let s = s.map(|s| {\n        s.make_ascii_uppercase();\n        &*s\n    });\n    assert_eq!(Some(\"HE\"), s);\n}\nassert_eq!(\"HEllo\", v);\n```","links":{"`None`":"2:48112:176"},"attrs":["#[rustc_const_unstable(feature = \"const_slice_index\", issue = \"none\")]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["i",{"kind":"generic","inner":"I"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:48110:178","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"qualified_path","inner":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"I"},"trait":{"name":"SliceIndex","id":"2:9312:219","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}}}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"2:9312:219","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11447:25139":{"id":"2:11447:25139","crate_id":2,"name":"get_unchecked_mut","span":null,"visibility":"public","docs":"Returns a mutable, unchecked subslice of `str`.\n\nThis is the unchecked alternative to indexing the `str`.\n\n# Safety\n\nCallers of this function are responsible that these preconditions are\nsatisfied:\n\n* The starting index must not exceed the ending index;\n* Indexes must be within bounds of the original slice;\n* Indexes must lie on UTF-8 sequence boundaries.\n\nFailing that, the returned string slice may reference invalid memory or\nviolate the invariants communicated by the `str` type.\n\n# Examples\n\n```\nlet mut v = String::from(\"üóª‚ààüåè\");\nunsafe {\n    assert_eq!(\"üóª\", v.get_unchecked_mut(0..4));\n    assert_eq!(\"‚àà\", v.get_unchecked_mut(4..7));\n    assert_eq!(\"üåè\", v.get_unchecked_mut(7..11));\n}\n```","links":{},"attrs":["#[rustc_const_unstable(feature = \"const_slice_index\", issue = \"none\")]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["i",{"kind":"generic","inner":"I"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"qualified_path","inner":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"I"},"trait":{"name":"SliceIndex","id":"2:9312:219","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}}}}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"2:9312:219","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}},"5:5095:31789":{"id":"5:5095:31789","crate_id":5,"name":"into_boxed_bytes","span":null,"visibility":"public","docs":"Converts a `Box<str>` into a `Box<[u8]>` without copying or allocating.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"this is a string\";\nlet boxed_str = s.to_owned().into_boxed_str();\nlet boxed_bytes = boxed_str.into_boxed_bytes();\nassert_eq!(*boxed_bytes, *s.as_bytes());\n```","links":{},"attrs":["#[must_use = \"`self` will be dropped if the result is not used\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"resolved_path","inner":{"name":"Box","id":"5:286:1875","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}},{"type":{"kind":"resolved_path","inner":{"name":"Global","id":"5:6720:2035","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}]],"output":{"kind":"resolved_path","inner":{"name":"Box","id":"5:286:1875","args":{"angle_bracketed":{"args":[{"type":{"kind":"slice","inner":{"kind":"primitive","inner":"u8"}}},{"type":{"kind":"resolved_path","inner":{"name":"Global","id":"5:6720:2035","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11481:25172":{"id":"2:11481:25172","crate_id":2,"name":"split_inclusive","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by\ncharacters matched by a pattern. Differs from the iterator produced by\n`split` in that `split_inclusive` leaves the matched part as the\nterminator of the substring.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\\nlittle lamb\\nlittle lamb.\"\n    .split_inclusive('\\n').collect();\nassert_eq!(v, [\"Mary had a little lamb\\n\", \"little lamb\\n\", \"little lamb.\"]);\n```\n\nIf the last element of the string is matched,\nthat element will be considered the terminator of the preceding substring.\nThat substring will be the last item returned by the iterator.\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\\nlittle lamb\\nlittle lamb.\\n\"\n    .split_inclusive('\\n').collect();\nassert_eq!(v, [\"Mary had a little lamb\\n\", \"little lamb\\n\", \"little lamb.\\n\"]);\n```","links":{"prim@char":"1:12298:409","self::pattern":"2:11130:7639"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"SplitInclusive","id":"2:10954:7628","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11135:7635","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11451:25162":{"id":"2:11451:25162","crate_id":2,"name":"split_at","span":null,"visibility":"public","docs":"Divide one string slice into two at an index.\n\nThe argument, `mid`, should be a byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get mutable string slices instead, see the [`split_at_mut`]\nmethod.\n\n[`split_at_mut`]: str::split_at_mut\n\n# Panics\n\nPanics if `mid` is not on a UTF-8 code point boundary, or if it is\npast the end of the last code point of the string slice.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"Per Martin-L√∂f\";\n\nlet (first, last) = s.split_at(3);\n\nassert_eq!(\"Per\", first);\nassert_eq!(\" Martin-L√∂f\", last);\n```","links":{"str::split_at_mut":"2:11452:25163"},"attrs":["#[must_use]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["mid",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"tuple","inner":[{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11457:27799":{"id":"2:11457:27799","crate_id":2,"name":"split_ascii_whitespace","span":null,"visibility":"public","docs":"Splits a string slice by ASCII whitespace.\n\nThe iterator returned will return string slices that are sub-slices of\nthe original string slice, separated by any amount of ASCII whitespace.\n\nTo split by Unicode `Whitespace` instead, use [`split_whitespace`].\n\n[`split_whitespace`]: str::split_whitespace\n\n# Examples\n\nBasic usage:\n\n```\nlet mut iter = \"A few words\".split_ascii_whitespace();\n\nassert_eq!(Some(\"A\"), iter.next());\nassert_eq!(Some(\"few\"), iter.next());\nassert_eq!(Some(\"words\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nAll kinds of ASCII whitespace are considered:\n\n```\nlet mut iter = \" Mary   had\\ta little  \\n\\t lamb\".split_ascii_whitespace();\nassert_eq!(Some(\"Mary\"), iter.next());\nassert_eq!(Some(\"had\"), iter.next());\nassert_eq!(Some(\"a\"), iter.next());\nassert_eq!(Some(\"little\"), iter.next());\nassert_eq!(Some(\"lamb\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nIf the string is empty or all ASCII whitespace, the iterator yields no string slices:\n```\nassert_eq!(\"\".split_ascii_whitespace().next(), None);\nassert_eq!(\"   \".split_ascii_whitespace().next(), None);\n```","links":{"str::split_whitespace":"2:11456:27783"},"attrs":["#[must_use =\n\"this returns the split string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"SplitAsciiWhitespace","id":"2:50369:7661","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11528:31135":{"id":"2:11528:31135","crate_id":2,"name":"trim_start_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. `start` in this context means the first\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be left side, and for right-to-left languages like\nArabic or Hebrew, this will be the right side.\n\n# Examples\n\nBasic usage:\n\n```\nassert_eq!(\"11foo1bar11\".trim_start_matches('1'), \"foo1bar11\");\nassert_eq!(\"123foo1bar123\".trim_start_matches(char::is_numeric), \"foo1bar123\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_start_matches(x), \"foo1bar12\");\n```","links":{"prim@char":"1:12298:409","self::pattern":"2:11130:7639"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11135:7635","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11552:31139":{"id":"2:11552:31139","crate_id":2,"name":"escape_debug","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_debug`].\n\nNote: only extended grapheme codepoints that begin the string will be\nescaped.\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"‚ù§\\n!\".escape_debug() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"‚ù§\\n!\".escape_debug());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"‚ù§\\\\n!\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"‚ù§\\n!\".escape_debug().to_string(), \"‚ù§\\\\n!\");\n```","links":{"`char::escape_debug`":"2:4474:31139"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"EscapeDebug","id":"2:50385:7670","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11551:20589":{"id":"2:11551:20589","crate_id":2,"name":"make_ascii_lowercase","span":null,"visibility":"public","docs":"Converts this string to its ASCII lower case equivalent in-place.\n\nASCII letters 'A' to 'Z' are mapped to 'a' to 'z',\nbut non-ASCII letters are unchanged.\n\nTo return a new lowercased value without modifying the existing one, use\n[`to_ascii_lowercase()`].\n\n[`to_ascii_lowercase()`]: #method.to_ascii_lowercase\n\n# Examples\n\n```\nlet mut s = String::from(\"GR√ú√üE, J√úRGEN ‚ù§\");\n\ns.make_ascii_lowercase();\n\nassert_eq!(\"gr√ú√üe, j√úrgen ‚ù§\", s);\n```","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11454:19414":{"id":"2:11454:19414","crate_id":2,"name":"char_indices","span":null,"visibility":"public","docs":"Returns an iterator over the [`char`]s of a string slice, and their\npositions.\n\nAs a string slice consists of valid UTF-8, we can iterate through a\nstring slice by [`char`]. This method returns an iterator of both\nthese [`char`]s, as well as their byte positions.\n\nThe iterator yields tuples. The position is first, the [`char`] is\nsecond.\n\n# Examples\n\nBasic usage:\n\n```\nlet word = \"goodbye\";\n\nlet count = word.char_indices().count();\nassert_eq!(7, count);\n\nlet mut char_indices = word.char_indices();\n\nassert_eq!(Some((0, 'g')), char_indices.next());\nassert_eq!(Some((1, 'o')), char_indices.next());\nassert_eq!(Some((2, 'o')), char_indices.next());\nassert_eq!(Some((3, 'd')), char_indices.next());\nassert_eq!(Some((4, 'b')), char_indices.next());\nassert_eq!(Some((5, 'y')), char_indices.next());\nassert_eq!(Some((6, 'e')), char_indices.next());\n\nassert_eq!(None, char_indices.next());\n```\n\nRemember, [`char`]s might not match your intuition about characters:\n\n[`char`]: prim@char\n\n```\nlet yes = \"yÃÜes\";\n\nlet mut char_indices = yes.char_indices();\n\nassert_eq!(Some((0, 'y')), char_indices.next()); // not (0, 'yÃÜ')\nassert_eq!(Some((1, '\\u{0306}')), char_indices.next());\n\n// note the 3 here - the last character took up two bytes\nassert_eq!(Some((3, 'e')), char_indices.next());\nassert_eq!(Some((4, 's')), char_indices.next());\n\nassert_eq!(None, char_indices.next());\n```","links":{"prim@char":"1:12298:409"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"CharIndices","id":"2:50062:7665","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11499:31124":{"id":"2:11499:31124","crate_id":2,"name":"split_once","span":null,"visibility":"public","docs":"Splits the string on the first occurrence of the specified delimiter and\nreturns prefix before delimiter and suffix after delimiter.\n\n# Examples\n\n```\nassert_eq!(\"cfg\".split_once('='), None);\nassert_eq!(\"cfg=\".split_once('='), Some((\"cfg\", \"\")));\nassert_eq!(\"cfg=foo\".split_once('='), Some((\"cfg\", \"foo\")));\nassert_eq!(\"cfg=foo=bar\".split_once('='), Some((\"cfg\", \"foo=bar\")));\n```","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["delimiter",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:48110:178","args":{"angle_bracketed":{"args":[{"type":{"kind":"tuple","inner":[{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}},{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11135:7635","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"5:5099:31790":{"id":"5:5099:31790","crate_id":5,"name":"replacen","span":null,"visibility":"public","docs":"Replaces first N matches of a pattern with another string.\n\n`replacen` creates a new [`String`], and copies the data from this string slice into it.\nWhile doing so, it attempts to find matches of a pattern. If it finds any, it\nreplaces them with the replacement string slice at most `count` times.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"foo foo 123 foo\";\nassert_eq!(\"new new 123 foo\", s.replacen(\"foo\", \"new\", 2));\nassert_eq!(\"faa fao 123 foo\", s.replacen('o', \"a\", 3));\nassert_eq!(\"foo foo new23 foo\", s.replacen(char::is_numeric, \"new\", 1));\n```\n\nWhen the pattern doesn't match:\n\n```\nlet s = \"this is old\";\nassert_eq!(s, s.replacen(\"cookie monster\", \"little lamb\", 10));\n```","links":{"`String`":"5:6969:221"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the replaced string as a new allocation, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}],["to",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}],["count",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:6969:221","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11135:7635","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"5:5113:20585":{"id":"5:5113:20585","crate_id":5,"name":"to_ascii_uppercase","span":null,"visibility":"public","docs":"Returns a copy of this string where each character is mapped to its\nASCII upper case equivalent.\n\nASCII letters 'a' to 'z' are mapped to 'A' to 'Z',\nbut non-ASCII letters are unchanged.\n\nTo uppercase the value in-place, use [`make_ascii_uppercase`].\n\nTo uppercase ASCII characters in addition to non-ASCII characters, use\n[`to_uppercase`].\n\n# Examples\n\n```\nlet s = \"Gr√º√üe, J√ºrgen ‚ù§\";\n\nassert_eq!(\"GR√º√üE, J√ºRGEN ‚ù§\", s.to_ascii_uppercase());\n```\n\n[`make_ascii_uppercase`]: str::make_ascii_uppercase\n[`to_uppercase`]: #method.to_uppercase","links":{"str::make_ascii_uppercase":"2:11550:20588"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use = \"to uppercase the value in-place, use `make_ascii_uppercase()`\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:6969:221","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"5:5094":{"id":"5:5094","crate_id":5,"name":null,"span":null,"visibility":{"restricted":{"parent":"5:5005:1360","path":"::str"}},"docs":"Methods for string slices.","links":{},"attrs":["#[cfg(not(test))]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"kind":"primitive","inner":"str"},"items":["5:5095:31789","5:5096:2140","5:5099:31790","5:5102:31791","5:5110:31792","5:5111:31793","5:5112:2162","5:5113:20585","5:5114:20586"],"negative":false,"synthetic":false,"blanket_impl":null}},"5:5112:2162":{"id":"5:5112:2162","crate_id":5,"name":"repeat","span":null,"visibility":"public","docs":"Creates a new [`String`] by repeating a string `n` times.\n\n# Panics\n\nThis function will panic if the capacity would overflow.\n\n# Examples\n\nBasic usage:\n\n```\nassert_eq!(\"abc\".repeat(4), String::from(\"abcabcabcabc\"));\n```\n\nA panic upon overflow:\n\n```should_panic\n// this will panic at runtime\nlet huge = \"0123456789abcdef\".repeat(usize::MAX);\n```","links":{"`String`":"5:6969:221"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["n",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:6969:221","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11505:1844":{"id":"2:11505:1844","crate_id":2,"name":"matches","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within the given string\nslice.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rmatches`] method can be used.\n\n[`rmatches`]: str::matches\n\n# Examples\n\nBasic usage:\n\n```\nlet v: Vec<&str> = \"abcXXXabcYYYabc\".matches(\"abc\").collect();\nassert_eq!(v, [\"abc\", \"abc\", \"abc\"]);\n\nlet v: Vec<&str> = \"1abc2abc3\".matches(char::is_numeric).collect();\nassert_eq!(v, [\"1\", \"2\", \"3\"]);\n```","links":{"self::pattern":"2:11130:7639","prim@char":"1:12298:409","`DoubleEndedIterator`":"2:7086:120","str::matches":"2:11505:1844"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Matches","id":"2:50290:7676","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11135:7635","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11514:31128":{"id":"2:11514:31128","crate_id":2,"name":"rmatch_indices","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within `self`,\nyielded in reverse order along with the index of the match.\n\nFor matches of `pat` within `self` that overlap, only the indices\ncorresponding to the last match are returned.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`match_indices`] method can be used.\n\n[`match_indices`]: str::match_indices\n\n# Examples\n\nBasic usage:\n\n```\nlet v: Vec<_> = \"abcXXXabcYYYabc\".rmatch_indices(\"abc\").collect();\nassert_eq!(v, [(12, \"abc\"), (6, \"abc\"), (0, \"abc\")]);\n\nlet v: Vec<_> = \"1abcabc2\".rmatch_indices(\"abc\").collect();\nassert_eq!(v, [(4, \"abc\"), (1, \"abc\")]);\n\nlet v: Vec<_> = \"ababa\".rmatch_indices(\"aba\").collect();\nassert_eq!(v, [(2, \"aba\")]); // only the last `aba`\n```","links":{"str::match_indices":"2:11511:31127","self::pattern":"2:11130:7639","`DoubleEndedIterator`":"2:7086:120","prim@char":"1:12298:409"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"RMatchIndices","id":"2:50254:7675","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11135:7635","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"2:11135:7635","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11150:7636","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11478:25170":{"id":"2:11478:25170","crate_id":2,"name":"split","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by\ncharacters matched by a pattern.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rsplit`] method can be used.\n\n[`rsplit`]: str::rsplit\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".split(' ').collect();\nassert_eq!(v, [\"Mary\", \"had\", \"a\", \"little\", \"lamb\"]);\n\nlet v: Vec<&str> = \"\".split('X').collect();\nassert_eq!(v, [\"\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".split('X').collect();\nassert_eq!(v, [\"lion\", \"\", \"tiger\", \"leopard\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".split(\"::\").collect();\nassert_eq!(v, [\"lion\", \"tiger\", \"leopard\"]);\n\nlet v: Vec<&str> = \"abc1def2ghi\".split(char::is_numeric).collect();\nassert_eq!(v, [\"abc\", \"def\", \"ghi\"]);\n\nlet v: Vec<&str> = \"lionXtigerXleopard\".split(char::is_uppercase).collect();\nassert_eq!(v, [\"lion\", \"tiger\", \"leopard\"]);\n```\n\nIf the pattern is a slice of chars, split on each occurrence of any of the characters:\n\n```\nlet v: Vec<&str> = \"2020-11-03 23:59\".split(&['-', ' ', ':', '@'][..]).collect();\nassert_eq!(v, [\"2020\", \"11\", \"03\", \"23\", \"59\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".split(|c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"abc\", \"def\", \"ghi\"]);\n```\n\nIf a string contains multiple contiguous separators, you will end up\nwith empty strings in the output:\n\n```\nlet x = \"||||a||b|c\".to_string();\nlet d: Vec<_> = x.split('|').collect();\n\nassert_eq!(d, &[\"\", \"\", \"\", \"\", \"a\", \"\", \"b\", \"c\"]);\n```\n\nContiguous separators are separated by the empty string.\n\n```\nlet x = \"(///)\".to_string();\nlet d: Vec<_> = x.split('/').collect();\n\nassert_eq!(d, &[\"(\", \"\", \"\", \")\"]);\n```\n\nSeparators at the start or end of a string are neighbored\nby empty strings.\n\n```\nlet d: Vec<_> = \"010\".split(\"0\").collect();\nassert_eq!(d, &[\"\", \"1\", \"\"]);\n```\n\nWhen the empty string is used as a separator, it separates\nevery character in the string, along with the beginning\nand end of the string.\n\n```\nlet f: Vec<_> = \"rust\".split(\"\").collect();\nassert_eq!(f, &[\"\", \"r\", \"u\", \"s\", \"t\", \"\"]);\n```\n\nContiguous separators can lead to possibly surprising behavior\nwhen whitespace is used as the separator. This code is correct:\n\n```\nlet x = \"    a  b c\".to_string();\nlet d: Vec<_> = x.split(' ').collect();\n\nassert_eq!(d, &[\"\", \"\", \"\", \"\", \"a\", \"\", \"b\", \"c\"]);\n```\n\nIt does _not_ give you:\n\n```,ignore\nassert_eq!(d, &[\"a\", \"b\", \"c\"]);\n```\n\nUse [`split_whitespace`] for this behavior.\n\n[`split_whitespace`]: str::split_whitespace","links":{"self::pattern":"2:11130:7639","str::rsplit":"2:11484:25174","str::split_whitespace":"2:11456:27783","`DoubleEndedIterator`":"2:7086:120","prim@char":"1:12298:409"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Split","id":"2:50086:2138","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11135:7635","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11519:31130":{"id":"2:11519:31130","crate_id":2,"name":"trim_start","span":null,"visibility":"public","docs":"Returns a string slice with leading whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Text directionality\n\nA string is a sequence of bytes. `start` in this context means the first\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be left side, and for right-to-left languages like\nArabic or Hebrew, this will be the right side.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\nassert_eq!(\"Hello\\tworld\\t\\n\", s.trim_start());\n```\n\nDirectionality:\n\n```\nlet s = \"  English  \";\nassert!(Some('E') == s.trim_start().chars().next());\n\nlet s = \"  ◊¢◊ë◊®◊ô◊™  \";\nassert!(Some('◊¢') == s.trim_start().chars().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_trim_start\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11524:31133":{"id":"2:11524:31133","crate_id":2,"name":"trim_right","span":null,"visibility":"public","docs":"Returns a string slice with trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`.\n\n# Text directionality\n\nA string is a sequence of bytes. 'Right' in this context means the last\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _left_ side, not the right.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \" Hello\\tworld\\t\";\n\nassert_eq!(\" Hello\\tworld\", s.trim_right());\n```\n\nDirectionality:\n\n```\nlet s = \"English  \";\nassert!(Some('h') == s.trim_right().chars().rev().next());\n\nlet s = \"◊¢◊ë◊®◊ô◊™  \";\nassert!(Some('◊™') == s.trim_right().chars().rev().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_end`\", suggestion =\n\"trim_end\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_end`"},"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11431:31115":{"id":"2:11431:31115","crate_id":2,"name":"is_char_boundary","span":null,"visibility":"public","docs":"Checks that `index`-th byte is the first byte in a UTF-8 code point\nsequence or the end of the string.\n\nThe start and end of the string (when `index == self.len()`) are\nconsidered to be boundaries.\n\nReturns `false` if `index` is greater than `self.len()`.\n\n# Examples\n\n```\nlet s = \"L√∂we ËÄÅËôé L√©opard\";\nassert!(s.is_char_boundary(0));\n// start of `ËÄÅ`\nassert!(s.is_char_boundary(6));\nassert!(s.is_char_boundary(s.len()));\n\n// second byte of `√∂`\nassert!(!s.is_char_boundary(2));\n\n// third byte of `ËÄÅ`\nassert!(!s.is_char_boundary(8));\n```","links":{},"attrs":["#[must_use]","#[rustc_const_unstable(feature = \"const_is_char_boundary\", issue = \"none\")]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["index",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11550:20588":{"id":"2:11550:20588","crate_id":2,"name":"make_ascii_uppercase","span":null,"visibility":"public","docs":"Converts this string to its ASCII upper case equivalent in-place.\n\nASCII letters 'a' to 'z' are mapped to 'A' to 'Z',\nbut non-ASCII letters are unchanged.\n\nTo return a new uppercased value without modifying the existing one, use\n[`to_ascii_uppercase()`].\n\n[`to_ascii_uppercase()`]: #method.to_ascii_uppercase\n\n# Examples\n\n```\nlet mut s = String::from(\"Gr√º√üe, J√ºrgen ‚ù§\");\n\ns.make_ascii_uppercase();\n\nassert_eq!(\"GR√º√üE, J√ºRGEN ‚ù§\", s);\n```","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11455:19570":{"id":"2:11455:19570","crate_id":2,"name":"bytes","span":null,"visibility":"public","docs":"An iterator over the bytes of a string slice.\n\nAs a string slice consists of a sequence of bytes, we can iterate\nthrough a string slice by byte. This method returns such an iterator.\n\n# Examples\n\nBasic usage:\n\n```\nlet mut bytes = \"bors\".bytes();\n\nassert_eq!(Some(b'b'), bytes.next());\nassert_eq!(Some(b'o'), bytes.next());\nassert_eq!(Some(b'r'), bytes.next());\nassert_eq!(Some(b's'), bytes.next());\n\nassert_eq!(None, bytes.next());\n```","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Bytes","id":"2:50072:2136","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11474:19169":{"id":"2:11474:19169","crate_id":2,"name":"rfind","span":null,"visibility":"public","docs":"Returns the byte index for the first character of the last match of the pattern in\nthis string slice.\n\nReturns [`None`] if the pattern doesn't match.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nlet s = \"L√∂we ËÄÅËôé L√©opard Gepardi\";\n\nassert_eq!(s.rfind('L'), Some(13));\nassert_eq!(s.rfind('√©'), Some(14));\nassert_eq!(s.rfind(\"pard\"), Some(24));\n```\n\nMore complex patterns with closures:\n\n```\nlet s = \"L√∂we ËÄÅËôé L√©opard\";\n\nassert_eq!(s.rfind(char::is_whitespace), Some(12));\nassert_eq!(s.rfind(char::is_lowercase), Some(20));\n```\n\nNot finding the pattern:\n\n```\nlet s = \"L√∂we ËÄÅËôé L√©opard\";\nlet x: &[_] = &['1', '2'];\n\nassert_eq!(s.rfind(x), None);\n```","links":{"self::pattern":"2:11130:7639","`None`":"2:48112:176","prim@char":"1:12298:409"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:48110:178","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11135:7635","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"2:11135:7635","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11150:7636","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11521:31131":{"id":"2:11521:31131","crate_id":2,"name":"trim_end","span":null,"visibility":"public","docs":"Returns a string slice with trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Text directionality\n\nA string is a sequence of bytes. `end` in this context means the last\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be right side, and for right-to-left languages like\nArabic or Hebrew, this will be the left side.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\nassert_eq!(\"\\n Hello\\tworld\", s.trim_end());\n```\n\nDirectionality:\n\n```\nlet s = \"  English  \";\nassert!(Some('h') == s.trim_end().chars().rev().next());\n\nlet s = \"  ◊¢◊ë◊®◊ô◊™  \";\nassert!(Some('◊™') == s.trim_end().chars().rev().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_trim_end\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11549:20587":{"id":"2:11549:20587","crate_id":2,"name":"eq_ignore_ascii_case","span":null,"visibility":"public","docs":"Checks that two strings are an ASCII case-insensitive match.\n\nSame as `to_ascii_lowercase(a) == to_ascii_lowercase(b)`,\nbut without allocating and copying temporaries.\n\n# Examples\n\n```\nassert!(\"Ferris\".eq_ignore_ascii_case(\"FERRIS\"));\nassert!(\"Ferr√∂s\".eq_ignore_ascii_case(\"FERR√∂S\"));\nassert!(!\"Ferr√∂s\".eq_ignore_ascii_case(\"FERR√ñS\"));\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["other",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11540:31137":{"id":"2:11540:31137","crate_id":2,"name":"trim_left_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. 'Left' in this context means the first\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _right_ side, not the left.\n\n# Examples\n\nBasic usage:\n\n```\nassert_eq!(\"11foo1bar11\".trim_left_matches('1'), \"foo1bar11\");\nassert_eq!(\"123foo1bar123\".trim_left_matches(char::is_numeric), \"foo1bar123\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_left_matches(x), \"foo1bar12\");\n```","links":{"self::pattern":"2:11130:7639","prim@char":"1:12298:409"},"attrs":["#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_start_matches`\",\nsuggestion = \"trim_start_matches\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_start_matches`"},"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11135:7635","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11439:310":{"id":"2:11439:310","crate_id":2,"name":"as_ptr","span":null,"visibility":"public","docs":"Converts a string slice to a raw pointer.\n\nAs string slices are a slice of bytes, the raw pointer points to a\n[`u8`]. This pointer will be pointing to the first byte of the string\nslice.\n\nThe caller must ensure that the returned pointer is never written to.\nIf you need to mutate the contents of the string slice, use [`as_mut_ptr`].\n\n[`as_mut_ptr`]: str::as_mut_ptr\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"Hello\";\nlet ptr = s.as_ptr();\n```","links":{"`u8`":"1:12315:1456","str::as_mut_ptr":"2:11440:25140"},"attrs":["#[must_use]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"raw_pointer","inner":{"mutable":false,"type":{"kind":"primitive","inner":"u8"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11440:25140":{"id":"2:11440:25140","crate_id":2,"name":"as_mut_ptr","span":null,"visibility":"public","docs":"Converts a mutable string slice to a raw pointer.\n\nAs string slices are a slice of bytes, the raw pointer points to a\n[`u8`]. This pointer will be pointing to the first byte of the string\nslice.\n\nIt is your responsibility to make sure that the string slice only gets\nmodified in a way that it remains valid UTF-8.","links":{"`u8`":"1:12315:1456"},"attrs":["#[must_use]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"raw_pointer","inner":{"mutable":true,"type":{"kind":"primitive","inner":"u8"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11484:25174":{"id":"2:11484:25174","crate_id":2,"name":"rsplit","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by\ncharacters matched by a pattern and yielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`split`] method can be used.\n\n[`split`]: str::split\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".rsplit(' ').collect();\nassert_eq!(v, [\"lamb\", \"little\", \"a\", \"had\", \"Mary\"]);\n\nlet v: Vec<&str> = \"\".rsplit('X').collect();\nassert_eq!(v, [\"\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".rsplit('X').collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"\", \"lion\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".rsplit(\"::\").collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"lion\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".rsplit(|c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"ghi\", \"def\", \"abc\"]);\n```","links":{"self::pattern":"2:11130:7639","`DoubleEndedIterator`":"2:7086:120","prim@char":"1:12298:409","str::split":"2:11478:25170"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"RSplit","id":"2:50104:7622","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11135:7635","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"2:11135:7635","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11150:7636","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"5:5096:2140":{"id":"5:5096:2140","crate_id":5,"name":"replace","span":null,"visibility":"public","docs":"Replaces all matches of a pattern with another string.\n\n`replace` creates a new [`String`], and copies the data from this string slice into it.\nWhile doing so, it attempts to find matches of a pattern. If it finds any, it\nreplaces them with the replacement string slice.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"this is old\";\n\nassert_eq!(\"this is new\", s.replace(\"old\", \"new\"));\nassert_eq!(\"than an old\", s.replace(\"is\", \"an\"));\n```\n\nWhen the pattern doesn't match:\n\n```\nlet s = \"this is old\";\nassert_eq!(s, s.replace(\"cookie monster\", \"little lamb\"));\n```","links":{"`String`":"5:6969:221"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the replaced string as a new allocation, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["from",{"kind":"generic","inner":"P"}],["to",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:6969:221","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11135:7635","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11534:25183":{"id":"2:11534:25183","crate_id":2,"name":"strip_suffix","span":null,"visibility":"public","docs":"Returns a string slice with the suffix removed.\n\nIf the string ends with the pattern `suffix`, returns the substring before the suffix,\nwrapped in `Some`.  Unlike `trim_end_matches`, this method removes the suffix exactly once.\n\nIf the string does not end with `suffix`, returns `None`.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nassert_eq!(\"bar:foo\".strip_suffix(\":foo\"), Some(\"bar\"));\nassert_eq!(\"bar:foo\".strip_suffix(\"bar\"), None);\nassert_eq!(\"foofoo\".strip_suffix(\"foo\"), Some(\"foo\"));\n```","links":{"self::pattern":"2:11130:7639","prim@char":"1:12298:409"},"attrs":["#[must_use =\n\"this returns the remaining substring as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["suffix",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:48110:178","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11135:7635","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"2:11135:7635","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11150:7636","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11525:31134":{"id":"2:11525:31134","crate_id":2,"name":"trim_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes and suffixes that match a\npattern repeatedly removed.\n\nThe [pattern] can be a [`char`], a slice of [`char`]s, or a function\nor closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_matches('1'), \"foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_matches(char::is_numeric), \"foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_matches(x), \"foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1foo1barXX\".trim_matches(|c| c == '1' || c == 'X'), \"foo1bar\");\n```","links":{"self::pattern":"2:11130:7639","prim@char":"1:12298:409"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11135:7635","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"2:11135:7635","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"DoubleEndedSearcher","id":"2:11155:7634","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11429:796":{"id":"2:11429:796","crate_id":2,"name":"len","span":null,"visibility":"public","docs":"Returns the length of `self`.\n\nThis length is in bytes, not [`char`]s or graphemes. In other words,\nit might not be what a human considers the length of the string.\n\n[`char`]: prim@char\n\n# Examples\n\nBasic usage:\n\n```\nlet len = \"foo\".len();\nassert_eq!(3, len);\n\nassert_eq!(\"∆íoo\".len(), 4); // fancy f!\nassert_eq!(\"∆íoo\".chars().count(), 3);\n```","links":{"prim@char":"1:12298:409"},"attrs":["#[must_use]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11490:31123":{"id":"2:11490:31123","crate_id":2,"name":"rsplit_terminator","span":null,"visibility":"public","docs":"An iterator over substrings of `self`, separated by characters\nmatched by a pattern and yielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\nEquivalent to [`split`], except that the trailing substring is\nskipped if empty.\n\n[`split`]: str::split\n\nThis method can be used for string data that is _terminated_,\nrather than _separated_ by a pattern.\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a\nreverse search, and it will be double ended if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`split_terminator`] method can be\nused.\n\n[`split_terminator`]: str::split_terminator\n\n# Examples\n\n```\nlet v: Vec<&str> = \"A.B.\".rsplit_terminator('.').collect();\nassert_eq!(v, [\"B\", \"A\"]);\n\nlet v: Vec<&str> = \"A..B..\".rsplit_terminator(\".\").collect();\nassert_eq!(v, [\"\", \"B\", \"\", \"A\"]);\n\nlet v: Vec<&str> = \"A.B:C.D\".rsplit_terminator(&['.', ':'][..]).collect();\nassert_eq!(v, [\"D\", \"C\", \"B\", \"A\"]);\n```","links":{"self::pattern":"2:11130:7639","prim@char":"1:12298:409","str::split":"2:11478:25170","str::split_terminator":"2:11487:31122"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"RSplitTerminator","id":"2:50154:7678","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11135:7635","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"2:11135:7635","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11150:7636","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11523:31132":{"id":"2:11523:31132","crate_id":2,"name":"trim_left","span":null,"visibility":"public","docs":"Returns a string slice with leading whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`.\n\n# Text directionality\n\nA string is a sequence of bytes. 'Left' in this context means the first\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _right_ side, not the left.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \" Hello\\tworld\\t\";\n\nassert_eq!(\"Hello\\tworld\\t\", s.trim_left());\n```\n\nDirectionality:\n\n```\nlet s = \"  English\";\nassert!(Some('E') == s.trim_left().chars().next());\n\nlet s = \"  ◊¢◊ë◊®◊ô◊™\";\nassert!(Some('◊¢') == s.trim_left().chars().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_start`\", suggestion\n= \"trim_start\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_start`"},"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11445:25138":{"id":"2:11445:25138","crate_id":2,"name":"get_unchecked","span":null,"visibility":"public","docs":"Returns an unchecked subslice of `str`.\n\nThis is the unchecked alternative to indexing the `str`.\n\n# Safety\n\nCallers of this function are responsible that these preconditions are\nsatisfied:\n\n* The starting index must not exceed the ending index;\n* Indexes must be within bounds of the original slice;\n* Indexes must lie on UTF-8 sequence boundaries.\n\nFailing that, the returned string slice may reference invalid memory or\nviolate the invariants communicated by the `str` type.\n\n# Examples\n\n```\nlet v = \"üóª‚ààüåè\";\nunsafe {\n    assert_eq!(\"üóª\", v.get_unchecked(0..4));\n    assert_eq!(\"‚àà\", v.get_unchecked(4..7));\n    assert_eq!(\"üåè\", v.get_unchecked(7..11));\n}\n```","links":{},"attrs":["#[rustc_const_unstable(feature = \"const_slice_index\", issue = \"none\")]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["i",{"kind":"generic","inner":"I"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"qualified_path","inner":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"I"},"trait":{"name":"SliceIndex","id":"2:9312:219","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}}}}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"2:9312:219","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}},"2:11511:31127":{"id":"2:11511:31127","crate_id":2,"name":"match_indices","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within this string\nslice as well as the index that the match starts at.\n\nFor matches of `pat` within `self` that overlap, only the indices\ncorresponding to the first match are returned.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rmatch_indices`] method can be used.\n\n[`rmatch_indices`]: str::rmatch_indices\n\n# Examples\n\nBasic usage:\n\n```\nlet v: Vec<_> = \"abcXXXabcYYYabc\".match_indices(\"abc\").collect();\nassert_eq!(v, [(0, \"abc\"), (6, \"abc\"), (12, \"abc\")]);\n\nlet v: Vec<_> = \"1abcabc2\".match_indices(\"abc\").collect();\nassert_eq!(v, [(1, \"abc\"), (4, \"abc\")]);\n\nlet v: Vec<_> = \"ababa\".match_indices(\"aba\").collect();\nassert_eq!(v, [(0, \"aba\")]); // only the first `aba`\n```","links":{"self::pattern":"2:11130:7639","prim@char":"1:12298:409","str::rmatch_indices":"2:11514:31128","`DoubleEndedIterator`":"2:7086:120"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"MatchIndices","id":"2:50236:7674","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11135:7635","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11537:31136":{"id":"2:11537:31136","crate_id":2,"name":"trim_end_matches","span":null,"visibility":"public","docs":"Returns a string slice with all suffixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. `end` in this context means the last\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be right side, and for right-to-left languages like\nArabic or Hebrew, this will be the left side.\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_end_matches('1'), \"11foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_end_matches(char::is_numeric), \"123foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_end_matches(x), \"12foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1fooX\".trim_end_matches(|c| c == '1' || c == 'X'), \"1foo\");\n```","links":{"self::pattern":"2:11130:7639","prim@char":"1:12298:409"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11135:7635","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"2:11135:7635","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11150:7636","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11453:19505":{"id":"2:11453:19505","crate_id":2,"name":"chars","span":null,"visibility":"public","docs":"Returns an iterator over the [`char`]s of a string slice.\n\nAs a string slice consists of valid UTF-8, we can iterate through a\nstring slice by [`char`]. This method returns such an iterator.\n\nIt's important to remember that [`char`] represents a Unicode Scalar\nValue, and might not match your idea of what a 'character' is. Iteration\nover grapheme clusters may be what you actually want. This functionality\nis not provided by Rust's standard library, check crates.io instead.\n\n# Examples\n\nBasic usage:\n\n```\nlet word = \"goodbye\";\n\nlet count = word.chars().count();\nassert_eq!(7, count);\n\nlet mut chars = word.chars();\n\nassert_eq!(Some('g'), chars.next());\nassert_eq!(Some('o'), chars.next());\nassert_eq!(Some('o'), chars.next());\nassert_eq!(Some('d'), chars.next());\nassert_eq!(Some('b'), chars.next());\nassert_eq!(Some('y'), chars.next());\nassert_eq!(Some('e'), chars.next());\n\nassert_eq!(None, chars.next());\n```\n\nRemember, [`char`]s might not match your intuition about characters:\n\n[`char`]: prim@char\n\n```\nlet y = \"yÃÜ\";\n\nlet mut chars = y.chars();\n\nassert_eq!(Some('y'), chars.next()); // not 'yÃÜ'\nassert_eq!(Some('\\u{0306}'), chars.next());\n\nassert_eq!(None, chars.next());\n```","links":{"prim@char":"1:12298:409"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Chars","id":"2:50056:7666","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11428":{"id":"2:11428","crate_id":2,"name":null,"span":null,"visibility":{"restricted":{"parent":"2:10693:1360","path":"::str"}},"docs":null,"links":{},"attrs":["#[cfg(not(test))]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"kind":"primitive","inner":"str"},"items":["2:11429:796","2:11430:20844","2:11431:31115","2:11432:31116","2:11434:31117","2:11437:24316","2:11438:31118","2:11439:310","2:11440:25140","2:11441:25136","2:11443:25137","2:11445:25138","2:11447:25139","2:11449:31119","2:11450:31120","2:11451:25162","2:11452:25163","2:11453:19505","2:11454:19414","2:11455:19570","2:11456:27783","2:11457:27799","2:11458:19697","2:11459:31121","2:11460:27798","2:11461:25180","2:11464:25181","2:11467:25182","2:11470:19168","2:11474:19169","2:11478:25170","2:11481:25172","2:11484:25174","2:11487:31122","2:11490:31123","2:11493:25176","2:11496:25178","2:11499:31124","2:11502:31125","2:11505:1844","2:11508:31126","2:11511:31127","2:11514:31128","2:11517:31129","2:11519:31130","2:11521:31131","2:11523:31132","2:11524:31133","2:11525:31134","2:11528:31135","2:11531:20709","2:11534:25183","2:11537:31136","2:11540:31137","2:11543:31138","2:11546:19432","2:11548:19552","2:11549:20587","2:11550:20588","2:11551:20589","2:11552:31139","2:11554:1955","2:11555:31140"],"negative":false,"synthetic":false,"blanket_impl":null}},"2:11517:31129":{"id":"2:11517:31129","crate_id":2,"name":"trim","span":null,"visibility":"public","docs":"Returns a string slice with leading and trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\n\nassert_eq!(\"Hello\\tworld\", s.trim());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a slice, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_trim\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11430:20844":{"id":"2:11430:20844","crate_id":2,"name":"is_empty","span":null,"visibility":"public","docs":"Returns `true` if `self` has a length of zero bytes.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\";\nassert!(s.is_empty());\n\nlet s = \"not empty\";\nassert!(!s.is_empty());\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11450:31120":{"id":"2:11450:31120","crate_id":2,"name":"slice_mut_unchecked","span":null,"visibility":"public","docs":"Creates a string slice from another string slice, bypassing safety\nchecks.\nThis is generally not recommended, use with caution! For a safe\nalternative see [`str`] and [`IndexMut`].\n\n[`IndexMut`]: crate::ops::IndexMut\n\nThis new slice goes from `begin` to `end`, including `begin` but\nexcluding `end`.\n\nTo get an immutable string slice instead, see the\n[`slice_unchecked`] method.\n\n[`slice_unchecked`]: str::slice_unchecked\n\n# Safety\n\nCallers of this function are responsible that three preconditions are\nsatisfied:\n\n* `begin` must not exceed `end`.\n* `begin` and `end` must be byte positions within the string slice.\n* `begin` and `end` must lie on UTF-8 sequence boundaries.","links":{"`str`":"1:12304:1360","crate::ops::IndexMut":"2:2986:2032","str::slice_unchecked":"2:11449:31119"},"attrs":["#[deprecated(since = \"1.29.0\", note =\n\"use `get_unchecked_mut(begin..end)` instead\")]"],"deprecation":{"since":"1.29.0","note":"use `get_unchecked_mut(begin..end)` instead"},"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["begin",{"kind":"primitive","inner":"usize"}],["end",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}},"5:5110:31792":{"id":"5:5110:31792","crate_id":5,"name":"to_uppercase","span":null,"visibility":"public","docs":"Returns the uppercase equivalent of this string slice, as a new [`String`].\n\n'Uppercase' is defined according to the terms of the Unicode Derived Core Property\n`Uppercase`.\n\nSince some characters can expand into multiple characters when changing\nthe case, this function returns a [`String`] instead of modifying the\nparameter in-place.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"hello\";\n\nassert_eq!(\"HELLO\", s.to_uppercase());\n```\n\nScripts without case are not changed:\n\n```\nlet new_year = \"ÂÜúÂéÜÊñ∞Âπ¥\";\n\nassert_eq!(new_year, new_year.to_uppercase());\n```\n\nOne character can become multiple:\n```\nlet s = \"tsch√º√ü\";\n\nassert_eq!(\"TSCH√úSS\", s.to_uppercase());\n```","links":{"`String`":"5:6969:221"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the uppercase string as a new String, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:6969:221","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11487:31122":{"id":"2:11487:31122","crate_id":2,"name":"split_terminator","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by\ncharacters matched by a pattern.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\nEquivalent to [`split`], except that the trailing substring\nis skipped if empty.\n\n[`split`]: str::split\n\nThis method can be used for string data that is _terminated_,\nrather than _separated_ by a pattern.\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rsplit_terminator`] method can be used.\n\n[`rsplit_terminator`]: str::rsplit_terminator\n\n# Examples\n\nBasic usage:\n\n```\nlet v: Vec<&str> = \"A.B.\".split_terminator('.').collect();\nassert_eq!(v, [\"A\", \"B\"]);\n\nlet v: Vec<&str> = \"A..B..\".split_terminator(\".\").collect();\nassert_eq!(v, [\"A\", \"\", \"B\", \"\"]);\n\nlet v: Vec<&str> = \"A.B:C.D\".split_terminator(&['.', ':'][..]).collect();\nassert_eq!(v, [\"A\", \"B\", \"C\", \"D\"]);\n```","links":{"`DoubleEndedIterator`":"2:7086:120","str::rsplit_terminator":"2:11490:31123","str::split":"2:11478:25170","self::pattern":"2:11130:7639","prim@char":"1:12298:409"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"SplitTerminator","id":"2:50136:7679","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11135:7635","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11456:27783":{"id":"2:11456:27783","crate_id":2,"name":"split_whitespace","span":null,"visibility":"public","docs":"Splits a string slice by whitespace.\n\nThe iterator returned will return string slices that are sub-slices of\nthe original string slice, separated by any amount of whitespace.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`. If you only want to split on ASCII whitespace\ninstead, use [`split_ascii_whitespace`].\n\n[`split_ascii_whitespace`]: str::split_ascii_whitespace\n\n# Examples\n\nBasic usage:\n\n```\nlet mut iter = \"A few words\".split_whitespace();\n\nassert_eq!(Some(\"A\"), iter.next());\nassert_eq!(Some(\"few\"), iter.next());\nassert_eq!(Some(\"words\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nAll kinds of whitespace are considered:\n\n```\nlet mut iter = \" Mary   had\\ta\\u{2009}little  \\n\\t lamb\".split_whitespace();\nassert_eq!(Some(\"Mary\"), iter.next());\nassert_eq!(Some(\"had\"), iter.next());\nassert_eq!(Some(\"a\"), iter.next());\nassert_eq!(Some(\"little\"), iter.next());\nassert_eq!(Some(\"lamb\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nIf the string is empty or all whitespace, the iterator yields no string slices:\n```\nassert_eq!(\"\".split_whitespace().next(), None);\nassert_eq!(\"   \".split_whitespace().next(), None);\n```","links":{"str::split_ascii_whitespace":"2:11457:27799"},"attrs":["#[must_use =\n\"this returns the split string as an iterator, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_split_whitespace\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"SplitWhitespace","id":"2:50360:7662","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11543:31138":{"id":"2:11543:31138","crate_id":2,"name":"trim_right_matches","span":null,"visibility":"public","docs":"Returns a string slice with all suffixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. 'Right' in this context means the last\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _left_ side, not the right.\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_right_matches('1'), \"11foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_right_matches(char::is_numeric), \"123foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_right_matches(x), \"12foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1fooX\".trim_right_matches(|c| c == '1' || c == 'X'), \"1foo\");\n```","links":{"self::pattern":"2:11130:7639","prim@char":"1:12298:409"},"attrs":["#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_end_matches`\",\nsuggestion = \"trim_end_matches\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_end_matches`"},"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11135:7635","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"2:11135:7635","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11150:7636","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11437:24316":{"id":"2:11437:24316","crate_id":2,"name":"as_bytes","span":null,"visibility":"public","docs":"Converts a string slice to a byte slice. To convert the byte slice back\ninto a string slice, use the [`from_utf8`] function.\n\n# Examples\n\nBasic usage:\n\n```\nlet bytes = \"bors\".as_bytes();\nassert_eq!(b\"bors\", bytes);\n```","links":{"`from_utf8`":"2:10698:7663"},"attrs":["#[must_use]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"slice","inner":{"kind":"primitive","inner":"u8"}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11508:31126":{"id":"2:11508:31126","crate_id":2,"name":"rmatches","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within this string slice,\nyielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`matches`] method can be used.\n\n[`matches`]: str::matches\n\n# Examples\n\nBasic usage:\n\n```\nlet v: Vec<&str> = \"abcXXXabcYYYabc\".rmatches(\"abc\").collect();\nassert_eq!(v, [\"abc\", \"abc\", \"abc\"]);\n\nlet v: Vec<&str> = \"1abc2abc3\".rmatches(char::is_numeric).collect();\nassert_eq!(v, [\"3\", \"2\", \"1\"]);\n```","links":{"`DoubleEndedIterator`":"2:7086:120","prim@char":"1:12298:409","self::pattern":"2:11130:7639","str::matches":"2:11505:1844"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"RMatches","id":"2:50308:7677","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11135:7635","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"2:11135:7635","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11150:7636","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11470:19168":{"id":"2:11470:19168","crate_id":2,"name":"find","span":null,"visibility":"public","docs":"Returns the byte index of the first character of this string slice that\nmatches the pattern.\n\nReturns [`None`] if the pattern doesn't match.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nlet s = \"L√∂we ËÄÅËôé L√©opard Gepardi\";\n\nassert_eq!(s.find('L'), Some(0));\nassert_eq!(s.find('√©'), Some(14));\nassert_eq!(s.find(\"pard\"), Some(17));\n```\n\nMore complex patterns using point-free style and closures:\n\n```\nlet s = \"L√∂we ËÄÅËôé L√©opard\";\n\nassert_eq!(s.find(char::is_whitespace), Some(5));\nassert_eq!(s.find(char::is_lowercase), Some(1));\nassert_eq!(s.find(|c: char| c.is_whitespace() || c.is_lowercase()), Some(1));\nassert_eq!(s.find(|c: char| (c < 'o') && (c > 'a')), Some(4));\n```\n\nNot finding the pattern:\n\n```\nlet s = \"L√∂we ËÄÅËôé L√©opard\";\nlet x: &[_] = &['1', '2'];\n\nassert_eq!(s.find(x), None);\n```","links":{"prim@char":"1:12298:409","`None`":"2:48112:176","self::pattern":"2:11130:7639"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:48110:178","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11135:7635","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11432:31116":{"id":"2:11432:31116","crate_id":2,"name":"floor_char_boundary","span":null,"visibility":"public","docs":"Finds the closest `x` not exceeding `index` where `is_char_boundary(x)` is `true`.\n\nThis method can help you truncate a string so that it's still valid UTF-8, but doesn't\nexceed a given number of bytes. Note that this is done purely at the character level\nand can still visually split graphemes, even though the underlying characters aren't\nsplit. For example, the emoji üßë‚Äçüî¨ (scientist) could be split so that the string only\nincludes üßë (person) instead.\n\n# Examples\n\n```\n#![feature(round_char_boundary)]\nlet s = \"‚ù§Ô∏èüß°üíõüíöüíôüíú\";\nassert_eq!(s.len(), 26);\nassert!(!s.is_char_boundary(13));\n\nlet closest = s.floor_char_boundary(13);\nassert_eq!(closest, 10);\nassert_eq!(&s[..closest], \"‚ù§Ô∏èüß°\");\n```","links":{},"attrs":["#[unstable(feature = \"round_char_boundary\", issue = \"93743\")]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["index",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"primitive","inner":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11554:1955":{"id":"2:11554:1955","crate_id":2,"name":"escape_default","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_default`].\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"‚ù§\\n!\".escape_default() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"‚ù§\\n!\".escape_default());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"\\\\u{{2764}}\\\\n!\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"‚ù§\\n!\".escape_default().to_string(), \"\\\\u{2764}\\\\n!\");\n```","links":{"`char::escape_default`":"2:4475:1955"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"EscapeDefault","id":"2:50394:1956","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11546:19432":{"id":"2:11546:19432","crate_id":2,"name":"parse","span":null,"visibility":"public","docs":"Parses this string slice into another type.\n\nBecause `parse` is so general, it can cause problems with type\ninference. As such, `parse` is one of the few times you'll see\nthe syntax affectionately known as the 'turbofish': `::<>`. This\nhelps the inference algorithm understand specifically which type\nyou're trying to parse into.\n\n`parse` can parse into any type that implements the [`FromStr`] trait.\n\n# Errors\n\nWill return [`Err`] if it's not possible to parse this string slice into\nthe desired type.\n\n[`Err`]: FromStr::Err\n\n# Examples\n\nBasic usage\n\n```\nlet four: u32 = \"4\".parse().unwrap();\n\nassert_eq!(4, four);\n```\n\nUsing the 'turbofish' instead of annotating `four`:\n\n```\nlet four = \"4\".parse::<u32>();\n\nassert_eq!(Ok(4), four);\n```\n\nFailing to parse:\n\n```\nlet nope = \"j\".parse::<u32>();\n\nassert!(nope.is_err());\n```","links":{"`FromStr`":"2:11091:2313","FromStr::Err":"2:11092:126"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Result","id":"2:48254:207","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"F"}},{"type":{"kind":"qualified_path","inner":{"name":"Err","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"F"},"trait":{"name":"FromStr","id":"2:11091:2313","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"F"},"bounds":[{"trait_bound":{"trait":{"name":"FromStr","id":"2:11091:2313","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11496:25178":{"id":"2:11496:25178","crate_id":2,"name":"rsplitn","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by a\npattern, starting from the end of the string, restricted to returning\nat most `n` items.\n\nIf `n` substrings are returned, the last substring (the `n`th substring)\nwill contain the remainder of the string.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will not be double ended, because it is not\nefficient to support.\n\nFor splitting from the front, the [`splitn`] method can be used.\n\n[`splitn`]: str::splitn\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".rsplitn(3, ' ').collect();\nassert_eq!(v, [\"lamb\", \"little\", \"Mary had a\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".rsplitn(3, 'X').collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"lionX\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".rsplitn(2, \"::\").collect();\nassert_eq!(v, [\"leopard\", \"lion::tiger\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".rsplitn(2, |c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"ghi\", \"abc1def\"]);\n```","links":{"self::pattern":"2:11130:7639","prim@char":"1:12298:409","str::splitn":"2:11493:25176"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["n",{"kind":"primitive","inner":"usize"}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"RSplitN","id":"2:50208:7624","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11135:7635","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"2:11135:7635","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11150:7636","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11531:20709":{"id":"2:11531:20709","crate_id":2,"name":"strip_prefix","span":null,"visibility":"public","docs":"Returns a string slice with the prefix removed.\n\nIf the string starts with the pattern `prefix`, returns substring after the prefix, wrapped\nin `Some`.  Unlike `trim_start_matches`, this method removes the prefix exactly once.\n\nIf the string does not start with `prefix`, returns `None`.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nassert_eq!(\"foo:bar\".strip_prefix(\"foo:\"), Some(\"bar\"));\nassert_eq!(\"foo:bar\".strip_prefix(\"bar\"), None);\nassert_eq!(\"foofoo\".strip_prefix(\"foo\"), Some(\"foo\"));\n```","links":{"self::pattern":"2:11130:7639","prim@char":"1:12298:409"},"attrs":["#[must_use =\n\"this returns the remaining substring as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["prefix",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:48110:178","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11135:7635","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11438:31118":{"id":"2:11438:31118","crate_id":2,"name":"as_bytes_mut","span":null,"visibility":"public","docs":"Converts a mutable string slice to a mutable byte slice.\n\n# Safety\n\nThe caller must ensure that the content of the slice is valid UTF-8\nbefore the borrow ends and the underlying `str` is used.\n\nUse of a `str` whose contents are not valid UTF-8 is undefined behavior.\n\n# Examples\n\nBasic usage:\n\n```\nlet mut s = String::from(\"Hello\");\nlet bytes = unsafe { s.as_bytes_mut() };\n\nassert_eq!(b\"Hello\", bytes);\n```\n\nMutability:\n\n```\nlet mut s = String::from(\"üóª‚ààüåè\");\n\nunsafe {\n    let bytes = s.as_bytes_mut();\n\n    bytes[0] = 0xF0;\n    bytes[1] = 0x9F;\n    bytes[2] = 0x8D;\n    bytes[3] = 0x94;\n}\n\nassert_eq!(\"üçî‚ààüåè\", s);\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"slice","inner":{"kind":"primitive","inner":"u8"}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}},"0:0:1630":{"id":"0:0:1630","crate_id":0,"name":"winapi","span":{"filename":"src/lib.rs","begin":[6,0],"end":[71,1]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"module","inner":{"is_crate":true,"items":[],"is_stripped":false}},"2:11555:31140":{"id":"2:11555:31140","crate_id":2,"name":"escape_unicode","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_unicode`].\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"‚ù§\\n!\".escape_unicode() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"‚ù§\\n!\".escape_unicode());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"\\\\u{{2764}}\\\\u{{a}}\\\\u{{21}}\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"‚ù§\\n!\".escape_unicode().to_string(), \"\\\\u{2764}\\\\u{a}\\\\u{21}\");\n```","links":{"`char::escape_unicode`":"2:4472:31140"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"EscapeUnicode","id":"2:50403:7671","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11493:25176":{"id":"2:11493:25176","crate_id":2,"name":"splitn","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by a\npattern, restricted to returning at most `n` items.\n\nIf `n` substrings are returned, the last substring (the `n`th substring)\nwill contain the remainder of the string.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will not be double ended, because it is\nnot efficient to support.\n\nIf the pattern allows a reverse search, the [`rsplitn`] method can be\nused.\n\n[`rsplitn`]: str::rsplitn\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lambda\".splitn(3, ' ').collect();\nassert_eq!(v, [\"Mary\", \"had\", \"a little lambda\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".splitn(3, \"X\").collect();\nassert_eq!(v, [\"lion\", \"\", \"tigerXleopard\"]);\n\nlet v: Vec<&str> = \"abcXdef\".splitn(1, 'X').collect();\nassert_eq!(v, [\"abcXdef\"]);\n\nlet v: Vec<&str> = \"\".splitn(1, 'X').collect();\nassert_eq!(v, [\"\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".splitn(2, |c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"abc\", \"defXghi\"]);\n```","links":{"str::rsplitn":"2:11496:25178","self::pattern":"2:11130:7639","prim@char":"1:12298:409"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["n",{"kind":"primitive","inner":"usize"}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"SplitN","id":"2:50190:7626","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11135:7635","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11548:19552":{"id":"2:11548:19552","crate_id":2,"name":"is_ascii","span":null,"visibility":"public","docs":"Checks if all characters in this string are within the ASCII range.\n\n# Examples\n\n```\nlet ascii = \"hello!\\n\";\nlet non_ascii = \"Gr√º√üe, J√ºrgen ‚ù§\";\n\nassert!(ascii.is_ascii());\nassert!(!non_ascii.is_ascii());\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11464:25181":{"id":"2:11464:25181","crate_id":2,"name":"starts_with","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a prefix of this\nstring slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nBasic usage:\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.starts_with(\"bana\"));\nassert!(!bananas.starts_with(\"nana\"));\n```","links":{"prim@char":"1:12298:409","self::pattern":"2:11130:7639"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11135:7635","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11459:31121":{"id":"2:11459:31121","crate_id":2,"name":"lines_any","span":null,"visibility":"public","docs":"An iterator over the lines of a string.","links":{},"attrs":["#[deprecated(since = \"1.4.0\", note = \"use lines() instead now\")]"],"deprecation":{"since":"1.4.0","note":"use lines() instead now"},"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"LinesAny","id":"2:50350:7673","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11460:27798":{"id":"2:11460:27798","crate_id":2,"name":"encode_utf16","span":null,"visibility":"public","docs":"Returns an iterator of `u16` over the string encoded as UTF-16.\n\n# Examples\n\nBasic usage:\n\n```\nlet text = \"Za≈º√≥≈Çƒá gƒô≈õlƒÖ ja≈∫≈Ñ\";\n\nlet utf8_len = text.len();\nlet utf16_len = text.encode_utf16().count();\n\nassert!(utf16_len <= utf8_len);\n```","links":{},"attrs":["#[must_use =\n\"this returns the encoded string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"EncodeUtf16","id":"2:50378:7660","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11467:25182":{"id":"2:11467:25182","crate_id":2,"name":"ends_with","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a suffix of this\nstring slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nBasic usage:\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.ends_with(\"anas\"));\nassert!(!bananas.ends_with(\"nana\"));\n```","links":{"self::pattern":"2:11130:7639","prim@char":"1:12298:409"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11135:7635","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"2:11135:7635","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11150:7636","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11441:25136":{"id":"2:11441:25136","crate_id":2,"name":"get","span":null,"visibility":"public","docs":"Returns a subslice of `str`.\n\nThis is the non-panicking alternative to indexing the `str`. Returns\n[`None`] whenever equivalent indexing operation would panic.\n\n# Examples\n\n```\nlet v = String::from(\"üóª‚ààüåè\");\n\nassert_eq!(Some(\"üóª\"), v.get(0..4));\n\n// indices not on UTF-8 sequence boundaries\nassert!(v.get(1..).is_none());\nassert!(v.get(..8).is_none());\n\n// out of bounds\nassert!(v.get(..42).is_none());\n```","links":{"`None`":"2:48112:176"},"attrs":["#[rustc_const_unstable(feature = \"const_slice_index\", issue = \"none\")]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["i",{"kind":"generic","inner":"I"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:48110:178","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"qualified_path","inner":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"I"},"trait":{"name":"SliceIndex","id":"2:9312:219","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}}}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"2:9312:219","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11461:25180":{"id":"2:11461:25180","crate_id":2,"name":"contains","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a sub-slice of\nthis string slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nBasic usage:\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.contains(\"nana\"));\nassert!(!bananas.contains(\"apples\"));\n```","links":{"prim@char":"1:12298:409","self::pattern":"2:11130:7639"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11135:7635","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"5:5111:31793":{"id":"5:5111:31793","crate_id":5,"name":"into_string","span":null,"visibility":"public","docs":"Converts a [`Box<str>`] into a [`String`] without copying or allocating.\n\n# Examples\n\nBasic usage:\n\n```\nlet string = String::from(\"birthday gift\");\nlet boxed_str = string.clone().into_boxed_str();\n\nassert_eq!(boxed_str.into_string(), string);\n```","links":{"`Box<str>`":"5:286:1875","`String`":"5:6969:221"},"attrs":["#[must_use = \"`self` will be dropped if the result is not used\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"resolved_path","inner":{"name":"Box","id":"5:286:1875","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}},{"type":{"kind":"resolved_path","inner":{"name":"Global","id":"5:6720:2035","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:6969:221","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11452:25163":{"id":"2:11452:25163","crate_id":2,"name":"split_at_mut","span":null,"visibility":"public","docs":"Divide one mutable string slice into two at an index.\n\nThe argument, `mid`, should be a byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get immutable string slices instead, see the [`split_at`] method.\n\n[`split_at`]: str::split_at\n\n# Panics\n\nPanics if `mid` is not on a UTF-8 code point boundary, or if it is\npast the end of the last code point of the string slice.\n\n# Examples\n\nBasic usage:\n\n```\nlet mut s = \"Per Martin-L√∂f\".to_string();\n{\n    let (first, last) = s.split_at_mut(3);\n    first.make_ascii_uppercase();\n    assert_eq!(\"PER\", first);\n    assert_eq!(\" Martin-L√∂f\", last);\n}\nassert_eq!(\"PER Martin-L√∂f\", s);\n```","links":{"str::split_at":"2:11451:25162"},"attrs":["#[must_use]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["mid",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"tuple","inner":[{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"primitive","inner":"str"}}},{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"primitive","inner":"str"}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11434:31117":{"id":"2:11434:31117","crate_id":2,"name":"ceil_char_boundary","span":null,"visibility":"public","docs":"Finds the closest `x` not below `index` where `is_char_boundary(x)` is `true`.\n\nThis method is the natural complement to [`floor_char_boundary`]. See that method\nfor more details.\n\n[`floor_char_boundary`]: str::floor_char_boundary\n\n# Panics\n\nPanics if `index > self.len()`.\n\n# Examples\n\n```\n#![feature(round_char_boundary)]\nlet s = \"‚ù§Ô∏èüß°üíõüíöüíôüíú\";\nassert_eq!(s.len(), 26);\nassert!(!s.is_char_boundary(13));\n\nlet closest = s.ceil_char_boundary(13);\nassert_eq!(closest, 14);\nassert_eq!(&s[..closest], \"‚ù§Ô∏èüß°üíõ\");\n```","links":{"str::floor_char_boundary":"2:11432:31116"},"attrs":["#[unstable(feature = \"round_char_boundary\", issue = \"93743\")]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["index",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"primitive","inner":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"5:5102:31791":{"id":"5:5102:31791","crate_id":5,"name":"to_lowercase","span":null,"visibility":"public","docs":"Returns the lowercase equivalent of this string slice, as a new [`String`].\n\n'Lowercase' is defined according to the terms of the Unicode Derived Core Property\n`Lowercase`.\n\nSince some characters can expand into multiple characters when changing\nthe case, this function returns a [`String`] instead of modifying the\nparameter in-place.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"HELLO\";\n\nassert_eq!(\"hello\", s.to_lowercase());\n```\n\nA tricky example, with sigma:\n\n```\nlet sigma = \"Œ£\";\n\nassert_eq!(\"œÉ\", sigma.to_lowercase());\n\n// but at the end of a word, it's œÇ, not œÉ:\nlet odysseus = \"·ΩàŒîŒ•Œ£Œ£ŒïŒéŒ£\";\n\nassert_eq!(\"·ΩÄŒ¥œÖœÉœÉŒµœçœÇ\", odysseus.to_lowercase());\n```\n\nLanguages without case are not changed:\n\n```\nlet new_year = \"ÂÜúÂéÜÊñ∞Âπ¥\";\n\nassert_eq!(new_year, new_year.to_lowercase());\n```","links":{"`String`":"5:6969:221"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the lowercase string as a new String, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:6969:221","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11449:31119":{"id":"2:11449:31119","crate_id":2,"name":"slice_unchecked","span":null,"visibility":"public","docs":"Creates a string slice from another string slice, bypassing safety\nchecks.\n\nThis is generally not recommended, use with caution! For a safe\nalternative see [`str`] and [`Index`].\n\n[`Index`]: crate::ops::Index\n\nThis new slice goes from `begin` to `end`, including `begin` but\nexcluding `end`.\n\nTo get a mutable string slice instead, see the\n[`slice_mut_unchecked`] method.\n\n[`slice_mut_unchecked`]: str::slice_mut_unchecked\n\n# Safety\n\nCallers of this function are responsible that three preconditions are\nsatisfied:\n\n* `begin` must not exceed `end`.\n* `begin` and `end` must be byte positions within the string slice.\n* `begin` and `end` must lie on UTF-8 sequence boundaries.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"L√∂we ËÄÅËôé L√©opard\";\n\nunsafe {\n    assert_eq!(\"L√∂we ËÄÅËôé L√©opard\", s.slice_unchecked(0, 21));\n}\n\nlet s = \"Hello, world!\";\n\nunsafe {\n    assert_eq!(\"world\", s.slice_unchecked(7, 12));\n}\n```","links":{"crate::ops::Index":"2:2982:2031","str::slice_mut_unchecked":"2:11450:31120","`str`":"1:12304:1360"},"attrs":["#[deprecated(since = \"1.29.0\", note =\n\"use `get_unchecked(begin..end)` instead\")]","#[must_use]"],"deprecation":{"since":"1.29.0","note":"use `get_unchecked(begin..end)` instead"},"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["begin",{"kind":"primitive","inner":"usize"}],["end",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}},"5:5114:20586":{"id":"5:5114:20586","crate_id":5,"name":"to_ascii_lowercase","span":null,"visibility":"public","docs":"Returns a copy of this string where each character is mapped to its\nASCII lower case equivalent.\n\nASCII letters 'A' to 'Z' are mapped to 'a' to 'z',\nbut non-ASCII letters are unchanged.\n\nTo lowercase the value in-place, use [`make_ascii_lowercase`].\n\nTo lowercase ASCII characters in addition to non-ASCII characters, use\n[`to_lowercase`].\n\n# Examples\n\n```\nlet s = \"Gr√º√üe, J√ºrgen ‚ù§\";\n\nassert_eq!(\"gr√º√üe, j√ºrgen ‚ù§\", s.to_ascii_lowercase());\n```\n\n[`make_ascii_lowercase`]: str::make_ascii_lowercase\n[`to_lowercase`]: #method.to_lowercase","links":{"str::make_ascii_lowercase":"2:11551:20589"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use = \"to lowercase the value in-place, use `make_ascii_lowercase()`\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:6969:221","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11502:31125":{"id":"2:11502:31125","crate_id":2,"name":"rsplit_once","span":null,"visibility":"public","docs":"Splits the string on the last occurrence of the specified delimiter and\nreturns prefix before delimiter and suffix after delimiter.\n\n# Examples\n\n```\nassert_eq!(\"cfg\".rsplit_once('='), None);\nassert_eq!(\"cfg=foo\".rsplit_once('='), Some((\"cfg\", \"foo\")));\nassert_eq!(\"cfg=foo=bar\".rsplit_once('='), Some((\"cfg=foo\", \"bar\")));\n```","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["delimiter",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:48110:178","args":{"angle_bracketed":{"args":[{"type":{"kind":"tuple","inner":[{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}},{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11135:7635","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"2:11135:7635","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11150:7636","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11458:19697":{"id":"2:11458:19697","crate_id":2,"name":"lines","span":null,"visibility":"public","docs":"An iterator over the lines of a string, as string slices.\n\nLines are split at line endings that are either newlines (`\\n`) or\nsequences of a carriage return followed by a line feed (`\\r\\n`).\n\nLine terminators are not included in the lines returned by the iterator.\n\nThe final line ending is optional. A string that ends with a final line\nending will return the same lines as an otherwise identical string\nwithout a final line ending.\n\n# Examples\n\nBasic usage:\n\n```\nlet text = \"foo\\r\\nbar\\n\\nbaz\\n\";\nlet mut lines = text.lines();\n\nassert_eq!(Some(\"foo\"), lines.next());\nassert_eq!(Some(\"bar\"), lines.next());\nassert_eq!(Some(\"\"), lines.next());\nassert_eq!(Some(\"baz\"), lines.next());\n\nassert_eq!(None, lines.next());\n```\n\nThe final line ending isn't required:\n\n```\nlet text = \"foo\\nbar\\n\\r\\nbaz\";\nlet mut lines = text.lines();\n\nassert_eq!(Some(\"foo\"), lines.next());\nassert_eq!(Some(\"bar\"), lines.next());\nassert_eq!(Some(\"\"), lines.next());\nassert_eq!(Some(\"baz\"), lines.next());\n\nassert_eq!(None, lines.next());\n```","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Lines","id":"2:50340:2139","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"paths":{"1:6708:2402":{"crate_id":1,"path":["std","sync","once_lock","OnceLock"],"kind":"struct"},"2:49140:109":{"crate_id":2,"path":["core","fmt","rt","v1","Count"],"kind":"enum"},"16:4413:14555":{"crate_id":16,"path":["gimli","constants","DwVis"],"kind":"struct"},"2:47167:7949":{"crate_id":2,"path":["core","iter","adapters","cloned","Cloned"],"kind":"struct"},"16:3566:14016":{"crate_id":16,"path":["gimli","constants","DwSect"],"kind":"struct"},"1:8740:2274":{"crate_id":1,"path":["std","os","linux","raw","arch","stat"],"kind":"struct"},"2:46944:7767":{"crate_id":2,"path":["core","char","EscapeDefaultState"],"kind":"enum"},"17:8941:15374":{"crate_id":17,"path":["object","read","any","SectionIterator"],"kind":"struct"},"1:1608:1972":{"crate_id":1,"path":["std","collections","hash","set","IntoIter"],"kind":"struct"},"1:11825:2188":{"crate_id":1,"path":["std","sys_common","net","TcpListener"],"kind":"struct"},"1:6639:22582":{"crate_id":1,"path":["std","sync","mutex","fmt","LockedPlaceholder"],"kind":"struct"},"6:4540:12094":{"crate_id":6,"path":["libc","unix","linux_like","linux","arpd_request"],"kind":"struct"},"1:6851:2404":{"crate_id":1,"path":["std","sync","remutex","ReentrantMutexGuard"],"kind":"struct"},"1:7859:23633":{"crate_id":1,"path":["std","thread","local","fast","DtorState"],"kind":"enum"},"18:582:7779":{"crate_id":18,"path":["memchr","memmem","twoway","Reverse"],"kind":"struct"},"1:1615:1976":{"crate_id":1,"path":["std","collections","hash","set","DrainFilter"],"kind":"struct"},"2:2154:578":{"crate_id":2,"path":["core","ptr","drop_in_place"],"kind":"function"},"6:507:8809":{"crate_id":6,"path":["libc","unix","timespec"],"kind":"struct"},"2:8615:119":{"crate_id":2,"path":["core","fmt","Display"],"kind":"trait"},"2:20093:29368":{"crate_id":2,"path":["core","core_simd","swizzle","deinterleave","Even"],"kind":"struct"},"2:50660:7652":{"crate_id":2,"path":["core","str","pattern","StrSearcherImpl"],"kind":"enum"},"2:47214:7959":{"crate_id":2,"path":["core","iter","adapters","filter_map","FilterMap"],"kind":"struct"},"14:215:13987":{"crate_id":14,"path":["rustc_demangle","TryDemangleError"],"kind":"struct"},"16:5628:15008":{"crate_id":16,"path":["gimli","read","cfi","CommonInformationEntry"],"kind":"struct"},"17:9526:15168":{"crate_id":17,"path":["object","read","elf","section","ElfSectionIterator"],"kind":"struct"},"2:20341:2218":{"crate_id":2,"path":["core","core_simd","lane_count","sealed","Sealed"],"kind":"trait"},"1:11069:2273":{"crate_id":1,"path":["std","sys","unix","fd","FileDesc"],"kind":"struct"},"5:870:1970":{"crate_id":5,"path":["alloc","collections","binary_heap","Iter"],"kind":"struct"},"1:11098:2086":{"crate_id":1,"path":["std","sys","unix","fs","OpenOptions"],"kind":"struct"},"2:2675:108":{"crate_id":2,"path":["core","marker","Copy"],"kind":"trait"},"1:2253:2089":{"crate_id":1,"path":["std","fs","read"],"kind":"function"},"6:4329:12075":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_rumble_effect"],"kind":"struct"},"17:13436:19078":{"crate_id":17,"path":["object","pe","ImageEnclaveConfig64"],"kind":"struct"},"2:51811:2490":{"crate_id":2,"path":["core","core_arch","simd","u8x4"],"kind":"struct"},"12:274:32659":{"crate_id":12,"path":["hashbrown","raw","RawIterRange"],"kind":"struct"},"16:7543:14946":{"crate_id":16,"path":["gimli","read","unit","DebugInfo"],"kind":"struct"},"16:7942:15056":{"crate_id":16,"path":["gimli","read","unit","EntriesTreeIter"],"kind":"struct"},"1:1105:1986":{"crate_id":1,"path":["std","collections","hash","map","OccupiedEntry"],"kind":"struct"},"17:11259:15770":{"crate_id":17,"path":["object","elf","Versym"],"kind":"struct"},"17:11368:15800":{"crate_id":17,"path":["object","elf","GnuHashHeader"],"kind":"struct"},"16:5510:15003":{"crate_id":16,"path":["gimli","read","cfi","BaseAddresses"],"kind":"struct"},"17:10332:15320":{"crate_id":17,"path":["object","read","pe","export","ExportTarget"],"kind":"enum"},"5:4105:30557":{"crate_id":5,"path":["alloc","collections","vec_deque","truncate","Dropper"],"kind":"struct"},"2:11150:7636":{"crate_id":2,"path":["core","str","pattern","ReverseSearcher"],"kind":"trait"},"1:3377:2125":{"crate_id":1,"path":["std","io","Guard"],"kind":"struct"},"2:54141:7531":{"crate_id":2,"path":["core","core_arch","x86","__m256d"],"kind":"struct"},"1:4972:2245":{"crate_id":1,"path":["std","os","linux","process","CommandExt"],"kind":"trait"},"1:7847:2218":{"crate_id":1,"path":["std","sealed","Sealed"],"kind":"trait"},"1:5011:2221":{"crate_id":1,"path":["std","os","fd","raw","FromRawFd"],"kind":"trait"},"16:6241:15026":{"crate_id":16,"path":["gimli","read","aranges","ArangeEntryIter"],"kind":"struct"},"17:11125:15568":{"crate_id":17,"path":["object","elf","Syminfo32"],"kind":"struct"},"9:33:13841":{"crate_id":9,"path":["miniz_oxide","deflate","buffer","LocalBuf"],"kind":"struct"},"12:1138:1988":{"crate_id":12,"path":["hashbrown","map","OccupiedError"],"kind":"struct"},"16:7909:14961":{"crate_id":16,"path":["gimli","read","unit","EntriesTree"],"kind":"struct"},"1:4312:2208":{"crate_id":1,"path":["std","os","unix","fs","DirEntryExt"],"kind":"trait"},"1:11383:24264":{"crate_id":1,"path":["std","sys","unix","process","process_inner","posix_spawn","PosixSpawnFileActions"],"kind":"struct"},"2:52358:2460":{"crate_id":2,"path":["core","core_arch","simd","i16x8"],"kind":"struct"},"2:47124:7601":{"crate_id":2,"path":["core","iter","adapters","array_chunks","ArrayChunks"],"kind":"struct"},"2:2327:186":{"crate_id":2,"path":["core","cmp","PartialOrd"],"kind":"trait"},"9:649:13794":{"crate_id":9,"path":["miniz_oxide","deflate","core","TDEFLStatus"],"kind":"enum"},"17:13158:19018":{"crate_id":17,"path":["object","pe","ImageLoadConfigCodeIntegrity"],"kind":"struct"},"17:12237:18250":{"crate_id":17,"path":["object","macho","FvmfileCommand"],"kind":"struct"},"6:5541:12735":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","termios"],"kind":"struct"},"1:4657:2233":{"crate_id":1,"path":["std","os","unix","net","stream","UnixStream"],"kind":"struct"},"2:2834:8008":{"crate_id":2,"path":["core","ops","bit","Shr"],"kind":"trait"},"16:3188:15092":{"crate_id":16,"path":["gimli","arch","AArch64"],"kind":"struct"},"17:11909:18166":{"crate_id":17,"path":["object","macho","DysymtabCommand"],"kind":"struct"},"5:2747:30413":{"crate_id":5,"path":["alloc","collections","btree","node","marker","ValMut"],"kind":"struct"},"16:7343:14952":{"crate_id":16,"path":["gimli","read","rnglists","DebugRngLists"],"kind":"struct"},"2:7440:7945":{"crate_id":2,"path":["core","iter","traits","marker","TrustedStep"],"kind":"trait"},"6:4139:12055":{"crate_id":6,"path":["libc","unix","linux_like","linux","dqblk"],"kind":"struct"},"17:11800:18159":{"crate_id":17,"path":["object","macho","SubLibraryCommand"],"kind":"struct"},"1:8612:2183":{"crate_id":1,"path":["std","net","socket_addr","SocketAddrV4"],"kind":"struct"},"17:10949:15383":{"crate_id":17,"path":["object","elf","FileHeader32"],"kind":"struct"},"2:49815:19496":{"crate_id":2,"path":["core","slice","iter","GenericSplitN"],"kind":"struct"},"2:2986:2032":{"crate_id":2,"path":["core","ops","index","IndexMut"],"kind":"trait"},"2:54167:7533":{"crate_id":2,"path":["core","core_arch","x86","__m512"],"kind":"struct"},"2:50340:2139":{"crate_id":2,"path":["core","str","iter","Lines"],"kind":"struct"},"2:21291:2194":{"crate_id":2,"path":["core","num","dec2flt","ParseFloatError"],"kind":"struct"},"16:2411:15068":{"crate_id":16,"path":["gimli","common","DebugArangesOffset"],"kind":"struct"},"2:2964:7562":{"crate_id":2,"path":["core","ops","generator","Generator"],"kind":"trait"},"16:3599:14024":{"crate_id":16,"path":["gimli","constants","DwSectV2"],"kind":"struct"},"1:6408:24262":{"crate_id":1,"path":["std","sync","mpmc","waker","SyncWaker"],"kind":"struct"},"2:7086:120":{"crate_id":2,"path":["core","iter","traits","double_ended","DoubleEndedIterator"],"kind":"trait"},"12:1681:143":{"crate_id":12,"path":["hashbrown","set","HashSet"],"kind":"struct"},"6:567:8816":{"crate_id":6,"path":["libc","unix","winsize"],"kind":"struct"},"5:1078:19589":{"crate_id":5,"path":["alloc","collections","btree","dedup_sorted_iter","DedupSortedIter"],"kind":"struct"},"1:6680:2395":{"crate_id":1,"path":["std","sync","once","OnceState"],"kind":"struct"},"16:2631:15077":{"crate_id":16,"path":["gimli","common","RawRangeListsOffset"],"kind":"struct"},"2:46316:7735":{"crate_id":2,"path":["core","ops","control_flow","ControlFlow"],"kind":"enum"},"2:46913:7671":{"crate_id":2,"path":["core","char","EscapeUnicode"],"kind":"struct"},"16:7956:14956":{"crate_id":16,"path":["gimli","read","unit","DebugTypes"],"kind":"struct"},"5:2989:1992":{"crate_id":5,"path":["alloc","collections","btree","set","Intersection"],"kind":"struct"},"1:3594:19243":{"crate_id":1,"path":["std","net","display_buffer","DisplayBuffer"],"kind":"struct"},"16:4385:14551":{"crate_id":16,"path":["gimli","constants","DwAccess"],"kind":"struct"},"6:7237:12251":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_cond_t"],"kind":"struct"},"2:49433:28212":{"crate_id":2,"path":["core","hash","sip","Sip13Rounds"],"kind":"struct"},"16:5203:15059":{"crate_id":16,"path":["gimli","endianity","LittleEndian"],"kind":"struct"},"2:51008:192":{"crate_id":2,"path":["core","task","poll","Poll"],"kind":"enum"},"1:12316:1453":{"crate_id":1,"path":["std","u16"],"kind":"primitive"},"2:2927:1870":{"crate_id":2,"path":["core","ops","function","Fn"],"kind":"trait"},"16:3689:14042":{"crate_id":16,"path":["gimli","constants","DwCfa"],"kind":"struct"},"6:5741:12750":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ptrace_syscall_info"],"kind":"struct"},"17:8701:15114":{"crate_id":17,"path":["object","endian","I64Bytes"],"kind":"struct"},"14:0:1734":{"crate_id":14,"path":["rustc_demangle"],"kind":"module"},"17:12609:18390":{"crate_id":17,"path":["object","pe","MaskedRichHeaderEntry"],"kind":"struct"},"1:7895:1933":{"crate_id":1,"path":["std","thread","Thread"],"kind":"struct"},"6:4797:12122":{"crate_id":6,"path":["libc","unix","linux_like","linux","ifreq"],"kind":"struct"},"1:11468:24037":{"crate_id":1,"path":["std","sys","unix","thread","cgroups","Cgroup"],"kind":"enum"},"6:7243:12252":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_mutex_t"],"kind":"struct"},"17:12730:18451":{"crate_id":17,"path":["object","pe","ImageNtHeaders64"],"kind":"struct"},"2:39394:8069":{"crate_id":2,"path":["core","error","Source"],"kind":"struct"},"16:3854:14078":{"crate_id":16,"path":["gimli","constants","DwTag"],"kind":"struct"},"6:6572:13171":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ucontext_t"],"kind":"struct"},"1:7848:1951":{"crate_id":1,"path":["std","thread","local","AccessError"],"kind":"struct"},"12:2080:1987":{"crate_id":12,"path":["hashbrown","set","VacantEntry"],"kind":"struct"},"6:5595:12738":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_mmap_hdr"],"kind":"struct"},"17:12934:18614":{"crate_id":17,"path":["object","pe","ImageAuxSymbolSection"],"kind":"struct"},"1:9573:2405":{"crate_id":1,"path":["std","time","SystemTimeError"],"kind":"struct"},"2:53634:2462":{"crate_id":2,"path":["core","core_arch","simd","i16x32"],"kind":"struct"},"9:19:13840":{"crate_id":9,"path":["miniz_oxide","deflate","buffer","HashBuffers"],"kind":"struct"},"12:1832:1970":{"crate_id":12,"path":["hashbrown","set","Iter"],"kind":"struct"},"1:11263:2055":{"crate_id":1,"path":["std","sys","unix","os","JoinPathsError"],"kind":"struct"},"2:21364:28184":{"crate_id":2,"path":["core","num","flt2dec","Sign"],"kind":"enum"},"2:51941:2479":{"crate_id":2,"path":["core","core_arch","simd","u16x4"],"kind":"struct"},"2:50290:7676":{"crate_id":2,"path":["core","str","iter","Matches"],"kind":"struct"},"5:6087:1972":{"crate_id":5,"path":["alloc","vec","into_iter","IntoIter"],"kind":"struct"},"17:10682:15340":{"crate_id":17,"path":["object","read","SymbolMapName"],"kind":"struct"},"17:9805:15270":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCache"],"kind":"struct"},"2:52264:2487":{"crate_id":2,"path":["core","core_arch","simd","u64x2"],"kind":"struct"},"1:3347:2165":{"crate_id":1,"path":["std","io","util","Repeat"],"kind":"struct"},"17:11748:18155":{"crate_id":17,"path":["object","macho","DylibCommand"],"kind":"struct"},"12:1866:1994":{"crate_id":12,"path":["hashbrown","set","SymmetricDifference"],"kind":"struct"},"16:2993:15089":{"crate_id":16,"path":["gimli","common","DwoId"],"kind":"struct"},"2:49904:7613":{"crate_id":2,"path":["core","slice","iter","ChunksExactMut"],"kind":"struct"},"17:11217:15609":{"crate_id":17,"path":["object","elf","ProgramHeader64"],"kind":"struct"},"6:4102:12052":{"crate_id":6,"path":["libc","unix","linux_like","linux","glob_t"],"kind":"struct"},"17:9577:15173":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbolTable"],"kind":"struct"},"1:9252:2327":{"crate_id":1,"path":["std","process","ExitCode"],"kind":"struct"},"5:4042:30557":{"crate_id":5,"path":["alloc","collections","vec_deque","drop","Dropper"],"kind":"struct"},"6:6392:9641":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statvfs64"],"kind":"struct"},"6:4489:2262":{"crate_id":6,"path":["libc","unix","linux_like","linux","ucred"],"kind":"struct"},"2:52609:28163":{"crate_id":2,"path":["core","core_arch","simd","m32x4"],"kind":"struct"},"6:4559:12096":{"crate_id":6,"path":["libc","unix","linux_like","linux","fanotify_response"],"kind":"struct"},"17:11684:18093":{"crate_id":17,"path":["object","macho","Section64"],"kind":"struct"},"16:4786:14655":{"crate_id":16,"path":["gimli","constants","DwLns"],"kind":"struct"},"16:8056:14926":{"crate_id":16,"path":["gimli","read","StoreOnHeap"],"kind":"struct"},"2:48297:1970":{"crate_id":2,"path":["core","result","Iter"],"kind":"struct"},"2:48322:180":{"crate_id":2,"path":["core","sync","atomic","Ordering"],"kind":"enum"},"2:9094:28160":{"crate_id":2,"path":["core","slice","sort","merge","MergeHole"],"kind":"struct"},"16:6619:15035":{"crate_id":16,"path":["gimli","read","line","FileEntry"],"kind":"struct"},"2:2797:8000":{"crate_id":2,"path":["core","ops","arith","DivAssign"],"kind":"trait"},"12:646:1971":{"crate_id":12,"path":["hashbrown","map","IterMut"],"kind":"struct"},"2:2485:74":{"crate_id":2,"path":["core","convert","AsMut"],"kind":"trait"},"2:52632:28221":{"crate_id":2,"path":["core","core_arch","simd","m64x2"],"kind":"struct"},"2:48651:85":{"crate_id":2,"path":["core","sync","atomic","AtomicIsize"],"kind":"struct"},"2:51043:2495":{"crate_id":2,"path":["core","task","wake","RawWaker"],"kind":"struct"},"6:4231:12063":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_event"],"kind":"struct"},"17:9930:15251":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandData"],"kind":"struct"},"17:11639:18086":{"crate_id":17,"path":["object","macho","SegmentCommand64"],"kind":"struct"},"2:50877:2411":{"crate_id":2,"path":["core","time","TryFromFloatSecsError"],"kind":"struct"},"17:11939:18169":{"crate_id":17,"path":["object","macho","DylibTableOfContents"],"kind":"struct"},"6:4294:12071":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_constant_effect"],"kind":"struct"},"6:6302:13156":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","flock64"],"kind":"struct"},"6:6322:13158":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stack_t"],"kind":"struct"},"17:12964:18947":{"crate_id":17,"path":["object","pe","ImageLinenumber"],"kind":"struct"},"2:2823:8005":{"crate_id":2,"path":["core","ops","bit","BitXor"],"kind":"trait"},"1:12311:727":{"crate_id":1,"path":["std","i16"],"kind":"primitive"},"16:6330:15028":{"crate_id":16,"path":["gimli","read","index","UnitIndexSection"],"kind":"struct"},"12:1534:13977":{"crate_id":12,"path":["hashbrown","rustc_entry","RustcOccupiedEntry"],"kind":"struct"},"2:21889:170":{"crate_id":2,"path":["core","num","nonzero","NonZeroI8"],"kind":"struct"},"3:0:433":{"crate_id":3,"path":["compiler_builtins"],"kind":"module"},"2:2579:127":{"crate_id":2,"path":["core","error","Error"],"kind":"trait"},"5:1349:1970":{"crate_id":5,"path":["alloc","collections","btree","map","Iter"],"kind":"struct"},"1:11133:129":{"crate_id":1,"path":["std","sys","unix","fs","FileType"],"kind":"struct"},"17:12046:18176":{"crate_id":17,"path":["object","macho","UuidCommand"],"kind":"struct"},"6:4706:12114":{"crate_id":6,"path":["libc","unix","linux_like","linux","dirent"],"kind":"struct"},"18:491:33614":{"crate_id":18,"path":["memchr","cow","Imp"],"kind":"struct"},"2:47047:8091":{"crate_id":2,"path":["core","ffi","c_str","FromBytesUntilNulError"],"kind":"struct"},"1:5826:2330":{"crate_id":1,"path":["std","process","Termination"],"kind":"trait"},"1:12304:1360":{"crate_id":1,"path":["std","str"],"kind":"primitive"},"2:47361:2135":{"crate_id":2,"path":["core","iter","adapters","take","Take"],"kind":"struct"},"2:52531:28206":{"crate_id":2,"path":["core","core_arch","simd","m8x16"],"kind":"struct"},"5:1387:1973":{"crate_id":5,"path":["alloc","collections","btree","map","Keys"],"kind":"struct"},"5:1227:1986":{"crate_id":5,"path":["alloc","collections","btree","map","entry","OccupiedEntry"],"kind":"struct"},"16:5815:15015":{"crate_id":16,"path":["gimli","read","cfi","CfaRule"],"kind":"enum"},"9:676:13838":{"crate_id":9,"path":["miniz_oxide","deflate","CompressionLevel"],"kind":"enum"},"2:29804:19532":{"crate_id":2,"path":["core","ptr","alignment","AlignmentEnum64"],"kind":"enum"},"2:50889:8179":{"crate_id":2,"path":["core","time","TryFromFloatSecsErrorKind"],"kind":"enum"},"17:562:15366":{"crate_id":17,"path":["object","read","any","Symbol"],"kind":"struct"},"2:21790:174":{"crate_id":2,"path":["core","num","nonzero","NonZeroU64"],"kind":"struct"},"17:9488:15169":{"crate_id":17,"path":["object","read","elf","segment","ElfSegment"],"kind":"struct"},"2:21856:1941":{"crate_id":2,"path":["core","num","nonzero","NonZeroUsize"],"kind":"struct"},"6:1636:9710":{"crate_id":6,"path":["libc","unix","linux_like","in_pktinfo"],"kind":"struct"},"17:8981:15375":{"crate_id":17,"path":["object","read","any","ComdatIterator"],"kind":"struct"},"6:5587:12737":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_mmap_req"],"kind":"struct"},"2:49941:7601":{"crate_id":2,"path":["core","slice","iter","ArrayChunks"],"kind":"struct"},"2:20072:29366":{"crate_id":2,"path":["core","core_simd","swizzle","interleave","Lo"],"kind":"struct"},"2:5464:7951":{"crate_id":2,"path":["core","iter","adapters","flatten","Flatten"],"kind":"struct"},"2:10919:8170":{"crate_id":2,"path":["core","str","iter","MatchesInternal"],"kind":"struct"},"2:8172:79":{"crate_id":2,"path":["core","sync","atomic","AtomicBool"],"kind":"struct"},"1:6495:2337":{"crate_id":1,"path":["std","sync","mpmc","Sender"],"kind":"struct"},"16:4689:14640":{"crate_id":16,"path":["gimli","constants","DwDsc"],"kind":"struct"},"6:4475:12088":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Shdr"],"kind":"struct"},"1:2250:2085":{"crate_id":1,"path":["std","fs","DirEntry"],"kind":"struct"},"6:5713:12746":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ptrace_peeksiginfo_args"],"kind":"struct"},"6:5720:12747":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_entry"],"kind":"struct"},"16:5996:15019":{"crate_id":16,"path":["gimli","read","dwarf","Dwarf"],"kind":"struct"},"1:9514:164":{"crate_id":1,"path":["std","sync","mutex","MutexGuard"],"kind":"struct"},"5:2477:19593":{"crate_id":5,"path":["alloc","collections","btree","node","Handle"],"kind":"struct"},"6:4659:12109":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlattr"],"kind":"struct"},"2:50044:7669":{"crate_id":2,"path":["core","str","error","ParseBoolError"],"kind":"struct"},"1:5574:119":{"crate_id":1,"path":["std","path","Display"],"kind":"struct"},"17:12638:18445":{"crate_id":17,"path":["object","pe","ImageOptionalHeader32"],"kind":"struct"},"5:1370:1972":{"crate_id":5,"path":["alloc","collections","btree","map","IntoIter"],"kind":"struct"},"2:48423:81":{"crate_id":2,"path":["core","sync","atomic","AtomicI16"],"kind":"struct"},"16:7497:14949":{"crate_id":16,"path":["gimli","read","str","DebugLineStr"],"kind":"struct"},"5:4947:7594":{"crate_id":5,"path":["alloc","slice","Concat"],"kind":"trait"},"2:48254:207":{"crate_id":2,"path":["core","result","Result"],"kind":"enum"},"6:4152:12056":{"crate_id":6,"path":["libc","unix","linux_like","linux","signalfd_siginfo"],"kind":"struct"},"17:9458:15184":{"crate_id":17,"path":["object","read","elf","file","ElfFile"],"kind":"struct"},"17:12926:18613":{"crate_id":17,"path":["object","pe","ImageAuxSymbolWeak"],"kind":"struct"},"2:9478:1971":{"crate_id":2,"path":["core","slice","iter","IterMut"],"kind":"struct"},"4:0:1728":{"crate_id":4,"path":["rustc_std_workspace_core"],"kind":"module"},"16:5472:15001":{"crate_id":16,"path":["gimli","read","cfi","EhFrame"],"kind":"struct"},"17:11161:15605":{"crate_id":17,"path":["object","elf","Rela32"],"kind":"struct"},"1:11846:2190":{"crate_id":1,"path":["std","sys_common","net","UdpSocket"],"kind":"struct"},"17:8951:33243":{"crate_id":17,"path":["object","read","any","SectionIteratorInternal"],"kind":"enum"},"17:10121:15232":{"crate_id":17,"path":["object","read","macho","section","MachOSectionInternal"],"kind":"struct"},"2:11746:29533":{"crate_id":2,"path":["core","future","join","MaybeDone"],"kind":"enum"},"17:10139:15152":{"crate_id":17,"path":["object","read","macho","symbol","SymbolTable"],"kind":"struct"},"14:187:13994":{"crate_id":14,"path":["rustc_demangle","SizeLimitedFmtAdapter"],"kind":"struct"},"6:5605:12739":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","rtentry"],"kind":"struct"},"17:11106:15567":{"crate_id":17,"path":["object","elf","Sym64"],"kind":"struct"},"17:10385:15322":{"crate_id":17,"path":["object","read","pe","import","ImportDescriptorIterator"],"kind":"struct"},"5:853:1999":{"crate_id":5,"path":["alloc","collections","binary_heap","Hole"],"kind":"struct"},"17:11436:17973":{"crate_id":17,"path":["object","macho","DyldCacheHeader"],"kind":"struct"},"6:5692:12744":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","Elf32_Chdr"],"kind":"struct"},"6:4496:12089":{"crate_id":6,"path":["libc","unix","linux_like","linux","mntent"],"kind":"struct"},"17:9061:15152":{"crate_id":17,"path":["object","read","any","SymbolTable"],"kind":"struct"},"2:20055:29147":{"crate_id":2,"path":["core","core_simd","swizzle","rotate_lanes_right","Rotate"],"kind":"struct"},"17:8666:15113":{"crate_id":17,"path":["object","endian","I32Bytes"],"kind":"struct"},"17:12033:18175":{"crate_id":17,"path":["object","macho","PrebindCksumCommand"],"kind":"struct"},"5:1415:1978":{"crate_id":5,"path":["alloc","collections","btree","map","IntoKeys"],"kind":"struct"},"1:9260:1970":{"crate_id":1,"path":["std","sync","mpsc","Iter"],"kind":"struct"},"17:10257:15292":{"crate_id":17,"path":["object","read","pe","section","PeSegmentIterator"],"kind":"struct"},"16:5596:15007":{"crate_id":16,"path":["gimli","read","cfi","Augmentation"],"kind":"struct"},"2:49089:67":{"crate_id":2,"path":["core","fmt","Alignment"],"kind":"enum"},"18:652:33612":{"crate_id":18,"path":["memchr","memmem","x86","sse","Forward"],"kind":"struct"},"17:13518:19112":{"crate_id":17,"path":["object","pe","ImageFunctionEntry"],"kind":"struct"},"2:49626:8141":{"crate_id":2,"path":["core","slice","sort","TimSortRun"],"kind":"struct"},"2:4055:7752":{"crate_id":2,"path":["core","cell","lazy","LazyCell"],"kind":"struct"},"2:21955:168":{"crate_id":2,"path":["core","num","nonzero","NonZeroI32"],"kind":"struct"},"2:3152:231":{"crate_id":2,"path":["core","ops","try_trait","Try"],"kind":"trait"},"2:51787:28233":{"crate_id":2,"path":["core","core_arch","simd","i8x2"],"kind":"struct"},"17:8393:15361":{"crate_id":17,"path":["object","common","SegmentFlags"],"kind":"enum"},"2:58384:28280":{"crate_id":2,"path":["core","core_simd","vector","ptr","SimdMutPtr"],"kind":"struct"},"1:6079:2401":{"crate_id":1,"path":["std","sync","lazy_lock","LazyLock"],"kind":"struct"},"18:624:33611":{"crate_id":18,"path":["memchr","memmem","twoway","SuffixOrdering"],"kind":"enum"},"2:46402:8014":{"crate_id":2,"path":["core","ops","index_range","IndexRange"],"kind":"struct"},"1:12309:631":{"crate_id":1,"path":["std","f64"],"kind":"primitive"},"6:4247:12065":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_absinfo"],"kind":"struct"},"6:7214:12248":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_rwlockattr_t"],"kind":"struct"},"2:47094:2082":{"crate_id":2,"path":["core","ffi","VaListImpl"],"kind":"struct"},"6:519:8811":{"crate_id":6,"path":["libc","unix","rusage"],"kind":"struct"},"17:10497:15330":{"crate_id":17,"path":["object","read","pe","resource","ResourceNameOrId"],"kind":"enum"},"1:12312:728":{"crate_id":1,"path":["std","i32"],"kind":"primitive"},"16:3263:15093":{"crate_id":16,"path":["gimli","arch","RiscV"],"kind":"struct"},"17:12816:18501":{"crate_id":17,"path":["object","pe","ImageSectionHeader"],"kind":"struct"},"2:49645:7604":{"crate_id":2,"path":["core","slice","ascii","EscapeAscii"],"kind":"struct"},"2:47176:7950":{"crate_id":2,"path":["core","iter","adapters","copied","Copied"],"kind":"struct"},"1:3953:2185":{"crate_id":1,"path":["std","net","socket_addr","ToSocketAddrs"],"kind":"trait"},"1:8065:2083":{"crate_id":1,"path":["std","fs","Metadata"],"kind":"struct"},"2:20909:2413":{"crate_id":2,"path":["core","core_simd","vector","Simd"],"kind":"struct"},"17:12265:18252":{"crate_id":17,"path":["object","macho","SourceVersionCommand"],"kind":"struct"},"1:2903:207":{"crate_id":1,"path":["std","io","error","Result"],"kind":"typedef"},"6:1541:9702":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_in6"],"kind":"struct"},"16:8014:14988":{"crate_id":16,"path":["gimli","read","value","Value"],"kind":"enum"},"16:6298:14971":{"crate_id":16,"path":["gimli","read","index","UnitIndex"],"kind":"struct"},"16:6034:15021":{"crate_id":16,"path":["gimli","read","dwarf","Unit"],"kind":"struct"},"5:6744:1975":{"crate_id":5,"path":["alloc","collections","binary_heap","Drain"],"kind":"struct"},"6:4317:12074":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_periodic_effect"],"kind":"struct"},"17:13059:18984":{"crate_id":17,"path":["object","pe","ImageTlsDirectory32"],"kind":"struct"},"5:1060:19588":{"crate_id":5,"path":["alloc","collections","btree","borrow","DormantMutRef"],"kind":"struct"},"2:1552:2125":{"crate_id":2,"path":["core","mem","maybe_uninit","write_slice_cloned","Guard"],"kind":"struct"},"16:6528:15033":{"crate_id":16,"path":["gimli","read","line","LineProgramHeader"],"kind":"struct"},"17:2916:15233":{"crate_id":17,"path":["object","read","macho","section","MachOSectionIterator"],"kind":"struct"},"2:11922:106":{"crate_id":2,"path":["core","task","wake","Context"],"kind":"struct"},"6:495:8807":{"crate_id":6,"path":["libc","unix","utimbuf"],"kind":"struct"},"5:7063:7708":{"crate_id":5,"path":["alloc","vec","splice","Splice"],"kind":"struct"},"2:22021:166":{"crate_id":2,"path":["core","num","nonzero","NonZeroI128"],"kind":"struct"},"1:8972:2309":{"crate_id":1,"path":["std","path","StripPrefixError"],"kind":"struct"},"2:12087:7786":{"crate_id":2,"path":["core","const_closure","ConstFnMutClosure"],"kind":"struct"},"1:3269:2155":{"crate_id":1,"path":["std","io","stdio","Stderr"],"kind":"struct"},"6:1738:9720":{"crate_id":6,"path":["libc","unix","linux_like","sigevent"],"kind":"struct"},"2:47031:19534":{"crate_id":2,"path":["core","ffi","c_str","FromBytesWithNulErrorKind"],"kind":"enum"},"17:11734:18154":{"crate_id":17,"path":["object","macho","Dylib"],"kind":"struct"},"2:4082:7753":{"crate_id":2,"path":["core","cell","once","OnceCell"],"kind":"struct"},"6:7255:12254":{"crate_id":6,"path":["libc","unix","linux_like","linux","can_frame"],"kind":"struct"},"16:7970:14957":{"crate_id":16,"path":["gimli","read","unit","DebugTypesUnitHeadersIter"],"kind":"struct"},"2:21267:28228":{"crate_id":2,"path":["core","num","dec2flt","number","Number"],"kind":"struct"},"17:10875:15346":{"crate_id":17,"path":["object","read","CompressedFileRange"],"kind":"struct"},"16:4921:14698":{"crate_id":16,"path":["gimli","constants","DwRle"],"kind":"struct"},"17:11774:18157":{"crate_id":17,"path":["object","macho","SubClientCommand"],"kind":"struct"},"1:11088:23147":{"crate_id":1,"path":["std","sys","unix","fs","FileAttr"],"kind":"struct"},"17:9118:33357":{"crate_id":17,"path":["object","read","any","SymbolIteratorInternal"],"kind":"enum"},"17:8881:33274":{"crate_id":17,"path":["object","read","any","SegmentIteratorInternal"],"kind":"enum"},"16:6496:15032":{"crate_id":16,"path":["gimli","read","line","ColumnType"],"kind":"enum"},"1:1828:2042":{"crate_id":1,"path":["std","env","VarsOs"],"kind":"struct"},"5:2960:19563":{"crate_id":5,"path":["alloc","collections","btree","set","DifferenceInner"],"kind":"enum"},"2:9112:24241":{"crate_id":2,"path":["core","slice","sort","merge_sort","BufGuard"],"kind":"struct"},"18:481:19181":{"crate_id":18,"path":["memchr","cow","CowBytes"],"kind":"struct"},"1:10425:2053":{"crate_id":1,"path":["std","sys","unix","os","SplitPaths"],"kind":"struct"},"1:3194:2158":{"crate_id":1,"path":["std","io","stdio","StdinLock"],"kind":"struct"},"17:12134:18182":{"crate_id":17,"path":["object","macho","VersionMinCommand"],"kind":"struct"},"1:3160:19364":{"crate_id":1,"path":["std","io","stdio","StderrRaw"],"kind":"struct"},"2:47154:2134":{"crate_id":2,"path":["core","iter","adapters","chain","Chain"],"kind":"struct"},"2:3157:134":{"crate_id":2,"path":["core","ops","try_trait","FromResidual"],"kind":"trait"},"6:6375:9638":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statfs64"],"kind":"struct"},"2:11773:189":{"crate_id":2,"path":["core","future","pending","Pending"],"kind":"struct"},"1:719:1964":{"crate_id":1,"path":["std","backtrace","LazilyResolvedCapture"],"kind":"struct"},"16:4721:14643":{"crate_id":16,"path":["gimli","constants","DwIdx"],"kind":"struct"},"6:4737:12117":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_setup"],"kind":"struct"},"18:564:19186":{"crate_id":18,"path":["memchr","memmem","rarebytes","RareNeedleBytes"],"kind":"struct"},"17:12948:18615":{"crate_id":17,"path":["object","pe","ImageAuxSymbolCrc"],"kind":"struct"},"2:2764:7997":{"crate_id":2,"path":["core","ops","arith","Mul"],"kind":"trait"},"2:46609:28281":{"crate_id":2,"path":["core","any","tags","MaybeSizedValue"],"kind":"struct"},"2:1643:7819":{"crate_id":2,"path":["core","mem","Discriminant"],"kind":"struct"},"17:11761:18156":{"crate_id":17,"path":["object","macho","SubFrameworkCommand"],"kind":"struct"},"1:996:1983":{"crate_id":1,"path":["std","collections","hash","map","RawVacantEntryMut"],"kind":"struct"},"2:49875:7610":{"crate_id":2,"path":["core","slice","iter","Chunks"],"kind":"struct"},"1:8712:2187":{"crate_id":1,"path":["std","os","unix","net","listener","Incoming"],"kind":"struct"},"2:8610:111":{"crate_id":2,"path":["core","fmt","Debug"],"kind":"trait"},"17:10245:15318":{"crate_id":17,"path":["object","read","pe","file","PeComdatSectionIterator"],"kind":"struct"},"6:4551:12095":{"crate_id":6,"path":["libc","unix","linux_like","linux","inotify_event"],"kind":"struct"},"12:1518:13976":{"crate_id":12,"path":["hashbrown","rustc_entry","RustcEntry"],"kind":"enum"},"2:10880:8171":{"crate_id":2,"path":["core","str","iter","SplitNInternal"],"kind":"struct"},"16:6123:14942":{"crate_id":16,"path":["gimli","read","abbrev","DebugAbbrev"],"kind":"struct"},"2:52456:2452":{"crate_id":2,"path":["core","core_arch","simd","f64x2"],"kind":"struct"},"2:7045:133":{"crate_id":2,"path":["core","iter","traits","collect","FromIterator"],"kind":"trait"},"2:57036:243":{"crate_id":2,"path":["core","core_simd","fmt","fmt","Wrapper"],"kind":"struct"},"6:5472:12728":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","statx_timestamp"],"kind":"struct"},"2:20224:2425":{"crate_id":2,"path":["core","core_simd","elements","float","SimdFloat"],"kind":"trait"},"16:6376:15030":{"crate_id":16,"path":["gimli","read","line","LineInstruction"],"kind":"enum"},"1:5823:2328":{"crate_id":1,"path":["std","process","exit"],"kind":"function"},"5:3473:2017":{"crate_id":5,"path":["alloc","collections","linked_list","Cursor"],"kind":"struct"},"2:4537:7687":{"crate_id":2,"path":["core","char","REPLACEMENT_CHARACTER"],"kind":"constant"},"6:4683:12112":{"crate_id":6,"path":["libc","unix","linux_like","linux","in6_ifreq"],"kind":"struct"},"16:6171:14993":{"crate_id":16,"path":["gimli","read","abbrev","AttributeSpecification"],"kind":"struct"},"2:8882:7797":{"crate_id":2,"path":["core","hash","BuildHasher"],"kind":"trait"},"16:5411:14997":{"crate_id":16,"path":["gimli","read","cfi","EhFrameHdr"],"kind":"struct"},"5:4747:2357":{"crate_id":5,"path":["alloc","rc","Weak"],"kind":"struct"},"2:20300:2218":{"crate_id":2,"path":["core","core_simd","elements","sealed","Sealed"],"kind":"trait"},"18:727:19176":{"crate_id":18,"path":["memchr","memmem","SearcherConfig"],"kind":"struct"},"6:4605:12102":{"crate_id":6,"path":["libc","unix","linux_like","linux","can_filter"],"kind":"struct"},"2:57075:243":{"crate_id":2,"path":["core","core_simd","fmt","fmt","Wrapper"],"kind":"struct"},"1:11276:2324":{"crate_id":1,"path":["std","sys","unix","process","process_common","Stdio"],"kind":"enum"},"16:2657:15078":{"crate_id":16,"path":["gimli","common","RangeListsOffset"],"kind":"struct"},"1:4969:2272":{"crate_id":1,"path":["std","os","linux","process","ChildExt"],"kind":"trait"},"6:6554:13170":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user_fpregs_struct"],"kind":"struct"},"6:5568:12702":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","mallinfo2"],"kind":"struct"},"6:4575:12098":{"crate_id":6,"path":["libc","unix","linux_like","linux","regmatch_t"],"kind":"struct"},"17:3249:15257":{"crate_id":17,"path":["object","read","macho","relocation","MachORelocationIterator"],"kind":"struct"},"2:8621:7577":{"crate_id":2,"path":["core","fmt","LowerHex"],"kind":"trait"},"2:52866:2488":{"crate_id":2,"path":["core","core_arch","simd","u64x4"],"kind":"struct"},"17:12087:18179":{"crate_id":17,"path":["object","macho","FilesetEntryCommand"],"kind":"struct"},"2:4327:7749":{"crate_id":2,"path":["core","cell","RefMut"],"kind":"struct"},"17:12955:18627":{"crate_id":17,"path":["object","pe","ImageRelocation"],"kind":"struct"},"16:6186:14944":{"crate_id":16,"path":["gimli","read","aranges","DebugAranges"],"kind":"struct"},"1:4262:2205":{"crate_id":1,"path":["std","os","unix","fs","OpenOptionsExt"],"kind":"trait"},"6:7266:12255":{"crate_id":6,"path":["libc","unix","linux_like","linux","canfd_frame"],"kind":"struct"},"1:2385:2094":{"crate_id":1,"path":["std","fs","symlink_metadata"],"kind":"function"},"2:47376:7969":{"crate_id":2,"path":["core","iter","adapters","take_while","TakeWhile"],"kind":"struct"},"17:10822:15344":{"crate_id":17,"path":["object","read","RelocationTarget"],"kind":"enum"},"6:4191:12059":{"crate_id":6,"path":["libc","unix","linux_like","linux","packet_mreq"],"kind":"struct"},"1:960:1977":{"crate_id":1,"path":["std","collections","hash","map","ValuesMut"],"kind":"struct"},"6:4629:12105":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_fprog"],"kind":"struct"},"5:3805:1971":{"crate_id":5,"path":["alloc","collections","vec_deque","iter_mut","IterMut"],"kind":"struct"},"2:21380:28172":{"crate_id":2,"path":["core","num","fmt","Part"],"kind":"enum"},"17:9362:15152":{"crate_id":17,"path":["object","read","coff","symbol","SymbolTable"],"kind":"struct"},"16:4217:14458":{"crate_id":16,"path":["gimli","constants","DwForm"],"kind":"struct"},"2:3975:103":{"crate_id":2,"path":["core","asserting","Capture"],"kind":"struct"},"1:9429:22636":{"crate_id":1,"path":["std","sync","mpmc","list","Position"],"kind":"struct"},"16:7557:14947":{"crate_id":16,"path":["gimli","read","unit","DebugInfoUnitHeadersIter"],"kind":"struct"},"16:6842:32768":{"crate_id":16,"path":["gimli","read","lookup","PubStuffHeader"],"kind":"struct"},"16:4357:14545":{"crate_id":16,"path":["gimli","constants","DwEnd"],"kind":"struct"},"16:6903:15040":{"crate_id":16,"path":["gimli","read","op","Operation"],"kind":"enum"},"1:2869:19338":{"crate_id":1,"path":["std","io","error","repr_bitpacked","Repr"],"kind":"struct"},"1:353:1949":{"crate_id":1,"path":["std","thread","scoped","Scope"],"kind":"struct"},"16:6161:15023":{"crate_id":16,"path":["gimli","read","abbrev","Attributes"],"kind":"enum"},"1:4894:2206":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt"],"kind":"trait"},"17:11199:15608":{"crate_id":17,"path":["object","elf","ProgramHeader32"],"kind":"struct"},"6:4698:12113":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_nl"],"kind":"struct"},"17:10546:15333":{"crate_id":17,"path":["object","read","FileKind"],"kind":"enum"},"2:50609:7650":{"crate_id":2,"path":["core","str","pattern","CharPredicateSearcher"],"kind":"struct"},"17:12211:18248":{"crate_id":17,"path":["object","macho","SymsegCommand"],"kind":"struct"},"17:10159:15239":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbolTable"],"kind":"struct"},"1:2612:2141":{"crate_id":1,"path":["std","io","buffered","bufwriter","WriterPanicked"],"kind":"struct"},"6:4565:12097":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_vm"],"kind":"struct"},"1:10798:24255":{"crate_id":1,"path":["std","sys","unix","stack_overflow","Handler"],"kind":"struct"},"16:6070:14934":{"crate_id":16,"path":["gimli","read","endian_slice","EndianSlice"],"kind":"struct"},"2:2677:225":{"crate_id":2,"path":["core","marker","Sync"],"kind":"trait"},"2:47600:7940":{"crate_id":2,"path":["core","iter","sources","once_with","OnceWith"],"kind":"struct"},"2:52082:28211":{"crate_id":2,"path":["core","core_arch","simd","i64x1"],"kind":"struct"},"17:9293:15153":{"crate_id":17,"path":["object","read","coff","file","CoffFile"],"kind":"struct"},"6:4212:12061":{"crate_id":6,"path":["libc","unix","linux_like","linux","msginfo"],"kind":"struct"},"6:1574:9705":{"crate_id":6,"path":["libc","unix","linux_like","fd_set"],"kind":"struct"},"2:4:991":{"crate_id":2,"path":["core","panic"],"kind":"macro"},"16:3457:15095":{"crate_id":16,"path":["gimli","arch","X86_64"],"kind":"struct"},"1:9530:216":{"crate_id":1,"path":["std","sync","rwlock","RwLockWriteGuard"],"kind":"struct"},"1:2578:2148":{"crate_id":1,"path":["std","io","buffered","bufwriter","BufWriter"],"kind":"struct"},"5:3363:1971":{"crate_id":5,"path":["alloc","collections","linked_list","IterMut"],"kind":"struct"},"2:50856:121":{"crate_id":2,"path":["core","time","Duration"],"kind":"struct"},"16:2557:15074":{"crate_id":16,"path":["gimli","common","DebugLocListsIndex"],"kind":"struct"},"18:719:19175":{"crate_id":18,"path":["memchr","memmem","NeedleInfo"],"kind":"struct"},"5:0:283":{"crate_id":5,"path":["alloc"],"kind":"module"},"2:2663:217":{"crate_id":2,"path":["core","marker","Send"],"kind":"trait"},"2:21430:2195":{"crate_id":2,"path":["core","num","error","ParseIntError"],"kind":"struct"},"12:2190:32668":{"crate_id":12,"path":["hashbrown","raw","Fallibility"],"kind":"enum"},"16:4441:14559":{"crate_id":16,"path":["gimli","constants","DwVirtuality"],"kind":"struct"},"2:46433:195":{"crate_id":2,"path":["core","ops","range","Range"],"kind":"struct"},"17:10476:15328":{"crate_id":17,"path":["object","read","pe","resource","ResourceDirectoryEntryData"],"kind":"enum"},"2:48385:91":{"crate_id":2,"path":["core","sync","atomic","AtomicU8"],"kind":"struct"},"17:11500:17975":{"crate_id":17,"path":["object","macho","DyldCacheImageInfo"],"kind":"struct"},"17:9738:15195":{"crate_id":17,"path":["object","read","elf","version","VersionTable"],"kind":"struct"},"6:5443:12672":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","statx"],"kind":"struct"},"2:54126:7530":{"crate_id":2,"path":["core","core_arch","x86","__m256"],"kind":"struct"},"1:4210:2202":{"crate_id":1,"path":["std","os","unix","ffi","os_str","OsStringExt"],"kind":"trait"},"16:5494:15002":{"crate_id":16,"path":["gimli","read","cfi","CieOffsetEncoding"],"kind":"enum"},"16:5664:15009":{"crate_id":16,"path":["gimli","read","cfi","PartialFrameDescriptionEntry"],"kind":"struct"},"2:21:667":{"crate_id":2,"path":["core","format_args"],"kind":"macro"},"2:48170:1970":{"crate_id":2,"path":["core","option","Iter"],"kind":"struct"},"17:13506:19111":{"crate_id":17,"path":["object","pe","ImageDebugMisc"],"kind":"struct"},"2:51981:28165":{"crate_id":2,"path":["core","core_arch","simd","u64x1"],"kind":"struct"},"18:707:7637":{"crate_id":18,"path":["memchr","memmem","Searcher"],"kind":"struct"},"6:1654:9712":{"crate_id":6,"path":["libc","unix","linux_like","in6_rtmsg"],"kind":"struct"},"2:6617:7936":{"crate_id":2,"path":["core","iter","range","Step"],"kind":"trait"},"2:3951:28210":{"crate_id":2,"path":["core","asserting","TryCaptureWithoutDebug"],"kind":"struct"},"2:46981:7770":{"crate_id":2,"path":["core","char","CaseMappingIter"],"kind":"enum"},"1:6440:22646":{"crate_id":1,"path":["std","sync","mpmc","zero","ZeroToken"],"kind":"struct"},"6:4644:12107":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlmsghdr"],"kind":"struct"},"2:21409:28832":{"crate_id":2,"path":["core","num","fmt","Formatted"],"kind":"struct"},"1:4017:2188":{"crate_id":1,"path":["std","net","tcp","TcpListener"],"kind":"struct"},"1:9436:22613":{"crate_id":1,"path":["std","sync","mpmc","list","ListToken"],"kind":"struct"},"1:2588:24241":{"crate_id":1,"path":["std","io","buffered","bufwriter","flush_buf","BufGuard"],"kind":"struct"},"17:11787:18158":{"crate_id":17,"path":["object","macho","SubUmbrellaCommand"],"kind":"struct"},"2:49122:67":{"crate_id":2,"path":["core","fmt","rt","v1","Alignment"],"kind":"enum"},"2:54068:2454":{"crate_id":2,"path":["core","core_arch","simd","f64x8"],"kind":"struct"},"1:5894:2338":{"crate_id":1,"path":["std","sync","mpsc","SyncSender"],"kind":"struct"},"12:1852:1992":{"crate_id":12,"path":["hashbrown","set","Intersection"],"kind":"struct"},"17:11721:18153":{"crate_id":17,"path":["object","macho","FvmlibCommand"],"kind":"struct"},"5:779:96":{"crate_id":5,"path":["alloc","collections","binary_heap","BinaryHeap"],"kind":"struct"},"2:22054:2197":{"crate_id":2,"path":["core","num","nonzero","NonZeroIsize"],"kind":"struct"},"6:6415:13160":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_fpxreg"],"kind":"struct"},"17:12797:18499":{"crate_id":17,"path":["object","pe","AnonObjectHeaderBigobj"],"kind":"struct"},"15:193:14002":{"crate_id":15,"path":["addr2line","LocationRangeUnitIter"],"kind":"struct"},"17:12972:18948":{"crate_id":17,"path":["object","pe","ImageBaseRelocation"],"kind":"struct"},"2:46938:1956":{"crate_id":2,"path":["core","char","EscapeDefault"],"kind":"struct"},"17:10310:15319":{"crate_id":17,"path":["object","read","pe","section","PeRelocationIterator"],"kind":"struct"},"2:52119:28164":{"crate_id":2,"path":["core","core_arch","simd","f64x1"],"kind":"struct"},"6:1678:9714":{"crate_id":6,"path":["libc","unix","linux_like","arpreq_old"],"kind":"struct"},"1:6784:2399":{"crate_id":1,"path":["std","sync","poison","TryLockError"],"kind":"enum"},"16:6781:14963":{"crate_id":16,"path":["gimli","read","loclists","LocListIter"],"kind":"struct"},"14:202:7685":{"crate_id":14,"path":["rustc_demangle","v0","ParseError"],"kind":"enum"},"16:7298:15048":{"crate_id":16,"path":["gimli","read","pubtypes","PubTypesEntry"],"kind":"struct"},"5:6790:19567":{"crate_id":5,"path":["alloc","collections","btree","set_val","SetValZST"],"kind":"struct"},"18:609:33629":{"crate_id":18,"path":["memchr","memmem","twoway","Suffix"],"kind":"struct"},"1:4838:2261":{"crate_id":1,"path":["std","os","unix","thread","JoinHandleExt"],"kind":"trait"},"17:13459:19081":{"crate_id":17,"path":["object","pe","ImageEnclaveImport"],"kind":"struct"},"17:10466:15327":{"crate_id":17,"path":["object","read","pe","resource","ResourceDirectoryTable"],"kind":"struct"},"12:738:1974":{"crate_id":12,"path":["hashbrown","map","Values"],"kind":"struct"},"17:13114:18990":{"crate_id":17,"path":["object","pe","ImageResourceDirectory"],"kind":"struct"},"16:7329:15051":{"crate_id":16,"path":["gimli","read","rnglists","DebugRanges"],"kind":"struct"},"18:660:19170":{"crate_id":18,"path":["memchr","memmem","FindIter"],"kind":"struct"},"17:13393:19073":{"crate_id":17,"path":["object","pe","ImageAlphaRuntimeFunctionEntry"],"kind":"struct"},"2:50030:7672":{"crate_id":2,"path":["core","str","error","Utf8Error"],"kind":"struct"},"5:5814:2499":{"crate_id":5,"path":["alloc","task","Wake"],"kind":"trait"},"1:12314:725":{"crate_id":1,"path":["std","i128"],"kind":"primitive"},"1:910:1972":{"crate_id":1,"path":["std","collections","hash","map","IntoIter"],"kind":"struct"},"16:7309:15049":{"crate_id":16,"path":["gimli","read","pubtypes","DebugPubTypes"],"kind":"struct"},"16:4817:14668":{"crate_id":16,"path":["gimli","constants","DwLne"],"kind":"struct"},"6:4816:12125":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_can"],"kind":"struct"},"10:0:1731":{"crate_id":10,"path":["rustc_std_workspace_alloc"],"kind":"module"},"17:12896:18611":{"crate_id":17,"path":["object","pe","ImageAuxSymbolFunction"],"kind":"struct"},"2:53992:2469":{"crate_id":2,"path":["core","core_arch","simd","i64x8"],"kind":"struct"},"17:11951:18170":{"crate_id":17,"path":["object","macho","DylibModule32"],"kind":"struct"},"6:4449:12086":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Phdr"],"kind":"struct"},"1:11123:2087":{"crate_id":1,"path":["std","sys","unix","fs","FileTimes"],"kind":"struct"},"17:11054:15558":{"crate_id":17,"path":["object","elf","CompressionHeader32"],"kind":"struct"},"1:12322:1099":{"crate_id":1,"path":["std","reference"],"kind":"primitive"},"1:9463:22578":{"crate_id":1,"path":["std","sync","mpmc","select","Selected"],"kind":"enum"},"6:6509:13166":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ipc_perm"],"kind":"struct"},"17:11485:17974":{"crate_id":17,"path":["object","macho","DyldCacheMappingInfo"],"kind":"struct"},"17:11070:15559":{"crate_id":17,"path":["object","elf","CompressionHeader64"],"kind":"struct"},"2:50805:8158":{"crate_id":2,"path":["core","str","CharEscapeDebugContinue"],"kind":"struct"},"2:2255:105":{"crate_id":2,"path":["core","clone","Clone"],"kind":"trait"},"5:3734:1975":{"crate_id":5,"path":["alloc","collections","vec_deque","drain","Drain"],"kind":"struct"},"16:6137:14940":{"crate_id":16,"path":["gimli","read","abbrev","Abbreviations"],"kind":"struct"},"1:6392:2497":{"crate_id":1,"path":["std","sync","mpmc","waker","Waker"],"kind":"struct"},"1:6920:22582":{"crate_id":1,"path":["std","sync","rwlock","fmt","LockedPlaceholder"],"kind":"struct"},"1:4316:2209":{"crate_id":1,"path":["std","os","unix","fs","DirEntryExt2"],"kind":"trait"},"5:6909:2079":{"crate_id":5,"path":["alloc","ffi","c_str","NulError"],"kind":"struct"},"5:2981:1994":{"crate_id":5,"path":["alloc","collections","btree","set","SymmetricDifference"],"kind":"struct"},"16:6359:15029":{"crate_id":16,"path":["gimli","read","line","LineRows"],"kind":"struct"},"1:11606:2334":{"crate_id":1,"path":["std","sys_common","process","CommandEnvs"],"kind":"struct"},"6:560:8815":{"crate_id":6,"path":["libc","unix","pollfd"],"kind":"struct"},"1:11669:20224":{"crate_id":1,"path":["std","sys_common","wtf8","Wtf8"],"kind":"struct"},"17:13327:19033":{"crate_id":17,"path":["object","pe","ImageHotPatchInfo"],"kind":"struct"},"2:2671:7559":{"crate_id":2,"path":["core","marker","Unsize"],"kind":"trait"},"1:12318:1455":{"crate_id":1,"path":["std","u64"],"kind":"primitive"},"2:11933:2497":{"crate_id":2,"path":["core","task","wake","Waker"],"kind":"struct"},"2:2682:1940":{"crate_id":2,"path":["core","marker","PhantomData"],"kind":"struct"},"2:2781:7998":{"crate_id":2,"path":["core","ops","arith","Neg"],"kind":"trait"},"2:21988:169":{"crate_id":2,"path":["core","num","nonzero","NonZeroI64"],"kind":"struct"},"2:50714:7681":{"crate_id":2,"path":["core","str","lossy","Utf8Chunks"],"kind":"struct"},"17:12251:18251":{"crate_id":17,"path":["object","macho","EntryPointCommand"],"kind":"struct"},"15:214:14006":{"crate_id":15,"path":["addr2line","RangeAttributes"],"kind":"struct"},"12:444:141":{"crate_id":12,"path":["hashbrown","map","HashMap"],"kind":"struct"},"14:160:13984":{"crate_id":14,"path":["rustc_demangle","Demangle"],"kind":"struct"},"6:7220:12249":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_condattr_t"],"kind":"struct"},"17:9317:15147":{"crate_id":17,"path":["object","read","coff","section","CoffSegmentIterator"],"kind":"struct"},"17:10532:127":{"crate_id":17,"path":["object","read","Error"],"kind":"struct"},"6:4673:12111":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_ifru_map"],"kind":"struct"},"2:48613:90":{"crate_id":2,"path":["core","sync","atomic","AtomicU64"],"kind":"struct"},"16:6593:15034":{"crate_id":16,"path":["gimli","read","line","CompleteLineProgram"],"kind":"struct"},"17:10708:15341":{"crate_id":17,"path":["object","read","ObjectMap"],"kind":"struct"},"17:9844:15229":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCacheImage"],"kind":"struct"},"1:979:1981":{"crate_id":1,"path":["std","collections","hash","map","RawEntryMut"],"kind":"enum"},"1:545:1927":{"crate_id":1,"path":["std","thread","PanicGuard"],"kind":"struct"},"2:3998:7556":{"crate_id":2,"path":["core","async_iter","async_iter","AsyncIterator"],"kind":"trait"},"6:4534:12093":{"crate_id":6,"path":["libc","unix","linux_like","linux","in6_pktinfo"],"kind":"struct"},"16:7980:14989":{"crate_id":16,"path":["gimli","read","value","ValueType"],"kind":"enum"},"1:9238:2326":{"crate_id":1,"path":["std","process","ExitStatusError"],"kind":"struct"},"16:7659:14941":{"crate_id":16,"path":["gimli","read","unit","AttributeValue"],"kind":"enum"},"17:12176:18198":{"crate_id":17,"path":["object","macho","DyldInfoCommand"],"kind":"struct"},"2:50837:8177":{"crate_id":2,"path":["core","time","Nanoseconds"],"kind":"struct"},"17:12514:18388":{"crate_id":17,"path":["object","pe","ImageOs2Header"],"kind":"struct"},"1:359:1950":{"crate_id":1,"path":["std","thread","scoped","ScopedJoinHandle"],"kind":"struct"},"6:4437:12085":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Phdr"],"kind":"struct"},"16:7166:15042":{"crate_id":16,"path":["gimli","read","op","EvaluationResult"],"kind":"enum"},"2:38181:180":{"crate_id":2,"path":["core","cmp","Ordering"],"kind":"enum"},"2:49894:7612":{"crate_id":2,"path":["core","slice","iter","ChunksExact"],"kind":"struct"},"1:411:162":{"crate_id":1,"path":["std","thread","local","LocalKey"],"kind":"struct"},"1:11444:2325":{"crate_id":1,"path":["std","sys","unix","process","process_inner","ExitStatus"],"kind":"struct"},"1:11945:14010":{"crate_id":1,"path":["std","backtrace_rs","backtrace","Frame"],"kind":"struct"},"2:3163:7737":{"crate_id":2,"path":["core","ops","try_trait","Residual"],"kind":"trait"},"2:10684:8149":{"crate_id":2,"path":["core","slice","GetManyMutError"],"kind":"struct"},"1:1002:1984":{"crate_id":1,"path":["std","collections","hash","map","RawEntryBuilder"],"kind":"struct"},"2:4196:7740":{"crate_id":2,"path":["core","cell","BorrowError"],"kind":"struct"},"17:9165:33487":{"crate_id":17,"path":["object","read","any","DynamicRelocationIteratorInternal"],"kind":"enum"},"17:1962:15190":{"crate_id":17,"path":["object","read","elf","relocation","ElfSectionRelocationIterator"],"kind":"struct"},"2:52012:2471":{"crate_id":2,"path":["core","core_arch","simd","i8x8"],"kind":"struct"},"2:46575:8016":{"crate_id":2,"path":["core","ops","try_trait","Yeet"],"kind":"struct"},"2:21251:28827":{"crate_id":2,"path":["core","num","dec2flt","decimal","Decimal"],"kind":"struct"},"5:5536:2357":{"crate_id":5,"path":["alloc","sync","Weak"],"kind":"struct"},"5:3561:30532":{"crate_id":5,"path":["alloc","collections","linked_list","drop","DropGuard"],"kind":"struct"},"17:10270:15291":{"crate_id":17,"path":["object","read","pe","section","PeSegment"],"kind":"struct"},"2:1825:2020":{"crate_id":2,"path":["core","ptr","non_null","NonNull"],"kind":"struct"},"16:3026:15091":{"crate_id":16,"path":["gimli","arch","Arm"],"kind":"struct"},"18:521:19180":{"crate_id":18,"path":["memchr","memmem","prefilter","Prefilter"],"kind":"enum"},"6:4346:12077":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_ff_upload"],"kind":"struct"},"1:8589:2182":{"crate_id":1,"path":["std","net","socket_addr","SocketAddr"],"kind":"enum"},"1:8624:2184":{"crate_id":1,"path":["std","net","socket_addr","SocketAddrV6"],"kind":"struct"},"6:554:8814":{"crate_id":6,"path":["libc","unix","iovec"],"kind":"struct"},"2:50534:7648":{"crate_id":2,"path":["core","str","pattern","CharArrayRefSearcher"],"kind":"struct"},"2:2674:222":{"crate_id":2,"path":["core","marker","StructuralEq"],"kind":"trait"},"16:153:14932":{"crate_id":16,"path":["gimli","read","util","ArrayVec"],"kind":"struct"},"18:531:19184":{"crate_id":18,"path":["memchr","memmem","prefilter","PrefilterState"],"kind":"struct"},"2:8341:19484":{"crate_id":2,"path":["core","fmt","builders","PadAdapterState"],"kind":"struct"},"16:7249:15044":{"crate_id":16,"path":["gimli","read","op","Evaluation"],"kind":"struct"},"1:12269:1965":{"crate_id":1,"path":["std","backtrace_rs","types","BytesOrWideString"],"kind":"enum"},"1:8216:19335":{"crate_id":1,"path":["std","io","error","SimpleMessage"],"kind":"struct"},"1:2026:182":{"crate_id":1,"path":["std","ffi","os_str","OsString"],"kind":"struct"},"17:9539:15167":{"crate_id":17,"path":["object","read","elf","section","ElfSection"],"kind":"struct"},"12:2205:2009":{"crate_id":12,"path":["hashbrown","TryReserveError"],"kind":"enum"},"2:1636:577":{"crate_id":2,"path":["core","mem","drop"],"kind":"function"},"6:608:8822":{"crate_id":6,"path":["libc","unix","protoent"],"kind":"struct"},"5:1241:1988":{"crate_id":5,"path":["alloc","collections","btree","map","entry","OccupiedError"],"kind":"struct"},"2:50582:7649":{"crate_id":2,"path":["core","str","pattern","CharSliceSearcher"],"kind":"struct"},"5:2050:19590":{"crate_id":5,"path":["alloc","collections","btree","navigate","LazyLeafRange"],"kind":"struct"},"17:12617:18391":{"crate_id":17,"path":["object","pe","ImageFileHeader"],"kind":"struct"},"1:3479:2111":{"crate_id":1,"path":["std","io","Seek"],"kind":"trait"},"16:2579:15075":{"crate_id":16,"path":["gimli","common","DebugMacinfoOffset"],"kind":"struct"},"16:2433:15069":{"crate_id":16,"path":["gimli","common","DebugInfoOffset"],"kind":"struct"},"6:4257:12066":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_keymap_entry"],"kind":"struct"},"17:10490:15329":{"crate_id":17,"path":["object","read","pe","resource","ResourceName"],"kind":"struct"},"16:6472:13999":{"crate_id":16,"path":["gimli","read","line","LineRow"],"kind":"struct"},"17:8137:15350":{"crate_id":17,"path":["object","common","BinaryFormat"],"kind":"enum"},"2:46355:7563":{"crate_id":2,"path":["core","ops","generator","GeneratorState"],"kind":"enum"},"1:6316:24239":{"crate_id":1,"path":["std","sync","mpmc","list","Channel"],"kind":"struct"},"1:11902:7539":{"crate_id":1,"path":["std","alloc","System"],"kind":"struct"},"2:2482:75":{"crate_id":2,"path":["core","convert","AsRef"],"kind":"trait"},"16:8069:127":{"crate_id":16,"path":["gimli","read","Error"],"kind":"enum"},"12:0:1733":{"crate_id":12,"path":["hashbrown"],"kind":"module"},"1:1967:2074":{"crate_id":1,"path":["std","error","Indented"],"kind":"struct"},"2:2445:2218":{"crate_id":2,"path":["core","convert","num","private","Sealed"],"kind":"trait"},"1:524:24257":{"crate_id":1,"path":["std","thread","spawn_unchecked_","MaybeDangling"],"kind":"struct"},"17:13134:18994":{"crate_id":17,"path":["object","pe","ImageResourceDirectoryString"],"kind":"struct"},"17:10445:15326":{"crate_id":17,"path":["object","read","pe","relocation","Relocation"],"kind":"struct"},"6:1668:9713":{"crate_id":6,"path":["libc","unix","linux_like","arpreq"],"kind":"struct"},"6:4239:12064":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_id"],"kind":"struct"},"17:10321:15285":{"crate_id":17,"path":["object","read","pe","data_directory","DataDirectories"],"kind":"struct"},"2:2285:185":{"crate_id":2,"path":["core","cmp","PartialEq"],"kind":"trait"},"17:386:15241":{"crate_id":17,"path":["object","read","any","Segment"],"kind":"struct"},"17:9644:15164":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdat"],"kind":"struct"},"2:47019:2080":{"crate_id":2,"path":["core","ffi","c_str","FromBytesWithNulError"],"kind":"struct"},"17:9382:15150":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbolTable"],"kind":"struct"},"1:1826:2041":{"crate_id":1,"path":["std","env","Vars"],"kind":"struct"},"1:8718:2242":{"crate_id":1,"path":["std","os","unix","ucred","UCred"],"kind":"struct"},"1:9441:22601":{"crate_id":1,"path":["std","sync","mpmc","select","Token"],"kind":"struct"},"17:12909:18612":{"crate_id":17,"path":["object","pe","ImageAuxSymbolFunctionBeginEnd"],"kind":"struct"},"2:21416:2196":{"crate_id":2,"path":["core","num","error","TryFromIntError"],"kind":"struct"},"5:1212:1987":{"crate_id":5,"path":["alloc","collections","btree","map","entry","VacantEntry"],"kind":"struct"},"2:49954:7602":{"crate_id":2,"path":["core","slice","iter","ArrayChunksMut"],"kind":"struct"},"1:6043:2393":{"crate_id":1,"path":["std","sync","condvar","Condvar"],"kind":"struct"},"6:6293:8686":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","flock"],"kind":"struct"},"2:46861:19465":{"crate_id":2,"path":["core","char","convert","CharErrorKind"],"kind":"enum"},"1:5709:2322":{"crate_id":1,"path":["std","process","Command"],"kind":"struct"},"1:4117:2190":{"crate_id":1,"path":["std","net","udp","UdpSocket"],"kind":"struct"},"1:3404:2110":{"crate_id":1,"path":["std","io","Read"],"kind":"trait"},"1:3271:2156":{"crate_id":1,"path":["std","io","stdio","StderrLock"],"kind":"struct"},"17:11594:18028":{"crate_id":17,"path":["object","macho","LoadCommand"],"kind":"struct"},"2:8619:7568":{"crate_id":2,"path":["core","fmt","Binary"],"kind":"trait"},"18:599:33628":{"crate_id":18,"path":["memchr","memmem","twoway","Shift"],"kind":"enum"},"2:1919:7564":{"crate_id":2,"path":["core","ptr","unique","Unique"],"kind":"struct"},"2:9765:7627":{"crate_id":2,"path":["core","slice","iter","SplitNMut"],"kind":"struct"},"12:2184:28882":{"crate_id":12,"path":["hashbrown","raw","bitmask","BitMask"],"kind":"struct"},"1:8533:23658":{"crate_id":1,"path":["std","net","ip_addr","fmt","Span"],"kind":"struct"},"5:1405:1977":{"crate_id":5,"path":["alloc","collections","btree","map","ValuesMut"],"kind":"struct"},"5:6760:30428":{"crate_id":5,"path":["alloc","collections","btree","merge_iter","Peeked"],"kind":"enum"},"16:5963:191":{"crate_id":16,"path":["gimli","read","cfi","Pointer"],"kind":"enum"},"5:1595:30532":{"crate_id":5,"path":["alloc","collections","btree","map","drop","DropGuard"],"kind":"struct"},"1:10856:2157":{"crate_id":1,"path":["std","sys","unix","stdio","Stdin"],"kind":"struct"},"1:3230:2159":{"crate_id":1,"path":["std","io","stdio","Stdout"],"kind":"struct"},"16:5219:15057":{"crate_id":16,"path":["gimli","endianity","BigEndian"],"kind":"struct"},"2:2727:1868":{"crate_id":2,"path":["core","marker","Unpin"],"kind":"trait"},"1:12297:920":{"crate_id":1,"path":["std","never"],"kind":"primitive"},"1:9535:2347":{"crate_id":1,"path":["std","time","Instant"],"kind":"struct"},"5:677:228":{"crate_id":5,"path":["alloc","borrow","ToOwned"],"kind":"trait"},"1:10667:23752":{"crate_id":1,"path":["std","sys","unix","process","process_common","Argv"],"kind":"struct"},"1:8369:2166":{"crate_id":1,"path":["std","io","util","Sink"],"kind":"struct"},"1:4302:2207":{"crate_id":1,"path":["std","os","unix","fs","FileTypeExt"],"kind":"trait"},"16:5949:15018":{"crate_id":16,"path":["gimli","read","cfi","CallFrameInstructionIter"],"kind":"struct"},"2:2321:179":{"crate_id":2,"path":["core","cmp","Ord"],"kind":"trait"},"2:50360:7662":{"crate_id":2,"path":["core","str","iter","SplitWhitespace"],"kind":"struct"},"12:810:1977":{"crate_id":12,"path":["hashbrown","map","ValuesMut"],"kind":"struct"},"2:11964:202":{"crate_id":2,"path":["core","task","ready","Ready"],"kind":"struct"},"1:9388:106":{"crate_id":1,"path":["std","sync","mpmc","context","Context"],"kind":"struct"},"17:11300:15781":{"crate_id":17,"path":["object","elf","Verneed"],"kind":"struct"},"12:1840:1975":{"crate_id":12,"path":["hashbrown","set","Drain"],"kind":"struct"},"6:1701:9717":{"crate_id":6,"path":["libc","unix","linux_like","epoll_event"],"kind":"struct"},"2:9503:2138":{"crate_id":2,"path":["core","slice","iter","Split"],"kind":"struct"},"5:1044:30408":{"crate_id":5,"path":["alloc","collections","btree","append","MergeIter"],"kind":"struct"},"17:11873:18164":{"crate_id":17,"path":["object","macho","RoutinesCommand64"],"kind":"struct"},"2:57023:243":{"crate_id":2,"path":["core","core_simd","fmt","fmt","Wrapper"],"kind":"struct"},"2:52166:2415":{"crate_id":2,"path":["core","core_arch","simd","u8x16"],"kind":"struct"},"17:9601:15171":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbol"],"kind":"struct"},"1:4744:2245":{"crate_id":1,"path":["std","os","unix","process","CommandExt"],"kind":"trait"},"6:1562:9704":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_ll"],"kind":"struct"},"6:1714:9718":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_storage"],"kind":"struct"},"12:119:19680":{"crate_id":12,"path":["hashbrown","raw","RawTable"],"kind":"struct"},"14:7:13984":{"crate_id":14,"path":["rustc_demangle","legacy","Demangle"],"kind":"struct"},"5:5361:229":{"crate_id":5,"path":["alloc","string","ToString"],"kind":"trait"},"2:53744:2482":{"crate_id":2,"path":["core","core_arch","simd","u16x32"],"kind":"struct"},"6:5660:12741":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ntptimeval"],"kind":"struct"},"6:5699:12745":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","seminfo"],"kind":"struct"},"1:8226:2151":{"crate_id":1,"path":["std","io","error","ErrorKind"],"kind":"enum"},"2:46593:7715":{"crate_id":2,"path":["core","any","TypeId"],"kind":"struct"},"17:13047:18983":{"crate_id":17,"path":["object","pe","ImageTlsDirectory64"],"kind":"struct"},"17:8368:15352":{"crate_id":17,"path":["object","common","FileFlags"],"kind":"enum"},"6:4635:12106":{"crate_id":6,"path":["libc","unix","linux_like","linux","seccomp_data"],"kind":"struct"},"2:50990:202":{"crate_id":2,"path":["core","future","ready","Ready"],"kind":"struct"},"6:4745:12118":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_user_dev"],"kind":"struct"},"2:21318:28161":{"crate_id":2,"path":["core","num","diy_float","Fp"],"kind":"struct"},"1:8130:19356":{"crate_id":1,"path":["std","io","buffered","linewritershim","LineWriterShim"],"kind":"struct"},"1:9282:2339":{"crate_id":1,"path":["std","sync","mpsc","SendError"],"kind":"struct"},"6:4335:12076":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_effect"],"kind":"struct"},"2:50829:8164":{"crate_id":2,"path":["core","str","BytesIsNotEmpty"],"kind":"struct"},"17:9681:15219":{"crate_id":17,"path":["object","read","elf","note","Note"],"kind":"struct"},"17:12836:18542":{"crate_id":17,"path":["object","pe","ImageSymbol"],"kind":"struct"},"2:50154:7678":{"crate_id":2,"path":["core","str","iter","RSplitTerminator"],"kind":"struct"},"2:50821:8162":{"crate_id":2,"path":["core","str","IsAsciiWhitespace"],"kind":"struct"},"2:50378:7660":{"crate_id":2,"path":["core","str","iter","EncodeUtf16"],"kind":"struct"},"17:10845:15326":{"crate_id":17,"path":["object","read","Relocation"],"kind":"struct"},"1:8146:2017":{"crate_id":1,"path":["std","io","cursor","Cursor"],"kind":"struct"},"1:965:1978":{"crate_id":1,"path":["std","collections","hash","map","IntoKeys"],"kind":"struct"},"16:2367:15066":{"crate_id":16,"path":["gimli","common","DebugAddrBase"],"kind":"struct"},"17:11559:17981":{"crate_id":17,"path":["object","macho","MachHeader32"],"kind":"struct"},"16:5780:15013":{"crate_id":16,"path":["gimli","read","cfi","RegisterRuleIter"],"kind":"struct"},"2:3231:7561":{"crate_id":2,"path":["core","ops","unsize","DispatchFromDyn"],"kind":"trait"},"18:548:140":{"crate_id":18,"path":["memchr","memmem","rabinkarp","Hash"],"kind":"struct"},"16:7357:14965":{"crate_id":16,"path":["gimli","read","rnglists","RangeLists"],"kind":"struct"},"17:13594:19156":{"crate_id":17,"path":["object","pe","ImageCor20Header"],"kind":"struct"},"2:47289:7964":{"crate_id":2,"path":["core","iter","adapters","peekable","Peekable"],"kind":"struct"},"2:48186:1972":{"crate_id":2,"path":["core","option","IntoIter"],"kind":"struct"},"5:686:110":{"crate_id":5,"path":["alloc","borrow","Cow"],"kind":"enum"},"2:50056:7666":{"crate_id":2,"path":["core","str","iter","Chars"],"kind":"struct"},"16:2727:15081":{"crate_id":16,"path":["gimli","common","DebugStrOffset"],"kind":"struct"},"1:5680:2320":{"crate_id":1,"path":["std","process","ChildStdout"],"kind":"struct"},"2:9658:7622":{"crate_id":2,"path":["core","slice","iter","RSplit"],"kind":"struct"},"17:11137:15569":{"crate_id":17,"path":["object","elf","Syminfo64"],"kind":"struct"},"2:47255:7971":{"crate_id":2,"path":["core","iter","adapters","intersperse","Intersperse"],"kind":"struct"},"12:725:1973":{"crate_id":12,"path":["hashbrown","map","Keys"],"kind":"struct"},"2:52790:2481":{"crate_id":2,"path":["core","core_arch","simd","u16x16"],"kind":"struct"},"17:11528:15279":{"crate_id":17,"path":["object","macho","FatHeader"],"kind":"struct"},"18:614:33618":{"crate_id":18,"path":["memchr","memmem","twoway","SuffixKind"],"kind":"enum"},"1:9276:1972":{"crate_id":1,"path":["std","sync","mpsc","IntoIter"],"kind":"struct"},"1:8390:2112":{"crate_id":1,"path":["std","io","SeekFrom"],"kind":"enum"},"17:11235:15660":{"crate_id":17,"path":["object","elf","Dyn32"],"kind":"struct"},"1:9206:2323":{"crate_id":1,"path":["std","process","CommandArgs"],"kind":"struct"},"1:8886:2304":{"crate_id":1,"path":["std","path","PrefixComponent"],"kind":"struct"},"2:39354:2331":{"crate_id":2,"path":["core","convert","Infallible"],"kind":"enum"},"1:12303:1330":{"crate_id":1,"path":["std","slice"],"kind":"primitive"},"6:1600:9708":{"crate_id":6,"path":["libc","unix","linux_like","Dl_info"],"kind":"struct"},"17:10434:15325":{"crate_id":17,"path":["object","read","pe","relocation","RelocationIterator"],"kind":"struct"},"17:13203:19023":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation64V2"],"kind":"struct"},"17:9021:15376":{"crate_id":17,"path":["object","read","any","ComdatSectionIterator"],"kind":"struct"},"1:598:1936":{"crate_id":1,"path":["std","thread","JoinHandle"],"kind":"struct"},"16:5447:14999":{"crate_id":16,"path":["gimli","read","cfi","EhHdrTableIter"],"kind":"struct"},"17:8596:15111":{"crate_id":17,"path":["object","endian","U64Bytes"],"kind":"struct"},"2:52948:2473":{"crate_id":2,"path":["core","core_arch","simd","i8x32"],"kind":"struct"},"2:48499:82":{"crate_id":2,"path":["core","sync","atomic","AtomicI32"],"kind":"struct"},"17:9339:15145":{"crate_id":17,"path":["object","read","coff","section","CoffSectionIterator"],"kind":"struct"},"1:8576:2181":{"crate_id":1,"path":["std","net","parser","AddrParseError"],"kind":"struct"},"17:9433:15142":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdat"],"kind":"struct"},"5:1446:2013":{"crate_id":5,"path":["alloc","collections","btree","map","RangeMut"],"kind":"struct"},"17:13031:18979":{"crate_id":17,"path":["object","pe","ImageThunkData64"],"kind":"struct"},"2:29604:7989":{"crate_id":2,"path":["core","mem","transmutability","Assume"],"kind":"struct"},"5:6324:7713":{"crate_id":5,"path":["alloc","vec","in_place_drop","InPlaceDstBufDrop"],"kind":"struct"},"5:271:30532":{"crate_id":5,"path":["alloc","boxed","thin","drop","DropGuard"],"kind":"struct"},"12:2198:32664":{"crate_id":12,"path":["hashbrown","raw","TableLayout"],"kind":"struct"},"6:5498:12730":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__exit_status"],"kind":"struct"},"17:9283:15155":{"crate_id":17,"path":["object","read","coff","file","CoffCommon"],"kind":"struct"},"6:4515:12091":{"crate_id":6,"path":["libc","unix","linux_like","linux","posix_spawnattr_t"],"kind":"struct"},"2:50208:7624":{"crate_id":2,"path":["core","str","iter","RSplitN"],"kind":"struct"},"2:11144:7637":{"crate_id":2,"path":["core","str","pattern","Searcher"],"kind":"trait"},"1:2515:2147":{"crate_id":1,"path":["std","io","buffered","bufreader","BufReader"],"kind":"struct"},"1:944:1975":{"crate_id":1,"path":["std","collections","hash","map","Drain"],"kind":"struct"},"5:3542:1976":{"crate_id":5,"path":["alloc","collections","linked_list","DrainFilter"],"kind":"struct"},"2:2673:223":{"crate_id":2,"path":["core","marker","StructuralPartialEq"],"kind":"trait"},"16:2825:15085":{"crate_id":16,"path":["gimli","common","DebugTypeSignature"],"kind":"struct"},"2:2670:1867":{"crate_id":2,"path":["core","marker","Sized"],"kind":"trait"},"1:8421:2135":{"crate_id":1,"path":["std","io","Take"],"kind":"struct"},"2:51093:7548":{"crate_id":2,"path":["core","alloc","AllocError"],"kind":"struct"},"1:774:141":{"crate_id":1,"path":["std","collections","hash","map","HashMap"],"kind":"struct"},"16:6017:15020":{"crate_id":16,"path":["gimli","read","dwarf","DwarfPackage"],"kind":"struct"},"6:4665:12110":{"crate_id":6,"path":["libc","unix","linux_like","linux","file_clone_range"],"kind":"struct"},"2:48537:89":{"crate_id":2,"path":["core","sync","atomic","AtomicU32"],"kind":"struct"},"2:53884:2486":{"crate_id":2,"path":["core","core_arch","simd","u32x16"],"kind":"struct"},"12:60:32672":{"crate_id":12,"path":["hashbrown","raw","bitmask","BitMaskIter"],"kind":"struct"},"1:5178:2270":{"crate_id":1,"path":["std","os","net","linux_ext","tcp","TcpStreamExt"],"kind":"trait"},"17:13082:18986":{"crate_id":17,"path":["object","pe","ImageBoundImportDescriptor"],"kind":"struct"},"2:50369:7661":{"crate_id":2,"path":["core","str","iter","SplitAsciiWhitespace"],"kind":"struct"},"5:6412:241":{"crate_id":5,"path":["alloc","vec","Vec"],"kind":"struct"},"2:49976:7621":{"crate_id":2,"path":["core","slice","iter","RChunksMut"],"kind":"struct"},"1:7961:2048":{"crate_id":1,"path":["std","env","VarError"],"kind":"enum"},"18:96:19198":{"crate_id":18,"path":["memchr","memchr","iter","Memchr2"],"kind":"struct"},"1:7981:19597":{"crate_id":1,"path":["std","error","private","Internal"],"kind":"struct"},"2:20343:2418":{"crate_id":2,"path":["core","core_simd","lane_count","LaneCount"],"kind":"struct"},"2:49174:71":{"crate_id":2,"path":["core","fmt","ArgumentV1"],"kind":"struct"},"5:6817:1972":{"crate_id":5,"path":["alloc","collections","vec_deque","into_iter","IntoIter"],"kind":"struct"},"17:11547:15278":{"crate_id":17,"path":["object","macho","FatArch64"],"kind":"struct"},"12:393:32669":{"crate_id":12,"path":["hashbrown","raw","RawIterHashInner"],"kind":"struct"},"16:7044:19718":{"crate_id":16,"path":["gimli","read","op","OperationEvaluationResult"],"kind":"enum"},"1:12302:308":{"crate_id":1,"path":["std","array"],"kind":"primitive"},"6:5554:12701":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","mallinfo"],"kind":"struct"},"1:6233:203":{"crate_id":1,"path":["std","sync","mpmc","counter","Receiver"],"kind":"struct"},"2:47145:2029":{"crate_id":2,"path":["core","iter","adapters","by_ref_sized","ByRefSized"],"kind":"struct"},"16:2930:14930":{"crate_id":16,"path":["gimli","common","SectionId"],"kind":"enum"},"2:10698:7663":{"crate_id":2,"path":["core","str","converts","from_utf8"],"kind":"function"},"17:9223:15128":{"crate_id":17,"path":["object","read","archive","ArchiveKind"],"kind":"enum"},"16:5388:14996":{"crate_id":16,"path":["gimli","read","cfi","DebugFrame"],"kind":"struct"},"16:6735:14966":{"crate_id":16,"path":["gimli","read","loclists","RawLocListIter"],"kind":"struct"},"2:49866:7611":{"crate_id":2,"path":["core","slice","iter","Windows"],"kind":"struct"},"16:6567:14962":{"crate_id":16,"path":["gimli","read","line","IncompleteLineProgram"],"kind":"struct"},"1:11681:22494":{"crate_id":1,"path":["std","sys_common","wtf8","Wtf8CodePoints"],"kind":"struct"},"1:1114:1987":{"crate_id":1,"path":["std","collections","hash","map","VacantEntry"],"kind":"struct"},"2:56653:2494":{"crate_id":2,"path":["core","core_simd","swizzle","Which"],"kind":"enum"},"17:10583:15334":{"crate_id":17,"path":["object","read","ObjectKind"],"kind":"enum"},"17:12337:15326":{"crate_id":17,"path":["object","macho","Relocation"],"kind":"struct"},"16:534:19740":{"crate_id":16,"path":["gimli","read","cfi","RegisterRuleMap"],"kind":"struct"},"2:54190:7534":{"crate_id":2,"path":["core","core_arch","x86","__m512d"],"kind":"struct"},"1:990:1982":{"crate_id":1,"path":["std","collections","hash","map","RawOccupiedEntryMut"],"kind":"struct"},"17:12118:18181":{"crate_id":17,"path":["object","macho","EncryptionInfoCommand64"],"kind":"struct"},"2:2806:8006":{"crate_id":2,"path":["core","ops","bit","Not"],"kind":"trait"},"17:11247:15661":{"crate_id":17,"path":["object","elf","Dyn64"],"kind":"struct"},"2:47000:7771":{"crate_id":2,"path":["core","char","TryFromCharError"],"kind":"struct"},"1:5009:2217":{"crate_id":1,"path":["std","os","fd","raw","AsRawFd"],"kind":"trait"},"17:13221:19030":{"crate_id":17,"path":["object","pe","ImageEpilogueDynamicRelocationHeader"],"kind":"struct"},"1:4505:2238":{"crate_id":1,"path":["std","os","unix","net","datagram","UnixDatagram"],"kind":"struct"},"12:320:19678":{"crate_id":12,"path":["hashbrown","raw","RawIntoIter"],"kind":"struct"},"2:11990:139":{"crate_id":2,"path":["core","alloc","global","GlobalAlloc"],"kind":"trait"},"16:7603:14970":{"crate_id":16,"path":["gimli","read","unit","UnitHeader"],"kind":"struct"},"6:4398:12082":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Ehdr"],"kind":"struct"},"17:10796:15343":{"crate_id":17,"path":["object","read","CodeView"],"kind":"struct"},"17:9328:15146":{"crate_id":17,"path":["object","read","coff","section","CoffSegment"],"kind":"struct"},"5:6991:7683":{"crate_id":5,"path":["alloc","string","FromUtf16Error"],"kind":"struct"},"2:50072:2136":{"crate_id":2,"path":["core","str","iter","Bytes"],"kind":"struct"},"16:6270:14945":{"crate_id":16,"path":["gimli","read","index","DebugCuIndex"],"kind":"struct"},"6:1686:9715":{"crate_id":6,"path":["libc","unix","linux_like","arphdr"],"kind":"struct"},"17:8911:33471":{"crate_id":17,"path":["object","read","any","SegmentInternal"],"kind":"enum"},"2:6523:7955":{"crate_id":2,"path":["core","iter","adapters","zip","TrustedRandomAccessNoCoerce"],"kind":"trait"},"1:7299:22488":{"crate_id":1,"path":["std","sys_common","wstr","WStrUnits"],"kind":"struct"},"17:9873:15273":{"crate_id":17,"path":["object","read","macho","file","MachOComdatIterator"],"kind":"struct"},"18:507:33612":{"crate_id":18,"path":["memchr","memmem","genericsimd","Forward"],"kind":"struct"},"1:12310:730":{"crate_id":1,"path":["std","i8"],"kind":"primitive"},"2:47299:7965":{"crate_id":2,"path":["core","iter","adapters","rev","Rev"],"kind":"struct"},"1:11762:19298":{"crate_id":1,"path":["std","sys_common","net","LookupHost"],"kind":"struct"},"1:7977:2055":{"crate_id":1,"path":["std","env","JoinPathsError"],"kind":"struct"},"2:47633:7944":{"crate_id":2,"path":["core","iter","sources","successors","Successors"],"kind":"struct"},"1:3314:2144":{"crate_id":1,"path":["std","io","stdio","IsTerminal"],"kind":"trait"},"17:12060:18177":{"crate_id":17,"path":["object","macho","RpathCommand"],"kind":"struct"},"17:10108:15231":{"crate_id":17,"path":["object","read","macho","section","MachOSection"],"kind":"struct"},"18:671:19171":{"crate_id":18,"path":["memchr","memmem","FindRevIter"],"kind":"struct"},"16:5525:15004":{"crate_id":16,"path":["gimli","read","cfi","SectionBaseAddresses"],"kind":"struct"},"2:48237:8096":{"crate_id":2,"path":["core","panicking","AssertKind"],"kind":"enum"},"1:9449:15040":{"crate_id":1,"path":["std","sync","mpmc","select","Operation"],"kind":"struct"},"1:5169:2269":{"crate_id":1,"path":["std","os","net","linux_ext","addr","SocketAddrExt"],"kind":"trait"},"17:12073:18178":{"crate_id":17,"path":["object","macho","LinkeditDataCommand"],"kind":"struct"},"2:48870:7578":{"crate_id":2,"path":["core","fmt","num","UpperHex"],"kind":"struct"},"6:7208:12247":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_mutexattr_t"],"kind":"struct"},"1:887:1970":{"crate_id":1,"path":["std","collections","hash","map","Iter"],"kind":"struct"},"2:48246:190":{"crate_id":2,"path":["core","pin","Pin"],"kind":"struct"},"1:1476:143":{"crate_id":1,"path":["std","collections","hash","set","HashSet"],"kind":"struct"},"2:3365:7717":{"crate_id":2,"path":["core","any","Provider"],"kind":"trait"},"17:12860:18545":{"crate_id":17,"path":["object","pe","ImageSymbolEx"],"kind":"struct"},"16:6690:14951":{"crate_id":16,"path":["gimli","read","loclists","DebugLocLists"],"kind":"struct"},"1:8441:2139":{"crate_id":1,"path":["std","io","Lines"],"kind":"struct"},"17:8526:15109":{"crate_id":17,"path":["object","endian","U16Bytes"],"kind":"struct"},"17:9371:15156":{"crate_id":17,"path":["object","read","coff","symbol","SymbolIterator"],"kind":"struct"},"2:39403:7975":{"crate_id":2,"path":["core","marker","PhantomPinned"],"kind":"struct"},"6:6424:13161":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_xmmreg"],"kind":"struct"},"2:7747:2292":{"crate_id":2,"path":["core","panic","unwind_safe","UnwindSafe"],"kind":"trait"},"5:1954:19566":{"crate_id":5,"path":["alloc","collections","btree","merge_iter","MergeIterInner"],"kind":"struct"},"2:57062:243":{"crate_id":2,"path":["core","core_simd","fmt","fmt","Wrapper"],"kind":"struct"},"2:20469:2218":{"crate_id":2,"path":["core","core_simd","masks","to_bitmask","sealed","Sealed"],"kind":"trait"},"2:8763:28278":{"crate_id":2,"path":["core","fmt","fmt","BorrowedPlaceholder"],"kind":"struct"},"17:9183:15378":{"crate_id":17,"path":["object","read","any","SectionRelocationIterator"],"kind":"struct"},"2:2565:115":{"crate_id":2,"path":["core","default","Default"],"kind":"trait"},"2:50236:7674":{"crate_id":2,"path":["core","str","iter","MatchIndices"],"kind":"struct"},"6:6409:13159":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","pthread_attr_t"],"kind":"struct"},"1:12308:630":{"crate_id":1,"path":["std","f32"],"kind":"primitive"},"2:50394:1956":{"crate_id":2,"path":["core","str","iter","EscapeDefault"],"kind":"struct"},"17:11997:18172":{"crate_id":17,"path":["object","macho","DylibReference"],"kind":"struct"},"1:9525:215":{"crate_id":1,"path":["std","sync","rwlock","RwLockReadGuard"],"kind":"struct"},"2:53946:2451":{"crate_id":2,"path":["core","core_arch","simd","f32x16"],"kind":"struct"},"2:20040:29147":{"crate_id":2,"path":["core","core_simd","swizzle","rotate_lanes_left","Rotate"],"kind":"struct"},"1:12299:1472":{"crate_id":1,"path":["std","unit"],"kind":"primitive"},"6:4581:12099":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_extended_err"],"kind":"struct"},"1:8105:129":{"crate_id":1,"path":["std","fs","FileType"],"kind":"struct"},"2:48305:1971":{"crate_id":2,"path":["core","result","IterMut"],"kind":"struct"},"5:1691:1976":{"crate_id":5,"path":["alloc","collections","btree","map","DrainFilter"],"kind":"struct"},"1:10650:2322":{"crate_id":1,"path":["std","sys","unix","process","process_common","Command"],"kind":"struct"},"16:7135:19722":{"crate_id":16,"path":["gimli","read","op","EvaluationWaiting"],"kind":"enum"},"16:6210:15025":{"crate_id":16,"path":["gimli","read","aranges","ArangeHeader"],"kind":"struct"},"1:7944:1989":{"crate_id":1,"path":["std","collections","hash","map","RandomState"],"kind":"struct"},"2:8847:144":{"crate_id":2,"path":["core","hash","Hasher"],"kind":"trait"},"6:1695:9716":{"crate_id":6,"path":["libc","unix","linux_like","mmsghdr"],"kind":"struct"},"17:12349:18324":{"crate_id":17,"path":["object","macho","RelocationInfo"],"kind":"struct"},"2:4192:204":{"crate_id":2,"path":["core","cell","RefCell"],"kind":"struct"},"1:8428:2136":{"crate_id":1,"path":["std","io","Bytes"],"kind":"struct"},"6:575:8817":{"crate_id":6,"path":["libc","unix","linger"],"kind":"struct"},"2:2789:2410":{"crate_id":2,"path":["core","ops","arith","SubAssign"],"kind":"trait"},"2:54205:7535":{"crate_id":2,"path":["core","core_arch","x86","__m128bh"],"kind":"struct"},"2:46543:1996":{"crate_id":2,"path":["core","ops","range","Bound"],"kind":"enum"},"5:6811:1972":{"crate_id":5,"path":["alloc","collections","linked_list","IntoIter"],"kind":"struct"},"6:4185:12058":{"crate_id":6,"path":["libc","unix","linux_like","linux","fsid_t"],"kind":"struct"},"5:2030:30464":{"crate_id":5,"path":["alloc","collections","btree","navigate","LazyLeafHandle"],"kind":"enum"},"13:0:1727":{"crate_id":13,"path":["std_detect"],"kind":"module"},"17:10997:15385":{"crate_id":17,"path":["object","elf","Ident"],"kind":"struct"},"5:5202:7711":{"crate_id":5,"path":["alloc","string","retain","SetLenOnDrop"],"kind":"struct"},"17:8991:33262":{"crate_id":17,"path":["object","read","any","ComdatIteratorInternal"],"kind":"enum"},"1:3157:19363":{"crate_id":1,"path":["std","io","stdio","StdoutRaw"],"kind":"struct"},"6:1511:9698":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreqn"],"kind":"struct"},"2:29626:67":{"crate_id":2,"path":["core","ptr","alignment","Alignment"],"kind":"struct"},"2:11130:7639":{"crate_id":2,"path":["core","str","pattern"],"kind":"module"},"2:49394:28288":{"crate_id":2,"path":["core","hash","sip","SipHasher24"],"kind":"struct"},"6:4768:12120":{"crate_id":6,"path":["libc","unix","linux_like","linux","mq_attr"],"kind":"struct"},"2:20921:29145":{"crate_id":2,"path":["core","core_simd","vector","splat","Splat"],"kind":"struct"},"2:57049:243":{"crate_id":2,"path":["core","core_simd","fmt","fmt","Wrapper"],"kind":"struct"},"2:7749:2290":{"crate_id":2,"path":["core","panic","unwind_safe","AssertUnwindSafe"],"kind":"struct"},"5:6864:2009":{"crate_id":5,"path":["alloc","collections","TryReserveError"],"kind":"struct"},"5:5968:1975":{"crate_id":5,"path":["alloc","vec","drain","Drain"],"kind":"struct"},"2:8629:7576":{"crate_id":2,"path":["core","fmt","UpperExp"],"kind":"trait"},"18:736:19177":{"crate_id":18,"path":["memchr","memmem","SearcherKind"],"kind":"enum"},"1:9383:22598":{"crate_id":1,"path":["std","sync","mpmc","array","ArrayToken"],"kind":"struct"},"1:6543:203":{"crate_id":1,"path":["std","sync","mpmc","Receiver"],"kind":"struct"},"2:49411:144":{"crate_id":2,"path":["core","hash","sip","Hasher"],"kind":"struct"},"2:21724:172":{"crate_id":2,"path":["core","num","nonzero","NonZeroU16"],"kind":"struct"},"2:29598:7707":{"crate_id":2,"path":["core","mem","maybe_uninit","MaybeUninit"],"kind":"union"},"2:46834:1956":{"crate_id":2,"path":["core","ascii","EscapeDefault"],"kind":"struct"},"5:3430:30532":{"crate_id":5,"path":["alloc","collections","linked_list","drop","DropGuard"],"kind":"struct"},"6:6352:9664":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stat64"],"kind":"struct"},"6:1608:9709":{"crate_id":6,"path":["libc","unix","linux_like","lconv"],"kind":"struct"},"5:2743:30414":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Mut"],"kind":"struct"},"2:53026:2461":{"crate_id":2,"path":["core","core_arch","simd","i16x16"],"kind":"struct"},"2:10843:8169":{"crate_id":2,"path":["core","str","iter","SplitInternal"],"kind":"struct"},"16:4297:14528":{"crate_id":16,"path":["gimli","constants","DwLle"],"kind":"struct"},"16:7825:15053":{"crate_id":16,"path":["gimli","read","unit","Attribute"],"kind":"struct"},"1:8447:152":{"crate_id":1,"path":["std","net","ip_addr","IpAddr"],"kind":"enum"},"12:985:1985":{"crate_id":12,"path":["hashbrown","map","Entry"],"kind":"enum"},"16:6463:15031":{"crate_id":16,"path":["gimli","read","line","LineInstructions"],"kind":"struct"},"17:8441:15362":{"crate_id":17,"path":["object","common","SymbolFlags"],"kind":"enum"},"18:0:1738":{"crate_id":18,"path":["memchr"],"kind":"module"},"2:46921:7766":{"crate_id":2,"path":["core","char","EscapeUnicodeState"],"kind":"enum"},"6:4206:11905":{"crate_id":6,"path":["libc","unix","linux_like","linux","if_nameindex"],"kind":"struct"},"2:49986:7619":{"crate_id":2,"path":["core","slice","iter","RChunksExact"],"kind":"struct"},"2:49107:70":{"crate_id":2,"path":["core","fmt","rt","v1","Argument"],"kind":"struct"},"1:11372:24237":{"crate_id":1,"path":["std","sys","unix","process","process_inner","do_exec","Reset"],"kind":"struct"},"1:11306:2327":{"crate_id":1,"path":["std","sys","unix","process","process_common","ExitCode"],"kind":"struct"},"6:5772:12751":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_data"],"kind":"union"},"1:8362:2164":{"crate_id":1,"path":["std","io","util","Empty"],"kind":"struct"},"17:9631:15165":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdatIterator"],"kind":"struct"},"17:1771:15172":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbolIterator"],"kind":"struct"},"5:6735:2000":{"crate_id":5,"path":["alloc","collections","binary_heap","IntoIterSorted"],"kind":"struct"},"17:9303:15151":{"crate_id":17,"path":["object","read","coff","section","SectionTable"],"kind":"struct"},"16:4749:14651":{"crate_id":16,"path":["gimli","constants","DwDefaulted"],"kind":"struct"},"2:7012:7946":{"crate_id":2,"path":["core","iter","traits","accum","Product"],"kind":"trait"},"1:12280:23186":{"crate_id":1,"path":["std","backtrace_rs","print","PrintFmt"],"kind":"enum"},"1:8686:2182":{"crate_id":1,"path":["std","os","unix","net","addr","SocketAddr"],"kind":"struct"},"18:113:19199":{"crate_id":18,"path":["memchr","memchr","iter","Memchr3"],"kind":"struct"},"17:10625:15336":{"crate_id":17,"path":["object","read","SymbolIndex"],"kind":"struct"},"2:2235:98":{"crate_id":2,"path":["core","borrow","BorrowMut"],"kind":"trait"},"12:1003:1986":{"crate_id":12,"path":["hashbrown","map","OccupiedEntry"],"kind":"struct"},"16:5433:14998":{"crate_id":16,"path":["gimli","read","cfi","ParsedEhFrameHdr"],"kind":"struct"},"12:1836:1972":{"crate_id":12,"path":["hashbrown","set","IntoIter"],"kind":"struct"},"16:7237:15043":{"crate_id":16,"path":["gimli","read","op","OperationIter"],"kind":"struct"},"1:1626:1993":{"crate_id":1,"path":["std","collections","hash","set","Difference"],"kind":"struct"},"18:574:33612":{"crate_id":18,"path":["memchr","memmem","twoway","Forward"],"kind":"struct"},"2:50350:7673":{"crate_id":2,"path":["core","str","iter","LinesAny"],"kind":"struct"},"1:8504:2180":{"crate_id":1,"path":["std","net","ip_addr","Ipv6MulticastScope"],"kind":"enum"},"2:29379:2193":{"crate_id":2,"path":["core","num","FpCategory"],"kind":"enum"},"6:5684:12743":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","Elf64_Chdr"],"kind":"struct"},"17:11974:18171":{"crate_id":17,"path":["object","macho","DylibModule64"],"kind":"struct"},"9:0:1730":{"crate_id":9,"path":["miniz_oxide"],"kind":"module"},"12:1628:32662":{"crate_id":12,"path":["hashbrown","scopeguard","ScopeGuard"],"kind":"struct"},"6:5749:32106":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","sifields_sigchld"],"kind":"struct"},"2:46974:7769":{"crate_id":2,"path":["core","char","ToUppercase"],"kind":"struct"},"2:47266:7963":{"crate_id":2,"path":["core","iter","adapters","map","Map"],"kind":"struct"},"2:46849:7773":{"crate_id":2,"path":["core","char","convert","ParseCharError"],"kind":"struct"},"17:11356:15799":{"crate_id":17,"path":["object","elf","HashHeader"],"kind":"struct"},"6:1707:2229":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_un"],"kind":"struct"},"17:10670:15339":{"crate_id":17,"path":["object","read","SymbolMap"],"kind":"struct"},"1:8903:2305":{"crate_id":1,"path":["std","path","Component"],"kind":"enum"},"1:574:1934":{"crate_id":1,"path":["std","thread","Packet"],"kind":"struct"},"2:3194:7560":{"crate_id":2,"path":["core","ops","unsize","CoerceUnsized"],"kind":"trait"},"1:8329:2107":{"crate_id":1,"path":["std","io","readbuf","BorrowedCursor"],"kind":"struct"},"2:52212:2480":{"crate_id":2,"path":["core","core_arch","simd","u16x8"],"kind":"struct"},"8:0:1729":{"crate_id":8,"path":["cfg_if"],"kind":"module"},"9:827:13916":{"crate_id":9,"path":["miniz_oxide","inflate","TINFLStatus"],"kind":"enum"},"16:7211:14935":{"crate_id":16,"path":["gimli","read","op","Expression"],"kind":"struct"},"16:3716:14075":{"crate_id":16,"path":["gimli","constants","DwChildren"],"kind":"struct"},"6:1722:9719":{"crate_id":6,"path":["libc","unix","linux_like","utsname"],"kind":"struct"},"6:6311:13157":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","siginfo_t"],"kind":"struct"},"6:4653:12108":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlmsgerr"],"kind":"struct"},"1:9212:183":{"crate_id":1,"path":["std","process","Output"],"kind":"struct"},"2:11356:111":{"crate_id":2,"path":["core","str","lossy","Debug"],"kind":"struct"},"17:9350:15144":{"crate_id":17,"path":["object","read","coff","section","CoffSection"],"kind":"struct"},"1:4433:2235":{"crate_id":1,"path":["std","os","unix","net","ancillary","ScmCredentials"],"kind":"struct"},"16:5235:32985":{"crate_id":16,"path":["gimli","read","util","sealed","CapacityFull"],"kind":"struct"},"1:4425:2234":{"crate_id":1,"path":["std","os","unix","net","ancillary","ScmRights"],"kind":"struct"},"16:2535:15073":{"crate_id":16,"path":["gimli","common","DebugLocListsBase"],"kind":"struct"},"1:12264:24388":{"crate_id":1,"path":["std","backtrace_rs","symbolize","gimli","Cache"],"kind":"struct"},"17:13279:19032":{"crate_id":17,"path":["object","pe","ImageLoadConfigDirectory64"],"kind":"struct"},"1:8122:118":{"crate_id":1,"path":["std","fs","DirBuilder"],"kind":"struct"},"12:815:1980":{"crate_id":12,"path":["hashbrown","map","RawEntryBuilderMut"],"kind":"struct"},"2:7109:1873":{"crate_id":2,"path":["core","iter","traits","exact_size","ExactSizeIterator"],"kind":"trait"},"5:1437:195":{"crate_id":5,"path":["alloc","collections","btree","map","Range"],"kind":"struct"},"16:5614:19738":{"crate_id":16,"path":["gimli","read","cfi","AugmentationData"],"kind":"struct"},"6:1525:9700":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr"],"kind":"struct"},"6:5727:12748":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_exit"],"kind":"struct"},"1:8411:2134":{"crate_id":1,"path":["std","io","Chain"],"kind":"struct"},"1:4441:2236":{"crate_id":1,"path":["std","os","unix","net","ancillary","AncillaryData"],"kind":"enum"},"1:11639:20179":{"crate_id":1,"path":["std","sys_common","wtf8","CodePoint"],"kind":"struct"},"1:8638:2187":{"crate_id":1,"path":["std","net","tcp","Incoming"],"kind":"struct"},"1:6010:2391":{"crate_id":1,"path":["std","sync","barrier","Barrier"],"kind":"struct"},"5:1944:1927":{"crate_id":5,"path":["alloc","collections","btree","mem","replace","PanicGuard"],"kind":"struct"},"16:4635:14632":{"crate_id":16,"path":["gimli","constants","DwInl"],"kind":"struct"},"17:9501:15151":{"crate_id":17,"path":["object","read","elf","section","SectionTable"],"kind":"struct"},"5:3107:1976":{"crate_id":5,"path":["alloc","collections","btree","set","DrainFilter"],"kind":"struct"},"2:46960:7670":{"crate_id":2,"path":["core","char","EscapeDebug"],"kind":"struct"},"2:20502:2421":{"crate_id":2,"path":["core","core_simd","masks","Mask"],"kind":"struct"},"1:9346:2343":{"crate_id":1,"path":["std","sync","mpsc","TrySendError"],"kind":"enum"},"1:12321:1509":{"crate_id":1,"path":["std","usize"],"kind":"primitive"},"16:2282:15063":{"crate_id":16,"path":["gimli","common","Encoding"],"kind":"struct"},"6:0:801":{"crate_id":6,"path":["libc"],"kind":"module"},"18:538:19185":{"crate_id":18,"path":["memchr","memmem","rabinkarp","NeedleHash"],"kind":"struct"},"6:4461:12087":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Shdr"],"kind":"struct"},"17:1021:15154":{"crate_id":17,"path":["object","read","coff","relocation","CoffRelocationIterator"],"kind":"struct"},"5:3339:160":{"crate_id":5,"path":["alloc","collections","linked_list","LinkedList"],"kind":"struct"},"1:4216:2201":{"crate_id":1,"path":["std","os","unix","ffi","os_str","OsStrExt"],"kind":"trait"},"18:755:19178":{"crate_id":18,"path":["memchr","memmem","SearcherRev"],"kind":"struct"},"16:7929:15055":{"crate_id":16,"path":["gimli","read","unit","EntriesTreeNode"],"kind":"struct"},"2:21017:2419":{"crate_id":2,"path":["core","core_simd","vector","SimdElement"],"kind":"trait"},"5:6481:30535":{"crate_id":5,"path":["alloc","vec","dedup_by","FillGapOnDrop"],"kind":"struct"},"17:13580:19122":{"crate_id":17,"path":["object","pe","ImportObjectHeader"],"kind":"struct"},"1:900:1971":{"crate_id":1,"path":["std","collections","hash","map","IterMut"],"kind":"struct"},"16:6719:19884":{"crate_id":16,"path":["gimli","read","loclists","LocListsFormat"],"kind":"enum"},"2:1672:1063":{"crate_id":2,"path":["core","ptr"],"kind":"module"},"17:13192:19022":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation32V2"],"kind":"struct"},"17:11343:15786":{"crate_id":17,"path":["object","elf","NoteHeader64"],"kind":"struct"},"16:3010:15090":{"crate_id":16,"path":["gimli","common","DwarfFileType"],"kind":"enum"},"16:6668:19886":{"crate_id":16,"path":["gimli","read","lists","ListsHeader"],"kind":"struct"},"17:11661:18092":{"crate_id":17,"path":["object","macho","Section32"],"kind":"struct"},"1:3086:2167":{"crate_id":1,"path":["std","io","readbuf","BorrowedBuf"],"kind":"struct"},"6:4267:12067":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_mask"],"kind":"struct"},"1:9823:128":{"crate_id":1,"path":["std","sys","unix","fs","File"],"kind":"struct"},"1:9484:20379":{"crate_id":1,"path":["std","sync","mpmc","utils","CachePadded"],"kind":"struct"},"18:636:33621":{"crate_id":18,"path":["memchr","memmem","twoway","ApproximateByteSet"],"kind":"struct"},"16:2842:15086":{"crate_id":16,"path":["gimli","common","DebugFrameOffset"],"kind":"struct"},"2:5387:7960":{"crate_id":2,"path":["core","iter","adapters","flatten","FlatMap"],"kind":"struct"},"16:6345:14948":{"crate_id":16,"path":["gimli","read","line","DebugLine"],"kind":"struct"},"2:48228:2289":{"crate_id":2,"path":["core","panic","panic_info","PanicInfo"],"kind":"struct"},"17:8418:15359":{"crate_id":17,"path":["object","common","SectionFlags"],"kind":"enum"},"17:13168:19019":{"crate_id":17,"path":["object","pe","ImageDynamicRelocationTable"],"kind":"struct"},"6:4367:12080":{"crate_id":6,"path":["libc","unix","linux_like","linux","dl_phdr_info"],"kind":"struct"},"5:6014:30532":{"crate_id":5,"path":["alloc","vec","drain","drop","DropGuard"],"kind":"struct"},"12:1029:1987":{"crate_id":12,"path":["hashbrown","map","VacantEntry"],"kind":"struct"},"2:2844:8010":{"crate_id":2,"path":["core","ops","bit","BitOrAssign"],"kind":"trait"},"1:8434:2138":{"crate_id":1,"path":["std","io","Split"],"kind":"struct"},"16:7059:2288":{"crate_id":16,"path":["gimli","read","op","Location"],"kind":"enum"},"17:8494:15059":{"crate_id":17,"path":["object","endian","LittleEndian"],"kind":"struct"},"2:2759:2409":{"crate_id":2,"path":["core","ops","arith","Sub"],"kind":"trait"},"2:49884:7614":{"crate_id":2,"path":["core","slice","iter","ChunksMut"],"kind":"struct"},"1:7869:1921":{"crate_id":1,"path":["std","thread","Builder"],"kind":"struct"},"5:3764:30532":{"crate_id":5,"path":["alloc","collections","vec_deque","drain","drop","DropGuard"],"kind":"struct"},"6:581:8818":{"crate_id":6,"path":["libc","unix","sigval"],"kind":"struct"},"17:11576:17984":{"crate_id":17,"path":["object","macho","MachHeader64"],"kind":"struct"},"17:9422:15143":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdatIterator"],"kind":"struct"},"12:1065:19675":{"crate_id":12,"path":["hashbrown","map","KeyOrRef"],"kind":"enum"},"17:8822:33506":{"crate_id":17,"path":["object","read","any","FileInternal"],"kind":"enum"},"18:690:19173":{"crate_id":18,"path":["memchr","memmem","FinderRev"],"kind":"struct"},"17:11014:15497":{"crate_id":17,"path":["object","elf","SectionHeader32"],"kind":"struct"},"5:6923:19534":{"crate_id":5,"path":["alloc","ffi","c_str","FromBytesWithNulErrorKind"],"kind":"enum"},"2:52101:2448":{"crate_id":2,"path":["core","core_arch","simd","f32x2"],"kind":"struct"},"16:5793:15014":{"crate_id":16,"path":["gimli","read","cfi","UnwindTableRow"],"kind":"struct"},"6:5582:12736":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_pktinfo"],"kind":"struct"},"6:4621:12104":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_filter"],"kind":"struct"},"16:6877:15039":{"crate_id":16,"path":["gimli","read","op","DieReference"],"kind":"enum"},"1:661:1957":{"crate_id":1,"path":["std","backtrace","Backtrace"],"kind":"struct"},"2:9751:7624":{"crate_id":2,"path":["core","slice","iter","RSplitN"],"kind":"struct"},"12:387:32673":{"crate_id":12,"path":["hashbrown","raw","RawIterHash"],"kind":"struct"},"1:5394:188":{"crate_id":1,"path":["std","path","PathBuf"],"kind":"struct"},"12:1555:13978":{"crate_id":12,"path":["hashbrown","rustc_entry","RustcVacantEntry"],"kind":"struct"},"17:8110:15372":{"crate_id":17,"path":["object","common","AddressSize"],"kind":"enum"},"1:4403:19401":{"crate_id":1,"path":["std","os","unix","net","ancillary","AncillaryDataIter"],"kind":"struct"},"17:10296:15289":{"crate_id":17,"path":["object","read","pe","section","PeSection"],"kind":"struct"},"17:11087:15566":{"crate_id":17,"path":["object","elf","Sym32"],"kind":"struct"},"16:2868:15087":{"crate_id":16,"path":["gimli","common","EhFrameOffset"],"kind":"struct"},"17:10360:15286":{"crate_id":17,"path":["object","read","pe","export","ExportTable"],"kind":"struct"},"2:47014:101":{"crate_id":2,"path":["core","ffi","c_str","CStr"],"kind":"struct"},"2:7436:2005":{"crate_id":2,"path":["core","iter","traits","marker","TrustedLen"],"kind":"trait"},"17:10403:15324":{"crate_id":17,"path":["object","read","pe","import","Import"],"kind":"enum"},"2:29698:19531":{"crate_id":2,"path":["core","ptr","alignment","AlignmentEnum32"],"kind":"enum"},"6:4200:12060":{"crate_id":6,"path":["libc","unix","linux_like","linux","cpu_set_t"],"kind":"struct"},"2:9080:28156":{"crate_id":2,"path":["core","slice","sort","insert_head","InsertionHole"],"kind":"struct"},"2:3611:1972":{"crate_id":2,"path":["core","array","iter","IntoIter"],"kind":"struct"},"6:4810:12124":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_can_addr"],"kind":"union"},"16:6200:15024":{"crate_id":16,"path":["gimli","read","aranges","ArangeHeaderIter"],"kind":"struct"},"9:586:13782":{"crate_id":9,"path":["miniz_oxide","deflate","core","SymFreq"],"kind":"struct"},"16:5981:19744":{"crate_id":16,"path":["gimli","read","cfi","PointerEncodingParameters"],"kind":"struct"},"1:11952:14010":{"crate_id":1,"path":["std","backtrace_rs","backtrace","libunwind","Frame"],"kind":"enum"},"1:954:1976":{"crate_id":1,"path":["std","collections","hash","map","DrainFilter"],"kind":"struct"},"2:47237:7961":{"crate_id":2,"path":["core","iter","adapters","fuse","Fuse"],"kind":"struct"},"5:6774:1972":{"crate_id":5,"path":["alloc","collections","btree","set","IntoIter"],"kind":"struct"},"2:46417:197":{"crate_id":2,"path":["core","ops","range","RangeFull"],"kind":"struct"},"6:4611:12103":{"crate_id":6,"path":["libc","unix","linux_like","linux","j1939_filter"],"kind":"struct"},"6:4126:12054":{"crate_id":6,"path":["libc","unix","linux_like","linux","spwd"],"kind":"struct"},"6:4506:12090":{"crate_id":6,"path":["libc","unix","linux_like","linux","posix_spawn_file_actions_t"],"kind":"struct"},"2:8625:191":{"crate_id":2,"path":["core","fmt","Pointer"],"kind":"trait"},"17:420:14928":{"crate_id":17,"path":["object","read","any","Section"],"kind":"struct"},"1:10494:19329":{"crate_id":1,"path":["std","sys","unix","os_str","Slice"],"kind":"struct"},"1:11153:2108":{"crate_id":1,"path":["std","sys","unix","io","IoSlice"],"kind":"struct"},"2:2933:1872":{"crate_id":2,"path":["core","ops","function","FnOnce"],"kind":"trait"},"2:49226:73":{"crate_id":2,"path":["core","fmt","Arguments"],"kind":"struct"},"17:8814:128":{"crate_id":17,"path":["object","read","any","File"],"kind":"struct"},"2:47625:7942":{"crate_id":2,"path":["core","iter","sources","repeat_with","RepeatWith"],"kind":"struct"},"2:8887:7798":{"crate_id":2,"path":["core","hash","BuildHasherDefault"],"kind":"struct"},"17:12550:18389":{"crate_id":17,"path":["object","pe","ImageVxdHeader"],"kind":"struct"},"17:12739:18452":{"crate_id":17,"path":["object","pe","ImageNtHeaders32"],"kind":"struct"},"5:6720:2035":{"crate_id":5,"path":["alloc","alloc","Global"],"kind":"struct"},"2:9696:7623":{"crate_id":2,"path":["core","slice","iter","RSplitMut"],"kind":"struct"},"2:3314:68":{"crate_id":2,"path":["core","any","Any"],"kind":"trait"},"16:2261:15062":{"crate_id":16,"path":["gimli","common","Format"],"kind":"enum"},"2:46477:199":{"crate_id":2,"path":["core","ops","range","RangeTo"],"kind":"struct"},"1:8955:1970":{"crate_id":1,"path":["std","path","Iter"],"kind":"struct"},"2:10903:8168":{"crate_id":2,"path":["core","str","iter","MatchIndicesInternal"],"kind":"struct"},"6:5480:12729":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","aiocb"],"kind":"struct"},"17:12198:18247":{"crate_id":17,"path":["object","macho","LinkerOptionCommand"],"kind":"struct"},"15:0:1735":{"crate_id":15,"path":["addr2line"],"kind":"module"},"16:3632:14033":{"crate_id":16,"path":["gimli","constants","DwUt"],"kind":"struct"},"17:10894:15347":{"crate_id":17,"path":["object","read","CompressedData"],"kind":"struct"},"1:7804:24244":{"crate_id":1,"path":["std","backtrace_rs","Bomb"],"kind":"struct"},"17:1931:15166":{"crate_id":17,"path":["object","read","elf","relocation","ElfDynamicRelocationIterator"],"kind":"struct"},"16:7469:14953":{"crate_id":16,"path":["gimli","read","str","DebugStr"],"kind":"struct"},"1:8082:2087":{"crate_id":1,"path":["std","fs","FileTimes"],"kind":"struct"},"5:217:7567":{"crate_id":5,"path":["alloc","boxed","thin","ThinBox"],"kind":"struct"},"6:7166:13700":{"crate_id":6,"path":["libc","unix","linux_like","linux","arch","generic","termios2"],"kind":"struct"},"1:11495:2116":{"crate_id":1,"path":["std","sys","unix","time","SystemTime"],"kind":"struct"},"12:1859:1993":{"crate_id":12,"path":["hashbrown","set","Difference"],"kind":"struct"},"9:188:13816":{"crate_id":9,"path":["miniz_oxide","deflate","core","HuffmanOxide"],"kind":"struct"},"1:4908:23649":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt","st_ctime"],"kind":"foreign_type"},"16:3402:15094":{"crate_id":16,"path":["gimli","arch","X86"],"kind":"struct"},"6:5835:12779":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","sigset_t"],"kind":"struct"},"1:8075:2086":{"crate_id":1,"path":["std","fs","OpenOptions"],"kind":"struct"},"5:630:30387":{"crate_id":5,"path":["alloc","boxed","from","StringError"],"kind":"struct"},"17:13404:19074":{"crate_id":17,"path":["object","pe","ImageRuntimeFunctionEntry"],"kind":"struct"},"2:48689:92":{"crate_id":2,"path":["core","sync","atomic","AtomicUsize"],"kind":"struct"},"6:5523:12733":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","msghdr"],"kind":"struct"},"1:10321:19375":{"crate_id":1,"path":["std","sys","unix","net","Socket"],"kind":"struct"},"16:7093:15041":{"crate_id":16,"path":["gimli","read","op","Piece"],"kind":"struct"},"17:9722:15217":{"crate_id":17,"path":["object","read","elf","version","Version"],"kind":"struct"},"5:1359:1971":{"crate_id":5,"path":["alloc","collections","btree","map","IterMut"],"kind":"struct"},"12:834:1982":{"crate_id":12,"path":["hashbrown","map","RawOccupiedEntryMut"],"kind":"struct"},"2:2446:7789":{"crate_id":2,"path":["core","convert","num","FloatToInt"],"kind":"trait"},"1:9636:2060":{"crate_id":1,"path":["std","sys","unix","args","Args"],"kind":"struct"},"6:4300:12072":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_ramp_effect"],"kind":"struct"},"5:1312:94":{"crate_id":5,"path":["alloc","collections","btree","map","BTreeMap"],"kind":"struct"},"16:7637:14958":{"crate_id":16,"path":["gimli","read","unit","DebuggingInformationEntry"],"kind":"struct"},"1:8693:2240":{"crate_id":1,"path":["std","os","unix","net","ancillary","SocketCred"],"kind":"struct"},"1:2652:2150":{"crate_id":1,"path":["std","io","buffered","linewriter","LineWriter"],"kind":"struct"},"11:36:32658":{"crate_id":11,"path":["adler","algo","U32X4"],"kind":"struct"},"16:7288:15047":{"crate_id":16,"path":["gimli","read","pubnames","PubNamesEntryIter"],"kind":"struct"},"16:6052:15022":{"crate_id":16,"path":["gimli","read","dwarf","RangeIter"],"kind":"struct"},"2:49441:28162":{"crate_id":2,"path":["core","hash","sip","Sip24Rounds"],"kind":"struct"},"2:2923:1869":{"crate_id":2,"path":["core","ops","drop","Drop"],"kind":"trait"},"2:3179:19454":{"crate_id":2,"path":["core","ops","try_trait","NeverShortCircuitResidual"],"kind":"enum"},"1:4268:2206":{"crate_id":1,"path":["std","os","unix","fs","MetadataExt"],"kind":"trait"},"17:8796:15371":{"crate_id":17,"path":["object","read","util","StringTable"],"kind":"struct"},"1:11456:2326":{"crate_id":1,"path":["std","sys","unix","process","process_inner","ExitStatusError"],"kind":"struct"},"1:5506:187":{"crate_id":1,"path":["std","path","Path"],"kind":"struct"},"2:39390:19597":{"crate_id":2,"path":["core","error","private","Internal"],"kind":"struct"},"2:52242:2484":{"crate_id":2,"path":["core","core_arch","simd","u32x4"],"kind":"struct"},"2:2740:7557":{"crate_id":2,"path":["core","marker","Tuple"],"kind":"trait"},"2:52410:2467":{"crate_id":2,"path":["core","core_arch","simd","i64x2"],"kind":"struct"},"18:80:19197":{"crate_id":18,"path":["memchr","memchr","iter","Memchr"],"kind":"struct"},"1:8221:19336":{"crate_id":1,"path":["std","io","error","Custom"],"kind":"struct"},"6:5504:12731":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__timeval"],"kind":"struct"},"18:699:19174":{"crate_id":18,"path":["memchr","memmem","FinderBuilder"],"kind":"struct"},"5:3350:1970":{"crate_id":5,"path":["alloc","collections","linked_list","Iter"],"kind":"struct"},"17:13024:18978":{"crate_id":17,"path":["object","pe","ImageImportByName"],"kind":"struct"},"2:2785:2408":{"crate_id":2,"path":["core","ops","arith","AddAssign"],"kind":"trait"},"17:10721:15342":{"crate_id":17,"path":["object","read","ObjectMapEntry"],"kind":"struct"},"16:7396:15052":{"crate_id":16,"path":["gimli","read","rnglists","RawRngListEntry"],"kind":"enum"},"2:2494:235":{"crate_id":2,"path":["core","convert","TryInto"],"kind":"trait"},"16:5737:15011":{"crate_id":16,"path":["gimli","read","cfi","UnwindContext"],"kind":"struct"},"6:1505:9697":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreq"],"kind":"struct"},"17:9791:15222":{"crate_id":17,"path":["object","read","elf","version","VernauxIterator"],"kind":"struct"},"2:11135:7635":{"crate_id":2,"path":["core","str","pattern","Pattern"],"kind":"trait"},"17:10374:15288":{"crate_id":17,"path":["object","read","pe","import","ImportTable"],"kind":"struct"},"2:51000:208":{"crate_id":2,"path":["core","future","ResumeTy"],"kind":"struct"},"0:0:1630":{"crate_id":0,"path":["winapi"],"kind":"module"},"2:21214:28017":{"crate_id":2,"path":["core","num","dec2flt","common","AsciiStr"],"kind":"struct"},"2:4263:7746":{"crate_id":2,"path":["core","cell","BorrowRef"],"kind":"struct"},"13:220:32718":{"crate_id":13,"path":["std_detect","detect","cache","Initializer"],"kind":"struct"},"1:11163:24033":{"crate_id":1,"path":["std","sys","unix","kernel_copy","SpliceMode"],"kind":"enum"},"17:9193:33479":{"crate_id":17,"path":["object","read","any","SectionRelocationIteratorInternal"],"kind":"enum"},"16:5460:15000":{"crate_id":16,"path":["gimli","read","cfi","EhHdrTable"],"kind":"struct"},"17:13536:19114":{"crate_id":17,"path":["object","pe","ImageSeparateDebugHeader"],"kind":"struct"},"17:12768:18497":{"crate_id":17,"path":["object","pe","AnonObjectHeader"],"kind":"struct"},"16:4262:14507":{"crate_id":16,"path":["gimli","constants","DwAte"],"kind":"struct"},"6:7289:13729":{"crate_id":6,"path":["libc","unix","align","in6_addr"],"kind":"struct"},"2:50466:7640":{"crate_id":2,"path":["core","str","pattern","SearchStep"],"kind":"enum"},"1:681:1962":{"crate_id":1,"path":["std","backtrace","BacktraceSymbol"],"kind":"struct"},"6:1518:9699":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreq_source"],"kind":"struct"},"16:2487:15071":{"crate_id":16,"path":["gimli","common","DebugLineStrOffset"],"kind":"struct"},"2:52578:28234":{"crate_id":2,"path":["core","core_arch","simd","m16x8"],"kind":"struct"},"6:4361:12079":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_abs_setup"],"kind":"struct"},"17:13374:19071":{"crate_id":17,"path":["object","pe","ImageArm64RuntimeFunctionEntry"],"kind":"struct"},"1:3154:19362":{"crate_id":1,"path":["std","io","stdio","StdinRaw"],"kind":"struct"},"1:8863:2303":{"crate_id":1,"path":["std","path","State"],"kind":"enum"},"17:11034:15498":{"crate_id":17,"path":["object","elf","SectionHeader64"],"kind":"struct"},"2:8177:86":{"crate_id":2,"path":["core","sync","atomic","AtomicPtr"],"kind":"struct"},"9:977:13859":{"crate_id":9,"path":["miniz_oxide","StreamResult"],"kind":"struct"},"6:1595:9707":{"crate_id":6,"path":["libc","unix","linux_like","sched_param"],"kind":"struct"},"2:46661:7727":{"crate_id":2,"path":["core","array","TryFromSliceError"],"kind":"struct"},"2:46901:7775":{"crate_id":2,"path":["core","char","decode","DecodeUtf16Error"],"kind":"struct"},"16:6109:14968":{"crate_id":16,"path":["gimli","read","reader","ReaderOffsetId"],"kind":"struct"},"1:8736:2271":{"crate_id":1,"path":["std","os","linux","process","PidFd"],"kind":"struct"},"16:2793:15084":{"crate_id":16,"path":["gimli","common","DebugTypesOffset"],"kind":"struct"},"5:6295:7711":{"crate_id":5,"path":["alloc","vec","set_len_on_drop","SetLenOnDrop"],"kind":"struct"},"2:11798:7795":{"crate_id":2,"path":["core","future","poll_fn","PollFn"],"kind":"struct"},"12:1044:13973":{"crate_id":12,"path":["hashbrown","map","EntryRef"],"kind":"enum"},"1:1637:1995":{"crate_id":1,"path":["std","collections","hash","set","Union"],"kind":"struct"},"16:6829:19889":{"crate_id":16,"path":["gimli","read","lookup","LookupEntryIter"],"kind":"struct"},"6:586:8819":{"crate_id":6,"path":["libc","unix","itimerval"],"kind":"struct"},"1:12301:1025":{"crate_id":1,"path":["std","pointer"],"kind":"primitive"},"2:46457:196":{"crate_id":2,"path":["core","ops","range","RangeFrom"],"kind":"struct"},"1:11785:2189":{"crate_id":1,"path":["std","sys_common","net","TcpStream"],"kind":"struct"},"6:487:8806":{"crate_id":6,"path":["libc","unix","group"],"kind":"struct"},"2:8617:7569":{"crate_id":2,"path":["core","fmt","Octal"],"kind":"trait"},"12:669:1978":{"crate_id":12,"path":["hashbrown","map","IntoKeys"],"kind":"struct"},"1:2248:128":{"crate_id":1,"path":["std","fs","File"],"kind":"struct"},"5:6314:7712":{"crate_id":5,"path":["alloc","vec","in_place_drop","InPlaceDrop"],"kind":"struct"},"1:8644:2186":{"crate_id":1,"path":["std","net","tcp","IntoIncoming"],"kind":"struct"},"2:21691:175":{"crate_id":2,"path":["core","num","nonzero","NonZeroU8"],"kind":"struct"},"2:21303:19434":{"crate_id":2,"path":["core","num","dec2flt","FloatErrorKind"],"kind":"enum"},"6:5876:12781":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","semid_ds"],"kind":"struct"},"2:51064:158":{"crate_id":2,"path":["core","alloc","layout","Layout"],"kind":"struct"},"16:2300:15064":{"crate_id":16,"path":["gimli","common","LineEncoding"],"kind":"struct"},"12:751:1975":{"crate_id":12,"path":["hashbrown","map","Drain"],"kind":"struct"},"17:10921:15382":{"crate_id":17,"path":["object","archive","Header"],"kind":"struct"},"16:0:1736":{"crate_id":16,"path":["gimli"],"kind":"module"},"2:49210:8105":{"crate_id":2,"path":["core","fmt","FlagV1"],"kind":"enum"},"2:53136:2450":{"crate_id":2,"path":["core","core_arch","simd","f32x8"],"kind":"struct"},"12:1085:13974":{"crate_id":12,"path":["hashbrown","map","OccupiedEntryRef"],"kind":"struct"},"2:9546:7628":{"crate_id":2,"path":["core","slice","iter","SplitInclusive"],"kind":"struct"},"1:10755:2323":{"crate_id":1,"path":["std","sys","unix","process","process_common","CommandArgs"],"kind":"struct"},"1:5646:2318":{"crate_id":1,"path":["std","process","Child"],"kind":"struct"},"1:4585:2239":{"crate_id":1,"path":["std","os","unix","net","listener","UnixListener"],"kind":"struct"},"2:57010:243":{"crate_id":2,"path":["core","core_simd","fmt","fmt","Wrapper"],"kind":"struct"},"2:51857:2470":{"crate_id":2,"path":["core","core_arch","simd","i8x4"],"kind":"struct"},"17:13184:19021":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation64"],"kind":"struct"},"17:9885:15274":{"crate_id":17,"path":["object","read","macho","file","MachOComdat"],"kind":"struct"},"1:12305:1438":{"crate_id":1,"path":["std","tuple"],"kind":"primitive"},"2:2491:132":{"crate_id":2,"path":["core","convert","From"],"kind":"trait"},"1:1864:2053":{"crate_id":1,"path":["std","env","SplitPaths"],"kind":"struct"},"16:2705:15080":{"crate_id":16,"path":["gimli","common","DebugRngListsIndex"],"kind":"struct"},"2:20757:2445":{"crate_id":2,"path":["core","core_simd","ord","SimdOrd"],"kind":"trait"},"2:11091:2313":{"crate_id":2,"path":["core","str","traits","FromStr"],"kind":"trait"},"2:2852:8012":{"crate_id":2,"path":["core","ops","bit","ShlAssign"],"kind":"trait"},"18:515:19183":{"crate_id":18,"path":["memchr","memmem","prefilter","PrefilterFn"],"kind":"struct"},"2:20261:2426":{"crate_id":2,"path":["core","core_simd","elements","int","SimdInt"],"kind":"trait"},"5:4903:30532":{"crate_id":5,"path":["alloc","slice","hack","to_vec","DropGuard"],"kind":"struct"},"2:21343:28214":{"crate_id":2,"path":["core","num","flt2dec","decoder","FullDecoded"],"kind":"enum"},"16:6816:19888":{"crate_id":16,"path":["gimli","read","lookup","DebugLookup"],"kind":"struct"},"2:2930:1871":{"crate_id":2,"path":["core","ops","function","FnMut"],"kind":"trait"},"1:7938:1961":{"crate_id":1,"path":["std","backtrace","RawFrame"],"kind":"enum"},"2:54086:7526":{"crate_id":2,"path":["core","core_arch","x86","__m128i"],"kind":"struct"},"1:5695:2321":{"crate_id":1,"path":["std","process","ChildStderr"],"kind":"struct"},"6:6538:13168":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","seccomp_notif_sizes"],"kind":"struct"},"2:50104:7622":{"crate_id":2,"path":["core","str","iter","RSplit"],"kind":"struct"},"2:2840:8009":{"crate_id":2,"path":["core","ops","bit","BitAndAssign"],"kind":"trait"},"5:1426:1979":{"crate_id":5,"path":["alloc","collections","btree","map","IntoValues"],"kind":"struct"},"5:2955:1993":{"crate_id":5,"path":["alloc","collections","btree","set","Difference"],"kind":"struct"},"1:5013:2222":{"crate_id":1,"path":["std","os","fd","raw","IntoRawFd"],"kind":"trait"},"12:762:1976":{"crate_id":12,"path":["hashbrown","map","DrainFilter"],"kind":"struct"},"1:6217:2337":{"crate_id":1,"path":["std","sync","mpmc","counter","Sender"],"kind":"struct"},"2:50136:7679":{"crate_id":2,"path":["core","str","iter","SplitTerminator"],"kind":"struct"},"5:2994:19564":{"crate_id":5,"path":["alloc","collections","btree","set","IntersectionInner"],"kind":"enum"},"17:12695:18447":{"crate_id":17,"path":["object","pe","ImageOptionalHeader64"],"kind":"struct"},"16:6790:15038":{"crate_id":16,"path":["gimli","read","loclists","LocationListEntry"],"kind":"struct"},"1:8649:2176":{"crate_id":1,"path":["std","net","Shutdown"],"kind":"enum"},"17:10182:15237":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbol"],"kind":"struct"},"16:7483:14954":{"crate_id":16,"path":["gimli","read","str","DebugStrOffsets"],"kind":"struct"},"17:8212:15351":{"crate_id":17,"path":["object","common","ComdatKind"],"kind":"enum"},"6:6998:13541":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","align","sem_t"],"kind":"struct"},"17:13007:18977":{"crate_id":17,"path":["object","pe","ImageExportDirectory"],"kind":"struct"},"1:1123:1988":{"crate_id":1,"path":["std","collections","hash","map","OccupiedError"],"kind":"struct"},"1:7785:24260":{"crate_id":1,"path":["std","backtrace_rs","print","BacktraceFrameFmt"],"kind":"struct"},"17:11515:17976":{"crate_id":17,"path":["object","macho","DyldSubCacheInfo"],"kind":"struct"},"17:9671:15185":{"crate_id":17,"path":["object","read","elf","note","NoteIterator"],"kind":"struct"},"2:1751:28842":{"crate_id":2,"path":["core","ptr","metadata","PtrComponents"],"kind":"struct"},"6:4778:12121":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_ifr_ifru"],"kind":"union"},"2:52388:2464":{"crate_id":2,"path":["core","core_arch","simd","i32x4"],"kind":"struct"},"6:6277:9637":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statfs"],"kind":"struct"},"16:4519:14563":{"crate_id":16,"path":["gimli","constants","DwLang"],"kind":"struct"},"1:1889:2061":{"crate_id":1,"path":["std","env","ArgsOs"],"kind":"struct"},"16:5878:15017":{"crate_id":16,"path":["gimli","read","cfi","CallFrameInstruction"],"kind":"enum"},"17:13382:19072":{"crate_id":17,"path":["object","pe","ImageAlpha64RuntimeFunctionEntry"],"kind":"struct"},"2:52480:2453":{"crate_id":2,"path":["core","core_arch","simd","f64x4"],"kind":"struct"},"18:590:28269":{"crate_id":18,"path":["memchr","memmem","twoway","TwoWay"],"kind":"struct"},"1:3232:2160":{"crate_id":1,"path":["std","io","stdio","StdoutLock"],"kind":"struct"},"2:52064:2463":{"crate_id":2,"path":["core","core_arch","simd","i32x2"],"kind":"struct"},"17:12781:18498":{"crate_id":17,"path":["object","pe","AnonObjectHeaderV2"],"kind":"struct"},"17:8631:15112":{"crate_id":17,"path":["object","endian","I16Bytes"],"kind":"struct"},"2:50694:7680":{"crate_id":2,"path":["core","str","lossy","Utf8Chunk"],"kind":"struct"},"1:2401:2099":{"crate_id":1,"path":["std","fs","canonicalize"],"kind":"function"},"9:111:13808":{"crate_id":9,"path":["miniz_oxide","deflate","core","CompressorOxide"],"kind":"struct"},"18:644:33612":{"crate_id":18,"path":["memchr","memmem","x86","avx","nostd","Forward"],"kind":"struct"},"17:967:15149":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbolIterator"],"kind":"struct"},"6:1532:9701":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_in"],"kind":"struct"},"2:20390:2421":{"crate_id":2,"path":["core","core_simd","masks","mask_impl","Mask"],"kind":"struct"},"17:13478:19087":{"crate_id":17,"path":["object","pe","ImageDebugDirectory"],"kind":"struct"},"17:8055:15349":{"crate_id":17,"path":["object","common","Architecture"],"kind":"enum"},"2:21757:173":{"crate_id":2,"path":["core","num","nonzero","NonZeroU32"],"kind":"struct"},"12:861:1984":{"crate_id":12,"path":["hashbrown","map","RawEntryBuilder"],"kind":"struct"},"17:9700:15191":{"crate_id":17,"path":["object","read","elf","hash","GnuHashTable"],"kind":"struct"},"1:12298:409":{"crate_id":1,"path":["std","char"],"kind":"primitive"},"1:1632:1994":{"crate_id":1,"path":["std","collections","hash","set","SymmetricDifference"],"kind":"struct"},"14:40:15385":{"crate_id":14,"path":["rustc_demangle","v0","Ident"],"kind":"struct"},"1:9224:2325":{"crate_id":1,"path":["std","process","ExitStatus"],"kind":"struct"},"1:484:22633":{"crate_id":1,"path":["std","thread","local","fast","Key"],"kind":"struct"},"17:13557:19115":{"crate_id":17,"path":["object","pe","NonPagedDebugInfo"],"kind":"struct"},"16:4545:14617":{"crate_id":16,"path":["gimli","constants","DwAddr"],"kind":"struct"},"16:7567:14973":{"crate_id":16,"path":["gimli","read","unit","UnitType"],"kind":"enum"},"17:3125:15238":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbolIterator"],"kind":"struct"},"2:46840:7738":{"crate_id":2,"path":["core","async_iter","from_iter","FromIter"],"kind":"struct"},"12:300:19679":{"crate_id":12,"path":["hashbrown","raw","RawIter"],"kind":"struct"},"2:47391:7970":{"crate_id":2,"path":["core","iter","adapters","zip","Zip"],"kind":"struct"},"2:47308:7966":{"crate_id":2,"path":["core","iter","adapters","scan","Scan"],"kind":"struct"},"19:0:1007":{"crate_id":19,"path":["panic_unwind"],"kind":"module"},"17:10528:15367":{"crate_id":17,"path":["object","read","traits","NoDynamicRelocationIterator"],"kind":"struct"},"6:5841:11965":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","sysinfo"],"kind":"struct"},"2:46521:200":{"crate_id":2,"path":["core","ops","range","RangeToInclusive"],"kind":"struct"},"17:9401:15148":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbol"],"kind":"struct"},"2:52434:2449":{"crate_id":2,"path":["core","core_arch","simd","f32x4"],"kind":"struct"},"2:7008:7947":{"crate_id":2,"path":["core","iter","traits","accum","Sum"],"kind":"trait"},"5:6456:30562":{"crate_id":5,"path":["alloc","vec","retain_mut","BackshiftOnDrop"],"kind":"struct"},"2:49915:7603":{"crate_id":2,"path":["core","slice","iter","ArrayWindows"],"kind":"struct"},"6:5733:12749":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_seccomp"],"kind":"struct"},"17:9778:15194":{"crate_id":17,"path":["object","read","elf","version","VerneedIterator"],"kind":"struct"},"2:53822:2466":{"crate_id":2,"path":["core","core_arch","simd","i32x16"],"kind":"struct"},"5:6876:2036":{"crate_id":5,"path":["alloc","collections","TryReserveErrorKind"],"kind":"enum"},"1:8470:2178":{"crate_id":1,"path":["std","net","ip_addr","Ipv4Addr"],"kind":"struct"},"1:11288:22630":{"crate_id":1,"path":["std","sys","unix","process","process_common","ProgramKind"],"kind":"enum"},"6:4286:12070":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_envelope"],"kind":"struct"},"2:7049:149":{"crate_id":2,"path":["core","iter","traits","collect","IntoIterator"],"kind":"trait"},"1:5317:22586":{"crate_id":1,"path":["std","path","fmt","DebugHelper"],"kind":"struct"},"14:221:13993":{"crate_id":14,"path":["rustc_demangle","SizeLimitExhausted"],"kind":"struct"},"6:6981:13540":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","align","clone_args"],"kind":"struct"},"16:7267:15045":{"crate_id":16,"path":["gimli","read","pubnames","PubNamesEntry"],"kind":"struct"},"6:6975:13539":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","align","max_align_t"],"kind":"struct"},"1:7056:2412":{"crate_id":1,"path":["std","std_float","StdFloat"],"kind":"trait"},"2:8336:19483":{"crate_id":2,"path":["core","fmt","builders","PadAdapter"],"kind":"struct"},"17:13039:18980":{"crate_id":17,"path":["object","pe","ImageThunkData32"],"kind":"struct"},"16:2320:14929":{"crate_id":16,"path":["gimli","common","Register"],"kind":"struct"},"17:10520:15331":{"crate_id":17,"path":["object","read","pe","rich","RichHeaderEntry"],"kind":"struct"},"2:4347:1939":{"crate_id":2,"path":["core","cell","UnsafeCell"],"kind":"struct"},"6:1580:9706":{"crate_id":6,"path":["libc","unix","linux_like","tm"],"kind":"struct"},"5:6939:2077":{"crate_id":5,"path":["alloc","ffi","c_str","FromVecWithNulError"],"kind":"struct"},"2:8570:131":{"crate_id":2,"path":["core","fmt","Formatter"],"kind":"struct"},"2:7748:2291":{"crate_id":2,"path":["core","panic","unwind_safe","RefUnwindSafe"],"kind":"trait"},"16:6059:19873":{"crate_id":16,"path":["gimli","read","dwarf","RangeIterInner"],"kind":"enum"},"2:9127:27490":{"crate_id":2,"path":["core","slice","sort","merge_sort","RunVec"],"kind":"struct"},"17:8871:15373":{"crate_id":17,"path":["object","read","any","SegmentIterator"],"kind":"struct"},"2:51963:2483":{"crate_id":2,"path":["core","core_arch","simd","u32x2"],"kind":"struct"},"1:11093:23622":{"crate_id":1,"path":["std","sys","unix","fs","StatxExtraFields"],"kind":"struct"},"2:52712:2492":{"crate_id":2,"path":["core","core_arch","simd","u8x32"],"kind":"struct"},"2:7433:2002":{"crate_id":2,"path":["core","iter","traits","marker","FusedIterator"],"kind":"trait"},"2:9302:2218":{"crate_id":2,"path":["core","slice","index","private_slice_index","Sealed"],"kind":"trait"},"2:47325:7967":{"crate_id":2,"path":["core","iter","adapters","skip","Skip"],"kind":"struct"},"2:20312:2416":{"crate_id":2,"path":["core","core_simd","eq","SimdPartialEq"],"kind":"trait"},"17:9071:33248":{"crate_id":17,"path":["object","read","any","SymbolTableInternal"],"kind":"enum"},"1:11600:22583":{"crate_id":1,"path":["std","sys_common","process","CommandEnv"],"kind":"struct"},"1:8762:2220":{"crate_id":1,"path":["std","os","fd","owned","BorrowedFd"],"kind":"struct"},"17:10506:15293":{"crate_id":17,"path":["object","read","pe","rich","RichHeaderInfo"],"kind":"struct"},"2:51051:2496":{"crate_id":2,"path":["core","task","wake","RawWakerVTable"],"kind":"struct"},"2:50681:7654":{"crate_id":2,"path":["core","str","pattern","TwoWaySearcher"],"kind":"struct"},"2:47246:7962":{"crate_id":2,"path":["core","iter","adapters","inspect","Inspect"],"kind":"struct"},"6:539:8812":{"crate_id":6,"path":["libc","unix","ipv6_mreq"],"kind":"struct"},"17:11315:15784":{"crate_id":17,"path":["object","elf","Vernaux"],"kind":"struct"},"17:11174:15606":{"crate_id":17,"path":["object","elf","Rel64"],"kind":"struct"},"2:21161:28217":{"crate_id":2,"path":["core","num","bignum","tests","Big8x3"],"kind":"struct"},"2:20027:7779":{"crate_id":2,"path":["core","core_simd","swizzle","reverse","Reverse"],"kind":"struct"},"17:9857:15252":{"crate_id":17,"path":["object","read","macho","file","MachOFile"],"kind":"struct"},"2:9623:7629":{"crate_id":2,"path":["core","slice","iter","SplitInclusiveMut"],"kind":"struct"},"2:50817:8161":{"crate_id":2,"path":["core","str","IsWhitespace"],"kind":"struct"},"12:353:19677":{"crate_id":12,"path":["hashbrown","raw","RawDrain"],"kind":"struct"},"6:4427:12084":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Sym"],"kind":"struct"},"1:12140:24263":{"crate_id":1,"path":["std","backtrace_rs","symbolize","gimli","mmap","Mmap"],"kind":"struct"},"2:5631:30277":{"crate_id":2,"path":["core","iter","adapters","flatten","TrustedConstSize"],"kind":"trait"},"17:11149:15604":{"crate_id":17,"path":["object","elf","Rel32"],"kind":"struct"},"16:6865:19891":{"crate_id":16,"path":["gimli","read","lookup","PubStuffParser"],"kind":"struct"},"1:3422:2109":{"crate_id":1,"path":["std","io","IoSliceMut"],"kind":"struct"},"17:12756:18495":{"crate_id":17,"path":["object","pe","Guid"],"kind":"struct"},"2:54220:7536":{"crate_id":2,"path":["core","core_arch","x86","__m256bh"],"kind":"struct"},"2:4273:7747":{"crate_id":2,"path":["core","cell","Ref"],"kind":"struct"},"5:5625:2125":{"crate_id":5,"path":["alloc","sync","from_iter_exact","Guard"],"kind":"struct"},"2:21015:2218":{"crate_id":2,"path":["core","core_simd","vector","sealed","Sealed"],"kind":"trait"},"17:8752:2136":{"crate_id":17,"path":["object","read","util","Bytes"],"kind":"struct"},"1:6603:163":{"crate_id":1,"path":["std","sync","mutex","Mutex"],"kind":"struct"},"16:2465:15070":{"crate_id":16,"path":["gimli","common","DebugLineOffset"],"kind":"struct"},"5:1982:19591":{"crate_id":5,"path":["alloc","collections","btree","navigate","LeafRange"],"kind":"struct"},"9:709:2303":{"crate_id":9,"path":["miniz_oxide","inflate","core","State"],"kind":"enum"},"1:11476:8177":{"crate_id":1,"path":["std","sys","unix","time","Nanoseconds"],"kind":"struct"},"2:20287:2427":{"crate_id":2,"path":["core","core_simd","elements","uint","SimdUint"],"kind":"trait"},"2:20500:2423":{"crate_id":2,"path":["core","core_simd","masks","MaskElement"],"kind":"trait"},"1:1611:1975":{"crate_id":1,"path":["std","collections","hash","set","Drain"],"kind":"struct"},"17:242:33482":{"crate_id":17,"path":["object","read","util","DebugByte"],"kind":"struct"},"17:13100:18988":{"crate_id":17,"path":["object","pe","ImageDelayloadDescriptor"],"kind":"struct"},"14:31:13984":{"crate_id":14,"path":["rustc_demangle","v0","Demangle"],"kind":"struct"},"2:25263:2192":{"crate_id":2,"path":["core","num","wrapping","Wrapping"],"kind":"struct"},"1:8961:2308":{"crate_id":1,"path":["std","path","Ancestors"],"kind":"struct"},"6:1887:9856":{"crate_id":6,"path":["libc","unix","linux_like","linux","fpos64_t"],"kind":"enum"},"2:47340:7968":{"crate_id":2,"path":["core","iter","adapters","skip_while","SkipWhile"],"kind":"struct"},"1:9330:2342":{"crate_id":1,"path":["std","sync","mpsc","RecvTimeoutError"],"kind":"enum"},"16:5703:15010":{"crate_id":16,"path":["gimli","read","cfi","FrameDescriptionEntry"],"kind":"struct"},"17:10207:15305":{"crate_id":17,"path":["object","read","pe","file","PeFile"],"kind":"struct"},"17:12630:18443":{"crate_id":17,"path":["object","pe","ImageDataDirectory"],"kind":"struct"},"11:44:13961":{"crate_id":11,"path":["adler","Adler32"],"kind":"struct"},"16:6517:13998":{"crate_id":16,"path":["gimli","read","line","LineSequence"],"kind":"struct"},"2:2828:8007":{"crate_id":2,"path":["core","ops","bit","Shl"],"kind":"trait"},"6:5534:12734":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","cmsghdr"],"kind":"struct"},"6:600:8821":{"crate_id":6,"path":["libc","unix","servent"],"kind":"struct"},"16:4849:14675":{"crate_id":16,"path":["gimli","constants","DwLnct"],"kind":"struct"},"17:12225:18249":{"crate_id":17,"path":["object","macho","IdentCommand"],"kind":"struct"},"5:6729:1972":{"crate_id":5,"path":["alloc","collections","binary_heap","IntoIter"],"kind":"struct"},"2:2912:2008":{"crate_id":2,"path":["core","ops","deref","DerefMut"],"kind":"trait"},"2:50825:8163":{"crate_id":2,"path":["core","str","IsNotEmpty"],"kind":"struct"},"1:12319:1452":{"crate_id":1,"path":["std","u128"],"kind":"primitive"},"2:50308:7677":{"crate_id":2,"path":["core","str","iter","RMatches"],"kind":"struct"},"2:48849:7568":{"crate_id":2,"path":["core","fmt","num","Binary"],"kind":"struct"},"2:47195:7957":{"crate_id":2,"path":["core","iter","adapters","enumerate","Enumerate"],"kind":"struct"},"17:11853:18163":{"crate_id":17,"path":["object","macho","RoutinesCommand32"],"kind":"struct"},"17:12148:18183":{"crate_id":17,"path":["object","macho","BuildVersionCommand"],"kind":"struct"},"2:9737:7626":{"crate_id":2,"path":["core","slice","iter","SplitN"],"kind":"struct"},"16:2389:15067":{"crate_id":16,"path":["gimli","common","DebugAddrIndex"],"kind":"struct"},"5:6952:2078":{"crate_id":5,"path":["alloc","ffi","c_str","IntoStringError"],"kind":"struct"},"2:48575:83":{"crate_id":2,"path":["core","sync","atomic","AtomicI64"],"kind":"struct"},"17:13413:19077":{"crate_id":17,"path":["object","pe","ImageEnclaveConfig32"],"kind":"struct"},"2:10954:7628":{"crate_id":2,"path":["core","str","iter","SplitInclusive"],"kind":"struct"},"16:5163:14884":{"crate_id":16,"path":["gimli","constants","DwEhPe"],"kind":"struct"},"3:223:207":{"crate_id":3,"path":["compiler_builtins","float","cmp","Result"],"kind":"enum"},"2:47185:7956":{"crate_id":2,"path":["core","iter","adapters","cycle","Cycle"],"kind":"struct"},"17:9250:15129":{"crate_id":17,"path":["object","read","archive","ArchiveFile"],"kind":"struct"},"2:50517:7647":{"crate_id":2,"path":["core","str","pattern","CharArraySearcher"],"kind":"struct"},"1:1604:1970":{"crate_id":1,"path":["std","collections","hash","set","Iter"],"kind":"struct"},"5:2255:19594":{"crate_id":5,"path":["alloc","collections","btree","node","NodeRef"],"kind":"struct"},"17:8475:15101":{"crate_id":17,"path":["object","endian","Endianness"],"kind":"enum"},"6:4592:12100":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_tp"],"kind":"struct"},"2:12045:2034":{"crate_id":2,"path":["core","alloc","Allocator"],"kind":"trait"},"2:11201:7643":{"crate_id":2,"path":["core","str","pattern","MultiCharEqPattern"],"kind":"struct"},"2:2775:7999":{"crate_id":2,"path":["core","ops","arith","Rem"],"kind":"trait"},"1:10862:2155":{"crate_id":1,"path":["std","sys","unix","stdio","Stderr"],"kind":"struct"},"2:21442:2198":{"crate_id":2,"path":["core","num","error","IntErrorKind"],"kind":"enum"},"1:1091:1985":{"crate_id":1,"path":["std","collections","hash","map","Entry"],"kind":"enum"},"2:9004:8123":{"crate_id":2,"path":["core","slice","sort","CopyOnDrop"],"kind":"struct"},"6:646:8851":{"crate_id":6,"path":["libc","unix","linux_like","timezone"],"kind":"enum"},"2:49423:2303":{"crate_id":2,"path":["core","hash","sip","State"],"kind":"struct"},"1:9835:23751":{"crate_id":1,"path":["std","sys","unix","fs","Dir"],"kind":"struct"},"1:7736:15366":{"crate_id":1,"path":["std","backtrace_rs","symbolize","Symbol"],"kind":"struct"},"5:5427:1975":{"crate_id":5,"path":["alloc","string","Drain"],"kind":"struct"},"1:2905:127":{"crate_id":1,"path":["std","io","error","Error"],"kind":"struct"},"2:4124:7590":{"crate_id":2,"path":["core","cell","Cell"],"kind":"struct"},"2:0:486":{"crate_id":2,"path":["core"],"kind":"module"},"2:49386:7800":{"crate_id":2,"path":["core","hash","sip","SipHasher13"],"kind":"struct"},"2:22453:2191":{"crate_id":2,"path":["core","num","saturating","Saturating"],"kind":"struct"},"2:8833:140":{"crate_id":2,"path":["core","hash","Hash"],"kind":"trait"},"2:7058:1874":{"crate_id":2,"path":["core","iter","traits","collect","Extend"],"kind":"trait"},"6:4527:12092":{"crate_id":6,"path":["libc","unix","linux_like","linux","genlmsghdr"],"kind":"struct"},"18:681:19172":{"crate_id":18,"path":["memchr","memmem","Finder"],"kind":"struct"},"1:1887:2060":{"crate_id":1,"path":["std","env","Args"],"kind":"struct"},"6:4224:12062":{"crate_id":6,"path":["libc","unix","linux_like","linux","sembuf"],"kind":"struct"},"2:54243:7537":{"crate_id":2,"path":["core","core_arch","x86","__m512bh"],"kind":"struct"},"1:9314:2341":{"crate_id":1,"path":["std","sync","mpsc","TryRecvError"],"kind":"enum"},"2:49402:7799":{"crate_id":2,"path":["core","hash","sip","SipHasher"],"kind":"struct"},"17:8561:15110":{"crate_id":17,"path":["object","endian","U32Bytes"],"kind":"struct"},"1:9554:2116":{"crate_id":1,"path":["std","time","SystemTime"],"kind":"struct"},"1:2411:2104":{"crate_id":1,"path":["std","fs","read_dir"],"kind":"function"},"2:3963:28237":{"crate_id":2,"path":["core","asserting","TryCaptureWithDebug"],"kind":"struct"},"5:2948:1970":{"crate_id":5,"path":["alloc","collections","btree","set","Iter"],"kind":"struct"},"6:592:8820":{"crate_id":6,"path":["libc","unix","tms"],"kind":"struct"},"1:0:1352":{"crate_id":1,"path":["std"],"kind":"module"},"5:2739:30412":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Immut"],"kind":"struct"},"2:48863:7577":{"crate_id":2,"path":["core","fmt","num","LowerHex"],"kind":"struct"},"2:9585:7615":{"crate_id":2,"path":["core","slice","iter","SplitMut"],"kind":"struct"},"2:10297:7617":{"crate_id":2,"path":["core","slice","iter","GroupByMut"],"kind":"struct"},"17:10973:15384":{"crate_id":17,"path":["object","elf","FileHeader64"],"kind":"struct"},"6:4179:12057":{"crate_id":6,"path":["libc","unix","linux_like","linux","itimerspec"],"kind":"struct"},"2:48727:2390":{"crate_id":2,"path":["core","sync","exclusive","Exclusive"],"kind":"struct"},"16:2771:15083":{"crate_id":16,"path":["gimli","common","DebugStrOffsetsIndex"],"kind":"struct"},"6:4716:12115":{"crate_id":6,"path":["libc","unix","linux_like","linux","dirent64"],"kind":"struct"},"16:7890:14959":{"crate_id":16,"path":["gimli","read","unit","EntriesCursor"],"kind":"struct"},"17:9627:15178":{"crate_id":17,"path":["object","read","elf","relocation","RelocationSections"],"kind":"struct"},"17:8162:15360":{"crate_id":17,"path":["object","common","SectionKind"],"kind":"enum"},"9:622:13793":{"crate_id":9,"path":["miniz_oxide","deflate","core","TDEFLFlush"],"kind":"enum"},"2:2754:2407":{"crate_id":2,"path":["core","ops","arith","Add"],"kind":"trait"},"17:487:15365":{"crate_id":17,"path":["object","read","any","Comdat"],"kind":"struct"},"17:11617:18085":{"crate_id":17,"path":["object","macho","SegmentCommand32"],"kind":"struct"},"17:13071:18985":{"crate_id":17,"path":["object","pe","ImageImportDescriptor"],"kind":"struct"},"2:46616:7747":{"crate_id":2,"path":["core","any","tags","Ref"],"kind":"struct"},"6:62:8421":{"crate_id":6,"path":["libc","unix","DIR"],"kind":"enum"},"1:11389:24259":{"crate_id":1,"path":["std","sys","unix","process","process_inner","posix_spawn","PosixSpawnattr"],"kind":"struct"},"1:686:1963":{"crate_id":1,"path":["std","backtrace","BytesOrWide"],"kind":"enum"},"16:7388:14967":{"crate_id":16,"path":["gimli","read","rnglists","RawRngListIter"],"kind":"struct"},"16:7372:19895":{"crate_id":16,"path":["gimli","read","rnglists","RangeListsFormat"],"kind":"enum"},"2:4726:780":{"crate_id":2,"path":["core","iter"],"kind":"module"},"16:7872:14960":{"crate_id":16,"path":["gimli","read","unit","EntriesRaw"],"kind":"struct"},"2:7853:7635":{"crate_id":2,"path":["core","panicking","assert_matches_failed","Pattern"],"kind":"struct"},"16:5122:14707":{"crate_id":16,"path":["gimli","constants","DwOp"],"kind":"struct"},"17:8272:15364":{"crate_id":17,"path":["object","common","SymbolScope"],"kind":"enum"},"2:2793:8001":{"crate_id":2,"path":["core","ops","arith","MulAssign"],"kind":"trait"},"17:8510:15057":{"crate_id":17,"path":["object","endian","BigEndian"],"kind":"struct"},"12:2178:32666":{"crate_id":12,"path":["hashbrown","raw","sse2","Group"],"kind":"struct"},"17:12022:18174":{"crate_id":17,"path":["object","macho","TwolevelHint"],"kind":"struct"},"16:4574:14619":{"crate_id":16,"path":["gimli","constants","DwId"],"kind":"struct"},"17:9446:15157":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdatSectionIterator"],"kind":"struct"},"2:9779:7625":{"crate_id":2,"path":["core","slice","iter","RSplitNMut"],"kind":"struct"},"1:4246:2203":{"crate_id":1,"path":["std","os","unix","fs","FileExt"],"kind":"trait"},"17:11813:18160":{"crate_id":17,"path":["object","macho","PreboundDylibCommand"],"kind":"struct"},"16:4662:14637":{"crate_id":16,"path":["gimli","constants","DwOrd"],"kind":"struct"},"1:9406:20734":{"crate_id":1,"path":["std","sync","mpmc","error","SendTimeoutError"],"kind":"enum"},"17:13091:18987":{"crate_id":17,"path":["object","pe","ImageBoundForwarderRef"],"kind":"struct"},"2:54115:7529":{"crate_id":2,"path":["core","core_arch","x86","__m256i"],"kind":"struct"},"1:5087:2216":{"crate_id":1,"path":["std","os","fd","owned","AsFd"],"kind":"trait"},"6:6430:13162":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_fpstate"],"kind":"struct"},"1:11532:2347":{"crate_id":1,"path":["std","sys","unix","time","inner","Instant"],"kind":"struct"},"2:2232:97":{"crate_id":2,"path":["core","borrow","Borrow"],"kind":"trait"},"6:4726:12116":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_alg"],"kind":"struct"},"17:10455:15315":{"crate_id":17,"path":["object","read","pe","resource","ResourceDirectory"],"kind":"struct"},"12:2053:1985":{"crate_id":12,"path":["hashbrown","set","Entry"],"kind":"enum"},"5:6162:30532":{"crate_id":5,"path":["alloc","vec","into_iter","drop","DropGuard"],"kind":"struct"},"1:6017:2392":{"crate_id":1,"path":["std","sync","barrier","BarrierWaitResult"],"kind":"struct"},"16:2683:15079":{"crate_id":16,"path":["gimli","common","DebugRngListsBase"],"kind":"struct"},"6:6448:13163":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user_regs_struct"],"kind":"struct"},"9:920:13858":{"crate_id":9,"path":["miniz_oxide","MZError"],"kind":"enum"},"2:20493:2218":{"crate_id":2,"path":["core","core_simd","masks","sealed","Sealed"],"kind":"trait"},"1:6781:2398":{"crate_id":1,"path":["std","sync","poison","PoisonError"],"kind":"struct"},"5:6752:2001":{"crate_id":5,"path":["alloc","collections","binary_heap","DrainSorted"],"kind":"struct"},"1:10859:2159":{"crate_id":1,"path":["std","sys","unix","stdio","Stdout"],"kind":"struct"},"12:777:13971":{"crate_id":12,"path":["hashbrown","map","ConsumeAllOnDrop"],"kind":"struct"},"2:10264:7616":{"crate_id":2,"path":["core","slice","iter","GroupBy"],"kind":"struct"},"2:8627:7575":{"crate_id":2,"path":["core","fmt","LowerExp"],"kind":"trait"},"17:10420:15314":{"crate_id":17,"path":["object","read","pe","relocation","RelocationBlockIterator"],"kind":"struct"},"5:4072:2125":{"crate_id":5,"path":["alloc","collections","vec_deque","write_iter_wrapping","Guard"],"kind":"struct"},"17:9263:15130":{"crate_id":17,"path":["object","read","archive","ArchiveMemberIterator"],"kind":"struct"},"2:52042:2459":{"crate_id":2,"path":["core","core_arch","simd","i16x4"],"kind":"struct"},"1:8795:2281":{"crate_id":1,"path":["std","panic","BacktraceStyle"],"kind":"enum"},"12:632:1970":{"crate_id":12,"path":["hashbrown","map","Iter"],"kind":"struct"},"16:6704:14964":{"crate_id":16,"path":["gimli","read","loclists","LocationLists"],"kind":"struct"},"5:3485:2018":{"crate_id":5,"path":["alloc","collections","linked_list","CursorMut"],"kind":"struct"},"2:47205:7958":{"crate_id":2,"path":["core","iter","adapters","filter","Filter"],"kind":"struct"},"17:9108:15156":{"crate_id":17,"path":["object","read","any","SymbolIterator"],"kind":"struct"},"1:12315:1456":{"crate_id":1,"path":["std","u8"],"kind":"primitive"},"16:6252:15027":{"crate_id":16,"path":["gimli","read","aranges","ArangeEntry"],"kind":"struct"},"2:29640:19530":{"crate_id":2,"path":["core","ptr","alignment","AlignmentEnum16"],"kind":"enum"},"17:12884:18609":{"crate_id":17,"path":["object","pe","ImageAuxSymbolTokenDef"],"kind":"struct"},"17:10075:15234":{"crate_id":17,"path":["object","read","macho","segment","MachOSegment"],"kind":"struct"},"17:8339:15368":{"crate_id":17,"path":["object","common","RelocationEncoding"],"kind":"enum"},"2:3903:2125":{"crate_id":2,"path":["core","array","Guard"],"kind":"struct"},"1:10444:22477":{"crate_id":1,"path":["std","sys","unix","os","Env"],"kind":"struct"},"2:47104:2081":{"crate_id":2,"path":["core","ffi","VaList"],"kind":"struct"},"16:7278:15046":{"crate_id":16,"path":["gimli","read","pubnames","DebugPubNames"],"kind":"struct"},"6:4280:12069":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_trigger"],"kind":"struct"},"17:9947:15276":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandVariant"],"kind":"enum"},"5:6892:102":{"crate_id":5,"path":["alloc","ffi","c_str","CString"],"kind":"struct"},"7:79:13752":{"crate_id":7,"path":["unwind","libunwind","_Unwind_Action"],"kind":"enum"},"5:286:1875":{"crate_id":5,"path":["alloc","boxed","Box"],"kind":"struct"},"2:50833:8165":{"crate_id":2,"path":["core","str","UnsafeBytesToStr"],"kind":"struct"},"16:6654:15036":{"crate_id":16,"path":["gimli","read","line","FileEntryFormat"],"kind":"struct"},"1:12313:729":{"crate_id":1,"path":["std","i64"],"kind":"primitive"},"16:7117:19721":{"crate_id":16,"path":["gimli","read","op","EvaluationState"],"kind":"enum"},"17:11330:15785":{"crate_id":17,"path":["object","elf","NoteHeader32"],"kind":"struct"},"17:10608:15335":{"crate_id":17,"path":["object","read","SectionIndex"],"kind":"struct"},"17:13126:18993":{"crate_id":17,"path":["object","pe","ImageResourceDirectoryEntry"],"kind":"struct"},"2:46499:198":{"crate_id":2,"path":["core","ops","range","RangeInclusive"],"kind":"struct"},"5:782:1998":{"crate_id":5,"path":["alloc","collections","binary_heap","PeekMut"],"kind":"struct"},"5:2738:30503":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Dying"],"kind":"enum"},"16:7511:14924":{"crate_id":16,"path":["gimli","read","UnitOffset"],"kind":"struct"},"1:4014:2189":{"crate_id":1,"path":["std","net","tcp","TcpStream"],"kind":"struct"},"17:247:33245":{"crate_id":17,"path":["object","read","util","DebugLen"],"kind":"struct"},"17:12485:18387":{"crate_id":17,"path":["object","pe","ImageDosHeader"],"kind":"struct"},"1:8070:2084":{"crate_id":1,"path":["std","fs","ReadDir"],"kind":"struct"},"2:49152:127":{"crate_id":2,"path":["core","fmt","Error"],"kind":"struct"},"1:4766:2246":{"crate_id":1,"path":["std","os","unix","process","ExitStatusExt"],"kind":"trait"},"2:51833:2478":{"crate_id":2,"path":["core","core_arch","simd","u16x2"],"kind":"struct"},"17:13572:19120":{"crate_id":17,"path":["object","pe","ImageArchitectureEntry"],"kind":"struct"},"1:1938:2073":{"crate_id":1,"path":["std","error","Report"],"kind":"struct"},"2:3079:2033":{"crate_id":2,"path":["core","ops","range","RangeBounds"],"kind":"trait"},"17:9475:15170":{"crate_id":17,"path":["object","read","elf","segment","ElfSegmentIterator"],"kind":"struct"},"2:47350:7953":{"crate_id":2,"path":["core","iter","adapters","step_by","StepBy"],"kind":"struct"},"1:6885:214":{"crate_id":1,"path":["std","sync","rwlock","RwLock"],"kind":"struct"},"2:20474:2417":{"crate_id":2,"path":["core","core_simd","masks","to_bitmask","ToBitMask"],"kind":"trait"},"17:9751:15193":{"crate_id":17,"path":["object","read","elf","version","VerdefIterator"],"kind":"struct"},"1:8487:2179":{"crate_id":1,"path":["std","net","ip_addr","Ipv6Addr"],"kind":"struct"},"1:678:1960":{"crate_id":1,"path":["std","backtrace","BacktraceFrame"],"kind":"struct"},"5:6969:221":{"crate_id":5,"path":["alloc","string","String"],"kind":"struct"},"17:12164:18184":{"crate_id":17,"path":["object","macho","BuildToolVersion"],"kind":"struct"},"2:2848:8011":{"crate_id":2,"path":["core","ops","bit","BitXorAssign"],"kind":"trait"},"16:4327:14539":{"crate_id":16,"path":["gimli","constants","DwDs"],"kind":"struct"},"6:1550:9703":{"crate_id":6,"path":["libc","unix","linux_like","addrinfo"],"kind":"struct"},"6:4274:12068":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_replay"],"kind":"struct"},"1:11703:22633":{"crate_id":1,"path":["std","sys_common","thread_local_key","Key"],"kind":"struct"},"2:47577:7938":{"crate_id":2,"path":["core","iter","sources","from_fn","FromFn"],"kind":"struct"},"2:2813:8003":{"crate_id":2,"path":["core","ops","bit","BitAnd"],"kind":"trait"},"12:1845:1976":{"crate_id":12,"path":["hashbrown","set","DrainFilter"],"kind":"struct"},"1:2399:2098":{"crate_id":1,"path":["std","fs","read_link"],"kind":"function"},"2:50809:8159":{"crate_id":2,"path":["core","str","CharEscapeUnicode"],"kind":"struct"},"2:50190:7626":{"crate_id":2,"path":["core","str","iter","SplitN"],"kind":"struct"},"9:505:13956":{"crate_id":9,"path":["miniz_oxide","inflate","stream","InflateState"],"kind":"struct"},"2:11725:7794":{"crate_id":2,"path":["core","future","into_future","IntoFuture"],"kind":"trait"},"17:1903:15206":{"crate_id":17,"path":["object","read","elf","relocation","ElfRelaIterator"],"kind":"enum"},"1:7954:1990":{"crate_id":1,"path":["std","collections","hash","map","DefaultHasher"],"kind":"struct"},"2:5852:7972":{"crate_id":2,"path":["core","iter","adapters","intersperse","IntersperseWith"],"kind":"struct"},"6:6953:8765":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","not_x32","statvfs"],"kind":"struct"},"17:12980:18975":{"crate_id":17,"path":["object","pe","ImageArchiveMemberHeader"],"kind":"struct"},"17:8295:15369":{"crate_id":17,"path":["object","common","RelocationKind"],"kind":"enum"},"6:4598:12101":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_j1939"],"kind":"struct"},"6:7279:13728":{"crate_id":6,"path":["libc","unix","linux_like","linux","non_exhaustive","open_how"],"kind":"struct"},"1:8813:2293":{"crate_id":1,"path":["std","path","Prefix"],"kind":"enum"},"6:4115:12053":{"crate_id":6,"path":["libc","unix","linux_like","linux","passwd"],"kind":"struct"},"2:9454:1970":{"crate_id":2,"path":["core","slice","iter","Iter"],"kind":"struct"},"5:5900:30562":{"crate_id":5,"path":["alloc","vec","drain_filter","drop","BackshiftOnDrop"],"kind":"struct"},"14:165:13985":{"crate_id":14,"path":["rustc_demangle","DemangleStyle"],"kind":"enum"},"17:10752:15324":{"crate_id":17,"path":["object","read","Import"],"kind":"struct"},"1:5064:2223":{"crate_id":1,"path":["std","os","fd","owned","OwnedFd"],"kind":"struct"},"2:52312:2472":{"crate_id":2,"path":["core","core_arch","simd","i8x16"],"kind":"struct"},"17:13527:19113":{"crate_id":17,"path":["object","pe","ImageFunctionEntry64"],"kind":"struct"},"2:6437:7948":{"crate_id":2,"path":["core","iter","adapters","zip","zip"],"kind":"function"},"2:54106:7528":{"crate_id":2,"path":["core","core_arch","x86","__m128d"],"kind":"struct"},"1:7874:1931":{"crate_id":1,"path":["std","thread","ThreadId"],"kind":"struct"},"2:6570:27766":{"crate_id":2,"path":["core","iter","adapters","GenericShunt"],"kind":"struct"},"9:956:13851":{"crate_id":9,"path":["miniz_oxide","DataFormat"],"kind":"enum"},"1:1620:1992":{"crate_id":1,"path":["std","collections","hash","set","Intersection"],"kind":"struct"},"1:12317:1454":{"crate_id":1,"path":["std","u32"],"kind":"primitive"},"1:7538:24372":{"crate_id":1,"path":["std","panicking","Hook"],"kind":"enum"},"2:21922:167":{"crate_id":2,"path":["core","num","nonzero","NonZeroI16"],"kind":"struct"},"17:13354:19035":{"crate_id":17,"path":["object","pe","ImageHotPatchHashes"],"kind":"struct"},"1:11654:20181":{"crate_id":1,"path":["std","sys_common","wtf8","Wtf8Buf"],"kind":"struct"},"16:2749:15082":{"crate_id":16,"path":["gimli","common","DebugStrOffsetsBase"],"kind":"struct"},"17:12674:18446":{"crate_id":17,"path":["object","pe","ImageRomOptionalHeader"],"kind":"struct"},"2:4373:7750":{"crate_id":2,"path":["core","cell","SyncUnsafeCell"],"kind":"struct"},"6:135:8488":{"crate_id":6,"path":["libc","unix","fpos_t"],"kind":"enum"},"17:10854:15345":{"crate_id":17,"path":["object","read","CompressionFormat"],"kind":"enum"},"1:9369:2394":{"crate_id":1,"path":["std","sync","condvar","WaitTimeoutResult"],"kind":"struct"},"12:98:19676":{"crate_id":12,"path":["hashbrown","raw","Bucket"],"kind":"struct"},"1:3470:24568":{"crate_id":1,"path":["std","io","Write","write_fmt","Adapter"],"kind":"struct"},"1:3461:2075":{"crate_id":1,"path":["std","io","Write"],"kind":"trait"},"2:3169:7736":{"crate_id":2,"path":["core","ops","try_trait","NeverShortCircuit"],"kind":"struct"},"1:11267:19314":{"crate_id":1,"path":["std","sys","unix","os_str","Buf"],"kind":"struct"},"5:6782:195":{"crate_id":5,"path":["alloc","collections","btree","set","Range"],"kind":"struct"},"6:131:8487":{"crate_id":6,"path":["libc","unix","FILE"],"kind":"enum"},"5:4027:242":{"crate_id":5,"path":["alloc","collections","vec_deque","VecDeque"],"kind":"struct"},"2:2290:124":{"crate_id":2,"path":["core","cmp","Eq"],"kind":"trait"},"1:5763:2324":{"crate_id":1,"path":["std","process","Stdio"],"kind":"struct"},"1:7149:20727":{"crate_id":1,"path":["std","sys_common","backtrace","_print","DisplayBacktrace"],"kind":"struct"},"6:5861:12780":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","msqid_ds"],"kind":"struct"},"17:9691:15192":{"crate_id":17,"path":["object","read","elf","hash","HashTable"],"kind":"struct"},"1:11584:24252":{"crate_id":1,"path":["std","sys_common","once","futex","CompletionGuard"],"kind":"struct"},"2:48313:1972":{"crate_id":2,"path":["core","result","IntoIter"],"kind":"struct"},"2:7163:156":{"crate_id":2,"path":["core","iter","traits","iterator","Iterator"],"kind":"trait"},"2:2488:147":{"crate_id":2,"path":["core","convert","Into"],"kind":"trait"},"17:10062:15236":{"crate_id":17,"path":["object","read","macho","segment","MachOSegmentIterator"],"kind":"struct"},"6:6269:8727":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","sigaction"],"kind":"struct"},"16:6676:14950":{"crate_id":16,"path":["gimli","read","loclists","DebugLoc"],"kind":"struct"},"2:49113:130":{"crate_id":2,"path":["core","fmt","rt","v1","FormatSpec"],"kind":"struct"},"17:11536:15277":{"crate_id":17,"path":["object","macho","FatArch32"],"kind":"struct"},"16:4888:14683":{"crate_id":16,"path":["gimli","constants","DwMacro"],"kind":"struct"},"1:931:1974":{"crate_id":1,"path":["std","collections","hash","map","Values"],"kind":"struct"},"6:4307:12073":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_condition_effect"],"kind":"struct"},"2:48347:84":{"crate_id":2,"path":["core","sync","atomic","AtomicI8"],"kind":"struct"},"2:20349:2420":{"crate_id":2,"path":["core","core_simd","lane_count","SupportedLaneCount"],"kind":"trait"},"1:3486:2120":{"crate_id":1,"path":["std","io","BufRead"],"kind":"trait"},"2:50254:7675":{"crate_id":2,"path":["core","str","iter","RMatchIndices"],"kind":"struct"},"1:918:1973":{"crate_id":1,"path":["std","collections","hash","map","Keys"],"kind":"struct"},"2:21235:19438":{"crate_id":2,"path":["core","num","dec2flt","common","BiasedFp"],"kind":"struct"},"2:2818:8004":{"crate_id":2,"path":["core","ops","bit","BitOr"],"kind":"trait"},"16:6284:14955":{"crate_id":16,"path":["gimli","read","index","DebugTuIndex"],"kind":"struct"},"6:6479:13164":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user"],"kind":"struct"},"1:3192:2157":{"crate_id":1,"path":["std","io","stdio","Stdin"],"kind":"struct"},"2:54030:2489":{"crate_id":2,"path":["core","core_arch","simd","u64x8"],"kind":"struct"},"6:6329:2274":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stat"],"kind":"struct"},"17:9658:15218":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdatSectionIterator"],"kind":"struct"},"1:5227:2280":{"crate_id":1,"path":["std","panic","always_abort"],"kind":"function"},"2:51081:7550":{"crate_id":2,"path":["core","alloc","layout","LayoutError"],"kind":"struct"},"1:2257:2090":{"crate_id":1,"path":["std","fs","read_to_string"],"kind":"function"},"2:58363:28290":{"crate_id":2,"path":["core","core_simd","vector","ptr","SimdConstPtr"],"kind":"struct"},"2:3142:8015":{"crate_id":2,"path":["core","ops","range","OneSidedRange"],"kind":"trait"},"17:11606:18084":{"crate_id":17,"path":["object","macho","LcStr"],"kind":"struct"},"2:50385:7670":{"crate_id":2,"path":["core","str","iter","EscapeDebug"],"kind":"struct"},"2:47223:27779":{"crate_id":2,"path":["core","iter","adapters","flatten","FlattenCompat"],"kind":"struct"},"2:21326:28282":{"crate_id":2,"path":["core","num","flt2dec","decoder","Decoded"],"kind":"struct"},"1:6137:24239":{"crate_id":1,"path":["std","sync","mpmc","array","Channel"],"kind":"struct"},"6:5625:12740":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","timex"],"kind":"struct"},"9:800:13896":{"crate_id":9,"path":["miniz_oxide","inflate","core","LocalVars"],"kind":"struct"},"17:10350:15321":{"crate_id":17,"path":["object","read","pe","export","Export"],"kind":"struct"},"1:9301:2340":{"crate_id":1,"path":["std","sync","mpsc","RecvError"],"kind":"struct"},"5:4531:201":{"crate_id":5,"path":["alloc","rc","Rc"],"kind":"struct"},"1:4906:23647":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt","st_mtime"],"kind":"foreign_type"},"2:53286:2474":{"crate_id":2,"path":["core","core_arch","simd","i8x64"],"kind":"struct"},"15:175:14001":{"crate_id":15,"path":["addr2line","LocationRangeIter"],"kind":"struct"},"1:5660:2319":{"crate_id":1,"path":["std","process","ChildStdin"],"kind":"struct"},"5:4626:2125":{"crate_id":5,"path":["alloc","rc","from_iter_exact","Guard"],"kind":"struct"},"2:4201:7741":{"crate_id":2,"path":["core","cell","BorrowMutError"],"kind":"struct"},"17:12874:18547":{"crate_id":17,"path":["object","pe","ImageSymbolExBytes"],"kind":"struct"},"1:9268:2336":{"crate_id":1,"path":["std","sync","mpsc","TryIter"],"kind":"struct"},"2:47615:7941":{"crate_id":2,"path":["core","iter","sources","repeat_n","RepeatN"],"kind":"struct"},"17:13148:18996":{"crate_id":17,"path":["object","pe","ImageResourceDataEntry"],"kind":"struct"},"2:50671:7653":{"crate_id":2,"path":["core","str","pattern","EmptyNeedle"],"kind":"struct"},"2:54095:7527":{"crate_id":2,"path":["core","core_arch","x86","__m128"],"kind":"struct"},"17:9031:33486":{"crate_id":17,"path":["object","read","any","ComdatSectionIteratorInternal"],"kind":"enum"},"1:5348:22586":{"crate_id":1,"path":["std","path","fmt","DebugHelper"],"kind":"struct"},"6:6500:13165":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","mcontext_t"],"kind":"struct"},"1:11111:22607":{"crate_id":1,"path":["std","sys","unix","fs","FilePermissions"],"kind":"struct"},"16:7319:15050":{"crate_id":16,"path":["gimli","read","pubtypes","PubTypesEntryIter"],"kind":"struct"},"1:973:1980":{"crate_id":1,"path":["std","collections","hash","map","RawEntryBuilderMut"],"kind":"struct"},"17:9764:15221":{"crate_id":17,"path":["object","read","elf","version","VerdauxIterator"],"kind":"struct"},"16:4606:14624":{"crate_id":16,"path":["gimli","constants","DwCc"],"kind":"struct"},"1:2383:2093":{"crate_id":1,"path":["std","fs","metadata"],"kind":"function"},"16:2605:15076":{"crate_id":16,"path":["gimli","common","DebugMacroOffset"],"kind":"struct"},"2:4318:7748":{"crate_id":2,"path":["core","cell","BorrowRefMut"],"kind":"struct"},"6:545:8813":{"crate_id":6,"path":["libc","unix","hostent"],"kind":"struct"},"1:7923:1958":{"crate_id":1,"path":["std","backtrace","BacktraceStatus"],"kind":"enum"},"16:6316:14972":{"crate_id":16,"path":["gimli","read","index","UnitIndexSectionIterator"],"kind":"struct"},"5:6980:7682":{"crate_id":5,"path":["alloc","string","FromUtf8Error"],"kind":"struct"},"17:10774:15321":{"crate_id":17,"path":["object","read","Export"],"kind":"struct"},"1:4324:2211":{"crate_id":1,"path":["std","os","unix","fs","DirBuilderExt"],"kind":"trait"},"5:3911:1970":{"crate_id":5,"path":["alloc","collections","vec_deque","iter","Iter"],"kind":"struct"},"2:1737:8044":{"crate_id":2,"path":["core","ptr","metadata","Pointee"],"kind":"trait"},"17:9274:15131":{"crate_id":17,"path":["object","read","archive","ArchiveMember"],"kind":"struct"},"16:6743:15037":{"crate_id":16,"path":["gimli","read","loclists","RawLocListEntry"],"kind":"enum"},"2:4679:1602":{"crate_id":2,"path":["core","ffi","c_void"],"kind":"enum"},"17:10233:15317":{"crate_id":17,"path":["object","read","pe","file","PeComdat"],"kind":"struct"},"16:5839:15016":{"crate_id":16,"path":["gimli","read","cfi","RegisterRule"],"kind":"enum"},"2:6826:2352":{"crate_id":2,"path":["core","iter","sources","once","once"],"kind":"function"},"1:11687:22484":{"crate_id":1,"path":["std","sys_common","wtf8","EncodeWide"],"kind":"struct"},"1:12323:13":{"crate_id":1,"path":["std","fn"],"kind":"primitive"},"5:2737:7552":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Owned"],"kind":"enum"},"16:2341:15065":{"crate_id":16,"path":["gimli","common","DebugAbbrevOffset"],"kind":"struct"},"17:12307:18260":{"crate_id":17,"path":["object","macho","Nlist32"],"kind":"struct"},"17:13231:19031":{"crate_id":17,"path":["object","pe","ImageLoadConfigDirectory32"],"kind":"struct"},"16:4144:14192":{"crate_id":16,"path":["gimli","constants","DwAt"],"kind":"struct"},"16:6146:14992":{"crate_id":16,"path":["gimli","read","abbrev","Abbreviation"],"kind":"struct"},"2:2801:8002":{"crate_id":2,"path":["core","ops","arith","RemAssign"],"kind":"trait"},"6:4096:12051":{"crate_id":6,"path":["libc","unix","linux_like","linux","rlimit64"],"kind":"struct"},"2:46891:7774":{"crate_id":2,"path":["core","char","decode","DecodeUtf16"],"kind":"struct"},"16:7426:14969":{"crate_id":16,"path":["gimli","read","rnglists","RngListIter"],"kind":"struct"},"5:1396:1974":{"crate_id":5,"path":["alloc","collections","btree","map","Values"],"kind":"struct"},"2:48110:178":{"crate_id":2,"path":["core","option","Option"],"kind":"enum"},"12:2069:1986":{"crate_id":12,"path":["hashbrown","set","OccupiedEntry"],"kind":"struct"},"2:47606:2165":{"crate_id":2,"path":["core","iter","sources","repeat","Repeat"],"kind":"struct"},"5:36:2037":{"crate_id":5,"path":["alloc","raw_vec","RawVec"],"kind":"struct"},"2:50503:7644":{"crate_id":2,"path":["core","str","pattern","MultiCharEqSearcher"],"kind":"struct"},"17:9553:15152":{"crate_id":17,"path":["object","read","elf","symbol","SymbolTable"],"kind":"struct"},"7:32:13745":{"crate_id":7,"path":["unwind","libunwind","_Unwind_Reason_Code"],"kind":"enum"},"17:12361:18327":{"crate_id":17,"path":["object","macho","ScatteredRelocationInfo"],"kind":"struct"},"17:13492:19105":{"crate_id":17,"path":["object","pe","ImageCoffSymbolsHeader"],"kind":"struct"},"2:20095:29370":{"crate_id":2,"path":["core","core_simd","swizzle","deinterleave","Odd"],"kind":"struct"},"5:3015:1995":{"crate_id":5,"path":["alloc","collections","btree","set","Union"],"kind":"struct"},"2:3377:7721":{"crate_id":2,"path":["core","any","Demand"],"kind":"struct"},"1:8704:2232":{"crate_id":1,"path":["std","os","unix","net","ancillary","SocketAncillary"],"kind":"struct"},"1:9394:1932":{"crate_id":1,"path":["std","sync","mpmc","context","Inner"],"kind":"struct"},"17:11271:15773":{"crate_id":17,"path":["object","elf","Verdef"],"kind":"struct"},"16:7847:15054":{"crate_id":16,"path":["gimli","read","unit","AttrsIter"],"kind":"struct"},"17:10088:15235":{"crate_id":17,"path":["object","read","macho","segment","MachOSegmentInternal"],"kind":"struct"},"7:0:1499":{"crate_id":7,"path":["unwind"],"kind":"module"},"5:5552:8393":{"crate_id":5,"path":["alloc","sync","ArcInner"],"kind":"struct"},"2:29564:2007":{"crate_id":2,"path":["core","mem","manually_drop","ManuallyDrop"],"kind":"struct"},"2:48195:2288":{"crate_id":2,"path":["core","panic","location","Location"],"kind":"struct"},"2:47591:1966":{"crate_id":2,"path":["core","iter","sources","once","Once"],"kind":"struct"},"2:46602:14988":{"crate_id":2,"path":["core","any","tags","Value"],"kind":"struct"},"1:12320:774":{"crate_id":1,"path":["std","isize"],"kind":"primitive"},"17:9820:15271":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldSubCache"],"kind":"struct"},"16:7435:14985":{"crate_id":16,"path":["gimli","read","rnglists","RawRange"],"kind":"struct"},"2:51911:2491":{"crate_id":2,"path":["core","core_arch","simd","u8x8"],"kind":"struct"},"17:10283:15290":{"crate_id":17,"path":["object","read","pe","section","PeSectionIterator"],"kind":"struct"},"2:2899:116":{"crate_id":2,"path":["core","ops","deref","Deref"],"kind":"trait"},"1:12296:367":{"crate_id":1,"path":["std","bool"],"kind":"primitive"},"13:108:32717":{"crate_id":13,"path":["std_detect","detect","arch","x86","Feature"],"kind":"enum"},"2:21108:28235":{"crate_id":2,"path":["core","num","bignum","Big32x40"],"kind":"struct"},"17:11828:18161":{"crate_id":17,"path":["object","macho","DylinkerCommand"],"kind":"struct"},"6:5782:12752":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","utmpx"],"kind":"struct"},"1:1811:598":{"crate_id":1,"path":["std","env"],"kind":"module"},"2:52836:2485":{"crate_id":2,"path":["core","core_arch","simd","u32x8"],"kind":"struct"},"1:11143:118":{"crate_id":1,"path":["std","sys","unix","fs","DirBuilder"],"kind":"struct"},"5:5516:69":{"crate_id":5,"path":["alloc","sync","Arc"],"kind":"struct"},"17:11288:15780":{"crate_id":17,"path":["object","elf","Verdaux"],"kind":"struct"},"16:5761:15012":{"crate_id":16,"path":["gimli","read","cfi","UnwindTable"],"kind":"struct"},"9:592:13792":{"crate_id":9,"path":["miniz_oxide","deflate","core","CompressionStrategy"],"kind":"enum"},"17:9155:15377":{"crate_id":17,"path":["object","read","any","DynamicRelocationIterator"],"kind":"struct"},"12:853:1983":{"crate_id":12,"path":["hashbrown","map","RawVacantEntryMut"],"kind":"struct"},"2:14:1847":{"crate_id":2,"path":["core","write"],"kind":"macro"},"16:7452:195":{"crate_id":16,"path":["gimli","read","rnglists","Range"],"kind":"struct"},"1:4904:23645":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt","st_atime"],"kind":"foreign_type"},"1:11513:20225":{"crate_id":1,"path":["std","sys","unix","time","Timespec"],"kind":"struct"},"9:896:13857":{"crate_id":9,"path":["miniz_oxide","MZStatus"],"kind":"enum"},"2:8560:2075":{"crate_id":2,"path":["core","fmt","Write"],"kind":"trait"},"2:48161:8020":{"crate_id":2,"path":["core","option","Item"],"kind":"struct"},"17:11186:15607":{"crate_id":17,"path":["object","elf","Rela64"],"kind":"struct"},"2:54152:7532":{"crate_id":2,"path":["core","core_arch","x86","__m512i"],"kind":"struct"},"16:2509:15072":{"crate_id":16,"path":["gimli","common","LocationListsOffset"],"kind":"struct"},"12:822:1981":{"crate_id":12,"path":["hashbrown","map","RawEntryMut"],"kind":"enum"},"6:5510:12732":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","glob64_t"],"kind":"struct"},"1:4454:2237":{"crate_id":1,"path":["std","os","unix","net","ancillary","Messages"],"kind":"struct"},"2:57088:243":{"crate_id":2,"path":["core","core_simd","fmt","fmt","Wrapper"],"kind":"struct"},"2:49967:7618":{"crate_id":2,"path":["core","slice","iter","RChunks"],"kind":"struct"},"17:9909:15230":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandIterator"],"kind":"struct"},"2:50801:8156":{"crate_id":2,"path":["core","str","LinesAnyMap"],"kind":"struct"},"1:2029:181":{"crate_id":1,"path":["std","ffi","os_str","OsStr"],"kind":"struct"},"2:48461:88":{"crate_id":2,"path":["core","sync","atomic","AtomicU16"],"kind":"struct"},"2:21823:171":{"crate_id":2,"path":["core","num","nonzero","NonZeroU128"],"kind":"struct"},"2:49996:7620":{"crate_id":2,"path":["core","slice","iter","RChunksExactMut"],"kind":"struct"},"18:766:19179":{"crate_id":18,"path":["memchr","memmem","SearcherRevKind"],"kind":"enum"},"17:12322:18261":{"crate_id":17,"path":["object","macho","Nlist64"],"kind":"struct"},"17:12748:18453":{"crate_id":17,"path":["object","pe","ImageRomHeaders"],"kind":"struct"},"17:10642:15337":{"crate_id":17,"path":["object","read","SymbolSection"],"kind":"enum"},"12:697:1979":{"crate_id":12,"path":["hashbrown","map","IntoValues"],"kind":"struct"},"12:659:1972":{"crate_id":12,"path":["hashbrown","map","IntoIter"],"kind":"struct"},"2:50646:7651":{"crate_id":2,"path":["core","str","pattern","StrSearcher"],"kind":"struct"},"5:7046:1976":{"crate_id":5,"path":["alloc","vec","drain_filter","DrainFilter"],"kind":"struct"},"6:7226:12250":{"crate_id":6,"path":["libc","unix","linux_like","linux","fanotify_event_metadata"],"kind":"struct"},"6:4417:12083":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Sym"],"kind":"struct"},"2:2857:8013":{"crate_id":2,"path":["core","ops","bit","ShrAssign"],"kind":"trait"},"17:11708:18152":{"crate_id":17,"path":["object","macho","Fvmlib"],"kind":"struct"},"17:13340:19034":{"crate_id":17,"path":["object","pe","ImageHotPatchBase"],"kind":"struct"},"2:53102:2468":{"crate_id":2,"path":["core","core_arch","simd","i64x4"],"kind":"struct"},"17:8241:15363":{"crate_id":17,"path":["object","common","SymbolKind"],"kind":"enum"},"2:53492:2493":{"crate_id":2,"path":["core","core_arch","simd","u8x64"],"kind":"struct"},"17:12278:18253":{"crate_id":17,"path":["object","macho","DataInCodeEntry"],"kind":"struct"},"2:2769:7996":{"crate_id":2,"path":["core","ops","arith","Div"],"kind":"trait"},"1:4254:2204":{"crate_id":1,"path":["std","os","unix","fs","PermissionsExt"],"kind":"trait"},"1:10901:1933":{"crate_id":1,"path":["std","sys","unix","thread","Thread"],"kind":"struct"},"17:9712:15220":{"crate_id":17,"path":["object","read","elf","version","VersionIndex"],"kind":"struct"},"17:12008:18173":{"crate_id":17,"path":["object","macho","TwolevelHintsCommand"],"kind":"struct"},"6:513:8810":{"crate_id":6,"path":["libc","unix","rlimit"],"kind":"struct"},"1:8138:2149":{"crate_id":1,"path":["std","io","buffered","IntoInnerError"],"kind":"struct"},"1:5880:203":{"crate_id":1,"path":["std","sync","mpsc","Receiver"],"kind":"struct"},"1:8378:2108":{"crate_id":1,"path":["std","io","IoSlice"],"kind":"struct"},"17:0:1737":{"crate_id":17,"path":["object"],"kind":"module"},"17:13366:19070":{"crate_id":17,"path":["object","pe","ImageArmRuntimeFunctionEntry"],"kind":"struct"},"11:0:1732":{"crate_id":11,"path":["adler"],"kind":"module"},"1:8092:2088":{"crate_id":1,"path":["std","fs","Permissions"],"kind":"struct"},"6:4804:12123":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_txtime"],"kind":"struct"},"2:46967:7768":{"crate_id":2,"path":["core","char","ToLowercase"],"kind":"struct"},"2:8623:7578":{"crate_id":2,"path":["core","fmt","UpperHex"],"kind":"trait"},"16:5541:15005":{"crate_id":16,"path":["gimli","read","cfi","CfiEntriesIter"],"kind":"struct"},"6:1500:9696":{"crate_id":6,"path":["libc","unix","linux_like","in_addr"],"kind":"struct"},"5:1196:1985":{"crate_id":5,"path":["alloc","collections","btree","map","entry","Entry"],"kind":"enum"},"2:38198:7779":{"crate_id":2,"path":["core","cmp","Reverse"],"kind":"struct"},"17:12103:18180":{"crate_id":17,"path":["object","macho","EncryptionInfoCommand32"],"kind":"struct"},"6:6545:13169":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ptrace_rseq_configuration"],"kind":"struct"},"17:11893:18165":{"crate_id":17,"path":["object","macho","SymtabCommand"],"kind":"struct"},"6:7249:12253":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_rwlock_t"],"kind":"struct"},"1:10580:2333":{"crate_id":1,"path":["std","sys","unix","pipe","AnonPipe"],"kind":"struct"},"2:50403:7671":{"crate_id":2,"path":["core","str","iter","EscapeUnicode"],"kind":"struct"},"9:382:13877":{"crate_id":9,"path":["miniz_oxide","inflate","core","DecompressorOxide"],"kind":"struct"},"1:6676:1966":{"crate_id":1,"path":["std","sync","once","Once"],"kind":"struct"},"5:4951:7595":{"crate_id":5,"path":["alloc","slice","Join"],"kind":"trait"},"12:1120:13975":{"crate_id":12,"path":["hashbrown","map","VacantEntryRef"],"kind":"struct"},"2:47584:27764":{"crate_id":2,"path":["core","iter","sources","from_generator","FromGenerator"],"kind":"struct"},"2:50813:8160":{"crate_id":2,"path":["core","str","CharEscapeDefault"],"kind":"struct"},"5:2919:95":{"crate_id":5,"path":["alloc","collections","btree","set","BTreeSet"],"kind":"struct"},"17:9897:15275":{"crate_id":17,"path":["object","read","macho","file","MachOComdatSectionIterator"],"kind":"struct"},"6:5672:12742":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","regex_t"],"kind":"struct"},"16:5184:15061":{"crate_id":16,"path":["gimli","endianity","RunTimeEndian"],"kind":"enum"},"2:11712:135":{"crate_id":2,"path":["core","future","future","Future"],"kind":"trait"},"2:10668:8147":{"crate_id":2,"path":["core","slice","SlicePattern"],"kind":"trait"},"1:8553:19399":{"crate_id":1,"path":["std","net","parser","AddrKind"],"kind":"enum"},"2:9312:219":{"crate_id":2,"path":["core","slice","index","SliceIndex"],"kind":"trait"},"6:4354:12078":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_ff_erase"],"kind":"struct"},"1:6837:2403":{"crate_id":1,"path":["std","sync","remutex","ReentrantMutex"],"kind":"struct"},"1:8945:2306":{"crate_id":1,"path":["std","path","Components"],"kind":"struct"},"2:50488:7641":{"crate_id":2,"path":["core","str","pattern","CharSearcher"],"kind":"struct"},"17:11841:18162":{"crate_id":17,"path":["object","macho","ThreadCommand"],"kind":"struct"},"6:4761:12119":{"crate_id":6,"path":["libc","unix","linux_like","linux","af_alg_iv"],"kind":"struct"},"6:1643:9711":{"crate_id":6,"path":["libc","unix","linux_like","ifaddrs"],"kind":"struct"},"2:4700:28402":{"crate_id":2,"path":["core","ffi","sealed_trait","VaArgSafe"],"kind":"trait"},"2:50086:2138":{"crate_id":2,"path":["core","str","iter","Split"],"kind":"struct"},"17:8774:15370":{"crate_id":17,"path":["object","read","util","ByteString"],"kind":"struct"},"17:13176:19020":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation32"],"kind":"struct"},"2:11155:7634":{"crate_id":2,"path":["core","str","pattern","DoubleEndedSearcher"],"kind":"trait"},"2:50062:7665":{"crate_id":2,"path":["core","str","iter","CharIndices"],"kind":"struct"},"16:2894:15088":{"crate_id":16,"path":["gimli","common","UnitSectionOffset"],"kind":"enum"},"2:53072:2465":{"crate_id":2,"path":["core","core_arch","simd","i32x8"],"kind":"struct"},"1:8698:2241":{"crate_id":1,"path":["std","os","unix","net","ancillary","AncillaryError"],"kind":"enum"},"2:1760:8043":{"crate_id":2,"path":["core","ptr","metadata","DynMetadata"],"kind":"struct"},"2:6766:2164":{"crate_id":2,"path":["core","iter","sources","empty","Empty"],"kind":"struct"},"17:12291:18259":{"crate_id":17,"path":["object","macho","NoteCommand"],"kind":"struct"},"17:13141:18995":{"crate_id":17,"path":["object","pe","ImageResourceDirStringU"],"kind":"struct"},"17:13214:19029":{"crate_id":17,"path":["object","pe","ImagePrologueDynamicRelocationHeader"],"kind":"struct"},"1:7747:20723":{"crate_id":1,"path":["std","backtrace_rs","symbolize","SymbolName"],"kind":"struct"},"1:628:1953":{"crate_id":1,"path":["std","ascii","AsciiExt"],"kind":"trait"},"1:9830:2084":{"crate_id":1,"path":["std","sys","unix","fs","ReadDir"],"kind":"struct"},"2:51879:2458":{"crate_id":2,"path":["core","core_arch","simd","i16x2"],"kind":"struct"},"2:20752:2422":{"crate_id":2,"path":["core","core_simd","ord","SimdPartialOrd"],"kind":"trait"},"16:5558:15006":{"crate_id":16,"path":["gimli","read","cfi","CieOrFde"],"kind":"enum"},"2:20074:29371":{"crate_id":2,"path":["core","core_simd","swizzle","interleave","Hi"],"kind":"struct"},"17:9831:15272":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCacheImageIterator"],"kind":"struct"},"2:48856:7569":{"crate_id":2,"path":["core","fmt","num","Octal"],"kind":"struct"},"1:5887:2337":{"crate_id":1,"path":["std","sync","mpsc","Sender"],"kind":"struct"},"17:10394:15323":{"crate_id":17,"path":["object","read","pe","import","ImportThunkList"],"kind":"struct"},"2:2498:234":{"crate_id":2,"path":["core","convert","TryFrom"],"kind":"trait"},"6:4690:981":{"crate_id":6,"path":["libc","unix","linux_like","linux","option"],"kind":"struct"},"2:46877:7772":{"crate_id":2,"path":["core","char","convert","CharTryFromError"],"kind":"struct"},"17:10221:15316":{"crate_id":17,"path":["object","read","pe","file","PeComdatIterator"],"kind":"struct"},"2:49641:19550":{"crate_id":2,"path":["core","slice","ascii","EscapeByte"],"kind":"struct"},"16:5374:14943":{"crate_id":16,"path":["gimli","read","addr","DebugAddr"],"kind":"struct"},"5:950:30532":{"crate_id":5,"path":["alloc","collections","binary_heap","drop","DropGuard"],"kind":"struct"},"12:1872:1995":{"crate_id":12,"path":["hashbrown","set","Union"],"kind":"struct"},"6:6524:13167":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","shmid_ds"],"kind":"struct"},"1:969:1979":{"crate_id":1,"path":["std","collections","hash","map","IntoValues"],"kind":"struct"},"1:7191:20782":{"crate_id":1,"path":["std","sys_common","lazy_box","LazyBox"],"kind":"struct"},"2:48178:1971":{"crate_id":2,"path":["core","option","IterMut"],"kind":"struct"},"1:11920:23625":{"crate_id":1,"path":["std","personality","dwarf","eh","EHContext"],"kind":"struct"},"6:501:8808":{"crate_id":6,"path":["libc","unix","timeval"],"kind":"struct"},"2:54282:7538":{"crate_id":2,"path":["core","core_arch","x86","cpuid","CpuidResult"],"kind":"struct"},"2:47275:7952":{"crate_id":2,"path":["core","iter","adapters","map_while","MapWhile"],"kind":"struct"},"9:863:13856":{"crate_id":9,"path":["miniz_oxide","MZFlush"],"kind":"enum"},"17:12850:18544":{"crate_id":17,"path":["object","pe","ImageSymbolBytes"],"kind":"struct"},"2:51767:28274":{"crate_id":2,"path":["core","core_arch","simd","u8x2"],"kind":"struct"},"2:2982:2031":{"crate_id":2,"path":["core","ops","index","Index"],"kind":"trait"},"6:4379:12081":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Ehdr"],"kind":"struct"}},"external_crates":{"16":{"name":"gimli","html_root_url":"https://doc.rust-lang.org/nightly/"},"14":{"name":"rustc_demangle","html_root_url":"https://doc.rust-lang.org/nightly/"},"10":{"name":"rustc_std_workspace_alloc","html_root_url":"https://doc.rust-lang.org/nightly/"},"13":{"name":"std_detect","html_root_url":"https://doc.rust-lang.org/nightly/"},"8":{"name":"cfg_if","html_root_url":"https://docs.rs/cfg-if/"},"17":{"name":"object","html_root_url":"https://doc.rust-lang.org/nightly/"},"9":{"name":"miniz_oxide","html_root_url":"https://doc.rust-lang.org/nightly/"},"2":{"name":"core","html_root_url":"https://doc.rust-lang.org/nightly/"},"4":{"name":"rustc_std_workspace_core","html_root_url":"https://doc.rust-lang.org/nightly/"},"6":{"name":"libc","html_root_url":"https://doc.rust-lang.org/nightly/"},"7":{"name":"unwind","html_root_url":"https://doc.rust-lang.org/nightly/"},"15":{"name":"addr2line","html_root_url":"https://doc.rust-lang.org/nightly/"},"19":{"name":"panic_unwind","html_root_url":"https://doc.rust-lang.org/nightly/"},"11":{"name":"adler","html_root_url":"https://docs.rs/adler/1.0.2/"},"12":{"name":"hashbrown","html_root_url":"https://doc.rust-lang.org/nightly/"},"5":{"name":"alloc","html_root_url":"https://doc.rust-lang.org/nightly/"},"3":{"name":"compiler_builtins","html_root_url":"https://doc.rust-lang.org/nightly/"},"1":{"name":"std","html_root_url":"https://doc.rust-lang.org/nightly/"},"18":{"name":"memchr","html_root_url":"https://doc.rust-lang.org/nightly/"}},"format_version":24}