{"root":"0:0:1697","crate_version":"0.3.9","includes_private":false,"index":{"2:12212:28330":{"id":"2:12212:28330","crate_id":2,"name":"rsplit_terminator","span":null,"visibility":"public","docs":"An iterator over substrings of `self`, separated by characters\nmatched by a pattern and yielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\nEquivalent to [`split`], except that the trailing substring is\nskipped if empty.\n\n[`split`]: str::split\n\nThis method can be used for string data that is _terminated_,\nrather than _separated_ by a pattern.\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a\nreverse search, and it will be double ended if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`split_terminator`] method can be\nused.\n\n[`split_terminator`]: str::split_terminator\n\n# Examples\n\n```\nlet v: Vec<&str> = \"A.B.\".rsplit_terminator('.').collect();\nassert_eq!(v, [\"B\", \"A\"]);\n\nlet v: Vec<&str> = \"A..B..\".rsplit_terminator(\".\").collect();\nassert_eq!(v, [\"\", \"B\", \"\", \"A\"]);\n\nlet v: Vec<&str> = \"A.B:C.D\".rsplit_terminator(&['.', ':'][..]).collect();\nassert_eq!(v, [\"D\", \"C\", \"B\", \"A\"]);\n```","links":{"self::pattern":"2:11852:7759","str::split":"2:12200:21526","prim@char":"1:12030:421","str::split_terminator":"2:12209:28329"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RSplitTerminator","id":"2:43700:7778","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11857:7755","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:11857:7755","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11872:7756","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12224:28332":{"id":"2:12224:28332","crate_id":2,"name":"rsplit_once","span":null,"visibility":"public","docs":"Splits the string on the last occurrence of the specified delimiter and\nreturns prefix before delimiter and suffix after delimiter.\n\n# Examples\n\n```\nassert_eq!(\"cfg\".rsplit_once('='), None);\nassert_eq!(\"cfg=foo\".rsplit_once('='), Some((\"cfg\", \"foo\")));\nassert_eq!(\"cfg=foo=bar\".rsplit_once('='), Some((\"cfg=foo\", \"bar\")));\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["delimiter",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:41671:181","args":{"angle_bracketed":{"args":[{"type":{"tuple":[{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11857:7755","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:11857:7755","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11872:7756","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12176:26219":{"id":"2:12176:26219","crate_id":2,"name":"char_indices","span":null,"visibility":"public","docs":"Returns an iterator over the [`char`]s of a string slice, and their\npositions.\n\nAs a string slice consists of valid UTF-8, we can iterate through a\nstring slice by [`char`]. This method returns an iterator of both\nthese [`char`]s, as well as their byte positions.\n\nThe iterator yields tuples. The position is first, the [`char`] is\nsecond.\n\n# Examples\n\nBasic usage:\n\n```\nlet word = \"goodbye\";\n\nlet count = word.char_indices().count();\nassert_eq!(7, count);\n\nlet mut char_indices = word.char_indices();\n\nassert_eq!(Some((0, 'g')), char_indices.next());\nassert_eq!(Some((1, 'o')), char_indices.next());\nassert_eq!(Some((2, 'o')), char_indices.next());\nassert_eq!(Some((3, 'd')), char_indices.next());\nassert_eq!(Some((4, 'b')), char_indices.next());\nassert_eq!(Some((5, 'y')), char_indices.next());\nassert_eq!(Some((6, 'e')), char_indices.next());\n\nassert_eq!(None, char_indices.next());\n```\n\nRemember, [`char`]s might not match your intuition about characters:\n\n[`char`]: prim@char\n\n```\nlet yes = \"y̆es\";\n\nlet mut char_indices = yes.char_indices();\n\nassert_eq!(Some((0, 'y')), char_indices.next()); // not (0, 'y̆')\nassert_eq!(Some((1, '\\u{0306}')), char_indices.next());\n\n// note the 3 here - the last character took up two bytes\nassert_eq!(Some((3, 'e')), char_indices.next());\nassert_eq!(Some((4, 's')), char_indices.next());\n\nassert_eq!(None, char_indices.next());\n```","links":{"prim@char":"1:12030:421"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"CharIndices","id":"2:43608:7765","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12186:23419":{"id":"2:12186:23419","crate_id":2,"name":"starts_with","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a prefix of this\nstring slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.starts_with(\"bana\"));\nassert!(!bananas.starts_with(\"nana\"));\n```","links":{"prim@char":"1:12030:421","self::pattern":"2:11852:7759"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11857:7755","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12165:23377":{"id":"2:12165:23377","crate_id":2,"name":"get_mut","span":null,"visibility":"public","docs":"Returns a mutable subslice of `str`.\n\nThis is the non-panicking alternative to indexing the `str`. Returns\n[`None`] whenever equivalent indexing operation would panic.\n\n# Examples\n\n```\nlet mut v = String::from(\"hello\");\n// correct length\nassert!(v.get_mut(0..5).is_some());\n// out of bounds\nassert!(v.get_mut(..42).is_none());\nassert_eq!(Some(\"he\"), v.get_mut(0..2).map(|v| &*v));\n\nassert_eq!(\"hello\", v);\n{\n    let s = v.get_mut(0..2);\n    let s = s.map(|s| {\n        s.make_ascii_uppercase();\n        &*s\n    });\n    assert_eq!(Some(\"HE\"), s);\n}\nassert_eq!(\"HEllo\", v);\n```","links":{"`None`":"2:41673:179"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"resolved_path":{"name":"Option","id":"2:41671:181","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"2:9946:222","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"2:9946:222","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12169:23379":{"id":"2:12169:23379","crate_id":2,"name":"get_unchecked_mut","span":null,"visibility":"public","docs":"Returns a mutable, unchecked subslice of `str`.\n\nThis is the unchecked alternative to indexing the `str`.\n\n# Safety\n\nCallers of this function are responsible that these preconditions are\nsatisfied:\n\n* The starting index must not exceed the ending index;\n* Indexes must be within bounds of the original slice;\n* Indexes must lie on UTF-8 sequence boundaries.\n\nFailing that, the returned string slice may reference invalid memory or\nviolate the invariants communicated by the `str` type.\n\n# Examples\n\n```\nlet mut v = String::from(\"🗻∈🌏\");\nunsafe {\n    assert_eq!(\"🗻\", v.get_unchecked_mut(0..4));\n    assert_eq!(\"∈\", v.get_unchecked_mut(4..7));\n    assert_eq!(\"🌏\", v.get_unchecked_mut(7..11));\n}\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"2:9946:222","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"2:9946:222","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"2:12151:823":{"id":"2:12151:823","crate_id":2,"name":"len","span":null,"visibility":"public","docs":"Returns the length of `self`.\n\nThis length is in bytes, not [`char`]s or graphemes. In other words,\nit might not be what a human considers the length of the string.\n\n[`char`]: prim@char\n\n# Examples\n\n```\nlet len = \"foo\".len();\nassert_eq!(3, len);\n\nassert_eq!(\"ƒoo\".len(), 4); // fancy f!\nassert_eq!(\"ƒoo\".chars().count(), 3);\n```","links":{"prim@char":"1:12030:421"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12182:25747":{"id":"2:12182:25747","crate_id":2,"name":"encode_utf16","span":null,"visibility":"public","docs":"Returns an iterator of `u16` over the string encoded as UTF-16.\n\n# Examples\n\n```\nlet text = \"Zażółć gęślą jaźń\";\n\nlet utf8_len = text.len();\nlet utf16_len = text.encode_utf16().count();\n\nassert!(utf16_len <= utf8_len);\n```","links":{},"attrs":["#[must_use =\n\"this returns the encoded string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EncodeUtf16","id":"2:43924:7760","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12183:23418":{"id":"2:12183:23418","crate_id":2,"name":"contains","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a sub-slice of\nthis string slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.contains(\"nana\"));\nassert!(!bananas.contains(\"apples\"));\n```","links":{"prim@char":"1:12030:421","self::pattern":"2:11852:7759"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11857:7755","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12209:28329":{"id":"2:12209:28329","crate_id":2,"name":"split_terminator","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by\ncharacters matched by a pattern.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\nEquivalent to [`split`], except that the trailing substring\nis skipped if empty.\n\n[`split`]: str::split\n\nThis method can be used for string data that is _terminated_,\nrather than _separated_ by a pattern.\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rsplit_terminator`] method can be used.\n\n[`rsplit_terminator`]: str::rsplit_terminator\n\n# Examples\n\n```\nlet v: Vec<&str> = \"A.B.\".split_terminator('.').collect();\nassert_eq!(v, [\"A\", \"B\"]);\n\nlet v: Vec<&str> = \"A..B..\".split_terminator(\".\").collect();\nassert_eq!(v, [\"A\", \"\", \"B\", \"\"]);\n\nlet v: Vec<&str> = \"A.B:C.D\".split_terminator(&['.', ':'][..]).collect();\nassert_eq!(v, [\"A\", \"B\", \"C\", \"D\"]);\n```","links":{"self::pattern":"2:11852:7759","str::split":"2:12200:21526","prim@char":"1:12030:421","`DoubleEndedIterator`":"2:7310:121","str::rsplit_terminator":"2:12212:28330"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"SplitTerminator","id":"2:43682:7779","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11857:7755","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12241:28337":{"id":"2:12241:28337","crate_id":2,"name":"trim_start","span":null,"visibility":"public","docs":"Returns a string slice with leading whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Text directionality\n\nA string is a sequence of bytes. `start` in this context means the first\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be left side, and for right-to-left languages like\nArabic or Hebrew, this will be the right side.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\nassert_eq!(\"Hello\\tworld\\t\\n\", s.trim_start());\n```\n\nDirectionality:\n\n```\nlet s = \"  English  \";\nassert!(Some('E') == s.trim_start().chars().next());\n\nlet s = \"  עברית  \";\nassert!(Some('ע') == s.trim_start().chars().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_trim_start\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12250:28342":{"id":"2:12250:28342","crate_id":2,"name":"trim_start_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. `start` in this context means the first\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be left side, and for right-to-left languages like\nArabic or Hebrew, this will be the right side.\n\n# Examples\n\n```\nassert_eq!(\"11foo1bar11\".trim_start_matches('1'), \"foo1bar11\");\nassert_eq!(\"123foo1bar123\".trim_start_matches(char::is_numeric), \"foo1bar123\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_start_matches(x), \"foo1bar12\");\n```","links":{"prim@char":"1:12030:421","self::pattern":"2:11852:7759"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11857:7755","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12221:28331":{"id":"2:12221:28331","crate_id":2,"name":"split_once","span":null,"visibility":"public","docs":"Splits the string on the first occurrence of the specified delimiter and\nreturns prefix before delimiter and suffix after delimiter.\n\n# Examples\n\n```\nassert_eq!(\"cfg\".split_once('='), None);\nassert_eq!(\"cfg=\".split_once('='), Some((\"cfg\", \"\")));\nassert_eq!(\"cfg=foo\".split_once('='), Some((\"cfg\", \"foo\")));\nassert_eq!(\"cfg=foo=bar\".split_once('='), Some((\"cfg\", \"foo=bar\")));\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["delimiter",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:41671:181","args":{"angle_bracketed":{"args":[{"type":{"tuple":[{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11857:7755","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12262:28344":{"id":"2:12262:28344","crate_id":2,"name":"trim_left_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. 'Left' in this context means the first\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _right_ side, not the left.\n\n# Examples\n\n```\nassert_eq!(\"11foo1bar11\".trim_left_matches('1'), \"foo1bar11\");\nassert_eq!(\"123foo1bar123\".trim_left_matches(char::is_numeric), \"foo1bar123\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_left_matches(x), \"foo1bar12\");\n```","links":{"prim@char":"1:12030:421","self::pattern":"2:11852:7759"},"attrs":["#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_start_matches`\",\nsuggestion = \"trim_start_matches\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_start_matches`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11857:7755","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12278:28348":{"id":"2:12278:28348","crate_id":2,"name":"escape_unicode","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_unicode`].\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"❤\\n!\".escape_unicode() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"❤\\n!\".escape_unicode());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"\\\\u{{2764}}\\\\u{{a}}\\\\u{{21}}\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"❤\\n!\".escape_unicode().to_string(), \"\\\\u{2764}\\\\u{a}\\\\u{21}\");\n```","links":{"`char::escape_unicode`":"2:4540:28348"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EscapeUnicode","id":"2:43949:7771","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12150":{"id":"2:12150","crate_id":2,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":["#[cfg(not(test))]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"primitive":"str"},"items":["2:12151:823","2:12152:21912","2:12153:28322","2:12154:28323","2:12156:28324","2:12159:22274","2:12160:28325","2:12161:316","2:12162:315","2:12163:23376","2:12165:23377","2:12167:23378","2:12169:23379","2:12171:28326","2:12172:28327","2:12173:23401","2:12174:23402","2:12175:25746","2:12176:26219","2:12177:21450","2:12178:25756","2:12179:25730","2:12180:21527","2:12181:28328","2:12182:25747","2:12183:23418","2:12186:23419","2:12189:23420","2:12192:19655","2:12196:19656","2:12200:21526","2:12203:23410","2:12206:23412","2:12209:28329","2:12212:28330","2:12215:23414","2:12218:23416","2:12221:28331","2:12224:28332","2:12227:1921","2:12230:28333","2:12233:28334","2:12236:28335","2:12239:28336","2:12241:28337","2:12243:28338","2:12245:28339","2:12246:28340","2:12247:28341","2:12250:28342","2:12253:21806","2:12256:23421","2:12259:28343","2:12262:28344","2:12265:28345","2:12268:28346","2:12270:21474","2:12271:24534","2:12272:21478","2:12273:21479","2:12274:21480","2:12275:28347","2:12277:2030","2:12278:28348"],"negative":false,"synthetic":false,"blanket_impl":null}}},"2:12233:28334":{"id":"2:12233:28334","crate_id":2,"name":"match_indices","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within this string\nslice as well as the index that the match starts at.\n\nFor matches of `pat` within `self` that overlap, only the indices\ncorresponding to the first match are returned.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rmatch_indices`] method can be used.\n\n[`rmatch_indices`]: str::rmatch_indices\n\n# Examples\n\n```\nlet v: Vec<_> = \"abcXXXabcYYYabc\".match_indices(\"abc\").collect();\nassert_eq!(v, [(0, \"abc\"), (6, \"abc\"), (12, \"abc\")]);\n\nlet v: Vec<_> = \"1abcabc2\".match_indices(\"abc\").collect();\nassert_eq!(v, [(1, \"abc\"), (4, \"abc\")]);\n\nlet v: Vec<_> = \"ababa\".match_indices(\"aba\").collect();\nassert_eq!(v, [(0, \"aba\")]); // only the first `aba`\n```","links":{"self::pattern":"2:11852:7759","`DoubleEndedIterator`":"2:7310:121","prim@char":"1:12030:421","str::rmatch_indices":"2:12236:28335"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"MatchIndices","id":"2:43782:7774","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11857:7755","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12203:23410":{"id":"2:12203:23410","crate_id":2,"name":"split_inclusive","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by\ncharacters matched by a pattern. Differs from the iterator produced by\n`split` in that `split_inclusive` leaves the matched part as the\nterminator of the substring.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\\nlittle lamb\\nlittle lamb.\"\n    .split_inclusive('\\n').collect();\nassert_eq!(v, [\"Mary had a little lamb\\n\", \"little lamb\\n\", \"little lamb.\"]);\n```\n\nIf the last element of the string is matched,\nthat element will be considered the terminator of the preceding substring.\nThat substring will be the last item returned by the iterator.\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\\nlittle lamb\\nlittle lamb.\\n\"\n    .split_inclusive('\\n').collect();\nassert_eq!(v, [\"Mary had a little lamb\\n\", \"little lamb\\n\", \"little lamb.\\n\"]);\n```","links":{"prim@char":"1:12030:421","self::pattern":"2:11852:7759"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"SplitInclusive","id":"2:11668:7750","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11857:7755","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12161:316":{"id":"2:12161:316","crate_id":2,"name":"as_ptr","span":null,"visibility":"public","docs":"Converts a string slice to a raw pointer.\n\nAs string slices are a slice of bytes, the raw pointer points to a\n[`u8`]. This pointer will be pointing to the first byte of the string\nslice.\n\nThe caller must ensure that the returned pointer is never written to.\nIf you need to mutate the contents of the string slice, use [`as_mut_ptr`].\n\n[`as_mut_ptr`]: str::as_mut_ptr\n\n# Examples\n\n```\nlet s = \"Hello\";\nlet ptr = s.as_ptr();\n```","links":{"str::as_mut_ptr":"2:12162:315","`u8`":"1:12047:1523"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"raw_pointer":{"mutable":false,"type":{"primitive":"u8"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12256:23421":{"id":"2:12256:23421","crate_id":2,"name":"strip_suffix","span":null,"visibility":"public","docs":"Returns a string slice with the suffix removed.\n\nIf the string ends with the pattern `suffix`, returns the substring before the suffix,\nwrapped in `Some`.  Unlike `trim_end_matches`, this method removes the suffix exactly once.\n\nIf the string does not end with `suffix`, returns `None`.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nassert_eq!(\"bar:foo\".strip_suffix(\":foo\"), Some(\"bar\"));\nassert_eq!(\"bar:foo\".strip_suffix(\"bar\"), None);\nassert_eq!(\"foofoo\".strip_suffix(\"foo\"), Some(\"foo\"));\n```","links":{"prim@char":"1:12030:421","self::pattern":"2:11852:7759"},"attrs":["#[must_use =\n\"this returns the remaining substring as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["suffix",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:41671:181","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11857:7755","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:11857:7755","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11872:7756","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12245:28339":{"id":"2:12245:28339","crate_id":2,"name":"trim_left","span":null,"visibility":"public","docs":"Returns a string slice with leading whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`.\n\n# Text directionality\n\nA string is a sequence of bytes. 'Left' in this context means the first\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _right_ side, not the left.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \" Hello\\tworld\\t\";\n\nassert_eq!(\"Hello\\tworld\\t\", s.trim_left());\n```\n\nDirectionality:\n\n```\nlet s = \"  English\";\nassert!(Some('E') == s.trim_left().chars().next());\n\nlet s = \"  עברית\";\nassert!(Some('ע') == s.trim_left().chars().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_start`\", suggestion\n= \"trim_start\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_start`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12273:21479":{"id":"2:12273:21479","crate_id":2,"name":"make_ascii_uppercase","span":null,"visibility":"public","docs":"Converts this string to its ASCII upper case equivalent in-place.\n\nASCII letters 'a' to 'z' are mapped to 'A' to 'Z',\nbut non-ASCII letters are unchanged.\n\nTo return a new uppercased value without modifying the existing one, use\n[`to_ascii_uppercase()`].\n\n[`to_ascii_uppercase()`]: #method.to_ascii_uppercase\n\n# Examples\n\n```\nlet mut s = String::from(\"Grüße, Jürgen ❤\");\n\ns.make_ascii_uppercase();\n\nassert_eq!(\"GRüßE, JüRGEN ❤\", s);\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12179:25730":{"id":"2:12179:25730","crate_id":2,"name":"split_ascii_whitespace","span":null,"visibility":"public","docs":"Splits a string slice by ASCII whitespace.\n\nThe iterator returned will return string slices that are sub-slices of\nthe original string slice, separated by any amount of ASCII whitespace.\n\nTo split by Unicode `Whitespace` instead, use [`split_whitespace`].\n\n[`split_whitespace`]: str::split_whitespace\n\n# Examples\n\nBasic usage:\n\n```\nlet mut iter = \"A few words\".split_ascii_whitespace();\n\nassert_eq!(Some(\"A\"), iter.next());\nassert_eq!(Some(\"few\"), iter.next());\nassert_eq!(Some(\"words\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nAll kinds of ASCII whitespace are considered:\n\n```\nlet mut iter = \" Mary   had\\ta little  \\n\\t lamb\".split_ascii_whitespace();\nassert_eq!(Some(\"Mary\"), iter.next());\nassert_eq!(Some(\"had\"), iter.next());\nassert_eq!(Some(\"a\"), iter.next());\nassert_eq!(Some(\"little\"), iter.next());\nassert_eq!(Some(\"lamb\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nIf the string is empty or all ASCII whitespace, the iterator yields no string slices:\n```\nassert_eq!(\"\".split_ascii_whitespace().next(), None);\nassert_eq!(\"   \".split_ascii_whitespace().next(), None);\n```","links":{"str::split_whitespace":"2:12178:25756"},"attrs":["#[must_use =\n\"this returns the split string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"SplitAsciiWhitespace","id":"2:43915:7761","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12159:22274":{"id":"2:12159:22274","crate_id":2,"name":"as_bytes","span":null,"visibility":"public","docs":"Converts a string slice to a byte slice. To convert the byte slice back\ninto a string slice, use the [`from_utf8`] function.\n\n# Examples\n\n```\nlet bytes = \"bors\".as_bytes();\nassert_eq!(b\"bors\", bytes);\n```","links":{"`from_utf8`":"2:11412:7763"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"primitive":"u8"}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12156:28324":{"id":"2:12156:28324","crate_id":2,"name":"ceil_char_boundary","span":null,"visibility":"public","docs":"Finds the closest `x` not below `index` where `is_char_boundary(x)` is `true`.\n\nThis method is the natural complement to [`floor_char_boundary`]. See that method\nfor more details.\n\n[`floor_char_boundary`]: str::floor_char_boundary\n\n# Panics\n\nPanics if `index > self.len()`.\n\n# Examples\n\n```\n#![feature(round_char_boundary)]\nlet s = \"❤️🧡💛💚💙💜\";\nassert_eq!(s.len(), 26);\nassert!(!s.is_char_boundary(13));\n\nlet closest = s.ceil_char_boundary(13);\nassert_eq!(closest, 14);\nassert_eq!(&s[..closest], \"❤️🧡💛\");\n```","links":{"str::floor_char_boundary":"2:12154:28323"},"attrs":["#[unstable(feature = \"round_char_boundary\", issue = \"93743\")]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["index",{"primitive":"usize"}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12174:23402":{"id":"2:12174:23402","crate_id":2,"name":"split_at_mut","span":null,"visibility":"public","docs":"Divide one mutable string slice into two at an index.\n\nThe argument, `mid`, should be a byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get immutable string slices instead, see the [`split_at`] method.\n\n[`split_at`]: str::split_at\n\n# Panics\n\nPanics if `mid` is not on a UTF-8 code point boundary, or if it is\npast the end of the last code point of the string slice.\n\n# Examples\n\n```\nlet mut s = \"Per Martin-Löf\".to_string();\n{\n    let (first, last) = s.split_at_mut(3);\n    first.make_ascii_uppercase();\n    assert_eq!(\"PER\", first);\n    assert_eq!(\" Martin-Löf\", last);\n}\nassert_eq!(\"PER Martin-Löf\", s);\n```","links":{"str::split_at":"2:12173:23401"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["mid",{"primitive":"usize"}]],"output":{"tuple":[{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12206:23412":{"id":"2:12206:23412","crate_id":2,"name":"rsplit","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by\ncharacters matched by a pattern and yielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`split`] method can be used.\n\n[`split`]: str::split\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".rsplit(' ').collect();\nassert_eq!(v, [\"lamb\", \"little\", \"a\", \"had\", \"Mary\"]);\n\nlet v: Vec<&str> = \"\".rsplit('X').collect();\nassert_eq!(v, [\"\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".rsplit('X').collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"\", \"lion\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".rsplit(\"::\").collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"lion\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".rsplit(|c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"ghi\", \"def\", \"abc\"]);\n```","links":{"self::pattern":"2:11852:7759","`DoubleEndedIterator`":"2:7310:121","prim@char":"1:12030:421","str::split":"2:12200:21526"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RSplit","id":"2:43650:7744","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11857:7755","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:11857:7755","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11872:7756","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12180:21527":{"id":"2:12180:21527","crate_id":2,"name":"lines","span":null,"visibility":"public","docs":"An iterator over the lines of a string, as string slices.\n\nLines are split at line endings that are either newlines (`\\n`) or\nsequences of a carriage return followed by a line feed (`\\r\\n`).\n\nLine terminators are not included in the lines returned by the iterator.\n\nNote that any carriage return (`\\r`) not immediately followed by a\nline feed (`\\n`) does not split a line. These carriage returns are\nthereby included in the produced lines.\n\nThe final line ending is optional. A string that ends with a final line\nending will return the same lines as an otherwise identical string\nwithout a final line ending.\n\n# Examples\n\nBasic usage:\n\n```\nlet text = \"foo\\r\\nbar\\n\\nbaz\\r\";\nlet mut lines = text.lines();\n\nassert_eq!(Some(\"foo\"), lines.next());\nassert_eq!(Some(\"bar\"), lines.next());\nassert_eq!(Some(\"\"), lines.next());\n// Trailing carriage return is included in the last line\nassert_eq!(Some(\"baz\\r\"), lines.next());\n\nassert_eq!(None, lines.next());\n```\n\nThe final line does not require any ending:\n\n```\nlet text = \"foo\\nbar\\n\\r\\nbaz\";\nlet mut lines = text.lines();\n\nassert_eq!(Some(\"foo\"), lines.next());\nassert_eq!(Some(\"bar\"), lines.next());\nassert_eq!(Some(\"\"), lines.next());\nassert_eq!(Some(\"baz\"), lines.next());\n\nassert_eq!(None, lines.next());\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Lines","id":"2:43886:2215","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12246:28340":{"id":"2:12246:28340","crate_id":2,"name":"trim_right","span":null,"visibility":"public","docs":"Returns a string slice with trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`.\n\n# Text directionality\n\nA string is a sequence of bytes. 'Right' in this context means the last\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _left_ side, not the right.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \" Hello\\tworld\\t\";\n\nassert_eq!(\" Hello\\tworld\", s.trim_right());\n```\n\nDirectionality:\n\n```\nlet s = \"English  \";\nassert!(Some('h') == s.trim_right().chars().rev().next());\n\nlet s = \"עברית  \";\nassert!(Some('ת') == s.trim_right().chars().rev().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_end`\", suggestion =\n\"trim_end\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_end`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5528:21476":{"id":"5:5528:21476","crate_id":5,"name":"to_ascii_uppercase","span":null,"visibility":"public","docs":"Returns a copy of this string where each character is mapped to its\nASCII upper case equivalent.\n\nASCII letters 'a' to 'z' are mapped to 'A' to 'Z',\nbut non-ASCII letters are unchanged.\n\nTo uppercase the value in-place, use [`make_ascii_uppercase`].\n\nTo uppercase ASCII characters in addition to non-ASCII characters, use\n[`to_uppercase`].\n\n# Examples\n\n```\nlet s = \"Grüße, Jürgen ❤\";\n\nassert_eq!(\"GRüßE, JüRGEN ❤\", s.to_ascii_uppercase());\n```\n\n[`make_ascii_uppercase`]: str::make_ascii_uppercase\n[`to_uppercase`]: #method.to_uppercase","links":{"str::make_ascii_uppercase":"2:12273:21479"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use = \"to uppercase the value in-place, use `make_ascii_uppercase()`\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7449:224","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12253:21806":{"id":"2:12253:21806","crate_id":2,"name":"strip_prefix","span":null,"visibility":"public","docs":"Returns a string slice with the prefix removed.\n\nIf the string starts with the pattern `prefix`, returns substring after the prefix, wrapped\nin `Some`.  Unlike `trim_start_matches`, this method removes the prefix exactly once.\n\nIf the string does not start with `prefix`, returns `None`.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nassert_eq!(\"foo:bar\".strip_prefix(\"foo:\"), Some(\"bar\"));\nassert_eq!(\"foo:bar\".strip_prefix(\"bar\"), None);\nassert_eq!(\"foofoo\".strip_prefix(\"foo\"), Some(\"foo\"));\n```","links":{"prim@char":"1:12030:421","self::pattern":"2:11852:7759"},"attrs":["#[must_use =\n\"this returns the remaining substring as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["prefix",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:41671:181","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11857:7755","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5526:29009":{"id":"5:5526:29009","crate_id":5,"name":"into_string","span":null,"visibility":"public","docs":"Converts a [`Box<str>`] into a [`String`] without copying or allocating.\n\n# Examples\n\n```\nlet string = String::from(\"birthday gift\");\nlet boxed_str = string.clone().into_boxed_str();\n\nassert_eq!(boxed_str.into_string(), string);\n```","links":{"`Box<str>`":"5:276:1952","`String`":"5:7449:224"},"attrs":["#[must_use = \"`self` will be dropped if the result is not used\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"resolved_path":{"name":"Box","id":"5:276:1952","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}},{"type":{"resolved_path":{"name":"Global","id":"5:7182:2095","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}]],"output":{"resolved_path":{"name":"String","id":"5:7449:224","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12247:28341":{"id":"2:12247:28341","crate_id":2,"name":"trim_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes and suffixes that match a\npattern repeatedly removed.\n\nThe [pattern] can be a [`char`], a slice of [`char`]s, or a function\nor closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_matches('1'), \"foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_matches(char::is_numeric), \"foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_matches(x), \"foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1foo1barXX\".trim_matches(|c| c == '1' || c == 'X'), \"foo1bar\");\n```","links":{"prim@char":"1:12030:421","self::pattern":"2:11852:7759"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11857:7755","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:11857:7755","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"DoubleEndedSearcher","id":"2:11877:7754","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12236:28335":{"id":"2:12236:28335","crate_id":2,"name":"rmatch_indices","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within `self`,\nyielded in reverse order along with the index of the match.\n\nFor matches of `pat` within `self` that overlap, only the indices\ncorresponding to the last match are returned.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`match_indices`] method can be used.\n\n[`match_indices`]: str::match_indices\n\n# Examples\n\n```\nlet v: Vec<_> = \"abcXXXabcYYYabc\".rmatch_indices(\"abc\").collect();\nassert_eq!(v, [(12, \"abc\"), (6, \"abc\"), (0, \"abc\")]);\n\nlet v: Vec<_> = \"1abcabc2\".rmatch_indices(\"abc\").collect();\nassert_eq!(v, [(4, \"abc\"), (1, \"abc\")]);\n\nlet v: Vec<_> = \"ababa\".rmatch_indices(\"aba\").collect();\nassert_eq!(v, [(2, \"aba\")]); // only the last `aba`\n```","links":{"self::pattern":"2:11852:7759","`DoubleEndedIterator`":"2:7310:121","prim@char":"1:12030:421","str::match_indices":"2:12233:28334"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RMatchIndices","id":"2:43800:7775","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11857:7755","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:11857:7755","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11872:7756","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12275:28347":{"id":"2:12275:28347","crate_id":2,"name":"escape_debug","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_debug`].\n\nNote: only extended grapheme codepoints that begin the string will be\nescaped.\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"❤\\n!\".escape_debug() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"❤\\n!\".escape_debug());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"❤\\\\n!\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"❤\\n!\".escape_debug().to_string(), \"❤\\\\n!\");\n```","links":{"`char::escape_debug`":"2:4542:28347"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EscapeDebug","id":"2:43931:7770","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5509":{"id":"5:5509","crate_id":5,"name":null,"span":null,"visibility":"default","docs":"Methods for string slices.","links":{},"attrs":["#[cfg(not(test))]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"primitive":"str"},"items":["5:5510:29005","5:5511:8103","5:5514:29006","5:5517:29007","5:5525:29008","5:5526:29009","5:5527:2243","5:5528:21476","5:5529:21477"],"negative":false,"synthetic":false,"blanket_impl":null}}},"2:12162:315":{"id":"2:12162:315","crate_id":2,"name":"as_mut_ptr","span":null,"visibility":"public","docs":"Converts a mutable string slice to a raw pointer.\n\nAs string slices are a slice of bytes, the raw pointer points to a\n[`u8`]. This pointer will be pointing to the first byte of the string\nslice.\n\nIt is your responsibility to make sure that the string slice only gets\nmodified in a way that it remains valid UTF-8.","links":{"`u8`":"1:12047:1523"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"raw_pointer":{"mutable":true,"type":{"primitive":"u8"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12271:24534":{"id":"2:12271:24534","crate_id":2,"name":"as_ascii","span":null,"visibility":"public","docs":"If this string slice [`is_ascii`](Self::is_ascii), returns it as a slice\nof [ASCII characters](`ascii::Char`), otherwise returns `None`.","links":{"`ascii::Char`":"2:39702:24670","Self::is_ascii":"2:12270:21474"},"attrs":["#[unstable(feature = \"ascii_char\", issue = \"110998\")]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Option","id":"2:41671:181","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"resolved_path":{"name":"AsciiChar","id":"2:39702:24670","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12181:28328":{"id":"2:12181:28328","crate_id":2,"name":"lines_any","span":null,"visibility":"public","docs":"An iterator over the lines of a string.","links":{},"attrs":["#[deprecated(since = \"1.4.0\", note = \"use lines() instead now\")]"],"deprecation":{"since":"1.4.0","note":"use lines() instead now"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"LinesAny","id":"2:43896:7773","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5527:2243":{"id":"5:5527:2243","crate_id":5,"name":"repeat","span":null,"visibility":"public","docs":"Creates a new [`String`] by repeating a string `n` times.\n\n# Panics\n\nThis function will panic if the capacity would overflow.\n\n# Examples\n\nBasic usage:\n\n```\nassert_eq!(\"abc\".repeat(4), String::from(\"abcabcabcabc\"));\n```\n\nA panic upon overflow:\n\n```should_panic\n// this will panic at runtime\nlet huge = \"0123456789abcdef\".repeat(usize::MAX);\n```","links":{"`String`":"5:7449:224"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["n",{"primitive":"usize"}]],"output":{"resolved_path":{"name":"String","id":"5:7449:224","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5525:29008":{"id":"5:5525:29008","crate_id":5,"name":"to_uppercase","span":null,"visibility":"public","docs":"Returns the uppercase equivalent of this string slice, as a new [`String`].\n\n'Uppercase' is defined according to the terms of the Unicode Derived Core Property\n`Uppercase`.\n\nSince some characters can expand into multiple characters when changing\nthe case, this function returns a [`String`] instead of modifying the\nparameter in-place.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"hello\";\n\nassert_eq!(\"HELLO\", s.to_uppercase());\n```\n\nScripts without case are not changed:\n\n```\nlet new_year = \"农历新年\";\n\nassert_eq!(new_year, new_year.to_uppercase());\n```\n\nOne character can become multiple:\n```\nlet s = \"tschüß\";\n\nassert_eq!(\"TSCHÜSS\", s.to_uppercase());\n```","links":{"`String`":"5:7449:224"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the uppercase string as a new String, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7449:224","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12163:23376":{"id":"2:12163:23376","crate_id":2,"name":"get","span":null,"visibility":"public","docs":"Returns a subslice of `str`.\n\nThis is the non-panicking alternative to indexing the `str`. Returns\n[`None`] whenever equivalent indexing operation would panic.\n\n# Examples\n\n```\nlet v = String::from(\"🗻∈🌏\");\n\nassert_eq!(Some(\"🗻\"), v.get(0..4));\n\n// indices not on UTF-8 sequence boundaries\nassert!(v.get(1..).is_none());\nassert!(v.get(..8).is_none());\n\n// out of bounds\nassert!(v.get(..42).is_none());\n```","links":{"`None`":"2:41673:179"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"resolved_path":{"name":"Option","id":"2:41671:181","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"2:9946:222","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"2:9946:222","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12215:23414":{"id":"2:12215:23414","crate_id":2,"name":"splitn","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by a\npattern, restricted to returning at most `n` items.\n\nIf `n` substrings are returned, the last substring (the `n`th substring)\nwill contain the remainder of the string.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will not be double ended, because it is\nnot efficient to support.\n\nIf the pattern allows a reverse search, the [`rsplitn`] method can be\nused.\n\n[`rsplitn`]: str::rsplitn\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lambda\".splitn(3, ' ').collect();\nassert_eq!(v, [\"Mary\", \"had\", \"a little lambda\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".splitn(3, \"X\").collect();\nassert_eq!(v, [\"lion\", \"\", \"tigerXleopard\"]);\n\nlet v: Vec<&str> = \"abcXdef\".splitn(1, 'X').collect();\nassert_eq!(v, [\"abcXdef\"]);\n\nlet v: Vec<&str> = \"\".splitn(1, 'X').collect();\nassert_eq!(v, [\"\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".splitn(2, |c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"abc\", \"defXghi\"]);\n```","links":{"prim@char":"1:12030:421","self::pattern":"2:11852:7759","str::rsplitn":"2:12218:23416"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["n",{"primitive":"usize"}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"SplitN","id":"2:43736:7748","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11857:7755","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12265:28345":{"id":"2:12265:28345","crate_id":2,"name":"trim_right_matches","span":null,"visibility":"public","docs":"Returns a string slice with all suffixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. 'Right' in this context means the last\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _left_ side, not the right.\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_right_matches('1'), \"11foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_right_matches(char::is_numeric), \"123foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_right_matches(x), \"12foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1fooX\".trim_right_matches(|c| c == '1' || c == 'X'), \"1foo\");\n```","links":{"prim@char":"1:12030:421","self::pattern":"2:11852:7759"},"attrs":["#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_end_matches`\",\nsuggestion = \"trim_end_matches\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_end_matches`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11857:7755","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:11857:7755","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11872:7756","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5529:21477":{"id":"5:5529:21477","crate_id":5,"name":"to_ascii_lowercase","span":null,"visibility":"public","docs":"Returns a copy of this string where each character is mapped to its\nASCII lower case equivalent.\n\nASCII letters 'A' to 'Z' are mapped to 'a' to 'z',\nbut non-ASCII letters are unchanged.\n\nTo lowercase the value in-place, use [`make_ascii_lowercase`].\n\nTo lowercase ASCII characters in addition to non-ASCII characters, use\n[`to_lowercase`].\n\n# Examples\n\n```\nlet s = \"Grüße, Jürgen ❤\";\n\nassert_eq!(\"grüße, jürgen ❤\", s.to_ascii_lowercase());\n```\n\n[`make_ascii_lowercase`]: str::make_ascii_lowercase\n[`to_lowercase`]: #method.to_lowercase","links":{"str::make_ascii_lowercase":"2:12274:21480"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use = \"to lowercase the value in-place, use `make_ascii_lowercase()`\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7449:224","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12259:28343":{"id":"2:12259:28343","crate_id":2,"name":"trim_end_matches","span":null,"visibility":"public","docs":"Returns a string slice with all suffixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. `end` in this context means the last\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be right side, and for right-to-left languages like\nArabic or Hebrew, this will be the left side.\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_end_matches('1'), \"11foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_end_matches(char::is_numeric), \"123foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_end_matches(x), \"12foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1fooX\".trim_end_matches(|c| c == '1' || c == 'X'), \"1foo\");\n```","links":{"prim@char":"1:12030:421","self::pattern":"2:11852:7759"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11857:7755","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:11857:7755","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11872:7756","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5517:29007":{"id":"5:5517:29007","crate_id":5,"name":"to_lowercase","span":null,"visibility":"public","docs":"Returns the lowercase equivalent of this string slice, as a new [`String`].\n\n'Lowercase' is defined according to the terms of the Unicode Derived Core Property\n`Lowercase`.\n\nSince some characters can expand into multiple characters when changing\nthe case, this function returns a [`String`] instead of modifying the\nparameter in-place.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"HELLO\";\n\nassert_eq!(\"hello\", s.to_lowercase());\n```\n\nA tricky example, with sigma:\n\n```\nlet sigma = \"Σ\";\n\nassert_eq!(\"σ\", sigma.to_lowercase());\n\n// but at the end of a word, it's ς, not σ:\nlet odysseus = \"ὈΔΥΣΣΕΎΣ\";\n\nassert_eq!(\"ὀδυσσεύς\", odysseus.to_lowercase());\n```\n\nLanguages without case are not changed:\n\n```\nlet new_year = \"农历新年\";\n\nassert_eq!(new_year, new_year.to_lowercase());\n```","links":{"`String`":"5:7449:224"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the lowercase string as a new String, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7449:224","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12167:23378":{"id":"2:12167:23378","crate_id":2,"name":"get_unchecked","span":null,"visibility":"public","docs":"Returns an unchecked subslice of `str`.\n\nThis is the unchecked alternative to indexing the `str`.\n\n# Safety\n\nCallers of this function are responsible that these preconditions are\nsatisfied:\n\n* The starting index must not exceed the ending index;\n* Indexes must be within bounds of the original slice;\n* Indexes must lie on UTF-8 sequence boundaries.\n\nFailing that, the returned string slice may reference invalid memory or\nviolate the invariants communicated by the `str` type.\n\n# Examples\n\n```\nlet v = \"🗻∈🌏\";\nunsafe {\n    assert_eq!(\"🗻\", v.get_unchecked(0..4));\n    assert_eq!(\"∈\", v.get_unchecked(4..7));\n    assert_eq!(\"🌏\", v.get_unchecked(7..11));\n}\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"2:9946:222","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"2:9946:222","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"2:12189:23420":{"id":"2:12189:23420","crate_id":2,"name":"ends_with","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a suffix of this\nstring slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.ends_with(\"anas\"));\nassert!(!bananas.ends_with(\"nana\"));\n```","links":{"prim@char":"1:12030:421","self::pattern":"2:11852:7759"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11857:7755","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:11857:7755","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11872:7756","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12153:28322":{"id":"2:12153:28322","crate_id":2,"name":"is_char_boundary","span":null,"visibility":"public","docs":"Checks that `index`-th byte is the first byte in a UTF-8 code point\nsequence or the end of the string.\n\nThe start and end of the string (when `index == self.len()`) are\nconsidered to be boundaries.\n\nReturns `false` if `index` is greater than `self.len()`.\n\n# Examples\n\n```\nlet s = \"Löwe 老虎 Léopard\";\nassert!(s.is_char_boundary(0));\n// start of `老`\nassert!(s.is_char_boundary(6));\nassert!(s.is_char_boundary(s.len()));\n\n// second byte of `ö`\nassert!(!s.is_char_boundary(2));\n\n// third byte of `老`\nassert!(!s.is_char_boundary(8));\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["index",{"primitive":"usize"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12196:19656":{"id":"2:12196:19656","crate_id":2,"name":"rfind","span":null,"visibility":"public","docs":"Returns the byte index for the first character of the last match of the pattern in\nthis string slice.\n\nReturns [`None`] if the pattern doesn't match.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nlet s = \"Löwe 老虎 Léopard Gepardi\";\n\nassert_eq!(s.rfind('L'), Some(13));\nassert_eq!(s.rfind('é'), Some(14));\nassert_eq!(s.rfind(\"pard\"), Some(24));\n```\n\nMore complex patterns with closures:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\n\nassert_eq!(s.rfind(char::is_whitespace), Some(12));\nassert_eq!(s.rfind(char::is_lowercase), Some(20));\n```\n\nNot finding the pattern:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\nlet x: &[_] = &['1', '2'];\n\nassert_eq!(s.rfind(x), None);\n```","links":{"`None`":"2:41673:179","prim@char":"1:12030:421","self::pattern":"2:11852:7759"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:41671:181","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11857:7755","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:11857:7755","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11872:7756","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12268:28346":{"id":"2:12268:28346","crate_id":2,"name":"parse","span":null,"visibility":"public","docs":"Parses this string slice into another type.\n\nBecause `parse` is so general, it can cause problems with type\ninference. As such, `parse` is one of the few times you'll see\nthe syntax affectionately known as the 'turbofish': `::<>`. This\nhelps the inference algorithm understand specifically which type\nyou're trying to parse into.\n\n`parse` can parse into any type that implements the [`FromStr`] trait.\n\n# Errors\n\nWill return [`Err`] if it's not possible to parse this string slice into\nthe desired type.\n\n[`Err`]: FromStr::Err\n\n# Examples\n\nBasic usage\n\n```\nlet four: u32 = \"4\".parse().unwrap();\n\nassert_eq!(4, four);\n```\n\nUsing the 'turbofish' instead of annotating `four`:\n\n```\nlet four = \"4\".parse::<u32>();\n\nassert_eq!(Ok(4), four);\n```\n\nFailing to parse:\n\n```\nlet nope = \"j\".parse::<u32>();\n\nassert!(nope.is_err());\n```","links":{"FromStr::Err":"2:11813:127","`FromStr`":"2:11812:2386"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Result","id":"2:41815:210","args":{"angle_bracketed":{"args":[{"type":{"generic":"F"}},{"type":{"qualified_path":{"name":"Err","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"F"},"trait":{"name":"FromStr","id":"2:11812:2386","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"F"},"bounds":[{"trait_bound":{"trait":{"name":"FromStr","id":"2:11812:2386","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12200:21526":{"id":"2:12200:21526","crate_id":2,"name":"split","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by\ncharacters matched by a pattern.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rsplit`] method can be used.\n\n[`rsplit`]: str::rsplit\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".split(' ').collect();\nassert_eq!(v, [\"Mary\", \"had\", \"a\", \"little\", \"lamb\"]);\n\nlet v: Vec<&str> = \"\".split('X').collect();\nassert_eq!(v, [\"\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".split('X').collect();\nassert_eq!(v, [\"lion\", \"\", \"tiger\", \"leopard\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".split(\"::\").collect();\nassert_eq!(v, [\"lion\", \"tiger\", \"leopard\"]);\n\nlet v: Vec<&str> = \"abc1def2ghi\".split(char::is_numeric).collect();\nassert_eq!(v, [\"abc\", \"def\", \"ghi\"]);\n\nlet v: Vec<&str> = \"lionXtigerXleopard\".split(char::is_uppercase).collect();\nassert_eq!(v, [\"lion\", \"tiger\", \"leopard\"]);\n```\n\nIf the pattern is a slice of chars, split on each occurrence of any of the characters:\n\n```\nlet v: Vec<&str> = \"2020-11-03 23:59\".split(&['-', ' ', ':', '@'][..]).collect();\nassert_eq!(v, [\"2020\", \"11\", \"03\", \"23\", \"59\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".split(|c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"abc\", \"def\", \"ghi\"]);\n```\n\nIf a string contains multiple contiguous separators, you will end up\nwith empty strings in the output:\n\n```\nlet x = \"||||a||b|c\".to_string();\nlet d: Vec<_> = x.split('|').collect();\n\nassert_eq!(d, &[\"\", \"\", \"\", \"\", \"a\", \"\", \"b\", \"c\"]);\n```\n\nContiguous separators are separated by the empty string.\n\n```\nlet x = \"(///)\".to_string();\nlet d: Vec<_> = x.split('/').collect();\n\nassert_eq!(d, &[\"(\", \"\", \"\", \")\"]);\n```\n\nSeparators at the start or end of a string are neighbored\nby empty strings.\n\n```\nlet d: Vec<_> = \"010\".split(\"0\").collect();\nassert_eq!(d, &[\"\", \"1\", \"\"]);\n```\n\nWhen the empty string is used as a separator, it separates\nevery character in the string, along with the beginning\nand end of the string.\n\n```\nlet f: Vec<_> = \"rust\".split(\"\").collect();\nassert_eq!(f, &[\"\", \"r\", \"u\", \"s\", \"t\", \"\"]);\n```\n\nContiguous separators can lead to possibly surprising behavior\nwhen whitespace is used as the separator. This code is correct:\n\n```\nlet x = \"    a  b c\".to_string();\nlet d: Vec<_> = x.split(' ').collect();\n\nassert_eq!(d, &[\"\", \"\", \"\", \"\", \"a\", \"\", \"b\", \"c\"]);\n```\n\nIt does _not_ give you:\n\n```,ignore\nassert_eq!(d, &[\"a\", \"b\", \"c\"]);\n```\n\nUse [`split_whitespace`] for this behavior.\n\n[`split_whitespace`]: str::split_whitespace","links":{"self::pattern":"2:11852:7759","`DoubleEndedIterator`":"2:7310:121","prim@char":"1:12030:421","str::split_whitespace":"2:12178:25756","str::rsplit":"2:12206:23412"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Split","id":"2:43632:2219","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11857:7755","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12239:28336":{"id":"2:12239:28336","crate_id":2,"name":"trim","span":null,"visibility":"public","docs":"Returns a string slice with leading and trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Examples\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\n\nassert_eq!(\"Hello\\tworld\", s.trim());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a slice, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_trim\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12243:28338":{"id":"2:12243:28338","crate_id":2,"name":"trim_end","span":null,"visibility":"public","docs":"Returns a string slice with trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Text directionality\n\nA string is a sequence of bytes. `end` in this context means the last\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be right side, and for right-to-left languages like\nArabic or Hebrew, this will be the left side.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\nassert_eq!(\"\\n Hello\\tworld\", s.trim_end());\n```\n\nDirectionality:\n\n```\nlet s = \"  English  \";\nassert!(Some('h') == s.trim_end().chars().rev().next());\n\nlet s = \"  עברית  \";\nassert!(Some('ת') == s.trim_end().chars().rev().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_trim_end\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12172:28327":{"id":"2:12172:28327","crate_id":2,"name":"slice_mut_unchecked","span":null,"visibility":"public","docs":"Creates a string slice from another string slice, bypassing safety\nchecks.\nThis is generally not recommended, use with caution! For a safe\nalternative see [`str`] and [`IndexMut`].\n\n[`IndexMut`]: crate::ops::IndexMut\n\nThis new slice goes from `begin` to `end`, including `begin` but\nexcluding `end`.\n\nTo get an immutable string slice instead, see the\n[`slice_unchecked`] method.\n\n[`slice_unchecked`]: str::slice_unchecked\n\n# Safety\n\nCallers of this function are responsible that three preconditions are\nsatisfied:\n\n* `begin` must not exceed `end`.\n* `begin` and `end` must be byte positions within the string slice.\n* `begin` and `end` must lie on UTF-8 sequence boundaries.","links":{"`str`":"1:12036:1420","crate::ops::IndexMut":"2:2988:2113","str::slice_unchecked":"2:12171:28326"},"attrs":["#[deprecated(since = \"1.29.0\", note =\n\"use `get_unchecked_mut(begin..end)` instead\")]"],"deprecation":{"since":"1.29.0","note":"use `get_unchecked_mut(begin..end)` instead"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["begin",{"primitive":"usize"}],["end",{"primitive":"usize"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"2:12154:28323":{"id":"2:12154:28323","crate_id":2,"name":"floor_char_boundary","span":null,"visibility":"public","docs":"Finds the closest `x` not exceeding `index` where `is_char_boundary(x)` is `true`.\n\nThis method can help you truncate a string so that it's still valid UTF-8, but doesn't\nexceed a given number of bytes. Note that this is done purely at the character level\nand can still visually split graphemes, even though the underlying characters aren't\nsplit. For example, the emoji 🧑‍🔬 (scientist) could be split so that the string only\nincludes 🧑 (person) instead.\n\n# Examples\n\n```\n#![feature(round_char_boundary)]\nlet s = \"❤️🧡💛💚💙💜\";\nassert_eq!(s.len(), 26);\nassert!(!s.is_char_boundary(13));\n\nlet closest = s.floor_char_boundary(13);\nassert_eq!(closest, 10);\nassert_eq!(&s[..closest], \"❤️🧡\");\n```","links":{},"attrs":["#[unstable(feature = \"round_char_boundary\", issue = \"93743\")]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["index",{"primitive":"usize"}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12230:28333":{"id":"2:12230:28333","crate_id":2,"name":"rmatches","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within this string slice,\nyielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`matches`] method can be used.\n\n[`matches`]: str::matches\n\n# Examples\n\n```\nlet v: Vec<&str> = \"abcXXXabcYYYabc\".rmatches(\"abc\").collect();\nassert_eq!(v, [\"abc\", \"abc\", \"abc\"]);\n\nlet v: Vec<&str> = \"1abc2abc3\".rmatches(char::is_numeric).collect();\nassert_eq!(v, [\"3\", \"2\", \"1\"]);\n```","links":{"self::pattern":"2:11852:7759","`DoubleEndedIterator`":"2:7310:121","prim@char":"1:12030:421","str::matches":"2:12227:1921"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RMatches","id":"2:43854:7777","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11857:7755","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:11857:7755","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11872:7756","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12270:21474":{"id":"2:12270:21474","crate_id":2,"name":"is_ascii","span":null,"visibility":"public","docs":"Checks if all characters in this string are within the ASCII range.\n\n# Examples\n\n```\nlet ascii = \"hello!\\n\";\nlet non_ascii = \"Grüße, Jürgen ❤\";\n\nassert!(ascii.is_ascii());\nassert!(!non_ascii.is_ascii());\n```","links":{},"attrs":["#[rustc_const_unstable(feature = \"const_slice_is_ascii\", issue = \"111090\")]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5510:29005":{"id":"5:5510:29005","crate_id":5,"name":"into_boxed_bytes","span":null,"visibility":"public","docs":"Converts a `Box<str>` into a `Box<[u8]>` without copying or allocating.\n\n# Examples\n\n```\nlet s = \"this is a string\";\nlet boxed_str = s.to_owned().into_boxed_str();\nlet boxed_bytes = boxed_str.into_boxed_bytes();\nassert_eq!(*boxed_bytes, *s.as_bytes());\n```","links":{},"attrs":["#[must_use = \"`self` will be dropped if the result is not used\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"resolved_path":{"name":"Box","id":"5:276:1952","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}},{"type":{"resolved_path":{"name":"Global","id":"5:7182:2095","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}]],"output":{"resolved_path":{"name":"Box","id":"5:276:1952","args":{"angle_bracketed":{"args":[{"type":{"slice":{"primitive":"u8"}}},{"type":{"resolved_path":{"name":"Global","id":"5:7182:2095","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12227:1921":{"id":"2:12227:1921","crate_id":2,"name":"matches","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within the given string\nslice.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rmatches`] method can be used.\n\n[`rmatches`]: str::rmatches\n\n# Examples\n\n```\nlet v: Vec<&str> = \"abcXXXabcYYYabc\".matches(\"abc\").collect();\nassert_eq!(v, [\"abc\", \"abc\", \"abc\"]);\n\nlet v: Vec<&str> = \"1abc2abc3\".matches(char::is_numeric).collect();\nassert_eq!(v, [\"1\", \"2\", \"3\"]);\n```","links":{"self::pattern":"2:11852:7759","`DoubleEndedIterator`":"2:7310:121","prim@char":"1:12030:421","str::rmatches":"2:12230:28333"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Matches","id":"2:43836:7776","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11857:7755","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:0:1697":{"id":"0:0:1697","crate_id":0,"name":"winapi","span":{"filename":"src/lib.rs","begin":[6,0],"end":[71,1]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"module":{"is_crate":true,"items":[],"is_stripped":false}}},"2:12171:28326":{"id":"2:12171:28326","crate_id":2,"name":"slice_unchecked","span":null,"visibility":"public","docs":"Creates a string slice from another string slice, bypassing safety\nchecks.\n\nThis is generally not recommended, use with caution! For a safe\nalternative see [`str`] and [`Index`].\n\n[`Index`]: crate::ops::Index\n\nThis new slice goes from `begin` to `end`, including `begin` but\nexcluding `end`.\n\nTo get a mutable string slice instead, see the\n[`slice_mut_unchecked`] method.\n\n[`slice_mut_unchecked`]: str::slice_mut_unchecked\n\n# Safety\n\nCallers of this function are responsible that three preconditions are\nsatisfied:\n\n* `begin` must not exceed `end`.\n* `begin` and `end` must be byte positions within the string slice.\n* `begin` and `end` must lie on UTF-8 sequence boundaries.\n\n# Examples\n\n```\nlet s = \"Löwe 老虎 Léopard\";\n\nunsafe {\n    assert_eq!(\"Löwe 老虎 Léopard\", s.slice_unchecked(0, 21));\n}\n\nlet s = \"Hello, world!\";\n\nunsafe {\n    assert_eq!(\"world\", s.slice_unchecked(7, 12));\n}\n```","links":{"`str`":"1:12036:1420","str::slice_mut_unchecked":"2:12172:28327","crate::ops::Index":"2:2984:2112"},"attrs":["#[deprecated(since = \"1.29.0\", note =\n\"use `get_unchecked(begin..end)` instead\")]","#[must_use]"],"deprecation":{"since":"1.29.0","note":"use `get_unchecked(begin..end)` instead"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["begin",{"primitive":"usize"}],["end",{"primitive":"usize"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"2:12175:25746":{"id":"2:12175:25746","crate_id":2,"name":"chars","span":null,"visibility":"public","docs":"Returns an iterator over the [`char`]s of a string slice.\n\nAs a string slice consists of valid UTF-8, we can iterate through a\nstring slice by [`char`]. This method returns such an iterator.\n\nIt's important to remember that [`char`] represents a Unicode Scalar\nValue, and might not match your idea of what a 'character' is. Iteration\nover grapheme clusters may be what you actually want. This functionality\nis not provided by Rust's standard library, check crates.io instead.\n\n# Examples\n\nBasic usage:\n\n```\nlet word = \"goodbye\";\n\nlet count = word.chars().count();\nassert_eq!(7, count);\n\nlet mut chars = word.chars();\n\nassert_eq!(Some('g'), chars.next());\nassert_eq!(Some('o'), chars.next());\nassert_eq!(Some('o'), chars.next());\nassert_eq!(Some('d'), chars.next());\nassert_eq!(Some('b'), chars.next());\nassert_eq!(Some('y'), chars.next());\nassert_eq!(Some('e'), chars.next());\n\nassert_eq!(None, chars.next());\n```\n\nRemember, [`char`]s might not match your intuition about characters:\n\n[`char`]: prim@char\n\n```\nlet y = \"y̆\";\n\nlet mut chars = y.chars();\n\nassert_eq!(Some('y'), chars.next()); // not 'y̆'\nassert_eq!(Some('\\u{0306}'), chars.next());\n\nassert_eq!(None, chars.next());\n```","links":{"prim@char":"1:12030:421"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Chars","id":"2:43602:7766","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12177:21450":{"id":"2:12177:21450","crate_id":2,"name":"bytes","span":null,"visibility":"public","docs":"An iterator over the bytes of a string slice.\n\nAs a string slice consists of a sequence of bytes, we can iterate\nthrough a string slice by byte. This method returns such an iterator.\n\n# Examples\n\n```\nlet mut bytes = \"bors\".bytes();\n\nassert_eq!(Some(b'b'), bytes.next());\nassert_eq!(Some(b'o'), bytes.next());\nassert_eq!(Some(b'r'), bytes.next());\nassert_eq!(Some(b's'), bytes.next());\n\nassert_eq!(None, bytes.next());\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Bytes","id":"2:43618:2218","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12218:23416":{"id":"2:12218:23416","crate_id":2,"name":"rsplitn","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by a\npattern, starting from the end of the string, restricted to returning\nat most `n` items.\n\nIf `n` substrings are returned, the last substring (the `n`th substring)\nwill contain the remainder of the string.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will not be double ended, because it is not\nefficient to support.\n\nFor splitting from the front, the [`splitn`] method can be used.\n\n[`splitn`]: str::splitn\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".rsplitn(3, ' ').collect();\nassert_eq!(v, [\"lamb\", \"little\", \"Mary had a\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".rsplitn(3, 'X').collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"lionX\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".rsplitn(2, \"::\").collect();\nassert_eq!(v, [\"leopard\", \"lion::tiger\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".rsplitn(2, |c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"ghi\", \"abc1def\"]);\n```","links":{"prim@char":"1:12030:421","str::splitn":"2:12215:23414","self::pattern":"2:11852:7759"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["n",{"primitive":"usize"}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RSplitN","id":"2:43754:7746","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11857:7755","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:11857:7755","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11872:7756","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12272:21478":{"id":"2:12272:21478","crate_id":2,"name":"eq_ignore_ascii_case","span":null,"visibility":"public","docs":"Checks that two strings are an ASCII case-insensitive match.\n\nSame as `to_ascii_lowercase(a) == to_ascii_lowercase(b)`,\nbut without allocating and copying temporaries.\n\n# Examples\n\n```\nassert!(\"Ferris\".eq_ignore_ascii_case(\"FERRIS\"));\nassert!(\"Ferrös\".eq_ignore_ascii_case(\"FERRöS\"));\nassert!(!\"Ferrös\".eq_ignore_ascii_case(\"FERRÖS\"));\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["other",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12178:25756":{"id":"2:12178:25756","crate_id":2,"name":"split_whitespace","span":null,"visibility":"public","docs":"Splits a string slice by whitespace.\n\nThe iterator returned will return string slices that are sub-slices of\nthe original string slice, separated by any amount of whitespace.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`. If you only want to split on ASCII whitespace\ninstead, use [`split_ascii_whitespace`].\n\n[`split_ascii_whitespace`]: str::split_ascii_whitespace\n\n# Examples\n\nBasic usage:\n\n```\nlet mut iter = \"A few words\".split_whitespace();\n\nassert_eq!(Some(\"A\"), iter.next());\nassert_eq!(Some(\"few\"), iter.next());\nassert_eq!(Some(\"words\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nAll kinds of whitespace are considered:\n\n```\nlet mut iter = \" Mary   had\\ta\\u{2009}little  \\n\\t lamb\".split_whitespace();\nassert_eq!(Some(\"Mary\"), iter.next());\nassert_eq!(Some(\"had\"), iter.next());\nassert_eq!(Some(\"a\"), iter.next());\nassert_eq!(Some(\"little\"), iter.next());\nassert_eq!(Some(\"lamb\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nIf the string is empty or all whitespace, the iterator yields no string slices:\n```\nassert_eq!(\"\".split_whitespace().next(), None);\nassert_eq!(\"   \".split_whitespace().next(), None);\n```","links":{"str::split_ascii_whitespace":"2:12179:25730"},"attrs":["#[must_use =\n\"this returns the split string as an iterator, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_split_whitespace\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"SplitWhitespace","id":"2:43906:7762","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12277:2030":{"id":"2:12277:2030","crate_id":2,"name":"escape_default","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_default`].\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"❤\\n!\".escape_default() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"❤\\n!\".escape_default());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"\\\\u{{2764}}\\\\n!\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"❤\\n!\".escape_default().to_string(), \"\\\\u{2764}\\\\n!\");\n```","links":{"`char::escape_default`":"2:4543:2030"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EscapeDefault","id":"2:43940:2031","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12160:28325":{"id":"2:12160:28325","crate_id":2,"name":"as_bytes_mut","span":null,"visibility":"public","docs":"Converts a mutable string slice to a mutable byte slice.\n\n# Safety\n\nThe caller must ensure that the content of the slice is valid UTF-8\nbefore the borrow ends and the underlying `str` is used.\n\nUse of a `str` whose contents are not valid UTF-8 is undefined behavior.\n\n# Examples\n\nBasic usage:\n\n```\nlet mut s = String::from(\"Hello\");\nlet bytes = unsafe { s.as_bytes_mut() };\n\nassert_eq!(b\"Hello\", bytes);\n```\n\nMutability:\n\n```\nlet mut s = String::from(\"🗻∈🌏\");\n\nunsafe {\n    let bytes = s.as_bytes_mut();\n\n    bytes[0] = 0xF0;\n    bytes[1] = 0x9F;\n    bytes[2] = 0x8D;\n    bytes[3] = 0x94;\n}\n\nassert_eq!(\"🍔∈🌏\", s);\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"slice":{"primitive":"u8"}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"2:12152:21912":{"id":"2:12152:21912","crate_id":2,"name":"is_empty","span":null,"visibility":"public","docs":"Returns `true` if `self` has a length of zero bytes.\n\n# Examples\n\n```\nlet s = \"\";\nassert!(s.is_empty());\n\nlet s = \"not empty\";\nassert!(!s.is_empty());\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12173:23401":{"id":"2:12173:23401","crate_id":2,"name":"split_at","span":null,"visibility":"public","docs":"Divide one string slice into two at an index.\n\nThe argument, `mid`, should be a byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get mutable string slices instead, see the [`split_at_mut`]\nmethod.\n\n[`split_at_mut`]: str::split_at_mut\n\n# Panics\n\nPanics if `mid` is not on a UTF-8 code point boundary, or if it is\npast the end of the last code point of the string slice.\n\n# Examples\n\n```\nlet s = \"Per Martin-Löf\";\n\nlet (first, last) = s.split_at(3);\n\nassert_eq!(\"Per\", first);\nassert_eq!(\" Martin-Löf\", last);\n```","links":{"str::split_at_mut":"2:12174:23402"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["mid",{"primitive":"usize"}]],"output":{"tuple":[{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12192:19655":{"id":"2:12192:19655","crate_id":2,"name":"find","span":null,"visibility":"public","docs":"Returns the byte index of the first character of this string slice that\nmatches the pattern.\n\nReturns [`None`] if the pattern doesn't match.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nlet s = \"Löwe 老虎 Léopard Gepardi\";\n\nassert_eq!(s.find('L'), Some(0));\nassert_eq!(s.find('é'), Some(14));\nassert_eq!(s.find(\"pard\"), Some(17));\n```\n\nMore complex patterns using point-free style and closures:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\n\nassert_eq!(s.find(char::is_whitespace), Some(5));\nassert_eq!(s.find(char::is_lowercase), Some(1));\nassert_eq!(s.find(|c: char| c.is_whitespace() || c.is_lowercase()), Some(1));\nassert_eq!(s.find(|c: char| (c < 'o') && (c > 'a')), Some(4));\n```\n\nNot finding the pattern:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\nlet x: &[_] = &['1', '2'];\n\nassert_eq!(s.find(x), None);\n```","links":{"`None`":"2:41673:179","prim@char":"1:12030:421","self::pattern":"2:11852:7759"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:41671:181","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11857:7755","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5511:8103":{"id":"5:5511:8103","crate_id":5,"name":"replace","span":null,"visibility":"public","docs":"Replaces all matches of a pattern with another string.\n\n`replace` creates a new [`String`], and copies the data from this string slice into it.\nWhile doing so, it attempts to find matches of a pattern. If it finds any, it\nreplaces them with the replacement string slice.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"this is old\";\n\nassert_eq!(\"this is new\", s.replace(\"old\", \"new\"));\nassert_eq!(\"than an old\", s.replace(\"is\", \"an\"));\n```\n\nWhen the pattern doesn't match, it returns this string slice as [`String`]:\n\n```\nlet s = \"this is old\";\nassert_eq!(s, s.replace(\"cookie monster\", \"little lamb\"));\n```","links":{"`String`":"5:7449:224"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the replaced string as a new allocation, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["from",{"generic":"P"}],["to",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7449:224","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11857:7755","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12274:21480":{"id":"2:12274:21480","crate_id":2,"name":"make_ascii_lowercase","span":null,"visibility":"public","docs":"Converts this string to its ASCII lower case equivalent in-place.\n\nASCII letters 'A' to 'Z' are mapped to 'a' to 'z',\nbut non-ASCII letters are unchanged.\n\nTo return a new lowercased value without modifying the existing one, use\n[`to_ascii_lowercase()`].\n\n[`to_ascii_lowercase()`]: #method.to_ascii_lowercase\n\n# Examples\n\n```\nlet mut s = String::from(\"GRÜßE, JÜRGEN ❤\");\n\ns.make_ascii_lowercase();\n\nassert_eq!(\"grÜße, jÜrgen ❤\", s);\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5514:29006":{"id":"5:5514:29006","crate_id":5,"name":"replacen","span":null,"visibility":"public","docs":"Replaces first N matches of a pattern with another string.\n\n`replacen` creates a new [`String`], and copies the data from this string slice into it.\nWhile doing so, it attempts to find matches of a pattern. If it finds any, it\nreplaces them with the replacement string slice at most `count` times.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"foo foo 123 foo\";\nassert_eq!(\"new new 123 foo\", s.replacen(\"foo\", \"new\", 2));\nassert_eq!(\"faa fao 123 foo\", s.replacen('o', \"a\", 3));\nassert_eq!(\"foo foo new23 foo\", s.replacen(char::is_numeric, \"new\", 1));\n```\n\nWhen the pattern doesn't match, it returns this string slice as [`String`]:\n\n```\nlet s = \"this is old\";\nassert_eq!(s, s.replacen(\"cookie monster\", \"little lamb\", 10));\n```","links":{"`String`":"5:7449:224"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the replaced string as a new allocation, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}],["to",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}],["count",{"primitive":"usize"}]],"output":{"resolved_path":{"name":"String","id":"5:7449:224","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11857:7755","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}}},"paths":{"6:4380:12336":{"crate_id":6,"path":["libc","unix","linux_like","linux","packet_mreq"],"kind":"struct"},"1:5629:2436":{"crate_id":1,"path":["std","sync","mpsc","SyncSender"],"kind":"struct"},"6:6850:13490":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user_fpregs_struct"],"kind":"struct"},"2:2166:8145":{"crate_id":2,"path":["core","ptr","from_exposed_addr"],"kind":"function"},"2:39455:2049":{"crate_id":2,"path":["core","ops","range","Bound"],"kind":"enum"},"17:14026:19604":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation64V2"],"kind":"struct"},"2:41671:181":{"crate_id":2,"path":["core","option","Option"],"kind":"enum"},"1:8910:2442":{"crate_id":1,"path":["std","sync","mpsc","TryRecvError"],"kind":"enum"},"11:365:30131":{"crate_id":11,"path":["hashbrown","raw","RawDrain"],"kind":"struct"},"6:4944:12396":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_authinfo"],"kind":"struct"},"5:4234:2057":{"crate_id":5,"path":["alloc","collections","vec_deque","iter","Iter"],"kind":"struct"},"5:6769:7823":{"crate_id":5,"path":["alloc","vec","set_len_on_drop","SetLenOnDrop"],"kind":"struct"},"16:5916:15241":{"crate_id":16,"path":["gimli","read","cfi","UnwindContext"],"kind":"struct"},"2:22560:174":{"crate_id":2,"path":["core","num","nonzero","NonZeroU128"],"kind":"struct"},"16:6303:15254":{"crate_id":16,"path":["gimli","read","abbrev","DebugAbbrev"],"kind":"struct"},"14:7:14225":{"crate_id":14,"path":["rustc_demangle","legacy","Demangle"],"kind":"struct"},"17:11220:15652":{"crate_id":17,"path":["object","read","pe","resource","ResourceDirectoryEntryData"],"kind":"enum"},"17:14189:19612":{"crate_id":17,"path":["object","pe","ImageArmRuntimeFunctionEntry"],"kind":"struct"},"5:5318:27919":{"crate_id":5,"path":["alloc","slice","hack","to_vec","DropGuard"],"kind":"struct"},"6:4872:12389":{"crate_id":6,"path":["libc","unix","linux_like","linux","in6_ifreq"],"kind":"struct"},"2:5475:2204":{"crate_id":2,"path":["core","iter","adapters","filter_map","next_chunk","Guard"],"kind":"struct"},"2:41645:2261":{"crate_id":2,"path":["core","net","socket_addr","SocketAddrV4"],"kind":"struct"},"2:2914:2094":{"crate_id":2,"path":["core","ops","deref","DerefMut"],"kind":"trait"},"11:2186:30153":{"crate_id":11,"path":["hashbrown","raw","Fallibility"],"kind":"enum"},"2:40939:8053":{"crate_id":2,"path":["core","iter","sources","from_fn","FromFn"],"kind":"struct"},"17:10175:15413":{"crate_id":17,"path":["object","read","elf","symbol","SymbolTable"],"kind":"struct"},"11:1858:2081":{"crate_id":11,"path":["hashbrown","set","Union"],"kind":"struct"},"1:11367:21739":{"crate_id":1,"path":["std","sys_common","wtf8","Wtf8"],"kind":"struct"},"1:10843:22273":{"crate_id":1,"path":["std","sys","unix","kernel_copy","SpliceMode"],"kind":"enum"},"2:8809:79":{"crate_id":2,"path":["core","sync","atomic","AtomicBool"],"kind":"struct"},"11:1068:14215":{"crate_id":11,"path":["hashbrown","map","OccupiedEntryRef"],"kind":"struct"},"6:6625:2352":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stat"],"kind":"struct"},"6:6598:13476":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","flock64"],"kind":"struct"},"1:9170:22592":{"crate_id":1,"path":["std","sys","common","thread_local","fast_local","Key"],"kind":"struct"},"2:39702:24670":{"crate_id":2,"path":["core","ascii","ascii_char","AsciiChar"],"kind":"enum"},"19:0:1043":{"crate_id":19,"path":["panic_unwind"],"kind":"module"},"6:1631:9789":{"crate_id":6,"path":["libc","unix","linux_like","in_pktinfo"],"kind":"struct"},"17:13964:19597":{"crate_id":17,"path":["object","pe","ImageResourceDirStringU"],"kind":"struct"},"5:7545:7820":{"crate_id":5,"path":["alloc","vec","splice","Splice"],"kind":"struct"},"2:44609:2617":{"crate_id":2,"path":["core","task","wake","RawWakerVTable"],"kind":"struct"},"2:22101:26152":{"crate_id":2,"path":["core","num","flt2dec","Sign"],"kind":"enum"},"11:399:30144":{"crate_id":11,"path":["hashbrown","raw","RawIterHash"],"kind":"struct"},"6:4389:12337":{"crate_id":6,"path":["libc","unix","linux_like","linux","cpu_set_t"],"kind":"struct"},"2:20879:2487":{"crate_id":2,"path":["core","core_simd","cast","SimdCast"],"kind":"trait"},"16:4620:14883":{"crate_id":16,"path":["gimli","constants","DwVirtuality"],"kind":"struct"},"5:261:27919":{"crate_id":5,"path":["alloc","boxed","thin","drop","DropGuard"],"kind":"struct"},"2:40111:7852":{"crate_id":2,"path":["core","async_iter","from_iter","FromIter"],"kind":"struct"},"2:40148:7887":{"crate_id":2,"path":["core","char","convert","CharTryFromError"],"kind":"struct"},"2:2606:128":{"crate_id":2,"path":["core","error","Error"],"kind":"trait"},"2:47141:2505":{"crate_id":2,"path":["core","core_arch","simd","i8x64"],"kind":"struct"},"1:4623:2286":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt"],"kind":"trait"},"2:9246:2153":{"crate_id":2,"path":["core","fmt","Write"],"kind":"trait"},"1:4032:2287":{"crate_id":1,"path":["std","os","unix","fs","FileTypeExt"],"kind":"trait"},"9:237:2380":{"crate_id":9,"path":["miniz_oxide","inflate","core","State"],"kind":"enum"},"6:5051:12407":{"crate_id":6,"path":["libc","unix","linux_like","linux","hwtstamp_config"],"kind":"struct"},"16:6977:15285":{"crate_id":16,"path":["gimli","read","loclists","LocListIter"],"kind":"struct"},"1:946:2070":{"crate_id":1,"path":["std","collections","hash","map","RawVacantEntryMut"],"kind":"struct"},"2:45712:2501":{"crate_id":2,"path":["core","core_arch","simd","i8x4"],"kind":"struct"},"2:42690:110":{"crate_id":2,"path":["core","fmt","rt","Count"],"kind":"enum"},"1:8278:2260":{"crate_id":1,"path":["std","os","unix","net","addr","SocketAddr"],"kind":"struct"},"6:4848:12386":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlattr"],"kind":"struct"},"16:2962:14327":{"crate_id":16,"path":["gimli","common","SectionId"],"kind":"enum"},"2:40219:7884":{"crate_id":2,"path":["core","char","ToLowercase"],"kind":"struct"},"2:2850:8128":{"crate_id":2,"path":["core","ops","bit","BitXorAssign"],"kind":"trait"},"1:12001:2042":{"crate_id":1,"path":["std","backtrace_rs","types","BytesOrWideString"],"kind":"enum"},"1:1426:144":{"crate_id":1,"path":["std","collections","hash","set","HashSet"],"kind":"struct"},"2:44639:7671":{"crate_id":2,"path":["core","alloc","layout","LayoutError"],"kind":"struct"},"17:13795:19582":{"crate_id":17,"path":["object","pe","ImageBaseRelocation"],"kind":"struct"},"2:2803:8119":{"crate_id":2,"path":["core","ops","arith","RemAssign"],"kind":"trait"},"2:43590:7769":{"crate_id":2,"path":["core","str","error","ParseBoolError"],"kind":"struct"},"2:48045:7655":{"crate_id":2,"path":["core","core_arch","x86","__m512d"],"kind":"struct"},"5:7337:2055":{"crate_id":5,"path":["alloc","collections","TryReserveError"],"kind":"struct"},"11:1103:14216":{"crate_id":11,"path":["hashbrown","map","VacantEntryRef"],"kind":"struct"},"2:2474:2192":{"crate_id":2,"path":["core","convert","num","private","Sealed"],"kind":"trait"},"5:6955:27955":{"crate_id":5,"path":["alloc","vec","dedup_by","FillGapOnDrop"],"kind":"struct"},"6:6796:13485":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","mcontext_t"],"kind":"struct"},"17:14197:19613":{"crate_id":17,"path":["object","pe","ImageArm64RuntimeFunctionEntry"],"kind":"struct"},"18:644:31356":{"crate_id":18,"path":["memchr","memmem","x86","avx","nostd","Forward"],"kind":"struct"},"2:2771:8113":{"crate_id":2,"path":["core","ops","arith","Div"],"kind":"trait"},"6:4695:12367":{"crate_id":6,"path":["libc","unix","linux_like","linux","posix_spawn_file_actions_t"],"kind":"struct"},"17:14395:19627":{"crate_id":17,"path":["object","pe","ImageArchitectureEntry"],"kind":"struct"},"1:11603:22603":{"crate_id":1,"path":["std","panicking","panic_count","MustAbort"],"kind":"enum"},"17:10097:15489":{"crate_id":17,"path":["object","read","elf","segment","ElfSegmentIterator"],"kind":"struct"},"1:8304:2265":{"crate_id":1,"path":["std","os","unix","net","listener","Incoming"],"kind":"struct"},"1:586:2029":{"crate_id":1,"path":["std","ascii","AsciiExt"],"kind":"trait"},"14:40:18294":{"crate_id":14,"path":["rustc_demangle","v0","Ident"],"kind":"struct"},"1:9978:21701":{"crate_id":1,"path":["std","sys","unix","net","Socket"],"kind":"struct"},"1:3508:22481":{"crate_id":1,"path":["std","io","Write","write_fmt","Adapter"],"kind":"struct"},"1:8008:2232":{"crate_id":1,"path":["std","io","error","ErrorKind"],"kind":"enum"},"6:4781:12377":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_tp"],"kind":"struct"},"6:4506:12351":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_periodic_effect"],"kind":"struct"},"6:6130:13098":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","sigset_t"],"kind":"struct"},"6:1513:9778":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreq_source"],"kind":"struct"},"2:5593:8066":{"crate_id":2,"path":["core","iter","adapters","flatten","Flatten"],"kind":"struct"},"16:530:30309":{"crate_id":16,"path":["gimli","read","cfi","RegisterRuleMap"],"kind":"struct"},"2:2353:182":{"crate_id":2,"path":["core","cmp","Ord"],"kind":"trait"},"2:9290:7689":{"crate_id":2,"path":["core","fmt","Binary"],"kind":"trait"},"16:149:14277":{"crate_id":16,"path":["gimli","read","util","ArrayVec"],"kind":"struct"},"5:6485:27919":{"crate_id":5,"path":["alloc","vec","drain","drop","DropGuard"],"kind":"struct"},"1:868:2060":{"crate_id":1,"path":["std","collections","hash","map","Keys"],"kind":"struct"},"6:4456:12344":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_mask"],"kind":"struct"},"2:39329:200":{"crate_id":2,"path":["core","ops","range","RangeFull"],"kind":"struct"},"1:7128:21461":{"crate_id":1,"path":["std","sys_common","wstr","WStrUnits"],"kind":"struct"},"11:447:142":{"crate_id":11,"path":["hashbrown","map","HashMap"],"kind":"struct"},"2:40588:8083":{"crate_id":2,"path":["core","iter","adapters","skip_while","SkipWhile"],"kind":"struct"},"6:0:828":{"crate_id":6,"path":["libc"],"kind":"module"},"11:1012:2074":{"crate_id":11,"path":["hashbrown","map","VacantEntry"],"kind":"struct"},"2:1630:592":{"crate_id":2,"path":["core","mem","drop"],"kind":"function"},"1:881:2061":{"crate_id":1,"path":["std","collections","hash","map","Values"],"kind":"struct"},"1:1565:2063":{"crate_id":1,"path":["std","collections","hash","set","ExtractIf"],"kind":"struct"},"2:40558:8081":{"crate_id":2,"path":["core","iter","adapters","scan","Scan"],"kind":"struct"},"2:39515:25942":{"crate_id":2,"path":["core","any","tags","MaybeSizedValue"],"kind":"struct"},"17:10832:15558":{"crate_id":17,"path":["object","read","macho","section","MachOSection"],"kind":"struct"},"16:5590:15227":{"crate_id":16,"path":["gimli","read","cfi","EhFrameHdr"],"kind":"struct"},"1:9153:2470":{"crate_id":1,"path":["std","time","SystemTimeError"],"kind":"struct"},"16:5382:15223":{"crate_id":16,"path":["gimli","endianity","LittleEndian"],"kind":"struct"},"2:8494:7755":{"crate_id":2,"path":["core","panicking","assert_matches_failed","Pattern"],"kind":"struct"},"6:4723:12370":{"crate_id":6,"path":["libc","unix","linux_like","linux","in6_pktinfo"],"kind":"struct"},"16:2900:14325":{"crate_id":16,"path":["gimli","common","EhFrameOffset"],"kind":"struct"},"5:4426:27952":{"crate_id":5,"path":["alloc","collections","vec_deque","truncate","Dropper"],"kind":"struct"},"16:6900:15282":{"crate_id":16,"path":["gimli","read","loclists","LocationLists"],"kind":"struct"},"17:10080:15503":{"crate_id":17,"path":["object","read","elf","file","ElfFile"],"kind":"struct"},"1:3180:22962":{"crate_id":1,"path":["std","io","stdio","StdinRaw"],"kind":"struct"},"17:13492:19563":{"crate_id":17,"path":["object","pe","ImageRomOptionalHeader"],"kind":"struct"},"1:8150:2247":{"crate_id":1,"path":["std","io","util","Sink"],"kind":"struct"},"1:8211:2218":{"crate_id":1,"path":["std","io","Bytes"],"kind":"struct"},"17:12769:18828":{"crate_id":17,"path":["object","macho","DylibModule32"],"kind":"struct"},"6:1603:9788":{"crate_id":6,"path":["libc","unix","linux_like","lconv"],"kind":"struct"},"17:12065:18310":{"crate_id":17,"path":["object","elf","Dyn64"],"kind":"struct"},"1:8236:2264":{"crate_id":1,"path":["std","net","tcp","IntoIncoming"],"kind":"struct"},"1:5379:2391":{"crate_id":1,"path":["std","process","Child"],"kind":"struct"},"1:11610:14258":{"crate_id":1,"path":["std","backtrace_rs","backtrace","Frame"],"kind":"struct"},"17:13882:19589":{"crate_id":17,"path":["object","pe","ImageTlsDirectory32"],"kind":"struct"},"2:6838:8051":{"crate_id":2,"path":["core","iter","range","Step"],"kind":"trait"},"2:20743:26324":{"crate_id":2,"path":["core","core_simd","swizzle","deinterleave","Odd"],"kind":"struct"},"6:1527:9780":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_in"],"kind":"struct"},"2:11557:8271":{"crate_id":2,"path":["core","str","iter","SplitInternal"],"kind":"struct"},"5:7529:2063":{"crate_id":5,"path":["alloc","vec","extract_if","ExtractIf"],"kind":"struct"},"17:9734:15416":{"crate_id":17,"path":["object","read","any","SectionRelocationIterator"],"kind":"struct"},"6:506:8884":{"crate_id":6,"path":["libc","unix","rusage"],"kind":"struct"},"17:11600:15431":{"crate_id":17,"path":["object","read","CompressionFormat"],"kind":"enum"},"6:5920:13059":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","timex"],"kind":"struct"},"11:723:2060":{"crate_id":11,"path":["hashbrown","map","Keys"],"kind":"struct"},"2:22527:177":{"crate_id":2,"path":["core","num","nonzero","NonZeroU64"],"kind":"struct"},"6:6648:9920":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stat64"],"kind":"struct"},"17:13749:19577":{"crate_id":17,"path":["object","pe","ImageAuxSymbolWeak"],"kind":"struct"},"16:5807:15238":{"crate_id":16,"path":["gimli","read","cfi","CommonInformationEntry"],"kind":"struct"},"1:2209:2162":{"crate_id":1,"path":["std","fs","DirEntry"],"kind":"struct"},"2:42964:2380":{"crate_id":2,"path":["core","hash","sip","State"],"kind":"struct"},"6:4315:12331":{"crate_id":6,"path":["libc","unix","linux_like","linux","spwd"],"kind":"struct"},"6:4929:12394":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_nxtinfo"],"kind":"struct"},"2:44548:205":{"crate_id":2,"path":["core","future","ready","Ready"],"kind":"struct"},"2:22593:2018":{"crate_id":2,"path":["core","num","nonzero","NonZeroUsize"],"kind":"struct"},"5:7365:102":{"crate_id":5,"path":["alloc","ffi","c_str","CString"],"kind":"struct"},"0:0:1697":{"crate_id":0,"path":["winapi"],"kind":"module"},"16:8086:15320":{"crate_id":16,"path":["gimli","read","unit","EntriesCursor"],"kind":"struct"},"6:62:8508":{"crate_id":6,"path":["libc","unix","DIR"],"kind":"enum"},"17:11241:15654":{"crate_id":17,"path":["object","read","pe","resource","ResourceNameOrId"],"kind":"enum"},"16:3580:14334":{"crate_id":16,"path":["gimli","arch","X86"],"kind":"struct"},"17:10786:15563":{"crate_id":17,"path":["object","read","macho","segment","MachOSegmentIterator"],"kind":"struct"},"1:8856:2057":{"crate_id":1,"path":["std","sync","mpsc","Iter"],"kind":"struct"},"2:42429:7690":{"crate_id":2,"path":["core","fmt","num","Octal"],"kind":"struct"},"2:4262:7854":{"crate_id":2,"path":["core","cell","BorrowError"],"kind":"struct"},"18:96:19643":{"crate_id":18,"path":["memchr","memchr","iter","Memchr2"],"kind":"struct"},"2:45919:2514":{"crate_id":2,"path":["core","core_arch","simd","i32x2"],"kind":"struct"},"17:13303:19556":{"crate_id":17,"path":["object","pe","ImageDosHeader"],"kind":"struct"},"17:9840:15442":{"crate_id":17,"path":["object","read","archive","ArchiveMemberIterator"],"kind":"struct"},"16:7484:15296":{"crate_id":16,"path":["gimli","read","pubnames","PubNamesEntryIter"],"kind":"struct"},"5:6079:2204":{"crate_id":5,"path":["alloc","sync","from_iter_exact","Guard"],"kind":"struct"},"2:21528:2488":{"crate_id":2,"path":["core","core_simd","ord","SimdPartialOrd"],"kind":"trait"},"1:9487:22448":{"crate_id":1,"path":["std","sys","unix","fs","Dir"],"kind":"struct"},"2:44383:8261":{"crate_id":2,"path":["core","str","UnsafeBytesToStr"],"kind":"struct"},"2:30441:68":{"crate_id":2,"path":["core","ptr","alignment","Alignment"],"kind":"struct"},"5:4348:245":{"crate_id":5,"path":["alloc","collections","vec_deque","VecDeque"],"kind":"struct"},"17:8794:15398":{"crate_id":17,"path":["object","common","RelocationKind"],"kind":"enum"},"6:6028:13068":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_seccomp"],"kind":"struct"},"11:1663:144":{"crate_id":11,"path":["hashbrown","set","HashSet"],"kind":"struct"},"2:7718:2088":{"crate_id":2,"path":["core","iter","traits","marker","FusedIterator"],"kind":"trait"},"2:21200:2485":{"crate_id":2,"path":["core","core_simd","masks","mask_impl","Mask"],"kind":"struct"},"2:44231:7799":{"crate_id":2,"path":["core","str","pattern","TwoWaySearcher"],"kind":"struct"},"17:8605:15373":{"crate_id":17,"path":["object","common","AddressSize"],"kind":"enum"},"2:45666:2536":{"crate_id":2,"path":["core","core_arch","simd","u8x4"],"kind":"struct"},"6:7272:13860":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","align","max_align_t"],"kind":"struct"},"5:35:2115":{"crate_id":5,"path":["alloc","raw_vec","RawVec"],"kind":"struct"},"1:10575:2012":{"crate_id":1,"path":["std","sys","unix","thread","Thread"],"kind":"struct"},"16:4441:14848":{"crate_id":16,"path":["gimli","constants","DwAte"],"kind":"struct"},"16:7505:15298":{"crate_id":16,"path":["gimli","read","pubtypes","DebugPubTypes"],"kind":"struct"},"2:9759:25704":{"crate_id":2,"path":["core","slice","sort","merge_sort","RunVec"],"kind":"struct"},"17:10633:15557":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandIterator"],"kind":"struct"},"2:12470:26465":{"crate_id":2,"path":["core","future","join","MaybeDone"],"kind":"enum"},"16:7739:15311":{"crate_id":16,"path":["gimli","read","unit","DebugInfo"],"kind":"struct"},"2:4609:7876":{"crate_id":2,"path":["core","char","REPLACEMENT_CHARACTER"],"kind":"constant"},"1:929:2068":{"crate_id":1,"path":["std","collections","hash","map","RawEntryMut"],"kind":"enum"},"2:9300:7697":{"crate_id":2,"path":["core","fmt","UpperExp"],"kind":"trait"},"17:9665:30884":{"crate_id":17,"path":["object","read","any","SymbolIteratorInternal"],"kind":"enum"},"1:9100:167":{"crate_id":1,"path":["std","sync","mutex","MutexGuard"],"kind":"struct"},"17:11109:15647":{"crate_id":17,"path":["object","read","pe","import","ImportDescriptorIterator"],"kind":"struct"},"6:5025:12405":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_ifr_ifru"],"kind":"union"},"2:40539:8079":{"crate_id":2,"path":["core","iter","adapters","peekable","Peekable"],"kind":"struct"},"1:5824:2044":{"crate_id":1,"path":["std","sync","lazy_lock","LazyLock"],"kind":"struct"},"5:3178:2079":{"crate_id":5,"path":["alloc","collections","btree","set","Difference"],"kind":"struct"},"17:9274:2218":{"crate_id":17,"path":["object","read","util","Bytes"],"kind":"struct"},"2:44387:8279":{"crate_id":2,"path":["core","time","Nanoseconds"],"kind":"struct"},"16:6470:15266":{"crate_id":16,"path":["gimli","read","index","DebugTuIndex"],"kind":"struct"},"16:2352:14302":{"crate_id":16,"path":["gimli","common","Register"],"kind":"struct"},"5:3568:163":{"crate_id":5,"path":["alloc","collections","linked_list","LinkedList"],"kind":"struct"},"6:4413:12339":{"crate_id":6,"path":["libc","unix","linux_like","linux","sembuf"],"kind":"struct"},"6:4496:12350":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_condition_effect"],"kind":"struct"},"6:6022:13067":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_exit"],"kind":"struct"},"17:13771:19579":{"crate_id":17,"path":["object","pe","ImageAuxSymbolCrc"],"kind":"struct"},"2:11857:7755":{"crate_id":2,"path":["core","str","pattern","Pattern"],"kind":"trait"},"11:695:2066":{"crate_id":11,"path":["hashbrown","map","IntoValues"],"kind":"struct"},"6:1575:9785":{"crate_id":6,"path":["libc","unix","linux_like","tm"],"kind":"struct"},"16:4592:14879":{"crate_id":16,"path":["gimli","constants","DwVis"],"kind":"struct"},"17:10403:15543":{"crate_id":17,"path":["object","read","elf","version","VerdauxIterator"],"kind":"struct"},"2:20971:2494":{"crate_id":2,"path":["core","core_simd","elements","float","SimdFloat"],"kind":"trait"},"17:11178:15650":{"crate_id":17,"path":["object","read","pe","relocation","RelocationIterator"],"kind":"struct"},"5:7474:7802":{"crate_id":5,"path":["alloc","string","FromUtf16Error"],"kind":"struct"},"2:20696:26182":{"crate_id":2,"path":["core","core_simd","swizzle","rotate_lanes_left","Rotate"],"kind":"struct"},"2:11398:8224":{"crate_id":2,"path":["core","slice","GetManyMutError"],"kind":"struct"},"5:7412:2155":{"crate_id":5,"path":["alloc","ffi","c_str","FromVecWithNulError"],"kind":"struct"},"16:3894:14397":{"crate_id":16,"path":["gimli","constants","DwChildren"],"kind":"struct"},"6:7505:12569":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_mutexattr_t"],"kind":"struct"},"1:2591:2221":{"crate_id":1,"path":["std","io","buffered","bufwriter","WriterPanicked"],"kind":"struct"},"11:805:2068":{"crate_id":11,"path":["hashbrown","map","RawEntryMut"],"kind":"enum"},"17:9048:15378":{"crate_id":17,"path":["object","endian","U16Bytes"],"kind":"struct"},"2:2756:2471":{"crate_id":2,"path":["core","ops","arith","Add"],"kind":"trait"},"11:2201:2055":{"crate_id":11,"path":["hashbrown","TryReserveError"],"kind":"enum"},"2:42943:7914":{"crate_id":2,"path":["core","hash","sip","SipHasher"],"kind":"struct"},"1:8997:21820":{"crate_id":1,"path":["std","sync","mpmc","error","SendTimeoutError"],"kind":"enum"},"5:5612:7823":{"crate_id":5,"path":["alloc","string","retain","SetLenOnDrop"],"kind":"struct"},"2:47970:7650":{"crate_id":2,"path":["core","core_arch","x86","__m256i"],"kind":"struct"},"2:40418:8064":{"crate_id":2,"path":["core","iter","adapters","cloned","Cloned"],"kind":"struct"},"2:7268:134":{"crate_id":2,"path":["core","iter","traits","collect","FromIterator"],"kind":"trait"},"11:667:2065":{"crate_id":11,"path":["hashbrown","map","IntoKeys"],"kind":"struct"},"6:4550:12356":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_abs_setup"],"kind":"struct"},"17:9899:15459":{"crate_id":17,"path":["object","read","coff","section","SectionTable"],"kind":"struct"},"2:43854:7777":{"crate_id":2,"path":["core","str","iter","RMatches"],"kind":"struct"},"2:41866:2058":{"crate_id":2,"path":["core","result","IterMut"],"kind":"struct"},"1:4473:2322":{"crate_id":1,"path":["std","os","unix","process","CommandExt"],"kind":"trait"},"1:10101:21435":{"crate_id":1,"path":["std","sys","unix","os","Env"],"kind":"struct"},"2:45956:2569":{"crate_id":2,"path":["core","core_arch","simd","f32x2"],"kind":"struct"},"1:8942:2443":{"crate_id":1,"path":["std","sync","mpsc","TrySendError"],"kind":"enum"},"16:5639:15230":{"crate_id":16,"path":["gimli","read","cfi","EhHdrTable"],"kind":"struct"},"1:12033:1061":{"crate_id":1,"path":["std","pointer"],"kind":"primitive"},"1:8241:2256":{"crate_id":1,"path":["std","net","Shutdown"],"kind":"enum"},"16:5612:15228":{"crate_id":16,"path":["gimli","read","cfi","ParsedEhFrameHdr"],"kind":"struct"},"17:10313:15540":{"crate_id":17,"path":["object","read","elf","note","GnuPropertyIterator"],"kind":"struct"},"11:1831:2063":{"crate_id":11,"path":["hashbrown","set","ExtractIf"],"kind":"struct"},"2:47739:2551":{"crate_id":2,"path":["core","core_arch","simd","u32x16"],"kind":"struct"},"2:9288:7690":{"crate_id":2,"path":["core","fmt","Octal"],"kind":"trait"},"2:11852:7759":{"crate_id":2,"path":["core","str","pattern"],"kind":"module"},"9:330:14150":{"crate_id":9,"path":["miniz_oxide","inflate","core","LocalVars"],"kind":"struct"},"2:7281:1951":{"crate_id":2,"path":["core","iter","traits","collect","Extend"],"kind":"trait"},"17:13513:19564":{"crate_id":17,"path":["object","pe","ImageOptionalHeader64"],"kind":"struct"},"18:113:19644":{"crate_id":18,"path":["memchr","memchr","iter","Memchr3"],"kind":"struct"},"5:4985:2204":{"crate_id":5,"path":["alloc","rc","from_iter_exact","Guard"],"kind":"struct"},"5:7449:224":{"crate_id":5,"path":["alloc","string","String"],"kind":"struct"},"6:4368:12334":{"crate_id":6,"path":["libc","unix","linux_like","linux","itimerspec"],"kind":"struct"},"18:624:31355":{"crate_id":18,"path":["memchr","memmem","twoway","SuffixOrdering"],"kind":"enum"},"6:4428:12341":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_id"],"kind":"struct"},"5:822:2083":{"crate_id":5,"path":["alloc","collections","binary_heap","RebuildOnDrop"],"kind":"struct"},"2:41739:2058":{"crate_id":2,"path":["core","option","IterMut"],"kind":"struct"},"2:46927:2516":{"crate_id":2,"path":["core","core_arch","simd","i32x8"],"kind":"struct"},"2:2901:117":{"crate_id":2,"path":["core","ops","deref","Deref"],"kind":"trait"},"1:8497:2382":{"crate_id":1,"path":["std","path","Component"],"kind":"enum"},"1:8897:2439":{"crate_id":1,"path":["std","sync","mpsc","RecvError"],"kind":"struct"},"2:43700:7778":{"crate_id":2,"path":["core","str","iter","RSplitTerminator"],"kind":"struct"},"2:40549:8080":{"crate_id":2,"path":["core","iter","adapters","rev","Rev"],"kind":"struct"},"2:40299:2158":{"crate_id":2,"path":["core","ffi","c_str","FromBytesUntilNulError"],"kind":"struct"},"2:3172:7849":{"crate_id":2,"path":["core","ops","try_trait","NeverShortCircuit"],"kind":"struct"},"2:7235:8061":{"crate_id":2,"path":["core","iter","traits","accum","Product"],"kind":"trait"},"1:5779:2423":{"crate_id":1,"path":["std","sync","condvar","Condvar"],"kind":"struct"},"1:4701:2322":{"crate_id":1,"path":["std","os","linux","process","CommandExt"],"kind":"trait"},"17:13778:19580":{"crate_id":17,"path":["object","pe","ImageRelocation"],"kind":"struct"},"1:619:2033":{"crate_id":1,"path":["std","backtrace","Backtrace"],"kind":"struct"},"17:3395:15565":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbolIterator"],"kind":"struct"},"6:5987:13063":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","Elf32_Chdr"],"kind":"struct"},"2:41747:2059":{"crate_id":2,"path":["core","option","IntoIter"],"kind":"struct"},"18:491:31348":{"crate_id":18,"path":["memchr","cow","Imp"],"kind":"struct"},"1:9075:21821":{"crate_id":1,"path":["std","sync","mpmc","utils","CachePadded"],"kind":"struct"},"16:7463:15294":{"crate_id":16,"path":["gimli","read","pubnames","PubNamesEntry"],"kind":"struct"},"1:8926:2440":{"crate_id":1,"path":["std","sync","mpsc","RecvTimeoutError"],"kind":"enum"},"16:6456:15265":{"crate_id":16,"path":["gimli","read","index","DebugCuIndex"],"kind":"struct"},"17:11272:15417":{"crate_id":17,"path":["object","read","traits","NoDynamicRelocationIterator"],"kind":"struct"},"1:362:2027":{"crate_id":1,"path":["std","thread","scoped","ScopedJoinHandle"],"kind":"struct"},"1:12048:1520":{"crate_id":1,"path":["std","u16"],"kind":"primitive"},"2:47996:7652":{"crate_id":2,"path":["core","core_arch","x86","__m256d"],"kind":"struct"},"13:226:30159":{"crate_id":13,"path":["std_detect","detect","cache","Initializer"],"kind":"struct"},"2:4413:2016":{"crate_id":2,"path":["core","cell","UnsafeCell"],"kind":"struct"},"1:7661:2015":{"crate_id":1,"path":["std","thread","ThreadId"],"kind":"struct"},"11:644:2058":{"crate_id":11,"path":["hashbrown","map","IterMut"],"kind":"struct"},"1:1888:2151":{"crate_id":1,"path":["std","error","Report"],"kind":"struct"},"1:3998:2286":{"crate_id":1,"path":["std","os","unix","fs","MetadataExt"],"kind":"trait"},"17:13620:19570":{"crate_id":17,"path":["object","pe","AnonObjectHeaderBigobj"],"kind":"struct"},"17:14341:19623":{"crate_id":17,"path":["object","pe","ImageFunctionEntry"],"kind":"struct"},"16:4785:14952":{"crate_id":16,"path":["gimli","constants","DwCc"],"kind":"struct"},"1:12053:1577":{"crate_id":1,"path":["std","usize"],"kind":"primitive"},"1:11212:21815":{"crate_id":1,"path":["std","sys","unix","time","Timespec"],"kind":"struct"},"16:7525:15300":{"crate_id":16,"path":["gimli","read","rnglists","DebugRanges"],"kind":"struct"},"6:595:8895":{"crate_id":6,"path":["libc","unix","protoent"],"kind":"struct"},"2:21866:25654":{"crate_id":2,"path":["core","num","bignum","Big32x40"],"kind":"struct"},"5:3212:2078":{"crate_id":5,"path":["alloc","collections","btree","set","Intersection"],"kind":"struct"},"16:55:14269":{"crate_id":16,"path":["gimli","endianity","Endianity"],"kind":"trait"},"17:14150:19609":{"crate_id":17,"path":["object","pe","ImageHotPatchInfo"],"kind":"struct"},"17:9952:15451":{"crate_id":17,"path":["object","read","coff","section","CoffSection"],"kind":"struct"},"5:1374:94":{"crate_id":5,"path":["alloc","collections","btree","map","BTreeMap"],"kind":"struct"},"16:2611:14313":{"crate_id":16,"path":["gimli","common","DebugMacinfoOffset"],"kind":"struct"},"1:7574:22677":{"crate_id":1,"path":["std","backtrace_rs","print","BacktraceFrameFmt"],"kind":"struct"},"17:9518:15411":{"crate_id":17,"path":["object","read","any","ComdatIterator"],"kind":"struct"},"1:11287:22684":{"crate_id":1,"path":["std","sys_common","once","futex","CompletionGuard"],"kind":"struct"},"16:2926:14326":{"crate_id":16,"path":["gimli","common","UnitSectionOffset"],"kind":"enum"},"1:11033:22679":{"crate_id":1,"path":["std","sys","unix","process","process_inner","do_exec","Reset"],"kind":"struct"},"2:41503:2257":{"crate_id":2,"path":["core","net","ip_addr","Ipv4Addr"],"kind":"struct"},"16:7313:30654":{"crate_id":16,"path":["gimli","read","op","EvaluationState"],"kind":"enum"},"2:46721:2556":{"crate_id":2,"path":["core","core_arch","simd","u64x4"],"kind":"struct"},"1:8818:2401":{"crate_id":1,"path":["std","process","ExitStatus"],"kind":"struct"},"5:3669:27919":{"crate_id":5,"path":["alloc","collections","linked_list","drop","DropGuard"],"kind":"struct"},"1:9115:2445":{"crate_id":1,"path":["std","time","Instant"],"kind":"struct"},"2:40456:8073":{"crate_id":2,"path":["core","iter","adapters","filter","Filter"],"kind":"struct"},"2:2514:74":{"crate_id":2,"path":["core","convert","AsMut"],"kind":"trait"},"9:0:1808":{"crate_id":9,"path":["miniz_oxide"],"kind":"module"},"9:450:14094":{"crate_id":9,"path":["miniz_oxide","MZError"],"kind":"enum"},"16:7038:30311":{"crate_id":16,"path":["gimli","read","lookup","PubStuffHeader"],"kind":"struct"},"11:1027:14214":{"crate_id":11,"path":["hashbrown","map","EntryRef"],"kind":"enum"},"6:6688:9903":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statvfs64"],"kind":"struct"},"16:8152:15324":{"crate_id":16,"path":["gimli","read","unit","DebugTypes"],"kind":"struct"},"1:6069:22666":{"crate_id":1,"path":["std","sync","mpmc","list","Channel"],"kind":"struct"},"16:7331:30648":{"crate_id":16,"path":["gimli","read","op","EvaluationWaiting"],"kind":"enum"},"1:8539:2383":{"crate_id":1,"path":["std","path","Components"],"kind":"struct"},"5:1776:2063":{"crate_id":5,"path":["alloc","collections","btree","map","ExtractIf"],"kind":"struct"},"1:10322:2395":{"crate_id":1,"path":["std","sys","unix","process","process_common","Command"],"kind":"struct"},"18:652:31356":{"crate_id":18,"path":["memchr","memmem","x86","sse","Forward"],"kind":"struct"},"2:4768:391":{"crate_id":2,"path":["core","ffi","c_void"],"kind":"enum"},"2:22004:26139":{"crate_id":2,"path":["core","num","dec2flt","number","Number"],"kind":"struct"},"6:474:8879":{"crate_id":6,"path":["libc","unix","group"],"kind":"struct"},"5:4194:2204":{"crate_id":5,"path":["alloc","collections","vec_deque","into_iter","try_rfold","Guard"],"kind":"struct"},"5:6930:27936":{"crate_id":5,"path":["alloc","vec","retain_mut","BackshiftOnDrop"],"kind":"struct"},"1:1761:615":{"crate_id":1,"path":["std","env"],"kind":"module"},"2:43540:7742":{"crate_id":2,"path":["core","slice","iter","RChunksExactMut"],"kind":"struct"},"17:12303:18801":{"crate_id":17,"path":["object","macho","DyldCacheMappingInfo"],"kind":"struct"},"1:1558:2059":{"crate_id":1,"path":["std","collections","hash","set","IntoIter"],"kind":"struct"},"2:47941:7647":{"crate_id":2,"path":["core","core_arch","x86","__m128i"],"kind":"struct"},"1:4567:2340":{"crate_id":1,"path":["std","os","unix","thread","JoinHandleExt"],"kind":"trait"},"2:40756:8085":{"crate_id":2,"path":["core","iter","adapters","zip","Zip"],"kind":"struct"},"17:12552:18814":{"crate_id":17,"path":["object","macho","Dylib"],"kind":"struct"},"16:4396:14827":{"crate_id":16,"path":["gimli","constants","DwForm"],"kind":"struct"},"2:22791:2276":{"crate_id":2,"path":["core","num","nonzero","NonZeroIsize"],"kind":"struct"},"16:4724:14939":{"crate_id":16,"path":["gimli","constants","DwAddr"],"kind":"struct"},"5:7438:7711":{"crate_id":5,"path":["alloc","rc","UniqueRc"],"kind":"struct"},"17:13719:19575":{"crate_id":17,"path":["object","pe","ImageAuxSymbolFunction"],"kind":"struct"},"2:42222:85":{"crate_id":2,"path":["core","sync","atomic","AtomicIsize"],"kind":"struct"},"6:4469:12346":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_trigger"],"kind":"struct"},"2:32213:8179":{"crate_id":2,"path":["core","error","Source"],"kind":"struct"},"2:7363:1950":{"crate_id":2,"path":["core","iter","traits","exact_size","ExactSizeIterator"],"kind":"trait"},"2:43438:7734":{"crate_id":2,"path":["core","slice","iter","ChunksExact"],"kind":"struct"},"1:6161:22675":{"crate_id":1,"path":["std","sync","mpmc","waker","SyncWaker"],"kind":"struct"},"6:5967:13061":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","regex_t"],"kind":"struct"},"17:10361:15537":{"crate_id":17,"path":["object","read","elf","version","Version"],"kind":"struct"},"6:7564:12578":{"crate_id":6,"path":["libc","unix","linux_like","linux","can_frame"],"kind":"struct"},"2:39314:8131":{"crate_id":2,"path":["core","ops","index_range","IndexRange"],"kind":"struct"},"2:30419:7819":{"crate_id":2,"path":["core","mem","maybe_uninit","MaybeUninit"],"kind":"union"},"2:12078:112":{"crate_id":2,"path":["core","str","lossy","Debug"],"kind":"struct"},"11:0:1810":{"crate_id":11,"path":["hashbrown"],"kind":"module"},"2:41657:2262":{"crate_id":2,"path":["core","net","socket_addr","SocketAddrV6"],"kind":"struct"},"1:8990:2006":{"crate_id":1,"path":["std","sync","mpmc","context","Inner"],"kind":"struct"},"17:9188:15406":{"crate_id":17,"path":["object","endian","I32Bytes"],"kind":"struct"},"2:2594:116":{"crate_id":2,"path":["core","default","Default"],"kind":"trait"},"1:4819:2296":{"crate_id":1,"path":["std","os","fd","owned","AsFd"],"kind":"trait"},"2:40574:8082":{"crate_id":2,"path":["core","iter","adapters","skip","Skip"],"kind":"struct"},"16:4900:14971":{"crate_id":16,"path":["gimli","constants","DwIdx"],"kind":"struct"},"6:5890:13057":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_mmap_hdr"],"kind":"struct"},"16:2715:14317":{"crate_id":16,"path":["gimli","common","DebugRngListsBase"],"kind":"struct"},"5:0:287":{"crate_id":5,"path":["alloc"],"kind":"module"},"2:40283:26084":{"crate_id":2,"path":["core","ffi","c_str","FromBytesWithNulErrorKind"],"kind":"enum"},"1:3183:19991":{"crate_id":1,"path":["std","io","stdio","StdoutRaw"],"kind":"struct"},"5:5128:2419":{"crate_id":5,"path":["alloc","rc","Weak"],"kind":"struct"},"5:6439:2062":{"crate_id":5,"path":["alloc","vec","drain","Drain"],"kind":"struct"},"5:7245:2059":{"crate_id":5,"path":["alloc","collections","btree","set","IntoIter"],"kind":"struct"},"17:8711:15395":{"crate_id":17,"path":["object","common","ComdatKind"],"kind":"enum"},"1:7534:22609":{"crate_id":1,"path":["std","backtrace_rs","symbolize","SymbolName"],"kind":"struct"},"6:4401:12338":{"crate_id":6,"path":["libc","unix","linux_like","linux","msginfo"],"kind":"struct"},"6:1911:9962":{"crate_id":6,"path":["libc","unix","linux_like","linux","fpos64_t"],"kind":"enum"},"16:6915:30319":{"crate_id":16,"path":["gimli","read","loclists","LocListsFormat"],"kind":"enum"},"17:9032:15224":{"crate_id":17,"path":["object","endian","BigEndian"],"kind":"struct"},"2:3200:7681":{"crate_id":2,"path":["core","ops","unsize","CoerceUnsized"],"kind":"trait"},"2:46803:2504":{"crate_id":2,"path":["core","core_arch","simd","i8x32"],"kind":"struct"},"16:8252:15328":{"crate_id":16,"path":["gimli","read","StoreOnHeap"],"kind":"struct"},"2:2761:2473":{"crate_id":2,"path":["core","ops","arith","Sub"],"kind":"trait"},"2:2854:8129":{"crate_id":2,"path":["core","ops","bit","ShlAssign"],"kind":"trait"},"2:46464:26519":{"crate_id":2,"path":["core","core_arch","simd","m32x4"],"kind":"struct"},"17:11045:15610":{"crate_id":17,"path":["object","read","pe","data_directory","DataDirectories"],"kind":"struct"},"6:4420:12340":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_event"],"kind":"struct"},"17:10812:15562":{"crate_id":17,"path":["object","read","macho","segment","MachOSegmentInternal"],"kind":"struct"},"18:614:31351":{"crate_id":18,"path":["memchr","memmem","twoway","SuffixKind"],"kind":"enum"},"2:10391:7746":{"crate_id":2,"path":["core","slice","iter","RSplitN"],"kind":"struct"},"6:7511:12570":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_rwlockattr_t"],"kind":"struct"},"16:6317:15255":{"crate_id":16,"path":["gimli","read","abbrev","AbbreviationsCache"],"kind":"struct"},"6:4842:12385":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlmsgerr"],"kind":"struct"},"2:43886:2215":{"crate_id":2,"path":["core","str","iter","Lines"],"kind":"struct"},"1:10770:2181":{"crate_id":1,"path":["std","sys","unix","fs","OpenOptions"],"kind":"struct"},"6:4810:12381":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_filter"],"kind":"struct"},"6:7552:12576":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_rwlock_t"],"kind":"struct"},"17:13029:18845":{"crate_id":17,"path":["object","macho","SymsegCommand"],"kind":"struct"},"6:7529:12573":{"crate_id":6,"path":["libc","unix","linux_like","linux","fanotify_event_metadata"],"kind":"struct"},"17:11642:15433":{"crate_id":17,"path":["object","read","CompressedData"],"kind":"struct"},"2:11866:7757":{"crate_id":2,"path":["core","str","pattern","Searcher"],"kind":"trait"},"11:1501:14217":{"crate_id":11,"path":["hashbrown","rustc_entry","RustcEntry"],"kind":"enum"},"2:47961:7649":{"crate_id":2,"path":["core","core_arch","x86","__m128d"],"kind":"struct"},"2:41609:2269":{"crate_id":2,"path":["core","net","parser","AddrParseError"],"kind":"struct"},"2:43182:25941":{"crate_id":2,"path":["core","slice","ascii","EscapeByte"],"kind":"struct"},"17:13427:19559":{"crate_id":17,"path":["object","pe","MaskedRichHeaderEntry"],"kind":"struct"},"6:4833:12384":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlmsghdr"],"kind":"struct"},"16:5972:15244":{"crate_id":16,"path":["gimli","read","cfi","UnwindTableRow"],"kind":"struct"},"1:12043:751":{"crate_id":1,"path":["std","i16"],"kind":"primitive"},"2:46167:2503":{"crate_id":2,"path":["core","core_arch","simd","i8x16"],"kind":"struct"},"17:11371:15421":{"crate_id":17,"path":["object","read","SymbolIndex"],"kind":"struct"},"6:4304:12330":{"crate_id":6,"path":["libc","unix","linux_like","linux","passwd"],"kind":"struct"},"1:4962:2357":{"crate_id":1,"path":["std","panic","always_abort"],"kind":"function"},"2:7310:121":{"crate_id":2,"path":["core","iter","traits","double_ended","DoubleEndedIterator"],"kind":"trait"},"6:1733:9799":{"crate_id":6,"path":["libc","unix","linux_like","sigevent"],"kind":"struct"},"17:10511:15549":{"crate_id":17,"path":["object","read","elf","attributes","AttributeIndexIterator"],"kind":"struct"},"17:13697:19573":{"crate_id":17,"path":["object","pe","ImageSymbolExBytes"],"kind":"struct"},"1:7887:130":{"crate_id":1,"path":["std","fs","FileType"],"kind":"struct"},"1:12051:1519":{"crate_id":1,"path":["std","u128"],"kind":"primitive"},"17:14177:19611":{"crate_id":17,"path":["object","pe","ImageHotPatchHashes"],"kind":"struct"},"2:40105:2031":{"crate_id":2,"path":["core","ascii","EscapeDefault"],"kind":"struct"},"17:11276:128":{"crate_id":17,"path":["object","read","Error"],"kind":"struct"},"2:45974:2575":{"crate_id":2,"path":["core","core_arch","simd","f64x1"],"kind":"struct"},"1:1064:2074":{"crate_id":1,"path":["std","collections","hash","map","VacantEntry"],"kind":"struct"},"2:9744:22690":{"crate_id":2,"path":["core","slice","sort","merge_sort","BufGuard"],"kind":"struct"},"18:609:31357":{"crate_id":18,"path":["memchr","memmem","twoway","Suffix"],"kind":"struct"},"2:40506:8086":{"crate_id":2,"path":["core","iter","adapters","intersperse","Intersperse"],"kind":"struct"},"6:526:8885":{"crate_id":6,"path":["libc","unix","ipv6_mreq"],"kind":"struct"},"2:10186:7750":{"crate_id":2,"path":["core","slice","iter","SplitInclusive"],"kind":"struct"},"1:8330:2350":{"crate_id":1,"path":["std","os","linux","process","PidFd"],"kind":"struct"},"1:6608:2434":{"crate_id":1,"path":["std","sync","remutex","ReentrantMutexGuard"],"kind":"struct"},"18:755:19666":{"crate_id":18,"path":["memchr","memmem","SearcherRev"],"kind":"struct"},"1:10968:21743":{"crate_id":1,"path":["std","sys","unix","process","process_common","ProgramKind"],"kind":"enum"},"2:44210:7797":{"crate_id":2,"path":["core","str","pattern","StrSearcherImpl"],"kind":"enum"},"2:42300:2420":{"crate_id":2,"path":["core","sync","exclusive","Exclusive"],"kind":"struct"},"2:6791:26438":{"crate_id":2,"path":["core","iter","adapters","GenericShunt"],"kind":"struct"},"2:32300:8094":{"crate_id":2,"path":["core","marker","PhantomPinned"],"kind":"struct"},"17:11264:15655":{"crate_id":17,"path":["object","read","pe","rich","RichHeaderEntry"],"kind":"struct"},"2:46991:2571":{"crate_id":2,"path":["core","core_arch","simd","f32x8"],"kind":"struct"},"2:21180:2482":{"crate_id":2,"path":["core","core_simd","lane_count","LaneCount"],"kind":"struct"},"16:7799:15314":{"crate_id":16,"path":["gimli","read","unit","UnitHeader"],"kind":"struct"},"6:7523:12572":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_barrierattr_t"],"kind":"struct"},"16:6057:14271":{"crate_id":16,"path":["gimli","read","cfi","CallFrameInstruction"],"kind":"enum"},"16:6323:15256":{"crate_id":16,"path":["gimli","read","abbrev","Abbreviations"],"kind":"struct"},"1:7636:2192":{"crate_id":1,"path":["std","sealed","Sealed"],"kind":"trait"},"1:11310:2407":{"crate_id":1,"path":["std","sys_common","process","CommandEnvs"],"kind":"struct"},"5:4363:27952":{"crate_id":5,"path":["alloc","collections","vec_deque","drop","Dropper"],"kind":"struct"},"2:4440:7864":{"crate_id":2,"path":["core","cell","SyncUnsafeCell"],"kind":"struct"},"17:10351:15542":{"crate_id":17,"path":["object","read","elf","version","VersionIndex"],"kind":"struct"},"1:12041:650":{"crate_id":1,"path":["std","f64"],"kind":"primitive"},"18:699:19664":{"crate_id":18,"path":["memchr","memmem","FinderBuilder"],"kind":"struct"},"6:6868:13491":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ucontext_t"],"kind":"struct"},"1:1979:184":{"crate_id":1,"path":["std","ffi","os_str","OsStr"],"kind":"struct"},"2:21747:2192":{"crate_id":2,"path":["core","core_simd","vector","sealed","Sealed"],"kind":"trait"},"17:11753:15663":{"crate_id":17,"path":["object","archive","AixMemberOffset"],"kind":"struct"},"6:4638:12363":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Phdr"],"kind":"struct"},"6:547:8888":{"crate_id":6,"path":["libc","unix","pollfd"],"kind":"struct"},"11:986:2073":{"crate_id":11,"path":["hashbrown","map","OccupiedEntry"],"kind":"struct"},"1:915:2065":{"crate_id":1,"path":["std","collections","hash","map","IntoKeys"],"kind":"struct"},"17:13673:19571":{"crate_id":17,"path":["object","pe","ImageSymbolBytes"],"kind":"struct"},"6:5737:12985":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","statx"],"kind":"struct"},"16:6713:14243":{"crate_id":16,"path":["gimli","read","line","LineSequence"],"kind":"struct"},"1:8979:22092":{"crate_id":1,"path":["std","sync","mpmc","array","ArrayToken"],"kind":"struct"},"17:10471:15546":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSubsection"],"kind":"struct"},"18:538:19672":{"crate_id":18,"path":["memchr","memmem","rabinkarp","NeedleHash"],"kind":"struct"},"5:878:2084":{"crate_id":5,"path":["alloc","collections","binary_heap","Hole"],"kind":"struct"},"17:11905:18299":{"crate_id":17,"path":["object","elf","Sym32"],"kind":"struct"},"2:41586:26171":{"crate_id":2,"path":["core","net","parser","AddrKind"],"kind":"enum"},"1:4042:2288":{"crate_id":1,"path":["std","os","unix","fs","DirEntryExt"],"kind":"trait"},"6:6775:13484":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user"],"kind":"struct"},"2:43896:7773":{"crate_id":2,"path":["core","str","iter","LinesAny"],"kind":"struct"},"2:40488:8076":{"crate_id":2,"path":["core","iter","adapters","fuse","Fuse"],"kind":"struct"},"6:7463:14021":{"crate_id":6,"path":["libc","unix","linux_like","linux","arch","generic","termios2"],"kind":"struct"},"2:47599:2545":{"crate_id":2,"path":["core","core_arch","simd","u16x32"],"kind":"struct"},"2:47847:2523":{"crate_id":2,"path":["core","core_arch","simd","i64x8"],"kind":"struct"},"16:7407:15291":{"crate_id":16,"path":["gimli","read","op","Expression"],"kind":"struct"},"17:11832:18295":{"crate_id":17,"path":["object","elf","SectionHeader32"],"kind":"struct"},"1:11231:2445":{"crate_id":1,"path":["std","sys","unix","time","inner","Instant"],"kind":"struct"},"2:21310:2491":{"crate_id":2,"path":["core","core_simd","masks","MaskElement"],"kind":"trait"},"6:1681:9794":{"crate_id":6,"path":["libc","unix","linux_like","arphdr"],"kind":"struct"},"2:46691:2550":{"crate_id":2,"path":["core","core_arch","simd","u32x8"],"kind":"struct"},"16:3025:14328":{"crate_id":16,"path":["gimli","common","DwoId"],"kind":"struct"},"1:11535:2268":{"crate_id":1,"path":["std","sys_common","net","UdpSocket"],"kind":"struct"},"1:7920:2230":{"crate_id":1,"path":["std","io","buffered","IntoInnerError"],"kind":"struct"},"5:7211:2062":{"crate_id":5,"path":["alloc","collections","binary_heap","Drain"],"kind":"struct"},"2:11923:7783":{"crate_id":2,"path":["core","str","pattern","MultiCharEqPattern"],"kind":"struct"},"16:5994:15245":{"crate_id":16,"path":["gimli","read","cfi","CfaRule"],"kind":"enum"},"6:1557:9783":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_ll"],"kind":"struct"},"1:7912:19978":{"crate_id":1,"path":["std","io","buffered","linewritershim","LineWriterShim"],"kind":"struct"},"5:7463:7801":{"crate_id":5,"path":["alloc","string","FromUtf8Error"],"kind":"struct"},"17:11388:15422":{"crate_id":17,"path":["object","read","SymbolSection"],"kind":"enum"},"2:2966:7683":{"crate_id":2,"path":["core","ops","generator","Generator"],"kind":"trait"},"16:2567:14311":{"crate_id":16,"path":["gimli","common","DebugLocListsBase"],"kind":"struct"},"1:643:2037":{"crate_id":1,"path":["std","backtrace","BytesOrWide"],"kind":"enum"},"17:11979:18304":{"crate_id":17,"path":["object","elf","Rela32"],"kind":"struct"},"2:46433:26520":{"crate_id":2,"path":["core","core_arch","simd","m16x8"],"kind":"struct"},"11:2180:30147":{"crate_id":11,"path":["hashbrown","raw","bitmask","BitMaskIter"],"kind":"struct"},"17:8632:15393":{"crate_id":17,"path":["object","common","BinaryFormat"],"kind":"enum"},"2:30455:26056":{"crate_id":2,"path":["core","ptr","alignment","AlignmentEnum16"],"kind":"enum"},"18:736:19658":{"crate_id":18,"path":["memchr","memmem","SearcherKind"],"kind":"enum"},"2:40995:8059":{"crate_id":2,"path":["core","iter","sources","successors","Successors"],"kind":"struct"},"17:11467:15426":{"crate_id":17,"path":["object","read","ObjectMapEntry"],"kind":"struct"},"2:42261:92":{"crate_id":2,"path":["core","sync","atomic","AtomicUsize"],"kind":"struct"},"2:43498:7724":{"crate_id":2,"path":["core","slice","iter","ArrayChunksMut"],"kind":"struct"},"2:2694:1944":{"crate_id":2,"path":["core","marker","Sized"],"kind":"trait"},"2:12522:7910":{"crate_id":2,"path":["core","future","poll_fn","PollFn"],"kind":"struct"},"17:13639:19554":{"crate_id":17,"path":["object","pe","ImageSectionHeader"],"kind":"struct"},"16:5342:15221":{"crate_id":16,"path":["gimli","constants","DwEhPe"],"kind":"struct"},"17:8659:15394":{"crate_id":17,"path":["object","common","SectionKind"],"kind":"enum"},"6:4887:12390":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_initmsg"],"kind":"struct"},"10:44:14204":{"crate_id":10,"path":["adler","Adler32"],"kind":"struct"},"17:11354:15420":{"crate_id":17,"path":["object","read","SectionIndex"],"kind":"struct"},"2:2766:8114":{"crate_id":2,"path":["core","ops","arith","Mul"],"kind":"trait"},"1:5413:2393":{"crate_id":1,"path":["std","process","ChildStdout"],"kind":"struct"},"16:7240:30650":{"crate_id":16,"path":["gimli","read","op","OperationEvaluationResult"],"kind":"enum"},"1:1837:2136":{"crate_id":1,"path":["std","env","Args"],"kind":"struct"},"9:177:14199":{"crate_id":9,"path":["miniz_oxide","inflate","stream","InflateState"],"kind":"struct"},"2:45836:2554":{"crate_id":2,"path":["core","core_arch","simd","u64x1"],"kind":"struct"},"6:6618:13478":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stack_t"],"kind":"struct"},"6:1495:9775":{"crate_id":6,"path":["libc","unix","linux_like","in_addr"],"kind":"struct"},"6:6044:29870":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","sifields_sigchld"],"kind":"struct"},"2:42181:90":{"crate_id":2,"path":["core","sync","atomic","AtomicU64"],"kind":"struct"},"6:4984:12401":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_setup"],"kind":"struct"},"2:30425:8106":{"crate_id":2,"path":["core","mem","transmutability","Assume"],"kind":"struct"},"1:5558:2397":{"crate_id":1,"path":["std","process","exit"],"kind":"function"},"17:12952:18840":{"crate_id":17,"path":["object","macho","VersionMinCommand"],"kind":"struct"},"2:9661:8235":{"crate_id":2,"path":["core","slice","sort","InsertionHole"],"kind":"struct"},"16:8166:15325":{"crate_id":16,"path":["gimli","read","unit","DebugTypesUnitHeadersIter"],"kind":"struct"},"1:5752:2422":{"crate_id":1,"path":["std","sync","barrier","BarrierWaitResult"],"kind":"struct"},"2:40271:2159":{"crate_id":2,"path":["core","ffi","c_str","FromBytesWithNulError"],"kind":"struct"},"1:6594:2433":{"crate_id":1,"path":["std","sync","remutex","ReentrantMutex"],"kind":"struct"},"1:414:165":{"crate_id":1,"path":["std","thread","local","LocalKey"],"kind":"struct"},"2:46119:2555":{"crate_id":2,"path":["core","core_arch","simd","u64x2"],"kind":"struct"},"6:6565:8930":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","sigaction"],"kind":"struct"},"17:10249:15497":{"crate_id":17,"path":["object","read","elf","relocation","RelocationSections"],"kind":"struct"},"17:12526:18812":{"crate_id":17,"path":["object","macho","Fvmlib"],"kind":"struct"},"6:1500:9776":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreq"],"kind":"struct"},"1:7852:2184":{"crate_id":1,"path":["std","fs","ReadDir"],"kind":"struct"},"17:11767:18292":{"crate_id":17,"path":["object","elf","FileHeader32"],"kind":"struct"},"2:7721:2091":{"crate_id":2,"path":["core","iter","traits","marker","TrustedLen"],"kind":"trait"},"2:21048:2490":{"crate_id":2,"path":["core","core_simd","elements","mut_ptr","SimdMutPtr"],"kind":"trait"},"6:1690:9795":{"crate_id":6,"path":["libc","unix","linux_like","mmsghdr"],"kind":"struct"},"6:7546:12575":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_mutex_t"],"kind":"struct"},"1:531:2007":{"crate_id":1,"path":["std","thread","Packet"],"kind":"struct"},"2:11633:8272":{"crate_id":2,"path":["core","str","iter","MatchesInternal"],"kind":"struct"},"17:9926:15453":{"crate_id":17,"path":["object","read","coff","section","CoffSegment"],"kind":"struct"},"5:3800:2063":{"crate_id":5,"path":["alloc","collections","linked_list","ExtractIf"],"kind":"struct"},"1:3442:2189":{"crate_id":1,"path":["std","io","Read"],"kind":"trait"},"11:1838:2078":{"crate_id":11,"path":["hashbrown","set","Intersection"],"kind":"struct"},"1:860:2059":{"crate_id":1,"path":["std","collections","hash","map","IntoIter"],"kind":"struct"},"6:5080:12411":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_can"],"kind":"struct"},"17:13862:19587":{"crate_id":17,"path":["object","pe","ImageThunkData32"],"kind":"struct"},"6:4879:1013":{"crate_id":6,"path":["libc","unix","linux_like","linux","option"],"kind":"struct"},"2:40987:8057":{"crate_id":2,"path":["core","iter","sources","repeat_with","RepeatWith"],"kind":"struct"},"17:8771:15397":{"crate_id":17,"path":["object","common","SymbolScope"],"kind":"enum"},"2:44651:7669":{"crate_id":2,"path":["core","alloc","AllocError"],"kind":"struct"},"2:26048:2271":{"crate_id":2,"path":["core","num","wrapping","Wrapping"],"kind":"struct"},"16:6347:15258":{"crate_id":16,"path":["gimli","read","abbrev","Attributes"],"kind":"enum"},"1:12049:1521":{"crate_id":1,"path":["std","u32"],"kind":"primitive"},"16:7631:15306":{"crate_id":16,"path":["gimli","read","rnglists","RawRange"],"kind":"struct"},"11:2174:27498":{"crate_id":11,"path":["hashbrown","raw","bitmask","BitMask"],"kind":"struct"},"6:4748:12373":{"crate_id":6,"path":["libc","unix","linux_like","linux","fanotify_response"],"kind":"struct"},"1:9282:2136":{"crate_id":1,"path":["std","sys","unix","args","Args"],"kind":"struct"},"2:11877:7754":{"crate_id":2,"path":["core","str","pattern","DoubleEndedSearcher"],"kind":"trait"},"17:13914:19592":{"crate_id":17,"path":["object","pe","ImageBoundForwarderRef"],"kind":"struct"},"16:3220:14331":{"crate_id":16,"path":["gimli","arch","AArch64"],"kind":"struct"},"2:48098:7658":{"crate_id":2,"path":["core","core_arch","x86","__m512bh"],"kind":"struct"},"1:1055:2073":{"crate_id":1,"path":["std","collections","hash","map","OccupiedEntry"],"kind":"struct"},"16:3635:14335":{"crate_id":16,"path":["gimli","arch","X86_64"],"kind":"struct"},"2:8389:2367":{"crate_id":2,"path":["core","panic","unwind_safe","AssertUnwindSafe"],"kind":"struct"},"2:45897:2508":{"crate_id":2,"path":["core","core_arch","simd","i16x4"],"kind":"struct"},"16:6289:15253":{"crate_id":16,"path":["gimli","read","reader","ReaderOffsetId"],"kind":"struct"},"1:356:2026":{"crate_id":1,"path":["std","thread","scoped","Scope"],"kind":"struct"},"2:44355:8262":{"crate_id":2,"path":["core","str","CharEscapeDebugContinue"],"kind":"struct"},"11:836:2070":{"crate_id":11,"path":["hashbrown","map","RawVacantEntryMut"],"kind":"struct"},"1:3186:19984":{"crate_id":1,"path":["std","io","stdio","StderrRaw"],"kind":"struct"},"16:6357:15259":{"crate_id":16,"path":["gimli","read","abbrev","AttributeSpecification"],"kind":"struct"},"6:5044:12406":{"crate_id":6,"path":["libc","unix","linux_like","linux","ifreq"],"kind":"struct"},"18:548:141":{"crate_id":18,"path":["memchr","memmem","rabinkarp","Hash"],"kind":"struct"},"2:43650:7744":{"crate_id":2,"path":["core","str","iter","RSplit"],"kind":"struct"},"15:0:1813":{"crate_id":15,"path":["addr2line"],"kind":"module"},"2:42767:73":{"crate_id":2,"path":["core","fmt","Arguments"],"kind":"struct"},"2:44038:7790":{"crate_id":2,"path":["core","str","pattern","CharSearcher"],"kind":"struct"},"1:7637:2028":{"crate_id":1,"path":["std","thread","local","AccessError"],"kind":"struct"},"1:4796:2302":{"crate_id":1,"path":["std","os","fd","owned","OwnedFd"],"kind":"struct"},"16:5940:15242":{"crate_id":16,"path":["gimli","read","cfi","UnwindTable"],"kind":"struct"},"1:11352:21810":{"crate_id":1,"path":["std","sys_common","wtf8","Wtf8Buf"],"kind":"struct"},"16:4814:14957":{"crate_id":16,"path":["gimli","constants","DwInl"],"kind":"struct"},"5:1426:2058":{"crate_id":5,"path":["alloc","collections","btree","map","IterMut"],"kind":"struct"},"2:21749:2483":{"crate_id":2,"path":["core","core_simd","vector","SimdElement"],"kind":"trait"},"1:11385:21437":{"crate_id":1,"path":["std","sys_common","wtf8","EncodeWide"],"kind":"struct"},"16:6872:15280":{"crate_id":16,"path":["gimli","read","loclists","DebugLoc"],"kind":"struct"},"6:7558:12577":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_barrier_t"],"kind":"struct"},"6:494:8882":{"crate_id":6,"path":["libc","unix","timespec"],"kind":"struct"},"2:9296:194":{"crate_id":2,"path":["core","fmt","Pointer"],"kind":"trait"},"17:10863:15413":{"crate_id":17,"path":["object","read","macho","symbol","SymbolTable"],"kind":"struct"},"6:5955:13060":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ntptimeval"],"kind":"struct"},"2:44375:8266":{"crate_id":2,"path":["core","str","IsNotEmpty"],"kind":"struct"},"2:2269:105":{"crate_id":2,"path":["core","clone","Clone"],"kind":"trait"},"17:13083:18849":{"crate_id":17,"path":["object","macho","SourceVersionCommand"],"kind":"struct"},"6:4973:12400":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_alg"],"kind":"struct"},"5:1482:2064":{"crate_id":5,"path":["alloc","collections","btree","map","ValuesMut"],"kind":"struct"},"1:10783:21697":{"crate_id":1,"path":["std","sys","unix","fs","FilePermissions"],"kind":"struct"},"2:1733:8157":{"crate_id":2,"path":["core","ptr","metadata","Pointee"],"kind":"trait"},"17:13803:19583":{"crate_id":17,"path":["object","pe","ImageArchiveMemberHeader"],"kind":"struct"},"16:7833:15315":{"crate_id":16,"path":["gimli","read","unit","DebuggingInformationEntry"],"kind":"struct"},"1:3739:2266":{"crate_id":1,"path":["std","net","tcp","TcpListener"],"kind":"struct"},"2:4:1026":{"crate_id":2,"path":["core","panic"],"kind":"macro"},"17:12631:18820":{"crate_id":17,"path":["object","macho","PreboundDylibCommand"],"kind":"struct"},"1:3343:2225":{"crate_id":1,"path":["std","io","stdio","IsTerminal"],"kind":"trait"},"17:13557:19566":{"crate_id":17,"path":["object","pe","ImageNtHeaders32"],"kind":"struct"},"6:4535:12354":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_ff_upload"],"kind":"struct"},"2:42745:128":{"crate_id":2,"path":["core","fmt","Error"],"kind":"struct"},"2:44264:7781":{"crate_id":2,"path":["core","str","lossy","Utf8Chunks"],"kind":"struct"},"17:10038:15450":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdatIterator"],"kind":"struct"},"17:9966:15413":{"crate_id":17,"path":["object","read","coff","symbol","SymbolTable"],"kind":"struct"},"1:8194:2216":{"crate_id":1,"path":["std","io","Chain"],"kind":"struct"},"2:40946:26437":{"crate_id":2,"path":["core","iter","sources","from_generator","FromGenerator"],"kind":"struct"},"6:4664:12365":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Shdr"],"kind":"struct"},"1:8834:2402":{"crate_id":1,"path":["std","process","ExitStatusError"],"kind":"struct"},"17:12592:18817":{"crate_id":17,"path":["object","macho","SubClientCommand"],"kind":"struct"},"17:13435:19560":{"crate_id":17,"path":["object","pe","ImageFileHeader"],"kind":"struct"},"2:44016:7789":{"crate_id":2,"path":["core","str","pattern","SearchStep"],"kind":"enum"},"2:21101:2486":{"crate_id":2,"path":["core","core_simd","elements","uint","SimdUint"],"kind":"trait"},"17:9344:30691":{"crate_id":17,"path":["object","read","any","FileInternal"],"kind":"enum"},"5:3142:95":{"crate_id":5,"path":["alloc","collections","btree","set","BTreeSet"],"kind":"struct"},"17:9336:129":{"crate_id":17,"path":["object","read","any","File"],"kind":"struct"},"2:2527:237":{"crate_id":2,"path":["core","convert","TryFrom"],"kind":"trait"},"2:2317:188":{"crate_id":2,"path":["core","cmp","PartialEq"],"kind":"trait"},"1:2555:2229":{"crate_id":1,"path":["std","io","buffered","bufwriter","BufWriter"],"kind":"struct"},"16:2421:14305":{"crate_id":16,"path":["gimli","common","DebugAddrIndex"],"kind":"struct"},"2:46213:2509":{"crate_id":2,"path":["core","core_arch","simd","i16x8"],"kind":"struct"},"1:3984:2284":{"crate_id":1,"path":["std","os","unix","fs","PermissionsExt"],"kind":"trait"},"2:0:500":{"crate_id":2,"path":["core"],"kind":"module"},"1:7864:2185":{"crate_id":1,"path":["std","fs","FileTimes"],"kind":"struct"},"6:1545:9782":{"crate_id":6,"path":["libc","unix","linux_like","addrinfo"],"kind":"struct"},"2:22179:2277":{"crate_id":2,"path":["core","num","error","IntErrorKind"],"kind":"enum"},"1:2361:2168":{"crate_id":1,"path":["std","fs","symlink_metadata"],"kind":"function"},"1:6809:2476":{"crate_id":1,"path":["std","std_float","StdFloat"],"kind":"trait"},"6:1709:9797":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_storage"],"kind":"struct"},"2:3651:2059":{"crate_id":2,"path":["core","array","iter","IntoIter"],"kind":"struct"},"5:3171:2057":{"crate_id":5,"path":["alloc","collections","btree","set","Iter"],"kind":"struct"},"6:653:8942":{"crate_id":6,"path":["libc","unix","linux_like","timezone"],"kind":"enum"},"17:12424:18807":{"crate_id":17,"path":["object","macho","LcStr"],"kind":"struct"},"2:39529:7845":{"crate_id":2,"path":["core","array","TryFromSliceError"],"kind":"struct"},"2:42727:68":{"crate_id":2,"path":["core","fmt","Alignment"],"kind":"enum"},"16:6142:194":{"crate_id":16,"path":["gimli","read","cfi","Pointer"],"kind":"enum"},"16:7855:15316":{"crate_id":16,"path":["gimli","read","unit","AttributeValue"],"kind":"enum"},"1:7710:2040":{"crate_id":1,"path":["std","backtrace","BacktraceStatus"],"kind":"enum"},"17:11591:15430":{"crate_id":17,"path":["object","read","Relocation"],"kind":"struct"},"1:11044:22681":{"crate_id":1,"path":["std","sys","unix","process","process_inner","posix_spawn","PosixSpawnFileActions"],"kind":"struct"},"1:3524:2213":{"crate_id":1,"path":["std","io","BufRead"],"kind":"trait"},"17:14216:19615":{"crate_id":17,"path":["object","pe","ImageAlphaRuntimeFunctionEntry"],"kind":"struct"},"2:41874:2059":{"crate_id":2,"path":["core","result","IntoIter"],"kind":"struct"},"17:14054:19607":{"crate_id":17,"path":["object","pe","ImageLoadConfigDirectory32"],"kind":"struct"},"17:1184:15464":{"crate_id":17,"path":["object","read","coff","relocation","CoffRelocationIterator"],"kind":"struct"},"2:40162:7889":{"crate_id":2,"path":["core","char","decode","DecodeUtf16"],"kind":"struct"},"16:4868:14963":{"crate_id":16,"path":["gimli","constants","DwDsc"],"kind":"struct"},"1:7998:22591":{"crate_id":1,"path":["std","io","error","SimpleMessage"],"kind":"struct"},"2:43736:7748":{"crate_id":2,"path":["core","str","iter","SplitN"],"kind":"struct"},"2:40977:8056":{"crate_id":2,"path":["core","iter","sources","repeat_n","RepeatN"],"kind":"struct"},"2:42025:88":{"crate_id":2,"path":["core","sync","atomic","AtomicU16"],"kind":"struct"},"6:5008:12403":{"crate_id":6,"path":["libc","unix","linux_like","linux","af_alg_iv"],"kind":"struct"},"16:2399:14304":{"crate_id":16,"path":["gimli","common","DebugAddrBase"],"kind":"struct"},"2:2747:7679":{"crate_id":2,"path":["core","marker","Tuple"],"kind":"trait"},"16:3295:14332":{"crate_id":16,"path":["gimli","arch","LoongArch"],"kind":"struct"},"1:12031:1539":{"crate_id":1,"path":["std","unit"],"kind":"primitive"},"2:2322:125":{"crate_id":2,"path":["core","cmp","Eq"],"kind":"trait"},"16:7494:15297":{"crate_id":16,"path":["gimli","read","pubtypes","PubTypesEntry"],"kind":"struct"},"6:4446:12343":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_keymap_entry"],"kind":"struct"},"17:14236:19617":{"crate_id":17,"path":["object","pe","ImageEnclaveConfig32"],"kind":"struct"},"2:7762:26327":{"crate_id":2,"path":["core","net","display_buffer","DisplayBuffer"],"kind":"struct"},"2:3938:2204":{"crate_id":2,"path":["core","array","Guard"],"kind":"struct"},"17:14259:19618":{"crate_id":17,"path":["object","pe","ImageEnclaveConfig64"],"kind":"struct"},"1:10795:2185":{"crate_id":1,"path":["std","sys","unix","fs","FileTimes"],"kind":"struct"},"2:21279:2192":{"crate_id":2,"path":["core","core_simd","masks","to_bitmask","sealed","Sealed"],"kind":"trait"},"2:40405:2216":{"crate_id":2,"path":["core","iter","adapters","chain","Chain"],"kind":"struct"},"17:13999:19601":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation32"],"kind":"struct"},"1:8003:22070":{"crate_id":1,"path":["std","io","error","Custom"],"kind":"struct"},"2:2699:109":{"crate_id":2,"path":["core","marker","Copy"],"kind":"trait"},"1:3221:2239":{"crate_id":1,"path":["std","io","stdio","StdinLock"],"kind":"struct"},"2:10405:7749":{"crate_id":2,"path":["core","slice","iter","SplitNMut"],"kind":"struct"},"1:10103:22597":{"crate_id":1,"path":["std","sys","unix","os","EnvStrDebug"],"kind":"struct"},"1:8173:2191":{"crate_id":1,"path":["std","io","SeekFrom"],"kind":"enum"},"2:44427:2475":{"crate_id":2,"path":["core","time","TryFromFloatSecsError"],"kind":"struct"},"2:4014:26311":{"crate_id":2,"path":["core","asserting","TryCaptureWithDebug"],"kind":"struct"},"16:5959:15243":{"crate_id":16,"path":["gimli","read","cfi","RegisterRuleIter"],"kind":"struct"},"6:4587:12359":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Ehdr"],"kind":"struct"},"17:10161:15486":{"crate_id":17,"path":["object","read","elf","section","ElfSection"],"kind":"struct"},"2:2704:228":{"crate_id":2,"path":["core","marker","Sync"],"kind":"trait"},"6:4818:12382":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_fprog"],"kind":"struct"},"5:1302:2075":{"crate_id":5,"path":["alloc","collections","btree","map","entry","OccupiedError"],"kind":"struct"},"1:2882:22446":{"crate_id":1,"path":["std","io","error","repr_bitpacked","Repr"],"kind":"struct"},"11:793:2064":{"crate_id":11,"path":["hashbrown","map","ValuesMut"],"kind":"struct"},"2:43782:7774":{"crate_id":2,"path":["core","str","iter","MatchIndices"],"kind":"struct"},"1:7759:2140":{"crate_id":1,"path":["std","env","JoinPathsError"],"kind":"struct"},"1:4740:2300":{"crate_id":1,"path":["std","os","fd","raw","FromRawFd"],"kind":"trait"},"17:13991:19600":{"crate_id":17,"path":["object","pe","ImageDynamicRelocationTable"],"kind":"struct"},"1:8217:2219":{"crate_id":1,"path":["std","io","Split"],"kind":"struct"},"1:7372:22071":{"crate_id":1,"path":["std","panicking","Hook"],"kind":"enum"},"2:11594:8273":{"crate_id":2,"path":["core","str","iter","SplitNInternal"],"kind":"struct"},"17:12502:18811":{"crate_id":17,"path":["object","macho","Section64"],"kind":"struct"},"6:7517:12571":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_condattr_t"],"kind":"struct"},"1:910:2064":{"crate_id":1,"path":["std","collections","hash","map","ValuesMut"],"kind":"struct"},"17:14329:19622":{"crate_id":17,"path":["object","pe","ImageDebugMisc"],"kind":"struct"},"2:10937:7739":{"crate_id":2,"path":["core","slice","iter","GroupByMut"],"kind":"struct"},"2:22055:26602":{"crate_id":2,"path":["core","num","diy_float","Fp"],"kind":"struct"},"2:43459:7725":{"crate_id":2,"path":["core","slice","iter","ArrayWindows"],"kind":"struct"},"2:39522:7861":{"crate_id":2,"path":["core","any","tags","Ref"],"kind":"struct"},"16:6160:30465":{"crate_id":16,"path":["gimli","read","cfi","PointerEncodingParameters"],"kind":"struct"},"2:2925:1946":{"crate_id":2,"path":["core","ops","drop","Drop"],"kind":"trait"},"2:40598:8068":{"crate_id":2,"path":["core","iter","adapters","step_by","StepBy"],"kind":"struct"},"1:3110:2248":{"crate_id":1,"path":["std","io","readbuf","BorrowedBuf"],"kind":"struct"},"2:12435:136":{"crate_id":2,"path":["core","future","future","Future"],"kind":"trait"},"2:46289:2570":{"crate_id":2,"path":["core","core_arch","simd","f32x4"],"kind":"struct"},"6:1717:9798":{"crate_id":6,"path":["libc","unix","linux_like","utsname"],"kind":"struct"},"1:3674:2263":{"crate_id":1,"path":["std","net","socket_addr","ToSocketAddrs"],"kind":"trait"},"17:3519:15583":{"crate_id":17,"path":["object","read","macho","relocation","MachORelocationIterator"],"kind":"struct"},"2:7418:159":{"crate_id":2,"path":["core","iter","traits","iterator","Iterator"],"kind":"trait"},"17:12579:18816":{"crate_id":17,"path":["object","macho","SubFrameworkCommand"],"kind":"struct"},"17:13574:19555":{"crate_id":17,"path":["object","pe","Guid"],"kind":"struct"},"6:7575:12579":{"crate_id":6,"path":["libc","unix","linux_like","linux","canfd_frame"],"kind":"struct"},"1:4133:21436":{"crate_id":1,"path":["std","os","unix","net","ancillary","AncillaryDataIter"],"kind":"struct"},"5:1411:2057":{"crate_id":5,"path":["alloc","collections","btree","map","Iter"],"kind":"struct"},"5:5366:7717":{"crate_id":5,"path":["alloc","slice","Join"],"kind":"trait"},"17:14227:19616":{"crate_id":17,"path":["object","pe","ImageRuntimeFunctionEntry"],"kind":"struct"},"17:13016:18844":{"crate_id":17,"path":["object","macho","LinkerOptionCommand"],"kind":"struct"},"6:1569:9784":{"crate_id":6,"path":["libc","unix","linux_like","fd_set"],"kind":"struct"},"5:7396:26084":{"crate_id":5,"path":["alloc","ffi","c_str","FromBytesWithNulErrorKind"],"kind":"enum"},"1:4387:2312":{"crate_id":1,"path":["std","os","unix","net","stream","UnixStream"],"kind":"struct"},"2:42436:7698":{"crate_id":2,"path":["core","fmt","num","LowerHex"],"kind":"struct"},"2:40427:8065":{"crate_id":2,"path":["core","iter","adapters","copied","Copied"],"kind":"struct"},"17:14315:19621":{"crate_id":17,"path":["object","pe","ImageCoffSymbolsHeader"],"kind":"struct"},"16:5067:15018":{"crate_id":16,"path":["gimli","constants","DwMacro"],"kind":"struct"},"15:288:14249":{"crate_id":15,"path":["addr2line","LocationRangeIter"],"kind":"struct"},"2:14:1924":{"crate_id":2,"path":["core","write"],"kind":"macro"},"2:22167:2274":{"crate_id":2,"path":["core","num","error","ParseIntError"],"kind":"struct"},"14:165:14226":{"crate_id":14,"path":["rustc_demangle","DemangleStyle"],"kind":"enum"},"17:12161:18317":{"crate_id":17,"path":["object","elf","NoteHeader64"],"kind":"struct"},"2:2752:8093":{"crate_id":2,"path":["core","marker","FnPtr"],"kind":"trait"},"2:2787:2472":{"crate_id":2,"path":["core","ops","arith","AddAssign"],"kind":"trait"},"1:6296:206":{"crate_id":1,"path":["std","sync","mpmc","Receiver"],"kind":"struct"},"6:554:8889":{"crate_id":6,"path":["libc","unix","winsize"],"kind":"struct"},"5:2966:29276":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Mut"],"kind":"struct"},"6:5068:12409":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_txtime"],"kind":"struct"},"8:0:1807":{"crate_id":8,"path":["cfg_if"],"kind":"module"},"1:11337:21734":{"crate_id":1,"path":["std","sys_common","wtf8","CodePoint"],"kind":"struct"},"16:5882:15240":{"crate_id":16,"path":["gimli","read","cfi","FrameDescriptionEntry"],"kind":"struct"},"2:40132:26071":{"crate_id":2,"path":["core","char","convert","CharErrorKind"],"kind":"enum"},"1:12040:648":{"crate_id":1,"path":["std","f32"],"kind":"primitive"},"17:12757:18827":{"crate_id":17,"path":["object","macho","DylibTableOfContents"],"kind":"struct"},"2:21303:2192":{"crate_id":2,"path":["core","core_simd","masks","sealed","Sealed"],"kind":"trait"},"9:426:14096":{"crate_id":9,"path":["miniz_oxide","MZStatus"],"kind":"enum"},"2:22153:2275":{"crate_id":2,"path":["core","num","error","TryFromIntError"],"kind":"struct"},"1:8204:2217":{"crate_id":1,"path":["std","io","Take"],"kind":"struct"},"1:6145:2618":{"crate_id":1,"path":["std","sync","mpmc","waker","Waker"],"kind":"struct"},"6:4650:12364":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Shdr"],"kind":"struct"},"2:44053:7791":{"crate_id":2,"path":["core","str","pattern","MultiCharEqSearcher"],"kind":"struct"},"17:12053:18309":{"crate_id":17,"path":["object","elf","Dyn32"],"kind":"struct"},"6:6067:13070":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_data"],"kind":"union"},"16:6815:15278":{"crate_id":16,"path":["gimli","read","line","FileEntry"],"kind":"struct"},"1:555:2009":{"crate_id":1,"path":["std","thread","JoinHandle"],"kind":"struct"},"2:43511:7740":{"crate_id":2,"path":["core","slice","iter","RChunks"],"kind":"struct"},"2:46645:2544":{"crate_id":2,"path":["core","core_arch","simd","u16x16"],"kind":"struct"},"6:4483:12348":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_constant_effect"],"kind":"struct"},"16:7474:15295":{"crate_id":16,"path":["gimli","read","pubnames","DebugPubNames"],"kind":"struct"},"18:690:19663":{"crate_id":18,"path":["memchr","memmem","FinderRev"],"kind":"struct"},"16:6658:15273":{"crate_id":16,"path":["gimli","read","line","LineInstructions"],"kind":"struct"},"2:40474:26442":{"crate_id":2,"path":["core","iter","adapters","flatten","FlattenCompat"],"kind":"struct"},"6:5829:13053":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","cmsghdr"],"kind":"struct"},"17:12004:18306":{"crate_id":17,"path":["object","elf","Rela64"],"kind":"struct"},"1:4635:22363":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt","st_mtime"],"kind":"foreign_type"},"6:5805:13051":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","glob64_t"],"kind":"struct"},"6:4374:12335":{"crate_id":6,"path":["libc","unix","linux_like","linux","fsid_t"],"kind":"struct"},"17:11955:18302":{"crate_id":17,"path":["object","elf","Syminfo64"],"kind":"struct"},"16:6396:15262":{"crate_id":16,"path":["gimli","read","aranges","ArangeHeader"],"kind":"struct"},"9:52:14113":{"crate_id":9,"path":["miniz_oxide","inflate","core","DecompressorOxide"],"kind":"struct"},"2:1918:7685":{"crate_id":2,"path":["core","ptr","unique","Unique"],"kind":"struct"},"6:1520:9779":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr"],"kind":"struct"},"17:10293:15504":{"crate_id":17,"path":["object","read","elf","note","NoteIterator"],"kind":"struct"},"11:1517:14218":{"crate_id":11,"path":["hashbrown","rustc_entry","RustcOccupiedEntry"],"kind":"struct"},"17:13604:19569":{"crate_id":17,"path":["object","pe","AnonObjectHeaderV2"],"kind":"struct"},"17:13096:18850":{"crate_id":17,"path":["object","macho","DataInCodeEntry"],"kind":"struct"},"1:12050:1522":{"crate_id":1,"path":["std","u64"],"kind":"primitive"},"17:11852:18296":{"crate_id":17,"path":["object","elf","SectionHeader64"],"kind":"struct"},"2:40517:8078":{"crate_id":2,"path":["core","iter","adapters","map","Map"],"kind":"struct"},"2:2836:8125":{"crate_id":2,"path":["core","ops","bit","Shr"],"kind":"trait"},"17:11056:15646":{"crate_id":17,"path":["object","read","pe","export","ExportTarget"],"kind":"enum"},"5:3594:2058":{"crate_id":5,"path":["alloc","collections","linked_list","IterMut"],"kind":"struct"},"2:3145:8132":{"crate_id":2,"path":["core","ops","range","OneSidedRange"],"kind":"trait"},"16:4753:14944":{"crate_id":16,"path":["gimli","constants","DwId"],"kind":"struct"},"17:13109:18851":{"crate_id":17,"path":["object","macho","NoteCommand"],"kind":"struct"},"17:13905:19591":{"crate_id":17,"path":["object","pe","ImageBoundImportDescriptor"],"kind":"struct"},"2:47677:2517":{"crate_id":2,"path":["core","core_arch","simd","i32x16"],"kind":"struct"},"2:4049:7678":{"crate_id":2,"path":["core","async_iter","async_iter","AsyncIterator"],"kind":"trait"},"17:9977:15414":{"crate_id":17,"path":["object","read","coff","symbol","SymbolIterator"],"kind":"struct"},"17:12671:18823":{"crate_id":17,"path":["object","macho","RoutinesCommand32"],"kind":"struct"},"6:4764:12375":{"crate_id":6,"path":["libc","unix","linux_like","linux","regmatch_t"],"kind":"struct"},"17:12659:18822":{"crate_id":17,"path":["object","macho","ThreadCommand"],"kind":"struct"},"6:7609:14050":{"crate_id":6,"path":["libc","unix","align","in6_addr"],"kind":"struct"},"1:8457:2380":{"crate_id":1,"path":["std","path","State"],"kind":"enum"},"17:11416:15423":{"crate_id":17,"path":["object","read","SymbolMap"],"kind":"struct"},"1:7593:22669":{"crate_id":1,"path":["std","backtrace_rs","Bomb"],"kind":"struct"},"18:574:31356":{"crate_id":18,"path":["memchr","memmem","twoway","Forward"],"kind":"struct"},"2:21312:2485":{"crate_id":2,"path":["core","core_simd","masks","Mask"],"kind":"struct"},"2:2523:238":{"crate_id":2,"path":["core","convert","TryInto"],"kind":"trait"},"2:39345:198":{"crate_id":2,"path":["core","ops","range","Range"],"kind":"struct"},"1:4904:2347":{"crate_id":1,"path":["std","os","net","linux_ext","addr","SocketAddrExt"],"kind":"trait"},"2:9936:2192":{"crate_id":2,"path":["core","slice","index","private_slice_index","Sealed"],"kind":"trait"},"2:46881:2510":{"crate_id":2,"path":["core","core_arch","simd","i16x16"],"kind":"struct"},"17:13140:18853":{"crate_id":17,"path":["object","macho","Nlist64"],"kind":"struct"},"11:844:2071":{"crate_id":11,"path":["hashbrown","map","RawEntryBuilder"],"kind":"struct"},"2:2520:133":{"crate_id":2,"path":["core","convert","From"],"kind":"trait"},"17:8872:15400":{"crate_id":17,"path":["object","common","FileFlags"],"kind":"enum"},"17:11872:18297":{"crate_id":17,"path":["object","elf","CompressionHeader32"],"kind":"struct"},"17:9939:15452":{"crate_id":17,"path":["object","read","coff","section","CoffSectionIterator"],"kind":"struct"},"17:11924:18300":{"crate_id":17,"path":["object","elf","Sym64"],"kind":"struct"},"11:1818:2057":{"crate_id":11,"path":["hashbrown","set","Iter"],"kind":"struct"},"17:10458:15545":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSubsectionIterator"],"kind":"struct"},"2:4026:103":{"crate_id":2,"path":["core","asserting","Capture"],"kind":"struct"},"16:8068:15319":{"crate_id":16,"path":["gimli","read","unit","EntriesRaw"],"kind":"struct"},"1:2359:2167":{"crate_id":1,"path":["std","fs","metadata"],"kind":"function"},"1:8480:2381":{"crate_id":1,"path":["std","path","PrefixComponent"],"kind":"struct"},"2:40172:7890":{"crate_id":2,"path":["core","char","decode","DecodeUtf16Error"],"kind":"struct"},"16:2465:14307":{"crate_id":16,"path":["gimli","common","DebugInfoOffset"],"kind":"struct"},"2:43906:7762":{"crate_id":2,"path":["core","str","iter","SplitWhitespace"],"kind":"struct"},"2:39494:7836":{"crate_id":2,"path":["core","any","TypeId"],"kind":"struct"},"5:3581:2057":{"crate_id":5,"path":["alloc","collections","linked_list","Iter"],"kind":"struct"},"5:3183:27914":{"crate_id":5,"path":["alloc","collections","btree","set","DifferenceInner"],"kind":"enum"},"2:11872:7756":{"crate_id":2,"path":["core","str","pattern","ReverseSearcher"],"kind":"trait"},"17:10280:15538":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdatSectionIterator"],"kind":"struct"},"1:9054:21761":{"crate_id":1,"path":["std","sync","mpmc","select","Selected"],"kind":"enum"},"17:12905:18837":{"crate_id":17,"path":["object","macho","FilesetEntryCommand"],"kind":"struct"},"1:8230:2265":{"crate_id":1,"path":["std","net","tcp","Incoming"],"kind":"struct"},"16:2857:14323":{"crate_id":16,"path":["gimli","common","DebugTypeSignature"],"kind":"struct"},"16:2637:14314":{"crate_id":16,"path":["gimli","common","DebugMacroOffset"],"kind":"struct"},"18:727:19665":{"crate_id":18,"path":["memchr","memmem","SearcherConfig"],"kind":"struct"},"6:6136:12246":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","sysinfo"],"kind":"struct"},"1:2375:2172":{"crate_id":1,"path":["std","fs","read_link"],"kind":"function"},"6:5994:13064":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","seminfo"],"kind":"struct"},"5:4074:2058":{"crate_id":5,"path":["alloc","collections","vec_deque","iter_mut","IterMut"],"kind":"struct"},"16:5301:15204":{"crate_id":16,"path":["gimli","constants","DwOp"],"kind":"struct"},"2:4002:26325":{"crate_id":2,"path":["core","asserting","TryCaptureWithoutDebug"],"kind":"struct"},"1:11450:21465":{"crate_id":1,"path":["std","sys_common","net","LookupHost"],"kind":"struct"},"16:8176:15326":{"crate_id":16,"path":["gimli","read","value","ValueType"],"kind":"enum"},"2:2777:8116":{"crate_id":2,"path":["core","ops","arith","Rem"],"kind":"trait"},"6:1696:9796":{"crate_id":6,"path":["libc","unix","linux_like","epoll_event"],"kind":"struct"},"1:2569:22690":{"crate_id":1,"path":["std","io","buffered","bufwriter","flush_buf","BufGuard"],"kind":"struct"},"6:1595:9787":{"crate_id":6,"path":["libc","unix","linux_like","Dl_info"],"kind":"struct"},"18:521:19667":{"crate_id":18,"path":["memchr","memmem","prefilter","Prefilter"],"kind":"enum"},"2:43530:7741":{"crate_id":2,"path":["core","slice","iter","RChunksExact"],"kind":"struct"},"2:20929:8145":{"crate_id":2,"path":["core","core_simd","elements","const_ptr","SimdConstPtr","from_exposed_addr"],"kind":"foreign_type"},"1:8806:186":{"crate_id":1,"path":["std","process","Output"],"kind":"struct"},"2:43915:7761":{"crate_id":2,"path":["core","str","iter","SplitAsciiWhitespace"],"kind":"struct"},"2:43602:7766":{"crate_id":2,"path":["core","str","iter","Chars"],"kind":"struct"},"1:923:2067":{"crate_id":1,"path":["std","collections","hash","map","RawEntryBuilderMut"],"kind":"struct"},"6:1638:9790":{"crate_id":6,"path":["libc","unix","linux_like","ifaddrs"],"kind":"struct"},"11:1611:30156":{"crate_id":11,"path":["hashbrown","scopeguard","ScopeGuard"],"kind":"struct"},"17:12377:18804":{"crate_id":17,"path":["object","macho","MachHeader32"],"kind":"struct"},"17:10906:15564":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbol"],"kind":"struct"},"6:4626:12362":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Phdr"],"kind":"struct"},"2:8388:2368":{"crate_id":2,"path":["core","panic","unwind_safe","RefUnwindSafe"],"kind":"trait"},"17:11568:15429":{"crate_id":17,"path":["object","read","RelocationTarget"],"kind":"enum"},"6:4685:12366":{"crate_id":6,"path":["libc","unix","linux_like","linux","mntent"],"kind":"struct"},"2:2791:2474":{"crate_id":2,"path":["core","ops","arith","SubAssign"],"kind":"trait"},"5:7282:2059":{"crate_id":5,"path":["alloc","collections","linked_list","IntoIter"],"kind":"struct"},"2:43576:7772":{"crate_id":2,"path":["core","str","error","Utf8Error"],"kind":"struct"},"6:6077:13071":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","utmpx"],"kind":"struct"},"2:39267:7684":{"crate_id":2,"path":["core","ops","generator","GeneratorState"],"kind":"enum"},"17:9875:15469":{"crate_id":17,"path":["object","read","coff","file","CoffCommon"],"kind":"struct"},"6:5775:13048":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","aiocb"],"kind":"struct"},"2:21134:2480":{"crate_id":2,"path":["core","core_simd","eq","SimdPartialEq"],"kind":"trait"},"1:10470:22673":{"crate_id":1,"path":["std","sys","unix","stack_overflow","Handler"],"kind":"struct"},"2:43167:8252":{"crate_id":2,"path":["core","slice","sort","TimSortRun"],"kind":"struct"},"2:9256:132":{"crate_id":2,"path":["core","fmt","Formatter"],"kind":"struct"},"17:14037:19605":{"crate_id":17,"path":["object","pe","ImagePrologueDynamicRelocationHeader"],"kind":"struct"},"17:12891:18836":{"crate_id":17,"path":["object","macho","LinkeditDataCommand"],"kind":"struct"},"1:11813:22687":{"crate_id":1,"path":["std","backtrace_rs","symbolize","gimli","mmap","Mmap"],"kind":"struct"},"17:10303:15539":{"crate_id":17,"path":["object","read","elf","note","Note"],"kind":"struct"},"16:7539:15301":{"crate_id":16,"path":["gimli","read","rnglists","DebugRngLists"],"kind":"struct"},"17:10994:15616":{"crate_id":17,"path":["object","read","pe","section","PeSegment"],"kind":"struct"},"2:41756:2365":{"crate_id":2,"path":["core","panic","location","Location"],"kind":"struct"},"16:5553:15225":{"crate_id":16,"path":["gimli","read","addr","DebugAddr"],"kind":"struct"},"1:9105:218":{"crate_id":1,"path":["std","sync","rwlock","RwLockReadGuard"],"kind":"struct"},"16:5673:15232":{"crate_id":16,"path":["gimli","read","cfi","CieOffsetEncoding"],"kind":"enum"},"16:4476:14859":{"crate_id":16,"path":["gimli","constants","DwLle"],"kind":"struct"},"17:14417:19629":{"crate_id":17,"path":["object","pe","ImageCor20Header"],"kind":"struct"},"2:40200:7770":{"crate_id":2,"path":["core","char","EscapeDebug"],"kind":"struct"},"2:9727:26313":{"crate_id":2,"path":["core","slice","sort","merge","MergeHole"],"kind":"struct"},"2:2830:8124":{"crate_id":2,"path":["core","ops","bit","Shl"],"kind":"trait"},"6:7540:12574":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_cond_t"],"kind":"struct"},"6:5849:13013":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","mallinfo"],"kind":"struct"},"17:10051:15449":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdat"],"kind":"struct"},"2:46386:26554":{"crate_id":2,"path":["core","core_arch","simd","m8x16"],"kind":"struct"},"17:11118:15648":{"crate_id":17,"path":["object","read","pe","import","ImportThunkList"],"kind":"struct"},"16:7025:30231":{"crate_id":16,"path":["gimli","read","lookup","LookupEntryIter"],"kind":"struct"},"16:6018:15246":{"crate_id":16,"path":["gimli","read","cfi","RegisterRule"],"kind":"enum"},"17:10486:15547":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSubsubsectionIterator"],"kind":"struct"},"16:6724:15275":{"crate_id":16,"path":["gimli","read","line","LineProgramHeader"],"kind":"struct"},"16:2332:14301":{"crate_id":16,"path":["gimli","common","LineEncoding"],"kind":"struct"},"1:9040:15288":{"crate_id":1,"path":["std","sync","mpmc","select","Operation"],"kind":"struct"},"5:4846:204":{"crate_id":5,"path":["alloc","rc","Rc"],"kind":"struct"},"2:4339:7861":{"crate_id":2,"path":["core","cell","Ref"],"kind":"struct"},"1:12037:1504":{"crate_id":1,"path":["std","tuple"],"kind":"primitive"},"2:22428:178":{"crate_id":2,"path":["core","num","nonzero","NonZeroU8"],"kind":"struct"},"2:43608:7765":{"crate_id":2,"path":["core","str","iter","CharIndices"],"kind":"struct"},"1:5498:2396":{"crate_id":1,"path":["std","process","Stdio"],"kind":"struct"},"2:12690:140":{"crate_id":2,"path":["core","alloc","global","GlobalAlloc"],"kind":"trait"},"2:1821:2102":{"crate_id":2,"path":["core","ptr","non_null","NonNull"],"kind":"struct"},"17:13448:19561":{"crate_id":17,"path":["object","pe","ImageDataDirectory"],"kind":"struct"},"2:2929:1947":{"crate_id":2,"path":["core","ops","function","Fn"],"kind":"trait"},"6:4854:12387":{"crate_id":6,"path":["libc","unix","linux_like","linux","file_clone_range"],"kind":"struct"},"2:46567:2538":{"crate_id":2,"path":["core","core_arch","simd","u8x32"],"kind":"struct"},"11:1822:2059":{"crate_id":11,"path":["hashbrown","set","IntoIter"],"kind":"struct"},"17:13167:18854":{"crate_id":17,"path":["object","macho","RelocationInfo"],"kind":"struct"},"2:23238:2270":{"crate_id":2,"path":["core","num","saturating","Saturating"],"kind":"struct"},"2:2687:220":{"crate_id":2,"path":["core","marker","Send"],"kind":"trait"},"16:3810:14361":{"crate_id":16,"path":["gimli","constants","DwUt"],"kind":"struct"},"17:11520:15428":{"crate_id":17,"path":["object","read","Export"],"kind":"struct"},"6:6607:13477":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","siginfo_t"],"kind":"struct"},"2:40497:8077":{"crate_id":2,"path":["core","iter","adapters","inspect","Inspect"],"kind":"struct"},"16:5720:15235":{"crate_id":16,"path":["gimli","read","cfi","CfiEntriesIter"],"kind":"struct"},"1:6356:166":{"crate_id":1,"path":["std","sync","mutex","Mutex"],"kind":"struct"},"1:9192:22289":{"crate_id":1,"path":["std","sys","common","thread_local","fast_local","DtorState"],"kind":"enum"},"2:46097:2549":{"crate_id":2,"path":["core","core_arch","simd","u32x4"],"kind":"struct"},"2:44379:8260":{"crate_id":2,"path":["core","str","BytesIsNotEmpty"],"kind":"struct"},"6:6805:13486":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ipc_perm"],"kind":"struct"},"2:9545:7913":{"crate_id":2,"path":["core","hash","BuildHasherDefault"],"kind":"struct"},"17:12851:18833":{"crate_id":17,"path":["object","macho","PrebindCksumCommand"],"kind":"struct"},"6:5979:13062":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","Elf64_Chdr"],"kind":"struct"},"1:8566:2385":{"crate_id":1,"path":["std","path","StripPrefixError"],"kind":"struct"},"18:660:19660":{"crate_id":18,"path":["memchr","memmem","FindIter"],"kind":"struct"},"1:894:2062":{"crate_id":1,"path":["std","collections","hash","map","Drain"],"kind":"struct"},"17:14282:19619":{"crate_id":17,"path":["object","pe","ImageEnclaveImport"],"kind":"struct"},"1:8285:2319":{"crate_id":1,"path":["std","os","unix","net","ancillary","SocketCred"],"kind":"struct"},"2:40346:2161":{"crate_id":2,"path":["core","ffi","VaListImpl"],"kind":"struct"},"17:13707:19574":{"crate_id":17,"path":["object","pe","ImageAuxSymbolTokenDef"],"kind":"struct"},"1:7763:22552":{"crate_id":1,"path":["std","error","private","Internal"],"kind":"struct"},"17:10430:15544":{"crate_id":17,"path":["object","read","elf","version","VernauxIterator"],"kind":"struct"},"17:11144:15639":{"crate_id":17,"path":["object","read","pe","import","DelayLoadImportTable"],"kind":"struct"},"17:13830:19584":{"crate_id":17,"path":["object","pe","ImageExportDirectory"],"kind":"struct"},"1:2917:210":{"crate_id":1,"path":["std","io","error","Result"],"kind":"typedef"},"2:49943:2498":{"crate_id":2,"path":["core","core_simd","swizzle","Which"],"kind":"enum"},"1:7847:2183":{"crate_id":1,"path":["std","fs","Metadata"],"kind":"struct"},"17:12254:18800":{"crate_id":17,"path":["object","macho","DyldCacheHeader"],"kind":"struct"},"6:568:8891":{"crate_id":6,"path":["libc","unix","sigval"],"kind":"struct"},"1:1561:2062":{"crate_id":1,"path":["std","collections","hash","set","Drain"],"kind":"struct"},"14:31:14225":{"crate_id":14,"path":["rustc_demangle","v0","Demangle"],"kind":"struct"},"17:13847:19585":{"crate_id":17,"path":["object","pe","ImageImportByName"],"kind":"struct"},"2:4148:7867":{"crate_id":2,"path":["core","cell","once","OnceCell"],"kind":"struct"},"1:5126:191":{"crate_id":1,"path":["std","path","PathBuf"],"kind":"struct"},"2:2250:98":{"crate_id":2,"path":["core","borrow","BorrowMut"],"kind":"trait"},"2:3389:7832":{"crate_id":2,"path":["core","any","Demand"],"kind":"struct"},"5:4032:27919":{"crate_id":5,"path":["alloc","collections","vec_deque","drain","drop","DropGuard"],"kind":"struct"},"1:8800:2400":{"crate_id":1,"path":["std","process","CommandArgs"],"kind":"struct"},"11:2060:2074":{"crate_id":11,"path":["hashbrown","set","VacantEntry"],"kind":"struct"},"1:940:2069":{"crate_id":1,"path":["std","collections","hash","map","RawOccupiedEntryMut"],"kind":"struct"},"1:2207:129":{"crate_id":1,"path":["std","fs","File"],"kind":"struct"},"1:12044:752":{"crate_id":1,"path":["std","i32"],"kind":"primitive"},"5:2035:2098":{"crate_id":5,"path":["alloc","collections","btree","map","Cursor"],"kind":"struct"},"16:6427:15263":{"crate_id":16,"path":["gimli","read","aranges","ArangeEntryIter"],"kind":"struct"},"6:1663:9792":{"crate_id":6,"path":["libc","unix","linux_like","arpreq"],"kind":"struct"},"2:44558:211":{"crate_id":2,"path":["core","future","ResumeTy"],"kind":"struct"},"11:285:30136":{"crate_id":11,"path":["hashbrown","raw","RawIterRange"],"kind":"struct"},"2:46957:2522":{"crate_id":2,"path":["core","core_arch","simd","i64x4"],"kind":"struct"},"2:21178:2192":{"crate_id":2,"path":["core","core_simd","lane_count","sealed","Sealed"],"kind":"trait"},"6:4395:12180":{"crate_id":6,"path":["libc","unix","linux_like","linux","if_nameindex"],"kind":"struct"},"1:4046:2289":{"crate_id":1,"path":["std","os","unix","fs","DirEntryExt2"],"kind":"trait"},"2:47950:7648":{"crate_id":2,"path":["core","core_arch","x86","__m128"],"kind":"struct"},"2:44159:7795":{"crate_id":2,"path":["core","str","pattern","CharPredicateSearcher"],"kind":"struct"},"2:40446:8072":{"crate_id":2,"path":["core","iter","adapters","enumerate","Enumerate"],"kind":"struct"},"17:11199:15641":{"crate_id":17,"path":["object","read","pe","resource","ResourceDirectory"],"kind":"struct"},"2:2695:7680":{"crate_id":2,"path":["core","marker","Unsize"],"kind":"trait"},"1:3841:2268":{"crate_id":1,"path":["std","net","udp","UdpSocket"],"kind":"struct"},"1:9020:22570":{"crate_id":1,"path":["std","sync","mpmc","list","Position"],"kind":"struct"},"16:3777:14352":{"crate_id":16,"path":["gimli","constants","DwSectV2"],"kind":"struct"},"17:11007:15615":{"crate_id":17,"path":["object","read","pe","section","PeSectionIterator"],"kind":"struct"},"1:4637:22365":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt","st_ctime"],"kind":"foreign_type"},"5:6637:27919":{"crate_id":5,"path":["alloc","vec","into_iter","drop","DropGuard"],"kind":"struct"},"17:1973:15491":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbolIterator"],"kind":"struct"},"2:2932:1948":{"crate_id":2,"path":["core","ops","function","FnMut"],"kind":"trait"},"17:9571:30980":{"crate_id":17,"path":["object","read","any","ComdatSectionIteratorInternal"],"kind":"enum"},"16:3441:14333":{"crate_id":16,"path":["gimli","arch","RiscV"],"kind":"struct"},"17:14380:19626":{"crate_id":17,"path":["object","pe","NonPagedDebugInfo"],"kind":"struct"},"16:0:1814":{"crate_id":16,"path":["gimli"],"kind":"module"},"17:11155:15649":{"crate_id":17,"path":["object","read","pe","import","DelayLoadDescriptorIterator"],"kind":"struct"},"17:9806:15440":{"crate_id":17,"path":["object","read","archive","Members"],"kind":"enum"},"5:1672:27919":{"crate_id":5,"path":["alloc","collections","btree","map","drop","DropGuard"],"kind":"struct"},"2:20724:26321":{"crate_id":2,"path":["core","core_simd","swizzle","interleave","Lo"],"kind":"struct"},"17:12864:18834":{"crate_id":17,"path":["object","macho","UuidCommand"],"kind":"struct"},"2:9292:7698":{"crate_id":2,"path":["core","fmt","LowerHex"],"kind":"trait"},"2:43682:7779":{"crate_id":2,"path":["core","str","iter","SplitTerminator"],"kind":"struct"},"5:1503:2066":{"crate_id":5,"path":["alloc","collections","btree","map","IntoValues"],"kind":"struct"},"5:676:231":{"crate_id":5,"path":["alloc","borrow","ToOwned"],"kind":"trait"},"17:14044:19606":{"crate_id":17,"path":["object","pe","ImageEpilogueDynamicRelocationHeader"],"kind":"struct"},"16:7362:15290":{"crate_id":16,"path":["gimli","read","op","EvaluationResult"],"kind":"enum"},"2:6987:2245":{"crate_id":2,"path":["core","iter","sources","empty","Empty"],"kind":"struct"},"6:5799:13050":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__timeval"],"kind":"struct"},"17:8997:15374":{"crate_id":17,"path":["object","endian","Endianness"],"kind":"enum"},"2:30194:2272":{"crate_id":2,"path":["core","num","FpCategory"],"kind":"enum"},"1:10943:2140":{"crate_id":1,"path":["std","sys","unix","os","JoinPathsError"],"kind":"struct"},"17:10123:15459":{"crate_id":17,"path":["object","read","elf","section","SectionTable"],"kind":"struct"},"1:1554:2057":{"crate_id":1,"path":["std","collections","hash","set","Iter"],"kind":"struct"},"6:4917:12393":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_rcvinfo"],"kind":"struct"},"2:44367:8267":{"crate_id":2,"path":["core","str","IsWhitespace"],"kind":"struct"},"2:41986:81":{"crate_id":2,"path":["core","sync","atomic","AtomicI16"],"kind":"struct"},"17:12691:18824":{"crate_id":17,"path":["object","macho","RoutinesCommand64"],"kind":"struct"},"6:4616:12361":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Sym"],"kind":"struct"},"17:10568:15556":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCacheImage"],"kind":"struct"},"17:12815:18830":{"crate_id":17,"path":["object","macho","DylibReference"],"kind":"struct"},"5:3204:2080":{"crate_id":5,"path":["alloc","collections","btree","set","SymmetricDifference"],"kind":"struct"},"16:6886:15281":{"crate_id":16,"path":["gimli","read","loclists","DebugLocLists"],"kind":"struct"},"1:1976:185":{"crate_id":1,"path":["std","ffi","os_str","OsString"],"kind":"struct"},"1:2492:2228":{"crate_id":1,"path":["std","io","buffered","bufreader","BufReader"],"kind":"struct"},"6:5836:13054":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","termios"],"kind":"struct"},"18:531:19671":{"crate_id":18,"path":["memchr","memmem","prefilter","PrefilterState"],"kind":"struct"},"17:9223:15407":{"crate_id":17,"path":["object","endian","I64Bytes"],"kind":"struct"},"17:12394:18805":{"crate_id":17,"path":["object","macho","MachHeader64"],"kind":"struct"},"15:306:14250":{"crate_id":15,"path":["addr2line","LocationRangeUnitIter"],"kind":"struct"},"5:7253:198":{"crate_id":5,"path":["alloc","collections","btree","set","Range"],"kind":"struct"},"17:12605:18818":{"crate_id":17,"path":["object","macho","SubUmbrellaCommand"],"kind":"struct"},"6:6671:9905":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statfs64"],"kind":"struct"},"2:21015:2495":{"crate_id":2,"path":["core","core_simd","elements","int","SimdInt"],"kind":"trait"},"2:40313:1670":{"crate_id":2,"path":["core","ffi","c_char"],"kind":"typedef"},"11:1538:14219":{"crate_id":11,"path":["hashbrown","rustc_entry","RustcVacantEntry"],"kind":"struct"},"6:6720:13481":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_xmmreg"],"kind":"struct"},"2:2517:149":{"crate_id":2,"path":["core","convert","Into"],"kind":"trait"},"2:47801:2572":{"crate_id":2,"path":["core","core_arch","simd","f32x16"],"kind":"struct"},"16:8105:15321":{"crate_id":16,"path":["gimli","read","unit","EntriesTree"],"kind":"struct"},"17:11888:18298":{"crate_id":17,"path":["object","elf","CompressionHeader64"],"kind":"struct"},"1:11591:7665":{"crate_id":1,"path":["std","alloc","System"],"kind":"struct"},"2:40252:7882":{"crate_id":2,"path":["core","char","TryFromCharError"],"kind":"struct"},"1:6465:2432":{"crate_id":1,"path":["std","sync","once_lock","OnceLock"],"kind":"struct"},"1:481:22693":{"crate_id":1,"path":["std","thread","spawn_unchecked_","MaybeDangling"],"kind":"struct"},"6:5882:13056":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_mmap_req"],"kind":"struct"},"2:40356:2160":{"crate_id":2,"path":["core","ffi","VaList"],"kind":"struct"},"17:9850:15443":{"crate_id":17,"path":["object","read","archive","MemberHeader"],"kind":"enum"},"2:12448:151":{"crate_id":2,"path":["core","future","into_future","IntoFuture"],"kind":"trait"},"17:2164:15510":{"crate_id":17,"path":["object","read","elf","relocation","ElfSectionRelocationIterator"],"kind":"struct"},"17:9528:30907":{"crate_id":17,"path":["object","read","any","ComdatIteratorInternal"],"kind":"enum"},"1:952:2071":{"crate_id":1,"path":["std","collections","hash","map","RawEntryBuilder"],"kind":"struct"},"6:4895:12391":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_sndrcvinfo"],"kind":"struct"},"17:8924:15402":{"crate_id":17,"path":["object","common","SectionFlags"],"kind":"enum"},"1:2387:2178":{"crate_id":1,"path":["std","fs","read_dir"],"kind":"function"},"2:22626:173":{"crate_id":2,"path":["core","num","nonzero","NonZeroI8"],"kind":"struct"},"2:6655:8063":{"crate_id":2,"path":["core","iter","adapters","zip","zip"],"kind":"function"},"17:11669:15660":{"crate_id":17,"path":["object","archive","Header"],"kind":"struct"},"17:13854:19586":{"crate_id":17,"path":["object","pe","ImageThunkData64"],"kind":"struct"},"1:3414:2204":{"crate_id":1,"path":["std","io","Guard"],"kind":"struct"},"6:587:8894":{"crate_id":6,"path":["libc","unix","servent"],"kind":"struct"},"2:11668:7750":{"crate_id":2,"path":["core","str","iter","SplitInclusive"],"kind":"struct"},"17:12186:18319":{"crate_id":17,"path":["object","elf","GnuHashHeader"],"kind":"struct"},"17:9442:30670":{"crate_id":17,"path":["object","read","any","SegmentInternal"],"kind":"enum"},"16:4928:14975":{"crate_id":16,"path":["gimli","constants","DwDefaulted"],"kind":"struct"},"1:3386:2246":{"crate_id":1,"path":["std","io","util","Repeat"],"kind":"struct"},"1:6193:22076":{"crate_id":1,"path":["std","sync","mpmc","zero","ZeroToken"],"kind":"struct"},"2:2808:8123":{"crate_id":2,"path":["core","ops","bit","Not"],"kind":"trait"},"14:202:7800":{"crate_id":14,"path":["rustc_demangle","v0","ParseError"],"kind":"enum"},"2:43754:7746":{"crate_id":2,"path":["core","str","iter","RSplitN"],"kind":"struct"},"17:10377:15515":{"crate_id":17,"path":["object","read","elf","version","VersionTable"],"kind":"struct"},"1:7523:15392":{"crate_id":1,"path":["std","backtrace_rs","symbolize","Symbol"],"kind":"struct"},"5:685:111":{"crate_id":5,"path":["alloc","borrow","Cow"],"kind":"enum"},"5:6558:2059":{"crate_id":5,"path":["alloc","vec","into_iter","IntoIter"],"kind":"struct"},"16:6484:15267":{"crate_id":16,"path":["gimli","read","index","UnitIndex"],"kind":"struct"},"11:332:30145":{"crate_id":11,"path":["hashbrown","raw","RawIntoIter"],"kind":"struct"},"2:44067:7792":{"crate_id":2,"path":["core","str","pattern","CharArraySearcher"],"kind":"struct"},"17:11815:18294":{"crate_id":17,"path":["object","elf","Ident"],"kind":"struct"},"6:4341:12333":{"crate_id":6,"path":["libc","unix","linux_like","linux","signalfd_siginfo"],"kind":"struct"},"18:707:7757":{"crate_id":18,"path":["memchr","memmem","Searcher"],"kind":"struct"},"2:42662:26596":{"crate_id":2,"path":["core","fmt","rt","Placeholder"],"kind":"struct"},"1:8407:2379":{"crate_id":1,"path":["std","path","Prefix"],"kind":"enum"},"2:45734:2507":{"crate_id":2,"path":["core","core_arch","simd","i16x2"],"kind":"struct"},"16:3042:14329":{"crate_id":16,"path":["gimli","common","DwarfFileType"],"kind":"enum"},"2:8814:86":{"crate_id":2,"path":["core","sync","atomic","AtomicPtr"],"kind":"struct"},"6:1673:9793":{"crate_id":6,"path":["libc","unix","linux_like","arpreq_old"],"kind":"struct"},"9:507:14097":{"crate_id":9,"path":["miniz_oxide","StreamResult"],"kind":"struct"},"2:10143:2219":{"crate_id":2,"path":["core","slice","iter","Split"],"kind":"struct"},"16:8138:15323":{"crate_id":16,"path":["gimli","read","unit","EntriesTreeIter"],"kind":"struct"},"6:4770:12376":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_extended_err"],"kind":"struct"},"6:4787:12378":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_j1939"],"kind":"struct"},"16:4506:14865":{"crate_id":16,"path":["gimli","constants","DwDs"],"kind":"struct"},"6:5767:13047":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","statx_timestamp"],"kind":"struct"},"17:11791:18293":{"crate_id":17,"path":["object","elf","FileHeader64"],"kind":"struct"},"6:6711:13480":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_fpxreg"],"kind":"struct"},"11:1121:2075":{"crate_id":11,"path":["hashbrown","map","OccupiedError"],"kind":"struct"},"5:2461:27837":{"crate_id":5,"path":["alloc","collections","btree","node","NodeRef"],"kind":"struct"},"6:4556:12357":{"crate_id":6,"path":["libc","unix","linux_like","linux","dl_phdr_info"],"kind":"struct"},"6:4794:12379":{"crate_id":6,"path":["libc","unix","linux_like","linux","can_filter"],"kind":"struct"},"17:10969:15644":{"crate_id":17,"path":["object","read","pe","file","PeComdatSectionIterator"],"kind":"struct"},"2:41947:91":{"crate_id":2,"path":["core","sync","atomic","AtomicU8"],"kind":"struct"},"17:12936:18839":{"crate_id":17,"path":["object","macho","EncryptionInfoCommand64"],"kind":"struct"},"16:3058:14330":{"crate_id":16,"path":["gimli","arch","Arm"],"kind":"struct"},"15:327:14254":{"crate_id":15,"path":["addr2line","RangeAttributes"],"kind":"struct"},"6:541:8887":{"crate_id":6,"path":["libc","unix","iovec"],"kind":"struct"},"6:6171:13100":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","semid_ds"],"kind":"struct"},"2:2984:2112":{"crate_id":2,"path":["core","ops","index","Index"],"kind":"trait"},"6:7586:12580":{"crate_id":6,"path":["libc","unix","linux_like","linux","canxl_frame"],"kind":"struct"},"2:9540:7912":{"crate_id":2,"path":["core","hash","BuildHasher"],"kind":"trait"},"1:3736:2267":{"crate_id":1,"path":["std","net","tcp","TcpStream"],"kind":"struct"},"1:3300:2237":{"crate_id":1,"path":["std","io","stdio","StderrLock"],"kind":"struct"},"2:22117:26162":{"crate_id":2,"path":["core","num","fmt","Part"],"kind":"enum"},"1:1917:2152":{"crate_id":1,"path":["std","error","Indented"],"kind":"struct"},"1:2216:2164":{"crate_id":1,"path":["std","fs","read_to_string"],"kind":"function"},"6:123:8563":{"crate_id":6,"path":["libc","unix","fpos_t"],"kind":"enum"},"1:8389:2361":{"crate_id":1,"path":["std","panic","BacktraceStyle"],"kind":"enum"},"2:45642:2500":{"crate_id":2,"path":["core","core_arch","simd","i8x2"],"kind":"struct"},"2:3155:234":{"crate_id":2,"path":["core","ops","try_trait","Try"],"kind":"trait"},"16:5363:15222":{"crate_id":16,"path":["gimli","endianity","RunTimeEndian"],"kind":"enum"},"2:2744:1945":{"crate_id":2,"path":["core","marker","Unpin"],"kind":"trait"},"2:45796:2542":{"crate_id":2,"path":["core","core_arch","simd","u16x4"],"kind":"struct"},"1:12042:754":{"crate_id":1,"path":["std","i8"],"kind":"primitive"},"2:43800:7775":{"crate_id":2,"path":["core","str","iter","RMatchIndices"],"kind":"struct"},"6:1649:9791":{"crate_id":6,"path":["libc","unix","linux_like","in6_rtmsg"],"kind":"struct"},"2:42927:7915":{"crate_id":2,"path":["core","hash","sip","SipHasher13"],"kind":"struct"},"17:9485:30998":{"crate_id":17,"path":["object","read","any","SectionIteratorInternal"],"kind":"enum"},"1:12047:1523":{"crate_id":1,"path":["std","u8"],"kind":"primitive"},"5:1273:2074":{"crate_id":5,"path":["alloc","collections","btree","map","entry","VacantEntry"],"kind":"struct"},"1:8161:2187":{"crate_id":1,"path":["std","io","IoSlice"],"kind":"struct"},"1:3259:2240":{"crate_id":1,"path":["std","io","stdio","Stdout"],"kind":"struct"},"17:9409:31063":{"crate_id":17,"path":["object","read","any","SegmentIteratorInternal"],"kind":"enum"},"12:0:1811":{"crate_id":12,"path":["rustc_std_workspace_alloc"],"kind":"module"},"1:2919:128":{"crate_id":1,"path":["std","io","error","Error"],"kind":"struct"},"1:7656:2013":{"crate_id":1,"path":["std","thread","Builder"],"kind":"struct"},"16:4996:14995":{"crate_id":16,"path":["gimli","constants","DwLne"],"kind":"struct"},"6:1702:2308":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_un"],"kind":"struct"},"6:500:8883":{"crate_id":6,"path":["libc","unix","rlimit"],"kind":"struct"},"17:10499:15548":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSubsubsection"],"kind":"struct"},"2:41731:2057":{"crate_id":2,"path":["core","option","Iter"],"kind":"struct"},"1:4742:2301":{"crate_id":1,"path":["std","os","fd","raw","IntoRawFd"],"kind":"trait"},"6:4543:12355":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_ff_erase"],"kind":"struct"},"2:40728:2217":{"crate_id":2,"path":["core","iter","adapters","take","Take"],"kind":"struct"},"16:5737:15236":{"crate_id":16,"path":["gimli","read","cfi","CieOrFde"],"kind":"enum"},"1:850:2058":{"crate_id":1,"path":["std","collections","hash","map","IterMut"],"kind":"struct"},"16:7061:30306":{"crate_id":16,"path":["gimli","read","lookup","PubStuffParser"],"kind":"struct"},"1:5622:2435":{"crate_id":1,"path":["std","sync","mpsc","Sender"],"kind":"struct"},"16:2759:14319":{"crate_id":16,"path":["gimli","common","DebugStrOffset"],"kind":"struct"},"17:8841:15399":{"crate_id":17,"path":["object","common","RelocationEncoding"],"kind":"enum"},"6:482:8880":{"crate_id":6,"path":["libc","unix","utimbuf"],"kind":"struct"},"2:41520:2258":{"crate_id":2,"path":["core","net","ip_addr","Ipv6Addr"],"kind":"struct"},"2:12497:192":{"crate_id":2,"path":["core","future","pending","Pending"],"kind":"struct"},"5:7290:2059":{"crate_id":5,"path":["alloc","collections","vec_deque","into_iter","IntoIter"],"kind":"struct"},"2:3377:7828":{"crate_id":2,"path":["core","any","Provider"],"kind":"trait"},"14:160:14225":{"crate_id":14,"path":["rustc_demangle","Demangle"],"kind":"struct"},"6:5818:13052":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","msghdr"],"kind":"struct"},"5:5923:70":{"crate_id":5,"path":["alloc","sync","Arc"],"kind":"struct"},"17:12840:18832":{"crate_id":17,"path":["object","macho","TwolevelHint"],"kind":"struct"},"2:47347:2539":{"crate_id":2,"path":["core","core_arch","simd","u8x64"],"kind":"struct"},"2:7231:8062":{"crate_id":2,"path":["core","iter","traits","accum","Sum"],"kind":"trait"},"1:8864:2444":{"crate_id":1,"path":["std","sync","mpsc","TryIter"],"kind":"struct"},"11:760:2063":{"crate_id":11,"path":["hashbrown","map","ExtractIf"],"kind":"struct"},"1:11194:2196":{"crate_id":1,"path":["std","sys","unix","time","SystemTime"],"kind":"struct"},"1:11514:2266":{"crate_id":1,"path":["std","sys_common","net","TcpListener"],"kind":"struct"},"2:2247:97":{"crate_id":2,"path":["core","borrow","Borrow"],"kind":"trait"},"5:5975:8482":{"crate_id":5,"path":["alloc","sync","ArcInner"],"kind":"struct"},"17:11967:18303":{"crate_id":17,"path":["object","elf","Rel32"],"kind":"struct"},"17:12333:18803":{"crate_id":17,"path":["object","macho","DyldSubCacheInfo"],"kind":"struct"},"17:10981:15617":{"crate_id":17,"path":["object","read","pe","section","PeSegmentIterator"],"kind":"struct"},"17:12457:18809":{"crate_id":17,"path":["object","macho","SegmentCommand64"],"kind":"struct"},"2:22758:169":{"crate_id":2,"path":["core","num","nonzero","NonZeroI128"],"kind":"struct"},"16:8021:15317":{"crate_id":16,"path":["gimli","read","unit","Attribute"],"kind":"struct"},"17:12346:15605":{"crate_id":17,"path":["object","macho","FatHeader"],"kind":"struct"},"16:6540:15270":{"crate_id":16,"path":["gimli","read","line","DebugLine"],"kind":"struct"},"17:10581:15578":{"crate_id":17,"path":["object","read","macho","file","MachOFile"],"kind":"struct"},"17:8740:15396":{"crate_id":17,"path":["object","common","SymbolKind"],"kind":"enum"},"2:2783:8115":{"crate_id":2,"path":["core","ops","arith","Neg"],"kind":"trait"},"17:9118:15404":{"crate_id":17,"path":["object","endian","U64Bytes"],"kind":"struct"},"2:4117:7866":{"crate_id":2,"path":["core","cell","lazy","LazyCell"],"kind":"struct"},"2:5994:8087":{"crate_id":2,"path":["core","iter","adapters","intersperse","IntersperseWith"],"kind":"struct"},"1:4163:2314":{"crate_id":1,"path":["std","os","unix","net","ancillary","ScmCredentials"],"kind":"struct"},"1:11304:22072":{"crate_id":1,"path":["std","sys_common","process","CommandEnv"],"kind":"struct"},"5:1257:2072":{"crate_id":5,"path":["alloc","collections","btree","map","entry","Entry"],"kind":"enum"},"5:778:96":{"crate_id":5,"path":["alloc","collections","binary_heap","BinaryHeap"],"kind":"struct"},"6:488:8881":{"crate_id":6,"path":["libc","unix","timeval"],"kind":"struct"},"2:20711:26182":{"crate_id":2,"path":["core","core_simd","swizzle","rotate_lanes_right","Rotate"],"kind":"struct"},"16:8125:15322":{"crate_id":16,"path":["gimli","read","unit","EntriesTreeNode"],"kind":"struct"},"16:2689:14316":{"crate_id":16,"path":["gimli","common","RangeListsOffset"],"kind":"struct"},"2:43485:7723":{"crate_id":2,"path":["core","slice","iter","ArrayChunks"],"kind":"struct"},"6:1590:9786":{"crate_id":6,"path":["libc","unix","linux_like","sched_param"],"kind":"struct"},"17:11992:18305":{"crate_id":17,"path":["object","elf","Rel64"],"kind":"struct"},"1:10529:2238":{"crate_id":1,"path":["std","sys","unix","stdio","Stdin"],"kind":"struct"},"16:8210:15327":{"crate_id":16,"path":["gimli","read","value","Value"],"kind":"enum"},"16:8043:15318":{"crate_id":16,"path":["gimli","read","unit","AttrsIter"],"kind":"struct"},"1:7928:2098":{"crate_id":1,"path":["std","io","cursor","Cursor"],"kind":"struct"},"2:1667:1099":{"crate_id":2,"path":["core","ptr"],"kind":"module"},"17:12792:18829":{"crate_id":17,"path":["object","macho","DylibModule64"],"kind":"struct"},"17:14007:19602":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation64"],"kind":"struct"},"2:4329:7860":{"crate_id":2,"path":["core","cell","BorrowRef"],"kind":"struct"},"17:0:1815":{"crate_id":17,"path":["object"],"kind":"module"},"6:5877:13055":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_pktinfo"],"kind":"struct"},"18:507:31356":{"crate_id":18,"path":["memchr","memmem","genericsimd","Forward"],"kind":"struct"},"1:10825:2187":{"crate_id":1,"path":["std","sys","unix","io","IoSlice"],"kind":"struct"},"17:11164:15640":{"crate_id":17,"path":["object","read","pe","relocation","RelocationBlockIterator"],"kind":"struct"},"17:12089:18312":{"crate_id":17,"path":["object","elf","Verdef"],"kind":"struct"},"2:9281:112":{"crate_id":2,"path":["core","fmt","Debug"],"kind":"trait"},"16:5398:15224":{"crate_id":16,"path":["gimli","endianity","BigEndian"],"kind":"struct"},"13:0:1805":{"crate_id":13,"path":["std_detect"],"kind":"module"},"10:36:30130":{"crate_id":10,"path":["adler","algo","U32X4"],"kind":"struct"},"1:724:142":{"crate_id":1,"path":["std","collections","hash","map","HashMap"],"kind":"struct"},"2:40192:2031":{"crate_id":2,"path":["core","char","EscapeDefault"],"kind":"struct"},"2:20683:7902":{"crate_id":2,"path":["core","core_simd","swizzle","reverse","Reverse"],"kind":"struct"},"2:40207:7883":{"crate_id":2,"path":["core","char","EscapeDebugInner"],"kind":"enum"},"1:4315:2318":{"crate_id":1,"path":["std","os","unix","net","listener","UnixListener"],"kind":"struct"},"17:434:14274":{"crate_id":17,"path":["object","read","any","Section"],"kind":"struct"},"5:1514:198":{"crate_id":5,"path":["alloc","collections","btree","map","Range"],"kind":"struct"},"2:42103:89":{"crate_id":2,"path":["core","sync","atomic","AtomicU32"],"kind":"struct"},"17:11210:15651":{"crate_id":17,"path":["object","read","pe","resource","ResourceDirectoryTable"],"kind":"struct"},"1:4054:2291":{"crate_id":1,"path":["std","os","unix","fs","DirBuilderExt"],"kind":"trait"},"2:44566:195":{"crate_id":2,"path":["core","task","poll","Poll"],"kind":"enum"},"17:10845:15559":{"crate_id":17,"path":["object","read","macho","section","MachOSectionInternal"],"kind":"struct"},"16:5651:15231":{"crate_id":16,"path":["gimli","read","cfi","EhFrame"],"kind":"struct"},"2:30513:26102":{"crate_id":2,"path":["core","ptr","alignment","AlignmentEnum32"],"kind":"enum"},"1:11379:21449":{"crate_id":1,"path":["std","sys_common","wtf8","Wtf8CodePoints"],"kind":"struct"},"1:8984:107":{"crate_id":1,"path":["std","sync","mpmc","context","Context"],"kind":"struct"},"1:10834:22263":{"crate_id":1,"path":["std","sys","unix","kernel_copy","FdHandle"],"kind":"enum"},"2:20726:26323":{"crate_id":2,"path":["core","core_simd","swizzle","interleave","Hi"],"kind":"struct"},"17:14205:19614":{"crate_id":17,"path":["object","pe","ImageAlpha64RuntimeFunctionEntry"],"kind":"struct"},"16:7445:15293":{"crate_id":16,"path":["gimli","read","op","Evaluation"],"kind":"struct"},"1:837:2057":{"crate_id":1,"path":["std","collections","hash","map","Iter"],"kind":"struct"},"10:0:1809":{"crate_id":10,"path":["adler"],"kind":"module"},"2:2820:8121":{"crate_id":2,"path":["core","ops","bit","BitOr"],"kind":"trait"},"16:5567:15226":{"crate_id":16,"path":["gimli","read","cfi","DebugFrame"],"kind":"struct"},"2:41883:183":{"crate_id":2,"path":["core","sync","atomic","Ordering"],"kind":"enum"},"17:9821:15441":{"crate_id":17,"path":["object","read","archive","ArchiveFile"],"kind":"struct"},"1:8113:2186":{"crate_id":1,"path":["std","io","readbuf","BorrowedCursor"],"kind":"struct"},"2:10118:2058":{"crate_id":2,"path":["core","slice","iter","IterMut"],"kind":"struct"},"2:44406:122":{"crate_id":2,"path":["core","time","Duration"],"kind":"struct"},"2:39228:7848":{"crate_id":2,"path":["core","ops","control_flow","ControlFlow"],"kind":"enum"},"16:7584:15303":{"crate_id":16,"path":["gimli","read","rnglists","RawRngListIter"],"kind":"struct"},"2:42982:26037":{"crate_id":2,"path":["core","hash","sip","Sip24Rounds"],"kind":"struct"},"5:1138:27680":{"crate_id":5,"path":["alloc","collections","btree","dedup_sorted_iter","DedupSortedIter"],"kind":"struct"},"1:8334:2352":{"crate_id":1,"path":["std","os","linux","raw","arch","stat"],"kind":"struct"},"17:12878:18835":{"crate_id":17,"path":["object","macho","RpathCommand"],"kind":"struct"},"16:6554:15271":{"crate_id":16,"path":["gimli","read","line","LineRows"],"kind":"struct"},"16:6516:15269":{"crate_id":16,"path":["gimli","read","index","UnitIndexSection"],"kind":"struct"},"2:32209:22552":{"crate_id":2,"path":["core","error","private","Internal"],"kind":"struct"},"17:10544:15597":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldSubCache"],"kind":"struct"},"1:5429:2394":{"crate_id":1,"path":["std","process","ChildStderr"],"kind":"struct"},"5:782:2082":{"crate_id":5,"path":["alloc","collections","binary_heap","PeekMut"],"kind":"struct"},"2:10094:2057":{"crate_id":2,"path":["core","slice","iter","Iter"],"kind":"struct"},"6:6156:13099":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","msqid_ds"],"kind":"struct"},"2:10978:7731":{"crate_id":2,"path":["core","slice","raw","from_raw_parts"],"kind":"function"},"1:1587:2081":{"crate_id":1,"path":["std","collections","hash","set","Union"],"kind":"struct"},"6:5863:13014":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","mallinfo2"],"kind":"struct"},"2:45622:2535":{"crate_id":2,"path":["core","core_arch","simd","u8x2"],"kind":"struct"},"6:562:8890":{"crate_id":6,"path":["libc","unix","linger"],"kind":"struct"},"1:4171:2315":{"crate_id":1,"path":["std","os","unix","net","ancillary","AncillaryData"],"kind":"enum"},"2:40226:7885":{"crate_id":2,"path":["core","char","ToUppercase"],"kind":"struct"},"2:44351:8259":{"crate_id":2,"path":["core","str","LinesMap"],"kind":"struct"},"2:46311:2576":{"crate_id":2,"path":["core","core_arch","simd","f64x2"],"kind":"struct"},"2:21988:26575":{"crate_id":2,"path":["core","num","dec2flt","decimal","Decimal"],"kind":"struct"},"2:30989:183":{"crate_id":2,"path":["core","cmp","Ordering"],"kind":"enum"},"2:44363:8263":{"crate_id":2,"path":["core","str","CharEscapeDefault"],"kind":"struct"},"2:44439:8280":{"crate_id":2,"path":["core","time","TryFromFloatSecsErrorKind"],"kind":"enum"},"2:40953:2425":{"crate_id":2,"path":["core","iter","sources","once","Once"],"kind":"struct"},"1:8312:2321":{"crate_id":1,"path":["std","os","unix","ucred","UCred"],"kind":"struct"},"5:6306:2620":{"crate_id":5,"path":["alloc","task","Wake"],"kind":"trait"},"6:6036:13069":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ptrace_syscall_info"],"kind":"struct"},"16:7515:15299":{"crate_id":16,"path":["gimli","read","pubtypes","PubTypesEntryIter"],"kind":"struct"},"2:41537:2259":{"crate_id":2,"path":["core","net","ip_addr","Ipv6MulticastScope"],"kind":"enum"},"5:7349:2056":{"crate_id":5,"path":["alloc","collections","TryReserveErrorKind"],"kind":"enum"},"2:3082:2114":{"crate_id":2,"path":["core","ops","range","RangeBounds"],"kind":"trait"},"3:234:210":{"crate_id":3,"path":["compiler_builtins","float","cmp","Result"],"kind":"enum"},"6:4291:12329":{"crate_id":6,"path":["libc","unix","linux_like","linux","glob_t"],"kind":"struct"},"2:2475:7906":{"crate_id":2,"path":["core","convert","num","FloatToInt"],"kind":"trait"},"2:4267:7855":{"crate_id":2,"path":["core","cell","BorrowMutError"],"kind":"struct"},"17:11189:15430":{"crate_id":17,"path":["object","read","pe","relocation","Relocation"],"kind":"struct"},"1:5745:2421":{"crate_id":1,"path":["std","sync","barrier","Barrier"],"kind":"struct"},"17:12826:18831":{"crate_id":17,"path":["object","macho","TwolevelHintsCommand"],"kind":"struct"},"3:0:446":{"crate_id":3,"path":["compiler_builtins"],"kind":"module"},"17:11290:15418":{"crate_id":17,"path":["object","read","FileKind"],"kind":"enum"},"2:47885:2557":{"crate_id":2,"path":["core","core_arch","simd","u64x8"],"kind":"struct"},"17:11542:15377":{"crate_id":17,"path":["object","read","CodeView"],"kind":"struct"},"11:311:30134":{"crate_id":11,"path":["hashbrown","raw","RawIter"],"kind":"struct"},"1:2377:2173":{"crate_id":1,"path":["std","fs","canonicalize"],"kind":"function"},"2:10904:7738":{"crate_id":2,"path":["core","slice","iter","GroupBy"],"kind":"struct"},"17:10013:15455":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbol"],"kind":"struct"},"1:6541:2430":{"crate_id":1,"path":["std","sync","poison","TryLockError"],"kind":"enum"},"1:7857:2181":{"crate_id":1,"path":["std","fs","OpenOptions"],"kind":"struct"},"2:42443:7699":{"crate_id":2,"path":["core","fmt","num","UpperHex"],"kind":"struct"},"6:6834:13488":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","seccomp_notif_sizes"],"kind":"struct"},"5:2960:29281":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Dying"],"kind":"enum"},"2:39487:8133":{"crate_id":2,"path":["core","ops","try_trait","Yeet"],"kind":"struct"},"2:2815:8120":{"crate_id":2,"path":["core","ops","bit","BitAnd"],"kind":"trait"},"16:2874:14324":{"crate_id":16,"path":["gimli","common","DebugFrameOffset"],"kind":"struct"},"1:7736:2077":{"crate_id":1,"path":["std","collections","hash","map","DefaultHasher"],"kind":"struct"},"2:21118:2192":{"crate_id":2,"path":["core","core_simd","elements","sealed","Sealed"],"kind":"trait"},"6:6841:13489":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ptrace_rseq_configuration"],"kind":"struct"},"2:1747:26586":{"crate_id":2,"path":["core","ptr","metadata","PtrComponents"],"kind":"struct"},"1:4495:2323":{"crate_id":1,"path":["std","os","unix","process","ExitStatusExt"],"kind":"trait"},"6:1536:9781":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_in6"],"kind":"struct"},"1:11141:2401":{"crate_id":1,"path":["std","sys","unix","process","process_inner","ExitStatus"],"kind":"struct"},"1:5393:2392":{"crate_id":1,"path":["std","process","ChildStdin"],"kind":"struct"},"2:44664:26606":{"crate_id":2,"path":["core","escape","EscapeIterInner"],"kind":"struct"},"1:8878:2441":{"crate_id":1,"path":["std","sync","mpsc","SendError"],"kind":"struct"},"1:1582:2080":{"crate_id":1,"path":["std","collections","hash","set","SymmetricDifference"],"kind":"struct"},"6:4754:12374":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_vm"],"kind":"struct"},"1:5986:206":{"crate_id":1,"path":["std","sync","mpmc","counter","Receiver"],"kind":"struct"},"2:7725:8060":{"crate_id":2,"path":["core","iter","traits","marker","TrustedStep"],"kind":"trait"},"2:48075:7657":{"crate_id":2,"path":["core","core_arch","x86","__m256bh"],"kind":"struct"},"6:4716:12369":{"crate_id":6,"path":["libc","unix","linux_like","linux","genlmsghdr"],"kind":"struct"},"17:12921:18838":{"crate_id":17,"path":["object","macho","EncryptionInfoCommand32"],"kind":"struct"},"1:11175:8279":{"crate_id":1,"path":["std","sys","unix","time","Nanoseconds"],"kind":"struct"},"1:5561:2399":{"crate_id":1,"path":["std","process","Termination"],"kind":"trait"},"17:256:30982":{"crate_id":17,"path":["object","read","util","DebugByte"],"kind":"struct"},"5:7231:27884":{"crate_id":5,"path":["alloc","collections","btree","merge_iter","Peeked"],"kind":"enum"},"16:6864:30459":{"crate_id":16,"path":["gimli","read","lists","ListsHeader"],"kind":"struct"},"7:79:14073":{"crate_id":7,"path":["unwind","libunwind","_Unwind_Action"],"kind":"enum"},"2:3160:135":{"crate_id":2,"path":["core","ops","try_trait","FromResidual"],"kind":"trait"},"2:40968:2246":{"crate_id":2,"path":["core","iter","sources","repeat","Repeat"],"kind":"struct"},"2:6744:8070":{"crate_id":2,"path":["core","iter","adapters","zip","TrustedRandomAccessNoCoerce"],"kind":"trait"},"5:6788:7824":{"crate_id":5,"path":["alloc","vec","in_place_drop","InPlaceDrop"],"kind":"struct"},"2:43359:26436":{"crate_id":2,"path":["core","slice","iter","GenericSplitN"],"kind":"struct"},"11:2049:2073":{"crate_id":11,"path":["hashbrown","set","OccupiedEntry"],"kind":"struct"},"16:2803:14321":{"crate_id":16,"path":["gimli","common","DebugStrOffsetsIndex"],"kind":"struct"},"1:1924:661":{"crate_id":1,"path":["std","ffi"],"kind":"module"},"17:13732:19576":{"crate_id":17,"path":["object","pe","ImageAuxSymbolFunctionBeginEnd"],"kind":"struct"},"1:10535:2236":{"crate_id":1,"path":["std","sys","unix","stdio","Stderr"],"kind":"struct"},"17:8949:15403":{"crate_id":17,"path":["object","common","SymbolFlags"],"kind":"enum"},"16:6438:15264":{"crate_id":16,"path":["gimli","read","aranges","ArangeEntry"],"kind":"struct"},"5:2970:29277":{"crate_id":5,"path":["alloc","collections","btree","node","marker","ValMut"],"kind":"struct"},"2:21:689":{"crate_id":2,"path":["core","format_args"],"kind":"macro"},"2:9294:7699":{"crate_id":2,"path":["core","fmt","UpperHex"],"kind":"trait"},"1:6978:23117":{"crate_id":1,"path":["std","sys_common","backtrace","_print","DisplayBacktrace"],"kind":"struct"},"5:2243:27763":{"crate_id":5,"path":["alloc","collections","btree","navigate","LazyLeafRange"],"kind":"struct"},"5:3330:2063":{"crate_id":5,"path":["alloc","collections","btree","set","ExtractIf"],"kind":"struct"},"6:5058:12408":{"crate_id":6,"path":["libc","unix","linux_like","linux","dirent64"],"kind":"struct"},"1:8141:2245":{"crate_id":1,"path":["std","io","util","Empty"],"kind":"struct"},"17:13125:18852":{"crate_id":17,"path":["object","macho","Nlist32"],"kind":"struct"},"5:5954:2419":{"crate_id":5,"path":["alloc","sync","Weak"],"kind":"struct"},"16:4841:14960":{"crate_id":16,"path":["gimli","constants","DwOrd"],"kind":"struct"},"17:10883:15566":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbolTable"],"kind":"struct"},"1:12052:799":{"crate_id":1,"path":["std","isize"],"kind":"primitive"},"17:10957:15643":{"crate_id":17,"path":["object","read","pe","file","PeComdat"],"kind":"struct"},"11:1048:30158":{"crate_id":11,"path":["hashbrown","map","KeyOrRef"],"kind":"enum"},"1:10427:2400":{"crate_id":1,"path":["std","sys","unix","process","process_common","CommandArgs"],"kind":"struct"},"2:9286:120":{"crate_id":2,"path":["core","fmt","Display"],"kind":"trait"},"2:5535:8075":{"crate_id":2,"path":["core","iter","adapters","flatten","FlatMap"],"kind":"struct"},"17:10609:15600":{"crate_id":17,"path":["object","read","macho","file","MachOComdat"],"kind":"struct"},"2:45818:2548":{"crate_id":2,"path":["core","core_arch","simd","u32x2"],"kind":"struct"},"2:1756:8156":{"crate_id":2,"path":["core","ptr","metadata","DynMetadata"],"kind":"struct"},"1:11996:22067":{"crate_id":1,"path":["std","backtrace_rs","symbolize","gimli","Cache"],"kind":"struct"},"2:21637:26185":{"crate_id":2,"path":["core","core_simd","vector","splat","Splat"],"kind":"struct"},"5:5769:232":{"crate_id":5,"path":["alloc","string","ToString"],"kind":"trait"},"16:6850:15279":{"crate_id":16,"path":["gimli","read","line","FileEntryFormat"],"kind":"struct"},"5:3217:27907":{"crate_id":5,"path":["alloc","collections","btree","set","IntersectionInner"],"kind":"enum"},"5:7425:2156":{"crate_id":5,"path":["alloc","ffi","c_str","IntoStringError"],"kind":"struct"},"1:9134:2196":{"crate_id":1,"path":["std","time","SystemTime"],"kind":"struct"},"1:8555:2384":{"crate_id":1,"path":["std","path","Ancestors"],"kind":"struct"},"17:13055:18847":{"crate_id":17,"path":["object","macho","FvmfileCommand"],"kind":"struct"},"11:2033:2072":{"crate_id":11,"path":["hashbrown","set","Entry"],"kind":"enum"},"17:9990:15457":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbolTable"],"kind":"struct"},"2:4815:805":{"crate_id":2,"path":["core","iter"],"kind":"module"},"18:481:19668":{"crate_id":18,"path":["memchr","cow","CowBytes"],"kind":"struct"},"2:42935:26595":{"crate_id":2,"path":["core","hash","sip","SipHasher24"],"kind":"struct"},"2:2799:8117":{"crate_id":2,"path":["core","ops","arith","DivAssign"],"kind":"trait"},"17:12982:18842":{"crate_id":17,"path":["object","macho","BuildToolVersion"],"kind":"struct"},"1:2212:2163":{"crate_id":1,"path":["std","fs","read"],"kind":"function"},"17:12133:18315":{"crate_id":17,"path":["object","elf","Vernaux"],"kind":"struct"},"2:44196:7796":{"crate_id":2,"path":["core","str","pattern","StrSearcher"],"kind":"struct"},"2:43428:7736":{"crate_id":2,"path":["core","slice","iter","ChunksMut"],"kind":"struct"},"2:48007:7653":{"crate_id":2,"path":["core","core_arch","x86","__m512i"],"kind":"struct"},"5:4002:2062":{"crate_id":5,"path":["alloc","collections","vec_deque","drain","Drain"],"kind":"struct"},"1:9027:22091":{"crate_id":1,"path":["std","sync","mpmc","list","ListToken"],"kind":"struct"},"1:1776:2119":{"crate_id":1,"path":["std","env","Vars"],"kind":"struct"},"6:4524:12353":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_effect"],"kind":"struct"},"2:12653:2618":{"crate_id":2,"path":["core","task","wake","Waker"],"kind":"struct"},"2:22494:176":{"crate_id":2,"path":["core","num","nonzero","NonZeroU32"],"kind":"struct"},"17:2133:15485":{"crate_id":17,"path":["object","read","elf","relocation","ElfDynamicRelocationIterator"],"kind":"struct"},"2:2859:8130":{"crate_id":2,"path":["core","ops","bit","ShrAssign"],"kind":"trait"},"5:7191:2059":{"crate_id":5,"path":["alloc","collections","binary_heap","IntoIter"],"kind":"struct"},"16:7648:198":{"crate_id":16,"path":["gimli","read","rnglists","Range"],"kind":"struct"},"14:215:14234":{"crate_id":14,"path":["rustc_demangle","TryDemangleError"],"kind":"struct"},"18:681:19662":{"crate_id":18,"path":["memchr","memmem","Finder"],"kind":"struct"},"16:6128:15247":{"crate_id":16,"path":["gimli","read","cfi","CallFrameInstructionIter"],"kind":"struct"},"18:582:7902":{"crate_id":18,"path":["memchr","memmem","twoway","Reverse"],"kind":"struct"},"6:4489:12349":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_ramp_effect"],"kind":"struct"},"16:4032:14511":{"crate_id":16,"path":["gimli","constants","DwTag"],"kind":"struct"},"1:3934:2282":{"crate_id":1,"path":["std","os","unix","ffi","os_str","OsStringExt"],"kind":"trait"},"2:9497:141":{"crate_id":2,"path":["core","hash","Hash"],"kind":"trait"},"2:21919:25640":{"crate_id":2,"path":["core","num","bignum","tests","Big8x3"],"kind":"struct"},"2:41858:2057":{"crate_id":2,"path":["core","result","Iter"],"kind":"struct"},"1:4184:2316":{"crate_id":1,"path":["std","os","unix","net","ancillary","Messages"],"kind":"struct"},"2:44601:2616":{"crate_id":2,"path":["core","task","wake","RawWaker"],"kind":"struct"},"2:22692:171":{"crate_id":2,"path":["core","num","nonzero","NonZeroI32"],"kind":"struct"},"1:12035:1390":{"crate_id":1,"path":["std","slice"],"kind":"primitive"},"2:44371:8265":{"crate_id":2,"path":["core","str","IsAsciiWhitespace"],"kind":"struct"},"2:40526:8067":{"crate_id":2,"path":["core","iter","adapters","map_while","MapWhile"],"kind":"struct"},"2:47923:2578":{"crate_id":2,"path":["core","core_arch","simd","f64x8"],"kind":"struct"},"14:0:1812":{"crate_id":14,"path":["rustc_demangle"],"kind":"module"},"1:10741:2351":{"crate_id":1,"path":["std","sys","unix","fd","FileDesc"],"kind":"struct"},"2:39411:201":{"crate_id":2,"path":["core","ops","range","RangeInclusive"],"kind":"struct"},"17:13937:19594":{"crate_id":17,"path":["object","pe","ImageResourceDirectory"],"kind":"struct"},"5:7261:27649":{"crate_id":5,"path":["alloc","collections","btree","set_val","SetValZST"],"kind":"struct"},"2:2842:8126":{"crate_id":2,"path":["core","ops","bit","BitAndAssign"],"kind":"trait"},"17:14350:19624":{"crate_id":17,"path":["object","pe","ImageFunctionEntry64"],"kind":"struct"},"5:2690:27835":{"crate_id":5,"path":["alloc","collections","btree","node","Handle"],"kind":"struct"},"9:393:14095":{"crate_id":9,"path":["miniz_oxide","MZFlush"],"kind":"enum"},"16:6986:15286":{"crate_id":16,"path":["gimli","read","loclists","LocationListEntry"],"kind":"struct"},"17:9399:15409":{"crate_id":17,"path":["object","read","any","SegmentIterator"],"kind":"struct"},"16:6571:15272":{"crate_id":16,"path":["gimli","read","line","LineInstruction"],"kind":"enum"},"2:9505:145":{"crate_id":2,"path":["core","hash","Hasher"],"kind":"trait"},"6:4938:12395":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_prinfo"],"kind":"struct"},"5:1464:2060":{"crate_id":5,"path":["alloc","collections","btree","map","Keys"],"kind":"struct"},"17:10597:15599":{"crate_id":17,"path":["object","read","macho","file","MachOComdatIterator"],"kind":"struct"},"17:13971:19598":{"crate_id":17,"path":["object","pe","ImageResourceDataEntry"],"kind":"struct"},"17:10555:15598":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCacheImageIterator"],"kind":"struct"},"2:22080:26148":{"crate_id":2,"path":["core","num","flt2dec","decoder","FullDecoded"],"kind":"enum"},"2:44622:161":{"crate_id":2,"path":["core","alloc","layout","Layout"],"kind":"struct"},"11:749:2062":{"crate_id":11,"path":["hashbrown","map","Drain"],"kind":"struct"},"1:5049:22594":{"crate_id":1,"path":["std","path","fmt","DebugHelper"],"kind":"struct"},"2:44084:7793":{"crate_id":2,"path":["core","str","pattern","CharArrayRefSearcher"],"kind":"struct"},"17:9716:31298":{"crate_id":17,"path":["object","read","any","DynamicRelocationIteratorInternal"],"kind":"enum"},"1:8872:2059":{"crate_id":1,"path":["std","sync","mpsc","IntoIter"],"kind":"struct"},"7:32:14066":{"crate_id":7,"path":["unwind","libunwind","_Unwind_Reason_Code"],"kind":"enum"},"16:2443:14306":{"crate_id":16,"path":["gimli","common","DebugArangesOffset"],"kind":"struct"},"2:10298:7744":{"crate_id":2,"path":["core","slice","iter","RSplit"],"kind":"struct"},"17:10148:15487":{"crate_id":17,"path":["object","read","elf","section","ElfSectionIterator"],"kind":"struct"},"5:2131:2002":{"crate_id":5,"path":["alloc","collections","btree","mem","replace","PanicGuard"],"kind":"struct"},"1:1073:2075":{"crate_id":1,"path":["std","collections","hash","map","OccupiedError"],"kind":"struct"},"2:43632:2219":{"crate_id":2,"path":["core","str","iter","Split"],"kind":"struct"},"2:5387:2204":{"crate_id":2,"path":["core","iter","adapters","filter","next_chunk","Guard"],"kind":"struct"},"2:22063:26155":{"crate_id":2,"path":["core","num","flt2dec","decoder","Decoded"],"kind":"struct"},"5:1442:2059":{"crate_id":5,"path":["alloc","collections","btree","map","IntoIter"],"kind":"struct"},"1:8549:2057":{"crate_id":1,"path":["std","path","Iter"],"kind":"struct"},"16:3744:14343":{"crate_id":16,"path":["gimli","constants","DwSect"],"kind":"struct"},"16:6531:30603":{"crate_id":16,"path":["gimli","read","lazy","imp","LazyArc"],"kind":"struct"},"17:8899:15401":{"crate_id":17,"path":["object","common","SegmentFlags"],"kind":"enum"},"16:4564:14875":{"crate_id":16,"path":["gimli","constants","DwAccess"],"kind":"struct"},"6:6008:13065":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ptrace_peeksiginfo_args"],"kind":"struct"},"16:6763:15276":{"crate_id":16,"path":["gimli","read","line","IncompleteLineProgram"],"kind":"struct"},"17:10444:15509":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSection"],"kind":"struct"},"2:42142:83":{"crate_id":2,"path":["core","sync","atomic","AtomicI64"],"kind":"struct"},"2:43186:7726":{"crate_id":2,"path":["core","slice","ascii","EscapeAscii"],"kind":"struct"},"16:7679:15308":{"crate_id":16,"path":["gimli","read","str","DebugStrOffsets"],"kind":"struct"},"16:4536:14871":{"crate_id":16,"path":["gimli","constants","DwEnd"],"kind":"struct"},"17:11623:15432":{"crate_id":17,"path":["object","read","CompressedFileRange"],"kind":"struct"},"1:3499:2153":{"crate_id":1,"path":["std","io","Write"],"kind":"trait"},"2:2697:226":{"crate_id":2,"path":["core","marker","StructuralPartialEq"],"kind":"trait"},"17:12077:18311":{"crate_id":17,"path":["object","elf","Versym"],"kind":"struct"},"2:48060:7656":{"crate_id":2,"path":["core","core_arch","x86","__m128bh"],"kind":"struct"},"11:2168:30151":{"crate_id":11,"path":["hashbrown","raw","sse2","Group"],"kind":"struct"},"16:6239:30653":{"crate_id":16,"path":["gimli","read","dwarf","RangeIterInner"],"kind":"enum"},"1:1570:2078":{"crate_id":1,"path":["std","collections","hash","set","Intersection"],"kind":"struct"},"1:5444:2395":{"crate_id":1,"path":["std","process","Command"],"kind":"struct"},"1:6429:2426":{"crate_id":1,"path":["std","sync","once","OnceState"],"kind":"struct"},"1:10805:130":{"crate_id":1,"path":["std","sys","unix","fs","FileType"],"kind":"struct"},"11:1845:2079":{"crate_id":11,"path":["hashbrown","set","Difference"],"kind":"struct"},"2:48137:7659":{"crate_id":2,"path":["core","core_arch","x86","cpuid","CpuidResult"],"kind":"struct"},"2:22659:170":{"crate_id":2,"path":["core","num","nonzero","NonZeroI16"],"kind":"struct"},"17:9561:15412":{"crate_id":17,"path":["object","read","any","ComdatSectionIterator"],"kind":"struct"},"1:2402:1822":{"crate_id":1,"path":["std","io"],"kind":"module"},"6:4436:12342":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_absinfo"],"kind":"struct"},"16:7289:15289":{"crate_id":16,"path":["gimli","read","op","Piece"],"kind":"struct"},"13:110:30206":{"crate_id":13,"path":["std_detect","detect","arch","x86","Feature"],"kind":"enum"},"1:6894:22682":{"crate_id":1,"path":["std","sys","common","thread_local","abort_on_dtor_unwind","DtorUnwindGuard"],"kind":"struct"},"1:12012:21738":{"crate_id":1,"path":["std","backtrace_rs","print","PrintFmt"],"kind":"enum"},"11:630:2057":{"crate_id":11,"path":["hashbrown","map","Iter"],"kind":"struct"},"17:9318:15408":{"crate_id":17,"path":["object","read","util","StringTable"],"kind":"struct"},"2:21972:26072":{"crate_id":2,"path":["core","num","dec2flt","common","BiasedFp"],"kind":"struct"},"17:13332:19557":{"crate_id":17,"path":["object","pe","ImageOs2Header"],"kind":"struct"},"16:6214:15250":{"crate_id":16,"path":["gimli","read","dwarf","Unit"],"kind":"struct"},"2:1544:2204":{"crate_id":2,"path":["core","mem","maybe_uninit","write_slice_cloned","Guard"],"kind":"struct"},"2:32173:2404":{"crate_id":2,"path":["core","convert","Infallible"],"kind":"enum"},"2:2749:106":{"crate_id":2,"path":["core","marker","ConstParamTy"],"kind":"trait"},"9:357:14110":{"crate_id":9,"path":["miniz_oxide","inflate","TINFLStatus"],"kind":"enum"},"17:10390:15513":{"crate_id":17,"path":["object","read","elf","version","VerdefIterator"],"kind":"struct"},"1:10251:2406":{"crate_id":1,"path":["std","sys","unix","pipe","AnonPipe"],"kind":"struct"},"2:41798:8208":{"crate_id":2,"path":["core","panicking","AssertKind"],"kind":"enum"},"2:10377:7748":{"crate_id":2,"path":["core","slice","iter","SplitN"],"kind":"struct"},"17:12017:18307":{"crate_id":17,"path":["object","elf","ProgramHeader32"],"kind":"struct"},"1:10532:2240":{"crate_id":1,"path":["std","sys","unix","stdio","Stdout"],"kind":"struct"},"2:7047:2414":{"crate_id":2,"path":["core","iter","sources","once","once"],"kind":"function"},"17:12479:18810":{"crate_id":17,"path":["object","macho","Section32"],"kind":"struct"},"17:13923:19593":{"crate_id":17,"path":["object","pe","ImageDelayloadDescriptor"],"kind":"struct"},"6:1506:9777":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreqn"],"kind":"struct"},"2:10263:7751":{"crate_id":2,"path":["core","slice","iter","SplitInclusiveMut"],"kind":"struct"},"2:43931:7770":{"crate_id":2,"path":["core","str","iter","EscapeDebug"],"kind":"struct"},"17:13069:18848":{"crate_id":17,"path":["object","macho","EntryPointCommand"],"kind":"struct"},"2:44359:8264":{"crate_id":2,"path":["core","str","CharEscapeUnicode"],"kind":"struct"},"1:9475:129":{"crate_id":1,"path":["std","sys","unix","fs","File"],"kind":"struct"},"17:11943:18301":{"crate_id":17,"path":["object","elf","Syminfo32"],"kind":"struct"},"2:41789:2366":{"crate_id":2,"path":["core","panic","panic_info","PanicInfo"],"kind":"struct"},"16:5704:15234":{"crate_id":16,"path":["gimli","read","cfi","SectionBaseAddresses"],"kind":"struct"},"6:532:8886":{"crate_id":6,"path":["libc","unix","hostent"],"kind":"struct"},"17:11084:15611":{"crate_id":17,"path":["object","read","pe","export","ExportTable"],"kind":"struct"},"2:9946:222":{"crate_id":2,"path":["core","slice","index","SliceIndex"],"kind":"trait"},"2:44244:7780":{"crate_id":2,"path":["core","str","lossy","Utf8Chunk"],"kind":"struct"},"17:10931:15630":{"crate_id":17,"path":["object","read","pe","file","PeFile"],"kind":"struct"},"1:7725:2041":{"crate_id":1,"path":["std","backtrace","RawFrame"],"kind":"enum"},"2:42974:26036":{"crate_id":2,"path":["core","hash","sip","Sip13Rounds"],"kind":"struct"},"2:20877:2192":{"crate_id":2,"path":["core","core_simd","cast","sealed","Sealed"],"kind":"trait"},"17:11428:15424":{"crate_id":17,"path":["object","read","SymbolMapName"],"kind":"struct"},"2:48022:7654":{"crate_id":2,"path":["core","core_arch","x86","__m512"],"kind":"struct"},"16:2373:14303":{"crate_id":16,"path":["gimli","common","DebugAbbrevOffset"],"kind":"struct"},"11:1852:2080":{"crate_id":11,"path":["hashbrown","set","SymmetricDifference"],"kind":"struct"},"16:7707:15310":{"crate_id":16,"path":["gimli","read","UnitOffset"],"kind":"struct"},"2:9298:7696":{"crate_id":2,"path":["core","fmt","LowerExp"],"kind":"trait"},"16:6250:15252":{"crate_id":16,"path":["gimli","read","endian_slice","EndianSlice"],"kind":"struct"},"1:3970:2283":{"crate_id":1,"path":["std","os","unix","fs","FileExt"],"kind":"trait"},"5:207:7688":{"crate_id":5,"path":["alloc","boxed","thin","ThinBox"],"kind":"struct"},"2:3166:7850":{"crate_id":2,"path":["core","ops","try_trait","Residual"],"kind":"trait"},"17:13043:18846":{"crate_id":17,"path":["object","macho","IdentCommand"],"kind":"struct"},"2:44221:7798":{"crate_id":2,"path":["core","str","pattern","EmptyNeedle"],"kind":"struct"},"16:6789:15277":{"crate_id":16,"path":["gimli","read","line","CompleteLineProgram"],"kind":"struct"},"17:11250:15618":{"crate_id":17,"path":["object","read","pe","rich","RichHeaderInfo"],"kind":"struct"},"6:4963:12399":{"crate_id":6,"path":["libc","unix","linux_like","linux","dirent"],"kind":"struct"},"2:45688:2541":{"crate_id":2,"path":["core","core_arch","simd","u16x2"],"kind":"struct"},"16:5843:15239":{"crate_id":16,"path":["gimli","read","cfi","PartialFrameDescriptionEntry"],"kind":"struct"},"1:11167:22267":{"crate_id":1,"path":["std","sys","unix","thread","cgroups","Cgroup"],"kind":"enum"},"17:12148:18316":{"crate_id":17,"path":["object","elf","NoteHeader32"],"kind":"struct"},"5:1102:27675":{"crate_id":5,"path":["alloc","collections","btree","append","MergeIter"],"kind":"struct"},"16:7012:30301":{"crate_id":16,"path":["gimli","read","lookup","DebugLookup"],"kind":"struct"},"2:40742:8084":{"crate_id":2,"path":["core","iter","adapters","take_while","TakeWhile"],"kind":"struct"},"17:9475:15410":{"crate_id":17,"path":["object","read","any","SectionIterator"],"kind":"struct"},"2:11382:8222":{"crate_id":2,"path":["core","slice","SlicePattern"],"kind":"trait"},"6:4606:12360":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Sym"],"kind":"struct"},"17:10671:15602":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandVariant"],"kind":"enum"},"16:2314:14300":{"crate_id":16,"path":["gimli","common","Encoding"],"kind":"struct"},"17:10066:15477":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdatSectionIterator"],"kind":"struct"},"2:22725:172":{"crate_id":2,"path":["core","num","nonzero","NonZeroI64"],"kind":"struct"},"16:7433:15292":{"crate_id":16,"path":["gimli","read","op","OperationIter"],"kind":"struct"},"16:2497:14308":{"crate_id":16,"path":["gimli","common","DebugLineOffset"],"kind":"struct"},"6:5900:13058":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","rtentry"],"kind":"struct"},"2:46243:2515":{"crate_id":2,"path":["core","core_arch","simd","i32x4"],"kind":"struct"},"6:4518:12352":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_rumble_effect"],"kind":"struct"},"17:13949:19595":{"crate_id":17,"path":["object","pe","ImageResourceDirectoryEntry"],"kind":"struct"},"2:12745:2087":{"crate_id":2,"path":["core","alloc","Allocator"],"kind":"trait"},"16:4323:14778":{"crate_id":16,"path":["gimli","constants","DwAt"],"kind":"struct"},"16:7592:15304":{"crate_id":16,"path":["gimli","read","rnglists","RawRngListEntry"],"kind":"enum"},"16:5028:15003":{"crate_id":16,"path":["gimli","constants","DwLnct"],"kind":"struct"},"2:3185:26684":{"crate_id":2,"path":["core","ops","try_trait","NeverShortCircuitResidual"],"kind":"enum"},"18:0:1816":{"crate_id":18,"path":["memchr"],"kind":"module"},"1:12045:753":{"crate_id":1,"path":["std","i64"],"kind":"primitive"},"17:12966:18841":{"crate_id":17,"path":["object","macho","BuildVersionCommand"],"kind":"struct"},"2:42952:145":{"crate_id":2,"path":["core","hash","sip","Hasher"],"kind":"struct"},"18:636:31361":{"crate_id":18,"path":["memchr","memmem","twoway","ApproximateByteSet"],"kind":"struct"},"2:20915:2489":{"crate_id":2,"path":["core","core_simd","elements","const_ptr","SimdConstPtr"],"kind":"trait"},"2:2168:8146":{"crate_id":2,"path":["core","ptr","from_exposed_addr_mut"],"kind":"function"},"2:4384:7862":{"crate_id":2,"path":["core","cell","BorrowRefMut"],"kind":"struct"},"16:6232:15251":{"crate_id":16,"path":["gimli","read","dwarf","RangeIter"],"kind":"struct"},"1:6642:217":{"crate_id":1,"path":["std","sync","rwlock","RwLock"],"kind":"struct"},"1:8356:2299":{"crate_id":1,"path":["std","os","fd","owned","BorrowedFd"],"kind":"struct"},"16:4698:14937":{"crate_id":16,"path":["gimli","constants","DwLang"],"kind":"struct"},"17:13870:19588":{"crate_id":17,"path":["object","pe","ImageTlsDirectory64"],"kind":"struct"},"17:10223:15490":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbol"],"kind":"struct"},"17:12711:18825":{"crate_id":17,"path":["object","macho","SymtabCommand"],"kind":"struct"},"17:12435:18808":{"crate_id":17,"path":["object","macho","SegmentCommand32"],"kind":"struct"},"16:8265:128":{"crate_id":16,"path":["gimli","read","Error"],"kind":"enum"},"1:12034:313":{"crate_id":1,"path":["std","array"],"kind":"primitive"},"1:10815:119":{"crate_id":1,"path":["std","sys","unix","fs","DirBuilder"],"kind":"struct"},"1:919:2066":{"crate_id":1,"path":["std","collections","hash","map","IntoValues"],"kind":"struct"},"2:4393:7863":{"crate_id":2,"path":["core","cell","RefMut"],"kind":"struct"},"2:42064:82":{"crate_id":2,"path":["core","sync","atomic","AtomicI32"],"kind":"struct"},"17:261:30895":{"crate_id":17,"path":["object","read","util","DebugLen"],"kind":"struct"},"1:10765:22491":{"crate_id":1,"path":["std","sys","unix","fs","StatxExtraFields"],"kind":"struct"},"16:7553:15302":{"crate_id":16,"path":["gimli","read","rnglists","RangeLists"],"kind":"struct"},"1:7904:119":{"crate_id":1,"path":["std","fs","DirBuilder"],"kind":"struct"},"17:9887:15463":{"crate_id":17,"path":["object","read","coff","file","CoffFile"],"kind":"struct"},"2:47489:2511":{"crate_id":2,"path":["core","core_arch","simd","i16x32"],"kind":"struct"},"17:11726:15662":{"crate_id":17,"path":["object","archive","AixFileHeader"],"kind":"struct"},"5:7382:2157":{"crate_id":5,"path":["alloc","ffi","c_str","NulError"],"kind":"struct"},"1:1814:2130":{"crate_id":1,"path":["std","env","SplitPaths"],"kind":"struct"},"16:5689:15233":{"crate_id":16,"path":["gimli","read","cfi","BaseAddresses"],"kind":"struct"},"1:4235:2317":{"crate_id":1,"path":["std","os","unix","net","datagram","UnixDatagram"],"kind":"struct"},"17:10621:15601":{"crate_id":17,"path":["object","read","macho","file","MachOComdatSectionIterator"],"kind":"struct"},"1:4633:22361":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt","st_atime"],"kind":"foreign_type"},"17:10253:15484":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdatIterator"],"kind":"struct"},"16:7568:30444":{"crate_id":16,"path":["gimli","read","rnglists","RangeListsFormat"],"kind":"enum"},"1:12029:948":{"crate_id":1,"path":["std","never"],"kind":"primitive"},"17:13981:19599":{"crate_id":17,"path":["object","pe","ImageLoadConfigCodeIntegrity"],"kind":"struct"},"1:8224:2215":{"crate_id":1,"path":["std","io","Lines"],"kind":"struct"},"1:3940:2281":{"crate_id":1,"path":["std","os","unix","ffi","os_str","OsStrExt"],"kind":"trait"},"17:12174:18318":{"crate_id":17,"path":["object","elf","HashHeader"],"kind":"struct"},"17:13548:19565":{"crate_id":17,"path":["object","pe","ImageNtHeaders64"],"kind":"struct"},"16:6197:15249":{"crate_id":16,"path":["gimli","read","dwarf","DwarfPackage"],"kind":"struct"},"2:1637:8042":{"crate_id":2,"path":["core","mem","Discriminant"],"kind":"struct"},"1:904:2063":{"crate_id":1,"path":["std","collections","hash","map","ExtractIf"],"kind":"struct"},"2:42422:7689":{"crate_id":2,"path":["core","fmt","num","Binary"],"kind":"struct"},"1:6538:2429":{"crate_id":1,"path":["std","sync","poison","PoisonError"],"kind":"struct"},"1:11050:22647":{"crate_id":1,"path":["std","sys","unix","process","process_inner","posix_spawn","PosixSpawnattr"],"kind":"struct"},"17:10110:15488":{"crate_id":17,"path":["object","read","elf","segment","ElfSegment"],"kind":"struct"},"16:7622:15305":{"crate_id":16,"path":["gimli","read","rnglists","RngListIter"],"kind":"struct"},"1:7020:22671":{"crate_id":1,"path":["std","sys_common","lazy_box","LazyBox"],"kind":"struct"},"2:46021:2479":{"crate_id":2,"path":["core","core_arch","simd","u8x16"],"kind":"struct"},"2:21625:2477":{"crate_id":2,"path":["core","core_simd","vector","Simd"],"kind":"struct"},"9:486:14093":{"crate_id":9,"path":["miniz_oxide","DataFormat"],"kind":"enum"},"17:8542:15375":{"crate_id":17,"path":["object","common","Architecture"],"kind":"enum"},"17:9153:15405":{"crate_id":17,"path":["object","endian","I16Bytes"],"kind":"struct"},"17:10323:15541":{"crate_id":17,"path":["object","read","elf","note","GnuProperty"],"kind":"struct"},"5:1523:2097":{"crate_id":5,"path":["alloc","collections","btree","map","RangeMut"],"kind":"struct"},"1:12030:421":{"crate_id":1,"path":["std","char"],"kind":"primitive"},"2:2709:2017":{"crate_id":2,"path":["core","marker","PhantomData"],"kind":"struct"},"6:4740:12372":{"crate_id":6,"path":["libc","unix","linux_like","linux","inotify_event"],"kind":"struct"},"1:1041:2072":{"crate_id":1,"path":["std","collections","hash","map","Entry"],"kind":"enum"},"1:8290:2320":{"crate_id":1,"path":["std","os","unix","net","ancillary","AncillaryError"],"kind":"enum"},"17:9016:15223":{"crate_id":17,"path":["object","endian","LittleEndian"],"kind":"struct"},"2:10336:7745":{"crate_id":2,"path":["core","slice","iter","RSplitMut"],"kind":"struct"},"18:590:26613":{"crate_id":18,"path":["memchr","memmem","twoway","TwoWay"],"kind":"struct"},"1:10986:2403":{"crate_id":1,"path":["std","sys","unix","process","process_common","ExitCode"],"kind":"struct"},"2:45867:2502":{"crate_id":2,"path":["core","core_arch","simd","i8x8"],"kind":"struct"},"17:13683:19572":{"crate_id":17,"path":["object","pe","ImageSymbolEx"],"kind":"struct"},"2:2825:8122":{"crate_id":2,"path":["core","ops","bit","BitXor"],"kind":"trait"},"17:10266:15483":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdat"],"kind":"struct"},"2:39389:202":{"crate_id":2,"path":["core","ops","range","RangeTo"],"kind":"struct"},"17:9913:15454":{"crate_id":17,"path":["object","read","coff","section","CoffSegmentIterator"],"kind":"struct"},"16:7073:15287":{"crate_id":16,"path":["gimli","read","op","DieReference"],"kind":"enum"},"1:5615:206":{"crate_id":1,"path":["std","sync","mpsc","Receiver"],"kind":"struct"},"1:1576:2079":{"crate_id":1,"path":["std","collections","hash","set","Difference"],"kind":"struct"},"6:4568:12358":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Ehdr"],"kind":"struct"},"5:3238:2081":{"crate_id":5,"path":["alloc","collections","btree","set","Union"],"kind":"struct"},"2:21186:2484":{"crate_id":2,"path":["core","core_simd","lane_count","SupportedLaneCount"],"kind":"trait"},"1:0:1412":{"crate_id":1,"path":["std"],"kind":"module"},"18:599:31347":{"crate_id":18,"path":["memchr","memmem","twoway","Shift"],"kind":"enum"},"17:11329:15419":{"crate_id":17,"path":["object","read","ObjectKind"],"kind":"enum"},"17:13179:18855":{"crate_id":17,"path":["object","macho","ScatteredRelocationInfo"],"kind":"struct"},"2:43448:7735":{"crate_id":2,"path":["core","slice","iter","ChunksExactMut"],"kind":"struct"},"17:13957:19596":{"crate_id":17,"path":["object","pe","ImageResourceDirectoryString"],"kind":"struct"},"2:41480:155":{"crate_id":2,"path":["core","net","ip_addr","IpAddr"],"kind":"enum"},"16:7665:15307":{"crate_id":16,"path":["gimli","read","str","DebugStr"],"kind":"struct"},"16:2293:14272":{"crate_id":16,"path":["gimli","common","Format"],"kind":"enum"},"16:4965:14988":{"crate_id":16,"path":["gimli","constants","DwLns"],"kind":"struct"},"16:6692:15274":{"crate_id":16,"path":["gimli","read","line","ColumnType"],"kind":"enum"},"17:1075:15456":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbolIterator"],"kind":"struct"},"1:1778:2120":{"crate_id":1,"path":["std","env","VarsOs"],"kind":"struct"},"17:11696:15661":{"crate_id":17,"path":["object","archive","AixHeader"],"kind":"struct"},"6:4908:12392":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_sndinfo"],"kind":"struct"},"1:5970:2435":{"crate_id":1,"path":["std","sync","mpmc","counter","Sender"],"kind":"struct"},"2:40120:7888":{"crate_id":2,"path":["core","char","convert","ParseCharError"],"kind":"struct"},"1:638:2036":{"crate_id":1,"path":["std","backtrace","BacktraceSymbol"],"kind":"struct"},"2:3321:69":{"crate_id":2,"path":["core","any","Any"],"kind":"trait"},"16:5414:30563":{"crate_id":16,"path":["gimli","read","util","sealed","CapacityFull"],"kind":"struct"},"6:4949:12397":{"crate_id":6,"path":["libc","unix","linux_like","linux","rlimit64"],"kind":"struct"},"6:4678:2280":{"crate_id":6,"path":["libc","unix","linux_like","linux","ucred"],"kind":"struct"},"2:3237:7682":{"crate_id":2,"path":["core","ops","unsize","DispatchFromDyn"],"kind":"trait"},"2:40396:2110":{"crate_id":2,"path":["core","iter","adapters","by_ref_sized","ByRefSized"],"kind":"struct"},"2:3517:2062":{"crate_id":2,"path":["core","array","drain","Drain"],"kind":"struct"},"2:41807:193":{"crate_id":2,"path":["core","pin","Pin"],"kind":"struct"},"16:5793:30455":{"crate_id":16,"path":["gimli","read","cfi","AugmentationData"],"kind":"struct"},"17:11498:15427":{"crate_id":17,"path":["object","read","Import"],"kind":"struct"},"17:3186:15560":{"crate_id":17,"path":["object","read","macho","section","MachOSectionIterator"],"kind":"struct"},"1:6248:2435":{"crate_id":1,"path":["std","sync","mpmc","Sender"],"kind":"struct"},"2:2156:593":{"crate_id":2,"path":["core","ptr","drop_in_place"],"kind":"function"},"16:6372:15260":{"crate_id":16,"path":["gimli","read","aranges","DebugAranges"],"kind":"struct"},"16:6931:15283":{"crate_id":16,"path":["gimli","read","loclists","RawLocListIter"],"kind":"struct"},"2:22028:2273":{"crate_id":2,"path":["core","num","dec2flt","ParseFloatError"],"kind":"struct"},"1:8848:2403":{"crate_id":1,"path":["std","process","ExitCode"],"kind":"struct"},"17:11098:15613":{"crate_id":17,"path":["object","read","pe","import","ImportTable"],"kind":"struct"},"16:3867:14394":{"crate_id":16,"path":["gimli","constants","DwCfa"],"kind":"struct"},"2:43410:7733":{"crate_id":2,"path":["core","slice","iter","Windows"],"kind":"struct"},"5:6798:7825":{"crate_id":5,"path":["alloc","vec","in_place_drop","InPlaceDstBufDrop"],"kind":"struct"},"17:13566:19567":{"crate_id":17,"path":["object","pe","ImageRomHeaders"],"kind":"struct"},"1:5080:22594":{"crate_id":1,"path":["std","path","fmt","DebugHelper"],"kind":"struct"},"2:42672:68":{"crate_id":2,"path":["core","fmt","rt","Alignment"],"kind":"enum"},"6:7278:13861":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","align","clone_args"],"kind":"struct"},"7:0:1567":{"crate_id":7,"path":["unwind"],"kind":"module"},"2:4258:207":{"crate_id":2,"path":["core","cell","RefCell"],"kind":"struct"},"6:4729:12371":{"crate_id":6,"path":["libc","unix","linux_like","linux","arpd_request"],"kind":"struct"},"17:12727:18826":{"crate_id":17,"path":["object","macho","DysymtabCommand"],"kind":"struct"},"16:2541:14310":{"crate_id":16,"path":["gimli","common","LocationListsOffset"],"kind":"struct"},"2:43949:7771":{"crate_id":2,"path":["core","str","iter","EscapeUnicode"],"kind":"struct"},"2:30385:2093":{"crate_id":2,"path":["core","mem","manually_drop","ManuallyDrop"],"kind":"struct"},"2:43419:7732":{"crate_id":2,"path":["core","slice","iter","Chunks"],"kind":"struct"},"1:7874:2182":{"crate_id":1,"path":["std","fs","Permissions"],"kind":"struct"},"1:8965:2424":{"crate_id":1,"path":["std","sync","condvar","WaitTimeoutResult"],"kind":"struct"},"11:657:2059":{"crate_id":11,"path":["hashbrown","map","IntoIter"],"kind":"struct"},"1:7682:2012":{"crate_id":1,"path":["std","thread","Thread"],"kind":"struct"},"11:817:2069":{"crate_id":11,"path":["hashbrown","map","RawOccupiedEntryMut"],"kind":"struct"},"2:2511:75":{"crate_id":2,"path":["core","convert","AsRef"],"kind":"trait"},"16:5626:15229":{"crate_id":16,"path":["gimli","read","cfi","EhHdrTableIter"],"kind":"struct"},"5:1118:27860":{"crate_id":5,"path":["alloc","collections","btree","borrow","DormantMutRef"],"kind":"struct"},"6:7295:13862":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","align","sem_t"],"kind":"struct"},"2:21062:8145":{"crate_id":2,"path":["core","core_simd","elements","mut_ptr","SimdMutPtr","from_exposed_addr"],"kind":"foreign_type"},"17:14301:19620":{"crate_id":17,"path":["object","pe","ImageDebugDirectory"],"kind":"struct"},"6:6573:9735":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statfs"],"kind":"struct"},"17:12118:18314":{"crate_id":17,"path":["object","elf","Verneed"],"kind":"struct"},"6:4955:12398":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_nl"],"kind":"struct"},"16:7763:15313":{"crate_id":16,"path":["gimli","read","unit","UnitType"],"kind":"enum"},"2:40465:8074":{"crate_id":2,"path":["core","iter","adapters","filter_map","FilterMap"],"kind":"struct"},"17:12318:18802":{"crate_id":17,"path":["object","macho","DyldCacheImageInfo"],"kind":"struct"},"17:11074:15428":{"crate_id":17,"path":["object","read","pe","export","Export"],"kind":"struct"},"2:2846:8127":{"crate_id":2,"path":["core","ops","bit","BitOrAssign"],"kind":"trait"},"2:10225:7737":{"crate_id":2,"path":["core","slice","iter","SplitMut"],"kind":"struct"},"2:44132:7794":{"crate_id":2,"path":["core","str","pattern","CharSliceSearcher"],"kind":"struct"},"17:9604:15413":{"crate_id":17,"path":["object","read","any","SymbolTable"],"kind":"struct"},"2:43618:2218":{"crate_id":2,"path":["core","str","iter","Bytes"],"kind":"struct"},"6:7250:8840":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","not_x32","statvfs"],"kind":"struct"},"1:10339:22445":{"crate_id":1,"path":["std","sys","unix","process","process_common","Argv"],"kind":"struct"},"1:7743:2139":{"crate_id":1,"path":["std","env","VarError"],"kind":"enum"},"2:46487:26555":{"crate_id":2,"path":["core","core_arch","simd","m64x2"],"kind":"struct"},"5:2049:2099":{"crate_id":5,"path":["alloc","collections","btree","map","CursorMut"],"kind":"struct"},"17:9706:15415":{"crate_id":17,"path":["object","read","any","DynamicRelocationIterator"],"kind":"struct"},"6:4463:12345":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_replay"],"kind":"struct"},"17:10945:15642":{"crate_id":17,"path":["object","read","pe","file","PeComdatIterator"],"kind":"struct"},"2:41908:84":{"crate_id":2,"path":["core","sync","atomic","AtomicI8"],"kind":"struct"},"5:5362:7716":{"crate_id":5,"path":["alloc","slice","Concat"],"kind":"trait"},"2:46265:2521":{"crate_id":2,"path":["core","core_arch","simd","i64x2"],"kind":"struct"},"2:40266:101":{"crate_id":2,"path":["core","ffi","c_str","CStr"],"kind":"struct"},"2:4190:7712":{"crate_id":2,"path":["core","cell","Cell"],"kind":"struct"},"2:41815:210":{"crate_id":2,"path":["core","result","Result"],"kind":"enum"},"11:119:30149":{"crate_id":11,"path":["hashbrown","raw","RawTable"],"kind":"struct"},"1:9110:219":{"crate_id":1,"path":["std","sync","rwlock","RwLockWriteGuard"],"kind":"struct"},"2:39433:203":{"crate_id":2,"path":["core","ops","range","RangeToInclusive"],"kind":"struct"},"16:7693:15309":{"crate_id":16,"path":["gimli","read","str","DebugLineStr"],"kind":"struct"},"2:40233:7886":{"crate_id":2,"path":["core","char","CaseMappingIter"],"kind":"enum"},"17:13757:19578":{"crate_id":17,"path":["object","pe","ImageAuxSymbolSection"],"kind":"struct"},"6:7599:14049":{"crate_id":6,"path":["libc","unix","linux_like","linux","non_exhaustive","open_how"],"kind":"struct"},"2:8977:26326":{"crate_id":2,"path":["core","fmt","builders","PadAdapter"],"kind":"struct"},"5:2959:7673":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Owned"],"kind":"enum"},"5:5839:2062":{"crate_id":5,"path":["alloc","string","Drain"],"kind":"struct"},"16:2781:14320":{"crate_id":16,"path":["gimli","common","DebugStrOffsetsBase"],"kind":"struct"},"2:40436:8071":{"crate_id":2,"path":["core","iter","adapters","cycle","Cycle"],"kind":"struct"},"5:3720:2098":{"crate_id":5,"path":["alloc","collections","linked_list","Cursor"],"kind":"struct"},"17:13894:19590":{"crate_id":17,"path":["object","pe","ImageImportDescriptor"],"kind":"struct"},"1:11617:14258":{"crate_id":1,"path":["std","backtrace_rs","backtrace","libunwind","Frame"],"kind":"enum"},"6:4704:12368":{"crate_id":6,"path":["libc","unix","linux_like","linux","posix_spawnattr_t"],"kind":"struct"},"6:4824:12383":{"crate_id":6,"path":["libc","unix","linux_like","linux","seccomp_data"],"kind":"struct"},"6:6820:13487":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","shmid_ds"],"kind":"struct"},"2:41622:2260":{"crate_id":2,"path":["core","net","socket_addr","SocketAddr"],"kind":"enum"},"1:10956:2396":{"crate_id":1,"path":["std","sys","unix","process","process_common","Stdio"],"kind":"enum"},"16:7099:15288":{"crate_id":16,"path":["gimli","read","op","Operation"],"kind":"enum"},"6:4992:12402":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_user_dev"],"kind":"struct"},"17:13787:19581":{"crate_id":17,"path":["object","pe","ImageLinenumber"],"kind":"struct"},"1:4738:2297":{"crate_id":1,"path":["std","os","fd","raw","AsRawFd"],"kind":"trait"},"5:1011:27919":{"crate_id":5,"path":["alloc","collections","binary_heap","drop","DropGuard"],"kind":"struct"},"5:7182:2095":{"crate_id":5,"path":["alloc","alloc","Global"],"kind":"struct"},"5:895:2057":{"crate_id":5,"path":["alloc","collections","binary_heap","Iter"],"kind":"struct"},"16:2825:14322":{"crate_id":16,"path":["gimli","common","DebugTypesOffset"],"kind":"struct"},"5:6886:244":{"crate_id":5,"path":["alloc","vec","Vec"],"kind":"struct"},"2:30619:26135":{"crate_id":2,"path":["core","ptr","alignment","AlignmentEnum64"],"kind":"enum"},"1:5306:120":{"crate_id":1,"path":["std","path","Display"],"kind":"struct"},"17:11454:15425":{"crate_id":17,"path":["object","read","ObjectMap"],"kind":"struct"},"17:13155:15430":{"crate_id":17,"path":["object","macho","Relocation"],"kind":"struct"},"2:11412:7763":{"crate_id":2,"path":["core","str","converts","from_utf8"],"kind":"function"},"1:6425:2425":{"crate_id":1,"path":["std","sync","once","Once"],"kind":"struct"},"2:43924:7760":{"crate_id":2,"path":["core","str","iter","EncodeUtf16"],"kind":"struct"},"1:12055:13":{"crate_id":1,"path":["std","fn"],"kind":"primitive"},"17:9744:31158":{"crate_id":17,"path":["object","read","any","SectionRelocationIteratorInternal"],"kind":"enum"},"1:12054:1143":{"crate_id":1,"path":["std","reference"],"kind":"primitive"},"2:45766:2537":{"crate_id":2,"path":["core","core_arch","simd","u8x8"],"kind":"struct"},"2:39508:15327":{"crate_id":2,"path":["core","any","tags","Value"],"kind":"struct"},"17:10330:15512":{"crate_id":17,"path":["object","read","elf","hash","HashTable"],"kind":"struct"},"1:2631:2231":{"crate_id":1,"path":["std","io","buffered","linewriter","LineWriter"],"kind":"struct"},"2:43520:7743":{"crate_id":2,"path":["core","slice","iter","RChunksMut"],"kind":"struct"},"2:10419:7747":{"crate_id":2,"path":["core","slice","iter","RSplitNMut"],"kind":"struct"},"6:579:8893":{"crate_id":6,"path":["libc","unix","tms"],"kind":"struct"},"14:187:14233":{"crate_id":14,"path":["rustc_demangle","SizeLimitedFmtAdapter"],"kind":"struct"},"17:12994:18843":{"crate_id":17,"path":["object","macho","DyldInfoCommand"],"kind":"struct"},"2:22461:175":{"crate_id":2,"path":["core","num","nonzero","NonZeroU16"],"kind":"struct"},"11:2194:30154":{"crate_id":11,"path":["hashbrown","raw","TableLayout"],"kind":"struct"},"1:8296:2311":{"crate_id":1,"path":["std","os","unix","net","ancillary","SocketAncillary"],"kind":"struct"},"2:4789:26357":{"crate_id":2,"path":["core","ffi","sealed_trait","VaArgSafe"],"kind":"trait"},"6:5793:13049":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__exit_status"],"kind":"struct"},"6:5015:12404":{"crate_id":6,"path":["libc","unix","linux_like","linux","mq_attr"],"kind":"struct"},"17:10799:15561":{"crate_id":17,"path":["object","read","macho","segment","MachOSegment"],"kind":"struct"},"2:45937:2520":{"crate_id":2,"path":["core","core_arch","simd","i64x1"],"kind":"struct"},"18:80:19642":{"crate_id":18,"path":["memchr","memchr","iter","Memchr"],"kind":"struct"},"11:97:30148":{"crate_id":11,"path":["hashbrown","raw","Bucket"],"kind":"struct"},"1:9032:22079":{"crate_id":1,"path":["std","sync","mpmc","select","Token"],"kind":"struct"},"1:4155:2313":{"crate_id":1,"path":["std","os","unix","net","ancillary","ScmRights"],"kind":"struct"},"1:9202:22280":{"crate_id":1,"path":["std","sys","personality","dwarf","eh","EHContext"],"kind":"struct"},"16:7255:2365":{"crate_id":16,"path":["gimli","read","op","Location"],"kind":"enum"},"1:12036:1420":{"crate_id":1,"path":["std","str"],"kind":"primitive"},"17:504:15391":{"crate_id":17,"path":["object","read","any","Comdat"],"kind":"struct"},"2:11617:8270":{"crate_id":2,"path":["core","str","iter","MatchIndicesInternal"],"kind":"struct"},"6:4328:12332":{"crate_id":6,"path":["libc","unix","linux_like","linux","dqblk"],"kind":"struct"},"5:7221:2086":{"crate_id":5,"path":["alloc","collections","binary_heap","DrainSorted"],"kind":"struct"},"17:10520:15550":{"crate_id":17,"path":["object","read","elf","attributes","AttributeReader"],"kind":"struct"},"6:4475:12347":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_envelope"],"kind":"struct"},"2:42718:71":{"crate_id":2,"path":["core","fmt","rt","Argument"],"kind":"struct"},"5:629:27908":{"crate_id":5,"path":["alloc","boxed","from","StringError"],"kind":"struct"},"6:573:8892":{"crate_id":6,"path":["libc","unix","itimerval"],"kind":"struct"},"17:11127:15427":{"crate_id":17,"path":["object","read","pe","import","Import"],"kind":"enum"},"17:582:15392":{"crate_id":17,"path":["object","read","any","Symbol"],"kind":"struct"},"18:564:19673":{"crate_id":18,"path":["memchr","memmem","rarebytes","RareNeedleBytes"],"kind":"struct"},"2:41566:26607":{"crate_id":2,"path":["core","net","ip_addr","fmt","Span"],"kind":"struct"},"17:2105:15526":{"crate_id":17,"path":["object","read","elf","relocation","ElfRelaIterator"],"kind":"enum"},"1:11979:21726":{"crate_id":1,"path":["std","backtrace_rs","symbolize","gimli","parse_running_mmaps","MapsEntry"],"kind":"struct"},"5:2141:27896":{"crate_id":5,"path":["alloc","collections","btree","merge_iter","MergeIterInner"],"kind":"struct"},"17:10339:15511":{"crate_id":17,"path":["object","read","elf","hash","GnuHashTable"],"kind":"struct"},"17:12539:18813":{"crate_id":17,"path":["object","macho","FvmlibCommand"],"kind":"struct"},"16:2519:14309":{"crate_id":16,"path":["gimli","common","DebugLineStrOffset"],"kind":"struct"},"16:6386:15261":{"crate_id":16,"path":["gimli","read","aranges","ArangeHeaderIter"],"kind":"struct"},"5:1473:2061":{"crate_id":5,"path":["alloc","collections","btree","map","Values"],"kind":"struct"},"11:968:2072":{"crate_id":11,"path":["hashbrown","map","Entry"],"kind":"enum"},"2:47981:7651":{"crate_id":2,"path":["core","core_arch","x86","__m256"],"kind":"struct"},"6:6705:13479":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","pthread_attr_t"],"kind":"struct"},"17:12106:18313":{"crate_id":17,"path":["object","elf","Verdaux"],"kind":"struct"},"1:635:2035":{"crate_id":1,"path":["std","backtrace","BacktraceFrame"],"kind":"struct"},"1:1839:2137":{"crate_id":1,"path":["std","env","ArgsOs"],"kind":"struct"},"1:12046:749":{"crate_id":1,"path":["std","i128"],"kind":"primitive"},"6:6589:8764":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","flock"],"kind":"struct"},"5:2962:27843":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Immut"],"kind":"struct"},"16:2663:14315":{"crate_id":16,"path":["gimli","common","RawRangeListsOffset"],"kind":"struct"},"1:4913:2348":{"crate_id":1,"path":["std","os","net","linux_ext","tcp","TcpStreamExt"],"kind":"trait"},"6:6015:13066":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_entry"],"kind":"struct"},"11:736:2061":{"crate_id":11,"path":["hashbrown","map","Values"],"kind":"struct"},"17:14403:19628":{"crate_id":17,"path":["object","pe","ImportObjectHeader"],"kind":"struct"},"17:14163:19610":{"crate_id":17,"path":["object","pe","ImageHotPatchBase"],"kind":"struct"},"1:10947:21718":{"crate_id":1,"path":["std","sys","unix","os_str","Buf"],"kind":"struct"},"18:766:19659":{"crate_id":18,"path":["memchr","memmem","SearcherRevKind"],"kind":"enum"},"17:9296:15376":{"crate_id":17,"path":["object","read","util","ByteString"],"kind":"struct"},"5:1492:2065":{"crate_id":5,"path":["alloc","collections","btree","map","IntoKeys"],"kind":"struct"},"18:515:19670":{"crate_id":18,"path":["memchr","memmem","prefilter","PrefilterFn"],"kind":"struct"},"2:40184:7771":{"crate_id":2,"path":["core","char","EscapeUnicode"],"kind":"struct"},"2:2359:189":{"crate_id":2,"path":["core","cmp","PartialOrd"],"kind":"trait"},"2:2698:225":{"crate_id":2,"path":["core","marker","StructuralEq"],"kind":"trait"},"2:8387:2043":{"crate_id":2,"path":["core","panic","unwind_safe","UnwindSafe"],"kind":"trait"},"17:10417:15514":{"crate_id":17,"path":["object","read","elf","version","VerneedIterator"],"kind":"struct"},"2:46067:2543":{"crate_id":2,"path":["core","core_arch","simd","u16x8"],"kind":"struct"},"5:1288:2073":{"crate_id":5,"path":["alloc","collections","btree","map","entry","OccupiedEntry"],"kind":"struct"},"5:3735:2099":{"crate_id":5,"path":["alloc","collections","linked_list","CursorMut"],"kind":"struct"},"17:9083:15379":{"crate_id":17,"path":["object","endian","U32Bytes"],"kind":"struct"},"1:10760:21699":{"crate_id":1,"path":["std","sys","unix","fs","FileAttr"],"kind":"struct"},"16:6939:15284":{"crate_id":16,"path":["gimli","read","loclists","RawLocListEntry"],"kind":"enum"},"1:3261:2241":{"crate_id":1,"path":["std","io","stdio","StdoutLock"],"kind":"struct"},"6:119:8562":{"crate_id":6,"path":["libc","unix","FILE"],"kind":"enum"},"1:502:2002":{"crate_id":1,"path":["std","thread","PanicGuard"],"kind":"struct"},"6:4862:12388":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_ifru_map"],"kind":"struct"},"2:43940:2031":{"crate_id":2,"path":["core","str","iter","EscapeDefault"],"kind":"struct"},"2:2935:1949":{"crate_id":2,"path":["core","ops","function","FnOnce"],"kind":"trait"},"15:394:14261":{"crate_id":15,"path":["addr2line","DebugFile"],"kind":"enum"},"14:221:14235":{"crate_id":14,"path":["rustc_demangle","SizeLimitExhausted"],"kind":"struct"},"11:1826:2062":{"crate_id":11,"path":["hashbrown","set","Drain"],"kind":"struct"},"17:12365:15604":{"crate_id":17,"path":["object","macho","FatArch64"],"kind":"struct"},"6:5074:12410":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_can_addr"],"kind":"union"},"1:3298:2236":{"crate_id":1,"path":["std","io","stdio","Stderr"],"kind":"struct"},"1:12028:374":{"crate_id":1,"path":["std","bool"],"kind":"primitive"},"2:40962:8055":{"crate_id":2,"path":["core","iter","sources","once_with","OnceWith"],"kind":"struct"},"16:2737:14318":{"crate_id":16,"path":["gimli","common","DebugRngListsIndex"],"kind":"struct"},"17:13591:19568":{"crate_id":17,"path":["object","pe","AnonObjectHeader"],"kind":"struct"},"17:14015:19603":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation32V2"],"kind":"struct"},"5:276:1952":{"crate_id":5,"path":["alloc","boxed","Box"],"kind":"struct"},"2:20927:25827":{"crate_id":2,"path":["core","core_simd","elements","const_ptr","SimdConstPtr","with_addr"],"kind":"foreign_type"},"16:7753:15312":{"crate_id":16,"path":["gimli","read","unit","DebugInfoUnitHeadersIter"],"kind":"struct"},"2:21284:2481":{"crate_id":2,"path":["core","core_simd","masks","to_bitmask","ToBitMask"],"kind":"trait"},"1:11473:2267":{"crate_id":1,"path":["std","sys_common","net","TcpStream"],"kind":"struct"},"17:14359:19625":{"crate_id":17,"path":["object","pe","ImageSeparateDebugHeader"],"kind":"struct"},"16:2589:14312":{"crate_id":16,"path":["gimli","common","DebugLocListsIndex"],"kind":"struct"},"6:6726:13482":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_fpstate"],"kind":"struct"},"17:12618:18819":{"crate_id":17,"path":["object","macho","SubLibraryCommand"],"kind":"struct"},"2:40376:7723":{"crate_id":2,"path":["core","iter","adapters","array_chunks","ArrayChunks"],"kind":"struct"},"2:12642:107":{"crate_id":2,"path":["core","task","wake","Context"],"kind":"struct"},"17:9614:30979":{"crate_id":17,"path":["object","read","any","SymbolTableInternal"],"kind":"enum"},"17:400:15390":{"crate_id":17,"path":["object","read","any","Segment"],"kind":"struct"},"17:12646:18821":{"crate_id":17,"path":["object","macho","DylinkerCommand"],"kind":"struct"},"17:12412:18806":{"crate_id":17,"path":["object","macho","LoadCommand"],"kind":"struct"},"1:7731:2076":{"crate_id":1,"path":["std","collections","hash","map","RandomState"],"kind":"struct"},"17:11034:15645":{"crate_id":17,"path":["object","read","pe","section","PeRelocationIterator"],"kind":"struct"},"2:39369:199":{"crate_id":2,"path":["core","ops","range","RangeFrom"],"kind":"struct"},"16:6332:15257":{"crate_id":16,"path":["gimli","read","abbrev","Abbreviation"],"kind":"struct"},"2:8982:27027":{"crate_id":2,"path":["core","fmt","builders","PadAdapterState"],"kind":"struct"},"1:9482:2184":{"crate_id":1,"path":["std","sys","unix","fs","ReadDir"],"kind":"struct"},"11:403:30139":{"crate_id":11,"path":["hashbrown","raw","RawIterHashInner"],"kind":"struct"},"17:12035:18308":{"crate_id":17,"path":["object","elf","ProgramHeader64"],"kind":"struct"},"1:10161:22568":{"crate_id":1,"path":["std","sys","unix","os_str","Slice"],"kind":"struct"},"17:13659:15458":{"crate_id":17,"path":["object","pe","ImageSymbol"],"kind":"struct"},"2:2795:8118":{"crate_id":2,"path":["core","ops","arith","MulAssign"],"kind":"trait"},"17:9777:15439":{"crate_id":17,"path":["object","read","archive","ArchiveKind"],"kind":"enum"},"11:798:2067":{"crate_id":11,"path":["hashbrown","map","RawEntryBuilderMut"],"kind":"struct"},"17:13368:19558":{"crate_id":17,"path":["object","pe","ImageVxdHeader"],"kind":"struct"},"5:2170:27797":{"crate_id":5,"path":["alloc","collections","btree","navigate","LeafRange"],"kind":"struct"},"2:31017:7902":{"crate_id":2,"path":["core","cmp","Reverse"],"kind":"struct"},"16:5100:15027":{"crate_id":16,"path":["gimli","constants","DwRle"],"kind":"struct"},"2:21533:2496":{"crate_id":2,"path":["core","core_simd","ord","SimdOrd"],"kind":"trait"},"1:10082:2130":{"crate_id":1,"path":["std","sys","unix","os","SplitPaths"],"kind":"struct"},"5:2223:27883":{"crate_id":5,"path":["alloc","collections","btree","navigate","LazyLeafHandle"],"kind":"enum"},"2:7272:152":{"crate_id":2,"path":["core","iter","traits","collect","IntoIterator"],"kind":"trait"},"2:42702:26594":{"crate_id":2,"path":["core","fmt","rt","Flag"],"kind":"enum"},"5:7199:2085":{"crate_id":5,"path":["alloc","collections","binary_heap","IntoIterSorted"],"kind":"struct"},"17:13456:19562":{"crate_id":17,"path":["object","pe","ImageOptionalHeader32"],"kind":"struct"},"2:46335:2577":{"crate_id":2,"path":["core","core_arch","simd","f64x4"],"kind":"struct"},"17:9866:15444":{"crate_id":17,"path":["object","read","archive","ArchiveMember"],"kind":"struct"},"18:671:19661":{"crate_id":18,"path":["memchr","memmem","FindRevIter"],"kind":"struct"},"16:6502:15268":{"crate_id":16,"path":["gimli","read","index","UnitIndexSectionIterator"],"kind":"struct"},"1:5238:190":{"crate_id":1,"path":["std","path","Path"],"kind":"struct"},"16:5775:15237":{"crate_id":16,"path":["gimli","read","cfi","Augmentation"],"kind":"struct"},"1:3517:2190":{"crate_id":1,"path":["std","io","Seek"],"kind":"trait"},"17:10654:15577":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandData"],"kind":"struct"},"2:41722:8136":{"crate_id":2,"path":["core","option","Item"],"kind":"struct"},"17:10199:15492":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbolTable"],"kind":"struct"},"17:14102:19608":{"crate_id":17,"path":["object","pe","ImageLoadConfigDirectory64"],"kind":"struct"},"17:12566:18815":{"crate_id":17,"path":["object","macho","DylibCommand"],"kind":"struct"},"6:6744:13483":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user_regs_struct"],"kind":"struct"},"16:6667:14244":{"crate_id":16,"path":["gimli","read","line","LineRow"],"kind":"struct"},"6:4800:12380":{"crate_id":6,"path":["libc","unix","linux_like","linux","j1939_filter"],"kind":"struct"},"5:4393:2204":{"crate_id":5,"path":["alloc","collections","vec_deque","write_iter_wrapping","Guard"],"kind":"struct"},"18:719:19657":{"crate_id":18,"path":["memchr","memmem","NeedleInfo"],"kind":"struct"},"2:43836:7776":{"crate_id":2,"path":["core","str","iter","Matches"],"kind":"struct"},"4:0:1806":{"crate_id":4,"path":["rustc_std_workspace_core"],"kind":"module"},"17:9655:15414":{"crate_id":17,"path":["object","read","any","SymbolIterator"],"kind":"struct"},"2:20741:26319":{"crate_id":2,"path":["core","core_simd","swizzle","deinterleave","Even"],"kind":"struct"},"17:11020:15614":{"crate_id":17,"path":["object","read","pe","section","PeSection"],"kind":"struct"},"1:11155:2402":{"crate_id":1,"path":["std","sys","unix","process","process_inner","ExitStatusError"],"kind":"struct"},"16:6175:15248":{"crate_id":16,"path":["gimli","read","dwarf","Dwarf"],"kind":"struct"},"1:4698:2349":{"crate_id":1,"path":["std","os","linux","process","ChildExt"],"kind":"trait"},"2:11812:2386":{"crate_id":2,"path":["core","str","traits","FromStr"],"kind":"trait"},"1:3219:2238":{"crate_id":1,"path":["std","io","stdio","Stdin"],"kind":"struct"},"2:22146:26572":{"crate_id":2,"path":["core","num","fmt","Formatted"],"kind":"struct"},"2:2988:2113":{"crate_id":2,"path":["core","ops","index","IndexMut"],"kind":"trait"},"1:3992:2285":{"crate_id":1,"path":["std","os","unix","fs","OpenOptionsExt"],"kind":"trait"},"17:12354:15603":{"crate_id":17,"path":["object","macho","FatArch32"],"kind":"struct"},"17:11234:15653":{"crate_id":17,"path":["object","read","pe","resource","ResourceName"],"kind":"struct"},"5:4164:2204":{"crate_id":5,"path":["alloc","collections","vec_deque","into_iter","try_fold","Guard"],"kind":"struct"},"1:3460:2188":{"crate_id":1,"path":["std","io","IoSliceMut"],"kind":"struct"},"17:10529:15596":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCache"],"kind":"struct"},"2:22040:26146":{"crate_id":2,"path":["core","num","dec2flt","FloatErrorKind"],"kind":"enum"}},"external_crates":{"17":{"name":"object","html_root_url":"https://doc.rust-lang.org/nightly/"},"14":{"name":"rustc_demangle","html_root_url":"https://doc.rust-lang.org/nightly/"},"11":{"name":"hashbrown","html_root_url":"https://doc.rust-lang.org/nightly/"},"8":{"name":"cfg_if","html_root_url":"https://docs.rs/cfg-if/"},"5":{"name":"alloc","html_root_url":"https://doc.rust-lang.org/nightly/"},"2":{"name":"core","html_root_url":"https://doc.rust-lang.org/nightly/"},"19":{"name":"panic_unwind","html_root_url":"https://doc.rust-lang.org/nightly/"},"16":{"name":"gimli","html_root_url":"https://doc.rust-lang.org/nightly/"},"13":{"name":"std_detect","html_root_url":"https://doc.rust-lang.org/nightly/"},"10":{"name":"adler","html_root_url":"https://docs.rs/adler/1.0.2/"},"7":{"name":"unwind","html_root_url":"https://doc.rust-lang.org/nightly/"},"4":{"name":"rustc_std_workspace_core","html_root_url":"https://doc.rust-lang.org/nightly/"},"1":{"name":"std","html_root_url":"https://doc.rust-lang.org/nightly/"},"18":{"name":"memchr","html_root_url":"https://doc.rust-lang.org/nightly/"},"15":{"name":"addr2line","html_root_url":"https://doc.rust-lang.org/nightly/"},"12":{"name":"rustc_std_workspace_alloc","html_root_url":"https://doc.rust-lang.org/nightly/"},"9":{"name":"miniz_oxide","html_root_url":"https://doc.rust-lang.org/nightly/"},"6":{"name":"libc","html_root_url":"https://doc.rust-lang.org/nightly/"},"3":{"name":"compiler_builtins","html_root_url":"https://doc.rust-lang.org/nightly/"}},"format_version":26}