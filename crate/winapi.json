{"root":"0:0:1575","crate_version":"0.3.9","includes_private":false,"index":{"2:3306:2045":{"id":"2:3306:2045","crate_id":2,"name":"BitAnd","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3308:167","2:3309:335"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:13226:2394":{"id":"2:13226:2394","crate_id":2,"name":"char_indices","span":null,"visibility":"public","docs":"Returns an iterator over the [`char`]s of a string slice, and their\npositions.\n\nAs a string slice consists of valid UTF-8, we can iterate through a\nstring slice by [`char`]. This method returns an iterator of both\nthese [`char`]s, as well as their byte positions.\n\nThe iterator yields tuples. The position is first, the [`char`] is\nsecond.\n\n# Examples\n\nBasic usage:\n\n```\nlet word = \"goodbye\";\n\nlet count = word.char_indices().count();\nassert_eq!(7, count);\n\nlet mut char_indices = word.char_indices();\n\nassert_eq!(Some((0, 'g')), char_indices.next());\nassert_eq!(Some((1, 'o')), char_indices.next());\nassert_eq!(Some((2, 'o')), char_indices.next());\nassert_eq!(Some((3, 'd')), char_indices.next());\nassert_eq!(Some((4, 'b')), char_indices.next());\nassert_eq!(Some((5, 'y')), char_indices.next());\nassert_eq!(Some((6, 'e')), char_indices.next());\n\nassert_eq!(None, char_indices.next());\n```\n\nRemember, [`char`]s might not match your intuition about characters:\n\n[`char`]: prim@char\n\n```\nlet yes = \"y̆es\";\n\nlet mut char_indices = yes.char_indices();\n\nassert_eq!(Some((0, 'y')), char_indices.next()); // not (0, 'y̆')\nassert_eq!(Some((1, '\\u{0306}')), char_indices.next());\n\n// note the 3 here - the last character took up two bytes\nassert_eq!(Some((3, 'e')), char_indices.next());\nassert_eq!(Some((4, 's')), char_indices.next());\n\nassert_eq!(None, char_indices.next());\n```","links":{"prim@char":"1:15741:1699"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"CharIndices","id":"2:49126:2870","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13326:1981":{"id":"2:13326:1981","crate_id":2,"name":"escape_default","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_default`].\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"❤\\n!\".escape_default() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"❤\\n!\".escape_default());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"\\\\u{{2764}}\\\\n!\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"❤\\n!\".escape_default().to_string(), \"\\\\u{2764}\\\\n!\");\n```","links":{"`char::escape_default`":"1:15741:1699"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]","#[stable(feature = \"str_escape\", since = \"1.34.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"EscapeDefault","id":"2:49458:1982","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:8482:153":{"id":"2:8482:153","crate_id":2,"name":"Iterator","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:8483:2755","2:8484:900","2:8485:50721","2:8488:50722","2:8489:478","2:8491:50723","2:8494:50724","2:8495:50725","2:8496:2605","2:8497:2589","2:8499:2493","2:8501:2599","2:8502:50726","2:8504:819","2:8507:50727","2:8514:2594","2:8516:2595","2:8519:2593","2:8520:2601","2:8521:2604","2:8523:2607","2:8525:2600","2:8528:1279","2:8529:2606","2:8530:2603","2:8534:50728","2:8537:2596","2:8538:2597","2:8539:2598","2:8541:50116","2:8542:1819","2:8544:50729","2:8547:50730","2:8549:50731","2:8559:50732","2:8574:50733","2:8576:50734","2:8580:50735","2:8589:50736","2:8592:50737","2:8594:50738","2:8597:261","2:8604:278","2:8611:3925","2:8618:50739","2:8627:50740","2:8637:993","2:8644:50741","2:8651:2556","2:8652:2553","2:8653:2558","2:8665:2557","2:8672:2555","2:8684:2554","2:8691:2602","2:8692:50742","2:8697:2591","2:8700:2590","2:8703:2592","2:8704:50743","2:8706:50744","2:8708:398","2:8711:50745","2:8714:976","2:8717:50746","2:8720:585","2:8723:50747","2:8726:885","2:8728:804","2:8730:770","2:8732:693","2:8734:676","2:8736:50748","2:8737:50749","2:8745:50750"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:2877:170":{"id":"2:2877:170","crate_id":2,"name":"PartialOrd","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:2879:976","2:2880:804","2:2881:770","2:2882:693","2:2883:676"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"Rhs"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"2:3184:1809","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"PartialEq","id":"2:2831:169","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"Rhs"}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:13271:56881":{"id":"2:13271:56881","crate_id":2,"name":"split_once","span":null,"visibility":"public","docs":"Splits the string on the first occurrence of the specified delimiter and\nreturns prefix before delimiter and suffix after delimiter.\n\n# Examples\n\n```\nassert_eq!(\"cfg\".split_once('='), None);\nassert_eq!(\"cfg=\".split_once('='), Some((\"cfg\", \"\")));\nassert_eq!(\"cfg=foo\".split_once('='), Some((\"cfg\", \"foo\")));\nassert_eq!(\"cfg=foo=bar\".split_once('='), Some((\"cfg\", \"foo=bar\")));\n```","links":{},"attrs":["#[stable(feature = \"str_split_once\", since = \"1.52.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["delimiter",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:47192:162","args":{"angle_bracketed":{"args":[{"type":{"kind":"tuple","inner":[{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}},{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}}]}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:12847:2366","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13277:1784":{"id":"2:13277:1784","crate_id":2,"name":"matches","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within the given string\nslice.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rmatches`] method can be used.\n\n[`rmatches`]: str::matches\n\n# Examples\n\nBasic usage:\n\n```\nlet v: Vec<&str> = \"abcXXXabcYYYabc\".matches(\"abc\").collect();\nassert_eq!(v, [\"abc\", \"abc\", \"abc\"]);\n\nlet v: Vec<&str> = \"1abc2abc3\".matches(char::is_numeric).collect();\nassert_eq!(v, [\"1\", \"2\", \"3\"]);\n```","links":{"self::pattern":"2:12837:2365","`DoubleEndedIterator`":"2:8328:116","prim@char":"1:15741:1699","str::matches":"1:15747:1704"},"attrs":["#[stable(feature = \"str_matches\", since = \"1.2.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Matches","id":"2:49354:2881","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:12847:2366","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:3487:2455":{"id":"2:3487:2455","crate_id":2,"name":"IndexMut","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3489:732"],"generics":{"params":[{"name":"Idx","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"Idx"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"2:3184:1809","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Index","id":"2:3483:2079","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"Idx"}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:8760:2031":{"id":"2:8760:2031","crate_id":2,"name":"FusedIterator","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Iterator","id":"2:8482:153","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:13291:56887":{"id":"2:13291:56887","crate_id":2,"name":"trim_start","span":null,"visibility":"public","docs":"Returns a string slice with leading whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Text directionality\n\nA string is a sequence of bytes. `start` in this context means the first\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be left side, and for right-to-left languages like\nArabic or Hebrew, this will be the right side.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\nassert_eq!(\"Hello\\tworld\\t\\n\", s.trim_start());\n```\n\nDirectionality:\n\n```\nlet s = \"  English  \";\nassert!(Some('E') == s.trim_start().chars().next());\n\nlet s = \"  עברית  \";\nassert!(Some('ע') == s.trim_start().chars().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[stable(feature = \"trim_direction\", since = \"1.30.0\")]","#[rustc_diagnostic_item = \"str_trim_start\"]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:9225:1969":{"id":"1:9225:1969","crate_id":1,"name":"StdFloat","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:9226:52382","1:9227:52383","1:9228:52384","1:9229:52385","1:9230:2916","1:9231:35664","1:9232:52381"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sealed","id":"1:10447:1833","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:13209:51972":{"id":"2:13209:51972","crate_id":2,"name":"as_bytes","span":null,"visibility":"public","docs":"Converts a string slice to a byte slice. To convert the byte slice back\ninto a string slice, use the [`from_utf8`] function.\n\n# Examples\n\nBasic usage:\n\n```\nlet bytes = \"bors\".as_bytes();\nassert_eq!(b\"bors\", bytes);\n```","links":{"`from_utf8`":"2:12308:3028"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]","#[rustc_const_stable(feature = \"str_as_bytes\", since = \"1.39.0\")]","#[must_use]","#[allow(unused_attributes)]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"slice","inner":{"kind":"primitive","inner":"u8"}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:8767:2646":{"id":"2:8767:2646","crate_id":2,"name":"TrustedStep","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":true,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Step","id":"2:7808:2647","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:13315:56895":{"id":"2:13315:56895","crate_id":2,"name":"trim_right_matches","span":null,"visibility":"public","docs":"Returns a string slice with all suffixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. 'Right' in this context means the last\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _left_ side, not the right.\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_right_matches('1'), \"11foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_right_matches(char::is_numeric), \"123foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_right_matches(x), \"12foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1fooX\".trim_right_matches(|c| c == '1' || c == 'X'), \"1foo\");\n```","links":{"self::pattern":"2:12837:2365","prim@char":"1:15741:1699"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]","#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_end_matches`\",\nsuggestion = \"trim_end_matches\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_end_matches`"},"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:12847:2366","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:12847:2366","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}}}},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"ReverseSearcher","id":"2:12862:2369","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:8353:1812":{"id":"2:8353:1812","crate_id":2,"name":"ExactSizeIterator","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:8354:771","2:8355:52926"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Iterator","id":"2:8482:153","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"1:5705:1866":{"id":"1:5705:1866","crate_id":1,"name":"DirBuilderExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:5706:49932"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:10343:142":{"id":"2:10343:142","crate_id":2,"name":"Hasher","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:10344:632","2:10345:1787","2:10346:52605","2:10347:52606","2:10348:52607","2:10349:52608","2:10350:52609","2:10351:52610","2:10352:52611","2:10353:52612","2:10354:52613","2:10355:52614","2:10356:52615","2:10357:52616","2:10358:52617","2:10359:1498"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:13206:56875":{"id":"2:13206:56875","crate_id":2,"name":"ceil_char_boundary","span":null,"visibility":"public","docs":"Finds the closest `x` not below `index` where `is_char_boundary(x)` is `true`.\n\nThis method is the natural complement to [`floor_char_boundary`]. See that method\nfor more details.\n\n[`floor_char_boundary`]: str::floor_char_boundary\n\n# Panics\n\nPanics if `index > self.len()`.\n\n# Examples\n\n```\n#![feature(round_char_boundary)]\nlet s = \"❤️🧡💛💚💙💜\";\nassert_eq!(s.len(), 26);\nassert!(!s.is_char_boundary(13));\n\nlet closest = s.ceil_char_boundary(13);\nassert_eq!(closest, 14);\nassert_eq!(&s[..closest], \"❤️🧡💛\");\n```","links":{"str::floor_char_boundary":"1:15747:1704"},"attrs":["#[unstable(feature = \"round_char_boundary\", issue = \"93743\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["index",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"primitive","inner":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"5:6089:52015":{"id":"5:6089:52015","crate_id":5,"name":"to_ascii_lowercase","span":null,"visibility":"public","docs":"Returns a copy of this string where each character is mapped to its\nASCII lower case equivalent.\n\nASCII letters 'A' to 'Z' are mapped to 'a' to 'z',\nbut non-ASCII letters are unchanged.\n\nTo lowercase the value in-place, use [`make_ascii_lowercase`].\n\nTo lowercase ASCII characters in addition to non-ASCII characters, use\n[`to_lowercase`].\n\n# Examples\n\n```\nlet s = \"Grüße, Jürgen ❤\";\n\nassert_eq!(\"grüße, jürgen ❤\", s.to_ascii_lowercase());\n```\n\n[`make_ascii_lowercase`]: str::make_ascii_lowercase\n[`to_lowercase`]: #method.to_lowercase","links":{"str::make_ascii_lowercase":"1:15747:1704"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use = \"to lowercase the value in-place, use `make_ascii_lowercase()`\"]","#[stable(feature = \"ascii_methods_on_intrinsics\", since = \"1.23.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:8341:201","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:3316:2047":{"id":"2:3316:2047","crate_id":2,"name":"BitXor","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3318:167","2:3319:340"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:6345:1823":{"id":"1:6345:1823","crate_id":1,"name":"CommandExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:6346:2293","1:6347:2294","1:6348:52091","1:6349:54756","1:6351:54760","1:6353:54757","1:6354:54758","1:6356:54759"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sealed","id":"1:10447:1833","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"1:4899:1952":{"id":"1:4899:1952","crate_id":1,"name":"ToSocketAddrs","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:4900:1994","1:4901:54473"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:3311:2046":{"id":"2:3311:2046","crate_id":2,"name":"BitOr","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3313:167","2:3314:337"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:4596:1852":{"id":"1:4596:1852","crate_id":1,"name":"Write","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:4597:1787","1:4598:50111","1:4600:50112","1:4601:3350","1:4602:50113","1:4603:50114","1:4604:50115","1:4613:50116"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:8293:1813":{"id":"2:8293:1813","crate_id":2,"name":"Extend","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:8295:35662","2:8297:4125","2:8298:54740"],"generics":{"params":[{"name":"A","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:13259:56879":{"id":"2:13259:56879","crate_id":2,"name":"split_terminator","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by\ncharacters matched by a pattern.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\nEquivalent to [`split`], except that the trailing substring\nis skipped if empty.\n\n[`split`]: str::split\n\nThis method can be used for string data that is _terminated_,\nrather than _separated_ by a pattern.\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rsplit_terminator`] method can be used.\n\n[`rsplit_terminator`]: str::rsplit_terminator\n\n# Examples\n\nBasic usage:\n\n```\nlet v: Vec<&str> = \"A.B.\".split_terminator('.').collect();\nassert_eq!(v, [\"A\", \"B\"]);\n\nlet v: Vec<&str> = \"A..B..\".split_terminator(\".\").collect();\nassert_eq!(v, [\"A\", \"\", \"B\", \"\"]);\n\nlet v: Vec<&str> = \"A.B:C.D\".split_terminator(&['.', ':'][..]).collect();\nassert_eq!(v, [\"A\", \"B\", \"C\", \"D\"]);\n```","links":{"prim@char":"1:15741:1699","str::split":"1:15747:1704","self::pattern":"2:12837:2365","`DoubleEndedIterator`":"2:8328:116","str::rsplit_terminator":"1:15747:1704"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"SplitTerminator","id":"2:49200:2874","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:12847:2366","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:3262:2474":{"id":"2:3262:2474","crate_id":2,"name":"Div","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3264:167","2:3265:539"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:13236:53064":{"id":"2:13236:53064","crate_id":2,"name":"starts_with","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a prefix of this\nstring slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nBasic usage:\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.starts_with(\"bana\"));\nassert!(!bananas.starts_with(\"nana\"));\n```","links":{"self::pattern":"2:12837:2365","prim@char":"1:15741:1699"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:12847:2366","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:3014:2491":{"id":"2:3014:2491","crate_id":2,"name":"FloatToInt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":[],"generics":{"params":[{"name":"Int","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sealed","id":"2:3013:1833","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:3294:2488":{"id":"2:3294:2488","crate_id":2,"name":"RemAssign","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3296:1082"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:3268:2477":{"id":"2:3268:2477","crate_id":2,"name":"Rem","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3270:167","2:3271:1081"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:3337:2522":{"id":"2:3337:2522","crate_id":2,"name":"BitOrAssign","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3339:338"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:3088:213":{"id":"2:3088:213","crate_id":2,"name":"TryInto","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3090:123","2:3091:1385"],"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:13242:3925":{"id":"2:13242:3925","crate_id":2,"name":"find","span":null,"visibility":"public","docs":"Returns the byte index of the first character of this string slice that\nmatches the pattern.\n\nReturns [`None`] if the pattern doesn't match.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nlet s = \"Löwe 老虎 Léopard Gepardi\";\n\nassert_eq!(s.find('L'), Some(0));\nassert_eq!(s.find('é'), Some(14));\nassert_eq!(s.find(\"pard\"), Some(17));\n```\n\nMore complex patterns using point-free style and closures:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\n\nassert_eq!(s.find(char::is_whitespace), Some(5));\nassert_eq!(s.find(char::is_lowercase), Some(1));\nassert_eq!(s.find(|c: char| c.is_whitespace() || c.is_lowercase()), Some(1));\nassert_eq!(s.find(|c: char| (c < 'o') && (c > 'a')), Some(4));\n```\n\nNot finding the pattern:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\nlet x: &[_] = &['1', '2'];\n\nassert_eq!(s.find(x), None);\n```","links":{"self::pattern":"2:12837:2365","`None`":"2:47192:162","prim@char":"1:15741:1699"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:47192:162","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"usize"}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:12847:2366","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:3189:103":{"id":"2:3189:103","crate_id":2,"name":"Copy","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Clone","id":"2:2801:101","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:10136:175":{"id":"2:10136:175","crate_id":2,"name":"Pointer","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:10137:640"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:3290:2486":{"id":"2:3290:2486","crate_id":2,"name":"DivAssign","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3292:540"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:3345:2508":{"id":"2:3345:2508","crate_id":2,"name":"ShlAssign","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3347:1205"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:6698:1823":{"id":"1:6698:1823","crate_id":1,"name":"CommandExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:6699:52092"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sealed","id":"1:10447:1833","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:13221:2025":{"id":"2:13221:2025","crate_id":2,"name":"slice_unchecked","span":null,"visibility":"public","docs":"Creates a string slice from another string slice, bypassing safety\nchecks.\n\nThis is generally not recommended, use with caution! For a safe\nalternative see [`str`] and [`Index`].\n\n[`Index`]: crate::ops::Index\n\nThis new slice goes from `begin` to `end`, including `begin` but\nexcluding `end`.\n\nTo get a mutable string slice instead, see the\n[`slice_mut_unchecked`] method.\n\n[`slice_mut_unchecked`]: str::slice_mut_unchecked\n\n# Safety\n\nCallers of this function are responsible that three preconditions are\nsatisfied:\n\n* `begin` must not exceed `end`.\n* `begin` and `end` must be byte positions within the string slice.\n* `begin` and `end` must lie on UTF-8 sequence boundaries.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\n\nunsafe {\n    assert_eq!(\"Löwe 老虎 Léopard\", s.slice_unchecked(0, 21));\n}\n\nlet s = \"Hello, world!\";\n\nunsafe {\n    assert_eq!(\"world\", s.slice_unchecked(7, 12));\n}\n```","links":{"crate::ops::Index":"2:3483:2079","`str`":"1:15747:1704","str::slice_mut_unchecked":"1:15747:1704"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]","#[deprecated(since = \"1.29.0\", note =\n\"use `get_unchecked(begin..end)` instead\")]","#[must_use]"],"deprecation":{"since":"1.29.0","note":"use `get_unchecked(begin..end)` instead"},"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["begin",{"kind":"primitive","inner":"usize"}],["end",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}},"2:13295:56889":{"id":"2:13295:56889","crate_id":2,"name":"trim_left","span":null,"visibility":"public","docs":"Returns a string slice with leading whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`.\n\n# Text directionality\n\nA string is a sequence of bytes. 'Left' in this context means the first\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _right_ side, not the left.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \" Hello\\tworld\\t\";\n\nassert_eq!(\"Hello\\tworld\\t\", s.trim_left());\n```\n\nDirectionality:\n\n```\nlet s = \"  English\";\nassert!(Some('E') == s.trim_left().chars().next());\n\nlet s = \"  עברית\";\nassert!(Some('ע') == s.trim_left().chars().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[stable(feature = \"rust1\", since = \"1.0.0\")]","#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_start`\", suggestion\n= \"trim_start\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_start`"},"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:10132:2412":{"id":"2:10132:2412","crate_id":2,"name":"LowerHex","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:10133:640"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:5561:1943":{"id":"1:5561:1943","crate_id":1,"name":"OsStrExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:5562:3881","1:5563:51972"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sealed","id":"1:10447:1833","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:13265:53059":{"id":"2:13265:53059","crate_id":2,"name":"splitn","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by a\npattern, restricted to returning at most `n` items.\n\nIf `n` substrings are returned, the last substring (the `n`th substring)\nwill contain the remainder of the string.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will not be double ended, because it is\nnot efficient to support.\n\nIf the pattern allows a reverse search, the [`rsplitn`] method can be\nused.\n\n[`rsplitn`]: str::rsplitn\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lambda\".splitn(3, ' ').collect();\nassert_eq!(v, [\"Mary\", \"had\", \"a little lambda\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".splitn(3, \"X\").collect();\nassert_eq!(v, [\"lion\", \"\", \"tigerXleopard\"]);\n\nlet v: Vec<&str> = \"abcXdef\".splitn(1, 'X').collect();\nassert_eq!(v, [\"abcXdef\"]);\n\nlet v: Vec<&str> = \"\".splitn(1, 'X').collect();\nassert_eq!(v, [\"\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".splitn(2, |c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"abc\", \"defXghi\"]);\n```","links":{"prim@char":"1:15741:1699","str::rsplitn":"1:15747:1704","self::pattern":"2:12837:2365"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["n",{"kind":"primitive","inner":"usize"}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"SplitN","id":"2:49254:2847","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:12847:2366","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13309:56893":{"id":"2:13309:56893","crate_id":2,"name":"trim_end_matches","span":null,"visibility":"public","docs":"Returns a string slice with all suffixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. `end` in this context means the last\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be right side, and for right-to-left languages like\nArabic or Hebrew, this will be the left side.\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_end_matches('1'), \"11foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_end_matches(char::is_numeric), \"123foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_end_matches(x), \"12foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1fooX\".trim_end_matches(|c| c == '1' || c == 'X'), \"1foo\");\n```","links":{"self::pattern":"2:12837:2365","prim@char":"1:15741:1699"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[stable(feature = \"trim_direction\", since = \"1.30.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:12847:2366","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:12847:2366","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}}}},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"ReverseSearcher","id":"2:12862:2369","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13224:53048":{"id":"2:13224:53048","crate_id":2,"name":"split_at_mut","span":null,"visibility":"public","docs":"Divide one mutable string slice into two at an index.\n\nThe argument, `mid`, should be a byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get immutable string slices instead, see the [`split_at`] method.\n\n[`split_at`]: str::split_at\n\n# Panics\n\nPanics if `mid` is not on a UTF-8 code point boundary, or if it is\npast the end of the last code point of the string slice.\n\n# Examples\n\nBasic usage:\n\n```\nlet mut s = \"Per Martin-Löf\".to_string();\n{\n    let (first, last) = s.split_at_mut(3);\n    first.make_ascii_uppercase();\n    assert_eq!(\"PER\", first);\n    assert_eq!(\" Martin-Löf\", last);\n}\nassert_eq!(\"PER Martin-Löf\", s);\n```","links":{"str::split_at":"1:15747:1704"},"attrs":["#[must_use]","#[stable(feature = \"str_split_at\", since = \"1.4.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["mid",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"tuple","inner":[{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"primitive","inner":"str"}}},{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"primitive","inner":"str"}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:12847:2366":{"id":"2:12847:2366","crate_id":2,"name":"Pattern","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:12849:2368","2:12850:55502","2:12851:55503","2:12852:55504","2:12853:55506","2:12854:55505","2:12855:55507"],"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:3333:2520":{"id":"2:3333:2520","crate_id":2,"name":"BitAndAssign","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3335:336"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:3640:133":{"id":"2:3640:133","crate_id":2,"name":"FromResidual","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3642:667"],"generics":{"params":[{"name":"R","kind":{"type":{"bounds":[],"default":{"kind":"qualified_path","inner":{"name":"Residual","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"Self"},"trait":{"kind":"resolved_path","inner":{"name":"Try","id":"2:3635:209","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:13212:53028":{"id":"2:13212:53028","crate_id":2,"name":"as_mut_ptr","span":null,"visibility":"public","docs":"Converts a mutable string slice to a raw pointer.\n\nAs string slices are a slice of bytes, the raw pointer points to a\n[`u8`]. This pointer will be pointing to the first byte of the string\nslice.\n\nIt is your responsibility to make sure that the string slice only gets\nmodified in a way that it remains valid UTF-8.","links":{"`u8`":"1:15758:1713"},"attrs":["#[stable(feature = \"str_as_mut_ptr\", since = \"1.36.0\")]","#[must_use]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"raw_pointer","inner":{"mutable":true,"type":{"kind":"primitive","inner":"u8"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:3092:212":{"id":"2:3092:212","crate_id":2,"name":"TryFrom","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3094:123","2:3095:1384"],"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:13201:771":{"id":"2:13201:771","crate_id":2,"name":"len","span":null,"visibility":"public","docs":"Returns the length of `self`.\n\nThis length is in bytes, not [`char`]s or graphemes. In other words,\nit might not be what a human considers the length of the string.\n\n[`char`]: prim@char\n\n# Examples\n\nBasic usage:\n\n```\nlet len = \"foo\".len();\nassert_eq!(3, len);\n\nassert_eq!(\"ƒoo\".len(), 4); // fancy f!\nassert_eq!(\"ƒoo\".chars().count(), 3);\n```","links":{"prim@char":"1:15741:1699"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]","#[rustc_const_stable(feature = \"const_str_len\", since = \"1.39.0\")]","#[must_use]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13229:28165":{"id":"2:13229:28165","crate_id":2,"name":"split_ascii_whitespace","span":null,"visibility":"public","docs":"Splits a string slice by ASCII whitespace.\n\nThe iterator returned will return string slices that are sub-slices of\nthe original string slice, separated by any amount of ASCII whitespace.\n\nTo split by Unicode `Whitespace` instead, use [`split_whitespace`].\n\n[`split_whitespace`]: str::split_whitespace\n\n# Examples\n\nBasic usage:\n\n```\nlet mut iter = \"A few words\".split_ascii_whitespace();\n\nassert_eq!(Some(\"A\"), iter.next());\nassert_eq!(Some(\"few\"), iter.next());\nassert_eq!(Some(\"words\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nAll kinds of ASCII whitespace are considered:\n\n```\nlet mut iter = \" Mary   had\\ta little  \\n\\t lamb\".split_ascii_whitespace();\nassert_eq!(Some(\"Mary\"), iter.next());\nassert_eq!(Some(\"had\"), iter.next());\nassert_eq!(Some(\"a\"), iter.next());\nassert_eq!(Some(\"little\"), iter.next());\nassert_eq!(Some(\"lamb\"), iter.next());\n\nassert_eq!(None, iter.next());\n```","links":{"str::split_whitespace":"1:15747:1704"},"attrs":["#[must_use =\n\"this returns the split string as an iterator, \\\n                  without modifying the original\"]","#[stable(feature = \"split_ascii_whitespace\", since = \"1.34.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"SplitAsciiWhitespace","id":"2:49433:2885","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:2779:2584":{"id":"2:2779:2584","crate_id":2,"name":"BorrowMut","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:2781:55543"],"generics":{"params":[{"name":"Borrowed","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"Borrowed"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"2:3184:1809","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Borrow","id":"2:2776:94","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"Borrowed"}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:13949:137":{"id":"2:13949:137","crate_id":2,"name":"GlobalAlloc","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":true,"items":["2:13950:262","2:13951:501","2:13952:265","2:13953:1058"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:6367:1949":{"id":"1:6367:1949","crate_id":1,"name":"ExitStatusExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:6368:52576","1:6369:36290","1:6370:52577","1:6371:52578","1:6372:52579","1:6373:52580"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sealed","id":"1:10447:1833","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"1:6695:1825":{"id":"1:6695:1825","crate_id":1,"name":"ChildExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:6696:52051","1:6697:52052"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sealed","id":"1:10447:1833","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"5:6073:57534":{"id":"5:6073:57534","crate_id":5,"name":"to_lowercase","span":null,"visibility":"public","docs":"Returns the lowercase equivalent of this string slice, as a new [`String`].\n\n'Lowercase' is defined according to the terms of the Unicode Derived Core Property\n`Lowercase`.\n\nSince some characters can expand into multiple characters when changing\nthe case, this function returns a [`String`] instead of modifying the\nparameter in-place.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"HELLO\";\n\nassert_eq!(\"hello\", s.to_lowercase());\n```\n\nA tricky example, with sigma:\n\n```\nlet sigma = \"Σ\";\n\nassert_eq!(\"σ\", sigma.to_lowercase());\n\n// but at the end of a word, it's ς, not σ:\nlet odysseus = \"ὈΔΥΣΣΕΎΣ\";\n\nassert_eq!(\"ὀδυσσεύς\", odysseus.to_lowercase());\n```\n\nLanguages without case are not changed:\n\n```\nlet new_year = \"农历新年\";\n\nassert_eq!(new_year, new_year.to_lowercase());\n```","links":{"`String`":"5:8341:201"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the lowercase string as a new String, \\\n                  without modifying the original\"]","#[stable(feature = \"unicode_case_mapping\", since = \"1.2.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:8341:201","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:5693:1863":{"id":"1:5693:1863","crate_id":1,"name":"DirEntryExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:5694:49939"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:13297:56891":{"id":"2:13297:56891","crate_id":2,"name":"trim_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes and suffixes that match a\npattern repeatedly removed.\n\nThe [pattern] can be a [`char`], a slice of [`char`]s, or a function\nor closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_matches('1'), \"foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_matches(char::is_numeric), \"foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_matches(x), \"foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1foo1barXX\".trim_matches(|c| c == '1' || c == 'X'), \"foo1bar\");\n```","links":{"self::pattern":"2:12837:2365","prim@char":"1:15741:1699"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:12847:2366","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:12847:2366","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}}}},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"DoubleEndedSearcher","id":"2:12867:2364","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:4689:2442":{"id":"2:4689:2442","crate_id":2,"name":"AsyncIterator","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:4690:2755","2:4691:55233","2:4692:50722"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:3252:2048":{"id":"2:3252:2048","crate_id":2,"name":"Sub","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3254:167","2:3255:1326"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:3179:196":{"id":"2:3179:196","crate_id":2,"name":"Send","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":true,"is_unsafe":true,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:10069:1852":{"id":"2:10069:1852","crate_id":2,"name":"Write","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:10070:1498","2:10071:55553","2:10073:50115"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:13274:56882":{"id":"2:13274:56882","crate_id":2,"name":"rsplit_once","span":null,"visibility":"public","docs":"Splits the string on the last occurrence of the specified delimiter and\nreturns prefix before delimiter and suffix after delimiter.\n\n# Examples\n\n```\nassert_eq!(\"cfg\".rsplit_once('='), None);\nassert_eq!(\"cfg=foo\".rsplit_once('='), Some((\"cfg\", \"foo\")));\nassert_eq!(\"cfg=foo=bar\".rsplit_once('='), Some((\"cfg=foo\", \"bar\")));\n```","links":{},"attrs":["#[stable(feature = \"str_split_once\", since = \"1.52.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["delimiter",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:47192:162","args":{"angle_bracketed":{"args":[{"type":{"kind":"tuple","inner":[{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}},{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}}]}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:12847:2366","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:12847:2366","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}}}},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"ReverseSearcher","id":"2:12862:2369","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:8763:2504":{"id":"2:8763:2504","crate_id":2,"name":"TrustedLen","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":true,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Iterator","id":"2:8482:153","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:2867:163":{"id":"2:2867:163","crate_id":2,"name":"Ord","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:2868:398","2:2869:2556","2:2870:2553","2:2871:50327"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Eq","id":"2:2836:120","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"PartialOrd","id":"2:2877:170","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"Self"}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:13321:52016":{"id":"2:13321:52016","crate_id":2,"name":"eq_ignore_ascii_case","span":null,"visibility":"public","docs":"Checks that two strings are an ASCII case-insensitive match.\n\nSame as `to_ascii_lowercase(a) == to_ascii_lowercase(b)`,\nbut without allocating and copying temporaries.\n\n# Examples\n\n```\nassert!(\"Ferris\".eq_ignore_ascii_case(\"FERRIS\"));\nassert!(\"Ferrös\".eq_ignore_ascii_case(\"FERRöS\"));\nassert!(!\"Ferrös\".eq_ignore_ascii_case(\"FERRÖS\"));\n```","links":{},"attrs":["#[stable(feature = \"ascii_methods_on_intrinsics\", since = \"1.23.0\")]","#[must_use]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["other",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"5:5821:3078":{"id":"5:5821:3078","crate_id":5,"name":"Join","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["5:5823:167","5:5824:29232"],"generics":{"params":[{"name":"Separator","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:13213:53024":{"id":"2:13213:53024","crate_id":2,"name":"get","span":null,"visibility":"public","docs":"Returns a subslice of `str`.\n\nThis is the non-panicking alternative to indexing the `str`. Returns\n[`None`] whenever equivalent indexing operation would panic.\n\n# Examples\n\n```\nlet v = String::from(\"🗻∈🌏\");\n\nassert_eq!(Some(\"🗻\"), v.get(0..4));\n\n// indices not on UTF-8 sequence boundaries\nassert!(v.get(1..).is_none());\nassert!(v.get(..8).is_none());\n\n// out of bounds\nassert!(v.get(..42).is_none());\n```","links":{"`None`":"2:47192:162"},"attrs":["#[stable(feature = \"str_checked_slicing\", since = \"1.20.0\")]","#[rustc_const_unstable(feature = \"const_slice_index\", issue = \"none\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["i",{"kind":"generic","inner":"I"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:47192:162","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"qualified_path","inner":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"I"},"trait":{"kind":"resolved_path","inner":{"name":"SliceIndex","id":"2:10737:199","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}},"param_names":[]}}}}}}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"I"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"SliceIndex","id":"2:10737:199","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13211:288":{"id":"2:13211:288","crate_id":2,"name":"as_ptr","span":null,"visibility":"public","docs":"Converts a string slice to a raw pointer.\n\nAs string slices are a slice of bytes, the raw pointer points to a\n[`u8`]. This pointer will be pointing to the first byte of the string\nslice.\n\nThe caller must ensure that the returned pointer is never written to.\nIf you need to mutate the contents of the string slice, use [`as_mut_ptr`].\n\n[`as_mut_ptr`]: str::as_mut_ptr\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"Hello\";\nlet ptr = s.as_ptr();\n```","links":{"`u8`":"1:15758:1713","str::as_mut_ptr":"1:15747:1704"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]","#[rustc_const_stable(feature = \"rustc_str_as_ptr\", since = \"1.32.0\")]","#[must_use]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"raw_pointer","inner":{"mutable":false,"type":{"kind":"primitive","inner":"u8"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:1075:1979":{"id":"1:1075:1979","crate_id":1,"name":"AsciiExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:1076:3093","1:1077:3073","1:1078:52014","1:1079:52015","1:1080:52016","1:1081:52017","1:1082:52018"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:3157:111":{"id":"2:3157:111","crate_id":2,"name":"Default","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3158:59"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:3188:202":{"id":"2:3188:202","crate_id":2,"name":"StructuralEq","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:3282:2177":{"id":"2:3282:2177","crate_id":2,"name":"SubAssign","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3284:1327"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:3431:128":{"id":"2:3431:128","crate_id":2,"name":"FnOnce","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3433:167","2:3434:362"],"generics":{"params":[{"name":"Args","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:13289:56886":{"id":"2:13289:56886","crate_id":2,"name":"trim","span":null,"visibility":"public","docs":"Returns a string slice with leading and trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\n\nassert_eq!(\"Hello\\tworld\", s.trim());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a slice, \\\n                  without modifying the original\"]","#[stable(feature = \"rust1\", since = \"1.0.0\")]","#[rustc_diagnostic_item = \"str_trim\"]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:5643:1860":{"id":"1:5643:1860","crate_id":1,"name":"OpenOptionsExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:5644:49932","1:5645:49978"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:13204:56874":{"id":"2:13204:56874","crate_id":2,"name":"floor_char_boundary","span":null,"visibility":"public","docs":"Finds the closest `x` not exceeding `index` where `is_char_boundary(x)` is `true`.\n\nThis method can help you truncate a string so that it's still valid UTF-8, but doesn't\nexceed a given number of bytes. Note that this is done purely at the character level\nand can still visually split graphemes, even though the underlying characters aren't\nsplit. For example, the emoji 🧑‍🔬 (scientist) could be split so that the string only\nincludes 🧑 (person) instead.\n\n# Examples\n\n```\n#![feature(round_char_boundary)]\nlet s = \"❤️🧡💛💚💙💜\";\nassert_eq!(s.len(), 26);\nassert!(!s.is_char_boundary(13));\n\nlet closest = s.floor_char_boundary(13);\nassert_eq!(closest, 10);\nassert_eq!(&s[..closest], \"❤️🧡\");\n```","links":{},"attrs":["#[unstable(feature = \"round_char_boundary\", issue = \"93743\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["index",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"primitive","inner":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:2565:123":{"id":"1:2565:123","crate_id":1,"name":"Error","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:2566:49953","1:2568:1682","1:2569:54599","1:2570:54600"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Debug","id":"2:10119:106","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Display","id":"2:10126:115","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:12862:2369":{"id":"2:12862:2369","crate_id":2,"name":"ReverseSearcher","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":true,"items":["2:12864:52477","2:12865:55017","2:12866:55018"],"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Searcher","id":"2:12856:2368","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:13322:52017":{"id":"2:13322:52017","crate_id":2,"name":"make_ascii_uppercase","span":null,"visibility":"public","docs":"Converts this string to its ASCII upper case equivalent in-place.\n\nASCII letters 'a' to 'z' are mapped to 'A' to 'Z',\nbut non-ASCII letters are unchanged.\n\nTo return a new uppercased value without modifying the existing one, use\n[`to_ascii_uppercase()`].\n\n[`to_ascii_uppercase()`]: #method.to_ascii_uppercase\n\n# Examples\n\n```\nlet mut s = String::from(\"Grüße, Jürgen ❤\");\n\ns.make_ascii_uppercase();\n\nassert_eq!(\"GRüßE, JüRGEN ❤\", s);\n```","links":{},"attrs":["#[stable(feature = \"ascii_methods_on_intrinsics\", since = \"1.23.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13228:28175":{"id":"2:13228:28175","crate_id":2,"name":"split_whitespace","span":null,"visibility":"public","docs":"Splits a string slice by whitespace.\n\nThe iterator returned will return string slices that are sub-slices of\nthe original string slice, separated by any amount of whitespace.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`. If you only want to split on ASCII whitespace\ninstead, use [`split_ascii_whitespace`].\n\n[`split_ascii_whitespace`]: str::split_ascii_whitespace\n\n# Examples\n\nBasic usage:\n\n```\nlet mut iter = \"A few words\".split_whitespace();\n\nassert_eq!(Some(\"A\"), iter.next());\nassert_eq!(Some(\"few\"), iter.next());\nassert_eq!(Some(\"words\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nAll kinds of whitespace are considered:\n\n```\nlet mut iter = \" Mary   had\\ta\\u{2009}little  \\n\\t lamb\".split_whitespace();\nassert_eq!(Some(\"Mary\"), iter.next());\nassert_eq!(Some(\"had\"), iter.next());\nassert_eq!(Some(\"a\"), iter.next());\nassert_eq!(Some(\"little\"), iter.next());\nassert_eq!(Some(\"lamb\"), iter.next());\n\nassert_eq!(None, iter.next());\n```","links":{"str::split_ascii_whitespace":"1:15747:1704"},"attrs":["#[must_use =\n\"this returns the split string as an iterator, \\\n                  without modifying the original\"]","#[stable(feature = \"split_whitespace\", since = \"1.1.0\")]","#[rustc_diagnostic_item = \"str_split_whitespace\"]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"SplitWhitespace","id":"2:49424:2884","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13293:56888":{"id":"2:13293:56888","crate_id":2,"name":"trim_end","span":null,"visibility":"public","docs":"Returns a string slice with trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Text directionality\n\nA string is a sequence of bytes. `end` in this context means the last\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be right side, and for right-to-left languages like\nArabic or Hebrew, this will be the left side.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\nassert_eq!(\"\\n Hello\\tworld\", s.trim_end());\n```\n\nDirectionality:\n\n```\nlet s = \"  English  \";\nassert!(Some('h') == s.trim_end().chars().rev().next());\n\nlet s = \"  עברית  \";\nassert!(Some('ת') == s.trim_end().chars().rev().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[stable(feature = \"trim_direction\", since = \"1.30.0\")]","#[rustc_diagnostic_item = \"str_trim_end\"]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:3191:205":{"id":"2:3191:205","crate_id":2,"name":"Sync","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":true,"is_unsafe":true,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:13232:28160":{"id":"2:13232:28160","crate_id":2,"name":"encode_utf16","span":null,"visibility":"public","docs":"Returns an iterator of `u16` over the string encoded as UTF-16.\n\n# Examples\n\nBasic usage:\n\n```\nlet text = \"Zażółć gęślą jaźń\";\n\nlet utf8_len = text.len();\nlet utf16_len = text.encode_utf16().count();\n\nassert!(utf16_len <= utf8_len);\n```","links":{},"attrs":["#[must_use =\n\"this returns the encoded string as an iterator, \\\n                  without modifying the original\"]","#[stable(feature = \"encode_utf16\", since = \"1.8.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"EncodeUtf16","id":"2:49442:2886","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13283:56884":{"id":"2:13283:56884","crate_id":2,"name":"match_indices","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within this string\nslice as well as the index that the match starts at.\n\nFor matches of `pat` within `self` that overlap, only the indices\ncorresponding to the first match are returned.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rmatch_indices`] method can be used.\n\n[`rmatch_indices`]: str::rmatch_indices\n\n# Examples\n\nBasic usage:\n\n```\nlet v: Vec<_> = \"abcXXXabcYYYabc\".match_indices(\"abc\").collect();\nassert_eq!(v, [(0, \"abc\"), (6, \"abc\"), (12, \"abc\")]);\n\nlet v: Vec<_> = \"1abcabc2\".match_indices(\"abc\").collect();\nassert_eq!(v, [(1, \"abc\"), (4, \"abc\")]);\n\nlet v: Vec<_> = \"ababa\".match_indices(\"aba\").collect();\nassert_eq!(v, [(0, \"aba\")]); // only the first `aba`\n```","links":{"prim@char":"1:15741:1699","str::rmatch_indices":"1:15747:1704","self::pattern":"2:12837:2365","`DoubleEndedIterator`":"2:8328:116"},"attrs":["#[stable(feature = \"str_match_indices\", since = \"1.5.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"MatchIndices","id":"2:49300:2878","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:12847:2366","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13253:28032":{"id":"2:13253:28032","crate_id":2,"name":"split_inclusive","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by\ncharacters matched by a pattern. Differs from the iterator produced by\n`split` in that `split_inclusive` leaves the matched part as the\nterminator of the substring.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\\nlittle lamb\\nlittle lamb.\"\n    .split_inclusive('\\n').collect();\nassert_eq!(v, [\"Mary had a little lamb\\n\", \"little lamb\\n\", \"little lamb.\"]);\n```\n\nIf the last element of the string is matched,\nthat element will be considered the terminator of the preceding substring.\nThat substring will be the last item returned by the iterator.\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\\nlittle lamb\\nlittle lamb.\\n\"\n    .split_inclusive('\\n').collect();\nassert_eq!(v, [\"Mary had a little lamb\\n\", \"little lamb\\n\", \"little lamb.\\n\"]);\n```","links":{"prim@char":"1:15741:1699","self::pattern":"2:12837:2365"},"attrs":["#[stable(feature = \"split_inclusive\", since = \"1.51.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"SplitInclusive","id":"2:12629:2841","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:12847:2366","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:3085:131":{"id":"2:3085:131","crate_id":2,"name":"From","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3087:661"],"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:2801:101":{"id":"2:2801:101","crate_id":2,"name":"Clone","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:2802:392","2:2803:394"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:12776:2105":{"id":"2:12776:2105","crate_id":2,"name":"FromStr","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:12777:122","2:12778:54641"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:3274:2480":{"id":"2:3274:2480","crate_id":2,"name":"Neg","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3275:167","2:3276:891"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"5:5817:3076":{"id":"5:5817:3076","crate_id":5,"name":"Concat","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["5:5819:167","5:5820:415"],"generics":{"params":[{"name":"Item","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"Item"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"2:3184:1809","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"bounds":[],"implementations":[]}},"2:10119:106":{"id":"2:10119:106","crate_id":2,"name":"Debug","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:10120:640"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:13200":{"id":"2:13200","crate_id":2,"name":null,"span":null,"visibility":{"restricted":{"parent":"2:12297:1311","path":"::str"}},"docs":null,"links":{},"attrs":["#[cfg(not(test))]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"kind":"primitive","inner":"str"},"items":["2:13201:771","2:13202:52926","2:13203:56873","2:13204:56874","2:13206:56875","2:13209:51972","2:13210:56876","2:13211:288","2:13212:53028","2:13213:53024","2:13215:53025","2:13217:53026","2:13219:53027","2:13221:2025","2:13222:56877","2:13223:53047","2:13224:53048","2:13225:2905","2:13226:2394","2:13227:2032","2:13228:28175","2:13229:28165","2:13230:3427","2:13231:56878","2:13232:28160","2:13233:53063","2:13236:53064","2:13239:53065","2:13242:3925","2:13246:3926","2:13250:50351","2:13253:28032","2:13256:53057","2:13259:56879","2:13262:56880","2:13265:53059","2:13268:53061","2:13271:56881","2:13274:56882","2:13277:1784","2:13280:56883","2:13283:56884","2:13286:56885","2:13289:56886","2:13291:56887","2:13293:56888","2:13295:56889","2:13296:56890","2:13297:56891","2:13300:56892","2:13303:10666","2:13306:53066","2:13309:56893","2:13312:56894","2:13315:56895","2:13318:2727","2:13320:3073","2:13321:52016","2:13322:52017","2:13323:52018","2:13324:56896","2:13326:1981","2:13327:56897"],"negative":false,"synthetic":false,"blanket_impl":null}},"2:13250:50351":{"id":"2:13250:50351","crate_id":2,"name":"split","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by\ncharacters matched by a pattern.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rsplit`] method can be used.\n\n[`rsplit`]: str::rsplit\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".split(' ').collect();\nassert_eq!(v, [\"Mary\", \"had\", \"a\", \"little\", \"lamb\"]);\n\nlet v: Vec<&str> = \"\".split('X').collect();\nassert_eq!(v, [\"\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".split('X').collect();\nassert_eq!(v, [\"lion\", \"\", \"tiger\", \"leopard\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".split(\"::\").collect();\nassert_eq!(v, [\"lion\", \"tiger\", \"leopard\"]);\n\nlet v: Vec<&str> = \"abc1def2ghi\".split(char::is_numeric).collect();\nassert_eq!(v, [\"abc\", \"def\", \"ghi\"]);\n\nlet v: Vec<&str> = \"lionXtigerXleopard\".split(char::is_uppercase).collect();\nassert_eq!(v, [\"lion\", \"tiger\", \"leopard\"]);\n```\n\nIf the pattern is a slice of chars, split on each occurrence of any of the characters:\n\n```\nlet v: Vec<&str> = \"2020-11-03 23:59\".split(&['-', ' ', ':', '@'][..]).collect();\nassert_eq!(v, [\"2020\", \"11\", \"03\", \"23\", \"59\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".split(|c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"abc\", \"def\", \"ghi\"]);\n```\n\nIf a string contains multiple contiguous separators, you will end up\nwith empty strings in the output:\n\n```\nlet x = \"||||a||b|c\".to_string();\nlet d: Vec<_> = x.split('|').collect();\n\nassert_eq!(d, &[\"\", \"\", \"\", \"\", \"a\", \"\", \"b\", \"c\"]);\n```\n\nContiguous separators are separated by the empty string.\n\n```\nlet x = \"(///)\".to_string();\nlet d: Vec<_> = x.split('/').collect();\n\nassert_eq!(d, &[\"(\", \"\", \"\", \")\"]);\n```\n\nSeparators at the start or end of a string are neighbored\nby empty strings.\n\n```\nlet d: Vec<_> = \"010\".split(\"0\").collect();\nassert_eq!(d, &[\"\", \"1\", \"\"]);\n```\n\nWhen the empty string is used as a separator, it separates\nevery character in the string, along with the beginning\nand end of the string.\n\n```\nlet f: Vec<_> = \"rust\".split(\"\").collect();\nassert_eq!(f, &[\"\", \"r\", \"u\", \"s\", \"t\", \"\"]);\n```\n\nContiguous separators can lead to possibly surprising behavior\nwhen whitespace is used as the separator. This code is correct:\n\n```\nlet x = \"    a  b c\".to_string();\nlet d: Vec<_> = x.split(' ').collect();\n\nassert_eq!(d, &[\"\", \"\", \"\", \"\", \"a\", \"\", \"b\", \"c\"]);\n```\n\nIt does _not_ give you:\n\n```,ignore\nassert_eq!(d, &[\"a\", \"b\", \"c\"]);\n```\n\nUse [`split_whitespace`] for this behavior.\n\n[`split_whitespace`]: str::split_whitespace","links":{"self::pattern":"2:12837:2365","prim@char":"1:15741:1699","`DoubleEndedIterator`":"2:8328:116","str::rsplit":"1:15747:1704","str::split_whitespace":"1:15747:1704"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Split","id":"2:49150:1899","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:12847:2366","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:0:1575":{"id":"0:0:1575","crate_id":0,"name":"winapi","span":{"filename":"src/lib.rs","begin":[6,0],"end":[71,1]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"module","inner":{"is_crate":true,"items":[]}},"2:13233:53063":{"id":"2:13233:53063","crate_id":2,"name":"contains","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a sub-slice of\nthis string slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nBasic usage:\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.contains(\"nana\"));\nassert!(!bananas.contains(\"apples\"));\n```","links":{"prim@char":"1:15741:1699","self::pattern":"2:12837:2365"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:12847:2366","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13230:3427":{"id":"2:13230:3427","crate_id":2,"name":"lines","span":null,"visibility":"public","docs":"An iterator over the lines of a string, as string slices.\n\nLines are ended with either a newline (`\\n`) or a carriage return with\na line feed (`\\r\\n`).\n\nThe final line ending is optional. A string that ends with a final line\nending will return the same lines as an otherwise identical string\nwithout a final line ending.\n\n# Examples\n\nBasic usage:\n\n```\nlet text = \"foo\\r\\nbar\\n\\nbaz\\n\";\nlet mut lines = text.lines();\n\nassert_eq!(Some(\"foo\"), lines.next());\nassert_eq!(Some(\"bar\"), lines.next());\nassert_eq!(Some(\"\"), lines.next());\nassert_eq!(Some(\"baz\"), lines.next());\n\nassert_eq!(None, lines.next());\n```\n\nThe final line ending isn't required:\n\n```\nlet text = \"foo\\nbar\\n\\r\\nbaz\";\nlet mut lines = text.lines();\n\nassert_eq!(Some(\"foo\"), lines.next());\nassert_eq!(Some(\"bar\"), lines.next());\nassert_eq!(Some(\"\"), lines.next());\nassert_eq!(Some(\"baz\"), lines.next());\n\nassert_eq!(None, lines.next());\n```","links":{},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Lines","id":"2:49404:1900","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:3257:2472":{"id":"2:3257:2472","crate_id":2,"name":"Mul","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3259:167","2:3260:870"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:13303:10666":{"id":"2:13303:10666","crate_id":2,"name":"strip_prefix","span":null,"visibility":"public","docs":"Returns a string slice with the prefix removed.\n\nIf the string starts with the pattern `prefix`, returns substring after the prefix, wrapped\nin `Some`.  Unlike `trim_start_matches`, this method removes the prefix exactly once.\n\nIf the string does not start with `prefix`, returns `None`.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nassert_eq!(\"foo:bar\".strip_prefix(\"foo:\"), Some(\"bar\"));\nassert_eq!(\"foo:bar\".strip_prefix(\"bar\"), None);\nassert_eq!(\"foofoo\".strip_prefix(\"foo\"), Some(\"foo\"));\n```","links":{"self::pattern":"2:12837:2365","prim@char":"1:15741:1699"},"attrs":["#[must_use =\n\"this returns the remaining substring as a new slice, \\\n                  without modifying the original\"]","#[stable(feature = \"str_strip\", since = \"1.45.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["prefix",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:47192:162","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:12847:2366","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:3465:2535":{"id":"2:3465:2535","crate_id":2,"name":"Generator","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3467:222","2:3468:192","2:3469:56289"],"generics":{"params":[{"name":"R","kind":{"type":{"bounds":[],"default":{"kind":"tuple","inner":[]},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:13306:53066":{"id":"2:13306:53066","crate_id":2,"name":"strip_suffix","span":null,"visibility":"public","docs":"Returns a string slice with the suffix removed.\n\nIf the string ends with the pattern `suffix`, returns the substring before the suffix,\nwrapped in `Some`.  Unlike `trim_end_matches`, this method removes the suffix exactly once.\n\nIf the string does not end with `suffix`, returns `None`.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nassert_eq!(\"bar:foo\".strip_suffix(\":foo\"), Some(\"bar\"));\nassert_eq!(\"bar:foo\".strip_suffix(\"bar\"), None);\nassert_eq!(\"foofoo\".strip_suffix(\"foo\"), Some(\"foo\"));\n```","links":{"prim@char":"1:15741:1699","self::pattern":"2:12837:2365"},"attrs":["#[must_use =\n\"this returns the remaining substring as a new slice, \\\n                  without modifying the original\"]","#[stable(feature = \"str_strip\", since = \"1.45.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["suffix",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:47192:162","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:12847:2366","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:12847:2366","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}}}},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"ReverseSearcher","id":"2:12862:2369","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:12867:2364":{"id":"2:12867:2364","crate_id":2,"name":"DoubleEndedSearcher","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":[],"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"ReverseSearcher","id":"2:12862:2369","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:13223:53047":{"id":"2:13223:53047","crate_id":2,"name":"split_at","span":null,"visibility":"public","docs":"Divide one string slice into two at an index.\n\nThe argument, `mid`, should be a byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get mutable string slices instead, see the [`split_at_mut`]\nmethod.\n\n[`split_at_mut`]: str::split_at_mut\n\n# Panics\n\nPanics if `mid` is not on a UTF-8 code point boundary, or if it is\npast the end of the last code point of the string slice.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"Per Martin-Löf\";\n\nlet (first, last) = s.split_at(3);\n\nassert_eq!(\"Per\", first);\nassert_eq!(\" Martin-Löf\", last);\n```","links":{"str::split_at_mut":"1:15747:1704"},"attrs":["#[must_use]","#[stable(feature = \"str_split_at\", since = \"1.4.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["mid",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"tuple","inner":[{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:7808:2647":{"id":"2:7808:2647","crate_id":2,"name":"Step","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:7809:55616","2:7810:55617","2:7811:55614","2:7812:55612","2:7813:55618","2:7814:55615","2:7815:55613"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Clone","id":"2:2801:101","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"PartialOrd","id":"2:2877:170","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"Self"}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"1:6769:1829":{"id":"1:6769:1829","crate_id":1,"name":"FromRawFd","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:6770:52453"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:3341:2524":{"id":"2:3341:2524","crate_id":2,"name":"BitXorAssign","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3343:341"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:10130:2411":{"id":"2:10130:2411","crate_id":2,"name":"Binary","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:10131:640"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:13215:53025":{"id":"2:13215:53025","crate_id":2,"name":"get_mut","span":null,"visibility":"public","docs":"Returns a mutable subslice of `str`.\n\nThis is the non-panicking alternative to indexing the `str`. Returns\n[`None`] whenever equivalent indexing operation would panic.\n\n# Examples\n\n```\nlet mut v = String::from(\"hello\");\n// correct length\nassert!(v.get_mut(0..5).is_some());\n// out of bounds\nassert!(v.get_mut(..42).is_none());\nassert_eq!(Some(\"he\"), v.get_mut(0..2).map(|v| &*v));\n\nassert_eq!(\"hello\", v);\n{\n    let s = v.get_mut(0..2);\n    let s = s.map(|s| {\n        s.make_ascii_uppercase();\n        &*s\n    });\n    assert_eq!(Some(\"HE\"), s);\n}\nassert_eq!(\"HEllo\", v);\n```","links":{"`None`":"2:47192:162"},"attrs":["#[stable(feature = \"str_checked_slicing\", since = \"1.20.0\")]","#[rustc_const_unstable(feature = \"const_slice_index\", issue = \"none\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["i",{"kind":"generic","inner":"I"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:47192:162","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"qualified_path","inner":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"I"},"trait":{"kind":"resolved_path","inner":{"name":"SliceIndex","id":"2:10737:199","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}},"param_names":[]}}}}}}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"I"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"SliceIndex","id":"2:10737:199","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:8247:2643":{"id":"2:8247:2643","crate_id":2,"name":"Product","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:8249:50744"],"generics":{"params":[{"name":"A","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:3483:2079":{"id":"2:3483:2079","crate_id":2,"name":"Index","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3485:167","2:3486:731"],"generics":{"params":[{"name":"Idx","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"Idx"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"2:3184:1809","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"bounds":[],"implementations":[]}},"2:3076:75":{"id":"2:3076:75","crate_id":2,"name":"AsRef","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3078:289"],"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"2:3184:1809","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"bounds":[],"implementations":[]}},"2:3321:2514":{"id":"2:3321:2514","crate_id":2,"name":"Shl","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3323:167","2:3324:1204"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:5635:1859":{"id":"1:5635:1859","crate_id":1,"name":"PermissionsExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:5636:49932","1:5637:52400","1:5638:52401"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"5:772:207":{"id":"5:772:207","crate_id":5,"name":"ToOwned","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["5:773:3093","5:774:50096","5:775:50097"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:13256:53057":{"id":"2:13256:53057","crate_id":2,"name":"rsplit","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by\ncharacters matched by a pattern and yielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`split`] method can be used.\n\n[`split`]: str::split\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".rsplit(' ').collect();\nassert_eq!(v, [\"lamb\", \"little\", \"a\", \"had\", \"Mary\"]);\n\nlet v: Vec<&str> = \"\".rsplit('X').collect();\nassert_eq!(v, [\"\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".rsplit('X').collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"\", \"lion\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".rsplit(\"::\").collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"lion\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".rsplit(|c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"ghi\", \"def\", \"abc\"]);\n```","links":{"`DoubleEndedIterator`":"2:8328:116","str::split":"1:15747:1704","prim@char":"1:15741:1699","self::pattern":"2:12837:2365"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"RSplit","id":"2:49168:2844","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:12847:2366","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:12847:2366","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}}}},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"ReverseSearcher","id":"2:12862:2369","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:5683:1862":{"id":"1:5683:1862","crate_id":1,"name":"FileTypeExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:5684:51996","1:5685:51997","1:5686:51998","1:5687:51999"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:23493:2658":{"id":"2:23493:2658","crate_id":2,"name":"SimdElement","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":true,"items":["2:23494:2664"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sealed","id":"2:23489:1833","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Copy","id":"2:3189:103","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:3286:2484":{"id":"2:3286:2484","crate_id":2,"name":"MulAssign","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3288:871"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"5:6066:57532":{"id":"5:6066:57532","crate_id":5,"name":"into_boxed_bytes","span":null,"visibility":"public","docs":"Converts a `Box<str>` into a `Box<[u8]>` without copying or allocating.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"this is a string\";\nlet boxed_str = s.to_owned().into_boxed_str();\nlet boxed_bytes = boxed_str.into_boxed_bytes();\nassert_eq!(*boxed_bytes, *s.as_bytes());\n```","links":{},"attrs":["#[stable(feature = \"str_box_extras\", since = \"1.20.0\")]","#[must_use = \"`self` will be dropped if the result is not used\"]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"resolved_path","inner":{"name":"Box","id":"5:421:1814","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}},{"type":{"kind":"resolved_path","inner":{"name":"Global","id":"5:8079:3082","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}],"bindings":[]}},"param_names":[]}}]],"output":{"kind":"resolved_path","inner":{"name":"Box","id":"5:421:1814","args":{"angle_bracketed":{"args":[{"type":{"kind":"slice","inner":{"kind":"primitive","inner":"u8"}}},{"type":{"kind":"resolved_path","inner":{"name":"Global","id":"5:8079:3082","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:5697:1864":{"id":"1:5697:1864","crate_id":1,"name":"DirEntryExt2","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:5698:52754"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sealed","id":"1:10447:1833","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:12856:2368":{"id":"2:12856:2368","crate_id":2,"name":"Searcher","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":true,"items":["2:12858:2387","2:12859:900","2:12860:56081","2:12861:56082"],"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:3425:126":{"id":"2:3425:126","crate_id":2,"name":"Fn","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3427:360"],"generics":{"params":[{"name":"Args","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"FnMut","id":"2:3428:127","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"Args"}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:22844:2665":{"id":"2:22844:2665","crate_id":2,"name":"MaskElement","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":true,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"SimdElement","id":"2:23493:2658","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sealed","id":"2:22835:1833","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:3554:2960":{"id":"2:3554:2960","crate_id":2,"name":"RangeBounds","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3556:55740","2:3557:55741","2:3558:53063"],"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"2:3184:1809","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"bounds":[],"implementations":[]}},"1:4614:1892":{"id":"1:4614:1892","crate_id":1,"name":"Seek","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:4615:54843","1:4616:36142","1:4617:54844","1:4618:54845"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:2836:120":{"id":"2:2836:120","crate_id":2,"name":"Eq","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"PartialEq","id":"2:2831:169","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"Self"}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:2831:169":{"id":"2:2831:169","crate_id":2,"name":"PartialEq","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:2833:585","2:2834:885"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"Rhs"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"2:3184:1809","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"bounds":[],"implementations":[]}},"2:13280:56883":{"id":"2:13280:56883","crate_id":2,"name":"rmatches","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within this string slice,\nyielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`matches`] method can be used.\n\n[`matches`]: str::matches\n\n# Examples\n\nBasic usage:\n\n```\nlet v: Vec<&str> = \"abcXXXabcYYYabc\".rmatches(\"abc\").collect();\nassert_eq!(v, [\"abc\", \"abc\", \"abc\"]);\n\nlet v: Vec<&str> = \"1abc2abc3\".rmatches(char::is_numeric).collect();\nassert_eq!(v, [\"3\", \"2\", \"1\"]);\n```","links":{"`DoubleEndedIterator`":"2:8328:116","prim@char":"1:15741:1699","self::pattern":"2:12837:2365","str::matches":"1:15747:1704"},"attrs":["#[stable(feature = \"str_matches\", since = \"1.2.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"RMatches","id":"2:49372:2882","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:12847:2366","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:12847:2366","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}}}},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"ReverseSearcher","id":"2:12862:2369","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:3646:2537":{"id":"2:3646:2537","crate_id":2,"name":"Residual","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3648:51398"],"generics":{"params":[{"name":"O","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:14021:2014":{"id":"2:14021:2014","crate_id":2,"name":"Allocator","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":true,"items":["2:14022:50558","2:14023:50559","2:14024:50560","2:14025:50561","2:14026:50562","2:14027:50563","2:14028:50116"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:6593:1861":{"id":"1:6593:1861","crate_id":1,"name":"MetadataExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:6594:52705","1:6595:50074","1:6596:50075","1:6597:50077","1:6598:50076","1:6599:50078","1:6600:50079","1:6601:50081","1:6602:50082","1:6603:50085","1:6604:50086","1:6605:50087","1:6606:50088","1:6607:50089","1:6608:50090","1:6609:50083","1:6610:50084"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:13202:52926":{"id":"2:13202:52926","crate_id":2,"name":"is_empty","span":null,"visibility":"public","docs":"Returns `true` if `self` has a length of zero bytes.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\";\nassert!(s.is_empty());\n\nlet s = \"not empty\";\nassert!(!s.is_empty());\n```","links":{},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]","#[rustc_const_stable(feature = \"const_str_is_empty\", since = \"1.39.0\")]","#[must_use]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:22650:1972":{"id":"2:22650:1972","crate_id":2,"name":"SupportedLaneCount","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sealed","id":"2:22640:1833","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:13217:53026":{"id":"2:13217:53026","crate_id":2,"name":"get_unchecked","span":null,"visibility":"public","docs":"Returns an unchecked subslice of `str`.\n\nThis is the unchecked alternative to indexing the `str`.\n\n# Safety\n\nCallers of this function are responsible that these preconditions are\nsatisfied:\n\n* The starting index must not exceed the ending index;\n* Indexes must be within bounds of the original slice;\n* Indexes must lie on UTF-8 sequence boundaries.\n\nFailing that, the returned string slice may reference invalid memory or\nviolate the invariants communicated by the `str` type.\n\n# Examples\n\n```\nlet v = \"🗻∈🌏\";\nunsafe {\n    assert_eq!(\"🗻\", v.get_unchecked(0..4));\n    assert_eq!(\"∈\", v.get_unchecked(4..7));\n    assert_eq!(\"🌏\", v.get_unchecked(7..11));\n}\n```","links":{},"attrs":["#[stable(feature = \"str_checked_slicing\", since = \"1.20.0\")]","#[rustc_const_unstable(feature = \"const_slice_index\", issue = \"none\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["i",{"kind":"generic","inner":"I"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"qualified_path","inner":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"I"},"trait":{"kind":"resolved_path","inner":{"name":"SliceIndex","id":"2:10737:199","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}},"param_names":[]}}}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"I"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"SliceIndex","id":"2:10737:199","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}},"2:10126:115":{"id":"2:10126:115","crate_id":2,"name":"Display","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:10127:640"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:3428:127":{"id":"2:3428:127","crate_id":2,"name":"FnMut","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3430:361"],"generics":{"params":[{"name":"Args","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"FnOnce","id":"2:3431:128","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"Args"}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"5:6393:208":{"id":"5:6393:208","crate_id":5,"name":"ToString","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["5:6394:57834"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:13312:56894":{"id":"2:13312:56894","crate_id":2,"name":"trim_left_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. 'Left' in this context means the first\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _right_ side, not the left.\n\n# Examples\n\nBasic usage:\n\n```\nassert_eq!(\"11foo1bar11\".trim_left_matches('1'), \"foo1bar11\");\nassert_eq!(\"123foo1bar123\".trim_left_matches(char::is_numeric), \"foo1bar123\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_left_matches(x), \"foo1bar12\");\n```","links":{"self::pattern":"2:12837:2365","prim@char":"1:15741:1699"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]","#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_start_matches`\",\nsuggestion = \"trim_start_matches\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_start_matches`"},"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:12847:2366","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:10333:138":{"id":"2:10333:138","crate_id":2,"name":"Hash","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:10334:695","2:10336:52429"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:13565:146":{"id":"2:13565:146","crate_id":2,"name":"IntoFuture","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:13566:167","2:13567:146","2:13568:745"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:13227:2032":{"id":"2:13227:2032","crate_id":2,"name":"bytes","span":null,"visibility":"public","docs":"An iterator over the bytes of a string slice.\n\nAs a string slice consists of a sequence of bytes, we can iterate\nthrough a string slice by byte. This method returns such an iterator.\n\n# Examples\n\nBasic usage:\n\n```\nlet mut bytes = \"bors\".bytes();\n\nassert_eq!(Some(b'b'), bytes.next());\nassert_eq!(Some(b'o'), bytes.next());\nassert_eq!(Some(b'r'), bytes.next());\nassert_eq!(Some(b's'), bytes.next());\n\nassert_eq!(None, bytes.next());\n```","links":{},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Bytes","id":"2:49136:1897","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:3327:2517":{"id":"2:3327:2517","crate_id":2,"name":"Shr","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3329:167","2:3330:1207"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:3411:1902":{"id":"2:3411:1902","crate_id":2,"name":"DerefMut","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3412:526"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Deref","id":"2:3398:112","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:3187:203":{"id":"2:3187:203","crate_id":2,"name":"StructuralPartialEq","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:8284:147":{"id":"2:8284:147","crate_id":2,"name":"IntoIterator","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:8285:2755","2:8286:1996","2:8287:746"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:22799:12115":{"id":"2:22799:12115","crate_id":2,"name":"ToBitMask","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":true,"items":["2:22800:54928","2:22801:56283","2:22802:56284"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sealed","id":"2:22792:1833","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:3184:1809":{"id":"2:3184:1809","crate_id":2,"name":"Sized","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":true,"is_unsafe":false,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:9140:2158":{"id":"2:9140:2158","crate_id":2,"name":"RefUnwindSafe","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":true,"is_unsafe":false,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:8280:132":{"id":"2:8280:132","crate_id":2,"name":"FromIterator","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:8282:664"],"generics":{"params":[{"name":"A","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:13262:56880":{"id":"2:13262:56880","crate_id":2,"name":"rsplit_terminator","span":null,"visibility":"public","docs":"An iterator over substrings of `self`, separated by characters\nmatched by a pattern and yielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\nEquivalent to [`split`], except that the trailing substring is\nskipped if empty.\n\n[`split`]: str::split\n\nThis method can be used for string data that is _terminated_,\nrather than _separated_ by a pattern.\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a\nreverse search, and it will be double ended if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`split_terminator`] method can be\nused.\n\n[`split_terminator`]: str::split_terminator\n\n# Examples\n\n```\nlet v: Vec<&str> = \"A.B.\".rsplit_terminator('.').collect();\nassert_eq!(v, [\"B\", \"A\"]);\n\nlet v: Vec<&str> = \"A..B..\".rsplit_terminator(\".\").collect();\nassert_eq!(v, [\"\", \"B\", \"\", \"A\"]);\n\nlet v: Vec<&str> = \"A.B:C.D\".rsplit_terminator(&['.', ':'][..]).collect();\nassert_eq!(v, [\"D\", \"C\", \"B\", \"A\"]);\n```","links":{"self::pattern":"2:12837:2365","str::split":"1:15747:1704","prim@char":"1:15741:1699","str::split_terminator":"1:15747:1704"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"RSplitTerminator","id":"2:49218:2875","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:12847:2366","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:12847:2366","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}}}},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"ReverseSearcher","id":"2:12862:2369","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13296:56890":{"id":"2:13296:56890","crate_id":2,"name":"trim_right","span":null,"visibility":"public","docs":"Returns a string slice with trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`.\n\n# Text directionality\n\nA string is a sequence of bytes. 'Right' in this context means the last\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _left_ side, not the right.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \" Hello\\tworld\\t\";\n\nassert_eq!(\" Hello\\tworld\", s.trim_right());\n```\n\nDirectionality:\n\n```\nlet s = \"English  \";\nassert!(Some('h') == s.trim_right().chars().rev().next());\n\nlet s = \"עברית  \";\nassert!(Some('ת') == s.trim_right().chars().rev().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[stable(feature = \"rust1\", since = \"1.0.0\")]","#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_end`\", suggestion =\n\"trim_end\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_end`"},"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13222:56877":{"id":"2:13222:56877","crate_id":2,"name":"slice_mut_unchecked","span":null,"visibility":"public","docs":"Creates a string slice from another string slice, bypassing safety\nchecks.\nThis is generally not recommended, use with caution! For a safe\nalternative see [`str`] and [`IndexMut`].\n\n[`IndexMut`]: crate::ops::IndexMut\n\nThis new slice goes from `begin` to `end`, including `begin` but\nexcluding `end`.\n\nTo get an immutable string slice instead, see the\n[`slice_unchecked`] method.\n\n[`slice_unchecked`]: str::slice_unchecked\n\n# Safety\n\nCallers of this function are responsible that three preconditions are\nsatisfied:\n\n* `begin` must not exceed `end`.\n* `begin` and `end` must be byte positions within the string slice.\n* `begin` and `end` must lie on UTF-8 sequence boundaries.","links":{"crate::ops::IndexMut":"2:3487:2455","`str`":"1:15747:1704","str::slice_unchecked":"1:15747:1704"},"attrs":["#[stable(feature = \"str_slice_mut\", since = \"1.5.0\")]","#[deprecated(since = \"1.29.0\", note =\n\"use `get_unchecked_mut(begin..end)` instead\")]"],"deprecation":{"since":"1.29.0","note":"use `get_unchecked_mut(begin..end)` instead"},"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["begin",{"kind":"primitive","inner":"usize"}],["end",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}},"5:6065":{"id":"5:6065","crate_id":5,"name":null,"span":null,"visibility":{"restricted":{"parent":"5:5885:1311","path":"::str"}},"docs":"Methods for string slices.","links":{},"attrs":["#[cfg(not(test))]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"kind":"primitive","inner":"str"},"items":["5:6066:57532","5:6067:1901","5:6070:57533","5:6073:57534","5:6085:57535","5:6086:57536","5:6087:1923","5:6088:52014","5:6089:52015"],"negative":false,"synthetic":false,"blanket_impl":null}},"2:3299:2509":{"id":"2:3299:2509","crate_id":2,"name":"Not","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3300:167","2:3301:931"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:10134:2413":{"id":"2:10134:2413","crate_id":2,"name":"UpperHex","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:10135:640"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:13320:3073":{"id":"2:13320:3073","crate_id":2,"name":"is_ascii","span":null,"visibility":"public","docs":"Checks if all characters in this string are within the ASCII range.\n\n# Examples\n\n```\nlet ascii = \"hello!\\n\";\nlet non_ascii = \"Grüße, Jürgen ❤\";\n\nassert!(ascii.is_ascii());\nassert!(!non_ascii.is_ascii());\n```","links":{},"attrs":["#[stable(feature = \"ascii_methods_on_intrinsics\", since = \"1.23.0\")]","#[must_use]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:5627:1858":{"id":"1:5627:1858","crate_id":1,"name":"FileExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:5628:50483","1:5629:50485","1:5630:50484","1:5631:50486"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:13286:56885":{"id":"2:13286:56885","crate_id":2,"name":"rmatch_indices","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within `self`,\nyielded in reverse order along with the index of the match.\n\nFor matches of `pat` within `self` that overlap, only the indices\ncorresponding to the last match are returned.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`match_indices`] method can be used.\n\n[`match_indices`]: str::match_indices\n\n# Examples\n\nBasic usage:\n\n```\nlet v: Vec<_> = \"abcXXXabcYYYabc\".rmatch_indices(\"abc\").collect();\nassert_eq!(v, [(12, \"abc\"), (6, \"abc\"), (0, \"abc\")]);\n\nlet v: Vec<_> = \"1abcabc2\".rmatch_indices(\"abc\").collect();\nassert_eq!(v, [(4, \"abc\"), (1, \"abc\")]);\n\nlet v: Vec<_> = \"ababa\".rmatch_indices(\"aba\").collect();\nassert_eq!(v, [(2, \"aba\")]); // only the last `aba`\n```","links":{"self::pattern":"2:12837:2365","prim@char":"1:15741:1699","`DoubleEndedIterator`":"2:8328:116","str::match_indices":"1:15747:1704"},"attrs":["#[stable(feature = \"str_match_indices\", since = \"1.5.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"RMatchIndices","id":"2:49318:2879","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:12847:2366","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:12847:2366","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}}}},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"ReverseSearcher","id":"2:12862:2369","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:3906:68":{"id":"2:3906:68","crate_id":2,"name":"Any","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3907:1398"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"outlives":"'static"}],"implementations":[]}},"2:10138:2404":{"id":"2:10138:2404","crate_id":2,"name":"LowerExp","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:10139:640"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:7686:2136":{"id":"1:7686:2136","crate_id":1,"name":"Termination","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:7687:54840"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:13203:56873":{"id":"2:13203:56873","crate_id":2,"name":"is_char_boundary","span":null,"visibility":"public","docs":"Checks that `index`-th byte is the first byte in a UTF-8 code point\nsequence or the end of the string.\n\nThe start and end of the string (when `index == self.len()`) are\nconsidered to be boundaries.\n\nReturns `false` if `index` is greater than `self.len()`.\n\n# Examples\n\n```\nlet s = \"Löwe 老虎 Léopard\";\nassert!(s.is_char_boundary(0));\n// start of `老`\nassert!(s.is_char_boundary(6));\nassert!(s.is_char_boundary(s.len()));\n\n// second byte of `ö`\nassert!(!s.is_char_boundary(2));\n\n// third byte of `老`\nassert!(!s.is_char_boundary(8));\n```","links":{},"attrs":["#[must_use]","#[stable(feature = \"is_char_boundary\", since = \"1.9.0\")]","#[rustc_const_unstable(feature = \"const_is_char_boundary\", issue = \"none\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["index",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:6465:1975":{"id":"1:6465:1975","crate_id":1,"name":"JoinHandleExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:6466:52902","1:6467:52903"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:3398:112":{"id":"2:3398:112","crate_id":2,"name":"Deref","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3399:206","2:3400:524"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:4621:1895":{"id":"1:4621:1895","crate_id":1,"name":"BufRead","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:4622:50347","1:4623:50348","1:4624:50349","1:4626:1894","1:4627:50350","1:4629:50351","1:4630:3427"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Read","id":"1:4539:1873","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:3350:2528":{"id":"2:3350:2528","crate_id":2,"name":"ShrAssign","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3352:1208"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:8243:2644":{"id":"2:8243:2644","crate_id":2,"name":"Sum","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:8245:50743"],"generics":{"params":[{"name":"A","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:10140:2414":{"id":"2:10140:2414","crate_id":2,"name":"UpperExp","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:10141:640"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:13231:56878":{"id":"2:13231:56878","crate_id":2,"name":"lines_any","span":null,"visibility":"public","docs":"An iterator over the lines of a string.","links":{},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]","#[deprecated(since = \"1.4.0\", note = \"use lines() instead now\")]","#[allow(deprecated)]"],"deprecation":{"since":"1.4.0","note":"use lines() instead now"},"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"LinesAny","id":"2:49414:2883","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:3079:74":{"id":"2:3079:74","crate_id":2,"name":"AsMut","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3081:54994"],"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"2:3184:1809","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"bounds":[],"implementations":[]}},"5:6067:1901":{"id":"5:6067:1901","crate_id":5,"name":"replace","span":null,"visibility":"public","docs":"Replaces all matches of a pattern with another string.\n\n`replace` creates a new [`String`], and copies the data from this string slice into it.\nWhile doing so, it attempts to find matches of a pattern. If it finds any, it\nreplaces them with the replacement string slice.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"this is old\";\n\nassert_eq!(\"this is new\", s.replace(\"old\", \"new\"));\nassert_eq!(\"than an old\", s.replace(\"is\", \"an\"));\n```\n\nWhen the pattern doesn't match:\n\n```\nlet s = \"this is old\";\nassert_eq!(s, s.replace(\"cookie monster\", \"little lamb\"));\n```","links":{"`String`":"5:8341:201"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the replaced string as a new allocation, \\\n                  without modifying the original\"]","#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["from",{"kind":"generic","inner":"P"}],["to",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:8341:201","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:12847:2366","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"5:6087:1923":{"id":"5:6087:1923","crate_id":5,"name":"repeat","span":null,"visibility":"public","docs":"Creates a new [`String`] by repeating a string `n` times.\n\n# Panics\n\nThis function will panic if the capacity would overflow.\n\n# Examples\n\nBasic usage:\n\n```\nassert_eq!(\"abc\".repeat(4), String::from(\"abcabcabcabc\"));\n```\n\nA panic upon overflow:\n\n```should_panic\n// this will panic at runtime\nlet huge = \"0123456789abcdef\".repeat(usize::MAX);\n```","links":{"`String`":"5:8341:201"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use]","#[stable(feature = \"repeat_str\", since = \"1.16.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["n",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:8341:201","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13318:2727":{"id":"2:13318:2727","crate_id":2,"name":"parse","span":null,"visibility":"public","docs":"Parses this string slice into another type.\n\nBecause `parse` is so general, it can cause problems with type\ninference. As such, `parse` is one of the few times you'll see\nthe syntax affectionately known as the 'turbofish': `::<>`. This\nhelps the inference algorithm understand specifically which type\nyou're trying to parse into.\n\n`parse` can parse into any type that implements the [`FromStr`] trait.\n\n# Errors\n\nWill return [`Err`] if it's not possible to parse this string slice into\nthe desired type.\n\n[`Err`]: FromStr::Err\n\n# Examples\n\nBasic usage\n\n```\nlet four: u32 = \"4\".parse().unwrap();\n\nassert_eq!(4, four);\n```\n\nUsing the 'turbofish' instead of annotating `four`:\n\n```\nlet four = \"4\".parse::<u32>();\n\nassert_eq!(Ok(4), four);\n```\n\nFailing to parse:\n\n```\nlet nope = \"j\".parse::<u32>();\n\nassert!(nope.is_err());\n```","links":{"`FromStr`":"2:12776:2105","FromStr::Err":"2:12776:2105"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Result","id":"2:47319:191","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"F"}},{"type":{"kind":"qualified_path","inner":{"name":"Err","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"F"},"trait":{"kind":"resolved_path","inner":{"name":"FromStr","id":"2:12776:2105","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"F"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"FromStr","id":"2:12776:2105","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:3082:145":{"id":"2:3082:145","crate_id":2,"name":"Into","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3084:50617"],"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:10737:199":{"id":"2:10737:199","crate_id":2,"name":"SliceIndex","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":true,"items":["2:10739:167","2:10740:53024","2:10741:53025","2:10742:53026","2:10743:53027","2:10744:731","2:10745:732"],"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"2:3184:1809","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sealed","id":"2:10728:1833","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:13268:53061":{"id":"2:13268:53061","crate_id":2,"name":"rsplitn","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by a\npattern, starting from the end of the string, restricted to returning\nat most `n` items.\n\nIf `n` substrings are returned, the last substring (the `n`th substring)\nwill contain the remainder of the string.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will not be double ended, because it is not\nefficient to support.\n\nFor splitting from the front, the [`splitn`] method can be used.\n\n[`splitn`]: str::splitn\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".rsplitn(3, ' ').collect();\nassert_eq!(v, [\"lamb\", \"little\", \"Mary had a\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".rsplitn(3, 'X').collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"lionX\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".rsplitn(2, \"::\").collect();\nassert_eq!(v, [\"leopard\", \"lion::tiger\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".rsplitn(2, |c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"ghi\", \"abc1def\"]);\n```","links":{"self::pattern":"2:12837:2365","prim@char":"1:15741:1699","str::splitn":"1:15747:1704"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["n",{"kind":"primitive","inner":"usize"}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"RSplitN","id":"2:49272:2848","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:12847:2366","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:12847:2366","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}}}},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"ReverseSearcher","id":"2:12862:2369","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:3718:2507":{"id":"2:3718:2507","crate_id":2,"name":"DispatchFromDyn","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":[],"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:5649:1861":{"id":"1:5649:1861","crate_id":1,"name":"MetadataExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:5650:54510","1:5651:49939","1:5652:49932","1:5653:54511","1:5654:2293","1:5655:2294","1:5656:54512","1:5657:1275","1:5658:54513","1:5659:54514","1:5660:54515","1:5661:54516","1:5662:54517","1:5663:54518","1:5664:54519","1:5665:54520"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:13324:56896":{"id":"2:13324:56896","crate_id":2,"name":"escape_debug","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_debug`].\n\nNote: only extended grapheme codepoints that begin the string will be\nescaped.\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"❤\\n!\".escape_debug() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"❤\\n!\".escape_debug());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"❤\\\\n!\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"❤\\n!\".escape_debug().to_string(), \"❤\\\\n!\");\n```","links":{"`char::escape_debug`":"1:15741:1699"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]","#[stable(feature = \"str_escape\", since = \"1.34.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"EscapeDebug","id":"2:49449:2887","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:4539:1873":{"id":"1:4539:1873","crate_id":1,"name":"Read","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:4540:2227","1:4541:52762","1:4543:52763","1:4544:52764","1:4545:1889","1:4546:52765","1:4547:52104","1:4549:52766","1:4550:50116","1:4551:2032","1:4552:2589","1:4554:2606"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:3220:1810":{"id":"2:3220:1810","crate_id":2,"name":"Unpin","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":true,"is_unsafe":false,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:6771:1830":{"id":"1:6771:1830","crate_id":1,"name":"IntoRawFd","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:6772:54686"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:12284:3066":{"id":"2:12284:3066","crate_id":2,"name":"SlicePattern","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:12285:2755","2:12286:56269"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:10128:2410":{"id":"2:10128:2410","crate_id":2,"name":"Octal","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:10129:640"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"5:6088:52014":{"id":"5:6088:52014","crate_id":5,"name":"to_ascii_uppercase","span":null,"visibility":"public","docs":"Returns a copy of this string where each character is mapped to its\nASCII upper case equivalent.\n\nASCII letters 'a' to 'z' are mapped to 'A' to 'Z',\nbut non-ASCII letters are unchanged.\n\nTo uppercase the value in-place, use [`make_ascii_uppercase`].\n\nTo uppercase ASCII characters in addition to non-ASCII characters, use\n[`to_uppercase`].\n\n# Examples\n\n```\nlet s = \"Grüße, Jürgen ❤\";\n\nassert_eq!(\"GRüßE, JüRGEN ❤\", s.to_ascii_uppercase());\n```\n\n[`make_ascii_uppercase`]: str::make_ascii_uppercase\n[`to_uppercase`]: #method.to_uppercase","links":{"str::make_ascii_uppercase":"1:15747:1704"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use = \"to uppercase the value in-place, use `make_ascii_uppercase()`\"]","#[stable(feature = \"ascii_methods_on_intrinsics\", since = \"1.23.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:8341:201","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"5:6086:57536":{"id":"5:6086:57536","crate_id":5,"name":"into_string","span":null,"visibility":"public","docs":"Converts a [`Box<str>`] into a [`String`] without copying or allocating.\n\n# Examples\n\nBasic usage:\n\n```\nlet string = String::from(\"birthday gift\");\nlet boxed_str = string.clone().into_boxed_str();\n\nassert_eq!(boxed_str.into_string(), string);\n```","links":{"`String`":"5:8341:201","`Box<str>`":"5:421:1814"},"attrs":["#[stable(feature = \"box_str\", since = \"1.4.0\")]","#[must_use = \"`self` will be dropped if the result is not used\"]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"resolved_path","inner":{"name":"Box","id":"5:421:1814","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}},{"type":{"kind":"resolved_path","inner":{"name":"Global","id":"5:8079:3082","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}],"bindings":[]}},"param_names":[]}}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:8341:201","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:3681:2506":{"id":"2:3681:2506","crate_id":2,"name":"CoerceUnsized","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":[],"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"2:3184:1809","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"bounds":[],"implementations":[]}},"2:13210:56876":{"id":"2:13210:56876","crate_id":2,"name":"as_bytes_mut","span":null,"visibility":"public","docs":"Converts a mutable string slice to a mutable byte slice.\n\n# Safety\n\nThe caller must ensure that the content of the slice is valid UTF-8\nbefore the borrow ends and the underlying `str` is used.\n\nUse of a `str` whose contents are not valid UTF-8 is undefined behavior.\n\n# Examples\n\nBasic usage:\n\n```\nlet mut s = String::from(\"Hello\");\nlet bytes = unsafe { s.as_bytes_mut() };\n\nassert_eq!(b\"Hello\", bytes);\n```\n\nMutability:\n\n```\nlet mut s = String::from(\"🗻∈🌏\");\n\nunsafe {\n    let bytes = s.as_bytes_mut();\n\n    bytes[0] = 0xF0;\n    bytes[1] = 0x9F;\n    bytes[2] = 0x8D;\n    bytes[3] = 0x94;\n}\n\nassert_eq!(\"🍔∈🌏\", s);\n```","links":{},"attrs":["#[stable(feature = \"str_mut_extras\", since = \"1.20.0\")]","#[must_use]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"slice","inner":{"kind":"primitive","inner":"u8"}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}},"5:6070:57533":{"id":"5:6070:57533","crate_id":5,"name":"replacen","span":null,"visibility":"public","docs":"Replaces first N matches of a pattern with another string.\n\n`replacen` creates a new [`String`], and copies the data from this string slice into it.\nWhile doing so, it attempts to find matches of a pattern. If it finds any, it\nreplaces them with the replacement string slice at most `count` times.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"foo foo 123 foo\";\nassert_eq!(\"new new 123 foo\", s.replacen(\"foo\", \"new\", 2));\nassert_eq!(\"faa fao 123 foo\", s.replacen('o', \"a\", 3));\nassert_eq!(\"foo foo new23 foo\", s.replacen(char::is_numeric, \"new\", 1));\n```\n\nWhen the pattern doesn't match:\n\n```\nlet s = \"this is old\";\nassert_eq!(s, s.replacen(\"cookie monster\", \"little lamb\", 10));\n```","links":{"`String`":"5:8341:201"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the replaced string as a new allocation, \\\n                  without modifying the original\"]","#[stable(feature = \"str_replacen\", since = \"1.16.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}],["to",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}],["count",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:8341:201","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:12847:2366","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:5555:1945":{"id":"1:5555:1945","crate_id":1,"name":"OsStringExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:5556:52048","1:5557:3174"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sealed","id":"1:10447:1833","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:13239:53065":{"id":"2:13239:53065","crate_id":2,"name":"ends_with","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a suffix of this\nstring slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nBasic usage:\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.ends_with(\"anas\"));\nassert!(!bananas.ends_with(\"nana\"));\n```","links":{"self::pattern":"2:12837:2365","prim@char":"1:15741:1699"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:12847:2366","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:12847:2366","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}}}},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"ReverseSearcher","id":"2:12862:2369","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:3247:2175":{"id":"2:3247:2175","crate_id":2,"name":"Add","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3249:167","2:3250:250"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:3422:1811":{"id":"2:3422:1811","crate_id":2,"name":"Drop","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3423:559"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:3635:209":{"id":"2:3635:209","crate_id":2,"name":"Try","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3636:167","2:3637:2537","2:3638:666","2:3639:353"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"FromResidual","id":"2:3640:133","args":{"angle_bracketed":{"args":[{"type":{"kind":"qualified_path","inner":{"name":"Residual","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"Self"},"trait":{"kind":"resolved_path","inner":{"name":"Try","id":"2:3635:209","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"5:6085:57535":{"id":"5:6085:57535","crate_id":5,"name":"to_uppercase","span":null,"visibility":"public","docs":"Returns the uppercase equivalent of this string slice, as a new [`String`].\n\n'Uppercase' is defined according to the terms of the Unicode Derived Core Property\n`Uppercase`.\n\nSince some characters can expand into multiple characters when changing\nthe case, this function returns a [`String`] instead of modifying the\nparameter in-place.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"hello\";\n\nassert_eq!(\"HELLO\", s.to_uppercase());\n```\n\nScripts without case are not changed:\n\n```\nlet new_year = \"农历新年\";\n\nassert_eq!(new_year, new_year.to_uppercase());\n```\n\nOne character can become multiple:\n```\nlet s = \"tschüß\";\n\nassert_eq!(\"TSCHÜSS\", s.to_uppercase());\n```","links":{"`String`":"5:8341:201"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the uppercase string as a new String, \\\n                  without modifying the original\"]","#[stable(feature = \"unicode_case_mapping\", since = \"1.2.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:8341:201","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:9139:2159":{"id":"2:9139:2159","crate_id":2,"name":"UnwindSafe","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":true,"is_unsafe":false,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:2776:94":{"id":"2:2776:94","crate_id":2,"name":"Borrow","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:2778:1769"],"generics":{"params":[{"name":"Borrowed","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"Borrowed"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"2:3184:1809","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"bounds":[],"implementations":[]}},"1:6767:1827":{"id":"1:6767:1827","crate_id":1,"name":"AsRawFd","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:6768:50535"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:13246:3926":{"id":"2:13246:3926","crate_id":2,"name":"rfind","span":null,"visibility":"public","docs":"Returns the byte index for the first character of the last match of the pattern in\nthis string slice.\n\nReturns [`None`] if the pattern doesn't match.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nlet s = \"Löwe 老虎 Léopard Gepardi\";\n\nassert_eq!(s.rfind('L'), Some(13));\nassert_eq!(s.rfind('é'), Some(14));\nassert_eq!(s.rfind(\"pard\"), Some(24));\n```\n\nMore complex patterns with closures:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\n\nassert_eq!(s.rfind(char::is_whitespace), Some(12));\nassert_eq!(s.rfind(char::is_lowercase), Some(20));\n```\n\nNot finding the pattern:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\nlet x: &[_] = &['1', '2'];\n\nassert_eq!(s.rfind(x), None);\n```","links":{"prim@char":"1:15741:1699","`None`":"2:47192:162","self::pattern":"2:12837:2365"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:47192:162","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"usize"}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:12847:2366","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:12847:2366","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}}}},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"ReverseSearcher","id":"2:12862:2369","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:6861:1826":{"id":"1:6861:1826","crate_id":1,"name":"AsFd","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:6862:52599"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:13219:53027":{"id":"2:13219:53027","crate_id":2,"name":"get_unchecked_mut","span":null,"visibility":"public","docs":"Returns a mutable, unchecked subslice of `str`.\n\nThis is the unchecked alternative to indexing the `str`.\n\n# Safety\n\nCallers of this function are responsible that these preconditions are\nsatisfied:\n\n* The starting index must not exceed the ending index;\n* Indexes must be within bounds of the original slice;\n* Indexes must lie on UTF-8 sequence boundaries.\n\nFailing that, the returned string slice may reference invalid memory or\nviolate the invariants communicated by the `str` type.\n\n# Examples\n\n```\nlet mut v = String::from(\"🗻∈🌏\");\nunsafe {\n    assert_eq!(\"🗻\", v.get_unchecked_mut(0..4));\n    assert_eq!(\"∈\", v.get_unchecked_mut(4..7));\n    assert_eq!(\"🌏\", v.get_unchecked_mut(7..11));\n}\n```","links":{},"attrs":["#[stable(feature = \"str_checked_slicing\", since = \"1.20.0\")]","#[rustc_const_unstable(feature = \"const_slice_index\", issue = \"none\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["i",{"kind":"generic","inner":"I"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"qualified_path","inner":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"I"},"trait":{"kind":"resolved_path","inner":{"name":"SliceIndex","id":"2:10737:199","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}},"param_names":[]}}}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"I"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"SliceIndex","id":"2:10737:199","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}},"2:13225:2905":{"id":"2:13225:2905","crate_id":2,"name":"chars","span":null,"visibility":"public","docs":"Returns an iterator over the [`char`]s of a string slice.\n\nAs a string slice consists of valid UTF-8, we can iterate through a\nstring slice by [`char`]. This method returns such an iterator.\n\nIt's important to remember that [`char`] represents a Unicode Scalar\nValue, and might not match your idea of what a 'character' is. Iteration\nover grapheme clusters may be what you actually want. This functionality\nis not provided by Rust's standard library, check crates.io instead.\n\n# Examples\n\nBasic usage:\n\n```\nlet word = \"goodbye\";\n\nlet count = word.chars().count();\nassert_eq!(7, count);\n\nlet mut chars = word.chars();\n\nassert_eq!(Some('g'), chars.next());\nassert_eq!(Some('o'), chars.next());\nassert_eq!(Some('o'), chars.next());\nassert_eq!(Some('d'), chars.next());\nassert_eq!(Some('b'), chars.next());\nassert_eq!(Some('y'), chars.next());\nassert_eq!(Some('e'), chars.next());\n\nassert_eq!(None, chars.next());\n```\n\nRemember, [`char`]s might not match your intuition about characters:\n\n[`char`]: prim@char\n\n```\nlet y = \"y̆\";\n\nlet mut chars = y.chars();\n\nassert_eq!(Some('y'), chars.next()); // not 'y̆'\nassert_eq!(Some('\\u{0306}'), chars.next());\n\nassert_eq!(None, chars.next());\n```","links":{"prim@char":"1:15741:1699"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Chars","id":"2:49120:2869","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:8328:116":{"id":"2:8328:116","crate_id":2,"name":"DoubleEndedIterator","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:8329:52477","2:8330:52478","2:8331:52479","2:8332:52480","2:8336:52481","2:8339:3926"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Iterator","id":"2:8482:153","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:10378:2044":{"id":"2:10378:2044","crate_id":2,"name":"BuildHasher","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:10379:142","2:10380:29482","2:10381:50619"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:3278:2176":{"id":"2:3278:2176","crate_id":2,"name":"AddAssign","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3280:251"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:13327:56897":{"id":"2:13327:56897","crate_id":2,"name":"escape_unicode","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_unicode`].\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"❤\\n!\".escape_unicode() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"❤\\n!\".escape_unicode());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"\\\\u{{2764}}\\\\u{{a}}\\\\u{{21}}\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"❤\\n!\".escape_unicode().to_string(), \"\\\\u{2764}\\\\u{a}\\\\u{21}\");\n```","links":{"`char::escape_unicode`":"1:15741:1699"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]","#[stable(feature = \"str_escape\", since = \"1.34.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"EscapeUnicode","id":"2:49467:2888","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13300:56892":{"id":"2:13300:56892","crate_id":2,"name":"trim_start_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. `start` in this context means the first\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be left side, and for right-to-left languages like\nArabic or Hebrew, this will be the right side.\n\n# Examples\n\nBasic usage:\n\n```\nassert_eq!(\"11foo1bar11\".trim_start_matches('1'), \"foo1bar11\");\nassert_eq!(\"123foo1bar123\".trim_start_matches(char::is_numeric), \"foo1bar123\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_start_matches(x), \"foo1bar12\");\n```","links":{"prim@char":"1:15741:1699","self::pattern":"2:12837:2365"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[stable(feature = \"trim_direction\", since = \"1.30.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:12847:2366","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:3623:2961":{"id":"2:3623:2961","crate_id":2,"name":"OneSidedRange","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":[],"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"2:3184:1809","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"RangeBounds","id":"2:3554:2960","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:13323:52018":{"id":"2:13323:52018","crate_id":2,"name":"make_ascii_lowercase","span":null,"visibility":"public","docs":"Converts this string to its ASCII lower case equivalent in-place.\n\nASCII letters 'A' to 'Z' are mapped to 'a' to 'z',\nbut non-ASCII letters are unchanged.\n\nTo return a new lowercased value without modifying the existing one, use\n[`to_ascii_lowercase()`].\n\n[`to_ascii_lowercase()`]: #method.to_ascii_lowercase\n\n# Examples\n\n```\nlet mut s = String::from(\"GRÜßE, JÜRGEN ❤\");\n\ns.make_ascii_lowercase();\n\nassert_eq!(\"grÜße, jÜrgen ❤\", s);\n```","links":{},"attrs":["#[stable(feature = \"ascii_methods_on_intrinsics\", since = \"1.23.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13550:134":{"id":"2:13550:134","crate_id":2,"name":"Future","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:13551:167","2:13552:992"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}}},"paths":{"16:547:3478":{"crate_id":16,"path":["gimli","read","cfi","RegisterRuleMap"],"kind":"struct"},"2:47749:82":{"crate_id":2,"path":["core","sync","atomic","AtomicIsize"],"kind":"struct"},"1:11047:1956":{"crate_id":1,"path":["std","net","addr","SocketAddrV6"],"kind":"struct"},"5:2294:3225":{"crate_id":5,"path":["alloc","collections","btree","navigate","LazyLeafHandle"],"kind":"enum"},"17:12552:48171":{"crate_id":17,"path":["object","macho","EncryptionInfoCommand64"],"kind":"struct"},"1:10248:43263":{"crate_id":1,"path":["std","backtrace_rs","symbolize","Symbol"],"kind":"struct"},"6:4255:2291":{"crate_id":6,"path":["libc","unix","linux_like","linux","ucred"],"kind":"struct"},"16:6391:3617":{"crate_id":16,"path":["gimli","read","line","ColumnType"],"kind":"enum"},"6:4133:39424":{"crate_id":6,"path":["libc","unix","linux_like","linux","dl_phdr_info"],"kind":"struct"},"1:8534:2299":{"crate_id":1,"path":["std","sync","barrier","BarrierWaitResult"],"kind":"struct"},"2:11086:2843":{"crate_id":2,"path":["core","slice","iter","SplitInclusiveMut"],"kind":"struct"},"2:47388:164":{"crate_id":2,"path":["core","sync","atomic","Ordering"],"kind":"enum"},"16:2794:3494":{"crate_id":16,"path":["gimli","common","Register"],"kind":"struct"},"2:51773:2699":{"crate_id":2,"path":["core","core_arch","simd","u16x16"],"kind":"struct"},"1:5281:2270":{"crate_id":1,"path":["std","net","tcp","TcpStream"],"kind":"struct"},"1:11950:1999":{"crate_id":1,"path":["std","sync","mpsc","SendError"],"kind":"struct"},"2:49916:2178":{"crate_id":2,"path":["core","time","FromFloatSecsError"],"kind":"struct"},"2:52091:2686":{"crate_id":2,"path":["core","core_arch","simd","i64x4"],"kind":"struct"},"1:7511:2124":{"crate_id":1,"path":["std","process","Child"],"kind":"struct"},"16:5522:3467":{"crate_id":16,"path":["gimli","read","cfi","CieOrFde"],"kind":"enum"},"2:3247:2175":{"crate_id":2,"path":["core","ops","arith","Add"],"kind":"trait"},"6:1744:37320":{"crate_id":6,"path":["libc","unix","linux_like","utsname"],"kind":"struct"},"5:7355:1996":{"crate_id":5,"path":["alloc","vec","into_iter","IntoIter"],"kind":"struct"},"16:6014:3608":{"crate_id":16,"path":["gimli","read","dwarf","RangeIter"],"kind":"struct"},"2:8284:147":{"crate_id":2,"path":["core","iter","traits","collect","IntoIterator"],"kind":"trait"},"1:1438:1996":{"crate_id":1,"path":["std","collections","hash","map","IntoIter"],"kind":"struct"},"17:12275:48152":{"crate_id":17,"path":["object","macho","ThreadCommand"],"kind":"struct"},"6:4387:39448":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_filter"],"kind":"struct"},"6:5414:40068":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_exit"],"kind":"struct"},"2:47949:2411":{"crate_id":2,"path":["core","fmt","num","Binary"],"kind":"struct"},"12:1688:3392":{"crate_id":12,"path":["hashbrown","rustc_entry","RustcVacantEntry"],"kind":"struct"},"17:11231:3828":{"crate_id":17,"path":["object","read","Import"],"kind":"struct"},"1:1518:2066":{"crate_id":1,"path":["std","collections","hash","map","RawOccupiedEntryMut"],"kind":"struct"},"16:7467:3567":{"crate_id":16,"path":["gimli","read","unit","DebugInfoUnitHeadersIter"],"kind":"struct"},"1:3440:1907":{"crate_id":1,"path":["std","io","buffered","bufreader","BufReader"],"kind":"struct"},"1:1642:2071":{"crate_id":1,"path":["std","collections","hash","map","VacantEntry"],"kind":"struct"},"2:3411:1902":{"crate_id":2,"path":["core","ops","deref","DerefMut"],"kind":"trait"},"1:15098:2270":{"crate_id":1,"path":["std","sys_common","net","TcpStream"],"kind":"struct"},"6:6214:40477":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","seccomp_notif_sizes"],"kind":"struct"},"5:8253:98":{"crate_id":5,"path":["alloc","ffi","c_str","CString"],"kind":"struct"},"5:8223:2030":{"crate_id":5,"path":["alloc","collections","TryReserveError"],"kind":"struct"},"17:11555:43969":{"crate_id":17,"path":["object","elf","CompressionHeader64"],"kind":"struct"},"17:8902:43264":{"crate_id":17,"path":["object","common","AddressSize"],"kind":"enum"},"2:48541:55457":{"crate_id":2,"path":["core","hash","sip","Sip24Rounds"],"kind":"struct"},"2:10737:199":{"crate_id":2,"path":["core","slice","index","SliceIndex"],"kind":"trait"},"2:3652:2539":{"crate_id":2,"path":["core","ops","try_trait","NeverShortCircuit"],"kind":"struct"},"17:10938:43578":{"crate_id":17,"path":["object","read","pe","file","PeComdat"],"kind":"struct"},"18:704:59540":{"crate_id":18,"path":["memchr","memmem","twoway","Forward"],"kind":"struct"},"5:3024:56503":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Immut"],"kind":"struct"},"5:1658:2063":{"crate_id":5,"path":["alloc","collections","btree","map","IntoValues"],"kind":"struct"},"2:49120:2869":{"crate_id":2,"path":["core","str","iter","Chars"],"kind":"struct"},"17:10236:3813":{"crate_id":17,"path":["object","read","elf","file","ElfFile"],"kind":"struct"},"1:6698:1823":{"crate_id":1,"path":["std","os","linux","process","CommandExt"],"kind":"trait"},"16:6413:3396":{"crate_id":16,"path":["gimli","read","line","LineSequence"],"kind":"struct"},"17:9849:59536":{"crate_id":17,"path":["object","read","any","SymbolTableInternal"],"kind":"enum"},"1:2171:2038":{"crate_id":1,"path":["std","collections","hash","set","Intersection"],"kind":"struct"},"6:5159:40048":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","statx_timestamp"],"kind":"struct"},"2:51457:2671":{"crate_id":2,"path":["core","core_arch","simd","f64x4"],"kind":"struct"},"1:9027:2167":{"crate_id":1,"path":["std","sync","rwlock","RwLock"],"kind":"struct"},"17:10001:43335":{"crate_id":17,"path":["object","read","archive","ArchiveKind"],"kind":"enum"},"2:51361:2682":{"crate_id":2,"path":["core","core_arch","simd","i32x4"],"kind":"struct"},"17:12480:48166":{"crate_id":17,"path":["object","macho","UuidCommand"],"kind":"struct"},"6:5197:40052":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","glob64_t"],"kind":"struct"},"1:14927:2019":{"crate_id":1,"path":["std","sys_common","wtf8","CodePoint"],"kind":"struct"},"1:11822:167":{"crate_id":1,"path":["std","process","Output"],"kind":"struct"},"17:2543:3896":{"crate_id":17,"path":["object","read","elf","relocation","ElfSectionRelocationIterator"],"kind":"struct"},"17:294:59533":{"crate_id":17,"path":["object","read","util","DebugByte"],"kind":"struct"},"17:12756:48251":{"crate_id":17,"path":["object","macho","Nlist64"],"kind":"struct"},"17:11147:43286":{"crate_id":17,"path":["object","read","SymbolMap"],"kind":"struct"},"2:46347:2613":{"crate_id":2,"path":["core","iter","adapters","filter_map","FilterMap"],"kind":"struct"},"1:3110:2226":{"crate_id":1,"path":["std","fs","DirEntry"],"kind":"struct"},"16:4734:42255":{"crate_id":16,"path":["gimli","constants","DwInl"],"kind":"struct"},"1:2166:2037":{"crate_id":1,"path":["std","collections","hash","set","DrainFilter"],"kind":"struct"},"17:13582:49316":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation32"],"kind":"struct"},"5:3354:2038":{"crate_id":5,"path":["alloc","collections","btree","set","Intersection"],"kind":"struct"},"17:13348:48935":{"crate_id":17,"path":["object","pe","ImageAuxSymbolWeak"],"kind":"struct"},"18:754:59547":{"crate_id":18,"path":["memchr","memmem","twoway","SuffixOrdering"],"kind":"enum"},"2:49858:2893":{"crate_id":2,"path":["core","str","LinesAnyMap"],"kind":"struct"},"1:4385:1917":{"crate_id":1,"path":["std","io","stdio","StderrLock"],"kind":"struct"},"16:6176:3611":{"crate_id":16,"path":["gimli","read","aranges","ArangeHeader"],"kind":"struct"},"2:53283:17669":{"crate_id":2,"path":["core","core_arch","x86","cpuid","CpuidResult"],"kind":"struct"},"2:2801:101":{"crate_id":2,"path":["core","clone","Clone"],"kind":"trait"},"1:2565:123":{"crate_id":1,"path":["std","error","Error"],"kind":"trait"},"2:47234:1994":{"crate_id":2,"path":["core","option","Iter"],"kind":"struct"},"6:1554:37302":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_in"],"kind":"struct"},"16:7870:3572":{"crate_id":16,"path":["gimli","read","unit","DebugTypes"],"kind":"struct"},"17:9759:43278":{"crate_id":17,"path":["object","read","any","ComdatIterator"],"kind":"struct"},"17:10516:3900":{"crate_id":17,"path":["object","read","elf","version","VerneedIterator"],"kind":"struct"},"2:46110:2887":{"crate_id":2,"path":["core","char","EscapeDebug"],"kind":"struct"},"2:51283:2690":{"crate_id":2,"path":["core","core_arch","simd","i8x16"],"kind":"struct"},"1:8376:1998":{"crate_id":1,"path":["std","sync","mpsc","SyncSender"],"kind":"struct"},"6:4478:39459":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_user_dev"],"kind":"struct"},"1:13456:2114":{"crate_id":1,"path":["std","sys","unix","os_str","Slice"],"kind":"struct"},"2:51409:2667":{"crate_id":2,"path":["core","core_arch","simd","f32x4"],"kind":"struct"},"17:12118:48083":{"crate_id":17,"path":["object","macho","Section64"],"kind":"struct"},"1:3113:2227":{"crate_id":1,"path":["std","fs","read"],"kind":"function"},"2:2877:170":{"crate_id":2,"path":["core","cmp","PartialOrd"],"kind":"trait"},"14:250:41574":{"crate_id":14,"path":["rustc_demangle","SizeLimitExhausted"],"kind":"struct"},"2:23863:35334":{"crate_id":2,"path":["core","num","flt2dec","decoder","FullDecoded"],"kind":"enum"},"1:13583:2139":{"crate_id":1,"path":["std","sys","unix","pipe","AnonPipe"],"kind":"struct"},"2:5007:2794":{"crate_id":2,"path":["core","cell","BorrowRef"],"kind":"struct"},"6:525:36413":{"crate_id":6,"path":["libc","unix","timeval"],"kind":"struct"},"12:1855:141":{"crate_id":12,"path":["hashbrown","set","HashSet"],"kind":"struct"},"12:1180:3378":{"crate_id":12,"path":["hashbrown","map","KeyOrRef"],"kind":"enum"},"2:23931:35335":{"crate_id":2,"path":["core","num","fmt","Formatted"],"kind":"struct"},"5:7426:56425":{"crate_id":5,"path":["alloc","vec","into_iter","drop","DropGuard"],"kind":"struct"},"2:48222:67":{"crate_id":2,"path":["core","fmt","rt","v1","Alignment"],"kind":"enum"},"1:7815:2212":{"crate_id":1,"path":["std","sync","mpsc","blocking","Inner"],"kind":"struct"},"2:46695:1926":{"crate_id":2,"path":["core","iter","sources","repeat","Repeat"],"kind":"struct"},"1:10934:1925":{"crate_id":1,"path":["std","io","util","Empty"],"kind":"struct"},"17:11779:44195":{"crate_id":17,"path":["object","elf","Verneed"],"kind":"struct"},"17:9065:43268":{"crate_id":17,"path":["object","common","SymbolScope"],"kind":"enum"},"17:11835:44213":{"crate_id":17,"path":["object","elf","HashHeader"],"kind":"struct"},"2:4658:99":{"crate_id":2,"path":["core","asserting","Capture"],"kind":"struct"},"17:9264:41646":{"crate_id":17,"path":["object","endian","LittleEndian"],"kind":"struct"},"2:47242:2058":{"crate_id":2,"path":["core","option","IterMut"],"kind":"struct"},"18:712:2552":{"crate_id":18,"path":["memchr","memmem","twoway","Reverse"],"kind":"struct"},"1:7820:50652":{"crate_id":1,"path":["std","sync","mpsc","blocking","WaitToken"],"kind":"struct"},"17:4008:43470":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbolIterator"],"kind":"struct"},"1:8578:2300":{"crate_id":1,"path":["std","sync","condvar","Condvar"],"kind":"struct"},"6:1729:2284":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_un"],"kind":"struct"},"17:11519:43908":{"crate_id":17,"path":["object","elf","SectionHeader64"],"kind":"struct"},"2:3640:133":{"crate_id":2,"path":["core","ops","try_trait","FromResidual"],"kind":"trait"},"2:3188:202":{"crate_id":2,"path":["core","marker","StructuralEq"],"kind":"trait"},"6:3862:39395":{"crate_id":6,"path":["libc","unix","linux_like","linux","rlimit64"],"kind":"struct"},"17:9839:3852":{"crate_id":17,"path":["object","read","any","SymbolTable"],"kind":"struct"},"5:6936:3074":{"crate_id":5,"path":["alloc","task","Wake"],"kind":"trait"},"2:49553:2370":{"crate_id":2,"path":["core","str","pattern","CharSearcher"],"kind":"struct"},"17:10128:3910":{"crate_id":17,"path":["object","read","coff","section","CoffSection"],"kind":"struct"},"16:7279:3785":{"crate_id":16,"path":["gimli","read","rnglists","RangeListsFormat"],"kind":"enum"},"1:9062:52097":{"crate_id":1,"path":["std","sync","rwlock","fmt","LockedPlaceholder"],"kind":"struct"},"1:11020:1954":{"crate_id":1,"path":["std","net","addr","SocketAddr"],"kind":"enum"},"2:49168:2844":{"crate_id":2,"path":["core","str","iter","RSplit"],"kind":"struct"},"2:48969:2854":{"crate_id":2,"path":["core","slice","iter","ChunksExact"],"kind":"struct"},"5:1184:56536":{"crate_id":5,"path":["alloc","collections","btree","append","MergeIter"],"kind":"struct"},"2:10069:1852":{"crate_id":2,"path":["core","fmt","Write"],"kind":"trait"},"6:6614:36370":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","not_x32","statvfs"],"kind":"struct"},"2:4576:1881":{"crate_id":2,"path":["core","array","try_collect_into_array","Guard"],"kind":"struct"},"16:3522:41649":{"crate_id":16,"path":["gimli","arch","Arm"],"kind":"struct"},"2:47581:79":{"crate_id":2,"path":["core","sync","atomic","AtomicI32"],"kind":"struct"},"17:11328:43291":{"crate_id":17,"path":["object","read","Relocation"],"kind":"struct"},"6:578:9164":{"crate_id":6,"path":["libc","unix","iovec"],"kind":"struct"},"5:1591:2058":{"crate_id":5,"path":["alloc","collections","btree","map","IterMut"],"kind":"struct"},"1:10994:1896":{"crate_id":1,"path":["std","io","Take"],"kind":"struct"},"17:13402:49294":{"crate_id":17,"path":["object","pe","ImageArchiveMemberHeader"],"kind":"struct"},"2:49272:2848":{"crate_id":2,"path":["core","str","iter","RSplitN"],"kind":"struct"},"1:1501:2064":{"crate_id":1,"path":["std","collections","hash","map","RawEntryBuilderMut"],"kind":"struct"},"1:3233:2230":{"crate_id":1,"path":["std","fs","metadata"],"kind":"function"},"1:3617:1910":{"crate_id":1,"path":["std","io","buffered","linewriter","LineWriter"],"kind":"struct"},"16:4890:42286":{"crate_id":16,"path":["gimli","constants","DwLns"],"kind":"struct"},"2:48207:70":{"crate_id":2,"path":["core","fmt","rt","v1","Argument"],"kind":"struct"},"1:12059:2311":{"crate_id":1,"path":["std","sync","once","OnceState"],"kind":"struct"},"17:13370:48937":{"crate_id":17,"path":["object","pe","ImageAuxSymbolCrc"],"kind":"struct"},"17:12507:48168":{"crate_id":17,"path":["object","macho","LinkeditDataCommand"],"kind":"struct"},"17:10407:3838":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdatIterator"],"kind":"struct"},"2:51133:2710":{"crate_id":2,"path":["core","core_arch","simd","u8x16"],"kind":"struct"},"1:10678:2225":{"crate_id":1,"path":["std","fs","ReadDir"],"kind":"struct"},"17:10106:3908":{"crate_id":17,"path":["object","read","coff","section","CoffSegment"],"kind":"struct"},"14:56:43692":{"crate_id":14,"path":["rustc_demangle","v0","Ident"],"kind":"struct"},"17:13685:49328":{"crate_id":17,"path":["object","pe","ImageLoadConfigDirectory64"],"kind":"struct"},"2:55820:221":{"crate_id":2,"path":["core","core_simd","fmt","fmt","Wrapper"],"kind":"struct"},"5:4583:56468":{"crate_id":5,"path":["alloc","collections","vec_deque","spec_extend","spec_extend","WrapAddOnDrop"],"kind":"struct"},"1:4307:1919":{"crate_id":1,"path":["std","io","stdio","StdinLock"],"kind":"struct"},"2:4940:2788":{"crate_id":2,"path":["core","cell","BorrowError"],"kind":"struct"},"5:2184:56461":{"crate_id":5,"path":["alloc","collections","btree","mem","replace","PanicGuard"],"kind":"struct"},"16:6166:3610":{"crate_id":16,"path":["gimli","read","aranges","ArangeHeaderIter"],"kind":"struct"},"2:45481:2446":{"crate_id":2,"path":["core","ops","control_flow","ControlFlow"],"kind":"enum"},"2:46117:3051":{"crate_id":2,"path":["core","char","ToLowercase"],"kind":"struct"},"6:1563:37303":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_in6"],"kind":"struct"},"2:22799:12115":{"crate_id":2,"path":["core","core_simd","masks","to_bitmask","ToBitMask"],"kind":"trait"},"17:11947:47966":{"crate_id":17,"path":["object","macho","DyldCacheImageInfo"],"kind":"struct"},"2:51330:2678":{"crate_id":2,"path":["core","core_arch","simd","i16x8"],"kind":"struct"},"12:2045:2041":{"crate_id":12,"path":["hashbrown","set","Union"],"kind":"struct"},"16:6691:3625":{"crate_id":16,"path":["gimli","read","loclists","LocationListEntry"],"kind":"struct"},"2:5314:3046":{"crate_id":2,"path":["core","char","REPLACEMENT_CHARACTER"],"kind":"constant"},"2:8760:2031":{"crate_id":2,"path":["core","iter","traits","marker","FusedIterator"],"kind":"trait"},"6:6100:40470":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_xmmreg"],"kind":"struct"},"17:510:43261":{"crate_id":17,"path":["object","read","any","Segment"],"kind":"struct"},"5:3028:56505":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Mut"],"kind":"struct"},"16:4506:42177":{"crate_id":16,"path":["gimli","constants","DwVis"],"kind":"struct"},"1:11888:52100":{"crate_id":1,"path":["std","sync","mpsc","sync","Failure"],"kind":"enum"},"2:49878:2899":{"crate_id":2,"path":["core","str","IsAsciiWhitespace"],"kind":"struct"},"5:3878:3197":{"crate_id":5,"path":["alloc","collections","linked_list","CursorMut"],"kind":"struct"},"2:3092:212":{"crate_id":2,"path":["core","convert","TryFrom"],"kind":"trait"},"17:11993:47971":{"crate_id":17,"path":["object","macho","MachHeader32"],"kind":"struct"},"12:2039:2040":{"crate_id":12,"path":["hashbrown","set","SymmetricDifference"],"kind":"struct"},"2:10250:55797":{"crate_id":2,"path":["core","fmt","fmt","BorrowedPlaceholder"],"kind":"struct"},"2:49015:2857":{"crate_id":2,"path":["core","slice","iter","ArrayChunks"],"kind":"struct"},"2:11200:2847":{"crate_id":2,"path":["core","slice","iter","SplitN"],"kind":"struct"},"17:9296:43254":{"crate_id":17,"path":["object","endian","U16Bytes"],"kind":"struct"},"1:15491:50255":{"crate_id":1,"path":["std","backtrace_rs","symbolize","gimli","mmap","Mmap"],"kind":"struct"},"17:10571:43496":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCacheImage"],"kind":"struct"},"9:0:1672":{"crate_id":9,"path":["miniz_oxide"],"kind":"module"},"17:10253:3804":{"crate_id":17,"path":["object","read","elf","segment","ElfSegmentIterator"],"kind":"struct"},"6:6858:39587":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_rwlockattr_t"],"kind":"struct"},"12:930:2064":{"crate_id":12,"path":["hashbrown","map","RawEntryBuilderMut"],"kind":"struct"},"18:729:59553":{"crate_id":18,"path":["memchr","memmem","twoway","Shift"],"kind":"enum"},"1:15762:1717":{"crate_id":1,"path":["std","u128"],"kind":"primitive"},"1:15739:1697":{"crate_id":1,"path":["std","bool"],"kind":"primitive"},"17:11159:43287":{"crate_id":17,"path":["object","read","SymbolMapName"],"kind":"struct"},"6:6185:40475":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ipc_perm"],"kind":"struct"},"2:11214:2848":{"crate_id":2,"path":["core","slice","iter","RSplitN"],"kind":"struct"},"18:782:59540":{"crate_id":18,"path":["memchr","memmem","x86","sse","Forward"],"kind":"struct"},"1:14708:50304":{"crate_id":1,"path":["std","sys","unix","process","process_inner","posix_spawn","PosixSpawnattr"],"kind":"struct"},"17:12442:48163":{"crate_id":17,"path":["object","macho","TwolevelHintsCommand"],"kind":"struct"},"6:4371:39446":{"crate_id":6,"path":["libc","unix","linux_like","linux","can_filter"],"kind":"struct"},"1:11410:2096":{"crate_id":1,"path":["std","path","PrefixComponent"],"kind":"struct"},"1:11014:1900":{"crate_id":1,"path":["std","io","Lines"],"kind":"struct"},"17:12610:48188":{"crate_id":17,"path":["object","macho","DyldInfoCommand"],"kind":"struct"},"2:52013:2679":{"crate_id":2,"path":["core","core_arch","simd","i16x16"],"kind":"struct"},"17:11304:43290":{"crate_id":17,"path":["object","read","RelocationTarget"],"kind":"enum"},"2:49136:1897":{"crate_id":2,"path":["core","str","iter","Bytes"],"kind":"struct"},"2:24521:2935":{"crate_id":2,"path":["core","num","nonzero","NonZeroI64"],"kind":"struct"},"17:11572:43976":{"crate_id":17,"path":["object","elf","Sym32"],"kind":"struct"},"16:6949:3780":{"crate_id":16,"path":["gimli","read","op","OperationEvaluationResult"],"kind":"enum"},"17:13788:49368":{"crate_id":17,"path":["object","pe","ImageAlpha64RuntimeFunctionEntry"],"kind":"struct"},"6:5953:37236":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statfs"],"kind":"struct"},"1:13365:7932":{"crate_id":1,"path":["std","sys","unix","os","SplitPaths"],"kind":"struct"},"2:47497:78":{"crate_id":2,"path":["core","sync","atomic","AtomicI16"],"kind":"struct"},"17:13609:49319":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation64V2"],"kind":"struct"},"17:11482:43692":{"crate_id":17,"path":["object","elf","Ident"],"kind":"struct"},"2:4945:2789":{"crate_id":2,"path":["core","cell","BorrowMutError"],"kind":"struct"},"16:6964:2970":{"crate_id":16,"path":["gimli","read","op","Location"],"kind":"enum"},"2:23587:2924":{"crate_id":2,"path":["core","num","bignum","Big32x40"],"kind":"struct"},"1:8081:50258":{"crate_id":1,"path":["std","sync","mpsc","spsc_queue","Queue"],"kind":"struct"},"18:744:59550":{"crate_id":18,"path":["memchr","memmem","twoway","SuffixKind"],"kind":"enum"},"1:14795:2172":{"crate_id":1,"path":["std","sys","unix","time","SystemTime"],"kind":"struct"},"1:11214:1954":{"crate_id":1,"path":["std","os","unix","net","addr","SocketAddr"],"kind":"struct"},"5:7593:3140":{"crate_id":5,"path":["alloc","vec","set_len_on_drop","SetLenOnDrop"],"kind":"struct"},"5:912:3164":{"crate_id":5,"path":["alloc","collections","binary_heap","PeekMut"],"kind":"struct"},"1:5876:2343":{"crate_id":1,"path":["std","os","unix","net","ancillary","AncillaryData"],"kind":"enum"},"1:8813:2319":{"crate_id":1,"path":["std","sync","once","WaiterQueue"],"kind":"struct"},"2:52990:2687":{"crate_id":2,"path":["core","core_arch","simd","i64x8"],"kind":"struct"},"1:15723:50056":{"crate_id":1,"path":["std","backtrace_rs","print","PrintFmt"],"kind":"enum"},"1:2855:165":{"crate_id":1,"path":["std","ffi","os_str","OsStr"],"kind":"struct"},"2:50042:29235":{"crate_id":2,"path":["core","future","ResumeTy"],"kind":"struct"},"2:55872:221":{"crate_id":2,"path":["core","core_simd","fmt","fmt","Wrapper"],"kind":"struct"},"6:157:36102":{"crate_id":6,"path":["libc","unix","FILE"],"kind":"enum"},"17:11809:44199":{"crate_id":17,"path":["object","elf","NoteHeader32"],"kind":"struct"},"2:3252:2048":{"crate_id":2,"path":["core","ops","arith","Sub"],"kind":"trait"},"17:11962:43503":{"crate_id":17,"path":["object","macho","FatHeader"],"kind":"struct"},"16:3041:3740":{"crate_id":16,"path":["gimli","common","DebugLocListsIndex"],"kind":"struct"},"6:1547:37301":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr"],"kind":"struct"},"2:3333:2520":{"crate_id":2,"path":["core","ops","bit","BitAndAssign"],"kind":"trait"},"17:9943:59537":{"crate_id":17,"path":["object","read","any","DynamicRelocationIteratorInternal"],"kind":"enum"},"1:2155:1994":{"crate_id":1,"path":["std","collections","hash","set","Iter"],"kind":"struct"},"17:13746:49330":{"crate_id":17,"path":["object","pe","ImageHotPatchBase"],"kind":"struct"},"2:10122:106":{"crate_id":2,"path":["core","fmt","macros","Debug"],"kind":"proc_derive"},"17:11822:44200":{"crate_id":17,"path":["object","elf","NoteHeader64"],"kind":"struct"},"6:5228:40055":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","termios"],"kind":"struct"},"2:47455:88":{"crate_id":2,"path":["core","sync","atomic","AtomicU8"],"kind":"struct"},"17:12982:48712":{"crate_id":17,"path":["object","pe","ImageVxdHeader"],"kind":"struct"},"1:12054:2116":{"crate_id":1,"path":["std","sync","mutex","MutexGuard"],"kind":"struct"},"17:542:3500":{"crate_id":17,"path":["object","read","any","Section"],"kind":"struct"},"1:11050:1960":{"crate_id":1,"path":["std","net","ip","IpAddr"],"kind":"enum"},"2:3306:2045":{"crate_id":2,"path":["core","ops","bit","BitAnd"],"kind":"trait"},"2:45509:2536":{"crate_id":2,"path":["core","ops","generator","GeneratorState"],"kind":"enum"},"6:5400:40066":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ptrace_peeksiginfo_args"],"kind":"struct"},"17:10543:43494":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCache"],"kind":"struct"},"1:2397:7921":{"crate_id":1,"path":["std","env","VarsOs"],"kind":"struct"},"2:49886:2894":{"crate_id":2,"path":["core","str","BytesIsNotEmpty"],"kind":"struct"},"1:14377:125":{"crate_id":1,"path":["std","sys","unix","fs","FileType"],"kind":"struct"},"2:21:652":{"crate_id":2,"path":["core","format_args"],"kind":"macro"},"2:46479:1896":{"crate_id":2,"path":["core","iter","adapters","take","Take"],"kind":"struct"},"16:7073:3629":{"crate_id":16,"path":["gimli","read","op","EvaluationResult"],"kind":"enum"},"2:5507:2717":{"crate_id":2,"path":["core","ffi","sealed_trait","VaArgSafe"],"kind":"trait"},"2:49093:2975":{"crate_id":2,"path":["core","str","error","Utf8Error"],"kind":"struct"},"6:3997:39407":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_event"],"kind":"struct"},"1:14037:1918":{"crate_id":1,"path":["std","sys","unix","stdio","Stdin"],"kind":"struct"},"5:8170:1996":{"crate_id":5,"path":["alloc","collections","linked_list","IntoIter"],"kind":"struct"},"2:3337:2522":{"crate_id":2,"path":["core","ops","bit","BitOrAssign"],"kind":"trait"},"17:13627:49326":{"crate_id":17,"path":["object","pe","ImageEpilogueDynamicRelocationHeader"],"kind":"struct"},"17:11277:43253":{"crate_id":17,"path":["object","read","CodeView"],"kind":"struct"},"2:52277:2692":{"crate_id":2,"path":["core","core_arch","simd","i8x64"],"kind":"struct"},"2:50718:55138":{"crate_id":2,"path":["core","core_arch","simd","u8x2"],"kind":"struct"},"14:216:41575":{"crate_id":14,"path":["rustc_demangle","SizeLimitedFmtAdapter"],"kind":"struct"},"6:1617:37308":{"crate_id":6,"path":["libc","unix","linux_like","sched_param"],"kind":"struct"},"5:2761:3211":{"crate_id":5,"path":["alloc","collections","btree","node","Handle"],"kind":"struct"},"1:7545:2126":{"crate_id":1,"path":["std","process","ChildStdout"],"kind":"struct"},"2:12629:2841":{"crate_id":2,"path":["core","str","iter","SplitInclusive"],"kind":"struct"},"12:949:2066":{"crate_id":12,"path":["hashbrown","map","RawOccupiedEntryMut"],"kind":"struct"},"16:2733:3451":{"crate_id":16,"path":["gimli","common","Format"],"kind":"enum"},"1:8727:52097":{"crate_id":1,"path":["std","sync","mutex","fmt","LockedPlaceholder"],"kind":"struct"},"17:9186:3872":{"crate_id":17,"path":["object","common","SectionFlags"],"kind":"enum"},"17:3743:3864":{"crate_id":17,"path":["object","read","macho","section","MachOSectionIterator"],"kind":"struct"},"17:8954:3873":{"crate_id":17,"path":["object","common","SectionKind"],"kind":"enum"},"1:4480:1926":{"crate_id":1,"path":["std","io","util","Repeat"],"kind":"struct"},"1:13904:50284":{"crate_id":1,"path":["std","sys","unix","stack_overflow","Handler"],"kind":"struct"},"16:6101:3561":{"crate_id":16,"path":["gimli","read","abbrev","Abbreviations"],"kind":"struct"},"2:3465:2535":{"crate_id":2,"path":["core","ops","generator","Generator"],"kind":"trait"},"17:13842:49374":{"crate_id":17,"path":["object","pe","ImageEnclaveConfig64"],"kind":"struct"},"16:6110:3603":{"crate_id":16,"path":["gimli","read","abbrev","Abbreviation"],"kind":"struct"},"17:12521:48169":{"crate_id":17,"path":["object","macho","FilesetEntryCommand"],"kind":"struct"},"2:5091:2008":{"crate_id":2,"path":["core","cell","UnsafeCell"],"kind":"struct"},"2:9643:76":{"crate_id":2,"path":["core","sync","atomic","AtomicBool"],"kind":"struct"},"1:11007:1899":{"crate_id":1,"path":["std","io","Split"],"kind":"struct"},"14:0:1676":{"crate_id":14,"path":["rustc_demangle"],"kind":"module"},"2:13067:35625":{"crate_id":2,"path":["core","str","lossy","Utf8LossyChunksIter"],"kind":"struct"},"2:53068:2672":{"crate_id":2,"path":["core","core_arch","simd","f64x8"],"kind":"struct"},"1:4344:1920":{"crate_id":1,"path":["std","io","stdio","Stdout"],"kind":"struct"},"1:14346:50057":{"crate_id":1,"path":["std","sys","unix","fs","StatxExtraFields"],"kind":"struct"},"17:12040:48074":{"crate_id":17,"path":["object","macho","LcStr"],"kind":"struct"},"1:11044:1955":{"crate_id":1,"path":["std","net","addr","SocketAddrV4"],"kind":"struct"},"6:4293:39436":{"crate_id":6,"path":["libc","unix","linux_like","linux","genlmsghdr"],"kind":"struct"},"1:3235:2231":{"crate_id":1,"path":["std","fs","symlink_metadata"],"kind":"function"},"1:11232:2283":{"crate_id":1,"path":["std","os","unix","net","ancillary","SocketAncillary"],"kind":"struct"},"2:3311:2046":{"crate_id":2,"path":["core","ops","bit","BitOr"],"kind":"trait"},"2:12862:2369":{"crate_id":2,"path":["core","str","pattern","ReverseSearcher"],"kind":"trait"},"17:9600:59528":{"crate_id":17,"path":["object","read","any","FileInternal"],"kind":"enum"},"2:46338:2612":{"crate_id":2,"path":["core","iter","adapters","filter","Filter"],"kind":"struct"},"2:7808:2647":{"crate_id":2,"path":["core","iter","range","Step"],"kind":"trait"},"16:5360:3456":{"crate_id":16,"path":["gimli","read","cfi","DebugFrame"],"kind":"struct"},"16:3488:3748":{"crate_id":16,"path":["gimli","common","DwoId"],"kind":"struct"},"5:8352:3083":{"crate_id":5,"path":["alloc","string","FromUtf8Error"],"kind":"struct"},"1:1152:6914":{"crate_id":1,"path":["std","backtrace","BacktraceSymbol"],"kind":"struct"},"17:11767:44194":{"crate_id":17,"path":["object","elf","Verdaux"],"kind":"struct"},"2:24317:2216":{"crate_id":2,"path":["core","num","nonzero","NonZeroU64"],"kind":"struct"},"2:3646:2537":{"crate_id":2,"path":["core","ops","try_trait","Residual"],"kind":"trait"},"1:7628:2130":{"crate_id":1,"path":["std","process","Stdio"],"kind":"struct"},"2:13600:55696":{"crate_id":2,"path":["core","future","join","MaybeDone"],"kind":"enum"},"6:543:36416":{"crate_id":6,"path":["libc","unix","rusage"],"kind":"struct"},"1:2162:2036":{"crate_id":1,"path":["std","collections","hash","set","Drain"],"kind":"struct"},"17:13062:48767":{"crate_id":17,"path":["object","pe","ImageOptionalHeader32"],"kind":"struct"},"17:12155:48143":{"crate_id":17,"path":["object","macho","FvmlibCommand"],"kind":"struct"},"12:747:1994":{"crate_id":12,"path":["hashbrown","map","Iter"],"kind":"struct"},"2:3088:213":{"crate_id":2,"path":["core","convert","TryInto"],"kind":"trait"},"2:24419:2933":{"crate_id":2,"path":["core","num","nonzero","NonZeroI8"],"kind":"struct"},"6:6893:39592":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_rwlock_t"],"kind":"struct"},"2:45763:2423":{"crate_id":2,"path":["core","any","tags","Ref"],"kind":"struct"},"2:23809:2729":{"crate_id":2,"path":["core","num","dec2flt","ParseFloatError"],"kind":"struct"},"2:37324:164":{"crate_id":2,"path":["core","cmp","Ordering"],"kind":"enum"},"16:5941:175":{"crate_id":16,"path":["gimli","read","cfi","Pointer"],"kind":"enum"},"1:7863:50258":{"crate_id":1,"path":["std","sync","mpsc","mpsc_queue","Queue"],"kind":"struct"},"17:11628:44014":{"crate_id":17,"path":["object","elf","Rel32"],"kind":"struct"},"17:13933:49409":{"crate_id":17,"path":["object","pe","ImageFunctionEntry64"],"kind":"struct"},"6:4183:39427":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Sym"],"kind":"struct"},"6:5998:40467":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stack_t"],"kind":"struct"},"6:5167:40049":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","aiocb"],"kind":"struct"},"2:23845:35333":{"crate_id":2,"path":["core","num","flt2dec","decoder","Decoded"],"kind":"struct"},"17:13054:48765":{"crate_id":17,"path":["object","pe","ImageDataDirectory"],"kind":"struct"},"6:4101:39420":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_effect"],"kind":"struct"},"17:11186:43288":{"crate_id":17,"path":["object","read","ObjectMap"],"kind":"struct"},"1:2582:52107":{"crate_id":1,"path":["std","error","from","StringError"],"kind":"struct"},"1:3116:1889":{"crate_id":1,"path":["std","fs","read_to_string"],"kind":"function"},"16:7205:3635":{"crate_id":16,"path":["gimli","read","pubtypes","PubTypesEntry"],"kind":"struct"},"1:6593:1861":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt"],"kind":"trait"},"6:4431:39454":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_nl"],"kind":"struct"},"2:50739:55158":{"crate_id":2,"path":["core","core_arch","simd","i8x2"],"kind":"struct"},"17:11665:44017":{"crate_id":17,"path":["object","elf","Rela64"],"kind":"struct"},"16:5384:3457":{"crate_id":16,"path":["gimli","read","cfi","EhFrameHdr"],"kind":"struct"},"1:1524:2067":{"crate_id":1,"path":["std","collections","hash","map","RawVacantEntryMut"],"kind":"struct"},"6:1527:37298":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreq"],"kind":"struct"},"17:9592:124":{"crate_id":17,"path":["object","read","any","File"],"kind":"struct"},"16:6569:3769":{"crate_id":16,"path":["gimli","read","lists","ListsHeader"],"kind":"struct"},"1:8948:2306":{"crate_id":1,"path":["std","sync","poison","PoisonError"],"kind":"struct"},"2:46715:30865":{"crate_id":2,"path":["core","iter","sources","successors","Successors"],"kind":"struct"},"17:10814:3867":{"crate_id":17,"path":["object","read","macho","section","MachOSection"],"kind":"struct"},"15:248:3400":{"crate_id":15,"path":["addr2line","LocationRangeUnitIter"],"kind":"struct"},"1:1446:2059":{"crate_id":1,"path":["std","collections","hash","map","Keys"],"kind":"struct"},"16:5421:3459":{"crate_id":16,"path":["gimli","read","cfi","EhHdrTable"],"kind":"struct"},"2:47963:2412":{"crate_id":2,"path":["core","fmt","num","LowerHex"],"kind":"struct"},"2:47539:85":{"crate_id":2,"path":["core","sync","atomic","AtomicU16"],"kind":"struct"},"2:47319:191":{"crate_id":2,"path":["core","result","Result"],"kind":"enum"},"1:9516:50298":{"crate_id":1,"path":["std","sys_common","mutex","StaticMutexGuard"],"kind":"struct"},"17:13205:48820":{"crate_id":17,"path":["object","pe","AnonObjectHeaderV2"],"kind":"struct"},"17:13394:49267":{"crate_id":17,"path":["object","pe","ImageBaseRelocation"],"kind":"struct"},"2:9801:2827":{"crate_id":2,"path":["core","fmt","builders","PadAdapter"],"kind":"struct"},"1:14834:2009":{"crate_id":1,"path":["std","sys","unix","time","inner","Instant"],"kind":"struct"},"6:4272:39434":{"crate_id":6,"path":["libc","unix","linux_like","linux","posix_spawn_file_actions_t"],"kind":"struct"},"2:2692:560":{"crate_id":2,"path":["core","ptr","drop_in_place"],"kind":"function"},"6:1572:37304":{"crate_id":6,"path":["libc","unix","linux_like","addrinfo"],"kind":"struct"},"6:4052:39414":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_envelope"],"kind":"struct"},"16:5505:3466":{"crate_id":16,"path":["gimli","read","cfi","CfiEntriesIter"],"kind":"struct"},"2:12284:3066":{"crate_id":2,"path":["core","slice","SlicePattern"],"kind":"trait"},"19:117:59564":{"crate_id":19,"path":["panic_unwind","dwarf","eh","EHContext"],"kind":"struct"},"9:686:3244":{"crate_id":9,"path":["miniz_oxide","deflate","core","SymFreq"],"kind":"struct"},"17:9245:3808":{"crate_id":17,"path":["object","endian","Endianness"],"kind":"enum"},"2:22846:2664":{"crate_id":2,"path":["core","core_simd","masks","Mask"],"kind":"struct"},"2:52943:2669":{"crate_id":2,"path":["core","core_arch","simd","f32x16"],"kind":"struct"},"17:9769:59521":{"crate_id":17,"path":["object","read","any","ComdatIteratorInternal"],"kind":"enum"},"6:3892:39398":{"crate_id":6,"path":["libc","unix","linux_like","linux","spwd"],"kind":"struct"},"2:23822:2730":{"crate_id":2,"path":["core","num","dec2flt","FloatErrorKind"],"kind":"enum"},"6:3945:39401":{"crate_id":6,"path":["libc","unix","linux_like","linux","itimerspec"],"kind":"struct"},"5:1549:91":{"crate_id":5,"path":["alloc","collections","btree","map","BTreeMap"],"kind":"struct"},"5:1923:2037":{"crate_id":5,"path":["alloc","collections","btree","map","DrainFilter"],"kind":"struct"},"2:51384:2685":{"crate_id":2,"path":["core","core_arch","simd","i64x2"],"kind":"struct"},"2:53142:17662":{"crate_id":2,"path":["core","core_arch","x86","__m256d"],"kind":"struct"},"2:9140:2158":{"crate_id":2,"path":["core","panic","unwind_safe","RefUnwindSafe"],"kind":"trait"},"1:14702:50290":{"crate_id":1,"path":["std","sys","unix","process","process_inner","posix_spawn","PosixSpawnFileActions"],"kind":"struct"},"2:13550:134":{"crate_id":2,"path":["core","future","future","Future"],"kind":"trait"},"17:13564:49314":{"crate_id":17,"path":["object","pe","ImageLoadConfigCodeIntegrity"],"kind":"struct"},"2:47192:162":{"crate_id":2,"path":["core","option","Option"],"kind":"enum"},"17:13986:49418":{"crate_id":17,"path":["object","pe","ImportObjectHeader"],"kind":"struct"},"1:13384:50658":{"crate_id":1,"path":["std","sys","unix","os","Env"],"kind":"struct"},"6:591:36420":{"crate_id":6,"path":["libc","unix","winsize"],"kind":"struct"},"17:9896:59520":{"crate_id":17,"path":["object","read","any","SymbolIteratorInternal"],"kind":"enum"},"6:1700:37315":{"crate_id":6,"path":["libc","unix","linux_like","arpreq_old"],"kind":"struct"},"2:46318:2610":{"crate_id":2,"path":["core","iter","adapters","cycle","Cycle"],"kind":"struct"},"5:781:105":{"crate_id":5,"path":["alloc","borrow","Cow"],"kind":"enum"},"2:7738:2608":{"crate_id":2,"path":["core","iter","adapters","GenericShunt"],"kind":"struct"},"1:9509:50659":{"crate_id":1,"path":["std","sys_common","mutex","StaticMutex"],"kind":"struct"},"1:14872:2141":{"crate_id":1,"path":["std","sys_common","process","CommandEnvs"],"kind":"struct"},"6:5428:40070":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ptrace_syscall_info"],"kind":"struct"},"1:8626:2309":{"crate_id":1,"path":["std","sync","lazy_lock","LazyLock"],"kind":"struct"},"2:55885:221":{"crate_id":2,"path":["core","core_simd","fmt","fmt","Wrapper"],"kind":"struct"},"2:23901:35336":{"crate_id":2,"path":["core","num","fmt","Part"],"kind":"enum"},"1:3261:2241":{"crate_id":1,"path":["std","fs","read_dir"],"kind":"function"},"1:10984:1844":{"crate_id":1,"path":["std","io","Chain"],"kind":"struct"},"17:299:59525":{"crate_id":17,"path":["object","read","util","DebugLen"],"kind":"struct"},"16:5456:3461":{"crate_id":16,"path":["gimli","read","cfi","CieOffsetEncoding"],"kind":"enum"},"2:10333:138":{"crate_id":2,"path":["core","hash","Hash"],"kind":"trait"},"16:6464:3578":{"crate_id":16,"path":["gimli","read","line","IncompleteLineProgram"],"kind":"struct"},"2:46328:2611":{"crate_id":2,"path":["core","iter","adapters","enumerate","Enumerate"],"kind":"struct"},"2:50922:2701":{"crate_id":2,"path":["core","core_arch","simd","u32x2"],"kind":"struct"},"1:14769:2131":{"crate_id":1,"path":["std","sys","unix","process","process_inner","ExitStatus"],"kind":"struct"},"18:636:59540":{"crate_id":18,"path":["memchr","memmem","genericsimd","Forward"],"kind":"struct"},"1:3955:123":{"crate_id":1,"path":["std","io","error","Error"],"kind":"struct"},"6:4112:39421":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_ff_upload"],"kind":"struct"},"12:2013:2036":{"crate_id":12,"path":["hashbrown","set","Drain"],"kind":"struct"},"17:12408:48161":{"crate_id":17,"path":["object","macho","DylibModule64"],"kind":"struct"},"2:46379:2616":{"crate_id":2,"path":["core","iter","adapters","inspect","Inspect"],"kind":"struct"},"5:4199:2036":{"crate_id":5,"path":["alloc","collections","vec_deque","drain","Drain"],"kind":"struct"},"2:8247:2643":{"crate_id":2,"path":["core","iter","traits","accum","Product"],"kind":"trait"},"2:48310:2409":{"crate_id":2,"path":["core","fmt","FlagV1"],"kind":"enum"},"2:3191:205":{"crate_id":2,"path":["core","marker","Sync"],"kind":"trait"},"2:3282:2177":{"crate_id":2,"path":["core","ops","arith","SubAssign"],"kind":"trait"},"17:13477:49302":{"crate_id":17,"path":["object","pe","ImageImportDescriptor"],"kind":"struct"},"1:12217:4521":{"crate_id":1,"path":["std","sys","unix","args","Args"],"kind":"struct"},"1:8362:188":{"crate_id":1,"path":["std","sync","mpsc","Receiver"],"kind":"struct"},"18:790:3927":{"crate_id":18,"path":["memchr","memmem","FindIter"],"kind":"struct"},"1:4614:1892":{"crate_id":1,"path":["std","io","Seek"],"kind":"trait"},"1:15759:1714":{"crate_id":1,"path":["std","u16"],"kind":"primitive"},"6:6221:40478":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user_fpregs_struct"],"kind":"struct"},"17:11981:43502":{"crate_id":17,"path":["object","macho","FatArch64"],"kind":"struct"},"16:6032:3498":{"crate_id":16,"path":["gimli","read","endian_slice","EndianSlice"],"kind":"struct"},"2:10128:2410":{"crate_id":2,"path":["core","fmt","Octal"],"kind":"trait"},"1:15076:1964":{"crate_id":1,"path":["std","sys_common","net","LookupHost"],"kind":"struct"},"1:1428:2058":{"crate_id":1,"path":["std","collections","hash","map","IterMut"],"kind":"struct"},"12:2032:2039":{"crate_id":12,"path":["hashbrown","set","Difference"],"kind":"struct"},"5:4290:2058":{"crate_id":5,"path":["alloc","collections","vec_deque","iter_mut","IterMut"],"kind":"struct"},"1:11074:1961":{"crate_id":1,"path":["std","net","ip","Ipv4Addr"],"kind":"struct"},"16:7226:3637":{"crate_id":16,"path":["gimli","read","pubtypes","PubTypesEntryIter"],"kind":"struct"},"2:22644:1970":{"crate_id":2,"path":["core","core_simd","lane_count","LaneCount"],"kind":"struct"},"2:45808:2746":{"crate_id":2,"path":["core","array","TryFromSliceError"],"kind":"struct"},"17:13429:49296":{"crate_id":17,"path":["object","pe","ImageExportDirectory"],"kind":"struct"},"12:377:3384":{"crate_id":12,"path":["hashbrown","raw","RawIter"],"kind":"struct"},"2:49028:2858":{"crate_id":2,"path":["core","slice","iter","ArrayChunksMut"],"kind":"struct"},"16:3218:3743":{"crate_id":16,"path":["gimli","common","DebugStrOffset"],"kind":"struct"},"9:776:3293":{"crate_id":9,"path":["miniz_oxide","deflate","CompressionLevel"],"kind":"enum"},"17:10988:43554":{"crate_id":17,"path":["object","read","pe","section","PeSectionIterator"],"kind":"struct"},"16:6357:3616":{"crate_id":16,"path":["gimli","read","line","LineInstructions"],"kind":"struct"},"2:49218:2875":{"crate_id":2,"path":["core","str","iter","RSplitTerminator"],"kind":"struct"},"2:46499:2495":{"crate_id":2,"path":["core","iter","adapters","zip","Zip"],"kind":"struct"},"2:47379:1996":{"crate_id":2,"path":["core","result","IntoIter"],"kind":"struct"},"2:51509:55160":{"crate_id":2,"path":["core","core_arch","simd","m8x16"],"kind":"struct"},"17:10095:3907":{"crate_id":17,"path":["object","read","coff","section","CoffSegmentIterator"],"kind":"struct"},"16:6424:3618":{"crate_id":16,"path":["gimli","read","line","LineProgramHeader"],"kind":"struct"},"1:8369:1997":{"crate_id":1,"path":["std","sync","mpsc","Sender"],"kind":"struct"},"2:49433:2885":{"crate_id":2,"path":["core","str","iter","SplitAsciiWhitespace"],"kind":"struct"},"17:10403:3848":{"crate_id":17,"path":["object","read","elf","relocation","RelocationSections"],"kind":"struct"},"2:24453:2934":{"crate_id":2,"path":["core","num","nonzero","NonZeroI16"],"kind":"struct"},"16:3145:3750":{"crate_id":16,"path":["gimli","common","RangeListsOffset"],"kind":"struct"},"1:11221:2339":{"crate_id":1,"path":["std","os","unix","net","ancillary","SocketCred"],"kind":"struct"},"2:8353:1812":{"crate_id":2,"path":["core","iter","traits","exact_size","ExactSizeIterator"],"kind":"trait"},"16:7971:123":{"crate_id":16,"path":["gimli","read","Error"],"kind":"enum"},"2:48511:142":{"crate_id":2,"path":["core","hash","sip","Hasher"],"kind":"struct"},"17:13554:49313":{"crate_id":17,"path":["object","pe","ImageResourceDataEntry"],"kind":"struct"},"2:53107:17659":{"crate_id":2,"path":["core","core_arch","x86","__m128d"],"kind":"struct"},"2:49050:2860":{"crate_id":2,"path":["core","slice","iter","RChunksMut"],"kind":"struct"},"5:421:1814":{"crate_id":5,"path":["alloc","boxed","Box"],"kind":"struct"},"17:0:1679":{"crate_id":17,"path":["object"],"kind":"module"},"6:6124:40472":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user_regs_struct"],"kind":"struct"},"6:1540:37300":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreq_source"],"kind":"struct"},"16:6731:3773":{"crate_id":16,"path":["gimli","read","lookup","LookupEntryIter"],"kind":"struct"},"12:556:139":{"crate_id":12,"path":["hashbrown","map","HashMap"],"kind":"struct"},"5:3320:2039":{"crate_id":5,"path":["alloc","collections","btree","set","Difference"],"kind":"struct"},"5:6634:69":{"crate_id":5,"path":["alloc","sync","Arc"],"kind":"struct"},"2:5071:2424":{"crate_id":2,"path":["core","cell","RefMut"],"kind":"struct"},"2:46468:2626":{"crate_id":2,"path":["core","iter","adapters","step_by","StepBy"],"kind":"struct"},"12:160:3381":{"crate_id":12,"path":["hashbrown","raw","Bucket"],"kind":"struct"},"5:1637:2061":{"crate_id":5,"path":["alloc","collections","btree","map","ValuesMut"],"kind":"struct"},"16:7761:3642":{"crate_id":16,"path":["gimli","read","unit","AttrsIter"],"kind":"struct"},"2:47707:87":{"crate_id":2,"path":["core","sync","atomic","AtomicU64"],"kind":"struct"},"6:584:36419":{"crate_id":6,"path":["libc","unix","pollfd"],"kind":"struct"},"2:47413:81":{"crate_id":2,"path":["core","sync","atomic","AtomicI8"],"kind":"struct"},"2:0:471":{"crate_id":2,"path":["core"],"kind":"module"},"1:10950:1891":{"crate_id":1,"path":["std","io","IoSlice"],"kind":"struct"},"2:49890:2895":{"crate_id":2,"path":["core","str","UnsafeBytesToStr"],"kind":"struct"},"1:9521:50664":{"crate_id":1,"path":["std","sys_common","mutex","MovableMutex"],"kind":"struct"},"2:38568:2452":{"crate_id":2,"path":["core","marker","PhantomPinned"],"kind":"struct"},"18:660:3941":{"crate_id":18,"path":["memchr","memmem","prefilter","PrefilterState"],"kind":"struct"},"12:112:58660":{"crate_id":12,"path":["hashbrown","raw","bitmask","BitMaskIter"],"kind":"struct"},"2:49318:2879":{"crate_id":2,"path":["core","str","iter","RMatchIndices"],"kind":"struct"},"2:53206:17666":{"crate_id":2,"path":["core","core_arch","x86","__m128bh"],"kind":"struct"},"17:10558:43495":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCacheImageIterator"],"kind":"struct"},"16:7185:3633":{"crate_id":16,"path":["gimli","read","pubnames","DebugPubNames"],"kind":"struct"},"17:13898:49401":{"crate_id":17,"path":["object","pe","ImageCoffSymbolsHeader"],"kind":"struct"},"17:12287:48153":{"crate_id":17,"path":["object","macho","RoutinesCommand32"],"kind":"struct"},"5:1475:2072":{"crate_id":5,"path":["alloc","collections","btree","map","entry","OccupiedError"],"kind":"struct"},"5:8079:3082":{"crate_id":5,"path":["alloc","alloc","Global"],"kind":"struct"},"2:46458:2622":{"crate_id":2,"path":["core","iter","adapters","skip_while","SkipWhile"],"kind":"struct"},"16:7250:3639":{"crate_id":16,"path":["gimli","read","rnglists","DebugRngLists"],"kind":"struct"},"2:6525:55500":{"crate_id":2,"path":["core","iter","adapters","flatten","TrustedConstSize"],"kind":"trait"},"2:10132:2412":{"crate_id":2,"path":["core","fmt","LowerHex"],"kind":"trait"},"2:46408:2631":{"crate_id":2,"path":["core","iter","adapters","map_while","MapWhile"],"kind":"struct"},"17:13318:48933":{"crate_id":17,"path":["object","pe","ImageAuxSymbolFunction"],"kind":"struct"},"18:136:49772":{"crate_id":18,"path":["memchr","memchr","iter","Memchr"],"kind":"struct"},"6:5292:40059":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","rtentry"],"kind":"struct"},"17:10179:43351":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbol"],"kind":"struct"},"17:12659:48239":{"crate_id":17,"path":["object","macho","IdentCommand"],"kind":"struct"},"1:14571:2133":{"crate_id":1,"path":["std","sys","unix","process","process_common","ExitCode"],"kind":"struct"},"1:7683:2134":{"crate_id":1,"path":["std","process","exit"],"kind":"function"},"6:4419:39452":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlmsgerr"],"kind":"struct"},"19:0:973":{"crate_id":19,"path":["panic_unwind"],"kind":"module"},"12:0:1675":{"crate_id":12,"path":["hashbrown"],"kind":"module"},"17:13810:49370":{"crate_id":17,"path":["object","pe","ImageRuntimeFunctionEntry"],"kind":"struct"},"2:50086:2907":{"crate_id":2,"path":["core","task","wake","RawWaker"],"kind":"struct"},"2:55846:221":{"crate_id":2,"path":["core","core_simd","fmt","fmt","Wrapper"],"kind":"struct"},"2:2831:169":{"crate_id":2,"path":["core","cmp","PartialEq"],"kind":"trait"},"1:12039:2305":{"crate_id":1,"path":["std","sync","condvar","WaitTimeoutResult"],"kind":"struct"},"1:1488:2061":{"crate_id":1,"path":["std","collections","hash","map","ValuesMut"],"kind":"struct"},"17:1236:43352":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbolIterator"],"kind":"struct"},"1:2456:4521":{"crate_id":1,"path":["std","env","Args"],"kind":"struct"},"17:12431:48162":{"crate_id":17,"path":["object","macho","DylibReference"],"kind":"struct"},"2:46258:8540":{"crate_id":2,"path":["core","ffi","VaList"],"kind":"struct"},"1:15740:1698":{"crate_id":1,"path":["std","never"],"kind":"primitive"},"1:10541:2050":{"crate_id":1,"path":["std","collections","hash","map","RandomState"],"kind":"struct"},"2:23966:2950":{"crate_id":2,"path":["core","num","error","IntErrorKind"],"kind":"enum"},"18:885:3935":{"crate_id":18,"path":["memchr","memmem","SearcherRev"],"kind":"struct"},"1:13736:50651":{"crate_id":1,"path":["std","sys","unix","process","process_common","Argv"],"kind":"struct"},"2:45721:2541":{"crate_id":2,"path":["core","ops","try_trait","Yeet"],"kind":"struct"},"2:13949:137":{"crate_id":2,"path":["core","alloc","global","GlobalAlloc"],"kind":"trait"},"1:14971:2027":{"crate_id":1,"path":["std","sys_common","wtf8","Wtf8CodePoints"],"kind":"struct"},"16:5960:3489":{"crate_id":16,"path":["gimli","read","cfi","PointerEncodingParameters"],"kind":"struct"},"1:13831:2129":{"crate_id":1,"path":["std","sys","unix","process","process_common","CommandArgs"],"kind":"struct"},"2:45688:2959":{"crate_id":2,"path":["core","ops","range","Bound"],"kind":"enum"},"6:4364:39445":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_j1939"],"kind":"struct"},"2:3623:2961":{"crate_id":2,"path":["core","ops","range","OneSidedRange"],"kind":"trait"},"2:22443:55379":{"crate_id":2,"path":["core","core_simd","swizzle","deinterleave","Odd"],"kind":"struct"},"6:4523:39464":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_can"],"kind":"struct"},"1:820:6799":{"crate_id":1,"path":["std","thread","local","os","Key"],"kind":"struct"},"1:6605:50087":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt","st_mtime"],"kind":"foreign_type"},"1:12015:2003":{"crate_id":1,"path":["std","sync","mpsc","TrySendError"],"kind":"enum"},"1:11983:2001":{"crate_id":1,"path":["std","sync","mpsc","TryRecvError"],"kind":"enum"},"2:53087:17657":{"crate_id":2,"path":["core","core_arch","x86","__m128i"],"kind":"struct"},"17:13540:49311":{"crate_id":17,"path":["object","pe","ImageResourceDirectoryString"],"kind":"struct"},"17:10041:43337":{"crate_id":17,"path":["object","read","archive","ArchiveMemberIterator"],"kind":"struct"},"1:14341:50052":{"crate_id":1,"path":["std","sys","unix","fs","FileAttr"],"kind":"struct"},"16:7303:3640":{"crate_id":16,"path":["gimli","read","rnglists","RawRngListEntry"],"kind":"enum"},"16:6518:3620":{"crate_id":16,"path":["gimli","read","line","FileEntry"],"kind":"struct"},"2:22422:55380":{"crate_id":2,"path":["core","core_simd","swizzle","interleave","Hi"],"kind":"struct"},"1:11470:2098":{"crate_id":1,"path":["std","path","Components"],"kind":"struct"},"17:12168:48144":{"crate_id":17,"path":["object","macho","Dylib"],"kind":"struct"},"6:4439:39455":{"crate_id":6,"path":["libc","unix","linux_like","linux","dirent"],"kind":"struct"},"5:8133:1996":{"crate_id":5,"path":["alloc","collections","btree","set","IntoIter"],"kind":"struct"},"2:22640:1833":{"crate_id":2,"path":["core","core_simd","lane_count","sealed","Sealed"],"kind":"trait"},"1:2723:1845":{"crate_id":1,"path":["std","error","Report"],"kind":"struct"},"1:9743:6799":{"crate_id":1,"path":["std","sys_common","thread_local_key","Key"],"kind":"struct"},"2:53153:17663":{"crate_id":2,"path":["core","core_arch","x86","__m512i"],"kind":"struct"},"17:13620:49325":{"crate_id":17,"path":["object","pe","ImagePrologueDynamicRelocationHeader"],"kind":"struct"},"5:4427:1994":{"crate_id":5,"path":["alloc","collections","vec_deque","iter","Iter"],"kind":"struct"},"2:46170:2966":{"crate_id":2,"path":["core","ffi","c_str","FromBytesWithNulError"],"kind":"struct"},"1:11166:2272":{"crate_id":1,"path":["std","net","tcp","Incoming"],"kind":"struct"},"2:46287:1844":{"crate_id":2,"path":["core","iter","adapters","chain","Chain"],"kind":"struct"},"1:10474:2211":{"crate_id":1,"path":["std","thread","ThreadId"],"kind":"struct"},"18:620:59555":{"crate_id":18,"path":["memchr","cow","Imp"],"kind":"struct"},"2:3299:2509":{"crate_id":2,"path":["core","ops","bit","Not"],"kind":"trait"},"5:5520:3098":{"crate_id":5,"path":["alloc","rc","Weak"],"kind":"struct"},"6:531:36414":{"crate_id":6,"path":["libc","unix","timespec"],"kind":"struct"},"16:7823:3577":{"crate_id":16,"path":["gimli","read","unit","EntriesTree"],"kind":"struct"},"5:8335:56869":{"crate_id":5,"path":["alloc","slice","merge_sort","Run"],"kind":"struct"},"1:12547:124":{"crate_id":1,"path":["std","sys","unix","fs","File"],"kind":"struct"},"17:9332:3894":{"crate_id":17,"path":["object","endian","U32Bytes"],"kind":"struct"},"17:13978:49416":{"crate_id":17,"path":["object","pe","ImageArchitectureEntry"],"kind":"struct"},"2:22420:55377":{"crate_id":2,"path":["core","core_simd","swizzle","interleave","Lo"],"kind":"struct"},"6:4033:39411":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_mask"],"kind":"struct"},"17:12917:48710":{"crate_id":17,"path":["object","pe","ImageDosHeader"],"kind":"struct"},"17:14000:49452":{"crate_id":17,"path":["object","pe","ImageCor20Header"],"kind":"struct"},"2:4791:2786":{"crate_id":2,"path":["core","cell","lazy","LazyCell"],"kind":"struct"},"17:10435:43394":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdatSectionIterator"],"kind":"struct"},"6:4517:39463":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_can_addr"],"kind":"union"},"12:2025:2038":{"crate_id":12,"path":["hashbrown","set","Intersection"],"kind":"struct"},"6:5210:40053":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","msghdr"],"kind":"struct"},"5:1224:3207":{"crate_id":5,"path":["alloc","collections","btree","dedup_sorted_iter","DedupSortedIter"],"kind":"struct"},"1:11265:1824":{"crate_id":1,"path":["std","os","linux","process","PidFd"],"kind":"struct"},"1:15235:3408":{"crate_id":1,"path":["std","backtrace_rs","backtrace","Frame"],"kind":"struct"},"16:5472:3464":{"crate_id":16,"path":["gimli","read","cfi","BaseAddresses"],"kind":"struct"},"2:48960:2853":{"crate_id":2,"path":["core","slice","iter","ChunksMut"],"kind":"struct"},"16:7549:3574":{"crate_id":16,"path":["gimli","read","unit","DebuggingInformationEntry"],"kind":"struct"},"6:4425:39453":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlattr"],"kind":"struct"},"2:46399:2617":{"crate_id":2,"path":["core","iter","adapters","map","Map"],"kind":"struct"},"17:9210:43271":{"crate_id":17,"path":["object","common","SymbolFlags"],"kind":"enum"},"2:45619:184":{"crate_id":2,"path":["core","ops","range","RangeTo"],"kind":"struct"},"2:49746:2383":{"crate_id":2,"path":["core","str","pattern","TwoWaySearcher"],"kind":"struct"},"18:829:3931":{"crate_id":18,"path":["memchr","memmem","FinderBuilder"],"kind":"struct"},"17:11604:43978":{"crate_id":17,"path":["object","elf","Syminfo32"],"kind":"struct"},"2:11009:2841":{"crate_id":2,"path":["core","slice","iter","SplitInclusive"],"kind":"struct"},"6:6812:40999":{"crate_id":6,"path":["libc","unix","linux_like","linux","arch","generic","termios2"],"kind":"struct"},"6:0:776":{"crate_id":6,"path":["libc"],"kind":"module"},"15:230:3399":{"crate_id":15,"path":["addr2line","LocationRangeIter"],"kind":"struct"},"6:3972:39251":{"crate_id":6,"path":["libc","unix","linux_like","linux","if_nameindex"],"kind":"struct"},"1:15758:1713":{"crate_id":1,"path":["std","u8"],"kind":"primitive"},"5:772:207":{"crate_id":5,"path":["alloc","borrow","ToOwned"],"kind":"trait"},"1:10259:52083":{"crate_id":1,"path":["std","backtrace_rs","symbolize","SymbolName"],"kind":"struct"},"1:6227:2290":{"crate_id":1,"path":["std","os","unix","net","stream","UnixStream"],"kind":"struct"},"6:6028:37263":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stat64"],"kind":"struct"},"1:10579:3215":{"crate_id":1,"path":["std","error","private","Internal"],"kind":"struct"},"2:10917:1994":{"crate_id":2,"path":["core","slice","iter","Iter"],"kind":"struct"},"5:4499:3185":{"crate_id":5,"path":["alloc","collections","vec_deque","pair_slices","PairSlices"],"kind":"struct"},"6:5269:40056":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_pktinfo"],"kind":"struct"},"17:12234:48149":{"crate_id":17,"path":["object","macho","SubLibraryCommand"],"kind":"struct"},"12:968:2067":{"crate_id":12,"path":["hashbrown","map","RawVacantEntryMut"],"kind":"struct"},"1:1493:2062":{"crate_id":1,"path":["std","collections","hash","map","IntoKeys"],"kind":"struct"},"1:1633:2070":{"crate_id":1,"path":["std","collections","hash","map","OccupiedEntry"],"kind":"struct"},"17:10353:3844":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbolTable"],"kind":"struct"},"2:3972:2547":{"crate_id":2,"path":["core","any","Demand"],"kind":"struct"},"1:15746:1703":{"crate_id":1,"path":["std","slice"],"kind":"primitive"},"1:11269:10261":{"crate_id":1,"path":["std","os","linux","raw","arch","stat"],"kind":"struct"},"16:3939:41810":{"crate_id":16,"path":["gimli","constants","DwTag"],"kind":"struct"},"16:6644:3624":{"crate_id":16,"path":["gimli","read","loclists","RawLocListEntry"],"kind":"enum"},"2:32056:2987":{"crate_id":2,"path":["core","mem","valid_align","ValidAlign"],"kind":"struct"},"2:3431:128":{"crate_id":2,"path":["core","ops","function","FnOnce"],"kind":"trait"},"17:11847:44214":{"crate_id":17,"path":["object","elf","GnuHashHeader"],"kind":"struct"},"2:23729:35309":{"crate_id":2,"path":["core","num","dec2flt","common","AsciiStr"],"kind":"struct"},"1:15754:1709":{"crate_id":1,"path":["std","i16"],"kind":"primitive"},"17:9719:43277":{"crate_id":17,"path":["object","read","any","SectionIterator"],"kind":"struct"},"2:47250:1996":{"crate_id":2,"path":["core","option","IntoIter"],"kind":"struct"},"1:10448:2181":{"crate_id":1,"path":["std","thread","local","AccessError"],"kind":"struct"},"1:15765:1720":{"crate_id":1,"path":["std","reference"],"kind":"primitive"},"2:50973:2689":{"crate_id":2,"path":["core","core_arch","simd","i8x8"],"kind":"struct"},"2:49200:2874":{"crate_id":2,"path":["core","str","iter","SplitTerminator"],"kind":"struct"},"2:3076:75":{"crate_id":2,"path":["core","convert","AsRef"],"kind":"trait"},"2:46309:2628":{"crate_id":2,"path":["core","iter","adapters","copied","Copied"],"kind":"struct"},"2:10728:1833":{"crate_id":2,"path":["core","slice","index","private_slice_index","Sealed"],"kind":"trait"},"9:809:2095":{"crate_id":9,"path":["miniz_oxide","inflate","core","State"],"kind":"enum"},"2:11242:2850":{"crate_id":2,"path":["core","slice","iter","RSplitNMut"],"kind":"struct"},"1:5990:2280":{"crate_id":1,"path":["std","os","unix","net","datagram","UnixDatagram"],"kind":"struct"},"17:11458:43691":{"crate_id":17,"path":["object","elf","FileHeader64"],"kind":"struct"},"2:51234:2705":{"crate_id":2,"path":["core","core_arch","simd","u64x2"],"kind":"struct"},"1:10821:2152":{"crate_id":1,"path":["std","io","error","Custom"],"kind":"struct"},"2:46040:3054":{"crate_id":2,"path":["core","char","decode","DecodeUtf16"],"kind":"struct"},"13:120:41521":{"crate_id":13,"path":["std_detect","detect","arch","x86","Feature"],"kind":"enum"},"1:15220:50054":{"crate_id":1,"path":["std","panicking","Hook"],"kind":"enum"},"5:7615:3141":{"crate_id":5,"path":["alloc","vec","in_place_drop","InPlaceDrop"],"kind":"struct"},"1:9349:54716":{"crate_id":1,"path":["std","sys_common","backtrace","_print","DisplayBacktrace"],"kind":"struct"},"17:12307:48154":{"crate_id":17,"path":["object","macho","RoutinesCommand64"],"kind":"struct"},"11:54:3367":{"crate_id":11,"path":["adler","Adler32"],"kind":"struct"},"6:1584:37305":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_ll"],"kind":"struct"},"6:6870:39589":{"crate_id":6,"path":["libc","unix","linux_like","linux","fanotify_event_metadata"],"kind":"struct"},"12:774:1996":{"crate_id":12,"path":["hashbrown","map","IntoIter"],"kind":"struct"},"2:55833:221":{"crate_id":2,"path":["core","core_simd","fmt","fmt","Wrapper"],"kind":"struct"},"2:3179:196":{"crate_id":2,"path":["core","marker","Send"],"kind":"trait"},"17:9476:43275":{"crate_id":17,"path":["object","endian","I64Bytes"],"kind":"struct"},"1:11177:2274":{"crate_id":1,"path":["std","net","Shutdown"],"kind":"enum"},"17:13377:48949":{"crate_id":17,"path":["object","pe","ImageRelocation"],"kind":"struct"},"1:14814:49982":{"crate_id":1,"path":["std","sys","unix","time","Timespec"],"kind":"struct"},"2:3085:131":{"crate_id":2,"path":["core","convert","From"],"kind":"trait"},"16:7216:3636":{"crate_id":16,"path":["gimli","read","pubtypes","DebugPubTypes"],"kind":"struct"},"2:51004:2677":{"crate_id":2,"path":["core","core_arch","simd","i16x4"],"kind":"struct"},"17:13637:49327":{"crate_id":17,"path":["object","pe","ImageLoadConfigDirectory32"],"kind":"struct"},"16:3429:3495":{"crate_id":16,"path":["gimli","common","SectionId"],"kind":"enum"},"17:10788:43468":{"crate_id":17,"path":["object","read","macho","segment","MachOSegmentIterator"],"kind":"struct"},"2:32062:55159":{"crate_id":2,"path":["core","mem","valid_align","ValidAlignEnum16"],"kind":"enum"},"17:9528:1897":{"crate_id":17,"path":["object","read","util","Bytes"],"kind":"struct"},"17:11254:3826":{"crate_id":17,"path":["object","read","Export"],"kind":"struct"},"1:783:6799":{"crate_id":1,"path":["std","thread","local","fast","Key"],"kind":"struct"},"2:52880:2704":{"crate_id":2,"path":["core","core_arch","simd","u32x16"],"kind":"struct"},"17:11726:44076":{"crate_id":17,"path":["object","elf","Dyn64"],"kind":"struct"},"2:3664:2540":{"crate_id":2,"path":["core","ops","try_trait","NeverShortCircuitResidual"],"kind":"enum"},"16:7571:3562":{"crate_id":16,"path":["gimli","read","unit","AttributeValue"],"kind":"enum"},"6:1596:37306":{"crate_id":6,"path":["libc","unix","linux_like","fd_set"],"kind":"struct"},"5:4612:220":{"crate_id":5,"path":["alloc","collections","vec_deque","VecDeque"],"kind":"struct"},"6:6106:40471":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_fpstate"],"kind":"struct"},"2:52060:2683":{"crate_id":2,"path":["core","core_arch","simd","i32x8"],"kind":"struct"},"5:8419:2037":{"crate_id":5,"path":["alloc","vec","drain_filter","DrainFilter"],"kind":"struct"},"2:46009:2780":{"crate_id":2,"path":["core","char","convert","CharErrorKind"],"kind":"enum"},"5:6670:3111":{"crate_id":5,"path":["alloc","sync","ArcInner"],"kind":"struct"},"5:8236:2077":{"crate_id":5,"path":["alloc","collections","TryReserveErrorKind"],"kind":"enum"},"1:15764:1719":{"crate_id":1,"path":["std","usize"],"kind":"primitive"},"2:4827:2787":{"crate_id":2,"path":["core","cell","once","OnceCell"],"kind":"struct"},"1:11109:49991":{"crate_id":1,"path":["std","net","ip","fmt","Span"],"kind":"struct"},"6:1690:37314":{"crate_id":6,"path":["libc","unix","linux_like","arpreq"],"kind":"struct"},"16:7804:3575":{"crate_id":16,"path":["gimli","read","unit","EntriesCursor"],"kind":"struct"},"1:3249:2235":{"crate_id":1,"path":["std","fs","read_link"],"kind":"function"},"6:4341:39442":{"crate_id":6,"path":["libc","unix","linux_like","linux","regmatch_t"],"kind":"struct"},"2:47665:80":{"crate_id":2,"path":["core","sync","atomic","AtomicI64"],"kind":"struct"},"1:8951:2121":{"crate_id":1,"path":["std","sync","poison","TryLockError"],"kind":"enum"},"2:47970:2413":{"crate_id":2,"path":["core","fmt","num","UpperHex"],"kind":"struct"},"1:11850:2132":{"crate_id":1,"path":["std","process","ExitStatusError"],"kind":"struct"},"5:5857:56470":{"crate_id":5,"path":["alloc","slice","insert_head","InsertionHole"],"kind":"struct"},"1:14864:49985":{"crate_id":1,"path":["std","sys_common","process","CommandEnv"],"kind":"struct"},"2:46686:30862":{"crate_id":2,"path":["core","iter","sources","once_with","OnceWith"],"kind":"struct"},"1:13758:2130":{"crate_id":1,"path":["std","sys","unix","process","process_common","Stdio"],"kind":"enum"},"1:7337:171":{"crate_id":1,"path":["std","path","Path"],"kind":"struct"},"16:4350:42146":{"crate_id":16,"path":["gimli","constants","DwAte"],"kind":"struct"},"16:6087:3563":{"crate_id":16,"path":["gimli","read","abbrev","DebugAbbrev"],"kind":"struct"},"16:7786:3576":{"crate_id":16,"path":["gimli","read","unit","EntriesRaw"],"kind":"struct"},"9:1056:3306":{"crate_id":9,"path":["miniz_oxide","DataFormat"],"kind":"enum"},"1:696:2180":{"crate_id":1,"path":["std","thread","local","LocalKey"],"kind":"struct"},"2:46165:97":{"crate_id":2,"path":["core","ffi","c_str","CStr"],"kind":"struct"},"2:49458:1982":{"crate_id":2,"path":["core","str","iter","EscapeDefault"],"kind":"struct"},"6:616:36424":{"crate_id":6,"path":["libc","unix","tms"],"kind":"struct"},"5:8303:3172":{"crate_id":5,"path":["alloc","ffi","c_str","FromVecWithNulError"],"kind":"struct"},"6:6091:40469":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_fpxreg"],"kind":"struct"},"1:14043:1916":{"crate_id":1,"path":["std","sys","unix","stdio","Stderr"],"kind":"struct"},"1:14326:1834":{"crate_id":1,"path":["std","sys","unix","fd","FileDesc"],"kind":"struct"},"1:6767:1827":{"crate_id":1,"path":["std","os","fd","raw","AsRawFd"],"kind":"trait"},"17:12373:48159":{"crate_id":17,"path":["object","macho","DylibTableOfContents"],"kind":"struct"},"16:5815:3483":{"crate_id":16,"path":["gimli","read","cfi","RegisterRule"],"kind":"enum"},"17:12598:48174":{"crate_id":17,"path":["object","macho","BuildToolVersion"],"kind":"struct"},"16:3018:3739":{"crate_id":16,"path":["gimli","common","DebugLocListsBase"],"kind":"struct"},"6:1665:37312":{"crate_id":6,"path":["libc","unix","linux_like","ifaddrs"],"kind":"struct"},"16:5433:3460":{"crate_id":16,"path":["gimli","read","cfi","EhFrame"],"kind":"struct"},"16:2816:3754":{"crate_id":16,"path":["gimli","common","DebugAbbrevOffset"],"kind":"struct"},"2:4689:2442":{"crate_id":2,"path":["core","async_iter","async_iter","AsyncIterator"],"kind":"trait"},"16:2773:3761":{"crate_id":16,"path":["gimli","common","LineEncoding"],"kind":"struct"},"16:7360:180":{"crate_id":16,"path":["gimli","read","rnglists","Range"],"kind":"struct"},"1:2177:2039":{"crate_id":1,"path":["std","collections","hash","set","Difference"],"kind":"struct"},"1:5561:1943":{"crate_id":1,"path":["std","os","unix","ffi","os_str","OsStrExt"],"kind":"trait"},"2:49041:2859":{"crate_id":2,"path":["core","slice","iter","RChunks"],"kind":"struct"},"6:5185:40050":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__exit_status"],"kind":"struct"},"1:7403:115":{"crate_id":1,"path":["std","path","Display"],"kind":"struct"},"5:8149:3091":{"crate_id":5,"path":["alloc","collections","btree","set_val","SetValZST"],"kind":"struct"},"1:5406:2278":{"crate_id":1,"path":["std","net","udp","UdpSocket"],"kind":"struct"},"2:49582:2376":{"crate_id":2,"path":["core","str","pattern","CharArraySearcher"],"kind":"struct"},"1:12069:2169":{"crate_id":1,"path":["std","sync","rwlock","RwLockWriteGuard"],"kind":"struct"},"5:8094:3166":{"crate_id":5,"path":["alloc","collections","binary_heap","IntoIterSorted"],"kind":"struct"},"1:2433:7932":{"crate_id":1,"path":["std","env","SplitPaths"],"kind":"struct"},"17:13532:49310":{"crate_id":17,"path":["object","pe","ImageResourceDirectoryEntry"],"kind":"struct"},"2:7636:2492":{"crate_id":2,"path":["core","iter","adapters","zip","TrustedRandomAccessNoCoerce"],"kind":"trait"},"1:1497:2063":{"crate_id":1,"path":["std","collections","hash","map","IntoValues"],"kind":"struct"},"5:6457:2036":{"crate_id":5,"path":["alloc","string","Drain"],"kind":"struct"},"2:4936:2183":{"crate_id":2,"path":["core","cell","RefCell"],"kind":"struct"},"16:5314:41646":{"crate_id":16,"path":["gimli","endianity","LittleEndian"],"kind":"struct"},"17:12010:47974":{"crate_id":17,"path":["object","macho","MachHeader64"],"kind":"struct"},"16:2754:3493":{"crate_id":16,"path":["gimli","common","Encoding"],"kind":"struct"},"5:5821:3078":{"crate_id":5,"path":["alloc","slice","Join"],"kind":"trait"},"2:48252:123":{"crate_id":2,"path":["core","fmt","Error"],"kind":"struct"},"10:0:1673":{"crate_id":10,"path":["rustc_std_workspace_alloc"],"kind":"module"},"1:4621:1895":{"crate_id":1,"path":["std","io","BufRead"],"kind":"trait"},"2:49414:2883":{"crate_id":2,"path":["core","str","iter","LinesAny"],"kind":"struct"},"2:8767:2646":{"crate_id":2,"path":["core","iter","traits","marker","TrustedStep"],"kind":"trait"},"1:5889:2344":{"crate_id":1,"path":["std","os","unix","net","ancillary","Messages"],"kind":"struct"},"6:5274:40057":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_mmap_req"],"kind":"struct"},"6:6910:39594":{"crate_id":6,"path":["libc","unix","linux_like","linux","canfd_frame"],"kind":"struct"},"12:1667:3391":{"crate_id":12,"path":["hashbrown","rustc_entry","RustcOccupiedEntry"],"kind":"struct"},"16:6554:3621":{"crate_id":16,"path":["gimli","read","line","FileEntryFormat"],"kind":"struct"},"1:11497:2101":{"crate_id":1,"path":["std","path","StripPrefixError"],"kind":"struct"},"1:5649:1861":{"crate_id":1,"path":["std","os","unix","fs","MetadataExt"],"kind":"trait"},"1:14411:50317":{"crate_id":1,"path":["std","sys","unix","kernel_copy","SpliceMode"],"kind":"enum"},"1:6107:2289":{"crate_id":1,"path":["std","os","unix","net","listener","UnixListener"],"kind":"struct"},"2:48486:2078":{"crate_id":2,"path":["core","hash","sip","SipHasher13"],"kind":"struct"},"1:11291:1828":{"crate_id":1,"path":["std","os","fd","owned","BorrowedFd"],"kind":"struct"},"6:4262:39433":{"crate_id":6,"path":["libc","unix","linux_like","linux","mntent"],"kind":"struct"},"12:2303:58659":{"crate_id":12,"path":["hashbrown","raw","sse2","Group"],"kind":"struct"},"16:5407:3458":{"crate_id":16,"path":["gimli","read","cfi","ParsedEhFrameHdr"],"kind":"struct"},"2:3257:2472":{"crate_id":2,"path":["core","ops","arith","Mul"],"kind":"trait"},"2:51085:55140":{"crate_id":2,"path":["core","core_arch","simd","f64x1"],"kind":"struct"},"6:4095:39419":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_rumble_effect"],"kind":"struct"},"17:10635:43466":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandIterator"],"kind":"struct"},"5:3935:2037":{"crate_id":5,"path":["alloc","collections","linked_list","DrainFilter"],"kind":"struct"},"2:47311:174":{"crate_id":2,"path":["core","pin","Pin"],"kind":"struct"},"17:13799:49369":{"crate_id":17,"path":["object","pe","ImageAlphaRuntimeFunctionEntry"],"kind":"struct"},"16:2912:3737":{"crate_id":16,"path":["gimli","common","DebugInfoOffset"],"kind":"struct"},"11:0:1674":{"crate_id":11,"path":["adler"],"kind":"module"},"2:12837:2365":{"crate_id":2,"path":["core","str","pattern"],"kind":"module"},"12:2331:2030":{"crate_id":12,"path":["hashbrown","TryReserveError"],"kind":"enum"},"6:6923:41025":{"crate_id":6,"path":["libc","unix","linux_like","linux","non_exhaustive","open_how"],"kind":"struct"},"17:10117:3909":{"crate_id":17,"path":["object","read","coff","section","CoffSectionIterator"],"kind":"struct"},"1:12094:2172":{"crate_id":1,"path":["std","time","SystemTime"],"kind":"struct"},"2:10966:1899":{"crate_id":2,"path":["core","slice","iter","Split"],"kind":"struct"},"16:3172:3741":{"crate_id":16,"path":["gimli","common","DebugRngListsBase"],"kind":"struct"},"17:10061:43354":{"crate_id":17,"path":["object","read","coff","file","CoffCommon"],"kind":"struct"},"2:23394:1971":{"crate_id":2,"path":["core","core_simd","vector","Simd"],"kind":"struct"},"5:1678:3204":{"crate_id":5,"path":["alloc","collections","btree","map","RangeMut"],"kind":"struct"},"16:2945:3760":{"crate_id":16,"path":["gimli","common","DebugLineOffset"],"kind":"struct"},"2:46278:2624":{"crate_id":2,"path":["core","iter","adapters","by_ref_sized","ByRefSized"],"kind":"struct"},"1:5635:1859":{"crate_id":1,"path":["std","os","unix","fs","PermissionsExt"],"kind":"trait"},"1:5643:1860":{"crate_id":1,"path":["std","os","unix","fs","OpenOptionsExt"],"kind":"trait"},"16:6780:3626":{"crate_id":16,"path":["gimli","read","op","DieReference"],"kind":"enum"},"2:2867:163":{"crate_id":2,"path":["core","cmp","Ord"],"kind":"trait"},"2:10134:2413":{"crate_id":2,"path":["core","fmt","UpperHex"],"kind":"trait"},"1:1619:2069":{"crate_id":1,"path":["std","collections","hash","map","Entry"],"kind":"enum"},"1:1190:6916":{"crate_id":1,"path":["std","backtrace","LazilyResolvedCapture"],"kind":"struct"},"5:7822:56462":{"crate_id":5,"path":["alloc","vec","dedup_by","FillGapOnDrop"],"kind":"struct"},"16:7894:3601":{"crate_id":16,"path":["gimli","read","value","ValueType"],"kind":"enum"},"17:11337:3895":{"crate_id":17,"path":["object","read","CompressionFormat"],"kind":"enum"},"2:3345:2508":{"crate_id":2,"path":["core","ops","bit","ShlAssign"],"kind":"trait"},"18:650:3937":{"crate_id":18,"path":["memchr","memmem","prefilter","Prefilter"],"kind":"enum"},"1:15246:3408":{"crate_id":1,"path":["std","backtrace_rs","backtrace","libunwind","Frame"],"kind":"enum"},"6:4325:39440":{"crate_id":6,"path":["libc","unix","linux_like","linux","fanotify_response"],"kind":"struct"},"16:4448:42169":{"crate_id":16,"path":["gimli","constants","DwEnd"],"kind":"struct"},"2:51432:2670":{"crate_id":2,"path":["core","core_arch","simd","f64x2"],"kind":"struct"},"5:8286:2967":{"crate_id":5,"path":["alloc","ffi","c_str","FromBytesWithNulErrorKind"],"kind":"enum"},"17:10160:43353":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbolTable"],"kind":"struct"},"1:15211:26246":{"crate_id":1,"path":["std","alloc","System"],"kind":"struct"},"2:46150:2784":{"crate_id":2,"path":["core","char","TryFromCharError"],"kind":"struct"},"6:5241:40034":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","mallinfo"],"kind":"struct"},"1:9653:50286":{"crate_id":1,"path":["std","sys_common","rwlock","StaticRwLockWriteGuard"],"kind":"struct"},"6:569:36418":{"crate_id":6,"path":["libc","unix","hostent"],"kind":"struct"},"2:46448:2621":{"crate_id":2,"path":["core","iter","adapters","skip","Skip"],"kind":"struct"},"2:46417:2618":{"crate_id":2,"path":["core","iter","adapters","peekable","Peekable"],"kind":"struct"},"16:7884:3573":{"crate_id":16,"path":["gimli","read","unit","DebugTypesUnitHeadersIter"],"kind":"struct"},"2:10383:2586":{"crate_id":2,"path":["core","hash","BuildHasherDefault"],"kind":"struct"},"1:15755:1710":{"crate_id":1,"path":["std","i32"],"kind":"primitive"},"2:49442:2886":{"crate_id":2,"path":["core","str","iter","EncodeUtf16"],"kind":"struct"},"1:11172:2273":{"crate_id":1,"path":["std","net","tcp","IntoIncoming"],"kind":"struct"},"2:51180:2698":{"crate_id":2,"path":["core","core_arch","simd","u16x8"],"kind":"struct"},"17:12568:48172":{"crate_id":17,"path":["object","macho","VersionMinCommand"],"kind":"struct"},"17:9799:43279":{"crate_id":17,"path":["object","read","any","ComdatSectionIterator"],"kind":"struct"},"2:50032:187":{"crate_id":2,"path":["core","future","ready","Ready"],"kind":"struct"},"2:48951:2852":{"crate_id":2,"path":["core","slice","iter","Chunks"],"kind":"struct"},"16:2991:3749":{"crate_id":16,"path":["gimli","common","LocationListsOffset"],"kind":"struct"},"2:5486:1547":{"crate_id":2,"path":["core","ffi","c_void"],"kind":"enum"},"2:13852:2444":{"crate_id":2,"path":["core","task","wake","Context"],"kind":"struct"},"2:8044:56394":{"crate_id":2,"path":["core","iter","sources","from_generator","FromGenerator"],"kind":"struct"},"17:2484:43383":{"crate_id":17,"path":["object","read","elf","relocation","ElfRelaIterator"],"kind":"enum"},"16:7042:3784":{"crate_id":16,"path":["gimli","read","op","EvaluationWaiting"],"kind":"enum"},"1:8861:2156":{"crate_id":1,"path":["std","sync","once_lock","OnceLock"],"kind":"struct"},"17:10468:3898":{"crate_id":17,"path":["object","read","elf","hash","HashTable"],"kind":"struct"},"1:5683:1862":{"crate_id":1,"path":["std","os","unix","fs","FileTypeExt"],"kind":"trait"},"1:4557:1890":{"crate_id":1,"path":["std","io","IoSliceMut"],"kind":"struct"},"17:13272:48866":{"crate_id":17,"path":["object","pe","ImageSymbolBytes"],"kind":"struct"},"16:7264:3581":{"crate_id":16,"path":["gimli","read","rnglists","RangeLists"],"kind":"struct"},"2:4:958":{"crate_id":2,"path":["core","panic"],"kind":"macro"},"5:4627:56446":{"crate_id":5,"path":["alloc","collections","vec_deque","drop","Dropper"],"kind":"struct"},"2:48326:73":{"crate_id":2,"path":["core","fmt","Arguments"],"kind":"struct"},"1:15763:1718":{"crate_id":1,"path":["std","isize"],"kind":"primitive"},"2:52484:2712":{"crate_id":2,"path":["core","core_arch","simd","u8x64"],"kind":"struct"},"17:13912:49407":{"crate_id":17,"path":["object","pe","ImageDebugMisc"],"kind":"struct"},"2:46489:2623":{"crate_id":2,"path":["core","iter","adapters","take_while","TakeWhile"],"kind":"struct"},"6:5436:58531":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","sifields_sigchld"],"kind":"struct"},"5:8103:2036":{"crate_id":5,"path":["alloc","collections","binary_heap","Drain"],"kind":"struct"},"16:5975:3606":{"crate_id":16,"path":["gimli","read","dwarf","Dwarf"],"kind":"struct"},"1:11999:2002":{"crate_id":1,"path":["std","sync","mpsc","RecvTimeoutError"],"kind":"enum"},"6:670:36455":{"crate_id":6,"path":["libc","unix","linux_like","timezone"],"kind":"enum"},"1:15760:1715":{"crate_id":1,"path":["std","u32"],"kind":"primitive"},"1:10816:2151":{"crate_id":1,"path":["std","io","error","SimpleMessage"],"kind":"struct"},"16:4230:42076":{"crate_id":16,"path":["gimli","constants","DwAt"],"kind":"struct"},"1:8796:2160":{"crate_id":1,"path":["std","sync","once","Once"],"kind":"struct"},"2:47791:89":{"crate_id":2,"path":["core","sync","atomic","AtomicUsize"],"kind":"struct"},"16:6807:3627":{"crate_id":16,"path":["gimli","read","op","Operation"],"kind":"enum"},"1:11944:1996":{"crate_id":1,"path":["std","sync","mpsc","IntoIter"],"kind":"struct"},"2:11744:2864":{"crate_id":2,"path":["core","slice","iter","GroupByMut"],"kind":"struct"},"17:10656:43481":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandData"],"kind":"struct"},"2:12594:2880":{"crate_id":2,"path":["core","str","iter","MatchesInternal"],"kind":"struct"},"6:4317:39439":{"crate_id":6,"path":["libc","unix","linux_like","linux","inotify_event"],"kind":"struct"},"2:32114:55132":{"crate_id":2,"path":["core","mem","valid_align","ValidAlignEnum32"],"kind":"enum"},"5:1619:2059":{"crate_id":5,"path":["alloc","collections","btree","map","Keys"],"kind":"struct"},"16:0:1678":{"crate_id":16,"path":["gimli"],"kind":"module"},"1:7228:172":{"crate_id":1,"path":["std","path","PathBuf"],"kind":"struct"},"2:32050:2157":{"crate_id":2,"path":["core","mem","maybe_uninit","MaybeUninit"],"kind":"union"},"1:1157:6915":{"crate_id":1,"path":["std","backtrace","BytesOrWide"],"kind":"enum"},"1:2395:7920":{"crate_id":1,"path":["std","env","Vars"],"kind":"struct"},"5:3954:56425":{"crate_id":5,"path":["alloc","collections","linked_list","drop","DropGuard"],"kind":"struct"},"17:10584:3875":{"crate_id":17,"path":["object","read","macho","file","MachOFile"],"kind":"struct"},"2:10126:115":{"crate_id":2,"path":["core","fmt","Display"],"kind":"trait"},"1:8298:3196":{"crate_id":1,"path":["std","sync","mpsc","sync","Node"],"kind":"struct"},"2:3082:145":{"crate_id":2,"path":["core","convert","Into"],"kind":"trait"},"16:7333:3584":{"crate_id":16,"path":["gimli","read","rnglists","RngListIter"],"kind":"struct"},"2:45749:2566":{"crate_id":2,"path":["core","any","tags","Value"],"kind":"struct"},"16:2889:3755":{"crate_id":16,"path":["gimli","common","DebugArangesOffset"],"kind":"struct"},"17:11406:43682":{"crate_id":17,"path":["object","archive","Header"],"kind":"struct"},"14:11:41566":{"crate_id":14,"path":["rustc_demangle","legacy","Demangle"],"kind":"struct"},"16:7843:3643":{"crate_id":16,"path":["gimli","read","unit","EntriesTreeNode"],"kind":"struct"},"6:624:36425":{"crate_id":6,"path":["libc","unix","servent"],"kind":"struct"},"1:10738:1909":{"crate_id":1,"path":["std","io","buffered","IntoInnerError"],"kind":"struct"},"17:4157:3876":{"crate_id":17,"path":["object","read","macho","relocation","MachORelocationIterator"],"kind":"struct"},"2:51211:2702":{"crate_id":2,"path":["core","core_arch","simd","u32x4"],"kind":"struct"},"6:5221:40054":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","cmsghdr"],"kind":"struct"},"17:13733:49329":{"crate_id":17,"path":["object","pe","ImageHotPatchInfo"],"kind":"struct"},"17:11714:44075":{"crate_id":17,"path":["object","elf","Dyn32"],"kind":"struct"},"1:6367:1949":{"crate_id":1,"path":["std","os","unix","process","ExitStatusExt"],"kind":"trait"},"5:5399:1881":{"crate_id":5,"path":["alloc","rc","from_iter_exact","Guard"],"kind":"struct"},"2:9806:2828":{"crate_id":2,"path":["core","fmt","builders","PadAdapterState"],"kind":"struct"},"17:11082:3830":{"crate_id":17,"path":["object","read","SectionIndex"],"kind":"struct"},"1:4605:54640":{"crate_id":1,"path":["std","io","Write","write_fmt","Adapter"],"kind":"struct"},"1:3563:1903":{"crate_id":1,"path":["std","io","buffered","bufwriter","WriterPanicked"],"kind":"struct"},"1:10690:1872":{"crate_id":1,"path":["std","fs","Permissions"],"kind":"struct"},"2:7550:2493":{"crate_id":2,"path":["core","iter","adapters","zip","zip"],"kind":"function"},"6:537:36415":{"crate_id":6,"path":["libc","unix","rlimit"],"kind":"struct"},"6:6155:40473":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user"],"kind":"struct"},"1:12554:2225":{"crate_id":1,"path":["std","sys","unix","fs","ReadDir"],"kind":"struct"},"18:667:3942":{"crate_id":18,"path":["memchr","memmem","rabinkarp","NeedleHash"],"kind":"struct"},"1:5838:2338":{"crate_id":1,"path":["std","os","unix","net","ancillary","AncillaryDataIter"],"kind":"struct"},"2:8763:2504":{"crate_id":2,"path":["core","iter","traits","marker","TrustedLen"],"kind":"trait"},"2:47302:35585":{"crate_id":2,"path":["core","panicking","AssertKind"],"kind":"enum"},"2:37348:2552":{"crate_id":2,"path":["core","cmp","Reverse"],"kind":"struct"},"1:15748:1705":{"crate_id":1,"path":["std","tuple"],"kind":"primitive"},"2:11159:2845":{"crate_id":2,"path":["core","slice","iter","RSplitMut"],"kind":"struct"},"17:10827:3868":{"crate_id":17,"path":["object","read","macho","section","MachOSectionInternal"],"kind":"struct"},"2:45981:1982":{"crate_id":2,"path":["core","ascii","EscapeDefault"],"kind":"struct"},"1:900:2186":{"crate_id":1,"path":["std","thread","scoped","ScopedJoinHandle"],"kind":"struct"},"9:749:3248":{"crate_id":9,"path":["miniz_oxide","deflate","core","TDEFLStatus"],"kind":"enum"},"1:11835:2131":{"crate_id":1,"path":["std","process","ExitStatus"],"kind":"struct"},"17:13520:49307":{"crate_id":17,"path":["object","pe","ImageResourceDirectory"],"kind":"struct"},"2:3278:2176":{"crate_id":2,"path":["core","ops","arith","AddAssign"],"kind":"trait"},"1:5868:2341":{"crate_id":1,"path":["std","os","unix","net","ancillary","ScmCredentials"],"kind":"struct"},"2:11121:2844":{"crate_id":2,"path":["core","slice","iter","RSplit"],"kind":"struct"},"12:784:2062":{"crate_id":12,"path":["hashbrown","map","IntoKeys"],"kind":"struct"},"12:840:2059":{"crate_id":12,"path":["hashbrown","map","Keys"],"kind":"struct"},"1:10826:1912":{"crate_id":1,"path":["std","io","error","ErrorKind"],"kind":"enum"},"5:3313:1994":{"crate_id":5,"path":["alloc","collections","btree","set","Iter"],"kind":"struct"},"5:1080:56425":{"crate_id":5,"path":["alloc","collections","binary_heap","drop","DropGuard"],"kind":"struct"},"6:4040:39412":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_replay"],"kind":"struct"},"17:10912:43568":{"crate_id":17,"path":["object","read","pe","file","PeFile"],"kind":"struct"},"17:11915:47964":{"crate_id":17,"path":["object","macho","DyldCacheHeader"],"kind":"struct"},"6:6887:39591":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_mutex_t"],"kind":"struct"},"2:11048:2842":{"crate_id":2,"path":["core","slice","iter","SplitMut"],"kind":"struct"},"1:8691:158":{"crate_id":1,"path":["std","sync","mutex","Mutex"],"kind":"struct"},"6:5548:40100":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","msqid_ds"],"kind":"struct"},"16:7024:3783":{"crate_id":16,"path":["gimli","read","op","EvaluationState"],"kind":"enum"},"1:15745:1702":{"crate_id":1,"path":["std","array"],"kind":"primitive"},"5:0:262":{"crate_id":5,"path":["alloc"],"kind":"module"},"18:169:49774":{"crate_id":18,"path":["memchr","memchr","iter","Memchr3"],"kind":"struct"},"14:194:41567":{"crate_id":14,"path":["rustc_demangle","DemangleStyle"],"kind":"enum"},"2:24385:2217":{"crate_id":2,"path":["core","num","nonzero","NonZeroUsize"],"kind":"struct"},"2:10119:106":{"crate_id":2,"path":["core","fmt","Debug"],"kind":"trait"},"6:4401:39450":{"crate_id":6,"path":["libc","unix","linux_like","linux","seccomp_data"],"kind":"struct"},"16:5927:3487":{"crate_id":16,"path":["gimli","read","cfi","CallFrameInstructionIter"],"kind":"struct"},"2:55807:221":{"crate_id":2,"path":["core","core_simd","fmt","fmt","Wrapper"],"kind":"struct"},"17:12343:48156":{"crate_id":17,"path":["object","macho","DysymtabCommand"],"kind":"struct"},"2:2004:1881":{"crate_id":2,"path":["core","mem","maybe_uninit","write_slice_cloned","Guard"],"kind":"struct"},"16:3091:3798":{"crate_id":16,"path":["gimli","common","DebugMacroOffset"],"kind":"struct"},"2:2431:2443":{"crate_id":2,"path":["core","ptr","unique","Unique"],"kind":"struct"},"17:13119:48769":{"crate_id":17,"path":["object","pe","ImageOptionalHeader64"],"kind":"struct"},"12:2005:1994":{"crate_id":12,"path":["hashbrown","set","Iter"],"kind":"struct"},"1:11970:2000":{"crate_id":1,"path":["std","sync","mpsc","RecvError"],"kind":"struct"},"17:13386:49266":{"crate_id":17,"path":["object","pe","ImageLinenumber"],"kind":"struct"},"17:10317:3840":{"crate_id":17,"path":["object","read","elf","section","ElfSection"],"kind":"struct"},"17:12456:48164":{"crate_id":17,"path":["object","macho","TwolevelHint"],"kind":"struct"},"6:4145:39425":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Ehdr"],"kind":"struct"},"1:8268:2213":{"crate_id":1,"path":["std","sync","mpsc","sync","Packet"],"kind":"struct"},"17:13221:48821":{"crate_id":17,"path":["object","pe","AnonObjectHeaderBigobj"],"kind":"struct"},"12:925:2061":{"crate_id":12,"path":["hashbrown","map","ValuesMut"],"kind":"struct"},"17:9551:3825":{"crate_id":17,"path":["object","read","util","ByteString"],"kind":"struct"},"1:8276:2095":{"crate_id":1,"path":["std","sync","mpsc","sync","State"],"kind":"struct"},"1:7525:2125":{"crate_id":1,"path":["std","process","ChildStdin"],"kind":"struct"},"1:11928:1994":{"crate_id":1,"path":["std","sync","mpsc","Iter"],"kind":"struct"},"1:1482:2037":{"crate_id":1,"path":["std","collections","hash","map","DrainFilter"],"kind":"struct"},"17:11045:43284":{"crate_id":17,"path":["object","read","FileKind"],"kind":"enum"},"7:85:41125":{"crate_id":7,"path":["unwind","libunwind","_Unwind_Action"],"kind":"enum"},"2:22441:55375":{"crate_id":2,"path":["core","core_simd","swizzle","deinterleave","Even"],"kind":"struct"},"2:53168:17664":{"crate_id":2,"path":["core","core_arch","x86","__m512"],"kind":"struct"},"2:38505:1847":{"crate_id":2,"path":["core","convert","Infallible"],"kind":"enum"},"1:3953:191":{"crate_id":1,"path":["std","io","error","Result"],"kind":"typedef"},"12:469:58662":{"crate_id":12,"path":["hashbrown","raw","RawIterHashInner"],"kind":"struct"},"17:10864:43471":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbolTable"],"kind":"struct"},"17:11970:43501":{"crate_id":17,"path":["object","macho","FatArch32"],"kind":"struct"},"1:10558:7927":{"crate_id":1,"path":["std","env","VarError"],"kind":"enum"},"2:2836:120":{"crate_id":2,"path":["core","cmp","Eq"],"kind":"trait"},"17:12195:48146":{"crate_id":17,"path":["object","macho","SubFrameworkCommand"],"kind":"struct"},"16:3714:41660":{"crate_id":16,"path":["gimli","constants","DwUt"],"kind":"struct"},"17:10599:43497":{"crate_id":17,"path":["object","read","macho","file","MachOComdatIterator"],"kind":"struct"},"2:3321:2514":{"crate_id":2,"path":["core","ops","bit","Shl"],"kind":"trait"},"5:1602:1996":{"crate_id":5,"path":["alloc","collections","btree","map","IntoIter"],"kind":"struct"},"9:157:3263":{"crate_id":9,"path":["miniz_oxide","deflate","core","CompressorOxide"],"kind":"struct"},"1:15761:1716":{"crate_id":1,"path":["std","u64"],"kind":"primitive"},"16:7158:3631":{"crate_id":16,"path":["gimli","read","op","Evaluation"],"kind":"struct"},"17:10529:43397":{"crate_id":17,"path":["object","read","elf","version","VernauxIterator"],"kind":"struct"},"2:14:1787":{"crate_id":2,"path":["core","write"],"kind":"macro"},"17:10623:43499":{"crate_id":17,"path":["object","read","macho","file","MachOComdatSectionIterator"],"kind":"struct"},"1:5705:1866":{"crate_id":1,"path":["std","os","unix","fs","DirBuilderExt"],"kind":"trait"},"17:11750:44186":{"crate_id":17,"path":["object","elf","Verdef"],"kind":"struct"},"17:10611:43498":{"crate_id":17,"path":["object","read","macho","file","MachOComdat"],"kind":"struct"},"2:23784:35297":{"crate_id":2,"path":["core","num","dec2flt","number","Number"],"kind":"struct"},"1:4899:1952":{"crate_id":1,"path":["std","net","addr","ToSocketAddrs"],"kind":"trait"},"2:45996:2779":{"crate_id":2,"path":["core","char","convert","ParseCharError"],"kind":"struct"},"2:9141:2195":{"crate_id":2,"path":["core","panic","unwind_safe","AssertUnwindSafe"],"kind":"struct"},"2:48523:2095":{"crate_id":2,"path":["core","hash","sip","State"],"kind":"struct"},"2:24249:2930":{"crate_id":2,"path":["core","num","nonzero","NonZeroU16"],"kind":"struct"},"2:9261:2366":{"crate_id":2,"path":["core","panicking","assert_matches_failed","Pattern"],"kind":"struct"},"18:857:3933":{"crate_id":18,"path":["memchr","memmem","SearcherConfig"],"kind":"struct"},"2:48494:55473":{"crate_id":2,"path":["core","hash","sip","SipHasher24"],"kind":"struct"},"17:10420:3837":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdat"],"kind":"struct"},"1:9615:2265":{"crate_id":1,"path":["std","sys_common","remutex","ReentrantMutexGuard"],"kind":"struct"},"1:15747:1704":{"crate_id":1,"path":["std","str"],"kind":"primitive"},"1:7182:52081":{"crate_id":1,"path":["std","path","fmt","DebugHelper"],"kind":"struct"},"16:4304:42125":{"crate_id":16,"path":["gimli","constants","DwForm"],"kind":"struct"},"5:3380:2041":{"crate_id":5,"path":["alloc","collections","btree","set","Union"],"kind":"struct"},"1:6603:50085":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt","st_atime"],"kind":"foreign_type"},"16:7514:3585":{"crate_id":16,"path":["gimli","read","unit","UnitHeader"],"kind":"struct"},"1:15741:1699":{"crate_id":1,"path":["std","char"],"kind":"primitive"},"6:5255:40035":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","mallinfo2"],"kind":"struct"},"17:11616:43979":{"crate_id":17,"path":["object","elf","Syminfo64"],"kind":"struct"},"16:3320:3799":{"crate_id":16,"path":["gimli","common","DebugTypeSignature"],"kind":"struct"},"6:4193:39428":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Sym"],"kind":"struct"},"2:3428:127":{"crate_id":2,"path":["core","ops","function","FnMut"],"kind":"trait"},"6:4227:39431":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Shdr"],"kind":"struct"},"5:3032:56504":{"crate_id":5,"path":["alloc","collections","btree","node","marker","ValMut"],"kind":"struct"},"16:5790:3482":{"crate_id":16,"path":["gimli","read","cfi","CfaRule"],"kind":"enum"},"16:4386:42157":{"crate_id":16,"path":["gimli","constants","DwLle"],"kind":"struct"},"16:6636:3582":{"crate_id":16,"path":["gimli","read","loclists","RawLocListIter"],"kind":"struct"},"15:269:3404":{"crate_id":15,"path":["addr2line","RangeAttributes"],"kind":"struct"},"16:4790:42261":{"crate_id":16,"path":["gimli","constants","DwDsc"],"kind":"struct"},"5:6239:3140":{"crate_id":5,"path":["alloc","string","retain","SetLenOnDrop"],"kind":"struct"},"17:11499:43907":{"crate_id":17,"path":["object","elf","SectionHeader32"],"kind":"struct"},"16:3506:3747":{"crate_id":16,"path":["gimli","common","DwarfFileType"],"kind":"enum"},"2:12555:2876":{"crate_id":2,"path":["core","str","iter","SplitNInternal"],"kind":"struct"},"2:49108:2661":{"crate_id":2,"path":["core","str","error","ParseBoolError"],"kind":"struct"},"13:0:1669":{"crate_id":13,"path":["std_detect"],"kind":"module"},"16:3338:3491":{"crate_id":16,"path":["gimli","common","DebugFrameOffset"],"kind":"struct"},"1:1018:2213":{"crate_id":1,"path":["std","thread","Packet"],"kind":"struct"},"17:10140:3852":{"crate_id":17,"path":["object","read","coff","symbol","SymbolTable"],"kind":"struct"},"17:10331:3852":{"crate_id":17,"path":["object","read","elf","symbol","SymbolTable"],"kind":"struct"},"18:820:3930":{"crate_id":18,"path":["memchr","memmem","FinderRev"],"kind":"struct"},"2:46088:1982":{"crate_id":2,"path":["core","char","EscapeDefault"],"kind":"struct"},"16:4641:42237":{"crate_id":16,"path":["gimli","constants","DwAddr"],"kind":"struct"},"17:13172:48775":{"crate_id":17,"path":["object","pe","ImageRomHeaders"],"kind":"struct"},"17:12028:48018":{"crate_id":17,"path":["object","macho","LoadCommand"],"kind":"struct"},"5:8364:3084":{"crate_id":5,"path":["alloc","string","FromUtf16Error"],"kind":"struct"},"1:6345:1823":{"crate_id":1,"path":["std","os","unix","process","CommandExt"],"kind":"trait"},"2:11844:56279":{"crate_id":2,"path":["core","slice","sort","CopyOnDrop"],"kind":"struct"},"2:13913:187":{"crate_id":2,"path":["core","task","ready","Ready"],"kind":"struct"},"18:866:3934":{"crate_id":18,"path":["memchr","memmem","SearcherKind"],"kind":"enum"},"16:4704:42250":{"crate_id":16,"path":["gimli","constants","DwCc"],"kind":"struct"},"12:892:3369":{"crate_id":12,"path":["hashbrown","map","ConsumeAllOnDrop"],"kind":"struct"},"16:6577:3622":{"crate_id":16,"path":["gimli","read","loclists","DebugLoc"],"kind":"struct"},"17:10975:43555":{"crate_id":17,"path":["object","read","pe","section","PeSegment"],"kind":"struct"},"17:607:43262":{"crate_id":17,"path":["object","read","any","Comdat"],"kind":"struct"},"17:12685:48241":{"crate_id":17,"path":["object","macho","EntryPointCommand"],"kind":"struct"},"1:11895:50069":{"crate_id":1,"path":["std","sync","mpsc","cache_aligned","CacheAligned"],"kind":"struct"},"7:0:1449":{"crate_id":7,"path":["unwind"],"kind":"module"},"14:47:41566":{"crate_id":14,"path":["rustc_demangle","v0","Demangle"],"kind":"struct"},"16:7146:3630":{"crate_id":16,"path":["gimli","read","op","OperationIter"],"kind":"struct"},"6:5359:40062":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","regex_t"],"kind":"struct"},"1:7573:2128":{"crate_id":1,"path":["std","process","Command"],"kind":"struct"},"1:11865:2133":{"crate_id":1,"path":["std","process","ExitCode"],"kind":"struct"},"2:49530:2367":{"crate_id":2,"path":["core","str","pattern","SearchStep"],"kind":"enum"},"6:5407:40067":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_entry"],"kind":"struct"},"17:10801:43467":{"crate_id":17,"path":["object","read","macho","segment","MachOSegment"],"kind":"struct"},"6:605:36422":{"crate_id":6,"path":["libc","unix","sigval"],"kind":"struct"},"2:51934:2691":{"crate_id":2,"path":["core","core_arch","simd","i8x32"],"kind":"struct"},"1:12114:2173":{"crate_id":1,"path":["std","time","SystemTimeError"],"kind":"struct"},"17:9034:43267":{"crate_id":17,"path":["object","common","SymbolKind"],"kind":"enum"},"6:3951:39402":{"crate_id":6,"path":["libc","unix","linux_like","linux","fsid_t"],"kind":"struct"},"2:3185:2450":{"crate_id":2,"path":["core","marker","Unsize"],"kind":"trait"},"5:3359:3158":{"crate_id":5,"path":["alloc","collections","btree","set","IntersectionInner"],"kind":"enum"},"2:50764:2708":{"crate_id":2,"path":["core","core_arch","simd","u8x4"],"kind":"struct"},"2:22403:55293":{"crate_id":2,"path":["core","core_simd","swizzle","rotate_lanes_right","Rotate"],"kind":"struct"},"17:10502:43396":{"crate_id":17,"path":["object","read","elf","version","VerdauxIterator"],"kind":"struct"},"5:8341:201":{"crate_id":5,"path":["alloc","string","String"],"kind":"struct"},"1:3908:2154":{"crate_id":1,"path":["std","io","error","repr_bitpacked","Repr"],"kind":"struct"},"1:10459:50073":{"crate_id":1,"path":["std","thread","local","fast","DtorState"],"kind":"enum"},"2:3316:2047":{"crate_id":2,"path":["core","ops","bit","BitXor"],"kind":"trait"},"9:234:3271":{"crate_id":9,"path":["miniz_oxide","deflate","core","HuffmanOxide"],"kind":"struct"},"1:11873:49972":{"crate_id":1,"path":["std","sync","mpsc","blocking","SignalToken"],"kind":"struct"},"17:10071:3913":{"crate_id":17,"path":["object","read","coff","file","CoffFile"],"kind":"struct"},"16:5595:3471":{"crate_id":16,"path":["gimli","read","cfi","CommonInformationEntry"],"kind":"struct"},"1:6695:1825":{"crate_id":1,"path":["std","os","linux","process","ChildExt"],"kind":"trait"},"6:4164:39426":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Ehdr"],"kind":"struct"},"9:603:41348":{"crate_id":9,"path":["miniz_oxide","inflate","stream","InflateState"],"kind":"struct"},"17:13963:49411":{"crate_id":17,"path":["object","pe","NonPagedDebugInfo"],"kind":"struct"},"6:6085:40468":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","pthread_attr_t"],"kind":"struct"},"17:10887:43469":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbol"],"kind":"struct"},"17:12208:48147":{"crate_id":17,"path":["object","macho","SubClientCommand"],"kind":"struct"},"2:45728:1850":{"crate_id":2,"path":["core","any","TypeId"],"kind":"struct"},"2:3274:2480":{"crate_id":2,"path":["core","ops","arith","Neg"],"kind":"trait"},"2:12856:2368":{"crate_id":2,"path":["core","str","pattern","Searcher"],"kind":"trait"},"5:1430:2069":{"crate_id":5,"path":["alloc","collections","btree","map","entry","Entry"],"kind":"enum"},"16:7236:3638":{"crate_id":16,"path":["gimli","read","rnglists","DebugRanges"],"kind":"struct"},"6:6176:40474":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","mcontext_t"],"kind":"struct"},"2:49254:2847":{"crate_id":2,"path":["core","str","iter","SplitN"],"kind":"struct"},"2:23489:1833":{"crate_id":2,"path":["core","core_simd","vector","sealed","Sealed"],"kind":"trait"},"1:15753:1708":{"crate_id":1,"path":["std","i8"],"kind":"primitive"},"1:1472:2036":{"crate_id":1,"path":["std","collections","hash","map","Drain"],"kind":"struct"},"2:24959:2769":{"crate_id":2,"path":["core","num","saturating","Saturating"],"kind":"struct"},"6:4203:39429":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Phdr"],"kind":"struct"},"1:10722:114":{"crate_id":1,"path":["std","fs","DirBuilder"],"kind":"struct"},"17:2314:3843":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbolIterator"],"kind":"struct"},"1:15756:1711":{"crate_id":1,"path":["std","i64"],"kind":"primitive"},"16:3549:41650":{"crate_id":16,"path":["gimli","arch","X86"],"kind":"struct"},"2:51066:2666":{"crate_id":2,"path":["core","core_arch","simd","f32x2"],"kind":"struct"},"6:5563:40101":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","semid_ds"],"kind":"struct"},"18:837:2368":{"crate_id":18,"path":["memchr","memmem","Searcher"],"kind":"struct"},"2:46370:2615":{"crate_id":2,"path":["core","iter","adapters","fuse","Fuse"],"kind":"struct"},"6:3990:39406":{"crate_id":6,"path":["libc","unix","linux_like","linux","sembuf"],"kind":"struct"},"16:5753:3480":{"crate_id":16,"path":["gimli","read","cfi","RegisterRuleIter"],"kind":"struct"},"2:3220:1810":{"crate_id":2,"path":["core","marker","Unpin"],"kind":"trait"},"17:10458:43395":{"crate_id":17,"path":["object","read","elf","note","Note"],"kind":"struct"},"2:46200:2968":{"crate_id":2,"path":["core","ffi","c_str","FromBytesUntilNulError"],"kind":"struct"},"6:4005:39408":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_id"],"kind":"struct"},"16:3772:41693":{"crate_id":16,"path":["gimli","constants","DwCfa"],"kind":"struct"},"1:10746:1911":{"crate_id":1,"path":["std","io","cursor","Cursor"],"kind":"struct"},"17:11434:43690":{"crate_id":17,"path":["object","elf","FileHeader32"],"kind":"struct"},"2:50787:2696":{"crate_id":2,"path":["core","core_arch","simd","u16x2"],"kind":"struct"},"1:5284:2271":{"crate_id":1,"path":["std","net","tcp","TcpListener"],"kind":"struct"},"16:3118:3751":{"crate_id":16,"path":["gimli","common","RawRangeListsOffset"],"kind":"struct"},"2:48989:2856":{"crate_id":2,"path":["core","slice","iter","ArrayWindows"],"kind":"struct"},"17:11026:43283":{"crate_id":17,"path":["object","read","traits","NoDynamicRelocationIterator"],"kind":"struct"},"6:5420:40069":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_seccomp"],"kind":"struct"},"2:49866:2898":{"crate_id":2,"path":["core","str","CharEscapeUnicode"],"kind":"struct"},"2:53244:17668":{"crate_id":2,"path":["core","core_arch","x86","__m512bh"],"kind":"struct"},"1:11129:49997":{"crate_id":1,"path":["std","net","parser","AddrKind"],"kind":"enum"},"1:4596:1852":{"crate_id":1,"path":["std","io","Write"],"kind":"trait"},"2:3483:2079":{"crate_id":2,"path":["core","ops","index","Index"],"kind":"trait"},"0:0:1575":{"crate_id":0,"path":["winapi"],"kind":"module"},"5:5772:56425":{"crate_id":5,"path":["alloc","slice","hack","to_vec","DropGuard"],"kind":"struct"},"17:12537:48170":{"crate_id":17,"path":["object","macho","EncryptionInfoCommand32"],"kind":"struct"},"2:4634:2531":{"crate_id":2,"path":["core","asserting","TryCaptureWithoutDebug"],"kind":"struct"},"17:11539:43968":{"crate_id":17,"path":["object","elf","CompressionHeader32"],"kind":"struct"},"17:10673:43500":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandVariant"],"kind":"enum"},"16:4922:42293":{"crate_id":16,"path":["gimli","constants","DwLne"],"kind":"struct"},"1:14943:2020":{"crate_id":1,"path":["std","sys_common","wtf8","Wtf8Buf"],"kind":"struct"},"17:10448:3815":{"crate_id":17,"path":["object","read","elf","note","NoteIterator"],"kind":"struct"},"17:9961:43282":{"crate_id":17,"path":["object","read","any","SectionRelocationIterator"],"kind":"struct"},"2:32015:2958":{"crate_id":2,"path":["core","mem","manually_drop","ManuallyDrop"],"kind":"struct"},"2:3157:111":{"crate_id":2,"path":["core","default","Default"],"kind":"trait"},"17:9280:41645":{"crate_id":17,"path":["object","endian","BigEndian"],"kind":"struct"},"1:15757:1712":{"crate_id":1,"path":["std","i128"],"kind":"primitive"},"2:2115:31446":{"crate_id":2,"path":["core","mem","Discriminant"],"kind":"struct"},"18:610:3938":{"crate_id":18,"path":["memchr","cow","CowBytes"],"kind":"struct"},"2:24351:2932":{"crate_id":2,"path":["core","num","nonzero","NonZeroU128"],"kind":"struct"},"2:2108:559":{"crate_id":2,"path":["core","mem","drop"],"kind":"function"},"2:8280:132":{"crate_id":2,"path":["core","iter","traits","collect","FromIterator"],"kind":"trait"},"5:7093:56429":{"crate_id":5,"path":["alloc","vec","drain_filter","drop","BackshiftOnDrop"],"kind":"struct"},"2:3262:2474":{"crate_id":2,"path":["core","ops","arith","Div"],"kind":"trait"},"16:7738:3641":{"crate_id":16,"path":["gimli","read","unit","Attribute"],"kind":"struct"},"16:6999:3628":{"crate_id":16,"path":["gimli","read","op","Piece"],"kind":"struct"},"2:3197:1985":{"crate_id":2,"path":["core","marker","PhantomData"],"kind":"struct"},"2:49467:2888":{"crate_id":2,"path":["core","str","iter","EscapeUnicode"],"kind":"struct"},"2:3398:112":{"crate_id":2,"path":["core","ops","deref","Deref"],"kind":"trait"},"6:5522:40099":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","sigset_t"],"kind":"struct"},"5:2314:3208":{"crate_id":5,"path":["alloc","collections","btree","navigate","LazyLeafRange"],"kind":"struct"},"1:13219:2285":{"crate_id":1,"path":["std","sys","unix","net","Socket"],"kind":"struct"},"2:3189:103":{"crate_id":2,"path":["core","marker","Copy"],"kind":"trait"},"12:1651:3390":{"crate_id":12,"path":["hashbrown","rustc_entry","RustcEntry"],"kind":"enum"},"16:6366:3397":{"crate_id":16,"path":["gimli","read","line","LineRow"],"kind":"struct"},"6:1908:37456":{"crate_id":6,"path":["libc","unix","linux_like","linux","fpos64_t"],"kind":"enum"},"6:5945:36333":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","sigaction"],"kind":"struct"},"1:4273:2257":{"crate_id":1,"path":["std","io","stdio","StderrRaw"],"kind":"struct"},"16:5561:3469":{"crate_id":16,"path":["gimli","read","cfi","Augmentation"],"kind":"struct"},"1:10575:7934":{"crate_id":1,"path":["std","env","JoinPathsError"],"kind":"struct"},"9:41:3296":{"crate_id":9,"path":["miniz_oxide","deflate","buffer","LocalBuf"],"kind":"struct"},"16:5672:3473":{"crate_id":16,"path":["gimli","read","cfi","FrameDescriptionEntry"],"kind":"struct"},"2:3681:2506":{"crate_id":2,"path":["core","ops","unsize","CoerceUnsized"],"kind":"trait"},"1:10683:1871":{"crate_id":1,"path":["std","fs","OpenOptions"],"kind":"struct"},"2:49372:2882":{"crate_id":2,"path":["core","str","iter","RMatches"],"kind":"struct"},"6:1736:37319":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_storage"],"kind":"struct"},"2:49354:2881":{"crate_id":2,"path":["core","str","iter","Matches"],"kind":"struct"},"17:13041:48713":{"crate_id":17,"path":["object","pe","ImageFileHeader"],"kind":"struct"},"1:14401:1891":{"crate_id":1,"path":["std","sys","unix","io","IoSlice"],"kind":"struct"},"2:50941:55139":{"crate_id":2,"path":["core","core_arch","simd","u64x1"],"kind":"struct"},"2:46094:3050":{"crate_id":2,"path":["core","char","EscapeDefaultState"],"kind":"enum"},"6:6899:39593":{"crate_id":6,"path":["libc","unix","linux_like","linux","can_frame"],"kind":"struct"},"17:10950:43579":{"crate_id":17,"path":["object","read","pe","file","PeComdatSectionIterator"],"kind":"struct"},"17:10477:3897":{"crate_id":17,"path":["object","read","elf","hash","GnuHashTable"],"kind":"struct"},"1:6769:1829":{"crate_id":1,"path":["std","os","fd","raw","FromRawFd"],"kind":"trait"},"6:6200:40476":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","shmid_ds"],"kind":"struct"},"6:4449:39456":{"crate_id":6,"path":["libc","unix","linux_like","linux","dirent64"],"kind":"struct"},"16:7928:2566":{"crate_id":16,"path":["gimli","read","value","Value"],"kind":"enum"},"5:3732:156":{"crate_id":5,"path":["alloc","collections","linked_list","LinkedList"],"kind":"struct"},"1:4173:1928":{"crate_id":1,"path":["std","io","readbuf","ReadBuf"],"kind":"struct"},"1:15712:6917":{"crate_id":1,"path":["std","backtrace_rs","types","BytesOrWideString"],"kind":"enum"},"16:6208:3612":{"crate_id":16,"path":["gimli","read","aranges","ArangeEntryIter"],"kind":"struct"},"16:7195:3634":{"crate_id":16,"path":["gimli","read","pubnames","PubNamesEntryIter"],"kind":"struct"},"12:976:2068":{"crate_id":12,"path":["hashbrown","map","RawEntryBuilder"],"kind":"struct"},"2:10138:2404":{"crate_id":2,"path":["core","fmt","LowerExp"],"kind":"trait"},"12:463:58661":{"crate_id":12,"path":["hashbrown","raw","RawIterHash"],"kind":"struct"},"9:722:3247":{"crate_id":9,"path":["miniz_oxide","deflate","core","TDEFLFlush"],"kind":"enum"},"1:5627:1858":{"crate_id":1,"path":["std","os","unix","fs","FileExt"],"kind":"trait"},"2:24283:2931":{"crate_id":2,"path":["core","num","nonzero","NonZeroU32"],"kind":"struct"},"17:13192:48819":{"crate_id":17,"path":["object","pe","AnonObjectHeader"],"kind":"struct"},"2:3184:1809":{"crate_id":2,"path":["core","marker","Sized"],"kind":"trait"},"14:244:41568":{"crate_id":14,"path":["rustc_demangle","TryDemangleError"],"kind":"struct"},"1:10447:1833":{"crate_id":1,"path":["std","sealed","Sealed"],"kind":"trait"},"2:31875:2998":{"crate_id":2,"path":["core","num","FpCategory"],"kind":"enum"},"17:12182:48145":{"crate_id":17,"path":["object","macho","DylibCommand"],"kind":"struct"},"17:13497:49304":{"crate_id":17,"path":["object","pe","ImageBoundForwarderRef"],"kind":"struct"},"5:3346:2040":{"crate_id":5,"path":["alloc","collections","btree","set","SymmetricDifference"],"kind":"struct"},"6:6864:39588":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_condattr_t"],"kind":"struct"},"1:11226:2342":{"crate_id":1,"path":["std","os","unix","net","ancillary","AncillaryError"],"kind":"enum"},"2:13565:146":{"crate_id":2,"path":["core","future","into_future","IntoFuture"],"kind":"trait"},"2:46436:2620":{"crate_id":2,"path":["core","iter","adapters","scan","Scan"],"kind":"struct"},"16:7856:3644":{"crate_id":16,"path":["gimli","read","unit","EntriesTreeIter"],"kind":"struct"},"16:7406:3569":{"crate_id":16,"path":["gimli","read","str","DebugLineStr"],"kind":"struct"},"17:10211:43349":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdat"],"kind":"struct"},"1:2852:166":{"crate_id":1,"path":["std","ffi","os_str","OsString"],"kind":"struct"},"2:3718:2507":{"crate_id":2,"path":["core","ops","unsize","DispatchFromDyn"],"kind":"trait"},"6:4127:39423":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_abs_setup"],"kind":"struct"},"1:1507:2065":{"crate_id":1,"path":["std","collections","hash","map","RawEntryMut"],"kind":"enum"},"1:2027:141":{"crate_id":1,"path":["std","collections","hash","set","HashSet"],"kind":"struct"},"2:50050:176":{"crate_id":2,"path":["core","task","poll","Poll"],"kind":"enum"},"1:4346:1921":{"crate_id":1,"path":["std","io","stdio","StdoutLock"],"kind":"struct"},"17:13780:49367":{"crate_id":17,"path":["object","pe","ImageArm64RuntimeFunctionEntry"],"kind":"struct"},"1:12556:50293":{"crate_id":1,"path":["std","sys","unix","fs","Dir"],"kind":"struct"},"17:13453:49300":{"crate_id":17,"path":["object","pe","ImageTlsDirectory64"],"kind":"struct"},"1:4267:2255":{"crate_id":1,"path":["std","io","stdio","StdinRaw"],"kind":"struct"},"17:13488:49303":{"crate_id":17,"path":["object","pe","ImageBoundImportDescriptor"],"kind":"struct"},"17:13590:49317":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation64"],"kind":"struct"},"6:563:36417":{"crate_id":6,"path":["libc","unix","ipv6_mreq"],"kind":"struct"},"6:5987:40466":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","siginfo_t"],"kind":"struct"},"2:49568:2373":{"crate_id":2,"path":["core","str","pattern","MultiCharEqSearcher"],"kind":"struct"},"5:3866:1911":{"crate_id":5,"path":["alloc","collections","linked_list","Cursor"],"kind":"struct"},"5:6746:1881":{"crate_id":5,"path":["alloc","sync","from_iter_exact","Guard"],"kind":"struct"},"17:9933:43281":{"crate_id":17,"path":["object","read","any","DynamicRelocationIterator"],"kind":"struct"},"6:632:36426":{"crate_id":6,"path":["libc","unix","protoent"],"kind":"struct"},"17:13465:49301":{"crate_id":17,"path":["object","pe","ImageTlsDirectory32"],"kind":"struct"},"17:9659:59535":{"crate_id":17,"path":["object","read","any","SegmentIteratorInternal"],"kind":"enum"},"1:3251:2236":{"crate_id":1,"path":["std","fs","canonicalize"],"kind":"function"},"2:6773:2630":{"crate_id":2,"path":["core","iter","adapters","intersperse","IntersperseWith"],"kind":"struct"},"2:48891:2846":{"crate_id":2,"path":["core","slice","iter","GenericSplitN"],"kind":"struct"},"16:6136:3604":{"crate_id":16,"path":["gimli","read","abbrev","AttributeSpecification"],"kind":"struct"},"6:3966:39404":{"crate_id":6,"path":["libc","unix","linux_like","linux","cpu_set_t"],"kind":"struct"},"17:9689:59523":{"crate_id":17,"path":["object","read","any","SegmentInternal"],"kind":"enum"},"2:2140:1029":{"crate_id":2,"path":["core","ptr"],"kind":"module"},"6:1658:37311":{"crate_id":6,"path":["libc","unix","linux_like","in_pktinfo"],"kind":"struct"},"1:0:1302":{"crate_id":1,"path":["std"],"kind":"module"},"16:6252:3614":{"crate_id":16,"path":["gimli","read","line","LineRows"],"kind":"struct"},"1:2188:2041":{"crate_id":1,"path":["std","collections","hash","set","Union"],"kind":"struct"},"12:181:3385":{"crate_id":12,"path":["hashbrown","raw","RawTable"],"kind":"struct"},"17:12327:48155":{"crate_id":17,"path":["object","macho","SymtabCommand"],"kind":"struct"},"2:4284:1996":{"crate_id":2,"path":["core","array","iter","IntoIter"],"kind":"struct"},"17:12073:48076":{"crate_id":17,"path":["object","macho","SegmentCommand64"],"kind":"struct"},"9:27:3295":{"crate_id":9,"path":["miniz_oxide","deflate","buffer","HashBuffers"],"kind":"struct"},"2:45557:182":{"crate_id":2,"path":["core","ops","range","RangeFull"],"kind":"struct"},"6:4410:39451":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlmsghdr"],"kind":"struct"},"1:14782:2132":{"crate_id":1,"path":["std","sys","unix","process","process_inner","ExitStatusError"],"kind":"struct"},"2:53221:17667":{"crate_id":2,"path":["core","core_arch","x86","__m256bh"],"kind":"struct"},"5:1446:2071":{"crate_id":5,"path":["alloc","collections","btree","map","entry","VacantEntry"],"kind":"struct"},"5:8436:3136":{"crate_id":5,"path":["alloc","vec","splice","Splice"],"kind":"struct"},"16:4671:42242":{"crate_id":16,"path":["gimli","constants","DwId"],"kind":"struct"},"12:1235:3380":{"crate_id":12,"path":["hashbrown","map","VacantEntryRef"],"kind":"struct"},"2:53096:17658":{"crate_id":2,"path":["core","core_arch","x86","__m128"],"kind":"struct"},"1:13720:2128":{"crate_id":1,"path":["std","sys","unix","process","process_common","Command"],"kind":"struct"},"17:13306:48931":{"crate_id":17,"path":["object","pe","ImageAuxSymbolTokenDef"],"kind":"struct"},"2:52126:2668":{"crate_id":2,"path":["core","core_arch","simd","f32x8"],"kind":"struct"},"2:51851:2706":{"crate_id":2,"path":["core","core_arch","simd","u64x4"],"kind":"struct"},"17:9649:43276":{"crate_id":17,"path":["object","read","any","SegmentIterator"],"kind":"struct"},"12:354:58652":{"crate_id":12,"path":["hashbrown","raw","RawIterRange"],"kind":"struct"},"17:8849:3824":{"crate_id":17,"path":["object","common","Architecture"],"kind":"enum"},"17:10266:3807":{"crate_id":17,"path":["object","read","elf","segment","ElfSegment"],"kind":"struct"},"1:1415:1994":{"crate_id":1,"path":["std","collections","hash","map","Iter"],"kind":"struct"},"17:10304:3841":{"crate_id":17,"path":["object","read","elf","section","ElfSectionIterator"],"kind":"struct"},"2:9139:2159":{"crate_id":2,"path":["core","panic","unwind_safe","UnwindSafe"],"kind":"trait"},"17:13154:48773":{"crate_id":17,"path":["object","pe","ImageNtHeaders64"],"kind":"struct"},"1:2765:1846":{"crate_id":1,"path":["std","error","Indented"],"kind":"struct"},"16:7420:3586":{"crate_id":16,"path":["gimli","read","unit","UnitOffset"],"kind":"struct"},"2:22388:55293":{"crate_id":2,"path":["core","core_simd","swizzle","rotate_lanes_left","Rotate"],"kind":"struct"},"1:10551:2073":{"crate_id":1,"path":["std","collections","hash","map","DefaultHasher"],"kind":"struct"},"16:4417:42163":{"crate_id":16,"path":["gimli","constants","DwDs"],"kind":"struct"},"2:46071:3049":{"crate_id":2,"path":["core","char","EscapeUnicodeState"],"kind":"enum"},"17:12795:48317":{"crate_id":17,"path":["object","macho","ScatteredRelocationInfo"],"kind":"struct"},"6:161:36103":{"crate_id":6,"path":["libc","unix","fpos_t"],"kind":"enum"},"1:6861:1826":{"crate_id":1,"path":["std","os","fd","owned","AsFd"],"kind":"trait"},"6:5978:40465":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","flock64"],"kind":"struct"},"17:12494:48167":{"crate_id":17,"path":["object","macho","RpathCommand"],"kind":"struct"},"12:1159:3377":{"crate_id":12,"path":["hashbrown","map","EntryRef"],"kind":"enum"},"17:12771:43291":{"crate_id":17,"path":["object","macho","Relocation"],"kind":"struct"},"17:9729:59531":{"crate_id":17,"path":["object","read","any","SectionIteratorInternal"],"kind":"enum"},"5:5817:3076":{"crate_id":5,"path":["alloc","slice","Concat"],"kind":"trait"},"1:15744:1701":{"crate_id":1,"path":["std","pointer"],"kind":"primitive"},"6:1760:37321":{"crate_id":6,"path":["libc","unix","linux_like","sigevent"],"kind":"struct"},"9:927:41237":{"crate_id":9,"path":["miniz_oxide","inflate","TINFLStatus"],"kind":"enum"},"2:23953:2951":{"crate_id":2,"path":["core","num","error","ParseIntError"],"kind":"struct"},"13:232:58668":{"crate_id":13,"path":["std_detect","detect","cache","Initializer"],"kind":"struct"},"2:13746:55280":{"crate_id":2,"path":["core","future","from_generator","GenFuture"],"kind":"struct"},"2:24487:2137":{"crate_id":2,"path":["core","num","nonzero","NonZeroI32"],"kind":"struct"},"17:13240:48823":{"crate_id":17,"path":["object","pe","ImageSectionHeader"],"kind":"struct"},"2:49674:2379":{"crate_id":2,"path":["core","str","pattern","CharPredicateSearcher"],"kind":"struct"},"2:49404:1900":{"crate_id":2,"path":["core","str","iter","Lines"],"kind":"struct"},"4:0:1670":{"crate_id":4,"path":["rustc_std_workspace_core"],"kind":"module"},"6:3881:39397":{"crate_id":6,"path":["libc","unix","linux_like","linux","passwd"],"kind":"struct"},"17:12385:48160":{"crate_id":17,"path":["object","macho","DylibModule32"],"kind":"struct"},"5:4226:56425":{"crate_id":5,"path":["alloc","collections","vec_deque","drain","drop","DropGuard"],"kind":"struct"},"6:1708:37316":{"crate_id":6,"path":["libc","unix","linux_like","arphdr"],"kind":"struct"},"5:1647:2062":{"crate_id":5,"path":["alloc","collections","btree","map","IntoKeys"],"kind":"struct"},"16:6718:3772":{"crate_id":16,"path":["gimli","read","lookup","DebugLookup"],"kind":"struct"},"2:49759:35626":{"crate_id":2,"path":["core","str","lossy","Utf8LossyChunk"],"kind":"struct"},"17:10052:43338":{"crate_id":17,"path":["object","read","archive","ArchiveMember"],"kind":"struct"},"6:1602:37307":{"crate_id":6,"path":["libc","unix","linux_like","tm"],"kind":"struct"},"1:14558:1946":{"crate_id":1,"path":["std","sys","unix","os_str","Buf"],"kind":"struct"},"17:10926:43577":{"crate_id":17,"path":["object","read","pe","file","PeComdatIterator"],"kind":"struct"},"6:610:36423":{"crate_id":6,"path":["libc","unix","itimerval"],"kind":"struct"},"6:1676:37313":{"crate_id":6,"path":["libc","unix","linux_like","in6_rtmsg"],"kind":"struct"},"18:694:3943":{"crate_id":18,"path":["memchr","memmem","rarebytes","RareNeedleBytes"],"kind":"struct"},"17:9574:3831":{"crate_id":17,"path":["object","read","util","StringTable"],"kind":"struct"},"17:12671:48240":{"crate_id":17,"path":["object","macho","FvmfileCommand"],"kind":"struct"},"1:10309:50291":{"crate_id":1,"path":["std","backtrace_rs","print","BacktraceFrameFmt"],"kind":"struct"},"17:13180:48817":{"crate_id":17,"path":["object","pe","Guid"],"kind":"struct"},"12:877:2037":{"crate_id":12,"path":["hashbrown","map","DrainFilter"],"kind":"struct"},"2:24589:2937":{"crate_id":2,"path":["core","num","nonzero","NonZeroIsize"],"kind":"struct"},"16:5330:41645":{"crate_id":16,"path":["gimli","endianity","BigEndian"],"kind":"struct"},"1:2159:1996":{"crate_id":1,"path":["std","collections","hash","set","IntoIter"],"kind":"struct"},"5:1669:180":{"crate_id":5,"path":["alloc","collections","btree","map","Range"],"kind":"struct"},"17:11696:44019":{"crate_id":17,"path":["object","elf","ProgramHeader64"],"kind":"struct"},"6:5347:40061":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ntptimeval"],"kind":"struct"},"2:49874:2901":{"crate_id":2,"path":["core","str","IsWhitespace"],"kind":"struct"},"16:3287:3746":{"crate_id":16,"path":["gimli","common","DebugTypesOffset"],"kind":"struct"},"2:47956:2410":{"crate_id":2,"path":["core","fmt","num","Octal"],"kind":"struct"},"5:2537:3212":{"crate_id":5,"path":["alloc","collections","btree","node","NodeRef"],"kind":"struct"},"16:3392:3752":{"crate_id":16,"path":["gimli","common","UnitSectionOffset"],"kind":"enum"},"9:996:3312":{"crate_id":9,"path":["miniz_oxide","MZStatus"],"kind":"enum"},"2:22375:2552":{"crate_id":2,"path":["core","core_simd","swizzle","reverse","Reverse"],"kind":"struct"},"17:10279:3850":{"crate_id":17,"path":["object","read","elf","section","SectionTable"],"kind":"struct"},"1:11486:2100":{"crate_id":1,"path":["std","path","Ancestors"],"kind":"struct"},"5:1628:2060":{"crate_id":5,"path":["alloc","collections","btree","map","Values"],"kind":"struct"},"2:6404:2627":{"crate_id":2,"path":["core","iter","adapters","flatten","Flatten"],"kind":"struct"},"6:4073:39417":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_condition_effect"],"kind":"struct"},"17:11001:43553":{"crate_id":17,"path":["object","read","pe","section","PeSection"],"kind":"struct"},"16:7392:3571":{"crate_id":16,"path":["gimli","read","str","DebugStrOffsets"],"kind":"struct"},"16:2968:3738":{"crate_id":16,"path":["gimli","common","DebugLineStrOffset"],"kind":"struct"},"16:7477:3587":{"crate_id":16,"path":["gimli","read","unit","UnitType"],"kind":"enum"},"2:52627:2680":{"crate_id":2,"path":["core","core_arch","simd","i16x32"],"kind":"struct"},"2:49862:2896":{"crate_id":2,"path":["core","str","CharEscapeDebugContinue"],"kind":"struct"},"2:48979:2855":{"crate_id":2,"path":["core","slice","iter","ChunksExactMut"],"kind":"struct"},"16:4535:42181":{"crate_id":16,"path":["gimli","constants","DwVirtuality"],"kind":"struct"},"17:13574:49315":{"crate_id":17,"path":["object","pe","ImageDynamicRelocationTable"],"kind":"struct"},"2:49870:2897":{"crate_id":2,"path":["core","str","CharEscapeDefault"],"kind":"struct"},"2:3268:2477":{"crate_id":2,"path":["core","ops","arith","Rem"],"kind":"trait"},"2:3286:2484":{"crate_id":2,"path":["core","ops","arith","MulAssign"],"kind":"trait"},"2:55859:221":{"crate_id":2,"path":["core","core_simd","fmt","fmt","Wrapper"],"kind":"struct"},"5:3472:2037":{"crate_id":5,"path":["alloc","collections","btree","set","DrainFilter"],"kind":"struct"},"16:6126:3609":{"crate_id":16,"path":["gimli","read","abbrev","Attributes"],"kind":"enum"},"2:48213:129":{"crate_id":2,"path":["core","fmt","rt","v1","FormatSpec"],"kind":"struct"},"5:7194:2036":{"crate_id":5,"path":["alloc","vec","drain","Drain"],"kind":"struct"},"9:900:41271":{"crate_id":9,"path":["miniz_oxide","inflate","core","LocalVars"],"kind":"struct"},"1:14351:1871":{"crate_id":1,"path":["std","sys","unix","fs","OpenOptions"],"kind":"struct"},"17:10149:43280":{"crate_id":17,"path":["object","read","coff","symbol","SymbolIterator"],"kind":"struct"},"1:11318:10265":{"crate_id":1,"path":["std","panic","BacktraceStyle"],"kind":"enum"},"16:3064:3797":{"crate_id":16,"path":["gimli","common","DebugMacinfoOffset"],"kind":"struct"},"17:13098:48768":{"crate_id":17,"path":["object","pe","ImageRomOptionalHeader"],"kind":"struct"},"16:3241:3744":{"crate_id":16,"path":["gimli","common","DebugStrOffsetsBase"],"kind":"struct"},"17:13598:49318":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation32V2"],"kind":"struct"},"2:50139:1848":{"crate_id":2,"path":["core","alloc","AllocError"],"kind":"struct"},"17:12142:48142":{"crate_id":17,"path":["object","macho","Fvmlib"],"kind":"struct"},"17:9971:59524":{"crate_id":17,"path":["object","read","any","SectionRelocationIteratorInternal"],"kind":"enum"},"5:375:3156":{"crate_id":5,"path":["alloc","boxed","thin","ThinBox"],"kind":"struct"},"16:3195:3742":{"crate_id":16,"path":["gimli","common","DebugRngListsIndex"],"kind":"struct"},"1:1459:2060":{"crate_id":1,"path":["std","collections","hash","map","Values"],"kind":"struct"},"1:15751:1706":{"crate_id":1,"path":["std","f32"],"kind":"primitive"},"1:2458:7939":{"crate_id":1,"path":["std","env","ArgsOs"],"kind":"struct"},"2:48733:3071":{"crate_id":2,"path":["core","slice","ascii","EscapeByte"],"kind":"struct"},"2:53029:2707":{"crate_id":2,"path":["core","core_arch","simd","u64x8"],"kind":"struct"},"1:6771:1830":{"crate_id":1,"path":["std","os","fd","raw","IntoRawFd"],"kind":"trait"},"2:23885:35325":{"crate_id":2,"path":["core","num","flt2dec","Sign"],"kind":"enum"},"17:12247:48150":{"crate_id":17,"path":["object","macho","PreboundDylibCommand"],"kind":"struct"},"2:23493:2658":{"crate_id":2,"path":["core","core_simd","vector","SimdElement"],"kind":"trait"},"6:1622:37309":{"crate_id":6,"path":["libc","unix","linux_like","Dl_info"],"kind":"struct"},"17:10844:3852":{"crate_id":17,"path":["object","read","macho","symbol","SymbolTable"],"kind":"struct"},"12:2018:2037":{"crate_id":12,"path":["hashbrown","set","DrainFilter"],"kind":"struct"},"1:10673:1951":{"crate_id":1,"path":["std","fs","Metadata"],"kind":"struct"},"2:49150:1899":{"crate_id":2,"path":["core","str","iter","Split"],"kind":"struct"},"2:8293:1813":{"crate_id":2,"path":["core","iter","traits","collect","Extend"],"kind":"trait"},"6:1630:37310":{"crate_id":6,"path":["libc","unix","linux_like","lconv"],"kind":"struct"},"17:12051:48075":{"crate_id":17,"path":["object","macho","SegmentCommand32"],"kind":"struct"},"16:4614:42235":{"crate_id":16,"path":["gimli","constants","DwLang"],"kind":"struct"},"6:6005:10261":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stat"],"kind":"struct"},"1:8527:2297":{"crate_id":1,"path":["std","sync","barrier","Barrier"],"kind":"struct"},"2:51027:2681":{"crate_id":2,"path":["core","core_arch","simd","i32x2"],"kind":"struct"},"2:48189:67":{"crate_id":2,"path":["core","fmt","Alignment"],"kind":"enum"},"1:10520:6910":{"crate_id":1,"path":["std","backtrace","BacktraceStatus"],"kind":"enum"},"2:49300:2878":{"crate_id":2,"path":["core","str","iter","MatchIndices"],"kind":"struct"},"1:10962:1893":{"crate_id":1,"path":["std","io","SeekFrom"],"kind":"enum"},"1:1041:1978":{"crate_id":1,"path":["std","thread","JoinHandle"],"kind":"struct"},"2:50868:2709":{"crate_id":2,"path":["core","core_arch","simd","u8x8"],"kind":"struct"},"1:1132:1851":{"crate_id":1,"path":["std","backtrace","Backtrace"],"kind":"struct"},"6:1723:37318":{"crate_id":6,"path":["libc","unix","linux_like","epoll_event"],"kind":"struct"},"2:8060:2161":{"crate_id":2,"path":["core","iter","sources","once","once"],"kind":"function"},"1:3529:1908":{"crate_id":1,"path":["std","io","buffered","bufwriter","BufWriter"],"kind":"struct"},"1:1149:6912":{"crate_id":1,"path":["std","backtrace","BacktraceFrame"],"kind":"struct"},"16:5346:3564":{"crate_id":16,"path":["gimli","read","addr","DebugAddr"],"kind":"struct"},"8:0:1671":{"crate_id":8,"path":["cfg_if"],"kind":"module"},"6:5386:40065":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","seminfo"],"kind":"struct"},"6:4377:39447":{"crate_id":6,"path":["libc","unix","linux_like","linux","j1939_filter"],"kind":"struct"},"1:10941:1927":{"crate_id":1,"path":["std","io","util","Sink"],"kind":"struct"},"5:8176:1996":{"crate_id":5,"path":["alloc","collections","vec_deque","into_iter","IntoIter"],"kind":"struct"},"1:10535:6913":{"crate_id":1,"path":["std","backtrace","RawFrame"],"kind":"enum"},"6:6881:39590":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_cond_t"],"kind":"struct"},"2:23837:35315":{"crate_id":2,"path":["core","num","diy_float","Fp"],"kind":"struct"},"2:47259:2970":{"crate_id":2,"path":["core","panic","location","Location"],"kind":"struct"},"17:11015:43580":{"crate_id":17,"path":["object","read","pe","section","PeRelocationIterator"],"kind":"struct"},"2:47623:86":{"crate_id":2,"path":["core","sync","atomic","AtomicU32"],"kind":"struct"},"12:937:2065":{"crate_id":12,"path":["hashbrown","map","RawEntryMut"],"kind":"enum"},"12:1200:3379":{"crate_id":12,"path":["hashbrown","map","OccupiedEntryRef"],"kind":"struct"},"2:47371:2058":{"crate_id":2,"path":["core","result","IterMut"],"kind":"struct"},"1:14958:2021":{"crate_id":1,"path":["std","sys_common","wtf8","Wtf8"],"kind":"struct"},"2:55727:2654":{"crate_id":2,"path":["core","core_simd","swizzle","Which"],"kind":"enum"},"6:4347:39443":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_extended_err"],"kind":"struct"},"6:511:36411":{"crate_id":6,"path":["libc","unix","group"],"kind":"struct"},"17:13819:49373":{"crate_id":17,"path":["object","pe","ImageEnclaveConfig32"],"kind":"struct"},"12:2009:1996":{"crate_id":12,"path":["hashbrown","set","IntoIter"],"kind":"struct"},"17:9368:43272":{"crate_id":17,"path":["object","endian","U64Bytes"],"kind":"struct"},"16:6152:3565":{"crate_id":16,"path":["gimli","read","aranges","DebugAranges"],"kind":"struct"},"5:8119:56574":{"crate_id":5,"path":["alloc","collections","btree","merge_iter","Peeked"],"kind":"enum"},"6:6068:37240":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statvfs64"],"kind":"struct"},"17:13547:49312":{"crate_id":17,"path":["object","pe","ImageResourceDirStringU"],"kind":"struct"},"17:13163:48774":{"crate_id":17,"path":["object","pe","ImageNtHeaders32"],"kind":"struct"},"2:10136:175":{"crate_id":2,"path":["core","fmt","Pointer"],"kind":"trait"},"1:1530:2068":{"crate_id":1,"path":["std","collections","hash","map","RawEntryBuilder"],"kind":"struct"},"17:9005:43266":{"crate_id":17,"path":["object","common","ComdatKind"],"kind":"enum"},"1:5860:2340":{"crate_id":1,"path":["std","os","unix","net","ancillary","ScmRights"],"kind":"struct"},"2:10130:2411":{"crate_id":2,"path":["core","fmt","Binary"],"kind":"trait"},"5:6654:3098":{"crate_id":5,"path":["alloc","sync","Weak"],"kind":"struct"},"6:5969:36292":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","flock"],"kind":"struct"},"9:963:3311":{"crate_id":9,"path":["miniz_oxide","MZFlush"],"kind":"enum"},"2:3350:2528":{"crate_id":2,"path":["core","ops","bit","ShrAssign"],"kind":"trait"},"2:50835:2676":{"crate_id":2,"path":["core","core_arch","simd","i16x2"],"kind":"struct"},"1:6839:1831":{"crate_id":1,"path":["std","os","fd","owned","OwnedFd"],"kind":"struct"},"1:7915:2213":{"crate_id":1,"path":["std","sync","mpsc","oneshot","Packet"],"kind":"struct"},"17:12783:48314":{"crate_id":17,"path":["object","macho","RelocationInfo"],"kind":"struct"},"2:2776:94":{"crate_id":2,"path":["core","borrow","Borrow"],"kind":"trait"},"2:32214:55212":{"crate_id":2,"path":["core","mem","valid_align","ValidAlignEnum64"],"kind":"enum"},"16:7378:3570":{"crate_id":16,"path":["gimli","read","str","DebugStr"],"kind":"struct"},"6:5528:39311":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","sysinfo"],"kind":"struct"},"2:24215:2929":{"crate_id":2,"path":["core","num","nonzero","NonZeroU8"],"kind":"struct"},"2:48274:71":{"crate_id":2,"path":["core","fmt","ArgumentV1"],"kind":"struct"},"12:1144:2071":{"crate_id":12,"path":["hashbrown","map","VacantEntry"],"kind":"struct"},"16:5996:3607":{"crate_id":16,"path":["gimli","read","dwarf","Unit"],"kind":"struct"},"17:12467:48165":{"crate_id":17,"path":["object","macho","PrebindCksumCommand"],"kind":"struct"},"1:2362:581":{"crate_id":1,"path":["std","env"],"kind":"module"},"2:45642:183":{"crate_id":2,"path":["core","ops","range","RangeInclusive"],"kind":"struct"},"2:11711:2863":{"crate_id":2,"path":["core","slice","iter","GroupBy"],"kind":"struct"},"1:4383:1916":{"crate_id":1,"path":["std","io","stdio","Stderr"],"kind":"struct"},"16:5632:3472":{"crate_id":16,"path":["gimli","read","cfi","PartialFrameDescriptionEntry"],"kind":"struct"},"2:4646:2532":{"crate_id":2,"path":["core","asserting","TryCaptureWithDebug"],"kind":"struct"},"1:9225:1969":{"crate_id":1,"path":["std","std_float","StdFloat"],"kind":"trait"},"17:12725:48249":{"crate_id":17,"path":["object","macho","NoteCommand"],"kind":"struct"},"17:12095:48082":{"crate_id":17,"path":["object","macho","Section32"],"kind":"struct"},"1:14040:1920":{"crate_id":1,"path":["std","sys","unix","stdio","Stdout"],"kind":"struct"},"12:853:2060":{"crate_id":12,"path":["hashbrown","map","Values"],"kind":"struct"},"1:10584:1844":{"crate_id":1,"path":["std","error","Chain"],"kind":"struct"},"2:10378:2044":{"crate_id":2,"path":["core","hash","BuildHasher"],"kind":"trait"},"6:4501:39461":{"crate_id":6,"path":["libc","unix","linux_like","linux","mq_attr"],"kind":"struct"},"9:1075:3314":{"crate_id":9,"path":["miniz_oxide","StreamResult"],"kind":"struct"},"1:7686:2136":{"crate_id":1,"path":["std","process","Termination"],"kind":"trait"},"16:5736:3477":{"crate_id":16,"path":["gimli","read","cfi","UnwindTable"],"kind":"struct"},"1:11877:50324":{"crate_id":1,"path":["std","sync","mpsc","shared","StartResult"],"kind":"enum"},"2:49599:2377":{"crate_id":2,"path":["core","str","pattern","CharArrayRefSearcher"],"kind":"struct"},"18:677:138":{"crate_id":18,"path":["memchr","memmem","rabinkarp","Hash"],"kind":"struct"},"14:231:3086":{"crate_id":14,"path":["rustc_demangle","v0","ParseError"],"kind":"enum"},"2:49894:117":{"crate_id":2,"path":["core","time","Duration"],"kind":"struct"},"2:3013:1833":{"crate_id":2,"path":["core","convert","num","private","Sealed"],"kind":"trait"},"1:7013:10264":{"crate_id":1,"path":["std","panic","always_abort"],"kind":"function"},"2:51613:55148":{"crate_id":2,"path":["core","core_arch","simd","m64x2"],"kind":"struct"},"16:5707:3474":{"crate_id":16,"path":["gimli","read","cfi","UninitializedUnwindContext"],"kind":"struct"},"18:849:3932":{"crate_id":18,"path":["memchr","memmem","NeedleInfo"],"kind":"struct"},"5:2202:3160":{"crate_id":5,"path":["alloc","collections","btree","merge_iter","MergeIterInner"],"kind":"struct"},"2:49736:2382":{"crate_id":2,"path":["core","str","pattern","EmptyNeedle"],"kind":"struct"},"2:5114:2425":{"crate_id":2,"path":["core","cell","SyncUnsafeCell"],"kind":"struct"},"17:9404:43273":{"crate_id":17,"path":["object","endian","I16Bytes"],"kind":"struct"},"17:12712:48243":{"crate_id":17,"path":["object","macho","DataInCodeEntry"],"kind":"struct"},"16:5580:3470":{"crate_id":16,"path":["gimli","read","cfi","AugmentationData"],"kind":"struct"},"2:23938:3003":{"crate_id":2,"path":["core","num","error","TryFromIntError"],"kind":"struct"},"3:300:191":{"crate_id":3,"path":["compiler_builtins","float","cmp","Result"],"kind":"enum"},"6:3978:39405":{"crate_id":6,"path":["libc","unix","linux_like","linux","msginfo"],"kind":"struct"},"2:5062:2795":{"crate_id":2,"path":["core","cell","BorrowRefMut"],"kind":"struct"},"2:12776:2105":{"crate_id":2,"path":["core","str","traits","FromStr"],"kind":"trait"},"16:6072:3449":{"crate_id":16,"path":["gimli","read","reader","ReaderOffsetId"],"kind":"struct"},"2:13062:35624":{"crate_id":2,"path":["core","str","lossy","Utf8Lossy"],"kind":"struct"},"18:801:3928":{"crate_id":18,"path":["memchr","memmem","FindRevIter"],"kind":"struct"},"2:2320:2170":{"crate_id":2,"path":["core","ptr","non_null","NonNull"],"kind":"struct"},"1:12064:2168":{"crate_id":1,"path":["std","sync","rwlock","RwLockReadGuard"],"kind":"struct"},"2:8328:116":{"crate_id":2,"path":["core","iter","traits","double_ended","DoubleEndedIterator"],"kind":"trait"},"2:3290:2486":{"crate_id":2,"path":["core","ops","arith","DivAssign"],"kind":"trait"},"2:46183:2967":{"crate_id":2,"path":["core","ffi","c_str","FromBytesWithNulErrorKind"],"kind":"enum"},"1:5766:2335":{"crate_id":1,"path":["std","os","unix","net","addr","AsciiEscaped"],"kind":"struct"},"17:9809:59530":{"crate_id":17,"path":["object","read","any","ComdatSectionIteratorInternal"],"kind":"enum"},"2:49069:2862":{"crate_id":2,"path":["core","slice","iter","RChunksExactMut"],"kind":"struct"},"17:11794:44198":{"crate_id":17,"path":["object","elf","Vernaux"],"kind":"struct"},"9:692:3246":{"crate_id":9,"path":["miniz_oxide","deflate","core","CompressionStrategy"],"kind":"enum"},"5:3023:56870":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Dying"],"kind":"enum"},"2:22835:1833":{"crate_id":2,"path":["core","core_simd","masks","sealed","Sealed"],"kind":"trait"},"2:45756:2567":{"crate_id":2,"path":["core","any","tags","MaybeSizedValue"],"kind":"struct"},"16:4955:42301":{"crate_id":16,"path":["gimli","constants","DwLnct"],"kind":"struct"},"1:6607:50089":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt","st_ctime"],"kind":"foreign_type"},"1:8177:2213":{"crate_id":1,"path":["std","sync","mpsc","stream","Packet"],"kind":"struct"},"6:4046:39413":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_trigger"],"kind":"struct"},"17:13884:49383":{"crate_id":17,"path":["object","pe","ImageDebugDirectory"],"kind":"struct"},"2:46025:2782":{"crate_id":2,"path":["core","char","convert","CharTryFromError"],"kind":"struct"},"2:46388:2629":{"crate_id":2,"path":["core","iter","adapters","intersperse","Intersperse"],"kind":"struct"},"16:4852:42273":{"crate_id":16,"path":["gimli","constants","DwDefaulted"],"kind":"struct"},"1:10469:2190":{"crate_id":1,"path":["std","thread","Builder"],"kind":"struct"},"17:12946:48711":{"crate_id":17,"path":["object","pe","ImageOs2Header"],"kind":"struct"},"5:7753:219":{"crate_id":5,"path":["alloc","vec","Vec"],"kind":"struct"},"2:2213:2462":{"crate_id":2,"path":["core","ptr","metadata","DynMetadata"],"kind":"struct"},"17:13865:49377":{"crate_id":17,"path":["object","pe","ImageEnclaveImport"],"kind":"struct"},"2:52738:2700":{"crate_id":2,"path":["core","core_arch","simd","u16x32"],"kind":"struct"},"2:47363:1994":{"crate_id":2,"path":["core","result","Iter"],"kind":"struct"},"2:23751:2734":{"crate_id":2,"path":["core","num","dec2flt","common","BiasedFp"],"kind":"struct"},"6:6852:39586":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_mutexattr_t"],"kind":"struct"},"2:13676:29236":{"crate_id":2,"path":["core","future","poll_fn","PollFn"],"kind":"struct"},"16:6682:3579":{"crate_id":16,"path":["gimli","read","loclists","LocListIter"],"kind":"struct"},"17:2512:3839":{"crate_id":17,"path":["object","read","elf","relocation","ElfDynamicRelocationIterator"],"kind":"struct"},"2:8243:2644":{"crate_id":2,"path":["core","iter","traits","accum","Sum"],"kind":"trait"},"2:45573:180":{"crate_id":2,"path":["core","ops","range","Range"],"kind":"struct"},"17:8929:43265":{"crate_id":17,"path":["object","common","BinaryFormat"],"kind":"enum"},"6:5130:40006":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","statx"],"kind":"struct"},"17:681:43263":{"crate_id":17,"path":["object","read","any","Symbol"],"kind":"struct"},"1:15766:1721":{"crate_id":1,"path":["std","fn"],"kind":"primitive"},"1:11240:2272":{"crate_id":1,"path":["std","os","unix","net","listener","Incoming"],"kind":"struct"},"12:2309:54928":{"crate_id":12,"path":["hashbrown","raw","bitmask","BitMask"],"kind":"struct"},"16:6744:3774":{"crate_id":16,"path":["gimli","read","lookup","PubStuffHeader"],"kind":"struct"},"18:896:3936":{"crate_id":18,"path":["memchr","memmem","SearcherRevKind"],"kind":"enum"},"2:51589:55161":{"crate_id":2,"path":["core","core_arch","simd","m32x4"],"kind":"struct"},"2:46670:30860":{"crate_id":2,"path":["core","iter","sources","from_fn","FromFn"],"kind":"struct"},"2:51557:55143":{"crate_id":2,"path":["core","core_arch","simd","m16x8"],"kind":"struct"},"16:5273:3497":{"crate_id":16,"path":["gimli","constants","DwEhPe"],"kind":"struct"},"1:9600:2264":{"crate_id":1,"path":["std","sys_common","remutex","ReentrantMutex"],"kind":"struct"},"1:11936:1995":{"crate_id":1,"path":["std","sync","mpsc","TryIter"],"kind":"struct"},"2:57121:55156":{"crate_id":2,"path":["core","core_simd","vector","ptr","SimdConstPtr"],"kind":"struct"},"6:1717:37317":{"crate_id":6,"path":["libc","unix","linux_like","mmsghdr"],"kind":"struct"},"17:12632:48237":{"crate_id":17,"path":["object","macho","LinkerOptionCommand"],"kind":"struct"},"2:49882:2900":{"crate_id":2,"path":["core","str","IsNotEmpty"],"kind":"struct"},"12:812:2063":{"crate_id":12,"path":["hashbrown","map","IntoValues"],"kind":"struct"},"17:11100:3832":{"crate_id":17,"path":["object","read","SymbolIndex"],"kind":"struct"},"2:49424:2884":{"crate_id":2,"path":["core","str","iter","SplitWhitespace"],"kind":"struct"},"17:11118:43285":{"crate_id":17,"path":["object","read","SymbolSection"],"kind":"enum"},"6:4511:39462":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_txtime"],"kind":"struct"},"2:46063:2888":{"crate_id":2,"path":["core","char","EscapeUnicode"],"kind":"struct"},"2:10079:130":{"crate_id":2,"path":["core","fmt","Formatter"],"kind":"struct"},"1:4512:1881":{"crate_id":1,"path":["std","io","Guard"],"kind":"struct"},"6:4494:39460":{"crate_id":6,"path":["libc","unix","linux_like","linux","af_alg_iv"],"kind":"struct"},"1:14977:2028":{"crate_id":1,"path":["std","sys_common","wtf8","EncodeWide"],"kind":"struct"},"5:8271:3171":{"crate_id":5,"path":["alloc","ffi","c_str","NulError"],"kind":"struct"},"16:7342:3598":{"crate_id":16,"path":["gimli","read","rnglists","RawRange"],"kind":"struct"},"1:14554:7934":{"crate_id":1,"path":["std","sys","unix","os","JoinPathsError"],"kind":"struct"},"1:1651:2072":{"crate_id":1,"path":["std","collections","hash","map","OccupiedError"],"kind":"struct"},"18:766:59543":{"crate_id":18,"path":["memchr","memmem","twoway","ApproximateByteSet"],"kind":"struct"},"6:5191:40051":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__timeval"],"kind":"struct"},"2:12578:2877":{"crate_id":2,"path":["core","str","iter","MatchIndicesInternal"],"kind":"struct"},"17:9088:43269":{"crate_id":17,"path":["object","common","RelocationKind"],"kind":"enum"},"5:4683:56446":{"crate_id":5,"path":["alloc","collections","vec_deque","truncate","Dropper"],"kind":"struct"},"2:5017:2423":{"crate_id":2,"path":["core","cell","Ref"],"kind":"struct"},"6:1522:37297":{"crate_id":6,"path":["libc","unix","linux_like","in_addr"],"kind":"struct"},"2:49725:2381":{"crate_id":2,"path":["core","str","pattern","StrSearcherImpl"],"kind":"enum"},"12:1118:2070":{"crate_id":12,"path":["hashbrown","map","OccupiedEntry"],"kind":"struct"},"16:7295:3583":{"crate_id":16,"path":["gimli","read","rnglists","RawRngListIter"],"kind":"struct"},"12:396:3383":{"crate_id":12,"path":["hashbrown","raw","RawIntoIter"],"kind":"struct"},"6:5459:40071":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_data"],"kind":"union"},"17:12741:48250":{"crate_id":17,"path":["object","macho","Nlist32"],"kind":"struct"},"2:23768:55467":{"crate_id":2,"path":["core","num","dec2flt","decimal","Decimal"],"kind":"struct"},"6:3905:39399":{"crate_id":6,"path":["libc","unix","linux_like","linux","dqblk"],"kind":"struct"},"2:45598:181":{"crate_id":2,"path":["core","ops","range","RangeFrom"],"kind":"struct"},"17:11378:3869":{"crate_id":17,"path":["object","read","CompressedData"],"kind":"struct"},"2:52817:2684":{"crate_id":2,"path":["core","core_arch","simd","i32x16"],"kind":"struct"},"12:429:3382":{"crate_id":12,"path":["hashbrown","raw","RawDrain"],"kind":"struct"},"2:14021:2014":{"crate_id":2,"path":["core","alloc","Allocator"],"kind":"trait"},"17:12699:48242":{"crate_id":17,"path":["object","macho","SourceVersionCommand"],"kind":"struct"},"1:894:2185":{"crate_id":1,"path":["std","thread","scoped","Scope"],"kind":"struct"},"17:13506:49305":{"crate_id":17,"path":["object","pe","ImageDelayloadDescriptor"],"kind":"struct"},"12:761:2058":{"crate_id":12,"path":["hashbrown","map","IterMut"],"kind":"struct"},"2:3487:2455":{"crate_id":2,"path":["core","ops","index","IndexMut"],"kind":"trait"},"1:2183:2040":{"crate_id":1,"path":["std","collections","hash","set","SymmetricDifference"],"kind":"struct"},"5:909:93":{"crate_id":5,"path":["alloc","collections","binary_heap","BinaryHeap"],"kind":"struct"},"17:12645:48238":{"crate_id":17,"path":["object","macho","SymsegCommand"],"kind":"struct"},"16:3365:3492":{"crate_id":16,"path":["gimli","common","EhFrameOffset"],"kind":"struct"},"5:3756:2058":{"crate_id":5,"path":["alloc","collections","linked_list","IterMut"],"kind":"struct"},"2:4871:2076":{"crate_id":2,"path":["core","cell","Cell"],"kind":"struct"},"1:14118:2192":{"crate_id":1,"path":["std","sys","unix","thread","Thread"],"kind":"struct"},"2:47225:2755":{"crate_id":2,"path":["core","option","Item"],"kind":"struct"},"2:3294:2488":{"crate_id":2,"path":["core","ops","arith","RemAssign"],"kind":"trait"},"5:3284:92":{"crate_id":5,"path":["alloc","collections","btree","set","BTreeSet"],"kind":"struct"},"16:6620:3767":{"crate_id":16,"path":["gimli","read","loclists","LocListsFormat"],"kind":"enum"},"2:12518:2873":{"crate_id":2,"path":["core","str","iter","SplitInternal"],"kind":"struct"},"2:3341:2524":{"crate_id":2,"path":["core","ops","bit","BitXorAssign"],"kind":"trait"},"2:46427:2619":{"crate_id":2,"path":["core","iter","adapters","rev","Rev"],"kind":"struct"},"2:50812:2688":{"crate_id":2,"path":["core","core_arch","simd","i8x4"],"kind":"struct"},"17:11199:43289":{"crate_id":17,"path":["object","read","ObjectMapEntry"],"kind":"struct"},"5:7797:56429":{"crate_id":5,"path":["alloc","vec","retain_mut","BackshiftOnDrop"],"kind":"struct"},"2:49711:2380":{"crate_id":2,"path":["core","str","pattern","StrSearcher"],"kind":"struct"},"17:13924:49408":{"crate_id":17,"path":["object","pe","ImageFunctionEntry"],"kind":"struct"},"1:15752:1707":{"crate_id":1,"path":["std","f64"],"kind":"primitive"},"12:1762:58665":{"crate_id":12,"path":["hashbrown","scopeguard","ScopeGuard"],"kind":"struct"},"5:3823:56425":{"crate_id":5,"path":["alloc","collections","linked_list","drop","DropGuard"],"kind":"struct"},"17:9440:43274":{"crate_id":17,"path":["object","endian","I32Bytes"],"kind":"struct"},"17:11640:44015":{"crate_id":17,"path":["object","elf","Rela32"],"kind":"struct"},"2:3554:2960":{"crate_id":2,"path":["core","ops","range","RangeBounds"],"kind":"trait"},"16:7453:3566":{"crate_id":16,"path":["gimli","read","unit","DebugInfo"],"kind":"struct"},"2:50109:154":{"crate_id":2,"path":["core","alloc","layout","Layout"],"kind":"struct"},"1:15707:54681":{"crate_id":1,"path":["std","backtrace_rs","symbolize","gimli","Cache"],"kind":"struct"},"1:1302:139":{"crate_id":1,"path":["std","collections","hash","map","HashMap"],"kind":"struct"},"17:10377:3842":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbol"],"kind":"struct"},"1:5555:1945":{"crate_id":1,"path":["std","os","unix","ffi","os_str","OsStringExt"],"kind":"trait"},"2:23658:2926":{"crate_id":2,"path":["core","num","bignum","tests","Big8x3"],"kind":"struct"},"18:0:1680":{"crate_id":18,"path":["memchr"],"kind":"module"},"1:4305:1918":{"crate_id":1,"path":["std","io","stdio","Stdin"],"kind":"struct"},"17:13282:48867":{"crate_id":17,"path":["object","pe","ImageSymbolEx"],"kind":"struct"},"1:10334:50252":{"crate_id":1,"path":["std","backtrace_rs","Bomb"],"kind":"struct"},"17:10081:3850":{"crate_id":17,"path":["object","read","coff","section","SectionTable"],"kind":"struct"},"11:46:58651":{"crate_id":11,"path":["adler","algo","U32X4"],"kind":"struct"},"2:11228:2849":{"crate_id":2,"path":["core","slice","iter","SplitNMut"],"kind":"struct"},"16:5717:3476":{"crate_id":16,"path":["gimli","read","cfi","UnwindContext"],"kind":"struct"},"2:3635:209":{"crate_id":2,"path":["core","ops","try_trait","Try"],"kind":"trait"},"15:0:1677":{"crate_id":15,"path":["addr2line"],"kind":"module"},"6:519:36412":{"crate_id":6,"path":["libc","unix","utimbuf"],"kind":"struct"},"16:4477:42173":{"crate_id":16,"path":["gimli","constants","DwAccess"],"kind":"struct"},"1:11246:2292":{"crate_id":1,"path":["std","os","unix","ucred","UCred"],"kind":"struct"},"18:644:3940":{"crate_id":18,"path":["memchr","memmem","prefilter","PrefilterFn"],"kind":"struct"},"2:3906:68":{"crate_id":2,"path":["core","any","Any"],"kind":"trait"},"9:1020:3313":{"crate_id":9,"path":["miniz_oxide","MZError"],"kind":"enum"},"6:6239:40479":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ucontext_t"],"kind":"struct"},"2:3422:1811":{"crate_id":2,"path":["core","ops","drop","Drop"],"kind":"trait"},"1:9476:50287":{"crate_id":1,"path":["std","sys_common","lazy_box","LazyBox"],"kind":"struct"},"5:8111:3167":{"crate_id":5,"path":["alloc","collections","binary_heap","DrainSorted"],"kind":"struct"},"2:3014:2491":{"crate_id":2,"path":["core","convert","num","FloatToInt"],"kind":"trait"},"12:2315:58656":{"crate_id":12,"path":["hashbrown","raw","Fallibility"],"kind":"enum"},"2:57142:55179":{"crate_id":2,"path":["core","core_simd","vector","ptr","SimdMutPtr"],"kind":"struct"},"6:6935:41026":{"crate_id":6,"path":["libc","unix","align","in6_addr"],"kind":"struct"},"2:3327:2517":{"crate_id":2,"path":["core","ops","bit","Shr"],"kind":"trait"},"6:4083:39418":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_periodic_effect"],"kind":"struct"},"7:38:41118":{"crate_id":7,"path":["unwind","libunwind","_Unwind_Reason_Code"],"kind":"enum"},"1:5693:1863":{"crate_id":1,"path":["std","os","unix","fs","DirEntryExt"],"kind":"trait"},"3:0:413":{"crate_id":3,"path":["compiler_builtins"],"kind":"module"},"5:6393:208":{"crate_id":5,"path":["alloc","string","ToString"],"kind":"trait"},"16:4762:42258":{"crate_id":16,"path":["gimli","constants","DwOrd"],"kind":"struct"},"5:1204:3206":{"crate_id":5,"path":["alloc","collections","btree","borrow","DormantMutRef"],"kind":"struct"},"6:5312:40060":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","timex"],"kind":"struct"},"1:10704:125":{"crate_id":1,"path":["std","fs","FileType"],"kind":"struct"},"17:13942:49410":{"crate_id":17,"path":["object","pe","ImageSeparateDebugHeader"],"kind":"struct"},"1:15742:1700":{"crate_id":1,"path":["std","unit"],"kind":"primitive"},"1:11336:2085":{"crate_id":1,"path":["std","path","Prefix"],"kind":"enum"},"1:11152:9536":{"crate_id":1,"path":["std","net","parser","AddrParseError"],"kind":"struct"},"2:10140:2414":{"crate_id":2,"path":["core","fmt","UpperExp"],"kind":"trait"},"16:2866:3736":{"crate_id":16,"path":["gimli","common","DebugAddrIndex"],"kind":"struct"},"16:3264:3745":{"crate_id":16,"path":["gimli","common","DebugStrOffsetsIndex"],"kind":"struct"},"2:46356:55274":{"crate_id":2,"path":["core","iter","adapters","flatten","FlattenCompat"],"kind":"struct"},"2:2204:2461":{"crate_id":2,"path":["core","ptr","metadata","PtrComponents"],"kind":"struct"},"16:6768:3776":{"crate_id":16,"path":["gimli","read","lookup","PubStuffParser"],"kind":"struct"},"2:49059:2861":{"crate_id":2,"path":["core","slice","iter","RChunksExact"],"kind":"struct"},"6:4331:39441":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_vm"],"kind":"struct"},"16:4995:42316":{"crate_id":16,"path":["gimli","constants","DwMacro"],"kind":"struct"},"2:7987:1925":{"crate_id":2,"path":["core","iter","sources","empty","Empty"],"kind":"struct"},"2:50095:2908":{"crate_id":2,"path":["core","task","wake","RawWakerVTable"],"kind":"struct"},"6:599:36421":{"crate_id":6,"path":["libc","unix","linger"],"kind":"struct"},"2:49929:2984":{"crate_id":2,"path":["core","time","FromFloatSecsErrorKind"],"kind":"enum"},"18:739:59563":{"crate_id":18,"path":["memchr","memmem","twoway","Suffix"],"kind":"struct"},"17:9133:43270":{"crate_id":17,"path":["object","common","RelocationEncoding"],"kind":"enum"},"16:2843:3735":{"crate_id":16,"path":["gimli","common","DebugAddrBase"],"kind":"struct"},"17:9162:3827":{"crate_id":17,"path":["object","common","FileFlags"],"kind":"enum"},"2:27770:2650":{"crate_id":2,"path":["core","num","wrapping","Wrapping"],"kind":"struct"},"1:10730:2248":{"crate_id":1,"path":["std","io","buffered","linewritershim","LineWriterShim"],"kind":"struct"},"6:4215:39430":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Phdr"],"kind":"struct"},"16:5029:42325":{"crate_id":16,"path":["gimli","constants","DwRle"],"kind":"struct"},"16:5295:41648":{"crate_id":16,"path":["gimli","endianity","RunTimeEndian"],"kind":"enum"},"16:3604:41651":{"crate_id":16,"path":["gimli","arch","X86_64"],"kind":"struct"},"1:9648:50306":{"crate_id":1,"path":["std","sys_common","rwlock","StaticRwLockReadGuard"],"kind":"struct"},"1:11816:2129":{"crate_id":1,"path":["std","process","CommandArgs"],"kind":"struct"},"1:14394:114":{"crate_id":1,"path":["std","sys","unix","fs","DirBuilder"],"kind":"struct"},"17:11030:123":{"crate_id":17,"path":["object","read","Error"],"kind":"struct"},"5:3325:3157":{"crate_id":5,"path":["alloc","collections","btree","set","DifferenceInner"],"kind":"enum"},"2:2779:2584":{"crate_id":2,"path":["core","borrow","BorrowMut"],"kind":"trait"},"2:24555:2936":{"crate_id":2,"path":["core","num","nonzero","NonZeroI128"],"kind":"struct"},"1:11001:1897":{"crate_id":1,"path":["std","io","Bytes"],"kind":"struct"},"16:4823:42269":{"crate_id":16,"path":["gimli","constants","DwIdx"],"kind":"struct"},"5:8141:180":{"crate_id":5,"path":["alloc","collections","btree","set","Range"],"kind":"struct"},"17:11738:44185":{"crate_id":17,"path":["object","elf","Versym"],"kind":"struct"},"9:469:41243":{"crate_id":9,"path":["miniz_oxide","inflate","core","DecompressorOxide"],"kind":"struct"},"2:46131:3053":{"crate_id":2,"path":["core","char","CaseMappingIter"],"kind":"enum"},"6:4395:39449":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_fprog"],"kind":"struct"},"17:12262:48151":{"crate_id":17,"path":["object","macho","DylinkerCommand"],"kind":"struct"},"2:49647:2378":{"crate_id":2,"path":["core","str","pattern","CharSliceSearcher"],"kind":"struct"},"17:13760:49331":{"crate_id":17,"path":["object","pe","ImageHotPatchHashes"],"kind":"struct"},"5:1461:2070":{"crate_id":5,"path":["alloc","collections","btree","map","entry","OccupiedEntry"],"kind":"struct"},"2:22703:2664":{"crate_id":2,"path":["core","core_simd","masks","mask_impl","Mask"],"kind":"struct"},"2:46050:3055":{"crate_id":2,"path":["core","char","decode","DecodeUtf16Error"],"kind":"struct"},"2:53191:17665":{"crate_id":2,"path":["core","core_arch","x86","__m512d"],"kind":"struct"},"2:5533:757":{"crate_id":2,"path":["core","iter"],"kind":"module"},"1:6465:1975":{"crate_id":1,"path":["std","os","unix","thread","JoinHandleExt"],"kind":"trait"},"1:4270:2256":{"crate_id":1,"path":["std","io","stdio","StdoutRaw"],"kind":"struct"},"5:1000:1994":{"crate_id":5,"path":["alloc","collections","binary_heap","Iter"],"kind":"struct"},"2:48240:104":{"crate_id":2,"path":["core","fmt","rt","v1","Count"],"kind":"enum"},"17:12221:48148":{"crate_id":17,"path":["object","macho","SubUmbrellaCommand"],"kind":"struct"},"5:3743:1994":{"crate_id":5,"path":["alloc","collections","linked_list","Iter"],"kind":"struct"},"16:6591:3623":{"crate_id":16,"path":["gimli","read","loclists","DebugLocLists"],"kind":"struct"},"6:4120:39422":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_ff_erase"],"kind":"struct"},"5:5871:56469":{"crate_id":5,"path":["alloc","slice","merge","MergeHole"],"kind":"struct"},"6:6051:37237":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statfs64"],"kind":"struct"},"2:45665:185":{"crate_id":2,"path":["core","ops","range","RangeToInclusive"],"kind":"struct"},"2:9648:83":{"crate_id":2,"path":["core","sync","atomic","AtomicPtr"],"kind":"struct"},"16:7119:3499":{"crate_id":16,"path":["gimli","read","op","Expression"],"kind":"struct"},"2:53127:17661":{"crate_id":2,"path":["core","core_arch","x86","__m256"],"kind":"struct"},"1:11480:1994":{"crate_id":1,"path":["std","path","Iter"],"kind":"struct"},"1:4539:1873":{"crate_id":1,"path":["std","io","Read"],"kind":"trait"},"2:48737:3070":{"crate_id":2,"path":["core","slice","ascii","EscapeAscii"],"kind":"struct"},"16:5231:42502":{"crate_id":16,"path":["gimli","constants","DwOp"],"kind":"struct"},"16:6605:3580":{"crate_id":16,"path":["gimli","read","loclists","LocationLists"],"kind":"struct"},"17:1311:3914":{"crate_id":17,"path":["object","read","coff","relocation","CoffRelocationIterator"],"kind":"struct"},"6:4470:39458":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_setup"],"kind":"struct"},"18:811:3929":{"crate_id":18,"path":["memchr","memmem","Finder"],"kind":"struct"},"5:69:3135":{"crate_id":5,"path":["alloc","raw_vec","RawVec"],"kind":"struct"},"2:46677:2160":{"crate_id":2,"path":["core","iter","sources","once","Once"],"kind":"struct"},"1:14686:50299":{"crate_id":1,"path":["std","sys","unix","process","process_inner","do_exec","Reset"],"kind":"struct"},"6:4306:39438":{"crate_id":6,"path":["libc","unix","linux_like","linux","arpd_request"],"kind":"struct"},"12:1253:2072":{"crate_id":12,"path":["hashbrown","map","OccupiedError"],"kind":"struct"},"6:4300:39437":{"crate_id":6,"path":["libc","unix","linux_like","linux","in6_pktinfo"],"kind":"struct"},"16:6491:3619":{"crate_id":16,"path":["gimli","read","line","CompleteLineProgram"],"kind":"struct"},"17:10489:3899":{"crate_id":17,"path":["object","read","elf","version","VerdefIterator"],"kind":"struct"},"6:5379:40064":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","Elf32_Chdr"],"kind":"struct"},"1:3108:124":{"crate_id":1,"path":["std","fs","File"],"kind":"struct"},"2:46300:2625":{"crate_id":2,"path":["core","iter","adapters","cloned","Cloned"],"kind":"struct"},"6:4358:39444":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_tp"],"kind":"struct"},"1:11077:1962":{"crate_id":1,"path":["std","net","ip","Ipv6Addr"],"kind":"struct"},"5:1581:1994":{"crate_id":5,"path":["alloc","collections","btree","map","Iter"],"kind":"struct"},"2:10941:2058":{"crate_id":2,"path":["core","slice","iter","IterMut"],"kind":"struct"},"2:13862:2909":{"crate_id":2,"path":["core","task","wake","Waker"],"kind":"struct"},"6:1533:37299":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreqn"],"kind":"struct"},"2:53116:17660":{"crate_id":2,"path":["core","core_arch","x86","__m256i"],"kind":"struct"},"1:11387:2095":{"crate_id":1,"path":["std","path","State"],"kind":"enum"},"2:12847:2366":{"crate_id":2,"path":["core","str","pattern","Pattern"],"kind":"trait"},"6:4459:39457":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_alg"],"kind":"struct"},"1:14364:49988":{"crate_id":1,"path":["std","sys","unix","fs","FilePermissions"],"kind":"struct"},"17:13258:48864":{"crate_id":17,"path":["object","pe","ImageSymbol"],"kind":"struct"},"5:983:3165":{"crate_id":5,"path":["alloc","collections","binary_heap","Hole"],"kind":"struct"},"2:22844:2665":{"crate_id":2,"path":["core","core_simd","masks","MaskElement"],"kind":"trait"},"2:49126:2870":{"crate_id":2,"path":["core","str","iter","CharIndices"],"kind":"struct"},"6:4241:39432":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Shdr"],"kind":"struct"},"6:3868:39396":{"crate_id":6,"path":["libc","unix","linux_like","linux","glob_t"],"kind":"struct"},"2:3079:74":{"crate_id":2,"path":["core","convert","AsMut"],"kind":"trait"},"2:50127:1849":{"crate_id":2,"path":["core","alloc","layout","LayoutError"],"kind":"struct"},"1:5697:1864":{"crate_id":1,"path":["std","os","unix","fs","DirEntryExt2"],"kind":"trait"},"2:22792:1833":{"crate_id":2,"path":["core","core_simd","masks","to_bitmask","sealed","Sealed"],"kind":"trait"},"2:12308:3028":{"crate_id":2,"path":["core","str","converts","from_utf8"],"kind":"function"},"6:5469:40072":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","utmpx"],"kind":"struct"},"2:22650:1972":{"crate_id":2,"path":["core","core_simd","lane_count","SupportedLaneCount"],"kind":"trait"},"1:1075:1979":{"crate_id":1,"path":["std","ascii","AsciiExt"],"kind":"trait"},"2:13641:173":{"crate_id":2,"path":["core","future","pending","Pending"],"kind":"struct"},"2:3425:126":{"crate_id":2,"path":["core","ops","function","Fn"],"kind":"trait"},"17:10962:43556":{"crate_id":17,"path":["object","read","pe","section","PeSegmentIterator"],"kind":"struct"},"16:5855:3484":{"crate_id":16,"path":["gimli","read","cfi","CallFrameInstruction"],"kind":"enum"},"5:5299:186":{"crate_id":5,"path":["alloc","rc","Rc"],"kind":"struct"},"6:4013:39409":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_absinfo"],"kind":"struct"},"1:7559:2127":{"crate_id":1,"path":["std","process","ChildStderr"],"kind":"struct"},"16:3800:41696":{"crate_id":16,"path":["gimli","constants","DwChildren"],"kind":"struct"},"2:50899:2697":{"crate_id":2,"path":["core","core_arch","simd","u16x4"],"kind":"struct"},"2:46124:3052":{"crate_id":2,"path":["core","char","ToUppercase"],"kind":"struct"},"16:5488:3465":{"crate_id":16,"path":["gimli","read","cfi","SectionBaseAddresses"],"kind":"struct"},"6:4023:39410":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_keymap_entry"],"kind":"struct"},"6:5282:40058":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_mmap_hdr"],"kind":"struct"},"17:13446:49297":{"crate_id":17,"path":["object","pe","ImageImportByName"],"kind":"struct"},"17:10028:43336":{"crate_id":17,"path":["object","read","archive","ArchiveFile"],"kind":"struct"},"12:2323:58657":{"crate_id":12,"path":["hashbrown","raw","TableLayout"],"kind":"struct"},"17:12582:48173":{"crate_id":17,"path":["object","macho","BuildVersionCommand"],"kind":"struct"},"1:12074:2009":{"crate_id":1,"path":["std","time","Instant"],"kind":"struct"},"1:7151:52081":{"crate_id":1,"path":["std","path","fmt","DebugHelper"],"kind":"struct"},"17:11678:44018":{"crate_id":17,"path":["object","elf","ProgramHeader32"],"kind":"struct"},"16:6238:3568":{"crate_id":16,"path":["gimli","read","line","DebugLine"],"kind":"struct"},"5:8088:1996":{"crate_id":5,"path":["alloc","collections","binary_heap","IntoIter"],"kind":"struct"},"12:866:2036":{"crate_id":12,"path":["hashbrown","map","Drain"],"kind":"struct"},"5:2246:3209":{"crate_id":5,"path":["alloc","collections","btree","navigate","LeafRange"],"kind":"struct"},"6:6636:40839":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","align","max_align_t"],"kind":"struct"},"14:189:41566":{"crate_id":14,"path":["rustc_demangle","Demangle"],"kind":"struct"},"5:8317:3173":{"crate_id":5,"path":["alloc","ffi","c_str","IntoStringError"],"kind":"struct"},"6:3918:39400":{"crate_id":6,"path":["libc","unix","linux_like","linux","signalfd_siginfo"],"kind":"struct"},"17:10200:43350":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdatIterator"],"kind":"struct"},"6:4066:39416":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_ramp_effect"],"kind":"struct"},"5:7239:56425":{"crate_id":5,"path":["alloc","vec","drain","drop","DropGuard"],"kind":"struct"},"1:8020:2213":{"crate_id":1,"path":["std","sync","mpsc","shared","Packet"],"kind":"struct"},"16:5766:3481":{"crate_id":16,"path":["gimli","read","cfi","UnwindTableRow"],"kind":"struct"},"17:13331:48934":{"crate_id":17,"path":["object","pe","ImageAuxSymbolFunctionBeginEnd"],"kind":"struct"},"1:11427:2097":{"crate_id":1,"path":["std","path","Component"],"kind":"enum"},"17:11932:47965":{"crate_id":17,"path":["object","macho","DyldCacheMappingInfo"],"kind":"struct"},"6:5371:40063":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","Elf64_Chdr"],"kind":"struct"},"6:4281:39435":{"crate_id":6,"path":["libc","unix","linux_like","linux","posix_spawnattr_t"],"kind":"struct"},"1:15136:2271":{"crate_id":1,"path":["std","sys_common","net","TcpListener"],"kind":"struct"},"2:48942:2851":{"crate_id":2,"path":["core","slice","iter","Windows"],"kind":"struct"},"17:11653:44016":{"crate_id":17,"path":["object","elf","Rel64"],"kind":"struct"},"17:13772:49366":{"crate_id":17,"path":["object","pe","ImageArmRuntimeFunctionEntry"],"kind":"struct"},"17:13356:48936":{"crate_id":17,"path":["object","pe","ImageAuxSymbolSection"],"kind":"struct"},"6:88:36036":{"crate_id":6,"path":["libc","unix","DIR"],"kind":"enum"},"16:6269:3615":{"crate_id":16,"path":["gimli","read","line","LineInstruction"],"kind":"enum"},"2:46248:8541":{"crate_id":2,"path":["core","ffi","VaListImpl"],"kind":"struct"},"2:51046:55169":{"crate_id":2,"path":["core","core_arch","simd","i64x1"],"kind":"struct"},"16:7174:3632":{"crate_id":16,"path":["gimli","read","pubnames","PubNamesEntry"],"kind":"struct"},"17:11588:43977":{"crate_id":17,"path":["object","elf","Sym64"],"kind":"struct"},"1:10492:2192":{"crate_id":1,"path":["std","thread","Thread"],"kind":"struct"},"6:3957:39403":{"crate_id":6,"path":["libc","unix","linux_like","linux","packet_mreq"],"kind":"struct"},"2:6331:2614":{"crate_id":2,"path":["core","iter","adapters","flatten","FlatMap"],"kind":"struct"},"5:3022:3093":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Owned"],"kind":"enum"},"18:152:49773":{"crate_id":18,"path":["memchr","memchr","iter","Memchr2"],"kind":"struct"},"2:45987:28709":{"crate_id":2,"path":["core","async_iter","from_iter","FromIter"],"kind":"struct"},"17:9886:43280":{"crate_id":17,"path":["object","read","any","SymbolIterator"],"kind":"struct"},"2:48533:55460":{"crate_id":2,"path":["core","hash","sip","Sip13Rounds"],"kind":"struct"},"2:12867:2364":{"crate_id":2,"path":["core","str","pattern","DoubleEndedSearcher"],"kind":"trait"},"2:48502:2587":{"crate_id":2,"path":["core","hash","sip","SipHasher"],"kind":"struct"},"2:47293:2972":{"crate_id":2,"path":["core","panic","panic_info","PanicInfo"],"kind":"struct"},"18:720:55466":{"crate_id":18,"path":["memchr","memmem","twoway","TwoWay"],"kind":"struct"},"17:13296:48869":{"crate_id":17,"path":["object","pe","ImageSymbolExBytes"],"kind":"struct"},"17:10224:43355":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdatSectionIterator"],"kind":"struct"},"2:49449:2887":{"crate_id":2,"path":["core","str","iter","EscapeDebug"],"kind":"struct"},"2:8482:153":{"crate_id":2,"path":["core","iter","traits","iterator","Iterator"],"kind":"trait"},"1:11080:2147":{"crate_id":1,"path":["std","net","ip","Ipv6MulticastScope"],"kind":"enum"},"2:3187:203":{"crate_id":2,"path":["core","marker","StructuralPartialEq"],"kind":"trait"},"16:6219:3613":{"crate_id":16,"path":["gimli","read","aranges","ArangeEntry"],"kind":"struct"},"2:2190:2457":{"crate_id":2,"path":["core","ptr","metadata","Pointee"],"kind":"trait"},"2:10343:142":{"crate_id":2,"path":["core","hash","Hasher"],"kind":"trait"},"16:6021:3734":{"crate_id":16,"path":["gimli","read","dwarf","RangeIterInner"],"kind":"enum"},"1:3539:50301":{"crate_id":1,"path":["std","io","buffered","bufwriter","flush_buf","BufGuard"],"kind":"struct"},"6:4060:39415":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_constant_effect"],"kind":"struct"},"18:774:59540":{"crate_id":18,"path":["memchr","memmem","x86","avx","nostd","Forward"],"kind":"struct"},"2:46704:30863":{"crate_id":2,"path":["core","iter","sources","repeat_with","RepeatWith"],"kind":"struct"},"2:51694:2711":{"crate_id":2,"path":["core","core_arch","simd","u8x32"],"kind":"struct"},"5:1827:56425":{"crate_id":5,"path":["alloc","collections","btree","map","drop","DropGuard"],"kind":"struct"},"1:15157:2278":{"crate_id":1,"path":["std","sys_common","net","UdpSocket"],"kind":"struct"},"2:51820:2703":{"crate_id":2,"path":["core","core_arch","simd","u32x8"],"kind":"struct"},"12:1100:2069":{"crate_id":12,"path":["hashbrown","map","Entry"],"kind":"enum"},"2:12913:2372":{"crate_id":2,"path":["core","str","pattern","MultiCharEqPattern"],"kind":"struct"},"17:11358:3870":{"crate_id":17,"path":["object","read","CompressedFileRange"],"kind":"struct"},"6:6644:40840":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","align","sem_t"],"kind":"struct"}},"external_crates":{"5":{"name":"alloc","html_root_url":"https://doc.rust-lang.org/nightly/"},"4":{"name":"rustc_std_workspace_core","html_root_url":"https://doc.rust-lang.org/nightly/"},"9":{"name":"miniz_oxide","html_root_url":"https://doc.rust-lang.org/nightly/"},"6":{"name":"libc","html_root_url":"https://doc.rust-lang.org/nightly/"},"2":{"name":"core","html_root_url":"https://doc.rust-lang.org/nightly/"},"10":{"name":"rustc_std_workspace_alloc","html_root_url":"https://doc.rust-lang.org/nightly/"},"19":{"name":"panic_unwind","html_root_url":"https://doc.rust-lang.org/nightly/"},"14":{"name":"rustc_demangle","html_root_url":"https://doc.rust-lang.org/nightly/"},"15":{"name":"addr2line","html_root_url":"https://doc.rust-lang.org/nightly/"},"11":{"name":"adler","html_root_url":"https://docs.rs/adler/0.2.3/"},"18":{"name":"memchr","html_root_url":"https://doc.rust-lang.org/nightly/"},"8":{"name":"cfg_if","html_root_url":"https://docs.rs/cfg-if/"},"13":{"name":"std_detect","html_root_url":"https://doc.rust-lang.org/nightly/"},"3":{"name":"compiler_builtins","html_root_url":"https://doc.rust-lang.org/nightly/"},"7":{"name":"unwind","html_root_url":"https://doc.rust-lang.org/nightly/"},"17":{"name":"object","html_root_url":"https://doc.rust-lang.org/nightly/"},"12":{"name":"hashbrown","html_root_url":"https://doc.rust-lang.org/nightly/"},"1":{"name":"std","html_root_url":"https://doc.rust-lang.org/nightly/"},"16":{"name":"gimli","html_root_url":"https://doc.rust-lang.org/nightly/"}},"format_version":15}