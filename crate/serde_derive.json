{"root":"0:0:2377","crate_version":"1.0.201","includes_private":false,"index":{"2:13299:36315":{"id":"2:13299:36315","crate_id":2,"name":"lines_any","span":null,"visibility":"public","docs":"An iterator over the lines of a string.","links":{},"attrs":["#[deprecated(since = \"1.4.0\", note = \"use lines() instead now\", suggestion =\n\"lines\")]"],"deprecation":{"since":"1.4.0","note":"use lines() instead now"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"LinesAny","id":"2:44229:9520","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5618:2751":{"id":"5:5618:2751","crate_id":5,"name":"replace","span":null,"visibility":"public","docs":"Replaces all matches of a pattern with another string.\n\n`replace` creates a new [`String`], and copies the data from this string slice into it.\nWhile doing so, it attempts to find matches of a pattern. If it finds any, it\nreplaces them with the replacement string slice.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"this is old\";\n\nassert_eq!(\"this is new\", s.replace(\"old\", \"new\"));\nassert_eq!(\"than an old\", s.replace(\"is\", \"an\"));\n```\n\nWhen the pattern doesn't match, it returns this string slice as [`String`]:\n\n```\nlet s = \"this is old\";\nassert_eq!(s, s.replace(\"cookie monster\", \"little lamb\"));\n```","links":{"`String`":"5:7645:243"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the replaced string as a new allocation, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["from",{"generic":"P"}],["to",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7645:243","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12961:16506","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:965:2374":{"id":"0:965:2374","crate_id":0,"name":"Deserialize","span":{"filename":"src/lib.rs","begin":[97,0],"end":[102,1]},"visibility":"public","docs":null,"links":{},"attrs":["#[proc_macro_derive(Deserialize, attributes(serde))]"],"deprecation":null,"inner":{"proc_macro":{"kind":"derive","helpers":["serde"]}}},"2:13294:2958":{"id":"2:13294:2958","crate_id":2,"name":"char_indices","span":null,"visibility":"public","docs":"Returns an iterator over the [`char`]s of a string slice, and their\npositions.\n\nAs a string slice consists of valid UTF-8, we can iterate through a\nstring slice by [`char`]. This method returns an iterator of both\nthese [`char`]s, as well as their byte positions.\n\nThe iterator yields tuples. The position is first, the [`char`] is\nsecond.\n\n# Examples\n\nBasic usage:\n\n```\nlet word = \"goodbye\";\n\nlet count = word.char_indices().count();\nassert_eq!(7, count);\n\nlet mut char_indices = word.char_indices();\n\nassert_eq!(Some((0, 'g')), char_indices.next());\nassert_eq!(Some((1, 'o')), char_indices.next());\nassert_eq!(Some((2, 'o')), char_indices.next());\nassert_eq!(Some((3, 'd')), char_indices.next());\nassert_eq!(Some((4, 'b')), char_indices.next());\nassert_eq!(Some((5, 'y')), char_indices.next());\nassert_eq!(Some((6, 'e')), char_indices.next());\n\nassert_eq!(None, char_indices.next());\n```\n\nRemember, [`char`]s might not match your intuition about characters:\n\n[`char`]: prim@char\n\n```\nlet yes = \"yÃÜes\";\n\nlet mut char_indices = yes.char_indices();\n\nassert_eq!(Some((0, 'y')), char_indices.next()); // not (0, 'yÃÜ')\nassert_eq!(Some((1, '\\u{0306}')), char_indices.next());\n\n// note the 3 here - the previous character took up two bytes\nassert_eq!(Some((3, 'e')), char_indices.next());\nassert_eq!(Some((4, 's')), char_indices.next());\n\nassert_eq!(None, char_indices.next());\n```","links":{"prim@char":"1:12341:471"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"CharIndices","id":"2:43941:9503","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13274:3482":{"id":"2:13274:3482","crate_id":2,"name":"as_bytes","span":null,"visibility":"public","docs":"Converts a string slice to a byte slice. To convert the byte slice back\ninto a string slice, use the [`from_utf8`] function.\n\n# Examples\n\n```\nlet bytes = \"bors\".as_bytes();\nassert_eq!(b\"bors\", bytes);\n```","links":{"`from_utf8`":"2:12502:16509"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"primitive":"u8"}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13269:36310":{"id":"2:13269:36310","crate_id":2,"name":"floor_char_boundary","span":null,"visibility":"public","docs":"Finds the closest `x` not exceeding `index` where `is_char_boundary(x)` is `true`.\n\nThis method can help you truncate a string so that it's still valid UTF-8, but doesn't\nexceed a given number of bytes. Note that this is done purely at the character level\nand can still visually split graphemes, even though the underlying characters aren't\nsplit. For example, the emoji üßë‚Äçüî¨ (scientist) could be split so that the string only\nincludes üßë (person) instead.\n\n# Examples\n\n```\n#![feature(round_char_boundary)]\nlet s = \"‚ù§Ô∏èüß°üíõüíöüíôüíú\";\nassert_eq!(s.len(), 26);\nassert!(!s.is_char_boundary(13));\n\nlet closest = s.floor_char_boundary(13);\nassert_eq!(closest, 10);\nassert_eq!(&s[..closest], \"‚ù§Ô∏èüß°\");\n```","links":{},"attrs":["#[unstable(feature = \"round_char_boundary\", issue = \"93743\")]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["index",{"primitive":"usize"}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13280:31947":{"id":"2:13280:31947","crate_id":2,"name":"get_mut","span":null,"visibility":"public","docs":"Returns a mutable subslice of `str`.\n\nThis is the non-panicking alternative to indexing the `str`. Returns\n[`None`] whenever equivalent indexing operation would panic.\n\n# Examples\n\n```\nlet mut v = String::from(\"hello\");\n// correct length\nassert!(v.get_mut(0..5).is_some());\n// out of bounds\nassert!(v.get_mut(..42).is_none());\nassert_eq!(Some(\"he\"), v.get_mut(0..2).map(|v| &*v));\n\nassert_eq!(\"hello\", v);\n{\n    let s = v.get_mut(0..2);\n    let s = s.map(|s| {\n        s.make_ascii_uppercase();\n        &*s\n    });\n    assert_eq!(Some(\"HE\"), s);\n}\nassert_eq!(\"HEllo\", v);\n```","links":{"`None`":"2:42075:191"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"resolved_path":{"name":"Option","id":"2:42073:194","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"2:11045:239","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"2:11045:239","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13321:31978":{"id":"2:13321:31978","crate_id":2,"name":"split_inclusive","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by\ncharacters matched by a pattern. Differs from the iterator produced by\n`split` in that `split_inclusive` leaves the matched part as the\nterminator of the substring.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\\nlittle lamb\\nlittle lamb.\"\n    .split_inclusive('\\n').collect();\nassert_eq!(v, [\"Mary had a little lamb\\n\", \"little lamb\\n\", \"little lamb.\"]);\n```\n\nIf the last element of the string is matched,\nthat element will be considered the terminator of the preceding substring.\nThat substring will be the last item returned by the iterator.\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\\nlittle lamb\\nlittle lamb.\\n\"\n    .split_inclusive('\\n').collect();\nassert_eq!(v, [\"Mary had a little lamb\\n\", \"little lamb\\n\", \"little lamb.\\n\"]);\n```","links":{"prim@char":"1:12341:471","self::pattern":"2:12955:4358"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"SplitInclusive","id":"2:12770:9436","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12961:16506","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13392:28736":{"id":"2:13392:28736","crate_id":2,"name":"make_ascii_lowercase","span":null,"visibility":"public","docs":"Converts this string to its ASCII lower case equivalent in-place.\n\nASCII letters 'A' to 'Z' are mapped to 'a' to 'z',\nbut non-ASCII letters are unchanged.\n\nTo return a new lowercased value without modifying the existing one, use\n[`to_ascii_lowercase()`].\n\n[`to_ascii_lowercase()`]: #method.to_ascii_lowercase\n\n# Examples\n\n```\nlet mut s = String::from(\"GR√ú√üE, J√úRGEN ‚ù§\");\n\ns.make_ascii_lowercase();\n\nassert_eq!(\"gr√ú√üe, j√úrgen ‚ù§\", s);\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13282:31948":{"id":"2:13282:31948","crate_id":2,"name":"get_unchecked","span":null,"visibility":"public","docs":"Returns an unchecked subslice of `str`.\n\nThis is the unchecked alternative to indexing the `str`.\n\n# Safety\n\nCallers of this function are responsible that these preconditions are\nsatisfied:\n\n* The starting index must not exceed the ending index;\n* Indexes must be within bounds of the original slice;\n* Indexes must lie on UTF-8 sequence boundaries.\n\nFailing that, the returned string slice may reference invalid memory or\nviolate the invariants communicated by the `str` type.\n\n# Examples\n\n```\nlet v = \"üóª‚ààüåè\";\nunsafe {\n    assert_eq!(\"üóª\", v.get_unchecked(0..4));\n    assert_eq!(\"‚àà\", v.get_unchecked(4..7));\n    assert_eq!(\"üåè\", v.get_unchecked(7..11));\n}\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"2:11045:239","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"2:11045:239","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"0:964:2366":{"id":"0:964:2366","crate_id":0,"name":"Serialize","span":{"filename":"src/lib.rs","begin":[89,0],"end":[94,1]},"visibility":"public","docs":null,"links":{},"attrs":["#[proc_macro_derive(Serialize, attributes(serde))]"],"deprecation":null,"inner":{"proc_macro":{"kind":"derive","helpers":["serde"]}}},"2:13268:36309":{"id":"2:13268:36309","crate_id":2,"name":"is_char_boundary","span":null,"visibility":"public","docs":"Checks that `index`-th byte is the first byte in a UTF-8 code point\nsequence or the end of the string.\n\nThe start and end of the string (when `index == self.len()`) are\nconsidered to be boundaries.\n\nReturns `false` if `index` is greater than `self.len()`.\n\n# Examples\n\n```\nlet s = \"L√∂we ËÄÅËôé L√©opard\";\nassert!(s.is_char_boundary(0));\n// start of `ËÄÅ`\nassert!(s.is_char_boundary(6));\nassert!(s.is_char_boundary(s.len()));\n\n// second byte of `√∂`\nassert!(!s.is_char_boundary(2));\n\n// third byte of `ËÄÅ`\nassert!(!s.is_char_boundary(8));\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["index",{"primitive":"usize"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13391:28735":{"id":"2:13391:28735","crate_id":2,"name":"make_ascii_uppercase","span":null,"visibility":"public","docs":"Converts this string to its ASCII upper case equivalent in-place.\n\nASCII letters 'a' to 'z' are mapped to 'A' to 'Z',\nbut non-ASCII letters are unchanged.\n\nTo return a new uppercased value without modifying the existing one, use\n[`to_ascii_uppercase()`].\n\n[`to_ascii_uppercase()`]: #method.to_ascii_uppercase\n\n# Examples\n\n```\nlet mut s = String::from(\"Gr√º√üe, J√ºrgen ‚ù§\");\n\ns.make_ascii_uppercase();\n\nassert_eq!(\"GR√º√üE, J√ºRGEN ‚ù§\", s);\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13368:2630":{"id":"2:13368:2630","crate_id":2,"name":"trim_start_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. `start` in this context means the first\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be left side, and for right-to-left languages like\nArabic or Hebrew, this will be the right side.\n\n# Examples\n\n```\nassert_eq!(\"11foo1bar11\".trim_start_matches('1'), \"foo1bar11\");\nassert_eq!(\"123foo1bar123\".trim_start_matches(char::is_numeric), \"foo1bar123\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_start_matches(x), \"foo1bar12\");\n```","links":{"prim@char":"1:12341:471","self::pattern":"2:12955:4358"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12961:16506","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5624:37026":{"id":"5:5624:37026","crate_id":5,"name":"to_lowercase","span":null,"visibility":"public","docs":"Returns the lowercase equivalent of this string slice, as a new [`String`].\n\n'Lowercase' is defined according to the terms of the Unicode Derived Core Property\n`Lowercase`.\n\nSince some characters can expand into multiple characters when changing\nthe case, this function returns a [`String`] instead of modifying the\nparameter in-place.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"HELLO\";\n\nassert_eq!(\"hello\", s.to_lowercase());\n```\n\nA tricky example, with sigma:\n\n```\nlet sigma = \"Œ£\";\n\nassert_eq!(\"œÉ\", sigma.to_lowercase());\n\n// but at the end of a word, it's œÇ, not œÉ:\nlet odysseus = \"·ΩàŒîŒ•Œ£Œ£ŒïŒéŒ£\";\n\nassert_eq!(\"·ΩÄŒ¥œÖœÉœÉŒµœçœÇ\", odysseus.to_lowercase());\n```\n\nLanguages without case are not changed:\n\n```\nlet new_year = \"ÂÜúÂéÜÊñ∞Âπ¥\";\n\nassert_eq!(new_year, new_year.to_lowercase());\n```","links":{"`String`":"5:7645:243"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the lowercase string as a new String, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7645:243","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13324:31980":{"id":"2:13324:31980","crate_id":2,"name":"rsplit","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by\ncharacters matched by a pattern and yielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`split`] method can be used.\n\n[`split`]: str::split\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".rsplit(' ').collect();\nassert_eq!(v, [\"lamb\", \"little\", \"a\", \"had\", \"Mary\"]);\n\nlet v: Vec<&str> = \"\".rsplit('X').collect();\nassert_eq!(v, [\"\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".rsplit('X').collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"\", \"lion\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".rsplit(\"::\").collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"lion\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".rsplit(|c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"ghi\", \"def\", \"abc\"]);\n```","links":{"self::pattern":"2:12955:4358","`DoubleEndedIterator`":"2:8333:129","prim@char":"1:12341:471","str::split":"2:13318:28798"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RSplit","id":"2:43983:9437","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12961:16506","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12961:16506","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12976:16507","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13286:36313":{"id":"2:13286:36313","crate_id":2,"name":"slice_unchecked","span":null,"visibility":"public","docs":"Creates a string slice from another string slice, bypassing safety\nchecks.\n\nThis is generally not recommended, use with caution! For a safe\nalternative see [`str`] and [`Index`].\n\n[`Index`]: crate::ops::Index\n\nThis new slice goes from `begin` to `end`, including `begin` but\nexcluding `end`.\n\nTo get a mutable string slice instead, see the\n[`slice_mut_unchecked`] method.\n\n[`slice_mut_unchecked`]: str::slice_mut_unchecked\n\n# Safety\n\nCallers of this function are responsible that three preconditions are\nsatisfied:\n\n* `begin` must not exceed `end`.\n* `begin` and `end` must be byte positions within the string slice.\n* `begin` and `end` must lie on UTF-8 sequence boundaries.\n\n# Examples\n\n```\nlet s = \"L√∂we ËÄÅËôé L√©opard\";\n\nunsafe {\n    assert_eq!(\"L√∂we ËÄÅËôé L√©opard\", s.slice_unchecked(0, 21));\n}\n\nlet s = \"Hello, world!\";\n\nunsafe {\n    assert_eq!(\"world\", s.slice_unchecked(7, 12));\n}\n```","links":{"`str`":"1:12347:1722","str::slice_mut_unchecked":"2:13287:36314","crate::ops::Index":"2:39619:3127"},"attrs":["#[deprecated(since = \"1.29.0\", note =\n\"use `get_unchecked(begin..end)` instead\")]","#[must_use]"],"deprecation":{"since":"1.29.0","note":"use `get_unchecked(begin..end)` instead"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["begin",{"primitive":"usize"}],["end",{"primitive":"usize"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"2:13339:31986":{"id":"2:13339:31986","crate_id":2,"name":"split_once","span":null,"visibility":"public","docs":"Splits the string on the first occurrence of the specified delimiter and\nreturns prefix before delimiter and suffix after delimiter.\n\n# Examples\n\n```\nassert_eq!(\"cfg\".split_once('='), None);\nassert_eq!(\"cfg=\".split_once('='), Some((\"cfg\", \"\")));\nassert_eq!(\"cfg=foo\".split_once('='), Some((\"cfg\", \"foo\")));\nassert_eq!(\"cfg=foo=bar\".split_once('='), Some((\"cfg\", \"foo=bar\")));\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["delimiter",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:42073:194","args":{"angle_bracketed":{"args":[{"type":{"tuple":[{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12961:16506","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13377:36327":{"id":"2:13377:36327","crate_id":2,"name":"trim_end_matches","span":null,"visibility":"public","docs":"Returns a string slice with all suffixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. `end` in this context means the last\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be right side, and for right-to-left languages like\nArabic or Hebrew, this will be the left side.\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_end_matches('1'), \"11foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_end_matches(char::is_numeric), \"123foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_end_matches(x), \"12foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1fooX\".trim_end_matches(|c| c == '1' || c == 'X'), \"1foo\");\n```","links":{"prim@char":"1:12341:471","self::pattern":"2:12955:4358"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12961:16506","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12961:16506","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12976:16507","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:86-0:994:2597":{"id":"0:86-0:994:2597","crate_id":0,"name":null,"span":{"filename":"src/internals/attr.rs","begin":[21,0],"end":[21,43]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"import":{"source":"crate::internals::case::RenameRule","name":"RenameRule","id":"0:994:2597","glob":false}}},"2:13342:31987":{"id":"2:13342:31987","crate_id":2,"name":"rsplit_once","span":null,"visibility":"public","docs":"Splits the string on the last occurrence of the specified delimiter and\nreturns prefix before delimiter and suffix after delimiter.\n\n# Examples\n\n```\nassert_eq!(\"cfg\".rsplit_once('='), None);\nassert_eq!(\"cfg=foo\".rsplit_once('='), Some((\"cfg\", \"foo\")));\nassert_eq!(\"cfg=foo=bar\".rsplit_once('='), Some((\"cfg=foo\", \"bar\")));\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["delimiter",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:42073:194","args":{"angle_bracketed":{"args":[{"type":{"tuple":[{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12961:16506","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12961:16506","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12976:16507","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13276:336":{"id":"2:13276:336","crate_id":2,"name":"as_ptr","span":null,"visibility":"public","docs":"Converts a string slice to a raw pointer.\n\nAs string slices are a slice of bytes, the raw pointer points to a\n[`u8`]. This pointer will be pointing to the first byte of the string\nslice.\n\nThe caller must ensure that the returned pointer is never written to.\nIf you need to mutate the contents of the string slice, use [`as_mut_ptr`].\n\n[`as_mut_ptr`]: str::as_mut_ptr\n\n# Examples\n\n```\nlet s = \"Hello\";\nlet ptr = s.as_ptr();\n```","links":{"str::as_mut_ptr":"2:13277:31950","`u8`":"1:12360:1852"},"attrs":["#[rustc_never_returns_null_ptr]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"raw_pointer":{"mutable":false,"type":{"primitive":"u8"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13354:36320":{"id":"2:13354:36320","crate_id":2,"name":"rmatch_indices","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within `self`,\nyielded in reverse order along with the index of the match.\n\nFor matches of `pat` within `self` that overlap, only the indices\ncorresponding to the last match are returned.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`match_indices`] method can be used.\n\n[`match_indices`]: str::match_indices\n\n# Examples\n\n```\nlet v: Vec<_> = \"abcXXXabcYYYabc\".rmatch_indices(\"abc\").collect();\nassert_eq!(v, [(12, \"abc\"), (6, \"abc\"), (0, \"abc\")]);\n\nlet v: Vec<_> = \"1abcabc2\".rmatch_indices(\"abc\").collect();\nassert_eq!(v, [(4, \"abc\"), (1, \"abc\")]);\n\nlet v: Vec<_> = \"ababa\".rmatch_indices(\"aba\").collect();\nassert_eq!(v, [(2, \"aba\")]); // only the last `aba`\n```","links":{"self::pattern":"2:12955:4358","`DoubleEndedIterator`":"2:8333:129","prim@char":"1:12341:471","str::match_indices":"2:13351:36319"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RMatchIndices","id":"2:44133:9515","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12961:16506","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12961:16506","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12976:16507","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5635:2955":{"id":"5:5635:2955","crate_id":5,"name":"to_ascii_uppercase","span":null,"visibility":"public","docs":"Returns a copy of this string where each character is mapped to its\nASCII upper case equivalent.\n\nASCII letters 'a' to 'z' are mapped to 'A' to 'Z',\nbut non-ASCII letters are unchanged.\n\nTo uppercase the value in-place, use [`make_ascii_uppercase`].\n\nTo uppercase ASCII characters in addition to non-ASCII characters, use\n[`to_uppercase`].\n\n# Examples\n\n```\nlet s = \"Gr√º√üe, J√ºrgen ‚ù§\";\n\nassert_eq!(\"GR√º√üE, J√ºRGEN ‚ù§\", s.to_ascii_uppercase());\n```\n\n[`make_ascii_uppercase`]: str::make_ascii_uppercase\n[`to_uppercase`]: #method.to_uppercase","links":{"str::make_ascii_uppercase":"2:13391:28735"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use = \"to uppercase the value in-place, use `make_ascii_uppercase()`\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7645:243","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5636:2954":{"id":"5:5636:2954","crate_id":5,"name":"to_ascii_lowercase","span":null,"visibility":"public","docs":"Returns a copy of this string where each character is mapped to its\nASCII lower case equivalent.\n\nASCII letters 'A' to 'Z' are mapped to 'a' to 'z',\nbut non-ASCII letters are unchanged.\n\nTo lowercase the value in-place, use [`make_ascii_lowercase`].\n\nTo lowercase ASCII characters in addition to non-ASCII characters, use\n[`to_lowercase`].\n\n# Examples\n\n```\nlet s = \"Gr√º√üe, J√ºrgen ‚ù§\";\n\nassert_eq!(\"gr√º√üe, j√ºrgen ‚ù§\", s.to_ascii_lowercase());\n```\n\n[`make_ascii_lowercase`]: str::make_ascii_lowercase\n[`to_lowercase`]: #method.to_lowercase","links":{"str::make_ascii_lowercase":"2:13392:28736"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use = \"to lowercase the value in-place, use `make_ascii_lowercase()`\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7645:243","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13287:36314":{"id":"2:13287:36314","crate_id":2,"name":"slice_mut_unchecked","span":null,"visibility":"public","docs":"Creates a string slice from another string slice, bypassing safety\nchecks.\nThis is generally not recommended, use with caution! For a safe\nalternative see [`str`] and [`IndexMut`].\n\n[`IndexMut`]: crate::ops::IndexMut\n\nThis new slice goes from `begin` to `end`, including `begin` but\nexcluding `end`.\n\nTo get an immutable string slice instead, see the\n[`slice_unchecked`] method.\n\n[`slice_unchecked`]: str::slice_unchecked\n\n# Safety\n\nCallers of this function are responsible that three preconditions are\nsatisfied:\n\n* `begin` must not exceed `end`.\n* `begin` and `end` must be byte positions within the string slice.\n* `begin` and `end` must lie on UTF-8 sequence boundaries.","links":{"`str`":"1:12347:1722","crate::ops::IndexMut":"2:3487:3960","str::slice_unchecked":"2:13286:36313"},"attrs":["#[deprecated(since = \"1.29.0\", note =\n\"use `get_unchecked_mut(begin..end)` instead\")]"],"deprecation":{"since":"1.29.0","note":"use `get_unchecked_mut(begin..end)` instead"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["begin",{"primitive":"usize"}],["end",{"primitive":"usize"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"2:13345:2717":{"id":"2:13345:2717","crate_id":2,"name":"matches","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within the given string\nslice.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rmatches`] method can be used.\n\n[`rmatches`]: str::rmatches\n\n# Examples\n\n```\nlet v: Vec<&str> = \"abcXXXabcYYYabc\".matches(\"abc\").collect();\nassert_eq!(v, [\"abc\", \"abc\", \"abc\"]);\n\nlet v: Vec<&str> = \"1abc2abc3\".matches(char::is_numeric).collect();\nassert_eq!(v, [\"1\", \"2\", \"3\"]);\n```","links":{"self::pattern":"2:12955:4358","`DoubleEndedIterator`":"2:8333:129","prim@char":"1:12341:471","str::rmatches":"2:13348:36318"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Matches","id":"2:44169:9517","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12961:16506","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5632:37027":{"id":"5:5632:37027","crate_id":5,"name":"to_uppercase","span":null,"visibility":"public","docs":"Returns the uppercase equivalent of this string slice, as a new [`String`].\n\n'Uppercase' is defined according to the terms of the Unicode Derived Core Property\n`Uppercase`.\n\nSince some characters can expand into multiple characters when changing\nthe case, this function returns a [`String`] instead of modifying the\nparameter in-place.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"hello\";\n\nassert_eq!(\"HELLO\", s.to_uppercase());\n```\n\nScripts without case are not changed:\n\n```\nlet new_year = \"ÂÜúÂéÜÊñ∞Âπ¥\";\n\nassert_eq!(new_year, new_year.to_uppercase());\n```\n\nOne character can become multiple:\n```\nlet s = \"tsch√º√ü\";\n\nassert_eq!(\"TSCH√úSS\", s.to_uppercase());\n```","links":{"`String`":"5:7645:243"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the uppercase string as a new String, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7645:243","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13330:36317":{"id":"2:13330:36317","crate_id":2,"name":"rsplit_terminator","span":null,"visibility":"public","docs":"An iterator over substrings of `self`, separated by characters\nmatched by a pattern and yielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\nEquivalent to [`split`], except that the trailing substring is\nskipped if empty.\n\n[`split`]: str::split\n\nThis method can be used for string data that is _terminated_,\nrather than _separated_ by a pattern.\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a\nreverse search, and it will be double ended if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`split_terminator`] method can be\nused.\n\n[`split_terminator`]: str::split_terminator\n\n# Examples\n\n```\nlet v: Vec<&str> = \"A.B.\".rsplit_terminator('.').collect();\nassert_eq!(v, [\"B\", \"A\"]);\n\nlet v: Vec<&str> = \"A..B..\".rsplit_terminator(\".\").collect();\nassert_eq!(v, [\"\", \"B\", \"\", \"A\"]);\n\nlet v: Vec<&str> = \"A.B:C.D\".rsplit_terminator(&['.', ':'][..]).collect();\nassert_eq!(v, [\"D\", \"C\", \"B\", \"A\"]);\n```","links":{"self::pattern":"2:12955:4358","str::split":"2:13318:28798","prim@char":"1:12341:471","str::split_terminator":"2:13327:36316"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RSplitTerminator","id":"2:44033:9509","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12961:16506","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12961:16506","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12976:16507","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13307:31989":{"id":"2:13307:31989","crate_id":2,"name":"ends_with","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a suffix of this\nstring slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.ends_with(\"anas\"));\nassert!(!bananas.ends_with(\"nana\"));\n```","links":{"prim@char":"1:12341:471","self::pattern":"2:12955:4358"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12961:16506","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12961:16506","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12976:16507","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13333:31982":{"id":"2:13333:31982","crate_id":2,"name":"splitn","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by a\npattern, restricted to returning at most `n` items.\n\nIf `n` substrings are returned, the last substring (the `n`th substring)\nwill contain the remainder of the string.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will not be double ended, because it is\nnot efficient to support.\n\nIf the pattern allows a reverse search, the [`rsplitn`] method can be\nused.\n\n[`rsplitn`]: str::rsplitn\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lambda\".splitn(3, ' ').collect();\nassert_eq!(v, [\"Mary\", \"had\", \"a little lambda\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".splitn(3, \"X\").collect();\nassert_eq!(v, [\"lion\", \"\", \"tigerXleopard\"]);\n\nlet v: Vec<&str> = \"abcXdef\".splitn(1, 'X').collect();\nassert_eq!(v, [\"abcXdef\"]);\n\nlet v: Vec<&str> = \"\".splitn(1, 'X').collect();\nassert_eq!(v, [\"\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".splitn(2, |c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"abc\", \"defXghi\"]);\n```","links":{"prim@char":"1:12341:471","self::pattern":"2:12955:4358","str::rsplitn":"2:13336:31984"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["n",{"primitive":"usize"}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"SplitN","id":"2:44069:9511","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12961:16506","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13383:36329":{"id":"2:13383:36329","crate_id":2,"name":"trim_right_matches","span":null,"visibility":"public","docs":"Returns a string slice with all suffixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. 'Right' in this context means the last\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _left_ side, not the right.\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_right_matches('1'), \"11foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_right_matches(char::is_numeric), \"123foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_right_matches(x), \"12foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1fooX\".trim_right_matches(|c| c == '1' || c == 'X'), \"1foo\");\n```","links":{"prim@char":"1:12341:471","self::pattern":"2:12955:4358"},"attrs":["#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_end_matches`\",\nsuggestion = \"trim_end_matches\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_end_matches`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12961:16506","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12961:16506","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12976:16507","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13296:34060":{"id":"2:13296:34060","crate_id":2,"name":"split_whitespace","span":null,"visibility":"public","docs":"Splits a string slice by whitespace.\n\nThe iterator returned will return string slices that are sub-slices of\nthe original string slice, separated by any amount of whitespace.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`. If you only want to split on ASCII whitespace\ninstead, use [`split_ascii_whitespace`].\n\n[`split_ascii_whitespace`]: str::split_ascii_whitespace\n\n# Examples\n\nBasic usage:\n\n```\nlet mut iter = \"A few words\".split_whitespace();\n\nassert_eq!(Some(\"A\"), iter.next());\nassert_eq!(Some(\"few\"), iter.next());\nassert_eq!(Some(\"words\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nAll kinds of whitespace are considered:\n\n```\nlet mut iter = \" Mary   had\\ta\\u{2009}little  \\n\\t lamb\".split_whitespace();\nassert_eq!(Some(\"Mary\"), iter.next());\nassert_eq!(Some(\"had\"), iter.next());\nassert_eq!(Some(\"a\"), iter.next());\nassert_eq!(Some(\"little\"), iter.next());\nassert_eq!(Some(\"lamb\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nIf the string is empty or all whitespace, the iterator yields no string slices:\n```\nassert_eq!(\"\".split_whitespace().next(), None);\nassert_eq!(\"   \".split_whitespace().next(), None);\n```","links":{"str::split_ascii_whitespace":"2:13297:34046"},"attrs":["#[must_use =\n\"this returns the split string as an iterator, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_split_whitespace\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"SplitWhitespace","id":"2:44239:9521","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13300:34452":{"id":"2:13300:34452","crate_id":2,"name":"encode_utf16","span":null,"visibility":"public","docs":"Returns an iterator of `u16` over the string encoded as UTF-16.\n\n# Examples\n\n```\nlet text = \"Za≈º√≥≈Çƒá gƒô≈õlƒÖ ja≈∫≈Ñ\";\n\nlet utf8_len = text.len();\nlet utf16_len = text.encode_utf16().count();\n\nassert!(utf16_len <= utf8_len);\n```","links":{},"attrs":["#[must_use =\n\"this returns the encoded string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EncodeUtf16","id":"2:44257:9523","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13288:3370":{"id":"2:13288:3370","crate_id":2,"name":"split_at","span":null,"visibility":"public","docs":"Divide one string slice into two at an index.\n\nThe argument, `mid`, should be a byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get mutable string slices instead, see the [`split_at_mut`]\nmethod.\n\n[`split_at_mut`]: str::split_at_mut\n\n# Panics\n\nPanics if `mid` is not on a UTF-8 code point boundary, or if it is past\nthe end of the last code point of the string slice.  For a non-panicking\nalternative see [`split_at_checked`](str::split_at_checked).\n\n# Examples\n\n```\nlet s = \"Per Martin-L√∂f\";\n\nlet (first, last) = s.split_at(3);\n\nassert_eq!(\"Per\", first);\nassert_eq!(\" Martin-L√∂f\", last);\n```","links":{"str::split_at_checked":"2:13290:31975","str::split_at_mut":"2:13289:31972"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["mid",{"primitive":"usize"}]],"output":{"tuple":[{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13365:36326":{"id":"2:13365:36326","crate_id":2,"name":"trim_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes and suffixes that match a\npattern repeatedly removed.\n\nThe [pattern] can be a [`char`], a slice of [`char`]s, or a function\nor closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_matches('1'), \"foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_matches(char::is_numeric), \"foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_matches(x), \"foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1foo1barXX\".trim_matches(|c| c == '1' || c == 'X'), \"foo1bar\");\n```","links":{"prim@char":"1:12341:471","self::pattern":"2:12955:4358"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12961:16506","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12961:16506","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"DoubleEndedSearcher","id":"2:12981:16505","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13395:33157":{"id":"2:13395:33157","crate_id":2,"name":"trim_ascii","span":null,"visibility":"public","docs":"Returns a string slice with leading and trailing ASCII whitespace\nremoved.\n\n'Whitespace' refers to the definition used by\n[`u8::is_ascii_whitespace`].\n\n[`u8::is_ascii_whitespace`]: u8::is_ascii_whitespace\n\n# Examples\n\n```\n#![feature(byte_slice_trim_ascii)]\n\nassert_eq!(\"\\r hello world\\n \".trim_ascii(), \"hello world\");\nassert_eq!(\"  \".trim_ascii(), \"\");\nassert_eq!(\"\".trim_ascii(), \"\");\n```","links":{"u8::is_ascii_whitespace":"2:1061:40757"},"attrs":["#[unstable(feature = \"byte_slice_trim_ascii\", issue = \"94035\")]","#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13386:2592":{"id":"2:13386:2592","crate_id":2,"name":"parse","span":null,"visibility":"public","docs":"Parses this string slice into another type.\n\nBecause `parse` is so general, it can cause problems with type\ninference. As such, `parse` is one of the few times you'll see\nthe syntax affectionately known as the 'turbofish': `::<>`. This\nhelps the inference algorithm understand specifically which type\nyou're trying to parse into.\n\n`parse` can parse into any type that implements the [`FromStr`] trait.\n\n# Errors\n\nWill return [`Err`] if it's not possible to parse this string slice into\nthe desired type.\n\n[`Err`]: FromStr::Err\n\n# Examples\n\nBasic usage\n\n```\nlet four: u32 = \"4\".parse().unwrap();\n\nassert_eq!(4, four);\n```\n\nUsing the 'turbofish' instead of annotating `four`:\n\n```\nlet four = \"4\".parse::<u32>();\n\nassert_eq!(Ok(4), four);\n```\n\nFailing to parse:\n\n```\nlet nope = \"j\".parse::<u32>();\n\nassert!(nope.is_err());\n```","links":{"FromStr::Err":"2:12916:136","`FromStr`":"2:12915:3972"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Result","id":"2:42206:226","args":{"angle_bracketed":{"args":[{"type":{"generic":"F"}},{"type":{"qualified_path":{"name":"Err","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"F"},"trait":{"name":"FromStr","id":"2:12915:3972","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"F"},"bounds":[{"trait_bound":{"trait":{"name":"FromStr","id":"2:12915:3972","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13298:28799":{"id":"2:13298:28799","crate_id":2,"name":"lines","span":null,"visibility":"public","docs":"An iterator over the lines of a string, as string slices.\n\nLines are split at line endings that are either newlines (`\\n`) or\nsequences of a carriage return followed by a line feed (`\\r\\n`).\n\nLine terminators are not included in the lines returned by the iterator.\n\nNote that any carriage return (`\\r`) not immediately followed by a\nline feed (`\\n`) does not split a line. These carriage returns are\nthereby included in the produced lines.\n\nThe final line ending is optional. A string that ends with a final line\nending will return the same lines as an otherwise identical string\nwithout a final line ending.\n\n# Examples\n\nBasic usage:\n\n```\nlet text = \"foo\\r\\nbar\\n\\nbaz\\r\";\nlet mut lines = text.lines();\n\nassert_eq!(Some(\"foo\"), lines.next());\nassert_eq!(Some(\"bar\"), lines.next());\nassert_eq!(Some(\"\"), lines.next());\n// Trailing carriage return is included in the last line\nassert_eq!(Some(\"baz\\r\"), lines.next());\n\nassert_eq!(None, lines.next());\n```\n\nThe final line does not require any ending:\n\n```\nlet text = \"foo\\nbar\\n\\r\\nbaz\";\nlet mut lines = text.lines();\n\nassert_eq!(Some(\"foo\"), lines.next());\nassert_eq!(Some(\"bar\"), lines.next());\nassert_eq!(Some(\"\"), lines.next());\nassert_eq!(Some(\"baz\"), lines.next());\n\nassert_eq!(None, lines.next());\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Lines","id":"2:44219:9519","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13394:33156":{"id":"2:13394:33156","crate_id":2,"name":"trim_ascii_end","span":null,"visibility":"public","docs":"Returns a string slice with trailing ASCII whitespace removed.\n\n'Whitespace' refers to the definition used by\n[`u8::is_ascii_whitespace`].\n\n[`u8::is_ascii_whitespace`]: u8::is_ascii_whitespace\n\n# Examples\n\n```\n#![feature(byte_slice_trim_ascii)]\n\nassert_eq!(\"\\r hello world\\u{3000}\\n \".trim_ascii_end(), \"\\r hello world\\u{3000}\");\nassert_eq!(\"  \".trim_ascii_end(), \"\");\nassert_eq!(\"\".trim_ascii_end(), \"\");\n```","links":{"u8::is_ascii_whitespace":"2:1061:40757"},"attrs":["#[unstable(feature = \"byte_slice_trim_ascii\", issue = \"94035\")]","#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13267:2721":{"id":"2:13267:2721","crate_id":2,"name":"is_empty","span":null,"visibility":"public","docs":"Returns `true` if `self` has a length of zero bytes.\n\n# Examples\n\n```\nlet s = \"\";\nassert!(s.is_empty());\n\nlet s = \"not empty\";\nassert!(!s.is_empty());\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:0:2377":{"id":"0:0:2377","crate_id":0,"name":"serde_derive","span":{"filename":"src/lib.rs","begin":[1,0],"end":[102,1]},"visibility":"public","docs":"This crate provides Serde's two derive macros.\n\n```edition2021\n# use serde_derive::{Deserialize, Serialize};\n#\n#[derive(Serialize, Deserialize)]\n# struct S;\n#\n# fn main() {}\n```\n\nPlease refer to [https://serde.rs/derive.html] for how to set this up.\n\n[https://serde.rs/derive.html]: https://serde.rs/derive.html","links":{},"attrs":["#![doc(html_root_url = \"https://docs.rs/serde_derive/1.0.201\")]","#![allow(unexpected_cfgs)]","#![allow(clippy::branches_sharing_code, clippy::cognitive_complexity,\nclippy::collapsible_match, clippy::derive_partial_eq_without_eq,\nclippy::enum_variant_names, clippy::manual_map,\nclippy::match_like_matches_macro, clippy::needless_pass_by_value,\nclippy::too_many_arguments, clippy::trivially_copy_pass_by_ref,\nclippy::used_underscore_binding, clippy::wildcard_in_or_patterns,\nclippy::unnested_or_patterns,)]","#![allow(clippy::cast_possible_truncation, clippy::checked_conversions,\nclippy::doc_markdown, clippy::enum_glob_use, clippy::indexing_slicing,\nclippy::items_after_statements, clippy::let_underscore_untyped,\nclippy::manual_assert, clippy::map_err_ignore, clippy::match_same_arms,\nclippy::match_wildcard_for_single_variants, clippy::module_name_repetitions,\nclippy::must_use_candidate, clippy::similar_names, clippy::single_match_else,\nclippy::struct_excessive_bools, clippy::too_many_lines,\nclippy::unseparated_literal_suffix, clippy::unused_self, clippy::use_self,\nclippy::wildcard_imports)]"],"deprecation":null,"inner":{"module":{"is_crate":true,"items":["0:964:2366","0:965:2374"],"is_stripped":false}}},"0:493-0:404:2504":{"id":"0:493-0:404:2504","crate_id":0,"name":null,"span":{"filename":"src/internals/mod.rs","begin":[14,0],"end":[14,41]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"import":{"source":"self::receiver::replace_receiver","name":"replace_receiver","id":"0:404:2504","glob":false}}},"2:13275:36312":{"id":"2:13275:36312","crate_id":2,"name":"as_bytes_mut","span":null,"visibility":"public","docs":"Converts a mutable string slice to a mutable byte slice.\n\n# Safety\n\nThe caller must ensure that the content of the slice is valid UTF-8\nbefore the borrow ends and the underlying `str` is used.\n\nUse of a `str` whose contents are not valid UTF-8 is undefined behavior.\n\n# Examples\n\nBasic usage:\n\n```\nlet mut s = String::from(\"Hello\");\nlet bytes = unsafe { s.as_bytes_mut() };\n\nassert_eq!(b\"Hello\", bytes);\n```\n\nMutability:\n\n```\nlet mut s = String::from(\"üóª‚ààüåè\");\n\nunsafe {\n    let bytes = s.as_bytes_mut();\n\n    bytes[0] = 0xF0;\n    bytes[1] = 0x9F;\n    bytes[2] = 0x8D;\n    bytes[3] = 0x94;\n}\n\nassert_eq!(\"üçî‚ààüåè\", s);\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"slice":{"primitive":"u8"}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"2:13284:31949":{"id":"2:13284:31949","crate_id":2,"name":"get_unchecked_mut","span":null,"visibility":"public","docs":"Returns a mutable, unchecked subslice of `str`.\n\nThis is the unchecked alternative to indexing the `str`.\n\n# Safety\n\nCallers of this function are responsible that these preconditions are\nsatisfied:\n\n* The starting index must not exceed the ending index;\n* Indexes must be within bounds of the original slice;\n* Indexes must lie on UTF-8 sequence boundaries.\n\nFailing that, the returned string slice may reference invalid memory or\nviolate the invariants communicated by the `str` type.\n\n# Examples\n\n```\nlet mut v = String::from(\"üóª‚ààüåè\");\nunsafe {\n    assert_eq!(\"üóª\", v.get_unchecked_mut(0..4));\n    assert_eq!(\"‚àà\", v.get_unchecked_mut(4..7));\n    assert_eq!(\"üåè\", v.get_unchecked_mut(7..11));\n}\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"2:11045:239","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"2:11045:239","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"2:13289:31972":{"id":"2:13289:31972","crate_id":2,"name":"split_at_mut","span":null,"visibility":"public","docs":"Divide one mutable string slice into two at an index.\n\nThe argument, `mid`, should be a byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get immutable string slices instead, see the [`split_at`] method.\n\n[`split_at`]: str::split_at\n\n# Panics\n\nPanics if `mid` is not on a UTF-8 code point boundary, or if it is past\nthe end of the last code point of the string slice.  For a non-panicking\nalternative see [`split_at_mut_checked`](str::split_at_mut_checked).\n\n# Examples\n\n```\nlet mut s = \"Per Martin-L√∂f\".to_string();\n{\n    let (first, last) = s.split_at_mut(3);\n    first.make_ascii_uppercase();\n    assert_eq!(\"PER\", first);\n    assert_eq!(\" Martin-L√∂f\", last);\n}\nassert_eq!(\"PER Martin-L√∂f\", s);\n```","links":{"str::split_at":"2:13288:3370","str::split_at_mut_checked":"2:13291:31976"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["mid",{"primitive":"usize"}]],"output":{"tuple":[{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13290:31975":{"id":"2:13290:31975","crate_id":2,"name":"split_at_checked","span":null,"visibility":"public","docs":"Divide one string slice into two at an index.\n\nThe argument, `mid`, should be a valid byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point. The\nmethod returns `None` if that‚Äôs not the case.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get mutable string slices instead, see the [`split_at_mut_checked`]\nmethod.\n\n[`split_at_mut_checked`]: str::split_at_mut_checked\n\n# Examples\n\n```\nlet s = \"Per Martin-L√∂f\";\n\nlet (first, last) = s.split_at_checked(3).unwrap();\nassert_eq!(\"Per\", first);\nassert_eq!(\" Martin-L√∂f\", last);\n\nassert_eq!(None, s.split_at_checked(13));  // Inside ‚Äú√∂‚Äù\nassert_eq!(None, s.split_at_checked(16));  // Beyond the string length\n```","links":{"str::split_at_mut_checked":"2:13291:31976"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["mid",{"primitive":"usize"}]],"output":{"resolved_path":{"name":"Option","id":"2:42073:194","args":{"angle_bracketed":{"args":[{"type":{"tuple":[{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13301:2823":{"id":"2:13301:2823","crate_id":2,"name":"contains","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a sub-slice of\nthis string slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.contains(\"nana\"));\nassert!(!bananas.contains(\"apples\"));\n```","links":{"prim@char":"1:12341:471","self::pattern":"2:12955:4358"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12961:16506","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:492-0:1019:2503":{"id":"0:492-0:1019:2503","crate_id":0,"name":null,"span":{"filename":"src/internals/mod.rs","begin":[13,0],"end":[13,25]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"import":{"source":"self::ctxt::Ctxt","name":"Ctxt","id":"0:1019:2503","glob":false}}},"2:13380:36328":{"id":"2:13380:36328","crate_id":2,"name":"trim_left_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. 'Left' in this context means the first\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _right_ side, not the left.\n\n# Examples\n\n```\nassert_eq!(\"11foo1bar11\".trim_left_matches('1'), \"foo1bar11\");\nassert_eq!(\"123foo1bar123\".trim_left_matches(char::is_numeric), \"foo1bar123\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_left_matches(x), \"foo1bar12\");\n```","links":{"prim@char":"1:12341:471","self::pattern":"2:12955:4358"},"attrs":["#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_start_matches`\",\nsuggestion = \"trim_start_matches\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_start_matches`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12961:16506","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13265":{"id":"2:13265","crate_id":2,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":["#[cfg(not(test))]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"primitive":"str"},"items":["2:13266:997","2:13267:2721","2:13268:36309","2:13269:36310","2:13271:36311","2:13274:3482","2:13275:36312","2:13276:336","2:13277:31950","2:13278:2612","2:13280:31947","2:13282:31948","2:13284:31949","2:13286:36313","2:13287:36314","2:13288:3370","2:13289:31972","2:13290:31975","2:13291:31976","2:13293:2964","2:13294:2958","2:13295:9423","2:13296:34060","2:13297:34046","2:13298:28799","2:13299:36315","2:13300:34452","2:13301:2823","2:13304:31988","2:13307:31989","2:13310:3272","2:13314:5125","2:13318:28798","2:13321:31978","2:13324:31980","2:13327:36316","2:13330:36317","2:13333:31982","2:13336:31984","2:13339:31986","2:13342:31987","2:13345:2717","2:13348:36318","2:13351:36319","2:13354:36320","2:13357:36321","2:13359:36322","2:13361:36323","2:13363:36324","2:13364:36325","2:13365:36326","2:13368:2630","2:13371:28313","2:13374:31990","2:13377:36327","2:13380:36328","2:13383:36329","2:13386:2592","2:13388:28732","2:13389:33152","2:13390:28734","2:13391:28735","2:13392:28736","2:13393:33155","2:13394:33156","2:13395:33157","2:13396:36330","2:13398:11044","2:13399:36331"],"negative":false,"synthetic":false,"blanket_impl":null}}},"5:5621:37025":{"id":"5:5621:37025","crate_id":5,"name":"replacen","span":null,"visibility":"public","docs":"Replaces first N matches of a pattern with another string.\n\n`replacen` creates a new [`String`], and copies the data from this string slice into it.\nWhile doing so, it attempts to find matches of a pattern. If it finds any, it\nreplaces them with the replacement string slice at most `count` times.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"foo foo 123 foo\";\nassert_eq!(\"new new 123 foo\", s.replacen(\"foo\", \"new\", 2));\nassert_eq!(\"faa fao 123 foo\", s.replacen('o', \"a\", 3));\nassert_eq!(\"foo foo new23 foo\", s.replacen(char::is_numeric, \"new\", 1));\n```\n\nWhen the pattern doesn't match, it returns this string slice as [`String`]:\n\n```\nlet s = \"this is old\";\nassert_eq!(s, s.replacen(\"cookie monster\", \"little lamb\", 10));\n```","links":{"`String`":"5:7645:243"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the replaced string as a new allocation, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}],["to",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}],["count",{"primitive":"usize"}]],"output":{"resolved_path":{"name":"String","id":"5:7645:243","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12961:16506","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13271:36311":{"id":"2:13271:36311","crate_id":2,"name":"ceil_char_boundary","span":null,"visibility":"public","docs":"Finds the closest `x` not below `index` where `is_char_boundary(x)` is `true`.\n\nIf `index` is greater than the length of the string, this returns the length of the string.\n\nThis method is the natural complement to [`floor_char_boundary`]. See that method\nfor more details.\n\n[`floor_char_boundary`]: str::floor_char_boundary\n\n\n# Examples\n\n```\n#![feature(round_char_boundary)]\nlet s = \"‚ù§Ô∏èüß°üíõüíöüíôüíú\";\nassert_eq!(s.len(), 26);\nassert!(!s.is_char_boundary(13));\n\nlet closest = s.ceil_char_boundary(13);\nassert_eq!(closest, 14);\nassert_eq!(&s[..closest], \"‚ù§Ô∏èüß°üíõ\");\n```","links":{"str::floor_char_boundary":"2:13269:36310"},"attrs":["#[unstable(feature = \"round_char_boundary\", issue = \"93743\")]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["index",{"primitive":"usize"}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13314:5125":{"id":"2:13314:5125","crate_id":2,"name":"rfind","span":null,"visibility":"public","docs":"Returns the byte index for the first character of the last match of the pattern in\nthis string slice.\n\nReturns [`None`] if the pattern doesn't match.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nlet s = \"L√∂we ËÄÅËôé L√©opard Gepardi\";\n\nassert_eq!(s.rfind('L'), Some(13));\nassert_eq!(s.rfind('√©'), Some(14));\nassert_eq!(s.rfind(\"pard\"), Some(24));\n```\n\nMore complex patterns with closures:\n\n```\nlet s = \"L√∂we ËÄÅËôé L√©opard\";\n\nassert_eq!(s.rfind(char::is_whitespace), Some(12));\nassert_eq!(s.rfind(char::is_lowercase), Some(20));\n```\n\nNot finding the pattern:\n\n```\nlet s = \"L√∂we ËÄÅËôé L√©opard\";\nlet x: &[_] = &['1', '2'];\n\nassert_eq!(s.rfind(x), None);\n```","links":{"`None`":"2:42075:191","prim@char":"1:12341:471","self::pattern":"2:12955:4358"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:42073:194","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12961:16506","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12961:16506","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12976:16507","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13371:28313":{"id":"2:13371:28313","crate_id":2,"name":"strip_prefix","span":null,"visibility":"public","docs":"Returns a string slice with the prefix removed.\n\nIf the string starts with the pattern `prefix`, returns the substring after the prefix,\nwrapped in `Some`. Unlike `trim_start_matches`, this method removes the prefix exactly once.\n\nIf the string does not start with `prefix`, returns `None`.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nassert_eq!(\"foo:bar\".strip_prefix(\"foo:\"), Some(\"bar\"));\nassert_eq!(\"foo:bar\".strip_prefix(\"bar\"), None);\nassert_eq!(\"foofoo\".strip_prefix(\"foo\"), Some(\"foo\"));\n```","links":{"prim@char":"1:12341:471","self::pattern":"2:12955:4358"},"attrs":["#[must_use =\n\"this returns the remaining substring as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["prefix",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:42073:194","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12961:16506","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13291:31976":{"id":"2:13291:31976","crate_id":2,"name":"split_at_mut_checked","span":null,"visibility":"public","docs":"Divide one mutable string slice into two at an index.\n\nThe argument, `mid`, should be a valid byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point. The\nmethod returns `None` if that‚Äôs not the case.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get immutable string slices instead, see the [`split_at_checked`] method.\n\n[`split_at_checked`]: str::split_at_checked\n\n# Examples\n\n```\nlet mut s = \"Per Martin-L√∂f\".to_string();\nif let Some((first, last)) = s.split_at_mut_checked(3) {\n    first.make_ascii_uppercase();\n    assert_eq!(\"PER\", first);\n    assert_eq!(\" Martin-L√∂f\", last);\n}\nassert_eq!(\"PER Martin-L√∂f\", s);\n\nassert_eq!(None, s.split_at_mut_checked(13));  // Inside ‚Äú√∂‚Äù\nassert_eq!(None, s.split_at_mut_checked(16));  // Beyond the string length\n```","links":{"str::split_at_checked":"2:13290:31975"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["mid",{"primitive":"usize"}]],"output":{"resolved_path":{"name":"Option","id":"2:42073:194","args":{"angle_bracketed":{"args":[{"type":{"tuple":[{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13351:36319":{"id":"2:13351:36319","crate_id":2,"name":"match_indices","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within this string\nslice as well as the index that the match starts at.\n\nFor matches of `pat` within `self` that overlap, only the indices\ncorresponding to the first match are returned.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rmatch_indices`] method can be used.\n\n[`rmatch_indices`]: str::rmatch_indices\n\n# Examples\n\n```\nlet v: Vec<_> = \"abcXXXabcYYYabc\".match_indices(\"abc\").collect();\nassert_eq!(v, [(0, \"abc\"), (6, \"abc\"), (12, \"abc\")]);\n\nlet v: Vec<_> = \"1abcabc2\".match_indices(\"abc\").collect();\nassert_eq!(v, [(1, \"abc\"), (4, \"abc\")]);\n\nlet v: Vec<_> = \"ababa\".match_indices(\"aba\").collect();\nassert_eq!(v, [(0, \"aba\")]); // only the first `aba`\n```","links":{"self::pattern":"2:12955:4358","`DoubleEndedIterator`":"2:8333:129","prim@char":"1:12341:471","str::rmatch_indices":"2:13354:36320"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"MatchIndices","id":"2:44115:9514","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12961:16506","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13388:28732":{"id":"2:13388:28732","crate_id":2,"name":"is_ascii","span":null,"visibility":"public","docs":"Checks if all characters in this string are within the ASCII range.\n\n# Examples\n\n```\nlet ascii = \"hello!\\n\";\nlet non_ascii = \"Gr√º√üe, J√ºrgen ‚ù§\";\n\nassert!(ascii.is_ascii());\nassert!(!non_ascii.is_ascii());\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13277:31950":{"id":"2:13277:31950","crate_id":2,"name":"as_mut_ptr","span":null,"visibility":"public","docs":"Converts a mutable string slice to a raw pointer.\n\nAs string slices are a slice of bytes, the raw pointer points to a\n[`u8`]. This pointer will be pointing to the first byte of the string\nslice.\n\nIt is your responsibility to make sure that the string slice only gets\nmodified in a way that it remains valid UTF-8.","links":{"`u8`":"1:12360:1852"},"attrs":["#[rustc_never_returns_null_ptr]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"raw_pointer":{"mutable":true,"type":{"primitive":"u8"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13399:36331":{"id":"2:13399:36331","crate_id":2,"name":"escape_unicode","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_unicode`].\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"‚ù§\\n!\".escape_unicode() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"‚ù§\\n!\".escape_unicode());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"\\\\u{{2764}}\\\\u{{a}}\\\\u{{21}}\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"‚ù§\\n!\".escape_unicode().to_string(), \"\\\\u{2764}\\\\u{a}\\\\u{21}\");\n```","links":{"`char::escape_unicode`":"2:5019:36331"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EscapeUnicode","id":"2:44282:9466","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13327:36316":{"id":"2:13327:36316","crate_id":2,"name":"split_terminator","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by\ncharacters matched by a pattern.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\nEquivalent to [`split`], except that the trailing substring\nis skipped if empty.\n\n[`split`]: str::split\n\nThis method can be used for string data that is _terminated_,\nrather than _separated_ by a pattern.\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rsplit_terminator`] method can be used.\n\n[`rsplit_terminator`]: str::rsplit_terminator\n\n# Examples\n\n```\nlet v: Vec<&str> = \"A.B.\".split_terminator('.').collect();\nassert_eq!(v, [\"A\", \"B\"]);\n\nlet v: Vec<&str> = \"A..B..\".split_terminator(\".\").collect();\nassert_eq!(v, [\"A\", \"\", \"B\", \"\"]);\n\nlet v: Vec<&str> = \"A.B:C.D\".split_terminator(&['.', ':'][..]).collect();\nassert_eq!(v, [\"A\", \"B\", \"C\", \"D\"]);\n```","links":{"self::pattern":"2:12955:4358","str::split":"2:13318:28798","prim@char":"1:12341:471","`DoubleEndedIterator`":"2:8333:129","str::rsplit_terminator":"2:13330:36317"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"SplitTerminator","id":"2:44015:9508","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12961:16506","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:63:391":{"id":"0:63:391","crate_id":0,"name":"attr","span":{"filename":"src/internals/attr.rs","begin":[1,0],"end":[1881,1]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"module":{"is_crate":false,"items":["0:86-0:994:2597"],"is_stripped":false}}},"2:13293:2964":{"id":"2:13293:2964","crate_id":2,"name":"chars","span":null,"visibility":"public","docs":"Returns an iterator over the [`char`]s of a string slice.\n\nAs a string slice consists of valid UTF-8, we can iterate through a\nstring slice by [`char`]. This method returns such an iterator.\n\nIt's important to remember that [`char`] represents a Unicode Scalar\nValue, and might not match your idea of what a 'character' is. Iteration\nover grapheme clusters may be what you actually want. This functionality\nis not provided by Rust's standard library, check crates.io instead.\n\n# Examples\n\nBasic usage:\n\n```\nlet word = \"goodbye\";\n\nlet count = word.chars().count();\nassert_eq!(7, count);\n\nlet mut chars = word.chars();\n\nassert_eq!(Some('g'), chars.next());\nassert_eq!(Some('o'), chars.next());\nassert_eq!(Some('o'), chars.next());\nassert_eq!(Some('d'), chars.next());\nassert_eq!(Some('b'), chars.next());\nassert_eq!(Some('y'), chars.next());\nassert_eq!(Some('e'), chars.next());\n\nassert_eq!(None, chars.next());\n```\n\nRemember, [`char`]s might not match your intuition about characters:\n\n[`char`]: prim@char\n\n```\nlet y = \"yÃÜ\";\n\nlet mut chars = y.chars();\n\nassert_eq!(Some('y'), chars.next()); // not 'yÃÜ'\nassert_eq!(Some('\\u{0306}'), chars.next());\n\nassert_eq!(None, chars.next());\n```","links":{"prim@char":"1:12341:471"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Chars","id":"2:43935:9502","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5633:37028":{"id":"5:5633:37028","crate_id":5,"name":"into_string","span":null,"visibility":"public","docs":"Converts a [`Box<str>`] into a [`String`] without copying or allocating.\n\n# Examples\n\n```\nlet string = String::from(\"birthday gift\");\nlet boxed_str = string.clone().into_boxed_str();\n\nassert_eq!(boxed_str.into_string(), string);\n```","links":{"`Box<str>`":"5:304:2567","`String`":"5:7645:243"},"attrs":["#[must_use = \"`self` will be dropped if the result is not used\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"resolved_path":{"name":"Box","id":"5:304:2567","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}]],"output":{"resolved_path":{"name":"String","id":"5:7645:243","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13393:33155":{"id":"2:13393:33155","crate_id":2,"name":"trim_ascii_start","span":null,"visibility":"public","docs":"Returns a string slice with leading ASCII whitespace removed.\n\n'Whitespace' refers to the definition used by\n[`u8::is_ascii_whitespace`].\n\n[`u8::is_ascii_whitespace`]: u8::is_ascii_whitespace\n\n# Examples\n\n```\n#![feature(byte_slice_trim_ascii)]\n\nassert_eq!(\" \\t \\u{3000}hello world\\n\".trim_ascii_start(), \"\\u{3000}hello world\\n\");\nassert_eq!(\"  \".trim_ascii_start(), \"\");\nassert_eq!(\"\".trim_ascii_start(), \"\");\n```","links":{"u8::is_ascii_whitespace":"2:1061:40757"},"attrs":["#[unstable(feature = \"byte_slice_trim_ascii\", issue = \"94035\")]","#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13310:3272":{"id":"2:13310:3272","crate_id":2,"name":"find","span":null,"visibility":"public","docs":"Returns the byte index of the first character of this string slice that\nmatches the pattern.\n\nReturns [`None`] if the pattern doesn't match.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nlet s = \"L√∂we ËÄÅËôé L√©opard Gepardi\";\n\nassert_eq!(s.find('L'), Some(0));\nassert_eq!(s.find('√©'), Some(14));\nassert_eq!(s.find(\"pard\"), Some(17));\n```\n\nMore complex patterns using point-free style and closures:\n\n```\nlet s = \"L√∂we ËÄÅËôé L√©opard\";\n\nassert_eq!(s.find(char::is_whitespace), Some(5));\nassert_eq!(s.find(char::is_lowercase), Some(1));\nassert_eq!(s.find(|c: char| c.is_whitespace() || c.is_lowercase()), Some(1));\nassert_eq!(s.find(|c: char| (c < 'o') && (c > 'a')), Some(4));\n```\n\nNot finding the pattern:\n\n```\nlet s = \"L√∂we ËÄÅËôé L√©opard\";\nlet x: &[_] = &['1', '2'];\n\nassert_eq!(s.find(x), None);\n```","links":{"`None`":"2:42075:191","prim@char":"1:12341:471","self::pattern":"2:12955:4358"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:42073:194","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12961:16506","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5616":{"id":"5:5616","crate_id":5,"name":null,"span":null,"visibility":"default","docs":"Methods for string slices.","links":{},"attrs":["#[cfg(not(test))]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"primitive":"str"},"items":["5:5617:37024","5:5618:2751","5:5621:37025","5:5624:37026","5:5632:37027","5:5633:37028","5:5634:4017","5:5635:2955","5:5636:2954"],"negative":false,"synthetic":false,"blanket_impl":null}}},"2:13318:28798":{"id":"2:13318:28798","crate_id":2,"name":"split","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by\ncharacters matched by a pattern.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rsplit`] method can be used.\n\n[`rsplit`]: str::rsplit\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".split(' ').collect();\nassert_eq!(v, [\"Mary\", \"had\", \"a\", \"little\", \"lamb\"]);\n\nlet v: Vec<&str> = \"\".split('X').collect();\nassert_eq!(v, [\"\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".split('X').collect();\nassert_eq!(v, [\"lion\", \"\", \"tiger\", \"leopard\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".split(\"::\").collect();\nassert_eq!(v, [\"lion\", \"tiger\", \"leopard\"]);\n\nlet v: Vec<&str> = \"abc1def2ghi\".split(char::is_numeric).collect();\nassert_eq!(v, [\"abc\", \"def\", \"ghi\"]);\n\nlet v: Vec<&str> = \"lionXtigerXleopard\".split(char::is_uppercase).collect();\nassert_eq!(v, [\"lion\", \"tiger\", \"leopard\"]);\n```\n\nIf the pattern is a slice of chars, split on each occurrence of any of the characters:\n\n```\nlet v: Vec<&str> = \"2020-11-03 23:59\".split(&['-', ' ', ':', '@'][..]).collect();\nassert_eq!(v, [\"2020\", \"11\", \"03\", \"23\", \"59\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".split(|c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"abc\", \"def\", \"ghi\"]);\n```\n\nIf a string contains multiple contiguous separators, you will end up\nwith empty strings in the output:\n\n```\nlet x = \"||||a||b|c\".to_string();\nlet d: Vec<_> = x.split('|').collect();\n\nassert_eq!(d, &[\"\", \"\", \"\", \"\", \"a\", \"\", \"b\", \"c\"]);\n```\n\nContiguous separators are separated by the empty string.\n\n```\nlet x = \"(///)\".to_string();\nlet d: Vec<_> = x.split('/').collect();\n\nassert_eq!(d, &[\"(\", \"\", \"\", \")\"]);\n```\n\nSeparators at the start or end of a string are neighbored\nby empty strings.\n\n```\nlet d: Vec<_> = \"010\".split(\"0\").collect();\nassert_eq!(d, &[\"\", \"1\", \"\"]);\n```\n\nWhen the empty string is used as a separator, it separates\nevery character in the string, along with the beginning\nand end of the string.\n\n```\nlet f: Vec<_> = \"rust\".split(\"\").collect();\nassert_eq!(f, &[\"\", \"r\", \"u\", \"s\", \"t\", \"\"]);\n```\n\nContiguous separators can lead to possibly surprising behavior\nwhen whitespace is used as the separator. This code is correct:\n\n```\nlet x = \"    a  b c\".to_string();\nlet d: Vec<_> = x.split(' ').collect();\n\nassert_eq!(d, &[\"\", \"\", \"\", \"\", \"a\", \"\", \"b\", \"c\"]);\n```\n\nIt does _not_ give you:\n\n```,ignore\nassert_eq!(d, &[\"a\", \"b\", \"c\"]);\n```\n\nUse [`split_whitespace`] for this behavior.\n\n[`split_whitespace`]: str::split_whitespace","links":{"self::pattern":"2:12955:4358","`DoubleEndedIterator`":"2:8333:129","prim@char":"1:12341:471","str::split_whitespace":"2:13296:34060","str::rsplit":"2:13324:31980"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Split","id":"2:43965:9434","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12961:16506","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13359:36322":{"id":"2:13359:36322","crate_id":2,"name":"trim_start","span":null,"visibility":"public","docs":"Returns a string slice with leading whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Text directionality\n\nA string is a sequence of bytes. `start` in this context means the first\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be left side, and for right-to-left languages like\nArabic or Hebrew, this will be the right side.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\nassert_eq!(\"Hello\\tworld\\t\\n\", s.trim_start());\n```\n\nDirectionality:\n\n```\nlet s = \"  English  \";\nassert!(Some('E') == s.trim_start().chars().next());\n\nlet s = \"  ◊¢◊ë◊®◊ô◊™  \";\nassert!(Some('◊¢') == s.trim_start().chars().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_trim_start\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13364:36325":{"id":"2:13364:36325","crate_id":2,"name":"trim_right","span":null,"visibility":"public","docs":"Returns a string slice with trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`.\n\n# Text directionality\n\nA string is a sequence of bytes. 'Right' in this context means the last\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _left_ side, not the right.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \" Hello\\tworld\\t\";\n\nassert_eq!(\" Hello\\tworld\", s.trim_right());\n```\n\nDirectionality:\n\n```\nlet s = \"English  \";\nassert!(Some('h') == s.trim_right().chars().rev().next());\n\nlet s = \"◊¢◊ë◊®◊ô◊™  \";\nassert!(Some('◊™') == s.trim_right().chars().rev().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_end`\", suggestion =\n\"trim_end\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_end`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13374:31990":{"id":"2:13374:31990","crate_id":2,"name":"strip_suffix","span":null,"visibility":"public","docs":"Returns a string slice with the suffix removed.\n\nIf the string ends with the pattern `suffix`, returns the substring before the suffix,\nwrapped in `Some`.  Unlike `trim_end_matches`, this method removes the suffix exactly once.\n\nIf the string does not end with `suffix`, returns `None`.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nassert_eq!(\"bar:foo\".strip_suffix(\":foo\"), Some(\"bar\"));\nassert_eq!(\"bar:foo\".strip_suffix(\"bar\"), None);\nassert_eq!(\"foofoo\".strip_suffix(\"foo\"), Some(\"foo\"));\n```","links":{"prim@char":"1:12341:471","self::pattern":"2:12955:4358"},"attrs":["#[must_use =\n\"this returns the remaining substring as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["suffix",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:42073:194","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12961:16506","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12961:16506","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12976:16507","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13389:33152":{"id":"2:13389:33152","crate_id":2,"name":"as_ascii","span":null,"visibility":"public","docs":"If this string slice [`is_ascii`](Self::is_ascii), returns it as a slice\nof [ASCII characters](`ascii::Char`), otherwise returns `None`.","links":{"`ascii::Char`":"2:39974:5116","Self::is_ascii":"2:13388:28732"},"attrs":["#[unstable(feature = \"ascii_char\", issue = \"110998\")]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Option","id":"2:42073:194","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"resolved_path":{"name":"AsciiChar","id":"2:39974:5116","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13398:11044":{"id":"2:13398:11044","crate_id":2,"name":"escape_default","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_default`].\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"‚ù§\\n!\".escape_default() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"‚ù§\\n!\".escape_default());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"\\\\u{{2764}}\\\\n!\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"‚ù§\\n!\".escape_default().to_string(), \"\\\\u{2764}\\\\n!\");\n```","links":{"`char::escape_default`":"2:5022:11044"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EscapeDefault","id":"2:44273:9461","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5617:37024":{"id":"5:5617:37024","crate_id":5,"name":"into_boxed_bytes","span":null,"visibility":"public","docs":"Converts a `Box<str>` into a `Box<[u8]>` without copying or allocating.\n\n# Examples\n\n```\nlet s = \"this is a string\";\nlet boxed_str = s.to_owned().into_boxed_str();\nlet boxed_bytes = boxed_str.into_boxed_bytes();\nassert_eq!(*boxed_bytes, *s.as_bytes());\n```","links":{},"attrs":["#[must_use = \"`self` will be dropped if the result is not used\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"resolved_path":{"name":"Box","id":"5:304:2567","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}]],"output":{"resolved_path":{"name":"Box","id":"5:304:2567","args":{"angle_bracketed":{"args":[{"type":{"slice":{"primitive":"u8"}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13278:2612":{"id":"2:13278:2612","crate_id":2,"name":"get","span":null,"visibility":"public","docs":"Returns a subslice of `str`.\n\nThis is the non-panicking alternative to indexing the `str`. Returns\n[`None`] whenever equivalent indexing operation would panic.\n\n# Examples\n\n```\nlet v = String::from(\"üóª‚ààüåè\");\n\nassert_eq!(Some(\"üóª\"), v.get(0..4));\n\n// indices not on UTF-8 sequence boundaries\nassert!(v.get(1..).is_none());\nassert!(v.get(..8).is_none());\n\n// out of bounds\nassert!(v.get(..42).is_none());\n```","links":{"`None`":"2:42075:191"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"resolved_path":{"name":"Option","id":"2:42073:194","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"2:11045:239","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"2:11045:239","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13297:34046":{"id":"2:13297:34046","crate_id":2,"name":"split_ascii_whitespace","span":null,"visibility":"public","docs":"Splits a string slice by ASCII whitespace.\n\nThe iterator returned will return string slices that are sub-slices of\nthe original string slice, separated by any amount of ASCII whitespace.\n\nTo split by Unicode `Whitespace` instead, use [`split_whitespace`].\n\n[`split_whitespace`]: str::split_whitespace\n\n# Examples\n\nBasic usage:\n\n```\nlet mut iter = \"A few words\".split_ascii_whitespace();\n\nassert_eq!(Some(\"A\"), iter.next());\nassert_eq!(Some(\"few\"), iter.next());\nassert_eq!(Some(\"words\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nAll kinds of ASCII whitespace are considered:\n\n```\nlet mut iter = \" Mary   had\\ta little  \\n\\t lamb\".split_ascii_whitespace();\nassert_eq!(Some(\"Mary\"), iter.next());\nassert_eq!(Some(\"had\"), iter.next());\nassert_eq!(Some(\"a\"), iter.next());\nassert_eq!(Some(\"little\"), iter.next());\nassert_eq!(Some(\"lamb\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nIf the string is empty or all ASCII whitespace, the iterator yields no string slices:\n```\nassert_eq!(\"\".split_ascii_whitespace().next(), None);\nassert_eq!(\"   \".split_ascii_whitespace().next(), None);\n```","links":{"str::split_whitespace":"2:13296:34060"},"attrs":["#[must_use =\n\"this returns the split string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"SplitAsciiWhitespace","id":"2:44248:9522","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:1023:2600":{"id":"0:1023:2600","crate_id":0,"name":"Symbol","span":{"filename":"src/internals/symbol.rs","begin":[5,0],"end":[5,32]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"struct":{"kind":{"tuple":[null]},"generics":{"params":[],"where_predicates":[]},"impls":[]}}},"2:13304:31988":{"id":"2:13304:31988","crate_id":2,"name":"starts_with","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a prefix of this\nstring slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, in which case this function will return true if\nthe `&str` is a prefix of this string slice.\n\nThe [pattern] can also be a [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\nThese will only be checked against the first character of this string slice.\nLook at the second example below regarding behavior for slices of [`char`]s.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.starts_with(\"bana\"));\nassert!(!bananas.starts_with(\"nana\"));\n```\n\n```\nlet bananas = \"bananas\";\n\n// Note that both of these assert successfully.\nassert!(bananas.starts_with(&['b', 'a', 'n', 'a']));\nassert!(bananas.starts_with(&['a', 'b', 'c', 'd']));\n```","links":{"prim@char":"1:12341:471","self::pattern":"2:12955:4358"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12961:16506","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13361:36323":{"id":"2:13361:36323","crate_id":2,"name":"trim_end","span":null,"visibility":"public","docs":"Returns a string slice with trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Text directionality\n\nA string is a sequence of bytes. `end` in this context means the last\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be right side, and for right-to-left languages like\nArabic or Hebrew, this will be the left side.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\nassert_eq!(\"\\n Hello\\tworld\", s.trim_end());\n```\n\nDirectionality:\n\n```\nlet s = \"  English  \";\nassert!(Some('h') == s.trim_end().chars().rev().next());\n\nlet s = \"  ◊¢◊ë◊®◊ô◊™  \";\nassert!(Some('◊™') == s.trim_end().chars().rev().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_trim_end\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:8:2496":{"id":"0:8:2496","crate_id":0,"name":"ast","span":{"filename":"src/internals/ast.rs","begin":[1,0],"end":[216,1]},"visibility":"public","docs":"A Serde ast, parsed from the Syn ast and ready to generate Rust code.","links":{},"attrs":[],"deprecation":null,"inner":{"module":{"is_crate":false,"items":[],"is_stripped":false}}},"2:13266:997":{"id":"2:13266:997","crate_id":2,"name":"len","span":null,"visibility":"public","docs":"Returns the length of `self`.\n\nThis length is in bytes, not [`char`]s or graphemes. In other words,\nit might not be what a human considers the length of the string.\n\n[`char`]: prim@char\n\n# Examples\n\n```\nlet len = \"foo\".len();\nassert_eq!(3, len);\n\nassert_eq!(\"∆íoo\".len(), 4); // fancy f!\nassert_eq!(\"∆íoo\".chars().count(), 3);\n```","links":{"prim@char":"1:12341:471"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13295:9423":{"id":"2:13295:9423","crate_id":2,"name":"bytes","span":null,"visibility":"public","docs":"An iterator over the bytes of a string slice.\n\nAs a string slice consists of a sequence of bytes, we can iterate\nthrough a string slice by byte. This method returns such an iterator.\n\n# Examples\n\n```\nlet mut bytes = \"bors\".bytes();\n\nassert_eq!(Some(b'b'), bytes.next());\nassert_eq!(Some(b'o'), bytes.next());\nassert_eq!(Some(b'r'), bytes.next());\nassert_eq!(Some(b's'), bytes.next());\n\nassert_eq!(None, bytes.next());\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Bytes","id":"2:43951:3492","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13348:36318":{"id":"2:13348:36318","crate_id":2,"name":"rmatches","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within this string slice,\nyielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`matches`] method can be used.\n\n[`matches`]: str::matches\n\n# Examples\n\n```\nlet v: Vec<&str> = \"abcXXXabcYYYabc\".rmatches(\"abc\").collect();\nassert_eq!(v, [\"abc\", \"abc\", \"abc\"]);\n\nlet v: Vec<&str> = \"1abc2abc3\".rmatches(char::is_numeric).collect();\nassert_eq!(v, [\"3\", \"2\", \"1\"]);\n```","links":{"self::pattern":"2:12955:4358","`DoubleEndedIterator`":"2:8333:129","prim@char":"1:12341:471","str::matches":"2:13345:2717"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RMatches","id":"2:44187:9518","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12961:16506","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12961:16506","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12976:16507","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13363:36324":{"id":"2:13363:36324","crate_id":2,"name":"trim_left","span":null,"visibility":"public","docs":"Returns a string slice with leading whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`.\n\n# Text directionality\n\nA string is a sequence of bytes. 'Left' in this context means the first\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _right_ side, not the left.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \" Hello\\tworld\\t\";\n\nassert_eq!(\"Hello\\tworld\\t\", s.trim_left());\n```\n\nDirectionality:\n\n```\nlet s = \"  English\";\nassert!(Some('E') == s.trim_left().chars().next());\n\nlet s = \"  ◊¢◊ë◊®◊ô◊™\";\nassert!(Some('◊¢') == s.trim_left().chars().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_start`\", suggestion\n= \"trim_start\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_start`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13390:28734":{"id":"2:13390:28734","crate_id":2,"name":"eq_ignore_ascii_case","span":null,"visibility":"public","docs":"Checks that two strings are an ASCII case-insensitive match.\n\nSame as `to_ascii_lowercase(a) == to_ascii_lowercase(b)`,\nbut without allocating and copying temporaries.\n\n# Examples\n\n```\nassert!(\"Ferris\".eq_ignore_ascii_case(\"FERRIS\"));\nassert!(\"Ferr√∂s\".eq_ignore_ascii_case(\"FERR√∂S\"));\nassert!(!\"Ferr√∂s\".eq_ignore_ascii_case(\"FERR√ñS\"));\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["other",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13336:31984":{"id":"2:13336:31984","crate_id":2,"name":"rsplitn","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by a\npattern, starting from the end of the string, restricted to returning\nat most `n` items.\n\nIf `n` substrings are returned, the last substring (the `n`th substring)\nwill contain the remainder of the string.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will not be double ended, because it is not\nefficient to support.\n\nFor splitting from the front, the [`splitn`] method can be used.\n\n[`splitn`]: str::splitn\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".rsplitn(3, ' ').collect();\nassert_eq!(v, [\"lamb\", \"little\", \"Mary had a\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".rsplitn(3, 'X').collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"lionX\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".rsplitn(2, \"::\").collect();\nassert_eq!(v, [\"leopard\", \"lion::tiger\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".rsplitn(2, |c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"ghi\", \"abc1def\"]);\n```","links":{"prim@char":"1:12341:471","str::splitn":"2:13333:31982","self::pattern":"2:12955:4358"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["n",{"primitive":"usize"}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RSplitN","id":"2:44087:9512","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12961:16506","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12961:16506","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12976:16507","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13396:36330":{"id":"2:13396:36330","crate_id":2,"name":"escape_debug","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_debug`].\n\nNote: only extended grapheme codepoints that begin the string will be\nescaped.\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"‚ù§\\n!\".escape_debug() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"‚ù§\\n!\".escape_debug());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"‚ù§\\\\n!\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"‚ù§\\n!\".escape_debug().to_string(), \"‚ù§\\\\n!\");\n```","links":{"`char::escape_debug`":"2:5021:36330"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EscapeDebug","id":"2:44264:9467","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13357:36321":{"id":"2:13357:36321","crate_id":2,"name":"trim","span":null,"visibility":"public","docs":"Returns a string slice with leading and trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Examples\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\n\nassert_eq!(\"Hello\\tworld\", s.trim());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a slice, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_trim\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5634:4017":{"id":"5:5634:4017","crate_id":5,"name":"repeat","span":null,"visibility":"public","docs":"Creates a new [`String`] by repeating a string `n` times.\n\n# Panics\n\nThis function will panic if the capacity would overflow.\n\n# Examples\n\nBasic usage:\n\n```\nassert_eq!(\"abc\".repeat(4), String::from(\"abcabcabcabc\"));\n```\n\nA panic upon overflow:\n\n```should_panic\n// this will panic at runtime\nlet huge = \"0123456789abcdef\".repeat(usize::MAX);\n```","links":{"`String`":"5:7645:243"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["n",{"primitive":"usize"}]],"output":{"resolved_path":{"name":"String","id":"5:7645:243","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}}},"paths":{"6:5390:7980":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_ifru_map"],"kind":"struct"},"2:23247:8594":{"crate_id":2,"path":["core","num","nonzero","private","NonZeroI64Inner"],"kind":"struct"},"17:10671:37436":{"crate_id":17,"path":["object","read","any","ComdatIteratorInternal"],"kind":"enum"},"6:7412:8422":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statfs64"],"kind":"struct"},"17:16249:7065":{"crate_id":17,"path":["object","xcoff","DwarfAux64"],"kind":"struct"},"6:5489:8036":{"crate_id":6,"path":["libc","unix","linux_like","linux","tls12_crypto_info_aes_gcm_128"],"kind":"struct"},"2:40826:4049":{"crate_id":2,"path":["core","iter","adapters","fuse","Fuse"],"kind":"struct"},"1:1603:3948":{"crate_id":1,"path":["std","collections","hash","set","Iter"],"kind":"struct"},"2:46422:8893":{"crate_id":2,"path":["core","core_arch","simd","m64x2"],"kind":"struct"},"24:5949:3934":{"crate_id":24,"path":["syn","ty","TypeParen"],"kind":"struct"},"24:3345:4205":{"crate_id":24,"path":["syn","token","Impl"],"kind":"struct"},"24:2342:3950":{"crate_id":24,"path":["syn","punctuated","PrivateIter"],"kind":"struct"},"2:10399:206":{"crate_id":2,"path":["core","fmt","Pointer"],"kind":"trait"},"2:42262:3947":{"crate_id":2,"path":["core","result","IntoIter"],"kind":"struct"},"24:4839:4266":{"crate_id":24,"path":["syn","token","SlashEq"],"kind":"struct"},"2:39711:214":{"crate_id":2,"path":["core","ops","range","RangeInclusive"],"kind":"struct"},"2:47108:8960":{"crate_id":2,"path":["core","core_arch","simd","i64x8"],"kind":"struct"},"16:2323:22993":{"crate_id":16,"path":["gimli","common","Vendor"],"kind":"enum"},"2:43965:9434":{"crate_id":2,"path":["core","str","iter","Split"],"kind":"struct"},"24:1373:9146":{"crate_id":24,"path":["syn","lit","LitFloatRepr"],"kind":"struct"},"5:2322:9411":{"crate_id":5,"path":["alloc","collections","btree","navigate","LazyLeafRange"],"kind":"struct"},"17:13064:6269":{"crate_id":17,"path":["object","read","CompressedData"],"kind":"struct"},"17:15410:6836":{"crate_id":17,"path":["object","pe","ImageDynamicRelocationTable"],"kind":"struct"},"2:22230:35302":{"crate_id":2,"path":["core","core_simd","vector","splat","Splat"],"kind":"struct"},"6:5466:8028":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_prinfo"],"kind":"struct"},"17:14414:6541":{"crate_id":17,"path":["object","macho","DyldInfoCommand"],"kind":"struct"},"2:30709:4089":{"crate_id":2,"path":["core","ptr","alignment","Alignment"],"kind":"struct"},"24:5007:2358":{"crate_id":24,"path":["syn","derive","DeriveInput"],"kind":"struct"},"2:34464:4261":{"crate_id":2,"path":["core","ops","bit","Shl"],"kind":"trait"},"17:13594:6382":{"crate_id":17,"path":["object","elf","HashHeader"],"kind":"struct"},"18:670:28194":{"crate_id":18,"path":["memchr","memmem","FindRevIter"],"kind":"struct"},"6:6721:8295":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_mmap_offsets_v1"],"kind":"struct"},"5:7393:9415":{"crate_id":5,"path":["alloc","collections","binary_heap","IntoIterSorted"],"kind":"struct"},"24:5345:3875":{"crate_id":24,"path":["syn","expr","ExprReference"],"kind":"struct"},"16:6749:9336":{"crate_id":16,"path":["gimli","read","line","LineInstructions"],"kind":"struct"},"6:570:7561":{"crate_id":6,"path":["libc","unix","tms"],"kind":"struct"},"17:15266:6797":{"crate_id":17,"path":["object","pe","ImageImportByName"],"kind":"struct"},"16:7052:23867":{"crate_id":16,"path":["gimli","read","loclists","LocListIter"],"kind":"struct"},"21:53:5572":{"crate_id":21,"path":["proc_macro","bridge","buffer","Buffer"],"kind":"struct"},"2:44899:227":{"crate_id":2,"path":["core","future","ResumeTy"],"kind":"struct"},"1:373:5345":{"crate_id":1,"path":["std","thread","scoped","ScopedJoinHandle"],"kind":"struct"},"16:7168:9073":{"crate_id":16,"path":["gimli","read","op","Operation"],"kind":"enum"},"2:8247:4032":{"crate_id":2,"path":["core","iter","traits","accum","Sum"],"kind":"trait"},"5:1509:3947":{"crate_id":5,"path":["alloc","collections","btree","map","IntoIter"],"kind":"struct"},"1:7988:11139":{"crate_id":1,"path":["std","sealed","Sealed"],"kind":"trait"},"1:12341:471":{"crate_id":1,"path":["std","char"],"kind":"primitive"},"5:3754:5765":{"crate_id":5,"path":["alloc","collections","linked_list","drop","DropGuard"],"kind":"struct"},"2:46756:8921":{"crate_id":2,"path":["core","core_arch","simd","m32x8"],"kind":"struct"},"24:4269:4227":{"crate_id":24,"path":["syn","token","AndEq"],"kind":"struct"},"10:36:7421":{"crate_id":10,"path":["adler","algo","U32X4"],"kind":"struct"},"2:32275:3281":{"crate_id":2,"path":["core","error","tags","Value"],"kind":"struct"},"17:14246:6516":{"crate_id":17,"path":["object","macho","TwolevelHintsCommand"],"kind":"struct"},"21:421:5753":{"crate_id":21,"path":["proc_macro","bridge","server","RunningSameThreadGuard"],"kind":"struct"},"1:7360:10591":{"crate_id":1,"path":["std","sys_common","backtrace","_print","DisplayBacktrace"],"kind":"struct"},"17:256:37404":{"crate_id":17,"path":["object","read","util","DebugByte"],"kind":"struct"},"17:14051:6469":{"crate_id":17,"path":["object","macho","PreboundDylibCommand"],"kind":"struct"},"6:5277:7938":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_tp"],"kind":"struct"},"24:267:10564":{"crate_id":24,"path":["syn","attr","parsing","DisplayAttrStyle"],"kind":"struct"},"16:5400:6140":{"crate_id":16,"path":["gimli","endianity","BigEndian"],"kind":"struct"},"2:7780:34353":{"crate_id":2,"path":["core","iter","adapters","GenericShunt"],"kind":"struct"},"6:1559:7615":{"crate_id":6,"path":["libc","unix","linux_like","fd_set"],"kind":"struct"},"24:3107:104":{"crate_id":24,"path":["syn","token","Break"],"kind":"struct"},"2:2028:671":{"crate_id":2,"path":["core","mem","drop"],"kind":"function"},"2:40611:9471":{"crate_id":2,"path":["core","ffi","c_str","FromBytesWithNulError"],"kind":"struct"},"2:44273:9461":{"crate_id":2,"path":["core","str","iter","EscapeDefault"],"kind":"struct"},"17:11661:9212":{"crate_id":17,"path":["object","read","elf","version","VerneedIterator"],"kind":"struct"},"9:424:22842":{"crate_id":9,"path":["miniz_oxide","MZStatus"],"kind":"enum"},"1:8654:8403":{"crate_id":1,"path":["std","os","linux","raw","arch","stat"],"kind":"struct"},"24:5382:3901":{"crate_id":24,"path":["syn","expr","ExprUnsafe"],"kind":"struct"},"2:9852:84":{"crate_id":2,"path":["core","sync","atomic","AtomicBool"],"kind":"struct"},"1:980:11061":{"crate_id":1,"path":["std","collections","hash","map","RawEntryBuilder"],"kind":"struct"},"2:6966:4039":{"crate_id":2,"path":["core","iter","adapters","map_windows","MapWindows"],"kind":"struct"},"11:2569:4004":{"crate_id":11,"path":["hashbrown","TryReserveError"],"kind":"enum"},"17:11605:6175":{"crate_id":17,"path":["object","read","elf","version","Version"],"kind":"struct"},"2:9420:4703":{"crate_id":2,"path":["core","panic","unwind_safe","AssertUnwindSafe"],"kind":"struct"},"16:6480:7107":{"crate_id":16,"path":["gimli","read","aranges","DebugAranges"],"kind":"struct"},"16:7590:7121":{"crate_id":16,"path":["gimli","read","rnglists","DebugRanges"],"kind":"struct"},"2:42109:3952":{"crate_id":2,"path":["core","option","IterMut"],"kind":"struct"},"16:3810:7134":{"crate_id":16,"path":["gimli","constants","DwSectV2"],"kind":"struct"},"1:8611:11245":{"crate_id":1,"path":["std","os","unix","net","ancillary","AncillaryError"],"kind":"enum"},"11:832:11056":{"crate_id":11,"path":["hashbrown","map","ValuesMut"],"kind":"struct"},"17:12863:6257":{"crate_id":17,"path":["object","read","SymbolMapName"],"kind":"struct"},"6:5014:7850":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_rumble_effect"],"kind":"struct"},"21:2643:2586":{"crate_id":21,"path":["proc_macro","Span"],"kind":"struct"},"1:12127:5883":{"crate_id":1,"path":["std","backtrace_rs","symbolize","gimli","mmap","Mmap"],"kind":"struct"},"6:4942:7815":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_keymap_entry"],"kind":"struct"},"17:13363:6329":{"crate_id":17,"path":["object","elf","Syminfo32"],"kind":"struct"},"2:46113:8869":{"crate_id":2,"path":["core","core_arch","simd","f32x2"],"kind":"struct"},"2:8063:4013":{"crate_id":2,"path":["core","iter","sources","once","once"],"kind":"function"},"16:3329:7130":{"crate_id":16,"path":["gimli","arch","LoongArch"],"kind":"struct"},"1:1092:11063":{"crate_id":1,"path":["std","collections","hash","map","VacantEntry"],"kind":"struct"},"2:43951:3492":{"crate_id":2,"path":["core","str","iter","Bytes"],"kind":"struct"},"2:32306:4136":{"crate_id":2,"path":["core","marker","Sized"],"kind":"trait"},"6:545:7548":{"crate_id":6,"path":["libc","unix","winsize"],"kind":"struct"},"1:12363:1846":{"crate_id":1,"path":["std","u64"],"kind":"primitive"},"1:8078:11089":{"crate_id":1,"path":["std","env","VarError"],"kind":"enum"},"9:502:7482":{"crate_id":9,"path":["miniz_oxide","StreamResult"],"kind":"struct"},"1:650:10581":{"crate_id":1,"path":["std","backtrace","Backtrace"],"kind":"struct"},"17:11915:24087":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandVariant"],"kind":"enum"},"1:7925:5869":{"crate_id":1,"path":["std","backtrace_rs","print","BacktraceFrameFmt"],"kind":"struct"},"24:5620:3914":{"crate_id":24,"path":["syn","lit","LitChar"],"kind":"struct"},"17:14212:6513":{"crate_id":17,"path":["object","macho","DylibModule64"],"kind":"struct"},"17:12189:24116":{"crate_id":17,"path":["object","read","pe","file","PeComdatIterator"],"kind":"struct"},"16:4502:7142":{"crate_id":16,"path":["gimli","constants","DwLle"],"kind":"struct"},"24:2334:3948":{"crate_id":24,"path":["syn","punctuated","Iter"],"kind":"struct"},"1:8852:9571":{"crate_id":1,"path":["std","path","Components"],"kind":"struct"},"1:7885:10592":{"crate_id":1,"path":["std","backtrace_rs","symbolize","SymbolName"],"kind":"struct"},"2:46661:8918":{"crate_id":2,"path":["core","core_arch","simd","f32x8"],"kind":"struct"},"17:14575:6226":{"crate_id":17,"path":["object","macho","Relocation"],"kind":"struct"},"14:40:2519":{"crate_id":14,"path":["rustc_demangle","v0","Ident"],"kind":"struct"},"17:14311:6523":{"crate_id":17,"path":["object","macho","LinkeditDataCommand"],"kind":"struct"},"2:4650:4086":{"crate_id":2,"path":["core","cell","Cell"],"kind":"struct"},"17:14325:6526":{"crate_id":17,"path":["object","macho","FilesetEntryCommand"],"kind":"struct"},"24:3770:4220":{"crate_id":24,"path":["syn","token","Unsized"],"kind":"struct"},"2:44711:9557":{"crate_id":2,"path":["core","str","UnsafeBytesToStr"],"kind":"struct"},"17:11877:6177":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandIterator"],"kind":"struct"},"21:2596:3947":{"crate_id":21,"path":["proc_macro","token_stream","IntoIter"],"kind":"struct"},"17:12408:6225":{"crate_id":17,"path":["object","read","pe","relocation","RelocationBlockIterator"],"kind":"struct"},"24:5269:3885":{"crate_id":24,"path":["syn","expr","ExprClosure"],"kind":"struct"},"5:6775:5765":{"crate_id":5,"path":["alloc","vec","into_iter","drop","DropGuard"],"kind":"struct"},"17:12724:23948":{"crate_id":17,"path":["object","read","FileKind"],"kind":"enum"},"2:43324:157":{"crate_id":2,"path":["core","hash","sip","Hasher"],"kind":"struct"},"17:14876:6693":{"crate_id":17,"path":["object","pe","ImageOptionalHeader32"],"kind":"struct"},"2:32282:34354":{"crate_id":2,"path":["core","error","tags","MaybeSizedValue"],"kind":"struct"},"2:23269:8596":{"crate_id":2,"path":["core","num","nonzero","private","NonZeroIsizeInner"],"kind":"struct"},"2:47271:8977":{"crate_id":2,"path":["core","core_arch","x86","__m512d"],"kind":"struct"},"24:5325:3873":{"crate_id":24,"path":["syn","expr","ExprMethodCall"],"kind":"struct"},"17:14503:6559":{"crate_id":17,"path":["object","macho","SourceVersionCommand"],"kind":"struct"},"17:15760:6947":{"crate_id":17,"path":["object","pe","ImageFunctionEntry"],"kind":"struct"},"2:23090:11210":{"crate_id":2,"path":["core","num","error","IntErrorKind"],"kind":"enum"},"24:3362:4206":{"crate_id":24,"path":["syn","token","In"],"kind":"struct"},"21:1781:5569":{"crate_id":21,"path":["proc_macro","bridge","Marked"],"kind":"struct"},"6:7602:8508":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ucontext_t"],"kind":"struct"},"1:3294:31634":{"crate_id":1,"path":["std","io","stdio","StdoutRaw"],"kind":"struct"},"6:6505:8194":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","mallinfo2"],"kind":"struct"},"24:644:137":{"crate_id":24,"path":["syn","error","Error"],"kind":"struct"},"20:815:2586":{"crate_id":20,"path":["proc_macro2","imp","Span"],"kind":"enum"},"6:6756:8307":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_statistics_v1"],"kind":"struct"},"1:11214:9066":{"crate_id":1,"path":["std","sys","pal","unix","process","process_inner","ExitStatusError"],"kind":"struct"},"1:2489:11131":{"crate_id":1,"path":["std","fs","read_dir"],"kind":"function"},"17:15596:6902":{"crate_id":17,"path":["object","pe","ImageHotPatchHashes"],"kind":"struct"},"23:281:2596":{"crate_id":23,"path":["quote","__private","push_lifetime_spanned","Lifetime"],"kind":"struct"},"2:13617:4049":{"crate_id":2,"path":["core","future","async_drop","Fuse"],"kind":"struct"},"17:10710:23943":{"crate_id":17,"path":["object","read","any","ComdatSectionIterator"],"kind":"struct"},"16:6398:7105":{"crate_id":16,"path":["gimli","read","abbrev","DebugAbbrev"],"kind":"struct"},"16:6532:9320":{"crate_id":16,"path":["gimli","read","aranges","ArangeEntryIter"],"kind":"struct"},"1:938:11056":{"crate_id":1,"path":["std","collections","hash","map","ValuesMut"],"kind":"struct"},"17:11242:23987":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdatSectionIterator"],"kind":"struct"},"2:42648:97":{"crate_id":2,"path":["core","sync","atomic","AtomicUsize"],"kind":"struct"},"2:44015:9508":{"crate_id":2,"path":["core","str","iter","SplitTerminator"],"kind":"struct"},"2:32394:2545":{"crate_id":2,"path":["core","marker","Tuple"],"kind":"trait"},"6:6621:8258":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","Elf64_Chdr"],"kind":"struct"},"6:1653:7684":{"crate_id":6,"path":["libc","unix","linux_like","arpreq"],"kind":"struct"},"24:5311:2859":{"crate_id":24,"path":["syn","expr","ExprLit"],"kind":"struct"},"2:42792:4092":{"crate_id":2,"path":["core","fmt","num","Octal"],"kind":"struct"},"2:8441:178":{"crate_id":2,"path":["core","iter","traits","iterator","Iterator"],"kind":"trait"},"2:39623:9459":{"crate_id":2,"path":["core","ops","index_range","IndexRange"],"kind":"struct"},"17:10251:6143":{"crate_id":17,"path":["object","endian","U64Bytes"],"kind":"struct"},"2:10339:226":{"crate_id":2,"path":["core","fmt","Result"],"kind":"type_alias"},"5:3885:5547":{"crate_id":5,"path":["alloc","collections","linked_list","ExtractIf"],"kind":"struct"},"5:7582:9418":{"crate_id":5,"path":["alloc","ffi","c_str","NulError"],"kind":"struct"},"6:8317:8546":{"crate_id":6,"path":["libc","unix","linux_like","linux","canfd_frame"],"kind":"struct"},"17:11089:23968":{"crate_id":17,"path":["object","read","coff","section","CoffSegmentIterator"],"kind":"struct"},"6:6821:8326":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","utmpx"],"kind":"struct"},"2:4912:4116":{"crate_id":2,"path":["core","cell","SyncUnsafeCell"],"kind":"struct"},"2:10643:11143":{"crate_id":2,"path":["core","hash","BuildHasher"],"kind":"trait"},"16:5769:9251":{"crate_id":16,"path":["gimli","read","cfi","EhHdrTable"],"kind":"struct"},"17:13723:6414":{"crate_id":17,"path":["object","macho","DyldCacheMappingInfo"],"kind":"struct"},"1:9726:5873":{"crate_id":1,"path":["std","sys","pal","unix","fs","Dir"],"kind":"struct"},"2:21707:35315":{"crate_id":2,"path":["core","core_simd","swizzle","deinterleave","Even"],"kind":"struct"},"1:3652:31873":{"crate_id":1,"path":["std","io","Write","write_fmt","Adapter"],"kind":"struct"},"17:15190:6780":{"crate_id":17,"path":["object","pe","ImageAuxSymbolCrc"],"kind":"struct"},"2:4066:3947":{"crate_id":2,"path":["core","array","iter","IntoIter"],"kind":"struct"},"1:10647:5874":{"crate_id":1,"path":["std","sys","pal","unix","stack_overflow","Handler"],"kind":"struct"},"16:6634:7113":{"crate_id":16,"path":["gimli","read","line","DebugLine"],"kind":"struct"},"17:15383:6829":{"crate_id":17,"path":["object","pe","ImageResourceDirStringU"],"kind":"struct"},"5:5466:16483":{"crate_id":5,"path":["alloc","slice","Concat"],"kind":"trait"},"15:394:22959":{"crate_id":15,"path":["addr2line","DebugFile"],"kind":"enum"},"1:1914:5616":{"crate_id":1,"path":["std","env","Args"],"kind":"struct"},"2:23079:9454":{"crate_id":2,"path":["core","num","error","ParseIntError"],"kind":"struct"},"11:2326:11062":{"crate_id":11,"path":["hashbrown","table","OccupiedEntry"],"kind":"struct"},"1:9265:9072":{"crate_id":1,"path":["std","sync","condvar","WaitTimeoutResult"],"kind":"struct"},"17:10170:6140":{"crate_id":17,"path":["object","endian","BigEndian"],"kind":"struct"},"1:8625:11192":{"crate_id":1,"path":["std","os","unix","net","listener","Incoming"],"kind":"struct"},"17:14177:6502":{"crate_id":17,"path":["object","macho","DylibTableOfContents"],"kind":"struct"},"6:6629:8259":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","Elf32_Chdr"],"kind":"struct"},"17:11341:23999":{"crate_id":17,"path":["object","read","elf","segment","ElfSegmentIterator"],"kind":"struct"},"11:2352:11063":{"crate_id":11,"path":["hashbrown","table","VacantEntry"],"kind":"struct"},"1:3334:11176":{"crate_id":1,"path":["std","io","stdio","Stdin"],"kind":"struct"},"6:7306:8370":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","sigaction"],"kind":"struct"},"17:437:6090":{"crate_id":17,"path":["object","read","any","Section"],"kind":"struct"},"2:2970:257":{"crate_id":2,"path":["core","convert","TryFrom"],"kind":"trait"},"17:2203:23995":{"crate_id":17,"path":["object","read","elf","relocation","ElfDynamicRelocationIterator"],"kind":"struct"},"11:1903:9399":{"crate_id":11,"path":["hashbrown","set","Intersection"],"kind":"struct"},"1:5092:11266":{"crate_id":1,"path":["std","os","net","linux_ext","socket","UnixSocketExt"],"kind":"trait"},"1:5083:11265":{"crate_id":1,"path":["std","os","net","linux_ext","addr","SocketAddrExt"],"kind":"trait"},"2:46171:8880":{"crate_id":2,"path":["core","core_arch","simd","u16x8"],"kind":"struct"},"21:2287:2519":{"crate_id":21,"path":["proc_macro","bridge","Ident"],"kind":"struct"},"23:272:2596":{"crate_id":23,"path":["quote","__private","push_lifetime","Lifetime"],"kind":"struct"},"2:38960:5998":{"crate_id":2,"path":["core","ops","bit","ShrAssign"],"kind":"trait"},"17:16198:7055":{"crate_id":17,"path":["object","xcoff","BlockAux32"],"kind":"struct"},"6:5134:7880":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Phdr"],"kind":"struct"},"2:3399:5452":{"crate_id":2,"path":["core","ops","coroutine","Coroutine"],"kind":"trait"},"2:33800:5993":{"crate_id":2,"path":["core","ops","arith","RemAssign"],"kind":"trait"},"2:44397:9532":{"crate_id":2,"path":["core","str","pattern","CharArraySearcher"],"kind":"struct"},"6:6636:8260":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","seminfo"],"kind":"struct"},"16:7769:7280":{"crate_id":16,"path":["gimli","read","UnitOffset"],"kind":"struct"},"1:4877:11268":{"crate_id":1,"path":["std","os","linux","process","ChildExt"],"kind":"trait"},"2:40714:4033":{"crate_id":2,"path":["core","iter","adapters","array_chunks","ArrayChunks"],"kind":"struct"},"2:32396:114":{"crate_id":2,"path":["core","marker","ConstParamTy"],"kind":"trait"},"17:12076:24049":{"crate_id":17,"path":["object","read","macho","section","MachOSection"],"kind":"struct"},"17:13146:6280":{"crate_id":17,"path":["object","archive","AixFileHeader"],"kind":"struct"},"6:5472:8031":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_authinfo"],"kind":"struct"},"23:11:3977":{"crate_id":23,"path":["quote","ext","TokenStreamExt"],"kind":"trait"},"18:531:9186":{"crate_id":18,"path":["memchr","memmem","prefilter","PrefilterState"],"kind":"struct"},"9:357:22855":{"crate_id":9,"path":["miniz_oxide","inflate","TINFLStatus"],"kind":"enum"},"24:5554:2519":{"crate_id":24,"path":["syn","ident","Ident"],"kind":"function"},"6:5191:7892":{"crate_id":6,"path":["libc","unix","linux_like","linux","posix_spawn_file_actions_t"],"kind":"struct"},"5:7610:9421":{"crate_id":5,"path":["alloc","ffi","c_str","FromVecWithNulError"],"kind":"struct"},"17:15582:6896":{"crate_id":17,"path":["object","pe","ImageHotPatchBase"],"kind":"struct"},"17:15720:6936":{"crate_id":17,"path":["object","pe","ImageDebugDirectory"],"kind":"struct"},"2:42687:10689":{"crate_id":2,"path":["core","sync","exclusive","Exclusive"],"kind":"struct"},"16:5960:9270":{"crate_id":16,"path":["gimli","read","cfi","PartialFrameDescriptionEntry"],"kind":"struct"},"2:44679:9549":{"crate_id":2,"path":["core","str","LinesMap"],"kind":"struct"},"2:34118:5035":{"crate_id":2,"path":["core","ops","bit","BitOr"],"kind":"trait"},"6:6441:8161":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__timeval"],"kind":"struct"},"17:13986:6461":{"crate_id":17,"path":["object","macho","DylibCommand"],"kind":"struct"},"16:6385:7177":{"crate_id":16,"path":["gimli","read","reader","ReaderOffsetId"],"kind":"struct"},"24:4431:134":{"crate_id":24,"path":["syn","token","Eq"],"kind":"struct"},"20:116:37478":{"crate_id":20,"path":["proc_macro2","rcvec","RcVecBuilder"],"kind":"struct"},"6:6519:8195":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_pktinfo"],"kind":"struct"},"24:3141:116":{"crate_id":24,"path":["syn","token","Continue"],"kind":"struct"},"17:12399:9233":{"crate_id":17,"path":["object","read","pe","import","DelayLoadDescriptorIterator"],"kind":"struct"},"6:7584:8505":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user_fpregs_struct"],"kind":"struct"},"21:1349:2600":{"crate_id":21,"path":["proc_macro","bridge","symbol","Symbol"],"kind":"struct"},"6:8265:8533":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_barrierattr_t"],"kind":"struct"},"24:5321:3894":{"crate_id":24,"path":["syn","expr","ExprMatch"],"kind":"struct"},"2:44414:9533":{"crate_id":2,"path":["core","str","pattern","CharArrayRefSearcher"],"kind":"struct"},"24:3022:4193":{"crate_id":24,"path":["syn","token","Async"],"kind":"struct"},"1:9185:9068":{"crate_id":1,"path":["std","sync","mpsc","SendError"],"kind":"struct"},"2:816:11197":{"crate_id":2,"path":["core","num","nonzero","ZeroablePrimitive"],"kind":"trait"},"2:23721:236":{"crate_id":2,"path":["core","num","saturating","Saturating"],"kind":"struct"},"2:44733:130":{"crate_id":2,"path":["core","time","Duration"],"kind":"struct"},"6:6698:8286":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_ring_offset"],"kind":"struct"},"24:5955:3935":{"crate_id":24,"path":["syn","ty","TypePtr"],"kind":"struct"},"6:5653:8102":{"crate_id":6,"path":["libc","unix","linux_like","linux","sched_attr"],"kind":"struct"},"6:0:1002":{"crate_id":6,"path":["libc"],"kind":"module"},"17:14545:6563":{"crate_id":17,"path":["object","macho","Nlist32"],"kind":"struct"},"2:21800:11346":{"crate_id":2,"path":["core","core_simd","lane_count","SupportedLaneCount"],"kind":"trait"},"1:10927:9566":{"crate_id":1,"path":["std","sys","pal","unix","fs","OpenOptions"],"kind":"struct"},"24:5238:3881":{"crate_id":24,"path":["syn","expr","ExprAsync"],"kind":"struct"},"2:3049:137":{"crate_id":2,"path":["core","error","Error"],"kind":"trait"},"5:1531:9397":{"crate_id":5,"path":["alloc","collections","btree","map","Keys"],"kind":"struct"},"17:13437:6340":{"crate_id":17,"path":["object","elf","ProgramHeader32"],"kind":"struct"},"17:11493:24005":{"crate_id":17,"path":["object","read","elf","relocation","RelocationSections"],"kind":"struct"},"5:939:5773":{"crate_id":5,"path":["alloc","collections","binary_heap","Hole"],"kind":"struct"},"16:2660:7094":{"crate_id":16,"path":["gimli","common","RawRangeListsOffset"],"kind":"struct"},"24:4810:4264":{"crate_id":24,"path":["syn","token","ShrEq"],"kind":"struct"},"24:5298:3871":{"crate_id":24,"path":["syn","expr","ExprIndex"],"kind":"struct"},"16:6120:23859":{"crate_id":16,"path":["gimli","read","cfi","RegisterRule"],"kind":"enum"},"1:11923:9595":{"crate_id":1,"path":["std","backtrace_rs","backtrace","Frame"],"kind":"struct"},"1:2629:11170":{"crate_id":1,"path":["std","io","buffered","bufreader","BufReader"],"kind":"struct"},"16:2684:7095":{"crate_id":16,"path":["gimli","common","RangeListsOffset"],"kind":"struct"},"2:42167:4705":{"crate_id":2,"path":["core","panic","unwind_safe","UnwindSafe"],"kind":"trait"},"2:23203:8590":{"crate_id":2,"path":["core","num","nonzero","private","NonZeroUsizeInner"],"kind":"struct"},"6:6706:8290":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_mmap_offsets"],"kind":"struct"},"16:5817:9253":{"crate_id":16,"path":["gimli","read","cfi","BaseAddresses"],"kind":"struct"},"17:1207:23974":{"crate_id":17,"path":["object","read","coff","relocation","CoffRelocationIterator"],"kind":"struct"},"5:6612:5765":{"crate_id":5,"path":["alloc","vec","drain","drop","DropGuard"],"kind":"struct"},"24:3549:4112":{"crate_id":24,"path":["syn","token","Ref"],"kind":"struct"},"18:689:9192":{"crate_id":18,"path":["memchr","memmem","FinderRev"],"kind":"struct"},"24:5427:63":{"crate_id":24,"path":["syn","expr","parsing","kw","raw"],"kind":"struct"},"17:12201:24117":{"crate_id":17,"path":["object","read","pe","file","PeComdat"],"kind":"struct"},"2:44699:9554":{"crate_id":2,"path":["core","str","IsAsciiWhitespace"],"kind":"struct"},"6:6491:8184":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","mallinfo"],"kind":"struct"},"24:0:2355":{"crate_id":24,"path":["syn"],"kind":"module"},"5:680:10574":{"crate_id":5,"path":["alloc","boxed","from","StringError"],"kind":"struct"},"17:11674:9213":{"crate_id":17,"path":["object","read","elf","version","VernauxIterator"],"kind":"struct"},"6:6417:8145":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","aiocb"],"kind":"struct"},"17:11443:6171":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbolTable"],"kind":"struct"},"24:5810:2900":{"crate_id":24,"path":["syn","path","AssocConst"],"kind":"struct"},"1:11201:9065":{"crate_id":1,"path":["std","sys","pal","unix","process","process_inner","ExitStatus"],"kind":"struct"},"1:3523:4018":{"crate_id":1,"path":["std","io","util","Repeat"],"kind":"struct"},"24:5333:3874":{"crate_id":24,"path":["syn","expr","ExprParen"],"kind":"struct"},"6:559:7556":{"crate_id":6,"path":["libc","unix","sigval"],"kind":"struct"},"5:7425:9416":{"crate_id":5,"path":["alloc","collections","btree","map","UnorderedKeyError"],"kind":"struct"},"6:4909:7801":{"crate_id":6,"path":["libc","unix","linux_like","linux","sembuf"],"kind":"struct"},"16:2528:7088":{"crate_id":16,"path":["gimli","common","DebugLineStrOffset"],"kind":"struct"},"17:12362:9231":{"crate_id":17,"path":["object","read","pe","import","ImportThunkList"],"kind":"struct"},"6:4971:7826":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_envelope"],"kind":"struct"},"17:2234:24017":{"crate_id":17,"path":["object","read","elf","relocation","ElfSectionRelocationIterator"],"kind":"struct"},"1:12361:1834":{"crate_id":1,"path":["std","u16"],"kind":"primitive"},"11:2369:22924":{"crate_id":11,"path":["hashbrown","table","AbsentEntry"],"kind":"struct"},"11:2536:2507":{"crate_id":11,"path":["hashbrown","raw","sse2","Group"],"kind":"struct"},"2:8797:34214":{"crate_id":2,"path":["core","net","display_buffer","DisplayBuffer"],"kind":"struct"},"24:1062:37841":{"crate_id":24,"path":["syn","generics","Lifetimes"],"kind":"struct"},"5:1324:9368":{"crate_id":5,"path":["alloc","collections","btree","map","entry","Entry"],"kind":"enum"},"24:1013:4071":{"crate_id":24,"path":["syn","ext","IdentExt"],"kind":"trait"},"17:9916:23935":{"crate_id":17,"path":["object","common","SymbolScope"],"kind":"enum"},"0:964:2368":{"crate_id":0,"path":["serde_derive","Serialize"],"kind":"proc_derive"},"17:13211:6303":{"crate_id":17,"path":["object","elf","FileHeader64"],"kind":"struct"},"16:8093:7324":{"crate_id":16,"path":["gimli","read","unit","AttrsIter"],"kind":"struct"},"20:806:37475":{"crate_id":20,"path":["proc_macro2","imp","TokenTreeIter"],"kind":"enum"},"2:21721:35306":{"crate_id":2,"path":["core","core_simd","swizzle","resize","Resize"],"kind":"struct"},"11:811:5547":{"crate_id":11,"path":["hashbrown","map","ExtractIf"],"kind":"struct"},"17:3597:24069":{"crate_id":17,"path":["object","read","macho","relocation","MachORelocationIterator"],"kind":"struct"},"16:7321:4701":{"crate_id":16,"path":["gimli","read","op","Location"],"kind":"enum"},"2:40482:9466":{"crate_id":2,"path":["core","char","EscapeUnicode"],"kind":"struct"},"5:4848:802":{"crate_id":5,"path":["alloc","fmt"],"kind":"module"},"24:1800:3959":{"crate_id":24,"path":["syn","parse","Parse"],"kind":"trait"},"2:23225:8592":{"crate_id":2,"path":["core","num","nonzero","private","NonZeroI16Inner"],"kind":"struct"},"17:12530:24128":{"crate_id":17,"path":["object","read","xcoff","section","XcoffSectionIterator"],"kind":"struct"},"16:7379:37405":{"crate_id":16,"path":["gimli","read","op","EvaluationState"],"kind":"enum"},"1:9743:127":{"crate_id":1,"path":["std","sys","pal","unix","fs","DirBuilder"],"kind":"struct"},"16:3614:7132":{"crate_id":16,"path":["gimli","arch","X86"],"kind":"struct"},"24:4774:4261":{"crate_id":24,"path":["syn","token","Shl"],"kind":"struct"},"1:3430:11174":{"crate_id":1,"path":["std","io","stdio","Stderr"],"kind":"struct"},"17:12328:9222":{"crate_id":17,"path":["object","read","pe","export","ExportTable"],"kind":"struct"},"11:396:5760":{"crate_id":11,"path":["hashbrown","raw","RawDrain"],"kind":"struct"},"2:11359:16502":{"crate_id":2,"path":["core","slice","iter","SplitInclusiveMut"],"kind":"struct"},"21:2701:2911":{"crate_id":21,"path":["proc_macro","Punct"],"kind":"struct"},"2:39691:215":{"crate_id":2,"path":["core","ops","range","RangeTo"],"kind":"struct"},"2:12470:16648":{"crate_id":2,"path":["core","slice","SlicePattern"],"kind":"trait"},"2:43299:9493":{"crate_id":2,"path":["core","hash","sip","SipHasher13"],"kind":"struct"},"2:38381:5997":{"crate_id":2,"path":["core","ops","bit","ShlAssign"],"kind":"trait"},"17:10954:23957":{"crate_id":17,"path":["object","read","archive","ArchiveKind"],"kind":"enum"},"24:1804:4073":{"crate_id":24,"path":["syn","parse","ParseBuffer"],"kind":"struct"},"20:693:4084":{"crate_id":20,"path":["proc_macro2","parse","Cursor"],"kind":"struct"},"24:3702:2502":{"crate_id":24,"path":["syn","token","Type"],"kind":"struct"},"16:7306:37425":{"crate_id":16,"path":["gimli","read","op","OperationEvaluationResult"],"kind":"enum"},"2:3090:11102":{"crate_id":2,"path":["core","error","Request"],"kind":"struct"},"16:6047:23857":{"crate_id":16,"path":["gimli","read","cfi","UnwindTable"],"kind":"struct"},"9:238:8829":{"crate_id":9,"path":["miniz_oxide","inflate","core","State"],"kind":"enum"},"1:8093:10582":{"crate_id":1,"path":["std","env","JoinPathsError"],"kind":"struct"},"17:11524:24040":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdatSectionIterator"],"kind":"struct"},"16:6574:7125":{"crate_id":16,"path":["gimli","read","index","DebugTuIndex"],"kind":"struct"},"2:43872:16498":{"crate_id":2,"path":["core","slice","iter","RChunksMut"],"kind":"struct"},"6:5174:7883":{"crate_id":6,"path":["libc","unix","linux_like","linux","ucred"],"kind":"struct"},"24:5230:3879":{"crate_id":24,"path":["syn","expr","ExprArray"],"kind":"struct"},"2:43762:9438":{"crate_id":2,"path":["core","slice","iter","Windows"],"kind":"struct"},"24:1029:11139":{"crate_id":24,"path":["syn","ext","private","Sealed"],"kind":"trait"},"16:3475:7131":{"crate_id":16,"path":["gimli","arch","RiscV"],"kind":"struct"},"1:8560:11191":{"crate_id":1,"path":["std","net","tcp","IntoIncoming"],"kind":"struct"},"1:8726:9056":{"crate_id":1,"path":["std","path","Prefix"],"kind":"enum"},"20:775:3969":{"crate_id":20,"path":["proc_macro2","extra","DelimSpan"],"kind":"struct"},"6:4965:7823":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_trigger"],"kind":"struct"},"5:7385:3947":{"crate_id":5,"path":["alloc","collections","binary_heap","IntoIter"],"kind":"struct"},"11:883:11061":{"crate_id":11,"path":["hashbrown","map","RawEntryBuilder"],"kind":"struct"},"2:3736:4121":{"crate_id":2,"path":["core","ops","unsize","DispatchFromDyn"],"kind":"trait"},"24:5830:3924":{"crate_id":24,"path":["syn","restriction","Visibility"],"kind":"enum"},"1:11648:11295":{"crate_id":1,"path":["std","sys_common","process","CommandEnvs"],"kind":"struct"},"24:5497:3904":{"crate_id":24,"path":["syn","generics","BoundLifetimes"],"kind":"struct"},"2:11321:16496":{"crate_id":2,"path":["core","slice","iter","SplitMut"],"kind":"struct"},"16:6849:9350":{"crate_id":16,"path":["gimli","read","line","IncompleteLineProgram"],"kind":"struct"},"2:42254:3952":{"crate_id":2,"path":["core","result","IterMut"],"kind":"struct"},"17:13832:6436":{"crate_id":17,"path":["object","macho","LoadCommand"],"kind":"struct"},"2:4602:4123":{"crate_id":2,"path":["core","cell","once","OnceCell"],"kind":"struct"},"1:4688:11247":{"crate_id":1,"path":["std","os","unix","process","ExitStatusExt"],"kind":"trait"},"24:4941:3849":{"crate_id":24,"path":["syn","attr","AttrStyle"],"kind":"enum"},"2:47233:8969":{"crate_id":2,"path":["core","core_arch","x86","__m512i"],"kind":"struct"},"24:5754:3919":{"crate_id":24,"path":["syn","op","UnOp"],"kind":"enum"},"21:2583:252":{"crate_id":21,"path":["proc_macro","TokenStream"],"kind":"struct"},"6:5244:7919":{"crate_id":6,"path":["libc","unix","linux_like","linux","fanotify_response"],"kind":"struct"},"16:7727:7123":{"crate_id":16,"path":["gimli","read","str","DebugStr"],"kind":"struct"},"6:5102:7877":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Sym"],"kind":"struct"},"6:5283:7941":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_j1939"],"kind":"struct"},"6:5336:7959":{"crate_id":6,"path":["libc","unix","linux_like","linux","seccomp_notif"],"kind":"struct"},"17:13292:6317":{"crate_id":17,"path":["object","elf","CompressionHeader32"],"kind":"struct"},"2:3270:5999":{"crate_id":2,"path":["core","ops","arith","Neg"],"kind":"trait"},"1:9317:29832":{"crate_id":1,"path":["std","sync","mpmc","list","Position"],"kind":"struct"},"16:6802:9337":{"crate_id":16,"path":["gimli","read","line","LineSequence"],"kind":"struct"},"16:7497:7272":{"crate_id":16,"path":["gimli","read","op","OperationIter"],"kind":"struct"},"24:5529:3577":{"crate_id":24,"path":["syn","generics","WhereClause"],"kind":"struct"},"21:2706:2585":{"crate_id":21,"path":["proc_macro","Spacing"],"kind":"enum"},"2:40878:4052":{"crate_id":2,"path":["core","iter","adapters","peekable","Peekable"],"kind":"struct"},"1:1619:9399":{"crate_id":1,"path":["std","collections","hash","set","Intersection"],"kind":"struct"},"2:44768:16691":{"crate_id":2,"path":["core","time","TryFromFloatSecsErrorKind"],"kind":"enum"},"5:7658:9425":{"crate_id":5,"path":["alloc","string","FromUtf8Error"],"kind":"struct"},"1:7875:2600":{"crate_id":1,"path":["std","backtrace_rs","symbolize","Symbol"],"kind":"struct"},"2:3699:4119":{"crate_id":2,"path":["core","ops","unsize","CoerceUnsized"],"kind":"trait"},"2:43315:9496":{"crate_id":2,"path":["core","hash","sip","SipHasher"],"kind":"struct"},"17:10661:23942":{"crate_id":17,"path":["object","read","any","ComdatIterator"],"kind":"struct"},"1:4319:11239":{"crate_id":1,"path":["std","os","unix","net","ancillary","ScmRights"],"kind":"struct"},"24:1078:37840":{"crate_id":24,"path":["syn","generics","TypeParams"],"kind":"struct"},"24:5502:3073":{"crate_id":24,"path":["syn","generics","TypeParamBound"],"kind":"enum"},"5:7634:5796":{"crate_id":5,"path":["alloc","rc","UniqueRc"],"kind":"struct"},"1:12348:1812":{"crate_id":1,"path":["std","tuple"],"kind":"primitive"},"17:13046:6266":{"crate_id":17,"path":["object","read","CompressedFileRange"],"kind":"struct"},"17:15957:6981":{"crate_id":17,"path":["object","xcoff","AuxHeader32"],"kind":"struct"},"18:515:6019":{"crate_id":18,"path":["memchr","memmem","prefilter","PrefilterFn"],"kind":"struct"},"1:12352:738":{"crate_id":1,"path":["std","f32"],"kind":"primitive"},"17:11547:6011":{"crate_id":17,"path":["object","read","elf","note","Note"],"kind":"struct"},"1:8862:3948":{"crate_id":1,"path":["std","path","Iter"],"kind":"struct"},"1:10512:29633":{"crate_id":1,"path":["std","sys","pal","unix","process","process_common","Argv"],"kind":"struct"},"1:4880:11246":{"crate_id":1,"path":["std","os","linux","process","CommandExt"],"kind":"trait"},"16:2854:7103":{"crate_id":16,"path":["gimli","common","DebugFrameOffset"],"kind":"struct"},"1:11787:11194":{"crate_id":1,"path":["std","sys_common","net","TcpStream"],"kind":"struct"},"2:819:190":{"crate_id":2,"path":["core","num","nonzero","NonZero"],"kind":"struct"},"24:3209:4199":{"crate_id":24,"path":["syn","token","Dyn"],"kind":"struct"},"2:40707:11135":{"crate_id":2,"path":["core","io","borrowed_buf","BorrowedCursor"],"kind":"struct"},"2:46594:8915":{"crate_id":2,"path":["core","core_arch","simd","i16x16"],"kind":"struct"},"2:2219:189":{"crate_id":2,"path":["core","ptr","non_null","NonNull"],"kind":"struct"},"17:11354:23998":{"crate_id":17,"path":["object","read","elf","segment","ElfSegment"],"kind":"struct"},"1:3387:11178":{"crate_id":1,"path":["std","io","stdio","Stdout"],"kind":"struct"},"24:4298:4229":{"crate_id":24,"path":["syn","token","Caret"],"kind":"struct"},"1:10227:9488":{"crate_id":1,"path":["std","sys","pal","unix","net","Socket"],"kind":"struct"},"16:7755:7114":{"crate_id":16,"path":["gimli","read","str","DebugLineStr"],"kind":"struct"},"2:45947:8855":{"crate_id":2,"path":["core","core_arch","simd","i8x4"],"kind":"struct"},"2:43346:9497":{"crate_id":2,"path":["core","hash","sip","Sip13Rounds"],"kind":"struct"},"16:7397:37421":{"crate_id":16,"path":["gimli","read","op","EvaluationWaiting"],"kind":"enum"},"2:44033:9509":{"crate_id":2,"path":["core","str","iter","RSplitTerminator"],"kind":"struct"},"6:8288:8539":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_mutex_t"],"kind":"struct"},"17:12289:6218":{"crate_id":17,"path":["object","read","pe","data_directory","DataDirectories"],"kind":"struct"},"5:7493:3947":{"crate_id":5,"path":["alloc","collections","vec_deque","into_iter","IntoIter"],"kind":"struct"},"1:4400:11243":{"crate_id":1,"path":["std","os","unix","net","datagram","UnixDatagram"],"kind":"struct"},"17:14147:6483":{"crate_id":17,"path":["object","macho","DysymtabCommand"],"kind":"struct"},"2:44248:9522":{"crate_id":2,"path":["core","str","iter","SplitAsciiWhitespace"],"kind":"struct"},"6:1517:7587":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_in"],"kind":"struct"},"24:5445:2527":{"crate_id":24,"path":["syn","generics","Generics"],"kind":"struct"},"1:3897:11194":{"crate_id":1,"path":["std","net","tcp","TcpStream"],"kind":"struct"},"2:32289:4112":{"crate_id":2,"path":["core","error","tags","Ref"],"kind":"struct"},"2:41072:4058":{"crate_id":2,"path":["core","iter","adapters","take_while","TakeWhile"],"kind":"struct"},"2:47187:8965":{"crate_id":2,"path":["core","core_arch","x86","__m128d"],"kind":"struct"},"2:44703:9555":{"crate_id":2,"path":["core","str","IsNotEmpty"],"kind":"struct"},"6:465:2508":{"crate_id":6,"path":["libc","unix","group"],"kind":"struct"},"17:15138:6763":{"crate_id":17,"path":["object","pe","ImageAuxSymbolFunction"],"kind":"struct"},"1:4813:8416":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt","st_mtime"],"kind":"function"},"5:7566:5337":{"crate_id":5,"path":["alloc","ffi","c_str","CString"],"kind":"struct"},"2:43080:34447":{"crate_id":2,"path":["core","fmt","rt","ArgumentType"],"kind":"enum"},"5:7465:9417":{"crate_id":5,"path":["alloc","collections","btree","set_val","SetValZST"],"kind":"struct"},"2:42799:4100":{"crate_id":2,"path":["core","fmt","num","LowerHex"],"kind":"struct"},"11:787:9398":{"crate_id":11,"path":["hashbrown","map","Values"],"kind":"struct"},"1:6672:4014":{"crate_id":1,"path":["std","sync","once","Once"],"kind":"struct"},"17:10524:23940":{"crate_id":17,"path":["object","read","any","SegmentIterator"],"kind":"struct"},"16:7132:9367":{"crate_id":16,"path":["gimli","read","lookup","PubStuffParser"],"kind":"struct"},"17:10887:37452":{"crate_id":17,"path":["object","read","any","DynamicRelocationIteratorInternal"],"kind":"enum"},"1:4327:11240":{"crate_id":1,"path":["std","os","unix","net","ancillary","ScmCredentials"],"kind":"struct"},"2:2609:5486":{"crate_id":2,"path":["core","ptr","with_exposed_provenance_mut"],"kind":"function"},"6:6542:8208":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","rtentry"],"kind":"struct"},"6:5528:8044":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_nl"],"kind":"struct"},"24:2619:5982":{"crate_id":24,"path":["syn","thread","ThreadBound"],"kind":"struct"},"2:22703:11426":{"crate_id":2,"path":["core","core_simd","simd","cmp","ord","SimdPartialOrd"],"kind":"trait"},"5:2220:9404":{"crate_id":5,"path":["alloc","collections","btree","merge_iter","MergeIterInner"],"kind":"struct"},"24:5031:2778":{"crate_id":24,"path":["syn","derive","DataUnion"],"kind":"struct"},"2:40461:9464":{"crate_id":2,"path":["core","char","decode","DecodeUtf16"],"kind":"struct"},"2:44187:9518":{"crate_id":2,"path":["core","str","iter","RMatches"],"kind":"struct"},"2:22788:9444":{"crate_id":2,"path":["core","num","bignum","Big32x40"],"kind":"struct"},"17:14025:6465":{"crate_id":17,"path":["object","macho","SubUmbrellaCommand"],"kind":"struct"},"1:4133:11213":{"crate_id":1,"path":["std","os","unix","fs","FileExt"],"kind":"trait"},"17:15324:6811":{"crate_id":17,"path":["object","pe","ImageBoundImportDescriptor"],"kind":"struct"},"2:21653:5112":{"crate_id":2,"path":["core","core_simd","swizzle","reverse","Reverse"],"kind":"struct"},"16:2394:7082":{"crate_id":16,"path":["gimli","common","DebugAbbrevOffset"],"kind":"struct"},"16:6648:9332":{"crate_id":16,"path":["gimli","read","line","LineRows"],"kind":"struct"},"17:10759:6166":{"crate_id":17,"path":["object","read","any","SymbolTable"],"kind":"struct"},"17:10044:23938":{"crate_id":17,"path":["object","common","SegmentFlags"],"kind":"enum"},"24:5839:3923":{"crate_id":24,"path":["syn","restriction","VisRestricted"],"kind":"struct"},"17:14284:6521":{"crate_id":17,"path":["object","macho","UuidCommand"],"kind":"struct"},"24:5480:3905":{"crate_id":24,"path":["syn","generics","ConstParam"],"kind":"struct"},"17:10317:6145":{"crate_id":17,"path":["object","endian","I32Bytes"],"kind":"struct"},"17:9755:23912":{"crate_id":17,"path":["object","common","AddressSize"],"kind":"enum"},"21:2726:3203":{"crate_id":21,"path":["proc_macro","Literal"],"kind":"struct"},"17:11367:6158":{"crate_id":17,"path":["object","read","elf","section","SectionTable"],"kind":"struct"},"16:7823:23874":{"crate_id":16,"path":["gimli","read","unit","UnitType"],"kind":"enum"},"2:43837:4033":{"crate_id":2,"path":["core","slice","iter","ArrayChunks"],"kind":"struct"},"11:1582:22922":{"crate_id":11,"path":["hashbrown","rustc_entry","RustcOccupiedEntry"],"kind":"struct"},"2:40937:4041":{"crate_id":2,"path":["core","iter","adapters","step_by","StepBy"],"kind":"struct"},"1:4097:11212":{"crate_id":1,"path":["std","os","unix","ffi","os_str","OsStringExt"],"kind":"trait"},"1:8606:9570":{"crate_id":1,"path":["std","os","unix","net","ancillary","SocketCred"],"kind":"struct"},"11:1087:37372":{"crate_id":11,"path":["hashbrown","map","KeyOrRef"],"kind":"enum"},"1:4917:11227":{"crate_id":1,"path":["std","os","fd","raw","AsRawFd"],"kind":"trait"},"24:2461:3140":{"crate_id":24,"path":["syn","punctuated","Pair"],"kind":"enum"},"17:12647:24126":{"crate_id":17,"path":["object","read","xcoff","comdat","XcoffComdatIterator"],"kind":"struct"},"1:9350:28320":{"crate_id":1,"path":["std","sync","mpmc","select","Selected"],"kind":"enum"},"16:7695:7277":{"crate_id":16,"path":["gimli","read","rnglists","RawRange"],"kind":"struct"},"2:41320:4022":{"crate_id":2,"path":["core","iter","sources","repeat_with","RepeatWith"],"kind":"struct"},"2:13884:5837":{"crate_id":2,"path":["core","task","wake","Waker"],"kind":"struct"},"2:2340:5454":{"crate_id":2,"path":["core","ptr","unique","Unique"],"kind":"struct"},"16:7061:7232":{"crate_id":16,"path":["gimli","read","loclists","LocationListEntry"],"kind":"struct"},"24:3090:2567":{"crate_id":24,"path":["syn","token","Box"],"kind":"struct"},"16:6427:10659":{"crate_id":16,"path":["gimli","read","abbrev","AbbreviationsCache"],"kind":"struct"},"6:4800:7728":{"crate_id":6,"path":["libc","unix","linux_like","linux","passwd"],"kind":"struct"},"17:13738:6418":{"crate_id":17,"path":["object","macho","DyldCacheImageInfo"],"kind":"struct"},"11:1066:22918":{"crate_id":11,"path":["hashbrown","map","EntryRef"],"kind":"enum"},"16:6335:10643":{"crate_id":16,"path":["gimli","read","dwarf","RangeIter"],"kind":"struct"},"1:12360:1852":{"crate_id":1,"path":["std","u8"],"kind":"primitive"},"2:46099:8868":{"crate_id":2,"path":["core","core_arch","simd","i64x1"],"kind":"struct"},"6:7359:8399":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stack_t"],"kind":"struct"},"6:1496:7579":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreqn"],"kind":"struct"},"17:12043:24051":{"crate_id":17,"path":["object","read","macho","segment","MachOSegment"],"kind":"struct"},"16:8073:3850":{"crate_id":16,"path":["gimli","read","unit","Attribute"],"kind":"struct"},"1:4002:11195":{"crate_id":1,"path":["std","net","udp","UdpSocket"],"kind":"struct"},"24:3311:4203":{"crate_id":24,"path":["syn","token","For"],"kind":"struct"},"5:6072:16881":{"crate_id":5,"path":["alloc","sync","ArcInner"],"kind":"struct"},"17:15434:6840":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation32V2"],"kind":"struct"},"2:46511:8912":{"crate_id":2,"path":["core","core_arch","simd","u32x8"],"kind":"struct"},"2:3209:247":{"crate_id":2,"path":["core","marker","Sync"],"kind":"trait"},"17:15748:6945":{"crate_id":17,"path":["object","pe","ImageDebugMisc"],"kind":"struct"},"2:43336:8829":{"crate_id":2,"path":["core","hash","sip","State"],"kind":"struct"},"11:299:9391":{"crate_id":11,"path":["hashbrown","raw","RawIterRange"],"kind":"struct"},"17:13272:6316":{"crate_id":17,"path":["object","elf","SectionHeader64"],"kind":"struct"},"11:1896:5547":{"crate_id":11,"path":["hashbrown","set","ExtractIf"],"kind":"struct"},"2:33532:3993":{"crate_id":2,"path":["core","ops","arith","AddAssign"],"kind":"trait"},"6:8306:8542":{"crate_id":6,"path":["libc","unix","linux_like","linux","can_frame"],"kind":"struct"},"1:11028:28324":{"crate_id":1,"path":["std","sys","pal","unix","process","process_common","ProgramKind"],"kind":"enum"},"11:800:5549":{"crate_id":11,"path":["hashbrown","map","Drain"],"kind":"struct"},"2:44695:9553":{"crate_id":2,"path":["core","str","IsWhitespace"],"kind":"struct"},"24:4419:4237":{"crate_id":24,"path":["syn","token","DotDotEq"],"kind":"struct"},"2:10393:3120":{"crate_id":2,"path":["core","fmt","Binary"],"kind":"trait"},"24:5977:3925":{"crate_id":24,"path":["syn","ty","BareFnArg"],"kind":"struct"},"2:43924:9501":{"crate_id":2,"path":["core","str","error","ParseBoolError"],"kind":"struct"},"1:9551:5616":{"crate_id":1,"path":["std","sys","pal","unix","args","Args"],"kind":"struct"},"12:0:3707":{"crate_id":12,"path":["rustc_std_workspace_alloc"],"kind":"module"},"21:2682:3968":{"crate_id":21,"path":["proc_macro","Delimiter"],"kind":"enum"},"2:7716:4043":{"crate_id":2,"path":["core","iter","adapters","zip","TrustedRandomAccessNoCoerce"],"kind":"trait"},"2:42001:9491":{"crate_id":2,"path":["core","net","parser","AddrParseError"],"kind":"struct"},"16:6278:10644":{"crate_id":16,"path":["gimli","read","dwarf","Dwarf"],"kind":"struct"},"2:43101:4089":{"crate_id":2,"path":["core","fmt","Alignment"],"kind":"enum"},"2:40812:9476":{"crate_id":2,"path":["core","iter","adapters","flatten","FlattenCompat"],"kind":"struct"},"24:5246:3867":{"crate_id":24,"path":["syn","expr","ExprBinary"],"kind":"struct"},"2:41286:4014":{"crate_id":2,"path":["core","iter","sources","once","Once"],"kind":"struct"},"24:1929:4083":{"crate_id":24,"path":["syn","parse","Nothing"],"kind":"struct"},"2:2934:16555":{"crate_id":2,"path":["core","convert","num","FloatToInt"],"kind":"trait"},"2:40544:9468":{"crate_id":2,"path":["core","char","ToLowercase"],"kind":"struct"},"2:22981:8572":{"crate_id":2,"path":["core","num","flt2dec","decoder","Decoded"],"kind":"struct"},"17:11051:23979":{"crate_id":17,"path":["object","read","coff","file","CoffCommon"],"kind":"struct"},"20:709:9182":{"crate_id":20,"path":["proc_macro2","rcvec","RcVecIntoIter"],"kind":"struct"},"2:12961:16506":{"crate_id":2,"path":["core","str","pattern","Pattern"],"kind":"trait"},"1:9179:3947":{"crate_id":1,"path":["std","sync","mpsc","IntoIter"],"kind":"struct"},"17:12572:6166":{"crate_id":17,"path":["object","read","xcoff","symbol","SymbolTable"],"kind":"struct"},"1:957:11058":{"crate_id":1,"path":["std","collections","hash","map","RawEntryMut"],"kind":"enum"},"16:4940:7156":{"crate_id":16,"path":["gimli","constants","DwDefaulted"],"kind":"struct"},"2:40578:9469":{"crate_id":2,"path":["core","char","ToUppercase"],"kind":"struct"},"6:5415:7992":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_initmsg"],"kind":"struct"},"2:12716:9513":{"crate_id":2,"path":["core","str","iter","MatchIndicesInternal"],"kind":"struct"},"6:6729:8296":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_umem_reg"],"kind":"struct"},"24:5945:3932":{"crate_id":24,"path":["syn","ty","TypeMacro"],"kind":"struct"},"6:6471:8171":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","cmsghdr"],"kind":"struct"},"2:22191:11139":{"crate_id":2,"path":["core","core_simd","to_bytes","sealed","Sealed"],"kind":"trait"},"1:669:11047":{"crate_id":1,"path":["std","backtrace","BacktraceSymbol"],"kind":"struct"},"2:3455:141":{"crate_id":2,"path":["core","ops","function","FnMut"],"kind":"trait"},"17:15646:6915":{"crate_id":17,"path":["object","pe","ImageRuntimeFunctionEntry"],"kind":"struct"},"17:15078:6753":{"crate_id":17,"path":["object","pe","ImageSymbol"],"kind":"struct"},"6:1593:7636":{"crate_id":6,"path":["libc","unix","linux_like","lconv"],"kind":"struct"},"2:44282:9466":{"crate_id":2,"path":["core","str","iter","EscapeUnicode"],"kind":"struct"},"16:7539:7119":{"crate_id":16,"path":["gimli","read","pubnames","DebugPubNames"],"kind":"struct"},"6:6524:8196":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_mmap_req"],"kind":"struct"},"1:6566:186":{"crate_id":1,"path":["std","sync","mutex","Mutex"],"kind":"struct"},"16:5995:9272":{"crate_id":16,"path":["gimli","read","cfi","FrameDescriptionEntry"],"kind":"struct"},"1:9155:9067":{"crate_id":1,"path":["std","process","ExitCode"],"kind":"struct"},"1:974:11060":{"crate_id":1,"path":["std","collections","hash","map","RawVacantEntryMut"],"kind":"struct"},"1:2463:11122":{"crate_id":1,"path":["std","fs","symlink_metadata"],"kind":"function"},"2:2729:112":{"crate_id":2,"path":["core","clone","Clone"],"kind":"trait"},"2:41279:4012":{"crate_id":2,"path":["core","iter","sources","from_fn","FromFn"],"kind":"struct"},"16:5347:7163":{"crate_id":16,"path":["gimli","constants","DwEhPe"],"kind":"struct"},"1:494:5840":{"crate_id":1,"path":["std","thread","spawn_unchecked_","MaybeDangling"],"kind":"struct"},"24:5307:3892":{"crate_id":24,"path":["syn","expr","ExprLet"],"kind":"struct"},"24:5965:3937":{"crate_id":24,"path":["syn","ty","TypeSlice"],"kind":"struct"},"2:8386:4029":{"crate_id":2,"path":["core","iter","traits","exact_size","ExactSizeIterator"],"kind":"trait"},"5:2116:11065":{"crate_id":5,"path":["alloc","collections","btree","map","CursorMut"],"kind":"struct"},"24:4653:4253":{"crate_id":24,"path":["syn","token","Percent"],"kind":"struct"},"17:15769:6951":{"crate_id":17,"path":["object","pe","ImageFunctionEntry64"],"kind":"struct"},"1:9721:11134":{"crate_id":1,"path":["std","sys","pal","unix","fs","ReadDir"],"kind":"struct"},"2:44592:9547":{"crate_id":2,"path":["core","str","lossy","Utf8Chunks"],"kind":"struct"},"1:8058:11051":{"crate_id":1,"path":["std","backtrace","BacktraceStatus"],"kind":"enum"},"2:40622:16632":{"crate_id":2,"path":["core","ffi","c_str","FromBytesWithNulErrorKind"],"kind":"enum"},"15:327:10660":{"crate_id":15,"path":["addr2line","RangeAttributes"],"kind":"struct"},"17:16259:6333":{"crate_id":17,"path":["object","xcoff","Rel32"],"kind":"struct"},"24:5350:3896":{"crate_id":24,"path":["syn","expr","ExprRepeat"],"kind":"struct"},"17:11841:24084":{"crate_id":17,"path":["object","read","macho","file","MachOComdatIterator"],"kind":"struct"},"1:5509:128":{"crate_id":1,"path":["std","path","Display"],"kind":"struct"},"6:5296:7946":{"crate_id":6,"path":["libc","unix","linux_like","linux","j1939_filter"],"kind":"struct"},"17:15301:6806":{"crate_id":17,"path":["object","pe","ImageTlsDirectory32"],"kind":"struct"},"17:597:2600":{"crate_id":17,"path":["object","read","any","Symbol"],"kind":"struct"},"2:40743:4044":{"crate_id":2,"path":["core","iter","adapters","chain","Chain"],"kind":"struct"},"20:715:252":{"crate_id":20,"path":["proc_macro2","fallback","TokenStream"],"kind":"struct"},"6:1510:7584":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr"],"kind":"struct"},"1:521:5321":{"crate_id":1,"path":["std","thread","PanicGuard"],"kind":"struct"},"1:10985:28626":{"crate_id":1,"path":["std","sys","pal","unix","kernel_copy","FdHandle"],"kind":"enum"},"2:5092:16544":{"crate_id":2,"path":["core","char","REPLACEMENT_CHARACTER"],"kind":"constant"},"17:10915:37433":{"crate_id":17,"path":["object","read","any","SectionRelocationIteratorInternal"],"kind":"enum"},"5:6051:5795":{"crate_id":5,"path":["alloc","sync","Weak"],"kind":"struct"},"2:21908:11139":{"crate_id":2,"path":["core","core_simd","masks","sealed","Sealed"],"kind":"trait"},"18:598:5977":{"crate_id":18,"path":["memchr","memmem","twoway","Shift"],"kind":"enum"},"2:11501:16501":{"crate_id":2,"path":["core","slice","iter","SplitNMut"],"kind":"struct"},"2:42126:4701":{"crate_id":2,"path":["core","panic","location","Location"],"kind":"struct"},"6:5064:7875":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Ehdr"],"kind":"struct"},"17:13999:6462":{"crate_id":17,"path":["object","macho","SubFrameworkCommand"],"kind":"struct"},"17:0:3711":{"crate_id":17,"path":["object"],"kind":"module"},"17:10218:6142":{"crate_id":17,"path":["object","endian","U32Bytes"],"kind":"struct"},"6:1671:7691":{"crate_id":6,"path":["libc","unix","linux_like","arphdr"],"kind":"struct"},"2:10395:4100":{"crate_id":2,"path":["core","fmt","LowerHex"],"kind":"trait"},"2:43771:9439":{"crate_id":2,"path":["core","slice","iter","Chunks"],"kind":"struct"},"16:6066:9281":{"crate_id":16,"path":["gimli","read","cfi","RegisterRuleIter"],"kind":"struct"},"2:46727:8920":{"crate_id":2,"path":["core","core_arch","simd","m16x16"],"kind":"struct"},"24:2140:2512":{"crate_id":24,"path":["syn","punctuated","Punctuated"],"kind":"struct"},"1:3586:9044":{"crate_id":1,"path":["std","io","Read"],"kind":"trait"},"17:13455:6348":{"crate_id":17,"path":["object","elf","ProgramHeader64"],"kind":"struct"},"2:46644:8917":{"crate_id":2,"path":["core","core_arch","simd","i64x4"],"kind":"struct"},"24:3464:4210":{"crate_id":24,"path":["syn","token","Move"],"kind":"struct"},"16:6098:23858":{"crate_id":16,"path":["gimli","read","cfi","CfaRule"],"kind":"enum"},"17:14912:6723":{"crate_id":17,"path":["object","pe","ImageRomOptionalHeader"],"kind":"struct"},"2:43052:8827":{"crate_id":2,"path":["core","fmt","rt","Count"],"kind":"enum"},"1:3604:11136":{"crate_id":1,"path":["std","io","IoSliceMut"],"kind":"struct"},"2:46032:8864":{"crate_id":2,"path":["core","core_arch","simd","u64x1"],"kind":"struct"},"24:3804:4222":{"crate_id":24,"path":["syn","token","Virtual"],"kind":"struct"},"2:42157:4702":{"crate_id":2,"path":["core","panic","panic_info","PanicInfo"],"kind":"struct"},"2:43811:8834":{"crate_id":2,"path":["core","slice","iter","ArrayWindows"],"kind":"struct"},"1:10898:11270":{"crate_id":1,"path":["std","sys","pal","unix","fd","FileDesc"],"kind":"struct"},"17:16269:6338":{"crate_id":17,"path":["object","xcoff","Rel64"],"kind":"struct"},"2:40756:4035":{"crate_id":2,"path":["core","iter","adapters","cloned","Cloned"],"kind":"struct"},"21:242:37549":{"crate_id":21,"path":["proc_macro","bridge","handle","OwnedStore"],"kind":"struct"},"5:4162:3952":{"crate_id":5,"path":["alloc","collections","vec_deque","iter_mut","IterMut"],"kind":"struct"},"2:40637:9472":{"crate_id":2,"path":["core","ffi","c_str","FromBytesUntilNulError"],"kind":"struct"},"17:12683:24130":{"crate_id":17,"path":["object","read","xcoff","segment","XcoffSegmentIterator"],"kind":"struct"},"24:4315:4230":{"crate_id":24,"path":["syn","token","CaretEq"],"kind":"struct"},"2:10039:34210":{"crate_id":2,"path":["core","fmt","builders","PadAdapter"],"kind":"struct"},"24:5766:203":{"crate_id":24,"path":["syn","path","Path"],"kind":"struct"},"24:2115:10990":{"crate_id":24,"path":["syn","print","TokensOrDefault"],"kind":"struct"},"21:895:5586":{"crate_id":21,"path":["proc_macro","bridge","client","FreeFunctions"],"kind":"struct"},"1:12362:1840":{"crate_id":1,"path":["std","u32"],"kind":"primitive"},"21:2592:4130":{"crate_id":21,"path":["proc_macro","ExpandError"],"kind":"struct"},"1:1997:11099":{"crate_id":1,"path":["std","error","Indented"],"kind":"struct"},"2:42117:3947":{"crate_id":2,"path":["core","option","IntoIter"],"kind":"struct"},"6:4891:7789":{"crate_id":6,"path":["libc","unix","linux_like","linux","if_nameindex"],"kind":"struct"},"16:7656:23872":{"crate_id":16,"path":["gimli","read","rnglists","RawRngListEntry"],"kind":"enum"},"1:5596:11287":{"crate_id":1,"path":["std","process","ChildStdin"],"kind":"struct"},"16:4771:7150":{"crate_id":16,"path":["gimli","constants","DwId"],"kind":"struct"},"16:5006:7158":{"crate_id":16,"path":["gimli","constants","DwLne"],"kind":"struct"},"17:12768:23917":{"crate_id":17,"path":["object","read","ObjectKind"],"kind":"enum"},"1:8257:10588":{"crate_id":1,"path":["std","io","buffered","IntoInnerError"],"kind":"struct"},"24:306:37649":{"crate_id":24,"path":["syn","bigint","BigInt"],"kind":"struct"},"2:4881:4115":{"crate_id":2,"path":["core","cell","UnsafeCell"],"kind":"struct"},"14:220:7408":{"crate_id":14,"path":["rustc_demangle","SizeLimitExhausted"],"kind":"struct"},"18:563:6022":{"crate_id":18,"path":["memchr","memmem","rarebytes","RareNeedleBytes"],"kind":"struct"},"17:12464:24121":{"crate_id":17,"path":["object","read","pe","resource","ResourceDirectoryEntryData"],"kind":"enum"},"24:4670:4254":{"crate_id":24,"path":["syn","token","PercentEq"],"kind":"struct"},"16:6872:9351":{"crate_id":16,"path":["gimli","read","line","CompleteLineProgram"],"kind":"struct"},"1:4811:8414":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt","st_atime"],"kind":"function"},"11:2469:5547":{"crate_id":11,"path":["hashbrown","table","ExtractIf"],"kind":"struct"},"6:1663:7690":{"crate_id":6,"path":["libc","unix","linux_like","arpreq_old"],"kind":"struct"},"18:491:9185":{"crate_id":18,"path":["memchr","cow","Imp"],"kind":"struct"},"2:11515:16500":{"crate_id":2,"path":["core","slice","iter","RSplitNMut"],"kind":"struct"},"24:3617:3251":{"crate_id":24,"path":["syn","token","Static"],"kind":"struct"},"11:2562:7419":{"crate_id":11,"path":["hashbrown","raw","TableLayout"],"kind":"struct"},"1:11931:9595":{"crate_id":1,"path":["std","backtrace_rs","backtrace","libunwind","Frame"],"kind":"enum"},"21:2677:2507":{"crate_id":21,"path":["proc_macro","Group"],"kind":"struct"},"24:5612:2725":{"crate_id":24,"path":["syn","lit","LitStr"],"kind":"struct"},"2:21794:11343":{"crate_id":2,"path":["core","core_simd","lane_count","LaneCount"],"kind":"struct"},"17:12543:24127":{"crate_id":17,"path":["object","read","xcoff","section","XcoffSection"],"kind":"struct"},"2:10648:9432":{"crate_id":2,"path":["core","hash","BuildHasherDefault"],"kind":"struct"},"6:6738:8299":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_umem_reg_v1"],"kind":"struct"},"5:7727:5547":{"crate_id":5,"path":["alloc","vec","extract_if","ExtractIf"],"kind":"struct"},"2:8753:4027":{"crate_id":2,"path":["core","iter","traits","marker","TrustedLen"],"kind":"trait"},"2:46084:8867":{"crate_id":2,"path":["core","core_arch","simd","i32x2"],"kind":"struct"},"2:40888:4053":{"crate_id":2,"path":["core","iter","adapters","rev","Rev"],"kind":"struct"},"2:40734:4034":{"crate_id":2,"path":["core","iter","adapters","by_ref_sized","ByRefSized"],"kind":"struct"},"2:40913:4055":{"crate_id":2,"path":["core","iter","adapters","skip","Skip"],"kind":"struct"},"1:11005:10582":{"crate_id":1,"path":["std","sys","pal","unix","os","JoinPathsError"],"kind":"struct"},"16:2636:7093":{"crate_id":16,"path":["gimli","common","DebugMacroOffset"],"kind":"struct"},"2:4503:16535":{"crate_id":2,"path":["core","async_iter","async_iter","IntoAsyncIterator"],"kind":"trait"},"17:11016:23959":{"crate_id":17,"path":["object","read","archive","ArchiveMemberIterator"],"kind":"struct"},"2:47176:8964":{"crate_id":2,"path":["core","core_arch","x86","__m128"],"kind":"struct"},"2:2707:102":{"crate_id":2,"path":["core","borrow","Borrow"],"kind":"trait"},"21:2334:3203":{"crate_id":21,"path":["proc_macro","bridge","Literal"],"kind":"struct"},"1:1069:9368":{"crate_id":1,"path":["std","collections","hash","map","Entry"],"kind":"enum"},"5:6433:11437":{"crate_id":5,"path":["alloc","task","LocalWake"],"kind":"trait"},"10:44:7422":{"crate_id":10,"path":["adler","Adler32"],"kind":"struct"},"3:0:505":{"crate_id":3,"path":["compiler_builtins"],"kind":"module"},"2:23258:8595":{"crate_id":2,"path":["core","num","nonzero","private","NonZeroI128Inner"],"kind":"struct"},"17:12300:24120":{"crate_id":17,"path":["object","read","pe","export","ExportTarget"],"kind":"enum"},"1:9337:9073":{"crate_id":1,"path":["std","sync","mpmc","select","Operation"],"kind":"struct"},"17:11042:23961":{"crate_id":17,"path":["object","read","archive","ArchiveMember"],"kind":"struct"},"5:7595:16632":{"crate_id":5,"path":["alloc","ffi","c_str","FromBytesWithNulErrorKind"],"kind":"enum"},"1:8177:5625":{"crate_id":1,"path":["std","fs","Metadata"],"kind":"struct"},"1:9296:28312":{"crate_id":1,"path":["std","sync","mpmc","error","SendTimeoutError"],"kind":"enum"},"24:3719:4218":{"crate_id":24,"path":["syn","token","Typeof"],"kind":"struct"},"16:8216:9387":{"crate_id":16,"path":["gimli","read","unit","DebugTypesUnitHeadersIter"],"kind":"struct"},"2:40774:4045":{"crate_id":2,"path":["core","iter","adapters","cycle","Cycle"],"kind":"struct"},"1:3059:226":{"crate_id":1,"path":["std","io","error","Result"],"kind":"type_alias"},"6:8029:8528":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","align","sem_t"],"kind":"struct"},"11:2443:5549":{"crate_id":11,"path":["hashbrown","table","Drain"],"kind":"struct"},"5:2127:11066":{"crate_id":5,"path":["alloc","collections","btree","map","CursorMutKey"],"kind":"struct"},"1:9229:11313":{"crate_id":1,"path":["std","sync","mpsc","RecvTimeoutError"],"kind":"enum"},"5:7551:4005":{"crate_id":5,"path":["alloc","collections","TryReserveErrorKind"],"kind":"enum"},"1:11316:9084":{"crate_id":1,"path":["std","sys","personality","dwarf","eh","EHContext"],"kind":"struct"},"1:4801:11216":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt"],"kind":"trait"},"17:15426:6839":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation64"],"kind":"struct"},"2:11282:9436":{"crate_id":2,"path":["core","slice","iter","SplitInclusive"],"kind":"struct"},"24:3532:4214":{"crate_id":24,"path":["syn","token","Pub"],"kind":"struct"},"2:3204:117":{"crate_id":2,"path":["core","marker","Copy"],"kind":"trait"},"1:3480:11165":{"crate_id":1,"path":["std","io","stdio","IsTerminal"],"kind":"trait"},"5:2102:4084":{"crate_id":5,"path":["alloc","collections","btree","map","Cursor"],"kind":"struct"},"21:2553:9180":{"crate_id":21,"path":["proc_macro","diagnostic","Children"],"kind":"struct"},"15:306:22950":{"crate_id":15,"path":["addr2line","LocationRangeUnitIter"],"kind":"struct"},"16:2838:7102":{"crate_id":16,"path":["gimli","common","DebugTypeSignature"],"kind":"struct"},"6:4924:7807":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_id"],"kind":"struct"},"18:96:28182":{"crate_id":18,"path":["memchr","memchr","iter","Memchr2"],"kind":"struct"},"16:4718:7148":{"crate_id":16,"path":["gimli","constants","DwLang"],"kind":"struct"},"17:15390:6830":{"crate_id":17,"path":["object","pe","ImageResourceDataEntry"],"kind":"struct"},"2:32364:4137":{"crate_id":2,"path":["core","marker","Unpin"],"kind":"trait"},"16:5367:23853":{"crate_id":16,"path":["gimli","endianity","RunTimeEndian"],"kind":"enum"},"16:8118:9380":{"crate_id":16,"path":["gimli","read","unit","EntriesRaw"],"kind":"struct"},"6:5477:8033":{"crate_id":6,"path":["libc","unix","linux_like","linux","rlimit64"],"kind":"struct"},"17:15214:6784":{"crate_id":17,"path":["object","pe","ImageBaseRelocation"],"kind":"struct"},"1:2699:5842":{"crate_id":1,"path":["std","io","buffered","bufwriter","BufWriter"],"kind":"struct"},"16:8175:23876":{"crate_id":16,"path":["gimli","read","unit","EntriesTreeNode"],"kind":"struct"},"2:21690:35308":{"crate_id":2,"path":["core","core_simd","swizzle","interleave","Lo"],"kind":"struct"},"6:5219:7905":{"crate_id":6,"path":["libc","unix","linux_like","linux","in6_pktinfo"],"kind":"struct"},"1:8797:9059":{"crate_id":1,"path":["std","path","PrefixComponent"],"kind":"struct"},"6:5677:8114":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_can"],"kind":"struct"},"24:5234:3880":{"crate_id":24,"path":["syn","expr","ExprAssign"],"kind":"struct"},"2:40448:8798":{"crate_id":2,"path":["core","char","convert","CharTryFromError"],"kind":"struct"},"24:4395:4235":{"crate_id":24,"path":["syn","token","DotDot"],"kind":"struct"},"6:5557:8061":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_setup"],"kind":"struct"},"2:22925:8567":{"crate_id":2,"path":["core","num","dec2flt","number","Number"],"kind":"struct"},"24:4974:2533":{"crate_id":24,"path":["syn","data","Variant"],"kind":"struct"},"17:12808:6255":{"crate_id":17,"path":["object","read","SymbolIndex"],"kind":"struct"},"17:11510:23993":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdat"],"kind":"struct"},"17:2037:24000":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbolIterator"],"kind":"struct"},"17:15456:6845":{"crate_id":17,"path":["object","pe","ImagePrologueDynamicRelocationHeader"],"kind":"struct"},"6:5617:8089":{"crate_id":6,"path":["libc","unix","linux_like","linux","ifreq"],"kind":"struct"},"6:5546:8055":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_alg"],"kind":"struct"},"6:1699:7704":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_storage"],"kind":"struct"},"17:14560:6567":{"crate_id":17,"path":["object","macho","Nlist64"],"kind":"struct"},"17:16235:7064":{"crate_id":17,"path":["object","xcoff","DwarfAux32"],"kind":"struct"},"17:12238:24094":{"crate_id":17,"path":["object","read","pe","section","PeSegment"],"kind":"struct"},"17:11865:24086":{"crate_id":17,"path":["object","read","macho","file","MachOComdatSectionIterator"],"kind":"struct"},"17:14968:6729":{"crate_id":17,"path":["object","pe","ImageNtHeaders64"],"kind":"struct"},"5:5729:5553":{"crate_id":5,"path":["alloc","string","retain","SetLenOnDrop"],"kind":"struct"},"17:15197:6781":{"crate_id":17,"path":["object","pe","ImageRelocation"],"kind":"struct"},"2:46405:8892":{"crate_id":2,"path":["core","core_arch","simd","m32x4"],"kind":"struct"},"24:1031:5980":{"crate_id":24,"path":["syn","ext","private","PeekFn"],"kind":"struct"},"2:43863:9441":{"crate_id":2,"path":["core","slice","iter","RChunks"],"kind":"struct"},"20:883:2586":{"crate_id":20,"path":["proc_macro2","Span"],"kind":"struct"},"18:718:6035":{"crate_id":18,"path":["memchr","memmem","NeedleInfo"],"kind":"struct"},"2:40765:4036":{"crate_id":2,"path":["core","iter","adapters","copied","Copied"],"kind":"struct"},"20:719:3966":{"crate_id":20,"path":["proc_macro2","fallback","LexError"],"kind":"struct"},"16:5415:7164":{"crate_id":16,"path":["gimli","read","util","sealed","CapacityFull"],"kind":"struct"},"1:8554:11192":{"crate_id":1,"path":["std","net","tcp","Incoming"],"kind":"struct"},"1:1968:10583":{"crate_id":1,"path":["std","error","Report"],"kind":"struct"},"17:14091:6474":{"crate_id":17,"path":["object","macho","RoutinesCommand32"],"kind":"struct"},"2:39801:8671":{"crate_id":2,"path":["core","array","TryFromSliceError"],"kind":"struct"},"17:14235:6514":{"crate_id":17,"path":["object","macho","DylibReference"],"kind":"struct"},"4:0:3702":{"crate_id":4,"path":["rustc_std_workspace_core"],"kind":"module"},"1:367:5344":{"crate_id":1,"path":["std","thread","scoped","Scope"],"kind":"struct"},"1:8187:9566":{"crate_id":1,"path":["std","fs","OpenOptions"],"kind":"struct"},"1:11609:29826":{"crate_id":1,"path":["std","sys","thread_local","fast_local","Key"],"kind":"struct"},"1:8565:11188":{"crate_id":1,"path":["std","net","Shutdown"],"kind":"enum"},"17:12278:24119":{"crate_id":17,"path":["object","read","pe","section","PeRelocationIterator"],"kind":"struct"},"17:11419:6166":{"crate_id":17,"path":["object","read","elf","symbol","SymbolTable"],"kind":"struct"},"17:15289:6800":{"crate_id":17,"path":["object","pe","ImageTlsDirectory64"],"kind":"struct"},"24:5259:3868":{"crate_id":24,"path":["syn","expr","ExprCall"],"kind":"struct"},"24:5624:3915":{"crate_id":24,"path":["syn","lit","LitFloat"],"kind":"struct"},"1:2004:785":{"crate_id":1,"path":["std","ffi"],"kind":"module"},"16:6494:9317":{"crate_id":16,"path":["gimli","read","aranges","ArangeHeaderIter"],"kind":"struct"},"1:5773:11291":{"crate_id":1,"path":["std","process","Termination"],"kind":"trait"},"5:7622:9424":{"crate_id":5,"path":["alloc","ffi","c_str","IntoStringError"],"kind":"struct"},"1:5952:11304":{"crate_id":1,"path":["std","sync","barrier","Barrier"],"kind":"struct"},"1:11233:8840":{"crate_id":1,"path":["std","sys","pal","unix","time","Nanoseconds"],"kind":"struct"},"1:314:1774":{"crate_id":1,"path":["std","thread"],"kind":"module"},"24:3243:2532":{"crate_id":24,"path":["syn","token","Enum"],"kind":"struct"},"5:7376:5459":{"crate_id":5,"path":["alloc","alloc","Global"],"kind":"struct"},"2:42806:4101":{"crate_id":2,"path":["core","fmt","num","UpperHex"],"kind":"struct"},"17:14356:6532":{"crate_id":17,"path":["object","macho","EncryptionInfoCommand64"],"kind":"struct"},"2:4859:4114":{"crate_id":2,"path":["core","cell","RefMut"],"kind":"struct"},"6:1485:7574":{"crate_id":6,"path":["libc","unix","linux_like","in_addr"],"kind":"struct"},"16:2418:7083":{"crate_id":16,"path":["gimli","common","DebugAddrBase"],"kind":"struct"},"6:5344:7960":{"crate_id":6,"path":["libc","unix","linux_like","linux","seccomp_notif_resp"],"kind":"struct"},"6:5588:8070":{"crate_id":6,"path":["libc","unix","linux_like","linux","mq_attr"],"kind":"struct"},"2:4360:5789":{"crate_id":2,"path":["core","array","Guard"],"kind":"struct"},"11:844:11058":{"crate_id":11,"path":["hashbrown","map","RawEntryMut"],"kind":"enum"},"2:23170:8587":{"crate_id":2,"path":["core","num","nonzero","private","NonZeroU32Inner"],"kind":"struct"},"24:4472:4240":{"crate_id":24,"path":["syn","token","Ge"],"kind":"struct"},"2:46854:8954":{"crate_id":2,"path":["core","core_arch","simd","u8x64"],"kind":"struct"},"11:328:9394":{"crate_id":11,"path":["hashbrown","raw","RawIter"],"kind":"struct"},"24:3651:4217":{"crate_id":24,"path":["syn","token","Super"],"kind":"struct"},"17:15010:6736":{"crate_id":17,"path":["object","pe","AnonObjectHeader"],"kind":"struct"},"17:13538:6365":{"crate_id":17,"path":["object","elf","Verneed"],"kind":"struct"},"17:12056:6211":{"crate_id":17,"path":["object","read","macho","segment","MachOSegmentInternal"],"kind":"struct"},"17:13497:6353":{"crate_id":17,"path":["object","elf","Versym"],"kind":"struct"},"17:15944:6303":{"crate_id":17,"path":["object","xcoff","FileHeader64"],"kind":"struct"},"1:5283:29807":{"crate_id":1,"path":["std","path","fmt","DebugHelper"],"kind":"struct"},"17:10185:6141":{"crate_id":17,"path":["object","endian","U16Bytes"],"kind":"struct"},"16:6263:9311":{"crate_id":16,"path":["gimli","read","cfi","PointerEncodingParameters"],"kind":"struct"},"17:4821:24131":{"crate_id":17,"path":["object","read","xcoff","symbol","XcoffSymbolIterator"],"kind":"struct"},"16:5802:23855":{"crate_id":16,"path":["gimli","read","cfi","CieOffsetEncoding"],"kind":"enum"},"2:40471:9465":{"crate_id":2,"path":["core","char","decode","DecodeUtf16Error"],"kind":"struct"},"17:13473:6349":{"crate_id":17,"path":["object","elf","Dyn32"],"kind":"struct"},"24:5820:3921":{"crate_id":24,"path":["syn","path","ParenthesizedGenericArguments"],"kind":"struct"},"24:3158:4197":{"crate_id":24,"path":["syn","token","Crate"],"kind":"struct"},"2:10600:153":{"crate_id":2,"path":["core","hash","Hash"],"kind":"trait"},"2:22675:11425":{"crate_id":2,"path":["core","core_simd","simd","cmp","eq","SimdPartialEq"],"kind":"trait"},"24:5314:3893":{"crate_id":24,"path":["syn","expr","ExprLoop"],"kind":"struct"},"2:13706:205":{"crate_id":2,"path":["core","future","pending","Pending"],"kind":"struct"},"2:46931:8955":{"crate_id":2,"path":["core","core_arch","simd","i16x32"],"kind":"struct"},"6:564:7558":{"crate_id":6,"path":["libc","unix","itimerval"],"kind":"struct"},"2:39751:3998":{"crate_id":2,"path":["core","ops","range","Bound"],"kind":"enum"},"24:5264:3869":{"crate_id":24,"path":["syn","expr","ExprCast"],"kind":"struct"},"2:47150:8962":{"crate_id":2,"path":["core","core_arch","simd","f64x8"],"kind":"struct"},"17:9781:23932":{"crate_id":17,"path":["object","common","BinaryFormat"],"kind":"enum"},"2:46017:8863":{"crate_id":2,"path":["core","core_arch","simd","u32x2"],"kind":"struct"},"16:6456:23862":{"crate_id":16,"path":["gimli","read","abbrev","Attributes"],"kind":"enum"},"17:16138:7039":{"crate_id":17,"path":["object","xcoff","CsectAux32"],"kind":"struct"},"2:46338:8889":{"crate_id":2,"path":["core","core_arch","simd","f64x4"],"kind":"struct"},"6:5565:8063":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_user_dev"],"kind":"struct"},"1:5959:11305":{"crate_id":1,"path":["std","sync","barrier","BarrierWaitResult"],"kind":"struct"},"24:1366:9143":{"crate_id":24,"path":["syn","lit","LitRepr"],"kind":"struct"},"2:3430:4120":{"crate_id":2,"path":["core","ops","deref","DerefMut"],"kind":"trait"},"24:2988:4191":{"crate_id":24,"path":["syn","token","Abstract"],"kind":"struct"},"2:8251:4031":{"crate_id":2,"path":["core","iter","traits","accum","Product"],"kind":"trait"},"2:32305:237":{"crate_id":2,"path":["core","marker","Send"],"kind":"trait"},"16:5927:9264":{"crate_id":16,"path":["gimli","read","cfi","CommonInformationEntry"],"kind":"struct"},"2:47207:8967":{"crate_id":2,"path":["core","core_arch","x86","__m256"],"kind":"struct"},"23:235:5032":{"crate_id":23,"path":["quote","__private","get_span","GetSpan"],"kind":"struct"},"6:7348:8394":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","siginfo_t"],"kind":"struct"},"5:839:101":{"crate_id":5,"path":["alloc","collections","binary_heap","BinaryHeap"],"kind":"struct"},"17:16212:7059":{"crate_id":17,"path":["object","xcoff","BlockAux64"],"kind":"struct"},"17:11647:9211":{"crate_id":17,"path":["object","read","elf","version","VerdauxIterator"],"kind":"struct"},"2:2130:5500":{"crate_id":2,"path":["core","ptr","metadata","Pointee"],"kind":"trait"},"17:15222:6786":{"crate_id":17,"path":["object","pe","ImageArchiveMemberHeader"],"kind":"struct"},"17:10068:23919":{"crate_id":17,"path":["object","common","SectionFlags"],"kind":"enum"},"17:14131:6478":{"crate_id":17,"path":["object","macho","SymtabCommand"],"kind":"struct"},"1:7944:5871":{"crate_id":1,"path":["std","backtrace_rs","Bomb"],"kind":"struct"},"17:11227:23964":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdat"],"kind":"struct"},"16:0:3710":{"crate_id":16,"path":["gimli"],"kind":"module"},"24:96:5172":{"crate_id":24,"path":["syn","token","private","WithSpan"],"kind":"struct"},"5:6693:3947":{"crate_id":5,"path":["alloc","vec","into_iter","IntoIter"],"kind":"struct"},"17:15102:6758":{"crate_id":17,"path":["object","pe","ImageSymbolEx"],"kind":"struct"},"17:13399:6336":{"crate_id":17,"path":["object","elf","Rela32"],"kind":"struct"},"16:4468:7141":{"crate_id":16,"path":["gimli","constants","DwAte"],"kind":"struct"},"24:5981:3926":{"crate_id":24,"path":["syn","ty","BareVariadic"],"kind":"struct"},"11:856:11059":{"crate_id":11,"path":["hashbrown","map","RawOccupiedEntryMut"],"kind":"struct"},"21:2379:2587":{"crate_id":21,"path":["proc_macro","bridge","TokenTree"],"kind":"enum"},"2:47222:8968":{"crate_id":2,"path":["core","core_arch","x86","__m256d"],"kind":"struct"},"1:4205:11218":{"crate_id":1,"path":["std","os","unix","fs","DirEntryExt"],"kind":"trait"},"1:4103:11211":{"crate_id":1,"path":["std","os","unix","ffi","os_str","OsStrExt"],"kind":"trait"},"17:15249:6790":{"crate_id":17,"path":["object","pe","ImageExportDirectory"],"kind":"struct"},"2:21692:35313":{"crate_id":2,"path":["core","core_simd","swizzle","interleave","Hi"],"kind":"struct"},"1:2774:11171":{"crate_id":1,"path":["std","io","buffered","linewriter","LineWriter"],"kind":"struct"},"24:4460:4239":{"crate_id":24,"path":["syn","token","FatArrow"],"kind":"struct"},"1:12355:909":{"crate_id":1,"path":["std","i8"],"kind":"primitive"},"1:12340:1174":{"crate_id":1,"path":["std","never"],"kind":"primitive"},"5:7645:243":{"crate_id":5,"path":["alloc","string","String"],"kind":"struct"},"2:3684:34182":{"crate_id":2,"path":["core","ops","try_trait","NeverShortCircuitResidual"],"kind":"enum"},"2:44885:164":{"crate_id":2,"path":["core","future","into_future","IntoFuture"],"kind":"trait"},"5:5934:5549":{"crate_id":5,"path":["alloc","string","Drain"],"kind":"struct"},"18:765:28192":{"crate_id":18,"path":["memchr","memmem","SearcherRevKind"],"kind":"enum"},"2:13594:16560":{"crate_id":2,"path":["core","future","async_drop","AsyncDropInPlace"],"kind":"struct"},"6:7429:8423":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statvfs64"],"kind":"struct"},"1:5162:4692":{"crate_id":1,"path":["std","panic","always_abort"],"kind":"function"},"6:5112:7878":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Sym"],"kind":"struct"},"2:1952:5789":{"crate_id":2,"path":["core","mem","maybe_uninit","Guard"],"kind":"struct"},"6:5122:7879":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Phdr"],"kind":"struct"},"1:10957:139":{"crate_id":1,"path":["std","sys","pal","unix","fs","FileType"],"kind":"struct"},"1:909:9398":{"crate_id":1,"path":["std","collections","hash","map","Values"],"kind":"struct"},"17:15778:6953":{"crate_id":17,"path":["object","pe","ImageSeparateDebugHeader"],"kind":"struct"},"24:5341:3895":{"crate_id":24,"path":["syn","expr","ExprRange"],"kind":"struct"},"11:710:10684":{"crate_id":11,"path":["hashbrown","map","IntoKeys"],"kind":"struct"},"11:1883:3948":{"crate_id":11,"path":["hashbrown","set","Iter"],"kind":"struct"},"24:1114:3576":{"crate_id":24,"path":["syn","generics","TypeGenerics"],"kind":"struct"},"2:12033:16493":{"crate_id":2,"path":["core","slice","iter","ChunkByMut"],"kind":"struct"},"24:5255:3884":{"crate_id":24,"path":["syn","expr","ExprBreak"],"kind":"struct"},"17:10997:6156":{"crate_id":17,"path":["object","read","archive","ArchiveFile"],"kind":"struct"},"6:586:7570":{"crate_id":6,"path":["libc","unix","protoent"],"kind":"struct"},"17:12707:23947":{"crate_id":17,"path":["object","read","traits","NoDynamicRelocationIterator"],"kind":"struct"},"1:9112:11292":{"crate_id":1,"path":["std","process","CommandArgs"],"kind":"struct"},"2:46482:8911":{"crate_id":2,"path":["core","core_arch","simd","u16x16"],"kind":"struct"},"17:12887:9239":{"crate_id":17,"path":["object","read","ObjectMap"],"kind":"struct"},"2:42246:3948":{"crate_id":2,"path":["core","result","Iter"],"kind":"struct"},"17:11755:9220":{"crate_id":17,"path":["object","read","elf","attributes","AttributeIndexIterator"],"kind":"struct"},"17:14463:6554":{"crate_id":17,"path":["object","macho","IdentCommand"],"kind":"struct"},"24:3192:4198":{"crate_id":24,"path":["syn","token","Do"],"kind":"struct"},"6:532:7542":{"crate_id":6,"path":["libc","unix","iovec"],"kind":"struct"},"24:4880:4269":{"crate_id":24,"path":["syn","token","Tilde"],"kind":"struct"},"1:8709:4696":{"crate_id":1,"path":["std","panic","BacktraceStyle"],"kind":"enum"},"17:10137:23913":{"crate_id":17,"path":["object","endian","Endianness"],"kind":"enum"},"1:8241:9568":{"crate_id":1,"path":["std","hash","random","DefaultHasher"],"kind":"struct"},"2:8304:4030":{"crate_id":2,"path":["core","iter","traits","collect","Extend"],"kind":"trait"},"17:9984:23937":{"crate_id":17,"path":["object","common","RelocationEncoding"],"kind":"enum"},"24:2094:10989":{"crate_id":24,"path":["syn","path","printing","span","QSelfDelimiters"],"kind":"struct"},"1:5831:220":{"crate_id":1,"path":["std","sync","mpsc","Receiver"],"kind":"struct"},"24:5013:2524":{"crate_id":24,"path":["syn","derive","Data"],"kind":"enum"},"24:5844:3922":{"crate_id":24,"path":["syn","restriction","FieldMutability"],"kind":"enum"},"16:3014:22996":{"crate_id":16,"path":["gimli","common","DwarfFileType"],"kind":"enum"},"17:15400:6833":{"crate_id":17,"path":["object","pe","ImageLoadConfigCodeIntegrity"],"kind":"struct"},"6:7546:8488":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ipc_perm"],"kind":"struct"},"1:5616:11288":{"crate_id":1,"path":["std","process","ChildStdout"],"kind":"struct"},"2:2153:5499":{"crate_id":2,"path":["core","ptr","metadata","DynMetadata"],"kind":"struct"},"2:44907:207":{"crate_id":2,"path":["core","task","poll","Poll"],"kind":"enum"},"2:11487:9512":{"crate_id":2,"path":["core","slice","iter","RSplitN"],"kind":"struct"},"1:8344:10698":{"crate_id":1,"path":["std","io","error","Custom"],"kind":"struct"},"2:44133:9515":{"crate_id":2,"path":["core","str","iter","RMatchIndices"],"kind":"struct"},"2:46067:8866":{"crate_id":2,"path":["core","core_arch","simd","i16x4"],"kind":"struct"},"17:11773:6241":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCache"],"kind":"struct"},"1:11764:5880":{"crate_id":1,"path":["std","sys_common","net","LookupHost"],"kind":"struct"},"2:23159:8586":{"crate_id":2,"path":["core","num","nonzero","private","NonZeroU16Inner"],"kind":"struct"},"24:1070:37842":{"crate_id":24,"path":["syn","generics","LifetimesMut"],"kind":"struct"},"17:16223:7061":{"crate_id":17,"path":["object","xcoff","StatAux"],"kind":"struct"},"18:573:6016":{"crate_id":18,"path":["memchr","memmem","twoway","Forward"],"kind":"struct"},"6:5320:7955":{"crate_id":6,"path":["libc","unix","linux_like","linux","seccomp_data"],"kind":"struct"},"17:15678:6930":{"crate_id":17,"path":["object","pe","ImageEnclaveConfig64"],"kind":"struct"},"16:6246:206":{"crate_id":16,"path":["gimli","read","cfi","Pointer"],"kind":"enum"},"24:4629:4251":{"crate_id":24,"path":["syn","token","OrOr"],"kind":"struct"},"2:40803:4047":{"crate_id":2,"path":["core","iter","adapters","filter_map","FilterMap"],"kind":"struct"},"5:6968:5555":{"crate_id":5,"path":["alloc","vec","in_place_drop","InPlaceDstDataSrcBufDrop"],"kind":"struct"},"5:6934:5553":{"crate_id":5,"path":["alloc","vec","set_len_on_drop","SetLenOnDrop"],"kind":"struct"},"2:45885:8847":{"crate_id":2,"path":["core","core_arch","simd","u8x2"],"kind":"struct"},"17:11026:23960":{"crate_id":17,"path":["object","read","archive","MemberHeader"],"kind":"enum"},"5:304:2567":{"crate_id":5,"path":["alloc","boxed","Box"],"kind":"struct"},"2:43935:9502":{"crate_id":2,"path":["core","str","iter","Chars"],"kind":"struct"},"6:5423:7997":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_sndrcvinfo"],"kind":"struct"},"16:6665:23863":{"crate_id":16,"path":["gimli","read","line","LineInstruction"],"kind":"enum"},"2:11190:3948":{"crate_id":2,"path":["core","slice","iter","Iter"],"kind":"struct"},"6:8271:8534":{"crate_id":6,"path":["libc","unix","linux_like","linux","fanotify_event_metadata"],"kind":"struct"},"17:12597:6236":{"crate_id":17,"path":["object","read","xcoff","symbol","XcoffSymbolTable"],"kind":"struct"},"1:6368:5853":{"crate_id":1,"path":["std","sync","mpmc","waker","SyncWaker"],"kind":"struct"},"6:7452:8430":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_fpxreg"],"kind":"struct"},"16:7528:9369":{"crate_id":16,"path":["gimli","read","pubnames","PubNamesEntry"],"kind":"struct"},"2:21792:11139":{"crate_id":2,"path":["core","core_simd","lane_count","sealed","Sealed"],"kind":"trait"},"18:643:6016":{"crate_id":18,"path":["memchr","memmem","x86","avx","nostd","Forward"],"kind":"struct"},"2:40386:9461":{"crate_id":2,"path":["core","ascii","EscapeDefault"],"kind":"struct"},"2:42271:196":{"crate_id":2,"path":["core","sync","atomic","Ordering"],"kind":"enum"},"11:2542:7415":{"crate_id":11,"path":["hashbrown","raw","bitmask","BitMask"],"kind":"struct"},"1:2735:10587":{"crate_id":1,"path":["std","io","buffered","bufwriter","WriterPanicked"],"kind":"struct"},"2:42490:94":{"crate_id":2,"path":["core","sync","atomic","AtomicU32"],"kind":"struct"},"24:3005:4192":{"crate_id":24,"path":["syn","token","As"],"kind":"struct"},"2:46291:8886":{"crate_id":2,"path":["core","core_arch","simd","i64x2"],"kind":"struct"},"5:3258:9400":{"crate_id":5,"path":["alloc","collections","btree","set","Difference"],"kind":"struct"},"24:4979:2578":{"crate_id":24,"path":["syn","data","Fields"],"kind":"enum"},"24:2601:3206":{"crate_id":24,"path":["syn","spanned","Spanned"],"kind":"trait"},"2:44219:9519":{"crate_id":2,"path":["core","str","iter","Lines"],"kind":"struct"},"16:5037:7159":{"crate_id":16,"path":["gimli","constants","DwLnct"],"kind":"struct"},"17:11715:9216":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSubsection"],"kind":"struct"},"1:2477:11125":{"crate_id":1,"path":["std","fs","read_link"],"kind":"function"},"1:5648:113":{"crate_id":1,"path":["std","process","Command"],"kind":"struct"},"2:43790:9440":{"crate_id":2,"path":["core","slice","iter","ChunksExact"],"kind":"struct"},"2:13904:5839":{"crate_id":2,"path":["core","task","wake","LocalWaker"],"kind":"struct"},"6:4811:7736":{"crate_id":6,"path":["libc","unix","linux_like","linux","spwd"],"kind":"struct"},"16:6442:9314":{"crate_id":16,"path":["gimli","read","abbrev","Abbreviation"],"kind":"struct"},"5:3674:3952":{"crate_id":5,"path":["alloc","collections","linked_list","IterMut"],"kind":"struct"},"6:6763:8308":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_options"],"kind":"struct"},"17:12107:6166":{"crate_id":17,"path":["object","read","macho","symbol","SymbolTable"],"kind":"struct"},"11:1603:22923":{"crate_id":11,"path":["hashbrown","rustc_entry","RustcVacantEntry"],"kind":"struct"},"1:943:10684":{"crate_id":1,"path":["std","collections","hash","map","IntoKeys"],"kind":"struct"},"16:7098:9363":{"crate_id":16,"path":["gimli","read","lookup","LookupEntryIter"],"kind":"struct"},"11:1891:5549":{"crate_id":11,"path":["hashbrown","set","Drain"],"kind":"struct"},"5:5470:16484":{"crate_id":5,"path":["alloc","slice","Join"],"kind":"trait"},"21:2228:2507":{"crate_id":21,"path":["proc_macro","bridge","Group"],"kind":"struct"},"17:15814:6957":{"crate_id":17,"path":["object","pe","ImageArchitectureEntry"],"kind":"struct"},"17:15116:6759":{"crate_id":17,"path":["object","pe","ImageSymbolExBytes"],"kind":"struct"},"1:4919:11229":{"crate_id":1,"path":["std","os","fd","raw","FromRawFd"],"kind":"trait"},"6:6447:8162":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","glob64_t"],"kind":"struct"},"2:46323:8888":{"crate_id":2,"path":["core","core_arch","simd","f64x2"],"kind":"struct"},"17:10573:37439":{"crate_id":17,"path":["object","read","any","SegmentInternal"],"kind":"enum"},"16:4743:7149":{"crate_id":16,"path":["gimli","constants","DwAddr"],"kind":"struct"},"5:3039:2760":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Owned"],"kind":"enum"},"17:15418:6837":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation32"],"kind":"struct"},"16:6588:9322":{"crate_id":16,"path":["gimli","read","index","UnitIndex"],"kind":"struct"},"6:6562:8224":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","timex"],"kind":"struct"},"16:7559:9373":{"crate_id":16,"path":["gimli","read","pubtypes","PubTypesEntry"],"kind":"struct"},"1:12356:891":{"crate_id":1,"path":["std","i16"],"kind":"primitive"},"16:7355:7254":{"crate_id":16,"path":["gimli","read","op","Piece"],"kind":"struct"},"17:12175:24107":{"crate_id":17,"path":["object","read","pe","file","PeFile"],"kind":"struct"},"20:843:3203":{"crate_id":20,"path":["proc_macro2","imp","Literal"],"kind":"enum"},"10:0:3705":{"crate_id":10,"path":["adler"],"kind":"module"},"24:4798:4263":{"crate_id":24,"path":["syn","token","Shr"],"kind":"struct"},"17:10092:23939":{"crate_id":17,"path":["object","common","SymbolFlags"],"kind":"enum"},"1:9433:162":{"crate_id":1,"path":["std","time","Instant"],"kind":"struct"},"1:8216:139":{"crate_id":1,"path":["std","fs","FileType"],"kind":"struct"},"17:14933:6728":{"crate_id":17,"path":["object","pe","ImageOptionalHeader64"],"kind":"struct"},"2:10608:157":{"crate_id":2,"path":["core","hash","Hasher"],"kind":"trait"},"20:889:2587":{"crate_id":20,"path":["proc_macro2","TokenTree"],"kind":"enum"},"5:40:5460":{"crate_id":5,"path":["alloc","raw_vec","RawVec"],"kind":"struct"},"2:40835:4050":{"crate_id":2,"path":["core","iter","adapters","inspect","Inspect"],"kind":"struct"},"2:46437:8894":{"crate_id":2,"path":["core","core_arch","simd","u8x32"],"kind":"struct"},"2:23236:8593":{"crate_id":2,"path":["core","num","nonzero","private","NonZeroI32Inner"],"kind":"struct"},"16:7570:7120":{"crate_id":16,"path":["gimli","read","pubtypes","DebugPubTypes"],"kind":"struct"},"2:2710:103":{"crate_id":2,"path":["core","borrow","BorrowMut"],"kind":"trait"},"2:3659:146":{"crate_id":2,"path":["core","ops","try_trait","FromResidual"],"kind":"trait"},"6:8247:8530":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_mutexattr_t"],"kind":"struct"},"11:687:3952":{"crate_id":11,"path":["hashbrown","map","IterMut"],"kind":"struct"},"17:13753:6423":{"crate_id":17,"path":["object","macho","DyldSubCacheInfo"],"kind":"struct"},"17:11743:9218":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSubsubsection"],"kind":"struct"},"2:44257:9523":{"crate_id":2,"path":["core","str","iter","EncodeUtf16"],"kind":"struct"},"24:4484:4241":{"crate_id":24,"path":["syn","token","Gt"],"kind":"struct"},"2:8759:4028":{"crate_id":2,"path":["core","iter","traits","marker","TrustedStep"],"kind":"trait"},"1:6916:233":{"crate_id":1,"path":["std","sync","rwlock","RwLock"],"kind":"struct"},"11:2383:3948":{"crate_id":11,"path":["hashbrown","table","Iter"],"kind":"struct"},"5:4322:3948":{"crate_id":5,"path":["alloc","collections","vec_deque","iter","Iter"],"kind":"struct"},"1:8265:4084":{"crate_id":1,"path":["std","io","cursor","Cursor"],"kind":"struct"},"24:1094:37838":{"crate_id":24,"path":["syn","generics","ConstParams"],"kind":"struct"},"16:7580:9374":{"crate_id":16,"path":["gimli","read","pubtypes","PubTypesEntryIter"],"kind":"struct"},"14:202:2951":{"crate_id":14,"path":["rustc_demangle","v0","ParseError"],"kind":"enum"},"2:21741:11347":{"crate_id":2,"path":["core","core_simd","cast","SimdCast"],"kind":"trait"},"17:513:23931":{"crate_id":17,"path":["object","read","any","Comdat"],"kind":"struct"},"24:4757:4260":{"crate_id":24,"path":["syn","token","Semi"],"kind":"struct"},"17:10769:37457":{"crate_id":17,"path":["object","read","any","SymbolTableInternal"],"kind":"enum"},"11:1917:9401":{"crate_id":11,"path":["hashbrown","set","SymmetricDifference"],"kind":"struct"},"2:7610:3330":{"crate_id":2,"path":["core","iter","adapters","zip","zip"],"kind":"function"},"2:40659:11103":{"crate_id":2,"path":["core","ffi","c_char"],"kind":"type_alias"},"11:673:3948":{"crate_id":11,"path":["hashbrown","map","Iter"],"kind":"struct"},"2:13191:119":{"crate_id":2,"path":["core","str","lossy","Debug"],"kind":"struct"},"18:613:37465":{"crate_id":18,"path":["memchr","memmem","twoway","SuffixKind"],"kind":"enum"},"2:39651:210":{"crate_id":2,"path":["core","ops","range","Range"],"kind":"struct"},"11:1142:22920":{"crate_id":11,"path":["hashbrown","map","VacantEntryRef"],"kind":"struct"},"2:21709:35304":{"crate_id":2,"path":["core","core_simd","swizzle","deinterleave","Odd"],"kind":"struct"},"1:5632:11289":{"crate_id":1,"path":["std","process","ChildStderr"],"kind":"struct"},"1:6790:10589":{"crate_id":1,"path":["std","sync","poison","PoisonError"],"kind":"struct"},"1:12365:966":{"crate_id":1,"path":["std","isize"],"kind":"primitive"},"6:5370:7971":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlmsgerr"],"kind":"struct"},"18:80:28181":{"crate_id":18,"path":["memchr","memchr","iter","Memchr"],"kind":"struct"},"18:726:6038":{"crate_id":18,"path":["memchr","memmem","SearcherConfig"],"kind":"struct"},"9:178:10675":{"crate_id":9,"path":["miniz_oxide","inflate","stream","InflateState"],"kind":"struct"},"16:6813:9338":{"crate_id":16,"path":["gimli","read","line","LineProgramHeader"],"kind":"struct"},"11:774:9397":{"crate_id":11,"path":["hashbrown","map","Keys"],"kind":"struct"},"5:3820:11065":{"crate_id":5,"path":["alloc","collections","linked_list","CursorMut"],"kind":"struct"},"1:8249:29789":{"crate_id":1,"path":["std","io","buffered","linewritershim","LineWriterShim"],"kind":"struct"},"2:40677:5818":{"crate_id":2,"path":["core","ffi","VaListImpl"],"kind":"struct"},"6:6532:8201":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_mmap_hdr"],"kind":"struct"},"1:9451:9077":{"crate_id":1,"path":["std","time","SystemTime"],"kind":"struct"},"6:6379:8118":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","statx"],"kind":"struct"},"20:738:2519":{"crate_id":20,"path":["proc_macro2","fallback","Ident"],"kind":"struct"},"6:1535:7598":{"crate_id":6,"path":["libc","unix","linux_like","addrinfo"],"kind":"struct"},"15:0:3709":{"crate_id":15,"path":["addr2line"],"kind":"module"},"16:4641:7147":{"crate_id":16,"path":["gimli","constants","DwVirtuality"],"kind":"struct"},"24:5318:3872":{"crate_id":24,"path":["syn","expr","ExprMacro"],"kind":"struct"},"16:6758:7206":{"crate_id":16,"path":["gimli","read","line","LineRow"],"kind":"struct"},"2:2960:163":{"crate_id":2,"path":["core","convert","Into"],"kind":"trait"},"2:39539:16531":{"crate_id":2,"path":["core","ops","control_flow","ControlFlow"],"kind":"enum"},"1:12368:13":{"crate_id":1,"path":["std","fn"],"kind":"primitive"},"1:8194:9001":{"crate_id":1,"path":["std","fs","FileTimes"],"kind":"struct"},"11:2151:11063":{"crate_id":11,"path":["hashbrown","set","VacantEntry"],"kind":"struct"},"18:481:9184":{"crate_id":18,"path":["memchr","cow","CowBytes"],"kind":"struct"},"11:2423:3947":{"crate_id":11,"path":["hashbrown","table","IntoIter"],"kind":"struct"},"6:4876:7782":{"crate_id":6,"path":["libc","unix","linux_like","linux","packet_mreq"],"kind":"struct"},"17:15206:6782":{"crate_id":17,"path":["object","pe","ImageLinenumber"],"kind":"struct"},"16:6160:22967":{"crate_id":16,"path":["gimli","read","cfi","CallFrameInstruction"],"kind":"enum"},"18:538:6020":{"crate_id":18,"path":["memchr","memmem","rabinkarp","NeedleHash"],"kind":"struct"},"1:4195:11217":{"crate_id":1,"path":["std","os","unix","fs","FileTypeExt"],"kind":"trait"},"23:322:3206":{"crate_id":23,"path":["quote","spanned","Spanned"],"kind":"trait"},"2:41301:4018":{"crate_id":2,"path":["core","iter","sources","repeat","Repeat"],"kind":"struct"},"17:15151:6769":{"crate_id":17,"path":["object","pe","ImageAuxSymbolFunctionBeginEnd"],"kind":"struct"},"2:43139:4091":{"crate_id":2,"path":["core","fmt","Arguments"],"kind":"struct"},"1:2713:5828":{"crate_id":1,"path":["std","io","buffered","bufwriter","flush_buf","BufGuard"],"kind":"struct"},"17:13797:6432":{"crate_id":17,"path":["object","macho","MachHeader32"],"kind":"struct"},"6:6670:8276":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_seccomp"],"kind":"struct"},"2:46046:8865":{"crate_id":2,"path":["core","core_arch","simd","i8x8"],"kind":"struct"},"2:2144:8561":{"crate_id":2,"path":["core","ptr","metadata","PtrComponents"],"kind":"struct"},"1:12292:10308":{"crate_id":1,"path":["std","backtrace_rs","symbolize","gimli","parse_running_mmaps","MapsEntry"],"kind":"struct"},"11:1910:9400":{"crate_id":11,"path":["hashbrown","set","Difference"],"kind":"struct"},"6:5306:7950":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_filter"],"kind":"struct"},"24:5805:2897":{"crate_id":24,"path":["syn","path","AssocType"],"kind":"struct"},"6:491:7513":{"crate_id":6,"path":["libc","unix","rlimit"],"kind":"struct"},"6:6435:8158":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__exit_status"],"kind":"struct"},"1:2461:5474":{"crate_id":1,"path":["std","fs","metadata"],"kind":"function"},"1:3553:5789":{"crate_id":1,"path":["std","io","Guard"],"kind":"struct"},"2:4793:4111":{"crate_id":2,"path":["core","cell","BorrowRef"],"kind":"struct"},"1:10334:11081":{"crate_id":1,"path":["std","sys","pal","unix","os","SplitPaths"],"kind":"struct"},"16:2998:7127":{"crate_id":16,"path":["gimli","common","DwoId"],"kind":"struct"},"24:4699:4256":{"crate_id":24,"path":["syn","token","PlusEq"],"kind":"struct"},"24:3736:2556":{"crate_id":24,"path":["syn","token","Union"],"kind":"struct"},"1:8631:9046":{"crate_id":1,"path":["std","os","unix","net","ucred","UCred"],"kind":"struct"},"17:12792:6104":{"crate_id":17,"path":["object","read","SectionIndex"],"kind":"struct"},"17:12433:6226":{"crate_id":17,"path":["object","read","pe","relocation","Relocation"],"kind":"struct"},"1:11286:162":{"crate_id":1,"path":["std","sys","pal","unix","time","Instant"],"kind":"struct"},"6:5052:7866":{"crate_id":6,"path":["libc","unix","linux_like","linux","dl_phdr_info"],"kind":"struct"},"2:2805:202":{"crate_id":2,"path":["core","cmp","PartialOrd"],"kind":"trait"},"6:7314:8375":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statfs"],"kind":"struct"},"2:43882:9442":{"crate_id":2,"path":["core","slice","iter","RChunksExact"],"kind":"struct"},"6:1723:7713":{"crate_id":6,"path":["libc","unix","linux_like","sigevent"],"kind":"struct"},"5:1739:5765":{"crate_id":5,"path":["alloc","collections","btree","map","drop","DropGuard"],"kind":"struct"},"24:274:10565":{"crate_id":24,"path":["syn","attr","parsing","DisplayPath"],"kind":"struct"},"2:44540:16521":{"crate_id":2,"path":["core","str","pattern","StrSearcherImpl"],"kind":"enum"},"24:5251:3883":{"crate_id":24,"path":["syn","expr","ExprBlock"],"kind":"struct"},"1:3297:31629":{"crate_id":1,"path":["std","io","stdio","StderrRaw"],"kind":"struct"},"2:44383:9530":{"crate_id":2,"path":["core","str","pattern","MultiCharEqSearcher"],"kind":"struct"},"6:4870:7780":{"crate_id":6,"path":["libc","unix","linux_like","linux","fsid_t"],"kind":"struct"},"24:4994:3864":{"crate_id":24,"path":["syn","data","FieldsNamed"],"kind":"struct"},"13:229:7414":{"crate_id":13,"path":["std_detect","detect","cache","Initializer"],"kind":"struct"},"2:5366:977":{"crate_id":2,"path":["core","iter"],"kind":"module"},"17:11063:23973":{"crate_id":17,"path":["object","read","coff","file","CoffFile"],"kind":"struct"},"24:5566:2858":{"crate_id":24,"path":["syn","lit","Lit"],"kind":"enum"},"2:2933:11139":{"crate_id":2,"path":["core","convert","num","private","Sealed"],"kind":"trait"},"2:13861:115":{"crate_id":2,"path":["core","task","wake","Context"],"kind":"struct"},"14:160:10567":{"crate_id":14,"path":["rustc_demangle","Demangle"],"kind":"struct"},"2:10397:4101":{"crate_id":2,"path":["core","fmt","UpperHex"],"kind":"trait"},"24:3600:4216":{"crate_id":24,"path":["syn","token","SelfValue"],"kind":"struct"},"6:517:7533":{"crate_id":6,"path":["libc","unix","ipv6_mreq"],"kind":"struct"},"2:6972:9430":{"crate_id":2,"path":["core","iter","adapters","map_windows","MapWindowsInner"],"kind":"struct"},"5:1540:9398":{"crate_id":5,"path":["alloc","collections","btree","map","Values"],"kind":"struct"},"6:473:7505":{"crate_id":6,"path":["libc","unix","utimbuf"],"kind":"struct"},"17:15616:6908":{"crate_id":17,"path":["object","pe","ImageArm64RuntimeFunctionEntry"],"kind":"struct"},"17:12251:24093":{"crate_id":17,"path":["object","read","pe","section","PeSectionIterator"],"kind":"struct"},"24:5286:3888":{"crate_id":24,"path":["syn","expr","ExprForLoop"],"kind":"struct"},"24:2231:3944":{"crate_id":24,"path":["syn","punctuated","Pairs"],"kind":"struct"},"2:42295:89":{"crate_id":2,"path":["core","sync","atomic","AtomicI8"],"kind":"struct"},"16:5307:7162":{"crate_id":16,"path":["gimli","constants","DwOp"],"kind":"struct"},"2:41295:4016":{"crate_id":2,"path":["core","iter","sources","once_with","OnceWith"],"kind":"struct"},"17:11166:6160":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbolTable"],"kind":"struct"},"17:13855:6439":{"crate_id":17,"path":["object","macho","SegmentCommand32"],"kind":"struct"},"1:8479:9041":{"crate_id":1,"path":["std","io","util","Sink"],"kind":"struct"},"1:1916:11087":{"crate_id":1,"path":["std","env","ArgsOs"],"kind":"struct"},"6:8341:8551":{"crate_id":6,"path":["libc","unix","linux_like","linux","non_exhaustive","open_how"],"kind":"struct"},"17:11583:24018":{"crate_id":17,"path":["object","read","elf","hash","GnuHashTable"],"kind":"struct"},"24:3294:140":{"crate_id":24,"path":["syn","token","Fn"],"kind":"struct"},"2:46253:8884":{"crate_id":2,"path":["core","core_arch","simd","i16x8"],"kind":"struct"},"1:8599:9569":{"crate_id":1,"path":["std","os","unix","net","addr","SocketAddr"],"kind":"struct"},"5:1478:3948":{"crate_id":5,"path":["alloc","collections","btree","map","Iter"],"kind":"struct"},"2:4461:109":{"crate_id":2,"path":["core","asserting","Capture"],"kind":"struct"},"2:3826:70":{"crate_id":2,"path":["core","any","Any"],"kind":"trait"},"24:4947:2718":{"crate_id":24,"path":["syn","attr","Meta"],"kind":"enum"},"16:3669:6047":{"crate_id":16,"path":["gimli","arch","X86_64"],"kind":"struct"},"24:646:9142":{"crate_id":24,"path":["syn","error","ErrorMessage"],"kind":"struct"},"24:4407:4236":{"crate_id":24,"path":["syn","token","DotDotDot"],"kind":"struct"},"2:40897:4054":{"crate_id":2,"path":["core","iter","adapters","scan","Scan"],"kind":"struct"},"16:4802:7151":{"crate_id":16,"path":["gimli","constants","DwCc"],"kind":"struct"},"1:12358:903":{"crate_id":1,"path":["std","i64"],"kind":"primitive"},"21:2200:3969":{"crate_id":21,"path":["proc_macro","bridge","DelimSpan"],"kind":"struct"},"2:33599:5990":{"crate_id":2,"path":["core","ops","arith","SubAssign"],"kind":"trait"},"6:485:7511":{"crate_id":6,"path":["libc","unix","timespec"],"kind":"struct"},"5:1581:210":{"crate_id":5,"path":["alloc","collections","btree","map","Range"],"kind":"struct"},"24:4936:3850":{"crate_id":24,"path":["syn","attr","Attribute"],"kind":"struct"},"20:834:2519":{"crate_id":20,"path":["proc_macro2","imp","Ident"],"kind":"enum"},"2:44982:180":{"crate_id":2,"path":["core","alloc","layout","Layout"],"kind":"struct"},"5:3410:5547":{"crate_id":5,"path":["alloc","collections","btree","set","ExtractIf"],"kind":"struct"},"1:10994:28624":{"crate_id":1,"path":["std","sys","pal","unix","kernel_copy","SpliceMode"],"kind":"enum"},"16:2592:7091":{"crate_id":16,"path":["gimli","common","DebugLocListsIndex"],"kind":"struct"},"1:11102:5876":{"crate_id":1,"path":["std","sys","pal","unix","process","process_inner","posix_spawn","PosixSpawnFileActions"],"kind":"struct"},"2:44687:9551":{"crate_id":2,"path":["core","str","CharEscapeUnicode"],"kind":"struct"},"1:7403:5867":{"crate_id":1,"path":["std","sys_common","lazy_box","LazyBox"],"kind":"struct"},"2:42334:96":{"crate_id":2,"path":["core","sync","atomic","AtomicU8"],"kind":"struct"},"6:1526:7592":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_in6"],"kind":"struct"},"24:5404:3878":{"crate_id":24,"path":["syn","expr","FieldValue"],"kind":"struct"},"2:40856:4051":{"crate_id":2,"path":["core","iter","adapters","map","Map"],"kind":"struct"},"6:1692:7701":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_un"],"kind":"struct"},"24:5923:3927":{"crate_id":24,"path":["syn","ty","TypeArray"],"kind":"struct"},"24:5273:3886":{"crate_id":24,"path":["syn","expr","ExprConst"],"kind":"struct"},"24:4682:4255":{"crate_id":24,"path":["syn","token","Plus"],"kind":"struct"},"17:11799:24083":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCacheImageIterator"],"kind":"struct"},"16:4882:7154":{"crate_id":16,"path":["gimli","constants","DwDsc"],"kind":"struct"},"1:11668:9590":{"crate_id":1,"path":["std","sys_common","wtf8","Wtf8Buf"],"kind":"struct"},"24:3396:4208":{"crate_id":24,"path":["syn","token","Loop"],"kind":"struct"},"6:8294:8540":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_rwlock_t"],"kind":"struct"},"2:44347:16520":{"crate_id":2,"path":["core","str","pattern","SearchStep"],"kind":"enum"},"2:43307:9495":{"crate_id":2,"path":["core","hash","sip","SipHasher24"],"kind":"struct"},"2:43558:9500":{"crate_id":2,"path":["core","slice","ascii","EscapeAscii"],"kind":"struct"},"17:15799:6956":{"crate_id":17,"path":["object","pe","NonPagedDebugInfo"],"kind":"struct"},"24:4513:4243":{"crate_id":24,"path":["syn","token","Le"],"kind":"struct"},"1:752:154":{"crate_id":1,"path":["std","collections","hash","map","HashMap"],"kind":"struct"},"11:837:11057":{"crate_id":11,"path":["hashbrown","map","RawEntryBuilderMut"],"kind":"struct"},"2:31067:196":{"crate_id":2,"path":["core","cmp","Ordering"],"kind":"enum"},"2:44940:10297":{"crate_id":2,"path":["core","task","wake","RawWaker"],"kind":"struct"},"17:15701:6931":{"crate_id":17,"path":["object","pe","ImageEnclaveImport"],"kind":"struct"},"24:5549:3173":{"crate_id":24,"path":["syn","generics","PredicateType"],"kind":"struct"},"21:127:5752":{"crate_id":21,"path":["proc_macro","bridge","client","state","set","RestoreOnDrop"],"kind":"struct"},"1:888:3947":{"crate_id":1,"path":["std","collections","hash","map","IntoIter"],"kind":"struct"},"2:3671:16532":{"crate_id":2,"path":["core","ops","try_trait","NeverShortCircuit"],"kind":"struct"},"2:22349:11139":{"crate_id":2,"path":["core","core_simd","vector","sealed","Sealed"],"kind":"trait"},"24:4822:4265":{"crate_id":24,"path":["syn","token","Slash"],"kind":"struct"},"5:3042:8557":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Immut"],"kind":"struct"},"17:14271:6519":{"crate_id":17,"path":["object","macho","PrebindCksumCommand"],"kind":"struct"},"16:7888:9376":{"crate_id":16,"path":["gimli","read","unit","DebuggingInformationEntry"],"kind":"struct"},"2:46142:8871":{"crate_id":2,"path":["core","core_arch","simd","u8x16"],"kind":"struct"},"24:5378:3877":{"crate_id":24,"path":["syn","expr","ExprUnary"],"kind":"struct"},"17:13344:6328":{"crate_id":17,"path":["object","elf","Sym64"],"kind":"struct"},"1:9398:5858":{"crate_id":1,"path":["std","sync","mutex","MappedMutexGuard"],"kind":"struct"},"17:15836:6963":{"crate_id":17,"path":["object","pe","ImageCor20Header"],"kind":"struct"},"17:14723:6579":{"crate_id":17,"path":["object","pe","ImageDosHeader"],"kind":"struct"},"5:1570:10685":{"crate_id":5,"path":["alloc","collections","btree","map","IntoValues"],"kind":"struct"},"2:46000:8862":{"crate_id":2,"path":["core","core_arch","simd","u16x4"],"kind":"struct"},"16:7006:23865":{"crate_id":16,"path":["gimli","read","loclists","RawLocListIter"],"kind":"struct"},"24:4240:4225":{"crate_id":24,"path":["syn","token","And"],"kind":"struct"},"17:14475:6555":{"crate_id":17,"path":["object","macho","FvmfileCommand"],"kind":"struct"},"16:3899:7136":{"crate_id":16,"path":["gimli","constants","DwCfa"],"kind":"struct"},"17:10155:6139":{"crate_id":17,"path":["object","endian","LittleEndian"],"kind":"struct"},"1:1614:5547":{"crate_id":1,"path":["std","collections","hash","set","ExtractIf"],"kind":"struct"},"2:32365:5099":{"crate_id":2,"path":["core","marker","PhantomPinned"],"kind":"struct"},"20:781:28202":{"crate_id":20,"path":["proc_macro2","extra","DelimSpanEnum"],"kind":"enum"},"2:42198:5338":{"crate_id":2,"path":["core","pin","Pin"],"kind":"struct"},"6:7389:8421":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stat64"],"kind":"struct"},"1:3661:11137":{"crate_id":1,"path":["std","io","Seek"],"kind":"trait"},"2:4803:4112":{"crate_id":2,"path":["core","cell","Ref"],"kind":"struct"},"1:8548:9519":{"crate_id":1,"path":["std","io","Lines"],"kind":"struct"},"1:4481:11244":{"crate_id":1,"path":["std","os","unix","net","listener","UnixListener"],"kind":"struct"},"2:30720:34013":{"crate_id":2,"path":["core","ptr","alignment","AlignmentEnum"],"kind":"enum"},"1:10495:113":{"crate_id":1,"path":["std","sys","pal","unix","process","process_common","Command"],"kind":"struct"},"2:44069:9511":{"crate_id":2,"path":["core","str","iter","SplitN"],"kind":"struct"},"23:78:2588":{"crate_id":23,"path":["quote","to_tokens","ToTokens"],"kind":"trait"},"2:4720:221":{"crate_id":2,"path":["core","cell","RefCell"],"kind":"struct"},"24:5242:3882":{"crate_id":24,"path":["syn","expr","ExprAwait"],"kind":"struct"},"18:507:6016":{"crate_id":18,"path":["memchr","memmem","genericsimd","Forward"],"kind":"struct"},"2:3255:3992":{"crate_id":2,"path":["core","ops","arith","Add"],"kind":"trait"},"6:8351:8553":{"crate_id":6,"path":["libc","unix","align","in6_addr"],"kind":"struct"},"1:4147:11214":{"crate_id":1,"path":["std","os","unix","fs","PermissionsExt"],"kind":"trait"},"24:4525:4244":{"crate_id":24,"path":["syn","token","Lt"],"kind":"struct"},"9:0:3704":{"crate_id":9,"path":["miniz_oxide"],"kind":"module"},"16:6606:9330":{"crate_id":16,"path":["gimli","read","index","UnitIndexSectionIterator"],"kind":"struct"},"1:10964:9080":{"crate_id":1,"path":["std","sys","pal","unix","fs","Mode"],"kind":"struct"},"6:6880:8338":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","sysinfo"],"kind":"struct"},"1:11693:9592":{"crate_id":1,"path":["std","sys_common","wtf8","Wtf8CodePoints"],"kind":"struct"},"11:0:3706":{"crate_id":11,"path":["hashbrown"],"kind":"module"},"16:6342:37427":{"crate_id":16,"path":["gimli","read","dwarf","RangeIterInner"],"kind":"enum"},"17:13509:6354":{"crate_id":17,"path":["object","elf","Verdef"],"kind":"struct"},"23:46:3978":{"crate_id":23,"path":["quote","ident_fragment","IdentFragment"],"kind":"trait"},"17:11214:23965":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdatIterator"],"kind":"struct"},"2:2035:5402":{"crate_id":2,"path":["core","mem","Discriminant"],"kind":"struct"},"17:11405:23996":{"crate_id":17,"path":["object","read","elf","section","ElfSection"],"kind":"struct"},"18:0:3712":{"crate_id":18,"path":["memchr"],"kind":"module"},"16:6504:9318":{"crate_id":16,"path":["gimli","read","aranges","ArangeHeader"],"kind":"struct"},"5:7435:36186":{"crate_id":5,"path":["alloc","collections","btree","merge_iter","Peeked"],"kind":"enum"},"1:6676:11306":{"crate_id":1,"path":["std","sync","once","OnceState"],"kind":"struct"},"2:12970:9195":{"crate_id":2,"path":["core","str","pattern","Searcher"],"kind":"trait"},"24:5847:2502":{"crate_id":24,"path":["syn","ty","Type"],"kind":"enum"},"6:5581:8068":{"crate_id":6,"path":["libc","unix","linux_like","linux","af_alg_iv"],"kind":"struct"},"1:12367:1419":{"crate_id":1,"path":["std","reference"],"kind":"primitive"},"1:8007:5333":{"crate_id":1,"path":["std","thread","Builder"],"kind":"struct"},"5:956:3948":{"crate_id":5,"path":["alloc","collections","binary_heap","Iter"],"kind":"struct"},"1:8012:5335":{"crate_id":1,"path":["std","thread","ThreadId"],"kind":"struct"},"1:666:11046":{"crate_id":1,"path":["std","backtrace","BacktraceFrame"],"kind":"struct"},"5:4515:5791":{"crate_id":5,"path":["alloc","collections","vec_deque","truncate","Dropper"],"kind":"struct"},"2:2799:195":{"crate_id":2,"path":["core","cmp","Ord"],"kind":"trait"},"2:44715:8840":{"crate_id":2,"path":["core","time","Nanoseconds"],"kind":"struct"},"2:39619:3127":{"crate_id":2,"path":["core","ops","index","Index"],"kind":"trait"},"24:5940:3930":{"crate_id":24,"path":["syn","ty","TypeImplTrait"],"kind":"struct"},"6:6478:8175":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","termios"],"kind":"struct"},"17:14855:6685":{"crate_id":17,"path":["object","pe","ImageFileHeader"],"kind":"struct"},"17:9938:23936":{"crate_id":17,"path":["object","common","RelocationKind"],"kind":"enum"},"2:8284:145":{"crate_id":2,"path":["core","iter","traits","collect","FromIterator"],"kind":"trait"},"24:5986:3072":{"crate_id":24,"path":["syn","ty","ReturnType"],"kind":"enum"},"24:5473:3142":{"crate_id":24,"path":["syn","generics","TypeParam"],"kind":"struct"},"24:4711:4257":{"crate_id":24,"path":["syn","token","Pound"],"kind":"struct"},"16:7813:9375":{"crate_id":16,"path":["gimli","read","unit","DebugInfoUnitHeadersIter"],"kind":"struct"},"5:1340:11063":{"crate_id":5,"path":["alloc","collections","btree","map","entry","VacantEntry"],"kind":"struct"},"1:4161:11216":{"crate_id":1,"path":["std","os","unix","fs","MetadataExt"],"kind":"trait"},"17:11853:24085":{"crate_id":17,"path":["object","read","macho","file","MachOComdat"],"kind":"struct"},"17:15168:6774":{"crate_id":17,"path":["object","pe","ImageAuxSymbolWeak"],"kind":"struct"},"17:14066:6472":{"crate_id":17,"path":["object","macho","DylinkerCommand"],"kind":"struct"},"24:4997:3865":{"crate_id":24,"path":["syn","data","FieldsUnnamed"],"kind":"struct"},"2:42609:90":{"crate_id":2,"path":["core","sync","atomic","AtomicIsize"],"kind":"struct"},"1:11013:11290":{"crate_id":1,"path":["std","sys","pal","unix","process","process_common","Stdio"],"kind":"enum"},"1:6793:11309":{"crate_id":1,"path":["std","sync","poison","TryLockError"],"kind":"enum"},"5:883:5771":{"crate_id":5,"path":["alloc","collections","binary_heap","RebuildOnDrop"],"kind":"struct"},"6:4824:7746":{"crate_id":6,"path":["libc","unix","linux_like","linux","dqblk"],"kind":"struct"},"2:3290:5451":{"crate_id":2,"path":["core","ops","async_function","AsyncFnOnce"],"kind":"trait"},"16:6948:7115":{"crate_id":16,"path":["gimli","read","loclists","DebugLoc"],"kind":"struct"},"16:6353:7174":{"crate_id":16,"path":["gimli","read","endian_slice","EndianSlice"],"kind":"struct"},"16:2508:7087":{"crate_id":16,"path":["gimli","common","DebugLineOffset"],"kind":"struct"},"24:5354:3897":{"crate_id":24,"path":["syn","expr","ExprReturn"],"kind":"struct"},"2:5286:35346":{"crate_id":2,"path":["core","ffi","sealed_trait","VaArgSafe"],"kind":"trait"},"2:41062:4057":{"crate_id":2,"path":["core","iter","adapters","take","Take"],"kind":"struct"},"1:2535:3717":{"crate_id":1,"path":["std","io"],"kind":"module"},"14:214:9388":{"crate_id":14,"path":["rustc_demangle","TryDemangleError"],"kind":"struct"},"17:14189:6504":{"crate_id":17,"path":["object","macho","DylibModule32"],"kind":"struct"},"16:8259:3281":{"crate_id":16,"path":["gimli","read","value","Value"],"kind":"enum"},"1:8650:11269":{"crate_id":1,"path":["std","os","linux","process","PidFd"],"kind":"struct"},"2:32271:2674":{"crate_id":2,"path":["core","error","private","Internal"],"kind":"struct"},"1:10764:5332":{"crate_id":1,"path":["std","sys","pal","unix","thread","Thread"],"kind":"struct"},"17:12264:24092":{"crate_id":17,"path":["object","read","pe","section","PeSection"],"kind":"struct"},"6:8253:8531":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_rwlockattr_t"],"kind":"struct"},"5:1493:3952":{"crate_id":5,"path":["alloc","collections","btree","map","IterMut"],"kind":"struct"},"6:7516:8471":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user"],"kind":"struct"},"16:2748:7098":{"crate_id":16,"path":["gimli","common","DebugStrOffset"],"kind":"struct"},"17:10399:3492":{"crate_id":17,"path":["object","read","util","Bytes"],"kind":"struct"},"2:6268:4037":{"crate_id":2,"path":["core","iter","adapters","flatten","Flatten"],"kind":"struct"},"2:43892:16497":{"crate_id":2,"path":["core","slice","iter","RChunksExactMut"],"kind":"struct"},"16:2303:22968":{"crate_id":16,"path":["gimli","common","Format"],"kind":"enum"},"2:41272:9483":{"crate_id":2,"path":["core","iter","sources","from_coroutine","FromCoroutine"],"kind":"struct"},"17:15992:7011":{"crate_id":17,"path":["object","xcoff","AuxHeader64"],"kind":"struct"},"2:13941:152":{"crate_id":2,"path":["core","alloc","global","GlobalAlloc"],"kind":"trait"},"6:8006:8515":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","align","max_align_t"],"kind":"struct"},"2:12955:4358":{"crate_id":2,"path":["core","str","pattern"],"kind":"module"},"21:365:5573":{"crate_id":21,"path":["proc_macro","bridge","rpc","PanicMessage"],"kind":"enum"},"24:153:2513":{"crate_id":24,"path":["syn","Token"],"kind":"macro"},"2:12976:16507":{"crate_id":2,"path":["core","str","pattern","ReverseSearcher"],"kind":"trait"},"16:4856:7153":{"crate_id":16,"path":["gimli","constants","DwOrd"],"kind":"struct"},"24:5523:3178":{"crate_id":24,"path":["syn","generics","TraitBoundModifier"],"kind":"enum"},"2:46274:8885":{"crate_id":2,"path":["core","core_arch","simd","i32x4"],"kind":"struct"},"17:14529:6561":{"crate_id":17,"path":["object","macho","NoteCommand"],"kind":"struct"},"2:22351:11345":{"crate_id":2,"path":["core","core_simd","vector","SimdElement"],"kind":"trait"},"2:44169:9517":{"crate_id":2,"path":["core","str","iter","Matches"],"kind":"struct"},"24:1369:9144":{"crate_id":24,"path":["syn","lit","LitIntRepr"],"kind":"struct"},"24:5669:3918":{"crate_id":24,"path":["syn","op","BinOp"],"kind":"enum"},"17:11102:23967":{"crate_id":17,"path":["object","read","coff","section","CoffSegment"],"kind":"struct"},"21:2721:2519":{"crate_id":21,"path":["proc_macro","Ident"],"kind":"struct"},"24:4728:4258":{"crate_id":24,"path":["syn","token","Question"],"kind":"struct"},"20:801:9183":{"crate_id":20,"path":["proc_macro2","imp","DeferredTokenStream"],"kind":"struct"},"6:5031:7858":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_ff_upload"],"kind":"struct"},"17:10284:6144":{"crate_id":17,"path":["object","endian","I16Bytes"],"kind":"struct"},"2:33048:5988":{"crate_id":2,"path":["core","ops","arith","Div"],"kind":"trait"},"5:2249:9406":{"crate_id":5,"path":["alloc","collections","btree","navigate","LeafRange"],"kind":"struct"},"11:2140:11062":{"crate_id":11,"path":["hashbrown","set","OccupiedEntry"],"kind":"struct"},"17:13553:6371":{"crate_id":17,"path":["object","elf","Vernaux"],"kind":"struct"},"5:7132:5814":{"crate_id":5,"path":["alloc","vec","dedup_by","FillGapOnDrop"],"kind":"struct"},"2:40593:8799":{"crate_id":2,"path":["core","char","TryFromCharError"],"kind":"struct"},"2:23214:8591":{"crate_id":2,"path":["core","num","nonzero","private","NonZeroI8Inner"],"kind":"struct"},"17:11788:24082":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldSubCache"],"kind":"struct"},"2:46355:8890":{"crate_id":2,"path":["core","core_arch","simd","m8x16"],"kind":"struct"},"2:47196:8966":{"crate_id":2,"path":["core","core_arch","x86","__m256i"],"kind":"struct"},"2:47286:8978":{"crate_id":2,"path":["core","core_arch","x86","__m128bh"],"kind":"struct"},"6:5515:8043":{"crate_id":6,"path":["libc","unix","linux_like","linux","tls12_crypto_info_chacha20_poly1305"],"kind":"struct"},"2:22196:11349":{"crate_id":2,"path":["core","core_simd","to_bytes","ToBytes"],"kind":"trait"},"17:15635:6914":{"crate_id":17,"path":["object","pe","ImageAlphaRuntimeFunctionEntry"],"kind":"struct"},"2:10842:5828":{"crate_id":2,"path":["core","slice","sort","merge_sort","BufGuard"],"kind":"struct"},"17:11688:9214":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSection"],"kind":"struct"},"6:4837:7756":{"crate_id":6,"path":["libc","unix","linux_like","linux","signalfd_siginfo"],"kind":"struct"},"1:1607:3947":{"crate_id":1,"path":["std","collections","hash","set","IntoIter"],"kind":"struct"},"24:4583:4248":{"crate_id":24,"path":["syn","token","Not"],"kind":"struct"},"24:2263:3945":{"crate_id":24,"path":["syn","punctuated","PairsMut"],"kind":"struct"},"2:44368:9524":{"crate_id":2,"path":["core","str","pattern","CharSearcher"],"kind":"struct"},"2:42073:194":{"crate_id":2,"path":["core","option","Option"],"kind":"enum"},"5:3050:28235":{"crate_id":5,"path":["alloc","collections","btree","node","marker","ValMut"],"kind":"struct"},"24:2317:3947":{"crate_id":24,"path":["syn","punctuated","IntoIter"],"kind":"struct"},"5:3040:36208":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Dying"],"kind":"enum"},"24:5023:2734":{"crate_id":24,"path":["syn","derive","DataStruct"],"kind":"struct"},"2:43554:9499":{"crate_id":2,"path":["core","slice","ascii","EscapeByte"],"kind":"struct"},"24:5947:3933":{"crate_id":24,"path":["syn","ty","TypeNever"],"kind":"struct"},"17:15176:6777":{"crate_id":17,"path":["object","pe","ImageAuxSymbolSection"],"kind":"struct"},"24:1631:37651":{"crate_id":24,"path":["syn","lookahead","TokenMarker"],"kind":"enum"},"11:434:37367":{"crate_id":11,"path":["hashbrown","raw","RawIterHashInner"],"kind":"struct"},"2:42189:5472":{"crate_id":2,"path":["core","panicking","AssertKind"],"kind":"enum"},"16:2338:7073":{"crate_id":16,"path":["gimli","common","Encoding"],"kind":"struct"},"5:7668:10575":{"crate_id":5,"path":["alloc","string","FromUtf16Error"],"kind":"struct"},"17:14516:6560":{"crate_id":17,"path":["object","macho","DataInCodeEntry"],"kind":"struct"},"2:3260:5986":{"crate_id":2,"path":["core","ops","arith","Sub"],"kind":"trait"},"16:4587:7145":{"crate_id":16,"path":["gimli","constants","DwAccess"],"kind":"struct"},"2:22577:5485":{"crate_id":2,"path":["core","core_simd","simd","ptr","const_ptr","SimdConstPtr","with_exposed_provenance"],"kind":"function"},"17:10828:37434":{"crate_id":17,"path":["object","read","any","SymbolIteratorInternal"],"kind":"enum"},"17:11293:23989":{"crate_id":17,"path":["object","read","coff","import","ImportType"],"kind":"enum"},"2:39636:213":{"crate_id":2,"path":["core","ops","range","RangeFull"],"kind":"struct"},"17:13187:6289":{"crate_id":17,"path":["object","elf","FileHeader32"],"kind":"struct"},"16:7711:210":{"crate_id":16,"path":["gimli","read","rnglists","Range"],"kind":"struct"},"24:1299:2596":{"crate_id":24,"path":["syn","lifetime","Lifetime"],"kind":"struct"},"24:2554:11139":{"crate_id":24,"path":["syn","sealed","lookahead","Sealed"],"kind":"trait"},"2:10340:4097":{"crate_id":2,"path":["core","fmt","Write"],"kind":"trait"},"24:1625:4088":{"crate_id":24,"path":["syn","lookahead","Peek"],"kind":"trait"},"24:4897:3196":{"crate_id":24,"path":["syn","token","Brace"],"kind":"struct"},"2:47167:8963":{"crate_id":2,"path":["core","core_arch","x86","__m128i"],"kind":"struct"},"24:5622:3916":{"crate_id":24,"path":["syn","lit","LitInt"],"kind":"struct"},"17:15342:6815":{"crate_id":17,"path":["object","pe","ImageDelayloadDescriptor"],"kind":"struct"},"24:703:3948":{"crate_id":24,"path":["syn","error","Iter"],"kind":"struct"},"2:44489:9535":{"crate_id":2,"path":["core","str","pattern","CharPredicateSearcher"],"kind":"struct"},"2:43911:8836":{"crate_id":2,"path":["core","str","error","Utf8Error"],"kind":"struct"},"2:47050:8958":{"crate_id":2,"path":["core","core_arch","simd","u32x16"],"kind":"struct"},"7:32:22826":{"crate_id":7,"path":["unwind","libunwind","_Unwind_Reason_Code"],"kind":"enum"},"24:5626:3910":{"crate_id":24,"path":["syn","lit","LitBool"],"kind":"struct"},"1:4998:11226":{"crate_id":1,"path":["std","os","fd","owned","AsFd"],"kind":"trait"},"2:21663:35311":{"crate_id":2,"path":["core","core_simd","swizzle","rotate_elements_left","Rotate"],"kind":"struct"},"1:11699:9593":{"crate_id":1,"path":["std","sys_common","wtf8","EncodeWide"],"kind":"struct"},"17:13252:6306":{"crate_id":17,"path":["object","elf","SectionHeader32"],"kind":"struct"},"1:3291:29187":{"crate_id":1,"path":["std","io","stdio","StdinRaw"],"kind":"struct"},"1:3643:4097":{"crate_id":1,"path":["std","io","Write"],"kind":"trait"},"24:5659:3917":{"crate_id":24,"path":["syn","mac","MacroDelimiter"],"kind":"enum"},"17:14449:6553":{"crate_id":17,"path":["object","macho","SymsegCommand"],"kind":"struct"},"2:22959:34027":{"crate_id":2,"path":["core","num","dec2flt","FloatErrorKind"],"kind":"enum"},"1:8676:9047":{"crate_id":1,"path":["std","os","fd","owned","BorrowedFd"],"kind":"struct"},"2:6777:4061":{"crate_id":2,"path":["core","iter","adapters","intersperse","IntersperseWith"],"kind":"struct"},"2:44551:9537":{"crate_id":2,"path":["core","str","pattern","EmptyNeedle"],"kind":"struct"},"2:44561:9541":{"crate_id":2,"path":["core","str","pattern","TwoWaySearcher"],"kind":"struct"},"2:47324:8980":{"crate_id":2,"path":["core","core_arch","x86","__m512bh"],"kind":"struct"},"1:9420:5864":{"crate_id":1,"path":["std","sync","rwlock","MappedRwLockReadGuard"],"kind":"struct"},"17:10622:37459":{"crate_id":17,"path":["object","read","any","SectionIteratorInternal"],"kind":"enum"},"1:968:11059":{"crate_id":1,"path":["std","collections","hash","map","RawOccupiedEntryMut"],"kind":"struct"},"2:33666:5991":{"crate_id":2,"path":["core","ops","arith","MulAssign"],"kind":"trait"},"1:896:9397":{"crate_id":1,"path":["std","collections","hash","map","Keys"],"kind":"struct"},"16:6976:7227":{"crate_id":16,"path":["gimli","read","loclists","LocationLists"],"kind":"struct"},"16:4531:7143":{"crate_id":16,"path":["gimli","constants","DwDs"],"kind":"struct"},"24:4378:4234":{"crate_id":24,"path":["syn","token","Dot"],"kind":"struct"},"6:5483:8034":{"crate_id":6,"path":["libc","unix","linux_like","linux","tls_crypto_info"],"kind":"struct"},"17:13959:6456":{"crate_id":17,"path":["object","macho","FvmlibCommand"],"kind":"struct"},"16:5781:7110":{"crate_id":16,"path":["gimli","read","cfi","EhFrame"],"kind":"struct"},"6:1503:7582":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreq_source"],"kind":"struct"},"24:1914:4070":{"crate_id":24,"path":["syn","parse","Parser"],"kind":"trait"},"24:5277:3887":{"crate_id":24,"path":["syn","expr","ExprContinue"],"kind":"struct"},"2:39731:216":{"crate_id":2,"path":["core","ops","range","RangeToInclusive"],"kind":"struct"},"17:12659:24125":{"crate_id":17,"path":["object","read","xcoff","comdat","XcoffComdat"],"kind":"struct"},"1:9118:199":{"crate_id":1,"path":["std","process","Output"],"kind":"struct"},"24:4559:4246":{"crate_id":24,"path":["syn","token","MinusEq"],"kind":"struct"},"2:44691:9552":{"crate_id":2,"path":["core","str","CharEscapeDefault"],"kind":"struct"},"6:6775:8310":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","iocb"],"kind":"struct"},"11:1566:22921":{"crate_id":11,"path":["hashbrown","rustc_entry","RustcEntry"],"kind":"enum"},"2:11432:16499":{"crate_id":2,"path":["core","slice","iter","RSplitMut"],"kind":"struct"},"5:6414:11436":{"crate_id":5,"path":["alloc","task","Wake"],"kind":"trait"},"5:1843:5547":{"crate_id":5,"path":["alloc","collections","btree","map","ExtractIf"],"kind":"struct"},"24:4969:3852":{"crate_id":24,"path":["syn","attr","MetaNameValue"],"kind":"struct"},"23:514:3204":{"crate_id":23,"path":["quote","quote_spanned"],"kind":"macro"},"17:11269:23988":{"crate_id":17,"path":["object","read","coff","import","ImportName"],"kind":"enum"},"1:5838:5854":{"crate_id":1,"path":["std","sync","mpsc","Sender"],"kind":"struct"},"11:1728:156":{"crate_id":11,"path":["hashbrown","set","HashSet"],"kind":"struct"},"11:490:154":{"crate_id":11,"path":["hashbrown","map","HashMap"],"kind":"struct"},"16:3029:6042":{"crate_id":16,"path":["gimli","arch","Arm"],"kind":"struct"},"2:40927:4056":{"crate_id":2,"path":["core","iter","adapters","skip_while","SkipWhile"],"kind":"struct"},"1:6177:5854":{"crate_id":1,"path":["std","sync","mpmc","counter","Sender"],"kind":"struct"},"2:10044:10687":{"crate_id":2,"path":["core","fmt","builders","PadAdapterState"],"kind":"struct"},"19:0:1291":{"crate_id":19,"path":["panic_unwind"],"kind":"module"},"1:8236:5628":{"crate_id":1,"path":["std","hash","random","RandomState"],"kind":"struct"},"6:578:7566":{"crate_id":6,"path":["libc","unix","servent"],"kind":"struct"},"16:8301:7330":{"crate_id":16,"path":["gimli","read","StoreOnHeap"],"kind":"struct"},"21:2662:2587":{"crate_id":21,"path":["proc_macro","TokenTree"],"kind":"enum"},"17:16050:6316":{"crate_id":17,"path":["object","xcoff","SectionHeader64"],"kind":"struct"},"2:46224:8883":{"crate_id":2,"path":["core","core_arch","simd","i8x16"],"kind":"struct"},"1:1475:156":{"crate_id":1,"path":["std","collections","hash","set","HashSet"],"kind":"struct"},"1:8470:4011":{"crate_id":1,"path":["std","io","util","Empty"],"kind":"struct"},"20:933:2585":{"crate_id":20,"path":["proc_macro2","Spacing"],"kind":"enum"},"16:7473:7271":{"crate_id":16,"path":["gimli","read","op","Expression"],"kind":"struct"},"16:7741:7124":{"crate_id":16,"path":["gimli","read","str","DebugStrOffsets"],"kind":"struct"},"2:8333:129":{"crate_id":2,"path":["core","iter","traits","double_ended","DoubleEndedIterator"],"kind":"trait"},"24:5294:3890":{"crate_id":24,"path":["syn","expr","ExprIf"],"kind":"struct"},"24:4600:4249":{"crate_id":24,"path":["syn","token","Or"],"kind":"struct"},"5:3292:9399":{"crate_id":5,"path":["alloc","collections","btree","set","Intersection"],"kind":"struct"},"2:21739:11139":{"crate_id":2,"path":["core","core_simd","cast","sealed","Sealed"],"kind":"trait"},"2:10384:119":{"crate_id":2,"path":["core","fmt","Debug"],"kind":"trait"},"1:10604:11292":{"crate_id":1,"path":["std","sys","pal","unix","process","process_common","CommandArgs"],"kind":"struct"},"6:4787:7719":{"crate_id":6,"path":["libc","unix","linux_like","linux","glob_t"],"kind":"struct"},"2:44574:9545":{"crate_id":2,"path":["core","str","lossy","Utf8Chunk"],"kind":"struct"},"16:4976:7157":{"crate_id":16,"path":["gimli","constants","DwLns"],"kind":"struct"},"2:3581:211":{"crate_id":2,"path":["core","ops","range","RangeBounds"],"kind":"trait"},"20:723:2586":{"crate_id":20,"path":["proc_macro2","fallback","Span"],"kind":"struct"},"2:10825:5827":{"crate_id":2,"path":["core","slice","sort","merge","MergeHole"],"kind":"struct"},"2:23111:11139":{"crate_id":2,"path":["core","num","nonzero","private","Sealed"],"kind":"trait"},"2:42568:95":{"crate_id":2,"path":["core","sync","atomic","AtomicU64"],"kind":"struct"},"18:521:28195":{"crate_id":18,"path":["memchr","memmem","prefilter","Prefilter"],"kind":"enum"},"1:12354:733":{"crate_id":1,"path":["std","f128"],"kind":"primitive"},"17:10018:23916":{"crate_id":17,"path":["object","common","FileFlags"],"kind":"enum"},"1:6861:5862":{"crate_id":1,"path":["std","sync","reentrant_lock","ReentrantLockGuard"],"kind":"struct"},"22:0:3835":{"crate_id":22,"path":["unicode_ident"],"kind":"module"},"6:7561:8493":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","shmid_ds"],"kind":"struct"},"6:4916:7805":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_event"],"kind":"struct"},"1:8339:29831":{"crate_id":1,"path":["std","io","error","SimpleMessage"],"kind":"struct"},"24:3413:2902":{"crate_id":24,"path":["syn","token","Macro"],"kind":"struct"},"2:44115:9514":{"crate_id":2,"path":["core","str","iter","MatchIndices"],"kind":"struct"},"1:11225:28622":{"crate_id":1,"path":["std","sys","pal","unix","thread","cgroups","Cgroup"],"kind":"enum"},"5:3805:4084":{"crate_id":5,"path":["alloc","collections","linked_list","Cursor"],"kind":"struct"},"1:5986:4697":{"crate_id":1,"path":["std","sync","condvar","Condvar"],"kind":"struct"},"1:12359:884":{"crate_id":1,"path":["std","i128"],"kind":"primitive"},"17:11825:24064":{"crate_id":17,"path":["object","read","macho","file","MachOFile"],"kind":"struct"},"1:11904:9092":{"crate_id":1,"path":["std","alloc","System"],"kind":"struct"},"11:2403:3952":{"crate_id":11,"path":["hashbrown","table","IterMut"],"kind":"struct"},"24:5468:3183":{"crate_id":24,"path":["syn","generics","LifetimeParam"],"kind":"struct"},"1:9171:11316":{"crate_id":1,"path":["std","sync","mpsc","TryIter"],"kind":"struct"},"24:5565:2596":{"crate_id":24,"path":["syn","lifetime","Lifetime"],"kind":"function"},"17:14298:6522":{"crate_id":17,"path":["object","macho","RpathCommand"],"kind":"struct"},"17:12089:6213":{"crate_id":17,"path":["object","read","macho","section","MachOSectionInternal"],"kind":"struct"},"5:7540:4004":{"crate_id":5,"path":["alloc","collections","TryReserveError"],"kind":"struct"},"20:518:3966":{"crate_id":20,"path":["proc_macro2","LexError"],"kind":"struct"},"16:2768:7099":{"crate_id":16,"path":["gimli","common","DebugStrOffsetsBase"],"kind":"struct"},"5:4938:217":{"crate_id":5,"path":["alloc","rc","Rc"],"kind":"struct"},"24:5968:3938":{"crate_id":24,"path":["syn","ty","TypeTraitObject"],"kind":"struct"},"17:15734:6938":{"crate_id":17,"path":["object","pe","ImageCoffSymbolsHeader"],"kind":"struct"},"2:12074:5497":{"crate_id":2,"path":["core","slice","raw","from_raw_parts"],"kind":"function"},"24:5290:3889":{"crate_id":24,"path":["syn","expr","ExprGroup"],"kind":"struct"},"16:7085:9361":{"crate_id":16,"path":["gimli","read","lookup","DebugLookup"],"kind":"struct"},"18:608:37474":{"crate_id":18,"path":["memchr","memmem","twoway","Suffix"],"kind":"struct"},"17:14986:6734":{"crate_id":17,"path":["object","pe","ImageRomHeaders"],"kind":"struct"},"1:9410:234":{"crate_id":1,"path":["std","sync","rwlock","RwLockReadGuard"],"kind":"struct"},"16:6026:9278":{"crate_id":16,"path":["gimli","read","cfi","UnwindContext"],"kind":"struct"},"24:5401:3127":{"crate_id":24,"path":["syn","expr","Index"],"kind":"struct"},"5:0:309":{"crate_id":5,"path":["alloc"],"kind":"module"},"2:38216:5995":{"crate_id":2,"path":["core","ops","bit","BitAndAssign"],"kind":"trait"},"17:9671:23915":{"crate_id":17,"path":["object","common","Architecture"],"kind":"enum"},"2:40498:9467":{"crate_id":2,"path":["core","char","EscapeDebug"],"kind":"struct"},"2:45979:8857":{"crate_id":2,"path":["core","core_arch","simd","u8x8"],"kind":"struct"},"17:9858:23933":{"crate_id":17,"path":["object","common","ComdatKind"],"kind":"enum"},"1:9393:187":{"crate_id":1,"path":["std","sync","mutex","MutexGuard"],"kind":"struct"},"16:5107:7161":{"crate_id":16,"path":["gimli","constants","DwRle"],"kind":"struct"},"24:5824:3071":{"crate_id":24,"path":["syn","path","QSelf"],"kind":"struct"},"1:10922:9580":{"crate_id":1,"path":["std","sys","pal","unix","fs","StatxExtraFields"],"kind":"struct"},"17:12516:24135":{"crate_id":17,"path":["object","read","xcoff","file","XcoffFile"],"kind":"struct"},"17:15376:6828":{"crate_id":17,"path":["object","pe","ImageResourceDirectoryString"],"kind":"struct"},"2:1851:3069":{"crate_id":2,"path":["core","mem"],"kind":"module"},"17:11557:24041":{"crate_id":17,"path":["object","read","elf","note","GnuPropertyIterator"],"kind":"struct"},"16:867:37404":{"crate_id":16,"path":["gimli","read","endian_slice","DebugByte"],"kind":"struct"},"17:13674:6389":{"crate_id":17,"path":["object","macho","DyldCacheHeader"],"kind":"struct"},"6:5630:8095":{"crate_id":6,"path":["libc","unix","linux_like","linux","ifconf"],"kind":"struct"},"17:12485:24122":{"crate_id":17,"path":["object","read","pe","resource","ResourceNameOrId"],"kind":"enum"},"16:5897:7167":{"crate_id":16,"path":["gimli","read","cfi","Augmentation"],"kind":"struct"},"11:1887:3947":{"crate_id":11,"path":["hashbrown","set","IntoIter"],"kind":"struct"},"6:5200:7897":{"crate_id":6,"path":["libc","unix","linux_like","linux","posix_spawnattr_t"],"kind":"struct"},"2:33733:5992":{"crate_id":2,"path":["core","ops","arith","DivAssign"],"kind":"trait"},"1:3336:11177":{"crate_id":1,"path":["std","io","stdio","StdinLock"],"kind":"struct"},"17:11634:9210":{"crate_id":17,"path":["object","read","elf","version","VerdefIterator"],"kind":"struct"},"1:11631:29647":{"crate_id":1,"path":["std","sys","thread_local","fast_local","DtorState"],"kind":"enum"},"17:14994:6735":{"crate_id":17,"path":["object","pe","Guid"],"kind":"struct"},"2:40392:9462":{"crate_id":2,"path":["core","async_iter","from_iter","FromIter"],"kind":"struct"},"16:6927:7222":{"crate_id":16,"path":["gimli","read","line","FileEntryFormat"],"kind":"struct"},"6:5083:7876":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Ehdr"],"kind":"struct"},"16:5742:9247":{"crate_id":16,"path":["gimli","read","cfi","ParsedEhFrameHdr"],"kind":"struct"},"24:3787:4221":{"crate_id":24,"path":["syn","token","Use"],"kind":"struct"},"24:3447:4209":{"crate_id":24,"path":["syn","token","Mod"],"kind":"struct"},"2:22575:34289":{"crate_id":2,"path":["core","core_simd","simd","ptr","const_ptr","SimdConstPtr","with_addr"],"kind":"function"},"1:7478:31242":{"crate_id":1,"path":["std","sys_common","wstr","WStrUnits"],"kind":"struct"},"11:1025:11062":{"crate_id":11,"path":["hashbrown","map","OccupiedEntry"],"kind":"struct"},"1:8488:9042":{"crate_id":1,"path":["std","io","IoSlice"],"kind":"struct"},"1:878:3952":{"crate_id":1,"path":["std","collections","hash","map","IterMut"],"kind":"struct"},"1:4335:11241":{"crate_id":1,"path":["std","os","unix","net","ancillary","AncillaryData"],"kind":"enum"},"16:7604:7122":{"crate_id":16,"path":["gimli","read","rnglists","DebugRngLists"],"kind":"struct"},"5:4087:5549":{"crate_id":5,"path":["alloc","collections","vec_deque","drain","Drain"],"kind":"struct"},"2:21675:35311":{"crate_id":2,"path":["core","core_simd","swizzle","rotate_elements_right","Rotate"],"kind":"struct"},"2:22:817":{"crate_id":2,"path":["core","format_args"],"kind":"macro"},"11:875:11060":{"crate_id":11,"path":["hashbrown","map","RawVacantEntryMut"],"kind":"struct"},"24:3753:4219":{"crate_id":24,"path":["syn","token","Unsafe"],"kind":"struct"},"6:7467:8434":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_fpstate"],"kind":"struct"},"1:1610:5549":{"crate_id":1,"path":["std","collections","hash","set","Drain"],"kind":"struct"},"16:5722:7111":{"crate_id":16,"path":["gimli","read","cfi","EhFrameHdr"],"kind":"struct"},"6:4864:7779":{"crate_id":6,"path":["libc","unix","linux_like","linux","itimerspec"],"kind":"struct"},"6:1628:7665":{"crate_id":6,"path":["libc","unix","linux_like","ifaddrs"],"kind":"struct"},"16:6962:7116":{"crate_id":16,"path":["gimli","read","loclists","DebugLocLists"],"kind":"struct"},"23:407:4919":{"crate_id":23,"path":["quote","__private","RepInterp"],"kind":"struct"},"5:4436:265":{"crate_id":5,"path":["alloc","collections","vec_deque","VecDeque"],"kind":"struct"},"17:12342:9226":{"crate_id":17,"path":["object","read","pe","import","ImportTable"],"kind":"struct"},"2:42785:3120":{"crate_id":2,"path":["core","fmt","num","Binary"],"kind":"struct"},"24:5303:3891":{"crate_id":24,"path":["syn","expr","ExprInfer"],"kind":"struct"},"6:1580:7629":{"crate_id":6,"path":["libc","unix","linux_like","sched_param"],"kind":"struct"},"17:13116:6276":{"crate_id":17,"path":["object","archive","AixHeader"],"kind":"struct"},"5:6019:71":{"crate_id":5,"path":["alloc","sync","Arc"],"kind":"struct"},"1:3835:11190":{"crate_id":1,"path":["std","net","socket_addr","ToSocketAddrs"],"kind":"trait"},"2:3340:4248":{"crate_id":2,"path":["core","ops","bit","Not"],"kind":"trait"},"6:7446:8428":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","pthread_attr_t"],"kind":"struct"},"2:4729:4104":{"crate_id":2,"path":["core","cell","BorrowMutError"],"kind":"struct"},"1:6400:10693":{"crate_id":1,"path":["std","sync","mpmc","zero","ZeroToken"],"kind":"struct"},"24:5614:3912":{"crate_id":24,"path":["syn","lit","LitByteStr"],"kind":"struct"},"1:12346:1688":{"crate_id":1,"path":["std","slice"],"kind":"primitive"},"1:8182:11134":{"crate_id":1,"path":["std","fs","ReadDir"],"kind":"struct"},"11:2124:9368":{"crate_id":11,"path":["hashbrown","set","Entry"],"kind":"enum"},"2:40505:16550":{"crate_id":2,"path":["core","char","EscapeDebugInner"],"kind":"enum"},"1:5770:8324":{"crate_id":1,"path":["std","process","exit"],"kind":"function"},"1:10353:29634":{"crate_id":1,"path":["std","sys","pal","unix","os","Env"],"kind":"struct"},"16:7633:37387":{"crate_id":16,"path":["gimli","read","rnglists","RangeListsFormat"],"kind":"enum"},"1:11268:9083":{"crate_id":1,"path":["std","sys","pal","unix","time","Timespec"],"kind":"struct"},"2:23148:8585":{"crate_id":2,"path":["core","num","nonzero","private","NonZeroU8Inner"],"kind":"struct"},"6:7330:8387":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","flock"],"kind":"struct"},"1:11045:9067":{"crate_id":1,"path":["std","sys","pal","unix","process","process_common","ExitCode"],"kind":"struct"},"2:5324:11181":{"crate_id":2,"path":["core","io","borrowed_buf","BorrowedBuf"],"kind":"struct"},"1:4975:5846":{"crate_id":1,"path":["std","os","fd","owned","OwnedFd"],"kind":"struct"},"6:1680:7697":{"crate_id":6,"path":["libc","unix","linux_like","mmsghdr"],"kind":"struct"},"17:13922:6452":{"crate_id":17,"path":["object","macho","Section64"],"kind":"struct"},"6:553:7553":{"crate_id":6,"path":["libc","unix","linger"],"kind":"struct"},"1:10718:11176":{"crate_id":1,"path":["std","sys","pal","unix","stdio","Stdin"],"kind":"struct"},"20:792:252":{"crate_id":20,"path":["proc_macro2","imp","TokenStream"],"kind":"enum"},"1:4297:31245":{"crate_id":1,"path":["std","os","unix","net","ancillary","AncillaryDataIter"],"kind":"struct"},"1:674:11048":{"crate_id":1,"path":["std","backtrace","BytesOrWide"],"kind":"enum"},"17:13015:6226":{"crate_id":17,"path":["object","read","Relocation"],"kind":"struct"},"6:6664:8273":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_exit"],"kind":"struct"},"16:8136:9383":{"crate_id":16,"path":["gimli","read","unit","EntriesCursor"],"kind":"struct"},"6:4985:7834":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_ramp_effect"],"kind":"struct"},"5:4481:5789":{"crate_id":5,"path":["alloc","collections","vec_deque","write_iter_wrapping","Guard"],"kind":"struct"},"2:22549:11139":{"crate_id":2,"path":["core","core_simd","simd","num","sealed","Sealed"],"kind":"trait"},"16:7857:7288":{"crate_id":16,"path":["gimli","read","unit","UnitHeader"],"kind":"struct"},"16:6940:7224":{"crate_id":16,"path":["gimli","read","lists","ListsHeader"],"kind":"struct"},"2:41835:8803":{"crate_id":2,"path":["core","net","ip_addr","Ipv4Addr"],"kind":"struct"},"1:2309:11118":{"crate_id":1,"path":["std","fs","DirEntry"],"kind":"struct"},"1:8230:127":{"crate_id":1,"path":["std","fs","DirBuilder"],"kind":"struct"},"6:6609:8251":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","regex_t"],"kind":"struct"},"2:41851:8805":{"crate_id":2,"path":["core","net","ip_addr","Ipv6Addr"],"kind":"struct"},"2:41895:2586":{"crate_id":2,"path":["core","net","ip_addr","fmt","Span"],"kind":"struct"},"17:14402:6539":{"crate_id":17,"path":["object","macho","BuildToolVersion"],"kind":"struct"},"1:10421:11294":{"crate_id":1,"path":["std","sys","pal","unix","pipe","AnonPipe"],"kind":"struct"},"24:3855:268":{"crate_id":24,"path":["syn","token","Yield"],"kind":"struct"},"2:22948:9449":{"crate_id":2,"path":["core","num","dec2flt","ParseFloatError"],"kind":"struct"},"24:4257:4226":{"crate_id":24,"path":["syn","token","AndAnd"],"kind":"struct"},"1:2479:11126":{"crate_id":1,"path":["std","fs","canonicalize"],"kind":"function"},"17:15822:6960":{"crate_id":17,"path":["object","pe","ImportObjectHeader"],"kind":"struct"},"6:5445:8013":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_rcvinfo"],"kind":"struct"},"1:6031:5848":{"crate_id":1,"path":["std","sync","lazy_lock","LazyLock"],"kind":"struct"},"2:12486:10579":{"crate_id":2,"path":["core","slice","GetManyMutError"],"kind":"struct"},"5:1441:99":{"crate_id":5,"path":["alloc","collections","btree","map","BTreeMap"],"kind":"struct"},"2:42013:9569":{"crate_id":2,"path":["core","net","socket_addr","SocketAddr"],"kind":"enum"},"17:4986:24136":{"crate_id":17,"path":["object","read","xcoff","relocation","XcoffRelocationIterator"],"kind":"struct"},"6:1707:7708":{"crate_id":6,"path":["libc","unix","linux_like","utsname"],"kind":"struct"},"1:4666:11246":{"crate_id":1,"path":["std","os","unix","process","CommandExt"],"kind":"trait"},"15:288:22949":{"crate_id":15,"path":["addr2line","LocationRangeIter"],"kind":"struct"},"24:4571:4247":{"crate_id":24,"path":["syn","token","Ne"],"kind":"struct"},"6:6746:8300":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_statistics"],"kind":"struct"},"17:15624:6909":{"crate_id":17,"path":["object","pe","ImageAlpha64RuntimeFunctionEntry"],"kind":"struct"},"16:5385:6139":{"crate_id":16,"path":["gimli","endianity","LittleEndian"],"kind":"struct"},"11:2554:37361":{"crate_id":11,"path":["hashbrown","raw","Fallibility"],"kind":"enum"},"2:44757:9558":{"crate_id":2,"path":["core","time","TryFromFloatSecsError"],"kind":"struct"},"2:45964:8856":{"crate_id":2,"path":["core","core_arch","simd","i16x2"],"kind":"struct"},"17:11812:24048":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCacheImage"],"kind":"struct"},"6:5624:8092":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_ifc_ifcu"],"kind":"union"},"1:8541:9434":{"crate_id":1,"path":["std","io","Split"],"kind":"struct"},"1:6847:10694":{"crate_id":1,"path":["std","sync","reentrant_lock","ReentrantLock"],"kind":"struct"},"2:0:563":{"crate_id":2,"path":["core"],"kind":"module"},"23:513:1397":{"crate_id":23,"path":["quote","quote"],"kind":"macro"},"24:5781:2883":{"crate_id":24,"path":["syn","path","GenericArgument"],"kind":"enum"},"21:952:2586":{"crate_id":21,"path":["proc_macro","bridge","client","Span"],"kind":"struct"},"2:3417:124":{"crate_id":2,"path":["core","ops","deref","Deref"],"kind":"trait"},"1:3432:11175":{"crate_id":1,"path":["std","io","stdio","StderrLock"],"kind":"struct"},"11:700:3947":{"crate_id":11,"path":["hashbrown","map","IntoIter"],"kind":"struct"},"6:6714:8294":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_ring_offset_v1"],"kind":"struct"},"17:13375:6332":{"crate_id":17,"path":["object","elf","Syminfo64"],"kind":"struct"},"2:10184:4090":{"crate_id":2,"path":["core","fmt","builders","FormatterFn"],"kind":"struct"},"2:39781:16596":{"crate_id":2,"path":["core","ops","try_trait","Yeet"],"kind":"struct"},"17:10612:23941":{"crate_id":17,"path":["object","read","any","SectionIterator"],"kind":"struct"},"21:912:252":{"crate_id":21,"path":["proc_macro","bridge","client","TokenStream"],"kind":"struct"},"1:10917:9578":{"crate_id":1,"path":["std","sys","pal","unix","fs","FileAttr"],"kind":"struct"},"24:4344:4232":{"crate_id":24,"path":["syn","token","Comma"],"kind":"struct"},"5:7405:5549":{"crate_id":5,"path":["alloc","collections","binary_heap","Drain"],"kind":"struct"},"17:11128:6130":{"crate_id":17,"path":["object","read","coff","section","CoffSection"],"kind":"struct"},"17:12371:6259":{"crate_id":17,"path":["object","read","pe","import","Import"],"kind":"enum"},"5:3284:9401":{"crate_id":5,"path":["alloc","collections","btree","set","SymmetricDifference"],"kind":"struct"},"17:14111:6477":{"crate_id":17,"path":["object","macho","RoutinesCommand64"],"kind":"struct"},"2:46192:8881":{"crate_id":2,"path":["core","core_arch","simd","u32x4"],"kind":"struct"},"2:46682:8919":{"crate_id":2,"path":["core","core_arch","simd","m8x32"],"kind":"struct"},"1:9244:11315":{"crate_id":1,"path":["std","sync","mpsc","TrySendError"],"kind":"enum"},"11:1160:10573":{"crate_id":11,"path":["hashbrown","map","OccupiedError"],"kind":"struct"},"2:42206:226":{"crate_id":2,"path":["core","result","Result"],"kind":"enum"},"6:5225:7908":{"crate_id":6,"path":["libc","unix","linux_like","linux","arpd_request"],"kind":"struct"},"24:3073:4196":{"crate_id":24,"path":["syn","token","Become"],"kind":"struct"},"2:10759:5825":{"crate_id":2,"path":["core","slice","sort","InsertionHole"],"kind":"struct"},"2:46623:8916":{"crate_id":2,"path":["core","core_arch","simd","i32x8"],"kind":"struct"},"6:8012:8517":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","align","clone_args"],"kind":"struct"},"1:11108:5877":{"crate_id":1,"path":["std","sys","pal","unix","process","process_inner","posix_spawn","PosixSpawnattr"],"kind":"struct"},"2:23181:8588":{"crate_id":2,"path":["core","num","nonzero","private","NonZeroU64Inner"],"kind":"struct"},"2:32296:9458":{"crate_id":2,"path":["core","error","Source"],"kind":"struct"},"16:542:9241":{"crate_id":16,"path":["gimli","read","cfi","RegisterRuleMap"],"kind":"struct"},"20:113:9181":{"crate_id":20,"path":["proc_macro2","rcvec","RcVec"],"kind":"struct"},"2:6077:5789":{"crate_id":2,"path":["core","iter","adapters","filter_map","next_chunk","Guard"],"kind":"struct"},"6:6409:8143":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","statx_timestamp"],"kind":"struct"},"6:5502:8042":{"crate_id":6,"path":["libc","unix","linux_like","linux","tls12_crypto_info_aes_gcm_256"],"kind":"struct"},"24:1102:37837":{"crate_id":24,"path":["syn","generics","ConstParamsMut"],"kind":"struct"},"17:11702:9215":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSubsectionIterator"],"kind":"struct"},"6:5636:8098":{"crate_id":6,"path":["libc","unix","linux_like","linux","hwtstamp_config"],"kind":"struct"},"6:7461:8433":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_xmmreg"],"kind":"struct"},"2:6154:4048":{"crate_id":2,"path":["core","iter","adapters","flatten","FlatMap"],"kind":"struct"},"5:1590:11064":{"crate_id":5,"path":["alloc","collections","btree","map","RangeMut"],"kind":"struct"},"2:3214:3047":{"crate_id":2,"path":["core","marker","PhantomData"],"kind":"struct"},"2:12656:9505":{"crate_id":2,"path":["core","str","iter","SplitInternal"],"kind":"struct"},"1:10724:11174":{"crate_id":1,"path":["std","sys","pal","unix","stdio","Stderr"],"kind":"struct"},"17:13581:6381":{"crate_id":17,"path":["object","elf","NoteHeader64"],"kind":"struct"},"17:1098:23969":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbolIterator"],"kind":"struct"},"2:8295:165":{"crate_id":2,"path":["core","iter","traits","collect","IntoIterator"],"kind":"trait"},"24:5532:2653":{"crate_id":24,"path":["syn","generics","WherePredicate"],"kind":"enum"},"6:6900:8352":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","msqid_ds"],"kind":"struct"},"2:21920:8564":{"crate_id":2,"path":["core","core_simd","masks","Mask"],"kind":"struct"},"1:5845:9563":{"crate_id":1,"path":["std","sync","mpsc","SyncSender"],"kind":"struct"},"1:1636:2556":{"crate_id":1,"path":["std","collections","hash","set","Union"],"kind":"struct"},"1:4555:11237":{"crate_id":1,"path":["std","os","unix","net","stream","UnixStream"],"kind":"struct"},"16:872:37428":{"crate_id":16,"path":["gimli","read","endian_slice","DebugLen"],"kind":"struct"},"21:591:4133":{"crate_id":21,"path":["proc_macro","diagnostic","MultiSpan"],"kind":"trait"},"2:13029:16514":{"crate_id":2,"path":["core","str","pattern","MultiCharEqPattern"],"kind":"struct"},"1:4766:11264":{"crate_id":1,"path":["std","os","unix","thread","JoinHandleExt"],"kind":"trait"},"24:5370:3899":{"crate_id":24,"path":["syn","expr","ExprTryBlock"],"kind":"struct"},"24:1802:2593":{"crate_id":24,"path":["syn","parse","ParseStream"],"kind":"type_alias"},"2:11239:9434":{"crate_id":2,"path":["core","slice","iter","Split"],"kind":"struct"},"2:40606:106":{"crate_id":2,"path":["core","ffi","c_str","CStr"],"kind":"struct"},"16:4560:7144":{"crate_id":16,"path":["gimli","constants","DwEnd"],"kind":"struct"},"2:11045:239":{"crate_id":2,"path":["core","slice","index","SliceIndex"],"kind":"trait"},"1:3671:11158":{"crate_id":1,"path":["std","io","BufRead"],"kind":"trait"},"2:40844:4060":{"crate_id":2,"path":["core","iter","adapters","intersperse","Intersperse"],"kind":"struct"},"2:40422:9463":{"crate_id":2,"path":["core","char","convert","ParseCharError"],"kind":"struct"},"2:44683:9550":{"crate_id":2,"path":["core","str","CharEscapeDebugContinue"],"kind":"struct"},"17:14788:6630":{"crate_id":17,"path":["object","pe","ImageVxdHeader"],"kind":"struct"},"6:5376:7972":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlattr"],"kind":"struct"},"2:41086:4059":{"crate_id":2,"path":["core","iter","adapters","zip","Zip"],"kind":"struct"},"24:5772:2880":{"crate_id":24,"path":["syn","path","PathArguments"],"kind":"enum"},"20:744:3203":{"crate_id":20,"path":["proc_macro2","fallback","Literal"],"kind":"struct"},"11:2231:9402":{"crate_id":11,"path":["hashbrown","table","HashTable"],"kind":"struct"},"1:4815:8418":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt","st_ctime"],"kind":"function"},"18:635:6034":{"crate_id":18,"path":["memchr","memmem","twoway","ApproximateByteSet"],"kind":"struct"},"1:3389:11179":{"crate_id":1,"path":["std","io","stdio","StdoutLock"],"kind":"struct"},"16:6782:23864":{"crate_id":16,"path":["gimli","read","line","ColumnType"],"kind":"enum"},"17:11898:6179":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandData"],"kind":"struct"},"2:43780:16495":{"crate_id":2,"path":["core","slice","iter","ChunksMut"],"kind":"struct"},"6:4959:7821":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_replay"],"kind":"struct"},"16:4830:7152":{"crate_id":16,"path":["gimli","constants","DwInl"],"kind":"struct"},"1:6455:5854":{"crate_id":1,"path":["std","sync","mpmc","Sender"],"kind":"struct"},"24:4361:4233":{"crate_id":24,"path":["syn","token","Dollar"],"kind":"struct"},"2:41328:4024":{"crate_id":2,"path":["core","iter","sources","successors","Successors"],"kind":"struct"},"2:39788:8670":{"crate_id":2,"path":["core","any","TypeId"],"kind":"struct"},"24:5800:3184":{"crate_id":24,"path":["syn","path","AngleBracketedGenericArguments"],"kind":"struct"},"2:2132:5501":{"crate_id":2,"path":["core","ptr","metadata","Thin"],"kind":"trait_alias"},"21:2261:2911":{"crate_id":21,"path":["proc_macro","bridge","Punct"],"kind":"struct"},"16:3842:7135":{"crate_id":16,"path":["gimli","constants","DwUt"],"kind":"struct"},"16:860:37422":{"crate_id":16,"path":["gimli","read","endian_slice","DebugBytes"],"kind":"struct"},"1:5252:29807":{"crate_id":1,"path":["std","path","fmt","DebugHelper"],"kind":"struct"},"2:3038:123":{"crate_id":2,"path":["core","default","Default"],"kind":"trait"},"16:4913:7155":{"crate_id":16,"path":["gimli","constants","DwIdx"],"kind":"struct"},"11:123:5756":{"crate_id":11,"path":["hashbrown","raw","RawTable"],"kind":"struct"},"2:43035:4089":{"crate_id":2,"path":["core","fmt","rt","Alignment"],"kind":"enum"},"6:6788:8317":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","sifields_sigchld"],"kind":"struct"},"1:9469:9577":{"crate_id":1,"path":["std","time","SystemTimeError"],"kind":"struct"},"1:562:5327":{"crate_id":1,"path":["std","thread","Packet"],"kind":"struct"},"2:8750:149":{"crate_id":2,"path":["core","iter","traits","marker","FusedIterator"],"kind":"trait"},"21:1089:208":{"crate_id":21,"path":["proc_macro","bridge","client","ProcMacro"],"kind":"enum"},"2:42529:88":{"crate_id":2,"path":["core","sync","atomic","AtomicI64"],"kind":"struct"},"24:4448:4238":{"crate_id":24,"path":["syn","token","EqEq"],"kind":"struct"},"24:3668:253":{"crate_id":24,"path":["syn","token","Trait"],"kind":"struct"},"1:9329:2513":{"crate_id":1,"path":["std","sync","mpmc","select","Token"],"kind":"struct"},"2:30656:5405":{"crate_id":2,"path":["core","mem","manually_drop","ManuallyDrop"],"kind":"struct"},"2:30694:5407":{"crate_id":2,"path":["core","mem","transmutability","Assume"],"kind":"struct"},"2:12693:9510":{"crate_id":2,"path":["core","str","iter","SplitNInternal"],"kind":"struct"},"23:0:1397":{"crate_id":23,"path":["quote"],"kind":"module"},"2:10401:4098":{"crate_id":2,"path":["core","fmt","LowerExp"],"kind":"trait"},"8:0:3703":{"crate_id":8,"path":["cfg_if"],"kind":"module"},"1:8812:11281":{"crate_id":1,"path":["std","path","Component"],"kind":"enum"},"17:10350:6146":{"crate_id":17,"path":["object","endian","I64Bytes"],"kind":"struct"},"24:5374:3900":{"crate_id":24,"path":["syn","expr","ExprTuple"],"kind":"struct"},"18:113:28183":{"crate_id":18,"path":["memchr","memchr","iter","Memchr3"],"kind":"struct"},"5:4117:5765":{"crate_id":5,"path":["alloc","collections","vec_deque","drain","drop","DropGuard"],"kind":"struct"},"2:4449:35055":{"crate_id":2,"path":["core","asserting","TryCaptureWithDebug"],"kind":"struct"},"0:0:2377":{"crate_id":0,"path":["serde_derive"],"kind":"module"},"21:214:10642":{"crate_id":21,"path":["proc_macro","bridge","fxhash","FxHasher"],"kind":"struct"},"6:5329:7958":{"crate_id":6,"path":["libc","unix","linux_like","linux","seccomp_notif_sizes"],"kind":"struct"},"17:15356:6822":{"crate_id":17,"path":["object","pe","ImageResourceDirectory"],"kind":"struct"},"6:5266:7930":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_extended_err"],"kind":"struct"},"2:44264:9467":{"crate_id":2,"path":["core","str","iter","EscapeDebug"],"kind":"struct"},"17:15368:6825":{"crate_id":17,"path":["object","pe","ImageResourceDirectoryEntry"],"kind":"struct"},"20:358:3966":{"crate_id":20,"path":["proc_macro2","imp","LexError"],"kind":"enum"},"17:11621:9208":{"crate_id":17,"path":["object","read","elf","version","VersionTable"],"kind":"struct"},"2:26121:267":{"crate_id":2,"path":["core","num","wrapping","Wrapping"],"kind":"struct"},"1:4348:11242":{"crate_id":1,"path":["std","os","unix","net","ancillary","Messages"],"kind":"struct"},"2:21918:11344":{"crate_id":2,"path":["core","core_simd","masks","MaskElement"],"kind":"trait"},"6:5002:7844":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_periodic_effect"],"kind":"struct"},"2:11473:9511":{"crate_id":2,"path":["core","slice","iter","SplitN"],"kind":"struct"},"1:9406:5789":{"crate_id":1,"path":["std","sync","poison","Guard"],"kind":"struct"},"2:42035:8812":{"crate_id":2,"path":["core","net","socket_addr","SocketAddrV4"],"kind":"struct"},"2:3458:142":{"crate_id":2,"path":["core","ops","function","FnOnce"],"kind":"trait"},"9:447:22840":{"crate_id":9,"path":["miniz_oxide","MZError"],"kind":"enum"},"17:12353:9230":{"crate_id":17,"path":["object","read","pe","import","ImportDescriptorIterator"],"kind":"struct"},"2:22487:11430":{"crate_id":2,"path":["core","core_simd","simd","num","int","SimdInt"],"kind":"trait"},"18:651:6016":{"crate_id":18,"path":["memchr","memmem","x86","sse","Forward"],"kind":"struct"},"1:5441:203":{"crate_id":1,"path":["std","path","Path"],"kind":"struct"},"2:44961:35401":{"crate_id":2,"path":["core","task","wake","ExtData"],"kind":"enum"},"21:2530:4132":{"crate_id":21,"path":["proc_macro","diagnostic","Level"],"kind":"enum"},"16:7618:7273":{"crate_id":16,"path":["gimli","read","rnglists","RangeLists"],"kind":"struct"},"2:44526:9536":{"crate_id":2,"path":["core","str","pattern","StrSearcher"],"kind":"struct"},"17:12584:23944":{"crate_id":17,"path":["object","read","xcoff","symbol","SymbolIterator"],"kind":"struct"},"2:43850:16488":{"crate_id":2,"path":["core","slice","iter","ArrayChunksMut"],"kind":"struct"},"2:12770:9436":{"crate_id":2,"path":["core","str","iter","SplitInclusive"],"kind":"struct"},"17:14372:6533":{"crate_id":17,"path":["object","macho","VersionMinCommand"],"kind":"struct"},"24:3566:228":{"crate_id":24,"path":["syn","token","Return"],"kind":"struct"},"17:16176:7053":{"crate_id":17,"path":["object","xcoff","FunAux64"],"kind":"struct"},"17:13173:6288":{"crate_id":17,"path":["object","archive","AixMemberOffset"],"kind":"struct"},"2:3285:5450":{"crate_id":2,"path":["core","ops","async_function","AsyncFnMut"],"kind":"trait"},"17:15608:6905":{"crate_id":17,"path":["object","pe","ImageArmRuntimeFunctionEntry"],"kind":"struct"},"2:2966:258":{"crate_id":2,"path":["core","convert","TryInto"],"kind":"trait"},"5:3251:3948":{"crate_id":5,"path":["alloc","collections","btree","set","Iter"],"kind":"struct"},"1:7723:28393":{"crate_id":1,"path":["std","panicking","Hook"],"kind":"enum"},"1:6503:220":{"crate_id":1,"path":["std","sync","mpmc","Receiver"],"kind":"struct"},"17:13844:6438":{"crate_id":17,"path":["object","macho","LcStr"],"kind":"struct"},"2:45009:5457":{"crate_id":2,"path":["core","alloc","AllocError"],"kind":"struct"},"2:4724:4103":{"crate_id":2,"path":["core","cell","BorrowError"],"kind":"struct"},"1:8030:5332":{"crate_id":1,"path":["std","thread","Thread"],"kind":"struct"},"2:3435:3994":{"crate_id":2,"path":["core","ops","deref","DerefPure"],"kind":"trait"},"2:2593:672":{"crate_id":2,"path":["core","ptr","drop_in_place"],"kind":"function"},"11:2304:9368":{"crate_id":11,"path":["hashbrown","table","Entry"],"kind":"enum"},"23:35:11139":{"crate_id":23,"path":["quote","ext","private","Sealed"],"kind":"trait"},"16:2612:7092":{"crate_id":16,"path":["gimli","common","DebugMacinfoOffset"],"kind":"struct"},"1:2070:197":{"crate_id":1,"path":["std","ffi","os_str","OsStr"],"kind":"struct"},"2:43711:35397":{"crate_id":2,"path":["core","slice","iter","GenericSplitN"],"kind":"struct"},"1:12324:28319":{"crate_id":1,"path":["std","backtrace_rs","print","PrintFmt"],"kind":"enum"},"1:5329:204":{"crate_id":1,"path":["std","path","PathBuf"],"kind":"struct"},"16:3778:7133":{"crate_id":16,"path":["gimli","constants","DwSect"],"kind":"struct"},"17:13387:6333":{"crate_id":17,"path":["object","elf","Rel32"],"kind":"struct"},"24:5366:3898":{"crate_id":24,"path":["syn","expr","ExprTry"],"kind":"struct"},"16:6433:9313":{"crate_id":16,"path":["gimli","read","abbrev","Abbreviations"],"kind":"struct"},"17:13568:6377":{"crate_id":17,"path":["object","elf","NoteHeader32"],"kind":"struct"},"16:2936:22995":{"crate_id":16,"path":["gimli","common","SectionId"],"kind":"enum"},"2:4:1256":{"crate_id":2,"path":["core","panic"],"kind":"macro"},"18:589:6023":{"crate_id":18,"path":["memchr","memmem","twoway","TwoWay"],"kind":"struct"},"2:42092:173":{"crate_id":2,"path":["core","option","Item"],"kind":"struct"},"16:7428:23869":{"crate_id":16,"path":["gimli","read","op","EvaluationResult"],"kind":"enum"},"1:9415:235":{"crate_id":1,"path":["std","sync","rwlock","RwLockWriteGuard"],"kind":"struct"},"2:40490:9461":{"crate_id":2,"path":["core","char","EscapeDefault"],"kind":"struct"},"2:38326:5994":{"crate_id":2,"path":["core","ops","bit","BitXorAssign"],"kind":"trait"},"18:698:9193":{"crate_id":18,"path":["memchr","memmem","FinderBuilder"],"kind":"struct"},"17:14386:6535":{"crate_id":17,"path":["object","macho","BuildVersionCommand"],"kind":"struct"},"1:1625:9400":{"crate_id":1,"path":["std","collections","hash","set","Difference"],"kind":"struct"},"2:12000:16492":{"crate_id":2,"path":["core","slice","iter","ChunkBy"],"kind":"struct"},"2:3665:16533":{"crate_id":2,"path":["core","ops","try_trait","Residual"],"kind":"trait"},"16:2708:7096":{"crate_id":16,"path":["gimli","common","DebugRngListsBase"],"kind":"struct"},"6:8259:8532":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_condattr_t"],"kind":"struct"},"2:22997:34019":{"crate_id":2,"path":["core","num","flt2dec","decoder","FullDecoded"],"kind":"enum"},"2:41979:34034":{"crate_id":2,"path":["core","net","parser","AddrKind"],"kind":"enum"},"1:12308:10700":{"crate_id":1,"path":["std","backtrace_rs","symbolize","gimli","Cache"],"kind":"struct"},"1:10721:11178":{"crate_id":1,"path":["std","sys","pal","unix","stdio","Stdout"],"kind":"struct"},"24:5960:3936":{"crate_id":24,"path":["syn","ty","TypeReference"],"kind":"struct"},"1:2307:138":{"crate_id":1,"path":["std","fs","File"],"kind":"struct"},"21:2544:126":{"crate_id":21,"path":["proc_macro","diagnostic","Diagnostic"],"kind":"struct"},"5:219:5462":{"crate_id":5,"path":["alloc","boxed","thin","ThinBox"],"kind":"struct"},"17:13899:6447":{"crate_id":17,"path":["object","macho","Section32"],"kind":"struct"},"1:12345:335":{"crate_id":1,"path":["std","array"],"kind":"primitive"},"2:8003:4011":{"crate_id":2,"path":["core","iter","sources","empty","Empty"],"kind":"struct"},"2:44087:9512":{"crate_id":2,"path":["core","str","iter","RSplitN"],"kind":"struct"},"2:4437:35163":{"crate_id":2,"path":["core","asserting","TryCaptureWithoutDebug"],"kind":"struct"},"2:47248:8970":{"crate_id":2,"path":["core","core_arch","x86","__m512"],"kind":"struct"},"17:2175:24029":{"crate_id":17,"path":["object","read","elf","relocation","ElfRelaIterator"],"kind":"enum"},"5:7415:5776":{"crate_id":5,"path":["alloc","collections","binary_heap","DrainSorted"],"kind":"struct"},"6:1686:7700":{"crate_id":6,"path":["libc","unix","linux_like","epoll_event"],"kind":"struct"},"1:8528:4057":{"crate_id":1,"path":["std","io","Take"],"kind":"struct"},"18:680:9189":{"crate_id":18,"path":["memchr","memmem","Finder"],"kind":"struct"},"5:1077:5765":{"crate_id":5,"path":["alloc","collections","binary_heap","drop","DropGuard"],"kind":"struct"},"2:3452:140":{"crate_id":2,"path":["core","ops","function","Fn"],"kind":"trait"},"11:351:37362":{"crate_id":11,"path":["hashbrown","raw","FullBucketsIndices"],"kind":"struct"},"1:11642:9587":{"crate_id":1,"path":["std","sys_common","process","CommandEnv"],"kind":"struct"},"11:1923:2556":{"crate_id":11,"path":["hashbrown","set","Union"],"kind":"struct"},"2:39974:5116":{"crate_id":2,"path":["core","ascii","ascii_char","AsciiChar"],"kind":"enum"},"1:2226:128":{"crate_id":1,"path":["std","ffi","os_str","Display"],"kind":"struct"},"1:8349:11172":{"crate_id":1,"path":["std","io","error","ErrorKind"],"kind":"enum"},"1:11848:11195":{"crate_id":1,"path":["std","sys_common","net","UdpSocket"],"kind":"struct"},"17:14599:6577":{"crate_id":17,"path":["object","macho","ScatteredRelocationInfo"],"kind":"struct"},"2:22894:8566":{"crate_id":2,"path":["core","num","dec2flt","common","BiasedFp"],"kind":"struct"},"24:5943:3931":{"crate_id":24,"path":["syn","ty","TypeInfer"],"kind":"struct"},"2:47301:8979":{"crate_id":2,"path":["core","core_arch","x86","__m256bh"],"kind":"struct"},"2:22616:11433":{"crate_id":2,"path":["core","core_simd","simd","ptr","mut_ptr","SimdMutPtr"],"kind":"trait"},"24:98:4410":{"crate_id":24,"path":["syn","token","private","CustomToken"],"kind":"trait"},"1:11916:29795":{"crate_id":1,"path":["std","panicking","panic_count","MustAbort"],"kind":"enum"},"16:2902:22994":{"crate_id":16,"path":["gimli","common","UnitSectionOffset"],"kind":"enum"},"16:7910:23875":{"crate_id":16,"path":["gimli","read","unit","AttributeValue"],"kind":"enum"},"2:45900:8850":{"crate_id":2,"path":["core","core_arch","simd","i8x2"],"kind":"struct"},"2:44972:11434":{"crate_id":2,"path":["core","task","wake","ContextBuilder"],"kind":"struct"},"2:46777:8922":{"crate_id":2,"path":["core","core_arch","simd","i8x64"],"kind":"struct"},"2:2957:76":{"crate_id":2,"path":["core","convert","AsMut"],"kind":"trait"},"5:7059:264":{"crate_id":5,"path":["alloc","vec","Vec"],"kind":"struct"},"17:13972:6184":{"crate_id":17,"path":["object","macho","Dylib"],"kind":"struct"},"17:12557:6158":{"crate_id":17,"path":["object","read","xcoff","section","SectionTable"],"kind":"struct"},"2:39575:5453":{"crate_id":2,"path":["core","ops","coroutine","CoroutineState"],"kind":"enum"},"6:8282:8538":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_cond_t"],"kind":"struct"},"16:2458:7085":{"crate_id":16,"path":["gimli","common","DebugArangesOffset"],"kind":"struct"},"2:39673:212":{"crate_id":2,"path":["core","ops","range","RangeFrom"],"kind":"struct"},"17:13325:6323":{"crate_id":17,"path":["object","elf","Sym32"],"kind":"struct"},"2:45932:8854":{"crate_id":2,"path":["core","core_arch","simd","u16x2"],"kind":"struct"},"6:6915:8363":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","semid_ds"],"kind":"struct"},"5:743:118":{"crate_id":5,"path":["alloc","borrow","Cow"],"kind":"enum"},"2:44998:9561":{"crate_id":2,"path":["core","alloc","layout","LayoutError"],"kind":"struct"},"6:5407:1243":{"crate_id":6,"path":["libc","unix","linux_like","linux","option"],"kind":"struct"},"1:2067:198":{"crate_id":1,"path":["std","ffi","os_str","OsString"],"kind":"struct"},"17:11189:6162":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbol"],"kind":"struct"},"2:42412:93":{"crate_id":2,"path":["core","sync","atomic","AtomicU16"],"kind":"struct"},"5:3318:2556":{"crate_id":5,"path":["alloc","collections","btree","set","Union"],"kind":"struct"},"24:4641:4252":{"crate_id":24,"path":["syn","token","PathSep"],"kind":"struct"},"2:46976:8956":{"crate_id":2,"path":["core","core_arch","simd","u16x32"],"kind":"struct"},"24:1707:2591":{"crate_id":24,"path":["syn","meta","ParseNestedMeta"],"kind":"struct"},"17:12225:24095":{"crate_id":17,"path":["object","read","pe","section","PeSegmentIterator"],"kind":"struct"},"24:3175:123":{"crate_id":24,"path":["syn","token","Default"],"kind":"struct"},"2:43093:73":{"crate_id":2,"path":["core","fmt","rt","Argument"],"kind":"struct"},"24:3838:4224":{"crate_id":24,"path":["syn","token","While"],"kind":"struct"},"2:44948:8844":{"crate_id":2,"path":["core","task","wake","RawWakerVTable"],"kind":"struct"},"2:42168:4704":{"crate_id":2,"path":["core","panic","unwind_safe","RefUnwindSafe"],"kind":"trait"},"16:2438:7084":{"crate_id":16,"path":["gimli","common","DebugAddrIndex"],"kind":"struct"},"5:843:5768":{"crate_id":5,"path":["alloc","collections","binary_heap","PeekMut"],"kind":"struct"},"2:2065:1358":{"crate_id":2,"path":["core","ptr"],"kind":"module"},"2:40865:4038":{"crate_id":2,"path":["core","iter","adapters","map_while","MapWhile"],"kind":"struct"},"1:7331:5866":{"crate_id":1,"path":["std","sys","thread_local","abort_on_dtor_unwind","DtorUnwindGuard"],"kind":"struct"},"5:2539:8555":{"crate_id":5,"path":["alloc","collections","btree","node","NodeRef"],"kind":"struct"},"20:687:3970":{"crate_id":20,"path":["proc_macro2","marker","ProcMacroAutoTraits"],"kind":"struct"},"17:11075:6158":{"crate_id":17,"path":["object","read","coff","section","SectionTable"],"kind":"struct"},"2:44707:9556":{"crate_id":2,"path":["core","str","BytesIsNotEmpty"],"kind":"struct"},"2:10387:119":{"crate_id":2,"path":["core","fmt","macros","Debug"],"kind":"proc_derive"},"16:6620:7183":{"crate_id":16,"path":["gimli","read","index","UnitIndexSection"],"kind":"struct"},"2:30433:11196":{"crate_id":2,"path":["core","num","FpCategory"],"kind":"enum"},"24:5358:3876":{"crate_id":24,"path":["syn","expr","ExprStruct"],"kind":"struct"},"2:2768:134":{"crate_id":2,"path":["core","cmp","Eq"],"kind":"trait"},"21:1974:5570":{"crate_id":21,"path":["proc_macro","bridge","LitKind"],"kind":"enum"},"17:11153:23944":{"crate_id":17,"path":["object","read","coff","symbol","SymbolIterator"],"kind":"struct"},"24:5386:3902":{"crate_id":24,"path":["syn","expr","ExprWhile"],"kind":"struct"},"20:908:3968":{"crate_id":20,"path":["proc_macro2","Delimiter"],"kind":"enum"},"17:13946:6453":{"crate_id":17,"path":["object","macho","Fvmlib"],"kind":"struct"},"5:1355:11062":{"crate_id":5,"path":["alloc","collections","btree","map","entry","OccupiedEntry"],"kind":"struct"},"2:43118:137":{"crate_id":2,"path":["core","fmt","Error"],"kind":"struct"},"17:15333:6814":{"crate_id":17,"path":["object","pe","ImageBoundForwarderRef"],"kind":"struct"},"17:403:23930":{"crate_id":17,"path":["object","read","any","Segment"],"kind":"struct"},"2:46306:8887":{"crate_id":2,"path":["core","core_arch","simd","f32x4"],"kind":"struct"},"17:15521:6889":{"crate_id":17,"path":["object","pe","ImageLoadConfigDirectory64"],"kind":"struct"},"24:128:2507":{"crate_id":24,"path":["syn","token","Group"],"kind":"struct"},"13:0:3701":{"crate_id":13,"path":["std_detect"],"kind":"module"},"1:1083:11062":{"crate_id":1,"path":["std","collections","hash","map","OccupiedEntry"],"kind":"struct"},"16:8188:23877":{"crate_id":16,"path":["gimli","read","unit","EntriesTreeIter"],"kind":"struct"},"20:982:3947":{"crate_id":20,"path":["proc_macro2","token_stream","IntoIter"],"kind":"struct"},"17:13308:6321":{"crate_id":17,"path":["object","elf","CompressionHeader64"],"kind":"struct"},"6:5181:7885":{"crate_id":6,"path":["libc","unix","linux_like","linux","mntent"],"kind":"struct"},"6:5361:7965":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlmsghdr"],"kind":"struct"},"1:1838:696":{"crate_id":1,"path":["std","env"],"kind":"module"},"6:6768:8309":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_desc"],"kind":"struct"},"6:1547:7607":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_ll"],"kind":"struct"},"6:5146:7881":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Shdr"],"kind":"struct"},"24:4868:4268":{"crate_id":24,"path":["syn","token","StarEq"],"kind":"struct"},"24:5409:58":{"crate_id":24,"path":["syn","expr","parsing","kw","builtin"],"kind":"struct"},"17:11595:6174":{"crate_id":17,"path":["object","read","elf","version","VersionIndex"],"kind":"struct"},"24:3583:4215":{"crate_id":24,"path":["syn","token","SelfType"],"kind":"struct"},"2:43941:9503":{"crate_id":2,"path":["core","str","iter","CharIndices"],"kind":"struct"},"2:23192:8589":{"crate_id":2,"path":["core","num","nonzero","private","NonZeroU128Inner"],"kind":"struct"},"17:12478:6230":{"crate_id":17,"path":["object","read","pe","resource","ResourceName"],"kind":"struct"},"14:165:22930":{"crate_id":14,"path":["rustc_demangle","DemangleStyle"],"kind":"enum"},"24:5616:3913":{"crate_id":24,"path":["syn","lit","LitCStr"],"kind":"struct"},"6:7984:8514":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","not_x32","statvfs"],"kind":"struct"},"5:5422:5765":{"crate_id":5,"path":["alloc","slice","hack","to_vec","DropGuard"],"kind":"struct"},"17:10457:138":{"crate_id":17,"path":["object","read","any","File"],"kind":"enum"},"5:289:5765":{"crate_id":5,"path":["alloc","boxed","thin","drop","DropGuard"],"kind":"struct"},"18:548:153":{"crate_id":18,"path":["memchr","memmem","rabinkarp","Hash"],"kind":"struct"},"1:1891:11081":{"crate_id":1,"path":["std","env","SplitPaths"],"kind":"struct"},"5:7457:210":{"crate_id":5,"path":["alloc","collections","btree","set","Range"],"kind":"struct"},"2:44462:9534":{"crate_id":2,"path":["core","str","pattern","CharSliceSearcher"],"kind":"struct"},"2:10391:4092":{"crate_id":2,"path":["core","fmt","Octal"],"kind":"trait"},"24:3821:4223":{"crate_id":24,"path":["syn","token","Where"],"kind":"struct"},"2:47021:8957":{"crate_id":2,"path":["core","core_arch","simd","i32x16"],"kind":"struct"},"1:9714:138":{"crate_id":1,"path":["std","sys","pal","unix","fs","File"],"kind":"struct"},"6:5160:7882":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Shdr"],"kind":"struct"},"2:9857:91":{"crate_id":2,"path":["core","sync","atomic","AtomicPtr"],"kind":"struct"},"24:5654:2902":{"crate_id":24,"path":["syn","mac","Macro"],"kind":"struct"},"6:5260:7927":{"crate_id":6,"path":["libc","unix","linux_like","linux","regmatch_t"],"kind":"struct"},"6:5020:7853":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_effect"],"kind":"struct"},"6:5250:7921":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_vm"],"kind":"struct"},"17:16151:7045":{"crate_id":17,"path":["object","xcoff","CsectAux64"],"kind":"struct"},"17:15273:6798":{"crate_id":17,"path":["object","pe","ImageThunkData64"],"kind":"struct"},"6:4885:7787":{"crate_id":6,"path":["libc","unix","linux_like","linux","cpu_set_t"],"kind":"struct"},"24:3039:4194":{"crate_id":24,"path":["syn","token","Auto"],"kind":"struct"},"24:5518:3175":{"crate_id":24,"path":["syn","generics","TraitBound"],"kind":"struct"},"2:44229:9520":{"crate_id":2,"path":["core","str","iter","LinesAny"],"kind":"struct"},"24:5769:3167":{"crate_id":24,"path":["syn","path","PathSegment"],"kind":"struct"},"6:497:7516":{"crate_id":6,"path":["libc","unix","rusage"],"kind":"struct"},"1:9202:9069":{"crate_id":1,"path":["std","sync","mpsc","RecvError"],"kind":"struct"},"17:12454:9236":{"crate_id":17,"path":["object","read","pe","resource","ResourceDirectoryTable"],"kind":"struct"},"24:5281:3870":{"crate_id":24,"path":["syn","expr","ExprField"],"kind":"struct"},"1:8072:11052":{"crate_id":1,"path":["std","backtrace","RawFrame"],"kind":"enum"},"1:6352:5837":{"crate_id":1,"path":["std","sync","mpmc","waker","Waker"],"kind":"struct"},"1:8498:11138":{"crate_id":1,"path":["std","io","SeekFrom"],"kind":"enum"},"1:617:11043":{"crate_id":1,"path":["std","ascii","AsciiExt"],"kind":"trait"},"6:4897:7792":{"crate_id":6,"path":["libc","unix","linux_like","linux","msginfo"],"kind":"struct"},"17:10982:23958":{"crate_id":17,"path":["object","read","archive","Members"],"kind":"enum"},"24:5000:2536":{"crate_id":24,"path":["syn","data","Field"],"kind":"struct"},"1:8204:9567":{"crate_id":1,"path":["std","fs","Permissions"],"kind":"struct"},"21:2588:3966":{"crate_id":21,"path":["proc_macro","LexError"],"kind":"struct"},"2:12502:16509":{"crate_id":2,"path":["core","str","converts","from_utf8"],"kind":"function"},"1:11827:11193":{"crate_id":1,"path":["std","sys_common","net","TcpListener"],"kind":"struct"},"2:44239:9521":{"crate_id":2,"path":["core","str","iter","SplitWhitespace"],"kind":"struct"},"6:5352:7961":{"crate_id":6,"path":["libc","unix","linux_like","linux","seccomp_notif_addfd"],"kind":"struct"},"17:12949:6223":{"crate_id":17,"path":["object","read","Export"],"kind":"struct"},"2:43983:9437":{"crate_id":2,"path":["core","str","iter","RSplit"],"kind":"struct"},"2:12732:9516":{"crate_id":2,"path":["core","str","iter","MatchesInternal"],"kind":"struct"},"24:5027:3866":{"crate_id":24,"path":["syn","derive","DataEnum"],"kind":"struct"},"6:479:7508":{"crate_id":6,"path":["libc","unix","timeval"],"kind":"struct"},"5:4282:5789":{"crate_id":5,"path":["alloc","collections","vec_deque","into_iter","try_rfold","Guard"],"kind":"struct"},"16:8155:9386":{"crate_id":16,"path":["gimli","read","unit","EntriesTree"],"kind":"struct"},"17:9807:23920":{"crate_id":17,"path":["object","common","SectionKind"],"kind":"enum"},"11:102:9390":{"crate_id":11,"path":["hashbrown","raw","Bucket"],"kind":"struct"},"16:6300:23860":{"crate_id":16,"path":["gimli","read","dwarf","DwarfPackage"],"kind":"struct"},"2:30688:5406":{"crate_id":2,"path":["core","mem","maybe_uninit","MaybeUninit"],"kind":"union"},"24:3226:4200":{"crate_id":24,"path":["syn","token","Else"],"kind":"struct"},"2:23017:34017":{"crate_id":2,"path":["core","num","flt2dec","Sign"],"kind":"enum"},"17:15655:6917":{"crate_id":17,"path":["object","pe","ImageEnclaveConfig32"],"kind":"struct"},"2:40794:4046":{"crate_id":2,"path":["core","iter","adapters","filter","Filter"],"kind":"struct"},"2:2763:201":{"crate_id":2,"path":["core","cmp","PartialEq"],"kind":"trait"},"6:1621:7661":{"crate_id":6,"path":["libc","unix","linux_like","in_pktinfo"],"kind":"struct"},"14:0:3708":{"crate_id":14,"path":["rustc_demangle"],"kind":"module"},"2:42451:87":{"crate_id":2,"path":["core","sync","atomic","AtomicI32"],"kind":"struct"},"17:13024:23951":{"crate_id":17,"path":["object","read","CompressionFormat"],"kind":"enum"},"2:7831:4008":{"crate_id":2,"path":["core","iter","range","Step"],"kind":"trait"},"6:8197:8529":{"crate_id":6,"path":["libc","unix","linux_like","linux","arch","generic","termios2"],"kind":"struct"},"21:2486:5571":{"crate_id":21,"path":["proc_macro","bridge","ExpnGlobals"],"kind":"struct"},"17:14038:6467":{"crate_id":17,"path":["object","macho","SubLibraryCommand"],"kind":"struct"},"24:2290:3946":{"crate_id":24,"path":["syn","punctuated","IntoPairs"],"kind":"struct"},"1:586:5329":{"crate_id":1,"path":["std","thread","JoinHandle"],"kind":"struct"},"17:15569:6890":{"crate_id":17,"path":["object","pe","ImageHotPatchInfo"],"kind":"struct"},"13:110:37374":{"crate_id":13,"path":["std_detect","detect","arch","x86","Feature"],"kind":"enum"},"24:3260:4201":{"crate_id":24,"path":["syn","token","Extern"],"kind":"struct"},"24:4786:4262":{"crate_id":24,"path":["syn","token","ShlEq"],"kind":"struct"},"2:10857:5832":{"crate_id":2,"path":["core","slice","sort","merge_sort","RunVec"],"kind":"struct"},"6:7366:8403":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stat"],"kind":"struct"},"17:12929:6259":{"crate_id":17,"path":["object","read","Import"],"kind":"struct"},"17:13235:2519":{"crate_id":17,"path":["object","elf","Ident"],"kind":"struct"},"2:13577:35295":{"crate_id":2,"path":["core","future","async_drop","AsyncDropOwning"],"kind":"struct"},"16:8202:7126":{"crate_id":16,"path":["gimli","read","unit","DebugTypes"],"kind":"struct"},"24:4851:4267":{"crate_id":24,"path":["syn","token","Star"],"kind":"struct"},"2:2963:144":{"crate_id":2,"path":["core","convert","From"],"kind":"trait"},"1:12344:1314":{"crate_id":1,"path":["std","pointer"],"kind":"primitive"},"1:7144:11341":{"crate_id":1,"path":["std","std_float","StdFloat"],"kind":"trait"},"2:46549:8914":{"crate_id":2,"path":["core","core_arch","simd","i8x32"],"kind":"struct"},"2:46209:8882":{"crate_id":2,"path":["core","core_arch","simd","u64x2"],"kind":"struct"},"1:12366:1912":{"crate_id":1,"path":["std","usize"],"kind":"primitive"},"2:9531:16506":{"crate_id":2,"path":["core","panicking","assert_matches_failed","Pattern"],"kind":"struct"},"1:8518:4044":{"crate_id":1,"path":["std","io","Chain"],"kind":"struct"},"21:181:5190":{"crate_id":21,"path":["proc_macro","bridge","closure","Closure"],"kind":"struct"},"17:15023:6741":{"crate_id":17,"path":["object","pe","AnonObjectHeaderV2"],"kind":"struct"},"20:0:2354":{"crate_id":20,"path":["proc_macro2"],"kind":"module"},"1:1855:11072":{"crate_id":1,"path":["std","env","VarsOs"],"kind":"struct"},"1:4217:11221":{"crate_id":1,"path":["std","os","unix","fs","DirBuilderExt"],"kind":"trait"},"24:5974:67":{"crate_id":24,"path":["syn","ty","Abi"],"kind":"struct"},"17:12030:24052":{"crate_id":17,"path":["object","read","macho","segment","MachOSegmentIterator"],"kind":"struct"},"2:42053:8813":{"crate_id":2,"path":["core","net","socket_addr","SocketAddrV6"],"kind":"struct"},"1:8617:11236":{"crate_id":1,"path":["std","os","unix","net","ancillary","SocketAncillary"],"kind":"struct"},"6:5457:8022":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_nxtinfo"],"kind":"struct"},"2:40649:3492":{"crate_id":2,"path":["core","ffi","c_str","Bytes"],"kind":"struct"},"18:735:28191":{"crate_id":18,"path":["memchr","memmem","SearcherKind"],"kind":"enum"},"16:7509:23870":{"crate_id":16,"path":["gimli","read","op","Evaluation"],"kind":"struct"},"5:5864:251":{"crate_id":5,"path":["alloc","string","ToString"],"kind":"trait"},"16:7686:23873":{"crate_id":16,"path":["gimli","read","rnglists","RngListIter"],"kind":"struct"},"17:11256:9203":{"crate_id":17,"path":["object","read","coff","import","ImportFile"],"kind":"struct"},"11:1676:5762":{"crate_id":11,"path":["hashbrown","scopeguard","ScopeGuard"],"kind":"struct"},"17:261:37428":{"crate_id":17,"path":["object","read","util","DebugLen"],"kind":"struct"},"17:11497:23994":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdatIterator"],"kind":"struct"},"2:44882:150":{"crate_id":2,"path":["core","future","future","Future"],"kind":"trait"},"16:6412:23861":{"crate_id":16,"path":["gimli","read","abbrev","AbbreviationsCacheStrategy"],"kind":"enum"},"17:15931:6289":{"crate_id":17,"path":["object","xcoff","FileHeader32"],"kind":"struct"},"6:538:7545":{"crate_id":6,"path":["libc","unix","pollfd"],"kind":"struct"},"2:22525:11431":{"crate_id":2,"path":["core","core_simd","simd","num","uint","SimdUint"],"kind":"trait"},"17:12318:6223":{"crate_id":17,"path":["object","read","pe","export","Export"],"kind":"struct"},"24:363:37835":{"crate_id":24,"path":["syn","buffer","empty","UnsafeSyncEntry"],"kind":"struct"},"17:10720:37448":{"crate_id":17,"path":["object","read","any","ComdatSectionIteratorInternal"],"kind":"enum"},"2:47079:8959":{"crate_id":2,"path":["core","core_arch","simd","f32x16"],"kind":"struct"},"2:11035:11139":{"crate_id":2,"path":["core","slice","index","private_slice_index","Sealed"],"kind":"trait"},"24:1939:2357":{"crate_id":24,"path":["syn","parse_macro_input"],"kind":"macro"},"2:6977:5572":{"crate_id":2,"path":["core","iter","adapters","map_windows","Buffer"],"kind":"struct"},"5:3046:4211":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Mut"],"kind":"struct"},"1:12351:735":{"crate_id":1,"path":["std","f16"],"kind":"primitive"},"1:2316:11119":{"crate_id":1,"path":["std","fs","read_to_string"],"kind":"function"},"16:3196:7072":{"crate_id":16,"path":["gimli","arch","AArch64"],"kind":"struct"},"24:3685:254":{"crate_id":24,"path":["syn","token","Try"],"kind":"struct"},"18:754:9202":{"crate_id":18,"path":["memchr","memmem","SearcherRev"],"kind":"struct"},"1:12339:417":{"crate_id":1,"path":["std","bool"],"kind":"primitive"},"2:40585:9470":{"crate_id":2,"path":["core","char","CaseMappingIter"],"kind":"struct"},"24:642:226":{"crate_id":24,"path":["syn","error","Result"],"kind":"type_alias"},"24:5618:3911":{"crate_id":24,"path":["syn","lit","LitByte"],"kind":"struct"},"24:4327:4231":{"crate_id":24,"path":["syn","token","Colon"],"kind":"struct"},"1:5106:11267":{"crate_id":1,"path":["std","os","net","linux_ext","tcp","TcpStreamExt"],"kind":"trait"},"1:8868:9064":{"crate_id":1,"path":["std","path","Ancestors"],"kind":"struct"},"2:7715:4042":{"crate_id":2,"path":["core","iter","adapters","zip","TrustedRandomAccess"],"kind":"trait"},"2:12915:3972":{"crate_id":2,"path":["core","str","traits","FromStr"],"kind":"trait"},"24:4965:3851":{"crate_id":24,"path":["syn","attr","MetaList"],"kind":"struct"},"1:10355:29801":{"crate_id":1,"path":["std","sys","pal","unix","os","EnvStrDebug"],"kind":"struct"},"2:22841:9445":{"crate_id":2,"path":["core","num","bignum","tests","Big8x3"],"kind":"struct"},"6:5039:7862":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_ff_erase"],"kind":"struct"},"16:4424:7140":{"crate_id":16,"path":["gimli","constants","DwForm"],"kind":"struct"},"24:649:5973":{"crate_id":24,"path":["syn","error","SpanRange"],"kind":"struct"},"24:1086:37839":{"crate_id":24,"path":["syn","generics","TypeParamsMut"],"kind":"struct"},"17:12969:6261":{"crate_id":17,"path":["object","read","CodeView"],"kind":"struct"},"5:1549:11056":{"crate_id":5,"path":["alloc","collections","btree","map","ValuesMut"],"kind":"struct"},"17:14341:6528":{"crate_id":17,"path":["object","macho","EncryptionInfoCommand32"],"kind":"struct"},"17:12127:6215":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbolTable"],"kind":"struct"},"16:150:5754":{"crate_id":16,"path":["gimli","read","util","ArrayVec"],"kind":"struct"},"2:45915:8851":{"crate_id":2,"path":["core","core_arch","simd","u8x4"],"kind":"struct"},"2:44877:8843":{"crate_id":2,"path":["core","future","async_drop","Noop"],"kind":"struct"},"16:7648:23871":{"crate_id":16,"path":["gimli","read","rnglists","RawRngListIter"],"kind":"struct"},"1:9142:9066":{"crate_id":1,"path":["std","process","ExitStatusError"],"kind":"struct"},"1:1631:9401":{"crate_id":1,"path":["std","collections","hash","set","SymmetricDifference"],"kind":"struct"},"16:6466:7181":{"crate_id":16,"path":["gimli","read","abbrev","AttributeSpecification"],"kind":"struct"},"16:2478:7086":{"crate_id":16,"path":["gimli","common","DebugInfoOffset"],"kind":"struct"},"17:12695:24129":{"crate_id":17,"path":["object","read","xcoff","segment","XcoffSegment"],"kind":"struct"},"2:10389:128":{"crate_id":2,"path":["core","fmt","Display"],"kind":"trait"},"24:592:3957":{"crate_id":24,"path":["syn","drops","NoDrop"],"kind":"struct"},"11:1007:9368":{"crate_id":11,"path":["hashbrown","map","Entry"],"kind":"enum"},"17:12494:6231":{"crate_id":17,"path":["object","read","pe","rich","RichHeaderInfo"],"kind":"struct"},"16:5846:9258":{"crate_id":16,"path":["gimli","read","cfi","CfiEntriesIter"],"kind":"struct"},"16:8226:23878":{"crate_id":16,"path":["gimli","read","value","ValueType"],"kind":"enum"},"17:16093:7030":{"crate_id":17,"path":["object","xcoff","Symbol64"],"kind":"struct"},"16:7549:9372":{"crate_id":16,"path":["gimli","read","pubnames","PubNamesEntryIter"],"kind":"struct"},"17:14012:6464":{"crate_id":17,"path":["object","macho","SubClientCommand"],"kind":"struct"},"5:1184:36209":{"crate_id":5,"path":["alloc","collections","btree","borrow","DormantMutRef"],"kind":"struct"},"2:23032:34003":{"crate_id":2,"path":["core","num","fmt","Part"],"kind":"enum"},"2:46532:8913":{"crate_id":2,"path":["core","core_arch","simd","u64x4"],"kind":"struct"},"5:7107:5811":{"crate_id":5,"path":["alloc","vec","retain_mut","BackshiftOnDrop"],"kind":"struct"},"17:14977:6733":{"crate_id":17,"path":["object","pe","ImageNtHeaders32"],"kind":"struct"},"2:13996:5458":{"crate_id":2,"path":["core","alloc","Allocator"],"kind":"trait"},"24:1762:28218":{"crate_id":24,"path":["syn","parse","discouraged","AnyDelimiter"],"kind":"trait"},"9:53:10664":{"crate_id":9,"path":["miniz_oxide","inflate","core","DecompressorOxide"],"kind":"struct"},"24:1819:4074":{"crate_id":24,"path":["syn","parse","StepCursor"],"kind":"struct"},"1:6276:5849":{"crate_id":1,"path":["std","sync","mpmc","list","Channel"],"kind":"struct"},"5:3661:3948":{"crate_id":5,"path":["alloc","collections","linked_list","Iter"],"kind":"struct"},"2:3933:5549":{"crate_id":2,"path":["core","array","drain","Drain"],"kind":"struct"},"1:9214:11314":{"crate_id":1,"path":["std","sync","mpsc","TryRecvError"],"kind":"enum"},"16:7111:9366":{"crate_id":16,"path":["gimli","read","lookup","PubStuffHeader"],"kind":"struct"},"16:2788:7100":{"crate_id":16,"path":["gimli","common","DebugStrOffsetsIndex"],"kind":"struct"},"21:109:5579":{"crate_id":21,"path":["proc_macro","bridge","client","Bridge"],"kind":"struct"},"17:15058:6745":{"crate_id":17,"path":["object","pe","ImageSectionHeader"],"kind":"struct"},"18:623:37466":{"crate_id":18,"path":["memchr","memmem","twoway","SuffixOrdering"],"kind":"enum"},"6:5436:8007":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_sndinfo"],"kind":"struct"},"23:504:5028":{"crate_id":23,"path":["quote","__private","IdentFragmentAdapter"],"kind":"struct"},"24:3634:2534":{"crate_id":24,"path":["syn","token","Struct"],"kind":"struct"},"1:6193:220":{"crate_id":1,"path":["std","sync","mpmc","counter","Receiver"],"kind":"struct"},"17:13785:6430":{"crate_id":17,"path":["object","macho","FatArch64"],"kind":"struct"},"5:2302:36148":{"crate_id":5,"path":["alloc","collections","btree","navigate","LazyLeafHandle"],"kind":"enum"},"5:3222:100":{"crate_id":5,"path":["alloc","collections","btree","set","BTreeSet"],"kind":"struct"},"1:11423:7479":{"crate_id":1,"path":["std","sys","os_str","bytes","Buf"],"kind":"struct"},"16:6231:9308":{"crate_id":16,"path":["gimli","read","cfi","CallFrameInstructionIter"],"kind":"struct"},"16:2572:7090":{"crate_id":16,"path":["gimli","common","DebugLocListsBase"],"kind":"struct"},"2:36340:4263":{"crate_id":2,"path":["core","ops","bit","Shr"],"kind":"trait"},"16:8313:137":{"crate_id":16,"path":["gimli","read","Error"],"kind":"enum"},"23:239:5034":{"crate_id":23,"path":["quote","__private","get_span","GetSpanInner"],"kind":"struct"},"16:4062:7138":{"crate_id":16,"path":["gimli","constants","DwTag"],"kind":"struct"},"2:3244:5096":{"crate_id":2,"path":["core","marker","Freeze"],"kind":"trait"},"6:6689:8280":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","sockaddr_xdp"],"kind":"struct"},"1:4155:11215":{"crate_id":1,"path":["std","os","unix","fs","OpenOptionsExt"],"kind":"trait"},"17:11574:9402":{"crate_id":17,"path":["object","read","elf","hash","HashTable"],"kind":"struct"},"5:1369:10573":{"crate_id":5,"path":["alloc","collections","btree","map","entry","OccupiedError"],"kind":"struct"},"17:11567:24042":{"crate_id":17,"path":["object","read","elf","note","GnuProperty"],"kind":"struct"},"21:141:5580":{"crate_id":21,"path":["proc_macro","bridge","client","Client"],"kind":"struct"},"21:2657:4131":{"crate_id":21,"path":["proc_macro","SourceFile"],"kind":"struct"},"16:6543:9321":{"crate_id":16,"path":["gimli","read","aranges","ArangeEntry"],"kind":"struct"},"17:12443:6229":{"crate_id":17,"path":["object","read","pe","resource","ResourceDirectory"],"kind":"struct"},"5:1559:10684":{"crate_id":5,"path":["alloc","collections","btree","map","IntoKeys"],"kind":"struct"},"16:2878:7104":{"crate_id":16,"path":["gimli","common","EhFrameOffset"],"kind":"struct"},"17:12900:6258":{"crate_id":17,"path":["object","read","ObjectMapEntry"],"kind":"struct"},"2:5981:5789":{"crate_id":2,"path":["core","iter","adapters","filter","next_chunk","Guard"],"kind":"struct"},"1:12342:1874":{"crate_id":1,"path":["std","unit"],"kind":"primitive"},"17:11324:24011":{"crate_id":17,"path":["object","read","elf","file","ElfFile"],"kind":"struct"},"6:5400:7986":{"crate_id":6,"path":["libc","unix","linux_like","linux","in6_ifreq"],"kind":"struct"},"17:13766:6425":{"crate_id":17,"path":["object","macho","FatHeader"],"kind":"struct"},"2:41310:4020":{"crate_id":2,"path":["core","iter","sources","repeat_n","RepeatN"],"kind":"struct"},"24:4923:2850":{"crate_id":24,"path":["syn","token","Paren"],"kind":"struct"},"2:33260:5989":{"crate_id":2,"path":["core","ops","arith","Rem"],"kind":"trait"},"2:33945:5976":{"crate_id":2,"path":["core","ops","bit","BitAnd"],"kind":"trait"},"2:47363:8996":{"crate_id":2,"path":["core","core_arch","x86","cpuid","CpuidResult"],"kind":"struct"},"2:44889:219":{"crate_id":2,"path":["core","future","ready","Ready"],"kind":"struct"},"24:4542:4245":{"crate_id":24,"path":["syn","token","Minus"],"kind":"struct"},"6:1585:7631":{"crate_id":6,"path":["libc","unix","linux_like","Dl_info"],"kind":"struct"},"17:14868:6692":{"crate_id":17,"path":["object","pe","ImageDataDirectory"],"kind":"struct"},"2:38271:5996":{"crate_id":2,"path":["core","ops","bit","BitOrAssign"],"kind":"trait"},"1:12347:1722":{"crate_id":1,"path":["std","str"],"kind":"primitive"},"1:9278:10690":{"crate_id":1,"path":["std","sync","mpmc","array","ArrayToken"],"kind":"struct"},"24:772:37640":{"crate_id":24,"path":["syn","expr","precedence","Precedence"],"kind":"enum"},"17:13606:6385":{"crate_id":17,"path":["object","elf","GnuHashHeader"],"kind":"struct"},"24:2971:4270":{"crate_id":24,"path":["syn","token","Underscore"],"kind":"struct"},"17:16032:6306":{"crate_id":17,"path":["object","xcoff","SectionHeader32"],"kind":"struct"},"17:11730:9217":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSubsubsectionIterator"],"kind":"struct"},"20:878:252":{"crate_id":20,"path":["proc_macro2","TokenStream"],"kind":"struct"},"2:43025:8818":{"crate_id":2,"path":["core","fmt","rt","Placeholder"],"kind":"struct"},"17:3473:24053":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbolIterator"],"kind":"struct"},"16:6991:37388":{"crate_id":16,"path":["gimli","read","loclists","LocListsFormat"],"kind":"enum"},"1:4921:11230":{"crate_id":1,"path":["std","os","fd","raw","IntoRawFd"],"kind":"trait"},"2:22443:11429":{"crate_id":2,"path":["core","core_simd","simd","num","float","SimdFloat"],"kind":"trait"},"24:1757:28217":{"crate_id":24,"path":["syn","parse","discouraged","Speculative"],"kind":"trait"},"2:42373:86":{"crate_id":2,"path":["core","sync","atomic","AtomicI16"],"kind":"struct"},"5:6566:5549":{"crate_id":5,"path":["alloc","vec","drain","Drain"],"kind":"struct"},"24:355:4084":{"crate_id":24,"path":["syn","buffer","Cursor"],"kind":"struct"},"17:12993:23950":{"crate_id":17,"path":["object","read","RelocationTarget"],"kind":"enum"},"3:234:226":{"crate_id":3,"path":["compiler_builtins","float","cmp","Result"],"kind":"enum"},"11:430:37371":{"crate_id":11,"path":["hashbrown","raw","RawIterHash"],"kind":"struct"},"6:4952:7818":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_mask"],"kind":"struct"},"16:4614:7146":{"crate_id":16,"path":["gimli","constants","DwVis"],"kind":"struct"},"17:10877:23945":{"crate_id":17,"path":["object","read","any","DynamicRelocationIterator"],"kind":"struct"},"18:581:5112":{"crate_id":18,"path":["memchr","memmem","twoway","Reverse"],"kind":"struct"},"5:2770:8558":{"crate_id":5,"path":["alloc","collections","btree","node","Handle"],"kind":"struct"},"11:2548:7416":{"crate_id":11,"path":["hashbrown","raw","bitmask","BitMaskIter"],"kind":"struct"},"1:947:10685":{"crate_id":1,"path":["std","collections","hash","map","IntoValues"],"kind":"struct"},"24:4910:4591":{"crate_id":24,"path":["syn","token","Bracket"],"kind":"struct"},"17:16105:7032":{"crate_id":17,"path":["object","xcoff","FileAux32"],"kind":"struct"},"5:3263:36203":{"crate_id":5,"path":["alloc","collections","btree","set","DifferenceInner"],"kind":"enum"},"16:2374:7081":{"crate_id":16,"path":["gimli","common","Register"],"kind":"struct"},"1:6712:5861":{"crate_id":1,"path":["std","sync","once_lock","OnceLock"],"kind":"struct"},"2:43800:16494":{"crate_id":2,"path":["core","slice","iter","ChunksExactMut"],"kind":"struct"},"1:7989:5346":{"crate_id":1,"path":["std","thread","local","AccessError"],"kind":"struct"},"24:4501:4242":{"crate_id":24,"path":["syn","token","LArrow"],"kind":"struct"},"6:4932:7809":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_absinfo"],"kind":"struct"},"1:8774:8829":{"crate_id":1,"path":["std","path","State"],"kind":"enum"},"1:12353:754":{"crate_id":1,"path":["std","f64"],"kind":"primitive"},"2:3487:3960":{"crate_id":2,"path":["core","ops","index","IndexMut"],"kind":"trait"},"2:34291:5975":{"crate_id":2,"path":["core","ops","bit","BitXor"],"kind":"trait"},"17:12851:9238":{"crate_id":17,"path":["object","read","SymbolMap"],"kind":"struct"},"2:11394:9437":{"crate_id":2,"path":["core","slice","iter","RSplit"],"kind":"struct"},"16:7014:23866":{"crate_id":16,"path":["gimli","read","loclists","RawLocListEntry"],"kind":"enum"},"1:11360:2888":{"crate_id":1,"path":["std","sys","os_str","bytes","Slice"],"kind":"struct"},"2:23066:8584":{"crate_id":2,"path":["core","num","error","TryFromIntError"],"kind":"struct"},"2:22218:8565":{"crate_id":2,"path":["core","core_simd","vector","Simd"],"kind":"struct"},"6:5314:7954":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_fprog"],"kind":"struct"},"5:7743:5548":{"crate_id":5,"path":["alloc","vec","splice","Splice"],"kind":"struct"},"6:5671:8111":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_can_addr"],"kind":"union"},"1:10947:9001":{"crate_id":1,"path":["std","sys","pal","unix","fs","FileTimes"],"kind":"struct"},"16:6895:7218":{"crate_id":16,"path":["gimli","read","line","FileEntry"],"kind":"struct"},"1:426:185":{"crate_id":1,"path":["std","thread","local","LocalKey"],"kind":"struct"},"2:32836:5987":{"crate_id":2,"path":["core","ops","arith","Mul"],"kind":"trait"},"20:732:2507":{"crate_id":20,"path":["proc_macro2","fallback","Group"],"kind":"struct"},"1:9370:9076":{"crate_id":1,"path":["std","sync","mpmc","utils","CachePadded"],"kind":"struct"},"9:392:22841":{"crate_id":9,"path":["miniz_oxide","MZFlush"],"kind":"enum"},"1:9163:3948":{"crate_id":1,"path":["std","sync","mpsc","Iter"],"kind":"struct"},"24:95:11139":{"crate_id":24,"path":["syn","token","private","Sealed"],"kind":"trait"},"18:659:28193":{"crate_id":18,"path":["memchr","memmem","FindIter"],"kind":"struct"},"20:904:2507":{"crate_id":20,"path":["proc_macro2","Group"],"kind":"struct"},"24:89:2513":{"crate_id":24,"path":["syn","token","Token"],"kind":"trait"},"17:3264:24050":{"crate_id":17,"path":["object","read","macho","section","MachOSectionIterator"],"kind":"struct"},"24:5937:3929":{"crate_id":24,"path":["syn","ty","TypeGroup"],"kind":"struct"},"6:7537:8485":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","mcontext_t"],"kind":"struct"},"17:15445:6844":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation64V2"],"kind":"struct"},"17:14436:6552":{"crate_id":17,"path":["object","macho","LinkerOptionCommand"],"kind":"struct"},"2:40433:34012":{"crate_id":2,"path":["core","char","convert","CharErrorKind"],"kind":"enum"},"2:12981:16505":{"crate_id":2,"path":["core","str","pattern","DoubleEndedSearcher"],"kind":"trait"},"5:2210:5321":{"crate_id":5,"path":["alloc","collections","btree","mem","replace","PanicGuard"],"kind":"struct"},"17:16187:7054":{"crate_id":17,"path":["object","xcoff","ExpAux"],"kind":"struct"},"17:12621:6237":{"crate_id":17,"path":["object","read","xcoff","symbol","XcoffSymbol"],"kind":"struct"},"17:12388:9232":{"crate_id":17,"path":["object","read","pe","import","DelayLoadImportTable"],"kind":"struct"},"2:3644:16595":{"crate_id":2,"path":["core","ops","range","OneSidedRange"],"kind":"trait"},"2:46384:8891":{"crate_id":2,"path":["core","core_arch","simd","m16x8"],"kind":"struct"},"24:5337:2785":{"crate_id":24,"path":["syn","expr","ExprPath"],"kind":"struct"},"6:7339:8393":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","flock64"],"kind":"struct"},"17:11142:6166":{"crate_id":17,"path":["object","read","coff","symbol","SymbolTable"],"kind":"struct"},"16:2728:7097":{"crate_id":16,"path":["gimli","common","DebugRngListsIndex"],"kind":"struct"},"1:2312:5491":{"crate_id":1,"path":["std","fs","read"],"kind":"function"},"6:6460:8163":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","msghdr"],"kind":"struct"},"16:6079:9242":{"crate_id":16,"path":["gimli","read","cfi","UnwindTableRow"],"kind":"struct"},"24:53:2595":{"crate_id":24,"path":["syn","token"],"kind":"module"},"1:932:5547":{"crate_id":1,"path":["std","collections","hash","map","ExtractIf"],"kind":"struct"},"24:5450:3070":{"crate_id":24,"path":["syn","generics","GenericParam"],"kind":"enum"},"2:4484:5448":{"crate_id":2,"path":["core","async_iter","async_iter","AsyncIterator"],"kind":"trait"},"2:22563:11432":{"crate_id":2,"path":["core","core_simd","simd","ptr","const_ptr","SimdConstPtr"],"kind":"trait"},"2:4850:4113":{"crate_id":2,"path":["core","cell","BorrowRefMut"],"kind":"struct"},"1:9129:9065":{"crate_id":1,"path":["std","process","ExitStatus"],"kind":"struct"},"6:6874:8337":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","sigset_t"],"kind":"struct"},"1:8879:9574":{"crate_id":1,"path":["std","path","StripPrefixError"],"kind":"struct"},"2:43539:8833":{"crate_id":2,"path":["core","slice","sort","TimSortRun"],"kind":"struct"},"11:742:10685":{"crate_id":11,"path":["hashbrown","map","IntoValues"],"kind":"struct"},"17:12711:137":{"crate_id":17,"path":["object","read","Error"],"kind":"struct"},"24:1846:3528":{"crate_id":24,"path":["syn","parse","Unexpected"],"kind":"enum"},"24:3481:4211":{"crate_id":24,"path":["syn","token","Mut"],"kind":"struct"},"2:10403:4099":{"crate_id":2,"path":["core","fmt","UpperExp"],"kind":"trait"},"17:15463:6847":{"crate_id":17,"path":["object","pe","ImageEpilogueDynamicRelocationHeader"],"kind":"struct"},"16:3925:7137":{"crate_id":16,"path":["gimli","constants","DwChildren"],"kind":"struct"},"17:13877:6446":{"crate_id":17,"path":["object","macho","SegmentCommand64"],"kind":"struct"},"2:32229:7418":{"crate_id":2,"path":["core","convert","Infallible"],"kind":"enum"},"17:12150:6216":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbol"],"kind":"struct"},"2:47129:8961":{"crate_id":2,"path":["core","core_arch","simd","u64x8"],"kind":"struct"},"17:9737:23914":{"crate_id":17,"path":["object","common","SubArchitecture"],"kind":"enum"},"6:5046:7864":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_abs_setup"],"kind":"struct"},"9:482:22839":{"crate_id":9,"path":["miniz_oxide","DataFormat"],"kind":"enum"},"1:9425:5865":{"crate_id":1,"path":["std","sync","rwlock","MappedRwLockWriteGuard"],"kind":"struct"},"1:5702:11290":{"crate_id":1,"path":["std","process","Stdio"],"kind":"struct"},"24:5815:2901":{"crate_id":24,"path":["syn","path","Constraint"],"kind":"struct"},"1:3900:11193":{"crate_id":1,"path":["std","net","tcp","TcpListener"],"kind":"struct"},"17:13485:6352":{"crate_id":17,"path":["object","elf","Dyn64"],"kind":"struct"},"17:13089:6270":{"crate_id":17,"path":["object","archive","Header"],"kind":"struct"},"17:16069:7025":{"crate_id":17,"path":["object","xcoff","SymbolBytes"],"kind":"struct"},"5:3648:182":{"crate_id":5,"path":["alloc","collections","linked_list","LinkedList"],"kind":"struct"},"24:3379:4207":{"crate_id":24,"path":["syn","token","Let"],"kind":"struct"},"1:9324:10692":{"crate_id":1,"path":["std","sync","mpmc","list","ListToken"],"kind":"struct"},"16:2548:7089":{"crate_id":16,"path":["gimli","common","LocationListsOffset"],"kind":"struct"},"2:3202:4118":{"crate_id":2,"path":["core","marker","Unsize"],"kind":"trait"},"7:79:22833":{"crate_id":7,"path":["unwind","libunwind","_Unwind_Action"],"kind":"enum"},"23:148:4726":{"crate_id":23,"path":["quote","__private","HasIterator"],"kind":"struct"},"2:40784:133":{"crate_id":2,"path":["core","iter","adapters","enumerate","Enumerate"],"kind":"struct"},"17:11467:6173":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbol"],"kind":"struct"},"1:10976:9042":{"crate_id":1,"path":["std","sys","pal","unix","io","IoSlice"],"kind":"struct"},"17:12213:24118":{"crate_id":17,"path":["object","read","pe","file","PeComdatSectionIterator"],"kind":"struct"},"2:22661:11139":{"crate_id":2,"path":["core","core_simd","simd","ptr","sealed","Sealed"],"kind":"trait"},"16:2808:7101":{"crate_id":16,"path":["gimli","common","DebugTypesOffset"],"kind":"struct"},"24:4745:4259":{"crate_id":24,"path":["syn","token","RArrow"],"kind":"struct"},"24:3515:4213":{"crate_id":24,"path":["syn","token","Priv"],"kind":"struct"},"23:150:4725":{"crate_id":23,"path":["quote","__private","ThereIsNoIteratorInRepetition"],"kind":"struct"},"16:7799:7112":{"crate_id":16,"path":["gimli","read","unit","DebugInfo"],"kind":"struct"},"1:11682:10307":{"crate_id":1,"path":["std","sys_common","wtf8","Wtf8"],"kind":"struct"},"1:11654:9091":{"crate_id":1,"path":["std","sys_common","wtf8","CodePoint"],"kind":"struct"},"5:4451:5791":{"crate_id":5,"path":["alloc","collections","vec_deque","drop","Dropper"],"kind":"struct"},"1:1101:10573":{"crate_id":1,"path":["std","collections","hash","map","OccupiedError"],"kind":"struct"},"24:5390:3903":{"crate_id":24,"path":["syn","expr","ExprYield"],"kind":"struct"},"2:22909:9446":{"crate_id":2,"path":["core","num","dec2flt","decimal","Decimal"],"kind":"struct"},"17:12508:6234":{"crate_id":17,"path":["object","read","pe","rich","RichHeaderEntry"],"kind":"struct"},"17:14752:6599":{"crate_id":17,"path":["object","pe","ImageOs2Header"],"kind":"struct"},"17:9886:23934":{"crate_id":17,"path":["object","common","SymbolKind"],"kind":"enum"},"16:5863:23856":{"crate_id":16,"path":["gimli","read","cfi","CieOrFde"],"kind":"enum"},"24:2410:3954":{"crate_id":24,"path":["syn","punctuated","PrivateIterMut"],"kind":"struct"},"17:15126:6760":{"crate_id":17,"path":["object","pe","ImageAuxSymbolTokenDef"],"kind":"struct"},"5:734:250":{"crate_id":5,"path":["alloc","borrow","ToOwned"],"kind":"trait"},"16:5075:7160":{"crate_id":16,"path":["gimli","constants","DwMacro"],"kind":"struct"},"17:10818:23944":{"crate_id":17,"path":["object","read","any","SymbolIterator"],"kind":"struct"},"2:45021:9562":{"crate_id":2,"path":["core","escape","EscapeIterInner"],"kind":"struct"},"20:948:2519":{"crate_id":20,"path":["proc_macro2","Ident"],"kind":"struct"},"6:5643:8101":{"crate_id":6,"path":["libc","unix","linux_like","linux","dirent64"],"kind":"struct"},"16:6560:7108":{"crate_id":16,"path":["gimli","read","index","DebugCuIndex"],"kind":"struct"},"2:10358:143":{"crate_id":2,"path":["core","fmt","Formatter"],"kind":"struct"},"17:12422:9234":{"crate_id":17,"path":["object","read","pe","relocation","RelocationIterator"],"kind":"struct"},"16:5831:9256":{"crate_id":16,"path":["gimli","read","cfi","SectionBaseAddresses"],"kind":"struct"},"17:13424:6339":{"crate_id":17,"path":["object","elf","Rela64"],"kind":"struct"},"6:4992:7837":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_condition_effect"],"kind":"struct"},"1:3026:5845":{"crate_id":1,"path":["std","io","error","repr_bitpacked","Repr"],"kind":"struct"},"6:6678:8278":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ptrace_syscall_info"],"kind":"struct"},"2:3251:5098":{"crate_id":2,"path":["core","marker","FnPtr"],"kind":"trait"},"1:951:11057":{"crate_id":1,"path":["std","collections","hash","map","RawEntryBuilderMut"],"kind":"struct"},"24:3498:4212":{"crate_id":24,"path":["syn","token","Override"],"kind":"struct"},"17:15039:6744":{"crate_id":17,"path":["object","pe","AnonObjectHeaderBigobj"],"kind":"struct"},"6:5536:8049":{"crate_id":6,"path":["libc","unix","linux_like","linux","dirent"],"kind":"struct"},"14:31:10567":{"crate_id":14,"path":["rustc_demangle","v0","Demangle"],"kind":"struct"},"2:15:3345":{"crate_id":2,"path":["core","write"],"kind":"macro"},"6:8328:8547":{"crate_id":6,"path":["libc","unix","linux_like","linux","canxl_frame"],"kind":"struct"},"1:11090:5875":{"crate_id":1,"path":["std","sys","pal","unix","process","process_inner","do_exec","Reset"],"kind":"struct"},"2:13679:35294":{"crate_id":2,"path":["core","future","join","MaybeDone"],"kind":"enum"},"1:1853:11071":{"crate_id":1,"path":["std","env","Vars"],"kind":"struct"},"5:6176:5789":{"crate_id":5,"path":["alloc","sync","from_iter_exact","Guard"],"kind":"struct"},"24:5394:2542":{"crate_id":24,"path":["syn","expr","Member"],"kind":"enum"},"21:2456:126":{"crate_id":21,"path":["proc_macro","bridge","Diagnostic"],"kind":"struct"},"21:0:1345":{"crate_id":21,"path":["proc_macro"],"kind":"module"},"6:1490:7576":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreq"],"kind":"struct"},"2:42101:3948":{"crate_id":2,"path":["core","option","Iter"],"kind":"struct"},"2:3282:5449":{"crate_id":2,"path":["core","ops","async_function","AsyncFn"],"kind":"trait"},"2:22973:8571":{"crate_id":2,"path":["core","num","diy_float","Fp"],"kind":"struct"},"2:2607:5485":{"crate_id":2,"path":["core","ptr","with_exposed_provenance"],"kind":"function"},"17:10439:6149":{"crate_id":17,"path":["object","read","util","StringTable"],"kind":"struct"},"17:13412:6338":{"crate_id":17,"path":["object","elf","Rel64"],"kind":"struct"},"24:2403:3952":{"crate_id":24,"path":["syn","punctuated","IterMut"],"kind":"struct"},"6:1565:7617":{"crate_id":6,"path":["libc","unix","linux_like","tm"],"kind":"struct"},"24:5034:2857":{"crate_id":24,"path":["syn","expr","Expr"],"kind":"enum"},"24:5928:3928":{"crate_id":24,"path":["syn","ty","TypeBareFn"],"kind":"struct"},"17:15473:6852":{"crate_id":17,"path":["object","pe","ImageLoadConfigDirectory32"],"kind":"struct"},"17:14260:6518":{"crate_id":17,"path":["object","macho","TwolevelHint"],"kind":"struct"},"16:6317:2549":{"crate_id":16,"path":["gimli","read","dwarf","Unit"],"kind":"struct"},"1:865:3948":{"crate_id":1,"path":["std","collections","hash","map","Iter"],"kind":"struct"},"1:4209:11219":{"crate_id":1,"path":["std","os","unix","fs","DirEntryExt2"],"kind":"trait"},"17:14847:6682":{"crate_id":17,"path":["object","pe","MaskedRichHeaderEntry"],"kind":"struct"},"2:43354:9498":{"crate_id":2,"path":["core","hash","sip","Sip24Rounds"],"kind":"struct"},"6:6657:8272":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_entry"],"kind":"struct"},"17:15092:6757":{"crate_id":17,"path":["object","pe","ImageSymbolBytes"],"kind":"struct"},"7:0:1902":{"crate_id":7,"path":["unwind"],"kind":"module"},"17:11313:9206":{"crate_id":17,"path":["object","read","coff","import","ImportObjectData"],"kind":"struct"},"24:1118:3908":{"crate_id":24,"path":["syn","generics","Turbofish"],"kind":"struct"},"2:31094:5112":{"crate_id":2,"path":["core","cmp","Reverse"],"kind":"struct"},"17:16121:7037":{"crate_id":17,"path":["object","xcoff","FileAux64"],"kind":"struct"},"17:12671:24159":{"crate_id":17,"path":["object","read","xcoff","comdat","XcoffComdatSectionIterator"],"kind":"struct"},"17:11764:9221":{"crate_id":17,"path":["object","read","elf","attributes","AttributeReader"],"kind":"struct"},"1:9289:5326":{"crate_id":1,"path":["std","sync","mpmc","context","Inner"],"kind":"struct"},"5:1204:36243":{"crate_id":5,"path":["alloc","collections","btree","dedup_sorted_iter","DedupSortedIter"],"kind":"struct"},"1:3061:137":{"crate_id":1,"path":["std","io","error","Error"],"kind":"struct"},"6:6650:8271":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ptrace_peeksiginfo_args"],"kind":"struct"},"5:4252:5789":{"crate_id":5,"path":["alloc","collections","vec_deque","into_iter","try_fold","Guard"],"kind":"struct"},"16:2355:7075":{"crate_id":16,"path":["gimli","common","LineEncoding"],"kind":"struct"},"2:5265:435":{"crate_id":2,"path":["core","ffi","c_void"],"kind":"enum"},"5:3297:36207":{"crate_id":5,"path":["alloc","collections","btree","set","IntersectionInner"],"kind":"enum"},"1:922:5549":{"crate_id":1,"path":["std","collections","hash","map","Drain"],"kind":"struct"},"5:5077:5789":{"crate_id":5,"path":["alloc","rc","from_iter_exact","Guard"],"kind":"struct"},"2:46128:8870":{"crate_id":2,"path":["core","core_arch","simd","f64x1"],"kind":"struct"},"16:5700:7109":{"crate_id":16,"path":["gimli","read","cfi","DebugFrame"],"kind":"struct"},"17:13774:6427":{"crate_id":17,"path":["object","macho","FatArch32"],"kind":"struct"},"6:1639:7673":{"crate_id":6,"path":["libc","unix","linux_like","in6_rtmsg"],"kind":"struct"},"9:330:7459":{"crate_id":9,"path":["miniz_oxide","inflate","core","LocalVars"],"kind":"struct"},"2:43064:7302":{"crate_id":2,"path":["core","fmt","rt","Flag"],"kind":"enum"},"5:6958:5554":{"crate_id":5,"path":["alloc","vec","in_place_drop","InPlaceDrop"],"kind":"struct"},"24:1110:3907":{"crate_id":24,"path":["syn","generics","ImplGenerics"],"kind":"struct"},"21:929:4131":{"crate_id":21,"path":["proc_macro","bridge","client","SourceFile"],"kind":"struct"},"1:0:1714":{"crate_id":1,"path":["std"],"kind":"module"},"1:12357:897":{"crate_id":1,"path":["std","i32"],"kind":"primitive"},"14:7:10567":{"crate_id":14,"path":["rustc_demangle","legacy","Demangle"],"kind":"struct"},"24:4617:4250":{"crate_id":24,"path":["syn","token","OrEq"],"kind":"struct"},"6:7575:8502":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ptrace_rseq_configuration"],"kind":"struct"},"17:10534:37435":{"crate_id":17,"path":["object","read","any","SegmentIteratorInternal"],"kind":"enum"},"17:11537:24012":{"crate_id":17,"path":["object","read","elf","note","NoteIterator"],"kind":"struct"},"11:1051:11063":{"crate_id":11,"path":["hashbrown","map","VacantEntry"],"kind":"struct"},"2:4571:4122":{"crate_id":2,"path":["core","cell","lazy","LazyCell"],"kind":"struct"},"2:1825:5303":{"crate_id":2,"path":["core","intrinsics","AggregateRawPtr"],"kind":"trait"},"0:965:2375":{"crate_id":0,"path":["serde_derive","Deserialize"],"kind":"proc_derive"},"1:12364:1828":{"crate_id":1,"path":["std","u128"],"kind":"primitive"},"16:4352:7139":{"crate_id":16,"path":["gimli","constants","DwAt"],"kind":"struct"},"5:7485:3947":{"crate_id":5,"path":["alloc","collections","linked_list","IntoIter"],"kind":"struct"},"2:3446:3067":{"crate_id":2,"path":["core","ops","drop","Drop"],"kind":"trait"},"2:32307:244":{"crate_id":2,"path":["core","marker","StructuralPartialEq"],"kind":"trait"},"24:4281:4228":{"crate_id":24,"path":["syn","token","At"],"kind":"struct"},"24:5952:3074":{"crate_id":24,"path":["syn","ty","TypePath"],"kind":"struct"},"1:8535:3492":{"crate_id":1,"path":["std","io","Bytes"],"kind":"struct"},"2:21812:8564":{"crate_id":2,"path":["core","core_simd","masks","mask_impl","Mask"],"kind":"struct"},"20:953:3203":{"crate_id":20,"path":["proc_macro2","Literal"],"kind":"struct"},"17:11115:23966":{"crate_id":17,"path":["object","read","coff","section","CoffSectionIterator"],"kind":"struct"},"1:12313:11053":{"crate_id":1,"path":["std","backtrace_rs","types","BytesOrWideString"],"kind":"enum"},"2:22630:5485":{"crate_id":2,"path":["core","core_simd","simd","ptr","mut_ptr","SimdMutPtr","with_exposed_provenance"],"kind":"function"},"20:927:2911":{"crate_id":20,"path":["proc_macro2","Punct"],"kind":"struct"},"6:5236:7915":{"crate_id":6,"path":["libc","unix","linux_like","linux","inotify_event"],"kind":"struct"},"2:13731:16558":{"crate_id":2,"path":["core","future","poll_fn","PollFn"],"kind":"struct"},"18:706:9195":{"crate_id":18,"path":["memchr","memmem","Searcher"],"kind":"struct"},"17:16079:7026":{"crate_id":17,"path":["object","xcoff","Symbol32"],"kind":"struct"},"17:14489:6556":{"crate_id":17,"path":["object","macho","EntryPointCommand"],"kind":"struct"},"17:13814:6435":{"crate_id":17,"path":["object","macho","MachHeader64"],"kind":"struct"},"17:16165:7048":{"crate_id":17,"path":["object","xcoff","FunAux32"],"kind":"struct"},"16:5686:7106":{"crate_id":16,"path":["gimli","read","addr","DebugAddr"],"kind":"struct"},"14:187:22937":{"crate_id":14,"path":["rustc_demangle","SizeLimitedFmtAdapter"],"kind":"struct"},"6:7485:8445":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user_regs_struct"],"kind":"struct"},"24:3328:4204":{"crate_id":24,"path":["syn","token","If"],"kind":"struct"},"17:12824:23949":{"crate_id":17,"path":["object","read","SymbolSection"],"kind":"enum"},"6:5290:7943":{"crate_id":6,"path":["libc","unix","linux_like","linux","can_filter"],"kind":"struct"},"1:11251:9077":{"crate_id":1,"path":["std","sys","pal","unix","time","SystemTime"],"kind":"struct"},"17:14079:6473":{"crate_id":17,"path":["object","macho","ThreadCommand"],"kind":"struct"},"2:2954:77":{"crate_id":2,"path":["core","convert","AsRef"],"kind":"trait"},"6:5212:7904":{"crate_id":6,"path":["libc","unix","linux_like","linux","genlmsghdr"],"kind":"struct"},"2:41813:170":{"crate_id":2,"path":["core","net","ip_addr","IpAddr"],"kind":"enum"},"6:8300:8541":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_barrier_t"],"kind":"struct"},"2:11214:3952":{"crate_id":2,"path":["core","slice","iter","IterMut"],"kind":"struct"},"24:1941:2594":{"crate_id":24,"path":["syn","parse_quote"],"kind":"macro"},"2:41867:11189":{"crate_id":2,"path":["core","net","ip_addr","Ipv6MulticastScope"],"kind":"enum"},"24:5971:3939":{"crate_id":24,"path":["syn","ty","TypeTuple"],"kind":"struct"},"6:5382:7975":{"crate_id":6,"path":["libc","unix","linux_like","linux","file_clone_range"],"kind":"struct"},"1:10938:9586":{"crate_id":1,"path":["std","sys","pal","unix","fs","FilePermissions"],"kind":"struct"},"16:7144:23868":{"crate_id":16,"path":["gimli","read","op","DieReference"],"kind":"enum"},"2:22708:11424":{"crate_id":2,"path":["core","core_simd","simd","cmp","ord","SimdOrd"],"kind":"trait"},"23:38:3581":{"crate_id":23,"path":["quote","format_ident"],"kind":"macro"},"24:5545:3906":{"crate_id":24,"path":["syn","generics","PredicateLifetime"],"kind":"struct"},"6:6597:8246":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ntptimeval"],"kind":"struct"},"24:3124:2899":{"crate_id":24,"path":["syn","token","Const"],"kind":"struct"},"16:5756:23854":{"crate_id":16,"path":["gimli","read","cfi","EhHdrTableIter"],"kind":"struct"},"17:15313:6807":{"crate_id":17,"path":["object","pe","ImageImportDescriptor"],"kind":"struct"},"17:10905:23946":{"crate_id":17,"path":["object","read","any","SectionRelocationIterator"],"kind":"struct"},"6:6811:8323":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_data"],"kind":"union"},"5:7449:3947":{"crate_id":5,"path":["alloc","collections","btree","set","IntoIter"],"kind":"struct"},"5:1168:36242":{"crate_id":5,"path":["alloc","collections","btree","append","MergeIter"],"kind":"struct"},"2:23059:9451":{"crate_id":2,"path":["core","num","fmt","Formatted"],"kind":"struct"},"6:523:7536":{"crate_id":6,"path":["libc","unix","hostent"],"kind":"struct"},"11:1107:22919":{"crate_id":11,"path":["hashbrown","map","OccupiedEntryRef"],"kind":"struct"},"17:11392:23997":{"crate_id":17,"path":["object","read","elf","section","ElfSectionIterator"],"kind":"struct"},"1:11513:5878":{"crate_id":1,"path":["std","sys","sync","once","futex","CompletionGuard"],"kind":"struct"},"24:3430:3202":{"crate_id":24,"path":["syn","token","Match"],"kind":"struct"},"11:364:5758":{"crate_id":11,"path":["hashbrown","raw","RawIntoIter"],"kind":"struct"},"17:13526:6362":{"crate_id":17,"path":["object","elf","Verdaux"],"kind":"struct"},"24:693:3947":{"crate_id":24,"path":["syn","error","IntoIter"],"kind":"struct"},"17:14587:6570":{"crate_id":17,"path":["object","macho","RelocationInfo"],"kind":"struct"},"6:4979:7831":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_constant_effect"],"kind":"struct"},"24:2608:11139":{"crate_id":24,"path":["syn","spanned","private","Sealed"],"kind":"trait"},"24:3056:4195":{"crate_id":24,"path":["syn","token","Await"],"kind":"struct"},"20:825:2507":{"crate_id":20,"path":["proc_macro2","imp","Group"],"kind":"enum"},"5:5230:5795":{"crate_id":5,"path":["alloc","rc","Weak"],"kind":"struct"},"2:3654:254":{"crate_id":2,"path":["core","ops","try_trait","Try"],"kind":"trait"},"6:5665:8109":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_txtime"],"kind":"struct"},"6:5598:8075":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_ifr_ifru"],"kind":"union"},"16:5914:9263":{"crate_id":16,"path":["gimli","read","cfi","AugmentationData"],"kind":"struct"},"2:40687:11116":{"crate_id":2,"path":["core","ffi","VaList"],"kind":"struct"},"17:15281:6799":{"crate_id":17,"path":["object","pe","ImageThunkData32"],"kind":"struct"},"1:9283:115":{"crate_id":1,"path":["std","sync","mpmc","context","Context"],"kind":"struct"},"1:5582:11286":{"crate_id":1,"path":["std","process","Child"],"kind":"struct"},"24:3277:4202":{"crate_id":24,"path":["syn","token","Final"],"kind":"struct"},"17:10419:6148":{"crate_id":17,"path":["object","read","util","ByteString"],"kind":"struct"}},"external_crates":{"23":{"name":"quote","html_root_url":"https://docs.rs/quote/1.0.36/"},"20":{"name":"proc_macro2","html_root_url":"https://docs.rs/proc-macro2/1.0.82/"},"17":{"name":"object","html_root_url":"https://doc.rust-lang.org/nightly/"},"14":{"name":"rustc_demangle","html_root_url":"https://doc.rust-lang.org/nightly/"},"11":{"name":"hashbrown","html_root_url":"https://doc.rust-lang.org/nightly/"},"8":{"name":"cfg_if","html_root_url":"https://docs.rs/cfg-if/"},"5":{"name":"alloc","html_root_url":"https://doc.rust-lang.org/nightly/"},"2":{"name":"core","html_root_url":"https://doc.rust-lang.org/nightly/"},"22":{"name":"unicode_ident","html_root_url":"https://docs.rs/unicode-ident/1.0.12/"},"19":{"name":"panic_unwind","html_root_url":"https://doc.rust-lang.org/nightly/"},"16":{"name":"gimli","html_root_url":"https://doc.rust-lang.org/nightly/"},"13":{"name":"std_detect","html_root_url":"https://doc.rust-lang.org/nightly/"},"10":{"name":"adler","html_root_url":"https://docs.rs/adler/1.0.2/"},"7":{"name":"unwind","html_root_url":"https://doc.rust-lang.org/nightly/"},"4":{"name":"rustc_std_workspace_core","html_root_url":"https://doc.rust-lang.org/nightly/"},"1":{"name":"std","html_root_url":"https://doc.rust-lang.org/nightly/"},"24":{"name":"syn","html_root_url":"https://docs.rs/syn/2.0.63/"},"21":{"name":"proc_macro","html_root_url":"https://doc.rust-lang.org/nightly/"},"18":{"name":"memchr","html_root_url":"https://doc.rust-lang.org/nightly/"},"15":{"name":"addr2line","html_root_url":"https://doc.rust-lang.org/nightly/"},"12":{"name":"rustc_std_workspace_alloc","html_root_url":"https://doc.rust-lang.org/nightly/"},"9":{"name":"miniz_oxide","html_root_url":"https://doc.rust-lang.org/nightly/"},"6":{"name":"libc","html_root_url":"https://doc.rust-lang.org/nightly/"},"3":{"name":"compiler_builtins","html_root_url":"https://doc.rust-lang.org/nightly/"}},"format_version":29}