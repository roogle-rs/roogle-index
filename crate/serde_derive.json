{"root":"0:0:1835","crate_version":"1.0.193","includes_private":false,"index":{"0:493-0:404:1959":{"id":"0:493-0:404:1959","crate_id":0,"name":null,"span":{"filename":"src/internals/mod.rs","begin":[14,0],"end":[14,41]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"import":{"source":"self::receiver::replace_receiver","name":"replace_receiver","id":"0:404:1959","glob":false}}},"2:12809:34151":{"id":"2:12809:34151","crate_id":2,"name":"trim_start","span":null,"visibility":"public","docs":"Returns a string slice with leading whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Text directionality\n\nA string is a sequence of bytes. `start` in this context means the first\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be left side, and for right-to-left languages like\nArabic or Hebrew, this will be the right side.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\nassert_eq!(\"Hello\\tworld\\t\\n\", s.trim_start());\n```\n\nDirectionality:\n\n```\nlet s = \"  English  \";\nassert!(Some('E') == s.trim_start().chars().next());\n\nlet s = \"  עברית  \";\nassert!(Some('ע') == s.trim_start().chars().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_trim_start\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5533:34818":{"id":"5:5533:34818","crate_id":5,"name":"to_lowercase","span":null,"visibility":"public","docs":"Returns the lowercase equivalent of this string slice, as a new [`String`].\n\n'Lowercase' is defined according to the terms of the Unicode Derived Core Property\n`Lowercase`.\n\nSince some characters can expand into multiple characters when changing\nthe case, this function returns a [`String`] instead of modifying the\nparameter in-place.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"HELLO\";\n\nassert_eq!(\"hello\", s.to_lowercase());\n```\n\nA tricky example, with sigma:\n\n```\nlet sigma = \"Σ\";\n\nassert_eq!(\"σ\", sigma.to_lowercase());\n\n// but at the end of a word, it's ς, not σ:\nlet odysseus = \"ὈΔΥΣΣΕΎΣ\";\n\nassert_eq!(\"ὀδυσσεύς\", odysseus.to_lowercase());\n```\n\nLanguages without case are not changed:\n\n```\nlet new_year = \"农历新年\";\n\nassert_eq!(new_year, new_year.to_lowercase());\n```","links":{"`String`":"5:7524:249"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the lowercase string as a new String, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7524:249","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12764:4350":{"id":"2:12764:4350","crate_id":2,"name":"rfind","span":null,"visibility":"public","docs":"Returns the byte index for the first character of the last match of the pattern in\nthis string slice.\n\nReturns [`None`] if the pattern doesn't match.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nlet s = \"Löwe 老虎 Léopard Gepardi\";\n\nassert_eq!(s.rfind('L'), Some(13));\nassert_eq!(s.rfind('é'), Some(14));\nassert_eq!(s.rfind(\"pard\"), Some(24));\n```\n\nMore complex patterns with closures:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\n\nassert_eq!(s.rfind(char::is_whitespace), Some(12));\nassert_eq!(s.rfind(char::is_lowercase), Some(20));\n```\n\nNot finding the pattern:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\nlet x: &[_] = &['1', '2'];\n\nassert_eq!(s.rfind(x), None);\n```","links":{"`None`":"2:41931:197","prim@char":"1:12034:448","self::pattern":"2:12415:3804"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:41929:200","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12420:15639","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12420:15639","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12435:15640","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12801:34148":{"id":"2:12801:34148","crate_id":2,"name":"match_indices","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within this string\nslice as well as the index that the match starts at.\n\nFor matches of `pat` within `self` that overlap, only the indices\ncorresponding to the first match are returned.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rmatch_indices`] method can be used.\n\n[`rmatch_indices`]: str::rmatch_indices\n\n# Examples\n\n```\nlet v: Vec<_> = \"abcXXXabcYYYabc\".match_indices(\"abc\").collect();\nassert_eq!(v, [(0, \"abc\"), (6, \"abc\"), (12, \"abc\")]);\n\nlet v: Vec<_> = \"1abcabc2\".match_indices(\"abc\").collect();\nassert_eq!(v, [(1, \"abc\"), (4, \"abc\")]);\n\nlet v: Vec<_> = \"ababa\".match_indices(\"aba\").collect();\nassert_eq!(v, [(0, \"aba\")]); // only the first `aba`\n```","links":{"self::pattern":"2:12415:3804","`DoubleEndedIterator`":"2:7785:127","prim@char":"1:12034:448","str::rmatch_indices":"2:12804:34149"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"MatchIndices","id":"2:44001:9672","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12420:15639","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12749:34144":{"id":"2:12749:34144","crate_id":2,"name":"lines_any","span":null,"visibility":"public","docs":"An iterator over the lines of a string.","links":{},"attrs":["#[deprecated(since = \"1.4.0\", note = \"use lines() instead now\", suggestion =\n\"lines\")]"],"deprecation":{"since":"1.4.0","note":"use lines() instead now"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"LinesAny","id":"2:44115:9678","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12830:34157":{"id":"2:12830:34157","crate_id":2,"name":"trim_left_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. 'Left' in this context means the first\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _right_ side, not the left.\n\n# Examples\n\n```\nassert_eq!(\"11foo1bar11\".trim_left_matches('1'), \"foo1bar11\");\nassert_eq!(\"123foo1bar123\".trim_left_matches(char::is_numeric), \"foo1bar123\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_left_matches(x), \"foo1bar12\");\n```","links":{"prim@char":"1:12034:448","self::pattern":"2:12415:3804"},"attrs":["#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_start_matches`\",\nsuggestion = \"trim_start_matches\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_start_matches`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12420:15639","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12724:34140":{"id":"2:12724:34140","crate_id":2,"name":"ceil_char_boundary","span":null,"visibility":"public","docs":"Finds the closest `x` not below `index` where `is_char_boundary(x)` is `true`.\n\nIf `index` is greater than the length of the string, this returns the length of the string.\n\nThis method is the natural complement to [`floor_char_boundary`]. See that method\nfor more details.\n\n[`floor_char_boundary`]: str::floor_char_boundary\n\n\n# Examples\n\n```\n#![feature(round_char_boundary)]\nlet s = \"❤️🧡💛💚💙💜\";\nassert_eq!(s.len(), 26);\nassert!(!s.is_char_boundary(13));\n\nlet closest = s.ceil_char_boundary(13);\nassert_eq!(closest, 14);\nassert_eq!(&s[..closest], \"❤️🧡💛\");\n```","links":{"str::floor_char_boundary":"2:12722:34139"},"attrs":["#[unstable(feature = \"round_char_boundary\", issue = \"93743\")]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["index",{"primitive":"usize"}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12733:27080":{"id":"2:12733:27080","crate_id":2,"name":"get_mut","span":null,"visibility":"public","docs":"Returns a mutable subslice of `str`.\n\nThis is the non-panicking alternative to indexing the `str`. Returns\n[`None`] whenever equivalent indexing operation would panic.\n\n# Examples\n\n```\nlet mut v = String::from(\"hello\");\n// correct length\nassert!(v.get_mut(0..5).is_some());\n// out of bounds\nassert!(v.get_mut(..42).is_none());\nassert_eq!(Some(\"he\"), v.get_mut(0..2).map(|v| &*v));\n\nassert_eq!(\"hello\", v);\n{\n    let s = v.get_mut(0..2);\n    let s = s.map(|s| {\n        s.make_ascii_uppercase();\n        &*s\n    });\n    assert_eq!(Some(\"HE\"), s);\n}\nassert_eq!(\"HEllo\", v);\n```","links":{"`None`":"2:41931:197"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"resolved_path":{"name":"Option","id":"2:41929:200","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"2:10500:245","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"2:10500:245","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12838:28266":{"id":"2:12838:28266","crate_id":2,"name":"is_ascii","span":null,"visibility":"public","docs":"Checks if all characters in this string are within the ASCII range.\n\n# Examples\n\n```\nlet ascii = \"hello!\\n\";\nlet non_ascii = \"Grüße, Jürgen ❤\";\n\nassert!(ascii.is_ascii());\nassert!(!non_ascii.is_ascii());\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12760:2730":{"id":"2:12760:2730","crate_id":2,"name":"find","span":null,"visibility":"public","docs":"Returns the byte index of the first character of this string slice that\nmatches the pattern.\n\nReturns [`None`] if the pattern doesn't match.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nlet s = \"Löwe 老虎 Léopard Gepardi\";\n\nassert_eq!(s.find('L'), Some(0));\nassert_eq!(s.find('é'), Some(14));\nassert_eq!(s.find(\"pard\"), Some(17));\n```\n\nMore complex patterns using point-free style and closures:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\n\nassert_eq!(s.find(char::is_whitespace), Some(5));\nassert_eq!(s.find(char::is_lowercase), Some(1));\nassert_eq!(s.find(|c: char| c.is_whitespace() || c.is_lowercase()), Some(1));\nassert_eq!(s.find(|c: char| (c < 'o') && (c > 'a')), Some(4));\n```\n\nNot finding the pattern:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\nlet x: &[_] = &['1', '2'];\n\nassert_eq!(s.find(x), None);\n```","links":{"`None`":"2:41931:197","prim@char":"1:12034:448","self::pattern":"2:12415:3804"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:41929:200","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12420:15639","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12839:28267":{"id":"2:12839:28267","crate_id":2,"name":"as_ascii","span":null,"visibility":"public","docs":"If this string slice [`is_ascii`](Self::is_ascii), returns it as a slice\nof [ASCII characters](`ascii::Char`), otherwise returns `None`.","links":{"`ascii::Char`":"2:39878:27035","Self::is_ascii":"2:12838:28266"},"attrs":["#[unstable(feature = \"ascii_char\", issue = \"110998\")]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Option","id":"2:41929:200","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"resolved_path":{"name":"AsciiChar","id":"2:39878:27035","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12735:27081":{"id":"2:12735:27081","crate_id":2,"name":"get_unchecked","span":null,"visibility":"public","docs":"Returns an unchecked subslice of `str`.\n\nThis is the unchecked alternative to indexing the `str`.\n\n# Safety\n\nCallers of this function are responsible that these preconditions are\nsatisfied:\n\n* The starting index must not exceed the ending index;\n* Indexes must be within bounds of the original slice;\n* Indexes must lie on UTF-8 sequence boundaries.\n\nFailing that, the returned string slice may reference invalid memory or\nviolate the invariants communicated by the `str` type.\n\n# Examples\n\n```\nlet v = \"🗻∈🌏\";\nunsafe {\n    assert_eq!(\"🗻\", v.get_unchecked(0..4));\n    assert_eq!(\"∈\", v.get_unchecked(4..7));\n    assert_eq!(\"🌏\", v.get_unchecked(7..11));\n}\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"2:10500:245","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"2:10500:245","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"2:12783:27119":{"id":"2:12783:27119","crate_id":2,"name":"splitn","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by a\npattern, restricted to returning at most `n` items.\n\nIf `n` substrings are returned, the last substring (the `n`th substring)\nwill contain the remainder of the string.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will not be double ended, because it is\nnot efficient to support.\n\nIf the pattern allows a reverse search, the [`rsplitn`] method can be\nused.\n\n[`rsplitn`]: str::rsplitn\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lambda\".splitn(3, ' ').collect();\nassert_eq!(v, [\"Mary\", \"had\", \"a little lambda\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".splitn(3, \"X\").collect();\nassert_eq!(v, [\"lion\", \"\", \"tigerXleopard\"]);\n\nlet v: Vec<&str> = \"abcXdef\".splitn(1, 'X').collect();\nassert_eq!(v, [\"abcXdef\"]);\n\nlet v: Vec<&str> = \"\".splitn(1, 'X').collect();\nassert_eq!(v, [\"\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".splitn(2, |c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"abc\", \"defXghi\"]);\n```","links":{"prim@char":"1:12034:448","self::pattern":"2:12415:3804","str::rsplitn":"2:12786:27121"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["n",{"primitive":"usize"}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"SplitN","id":"2:43955:9669","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12420:15639","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12718":{"id":"2:12718","crate_id":2,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":["#[cfg(not(test))]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"primitive":"str"},"items":["2:12719:867","2:12720:2178","2:12721:34138","2:12722:34139","2:12724:34140","2:12727:2940","2:12728:34141","2:12729:339","2:12730:27083","2:12731:2067","2:12733:27080","2:12735:27081","2:12737:27082","2:12739:34142","2:12740:34143","2:12741:2828","2:12742:27106","2:12743:2418","2:12744:2412","2:12745:9581","2:12746:32211","2:12747:32227","2:12748:29057","2:12749:34144","2:12750:32536","2:12751:2280","2:12754:26675","2:12757:26677","2:12760:2730","2:12764:4350","2:12768:27113","2:12771:27115","2:12774:27117","2:12777:34145","2:12780:34146","2:12783:27119","2:12786:27121","2:12789:27123","2:12792:27124","2:12795:2174","2:12798:34147","2:12801:34148","2:12804:34149","2:12807:34150","2:12809:34151","2:12811:34152","2:12813:34153","2:12814:34154","2:12815:34155","2:12818:2086","2:12821:26673","2:12824:27125","2:12827:34156","2:12830:34157","2:12833:34158","2:12836:2047","2:12838:28266","2:12839:28267","2:12840:28269","2:12841:28270","2:12842:28271","2:12843:34159","2:12845:10189","2:12846:34160"],"negative":false,"synthetic":false,"blanket_impl":null}}},"2:12741:2828":{"id":"2:12741:2828","crate_id":2,"name":"split_at","span":null,"visibility":"public","docs":"Divide one string slice into two at an index.\n\nThe argument, `mid`, should be a byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get mutable string slices instead, see the [`split_at_mut`]\nmethod.\n\n[`split_at_mut`]: str::split_at_mut\n\n# Panics\n\nPanics if `mid` is not on a UTF-8 code point boundary, or if it is\npast the end of the last code point of the string slice.\n\n# Examples\n\n```\nlet s = \"Per Martin-Löf\";\n\nlet (first, last) = s.split_at(3);\n\nassert_eq!(\"Per\", first);\nassert_eq!(\" Martin-Löf\", last);\n```","links":{"str::split_at_mut":"2:12742:27106"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["mid",{"primitive":"usize"}]],"output":{"tuple":[{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12771:27115":{"id":"2:12771:27115","crate_id":2,"name":"split_inclusive","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by\ncharacters matched by a pattern. Differs from the iterator produced by\n`split` in that `split_inclusive` leaves the matched part as the\nterminator of the substring.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\\nlittle lamb\\nlittle lamb.\"\n    .split_inclusive('\\n').collect();\nassert_eq!(v, [\"Mary had a little lamb\\n\", \"little lamb\\n\", \"little lamb.\"]);\n```\n\nIf the last element of the string is matched,\nthat element will be considered the terminator of the preceding substring.\nThat substring will be the last item returned by the iterator.\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\\nlittle lamb\\nlittle lamb.\\n\"\n    .split_inclusive('\\n').collect();\nassert_eq!(v, [\"Mary had a little lamb\\n\", \"little lamb\\n\", \"little lamb.\\n\"]);\n```","links":{"prim@char":"1:12034:448","self::pattern":"2:12415:3804"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"SplitInclusive","id":"2:12231:9592","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12420:15639","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12843:34159":{"id":"2:12843:34159","crate_id":2,"name":"escape_debug","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_debug`].\n\nNote: only extended grapheme codepoints that begin the string will be\nescaped.\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"❤\\n!\".escape_debug() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"❤\\n!\".escape_debug());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"❤\\\\n!\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"❤\\n!\".escape_debug().to_string(), \"❤\\\\n!\");\n```","links":{"`char::escape_debug`":"2:4615:34159"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EscapeDebug","id":"2:44150:9624","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12722:34139":{"id":"2:12722:34139","crate_id":2,"name":"floor_char_boundary","span":null,"visibility":"public","docs":"Finds the closest `x` not exceeding `index` where `is_char_boundary(x)` is `true`.\n\nThis method can help you truncate a string so that it's still valid UTF-8, but doesn't\nexceed a given number of bytes. Note that this is done purely at the character level\nand can still visually split graphemes, even though the underlying characters aren't\nsplit. For example, the emoji 🧑‍🔬 (scientist) could be split so that the string only\nincludes 🧑 (person) instead.\n\n# Examples\n\n```\n#![feature(round_char_boundary)]\nlet s = \"❤️🧡💛💚💙💜\";\nassert_eq!(s.len(), 26);\nassert!(!s.is_char_boundary(13));\n\nlet closest = s.floor_char_boundary(13);\nassert_eq!(closest, 10);\nassert_eq!(&s[..closest], \"❤️🧡\");\n```","links":{},"attrs":["#[unstable(feature = \"round_char_boundary\", issue = \"93743\")]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["index",{"primitive":"usize"}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12833:34158":{"id":"2:12833:34158","crate_id":2,"name":"trim_right_matches","span":null,"visibility":"public","docs":"Returns a string slice with all suffixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. 'Right' in this context means the last\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _left_ side, not the right.\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_right_matches('1'), \"11foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_right_matches(char::is_numeric), \"123foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_right_matches(x), \"12foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1fooX\".trim_right_matches(|c| c == '1' || c == 'X'), \"1foo\");\n```","links":{"prim@char":"1:12034:448","self::pattern":"2:12415:3804"},"attrs":["#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_end_matches`\",\nsuggestion = \"trim_end_matches\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_end_matches`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12420:15639","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12420:15639","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12435:15640","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12745:9581":{"id":"2:12745:9581","crate_id":2,"name":"bytes","span":null,"visibility":"public","docs":"An iterator over the bytes of a string slice.\n\nAs a string slice consists of a sequence of bytes, we can iterate\nthrough a string slice by byte. This method returns such an iterator.\n\n# Examples\n\n```\nlet mut bytes = \"bors\".bytes();\n\nassert_eq!(Some(b'b'), bytes.next());\nassert_eq!(Some(b'o'), bytes.next());\nassert_eq!(Some(b'r'), bytes.next());\nassert_eq!(Some(b's'), bytes.next());\n\nassert_eq!(None, bytes.next());\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Bytes","id":"2:43837:2950","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12811:34152":{"id":"2:12811:34152","crate_id":2,"name":"trim_end","span":null,"visibility":"public","docs":"Returns a string slice with trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Text directionality\n\nA string is a sequence of bytes. `end` in this context means the last\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be right side, and for right-to-left languages like\nArabic or Hebrew, this will be the left side.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\nassert_eq!(\"\\n Hello\\tworld\", s.trim_end());\n```\n\nDirectionality:\n\n```\nlet s = \"  English  \";\nassert!(Some('h') == s.trim_end().chars().rev().next());\n\nlet s = \"  עברית  \";\nassert!(Some('ת') == s.trim_end().chars().rev().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_trim_end\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12768:27113":{"id":"2:12768:27113","crate_id":2,"name":"split","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by\ncharacters matched by a pattern.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rsplit`] method can be used.\n\n[`rsplit`]: str::rsplit\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".split(' ').collect();\nassert_eq!(v, [\"Mary\", \"had\", \"a\", \"little\", \"lamb\"]);\n\nlet v: Vec<&str> = \"\".split('X').collect();\nassert_eq!(v, [\"\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".split('X').collect();\nassert_eq!(v, [\"lion\", \"\", \"tiger\", \"leopard\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".split(\"::\").collect();\nassert_eq!(v, [\"lion\", \"tiger\", \"leopard\"]);\n\nlet v: Vec<&str> = \"abc1def2ghi\".split(char::is_numeric).collect();\nassert_eq!(v, [\"abc\", \"def\", \"ghi\"]);\n\nlet v: Vec<&str> = \"lionXtigerXleopard\".split(char::is_uppercase).collect();\nassert_eq!(v, [\"lion\", \"tiger\", \"leopard\"]);\n```\n\nIf the pattern is a slice of chars, split on each occurrence of any of the characters:\n\n```\nlet v: Vec<&str> = \"2020-11-03 23:59\".split(&['-', ' ', ':', '@'][..]).collect();\nassert_eq!(v, [\"2020\", \"11\", \"03\", \"23\", \"59\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".split(|c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"abc\", \"def\", \"ghi\"]);\n```\n\nIf a string contains multiple contiguous separators, you will end up\nwith empty strings in the output:\n\n```\nlet x = \"||||a||b|c\".to_string();\nlet d: Vec<_> = x.split('|').collect();\n\nassert_eq!(d, &[\"\", \"\", \"\", \"\", \"a\", \"\", \"b\", \"c\"]);\n```\n\nContiguous separators are separated by the empty string.\n\n```\nlet x = \"(///)\".to_string();\nlet d: Vec<_> = x.split('/').collect();\n\nassert_eq!(d, &[\"(\", \"\", \"\", \")\"]);\n```\n\nSeparators at the start or end of a string are neighbored\nby empty strings.\n\n```\nlet d: Vec<_> = \"010\".split(\"0\").collect();\nassert_eq!(d, &[\"\", \"1\", \"\"]);\n```\n\nWhen the empty string is used as a separator, it separates\nevery character in the string, along with the beginning\nand end of the string.\n\n```\nlet f: Vec<_> = \"rust\".split(\"\").collect();\nassert_eq!(f, &[\"\", \"r\", \"u\", \"s\", \"t\", \"\"]);\n```\n\nContiguous separators can lead to possibly surprising behavior\nwhen whitespace is used as the separator. This code is correct:\n\n```\nlet x = \"    a  b c\".to_string();\nlet d: Vec<_> = x.split(' ').collect();\n\nassert_eq!(d, &[\"\", \"\", \"\", \"\", \"a\", \"\", \"b\", \"c\"]);\n```\n\nIt does _not_ give you:\n\n```,ignore\nassert_eq!(d, &[\"a\", \"b\", \"c\"]);\n```\n\nUse [`split_whitespace`] for this behavior.\n\n[`split_whitespace`]: str::split_whitespace","links":{"self::pattern":"2:12415:3804","`DoubleEndedIterator`":"2:7785:127","prim@char":"1:12034:448","str::split_whitespace":"2:12746:32211","str::rsplit":"2:12774:27117"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Split","id":"2:43851:9590","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12420:15639","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12777:34145":{"id":"2:12777:34145","crate_id":2,"name":"split_terminator","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by\ncharacters matched by a pattern.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\nEquivalent to [`split`], except that the trailing substring\nis skipped if empty.\n\n[`split`]: str::split\n\nThis method can be used for string data that is _terminated_,\nrather than _separated_ by a pattern.\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rsplit_terminator`] method can be used.\n\n[`rsplit_terminator`]: str::rsplit_terminator\n\n# Examples\n\n```\nlet v: Vec<&str> = \"A.B.\".split_terminator('.').collect();\nassert_eq!(v, [\"A\", \"B\"]);\n\nlet v: Vec<&str> = \"A..B..\".split_terminator(\".\").collect();\nassert_eq!(v, [\"A\", \"\", \"B\", \"\"]);\n\nlet v: Vec<&str> = \"A.B:C.D\".split_terminator(&['.', ':'][..]).collect();\nassert_eq!(v, [\"A\", \"B\", \"C\", \"D\"]);\n```","links":{"self::pattern":"2:12415:3804","str::split":"2:12768:27113","prim@char":"1:12034:448","`DoubleEndedIterator`":"2:7785:127","str::rsplit_terminator":"2:12780:34146"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"SplitTerminator","id":"2:43901:9666","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12420:15639","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:86-0:994:2052":{"id":"0:86-0:994:2052","crate_id":0,"name":null,"span":{"filename":"src/internals/attr.rs","begin":[21,0],"end":[21,43]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"import":{"source":"crate::internals::case::RenameRule","name":"RenameRule","id":"0:994:2052","glob":false}}},"2:12824:27125":{"id":"2:12824:27125","crate_id":2,"name":"strip_suffix","span":null,"visibility":"public","docs":"Returns a string slice with the suffix removed.\n\nIf the string ends with the pattern `suffix`, returns the substring before the suffix,\nwrapped in `Some`.  Unlike `trim_end_matches`, this method removes the suffix exactly once.\n\nIf the string does not end with `suffix`, returns `None`.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nassert_eq!(\"bar:foo\".strip_suffix(\":foo\"), Some(\"bar\"));\nassert_eq!(\"bar:foo\".strip_suffix(\"bar\"), None);\nassert_eq!(\"foofoo\".strip_suffix(\"foo\"), Some(\"foo\"));\n```","links":{"prim@char":"1:12034:448","self::pattern":"2:12415:3804"},"attrs":["#[must_use =\n\"this returns the remaining substring as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["suffix",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:41929:200","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12420:15639","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12420:15639","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12435:15640","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12840:28269":{"id":"2:12840:28269","crate_id":2,"name":"eq_ignore_ascii_case","span":null,"visibility":"public","docs":"Checks that two strings are an ASCII case-insensitive match.\n\nSame as `to_ascii_lowercase(a) == to_ascii_lowercase(b)`,\nbut without allocating and copying temporaries.\n\n# Examples\n\n```\nassert!(\"Ferris\".eq_ignore_ascii_case(\"FERRIS\"));\nassert!(\"Ferrös\".eq_ignore_ascii_case(\"FERRöS\"));\nassert!(!\"Ferrös\".eq_ignore_ascii_case(\"FERRÖS\"));\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["other",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12842:28271":{"id":"2:12842:28271","crate_id":2,"name":"make_ascii_lowercase","span":null,"visibility":"public","docs":"Converts this string to its ASCII lower case equivalent in-place.\n\nASCII letters 'A' to 'Z' are mapped to 'a' to 'z',\nbut non-ASCII letters are unchanged.\n\nTo return a new lowercased value without modifying the existing one, use\n[`to_ascii_lowercase()`].\n\n[`to_ascii_lowercase()`]: #method.to_ascii_lowercase\n\n# Examples\n\n```\nlet mut s = String::from(\"GRÜßE, JÜRGEN ❤\");\n\ns.make_ascii_lowercase();\n\nassert_eq!(\"grÜße, jÜrgen ❤\", s);\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12721:34138":{"id":"2:12721:34138","crate_id":2,"name":"is_char_boundary","span":null,"visibility":"public","docs":"Checks that `index`-th byte is the first byte in a UTF-8 code point\nsequence or the end of the string.\n\nThe start and end of the string (when `index == self.len()`) are\nconsidered to be boundaries.\n\nReturns `false` if `index` is greater than `self.len()`.\n\n# Examples\n\n```\nlet s = \"Löwe 老虎 Léopard\";\nassert!(s.is_char_boundary(0));\n// start of `老`\nassert!(s.is_char_boundary(6));\nassert!(s.is_char_boundary(s.len()));\n\n// second byte of `ö`\nassert!(!s.is_char_boundary(2));\n\n// third byte of `老`\nassert!(!s.is_char_boundary(8));\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["index",{"primitive":"usize"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5527:2208":{"id":"5:5527:2208","crate_id":5,"name":"replace","span":null,"visibility":"public","docs":"Replaces all matches of a pattern with another string.\n\n`replace` creates a new [`String`], and copies the data from this string slice into it.\nWhile doing so, it attempts to find matches of a pattern. If it finds any, it\nreplaces them with the replacement string slice.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"this is old\";\n\nassert_eq!(\"this is new\", s.replace(\"old\", \"new\"));\nassert_eq!(\"than an old\", s.replace(\"is\", \"an\"));\n```\n\nWhen the pattern doesn't match, it returns this string slice as [`String`]:\n\n```\nlet s = \"this is old\";\nassert_eq!(s, s.replace(\"cookie monster\", \"little lamb\"));\n```","links":{"`String`":"5:7524:249"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the replaced string as a new allocation, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["from",{"generic":"P"}],["to",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7524:249","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12420:15639","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5525":{"id":"5:5525","crate_id":5,"name":null,"span":null,"visibility":"default","docs":"Methods for string slices.","links":{},"attrs":["#[cfg(not(test))]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"primitive":"str"},"items":["5:5526:34816","5:5527:2208","5:5530:34817","5:5533:34818","5:5541:34819","5:5542:34820","5:5543:3469","5:5544:2409","5:5545:2408"],"negative":false,"synthetic":false,"blanket_impl":null}}},"2:12731:2067":{"id":"2:12731:2067","crate_id":2,"name":"get","span":null,"visibility":"public","docs":"Returns a subslice of `str`.\n\nThis is the non-panicking alternative to indexing the `str`. Returns\n[`None`] whenever equivalent indexing operation would panic.\n\n# Examples\n\n```\nlet v = String::from(\"🗻∈🌏\");\n\nassert_eq!(Some(\"🗻\"), v.get(0..4));\n\n// indices not on UTF-8 sequence boundaries\nassert!(v.get(1..).is_none());\nassert!(v.get(..8).is_none());\n\n// out of bounds\nassert!(v.get(..42).is_none());\n```","links":{"`None`":"2:41931:197"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"resolved_path":{"name":"Option","id":"2:41929:200","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"2:10500:245","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"2:10500:245","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:63:373":{"id":"0:63:373","crate_id":0,"name":"attr","span":{"filename":"src/internals/attr.rs","begin":[1,0],"end":[1878,1]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"module":{"is_crate":false,"items":["0:86-0:994:2052"],"is_stripped":false}}},"2:12807:34150":{"id":"2:12807:34150","crate_id":2,"name":"trim","span":null,"visibility":"public","docs":"Returns a string slice with leading and trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Examples\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\n\nassert_eq!(\"Hello\\tworld\", s.trim());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a slice, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_trim\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12841:28270":{"id":"2:12841:28270","crate_id":2,"name":"make_ascii_uppercase","span":null,"visibility":"public","docs":"Converts this string to its ASCII upper case equivalent in-place.\n\nASCII letters 'a' to 'z' are mapped to 'A' to 'Z',\nbut non-ASCII letters are unchanged.\n\nTo return a new uppercased value without modifying the existing one, use\n[`to_ascii_uppercase()`].\n\n[`to_ascii_uppercase()`]: #method.to_ascii_uppercase\n\n# Examples\n\n```\nlet mut s = String::from(\"Grüße, Jürgen ❤\");\n\ns.make_ascii_uppercase();\n\nassert_eq!(\"GRüßE, JüRGEN ❤\", s);\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12720:2178":{"id":"2:12720:2178","crate_id":2,"name":"is_empty","span":null,"visibility":"public","docs":"Returns `true` if `self` has a length of zero bytes.\n\n# Examples\n\n```\nlet s = \"\";\nassert!(s.is_empty());\n\nlet s = \"not empty\";\nassert!(!s.is_empty());\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12792:27124":{"id":"2:12792:27124","crate_id":2,"name":"rsplit_once","span":null,"visibility":"public","docs":"Splits the string on the last occurrence of the specified delimiter and\nreturns prefix before delimiter and suffix after delimiter.\n\n# Examples\n\n```\nassert_eq!(\"cfg\".rsplit_once('='), None);\nassert_eq!(\"cfg=foo\".rsplit_once('='), Some((\"cfg\", \"foo\")));\nassert_eq!(\"cfg=foo=bar\".rsplit_once('='), Some((\"cfg=foo\", \"bar\")));\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["delimiter",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:41929:200","args":{"angle_bracketed":{"args":[{"type":{"tuple":[{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12420:15639","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12420:15639","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12435:15640","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12813:34153":{"id":"2:12813:34153","crate_id":2,"name":"trim_left","span":null,"visibility":"public","docs":"Returns a string slice with leading whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`.\n\n# Text directionality\n\nA string is a sequence of bytes. 'Left' in this context means the first\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _right_ side, not the left.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \" Hello\\tworld\\t\";\n\nassert_eq!(\"Hello\\tworld\\t\", s.trim_left());\n```\n\nDirectionality:\n\n```\nlet s = \"  English\";\nassert!(Some('E') == s.trim_left().chars().next());\n\nlet s = \"  עברית\";\nassert!(Some('ע') == s.trim_left().chars().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_start`\", suggestion\n= \"trim_start\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_start`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12728:34141":{"id":"2:12728:34141","crate_id":2,"name":"as_bytes_mut","span":null,"visibility":"public","docs":"Converts a mutable string slice to a mutable byte slice.\n\n# Safety\n\nThe caller must ensure that the content of the slice is valid UTF-8\nbefore the borrow ends and the underlying `str` is used.\n\nUse of a `str` whose contents are not valid UTF-8 is undefined behavior.\n\n# Examples\n\nBasic usage:\n\n```\nlet mut s = String::from(\"Hello\");\nlet bytes = unsafe { s.as_bytes_mut() };\n\nassert_eq!(b\"Hello\", bytes);\n```\n\nMutability:\n\n```\nlet mut s = String::from(\"🗻∈🌏\");\n\nunsafe {\n    let bytes = s.as_bytes_mut();\n\n    bytes[0] = 0xF0;\n    bytes[1] = 0x9F;\n    bytes[2] = 0x8D;\n    bytes[3] = 0x94;\n}\n\nassert_eq!(\"🍔∈🌏\", s);\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"slice":{"primitive":"u8"}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"2:12754:26675":{"id":"2:12754:26675","crate_id":2,"name":"starts_with","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a prefix of this\nstring slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.starts_with(\"bana\"));\nassert!(!bananas.starts_with(\"nana\"));\n```","links":{"prim@char":"1:12034:448","self::pattern":"2:12415:3804"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12420:15639","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12814:34154":{"id":"2:12814:34154","crate_id":2,"name":"trim_right","span":null,"visibility":"public","docs":"Returns a string slice with trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`.\n\n# Text directionality\n\nA string is a sequence of bytes. 'Right' in this context means the last\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _left_ side, not the right.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \" Hello\\tworld\\t\";\n\nassert_eq!(\" Hello\\tworld\", s.trim_right());\n```\n\nDirectionality:\n\n```\nlet s = \"English  \";\nassert!(Some('h') == s.trim_right().chars().rev().next());\n\nlet s = \"עברית  \";\nassert!(Some('ת') == s.trim_right().chars().rev().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_end`\", suggestion =\n\"trim_end\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_end`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12730:27083":{"id":"2:12730:27083","crate_id":2,"name":"as_mut_ptr","span":null,"visibility":"public","docs":"Converts a mutable string slice to a raw pointer.\n\nAs string slices are a slice of bytes, the raw pointer points to a\n[`u8`]. This pointer will be pointing to the first byte of the string\nslice.\n\nIt is your responsibility to make sure that the string slice only gets\nmodified in a way that it remains valid UTF-8.","links":{"`u8`":"1:12051:1634"},"attrs":["#[rustc_never_returns_null_ptr]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"raw_pointer":{"mutable":true,"type":{"primitive":"u8"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:1023:2055":{"id":"0:1023:2055","crate_id":0,"name":"Symbol","span":{"filename":"src/internals/symbol.rs","begin":[5,0],"end":[5,32]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"struct":{"kind":{"tuple":[null]},"generics":{"params":[],"where_predicates":[]},"impls":[]}}},"2:12774:27117":{"id":"2:12774:27117","crate_id":2,"name":"rsplit","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by\ncharacters matched by a pattern and yielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`split`] method can be used.\n\n[`split`]: str::split\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".rsplit(' ').collect();\nassert_eq!(v, [\"lamb\", \"little\", \"a\", \"had\", \"Mary\"]);\n\nlet v: Vec<&str> = \"\".rsplit('X').collect();\nassert_eq!(v, [\"\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".rsplit('X').collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"\", \"lion\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".rsplit(\"::\").collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"lion\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".rsplit(|c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"ghi\", \"def\", \"abc\"]);\n```","links":{"self::pattern":"2:12415:3804","`DoubleEndedIterator`":"2:7785:127","prim@char":"1:12034:448","str::split":"2:12768:27113"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RSplit","id":"2:43869:9593","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12420:15639","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12420:15639","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12435:15640","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:0:1835":{"id":"0:0:1835","crate_id":0,"name":"serde_derive","span":{"filename":"src/lib.rs","begin":[1,0],"end":[102,1]},"visibility":"public","docs":"This crate provides Serde's two derive macros.\n\n```edition2021\n# use serde_derive::{Deserialize, Serialize};\n#\n#[derive(Serialize, Deserialize)]\n# struct S;\n#\n# fn main() {}\n```\n\nPlease refer to [https://serde.rs/derive.html] for how to set this up.\n\n[https://serde.rs/derive.html]: https://serde.rs/derive.html","links":{},"attrs":["#![doc(html_root_url = \"https://docs.rs/serde_derive/1.0.193\")]","#![allow(clippy :: branches_sharing_code, clippy :: cognitive_complexity,\nclippy :: collapsible_match, clippy :: derive_partial_eq_without_eq, clippy ::\nenum_variant_names, clippy :: manual_map, clippy :: match_like_matches_macro,\nclippy :: needless_pass_by_value, clippy :: too_many_arguments, clippy ::\ntrivially_copy_pass_by_ref, clippy :: used_underscore_binding, clippy ::\nwildcard_in_or_patterns, clippy :: unnested_or_patterns,)]","#![allow(clippy :: cast_possible_truncation, clippy :: checked_conversions,\nclippy :: doc_markdown, clippy :: enum_glob_use, clippy :: indexing_slicing,\nclippy :: items_after_statements, clippy :: let_underscore_untyped, clippy ::\nmanual_assert, clippy :: map_err_ignore, clippy :: match_same_arms, clippy ::\nmatch_wildcard_for_single_variants, clippy :: module_name_repetitions, clippy\n:: must_use_candidate, clippy :: option_if_let_else, clippy :: similar_names,\nclippy :: single_match_else, clippy :: struct_excessive_bools, clippy ::\ntoo_many_lines, clippy :: unseparated_literal_suffix, clippy :: unused_self,\nclippy :: use_self, clippy :: wildcard_imports)]"],"deprecation":null,"inner":{"module":{"is_crate":true,"items":["0:964:1824","0:965:1832"],"is_stripped":false}}},"0:964:1824":{"id":"0:964:1824","crate_id":0,"name":"Serialize","span":{"filename":"src/lib.rs","begin":[89,0],"end":[94,1]},"visibility":"public","docs":null,"links":{},"attrs":["#[proc_macro_derive(Serialize, attributes(serde))]"],"deprecation":null,"inner":{"proc_macro":{"kind":"derive","helpers":["serde"]}}},"0:965:1832":{"id":"0:965:1832","crate_id":0,"name":"Deserialize","span":{"filename":"src/lib.rs","begin":[97,0],"end":[102,1]},"visibility":"public","docs":null,"links":{},"attrs":["#[proc_macro_derive(Deserialize, attributes(serde))]"],"deprecation":null,"inner":{"proc_macro":{"kind":"derive","helpers":["serde"]}}},"2:12795:2174":{"id":"2:12795:2174","crate_id":2,"name":"matches","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within the given string\nslice.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rmatches`] method can be used.\n\n[`rmatches`]: str::rmatches\n\n# Examples\n\n```\nlet v: Vec<&str> = \"abcXXXabcYYYabc\".matches(\"abc\").collect();\nassert_eq!(v, [\"abc\", \"abc\", \"abc\"]);\n\nlet v: Vec<&str> = \"1abc2abc3\".matches(char::is_numeric).collect();\nassert_eq!(v, [\"1\", \"2\", \"3\"]);\n```","links":{"self::pattern":"2:12415:3804","`DoubleEndedIterator`":"2:7785:127","prim@char":"1:12034:448","str::rmatches":"2:12798:34147"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Matches","id":"2:44055:9675","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12420:15639","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12798:34147":{"id":"2:12798:34147","crate_id":2,"name":"rmatches","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within this string slice,\nyielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`matches`] method can be used.\n\n[`matches`]: str::matches\n\n# Examples\n\n```\nlet v: Vec<&str> = \"abcXXXabcYYYabc\".rmatches(\"abc\").collect();\nassert_eq!(v, [\"abc\", \"abc\", \"abc\"]);\n\nlet v: Vec<&str> = \"1abc2abc3\".rmatches(char::is_numeric).collect();\nassert_eq!(v, [\"3\", \"2\", \"1\"]);\n```","links":{"self::pattern":"2:12415:3804","`DoubleEndedIterator`":"2:7785:127","prim@char":"1:12034:448","str::matches":"2:12795:2174"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RMatches","id":"2:44073:9676","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12420:15639","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12420:15639","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12435:15640","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12729:339":{"id":"2:12729:339","crate_id":2,"name":"as_ptr","span":null,"visibility":"public","docs":"Converts a string slice to a raw pointer.\n\nAs string slices are a slice of bytes, the raw pointer points to a\n[`u8`]. This pointer will be pointing to the first byte of the string\nslice.\n\nThe caller must ensure that the returned pointer is never written to.\nIf you need to mutate the contents of the string slice, use [`as_mut_ptr`].\n\n[`as_mut_ptr`]: str::as_mut_ptr\n\n# Examples\n\n```\nlet s = \"Hello\";\nlet ptr = s.as_ptr();\n```","links":{"str::as_mut_ptr":"2:12730:27083","`u8`":"1:12051:1634"},"attrs":["#[rustc_never_returns_null_ptr]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"raw_pointer":{"mutable":false,"type":{"primitive":"u8"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5526:34816":{"id":"5:5526:34816","crate_id":5,"name":"into_boxed_bytes","span":null,"visibility":"public","docs":"Converts a `Box<str>` into a `Box<[u8]>` without copying or allocating.\n\n# Examples\n\n```\nlet s = \"this is a string\";\nlet boxed_str = s.to_owned().into_boxed_str();\nlet boxed_bytes = boxed_str.into_boxed_bytes();\nassert_eq!(*boxed_bytes, *s.as_bytes());\n```","links":{},"attrs":["#[must_use = \"`self` will be dropped if the result is not used\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"resolved_path":{"name":"Box","id":"5:276:2022","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}]],"output":{"resolved_path":{"name":"Box","id":"5:276:2022","args":{"angle_bracketed":{"args":[{"type":{"slice":{"primitive":"u8"}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12727:2940":{"id":"2:12727:2940","crate_id":2,"name":"as_bytes","span":null,"visibility":"public","docs":"Converts a string slice to a byte slice. To convert the byte slice back\ninto a string slice, use the [`from_utf8`] function.\n\n# Examples\n\n```\nlet bytes = \"bors\".as_bytes();\nassert_eq!(b\"bors\", bytes);\n```","links":{"`from_utf8`":"2:11970:15642"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"primitive":"u8"}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5545:2408":{"id":"5:5545:2408","crate_id":5,"name":"to_ascii_lowercase","span":null,"visibility":"public","docs":"Returns a copy of this string where each character is mapped to its\nASCII lower case equivalent.\n\nASCII letters 'A' to 'Z' are mapped to 'a' to 'z',\nbut non-ASCII letters are unchanged.\n\nTo lowercase the value in-place, use [`make_ascii_lowercase`].\n\nTo lowercase ASCII characters in addition to non-ASCII characters, use\n[`to_lowercase`].\n\n# Examples\n\n```\nlet s = \"Grüße, Jürgen ❤\";\n\nassert_eq!(\"grüße, jürgen ❤\", s.to_ascii_lowercase());\n```\n\n[`make_ascii_lowercase`]: str::make_ascii_lowercase\n[`to_lowercase`]: #method.to_lowercase","links":{"str::make_ascii_lowercase":"2:12842:28271"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use = \"to lowercase the value in-place, use `make_ascii_lowercase()`\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7524:249","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12750:32536":{"id":"2:12750:32536","crate_id":2,"name":"encode_utf16","span":null,"visibility":"public","docs":"Returns an iterator of `u16` over the string encoded as UTF-16.\n\n# Examples\n\n```\nlet text = \"Zażółć gęślą jaźń\";\n\nlet utf8_len = text.len();\nlet utf16_len = text.encode_utf16().count();\n\nassert!(utf16_len <= utf8_len);\n```","links":{},"attrs":["#[must_use =\n\"this returns the encoded string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EncodeUtf16","id":"2:44143:9681","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12836:2047":{"id":"2:12836:2047","crate_id":2,"name":"parse","span":null,"visibility":"public","docs":"Parses this string slice into another type.\n\nBecause `parse` is so general, it can cause problems with type\ninference. As such, `parse` is one of the few times you'll see\nthe syntax affectionately known as the 'turbofish': `::<>`. This\nhelps the inference algorithm understand specifically which type\nyou're trying to parse into.\n\n`parse` can parse into any type that implements the [`FromStr`] trait.\n\n# Errors\n\nWill return [`Err`] if it's not possible to parse this string slice into\nthe desired type.\n\n[`Err`]: FromStr::Err\n\n# Examples\n\nBasic usage\n\n```\nlet four: u32 = \"4\".parse().unwrap();\n\nassert_eq!(4, four);\n```\n\nUsing the 'turbofish' instead of annotating `four`:\n\n```\nlet four = \"4\".parse::<u32>();\n\nassert_eq!(Ok(4), four);\n```\n\nFailing to parse:\n\n```\nlet nope = \"j\".parse::<u32>();\n\nassert!(nope.is_err());\n```","links":{"FromStr::Err":"2:12376:133","`FromStr`":"2:12375:3425"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Result","id":"2:42074:232","args":{"angle_bracketed":{"args":[{"type":{"generic":"F"}},{"type":{"qualified_path":{"name":"Err","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"F"},"trait":{"name":"FromStr","id":"2:12375:3425","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"F"},"bounds":[{"trait_bound":{"trait":{"name":"FromStr","id":"2:12375:3425","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12719:867":{"id":"2:12719:867","crate_id":2,"name":"len","span":null,"visibility":"public","docs":"Returns the length of `self`.\n\nThis length is in bytes, not [`char`]s or graphemes. In other words,\nit might not be what a human considers the length of the string.\n\n[`char`]: prim@char\n\n# Examples\n\n```\nlet len = \"foo\".len();\nassert_eq!(3, len);\n\nassert_eq!(\"ƒoo\".len(), 4); // fancy f!\nassert_eq!(\"ƒoo\".chars().count(), 3);\n```","links":{"prim@char":"1:12034:448"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12747:32227":{"id":"2:12747:32227","crate_id":2,"name":"split_ascii_whitespace","span":null,"visibility":"public","docs":"Splits a string slice by ASCII whitespace.\n\nThe iterator returned will return string slices that are sub-slices of\nthe original string slice, separated by any amount of ASCII whitespace.\n\nTo split by Unicode `Whitespace` instead, use [`split_whitespace`].\n\n[`split_whitespace`]: str::split_whitespace\n\n# Examples\n\nBasic usage:\n\n```\nlet mut iter = \"A few words\".split_ascii_whitespace();\n\nassert_eq!(Some(\"A\"), iter.next());\nassert_eq!(Some(\"few\"), iter.next());\nassert_eq!(Some(\"words\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nAll kinds of ASCII whitespace are considered:\n\n```\nlet mut iter = \" Mary   had\\ta little  \\n\\t lamb\".split_ascii_whitespace();\nassert_eq!(Some(\"Mary\"), iter.next());\nassert_eq!(Some(\"had\"), iter.next());\nassert_eq!(Some(\"a\"), iter.next());\nassert_eq!(Some(\"little\"), iter.next());\nassert_eq!(Some(\"lamb\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nIf the string is empty or all ASCII whitespace, the iterator yields no string slices:\n```\nassert_eq!(\"\".split_ascii_whitespace().next(), None);\nassert_eq!(\"   \".split_ascii_whitespace().next(), None);\n```","links":{"str::split_whitespace":"2:12746:32211"},"attrs":["#[must_use =\n\"this returns the split string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"SplitAsciiWhitespace","id":"2:44134:9680","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5530:34817":{"id":"5:5530:34817","crate_id":5,"name":"replacen","span":null,"visibility":"public","docs":"Replaces first N matches of a pattern with another string.\n\n`replacen` creates a new [`String`], and copies the data from this string slice into it.\nWhile doing so, it attempts to find matches of a pattern. If it finds any, it\nreplaces them with the replacement string slice at most `count` times.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"foo foo 123 foo\";\nassert_eq!(\"new new 123 foo\", s.replacen(\"foo\", \"new\", 2));\nassert_eq!(\"faa fao 123 foo\", s.replacen('o', \"a\", 3));\nassert_eq!(\"foo foo new23 foo\", s.replacen(char::is_numeric, \"new\", 1));\n```\n\nWhen the pattern doesn't match, it returns this string slice as [`String`]:\n\n```\nlet s = \"this is old\";\nassert_eq!(s, s.replacen(\"cookie monster\", \"little lamb\", 10));\n```","links":{"`String`":"5:7524:249"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the replaced string as a new allocation, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}],["to",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}],["count",{"primitive":"usize"}]],"output":{"resolved_path":{"name":"String","id":"5:7524:249","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12420:15639","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12780:34146":{"id":"2:12780:34146","crate_id":2,"name":"rsplit_terminator","span":null,"visibility":"public","docs":"An iterator over substrings of `self`, separated by characters\nmatched by a pattern and yielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\nEquivalent to [`split`], except that the trailing substring is\nskipped if empty.\n\n[`split`]: str::split\n\nThis method can be used for string data that is _terminated_,\nrather than _separated_ by a pattern.\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a\nreverse search, and it will be double ended if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`split_terminator`] method can be\nused.\n\n[`split_terminator`]: str::split_terminator\n\n# Examples\n\n```\nlet v: Vec<&str> = \"A.B.\".rsplit_terminator('.').collect();\nassert_eq!(v, [\"B\", \"A\"]);\n\nlet v: Vec<&str> = \"A..B..\".rsplit_terminator(\".\").collect();\nassert_eq!(v, [\"\", \"B\", \"\", \"A\"]);\n\nlet v: Vec<&str> = \"A.B:C.D\".rsplit_terminator(&['.', ':'][..]).collect();\nassert_eq!(v, [\"D\", \"C\", \"B\", \"A\"]);\n```","links":{"self::pattern":"2:12415:3804","str::split":"2:12768:27113","prim@char":"1:12034:448","str::split_terminator":"2:12777:34145"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RSplitTerminator","id":"2:43919:9667","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12420:15639","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12420:15639","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12435:15640","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12821:26673":{"id":"2:12821:26673","crate_id":2,"name":"strip_prefix","span":null,"visibility":"public","docs":"Returns a string slice with the prefix removed.\n\nIf the string starts with the pattern `prefix`, returns substring after the prefix, wrapped\nin `Some`.  Unlike `trim_start_matches`, this method removes the prefix exactly once.\n\nIf the string does not start with `prefix`, returns `None`.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nassert_eq!(\"foo:bar\".strip_prefix(\"foo:\"), Some(\"bar\"));\nassert_eq!(\"foo:bar\".strip_prefix(\"bar\"), None);\nassert_eq!(\"foofoo\".strip_prefix(\"foo\"), Some(\"foo\"));\n```","links":{"prim@char":"1:12034:448","self::pattern":"2:12415:3804"},"attrs":["#[must_use =\n\"this returns the remaining substring as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["prefix",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:41929:200","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12420:15639","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5542:34820":{"id":"5:5542:34820","crate_id":5,"name":"into_string","span":null,"visibility":"public","docs":"Converts a [`Box<str>`] into a [`String`] without copying or allocating.\n\n# Examples\n\n```\nlet string = String::from(\"birthday gift\");\nlet boxed_str = string.clone().into_boxed_str();\n\nassert_eq!(boxed_str.into_string(), string);\n```","links":{"`Box<str>`":"5:276:2022","`String`":"5:7524:249"},"attrs":["#[must_use = \"`self` will be dropped if the result is not used\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"resolved_path":{"name":"Box","id":"5:276:2022","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}]],"output":{"resolved_path":{"name":"String","id":"5:7524:249","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12757:26677":{"id":"2:12757:26677","crate_id":2,"name":"ends_with","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a suffix of this\nstring slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.ends_with(\"anas\"));\nassert!(!bananas.ends_with(\"nana\"));\n```","links":{"prim@char":"1:12034:448","self::pattern":"2:12415:3804"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12420:15639","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12420:15639","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12435:15640","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5544:2409":{"id":"5:5544:2409","crate_id":5,"name":"to_ascii_uppercase","span":null,"visibility":"public","docs":"Returns a copy of this string where each character is mapped to its\nASCII upper case equivalent.\n\nASCII letters 'a' to 'z' are mapped to 'A' to 'Z',\nbut non-ASCII letters are unchanged.\n\nTo uppercase the value in-place, use [`make_ascii_uppercase`].\n\nTo uppercase ASCII characters in addition to non-ASCII characters, use\n[`to_uppercase`].\n\n# Examples\n\n```\nlet s = \"Grüße, Jürgen ❤\";\n\nassert_eq!(\"GRüßE, JüRGEN ❤\", s.to_ascii_uppercase());\n```\n\n[`make_ascii_uppercase`]: str::make_ascii_uppercase\n[`to_uppercase`]: #method.to_uppercase","links":{"str::make_ascii_uppercase":"2:12841:28270"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use = \"to uppercase the value in-place, use `make_ascii_uppercase()`\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7524:249","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12744:2412":{"id":"2:12744:2412","crate_id":2,"name":"char_indices","span":null,"visibility":"public","docs":"Returns an iterator over the [`char`]s of a string slice, and their\npositions.\n\nAs a string slice consists of valid UTF-8, we can iterate through a\nstring slice by [`char`]. This method returns an iterator of both\nthese [`char`]s, as well as their byte positions.\n\nThe iterator yields tuples. The position is first, the [`char`] is\nsecond.\n\n# Examples\n\nBasic usage:\n\n```\nlet word = \"goodbye\";\n\nlet count = word.char_indices().count();\nassert_eq!(7, count);\n\nlet mut char_indices = word.char_indices();\n\nassert_eq!(Some((0, 'g')), char_indices.next());\nassert_eq!(Some((1, 'o')), char_indices.next());\nassert_eq!(Some((2, 'o')), char_indices.next());\nassert_eq!(Some((3, 'd')), char_indices.next());\nassert_eq!(Some((4, 'b')), char_indices.next());\nassert_eq!(Some((5, 'y')), char_indices.next());\nassert_eq!(Some((6, 'e')), char_indices.next());\n\nassert_eq!(None, char_indices.next());\n```\n\nRemember, [`char`]s might not match your intuition about characters:\n\n[`char`]: prim@char\n\n```\nlet yes = \"y̆es\";\n\nlet mut char_indices = yes.char_indices();\n\nassert_eq!(Some((0, 'y')), char_indices.next()); // not (0, 'y̆')\nassert_eq!(Some((1, '\\u{0306}')), char_indices.next());\n\n// note the 3 here - the previous character took up two bytes\nassert_eq!(Some((3, 'e')), char_indices.next());\nassert_eq!(Some((4, 's')), char_indices.next());\n\nassert_eq!(None, char_indices.next());\n```","links":{"prim@char":"1:12034:448"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"CharIndices","id":"2:43827:9661","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5543:3469":{"id":"5:5543:3469","crate_id":5,"name":"repeat","span":null,"visibility":"public","docs":"Creates a new [`String`] by repeating a string `n` times.\n\n# Panics\n\nThis function will panic if the capacity would overflow.\n\n# Examples\n\nBasic usage:\n\n```\nassert_eq!(\"abc\".repeat(4), String::from(\"abcabcabcabc\"));\n```\n\nA panic upon overflow:\n\n```should_panic\n// this will panic at runtime\nlet huge = \"0123456789abcdef\".repeat(usize::MAX);\n```","links":{"`String`":"5:7524:249"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["n",{"primitive":"usize"}]],"output":{"resolved_path":{"name":"String","id":"5:7524:249","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:492-0:1019:1958":{"id":"0:492-0:1019:1958","crate_id":0,"name":null,"span":{"filename":"src/internals/mod.rs","begin":[13,0],"end":[13,25]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"import":{"source":"self::ctxt::Ctxt","name":"Ctxt","id":"0:1019:1958","glob":false}}},"2:12818:2086":{"id":"2:12818:2086","crate_id":2,"name":"trim_start_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. `start` in this context means the first\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be left side, and for right-to-left languages like\nArabic or Hebrew, this will be the right side.\n\n# Examples\n\n```\nassert_eq!(\"11foo1bar11\".trim_start_matches('1'), \"foo1bar11\");\nassert_eq!(\"123foo1bar123\".trim_start_matches(char::is_numeric), \"foo1bar123\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_start_matches(x), \"foo1bar12\");\n```","links":{"prim@char":"1:12034:448","self::pattern":"2:12415:3804"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12420:15639","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12742:27106":{"id":"2:12742:27106","crate_id":2,"name":"split_at_mut","span":null,"visibility":"public","docs":"Divide one mutable string slice into two at an index.\n\nThe argument, `mid`, should be a byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get immutable string slices instead, see the [`split_at`] method.\n\n[`split_at`]: str::split_at\n\n# Panics\n\nPanics if `mid` is not on a UTF-8 code point boundary, or if it is\npast the end of the last code point of the string slice.\n\n# Examples\n\n```\nlet mut s = \"Per Martin-Löf\".to_string();\n{\n    let (first, last) = s.split_at_mut(3);\n    first.make_ascii_uppercase();\n    assert_eq!(\"PER\", first);\n    assert_eq!(\" Martin-Löf\", last);\n}\nassert_eq!(\"PER Martin-Löf\", s);\n```","links":{"str::split_at":"2:12741:2828"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["mid",{"primitive":"usize"}]],"output":{"tuple":[{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12740:34143":{"id":"2:12740:34143","crate_id":2,"name":"slice_mut_unchecked","span":null,"visibility":"public","docs":"Creates a string slice from another string slice, bypassing safety\nchecks.\nThis is generally not recommended, use with caution! For a safe\nalternative see [`str`] and [`IndexMut`].\n\n[`IndexMut`]: crate::ops::IndexMut\n\nThis new slice goes from `begin` to `end`, including `begin` but\nexcluding `end`.\n\nTo get an immutable string slice instead, see the\n[`slice_unchecked`] method.\n\n[`slice_unchecked`]: str::slice_unchecked\n\n# Safety\n\nCallers of this function are responsible that three preconditions are\nsatisfied:\n\n* `begin` must not exceed `end`.\n* `begin` and `end` must be byte positions within the string slice.\n* `begin` and `end` must lie on UTF-8 sequence boundaries.","links":{"`str`":"1:12040:1529","crate::ops::IndexMut":"2:3116:3411","str::slice_unchecked":"2:12739:34142"},"attrs":["#[deprecated(since = \"1.29.0\", note =\n\"use `get_unchecked_mut(begin..end)` instead\")]"],"deprecation":{"since":"1.29.0","note":"use `get_unchecked_mut(begin..end)` instead"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["begin",{"primitive":"usize"}],["end",{"primitive":"usize"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"2:12743:2418":{"id":"2:12743:2418","crate_id":2,"name":"chars","span":null,"visibility":"public","docs":"Returns an iterator over the [`char`]s of a string slice.\n\nAs a string slice consists of valid UTF-8, we can iterate through a\nstring slice by [`char`]. This method returns such an iterator.\n\nIt's important to remember that [`char`] represents a Unicode Scalar\nValue, and might not match your idea of what a 'character' is. Iteration\nover grapheme clusters may be what you actually want. This functionality\nis not provided by Rust's standard library, check crates.io instead.\n\n# Examples\n\nBasic usage:\n\n```\nlet word = \"goodbye\";\n\nlet count = word.chars().count();\nassert_eq!(7, count);\n\nlet mut chars = word.chars();\n\nassert_eq!(Some('g'), chars.next());\nassert_eq!(Some('o'), chars.next());\nassert_eq!(Some('o'), chars.next());\nassert_eq!(Some('d'), chars.next());\nassert_eq!(Some('b'), chars.next());\nassert_eq!(Some('y'), chars.next());\nassert_eq!(Some('e'), chars.next());\n\nassert_eq!(None, chars.next());\n```\n\nRemember, [`char`]s might not match your intuition about characters:\n\n[`char`]: prim@char\n\n```\nlet y = \"y̆\";\n\nlet mut chars = y.chars();\n\nassert_eq!(Some('y'), chars.next()); // not 'y̆'\nassert_eq!(Some('\\u{0306}'), chars.next());\n\nassert_eq!(None, chars.next());\n```","links":{"prim@char":"1:12034:448"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Chars","id":"2:43821:9660","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12748:29057":{"id":"2:12748:29057","crate_id":2,"name":"lines","span":null,"visibility":"public","docs":"An iterator over the lines of a string, as string slices.\n\nLines are split at line endings that are either newlines (`\\n`) or\nsequences of a carriage return followed by a line feed (`\\r\\n`).\n\nLine terminators are not included in the lines returned by the iterator.\n\nNote that any carriage return (`\\r`) not immediately followed by a\nline feed (`\\n`) does not split a line. These carriage returns are\nthereby included in the produced lines.\n\nThe final line ending is optional. A string that ends with a final line\nending will return the same lines as an otherwise identical string\nwithout a final line ending.\n\n# Examples\n\nBasic usage:\n\n```\nlet text = \"foo\\r\\nbar\\n\\nbaz\\r\";\nlet mut lines = text.lines();\n\nassert_eq!(Some(\"foo\"), lines.next());\nassert_eq!(Some(\"bar\"), lines.next());\nassert_eq!(Some(\"\"), lines.next());\n// Trailing carriage return is included in the last line\nassert_eq!(Some(\"baz\\r\"), lines.next());\n\nassert_eq!(None, lines.next());\n```\n\nThe final line does not require any ending:\n\n```\nlet text = \"foo\\nbar\\n\\r\\nbaz\";\nlet mut lines = text.lines();\n\nassert_eq!(Some(\"foo\"), lines.next());\nassert_eq!(Some(\"bar\"), lines.next());\nassert_eq!(Some(\"\"), lines.next());\nassert_eq!(Some(\"baz\"), lines.next());\n\nassert_eq!(None, lines.next());\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Lines","id":"2:44105:9677","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:8:1951":{"id":"0:8:1951","crate_id":0,"name":"ast","span":{"filename":"src/internals/ast.rs","begin":[1,0],"end":[216,1]},"visibility":"public","docs":"A Serde ast, parsed from the Syn ast and ready to generate Rust code.","links":{},"attrs":[],"deprecation":null,"inner":{"module":{"is_crate":false,"items":[],"is_stripped":false}}},"2:12739:34142":{"id":"2:12739:34142","crate_id":2,"name":"slice_unchecked","span":null,"visibility":"public","docs":"Creates a string slice from another string slice, bypassing safety\nchecks.\n\nThis is generally not recommended, use with caution! For a safe\nalternative see [`str`] and [`Index`].\n\n[`Index`]: crate::ops::Index\n\nThis new slice goes from `begin` to `end`, including `begin` but\nexcluding `end`.\n\nTo get a mutable string slice instead, see the\n[`slice_mut_unchecked`] method.\n\n[`slice_mut_unchecked`]: str::slice_mut_unchecked\n\n# Safety\n\nCallers of this function are responsible that three preconditions are\nsatisfied:\n\n* `begin` must not exceed `end`.\n* `begin` and `end` must be byte positions within the string slice.\n* `begin` and `end` must lie on UTF-8 sequence boundaries.\n\n# Examples\n\n```\nlet s = \"Löwe 老虎 Léopard\";\n\nunsafe {\n    assert_eq!(\"Löwe 老虎 Léopard\", s.slice_unchecked(0, 21));\n}\n\nlet s = \"Hello, world!\";\n\nunsafe {\n    assert_eq!(\"world\", s.slice_unchecked(7, 12));\n}\n```","links":{"`str`":"1:12040:1529","str::slice_mut_unchecked":"2:12740:34143","crate::ops::Index":"2:3112:2585"},"attrs":["#[deprecated(since = \"1.29.0\", note =\n\"use `get_unchecked(begin..end)` instead\")]","#[must_use]"],"deprecation":{"since":"1.29.0","note":"use `get_unchecked(begin..end)` instead"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["begin",{"primitive":"usize"}],["end",{"primitive":"usize"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"2:12786:27121":{"id":"2:12786:27121","crate_id":2,"name":"rsplitn","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by a\npattern, starting from the end of the string, restricted to returning\nat most `n` items.\n\nIf `n` substrings are returned, the last substring (the `n`th substring)\nwill contain the remainder of the string.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will not be double ended, because it is not\nefficient to support.\n\nFor splitting from the front, the [`splitn`] method can be used.\n\n[`splitn`]: str::splitn\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".rsplitn(3, ' ').collect();\nassert_eq!(v, [\"lamb\", \"little\", \"Mary had a\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".rsplitn(3, 'X').collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"lionX\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".rsplitn(2, \"::\").collect();\nassert_eq!(v, [\"leopard\", \"lion::tiger\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".rsplitn(2, |c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"ghi\", \"abc1def\"]);\n```","links":{"prim@char":"1:12034:448","str::splitn":"2:12783:27119","self::pattern":"2:12415:3804"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["n",{"primitive":"usize"}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RSplitN","id":"2:43973:9670","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12420:15639","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12420:15639","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12435:15640","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12804:34149":{"id":"2:12804:34149","crate_id":2,"name":"rmatch_indices","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within `self`,\nyielded in reverse order along with the index of the match.\n\nFor matches of `pat` within `self` that overlap, only the indices\ncorresponding to the last match are returned.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`match_indices`] method can be used.\n\n[`match_indices`]: str::match_indices\n\n# Examples\n\n```\nlet v: Vec<_> = \"abcXXXabcYYYabc\".rmatch_indices(\"abc\").collect();\nassert_eq!(v, [(12, \"abc\"), (6, \"abc\"), (0, \"abc\")]);\n\nlet v: Vec<_> = \"1abcabc2\".rmatch_indices(\"abc\").collect();\nassert_eq!(v, [(4, \"abc\"), (1, \"abc\")]);\n\nlet v: Vec<_> = \"ababa\".rmatch_indices(\"aba\").collect();\nassert_eq!(v, [(2, \"aba\")]); // only the last `aba`\n```","links":{"self::pattern":"2:12415:3804","`DoubleEndedIterator`":"2:7785:127","prim@char":"1:12034:448","str::match_indices":"2:12801:34148"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RMatchIndices","id":"2:44019:9673","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12420:15639","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12420:15639","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12435:15640","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12827:34156":{"id":"2:12827:34156","crate_id":2,"name":"trim_end_matches","span":null,"visibility":"public","docs":"Returns a string slice with all suffixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. `end` in this context means the last\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be right side, and for right-to-left languages like\nArabic or Hebrew, this will be the left side.\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_end_matches('1'), \"11foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_end_matches(char::is_numeric), \"123foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_end_matches(x), \"12foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1fooX\".trim_end_matches(|c| c == '1' || c == 'X'), \"1foo\");\n```","links":{"prim@char":"1:12034:448","self::pattern":"2:12415:3804"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12420:15639","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12420:15639","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12435:15640","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12846:34160":{"id":"2:12846:34160","crate_id":2,"name":"escape_unicode","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_unicode`].\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"❤\\n!\".escape_unicode() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"❤\\n!\".escape_unicode());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"\\\\u{{2764}}\\\\u{{a}}\\\\u{{21}}\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"❤\\n!\".escape_unicode().to_string(), \"\\\\u{2764}\\\\u{a}\\\\u{21}\");\n```","links":{"`char::escape_unicode`":"2:4613:34160"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EscapeUnicode","id":"2:44168:9623","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12751:2280":{"id":"2:12751:2280","crate_id":2,"name":"contains","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a sub-slice of\nthis string slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.contains(\"nana\"));\nassert!(!bananas.contains(\"apples\"));\n```","links":{"prim@char":"1:12034:448","self::pattern":"2:12415:3804"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12420:15639","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12789:27123":{"id":"2:12789:27123","crate_id":2,"name":"split_once","span":null,"visibility":"public","docs":"Splits the string on the first occurrence of the specified delimiter and\nreturns prefix before delimiter and suffix after delimiter.\n\n# Examples\n\n```\nassert_eq!(\"cfg\".split_once('='), None);\nassert_eq!(\"cfg=\".split_once('='), Some((\"cfg\", \"\")));\nassert_eq!(\"cfg=foo\".split_once('='), Some((\"cfg\", \"foo\")));\nassert_eq!(\"cfg=foo=bar\".split_once('='), Some((\"cfg\", \"foo=bar\")));\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["delimiter",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:41929:200","args":{"angle_bracketed":{"args":[{"type":{"tuple":[{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12420:15639","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12737:27082":{"id":"2:12737:27082","crate_id":2,"name":"get_unchecked_mut","span":null,"visibility":"public","docs":"Returns a mutable, unchecked subslice of `str`.\n\nThis is the unchecked alternative to indexing the `str`.\n\n# Safety\n\nCallers of this function are responsible that these preconditions are\nsatisfied:\n\n* The starting index must not exceed the ending index;\n* Indexes must be within bounds of the original slice;\n* Indexes must lie on UTF-8 sequence boundaries.\n\nFailing that, the returned string slice may reference invalid memory or\nviolate the invariants communicated by the `str` type.\n\n# Examples\n\n```\nlet mut v = String::from(\"🗻∈🌏\");\nunsafe {\n    assert_eq!(\"🗻\", v.get_unchecked_mut(0..4));\n    assert_eq!(\"∈\", v.get_unchecked_mut(4..7));\n    assert_eq!(\"🌏\", v.get_unchecked_mut(7..11));\n}\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"2:10500:245","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"2:10500:245","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"5:5541:34819":{"id":"5:5541:34819","crate_id":5,"name":"to_uppercase","span":null,"visibility":"public","docs":"Returns the uppercase equivalent of this string slice, as a new [`String`].\n\n'Uppercase' is defined according to the terms of the Unicode Derived Core Property\n`Uppercase`.\n\nSince some characters can expand into multiple characters when changing\nthe case, this function returns a [`String`] instead of modifying the\nparameter in-place.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"hello\";\n\nassert_eq!(\"HELLO\", s.to_uppercase());\n```\n\nScripts without case are not changed:\n\n```\nlet new_year = \"农历新年\";\n\nassert_eq!(new_year, new_year.to_uppercase());\n```\n\nOne character can become multiple:\n```\nlet s = \"tschüß\";\n\nassert_eq!(\"TSCHÜSS\", s.to_uppercase());\n```","links":{"`String`":"5:7524:249"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the uppercase string as a new String, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7524:249","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12746:32211":{"id":"2:12746:32211","crate_id":2,"name":"split_whitespace","span":null,"visibility":"public","docs":"Splits a string slice by whitespace.\n\nThe iterator returned will return string slices that are sub-slices of\nthe original string slice, separated by any amount of whitespace.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`. If you only want to split on ASCII whitespace\ninstead, use [`split_ascii_whitespace`].\n\n[`split_ascii_whitespace`]: str::split_ascii_whitespace\n\n# Examples\n\nBasic usage:\n\n```\nlet mut iter = \"A few words\".split_whitespace();\n\nassert_eq!(Some(\"A\"), iter.next());\nassert_eq!(Some(\"few\"), iter.next());\nassert_eq!(Some(\"words\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nAll kinds of whitespace are considered:\n\n```\nlet mut iter = \" Mary   had\\ta\\u{2009}little  \\n\\t lamb\".split_whitespace();\nassert_eq!(Some(\"Mary\"), iter.next());\nassert_eq!(Some(\"had\"), iter.next());\nassert_eq!(Some(\"a\"), iter.next());\nassert_eq!(Some(\"little\"), iter.next());\nassert_eq!(Some(\"lamb\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nIf the string is empty or all whitespace, the iterator yields no string slices:\n```\nassert_eq!(\"\".split_whitespace().next(), None);\nassert_eq!(\"   \".split_whitespace().next(), None);\n```","links":{"str::split_ascii_whitespace":"2:12747:32227"},"attrs":["#[must_use =\n\"this returns the split string as an iterator, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_split_whitespace\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"SplitWhitespace","id":"2:44125:9679","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12845:10189":{"id":"2:12845:10189","crate_id":2,"name":"escape_default","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_default`].\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"❤\\n!\".escape_default() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"❤\\n!\".escape_default());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"\\\\u{{2764}}\\\\n!\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"❤\\n!\".escape_default().to_string(), \"\\\\u{2764}\\\\n!\");\n```","links":{"`char::escape_default`":"2:4616:10189"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EscapeDefault","id":"2:44159:9618","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12815:34155":{"id":"2:12815:34155","crate_id":2,"name":"trim_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes and suffixes that match a\npattern repeatedly removed.\n\nThe [pattern] can be a [`char`], a slice of [`char`]s, or a function\nor closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_matches('1'), \"foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_matches(char::is_numeric), \"foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_matches(x), \"foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1foo1barXX\".trim_matches(|c| c == '1' || c == 'X'), \"foo1bar\");\n```","links":{"prim@char":"1:12034:448","self::pattern":"2:12415:3804"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12420:15639","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12420:15639","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"DoubleEndedSearcher","id":"2:12440:15638","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}}},"paths":{"2:22418:9601":{"crate_id":2,"path":["core","num","bignum","Big32x40"],"kind":"struct"},"17:10699:22708":{"crate_id":17,"path":["object","read","macho","file","MachOFile"],"kind":"struct"},"18:736:26607":{"crate_id":18,"path":["memchr","memmem","SearcherKind"],"kind":"enum"},"2:22:726":{"crate_id":2,"path":["core","format_args"],"kind":"macro"},"1:2201:135":{"crate_id":1,"path":["std","fs","File"],"kind":"struct"},"18:507:6374":{"crate_id":18,"path":["memchr","memmem","genericsimd","Forward"],"kind":"struct"},"1:11455:6240":{"crate_id":1,"path":["std","sys_common","net","LookupHost"],"kind":"struct"},"2:30621:3543":{"crate_id":2,"path":["core","ptr","alignment","Alignment"],"kind":"struct"},"17:8826:22576":{"crate_id":17,"path":["object","common","SymbolScope"],"kind":"enum"},"2:42481:90":{"crate_id":2,"path":["core","sync","atomic","AtomicIsize"],"kind":"struct"},"2:39608:220":{"crate_id":2,"path":["core","ops","range","RangeInclusive"],"kind":"struct"},"2:43426:9053":{"crate_id":2,"path":["core","slice","sort","TimSortRun"],"kind":"struct"},"14:215:9549":{"crate_id":14,"path":["rustc_demangle","TryDemangleError"],"kind":"struct"},"6:1710:7998":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_storage"],"kind":"struct"},"11:1066:21564":{"crate_id":11,"path":["hashbrown","map","EntryRef"],"kind":"enum"},"21:2592:3587":{"crate_id":21,"path":["proc_macro","diagnostic","Diagnostic"],"kind":"struct"},"1:3368:3470":{"crate_id":1,"path":["std","io","util","Repeat"],"kind":"struct"},"2:48294:9178":{"crate_id":2,"path":["core","core_arch","x86","__m256bh"],"kind":"struct"},"2:44374:9693":{"crate_id":2,"path":["core","str","pattern","CharPredicateSearcher"],"kind":"struct"},"24:5340:2353":{"crate_id":24,"path":["syn","path","AssocType"],"kind":"struct"},"24:4826:3332":{"crate_id":24,"path":["syn","expr","ExprConst"],"kind":"struct"},"2:46116:9077":{"crate_id":2,"path":["core","core_arch","simd","i16x4"],"kind":"struct"},"2:31167:202":{"crate_id":2,"path":["core","cmp","Ordering"],"kind":"enum"},"24:4182:3707":{"crate_id":24,"path":["syn","token","OrOr"],"kind":"struct"},"24:4013:3695":{"crate_id":24,"path":["syn","token","FatArrow"],"kind":"struct"},"21:2710:2042":{"crate_id":21,"path":["proc_macro","TokenTree"],"kind":"enum"},"2:41126:3464":{"crate_id":2,"path":["core","iter","sources","from_fn","FromFn"],"kind":"struct"},"21:216:10084":{"crate_id":21,"path":["proc_macro","bridge","fxhash","FxHasher"],"kind":"struct"},"24:5478:3384":{"crate_id":24,"path":["syn","ty","TypeInfer"],"kind":"struct"},"2:47210:9126":{"crate_id":2,"path":["core","core_arch","simd","f32x8"],"kind":"struct"},"2:40769:3510":{"crate_id":2,"path":["core","iter","adapters","skip_while","SkipWhile"],"kind":"struct"},"1:3280:10317":{"crate_id":1,"path":["std","io","stdio","Stderr"],"kind":"struct"},"2:10100:9588":{"crate_id":2,"path":["core","hash","BuildHasherDefault"],"kind":"struct"},"2:42961:7554":{"crate_id":2,"path":["core","fmt","rt","Flag"],"kind":"enum"},"24:338:3538":{"crate_id":24,"path":["syn","buffer","Cursor"],"kind":"struct"},"1:8454:9049":{"crate_id":1,"path":["std","path","State"],"kind":"enum"},"2:41989:3402":{"crate_id":2,"path":["core","option","Iter"],"kind":"struct"},"2:4105:4671":{"crate_id":2,"path":["core","async_iter","async_iter","AsyncIterator"],"kind":"trait"},"17:10215:22643":{"crate_id":17,"path":["object","read","elf","segment","ElfSegmentIterator"],"kind":"struct"},"2:41133:3466":{"crate_id":2,"path":["core","iter","sources","once","Once"],"kind":"struct"},"18:564:6380":{"crate_id":18,"path":["memchr","memmem","rarebytes","RareNeedleBytes"],"kind":"struct"},"2:41157:3472":{"crate_id":2,"path":["core","iter","sources","repeat_n","RepeatN"],"kind":"struct"},"6:6071:8528":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","Elf64_Chdr"],"kind":"struct"},"6:4676:8172":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Sym"],"kind":"struct"},"1:11146:9249":{"crate_id":1,"path":["std","sys","unix","process","process_inner","ExitStatus"],"kind":"struct"},"2:44594:9713":{"crate_id":2,"path":["core","str","BytesIsNotEmpty"],"kind":"struct"},"2:46037:9074":{"crate_id":2,"path":["core","core_arch","simd","u32x2"],"kind":"struct"},"24:1488:2048":{"crate_id":24,"path":["syn","parse","ParseStream"],"kind":"type_alias"},"6:1913:17439":{"crate_id":6,"path":["libc","unix","linux_like","linux","fpos64_t"],"kind":"enum"},"24:3851:3685":{"crate_id":24,"path":["syn","token","Caret"],"kind":"struct"},"17:10441:22686":{"crate_id":17,"path":["object","read","elf","note","GnuProperty"],"kind":"struct"},"2:46462:9094":{"crate_id":2,"path":["core","core_arch","simd","i32x4"],"kind":"struct"},"11:2383:3402":{"crate_id":11,"path":["hashbrown","table","Iter"],"kind":"struct"},"2:44168:9623":{"crate_id":2,"path":["core","str","iter","EscapeUnicode"],"kind":"struct"},"24:3391:3680":{"crate_id":24,"path":["syn","token","While"],"kind":"struct"},"6:7343:8750":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","not_x32","statvfs"],"kind":"struct"},"1:7839:5331":{"crate_id":1,"path":["std","fs","Metadata"],"kind":"struct"},"21:1020:3586":{"crate_id":21,"path":["proc_macro","bridge","client","SourceFile"],"kind":"struct"},"1:8227:10335":{"crate_id":1,"path":["std","net","tcp","Incoming"],"kind":"struct"},"20:806:35642":{"crate_id":20,"path":["proc_macro2","imp","TokenTreeIter"],"kind":"enum"},"2:23228:188":{"crate_id":2,"path":["core","num","nonzero","NonZeroI32"],"kind":"struct"},"1:6646:239":{"crate_id":1,"path":["std","sync","rwlock","RwLock"],"kind":"struct"},"6:5928:8446":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","termios"],"kind":"struct"},"2:41717:10332":{"crate_id":2,"path":["core","net","ip_addr","Ipv6MulticastScope"],"kind":"enum"},"2:10313:6198":{"crate_id":2,"path":["core","slice","sort","merge_sort","RunVec"],"kind":"struct"},"1:11390:9750":{"crate_id":1,"path":["std","sys_common","wtf8","EncodeWide"],"kind":"struct"},"24:1404:2046":{"crate_id":24,"path":["syn","meta","ParseNestedMeta"],"kind":"struct"},"1:11478:10337":{"crate_id":1,"path":["std","sys_common","net","TcpStream"],"kind":"struct"},"1:12045:688":{"crate_id":1,"path":["std","f64"],"kind":"primitive"},"5:7306:35286":{"crate_id":5,"path":["alloc","collections","btree","merge_iter","Peeked"],"kind":"enum"},"17:9103:6493":{"crate_id":17,"path":["object","endian","U16Bytes"],"kind":"struct"},"2:7710:3484":{"crate_id":2,"path":["core","iter","traits","accum","Product"],"kind":"trait"},"17:12253:6719":{"crate_id":17,"path":["object","elf","Vernaux"],"kind":"struct"},"1:8331:8636":{"crate_id":1,"path":["std","os","linux","raw","arch","stat"],"kind":"struct"},"5:1490:10201":{"crate_id":5,"path":["alloc","collections","btree","map","ValuesMut"],"kind":"struct"},"2:3364:3576":{"crate_id":2,"path":["core","ops","unsize","DispatchFromDyn"],"kind":"trait"},"20:122:35626":{"crate_id":20,"path":["proc_macro2","rcvec","RcVecBuilder"],"kind":"struct"},"11:2231:9562":{"crate_id":11,"path":["hashbrown","table","HashTable"],"kind":"struct"},"2:44858:9718":{"crate_id":2,"path":["core","alloc","layout","LayoutError"],"kind":"struct"},"1:4153:10368":{"crate_id":1,"path":["std","os","unix","net","ancillary","ScmRights"],"kind":"struct"},"1:12038:338":{"crate_id":1,"path":["std","array"],"kind":"primitive"},"16:2744:7351":{"crate_id":16,"path":["gimli","common","DebugRngListsIndex"],"kind":"struct"},"20:815:2041":{"crate_id":20,"path":["proc_macro2","imp","Span"],"kind":"enum"},"24:4851:3338":{"crate_id":24,"path":["syn","expr","ExprIndex"],"kind":"struct"},"2:48317:9179":{"crate_id":2,"path":["core","core_arch","x86","__m512bh"],"kind":"struct"},"1:10824:9226":{"crate_id":1,"path":["std","sys","unix","io","IoSlice"],"kind":"struct"},"20:928:2365":{"crate_id":20,"path":["proc_macro2","Punct"],"kind":"struct"},"1:4639:8649":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt","st_mtime"],"kind":"foreign_type"},"11:2536:1962":{"crate_id":11,"path":["hashbrown","raw","sse2","Group"],"kind":"struct"},"1:8404:9240":{"crate_id":1,"path":["std","path","Prefix"],"kind":"enum"},"17:12281:6729":{"crate_id":17,"path":["object","elf","NoteHeader64"],"kind":"struct"},"1:7916:31056":{"crate_id":1,"path":["std","io","buffered","linewritershim","LineWriterShim"],"kind":"struct"},"1:3672:10333":{"crate_id":1,"path":["std","net","socket_addr","ToSocketAddrs"],"kind":"trait"},"6:5941:8455":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","mallinfo"],"kind":"struct"},"24:4025:3696":{"crate_id":24,"path":["syn","token","Ge"],"kind":"struct"},"24:4553:1991":{"crate_id":24,"path":["syn","data","Field"],"kind":"struct"},"2:44479:9704":{"crate_id":2,"path":["core","str","lossy","Utf8Chunks"],"kind":"struct"},"16:6268:35565":{"crate_id":16,"path":["gimli","read","dwarf","RangeIterInner"],"kind":"enum"},"2:40400:9626":{"crate_id":2,"path":["core","char","ToUppercase"],"kind":"struct"},"24:2830:3658":{"crate_id":24,"path":["syn","token","Final"],"kind":"struct"},"2:44347:9692":{"crate_id":2,"path":["core","str","pattern","CharSliceSearcher"],"kind":"struct"},"17:11640:6575":{"crate_id":17,"path":["object","read","Export"],"kind":"struct"},"1:12005:10198":{"crate_id":1,"path":["std","backtrace_rs","types","BytesOrWideString"],"kind":"enum"},"2:3116:3411":{"crate_id":2,"path":["core","ops","index","IndexMut"],"kind":"trait"},"24:5084:3360":{"crate_id":24,"path":["syn","generics","PredicateLifetime"],"kind":"struct"},"2:7894:175":{"crate_id":2,"path":["core","iter","traits","iterator","Iterator"],"kind":"trait"},"6:6819:8667":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_fpstate"],"kind":"struct"},"17:12294:6730":{"crate_id":17,"path":["object","elf","HashHeader"],"kind":"struct"},"24:254:10022":{"crate_id":24,"path":["syn","attr","parsing","DisplayAttrStyle"],"kind":"struct"},"24:4463:3865":{"crate_id":24,"path":["syn","token","Bracket"],"kind":"struct"},"2:3557:4766":{"crate_id":2,"path":["core","array","drain","Drain"],"kind":"struct"},"2:21827:10283":{"crate_id":2,"path":["core","core_simd","to_bytes","sealed","Sealed"],"kind":"trait"},"6:6086:8530":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","seminfo"],"kind":"struct"},"5:6993:6176":{"crate_id":5,"path":["alloc","vec","retain_mut","BackshiftOnDrop"],"kind":"struct"},"17:10772:6531":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandData"],"kind":"struct"},"24:5506:3392":{"crate_id":24,"path":["syn","ty","TypeTuple"],"kind":"struct"},"16:5830:9425":{"crate_id":16,"path":["gimli","read","cfi","CommonInformationEntry"],"kind":"struct"},"16:7828:7540":{"crate_id":16,"path":["gimli","read","unit","UnitHeader"],"kind":"struct"},"24:5146:2182":{"crate_id":24,"path":["syn","lit","LitStr"],"kind":"struct"},"2:23042:193":{"crate_id":2,"path":["core","num","nonzero","NonZeroU32"],"kind":"struct"},"2:2884:3445":{"crate_id":2,"path":["core","ops","arith","Add"],"kind":"trait"},"24:4566:1979":{"crate_id":24,"path":["syn","derive","Data"],"kind":"enum"},"2:47146:9124":{"crate_id":2,"path":["core","core_arch","simd","i32x8"],"kind":"struct"},"6:5910:8434":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","msghdr"],"kind":"struct"},"24:0:1813":{"crate_id":24,"path":["syn"],"kind":"module"},"6:5111:8370":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_ifc_ifcu"],"kind":"union"},"1:11384:9749":{"crate_id":1,"path":["std","sys_common","wtf8","Wtf8CodePoints"],"kind":"struct"},"6:4440:8076":{"crate_id":6,"path":["libc","unix","linux_like","linux","packet_mreq"],"kind":"struct"},"21:2730:3422":{"crate_id":21,"path":["proc_macro","Delimiter"],"kind":"enum"},"6:6120:8546":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_seccomp"],"kind":"struct"},"24:99:3856":{"crate_id":24,"path":["syn","token","private","CustomToken"],"kind":"trait"},"24:4948:58":{"crate_id":24,"path":["syn","expr","parsing","kw","builtin"],"kind":"struct"},"21:2504:3587":{"crate_id":21,"path":["proc_macro","bridge","Diagnostic"],"kind":"struct"},"16:7651:22518":{"crate_id":16,"path":["gimli","read","rnglists","RngListIter"],"kind":"struct"},"1:6196:10136":{"crate_id":1,"path":["std","sync","mpmc","zero","ZeroToken"],"kind":"struct"},"16:4774:7404":{"crate_id":16,"path":["gimli","constants","DwId"],"kind":"struct"},"5:3150:100":{"crate_id":5,"path":["alloc","collections","btree","set","BTreeSet"],"kind":"struct"},"2:42074:232":{"crate_id":2,"path":["core","result","Result"],"kind":"enum"},"24:5458:3380":{"crate_id":24,"path":["syn","ty","TypeArray"],"kind":"struct"},"16:5121:7415":{"crate_id":16,"path":["gimli","constants","DwRle"],"kind":"struct"},"16:2472:7340":{"crate_id":16,"path":["gimli","common","DebugInfoOffset"],"kind":"struct"},"21:2776:2661":{"crate_id":21,"path":["proc_macro","Literal"],"kind":"struct"},"2:42206:96":{"crate_id":2,"path":["core","sync","atomic","AtomicU8"],"kind":"struct"},"1:11315:10429":{"crate_id":1,"path":["std","sys_common","process","CommandEnvs"],"kind":"struct"},"2:43746:9598":{"crate_id":2,"path":["core","slice","iter","RChunks"],"kind":"struct"},"6:4566:8138":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_periodic_effect"],"kind":"struct"},"16:7613:22516":{"crate_id":16,"path":["gimli","read","rnglists","RawRngListIter"],"kind":"struct"},"2:4902:10324":{"crate_id":2,"path":["core","io","borrowed_buf","BorrowedBuf"],"kind":"struct"},"5:4040:6139":{"crate_id":5,"path":["alloc","collections","vec_deque","drain","drop","DropGuard"],"kind":"struct"},"2:7176:3496":{"crate_id":2,"path":["core","iter","adapters","zip","TrustedRandomAccessNoCoerce"],"kind":"trait"},"6:4939:1092":{"crate_id":6,"path":["libc","unix","linux_like","linux","option"],"kind":"struct"},"2:42949:33053":{"crate_id":2,"path":["core","fmt","rt","Count"],"kind":"enum"},"17:10341:6525":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbol"],"kind":"struct"},"16:7015:7484":{"crate_id":16,"path":["gimli","read","loclists","LocationListEntry"],"kind":"struct"},"16:6041:22505":{"crate_id":16,"path":["gimli","read","cfi","RegisterRule"],"kind":"enum"},"2:41175:3476":{"crate_id":2,"path":["core","iter","sources","successors","Successors"],"kind":"struct"},"24:5490:3388":{"crate_id":24,"path":["syn","ty","TypePtr"],"kind":"struct"},"17:8954:22580":{"crate_id":17,"path":["object","common","SegmentFlags"],"kind":"enum"},"24:1896:3399":{"crate_id":24,"path":["syn","punctuated","PairsMut"],"kind":"struct"},"2:42702:3555":{"crate_id":2,"path":["core","fmt","num","UpperHex"],"kind":"struct"},"17:9897:22604":{"crate_id":17,"path":["object","read","archive","MemberHeader"],"kind":"enum"},"17:13817:7107":{"crate_id":17,"path":["object","pe","ImageSymbolExBytes"],"kind":"struct"},"2:30605:4630":{"crate_id":2,"path":["core","mem","transmutability","Assume"],"kind":"struct"},"24:4522:3307":{"crate_id":24,"path":["syn","attr","MetaNameValue"],"kind":"struct"},"20:801:9344":{"crate_id":20,"path":["proc_macro2","imp","DeferredTokenStream"],"kind":"struct"},"6:4914:8262":{"crate_id":6,"path":["libc","unix","linux_like","linux","file_clone_range"],"kind":"struct"},"24:3972:3693":{"crate_id":24,"path":["syn","token","DotDotEq"],"kind":"struct"},"2:2987:6357":{"crate_id":2,"path":["core","ops","bit","ShrAssign"],"kind":"trait"},"24:2847:137":{"crate_id":24,"path":["syn","token","Fn"],"kind":"struct"},"6:7388:8764":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","align","sem_t"],"kind":"struct"},"16:8154:22521":{"crate_id":16,"path":["gimli","read","unit","EntriesTreeNode"],"kind":"struct"},"2:44777:233":{"crate_id":2,"path":["core","future","ResumeTy"],"kind":"struct"},"5:7328:216":{"crate_id":5,"path":["alloc","collections","btree","set","Range"],"kind":"struct"},"17:13915:7133":{"crate_id":17,"path":["object","pe","ImageBaseRelocation"],"kind":"struct"},"16:7128:9257":{"crate_id":16,"path":["gimli","read","op","Operation"],"kind":"enum"},"24:4066:3699":{"crate_id":24,"path":["syn","token","Le"],"kind":"struct"},"1:4161:10369":{"crate_id":1,"path":["std","os","unix","net","ancillary","ScmCredentials"],"kind":"struct"},"5:4242:3402":{"crate_id":5,"path":["alloc","collections","vec_deque","iter","Iter"],"kind":"struct"},"20:950:1974":{"crate_id":20,"path":["proc_macro2","Ident"],"kind":"struct"},"17:9618:35599":{"crate_id":17,"path":["object","read","any","ComdatSectionIteratorInternal"],"kind":"enum"},"5:2978:26656":{"crate_id":5,"path":["alloc","collections","btree","node","marker","ValMut"],"kind":"struct"},"16:2969:21641":{"crate_id":16,"path":["gimli","common","SectionId"],"kind":"enum"},"14:31:10024":{"crate_id":14,"path":["rustc_demangle","v0","Demangle"],"kind":"struct"},"16:536:9402":{"crate_id":16,"path":["gimli","read","cfi","RegisterRuleMap"],"kind":"struct"},"16:7782:9536":{"crate_id":16,"path":["gimli","read","unit","DebugInfoUnitHeadersIter"],"kind":"struct"},"2:30797:32467":{"crate_id":2,"path":["core","ptr","alignment","AlignmentEnum64"],"kind":"enum"},"11:883:10206":{"crate_id":11,"path":["hashbrown","map","RawEntryBuilder"],"kind":"struct"},"2:42362:94":{"crate_id":2,"path":["core","sync","atomic","AtomicU32"],"kind":"struct"},"2:12486:15647":{"crate_id":2,"path":["core","str","pattern","MultiCharEqPattern"],"kind":"struct"},"24:3221:259":{"crate_id":24,"path":["syn","token","Trait"],"kind":"struct"},"6:4610:8158":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_abs_setup"],"kind":"struct"},"11:875:10205":{"crate_id":11,"path":["hashbrown","map","RawVacantEntryMut"],"kind":"struct"},"2:45907:9069":{"crate_id":2,"path":["core","core_arch","simd","u16x2"],"kind":"struct"},"2:9306:84":{"crate_id":2,"path":["core","sync","atomic","AtomicBool"],"kind":"struct"},"6:7622:8770":{"crate_id":6,"path":["libc","unix","linux_like","linux","fanotify_event_metadata"],"kind":"struct"},"6:4989:8309":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_nxtinfo"],"kind":"struct"},"17:11449:22592":{"crate_id":17,"path":["object","read","ObjectKind"],"kind":"enum"},"2:40381:15682":{"crate_id":2,"path":["core","char","EscapeDebugInner"],"kind":"enum"},"2:46683:9101":{"crate_id":2,"path":["core","core_arch","simd","m32x4"],"kind":"struct"},"24:5148:3365":{"crate_id":24,"path":["syn","lit","LitByteStr"],"kind":"struct"},"16:7597:35544":{"crate_id":16,"path":["gimli","read","rnglists","RangeListsFormat"],"kind":"enum"},"6:6868:8704":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user"],"kind":"struct"},"1:7669:4558":{"crate_id":1,"path":["std","thread","ThreadId"],"kind":"struct"},"24:4783:3322":{"crate_id":24,"path":["syn","expr","ExprArray"],"kind":"struct"},"16:7694:7377":{"crate_id":16,"path":["gimli","read","str","DebugStr"],"kind":"struct"},"17:10457:22662":{"crate_id":17,"path":["object","read","elf","hash","GnuHashTable"],"kind":"struct"},"16:7474:22515":{"crate_id":16,"path":["gimli","read","op","Evaluation"],"kind":"struct"},"17:11587:6606":{"crate_id":17,"path":["object","read","ObjectMapEntry"],"kind":"struct"},"2:8210:3481":{"crate_id":2,"path":["core","iter","traits","marker","TrustedStep"],"kind":"trait"},"2:43851:9590":{"crate_id":2,"path":["core","str","iter","Split"],"kind":"struct"},"17:9763:35602":{"crate_id":17,"path":["object","read","any","DynamicRelocationIteratorInternal"],"kind":"enum"},"1:8546:3402":{"crate_id":1,"path":["std","path","Iter"],"kind":"struct"},"17:14077:7177":{"crate_id":17,"path":["object","pe","ImageResourceDirectoryString"],"kind":"struct"},"17:10917:22695":{"crate_id":17,"path":["object","read","macho","segment","MachOSegment"],"kind":"struct"},"5:5382:15618":{"crate_id":5,"path":["alloc","slice","Join"],"kind":"trait"},"2:2978:6353":{"crate_id":2,"path":["core","ops","bit","BitXorAssign"],"kind":"trait"},"15:288:21594":{"crate_id":15,"path":["addr2line","LocationRangeIter"],"kind":"struct"},"16:5049:7413":{"crate_id":16,"path":["gimli","constants","DwLnct"],"kind":"struct"},"2:10959:15634":{"crate_id":2,"path":["core","slice","iter","SplitNMut"],"kind":"struct"},"17:11192:6575":{"crate_id":17,"path":["object","read","pe","export","Export"],"kind":"struct"},"11:1603:21569":{"crate_id":11,"path":["hashbrown","rustc_entry","RustcVacantEntry"],"kind":"struct"},"11:2369:21570":{"crate_id":11,"path":["hashbrown","table","AbsentEntry"],"kind":"struct"},"6:4535:8120":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_envelope"],"kind":"struct"},"16:3461:7385":{"crate_id":16,"path":["gimli","arch","RiscV"],"kind":"struct"},"2:21421:10283":{"crate_id":2,"path":["core","core_simd","lane_count","sealed","Sealed"],"kind":"trait"},"17:9960:22612":{"crate_id":17,"path":["object","read","coff","section","CoffSegmentIterator"],"kind":"struct"},"21:367:4791":{"crate_id":21,"path":["proc_macro","bridge","rpc","PanicMessage"],"kind":"enum"},"17:12686:6809":{"crate_id":17,"path":["object","macho","DylibCommand"],"kind":"struct"},"1:9148:9734":{"crate_id":1,"path":["std","time","SystemTimeError"],"kind":"struct"},"6:4449:8081":{"crate_id":6,"path":["libc","unix","linux_like","linux","cpu_set_t"],"kind":"struct"},"16:7534:7374":{"crate_id":16,"path":["gimli","read","pubtypes","DebugPubTypes"],"kind":"struct"},"2:43645:9594":{"crate_id":2,"path":["core","slice","iter","Windows"],"kind":"struct"},"20:515:3420":{"crate_id":20,"path":["proc_macro2","LexError"],"kind":"struct"},"6:5992:8479":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","rtentry"],"kind":"struct"},"2:22244:10569":{"crate_id":2,"path":["core","core_simd","simd","ptr","mut_ptr","SimdMutPtr"],"kind":"trait"},"6:1703:7995":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_un"],"kind":"struct"},"8:0:3161":{"crate_id":8,"path":["cfg_if"],"kind":"module"},"1:5573:10425":{"crate_id":1,"path":["std","process","Termination"],"kind":"trait"},"24:4264:3713":{"crate_id":24,"path":["syn","token","Pound"],"kind":"struct"},"16:7067:9527":{"crate_id":16,"path":["gimli","read","lookup","PubStuffHeader"],"kind":"struct"},"21:2601:9341":{"crate_id":21,"path":["proc_macro","diagnostic","Children"],"kind":"struct"},"23:272:2051":{"crate_id":23,"path":["quote","__private","push_lifetime","Lifetime"],"kind":"struct"},"18:755:9363":{"crate_id":18,"path":["memchr","memmem","SearcherRev"],"kind":"struct"},"24:4206:3709":{"crate_id":24,"path":["syn","token","Percent"],"kind":"struct"},"16:7391:22514":{"crate_id":16,"path":["gimli","read","op","EvaluationResult"],"kind":"enum"},"2:39513:9616":{"crate_id":2,"path":["core","ops","index_range","IndexRange"],"kind":"struct"},"11:2304:9529":{"crate_id":11,"path":["hashbrown","table","Entry"],"kind":"enum"},"1:5989:226":{"crate_id":1,"path":["std","sync","mpmc","counter","Receiver"],"kind":"struct"},"24:1447:26634":{"crate_id":24,"path":["syn","parse","discouraged","AnyDelimiter"],"kind":"trait"},"2:40933:3513":{"crate_id":2,"path":["core","iter","adapters","zip","Zip"],"kind":"struct"},"2:5637:6159":{"crate_id":2,"path":["core","iter","adapters","filter_map","next_chunk","Guard"],"kind":"struct"},"2:21370:10483":{"crate_id":2,"path":["core","core_simd","cast","SimdCast"],"kind":"trait"},"17:13149:6901":{"crate_id":17,"path":["object","macho","SymsegCommand"],"kind":"struct"},"18:80:26596":{"crate_id":18,"path":["memchr","memchr","iter","Memchr"],"kind":"struct"},"2:1644:629":{"crate_id":2,"path":["core","mem","drop"],"kind":"function"},"2:46530:9097":{"crate_id":2,"path":["core","core_arch","simd","f64x2"],"kind":"struct"},"1:4908:10400":{"crate_id":1,"path":["std","os","net","linux_ext","addr","SocketAddrExt"],"kind":"trait"},"17:9329:2950":{"crate_id":17,"path":["object","read","util","Bytes"],"kind":"struct"},"2:46432:9093":{"crate_id":2,"path":["core","core_arch","simd","i16x8"],"kind":"struct"},"5:1296:10207":{"crate_id":5,"path":["alloc","collections","btree","map","entry","OccupiedEntry"],"kind":"struct"},"2:42323:87":{"crate_id":2,"path":["core","sync","atomic","AtomicI32"],"kind":"struct"},"2:9793:3551":{"crate_id":2,"path":["core","fmt","Write"],"kind":"trait"},"24:4799:3326":{"crate_id":24,"path":["syn","expr","ExprBinary"],"kind":"struct"},"17:11972:6664":{"crate_id":17,"path":["object","elf","SectionHeader64"],"kind":"struct"},"1:4040:10348":{"crate_id":1,"path":["std","os","unix","fs","DirEntryExt"],"kind":"trait"},"24:880:35955":{"crate_id":24,"path":["syn","generics","LifetimesMut"],"kind":"struct"},"6:1501:7870":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreq"],"kind":"struct"},"2:4478:3569":{"crate_id":2,"path":["core","cell","UnsafeCell"],"kind":"struct"},"1:12052:1631":{"crate_id":1,"path":["std","u16"],"kind":"primitive"},"2:41746:2041":{"crate_id":2,"path":["core","net","ip_addr","fmt","Span"],"kind":"struct"},"2:44159:9618":{"crate_id":2,"path":["core","str","iter","EscapeDefault"],"kind":"struct"},"1:641:10192":{"crate_id":1,"path":["std","backtrace","BacktraceSymbol"],"kind":"struct"},"17:10662:22726":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldSubCache"],"kind":"struct"},"5:6949:269":{"crate_id":5,"path":["alloc","vec","Vec"],"kind":"struct"},"2:41148:3470":{"crate_id":2,"path":["core","iter","sources","repeat","Repeat"],"kind":"struct"},"1:8201:3511":{"crate_id":1,"path":["std","io","Take"],"kind":"struct"},"2:22556:8802":{"crate_id":2,"path":["core","num","dec2flt","number","Number"],"kind":"struct"},"24:5345:2569":{"crate_id":24,"path":["syn","path","AssocConst"],"kind":"struct"},"2:44574:9708":{"crate_id":2,"path":["core","str","CharEscapeUnicode"],"kind":"struct"},"1:7664:4556":{"crate_id":1,"path":["std","thread","Builder"],"kind":"struct"},"6:6658:8603":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","sigaction"],"kind":"struct"},"2:4943:848":{"crate_id":2,"path":["core","iter"],"kind":"module"},"2:43683:15625":{"crate_id":2,"path":["core","slice","iter","ChunksExactMut"],"kind":"struct"},"1:5570:8557":{"crate_id":1,"path":["std","process","exit"],"kind":"function"},"24:5472:3382":{"crate_id":24,"path":["syn","ty","TypeGroup"],"kind":"struct"},"2:2837:2502":{"crate_id":2,"path":["core","marker","PhantomData"],"kind":"struct"},"1:7600:6231":{"crate_id":1,"path":["std","backtrace_rs","Bomb"],"kind":"struct"},"24:5204:3371":{"crate_id":24,"path":["syn","op","BinOp"],"kind":"enum"},"5:2178:9566":{"crate_id":5,"path":["alloc","collections","btree","navigate","LeafRange"],"kind":"struct"},"6:7610:8768":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_condattr_t"],"kind":"struct"},"5:785:6142":{"crate_id":5,"path":["alloc","collections","binary_heap","PeekMut"],"kind":"struct"},"2:8991:15639":{"crate_id":2,"path":["core","panicking","assert_matches_failed","Pattern"],"kind":"struct"},"16:6560:6131":{"crate_id":16,"path":["gimli","read","lazy","imp","LazyArc"],"kind":"struct"},"5:207:4682":{"crate_id":5,"path":["alloc","boxed","thin","ThinBox"],"kind":"struct"},"6:4488:8101":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_id"],"kind":"struct"},"24:4945:2585":{"crate_id":24,"path":["syn","expr","Index"],"kind":"struct"},"16:6332:7359":{"crate_id":16,"path":["gimli","read","abbrev","DebugAbbrev"],"kind":"struct"},"24:4170:3706":{"crate_id":24,"path":["syn","token","OrEq"],"kind":"struct"},"17:2209:22661":{"crate_id":17,"path":["object","read","elf","relocation","ElfSectionRelocationIterator"],"kind":"struct"},"17:13891:7128":{"crate_id":17,"path":["object","pe","ImageAuxSymbolCrc"],"kind":"struct"},"2:40346:9622":{"crate_id":2,"path":["core","char","decode","DecodeUtf16Error"],"kind":"struct"},"2:42986:3543":{"crate_id":2,"path":["core","fmt","Alignment"],"kind":"enum"},"5:1522:216":{"crate_id":5,"path":["alloc","collections","btree","map","Range"],"kind":"struct"},"5:1434:3406":{"crate_id":5,"path":["alloc","collections","btree","map","IterMut"],"kind":"struct"},"6:1576:7911":{"crate_id":6,"path":["libc","unix","linux_like","tm"],"kind":"struct"},"24:5509:66":{"crate_id":24,"path":["syn","ty","Abi"],"kind":"struct"},"21:2705:3586":{"crate_id":21,"path":["proc_macro","SourceFile"],"kind":"struct"},"6:4578:8144":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_rumble_effect"],"kind":"struct"},"6:4523:8115":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_replay"],"kind":"struct"},"1:9015:31087":{"crate_id":1,"path":["std","sync","mpmc","list","Position"],"kind":"struct"},"24:5041:2528":{"crate_id":24,"path":["syn","generics","TypeParamBound"],"kind":"enum"},"6:555:7841":{"crate_id":6,"path":["libc","unix","winsize"],"kind":"struct"},"2:40909:3511":{"crate_id":2,"path":["core","iter","adapters","take","Take"],"kind":"struct"},"2:42695:3554":{"crate_id":2,"path":["core","fmt","num","LowerHex"],"kind":"struct"},"1:9276:4840":{"crate_id":1,"path":["std","sys","unix","args","Args"],"kind":"struct"},"2:10779:15627":{"crate_id":2,"path":["core","slice","iter","SplitMut"],"kind":"struct"},"1:11818:6243":{"crate_id":1,"path":["std","backtrace_rs","symbolize","gimli","mmap","Mmap"],"kind":"struct"},"2:10060:153":{"crate_id":2,"path":["core","hash","Hasher"],"kind":"trait"},"16:7568:7376":{"crate_id":16,"path":["gimli","read","rnglists","DebugRngLists"],"kind":"struct"},"11:1582:21568":{"crate_id":11,"path":["hashbrown","rustc_entry","RustcOccupiedEntry"],"kind":"struct"},"2:22202:32544":{"crate_id":2,"path":["core","core_simd","simd","ptr","const_ptr","SimdConstPtr","with_addr"],"kind":"foreign_type"},"17:10981:6518":{"crate_id":17,"path":["object","read","macho","symbol","SymbolTable"],"kind":"struct"},"24:4874:3343":{"crate_id":24,"path":["syn","expr","ExprMatch"],"kind":"struct"},"24:3170:2709":{"crate_id":24,"path":["syn","token","Static"],"kind":"struct"},"24:2558:3648":{"crate_id":24,"path":["syn","token","As"],"kind":"struct"},"17:14325:7258":{"crate_id":17,"path":["object","pe","ImageAlpha64RuntimeFunctionEntry"],"kind":"struct"},"6:542:7835":{"crate_id":6,"path":["libc","unix","iovec"],"kind":"struct"},"20:883:2041":{"crate_id":20,"path":["proc_macro2","Span"],"kind":"struct"},"2:21212:33488":{"crate_id":2,"path":["core","core_simd","swizzle","deinterleave","Even"],"kind":"struct"},"24:2711:3653":{"crate_id":24,"path":["syn","token","Crate"],"kind":"struct"},"1:2355:10266":{"crate_id":1,"path":["std","fs","symlink_metadata"],"kind":"function"},"18:609:35624":{"crate_id":18,"path":["memchr","memmem","twoway","Suffix"],"kind":"struct"},"1:1557:9560":{"crate_id":1,"path":["std","collections","hash","set","Difference"],"kind":"struct"},"1:2369:10269":{"crate_id":1,"path":["std","fs","read_link"],"kind":"function"},"24:1622:2049":{"crate_id":24,"path":["syn","parse_quote"],"kind":"macro"},"2:9311:91":{"crate_id":2,"path":["core","sync","atomic","AtomicPtr"],"kind":"struct"},"23:78:2043":{"crate_id":23,"path":["quote","to_tokens","ToTokens"],"kind":"trait"},"24:3810:3682":{"crate_id":24,"path":["syn","token","AndAnd"],"kind":"struct"},"24:5487:2529":{"crate_id":24,"path":["syn","ty","TypePath"],"kind":"struct"},"2:43919:9667":{"crate_id":2,"path":["core","str","iter","RSplitTerminator"],"kind":"struct"},"24:550:232":{"crate_id":24,"path":["syn","error","Result"],"kind":"type_alias"},"17:12659:6804":{"crate_id":17,"path":["object","macho","FvmlibCommand"],"kind":"struct"},"16:8050:3305":{"crate_id":16,"path":["gimli","read","unit","Attribute"],"kind":"struct"},"2:12429:9356":{"crate_id":2,"path":["core","str","pattern","Searcher"],"kind":"trait"},"11:2423:3401":{"crate_id":11,"path":["hashbrown","table","IntoIter"],"kind":"struct"},"16:2907:7358":{"crate_id":16,"path":["gimli","common","EhFrameOffset"],"kind":"struct"},"2:48142:9167":{"crate_id":2,"path":["core","core_arch","simd","f64x8"],"kind":"struct"},"2:21832:10485":{"crate_id":2,"path":["core","core_simd","to_bytes","ToBytes"],"kind":"trait"},"17:10739:22730":{"crate_id":17,"path":["object","read","macho","file","MachOComdatSectionIterator"],"kind":"struct"},"2:3049:123":{"crate_id":2,"path":["core","ops","deref","Deref"],"kind":"trait"},"6:6764:8655":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statfs64"],"kind":"struct"},"2:48169:9169":{"crate_id":2,"path":["core","core_arch","x86","__m128"],"kind":"struct"},"17:10715:22728":{"crate_id":17,"path":["object","read","macho","file","MachOComdatIterator"],"kind":"struct"},"6:4434:8074":{"crate_id":6,"path":["libc","unix","linux_like","linux","fsid_t"],"kind":"struct"},"17:10638:9382":{"crate_id":17,"path":["object","read","elf","attributes","AttributeReader"],"kind":"struct"},"16:5017:7412":{"crate_id":16,"path":["gimli","constants","DwLne"],"kind":"struct"},"2:40617:3498":{"crate_id":2,"path":["core","iter","adapters","cycle","Cycle"],"kind":"struct"},"24:1748:10145":{"crate_id":24,"path":["syn","print","TokensOrDefault"],"kind":"struct"},"6:5130:8379":{"crate_id":6,"path":["libc","unix","linux_like","linux","dirent64"],"kind":"struct"},"6:6913:8726":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","shmid_ds"],"kind":"struct"},"17:13260:6915":{"crate_id":17,"path":["object","macho","Nlist64"],"kind":"struct"},"17:11789:6618":{"crate_id":17,"path":["object","archive","Header"],"kind":"struct"},"24:500:3412":{"crate_id":24,"path":["syn","drops","NoDrop"],"kind":"struct"},"1:415:181":{"crate_id":1,"path":["std","thread","local","LocalKey"],"kind":"struct"},"24:601:3401":{"crate_id":24,"path":["syn","error","IntoIter"],"kind":"struct"},"17:13877:7125":{"crate_id":17,"path":["object","pe","ImageAuxSymbolSection"],"kind":"struct"},"5:2698:8794":{"crate_id":5,"path":["alloc","collections","btree","node","Handle"],"kind":"struct"},"17:10576:9376":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSubsectionIterator"],"kind":"struct"},"5:7440:4559":{"crate_id":5,"path":["alloc","ffi","c_str","CString"],"kind":"struct"},"17:12672:6536":{"crate_id":17,"path":["object","macho","Dylib"],"kind":"struct"},"1:3502:10281":{"crate_id":1,"path":["std","io","Seek"],"kind":"trait"},"2:43809:9659":{"crate_id":2,"path":["core","str","error","ParseBoolError"],"kind":"struct"},"24:5088:2631":{"crate_id":24,"path":["syn","generics","PredicateType"],"kind":"struct"},"2:4082:107":{"crate_id":2,"path":["core","asserting","Capture"],"kind":"struct"},"2:43594:33335":{"crate_id":2,"path":["core","slice","iter","GenericSplitN"],"kind":"struct"},"17:13967:7146":{"crate_id":17,"path":["object","pe","ImageImportByName"],"kind":"struct"},"1:1967:204":{"crate_id":1,"path":["std","ffi","os_str","OsString"],"kind":"struct"},"2:44446:9699":{"crate_id":2,"path":["core","str","pattern","TwoWaySearcher"],"kind":"struct"},"2:39691:8894":{"crate_id":2,"path":["core","any","TypeId"],"kind":"struct"},"16:3888:7390":{"crate_id":16,"path":["gimli","constants","DwCfa"],"kind":"struct"},"2:12231:9592":{"crate_id":2,"path":["core","str","iter","SplitInclusive"],"kind":"struct"},"11:2562:7712":{"crate_id":11,"path":["hashbrown","raw","TableLayout"],"kind":"struct"},"2:9811:140":{"crate_id":2,"path":["core","fmt","Formatter"],"kind":"struct"},"1:8979:113":{"crate_id":1,"path":["std","sync","mpmc","context","Context"],"kind":"struct"},"1:7644:10283":{"crate_id":1,"path":["std","sealed","Sealed"],"kind":"trait"},"2:41997:3406":{"crate_id":2,"path":["core","option","IterMut"],"kind":"struct"},"1:11621:9752":{"crate_id":1,"path":["std","backtrace_rs","backtrace","libunwind","Frame"],"kind":"enum"},"16:8281:7582":{"crate_id":16,"path":["gimli","read","StoreOnHeap"],"kind":"struct"},"16:7436:7523":{"crate_id":16,"path":["gimli","read","op","Expression"],"kind":"struct"},"2:39878:27035":{"crate_id":2,"path":["core","ascii","ascii_char","AsciiChar"],"kind":"enum"},"1:10842:31534":{"crate_id":1,"path":["std","sys","unix","kernel_copy","SpliceMode"],"kind":"enum"},"1:9110:158":{"crate_id":1,"path":["std","time","Instant"],"kind":"struct"},"1:5634:6219":{"crate_id":1,"path":["std","sync","mpsc","Sender"],"kind":"struct"},"24:5374:3376":{"crate_id":24,"path":["syn","restriction","VisRestricted"],"kind":"struct"},"1:1064:10208":{"crate_id":1,"path":["std","collections","hash","map","VacantEntry"],"kind":"struct"},"1:8012:10315":{"crate_id":1,"path":["std","io","error","ErrorKind"],"kind":"enum"},"2:2894:6346":{"crate_id":2,"path":["core","ops","arith","Mul"],"kind":"trait"},"24:2609:3651":{"crate_id":24,"path":["syn","token","Await"],"kind":"struct"},"5:4356:270":{"crate_id":5,"path":["alloc","collections","vec_deque","VecDeque"],"kind":"struct"},"16:6792:9511":{"crate_id":16,"path":["gimli","read","line","IncompleteLineProgram"],"kind":"struct"},"1:5782:10132":{"crate_id":1,"path":["std","sync","condvar","Condvar"],"kind":"struct"},"24:4550:3320":{"crate_id":24,"path":["syn","data","FieldsUnnamed"],"kind":"struct"},"16:4889:7408":{"crate_id":16,"path":["gimli","constants","DwDsc"],"kind":"struct"},"1:12033:1025":{"crate_id":1,"path":["std","never"],"kind":"primitive"},"16:6279:7428":{"crate_id":16,"path":["gimli","read","endian_slice","EndianSlice"],"kind":"struct"},"16:2788:7353":{"crate_id":16,"path":["gimli","common","DebugStrOffsetsBase"],"kind":"struct"},"17:13779:7101":{"crate_id":17,"path":["object","pe","ImageSymbol"],"kind":"struct"},"20:825:1962":{"crate_id":20,"path":["proc_macro2","imp","Group"],"kind":"enum"},"2:42520:97":{"crate_id":2,"path":["core","sync","atomic","AtomicUsize"],"kind":"struct"},"17:11317:6581":{"crate_id":17,"path":["object","read","pe","resource","ResourceDirectory"],"kind":"struct"},"17:9071:6491":{"crate_id":17,"path":["object","endian","LittleEndian"],"kind":"struct"},"1:2663:10314":{"crate_id":1,"path":["std","io","buffered","linewriter","LineWriter"],"kind":"struct"},"24:3960:3692":{"crate_id":24,"path":["syn","token","DotDotDot"],"kind":"struct"},"2:10890:15632":{"crate_id":2,"path":["core","slice","iter","RSplitMut"],"kind":"struct"},"2:44019:9673":{"crate_id":2,"path":["core","str","iter","RMatchIndices"],"kind":"struct"},"23:35:10283":{"crate_id":23,"path":["quote","ext","private","Sealed"],"kind":"trait"},"1:9469:135":{"crate_id":1,"path":["std","sys","unix","fs","File"],"kind":"struct"},"16:2881:7357":{"crate_id":16,"path":["gimli","common","DebugFrameOffset"],"kind":"struct"},"2:22151:10567":{"crate_id":2,"path":["core","core_simd","simd","num","uint","SimdUint"],"kind":"trait"},"2:46286:9089":{"crate_id":2,"path":["core","core_arch","simd","u16x8"],"kind":"struct"},"24:3153:3672":{"crate_id":24,"path":["syn","token","SelfValue"],"kind":"struct"},"20:955:2661":{"crate_id":20,"path":["proc_macro2","Literal"],"kind":"struct"},"5:1126:35446":{"crate_id":5,"path":["alloc","collections","btree","borrow","DormantMutRef"],"kind":"struct"},"17:14222:7238":{"crate_id":17,"path":["object","pe","ImageLoadConfigDirectory64"],"kind":"struct"},"2:45931:9070":{"crate_id":2,"path":["core","core_arch","simd","i8x4"],"kind":"struct"},"16:4745:7403":{"crate_id":16,"path":["gimli","constants","DwAddr"],"kind":"struct"},"17:8979:22581":{"crate_id":17,"path":["object","common","SectionFlags"],"kind":"enum"},"24:3017:3666":{"crate_id":24,"path":["syn","token","Move"],"kind":"struct"},"2:2364:207":{"crate_id":2,"path":["core","cmp","PartialEq"],"kind":"trait"},"17:12306:6733":{"crate_id":17,"path":["object","elf","GnuHashHeader"],"kind":"struct"},"1:588:10188":{"crate_id":1,"path":["std","ascii","AsciiExt"],"kind":"trait"},"17:10060:6514":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbol"],"kind":"struct"},"17:9913:22605":{"crate_id":17,"path":["object","read","archive","ArchiveMember"],"kind":"struct"},"17:12622:6800":{"crate_id":17,"path":["object","macho","Section64"],"kind":"struct"},"2:4179:3577":{"crate_id":2,"path":["core","cell","lazy","LazyCell"],"kind":"struct"},"2:44411:9694":{"crate_id":2,"path":["core","str","pattern","StrSearcher"],"kind":"struct"},"2:42167:89":{"crate_id":2,"path":["core","sync","atomic","AtomicI8"],"kind":"struct"},"1:7739:10233":{"crate_id":1,"path":["std","env","VarError"],"kind":"enum"},"18:660:26609":{"crate_id":18,"path":["memchr","memmem","FindIter"],"kind":"struct"},"2:43720:3486":{"crate_id":2,"path":["core","slice","iter","ArrayChunks"],"kind":"struct"},"5:7296:6150":{"crate_id":5,"path":["alloc","collections","binary_heap","DrainSorted"],"kind":"struct"},"1:10782:9743":{"crate_id":1,"path":["std","sys","unix","fs","FilePermissions"],"kind":"struct"},"2:21429:10482":{"crate_id":2,"path":["core","core_simd","lane_count","SupportedLaneCount"],"kind":"trait"},"24:154:1968":{"crate_id":24,"path":["syn","Token"],"kind":"macro"},"23:239:4259":{"crate_id":23,"path":["quote","__private","get_span","GetSpanInner"],"kind":"struct"},"2:47176:9125":{"crate_id":2,"path":["core","core_arch","simd","i64x4"],"kind":"struct"},"24:5365:3377":{"crate_id":24,"path":["syn","restriction","Visibility"],"kind":"enum"},"2:2580:159":{"crate_id":2,"path":["core","convert","Into"],"kind":"trait"},"2:40358:9623":{"crate_id":2,"path":["core","char","EscapeUnicode"],"kind":"struct"},"17:12137:6688":{"crate_id":17,"path":["object","elf","ProgramHeader32"],"kind":"struct"},"24:5475:3383":{"crate_id":24,"path":["syn","ty","TypeImplTrait"],"kind":"struct"},"1:4637:8647":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt","st_atime"],"kind":"foreign_type"},"11:832:10201":{"crate_id":11,"path":["hashbrown","map","ValuesMut"],"kind":"struct"},"1:724:150":{"crate_id":1,"path":["std","collections","hash","map","HashMap"],"kind":"struct"},"6:1682:7985":{"crate_id":6,"path":["libc","unix","linux_like","arphdr"],"kind":"struct"},"2:43654:9595":{"crate_id":2,"path":["core","slice","iter","Chunks"],"kind":"struct"},"17:10604:9378":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSubsubsectionIterator"],"kind":"struct"},"2:3287:143":{"crate_id":2,"path":["core","ops","try_trait","FromResidual"],"kind":"trait"},"5:4202:6159":{"crate_id":5,"path":["alloc","collections","vec_deque","into_iter","try_rfold","Guard"],"kind":"struct"},"1:4313:10373":{"crate_id":1,"path":["std","os","unix","net","listener","UnixListener"],"kind":"struct"},"18:671:26610":{"crate_id":18,"path":["memchr","memmem","FindRevIter"],"kind":"struct"},"1:8309:9230":{"crate_id":1,"path":["std","os","unix","ucred","UCred"],"kind":"struct"},"5:1310:10030":{"crate_id":5,"path":["alloc","collections","btree","map","entry","OccupiedError"],"kind":"struct"},"17:12514:6783":{"crate_id":17,"path":["object","macho","MachHeader64"],"kind":"struct"},"1:4233:10372":{"crate_id":1,"path":["std","os","unix","net","datagram","UnixDatagram"],"kind":"struct"},"17:14025:7160":{"crate_id":17,"path":["object","pe","ImageBoundImportDescriptor"],"kind":"struct"},"16:6513:9483":{"crate_id":16,"path":["gimli","read","index","UnitIndex"],"kind":"struct"},"1:5748:10439":{"crate_id":1,"path":["std","sync","barrier","Barrier"],"kind":"struct"},"1:7690:4555":{"crate_id":1,"path":["std","thread","Thread"],"kind":"struct"},"17:9946:6510":{"crate_id":17,"path":["object","read","coff","section","SectionTable"],"kind":"struct"},"11:844:10203":{"crate_id":11,"path":["hashbrown","map","RawEntryMut"],"kind":"enum"},"17:11816:6624":{"crate_id":17,"path":["object","archive","AixHeader"],"kind":"struct"},"0:965:1833":{"crate_id":0,"path":["serde_derive","Deserialize"],"kind":"proc_derive"},"1:7896:125":{"crate_id":1,"path":["std","fs","DirBuilder"],"kind":"struct"},"16:6844:7470":{"crate_id":16,"path":["gimli","read","line","FileEntry"],"kind":"struct"},"2:45841:9066":{"crate_id":2,"path":["core","core_arch","simd","u8x2"],"kind":"struct"},"24:1532:2986":{"crate_id":24,"path":["syn","parse","Unexpected"],"kind":"enum"},"20:843:2661":{"crate_id":20,"path":["proc_macro2","imp","Literal"],"kind":"enum"},"5:7257:4679":{"crate_id":5,"path":["alloc","alloc","Global"],"kind":"struct"},"21:107:4797":{"crate_id":21,"path":["proc_macro","bridge","client","Bridge"],"kind":"struct"},"1:10323:111":{"crate_id":1,"path":["std","sys","unix","process","process_common","Command"],"kind":"struct"},"11:673:3402":{"crate_id":11,"path":["hashbrown","map","Iter"],"kind":"struct"},"2:10500:245":{"crate_id":2,"path":["core","slice","index","SliceIndex"],"kind":"trait"},"2:9851:212":{"crate_id":2,"path":["core","fmt","Pointer"],"kind":"trait"},"2:3282:260":{"crate_id":2,"path":["core","ops","try_trait","Try"],"kind":"trait"},"17:14297:7251":{"crate_id":17,"path":["object","pe","ImageHotPatchHashes"],"kind":"struct"},"6:6718:8636":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stat"],"kind":"struct"},"16:6600:22508":{"crate_id":16,"path":["gimli","read","line","LineInstruction"],"kind":"enum"},"17:13203:6907":{"crate_id":17,"path":["object","macho","SourceVersionCommand"],"kind":"struct"},"11:787:9558":{"crate_id":11,"path":["hashbrown","map","Values"],"kind":"struct"},"1:3325:10310":{"crate_id":1,"path":["std","io","stdio","IsTerminal"],"kind":"trait"},"5:687:116":{"crate_id":5,"path":["alloc","borrow","Cow"],"kind":"enum"},"2:40530:10261":{"crate_id":2,"path":["core","ffi","VaList"],"kind":"struct"},"2:13091:15691":{"crate_id":2,"path":["core","future","poll_fn","PollFn"],"kind":"struct"},"2:40919:3512":{"crate_id":2,"path":["core","iter","adapters","take_while","TakeWhile"],"kind":"struct"},"24:4839:3335":{"crate_id":24,"path":["syn","expr","ExprForLoop"],"kind":"struct"},"1:10740:10404":{"crate_id":1,"path":["std","sys","unix","fd","FileDesc"],"kind":"struct"},"24:847:6340":{"crate_id":24,"path":["syn","ext","private","PeekFn"],"kind":"struct"},"17:12497:6780":{"crate_id":17,"path":["object","macho","MachHeader32"],"kind":"struct"},"6:527:7826":{"crate_id":6,"path":["libc","unix","ipv6_mreq"],"kind":"struct"},"24:3034:3667":{"crate_id":24,"path":["syn","token","Mut"],"kind":"struct"},"21:0:1166":{"crate_id":21,"path":["proc_macro"],"kind":"module"},"17:10508:9371":{"crate_id":17,"path":["object","read","elf","version","VerdefIterator"],"kind":"struct"},"13:110:35532":{"crate_id":13,"path":["std_detect","detect","arch","x86","Feature"],"kind":"enum"},"21:2750:2365":{"crate_id":21,"path":["proc_macro","Punct"],"kind":"struct"},"2:23197:187":{"crate_id":2,"path":["core","num","nonzero","NonZeroI16"],"kind":"struct"},"16:4585:7399":{"crate_id":16,"path":["gimli","constants","DwAccess"],"kind":"struct"},"16:7582:7525":{"crate_id":16,"path":["gimli","read","rnglists","RangeLists"],"kind":"struct"},"20:889:2042":{"crate_id":20,"path":["proc_macro2","TokenTree"],"kind":"enum"},"1:3484:3551":{"crate_id":1,"path":["std","io","Write"],"kind":"trait"},"1:3493:31366":{"crate_id":1,"path":["std","io","Write","write_fmt","Adapter"],"kind":"struct"},"16:5574:7360":{"crate_id":16,"path":["gimli","read","addr","DebugAddr"],"kind":"struct"},"1:1744:653":{"crate_id":1,"path":["std","env"],"kind":"module"},"17:10421:6369":{"crate_id":17,"path":["object","read","elf","note","Note"],"kind":"struct"},"24:4834:3334":{"crate_id":24,"path":["syn","expr","ExprField"],"kind":"struct"},"2:46864:9119":{"crate_id":2,"path":["core","core_arch","simd","u16x16"],"kind":"struct"},"17:11574:9400":{"crate_id":17,"path":["object","read","ObjectMap"],"kind":"struct"},"2:3031:4672":{"crate_id":2,"path":["core","ops","coroutine","Coroutine"],"kind":"trait"},"5:1784:4764":{"crate_id":5,"path":["alloc","collections","btree","map","ExtractIf"],"kind":"struct"},"6:4738:8177":{"crate_id":6,"path":["libc","unix","linux_like","linux","ucred"],"kind":"struct"},"17:11508:22593":{"crate_id":17,"path":["object","read","SymbolSection"],"kind":"enum"},"1:3427:9228":{"crate_id":1,"path":["std","io","Read"],"kind":"trait"},"2:42440:95":{"crate_id":2,"path":["core","sync","atomic","AtomicU64"],"kind":"struct"},"1:9100:240":{"crate_id":1,"path":["std","sync","rwlock","RwLockReadGuard"],"kind":"struct"},"1:8170:10282":{"crate_id":1,"path":["std","io","SeekFrom"],"kind":"enum"},"2:43241:9656":{"crate_id":2,"path":["core","hash","sip","Sip24Rounds"],"kind":"struct"},"1:10097:30966":{"crate_id":1,"path":["std","sys","unix","os","Env"],"kind":"struct"},"1:307:1580":{"crate_id":1,"path":["std","thread"],"kind":"module"},"2:22204:4701":{"crate_id":2,"path":["core","core_simd","simd","ptr","const_ptr","SimdConstPtr","from_exposed_addr"],"kind":"foreign_type"},"6:1596:7925":{"crate_id":6,"path":["libc","unix","linux_like","Dl_info"],"kind":"struct"},"2:46386:9092":{"crate_id":2,"path":["core","core_arch","simd","i8x16"],"kind":"struct"},"24:5154:3368":{"crate_id":24,"path":["syn","lit","LitInt"],"kind":"struct"},"2:44883:9719":{"crate_id":2,"path":["core","escape","EscapeIterInner"],"kind":"struct"},"17:11382:6586":{"crate_id":17,"path":["object","read","pe","rich","RichHeaderEntry"],"kind":"struct"},"17:11063:22760":{"crate_id":17,"path":["object","read","pe","file","PeComdatIterator"],"kind":"struct"},"5:881:6147":{"crate_id":5,"path":["alloc","collections","binary_heap","Hole"],"kind":"struct"},"6:495:7804":{"crate_id":6,"path":["libc","unix","timespec"],"kind":"struct"},"6:574:7851":{"crate_id":6,"path":["libc","unix","itimerval"],"kind":"struct"},"2:6450:4790":{"crate_id":2,"path":["core","iter","adapters","map_windows","Buffer"],"kind":"struct"},"1:2913:6210":{"crate_id":1,"path":["std","io","error","repr_bitpacked","Repr"],"kind":"struct"},"5:3743:10210":{"crate_id":5,"path":["alloc","collections","linked_list","CursorMut"],"kind":"struct"},"21:1819:4787":{"crate_id":21,"path":["proc_macro","bridge","Marked"],"kind":"struct"},"5:6474:4766":{"crate_id":5,"path":["alloc","vec","drain","Drain"],"kind":"struct"},"1:5130:210":{"crate_id":1,"path":["std","path","PathBuf"],"kind":"struct"},"21:2691:2041":{"crate_id":21,"path":["proc_macro","Span"],"kind":"struct"},"6:6813:8666":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_xmmreg"],"kind":"struct"},"6:6934:8738":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ptrace_rseq_configuration"],"kind":"struct"},"16:4719:7402":{"crate_id":16,"path":["gimli","constants","DwLang"],"kind":"struct"},"1:5084:31064":{"crate_id":1,"path":["std","path","fmt","DebugHelper"],"kind":"struct"},"2:40445:9630":{"crate_id":2,"path":["core","ffi","c_str","FromBytesWithNulError"],"kind":"struct"},"17:9868:6508":{"crate_id":17,"path":["object","read","archive","ArchiveFile"],"kind":"struct"},"24:1486:3414":{"crate_id":24,"path":["syn","parse","Parse"],"kind":"trait"},"2:39466:4673":{"crate_id":2,"path":["core","ops","coroutine","CoroutineState"],"kind":"enum"},"17:10384:22637":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdat"],"kind":"struct"},"2:39427:15664":{"crate_id":2,"path":["core","ops","control_flow","ControlFlow"],"kind":"enum"},"1:357:4567":{"crate_id":1,"path":["std","thread","scoped","Scope"],"kind":"struct"},"17:10950:22693":{"crate_id":17,"path":["object","read","macho","section","MachOSection"],"kind":"struct"},"16:6569:7367":{"crate_id":16,"path":["gimli","read","line","DebugLine"],"kind":"struct"},"17:11273:9394":{"crate_id":17,"path":["object","read","pe","import","DelayLoadDescriptorIterator"],"kind":"struct"},"2:2827:115":{"crate_id":2,"path":["core","marker","Copy"],"kind":"trait"},"1:11357:9747":{"crate_id":1,"path":["std","sys_common","wtf8","Wtf8Buf"],"kind":"struct"},"16:6386:7433":{"crate_id":16,"path":["gimli","read","abbrev","AttributeSpecification"],"kind":"struct"},"1:10759:9735":{"crate_id":1,"path":["std","sys","unix","fs","FileAttr"],"kind":"struct"},"5:4082:3406":{"crate_id":5,"path":["alloc","collections","vec_deque","iter_mut","IterMut"],"kind":"struct"},"1:2601:6194":{"crate_id":1,"path":["std","io","buffered","bufwriter","flush_buf","BufGuard"],"kind":"struct"},"1:9165:31085":{"crate_id":1,"path":["std","sys","common","thread_local","fast_local","Key"],"kind":"struct"},"5:7357:3401":{"crate_id":5,"path":["alloc","collections","linked_list","IntoIter"],"kind":"struct"},"6:6159:8556":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_data"],"kind":"union"},"1:6545:10444":{"crate_id":1,"path":["std","sync","poison","TryLockError"],"kind":"enum"},"24:5512:3378":{"crate_id":24,"path":["syn","ty","BareFnArg"],"kind":"struct"},"2:45885:9068":{"crate_id":2,"path":["core","core_arch","simd","u8x4"],"kind":"struct"},"2:47360:9127":{"crate_id":2,"path":["core","core_arch","simd","i8x64"],"kind":"struct"},"2:40577:3487":{"crate_id":2,"path":["core","iter","adapters","by_ref_sized","ByRefSized"],"kind":"struct"},"17:11491:6603":{"crate_id":17,"path":["object","read","SymbolIndex"],"kind":"struct"},"17:9532:35600":{"crate_id":17,"path":["object","read","any","SectionIteratorInternal"],"kind":"enum"},"16:4986:7411":{"crate_id":16,"path":["gimli","constants","DwLns"],"kind":"struct"},"17:12197:6701":{"crate_id":17,"path":["object","elf","Versym"],"kind":"struct"},"21:2755:2040":{"crate_id":21,"path":["proc_macro","Spacing"],"kind":"enum"},"5:1019:6139":{"crate_id":5,"path":["alloc","collections","binary_heap","drop","DropGuard"],"kind":"struct"},"1:2427:3175":{"crate_id":1,"path":["std","io"],"kind":"module"},"6:6898:8721":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ipc_perm"],"kind":"struct"},"2:21549:10480":{"crate_id":2,"path":["core","core_simd","masks","MaskElement"],"kind":"trait"},"6:4955:8284":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_sndrcvinfo"],"kind":"struct"},"24:3880:3687":{"crate_id":24,"path":["syn","token","Colon"],"kind":"struct"},"2:0:528":{"crate_id":2,"path":["core"],"kind":"module"},"24:2864:3659":{"crate_id":24,"path":["syn","token","For"],"kind":"struct"},"2:42125:3406":{"crate_id":2,"path":["core","result","IterMut"],"kind":"struct"},"6:4375:8030":{"crate_id":6,"path":["libc","unix","linux_like","linux","spwd"],"kind":"struct"},"17:12791:6822":{"crate_id":17,"path":["object","macho","RoutinesCommand32"],"kind":"struct"},"24:4938:1997":{"crate_id":24,"path":["syn","expr","Member"],"kind":"enum"},"2:42047:3976":{"crate_id":2,"path":["core","panic","panic_info","PanicInfo"],"kind":"struct"},"20:15:4975":{"crate_id":20,"path":["proc_macro2","marker","ProcMacroAutoTraits"],"kind":"struct"},"17:14119:7186":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation32"],"kind":"struct"},"2:1481:2524":{"crate_id":2,"path":["core","mem"],"kind":"module"},"1:10099:31079":{"crate_id":1,"path":["std","sys","unix","os","EnvStrDebug"],"kind":"struct"},"2:48241:9175":{"crate_id":2,"path":["core","core_arch","x86","__m512"],"kind":"struct"},"1:8214:9590":{"crate_id":1,"path":["std","io","Split"],"kind":"struct"},"17:12044:6676":{"crate_id":17,"path":["object","elf","Sym64"],"kind":"struct"},"2:1772:4715":{"crate_id":2,"path":["core","ptr","metadata","DynMetadata"],"kind":"struct"},"6:1528:7881":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_in"],"kind":"struct"},"16:4497:7396":{"crate_id":16,"path":["gimli","constants","DwLle"],"kind":"struct"},"2:40279:9618":{"crate_id":2,"path":["core","ascii","EscapeDefault"],"kind":"struct"},"5:7424:3457":{"crate_id":5,"path":["alloc","collections","TryReserveErrorKind"],"kind":"enum"},"17:11408:22591":{"crate_id":17,"path":["object","read","FileKind"],"kind":"enum"},"11:299:9552":{"crate_id":11,"path":["hashbrown","raw","RawIterRange"],"kind":"struct"},"2:22471:9602":{"crate_id":2,"path":["core","num","bignum","tests","Big8x3"],"kind":"struct"},"2:2709:10246":{"crate_id":2,"path":["core","error","Request"],"kind":"struct"},"1:622:10038":{"crate_id":1,"path":["std","backtrace","Backtrace"],"kind":"struct"},"24:4576:2191":{"crate_id":24,"path":["syn","derive","DataStruct"],"kind":"struct"},"17:12831:6826":{"crate_id":17,"path":["object","macho","SymtabCommand"],"kind":"struct"},"24:928:3362":{"crate_id":24,"path":["syn","generics","Turbofish"],"kind":"struct"},"24:2949:3664":{"crate_id":24,"path":["syn","token","Loop"],"kind":"struct"},"24:4910:3351":{"crate_id":24,"path":["syn","expr","ExprTry"],"kind":"struct"},"2:2822:3592":{"crate_id":2,"path":["core","marker","Sized"],"kind":"trait"},"21:2578:3588":{"crate_id":21,"path":["proc_macro","diagnostic","Level"],"kind":"enum"},"1:5827:6213":{"crate_id":1,"path":["std","sync","lazy_lock","LazyLock"],"kind":"struct"},"6:4529:8117":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_trigger"],"kind":"struct"},"11:490:150":{"crate_id":11,"path":["hashbrown","map","HashMap"],"kind":"struct"},"17:10411:22656":{"crate_id":17,"path":["object","read","elf","note","NoteIterator"],"kind":"struct"},"1:8905:10450":{"crate_id":1,"path":["std","sync","mpsc","TryRecvError"],"kind":"enum"},"1:4744:10359":{"crate_id":1,"path":["std","os","fd","raw","FromRawFd"],"kind":"trait"},"6:1591:7923":{"crate_id":6,"path":["libc","unix","linux_like","sched_param"],"kind":"struct"},"23:345:2662":{"crate_id":23,"path":["quote","quote_spanned"],"kind":"macro"},"5:2974:3667":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Mut"],"kind":"struct"},"2:2899:6347":{"crate_id":2,"path":["core","ops","arith","Div"],"kind":"trait"},"2:2875:2000":{"crate_id":2,"path":["core","marker","Tuple"],"kind":"trait"},"2:3080:138":{"crate_id":2,"path":["core","ops","function","FnMut"],"kind":"trait"},"23:504:4253":{"crate_id":23,"path":["quote","__private","IdentFragmentAdapter"],"kind":"struct"},"5:3225:35439":{"crate_id":5,"path":["alloc","collections","btree","set","IntersectionInner"],"kind":"enum"},"24:4476:2307":{"crate_id":24,"path":["syn","token","Paren"],"kind":"struct"},"17:9004:22582":{"crate_id":17,"path":["object","common","SymbolFlags"],"kind":"enum"},"6:4893:8252":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlmsghdr"],"kind":"struct"},"17:12438:6766":{"crate_id":17,"path":["object","macho","DyldCacheImageInfo"],"kind":"struct"},"2:2369:131":{"crate_id":2,"path":["core","cmp","Eq"],"kind":"trait"},"2:31195:4339":{"crate_id":2,"path":["core","cmp","Reverse"],"kind":"struct"},"6:5969:8466":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_pktinfo"],"kind":"struct"},"2:12120:9663":{"crate_id":2,"path":["core","str","iter","SplitInternal"],"kind":"struct"},"2:2583:141":{"crate_id":2,"path":["core","convert","From"],"kind":"trait"},"2:48264:9176":{"crate_id":2,"path":["core","core_arch","x86","__m512d"],"kind":"struct"},"16:6944:35543":{"crate_id":16,"path":["gimli","read","loclists","LocListsFormat"],"kind":"enum"},"17:12075:6680":{"crate_id":17,"path":["object","elf","Syminfo64"],"kind":"struct"},"1:11217:9273":{"crate_id":1,"path":["std","sys","unix","time","Timespec"],"kind":"struct"},"17:12811:6825":{"crate_id":17,"path":["object","macho","RoutinesCommand64"],"kind":"struct"},"11:2542:7708":{"crate_id":11,"path":["hashbrown","raw","bitmask","BitMask"],"kind":"struct"},"16:5322:7416":{"crate_id":16,"path":["gimli","constants","DwOp"],"kind":"struct"},"6:7651:8777":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_barrier_t"],"kind":"struct"},"24:5158:3363":{"crate_id":24,"path":["syn","lit","LitBool"],"kind":"struct"},"2:5542:6159":{"crate_id":2,"path":["core","iter","adapters","filter","next_chunk","Guard"],"kind":"struct"},"16:7269:35580":{"crate_id":16,"path":["gimli","read","op","OperationEvaluationResult"],"kind":"enum"},"17:8714:22573":{"crate_id":17,"path":["object","common","SectionKind"],"kind":"enum"},"16:5712:9414":{"crate_id":16,"path":["gimli","read","cfi","BaseAddresses"],"kind":"struct"},"24:4864:2316":{"crate_id":24,"path":["syn","expr","ExprLit"],"kind":"struct"},"17:13759:7093":{"crate_id":17,"path":["object","pe","ImageSectionHeader"],"kind":"struct"},"5:1450:3401":{"crate_id":5,"path":["alloc","collections","btree","map","IntoIter"],"kind":"struct"},"5:4172:6159":{"crate_id":5,"path":["alloc","collections","vec_deque","into_iter","try_fold","Guard"],"kind":"struct"},"1:4044:10349":{"crate_id":1,"path":["std","os","unix","fs","DirEntryExt2"],"kind":"trait"},"2:7070:2788":{"crate_id":2,"path":["core","iter","adapters","zip","zip"],"kind":"function"},"2:8201:3477":{"crate_id":2,"path":["core","iter","traits","marker","FusedIterator"],"kind":"trait"},"5:3602:3406":{"crate_id":5,"path":["alloc","collections","linked_list","IterMut"],"kind":"struct"},"1:8829:9250":{"crate_id":1,"path":["std","process","ExitStatusError"],"kind":"struct"},"16:2574:7344":{"crate_id":16,"path":["gimli","common","DebugLocListsBase"],"kind":"struct"},"5:7266:3401":{"crate_id":5,"path":["alloc","collections","binary_heap","IntoIter"],"kind":"struct"},"17:11846:6628":{"crate_id":17,"path":["object","archive","AixFileHeader"],"kind":"struct"},"17:14479:7302":{"crate_id":17,"path":["object","pe","ImageSeparateDebugHeader"],"kind":"struct"},"24:829:3524":{"crate_id":24,"path":["syn","ext","IdentExt"],"kind":"trait"},"6:6927:8735":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","seccomp_notif_sizes"],"kind":"struct"},"24:4830:3333":{"crate_id":24,"path":["syn","expr","ExprContinue"],"kind":"struct"},"1:11309:9744":{"crate_id":1,"path":["std","sys_common","process","CommandEnv"],"kind":"struct"},"17:10228:22642":{"crate_id":17,"path":["object","read","elf","segment","ElfSegment"],"kind":"struct"},"2:4210:3578":{"crate_id":2,"path":["core","cell","once","OnceCell"],"kind":"struct"},"24:4532:2033":{"crate_id":24,"path":["syn","data","Fields"],"kind":"enum"},"1:4131:30962":{"crate_id":1,"path":["std","os","unix","net","ancillary","AncillaryDataIter"],"kind":"struct"},"5:2231:35283":{"crate_id":5,"path":["alloc","collections","btree","navigate","LazyLeafHandle"],"kind":"enum"},"2:12435:15640":{"crate_id":2,"path":["core","str","pattern","ReverseSearcher"],"kind":"trait"},"1:8937:10451":{"crate_id":1,"path":["std","sync","mpsc","TrySendError"],"kind":"enum"},"5:2967:2217":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Owned"],"kind":"enum"},"5:3338:4764":{"crate_id":5,"path":["alloc","collections","btree","set","ExtractIf"],"kind":"struct"},"5:5951:71":{"crate_id":5,"path":["alloc","sync","Arc"],"kind":"struct"},"7:31:21472":{"crate_id":7,"path":["unwind","libunwind","_Unwind_Reason_Code"],"kind":"enum"},"1:3996:10346":{"crate_id":1,"path":["std","os","unix","fs","MetadataExt"],"kind":"trait"},"16:7462:7524":{"crate_id":16,"path":["gimli","read","op","OperationIter"],"kind":"struct"},"5:3728:3538":{"crate_id":5,"path":["alloc","collections","linked_list","Cursor"],"kind":"struct"},"1:9022:10135":{"crate_id":1,"path":["std","sync","mpmc","list","ListToken"],"kind":"struct"},"6:123:16091":{"crate_id":6,"path":["libc","unix","fpos_t"],"kind":"enum"},"20:792:258":{"crate_id":20,"path":["proc_macro2","imp","TokenStream"],"kind":"enum"},"5:3576:179":{"crate_id":5,"path":["alloc","collections","linked_list","LinkedList"],"kind":"struct"},"6:5023:8326":{"crate_id":6,"path":["libc","unix","linux_like","linux","dirent"],"kind":"struct"},"16:4921:7409":{"crate_id":16,"path":["gimli","constants","DwIdx"],"kind":"struct"},"24:888:35956":{"crate_id":24,"path":["syn","generics","TypeParams"],"kind":"struct"},"21:2015:4788":{"crate_id":21,"path":["proc_macro","bridge","LitKind"],"kind":"enum"},"17:11174:22764":{"crate_id":17,"path":["object","read","pe","export","ExportTarget"],"kind":"enum"},"17:10963:6565":{"crate_id":17,"path":["object","read","macho","section","MachOSectionInternal"],"kind":"struct"},"2:43755:15631":{"crate_id":2,"path":["core","slice","iter","RChunksMut"],"kind":"struct"},"1:8221:9677":{"crate_id":1,"path":["std","io","Lines"],"kind":"struct"},"2:44253:9682":{"crate_id":2,"path":["core","str","pattern","CharSearcher"],"kind":"struct"},"24:4037:3697":{"crate_id":24,"path":["syn","token","Gt"],"kind":"struct"},"17:13923:7135":{"crate_id":17,"path":["object","pe","ImageArchiveMemberHeader"],"kind":"struct"},"11:687:3406":{"crate_id":11,"path":["hashbrown","map","IterMut"],"kind":"struct"},"24:2524:3726":{"crate_id":24,"path":["syn","token","Underscore"],"kind":"struct"},"2:21540:10283":{"crate_id":2,"path":["core","core_simd","masks","sealed","Sealed"],"kind":"trait"},"9:177:10117":{"crate_id":9,"path":["miniz_oxide","inflate","stream","InflateState"],"kind":"struct"},"17:9243:6497":{"crate_id":17,"path":["object","endian","I32Bytes"],"kind":"struct"},"24:4902:3349":{"crate_id":24,"path":["syn","expr","ExprReturn"],"kind":"struct"},"11:2403:3406":{"crate_id":11,"path":["hashbrown","table","IterMut"],"kind":"struct"},"20:360:3420":{"crate_id":20,"path":["proc_macro2","imp","LexError"],"kind":"enum"},"1:860:3401":{"crate_id":1,"path":["std","collections","hash","map","IntoIter"],"kind":"struct"},"2:46086:9076":{"crate_id":2,"path":["core","core_arch","simd","i8x8"],"kind":"struct"},"11:1051:10208":{"crate_id":11,"path":["hashbrown","map","VacantEntry"],"kind":"struct"},"2:43211:153":{"crate_id":2,"path":["core","hash","sip","Hasher"],"kind":"struct"},"1:10794:9185":{"crate_id":1,"path":["std","sys","unix","fs","FileTimes"],"kind":"struct"},"24:2592:3650":{"crate_id":24,"path":["syn","token","Auto"],"kind":"struct"},"21:478:6128":{"crate_id":21,"path":["proc_macro","bridge","server","RunningSameThreadGuard"],"kind":"struct"},"6:62:16036":{"crate_id":6,"path":["libc","unix","DIR"],"kind":"enum"},"2:2877:112":{"crate_id":2,"path":["core","marker","ConstParamTy"],"kind":"trait"},"1:10540:10317":{"crate_id":1,"path":["std","sys","unix","stdio","Stderr"],"kind":"struct"},"17:10548:9374":{"crate_id":17,"path":["object","read","elf","version","VernauxIterator"],"kind":"struct"},"2:2982:6356":{"crate_id":2,"path":["core","ops","bit","ShlAssign"],"kind":"trait"},"14:40:1974":{"crate_id":14,"path":["rustc_demangle","v0","Ident"],"kind":"struct"},"6:4461:8086":{"crate_id":6,"path":["libc","unix","linux_like","linux","msginfo"],"kind":"struct"},"18:548:149":{"crate_id":18,"path":["memchr","memmem","rabinkarp","Hash"],"kind":"struct"},"11:1142:21566":{"crate_id":11,"path":["hashbrown","map","VacantEntryRef"],"kind":"struct"},"6:4814:8215":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_vm"],"kind":"struct"},"6:6136:8550":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","sifields_sigchld"],"kind":"struct"},"18:707:9356":{"crate_id":18,"path":["memchr","memmem","Searcher"],"kind":"struct"},"17:12466:6773":{"crate_id":17,"path":["object","macho","FatHeader"],"kind":"struct"},"16:7054:9524":{"crate_id":16,"path":["gimli","read","lookup","LookupEntryIter"],"kind":"struct"},"24:5150:3364":{"crate_id":24,"path":["syn","lit","LitByte"],"kind":"struct"},"24:3102:3566":{"crate_id":24,"path":["syn","token","Ref"],"kind":"struct"},"1:0:1521":{"crate_id":1,"path":["std"],"kind":"module"},"17:12577:6794":{"crate_id":17,"path":["object","macho","SegmentCommand64"],"kind":"struct"},"17:11368:6583":{"crate_id":17,"path":["object","read","pe","rich","RichHeaderInfo"],"kind":"struct"},"24:4867:3341":{"crate_id":24,"path":["syn","expr","ExprLoop"],"kind":"struct"},"24:4843:3336":{"crate_id":24,"path":["syn","expr","ExprGroup"],"kind":"struct"},"17:9565:22585":{"crate_id":17,"path":["object","read","any","ComdatIterator"],"kind":"struct"},"24:2541:3647":{"crate_id":24,"path":["syn","token","Abstract"],"kind":"struct"},"24:4310:3716":{"crate_id":24,"path":["syn","token","Semi"],"kind":"struct"},"2:21158:4339":{"crate_id":2,"path":["core","core_simd","swizzle","reverse","Reverse"],"kind":"struct"},"2:22540:9603":{"crate_id":2,"path":["core","num","dec2flt","decimal","Decimal"],"kind":"struct"},"5:3808:4764":{"crate_id":5,"path":["alloc","collections","linked_list","ExtractIf"],"kind":"struct"},"12:0:3165":{"crate_id":12,"path":["rustc_std_workspace_alloc"],"kind":"module"},"16:7041:9522":{"crate_id":16,"path":["gimli","read","lookup","DebugLookup"],"kind":"struct"},"1:11236:158":{"crate_id":1,"path":["std","sys","unix","time","Instant"],"kind":"struct"},"2:2316:110":{"crate_id":2,"path":["core","clone","Clone"],"kind":"trait"},"24:4298:3715":{"crate_id":24,"path":["syn","token","RArrow"],"kind":"struct"},"20:119:9342":{"crate_id":20,"path":["proc_macro2","rcvec","RcVec"],"kind":"struct"},"24:5068:3035":{"crate_id":24,"path":["syn","generics","WhereClause"],"kind":"struct"},"2:13260:148":{"crate_id":2,"path":["core","alloc","global","GlobalAlloc"],"kind":"trait"},"1:9070:9260":{"crate_id":1,"path":["std","sync","mpmc","utils","CachePadded"],"kind":"struct"},"1:10804:136":{"crate_id":1,"path":["std","sys","unix","fs","FileType"],"kind":"struct"},"6:5891:8432":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__timeval"],"kind":"struct"},"1:1797:10225":{"crate_id":1,"path":["std","env","SplitPaths"],"kind":"struct"},"2:42117:3402":{"crate_id":2,"path":["core","result","Iter"],"kind":"struct"},"6:5117:8373":{"crate_id":6,"path":["libc","unix","linux_like","linux","ifconf"],"kind":"struct"},"24:3323:3676":{"crate_id":24,"path":["syn","token","Unsized"],"kind":"struct"},"1:5627:226":{"crate_id":1,"path":["std","sync","mpsc","Receiver"],"kind":"struct"},"16:2618:7346":{"crate_id":16,"path":["gimli","common","DebugMacinfoOffset"],"kind":"struct"},"24:896:35958":{"crate_id":24,"path":["syn","generics","TypeParamsMut"],"kind":"struct"},"1:8158:9226":{"crate_id":1,"path":["std","io","IoSlice"],"kind":"struct"},"24:2915:3662":{"crate_id":24,"path":["syn","token","In"],"kind":"struct"},"24:3408:273":{"crate_id":24,"path":["syn","token","Yield"],"kind":"struct"},"2:10931:9669":{"crate_id":2,"path":["core","slice","iter","SplitN"],"kind":"struct"},"1:8985:4549":{"crate_id":1,"path":["std","sync","mpmc","context","Inner"],"kind":"struct"},"2:13039:33716":{"crate_id":2,"path":["core","future","join","MaybeDone"],"kind":"enum"},"11:1887:3401":{"crate_id":11,"path":["hashbrown","set","IntoIter"],"kind":"struct"},"1:3243:10322":{"crate_id":1,"path":["std","io","stdio","StdoutLock"],"kind":"struct"},"2:42931:3543":{"crate_id":2,"path":["core","fmt","rt","Alignment"],"kind":"enum"},"17:9608:22586":{"crate_id":17,"path":["object","read","any","ComdatSectionIterator"],"kind":"struct"},"1:9035:9257":{"crate_id":1,"path":["std","sync","mpmc","select","Operation"],"kind":"struct"},"1:1551:9559":{"crate_id":1,"path":["std","collections","hash","set","Intersection"],"kind":"struct"},"10:36:7714":{"crate_id":10,"path":["adler","algo","U32X4"],"kind":"struct"},"6:580:7854":{"crate_id":6,"path":["libc","unix","tms"],"kind":"struct"},"6:4351:8013":{"crate_id":6,"path":["libc","unix","linux_like","linux","glob_t"],"kind":"struct"},"6:4647:8170":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Ehdr"],"kind":"struct"},"11:1566:21567":{"crate_id":11,"path":["hashbrown","rustc_entry","RustcEntry"],"kind":"enum"},"16:3049:21642":{"crate_id":16,"path":["gimli","common","DwarfFileType"],"kind":"enum"},"17:10241:6510":{"crate_id":17,"path":["object","read","elf","section","SectionTable"],"kind":"struct"},"2:44582:9710":{"crate_id":2,"path":["core","str","IsWhitespace"],"kind":"struct"},"2:41167:3474":{"crate_id":2,"path":["core","iter","sources","repeat_with","RepeatWith"],"kind":"struct"},"2:21197:33485":{"crate_id":2,"path":["core","core_simd","swizzle","interleave","Hi"],"kind":"struct"},"24:4494:3304":{"crate_id":24,"path":["syn","attr","AttrStyle"],"kind":"enum"},"2:10095:10288":{"crate_id":2,"path":["core","hash","BuildHasher"],"kind":"trait"},"17:11216:9387":{"crate_id":17,"path":["object","read","pe","import","ImportTable"],"kind":"struct"},"6:4841:8232":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_tp"],"kind":"struct"},"2:44150:9624":{"crate_id":2,"path":["core","str","iter","EscapeDebug"],"kind":"struct"},"2:44566:9706":{"crate_id":2,"path":["core","str","LinesMap"],"kind":"struct"},"14:202:2405":{"crate_id":14,"path":["rustc_demangle","v0","ParseError"],"kind":"enum"},"24:4856:3339":{"crate_id":24,"path":["syn","expr","ExprInfer"],"kind":"struct"},"13:226:7707":{"crate_id":13,"path":["std_detect","detect","cache","Initializer"],"kind":"struct"},"17:9351:6500":{"crate_id":17,"path":["object","read","util","ByteString"],"kind":"struct"},"21:2644:3401":{"crate_id":21,"path":["proc_macro","token_stream","IntoIter"],"kind":"struct"},"17:582:2055":{"crate_id":17,"path":["object","read","any","Symbol"],"kind":"struct"},"6:5974:8467":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_mmap_req"],"kind":"struct"},"16:6352:9474":{"crate_id":16,"path":["gimli","read","abbrev","Abbreviations"],"kind":"struct"},"24:3793:3681":{"crate_id":24,"path":["syn","token","And"],"kind":"struct"},"2:1763:8797":{"crate_id":2,"path":["core","ptr","metadata","PtrComponents"],"kind":"struct"},"16:5588:7363":{"crate_id":16,"path":["gimli","read","cfi","DebugFrame"],"kind":"struct"},"2:44602:9060":{"crate_id":2,"path":["core","time","Nanoseconds"],"kind":"struct"},"2:2953:6335":{"crate_id":2,"path":["core","ops","bit","BitXor"],"kind":"trait"},"5:3179:3402":{"crate_id":5,"path":["alloc","collections","btree","set","Iter"],"kind":"struct"},"24:4787:3323":{"crate_id":24,"path":["syn","expr","ExprAssign"],"kind":"struct"},"24:4890:3346":{"crate_id":24,"path":["syn","expr","ExprRange"],"kind":"struct"},"2:46940:9121":{"crate_id":2,"path":["core","core_arch","simd","u64x4"],"kind":"struct"},"17:12946:6864":{"crate_id":17,"path":["object","macho","TwolevelHintsCommand"],"kind":"struct"},"2:22705:8819":{"crate_id":2,"path":["core","num","error","TryFromIntError"],"kind":"struct"},"17:0:3169":{"crate_id":17,"path":["object"],"kind":"module"},"2:13017:161":{"crate_id":2,"path":["core","future","into_future","IntoFuture"],"kind":"trait"},"2:46175:9080":{"crate_id":2,"path":["core","core_arch","simd","f32x2"],"kind":"struct"},"24:2898:3661":{"crate_id":24,"path":["syn","token","Impl"],"kind":"struct"},"2:44231:15653":{"crate_id":2,"path":["core","str","pattern","SearchStep"],"kind":"enum"},"2:6253:3515":{"crate_id":2,"path":["core","iter","adapters","intersperse","IntersperseWith"],"kind":"struct"},"16:8134:9547":{"crate_id":16,"path":["gimli","read","unit","EntriesTree"],"kind":"struct"},"2:47100:9123":{"crate_id":2,"path":["core","core_arch","simd","i16x16"],"kind":"struct"},"6:6837:8678":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user_regs_struct"],"kind":"struct"},"2:46910:9120":{"crate_id":2,"path":["core","core_arch","simd","u32x8"],"kind":"struct"},"17:13568:7040":{"crate_id":17,"path":["object","pe","ImageDataDirectory"],"kind":"struct"},"2:40520:6183":{"crate_id":2,"path":["core","ffi","VaListImpl"],"kind":"struct"},"1:7907:9725":{"crate_id":1,"path":["std","hash","random","DefaultHasher"],"kind":"struct"},"2:47818:9161":{"crate_id":2,"path":["core","core_arch","simd","u16x32"],"kind":"struct"},"1:1539:3401":{"crate_id":1,"path":["std","collections","hash","set","IntoIter"],"kind":"struct"},"2:4843:417":{"crate_id":2,"path":["core","ffi","c_void"],"kind":"enum"},"16:5727:9417":{"crate_id":16,"path":["gimli","read","cfi","SectionBaseAddresses"],"kind":"struct"},"17:13072:6881":{"crate_id":17,"path":["object","macho","VersionMinCommand"],"kind":"struct"},"6:5044:8338":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_setup"],"kind":"struct"},"2:46652:9100":{"crate_id":2,"path":["core","core_arch","simd","m16x8"],"kind":"struct"},"15:0:3167":{"crate_id":15,"path":["addr2line"],"kind":"module"},"2:48180:9170":{"crate_id":2,"path":["core","core_arch","x86","__m128d"],"kind":"struct"},"5:1281:10208":{"crate_id":5,"path":["alloc","collections","btree","map","entry","VacantEntry"],"kind":"struct"},"2:9493:33827":{"crate_id":2,"path":["core","fmt","builders","PadAdapter"],"kind":"struct"},"1:12016:29297":{"crate_id":1,"path":["std","backtrace_rs","print","PrintFmt"],"kind":"enum"},"6:1514:7876":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreq_source"],"kind":"struct"},"24:1950:3401":{"crate_id":24,"path":["syn","punctuated","IntoIter"],"kind":"struct"},"6:5867:8416":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","aiocb"],"kind":"struct"},"24:3238:260":{"crate_id":24,"path":["syn","token","Try"],"kind":"struct"},"2:2931:6352":{"crate_id":2,"path":["core","ops","arith","RemAssign"],"kind":"trait"},"17:9651:6518":{"crate_id":17,"path":["object","read","any","SymbolTable"],"kind":"struct"},"2:43765:9599":{"crate_id":2,"path":["core","slice","iter","RChunksExact"],"kind":"struct"},"17:10140:22632":{"crate_id":17,"path":["object","read","coff","import","ImportName"],"kind":"enum"},"2:10490:10283":{"crate_id":2,"path":["core","slice","index","private_slice_index","Sealed"],"kind":"trait"},"17:9489:35603":{"crate_id":17,"path":["object","read","any","SegmentInternal"],"kind":"enum"},"2:23104:191":{"crate_id":2,"path":["core","num","nonzero","NonZeroU128"],"kind":"struct"},"2:2936:3704":{"crate_id":2,"path":["core","ops","bit","Not"],"kind":"trait"},"2:44134:9680":{"crate_id":2,"path":["core","str","iter","SplitAsciiWhitespace"],"kind":"struct"},"1:7866:9724":{"crate_id":1,"path":["std","fs","Permissions"],"kind":"struct"},"2:43973:9670":{"crate_id":2,"path":["core","str","iter","RSplitN"],"kind":"struct"},"2:43673:9597":{"crate_id":2,"path":["core","slice","iter","ChunksExact"],"kind":"struct"},"2:46484:9095":{"crate_id":2,"path":["core","core_arch","simd","i64x2"],"kind":"struct"},"2:23073:194":{"crate_id":2,"path":["core","num","nonzero","NonZeroU64"],"kind":"struct"},"16:7554:7375":{"crate_id":16,"path":["gimli","read","rnglists","DebugRanges"],"kind":"struct"},"2:2970:6354":{"crate_id":2,"path":["core","ops","bit","BitAndAssign"],"kind":"trait"},"1:5433:10423":{"crate_id":1,"path":["std","process","ChildStderr"],"kind":"struct"},"2:2297:103":{"crate_id":2,"path":["core","borrow","BorrowMut"],"kind":"trait"},"1:4627:10346":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt"],"kind":"trait"},"1:9476:10278":{"crate_id":1,"path":["std","sys","unix","fs","ReadDir"],"kind":"struct"},"2:40407:15683":{"crate_id":2,"path":["core","char","CaseMappingIter"],"kind":"enum"},"24:4795:3325":{"crate_id":24,"path":["syn","expr","ExprAwait"],"kind":"struct"},"16:6425:9479":{"crate_id":16,"path":["gimli","read","aranges","ArangeHeader"],"kind":"struct"},"23:344:1218":{"crate_id":23,"path":["quote","quote"],"kind":"macro"},"20:712:3586":{"crate_id":20,"path":["proc_macro2","fallback","SourceFile"],"kind":"struct"},"1:12048:791":{"crate_id":1,"path":["std","i32"],"kind":"primitive"},"2:22333:10562":{"crate_id":2,"path":["core","core_simd","simd","cmp","ord","SimdPartialOrd"],"kind":"trait"},"1:3839:10338":{"crate_id":1,"path":["std","net","udp","UdpSocket"],"kind":"struct"},"6:1496:7868":{"crate_id":6,"path":["libc","unix","linux_like","in_addr"],"kind":"struct"},"22:0:3291":{"crate_id":22,"path":["unicode_ident"],"kind":"module"},"6:1546:7892":{"crate_id":6,"path":["libc","unix","linux_like","addrinfo"],"kind":"struct"},"17:13668:7077":{"crate_id":17,"path":["object","pe","ImageNtHeaders64"],"kind":"struct"},"2:44590:9712":{"crate_id":2,"path":["core","str","IsNotEmpty"],"kind":"struct"},"16:6017:22504":{"crate_id":16,"path":["gimli","read","cfi","CfaRule"],"kind":"enum"},"16:7284:3975":{"crate_id":16,"path":["gimli","read","op","Location"],"kind":"enum"},"24:4886:2242":{"crate_id":24,"path":["syn","expr","ExprPath"],"kind":"struct"},"24:4817:3330":{"crate_id":24,"path":["syn","expr","ExprCast"],"kind":"struct"},"2:40637:3500":{"crate_id":2,"path":["core","iter","adapters","filter","Filter"],"kind":"struct"},"2:10298:6194":{"crate_id":2,"path":["core","slice","sort","merge_sort","BufGuard"],"kind":"struct"},"2:40730:3507":{"crate_id":2,"path":["core","iter","adapters","rev","Rev"],"kind":"struct"},"1:8233:10334":{"crate_id":1,"path":["std","net","tcp","IntoIncoming"],"kind":"struct"},"24:904:35954":{"crate_id":24,"path":["syn","generics","ConstParams"],"kind":"struct"},"24:2779:3656":{"crate_id":24,"path":["syn","token","Else"],"kind":"struct"},"16:6243:2004":{"crate_id":16,"path":["gimli","read","dwarf","Unit"],"kind":"struct"},"1:8386:3971":{"crate_id":1,"path":["std","panic","BacktraceStyle"],"kind":"enum"},"21:2636:3420":{"crate_id":21,"path":["proc_macro","LexError"],"kind":"struct"},"2:11956:10036":{"crate_id":2,"path":["core","slice","GetManyMutError"],"kind":"struct"},"5:0:313":{"crate_id":5,"path":["alloc"],"kind":"module"},"20:738:1974":{"crate_id":20,"path":["proc_macro2","fallback","Ident"],"kind":"struct"},"16:2321:7327":{"crate_id":16,"path":["gimli","common","Encoding"],"kind":"struct"},"2:2919:6349":{"crate_id":2,"path":["core","ops","arith","SubAssign"],"kind":"trait"},"5:898:3402":{"crate_id":5,"path":["alloc","collections","binary_heap","Iter"],"kind":"struct"},"2:9839:117":{"crate_id":2,"path":["core","fmt","macros","Debug"],"kind":"proc_derive"},"17:13175:6903":{"crate_id":17,"path":["object","macho","FvmfileCommand"],"kind":"struct"},"16:6499:7379":{"crate_id":16,"path":["gimli","read","index","DebugTuIndex"],"kind":"struct"},"17:14157:7194":{"crate_id":17,"path":["object","pe","ImagePrologueDynamicRelocationHeader"],"kind":"struct"},"17:10113:22631":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdatSectionIterator"],"kind":"struct"},"2:42921:9041":{"crate_id":2,"path":["core","fmt","rt","Placeholder"],"kind":"struct"},"17:13555:7033":{"crate_id":17,"path":["object","pe","ImageFileHeader"],"kind":"struct"},"6:7657:8778":{"crate_id":6,"path":["libc","unix","linux_like","linux","can_frame"],"kind":"struct"},"1:10340:31195":{"crate_id":1,"path":["std","sys","unix","process","process_common","Argv"],"kind":"struct"},"16:3232:7326":{"crate_id":16,"path":["gimli","arch","AArch64"],"kind":"struct"},"23:11:3430":{"crate_id":23,"path":["quote","ext","TokenStreamExt"],"kind":"trait"},"24:557:6333":{"crate_id":24,"path":["syn","error","SpanRange"],"kind":"struct"},"24:4560:1816":{"crate_id":24,"path":["syn","derive","DeriveInput"],"kind":"struct"},"16:6376:22507":{"crate_id":16,"path":["gimli","read","abbrev","Attributes"],"kind":"enum"},"2:32398:33319":{"crate_id":2,"path":["core","error","tags","MaybeSizedValue"],"kind":"struct"},"5:1472:9557":{"crate_id":5,"path":["alloc","collections","btree","map","Keys"],"kind":"struct"},"2:3293:15666":{"crate_id":2,"path":["core","ops","try_trait","Residual"],"kind":"trait"},"17:11125:22737":{"crate_id":17,"path":["object","read","pe","section","PeSectionIterator"],"kind":"struct"},"5:7457:9576":{"crate_id":5,"path":["alloc","ffi","c_str","NulError"],"kind":"struct"},"1:3990:10345":{"crate_id":1,"path":["std","os","unix","fs","OpenOptionsExt"],"kind":"trait"},"2:43821:9660":{"crate_id":2,"path":["core","str","iter","Chars"],"kind":"struct"},"6:4666:8171":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Sym"],"kind":"struct"},"17:504:22571":{"crate_id":17,"path":["object","read","any","Comdat"],"kind":"struct"},"2:22669:32481":{"crate_id":2,"path":["core","num","fmt","Part"],"kind":"enum"},"24:4898:3348":{"crate_id":24,"path":["syn","expr","ExprRepeat"],"kind":"struct"},"17:12124:6687":{"crate_id":17,"path":["object","elf","Rela64"],"kind":"struct"},"20:722:2041":{"crate_id":20,"path":["proc_macro2","fallback","Span"],"kind":"struct"},"16:5798:7421":{"crate_id":16,"path":["gimli","read","cfi","Augmentation"],"kind":"struct"},"24:4966:63":{"crate_id":24,"path":["syn","expr","parsing","kw","raw"],"kind":"struct"},"17:14174:7201":{"crate_id":17,"path":["object","pe","ImageLoadConfigDirectory32"],"kind":"struct"},"1:533:4550":{"crate_id":1,"path":["std","thread","Packet"],"kind":"struct"},"24:4822:3331":{"crate_id":24,"path":["syn","expr","ExprClosure"],"kind":"struct"},"11:434:35527":{"crate_id":11,"path":["hashbrown","raw","RawIterHashInner"],"kind":"struct"},"2:30565:4628":{"crate_id":2,"path":["core","mem","manually_drop","ManuallyDrop"],"kind":"struct"},"1:8921:10449":{"crate_id":1,"path":["std","sync","mpsc","RecvTimeoutError"],"kind":"enum"},"24:3068:3669":{"crate_id":24,"path":["syn","token","Priv"],"kind":"struct"},"6:6100:8541":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ptrace_peeksiginfo_args"],"kind":"struct"},"24:5007:2641":{"crate_id":24,"path":["syn","generics","LifetimeParam"],"kind":"struct"},"2:26168:272":{"crate_id":2,"path":["core","num","wrapping","Wrapping"],"kind":"struct"},"23:322:2664":{"crate_id":23,"path":["quote","spanned","Spanned"],"kind":"trait"},"5:781:101":{"crate_id":5,"path":["alloc","collections","binary_heap","BinaryHeap"],"kind":"struct"},"17:9391:135":{"crate_id":17,"path":["object","read","any","File"],"kind":"enum"},"1:11518:10336":{"crate_id":1,"path":["std","sys_common","net","TcpListener"],"kind":"struct"},"17:11992:6665":{"crate_id":17,"path":["object","elf","CompressionHeader32"],"kind":"struct"},"1:6542:10045":{"crate_id":1,"path":["std","sync","poison","PoisonError"],"kind":"struct"},"5:5334:6139":{"crate_id":5,"path":["alloc","slice","hack","to_vec","DropGuard"],"kind":"struct"},"2:21214:33495":{"crate_id":2,"path":["core","core_simd","swizzle","deinterleave","Odd"],"kind":"struct"},"5:6676:6139":{"crate_id":5,"path":["alloc","vec","into_iter","drop","DropGuard"],"kind":"struct"},"2:3073:2522":{"crate_id":2,"path":["core","ops","drop","Drop"],"kind":"trait"},"2:41866:9726":{"crate_id":2,"path":["core","net","socket_addr","SocketAddr"],"kind":"enum"},"1:10833:31532":{"crate_id":1,"path":["std","sys","unix","kernel_copy","FdHandle"],"kind":"enum"},"17:12599:6795":{"crate_id":17,"path":["object","macho","Section32"],"kind":"struct"},"1:5383:10420":{"crate_id":1,"path":["std","process","Child"],"kind":"struct"},"24:845:10283":{"crate_id":24,"path":["syn","ext","private","Sealed"],"kind":"trait"},"2:46193:9081":{"crate_id":2,"path":["core","core_arch","simd","f64x1"],"kind":"struct"},"24:4934:3357":{"crate_id":24,"path":["syn","expr","ExprYield"],"kind":"struct"},"2:2825:251":{"crate_id":2,"path":["core","marker","StructuralPartialEq"],"kind":"trait"},"24:4584:2235":{"crate_id":24,"path":["syn","derive","DataUnion"],"kind":"struct"},"16:5696:22501":{"crate_id":16,"path":["gimli","read","cfi","CieOffsetEncoding"],"kind":"enum"},"1:6612:6224":{"crate_id":1,"path":["std","sync","remutex","ReentrantMutexGuard"],"kind":"struct"},"6:4764:8191":{"crate_id":6,"path":["libc","unix","linux_like","linux","posix_spawnattr_t"],"kind":"struct"},"5:7286:4766":{"crate_id":5,"path":["alloc","collections","binary_heap","Drain"],"kind":"struct"},"6:4800:8209":{"crate_id":6,"path":["libc","unix","linux_like","linux","inotify_event"],"kind":"struct"},"16:5384:22499":{"crate_id":16,"path":["gimli","endianity","RunTimeEndian"],"kind":"enum"},"2:9849:3555":{"crate_id":2,"path":["core","fmt","UpperHex"],"kind":"trait"},"2:43202:9654":{"crate_id":2,"path":["core","hash","sip","SipHasher"],"kind":"struct"},"6:6228:8571":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","sysinfo"],"kind":"struct"},"2:44767:225":{"crate_id":2,"path":["core","future","ready","Ready"],"kind":"struct"},"6:4686:8173":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Phdr"],"kind":"struct"},"1:8494:10415":{"crate_id":1,"path":["std","path","Component"],"kind":"enum"},"2:12375:3425":{"crate_id":2,"path":["core","str","traits","FromStr"],"kind":"trait"},"1:10432:10426":{"crate_id":1,"path":["std","sys","unix","process","process_common","CommandArgs"],"kind":"struct"},"2:43901:9666":{"crate_id":2,"path":["core","str","iter","SplitTerminator"],"kind":"struct"},"2:4070:32172":{"crate_id":2,"path":["core","asserting","TryCaptureWithDebug"],"kind":"struct"},"24:2224:2664":{"crate_id":24,"path":["syn","spanned","Spanned"],"kind":"trait"},"1:3734:10337":{"crate_id":1,"path":["std","net","tcp","TcpStream"],"kind":"struct"},"2:8878:3979":{"crate_id":2,"path":["core","panic","unwind_safe","UnwindSafe"],"kind":"trait"},"1:8536:9728":{"crate_id":1,"path":["std","path","Components"],"kind":"struct"},"24:4847:3337":{"crate_id":24,"path":["syn","expr","ExprIf"],"kind":"struct"},"24:4489:3305":{"crate_id":24,"path":["syn","attr","Attribute"],"kind":"struct"},"17:12725:6813":{"crate_id":17,"path":["object","macho","SubUmbrellaCommand"],"kind":"struct"},"2:46316:9090":{"crate_id":2,"path":["core","core_arch","simd","u32x4"],"kind":"struct"},"2:42559:10131":{"crate_id":2,"path":["core","sync","exclusive","Exclusive"],"kind":"struct"},"11:1107:21565":{"crate_id":11,"path":["hashbrown","map","OccupiedEntryRef"],"kind":"struct"},"1:1563:9561":{"crate_id":1,"path":["std","collections","hash","set","SymmetricDifference"],"kind":"struct"},"6:4755:8186":{"crate_id":6,"path":["libc","unix","linux_like","linux","posix_spawn_file_actions_t"],"kind":"struct"},"17:9934:22617":{"crate_id":17,"path":["object","read","coff","file","CoffFile"],"kind":"struct"},"24:4500:2175":{"crate_id":24,"path":["syn","attr","Meta"],"kind":"enum"},"1:12044:686":{"crate_id":1,"path":["std","f32"],"kind":"primitive"},"1:8974:10133":{"crate_id":1,"path":["std","sync","mpmc","array","ArrayToken"],"kind":"struct"},"17:14500:7305":{"crate_id":17,"path":["object","pe","NonPagedDebugInfo"],"kind":"struct"},"2:41929:200":{"crate_id":2,"path":["core","option","Option"],"kind":"enum"},"2:40487:10248":{"crate_id":2,"path":["core","ffi","c_char"],"kind":"type_alias"},"1:1910:699":{"crate_id":1,"path":["std","ffi"],"kind":"module"},"17:11227:9391":{"crate_id":17,"path":["object","read","pe","import","ImportDescriptorIterator"],"kind":"struct"},"2:4:1105":{"crate_id":2,"path":["core","panic"],"kind":"macro"},"6:1718:8002":{"crate_id":6,"path":["libc","unix","linux_like","utsname"],"kind":"struct"},"2:2964:3719":{"crate_id":2,"path":["core","ops","bit","Shr"],"kind":"trait"},"17:14043:7164":{"crate_id":17,"path":["object","pe","ImageDelayloadDescriptor"],"kind":"struct"},"17:12485:6778":{"crate_id":17,"path":["object","macho","FatArch64"],"kind":"struct"},"1:11292:6238":{"crate_id":1,"path":["std","sys_common","once","futex","CompletionGuard"],"kind":"struct"},"2:39684:15723":{"crate_id":2,"path":["core","ops","try_trait","Yeet"],"kind":"struct"},"18:590:6381":{"crate_id":18,"path":["memchr","memmem","twoway","TwoWay"],"kind":"struct"},"11:1917:9561":{"crate_id":11,"path":["hashbrown","set","SymmetricDifference"],"kind":"struct"},"6:5015:8321":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_nl"],"kind":"struct"},"1:8797:10426":{"crate_id":1,"path":["std","process","CommandArgs"],"kind":"struct"},"24:5495:3389":{"crate_id":24,"path":["syn","ty","TypeReference"],"kind":"struct"},"1:12034:448":{"crate_id":1,"path":["std","char"],"kind":"primitive"},"2:8879:3978":{"crate_id":2,"path":["core","panic","unwind_safe","RefUnwindSafe"],"kind":"trait"},"24:1442:26633":{"crate_id":24,"path":["syn","parse","discouraged","Speculative"],"kind":"trait"},"17:14317:7257":{"crate_id":17,"path":["object","pe","ImageArm64RuntimeFunctionEntry"],"kind":"struct"},"16:2696:7349":{"crate_id":16,"path":["gimli","common","RangeListsOffset"],"kind":"struct"},"1:4571:10393":{"crate_id":1,"path":["std","os","unix","thread","JoinHandleExt"],"kind":"trait"},"16:5982:9442":{"crate_id":16,"path":["gimli","read","cfi","RegisterRuleIter"],"kind":"struct"},"17:13056:6880":{"crate_id":17,"path":["object","macho","EncryptionInfoCommand64"],"kind":"struct"},"2:3272:15722":{"crate_id":2,"path":["core","ops","range","OneSidedRange"],"kind":"trait"},"16:2406:7337":{"crate_id":16,"path":["gimli","common","DebugAddrBase"],"kind":"struct"},"1:10946:7772":{"crate_id":1,"path":["std","sys","unix","os_str","Buf"],"kind":"struct"},"1:11047:6236":{"crate_id":1,"path":["std","sys","unix","process","process_inner","posix_spawn","PosixSpawnFileActions"],"kind":"struct"},"14:160:10024":{"crate_id":14,"path":["rustc_demangle","Demangle"],"kind":"struct"},"2:2958:3717":{"crate_id":2,"path":["core","ops","bit","Shl"],"kind":"trait"},"17:13041:6876":{"crate_id":17,"path":["object","macho","EncryptionInfoCommand32"],"kind":"struct"},"1:3932:10342":{"crate_id":1,"path":["std","os","unix","ffi","os_str","OsStringExt"],"kind":"trait"},"9:52:10106":{"crate_id":9,"path":["miniz_oxide","inflate","core","DecompressorOxide"],"kind":"struct"},"1:1407:152":{"crate_id":1,"path":["std","collections","hash","set","HashSet"],"kind":"struct"},"2:40426:9023":{"crate_id":2,"path":["core","char","TryFromCharError"],"kind":"struct"},"1:8191:3497":{"crate_id":1,"path":["std","io","Chain"],"kind":"struct"},"2:9638:3544":{"crate_id":2,"path":["core","fmt","builders","FormatterFn"],"kind":"struct"},"1:12041:1615":{"crate_id":1,"path":["std","tuple"],"kind":"primitive"},"2:39542:216":{"crate_id":2,"path":["core","ops","range","Range"],"kind":"struct"},"24:5500:3390":{"crate_id":24,"path":["syn","ty","TypeSlice"],"kind":"struct"},"24:5307:2337":{"crate_id":24,"path":["syn","path","PathArguments"],"kind":"enum"},"17:14421:7285":{"crate_id":17,"path":["object","pe","ImageDebugDirectory"],"kind":"struct"},"2:3692:3401":{"crate_id":2,"path":["core","array","iter","IntoIter"],"kind":"struct"},"1:10157:2345":{"crate_id":1,"path":["std","sys","unix","os_str","Slice"],"kind":"struct"},"2:11491:15629":{"crate_id":2,"path":["core","slice","iter","GroupByMut"],"kind":"struct"},"5:3589:3402":{"crate_id":5,"path":["alloc","collections","linked_list","Iter"],"kind":"struct"},"17:11359:22766":{"crate_id":17,"path":["object","read","pe","resource","ResourceNameOrId"],"kind":"enum"},"11:710:10126":{"crate_id":11,"path":["hashbrown","map","IntoKeys"],"kind":"struct"},"2:42057:4690":{"crate_id":2,"path":["core","panicking","AssertKind"],"kind":"enum"},"24:2745:3654":{"crate_id":24,"path":["syn","token","Do"],"kind":"struct"},"2:2869:4323":{"crate_id":2,"path":["core","marker","Freeze"],"kind":"trait"},"1:9973:9646":{"crate_id":1,"path":["std","sys","unix","net","Socket"],"kind":"struct"},"16:4557:7398":{"crate_id":16,"path":["gimli","constants","DwEnd"],"kind":"struct"},"24:4281:3714":{"crate_id":24,"path":["syn","token","Question"],"kind":"struct"},"17:13576:7041":{"crate_id":17,"path":["object","pe","ImageOptionalHeader32"],"kind":"struct"},"2:22289:10283":{"crate_id":2,"path":["core","core_simd","simd","ptr","sealed","Sealed"],"kind":"trait"},"1:12057:1689":{"crate_id":1,"path":["std","usize"],"kind":"primitive"},"2:2538:15688":{"crate_id":2,"path":["core","convert","num","FloatToInt"],"kind":"trait"},"17:10037:6512":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbolTable"],"kind":"struct"},"17:13287:6918":{"crate_id":17,"path":["object","macho","RelocationInfo"],"kind":"struct"},"1:7856:9185":{"crate_id":1,"path":["std","fs","FileTimes"],"kind":"struct"},"24:2643:2022":{"crate_id":24,"path":["syn","token","Box"],"kind":"struct"},"1:10534:10319":{"crate_id":1,"path":["std","sys","unix","stdio","Stdin"],"kind":"struct"},"24:5335:2642":{"crate_id":24,"path":["syn","path","AngleBracketedGenericArguments"],"kind":"struct"},"16:7318:7506":{"crate_id":16,"path":["gimli","read","op","Piece"],"kind":"struct"},"1:4471:10375":{"crate_id":1,"path":["std","os","unix","process","CommandExt"],"kind":"trait"},"2:41980:170":{"crate_id":2,"path":["core","option","Item"],"kind":"struct"},"1:9197:9265":{"crate_id":1,"path":["std","sys","personality","dwarf","eh","EHContext"],"kind":"struct"},"2:48066:9165":{"crate_id":2,"path":["core","core_arch","simd","i64x8"],"kind":"struct"},"17:11887:6637":{"crate_id":17,"path":["object","elf","FileHeader32"],"kind":"struct"},"6:4480:8099":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_event"],"kind":"struct"},"24:5359:2526":{"crate_id":24,"path":["syn","path","QSelf"],"kind":"struct"},"16:5760:22502":{"crate_id":16,"path":["gimli","read","cfi","CieOrFde"],"kind":"enum"},"24:1615:3537":{"crate_id":24,"path":["syn","parse","Nothing"],"kind":"struct"},"21:2303:2365":{"crate_id":21,"path":["proc_macro","bridge","Punct"],"kind":"struct"},"2:2911:6358":{"crate_id":2,"path":["core","ops","arith","Neg"],"kind":"trait"},"5:5982:6165":{"crate_id":5,"path":["alloc","sync","Weak"],"kind":"struct"},"17:10589:9377":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSubsection"],"kind":"struct"},"2:43827:9661":{"crate_id":2,"path":["core","str","iter","CharIndices"],"kind":"struct"},"6:563:7846":{"crate_id":6,"path":["libc","unix","linger"],"kind":"struct"},"2:3062:3575":{"crate_id":2,"path":["core","ops","deref","DerefMut"],"kind":"trait"},"1:6072:6214":{"crate_id":1,"path":["std","sync","mpmc","list","Channel"],"kind":"struct"},"14:0:3166":{"crate_id":14,"path":["rustc_demangle"],"kind":"module"},"24:3289:2011":{"crate_id":24,"path":["syn","token","Union"],"kind":"struct"},"17:12766:6820":{"crate_id":17,"path":["object","macho","DylinkerCommand"],"kind":"struct"},"16:8115:9544":{"crate_id":16,"path":["gimli","read","unit","EntriesCursor"],"kind":"struct"},"2:21180:33490":{"crate_id":2,"path":["core","core_simd","swizzle","rotate_elements_right","Rotate"],"kind":"struct"},"2:43004:134":{"crate_id":2,"path":["core","fmt","Error"],"kind":"struct"},"17:12984:6869":{"crate_id":17,"path":["object","macho","UuidCommand"],"kind":"struct"},"24:1337:35960":{"crate_id":24,"path":["syn","lookahead","TokenMarker"],"kind":"enum"},"21:2771:1974":{"crate_id":21,"path":["proc_macro","Ident"],"kind":"struct"},"24:3984:131":{"crate_id":24,"path":["syn","token","Eq"],"kind":"struct"},"6:4947:8279":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_initmsg"],"kind":"struct"},"24:4153:3705":{"crate_id":24,"path":["syn","token","Or"],"kind":"struct"},"18:719:6393":{"crate_id":18,"path":["memchr","memmem","NeedleInfo"],"kind":"struct"},"1:638:10191":{"crate_id":1,"path":["std","backtrace","BacktraceFrame"],"kind":"struct"},"16:2596:7345":{"crate_id":16,"path":["gimli","common","DebugLocListsIndex"],"kind":"struct"},"24:2043:3408":{"crate_id":24,"path":["syn","punctuated","PrivateIterMut"],"kind":"struct"},"1:1759:10215":{"crate_id":1,"path":["std","env","Vars"],"kind":"struct"},"16:7523:9534":{"crate_id":16,"path":["gimli","read","pubtypes","PubTypesEntry"],"kind":"struct"},"17:434:6445":{"crate_id":17,"path":["object","read","any","Section"],"kind":"struct"},"9:330:7752":{"crate_id":9,"path":["miniz_oxide","inflate","core","LocalVars"],"kind":"struct"},"11:2443:4766":{"crate_id":11,"path":["hashbrown","table","Drain"],"kind":"struct"},"17:13275:6578":{"crate_id":17,"path":["object","macho","Relocation"],"kind":"struct"},"1:363:4568":{"crate_id":1,"path":["std","thread","scoped","ScopedJoinHandle"],"kind":"struct"},"17:11548:6605":{"crate_id":17,"path":["object","read","SymbolMapName"],"kind":"struct"},"6:4884:8249":{"crate_id":6,"path":["libc","unix","linux_like","linux","seccomp_data"],"kind":"struct"},"2:48356:9180":{"crate_id":2,"path":["core","core_arch","x86","cpuid","CpuidResult"],"kind":"struct"},"17:9522:22584":{"crate_id":17,"path":["object","read","any","SectionIterator"],"kind":"struct"},"24:5355:3374":{"crate_id":24,"path":["syn","path","ParenthesizedGenericArguments"],"kind":"struct"},"17:13974:7147":{"crate_id":17,"path":["object","pe","ImageThunkData64"],"kind":"struct"},"17:10647:6591":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCache"],"kind":"struct"},"16:5995:9403":{"crate_id":16,"path":["gimli","read","cfi","UnwindTableRow"],"kind":"struct"},"16:7360:35562":{"crate_id":16,"path":["gimli","read","op","EvaluationWaiting"],"kind":"enum"},"1:2519:10313":{"crate_id":1,"path":["std","io","buffered","bufreader","BufReader"],"kind":"struct"},"6:5829:8389":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","statx"],"kind":"struct"},"2:46240:9082":{"crate_id":2,"path":["core","core_arch","simd","u8x16"],"kind":"struct"},"2:40336:9621":{"crate_id":2,"path":["core","char","decode","DecodeUtf16"],"kind":"struct"},"17:10098:22608":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdat"],"kind":"struct"},"1:3737:10336":{"crate_id":1,"path":["std","net","tcp","TcpListener"],"kind":"struct"},"6:6114:8543":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_exit"],"kind":"struct"},"2:10697:9590":{"crate_id":2,"path":["core","slice","iter","Split"],"kind":"struct"},"24:924:3034":{"crate_id":24,"path":["syn","generics","TypeGenerics"],"kind":"struct"},"2:21442:8799":{"crate_id":2,"path":["core","core_simd","masks","mask_impl","Mask"],"kind":"struct"},"17:13136:6900":{"crate_id":17,"path":["object","macho","LinkerOptionCommand"],"kind":"struct"},"17:12173:6697":{"crate_id":17,"path":["object","elf","Dyn32"],"kind":"struct"},"5:35:4680":{"crate_id":5,"path":["alloc","raw_vec","RawVec"],"kind":"struct"},"2:40755:3509":{"crate_id":2,"path":["core","iter","adapters","skip","Skip"],"kind":"struct"},"2:2668:134":{"crate_id":2,"path":["core","error","Error"],"kind":"trait"},"1:8282:9727":{"crate_id":1,"path":["std","os","unix","net","ancillary","SocketCred"],"kind":"struct"},"6:4549:8128":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_ramp_effect"],"kind":"struct"},"24:346:35950":{"crate_id":24,"path":["syn","buffer","empty","UnsafeSyncEntry"],"kind":"struct"},"16:4806:7405":{"crate_id":16,"path":["gimli","constants","DwCc"],"kind":"struct"},"2:40698:3505":{"crate_id":2,"path":["core","iter","adapters","map","Map"],"kind":"struct"},"24:5071:2109":{"crate_id":24,"path":["syn","generics","WherePredicate"],"kind":"enum"},"24:3272:3674":{"crate_id":24,"path":["syn","token","Typeof"],"kind":"struct"},"11:2548:7709":{"crate_id":11,"path":["hashbrown","raw","bitmask","BitMaskIter"],"kind":"struct"},"1:2203:10262":{"crate_id":1,"path":["std","fs","DirEntry"],"kind":"struct"},"24:261:10023":{"crate_id":24,"path":["syn","attr","parsing","DisplayPath"],"kind":"struct"},"23:46:3431":{"crate_id":23,"path":["quote","ident_fragment","IdentFragment"],"kind":"trait"},"6:5955:8465":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","mallinfo2"],"kind":"struct"},"6:5146:8382":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_can_addr"],"kind":"union"},"2:21981:10481":{"crate_id":2,"path":["core","core_simd","vector","SimdElement"],"kind":"trait"},"9:393:21487":{"crate_id":9,"path":["miniz_oxide","MZFlush"],"kind":"enum"},"24:912:35957":{"crate_id":24,"path":["syn","generics","ConstParamsMut"],"kind":"struct"},"6:6263:8596":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","semid_ds"],"kind":"struct"},"17:14135:7189":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation32V2"],"kind":"struct"},"1:9481:6233":{"crate_id":1,"path":["std","sys","unix","fs","Dir"],"kind":"struct"},"24:3085:3670":{"crate_id":24,"path":["syn","token","Pub"],"kind":"struct"},"2:9855:3553":{"crate_id":2,"path":["core","fmt","UpperExp"],"kind":"trait"},"11:2554:35520":{"crate_id":11,"path":["hashbrown","raw","Fallibility"],"kind":"enum"},"2:2923:6350":{"crate_id":2,"path":["core","ops","arith","MulAssign"],"kind":"trait"},"2:13315:4678":{"crate_id":2,"path":["core","alloc","Allocator"],"kind":"trait"},"5:6107:6159":{"crate_id":5,"path":["alloc","sync","from_iter_exact","Guard"],"kind":"struct"},"6:6691:8626":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","flock64"],"kind":"struct"},"2:2577:76":{"crate_id":2,"path":["core","convert","AsMut"],"kind":"trait"},"16:6156:9469":{"crate_id":16,"path":["gimli","read","cfi","CallFrameInstructionIter"],"kind":"struct"},"17:12960:6866":{"crate_id":17,"path":["object","macho","TwolevelHint"],"kind":"struct"},"2:32405:3566":{"crate_id":2,"path":["core","error","tags","Ref"],"kind":"struct"},"17:12238:6713":{"crate_id":17,"path":["object","elf","Verneed"],"kind":"struct"},"17:11307:6578":{"crate_id":17,"path":["object","read","pe","relocation","Relocation"],"kind":"struct"},"1:881:9558":{"crate_id":1,"path":["std","collections","hash","map","Values"],"kind":"struct"},"17:12935:6862":{"crate_id":17,"path":["object","macho","DylibReference"],"kind":"struct"},"5:5797:257":{"crate_id":5,"path":["alloc","string","ToString"],"kind":"trait"},"1:1822:10231":{"crate_id":1,"path":["std","env","ArgsOs"],"kind":"struct"},"1:1568:2011":{"crate_id":1,"path":["std","collections","hash","set","Union"],"kind":"struct"},"2:42005:3401":{"crate_id":2,"path":["core","option","IntoIter"],"kind":"struct"},"5:3191:35444":{"crate_id":5,"path":["alloc","collections","btree","set","DifferenceInner"],"kind":"enum"},"17:8896:22578":{"crate_id":17,"path":["object","common","RelocationEncoding"],"kind":"enum"},"6:4847:8235":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_j1939"],"kind":"struct"},"17:13839:7111":{"crate_id":17,"path":["object","pe","ImageAuxSymbolFunction"],"kind":"struct"},"2:2294:102":{"crate_id":2,"path":["core","borrow","Borrow"],"kind":"trait"},"1:10475:6234":{"crate_id":1,"path":["std","sys","unix","stack_overflow","Handler"],"kind":"struct"},"2:12420:15639":{"crate_id":2,"path":["core","str","pattern","Pattern"],"kind":"trait"},"1:10942:10039":{"crate_id":1,"path":["std","sys","unix","os","JoinPathsError"],"kind":"struct"},"6:6943:8741":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user_fpregs_struct"],"kind":"struct"},"2:42681:2578":{"crate_id":2,"path":["core","fmt","num","Binary"],"kind":"struct"},"23:38:3039":{"crate_id":23,"path":["quote","format_ident"],"kind":"macro"},"17:10166:22633":{"crate_id":17,"path":["object","read","coff","import","ImportType"],"kind":"enum"},"24:5503:3391":{"crate_id":24,"path":["syn","ty","TypeTraitObject"],"kind":"struct"},"6:5009:8320":{"crate_id":6,"path":["libc","unix","linux_like","linux","rlimit64"],"kind":"struct"},"2:32351:7711":{"crate_id":2,"path":["core","convert","Infallible"],"kind":"enum"},"17:12063:6677":{"crate_id":17,"path":["object","elf","Syminfo32"],"kind":"struct"},"2:4058:32173":{"crate_id":2,"path":["core","asserting","TryCaptureWithoutDebug"],"kind":"struct"},"2:48104:9166":{"crate_id":2,"path":["core","core_arch","simd","u64x8"],"kind":"struct"},"17:14057:7171":{"crate_id":17,"path":["object","pe","ImageResourceDirectory"],"kind":"struct"},"1:8859:10452":{"crate_id":1,"path":["std","sync","mpsc","TryIter"],"kind":"struct"},"1:12056:842":{"crate_id":1,"path":["std","isize"],"kind":"primitive"},"15:394:21604":{"crate_id":15,"path":["addr2line","DebugFile"],"kind":"enum"},"16:6696:7458":{"crate_id":16,"path":["gimli","read","line","LineRow"],"kind":"struct"},"1:5417:10422":{"crate_id":1,"path":["std","process","ChildStdout"],"kind":"struct"},"16:6204:10086":{"crate_id":16,"path":["gimli","read","dwarf","Dwarf"],"kind":"struct"},"2:44125:9679":{"crate_id":2,"path":["core","str","iter","SplitWhitespace"],"kind":"struct"},"2:32412:9615":{"crate_id":2,"path":["core","error","Source"],"kind":"struct"},"17:10431:22685":{"crate_id":17,"path":["object","read","elf","note","GnuPropertyIterator"],"kind":"struct"},"17:13694:7083":{"crate_id":17,"path":["object","pe","Guid"],"kind":"struct"},"1:3201:10319":{"crate_id":1,"path":["std","io","stdio","Stdin"],"kind":"struct"},"21:53:4790":{"crate_id":21,"path":["proc_macro","bridge","buffer","Buffer"],"kind":"struct"},"2:42688:3546":{"crate_id":2,"path":["core","fmt","num","Octal"],"kind":"struct"},"6:4473:8095":{"crate_id":6,"path":["libc","unix","linux_like","linux","sembuf"],"kind":"struct"},"23:0:1218":{"crate_id":23,"path":["quote"],"kind":"module"},"24:5516:3379":{"crate_id":24,"path":["syn","ty","BareVariadic"],"kind":"struct"},"16:7006:22512":{"crate_id":16,"path":["gimli","read","loclists","LocListIter"],"kind":"struct"},"5:7608:4764":{"crate_id":5,"path":["alloc","vec","extract_if","ExtractIf"],"kind":"struct"},"17:10279:22640":{"crate_id":17,"path":["object","read","elf","section","ElfSection"],"kind":"struct"},"6:4428:8073":{"crate_id":6,"path":["libc","unix","linux_like","linux","itimerspec"],"kind":"struct"},"24:5104:2051":{"crate_id":24,"path":["syn","lifetime","Lifetime"],"kind":"function"},"17:9278:6498":{"crate_id":17,"path":["object","endian","I64Bytes"],"kind":"struct"},"2:21195:33498":{"crate_id":2,"path":["core","core_simd","swizzle","interleave","Lo"],"kind":"struct"},"1:5310:126":{"crate_id":1,"path":["std","path","Display"],"kind":"struct"},"1:12049:792":{"crate_id":1,"path":["std","i64"],"kind":"primitive"},"1:504:4545":{"crate_id":1,"path":["std","thread","PanicGuard"],"kind":"struct"},"2:44115:9678":{"crate_id":2,"path":["core","str","iter","LinesAny"],"kind":"struct"},"21:183:4415":{"crate_id":21,"path":["proc_macro","bridge","closure","Closure"],"kind":"struct"},"1:7849:9723":{"crate_id":1,"path":["std","fs","OpenOptions"],"kind":"struct"},"16:2380:7336":{"crate_id":16,"path":["gimli","common","DebugAbbrevOffset"],"kind":"struct"},"6:4388:8040":{"crate_id":6,"path":["libc","unix","linux_like","linux","dqblk"],"kind":"struct"},"1:3203:10320":{"crate_id":1,"path":["std","io","stdio","StdinLock"],"kind":"struct"},"11:1923:2011":{"crate_id":11,"path":["hashbrown","set","Union"],"kind":"struct"},"16:6318:7431":{"crate_id":16,"path":["gimli","read","reader","ReaderOffsetId"],"kind":"struct"},"6:6700:8627":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","siginfo_t"],"kind":"struct"},"17:13990:7149":{"crate_id":17,"path":["object","pe","ImageTlsDirectory64"],"kind":"struct"},"21:648:3589":{"crate_id":21,"path":["proc_macro","diagnostic","MultiSpan"],"kind":"trait"},"1:3396:6159":{"crate_id":1,"path":["std","io","Guard"],"kind":"struct"},"1:10988:9251":{"crate_id":1,"path":["std","sys","unix","process","process_common","ExitCode"],"kind":"struct"},"17:13102:6887":{"crate_id":17,"path":["object","macho","BuildToolVersion"],"kind":"struct"},"11:364:6132":{"crate_id":11,"path":["hashbrown","raw","RawIntoIter"],"kind":"struct"},"17:10266:22641":{"crate_id":17,"path":["object","read","elf","section","ElfSectionIterator"],"kind":"struct"},"2:40669:3503":{"crate_id":2,"path":["core","iter","adapters","fuse","Fuse"],"kind":"struct"},"2:9847:3554":{"crate_id":2,"path":["core","fmt","LowerHex"],"kind":"trait"},"24:5194:3370":{"crate_id":24,"path":["syn","mac","MacroDelimiter"],"kind":"enum"},"2:13004:146":{"crate_id":2,"path":["core","future","future","Future"],"kind":"trait"},"17:10127:9364":{"crate_id":17,"path":["object","read","coff","import","ImportFile"],"kind":"struct"},"11:2124:9529":{"crate_id":11,"path":["hashbrown","set","Entry"],"kind":"enum"},"6:1734:8007":{"crate_id":6,"path":["libc","unix","linux_like","sigevent"],"kind":"struct"},"1:1542:4766":{"crate_id":1,"path":["std","collections","hash","set","Drain"],"kind":"struct"},"6:6961:8744":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ucontext_t"],"kind":"struct"},"6:4878:8248":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_fprog"],"kind":"struct"},"13:0:3159":{"crate_id":13,"path":["std_detect"],"kind":"module"},"17:13982:7148":{"crate_id":17,"path":["object","pe","ImageThunkData32"],"kind":"struct"},"21:2270:1962":{"crate_id":21,"path":["proc_macro","bridge","Group"],"kind":"struct"},"6:5075:8348":{"crate_id":6,"path":["libc","unix","linux_like","linux","mq_attr"],"kind":"struct"},"1:12053:1632":{"crate_id":1,"path":["std","u32"],"kind":"primitive"},"17:14515:7306":{"crate_id":17,"path":["object","pe","ImageArchitectureEntry"],"kind":"struct"},"2:3986:6159":{"crate_id":2,"path":["core","array","Guard"],"kind":"struct"},"21:2640:3585":{"crate_id":21,"path":["proc_macro","ExpandError"],"kind":"struct"},"9:426:21488":{"crate_id":9,"path":["miniz_oxide","MZStatus"],"kind":"enum"},"17:12474:6775":{"crate_id":17,"path":["object","macho","FatArch32"],"kind":"struct"},"6:7365:8751":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","align","max_align_t"],"kind":"struct"},"1:7924:10044":{"crate_id":1,"path":["std","io","buffered","IntoInnerError"],"kind":"struct"},"1:6598:10446":{"crate_id":1,"path":["std","sync","remutex","ReentrantMutex"],"kind":"struct"},"17:9973:22611":{"crate_id":17,"path":["object","read","coff","section","CoffSegment"],"kind":"struct"},"17:11935:1974":{"crate_id":17,"path":["object","elf","Ident"],"kind":"struct"},"2:23290:186":{"crate_id":2,"path":["core","num","nonzero","NonZeroI128"],"kind":"struct"},"4:0:3160":{"crate_id":4,"path":["rustc_std_workspace_core"],"kind":"module"},"16:6189:9472":{"crate_id":16,"path":["gimli","read","cfi","PointerEncodingParameters"],"kind":"struct"},"17:13633:7076":{"crate_id":17,"path":["object","pe","ImageOptionalHeader64"],"kind":"struct"},"24:4351:3719":{"crate_id":24,"path":["syn","token","Shr"],"kind":"struct"},"6:4789:8202":{"crate_id":6,"path":["libc","unix","linux_like","linux","arpd_request"],"kind":"struct"},"2:21979:10283":{"crate_id":2,"path":["core","core_simd","vector","sealed","Sealed"],"kind":"trait"},"17:10317:6523":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbolTable"],"kind":"struct"},"17:14379:7279":{"crate_id":17,"path":["object","pe","ImageEnclaveConfig64"],"kind":"struct"},"17:14523:7309":{"crate_id":17,"path":["object","pe","ImportObjectHeader"],"kind":"struct"},"10:0:3163":{"crate_id":10,"path":["adler"],"kind":"module"},"24:1727:10144":{"crate_id":24,"path":["syn","path","printing","span","QSelfDelimiters"],"kind":"struct"},"17:13189:6904":{"crate_id":17,"path":["object","macho","EntryPointCommand"],"kind":"struct"},"2:46156:9079":{"crate_id":2,"path":["core","core_arch","simd","i64x1"],"kind":"struct"},"17:11390:22590":{"crate_id":17,"path":["object","read","traits","NoDynamicRelocationIterator"],"kind":"struct"},"6:1558:7901":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_ll"],"kind":"struct"},"1:1535:3402":{"crate_id":1,"path":["std","collections","hash","set","Iter"],"kind":"struct"},"16:6687:9497":{"crate_id":16,"path":["gimli","read","line","LineInstructions"],"kind":"struct"},"2:40557:3486":{"crate_id":2,"path":["core","iter","adapters","array_chunks","ArrayChunks"],"kind":"struct"},"17:8766:22574":{"crate_id":17,"path":["object","common","ComdatKind"],"kind":"enum"},"6:1604:7930":{"crate_id":6,"path":["libc","unix","linux_like","lconv"],"kind":"struct"},"5:6832:4770":{"crate_id":5,"path":["alloc","vec","set_len_on_drop","SetLenOnDrop"],"kind":"struct"},"17:10930:6563":{"crate_id":17,"path":["object","read","macho","segment","MachOSegmentInternal"],"kind":"struct"},"16:2810:7354":{"crate_id":16,"path":["gimli","common","DebugStrOffsetsIndex"],"kind":"struct"},"5:276:2022":{"crate_id":5,"path":["alloc","boxed","Box"],"kind":"struct"},"17:9791:35604":{"crate_id":17,"path":["object","read","any","SectionRelocationIteratorInternal"],"kind":"enum"},"6:1650:7967":{"crate_id":6,"path":["libc","unix","linux_like","in6_rtmsg"],"kind":"struct"},"11:856:10204":{"crate_id":11,"path":["hashbrown","map","RawOccupiedEntryMut"],"kind":"struct"},"6:7639:8775":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_mutex_t"],"kind":"struct"},"20:878:258":{"crate_id":20,"path":["proc_macro2","TokenStream"],"kind":"struct"},"17:12712:6812":{"crate_id":17,"path":["object","macho","SubClientCommand"],"kind":"struct"},"17:13488:6978":{"crate_id":17,"path":["object","pe","ImageVxdHeader"],"kind":"struct"},"6:1674:7984":{"crate_id":6,"path":["libc","unix","linux_like","arpreq_old"],"kind":"struct"},"16:2450:7339":{"crate_id":16,"path":["gimli","common","DebugArangesOffset"],"kind":"struct"},"17:11163:6570":{"crate_id":17,"path":["object","read","pe","data_directory","DataDirectories"],"kind":"struct"},"24:2728:122":{"crate_id":24,"path":["syn","token","Default"],"kind":"struct"},"24:2231:10283":{"crate_id":24,"path":["syn","spanned","private","Sealed"],"kind":"trait"},"17:10085:22609":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdatIterator"],"kind":"struct"},"1:5242:209":{"crate_id":1,"path":["std","path","Path"],"kind":"struct"},"6:4808:8213":{"crate_id":6,"path":["libc","unix","linux_like","linux","fanotify_response"],"kind":"struct"},"11:774:9557":{"crate_id":11,"path":["hashbrown","map","Keys"],"kind":"struct"},"6:7598:8766":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_mutexattr_t"],"kind":"struct"},"1:952:10206":{"crate_id":1,"path":["std","collections","hash","map","RawEntryBuilder"],"kind":"struct"},"1:6432:10441":{"crate_id":1,"path":["std","sync","once","OnceState"],"kind":"struct"},"2:3209:217":{"crate_id":2,"path":["core","ops","range","RangeBounds"],"kind":"trait"},"17:12025:6671":{"crate_id":17,"path":["object","elf","Sym32"],"kind":"struct"},"17:13229:6909":{"crate_id":17,"path":["object","macho","NoteCommand"],"kind":"struct"},"6:4543:8125":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_constant_effect"],"kind":"struct"},"17:11262:9393":{"crate_id":17,"path":["object","read","pe","import","DelayLoadImportTable"],"kind":"struct"},"2:40550:10279":{"crate_id":2,"path":["core","io","borrowed_buf","BorrowedCursor"],"kind":"struct"},"17:2150:22673":{"crate_id":17,"path":["object","read","elf","relocation","ElfRelaIterator"],"kind":"enum"},"1:12055:1630":{"crate_id":1,"path":["std","u128"],"kind":"primitive"},"2:48200:9172":{"crate_id":2,"path":["core","core_arch","x86","__m256"],"kind":"struct"},"1:9027:1968":{"crate_id":1,"path":["std","sync","mpmc","select","Token"],"kind":"struct"},"6:1507:7873":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreqn"],"kind":"struct"},"6:7679:8783":{"crate_id":6,"path":["libc","unix","linux_like","linux","canxl_frame"],"kind":"struct"},"17:10686:22692":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCacheImage"],"kind":"struct"},"2:2915:3446":{"crate_id":2,"path":["core","ops","arith","AddAssign"],"kind":"trait"},"17:12453:6771":{"crate_id":17,"path":["object","macho","DyldSubCacheInfo"],"kind":"struct"},"2:9792:232":{"crate_id":2,"path":["core","fmt","Result"],"kind":"type_alias"},"6:6169:8559":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","utmpx"],"kind":"struct"},"9:0:3162":{"crate_id":9,"path":["miniz_oxide"],"kind":"module"},"24:5382:1957":{"crate_id":24,"path":["syn","ty","Type"],"kind":"enum"},"1:1055:10207":{"crate_id":1,"path":["std","collections","hash","map","OccupiedEntry"],"kind":"struct"},"2:23135:196":{"crate_id":2,"path":["core","num","nonzero","NonZeroUsize"],"kind":"struct"},"2:2212:4702":{"crate_id":2,"path":["core","ptr","from_exposed_addr_mut"],"kind":"function"},"23:148:3999":{"crate_id":23,"path":["quote","__private","HasIterator"],"kind":"struct"},"2:2943:6336":{"crate_id":2,"path":["core","ops","bit","BitAnd"],"kind":"trait"},"1:7028:6227":{"crate_id":1,"path":["std","sys_common","lazy_box","LazyBox"],"kind":"struct"},"16:5743:9419":{"crate_id":16,"path":["gimli","read","cfi","CfiEntriesIter"],"kind":"struct"},"16:5648:22500":{"crate_id":16,"path":["gimli","read","cfi","EhHdrTableIter"],"kind":"struct"},"17:13950:7139":{"crate_id":17,"path":["object","pe","ImageExportDirectory"],"kind":"struct"},"2:44282:9690":{"crate_id":2,"path":["core","str","pattern","CharArraySearcher"],"kind":"struct"},"1:4702:10402":{"crate_id":1,"path":["std","os","linux","process","ChildExt"],"kind":"trait"},"2:10052:149":{"crate_id":2,"path":["core","hash","Hash"],"kind":"trait"},"24:4327:3717":{"crate_id":24,"path":["syn","token","Shl"],"kind":"struct"},"2:22067:10565":{"crate_id":2,"path":["core","core_simd","simd","num","float","SimdFloat"],"kind":"trait"},"21:2242:3423":{"crate_id":21,"path":["proc_macro","bridge","DelimSpan"],"kind":"struct"},"2:7292:3460":{"crate_id":2,"path":["core","iter","range","Step"],"kind":"trait"},"2:43233:9655":{"crate_id":2,"path":["core","hash","sip","Sip13Rounds"],"kind":"struct"},"17:9575:35601":{"crate_id":17,"path":["object","read","any","ComdatIteratorInternal"],"kind":"enum"},"18:538:6378":{"crate_id":18,"path":["memchr","memmem","rabinkarp","NeedleHash"],"kind":"struct"},"1:4966:3967":{"crate_id":1,"path":["std","panic","always_abort"],"kind":"function"},"2:4458:3568":{"crate_id":2,"path":["core","cell","RefMut"],"kind":"struct"},"2:7462:3463":{"crate_id":2,"path":["core","iter","sources","empty","Empty"],"kind":"struct"},"17:14002:7155":{"crate_id":17,"path":["object","pe","ImageTlsDirectory32"],"kind":"struct"},"17:11474:6459":{"crate_id":17,"path":["object","read","SectionIndex"],"kind":"struct"},"20:698:9343":{"crate_id":20,"path":["proc_macro2","rcvec","RcVecIntoIter"],"kind":"struct"},"1:12037:1142":{"crate_id":1,"path":["std","pointer"],"kind":"primitive"},"17:11662:6609":{"crate_id":17,"path":["object","read","CodeView"],"kind":"struct"},"2:12196:9674":{"crate_id":2,"path":["core","str","iter","MatchesInternal"],"kind":"struct"},"2:22580:9606":{"crate_id":2,"path":["core","num","dec2flt","ParseFloatError"],"kind":"struct"},"2:47958:9163":{"crate_id":2,"path":["core","core_arch","simd","u32x16"],"kind":"struct"},"16:7513:9533":{"crate_id":16,"path":["gimli","read","pubnames","PubNamesEntryIter"],"kind":"struct"},"2:43663:15626":{"crate_id":2,"path":["core","slice","iter","ChunksMut"],"kind":"struct"},"11:1007:9529":{"crate_id":11,"path":["hashbrown","map","Entry"],"kind":"enum"},"2:21168:33490":{"crate_id":2,"path":["core","core_simd","swizzle","rotate_elements_left","Rotate"],"kind":"struct"},"1:2371:10270":{"crate_id":1,"path":["std","fs","canonicalize"],"kind":"function"},"16:2864:7356":{"crate_id":16,"path":["gimli","common","DebugTypeSignature"],"kind":"struct"},"1:646:10193":{"crate_id":1,"path":["std","backtrace","BytesOrWide"],"kind":"enum"},"6:4860:8240":{"crate_id":6,"path":["libc","unix","linux_like","linux","j1939_filter"],"kind":"struct"},"2:40586:3497":{"crate_id":2,"path":["core","iter","adapters","chain","Chain"],"kind":"struct"},"2:46706:9102":{"crate_id":2,"path":["core","core_arch","simd","m64x2"],"kind":"struct"},"17:8660:22557":{"crate_id":17,"path":["object","common","AddressSize"],"kind":"enum"},"9:237:9049":{"crate_id":9,"path":["miniz_oxide","inflate","core","State"],"kind":"enum"},"16:8195:9548":{"crate_id":16,"path":["gimli","read","unit","DebugTypesUnitHeadersIter"],"kind":"struct"},"5:4401:6159":{"crate_id":5,"path":["alloc","collections","vec_deque","write_iter_wrapping","Guard"],"kind":"struct"},"1:6148:6203":{"crate_id":1,"path":["std","sync","mpmc","waker","Waker"],"kind":"struct"},"20:781:26618":{"crate_id":20,"path":["proc_macro2","extra","DelimSpanEnum"],"kind":"enum"},"21:958:4806":{"crate_id":21,"path":["proc_macro","bridge","client","FreeFunctions"],"kind":"struct"},"6:6248:8585":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","msqid_ds"],"kind":"struct"},"2:9841:126":{"crate_id":2,"path":["core","fmt","Display"],"kind":"trait"},"1:7932:3538":{"crate_id":1,"path":["std","io","cursor","Cursor"],"kind":"struct"},"6:6047:8516":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ntptimeval"],"kind":"struct"},"24:5350:2570":{"crate_id":24,"path":["syn","path","Constraint"],"kind":"struct"},"17:12155:6696":{"crate_id":17,"path":["object","elf","ProgramHeader64"],"kind":"struct"},"6:588:7859":{"crate_id":6,"path":["libc","unix","servent"],"kind":"struct"},"17:14470:7300":{"crate_id":17,"path":["object","pe","ImageFunctionEntry64"],"kind":"struct"},"6:6012:8495":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","timex"],"kind":"struct"},"1:7137:30970":{"crate_id":1,"path":["std","sys_common","wstr","WStrUnits"],"kind":"struct"},"17:10789:22731":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandVariant"],"kind":"enum"},"2:39586:221":{"crate_id":2,"path":["core","ops","range","RangeTo"],"kind":"struct"},"2:40687:3514":{"crate_id":2,"path":["core","iter","adapters","intersperse","Intersperse"],"kind":"struct"},"24:4136:3704":{"crate_id":24,"path":["syn","token","Not"],"kind":"struct"},"24:1600:3525":{"crate_id":24,"path":["syn","parse","Parser"],"kind":"trait"},"17:12738:6815":{"crate_id":17,"path":["object","macho","SubLibraryCommand"],"kind":"struct"},"6:6059:8521":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","regex_t"],"kind":"struct"},"18:690:9353":{"crate_id":18,"path":["memchr","memmem","FinderRev"],"kind":"struct"},"17:10617:9379":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSubsubsection"],"kind":"struct"},"11:123:5979":{"crate_id":11,"path":["hashbrown","raw","RawTable"],"kind":"struct"},"6:654:16447":{"crate_id":6,"path":["libc","unix","linux_like","timezone"],"kind":"enum"},"16:3830:7389":{"crate_id":16,"path":["gimli","constants","DwUt"],"kind":"struct"},"2:2400:201":{"crate_id":2,"path":["core","cmp","Ord"],"kind":"trait"},"1:4169:10370":{"crate_id":1,"path":["std","os","unix","net","ancillary","AncillaryData"],"kind":"enum"},"24:5463:3381":{"crate_id":24,"path":["syn","ty","TypeBareFn"],"kind":"struct"},"6:6741:8654":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stat64"],"kind":"struct"},"17:13852:7117":{"crate_id":17,"path":["object","pe","ImageAuxSymbolFunctionBeginEnd"],"kind":"struct"},"24:4339:3718":{"crate_id":24,"path":["syn","token","ShlEq"],"kind":"struct"},"2:4321:227":{"crate_id":2,"path":["core","cell","RefCell"],"kind":"struct"},"16:7342:35549":{"crate_id":16,"path":["gimli","read","op","EvaluationState"],"kind":"enum"},"2:44578:9709":{"crate_id":2,"path":["core","str","CharEscapeDefault"],"kind":"struct"},"11:1891:4766":{"crate_id":11,"path":["hashbrown","set","Drain"],"kind":"struct"},"1:12046:793":{"crate_id":1,"path":["std","i8"],"kind":"primitive"},"6:1664:7978":{"crate_id":6,"path":["libc","unix","linux_like","arpreq"],"kind":"struct"},"5:7336:5550":{"crate_id":5,"path":["alloc","collections","btree","set_val","SetValZST"],"kind":"struct"},"2:22338:10560":{"crate_id":2,"path":["core","core_simd","simd","cmp","ord","SimdOrd"],"kind":"trait"},"2:9845:2578":{"crate_id":2,"path":["core","fmt","Binary"],"kind":"trait"},"2:42142:202":{"crate_id":2,"path":["core","sync","atomic","Ordering"],"kind":"enum"},"24:4194:3708":{"crate_id":24,"path":["syn","token","PathSep"],"kind":"struct"},"16:3655:6405":{"crate_id":16,"path":["gimli","arch","X86_64"],"kind":"struct"},"5:2970:8793":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Immut"],"kind":"struct"},"2:43223:9049":{"crate_id":2,"path":["core","hash","sip","State"],"kind":"struct"},"1:8843:9251":{"crate_id":1,"path":["std","process","ExitCode"],"kind":"struct"},"1:940:10204":{"crate_id":1,"path":["std","collections","hash","map","RawOccupiedEntryMut"],"kind":"struct"},"1:4493:10376":{"crate_id":1,"path":["std","os","unix","process","ExitStatusExt"],"kind":"trait"},"2:10672:3406":{"crate_id":2,"path":["core","slice","iter","IterMut"],"kind":"struct"},"17:12998:6870":{"crate_id":17,"path":["object","macho","RpathCommand"],"kind":"struct"},"24:2983:2660":{"crate_id":24,"path":["syn","token","Match"],"kind":"struct"},"1:7879:136":{"crate_id":1,"path":["std","fs","FileType"],"kind":"struct"},"24:5521:2527":{"crate_id":24,"path":["syn","ty","ReturnType"],"kind":"enum"},"11:1160:10030":{"crate_id":11,"path":["hashbrown","map","OccupiedError"],"kind":"struct"},"1:2353:4692":{"crate_id":1,"path":["std","fs","metadata"],"kind":"function"},"24:5289:3372":{"crate_id":24,"path":["syn","op","UnOp"],"kind":"enum"},"11:0:3164":{"crate_id":11,"path":["hashbrown"],"kind":"module"},"1:3165:31696":{"crate_id":1,"path":["std","io","stdio","StdoutRaw"],"kind":"struct"},"2:44299:9691":{"crate_id":2,"path":["core","str","pattern","CharArrayRefSearcher"],"kind":"struct"},"6:4401:8050":{"crate_id":6,"path":["libc","unix","linux_like","linux","signalfd_siginfo"],"kind":"struct"},"1:850:3406":{"crate_id":1,"path":["std","collections","hash","map","IterMut"],"kind":"struct"},"2:43837:2950":{"crate_id":2,"path":["core","str","iter","Bytes"],"kind":"struct"},"21:1394:2055":{"crate_id":21,"path":["proc_macro","bridge","symbol","Symbol"],"kind":"struct"},"6:4710:8175":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Shdr"],"kind":"struct"},"2:22719:9611":{"crate_id":2,"path":["core","num","error","ParseIntError"],"kind":"struct"},"24:4095:3701":{"crate_id":24,"path":["syn","token","Minus"],"kind":"struct"},"5:1500:10126":{"crate_id":5,"path":["alloc","collections","btree","map","IntoKeys"],"kind":"struct"},"1:1903:10243":{"crate_id":1,"path":["std","error","Indented"],"kind":"struct"},"5:2057:10210":{"crate_id":5,"path":["alloc","collections","btree","map","CursorMut"],"kind":"struct"},"17:400:22570":{"crate_id":17,"path":["object","read","any","Segment"],"kind":"struct"},"5:2968:35511":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Dying"],"kind":"enum"},"17:13869:7122":{"crate_id":17,"path":["object","pe","ImageAuxSymbolWeak"],"kind":"struct"},"24:3948:3691":{"crate_id":24,"path":["syn","token","DotDot"],"kind":"struct"},"17:12751:6817":{"crate_id":17,"path":["object","macho","PreboundDylibCommand"],"kind":"struct"},"2:9836:117":{"crate_id":2,"path":["core","fmt","Debug"],"kind":"trait"},"2:47896:9162":{"crate_id":2,"path":["core","core_arch","simd","i32x16"],"kind":"struct"},"16:6968:22511":{"crate_id":16,"path":["gimli","read","loclists","RawLocListEntry"],"kind":"enum"},"16:5866:9431":{"crate_id":16,"path":["gimli","read","cfi","PartialFrameDescriptionEntry"],"kind":"struct"},"6:5152:8385":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_can"],"kind":"struct"},"24:3255:1957":{"crate_id":24,"path":["syn","token","Type"],"kind":"struct"},"24:3119:234":{"crate_id":24,"path":["syn","token","Return"],"kind":"struct"},"16:7708:7378":{"crate_id":16,"path":["gimli","read","str","DebugStrOffsets"],"kind":"struct"},"1:8960:9256":{"crate_id":1,"path":["std","sync","condvar","WaitTimeoutResult"],"kind":"struct"},"6:4977:8300":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_rcvinfo"],"kind":"struct"},"21:2427:2042":{"crate_id":21,"path":["proc_macro","bridge","TokenTree"],"kind":"enum"},"24:4791:3324":{"crate_id":24,"path":["syn","expr","ExprAsync"],"kind":"struct"},"17:3565:22713":{"crate_id":17,"path":["object","read","macho","relocation","MachORelocationIterator"],"kind":"struct"},"1:8552:9248":{"crate_id":1,"path":["std","path","Ancestors"],"kind":"struct"},"6:533:7829":{"crate_id":6,"path":["libc","unix","hostent"],"kind":"struct"},"1:11539:10338":{"crate_id":1,"path":["std","sys_common","net","UdpSocket"],"kind":"struct"},"2:21869:33493":{"crate_id":2,"path":["core","core_simd","vector","splat","Splat"],"kind":"struct"},"2:12180:9671":{"crate_id":2,"path":["core","str","iter","MatchIndicesInternal"],"kind":"struct"},"6:4908:8259":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlattr"],"kind":"struct"},"1:1073:10030":{"crate_id":1,"path":["std","collections","hash","map","OccupiedError"],"kind":"struct"},"2:39566:218":{"crate_id":2,"path":["core","ops","range","RangeFrom"],"kind":"struct"},"24:4871:3342":{"crate_id":24,"path":["syn","expr","ExprMacro"],"kind":"struct"},"21:2534:4789":{"crate_id":21,"path":["proc_macro","bridge","ExpnGlobals"],"kind":"struct"},"6:4496:8103":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_absinfo"],"kind":"struct"},"16:2339:7329":{"crate_id":16,"path":["gimli","common","LineEncoding"],"kind":"struct"},"6:6798:8661":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","pthread_attr_t"],"kind":"struct"},"1:12058:1238":{"crate_id":1,"path":["std","reference"],"kind":"primitive"},"21:989:258":{"crate_id":21,"path":["proc_macro","bridge","client","TokenStream"],"kind":"struct"},"17:14127:7188":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation64"],"kind":"struct"},"5:4994:6159":{"crate_id":5,"path":["alloc","rc","from_iter_exact","Guard"],"kind":"struct"},"2:45861:9067":{"crate_id":2,"path":["core","core_arch","simd","i8x2"],"kind":"struct"},"24:3822:3683":{"crate_id":24,"path":["syn","token","AndEq"],"kind":"struct"},"2:39652:3450":{"crate_id":2,"path":["core","ops","range","Bound"],"kind":"enum"},"2:10281:6193":{"crate_id":2,"path":["core","slice","sort","merge","MergeHole"],"kind":"struct"},"18:481:9345":{"crate_id":18,"path":["memchr","cow","CowBytes"],"kind":"struct"},"2:44785:213":{"crate_id":2,"path":["core","task","poll","Poll"],"kind":"enum"},"17:12877:6850":{"crate_id":17,"path":["object","macho","DylibTableOfContents"],"kind":"struct"},"1:7844:10278":{"crate_id":1,"path":["std","fs","ReadDir"],"kind":"struct"},"24:3000:3665":{"crate_id":24,"path":["syn","token","Mod"],"kind":"struct"},"16:5612:7365":{"crate_id":16,"path":["gimli","read","cfi","EhFrameHdr"],"kind":"struct"},"17:11720:22595":{"crate_id":17,"path":["object","read","CompressionFormat"],"kind":"enum"},"3:0:473":{"crate_id":3,"path":["compiler_builtins"],"kind":"module"},"2:43694:9054":{"crate_id":2,"path":["core","slice","iter","ArrayWindows"],"kind":"struct"},"17:11394:134":{"crate_id":17,"path":["object","read","Error"],"kind":"struct"},"7:0:1679":{"crate_id":7,"path":["unwind"],"kind":"module"},"16:2722:7350":{"crate_id":16,"path":["gimli","common","DebugRngListsBase"],"kind":"struct"},"1:8293:10366":{"crate_id":1,"path":["std","os","unix","net","ancillary","SocketAncillary"],"kind":"struct"},"17:14111:7185":{"crate_id":17,"path":["object","pe","ImageDynamicRelocationTable"],"kind":"struct"},"1:4641:8651":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt","st_ctime"],"kind":"foreign_type"},"23:150:3998":{"crate_id":23,"path":["quote","__private","ThereIsNoIteratorInRepetition"],"kind":"struct"},"6:5123:8376":{"crate_id":6,"path":["libc","unix","linux_like","linux","hwtstamp_config"],"kind":"struct"},"6:6682:8620":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","flock"],"kind":"struct"},"2:40306:32465":{"crate_id":2,"path":["core","char","convert","CharErrorKind"],"kind":"enum"},"6:1632:7955":{"crate_id":6,"path":["libc","unix","linux_like","in_pktinfo"],"kind":"struct"},"1:8002:31074":{"crate_id":1,"path":["std","io","error","SimpleMessage"],"kind":"struct"},"16:5363:7417":{"crate_id":16,"path":["gimli","constants","DwEhPe"],"kind":"struct"},"17:9824:22601":{"crate_id":17,"path":["object","read","archive","ArchiveKind"],"kind":"enum"},"1:10764:9737":{"crate_id":1,"path":["std","sys","unix","fs","StatxExtraFields"],"kind":"struct"},"16:5905:9433":{"crate_id":16,"path":["gimli","read","cfi","FrameDescriptionEntry"],"kind":"struct"},"16:6960:22510":{"crate_id":16,"path":["gimli","read","loclists","RawLocListIter"],"kind":"struct"},"1:6359:182":{"crate_id":1,"path":["std","sync","mutex","Mutex"],"kind":"struct"},"1:11607:31072":{"crate_id":1,"path":["std","panicking","panic_count","MustAbort"],"kind":"enum"},"20:934:2040":{"crate_id":20,"path":["proc_macro2","Spacing"],"kind":"enum"},"18:766:26608":{"crate_id":18,"path":["memchr","memmem","SearcherRevKind"],"kind":"enum"},"6:7692:8787":{"crate_id":6,"path":["libc","unix","linux_like","linux","non_exhaustive","open_how"],"kind":"struct"},"2:5715:3502":{"crate_id":2,"path":["core","iter","adapters","flatten","FlatMap"],"kind":"struct"},"16:5939:9439":{"crate_id":16,"path":["gimli","read","cfi","UnwindContext"],"kind":"struct"},"6:6079:8529":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","Elf32_Chdr"],"kind":"struct"},"2:4682:15676":{"crate_id":2,"path":["core","char","REPLACEMENT_CHARACTER"],"kind":"constant"},"2:42977:73":{"crate_id":2,"path":["core","fmt","rt","Argument"],"kind":"struct"},"5:1382:99":{"crate_id":5,"path":["alloc","collections","btree","map","BTreeMap"],"kind":"struct"},"2:13211:113":{"crate_id":2,"path":["core","task","wake","Context"],"kind":"struct"},"2:8204:3480":{"crate_id":2,"path":["core","iter","traits","marker","TrustedLen"],"kind":"trait"},"24:4930:3356":{"crate_id":24,"path":["syn","expr","ExprWhile"],"kind":"struct"},"1:11983:9796":{"crate_id":1,"path":["std","backtrace_rs","symbolize","gimli","parse_running_mmaps","MapsEntry"],"kind":"struct"},"1:3445:10280":{"crate_id":1,"path":["std","io","IoSliceMut"],"kind":"struct"},"5:261:6139":{"crate_id":5,"path":["alloc","boxed","thin","drop","DropGuard"],"kind":"struct"},"1:2206:4707":{"crate_id":1,"path":["std","fs","read"],"kind":"function"},"16:7102:22513":{"crate_id":16,"path":["gimli","read","op","DieReference"],"kind":"enum"},"1:7718:10196":{"crate_id":1,"path":["std","backtrace","BacktraceStatus"],"kind":"enum"},"24:1505:3528":{"crate_id":24,"path":["syn","parse","StepCursor"],"kind":"struct"},"16:4862:7407":{"crate_id":16,"path":["gimli","constants","DwOrd"],"kind":"struct"},"2:4325:3557":{"crate_id":2,"path":["core","cell","BorrowError"],"kind":"struct"},"24:4918:3353":{"crate_id":24,"path":["syn","expr","ExprTuple"],"kind":"struct"},"17:12699:6810":{"crate_id":17,"path":["object","macho","SubFrameworkCommand"],"kind":"struct"},"16:6456:9481":{"crate_id":16,"path":["gimli","read","aranges","ArangeEntryIter"],"kind":"struct"},"17:11328:9397":{"crate_id":17,"path":["object","read","pe","resource","ResourceDirectoryTable"],"kind":"struct"},"2:23166:190":{"crate_id":2,"path":["core","num","nonzero","NonZeroI8"],"kind":"struct"},"1:8208:2950":{"crate_id":1,"path":["std","io","Bytes"],"kind":"struct"},"2:39526:219":{"crate_id":2,"path":["core","ops","range","RangeFull"],"kind":"struct"},"17:9373:6501":{"crate_id":17,"path":["object","read","util","StringTable"],"kind":"struct"},"24:1134:5254":{"crate_id":24,"path":["syn","lit","LitRepr"],"kind":"struct"},"24:2796:1987":{"crate_id":24,"path":["syn","token","Enum"],"kind":"struct"},"2:44268:9688":{"crate_id":2,"path":["core","str","pattern","MultiCharEqSearcher"],"kind":"struct"},"5:5640:4770":{"crate_id":5,"path":["alloc","string","retain","SetLenOnDrop"],"kind":"struct"},"17:12268:6725":{"crate_id":17,"path":["object","elf","NoteHeader32"],"kind":"struct"},"21:1196:214":{"crate_id":21,"path":["proc_macro","bridge","client","ProcMacro"],"kind":"enum"},"11:1087:35526":{"crate_id":11,"path":["hashbrown","map","KeyOrRef"],"kind":"enum"},"18:574:6374":{"crate_id":18,"path":["memchr","memmem","twoway","Forward"],"kind":"struct"},"17:12112:6686":{"crate_id":17,"path":["object","elf","Rel64"],"kind":"struct"},"20:704:258":{"crate_id":20,"path":["proc_macro2","fallback","TokenStream"],"kind":"struct"},"17:14101:7182":{"crate_id":17,"path":["object","pe","ImageLoadConfigCodeIntegrity"],"kind":"struct"},"16:7722:7368":{"crate_id":16,"path":["gimli","read","str","DebugLineStr"],"kind":"struct"},"24:5012:2600":{"crate_id":24,"path":["syn","generics","TypeParam"],"kind":"struct"},"24:4124:3703":{"crate_id":24,"path":["syn","token","Ne"],"kind":"struct"},"2:44658:15818":{"crate_id":2,"path":["core","time","TryFromFloatSecsErrorKind"],"kind":"enum"},"6:1537:7886":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_in6"],"kind":"struct"},"2:22615:8807":{"crate_id":2,"path":["core","num","flt2dec","decoder","Decoded"],"kind":"struct"},"24:1864:3398":{"crate_id":24,"path":["syn","punctuated","Pairs"],"kind":"struct"},"16:3065:6400":{"crate_id":16,"path":["gimli","arch","Arm"],"kind":"struct"},"0:964:1826":{"crate_id":0,"path":["serde_derive","Serialize"],"kind":"proc_derive"},"16:6415:9478":{"crate_id":16,"path":["gimli","read","aranges","ArangeHeaderIter"],"kind":"struct"},"6:1521:7878":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr"],"kind":"struct"},"17:9446:22583":{"crate_id":17,"path":["object","read","any","SegmentIterator"],"kind":"struct"},"6:7702:8789":{"crate_id":6,"path":["libc","unix","align","in6_addr"],"kind":"struct"},"24:2660:104":{"crate_id":24,"path":["syn","token","Break"],"kind":"struct"},"11:1896:4764":{"crate_id":11,"path":["hashbrown","set","ExtractIf"],"kind":"struct"},"1:7581:6229":{"crate_id":1,"path":["std","backtrace_rs","print","BacktraceFrameFmt"],"kind":"struct"},"17:11245:6607":{"crate_id":17,"path":["object","read","pe","import","Import"],"kind":"enum"},"24:1620:1815":{"crate_id":24,"path":["syn","parse_macro_input"],"kind":"macro"},"24:2626:3652":{"crate_id":24,"path":["syn","token","Become"],"kind":"struct"},"11:811:4764":{"crate_id":11,"path":["hashbrown","map","ExtractIf"],"kind":"struct"},"5:4767:712":{"crate_id":5,"path":["alloc","fmt"],"kind":"module"},"6:4455:8083":{"crate_id":6,"path":["libc","unix","linux_like","linux","if_nameindex"],"kind":"struct"},"1:12059:13":{"crate_id":1,"path":["std","fn"],"kind":"primitive"},"2:21423:10479":{"crate_id":2,"path":["core","core_simd","lane_count","LaneCount"],"kind":"struct"},"24:2762:3655":{"crate_id":24,"path":["syn","token","Dyn"],"kind":"struct"},"2:13222:6203":{"crate_id":2,"path":["core","task","wake","Waker"],"kind":"struct"},"20:680:3538":{"crate_id":20,"path":["proc_macro2","parse","Cursor"],"kind":"struct"},"5:7412:3456":{"crate_id":5,"path":["alloc","collections","TryReserveError"],"kind":"struct"},"1:7733:10197":{"crate_id":1,"path":["std","backtrace","RawFrame"],"kind":"enum"},"2:7522:3465":{"crate_id":2,"path":["core","iter","sources","once","once"],"kind":"function"},"23:407:4138":{"crate_id":23,"path":["quote","__private","RepInterp"],"kind":"struct"},"17:10013:6518":{"crate_id":17,"path":["object","read","coff","symbol","SymbolTable"],"kind":"struct"},"24:611:3402":{"crate_id":24,"path":["syn","error","Iter"],"kind":"struct"},"2:22258:4701":{"crate_id":2,"path":["core","core_simd","simd","ptr","mut_ptr","SimdMutPtr","from_exposed_addr"],"kind":"foreign_type"},"1:3968:10343":{"crate_id":1,"path":["std","os","unix","fs","FileExt"],"kind":"trait"},"16:6901:7369":{"crate_id":16,"path":["gimli","read","loclists","DebugLoc"],"kind":"struct"},"24:4547:3319":{"crate_id":24,"path":["syn","data","FieldsNamed"],"kind":"struct"},"16:7736:7532":{"crate_id":16,"path":["gimli","read","UnitOffset"],"kind":"struct"},"24:4404:3723":{"crate_id":24,"path":["syn","token","Star"],"kind":"struct"},"17:14146:7193":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation64V2"],"kind":"struct"},"24:2813:3657":{"crate_id":24,"path":["syn","token","Extern"],"kind":"struct"},"17:12099:6684":{"crate_id":17,"path":["object","elf","Rela32"],"kind":"struct"},"20:984:3401":{"crate_id":20,"path":["proc_macro2","token_stream","IntoIter"],"kind":"struct"},"17:9712:35609":{"crate_id":17,"path":["object","read","any","SymbolIteratorInternal"],"kind":"enum"},"2:40285:9619":{"crate_id":2,"path":["core","async_iter","from_iter","FromIter"],"kind":"struct"},"6:5052:8340":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_user_dev"],"kind":"struct"},"2:43733:15622":{"crate_id":2,"path":["core","slice","iter","ArrayChunksMut"],"kind":"struct"},"24:90:1968":{"crate_id":24,"path":["syn","token","Token"],"kind":"trait"},"16:5088:7414":{"crate_id":16,"path":["gimli","constants","DwMacro"],"kind":"struct"},"18:727:6396":{"crate_id":18,"path":["memchr","memmem","SearcherConfig"],"kind":"struct"},"24:5482:3386":{"crate_id":24,"path":["syn","ty","TypeNever"],"kind":"struct"},"2:12440:15638":{"crate_id":2,"path":["core","str","pattern","DoubleEndedSearcher"],"kind":"trait"},"1:7541:10048":{"crate_id":1,"path":["std","backtrace_rs","symbolize","SymbolName"],"kind":"struct"},"2:4394:3565":{"crate_id":2,"path":["core","cell","BorrowRef"],"kind":"struct"},"16:7884:22520":{"crate_id":16,"path":["gimli","read","unit","AttributeValue"],"kind":"enum"},"2:40322:9022":{"crate_id":2,"path":["core","char","convert","CharTryFromError"],"kind":"struct"},"2:47566:9159":{"crate_id":2,"path":["core","core_arch","simd","u8x64"],"kind":"struct"},"17:12544:6786":{"crate_id":17,"path":["object","macho","LcStr"],"kind":"struct"},"2:41830:32458":{"crate_id":2,"path":["core","net","parser","AddrKind"],"kind":"enum"},"5:3677:6139":{"crate_id":5,"path":["alloc","collections","linked_list","drop","DropGuard"],"kind":"struct"},"24:5316:2340":{"crate_id":24,"path":["syn","path","GenericArgument"],"kind":"enum"},"11:2326:10207":{"crate_id":11,"path":["hashbrown","table","OccupiedEntry"],"kind":"struct"},"5:1481:9558":{"crate_id":5,"path":["alloc","collections","btree","map","Values"],"kind":"struct"},"18:599:6337":{"crate_id":18,"path":["memchr","memmem","twoway","Shift"],"kind":"enum"},"2:9498:10129":{"crate_id":2,"path":["core","fmt","builders","PadAdapterState"],"kind":"struct"},"2:10817:15635":{"crate_id":2,"path":["core","slice","iter","SplitInclusiveMut"],"kind":"struct"},"2:39705:8895":{"crate_id":2,"path":["core","array","TryFromSliceError"],"kind":"struct"},"24:97:4397":{"crate_id":24,"path":["syn","token","private","WithSpan"],"kind":"struct"},"24:1137:5259":{"crate_id":24,"path":["syn","lit","LitIntRepr"],"kind":"struct"},"6:7645:8776":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_rwlock_t"],"kind":"struct"},"17:14336:7263":{"crate_id":17,"path":["object","pe","ImageAlphaRuntimeFunctionEntry"],"kind":"struct"},"16:2526:7342":{"crate_id":16,"path":["gimli","common","DebugLineStrOffset"],"kind":"struct"},"17:12646:6801":{"crate_id":17,"path":["object","macho","Fvmlib"],"kind":"struct"},"2:42245:86":{"crate_id":2,"path":["core","sync","atomic","AtomicI16"],"kind":"struct"},"17:9661:35598":{"crate_id":17,"path":["object","read","any","SymbolTableInternal"],"kind":"enum"},"17:11618:6607":{"crate_id":17,"path":["object","read","Import"],"kind":"struct"},"18:582:4339":{"crate_id":18,"path":["memchr","memmem","twoway","Reverse"],"kind":"struct"},"24:4235:3711":{"crate_id":24,"path":["syn","token","Plus"],"kind":"struct"},"2:43795:9056":{"crate_id":2,"path":["core","str","error","Utf8Error"],"kind":"struct"},"2:41700:9029":{"crate_id":2,"path":["core","net","ip_addr","Ipv6Addr"],"kind":"struct"},"2:13066:211":{"crate_id":2,"path":["core","future","pending","Pending"],"kind":"struct"},"2:21226:33496":{"crate_id":2,"path":["core","core_simd","swizzle","resize","Resize"],"kind":"struct"},"17:12532:6784":{"crate_id":17,"path":["object","macho","LoadCommand"],"kind":"struct"},"18:624:35620":{"crate_id":18,"path":["memchr","memmem","twoway","SuffixOrdering"],"kind":"enum"},"17:8927:22579":{"crate_id":17,"path":["object","common","FileFlags"],"kind":"enum"},"24:4882:3345":{"crate_id":24,"path":["syn","expr","ExprParen"],"kind":"struct"},"1:10249:10428":{"crate_id":1,"path":["std","sys","unix","pipe","AnonPipe"],"kind":"struct"},"17:11202:9383":{"crate_id":17,"path":["object","read","pe","export","ExportTable"],"kind":"struct"},"5:3246:2011":{"crate_id":5,"path":["alloc","collections","btree","set","Union"],"kind":"struct"},"1:4385:10367":{"crate_id":1,"path":["std","os","unix","net","stream","UnixStream"],"kind":"struct"},"2:40294:9620":{"crate_id":2,"path":["core","char","convert","ParseCharError"],"kind":"struct"},"1:837:3402":{"crate_id":1,"path":["std","collections","hash","map","Iter"],"kind":"struct"},"1:12050:788":{"crate_id":1,"path":["std","i128"],"kind":"primitive"},"6:4870:8244":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_filter"],"kind":"struct"},"21:140:4800":{"crate_id":21,"path":["proc_macro","bridge","client","Client"],"kind":"struct"},"17:10535:9373":{"crate_id":17,"path":["object","read","elf","version","VerneedIterator"],"kind":"struct"},"16:6879:7474":{"crate_id":16,"path":["gimli","read","line","FileEntryFormat"],"kind":"struct"},"17:12423:6762":{"crate_id":17,"path":["object","macho","DyldCacheMappingInfo"],"kind":"struct"},"16:6742:9498":{"crate_id":16,"path":["gimli","read","line","LineSequence"],"kind":"struct"},"16:8072:7576":{"crate_id":16,"path":["gimli","read","unit","AttrsIter"],"kind":"struct"},"17:14347:7264":{"crate_id":17,"path":["object","pe","ImageRuntimeFunctionEntry"],"kind":"struct"},"24:3204:3673":{"crate_id":24,"path":["syn","token","Super"],"kind":"struct"},"24:2242:6342":{"crate_id":24,"path":["syn","thread","ThreadBound"],"kind":"struct"},"24:920:3361":{"crate_id":24,"path":["syn","generics","ImplGenerics"],"kind":"struct"},"2:45985:9072":{"crate_id":2,"path":["core","core_arch","simd","u8x8"],"kind":"struct"},"2:3448:70":{"crate_id":2,"path":["core","any","Any"],"kind":"trait"},"1:923:10202":{"crate_id":1,"path":["std","collections","hash","map","RawEntryBuilderMut"],"kind":"struct"},"2:43775:15630":{"crate_id":2,"path":["core","slice","iter","RChunksExactMut"],"kind":"struct"},"17:13677:7081":{"crate_id":17,"path":["object","pe","ImageNtHeaders32"],"kind":"struct"},"16:5963:22503":{"crate_id":16,"path":["gimli","read","cfi","UnwindTable"],"kind":"struct"},"1:4746:10360":{"crate_id":1,"path":["std","os","fd","raw","IntoRawFd"],"kind":"trait"},"6:596:7864":{"crate_id":6,"path":["libc","unix","protoent"],"kind":"struct"},"18:531:9347":{"crate_id":18,"path":["memchr","memmem","prefilter","PrefilterState"],"kind":"struct"},"2:30338:10339":{"crate_id":2,"path":["core","num","FpCategory"],"kind":"enum"},"17:10469:6526":{"crate_id":17,"path":["object","read","elf","version","VersionIndex"],"kind":"struct"},"11:2469:4764":{"crate_id":11,"path":["hashbrown","table","ExtractIf"],"kind":"struct"},"24:4878:3344":{"crate_id":24,"path":["syn","expr","ExprMethodCall"],"kind":"struct"},"2:23011:192":{"crate_id":2,"path":["core","num","nonzero","NonZeroU16"],"kind":"struct"},"17:14309:7254":{"crate_id":17,"path":["object","pe","ImageArmRuntimeFunctionEntry"],"kind":"struct"},"6:4783:8199":{"crate_id":6,"path":["libc","unix","linux_like","linux","in6_pktinfo"],"kind":"struct"},"17:9887:22603":{"crate_id":17,"path":["object","read","archive","ArchiveMemberIterator"],"kind":"struct"},"2:8248:33825":{"crate_id":2,"path":["core","net","display_buffer","DisplayBuffer"],"kind":"struct"},"16:7492:9530":{"crate_id":16,"path":["gimli","read","pubnames","PubNamesEntry"],"kind":"struct"},"1:7645:4569":{"crate_id":1,"path":["std","thread","local","AccessError"],"kind":"struct"},"6:4745:8179":{"crate_id":6,"path":["libc","unix","linux_like","linux","mntent"],"kind":"struct"},"11:1676:6136":{"crate_id":11,"path":["hashbrown","scopeguard","ScopeGuard"],"kind":"struct"},"17:9702:22587":{"crate_id":17,"path":["object","read","any","SymbolIterator"],"kind":"struct"},"2:42133:3401":{"crate_id":2,"path":["core","result","IntoIter"],"kind":"struct"},"1:6468:6223":{"crate_id":1,"path":["std","sync","once_lock","OnceLock"],"kind":"struct"},"24:3051:3668":{"crate_id":24,"path":["syn","token","Override"],"kind":"struct"},"21:244:35705":{"crate_id":21,"path":["proc_macro","bridge","handle","OwnedStore"],"kind":"struct"},"1:5502:10424":{"crate_id":1,"path":["std","process","Stdio"],"kind":"struct"},"1:11180:9060":{"crate_id":1,"path":["std","sys","unix","time","Nanoseconds"],"kind":"struct"},"17:13711:7084":{"crate_id":17,"path":["object","pe","AnonObjectHeader"],"kind":"struct"},"24:54:2050":{"crate_id":24,"path":["syn","token"],"kind":"module"},"5:2469:8791":{"crate_id":5,"path":["alloc","collections","btree","node","NodeRef"],"kind":"struct"},"24:289:35805":{"crate_id":24,"path":["syn","bigint","BigInt"],"kind":"struct"},"24:3340:3677":{"crate_id":24,"path":["syn","token","Use"],"kind":"struct"},"6:6128:8548":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ptrace_syscall_info"],"kind":"struct"},"16:5403:6491":{"crate_id":16,"path":["gimli","endianity","LittleEndian"],"kind":"struct"},"17:12847:6831":{"crate_id":17,"path":["object","macho","DysymtabCommand"],"kind":"struct"},"1:4705:10375":{"crate_id":1,"path":["std","os","linux","process","CommandExt"],"kind":"trait"},"2:40608:3489":{"crate_id":2,"path":["core","iter","adapters","copied","Copied"],"kind":"struct"},"6:4616:8160":{"crate_id":6,"path":["libc","unix","linux_like","linux","dl_phdr_info"],"kind":"struct"},"24:2932:3663":{"crate_id":24,"path":["syn","token","Let"],"kind":"struct"},"11:2151:10208":{"crate_id":11,"path":["hashbrown","set","VacantEntry"],"kind":"struct"},"16:3764:7387":{"crate_id":16,"path":["gimli","constants","DwSect"],"kind":"struct"},"1:482:6205":{"crate_id":1,"path":["std","thread","spawn_unchecked_","MaybeDangling"],"kind":"struct"},"11:2352:10208":{"crate_id":11,"path":["hashbrown","table","VacantEntry"],"kind":"struct"},"1:8563:9731":{"crate_id":1,"path":["std","path","StripPrefixError"],"kind":"struct"},"19:0:1122":{"crate_id":19,"path":["panic_unwind"],"kind":"module"},"2:40655:9635":{"crate_id":2,"path":["core","iter","adapters","flatten","FlattenCompat"],"kind":"struct"},"24:5379:3375":{"crate_id":24,"path":["syn","restriction","FieldMutability"],"kind":"enum"},"1:1820:4840":{"crate_id":1,"path":["std","env","Args"],"kind":"struct"},"16:8294:134":{"crate_id":16,"path":["gimli","read","Error"],"kind":"enum"},"1:7381:29560":{"crate_id":1,"path":["std","panicking","Hook"],"kind":"enum"},"24:5036:3358":{"crate_id":24,"path":["syn","generics","BoundLifetimes"],"kind":"struct"},"2:4330:3558":{"crate_id":2,"path":["core","cell","BorrowMutError"],"kind":"struct"},"2:41683:9027":{"crate_id":2,"path":["core","net","ip_addr","Ipv4Addr"],"kind":"struct"},"24:5057:2633":{"crate_id":24,"path":["syn","generics","TraitBound"],"kind":"struct"},"2:4449:3567":{"crate_id":2,"path":["core","cell","BorrowRefMut"],"kind":"struct"},"5:7487:9579":{"crate_id":5,"path":["alloc","ffi","c_str","FromVecWithNulError"],"kind":"struct"},"6:1697:7994":{"crate_id":6,"path":["libc","unix","linux_like","epoll_event"],"kind":"struct"},"6:5068:8345":{"crate_id":6,"path":["libc","unix","linux_like","linux","af_alg_iv"],"kind":"struct"},"5:4010:4766":{"crate_id":5,"path":["alloc","collections","vec_deque","drain","Drain"],"kind":"struct"},"1:894:4766":{"crate_id":1,"path":["std","collections","hash","map","Drain"],"kind":"struct"},"2:21857:8800":{"crate_id":2,"path":["core","core_simd","vector","Simd"],"kind":"struct"},"24:2677:2568":{"crate_id":24,"path":["syn","token","Const"],"kind":"struct"},"16:5435:7418":{"crate_id":16,"path":["gimli","read","util","sealed","CapacityFull"],"kind":"struct"},"1:3982:10344":{"crate_id":1,"path":["std","os","unix","fs","PermissionsExt"],"kind":"trait"},"11:430:35531":{"crate_id":11,"path":["hashbrown","raw","RawIterHash"],"kind":"struct"},"6:4506:8109":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_keymap_entry"],"kind":"struct"},"17:12008:6669":{"crate_id":17,"path":["object","elf","CompressionHeader64"],"kind":"struct"},"17:10024:22587":{"crate_id":17,"path":["object","read","coff","symbol","SymbolIterator"],"kind":"struct"},"17:14084:7178":{"crate_id":17,"path":["object","pe","ImageResourceDirStringU"],"kind":"struct"},"6:4998:8315":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_prinfo"],"kind":"struct"},"11:800:4766":{"crate_id":11,"path":["hashbrown","map","Drain"],"kind":"struct"},"16:8239:2739":{"crate_id":16,"path":["gimli","read","value","Value"],"kind":"enum"},"16:3797:7388":{"crate_id":16,"path":["gimli","constants","DwSectV2"],"kind":"struct"},"5:6851:4771":{"crate_id":5,"path":["alloc","vec","in_place_drop","InPlaceDrop"],"kind":"struct"},"2:11532:4713":{"crate_id":2,"path":["core","slice","raw","from_raw_parts"],"kind":"function"},"5:3186:9560":{"crate_id":5,"path":["alloc","collections","btree","set","Difference"],"kind":"struct"},"2:1558:6159":{"crate_id":2,"path":["core","mem","maybe_uninit","write_slice_cloned","Guard"],"kind":"struct"},"16:4613:7400":{"crate_id":16,"path":["gimli","constants","DwVis"],"kind":"struct"},"1:8238:10331":{"crate_id":1,"path":["std","net","Shutdown"],"kind":"enum"},"16:6171:212":{"crate_id":16,"path":["gimli","read","cfi","Pointer"],"kind":"enum"},"24:129:1962":{"crate_id":24,"path":["syn","token","Group"],"kind":"struct"},"2:44841:177":{"crate_id":2,"path":["core","alloc","layout","Layout"],"kind":"struct"},"2:4253:3540":{"crate_id":2,"path":["core","cell","Cell"],"kind":"struct"},"6:5033:8332":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_alg"],"kind":"struct"},"24:1975:3404":{"crate_id":24,"path":["syn","punctuated","PrivateIter"],"kind":"struct"},"2:22607:8806":{"crate_id":2,"path":["core","num","diy_float","Fp"],"kind":"struct"},"6:1639:7959":{"crate_id":6,"path":["libc","unix","linux_like","ifaddrs"],"kind":"struct"},"5:4434:6161":{"crate_id":5,"path":["alloc","collections","vec_deque","truncate","Dropper"],"kind":"struct"},"17:14435:7287":{"crate_id":17,"path":["object","pe","ImageCoffSymbolsHeader"],"kind":"struct"},"17:9781:22589":{"crate_id":17,"path":["object","read","any","SectionRelocationIterator"],"kind":"struct"},"6:5897:8433":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","glob64_t"],"kind":"struct"},"1:11614:9752":{"crate_id":1,"path":["std","backtrace_rs","backtrace","Frame"],"kind":"struct"},"2:7838:3482":{"crate_id":2,"path":["core","iter","traits","exact_size","ExactSizeIterator"],"kind":"trait"},"16:7090:9528":{"crate_id":16,"path":["gimli","read","lookup","PubStuffParser"],"kind":"struct"},"24:4922:3354":{"crate_id":24,"path":["syn","expr","ExprUnary"],"kind":"struct"},"2:2948:4260":{"crate_id":2,"path":["core","ops","bit","BitOr"],"kind":"trait"},"1:7755:10039":{"crate_id":1,"path":["std","env","JoinPathsError"],"kind":"struct"},"17:12226:6710":{"crate_id":17,"path":["object","elf","Verdaux"],"kind":"struct"},"17:2012:22644":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbolIterator"],"kind":"struct"},"24:4078:3700":{"crate_id":24,"path":["syn","token","Lt"],"kind":"struct"},"2:44646:9715":{"crate_id":2,"path":["core","time","TryFromFloatSecsError"],"kind":"struct"},"17:10727:22729":{"crate_id":17,"path":["object","read","macho","file","MachOComdat"],"kind":"struct"},"17:12912:6861":{"crate_id":17,"path":["object","macho","DylibModule64"],"kind":"struct"},"1:3512:10302":{"crate_id":1,"path":["std","io","BufRead"],"kind":"trait"},"24:2177:10283":{"crate_id":24,"path":["syn","sealed","lookahead","Sealed"],"kind":"trait"},"1:8851:3402":{"crate_id":1,"path":["std","sync","mpsc","Iter"],"kind":"struct"},"0:0:1835":{"crate_id":0,"path":["serde_derive"],"kind":"module"},"1:4742:10357":{"crate_id":1,"path":["std","os","fd","raw","AsRawFd"],"kind":"trait"},"16:7677:216":{"crate_id":16,"path":["gimli","read","rnglists","Range"],"kind":"struct"},"20:908:3422":{"crate_id":20,"path":["proc_macro2","Delimiter"],"kind":"enum"},"5:2149:9564":{"crate_id":5,"path":["alloc","collections","btree","merge_iter","MergeIterInner"],"kind":"struct"},"16:8097:9541":{"crate_id":16,"path":["gimli","read","unit","EntriesRaw"],"kind":"struct"},"11:1903:9559":{"crate_id":11,"path":["hashbrown","set","Intersection"],"kind":"struct"},"1:11036:6235":{"crate_id":1,"path":["std","sys","unix","process","process_inner","do_exec","Reset"],"kind":"struct"},"1:8007:10137":{"crate_id":1,"path":["std","io","error","Custom"],"kind":"struct"},"6:0:872":{"crate_id":6,"path":["libc"],"kind":"module"},"1:9105:241":{"crate_id":1,"path":["std","sync","rwlock","RwLockWriteGuard"],"kind":"struct"},"5:2139:4545":{"crate_id":5,"path":["alloc","collections","btree","mem","replace","PanicGuard"],"kind":"struct"},"1:10970:29299":{"crate_id":1,"path":["std","sys","unix","process","process_common","ProgramKind"],"kind":"enum"},"6:4603:8156":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_ff_erase"],"kind":"struct"},"24:3931:3690":{"crate_id":24,"path":["syn","token","Dot"],"kind":"struct"},"2:2574:77":{"crate_id":2,"path":["core","convert","AsRef"],"kind":"trait"},"2:43869:9593":{"crate_id":2,"path":["core","str","iter","RSplit"],"kind":"struct"},"17:13025:6874":{"crate_id":17,"path":["object","macho","FilesetEntryCommand"],"kind":"struct"},"17:11338:22765":{"crate_id":17,"path":["object","read","pe","resource","ResourceDirectoryEntryData"],"kind":"enum"},"17:9138:6494":{"crate_id":17,"path":["object","endian","U32Bytes"],"kind":"struct"},"6:4922:8267":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_ifru_map"],"kind":"struct"},"5:825:6145":{"crate_id":5,"path":["alloc","collections","binary_heap","RebuildOnDrop"],"kind":"struct"},"1:6813:10477":{"crate_id":1,"path":["std","std_float","StdFloat"],"kind":"trait"},"6:4364:8022":{"crate_id":6,"path":["libc","unix","linux_like","linux","passwd"],"kind":"struct"},"6:5885:8429":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__exit_status"],"kind":"struct"},"17:12779:6821":{"crate_id":17,"path":["object","macho","ThreadCommand"],"kind":"struct"},"5:6341:10571":{"crate_id":5,"path":["alloc","task","Wake"],"kind":"trait"},"1:10814:125":{"crate_id":1,"path":["std","sys","unix","fs","DirBuilder"],"kind":"struct"},"11:837:10202":{"crate_id":11,"path":["hashbrown","map","RawEntryBuilderMut"],"kind":"struct"},"16:4835:7406":{"crate_id":16,"path":["gimli","constants","DwInl"],"kind":"struct"},"5:7018:6179":{"crate_id":5,"path":["alloc","vec","dedup_by","FillGapOnDrop"],"kind":"struct"},"17:11087:22762":{"crate_id":17,"path":["object","read","pe","file","PeComdatSectionIterator"],"kind":"struct"},"24:4001:3694":{"crate_id":24,"path":["syn","token","EqEq"],"kind":"struct"},"2:22304:10561":{"crate_id":2,"path":["core","core_simd","simd","cmp","eq","SimdPartialEq"],"kind":"trait"},"17:14034:7163":{"crate_id":17,"path":["object","pe","ImageBoundForwarderRef"],"kind":"struct"},"17:9052:22558":{"crate_id":17,"path":["object","endian","Endianness"],"kind":"enum"},"1:557:4552":{"crate_id":1,"path":["std","thread","JoinHandle"],"kind":"struct"},"17:12374:6737":{"crate_id":17,"path":["object","macho","DyldCacheHeader"],"kind":"struct"},"17:10673:22727":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCacheImageIterator"],"kind":"struct"},"16:2933:21640":{"crate_id":16,"path":["gimli","common","UnitSectionOffset"],"kind":"enum"},"1:2210:10263":{"crate_id":1,"path":["std","fs","read_to_string"],"kind":"function"},"20:904:1962":{"crate_id":20,"path":["proc_macro2","Group"],"kind":"struct"},"2:40393:9625":{"crate_id":2,"path":["core","char","ToLowercase"],"kind":"struct"},"17:13740:7092":{"crate_id":17,"path":["object","pe","AnonObjectHeaderBigobj"],"kind":"struct"},"18:0:3170":{"crate_id":18,"path":["memchr"],"kind":"module"},"24:2966:2355":{"crate_id":24,"path":["syn","token","Macro"],"kind":"struct"},"1:12032:399":{"crate_id":1,"path":["std","bool"],"kind":"primitive"},"1:6251:6219":{"crate_id":1,"path":["std","sync","mpmc","Sender"],"kind":"struct"},"2:46508:9096":{"crate_id":2,"path":["core","core_arch","simd","f32x4"],"kind":"struct"},"16:2832:7355":{"crate_id":16,"path":["gimli","common","DebugTypesOffset"],"kind":"struct"},"2:46605:9099":{"crate_id":2,"path":["core","core_arch","simd","m8x16"],"kind":"struct"},"16:5816:9424":{"crate_id":16,"path":["gimli","read","cfi","AugmentationData"],"kind":"struct"},"24:4392:3722":{"crate_id":24,"path":["syn","token","SlashEq"],"kind":"struct"},"2:43955:9669":{"crate_id":2,"path":["core","str","iter","SplitN"],"kind":"struct"},"16:7544:9535":{"crate_id":16,"path":["gimli","read","pubtypes","PubTypesEntryIter"],"kind":"struct"},"5:1531:10209":{"crate_id":5,"path":["alloc","collections","btree","map","RangeMut"],"kind":"struct"},"1:1761:10216":{"crate_id":1,"path":["std","env","VarsOs"],"kind":"struct"},"21:1063:2041":{"crate_id":21,"path":["proc_macro","bridge","client","Span"],"kind":"struct"},"16:7862:9537":{"crate_id":16,"path":["gimli","read","unit","DebuggingInformationEntry"],"kind":"struct"},"2:12646:117":{"crate_id":2,"path":["core","str","lossy","Debug"],"kind":"struct"},"1:5641:9720":{"crate_id":1,"path":["std","sync","mpsc","SyncSender"],"kind":"struct"},"1:5448:111":{"crate_id":1,"path":["std","process","Command"],"kind":"struct"},"2:46138:9078":{"crate_id":2,"path":["core","core_arch","simd","i32x2"],"kind":"struct"},"16:8167:22522":{"crate_id":16,"path":["gimli","read","unit","EntriesTreeIter"],"kind":"struct"},"5:7524:249":{"crate_id":5,"path":["alloc","string","String"],"kind":"struct"},"11:1910:9560":{"crate_id":11,"path":["hashbrown","set","Difference"],"kind":"struct"},"1:8327:10403":{"crate_id":1,"path":["std","os","linux","process","PidFd"],"kind":"struct"},"1:2381:10275":{"crate_id":1,"path":["std","fs","read_dir"],"kind":"function"},"17:14537:7312":{"crate_id":17,"path":["object","pe","ImageCor20Header"],"kind":"struct"},"11:1728:152":{"crate_id":11,"path":["hashbrown","set","HashSet"],"kind":"struct"},"16:6261:10085":{"crate_id":16,"path":["gimli","read","dwarf","RangeIter"],"kind":"struct"},"1:919:10127":{"crate_id":1,"path":["std","collections","hash","map","IntoValues"],"kind":"struct"},"17:13793:7105":{"crate_id":17,"path":["object","pe","ImageSymbolBytes"],"kind":"struct"},"6:4698:8174":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Phdr"],"kind":"struct"},"17:11352:6582":{"crate_id":17,"path":["object","read","pe","resource","ResourceName"],"kind":"struct"},"2:47022:9122":{"crate_id":2,"path":["core","core_arch","simd","i8x32"],"kind":"struct"},"17:13163:6902":{"crate_id":17,"path":["object","macho","IdentCommand"],"kind":"struct"},"16:4462:7395":{"crate_id":16,"path":["gimli","constants","DwAte"],"kind":"struct"},"20:708:3420":{"crate_id":20,"path":["proc_macro2","fallback","LexError"],"kind":"struct"},"2:12415:3804":{"crate_id":2,"path":["core","str","pattern"],"kind":"module"},"2:3112:2585":{"crate_id":2,"path":["core","ops","index","Index"],"kind":"trait"},"17:14014:7156":{"crate_id":17,"path":["object","pe","ImageImportDescriptor"],"kind":"struct"},"2:41660:167":{"crate_id":2,"path":["core","net","ip_addr","IpAddr"],"kind":"enum"},"24:5105:2315":{"crate_id":24,"path":["syn","lit","Lit"],"kind":"enum"},"16:4949:7410":{"crate_id":16,"path":["gimli","constants","DwDefaulted"],"kind":"struct"},"17:3232:22694":{"crate_id":17,"path":["object","read","macho","section","MachOSectionIterator"],"kind":"struct"},"2:1749:4716":{"crate_id":2,"path":["core","ptr","metadata","Pointee"],"kind":"trait"},"24:3187:1989":{"crate_id":24,"path":["syn","token","Struct"],"kind":"struct"},"2:2832:253":{"crate_id":2,"path":["core","marker","Sync"],"kind":"trait"},"2:46338:9091":{"crate_id":2,"path":["core","core_arch","simd","u64x2"],"kind":"struct"},"2:47708:9160":{"crate_id":2,"path":["core","core_arch","simd","i16x32"],"kind":"struct"},"24:4223:3710":{"crate_id":24,"path":["syn","token","PercentEq"],"kind":"struct"},"16:6485:7362":{"crate_id":16,"path":["gimli","read","index","DebugCuIndex"],"kind":"struct"},"1:12039:1496":{"crate_id":1,"path":["std","slice"],"kind":"primitive"},"1:5973:6219":{"crate_id":1,"path":["std","sync","mpmc","counter","Sender"],"kind":"struct"},"2:40779:3494":{"crate_id":2,"path":["core","iter","adapters","step_by","StepBy"],"kind":"struct"},"2:43194:9653":{"crate_id":2,"path":["core","hash","sip","SipHasher24"],"kind":"struct"},"17:13299:6925":{"crate_id":17,"path":["object","macho","ScatteredRelocationInfo"],"kind":"struct"},"5:7624:4765":{"crate_id":5,"path":["alloc","vec","splice","Splice"],"kind":"struct"},"5:1110:35378":{"crate_id":5,"path":["alloc","collections","btree","append","MergeIter"],"kind":"struct"},"2:7706:3485":{"crate_id":2,"path":["core","iter","traits","accum","Sum"],"kind":"trait"},"2:32387:2130":{"crate_id":2,"path":["core","error","private","Internal"],"kind":"struct"},"2:44105:9677":{"crate_id":2,"path":["core","str","iter","Lines"],"kind":"struct"},"16:5661:9412":{"crate_id":16,"path":["gimli","read","cfi","EhHdrTable"],"kind":"struct"},"1:10078:10225":{"crate_id":1,"path":["std","sys","unix","os","SplitPaths"],"kind":"struct"},"1:10955:10424":{"crate_id":1,"path":["std","sys","unix","process","process_common","Stdio"],"kind":"enum"},"2:30599:4629":{"crate_id":2,"path":["core","mem","maybe_uninit","MaybeUninit"],"kind":"union"},"2:6445:9586":{"crate_id":2,"path":["core","iter","adapters","map_windows","MapWindowsInner"],"kind":"struct"},"1:3241:10321":{"crate_id":1,"path":["std","io","stdio","Stdout"],"kind":"struct"},"2:6439:3492":{"crate_id":2,"path":["core","iter","adapters","map_windows","MapWindows"],"kind":"struct"},"2:2406:208":{"crate_id":2,"path":["core","cmp","PartialOrd"],"kind":"trait"},"2:2815:243":{"crate_id":2,"path":["core","marker","Send"],"kind":"trait"},"2:44436:9695":{"crate_id":2,"path":["core","str","pattern","EmptyNeedle"],"kind":"struct"},"17:14270:7239":{"crate_id":17,"path":["object","pe","ImageHotPatchInfo"],"kind":"struct"},"17:9456:35605":{"crate_id":17,"path":["object","read","any","SegmentIteratorInternal"],"kind":"enum"},"17:11911:6651":{"crate_id":17,"path":["object","elf","FileHeader64"],"kind":"struct"},"21:2631:258":{"crate_id":21,"path":["proc_macro","TokenStream"],"kind":"struct"},"2:48215:9173":{"crate_id":2,"path":["core","core_arch","x86","__m256d"],"kind":"struct"},"6:548:7838":{"crate_id":6,"path":["libc","unix","pollfd"],"kind":"struct"},"24:3834:3684":{"crate_id":24,"path":["syn","token","At"],"kind":"struct"},"11:2140:10207":{"crate_id":11,"path":["hashbrown","set","OccupiedEntry"],"kind":"struct"},"16:4641:7401":{"crate_id":16,"path":["gimli","constants","DwVirtuality"],"kind":"struct"},"5:7513:6166":{"crate_id":5,"path":["alloc","rc","UniqueRc"],"kind":"struct"},"24:4906:3350":{"crate_id":24,"path":["syn","expr","ExprStruct"],"kind":"struct"},"6:6107:8542":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_entry"],"kind":"struct"},"17:13245:6911":{"crate_id":17,"path":["object","macho","Nlist32"],"kind":"struct"},"16:5634:9408":{"crate_id":16,"path":["gimli","read","cfi","ParsedEhFrameHdr"],"kind":"struct"},"2:2537:10283":{"crate_id":2,"path":["core","convert","num","private","Sealed"],"kind":"trait"},"16:6346:10101":{"crate_id":16,"path":["gimli","read","abbrev","AbbreviationsCache"],"kind":"struct"},"2:42401:88":{"crate_id":2,"path":["core","sync","atomic","AtomicI64"],"kind":"struct"},"24:4527:1988":{"crate_id":24,"path":["syn","data","Variant"],"kind":"struct"},"24:4363:3720":{"crate_id":24,"path":["syn","token","ShrEq"],"kind":"struct"},"1:6299:226":{"crate_id":1,"path":["std","sync","mpmc","Receiver"],"kind":"struct"},"2:22731:10340":{"crate_id":2,"path":["core","num","error","IntErrorKind"],"kind":"enum"},"2:44586:9711":{"crate_id":2,"path":["core","str","IsAsciiWhitespace"],"kind":"struct"},"2:40374:9624":{"crate_id":2,"path":["core","char","EscapeDebug"],"kind":"struct"},"2:48226:9174":{"crate_id":2,"path":["core","core_arch","x86","__m512i"],"kind":"struct"},"2:44570:9707":{"crate_id":2,"path":["core","str","CharEscapeDebugContinue"],"kind":"struct"},"2:10852:9593":{"crate_id":2,"path":["core","slice","iter","RSplit"],"kind":"struct"},"2:41853:9649":{"crate_id":2,"path":["core","net","parser","AddrParseError"],"kind":"struct"},"17:13724:7089":{"crate_id":17,"path":["object","pe","AnonObjectHeaderV2"],"kind":"struct"},"1:868:9557":{"crate_id":1,"path":["std","collections","hash","map","Keys"],"kind":"struct"},"24:2694:114":{"crate_id":24,"path":["syn","token","Continue"],"kind":"struct"},"2:8880:3977":{"crate_id":2,"path":["core","panic","unwind_safe","AssertUnwindSafe"],"kind":"struct"},"2:2927:6351":{"crate_id":2,"path":["core","ops","arith","DivAssign"],"kind":"trait"},"2:22632:32468":{"crate_id":2,"path":["core","num","flt2dec","decoder","FullDecoded"],"kind":"enum"},"17:10293:6518":{"crate_id":17,"path":["object","read","elf","symbol","SymbolTable"],"kind":"struct"},"1:8275:9726":{"crate_id":1,"path":["std","os","unix","net","addr","SocketAddr"],"kind":"struct"},"6:5004:8318":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_authinfo"],"kind":"struct"},"17:8795:22575":{"crate_id":17,"path":["object","common","SymbolKind"],"kind":"enum"},"17:10371:22638":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdatIterator"],"kind":"struct"},"16:2359:7335":{"crate_id":16,"path":["gimli","common","Register"],"kind":"struct"},"16:6401:7361":{"crate_id":16,"path":["gimli","read","aranges","DebugAranges"],"kind":"struct"},"17:10495:9369":{"crate_id":17,"path":["object","read","elf","version","VersionTable"],"kind":"struct"},"2:45953:9071":{"crate_id":2,"path":["core","core_arch","simd","i16x2"],"kind":"struct"},"1:8803:205":{"crate_id":1,"path":["std","process","Output"],"kind":"struct"},"5:7538:9583":{"crate_id":5,"path":["alloc","string","FromUtf8Error"],"kind":"struct"},"2:11458:15628":{"crate_id":2,"path":["core","slice","iter","GroupBy"],"kind":"struct"},"24:3914:3689":{"crate_id":24,"path":["syn","token","Dollar"],"kind":"struct"},"24:3868:3686":{"crate_id":24,"path":["syn","token","CaretEq"],"kind":"struct"},"1:3938:10341":{"crate_id":1,"path":["std","os","unix","ffi","os_str","OsStrExt"],"kind":"trait"},"24:5152:3366":{"crate_id":24,"path":["syn","lit","LitChar"],"kind":"struct"},"1:11199:9261":{"crate_id":1,"path":["std","sys","unix","time","SystemTime"],"kind":"struct"},"5:7471:32462":{"crate_id":5,"path":["alloc","ffi","c_str","FromBytesWithNulErrorKind"],"kind":"enum"},"2:40366:9618":{"crate_id":2,"path":["core","char","EscapeDefault"],"kind":"struct"},"17:9753:22588":{"crate_id":17,"path":["object","read","any","DynamicRelocationIterator"],"kind":"struct"},"17:13423:6927":{"crate_id":17,"path":["object","pe","ImageDosHeader"],"kind":"struct"},"6:1691:7991":{"crate_id":6,"path":["libc","unix","linux_like","mmsghdr"],"kind":"struct"},"1:4800:6211":{"crate_id":1,"path":["std","os","fd","owned","OwnedFd"],"kind":"struct"},"16:6545:7435":{"crate_id":16,"path":["gimli","read","index","UnitIndexSection"],"kind":"struct"},"17:13803:7106":{"crate_id":17,"path":["object","pe","ImageSymbolEx"],"kind":"struct"},"1:6428:3466":{"crate_id":1,"path":["std","sync","once","Once"],"kind":"struct"},"17:10904:22696":{"crate_id":17,"path":["object","read","macho","segment","MachOSegmentIterator"],"kind":"struct"},"24:5484:3387":{"crate_id":24,"path":["syn","ty","TypeParen"],"kind":"struct"},"17:9922:22623":{"crate_id":17,"path":["object","read","coff","file","CoffCommon"],"kind":"struct"},"24:4812:3329":{"crate_id":24,"path":["syn","expr","ExprCall"],"kind":"struct"},"11:700:3401":{"crate_id":11,"path":["hashbrown","map","IntoIter"],"kind":"struct"},"16:7503:7373":{"crate_id":16,"path":["gimli","read","pubnames","DebugPubNames"],"kind":"struct"},"5:678:256":{"crate_id":5,"path":["alloc","borrow","ToOwned"],"kind":"trait"},"16:6083:21613":{"crate_id":16,"path":["gimli","read","cfi","CallFrameInstruction"],"kind":"enum"},"1:8477:9243":{"crate_id":1,"path":["std","path","PrefixComponent"],"kind":"struct"},"17:9986:22610":{"crate_id":17,"path":["object","read","coff","section","CoffSectionIterator"],"kind":"struct"},"2:21368:10283":{"crate_id":2,"path":["core","core_simd","cast","sealed","Sealed"],"kind":"trait"},"5:7500:9582":{"crate_id":5,"path":["alloc","ffi","c_str","IntoStringError"],"kind":"struct"},"1:6164:6218":{"crate_id":1,"path":["std","sync","mpmc","waker","SyncWaker"],"kind":"struct"},"5:6520:6139":{"crate_id":5,"path":["alloc","vec","drain","drop","DropGuard"],"kind":"struct"},"1:7902:4832":{"crate_id":1,"path":["std","hash","random","RandomState"],"kind":"struct"},"24:2575:3649":{"crate_id":24,"path":["syn","token","Async"],"kind":"struct"},"16:3915:7391":{"crate_id":16,"path":["gimli","constants","DwChildren"],"kind":"struct"},"24:676:35849":{"crate_id":24,"path":["syn","expr","parsing","Precedence"],"kind":"enum"},"17:256:35608":{"crate_id":17,"path":["object","read","util","DebugByte"],"kind":"struct"},"24:3136:3671":{"crate_id":24,"path":["syn","token","SelfType"],"kind":"struct"},"1:10580:4555":{"crate_id":1,"path":["std","sys","unix","thread","Thread"],"kind":"struct"},"6:5140:8380":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_txtime"],"kind":"struct"},"1:11595:9275":{"crate_id":1,"path":["std","alloc","System"],"kind":"struct"},"24:4587:2314":{"crate_id":24,"path":["syn","expr","Expr"],"kind":"enum"},"18:614:35618":{"crate_id":18,"path":["memchr","memmem","twoway","SuffixKind"],"kind":"enum"},"2:3077:137":{"crate_id":2,"path":["core","ops","function","Fn"],"kind":"trait"},"16:2504:7341":{"crate_id":16,"path":["gimli","common","DebugLineOffset"],"kind":"struct"},"1:12035:1650":{"crate_id":1,"path":["std","unit"],"kind":"primitive"},"2:2889:6345":{"crate_id":2,"path":["core","ops","arith","Sub"],"kind":"trait"},"18:644:6374":{"crate_id":18,"path":["memchr","memmem","x86","avx","nostd","Forward"],"kind":"struct"},"2:9843:3546":{"crate_id":2,"path":["core","fmt","Octal"],"kind":"trait"},"6:4724:8176":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Shdr"],"kind":"struct"},"2:23321:8820":{"crate_id":2,"path":["core","num","nonzero","NonZeroIsize"],"kind":"struct"},"2:2974:6355":{"crate_id":2,"path":["core","ops","bit","BitOrAssign"],"kind":"trait"},"6:4854:8237":{"crate_id":6,"path":["libc","unix","linux_like","linux","can_filter"],"kind":"struct"},"2:32499:4327":{"crate_id":2,"path":["core","marker","PhantomPinned"],"kind":"struct"},"21:2329:1974":{"crate_id":21,"path":["proc_macro","bridge","Ident"],"kind":"struct"},"24:5189:2355":{"crate_id":24,"path":["syn","mac","Macro"],"kind":"struct"},"1:4030:10347":{"crate_id":1,"path":["std","os","unix","fs","FileTypeExt"],"kind":"trait"},"2:40599:3488":{"crate_id":2,"path":["core","iter","adapters","cloned","Cloned"],"kind":"struct"},"24:4808:3328":{"crate_id":24,"path":["syn","expr","ExprBreak"],"kind":"struct"},"17:14069:7174":{"crate_id":17,"path":["object","pe","ImageResourceDirectoryEntry"],"kind":"struct"},"17:10629:9381":{"crate_id":17,"path":["object","read","elf","attributes","AttributeIndexIterator"],"kind":"struct"},"1:12040:1529":{"crate_id":1,"path":["std","str"],"kind":"primitive"},"5:7274:9575":{"crate_id":5,"path":["alloc","collections","binary_heap","IntoIterSorted"],"kind":"struct"},"1:4823:10356":{"crate_id":1,"path":["std","os","fd","owned","AsFd"],"kind":"trait"},"17:10521:9372":{"crate_id":17,"path":["object","read","elf","version","VerdauxIterator"],"kind":"struct"},"6:6781:8656":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statvfs64"],"kind":"struct"},"2:48279:9177":{"crate_id":2,"path":["core","core_arch","x86","__m128bh"],"kind":"struct"},"17:11152:22763":{"crate_id":17,"path":["object","read","pe","section","PeRelocationIterator"],"kind":"struct"},"20:775:3423":{"crate_id":20,"path":["proc_macro2","extra","DelimSpan"],"kind":"struct"},"6:4968:8294":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_sndinfo"],"kind":"struct"},"1:10769:9723":{"crate_id":1,"path":["std","sys","unix","fs","OpenOptions"],"kind":"struct"},"1:9095:183":{"crate_id":1,"path":["std","sync","mutex","MutexGuard"],"kind":"struct"},"1:3168:31684":{"crate_id":1,"path":["std","io","stdio","StderrRaw"],"kind":"struct"},"16:3315:7384":{"crate_id":16,"path":["gimli","arch","LoongArch"],"kind":"struct"},"2:44055:9675":{"crate_id":2,"path":["core","str","iter","Matches"],"kind":"struct"},"1:12051:1634":{"crate_id":1,"path":["std","u8"],"kind":"primitive"},"17:14402:7280":{"crate_id":17,"path":["object","pe","ImageEnclaveImport"],"kind":"struct"},"1:8287:10374":{"crate_id":1,"path":["std","os","unix","net","ancillary","AncillaryError"],"kind":"enum"},"17:14449:7294":{"crate_id":17,"path":["object","pe","ImageDebugMisc"],"kind":"struct"},"6:6711:8632":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stack_t"],"kind":"struct"},"6:6889:8718":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","mcontext_t"],"kind":"struct"},"2:7756:3483":{"crate_id":2,"path":["core","iter","traits","collect","Extend"],"kind":"trait"},"17:10448:9562":{"crate_id":17,"path":["object","read","elf","hash","HashTable"],"kind":"struct"},"16:4053:7392":{"crate_id":16,"path":["gimli","constants","DwTag"],"kind":"struct"},"1:12047:790":{"crate_id":1,"path":["std","i16"],"kind":"primitive"},"6:489:7801":{"crate_id":6,"path":["libc","unix","timeval"],"kind":"struct"},"2:22592:32470":{"crate_id":2,"path":["core","num","dec2flt","FloatErrorKind"],"kind":"enum"},"1:910:10201":{"crate_id":1,"path":["std","collections","hash","map","ValuesMut"],"kind":"struct"},"6:6804:8663":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_fpxreg"],"kind":"struct"},"5:7320:3401":{"crate_id":5,"path":["alloc","collections","btree","set","IntoIter"],"kind":"struct"},"20:732:1962":{"crate_id":20,"path":["proc_macro2","fallback","Group"],"kind":"struct"},"2:3327:3574":{"crate_id":2,"path":["core","ops","unsize","CoerceUnsized"],"kind":"trait"},"6:7616:8769":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_barrierattr_t"],"kind":"struct"},"17:13011:6871":{"crate_id":17,"path":["object","macho","LinkeditDataCommand"],"kind":"struct"},"5:2251:9571":{"crate_id":5,"path":["alloc","collections","btree","navigate","LazyLeafRange"],"kind":"struct"},"16:4417:7394":{"crate_id":16,"path":["gimli","constants","DwForm"],"kind":"struct"},"17:13547:7030":{"crate_id":17,"path":["object","pe","MaskedRichHeaderEntry"],"kind":"struct"},"17:11138:22736":{"crate_id":17,"path":["object","read","pe","section","PeSection"],"kind":"struct"},"16:2644:7347":{"crate_id":16,"path":["gimli","common","DebugMacroOffset"],"kind":"struct"},"17:14356:7266":{"crate_id":17,"path":["object","pe","ImageEnclaveConfig32"],"kind":"struct"},"16:6929:7479":{"crate_id":16,"path":["gimli","read","loclists","LocationLists"],"kind":"struct"},"1:6898:6226":{"crate_id":1,"path":["std","sys","common","thread_local","abort_on_dtor_unwind","DtorUnwindGuard"],"kind":"struct"},"2:44820:9785":{"crate_id":2,"path":["core","task","wake","RawWaker"],"kind":"struct"},"1:4917:10401":{"crate_id":1,"path":["std","os","net","linux_ext","tcp","TcpStreamExt"],"kind":"trait"},"1:8138:3463":{"crate_id":1,"path":["std","io","util","Empty"],"kind":"struct"},"17:9999:6482":{"crate_id":17,"path":["object","read","coff","section","CoffSection"],"kind":"struct"},"17:13086:6883":{"crate_id":17,"path":["object","macho","BuildVersionCommand"],"kind":"struct"},"5:629:10031":{"crate_id":5,"path":["alloc","boxed","from","StringError"],"kind":"struct"},"16:149:6129":{"crate_id":16,"path":["gimli","read","util","ArrayVec"],"kind":"struct"},"2:1681:1179":{"crate_id":2,"path":["core","ptr"],"kind":"module"},"17:11688:22594":{"crate_id":17,"path":["object","read","RelocationTarget"],"kind":"enum"},"17:11049:22751":{"crate_id":17,"path":["object","read","pe","file","PeFile"],"kind":"struct"},"18:652:6374":{"crate_id":18,"path":["memchr","memmem","x86","sse","Forward"],"kind":"struct"},"16:5419:6492":{"crate_id":16,"path":["gimli","endianity","BigEndian"],"kind":"struct"},"2:22653:32483":{"crate_id":2,"path":["core","num","flt2dec","Sign"],"kind":"enum"},"2:22190:10568":{"crate_id":2,"path":["core","core_simd","simd","ptr","const_ptr","SimdConstPtr"],"kind":"trait"},"24:5480:3385":{"crate_id":24,"path":["syn","ty","TypeMacro"],"kind":"struct"},"16:2305:21639":{"crate_id":16,"path":["gimli","common","Vendor"],"kind":"enum"},"1:3282:10318":{"crate_id":1,"path":["std","io","stdio","StderrLock"],"kind":"struct"},"17:13907:7131":{"crate_id":17,"path":["object","pe","ImageLinenumber"],"kind":"struct"},"6:4824:8221":{"crate_id":6,"path":["libc","unix","linux_like","linux","regmatch_t"],"kind":"struct"},"17:10751:6529":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandIterator"],"kind":"struct"},"16:4344:7393":{"crate_id":16,"path":["gimli","constants","DwAt"],"kind":"struct"},"18:515:6377":{"crate_id":18,"path":["memchr","memmem","prefilter","PrefilterFn"],"kind":"struct"},"17:13216:6908":{"crate_id":17,"path":["object","macho","DataInCodeEntry"],"kind":"struct"},"17:11001:6567":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbolTable"],"kind":"struct"},"16:6226:22506":{"crate_id":16,"path":["gimli","read","dwarf","DwarfPackage"],"kind":"struct"},"11:328:9555":{"crate_id":11,"path":["hashbrown","raw","RawIter"],"kind":"struct"},"2:15:2803":{"crate_id":2,"path":["core","write"],"kind":"macro"},"2:2590:263":{"crate_id":2,"path":["core","convert","TryFrom"],"kind":"trait"},"5:7549:10032":{"crate_id":5,"path":["alloc","string","FromUtf16Error"],"kind":"struct"},"1:904:4764":{"crate_id":1,"path":["std","collections","hash","map","ExtractIf"],"kind":"struct"},"2:10648:3402":{"crate_id":2,"path":["core","slice","iter","Iter"],"kind":"struct"},"2:41142:3468":{"crate_id":2,"path":["core","iter","sources","once_with","OnceWith"],"kind":"struct"},"17:12889:6852":{"crate_id":17,"path":["object","macho","DylibModule32"],"kind":"struct"},"1:1546:4764":{"crate_id":1,"path":["std","collections","hash","set","ExtractIf"],"kind":"struct"},"17:8849:22577":{"crate_id":17,"path":["object","common","RelocationKind"],"kind":"enum"},"2:43026:3545":{"crate_id":2,"path":["core","fmt","Arguments"],"kind":"struct"},"6:483:7798":{"crate_id":6,"path":["libc","unix","utimbuf"],"kind":"struct"},"2:43441:9657":{"crate_id":2,"path":["core","slice","ascii","EscapeByte"],"kind":"struct"},"2:1651:4625":{"crate_id":2,"path":["core","mem","Discriminant"],"kind":"struct"},"6:7633:8774":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_cond_t"],"kind":"struct"},"3:234:232":{"crate_id":3,"path":["compiler_builtins","float","cmp","Result"],"kind":"enum"},"6:5859:8414":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","statx_timestamp"],"kind":"struct"},"1:929:10203":{"crate_id":1,"path":["std","collections","hash","map","RawEntryMut"],"kind":"enum"},"17:11296:9395":{"crate_id":17,"path":["object","read","pe","relocation","RelocationIterator"],"kind":"struct"},"24:1923:3400":{"crate_id":24,"path":["syn","punctuated","IntoPairs"],"kind":"struct"},"2:46015:9073":{"crate_id":2,"path":["core","core_arch","simd","u16x4"],"kind":"struct"},"17:8687:22572":{"crate_id":17,"path":["object","common","BinaryFormat"],"kind":"enum"},"9:486:21485":{"crate_id":9,"path":["miniz_oxide","DataFormat"],"kind":"enum"},"17:9173:6495":{"crate_id":17,"path":["object","endian","U64Bytes"],"kind":"struct"},"5:7365:3401":{"crate_id":5,"path":["alloc","collections","vec_deque","into_iter","IntoIter"],"kind":"struct"},"17:14461:7296":{"crate_id":17,"path":["object","pe","ImageFunctionEntry"],"kind":"struct"},"23:281:2051":{"crate_id":23,"path":["quote","__private","push_lifetime_spanned","Lifetime"],"kind":"struct"},"1:8992:28704":{"crate_id":1,"path":["std","sync","mpmc","error","SendTimeoutError"],"kind":"enum"},"6:4595:8152":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_ff_upload"],"kind":"struct"},"2:3083:139":{"crate_id":2,"path":["core","ops","function","FnOnce"],"kind":"trait"},"14:165:21575":{"crate_id":14,"path":["rustc_demangle","DemangleStyle"],"kind":"enum"},"23:235:4257":{"crate_id":23,"path":["quote","__private","get_span","GetSpan"],"kind":"struct"},"1:915:10126":{"crate_id":1,"path":["std","collections","hash","map","IntoKeys"],"kind":"struct"},"17:10187:9367":{"crate_id":17,"path":["object","read","coff","import","ImportObjectData"],"kind":"struct"},"24:4433:3725":{"crate_id":24,"path":["syn","token","Tilde"],"kind":"struct"},"17:9208:6496":{"crate_id":17,"path":["object","endian","I16Bytes"],"kind":"struct"},"17:12209:6702":{"crate_id":17,"path":["object","elf","Verdef"],"kind":"struct"},"17:11711:6578":{"crate_id":17,"path":["object","read","Relocation"],"kind":"struct"},"5:1680:6139":{"crate_id":5,"path":["alloc","collections","btree","map","drop","DropGuard"],"kind":"struct"},"2:10215:6190":{"crate_id":2,"path":["core","slice","sort","InsertionHole"],"kind":"struct"},"24:1070:2051":{"crate_id":24,"path":["syn","lifetime","Lifetime"],"kind":"struct"},"17:11743:6614":{"crate_id":17,"path":["object","read","CompressedFileRange"],"kind":"struct"},"6:4556:8131":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_condition_effect"],"kind":"struct"},"6:501:7806":{"crate_id":6,"path":["libc","unix","rlimit"],"kind":"struct"},"16:6583:9493":{"crate_id":16,"path":["gimli","read","line","LineRows"],"kind":"struct"},"2:32391:2739":{"crate_id":2,"path":["core","error","tags","Value"],"kind":"struct"},"1:8873:9252":{"crate_id":1,"path":["std","sync","mpsc","SendError"],"kind":"struct"},"24:4375:3721":{"crate_id":24,"path":["syn","token","Slash"],"kind":"struct"},"16:3032:7381":{"crate_id":16,"path":["gimli","common","DwoId"],"kind":"struct"},"20:744:2661":{"crate_id":20,"path":["proc_macro2","fallback","Literal"],"kind":"struct"},"17:11075:22761":{"crate_id":17,"path":["object","read","pe","file","PeComdat"],"kind":"struct"},"2:43186:9651":{"crate_id":2,"path":["core","hash","sip","SipHasher13"],"kind":"struct"},"16:0:3168":{"crate_id":16,"path":["gimli"],"kind":"module"},"16:6721:22509":{"crate_id":16,"path":["gimli","read","line","ColumnType"],"kind":"enum"},"2:44425:15654":{"crate_id":2,"path":["core","str","pattern","StrSearcherImpl"],"kind":"enum"},"11:351:35522":{"crate_id":11,"path":["hashbrown","raw","FullBucketsIndices"],"kind":"struct"},"1:3162:29506":{"crate_id":1,"path":["std","io","stdio","StdinRaw"],"kind":"struct"},"2:44143:9681":{"crate_id":2,"path":["core","str","iter","EncodeUtf16"],"kind":"struct"},"2:44828:9063":{"crate_id":2,"path":["core","task","wake","RawWakerVTable"],"kind":"struct"},"2:48189:9171":{"crate_id":2,"path":["core","core_arch","x86","__m256i"],"kind":"struct"},"6:7556:8765":{"crate_id":6,"path":["libc","unix","linux_like","linux","arch","generic","termios2"],"kind":"struct"},"1:9049:28565":{"crate_id":1,"path":["std","sync","mpmc","select","Selected"],"kind":"enum"},"2:23766:242":{"crate_id":2,"path":["core","num","saturating","Saturating"],"kind":"struct"},"24:4860:3340":{"crate_id":24,"path":["syn","expr","ExprLet"],"kind":"struct"},"17:11536:9399":{"crate_id":17,"path":["object","read","SymbolMap"],"kind":"struct"},"16:6467:9482":{"crate_id":16,"path":["gimli","read","aranges","ArangeEntry"],"kind":"struct"},"2:10740:9592":{"crate_id":2,"path":["core","slice","iter","SplitInclusive"],"kind":"struct"},"11:396:6134":{"crate_id":11,"path":["hashbrown","raw","RawDrain"],"kind":"struct"},"2:41908:9037":{"crate_id":2,"path":["core","net","socket_addr","SocketAddrV6"],"kind":"struct"},"2:2872:3593":{"crate_id":2,"path":["core","marker","Unpin"],"kind":"trait"},"2:4404:3566":{"crate_id":2,"path":["core","cell","Ref"],"kind":"struct"},"17:12087:6681":{"crate_id":17,"path":["object","elf","Rel32"],"kind":"struct"},"2:22698:9608":{"crate_id":2,"path":["core","num","fmt","Formatted"],"kind":"struct"},"6:4628:8169":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Ehdr"],"kind":"struct"},"16:3600:7386":{"crate_id":16,"path":["gimli","arch","X86"],"kind":"struct"},"1:5755:10440":{"crate_id":1,"path":["std","sync","barrier","BarrierWaitResult"],"kind":"struct"},"2:44001:9672":{"crate_id":2,"path":["core","str","iter","MatchIndices"],"kind":"struct"},"2:44073:9676":{"crate_id":2,"path":["core","str","iter","RMatches"],"kind":"struct"},"24:4518:3306":{"crate_id":24,"path":["syn","attr","MetaList"],"kind":"struct"},"21:404:35657":{"crate_id":21,"path":["proc_macro","bridge","scoped_cell","RefMutL"],"kind":"struct"},"5:5867:4766":{"crate_id":5,"path":["alloc","string","Drain"],"kind":"struct"},"5:1265:9529":{"crate_id":5,"path":["alloc","collections","btree","map","entry","Entry"],"kind":"enum"},"2:22112:10566":{"crate_id":2,"path":["core","core_simd","simd","num","int","SimdInt"],"kind":"trait"},"21:2379:2661":{"crate_id":21,"path":["proc_macro","bridge","Literal"],"kind":"struct"},"2:22175:10283":{"crate_id":2,"path":["core","core_simd","simd","num","sealed","Sealed"],"kind":"trait"},"17:1184:22618":{"crate_id":17,"path":["object","read","coff","relocation","CoffRelocationIterator"],"kind":"struct"},"1:8301:10335":{"crate_id":1,"path":["std","os","unix","net","listener","Incoming"],"kind":"struct"},"2:7785:127":{"crate_id":2,"path":["core","iter","traits","double_ended","DoubleEndedIterator"],"kind":"trait"},"2:44459:9703":{"crate_id":2,"path":["core","str","lossy","Utf8Chunk"],"kind":"struct"},"24:3357:3678":{"crate_id":24,"path":["syn","token","Virtual"],"kind":"struct"},"2:43445:9658":{"crate_id":2,"path":["core","slice","ascii","EscapeAscii"],"kind":"struct"},"1:946:10205":{"crate_id":1,"path":["std","collections","hash","map","RawVacantEntryMut"],"kind":"struct"},"11:1025:10207":{"crate_id":11,"path":["hashbrown","map","OccupiedEntry"],"kind":"struct"},"6:4776:8198":{"crate_id":6,"path":["libc","unix","linux_like","linux","genlmsghdr"],"kind":"struct"},"2:40627:3499":{"crate_id":2,"path":["core","iter","adapters","enumerate","Enumerate"],"kind":"struct"},"1:1970:203":{"crate_id":1,"path":["std","ffi","os_str","OsStr"],"kind":"struct"},"1:10537:10321":{"crate_id":1,"path":["std","sys","unix","stdio","Stdout"],"kind":"struct"},"17:11952:6654":{"crate_id":17,"path":["object","elf","SectionHeader32"],"kind":"struct"},"1:11372:9795":{"crate_id":1,"path":["std","sys_common","wtf8","Wtf8"],"kind":"struct"},"16:6915:7370":{"crate_id":16,"path":["gimli","read","loclists","DebugLocLists"],"kind":"struct"},"2:21551:8799":{"crate_id":2,"path":["core","core_simd","masks","Mask"],"kind":"struct"},"17:8595:22559":{"crate_id":17,"path":["object","common","Architecture"],"kind":"enum"},"2:2826:250":{"crate_id":2,"path":["core","marker","StructuralEq"],"kind":"trait"},"2:46786:9103":{"crate_id":2,"path":["core","core_arch","simd","u8x32"],"kind":"struct"},"24:5301:209":{"crate_id":24,"path":["syn","path","Path"],"kind":"struct"},"17:10398:22684":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdatSectionIterator"],"kind":"struct"},"1:12000:10139":{"crate_id":1,"path":["std","backtrace_rs","symbolize","gimli","Cache"],"kind":"struct"},"16:6531:9491":{"crate_id":16,"path":["gimli","read","index","UnitIndexSectionIterator"],"kind":"struct"},"24:4984:1982":{"crate_id":24,"path":["syn","generics","Generics"],"kind":"struct"},"24:1490:3527":{"crate_id":24,"path":["syn","parse","ParseBuffer"],"kind":"struct"},"17:11873:6636":{"crate_id":17,"path":["object","archive","AixMemberOffset"],"kind":"struct"},"1:2948:134":{"crate_id":1,"path":["std","io","error","Error"],"kind":"struct"},"6:507:7809":{"crate_id":6,"path":["libc","unix","rusage"],"kind":"struct"},"17:9087:6492":{"crate_id":17,"path":["object","endian","BigEndian"],"kind":"struct"},"24:4894:3347":{"crate_id":24,"path":["syn","expr","ExprReference"],"kind":"struct"},"6:1570:7909":{"crate_id":6,"path":["libc","unix","linux_like","fd_set"],"kind":"struct"},"1:5053:31064":{"crate_id":1,"path":["std","path","fmt","DebugHelper"],"kind":"struct"},"2:41119:9641":{"crate_id":2,"path":["core","iter","sources","from_coroutine","FromCoroutine"],"kind":"struct"},"16:4527:7397":{"crate_id":16,"path":["gimli","constants","DwDs"],"kind":"struct"},"2:41889:9036":{"crate_id":2,"path":["core","net","socket_addr","SocketAddrV4"],"kind":"struct"},"9:357:21501":{"crate_id":9,"path":["miniz_oxide","inflate","TINFLStatus"],"kind":"enum"},"2:5828:3490":{"crate_id":2,"path":["core","iter","adapters","flatten","Flatten"],"kind":"struct"},"16:7768:7366":{"crate_id":16,"path":["gimli","read","unit","DebugInfo"],"kind":"struct"},"17:11024:6568":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbol"],"kind":"struct"},"5:6861:4772":{"crate_id":5,"path":["alloc","vec","in_place_drop","InPlaceDstBufDrop"],"kind":"struct"},"1:5397:10421":{"crate_id":1,"path":["std","process","ChildStdin"],"kind":"struct"},"2:46554:9098":{"crate_id":2,"path":["core","core_arch","simd","f64x4"],"kind":"struct"},"1:2946:232":{"crate_id":1,"path":["std","io","error","Result"],"kind":"type_alias"},"2:42014:3975":{"crate_id":2,"path":["core","panic","location","Location"],"kind":"struct"},"2:10973:15633":{"crate_id":2,"path":["core","slice","iter","RSplitNMut"],"kind":"struct"},"6:475:1963":{"crate_id":6,"path":["libc","unix","group"],"kind":"struct"},"2:48020:9164":{"crate_id":2,"path":["core","core_arch","simd","f32x16"],"kind":"struct"},"5:1511:10127":{"crate_id":5,"path":["alloc","collections","btree","map","IntoValues"],"kind":"struct"},"11:102:9551":{"crate_id":11,"path":["hashbrown","raw","Bucket"],"kind":"struct"},"24:3374:3679":{"crate_id":24,"path":["syn","token","Where"],"kind":"struct"},"1:6985:10047":{"crate_id":1,"path":["std","sys_common","backtrace","_print","DisplayBacktrace"],"kind":"struct"},"6:4932:8273":{"crate_id":6,"path":["libc","unix","linux_like","linux","in6_ifreq"],"kind":"struct"},"20:834:1974":{"crate_id":20,"path":["proc_macro2","imp","Ident"],"kind":"enum"},"1:8147:9225":{"crate_id":1,"path":["std","io","util","Sink"],"kind":"struct"},"24:4804:3327":{"crate_id":24,"path":["syn","expr","ExprBlock"],"kind":"struct"},"2:44598:9714":{"crate_id":2,"path":["core","str","UnsafeBytesToStr"],"kind":"struct"},"5:2043:3538":{"crate_id":5,"path":["alloc","collections","btree","map","Cursor"],"kind":"struct"},"24:4112:3702":{"crate_id":24,"path":["syn","token","MinusEq"],"kind":"struct"},"2:1840:185":{"crate_id":2,"path":["core","ptr","non_null","NonNull"],"kind":"struct"},"6:4584:8147":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_effect"],"kind":"struct"},"2:40720:3506":{"crate_id":2,"path":["core","iter","adapters","peekable","Peekable"],"kind":"struct"},"6:7371:8753":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","align","clone_args"],"kind":"struct"},"1:1874:10040":{"crate_id":1,"path":["std","error","Report"],"kind":"struct"},"2:40473:9631":{"crate_id":2,"path":["core","ffi","c_str","FromBytesUntilNulError"],"kind":"struct"},"2:48160:9168":{"crate_id":2,"path":["core","core_arch","x86","__m128i"],"kind":"struct"},"2:2657:122":{"crate_id":2,"path":["core","default","Default"],"kind":"trait"},"16:2766:7352":{"crate_id":16,"path":["gimli","common","DebugStrOffset"],"kind":"struct"},"2:4505:3570":{"crate_id":2,"path":["core","cell","SyncUnsafeCell"],"kind":"struct"},"16:5673:7364":{"crate_id":16,"path":["gimli","read","cfi","EhFrame"],"kind":"struct"},"5:1146:35379":{"crate_id":5,"path":["alloc","collections","btree","dedup_sorted_iter","DedupSortedIter"],"kind":"struct"},"2:3312:33433":{"crate_id":2,"path":["core","ops","try_trait","NeverShortCircuitResidual"],"kind":"enum"},"14:7:10024":{"crate_id":14,"path":["rustc_demangle","legacy","Demangle"],"kind":"struct"},"2:44870:4677":{"crate_id":2,"path":["core","alloc","AllocError"],"kind":"struct"},"2:2823:3573":{"crate_id":2,"path":["core","marker","Unsize"],"kind":"trait"},"17:9853:22602":{"crate_id":17,"path":["object","read","archive","Members"],"kind":"enum"},"17:3441:22697":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbolIterator"],"kind":"struct"},"2:2210:4701":{"crate_id":2,"path":["core","ptr","from_exposed_addr"],"kind":"function"},"6:569:7849":{"crate_id":6,"path":["libc","unix","sigval"],"kind":"struct"},"16:6893:7476":{"crate_id":16,"path":["gimli","read","lists","ListsHeader"],"kind":"struct"},"2:44621:128":{"crate_id":2,"path":["core","time","Duration"],"kind":"struct"},"17:1075:22613":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbolIterator"],"kind":"struct"},"17:11099:22739":{"crate_id":17,"path":["object","read","pe","section","PeSegmentIterator"],"kind":"struct"},"16:2428:7338":{"crate_id":16,"path":["gimli","common","DebugAddrIndex"],"kind":"struct"},"10:44:7715":{"crate_id":10,"path":["adler","Adler32"],"kind":"struct"},"24:5019:3359":{"crate_id":24,"path":["syn","generics","ConstParam"],"kind":"struct"},"1:2623:10043":{"crate_id":1,"path":["std","io","buffered","bufwriter","WriterPanicked"],"kind":"struct"},"6:5921:8442":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","cmsghdr"],"kind":"struct"},"2:40678:3504":{"crate_id":2,"path":["core","iter","adapters","inspect","Inspect"],"kind":"struct"},"17:2178:22639":{"crate_id":17,"path":["object","read","elf","relocation","ElfDynamicRelocationIterator"],"kind":"struct"},"1:9187:29304":{"crate_id":1,"path":["std","sys","common","thread_local","fast_local","DtorState"],"kind":"enum"},"6:6222:8570":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","sigset_t"],"kind":"struct"},"1:11342:9274":{"crate_id":1,"path":["std","sys_common","wtf8","CodePoint"],"kind":"struct"},"20:0:1812":{"crate_id":20,"path":["proc_macro2"],"kind":"module"},"24:3897:3688":{"crate_id":24,"path":["syn","token","Comma"],"kind":"struct"},"16:2284:21614":{"crate_id":16,"path":["gimli","common","Format"],"kind":"enum"},"1:9129:9261":{"crate_id":1,"path":["std","time","SystemTime"],"kind":"struct"},"2:46055:9075":{"crate_id":2,"path":["core","core_arch","simd","u64x1"],"kind":"struct"},"17:10198:22655":{"crate_id":17,"path":["object","read","elf","file","ElfFile"],"kind":"struct"},"2:2880:4326":{"crate_id":2,"path":["core","marker","FnPtr"],"kind":"trait"},"5:3212:9561":{"crate_id":5,"path":["alloc","collections","btree","set","SymmetricDifference"],"kind":"struct"},"2:7240:32297":{"crate_id":2,"path":["core","iter","adapters","GenericShunt"],"kind":"struct"},"2:9853:3552":{"crate_id":2,"path":["core","fmt","LowerExp"],"kind":"trait"},"6:5104:8367":{"crate_id":6,"path":["libc","unix","linux_like","linux","ifreq"],"kind":"struct"},"2:30691:32457":{"crate_id":2,"path":["core","ptr","alignment","AlignmentEnum32"],"kind":"enum"},"24:4450:2654":{"crate_id":24,"path":["syn","token","Brace"],"kind":"struct"},"17:11762:6617":{"crate_id":17,"path":["object","read","CompressedData"],"kind":"struct"},"9:450:21486":{"crate_id":9,"path":["miniz_oxide","MZError"],"kind":"enum"},"16:6818:9512":{"crate_id":16,"path":["gimli","read","line","CompleteLineProgram"],"kind":"struct"},"15:306:21595":{"crate_id":15,"path":["addr2line","LocationRangeUnitIter"],"kind":"struct"},"24:5062:2636":{"crate_id":24,"path":["syn","generics","TraitBoundModifier"],"kind":"enum"},"17:10367:22649":{"crate_id":17,"path":["object","read","elf","relocation","RelocationSections"],"kind":"struct"},"6:7604:8767":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_rwlockattr_t"],"kind":"struct"},"6:5982:8472":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_mmap_hdr"],"kind":"struct"},"17:13114:6889":{"crate_id":17,"path":["object","macho","DyldInfoCommand"],"kind":"struct"},"17:13686:7082":{"crate_id":17,"path":["object","pe","ImageRomHeaders"],"kind":"struct"},"16:2548:7343":{"crate_id":16,"path":["gimli","common","LocationListsOffset"],"kind":"struct"},"1:4182:10371":{"crate_id":1,"path":["std","os","unix","net","ancillary","Messages"],"kind":"struct"},"1:7530:2055":{"crate_id":1,"path":["std","backtrace_rs","symbolize","Symbol"],"kind":"struct"},"2:40457:32462":{"crate_id":2,"path":["core","ffi","c_str","FromBytesWithNulErrorKind"],"kind":"enum"},"17:10479:6527":{"crate_id":17,"path":["object","read","elf","version","Version"],"kind":"struct"},"1:12054:1633":{"crate_id":1,"path":["std","u64"],"kind":"primitive"},"2:2586:264":{"crate_id":2,"path":["core","convert","TryInto"],"kind":"trait"},"2:40646:3501":{"crate_id":2,"path":["core","iter","adapters","filter_map","FilterMap"],"kind":"struct"},"24:872:35959":{"crate_id":24,"path":["syn","generics","Lifetimes"],"kind":"struct"},"16:8181:7380":{"crate_id":16,"path":["gimli","read","unit","DebugTypes"],"kind":"struct"},"18:113:26598":{"crate_id":18,"path":["memchr","memchr","iter","Memchr3"],"kind":"struct"},"17:12185:6700":{"crate_id":17,"path":["object","elf","Dyn64"],"kind":"struct"},"16:6753:9499":{"crate_id":16,"path":["gimli","read","line","LineProgramHeader"],"kind":"struct"},"17:10562:9375":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSection"],"kind":"struct"},"2:22524:8801":{"crate_id":2,"path":["core","num","dec2flt","common","BiasedFp"],"kind":"struct"},"17:261:35596":{"crate_id":17,"path":["object","read","util","DebugLen"],"kind":"struct"},"2:12157:9668":{"crate_id":2,"path":["core","str","iter","SplitNInternal"],"kind":"struct"},"24:5093:1974":{"crate_id":24,"path":["syn","ident","Ident"],"kind":"function"},"1:8892:9253":{"crate_id":1,"path":["std","sync","mpsc","RecvError"],"kind":"struct"},"6:119:16090":{"crate_id":6,"path":["libc","unix","FILE"],"kind":"enum"},"24:554:5687":{"crate_id":24,"path":["syn","error","ErrorMessage"],"kind":"struct"},"6:5085:8353":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_ifr_ifru"],"kind":"union"},"14:221:7660":{"crate_id":14,"path":["rustc_demangle","SizeLimitExhausted"],"kind":"struct"},"2:3299:15665":{"crate_id":2,"path":["core","ops","try_trait","NeverShortCircuit"],"kind":"struct"},"6:4902:8258":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlmsgerr"],"kind":"struct"},"17:13612:7071":{"crate_id":17,"path":["object","pe","ImageRomOptionalHeader"],"kind":"struct"},"11:1883:3402":{"crate_id":11,"path":["hashbrown","set","Iter"],"kind":"struct"},"18:636:6392":{"crate_id":18,"path":["memchr","memmem","twoway","ApproximateByteSet"],"kind":"struct"},"2:7747:162":{"crate_id":2,"path":["core","iter","traits","collect","IntoIterator"],"kind":"trait"},"5:5378:15617":{"crate_id":5,"path":["alloc","slice","Concat"],"kind":"trait"},"18:699:9354":{"crate_id":18,"path":["memchr","memmem","FinderBuilder"],"kind":"struct"},"24:96:10283":{"crate_id":24,"path":["syn","token","private","Sealed"],"kind":"trait"},"5:6003:16010":{"crate_id":5,"path":["alloc","sync","ArcInner"],"kind":"struct"},"2:40440:106":{"crate_id":2,"path":["core","ffi","c_str","CStr"],"kind":"struct"},"24:5156:3367":{"crate_id":24,"path":["syn","lit","LitFloat"],"kind":"struct"},"24:1331:3542":{"crate_id":24,"path":["syn","lookahead","Peek"],"kind":"trait"},"1:8353:9231":{"crate_id":1,"path":["std","os","fd","owned","BorrowedFd"],"kind":"struct"},"18:521:26611":{"crate_id":18,"path":["memchr","memmem","prefilter","Prefilter"],"kind":"enum"},"24:4989:2525":{"crate_id":24,"path":["syn","generics","GenericParam"],"kind":"enum"},"5:1419:3402":{"crate_id":5,"path":["alloc","collections","btree","map","Iter"],"kind":"struct"},"6:7668:8782":{"crate_id":6,"path":["libc","unix","linux_like","linux","canfd_frame"],"kind":"struct"},"24:1773:1967":{"crate_id":24,"path":["syn","punctuated","Punctuated"],"kind":"struct"},"14:187:21582":{"crate_id":14,"path":["rustc_demangle","SizeLimitedFmtAdapter"],"kind":"struct"},"2:39630:222":{"crate_id":2,"path":["core","ops","range","RangeToInclusive"],"kind":"struct"},"1:11172:31530":{"crate_id":1,"path":["std","sys","unix","thread","cgroups","Cgroup"],"kind":"enum"},"24:552:134":{"crate_id":24,"path":["syn","error","Error"],"kind":"struct"},"17:11112:22738":{"crate_id":17,"path":["object","read","pe","section","PeSegment"],"kind":"struct"},"24:4580:3321":{"crate_id":24,"path":["syn","derive","DataEnum"],"kind":"struct"},"6:4516:8112":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_mask"],"kind":"struct"},"1:2587:6207":{"crate_id":1,"path":["std","io","buffered","bufwriter","BufWriter"],"kind":"struct"},"16:6361:9475":{"crate_id":16,"path":["gimli","read","abbrev","Abbreviation"],"kind":"struct"},"9:507:7775":{"crate_id":9,"path":["miniz_oxide","StreamResult"],"kind":"struct"},"17:12971:6867":{"crate_id":17,"path":["object","macho","PrebindCksumCommand"],"kind":"struct"},"16:7621:22517":{"crate_id":16,"path":["gimli","read","rnglists","RawRngListEntry"],"kind":"enum"},"18:96:26597":{"crate_id":18,"path":["memchr","memchr","iter","Memchr2"],"kind":"struct"},"1:11160:9250":{"crate_id":1,"path":["std","sys","unix","process","process_inner","ExitStatusError"],"kind":"struct"},"5:4855:223":{"crate_id":5,"path":["alloc","rc","Rc"],"kind":"struct"},"24:3306:3675":{"crate_id":24,"path":["syn","token","Unsafe"],"kind":"struct"},"7:78:21479":{"crate_id":7,"path":["unwind","libunwind","_Unwind_Action"],"kind":"enum"},"2:2200:630":{"crate_id":2,"path":["core","ptr","drop_in_place"],"kind":"function"},"24:1141:5263":{"crate_id":24,"path":["syn","lit","LitFloatRepr"],"kind":"struct"},"2:7743:142":{"crate_id":2,"path":["core","iter","traits","collect","FromIterator"],"kind":"trait"},"2:42066:4560":{"crate_id":2,"path":["core","pin","Pin"],"kind":"struct"},"5:6594:3401":{"crate_id":5,"path":["alloc","vec","into_iter","IntoIter"],"kind":"struct"},"17:12555:6787":{"crate_id":17,"path":["object","macho","SegmentCommand32"],"kind":"struct"},"17:13827:7108":{"crate_id":17,"path":["object","pe","ImageAuxSymbolTokenDef"],"kind":"struct"},"24:2094:2598":{"crate_id":24,"path":["syn","punctuated","Pair"],"kind":"enum"},"2:30633:32475":{"crate_id":2,"path":["core","ptr","alignment","AlignmentEnum16"],"kind":"enum"},"16:2670:7348":{"crate_id":16,"path":["gimli","common","RawRangeListsOffset"],"kind":"struct"},"16:7660:7529":{"crate_id":16,"path":["gimli","read","rnglists","RawRange"],"kind":"struct"},"5:4371:6161":{"crate_id":5,"path":["alloc","collections","vec_deque","drop","Dropper"],"kind":"struct"},"2:22980:195":{"crate_id":2,"path":["core","num","nonzero","NonZeroU8"],"kind":"struct"},"2:11940:15779":{"crate_id":2,"path":["core","slice","SlicePattern"],"kind":"trait"},"6:6666:8608":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statfs"],"kind":"struct"},"2:4864:33657":{"crate_id":2,"path":["core","ffi","sealed_trait","VaArgSafe"],"kind":"trait"},"17:13452:6947":{"crate_id":17,"path":["object","pe","ImageOs2Header"],"kind":"struct"},"11:2569:3456":{"crate_id":11,"path":["hashbrown","TryReserveError"],"kind":"enum"},"17:11236:9392":{"crate_id":17,"path":["object","read","pe","import","ImportThunkList"],"kind":"struct"},"18:491:9346":{"crate_id":18,"path":["memchr","cow","Imp"],"kind":"struct"},"17:14283:7245":{"crate_id":17,"path":["object","pe","ImageHotPatchBase"],"kind":"struct"},"2:40739:3508":{"crate_id":2,"path":["core","iter","adapters","scan","Scan"],"kind":"struct"},"24:5304:2625":{"crate_id":24,"path":["syn","path","PathSegment"],"kind":"struct"},"1:1041:9529":{"crate_id":1,"path":["std","collections","hash","map","Entry"],"kind":"enum"},"11:742:10127":{"crate_id":11,"path":["hashbrown","map","IntoValues"],"kind":"struct"},"1:4052:10351":{"crate_id":1,"path":["std","os","unix","fs","DirBuilderExt"],"kind":"trait"},"6:4830:8224":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_extended_err"],"kind":"struct"},"2:23259:189":{"crate_id":2,"path":["core","num","nonzero","NonZeroI64"],"kind":"struct"},"16:7792:22519":{"crate_id":16,"path":["gimli","read","unit","UnitType"],"kind":"enum"},"24:4914:3352":{"crate_id":24,"path":["syn","expr","ExprTryBlock"],"kind":"struct"},"1:8867:3401":{"crate_id":1,"path":["std","sync","mpsc","IntoIter"],"kind":"struct"},"18:681:9350":{"crate_id":18,"path":["memchr","memmem","Finder"],"kind":"struct"},"2:42284:93":{"crate_id":2,"path":["core","sync","atomic","AtomicU16"],"kind":"struct"},"16:8205:22523":{"crate_id":16,"path":["gimli","read","value","ValueType"],"kind":"enum"},"2:10945:9670":{"crate_id":2,"path":["core","slice","iter","RSplitN"],"kind":"struct"},"24:2881:3660":{"crate_id":24,"path":["syn","token","If"],"kind":"struct"},"2:40707:3491":{"crate_id":2,"path":["core","iter","adapters","map_while","MapWhile"],"kind":"struct"},"2:11970:15642":{"crate_id":2,"path":["core","str","converts","from_utf8"],"kind":"function"},"24:4926:3355":{"crate_id":24,"path":["syn","expr","ExprUnsafe"],"kind":"struct"},"2:1961:4674":{"crate_id":2,"path":["core","ptr","unique","Unique"],"kind":"struct"},"21:2725:1962":{"crate_id":21,"path":["proc_macro","Group"],"kind":"struct"},"2:2905:6348":{"crate_id":2,"path":["core","ops","arith","Rem"],"kind":"trait"},"24:4252:3712":{"crate_id":24,"path":["syn","token","PlusEq"],"kind":"struct"},"5:3220:9559":{"crate_id":5,"path":["alloc","collections","btree","set","Intersection"],"kind":"struct"},"21:433:6127":{"crate_id":21,"path":["proc_macro","bridge","scoped_cell","replace","PutBackOnDrop"],"kind":"struct"},"5:5144:6165":{"crate_id":5,"path":["alloc","rc","Weak"],"kind":"struct"},"24:4421:3724":{"crate_id":24,"path":["syn","token","StarEq"],"kind":"struct"},"1:8815:9249":{"crate_id":1,"path":["std","process","ExitStatus"],"kind":"struct"},"17:13898:7130":{"crate_id":17,"path":["object","pe","ImageRelocation"],"kind":"struct"},"17:14091:7179":{"crate_id":17,"path":["object","pe","ImageResourceDataEntry"],"kind":"struct"},"24:1967:3402":{"crate_id":24,"path":["syn","punctuated","Iter"],"kind":"struct"},"17:14164:7196":{"crate_id":17,"path":["object","pe","ImageEpilogueDynamicRelocationHeader"],"kind":"struct"},"1:11053:6237":{"crate_id":1,"path":["std","sys","unix","process","process_inner","posix_spawn","PosixSpawnattr"],"kind":"struct"},"24:2036:3406":{"crate_id":24,"path":["syn","punctuated","IterMut"],"kind":"struct"},"15:327:10102":{"crate_id":15,"path":["addr2line","RangeAttributes"],"kind":"struct"},"24:4054:3698":{"crate_id":24,"path":["syn","token","LArrow"],"kind":"struct"},"17:11282:6577":{"crate_id":17,"path":["object","read","pe","relocation","RelocationBlockIterator"],"kind":"struct"}},"external_crates":{"23":{"name":"quote","html_root_url":"https://docs.rs/quote/1.0.33/"},"20":{"name":"proc_macro2","html_root_url":"https://docs.rs/proc-macro2/1.0.70/"},"17":{"name":"object","html_root_url":"https://doc.rust-lang.org/nightly/"},"14":{"name":"rustc_demangle","html_root_url":"https://doc.rust-lang.org/nightly/"},"11":{"name":"hashbrown","html_root_url":"https://doc.rust-lang.org/nightly/"},"8":{"name":"cfg_if","html_root_url":"https://docs.rs/cfg-if/"},"5":{"name":"alloc","html_root_url":"https://doc.rust-lang.org/nightly/"},"2":{"name":"core","html_root_url":"https://doc.rust-lang.org/nightly/"},"22":{"name":"unicode_ident","html_root_url":"https://docs.rs/unicode-ident/1.0.12/"},"19":{"name":"panic_unwind","html_root_url":"https://doc.rust-lang.org/nightly/"},"16":{"name":"gimli","html_root_url":"https://doc.rust-lang.org/nightly/"},"13":{"name":"std_detect","html_root_url":"https://doc.rust-lang.org/nightly/"},"10":{"name":"adler","html_root_url":"https://docs.rs/adler/1.0.2/"},"7":{"name":"unwind","html_root_url":"https://doc.rust-lang.org/nightly/"},"4":{"name":"rustc_std_workspace_core","html_root_url":"https://doc.rust-lang.org/nightly/"},"1":{"name":"std","html_root_url":"https://doc.rust-lang.org/nightly/"},"24":{"name":"syn","html_root_url":"https://docs.rs/syn/2.0.39/"},"21":{"name":"proc_macro","html_root_url":"https://doc.rust-lang.org/nightly/"},"18":{"name":"memchr","html_root_url":"https://doc.rust-lang.org/nightly/"},"15":{"name":"addr2line","html_root_url":"https://doc.rust-lang.org/nightly/"},"12":{"name":"rustc_std_workspace_alloc","html_root_url":"https://doc.rust-lang.org/nightly/"},"9":{"name":"miniz_oxide","html_root_url":"https://doc.rust-lang.org/nightly/"},"6":{"name":"libc","html_root_url":"https://doc.rust-lang.org/nightly/"},"3":{"name":"compiler_builtins","html_root_url":"https://doc.rust-lang.org/nightly/"}},"format_version":27}