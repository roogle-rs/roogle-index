{"root":"0:0:1857","crate_version":"1.0.197","includes_private":false,"index":{"2:13079:2084":{"id":"2:13079:2084","crate_id":2,"name":"get","span":null,"visibility":"public","docs":"Returns a subslice of `str`.\n\nThis is the non-panicking alternative to indexing the `str`. Returns\n[`None`] whenever equivalent indexing operation would panic.\n\n# Examples\n\n```\nlet v = String::from(\"üóª‚ààüåè\");\n\nassert_eq!(Some(\"üóª\"), v.get(0..4));\n\n// indices not on UTF-8 sequence boundaries\nassert!(v.get(1..).is_none());\nassert!(v.get(..8).is_none());\n\n// out of bounds\nassert!(v.get(..42).is_none());\n```","links":{"`None`":"2:41482:191"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"resolved_path":{"name":"Option","id":"2:41480:194","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"2:10849:239","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"2:10849:239","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13097:33470":{"id":"2:13097:33470","crate_id":2,"name":"split_whitespace","span":null,"visibility":"public","docs":"Splits a string slice by whitespace.\n\nThe iterator returned will return string slices that are sub-slices of\nthe original string slice, separated by any amount of whitespace.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`. If you only want to split on ASCII whitespace\ninstead, use [`split_ascii_whitespace`].\n\n[`split_ascii_whitespace`]: str::split_ascii_whitespace\n\n# Examples\n\nBasic usage:\n\n```\nlet mut iter = \"A few words\".split_whitespace();\n\nassert_eq!(Some(\"A\"), iter.next());\nassert_eq!(Some(\"few\"), iter.next());\nassert_eq!(Some(\"words\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nAll kinds of whitespace are considered:\n\n```\nlet mut iter = \" Mary   had\\ta\\u{2009}little  \\n\\t lamb\".split_whitespace();\nassert_eq!(Some(\"Mary\"), iter.next());\nassert_eq!(Some(\"had\"), iter.next());\nassert_eq!(Some(\"a\"), iter.next());\nassert_eq!(Some(\"little\"), iter.next());\nassert_eq!(Some(\"lamb\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nIf the string is empty or all whitespace, the iterator yields no string slices:\n```\nassert_eq!(\"\".split_whitespace().next(), None);\nassert_eq!(\"   \".split_whitespace().next(), None);\n```","links":{"str::split_ascii_whitespace":"2:13098:33473"},"attrs":["#[must_use =\n\"this returns the split string as an iterator, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_split_whitespace\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"SplitWhitespace","id":"2:43637:8896","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13197:35767":{"id":"2:13197:35767","crate_id":2,"name":"escape_debug","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_debug`].\n\nNote: only extended grapheme codepoints that begin the string will be\nescaped.\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"‚ù§\\n!\".escape_debug() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"‚ù§\\n!\".escape_debug());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"‚ù§\\\\n!\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"‚ù§\\n!\".escape_debug().to_string(), \"‚ù§\\\\n!\");\n```","links":{"`char::escape_debug`":"2:4855:35767"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EscapeDebug","id":"2:43662:8840","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5596:36461":{"id":"5:5596:36461","crate_id":5,"name":"into_boxed_bytes","span":null,"visibility":"public","docs":"Converts a `Box<str>` into a `Box<[u8]>` without copying or allocating.\n\n# Examples\n\n```\nlet s = \"this is a string\";\nlet boxed_str = s.to_owned().into_boxed_str();\nlet boxed_bytes = boxed_str.into_boxed_bytes();\nassert_eq!(*boxed_bytes, *s.as_bytes());\n```","links":{},"attrs":["#[must_use = \"`self` will be dropped if the result is not used\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"resolved_path":{"name":"Box","id":"5:294:2039","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}]],"output":{"resolved_path":{"name":"Box","id":"5:294:2039","args":{"angle_bracketed":{"args":[{"type":{"slice":{"primitive":"u8"}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13088:35751":{"id":"2:13088:35751","crate_id":2,"name":"slice_mut_unchecked","span":null,"visibility":"public","docs":"Creates a string slice from another string slice, bypassing safety\nchecks.\nThis is generally not recommended, use with caution! For a safe\nalternative see [`str`] and [`IndexMut`].\n\n[`IndexMut`]: crate::ops::IndexMut\n\nThis new slice goes from `begin` to `end`, including `begin` but\nexcluding `end`.\n\nTo get an immutable string slice instead, see the\n[`slice_unchecked`] method.\n\n[`slice_unchecked`]: str::slice_unchecked\n\n# Safety\n\nCallers of this function are responsible that three preconditions are\nsatisfied:\n\n* `begin` must not exceed `end`.\n* `begin` and `end` must be byte positions within the string slice.\n* `begin` and `end` must lie on UTF-8 sequence boundaries.","links":{"`str`":"1:12073:1552","crate::ops::IndexMut":"2:3333:3431","str::slice_unchecked":"2:13087:35750"},"attrs":["#[deprecated(since = \"1.29.0\", note =\n\"use `get_unchecked_mut(begin..end)` instead\")]"],"deprecation":{"since":"1.29.0","note":"use `get_unchecked_mut(begin..end)` instead"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["begin",{"primitive":"usize"}],["end",{"primitive":"usize"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"2:13115:4377":{"id":"2:13115:4377","crate_id":2,"name":"rfind","span":null,"visibility":"public","docs":"Returns the byte index for the first character of the last match of the pattern in\nthis string slice.\n\nReturns [`None`] if the pattern doesn't match.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nlet s = \"L√∂we ËÄÅËôé L√©opard Gepardi\";\n\nassert_eq!(s.rfind('L'), Some(13));\nassert_eq!(s.rfind('√©'), Some(14));\nassert_eq!(s.rfind(\"pard\"), Some(24));\n```\n\nMore complex patterns with closures:\n\n```\nlet s = \"L√∂we ËÄÅËôé L√©opard\";\n\nassert_eq!(s.rfind(char::is_whitespace), Some(12));\nassert_eq!(s.rfind(char::is_lowercase), Some(20));\n```\n\nNot finding the pattern:\n\n```\nlet s = \"L√∂we ËÄÅËôé L√©opard\";\nlet x: &[_] = &['1', '2'];\n\nassert_eq!(s.rfind(x), None);\n```","links":{"`None`":"2:41482:191","prim@char":"1:12067:454","self::pattern":"2:12757:3828"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:41480:194","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12763:15990","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12763:15990","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12778:15991","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:965:1854":{"id":"0:965:1854","crate_id":0,"name":"Deserialize","span":{"filename":"src/lib.rs","begin":[96,0],"end":[101,1]},"visibility":"public","docs":null,"links":{},"attrs":["#[proc_macro_derive(Deserialize, attributes(serde))]"],"deprecation":null,"inner":{"proc_macro":{"kind":"derive","helpers":["serde"]}}},"2:13146:2191":{"id":"2:13146:2191","crate_id":2,"name":"matches","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within the given string\nslice.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rmatches`] method can be used.\n\n[`rmatches`]: str::rmatches\n\n# Examples\n\n```\nlet v: Vec<&str> = \"abcXXXabcYYYabc\".matches(\"abc\").collect();\nassert_eq!(v, [\"abc\", \"abc\", \"abc\"]);\n\nlet v: Vec<&str> = \"1abc2abc3\".matches(char::is_numeric).collect();\nassert_eq!(v, [\"1\", \"2\", \"3\"]);\n```","links":{"self::pattern":"2:12757:3828","`DoubleEndedIterator`":"2:8139:131","prim@char":"1:12067:454","str::rmatches":"2:13149:35755"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Matches","id":"2:43567:8892","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12763:15990","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5611:36464":{"id":"5:5611:36464","crate_id":5,"name":"to_uppercase","span":null,"visibility":"public","docs":"Returns the uppercase equivalent of this string slice, as a new [`String`].\n\n'Uppercase' is defined according to the terms of the Unicode Derived Core Property\n`Uppercase`.\n\nSince some characters can expand into multiple characters when changing\nthe case, this function returns a [`String`] instead of modifying the\nparameter in-place.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"hello\";\n\nassert_eq!(\"HELLO\", s.to_uppercase());\n```\n\nScripts without case are not changed:\n\n```\nlet new_year = \"ÂÜúÂéÜÊñ∞Âπ¥\";\n\nassert_eq!(new_year, new_year.to_uppercase());\n```\n\nOne character can become multiple:\n```\nlet s = \"tsch√º√ü\";\n\nassert_eq!(\"TSCH√úSS\", s.to_uppercase());\n```","links":{"`String`":"5:7633:243"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the uppercase string as a new String, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7633:243","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13160:35759":{"id":"2:13160:35759","crate_id":2,"name":"trim_start","span":null,"visibility":"public","docs":"Returns a string slice with leading whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Text directionality\n\nA string is a sequence of bytes. `start` in this context means the first\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be left side, and for right-to-left languages like\nArabic or Hebrew, this will be the right side.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\nassert_eq!(\"Hello\\tworld\\t\\n\", s.trim_start());\n```\n\nDirectionality:\n\n```\nlet s = \"  English  \";\nassert!(Some('E') == s.trim_start().chars().next());\n\nlet s = \"  ◊¢◊ë◊®◊ô◊™  \";\nassert!(Some('◊¢') == s.trim_start().chars().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_trim_start\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13164:35761":{"id":"2:13164:35761","crate_id":2,"name":"trim_left","span":null,"visibility":"public","docs":"Returns a string slice with leading whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`.\n\n# Text directionality\n\nA string is a sequence of bytes. 'Left' in this context means the first\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _right_ side, not the left.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \" Hello\\tworld\\t\";\n\nassert_eq!(\"Hello\\tworld\\t\", s.trim_left());\n```\n\nDirectionality:\n\n```\nlet s = \"  English\";\nassert!(Some('E') == s.trim_left().chars().next());\n\nlet s = \"  ◊¢◊ë◊®◊ô◊™\";\nassert!(Some('◊¢') == s.trim_left().chars().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_start`\", suggestion\n= \"trim_start\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_start`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5597:2225":{"id":"5:5597:2225","crate_id":5,"name":"replace","span":null,"visibility":"public","docs":"Replaces all matches of a pattern with another string.\n\n`replace` creates a new [`String`], and copies the data from this string slice into it.\nWhile doing so, it attempts to find matches of a pattern. If it finds any, it\nreplaces them with the replacement string slice.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"this is old\";\n\nassert_eq!(\"this is new\", s.replace(\"old\", \"new\"));\nassert_eq!(\"than an old\", s.replace(\"is\", \"an\"));\n```\n\nWhen the pattern doesn't match, it returns this string slice as [`String`]:\n\n```\nlet s = \"this is old\";\nassert_eq!(s, s.replace(\"cookie monster\", \"little lamb\"));\n```","links":{"`String`":"5:7633:243"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the replaced string as a new allocation, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["from",{"generic":"P"}],["to",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7633:243","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12763:15990","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13100:35752":{"id":"2:13100:35752","crate_id":2,"name":"lines_any","span":null,"visibility":"public","docs":"An iterator over the lines of a string.","links":{},"attrs":["#[deprecated(since = \"1.4.0\", note = \"use lines() instead now\", suggestion =\n\"lines\")]"],"deprecation":{"since":"1.4.0","note":"use lines() instead now"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"LinesAny","id":"2:43627:8895","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:492-0:1019:1975":{"id":"0:492-0:1019:1975","crate_id":0,"name":null,"span":{"filename":"src/internals/mod.rs","begin":[13,0],"end":[13,25]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"import":{"source":"self::ctxt::Ctxt","name":"Ctxt","id":"0:1019:1975","glob":false}}},"2:13090:29804":{"id":"2:13090:29804","crate_id":2,"name":"split_at_mut","span":null,"visibility":"public","docs":"Divide one mutable string slice into two at an index.\n\nThe argument, `mid`, should be a byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get immutable string slices instead, see the [`split_at`] method.\n\n[`split_at`]: str::split_at\n\n# Panics\n\nPanics if `mid` is not on a UTF-8 code point boundary, or if it is past\nthe end of the last code point of the string slice.  For a non-panicking\nalternative see [`split_at_mut_checked`](str::split_at_mut_checked).\n\n# Examples\n\n```\nlet mut s = \"Per Martin-L√∂f\".to_string();\n{\n    let (first, last) = s.split_at_mut(3);\n    first.make_ascii_uppercase();\n    assert_eq!(\"PER\", first);\n    assert_eq!(\" Martin-L√∂f\", last);\n}\nassert_eq!(\"PER Martin-L√∂f\", s);\n```","links":{"str::split_at":"2:13089:2845","str::split_at_mut_checked":"2:13092:29808"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["mid",{"primitive":"usize"}]],"output":{"tuple":[{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13091:29807":{"id":"2:13091:29807","crate_id":2,"name":"split_at_checked","span":null,"visibility":"public","docs":"Divide one string slice into two at an index.\n\nThe argument, `mid`, should be a valid byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point. The\nmethod returns `None` if that‚Äôs not the case.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get mutable string slices instead, see the [`split_at_mut_checked`]\nmethod.\n\n[`split_at_mut_checked`]: str::split_at_mut_checked\n\n# Examples\n\n```\n#![feature(split_at_checked)]\n\nlet s = \"Per Martin-L√∂f\";\n\nlet (first, last) = s.split_at_checked(3).unwrap();\nassert_eq!(\"Per\", first);\nassert_eq!(\" Martin-L√∂f\", last);\n\nassert_eq!(None, s.split_at_checked(13));  // Inside ‚Äú√∂‚Äù\nassert_eq!(None, s.split_at_checked(16));  // Beyond the string length\n```","links":{"str::split_at_mut_checked":"2:13092:29808"},"attrs":["#[must_use]","#[unstable(feature = \"split_at_checked\", reason = \"new API\", issue =\n\"119128\")]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["mid",{"primitive":"usize"}]],"output":{"resolved_path":{"name":"Option","id":"2:41480:194","args":{"angle_bracketed":{"args":[{"type":{"tuple":[{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13070:35747":{"id":"2:13070:35747","crate_id":2,"name":"floor_char_boundary","span":null,"visibility":"public","docs":"Finds the closest `x` not exceeding `index` where `is_char_boundary(x)` is `true`.\n\nThis method can help you truncate a string so that it's still valid UTF-8, but doesn't\nexceed a given number of bytes. Note that this is done purely at the character level\nand can still visually split graphemes, even though the underlying characters aren't\nsplit. For example, the emoji üßë‚Äçüî¨ (scientist) could be split so that the string only\nincludes üßë (person) instead.\n\n# Examples\n\n```\n#![feature(round_char_boundary)]\nlet s = \"‚ù§Ô∏èüß°üíõüíöüíôüíú\";\nassert_eq!(s.len(), 26);\nassert!(!s.is_char_boundary(13));\n\nlet closest = s.floor_char_boundary(13);\nassert_eq!(closest, 10);\nassert_eq!(&s[..closest], \"‚ù§Ô∏èüß°\");\n```","links":{},"attrs":["#[unstable(feature = \"round_char_boundary\", issue = \"93743\")]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["index",{"primitive":"usize"}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13081:29778":{"id":"2:13081:29778","crate_id":2,"name":"get_mut","span":null,"visibility":"public","docs":"Returns a mutable subslice of `str`.\n\nThis is the non-panicking alternative to indexing the `str`. Returns\n[`None`] whenever equivalent indexing operation would panic.\n\n# Examples\n\n```\nlet mut v = String::from(\"hello\");\n// correct length\nassert!(v.get_mut(0..5).is_some());\n// out of bounds\nassert!(v.get_mut(..42).is_none());\nassert_eq!(Some(\"he\"), v.get_mut(0..2).map(|v| &*v));\n\nassert_eq!(\"hello\", v);\n{\n    let s = v.get_mut(0..2);\n    let s = s.map(|s| {\n        s.make_ascii_uppercase();\n        &*s\n    });\n    assert_eq!(Some(\"HE\"), s);\n}\nassert_eq!(\"HEllo\", v);\n```","links":{"`None`":"2:41482:191"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"resolved_path":{"name":"Option","id":"2:41480:194","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"2:10849:239","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"2:10849:239","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13101:33826":{"id":"2:13101:33826","crate_id":2,"name":"encode_utf16","span":null,"visibility":"public","docs":"Returns an iterator of `u16` over the string encoded as UTF-16.\n\n# Examples\n\n```\nlet text = \"Za≈º√≥≈Çƒá gƒô≈õlƒÖ ja≈∫≈Ñ\";\n\nlet utf8_len = text.len();\nlet utf16_len = text.encode_utf16().count();\n\nassert!(utf16_len <= utf8_len);\n```","links":{},"attrs":["#[must_use =\n\"this returns the encoded string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EncodeUtf16","id":"2:43655:8898","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13102:2297":{"id":"2:13102:2297","crate_id":2,"name":"contains","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a sub-slice of\nthis string slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.contains(\"nana\"));\nassert!(!bananas.contains(\"apples\"));\n```","links":{"prim@char":"1:12067:454","self::pattern":"2:12757:3828"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12763:15990","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:0:1857":{"id":"0:0:1857","crate_id":0,"name":"serde_derive","span":{"filename":"src/lib.rs","begin":[1,0],"end":[101,1]},"visibility":"public","docs":"This crate provides Serde's two derive macros.\n\n```edition2021\n# use serde_derive::{Deserialize, Serialize};\n#\n#[derive(Serialize, Deserialize)]\n# struct S;\n#\n# fn main() {}\n```\n\nPlease refer to [https://serde.rs/derive.html] for how to set this up.\n\n[https://serde.rs/derive.html]: https://serde.rs/derive.html","links":{},"attrs":["#![doc(html_root_url = \"https://docs.rs/serde_derive/1.0.197\")]","#![allow(clippy::branches_sharing_code, clippy::cognitive_complexity,\nclippy::collapsible_match, clippy::derive_partial_eq_without_eq,\nclippy::enum_variant_names, clippy::manual_map,\nclippy::match_like_matches_macro, clippy::needless_pass_by_value,\nclippy::too_many_arguments, clippy::trivially_copy_pass_by_ref,\nclippy::used_underscore_binding, clippy::wildcard_in_or_patterns,\nclippy::unnested_or_patterns,)]","#![allow(clippy::cast_possible_truncation, clippy::checked_conversions,\nclippy::doc_markdown, clippy::enum_glob_use, clippy::indexing_slicing,\nclippy::items_after_statements, clippy::let_underscore_untyped,\nclippy::manual_assert, clippy::map_err_ignore, clippy::match_same_arms,\nclippy::match_wildcard_for_single_variants, clippy::module_name_repetitions,\nclippy::must_use_candidate, clippy::similar_names, clippy::single_match_else,\nclippy::struct_excessive_bools, clippy::too_many_lines,\nclippy::unseparated_literal_suffix, clippy::unused_self, clippy::use_self,\nclippy::wildcard_imports)]"],"deprecation":null,"inner":{"module":{"is_crate":true,"items":["0:964:1846","0:965:1854"],"is_stripped":false}}},"2:13178:35764":{"id":"2:13178:35764","crate_id":2,"name":"trim_end_matches","span":null,"visibility":"public","docs":"Returns a string slice with all suffixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. `end` in this context means the last\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be right side, and for right-to-left languages like\nArabic or Hebrew, this will be the left side.\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_end_matches('1'), \"11foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_end_matches(char::is_numeric), \"123foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_end_matches(x), \"12foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1fooX\".trim_end_matches(|c| c == '1' || c == 'X'), \"1foo\");\n```","links":{"prim@char":"1:12067:454","self::pattern":"2:12757:3828"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12763:15990","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12763:15990","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12778:15991","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13184:35766":{"id":"2:13184:35766","crate_id":2,"name":"trim_right_matches","span":null,"visibility":"public","docs":"Returns a string slice with all suffixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. 'Right' in this context means the last\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _left_ side, not the right.\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_right_matches('1'), \"11foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_right_matches(char::is_numeric), \"123foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_right_matches(x), \"12foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1fooX\".trim_right_matches(|c| c == '1' || c == 'X'), \"1foo\");\n```","links":{"prim@char":"1:12067:454","self::pattern":"2:12757:3828"},"attrs":["#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_end_matches`\",\nsuggestion = \"trim_end_matches\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_end_matches`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12763:15990","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12763:15990","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12778:15991","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13191:29055":{"id":"2:13191:29055","crate_id":2,"name":"eq_ignore_ascii_case","span":null,"visibility":"public","docs":"Checks that two strings are an ASCII case-insensitive match.\n\nSame as `to_ascii_lowercase(a) == to_ascii_lowercase(b)`,\nbut without allocating and copying temporaries.\n\n# Examples\n\n```\nassert!(\"Ferris\".eq_ignore_ascii_case(\"FERRIS\"));\nassert!(\"Ferr√∂s\".eq_ignore_ascii_case(\"FERR√∂S\"));\nassert!(!\"Ferr√∂s\".eq_ignore_ascii_case(\"FERR√ñS\"));\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["other",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13119:28340":{"id":"2:13119:28340","crate_id":2,"name":"split","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by\ncharacters matched by a pattern.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rsplit`] method can be used.\n\n[`rsplit`]: str::rsplit\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".split(' ').collect();\nassert_eq!(v, [\"Mary\", \"had\", \"a\", \"little\", \"lamb\"]);\n\nlet v: Vec<&str> = \"\".split('X').collect();\nassert_eq!(v, [\"\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".split('X').collect();\nassert_eq!(v, [\"lion\", \"\", \"tiger\", \"leopard\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".split(\"::\").collect();\nassert_eq!(v, [\"lion\", \"tiger\", \"leopard\"]);\n\nlet v: Vec<&str> = \"abc1def2ghi\".split(char::is_numeric).collect();\nassert_eq!(v, [\"abc\", \"def\", \"ghi\"]);\n\nlet v: Vec<&str> = \"lionXtigerXleopard\".split(char::is_uppercase).collect();\nassert_eq!(v, [\"lion\", \"tiger\", \"leopard\"]);\n```\n\nIf the pattern is a slice of chars, split on each occurrence of any of the characters:\n\n```\nlet v: Vec<&str> = \"2020-11-03 23:59\".split(&['-', ' ', ':', '@'][..]).collect();\nassert_eq!(v, [\"2020\", \"11\", \"03\", \"23\", \"59\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".split(|c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"abc\", \"def\", \"ghi\"]);\n```\n\nIf a string contains multiple contiguous separators, you will end up\nwith empty strings in the output:\n\n```\nlet x = \"||||a||b|c\".to_string();\nlet d: Vec<_> = x.split('|').collect();\n\nassert_eq!(d, &[\"\", \"\", \"\", \"\", \"a\", \"\", \"b\", \"c\"]);\n```\n\nContiguous separators are separated by the empty string.\n\n```\nlet x = \"(///)\".to_string();\nlet d: Vec<_> = x.split('/').collect();\n\nassert_eq!(d, &[\"(\", \"\", \"\", \")\"]);\n```\n\nSeparators at the start or end of a string are neighbored\nby empty strings.\n\n```\nlet d: Vec<_> = \"010\".split(\"0\").collect();\nassert_eq!(d, &[\"\", \"1\", \"\"]);\n```\n\nWhen the empty string is used as a separator, it separates\nevery character in the string, along with the beginning\nand end of the string.\n\n```\nlet f: Vec<_> = \"rust\".split(\"\").collect();\nassert_eq!(f, &[\"\", \"r\", \"u\", \"s\", \"t\", \"\"]);\n```\n\nContiguous separators can lead to possibly surprising behavior\nwhen whitespace is used as the separator. This code is correct:\n\n```\nlet x = \"    a  b c\".to_string();\nlet d: Vec<_> = x.split(' ').collect();\n\nassert_eq!(d, &[\"\", \"\", \"\", \"\", \"a\", \"\", \"b\", \"c\"]);\n```\n\nIt does _not_ give you:\n\n```,ignore\nassert_eq!(d, &[\"a\", \"b\", \"c\"]);\n```\n\nUse [`split_whitespace`] for this behavior.\n\n[`split_whitespace`]: str::split_whitespace","links":{"self::pattern":"2:12757:3828","`DoubleEndedIterator`":"2:8139:131","prim@char":"1:12067:454","str::split_whitespace":"2:13097:33470","str::rsplit":"2:13125:29812"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Split","id":"2:43363:8806","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12763:15990","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13195:30969":{"id":"2:13195:30969","crate_id":2,"name":"trim_ascii_end","span":null,"visibility":"public","docs":"Returns a string slice with trailing ASCII whitespace removed.\n\n'Whitespace' refers to the definition used by\n[`u8::is_ascii_whitespace`].\n\n[`u8::is_ascii_whitespace`]: u8::is_ascii_whitespace\n\n# Examples\n\n```\n#![feature(byte_slice_trim_ascii)]\n\nassert_eq!(\"\\r hello world\\u{3000}\\n \".trim_ascii_end(), \"\\r hello world\\u{3000}\");\nassert_eq!(\"  \".trim_ascii_end(), \"\");\nassert_eq!(\"\".trim_ascii_end(), \"\");\n```","links":{"u8::is_ascii_whitespace":"2:970:38062"},"attrs":["#[unstable(feature = \"byte_slice_trim_ascii\", issue = \"94035\")]","#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13193:29057":{"id":"2:13193:29057","crate_id":2,"name":"make_ascii_lowercase","span":null,"visibility":"public","docs":"Converts this string to its ASCII lower case equivalent in-place.\n\nASCII letters 'A' to 'Z' are mapped to 'a' to 'z',\nbut non-ASCII letters are unchanged.\n\nTo return a new lowercased value without modifying the existing one, use\n[`to_ascii_lowercase()`].\n\n[`to_ascii_lowercase()`]: #method.to_ascii_lowercase\n\n# Examples\n\n```\nlet mut s = String::from(\"GR√ú√üE, J√úRGEN ‚ù§\");\n\ns.make_ascii_lowercase();\n\nassert_eq!(\"gr√ú√üe, j√úrgen ‚ù§\", s);\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5613:3488":{"id":"5:5613:3488","crate_id":5,"name":"repeat","span":null,"visibility":"public","docs":"Creates a new [`String`] by repeating a string `n` times.\n\n# Panics\n\nThis function will panic if the capacity would overflow.\n\n# Examples\n\nBasic usage:\n\n```\nassert_eq!(\"abc\".repeat(4), String::from(\"abcabcabcabc\"));\n```\n\nA panic upon overflow:\n\n```should_panic\n// this will panic at runtime\nlet huge = \"0123456789abcdef\".repeat(usize::MAX);\n```","links":{"`String`":"5:7633:243"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["n",{"primitive":"usize"}]],"output":{"resolved_path":{"name":"String","id":"5:7633:243","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13137:29816":{"id":"2:13137:29816","crate_id":2,"name":"rsplitn","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by a\npattern, starting from the end of the string, restricted to returning\nat most `n` items.\n\nIf `n` substrings are returned, the last substring (the `n`th substring)\nwill contain the remainder of the string.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will not be double ended, because it is not\nefficient to support.\n\nFor splitting from the front, the [`splitn`] method can be used.\n\n[`splitn`]: str::splitn\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".rsplitn(3, ' ').collect();\nassert_eq!(v, [\"lamb\", \"little\", \"Mary had a\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".rsplitn(3, 'X').collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"lionX\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".rsplitn(2, \"::\").collect();\nassert_eq!(v, [\"leopard\", \"lion::tiger\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".rsplitn(2, |c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"ghi\", \"abc1def\"]);\n```","links":{"prim@char":"1:12067:454","str::splitn":"2:13134:29814","self::pattern":"2:12757:3828"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["n",{"primitive":"usize"}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RSplitN","id":"2:43485:8887","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12763:15990","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12763:15990","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12778:15991","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13105:29408":{"id":"2:13105:29408","crate_id":2,"name":"starts_with","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a prefix of this\nstring slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, in which case this function will return true if\nthe `&str` is a prefix of this string slice.\n\nThe [pattern] can also be a [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\nThese will only be checked against the first character of this string slice.\nLook at the second example below regarding behavior for slices of [`char`]s.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.starts_with(\"bana\"));\nassert!(!bananas.starts_with(\"nana\"));\n```\n\n```\nlet bananas = \"bananas\";\n\n// Note that both of these assert successfully.\nassert!(bananas.starts_with(&['b', 'a', 'n', 'a']));\nassert!(bananas.starts_with(&['a', 'b', 'c', 'd']));\n```","links":{"prim@char":"1:12067:454","self::pattern":"2:12757:3828"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12763:15990","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5612:36465":{"id":"5:5612:36465","crate_id":5,"name":"into_string","span":null,"visibility":"public","docs":"Converts a [`Box<str>`] into a [`String`] without copying or allocating.\n\n# Examples\n\n```\nlet string = String::from(\"birthday gift\");\nlet boxed_str = string.clone().into_boxed_str();\n\nassert_eq!(boxed_str.into_string(), string);\n```","links":{"`Box<str>`":"5:294:2039","`String`":"5:7633:243"},"attrs":["#[must_use = \"`self` will be dropped if the result is not used\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"resolved_path":{"name":"Box","id":"5:294:2039","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}]],"output":{"resolved_path":{"name":"String","id":"5:7633:243","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13072:35748":{"id":"2:13072:35748","crate_id":2,"name":"ceil_char_boundary","span":null,"visibility":"public","docs":"Finds the closest `x` not below `index` where `is_char_boundary(x)` is `true`.\n\nIf `index` is greater than the length of the string, this returns the length of the string.\n\nThis method is the natural complement to [`floor_char_boundary`]. See that method\nfor more details.\n\n[`floor_char_boundary`]: str::floor_char_boundary\n\n\n# Examples\n\n```\n#![feature(round_char_boundary)]\nlet s = \"‚ù§Ô∏èüß°üíõüíöüíôüíú\";\nassert_eq!(s.len(), 26);\nassert!(!s.is_char_boundary(13));\n\nlet closest = s.ceil_char_boundary(13);\nassert_eq!(closest, 14);\nassert_eq!(&s[..closest], \"‚ù§Ô∏èüß°üíõ\");\n```","links":{"str::floor_char_boundary":"2:13070:35747"},"attrs":["#[unstable(feature = \"round_char_boundary\", issue = \"93743\")]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["index",{"primitive":"usize"}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13162:35760":{"id":"2:13162:35760","crate_id":2,"name":"trim_end","span":null,"visibility":"public","docs":"Returns a string slice with trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Text directionality\n\nA string is a sequence of bytes. `end` in this context means the last\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be right side, and for right-to-left languages like\nArabic or Hebrew, this will be the left side.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\nassert_eq!(\"\\n Hello\\tworld\", s.trim_end());\n```\n\nDirectionality:\n\n```\nlet s = \"  English  \";\nassert!(Some('h') == s.trim_end().chars().rev().next());\n\nlet s = \"  ◊¢◊ë◊®◊ô◊™  \";\nassert!(Some('◊™') == s.trim_end().chars().rev().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_trim_end\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5595":{"id":"5:5595","crate_id":5,"name":null,"span":null,"visibility":"default","docs":"Methods for string slices.","links":{},"attrs":["#[cfg(not(test))]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"primitive":"str"},"items":["5:5596:36461","5:5597:2225","5:5600:36462","5:5603:36463","5:5611:36464","5:5612:36465","5:5613:3488","5:5614:2429","5:5615:2428"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:1023:2072":{"id":"0:1023:2072","crate_id":0,"name":"Symbol","span":{"filename":"src/internals/symbol.rs","begin":[5,0],"end":[5,32]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"struct":{"kind":{"tuple":[null]},"generics":{"params":[],"where_predicates":[]},"impls":[]}}},"2:13140:29818":{"id":"2:13140:29818","crate_id":2,"name":"split_once","span":null,"visibility":"public","docs":"Splits the string on the first occurrence of the specified delimiter and\nreturns prefix before delimiter and suffix after delimiter.\n\n# Examples\n\n```\nassert_eq!(\"cfg\".split_once('='), None);\nassert_eq!(\"cfg=\".split_once('='), Some((\"cfg\", \"\")));\nassert_eq!(\"cfg=foo\".split_once('='), Some((\"cfg\", \"foo\")));\nassert_eq!(\"cfg=foo=bar\".split_once('='), Some((\"cfg\", \"foo=bar\")));\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["delimiter",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:41480:194","args":{"angle_bracketed":{"args":[{"type":{"tuple":[{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12763:15990","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:8:1968":{"id":"0:8:1968","crate_id":0,"name":"ast","span":{"filename":"src/internals/ast.rs","begin":[1,0],"end":[216,1]},"visibility":"public","docs":"A Serde ast, parsed from the Syn ast and ready to generate Rust code.","links":{},"attrs":[],"deprecation":null,"inner":{"module":{"is_crate":false,"items":[],"is_stripped":false}}},"2:13175:29820":{"id":"2:13175:29820","crate_id":2,"name":"strip_suffix","span":null,"visibility":"public","docs":"Returns a string slice with the suffix removed.\n\nIf the string ends with the pattern `suffix`, returns the substring before the suffix,\nwrapped in `Some`.  Unlike `trim_end_matches`, this method removes the suffix exactly once.\n\nIf the string does not end with `suffix`, returns `None`.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nassert_eq!(\"bar:foo\".strip_suffix(\":foo\"), Some(\"bar\"));\nassert_eq!(\"bar:foo\".strip_suffix(\"bar\"), None);\nassert_eq!(\"foofoo\".strip_suffix(\"foo\"), Some(\"foo\"));\n```","links":{"prim@char":"1:12067:454","self::pattern":"2:12757:3828"},"attrs":["#[must_use =\n\"this returns the remaining substring as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["suffix",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:41480:194","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12763:15990","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12763:15990","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12778:15991","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13087:35750":{"id":"2:13087:35750","crate_id":2,"name":"slice_unchecked","span":null,"visibility":"public","docs":"Creates a string slice from another string slice, bypassing safety\nchecks.\n\nThis is generally not recommended, use with caution! For a safe\nalternative see [`str`] and [`Index`].\n\n[`Index`]: crate::ops::Index\n\nThis new slice goes from `begin` to `end`, including `begin` but\nexcluding `end`.\n\nTo get a mutable string slice instead, see the\n[`slice_mut_unchecked`] method.\n\n[`slice_mut_unchecked`]: str::slice_mut_unchecked\n\n# Safety\n\nCallers of this function are responsible that three preconditions are\nsatisfied:\n\n* `begin` must not exceed `end`.\n* `begin` and `end` must be byte positions within the string slice.\n* `begin` and `end` must lie on UTF-8 sequence boundaries.\n\n# Examples\n\n```\nlet s = \"L√∂we ËÄÅËôé L√©opard\";\n\nunsafe {\n    assert_eq!(\"L√∂we ËÄÅËôé L√©opard\", s.slice_unchecked(0, 21));\n}\n\nlet s = \"Hello, world!\";\n\nunsafe {\n    assert_eq!(\"world\", s.slice_unchecked(7, 12));\n}\n```","links":{"`str`":"1:12073:1552","str::slice_mut_unchecked":"2:13088:35751","crate::ops::Index":"2:39099:2602"},"attrs":["#[deprecated(since = \"1.29.0\", note =\n\"use `get_unchecked(begin..end)` instead\")]","#[must_use]"],"deprecation":{"since":"1.29.0","note":"use `get_unchecked(begin..end)` instead"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["begin",{"primitive":"usize"}],["end",{"primitive":"usize"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"2:13094:2438":{"id":"2:13094:2438","crate_id":2,"name":"chars","span":null,"visibility":"public","docs":"Returns an iterator over the [`char`]s of a string slice.\n\nAs a string slice consists of valid UTF-8, we can iterate through a\nstring slice by [`char`]. This method returns such an iterator.\n\nIt's important to remember that [`char`] represents a Unicode Scalar\nValue, and might not match your idea of what a 'character' is. Iteration\nover grapheme clusters may be what you actually want. This functionality\nis not provided by Rust's standard library, check crates.io instead.\n\n# Examples\n\nBasic usage:\n\n```\nlet word = \"goodbye\";\n\nlet count = word.chars().count();\nassert_eq!(7, count);\n\nlet mut chars = word.chars();\n\nassert_eq!(Some('g'), chars.next());\nassert_eq!(Some('o'), chars.next());\nassert_eq!(Some('o'), chars.next());\nassert_eq!(Some('d'), chars.next());\nassert_eq!(Some('b'), chars.next());\nassert_eq!(Some('y'), chars.next());\nassert_eq!(Some('e'), chars.next());\n\nassert_eq!(None, chars.next());\n```\n\nRemember, [`char`]s might not match your intuition about characters:\n\n[`char`]: prim@char\n\n```\nlet y = \"yÃÜ\";\n\nlet mut chars = y.chars();\n\nassert_eq!(Some('y'), chars.next()); // not 'yÃÜ'\nassert_eq!(Some('\\u{0306}'), chars.next());\n\nassert_eq!(None, chars.next());\n```","links":{"prim@char":"1:12067:454"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Chars","id":"2:43333:8877","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13166:35763":{"id":"2:13166:35763","crate_id":2,"name":"trim_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes and suffixes that match a\npattern repeatedly removed.\n\nThe [pattern] can be a [`char`], a slice of [`char`]s, or a function\nor closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_matches('1'), \"foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_matches(char::is_numeric), \"foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_matches(x), \"foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1foo1barXX\".trim_matches(|c| c == '1' || c == 'X'), \"foo1bar\");\n```","links":{"prim@char":"1:12067:454","self::pattern":"2:12757:3828"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12763:15990","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12763:15990","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"DoubleEndedSearcher","id":"2:12783:15989","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13187:2064":{"id":"2:13187:2064","crate_id":2,"name":"parse","span":null,"visibility":"public","docs":"Parses this string slice into another type.\n\nBecause `parse` is so general, it can cause problems with type\ninference. As such, `parse` is one of the few times you'll see\nthe syntax affectionately known as the 'turbofish': `::<>`. This\nhelps the inference algorithm understand specifically which type\nyou're trying to parse into.\n\n`parse` can parse into any type that implements the [`FromStr`] trait.\n\n# Errors\n\nWill return [`Err`] if it's not possible to parse this string slice into\nthe desired type.\n\n[`Err`]: FromStr::Err\n\n# Examples\n\nBasic usage\n\n```\nlet four: u32 = \"4\".parse().unwrap();\n\nassert_eq!(4, four);\n```\n\nUsing the 'turbofish' instead of annotating `four`:\n\n```\nlet four = \"4\".parse::<u32>();\n\nassert_eq!(Ok(4), four);\n```\n\nFailing to parse:\n\n```\nlet nope = \"j\".parse::<u32>();\n\nassert!(nope.is_err());\n```","links":{"FromStr::Err":"2:12718:137","`FromStr`":"2:12717:3444"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Result","id":"2:41623:226","args":{"angle_bracketed":{"args":[{"type":{"generic":"F"}},{"type":{"qualified_path":{"name":"Err","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"F"},"trait":{"name":"FromStr","id":"2:12717:3444","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"F"},"bounds":[{"trait_bound":{"trait":{"name":"FromStr","id":"2:12717:3444","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13199:10524":{"id":"2:13199:10524","crate_id":2,"name":"escape_default","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_default`].\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"‚ù§\\n!\".escape_default() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"‚ù§\\n!\".escape_default());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"\\\\u{{2764}}\\\\n!\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"‚ù§\\n!\".escape_default().to_string(), \"\\\\u{2764}\\\\n!\");\n```","links":{"`char::escape_default`":"2:4856:10524"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EscapeDefault","id":"2:43671:8834","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5614:2429":{"id":"5:5614:2429","crate_id":5,"name":"to_ascii_uppercase","span":null,"visibility":"public","docs":"Returns a copy of this string where each character is mapped to its\nASCII upper case equivalent.\n\nASCII letters 'a' to 'z' are mapped to 'A' to 'Z',\nbut non-ASCII letters are unchanged.\n\nTo uppercase the value in-place, use [`make_ascii_uppercase`].\n\nTo uppercase ASCII characters in addition to non-ASCII characters, use\n[`to_uppercase`].\n\n# Examples\n\n```\nlet s = \"Gr√º√üe, J√ºrgen ‚ù§\";\n\nassert_eq!(\"GR√º√üE, J√ºRGEN ‚ù§\", s.to_ascii_uppercase());\n```\n\n[`make_ascii_uppercase`]: str::make_ascii_uppercase\n[`to_uppercase`]: #method.to_uppercase","links":{"str::make_ascii_uppercase":"2:13192:29056"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use = \"to uppercase the value in-place, use `make_ascii_uppercase()`\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7633:243","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13194:30968":{"id":"2:13194:30968","crate_id":2,"name":"trim_ascii_start","span":null,"visibility":"public","docs":"Returns a string slice with leading ASCII whitespace removed.\n\n'Whitespace' refers to the definition used by\n[`u8::is_ascii_whitespace`].\n\n[`u8::is_ascii_whitespace`]: u8::is_ascii_whitespace\n\n# Examples\n\n```\n#![feature(byte_slice_trim_ascii)]\n\nassert_eq!(\" \\t \\u{3000}hello world\\n\".trim_ascii_start(), \"\\u{3000}hello world\\n\");\nassert_eq!(\"  \".trim_ascii_start(), \"\");\nassert_eq!(\"\".trim_ascii_start(), \"\");\n```","links":{"u8::is_ascii_whitespace":"2:970:38062"},"attrs":["#[unstable(feature = \"byte_slice_trim_ascii\", issue = \"94035\")]","#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13172:28146":{"id":"2:13172:28146","crate_id":2,"name":"strip_prefix","span":null,"visibility":"public","docs":"Returns a string slice with the prefix removed.\n\nIf the string starts with the pattern `prefix`, returns the substring after the prefix,\nwrapped in `Some`. Unlike `trim_start_matches`, this method removes the prefix exactly once.\n\nIf the string does not start with `prefix`, returns `None`.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nassert_eq!(\"foo:bar\".strip_prefix(\"foo:\"), Some(\"bar\"));\nassert_eq!(\"foo:bar\".strip_prefix(\"bar\"), None);\nassert_eq!(\"foofoo\".strip_prefix(\"foo\"), Some(\"foo\"));\n```","links":{"prim@char":"1:12067:454","self::pattern":"2:12757:3828"},"attrs":["#[must_use =\n\"this returns the remaining substring as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["prefix",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:41480:194","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12763:15990","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13128:35753":{"id":"2:13128:35753","crate_id":2,"name":"split_terminator","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by\ncharacters matched by a pattern.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\nEquivalent to [`split`], except that the trailing substring\nis skipped if empty.\n\n[`split`]: str::split\n\nThis method can be used for string data that is _terminated_,\nrather than _separated_ by a pattern.\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rsplit_terminator`] method can be used.\n\n[`rsplit_terminator`]: str::rsplit_terminator\n\n# Examples\n\n```\nlet v: Vec<&str> = \"A.B.\".split_terminator('.').collect();\nassert_eq!(v, [\"A\", \"B\"]);\n\nlet v: Vec<&str> = \"A..B..\".split_terminator(\".\").collect();\nassert_eq!(v, [\"A\", \"\", \"B\", \"\"]);\n\nlet v: Vec<&str> = \"A.B:C.D\".split_terminator(&['.', ':'][..]).collect();\nassert_eq!(v, [\"A\", \"B\", \"C\", \"D\"]);\n```","links":{"self::pattern":"2:12757:3828","str::split":"2:13119:28340","prim@char":"1:12067:454","`DoubleEndedIterator`":"2:8139:131","str::rsplit_terminator":"2:13131:35754"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"SplitTerminator","id":"2:43413:8883","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12763:15990","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13098:33473":{"id":"2:13098:33473","crate_id":2,"name":"split_ascii_whitespace","span":null,"visibility":"public","docs":"Splits a string slice by ASCII whitespace.\n\nThe iterator returned will return string slices that are sub-slices of\nthe original string slice, separated by any amount of ASCII whitespace.\n\nTo split by Unicode `Whitespace` instead, use [`split_whitespace`].\n\n[`split_whitespace`]: str::split_whitespace\n\n# Examples\n\nBasic usage:\n\n```\nlet mut iter = \"A few words\".split_ascii_whitespace();\n\nassert_eq!(Some(\"A\"), iter.next());\nassert_eq!(Some(\"few\"), iter.next());\nassert_eq!(Some(\"words\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nAll kinds of ASCII whitespace are considered:\n\n```\nlet mut iter = \" Mary   had\\ta little  \\n\\t lamb\".split_ascii_whitespace();\nassert_eq!(Some(\"Mary\"), iter.next());\nassert_eq!(Some(\"had\"), iter.next());\nassert_eq!(Some(\"a\"), iter.next());\nassert_eq!(Some(\"little\"), iter.next());\nassert_eq!(Some(\"lamb\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nIf the string is empty or all ASCII whitespace, the iterator yields no string slices:\n```\nassert_eq!(\"\".split_ascii_whitespace().next(), None);\nassert_eq!(\"   \".split_ascii_whitespace().next(), None);\n```","links":{"str::split_whitespace":"2:13097:33470"},"attrs":["#[must_use =\n\"this returns the split string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"SplitAsciiWhitespace","id":"2:43646:8897","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13143:29819":{"id":"2:13143:29819","crate_id":2,"name":"rsplit_once","span":null,"visibility":"public","docs":"Splits the string on the last occurrence of the specified delimiter and\nreturns prefix before delimiter and suffix after delimiter.\n\n# Examples\n\n```\nassert_eq!(\"cfg\".rsplit_once('='), None);\nassert_eq!(\"cfg=foo\".rsplit_once('='), Some((\"cfg\", \"foo\")));\nassert_eq!(\"cfg=foo=bar\".rsplit_once('='), Some((\"cfg=foo\", \"bar\")));\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["delimiter",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:41480:194","args":{"angle_bracketed":{"args":[{"type":{"tuple":[{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12763:15990","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12763:15990","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12778:15991","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:964:1846":{"id":"0:964:1846","crate_id":0,"name":"Serialize","span":{"filename":"src/lib.rs","begin":[88,0],"end":[93,1]},"visibility":"public","docs":null,"links":{},"attrs":["#[proc_macro_derive(Serialize, attributes(serde))]"],"deprecation":null,"inner":{"proc_macro":{"kind":"derive","helpers":["serde"]}}},"2:13158:35758":{"id":"2:13158:35758","crate_id":2,"name":"trim","span":null,"visibility":"public","docs":"Returns a string slice with leading and trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Examples\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\n\nassert_eq!(\"Hello\\tworld\", s.trim());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a slice, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_trim\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13089:2845":{"id":"2:13089:2845","crate_id":2,"name":"split_at","span":null,"visibility":"public","docs":"Divide one string slice into two at an index.\n\nThe argument, `mid`, should be a byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get mutable string slices instead, see the [`split_at_mut`]\nmethod.\n\n[`split_at_mut`]: str::split_at_mut\n\n# Panics\n\nPanics if `mid` is not on a UTF-8 code point boundary, or if it is past\nthe end of the last code point of the string slice.  For a non-panicking\nalternative see [`split_at_checked`](str::split_at_checked).\n\n# Examples\n\n```\nlet s = \"Per Martin-L√∂f\";\n\nlet (first, last) = s.split_at(3);\n\nassert_eq!(\"Per\", first);\nassert_eq!(\" Martin-L√∂f\", last);\n```","links":{"str::split_at_checked":"2:13091:29807","str::split_at_mut":"2:13090:29804"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["mid",{"primitive":"usize"}]],"output":{"tuple":[{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13165:35762":{"id":"2:13165:35762","crate_id":2,"name":"trim_right","span":null,"visibility":"public","docs":"Returns a string slice with trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`.\n\n# Text directionality\n\nA string is a sequence of bytes. 'Right' in this context means the last\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _left_ side, not the right.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \" Hello\\tworld\\t\";\n\nassert_eq!(\" Hello\\tworld\", s.trim_right());\n```\n\nDirectionality:\n\n```\nlet s = \"English  \";\nassert!(Some('h') == s.trim_right().chars().rev().next());\n\nlet s = \"◊¢◊ë◊®◊ô◊™  \";\nassert!(Some('◊™') == s.trim_right().chars().rev().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_end`\", suggestion =\n\"trim_end\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_end`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:493-0:404:1976":{"id":"0:493-0:404:1976","crate_id":0,"name":null,"span":{"filename":"src/internals/mod.rs","begin":[14,0],"end":[14,41]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"import":{"source":"self::receiver::replace_receiver","name":"replace_receiver","id":"0:404:1976","glob":false}}},"2:13190:30965":{"id":"2:13190:30965","crate_id":2,"name":"as_ascii","span":null,"visibility":"public","docs":"If this string slice [`is_ascii`](Self::is_ascii), returns it as a slice\nof [ASCII characters](`ascii::Char`), otherwise returns `None`.","links":{"`ascii::Char`":"2:39453:4368","Self::is_ascii":"2:13189:29053"},"attrs":["#[unstable(feature = \"ascii_char\", issue = \"110998\")]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Option","id":"2:41480:194","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"resolved_path":{"name":"AsciiChar","id":"2:39453:4368","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5603:36463":{"id":"5:5603:36463","crate_id":5,"name":"to_lowercase","span":null,"visibility":"public","docs":"Returns the lowercase equivalent of this string slice, as a new [`String`].\n\n'Lowercase' is defined according to the terms of the Unicode Derived Core Property\n`Lowercase`.\n\nSince some characters can expand into multiple characters when changing\nthe case, this function returns a [`String`] instead of modifying the\nparameter in-place.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"HELLO\";\n\nassert_eq!(\"hello\", s.to_lowercase());\n```\n\nA tricky example, with sigma:\n\n```\nlet sigma = \"Œ£\";\n\nassert_eq!(\"œÉ\", sigma.to_lowercase());\n\n// but at the end of a word, it's œÇ, not œÉ:\nlet odysseus = \"·ΩàŒîŒ•Œ£Œ£ŒïŒéŒ£\";\n\nassert_eq!(\"·ΩÄŒ¥œÖœÉœÉŒµœçœÇ\", odysseus.to_lowercase());\n```\n\nLanguages without case are not changed:\n\n```\nlet new_year = \"ÂÜúÂéÜÊñ∞Âπ¥\";\n\nassert_eq!(new_year, new_year.to_lowercase());\n```","links":{"`String`":"5:7633:243"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the lowercase string as a new String, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7633:243","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13111:2747":{"id":"2:13111:2747","crate_id":2,"name":"find","span":null,"visibility":"public","docs":"Returns the byte index of the first character of this string slice that\nmatches the pattern.\n\nReturns [`None`] if the pattern doesn't match.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nlet s = \"L√∂we ËÄÅËôé L√©opard Gepardi\";\n\nassert_eq!(s.find('L'), Some(0));\nassert_eq!(s.find('√©'), Some(14));\nassert_eq!(s.find(\"pard\"), Some(17));\n```\n\nMore complex patterns using point-free style and closures:\n\n```\nlet s = \"L√∂we ËÄÅËôé L√©opard\";\n\nassert_eq!(s.find(char::is_whitespace), Some(5));\nassert_eq!(s.find(char::is_lowercase), Some(1));\nassert_eq!(s.find(|c: char| c.is_whitespace() || c.is_lowercase()), Some(1));\nassert_eq!(s.find(|c: char| (c < 'o') && (c > 'a')), Some(4));\n```\n\nNot finding the pattern:\n\n```\nlet s = \"L√∂we ËÄÅËôé L√©opard\";\nlet x: &[_] = &['1', '2'];\n\nassert_eq!(s.find(x), None);\n```","links":{"`None`":"2:41482:191","prim@char":"1:12067:454","self::pattern":"2:12757:3828"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:41480:194","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12763:15990","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13092:29808":{"id":"2:13092:29808","crate_id":2,"name":"split_at_mut_checked","span":null,"visibility":"public","docs":"Divide one mutable string slice into two at an index.\n\nThe argument, `mid`, should be a valid byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point. The\nmethod returns `None` if that‚Äôs not the case.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get immutable string slices instead, see the [`split_at_checked`] method.\n\n[`split_at_checked`]: str::split_at_checked\n\n# Examples\n\n```\n#![feature(split_at_checked)]\n\nlet mut s = \"Per Martin-L√∂f\".to_string();\nif let Some((first, last)) = s.split_at_mut_checked(3) {\n    first.make_ascii_uppercase();\n    assert_eq!(\"PER\", first);\n    assert_eq!(\" Martin-L√∂f\", last);\n}\nassert_eq!(\"PER Martin-L√∂f\", s);\n\nassert_eq!(None, s.split_at_mut_checked(13));  // Inside ‚Äú√∂‚Äù\nassert_eq!(None, s.split_at_mut_checked(16));  // Beyond the string length\n```","links":{"str::split_at_checked":"2:13091:29807"},"attrs":["#[must_use]","#[unstable(feature = \"split_at_checked\", reason = \"new API\", issue =\n\"119128\")]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["mid",{"primitive":"usize"}]],"output":{"resolved_path":{"name":"Option","id":"2:41480:194","args":{"angle_bracketed":{"args":[{"type":{"tuple":[{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13075:2957":{"id":"2:13075:2957","crate_id":2,"name":"as_bytes","span":null,"visibility":"public","docs":"Converts a string slice to a byte slice. To convert the byte slice back\ninto a string slice, use the [`from_utf8`] function.\n\n# Examples\n\n```\nlet bytes = \"bors\".as_bytes();\nassert_eq!(b\"bors\", bytes);\n```","links":{"`from_utf8`":"2:12305:15993"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"primitive":"u8"}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5615:2428":{"id":"5:5615:2428","crate_id":5,"name":"to_ascii_lowercase","span":null,"visibility":"public","docs":"Returns a copy of this string where each character is mapped to its\nASCII lower case equivalent.\n\nASCII letters 'A' to 'Z' are mapped to 'a' to 'z',\nbut non-ASCII letters are unchanged.\n\nTo lowercase the value in-place, use [`make_ascii_lowercase`].\n\nTo lowercase ASCII characters in addition to non-ASCII characters, use\n[`to_lowercase`].\n\n# Examples\n\n```\nlet s = \"Gr√º√üe, J√ºrgen ‚ù§\";\n\nassert_eq!(\"gr√º√üe, j√ºrgen ‚ù§\", s.to_ascii_lowercase());\n```\n\n[`make_ascii_lowercase`]: str::make_ascii_lowercase\n[`to_lowercase`]: #method.to_lowercase","links":{"str::make_ascii_lowercase":"2:13193:29057"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use = \"to lowercase the value in-place, use `make_ascii_lowercase()`\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7633:243","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13085:29780":{"id":"2:13085:29780","crate_id":2,"name":"get_unchecked_mut","span":null,"visibility":"public","docs":"Returns a mutable, unchecked subslice of `str`.\n\nThis is the unchecked alternative to indexing the `str`.\n\n# Safety\n\nCallers of this function are responsible that these preconditions are\nsatisfied:\n\n* The starting index must not exceed the ending index;\n* Indexes must be within bounds of the original slice;\n* Indexes must lie on UTF-8 sequence boundaries.\n\nFailing that, the returned string slice may reference invalid memory or\nviolate the invariants communicated by the `str` type.\n\n# Examples\n\n```\nlet mut v = String::from(\"üóª‚ààüåè\");\nunsafe {\n    assert_eq!(\"üóª\", v.get_unchecked_mut(0..4));\n    assert_eq!(\"‚àà\", v.get_unchecked_mut(4..7));\n    assert_eq!(\"üåè\", v.get_unchecked_mut(7..11));\n}\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"2:10849:239","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"2:10849:239","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"2:13067:887":{"id":"2:13067:887","crate_id":2,"name":"len","span":null,"visibility":"public","docs":"Returns the length of `self`.\n\nThis length is in bytes, not [`char`]s or graphemes. In other words,\nit might not be what a human considers the length of the string.\n\n[`char`]: prim@char\n\n# Examples\n\n```\nlet len = \"foo\".len();\nassert_eq!(3, len);\n\nassert_eq!(\"∆íoo\".len(), 4); // fancy f!\nassert_eq!(\"∆íoo\".chars().count(), 3);\n```","links":{"prim@char":"1:12067:454"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13068:2195":{"id":"2:13068:2195","crate_id":2,"name":"is_empty","span":null,"visibility":"public","docs":"Returns `true` if `self` has a length of zero bytes.\n\n# Examples\n\n```\nlet s = \"\";\nassert!(s.is_empty());\n\nlet s = \"not empty\";\nassert!(!s.is_empty());\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13196:30970":{"id":"2:13196:30970","crate_id":2,"name":"trim_ascii","span":null,"visibility":"public","docs":"Returns a string slice with leading and trailing ASCII whitespace\nremoved.\n\n'Whitespace' refers to the definition used by\n[`u8::is_ascii_whitespace`].\n\n[`u8::is_ascii_whitespace`]: u8::is_ascii_whitespace\n\n# Examples\n\n```\n#![feature(byte_slice_trim_ascii)]\n\nassert_eq!(\"\\r hello world\\n \".trim_ascii(), \"hello world\");\nassert_eq!(\"  \".trim_ascii(), \"\");\nassert_eq!(\"\".trim_ascii(), \"\");\n```","links":{"u8::is_ascii_whitespace":"2:970:38062"},"attrs":["#[unstable(feature = \"byte_slice_trim_ascii\", issue = \"94035\")]","#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:63:378":{"id":"0:63:378","crate_id":0,"name":"attr","span":{"filename":"src/internals/attr.rs","begin":[1,0],"end":[1881,1]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"module":{"is_crate":false,"items":["0:86-0:994:2069"],"is_stripped":false}}},"5:5600:36462":{"id":"5:5600:36462","crate_id":5,"name":"replacen","span":null,"visibility":"public","docs":"Replaces first N matches of a pattern with another string.\n\n`replacen` creates a new [`String`], and copies the data from this string slice into it.\nWhile doing so, it attempts to find matches of a pattern. If it finds any, it\nreplaces them with the replacement string slice at most `count` times.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"foo foo 123 foo\";\nassert_eq!(\"new new 123 foo\", s.replacen(\"foo\", \"new\", 2));\nassert_eq!(\"faa fao 123 foo\", s.replacen('o', \"a\", 3));\nassert_eq!(\"foo foo new23 foo\", s.replacen(char::is_numeric, \"new\", 1));\n```\n\nWhen the pattern doesn't match, it returns this string slice as [`String`]:\n\n```\nlet s = \"this is old\";\nassert_eq!(s, s.replacen(\"cookie monster\", \"little lamb\", 10));\n```","links":{"`String`":"5:7633:243"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the replaced string as a new allocation, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}],["to",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}],["count",{"primitive":"usize"}]],"output":{"resolved_path":{"name":"String","id":"5:7633:243","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12763:15990","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13076:35749":{"id":"2:13076:35749","crate_id":2,"name":"as_bytes_mut","span":null,"visibility":"public","docs":"Converts a mutable string slice to a mutable byte slice.\n\n# Safety\n\nThe caller must ensure that the content of the slice is valid UTF-8\nbefore the borrow ends and the underlying `str` is used.\n\nUse of a `str` whose contents are not valid UTF-8 is undefined behavior.\n\n# Examples\n\nBasic usage:\n\n```\nlet mut s = String::from(\"Hello\");\nlet bytes = unsafe { s.as_bytes_mut() };\n\nassert_eq!(b\"Hello\", bytes);\n```\n\nMutability:\n\n```\nlet mut s = String::from(\"üóª‚ààüåè\");\n\nunsafe {\n    let bytes = s.as_bytes_mut();\n\n    bytes[0] = 0xF0;\n    bytes[1] = 0x9F;\n    bytes[2] = 0x8D;\n    bytes[3] = 0x94;\n}\n\nassert_eq!(\"üçî‚ààüåè\", s);\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"slice":{"primitive":"u8"}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"2:13095:2432":{"id":"2:13095:2432","crate_id":2,"name":"char_indices","span":null,"visibility":"public","docs":"Returns an iterator over the [`char`]s of a string slice, and their\npositions.\n\nAs a string slice consists of valid UTF-8, we can iterate through a\nstring slice by [`char`]. This method returns an iterator of both\nthese [`char`]s, as well as their byte positions.\n\nThe iterator yields tuples. The position is first, the [`char`] is\nsecond.\n\n# Examples\n\nBasic usage:\n\n```\nlet word = \"goodbye\";\n\nlet count = word.char_indices().count();\nassert_eq!(7, count);\n\nlet mut char_indices = word.char_indices();\n\nassert_eq!(Some((0, 'g')), char_indices.next());\nassert_eq!(Some((1, 'o')), char_indices.next());\nassert_eq!(Some((2, 'o')), char_indices.next());\nassert_eq!(Some((3, 'd')), char_indices.next());\nassert_eq!(Some((4, 'b')), char_indices.next());\nassert_eq!(Some((5, 'y')), char_indices.next());\nassert_eq!(Some((6, 'e')), char_indices.next());\n\nassert_eq!(None, char_indices.next());\n```\n\nRemember, [`char`]s might not match your intuition about characters:\n\n[`char`]: prim@char\n\n```\nlet yes = \"yÃÜes\";\n\nlet mut char_indices = yes.char_indices();\n\nassert_eq!(Some((0, 'y')), char_indices.next()); // not (0, 'yÃÜ')\nassert_eq!(Some((1, '\\u{0306}')), char_indices.next());\n\n// note the 3 here - the previous character took up two bytes\nassert_eq!(Some((3, 'e')), char_indices.next());\nassert_eq!(Some((4, 's')), char_indices.next());\n\nassert_eq!(None, char_indices.next());\n```","links":{"prim@char":"1:12067:454"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"CharIndices","id":"2:43339:8878","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13077:334":{"id":"2:13077:334","crate_id":2,"name":"as_ptr","span":null,"visibility":"public","docs":"Converts a string slice to a raw pointer.\n\nAs string slices are a slice of bytes, the raw pointer points to a\n[`u8`]. This pointer will be pointing to the first byte of the string\nslice.\n\nThe caller must ensure that the returned pointer is never written to.\nIf you need to mutate the contents of the string slice, use [`as_mut_ptr`].\n\n[`as_mut_ptr`]: str::as_mut_ptr\n\n# Examples\n\n```\nlet s = \"Hello\";\nlet ptr = s.as_ptr();\n```","links":{"str::as_mut_ptr":"2:13078:29781","`u8`":"1:12084:1656"},"attrs":["#[rustc_never_returns_null_ptr]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"raw_pointer":{"mutable":false,"type":{"primitive":"u8"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13108:29410":{"id":"2:13108:29410","crate_id":2,"name":"ends_with","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a suffix of this\nstring slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.ends_with(\"anas\"));\nassert!(!bananas.ends_with(\"nana\"));\n```","links":{"prim@char":"1:12067:454","self::pattern":"2:12757:3828"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12763:15990","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12763:15990","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12778:15991","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13155:35757":{"id":"2:13155:35757","crate_id":2,"name":"rmatch_indices","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within `self`,\nyielded in reverse order along with the index of the match.\n\nFor matches of `pat` within `self` that overlap, only the indices\ncorresponding to the last match are returned.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`match_indices`] method can be used.\n\n[`match_indices`]: str::match_indices\n\n# Examples\n\n```\nlet v: Vec<_> = \"abcXXXabcYYYabc\".rmatch_indices(\"abc\").collect();\nassert_eq!(v, [(12, \"abc\"), (6, \"abc\"), (0, \"abc\")]);\n\nlet v: Vec<_> = \"1abcabc2\".rmatch_indices(\"abc\").collect();\nassert_eq!(v, [(4, \"abc\"), (1, \"abc\")]);\n\nlet v: Vec<_> = \"ababa\".rmatch_indices(\"aba\").collect();\nassert_eq!(v, [(2, \"aba\")]); // only the last `aba`\n```","links":{"self::pattern":"2:12757:3828","`DoubleEndedIterator`":"2:8139:131","prim@char":"1:12067:454","str::match_indices":"2:13152:35756"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RMatchIndices","id":"2:43531:8890","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12763:15990","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12763:15990","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12778:15991","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13069:35746":{"id":"2:13069:35746","crate_id":2,"name":"is_char_boundary","span":null,"visibility":"public","docs":"Checks that `index`-th byte is the first byte in a UTF-8 code point\nsequence or the end of the string.\n\nThe start and end of the string (when `index == self.len()`) are\nconsidered to be boundaries.\n\nReturns `false` if `index` is greater than `self.len()`.\n\n# Examples\n\n```\nlet s = \"L√∂we ËÄÅËôé L√©opard\";\nassert!(s.is_char_boundary(0));\n// start of `ËÄÅ`\nassert!(s.is_char_boundary(6));\nassert!(s.is_char_boundary(s.len()));\n\n// second byte of `√∂`\nassert!(!s.is_char_boundary(2));\n\n// third byte of `ËÄÅ`\nassert!(!s.is_char_boundary(8));\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["index",{"primitive":"usize"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13122:29810":{"id":"2:13122:29810","crate_id":2,"name":"split_inclusive","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by\ncharacters matched by a pattern. Differs from the iterator produced by\n`split` in that `split_inclusive` leaves the matched part as the\nterminator of the substring.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\\nlittle lamb\\nlittle lamb.\"\n    .split_inclusive('\\n').collect();\nassert_eq!(v, [\"Mary had a little lamb\\n\", \"little lamb\\n\", \"little lamb.\"]);\n```\n\nIf the last element of the string is matched,\nthat element will be considered the terminator of the preceding substring.\nThat substring will be the last item returned by the iterator.\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\\nlittle lamb\\nlittle lamb.\\n\"\n    .split_inclusive('\\n').collect();\nassert_eq!(v, [\"Mary had a little lamb\\n\", \"little lamb\\n\", \"little lamb.\\n\"]);\n```","links":{"prim@char":"1:12067:454","self::pattern":"2:12757:3828"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"SplitInclusive","id":"2:12573:8808","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12763:15990","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13169:2103":{"id":"2:13169:2103","crate_id":2,"name":"trim_start_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. `start` in this context means the first\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be left side, and for right-to-left languages like\nArabic or Hebrew, this will be the right side.\n\n# Examples\n\n```\nassert_eq!(\"11foo1bar11\".trim_start_matches('1'), \"foo1bar11\");\nassert_eq!(\"123foo1bar123\".trim_start_matches(char::is_numeric), \"foo1bar123\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_start_matches(x), \"foo1bar12\");\n```","links":{"prim@char":"1:12067:454","self::pattern":"2:12757:3828"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12763:15990","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13200:35768":{"id":"2:13200:35768","crate_id":2,"name":"escape_unicode","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_unicode`].\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"‚ù§\\n!\".escape_unicode() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"‚ù§\\n!\".escape_unicode());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"\\\\u{{2764}}\\\\u{{a}}\\\\u{{21}}\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"‚ù§\\n!\".escape_unicode().to_string(), \"\\\\u{2764}\\\\u{a}\\\\u{21}\");\n```","links":{"`char::escape_unicode`":"2:4853:35768"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EscapeUnicode","id":"2:43680:8839","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13096:8795":{"id":"2:13096:8795","crate_id":2,"name":"bytes","span":null,"visibility":"public","docs":"An iterator over the bytes of a string slice.\n\nAs a string slice consists of a sequence of bytes, we can iterate\nthrough a string slice by byte. This method returns such an iterator.\n\n# Examples\n\n```\nlet mut bytes = \"bors\".bytes();\n\nassert_eq!(Some(b'b'), bytes.next());\nassert_eq!(Some(b'o'), bytes.next());\nassert_eq!(Some(b'r'), bytes.next());\nassert_eq!(Some(b's'), bytes.next());\n\nassert_eq!(None, bytes.next());\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Bytes","id":"2:43349:2967","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13066":{"id":"2:13066","crate_id":2,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":["#[cfg(not(test))]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"primitive":"str"},"items":["2:13067:887","2:13068:2195","2:13069:35746","2:13070:35747","2:13072:35748","2:13075:2957","2:13076:35749","2:13077:334","2:13078:29781","2:13079:2084","2:13081:29778","2:13083:29779","2:13085:29780","2:13087:35750","2:13088:35751","2:13089:2845","2:13090:29804","2:13091:29807","2:13092:29808","2:13094:2438","2:13095:2432","2:13096:8795","2:13097:33470","2:13098:33473","2:13099:28341","2:13100:35752","2:13101:33826","2:13102:2297","2:13105:29408","2:13108:29410","2:13111:2747","2:13115:4377","2:13119:28340","2:13122:29810","2:13125:29812","2:13128:35753","2:13131:35754","2:13134:29814","2:13137:29816","2:13140:29818","2:13143:29819","2:13146:2191","2:13149:35755","2:13152:35756","2:13155:35757","2:13158:35758","2:13160:35759","2:13162:35760","2:13164:35761","2:13165:35762","2:13166:35763","2:13169:2103","2:13172:28146","2:13175:29820","2:13178:35764","2:13181:35765","2:13184:35766","2:13187:2064","2:13189:29053","2:13190:30965","2:13191:29055","2:13192:29056","2:13193:29057","2:13194:30968","2:13195:30969","2:13196:30970","2:13197:35767","2:13199:10524","2:13200:35768"],"negative":false,"synthetic":false,"blanket_impl":null}}},"2:13083:29779":{"id":"2:13083:29779","crate_id":2,"name":"get_unchecked","span":null,"visibility":"public","docs":"Returns an unchecked subslice of `str`.\n\nThis is the unchecked alternative to indexing the `str`.\n\n# Safety\n\nCallers of this function are responsible that these preconditions are\nsatisfied:\n\n* The starting index must not exceed the ending index;\n* Indexes must be within bounds of the original slice;\n* Indexes must lie on UTF-8 sequence boundaries.\n\nFailing that, the returned string slice may reference invalid memory or\nviolate the invariants communicated by the `str` type.\n\n# Examples\n\n```\nlet v = \"üóª‚ààüåè\";\nunsafe {\n    assert_eq!(\"üóª\", v.get_unchecked(0..4));\n    assert_eq!(\"‚àà\", v.get_unchecked(4..7));\n    assert_eq!(\"üåè\", v.get_unchecked(7..11));\n}\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"2:10849:239","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"2:10849:239","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"2:13192:29056":{"id":"2:13192:29056","crate_id":2,"name":"make_ascii_uppercase","span":null,"visibility":"public","docs":"Converts this string to its ASCII upper case equivalent in-place.\n\nASCII letters 'a' to 'z' are mapped to 'A' to 'Z',\nbut non-ASCII letters are unchanged.\n\nTo return a new uppercased value without modifying the existing one, use\n[`to_ascii_uppercase()`].\n\n[`to_ascii_uppercase()`]: #method.to_ascii_uppercase\n\n# Examples\n\n```\nlet mut s = String::from(\"Gr√º√üe, J√ºrgen ‚ù§\");\n\ns.make_ascii_uppercase();\n\nassert_eq!(\"GR√º√üE, J√ºRGEN ‚ù§\", s);\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13149:35755":{"id":"2:13149:35755","crate_id":2,"name":"rmatches","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within this string slice,\nyielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`matches`] method can be used.\n\n[`matches`]: str::matches\n\n# Examples\n\n```\nlet v: Vec<&str> = \"abcXXXabcYYYabc\".rmatches(\"abc\").collect();\nassert_eq!(v, [\"abc\", \"abc\", \"abc\"]);\n\nlet v: Vec<&str> = \"1abc2abc3\".rmatches(char::is_numeric).collect();\nassert_eq!(v, [\"3\", \"2\", \"1\"]);\n```","links":{"self::pattern":"2:12757:3828","`DoubleEndedIterator`":"2:8139:131","prim@char":"1:12067:454","str::matches":"2:13146:2191"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RMatches","id":"2:43585:8893","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12763:15990","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12763:15990","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12778:15991","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13152:35756":{"id":"2:13152:35756","crate_id":2,"name":"match_indices","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within this string\nslice as well as the index that the match starts at.\n\nFor matches of `pat` within `self` that overlap, only the indices\ncorresponding to the first match are returned.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rmatch_indices`] method can be used.\n\n[`rmatch_indices`]: str::rmatch_indices\n\n# Examples\n\n```\nlet v: Vec<_> = \"abcXXXabcYYYabc\".match_indices(\"abc\").collect();\nassert_eq!(v, [(0, \"abc\"), (6, \"abc\"), (12, \"abc\")]);\n\nlet v: Vec<_> = \"1abcabc2\".match_indices(\"abc\").collect();\nassert_eq!(v, [(1, \"abc\"), (4, \"abc\")]);\n\nlet v: Vec<_> = \"ababa\".match_indices(\"aba\").collect();\nassert_eq!(v, [(0, \"aba\")]); // only the first `aba`\n```","links":{"self::pattern":"2:12757:3828","`DoubleEndedIterator`":"2:8139:131","prim@char":"1:12067:454","str::rmatch_indices":"2:13155:35757"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"MatchIndices","id":"2:43513:8889","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12763:15990","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13134:29814":{"id":"2:13134:29814","crate_id":2,"name":"splitn","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by a\npattern, restricted to returning at most `n` items.\n\nIf `n` substrings are returned, the last substring (the `n`th substring)\nwill contain the remainder of the string.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will not be double ended, because it is\nnot efficient to support.\n\nIf the pattern allows a reverse search, the [`rsplitn`] method can be\nused.\n\n[`rsplitn`]: str::rsplitn\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lambda\".splitn(3, ' ').collect();\nassert_eq!(v, [\"Mary\", \"had\", \"a little lambda\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".splitn(3, \"X\").collect();\nassert_eq!(v, [\"lion\", \"\", \"tigerXleopard\"]);\n\nlet v: Vec<&str> = \"abcXdef\".splitn(1, 'X').collect();\nassert_eq!(v, [\"abcXdef\"]);\n\nlet v: Vec<&str> = \"\".splitn(1, 'X').collect();\nassert_eq!(v, [\"\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".splitn(2, |c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"abc\", \"defXghi\"]);\n```","links":{"prim@char":"1:12067:454","self::pattern":"2:12757:3828","str::rsplitn":"2:13137:29816"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["n",{"primitive":"usize"}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"SplitN","id":"2:43467:8886","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12763:15990","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13099:28341":{"id":"2:13099:28341","crate_id":2,"name":"lines","span":null,"visibility":"public","docs":"An iterator over the lines of a string, as string slices.\n\nLines are split at line endings that are either newlines (`\\n`) or\nsequences of a carriage return followed by a line feed (`\\r\\n`).\n\nLine terminators are not included in the lines returned by the iterator.\n\nNote that any carriage return (`\\r`) not immediately followed by a\nline feed (`\\n`) does not split a line. These carriage returns are\nthereby included in the produced lines.\n\nThe final line ending is optional. A string that ends with a final line\nending will return the same lines as an otherwise identical string\nwithout a final line ending.\n\n# Examples\n\nBasic usage:\n\n```\nlet text = \"foo\\r\\nbar\\n\\nbaz\\r\";\nlet mut lines = text.lines();\n\nassert_eq!(Some(\"foo\"), lines.next());\nassert_eq!(Some(\"bar\"), lines.next());\nassert_eq!(Some(\"\"), lines.next());\n// Trailing carriage return is included in the last line\nassert_eq!(Some(\"baz\\r\"), lines.next());\n\nassert_eq!(None, lines.next());\n```\n\nThe final line does not require any ending:\n\n```\nlet text = \"foo\\nbar\\n\\r\\nbaz\";\nlet mut lines = text.lines();\n\nassert_eq!(Some(\"foo\"), lines.next());\nassert_eq!(Some(\"bar\"), lines.next());\nassert_eq!(Some(\"\"), lines.next());\nassert_eq!(Some(\"baz\"), lines.next());\n\nassert_eq!(None, lines.next());\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Lines","id":"2:43617:8894","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13125:29812":{"id":"2:13125:29812","crate_id":2,"name":"rsplit","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by\ncharacters matched by a pattern and yielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`split`] method can be used.\n\n[`split`]: str::split\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".rsplit(' ').collect();\nassert_eq!(v, [\"lamb\", \"little\", \"a\", \"had\", \"Mary\"]);\n\nlet v: Vec<&str> = \"\".rsplit('X').collect();\nassert_eq!(v, [\"\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".rsplit('X').collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"\", \"lion\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".rsplit(\"::\").collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"lion\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".rsplit(|c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"ghi\", \"def\", \"abc\"]);\n```","links":{"self::pattern":"2:12757:3828","`DoubleEndedIterator`":"2:8139:131","prim@char":"1:12067:454","str::split":"2:13119:28340"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RSplit","id":"2:43381:8809","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12763:15990","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12763:15990","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12778:15991","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13181:35765":{"id":"2:13181:35765","crate_id":2,"name":"trim_left_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. 'Left' in this context means the first\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _right_ side, not the left.\n\n# Examples\n\n```\nassert_eq!(\"11foo1bar11\".trim_left_matches('1'), \"foo1bar11\");\nassert_eq!(\"123foo1bar123\".trim_left_matches(char::is_numeric), \"foo1bar123\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_left_matches(x), \"foo1bar12\");\n```","links":{"prim@char":"1:12067:454","self::pattern":"2:12757:3828"},"attrs":["#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_start_matches`\",\nsuggestion = \"trim_start_matches\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_start_matches`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12763:15990","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:86-0:994:2069":{"id":"0:86-0:994:2069","crate_id":0,"name":null,"span":{"filename":"src/internals/attr.rs","begin":[21,0],"end":[21,43]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"import":{"source":"crate::internals::case::RenameRule","name":"RenameRule","id":"0:994:2069","glob":false}}},"2:13189:29053":{"id":"2:13189:29053","crate_id":2,"name":"is_ascii","span":null,"visibility":"public","docs":"Checks if all characters in this string are within the ASCII range.\n\n# Examples\n\n```\nlet ascii = \"hello!\\n\";\nlet non_ascii = \"Gr√º√üe, J√ºrgen ‚ù§\";\n\nassert!(ascii.is_ascii());\nassert!(!non_ascii.is_ascii());\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13131:35754":{"id":"2:13131:35754","crate_id":2,"name":"rsplit_terminator","span":null,"visibility":"public","docs":"An iterator over substrings of `self`, separated by characters\nmatched by a pattern and yielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\nEquivalent to [`split`], except that the trailing substring is\nskipped if empty.\n\n[`split`]: str::split\n\nThis method can be used for string data that is _terminated_,\nrather than _separated_ by a pattern.\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a\nreverse search, and it will be double ended if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`split_terminator`] method can be\nused.\n\n[`split_terminator`]: str::split_terminator\n\n# Examples\n\n```\nlet v: Vec<&str> = \"A.B.\".rsplit_terminator('.').collect();\nassert_eq!(v, [\"B\", \"A\"]);\n\nlet v: Vec<&str> = \"A..B..\".rsplit_terminator(\".\").collect();\nassert_eq!(v, [\"\", \"B\", \"\", \"A\"]);\n\nlet v: Vec<&str> = \"A.B:C.D\".rsplit_terminator(&['.', ':'][..]).collect();\nassert_eq!(v, [\"D\", \"C\", \"B\", \"A\"]);\n```","links":{"self::pattern":"2:12757:3828","str::split":"2:13119:28340","prim@char":"1:12067:454","str::split_terminator":"2:13128:35753"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RSplitTerminator","id":"2:43431:8884","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12763:15990","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12763:15990","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12778:15991","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13078:29781":{"id":"2:13078:29781","crate_id":2,"name":"as_mut_ptr","span":null,"visibility":"public","docs":"Converts a mutable string slice to a raw pointer.\n\nAs string slices are a slice of bytes, the raw pointer points to a\n[`u8`]. This pointer will be pointing to the first byte of the string\nslice.\n\nIt is your responsibility to make sure that the string slice only gets\nmodified in a way that it remains valid UTF-8.","links":{"`u8`":"1:12084:1656"},"attrs":["#[rustc_never_returns_null_ptr]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"raw_pointer":{"mutable":true,"type":{"primitive":"u8"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}}},"paths":{"17:13375:5684":{"crate_id":17,"path":["object","elf","Syminfo64"],"kind":"struct"},"2:31960:8831":{"crate_id":2,"path":["core","error","Source"],"kind":"struct"},"2:2554:103":{"crate_id":2,"path":["core","borrow","Borrow"],"kind":"trait"},"2:42959:8874":{"crate_id":2,"path":["core","slice","ascii","EscapeByte"],"kind":"struct"},"2:45306:8231":{"crate_id":2,"path":["core","core_arch","simd","u16x2"],"kind":"struct"},"17:11128:5482":{"crate_id":17,"path":["object","read","coff","section","CoffSection"],"kind":"struct"},"2:39977:8841":{"crate_id":2,"path":["core","char","ToLowercase"],"kind":"struct"},"6:1707:7102":{"crate_id":6,"path":["libc","unix","linux_like","utsname"],"kind":"struct"},"1:914:10092":{"crate_id":1,"path":["std","collections","hash","map","IntoKeys"],"kind":"struct"},"17:16069:6378":{"crate_id":17,"path":["object","xcoff","SymbolBytes"],"kind":"struct"},"2:10646:5188":{"crate_id":2,"path":["core","slice","sort","merge_sort","BufGuard"],"kind":"struct"},"2:22726:7965":{"crate_id":2,"path":["core","num","flt2dec","decoder","Decoded"],"kind":"struct"},"24:3484:3687":{"crate_id":24,"path":["syn","token","Priv"],"kind":"struct"},"11:2423:3418":{"crate_id":11,"path":["hashbrown","table","IntoIter"],"kind":"struct"},"20:803:8555":{"crate_id":20,"path":["proc_macro2","imp","DeferredTokenStream"],"kind":"struct"},"16:8188:23353":{"crate_id":16,"path":["gimli","read","unit","EntriesTreeIter"],"kind":"struct"},"16:8202:6479":{"crate_id":16,"path":["gimli","read","unit","DebugTypes"],"kind":"struct"},"2:39260:16079":{"crate_id":2,"path":["core","ops","try_trait","Yeet"],"kind":"struct"},"24:3042:3670":{"crate_id":24,"path":["syn","token","Become"],"kind":"struct"},"23:407:4163":{"crate_id":23,"path":["quote","__private","RepInterp"],"kind":"struct"},"6:1559:7009":{"crate_id":6,"path":["libc","unix","linux_like","fd_set"],"kind":"struct"},"17:11166:5512":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbolTable"],"kind":"struct"},"16:7539:6472":{"crate_id":16,"path":["gimli","read","pubnames","DebugPubNames"],"kind":"struct"},"2:39055:4705":{"crate_id":2,"path":["core","ops","coroutine","CoroutineState"],"kind":"enum"},"24:5272:3363":{"crate_id":24,"path":["syn","expr","ExprInfer"],"kind":"struct"},"6:7575:7895":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ptrace_rseq_configuration"],"kind":"struct"},"16:2660:6447":{"crate_id":16,"path":["gimli","common","RawRangeListsOffset"],"kind":"struct"},"2:44111:8218":{"crate_id":2,"path":["core","time","Nanoseconds"],"kind":"struct"},"2:4634:3584":{"crate_id":2,"path":["core","cell","BorrowRef"],"kind":"struct"},"24:3586:2726":{"crate_id":24,"path":["syn","token","Static"],"kind":"struct"},"6:1663:7084":{"crate_id":6,"path":["libc","unix","linux_like","arpreq_old"],"kind":"struct"},"1:4076:10695":{"crate_id":1,"path":["std","os","unix","fs","MetadataExt"],"kind":"trait"},"2:44129:132":{"crate_id":2,"path":["core","time","Duration"],"kind":"struct"},"1:2690:9996":{"crate_id":1,"path":["std","io","buffered","bufwriter","WriterPanicked"],"kind":"struct"},"24:2940:3744":{"crate_id":24,"path":["syn","token","Underscore"],"kind":"struct"},"6:8351:7946":{"crate_id":6,"path":["libc","unix","align","in6_addr"],"kind":"struct"},"2:3193:3722":{"crate_id":2,"path":["core","ops","bit","Not"],"kind":"trait"},"1:8109:10651":{"crate_id":1,"path":["std","io","error","ErrorKind"],"kind":"enum"},"16:6620:6536":{"crate_id":16,"path":["gimli","read","index","UnitIndexSection"],"kind":"struct"},"17:12189:23593":{"crate_id":17,"path":["object","read","pe","file","PeComdatIterator"],"kind":"struct"},"5:2101:10545":{"crate_id":5,"path":["alloc","collections","btree","map","CursorMut"],"kind":"struct"},"17:15463:6200":{"crate_id":17,"path":["object","pe","ImageEpilogueDynamicRelocationHeader"],"kind":"struct"},"17:11812:23525":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCacheImage"],"kind":"struct"},"6:5283:7335":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_j1939"],"kind":"struct"},"16:2303:22444":{"crate_id":16,"path":["gimli","common","Format"],"kind":"enum"},"2:5081:422":{"crate_id":2,"path":["core","ffi","c_void"],"kind":"enum"},"11:364:5118":{"crate_id":11,"path":["hashbrown","raw","RawIntoIter"],"kind":"struct"},"2:4206:5149":{"crate_id":2,"path":["core","array","Guard"],"kind":"struct"},"5:7481:3418":{"crate_id":5,"path":["alloc","collections","vec_deque","into_iter","IntoIter"],"kind":"struct"},"16:7497:6625":{"crate_id":16,"path":["gimli","read","op","OperationIter"],"kind":"struct"},"2:5140:10660":{"crate_id":2,"path":["core","io","borrowed_buf","BorrowedBuf"],"kind":"struct"},"6:5636:7492":{"crate_id":6,"path":["libc","unix","linux_like","linux","hwtstamp_config"],"kind":"struct"},"24:2109:1984":{"crate_id":24,"path":["syn","punctuated","Punctuated"],"kind":"struct"},"24:771:36986":{"crate_id":24,"path":["syn","expr","precedence","Precedence"],"kind":"enum"},"17:11467:5525":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbol"],"kind":"struct"},"11:1883:3419":{"crate_id":11,"path":["hashbrown","set","Iter"],"kind":"struct"},"24:4866:2671":{"crate_id":24,"path":["syn","token","Brace"],"kind":"struct"},"1:859:3418":{"crate_id":1,"path":["std","collections","hash","map","IntoIter"],"kind":"struct"},"24:5798:3394":{"crate_id":24,"path":["syn","restriction","VisRestricted"],"kind":"struct"},"17:12150:5568":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbol"],"kind":"struct"},"24:1114:3051":{"crate_id":24,"path":["syn","generics","TypeGenerics"],"kind":"struct"},"5:1062:5125":{"crate_id":5,"path":["alloc","collections","binary_heap","drop","DropGuard"],"kind":"struct"},"6:5266:7324":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_extended_err"],"kind":"struct"},"1:8329:10670":{"crate_id":1,"path":["std","net","tcp","IntoIncoming"],"kind":"struct"},"11:1887:3418":{"crate_id":11,"path":["hashbrown","set","IntoIter"],"kind":"struct"},"24:5492:2653":{"crate_id":24,"path":["syn","generics","TraitBoundModifier"],"kind":"enum"},"17:13424:5691":{"crate_id":17,"path":["object","elf","Rela64"],"kind":"struct"},"17:13308:5673":{"crate_id":17,"path":["object","elf","CompressionHeader64"],"kind":"struct"},"1:5907:5207":{"crate_id":1,"path":["std","sync","lazy_lock","LazyLock"],"kind":"struct"},"17:13146:5632":{"crate_id":17,"path":["object","archive","AixFileHeader"],"kind":"struct"},"2:22824:8827":{"crate_id":2,"path":["core","num","error","ParseIntError"],"kind":"struct"},"17:12433:5578":{"crate_id":17,"path":["object","read","pe","relocation","Relocation"],"kind":"struct"},"1:5046:3991":{"crate_id":1,"path":["std","panic","always_abort"],"kind":"function"},"5:721:249":{"crate_id":5,"path":["alloc","borrow","ToOwned"],"kind":"trait"},"17:15624:6262":{"crate_id":17,"path":["object","pe","ImageAlpha64RuntimeFunctionEntry"],"kind":"struct"},"2:22:741":{"crate_id":2,"path":["core","format_args"],"kind":"macro"},"6:465:1980":{"crate_id":6,"path":["libc","unix","group"],"kind":"struct"},"24:3246:3676":{"crate_id":24,"path":["syn","token","Final"],"kind":"struct"},"1:8234:3482":{"crate_id":1,"path":["std","io","util","Empty"],"kind":"struct"},"24:3280:3677":{"crate_id":24,"path":["syn","token","For"],"kind":"struct"},"17:12707:23424":{"crate_id":17,"path":["object","read","traits","NoDynamicRelocationIterator"],"kind":"struct"},"17:11547:5364":{"crate_id":17,"path":["object","read","elf","note","Note"],"kind":"struct"},"24:1370:8520":{"crate_id":24,"path":["syn","lit","LitFloatRepr"],"kind":"struct"},"24:4910:3321":{"crate_id":24,"path":["syn","attr","AttrStyle"],"kind":"enum"},"6:1723:7107":{"crate_id":6,"path":["libc","unix","linux_like","sigevent"],"kind":"struct"},"1:7856:9992":{"crate_id":1,"path":["std","env","JoinPathsError"],"kind":"struct"},"16:6047:23333":{"crate_id":16,"path":["gimli","read","cfi","UnwindTable"],"kind":"struct"},"23:0:1244":{"crate_id":23,"path":["quote"],"kind":"module"},"2:10563:5185":{"crate_id":2,"path":["core","slice","sort","InsertionHole"],"kind":"struct"},"2:41538:3419":{"crate_id":2,"path":["core","option","Iter"],"kind":"struct"},"1:12050:29152":{"crate_id":1,"path":["std","backtrace_rs","print","PrintFmt"],"kind":"enum"},"1:2421:10602":{"crate_id":1,"path":["std","fs","symlink_metadata"],"kind":"function"},"2:42026:91":{"crate_id":2,"path":["core","sync","atomic","AtomicIsize"],"kind":"struct"},"17:13899:5799":{"crate_id":17,"path":["object","macho","Section32"],"kind":"struct"},"2:41420:8944":{"crate_id":2,"path":["core","net","socket_addr","SocketAddr"],"kind":"enum"},"2:728:190":{"crate_id":2,"path":["core","num","nonzero","NonZero"],"kind":"struct"},"16:7695:6630":{"crate_id":16,"path":["gimli","read","rnglists","RawRange"],"kind":"struct"},"13:0:3176":{"crate_id":13,"path":["std_detect"],"kind":"module"},"17:11773:5593":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCache"],"kind":"struct"},"5:924:5133":{"crate_id":5,"path":["alloc","collections","binary_heap","Hole"],"kind":"struct"},"1:7635:2072":{"crate_id":1,"path":["std","backtrace_rs","symbolize","Symbol"],"kind":"struct"},"16:5307:6515":{"crate_id":16,"path":["gimli","constants","DwOp"],"kind":"struct"},"1:11513:10673":{"crate_id":1,"path":["std","sys_common","net","TcpStream"],"kind":"struct"},"2:39893:33289":{"crate_id":2,"path":["core","char","convert","CharErrorKind"],"kind":"enum"},"2:21956:10834":{"crate_id":2,"path":["core","core_simd","to_bytes","ToBytes"],"kind":"trait"},"18:651:5369":{"crate_id":18,"path":["memchr","memmem","x86","sse","Forward"],"kind":"struct"},"6:5624:7486":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_ifc_ifcu"],"kind":"union"},"2:3051:3591":{"crate_id":2,"path":["core","marker","Unsize"],"kind":"trait"},"17:11142:5518":{"crate_id":17,"path":["object","read","coff","symbol","SymbolTable"],"kind":"struct"},"11:2569:3475":{"crate_id":11,"path":["hashbrown","TryReserveError"],"kind":"enum"},"16:5914:8635":{"crate_id":16,"path":["gimli","read","cfi","AugmentationData"],"kind":"struct"},"16:6574:6478":{"crate_id":16,"path":["gimli","read","index","DebugTuIndex"],"kind":"struct"},"17:12621:5589":{"crate_id":17,"path":["object","read","xcoff","symbol","XcoffSymbol"],"kind":"struct"},"17:15822:6313":{"crate_id":17,"path":["object","pe","ImportObjectHeader"],"kind":"struct"},"17:16198:6408":{"crate_id":17,"path":["object","xcoff","BlockAux32"],"kind":"struct"},"17:597:2072":{"crate_id":17,"path":["object","read","any","Symbol"],"kind":"struct"},"5:5401:5125":{"crate_id":5,"path":["alloc","slice","hack","to_vec","DropGuard"],"kind":"struct"},"17:15126:6112":{"crate_id":17,"path":["object","pe","ImageAuxSymbolTokenDef"],"kind":"struct"},"24:5211:3354":{"crate_id":24,"path":["syn","expr","ExprAwait"],"kind":"struct"},"16:3925:6490":{"crate_id":16,"path":["gimli","constants","DwChildren"],"kind":"struct"},"1:8568:8434":{"crate_id":1,"path":["std","path","PrefixComponent"],"kind":"struct"},"17:15608:6258":{"crate_id":17,"path":["object","pe","ImageArmRuntimeFunctionEntry"],"kind":"struct"},"17:12175:23584":{"crate_id":17,"path":["object","read","pe","file","PeFile"],"kind":"struct"},"17:11051:23456":{"crate_id":17,"path":["object","read","coff","file","CoffCommon"],"kind":"struct"},"6:545:6942":{"crate_id":6,"path":["libc","unix","winsize"],"kind":"struct"},"2:45391:8240":{"crate_id":2,"path":["core","core_arch","simd","u32x2"],"kind":"struct"},"24:4755:3736":{"crate_id":24,"path":["syn","token","ShlEq"],"kind":"struct"},"17:15944:5655":{"crate_id":17,"path":["object","xcoff","FileHeader64"],"kind":"struct"},"1:362:4597":{"crate_id":1,"path":["std","thread","scoped","ScopedJoinHandle"],"kind":"struct"},"1:4313:10721":{"crate_id":1,"path":["std","os","unix","net","datagram","UnixDatagram"],"kind":"struct"},"16:2902:22470":{"crate_id":16,"path":["gimli","common","UnitSectionOffset"],"kind":"enum"},"24:4639:3728":{"crate_id":24,"path":["syn","token","PercentEq"],"kind":"struct"},"1:10778:9992":{"crate_id":1,"path":["std","sys","pal","unix","os","JoinPathsError"],"kind":"struct"},"16:5686:6459":{"crate_id":16,"path":["gimli","read","addr","DebugAddr"],"kind":"struct"},"2:33052:3465":{"crate_id":2,"path":["core","ops","arith","AddAssign"],"kind":"trait"},"24:3416:3683":{"crate_id":24,"path":["syn","token","Mod"],"kind":"struct"},"9:178:10083":{"crate_id":9,"path":["miniz_oxide","inflate","stream","InflateState"],"kind":"struct"},"11:1025:10542":{"crate_id":11,"path":["hashbrown","map","OccupiedEntry"],"kind":"struct"},"16:7823:23350":{"crate_id":16,"path":["gimli","read","unit","UnitType"],"kind":"enum"},"17:261:36731":{"crate_id":17,"path":["object","read","util","DebugLen"],"kind":"struct"},"5:40:4712":{"crate_id":5,"path":["alloc","raw_vec","RawVec"],"kind":"struct"},"17:15521:6242":{"crate_id":17,"path":["object","pe","ImageLoadConfigDirectory64"],"kind":"struct"},"2:3301:142":{"crate_id":2,"path":["core","ops","function","FnMut"],"kind":"trait"},"2:33111:5343":{"crate_id":2,"path":["core","ops","arith","SubAssign"],"kind":"trait"},"17:13959:5808":{"crate_id":17,"path":["object","macho","FvmlibCommand"],"kind":"struct"},"17:14436:5904":{"crate_id":17,"path":["object","macho","LinkerOptionCommand"],"kind":"struct"},"6:5557:7455":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_setup"],"kind":"struct"},"16:7559:8745":{"crate_id":16,"path":["gimli","read","pubtypes","PubTypesEntry"],"kind":"struct"},"5:5937:4801":{"crate_id":5,"path":["alloc","string","Drain"],"kind":"struct"},"1:7646:10001":{"crate_id":1,"path":["std","backtrace_rs","symbolize","SymbolName"],"kind":"struct"},"17:11595:5526":{"crate_id":17,"path":["object","read","elf","version","VersionIndex"],"kind":"struct"},"16:7727:6476":{"crate_id":16,"path":["gimli","read","str","DebugStr"],"kind":"struct"},"17:11853:23562":{"crate_id":17,"path":["object","read","macho","file","MachOComdat"],"kind":"struct"},"6:5617:7483":{"crate_id":6,"path":["libc","unix","linux_like","linux","ifreq"],"kind":"struct"},"16:7111:8738":{"crate_id":16,"path":["gimli","read","lookup","PubStuffHeader"],"kind":"struct"},"16:6895:6571":{"crate_id":16,"path":["gimli","read","line","FileEntry"],"kind":"struct"},"17:10350:5498":{"crate_id":17,"path":["object","endian","I64Bytes"],"kind":"struct"},"1:9015:10800":{"crate_id":1,"path":["std","sync","mpsc","TrySendError"],"kind":"enum"},"23:345:2679":{"crate_id":23,"path":["quote","quote_spanned"],"kind":"macro"},"11:1603:22398":{"crate_id":11,"path":["hashbrown","rustc_entry","RustcVacantEntry"],"kind":"struct"},"17:14212:5865":{"crate_id":17,"path":["object","macho","DylibModule64"],"kind":"struct"},"17:14475:5907":{"crate_id":17,"path":["object","macho","FvmfileCommand"],"kind":"struct"},"6:4800:7122":{"crate_id":6,"path":["libc","unix","linux_like","linux","passwd"],"kind":"struct"},"17:13089:5622":{"crate_id":17,"path":["object","archive","Header"],"kind":"struct"},"24:4296:3705":{"crate_id":24,"path":["syn","token","Colon"],"kind":"struct"},"2:43617:8894":{"crate_id":2,"path":["core","str","iter","Lines"],"kind":"struct"},"20:702:8554":{"crate_id":20,"path":["proc_macro2","rcvec","RcVecIntoIter"],"kind":"struct"},"2:22295:10619":{"crate_id":2,"path":["core","core_simd","simd","num","sealed","Sealed"],"kind":"trait"},"24:5255:3360":{"crate_id":24,"path":["syn","expr","ExprForLoop"],"kind":"struct"},"24:2957:3665":{"crate_id":24,"path":["syn","token","Abstract"],"kind":"struct"},"2:10992:3419":{"crate_id":2,"path":["core","slice","iter","Iter"],"kind":"struct"},"1:9486:10614":{"crate_id":1,"path":["std","sys","pal","unix","fs","ReadDir"],"kind":"struct"},"18:608:36806":{"crate_id":18,"path":["memchr","memmem","twoway","Suffix"],"kind":"struct"},"2:4718:3588":{"crate_id":2,"path":["core","cell","UnsafeCell"],"kind":"struct"},"2:46565:8353":{"crate_id":2,"path":["core","core_arch","x86","__m128bh"],"kind":"struct"},"6:5407:1117":{"crate_id":6,"path":["libc","unix","linux_like","linux","option"],"kind":"struct"},"21:2576:3605":{"crate_id":21,"path":["proc_macro","diagnostic","Diagnostic"],"kind":"struct"},"2:41274:10668":{"crate_id":2,"path":["core","net","ip_addr","Ipv6MulticastScope"],"kind":"enum"},"24:3314:3679":{"crate_id":24,"path":["syn","token","Impl"],"kind":"struct"},"1:5164:28145":{"crate_id":1,"path":["std","path","fmt","DebugHelper"],"kind":"struct"},"2:3119:5352":{"crate_id":2,"path":["core","ops","arith","Neg"],"kind":"trait"},"1:7821:10531":{"crate_id":1,"path":["std","backtrace","BacktraceStatus"],"kind":"enum"},"24:2577:10619":{"crate_id":24,"path":["syn","spanned","private","Sealed"],"kind":"trait"},"2:22323:4736":{"crate_id":2,"path":["core","core_simd","simd","ptr","const_ptr","SimdConstPtr","from_exposed_addr"],"kind":"function"},"17:14402:5891":{"crate_id":17,"path":["object","macho","BuildToolVersion"],"kind":"struct"},"16:7052:23343":{"crate_id":16,"path":["gimli","read","loclists","LocListIter"],"kind":"struct"},"14:40:1991":{"crate_id":14,"path":["rustc_demangle","v0","Ident"],"kind":"struct"},"5:7100:5171":{"crate_id":5,"path":["alloc","vec","retain_mut","BackshiftOnDrop"],"kind":"struct"},"2:1908:640":{"crate_id":2,"path":["core","mem","drop"],"kind":"function"},"24:153:1985":{"crate_id":24,"path":["syn","Token"],"kind":"macro"},"16:7306:36769":{"crate_id":16,"path":["gimli","read","op","OperationEvaluationResult"],"kind":"enum"},"24:5930:3410":{"crate_id":24,"path":["syn","ty","TypeTuple"],"kind":"struct"},"6:6650:7664":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ptrace_peeksiginfo_args"],"kind":"struct"},"17:15799:6309":{"crate_id":17,"path":["object","pe","NonPagedDebugInfo"],"kind":"struct"},"17:11915:23564":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandVariant"],"kind":"enum"},"16:2936:22471":{"crate_id":16,"path":["gimli","common","SectionId"],"kind":"enum"},"6:5260:7321":{"crate_id":6,"path":["libc","unix","linux_like","linux","regmatch_t"],"kind":"struct"},"11:2542:6809":{"crate_id":11,"path":["hashbrown","raw","bitmask","BitMask"],"kind":"struct"},"17:14912:6075":{"crate_id":17,"path":["object","pe","ImageRomOptionalHeader"],"kind":"struct"},"24:4376:3710":{"crate_id":24,"path":["syn","token","DotDotDot"],"kind":"struct"},"2:11879:4748":{"crate_id":2,"path":["core","slice","raw","from_raw_parts"],"kind":"function"},"2:40054:8847":{"crate_id":2,"path":["core","ffi","c_str","FromBytesUntilNulError"],"kind":"struct"},"6:1490:6970":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreq"],"kind":"struct"},"2:3333:3431":{"crate_id":2,"path":["core","ops","index","IndexMut"],"kind":"trait"},"24:1013:3544":{"crate_id":24,"path":["syn","ext","IdentExt"],"kind":"trait"},"17:15383:6182":{"crate_id":17,"path":["object","pe","ImageResourceDirStringU"],"kind":"struct"},"24:3365:3682":{"crate_id":24,"path":["syn","token","Loop"],"kind":"struct"},"24:89:1985":{"crate_id":24,"path":["syn","token","Token"],"kind":"trait"},"9:424:22317":{"crate_id":9,"path":["miniz_oxide","MZStatus"],"kind":"enum"},"2:41594:4000":{"crate_id":2,"path":["core","panic","panic_info","PanicInfo"],"kind":"struct"},"16:8226:23354":{"crate_id":16,"path":["gimli","read","value","ValueType"],"kind":"enum"},"1:6152:5208":{"crate_id":1,"path":["std","sync","mpmc","list","Channel"],"kind":"struct"},"2:39103:8832":{"crate_id":2,"path":["core","ops","index_range","IndexRange"],"kind":"struct"},"6:1639:7067":{"crate_id":6,"path":["libc","unix","linux_like","in6_rtmsg"],"kind":"struct"},"6:5643:7495":{"crate_id":6,"path":["libc","unix","linux_like","linux","dirent64"],"kind":"struct"},"17:12724:23425":{"crate_id":17,"path":["object","read","FileKind"],"kind":"enum"},"24:4892:2324":{"crate_id":24,"path":["syn","token","Paren"],"kind":"struct"},"1:5513:10772":{"crate_id":1,"path":["std","process","ChildStderr"],"kind":"struct"},"24:5199:3351":{"crate_id":24,"path":["syn","expr","ExprArray"],"kind":"struct"},"17:13606:5737":{"crate_id":17,"path":["object","elf","GnuHashHeader"],"kind":"struct"},"24:5725:203":{"crate_id":24,"path":["syn","path","Path"],"kind":"struct"},"24:95:10619":{"crate_id":24,"path":["syn","token","private","Sealed"],"kind":"trait"},"24:1910:2066":{"crate_id":24,"path":["syn","parse_quote"],"kind":"macro"},"24:5246:3359":{"crate_id":24,"path":["syn","expr","ExprContinue"],"kind":"struct"},"17:12695:23606":{"crate_id":17,"path":["object","read","xcoff","segment","XcoffSegment"],"kind":"struct"},"16:0:3185":{"crate_id":16,"path":["gimli"],"kind":"module"},"16:6782:23340":{"crate_id":16,"path":["gimli","read","line","ColumnType"],"kind":"enum"},"1:4070:10694":{"crate_id":1,"path":["std","os","unix","fs","OpenOptionsExt"],"kind":"trait"},"6:1621:7055":{"crate_id":6,"path":["libc","unix","linux_like","in_pktinfo"],"kind":"struct"},"1:7768:4585":{"crate_id":1,"path":["std","thread","Builder"],"kind":"struct"},"11:1142:22395":{"crate_id":11,"path":["hashbrown","map","VacantEntryRef"],"kind":"struct"},"24:1366:8518":{"crate_id":24,"path":["syn","lit","LitIntRepr"],"kind":"struct"},"24:5487:2650":{"crate_id":24,"path":["syn","generics","TraitBound"],"kind":"struct"},"2:2224:4706":{"crate_id":2,"path":["core","ptr","unique","Unique"],"kind":"struct"},"1:8639:8439":{"crate_id":1,"path":["std","path","Ancestors"],"kind":"struct"},"16:2572:6443":{"crate_id":16,"path":["gimli","common","DebugLocListsBase"],"kind":"struct"},"21:627:3607":{"crate_id":21,"path":["proc_macro","diagnostic","MultiSpan"],"kind":"trait"},"1:3558:3570":{"crate_id":1,"path":["std","io","Write"],"kind":"trait"},"24:5936:3396":{"crate_id":24,"path":["syn","ty","BareFnArg"],"kind":"struct"},"5:7393:4801":{"crate_id":5,"path":["alloc","collections","binary_heap","Drain"],"kind":"struct"},"24:4267:3703":{"crate_id":24,"path":["syn","token","Caret"],"kind":"struct"},"1:2493:3192":{"crate_id":1,"path":["std","io"],"kind":"module"},"16:5006:6511":{"crate_id":16,"path":["gimli","constants","DwLne"],"kind":"struct"},"15:394:22434":{"crate_id":15,"path":["addr2line","DebugFile"],"kind":"enum"},"2:46466:8340":{"crate_id":2,"path":["core","core_arch","x86","__m128d"],"kind":"struct"},"16:3669:5400":{"crate_id":16,"path":["gimli","arch","X86_64"],"kind":"struct"},"5:7570:8790":{"crate_id":5,"path":["alloc","ffi","c_str","NulError"],"kind":"struct"},"6:6447:7556":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","glob64_t"],"kind":"struct"},"6:6409:7537":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","statx_timestamp"],"kind":"struct"},"2:33288:5346":{"crate_id":2,"path":["core","ops","arith","RemAssign"],"kind":"trait"},"17:15410:6189":{"crate_id":17,"path":["object","pe","ImageDynamicRelocationTable"],"kind":"struct"},"1:2668:5188":{"crate_id":1,"path":["std","io","buffered","bufwriter","flush_buf","BufGuard"],"kind":"struct"},"1:8317:8894":{"crate_id":1,"path":["std","io","Lines"],"kind":"struct"},"1:8323:10671":{"crate_id":1,"path":["std","net","tcp","Incoming"],"kind":"struct"},"1:939:10539":{"crate_id":1,"path":["std","collections","hash","map","RawOccupiedEntryMut"],"kind":"struct"},"2:41386:33301":{"crate_id":2,"path":["core","net","parser","AddrKind"],"kind":"enum"},"17:11730:8589":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSubsubsectionIterator"],"kind":"struct"},"24:5803:3393":{"crate_id":24,"path":["syn","restriction","FieldMutability"],"kind":"enum"},"2:45906:8290":{"crate_id":2,"path":["core","core_arch","simd","u64x4"],"kind":"struct"},"2:46056:8296":{"crate_id":2,"path":["core","core_arch","simd","i8x64"],"kind":"struct"},"2:22835:10689":{"crate_id":2,"path":["core","num","error","IntErrorKind"],"kind":"enum"},"6:6629:7652":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","Elf32_Chdr"],"kind":"struct"},"2:9997:3563":{"crate_id":2,"path":["core","fmt","builders","FormatterFn"],"kind":"struct"},"2:43936:16005":{"crate_id":2,"path":["core","str","pattern","StrSearcherImpl"],"kind":"enum"},"5:1426:100":{"crate_id":5,"path":["alloc","collections","btree","map","BTreeMap"],"kind":"struct"},"5:4833:726":{"crate_id":5,"path":["alloc","fmt"],"kind":"module"},"1:4012:10691":{"crate_id":1,"path":["std","os","unix","ffi","os_str","OsStringExt"],"kind":"trait"},"5:6932:4805":{"crate_id":5,"path":["alloc","vec","set_len_on_drop","SetLenOnDrop"],"kind":"struct"},"6:5219:7299":{"crate_id":6,"path":["libc","unix","linux_like","linux","in6_pktinfo"],"kind":"struct"},"5:4073:4801":{"crate_id":5,"path":["alloc","collections","vec_deque","drain","Drain"],"kind":"struct"},"6:5112:7272":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Sym"],"kind":"struct"},"24:4916:2192":{"crate_id":24,"path":["syn","attr","Meta"],"kind":"enum"},"1:3439:3489":{"crate_id":1,"path":["std","io","util","Repeat"],"kind":"struct"},"17:9781:23409":{"crate_id":17,"path":["object","common","BinaryFormat"],"kind":"enum"},"16:6066:8653":{"crate_id":16,"path":["gimli","read","cfi","RegisterRuleIter"],"kind":"struct"},"1:8889:199":{"crate_id":1,"path":["std","process","Output"],"kind":"struct"},"2:46018:8294":{"crate_id":2,"path":["core","core_arch","simd","i64x4"],"kind":"struct"},"1:10998:31926":{"crate_id":1,"path":["std","sys","pal","unix","thread","cgroups","Cgroup"],"kind":"enum"},"1:503:4574":{"crate_id":1,"path":["std","thread","PanicGuard"],"kind":"struct"},"2:43264:8813":{"crate_id":2,"path":["core","slice","iter","RChunks"],"kind":"struct"},"2:41663:3419":{"crate_id":2,"path":["core","result","Iter"],"kind":"struct"},"20:906:1979":{"crate_id":20,"path":["proc_macro2","Group"],"kind":"struct"},"6:7429:7816":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statvfs64"],"kind":"struct"},"24:5242:3358":{"crate_id":24,"path":["syn","expr","ExprConst"],"kind":"struct"},"5:4922:217":{"crate_id":5,"path":["alloc","rc","Rc"],"kind":"struct"},"17:513:23408":{"crate_id":17,"path":["object","read","any","Comdat"],"kind":"struct"},"24:5618:3388":{"crate_id":24,"path":["syn","mac","MacroDelimiter"],"kind":"enum"},"2:13573:117":{"crate_id":2,"path":["core","task","wake","Context"],"kind":"struct"},"2:41751:97":{"crate_id":2,"path":["core","sync","atomic","AtomicU8"],"kind":"struct"},"2:45545:8257":{"crate_id":2,"path":["core","core_arch","simd","u16x8"],"kind":"struct"},"17:256:36757":{"crate_id":17,"path":["object","read","util","DebugByte"],"kind":"struct"},"16:7857:6641":{"crate_id":16,"path":["gimli","read","unit","UnitHeader"],"kind":"struct"},"1:4465:10716":{"crate_id":1,"path":["std","os","unix","net","stream","UnixStream"],"kind":"struct"},"16:4587:6498":{"crate_id":16,"path":["gimli","constants","DwAccess"],"kind":"struct"},"24:4808:3740":{"crate_id":24,"path":["syn","token","SlashEq"],"kind":"struct"},"1:12086:1654":{"crate_id":1,"path":["std","u32"],"kind":"primitive"},"16:5700:6462":{"crate_id":16,"path":["gimli","read","cfi","DebugFrame"],"kind":"struct"},"1:12070:1167":{"crate_id":1,"path":["std","pointer"],"kind":"primitive"},"17:9938:23413":{"crate_id":17,"path":["object","common","RelocationKind"],"kind":"enum"},"6:5212:7298":{"crate_id":6,"path":["libc","unix","linux_like","linux","genlmsghdr"],"kind":"struct"},"2:39115:213":{"crate_id":2,"path":["core","ops","range","RangeFull"],"kind":"struct"},"6:6706:7683":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_mmap_offsets"],"kind":"struct"},"17:16249:6418":{"crate_id":17,"path":["object","xcoff","DwarfAux64"],"kind":"struct"},"1:3314:10658":{"crate_id":1,"path":["std","io","stdio","StdoutLock"],"kind":"struct"},"17:11634:8582":{"crate_id":17,"path":["object","read","elf","version","VerdefIterator"],"kind":"struct"},"24:5314:3347":{"crate_id":24,"path":["syn","expr","ExprReference"],"kind":"struct"},"21:2714:3440":{"crate_id":21,"path":["proc_macro","Delimiter"],"kind":"enum"},"17:13785:5782":{"crate_id":17,"path":["object","macho","FatArch64"],"kind":"struct"},"17:13581:5733":{"crate_id":17,"path":["object","elf","NoteHeader64"],"kind":"struct"},"1:2437:10606":{"crate_id":1,"path":["std","fs","canonicalize"],"kind":"function"},"2:8139:131":{"crate_id":2,"path":["core","iter","traits","double_ended","DoubleEndedIterator"],"kind":"trait"},"6:8012:7910":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","align","clone_args"],"kind":"struct"},"16:7618:6626":{"crate_id":16,"path":["gimli","read","rnglists","RangeLists"],"kind":"struct"},"2:39984:8842":{"crate_id":2,"path":["core","char","ToUppercase"],"kind":"struct"},"2:43467:8886":{"crate_id":2,"path":["core","str","iter","SplitN"],"kind":"struct"},"17:10622:36797":{"crate_id":17,"path":["object","read","any","SectionIteratorInternal"],"kind":"enum"},"2:5102:33657":{"crate_id":2,"path":["core","ffi","sealed_trait","VaArgSafe"],"kind":"trait"},"20:513:3438":{"crate_id":20,"path":["proc_macro2","LexError"],"kind":"struct"},"24:1062:37092":{"crate_id":24,"path":["syn","generics","Lifetimes"],"kind":"struct"},"2:39019:16015":{"crate_id":2,"path":["core","ops","control_flow","ControlFlow"],"kind":"enum"},"11:787:8770":{"crate_id":11,"path":["hashbrown","map","Values"],"kind":"struct"},"17:11702:8587":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSubsectionIterator"],"kind":"struct"},"2:12573:8808":{"crate_id":2,"path":["core","str","iter","SplitInclusive"],"kind":"struct"},"21:182:4442":{"crate_id":21,"path":["proc_macro","bridge","closure","Closure"],"kind":"struct"},"1:11089:8461":{"crate_id":1,"path":["std","sys","personality","dwarf","eh","EHContext"],"kind":"struct"},"2:9857:10095":{"crate_id":2,"path":["core","fmt","builders","PadAdapterState"],"kind":"struct"},"2:4922:16028":{"crate_id":2,"path":["core","char","REPLACEMENT_CHARACTER"],"kind":"constant"},"6:553:6947":{"crate_id":6,"path":["libc","unix","linger"],"kind":"struct"},"5:7622:5156":{"crate_id":5,"path":["alloc","rc","UniqueRc"],"kind":"struct"},"2:10849:239":{"crate_id":2,"path":["core","slice","index","SliceIndex"],"kind":"trait"},"5:5867:250":{"crate_id":5,"path":["alloc","string","ToString"],"kind":"trait"},"16:860:36756":{"crate_id":16,"path":["gimli","read","endian_slice","DebugBytes"],"kind":"struct"},"24:3773:3696":{"crate_id":24,"path":["syn","token","Virtual"],"kind":"struct"},"2:42544:3564":{"crate_id":2,"path":["core","fmt","Arguments"],"kind":"struct"},"2:39280:8052":{"crate_id":2,"path":["core","array","TryFromSliceError"],"kind":"struct"},"1:10686:8953":{"crate_id":1,"path":["std","sys","pal","unix","fs","FileAttr"],"kind":"struct"},"16:4352:6492":{"crate_id":16,"path":["gimli","constants","DwAt"],"kind":"struct"},"24:1778:3546":{"crate_id":24,"path":["syn","parse","ParseBuffer"],"kind":"struct"},"1:2265:10598":{"crate_id":1,"path":["std","fs","DirEntry"],"kind":"struct"},"11:883:10541":{"crate_id":11,"path":["hashbrown","map","RawEntryBuilder"],"kind":"struct"},"16:3029:5395":{"crate_id":16,"path":["gimli","arch","Arm"],"kind":"struct"},"2:45566:8258":{"crate_id":2,"path":["core","core_arch","simd","u32x4"],"kind":"struct"},"2:13449:16043":{"crate_id":2,"path":["core","future","poll_fn","PollFn"],"kind":"struct"},"16:7428:23345":{"crate_id":16,"path":["gimli","read","op","EvaluationResult"],"kind":"enum"},"2:11802:15976":{"crate_id":2,"path":["core","slice","iter","ChunkBy"],"kind":"struct"},"1:11425:8968":{"crate_id":1,"path":["std","sys_common","wtf8","EncodeWide"],"kind":"struct"},"24:5783:2546":{"crate_id":24,"path":["syn","path","QSelf"],"kind":"struct"},"17:13015:5578":{"crate_id":17,"path":["object","read","Relocation"],"kind":"struct"},"1:867:8769":{"crate_id":1,"path":["std","collections","hash","map","Keys"],"kind":"struct"},"17:12900:5610":{"crate_id":17,"path":["object","read","ObjectMapEntry"],"kind":"struct"},"2:9665:85":{"crate_id":2,"path":["core","sync","atomic","AtomicBool"],"kind":"struct"},"16:8301:6683":{"crate_id":16,"path":["gimli","read","StoreOnHeap"],"kind":"struct"},"16:7604:6475":{"crate_id":16,"path":["gimli","read","rnglists","DebugRngLists"],"kind":"struct"},"1:4233:10717":{"crate_id":1,"path":["std","os","unix","net","ancillary","ScmRights"],"kind":"struct"},"16:7888:8748":{"crate_id":16,"path":["gimli","read","unit","DebuggingInformationEntry"],"kind":"struct"},"6:5382:7369":{"crate_id":6,"path":["libc","unix","linux_like","linux","file_clone_range"],"kind":"struct"},"16:2708:6449":{"crate_id":16,"path":["gimli","common","DebugRngListsBase"],"kind":"struct"},"2:43322:8876":{"crate_id":2,"path":["core","str","error","ParseBoolError"],"kind":"struct"},"24:3161:3672":{"crate_id":24,"path":["syn","token","Do"],"kind":"struct"},"6:8029:7921":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","align","sem_t"],"kind":"struct"},"1:10801:28138":{"crate_id":1,"path":["std","sys","pal","unix","process","process_common","ProgramKind"],"kind":"enum"},"2:40251:3533":{"crate_id":2,"path":["core","iter","adapters","intersperse","Intersperse"],"kind":"struct"},"2:46446:8338":{"crate_id":2,"path":["core","core_arch","x86","__m128i"],"kind":"struct"},"24:3790:3697":{"crate_id":24,"path":["syn","token","Where"],"kind":"struct"},"14:0:3183":{"crate_id":14,"path":["rustc_demangle"],"kind":"module"},"24:5003:2331":{"crate_id":24,"path":["syn","expr","Expr"],"kind":"enum"},"5:1724:5125":{"crate_id":5,"path":["alloc","collections","btree","map","drop","DropGuard"],"kind":"struct"},"14:165:22405":{"crate_id":14,"path":["rustc_demangle","DemangleStyle"],"kind":"enum"},"2:30266:4658":{"crate_id":2,"path":["core","mem","maybe_uninit","MaybeUninit"],"kind":"union"},"5:3871:4799":{"crate_id":5,"path":["alloc","collections","linked_list","ExtractIf"],"kind":"struct"},"17:15023:6093":{"crate_id":17,"path":["object","pe","AnonObjectHeaderV2"],"kind":"struct"},"5:3208:101":{"crate_id":5,"path":["alloc","collections","btree","set","BTreeSet"],"kind":"struct"},"17:12362:8603":{"crate_id":17,"path":["object","read","pe","import","ImportThunkList"],"kind":"struct"},"2:22804:8824":{"crate_id":2,"path":["core","num","fmt","Formatted"],"kind":"struct"},"16:6991:36723":{"crate_id":16,"path":["gimli","read","loclists","LocListsFormat"],"kind":"enum"},"2:7530:3515":{"crate_id":2,"path":["core","iter","adapters","zip","TrustedRandomAccessNoCoerce"],"kind":"trait"},"2:41302:2058":{"crate_id":2,"path":["core","net","ip_addr","fmt","Span"],"kind":"struct"},"24:3807:3698":{"crate_id":24,"path":["syn","token","While"],"kind":"struct"},"16:8118:8752":{"crate_id":16,"path":["gimli","read","unit","EntriesRaw"],"kind":"struct"},"16:4771:6503":{"crate_id":16,"path":["gimli","constants","DwId"],"kind":"struct"},"2:33229:5345":{"crate_id":2,"path":["core","ops","arith","DivAssign"],"kind":"trait"},"5:7381:8787":{"crate_id":5,"path":["alloc","collections","binary_heap","IntoIterSorted"],"kind":"struct"},"2:10661:5192":{"crate_id":2,"path":["core","slice","sort","merge_sort","RunVec"],"kind":"struct"},"17:13292:5669":{"crate_id":17,"path":["object","elf","CompressionHeader32"],"kind":"struct"},"24:3008:3668":{"crate_id":24,"path":["syn","token","Auto"],"kind":"struct"},"17:11115:23443":{"crate_id":17,"path":["object","read","coff","section","CoffSectionIterator"],"kind":"struct"},"5:1516:8769":{"crate_id":5,"path":["alloc","collections","btree","map","Keys"],"kind":"struct"},"1:5582:10773":{"crate_id":1,"path":["std","process","Stdio"],"kind":"struct"},"17:14356:5884":{"crate_id":17,"path":["object","macho","EncryptionInfoCommand64"],"kind":"struct"},"24:5378:58":{"crate_id":24,"path":["syn","expr","parsing","kw","builtin"],"kind":"struct"},"17:13766:5777":{"crate_id":17,"path":["object","macho","FatHeader"],"kind":"struct"},"6:7339:7786":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","flock64"],"kind":"struct"},"1:11024:8452":{"crate_id":1,"path":["std","sys","pal","unix","time","SystemTime"],"kind":"struct"},"2:46527:8345":{"crate_id":2,"path":["core","core_arch","x86","__m512"],"kind":"struct"},"5:7473:3418":{"crate_id":5,"path":["alloc","collections","linked_list","IntoIter"],"kind":"struct"},"2:22309:10917":{"crate_id":2,"path":["core","core_simd","simd","ptr","const_ptr","SimdConstPtr"],"kind":"trait"},"16:7379:36767":{"crate_id":16,"path":["gimli","read","op","EvaluationState"],"kind":"enum"},"16:5415:6517":{"crate_id":16,"path":["gimli","read","util","sealed","CapacityFull"],"kind":"struct"},"1:10357:10775":{"crate_id":1,"path":["std","sys","pal","unix","process","process_common","CommandArgs"],"kind":"struct"},"17:10661:23419":{"crate_id":17,"path":["object","read","any","ComdatIterator"],"kind":"struct"},"17:10457:139":{"crate_id":17,"path":["object","read","any","File"],"kind":"enum"},"17:14260:5870":{"crate_id":17,"path":["object","macho","TwolevelHint"],"kind":"struct"},"20:929:2385":{"crate_id":20,"path":["proc_macro2","Punct"],"kind":"struct"},"1:12066:1049":{"crate_id":1,"path":["std","never"],"kind":"primitive"},"17:12530:23605":{"crate_id":17,"path":["object","read","xcoff","section","XcoffSectionIterator"],"kind":"struct"},"17:10818:23421":{"crate_id":17,"path":["object","read","any","SymbolIterator"],"kind":"struct"},"2:10457:8804":{"crate_id":2,"path":["core","hash","BuildHasherDefault"],"kind":"struct"},"21:1045:2058":{"crate_id":21,"path":["proc_macro","bridge","client","Span"],"kind":"struct"},"17:11405:23473":{"crate_id":17,"path":["object","read","elf","section","ElfSection"],"kind":"struct"},"2:4698:3587":{"crate_id":2,"path":["core","cell","RefMut"],"kind":"struct"},"11:2151:10543":{"crate_id":11,"path":["hashbrown","set","VacantEntry"],"kind":"struct"},"2:2781:10619":{"crate_id":2,"path":["core","convert","num","private","Sealed"],"kind":"trait"},"5:1544:10092":{"crate_id":5,"path":["alloc","collections","btree","map","IntoKeys"],"kind":"struct"},"1:12018:9731":{"crate_id":1,"path":["std","backtrace_rs","symbolize","gimli","parse_running_mmaps","MapsEntry"],"kind":"struct"},"2:4644:3585":{"crate_id":2,"path":["core","cell","Ref"],"kind":"struct"},"6:5502:7436":{"crate_id":6,"path":["libc","unix","linux_like","linux","tls12_crypto_info_aes_gcm_256"],"kind":"struct"},"24:1094:37097":{"crate_id":24,"path":["syn","generics","ConstParams"],"kind":"struct"},"17:10720:36783":{"crate_id":17,"path":["object","read","any","ComdatSectionIteratorInternal"],"kind":"enum"},"6:1692:7095":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_un"],"kind":"struct"},"1:5835:10789":{"crate_id":1,"path":["std","sync","barrier","BarrierWaitResult"],"kind":"struct"},"12:0:3182":{"crate_id":12,"path":["rustc_std_workspace_alloc"],"kind":"module"},"16:6263:8683":{"crate_id":16,"path":["gimli","read","cfi","PointerEncodingParameters"],"kind":"struct"},"6:4837:7150":{"crate_id":6,"path":["libc","unix","linux_like","linux","signalfd_siginfo"],"kind":"struct"},"2:41606:4723":{"crate_id":2,"path":["core","panicking","AssertKind"],"kind":"enum"},"17:403:23407":{"crate_id":17,"path":["object","read","any","Segment"],"kind":"struct"},"2:37751:5349":{"crate_id":2,"path":["core","ops","bit","BitOrAssign"],"kind":"trait"},"1:9164:187":{"crate_id":1,"path":["std","sync","mutex","MutexGuard"],"kind":"struct"},"2:4330:4700":{"crate_id":2,"path":["core","async_iter","async_iter","AsyncIterator"],"kind":"trait"},"2:22586:8818":{"crate_id":2,"path":["core","num","bignum","tests","Big8x3"],"kind":"struct"},"6:7306:7763":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","sigaction"],"kind":"struct"},"2:40163:3507":{"crate_id":2,"path":["core","iter","adapters","cloned","Cloned"],"kind":"struct"},"6:4811:7130":{"crate_id":6,"path":["libc","unix","linux_like","linux","spwd"],"kind":"struct"},"16:7132:8739":{"crate_id":16,"path":["gimli","read","lookup","PubStuffParser"],"kind":"struct"},"24:1299:2068":{"crate_id":24,"path":["syn","lifetime","Lifetime"],"kind":"struct"},"1:10462:10657":{"crate_id":1,"path":["std","sys","pal","unix","stdio","Stdout"],"kind":"struct"},"17:12792:5457":{"crate_id":17,"path":["object","read","SectionIndex"],"kind":"struct"},"2:1747:2544":{"crate_id":2,"path":["core","mem"],"kind":"module"},"24:4697:3732":{"crate_id":24,"path":["syn","token","Question"],"kind":"struct"},"5:4268:5149":{"crate_id":5,"path":["alloc","collections","vec_deque","into_iter","try_rfold","Guard"],"kind":"struct"},"2:30809:196":{"crate_id":2,"path":["core","cmp","Ordering"],"kind":"enum"},"2:4448:3596":{"crate_id":2,"path":["core","cell","once","OnceCell"],"kind":"struct"},"21:2585:8552":{"crate_id":21,"path":["proc_macro","diagnostic","Children"],"kind":"struct"},"17:3264:23527":{"crate_id":17,"path":["object","read","macho","section","MachOSectionIterator"],"kind":"struct"},"18:643:5369":{"crate_id":18,"path":["memchr","memmem","x86","avx","nostd","Forward"],"kind":"struct"},"17:13946:5805":{"crate_id":17,"path":["object","macho","Fvmlib"],"kind":"struct"},"5:5445:15968":{"crate_id":5,"path":["alloc","slice","Concat"],"kind":"trait"},"6:4909:7195":{"crate_id":6,"path":["libc","unix","linux_like","linux","sembuf"],"kind":"struct"},"1:3567:33258":{"crate_id":1,"path":["std","io","Write","write_fmt","Adapter"],"kind":"struct"},"16:2684:6448":{"crate_id":16,"path":["gimli","common","RangeListsOffset"],"kind":"struct"},"17:11227:23441":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdat"],"kind":"struct"},"6:5588:7464":{"crate_id":6,"path":["libc","unix","linux_like","linux","mq_attr"],"kind":"struct"},"17:11877:5529":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandIterator"],"kind":"struct"},"10:44:6816":{"crate_id":10,"path":["adler","Adler32"],"kind":"struct"},"1:1862:10561":{"crate_id":1,"path":["std","env","SplitPaths"],"kind":"struct"},"24:2286:3418":{"crate_id":24,"path":["syn","punctuated","IntoIter"],"kind":"struct"},"2:39099:2602":{"crate_id":2,"path":["core","ops","index","Index"],"kind":"trait"},"2:45997:8293":{"crate_id":2,"path":["core","core_arch","simd","i32x8"],"kind":"struct"},"17:15582:6249":{"crate_id":17,"path":["object","pe","ImageHotPatchBase"],"kind":"struct"},"2:45502:8247":{"crate_id":2,"path":["core","core_arch","simd","f64x1"],"kind":"struct"},"6:5370:7365":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlmsgerr"],"kind":"struct"},"24:5224:3356":{"crate_id":24,"path":["syn","expr","ExprBreak"],"kind":"struct"},"17:12443:5581":{"crate_id":17,"path":["object","read","pe","resource","ResourceDirectory"],"kind":"struct"},"24:5779:3392":{"crate_id":24,"path":["syn","path","ParenthesizedGenericArguments"],"kind":"struct"},"1:1585:4799":{"crate_id":1,"path":["std","collections","hash","set","ExtractIf"],"kind":"struct"},"2:2038:4750":{"crate_id":2,"path":["core","ptr","metadata","DynMetadata"],"kind":"struct"},"24:5940:3397":{"crate_id":24,"path":["syn","ty","BareVariadic"],"kind":"struct"},"2:12289:9989":{"crate_id":2,"path":["core","slice","GetManyMutError"],"kind":"struct"},"2:12305:15993":{"crate_id":2,"path":["core","str","converts","from_utf8"],"kind":"function"},"18:96:27659":{"crate_id":18,"path":["memchr","memchr","iter","Memchr2"],"kind":"struct"},"16:7321:3999":{"crate_id":16,"path":["gimli","read","op","Location"],"kind":"enum"},"1:307:1602":{"crate_id":1,"path":["std","thread"],"kind":"module"},"24:4680:3731":{"crate_id":24,"path":["syn","token","Pound"],"kind":"struct"},"6:532:6936":{"crate_id":6,"path":["libc","unix","iovec"],"kind":"struct"},"2:11317:15984":{"crate_id":2,"path":["core","slice","iter","RSplitNMut"],"kind":"struct"},"2:3529:35010":{"crate_id":2,"path":["core","ops","try_trait","NeverShortCircuitResidual"],"kind":"enum"},"16:6480:6460":{"crate_id":16,"path":["gimli","read","aranges","DebugAranges"],"kind":"struct"},"17:15301:6159":{"crate_id":17,"path":["object","pe","ImageTlsDirectory32"],"kind":"struct"},"2:22742:33297":{"crate_id":2,"path":["core","num","flt2dec","decoder","FullDecoded"],"kind":"enum"},"2:10200:3565":{"crate_id":2,"path":["core","fmt","Octal"],"kind":"trait"},"17:14341:5880":{"crate_id":17,"path":["object","macho","EncryptionInfoCommand32"],"kind":"struct"},"1:356:4596":{"crate_id":1,"path":["std","thread","scoped","Scope"],"kind":"struct"},"2:3063:2522":{"crate_id":2,"path":["core","marker","PhantomData"],"kind":"struct"},"6:586:6964":{"crate_id":6,"path":["libc","unix","protoent"],"kind":"struct"},"18:689:8564":{"crate_id":18,"path":["memchr","memmem","FinderRev"],"kind":"struct"},"1:11419:8967":{"crate_id":1,"path":["std","sys_common","wtf8","Wtf8CodePoints"],"kind":"struct"},"20:935:2057":{"crate_id":20,"path":["proc_macro2","Spacing"],"kind":"enum"},"24:3382:2376":{"crate_id":24,"path":["syn","token","Macro"],"kind":"struct"},"6:570:6955":{"crate_id":6,"path":["libc","unix","tms"],"kind":"struct"},"5:1169:35411":{"crate_id":5,"path":["alloc","collections","btree","borrow","DormantMutRef"],"kind":"struct"},"1:4826:10709":{"crate_id":1,"path":["std","os","fd","raw","IntoRawFd"],"kind":"trait"},"6:5244:7313":{"crate_id":6,"path":["libc","unix","linux_like","linux","fanotify_response"],"kind":"struct"},"6:4971:7220":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_envelope"],"kind":"struct"},"2:42704:8868":{"crate_id":2,"path":["core","hash","sip","SipHasher13"],"kind":"struct"},"16:5756:23330":{"crate_id":16,"path":["gimli","read","cfi","EhHdrTableIter"],"kind":"struct"},"17:10887:36781":{"crate_id":17,"path":["object","read","any","DynamicRelocationIteratorInternal"],"kind":"enum"},"1:6726:233":{"crate_id":1,"path":["std","sync","rwlock","RwLock"],"kind":"struct"},"1:7486:31730":{"crate_id":1,"path":["std","panicking","Hook"],"kind":"enum"},"24:3178:3673":{"crate_id":24,"path":["syn","token","Dyn"],"kind":"struct"},"5:2307:8783":{"crate_id":5,"path":["alloc","collections","btree","navigate","LazyLeafRange"],"kind":"struct"},"15:306:22425":{"crate_id":15,"path":["addr2line","LocationRangeUnitIter"],"kind":"struct"},"20:740:1991":{"crate_id":20,"path":["proc_macro2","fallback","Ident"],"kind":"struct"},"24:3637:252":{"crate_id":24,"path":["syn","token","Trait"],"kind":"struct"},"6:6379:7512":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","statx"],"kind":"struct"},"2:40094:10597":{"crate_id":2,"path":["core","ffi","VaList"],"kind":"struct"},"2:40727:3493":{"crate_id":2,"path":["core","iter","sources","repeat_with","RepeatWith"],"kind":"struct"},"17:12808:5607":{"crate_id":17,"path":["object","read","SymbolIndex"],"kind":"struct"},"6:6756:7700":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_statistics_v1"],"kind":"struct"},"11:351:36700":{"crate_id":11,"path":["hashbrown","raw","FullBucketsIndices"],"kind":"struct"},"2:21436:34260":{"crate_id":2,"path":["core","core_simd","swizzle","rotate_elements_right","Rotate"],"kind":"struct"},"16:6466:6534":{"crate_id":16,"path":["gimli","read","abbrev","AttributeSpecification"],"kind":"struct"},"2:22533:8817":{"crate_id":2,"path":["core","num","bignum","Big32x40"],"kind":"struct"},"2:45259:8224":{"crate_id":2,"path":["core","core_arch","simd","u8x2"],"kind":"struct"},"1:5721:8938":{"crate_id":1,"path":["std","sync","mpsc","SyncSender"],"kind":"struct"},"2:10196:121":{"crate_id":2,"path":["core","fmt","macros","Debug"],"kind":"proc_derive"},"5:3244:8772":{"crate_id":5,"path":["alloc","collections","btree","set","Difference"],"kind":"struct"},"18:765:27670":{"crate_id":18,"path":["memchr","memmem","SearcherRevKind"],"kind":"enum"},"2:2652:202":{"crate_id":2,"path":["core","cmp","PartialOrd"],"kind":"trait"},"2:21678:10829":{"crate_id":2,"path":["core","core_simd","masks","MaskElement"],"kind":"trait"},"5:4422:264":{"crate_id":5,"path":["alloc","collections","vec_deque","VecDeque"],"kind":"struct"},"2:9670:92":{"crate_id":2,"path":["core","sync","atomic","AtomicPtr"],"kind":"struct"},"1:4997:10750":{"crate_id":1,"path":["std","os","net","linux_ext","tcp","TcpStreamExt"],"kind":"trait"},"17:14847:6034":{"crate_id":17,"path":["object","pe","MaskedRichHeaderEntry"],"kind":"struct"},"6:5515:7437":{"crate_id":6,"path":["libc","unix","linux_like","linux","tls12_crypto_info_chacha20_poly1305"],"kind":"struct"},"16:6385:6530":{"crate_id":16,"path":["gimli","read","reader","ReaderOffsetId"],"kind":"struct"},"1:7686:5223":{"crate_id":1,"path":["std","backtrace_rs","print","BacktraceFrameFmt"],"kind":"struct"},"2:10417:157":{"crate_id":2,"path":["core","hash","Hasher"],"kind":"trait"},"2:39871:8835":{"crate_id":2,"path":["core","async_iter","from_iter","FromIter"],"kind":"struct"},"14:220:6761":{"crate_id":14,"path":["rustc_demangle","SizeLimitExhausted"],"kind":"struct"},"2:45758:8268":{"crate_id":2,"path":["core","core_arch","simd","m16x8"],"kind":"struct"},"17:15957:6334":{"crate_id":17,"path":["object","xcoff","AuxHeader32"],"kind":"struct"},"13:226:6808":{"crate_id":13,"path":["std_detect","detect","cache","Initializer"],"kind":"struct"},"11:2304:8740":{"crate_id":11,"path":["hashbrown","table","Entry"],"kind":"enum"},"2:12757:3828":{"crate_id":2,"path":["core","str","pattern"],"kind":"module"},"17:15222:6139":{"crate_id":17,"path":["object","pe","ImageArchiveMemberHeader"],"kind":"struct"},"17:437:5443":{"crate_id":17,"path":["object","read","any","Section"],"kind":"struct"},"17:2234:23494":{"crate_id":17,"path":["object","read","elf","relocation","ElfSectionRelocationIterator"],"kind":"struct"},"1:3396:10646":{"crate_id":1,"path":["std","io","stdio","IsTerminal"],"kind":"trait"},"24:5518:2648":{"crate_id":24,"path":["syn","generics","PredicateType"],"kind":"struct"},"2:7529:3514":{"crate_id":2,"path":["core","iter","adapters","zip","TrustedRandomAccess"],"kind":"trait"},"2:45583:8259":{"crate_id":2,"path":["core","core_arch","simd","u64x2"],"kind":"struct"},"17:10018:23393":{"crate_id":17,"path":["object","common","FileFlags"],"kind":"enum"},"5:7413:8788":{"crate_id":5,"path":["alloc","collections","btree","map","UnorderedKeyError"],"kind":"struct"},"16:2998:6480":{"crate_id":16,"path":["gimli","common","DwoId"],"kind":"struct"},"1:12067:454":{"crate_id":1,"path":["std","char"],"kind":"primitive"},"1:6331:5213":{"crate_id":1,"path":["std","sync","mpmc","Sender"],"kind":"struct"},"24:5899:3401":{"crate_id":24,"path":["syn","ty","TypeImplTrait"],"kind":"struct"},"1:10465:10653":{"crate_id":1,"path":["std","sys","pal","unix","stdio","Stderr"],"kind":"struct"},"18:698:8565":{"crate_id":18,"path":["memchr","memmem","FinderBuilder"],"kind":"struct"},"2:44087:8927":{"crate_id":2,"path":["core","str","CharEscapeDefault"],"kind":"struct"},"2:3283:3593":{"crate_id":2,"path":["core","ops","deref","DerefMut"],"kind":"trait"},"24:4963:3336":{"crate_id":24,"path":["syn","data","FieldsNamed"],"kind":"struct"},"2:41442:8193":{"crate_id":2,"path":["core","net","socket_addr","SocketAddrV4"],"kind":"struct"},"6:8328:7940":{"crate_id":6,"path":["libc","unix","linux_like","linux","canxl_frame"],"kind":"struct"},"5:669:9984":{"crate_id":5,"path":["alloc","boxed","from","StringError"],"kind":"struct"},"24:4905:3322":{"crate_id":24,"path":["syn","attr","Attribute"],"kind":"struct"},"2:2819:256":{"crate_id":2,"path":["core","convert","TryFrom"],"kind":"trait"},"6:6657:7665":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_entry"],"kind":"struct"},"21:2366:2678":{"crate_id":21,"path":["proc_macro","bridge","Literal"],"kind":"struct"},"6:6900:7745":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","msqid_ds"],"kind":"struct"},"6:7452:7823":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_fpxreg"],"kind":"struct"},"2:42065:98":{"crate_id":2,"path":["core","sync","atomic","AtomicUsize"],"kind":"struct"},"16:3329:6483":{"crate_id":16,"path":["gimli","arch","LoongArch"],"kind":"struct"},"24:3297:3678":{"crate_id":24,"path":["syn","token","If"],"kind":"struct"},"6:8006:7908":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","align","max_align_t"],"kind":"struct"},"20:891:2059":{"crate_id":20,"path":["proc_macro2","TokenTree"],"kind":"enum"},"24:2430:2615":{"crate_id":24,"path":["syn","punctuated","Pair"],"kind":"enum"},"2:45598:8260":{"crate_id":2,"path":["core","core_arch","simd","i8x16"],"kind":"struct"},"20:808:36840":{"crate_id":20,"path":["proc_macro2","imp","TokenTreeIter"],"kind":"enum"},"20:725:2058":{"crate_id":20,"path":["proc_macro2","fallback","Span"],"kind":"struct"},"2:41258:8186":{"crate_id":2,"path":["core","net","ip_addr","Ipv6Addr"],"kind":"struct"},"24:5919:3407":{"crate_id":24,"path":["syn","ty","TypeReference"],"kind":"struct"},"2:5182:867":{"crate_id":2,"path":["core","iter"],"kind":"module"},"1:12080:807":{"crate_id":1,"path":["std","i16"],"kind":"primitive"},"2:21680:7957":{"crate_id":2,"path":["core","core_simd","masks","Mask"],"kind":"struct"},"2:13591:5197":{"crate_id":2,"path":["core","task","wake","Waker"],"kind":"struct"},"2:3100:4350":{"crate_id":2,"path":["core","marker","FnPtr"],"kind":"trait"},"6:4992:7231":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_condition_effect"],"kind":"struct"},"24:4313:3706":{"crate_id":24,"path":["syn","token","Comma"],"kind":"struct"},"24:4453:3715":{"crate_id":24,"path":["syn","token","Gt"],"kind":"struct"},"11:2383:3419":{"crate_id":11,"path":["hashbrown","table","Iter"],"kind":"struct"},"6:6821:7719":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","utmpx"],"kind":"struct"},"17:10573:36796":{"crate_id":17,"path":["object","read","any","SegmentInternal"],"kind":"enum"},"16:7168:8448":{"crate_id":16,"path":["gimli","read","op","Operation"],"kind":"enum"},"24:3450:3685":{"crate_id":24,"path":["syn","token","Mut"],"kind":"struct"},"17:11063:23450":{"crate_id":17,"path":["object","read","coff","file","CoffFile"],"kind":"struct"},"2:39950:8834":{"crate_id":2,"path":["core","char","EscapeDefault"],"kind":"struct"},"17:15333:6167":{"crate_id":17,"path":["object","pe","ImageBoundForwarderRef"],"kind":"struct"},"2:3499:253":{"crate_id":2,"path":["core","ops","try_trait","Try"],"kind":"trait"},"6:7359:7792":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stack_t"],"kind":"struct"},"21:2675:2058":{"crate_id":21,"path":["proc_macro","Span"],"kind":"struct"},"1:4393:10722":{"crate_id":1,"path":["std","os","unix","net","listener","UnixListener"],"kind":"struct"},"17:16032:5658":{"crate_id":17,"path":["object","xcoff","SectionHeader32"],"kind":"struct"},"24:592:3428":{"crate_id":24,"path":["syn","drops","NoDrop"],"kind":"struct"},"2:2887:126":{"crate_id":2,"path":["core","default","Default"],"kind":"trait"},"21:139:4835":{"crate_id":21,"path":["proc_macro","bridge","client","Client"],"kind":"struct"},"16:2528:6441":{"crate_id":16,"path":["gimli","common","DebugLineStrOffset"],"kind":"struct"},"2:13424:205":{"crate_id":2,"path":["core","future","pending","Pending"],"kind":"struct"},"17:14298:5874":{"crate_id":17,"path":["object","macho","RpathCommand"],"kind":"struct"},"24:5220:3355":{"crate_id":24,"path":["syn","expr","ExprBlock"],"kind":"struct"},"6:4979:7225":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_constant_effect"],"kind":"struct"},"17:12213:23595":{"crate_id":17,"path":["object","read","pe","file","PeComdatSectionIterator"],"kind":"struct"},"1:8382:10723":{"crate_id":1,"path":["std","os","unix","net","ancillary","AncillaryError"],"kind":"enum"},"16:4940:6509":{"crate_id":16,"path":["gimli","constants","DwDefaulted"],"kind":"struct"},"17:16212:6412":{"crate_id":17,"path":["object","xcoff","BlockAux64"],"kind":"struct"},"24:1600:3561":{"crate_id":24,"path":["syn","lookahead","Peek"],"kind":"trait"},"2:40066:10584":{"crate_id":2,"path":["core","ffi","c_char"],"kind":"type_alias"},"17:12388:8604":{"crate_id":17,"path":["object","read","pe","import","DelayLoadImportTable"],"kind":"struct"},"2:10212:3572":{"crate_id":2,"path":["core","fmt","UpperExp"],"kind":"trait"},"17:13387:5685":{"crate_id":17,"path":["object","elf","Rel32"],"kind":"struct"},"2:46455:8339":{"crate_id":2,"path":["core","core_arch","x86","__m128"],"kind":"struct"},"2:1821:5149":{"crate_id":2,"path":["core","mem","maybe_uninit","clone_from_slice","Guard"],"kind":"struct"},"20:708:251":{"crate_id":20,"path":["proc_macro2","fallback","TokenStream"],"kind":"struct"},"24:5363:2014":{"crate_id":24,"path":["syn","expr","Member"],"kind":"enum"},"24:4982:1996":{"crate_id":24,"path":["syn","derive","Data"],"kind":"enum"},"17:13674:5741":{"crate_id":17,"path":["object","macho","DyldCacheHeader"],"kind":"struct"},"2:40191:3518":{"crate_id":2,"path":["core","iter","adapters","enumerate","Enumerate"],"kind":"struct"},"17:14038:5819":{"crate_id":17,"path":["object","macho","SubLibraryCommand"],"kind":"struct"},"16:6532:8692":{"crate_id":16,"path":["gimli","read","aranges","ArangeEntryIter"],"kind":"struct"},"22:0:3308":{"crate_id":22,"path":["unicode_ident"],"kind":"module"},"5:7583:33284":{"crate_id":5,"path":["alloc","ffi","c_str","FromBytesWithNulErrorKind"],"kind":"enum"},"2:43567:8892":{"crate_id":2,"path":["core","str","iter","Matches"],"kind":"struct"},"1:7979:140":{"crate_id":1,"path":["std","fs","FileType"],"kind":"struct"},"11:2536:1979":{"crate_id":11,"path":["hashbrown","raw","sse2","Group"],"kind":"struct"},"2:3141:4703":{"crate_id":2,"path":["core","ops","async_function","AsyncFnOnce"],"kind":"trait"},"2:43283:8814":{"crate_id":2,"path":["core","slice","iter","RChunksExact"],"kind":"struct"},"16:7098:8735":{"crate_id":16,"path":["gimli","read","lookup","LookupEntryIter"],"kind":"struct"},"17:14463:5906":{"crate_id":17,"path":["object","macho","IdentCommand"],"kind":"struct"},"17:16121:6390":{"crate_id":17,"path":["object","xcoff","FileAux64"],"kind":"struct"},"2:41554:3418":{"crate_id":2,"path":["core","option","IntoIter"],"kind":"struct"},"17:12711:138":{"crate_id":17,"path":["object","read","Error"],"kind":"struct"},"2:15:2820":{"crate_id":2,"path":["core","write"],"kind":"macro"},"2:2898:138":{"crate_id":2,"path":["core","error","Error"],"kind":"trait"},"2:12783:15989":{"crate_id":2,"path":["core","str","pattern","DoubleEndedSearcher"],"kind":"trait"},"6:5336:7353":{"crate_id":6,"path":["libc","unix","linux_like","linux","seccomp_notif"],"kind":"struct"},"16:7355:6607":{"crate_id":16,"path":["gimli","read","op","Piece"],"kind":"struct"},"11:1107:22394":{"crate_id":11,"path":["hashbrown","map","OccupiedEntryRef"],"kind":"struct"},"16:3842:6488":{"crate_id":16,"path":["gimli","constants","DwUt"],"kind":"struct"},"2:41242:8184":{"crate_id":2,"path":["core","net","ip_addr","Ipv4Addr"],"kind":"struct"},"24:4400:135":{"crate_id":24,"path":["syn","token","Eq"],"kind":"struct"},"17:13553:5723":{"crate_id":17,"path":["object","elf","Vernaux"],"kind":"struct"},"2:45516:8248":{"crate_id":2,"path":["core","core_arch","simd","u8x16"],"kind":"struct"},"24:1363:8517":{"crate_id":24,"path":["syn","lit","LitRepr"],"kind":"struct"},"24:1110:3379":{"crate_id":24,"path":["syn","generics","ImplGenerics"],"kind":"struct"},"2:43531:8890":{"crate_id":2,"path":["core","str","iter","RMatchIndices"],"kind":"struct"},"17:13497:5705":{"crate_id":17,"path":["object","elf","Versym"],"kind":"struct"},"11:328:8766":{"crate_id":11,"path":["hashbrown","raw","RawIter"],"kind":"struct"},"17:16165:6401":{"crate_id":17,"path":["object","xcoff","FunAux32"],"kind":"struct"},"21:971:251":{"crate_id":21,"path":["proc_macro","bridge","client","TokenStream"],"kind":"struct"},"8:0:3178":{"crate_id":8,"path":["cfg_if"],"kind":"module"},"13:109:36711":{"crate_id":13,"path":["std_detect","detect","arch","x86","Feature"],"kind":"enum"},"2:44326:9720":{"crate_id":2,"path":["core","task","wake","RawWaker"],"kind":"struct"},"6:6471:7565":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","cmsghdr"],"kind":"struct"},"6:5536:7443":{"crate_id":6,"path":["libc","unix","linux_like","linux","dirent"],"kind":"struct"},"16:4976:6510":{"crate_id":16,"path":["gimli","constants","DwLns"],"kind":"struct"},"1:3272:10656":{"crate_id":1,"path":["std","io","stdio","StdinLock"],"kind":"struct"},"17:14489:5908":{"crate_id":17,"path":["object","macho","EntryPointCommand"],"kind":"struct"},"17:10044:23415":{"crate_id":17,"path":["object","common","SegmentFlags"],"kind":"enum"},"16:5781:6463":{"crate_id":16,"path":["gimli","read","cfi","EhFrame"],"kind":"struct"},"2:2576:114":{"crate_id":2,"path":["core","clone","Clone"],"kind":"trait"},"5:730:120":{"crate_id":5,"path":["alloc","borrow","Cow"],"kind":"enum"},"5:1189:36688":{"crate_id":5,"path":["alloc","collections","btree","dedup_sorted_iter","DedupSortedIter"],"kind":"struct"},"2:42720:8871":{"crate_id":2,"path":["core","hash","sip","SipHasher"],"kind":"struct"},"2:38440:5351":{"crate_id":2,"path":["core","ops","bit","ShrAssign"],"kind":"trait"},"17:15418:6190":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation32"],"kind":"struct"},"16:5817:8625":{"crate_id":16,"path":["gimli","read","cfi","BaseAddresses"],"kind":"struct"},"24:4837:3742":{"crate_id":24,"path":["syn","token","StarEq"],"kind":"struct"},"6:5581:7462":{"crate_id":6,"path":["libc","unix","linux_like","linux","af_alg_iv"],"kind":"struct"},"2:43251:15973":{"crate_id":2,"path":["core","slice","iter","ArrayChunksMut"],"kind":"struct"},"1:951:10541":{"crate_id":1,"path":["std","collections","hash","map","RawEntryBuilder"],"kind":"struct"},"2:2456:641":{"crate_id":2,"path":["core","ptr","drop_in_place"],"kind":"function"},"6:7485:7838":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user_regs_struct"],"kind":"struct"},"2:11041:8806":{"crate_id":2,"path":["core","slice","iter","Split"],"kind":"struct"},"2:43485:8887":{"crate_id":2,"path":["core","str","iter","RSplitN"],"kind":"struct"},"6:6621:7651":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","Elf64_Chdr"],"kind":"struct"},"17:15646:6268":{"crate_id":17,"path":["object","pe","ImageRuntimeFunctionEntry"],"kind":"struct"},"1:8623:8946":{"crate_id":1,"path":["std","path","Components"],"kind":"struct"},"1:8396:10671":{"crate_id":1,"path":["std","os","unix","net","listener","Incoming"],"kind":"struct"},"6:8259:7925":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_condattr_t"],"kind":"struct"},"6:473:6899":{"crate_id":6,"path":["libc","unix","utimbuf"],"kind":"struct"},"1:2033:197":{"crate_id":1,"path":["std","ffi","os_str","OsStr"],"kind":"struct"},"24:5442:2617":{"crate_id":24,"path":["syn","generics","TypeParam"],"kind":"struct"},"24:5769:2374":{"crate_id":24,"path":["syn","path","AssocConst"],"kind":"struct"},"2:43680:8839":{"crate_id":2,"path":["core","str","iter","EscapeUnicode"],"kind":"struct"},"2:8557:3496":{"crate_id":2,"path":["core","iter","traits","marker","FusedIterator"],"kind":"trait"},"1:8388:10715":{"crate_id":1,"path":["std","os","unix","net","ancillary","SocketAncillary"],"kind":"struct"},"2:43112:34234":{"crate_id":2,"path":["core","slice","iter","GenericSplitN"],"kind":"struct"},"16:6665:23339":{"crate_id":16,"path":["gimli","read","line","LineInstruction"],"kind":"enum"},"1:12090:1711":{"crate_id":1,"path":["std","usize"],"kind":"primitive"},"17:12107:5518":{"crate_id":17,"path":["object","read","macho","symbol","SymbolTable"],"kind":"struct"},"5:3270:8773":{"crate_id":5,"path":["alloc","collections","btree","set","SymmetricDifference"],"kind":"struct"},"17:13211:5655":{"crate_id":17,"path":["object","elf","FileHeader64"],"kind":"struct"},"17:12929:5611":{"crate_id":17,"path":["object","read","Import"],"kind":"struct"},"2:11275:8886":{"crate_id":2,"path":["core","slice","iter","SplitN"],"kind":"struct"},"2:2104:189":{"crate_id":2,"path":["core","ptr","non_null","NonNull"],"kind":"struct"},"17:15281:6152":{"crate_id":17,"path":["object","pe","ImageThunkData32"],"kind":"struct"},"24:3654:253":{"crate_id":24,"path":["syn","token","Try"],"kind":"struct"},"6:5436:7401":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_sndinfo"],"kind":"struct"},"17:15138:6115":{"crate_id":17,"path":["object","pe","ImageAuxSymbolFunction"],"kind":"struct"},"6:8341:7944":{"crate_id":6,"path":["libc","unix","linux_like","linux","non_exhaustive","open_how"],"kind":"struct"},"18:659:27671":{"crate_id":18,"path":["memchr","memmem","FindIter"],"kind":"struct"},"1:6508:3485":{"crate_id":1,"path":["std","sync","once","Once"],"kind":"struct"},"1:7705:5225":{"crate_id":1,"path":["std","backtrace_rs","Bomb"],"kind":"struct"},"6:5445:7407":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_rcvinfo"],"kind":"struct"},"2:40233:3522":{"crate_id":2,"path":["core","iter","adapters","fuse","Fuse"],"kind":"struct"},"16:3778:6486":{"crate_id":16,"path":["gimli","constants","DwSect"],"kind":"struct"},"6:491:6907":{"crate_id":6,"path":["libc","unix","rlimit"],"kind":"struct"},"2:2815:257":{"crate_id":2,"path":["core","convert","TryInto"],"kind":"trait"},"17:2037:23477":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbolIterator"],"kind":"struct"},"17:4821:23608":{"crate_id":17,"path":["object","read","xcoff","symbol","XcoffSymbolIterator"],"kind":"struct"},"2:45856:8288":{"crate_id":2,"path":["core","core_arch","simd","u16x16"],"kind":"struct"},"2:44372:8936":{"crate_id":2,"path":["core","alloc","layout","LayoutError"],"kind":"struct"},"17:15400:6186":{"crate_id":17,"path":["object","pe","ImageLoadConfigCodeIntegrity"],"kind":"struct"},"17:16079:6379":{"crate_id":17,"path":["object","xcoff","Symbol32"],"kind":"struct"},"1:5463:10769":{"crate_id":1,"path":["std","process","Child"],"kind":"struct"},"17:12422:8606":{"crate_id":17,"path":["object","read","pe","relocation","RelocationIterator"],"kind":"struct"},"17:11153:23421":{"crate_id":17,"path":["object","read","coff","symbol","SymbolIterator"],"kind":"struct"},"6:1686:7094":{"crate_id":6,"path":["libc","unix","linux_like","epoll_event"],"kind":"struct"},"2:40344:3513":{"crate_id":2,"path":["core","iter","adapters","step_by","StepBy"],"kind":"struct"},"6:4870:7174":{"crate_id":6,"path":["libc","unix","linux_like","linux","fsid_t"],"kind":"struct"},"1:10720:8376":{"crate_id":1,"path":["std","sys","pal","unix","fs","FileTimes"],"kind":"struct"},"2:3136:4702":{"crate_id":2,"path":["core","ops","async_function","AsyncFnMut"],"kind":"trait"},"17:12851:8610":{"crate_id":17,"path":["object","read","SymbolMap"],"kind":"struct"},"7:78:22308":{"crate_id":7,"path":["unwind","libunwind","_Unwind_Action"],"kind":"enum"},"18:538:5373":{"crate_id":18,"path":["memchr","memmem","rabinkarp","NeedleHash"],"kind":"struct"},"2:8560:3499":{"crate_id":2,"path":["core","iter","traits","marker","TrustedLen"],"kind":"trait"},"6:7446:7821":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","pthread_attr_t"],"kind":"struct"},"16:6098:23334":{"crate_id":16,"path":["gimli","read","cfi","CfaRule"],"kind":"enum"},"6:6532:7595":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_mmap_hdr"],"kind":"struct"},"6:1547:7001":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_ll"],"kind":"struct"},"2:43970:8920":{"crate_id":2,"path":["core","str","lossy","Utf8Chunk"],"kind":"struct"},"1:3917:10674":{"crate_id":1,"path":["std","net","udp","UdpSocket"],"kind":"struct"},"17:12076:23526":{"crate_id":17,"path":["object","read","macho","section","MachOSection"],"kind":"struct"},"18:635:5387":{"crate_id":18,"path":["memchr","memmem","twoway","ApproximateByteSet"],"kind":"struct"},"1:645:10528":{"crate_id":1,"path":["std","backtrace","BytesOrWide"],"kind":"enum"},"17:13363:5681":{"crate_id":17,"path":["object","elf","Syminfo32"],"kind":"struct"},"5:6611:5125":{"crate_id":5,"path":["alloc","vec","drain","drop","DropGuard"],"kind":"struct"},"16:2636:6446":{"crate_id":16,"path":["gimli","common","DebugMacroOffset"],"kind":"struct"},"17:13986:5813":{"crate_id":17,"path":["object","macho","DylibCommand"],"kind":"struct"},"6:5361:7359":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlmsghdr"],"kind":"struct"},"6:4864:7173":{"crate_id":6,"path":["libc","unix","linux_like","linux","itimerspec"],"kind":"struct"},"2:32632:5341":{"crate_id":2,"path":["core","ops","arith","Div"],"kind":"trait"},"1:11059:162":{"crate_id":1,"path":["std","sys","pal","unix","time","Instant"],"kind":"struct"},"17:10997:5508":{"crate_id":17,"path":["object","read","archive","ArchiveFile"],"kind":"struct"},"17:11524:23517":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdatSectionIterator"],"kind":"struct"},"5:828:5128":{"crate_id":5,"path":["alloc","collections","binary_heap","PeekMut"],"kind":"struct"},"1:945:10540":{"crate_id":1,"path":["std","collections","hash","map","RawVacantEntryMut"],"kind":"struct"},"21:2615:251":{"crate_id":21,"path":["proc_macro","TokenStream"],"kind":"struct"},"2:40172:3508":{"crate_id":2,"path":["core","iter","adapters","copied","Copied"],"kind":"struct"},"11:2326:10542":{"crate_id":11,"path":["hashbrown","table","OccupiedEntry"],"kind":"struct"},"5:7610:8796":{"crate_id":5,"path":["alloc","ffi","c_str","IntoStringError"],"kind":"struct"},"1:588:10523":{"crate_id":1,"path":["std","ascii","AsciiExt"],"kind":"trait"},"2:46035:8295":{"crate_id":2,"path":["core","core_arch","simd","f32x8"],"kind":"struct"},"24:4610:3726":{"crate_id":24,"path":["syn","token","PathSep"],"kind":"struct"},"17:10759:5518":{"crate_id":17,"path":["object","read","any","SymbolTable"],"kind":"struct"},"6:578:6960":{"crate_id":6,"path":["libc","unix","servent"],"kind":"struct"},"24:5613:2376":{"crate_id":24,"path":["syn","mac","Macro"],"kind":"struct"},"2:40708:3489":{"crate_id":2,"path":["core","iter","sources","repeat","Repeat"],"kind":"struct"},"6:4932:7203":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_absinfo"],"kind":"struct"},"23:150:4023":{"crate_id":23,"path":["quote","__private","ThereIsNoIteratorInRepetition"],"kind":"struct"},"2:46358:8334":{"crate_id":2,"path":["core","core_arch","simd","f32x16"],"kind":"struct"},"6:6678:7671":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ptrace_syscall_info"],"kind":"struct"},"17:11189:5514":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbol"],"kind":"struct"},"17:14968:6081":{"crate_id":17,"path":["object","pe","ImageNtHeaders64"],"kind":"struct"},"2:45374:8239":{"crate_id":2,"path":["core","core_arch","simd","u16x4"],"kind":"struct"},"16:3614:6485":{"crate_id":16,"path":["gimli","arch","X86"],"kind":"struct"},"17:15734:6291":{"crate_id":17,"path":["object","pe","ImageCoffSymbolsHeader"],"kind":"struct"},"16:5385:5491":{"crate_id":16,"path":["gimli","endianity","LittleEndian"],"kind":"struct"},"14:7:9977":{"crate_id":14,"path":["rustc_demangle","legacy","Demangle"],"kind":"struct"},"2:43646:8897":{"crate_id":2,"path":["core","str","iter","SplitAsciiWhitespace"],"kind":"struct"},"17:12342:8598":{"crate_id":17,"path":["object","read","pe","import","ImportTable"],"kind":"struct"},"20:116:36814":{"crate_id":20,"path":["proc_macro2","rcvec","RcVecBuilder"],"kind":"struct"},"24:4779:3738":{"crate_id":24,"path":["syn","token","ShrEq"],"kind":"struct"},"1:9179:162":{"crate_id":1,"path":["std","time","Instant"],"kind":"struct"},"2:6592:3534":{"crate_id":2,"path":["core","iter","adapters","intersperse","IntersperseWith"],"kind":"struct"},"2:46550:8352":{"crate_id":2,"path":["core","core_arch","x86","__m512d"],"kind":"struct"},"24:4552:3722":{"crate_id":24,"path":["syn","token","Not"],"kind":"struct"},"2:46603:8355":{"crate_id":2,"path":["core","core_arch","x86","__m512bh"],"kind":"struct"},"1:9108:8448":{"crate_id":1,"path":["std","sync","mpmc","select","Operation"],"kind":"struct"},"17:12127:5567":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbolTable"],"kind":"struct"},"17:11898:5531":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandData"],"kind":"struct"},"1:11630:8466":{"crate_id":1,"path":["std","alloc","System"],"kind":"struct"},"6:6524:7590":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_mmap_req"],"kind":"struct"},"6:5483:7428":{"crate_id":6,"path":["libc","unix","linux_like","linux","tls_crypto_info"],"kind":"struct"},"17:16105:6385":{"crate_id":17,"path":["object","xcoff","FileAux32"],"kind":"struct"},"17:13173:5640":{"crate_id":17,"path":["object","archive","AixMemberOffset"],"kind":"struct"},"2:44153:8933":{"crate_id":2,"path":["core","time","TryFromFloatSecsError"],"kind":"struct"},"2:43201:15978":{"crate_id":2,"path":["core","slice","iter","ChunksExactMut"],"kind":"struct"},"2:40469:3530":{"crate_id":2,"path":["core","iter","adapters","take","Take"],"kind":"struct"},"24:5576:2199":{"crate_id":24,"path":["syn","lit","LitStr"],"kind":"struct"},"5:6955:4806":{"crate_id":5,"path":["alloc","vec","in_place_drop","InPlaceDrop"],"kind":"struct"},"24:5000:2252":{"crate_id":24,"path":["syn","derive","DataUnion"],"kind":"struct"},"24:1682:2063":{"crate_id":24,"path":["syn","meta","ParseNestedMeta"],"kind":"struct"},"6:7330:7780":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","flock"],"kind":"struct"},"1:12081:808":{"crate_id":1,"path":["std","i32"],"kind":"primitive"},"23:272:2068":{"crate_id":23,"path":["quote","__private","push_lifetime","Lifetime"],"kind":"struct"},"1:11490:5234":{"crate_id":1,"path":["std","sys_common","net","LookupHost"],"kind":"struct"},"9:238:8207":{"crate_id":9,"path":["miniz_oxide","inflate","core","State"],"kind":"enum"},"6:1585:7025":{"crate_id":6,"path":["libc","unix","linux_like","Dl_info"],"kind":"struct"},"20:817:2058":{"crate_id":20,"path":["proc_macro2","imp","Span"],"kind":"enum"},"24:5514:3378":{"crate_id":24,"path":["syn","generics","PredicateLifetime"],"kind":"struct"},"6:6441:7555":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__timeval"],"kind":"struct"},"17:16269:5690":{"crate_id":17,"path":["object","xcoff","Rel64"],"kind":"struct"},"24:5259:3361":{"crate_id":24,"path":["syn","expr","ExprGroup"],"kind":"struct"},"24:5437:2658":{"crate_id":24,"path":["syn","generics","LifetimeParam"],"kind":"struct"},"17:14503:5911":{"crate_id":17,"path":["object","macho","SourceVersionCommand"],"kind":"struct"},"5:4467:5149":{"crate_id":5,"path":["alloc","collections","vec_deque","write_iter_wrapping","Guard"],"kind":"struct"},"17:3597:23546":{"crate_id":17,"path":["object","read","macho","relocation","MachORelocationIterator"],"kind":"struct"},"1:5862:10098":{"crate_id":1,"path":["std","sync","condvar","Condvar"],"kind":"struct"},"2:13397:34739":{"crate_id":2,"path":["core","future","join","MaybeDone"],"kind":"enum"},"2:46580:8354":{"crate_id":2,"path":["core","core_arch","x86","__m256bh"],"kind":"struct"},"24:3603:2006":{"crate_id":24,"path":["syn","token","Struct"],"kind":"struct"},"5:7437:3418":{"crate_id":5,"path":["alloc","collections","btree","set","IntoIter"],"kind":"struct"},"24:5731:2354":{"crate_id":24,"path":["syn","path","PathArguments"],"kind":"enum"},"17:12408:5577":{"crate_id":17,"path":["object","read","pe","relocation","RelocationBlockIterator"],"kind":"struct"},"24:2311:3421":{"crate_id":24,"path":["syn","punctuated","PrivateIter"],"kind":"struct"},"24:4948:2050":{"crate_id":24,"path":["syn","data","Fields"],"kind":"enum"},"2:39170:215":{"crate_id":2,"path":["core","ops","range","RangeTo"],"kind":"struct"},"17:12597:5588":{"crate_id":17,"path":["object","read","xcoff","symbol","XcoffSymbolTable"],"kind":"struct"},"1:9174:235":{"crate_id":1,"path":["std","sync","rwlock","RwLockWriteGuard"],"kind":"struct"},"2:40121:3505":{"crate_id":2,"path":["core","iter","adapters","array_chunks","ArrayChunks"],"kind":"struct"},"16:6278:10052":{"crate_id":16,"path":["gimli","read","dwarf","Dwarf"],"kind":"struct"},"24:1031:5334":{"crate_id":24,"path":["syn","ext","private","PeekFn"],"kind":"struct"},"2:21502:10832":{"crate_id":2,"path":["core","core_simd","cast","SimdCast"],"kind":"trait"},"2:46642:8371":{"crate_id":2,"path":["core","core_arch","x86","cpuid","CpuidResult"],"kind":"struct"},"17:12289:5570":{"crate_id":17,"path":["object","read","pe","data_directory","DataDirectories"],"kind":"struct"},"2:4565:3576":{"crate_id":2,"path":["core","cell","BorrowError"],"kind":"struct"},"24:2303:3419":{"crate_id":24,"path":["syn","punctuated","Iter"],"kind":"struct"},"21:215:10050":{"crate_id":21,"path":["proc_macro","bridge","fxhash","FxHasher"],"kind":"struct"},"24:4849:3743":{"crate_id":24,"path":["syn","token","Tilde"],"kind":"struct"},"1:10786:10773":{"crate_id":1,"path":["std","sys","pal","unix","process","process_common","Stdio"],"kind":"enum"},"24:5578:3384":{"crate_id":24,"path":["syn","lit","LitByteStr"],"kind":"struct"},"1:9318:4875":{"crate_id":1,"path":["std","sys","pal","unix","args","Args"],"kind":"struct"},"1:6053:5213":{"crate_id":1,"path":["std","sync","mpmc","counter","Sender"],"kind":"struct"},"21:2319:1991":{"crate_id":21,"path":["proc_macro","bridge","Ident"],"kind":"struct"},"2:44395:8937":{"crate_id":2,"path":["core","escape","EscapeIterInner"],"kind":"struct"},"24:4879:3889":{"crate_id":24,"path":["syn","token","Bracket"],"kind":"struct"},"2:44356:181":{"crate_id":2,"path":["core","alloc","layout","Layout"],"kind":"struct"},"2:21573:7957":{"crate_id":2,"path":["core","core_simd","masks","mask_impl","Mask"],"kind":"struct"},"24:3671:1974":{"crate_id":24,"path":["syn","token","Type"],"kind":"struct"},"17:15324:6164":{"crate_id":17,"path":["object","pe","ImageBoundImportDescriptor"],"kind":"struct"},"16:6940:6577":{"crate_id":16,"path":["gimli","read","lists","ListsHeader"],"kind":"struct"},"1:6548:5217":{"crate_id":1,"path":["std","sync","once_lock","OnceLock"],"kind":"struct"},"2:43988:8922":{"crate_id":2,"path":["core","str","lossy","Utf8Chunks"],"kind":"struct"},"11:299:8763":{"crate_id":11,"path":["hashbrown","raw","RawIterRange"],"kind":"struct"},"6:523:6930":{"crate_id":6,"path":["libc","unix","hostent"],"kind":"struct"},"2:22233:10915":{"crate_id":2,"path":["core","core_simd","simd","num","int","SimdInt"],"kind":"trait"},"2:43513:8889":{"crate_id":2,"path":["core","str","iter","MatchIndices"],"kind":"struct"},"2:45458:8244":{"crate_id":2,"path":["core","core_arch","simd","i32x2"],"kind":"struct"},"6:5064:7269":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Ehdr"],"kind":"struct"},"17:11256:8575":{"crate_id":17,"path":["object","read","coff","import","ImportFile"],"kind":"struct"},"2:21500:10619":{"crate_id":2,"path":["core","core_simd","cast","sealed","Sealed"],"kind":"trait"},"1:11656:8970":{"crate_id":1,"path":["std","backtrace_rs","backtrace","libunwind","Frame"],"kind":"enum"},"17:14599:5929":{"crate_id":17,"path":["object","macho","ScatteredRelocationInfo"],"kind":"struct"},"2:46475:8341":{"crate_id":2,"path":["core","core_arch","x86","__m256i"],"kind":"struct"},"16:6976:6580":{"crate_id":16,"path":["gimli","read","loclists","LocationLists"],"kind":"struct"},"20:827:1979":{"crate_id":20,"path":["proc_macro2","imp","Group"],"kind":"enum"},"6:6460:7557":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","msghdr"],"kind":"struct"},"1:922:10537":{"crate_id":1,"path":["std","collections","hash","map","RawEntryBuilderMut"],"kind":"struct"},"6:8282:7931":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_cond_t"],"kind":"struct"},"5:3283:35397":{"crate_id":5,"path":["alloc","collections","btree","set","IntersectionInner"],"kind":"enum"},"17:14051:5821":{"crate_id":17,"path":["object","macho","PreboundDylibCommand"],"kind":"struct"},"6:8306:7935":{"crate_id":6,"path":["libc","unix","linux_like","linux","can_frame"],"kind":"struct"},"17:12494:5583":{"crate_id":17,"path":["object","read","pe","rich","RichHeaderInfo"],"kind":"struct"},"1:8973:8444":{"crate_id":1,"path":["std","sync","mpsc","RecvError"],"kind":"struct"},"24:4528:3720":{"crate_id":24,"path":["syn","token","MinusEq"],"kind":"struct"},"17:15010:6088":{"crate_id":17,"path":["object","pe","AnonObjectHeader"],"kind":"struct"},"17:14246:5868":{"crate_id":17,"path":["object","macho","TwolevelHintsCommand"],"kind":"struct"},"16:2838:6455":{"crate_id":16,"path":["gimli","common","DebugTypeSignature"],"kind":"struct"},"6:5598:7469":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_ifr_ifru"],"kind":"union"},"1:10881:5231":{"crate_id":1,"path":["std","sys","pal","unix","process","process_inner","posix_spawn","PosixSpawnattr"],"kind":"struct"},"6:6670:7669":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_seccomp"],"kind":"struct"},"2:43947:8912":{"crate_id":2,"path":["core","str","pattern","EmptyNeedle"],"kind":"struct"},"2:42944:8211":{"crate_id":2,"path":["core","slice","sort","TimSortRun"],"kind":"struct"},"2:40023:107":{"crate_id":2,"path":["core","ffi","c_str","CStr"],"kind":"struct"},"5:7633:243":{"crate_id":5,"path":["alloc","string","String"],"kind":"struct"},"2:10202:2595":{"crate_id":2,"path":["core","fmt","Binary"],"kind":"trait"},"17:13774:5779":{"crate_id":17,"path":["object","macho","FatArch32"],"kind":"struct"},"24:5319:3368":{"crate_id":24,"path":["syn","expr","ExprRepeat"],"kind":"struct"},"16:6246:206":{"crate_id":16,"path":["gimli","read","cfi","Pointer"],"kind":"enum"},"17:13538:5717":{"crate_id":17,"path":["object","elf","Verneed"],"kind":"struct"},"2:10452:10624":{"crate_id":2,"path":["core","hash","BuildHasher"],"kind":"trait"},"16:6948:6468":{"crate_id":16,"path":["gimli","read","loclists","DebugLoc"],"kind":"struct"},"2:30287:3562":{"crate_id":2,"path":["core","ptr","alignment","Alignment"],"kind":"struct"},"1:2447:10611":{"crate_id":1,"path":["std","fs","read_dir"],"kind":"function"},"2:43585:8893":{"crate_id":2,"path":["core","str","iter","RMatches"],"kind":"struct"},"24:4417:3712":{"crate_id":24,"path":["syn","token","EqEq"],"kind":"struct"},"2:43764:8899":{"crate_id":2,"path":["core","str","pattern","CharSearcher"],"kind":"struct"},"17:10284:5496":{"crate_id":17,"path":["object","endian","I16Bytes"],"kind":"struct"},"6:5314:7348":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_fprog"],"kind":"struct"},"16:4802:6504":{"crate_id":16,"path":["gimli","constants","DwCc"],"kind":"struct"},"16:6026:8650":{"crate_id":16,"path":["gimli","read","cfi","UnwindContext"],"kind":"struct"},"24:5906:3404":{"crate_id":24,"path":["syn","ty","TypeNever"],"kind":"struct"},"5:7731:4800":{"crate_id":5,"path":["alloc","vec","splice","Splice"],"kind":"struct"},"1:640:10527":{"crate_id":1,"path":["std","backtrace","BacktraceSymbol"],"kind":"struct"},"24:1820:3003":{"crate_id":24,"path":["syn","parse","Unexpected"],"kind":"enum"},"1:8304:2967":{"crate_id":1,"path":["std","io","Bytes"],"kind":"struct"},"17:11313:8578":{"crate_id":17,"path":["object","read","coff","import","ImportObjectData"],"kind":"struct"},"2:30298:33305":{"crate_id":2,"path":["core","ptr","alignment","AlignmentEnum16"],"kind":"enum"},"21:2709:1979":{"crate_id":21,"path":["proc_macro","Group"],"kind":"struct"},"1:9141:8451":{"crate_id":1,"path":["std","sync","mpmc","utils","CachePadded"],"kind":"struct"},"17:15596:6255":{"crate_id":17,"path":["object","pe","ImageHotPatchHashes"],"kind":"struct"},"16:2592:6444":{"crate_id":16,"path":["gimli","common","DebugLocListsIndex"],"kind":"struct"},"1:6678:10795":{"crate_id":1,"path":["std","sync","remutex","ReentrantMutex"],"kind":"struct"},"2:8060:3504":{"crate_id":2,"path":["core","iter","traits","accum","Sum"],"kind":"trait"},"17:2175:23506":{"crate_id":17,"path":["object","read","elf","relocation","ElfRelaIterator"],"kind":"enum"},"1:9049:10099":{"crate_id":1,"path":["std","sync","mpmc","array","ArrayToken"],"kind":"struct"},"2:44095:8929":{"crate_id":2,"path":["core","str","IsAsciiWhitespace"],"kind":"struct"},"17:12768:23394":{"crate_id":17,"path":["object","read","ObjectKind"],"kind":"enum"},"2:42506:3562":{"crate_id":2,"path":["core","fmt","Alignment"],"kind":"enum"},"24:1732:27695":{"crate_id":24,"path":["syn","parse","discouraged","Speculative"],"kind":"trait"},"1:1063:10543":{"crate_id":1,"path":["std","collections","hash","map","VacantEntry"],"kind":"struct"},"5:7554:4588":{"crate_id":5,"path":["alloc","ffi","c_str","CString"],"kind":"struct"},"24:3705:2028":{"crate_id":24,"path":["syn","token","Union"],"kind":"struct"},"1:723:154":{"crate_id":1,"path":["std","collections","hash","map","HashMap"],"kind":"struct"},"16:2728:6450":{"crate_id":16,"path":["gimli","common","DebugRngListsIndex"],"kind":"struct"},"24:4992:2208":{"crate_id":24,"path":["syn","derive","DataStruct"],"kind":"struct"},"6:6505:7588":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","mallinfo2"],"kind":"struct"},"2:40219:8851":{"crate_id":2,"path":["core","iter","adapters","flatten","FlattenCompat"],"kind":"struct"},"16:5927:8636":{"crate_id":16,"path":["gimli","read","cfi","CommonInformationEntry"],"kind":"struct"},"5:6178:5149":{"crate_id":5,"path":["alloc","sync","from_iter_exact","Guard"],"kind":"struct"},"1:7967:8942":{"crate_id":1,"path":["std","fs","Permissions"],"kind":"struct"},"17:15313:6160":{"crate_id":17,"path":["object","pe","ImageImportDescriptor"],"kind":"struct"},"6:6763:7701":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_options"],"kind":"struct"},"16:7509:23346":{"crate_id":16,"path":["gimli","read","op","Evaluation"],"kind":"struct"},"23:78:2060":{"crate_id":23,"path":["quote","to_tokens","ToTokens"],"kind":"trait"},"1:621:9991":{"crate_id":1,"path":["std","backtrace","Backtrace"],"kind":"struct"},"5:5710:4805":{"crate_id":5,"path":["alloc","string","retain","SetLenOnDrop"],"kind":"struct"},"16:6353:6527":{"crate_id":16,"path":["gimli","read","endian_slice","EndianSlice"],"kind":"struct"},"1:8104:10103":{"crate_id":1,"path":["std","io","error","Custom"],"kind":"struct"},"17:11674:8585":{"crate_id":17,"path":["object","read","elf","version","VernauxIterator"],"kind":"struct"},"18:613:36804":{"crate_id":18,"path":["memchr","memmem","twoway","SuffixKind"],"kind":"enum"},"9:357:22330":{"crate_id":9,"path":["miniz_oxide","inflate","TINFLStatus"],"kind":"enum"},"16:5802:23331":{"crate_id":16,"path":["gimli","read","cfi","CieOffsetEncoding"],"kind":"enum"},"17:16235:6417":{"crate_id":17,"path":["object","xcoff","DwarfAux32"],"kind":"struct"},"6:5052:7260":{"crate_id":6,"path":["libc","unix","linux_like","linux","dl_phdr_info"],"kind":"struct"},"17:14372:5885":{"crate_id":17,"path":["object","macho","VersionMinCommand"],"kind":"struct"},"17:13116:5628":{"crate_id":17,"path":["object","archive","AixHeader"],"kind":"struct"},"16:7549:8744":{"crate_id":16,"path":["gimli","read","pubnames","PubNamesEntryIter"],"kind":"struct"},"17:13399:5688":{"crate_id":17,"path":["object","elf","Rela32"],"kind":"struct"},"16:7061:6585":{"crate_id":16,"path":["gimli","read","loclists","LocationListEntry"],"kind":"struct"},"1:7750:4598":{"crate_id":1,"path":["std","thread","local","AccessError"],"kind":"struct"},"24:1888:3543":{"crate_id":24,"path":["syn","parse","Parser"],"kind":"trait"},"6:5020:7247":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_effect"],"kind":"struct"},"2:21414:4364":{"crate_id":2,"path":["core","core_simd","swizzle","reverse","Reverse"],"kind":"struct"},"1:2979:5204":{"crate_id":1,"path":["std","io","error","repr_bitpacked","Repr"],"kind":"struct"},"1:2585:10649":{"crate_id":1,"path":["std","io","buffered","bufreader","BufReader"],"kind":"struct"},"2:40010:8180":{"crate_id":2,"path":["core","char","TryFromCharError"],"kind":"struct"},"2:46300:8332":{"crate_id":2,"path":["core","core_arch","simd","i32x16"],"kind":"struct"},"1:12079:810":{"crate_id":1,"path":["std","i8"],"kind":"primitive"},"2:8192:3501":{"crate_id":2,"path":["core","iter","traits","exact_size","ExactSizeIterator"],"kind":"trait"},"17:10317:5497":{"crate_id":17,"path":["object","endian","I32Bytes"],"kind":"struct"},"2:12763:15990":{"crate_id":2,"path":["core","str","pattern","Pattern"],"kind":"trait"},"2:39921:8837":{"crate_id":2,"path":["core","char","decode","DecodeUtf16"],"kind":"struct"},"16:7633:36724":{"crate_id":16,"path":["gimli","read","rnglists","RangeListsFormat"],"kind":"enum"},"6:6689:7673":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","sockaddr_xdp"],"kind":"struct"},"24:5806:1974":{"crate_id":24,"path":["syn","ty","Type"],"kind":"enum"},"5:6021:72":{"crate_id":5,"path":["alloc","sync","Arc"],"kind":"struct"},"6:1535:6992":{"crate_id":6,"path":["libc","unix","linux_like","addrinfo"],"kind":"struct"},"2:3093:4348":{"crate_id":2,"path":["core","marker","Freeze"],"kind":"trait"},"6:5083:7270":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Ehdr"],"kind":"struct"},"6:4924:7201":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_id"],"kind":"struct"},"5:4437:5151":{"crate_id":5,"path":["alloc","collections","vec_deque","drop","Dropper"],"kind":"struct"},"2:32027:4351":{"crate_id":2,"path":["core","marker","PhantomPinned"],"kind":"struct"},"6:1580:7023":{"crate_id":6,"path":["libc","unix","linux_like","sched_param"],"kind":"struct"},"2:39210:216":{"crate_id":2,"path":["core","ops","range","RangeToInclusive"],"kind":"struct"},"1:10974:8440":{"crate_id":1,"path":["std","sys","pal","unix","process","process_inner","ExitStatus"],"kind":"struct"},"1:12065:404":{"crate_id":1,"path":["std","bool"],"kind":"primitive"},"24:3433:3684":{"crate_id":24,"path":["syn","token","Move"],"kind":"struct"},"17:11293:23466":{"crate_id":17,"path":["object","read","coff","import","ImportType"],"kind":"enum"},"17:13753:5775":{"crate_id":17,"path":["object","macho","DyldSubCacheInfo"],"kind":"struct"},"5:1340:10542":{"crate_id":5,"path":["alloc","collections","btree","map","entry","OccupiedEntry"],"kind":"struct"},"17:13344:5680":{"crate_id":17,"path":["object","elf","Sym64"],"kind":"struct"},"2:3252:4704":{"crate_id":2,"path":["core","ops","coroutine","Coroutine"],"kind":"trait"},"16:6160:22443":{"crate_id":16,"path":["gimli","read","cfi","CallFrameInstruction"],"kind":"enum"},"16:5769:8623":{"crate_id":16,"path":["gimli","read","cfi","EhHdrTable"],"kind":"struct"},"17:14079:5825":{"crate_id":17,"path":["object","macho","ThreadCommand"],"kind":"struct"},"1:10818:8442":{"crate_id":1,"path":["std","sys","pal","unix","process","process_common","ExitCode"],"kind":"struct"},"6:8300:7934":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_barrier_t"],"kind":"struct"},"17:11574:8774":{"crate_id":17,"path":["object","read","elf","hash","HashTable"],"kind":"struct"},"5:2234:8778":{"crate_id":5,"path":["alloc","collections","btree","navigate","LeafRange"],"kind":"struct"},"16:3810:6487":{"crate_id":16,"path":["gimli","constants","DwSectV2"],"kind":"struct"},"6:5174:7277":{"crate_id":6,"path":["libc","unix","linux_like","linux","ucred"],"kind":"struct"},"2:3104:3464":{"crate_id":2,"path":["core","ops","arith","Add"],"kind":"trait"},"2:30836:4364":{"crate_id":2,"path":["core","cmp","Reverse"],"kind":"struct"},"1:2268:4742":{"crate_id":1,"path":["std","fs","read"],"kind":"function"},"1:2730:10650":{"crate_id":1,"path":["std","io","buffered","linewriter","LineWriter"],"kind":"struct"},"11:2554:36697":{"crate_id":11,"path":["hashbrown","raw","Fallibility"],"kind":"enum"},"5:7528:3475":{"crate_id":5,"path":["alloc","collections","TryReserveError"],"kind":"struct"},"2:40210:3520":{"crate_id":2,"path":["core","iter","adapters","filter_map","FilterMap"],"kind":"struct"},"1:2419:4725":{"crate_id":1,"path":["std","fs","metadata"],"kind":"function"},"1:5322:203":{"crate_id":1,"path":["std","path","Path"],"kind":"struct"},"17:11419:5518":{"crate_id":17,"path":["object","read","elf","symbol","SymbolTable"],"kind":"struct"},"1:7995:129":{"crate_id":1,"path":["std","fs","DirBuilder"],"kind":"struct"},"16:7144:23344":{"crate_id":16,"path":["gimli","read","op","DieReference"],"kind":"enum"},"2:6787:8802":{"crate_id":2,"path":["core","iter","adapters","map_windows","MapWindowsInner"],"kind":"struct"},"6:6636:7653":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","seminfo"],"kind":"struct"},"1:9000:10798":{"crate_id":1,"path":["std","sync","mpsc","RecvTimeoutError"],"kind":"enum"},"2:43309:8214":{"crate_id":2,"path":["core","str","error","Utf8Error"],"kind":"struct"},"17:13922:5804":{"crate_id":17,"path":["object","macho","Section64"],"kind":"struct"},"24:4622:3727":{"crate_id":24,"path":["syn","token","Percent"],"kind":"struct"},"1:9982:8863":{"crate_id":1,"path":["std","sys","pal","unix","net","Socket"],"kind":"struct"},"6:5472:7425":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_authinfo"],"kind":"struct"},"17:10877:23422":{"crate_id":17,"path":["object","read","any","DynamicRelocationIterator"],"kind":"struct"},"2:41868:88":{"crate_id":2,"path":["core","sync","atomic","AtomicI32"],"kind":"struct"},"21:2694:2059":{"crate_id":21,"path":["proc_macro","TokenTree"],"kind":"enum"},"2:11196:8809":{"crate_id":2,"path":["core","slice","iter","RSplit"],"kind":"struct"},"17:10251:5495":{"crate_id":17,"path":["object","endian","U64Bytes"],"kind":"struct"},"17:16151:6398":{"crate_id":17,"path":["object","xcoff","CsectAux64"],"kind":"struct"},"1:11006:8218":{"crate_id":1,"path":["std","sys","pal","unix","time","Nanoseconds"],"kind":"struct"},"20:910:3440":{"crate_id":20,"path":["proc_macro2","Delimiter"],"kind":"enum"},"24:2974:3666":{"crate_id":24,"path":["syn","token","As"],"kind":"struct"},"21:412:5112":{"crate_id":21,"path":["proc_macro","bridge","scoped_cell","replace","PutBackOnDrop"],"kind":"struct"},"17:16259:5685":{"crate_id":17,"path":["object","xcoff","Rel32"],"kind":"struct"},"17:11715:8588":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSubsection"],"kind":"struct"},"5:2287:35483":{"crate_id":5,"path":["alloc","collections","btree","navigate","LazyLeafHandle"],"kind":"enum"},"24:1029:10619":{"crate_id":24,"path":["syn","ext","private","Sealed"],"kind":"trait"},"6:1593:7030":{"crate_id":6,"path":["libc","unix","linux_like","lconv"],"kind":"struct"},"2:10206:3574":{"crate_id":2,"path":["core","fmt","UpperHex"],"kind":"trait"},"16:2788:6453":{"crate_id":16,"path":["gimli","common","DebugStrOffsetsIndex"],"kind":"struct"},"5:217:4714":{"crate_id":5,"path":["alloc","boxed","thin","ThinBox"],"kind":"struct"},"2:39152:212":{"crate_id":2,"path":["core","ops","range","RangeFrom"],"kind":"struct"},"6:8265:7926":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_barrierattr_t"],"kind":"struct"},"7:31:22301":{"crate_id":7,"path":["unwind","libunwind","_Unwind_Reason_Code"],"kind":"enum"},"5:6565:4801":{"crate_id":5,"path":["alloc","vec","drain","Drain"],"kind":"struct"},"2:46512:8344":{"crate_id":2,"path":["core","core_arch","x86","__m512i"],"kind":"struct"},"16:150:5114":{"crate_id":16,"path":["gimli","read","util","ArrayVec"],"kind":"struct"},"1:8900:8440":{"crate_id":1,"path":["std","process","ExitStatus"],"kind":"struct"},"1:4880:5205":{"crate_id":1,"path":["std","os","fd","owned","OwnedFd"],"kind":"struct"},"17:15168:6126":{"crate_id":17,"path":["object","pe","ImageAuxSymbolWeak"],"kind":"struct"},"2:39991:16035":{"crate_id":2,"path":["core","char","CaseMappingIter"],"kind":"enum"},"2:45665:8263":{"crate_id":2,"path":["core","core_arch","simd","i64x2"],"kind":"struct"},"1:9100:1985":{"crate_id":1,"path":["std","sync","mpmc","select","Token"],"kind":"struct"},"18:0:3187":{"crate_id":18,"path":["memchr"],"kind":"module"},"24:4347:3708":{"crate_id":24,"path":["syn","token","Dot"],"kind":"struct"},"1:10739:129":{"crate_id":1,"path":["std","sys","pal","unix","fs","DirBuilder"],"kind":"struct"},"21:2260:1979":{"crate_id":21,"path":["proc_macro","bridge","Group"],"kind":"struct"},"2:40039:33284":{"crate_id":2,"path":["core","ffi","c_str","FromBytesWithNulErrorKind"],"kind":"enum"},"2:2557:104":{"crate_id":2,"path":["core","borrow","BorrowMut"],"kind":"trait"},"2:3426:211":{"crate_id":2,"path":["core","ops","range","RangeBounds"],"kind":"trait"},"1:10400:5228":{"crate_id":1,"path":["std","sys","pal","unix","stack_overflow","Handler"],"kind":"struct"},"17:14587:5922":{"crate_id":17,"path":["object","macho","RelocationInfo"],"kind":"struct"},"24:4943:2005":{"crate_id":24,"path":["syn","data","Variant"],"kind":"struct"},"2:4745:3589":{"crate_id":2,"path":["core","cell","SyncUnsafeCell"],"kind":"struct"},"17:15836:6316":{"crate_id":17,"path":["object","pe","ImageCor20Header"],"kind":"struct"},"2:21451:34256":{"crate_id":2,"path":["core","core_simd","swizzle","interleave","Lo"],"kind":"struct"},"17:14111:5829":{"crate_id":17,"path":["object","macho","RoutinesCommand64"],"kind":"struct"},"2:3489:16078":{"crate_id":2,"path":["core","ops","range","OneSidedRange"],"kind":"trait"},"17:12572:5518":{"crate_id":17,"path":["object","read","xcoff","symbol","SymbolTable"],"kind":"struct"},"17:12887:8611":{"crate_id":17,"path":["object","read","ObjectMap"],"kind":"struct"},"11:1051:10543":{"crate_id":11,"path":["hashbrown","map","VacantEntry"],"kind":"struct"},"2:21470:34270":{"crate_id":2,"path":["core","core_simd","swizzle","deinterleave","Odd"],"kind":"struct"},"2:10149:226":{"crate_id":2,"path":["core","fmt","Result"],"kind":"type_alias"},"17:13855:5791":{"crate_id":17,"path":["object","macho","SegmentCommand32"],"kind":"struct"},"16:5347:6516":{"crate_id":16,"path":["gimli","constants","DwEhPe"],"kind":"struct"},"2:43637:8896":{"crate_id":2,"path":["core","str","iter","SplitWhitespace"],"kind":"struct"},"17:14386:5887":{"crate_id":17,"path":["object","macho","BuildVersionCommand"],"kind":"struct"},"24:1737:27696":{"crate_id":24,"path":["syn","parse","discouraged","AnyDelimiter"],"kind":"trait"},"17:13526:5714":{"crate_id":17,"path":["object","elf","Verdaux"],"kind":"struct"},"1:533:4579":{"crate_id":1,"path":["std","thread","Packet"],"kind":"struct"},"2:45729:8267":{"crate_id":2,"path":["core","core_arch","simd","m8x16"],"kind":"struct"},"1:6622:9998":{"crate_id":1,"path":["std","sync","poison","PoisonError"],"kind":"struct"},"24:4429:3713":{"crate_id":24,"path":["syn","token","FatArrow"],"kind":"struct"},"6:5046:7258":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_abs_setup"],"kind":"struct"},"2:22718:7964":{"crate_id":2,"path":["core","num","diy_float","Fp"],"kind":"struct"},"5:1463:3419":{"crate_id":5,"path":["alloc","collections","btree","map","Iter"],"kind":"struct"},"24:4938:3324":{"crate_id":24,"path":["syn","attr","MetaNameValue"],"kind":"struct"},"2:46429:8337":{"crate_id":2,"path":["core","core_arch","simd","f64x8"],"kind":"struct"},"2:32026:3611":{"crate_id":2,"path":["core","marker","Unpin"],"kind":"trait"},"24:5306:2259":{"crate_id":24,"path":["syn","expr","ExprPath"],"kind":"struct"},"2:21453:34264":{"crate_id":2,"path":["core","core_simd","swizzle","interleave","Hi"],"kind":"struct"},"1:3519:10616":{"crate_id":1,"path":["std","io","IoSliceMut"],"kind":"struct"},"5:824:102":{"crate_id":5,"path":["alloc","collections","binary_heap","BinaryHeap"],"kind":"struct"},"2:44347:10919":{"crate_id":2,"path":["core","task","wake","ContextBuilder"],"kind":"struct"},"24:2200:3415":{"crate_id":24,"path":["syn","punctuated","Pairs"],"kind":"struct"},"17:13844:5790":{"crate_id":17,"path":["object","macho","LcStr"],"kind":"struct"},"6:5191:7286":{"crate_id":6,"path":["libc","unix","linux_like","linux","posix_spawn_file_actions_t"],"kind":"struct"},"24:4284:3704":{"crate_id":24,"path":["syn","token","CaretEq"],"kind":"struct"},"2:11084:8808":{"crate_id":2,"path":["core","slice","iter","SplitInclusive"],"kind":"struct"},"0:0:1857":{"crate_id":0,"path":["serde_derive"],"kind":"module"},"24:4330:3707":{"crate_id":24,"path":["syn","token","Dollar"],"kind":"struct"},"17:12371:5611":{"crate_id":17,"path":["object","read","pe","import","Import"],"kind":"enum"},"24:703:3419":{"crate_id":24,"path":["syn","error","Iter"],"kind":"struct"},"24:5713:3390":{"crate_id":24,"path":["syn","op","UnOp"],"kind":"enum"},"24:2372:3423":{"crate_id":24,"path":["syn","punctuated","IterMut"],"kind":"struct"},"23:322:2681":{"crate_id":23,"path":["quote","spanned","Spanned"],"kind":"trait"},"6:5002:7238":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_periodic_effect"],"kind":"struct"},"17:13814:5787":{"crate_id":17,"path":["object","macho","MachHeader64"],"kind":"struct"},"1:7773:4587":{"crate_id":1,"path":["std","thread","ThreadId"],"kind":"struct"},"17:15039:6096":{"crate_id":17,"path":["object","pe","AnonObjectHeaderBigobj"],"kind":"struct"},"1:1072:9983":{"crate_id":1,"path":["std","collections","hash","map","OccupiedError"],"kind":"struct"},"2:4570:3577":{"crate_id":2,"path":["core","cell","BorrowMutError"],"kind":"struct"},"2:44099:8930":{"crate_id":2,"path":["core","str","IsNotEmpty"],"kind":"struct"},"24:4976:1838":{"crate_id":24,"path":["syn","derive","DeriveInput"],"kind":"struct"},"2:3270:127":{"crate_id":2,"path":["core","ops","deref","Deref"],"kind":"trait"},"1:8310:8806":{"crate_id":1,"path":["std","io","Split"],"kind":"struct"},"24:5339:3371":{"crate_id":24,"path":["syn","expr","ExprTryBlock"],"kind":"struct"},"2:45353:8234":{"crate_id":2,"path":["core","core_arch","simd","u8x8"],"kind":"struct"},"17:15273:6151":{"crate_id":17,"path":["object","pe","ImageThunkData64"],"kind":"struct"},"17:14091:5826":{"crate_id":17,"path":["object","macho","RoutinesCommand32"],"kind":"struct"},"2:31953:3585":{"crate_id":2,"path":["core","error","tags","Ref"],"kind":"struct"},"24:5280:2333":{"crate_id":24,"path":["syn","expr","ExprLit"],"kind":"struct"},"2:40285:3525":{"crate_id":2,"path":["core","iter","adapters","peekable","Peekable"],"kind":"struct"},"2:3581:3594":{"crate_id":2,"path":["core","ops","unsize","DispatchFromDyn"],"kind":"trait"},"24:3110:118":{"crate_id":24,"path":["syn","token","Continue"],"kind":"struct"},"24:644:138":{"crate_id":24,"path":["syn","error","Error"],"kind":"struct"},"5:1494:3418":{"crate_id":5,"path":["alloc","collections","btree","map","IntoIter"],"kind":"struct"},"17:16223:6414":{"crate_id":17,"path":["object","xcoff","StatAux"],"kind":"struct"},"17:14529:5913":{"crate_id":17,"path":["object","macho","NoteCommand"],"kind":"struct"},"24:5471:2548":{"crate_id":24,"path":["syn","generics","TypeParamBound"],"kind":"enum"},"24:128:1979":{"crate_id":24,"path":["syn","token","Group"],"kind":"struct"},"17:12278:23596":{"crate_id":17,"path":["object","read","pe","section","PeRelocationIterator"],"kind":"struct"},"6:1496:6973":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreqn"],"kind":"struct"},"6:5250:7315":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_vm"],"kind":"struct"},"17:11016:23436":{"crate_id":17,"path":["object","read","archive","ArchiveMemberIterator"],"kind":"struct"},"2:3109:5339":{"crate_id":2,"path":["core","ops","arith","Sub"],"kind":"trait"},"2:40334:3529":{"crate_id":2,"path":["core","iter","adapters","skip_while","SkipWhile"],"kind":"struct"},"24:4364:3709":{"crate_id":24,"path":["syn","token","DotDot"],"kind":"struct"},"17:10419:5500":{"crate_id":17,"path":["object","read","util","ByteString"],"kind":"struct"},"24:5355:3374":{"crate_id":24,"path":["syn","expr","ExprWhile"],"kind":"struct"},"16:8259:2756":{"crate_id":16,"path":["gimli","read","value","Value"],"kind":"enum"},"17:12671:23636":{"crate_id":17,"path":["object","read","xcoff","comdat","XcoffComdatSectionIterator"],"kind":"struct"},"17:15289:6153":{"crate_id":17,"path":["object","pe","ImageTlsDirectory64"],"kind":"struct"},"17:12863:5609":{"crate_id":17,"path":["object","read","SymbolMapName"],"kind":"struct"},"1:8545:8207":{"crate_id":1,"path":["std","path","State"],"kind":"enum"},"1:7241:33222":{"crate_id":1,"path":["std","sys_common","wstr","WStrUnits"],"kind":"struct"},"17:15426:6192":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation64"],"kind":"struct"},"17:15176:6129":{"crate_id":17,"path":["object","pe","ImageAuxSymbolSection"],"kind":"struct"},"17:12683:23607":{"crate_id":17,"path":["object","read","xcoff","segment","XcoffSegmentIterator"],"kind":"struct"},"5:7598:8793":{"crate_id":5,"path":["alloc","ffi","c_str","FromVecWithNulError"],"kind":"struct"},"1:7749:10619":{"crate_id":1,"path":["std","sealed","Sealed"],"kind":"trait"},"2:30234:4657":{"crate_id":2,"path":["core","mem","manually_drop","ManuallyDrop"],"kind":"struct"},"17:9984:23414":{"crate_id":17,"path":["object","common","RelocationEncoding"],"kind":"enum"},"6:8288:7932":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_mutex_t"],"kind":"struct"},"16:7769:6633":{"crate_id":16,"path":["gimli","read","UnitOffset"],"kind":"struct"},"2:2646:195":{"crate_id":2,"path":["core","cmp","Ord"],"kind":"trait"},"24:5370:2602":{"crate_id":24,"path":["syn","expr","Index"],"kind":"struct"},"2:46329:8333":{"crate_id":2,"path":["core","core_arch","simd","u32x16"],"kind":"struct"},"17:3473:23530":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbolIterator"],"kind":"struct"},"2:6781:3511":{"crate_id":2,"path":["core","iter","adapters","map_windows","MapWindows"],"kind":"struct"},"1:1887:10567":{"crate_id":1,"path":["std","env","ArgsOs"],"kind":"struct"},"1:5477:10770":{"crate_id":1,"path":["std","process","ChildStdin"],"kind":"struct"},"2:25686:266":{"crate_id":2,"path":["core","num","wrapping","Wrapping"],"kind":"struct"},"2:42223:3574":{"crate_id":2,"path":["core","fmt","num","UpperHex"],"kind":"struct"},"24:5263:3362":{"crate_id":24,"path":["syn","expr","ExprIf"],"kind":"struct"},"2:7646:3479":{"crate_id":2,"path":["core","iter","range","Step"],"kind":"trait"},"2:7876:3484":{"crate_id":2,"path":["core","iter","sources","once","once"],"kind":"function"},"6:1653:7078":{"crate_id":6,"path":["libc","unix","linux_like","arpreq"],"kind":"struct"},"2:43339:8878":{"crate_id":2,"path":["core","str","iter","CharIndices"],"kind":"struct"},"16:5400:5492":{"crate_id":16,"path":["gimli","endianity","BigEndian"],"kind":"struct"},"17:14147:5835":{"crate_id":17,"path":["object","macho","DysymtabCommand"],"kind":"struct"},"17:9755:23389":{"crate_id":17,"path":["object","common","AddressSize"],"kind":"enum"},"2:39267:8051":{"crate_id":2,"path":["core","any","TypeId"],"kind":"struct"},"1:12085:1653":{"crate_id":1,"path":["std","u16"],"kind":"primitive"},"2:42759:8873":{"crate_id":2,"path":["core","hash","sip","Sip24Rounds"],"kind":"struct"},"1:928:10538":{"crate_id":1,"path":["std","collections","hash","map","RawEntryMut"],"kind":"enum"},"2:22762:33299":{"crate_id":2,"path":["core","num","flt2dec","Sign"],"kind":"enum"},"1:11347:8962":{"crate_id":1,"path":["std","sys_common","process","CommandEnv"],"kind":"struct"},"2:10839:10619":{"crate_id":2,"path":["core","slice","index","private_slice_index","Sealed"],"kind":"trait"},"16:2374:6434":{"crate_id":16,"path":["gimli","common","Register"],"kind":"struct"},"16:7085:8733":{"crate_id":16,"path":["gimli","read","lookup","DebugLookup"],"kind":"struct"},"24:5501:2126":{"crate_id":24,"path":["syn","generics","WherePredicate"],"kind":"enum"},"17:11557:23518":{"crate_id":17,"path":["object","read","elf","note","GnuPropertyIterator"],"kind":"struct"},"17:16176:6406":{"crate_id":17,"path":["object","xcoff","FunAux64"],"kind":"struct"},"6:6417:7539":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","aiocb"],"kind":"struct"},"6:5225:7302":{"crate_id":6,"path":["libc","unix","linux_like","linux","arpd_request"],"kind":"struct"},"2:40479:3531":{"crate_id":2,"path":["core","iter","adapters","take_while","TakeWhile"],"kind":"struct"},"16:7528:8741":{"crate_id":16,"path":["gimli","read","pubnames","PubNamesEntry"],"kind":"struct"},"20:680:3442":{"crate_id":20,"path":["proc_macro2","marker","ProcMacroAutoTraits"],"kind":"struct"},"18:515:5372":{"crate_id":18,"path":["memchr","memmem","prefilter","PrefilterFn"],"kind":"struct"},"16:4531:6496":{"crate_id":16,"path":["gimli","constants","DwDs"],"kind":"struct"},"6:6542:7602":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","rtentry"],"kind":"struct"},"2:8566:3500":{"crate_id":2,"path":["core","iter","traits","marker","TrustedStep"],"kind":"trait"},"6:7561:7886":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","shmid_ds"],"kind":"struct"},"2:1915:4654":{"crate_id":2,"path":["core","mem","Discriminant"],"kind":"struct"},"3:0:481":{"crate_id":3,"path":["compiler_builtins"],"kind":"module"},"2:33425:5330":{"crate_id":2,"path":["core","ops","bit","BitAnd"],"kind":"trait"},"1:8023:9997":{"crate_id":1,"path":["std","io","buffered","IntoInnerError"],"kind":"struct"},"17:14994:6087":{"crate_id":17,"path":["object","pe","Guid"],"kind":"struct"},"6:6811:7716":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_data"],"kind":"union"},"21:1002:3604":{"crate_id":21,"path":["proc_macro","bridge","client","SourceFile"],"kind":"struct"},"2:5969:3521":{"crate_id":2,"path":["core","iter","adapters","flatten","FlatMap"],"kind":"struct"},"16:6849:8722":{"crate_id":16,"path":["gimli","read","line","IncompleteLineProgram"],"kind":"struct"},"2:3504:147":{"crate_id":2,"path":["core","ops","try_trait","FromResidual"],"kind":"trait"},"17:4986:23613":{"crate_id":17,"path":["object","read","xcoff","relocation","XcoffRelocationIterator"],"kind":"struct"},"2:8101:166":{"crate_id":2,"path":["core","iter","traits","collect","IntoIterator"],"kind":"trait"},"17:11621:8580":{"crate_id":17,"path":["object","read","elf","version","VersionTable"],"kind":"struct"},"17:13877:5798":{"crate_id":17,"path":["object","macho","SegmentCommand64"],"kind":"struct"},"1:3014:138":{"crate_id":1,"path":["std","io","error","Error"],"kind":"struct"},"1:6276:10102":{"crate_id":1,"path":["std","sync","mpmc","zero","ZeroToken"],"kind":"struct"},"6:7584:7898":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user_fpregs_struct"],"kind":"struct"},"16:6231:8680":{"crate_id":16,"path":["gimli","read","cfi","CallFrameInstructionIter"],"kind":"struct"},"24:5267:3343":{"crate_id":24,"path":["syn","expr","ExprIndex"],"kind":"struct"},"6:5306:7344":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_filter"],"kind":"struct"},"16:8073:3322":{"crate_id":16,"path":["gimli","read","unit","Attribute"],"kind":"struct"},"24:5535:2332":{"crate_id":24,"path":["syn","lit","Lit"],"kind":"enum"},"2:4307:111":{"crate_id":2,"path":["core","asserting","Capture"],"kind":"struct"},"17:15720:6289":{"crate_id":17,"path":["object","pe","ImageDebugDirectory"],"kind":"struct"},"17:11865:23563":{"crate_id":17,"path":["object","read","macho","file","MachOComdatSectionIterator"],"kind":"struct"},"2:13611:8816":{"crate_id":2,"path":["core","task","wake","LocalWaker"],"kind":"struct"},"1:3312:10657":{"crate_id":1,"path":["std","io","stdio","Stdout"],"kind":"struct"},"5:6074:16359":{"crate_id":5,"path":["alloc","sync","ArcInner"],"kind":"struct"},"16:8313:138":{"crate_id":16,"path":["gimli","read","Error"],"kind":"enum"},"16:7799:6465":{"crate_id":16,"path":["gimli","read","unit","DebugInfo"],"kind":"struct"},"16:7473:6624":{"crate_id":16,"path":["gimli","read","op","Expression"],"kind":"struct"},"6:5415:7386":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_initmsg"],"kind":"struct"},"16:7741:6477":{"crate_id":16,"path":["gimli","read","str","DebugStrOffsets"],"kind":"struct"},"11:2231:8774":{"crate_id":11,"path":["hashbrown","table","HashTable"],"kind":"struct"},"6:5665:7503":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_txtime"],"kind":"struct"},"24:1774:3430":{"crate_id":24,"path":["syn","parse","Parse"],"kind":"trait"},"2:12496:8885":{"crate_id":2,"path":["core","str","iter","SplitNInternal"],"kind":"struct"},"17:10068:23396":{"crate_id":17,"path":["object","common","SectionFlags"],"kind":"enum"},"16:5742:8619":{"crate_id":16,"path":["gimli","read","cfi","ParsedEhFrameHdr"],"kind":"struct"},"11:1676:5122":{"crate_id":11,"path":["hashbrown","scopeguard","ScopeGuard"],"kind":"struct"},"1:557:4581":{"crate_id":1,"path":["std","thread","JoinHandle"],"kind":"struct"},"1:893:4801":{"crate_id":1,"path":["std","collections","hash","map","Drain"],"kind":"struct"},"1:10248:115":{"crate_id":1,"path":["std","sys","pal","unix","process","process_common","Command"],"kind":"struct"},"2:40493:3532":{"crate_id":2,"path":["core","iter","adapters","zip","Zip"],"kind":"struct"},"24:5396:63":{"crate_id":24,"path":["syn","expr","parsing","kw","raw"],"kind":"struct"},"24:1776:2065":{"crate_id":24,"path":["syn","parse","ParseStream"],"kind":"type_alias"},"17:12516:23612":{"crate_id":17,"path":["object","read","xcoff","file","XcoffFile"],"kind":"struct"},"11:1917:8773":{"crate_id":11,"path":["hashbrown","set","SymmetricDifference"],"kind":"struct"},"6:5630:7489":{"crate_id":6,"path":["libc","unix","linux_like","linux","ifconf"],"kind":"struct"},"2:4417:3595":{"crate_id":2,"path":["core","cell","lazy","LazyCell"],"kind":"struct"},"1:4018:10690":{"crate_id":1,"path":["std","os","unix","ffi","os_str","OsStrExt"],"kind":"trait"},"6:1503:6976":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreq_source"],"kind":"struct"},"24:3229:3675":{"crate_id":24,"path":["syn","token","Extern"],"kind":"struct"},"17:13485:5704":{"crate_id":17,"path":["object","elf","Dyn64"],"kind":"struct"},"1:8287:3516":{"crate_id":1,"path":["std","io","Chain"],"kind":"struct"},"2:45697:8265":{"crate_id":2,"path":["core","core_arch","simd","f64x2"],"kind":"struct"},"6:0:892":{"crate_id":6,"path":["libc"],"kind":"module"},"1:3576:10617":{"crate_id":1,"path":["std","io","Seek"],"kind":"trait"},"1:3012:226":{"crate_id":1,"path":["std","io","error","Result"],"kind":"type_alias"},"1:8267:10618":{"crate_id":1,"path":["std","io","SeekFrom"],"kind":"enum"},"2:43238:3505":{"crate_id":2,"path":["core","slice","iter","ArrayChunks"],"kind":"struct"},"24:5896:3400":{"crate_id":24,"path":["syn","ty","TypeGroup"],"kind":"struct"},"2:10210:3571":{"crate_id":2,"path":["core","fmt","LowerExp"],"kind":"trait"},"2:43181:15979":{"crate_id":2,"path":["core","slice","iter","ChunksMut"],"kind":"struct"},"1:8334:10667":{"crate_id":1,"path":["std","net","Shutdown"],"kind":"enum"},"1:6244:5212":{"crate_id":1,"path":["std","sync","mpmc","waker","SyncWaker"],"kind":"struct"},"11:856:10539":{"crate_id":11,"path":["hashbrown","map","RawOccupiedEntryMut"],"kind":"struct"},"24:5419:2545":{"crate_id":24,"path":["syn","generics","GenericParam"],"kind":"enum"},"2:44275:219":{"crate_id":2,"path":["core","future","ready","Ready"],"kind":"struct"},"1:4132:10700":{"crate_id":1,"path":["std","os","unix","fs","DirBuilderExt"],"kind":"trait"},"18:563:5375":{"crate_id":18,"path":["memchr","memmem","rarebytes","RareNeedleBytes"],"kind":"struct"},"16:6342:36754":{"crate_id":16,"path":["gimli","read","dwarf","RangeIterInner"],"kind":"enum"},"2:6083:3509":{"crate_id":2,"path":["core","iter","adapters","flatten","Flatten"],"kind":"struct"},"1:1826:10552":{"crate_id":1,"path":["std","env","VarsOs"],"kind":"struct"},"17:15931:5641":{"crate_id":17,"path":["object","xcoff","FileHeader32"],"kind":"struct"},"16:6494:8689":{"crate_id":16,"path":["gimli","read","aranges","ArangeHeaderIter"],"kind":"struct"},"5:1555:10093":{"crate_id":5,"path":["alloc","collections","btree","map","IntoValues"],"kind":"struct"},"14:31:9977":{"crate_id":14,"path":["rustc_demangle","v0","Demangle"],"kind":"struct"},"1:12073:1552":{"crate_id":1,"path":["std","str"],"kind":"primitive"},"2:3131:4701":{"crate_id":2,"path":["core","ops","async_function","AsyncFn"],"kind":"trait"},"16:867:36757":{"crate_id":16,"path":["gimli","read","endian_slice","DebugByte"],"kind":"struct"},"17:15434:6193":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation32V2"],"kind":"struct"},"1:11642:28181":{"crate_id":1,"path":["std","panicking","panic_count","MustAbort"],"kind":"enum"},"2:44272:150":{"crate_id":2,"path":["core","future","future","Future"],"kind":"trait"},"1:7835:10532":{"crate_id":1,"path":["std","backtrace","RawFrame"],"kind":"enum"},"17:13972:5536":{"crate_id":17,"path":["object","macho","Dylib"],"kind":"struct"},"5:3237:3419":{"crate_id":5,"path":["alloc","collections","btree","set","Iter"],"kind":"struct"},"5:3278:8771":{"crate_id":5,"path":["alloc","collections","btree","set","Intersection"],"kind":"struct"},"2:22362:10918":{"crate_id":2,"path":["core","core_simd","simd","ptr","mut_ptr","SimdMutPtr"],"kind":"trait"},"17:15058:6097":{"crate_id":17,"path":["object","pe","ImageSectionHeader"],"kind":"struct"},"16:5075:6513":{"crate_id":16,"path":["gimli","constants","DwMacro"],"kind":"struct"},"16:5367:23329":{"crate_id":16,"path":["gimli","endianity","RunTimeEndian"],"kind":"enum"},"2:40141:3506":{"crate_id":2,"path":["core","iter","adapters","by_ref_sized","ByRefSized"],"kind":"struct"},"16:8136:8755":{"crate_id":16,"path":["gimli","read","unit","EntriesCursor"],"kind":"struct"},"17:12030:23529":{"crate_id":17,"path":["object","read","macho","segment","MachOSegmentIterator"],"kind":"struct"},"2:22104:10830":{"crate_id":2,"path":["core","core_simd","vector","SimdElement"],"kind":"trait"},"9:482:22314":{"crate_id":9,"path":["miniz_oxide","DataFormat"],"kind":"enum"},"6:6478:7569":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","termios"],"kind":"struct"},"1:9121:27876":{"crate_id":1,"path":["std","sync","mpmc","select","Selected"],"kind":"enum"},"1:12078:700":{"crate_id":1,"path":["std","f64"],"kind":"primitive"},"17:13064:5621":{"crate_id":17,"path":["object","read","CompressedData"],"kind":"struct"},"1:9067:27949":{"crate_id":1,"path":["std","sync","mpmc","error","SendTimeoutError"],"kind":"enum"},"1:4721:7811":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt","st_ctime"],"kind":"function"},"17:15814:6310":{"crate_id":17,"path":["object","pe","ImageArchitectureEntry"],"kind":"struct"},"0:965:1855":{"crate_id":0,"path":["serde_derive","Deserialize"],"kind":"proc_derive"},"1:414:185":{"crate_id":1,"path":["std","thread","local","LocalKey"],"kind":"struct"},"2:40201:3519":{"crate_id":2,"path":["core","iter","adapters","filter","Filter"],"kind":"struct"},"17:13738:5770":{"crate_id":17,"path":["object","macho","DyldCacheImageInfo"],"kind":"struct"},"16:6802:8709":{"crate_id":16,"path":["gimli","read","line","LineSequence"],"kind":"struct"},"6:5181:7279":{"crate_id":6,"path":["libc","unix","linux_like","linux","mntent"],"kind":"struct"},"17:11214:23442":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdatIterator"],"kind":"struct"},"2:46486:8342":{"crate_id":2,"path":["core","core_arch","x86","__m256"],"kind":"struct"},"24:5887:3399":{"crate_id":24,"path":["syn","ty","TypeBareFn"],"kind":"struct"},"2:4295:34249":{"crate_id":2,"path":["core","asserting","TryCaptureWithDebug"],"kind":"struct"},"18:481:8556":{"crate_id":18,"path":["memchr","cow","CowBytes"],"kind":"struct"},"17:0:3186":{"crate_id":17,"path":["object"],"kind":"module"},"24:3331:3680":{"crate_id":24,"path":["syn","token","In"],"kind":"struct"},"24:4441:3714":{"crate_id":24,"path":["syn","token","Ge"],"kind":"struct"},"17:10905:23423":{"crate_id":17,"path":["object","read","any","SectionRelocationIterator"],"kind":"struct"},"1:3231:28776":{"crate_id":1,"path":["std","io","stdio","StdinRaw"],"kind":"struct"},"2:40242:3523":{"crate_id":2,"path":["core","iter","adapters","inspect","Inspect"],"kind":"struct"},"17:12969:5613":{"crate_id":17,"path":["object","read","CodeView"],"kind":"struct"},"2:40295:3526":{"crate_id":2,"path":["core","iter","adapters","rev","Rev"],"kind":"struct"},"17:15748:6298":{"crate_id":17,"path":["object","pe","ImageDebugMisc"],"kind":"struct"},"1:11394:8965":{"crate_id":1,"path":["std","sys_common","wtf8","Wtf8Buf"],"kind":"struct"},"24:3195:3674":{"crate_id":24,"path":["syn","token","Else"],"kind":"struct"},"23:239:4284":{"crate_id":23,"path":["quote","__private","get_span","GetSpanInner"],"kind":"struct"},"10:0:3180":{"crate_id":10,"path":["adler"],"kind":"module"},"17:15266:6150":{"crate_id":17,"path":["object","pe","ImageImportByName"],"kind":"struct"},"1:7131:5221":{"crate_id":1,"path":["std","sys_common","lazy_box","LazyBox"],"kind":"struct"},"1:8497:8431":{"crate_id":1,"path":["std","path","Prefix"],"kind":"enum"},"24:5588:3382":{"crate_id":24,"path":["syn","lit","LitBool"],"kind":"struct"},"6:6562:7618":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","timex"],"kind":"struct"},"2:45321:8232":{"crate_id":2,"path":["core","core_arch","simd","i8x4"],"kind":"struct"},"17:9886:23411":{"crate_id":17,"path":["object","common","SymbolKind"],"kind":"enum"},"2:31971:244":{"crate_id":2,"path":["core","marker","StructuralPartialEq"],"kind":"trait"},"17:10612:23418":{"crate_id":17,"path":["object","read","any","SectionIterator"],"kind":"struct"},"2:3053:119":{"crate_id":2,"path":["core","marker","Copy"],"kind":"trait"},"16:7006:23341":{"crate_id":16,"path":["gimli","read","loclists","RawLocListIter"],"kind":"struct"},"24:5586:3386":{"crate_id":24,"path":["syn","lit","LitFloat"],"kind":"struct"},"17:15092:6109":{"crate_id":17,"path":["object","pe","ImageSymbolBytes"],"kind":"struct"},"6:4985:7228":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_ramp_effect"],"kind":"struct"},"16:6300:23336":{"crate_id":16,"path":["gimli","read","dwarf","DwarfPackage"],"kind":"struct"},"24:4586:3724":{"crate_id":24,"path":["syn","token","OrEq"],"kind":"struct"},"2:39908:8179":{"crate_id":2,"path":["core","char","convert","CharTryFromError"],"kind":"struct"},"1:3270:10655":{"crate_id":1,"path":["std","io","stdio","Stdin"],"kind":"struct"},"5:6692:3418":{"crate_id":5,"path":["alloc","vec","into_iter","IntoIter"],"kind":"struct"},"24:4569:3723":{"crate_id":24,"path":["syn","token","Or"],"kind":"struct"},"6:5296:7340":{"crate_id":6,"path":["libc","unix","linux_like","linux","j1939_filter"],"kind":"struct"},"20:885:2058":{"crate_id":20,"path":["proc_macro2","Span"],"kind":"struct"},"2:44334:8221":{"crate_id":2,"path":["core","task","wake","RawWakerVTable"],"kind":"struct"},"5:941:3419":{"crate_id":5,"path":["alloc","collections","binary_heap","Iter"],"kind":"struct"},"24:5789:3395":{"crate_id":24,"path":["syn","restriction","Visibility"],"kind":"enum"},"2:43922:8911":{"crate_id":2,"path":["core","str","pattern","StrSearcher"],"kind":"struct"},"9:392:22316":{"crate_id":9,"path":["miniz_oxide","MZFlush"],"kind":"enum"},"2:40272:3510":{"crate_id":2,"path":["core","iter","adapters","map_while","MapWhile"],"kind":"struct"},"19:0:1147":{"crate_id":19,"path":["panic_unwind"],"kind":"module"},"16:7711:210":{"crate_id":16,"path":["gimli","read","rnglists","Range"],"kind":"struct"},"2:44091:8928":{"crate_id":2,"path":["core","str","IsWhitespace"],"kind":"struct"},"6:8317:7939":{"crate_id":6,"path":["libc","unix","linux_like","linux","canfd_frame"],"kind":"struct"},"6:7461:7826":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_xmmreg"],"kind":"struct"},"11:2369:22399":{"crate_id":11,"path":["hashbrown","table","AbsentEntry"],"kind":"struct"},"6:5146:7275":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Shdr"],"kind":"struct"},"24:355:3557":{"crate_id":24,"path":["syn","buffer","Cursor"],"kind":"struct"},"17:13723:5766":{"crate_id":17,"path":["object","macho","DyldCacheMappingInfo"],"kind":"struct"},"2:30460:33275":{"crate_id":2,"path":["core","ptr","alignment","AlignmentEnum64"],"kind":"enum"},"17:15473:6205":{"crate_id":17,"path":["object","pe","ImageLoadConfigDirectory32"],"kind":"struct"},"2:39190:214":{"crate_id":2,"path":["core","ops","range","RangeInclusive"],"kind":"struct"},"1:8447:8422":{"crate_id":1,"path":["std","os","fd","owned","BorrowedFd"],"kind":"struct"},"6:1517:6981":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_in"],"kind":"struct"},"20:777:3441":{"crate_id":20,"path":["proc_macro2","extra","DelimSpan"],"kind":"struct"},"24:306:37146":{"crate_id":24,"path":["syn","bigint","BigInt"],"kind":"struct"},"2:42452:3562":{"crate_id":2,"path":["core","fmt","rt","Alignment"],"kind":"enum"},"2:10168:144":{"crate_id":2,"path":["core","fmt","Formatter"],"kind":"struct"},"17:14311:5875":{"crate_id":17,"path":["object","macho","LinkeditDataCommand"],"kind":"struct"},"2:33170:5344":{"crate_id":2,"path":["core","ops","arith","MulAssign"],"kind":"trait"},"17:15655:6270":{"crate_id":17,"path":["object","pe","ImageEnclaveConfig32"],"kind":"struct"},"20:794:251":{"crate_id":20,"path":["proc_macro2","imp","TokenStream"],"kind":"enum"},"2:43172:8811":{"crate_id":2,"path":["core","slice","iter","Chunks"],"kind":"struct"},"24:4482:3717":{"crate_id":24,"path":["syn","token","Le"],"kind":"struct"},"6:6915:7756":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","semid_ds"],"kind":"struct"},"17:9916:23412":{"crate_id":17,"path":["object","common","SymbolScope"],"kind":"enum"},"21:2624:3603":{"crate_id":21,"path":["proc_macro","ExpandError"],"kind":"struct"},"16:2394:6435":{"crate_id":16,"path":["gimli","common","DebugAbbrevOffset"],"kind":"struct"},"6:6788:7710":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","sifields_sigchld"],"kind":"struct"},"23:344:1244":{"crate_id":23,"path":["quote","quote"],"kind":"macro"},"17:10671:36785":{"crate_id":17,"path":["object","read","any","ComdatIteratorInternal"],"kind":"enum"},"5:6413:10921":{"crate_id":5,"path":["alloc","task","Wake"],"kind":"trait"},"24:3688:3692":{"crate_id":24,"path":["syn","token","Typeof"],"kind":"struct"},"24:5228:3340":{"crate_id":24,"path":["syn","expr","ExprCall"],"kind":"struct"},"2:41712:90":{"crate_id":2,"path":["core","sync","atomic","AtomicI8"],"kind":"struct"},"16:4856:6506":{"crate_id":16,"path":["gimli","constants","DwOrd"],"kind":"struct"},"2:41408:8866":{"crate_id":2,"path":["core","net","parser","AddrParseError"],"kind":"struct"},"2:43885:8910":{"crate_id":2,"path":["core","str","pattern","CharPredicateSearcher"],"kind":"struct"},"17:11392:23474":{"crate_id":17,"path":["object","read","elf","section","ElfSectionIterator"],"kind":"struct"},"1:637:10526":{"crate_id":1,"path":["std","backtrace","BacktraceFrame"],"kind":"struct"},"24:1102:37094":{"crate_id":24,"path":["syn","generics","ConstParamsMut"],"kind":"struct"},"2:12535:8891":{"crate_id":2,"path":["core","str","iter","MatchesInternal"],"kind":"struct"},"2:42469:33838":{"crate_id":2,"path":["core","fmt","rt","Count"],"kind":"enum"},"2:46387:8335":{"crate_id":2,"path":["core","core_arch","simd","i64x8"],"kind":"struct"},"24:5914:3406":{"crate_id":24,"path":["syn","ty","TypePtr"],"kind":"struct"},"2:42202:2595":{"crate_id":2,"path":["core","fmt","num","Binary"],"kind":"struct"},"17:13568:5729":{"crate_id":17,"path":["object","elf","NoteHeader32"],"kind":"struct"},"1:4717:7807":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt","st_atime"],"kind":"function"},"6:4824:7140":{"crate_id":6,"path":["libc","unix","linux_like","linux","dqblk"],"kind":"struct"},"6:5122:7273":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Phdr"],"kind":"struct"},"1:10691:8955":{"crate_id":1,"path":["std","sys","pal","unix","fs","StatxExtraFields"],"kind":"struct"},"1:3469:5149":{"crate_id":1,"path":["std","io","Guard"],"kind":"struct"},"24:5580:3383":{"crate_id":24,"path":["syn","lit","LitByte"],"kind":"struct"},"2:39942:8839":{"crate_id":2,"path":["core","char","EscapeUnicode"],"kind":"struct"},"16:6456:23338":{"crate_id":16,"path":["gimli","read","abbrev","Attributes"],"kind":"enum"},"17:13272:5668":{"crate_id":17,"path":["object","elf","SectionHeader64"],"kind":"struct"},"2:40304:3527":{"crate_id":2,"path":["core","iter","adapters","scan","Scan"],"kind":"struct"},"2:33771:5329":{"crate_id":2,"path":["core","ops","bit","BitXor"],"kind":"trait"},"21:457:5113":{"crate_id":21,"path":["proc_macro","bridge","server","RunningSameThreadGuard"],"kind":"struct"},"5:3032:3685":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Mut"],"kind":"struct"},"17:10524:23417":{"crate_id":17,"path":["object","read","any","SegmentIterator"],"kind":"struct"},"11:490:154":{"crate_id":11,"path":["hashbrown","map","HashMap"],"kind":"struct"},"17:11026:23437":{"crate_id":17,"path":["object","read","archive","MemberHeader"],"kind":"enum"},"5:3740:5125":{"crate_id":5,"path":["alloc","collections","linked_list","drop","DropGuard"],"kind":"struct"},"11:1728:156":{"crate_id":11,"path":["hashbrown","set","HashSet"],"kind":"struct"},"17:15390:6183":{"crate_id":17,"path":["object","pe","ImageResourceDataEntry"],"kind":"struct"},"24:5759:2659":{"crate_id":24,"path":["syn","path","AngleBracketedGenericArguments"],"kind":"struct"},"2:43662:8840":{"crate_id":2,"path":["core","str","iter","EscapeDebug"],"kind":"struct"},"24:2570:2681":{"crate_id":24,"path":["syn","spanned","Spanned"],"kind":"trait"},"6:4876:7176":{"crate_id":6,"path":["libc","unix","linux_like","linux","packet_mreq"],"kind":"struct"},"17:12353:8602":{"crate_id":17,"path":["object","read","pe","import","ImportDescriptorIterator"],"kind":"struct"},"5:1828:4799":{"crate_id":5,"path":["alloc","collections","btree","map","ExtractIf"],"kind":"struct"},"24:5924:3408":{"crate_id":24,"path":["syn","ty","TypeSlice"],"kind":"struct"},"21:2689:3604":{"crate_id":21,"path":["proc_macro","SourceFile"],"kind":"struct"},"2:45338:8233":{"crate_id":2,"path":["core","core_arch","simd","i16x2"],"kind":"struct"},"20:783:27680":{"crate_id":20,"path":["proc_macro2","extra","DelimSpanEnum"],"kind":"enum"},"24:5933:67":{"crate_id":24,"path":["syn","ty","Abi"],"kind":"struct"},"1:918:10093":{"crate_id":1,"path":["std","collections","hash","map","IntoValues"],"kind":"struct"},"2:41563:3999":{"crate_id":2,"path":["core","panic","location","Location"],"kind":"struct"},"6:6435:7552":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__exit_status"],"kind":"struct"},"21:243:36890":{"crate_id":21,"path":["proc_macro","bridge","handle","OwnedStore"],"kind":"struct"},"17:11242:23464":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdatSectionIterator"],"kind":"struct"},"1:9095:10101":{"crate_id":1,"path":["std","sync","mpmc","list","ListToken"],"kind":"struct"},"1:11649:8970":{"crate_id":1,"path":["std","backtrace_rs","backtrace","Frame"],"kind":"struct"},"24:5359:3375":{"crate_id":24,"path":["syn","expr","ExprYield"],"kind":"struct"},"6:5031:7252":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_ff_upload"],"kind":"struct"},"1:8934:3419":{"crate_id":1,"path":["std","sync","mpsc","Iter"],"kind":"struct"},"2:9852:34239":{"crate_id":2,"path":["core","fmt","builders","PadAdapter"],"kind":"struct"},"1:3234:31584":{"crate_id":1,"path":["std","io","stdio","StdoutRaw"],"kind":"struct"},"18:706:8567":{"crate_id":18,"path":["memchr","memmem","Searcher"],"kind":"struct"},"17:9858:23410":{"crate_id":17,"path":["object","common","ComdatKind"],"kind":"enum"},"24:4494:3718":{"crate_id":24,"path":["syn","token","Lt"],"kind":"struct"},"21:1381:2072":{"crate_id":21,"path":["proc_macro","bridge","symbol","Symbol"],"kind":"struct"},"6:6721:7688":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_mmap_offsets_v1"],"kind":"struct"},"11:396:5120":{"crate_id":11,"path":["hashbrown","raw","RawDrain"],"kind":"struct"},"24:4470:3716":{"crate_id":24,"path":["syn","token","LArrow"],"kind":"struct"},"17:15778:6306":{"crate_id":17,"path":["object","pe","ImageSeparateDebugHeader"],"kind":"struct"},"2:3544:3592":{"crate_id":2,"path":["core","ops","unsize","CoerceUnsized"],"kind":"trait"},"2:40717:3491":{"crate_id":2,"path":["core","iter","sources","repeat_n","RepeatN"],"kind":"struct"},"17:14177:5854":{"crate_id":17,"path":["object","macho","DylibTableOfContents"],"kind":"struct"},"24:5250:3342":{"crate_id":24,"path":["syn","expr","ExprField"],"kind":"struct"},"6:1526:6986":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_in6"],"kind":"struct"},"17:1207:23451":{"crate_id":17,"path":["object","read","coff","relocation","CoffRelocationIterator"],"kind":"struct"},"24:5414:1999":{"crate_id":24,"path":["syn","generics","Generics"],"kind":"struct"},"16:6412:23337":{"crate_id":16,"path":["gimli","read","abbrev","AbbreviationsCacheStrategy"],"kind":"enum"},"16:4560:6497":{"crate_id":16,"path":["gimli","constants","DwEnd"],"kind":"struct"},"16:6398:6458":{"crate_id":16,"path":["gimli","read","abbrev","DebugAbbrev"],"kind":"struct"},"24:5902:3402":{"crate_id":24,"path":["syn","ty","TypeInfer"],"kind":"struct"},"2:42497:74":{"crate_id":2,"path":["core","fmt","rt","Argument"],"kind":"struct"},"16:2478:6439":{"crate_id":16,"path":["gimli","common","DebugInfoOffset"],"kind":"struct"},"6:6609:7644":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","regex_t"],"kind":"struct"},"1:10730:140":{"crate_id":1,"path":["std","sys","pal","unix","fs","FileType"],"kind":"struct"},"5:1309:8740":{"crate_id":5,"path":["alloc","collections","btree","map","entry","Entry"],"kind":"enum"},"16:6588:8694":{"crate_id":16,"path":["gimli","read","index","UnitIndex"],"kind":"struct"},"17:11537:23489":{"crate_id":17,"path":["object","read","elf","note","NoteIterator"],"kind":"struct"},"1:7950:8941":{"crate_id":1,"path":["std","fs","OpenOptions"],"kind":"struct"},"17:14025:5817":{"crate_id":17,"path":["object","macho","SubUmbrellaCommand"],"kind":"struct"},"17:12264:23569":{"crate_id":17,"path":["object","read","pe","section","PeSection"],"kind":"struct"},"6:8247:7923":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_mutexattr_t"],"kind":"struct"},"5:1153:36687":{"crate_id":5,"path":["alloc","collections","btree","append","MergeIter"],"kind":"struct"},"17:10155:5491":{"crate_id":17,"path":["object","endian","LittleEndian"],"kind":"struct"},"2:32058:116":{"crate_id":2,"path":["core","marker","ConstParamTy"],"kind":"trait"},"1:4719:7809":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt","st_mtime"],"kind":"function"},"20:880:251":{"crate_id":20,"path":["proc_macro2","TokenStream"],"kind":"struct"},"1:12087:1655":{"crate_id":1,"path":["std","u64"],"kind":"primitive"},"24:5764:2371":{"crate_id":24,"path":["syn","path","AssocType"],"kind":"struct"},"2:8064:3503":{"crate_id":2,"path":["core","iter","traits","accum","Product"],"kind":"trait"},"16:4830:6505":{"crate_id":16,"path":["gimli","constants","DwInl"],"kind":"struct"},"17:14560:5919":{"crate_id":17,"path":["object","macho","Nlist64"],"kind":"struct"},"5:3025:2234":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Owned"],"kind":"enum"},"5:2756:7951":{"crate_id":5,"path":["alloc","collections","btree","node","Handle"],"kind":"struct"},"5:3304:2028":{"crate_id":5,"path":["alloc","collections","btree","set","Union"],"kind":"struct"},"1:6967:5220":{"crate_id":1,"path":["std","sys","pal","common","thread_local","abort_on_dtor_unwind","DtorUnwindGuard"],"kind":"struct"},"24:3518:3585":{"crate_id":24,"path":["syn","token","Ref"],"kind":"struct"},"17:14012:5816":{"crate_id":17,"path":["object","macho","SubClientCommand"],"kind":"struct"},"6:5457:7416":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_nxtinfo"],"kind":"struct"},"17:10915:36786":{"crate_id":17,"path":["object","read","any","SectionRelocationIteratorInternal"],"kind":"enum"},"1:0:1544":{"crate_id":1,"path":["std"],"kind":"module"},"6:1680:7091":{"crate_id":6,"path":["libc","unix","linux_like","mmsghdr"],"kind":"struct"},"6:8271:7927":{"crate_id":6,"path":["libc","unix","linux_like","linux","fanotify_event_metadata"],"kind":"struct"},"1:7088:10000":{"crate_id":1,"path":["std","sys_common","backtrace","_print","DisplayBacktrace"],"kind":"struct"},"24:4598:3725":{"crate_id":24,"path":["syn","token","OrOr"],"kind":"struct"},"2:2610:201":{"crate_id":2,"path":["core","cmp","PartialEq"],"kind":"trait"},"1:8243:8416":{"crate_id":1,"path":["std","io","util","Sink"],"kind":"struct"},"1:3750:10669":{"crate_id":1,"path":["std","net","socket_addr","ToSocketAddrs"],"kind":"trait"},"1:10174:10777":{"crate_id":1,"path":["std","sys","pal","unix","pipe","AnonPipe"],"kind":"struct"},"17:15769:6304":{"crate_id":17,"path":["object","pe","ImageFunctionEntry64"],"kind":"struct"},"1:11041:8460":{"crate_id":1,"path":["std","sys","pal","unix","time","Timespec"],"kind":"struct"},"23:38:3056":{"crate_id":23,"path":["quote","format_ident"],"kind":"macro"},"11:2403:3423":{"crate_id":11,"path":["hashbrown","table","IterMut"],"kind":"struct"},"24:4511:3719":{"crate_id":24,"path":["syn","token","Minus"],"kind":"struct"},"17:14868:6044":{"crate_id":17,"path":["object","pe","ImageDataDirectory"],"kind":"struct"},"2:44293:207":{"crate_id":2,"path":["core","task","poll","Poll"],"kind":"enum"},"16:4502:6495":{"crate_id":16,"path":["gimli","constants","DwLle"],"kind":"struct"},"24:5582:3385":{"crate_id":24,"path":["syn","lit","LitChar"],"kind":"struct"},"16:2768:6452":{"crate_id":16,"path":["gimli","common","DebugStrOffsetsBase"],"kind":"struct"},"2:40735:3495":{"crate_id":2,"path":["core","iter","sources","successors","Successors"],"kind":"struct"},"24:5276:3364":{"crate_id":24,"path":["syn","expr","ExprLet"],"kind":"struct"},"24:3569:3690":{"crate_id":24,"path":["syn","token","SelfValue"],"kind":"struct"},"17:11647:8583":{"crate_id":17,"path":["object","read","elf","version","VerdauxIterator"],"kind":"struct"},"2:11123:15980":{"crate_id":2,"path":["core","slice","iter","SplitMut"],"kind":"struct"},"1:1824:10551":{"crate_id":1,"path":["std","env","Vars"],"kind":"struct"},"24:3824:267":{"crate_id":24,"path":["syn","token","Yield"],"kind":"struct"},"18:507:5369":{"crate_id":18,"path":["memchr","memmem","genericsimd","Forward"],"kind":"struct"},"1:8985:10799":{"crate_id":1,"path":["std","sync","mpsc","TryRecvError"],"kind":"enum"},"16:6758:6559":{"crate_id":16,"path":["gimli","read","line","LineRow"],"kind":"struct"},"24:3467:3686":{"crate_id":24,"path":["syn","token","Override"],"kind":"struct"},"11:1582:22397":{"crate_id":11,"path":["hashbrown","rustc_entry","RustcOccupiedEntry"],"kind":"struct"},"17:12647:23603":{"crate_id":17,"path":["object","read","xcoff","comdat","XcoffComdatIterator"],"kind":"struct"},"1:11353:10778":{"crate_id":1,"path":["std","sys_common","process","CommandEnvs"],"kind":"struct"},"24:1086:37093":{"crate_id":24,"path":["syn","generics","TypeParamsMut"],"kind":"struct"},"17:11075:5510":{"crate_id":17,"path":["object","read","coff","section","SectionTable"],"kind":"struct"},"5:3806:10545":{"crate_id":5,"path":["alloc","collections","linked_list","CursorMut"],"kind":"struct"},"17:12949:5575":{"crate_id":17,"path":["object","read","Export"],"kind":"struct"},"6:8197:7922":{"crate_id":6,"path":["libc","unix","linux_like","linux","arch","generic","termios2"],"kind":"struct"},"17:15616:6261":{"crate_id":17,"path":["object","pe","ImageArm64RuntimeFunctionEntry"],"kind":"struct"},"5:3249:35403":{"crate_id":5,"path":["alloc","collections","btree","set","DifferenceInner"],"kind":"enum"},"1:4120:10697":{"crate_id":1,"path":["std","os","unix","fs","DirEntryExt"],"kind":"trait"},"17:14066:5824":{"crate_id":17,"path":["object","macho","DylinkerCommand"],"kind":"struct"},"11:434:36703":{"crate_id":11,"path":["hashbrown","raw","RawIterHashInner"],"kind":"struct"},"1:4249:10719":{"crate_id":1,"path":["std","os","unix","net","ancillary","AncillaryData"],"kind":"enum"},"2:43957:8916":{"crate_id":2,"path":["core","str","pattern","TwoWaySearcher"],"kind":"struct"},"17:11688:8586":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSection"],"kind":"struct"},"1:8255:8417":{"crate_id":1,"path":["std","io","IoSlice"],"kind":"struct"},"1:903:4799":{"crate_id":1,"path":["std","collections","hash","map","ExtractIf"],"kind":"struct"},"1:12074:1637":{"crate_id":1,"path":["std","tuple"],"kind":"primitive"},"2:22449:10911":{"crate_id":2,"path":["core","core_simd","simd","cmp","ord","SimdPartialOrd"],"kind":"trait"},"2:10208:206":{"crate_id":2,"path":["core","fmt","Pointer"],"kind":"trait"},"1:3812:10673":{"crate_id":1,"path":["std","net","tcp","TcpStream"],"kind":"struct"},"17:15569:6243":{"crate_id":17,"path":["object","pe","ImageHotPatchInfo"],"kind":"struct"},"6:6775:7703":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","iocb"],"kind":"struct"},"1:1885:4875":{"crate_id":1,"path":["std","env","Args"],"kind":"struct"},"17:12399:8605":{"crate_id":17,"path":["object","read","pe","import","DelayLoadDescriptorIterator"],"kind":"struct"},"24:4226:3700":{"crate_id":24,"path":["syn","token","AndAnd"],"kind":"struct"},"6:5423:7391":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_sndrcvinfo"],"kind":"struct"},"1:4822:10706":{"crate_id":1,"path":["std","os","fd","raw","AsRawFd"],"kind":"trait"},"24:649:5327":{"crate_id":24,"path":["syn","error","SpanRange"],"kind":"struct"},"2:21669:10619":{"crate_id":2,"path":["core","core_simd","masks","sealed","Sealed"],"kind":"trait"},"24:3127:3671":{"crate_id":24,"path":["syn","token","Crate"],"kind":"struct"},"2:11303:15985":{"crate_id":2,"path":["core","slice","iter","SplitNMut"],"kind":"struct"},"1:1040:8740":{"crate_id":1,"path":["std","collections","hash","map","Entry"],"kind":"enum"},"5:2195:4574":{"crate_id":5,"path":["alloc","collections","btree","mem","replace","PanicGuard"],"kind":"struct"},"2:43743:16004":{"crate_id":2,"path":["core","str","pattern","SearchStep"],"kind":"enum"},"17:13797:5784":{"crate_id":17,"path":["object","macho","MachHeader32"],"kind":"struct"},"17:12464:23598":{"crate_id":17,"path":["object","read","pe","resource","ResourceDirectoryEntryData"],"kind":"enum"},"1:12039:10533":{"crate_id":1,"path":["std","backtrace_rs","types","BytesOrWideString"],"kind":"enum"},"6:5014:7244":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_rumble_effect"],"kind":"struct"},"1:1446:156":{"crate_id":1,"path":["std","collections","hash","set","HashSet"],"kind":"struct"},"1:12071:333":{"crate_id":1,"path":["std","array"],"kind":"primitive"},"1:11853:5237":{"crate_id":1,"path":["std","backtrace_rs","symbolize","gimli","mmap","Mmap"],"kind":"struct"},"16:2438:6437":{"crate_id":16,"path":["gimli","common","DebugAddrIndex"],"kind":"struct"},"24:4209:3699":{"crate_id":24,"path":["syn","token","And"],"kind":"struct"},"6:5400:7380":{"crate_id":6,"path":["libc","unix","linux_like","linux","in6_ifreq"],"kind":"struct"},"1:1054:10542":{"crate_id":1,"path":["std","collections","hash","map","OccupiedEntry"],"kind":"struct"},"1:10875:5230":{"crate_id":1,"path":["std","sys","pal","unix","process","process_inner","posix_spawn","PosixSpawnFileActions"],"kind":"struct"},"1:11223:2362":{"crate_id":1,"path":["std","sys","os_str","bytes","Slice"],"kind":"struct"},"20:836:1991":{"crate_id":20,"path":["proc_macro2","imp","Ident"],"kind":"enum"},"18:623:36805":{"crate_id":18,"path":["memchr","memmem","twoway","SuffixOrdering"],"kind":"enum"},"11:2124:8740":{"crate_id":11,"path":["hashbrown","set","Entry"],"kind":"enum"},"2:39865:8834":{"crate_id":2,"path":["core","ascii","EscapeDefault"],"kind":"struct"},"21:0:1192":{"crate_id":21,"path":["proc_macro"],"kind":"module"},"24:3212:2004":{"crate_id":24,"path":["syn","token","Enum"],"kind":"struct"},"7:0:1701":{"crate_id":7,"path":["unwind"],"kind":"module"},"11:0:3181":{"crate_id":11,"path":["hashbrown"],"kind":"module"},"5:1354:9983":{"crate_id":5,"path":["alloc","collections","btree","map","entry","OccupiedError"],"kind":"struct"},"17:12300:23597":{"crate_id":17,"path":["object","read","pe","export","ExportTarget"],"kind":"enum"},"21:52:4825":{"crate_id":21,"path":["proc_macro","bridge","buffer","Buffer"],"kind":"struct"},"24:5774:2375":{"crate_id":24,"path":["syn","path","Constraint"],"kind":"struct"},"17:15760:6300":{"crate_id":17,"path":["object","pe","ImageFunctionEntry"],"kind":"struct"},"2:43671:8834":{"crate_id":2,"path":["core","str","iter","EscapeDefault"],"kind":"struct"},"11:102:8762":{"crate_id":11,"path":["hashbrown","raw","Bucket"],"kind":"struct"},"17:14876:6045":{"crate_id":17,"path":["object","pe","ImageOptionalHeader32"],"kind":"struct"},"1:4707:10695":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt"],"kind":"trait"},"2:725:10619":{"crate_id":2,"path":["core","num","nonzero","private","Sealed"],"kind":"trait"},"16:2748:6451":{"crate_id":16,"path":["gimli","common","DebugStrOffset"],"kind":"struct"},"24:5347:3349":{"crate_id":24,"path":["syn","expr","ExprUnary"],"kind":"struct"},"5:6053:5155":{"crate_id":5,"path":["alloc","sync","Weak"],"kind":"struct"},"24:5203:3352":{"crate_id":24,"path":["syn","expr","ExprAssign"],"kind":"struct"},"14:202:2425":{"crate_id":14,"path":["rustc_demangle","v0","ParseError"],"kind":"enum"},"17:12318:5575":{"crate_id":17,"path":["object","read","pe","export","Export"],"kind":"struct"},"24:4743:3735":{"crate_id":24,"path":["syn","token","Shl"],"kind":"struct"},"16:6606:8702":{"crate_id":16,"path":["gimli","read","index","UnitIndexSectionIterator"],"kind":"struct"},"17:15445:6197":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation64V2"],"kind":"struct"},"2:43655:8898":{"crate_id":2,"path":["core","str","iter","EncodeUtf16"],"kind":"struct"},"17:14516:5912":{"crate_id":17,"path":["object","macho","DataInCodeEntry"],"kind":"struct"},"6:7467:7827":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_fpstate"],"kind":"struct"},"16:4062:6491":{"crate_id":16,"path":["gimli","constants","DwTag"],"kind":"struct"},"17:11497:23471":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdatIterator"],"kind":"struct"},"1:12089:861":{"crate_id":1,"path":["std","isize"],"kind":"primitive"},"6:7389:7814":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stat64"],"kind":"struct"},"17:16187:6407":{"crate_id":17,"path":["object","xcoff","ExpAux"],"kind":"struct"},"6:1671:7085":{"crate_id":6,"path":["libc","unix","linux_like","arphdr"],"kind":"struct"},"5:3028:7950":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Immut"],"kind":"struct"},"23:281:2068":{"crate_id":23,"path":["quote","__private","push_lifetime_spanned","Lifetime"],"kind":"struct"},"16:8093:6677":{"crate_id":16,"path":["gimli","read","unit","AttrsIter"],"kind":"struct"},"1:9088:28165":{"crate_id":1,"path":["std","sync","mpmc","list","Position"],"kind":"struct"},"1:10505:4584":{"crate_id":1,"path":["std","sys","pal","unix","thread","Thread"],"kind":"struct"},"17:11367:5510":{"crate_id":17,"path":["object","read","elf","section","SectionTable"],"kind":"struct"},"2:44079:8925":{"crate_id":2,"path":["core","str","CharEscapeDebugContinue"],"kind":"struct"},"20:716:3604":{"crate_id":20,"path":["proc_macro2","fallback","SourceFile"],"kind":"struct"},"17:11354:23475":{"crate_id":17,"path":["object","read","elf","segment","ElfSegment"],"kind":"struct"},"20:113:8553":{"crate_id":20,"path":["proc_macro2","rcvec","RcVec"],"kind":"struct"},"17:11583:23495":{"crate_id":17,"path":["object","read","elf","hash","GnuHashTable"],"kind":"struct"},"2:43333:8877":{"crate_id":2,"path":["core","str","iter","Chars"],"kind":"struct"},"2:41460:8194":{"crate_id":2,"path":["core","net","socket_addr","SocketAddrV6"],"kind":"struct"},"24:5287:3344":{"crate_id":24,"path":["syn","expr","ExprMacro"],"kind":"struct"},"1:8950:3418":{"crate_id":1,"path":["std","sync","mpsc","IntoIter"],"kind":"struct"},"20:746:2678":{"crate_id":20,"path":["proc_macro2","fallback","Literal"],"kind":"struct"},"17:15368:6178":{"crate_id":17,"path":["object","pe","ImageResourceDirectoryEntry"],"kind":"struct"},"21:2488:3605":{"crate_id":21,"path":["proc_macro","bridge","Diagnostic"],"kind":"struct"},"1:8421:10752":{"crate_id":1,"path":["std","os","linux","process","PidFd"],"kind":"struct"},"1:8926:8442":{"crate_id":1,"path":["std","process","ExitCode"],"kind":"struct"},"17:15102:6110":{"crate_id":17,"path":["object","pe","ImageSymbolEx"],"kind":"struct"},"0:964:1848":{"crate_id":0,"path":["serde_derive","Serialize"],"kind":"proc_derive"},"6:6874:7730":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","sigset_t"],"kind":"struct"},"16:7813:8747":{"crate_id":16,"path":["gimli","read","unit","DebugInfoUnitHeadersIter"],"kind":"struct"},"2:31939:2756":{"crate_id":2,"path":["core","error","tags","Value"],"kind":"struct"},"1:8650:8949":{"crate_id":1,"path":["std","path","StripPrefixError"],"kind":"struct"},"2:2812:145":{"crate_id":2,"path":["core","convert","From"],"kind":"trait"},"1:6228:5197":{"crate_id":1,"path":["std","sync","mpmc","waker","Waker"],"kind":"struct"},"17:15701:6284":{"crate_id":17,"path":["object","pe","ImageEnclaveImport"],"kind":"struct"},"2:41546:3423":{"crate_id":2,"path":["core","option","IterMut"],"kind":"struct"},"24:3144:126":{"crate_id":24,"path":["syn","token","Default"],"kind":"struct"},"2:30010:10675":{"crate_id":2,"path":["core","num","FpCategory"],"kind":"enum"},"2:37806:5347":{"crate_id":2,"path":["core","ops","bit","BitXorAssign"],"kind":"trait"},"24:5728:2642":{"crate_id":24,"path":["syn","path","PathSegment"],"kind":"struct"},"5:3647:3419":{"crate_id":5,"path":["alloc","collections","linked_list","Iter"],"kind":"struct"},"2:21980:7958":{"crate_id":2,"path":["core","core_simd","vector","Simd"],"kind":"struct"},"2:22376:4736":{"crate_id":2,"path":["core","core_simd","simd","ptr","mut_ptr","SimdMutPtr","from_exposed_addr"],"kind":"function"},"2:4561:221":{"crate_id":2,"path":["core","cell","RefCell"],"kind":"struct"},"11:123:5116":{"crate_id":11,"path":["hashbrown","raw","RawTable"],"kind":"struct"},"2:45680:8264":{"crate_id":2,"path":["core","core_arch","simd","f32x4"],"kind":"struct"},"2:44103:8931":{"crate_id":2,"path":["core","str","BytesIsNotEmpty"],"kind":"struct"},"2:41829:94":{"crate_id":2,"path":["core","sync","atomic","AtomicU16"],"kind":"struct"},"21:2738:2057":{"crate_id":21,"path":["proc_macro","Spacing"],"kind":"enum"},"17:10769:36795":{"crate_id":17,"path":["object","read","any","SymbolTableInternal"],"kind":"enum"},"24:5290:3366":{"crate_id":24,"path":["syn","expr","ExprMatch"],"kind":"struct"},"6:6597:7639":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ntptimeval"],"kind":"struct"},"1:12068:1672":{"crate_id":1,"path":["std","unit"],"kind":"primitive"},"2:2472:4737":{"crate_id":2,"path":["core","ptr","from_exposed_addr_mut"],"kind":"function"},"10:36:6815":{"crate_id":10,"path":["adler","algo","U32X4"],"kind":"struct"},"14:160:9977":{"crate_id":14,"path":["rustc_demangle","Demangle"],"kind":"struct"},"1:4824:10708":{"crate_id":1,"path":["std","os","fd","raw","FromRawFd"],"kind":"trait"},"2:2809:163":{"crate_id":2,"path":["core","convert","Into"],"kind":"trait"},"2:2803:78":{"crate_id":2,"path":["core","convert","AsRef"],"kind":"trait"},"2:42104:10097":{"crate_id":2,"path":["core","sync","exclusive","Exclusive"],"kind":"struct"},"2:42481:6655":{"crate_id":2,"path":["core","fmt","rt","Flag"],"kind":"enum"},"16:6927:6575":{"crate_id":16,"path":["gimli","read","line","FileEntryFormat"],"kind":"struct"},"2:8097:146":{"crate_id":2,"path":["core","iter","traits","collect","FromIterator"],"kind":"trait"},"15:288:22424":{"crate_id":15,"path":["addr2line","LocationRangeIter"],"kind":"struct"},"6:7516:7864":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user"],"kind":"struct"},"2:23286:236":{"crate_id":2,"path":["core","num","saturating","Saturating"],"kind":"struct"},"6:5290:7337":{"crate_id":6,"path":["libc","unix","linux_like","linux","can_filter"],"kind":"struct"},"17:11799:23560":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCacheImageIterator"],"kind":"struct"},"11:1566:22396":{"crate_id":11,"path":["hashbrown","rustc_entry","RustcEntry"],"kind":"enum"},"17:11825:23541":{"crate_id":17,"path":["object","read","macho","file","MachOFile"],"kind":"struct"},"11:1007:8740":{"crate_id":11,"path":["hashbrown","map","Entry"],"kind":"enum"},"6:5565:7457":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_user_dev"],"kind":"struct"},"2:11835:15977":{"crate_id":2,"path":["core","slice","iter","ChunkByMut"],"kind":"struct"},"24:5335:3370":{"crate_id":24,"path":["syn","expr","ExprTry"],"kind":"struct"},"16:6543:8693":{"crate_id":16,"path":["gimli","read","aranges","ArangeEntry"],"kind":"struct"},"17:15116:6111":{"crate_id":17,"path":["object","pe","ImageSymbolExBytes"],"kind":"struct"},"24:4238:3701":{"crate_id":24,"path":["syn","token","AndEq"],"kind":"struct"},"2:21553:10619":{"crate_id":2,"path":["core","core_simd","lane_count","sealed","Sealed"],"kind":"trait"},"2:44164:16167":{"crate_id":2,"path":["core","time","TryFromFloatSecsErrorKind"],"kind":"enum"},"16:8175:23352":{"crate_id":16,"path":["gimli","read","unit","EntriesTreeNode"],"kind":"struct"},"6:4787:7113":{"crate_id":6,"path":["libc","unix","linux_like","linux","glob_t"],"kind":"struct"},"1:8006:8943":{"crate_id":1,"path":["std","hash","random","DefaultHasher"],"kind":"struct"},"2:8604:34238":{"crate_id":2,"path":["core","net","display_buffer","DisplayBuffer"],"kind":"struct"},"17:16093:6383":{"crate_id":17,"path":["object","xcoff","Symbol64"],"kind":"struct"},"16:2418:6436":{"crate_id":16,"path":["gimli","common","DebugAddrBase"],"kind":"struct"},"21:2411:2059":{"crate_id":21,"path":["proc_macro","bridge","TokenTree"],"kind":"enum"},"17:13999:5814":{"crate_id":17,"path":["object","macho","SubFrameworkCommand"],"kind":"struct"},"5:4148:3423":{"crate_id":5,"path":["alloc","collections","vec_deque","iter_mut","IterMut"],"kind":"struct"},"17:10954:23434":{"crate_id":17,"path":["object","read","archive","ArchiveKind"],"kind":"enum"},"6:7546:7881":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ipc_perm"],"kind":"struct"},"11:2548:6810":{"crate_id":11,"path":["hashbrown","raw","bitmask","BitMaskIter"],"kind":"struct"},"1:10667:10753":{"crate_id":1,"path":["std","sys","pal","unix","fd","FileDesc"],"kind":"struct"},"1:2435:10605":{"crate_id":1,"path":["std","fs","read_link"],"kind":"function"},"18:754:8574":{"crate_id":18,"path":["memchr","memmem","SearcherRev"],"kind":"struct"},"5:1525:8770":{"crate_id":5,"path":["alloc","collections","btree","map","Values"],"kind":"struct"},"2:31935:2147":{"crate_id":2,"path":["core","error","private","Internal"],"kind":"struct"},"2:9237:4001":{"crate_id":2,"path":["core","panic","unwind_safe","AssertUnwindSafe"],"kind":"struct"},"17:12328:8594":{"crate_id":17,"path":["object","read","pe","export","ExportTable"],"kind":"struct"},"6:4965:7217":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_trigger"],"kind":"struct"},"24:5215:3339":{"crate_id":24,"path":["syn","expr","ExprBinary"],"kind":"struct"},"2:11016:3423":{"crate_id":2,"path":["core","slice","iter","IterMut"],"kind":"struct"},"24:4934:3323":{"crate_id":24,"path":["syn","attr","MetaList"],"kind":"struct"},"2:42216:3573":{"crate_id":2,"path":["core","fmt","num","LowerHex"],"kind":"struct"},"1:10987:8441":{"crate_id":1,"path":["std","sys","pal","unix","process","process_inner","ExitStatusError"],"kind":"struct"},"24:4969:2008":{"crate_id":24,"path":["syn","data","Field"],"kind":"struct"},"18:491:8557":{"crate_id":18,"path":["memchr","cow","Imp"],"kind":"struct"},"6:4891:7183":{"crate_id":6,"path":["libc","unix","linux_like","linux","if_nameindex"],"kind":"struct"},"2:21561:10831":{"crate_id":2,"path":["core","core_simd","lane_count","SupportedLaneCount"],"kind":"trait"},"5:1575:10544":{"crate_id":5,"path":["alloc","collections","btree","map","RangeMut"],"kind":"struct"},"11:1066:22393":{"crate_id":11,"path":["hashbrown","map","EntryRef"],"kind":"enum"},"17:15456:6198":{"crate_id":17,"path":["object","pe","ImagePrologueDynamicRelocationHeader"],"kind":"struct"},"2:12459:8880":{"crate_id":2,"path":["core","str","iter","SplitInternal"],"kind":"struct"},"1:10709:8961":{"crate_id":1,"path":["std","sys","pal","unix","fs","FilePermissions"],"kind":"struct"},"16:3196:6425":{"crate_id":16,"path":["gimli","arch","AArch64"],"kind":"struct"},"24:1070:37095":{"crate_id":24,"path":["syn","generics","LifetimesMut"],"kind":"struct"},"2:3778:4801":{"crate_id":2,"path":["core","array","drain","Drain"],"kind":"struct"},"2:45885:8289":{"crate_id":2,"path":["core","core_arch","simd","u32x8"],"kind":"struct"},"24:5908:3405":{"crate_id":24,"path":["syn","ty","TypeParen"],"kind":"struct"},"2:43349:2967":{"crate_id":2,"path":["core","str","iter","Bytes"],"kind":"struct"},"2:30272:4659":{"crate_id":2,"path":["core","mem","transmutability","Assume"],"kind":"struct"},"1:2273:10599":{"crate_id":1,"path":["std","fs","read_to_string"],"kind":"function"},"1:4211:33225":{"crate_id":1,"path":["std","os","unix","net","ancillary","AncillaryDataIter"],"kind":"struct"},"17:15678:6283":{"crate_id":17,"path":["object","pe","ImageEnclaveConfig64"],"kind":"struct"},"16:3475:6484":{"crate_id":16,"path":["gimli","arch","RiscV"],"kind":"struct"},"11:1923:2028":{"crate_id":11,"path":["hashbrown","set","Union"],"kind":"struct"},"2:2029:7954":{"crate_id":2,"path":["core","ptr","metadata","PtrComponents"],"kind":"struct"},"24:693:3418":{"crate_id":24,"path":["syn","error","IntoIter"],"kind":"struct"},"5:7125:5174":{"crate_id":5,"path":["alloc","vec","dedup_by","FillGapOnDrop"],"kind":"struct"},"1:10864:5229":{"crate_id":1,"path":["std","sys","pal","unix","process","process_inner","do_exec","Reset"],"kind":"struct"},"14:214:8760":{"crate_id":14,"path":["rustc_demangle","TryDemangleError"],"kind":"struct"},"11:832:10536":{"crate_id":11,"path":["hashbrown","map","ValuesMut"],"kind":"struct"},"24:4714:3733":{"crate_id":24,"path":["syn","token","RArrow"],"kind":"struct"},"2:39453:4368":{"crate_id":2,"path":["core","ascii","ascii_char","AsciiChar"],"kind":"enum"},"1:1596:8772":{"crate_id":1,"path":["std","collections","hash","set","Difference"],"kind":"struct"},"5:4103:5125":{"crate_id":5,"path":["alloc","collections","vec_deque","drain","drop","DropGuard"],"kind":"struct"},"2:45648:8262":{"crate_id":2,"path":["core","core_arch","simd","i32x4"],"kind":"struct"},"16:4882:6507":{"crate_id":16,"path":["gimli","constants","DwDsc"],"kind":"struct"},"2:10204:3573":{"crate_id":2,"path":["core","fmt","LowerHex"],"kind":"trait"},"17:11102:23444":{"crate_id":17,"path":["object","read","coff","section","CoffSegment"],"kind":"struct"},"5:7539:3476":{"crate_id":5,"path":["alloc","collections","TryReserveErrorKind"],"kind":"enum"},"24:5351:3373":{"crate_id":24,"path":["syn","expr","ExprUnsafe"],"kind":"struct"},"17:15214:6137":{"crate_id":17,"path":["object","pe","ImageBaseRelocation"],"kind":"struct"},"2:40028:8846":{"crate_id":2,"path":["core","ffi","c_str","FromBytesWithNulError"],"kind":"struct"},"1:11574:10674":{"crate_id":1,"path":["std","sys_common","net","UdpSocket"],"kind":"struct"},"1:12084:1656":{"crate_id":1,"path":["std","u8"],"kind":"primitive"},"5:2112:10546":{"crate_id":5,"path":["alloc","collections","btree","map","CursorMutKey"],"kind":"struct"},"16:3014:22472":{"crate_id":16,"path":["gimli","common","DwarfFileType"],"kind":"enum"},"1:10106:28168":{"crate_id":1,"path":["std","sys","pal","unix","os","Env"],"kind":"struct"},"1:10749:8417":{"crate_id":1,"path":["std","sys","pal","unix","io","IoSlice"],"kind":"struct"},"16:6749:8708":{"crate_id":16,"path":["gimli","read","line","LineInstructions"],"kind":"struct"},"1:1578:3418":{"crate_id":1,"path":["std","collections","hash","set","IntoIter"],"kind":"struct"},"17:10092:23416":{"crate_id":17,"path":["object","common","SymbolFlags"],"kind":"enum"},"2:2806:77":{"crate_id":2,"path":["core","convert","AsMut"],"kind":"trait"},"17:11443:5523":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbolTable"],"kind":"struct"},"2:39965:16034":{"crate_id":2,"path":["core","char","EscapeDebugInner"],"kind":"enum"},"5:7403:5136":{"crate_id":5,"path":["alloc","collections","binary_heap","DrainSorted"],"kind":"struct"},"11:2352:10543":{"crate_id":11,"path":["hashbrown","table","VacantEntry"],"kind":"struct"},"1:6512:10790":{"crate_id":1,"path":["std","sync","once","OnceState"],"kind":"struct"},"16:6560:6461":{"crate_id":16,"path":["gimli","read","index","DebugCuIndex"],"kind":"struct"},"24:4820:3741":{"crate_id":24,"path":["syn","token","Star"],"kind":"struct"},"11:1910:8772":{"crate_id":11,"path":["hashbrown","set","Difference"],"kind":"struct"},"6:8253:7924":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_rwlockattr_t"],"kind":"struct"},"17:11788:23559":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldSubCache"],"kind":"struct"},"5:6774:5125":{"crate_id":5,"path":["alloc","vec","into_iter","drop","DropGuard"],"kind":"struct"},"17:10185:5493":{"crate_id":17,"path":["object","endian","U16Bytes"],"kind":"struct"},"16:2854:6456":{"crate_id":16,"path":["gimli","common","DebugFrameOffset"],"kind":"struct"},"2:42209:3565":{"crate_id":2,"path":["core","fmt","num","Octal"],"kind":"struct"},"2:41615:4589":{"crate_id":2,"path":["core","pin","Pin"],"kind":"struct"},"1:4262:10720":{"crate_id":1,"path":["std","os","unix","net","ancillary","Messages"],"kind":"struct"},"17:14545:5915":{"crate_id":17,"path":["object","macho","Nlist32"],"kind":"struct"},"16:6813:8710":{"crate_id":16,"path":["gimli","read","line","LineProgramHeader"],"kind":"struct"},"1:4573:10725":{"crate_id":1,"path":["std","os","unix","process","ExitStatusExt"],"kind":"trait"},"1:11285:6873":{"crate_id":1,"path":["std","sys","os_str","bytes","Buf"],"kind":"struct"},"11:742:10093":{"crate_id":11,"path":["hashbrown","map","IntoValues"],"kind":"struct"},"17:2203:23472":{"crate_id":17,"path":["object","read","elf","relocation","ElfDynamicRelocationIterator"],"kind":"struct"},"17:11755:8592":{"crate_id":17,"path":["object","read","elf","attributes","AttributeIndexIterator"],"kind":"struct"},"20:984:3418":{"crate_id":20,"path":["proc_macro2","token_stream","IntoIter"],"kind":"struct"},"6:4885:7181":{"crate_id":6,"path":["libc","unix","linux_like","linux","cpu_set_t"],"kind":"struct"},"24:5238:3357":{"crate_id":24,"path":["syn","expr","ExprClosure"],"kind":"struct"},"17:10534:36789":{"crate_id":17,"path":["object","read","any","SegmentIteratorInternal"],"kind":"enum"},"17:12508:5586":{"crate_id":17,"path":["object","read","pe","rich","RichHeaderEntry"],"kind":"struct"},"2:3058:246":{"crate_id":2,"path":["core","marker","Sync"],"kind":"trait"},"6:5160:7276":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Shdr"],"kind":"struct"},"20:845:2678":{"crate_id":20,"path":["proc_macro2","imp","Literal"],"kind":"enum"},"1:2263:139":{"crate_id":1,"path":["std","fs","File"],"kind":"struct"},"6:6714:7687":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_ring_offset_v1"],"kind":"struct"},"1:4785:10724":{"crate_id":1,"path":["std","os","linux","process","CommandExt"],"kind":"trait"},"2:11289:8887":{"crate_id":2,"path":["core","slice","iter","RSplitN"],"kind":"struct"},"2:1945:1205":{"crate_id":2,"path":["core","ptr"],"kind":"module"},"1:9232:28195":{"crate_id":1,"path":["std","sys","pal","common","thread_local","fast_local","Key"],"kind":"struct"},"17:13594:5734":{"crate_id":17,"path":["object","elf","HashHeader"],"kind":"struct"},"2:6792:4825":{"crate_id":2,"path":["core","iter","adapters","map_windows","Buffer"],"kind":"struct"},"16:4913:6508":{"crate_id":16,"path":["gimli","constants","DwIdx"],"kind":"struct"},"6:6664:7666":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_exit"],"kind":"struct"},"24:2379:3425":{"crate_id":24,"path":["syn","punctuated","PrivateIterMut"],"kind":"struct"},"17:15635:6267":{"crate_id":17,"path":["object","pe","ImageAlphaRuntimeFunctionEntry"],"kind":"struct"},"6:5277:7332":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_tp"],"kind":"struct"},"2:45406:8241":{"crate_id":2,"path":["core","core_arch","simd","u64x1"],"kind":"struct"},"5:3396:4799":{"crate_id":5,"path":["alloc","collections","btree","set","ExtractIf"],"kind":"struct"},"16:4424:6493":{"crate_id":16,"path":["gimli","constants","DwForm"],"kind":"struct"},"17:9807:23397":{"crate_id":17,"path":["object","common","SectionKind"],"kind":"enum"},"18:726:5391":{"crate_id":18,"path":["memchr","memmem","SearcherConfig"],"kind":"struct"},"15:0:3184":{"crate_id":15,"path":["addr2line"],"kind":"module"},"17:10399:2967":{"crate_id":17,"path":["object","read","util","Bytes"],"kind":"struct"},"17:12201:23594":{"crate_id":17,"path":["object","read","pe","file","PeComdat"],"kind":"struct"},"6:5546:7449":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_alg"],"kind":"struct"},"2:4491:3559":{"crate_id":2,"path":["core","cell","Cell"],"kind":"struct"},"6:6738:7692":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_umem_reg_v1"],"kind":"struct"},"17:12557:5510":{"crate_id":17,"path":["object","read","xcoff","section","SectionTable"],"kind":"struct"},"2:41671:3423":{"crate_id":2,"path":["core","result","IterMut"],"kind":"struct"},"16:7686:23349":{"crate_id":16,"path":["gimli","read","rnglists","RngListIter"],"kind":"struct"},"17:11841:23561":{"crate_id":17,"path":["object","read","macho","file","MachOComdatIterator"],"kind":"struct"},"1:1574:3419":{"crate_id":1,"path":["std","collections","hash","set","Iter"],"kind":"struct"},"16:6442:8686":{"crate_id":16,"path":["gimli","read","abbrev","Abbreviation"],"kind":"struct"},"2:45274:8227":{"crate_id":2,"path":["core","core_arch","simd","i8x2"],"kind":"struct"},"2:45811:8271":{"crate_id":2,"path":["core","core_arch","simd","u8x32"],"kind":"struct"},"24:5302:3346":{"crate_id":24,"path":["syn","expr","ExprParen"],"kind":"struct"},"24:5904:3403":{"crate_id":24,"path":["syn","ty","TypeMacro"],"kind":"struct"},"2:39882:8836":{"crate_id":2,"path":["core","char","convert","ParseCharError"],"kind":"struct"},"5:5061:5149":{"crate_id":5,"path":["alloc","rc","from_iter_exact","Guard"],"kind":"struct"},"2:41529:174":{"crate_id":2,"path":["core","option","Item"],"kind":"struct"},"5:3036:27719":{"crate_id":5,"path":["alloc","collections","btree","node","marker","ValMut"],"kind":"struct"},"16:5995:8644":{"crate_id":16,"path":["gimli","read","cfi","FrameDescriptionEntry"],"kind":"struct"},"17:14933:6080":{"crate_id":17,"path":["object","pe","ImageOptionalHeader64"],"kind":"struct"},"23:148:4024":{"crate_id":23,"path":["quote","__private","HasIterator"],"kind":"struct"},"5:5449:15969":{"crate_id":5,"path":["alloc","slice","Join"],"kind":"trait"},"23:11:3449":{"crate_id":23,"path":["quote","ext","TokenStreamExt"],"kind":"trait"},"2:22189:10914":{"crate_id":2,"path":["core","core_simd","simd","num","float","SimdFloat"],"kind":"trait"},"1:9491:5227":{"crate_id":1,"path":["std","sys","pal","unix","fs","Dir"],"kind":"struct"},"2:5797:5149":{"crate_id":2,"path":["core","iter","adapters","filter","next_chunk","Guard"],"kind":"struct"},"5:6965:4807":{"crate_id":5,"path":["alloc","vec","in_place_drop","InPlaceDstDataSrcBufDrop"],"kind":"struct"},"24:5927:3409":{"crate_id":24,"path":["syn","ty","TypeTraitObject"],"kind":"struct"},"24:0:1835":{"crate_id":24,"path":["syn"],"kind":"module"},"2:22271:10916":{"crate_id":2,"path":["core","core_simd","simd","num","uint","SimdUint"],"kind":"trait"},"2:39931:8838":{"crate_id":2,"path":["core","char","decode","DecodeUtf16Error"],"kind":"struct"},"2:40686:3483":{"crate_id":2,"path":["core","iter","sources","from_fn","FromFn"],"kind":"struct"},"24:3739:3694":{"crate_id":24,"path":["syn","token","Unsized"],"kind":"struct"},"24:5294:3345":{"crate_id":24,"path":["syn","expr","ExprMethodCall"],"kind":"struct"},"1:10696:8941":{"crate_id":1,"path":["std","sys","pal","unix","fs","OpenOptions"],"kind":"struct"},"1:4062:10693":{"crate_id":1,"path":["std","os","unix","fs","PermissionsExt"],"kind":"trait"},"1:5133:28145":{"crate_id":1,"path":["std","path","fmt","DebugHelper"],"kind":"struct"},"2:41605:4002":{"crate_id":2,"path":["core","panic","unwind_safe","RefUnwindSafe"],"kind":"trait"},"6:6729:7689":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_umem_reg"],"kind":"struct"},"2:10409:153":{"crate_id":2,"path":["core","hash","Hash"],"kind":"trait"},"2:44083:8926":{"crate_id":2,"path":["core","str","CharEscapeUnicode"],"kind":"struct"},"24:4668:3730":{"crate_id":24,"path":["syn","token","PlusEq"],"kind":"struct"},"24:5534:2068":{"crate_id":24,"path":["syn","lifetime","Lifetime"],"kind":"function"},"24:2063:10394":{"crate_id":24,"path":["syn","path","printing","span","QSelfDelimiters"],"kind":"struct"},"2:21992:34266":{"crate_id":2,"path":["core","core_simd","vector","splat","Splat"],"kind":"struct"},"16:2548:6442":{"crate_id":16,"path":["gimli","common","LocationListsOffset"],"kind":"struct"},"11:1160:9983":{"crate_id":11,"path":["hashbrown","map","OccupiedError"],"kind":"struct"},"1:8370:8944":{"crate_id":1,"path":["std","os","unix","net","addr","SocketAddr"],"kind":"struct"},"1:11408:9730":{"crate_id":1,"path":["std","sys_common","wtf8","Wtf8"],"kind":"struct"},"17:9671:23392":{"crate_id":17,"path":["object","common","Architecture"],"kind":"enum"},"16:2878:6457":{"crate_id":16,"path":["gimli","common","EhFrameOffset"],"kind":"struct"},"6:5352:7355":{"crate_id":6,"path":["libc","unix","linux_like","linux","seccomp_notif_addfd"],"kind":"struct"},"2:46210:8330":{"crate_id":2,"path":["core","core_arch","simd","i16x32"],"kind":"struct"},"16:8216:8759":{"crate_id":16,"path":["gimli","read","unit","DebugTypesUnitHeadersIter"],"kind":"struct"},"24:1908:1837":{"crate_id":24,"path":["syn","parse_macro_input"],"kind":"macro"},"11:2469:4799":{"crate_id":11,"path":["hashbrown","table","ExtractIf"],"kind":"struct"},"2:32056:2017":{"crate_id":2,"path":["core","marker","Tuple"],"kind":"trait"},"6:479:6902":{"crate_id":6,"path":["libc","unix","timeval"],"kind":"struct"},"17:13437:5692":{"crate_id":17,"path":["object","elf","ProgramHeader32"],"kind":"struct"},"1:5650:7717":{"crate_id":1,"path":["std","process","exit"],"kind":"function"},"1:4903:10705":{"crate_id":1,"path":["std","os","fd","owned","AsFd"],"kind":"trait"},"24:5373:3350":{"crate_id":24,"path":["syn","expr","FieldValue"],"kind":"struct"},"6:497:6910":{"crate_id":6,"path":["libc","unix","rusage"],"kind":"struct"},"11:2140:10542":{"crate_id":11,"path":["hashbrown","set","OccupiedEntry"],"kind":"struct"},"1:10767:31928":{"crate_id":1,"path":["std","sys","pal","unix","kernel_copy","SpliceMode"],"kind":"enum"},"17:13832:5788":{"crate_id":17,"path":["object","macho","LoadCommand"],"kind":"struct"},"11:430:36699":{"crate_id":11,"path":["hashbrown","raw","RawIterHash"],"kind":"struct"},"24:5327:3348":{"crate_id":24,"path":["syn","expr","ExprStruct"],"kind":"struct"},"21:2733:2385":{"crate_id":21,"path":["proc_macro","Punct"],"kind":"struct"},"24:3722:3693":{"crate_id":24,"path":["syn","token","Unsafe"],"kind":"struct"},"1:4241:10718":{"crate_id":1,"path":["std","os","unix","net","ancillary","ScmCredentials"],"kind":"struct"},"11:2443:4801":{"crate_id":11,"path":["hashbrown","table","Drain"],"kind":"struct"},"17:11661:8584":{"crate_id":17,"path":["object","read","elf","version","VerneedIterator"],"kind":"struct"},"2:10629:5187":{"crate_id":2,"path":["core","slice","sort","merge","MergeHole"],"kind":"struct"},"6:6519:7589":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_pktinfo"],"kind":"struct"},"5:294:2039":{"crate_id":5,"path":["alloc","boxed","Box"],"kind":"struct"},"16:6079:8614":{"crate_id":16,"path":["gimli","read","cfi","UnwindTableRow"],"kind":"struct"},"2:12273:16124":{"crate_id":2,"path":["core","slice","SlicePattern"],"kind":"trait"},"6:5528:7438":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_nl"],"kind":"struct"},"2:45627:8261":{"crate_id":2,"path":["core","core_arch","simd","i16x8"],"kind":"struct"},"2:33598:4285":{"crate_id":2,"path":["core","ops","bit","BitOr"],"kind":"trait"},"18:581:4364":{"crate_id":18,"path":["memchr","memmem","twoway","Reverse"],"kind":"struct"},"2:42751:8872":{"crate_id":2,"path":["core","hash","sip","Sip13Rounds"],"kind":"struct"},"20:734:1979":{"crate_id":20,"path":["proc_macro2","fallback","Group"],"kind":"struct"},"18:548:153":{"crate_id":18,"path":["memchr","memmem","rabinkarp","Hash"],"kind":"struct"},"2:22693:8822":{"crate_id":2,"path":["core","num","dec2flt","ParseFloatError"],"kind":"struct"},"20:955:2678":{"crate_id":20,"path":["proc_macro2","Literal"],"kind":"struct"},"2:44107:8932":{"crate_id":2,"path":["core","str","UnsafeBytesToStr"],"kind":"struct"},"17:15376:6181":{"crate_id":17,"path":["object","pe","ImageResourceDirectoryString"],"kind":"struct"},"21:1180:208":{"crate_id":21,"path":["proc_macro","bridge","client","ProcMacro"],"kind":"enum"},"6:5039:7256":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_ff_erase"],"kind":"struct"},"2:10193:121":{"crate_id":2,"path":["core","fmt","Debug"],"kind":"trait"},"20:356:3438":{"crate_id":20,"path":["proc_macro2","imp","LexError"],"kind":"enum"},"6:4942:7209":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_keymap_entry"],"kind":"struct"},"1:7841:10569":{"crate_id":1,"path":["std","env","VarError"],"kind":"enum"},"17:15249:6143":{"crate_id":17,"path":["object","pe","ImageExportDirectory"],"kind":"struct"},"11:875:10540":{"crate_id":11,"path":["hashbrown","map","RawVacantEntryMut"],"kind":"struct"},"24:4250:3702":{"crate_id":24,"path":["syn","token","At"],"kind":"struct"},"6:564:6952":{"crate_id":6,"path":["libc","unix","itimerval"],"kind":"struct"},"2:8110:3502":{"crate_id":2,"path":["core","iter","traits","collect","Extend"],"kind":"trait"},"2:0:537":{"crate_id":2,"path":["core"],"kind":"module"},"2:2470:4736":{"crate_id":2,"path":["core","ptr","from_exposed_addr"],"kind":"function"},"2:40320:3528":{"crate_id":2,"path":["core","iter","adapters","skip","Skip"],"kind":"struct"},"17:12043:23528":{"crate_id":17,"path":["object","read","macho","segment","MachOSegment"],"kind":"struct"},"2:43858:8909":{"crate_id":2,"path":["core","str","pattern","CharSliceSearcher"],"kind":"struct"},"2:41480:194":{"crate_id":2,"path":["core","option","Option"],"kind":"enum"},"2:40263:3524":{"crate_id":2,"path":["core","iter","adapters","map","Map"],"kind":"struct"},"1:8942:10801":{"crate_id":1,"path":["std","sync","mpsc","TryIter"],"kind":"struct"},"18:670:27672":{"crate_id":18,"path":["memchr","memmem","FindRevIter"],"kind":"struct"},"17:13473:5701":{"crate_id":17,"path":["object","elf","Dyn32"],"kind":"struct"},"2:43810:8908":{"crate_id":2,"path":["core","str","pattern","CharArrayRefSearcher"],"kind":"struct"},"24:3399:2677":{"crate_id":24,"path":["syn","token","Match"],"kind":"struct"},"24:3756:3695":{"crate_id":24,"path":["syn","token","Use"],"kind":"struct"},"21:2232:3441":{"crate_id":21,"path":["proc_macro","bridge","DelimSpan"],"kind":"struct"},"2:3669:71":{"crate_id":2,"path":["core","any","Any"],"kind":"trait"},"17:11269:23465":{"crate_id":17,"path":["object","read","coff","import","ImportName"],"kind":"enum"},"24:5323:3369":{"crate_id":24,"path":["syn","expr","ExprReturn"],"kind":"struct"},"18:113:27660":{"crate_id":18,"path":["memchr","memchr","iter","Memchr3"],"kind":"struct"},"2:43273:15982":{"crate_id":2,"path":["core","slice","iter","RChunksMut"],"kind":"struct"},"2:22704:33320":{"crate_id":2,"path":["core","num","dec2flt","FloatErrorKind"],"kind":"enum"},"17:11042:23438":{"crate_id":17,"path":["object","read","archive","ArchiveMember"],"kind":"struct"},"24:4966:3337":{"crate_id":24,"path":["syn","data","FieldsUnnamed"],"kind":"struct"},"6:5320:7349":{"crate_id":6,"path":["libc","unix","linux_like","linux","seccomp_data"],"kind":"struct"},"2:13646:152":{"crate_id":2,"path":["core","alloc","global","GlobalAlloc"],"kind":"trait"},"2:21951:10619":{"crate_id":2,"path":["core","core_simd","to_bytes","sealed","Sealed"],"kind":"trait"},"2:22639:7959":{"crate_id":2,"path":["core","num","dec2flt","common","BiasedFp"],"kind":"struct"},"1:8633:3419":{"crate_id":1,"path":["std","path","Iter"],"kind":"struct"},"16:4614:6499":{"crate_id":16,"path":["gimli","constants","DwVis"],"kind":"struct"},"1:849:3423":{"crate_id":1,"path":["std","collections","hash","map","IterMut"],"kind":"struct"},"1:9036:8447":{"crate_id":1,"path":["std","sync","condvar","WaitTimeoutResult"],"kind":"struct"},"6:7412:7815":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statfs64"],"kind":"struct"},"24:2991:3667":{"crate_id":24,"path":["syn","token","Async"],"kind":"struct"},"2:31970:3610":{"crate_id":2,"path":["core","marker","Sized"],"kind":"trait"},"17:11493:23482":{"crate_id":17,"path":["object","read","elf","relocation","RelocationSections"],"kind":"struct"},"17:11605:5527":{"crate_id":17,"path":["object","read","elf","version","Version"],"kind":"struct"},"5:0:307":{"crate_id":5,"path":["alloc"],"kind":"module"},"17:12659:23602":{"crate_id":17,"path":["object","read","xcoff","comdat","XcoffComdat"],"kind":"struct"},"6:5344:7354":{"crate_id":6,"path":["libc","unix","linux_like","linux","seccomp_notif_resp"],"kind":"struct"},"1:12077:698":{"crate_id":1,"path":["std","f32"],"kind":"primitive"},"24:96:4424":{"crate_id":24,"path":["syn","token","private","WithSpan"],"kind":"struct"},"1:5528:115":{"crate_id":1,"path":["std","process","Command"],"kind":"struct"},"24:3501:3688":{"crate_id":24,"path":["syn","token","Pub"],"kind":"struct"},"17:10828:36784":{"crate_id":17,"path":["object","read","any","SymbolIteratorInternal"],"kind":"enum"},"5:7656:9985":{"crate_id":5,"path":["alloc","string","FromUtf16Error"],"kind":"struct"},"17:11743:8590":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSubsubsection"],"kind":"struct"},"2:39130:210":{"crate_id":2,"path":["core","ops","range","Range"],"kind":"struct"},"17:16050:5668":{"crate_id":17,"path":["object","xcoff","SectionHeader64"],"kind":"struct"},"20:686:3557":{"crate_id":20,"path":["proc_macro2","parse","Cursor"],"kind":"struct"},"2:12519:8888":{"crate_id":2,"path":["core","str","iter","MatchIndicesInternal"],"kind":"struct"},"5:279:5125":{"crate_id":5,"path":["alloc","boxed","thin","drop","DropGuard"],"kind":"struct"},"6:6698:7679":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_ring_offset"],"kind":"struct"},"1:6881:10826":{"crate_id":1,"path":["std","std_float","StdFloat"],"kind":"trait"},"1:4988:10749":{"crate_id":1,"path":["std","os","net","linux_ext","addr","SocketAddrExt"],"kind":"trait"},"23:35:10619":{"crate_id":23,"path":["quote","ext","private","Sealed"],"kind":"trait"},"5:2525:7948":{"crate_id":5,"path":["alloc","collections","btree","node","NodeRef"],"kind":"struct"},"5:4500:5151":{"crate_id":5,"path":["alloc","collections","vec_deque","truncate","Dropper"],"kind":"struct"},"2:44383:4709":{"crate_id":2,"path":["core","alloc","AllocError"],"kind":"struct"},"16:7910:23351":{"crate_id":16,"path":["gimli","read","unit","AttributeValue"],"kind":"enum"},"24:3535:228":{"crate_id":24,"path":["syn","token","Return"],"kind":"struct"},"1:3815:10672":{"crate_id":1,"path":["std","net","tcp","TcpListener"],"kind":"struct"},"2:46133:8329":{"crate_id":2,"path":["core","core_arch","simd","u8x64"],"kind":"struct"},"11:837:10537":{"crate_id":11,"path":["hashbrown","map","RawEntryBuilderMut"],"kind":"struct"},"11:811:4799":{"crate_id":11,"path":["hashbrown","map","ExtractIf"],"kind":"struct"},"16:6962:6469":{"crate_id":16,"path":["gimli","read","loclists","DebugLocLists"],"kind":"struct"},"2:39958:8840":{"crate_id":2,"path":["core","char","EscapeDebug"],"kind":"struct"},"2:22670:7960":{"crate_id":2,"path":["core","num","dec2flt","number","Number"],"kind":"struct"},"17:14575:5578":{"crate_id":17,"path":["object","macho","Relocation"],"kind":"struct"},"16:2508:6440":{"crate_id":16,"path":["gimli","common","DebugLineOffset"],"kind":"struct"},"1:836:3419":{"crate_id":1,"path":["std","collections","hash","map","Iter"],"kind":"struct"},"2:13375:165":{"crate_id":2,"path":["core","future","into_future","IntoFuture"],"kind":"trait"},"11:673:3419":{"crate_id":11,"path":["hashbrown","map","Iter"],"kind":"struct"},"1:1975:713":{"crate_id":1,"path":["std","ffi"],"kind":"module"},"16:5831:8628":{"crate_id":16,"path":["gimli","read","cfi","SectionBaseAddresses"],"kind":"struct"},"11:844:10538":{"crate_id":11,"path":["hashbrown","map","RawEntryMut"],"kind":"enum"},"2:12717:3444":{"crate_id":2,"path":["core","str","traits","FromStr"],"kind":"trait"},"5:1325:10543":{"crate_id":5,"path":["alloc","collections","btree","map","entry","VacantEntry"],"kind":"struct"},"2:41679:3418":{"crate_id":2,"path":["core","result","IntoIter"],"kind":"struct"},"1:8425:7796":{"crate_id":1,"path":["std","os","linux","raw","arch","stat"],"kind":"struct"},"2:37696:5348":{"crate_id":2,"path":["core","ops","bit","BitAndAssign"],"kind":"trait"},"1:4651:10742":{"crate_id":1,"path":["std","os","unix","thread","JoinHandleExt"],"kind":"trait"},"24:4651:3729":{"crate_id":24,"path":["syn","token","Plus"],"kind":"struct"},"21:2628:3418":{"crate_id":21,"path":["proc_macro","token_stream","IntoIter"],"kind":"struct"},"1:9254:29158":{"crate_id":1,"path":["std","sys","pal","common","thread_local","fast_local","DtorState"],"kind":"enum"},"18:521:27673":{"crate_id":18,"path":["memchr","memmem","prefilter","Prefilter"],"kind":"enum"},"6:5677:7508":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_can"],"kind":"struct"},"6:485:6905":{"crate_id":6,"path":["libc","unix","timespec"],"kind":"struct"},"17:12454:8608":{"crate_id":17,"path":["object","read","pe","resource","ResourceDirectoryTable"],"kind":"struct"},"6:5329:7352":{"crate_id":6,"path":["libc","unix","linux_like","linux","seccomp_notif_sizes"],"kind":"struct"},"24:642:226":{"crate_id":24,"path":["syn","error","Result"],"kind":"type_alias"},"1:9060:4578":{"crate_id":1,"path":["std","sync","mpmc","context","Inner"],"kind":"struct"},"17:12251:23570":{"crate_id":17,"path":["object","read","pe","section","PeSectionIterator"],"kind":"struct"},"2:8248:179":{"crate_id":2,"path":["core","iter","traits","iterator","Iterator"],"kind":"trait"},"2:45487:8246":{"crate_id":2,"path":["core","core_arch","simd","f32x2"],"kind":"struct"},"2:32818:5342":{"crate_id":2,"path":["core","ops","arith","Rem"],"kind":"trait"},"5:4308:3419":{"crate_id":5,"path":["alloc","collections","vec_deque","iter","Iter"],"kind":"struct"},"5:3791:3557":{"crate_id":5,"path":["alloc","collections","linked_list","Cursor"],"kind":"struct"},"2:45796:8270":{"crate_id":2,"path":["core","core_arch","simd","m64x2"],"kind":"struct"},"2:42741:8207":{"crate_id":2,"path":["core","hash","sip","State"],"kind":"struct"},"2:45779:8269":{"crate_id":2,"path":["core","core_arch","simd","m32x4"],"kind":"struct"},"21:2006:4823":{"crate_id":21,"path":["proc_macro","bridge","LitKind"],"kind":"enum"},"5:6432:10922":{"crate_id":5,"path":["alloc","task","LocalWake"],"kind":"trait"},"16:2808:6454":{"crate_id":16,"path":["gimli","common","DebugTypesOffset"],"kind":"struct"},"2:22407:10619":{"crate_id":2,"path":["core","core_simd","simd","ptr","sealed","Sealed"],"kind":"trait"},"17:14235:5866":{"crate_id":17,"path":["object","macho","DylibReference"],"kind":"struct"},"17:15197:6134":{"crate_id":17,"path":["object","pe","ImageRelocation"],"kind":"struct"},"9:330:6853":{"crate_id":9,"path":["miniz_oxide","inflate","core","LocalVars"],"kind":"struct"},"1:6069:220":{"crate_id":1,"path":["std","sync","mpmc","counter","Receiver"],"kind":"struct"},"1:5497:10771":{"crate_id":1,"path":["std","process","ChildStdout"],"kind":"struct"},"17:12056:5563":{"crate_id":17,"path":["object","read","macho","segment","MachOSegmentInternal"],"kind":"struct"},"2:43163:8810":{"crate_id":2,"path":["core","slice","iter","Windows"],"kind":"struct"},"20:0:1834":{"crate_id":20,"path":["proc_macro2"],"kind":"module"},"24:3263:141":{"crate_id":24,"path":["syn","token","Fn"],"kind":"struct"},"6:1510:6978":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr"],"kind":"struct"},"1:12088:1652":{"crate_id":1,"path":["std","u128"],"kind":"primitive"},"1:7945:10614":{"crate_id":1,"path":["std","fs","ReadDir"],"kind":"struct"},"6:5200:7291":{"crate_id":6,"path":["libc","unix","linux_like","linux","posix_spawnattr_t"],"kind":"struct"},"17:12543:23604":{"crate_id":17,"path":["object","read","xcoff","section","XcoffSection"],"kind":"struct"},"17:16138:6392":{"crate_id":17,"path":["object","xcoff","CsectAux32"],"kind":"struct"},"6:7537:7878":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","mcontext_t"],"kind":"struct"},"17:14788:5982":{"crate_id":17,"path":["object","pe","ImageVxdHeader"],"kind":"struct"},"1:8480:3995":{"crate_id":1,"path":["std","panic","BacktraceStyle"],"kind":"enum"},"24:3552:3689":{"crate_id":24,"path":["syn","token","SelfType"],"kind":"struct"},"16:6317:2021":{"crate_id":16,"path":["gimli","read","dwarf","Unit"],"kind":"struct"},"5:5211:5155":{"crate_id":5,"path":["alloc","rc","Weak"],"kind":"struct"},"24:1118:3380":{"crate_id":24,"path":["syn","generics","Turbofish"],"kind":"struct"},"1:10087:10561":{"crate_id":1,"path":["std","sys","pal","unix","os","SplitPaths"],"kind":"struct"},"6:5653:7496":{"crate_id":6,"path":["libc","unix","linux_like","linux","sched_attr"],"kind":"struct"},"21:107:4832":{"crate_id":21,"path":["proc_macro","bridge","client","Bridge"],"kind":"struct"},"11:1087:36708":{"crate_id":11,"path":["hashbrown","map","KeyOrRef"],"kind":"enum"},"1:5707:220":{"crate_id":1,"path":["std","sync","mpsc","Receiver"],"kind":"struct"},"2:41946:89":{"crate_id":2,"path":["core","sync","atomic","AtomicI64"],"kind":"struct"},"24:5449:3377":{"crate_id":24,"path":["syn","generics","ConstParam"],"kind":"struct"},"2:41790:87":{"crate_id":2,"path":["core","sync","atomic","AtomicI16"],"kind":"struct"},"17:13235:1991":{"crate_id":17,"path":["object","elf","Ident"],"kind":"struct"},"24:5584:3387":{"crate_id":24,"path":["syn","lit","LitInt"],"kind":"struct"},"2:43779:8905":{"crate_id":2,"path":["core","str","pattern","MultiCharEqSearcher"],"kind":"struct"},"21:2293:2385":{"crate_id":21,"path":["proc_macro","bridge","Punct"],"kind":"struct"},"2:22811:7977":{"crate_id":2,"path":["core","num","error","TryFromIntError"],"kind":"struct"},"6:4916:7199":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_event"],"kind":"struct"},"17:14986:6086":{"crate_id":17,"path":["object","pe","ImageRomHeaders"],"kind":"struct"},"6:7602:7901":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ucontext_t"],"kind":"struct"},"6:1485:6968":{"crate_id":6,"path":["libc","unix","linux_like","in_addr"],"kind":"struct"},"17:14449:5905":{"crate_id":17,"path":["object","macho","SymsegCommand"],"kind":"struct"},"1:6692:5218":{"crate_id":1,"path":["std","sync","remutex","ReentrantMutexGuard"],"kind":"struct"},"16:8155:8758":{"crate_id":16,"path":["gimli","read","unit","EntriesTree"],"kind":"struct"},"17:12238:23571":{"crate_id":17,"path":["object","read","pe","section","PeSegment"],"kind":"struct"},"1:11380:8465":{"crate_id":1,"path":["std","sys_common","wtf8","CodePoint"],"kind":"struct"},"16:3899:6489":{"crate_id":16,"path":["gimli","constants","DwCfa"],"kind":"struct"},"6:7314:7768":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statfs"],"kind":"struct"},"17:14189:5856":{"crate_id":17,"path":["object","macho","DylibModule32"],"kind":"struct"},"16:6120:23335":{"crate_id":16,"path":["gimli","read","cfi","RegisterRule"],"kind":"enum"},"2:41688:196":{"crate_id":2,"path":["core","sync","atomic","Ordering"],"kind":"enum"},"16:5037:6512":{"crate_id":16,"path":["gimli","constants","DwLnct"],"kind":"struct"},"2:45441:8243":{"crate_id":2,"path":["core","core_arch","simd","i16x4"],"kind":"struct"},"16:6648:8704":{"crate_id":16,"path":["gimli","read","line","LineRows"],"kind":"struct"},"2:12831:15998":{"crate_id":2,"path":["core","str","pattern","MultiCharEqPattern"],"kind":"struct"},"24:2523:10619":{"crate_id":24,"path":["syn","sealed","lookahead","Sealed"],"kind":"trait"},"17:1098:23446":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbolIterator"],"kind":"struct"},"16:6427:10067":{"crate_id":16,"path":["gimli","read","abbrev","AbbreviationsCache"],"kind":"struct"},"18:598:5331":{"crate_id":18,"path":["memchr","memmem","twoway","Shift"],"kind":"enum"},"1:3237:31585":{"crate_id":1,"path":["std","io","stdio","StderrRaw"],"kind":"struct"},"2:7594:33542":{"crate_id":2,"path":["core","iter","adapters","GenericShunt"],"kind":"struct"},"1:3586:10638":{"crate_id":1,"path":["std","io","BufRead"],"kind":"trait"},"16:4743:6502":{"crate_id":16,"path":["gimli","constants","DwAddr"],"kind":"struct"},"1:9169:234":{"crate_id":1,"path":["std","sync","rwlock","RwLockReadGuard"],"kind":"struct"},"1:1809:664":{"crate_id":1,"path":["std","env"],"kind":"module"},"2:43363:8806":{"crate_id":2,"path":["core","str","iter","Split"],"kind":"struct"},"17:11764:8593":{"crate_id":17,"path":["object","read","elf","attributes","AttributeReader"],"kind":"struct"},"5:7423:35404":{"crate_id":5,"path":["alloc","collections","btree","merge_iter","Peeked"],"kind":"enum"},"17:15342:6168":{"crate_id":17,"path":["object","pe","ImageDelayloadDescriptor"],"kind":"struct"},"2:43212:8212":{"crate_id":2,"path":["core","slice","iter","ArrayWindows"],"kind":"struct"},"11:700:3418":{"crate_id":11,"path":["hashbrown","map","IntoIter"],"kind":"struct"},"9:53:10072":{"crate_id":9,"path":["miniz_oxide","inflate","core","DecompressorOxide"],"kind":"struct"},"17:12824:23426":{"crate_id":17,"path":["object","read","SymbolSection"],"kind":"enum"},"1:8099:28171":{"crate_id":1,"path":["std","io","error","SimpleMessage"],"kind":"struct"},"1:10108:28205":{"crate_id":1,"path":["std","sys","pal","unix","os","EnvStrDebug"],"kind":"struct"},"21:2753:1991":{"crate_id":21,"path":["proc_macro","Ident"],"kind":"struct"},"16:7755:6467":{"crate_id":16,"path":["gimli","read","str","DebugLineStr"],"kind":"struct"},"21:2518:4824":{"crate_id":21,"path":["proc_macro","bridge","ExpnGlobals"],"kind":"struct"},"2:22321:33960":{"crate_id":2,"path":["core","core_simd","simd","ptr","const_ptr","SimdConstPtr","with_addr"],"kind":"function"},"4:0:3177":{"crate_id":4,"path":["rustc_std_workspace_core"],"kind":"module"},"2:22421:10910":{"crate_id":2,"path":["core","core_simd","simd","cmp","eq","SimdPartialEq"],"kind":"trait"},"5:3026:35412":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Dying"],"kind":"enum"},"1:7940:4989":{"crate_id":1,"path":["std","fs","Metadata"],"kind":"struct"},"16:2323:22469":{"crate_id":16,"path":["gimli","common","Vendor"],"kind":"enum"},"17:15206:6135":{"crate_id":17,"path":["object","pe","ImageLinenumber"],"kind":"struct"},"6:6880:7731":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","sysinfo"],"kind":"struct"},"16:7656:23348":{"crate_id":16,"path":["gimli","read","rnglists","RawRngListEntry"],"kind":"enum"},"18:735:27669":{"crate_id":18,"path":["memchr","memmem","SearcherKind"],"kind":"enum"},"6:5376:7366":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlattr"],"kind":"struct"},"2:2015:4751":{"crate_id":2,"path":["core","ptr","metadata","Pointee"],"kind":"trait"},"6:1628:7059":{"crate_id":6,"path":["libc","unix","linux_like","ifaddrs"],"kind":"struct"},"6:7348:7787":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","siginfo_t"],"kind":"struct"},"2:30355:33293":{"crate_id":2,"path":["core","ptr","alignment","AlignmentEnum32"],"kind":"enum"},"6:6768:7702":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_desc"],"kind":"struct"},"1:909:10536":{"crate_id":1,"path":["std","collections","hash","map","ValuesMut"],"kind":"struct"},"16:4468:6494":{"crate_id":16,"path":["gimli","constants","DwAte"],"kind":"struct"},"24:3348:3681":{"crate_id":24,"path":["syn","token","Let"],"kind":"struct"},"2:13701:4710":{"crate_id":2,"path":["core","alloc","Allocator"],"kind":"trait"},"2:22454:10909":{"crate_id":2,"path":["core","core_simd","simd","cmp","ord","SimdOrd"],"kind":"trait"},"2:45712:8266":{"crate_id":2,"path":["core","core_arch","simd","f64x4"],"kind":"struct"},"1:12034:10105":{"crate_id":1,"path":["std","backtrace_rs","symbolize","gimli","Cache"],"kind":"struct"},"24:5343:3372":{"crate_id":24,"path":["syn","expr","ExprTuple"],"kind":"struct"},"2:42729:157":{"crate_id":2,"path":["core","hash","sip","Hasher"],"kind":"struct"},"2:46501:8343":{"crate_id":2,"path":["core","core_arch","x86","__m256d"],"kind":"struct"},"24:2084:10395":{"crate_id":24,"path":["syn","print","TokensOrDefault"],"kind":"struct"},"5:7715:4799":{"crate_id":5,"path":["alloc","vec","extract_if","ExtractIf"],"kind":"struct"},"6:7366:7796":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stat"],"kind":"struct"},"1:6379:220":{"crate_id":1,"path":["std","sync","mpmc","Receiver"],"kind":"struct"},"24:5498:3052":{"crate_id":24,"path":["syn","generics","WhereClause"],"kind":"struct"},"2:43627:8895":{"crate_id":2,"path":["core","str","iter","LinesAny"],"kind":"struct"},"2:5892:5149":{"crate_id":2,"path":["core","iter","adapters","filter_map","next_chunk","Guard"],"kind":"struct"},"17:14977:6085":{"crate_id":17,"path":["object","pe","ImageNtHeaders32"],"kind":"struct"},"6:7984:7907":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","not_x32","statvfs"],"kind":"struct"},"1:1581:4801":{"crate_id":1,"path":["std","collections","hash","set","Drain"],"kind":"struct"},"1:9215:8952":{"crate_id":1,"path":["std","time","SystemTimeError"],"kind":"struct"},"17:12584:23421":{"crate_id":17,"path":["object","read","xcoff","symbol","SymbolIterator"],"kind":"struct"},"1:9197:8452":{"crate_id":1,"path":["std","time","SystemTime"],"kind":"struct"},"17:10982:23435":{"crate_id":17,"path":["object","read","archive","Members"],"kind":"enum"},"17:14414:5893":{"crate_id":17,"path":["object","macho","DyldInfoCommand"],"kind":"struct"},"2:7816:3482":{"crate_id":2,"path":["core","iter","sources","empty","Empty"],"kind":"struct"},"2:37861:5350":{"crate_id":2,"path":["core","ops","bit","ShlAssign"],"kind":"trait"},"3:234:226":{"crate_id":3,"path":["compiler_builtins","float","cmp","Result"],"kind":"enum"},"16:6335:10051":{"crate_id":16,"path":["gimli","read","dwarf","RangeIter"],"kind":"struct"},"1:10459:10655":{"crate_id":1,"path":["std","sys","pal","unix","stdio","Stdin"],"kind":"struct"},"24:5882:3398":{"crate_id":24,"path":["syn","ty","TypeArray"],"kind":"struct"},"17:13187:5641":{"crate_id":17,"path":["object","elf","FileHeader32"],"kind":"struct"},"2:41985:96":{"crate_id":2,"path":["core","sync","atomic","AtomicU64"],"kind":"struct"},"1:8956:8443":{"crate_id":1,"path":["std","sync","mpsc","SendError"],"kind":"struct"},"2:10150:3570":{"crate_id":2,"path":["core","fmt","Write"],"kind":"trait"},"17:13252:5658":{"crate_id":17,"path":["object","elf","SectionHeader32"],"kind":"struct"},"2:3516:16016":{"crate_id":2,"path":["core","ops","try_trait","NeverShortCircuit"],"kind":"struct"},"2:44075:8924":{"crate_id":2,"path":["core","str","LinesMap"],"kind":"struct"},"24:5628:3389":{"crate_id":24,"path":["syn","op","BinOp"],"kind":"enum"},"2:21468:34268":{"crate_id":2,"path":["core","core_simd","swizzle","deinterleave","Even"],"kind":"struct"},"2:21482:34262":{"crate_id":2,"path":["core","core_simd","swizzle","resize","Resize"],"kind":"struct"},"2:42523:138":{"crate_id":2,"path":["core","fmt","Error"],"kind":"struct"},"17:13412:5690":{"crate_id":17,"path":["object","elf","Rel64"],"kind":"struct"},"18:680:8561":{"crate_id":18,"path":["memchr","memmem","Finder"],"kind":"struct"},"24:1793:3547":{"crate_id":24,"path":["syn","parse","StepCursor"],"kind":"struct"},"11:1891:4801":{"crate_id":11,"path":["hashbrown","set","Drain"],"kind":"struct"},"2:11234:15983":{"crate_id":2,"path":["core","slice","iter","RSplitMut"],"kind":"struct"},"2:43191:8812":{"crate_id":2,"path":["core","slice","iter","ChunksExact"],"kind":"struct"},"2:10198:130":{"crate_id":2,"path":["core","fmt","Display"],"kind":"trait"},"2:12991:121":{"crate_id":2,"path":["core","str","lossy","Debug"],"kind":"struct"},"9:0:3179":{"crate_id":9,"path":["miniz_oxide"],"kind":"module"},"16:4641:6500":{"crate_id":16,"path":["gimli","constants","DwVirtuality"],"kind":"struct"},"11:1896:4799":{"crate_id":11,"path":["hashbrown","set","ExtractIf"],"kind":"struct"},"17:15151:6121":{"crate_id":17,"path":["object","pe","ImageAuxSymbolFunctionBeginEnd"],"kind":"struct"},"24:4388:3711":{"crate_id":24,"path":["syn","token","DotDotEq"],"kind":"struct"},"2:4349:16019":{"crate_id":2,"path":["core","async_iter","async_iter","IntoAsyncIterator"],"kind":"trait"},"24:5945:2547":{"crate_id":24,"path":["syn","ty","ReturnType"],"kind":"enum"},"2:3304:143":{"crate_id":2,"path":["core","ops","function","FnOnce"],"kind":"trait"},"2:2782:16040":{"crate_id":2,"path":["core","convert","num","FloatToInt"],"kind":"trait"},"24:5233:3341":{"crate_id":24,"path":["syn","expr","ExprCast"],"kind":"struct"},"2:31969:237":{"crate_id":2,"path":["core","marker","Send"],"kind":"trait"},"5:3634:183":{"crate_id":5,"path":["alloc","collections","linked_list","LinkedList"],"kind":"struct"},"24:4791:3739":{"crate_id":24,"path":["syn","token","Slash"],"kind":"struct"},"2:41604:4003":{"crate_id":2,"path":["core","panic","unwind_safe","UnwindSafe"],"kind":"trait"},"17:11324:23488":{"crate_id":17,"path":["object","read","elf","file","ElfFile"],"kind":"struct"},"16:872:36731":{"crate_id":16,"path":["gimli","read","endian_slice","DebugLen"],"kind":"struct"},"1:10758:31924":{"crate_id":1,"path":["std","sys","pal","unix","kernel_copy","FdHandle"],"kind":"enum"},"2:45289:8228":{"crate_id":2,"path":["core","core_arch","simd","u8x4"],"kind":"struct"},"2:726:10676":{"crate_id":2,"path":["core","num","nonzero","ZeroablePrimitive"],"kind":"trait"},"2:44285:227":{"crate_id":2,"path":["core","future","ResumeTy"],"kind":"struct"},"18:531:8558":{"crate_id":18,"path":["memchr","memmem","prefilter","PrefilterState"],"kind":"struct"},"24:4726:3734":{"crate_id":24,"path":["syn","token","Semi"],"kind":"struct"},"2:40181:3517":{"crate_id":2,"path":["core","iter","adapters","cycle","Cycle"],"kind":"struct"},"24:363:37139":{"crate_id":24,"path":["syn","buffer","empty","UnsafeSyncEntry"],"kind":"struct"},"6:538:6939":{"crate_id":6,"path":["libc","unix","pollfd"],"kind":"struct"},"17:11341:23476":{"crate_id":17,"path":["object","read","elf","segment","ElfSegmentIterator"],"kind":"struct"},"2:2939:10582":{"crate_id":2,"path":["core","error","Request"],"kind":"struct"},"24:5283:3365":{"crate_id":24,"path":["syn","expr","ExprLoop"],"kind":"struct"},"2:42442:8199":{"crate_id":2,"path":["core","fmt","rt","Placeholder"],"kind":"struct"},"2:3298:141":{"crate_id":2,"path":["core","ops","function","Fn"],"kind":"trait"},"1:1939:9993":{"crate_id":1,"path":["std","error","Report"],"kind":"struct"},"1:3351:10653":{"crate_id":1,"path":["std","io","stdio","Stderr"],"kind":"struct"},"1:8883:10775":{"crate_id":1,"path":["std","process","CommandArgs"],"kind":"struct"},"1:12092:13":{"crate_id":1,"path":["std","fn"],"kind":"primitive"},"2:43793:8907":{"crate_id":2,"path":["core","str","pattern","CharArraySearcher"],"kind":"struct"},"6:1565:7011":{"crate_id":6,"path":["libc","unix","linux_like","tm"],"kind":"struct"},"2:12772:8567":{"crate_id":2,"path":["core","str","pattern","Searcher"],"kind":"trait"},"2:21424:34260":{"crate_id":2,"path":["core","core_simd","swizzle","rotate_elements_left","Rotate"],"kind":"struct"},"5:7364:4711":{"crate_id":5,"path":["alloc","alloc","Global"],"kind":"struct"},"5:1534:10536":{"crate_id":5,"path":["alloc","collections","btree","map","ValuesMut"],"kind":"struct"},"6:5390:7374":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_ifru_map"],"kind":"struct"},"5:868:5131":{"crate_id":5,"path":["alloc","collections","binary_heap","RebuildOnDrop"],"kind":"struct"},"1:12072:1520":{"crate_id":1,"path":["std","slice"],"kind":"primitive"},"2:43381:8809":{"crate_id":2,"path":["core","str","iter","RSplit"],"kind":"struct"},"1:3501:8419":{"crate_id":1,"path":["std","io","Read"],"kind":"trait"},"2:41623:226":{"crate_id":2,"path":["core","result","Result"],"kind":"enum"},"2:42712:8870":{"crate_id":2,"path":["core","hash","sip","SipHasher24"],"kind":"struct"},"2:40679:8858":{"crate_id":2,"path":["core","iter","sources","from_coroutine","FromCoroutine"],"kind":"struct"},"2:22777:33292":{"crate_id":2,"path":["core","num","fmt","Part"],"kind":"enum"},"1:1968:10579":{"crate_id":1,"path":["std","error","Indented"],"kind":"struct"},"14:187:22412":{"crate_id":14,"path":["rustc_demangle","SizeLimitedFmtAdapter"],"kind":"struct"},"1:12082:809":{"crate_id":1,"path":["std","i64"],"kind":"primitive"},"24:5207:3353":{"crate_id":24,"path":["syn","expr","ExprAsync"],"kind":"struct"},"1:8377:8945":{"crate_id":1,"path":["std","os","unix","net","ancillary","SocketCred"],"kind":"struct"},"9:502:6876":{"crate_id":9,"path":["miniz_oxide","StreamResult"],"kind":"struct"},"2:3912:3418":{"crate_id":2,"path":["core","array","iter","IntoIter"],"kind":"struct"},"16:5897:6520":{"crate_id":16,"path":["gimli","read","cfi","Augmentation"],"kind":"struct"},"11:800:4801":{"crate_id":11,"path":["hashbrown","map","Drain"],"kind":"struct"},"1:2030:198":{"crate_id":1,"path":["std","ffi","os_str","OsString"],"kind":"struct"},"24:3025:3669":{"crate_id":24,"path":["syn","token","Await"],"kind":"struct"},"17:11089:23445":{"crate_id":17,"path":["object","read","coff","section","CoffSegmentIterator"],"kind":"struct"},"17:14752:5951":{"crate_id":17,"path":["object","pe","ImageOs2Header"],"kind":"struct"},"17:12993:23427":{"crate_id":17,"path":["object","read","RelocationTarget"],"kind":"enum"},"2:41907:95":{"crate_id":2,"path":["core","sync","atomic","AtomicU32"],"kind":"struct"},"24:1606:36972":{"crate_id":24,"path":["syn","lookahead","TokenMarker"],"kind":"enum"},"17:13046:5618":{"crate_id":17,"path":["object","read","CompressedFileRange"],"kind":"struct"},"17:12089:5565":{"crate_id":17,"path":["object","read","macho","section","MachOSectionInternal"],"kind":"struct"},"16:6504:8690":{"crate_id":16,"path":["gimli","read","aranges","ArangeHeader"],"kind":"struct"},"1:5653:10774":{"crate_id":1,"path":["std","process","Termination"],"kind":"trait"},"1:11553:10672":{"crate_id":1,"path":["std","sys_common","net","TcpListener"],"kind":"struct"},"23:46:3450":{"crate_id":23,"path":["quote","ident_fragment","IdentFragment"],"kind":"trait"},"1:1590:8771":{"crate_id":1,"path":["std","collections","hash","set","Intersection"],"kind":"struct"},"24:4996:3338":{"crate_id":24,"path":["syn","derive","DataEnum"],"kind":"struct"},"23:235:4282":{"crate_id":23,"path":["quote","__private","get_span","GetSpan"],"kind":"struct"},"5:2205:8776":{"crate_id":5,"path":["alloc","collections","btree","merge_iter","MergeIterInner"],"kind":"struct"},"17:10710:23420":{"crate_id":17,"path":["object","read","any","ComdatSectionIterator"],"kind":"struct"},"1:6439:186":{"crate_id":1,"path":["std","sync","mutex","Mutex"],"kind":"struct"},"2:22654:8819":{"crate_id":2,"path":["core","num","dec2flt","decimal","Decimal"],"kind":"struct"},"11:774:8769":{"crate_id":11,"path":["hashbrown","map","Keys"],"kind":"struct"},"2:45968:8292":{"crate_id":2,"path":["core","core_arch","simd","i16x16"],"kind":"struct"},"6:5102:7271":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Sym"],"kind":"struct"},"2:41220:171":{"crate_id":2,"path":["core","net","ip_addr","IpAddr"],"kind":"enum"},"1:2654:5201":{"crate_id":1,"path":["std","io","buffered","bufwriter","BufWriter"],"kind":"struct"},"24:4767:3737":{"crate_id":24,"path":["syn","token","Shr"],"kind":"struct"},"6:1699:7098":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_storage"],"kind":"struct"},"6:6746:7693":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_statistics"],"kind":"struct"},"1:5210:204":{"crate_id":1,"path":["std","path","PathBuf"],"kind":"struct"},"17:10218:5494":{"crate_id":17,"path":["object","endian","U32Bytes"],"kind":"struct"},"16:6634:6466":{"crate_id":16,"path":["gimli","read","line","DebugLine"],"kind":"struct"},"24:4540:3721":{"crate_id":24,"path":["syn","token","Ne"],"kind":"struct"},"6:4959:7215":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_replay"],"kind":"struct"},"17:14325:5878":{"crate_id":17,"path":["object","macho","FilesetEntryCommand"],"kind":"struct"},"17:14271:5871":{"crate_id":17,"path":["object","macho","PrebindCksumCommand"],"kind":"struct"},"24:3076:105":{"crate_id":24,"path":["syn","token","Break"],"kind":"struct"},"18:589:5376":{"crate_id":18,"path":["memchr","memmem","twoway","TwoWay"],"kind":"struct"},"17:14284:5873":{"crate_id":17,"path":["object","macho","UuidCommand"],"kind":"struct"},"2:40693:3485":{"crate_id":2,"path":["core","iter","sources","once","Once"],"kind":"struct"},"21:366:4826":{"crate_id":21,"path":["proc_macro","bridge","rpc","PanicMessage"],"kind":"enum"},"1:9054:117":{"crate_id":1,"path":["std","sync","mpmc","context","Context"],"kind":"struct"},"24:3620:3691":{"crate_id":24,"path":["syn","token","Super"],"kind":"struct"},"17:12485:23599":{"crate_id":17,"path":["object","read","pe","resource","ResourceNameOrId"],"kind":"enum"},"16:6433:8685":{"crate_id":16,"path":["gimli","read","abbrev","Abbreviations"],"kind":"struct"},"2:21555:10828":{"crate_id":2,"path":["core","core_simd","lane_count","LaneCount"],"kind":"struct"},"24:646:8516":{"crate_id":24,"path":["syn","error","ErrorMessage"],"kind":"struct"},"24:2259:3417":{"crate_id":24,"path":["syn","punctuated","IntoPairs"],"kind":"struct"},"2:39230:3469":{"crate_id":2,"path":["core","ops","range","Bound"],"kind":"enum"},"17:13024:23428":{"crate_id":17,"path":["object","read","CompressionFormat"],"kind":"enum"},"1:9479:139":{"crate_id":1,"path":["std","sys","pal","unix","fs","File"],"kind":"struct"},"1:8404:8421":{"crate_id":1,"path":["std","os","unix","ucred","UCred"],"kind":"struct"},"6:4952:7212":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_mask"],"kind":"struct"},"2:43413:8883":{"crate_id":2,"path":["core","str","iter","SplitTerminator"],"kind":"struct"},"2:40114:10615":{"crate_id":2,"path":["core","io","borrowed_buf","BorrowedCursor"],"kind":"struct"},"2:4689:3586":{"crate_id":2,"path":["core","cell","BorrowRefMut"],"kind":"struct"},"1:11330:5232":{"crate_id":1,"path":["std","sys_common","once","futex","CompletionGuard"],"kind":"struct"},"6:8294:7933":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_rwlock_t"],"kind":"struct"},"16:7570:6473":{"crate_id":16,"path":["gimli","read","pubtypes","DebugPubTypes"],"kind":"struct"},"2:4:1130":{"crate_id":2,"path":["core","panic"],"kind":"macro"},"17:10439:5501":{"crate_id":17,"path":["object","read","util","StringTable"],"kind":"struct"},"2:33944:3735":{"crate_id":2,"path":["core","ops","bit","Shl"],"kind":"trait"},"5:2087:3557":{"crate_id":5,"path":["alloc","collections","btree","map","Cursor"],"kind":"struct"},"16:7590:6474":{"crate_id":16,"path":["gimli","read","rnglists","DebugRanges"],"kind":"struct"},"2:3510:16017":{"crate_id":2,"path":["core","ops","try_trait","Residual"],"kind":"trait"},"1:4124:10698":{"crate_id":1,"path":["std","os","unix","fs","DirEntryExt2"],"kind":"trait"},"1:3353:10654":{"crate_id":1,"path":["std","io","stdio","StderrLock"],"kind":"struct"},"6:4897:7186":{"crate_id":6,"path":["libc","unix","linux_like","linux","msginfo"],"kind":"struct"},"1:8913:8441":{"crate_id":1,"path":["std","process","ExitStatusError"],"kind":"struct"},"2:40702:3487":{"crate_id":2,"path":["core","iter","sources","once_with","OnceWith"],"kind":"struct"},"6:6491:7578":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","mallinfo"],"kind":"struct"},"24:5911:2549":{"crate_id":24,"path":["syn","ty","TypePath"],"kind":"struct"},"21:2620:3438":{"crate_id":21,"path":["proc_macro","LexError"],"kind":"struct"},"16:7580:8746":{"crate_id":16,"path":["gimli","read","pubtypes","PubTypesEntryIter"],"kind":"struct"},"5:7373:3418":{"crate_id":5,"path":["alloc","collections","binary_heap","IntoIter"],"kind":"struct"},"6:5671:7505":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_can_addr"],"kind":"union"},"5:7056:263":{"crate_id":5,"path":["alloc","vec","Vec"],"kind":"struct"},"17:13455:5700":{"crate_id":17,"path":["object","elf","ProgramHeader64"],"kind":"struct"},"2:7424:2805":{"crate_id":2,"path":["core","iter","adapters","zip","zip"],"kind":"function"},"16:5846:8630":{"crate_id":16,"path":["gimli","read","cfi","CfiEntriesIter"],"kind":"struct"},"2:45420:8242":{"crate_id":2,"path":["core","core_arch","simd","i8x8"],"kind":"struct"},"6:5236:7309":{"crate_id":6,"path":["libc","unix","linux_like","linux","inotify_event"],"kind":"struct"},"11:687:3423":{"crate_id":11,"path":["hashbrown","map","IterMut"],"kind":"struct"},"1:8031:3557":{"crate_id":1,"path":["std","io","cursor","Cursor"],"kind":"struct"},"17:11567:23519":{"crate_id":17,"path":["object","read","elf","note","GnuProperty"],"kind":"struct"},"24:98:3880":{"crate_id":24,"path":["syn","token","private","CustomToken"],"kind":"trait"},"17:14131:5830":{"crate_id":17,"path":["object","macho","SymtabCommand"],"kind":"struct"},"1:4110:10696":{"crate_id":1,"path":["std","os","unix","fs","FileTypeExt"],"kind":"trait"},"17:12478:5582":{"crate_id":17,"path":["object","read","pe","resource","ResourceName"],"kind":"struct"},"15:327:10068":{"crate_id":15,"path":["addr2line","RangeAttributes"],"kind":"struct"},"2:35820:3737":{"crate_id":2,"path":["core","ops","bit","Shr"],"kind":"trait"},"5:1478:3423":{"crate_id":5,"path":["alloc","collections","btree","map","IterMut"],"kind":"struct"},"17:13509:5706":{"crate_id":17,"path":["object","elf","Verdef"],"kind":"struct"},"1:4551:10724":{"crate_id":1,"path":["std","os","unix","process","CommandExt"],"kind":"trait"},"1:481:5199":{"crate_id":1,"path":["std","thread","spawn_unchecked_","MaybeDangling"],"kind":"struct"},"17:14723:5931":{"crate_id":17,"path":["object","pe","ImageDosHeader"],"kind":"struct"},"17:15078:6105":{"crate_id":17,"path":["object","pe","ImageSymbol"],"kind":"struct"},"11:1903:8771":{"crate_id":11,"path":["hashbrown","set","Intersection"],"kind":"struct"},"2:9348:15990":{"crate_id":2,"path":["core","panicking","assert_matches_failed","Pattern"],"kind":"struct"},"2:45473:8245":{"crate_id":2,"path":["core","core_arch","simd","i64x1"],"kind":"struct"},"16:7014:23342":{"crate_id":16,"path":["gimli","read","loclists","RawLocListEntry"],"kind":"enum"},"2:31946:33953":{"crate_id":2,"path":["core","error","tags","MaybeSizedValue"],"kind":"struct"},"21:2758:2678":{"crate_id":21,"path":["proc_macro","Literal"],"kind":"struct"},"2:45923:8291":{"crate_id":2,"path":["core","core_arch","simd","i8x32"],"kind":"struct"},"5:1566:210":{"crate_id":5,"path":["alloc","collections","btree","map","Range"],"kind":"struct"},"20:712:3438":{"crate_id":20,"path":["proc_macro2","fallback","LexError"],"kind":"struct"},"17:10137:23390":{"crate_id":17,"path":["object","endian","Endianness"],"kind":"enum"},"17:12225:23572":{"crate_id":17,"path":["object","read","pe","section","PeSegmentIterator"],"kind":"struct"},"1:8001:4867":{"crate_id":1,"path":["std","hash","random","RandomState"],"kind":"struct"},"16:4718:6501":{"crate_id":16,"path":["gimli","constants","DwLang"],"kind":"struct"},"6:5489:7430":{"crate_id":6,"path":["libc","unix","linux_like","linux","tls12_crypto_info_aes_gcm_128"],"kind":"struct"},"21:1813:4822":{"crate_id":21,"path":["proc_macro","bridge","Marked"],"kind":"struct"},"16:7648:23347":{"crate_id":16,"path":["gimli","read","rnglists","RawRngListIter"],"kind":"struct"},"17:14855:6037":{"crate_id":17,"path":["object","pe","ImageFileHeader"],"kind":"struct"},"18:718:5388":{"crate_id":18,"path":["memchr","memmem","NeedleInfo"],"kind":"struct"},"17:10170:5492":{"crate_id":17,"path":["object","endian","BigEndian"],"kind":"struct"},"24:274:9975":{"crate_id":24,"path":["syn","attr","parsing","DisplayPath"],"kind":"struct"},"17:15356:6175":{"crate_id":17,"path":["object","pe","ImageResourceDirectory"],"kind":"struct"},"1:6625:10793":{"crate_id":1,"path":["std","sync","poison","TryLockError"],"kind":"enum"},"5:7453:8789":{"crate_id":5,"path":["alloc","collections","btree","set_val","SetValZST"],"kind":"struct"},"24:2588:5336":{"crate_id":24,"path":["syn","thread","ThreadBound"],"kind":"struct"},"16:2458:6438":{"crate_id":16,"path":["gimli","common","DebugArangesOffset"],"kind":"struct"},"2:4283:33272":{"crate_id":2,"path":["core","asserting","TryCaptureWithoutDebug"],"kind":"struct"},"6:5134:7274":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Phdr"],"kind":"struct"},"1:12091:1264":{"crate_id":1,"path":["std","reference"],"kind":"primitive"},"16:6872:8723":{"crate_id":16,"path":["gimli","read","line","CompleteLineProgram"],"kind":"struct"},"16:2338:6426":{"crate_id":16,"path":["gimli","common","Encoding"],"kind":"struct"},"11:2562:6813":{"crate_id":11,"path":["hashbrown","raw","TableLayout"],"kind":"struct"},"17:11510:23470":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdat"],"kind":"struct"},"5:7445:210":{"crate_id":5,"path":["alloc","collections","btree","set","Range"],"kind":"struct"},"9:447:22315":{"crate_id":9,"path":["miniz_oxide","MZError"],"kind":"enum"},"24:5466:3376":{"crate_id":24,"path":["syn","generics","BoundLifetimes"],"kind":"struct"},"1:7793:4584":{"crate_id":1,"path":["std","thread","Thread"],"kind":"struct"},"2:46408:8336":{"crate_id":2,"path":["core","core_arch","simd","u64x8"],"kind":"struct"},"24:2232:3416":{"crate_id":24,"path":["syn","punctuated","PairsMut"],"kind":"struct"},"24:5740:2357":{"crate_id":24,"path":["syn","path","GenericArgument"],"kind":"enum"},"16:542:8613":{"crate_id":16,"path":["gimli","read","cfi","RegisterRuleMap"],"kind":"struct"},"1:10265:28335":{"crate_id":1,"path":["std","sys","pal","unix","process","process_common","Argv"],"kind":"struct"},"17:9737:23391":{"crate_id":17,"path":["object","common","SubArchitecture"],"kind":"enum"},"23:504:4278":{"crate_id":23,"path":["quote","__private","IdentFragmentAdapter"],"kind":"struct"},"2:43293:15981":{"crate_id":2,"path":["core","slice","iter","RChunksExactMut"],"kind":"struct"},"5:7646:8797":{"crate_id":5,"path":["alloc","string","FromUtf8Error"],"kind":"struct"},"16:2612:6445":{"crate_id":16,"path":["gimli","common","DebugMacinfoOffset"],"kind":"struct"},"21:2562:3606":{"crate_id":21,"path":["proc_macro","diagnostic","Level"],"kind":"enum"},"16:5960:8642":{"crate_id":16,"path":["gimli","read","cfi","PartialFrameDescriptionEntry"],"kind":"struct"},"6:5477:7427":{"crate_id":6,"path":["libc","unix","linux_like","linux","rlimit64"],"kind":"struct"},"24:267:9974":{"crate_id":24,"path":["syn","attr","parsing","DisplayAttrStyle"],"kind":"struct"},"2:11161:15986":{"crate_id":2,"path":["core","slice","iter","SplitInclusiveMut"],"kind":"struct"},"6:559:6950":{"crate_id":6,"path":["libc","unix","sigval"],"kind":"struct"},"21:940:4841":{"crate_id":21,"path":["proc_macro","bridge","client","FreeFunctions"],"kind":"struct"},"1:1607:2028":{"crate_id":1,"path":["std","collections","hash","set","Union"],"kind":"struct"},"16:7397:36764":{"crate_id":16,"path":["gimli","read","op","EvaluationWaiting"],"kind":"enum"},"1:1602:8773":{"crate_id":1,"path":["std","collections","hash","set","SymmetricDifference"],"kind":"struct"},"1:8015:28183":{"crate_id":1,"path":["std","io","buffered","linewritershim","LineWriterShim"],"kind":"struct"},"17:15992:6364":{"crate_id":17,"path":["object","xcoff","AuxHeader64"],"kind":"struct"},"2:40084:5178":{"crate_id":2,"path":["core","ffi","VaListImpl"],"kind":"struct"},"17:15190:6132":{"crate_id":17,"path":["object","pe","ImageAuxSymbolCrc"],"kind":"struct"},"16:5722:6464":{"crate_id":16,"path":["gimli","read","cfi","EhFrameHdr"],"kind":"struct"},"16:5107:6514":{"crate_id":16,"path":["gimli","constants","DwRle"],"kind":"struct"},"1:4782:10751":{"crate_id":1,"path":["std","os","linux","process","ChildExt"],"kind":"trait"},"1:12083:805":{"crate_id":1,"path":["std","i128"],"kind":"primitive"},"24:3059:2039":{"crate_id":24,"path":["syn","token","Box"],"kind":"struct"},"24:1903:3556":{"crate_id":24,"path":["syn","parse","Nothing"],"kind":"struct"},"6:517:6927":{"crate_id":6,"path":["libc","unix","ipv6_mreq"],"kind":"struct"},"2:31897:6812":{"crate_id":2,"path":["core","convert","Infallible"],"kind":"enum"},"1:7957:8376":{"crate_id":1,"path":["std","fs","FileTimes"],"kind":"struct"},"5:3660:3423":{"crate_id":5,"path":["alloc","collections","linked_list","IterMut"],"kind":"struct"},"24:1078:37096":{"crate_id":24,"path":["syn","generics","TypeParams"],"kind":"struct"},"17:13325:5675":{"crate_id":17,"path":["object","elf","Sym32"],"kind":"struct"},"1:5714:5213":{"crate_id":1,"path":["std","sync","mpsc","Sender"],"kind":"struct"},"2:32446:5340":{"crate_id":2,"path":["core","ops","arith","Mul"],"kind":"trait"},"1:8297:3530":{"crate_id":1,"path":["std","io","Take"],"kind":"struct"},"2:42963:8875":{"crate_id":2,"path":["core","slice","ascii","EscapeAscii"],"kind":"struct"},"6:5466:7422":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_prinfo"],"kind":"struct"},"5:4238:5149":{"crate_id":5,"path":["alloc","collections","vec_deque","into_iter","try_fold","Guard"],"kind":"struct"},"11:710:10092":{"crate_id":11,"path":["hashbrown","map","IntoKeys"],"kind":"struct"},"2:22102:10619":{"crate_id":2,"path":["core","core_simd","vector","sealed","Sealed"],"kind":"trait"},"16:5863:23332":{"crate_id":16,"path":["gimli","read","cfi","CieOrFde"],"kind":"enum"},"2:2615:135":{"crate_id":2,"path":["core","cmp","Eq"],"kind":"trait"},"2:12778:15991":{"crate_id":2,"path":["core","str","pattern","ReverseSearcher"],"kind":"trait"},"24:5310:3367":{"crate_id":24,"path":["syn","expr","ExprRange"],"kind":"struct"},"1:4048:10692":{"crate_id":1,"path":["std","os","unix","fs","FileExt"],"kind":"trait"},"16:2355:6428":{"crate_id":16,"path":["gimli","common","LineEncoding"],"kind":"struct"},"1:8583:10764":{"crate_id":1,"path":["std","path","Component"],"kind":"enum"},"24:3093:2373":{"crate_id":24,"path":["syn","token","Const"],"kind":"struct"},"1:5390:130":{"crate_id":1,"path":["std","path","Display"],"kind":"struct"},"18:80:27658":{"crate_id":18,"path":["memchr","memchr","iter","Memchr"],"kind":"struct"},"2:46255:8331":{"crate_id":2,"path":["core","core_arch","simd","u16x32"],"kind":"struct"},"2:43431:8884":{"crate_id":2,"path":["core","str","iter","RSplitTerminator"],"kind":"struct"},"20:950:1991":{"crate_id":20,"path":["proc_macro2","Ident"],"kind":"struct"},"2:3294:2542":{"crate_id":2,"path":["core","ops","drop","Drop"],"kind":"trait"},"1:880:8770":{"crate_id":1,"path":["std","collections","hash","map","Values"],"kind":"struct"},"24:53:2067":{"crate_id":24,"path":["syn","token"],"kind":"module"},"24:5523:1991":{"crate_id":24,"path":["syn","ident","Ident"],"kind":"function"},"18:573:5369":{"crate_id":18,"path":["memchr","memmem","twoway","Forward"],"kind":"struct"},"2:40150:3516":{"crate_id":2,"path":["core","iter","adapters","chain","Chain"],"kind":"struct"},"1:5828:10788":{"crate_id":1,"path":["std","sync","barrier","Barrier"],"kind":"struct"}},"external_crates":{"23":{"name":"quote","html_root_url":"https://docs.rs/quote/1.0.35/"},"20":{"name":"proc_macro2","html_root_url":"https://docs.rs/proc-macro2/1.0.78/"},"17":{"name":"object","html_root_url":"https://doc.rust-lang.org/nightly/"},"14":{"name":"rustc_demangle","html_root_url":"https://doc.rust-lang.org/nightly/"},"11":{"name":"hashbrown","html_root_url":"https://doc.rust-lang.org/nightly/"},"8":{"name":"cfg_if","html_root_url":"https://docs.rs/cfg-if/"},"5":{"name":"alloc","html_root_url":"https://doc.rust-lang.org/nightly/"},"2":{"name":"core","html_root_url":"https://doc.rust-lang.org/nightly/"},"22":{"name":"unicode_ident","html_root_url":"https://docs.rs/unicode-ident/1.0.12/"},"19":{"name":"panic_unwind","html_root_url":"https://doc.rust-lang.org/nightly/"},"16":{"name":"gimli","html_root_url":"https://doc.rust-lang.org/nightly/"},"13":{"name":"std_detect","html_root_url":"https://doc.rust-lang.org/nightly/"},"10":{"name":"adler","html_root_url":"https://docs.rs/adler/1.0.2/"},"7":{"name":"unwind","html_root_url":"https://doc.rust-lang.org/nightly/"},"4":{"name":"rustc_std_workspace_core","html_root_url":"https://doc.rust-lang.org/nightly/"},"1":{"name":"std","html_root_url":"https://doc.rust-lang.org/nightly/"},"24":{"name":"syn","html_root_url":"https://docs.rs/syn/2.0.50/"},"21":{"name":"proc_macro","html_root_url":"https://doc.rust-lang.org/nightly/"},"18":{"name":"memchr","html_root_url":"https://doc.rust-lang.org/nightly/"},"15":{"name":"addr2line","html_root_url":"https://doc.rust-lang.org/nightly/"},"12":{"name":"rustc_std_workspace_alloc","html_root_url":"https://doc.rust-lang.org/nightly/"},"9":{"name":"miniz_oxide","html_root_url":"https://doc.rust-lang.org/nightly/"},"6":{"name":"libc","html_root_url":"https://doc.rust-lang.org/nightly/"},"3":{"name":"compiler_builtins","html_root_url":"https://doc.rust-lang.org/nightly/"}},"format_version":28}