{"root":"0:0:1590","crate_version":"1.0.137","includes_private":false,"index":{"2:9036:3621":{"id":"2:9036:3621","crate_id":2,"name":"UnwindSafe","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":true,"is_unsafe":false,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:3463:4374":{"id":"2:3463:4374","crate_id":2,"name":"Generator","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3465:213","2:3466:188","2:3467:61119"],"generics":{"params":[{"name":"R","kind":{"type":{"bounds":[],"default":{"kind":"tuple","inner":[]},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:13194:61535":{"id":"2:13194:61535","crate_id":2,"name":"trim_start_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. `start` in this context means the first\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be left side, and for right-to-left languages like\nArabic or Hebrew, this will be the right side.\n\n# Examples\n\nBasic usage:\n\n```\nassert_eq!(\"11foo1bar11\".trim_start_matches('1'), \"foo1bar11\");\nassert_eq!(\"123foo1bar123\".trim_start_matches(char::is_numeric), \"foo1bar123\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_start_matches(x), \"foo1bar12\");\n```","links":{"prim@char":"1:15669:2933","self::pattern":"2:12731:5028"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[stable(feature = \"trim_direction\", since = \"1.30.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:12741:5029","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:5615:4566":{"id":"1:5615:4566","crate_id":1,"name":"FileExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:5616:58640","1:5617:58642","1:5618:58641","1:5619:58643"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:13206:1822":{"id":"2:13206:1822","crate_id":2,"name":"trim_left_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. 'Left' in this context means the first\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _right_ side, not the left.\n\n# Examples\n\nBasic usage:\n\n```\nassert_eq!(\"11foo1bar11\".trim_left_matches('1'), \"foo1bar11\");\nassert_eq!(\"123foo1bar123\".trim_left_matches(char::is_numeric), \"foo1bar123\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_left_matches(x), \"foo1bar12\");\n```","links":{"prim@char":"1:15669:2933","self::pattern":"2:12731:5028"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]","#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_start_matches`\",\nsuggestion = \"trim_start_matches\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_start_matches`"},"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:12741:5029","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:3304:4825":{"id":"2:3304:4825","crate_id":2,"name":"BitAnd","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3306:163","2:3307:325"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:13136:2484":{"id":"2:13136:2484","crate_id":2,"name":"find","span":null,"visibility":"public","docs":"Returns the byte index of the first character of this string slice that\nmatches the pattern.\n\nReturns [`None`] if the pattern doesn't match.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nlet s = \"Löwe 老虎 Léopard Gepardi\";\n\nassert_eq!(s.find('L'), Some(0));\nassert_eq!(s.find('é'), Some(14));\nassert_eq!(s.find(\"pard\"), Some(17));\n```\n\nMore complex patterns using point-free style and closures:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\n\nassert_eq!(s.find(char::is_whitespace), Some(5));\nassert_eq!(s.find(char::is_lowercase), Some(1));\nassert_eq!(s.find(|c: char| c.is_whitespace() || c.is_lowercase()), Some(1));\nassert_eq!(s.find(|c: char| (c < 'o') && (c > 'a')), Some(4));\n```\n\nNot finding the pattern:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\nlet x: &[_] = &['1', '2'];\n\nassert_eq!(s.find(x), None);\n```","links":{"self::pattern":"2:12731:5028","`None`":"2:47055:158","prim@char":"1:15669:2933"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:47055:158","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"usize"}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:12741:5029","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:7631:5141":{"id":"2:7631:5141","crate_id":2,"name":"Step","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:7632:60938","2:7633:60939","2:7634:60936","2:7635:60934","2:7636:60940","2:7637:60937","2:7638:60935"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Clone","id":"2:2799:98","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"PartialOrd","id":"2:2875:166","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"Self"}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:3339:4978":{"id":"2:3339:4978","crate_id":2,"name":"BitXorAssign","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3341:331"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:13209:61537":{"id":"2:13209:61537","crate_id":2,"name":"trim_right_matches","span":null,"visibility":"public","docs":"Returns a string slice with all suffixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. 'Right' in this context means the last\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _left_ side, not the right.\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_right_matches('1'), \"11foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_right_matches(char::is_numeric), \"123foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_right_matches(x), \"12foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1fooX\".trim_right_matches(|c| c == '1' || c == 'X'), \"1foo\");\n```","links":{"self::pattern":"2:12731:5028","prim@char":"1:15669:2933"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]","#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_end_matches`\",\nsuggestion = \"trim_end_matches\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_end_matches`"},"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:12741:5029","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:12741:5029","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}}}},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"ReverseSearcher","id":"2:12756:5027","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13096:2018":{"id":"2:13096:2018","crate_id":2,"name":"is_empty","span":null,"visibility":"public","docs":"Returns `true` if `self` has a length of zero bytes.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\";\nassert!(s.is_empty());\n\nlet s = \"not empty\";\nassert!(!s.is_empty());\n```","links":{},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]","#[rustc_const_stable(feature = \"const_str_is_empty\", since = \"1.39.0\")]","#[must_use]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:6753:4563":{"id":"1:6753:4563","crate_id":1,"name":"AsRawFd","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:6754:59965"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:13095:761":{"id":"2:13095:761","crate_id":2,"name":"len","span":null,"visibility":"public","docs":"Returns the length of `self`.\n\nThis length is in bytes, not [`char`]s or graphemes. In other words,\nit might not be what a human considers the length of the string.\n\n[`char`]: prim@char\n\n# Examples\n\nBasic usage:\n\n```\nlet len = \"foo\".len();\nassert_eq!(3, len);\n\nassert_eq!(\"ƒoo\".len(), 4); // fancy f!\nassert_eq!(\"ƒoo\".chars().count(), 3);\n```","links":{"prim@char":"1:15669:2933"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]","#[rustc_const_stable(feature = \"const_str_len\", since = \"1.39.0\")]","#[must_use]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:3904:67":{"id":"2:3904:67","crate_id":2,"name":"Any","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3905:1385"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"outlives":"'static"}],"implementations":[]}},"2:3074:73":{"id":"2:3074:73","crate_id":2,"name":"AsRef","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3076:280"],"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"2:3182:3308","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"bounds":[],"implementations":[]}},"2:8176:3310":{"id":"2:8176:3310","crate_id":2,"name":"ExactSizeIterator","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:8177:761","2:8178:2018"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Iterator","id":"2:8302:149","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"1:5637:4569":{"id":"1:5637:4569","crate_id":1,"name":"MetadataExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:5638:8256","1:5639:58445","1:5640:6829","1:5641:59917","1:5642:4901","1:5643:4902","1:5644:59918","1:5645:1264","1:5646:59919","1:5647:59920","1:5648:59921","1:5649:59922","1:5650:59923","1:5651:59924","1:5652:59925","1:5653:59926"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:13109:56742":{"id":"2:13109:56742","crate_id":2,"name":"get_mut","span":null,"visibility":"public","docs":"Returns a mutable subslice of `str`.\n\nThis is the non-panicking alternative to indexing the `str`. Returns\n[`None`] whenever equivalent indexing operation would panic.\n\n# Examples\n\n```\nlet mut v = String::from(\"hello\");\n// correct length\nassert!(v.get_mut(0..5).is_some());\n// out of bounds\nassert!(v.get_mut(..42).is_none());\nassert_eq!(Some(\"he\"), v.get_mut(0..2).map(|v| &*v));\n\nassert_eq!(\"hello\", v);\n{\n    let s = v.get_mut(0..2);\n    let s = s.map(|s| {\n        s.make_ascii_uppercase();\n        &*s\n    });\n    assert_eq!(Some(\"HE\"), s);\n}\nassert_eq!(\"HEllo\", v);\n```","links":{"`None`":"2:47055:158"},"attrs":["#[stable(feature = \"str_checked_slicing\", since = \"1.20.0\")]","#[rustc_const_unstable(feature = \"const_slice_index\", issue = \"none\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["i",{"kind":"generic","inner":"I"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:47055:158","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"qualified_path","inner":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"I"},"trait":{"kind":"resolved_path","inner":{"name":"SliceIndex","id":"2:10632:194","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}},"param_names":[]}}}}}}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"I"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"SliceIndex","id":"2:10632:194","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:3679:3275":{"id":"2:3679:3275","crate_id":2,"name":"CoerceUnsized","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":[],"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"2:3182:3308","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"bounds":[],"implementations":[]}},"1:6579:4569":{"id":"1:6579:4569","crate_id":1,"name":"MetadataExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:6580:58897","1:6581:8602","1:6582:8603","1:6583:8605","1:6584:8604","1:6585:8606","1:6586:8607","1:6587:8609","1:6588:6870","1:6589:8612","1:6590:8613","1:6591:8614","1:6592:8615","1:6593:8616","1:6594:8617","1:6595:8610","1:6596:8611"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:13107:1802":{"id":"2:13107:1802","crate_id":2,"name":"get","span":null,"visibility":"public","docs":"Returns a subslice of `str`.\n\nThis is the non-panicking alternative to indexing the `str`. Returns\n[`None`] whenever equivalent indexing operation would panic.\n\n# Examples\n\n```\nlet v = String::from(\"🗻∈🌏\");\n\nassert_eq!(Some(\"🗻\"), v.get(0..4));\n\n// indices not on UTF-8 sequence boundaries\nassert!(v.get(1..).is_none());\nassert!(v.get(..8).is_none());\n\n// out of bounds\nassert!(v.get(..42).is_none());\n```","links":{"`None`":"2:47055:158"},"attrs":["#[stable(feature = \"str_checked_slicing\", since = \"1.20.0\")]","#[rustc_const_unstable(feature = \"const_slice_index\", issue = \"none\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["i",{"kind":"generic","inner":"I"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:47055:158","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"qualified_path","inner":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"I"},"trait":{"kind":"resolved_path","inner":{"name":"SliceIndex","id":"2:10632:194","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}},"param_names":[]}}}}}}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"I"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"SliceIndex","id":"2:10632:194","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"5:5770:62174":{"id":"5:5770:62174","crate_id":5,"name":"to_lowercase","span":null,"visibility":"public","docs":"Returns the lowercase equivalent of this string slice, as a new [`String`].\n\n'Lowercase' is defined according to the terms of the Unicode Derived Core Property\n`Lowercase`.\n\nSince some characters can expand into multiple characters when changing\nthe case, this function returns a [`String`] instead of modifying the\nparameter in-place.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"HELLO\";\n\nassert_eq!(\"hello\", s.to_lowercase());\n```\n\nA tricky example, with sigma:\n\n```\nlet sigma = \"Σ\";\n\nassert_eq!(\"σ\", sigma.to_lowercase());\n\n// but at the end of a word, it's ς, not σ:\nlet odysseus = \"ὈΔΥΣΣΕΎΣ\";\n\nassert_eq!(\"ὀδυσσεύς\", odysseus.to_lowercase());\n```\n\nLanguages without case are not changed:\n\n```\nlet new_year = \"农历新年\";\n\nassert_eq!(new_year, new_year.to_lowercase());\n```","links":{"`String`":"5:8069:196"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the lowercase string as a new String, \\\n                  without modifying the original\"]","#[stable(feature = \"unicode_case_mapping\", since = \"1.2.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:8069:196","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13124:5785":{"id":"2:13124:5785","crate_id":2,"name":"lines","span":null,"visibility":"public","docs":"An iterator over the lines of a string, as string slices.\n\nLines are ended with either a newline (`\\n`) or a carriage return with\na line feed (`\\r\\n`).\n\nThe final line ending is optional. A string that ends with a final line\nending will return the same lines as an otherwise identical string\nwithout a final line ending.\n\n# Examples\n\nBasic usage:\n\n```\nlet text = \"foo\\r\\nbar\\n\\nbaz\\n\";\nlet mut lines = text.lines();\n\nassert_eq!(Some(\"foo\"), lines.next());\nassert_eq!(Some(\"bar\"), lines.next());\nassert_eq!(Some(\"\"), lines.next());\nassert_eq!(Some(\"baz\"), lines.next());\n\nassert_eq!(None, lines.next());\n```\n\nThe final line ending isn't required:\n\n```\nlet text = \"foo\\nbar\\n\\r\\nbaz\";\nlet mut lines = text.lines();\n\nassert_eq!(Some(\"foo\"), lines.next());\nassert_eq!(Some(\"bar\"), lines.next());\nassert_eq!(Some(\"\"), lines.next());\nassert_eq!(Some(\"baz\"), lines.next());\n\nassert_eq!(None, lines.next());\n```","links":{},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Lines","id":"2:49267:4628","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:2829:165":{"id":"2:2829:165","crate_id":2,"name":"PartialEq","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:2831:575","2:2832:875"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"Rhs"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"2:3182:3308","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"bounds":[],"implementations":[]}},"1:5549:4603":{"id":"1:5549:4603","crate_id":1,"name":"OsStrExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:5550:6171","1:5551:2673"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sealed","id":"1:10368:4584","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"1:9193:4596":{"id":"1:9193:4596","crate_id":1,"name":"StdFloat","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:9194:58695","1:9195:58696","1:9196:58697","1:9197:58698","1:9198:5370","1:9199:40160","1:9200:58694"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sealed","id":"1:10368:4584","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:10025:3278":{"id":"2:10025:3278","crate_id":2,"name":"Octal","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:10026:630"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:13115:4757":{"id":"2:13115:4757","crate_id":2,"name":"slice_unchecked","span":null,"visibility":"public","docs":"Creates a string slice from another string slice, bypassing safety\nchecks.\n\nThis is generally not recommended, use with caution! For a safe\nalternative see [`str`] and [`Index`].\n\n[`Index`]: crate::ops::Index\n\nThis new slice goes from `begin` to `end`, including `begin` but\nexcluding `end`.\n\nTo get a mutable string slice instead, see the\n[`slice_mut_unchecked`] method.\n\n[`slice_mut_unchecked`]: str::slice_mut_unchecked\n\n# Safety\n\nCallers of this function are responsible that three preconditions are\nsatisfied:\n\n* `begin` must not exceed `end`.\n* `begin` and `end` must be byte positions within the string slice.\n* `begin` and `end` must lie on UTF-8 sequence boundaries.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\n\nunsafe {\n    assert_eq!(\"Löwe 老虎 Léopard\", s.slice_unchecked(0, 21));\n}\n\nlet s = \"Hello, world!\";\n\nunsafe {\n    assert_eq!(\"world\", s.slice_unchecked(7, 12));\n}\n```","links":{"str::slice_mut_unchecked":"1:15674:2938","crate::ops::Index":"2:3481:2199","`str`":"1:15674:2938"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]","#[deprecated(since = \"1.29.0\", note =\n\"use `get_unchecked(begin..end)` instead\")]","#[must_use]"],"deprecation":{"since":"1.29.0","note":"use `get_unchecked(begin..end)` instead"},"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["begin",{"kind":"primitive","inner":"usize"}],["end",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}},"5:5518:5502":{"id":"5:5518:5502","crate_id":5,"name":"Join","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["5:5520:163","5:5521:34129"],"generics":{"params":[{"name":"Separator","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:1258:1584":{"id":"0:1258:1584","crate_id":0,"name":"Deserialize","span":{"filename":"src/lib.rs","begin":[98,0],"end":[103,1]},"visibility":"public","docs":null,"links":{},"attrs":["#[proc_macro_derive(Deserialize, attributes(serde))]"],"deprecation":null,"kind":"proc_macro","inner":{"kind":"derive","helpers":["serde"]}},"1:4609:4624":{"id":"1:4609:4624","crate_id":1,"name":"BufRead","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:4610:58509","1:4611:58510","1:4612:58511","1:4614:4623","1:4615:58512","1:4617:56772","1:4618:5785"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Read","id":"1:4527:4585","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"24:2628:2423":{"id":"24:2628:2423","crate_id":24,"name":"Spanned","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["24:2629:2022"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:13140:4013":{"id":"2:13140:4013","crate_id":2,"name":"rfind","span":null,"visibility":"public","docs":"Returns the byte index for the first character of the last match of the pattern in\nthis string slice.\n\nReturns [`None`] if the pattern doesn't match.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nlet s = \"Löwe 老虎 Léopard Gepardi\";\n\nassert_eq!(s.rfind('L'), Some(13));\nassert_eq!(s.rfind('é'), Some(14));\nassert_eq!(s.rfind(\"pard\"), Some(24));\n```\n\nMore complex patterns with closures:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\n\nassert_eq!(s.rfind(char::is_whitespace), Some(12));\nassert_eq!(s.rfind(char::is_lowercase), Some(20));\n```\n\nNot finding the pattern:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\nlet x: &[_] = &['1', '2'];\n\nassert_eq!(s.rfind(x), None);\n```","links":{"`None`":"2:47055:158","self::pattern":"2:12731:5028","prim@char":"1:15669:2933"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:47055:158","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"usize"}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:12741:5029","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:12741:5029","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}}}},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"ReverseSearcher","id":"2:12756:5027","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13191:61534":{"id":"2:13191:61534","crate_id":2,"name":"trim_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes and suffixes that match a\npattern repeatedly removed.\n\nThe [pattern] can be a [`char`], a slice of [`char`]s, or a function\nor closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_matches('1'), \"foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_matches(char::is_numeric), \"foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_matches(x), \"foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1foo1barXX\".trim_matches(|c| c == '1' || c == 'X'), \"foo1bar\");\n```","links":{"prim@char":"1:15669:2933","self::pattern":"2:12731:5028"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:12741:5029","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:12741:5029","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}}}},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"DoubleEndedSearcher","id":"2:12761:5032","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"24:2126:6302":{"id":"24:2126:6302","crate_id":24,"name":"IdentExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["24:2127:63123","24:2128:63124","24:2129:1820"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sealed","id":"24:2144:4584","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:3420:2138":{"id":"2:3420:2138","crate_id":2,"name":"Drop","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3421:549"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"5:5785:2240":{"id":"5:5785:2240","crate_id":5,"name":"to_ascii_uppercase","span":null,"visibility":"public","docs":"Returns a copy of this string where each character is mapped to its\nASCII upper case equivalent.\n\nASCII letters 'a' to 'z' are mapped to 'A' to 'Z',\nbut non-ASCII letters are unchanged.\n\nTo uppercase the value in-place, use [`make_ascii_uppercase`].\n\nTo uppercase ASCII characters in addition to non-ASCII characters, use\n[`to_uppercase`].\n\n# Examples\n\n```\nlet s = \"Grüße, Jürgen ❤\";\n\nassert_eq!(\"GRüßE, JüRGEN ❤\", s.to_ascii_uppercase());\n```\n\n[`make_ascii_uppercase`]: str::make_ascii_uppercase\n[`to_uppercase`]: #method.to_uppercase","links":{"str::make_ascii_uppercase":"1:15674:2938"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use = \"to uppercase the value in-place, use `make_ascii_uppercase()`\"]","#[stable(feature = \"ascii_methods_on_intrinsics\", since = \"1.23.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:8069:196","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13156:61523":{"id":"2:13156:61523","crate_id":2,"name":"rsplit_terminator","span":null,"visibility":"public","docs":"An iterator over substrings of `self`, separated by characters\nmatched by a pattern and yielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\nEquivalent to [`split`], except that the trailing substring is\nskipped if empty.\n\n[`split`]: str::split\n\nThis method can be used for string data that is _terminated_,\nrather than _separated_ by a pattern.\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a\nreverse search, and it will be double ended if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`split_terminator`] method can be\nused.\n\n[`split_terminator`]: str::split_terminator\n\n# Examples\n\n```\nlet v: Vec<&str> = \"A.B.\".rsplit_terminator('.').collect();\nassert_eq!(v, [\"B\", \"A\"]);\n\nlet v: Vec<&str> = \"A..B..\".rsplit_terminator(\".\").collect();\nassert_eq!(v, [\"\", \"B\", \"\", \"A\"]);\n\nlet v: Vec<&str> = \"A.B:C.D\".rsplit_terminator(&['.', ':'][..]).collect();\nassert_eq!(v, [\"D\", \"C\", \"B\", \"A\"]);\n```","links":{"str::split_terminator":"1:15674:2938","str::split":"1:15674:2938","self::pattern":"2:12731:5028","prim@char":"1:15669:2933"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"RSplitTerminator","id":"2:49081:5330","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:12741:5029","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:12741:5029","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}}}},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"ReverseSearcher","id":"2:12756:5027","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13117:56764":{"id":"2:13117:56764","crate_id":2,"name":"split_at","span":null,"visibility":"public","docs":"Divide one string slice into two at an index.\n\nThe argument, `mid`, should be a byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get mutable string slices instead, see the [`split_at_mut`]\nmethod.\n\n[`split_at_mut`]: str::split_at_mut\n\n# Panics\n\nPanics if `mid` is not on a UTF-8 code point boundary, or if it is\npast the end of the last code point of the string slice.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"Per Martin-Löf\";\n\nlet (first, last) = s.split_at(3);\n\nassert_eq!(\"Per\", first);\nassert_eq!(\" Martin-Löf\", last);\n```","links":{"str::split_at_mut":"1:15674:2938"},"attrs":["#[must_use]","#[stable(feature = \"str_split_at\", since = \"1.4.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["mid",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"tuple","inner":[{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:2865:159":{"id":"2:2865:159","crate_id":2,"name":"Ord","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:2866:388","2:2867:4002","2:2868:3999","2:2869:4007"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Eq","id":"2:2834:116","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"PartialOrd","id":"2:2875:166","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"Self"}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:3552:3216":{"id":"2:3552:3216","crate_id":2,"name":"RangeBounds","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3554:60455","2:3555:60456","2:3556:1840"],"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"2:3182:3308","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"bounds":[],"implementations":[]}},"2:13165:61524":{"id":"2:13165:61524","crate_id":2,"name":"split_once","span":null,"visibility":"public","docs":"Splits the string on the first occurrence of the specified delimiter and\nreturns prefix before delimiter and suffix after delimiter.\n\n# Examples\n\n```\nassert_eq!(\"cfg\".split_once('='), None);\nassert_eq!(\"cfg=foo\".split_once('='), Some((\"cfg\", \"foo\")));\nassert_eq!(\"cfg=foo=bar\".split_once('='), Some((\"cfg\", \"foo=bar\")));\n```","links":{},"attrs":["#[stable(feature = \"str_split_once\", since = \"1.52.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["delimiter",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:47055:158","args":{"angle_bracketed":{"args":[{"type":{"kind":"tuple","inner":[{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}},{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}}]}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:12741:5029","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"5:5763:62172":{"id":"5:5763:62172","crate_id":5,"name":"into_boxed_bytes","span":null,"visibility":"public","docs":"Converts a `Box<str>` into a `Box<[u8]>` without copying or allocating.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"this is a string\";\nlet boxed_str = s.to_owned().into_boxed_str();\nlet boxed_bytes = boxed_str.into_boxed_bytes();\nassert_eq!(*boxed_bytes, *s.as_bytes());\n```","links":{},"attrs":["#[stable(feature = \"str_box_extras\", since = \"1.20.0\")]","#[must_use = \"`self` will be dropped if the result is not used\"]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"resolved_path","inner":{"name":"Box","id":"5:421:1756","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}},{"type":{"kind":"resolved_path","inner":{"name":"Global","id":"5:7774:4382","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}],"bindings":[]}},"param_names":[]}}]],"output":{"kind":"resolved_path","inner":{"name":"Box","id":"5:421:1756","args":{"angle_bracketed":{"args":[{"type":{"kind":"slice","inner":{"kind":"primitive","inner":"u8"}}},{"type":{"kind":"resolved_path","inner":{"name":"Global","id":"5:7774:4382","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:6353:4683":{"id":"1:6353:4683","crate_id":1,"name":"ExitStatusExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:6354:58737","1:6355:8679","1:6356:58738","1:6357:58739","1:6358:58740","1:6359:58741"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sealed","id":"1:10368:4584","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"21:671:3303":{"id":"21:671:3303","crate_id":21,"name":"MultiSpan","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["21:672:62926"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"24:3073:3247":{"id":"24:3073:3247","crate_id":24,"name":"Parser","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["24:3074:163","24:3075:2113","24:3076:1778","24:3077:2114"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:3077:72":{"id":"2:3077:72","crate_id":2,"name":"AsMut","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3079:2133"],"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"2:3182:3308","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"bounds":[],"implementations":[]}},"2:22692:17219":{"id":"2:22692:17219","crate_id":2,"name":"ToBitMask","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":true,"items":["2:22693:7761","2:22694:60801","2:22695:60802"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sealed","id":"2:22685:4584","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:3288:5000":{"id":"2:3288:5000","crate_id":2,"name":"DivAssign","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3290:530"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:12741:5029":{"id":"2:12741:5029","crate_id":2,"name":"Pattern","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:12743:5031","2:12744:61188","2:12745:61189","2:12746:61190","2:12747:61192","2:12748:61191","2:12749:61193"],"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:13106:56745":{"id":"2:13106:56745","crate_id":2,"name":"as_mut_ptr","span":null,"visibility":"public","docs":"Converts a mutable string slice to a raw pointer.\n\nAs string slices are a slice of bytes, the raw pointer points to a\n[`u8`]. This pointer will be pointing to the first byte of the string\nslice.\n\nIt is your responsibility to make sure that the string slice only gets\nmodified in a way that it remains valid UTF-8.","links":{"`u8`":"1:15683:2947"},"attrs":["#[stable(feature = \"str_as_mut_ptr\", since = \"1.36.0\")]","#[must_use]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"raw_pointer","inner":{"mutable":true,"type":{"kind":"primitive","inner":"u8"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:3083:127":{"id":"2:3083:127","crate_id":2,"name":"From","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3085:651"],"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:3187:100":{"id":"2:3187:100","crate_id":2,"name":"Copy","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Clone","id":"2:2799:98","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:13214:4363":{"id":"2:13214:4363","crate_id":2,"name":"is_ascii","span":null,"visibility":"public","docs":"Checks if all characters in this string are within the ASCII range.\n\n# Examples\n\n```\nlet ascii = \"hello!\\n\";\nlet non_ascii = \"Grüße, Jürgen ❤\";\n\nassert!(ascii.is_ascii());\nassert!(!non_ascii.is_ascii());\n```","links":{},"attrs":["#[stable(feature = \"ascii_methods_on_intrinsics\", since = \"1.23.0\")]","#[must_use]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:5623:4567":{"id":"1:5623:4567","crate_id":1,"name":"PermissionsExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:5624:6829","1:5625:59370","1:5626:59371"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:10033:171":{"id":"2:10033:171","crate_id":2,"name":"Pointer","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:10034:630"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:13216:4365":{"id":"2:13216:4365","crate_id":2,"name":"make_ascii_uppercase","span":null,"visibility":"public","docs":"Converts this string to its ASCII upper case equivalent in-place.\n\nASCII letters 'a' to 'z' are mapped to 'A' to 'Z',\nbut non-ASCII letters are unchanged.\n\nTo return a new uppercased value without modifying the existing one, use\n[`to_ascii_uppercase()`].\n\n[`to_ascii_uppercase()`]: #method.to_ascii_uppercase\n\n# Examples\n\n```\nlet mut s = String::from(\"Grüße, Jürgen ❤\");\n\ns.make_ascii_uppercase();\n\nassert_eq!(\"GRüßE, JüRGEN ❤\", s);\n```","links":{},"attrs":["#[stable(feature = \"ascii_methods_on_intrinsics\", since = \"1.23.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13843:133":{"id":"2:13843:133","crate_id":2,"name":"GlobalAlloc","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":true,"items":["2:13844:253","2:13845:491","2:13846:256","2:13847:1048"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:3292:5002":{"id":"2:3292:5002","crate_id":2,"name":"RemAssign","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3294:1072"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:22543:4599":{"id":"2:22543:4599","crate_id":2,"name":"SupportedLaneCount","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sealed","id":"2:22533:4584","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:13103:2673":{"id":"2:13103:2673","crate_id":2,"name":"as_bytes","span":null,"visibility":"public","docs":"Converts a string slice to a byte slice. To convert the byte slice back\ninto a string slice, use the [`from_utf8`] function.\n\n# Examples\n\nBasic usage:\n\n```\nlet bytes = \"bors\".as_bytes();\nassert_eq!(b\"bors\", bytes);\n```","links":{"`from_utf8`":"2:12202:5454"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]","#[rustc_const_stable(feature = \"str_as_bytes\", since = \"1.39.0\")]","#[must_use]","#[allow(unused_attributes)]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"slice","inner":{"kind":"primitive","inner":"u8"}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"5:6090:202":{"id":"5:6090:202","crate_id":5,"name":"ToString","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["5:6091:1821"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:3080:141":{"id":"2:3080:141","crate_id":2,"name":"Into","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3082:1583"],"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:3621:5412":{"id":"2:3621:5412","crate_id":2,"name":"OneSidedRange","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":[],"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"2:3182:3308","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"RangeBounds","id":"2:3552:3216","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"1:6755:4560":{"id":"1:6755:4560","crate_id":1,"name":"FromRawFd","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:6756:58713"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:3272:4994":{"id":"2:3272:4994","crate_id":2,"name":"Neg","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3273:163","2:3274:881"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:3335:4976":{"id":"2:3335:4976","crate_id":2,"name":"BitOrAssign","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3337:328"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:2774:92":{"id":"2:2774:92","crate_id":2,"name":"Borrow","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:2776:1776"],"generics":{"params":[{"name":"Borrowed","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"Borrowed"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"2:3182:3308","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"bounds":[],"implementations":[]}},"2:3423:122":{"id":"2:3423:122","crate_id":2,"name":"Fn","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3425:350"],"generics":{"params":[{"name":"Args","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"FnMut","id":"2:3426:123","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"Args"}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:13097:61516":{"id":"2:13097:61516","crate_id":2,"name":"is_char_boundary","span":null,"visibility":"public","docs":"Checks that `index`-th byte is the first byte in a UTF-8 code point\nsequence or the end of the string.\n\nThe start and end of the string (when `index == self.len()`) are\nconsidered to be boundaries.\n\nReturns `false` if `index` is greater than `self.len()`.\n\n# Examples\n\n```\nlet s = \"Löwe 老虎 Léopard\";\nassert!(s.is_char_boundary(0));\n// start of `老`\nassert!(s.is_char_boundary(6));\nassert!(s.is_char_boundary(s.len()));\n\n// second byte of `ö`\nassert!(!s.is_char_boundary(2));\n\n// third byte of `老`\nassert!(!s.is_char_boundary(8));\n```","links":{},"attrs":["#[must_use]","#[stable(feature = \"is_char_boundary\", since = \"1.9.0\")]","#[rustc_const_unstable(feature = \"const_is_char_boundary\", issue = \"none\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["index",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13189:61532":{"id":"2:13189:61532","crate_id":2,"name":"trim_left","span":null,"visibility":"public","docs":"Returns a string slice with leading whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`.\n\n# Text directionality\n\nA string is a sequence of bytes. 'Left' in this context means the first\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _right_ side, not the left.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \" Hello\\tworld\\t\";\n\nassert_eq!(\"Hello\\tworld\\t\", s.trim_left());\n```\n\nDirectionality:\n\n```\nlet s = \"  English\";\nassert!(Some('E') == s.trim_left().chars().next());\n\nlet s = \"  עברית\";\nassert!(Some('ע') == s.trim_left().chars().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[stable(feature = \"rust1\", since = \"1.0.0\")]","#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_start`\", suggestion\n= \"trim_start\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_start`"},"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13113:56744":{"id":"2:13113:56744","crate_id":2,"name":"get_unchecked_mut","span":null,"visibility":"public","docs":"Returns a mutable, unchecked subslice of `str`.\n\nThis is the unchecked alternative to indexing the `str`.\n\n# Safety\n\nCallers of this function are responsible that these preconditions are\nsatisfied:\n\n* The starting index must not exceed the ending index;\n* Indexes must be within bounds of the original slice;\n* Indexes must lie on UTF-8 sequence boundaries.\n\nFailing that, the returned string slice may reference invalid memory or\nviolate the invariants communicated by the `str` type.\n\n# Examples\n\n```\nlet mut v = String::from(\"🗻∈🌏\");\nunsafe {\n    assert_eq!(\"🗻\", v.get_unchecked_mut(0..4));\n    assert_eq!(\"∈\", v.get_unchecked_mut(4..7));\n    assert_eq!(\"🌏\", v.get_unchecked_mut(7..11));\n}\n```","links":{},"attrs":["#[stable(feature = \"str_checked_slicing\", since = \"1.20.0\")]","#[rustc_const_unstable(feature = \"const_slice_index\", issue = \"none\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["i",{"kind":"generic","inner":"I"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"qualified_path","inner":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"I"},"trait":{"kind":"resolved_path","inner":{"name":"SliceIndex","id":"2:10632:194","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}},"param_names":[]}}}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"I"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"SliceIndex","id":"2:10632:194","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}},"1:5685:4572":{"id":"1:5685:4572","crate_id":1,"name":"DirEntryExt2","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:5686:59611"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sealed","id":"1:10368:4584","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:13200:56783":{"id":"2:13200:56783","crate_id":2,"name":"strip_suffix","span":null,"visibility":"public","docs":"Returns a string slice with the suffix removed.\n\nIf the string ends with the pattern `suffix`, returns the substring before the suffix,\nwrapped in `Some`.  Unlike `trim_end_matches`, this method removes the suffix exactly once.\n\nIf the string does not end with `suffix`, returns `None`.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nassert_eq!(\"bar:foo\".strip_suffix(\":foo\"), Some(\"bar\"));\nassert_eq!(\"bar:foo\".strip_suffix(\"bar\"), None);\nassert_eq!(\"foofoo\".strip_suffix(\"foo\"), Some(\"foo\"));\n```","links":{"self::pattern":"2:12731:5028","prim@char":"1:15669:2933"},"attrs":["#[must_use =\n\"this returns the remaining substring as a new slice, \\\n                  without modifying the original\"]","#[stable(feature = \"str_strip\", since = \"1.45.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["suffix",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:47055:158","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:12741:5029","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:12741:5029","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}}}},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"ReverseSearcher","id":"2:12756:5027","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:8580:4470":{"id":"2:8580:4470","crate_id":2,"name":"TrustedLen","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":true,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Iterator","id":"2:8302:149","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"1:5671:4570":{"id":"1:5671:4570","crate_id":1,"name":"FileTypeExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:5672:59212","1:5673:59213","1:5674:59214","1:5675:59215"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:3633:203":{"id":"2:3633:203","crate_id":2,"name":"Try","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3634:163","2:3635:5069","2:3636:656","2:3637:343"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"FromResidual","id":"2:3638:129","args":{"angle_bracketed":{"args":[{"type":{"kind":"qualified_path","inner":{"name":"Residual","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"Self"},"trait":{"kind":"resolved_path","inner":{"name":"Try","id":"2:3633:203","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:13111:56743":{"id":"2:13111:56743","crate_id":2,"name":"get_unchecked","span":null,"visibility":"public","docs":"Returns an unchecked subslice of `str`.\n\nThis is the unchecked alternative to indexing the `str`.\n\n# Safety\n\nCallers of this function are responsible that these preconditions are\nsatisfied:\n\n* The starting index must not exceed the ending index;\n* Indexes must be within bounds of the original slice;\n* Indexes must lie on UTF-8 sequence boundaries.\n\nFailing that, the returned string slice may reference invalid memory or\nviolate the invariants communicated by the `str` type.\n\n# Examples\n\n```\nlet v = \"🗻∈🌏\";\nunsafe {\n    assert_eq!(\"🗻\", v.get_unchecked(0..4));\n    assert_eq!(\"∈\", v.get_unchecked(4..7));\n    assert_eq!(\"🌏\", v.get_unchecked(7..11));\n}\n```","links":{},"attrs":["#[stable(feature = \"str_checked_slicing\", since = \"1.20.0\")]","#[rustc_const_unstable(feature = \"const_slice_index\", issue = \"none\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["i",{"kind":"generic","inner":"I"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"qualified_path","inner":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"I"},"trait":{"kind":"resolved_path","inner":{"name":"SliceIndex","id":"2:10632:194","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}},"param_names":[]}}}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"I"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"SliceIndex","id":"2:10632:194","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}},"1:4584:3282":{"id":"1:4584:3282","crate_id":1,"name":"Write","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:4585:2553","1:4586:58214","1:4588:58215","1:4589:5708","1:4590:58216","1:4591:58217","1:4592:58218","1:4601:4029"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:0:1590":{"id":"0:0:1590","crate_id":0,"name":"serde_derive","span":{"filename":"src/lib.rs","begin":[1,0],"end":[108,1]},"visibility":"public","docs":"This crate provides Serde's two derive macros.\n\n```edition2018\n# use serde_derive::{Serialize, Deserialize};\n#\n#[derive(Serialize, Deserialize)]\n# struct S;\n#\n# fn main() {}\n```\n\nPlease refer to [https://serde.rs/derive.html] for how to set this up.\n\n[https://serde.rs/derive.html]: https://serde.rs/derive.html","links":{},"attrs":["#![doc(html_root_url = \"https://docs.rs/serde_derive/1.0.137\")]","#![allow(unknown_lints, bare_trait_objects)]","#![allow(clippy :: branches_sharing_code, clippy :: cognitive_complexity,\nclippy :: collapsible_match, clippy :: enum_variant_names, clippy ::\nmanual_map, clippy :: match_like_matches_macro, clippy ::\nneedless_pass_by_value, clippy :: too_many_arguments, clippy ::\ntrivially_copy_pass_by_ref, clippy :: used_underscore_binding, clippy ::\nwildcard_in_or_patterns, clippy :: unnested_or_patterns,)]","#![allow(clippy :: cast_possible_truncation, clippy :: checked_conversions,\nclippy :: doc_markdown, clippy :: enum_glob_use, clippy :: indexing_slicing,\nclippy :: items_after_statements, clippy :: let_underscore_drop, clippy ::\nmanual_assert, clippy :: map_err_ignore, clippy :: match_same_arms, clippy ::\nmatch_wildcard_for_single_variants, clippy :: module_name_repetitions, clippy\n:: must_use_candidate, clippy :: option_if_let_else, clippy :: similar_names,\nclippy :: single_match_else, clippy :: struct_excessive_bools, clippy ::\ntoo_many_lines, clippy :: unseparated_literal_suffix, clippy :: unused_self,\nclippy :: use_self, clippy :: wildcard_imports)]"],"deprecation":null,"kind":"module","inner":{"is_crate":true,"items":["0:1257:1575","0:1258:1584"]}},"2:3177:192":{"id":"2:3177:192","crate_id":2,"name":"Send","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":true,"is_unsafe":true,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:12750:5031":{"id":"2:12750:5031","crate_id":2,"name":"Searcher","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":true,"items":["2:12752:5050","2:12753:890","2:12754:61340","2:12755:61341"],"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:7669:4810":{"id":"1:7669:4810","crate_id":1,"name":"Termination","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:7670:58691"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:3266:3395":{"id":"2:3266:3395","crate_id":2,"name":"Rem","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3268:163","2:3269:1071"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:2799:98":{"id":"2:2799:98","crate_id":2,"name":"Clone","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:2800:382","2:2801:384"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:13150:56775":{"id":"2:13150:56775","crate_id":2,"name":"rsplit","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by\ncharacters matched by a pattern and yielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`split`] method can be used.\n\n[`split`]: str::split\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".rsplit(' ').collect();\nassert_eq!(v, [\"lamb\", \"little\", \"a\", \"had\", \"Mary\"]);\n\nlet v: Vec<&str> = \"\".rsplit('X').collect();\nassert_eq!(v, [\"\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".rsplit('X').collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"\", \"lion\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".rsplit(\"::\").collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"lion\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".rsplit(|c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"ghi\", \"def\", \"abc\"]);\n```","links":{"`DoubleEndedIterator`":"2:8151:112","self::pattern":"2:12731:5028","prim@char":"1:15669:2933","str::split":"1:15674:2938"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"RSplit","id":"2:49031:5300","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:12741:5029","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:12741:5029","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}}}},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"ReverseSearcher","id":"2:12756:5027","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:3186:197":{"id":"2:3186:197","crate_id":2,"name":"StructuralEq","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:13116:61520":{"id":"2:13116:61520","crate_id":2,"name":"slice_mut_unchecked","span":null,"visibility":"public","docs":"Creates a string slice from another string slice, bypassing safety\nchecks.\nThis is generally not recommended, use with caution! For a safe\nalternative see [`str`] and [`IndexMut`].\n\n[`IndexMut`]: crate::ops::IndexMut\n\nThis new slice goes from `begin` to `end`, including `begin` but\nexcluding `end`.\n\nTo get an immutable string slice instead, see the\n[`slice_unchecked`] method.\n\n[`slice_unchecked`]: str::slice_unchecked\n\n# Safety\n\nCallers of this function are responsible that three preconditions are\nsatisfied:\n\n* `begin` must not exceed `end`.\n* `begin` and `end` must be byte positions within the string slice.\n* `begin` and `end` must lie on UTF-8 sequence boundaries.","links":{"`str`":"1:15674:2938","crate::ops::IndexMut":"2:3485:3205","str::slice_unchecked":"1:15674:2938"},"attrs":["#[stable(feature = \"str_slice_mut\", since = \"1.5.0\")]","#[deprecated(since = \"1.29.0\", note =\n\"use `get_unchecked_mut(begin..end)` instead\")]"],"deprecation":{"since":"1.29.0","note":"use `get_unchecked_mut(begin..end)` instead"},"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["begin",{"kind":"primitive","inner":"usize"}],["end",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}},"2:8577:4372":{"id":"2:8577:4372","crate_id":2,"name":"FusedIterator","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Iterator","id":"2:8302:149","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"24:2848:3256":{"id":"24:2848:3256","crate_id":24,"name":"Peek","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sealed","id":"24:2730:4584","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:10035:3283":{"id":"2:10035:3283","crate_id":2,"name":"LowerExp","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:10036:630"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:13220:3292":{"id":"2:13220:3292","crate_id":2,"name":"escape_default","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_default`].\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"❤\\n!\".escape_default() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"❤\\n!\".escape_default());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"\\\\u{{2764}}\\\\n!\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"❤\\n!\".escape_default().to_string(), \"\\\\u{2764}\\\\n!\");\n```","links":{"`char::escape_default`":"1:15669:2933"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]","#[stable(feature = \"str_escape\", since = \"1.34.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"EscapeDefault","id":"2:49321:3293","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:3260:3374":{"id":"2:3260:3374","crate_id":2,"name":"Div","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3262:163","2:3263:529"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:10037:3284":{"id":"2:10037:3284","crate_id":2,"name":"UpperExp","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:10038:630"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:22737:5152":{"id":"2:22737:5152","crate_id":2,"name":"MaskElement","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":true,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"SimdElement","id":"2:23386:5123","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sealed","id":"2:22728:4584","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:13168:61525":{"id":"2:13168:61525","crate_id":2,"name":"rsplit_once","span":null,"visibility":"public","docs":"Splits the string on the last occurrence of the specified delimiter and\nreturns prefix before delimiter and suffix after delimiter.\n\n# Examples\n\n```\nassert_eq!(\"cfg\".rsplit_once('='), None);\nassert_eq!(\"cfg=foo\".rsplit_once('='), Some((\"cfg\", \"foo\")));\nassert_eq!(\"cfg=foo=bar\".rsplit_once('='), Some((\"cfg=foo\", \"bar\")));\n```","links":{},"attrs":["#[stable(feature = \"str_split_once\", since = \"1.52.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["delimiter",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:47055:158","args":{"angle_bracketed":{"args":[{"type":{"kind":"tuple","inner":[{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}},{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}}]}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:12741:5029","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:12741:5029","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}}}},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"ReverseSearcher","id":"2:12756:5027","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"5:5786:2239":{"id":"5:5786:2239","crate_id":5,"name":"to_ascii_lowercase","span":null,"visibility":"public","docs":"Returns a copy of this string where each character is mapped to its\nASCII lower case equivalent.\n\nASCII letters 'A' to 'Z' are mapped to 'a' to 'z',\nbut non-ASCII letters are unchanged.\n\nTo lowercase the value in-place, use [`make_ascii_lowercase`].\n\nTo lowercase ASCII characters in addition to non-ASCII characters, use\n[`to_lowercase`].\n\n# Examples\n\n```\nlet s = \"Grüße, Jürgen ❤\";\n\nassert_eq!(\"grüße, jürgen ❤\", s.to_ascii_lowercase());\n```\n\n[`make_ascii_lowercase`]: str::make_ascii_lowercase\n[`to_lowercase`]: #method.to_lowercase","links":{"str::make_ascii_lowercase":"1:15674:2938"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use = \"to lowercase the value in-place, use `make_ascii_lowercase()`\"]","#[stable(feature = \"ascii_methods_on_intrinsics\", since = \"1.23.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:8069:196","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:3012:5026":{"id":"2:3012:5026","crate_id":2,"name":"FloatToInt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":[],"generics":{"params":[{"name":"Int","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sealed","id":"2:3011:4584","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:10632:194":{"id":"2:10632:194","crate_id":2,"name":"SliceIndex","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":true,"items":["2:10634:163","2:10635:1802","2:10636:56742","2:10637:56743","2:10638:56744","2:10639:721","2:10640:722"],"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"2:3182:3308","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sealed","id":"2:10623:4584","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:13127:1840":{"id":"2:13127:1840","crate_id":2,"name":"contains","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a sub-slice of\nthis string slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nBasic usage:\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.contains(\"nana\"));\nassert!(!bananas.contains(\"apples\"));\n```","links":{"prim@char":"1:15669:2933","self::pattern":"2:12731:5028"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:12741:5029","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:8103:128":{"id":"2:8103:128","crate_id":2,"name":"FromIterator","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:8105:654"],"generics":{"params":[{"name":"A","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:13915:4381":{"id":"2:13915:4381","crate_id":2,"name":"Allocator","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":true,"items":["2:13916:59388","2:13917:59389","2:13918:59390","2:13919:59391","2:13920:59392","2:13921:59393","2:13922:4029"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:10239:138":{"id":"2:10239:138","crate_id":2,"name":"Hasher","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:10240:622","2:10241:2553","2:10242:60008","2:10243:60009","2:10244:60010","2:10245:60011","2:10246:60012","2:10247:60013","2:10248:60014","2:10249:60015","2:10250:60016","2:10251:60017","2:10252:60018","2:10253:60019","2:10254:60020","2:10255:1484"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:13221:61539":{"id":"2:13221:61539","crate_id":2,"name":"escape_unicode","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_unicode`].\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"❤\\n!\".escape_unicode() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"❤\\n!\".escape_unicode());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"\\\\u{{2764}}\\\\u{{a}}\\\\u{{21}}\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"❤\\n!\".escape_unicode().to_string(), \"\\\\u{2764}\\\\u{a}\\\\u{21}\");\n```","links":{"`char::escape_unicode`":"1:15669:2933"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]","#[stable(feature = \"str_escape\", since = \"1.34.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"EscapeUnicode","id":"2:49330:5343","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13212:1778":{"id":"2:13212:1778","crate_id":2,"name":"parse","span":null,"visibility":"public","docs":"Parses this string slice into another type.\n\nBecause `parse` is so general, it can cause problems with type\ninference. As such, `parse` is one of the few times you'll see\nthe syntax affectionately known as the 'turbofish': `::<>`. This\nhelps the inference algorithm understand specifically which type\nyou're trying to parse into.\n\n`parse` can parse into any type that implements the [`FromStr`] trait.\n\n# Errors\n\nWill return [`Err`] if it's not possible to parse this string slice into\nthe desired type.\n\n[`Err`]: FromStr::Err\n\n# Examples\n\nBasic usage\n\n```\nlet four: u32 = \"4\".parse().unwrap();\n\nassert_eq!(4, four);\n```\n\nUsing the 'turbofish' instead of annotating `four`:\n\n```\nlet four = \"4\".parse::<u32>();\n\nassert_eq!(Ok(4), four);\n```\n\nFailing to parse:\n\n```\nlet nope = \"j\".parse::<u32>();\n\nassert!(nope.is_err());\n```","links":{"FromStr::Err":"2:12670:3217","`FromStr`":"2:12670:3217"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Result","id":"2:47182:187","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"F"}},{"type":{"kind":"qualified_path","inner":{"name":"Err","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"F"},"trait":{"kind":"resolved_path","inner":{"name":"FromStr","id":"2:12670:3217","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"F"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"FromStr","id":"2:12670:3217","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:3155:108":{"id":"2:3155:108","crate_id":2,"name":"Default","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3156:59"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:1075:2205":{"id":"1:1075:2205","crate_id":1,"name":"AsciiExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:1076:1951","1:1077:4363","1:1078:2240","1:1079:2239","1:1080:4364","1:1081:4365","1:1082:4366"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:3319:3399":{"id":"2:3319:3399","crate_id":2,"name":"Shl","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3321:163","2:3322:1193"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"5:5762":{"id":"5:5762","crate_id":5,"name":null,"span":null,"visibility":{"restricted":{"parent":"5:5582:1300","path":"::str"}},"docs":"Methods for string slices.","links":{},"attrs":["#[cfg(not(test))]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"kind":"primitive","inner":"str"},"items":["5:5763:62172","5:5764:1940","5:5767:62173","5:5770:62174","5:5782:62175","5:5783:62176","5:5784:4648","5:5785:2240","5:5786:2239"],"negative":false,"synthetic":false,"blanket_impl":null}},"2:12670:3217":{"id":"2:12670:3217","crate_id":2,"name":"FromStr","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:12671:118","2:12672:1915"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:3090:204":{"id":"2:3090:204","crate_id":2,"name":"TryFrom","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3092:119","2:3093:1372"],"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:2875:166":{"id":"2:2875:166","crate_id":2,"name":"PartialOrd","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:2877:966","2:2878:794","2:2879:760","2:2880:683","2:2881:666"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"Rhs"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"2:3182:3308","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"PartialEq","id":"2:2829:165","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"Rhs"}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:3255:4988":{"id":"2:3255:4988","crate_id":2,"name":"Mul","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3257:163","2:3258:860"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"5:5784:4648":{"id":"5:5784:4648","crate_id":5,"name":"repeat","span":null,"visibility":"public","docs":"Creates a new [`String`] by repeating a string `n` times.\n\n# Panics\n\nThis function will panic if the capacity would overflow.\n\n# Examples\n\nBasic usage:\n\n```\nassert_eq!(\"abc\".repeat(4), String::from(\"abcabcabcabc\"));\n```\n\nA panic upon overflow:\n\n```should_panic\n// this will panic at runtime\nlet huge = \"0123456789abcdef\".repeat(usize::MAX);\n```","links":{"`String`":"5:8069:196"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use]","#[stable(feature = \"repeat_str\", since = \"1.16.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["n",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:8069:196","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:3284:4998":{"id":"2:3284:4998","crate_id":2,"name":"MulAssign","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3286:861"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:5543:4601":{"id":"1:5543:4601","crate_id":1,"name":"OsStringExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:5544:58957","1:5545:3700"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sealed","id":"1:10368:4584","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:3280:4699":{"id":"2:3280:4699","crate_id":2,"name":"SubAssign","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3282:1316"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:6757:4564":{"id":"1:6757:4564","crate_id":1,"name":"IntoRawFd","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:6758:59446"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:3348:4983":{"id":"2:3348:4983","crate_id":2,"name":"ShrAssign","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3350:1197"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:3325:3401":{"id":"2:3325:3401","crate_id":2,"name":"Shr","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3327:163","2:3328:1196"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:3189:199":{"id":"2:3189:199","crate_id":2,"name":"Sync","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":true,"is_unsafe":true,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:13126:33162":{"id":"2:13126:33162","crate_id":2,"name":"encode_utf16","span":null,"visibility":"public","docs":"Returns an iterator of `u16` over the string encoded as UTF-16.\n\n# Examples\n\nBasic usage:\n\n```\nlet text = \"Zażółć gęślą jaźń\";\n\nlet utf8_len = text.len();\nlet utf16_len = text.encode_utf16().count();\n\nassert!(utf16_len <= utf8_len);\n```","links":{},"attrs":["#[must_use =\n\"this returns the encoded string as an iterator, \\\n                  without modifying the original\"]","#[stable(feature = \"encode_utf16\", since = \"1.8.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"EncodeUtf16","id":"2:49305:5341","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:10031:3286":{"id":"2:10031:3286","crate_id":2,"name":"UpperHex","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:10032:630"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:13098:61517":{"id":"2:13098:61517","crate_id":2,"name":"floor_char_boundary","span":null,"visibility":"public","docs":"Finds the closest `x` not exceeding `index` where `is_char_boundary(x)` is `true`.\n\nThis method can help you truncate a string so that it's still valid UTF-8, but doesn't\nexceed a given number of bytes. Note that this is done purely at the character level\nand can still visually split graphemes, even though the underlying characters aren't\nsplit. For example, the emoji 🧑‍🔬 (scientist) could be split so that the string only\nincludes 🧑 (person) instead.\n\n# Examples\n\n```\n#![feature(round_char_boundary)]\nlet s = \"❤️🧡💛💚💙💜\";\nassert_eq!(s.len(), 26);\nassert!(!s.is_char_boundary(13));\n\nlet closest = s.floor_char_boundary(13);\nassert_eq!(closest, 10);\nassert_eq!(&s[..closest], \"❤️🧡\");\n```","links":{},"attrs":["#[unstable(feature = \"round_char_boundary\", issue = \"93743\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["index",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"primitive","inner":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13118:56765":{"id":"2:13118:56765","crate_id":2,"name":"split_at_mut","span":null,"visibility":"public","docs":"Divide one mutable string slice into two at an index.\n\nThe argument, `mid`, should be a byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get immutable string slices instead, see the [`split_at`] method.\n\n[`split_at`]: str::split_at\n\n# Panics\n\nPanics if `mid` is not on a UTF-8 code point boundary, or if it is\npast the end of the last code point of the string slice.\n\n# Examples\n\nBasic usage:\n\n```\nlet mut s = \"Per Martin-Löf\".to_string();\n{\n    let (first, last) = s.split_at_mut(3);\n    first.make_ascii_uppercase();\n    assert_eq!(\"PER\", first);\n    assert_eq!(\" Martin-Löf\", last);\n}\nassert_eq!(\"PER Martin-Löf\", s);\n```","links":{"str::split_at":"1:15674:2938"},"attrs":["#[must_use]","#[stable(feature = \"str_split_at\", since = \"1.4.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["mid",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"tuple","inner":[{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"primitive","inner":"str"}}},{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"primitive","inner":"str"}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:9966:3282":{"id":"2:9966:3282","crate_id":2,"name":"Write","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:9967:1484","2:9968:61075","2:9970:58218"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:3182:3308":{"id":"2:3182:3308","crate_id":2,"name":"Sized","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":true,"is_unsafe":false,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:3429:124":{"id":"2:3429:124","crate_id":2,"name":"FnOnce","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3431:163","2:3432:352"],"generics":{"params":[{"name":"Args","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:8116:3311":{"id":"2:8116:3311","crate_id":2,"name":"Extend","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:8118:2086","2:8120:4014","2:8121:4015"],"generics":{"params":[{"name":"A","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:3638:129":{"id":"2:3638:129","crate_id":2,"name":"FromResidual","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3640:657"],"generics":{"params":[{"name":"R","kind":{"type":{"bounds":[],"default":{"kind":"qualified_path","inner":{"name":"Residual","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"Self"},"trait":{"kind":"resolved_path","inner":{"name":"Try","id":"2:3633:203","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:3409:3276":{"id":"2:3409:3276","crate_id":2,"name":"DerefMut","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3410:516"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Deref","id":"2:3396:109","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:13122:33177":{"id":"2:13122:33177","crate_id":2,"name":"split_whitespace","span":null,"visibility":"public","docs":"Splits a string slice by whitespace.\n\nThe iterator returned will return string slices that are sub-slices of\nthe original string slice, separated by any amount of whitespace.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`. If you only want to split on ASCII whitespace\ninstead, use [`split_ascii_whitespace`].\n\n[`split_ascii_whitespace`]: str::split_ascii_whitespace\n\n# Examples\n\nBasic usage:\n\n```\nlet mut iter = \"A few words\".split_whitespace();\n\nassert_eq!(Some(\"A\"), iter.next());\nassert_eq!(Some(\"few\"), iter.next());\nassert_eq!(Some(\"words\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nAll kinds of whitespace are considered:\n\n```\nlet mut iter = \" Mary   had\\ta\\u{2009}little  \\n\\t lamb\".split_whitespace();\nassert_eq!(Some(\"Mary\"), iter.next());\nassert_eq!(Some(\"had\"), iter.next());\nassert_eq!(Some(\"a\"), iter.next());\nassert_eq!(Some(\"little\"), iter.next());\nassert_eq!(Some(\"lamb\"), iter.next());\n\nassert_eq!(None, iter.next());\n```","links":{"str::split_ascii_whitespace":"1:15674:2938"},"attrs":["#[must_use =\n\"this returns the split string as an iterator, \\\n                  without modifying the original\"]","#[stable(feature = \"split_whitespace\", since = \"1.1.0\")]","#[rustc_diagnostic_item = \"str_split_whitespace\"]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"SplitWhitespace","id":"2:49287:5339","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13100:61518":{"id":"2:13100:61518","crate_id":2,"name":"ceil_char_boundary","span":null,"visibility":"public","docs":"Finds the closest `x` not below `index` where `is_char_boundary(x)` is `true`.\n\nThis method is the natural complement to [`floor_char_boundary`]. See that method\nfor more details.\n\n[`floor_char_boundary`]: str::floor_char_boundary\n\n# Panics\n\nPanics if `index > self.len()`.\n\n# Examples\n\n```\n#![feature(round_char_boundary)]\nlet s = \"❤️🧡💛💚💙💜\";\nassert_eq!(s.len(), 26);\nassert!(!s.is_char_boundary(13));\n\nlet closest = s.ceil_char_boundary(13);\nassert_eq!(closest, 14);\nassert_eq!(&s[..closest], \"❤️🧡💛\");\n```","links":{"str::floor_char_boundary":"1:15674:2938"},"attrs":["#[unstable(feature = \"round_char_boundary\", issue = \"93743\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["index",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"primitive","inner":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:8070:5009":{"id":"2:8070:5009","crate_id":2,"name":"Product","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:8072:4046"],"generics":{"params":[{"name":"A","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:13159:56777":{"id":"2:13159:56777","crate_id":2,"name":"splitn","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by a\npattern, restricted to returning at most `n` items.\n\nIf `n` substrings are returned, the last substring (the `n`th substring)\nwill contain the remainder of the string.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will not be double ended, because it is\nnot efficient to support.\n\nIf the pattern allows a reverse search, the [`rsplitn`] method can be\nused.\n\n[`rsplitn`]: str::rsplitn\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lambda\".splitn(3, ' ').collect();\nassert_eq!(v, [\"Mary\", \"had\", \"a little lambda\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".splitn(3, \"X\").collect();\nassert_eq!(v, [\"lion\", \"\", \"tigerXleopard\"]);\n\nlet v: Vec<&str> = \"abcXdef\".splitn(1, 'X').collect();\nassert_eq!(v, [\"abcXdef\"]);\n\nlet v: Vec<&str> = \"\".splitn(1, 'X').collect();\nassert_eq!(v, [\"\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".splitn(2, |c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"abc\", \"defXghi\"]);\n```","links":{"str::rsplitn":"1:15674:2938","prim@char":"1:15669:2933","self::pattern":"2:12731:5028"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["n",{"kind":"primitive","inner":"usize"}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"SplitN","id":"2:49117:5303","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:12741:5029","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:6681:4689":{"id":"1:6681:4689","crate_id":1,"name":"ChildExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:6682:58454","1:6683:58455"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sealed","id":"1:10368:4584","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:3185:198":{"id":"2:3185:198","crate_id":2,"name":"StructuralPartialEq","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:10029:3285":{"id":"2:10029:3285","crate_id":2,"name":"LowerHex","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:10030:630"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:12178:5493":{"id":"2:12178:5493","crate_id":2,"name":"SlicePattern","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:12179:1757","2:12180:2892"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:13187:61531":{"id":"2:13187:61531","crate_id":2,"name":"trim_end","span":null,"visibility":"public","docs":"Returns a string slice with trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Text directionality\n\nA string is a sequence of bytes. `end` in this context means the last\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be right side, and for right-to-left languages like\nArabic or Hebrew, this will be the left side.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\nassert_eq!(\"\\n Hello\\tworld\", s.trim_end());\n```\n\nDirectionality:\n\n```\nlet s = \"  English  \";\nassert!(Some('h') == s.trim_end().chars().rev().next());\n\nlet s = \"  עברית  \";\nassert!(Some('ת') == s.trim_end().chars().rev().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[stable(feature = \"trim_direction\", since = \"1.30.0\")]","#[rustc_diagnostic_item = \"str_trim_end\"]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:5631:4568":{"id":"1:5631:4568","crate_id":1,"name":"OpenOptionsExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:5632:6829","1:5633:9143"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"5:5783:62176":{"id":"5:5783:62176","crate_id":5,"name":"into_string","span":null,"visibility":"public","docs":"Converts a [`Box<str>`] into a [`String`] without copying or allocating.\n\n# Examples\n\nBasic usage:\n\n```\nlet string = String::from(\"birthday gift\");\nlet boxed_str = string.clone().into_boxed_str();\n\nassert_eq!(boxed_str.into_string(), string);\n```","links":{"`String`":"5:8069:196","`Box<str>`":"5:421:1756"},"attrs":["#[stable(feature = \"box_str\", since = \"1.4.0\")]","#[must_use = \"`self` will be dropped if the result is not used\"]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"resolved_path","inner":{"name":"Box","id":"5:421:1756","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}},{"type":{"kind":"resolved_path","inner":{"name":"Global","id":"5:7774:4382","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}],"bindings":[]}},"param_names":[]}}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:8069:196","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"24:2959:1779":{"id":"24:2959:1779","crate_id":24,"name":"Parse","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["24:2960:1778"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:13162:56779":{"id":"2:13162:56779","crate_id":2,"name":"rsplitn","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by a\npattern, starting from the end of the string, restricted to returning\nat most `n` items.\n\nIf `n` substrings are returned, the last substring (the `n`th substring)\nwill contain the remainder of the string.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will not be double ended, because it is not\nefficient to support.\n\nFor splitting from the front, the [`splitn`] method can be used.\n\n[`splitn`]: str::splitn\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".rsplitn(3, ' ').collect();\nassert_eq!(v, [\"lamb\", \"little\", \"Mary had a\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".rsplitn(3, 'X').collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"lionX\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".rsplitn(2, \"::\").collect();\nassert_eq!(v, [\"leopard\", \"lion::tiger\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".rsplitn(2, |c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"ghi\", \"abc1def\"]);\n```","links":{"self::pattern":"2:12731:5028","prim@char":"1:15669:2933","str::splitn":"1:15674:2938"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["n",{"kind":"primitive","inner":"usize"}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"RSplitN","id":"2:49135:5304","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:12741:5029","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:12741:5029","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}}}},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"ReverseSearcher","id":"2:12756:5027","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:3426:123":{"id":"2:3426:123","crate_id":2,"name":"FnMut","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3428:351"],"generics":{"params":[{"name":"Args","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"FnOnce","id":"2:3429:124","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"Args"}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:13130:56781":{"id":"2:13130:56781","crate_id":2,"name":"starts_with","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a prefix of this\nstring slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nBasic usage:\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.starts_with(\"bana\"));\nassert!(!bananas.starts_with(\"nana\"));\n```","links":{"prim@char":"1:15669:2933","self::pattern":"2:12731:5028"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:12741:5029","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:10023:111":{"id":"2:10023:111","crate_id":2,"name":"Display","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:10024:630"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:13203:61536":{"id":"2:13203:61536","crate_id":2,"name":"trim_end_matches","span":null,"visibility":"public","docs":"Returns a string slice with all suffixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. `end` in this context means the last\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be right side, and for right-to-left languages like\nArabic or Hebrew, this will be the left side.\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_end_matches('1'), \"11foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_end_matches(char::is_numeric), \"123foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_end_matches(x), \"12foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1fooX\".trim_end_matches(|c| c == '1' || c == 'X'), \"1foo\");\n```","links":{"prim@char":"1:15669:2933","self::pattern":"2:12731:5028"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[stable(feature = \"trim_direction\", since = \"1.30.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:12741:5029","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:12741:5029","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}}}},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"ReverseSearcher","id":"2:12756:5027","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13121:4762":{"id":"2:13121:4762","crate_id":2,"name":"bytes","span":null,"visibility":"public","docs":"An iterator over the bytes of a string slice.\n\nAs a string slice consists of a sequence of bytes, we can iterate\nthrough a string slice by byte. This method returns such an iterator.\n\n# Examples\n\nBasic usage:\n\n```\nlet mut bytes = \"bors\".bytes();\n\nassert_eq!(Some(b'b'), bytes.next());\nassert_eq!(Some(b'o'), bytes.next());\nassert_eq!(Some(b'r'), bytes.next());\nassert_eq!(Some(b's'), bytes.next());\n\nassert_eq!(None, bytes.next());\n```","links":{},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Bytes","id":"2:48999:2686","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13444:130":{"id":"2:13444:130","crate_id":2,"name":"Future","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:13445:163","2:13446:982"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:3086:205":{"id":"2:3086:205","crate_id":2,"name":"TryInto","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3088:119","2:3089:1373"],"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"24:2865:6303":{"id":"24:2865:6303","crate_id":24,"name":"Speculative","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["24:2866:62995"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"24:153:1762":{"id":"24:153:1762","crate_id":24,"name":"Token","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sealed","id":"24:160:4584","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:3331:4974":{"id":"2:3331:4974","crate_id":2,"name":"BitAndAssign","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3333:326"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:13177:61527":{"id":"2:13177:61527","crate_id":2,"name":"match_indices","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within this string\nslice as well as the index that the match starts at.\n\nFor matches of `pat` within `self` that overlap, only the indices\ncorresponding to the first match are returned.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rmatch_indices`] method can be used.\n\n[`rmatch_indices`]: str::rmatch_indices\n\n# Examples\n\nBasic usage:\n\n```\nlet v: Vec<_> = \"abcXXXabcYYYabc\".match_indices(\"abc\").collect();\nassert_eq!(v, [(0, \"abc\"), (6, \"abc\"), (12, \"abc\")]);\n\nlet v: Vec<_> = \"1abcabc2\".match_indices(\"abc\").collect();\nassert_eq!(v, [(1, \"abc\"), (4, \"abc\")]);\n\nlet v: Vec<_> = \"ababa\".match_indices(\"aba\").collect();\nassert_eq!(v, [(0, \"aba\")]); // only the first `aba`\n```","links":{"prim@char":"1:15669:2933","str::rmatch_indices":"1:15674:2938","`DoubleEndedIterator`":"2:8151:112","self::pattern":"2:12731:5028"},"attrs":["#[stable(feature = \"str_match_indices\", since = \"1.5.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"MatchIndices","id":"2:49163:5333","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:12741:5029","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13144:56772":{"id":"2:13144:56772","crate_id":2,"name":"split","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by\ncharacters matched by a pattern.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rsplit`] method can be used.\n\n[`rsplit`]: str::rsplit\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".split(' ').collect();\nassert_eq!(v, [\"Mary\", \"had\", \"a\", \"little\", \"lamb\"]);\n\nlet v: Vec<&str> = \"\".split('X').collect();\nassert_eq!(v, [\"\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".split('X').collect();\nassert_eq!(v, [\"lion\", \"\", \"tiger\", \"leopard\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".split(\"::\").collect();\nassert_eq!(v, [\"lion\", \"tiger\", \"leopard\"]);\n\nlet v: Vec<&str> = \"abc1def2ghi\".split(char::is_numeric).collect();\nassert_eq!(v, [\"abc\", \"def\", \"ghi\"]);\n\nlet v: Vec<&str> = \"lionXtigerXleopard\".split(char::is_uppercase).collect();\nassert_eq!(v, [\"lion\", \"tiger\", \"leopard\"]);\n```\n\nIf the pattern is a slice of chars, split on each occurrence of any of the characters:\n\n```\nlet v: Vec<&str> = \"2020-11-03 23:59\".split(&['-', ' ', ':', '@'][..]).collect();\nassert_eq!(v, [\"2020\", \"11\", \"03\", \"23\", \"59\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".split(|c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"abc\", \"def\", \"ghi\"]);\n```\n\nIf a string contains multiple contiguous separators, you will end up\nwith empty strings in the output:\n\n```\nlet x = \"||||a||b|c\".to_string();\nlet d: Vec<_> = x.split('|').collect();\n\nassert_eq!(d, &[\"\", \"\", \"\", \"\", \"a\", \"\", \"b\", \"c\"]);\n```\n\nContiguous separators are separated by the empty string.\n\n```\nlet x = \"(///)\".to_string();\nlet d: Vec<_> = x.split('/').collect();\n\nassert_eq!(d, &[\"(\", \"\", \"\", \")\"]);\n```\n\nSeparators at the start or end of a string are neighbored\nby empty strings.\n\n```\nlet d: Vec<_> = \"010\".split(\"0\").collect();\nassert_eq!(d, &[\"\", \"1\", \"\"]);\n```\n\nWhen the empty string is used as a separator, it separates\nevery character in the string, along with the beginning\nand end of the string.\n\n```\nlet f: Vec<_> = \"rust\".split(\"\").collect();\nassert_eq!(f, &[\"\", \"r\", \"u\", \"s\", \"t\", \"\"]);\n```\n\nContiguous separators can lead to possibly surprising behavior\nwhen whitespace is used as the separator. This code is correct:\n\n```\nlet x = \"    a  b c\".to_string();\nlet d: Vec<_> = x.split(' ').collect();\n\nassert_eq!(d, &[\"\", \"\", \"\", \"\", \"a\", \"\", \"b\", \"c\"]);\n```\n\nIt does _not_ give you:\n\n```,ignore\nassert_eq!(d, &[\"a\", \"b\", \"c\"]);\n```\n\nUse [`split_whitespace`] for this behavior.\n\n[`split_whitespace`]: str::split_whitespace","links":{"str::split_whitespace":"1:15674:2938","prim@char":"1:15669:2933","self::pattern":"2:12731:5028","str::rsplit":"1:15674:2938","`DoubleEndedIterator`":"2:8151:112"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Split","id":"2:49013:4627","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:12741:5029","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:3250:3404":{"id":"2:3250:3404","crate_id":2,"name":"Sub","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3252:163","2:3253:1315"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:12761:5032":{"id":"2:12761:5032","crate_id":2,"name":"DoubleEndedSearcher","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":[],"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"ReverseSearcher","id":"2:12756:5027","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:13217:4366":{"id":"2:13217:4366","crate_id":2,"name":"make_ascii_lowercase","span":null,"visibility":"public","docs":"Converts this string to its ASCII lower case equivalent in-place.\n\nASCII letters 'A' to 'Z' are mapped to 'a' to 'z',\nbut non-ASCII letters are unchanged.\n\nTo return a new lowercased value without modifying the existing one, use\n[`to_ascii_lowercase()`].\n\n[`to_ascii_lowercase()`]: #method.to_ascii_lowercase\n\n# Examples\n\n```\nlet mut s = String::from(\"GRÜßE, JÜRGEN ❤\");\n\ns.make_ascii_lowercase();\n\nassert_eq!(\"grÜße, jÜrgen ❤\", s);\n```","links":{},"attrs":["#[stable(feature = \"ascii_methods_on_intrinsics\", since = \"1.23.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:3396:109":{"id":"2:3396:109","crate_id":2,"name":"Deref","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3397:200","2:3398:514"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:3218:3309":{"id":"2:3218:3309","crate_id":2,"name":"Unpin","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":true,"is_unsafe":false,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:3644:5069":{"id":"2:3644:5069","crate_id":2,"name":"Residual","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3646:56018"],"generics":{"params":[{"name":"O","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:12756:5027":{"id":"2:12756:5027","crate_id":2,"name":"ReverseSearcher","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":true,"items":["2:12758:4008","2:12759:60474","2:12760:60475"],"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Searcher","id":"2:12750:5031","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"20:18:3052":{"id":"20:18:3052","crate_id":20,"name":"TokenStreamExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["20:19:9139","20:21:62883","20:23:62884","20:26:62885"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sealed","id":"20:44:4584","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:8302:149":{"id":"2:8302:149","crate_id":2,"name":"Iterator","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:8303:1757","2:8304:890","2:8305:4016","2:8306:468","2:8308:2072","2:8311:4017","2:8312:4018","2:8313:4019","2:8314:2009","2:8316:2538","2:8318:4020","2:8319:4021","2:8321:809","2:8324:4022","2:8331:2371","2:8333:2366","2:8336:1771","2:8337:2824","2:8338:4023","2:8340:4024","2:8342:4025","2:8345:1268","2:8346:2137","2:8347:4026","2:8351:1758","2:8354:1753","2:8355:4027","2:8356:4028","2:8358:4029","2:8359:1764","2:8361:4030","2:8364:4031","2:8366:4032","2:8376:4033","2:8391:4034","2:8393:4035","2:8397:4036","2:8406:2828","2:8409:4037","2:8411:4038","2:8414:252","2:8421:269","2:8428:2484","2:8435:4039","2:8444:4040","2:8454:983","2:8461:4041","2:8468:4002","2:8469:3999","2:8470:4004","2:8482:4003","2:8489:4001","2:8501:4000","2:8508:4042","2:8509:4043","2:8514:4044","2:8517:2087","2:8520:4045","2:8521:2829","2:8523:4046","2:8525:388","2:8528:4047","2:8531:966","2:8534:4048","2:8537:575","2:8540:4049","2:8543:875","2:8545:794","2:8547:760","2:8549:683","2:8551:666","2:8553:4050","2:8554:4051","2:8562:4052"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:8066:5007":{"id":"2:8066:5007","crate_id":2,"name":"Sum","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:8068:2829"],"generics":{"params":[{"name":"A","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"5:5764:1940":{"id":"5:5764:1940","crate_id":5,"name":"replace","span":null,"visibility":"public","docs":"Replaces all matches of a pattern with another string.\n\n`replace` creates a new [`String`], and copies the data from this string slice into it.\nWhile doing so, it attempts to find matches of a pattern. If it finds any, it\nreplaces them with the replacement string slice.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"this is old\";\n\nassert_eq!(\"this is new\", s.replace(\"old\", \"new\"));\n```\n\nWhen the pattern doesn't match:\n\n```\nlet s = \"this is old\";\nassert_eq!(s, s.replace(\"cookie monster\", \"little lamb\"));\n```","links":{"`String`":"5:8069:196"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the replaced string as a new allocation, \\\n                  without modifying the original\"]","#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["from",{"kind":"generic","inner":"P"}],["to",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:8069:196","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:12741:5029","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13125:61521":{"id":"2:13125:61521","crate_id":2,"name":"lines_any","span":null,"visibility":"public","docs":"An iterator over the lines of a string.","links":{},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]","#[deprecated(since = \"1.4.0\", note = \"use lines() instead now\")]","#[allow(deprecated)]"],"deprecation":{"since":"1.4.0","note":"use lines() instead now"},"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"LinesAny","id":"2:49277:5338","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13119:2249":{"id":"2:13119:2249","crate_id":2,"name":"chars","span":null,"visibility":"public","docs":"Returns an iterator over the [`char`]s of a string slice.\n\nAs a string slice consists of valid UTF-8, we can iterate through a\nstring slice by [`char`]. This method returns such an iterator.\n\nIt's important to remember that [`char`] represents a Unicode Scalar\nValue, and might not match your idea of what a 'character' is. Iteration\nover grapheme clusters may be what you actually want. This functionality\nis not provided by Rust's standard library, check crates.io instead.\n\n# Examples\n\nBasic usage:\n\n```\nlet word = \"goodbye\";\n\nlet count = word.chars().count();\nassert_eq!(7, count);\n\nlet mut chars = word.chars();\n\nassert_eq!(Some('g'), chars.next());\nassert_eq!(Some('o'), chars.next());\nassert_eq!(Some('o'), chars.next());\nassert_eq!(Some('d'), chars.next());\nassert_eq!(Some('b'), chars.next());\nassert_eq!(Some('y'), chars.next());\nassert_eq!(Some('e'), chars.next());\n\nassert_eq!(None, chars.next());\n```\n\nRemember, [`char`]s might not match your intuition about characters:\n\n[`char`]: prim@char\n\n```\nlet y = \"y̆\";\n\nlet mut chars = y.chars();\n\nassert_eq!(Some('y'), chars.next()); // not 'y̆'\nassert_eq!(Some('\\u{0306}'), chars.next());\n\nassert_eq!(None, chars.next());\n```","links":{"prim@char":"1:15669:2933"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Chars","id":"2:48983:5324","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:5693:4574":{"id":"1:5693:4574","crate_id":1,"name":"DirBuilderExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:5694:6829"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:13215:4364":{"id":"2:13215:4364","crate_id":2,"name":"eq_ignore_ascii_case","span":null,"visibility":"public","docs":"Checks that two strings are an ASCII case-insensitive match.\n\nSame as `to_ascii_lowercase(a) == to_ascii_lowercase(b)`,\nbut without allocating and copying temporaries.\n\n# Examples\n\n```\nassert!(\"Ferris\".eq_ignore_ascii_case(\"FERRIS\"));\nassert!(\"Ferrös\".eq_ignore_ascii_case(\"FERRöS\"));\nassert!(!\"Ferrös\".eq_ignore_ascii_case(\"FERRÖS\"));\n```","links":{},"attrs":["#[stable(feature = \"ascii_methods_on_intrinsics\", since = \"1.23.0\")]","#[must_use]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["other",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:4602:4621":{"id":"1:4602:4621","crate_id":1,"name":"Seek","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:4603:58359","1:4604:40628","1:4605:58360","1:4606:58361"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:2834:116":{"id":"2:2834:116","crate_id":2,"name":"Eq","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"PartialEq","id":"2:2829:165","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"Self"}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:13185:61530":{"id":"2:13185:61530","crate_id":2,"name":"trim_start","span":null,"visibility":"public","docs":"Returns a string slice with leading whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Text directionality\n\nA string is a sequence of bytes. `start` in this context means the first\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be left side, and for right-to-left languages like\nArabic or Hebrew, this will be the right side.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\nassert_eq!(\"Hello\\tworld\\t\\n\", s.trim_start());\n```\n\nDirectionality:\n\n```\nlet s = \"  English  \";\nassert!(Some('E') == s.trim_start().chars().next());\n\nlet s = \"  עברית  \";\nassert!(Some('ע') == s.trim_start().chars().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[stable(feature = \"trim_direction\", since = \"1.30.0\")]","#[rustc_diagnostic_item = \"str_trim_start\"]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13459:142":{"id":"2:13459:142","crate_id":2,"name":"IntoFuture","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:13460:163","2:13461:142","2:13462:735"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:13153:61522":{"id":"2:13153:61522","crate_id":2,"name":"split_terminator","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by\ncharacters matched by a pattern.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\nEquivalent to [`split`], except that the trailing substring\nis skipped if empty.\n\n[`split`]: str::split\n\nThis method can be used for string data that is _terminated_,\nrather than _separated_ by a pattern.\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rsplit_terminator`] method can be used.\n\n[`rsplit_terminator`]: str::rsplit_terminator\n\n# Examples\n\nBasic usage:\n\n```\nlet v: Vec<&str> = \"A.B.\".split_terminator('.').collect();\nassert_eq!(v, [\"A\", \"B\"]);\n\nlet v: Vec<&str> = \"A..B..\".split_terminator(\".\").collect();\nassert_eq!(v, [\"A\", \"\", \"B\", \"\"]);\n\nlet v: Vec<&str> = \"A.B:C.D\".split_terminator(&['.', ':'][..]).collect();\nassert_eq!(v, [\"A\", \"B\", \"C\", \"D\"]);\n```","links":{"self::pattern":"2:12731:5028","prim@char":"1:15669:2933","str::split":"1:15674:2938","str::rsplit_terminator":"1:15674:2938","`DoubleEndedIterator`":"2:8151:112"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"SplitTerminator","id":"2:49063:5329","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:12741:5029","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13180:61528":{"id":"2:13180:61528","crate_id":2,"name":"rmatch_indices","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within `self`,\nyielded in reverse order along with the index of the match.\n\nFor matches of `pat` within `self` that overlap, only the indices\ncorresponding to the last match are returned.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`match_indices`] method can be used.\n\n[`match_indices`]: str::match_indices\n\n# Examples\n\nBasic usage:\n\n```\nlet v: Vec<_> = \"abcXXXabcYYYabc\".rmatch_indices(\"abc\").collect();\nassert_eq!(v, [(12, \"abc\"), (6, \"abc\"), (0, \"abc\")]);\n\nlet v: Vec<_> = \"1abcabc2\".rmatch_indices(\"abc\").collect();\nassert_eq!(v, [(4, \"abc\"), (1, \"abc\")]);\n\nlet v: Vec<_> = \"ababa\".rmatch_indices(\"aba\").collect();\nassert_eq!(v, [(2, \"aba\")]); // only the last `aba`\n```","links":{"prim@char":"1:15669:2933","self::pattern":"2:12731:5028","`DoubleEndedIterator`":"2:8151:112","str::match_indices":"1:15674:2938"},"attrs":["#[stable(feature = \"str_match_indices\", since = \"1.5.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"RMatchIndices","id":"2:49181:5334","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:12741:5029","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:12741:5029","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}}}},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"ReverseSearcher","id":"2:12756:5027","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:2565:119":{"id":"1:2565:119","crate_id":1,"name":"Error","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:2566:58795","1:2568:2916","1:2569:59826","1:2570:59827"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Debug","id":"2:10016:103","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Display","id":"2:10023:111","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:23386:5123":{"id":"2:23386:5123","crate_id":2,"name":"SimdElement","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":true,"items":["2:23387:5151"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sealed","id":"2:23382:4584","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Copy","id":"2:3187:100","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:13105:279":{"id":"2:13105:279","crate_id":2,"name":"as_ptr","span":null,"visibility":"public","docs":"Converts a string slice to a raw pointer.\n\nAs string slices are a slice of bytes, the raw pointer points to a\n[`u8`]. This pointer will be pointing to the first byte of the string\nslice.\n\nThe caller must ensure that the returned pointer is never written to.\nIf you need to mutate the contents of the string slice, use [`as_mut_ptr`].\n\n[`as_mut_ptr`]: str::as_mut_ptr\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"Hello\";\nlet ptr = s.as_ptr();\n```","links":{"`u8`":"1:15683:2947","str::as_mut_ptr":"1:15674:2938"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]","#[rustc_const_stable(feature = \"rustc_str_as_ptr\", since = \"1.32.0\")]","#[must_use]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"raw_pointer","inner":{"mutable":false,"type":{"kind":"primitive","inner":"u8"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:8584:5140":{"id":"2:8584:5140","crate_id":2,"name":"TrustedStep","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":true,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Step","id":"2:7631:5141","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:13190:61533":{"id":"2:13190:61533","crate_id":2,"name":"trim_right","span":null,"visibility":"public","docs":"Returns a string slice with trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`.\n\n# Text directionality\n\nA string is a sequence of bytes. 'Right' in this context means the last\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _left_ side, not the right.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \" Hello\\tworld\\t\";\n\nassert_eq!(\" Hello\\tworld\", s.trim_right());\n```\n\nDirectionality:\n\n```\nlet s = \"English  \";\nassert!(Some('h') == s.trim_right().chars().rev().next());\n\nlet s = \"עברית  \";\nassert!(Some('ת') == s.trim_right().chars().rev().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[stable(feature = \"rust1\", since = \"1.0.0\")]","#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_end`\", suggestion =\n\"trim_end\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_end`"},"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:2777:3221":{"id":"2:2777:3221","crate_id":2,"name":"BorrowMut","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:2779:2132"],"generics":{"params":[{"name":"Borrowed","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"Borrowed"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"2:3182:3308","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Borrow","id":"2:2774:92","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"Borrowed"}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:3297:4965":{"id":"2:3297:4965","crate_id":2,"name":"Not","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3298:163","2:3299:921"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:13197:15761":{"id":"2:13197:15761","crate_id":2,"name":"strip_prefix","span":null,"visibility":"public","docs":"Returns a string slice with the prefix removed.\n\nIf the string starts with the pattern `prefix`, returns substring after the prefix, wrapped\nin `Some`.  Unlike `trim_start_matches`, this method removes the prefix exactly once.\n\nIf the string does not start with `prefix`, returns `None`.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nassert_eq!(\"foo:bar\".strip_prefix(\"foo:\"), Some(\"bar\"));\nassert_eq!(\"foo:bar\".strip_prefix(\"bar\"), None);\nassert_eq!(\"foofoo\".strip_prefix(\"foo\"), Some(\"foo\"));\n```","links":{"self::pattern":"2:12731:5028","prim@char":"1:15669:2933"},"attrs":["#[must_use =\n\"this returns the remaining substring as a new slice, \\\n                  without modifying the original\"]","#[stable(feature = \"str_strip\", since = \"1.45.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["prefix",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:47055:158","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:12741:5029","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:6684:4684":{"id":"1:6684:4684","crate_id":1,"name":"CommandExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:6685:58347"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sealed","id":"1:10368:4584","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:13104:61519":{"id":"2:13104:61519","crate_id":2,"name":"as_bytes_mut","span":null,"visibility":"public","docs":"Converts a mutable string slice to a mutable byte slice.\n\n# Safety\n\nThe caller must ensure that the content of the slice is valid UTF-8\nbefore the borrow ends and the underlying `str` is used.\n\nUse of a `str` whose contents are not valid UTF-8 is undefined behavior.\n\n# Examples\n\nBasic usage:\n\n```\nlet mut s = String::from(\"Hello\");\nlet bytes = unsafe { s.as_bytes_mut() };\n\nassert_eq!(b\"Hello\", bytes);\n```\n\nMutability:\n\n```\nlet mut s = String::from(\"🗻∈🌏\");\n\nunsafe {\n    let bytes = s.as_bytes_mut();\n\n    bytes[0] = 0xF0;\n    bytes[1] = 0x9F;\n    bytes[2] = 0x8D;\n    bytes[3] = 0x94;\n}\n\nassert_eq!(\"🍔∈🌏\", s);\n```","links":{},"attrs":["#[stable(feature = \"str_mut_extras\", since = \"1.20.0\")]","#[must_use]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"slice","inner":{"kind":"primitive","inner":"u8"}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}},"5:5514:5500":{"id":"5:5514:5500","crate_id":5,"name":"Concat","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["5:5516:163","5:5517:405"],"generics":{"params":[{"name":"Item","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"Item"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"2:3182:3308","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"bounds":[],"implementations":[]}},"1:6331:4684":{"id":"1:6331:4684","crate_id":1,"name":"CommandExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:6332:4901","1:6333:4902","1:6334:58346","1:6335:59528","1:6337:59532","1:6339:59529","1:6340:59530","1:6342:59531"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sealed","id":"1:10368:4584","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:13183:61529":{"id":"2:13183:61529","crate_id":2,"name":"trim","span":null,"visibility":"public","docs":"Returns a string slice with leading and trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\n\nassert_eq!(\"Hello\\tworld\", s.trim());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a slice, \\\n                  without modifying the original\"]","#[stable(feature = \"rust1\", since = \"1.0.0\")]","#[rustc_diagnostic_item = \"str_trim\"]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13218:61538":{"id":"2:13218:61538","crate_id":2,"name":"escape_debug","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_debug`].\n\nNote: only extended grapheme codepoints that begin the string will be\nescaped.\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"❤\\n!\".escape_debug() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"❤\\n!\".escape_debug());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"❤\\\\n!\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"❤\\n!\".escape_debug().to_string(), \"❤\\\\n!\");\n```","links":{"`char::escape_debug`":"1:15669:2933"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]","#[stable(feature = \"str_escape\", since = \"1.34.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"EscapeDebug","id":"2:49312:5342","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:8107:143":{"id":"2:8107:143","crate_id":2,"name":"IntoIterator","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:8108:1757","2:8109:3195","2:8110:736"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:13120:2243":{"id":"2:13120:2243","crate_id":2,"name":"char_indices","span":null,"visibility":"public","docs":"Returns an iterator over the [`char`]s of a string slice, and their\npositions.\n\nAs a string slice consists of valid UTF-8, we can iterate through a\nstring slice by [`char`]. This method returns an iterator of both\nthese [`char`]s, as well as their byte positions.\n\nThe iterator yields tuples. The position is first, the [`char`] is\nsecond.\n\n# Examples\n\nBasic usage:\n\n```\nlet word = \"goodbye\";\n\nlet count = word.char_indices().count();\nassert_eq!(7, count);\n\nlet mut char_indices = word.char_indices();\n\nassert_eq!(Some((0, 'g')), char_indices.next());\nassert_eq!(Some((1, 'o')), char_indices.next());\nassert_eq!(Some((2, 'o')), char_indices.next());\nassert_eq!(Some((3, 'd')), char_indices.next());\nassert_eq!(Some((4, 'b')), char_indices.next());\nassert_eq!(Some((5, 'y')), char_indices.next());\nassert_eq!(Some((6, 'e')), char_indices.next());\n\nassert_eq!(None, char_indices.next());\n```\n\nRemember, [`char`]s might not match your intuition about characters:\n\n[`char`]: prim@char\n\n```\nlet yes = \"y̆es\";\n\nlet mut char_indices = yes.char_indices();\n\nassert_eq!(Some((0, 'y')), char_indices.next()); // not (0, 'y̆')\nassert_eq!(Some((1, '\\u{0306}')), char_indices.next());\n\n// note the 3 here - the last character took up two bytes\nassert_eq!(Some((3, 'e')), char_indices.next());\nassert_eq!(Some((4, 's')), char_indices.next());\n\nassert_eq!(None, char_indices.next());\n```","links":{"prim@char":"1:15669:2933"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"CharIndices","id":"2:48989:5325","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13094":{"id":"2:13094","crate_id":2,"name":null,"span":null,"visibility":{"restricted":{"parent":"2:12191:1300","path":"::str"}},"docs":null,"links":{},"attrs":["#[cfg(not(test))]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"kind":"primitive","inner":"str"},"items":["2:13095:761","2:13096:2018","2:13097:61516","2:13098:61517","2:13100:61518","2:13103:2673","2:13104:61519","2:13105:279","2:13106:56745","2:13107:1802","2:13109:56742","2:13111:56743","2:13113:56744","2:13115:4757","2:13116:61520","2:13117:56764","2:13118:56765","2:13119:2249","2:13120:2243","2:13121:4762","2:13122:33177","2:13123:33167","2:13124:5785","2:13125:61521","2:13126:33162","2:13127:1840","2:13130:56781","2:13133:56782","2:13136:2484","2:13140:4013","2:13144:56772","2:13147:33034","2:13150:56775","2:13153:61522","2:13156:61523","2:13159:56777","2:13162:56779","2:13165:61524","2:13168:61525","2:13171:3013","2:13174:61526","2:13177:61527","2:13180:61528","2:13183:61529","2:13185:61530","2:13187:61531","2:13189:61532","2:13190:61533","2:13191:61534","2:13194:61535","2:13197:15761","2:13200:56783","2:13203:61536","2:13206:1822","2:13209:61537","2:13212:1778","2:13214:4363","2:13215:4364","2:13216:4365","2:13217:4366","2:13218:61538","2:13220:3292","2:13221:61539"],"negative":false,"synthetic":false,"blanket_impl":null}},"2:9037:3620":{"id":"2:9037:3620","crate_id":2,"name":"RefUnwindSafe","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":true,"is_unsafe":false,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:13123:33167":{"id":"2:13123:33167","crate_id":2,"name":"split_ascii_whitespace","span":null,"visibility":"public","docs":"Splits a string slice by ASCII whitespace.\n\nThe iterator returned will return string slices that are sub-slices of\nthe original string slice, separated by any amount of ASCII whitespace.\n\nTo split by Unicode `Whitespace` instead, use [`split_whitespace`].\n\n[`split_whitespace`]: str::split_whitespace\n\n# Examples\n\nBasic usage:\n\n```\nlet mut iter = \"A few words\".split_ascii_whitespace();\n\nassert_eq!(Some(\"A\"), iter.next());\nassert_eq!(Some(\"few\"), iter.next());\nassert_eq!(Some(\"words\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nAll kinds of ASCII whitespace are considered:\n\n```\nlet mut iter = \" Mary   had\\ta little  \\n\\t lamb\".split_ascii_whitespace();\nassert_eq!(Some(\"Mary\"), iter.next());\nassert_eq!(Some(\"had\"), iter.next());\nassert_eq!(Some(\"a\"), iter.next());\nassert_eq!(Some(\"little\"), iter.next());\nassert_eq!(Some(\"lamb\"), iter.next());\n\nassert_eq!(None, iter.next());\n```","links":{"str::split_whitespace":"1:15674:2938"},"attrs":["#[must_use =\n\"this returns the split string as an iterator, \\\n                  without modifying the original\"]","#[stable(feature = \"split_ascii_whitespace\", since = \"1.34.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"SplitAsciiWhitespace","id":"2:49296:5340","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:3314:4826":{"id":"2:3314:4826","crate_id":2,"name":"BitXor","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3316:163","2:3317:330"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"5:5782:62175":{"id":"5:5782:62175","crate_id":5,"name":"to_uppercase","span":null,"visibility":"public","docs":"Returns the uppercase equivalent of this string slice, as a new [`String`].\n\n'Uppercase' is defined according to the terms of the Unicode Derived Core Property\n`Uppercase`.\n\nSince some characters can expand into multiple characters when changing\nthe case, this function returns a [`String`] instead of modifying the\nparameter in-place.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"hello\";\n\nassert_eq!(\"HELLO\", s.to_uppercase());\n```\n\nScripts without case are not changed:\n\n```\nlet new_year = \"农历新年\";\n\nassert_eq!(new_year, new_year.to_uppercase());\n```\n\nOne character can become multiple:\n```\nlet s = \"tschüß\";\n\nassert_eq!(\"TSCHÜSS\", s.to_uppercase());\n```","links":{"`String`":"5:8069:196"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the uppercase string as a new String, \\\n                  without modifying the original\"]","#[stable(feature = \"unicode_case_mapping\", since = \"1.2.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:8069:196","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:10016:103":{"id":"2:10016:103","crate_id":2,"name":"Debug","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:10017:630"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:3245:3219":{"id":"2:3245:3219","crate_id":2,"name":"Add","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3247:163","2:3248:241"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:4527:4585":{"id":"1:4527:4585","crate_id":1,"name":"Read","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:4528:4409","1:4529:59619","1:4531:59620","1:4532:59621","1:4533:4618","1:4534:59622","1:4535:59509","1:4537:59623","1:4538:4029","1:4539:4762","1:4540:2009","1:4542:2137"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:3343:4980":{"id":"2:3343:4980","crate_id":2,"name":"ShlAssign","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3345:1194"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:10229:134":{"id":"2:10229:134","crate_id":2,"name":"Hash","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:10230:685","2:10232:59459"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:3309:3980":{"id":"2:3309:3980","crate_id":2,"name":"BitOr","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3311:163","2:3312:327"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:6845:4581":{"id":"1:6845:4581","crate_id":1,"name":"AsFd","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:6846:58349"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:8151:112":{"id":"2:8151:112","crate_id":2,"name":"DoubleEndedIterator","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:8152:4008","2:8153:4009","2:8154:4010","2:8155:4011","2:8159:4012","2:8162:4013"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Iterator","id":"2:8302:149","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"20:117:1775":{"id":"20:117:1775","crate_id":20,"name":"ToTokens","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["20:118:2413","20:119:2154","20:120:1797"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:13147:33034":{"id":"2:13147:33034","crate_id":2,"name":"split_inclusive","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by\ncharacters matched by a pattern. Differs from the iterator produced by\n`split` in that `split_inclusive` leaves the matched part as the\nterminator of the substring.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\\nlittle lamb\\nlittle lamb.\"\n    .split_inclusive('\\n').collect();\nassert_eq!(v, [\"Mary had a little lamb\\n\", \"little lamb\\n\", \"little lamb.\"]);\n```\n\nIf the last element of the string is matched,\nthat element will be considered the terminator of the preceding substring.\nThat substring will be the last item returned by the iterator.\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\\nlittle lamb\\nlittle lamb.\\n\"\n    .split_inclusive('\\n').collect();\nassert_eq!(v, [\"Mary had a little lamb\\n\", \"little lamb\\n\", \"little lamb.\\n\"]);\n```","links":{"self::pattern":"2:12731:5028","prim@char":"1:15669:2933"},"attrs":["#[stable(feature = \"split_inclusive\", since = \"1.51.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"SplitInclusive","id":"2:12523:5297","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:12741:5029","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13171:3013":{"id":"2:13171:3013","crate_id":2,"name":"matches","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within the given string\nslice.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rmatches`] method can be used.\n\n[`rmatches`]: str::matches\n\n# Examples\n\nBasic usage:\n\n```\nlet v: Vec<&str> = \"abcXXXabcYYYabc\".matches(\"abc\").collect();\nassert_eq!(v, [\"abc\", \"abc\", \"abc\"]);\n\nlet v: Vec<&str> = \"1abc2abc3\".matches(char::is_numeric).collect();\nassert_eq!(v, [\"1\", \"2\", \"3\"]);\n```","links":{"prim@char":"1:15669:2933","self::pattern":"2:12731:5028","`DoubleEndedIterator`":"2:8151:112","str::matches":"1:15674:2938"},"attrs":["#[stable(feature = \"str_matches\", since = \"1.2.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Matches","id":"2:49217:5336","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:12741:5029","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:3276:3220":{"id":"2:3276:3220","crate_id":2,"name":"AddAssign","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3278:242"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:6451:4680":{"id":"1:6451:4680","crate_id":1,"name":"JoinHandleExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:6452:59267","1:6453:59268"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:13133:56782":{"id":"2:13133:56782","crate_id":2,"name":"ends_with","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a suffix of this\nstring slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nBasic usage:\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.ends_with(\"anas\"));\nassert!(!bananas.ends_with(\"nana\"));\n```","links":{"prim@char":"1:15669:2933","self::pattern":"2:12731:5028"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:12741:5029","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:12741:5029","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}}}},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"ReverseSearcher","id":"2:12756:5027","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:3481:2199":{"id":"2:3481:2199","crate_id":2,"name":"Index","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3483:163","2:3484:721"],"generics":{"params":[{"name":"Idx","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"Idx"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"2:3182:3308","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"bounds":[],"implementations":[]}},"1:5681:4571":{"id":"1:5681:4571","crate_id":1,"name":"DirEntryExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:5682:58445"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"5:772:201":{"id":"5:772:201","crate_id":5,"name":"ToOwned","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["5:773:1951","5:774:1824","5:775:4054"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:1257:1575":{"id":"0:1257:1575","crate_id":0,"name":"Serialize","span":{"filename":"src/lib.rs","begin":[90,0],"end":[95,1]},"visibility":"public","docs":null,"links":{},"attrs":["#[proc_macro_derive(Serialize, attributes(serde))]"],"deprecation":null,"kind":"proc_macro","inner":{"kind":"derive","helpers":["serde"]}},"20:63:3053":{"id":"20:63:3053","crate_id":20,"name":"IdentFragment","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["20:64:630","20:65:2022"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:13174:61526":{"id":"2:13174:61526","crate_id":2,"name":"rmatches","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within this string slice,\nyielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`matches`] method can be used.\n\n[`matches`]: str::matches\n\n# Examples\n\nBasic usage:\n\n```\nlet v: Vec<&str> = \"abcXXXabcYYYabc\".rmatches(\"abc\").collect();\nassert_eq!(v, [\"abc\", \"abc\", \"abc\"]);\n\nlet v: Vec<&str> = \"1abc2abc3\".rmatches(char::is_numeric).collect();\nassert_eq!(v, [\"3\", \"2\", \"1\"]);\n```","links":{"self::pattern":"2:12731:5028","prim@char":"1:15669:2933","str::matches":"1:15674:2938","`DoubleEndedIterator`":"2:8151:112"},"attrs":["#[stable(feature = \"str_matches\", since = \"1.2.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"RMatches","id":"2:49235:5337","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:12741:5029","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:12741:5029","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}}}},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"ReverseSearcher","id":"2:12756:5027","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:3716:4373":{"id":"2:3716:4373","crate_id":2,"name":"DispatchFromDyn","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":[],"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:4600:4371":{"id":"2:4600:4371","crate_id":2,"name":"AsyncIterator","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:4601:1757","2:4602:60427","2:4603:4016"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:10027:2192":{"id":"2:10027:2192","crate_id":2,"name":"Binary","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:10028:630"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:3485:3205":{"id":"2:3485:3205","crate_id":2,"name":"IndexMut","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3487:722"],"generics":{"params":[{"name":"Idx","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"Idx"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"2:3182:3308","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Index","id":"2:3481:2199","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"Idx"}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"1:4887:4665":{"id":"1:4887:4665","crate_id":1,"name":"ToSocketAddrs","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:4888:3196","1:4889:59779"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"5:5767:62173":{"id":"5:5767:62173","crate_id":5,"name":"replacen","span":null,"visibility":"public","docs":"Replaces first N matches of a pattern with another string.\n\n`replacen` creates a new [`String`], and copies the data from this string slice into it.\nWhile doing so, it attempts to find matches of a pattern. If it finds any, it\nreplaces them with the replacement string slice at most `count` times.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"foo foo 123 foo\";\nassert_eq!(\"new new 123 foo\", s.replacen(\"foo\", \"new\", 2));\nassert_eq!(\"faa fao 123 foo\", s.replacen('o', \"a\", 3));\nassert_eq!(\"foo foo new23 foo\", s.replacen(char::is_numeric, \"new\", 1));\n```\n\nWhen the pattern doesn't match:\n\n```\nlet s = \"this is old\";\nassert_eq!(s, s.replacen(\"cookie monster\", \"little lamb\", 10));\n```","links":{"`String`":"5:8069:196"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the replaced string as a new allocation, \\\n                  without modifying the original\"]","#[stable(feature = \"str_replacen\", since = \"1.16.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}],["to",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}],["count",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:8069:196","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:12741:5029","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:10274:4721":{"id":"2:10274:4721","crate_id":2,"name":"BuildHasher","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:10275:138","2:10276:34319","2:10277:58760"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}}},"paths":{"24:3871:3349":{"crate_id":24,"path":["syn","token","Mut"],"kind":"struct"},"2:22334:61396":{"crate_id":2,"path":["core","core_simd","swizzle","deinterleave","Even"],"kind":"struct"},"5:3924:4498":{"crate_id":5,"path":["alloc","collections","vec_deque","drain","Drain"],"kind":"struct"},"2:4931:3272":{"crate_id":2,"path":["core","cell","SyncUnsafeCell"],"kind":"struct"},"5:3548:6508":{"crate_id":5,"path":["alloc","collections","linked_list","drop","DropGuard"],"kind":"struct"},"5:3233:4496":{"crate_id":5,"path":["alloc","collections","btree","set","DrainFilter"],"kind":"struct"},"1:4500:4610":{"crate_id":1,"path":["std","io","Guard"],"kind":"struct"},"16:3172:6091":{"crate_id":16,"path":["gimli","common","DebugRngListsBase"],"kind":"struct"},"2:46163:5080":{"crate_id":2,"path":["core","iter","adapters","cloned","Cloned"],"kind":"struct"},"16:5815:5896":{"crate_id":16,"path":["gimli","read","cfi","RegisterRule"],"kind":"enum"},"5:781:102":{"crate_id":5,"path":["alloc","borrow","Cow"],"kind":"enum"},"17:13963:7486":{"crate_id":17,"path":["object","pe","NonPagedDebugInfo"],"kind":"struct"},"1:8863:3613":{"crate_id":1,"path":["std","sync","rwlock","RwLock"],"kind":"struct"},"24:924:62990":{"crate_id":24,"path":["syn","generics","TypeParamsMut"],"kind":"struct"},"2:56984:8925":{"crate_id":2,"path":["core","core_simd","vector","ptr","SimdConstPtr"],"kind":"struct"},"17:9264:6757":{"crate_id":17,"path":["object","endian","LittleEndian"],"kind":"struct"},"21:204:4256":{"crate_id":21,"path":["proc_macro","bridge","closure","Closure"],"kind":"struct"},"16:5346:5834":{"crate_id":16,"path":["gimli","read","addr","DebugAddr"],"kind":"struct"},"5:375:4385":{"crate_id":5,"path":["alloc","boxed","thin","ThinBox"],"kind":"struct"},"6:3957:8130":{"crate_id":6,"path":["libc","unix","linux_like","linux","packet_mreq"],"kind":"struct"},"5:0:253":{"crate_id":5,"path":["alloc"],"kind":"module"},"17:12208:6989":{"crate_id":17,"path":["object","macho","SubClientCommand"],"kind":"struct"},"24:5860:61":{"crate_id":24,"path":["syn","expr","parsing","raw"],"kind":"struct"},"24:5338:2093":{"crate_id":24,"path":["syn","token","Paren"],"kind":"struct"},"17:10827:6187":{"crate_id":17,"path":["object","read","macho","section","MachOSectionInternal"],"kind":"struct"},"21:3420:1773":{"crate_id":21,"path":["proc_macro","Span"],"kind":"struct"},"1:15651:58507":{"crate_id":1,"path":["std","backtrace_rs","print","PrintFmt"],"kind":"enum"},"17:10317:6208":{"crate_id":17,"path":["object","read","elf","section","ElfSection"],"kind":"struct"},"2:11122:5305":{"crate_id":2,"path":["core","slice","iter","SplitNMut"],"kind":"struct"},"5:4998:182":{"crate_id":5,"path":["alloc","rc","Rc"],"kind":"struct"},"2:3189:199":{"crate_id":2,"path":["core","marker","Sync"],"kind":"trait"},"21:68:4532":{"crate_id":21,"path":["proc_macro","bridge","buffer","Buffer"],"kind":"struct"},"6:0:766":{"crate_id":6,"path":["libc"],"kind":"module"},"17:11159:6821":{"crate_id":17,"path":["object","read","SymbolMapName"],"kind":"struct"},"1:11073:9134":{"crate_id":1,"path":["std","net","parser","AddrParseError"],"kind":"struct"},"1:4255:4864":{"crate_id":1,"path":["std","io","stdio","StdinRaw"],"kind":"struct"},"16:4922:7535":{"crate_id":16,"path":["gimli","constants","DwLne"],"kind":"struct"},"1:1152:12095":{"crate_id":1,"path":["std","backtrace","BacktraceSymbol"],"kind":"struct"},"24:2126:6302":{"crate_id":24,"path":["syn","ext","IdentExt"],"kind":"trait"},"24:3493:2092":{"crate_id":24,"path":["syn","token","Const"],"kind":"struct"},"17:9896:62857":{"crate_id":17,"path":["object","read","any","SymbolIteratorInternal"],"kind":"enum"},"24:5737:3085":{"crate_id":24,"path":["syn","expr","ExprClosure"],"kind":"struct"},"17:10938:47739":{"crate_id":17,"path":["object","read","pe","file","PeComdat"],"kind":"struct"},"17:12946:7129":{"crate_id":17,"path":["object","pe","ImageOs2Header"],"kind":"struct"},"2:21:642":{"crate_id":2,"path":["core","format_args"],"kind":"macro"},"1:11794:9135":{"crate_id":1,"path":["std","sync","mpsc","blocking","SignalToken"],"kind":"struct"},"2:10029:3285":{"crate_id":2,"path":["core","fmt","LowerHex"],"kind":"trait"},"1:15163:5765":{"crate_id":1,"path":["std","backtrace_rs","backtrace","Frame"],"kind":"struct"},"24:5702:3077":{"crate_id":24,"path":["syn","expr","ExprAsync"],"kind":"struct"},"1:11989:4829":{"crate_id":1,"path":["std","sync","rwlock","RwLockWriteGuard"],"kind":"struct"},"24:6375:2077":{"crate_id":24,"path":["syn","path","GenericArgument"],"kind":"enum"},"12:976:4710":{"crate_id":12,"path":["hashbrown","map","RawEntryBuilder"],"kind":"struct"},"2:48085:66":{"crate_id":2,"path":["core","fmt","rt","v1","Alignment"],"kind":"enum"},"2:55722:5114":{"crate_id":2,"path":["core","core_simd","fmt","fmt","Wrapper"],"kind":"struct"},"2:48396:9123":{"crate_id":2,"path":["core","hash","sip","Sip13Rounds"],"kind":"struct"},"6:569:7884":{"crate_id":6,"path":["libc","unix","hostent"],"kind":"struct"},"2:48137:70":{"crate_id":2,"path":["core","fmt","ArgumentV1"],"kind":"struct"},"17:9809:62868":{"crate_id":17,"path":["object","read","any","ComdatSectionIteratorInternal"],"kind":"enum"},"2:51320:5158":{"crate_id":2,"path":["core","core_arch","simd","f64x4"],"kind":"struct"},"24:5264:3404":{"crate_id":24,"path":["syn","token","Sub"],"kind":"struct"},"2:50948:8849":{"crate_id":2,"path":["core","core_arch","simd","f64x1"],"kind":"struct"},"1:11904:4741":{"crate_id":1,"path":["std","sync","mpsc","TryRecvError"],"kind":"enum"},"1:8061:6536":{"crate_id":1,"path":["std","sync","mpsc","spsc_queue","Queue"],"kind":"struct"},"2:49305:5341":{"crate_id":2,"path":["core","str","iter","EncodeUtf16"],"kind":"struct"},"24:2961:1780":{"crate_id":24,"path":["syn","parse","ParseStream"],"kind":"typedef"},"2:22336:61392":{"crate_id":2,"path":["core","core_simd","swizzle","deinterleave","Odd"],"kind":"struct"},"2:9037:3620":{"crate_id":2,"path":["core","panic","unwind_safe","RefUnwindSafe"],"kind":"trait"},"17:13497:7345":{"crate_id":17,"path":["object","pe","ImageBoundForwarderRef"],"kind":"struct"},"21:3499:1772":{"crate_id":21,"path":["proc_macro","Spacing"],"kind":"enum"},"2:47654:87":{"crate_id":2,"path":["core","sync","atomic","AtomicUsize"],"kind":"struct"},"2:12412:5328":{"crate_id":2,"path":["core","str","iter","SplitInternal"],"kind":"struct"},"16:7342:5868":{"crate_id":16,"path":["gimli","read","rnglists","RawRange"],"kind":"struct"},"2:49749:5349":{"crate_id":2,"path":["core","str","BytesIsNotEmpty"],"kind":"struct"},"17:11696:6893":{"crate_id":17,"path":["object","elf","ProgramHeader64"],"kind":"struct"},"2:4200:3195":{"crate_id":2,"path":["core","array","iter","IntoIter"],"kind":"struct"},"1:10369:4151":{"crate_id":1,"path":["std","thread","local","AccessError"],"kind":"struct"},"1:11407:4779":{"crate_id":1,"path":["std","path","Ancestors"],"kind":"struct"},"7:38:45423":{"crate_id":7,"path":["unwind","libunwind","_Unwind_Reason_Code"],"kind":"enum"},"6:4470:8330":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_setup"],"kind":"struct"},"16:4230:7516":{"crate_id":16,"path":["gimli","constants","DwAt"],"kind":"struct"},"9:686:5603":{"crate_id":9,"path":["miniz_oxide","deflate","core","SymFreq"],"kind":"struct"},"12:429:5740":{"crate_id":12,"path":["hashbrown","raw","RawDrain"],"kind":"struct"},"2:4888:3270":{"crate_id":2,"path":["core","cell","RefMut"],"kind":"struct"},"2:48904:5315":{"crate_id":2,"path":["core","slice","iter","RChunks"],"kind":"struct"},"17:2512:6241":{"crate_id":17,"path":["object","read","elf","relocation","ElfDynamicRelocationIterator"],"kind":"struct"},"16:4852:7533":{"crate_id":16,"path":["gimli","constants","DwDefaulted"],"kind":"struct"},"24:4670:3363":{"crate_id":24,"path":["syn","token","AddEq"],"kind":"struct"},"5:1500:89":{"crate_id":5,"path":["alloc","collections","btree","map","BTreeMap"],"kind":"struct"},"1:15004:4676":{"crate_id":1,"path":["std","sys_common","net","LookupHost"],"kind":"struct"},"6:6124:8644":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user_regs_struct"],"kind":"struct"},"24:5235:3402":{"crate_id":24,"path":["syn","token","ShrEq"],"kind":"struct"},"24:6324:3138":{"crate_id":24,"path":["syn","ty","TypePtr"],"kind":"struct"},"2:45881:5246":{"crate_id":2,"path":["core","char","convert","CharErrorKind"],"kind":"enum"},"16:7971:119":{"crate_id":16,"path":["gimli","read","Error"],"kind":"enum"},"16:2794:5823":{"crate_id":16,"path":["gimli","common","Register"],"kind":"struct"},"20:44:4584":{"crate_id":20,"path":["quote","ext","private","Sealed"],"kind":"trait"},"17:12456:7046":{"crate_id":17,"path":["object","macho","TwolevelHint"],"kind":"struct"},"2:3260:3374":{"crate_id":2,"path":["core","ops","arith","Div"],"kind":"trait"},"2:52931:5159":{"crate_id":2,"path":["core","core_arch","simd","f64x8"],"kind":"struct"},"6:6085:8627":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","pthread_attr_t"],"kind":"struct"},"17:11604:6873":{"crate_id":17,"path":["object","elf","Syminfo32"],"kind":"struct"},"24:4757:3369":{"crate_id":24,"path":["syn","token","Caret"],"kind":"struct"},"17:10377:6242":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbol"],"kind":"struct"},"6:6200:8692":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","shmid_ds"],"kind":"struct"},"12:2303:1698":{"crate_id":12,"path":["hashbrown","raw","sse2","Group"],"kind":"struct"},"2:49757:113":{"crate_id":2,"path":["core","time","Duration"],"kind":"struct"},"6:670:40920":{"crate_id":6,"path":["libc","unix","linux_like","timezone"],"kind":"enum"},"24:5451:3069":{"crate_id":24,"path":["syn","data","FieldsUnnamed"],"kind":"struct"},"2:2799:98":{"crate_id":2,"path":["core","clone","Clone"],"kind":"trait"},"1:7669:4810":{"crate_id":1,"path":["std","process","Termination"],"kind":"trait"},"2:3348:4983":{"crate_id":2,"path":["core","ops","bit","ShrAssign"],"kind":"trait"},"6:5282:8437":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_mmap_hdr"],"kind":"struct"},"2:52806:5156":{"crate_id":2,"path":["core","core_arch","simd","f32x16"],"kind":"struct"},"18:169:53777":{"crate_id":18,"path":["memchr","memchr","iter","Memchr3"],"kind":"struct"},"6:6155:8670":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user"],"kind":"struct"},"12:2045:1746":{"crate_id":12,"path":["hashbrown","set","Union"],"kind":"struct"},"18:650:6281":{"crate_id":18,"path":["memchr","memmem","prefilter","Prefilter"],"kind":"enum"},"24:6094:1714":{"crate_id":24,"path":["syn","derive","Data"],"kind":"enum"},"2:13843:133":{"crate_id":2,"path":["core","alloc","global","GlobalAlloc"],"kind":"trait"},"2:7867:60132":{"crate_id":2,"path":["core","iter","sources","from_generator","FromGenerator"],"kind":"struct"},"6:4133:8214":{"crate_id":6,"path":["libc","unix","linux_like","linux","dl_phdr_info"],"kind":"struct"},"6:3951:8129":{"crate_id":6,"path":["libc","unix","linux_like","linux","fsid_t"],"kind":"struct"},"22:919:1774":{"crate_id":22,"path":["proc_macro2","TokenTree"],"kind":"enum"},"6:5548:8550":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","msqid_ds"],"kind":"struct"},"5:5096:4610":{"crate_id":5,"path":["alloc","rc","from_iter_exact","Guard"],"kind":"struct"},"2:12472:5332":{"crate_id":2,"path":["core","str","iter","MatchIndicesInternal"],"kind":"struct"},"2:45491:177":{"crate_id":2,"path":["core","ops","range","RangeFrom"],"kind":"struct"},"24:5913:3113":{"crate_id":24,"path":["syn","generics","ConstParam"],"kind":"struct"},"24:5393:1782":{"crate_id":24,"path":["syn","attr","Meta","List"],"kind":"foreign_type"},"5:4382:6511":{"crate_id":5,"path":["alloc","collections","vec_deque","truncate","Dropper"],"kind":"struct"},"1:7212:168":{"crate_id":1,"path":["std","path","PathBuf"],"kind":"struct"},"24:3349:3329":{"crate_id":24,"path":["syn","token","Abstract"],"kind":"struct"},"6:1908:41892":{"crate_id":6,"path":["libc","unix","linux_like","linux","fpos64_t"],"kind":"enum"},"24:2071:63161":{"crate_id":24,"path":["syn","buffer","empty","UnsafeSyncEntry"],"kind":"struct"},"1:10935:4628":{"crate_id":1,"path":["std","io","Lines"],"kind":"struct"},"2:46567:8832":{"crate_id":2,"path":["core","iter","sources","repeat_with","RepeatWith"],"kind":"struct"},"2:47113:3195":{"crate_id":2,"path":["core","option","IntoIter"],"kind":"struct"},"2:2004:4610":{"crate_id":2,"path":["core","mem","maybe_uninit","write_slice_cloned","Guard"],"kind":"struct"},"17:12598:7068":{"crate_id":17,"path":["object","macho","BuildToolVersion"],"kind":"struct"},"6:5347:8481":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ntptimeval"],"kind":"struct"},"18:677:134":{"crate_id":18,"path":["memchr","memmem","rabinkarp","Hash"],"kind":"struct"},"21:257:62931":{"crate_id":21,"path":["proc_macro","bridge","handle","OwnedStore"],"kind":"struct"},"1:8652:59512":{"crate_id":1,"path":["std","sync","mutex","fmt","LockedPlaceholder"],"kind":"struct"},"1:4593:58504":{"crate_id":1,"path":["std","io","Write","write_fmt","Adapter"],"kind":"struct"},"1:11001:4693":{"crate_id":1,"path":["std","net","ip","Ipv6MulticastScope"],"kind":"enum"},"17:12480:7049":{"crate_id":17,"path":["object","macho","UuidCommand"],"kind":"struct"},"1:14312:110":{"crate_id":1,"path":["std","sys","unix","fs","DirBuilder"],"kind":"struct"},"6:1522:7923":{"crate_id":6,"path":["libc","unix","linux_like","in_addr"],"kind":"struct"},"1:5685:4572":{"crate_id":1,"path":["std","os","unix","fs","DirEntryExt2"],"kind":"trait"},"2:2875:166":{"crate_id":2,"path":["core","cmp","PartialOrd"],"kind":"trait"},"1:11980:4917":{"crate_id":1,"path":["std","sync","once","OnceState"],"kind":"struct"},"17:11993:6954":{"crate_id":17,"path":["object","macho","MachHeader32"],"kind":"struct"},"6:5228:8410":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","termios"],"kind":"struct"},"2:55709:5114":{"crate_id":2,"path":["core","core_simd","fmt","fmt","Wrapper"],"kind":"struct"},"16:7295:5853":{"crate_id":16,"path":["gimli","read","rnglists","RawRngListIter"],"kind":"struct"},"2:46271:5093":{"crate_id":2,"path":["core","iter","adapters","map_while","MapWhile"],"kind":"struct"},"16:2889:6105":{"crate_id":16,"path":["gimli","common","DebugArangesOffset"],"kind":"struct"},"17:10052:47512":{"crate_id":17,"path":["object","read","archive","ArchiveMember"],"kind":"struct"},"2:10023:111":{"crate_id":2,"path":["core","fmt","Display"],"kind":"trait"},"24:5741:3086":{"crate_id":24,"path":["syn","expr","ExprContinue"],"kind":"struct"},"2:7883:4834":{"crate_id":2,"path":["core","iter","sources","once","once"],"kind":"function"},"12:396:5741":{"crate_id":12,"path":["hashbrown","raw","RawIntoIter"],"kind":"struct"},"24:2377:3196":{"crate_id":24,"path":["syn","punctuated","Iter"],"kind":"struct"},"1:5826:4944":{"crate_id":1,"path":["std","os","unix","net","ancillary","AncillaryDataIter"],"kind":"struct"},"2:51295:5157":{"crate_id":2,"path":["core","core_arch","simd","f64x2"],"kind":"struct"},"24:5482:3070":{"crate_id":24,"path":["syn","data","VisCrate"],"kind":"struct"},"2:3429:124":{"crate_id":2,"path":["core","ops","function","FnOnce"],"kind":"trait"},"2:46022:5250":{"crate_id":2,"path":["core","char","TryFromCharError"],"kind":"struct"},"2:3297:4965":{"crate_id":2,"path":["core","ops","bit","Not"],"kind":"trait"},"1:10505:4587":{"crate_id":1,"path":["std","error","Chain"],"kind":"struct"},"1:1459:4702":{"crate_id":1,"path":["std","collections","hash","map","Values"],"kind":"struct"},"24:2306:3193":{"crate_id":24,"path":["syn","punctuated","PairsMut"],"kind":"struct"},"16:7119:5827":{"crate_id":16,"path":["gimli","read","op","Expression"],"kind":"struct"},"2:5324:5147":{"crate_id":2,"path":["core","ffi","sealed_trait","VaArgSafe"],"kind":"trait"},"2:24176:5385":{"crate_id":2,"path":["core","num","nonzero","NonZeroU32"],"kind":"struct"},"2:3325:3401":{"crate_id":2,"path":["core","ops","bit","Shr"],"kind":"trait"},"2:49725:5351":{"crate_id":2,"path":["core","str","CharEscapeDebugContinue"],"kind":"struct"},"2:51636:5186":{"crate_id":2,"path":["core","core_arch","simd","u16x16"],"kind":"struct"},"2:24244:5386":{"crate_id":2,"path":["core","num","nonzero","NonZeroU128"],"kind":"struct"},"2:49431:5036":{"crate_id":2,"path":["core","str","pattern","MultiCharEqSearcher"],"kind":"struct"},"17:11616:6876":{"crate_id":17,"path":["object","elf","Syminfo64"],"kind":"struct"},"2:45922:5480":{"crate_id":2,"path":["core","char","decode","DecodeUtf16Error"],"kind":"struct"},"1:10380:58802":{"crate_id":1,"path":["std","thread","local","fast","DtorState"],"kind":"enum"},"6:4060:8180":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_constant_effect"],"kind":"struct"},"20:0:1035":{"crate_id":20,"path":["quote"],"kind":"module"},"2:23756:39842":{"crate_id":2,"path":["core","num","flt2dec","decoder","FullDecoded"],"kind":"enum"},"1:4293:4643":{"crate_id":1,"path":["std","io","stdio","Stdin"],"kind":"struct"},"1:10968:4669":{"crate_id":1,"path":["std","net","addr","SocketAddrV6"],"kind":"struct"},"24:964:3116":{"crate_id":24,"path":["syn","generics","ImplGenerics"],"kind":"struct"},"24:972:3117":{"crate_id":24,"path":["syn","generics","Turbofish"],"kind":"struct"},"1:2395:13063":{"crate_id":1,"path":["std","env","Vars"],"kind":"struct"},"2:51923:5170":{"crate_id":2,"path":["core","core_arch","simd","i32x8"],"kind":"struct"},"5:983:5533":{"crate_id":5,"path":["alloc","collections","binary_heap","Hole"],"kind":"struct"},"5:2888:8737":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Immut"],"kind":"struct"},"1:15683:2947":{"crate_id":1,"path":["std","u8"],"kind":"primitive"},"1:1157:12096":{"crate_id":1,"path":["std","backtrace","BytesOrWide"],"kind":"enum"},"17:10988:47715":{"crate_id":17,"path":["object","read","pe","section","PeSectionIterator"],"kind":"struct"},"5:1545:3195":{"crate_id":5,"path":["alloc","collections","btree","map","IntoIter"],"kind":"struct"},"1:3955:119":{"crate_id":1,"path":["std","io","error","Error"],"kind":"struct"},"6:4317:8260":{"crate_id":6,"path":["libc","unix","linux_like","linux","inotify_event"],"kind":"struct"},"1:7387:111":{"crate_id":1,"path":["std","path","Display"],"kind":"struct"},"17:12795:7107":{"crate_id":17,"path":["object","macho","ScatteredRelocationInfo"],"kind":"struct"},"16:3091:6148":{"crate_id":16,"path":["gimli","common","DebugMacroOffset"],"kind":"struct"},"6:4046:8172":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_trigger"],"kind":"struct"},"24:5433:1765":{"crate_id":24,"path":["syn","data","Fields"],"kind":"enum"},"1:9193:4596":{"crate_id":1,"path":["std","std_float","StdFloat"],"kind":"trait"},"17:9933:47460":{"crate_id":17,"path":["object","read","any","DynamicRelocationIterator"],"kind":"struct"},"24:66:1946":{"crate_id":24,"path":["syn","token"],"kind":"module"},"17:4157:6196":{"crate_id":17,"path":["object","read","macho","relocation","MachORelocationIterator"],"kind":"struct"},"2:51097:5192":{"crate_id":2,"path":["core","core_arch","simd","u64x2"],"kind":"struct"},"6:5191:8396":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__timeval"],"kind":"struct"},"6:1708:8040":{"crate_id":6,"path":["libc","unix","linux_like","arphdr"],"kind":"struct"},"6:5371:8493":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","Elf64_Chdr"],"kind":"struct"},"2:49905:8844":{"crate_id":2,"path":["core","future","ResumeTy"],"kind":"struct"},"16:5360:5876":{"crate_id":16,"path":["gimli","read","cfi","DebugFrame"],"kind":"struct"},"1:15674:2938":{"crate_id":1,"path":["std","str"],"kind":"primitive"},"2:45614:5073":{"crate_id":2,"path":["core","ops","try_trait","Yeet"],"kind":"struct"},"2:13570:34132":{"crate_id":2,"path":["core","future","poll_fn","PollFn"],"kind":"struct"},"2:13535:169":{"crate_id":2,"path":["core","future","pending","Pending"],"kind":"struct"},"2:52970:8908":{"crate_id":2,"path":["core","core_arch","x86","__m128d"],"kind":"struct"},"2:49277:5338":{"crate_id":2,"path":["core","str","iter","LinesAny"],"kind":"struct"},"2:49510:5041":{"crate_id":2,"path":["core","str","pattern","CharSliceSearcher"],"kind":"struct"},"2:51272:5154":{"crate_id":2,"path":["core","core_arch","simd","f32x4"],"kind":"struct"},"17:9659:62852":{"crate_id":17,"path":["object","read","any","SegmentIteratorInternal"],"kind":"enum"},"6:4227:8229":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Shdr"],"kind":"struct"},"17:12699:7088":{"crate_id":17,"path":["object","macho","SourceVersionCommand"],"kind":"struct"},"17:2484:47555":{"crate_id":17,"path":["object","read","elf","relocation","ElfRelaIterator"],"kind":"enum"},"17:294:62851":{"crate_id":17,"path":["object","read","util","DebugByte"],"kind":"struct"},"2:49792:5430":{"crate_id":2,"path":["core","time","FromFloatSecsErrorKind"],"kind":"enum"},"2:31949:4219":{"crate_id":2,"path":["core","mem","valid_align","ValidAlign"],"kind":"struct"},"18:801:6272":{"crate_id":18,"path":["memchr","memmem","FindRevIter"],"kind":"struct"},"5:7798:4498":{"crate_id":5,"path":["alloc","collections","binary_heap","Drain"],"kind":"struct"},"24:4740:3368":{"crate_id":24,"path":["syn","token","Bang"],"kind":"struct"},"16:3287:6096":{"crate_id":16,"path":["gimli","common","DebugTypesOffset"],"kind":"struct"},"16:7236:5930":{"crate_id":16,"path":["gimli","read","rnglists","DebugRanges"],"kind":"struct"},"13:0:2903":{"crate_id":13,"path":["std_detect"],"kind":"module"},"6:624:7914":{"crate_id":6,"path":["libc","unix","servent"],"kind":"struct"},"18:620:9037":{"crate_id":18,"path":["memchr","cow","Imp"],"kind":"struct"},"6:4215:8228":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Phdr"],"kind":"struct"},"17:10081:6202":{"crate_id":17,"path":["object","read","coff","section","SectionTable"],"kind":"struct"},"1:8616:154":{"crate_id":1,"path":["std","sync","mutex","Mutex"],"kind":"struct"},"24:2848:3256":{"crate_id":24,"path":["syn","lookahead","Peek"],"kind":"trait"},"6:5469:8524":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","utmpx"],"kind":"struct"},"24:3961:188":{"crate_id":24,"path":["syn","token","Return"],"kind":"struct"},"17:9551:6232":{"crate_id":17,"path":["object","read","util","ByteString"],"kind":"struct"},"24:6042:3123":{"crate_id":24,"path":["syn","lit","LitInt"],"kind":"struct"},"2:3650:5071":{"crate_id":2,"path":["core","ops","try_trait","NeverShortCircuit"],"kind":"struct"},"2:2318:3277":{"crate_id":2,"path":["core","ptr","non_null","NonNull"],"kind":"struct"},"1:2188:1746":{"crate_id":1,"path":["std","collections","hash","set","Union"],"kind":"struct"},"24:6314:3135":{"crate_id":24,"path":["syn","ty","TypeMacro"],"kind":"struct"},"1:15640:12098":{"crate_id":1,"path":["std","backtrace_rs","types","BytesOrWideString"],"kind":"enum"},"6:6051:8620":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statfs64"],"kind":"struct"},"24:5389:1781":{"crate_id":24,"path":["syn","attr","Meta"],"kind":"enum"},"18:152:53776":{"crate_id":18,"path":["memchr","memchr","iter","Memchr2"],"kind":"struct"},"17:11835:6927":{"crate_id":17,"path":["object","elf","HashHeader"],"kind":"struct"},"6:3862:8067":{"crate_id":6,"path":["libc","unix","linux_like","linux","rlimit64"],"kind":"struct"},"5:3137:4824":{"crate_id":5,"path":["alloc","collections","btree","set","SymmetricDifference"],"kind":"struct"},"1:10472:4716":{"crate_id":1,"path":["std","collections","hash","map","DefaultHasher"],"kind":"struct"},"24:6321:2146":{"crate_id":24,"path":["syn","ty","TypePath"],"kind":"struct"},"12:930:4706":{"crate_id":12,"path":["hashbrown","map","RawEntryBuilderMut"],"kind":"struct"},"2:53107:8917":{"crate_id":2,"path":["core","core_arch","x86","__m512bh"],"kind":"struct"},"6:161:40589":{"crate_id":6,"path":["libc","unix","fpos_t"],"kind":"enum"},"6:6239:8707":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ucontext_t"],"kind":"struct"},"2:49287:5339":{"crate_id":2,"path":["core","str","iter","SplitWhitespace"],"kind":"struct"},"24:3247:3196":{"crate_id":24,"path":["syn","error","Iter"],"kind":"struct"},"24:5377:2045":{"crate_id":24,"path":["syn","attr","Attribute"],"kind":"struct"},"6:4306:8254":{"crate_id":6,"path":["libc","unix","linux_like","linux","arpd_request"],"kind":"struct"},"16:5975:5899":{"crate_id":16,"path":["gimli","read","dwarf","Dwarf"],"kind":"struct"},"6:4300:8251":{"crate_id":6,"path":["libc","unix","linux_like","linux","in6_pktinfo"],"kind":"struct"},"2:53084:8916":{"crate_id":2,"path":["core","core_arch","x86","__m256bh"],"kind":"struct"},"16:7195:5926":{"crate_id":16,"path":["gimli","read","pubnames","PubNamesEntryIter"],"kind":"struct"},"24:6046:3118":{"crate_id":24,"path":["syn","lit","LitBool"],"kind":"struct"},"2:50929:5153":{"crate_id":2,"path":["core","core_arch","simd","f32x2"],"kind":"struct"},"21:3515:1709":{"crate_id":21,"path":["proc_macro","Ident"],"kind":"struct"},"17:11199:6822":{"crate_id":17,"path":["object","read","ObjectMapEntry"],"kind":"struct"},"17:12431:7042":{"crate_id":17,"path":["object","macho","DylibReference"],"kind":"struct"},"2:8070:5009":{"crate_id":2,"path":["core","iter","traits","accum","Product"],"kind":"trait"},"2:11638:5320":{"crate_id":2,"path":["core","slice","iter","GroupByMut"],"kind":"struct"},"17:10458:6670":{"crate_id":17,"path":["object","read","elf","note","Note"],"kind":"struct"},"1:9577:6554":{"crate_id":1,"path":["std","sys_common","rwlock","MovableRwLock"],"kind":"struct"},"6:3881:8077":{"crate_id":6,"path":["libc","unix","linux_like","linux","passwd"],"kind":"struct"},"24:6396:2089":{"crate_id":24,"path":["syn","path","Binding"],"kind":"struct"},"1:14269:4579":{"crate_id":1,"path":["std","sys","unix","fs","OpenOptions"],"kind":"struct"},"16:7264:5851":{"crate_id":16,"path":["gimli","read","rnglists","RangeLists"],"kind":"struct"},"16:5522:5885":{"crate_id":16,"path":["gimli","read","cfi","CieOrFde"],"kind":"enum"},"2:9966:3282":{"crate_id":2,"path":["core","fmt","Write"],"kind":"trait"},"1:5877:4950":{"crate_id":1,"path":["std","os","unix","net","ancillary","Messages"],"kind":"struct"},"2:49609:5046":{"crate_id":2,"path":["core","str","pattern","TwoWaySearcher"],"kind":"struct"},"17:10635:6772":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandIterator"],"kind":"struct"},"1:1488:4703":{"crate_id":1,"path":["std","collections","hash","map","ValuesMut"],"kind":"struct"},"2:4753:2123":{"crate_id":2,"path":["core","cell","RefCell"],"kind":"struct"},"9:469:9195":{"crate_id":9,"path":["miniz_oxide","inflate","core","DecompressorOxide"],"kind":"struct"},"24:6329:3139":{"crate_id":24,"path":["syn","ty","TypeReference"],"kind":"struct"},"2:10027:2192":{"crate_id":2,"path":["core","fmt","Binary"],"kind":"trait"},"6:5428:8514":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ptrace_syscall_info"],"kind":"struct"},"2:22315:61397":{"crate_id":2,"path":["core","core_simd","swizzle","interleave","Hi"],"kind":"struct"},"2:10037:3284":{"crate_id":2,"path":["core","fmt","UpperExp"],"kind":"trait"},"1:8000:4136":{"crate_id":1,"path":["std","sync","mpsc","shared","Packet"],"kind":"struct"},"17:9404:6761":{"crate_id":17,"path":["object","endian","I16Bytes"],"kind":"struct"},"17:13554:7361":{"crate_id":17,"path":["object","pe","ImageResourceDataEntry"],"kind":"struct"},"17:11337:6210":{"crate_id":17,"path":["object","read","CompressionFormat"],"kind":"enum"},"12:2331:3231":{"crate_id":12,"path":["hashbrown","TryReserveError"],"kind":"enum"},"6:6899:8728":{"crate_id":6,"path":["libc","unix","linux_like","linux","can_frame"],"kind":"struct"},"24:2360:3195":{"crate_id":24,"path":["syn","punctuated","IntoIter"],"kind":"struct"},"21:384:4533":{"crate_id":21,"path":["proc_macro","bridge","rpc","PanicMessage"],"kind":"enum"},"2:49063:5329":{"crate_id":2,"path":["core","str","iter","SplitTerminator"],"kind":"struct"},"5:1576:4703":{"crate_id":5,"path":["alloc","collections","btree","map","ValuesMut"],"kind":"struct"},"5:6154:4498":{"crate_id":5,"path":["alloc","string","Drain"],"kind":"struct"},"1:14759:4695":{"crate_id":1,"path":["std","sys","unix","time","inner","Instant"],"kind":"struct"},"17:9600:62850":{"crate_id":17,"path":["object","read","any","FileInternal"],"kind":"enum"},"2:3155:108":{"crate_id":2,"path":["core","default","Default"],"kind":"trait"},"2:38461:3991":{"crate_id":2,"path":["core","marker","PhantomPinned"],"kind":"struct"},"3:300:187":{"crate_id":3,"path":["compiler_builtins","float","cmp","Result"],"kind":"enum"},"16:3195:6092":{"crate_id":16,"path":["gimli","common","DebugRngListsIndex"],"kind":"struct"},"1:15085:4887":{"crate_id":1,"path":["std","sys_common","net","UdpSocket"],"kind":"struct"},"17:9280:6758":{"crate_id":17,"path":["object","endian","BigEndian"],"kind":"struct"},"2:22737:5152":{"crate_id":2,"path":["core","core_simd","masks","MaskElement"],"kind":"trait"},"17:12685:7085":{"crate_id":17,"path":["object","macho","EntryPointCommand"],"kind":"struct"},"16:6636:5852":{"crate_id":16,"path":["gimli","read","loclists","RawLocListIter"],"kind":"struct"},"16:5231:7539":{"crate_id":16,"path":["gimli","constants","DwOp"],"kind":"struct"},"24:5948:2393":{"crate_id":24,"path":["syn","generics","TraitBound"],"kind":"struct"},"17:12307:7005":{"crate_id":17,"path":["object","macho","RoutinesCommand64"],"kind":"struct"},"24:5071:3390":{"crate_id":24,"path":["syn","token","OrOr"],"kind":"struct"},"17:2314:6243":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbolIterator"],"kind":"struct"},"20:63:3053":{"crate_id":20,"path":["quote","ident_fragment","IdentFragment"],"kind":"trait"},"2:23622:8741":{"crate_id":2,"path":["core","num","dec2flt","common","AsciiStr"],"kind":"struct"},"2:49990:4591":{"crate_id":2,"path":["core","alloc","layout","LayoutError"],"kind":"struct"},"5:7492:6519":{"crate_id":5,"path":["alloc","vec","retain_mut","BackshiftOnDrop"],"kind":"struct"},"2:3245:3219":{"crate_id":2,"path":["core","ops","arith","Add"],"kind":"trait"},"2:45621:4592":{"crate_id":2,"path":["core","any","TypeId"],"kind":"struct"},"24:5715:3080":{"crate_id":24,"path":["syn","expr","ExprBlock"],"kind":"struct"},"1:3440:4633":{"crate_id":1,"path":["std","io","buffered","bufreader","BufReader"],"kind":"struct"},"1:15667:2931":{"crate_id":1,"path":["std","bool"],"kind":"primitive"},"1:7509:4800":{"crate_id":1,"path":["std","process","ChildStdin"],"kind":"struct"},"1:14707:4807":{"crate_id":1,"path":["std","sys","unix","process","process_inner","ExitStatusError"],"kind":"struct"},"1:11142:4945":{"crate_id":1,"path":["std","os","unix","net","ancillary","SocketCred"],"kind":"struct"},"16:5707:5890":{"crate_id":16,"path":["gimli","read","cfi","UninitializedUnwindContext"],"kind":"struct"},"5:7783:3195":{"crate_id":5,"path":["alloc","collections","binary_heap","IntoIter"],"kind":"struct"},"2:47097:3196":{"crate_id":2,"path":["core","option","Iter"],"kind":"struct"},"2:13915:4381":{"crate_id":2,"path":["core","alloc","Allocator"],"kind":"trait"},"2:45680:5256":{"crate_id":2,"path":["core","array","TryFromSliceError"],"kind":"struct"},"17:12632:7081":{"crate_id":17,"path":["object","macho","LinkerOptionCommand"],"kind":"struct"},"17:8902:47447":{"crate_id":17,"path":["object","common","AddressSize"],"kind":"enum"},"1:3908:4821":{"crate_id":1,"path":["std","io","error","repr_bitpacked","Repr"],"kind":"struct"},"6:3945:8128":{"crate_id":6,"path":["libc","unix","linux_like","linux","itimerspec"],"kind":"struct"},"17:13272:7290":{"crate_id":17,"path":["object","pe","ImageSymbolBytes"],"kind":"struct"},"5:1595:4705":{"crate_id":5,"path":["alloc","collections","btree","map","IntoValues"],"kind":"struct"},"17:10926:47738":{"crate_id":17,"path":["object","read","pe","file","PeComdatIterator"],"kind":"struct"},"2:11605:5319":{"crate_id":2,"path":["core","slice","iter","GroupBy"],"kind":"struct"},"17:11767:6907":{"crate_id":17,"path":["object","elf","Verdaux"],"kind":"struct"},"2:49393:5030":{"crate_id":2,"path":["core","str","pattern","SearchStep"],"kind":"enum"},"1:13682:4805":{"crate_id":1,"path":["std","sys","unix","process","process_common","Stdio"],"kind":"enum"},"22:791:2421":{"crate_id":22,"path":["proc_macro2","fallback","Literal"],"kind":"struct"},"16:6238:5838":{"crate_id":16,"path":["gimli","read","line","DebugLine"],"kind":"struct"},"1:12014:4696":{"crate_id":1,"path":["std","time","SystemTime"],"kind":"struct"},"1:11308:4774":{"crate_id":1,"path":["std","path","State"],"kind":"enum"},"17:11750:6899":{"crate_id":17,"path":["object","elf","Verdef"],"kind":"struct"},"5:2182:5584":{"crate_id":5,"path":["alloc","collections","btree","navigate","LazyLeafHandle"],"kind":"enum"},"17:12917:7109":{"crate_id":17,"path":["object","pe","ImageDosHeader"],"kind":"struct"},"2:46290:5095":{"crate_id":2,"path":["core","iter","adapters","rev","Rev"],"kind":"struct"},"24:5247:3403":{"crate_id":24,"path":["syn","token","Star"],"kind":"struct"},"24:5415:1784":{"crate_id":24,"path":["syn","attr","NestedMeta"],"kind":"enum"},"2:48076:125":{"crate_id":2,"path":["core","fmt","rt","v1","FormatSpec"],"kind":"struct"},"24:4878:3377":{"crate_id":24,"path":["syn","token","Dot"],"kind":"struct"},"2:50836:5176":{"crate_id":2,"path":["core","core_arch","simd","i8x8"],"kind":"struct"},"24:5324:3526":{"crate_id":24,"path":["syn","token","Bracket"],"kind":"struct"},"5:5514:5500":{"crate_id":5,"path":["alloc","slice","Concat"],"kind":"trait"},"17:12442:7044":{"crate_id":17,"path":["object","macho","TwolevelHintsCommand"],"kind":"struct"},"24:4105:1695":{"crate_id":24,"path":["syn","token","Type"],"kind":"struct"},"2:48349:4722":{"crate_id":2,"path":["core","hash","sip","SipHasher13"],"kind":"struct"},"2:46072:5419":{"crate_id":2,"path":["core","ffi","c_str","FromBytesUntilNulError"],"kind":"struct"},"16:2866:6086":{"crate_id":16,"path":["gimli","common","DebugAddrIndex"],"kind":"struct"},"6:6923:8733":{"crate_id":6,"path":["libc","unix","linux_like","linux","non_exhaustive","open_how"],"kind":"struct"},"17:542:5812":{"crate_id":17,"path":["object","read","any","Section"],"kind":"struct"},"16:6731:6123":{"crate_id":16,"path":["gimli","read","lookup","LookupEntryIter"],"kind":"struct"},"16:7786:5846":{"crate_id":16,"path":["gimli","read","unit","EntriesRaw"],"kind":"struct"},"2:46055:5418":{"crate_id":2,"path":["core","ffi","c_str","FromBytesWithNulErrorKind"],"kind":"enum"},"6:4120:8210":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_ff_erase"],"kind":"struct"},"24:5454:1726":{"crate_id":24,"path":["syn","data","Field"],"kind":"struct"},"24:6110:1919":{"crate_id":24,"path":["syn","derive","DataStruct"],"kind":"struct"},"2:48891:5314":{"crate_id":2,"path":["core","slice","iter","ArrayChunksMut"],"kind":"struct"},"2:49296:5340":{"crate_id":2,"path":["core","str","iter","SplitAsciiWhitespace"],"kind":"struct"},"1:3235:4844":{"crate_id":1,"path":["std","fs","symlink_metadata"],"kind":"function"},"24:3565:3336":{"crate_id":24,"path":["syn","token","Do"],"kind":"struct"},"6:4387:8294":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_filter"],"kind":"struct"},"24:153:1762":{"crate_id":24,"path":["syn","token","Token"],"kind":"trait"},"2:8066:5007":{"crate_id":2,"path":["core","iter","traits","accum","Sum"],"kind":"trait"},"21:3307:3302":{"crate_id":21,"path":["proc_macro","diagnostic","Level"],"kind":"enum"},"6:3978:8140":{"crate_id":6,"path":["libc","unix","linux_like","linux","msginfo"],"kind":"struct"},"1:15671:2935":{"crate_id":1,"path":["std","pointer"],"kind":"primitive"},"2:3552:3216":{"crate_id":2,"path":["core","ops","range","RangeBounds"],"kind":"trait"},"6:4293:8250":{"crate_id":6,"path":["libc","unix","linux_like","linux","genlmsghdr"],"kind":"struct"},"17:11026:47462":{"crate_id":17,"path":["object","read","traits","NoDynamicRelocationIterator"],"kind":"struct"},"17:10279:6202":{"crate_id":17,"path":["object","read","elf","section","SectionTable"],"kind":"struct"},"24:658:6656":{"crate_id":24,"path":["syn","expr","parsing","AllowStruct"],"kind":"struct"},"24:4159:3357":{"crate_id":24,"path":["syn","token","Unsafe"],"kind":"struct"},"2:10812:3196":{"crate_id":2,"path":["core","slice","iter","Iter"],"kind":"struct"},"18:712:3998":{"crate_id":18,"path":["memchr","memmem","twoway","Reverse"],"kind":"struct"},"24:5223:3401":{"crate_id":24,"path":["syn","token","Shr"],"kind":"struct"},"9:749:5607":{"crate_id":9,"path":["miniz_oxide","deflate","core","TDEFLStatus"],"kind":"enum"},"1:13828:6561":{"crate_id":1,"path":["std","sys","unix","stack_overflow","Handler"],"kind":"struct"},"24:5484:3072":{"crate_id":24,"path":["syn","data","VisRestricted"],"kind":"struct"},"16:3549:7511":{"crate_id":16,"path":["gimli","arch","X86"],"kind":"struct"},"17:10420:6239":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdat"],"kind":"struct"},"5:2202:5564":{"crate_id":5,"path":["alloc","collections","btree","navigate","LazyLeafRange"],"kind":"struct"},"24:3835:3347":{"crate_id":24,"path":["syn","token","Mod"],"kind":"struct"},"17:9961:47461":{"crate_id":17,"path":["object","read","any","SectionRelocationIterator"],"kind":"struct"},"2:3185:198":{"crate_id":2,"path":["core","marker","StructuralPartialEq"],"kind":"trait"},"2:47165:4389":{"crate_id":2,"path":["core","panicking","AssertKind"],"kind":"enum"},"17:12275:6998":{"crate_id":17,"path":["object","macho","ThreadCommand"],"kind":"struct"},"12:2013:4498":{"crate_id":12,"path":["hashbrown","set","Drain"],"kind":"struct"},"6:4052:8175":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_envelope"],"kind":"struct"},"2:38398:4590":{"crate_id":2,"path":["core","convert","Infallible"],"kind":"enum"},"24:5935:2145":{"crate_id":24,"path":["syn","generics","TypeParamBound"],"kind":"enum"},"2:47826:3285":{"crate_id":2,"path":["core","fmt","num","LowerHex"],"kind":"struct"},"5:2896:56656":{"crate_id":5,"path":["alloc","collections","btree","node","marker","ValMut"],"kind":"struct"},"17:11915:6932":{"crate_id":17,"path":["object","macho","DyldCacheHeader"],"kind":"struct"},"1:14871:4752":{"crate_id":1,"path":["std","sys_common","wtf8","Wtf8Buf"],"kind":"struct"},"21:1277:3301":{"crate_id":21,"path":["proc_macro","bridge","client","Diagnostic"],"kind":"struct"},"17:10558:47659":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCacheImageIterator"],"kind":"struct"},"1:15690:2954":{"crate_id":1,"path":["std","reference"],"kind":"primitive"},"17:13386:7315":{"crate_id":17,"path":["object","pe","ImageLinenumber"],"kind":"struct"},"16:6744:6124":{"crate_id":16,"path":["gimli","read","lookup","PubStuffHeader"],"kind":"struct"},"6:4501:8340":{"crate_id":6,"path":["libc","unix","linux_like","linux","mq_attr"],"kind":"struct"},"1:5269:4879":{"crate_id":1,"path":["std","net","tcp","TcpStream"],"kind":"struct"},"2:53031:8913":{"crate_id":2,"path":["core","core_arch","x86","__m512"],"kind":"struct"},"2:51797:5178":{"crate_id":2,"path":["core","core_arch","simd","i8x32"],"kind":"struct"},"1:11093:4882":{"crate_id":1,"path":["std","net","tcp","IntoIncoming"],"kind":"struct"},"1:8278:5577":{"crate_id":1,"path":["std","sync","mpsc","sync","Node"],"kind":"struct"},"1:8898:59512":{"crate_id":1,"path":["std","sync","rwlock","fmt","LockedPlaceholder"],"kind":"struct"},"17:12010:6957":{"crate_id":17,"path":["object","macho","MachHeader64"],"kind":"struct"},"2:51954:5173":{"crate_id":2,"path":["core","core_arch","simd","i64x4"],"kind":"struct"},"2:13459:142":{"crate_id":2,"path":["core","future","into_future","IntoFuture"],"kind":"trait"},"24:2862:1778":{"crate_id":24,"path":["syn","parse"],"kind":"module"},"6:1563:7941":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_in6"],"kind":"struct"},"1:6095:4897":{"crate_id":1,"path":["std","os","unix","net","listener","UnixListener"],"kind":"struct"},"1:13380:2082":{"crate_id":1,"path":["std","sys","unix","os_str","Slice"],"kind":"struct"},"2:3420:2138":{"crate_id":2,"path":["core","ops","drop","Drop"],"kind":"trait"},"1:1642:4713":{"crate_id":1,"path":["std","collections","hash","map","VacantEntry"],"kind":"struct"},"1:13967:4641":{"crate_id":1,"path":["std","sys","unix","stdio","Stderr"],"kind":"struct"},"1:13308:58483":{"crate_id":1,"path":["std","sys","unix","os","Env"],"kind":"struct"},"6:6864:8720":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_condattr_t"],"kind":"struct"},"2:47242:3195":{"crate_id":2,"path":["core","result","IntoIter"],"kind":"struct"},"1:11147:4948":{"crate_id":1,"path":["std","os","unix","net","ancillary","AncillaryError"],"kind":"enum"},"16:6208:5904":{"crate_id":16,"path":["gimli","read","aranges","ArangeEntryIter"],"kind":"struct"},"1:10928:4627":{"crate_id":1,"path":["std","io","Split"],"kind":"struct"},"16:7856:5935":{"crate_id":16,"path":["gimli","read","unit","EntriesTreeIter"],"kind":"struct"},"24:3198:6306":{"crate_id":24,"path":["syn","error","ErrorMessage"],"kind":"struct"},"1:820:6555":{"crate_id":1,"path":["std","thread","local","os","Key"],"kind":"struct"},"6:537:7861":{"crate_id":6,"path":["libc","unix","rlimit"],"kind":"struct"},"2:49733:5352":{"crate_id":2,"path":["core","str","CharEscapeDefault"],"kind":"struct"},"1:7166:59510":{"crate_id":1,"path":["std","path","fmt","DebugHelper"],"kind":"struct"},"2:51043:5185":{"crate_id":2,"path":["core","core_arch","simd","u16x8"],"kind":"struct"},"6:1729:4893":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_un"],"kind":"struct"},"2:45935:5343":{"crate_id":2,"path":["core","char","EscapeUnicode"],"kind":"struct"},"1:7795:4134":{"crate_id":1,"path":["std","sync","mpsc","blocking","Inner"],"kind":"struct"},"6:4517:8347":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_can_addr"],"kind":"union"},"6:1676:8022":{"crate_id":6,"path":["libc","unix","linux_like","in6_rtmsg"],"kind":"struct"},"2:50002:4380":{"crate_id":2,"path":["core","alloc","AllocError"],"kind":"struct"},"2:3339:4978":{"crate_id":2,"path":["core","ops","bit","BitXorAssign"],"kind":"trait"},"6:4347:8275":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_extended_err"],"kind":"struct"},"2:3463:4374":{"crate_id":2,"path":["core","ops","generator","Generator"],"kind":"trait"},"17:10128:6256":{"crate_id":17,"path":["object","read","coff","section","CoffSection"],"kind":"struct"},"1:11190:8601":{"crate_id":1,"path":["std","os","linux","raw","arch","stat"],"kind":"struct"},"16:4790:7531":{"crate_id":16,"path":["gimli","constants","DwDsc"],"kind":"struct"},"2:3679:3275":{"crate_id":2,"path":["core","ops","unsize","CoerceUnsized"],"kind":"trait"},"17:13574:7367":{"crate_id":17,"path":["object","pe","ImageDynamicRelocationTable"],"kind":"struct"},"17:13598:7371":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation32V2"],"kind":"struct"},"24:5834:3108":{"crate_id":24,"path":["syn","expr","ExprUnary"],"kind":"struct"},"11:0:2908":{"crate_id":11,"path":["adler"],"kind":"module"},"2:52853:5174":{"crate_id":2,"path":["core","core_arch","simd","i64x8"],"kind":"struct"},"6:4241:8230":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Shdr"],"kind":"struct"},"1:11135:4667":{"crate_id":1,"path":["std","os","unix","net","addr","SocketAddr"],"kind":"struct"},"24:3709:3342":{"crate_id":24,"path":["syn","token","If"],"kind":"struct"},"24:6340:3142":{"crate_id":24,"path":["syn","ty","TypeTuple"],"kind":"struct"},"9:234:5630":{"crate_id":9,"path":["miniz_oxide","deflate","core","HuffmanOxide"],"kind":"struct"},"21:3237:1774":{"crate_id":21,"path":["proc_macro","bridge","TokenTree"],"kind":"enum"},"18:885:6279":{"crate_id":18,"path":["memchr","memmem","SearcherRev"],"kind":"struct"},"1:15139:8997":{"crate_id":1,"path":["std","alloc","System"],"kind":"struct"},"2:11108:5304":{"crate_id":2,"path":["core","slice","iter","RSplitN"],"kind":"struct"},"17:12155:6982":{"crate_id":17,"path":["object","macho","FvmlibCommand"],"kind":"struct"},"6:5987:8592":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","siginfo_t"],"kind":"struct"},"17:13942:7483":{"crate_id":17,"path":["object","pe","ImageSeparateDebugHeader"],"kind":"struct"},"18:837:5031":{"crate_id":18,"path":["memchr","memmem","Searcher"],"kind":"struct"},"2:9703:5284":{"crate_id":2,"path":["core","fmt","builders","PadAdapterState"],"kind":"struct"},"2:46130:13680":{"crate_id":2,"path":["core","ffi","VaList"],"kind":"struct"},"24:5480:3071":{"crate_id":24,"path":["syn","data","VisPublic"],"kind":"struct"},"1:1446:4701":{"crate_id":1,"path":["std","collections","hash","map","Keys"],"kind":"struct"},"2:23859:5404":{"crate_id":2,"path":["core","num","error","IntErrorKind"],"kind":"enum"},"12:160:5739":{"crate_id":12,"path":["hashbrown","raw","Bucket"],"kind":"struct"},"5:1199:5562":{"crate_id":5,"path":["alloc","collections","btree","borrow","DormantMutRef"],"kind":"struct"},"24:5786:3097":{"crate_id":24,"path":["syn","expr","ExprMethodCall"],"kind":"struct"},"22:779:1698":{"crate_id":22,"path":["proc_macro2","fallback","Group"],"kind":"struct"},"17:681:1790":{"crate_id":17,"path":["object","read","any","Symbol"],"kind":"struct"},"2:50731:5196":{"crate_id":2,"path":["core","core_arch","simd","u8x8"],"kind":"struct"},"14:231:2236":{"crate_id":14,"path":["rustc_demangle","v0","ParseError"],"kind":"enum"},"2:50602:8846":{"crate_id":2,"path":["core","core_arch","simd","i8x2"],"kind":"struct"},"6:531:7859":{"crate_id":6,"path":["libc","unix","timespec"],"kind":"struct"},"17:12182:6986":{"crate_id":17,"path":["object","macho","DylibCommand"],"kind":"struct"},"2:3280:4699":{"crate_id":2,"path":["core","ops","arith","SubAssign"],"kind":"trait"},"2:48754:5302":{"crate_id":2,"path":["core","slice","iter","GenericSplitN"],"kind":"struct"},"16:4535:7524":{"crate_id":16,"path":["gimli","constants","DwVirtuality"],"kind":"struct"},"2:2211:4419":{"crate_id":2,"path":["core","ptr","metadata","DynMetadata"],"kind":"struct"},"2:45868:5245":{"crate_id":2,"path":["core","char","convert","ParseCharError"],"kind":"struct"},"16:7804:5845":{"crate_id":16,"path":["gimli","read","unit","EntriesCursor"],"kind":"struct"},"6:578:7890":{"crate_id":6,"path":["libc","unix","iovec"],"kind":"struct"},"16:5790:5895":{"crate_id":16,"path":["gimli","read","cfi","CfaRule"],"kind":"enum"},"6:4419:8308":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlmsgerr"],"kind":"struct"},"20:521:3919":{"crate_id":20,"path":["quote","__private","IdentFragmentAdapter"],"kind":"struct"},"5:2886:1951":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Owned"],"kind":"enum"},"1:10395:4133":{"crate_id":1,"path":["std","thread","ThreadId"],"kind":"struct"},"2:22596:5151":{"crate_id":2,"path":["core","core_simd","masks","mask_impl","Mask"],"kind":"struct"},"6:1554:7936":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_in"],"kind":"struct"},"2:47182:187":{"crate_id":2,"path":["core","result","Result"],"kind":"enum"},"2:51074:5189":{"crate_id":2,"path":["core","core_arch","simd","u32x4"],"kind":"struct"},"5:3481:3200":{"crate_id":5,"path":["alloc","collections","linked_list","IterMut"],"kind":"struct"},"6:4145:8223":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Ehdr"],"kind":"struct"},"12:784:4704":{"crate_id":12,"path":["hashbrown","map","IntoKeys"],"kind":"struct"},"5:772:201":{"crate_id":5,"path":["alloc","borrow","ToOwned"],"kind":"trait"},"17:13377:7314":{"crate_id":17,"path":["object","pe","ImageRelocation"],"kind":"struct"},"24:6404:3144":{"crate_id":24,"path":["syn","path","ParenthesizedGenericArguments"],"kind":"struct"},"1:8790:4796":{"crate_id":1,"path":["std","sync","poison","TryLockError"],"kind":"enum"},"9:41:5655":{"crate_id":9,"path":["miniz_oxide","deflate","buffer","LocalBuf"],"kind":"struct"},"1:610:1351":{"crate_id":1,"path":["std","thread"],"kind":"module"},"16:5927:5898":{"crate_id":16,"path":["gimli","read","cfi","CallFrameInstructionIter"],"kind":"struct"},"1:2852:162":{"crate_id":1,"path":["std","ffi","os_str","OsString"],"kind":"struct"},"24:2963:3239":{"crate_id":24,"path":["syn","parse","ParseBuffer"],"kind":"struct"},"2:48956:5421":{"crate_id":2,"path":["core","str","error","Utf8Error"],"kind":"struct"},"24:6114:1921":{"crate_id":24,"path":["syn","derive","DataEnum"],"kind":"struct"},"16:3488:6098":{"crate_id":16,"path":["gimli","common","DwoId"],"kind":"struct"},"16:5561:5886":{"crate_id":16,"path":["gimli","read","cfi","Augmentation"],"kind":"struct"},"24:5802:3100":{"crate_id":24,"path":["syn","expr","ExprReference"],"kind":"struct"},"24:932:62991":{"crate_id":24,"path":["syn","generics","Lifetimes"],"kind":"struct"},"24:176:4058":{"crate_id":24,"path":["syn","token","CustomToken"],"kind":"trait"},"2:52490:5167":{"crate_id":2,"path":["core","core_arch","simd","i16x32"],"kind":"struct"},"24:6040:3121":{"crate_id":24,"path":["syn","lit","LitChar"],"kind":"struct"},"16:4890:7534":{"crate_id":16,"path":["gimli","constants","DwLns"],"kind":"struct"},"2:49588:5044":{"crate_id":2,"path":["core","str","pattern","StrSearcherImpl"],"kind":"enum"},"1:10862:4651":{"crate_id":1,"path":["std","io","util","Sink"],"kind":"struct"},"16:4614:7525":{"crate_id":16,"path":["gimli","constants","DwLang"],"kind":"struct"},"17:9729:62853":{"crate_id":17,"path":["object","read","any","SectionIteratorInternal"],"kind":"enum"},"6:6185:8687":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ipc_perm"],"kind":"struct"},"6:4013:8158":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_absinfo"],"kind":"struct"},"24:4177:3358":{"crate_id":24,"path":["syn","token","Unsized"],"kind":"struct"},"24:6366:2074":{"crate_id":24,"path":["syn","path","PathArguments"],"kind":"enum"},"24:3817:2420":{"crate_id":24,"path":["syn","token","Match"],"kind":"struct"},"24:5416:1781":{"crate_id":24,"path":["syn","attr","NestedMeta","Meta"],"kind":"foreign_type"},"2:3314:4826":{"crate_id":2,"path":["core","ops","bit","BitXor"],"kind":"trait"},"2:51876:5166":{"crate_id":2,"path":["core","core_arch","simd","i16x16"],"kind":"struct"},"17:13119:7256":{"crate_id":17,"path":["object","pe","ImageOptionalHeader64"],"kind":"struct"},"6:4511:8345":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_txtime"],"kind":"struct"},"16:6577:5914":{"crate_id":16,"path":["gimli","read","loclists","DebugLoc"],"kind":"struct"},"16:6166:5902":{"crate_id":16,"path":["gimli","read","aranges","ArangeHeaderIter"],"kind":"struct"},"1:14282:9144":{"crate_id":1,"path":["std","sys","unix","fs","FilePermissions"],"kind":"struct"},"2:51224:5169":{"crate_id":2,"path":["core","core_arch","simd","i32x4"],"kind":"struct"},"2:4557:5112":{"crate_id":2,"path":["core","asserting","TryCaptureWithDebug"],"kind":"struct"},"1:6997:3608":{"crate_id":1,"path":["std","panic","always_abort"],"kind":"function"},"7:0:1435":{"crate_id":7,"path":["unwind"],"kind":"module"},"2:52601:5187":{"crate_id":2,"path":["core","core_arch","simd","u16x32"],"kind":"struct"},"1:1190:12097":{"crate_id":1,"path":["std","backtrace","LazilyResolvedCapture"],"kind":"struct"},"6:5255:8430":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","mallinfo2"],"kind":"struct"},"22:913:1773":{"crate_id":22,"path":["proc_macro2","Span"],"kind":"struct"},"2:10025:3278":{"crate_id":2,"path":["core","fmt","Octal"],"kind":"trait"},"9:900:7816":{"crate_id":9,"path":["miniz_oxide","inflate","core","LocalVars"],"kind":"struct"},"5:6934:6508":{"crate_id":5,"path":["alloc","vec","drain","drop","DropGuard"],"kind":"struct"},"2:52140:5179":{"crate_id":2,"path":["core","core_arch","simd","i8x64"],"kind":"struct"},"24:4815:3373":{"crate_id":24,"path":["syn","token","Comma"],"kind":"struct"},"2:47402:83":{"crate_id":2,"path":["core","sync","atomic","AtomicU16"],"kind":"struct"},"17:12118:6977":{"crate_id":17,"path":["object","macho","Section64"],"kind":"struct"},"16:4955:7536":{"crate_id":16,"path":["gimli","constants","DwLnct"],"kind":"struct"},"24:3196:119":{"crate_id":24,"path":["syn","error","Error"],"kind":"struct"},"2:4600:4371":{"crate_id":2,"path":["core","async_iter","async_iter","AsyncIterator"],"kind":"trait"},"2:3331:4974":{"crate_id":2,"path":["core","ops","bit","BitAndAssign"],"kind":"trait"},"24:3799:2094":{"crate_id":24,"path":["syn","token","Macro"],"kind":"struct"},"17:12712:7089":{"crate_id":17,"path":["object","macho","DataInCodeEntry"],"kind":"struct"},"17:13356:7310":{"crate_id":17,"path":["object","pe","ImageAuxSymbolSection"],"kind":"struct"},"5:1179:62321":{"crate_id":5,"path":["alloc","collections","btree","append","MergeIter"],"kind":"struct"},"17:10611:47662":{"crate_id":17,"path":["object","read","macho","file","MachOComdat"],"kind":"struct"},"17:11030:119":{"crate_id":17,"path":["object","read","Error"],"kind":"struct"},"1:10659:4635":{"crate_id":1,"path":["std","io","buffered","IntoInnerError"],"kind":"struct"},"1:1524:4709":{"crate_id":1,"path":["std","collections","hash","map","RawVacantEntryMut"],"kind":"struct"},"16:6569:6119":{"crate_id":16,"path":["gimli","read","lists","ListsHeader"],"kind":"struct"},"24:6408:2143":{"crate_id":24,"path":["syn","path","QSelf"],"kind":"struct"},"18:782:6676":{"crate_id":18,"path":["memchr","memmem","x86","sse","Forward"],"kind":"struct"},"5:1219:5563":{"crate_id":5,"path":["alloc","collections","btree","dedup_sorted_iter","DedupSortedIter"],"kind":"struct"},"24:4895:3378":{"crate_id":24,"path":["syn","token","Dot2"],"kind":"struct"},"24:6350:3143":{"crate_id":24,"path":["syn","ty","Variadic"],"kind":"struct"},"2:51420:8857":{"crate_id":2,"path":["core","core_arch","simd","m16x8"],"kind":"struct"},"2:22281:61360":{"crate_id":2,"path":["core","core_simd","swizzle","rotate_lanes_left","Rotate"],"kind":"struct"},"5:7288:4502":{"crate_id":5,"path":["alloc","vec","set_len_on_drop","SetLenOnDrop"],"kind":"struct"},"24:4249:3362":{"crate_id":24,"path":["syn","token","While"],"kind":"struct"},"16:7226:5929":{"crate_id":16,"path":["gimli","read","pubtypes","PubTypesEntryIter"],"kind":"struct"},"24:3120:9417":{"crate_id":24,"path":["syn","print","TokensOrDefault"],"kind":"struct"},"24:3979:3353":{"crate_id":24,"path":["syn","token","SelfType"],"kind":"struct"},"2:4:948":{"crate_id":2,"path":["core","panic"],"kind":"macro"},"2:11094:5303":{"crate_id":2,"path":["core","slice","iter","SplitN"],"kind":"struct"},"1:6331:4684":{"crate_id":1,"path":["std","os","unix","process","CommandExt"],"kind":"trait"},"24:5211:3400":{"crate_id":24,"path":["syn","token","ShlEq"],"kind":"struct"},"5:1080:6508":{"crate_id":5,"path":["alloc","collections","binary_heap","drop","DropGuard"],"kind":"struct"},"17:13488:7342":{"crate_id":17,"path":["object","pe","ImageBoundImportDescriptor"],"kind":"struct"},"5:7866:5527":{"crate_id":5,"path":["alloc","collections","btree","set","DifferenceInner"],"kind":"enum"},"24:2730:4584":{"crate_id":24,"path":["syn","sealed","lookahead","Sealed"],"kind":"trait"},"2:49972:150":{"crate_id":2,"path":["core","alloc","layout","Layout"],"kind":"struct"},"2:22728:4584":{"crate_id":2,"path":["core","core_simd","masks","sealed","Sealed"],"kind":"trait"},"16:6964:3617":{"crate_id":16,"path":["gimli","read","op","Location"],"kind":"enum"},"14:250:7715":{"crate_id":14,"path":["rustc_demangle","SizeLimitExhausted"],"kind":"struct"},"2:49741:5354":{"crate_id":2,"path":["core","str","IsAsciiWhitespace"],"kind":"struct"},"2:10239:138":{"crate_id":2,"path":["core","hash","Hasher"],"kind":"trait"},"17:13348:7307":{"crate_id":17,"path":["object","pe","ImageAuxSymbolWeak"],"kind":"struct"},"1:11786:4808":{"crate_id":1,"path":["std","process","ExitCode"],"kind":"struct"},"6:5459:8522":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_data"],"kind":"union"},"2:12523:5297":{"crate_id":2,"path":["core","str","iter","SplitInclusive"],"kind":"struct"},"1:3116:4618":{"crate_id":1,"path":["std","fs","read_to_string"],"kind":"function"},"2:8103:128":{"crate_id":2,"path":["core","iter","traits","collect","FromIterator"],"kind":"trait"},"20:424:3805":{"crate_id":20,"path":["quote","__private","RepInterp"],"kind":"struct"},"1:5856:4947":{"crate_id":1,"path":["std","os","unix","net","ancillary","ScmCredentials"],"kind":"struct"},"6:4494:8337":{"crate_id":6,"path":["libc","unix","linux_like","linux","af_alg_iv"],"kind":"struct"},"21:3520:2421":{"crate_id":21,"path":["proc_macro","Literal"],"kind":"struct"},"1:1497:4705":{"crate_id":1,"path":["std","collections","hash","map","IntoValues"],"kind":"struct"},"2:9698:5283":{"crate_id":2,"path":["core","fmt","builders","PadAdapter"],"kind":"struct"},"16:6072:5806":{"crate_id":16,"path":["gimli","read","reader","ReaderOffsetId"],"kind":"struct"},"17:10224:47527":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdatSectionIterator"],"kind":"struct"},"1:10456:12094":{"crate_id":1,"path":["std","backtrace","RawFrame"],"kind":"enum"},"12:181:5743":{"crate_id":12,"path":["hashbrown","raw","RawTable"],"kind":"struct"},"1:6589:8612":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt","st_atime"],"kind":"foreign_type"},"12:1688:5749":{"crate_id":12,"path":["hashbrown","rustc_entry","RustcVacantEntry"],"kind":"struct"},"1:1493:4704":{"crate_id":1,"path":["std","collections","hash","map","IntoKeys"],"kind":"struct"},"17:12262:6997":{"crate_id":17,"path":["object","macho","DylinkerCommand"],"kind":"struct"},"1:12471:120":{"crate_id":1,"path":["std","sys","unix","fs","File"],"kind":"struct"},"14:244:9085":{"crate_id":14,"path":["rustc_demangle","TryDemangleError"],"kind":"struct"},"17:13609:7375":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation64V2"],"kind":"struct"},"1:11030:1773":{"crate_id":1,"path":["std","net","ip","fmt","Span"],"kind":"struct"},"17:11678:6884":{"crate_id":17,"path":["object","elf","ProgramHeader32"],"kind":"struct"},"2:46533:9118":{"crate_id":2,"path":["core","iter","sources","from_fn","FromFn"],"kind":"struct"},"24:5850:1732":{"crate_id":24,"path":["syn","expr","Member"],"kind":"enum"},"17:11714:6894":{"crate_id":17,"path":["object","elf","Dyn32"],"kind":"struct"},"17:9088:47452":{"crate_id":17,"path":["object","common","RelocationKind"],"kind":"enum"},"6:1760:8061":{"crate_id":6,"path":["libc","unix","linux_like","sigevent"],"kind":"struct"},"12:2009:3195":{"crate_id":12,"path":["hashbrown","set","IntoIter"],"kind":"struct"},"12:1855:137":{"crate_id":12,"path":["hashbrown","set","HashSet"],"kind":"struct"},"1:7321:167":{"crate_id":1,"path":["std","path","Path"],"kind":"struct"},"1:2162:4498":{"crate_id":1,"path":["std","collections","hash","set","Drain"],"kind":"struct"},"16:7158:5923":{"crate_id":16,"path":["gimli","read","op","Evaluation"],"kind":"struct"},"16:3392:6102":{"crate_id":16,"path":["gimli","common","UnitSectionOffset"],"kind":"enum"},"24:3421:3333":{"crate_id":24,"path":["syn","token","Await"],"kind":"struct"},"2:8176:3310":{"crate_id":2,"path":["core","iter","traits","exact_size","ExactSizeIterator"],"kind":"trait"},"17:12195:6987":{"crate_id":17,"path":["object","macho","SubFrameworkCommand"],"kind":"struct"},"1:9531:4874":{"crate_id":1,"path":["std","sys_common","remutex","ReentrantMutexGuard"],"kind":"struct"},"16:5273:6079":{"crate_id":16,"path":["gimli","constants","DwEhPe"],"kind":"struct"},"6:4101:8201":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_effect"],"kind":"struct"},"2:7561:5146":{"crate_id":2,"path":["core","iter","adapters","GenericShunt"],"kind":"struct"},"16:6491:5911":{"crate_id":16,"path":["gimli","read","line","CompleteLineProgram"],"kind":"struct"},"5:1558:4701":{"crate_id":5,"path":["alloc","collections","btree","map","Keys"],"kind":"struct"},"17:9133:47453":{"crate_id":17,"path":["object","common","RelocationEncoding"],"kind":"enum"},"2:23794:39843":{"crate_id":2,"path":["core","num","fmt","Part"],"kind":"enum"},"2:45859:9106":{"crate_id":2,"path":["core","async_iter","from_iter","FromIter"],"kind":"struct"},"24:6334:3140":{"crate_id":24,"path":["syn","ty","TypeSlice"],"kind":"struct"},"24:5723:3082":{"crate_id":24,"path":["syn","expr","ExprBreak"],"kind":"struct"},"2:12807:5035":{"crate_id":2,"path":["core","str","pattern","MultiCharEqPattern"],"kind":"struct"},"21:1215:3298":{"crate_id":21,"path":["proc_macro","bridge","client","SourceFile"],"kind":"struct"},"2:45374:4471":{"crate_id":2,"path":["core","ops","control_flow","ControlFlow"],"kind":"enum"},"12:0:2909":{"crate_id":12,"path":["hashbrown"],"kind":"module"},"6:5436:8516":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","sifields_sigchld"],"kind":"struct"},"24:454:62988":{"crate_id":24,"path":["syn","bigint","BigInt"],"kind":"struct"},"24:6044:3122":{"crate_id":24,"path":["syn","lit","LitFloat"],"kind":"struct"},"2:52680:5171":{"crate_id":2,"path":["core","core_arch","simd","i32x16"],"kind":"struct"},"5:8147:4496":{"crate_id":5,"path":["alloc","vec","drain_filter","DrainFilter"],"kind":"struct"},"17:11378:6188":{"crate_id":17,"path":["object","read","CompressedData"],"kind":"struct"},"6:6100:8632":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_xmmreg"],"kind":"struct"},"6:6852:8718":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_mutexattr_t"],"kind":"struct"},"17:10160:6769":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbolTable"],"kind":"struct"},"2:3255:4988":{"crate_id":2,"path":["core","ops","arith","Mul"],"kind":"trait"},"17:11726:6897":{"crate_id":17,"path":["object","elf","Dyn64"],"kind":"struct"},"16:6691:5917":{"crate_id":16,"path":["gimli","read","loclists","LocationListEntry"],"kind":"struct"},"5:2075:6510":{"crate_id":5,"path":["alloc","collections","btree","mem","replace","PanicGuard"],"kind":"struct"},"24:5396:1783":{"crate_id":24,"path":["syn","attr","Meta","NameValue"],"kind":"foreign_type"},"17:10801:47635":{"crate_id":17,"path":["object","read","macho","segment","MachOSegment"],"kind":"struct"},"24:2865:6303":{"crate_id":24,"path":["syn","parse","discouraged","Speculative"],"kind":"trait"},"15:269:5761":{"crate_id":15,"path":["addr2line","RangeAttributes"],"kind":"struct"},"1:10462:4715":{"crate_id":1,"path":["std","collections","hash","map","RandomState"],"kind":"struct"},"24:6038:3119":{"crate_id":24,"path":["syn","lit","LitByte"],"kind":"struct"},"1:13143:4894":{"crate_id":1,"path":["std","sys","unix","net","Socket"],"kind":"struct"},"1:10871:4620":{"crate_id":1,"path":["std","io","IoSlice"],"kind":"struct"},"24:3547:108":{"crate_id":24,"path":["syn","token","Default"],"kind":"struct"},"22:0:1565":{"crate_id":22,"path":["proc_macro2"],"kind":"module"},"17:10211:47523":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdat"],"kind":"struct"},"21:3454:1774":{"crate_id":21,"path":["proc_macro","TokenTree"],"kind":"enum"},"19:0:963":{"crate_id":19,"path":["panic_unwind"],"kind":"module"},"16:7884:5843":{"crate_id":16,"path":["gimli","read","unit","DebugTypesUnitHeadersIter"],"kind":"struct"},"2:2777:3221":{"crate_id":2,"path":["core","borrow","BorrowMut"],"kind":"trait"},"1:10169:1790":{"crate_id":1,"path":["std","backtrace_rs","symbolize","Symbol"],"kind":"struct"},"1:15676:2940":{"crate_id":1,"path":["std","f32"],"kind":"primitive"},"2:47528:78":{"crate_id":2,"path":["core","sync","atomic","AtomicI64"],"kind":"struct"},"17:11254:6233":{"crate_id":17,"path":["object","read","Export"],"kind":"struct"},"1:11994:4695":{"crate_id":1,"path":["std","time","Instant"],"kind":"struct"},"17:13540:7359":{"crate_id":17,"path":["object","pe","ImageResourceDirectoryString"],"kind":"struct"},"16:2754:6078":{"crate_id":16,"path":["gimli","common","Encoding"],"kind":"struct"},"17:13163:7261":{"crate_id":17,"path":["object","pe","ImageNtHeaders32"],"kind":"struct"},"17:4008:47637":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbolIterator"],"kind":"struct"},"17:9332:6209":{"crate_id":17,"path":["object","endian","U32Bytes"],"kind":"struct"},"2:50627:5195":{"crate_id":2,"path":["core","core_arch","simd","u8x4"],"kind":"struct"},"24:3403:3332":{"crate_id":24,"path":["syn","token","Auto"],"kind":"struct"},"2:24448:5390":{"crate_id":2,"path":["core","num","nonzero","NonZeroI128"],"kind":"struct"},"2:11136:5306":{"crate_id":2,"path":["core","slice","iter","RSplitNMut"],"kind":"struct"},"20:185:3647":{"crate_id":20,"path":["quote","__private","HasIterator"],"kind":"struct"},"2:8577:4372":{"crate_id":2,"path":["core","iter","traits","marker","FusedIterator"],"kind":"trait"},"2:50785:5188":{"crate_id":2,"path":["core","core_arch","simd","u32x2"],"kind":"struct"},"6:5386:8495":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","seminfo"],"kind":"struct"},"1:9378:4908":{"crate_id":1,"path":["std","sys_common","condvar","Condvar"],"kind":"struct"},"2:12761:5032":{"crate_id":2,"path":["core","str","pattern","DoubleEndedSearcher"],"kind":"trait"},"5:1534:3200":{"crate_id":5,"path":["alloc","collections","btree","map","IterMut"],"kind":"struct"},"17:11519:6860":{"crate_id":17,"path":["object","elf","SectionHeader64"],"kind":"struct"},"1:5681:4571":{"crate_id":1,"path":["std","os","unix","fs","DirEntryExt"],"kind":"trait"},"6:1602:7966":{"crate_id":6,"path":["libc","unix","linux_like","tm"],"kind":"struct"},"5:5469:6508":{"crate_id":5,"path":["alloc","slice","hack","to_vec","DropGuard"],"kind":"struct"},"5:421:1756":{"crate_id":5,"path":["alloc","boxed","Box"],"kind":"struct"},"21:429:62929":{"crate_id":21,"path":["proc_macro","bridge","scoped_cell","RefMutL"],"kind":"struct"},"5:6367:5522":{"crate_id":5,"path":["alloc","sync","ArcInner"],"kind":"struct"},"16:7761:5933":{"crate_id":16,"path":["gimli","read","unit","AttrsIter"],"kind":"struct"},"17:12537:7057":{"crate_id":17,"path":["object","macho","EncryptionInfoCommand32"],"kind":"struct"},"2:31955:60182":{"crate_id":2,"path":["core","mem","valid_align","ValidAlignEnum16"],"kind":"enum"},"2:4762:3262":{"crate_id":2,"path":["core","cell","BorrowMutError"],"kind":"struct"},"16:6591:5915":{"crate_id":16,"path":["gimli","read","loclists","DebugLocLists"],"kind":"struct"},"1:1651:4714":{"crate_id":1,"path":["std","collections","hash","map","OccupiedError"],"kind":"struct"},"24:2144:4584":{"crate_id":24,"path":["syn","ext","private","Sealed"],"kind":"trait"},"24:6297:3131":{"crate_id":24,"path":["syn","ty","TypeBareFn"],"kind":"struct"},"6:4183:8225":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Sym"],"kind":"struct"},"2:12670:3217":{"crate_id":2,"path":["core","str","traits","FromStr"],"kind":"trait"},"24:5182:3398":{"crate_id":24,"path":["syn","token","Semi"],"kind":"struct"},"1:10441:12091":{"crate_id":1,"path":["std","backtrace","BacktraceStatus"],"kind":"enum"},"5:7964:3232":{"crate_id":5,"path":["alloc","collections","TryReserveErrorKind"],"kind":"enum"},"6:5379:8494":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","Elf32_Chdr"],"kind":"struct"},"6:4410:8302":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlmsghdr"],"kind":"struct"},"1:10390:4124":{"crate_id":1,"path":["std","thread","Builder"],"kind":"struct"},"17:9649:47455":{"crate_id":17,"path":["object","read","any","SegmentIterator"],"kind":"struct"},"17:9296:6759":{"crate_id":17,"path":["object","endian","U16Bytes"],"kind":"struct"},"2:55735:5114":{"crate_id":2,"path":["core","core_simd","fmt","fmt","Wrapper"],"kind":"struct"},"2:49013:4627":{"crate_id":2,"path":["core","str","iter","Split"],"kind":"struct"},"5:3603:5578":{"crate_id":5,"path":["alloc","collections","linked_list","CursorMut"],"kind":"struct"},"16:7024:6133":{"crate_id":16,"path":["gimli","read","op","EvaluationState"],"kind":"enum"},"2:51557:5198":{"crate_id":2,"path":["core","core_arch","simd","u8x32"],"kind":"struct"},"1:15677:2941":{"crate_id":1,"path":["std","f64"],"kind":"primitive"},"2:10229:134":{"crate_id":2,"path":["core","hash","Hash"],"kind":"trait"},"2:49235:5337":{"crate_id":2,"path":["core","str","iter","RMatches"],"kind":"struct"},"17:9592:120":{"crate_id":17,"path":["object","read","any","File"],"kind":"struct"},"2:49081:5330":{"crate_id":2,"path":["core","str","iter","RSplitTerminator"],"kind":"struct"},"1:11391:4777":{"crate_id":1,"path":["std","path","Components"],"kind":"struct"},"2:48832:5310":{"crate_id":2,"path":["core","slice","iter","ChunksExact"],"kind":"struct"},"5:3130:4823":{"crate_id":5,"path":["alloc","collections","btree","set","Difference"],"kind":"struct"},"1:1041:4138":{"crate_id":1,"path":["std","thread","JoinHandle"],"kind":"struct"},"12:2005:3196":{"crate_id":12,"path":["hashbrown","set","Iter"],"kind":"struct"},"16:5433:5880":{"crate_id":16,"path":["gimli","read","cfi","EhFrame"],"kind":"struct"},"17:13331:7302":{"crate_id":17,"path":["object","pe","ImageAuxSymbolFunctionBeginEnd"],"kind":"struct"},"5:7814:62367":{"crate_id":5,"path":["alloc","collections","btree","merge_iter","Peeked"],"kind":"enum"},"2:49135:5304":{"crate_id":2,"path":["core","str","iter","RSplitN"],"kind":"struct"},"22:845:1773":{"crate_id":22,"path":["proc_macro2","imp","Span"],"kind":"enum"},"21:1060:1567":{"crate_id":21,"path":["proc_macro","bridge","client","TokenStream"],"kind":"struct"},"17:10516:6219":{"crate_id":17,"path":["object","read","elf","version","VerneedIterator"],"kind":"struct"},"2:23824:9100":{"crate_id":2,"path":["core","num","fmt","Formatted"],"kind":"struct"},"24:5980:2391":{"crate_id":24,"path":["syn","generics","PredicateType"],"kind":"struct"},"2:52347:5199":{"crate_id":2,"path":["core","core_arch","simd","u8x64"],"kind":"struct"},"16:4995:7537":{"crate_id":16,"path":["gimli","constants","DwMacro"],"kind":"struct"},"2:47812:2192":{"crate_id":2,"path":["core","fmt","num","Binary"],"kind":"struct"},"24:3073:3247":{"crate_id":24,"path":["syn","parse","Parser"],"kind":"trait"},"17:607:47446":{"crate_id":17,"path":["object","read","any","Comdat"],"kind":"struct"},"1:11186:4688":{"crate_id":1,"path":["std","os","linux","process","PidFd"],"kind":"struct"},"6:632:7919":{"crate_id":6,"path":["libc","unix","protoent"],"kind":"struct"},"16:2968:6088":{"crate_id":16,"path":["gimli","common","DebugLineStrOffset"],"kind":"struct"},"2:48971:5067":{"crate_id":2,"path":["core","str","error","ParseBoolError"],"kind":"struct"},"5:909:91":{"crate_id":5,"path":["alloc","collections","binary_heap","BinaryHeap"],"kind":"struct"},"17:8849:6231":{"crate_id":17,"path":["object","common","Architecture"],"kind":"enum"},"24:5727:3083":{"crate_id":24,"path":["syn","expr","ExprCall"],"kind":"struct"},"2:49312:5342":{"crate_id":2,"path":["core","str","iter","EscapeDebug"],"kind":"struct"},"2:3485:3205":{"crate_id":2,"path":["core","ops","index","IndexMut"],"kind":"trait"},"1:7495:4799":{"crate_id":1,"path":["std","process","Child"],"kind":"struct"},"24:5489:2141":{"crate_id":24,"path":["syn","expr","Expr"],"kind":"enum"},"16:5855:5897":{"crate_id":16,"path":["gimli","read","cfi","CallFrameInstruction"],"kind":"enum"},"5:8080:5497":{"crate_id":5,"path":["alloc","string","FromUtf8Error"],"kind":"struct"},"1:6757:4564":{"crate_id":1,"path":["std","os","fd","raw","IntoRawFd"],"kind":"trait"},"16:6176:5903":{"crate_id":16,"path":["gimli","read","aranges","ArangeHeader"],"kind":"struct"},"1:3261:4853":{"crate_id":1,"path":["std","fs","read_dir"],"kind":"function"},"5:6331:68":{"crate_id":5,"path":["alloc","sync","Arc"],"kind":"struct"},"2:22268:3998":{"crate_id":2,"path":["core","core_simd","swizzle","reverse","Reverse"],"kind":"struct"},"16:5960:6074":{"crate_id":16,"path":["gimli","read","cfi","PointerEncodingParameters"],"kind":"struct"},"1:10883:4622":{"crate_id":1,"path":["std","io","SeekFrom"],"kind":"enum"},"17:1236:47525":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbolIterator"],"kind":"struct"},"0:1257:1577":{"crate_id":0,"path":["serde_derive","Serialize"],"kind":"proc_derive"},"1:10855:4650":{"crate_id":1,"path":["std","io","util","Empty"],"kind":"struct"},"1:15691:2955":{"crate_id":1,"path":["std","fn"],"kind":"primitive"},"24:6206:3127":{"crate_id":24,"path":["syn","op","UnOp"],"kind":"enum"},"17:11434:6831":{"crate_id":17,"path":["object","elf","FileHeader32"],"kind":"struct"},"17:12659:7083":{"crate_id":17,"path":["object","macho","IdentCommand"],"kind":"struct"},"24:2978:3240":{"crate_id":24,"path":["syn","parse","StepCursor"],"kind":"struct"},"2:49445:5039":{"crate_id":2,"path":["core","str","pattern","CharArraySearcher"],"kind":"struct"},"16:3506:6097":{"crate_id":16,"path":["gimli","common","DwarfFileType"],"kind":"enum"},"18:790:6271":{"crate_id":18,"path":["memchr","memmem","FindIter"],"kind":"struct"},"17:13054:7219":{"crate_id":17,"path":["object","pe","ImageDataDirectory"],"kind":"struct"},"24:3093:3251":{"crate_id":24,"path":["syn","parse","Nothing"],"kind":"struct"},"2:3272:4994":{"crate_id":2,"path":["core","ops","arith","Neg"],"kind":"trait"},"6:5221:8406":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","cmsghdr"],"kind":"struct"},"1:15685:2949":{"crate_id":1,"path":["std","u32"],"kind":"primitive"},"2:48103:101":{"crate_id":2,"path":["core","fmt","rt","v1","Count"],"kind":"enum"},"17:11458:6845":{"crate_id":17,"path":["object","elf","FileHeader64"],"kind":"struct"},"17:12982:7160":{"crate_id":17,"path":["object","pe","ImageVxdHeader"],"kind":"struct"},"2:12178:5493":{"crate_id":2,"path":["core","slice","SlicePattern"],"kind":"trait"},"17:10814:6186":{"crate_id":17,"path":["object","read","macho","section","MachOSection"],"kind":"struct"},"1:13660:59490":{"crate_id":1,"path":["std","sys","unix","process","process_common","Argv"],"kind":"struct"},"12:2323:7763":{"crate_id":12,"path":["hashbrown","raw","TableLayout"],"kind":"struct"},"24:3583:3337":{"crate_id":24,"path":["syn","token","Dyn"],"kind":"struct"},"24:956:62993":{"crate_id":24,"path":["syn","generics","ConstParamsMut"],"kind":"struct"},"16:7216:5928":{"crate_id":16,"path":["gimli","read","pubtypes","DebugPubTypes"],"kind":"struct"},"6:6028:8619":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stat64"],"kind":"struct"},"1:11756:4806":{"crate_id":1,"path":["std","process","ExitStatus"],"kind":"struct"},"2:47318:86":{"crate_id":2,"path":["core","sync","atomic","AtomicU8"],"kind":"struct"},"1:10971:4673":{"crate_id":1,"path":["std","net","ip","IpAddr"],"kind":"enum"},"16:7279:6135":{"crate_id":16,"path":["gimli","read","rnglists","RangeListsFormat"],"kind":"enum"},"1:11865:3195":{"crate_id":1,"path":["std","sync","mpsc","IntoIter"],"kind":"struct"},"17:10253:6154":{"crate_id":17,"path":["object","read","elf","segment","ElfSegmentIterator"],"kind":"struct"},"24:3763:3345":{"crate_id":24,"path":["syn","token","Let"],"kind":"struct"},"24:1278:6318":{"crate_id":24,"path":["syn","lit","LitFloatRepr"],"kind":"struct"},"24:5448:3068":{"crate_id":24,"path":["syn","data","FieldsNamed"],"kind":"struct"},"2:9976:126":{"crate_id":2,"path":["core","fmt","Formatter"],"kind":"struct"},"6:5420:8512":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_seccomp"],"kind":"struct"},"2:52743:5191":{"crate_id":2,"path":["core","core_arch","simd","u32x16"],"kind":"struct"},"24:3601:3338":{"crate_id":24,"path":["syn","token","Else"],"kind":"struct"},"24:5798:3099":{"crate_id":24,"path":["syn","expr","ExprRange"],"kind":"struct"},"2:22533:4584":{"crate_id":2,"path":["core","core_simd","lane_count","sealed","Sealed"],"kind":"trait"},"18:754:62876":{"crate_id":18,"path":["memchr","memmem","twoway","SuffixOrdering"],"kind":"enum"},"16:7467:5837":{"crate_id":16,"path":["gimli","read","unit","DebugInfoUnitHeadersIter"],"kind":"struct"},"24:4699:3365":{"crate_id":24,"path":["syn","token","AndAnd"],"kind":"struct"},"24:6400:2091":{"crate_id":24,"path":["syn","path","Constraint"],"kind":"struct"},"1:14259:9136":{"crate_id":1,"path":["std","sys","unix","fs","FileAttr"],"kind":"struct"},"1:5623:4567":{"crate_id":1,"path":["std","os","unix","fs","PermissionsExt"],"kind":"trait"},"17:10656:6774":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandData"],"kind":"struct"},"1:14792:9145":{"crate_id":1,"path":["std","sys_common","process","CommandEnv"],"kind":"struct"},"16:3145:6100":{"crate_id":16,"path":["gimli","common","RangeListsOffset"],"kind":"struct"},"2:12488:5335":{"crate_id":2,"path":["core","str","iter","MatchesInternal"],"kind":"struct"},"5:5518:5502":{"crate_id":5,"path":["alloc","slice","Join"],"kind":"trait"},"12:556:135":{"crate_id":12,"path":["hashbrown","map","HashMap"],"kind":"struct"},"6:3868:8068":{"crate_id":6,"path":["libc","unix","linux_like","linux","glob_t"],"kind":"struct"},"2:3423:122":{"crate_id":2,"path":["core","ops","function","Fn"],"kind":"trait"},"6:3997:8153":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_event"],"kind":"struct"},"2:23702:5212":{"crate_id":2,"path":["core","num","dec2flt","ParseFloatError"],"kind":"struct"},"2:49537:5042":{"crate_id":2,"path":["core","str","pattern","CharPredicateSearcher"],"kind":"struct"},"2:49622:9248":{"crate_id":2,"path":["core","str","lossy","Utf8LossyChunk"],"kind":"struct"},"2:4834:3268":{"crate_id":2,"path":["core","cell","Ref"],"kind":"struct"},"17:13221:7276":{"crate_id":17,"path":["object","pe","AnonObjectHeaderBigobj"],"kind":"struct"},"6:5274:8432":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_mmap_req"],"kind":"struct"},"17:13620:7376":{"crate_id":17,"path":["object","pe","ImagePrologueDynamicRelocationHeader"],"kind":"struct"},"17:11962:6947":{"crate_id":17,"path":["object","macho","FatHeader"],"kind":"struct"},"24:5018:3386":{"crate_id":24,"path":["syn","token","MulEq"],"kind":"struct"},"17:9799:47458":{"crate_id":17,"path":["object","read","any","ComdatSectionIterator"],"kind":"struct"},"1:11257:4764":{"crate_id":1,"path":["std","path","Prefix"],"kind":"enum"},"6:4095:8198":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_rumble_effect"],"kind":"struct"},"1:14694:4806":{"crate_id":1,"path":["std","sys","unix","process","process_inner","ExitStatus"],"kind":"struct"},"16:4762:7530":{"crate_id":16,"path":["gimli","constants","DwOrd"],"kind":"struct"},"2:48357:9122":{"crate_id":2,"path":["core","hash","sip","SipHasher24"],"kind":"struct"},"2:53005:8911":{"crate_id":2,"path":["core","core_arch","x86","__m256d"],"kind":"struct"},"24:4832:3374":{"crate_id":24,"path":["syn","token","Div"],"kind":"struct"},"17:12507:7052":{"crate_id":17,"path":["object","macho","LinkeditDataCommand"],"kind":"struct"},"24:4015:2464":{"crate_id":24,"path":["syn","token","Static"],"kind":"struct"},"24:948:62992":{"crate_id":24,"path":["syn","generics","ConstParams"],"kind":"struct"},"1:13644:4803":{"crate_id":1,"path":["std","sys","unix","process","process_common","Command"],"kind":"struct"},"5:4224:5551":{"crate_id":5,"path":["alloc","collections","vec_deque","pair_slices","PairSlices"],"kind":"struct"},"2:49729:5353":{"crate_id":2,"path":["core","str","CharEscapeUnicode"],"kind":"struct"},"1:11212:4686":{"crate_id":1,"path":["std","os","fd","owned","BorrowedFd"],"kind":"struct"},"6:5197:8397":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","glob64_t"],"kind":"struct"},"2:45897:5248":{"crate_id":2,"path":["core","char","convert","CharTryFromError"],"kind":"struct"},"5:7121:6508":{"crate_id":5,"path":["alloc","vec","into_iter","drop","DropGuard"],"kind":"struct"},"3:0:403":{"crate_id":3,"path":["compiler_builtins"],"kind":"module"},"5:1604:176":{"crate_id":5,"path":["alloc","collections","btree","map","Range"],"kind":"struct"},"1:15678:2942":{"crate_id":1,"path":["std","i8"],"kind":"primitive"},"2:6596:5090":{"crate_id":2,"path":["core","iter","adapters","intersperse","IntersperseWith"],"kind":"struct"},"20:299:1999":{"crate_id":20,"path":["quote","__private","push_lifetime_spanned","Lifetime"],"kind":"struct"},"6:1690:8033":{"crate_id":6,"path":["libc","unix","linux_like","arpreq"],"kind":"struct"},"1:9430:6550":{"crate_id":1,"path":["std","sys_common","mutex","StaticMutexGuard"],"kind":"struct"},"2:13746:4377":{"crate_id":2,"path":["core","task","wake","Context"],"kind":"struct"},"24:5778:3095":{"crate_id":24,"path":["syn","expr","ExprMacro"],"kind":"struct"},"24:3005:2695":{"crate_id":24,"path":["syn","parse","Unexpected"],"kind":"enum"},"17:10962:47717":{"crate_id":17,"path":["object","read","pe","section","PeSegmentIterator"],"kind":"struct"},"6:1700:8039":{"crate_id":6,"path":["libc","unix","linux_like","arpreq_old"],"kind":"struct"},"20:18:3052":{"crate_id":20,"path":["quote","ext","TokenStreamExt"],"kind":"trait"},"17:11100:6237":{"crate_id":17,"path":["object","read","SymbolIndex"],"kind":"struct"},"2:51247:5172":{"crate_id":2,"path":["core","core_arch","simd","i64x2"],"kind":"struct"},"1:2456:6330":{"crate_id":1,"path":["std","env","Args"],"kind":"struct"},"1:2155:3196":{"crate_id":1,"path":["std","collections","hash","set","Iter"],"kind":"struct"},"24:4907:3379":{"crate_id":24,"path":["syn","token","Dot3"],"kind":"struct"},"1:8787:4914":{"crate_id":1,"path":["std","sync","poison","PoisonError"],"kind":"struct"},"1:1438:3195":{"crate_id":1,"path":["std","collections","hash","map","IntoIter"],"kind":"struct"},"1:15668:2932":{"crate_id":1,"path":["std","never"],"kind":"primitive"},"2:47251:160":{"crate_id":2,"path":["core","sync","atomic","Ordering"],"kind":"enum"},"2:46037:95":{"crate_id":2,"path":["core","ffi","c_str","CStr"],"kind":"struct"},"24:4069:2186":{"crate_id":24,"path":["syn","token","Trait"],"kind":"struct"},"5:912:5532":{"crate_id":5,"path":["alloc","collections","binary_heap","PeekMut"],"kind":"struct"},"24:5810:3102":{"crate_id":24,"path":["syn","expr","ExprReturn"],"kind":"struct"},"1:6681:4689":{"crate_id":1,"path":["std","os","linux","process","ChildExt"],"kind":"trait"},"6:4341:8272":{"crate_id":6,"path":["libc","unix","linux_like","linux","regmatch_t"],"kind":"struct"},"16:6644:5916":{"crate_id":16,"path":["gimli","read","loclists","RawLocListEntry"],"kind":"enum"},"17:9689:62855":{"crate_id":17,"path":["object","read","any","SegmentInternal"],"kind":"enum"},"2:48189:71":{"crate_id":2,"path":["core","fmt","Arguments"],"kind":"struct"},"16:7571:5832":{"crate_id":16,"path":["gimli","read","unit","AttributeValue"],"kind":"enum"},"6:4478:8332":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_user_dev"],"kind":"struct"},"2:8151:112":{"crate_id":2,"path":["core","iter","traits","double_ended","DoubleEndedIterator"],"kind":"trait"},"1:8248:4136":{"crate_id":1,"path":["std","sync","mpsc","sync","Packet"],"kind":"struct"},"2:3409:3276":{"crate_id":2,"path":["core","ops","deref","DerefMut"],"kind":"trait"},"21:3034:4530":{"crate_id":21,"path":["proc_macro","bridge","Marked"],"kind":"struct"},"17:13884:7466":{"crate_id":17,"path":["object","pe","ImageDebugDirectory"],"kind":"struct"},"5:8014:5418":{"crate_id":5,"path":["alloc","ffi","c_str","FromBytesWithNulErrorKind"],"kind":"enum"},"6:1572:7947":{"crate_id":6,"path":["libc","unix","linux_like","addrinfo"],"kind":"struct"},"6:3918:8105":{"crate_id":6,"path":["libc","unix","linux_like","linux","signalfd_siginfo"],"kind":"struct"},"22:864:1709":{"crate_id":22,"path":["proc_macro2","imp","Ident"],"kind":"enum"},"12:1651:5747":{"crate_id":12,"path":["hashbrown","rustc_entry","RustcEntry"],"kind":"enum"},"24:5083:3391":{"crate_id":24,"path":["syn","token","Pound"],"kind":"struct"},"21:3434:3297":{"crate_id":21,"path":["proc_macro","LineColumn"],"kind":"struct"},"24:2442:3200":{"crate_id":24,"path":["syn","punctuated","IterMut"],"kind":"struct"},"21:3474:3211":{"crate_id":21,"path":["proc_macro","Delimiter"],"kind":"enum"},"16:4386:7519":{"crate_id":16,"path":["gimli","constants","DwLle"],"kind":"struct"},"1:1518:4708":{"crate_id":1,"path":["std","collections","hash","map","RawOccupiedEntryMut"],"kind":"struct"},"6:5241:8419":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","mallinfo"],"kind":"struct"},"6:6176:8684":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","mcontext_t"],"kind":"struct"},"2:2202:5142":{"crate_id":2,"path":["core","ptr","metadata","PtrComponents"],"kind":"struct"},"2:46321:5098":{"crate_id":2,"path":["core","iter","adapters","skip_while","SkipWhile"],"kind":"struct"},"9:996:5671":{"crate_id":9,"path":["miniz_oxide","MZStatus"],"kind":"enum"},"1:4161:4652":{"crate_id":1,"path":["std","io","readbuf","ReadBuf"],"kind":"struct"},"2:9038:3619":{"crate_id":2,"path":["core","panic","unwind_safe","AssertUnwindSafe"],"kind":"struct"},"2:46540:4198":{"crate_id":2,"path":["core","iter","sources","once","Once"],"kind":"struct"},"17:9440:6762":{"crate_id":17,"path":["object","endian","I32Bytes"],"kind":"struct"},"2:46311:5097":{"crate_id":2,"path":["core","iter","adapters","skip","Skip"],"kind":"struct"},"17:11809:6922":{"crate_id":17,"path":["object","elf","NoteHeader32"],"kind":"struct"},"17:13282:7291":{"crate_id":17,"path":["object","pe","ImageSymbolEx"],"kind":"struct"},"2:47819:3278":{"crate_id":2,"path":["core","fmt","num","Octal"],"kind":"struct"},"1:2565:119":{"crate_id":1,"path":["std","error","Error"],"kind":"trait"},"1:10922:2686":{"crate_id":1,"path":["std","io","Bytes"],"kind":"struct"},"18:739:62877":{"crate_id":18,"path":["memchr","memmem","twoway","Suffix"],"kind":"struct"},"24:2550:1952":{"crate_id":24,"path":["syn","parse_quote"],"kind":"macro"},"17:10179:6771":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbol"],"kind":"struct"},"6:5400:8506":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ptrace_peeksiginfo_args"],"kind":"struct"},"6:4401:8299":{"crate_id":6,"path":["libc","unix","linux_like","linux","seccomp_data"],"kind":"struct"},"2:10279:5075":{"crate_id":2,"path":["core","hash","BuildHasherDefault"],"kind":"struct"},"1:1501:4706":{"crate_id":1,"path":["std","collections","hash","map","RawEntryBuilderMut"],"kind":"struct"},"17:10028:47510":{"crate_id":17,"path":["object","read","archive","ArchiveFile"],"kind":"struct"},"16:6518:5912":{"crate_id":16,"path":["gimli","read","line","FileEntry"],"kind":"struct"},"1:4373:4642":{"crate_id":1,"path":["std","io","stdio","StderrLock"],"kind":"struct"},"17:12247:6994":{"crate_id":17,"path":["object","macho","PreboundDylibCommand"],"kind":"struct"},"16:4734:7529":{"crate_id":16,"path":["gimli","constants","DwInl"],"kind":"struct"},"2:49031:5300":{"crate_id":2,"path":["core","str","iter","RSplit"],"kind":"struct"},"17:10117:6255":{"crate_id":17,"path":["object","read","coff","section","CoffSectionIterator"],"kind":"struct"},"5:7882:5528":{"crate_id":5,"path":["alloc","collections","btree","set","IntersectionInner"],"kind":"enum"},"24:3529:3335":{"crate_id":24,"path":["syn","token","Crate"],"kind":"struct"},"2:46219:9114":{"crate_id":2,"path":["core","iter","adapters","flatten","FlattenCompat"],"kind":"struct"},"6:4112:8206":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_ff_upload"],"kind":"struct"},"2:3426:123":{"crate_id":2,"path":["core","ops","function","FnMut"],"kind":"trait"},"5:5568:6517":{"crate_id":5,"path":["alloc","slice","merge","MergeHole"],"kind":"struct"},"24:5129:3394":{"crate_id":24,"path":["syn","token","LArrow"],"kind":"struct"},"17:12051:6961":{"crate_id":17,"path":["object","macho","SegmentCommand32"],"kind":"struct"},"24:4803:3372":{"crate_id":24,"path":["syn","token","Colon2"],"kind":"struct"},"2:3633:203":{"crate_id":2,"path":["core","ops","try_trait","Try"],"kind":"trait"},"16:5384:5877":{"crate_id":16,"path":["gimli","read","cfi","EhFrameHdr"],"kind":"struct"},"17:11932:6938":{"crate_id":17,"path":["object","macho","DyldCacheMappingInfo"],"kind":"struct"},"17:9759:47457":{"crate_id":17,"path":["object","read","any","ComdatIterator"],"kind":"struct"},"1:5864:4949":{"crate_id":1,"path":["std","os","unix","net","ancillary","AncillaryData"],"kind":"enum"},"16:6554:5913":{"crate_id":16,"path":["gimli","read","line","FileEntryFormat"],"kind":"struct"},"18:694:6287":{"crate_id":18,"path":["memchr","memmem","rarebytes","RareNeedleBytes"],"kind":"struct"},"18:644:6284":{"crate_id":18,"path":["memchr","memmem","prefilter","PrefilterFn"],"kind":"struct"},"2:23778:39834":{"crate_id":2,"path":["core","num","flt2dec","Sign"],"kind":"enum"},"2:10019:103":{"crate_id":2,"path":["core","fmt","macros","Debug"],"kind":"proc_derive"},"21:1122:4548":{"crate_id":21,"path":["proc_macro","bridge","client","TokenStreamIter"],"kind":"struct"},"24:5794:1974":{"crate_id":24,"path":["syn","expr","ExprPath"],"kind":"struct"},"5:7951:3231":{"crate_id":5,"path":["alloc","collections","TryReserveError"],"kind":"struct"},"1:13289:13074":{"crate_id":1,"path":["std","sys","unix","os","SplitPaths"],"kind":"struct"},"6:599:7901":{"crate_id":6,"path":["libc","unix","linger"],"kind":"struct"},"1:3539:6533":{"crate_id":1,"path":["std","io","buffered","bufwriter","flush_buf","BufGuard"],"kind":"struct"},"17:13986:7490":{"crate_id":17,"path":["object","pe","ImportObjectHeader"],"kind":"struct"},"16:4823:7532":{"crate_id":16,"path":["gimli","constants","DwIdx"],"kind":"struct"},"5:2093:5530":{"crate_id":5,"path":["alloc","collections","btree","merge_iter","MergeIterInner"],"kind":"struct"},"2:31943:4218":{"crate_id":2,"path":["core","mem","maybe_uninit","MaybeUninit"],"kind":"union"},"6:1665:8014":{"crate_id":6,"path":["libc","unix","linux_like","ifaddrs"],"kind":"struct"},"5:1586:4704":{"crate_id":5,"path":["alloc","collections","btree","map","IntoKeys"],"kind":"struct"},"1:8738:4925":{"crate_id":1,"path":["std","sync","once","WaiterQueue"],"kind":"struct"},"16:6768:6126":{"crate_id":16,"path":["gimli","read","lookup","PubStuffParser"],"kind":"struct"},"2:12449:5331":{"crate_id":2,"path":["core","str","iter","SplitNInternal"],"kind":"struct"},"16:5314:6757":{"crate_id":16,"path":["gimli","endianity","LittleEndian"],"kind":"struct"},"5:7310:4503":{"crate_id":5,"path":["alloc","vec","in_place_drop","InPlaceDrop"],"kind":"struct"},"16:4506:7523":{"crate_id":16,"path":["gimli","constants","DwVis"],"kind":"struct"},"21:1376:1773":{"crate_id":21,"path":["proc_macro","bridge","client","Span"],"kind":"struct"},"2:22296:61360":{"crate_id":2,"path":["core","core_simd","swizzle","rotate_lanes_right","Rotate"],"kind":"struct"},"6:1622:7980":{"crate_id":6,"path":["libc","unix","linux_like","Dl_info"],"kind":"struct"},"24:5411:3067":{"crate_id":24,"path":["syn","attr","MetaNameValue"],"kind":"struct"},"2:3335:4976":{"crate_id":2,"path":["core","ops","bit","BitOrAssign"],"kind":"trait"},"9:27:5654":{"crate_id":9,"path":["miniz_oxide","deflate","buffer","HashBuffers"],"kind":"struct"},"6:1717:8046":{"crate_id":6,"path":["libc","unix","linux_like","mmsghdr"],"kind":"struct"},"2:49321:3293":{"crate_id":2,"path":["core","str","iter","EscapeDefault"],"kind":"struct"},"12:112:62828":{"crate_id":12,"path":["hashbrown","raw","bitmask","BitMaskIter"],"kind":"struct"},"6:4425:8309":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlattr"],"kind":"struct"},"5:6351:5512":{"crate_id":5,"path":["alloc","sync","Weak"],"kind":"struct"},"1:6684:4684":{"crate_id":1,"path":["std","os","linux","process","CommandExt"],"kind":"trait"},"16:5736:5892":{"crate_id":16,"path":["gimli","read","cfi","UnwindTable"],"kind":"struct"},"16:547:6069":{"crate_id":16,"path":["gimli","read","cfi","RegisterRuleMap"],"kind":"struct"},"17:10304:6205":{"crate_id":17,"path":["object","read","elf","section","ElfSectionIterator"],"kind":"struct"},"17:10468:6215":{"crate_id":17,"path":["object","read","elf","hash","HashTable"],"kind":"struct"},"1:11936:4743":{"crate_id":1,"path":["std","sync","mpsc","TrySendError"],"kind":"enum"},"12:1100:4711":{"crate_id":12,"path":["hashbrown","map","Entry"],"kind":"enum"},"1:6755:4560":{"crate_id":1,"path":["std","os","fd","raw","FromRawFd"],"kind":"trait"},"22:980:1709":{"crate_id":22,"path":["proc_macro2","Ident"],"kind":"struct"},"24:6034:1914":{"crate_id":24,"path":["syn","lit","LitStr"],"kind":"struct"},"1:11809:59516":{"crate_id":1,"path":["std","sync","mpsc","sync","Failure"],"kind":"enum"},"2:48814:5308":{"crate_id":2,"path":["core","slice","iter","Chunks"],"kind":"struct"},"2:48805:5307":{"crate_id":2,"path":["core","slice","iter","Windows"],"kind":"struct"},"17:9476:6763":{"crate_id":17,"path":["object","endian","I64Bytes"],"kind":"struct"},"12:1762:6506":{"crate_id":12,"path":["hashbrown","scopeguard","ScopeGuard"],"kind":"struct"},"17:10106:6254":{"crate_id":17,"path":["object","read","coff","section","CoffSegment"],"kind":"struct"},"23:0:3035":{"crate_id":23,"path":["unicode_ident"],"kind":"module"},"1:8256:4774":{"crate_id":1,"path":["std","sync","mpsc","sync","State"],"kind":"struct"},"16:3064:6147":{"crate_id":16,"path":["gimli","common","DebugMacinfoOffset"],"kind":"struct"},"1:1428:3200":{"crate_id":1,"path":["std","collections","hash","map","IterMut"],"kind":"struct"},"17:9368:6760":{"crate_id":17,"path":["object","endian","U64Bytes"],"kind":"struct"},"1:4545:4619":{"crate_id":1,"path":["std","io","IoSliceMut"],"kind":"struct"},"17:13453:7331":{"crate_id":17,"path":["object","pe","ImageTlsDirectory64"],"kind":"struct"},"1:11816:8992":{"crate_id":1,"path":["std","sync","mpsc","cache_aligned","CacheAligned"],"kind":"struct"},"17:12771:7097":{"crate_id":17,"path":["object","macho","Relocation"],"kind":"struct"},"6:5312:8460":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","timex"],"kind":"struct"},"17:10200:47524":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdatIterator"],"kind":"struct"},"17:11358:6189":{"crate_id":17,"path":["object","read","CompressedFileRange"],"kind":"struct"},"16:3320:6149":{"crate_id":16,"path":["gimli","common","DebugTypeSignature"],"kind":"struct"},"6:1533:7928":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreqn"],"kind":"struct"},"2:50996:5197":{"crate_id":2,"path":["core","core_arch","simd","u8x16"],"kind":"struct"},"21:158:4555":{"crate_id":21,"path":["proc_macro","bridge","client","Client"],"kind":"struct"},"2:53069:8915":{"crate_id":2,"path":["core","core_arch","x86","__m128bh"],"kind":"struct"},"1:15419:6565":{"crate_id":1,"path":["std","backtrace_rs","symbolize","gimli","mmap","Mmap"],"kind":"struct"},"1:11239:3609":{"crate_id":1,"path":["std","panic","BacktraceStyle"],"kind":"enum"},"16:2733:5808":{"crate_id":16,"path":["gimli","common","Format"],"kind":"enum"},"12:812:4705":{"crate_id":12,"path":["hashbrown","map","IntoValues"],"kind":"struct"},"16:3939:7515":{"crate_id":16,"path":["gimli","constants","DwTag"],"kind":"struct"},"1:15675:2939":{"crate_id":1,"path":["std","tuple"],"kind":"primitive"},"2:2834:116":{"crate_id":2,"path":["core","cmp","Eq"],"kind":"trait"},"6:5210:8398":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","msghdr"],"kind":"struct"},"2:8642:4832":{"crate_id":2,"path":["core","lazy","OnceCell"],"kind":"struct"},"24:4711:3366":{"crate_id":24,"path":["syn","token","AndEq"],"kind":"struct"},"17:11555:6865":{"crate_id":17,"path":["object","elf","CompressionHeader64"],"kind":"struct"},"2:12750:5031":{"crate_id":2,"path":["core","str","pattern","Searcher"],"kind":"trait"},"17:11588:6872":{"crate_id":17,"path":["object","elf","Sym64"],"kind":"struct"},"24:2053:3253":{"crate_id":24,"path":["syn","buffer","TokenBuffer"],"kind":"struct"},"17:13582:7368":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation32"],"kind":"struct"},"2:49330:5343":{"crate_id":2,"path":["core","str","iter","EscapeUnicode"],"kind":"struct"},"1:4371:4641":{"crate_id":1,"path":["std","io","stdio","Stderr"],"kind":"struct"},"24:940:62989":{"crate_id":24,"path":["syn","generics","LifetimesMut"],"kind":"struct"},"12:1118:4712":{"crate_id":12,"path":["hashbrown","map","OccupiedEntry"],"kind":"struct"},"0:1258:1585":{"crate_id":0,"path":["serde_derive","Deserialize"],"kind":"proc_derive"},"1:11771:4807":{"crate_id":1,"path":["std","process","ExitStatusError"],"kind":"struct"},"6:4023:8164":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_keymap_entry"],"kind":"struct"},"24:3475:93":{"crate_id":24,"path":["syn","token","Break"],"kind":"struct"},"2:46299:5096":{"crate_id":2,"path":["core","iter","adapters","scan","Scan"],"kind":"struct"},"2:55670:5114":{"crate_id":2,"path":["core","core_simd","fmt","fmt","Wrapper"],"kind":"struct"},"1:14720:4696":{"crate_id":1,"path":["std","sys","unix","time","SystemTime"],"kind":"struct"},"16:4304:7517":{"crate_id":16,"path":["gimli","constants","DwForm"],"kind":"struct"},"6:4281:8243":{"crate_id":6,"path":["libc","unix","linux_like","linux","posix_spawnattr_t"],"kind":"struct"},"24:1274:6317":{"crate_id":24,"path":["syn","lit","LitIntRepr"],"kind":"struct"},"1:11737:4804":{"crate_id":1,"path":["std","process","CommandArgs"],"kind":"struct"},"5:7448:211":{"crate_id":5,"path":["alloc","vec","Vec"],"kind":"struct"},"24:4786:3371":{"crate_id":24,"path":["syn","token","Colon"],"kind":"struct"},"12:1180:5736":{"crate_id":12,"path":["hashbrown","map","KeyOrRef"],"kind":"enum"},"24:5170:3397":{"crate_id":24,"path":["syn","token","FatArrow"],"kind":"struct"},"17:3743:6183":{"crate_id":17,"path":["object","read","macho","section","MachOSectionIterator"],"kind":"struct"},"1:11743:163":{"crate_id":1,"path":["std","process","Output"],"kind":"struct"},"1:3529:4634":{"crate_id":1,"path":["std","io","buffered","bufwriter","BufWriter"],"kind":"struct"},"2:3266:3395":{"crate_id":2,"path":["core","ops","arith","Rem"],"kind":"trait"},"2:55696:5114":{"crate_id":2,"path":["core","core_simd","fmt","fmt","Wrapper"],"kind":"struct"},"22:873:2421":{"crate_id":22,"path":["proc_macro2","imp","Literal"],"kind":"enum"},"2:49753:5350":{"crate_id":2,"path":["core","str","UnsafeBytesToStr"],"kind":"struct"},"22:1014:3195":{"crate_id":22,"path":["proc_macro2","token_stream","IntoIter"],"kind":"struct"},"1:10180:9408":{"crate_id":1,"path":["std","backtrace_rs","symbolize","SymbolName"],"kind":"struct"},"24:4861:3376":{"crate_id":24,"path":["syn","token","Dollar"],"kind":"struct"},"6:4331:8266":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_vm"],"kind":"struct"},"2:45402:4375":{"crate_id":2,"path":["core","ops","generator","GeneratorState"],"kind":"enum"},"17:11015:47741":{"crate_id":17,"path":["object","read","pe","section","PeRelocationIterator"],"kind":"struct"},"1:11401:3196":{"crate_id":1,"path":["std","path","Iter"],"kind":"struct"},"17:13637:7383":{"crate_id":17,"path":["object","pe","ImageLoadConfigDirectory32"],"kind":"struct"},"16:4350:7518":{"crate_id":16,"path":["gimli","constants","DwAte"],"kind":"struct"},"24:5158:3396":{"crate_id":24,"path":["syn","token","RemEq"],"kind":"struct"},"17:13627:7378":{"crate_id":17,"path":["object","pe","ImageEpilogueDynamicRelocationHeader"],"kind":"struct"},"17:12234:6992":{"crate_id":17,"path":["object","macho","SubLibraryCommand"],"kind":"struct"},"2:9540:74":{"crate_id":2,"path":["core","sync","atomic","AtomicBool"],"kind":"struct"},"20:47:2771":{"crate_id":20,"path":["quote","format_ident"],"kind":"macro"},"6:4083:8192":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_periodic_effect"],"kind":"struct"},"2:47055:158":{"crate_id":2,"path":["core","option","Option"],"kind":"enum"},"17:9574:6211":{"crate_id":17,"path":["object","read","util","StringTable"],"kind":"struct"},"2:23386:5123":{"crate_id":2,"path":["core","core_simd","vector","SimdElement"],"kind":"trait"},"17:11822:6926":{"crate_id":17,"path":["object","elf","NoteHeader64"],"kind":"struct"},"2:12756:5027":{"crate_id":2,"path":["core","str","pattern","ReverseSearcher"],"kind":"trait"},"2:47360:76":{"crate_id":2,"path":["core","sync","atomic","AtomicI16"],"kind":"struct"},"24:5706:3078":{"crate_id":24,"path":["syn","expr","ExprAwait"],"kind":"struct"},"2:48922:5317":{"crate_id":2,"path":["core","slice","iter","RChunksExact"],"kind":"struct"},"6:1658:8010":{"crate_id":6,"path":["libc","unix","linux_like","in_pktinfo"],"kind":"struct"},"1:8342:184":{"crate_id":1,"path":["std","sync","mpsc","Receiver"],"kind":"struct"},"1:6591:8614":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt","st_mtime"],"kind":"foreign_type"},"2:8584:5140":{"crate_id":2,"path":["core","iter","traits","marker","TrustedStep"],"kind":"trait"},"1:7612:4805":{"crate_id":1,"path":["std","process","Stdio"],"kind":"struct"},"2:23551:5380":{"crate_id":2,"path":["core","num","bignum","tests","Big8x3"],"kind":"struct"},"2:47105:3200":{"crate_id":2,"path":["core","option","IterMut"],"kind":"struct"},"24:4141:1746":{"crate_id":24,"path":["syn","token","Union"],"kind":"struct"},"2:46150:4587":{"crate_id":2,"path":["core","iter","adapters","chain","Chain"],"kind":"struct"},"2:24108:5383":{"crate_id":2,"path":["core","num","nonzero","NonZeroU8"],"kind":"struct"},"5:1524:3196":{"crate_id":5,"path":["alloc","collections","btree","map","Iter"],"kind":"struct"},"5:7828:90":{"crate_id":5,"path":["alloc","collections","btree","set","BTreeSet"],"kind":"struct"},"16:7453:5836":{"crate_id":16,"path":["gimli","read","unit","DebugInfo"],"kind":"struct"},"2:50762:5184":{"crate_id":2,"path":["core","core_arch","simd","u16x4"],"kind":"struct"},"1:15672:2936":{"crate_id":1,"path":["std","array"],"kind":"primitive"},"1:5637:4569":{"crate_id":1,"path":["std","os","unix","fs","MetadataExt"],"kind":"trait"},"1:2397:13064":{"crate_id":1,"path":["std","env","VarsOs"],"kind":"struct"},"17:11231:6235":{"crate_id":17,"path":["object","read","Import"],"kind":"struct"},"17:13564:7364":{"crate_id":17,"path":["object","pe","ImageLoadConfigCodeIntegrity"],"kind":"struct"},"1:11098:4883":{"crate_id":1,"path":["std","net","Shutdown"],"kind":"enum"},"16:6999:5920":{"crate_id":16,"path":["gimli","read","op","Piece"],"kind":"struct"},"16:5996:1739":{"crate_id":16,"path":["gimli","read","dwarf","Unit"],"kind":"struct"},"6:543:7864":{"crate_id":6,"path":["libc","unix","rusage"],"kind":"struct"},"17:10788:47636":{"crate_id":17,"path":["object","read","macho","segment","MachOSegmentIterator"],"kind":"struct"},"2:12202:5454":{"crate_id":2,"path":["core","str","converts","from_utf8"],"kind":"function"},"1:8157:4136":{"crate_id":1,"path":["std","sync","mpsc","stream","Packet"],"kind":"struct"},"21:1344:2104":{"crate_id":21,"path":["proc_macro","bridge","client","Punct"],"kind":"struct"},"2:47174:170":{"crate_id":2,"path":["core","pin","Pin"],"kind":"struct"},"1:3110:4841":{"crate_id":1,"path":["std","fs","DirEntry"],"kind":"struct"},"2:3716:4373":{"crate_id":2,"path":["core","ops","unsize","DispatchFromDyn"],"kind":"trait"},"2:9158:5029":{"crate_id":2,"path":["core","panicking","assert_matches_failed","Pattern"],"kind":"struct"},"1:11985:4828":{"crate_id":1,"path":["std","sync","rwlock","RwLockReadGuard"],"kind":"struct"},"1:11849:3196":{"crate_id":1,"path":["std","sync","mpsc","Iter"],"kind":"struct"},"21:1153:1698":{"crate_id":21,"path":["proc_macro","bridge","client","Group"],"kind":"struct"},"2:31768:5442":{"crate_id":2,"path":["core","num","FpCategory"],"kind":"enum"},"2:5131:5471":{"crate_id":2,"path":["core","char","REPLACEMENT_CHARACTER"],"kind":"constant"},"16:3772:7513":{"crate_id":16,"path":["gimli","constants","DwCfa"],"kind":"struct"},"2:12956:9403":{"crate_id":2,"path":["core","str","lossy","Utf8Lossy"],"kind":"struct"},"1:13961:4643":{"crate_id":1,"path":["std","sys","unix","stdio","Stdin"],"kind":"struct"},"16:6219:5905":{"crate_id":16,"path":["gimli","read","aranges","ArangeEntry"],"kind":"struct"},"17:10149:47459":{"crate_id":17,"path":["object","read","coff","symbol","SymbolIterator"],"kind":"struct"},"24:3619:1722":{"crate_id":24,"path":["syn","token","Enum"],"kind":"struct"},"2:5303:12099":{"crate_id":2,"path":["core","ffi","c_void"],"kind":"enum"},"2:23715:5213":{"crate_id":2,"path":["core","num","dec2flt","FloatErrorKind"],"kind":"enum"},"2:55748:5114":{"crate_id":2,"path":["core","core_simd","fmt","fmt","Wrapper"],"kind":"struct"},"16:3241:6094":{"crate_id":16,"path":["gimli","common","DebugStrOffsetsBase"],"kind":"struct"},"24:661:63094":{"crate_id":24,"path":["syn","expr","parsing","Precedence"],"kind":"enum"},"9:1056:5665":{"crate_id":9,"path":["miniz_oxide","DataFormat"],"kind":"enum"},"24:3655:3340":{"crate_id":24,"path":["syn","token","Final"],"kind":"struct"},"24:2791:6309":{"crate_id":24,"path":["syn","thread","ThreadBound"],"kind":"struct"},"2:4908:3271":{"crate_id":2,"path":["core","cell","UnsafeCell"],"kind":"struct"},"17:13733:7421":{"crate_id":17,"path":["object","pe","ImageHotPatchInfo"],"kind":"struct"},"5:69:4383":{"crate_id":5,"path":["alloc","raw_vec","RawVec"],"kind":"struct"},"9:692:5605":{"crate_id":9,"path":["miniz_oxide","deflate","core","CompressionStrategy"],"kind":"enum"},"5:7774:4382":{"crate_id":5,"path":["alloc","alloc","Global"],"kind":"struct"},"2:32107:60181":{"crate_id":2,"path":["core","mem","valid_align","ValidAlignEnum64"],"kind":"enum"},"24:3237:3195":{"crate_id":24,"path":["syn","error","IntoIter"],"kind":"struct"},"5:8031:5540":{"crate_id":5,"path":["alloc","ffi","c_str","FromVecWithNulError"],"kind":"struct"},"14:11:9397":{"crate_id":14,"path":["rustc_demangle","legacy","Demangle"],"kind":"struct"},"5:2634:5566":{"crate_id":5,"path":["alloc","collections","btree","node","Handle"],"kind":"struct"},"2:46251:5089":{"crate_id":2,"path":["core","iter","adapters","intersperse","Intersperse"],"kind":"struct"},"13:232:7760":{"crate_id":13,"path":["std_detect","detect","cache","Initializer"],"kind":"struct"},"5:1748:6508":{"crate_id":5,"path":["alloc","collections","btree","map","drop","DropGuard"],"kind":"struct"},"2:8680:4833":{"crate_id":2,"path":["core","lazy","Lazy"],"kind":"struct"},"24:160:4584":{"crate_id":24,"path":["syn","token","private","Sealed"],"kind":"trait"},"2:23661:9097":{"crate_id":2,"path":["core","num","dec2flt","decimal","Decimal"],"kind":"struct"},"24:2549:1952":{"crate_id":24,"path":["syn","parse_quote"],"kind":"module"},"2:2113:4216":{"crate_id":2,"path":["core","mem","Discriminant"],"kind":"struct"},"5:1433:4714":{"crate_id":5,"path":["alloc","collections","btree","map","entry","OccupiedError"],"kind":"struct"},"17:13978:7487":{"crate_id":17,"path":["object","pe","ImageArchitectureEntry"],"kind":"struct"},"24:5774:3094":{"crate_id":24,"path":["syn","expr","ExprLoop"],"kind":"struct"},"2:3292:5002":{"crate_id":2,"path":["core","ops","arith","RemAssign"],"kind":"trait"},"6:6214:8701":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","seccomp_notif_sizes"],"kind":"struct"},"6:4377:8291":{"crate_id":6,"path":["libc","unix","linux_like","linux","j1939_filter"],"kind":"struct"},"12:1159:5735":{"crate_id":12,"path":["hashbrown","map","EntryRef"],"kind":"enum"},"11:46:7765":{"crate_id":11,"path":["adler","algo","U32X4"],"kind":"struct"},"2:47122:3617":{"crate_id":2,"path":["core","panic","location","Location"],"kind":"struct"},"24:5814:3103":{"crate_id":24,"path":["syn","expr","ExprStruct"],"kind":"struct"},"5:8045:5541":{"crate_id":5,"path":["alloc","ffi","c_str","IntoStringError"],"kind":"struct"},"14:189:9397":{"crate_id":14,"path":["rustc_demangle","Demangle"],"kind":"struct"},"16:6032:5826":{"crate_id":16,"path":["gimli","read","endian_slice","EndianSlice"],"kind":"struct"},"6:584:7893":{"crate_id":6,"path":["libc","unix","pollfd"],"kind":"struct"},"24:4231:3361":{"crate_id":24,"path":["syn","token","Where"],"kind":"struct"},"2:49721:5348":{"crate_id":2,"path":["core","str","LinesAnyMap"],"kind":"struct"},"24:6073:2094":{"crate_id":24,"path":["syn","mac","Macro"],"kind":"struct"},"24:5407:3066":{"crate_id":24,"path":["syn","attr","MetaList"],"kind":"struct"},"6:519:7853":{"crate_id":6,"path":["libc","unix","utimbuf"],"kind":"struct"},"24:2146:6661":{"crate_id":24,"path":["syn","ext","private","PeekFn"],"kind":"struct"},"17:12142:6979":{"crate_id":17,"path":["object","macho","Fvmlib"],"kind":"struct"},"1:6579:4569":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt"],"kind":"trait"},"18:610:6282":{"crate_id":18,"path":["memchr","cow","CowBytes"],"kind":"struct"},"2:45450:178":{"crate_id":2,"path":["core","ops","range","RangeFull"],"kind":"struct"},"2:51452:8858":{"crate_id":2,"path":["core","core_arch","simd","m32x4"],"kind":"struct"},"2:9965:187":{"crate_id":2,"path":["core","fmt","Result"],"kind":"typedef"},"24:5771:3093":{"crate_id":24,"path":["syn","expr","ExprLit"],"kind":"struct"},"1:2171:4822":{"crate_id":1,"path":["std","collections","hash","set","Intersection"],"kind":"struct"},"2:3638:129":{"crate_id":2,"path":["core","ops","try_trait","FromResidual"],"kind":"trait"},"18:0:2914":{"crate_id":18,"path":["memchr"],"kind":"module"},"24:6363:2386":{"crate_id":24,"path":["syn","path","PathSegment"],"kind":"struct"},"17:11539:6861":{"crate_id":17,"path":["object","elf","CompressionHeader32"],"kind":"struct"},"1:8349:4737":{"crate_id":1,"path":["std","sync","mpsc","Sender"],"kind":"struct"},"6:4164:8224":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Ehdr"],"kind":"struct"},"24:5310:2414":{"crate_id":24,"path":["syn","token","Brace"],"kind":"struct"},"6:3966:8135":{"crate_id":6,"path":["libc","unix","linux_like","linux","cpu_set_t"],"kind":"struct"},"1:10255:6558":{"crate_id":1,"path":["std","backtrace_rs","Bomb"],"kind":"struct"},"24:3637:3339":{"crate_id":24,"path":["syn","token","Extern"],"kind":"struct"},"12:1667:5748":{"crate_id":12,"path":["hashbrown","rustc_entry","RustcOccupiedEntry"],"kind":"struct"},"2:45853:3293":{"crate_id":2,"path":["core","ascii","EscapeDefault"],"kind":"struct"},"2:53016:8912":{"crate_id":2,"path":["core","core_arch","x86","__m512i"],"kind":"struct"},"2:46352:5100":{"crate_id":2,"path":["core","iter","adapters","take_while","TakeWhile"],"kind":"struct"},"17:13547:7360":{"crate_id":17,"path":["object","pe","ImageResourceDirStringU"],"kind":"struct"},"2:3396:109":{"crate_id":2,"path":["core","ops","deref","Deref"],"kind":"trait"},"17:11970:6949":{"crate_id":17,"path":["object","macho","FatArch32"],"kind":"struct"},"18:857:6277":{"crate_id":18,"path":["memchr","memmem","SearcherConfig"],"kind":"struct"},"24:5878:1717":{"crate_id":24,"path":["syn","generics","Generics"],"kind":"struct"},"24:6121:3126":{"crate_id":24,"path":["syn","op","BinOp"],"kind":"enum"},"1:6593:8616":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt","st_ctime"],"kind":"foreign_type"},"2:10033:171":{"crate_id":2,"path":["core","fmt","Pointer"],"kind":"trait"},"17:13520:7353":{"crate_id":17,"path":["object","pe","ImageResourceDirectory"],"kind":"struct"},"24:6346:3129":{"crate_id":24,"path":["syn","ty","BareFnArg"],"kind":"struct"},"12:463:62832":{"crate_id":12,"path":["hashbrown","raw","RawIterHash"],"kind":"struct"},"21:0:1006":{"crate_id":21,"path":["proc_macro"],"kind":"module"},"17:13402:7319":{"crate_id":17,"path":["object","pe","ImageArchiveMemberHeader"],"kind":"struct"},"17:10353:6244":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbolTable"],"kind":"struct"},"6:4523:8350":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_can"],"kind":"struct"},"1:6451:4680":{"crate_id":1,"path":["std","os","unix","thread","JoinHandleExt"],"kind":"trait"},"24:5830:3107":{"crate_id":24,"path":["syn","expr","ExprType"],"kind":"struct"},"6:4033:8167":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_mask"],"kind":"struct"},"21:3494:2104":{"crate_id":21,"path":["proc_macro","Punct"],"kind":"struct"},"24:6353:2144":{"crate_id":24,"path":["syn","ty","ReturnType"],"kind":"enum"},"2:46362:5015":{"crate_id":2,"path":["core","iter","adapters","zip","Zip"],"kind":"struct"},"1:2582:9405":{"crate_id":1,"path":["std","error","from","StringError"],"kind":"struct"},"2:2865:159":{"crate_id":2,"path":["core","cmp","Ord"],"kind":"trait"},"24:6036:3120":{"crate_id":24,"path":["syn","lit","LitByteStr"],"kind":"struct"},"2:3077:72":{"crate_id":2,"path":["core","convert","AsMut"],"kind":"trait"},"24:5782:3096":{"crate_id":24,"path":["syn","expr","ExprMatch"],"kind":"struct"},"2:3090:204":{"crate_id":2,"path":["core","convert","TryFrom"],"kind":"trait"},"2:45912:5479":{"crate_id":2,"path":["core","char","decode","DecodeUtf16"],"kind":"struct"},"2:10146:61179":{"crate_id":2,"path":["core","fmt","fmt","BorrowedPlaceholder"],"kind":"struct"},"5:3660:4496":{"crate_id":5,"path":["alloc","collections","linked_list","DrainFilter"],"kind":"struct"},"2:49737:5356":{"crate_id":2,"path":["core","str","IsWhitespace"],"kind":"struct"},"8:0:2905":{"crate_id":8,"path":["cfg_if"],"kind":"module"},"17:12756:7096":{"crate_id":17,"path":["object","macho","Nlist64"],"kind":"struct"},"21:3365:3210":{"crate_id":21,"path":["proc_macro","LexError"],"kind":"struct"},"1:15148:58801":{"crate_id":1,"path":["std","panicking","Hook"],"kind":"enum"},"2:50650:5183":{"crate_id":2,"path":["core","core_arch","simd","u16x2"],"kind":"struct"},"6:6881:8725":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_cond_t"],"kind":"struct"},"17:10477:6214":{"crate_id":17,"path":["object","read","elf","hash","GnuHashTable"],"kind":"struct"},"5:1567:4702":{"crate_id":5,"path":["alloc","collections","btree","map","Values"],"kind":"struct"},"1:11418:4780":{"crate_id":1,"path":["std","path","StripPrefixError"],"kind":"struct"},"2:12961:40123":{"crate_id":2,"path":["core","str","lossy","Utf8LossyChunksIter"],"kind":"struct"},"1:15681:2945":{"crate_id":1,"path":["std","i64"],"kind":"primitive"},"16:6357:5908":{"crate_id":16,"path":["gimli","read","line","LineInstructions"],"kind":"struct"},"24:5059:3389":{"crate_id":24,"path":["syn","token","OrEq"],"kind":"struct"},"1:11975:4792":{"crate_id":1,"path":["std","sync","mutex","MutexGuard"],"kind":"struct"},"2:48823:5309":{"crate_id":2,"path":["core","slice","iter","ChunksMut"],"kind":"struct"},"6:591:7896":{"crate_id":6,"path":["libc","unix","winsize"],"kind":"struct"},"6:511:1699":{"crate_id":6,"path":["libc","unix","group"],"kind":"struct"},"16:7073:5921":{"crate_id":16,"path":["gimli","read","op","EvaluationResult"],"kind":"enum"},"2:2429:4376":{"crate_id":2,"path":["core","ptr","unique","Unique"],"kind":"struct"},"22:958:2104":{"crate_id":22,"path":["proc_macro2","Punct"],"kind":"struct"},"22:822:1567":{"crate_id":22,"path":["proc_macro2","imp","TokenStream"],"kind":"enum"},"16:6087:5833":{"crate_id":16,"path":["gimli","read","abbrev","DebugAbbrev"],"kind":"struct"},"2:13444:130":{"crate_id":2,"path":["core","future","future","Future"],"kind":"trait"},"16:6949:6130":{"crate_id":16,"path":["gimli","read","op","OperationEvaluationResult"],"kind":"enum"},"2:48999:2686":{"crate_id":2,"path":["core","str","iter","Bytes"],"kind":"struct"},"6:5167:8380":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","aiocb"],"kind":"struct"},"6:5130:8354":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","statx"],"kind":"struct"},"14:47:9397":{"crate_id":14,"path":["rustc_demangle","v0","Demangle"],"kind":"struct"},"17:13788:7440":{"crate_id":17,"path":["object","pe","ImageAlpha64RuntimeFunctionEntry"],"kind":"struct"},"20:117:1775":{"crate_id":20,"path":["quote","to_tokens","ToTokens"],"kind":"trait"},"2:24312:5387":{"crate_id":2,"path":["core","num","nonzero","NonZeroI8"],"kind":"struct"},"2:23480:5378":{"crate_id":2,"path":["core","num","bignum","Big32x40"],"kind":"struct"},"5:1613:5560":{"crate_id":5,"path":["alloc","collections","btree","map","RangeMut"],"kind":"struct"},"17:9034:47450":{"crate_id":17,"path":["object","common","SymbolKind"],"kind":"enum"},"2:9545:81":{"crate_id":2,"path":["core","sync","atomic","AtomicPtr"],"kind":"struct"},"17:12568:7062":{"crate_id":17,"path":["object","macho","VersionMinCommand"],"kind":"struct"},"5:3951:6508":{"crate_id":5,"path":["alloc","collections","vec_deque","drain","drop","DropGuard"],"kind":"struct"},"22:24:9150":{"crate_id":22,"path":["proc_macro2","marker","ProcMacroAutoTraits"],"kind":"struct"},"18:820:6274":{"crate_id":18,"path":["memchr","memmem","FinderRev"],"kind":"struct"},"2:3343:4980":{"crate_id":2,"path":["core","ops","bit","ShlAssign"],"kind":"trait"},"17:10448:6165":{"crate_id":17,"path":["object","read","elf","note","NoteIterator"],"kind":"struct"},"2:10035:3283":{"crate_id":2,"path":["core","fmt","LowerExp"],"kind":"trait"},"1:1075:2205":{"crate_id":1,"path":["std","ascii","AsciiExt"],"kind":"trait"},"5:7517:6523":{"crate_id":5,"path":["alloc","vec","dedup_by","FillGapOnDrop"],"kind":"struct"},"1:15687:2951":{"crate_id":1,"path":["std","u128"],"kind":"primitive"},"6:6091:8629":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_fpxreg"],"kind":"struct"},"2:3904:67":{"crate_id":2,"path":["core","any","Any"],"kind":"trait"},"17:9943:62854":{"crate_id":17,"path":["object","read","any","DynamicRelocationIteratorInternal"],"kind":"enum"},"2:2690:550":{"crate_id":2,"path":["core","ptr","drop_in_place"],"kind":"function"},"17:10061:47526":{"crate_id":17,"path":["object","read","coff","file","CoffCommon"],"kind":"struct"},"1:5671:4570":{"crate_id":1,"path":["std","os","unix","fs","FileTypeExt"],"kind":"trait"},"2:22313:61394":{"crate_id":2,"path":["core","core_simd","swizzle","interleave","Lo"],"kind":"struct"},"2:23730:8747":{"crate_id":2,"path":["core","num","diy_float","Fp"],"kind":"struct"},"5:4776:630":{"crate_id":5,"path":["alloc","fmt"],"kind":"module"},"15:248:5757":{"crate_id":15,"path":["addr2line","LocationRangeUnitIter"],"kind":"struct"},"2:6154:5087":{"crate_id":2,"path":["core","iter","adapters","flatten","FlatMap"],"kind":"struct"},"1:7529:4801":{"crate_id":1,"path":["std","process","ChildStdout"],"kind":"struct"},"5:7999:5539":{"crate_id":5,"path":["alloc","ffi","c_str","NulError"],"kind":"struct"},"5:4152:3196":{"crate_id":5,"path":["alloc","collections","vec_deque","iter","Iter"],"kind":"struct"},"24:3673:122":{"crate_id":24,"path":["syn","token","Fn"],"kind":"struct"},"17:12582:7064":{"crate_id":17,"path":["object","macho","BuildVersionCommand"],"kind":"struct"},"6:4127:8212":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_abs_setup"],"kind":"struct"},"12:761:3200":{"crate_id":12,"path":["hashbrown","map","IterMut"],"kind":"struct"},"5:2892:3349":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Mut"],"kind":"struct"},"17:11277:6823":{"crate_id":17,"path":["object","read","CodeView"],"kind":"struct"},"2:48932:5318":{"crate_id":2,"path":["core","slice","iter","RChunksExactMut"],"kind":"struct"},"2:24482:5391":{"crate_id":2,"path":["core","num","nonzero","NonZeroIsize"],"kind":"struct"},"17:10041:47511":{"crate_id":17,"path":["object","read","archive","ArchiveMemberIterator"],"kind":"struct"},"17:13746:7427":{"crate_id":17,"path":["object","pe","ImageHotPatchBase"],"kind":"struct"},"16:6682:5849":{"crate_id":16,"path":["gimli","read","loclists","LocListIter"],"kind":"struct"},"2:53146:8918":{"crate_id":2,"path":["core","core_arch","x86","cpuid","CpuidResult"],"kind":"struct"},"5:2134:5565":{"crate_id":5,"path":["alloc","collections","btree","navigate","LeafRange"],"kind":"struct"},"5:1422:4712":{"crate_id":5,"path":["alloc","collections","btree","map","entry","OccupiedEntry"],"kind":"struct"},"21:3469:1698":{"crate_id":21,"path":["proc_macro","Group"],"kind":"struct"},"2:45943:5474":{"crate_id":2,"path":["core","char","EscapeUnicodeState"],"kind":"enum"},"6:5978:8591":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","flock64"],"kind":"struct"},"17:0:2913":{"crate_id":17,"path":["object"],"kind":"module"},"13:120:45768":{"crate_id":13,"path":["std_detect","detect","arch","x86","Feature"],"kind":"enum"},"2:48365:5076":{"crate_id":2,"path":["core","hash","sip","SipHasher"],"kind":"struct"},"17:10599:47661":{"crate_id":17,"path":["object","read","macho","file","MachOComdatIterator"],"kind":"struct"},"1:11167:4900":{"crate_id":1,"path":["std","os","unix","ucred","UCred"],"kind":"struct"},"24:5694:3075":{"crate_id":24,"path":["syn","expr","ExprAssign"],"kind":"struct"},"2:3080:141":{"crate_id":2,"path":["core","convert","Into"],"kind":"trait"},"24:5690:3074":{"crate_id":24,"path":["syn","expr","ExprArray"],"kind":"struct"},"22:908:1567":{"crate_id":22,"path":["proc_macro2","TokenStream"],"kind":"struct"},"1:10742:4819":{"crate_id":1,"path":["std","io","error","Custom"],"kind":"struct"},"24:2449:3202":{"crate_id":24,"path":["syn","punctuated","PrivateIterMut"],"kind":"struct"},"16:7928:2493":{"crate_id":16,"path":["gimli","read","value","Value"],"kind":"enum"},"2:4879:3269":{"crate_id":2,"path":["core","cell","BorrowRefMut"],"kind":"struct"},"17:9719:47456":{"crate_id":17,"path":["object","read","any","SectionIterator"],"kind":"struct"},"2:10274:4721":{"crate_id":2,"path":["core","hash","BuildHasher"],"kind":"trait"},"17:13912:7475":{"crate_id":17,"path":["object","pe","ImageDebugMisc"],"kind":"struct"},"16:4704:7528":{"crate_id":16,"path":["gimli","constants","DwCc"],"kind":"struct"},"16:6424:5910":{"crate_id":16,"path":["gimli","read","line","LineProgramHeader"],"kind":"struct"},"24:3385:3331":{"crate_id":24,"path":["syn","token","Async"],"kind":"struct"},"2:2108:549":{"crate_id":2,"path":["core","mem","drop"],"kind":"function"},"2:47570:85":{"crate_id":2,"path":["core","sync","atomic","AtomicU64"],"kind":"struct"},"24:5901:2360":{"crate_id":24,"path":["syn","generics","TypeParam"],"kind":"struct"},"2:48115:119":{"crate_id":2,"path":["core","fmt","Error"],"kind":"struct"},"1:5848:4946":{"crate_id":1,"path":["std","os","unix","net","ancillary","ScmRights"],"kind":"struct"},"9:963:5670":{"crate_id":9,"path":["miniz_oxide","MZFlush"],"kind":"enum"},"16:6464:5848":{"crate_id":16,"path":["gimli","read","line","IncompleteLineProgram"],"kind":"struct"},"6:5292:8444":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","rtentry"],"kind":"struct"},"1:11087:4881":{"crate_id":1,"path":["std","net","tcp","Incoming"],"kind":"struct"},"16:5295:45873":{"crate_id":16,"path":["gimli","endianity","RunTimeEndian"],"kind":"enum"},"24:5993:1785":{"crate_id":24,"path":["syn","lit","Lit"],"kind":"enum"},"17:13924:7477":{"crate_id":17,"path":["object","pe","ImageFunctionEntry"],"kind":"struct"},"21:1655:173":{"crate_id":21,"path":["proc_macro","bridge","client","ProcMacro"],"kind":"enum"},"24:3194:187":{"crate_id":24,"path":["syn","error","Result"],"kind":"typedef"},"2:3182:3308":{"crate_id":2,"path":["core","marker","Sized"],"kind":"trait"},"1:7800:59486":{"crate_id":1,"path":["std","sync","mpsc","blocking","WaitToken"],"kind":"struct"},"2:23831:5447":{"crate_id":2,"path":["core","num","error","TryFromIntError"],"kind":"struct"},"18:849:6276":{"crate_id":18,"path":["memchr","memmem","NeedleInfo"],"kind":"struct"},"22:754:3297":{"crate_id":22,"path":["proc_macro2","fallback","LineColumn"],"kind":"struct"},"1:11857:4736":{"crate_id":1,"path":["std","sync","mpsc","TryIter"],"kind":"struct"},"16:6126:5901":{"crate_id":16,"path":["gimli","read","abbrev","Attributes"],"kind":"enum"},"2:3183:3274":{"crate_id":2,"path":["core","marker","Unsize"],"kind":"trait"},"5:4329:6511":{"crate_id":5,"path":["alloc","collections","vec_deque","drop","Dropper"],"kind":"struct"},"24:5030:3387":{"crate_id":24,"path":["syn","token","Ne"],"kind":"struct"},"16:3365:6077":{"crate_id":16,"path":["gimli","common","EhFrameOffset"],"kind":"struct"},"1:15673:2937":{"crate_id":1,"path":["std","slice"],"kind":"primitive"},"2:48600:5485":{"crate_id":2,"path":["core","slice","ascii","EscapeAscii"],"kind":"struct"},"2:51372:8856":{"crate_id":2,"path":["core","core_arch","simd","m8x16"],"kind":"struct"},"2:14:2553":{"crate_id":2,"path":["core","write"],"kind":"macro"},"6:4255:4899":{"crate_id":6,"path":["libc","unix","linux_like","linux","ucred"],"kind":"struct"},"2:46181:5082":{"crate_id":2,"path":["core","iter","adapters","cycle","Cycle"],"kind":"struct"},"1:9317:9407":{"crate_id":1,"path":["std","sys_common","backtrace","_print","DisplayBacktrace"],"kind":"struct"},"24:4051:3355":{"crate_id":24,"path":["syn","token","Super"],"kind":"struct"},"2:12741:5029":{"crate_id":2,"path":["core","str","pattern","Pattern"],"kind":"trait"},"1:1415:3196":{"crate_id":1,"path":["std","collections","hash","map","Iter"],"kind":"struct"},"17:11665:6883":{"crate_id":17,"path":["object","elf","Rela64"],"kind":"struct"},"2:37217:160":{"crate_id":2,"path":["core","cmp","Ordering"],"kind":"enum"},"12:1144:4713":{"crate_id":12,"path":["hashbrown","map","VacantEntry"],"kind":"struct"},"1:894:4149":{"crate_id":1,"path":["std","thread","scoped","Scope"],"kind":"struct"},"2:51146:5177":{"crate_id":2,"path":["core","core_arch","simd","i8x16"],"kind":"struct"},"2:49949:5361":{"crate_id":2,"path":["core","task","wake","RawWaker"],"kind":"struct"},"17:10864:6807":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbolTable"],"kind":"struct"},"17:9886:47459":{"crate_id":17,"path":["object","read","any","SymbolIterator"],"kind":"struct"},"24:5419:1785":{"crate_id":24,"path":["syn","attr","NestedMeta","Lit"],"kind":"foreign_type"},"17:12521:7055":{"crate_id":17,"path":["object","macho","FilesetEntryCommand"],"kind":"struct"},"24:5698:3076":{"crate_id":24,"path":["syn","expr","ExprAssignOp"],"kind":"struct"},"2:4688:3254":{"crate_id":2,"path":["core","cell","Cell"],"kind":"struct"},"12:2039:4824":{"crate_id":12,"path":["hashbrown","set","SymmetricDifference"],"kind":"struct"},"6:157:40588":{"crate_id":6,"path":["libc","unix","FILE"],"kind":"enum"},"17:9849:62867":{"crate_id":17,"path":["object","read","any","SymbolTableInternal"],"kind":"enum"},"16:7205:5927":{"crate_id":16,"path":["gimli","read","pubtypes","PubTypesEntry"],"kind":"struct"},"24:5985:3115":{"crate_id":24,"path":["syn","generics","PredicateLifetime"],"kind":"struct"},"5:7904:3195":{"crate_id":5,"path":["alloc","collections","vec_deque","into_iter","IntoIter"],"kind":"struct"},"17:8954:6193":{"crate_id":17,"path":["object","common","SectionKind"],"kind":"enum"},"16:4641:7526":{"crate_id":16,"path":["gimli","constants","DwAddr"],"kind":"struct"},"2:53054:8914":{"crate_id":2,"path":["core","core_arch","x86","__m512d"],"kind":"struct"},"24:916:62994":{"crate_id":24,"path":["syn","generics","TypeParams"],"kind":"struct"},"1:4261:4866":{"crate_id":1,"path":["std","io","stdio","StderrRaw"],"kind":"struct"},"5:2887:62822":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Dying"],"kind":"enum"},"1:9572:6553":{"crate_id":1,"path":["std","sys_common","rwlock","StaticRwLockWriteGuard"],"kind":"struct"},"17:13098:7251":{"crate_id":17,"path":["object","pe","ImageRomOptionalHeader"],"kind":"struct"},"1:2166:4496":{"crate_id":1,"path":["std","collections","hash","set","DrainFilter"],"kind":"struct"},"16:7823:5847":{"crate_id":16,"path":["gimli","read","unit","EntriesTree"],"kind":"struct"},"17:12373:7030":{"crate_id":17,"path":["object","macho","DylibTableOfContents"],"kind":"struct"},"5:4314:212":{"crate_id":5,"path":["alloc","collections","vec_deque","VecDeque"],"kind":"struct"},"16:7360:176":{"crate_id":16,"path":["gimli","read","rnglists","Range"],"kind":"struct"},"6:4203:8227":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Phdr"],"kind":"struct"},"12:2032:4823":{"crate_id":12,"path":["hashbrown","set","Difference"],"kind":"struct"},"24:6391:2402":{"crate_id":24,"path":["syn","path","AngleBracketedGenericArguments"],"kind":"struct"},"24:5710:3079":{"crate_id":24,"path":["syn","expr","ExprBinary"],"kind":"struct"},"1:9128:4831":{"crate_id":1,"path":["std","lazy","SyncLazy"],"kind":"struct"},"16:5595:5887":{"crate_id":16,"path":["gimli","read","cfi","CommonInformationEntry"],"kind":"struct"},"1:11891:4740":{"crate_id":1,"path":["std","sync","mpsc","RecvError"],"kind":"struct"},"24:6088:1568":{"crate_id":24,"path":["syn","derive","DeriveInput"],"kind":"struct"},"24:5818:3104":{"crate_id":24,"path":["syn","expr","ExprTry"],"kind":"struct"},"6:1527:7925":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreq"],"kind":"struct"},"1:5543:4601":{"crate_id":1,"path":["std","os","unix","ffi","os_str","OsStringExt"],"kind":"trait"},"2:49267:4628":{"crate_id":2,"path":["core","str","iter","Lines"],"kind":"struct"},"24:5460:3073":{"crate_id":24,"path":["syn","data","Visibility"],"kind":"enum"},"1:1302:135":{"crate_id":1,"path":["std","collections","hash","map","HashMap"],"kind":"struct"},"1:13507:4813":{"crate_id":1,"path":["std","sys","unix","pipe","AnonPipe"],"kind":"struct"},"1:10941:4667":{"crate_id":1,"path":["std","net","addr","SocketAddr"],"kind":"enum"},"1:10995:4674":{"crate_id":1,"path":["std","net","ip","Ipv4Addr"],"kind":"struct"},"16:7514:5855":{"crate_id":16,"path":["gimli","read","unit","UnitHeader"],"kind":"struct"},"1:14627:6563":{"crate_id":1,"path":["std","sys","unix","process","process_inner","posix_spawn","PosixSpawnFileActions"],"kind":"struct"},"2:51714:5193":{"crate_id":2,"path":["core","core_arch","simd","u64x4"],"kind":"struct"},"2:3284:4998":{"crate_id":2,"path":["core","ops","arith","MulAssign"],"kind":"trait"},"16:2816:6104":{"crate_id":16,"path":["gimli","common","DebugAbbrevOffset"],"kind":"struct"},"1:15680:2944":{"crate_id":1,"path":["std","i32"],"kind":"primitive"},"6:1736:8052":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_storage"],"kind":"struct"},"2:45558:181":{"crate_id":2,"path":["core","ops","range","RangeToInclusive"],"kind":"struct"},"12:2018:4496":{"crate_id":12,"path":["hashbrown","set","DrainFilter"],"kind":"struct"},"1:14295:121":{"crate_id":1,"path":["std","sys","unix","fs","FileType"],"kind":"struct"},"17:14000:7493":{"crate_id":17,"path":["object","pe","ImageCor20Header"],"kind":"struct"},"24:3745:3344":{"crate_id":24,"path":["syn","token","In"],"kind":"struct"},"2:47833:3286":{"crate_id":2,"path":["core","fmt","num","UpperHex"],"kind":"struct"},"1:5394:4887":{"crate_id":1,"path":["std","net","udp","UdpSocket"],"kind":"struct"},"17:13898:7468":{"crate_id":17,"path":["object","pe","ImageCoffSymbolsHeader"],"kind":"struct"},"9:0:2906":{"crate_id":9,"path":["miniz_oxide"],"kind":"module"},"6:6870:8721":{"crate_id":6,"path":["libc","unix","linux_like","linux","fanotify_event_metadata"],"kind":"struct"},"5:5936:4502":{"crate_id":5,"path":["alloc","string","retain","SetLenOnDrop"],"kind":"struct"},"24:3511:99":{"crate_id":24,"path":["syn","token","Continue"],"kind":"struct"},"1:10230:6556":{"crate_id":1,"path":["std","backtrace_rs","print","BacktraceFrameFmt"],"kind":"struct"},"17:9839:6217":{"crate_id":17,"path":["object","read","any","SymbolTable"],"kind":"struct"},"18:896:6280":{"crate_id":18,"path":["memchr","memmem","SearcherRevKind"],"kind":"enum"},"6:610:7906":{"crate_id":6,"path":["libc","unix","itimerval"],"kind":"struct"},"24:4774:3370":{"crate_id":24,"path":["syn","token","CaretEq"],"kind":"struct"},"17:12095:6971":{"crate_id":17,"path":["object","macho","Section32"],"kind":"struct"},"1:4609:4624":{"crate_id":1,"path":["std","io","BufRead"],"kind":"trait"},"2:37241:3998":{"crate_id":2,"path":["core","cmp","Reverse"],"kind":"struct"},"22:743:3298":{"crate_id":22,"path":["proc_macro2","fallback","SourceFile"],"kind":"struct"},"1:10747:4637":{"crate_id":1,"path":["std","io","error","ErrorKind"],"kind":"enum"},"17:12028:6958":{"crate_id":17,"path":["object","macho","LoadCommand"],"kind":"struct"},"1:2433:13074":{"crate_id":1,"path":["std","env","SplitPaths"],"kind":"struct"},"16:7406:5839":{"crate_id":16,"path":["gimli","read","str","DebugLineStr"],"kind":"struct"},"1:3617:4636":{"crate_id":1,"path":["std","io","buffered","linewriter","LineWriter"],"kind":"struct"},"2:47444:77":{"crate_id":2,"path":["core","sync","atomic","AtomicI32"],"kind":"struct"},"5:1396:4711":{"crate_id":5,"path":["alloc","collections","btree","map","entry","Entry"],"kind":"enum"},"6:4358:8283":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_tp"],"kind":"struct"},"2:52959:8907":{"crate_id":2,"path":["core","core_arch","x86","__m128"],"kind":"struct"},"2:50909:8848":{"crate_id":2,"path":["core","core_arch","simd","i64x1"],"kind":"struct"},"9:157:5622":{"crate_id":9,"path":["miniz_oxide","deflate","core","CompressorOxide"],"kind":"struct"},"2:48052:66":{"crate_id":2,"path":["core","fmt","Alignment"],"kind":"enum"},"1:8356:4738":{"crate_id":1,"path":["std","sync","mpsc","SyncSender"],"kind":"struct"},"2:23677:8743":{"crate_id":2,"path":["core","num","dec2flt","number","Number"],"kind":"struct"},"17:11045:47463":{"crate_id":17,"path":["object","read","FileKind"],"kind":"enum"},"17:10489:6218":{"crate_id":17,"path":["object","read","elf","version","VerdefIterator"],"kind":"struct"},"9:927:45527":{"crate_id":9,"path":["miniz_oxide","inflate","TINFLStatus"],"kind":"enum"},"2:45466:176":{"crate_id":2,"path":["core","ops","range","Range"],"kind":"struct"},"16:7738:2045":{"crate_id":16,"path":["gimli","read","unit","Attribute"],"kind":"struct"},"1:11348:4776":{"crate_id":1,"path":["std","path","Component"],"kind":"enum"},"1:14886:4753":{"crate_id":1,"path":["std","sys_common","wtf8","Wtf8"],"kind":"struct"},"1:696:4152":{"crate_id":1,"path":["std","thread","local","LocalKey"],"kind":"struct"},"1:14264:9138":{"crate_id":1,"path":["std","sys","unix","fs","StatxExtraFields"],"kind":"struct"},"6:6893:8727":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_rwlock_t"],"kind":"struct"},"24:5352:1698":{"crate_id":24,"path":["syn","token","Group"],"kind":"struct"},"17:12671:7084":{"crate_id":17,"path":["object","macho","FvmfileCommand"],"kind":"struct"},"12:2309:7761":{"crate_id":12,"path":["hashbrown","raw","bitmask","BitMask"],"kind":"struct"},"1:11050:58506":{"crate_id":1,"path":["std","net","parser","AddrKind"],"kind":"enum"},"12:469:62829":{"crate_id":12,"path":["hashbrown","raw","RawIterHashInner"],"kind":"struct"},"2:50675:5175":{"crate_id":2,"path":["core","core_arch","simd","i8x4"],"kind":"struct"},"7:85:45430":{"crate_id":7,"path":["unwind","libunwind","_Unwind_Action"],"kind":"enum"},"6:4431:8312":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_nl"],"kind":"struct"},"1:4332:4645":{"crate_id":1,"path":["std","io","stdio","Stdout"],"kind":"struct"},"12:354:9087":{"crate_id":12,"path":["hashbrown","raw","RawIterRange"],"kind":"struct"},"17:9186:6191":{"crate_id":17,"path":["object","common","SectionFlags"],"kind":"enum"},"24:6337:3141":{"crate_id":24,"path":["syn","ty","TypeTraitObject"],"kind":"struct"},"16:7549:5844":{"crate_id":16,"path":["gimli","read","unit","DebuggingInformationEntry"],"kind":"struct"},"5:5554:6514":{"crate_id":5,"path":["alloc","slice","insert_head","InsertionHole"],"kind":"struct"},"2:49574:5043":{"crate_id":2,"path":["core","str","pattern","StrSearcher"],"kind":"struct"},"1:10998:4675":{"crate_id":1,"path":["std","net","ip","Ipv6Addr"],"kind":"struct"},"14:216:45802":{"crate_id":14,"path":["rustc_demangle","SizeLimitedFmtAdapter"],"kind":"struct"},"1:12480:6560":{"crate_id":1,"path":["std","sys","unix","fs","Dir"],"kind":"struct"},"24:3332:3407":{"crate_id":24,"path":["syn","token","Underscore"],"kind":"struct"},"9:1075:5673":{"crate_id":9,"path":["miniz_oxide","StreamResult"],"kind":"struct"},"2:55683:5114":{"crate_id":2,"path":["core","core_simd","fmt","fmt","Wrapper"],"kind":"struct"},"19:117:6672":{"crate_id":19,"path":["panic_unwind","dwarf","eh","EHContext"],"kind":"struct"},"22:831:9034":{"crate_id":22,"path":["proc_macro2","imp","DeferredTokenStream"],"kind":"struct"},"6:6935:8735":{"crate_id":6,"path":["libc","unix","align","in6_addr"],"kind":"struct"},"2:45982:5342":{"crate_id":2,"path":["core","char","EscapeDebug"],"kind":"struct"},"2:46262:5092":{"crate_id":2,"path":["core","iter","adapters","map","Map"],"kind":"struct"},"1:2765:4589":{"crate_id":1,"path":["std","error","Indented"],"kind":"struct"},"16:5488:5883":{"crate_id":16,"path":["gimli","read","cfi","SectionBaseAddresses"],"kind":"struct"},"2:24210:4141":{"crate_id":2,"path":["core","num","nonzero","NonZeroU64"],"kind":"struct"},"18:136:53775":{"crate_id":18,"path":["memchr","memchr","iter","Memchr"],"kind":"struct"},"12:2315:62833":{"crate_id":12,"path":["hashbrown","raw","Fallibility"],"kind":"enum"},"18:729:6658":{"crate_id":18,"path":["memchr","memmem","twoway","Shift"],"kind":"enum"},"2:48983:5324":{"crate_id":2,"path":["core","str","iter","Chars"],"kind":"struct"},"9:722:5606":{"crate_id":9,"path":["miniz_oxide","deflate","core","TDEFLFlush"],"kind":"enum"},"24:4682:3364":{"crate_id":24,"path":["syn","token","And"],"kind":"struct"},"2:5567:5079":{"crate_id":2,"path":["core","iter","adapters","by_ref_sized","ByRefSized"],"kind":"struct"},"16:2991:6099":{"crate_id":16,"path":["gimli","common","LocationListsOffset"],"kind":"struct"},"1:14800:4814":{"crate_id":1,"path":["std","sys_common","process","CommandEnvs"],"kind":"struct"},"2:4824:3267":{"crate_id":2,"path":["core","cell","BorrowRef"],"kind":"struct"},"21:3373:3195":{"crate_id":21,"path":["proc_macro","token_stream","IntoIter"],"kind":"struct"},"2:48070:69":{"crate_id":2,"path":["core","fmt","rt","v1","Argument"],"kind":"struct"},"24:6343:3128":{"crate_id":24,"path":["syn","ty","Abi"],"kind":"struct"},"16:3041:6090":{"crate_id":16,"path":["gimli","common","DebugLocListsIndex"],"kind":"struct"},"1:1530:4710":{"crate_id":1,"path":["std","collections","hash","map","RawEntryBuilder"],"kind":"struct"},"16:5717:5891":{"crate_id":16,"path":["gimli","read","cfi","UnwindContext"],"kind":"struct"},"1:13755:4804":{"crate_id":1,"path":["std","sys","unix","process","process_common","CommandArgs"],"kind":"struct"},"2:3319:3399":{"crate_id":2,"path":["core","ops","bit","Shl"],"kind":"trait"},"5:6889:4498":{"crate_id":5,"path":["alloc","vec","drain","Drain"],"kind":"struct"},"24:5762:3091":{"crate_id":24,"path":["syn","expr","ExprIndex"],"kind":"struct"},"17:11499:6850":{"crate_id":17,"path":["object","elf","SectionHeader32"],"kind":"struct"},"24:5846:3111":{"crate_id":24,"path":["syn","expr","ExprYield"],"kind":"struct"},"6:4073:8185":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_condition_effect"],"kind":"struct"},"16:3800:7514":{"crate_id":16,"path":["gimli","constants","DwChildren"],"kind":"struct"},"2:10942:5298":{"crate_id":2,"path":["core","slice","iter","SplitMut"],"kind":"struct"},"2:46280:5094":{"crate_id":2,"path":["core","iter","adapters","peekable","Peekable"],"kind":"struct"},"2:2829:165":{"crate_id":2,"path":["core","cmp","PartialEq"],"kind":"trait"},"1:7843:6536":{"crate_id":1,"path":["std","sync","mpsc","mpsc_queue","Queue"],"kind":"struct"},"21:3321:3301":{"crate_id":21,"path":["proc_macro","diagnostic","Diagnostic"],"kind":"struct"},"14:194:45796":{"crate_id":14,"path":["rustc_demangle","DemangleStyle"],"kind":"enum"},"5:1410:4713":{"crate_id":5,"path":["alloc","collections","btree","map","entry","VacantEntry"],"kind":"struct"},"17:10095:6253":{"crate_id":17,"path":["object","read","coff","section","CoffSegmentIterator"],"kind":"struct"},"24:5117:3393":{"crate_id":24,"path":["syn","token","RArrow"],"kind":"struct"},"24:4723:3367":{"crate_id":24,"path":["syn","token","At"],"kind":"struct"},"2:7631:5141":{"crate_id":2,"path":["core","iter","range","Step"],"kind":"trait"},"2:46201:5084":{"crate_id":2,"path":["core","iter","adapters","filter","Filter"],"kind":"struct"},"2:51683:5190":{"crate_id":2,"path":["core","core_arch","simd","u32x8"],"kind":"struct"},"17:13772:7436":{"crate_id":17,"path":["object","pe","ImageArmRuntimeFunctionEntry"],"kind":"struct"},"2:3276:3220":{"crate_id":2,"path":["core","ops","arith","AddAssign"],"kind":"trait"},"17:13799:7444":{"crate_id":17,"path":["object","pe","ImageAlphaRuntimeFunctionEntry"],"kind":"struct"},"2:3074:73":{"crate_id":2,"path":["core","convert","AsRef"],"kind":"trait"},"1:8514:4907":{"crate_id":1,"path":["std","sync","barrier","BarrierWaitResult"],"kind":"struct"},"1:7135:59510":{"crate_id":1,"path":["std","path","fmt","DebugHelper"],"kind":"struct"},"2:5350:747":{"crate_id":2,"path":["core","iter"],"kind":"module"},"2:8580:4470":{"crate_id":2,"path":["core","iter","traits","marker","TrustedLen"],"kind":"trait"},"1:8558:4908":{"crate_id":1,"path":["std","sync","condvar","Condvar"],"kind":"struct"},"16:3714:7512":{"crate_id":16,"path":["gimli","constants","DwUt"],"kind":"struct"},"2:47612:80":{"crate_id":2,"path":["core","sync","atomic","AtomicIsize"],"kind":"struct"},"6:6068:8622":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statvfs64"],"kind":"struct"},"2:27663:5012":{"crate_id":2,"path":["core","num","wrapping","Wrapping"],"kind":"struct"},"6:6887:8726":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_mutex_t"],"kind":"struct"},"17:12327:7006":{"crate_id":17,"path":["object","macho","SymtabCommand"],"kind":"struct"},"1:2855:161":{"crate_id":1,"path":["std","ffi","os_str","OsStr"],"kind":"struct"},"24:2628:2423":{"crate_id":24,"path":["syn","spanned","Spanned"],"kind":"trait"},"2:48913:5316":{"crate_id":2,"path":["core","slice","iter","RChunksMut"],"kind":"struct"},"1:1482:4496":{"crate_id":1,"path":["std","collections","hash","map","DrainFilter"],"kind":"struct"},"16:6391:5909":{"crate_id":16,"path":["gimli","read","line","ColumnType"],"kind":"enum"},"24:4960:3382":{"crate_id":24,"path":["syn","token","Ge"],"kind":"struct"},"2:10632:194":{"crate_id":2,"path":["core","slice","index","SliceIndex"],"kind":"trait"},"6:616:7909":{"crate_id":6,"path":["libc","unix","tms"],"kind":"struct"},"24:2385:3198":{"crate_id":24,"path":["syn","punctuated","PrivateIter"],"kind":"struct"},"24:2496:2358":{"crate_id":24,"path":["syn","punctuated","Pair"],"kind":"enum"},"2:4757:3261":{"crate_id":2,"path":["core","cell","BorrowError"],"kind":"struct"},"2:10860:4627":{"crate_id":2,"path":["core","slice","iter","Split"],"kind":"struct"},"24:4033:1724":{"crate_id":24,"path":["syn","token","Struct"],"kind":"struct"},"24:5001:3385":{"crate_id":24,"path":["syn","token","Lt"],"kind":"struct"},"2:3218:3309":{"crate_id":2,"path":["core","marker","Unpin"],"kind":"trait"},"17:9162:6234":{"crate_id":17,"path":["object","common","FileFlags"],"kind":"enum"},"17:11738:6898":{"crate_id":17,"path":["object","elf","Versym"],"kind":"struct"},"12:377:5742":{"crate_id":12,"path":["hashbrown","raw","RawIter"],"kind":"struct"},"12:949:4708":{"crate_id":12,"path":["hashbrown","map","RawOccupiedEntryMut"],"kind":"struct"},"6:4272:8238":{"crate_id":6,"path":["libc","unix","linux_like","linux","posix_spawn_file_actions_t"],"kind":"struct"},"12:1200:5737":{"crate_id":12,"path":["hashbrown","map","OccupiedEntryRef"],"kind":"struct"},"11:54:5725":{"crate_id":11,"path":["adler","Adler32"],"kind":"struct"},"17:10502:9042":{"crate_id":17,"path":["object","read","elf","version","VerdauxIterator"],"kind":"struct"},"24:4931:116":{"crate_id":24,"path":["syn","token","Eq"],"kind":"struct"},"24:6078:3125":{"crate_id":24,"path":["syn","mac","MacroDelimiter"],"kind":"enum"},"17:12040:6960":{"crate_id":17,"path":["object","macho","LcStr"],"kind":"struct"},"2:11015:5300":{"crate_id":2,"path":["core","slice","iter","RSplit"],"kind":"struct"},"2:52979:8909":{"crate_id":2,"path":["core","core_arch","x86","__m256i"],"kind":"struct"},"17:12408:7041":{"crate_id":17,"path":["object","macho","DylibModule64"],"kind":"struct"},"5:7050:3195":{"crate_id":5,"path":["alloc","vec","into_iter","IntoIter"],"kind":"struct"},"24:5732:3084":{"crate_id":24,"path":["syn","expr","ExprCast"],"kind":"struct"},"18:766:6686":{"crate_id":18,"path":["memchr","memmem","twoway","ApproximateByteSet"],"kind":"struct"},"17:11186:9045":{"crate_id":17,"path":["object","read","ObjectMap"],"kind":"struct"},"22:542:3210":{"crate_id":22,"path":["proc_macro2","LexError"],"kind":"struct"},"17:13810:7445":{"crate_id":17,"path":["object","pe","ImageRuntimeFunctionEntry"],"kind":"struct"},"1:14329:58955":{"crate_id":1,"path":["std","sys","unix","kernel_copy","SpliceMode"],"kind":"enum"},"17:9769:62864":{"crate_id":17,"path":["object","read","any","ComdatIteratorInternal"],"kind":"enum"},"2:46172:5081":{"crate_id":2,"path":["core","iter","adapters","copied","Copied"],"kind":"struct"},"5:6090:202":{"crate_id":5,"path":["alloc","string","ToString"],"kind":"trait"},"16:5330:6758":{"crate_id":16,"path":["gimli","endianity","BigEndian"],"kind":"struct"},"0:0:1590":{"crate_id":0,"path":["serde_derive"],"kind":"module"},"2:46003:5478":{"crate_id":2,"path":["core","char","CaseMappingIter"],"kind":"enum"},"17:10623:47663":{"crate_id":17,"path":["object","read","macho","file","MachOComdatSectionIterator"],"kind":"struct"},"2:10980:5299":{"crate_id":2,"path":["core","slice","iter","SplitInclusiveMut"],"kind":"struct"},"17:10950:47740":{"crate_id":17,"path":["object","read","pe","file","PeComdatSectionIterator"],"kind":"struct"},"2:46331:5099":{"crate_id":2,"path":["core","iter","adapters","step_by","StepBy"],"kind":"struct"},"15:0:2911":{"crate_id":15,"path":["addr2line"],"kind":"module"},"16:6605:5850":{"crate_id":16,"path":["gimli","read","loclists","LocationLists"],"kind":"struct"},"2:48374:138":{"crate_id":2,"path":["core","hash","sip","Hasher"],"kind":"struct"},"1:12034:4697":{"crate_id":1,"path":["std","time","SystemTimeError"],"kind":"struct"},"17:11001:47714":{"crate_id":17,"path":["object","read","pe","section","PeSection"],"kind":"struct"},"6:5528:8536":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","sysinfo"],"kind":"struct"},"6:6614:8713":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","not_x32","statvfs"],"kind":"struct"},"1:9435:6551":{"crate_id":1,"path":["std","sys_common","mutex","MovableMutex"],"kind":"struct"},"1:15679:2943":{"crate_id":1,"path":["std","i16"],"kind":"primitive"},"1:15635:9215":{"crate_id":1,"path":["std","backtrace_rs","symbolize","gimli","Cache"],"kind":"struct"},"2:49599:5045":{"crate_id":2,"path":["core","str","pattern","EmptyNeedle"],"kind":"struct"},"2:11738:6531":{"crate_id":2,"path":["core","slice","sort","CopyOnDrop"],"kind":"struct"},"24:4123:3356":{"crate_id":24,"path":["syn","token","Typeof"],"kind":"struct"},"17:11981:6952":{"crate_id":17,"path":["object","macho","FatArch64"],"kind":"struct"},"24:6216:1695":{"crate_id":24,"path":["syn","ty","Type"],"kind":"enum"},"2:10903:5297":{"crate_id":2,"path":["core","slice","iter","SplitInclusive"],"kind":"struct"},"17:13429:7323":{"crate_id":17,"path":["object","pe","ImageExportDirectory"],"kind":"struct"},"9:776:5652":{"crate_id":9,"path":["miniz_oxide","deflate","CompressionLevel"],"kind":"enum"},"1:2723:4588":{"crate_id":1,"path":["std","error","Report"],"kind":"struct"},"2:11053:5301":{"crate_id":2,"path":["core","slice","iter","RSplitMut"],"kind":"struct"},"2:4569:5113":{"crate_id":2,"path":["core","asserting","Capture"],"kind":"struct"},"24:4948:3381":{"crate_id":24,"path":["syn","token","EqEq"],"kind":"struct"},"22:964:1772":{"crate_id":22,"path":["proc_macro2","Spacing"],"kind":"enum"},"2:24142:5384":{"crate_id":2,"path":["core","num","nonzero","NonZeroU16"],"kind":"struct"},"1:15682:2946":{"crate_id":1,"path":["std","i128"],"kind":"primitive"},"24:3925:3352":{"crate_id":24,"path":["syn","token","Pub"],"kind":"struct"},"1:10905:4587":{"crate_id":1,"path":["std","io","Chain"],"kind":"struct"},"16:7420:5856":{"crate_id":16,"path":["gimli","read","unit","UnitOffset"],"kind":"struct"},"2:6348:61339":{"crate_id":2,"path":["core","iter","adapters","flatten","TrustedConstSize"],"kind":"trait"},"17:9005:47449":{"crate_id":17,"path":["object","common","ComdatKind"],"kind":"enum"},"2:3186:197":{"crate_id":2,"path":["core","marker","StructuralEq"],"kind":"trait"},"1:13964:4645":{"crate_id":1,"path":["std","sys","unix","stdio","Stdout"],"kind":"struct"},"6:5953:8573":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statfs"],"kind":"struct"},"1:15669:2933":{"crate_id":1,"path":["std","char"],"kind":"primitive"},"16:2843:6085":{"crate_id":16,"path":["gimli","common","DebugAddrBase"],"kind":"struct"},"1:15174:5765":{"crate_id":1,"path":["std","backtrace_rs","backtrace","libunwind","Frame"],"kind":"enum"},"17:11640:6880":{"crate_id":17,"path":["object","elf","Rela32"],"kind":"struct"},"16:6136:5874":{"crate_id":16,"path":["gimli","read","abbrev","AttributeSpecification"],"kind":"struct"},"2:45989:5476":{"crate_id":2,"path":["core","char","ToLowercase"],"kind":"struct"},"6:525:7856":{"crate_id":6,"path":["libc","unix","timeval"],"kind":"struct"},"1:4295:4644":{"crate_id":1,"path":["std","io","stdio","StdinLock"],"kind":"struct"},"5:7806:5535":{"crate_id":5,"path":["alloc","collections","binary_heap","DrainSorted"],"kind":"struct"},"1:10479:13069":{"crate_id":1,"path":["std","env","VarError"],"kind":"enum"},"1:15026:4879":{"crate_id":1,"path":["std","sys_common","net","TcpStream"],"kind":"struct"},"2:23738:8748":{"crate_id":2,"path":["core","num","flt2dec","decoder","Decoded"],"kind":"struct"},"6:5185:8393":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__exit_status"],"kind":"struct"},"17:9065:47451":{"crate_id":17,"path":["object","common","SymbolScope"],"kind":"enum"},"1:14739:8996":{"crate_id":1,"path":["std","sys","unix","time","Timespec"],"kind":"struct"},"1:11920:4742":{"crate_id":1,"path":["std","sync","mpsc","RecvTimeoutError"],"kind":"enum"},"16:7174:5924":{"crate_id":16,"path":["gimli","read","pubnames","PubNamesEntry"],"kind":"struct"},"16:6252:5906":{"crate_id":16,"path":["gimli","read","line","LineRows"],"kind":"struct"},"1:1132:4593":{"crate_id":1,"path":["std","backtrace","Backtrace"],"kind":"struct"},"17:13865:7461":{"crate_id":17,"path":["object","pe","ImageEnclaveImport"],"kind":"struct"},"1:3251:4848":{"crate_id":1,"path":["std","fs","canonicalize"],"kind":"function"},"21:3449:3298":{"crate_id":21,"path":["proc_macro","SourceFile"],"kind":"struct"},"24:5141:3395":{"crate_id":24,"path":["syn","token","Rem"],"kind":"struct"},"2:50581:8845":{"crate_id":2,"path":["core","core_arch","simd","u8x2"],"kind":"struct"},"17:12741:7092":{"crate_id":17,"path":["object","macho","Nlist32"],"kind":"struct"},"16:0:2912":{"crate_id":16,"path":["gimli"],"kind":"module"},"1:9423:59491":{"crate_id":1,"path":["std","sys_common","mutex","StaticMutex"],"kind":"struct"},"24:5758:3090":{"crate_id":24,"path":["syn","expr","ExprIf"],"kind":"struct"},"24:299:1709":{"crate_id":24,"path":["syn","ident","Ident"],"kind":"function"},"16:4477:7522":{"crate_id":16,"path":["gimli","constants","DwAccess"],"kind":"struct"},"21:1184:2421":{"crate_id":21,"path":["proc_macro","bridge","client","Literal"],"kind":"struct"},"12:840:4701":{"crate_id":12,"path":["hashbrown","map","Keys"],"kind":"struct"},"1:15689:2953":{"crate_id":1,"path":["std","usize"],"kind":"primitive"},"24:3439:3334":{"crate_id":24,"path":["syn","token","Become"],"kind":"struct"},"2:23846:5405":{"crate_id":2,"path":["core","num","error","ParseIntError"],"kind":"struct"},"17:10331:6217":{"crate_id":17,"path":["object","read","elf","symbol","SymbolTable"],"kind":"struct"},"24:1271:6316":{"crate_id":24,"path":["syn","lit","LitRepr"],"kind":"struct"},"1:5549:4603":{"crate_id":1,"path":["std","os","unix","ffi","os_str","OsStrExt"],"kind":"trait"},"12:925:4703":{"crate_id":12,"path":["hashbrown","map","ValuesMut"],"kind":"struct"},"2:51193:5165":{"crate_id":2,"path":["core","core_arch","simd","i16x8"],"kind":"struct"},"22:855:1698":{"crate_id":22,"path":["proc_macro2","imp","Group"],"kind":"enum"},"14:56:1709":{"crate_id":14,"path":["rustc_demangle","v0","Ident"],"kind":"struct"},"12:937:4707":{"crate_id":12,"path":["hashbrown","map","RawEntryMut"],"kind":"enum"},"2:45512:180":{"crate_id":2,"path":["core","ops","range","RangeTo"],"kind":"struct"},"16:6620:6117":{"crate_id":16,"path":["gimli","read","loclists","LocListsFormat"],"kind":"enum"},"20:187:3646":{"crate_id":20,"path":["quote","__private","ThereIsNoIteratorInRepetition"],"kind":"struct"},"2:46120:6525":{"crate_id":2,"path":["core","ffi","VaListImpl"],"kind":"struct"},"17:8929:47448":{"crate_id":17,"path":["object","common","BinaryFormat"],"kind":"enum"},"6:6644:8716":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","align","sem_t"],"kind":"struct"},"2:13640:61338":{"crate_id":2,"path":["core","future","from_generator","GenFuture"],"kind":"struct"},"5:3152:1746":{"crate_id":5,"path":["alloc","collections","btree","set","Union"],"kind":"struct"},"24:3907:3351":{"crate_id":24,"path":["syn","token","Priv"],"kind":"struct"},"5:4015:3200":{"crate_id":5,"path":["alloc","collections","vec_deque","iter_mut","IterMut"],"kind":"struct"},"1:0:1291":{"crate_id":1,"path":["std"],"kind":"module"},"1:6353:4683":{"crate_id":1,"path":["std","os","unix","process","ExitStatusExt"],"kind":"trait"},"17:12221:6990":{"crate_id":17,"path":["object","macho","SubUmbrellaCommand"],"kind":"struct"},"24:3457:1756":{"crate_id":24,"path":["syn","token","Box"],"kind":"struct"},"6:4262:8231":{"crate_id":6,"path":["libc","unix","linux_like","linux","mntent"],"kind":"struct"},"16:2912:6087":{"crate_id":16,"path":["gimli","common","DebugInfoOffset"],"kind":"struct"},"22:769:1773":{"crate_id":22,"path":["proc_macro2","fallback","Span"],"kind":"struct"},"18:811:6273":{"crate_id":18,"path":["memchr","memmem","Finder"],"kind":"struct"},"1:12478:4840":{"crate_id":1,"path":["std","sys","unix","fs","ReadDir"],"kind":"struct"},"6:5414:8509":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_exit"],"kind":"struct"},"2:46578:9120":{"crate_id":2,"path":["core","iter","sources","successors","Successors"],"kind":"struct"},"24:5428:1723":{"crate_id":24,"path":["syn","data","Variant"],"kind":"struct"},"1:10737:4818":{"crate_id":1,"path":["std","io","error","SimpleMessage"],"kind":"struct"},"2:45966:5475":{"crate_id":2,"path":["core","char","EscapeDefaultState"],"kind":"enum"},"6:6636:8714":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","align","max_align_t"],"kind":"struct"},"24:5989:3114":{"crate_id":24,"path":["syn","generics","PredicateEq"],"kind":"struct"},"1:14483:4604":{"crate_id":1,"path":["std","sys","unix","os_str","Buf"],"kind":"struct"},"16:7250:5931":{"crate_id":16,"path":["gimli","read","rnglists","DebugRngLists"],"kind":"struct"},"2:3187:100":{"crate_id":2,"path":["core","marker","Copy"],"kind":"trait"},"18:829:6275":{"crate_id":18,"path":["memchr","memmem","FinderBuilder"],"kind":"struct"},"2:13494:61294":{"crate_id":2,"path":["core","future","join","MaybeDone"],"kind":"enum"},"1:7666:4809":{"crate_id":1,"path":["std","process","exit"],"kind":"function"},"2:22543:4599":{"crate_id":2,"path":["core","core_simd","lane_count","SupportedLaneCount"],"kind":"trait"},"16:4671:7527":{"crate_id":16,"path":["gimli","constants","DwId"],"kind":"struct"},"1:14899:4759":{"crate_id":1,"path":["std","sys_common","wtf8","Wtf8CodePoints"],"kind":"struct"},"16:5472:5882":{"crate_id":16,"path":["gimli","read","cfi","BaseAddresses"],"kind":"struct"},"24:3997:3354":{"crate_id":24,"path":["syn","token","SelfValue"],"kind":"struct"},"2:10031:3286":{"crate_id":2,"path":["core","fmt","UpperHex"],"kind":"trait"},"2:45996:5477":{"crate_id":2,"path":["core","char","ToUppercase"],"kind":"struct"},"1:5978:4889":{"crate_id":1,"path":["std","os","unix","net","datagram","UnixDatagram"],"kind":"struct"},"1:15670:2934":{"crate_id":1,"path":["std","unit"],"kind":"primitive"},"9:809:4774":{"crate_id":9,"path":["miniz_oxide","inflate","core","State"],"kind":"enum"},"2:22685:4584":{"crate_id":2,"path":["core","core_simd","masks","to_bitmask","sealed","Sealed"],"kind":"trait"},"16:6101:5831":{"crate_id":16,"path":["gimli","read","abbrev","Abbreviations"],"kind":"struct"},"24:5857:2199":{"crate_id":24,"path":["syn","expr","Index"],"kind":"struct"},"22:836:54005":{"crate_id":22,"path":["proc_macro2","imp","TokenTreeIter"],"kind":"enum"},"17:13192:7268":{"crate_id":17,"path":["object","pe","AnonObjectHeader"],"kind":"struct"},"16:5766:5894":{"crate_id":16,"path":["gimli","read","cfi","UnwindTableRow"],"kind":"struct"},"1:11871:4739":{"crate_id":1,"path":["std","sync","mpsc","SendError"],"kind":"struct"},"24:4653:3219":{"crate_id":24,"path":["syn","token","Add"],"kind":"struct"},"2:48842:5311":{"crate_id":2,"path":["core","slice","iter","ChunksExactMut"],"kind":"struct"},"1:15064:4880":{"crate_id":1,"path":["std","sys_common","net","TcpListener"],"kind":"struct"},"2:49895:183":{"crate_id":2,"path":["core","future","ready","Ready"],"kind":"struct"},"6:1744:8056":{"crate_id":6,"path":["libc","unix","linux_like","utsname"],"kind":"struct"},"21:1029:4546":{"crate_id":21,"path":["proc_macro","bridge","client","FreeFunctions"],"kind":"struct"},"2:3662:5072":{"crate_id":2,"path":["core","ops","try_trait","NeverShortCircuitResidual"],"kind":"enum"},"1:14496:4808":{"crate_id":1,"path":["std","sys","unix","process","process_common","ExitCode"],"kind":"struct"},"22:934:1698":{"crate_id":22,"path":["proc_macro2","Group"],"kind":"struct"},"6:4040:8170":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_replay"],"kind":"struct"},"2:7373:2538":{"crate_id":2,"path":["core","iter","adapters","zip","zip"],"kind":"function"},"16:5580:6067":{"crate_id":16,"path":["gimli","read","cfi","AugmentationData"],"kind":"struct"},"2:47486:84":{"crate_id":2,"path":["core","sync","atomic","AtomicU32"],"kind":"struct"},"17:299:62858":{"crate_id":17,"path":["object","read","util","DebugLen"],"kind":"struct"},"1:14479:9404":{"crate_id":1,"path":["std","sys","unix","os","JoinPathsError"],"kind":"struct"},"18:636:6676":{"crate_id":18,"path":["memchr","memmem","genericsimd","Forward"],"kind":"struct"},"5:7789:5534":{"crate_id":5,"path":["alloc","collections","binary_heap","IntoIterSorted"],"kind":"struct"},"2:52892:5194":{"crate_id":2,"path":["core","core_arch","simd","u64x8"],"kind":"struct"},"6:6858:8719":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_rwlockattr_t"],"kind":"struct"},"24:3943:3268":{"crate_id":24,"path":["syn","token","Ref"],"kind":"struct"},"16:7185:5925":{"crate_id":16,"path":["gimli","read","pubnames","DebugPubNames"],"kind":"struct"},"1:900:4150":{"crate_id":1,"path":["std","thread","scoped","ScopedJoinHandle"],"kind":"struct"},"2:46558:4259":{"crate_id":2,"path":["core","iter","sources","repeat","Repeat"],"kind":"struct"},"16:3338:6076":{"crate_id":16,"path":["gimli","common","DebugFrameOffset"],"kind":"struct"},"12:877:4496":{"crate_id":12,"path":["hashbrown","map","DrainFilter"],"kind":"struct"},"17:13041:7212":{"crate_id":17,"path":["object","pe","ImageFileHeader"],"kind":"struct"},"24:5745:3087":{"crate_id":24,"path":["syn","expr","ExprField"],"kind":"struct"},"17:10584:6195":{"crate_id":17,"path":["object","read","macho","file","MachOFile"],"kind":"struct"},"2:46042:5417":{"crate_id":2,"path":["core","ffi","c_str","FromBytesWithNulError"],"kind":"struct"},"18:744:62874":{"crate_id":18,"path":["memchr","memmem","twoway","SuffixKind"],"kind":"enum"},"5:3468:3196":{"crate_id":5,"path":["alloc","collections","linked_list","Iter"],"kind":"struct"},"2:49958:5362":{"crate_id":2,"path":["core","task","wake","RawWakerVTable"],"kind":"struct"},"17:12287:6999":{"crate_id":17,"path":["object","macho","RoutinesCommand32"],"kind":"struct"},"24:5383:3064":{"crate_id":24,"path":["syn","attr","AttrStyle"],"kind":"enum"},"6:5359:8486":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","regex_t"],"kind":"struct"},"1:10625:121":{"crate_id":1,"path":["std","fs","FileType"],"kind":"struct"},"24:3853:3348":{"crate_id":24,"path":["syn","token","Move"],"kind":"struct"},"17:11304:47465":{"crate_id":17,"path":["object","read","RelocationTarget"],"kind":"enum"},"2:48404:9124":{"crate_id":2,"path":["core","hash","sip","Sip24Rounds"],"kind":"struct"},"1:9567:6552":{"crate_id":1,"path":["std","sys_common","rwlock","StaticRwLockReadGuard"],"kind":"struct"},"1:5615:4566":{"crate_id":1,"path":["std","os","unix","fs","FileExt"],"kind":"trait"},"2:49779:4700":{"crate_id":2,"path":["core","time","FromFloatSecsError"],"kind":"struct"},"21:671:3303":{"crate_id":21,"path":["proc_macro","diagnostic","MultiSpan"],"kind":"trait"},"24:5293:3406":{"crate_id":24,"path":["syn","token","Tilde"],"kind":"struct"},"2:23382:4584":{"crate_id":2,"path":["core","core_simd","vector","sealed","Sealed"],"kind":"trait"},"16:3429:5824":{"crate_id":16,"path":["gimli","common","SectionId"],"kind":"enum"},"24:5767:3092":{"crate_id":24,"path":["syn","expr","ExprLet"],"kind":"struct"},"1:5272:4880":{"crate_id":1,"path":["std","net","tcp","TcpListener"],"kind":"struct"},"24:0:1564":{"crate_id":24,"path":["syn"],"kind":"module"},"2:7459:5013":{"crate_id":2,"path":["core","iter","adapters","zip","TrustedRandomAccessNoCoerce"],"kind":"trait"},"1:14905:4760":{"crate_id":1,"path":["std","sys_common","wtf8","EncodeWide"],"kind":"struct"},"2:48386:4774":{"crate_id":2,"path":["core","hash","sip","State"],"kind":"struct"},"2:3012:5026":{"crate_id":2,"path":["core","convert","num","FloatToInt"],"kind":"trait"},"17:10529:9043":{"crate_id":17,"path":["object","read","elf","version","VernauxIterator"],"kind":"struct"},"6:3972:8137":{"crate_id":6,"path":["libc","unix","linux_like","linux","if_nameindex"],"kind":"struct"},"24:5962:1845":{"crate_id":24,"path":["syn","generics","WherePredicate"],"kind":"enum"},"24:2189:1703":{"crate_id":24,"path":["syn","punctuated","Punctuated"],"kind":"struct"},"17:13318:7296":{"crate_id":17,"path":["object","pe","ImageAuxSymbolFunction"],"kind":"struct"},"2:45535:179":{"crate_id":2,"path":["core","ops","range","RangeInclusive"],"kind":"struct"},"16:3218:6093":{"crate_id":16,"path":["gimli","common","DebugStrOffset"],"kind":"struct"},"24:3727:3343":{"crate_id":24,"path":["syn","token","Impl"],"kind":"struct"},"17:13258:7285":{"crate_id":17,"path":["object","pe","ImageSymbol"],"kind":"struct"},"6:3892:8085":{"crate_id":6,"path":["libc","unix","linux_like","linux","spwd"],"kind":"struct"},"2:46549:9119":{"crate_id":2,"path":["core","iter","sources","once_with","OnceWith"],"kind":"struct"},"15:230:5756":{"crate_id":15,"path":["addr2line","LocationRangeIter"],"kind":"struct"},"2:13807:183":{"crate_id":2,"path":["core","task","ready","Ready"],"kind":"struct"},"24:4267:213":{"crate_id":24,"path":["syn","token","Yield"],"kind":"struct"},"17:13506:7346":{"crate_id":17,"path":["object","pe","ImageDelayloadDescriptor"],"kind":"struct"},"2:24414:5389":{"crate_id":2,"path":["core","num","nonzero","NonZeroI64"],"kind":"struct"},"6:4449:8323":{"crate_id":6,"path":["libc","unix","linux_like","linux","dirent64"],"kind":"struct"},"1:4602:4621":{"crate_id":1,"path":["std","io","Seek"],"kind":"trait"},"17:11082:6192":{"crate_id":17,"path":["object","read","SectionIndex"],"kind":"struct"},"1:4887:4665":{"crate_id":1,"path":["std","net","addr","ToSocketAddrs"],"kind":"trait"},"2:3481:2199":{"crate_id":2,"path":["core","ops","index","Index"],"kind":"trait"},"2:49163:5333":{"crate_id":2,"path":["core","str","iter","MatchIndices"],"kind":"struct"},"5:5217:5512":{"crate_id":5,"path":["alloc","rc","Weak"],"kind":"struct"},"24:4195:3359":{"crate_id":24,"path":["syn","token","Use"],"kind":"struct"},"17:13205:7273":{"crate_id":17,"path":["object","pe","AnonObjectHeaderV2"],"kind":"struct"},"16:4448:7521":{"crate_id":16,"path":["gimli","constants","DwEnd"],"kind":"struct"},"2:24346:5388":{"crate_id":2,"path":["core","num","nonzero","NonZeroI16"],"kind":"struct"},"16:5753:5893":{"crate_id":16,"path":["gimli","read","cfi","RegisterRuleIter"],"kind":"struct"},"1:10413:4135":{"crate_id":1,"path":["std","thread","Thread"],"kind":"struct"},"17:10001:47509":{"crate_id":17,"path":["object","read","archive","ArchiveKind"],"kind":"enum"},"17:12073:6970":{"crate_id":17,"path":["object","macho","SegmentCommand64"],"kind":"struct"},"24:5390:167":{"crate_id":24,"path":["syn","attr","Meta","Path"],"kind":"foreign_type"},"5:7852:3195":{"crate_id":5,"path":["alloc","collections","btree","set","IntoIter"],"kind":"struct"},"2:13756:5363":{"crate_id":2,"path":["core","task","wake","Waker"],"kind":"struct"},"24:161:4065":{"crate_id":24,"path":["syn","token","private","WithSpan"],"kind":"struct"},"2:3250:3404":{"crate_id":2,"path":["core","ops","arith","Sub"],"kind":"trait"},"17:10236:6163":{"crate_id":17,"path":["object","read","elf","file","ElfFile"],"kind":"struct"},"2:46210:5085":{"crate_id":2,"path":["core","iter","adapters","filter_map","FilterMap"],"kind":"struct"},"2:2138:1019":{"crate_id":2,"path":["core","ptr"],"kind":"module"},"1:3953:187":{"crate_id":1,"path":["std","io","error","Result"],"kind":"typedef"},"5:8092:5498":{"crate_id":5,"path":["alloc","string","FromUtf16Error"],"kind":"struct"},"16:7333:5854":{"crate_id":16,"path":["gimli","read","rnglists","RngListIter"],"kind":"struct"},"1:10368:4584":{"crate_id":1,"path":["std","sealed","Sealed"],"kind":"trait"},"16:5632:5888":{"crate_id":16,"path":["gimli","read","cfi","PartialFrameDescriptionEntry"],"kind":"struct"},"6:5969:8585":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","flock"],"kind":"struct"},"2:4545:5110":{"crate_id":2,"path":["core","asserting","TryCaptureWithoutDebug"],"kind":"struct"},"6:4066:8182":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_ramp_effect"],"kind":"struct"},"2:7810:4650":{"crate_id":2,"path":["core","iter","sources","empty","Empty"],"kind":"struct"},"2:8116:3311":{"crate_id":2,"path":["core","iter","traits","collect","Extend"],"kind":"trait"},"2:55590:5119":{"crate_id":2,"path":["core","core_simd","swizzle","Which"],"kind":"enum"},"16:4417:7520":{"crate_id":16,"path":["gimli","constants","DwDs"],"kind":"struct"},"1:3563:4629":{"crate_id":1,"path":["std","io","buffered","bufwriter","WriterPanicked"],"kind":"struct"},"2:49416:5033":{"crate_id":2,"path":["core","str","pattern","CharSearcher"],"kind":"struct"},"17:1311:6260":{"crate_id":17,"path":["object","read","coff","relocation","CoffRelocationIterator"],"kind":"struct"},"16:3522:6688":{"crate_id":16,"path":["gimli","arch","Arm"],"kind":"struct"},"1:4584:3282":{"crate_id":1,"path":["std","io","Write"],"kind":"trait"},"1:7543:4802":{"crate_id":1,"path":["std","process","ChildStderr"],"kind":"struct"},"17:13819:7447":{"crate_id":17,"path":["object","pe","ImageEnclaveConfig32"],"kind":"struct"},"20:290:1999":{"crate_id":20,"path":["quote","__private","push_lifetime","Lifetime"],"kind":"struct"},"17:10407:6240":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdatIterator"],"kind":"struct"},"2:3621:5412":{"crate_id":2,"path":["core","ops","range","OneSidedRange"],"kind":"trait"},"12:774:3195":{"crate_id":12,"path":["hashbrown","map","IntoIter"],"kind":"struct"},"2:47276:79":{"crate_id":2,"path":["core","sync","atomic","AtomicI8"],"kind":"struct"},"24:4213:3360":{"crate_id":24,"path":["syn","token","Virtual"],"kind":"struct"},"16:6413:5753":{"crate_id":16,"path":["gimli","read","line","LineSequence"],"kind":"struct"},"5:1837:4496":{"crate_id":5,"path":["alloc","collections","btree","map","DrainFilter"],"kind":"struct"},"17:13532:7356":{"crate_id":17,"path":["object","pe","ImageResourceDirectoryEntry"],"kind":"struct"},"24:6118:1923":{"crate_id":24,"path":["syn","derive","DataUnion"],"kind":"struct"},"17:13062:7221":{"crate_id":17,"path":["object","pe","ImageOptionalHeader32"],"kind":"struct"},"17:10912:47729":{"crate_id":17,"path":["object","read","pe","file","PeFile"],"kind":"struct"},"1:6215:4898":{"crate_id":1,"path":["std","os","unix","net","stream","UnixStream"],"kind":"struct"},"24:6292:3130":{"crate_id":24,"path":["syn","ty","TypeArray"],"kind":"struct"},"1:2183:4824":{"crate_id":1,"path":["std","collections","hash","set","SymmetricDifference"],"kind":"struct"},"24:5750:3088":{"crate_id":24,"path":["syn","expr","ExprForLoop"],"kind":"struct"},"2:2774:92":{"crate_id":2,"path":["core","borrow","Borrow"],"kind":"trait"},"17:13296:7292":{"crate_id":17,"path":["object","pe","ImageSymbolExBytes"],"kind":"struct"},"2:51989:5155":{"crate_id":2,"path":["core","core_arch","simd","f32x8"],"kind":"struct"},"2:3304:4825":{"crate_id":2,"path":["core","ops","bit","BitAnd"],"kind":"trait"},"17:10435:47566":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdatSectionIterator"],"kind":"struct"},"1:7557:4803":{"crate_id":1,"path":["std","process","Command"],"kind":"struct"},"6:4193:8226":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Sym"],"kind":"struct"},"24:2854:6304":{"crate_id":24,"path":["syn","lookahead","TokenMarker"],"kind":"enum"},"16:7303:5932":{"crate_id":16,"path":["gimli","read","rnglists","RawRngListEntry"],"kind":"enum"},"24:2063:3252":{"crate_id":24,"path":["syn","buffer","Cursor"],"kind":"struct"},"4:0:2904":{"crate_id":4,"path":["rustc_std_workspace_core"],"kind":"module"},"2:31908:4217":{"crate_id":2,"path":["core","mem","manually_drop","ManuallyDrop"],"kind":"struct"},"2:46233:5086":{"crate_id":2,"path":["core","iter","adapters","fuse","Fuse"],"kind":"struct"},"1:14855:4751":{"crate_id":1,"path":["std","sys_common","wtf8","CodePoint"],"kind":"struct"},"16:6021:6084":{"crate_id":16,"path":["gimli","read","dwarf","RangeIterInner"],"kind":"enum"},"1:10611:4580":{"crate_id":1,"path":["std","fs","Permissions"],"kind":"struct"},"6:5945:8568":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","sigaction"],"kind":"struct"},"17:13446:7330":{"crate_id":17,"path":["object","pe","ImageImportByName"],"kind":"struct"},"1:1018:4136":{"crate_id":1,"path":["std","thread","Packet"],"kind":"struct"},"2:23287:4598":{"crate_id":2,"path":["core","core_simd","vector","Simd"],"kind":"struct"},"6:1596:7964":{"crate_id":6,"path":["libc","unix","linux_like","fd_set"],"kind":"struct"},"17:11847:6930":{"crate_id":17,"path":["object","elf","GnuHashHeader"],"kind":"struct"},"2:2188:4420":{"crate_id":2,"path":["core","ptr","metadata","Pointee"],"kind":"trait"},"2:10836:3200":{"crate_id":2,"path":["core","slice","iter","IterMut"],"kind":"struct"},"2:24380:4811":{"crate_id":2,"path":["core","num","nonzero","NonZeroI32"],"kind":"struct"},"24:5883:2142":{"crate_id":24,"path":["syn","generics","GenericParam"],"kind":"enum"},"24:5908:2401":{"crate_id":24,"path":["syn","generics","LifetimeDef"],"kind":"struct"},"17:10673:47664":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandVariant"],"kind":"enum"},"16:3604:6692":{"crate_id":16,"path":["gimli","arch","X86_64"],"kind":"struct"},"17:13370:7312":{"crate_id":17,"path":["object","pe","ImageAuxSymbolCrc"],"kind":"struct"},"17:11118:47464":{"crate_id":17,"path":["object","read","SymbolSection"],"kind":"enum"},"2:46342:4625":{"crate_id":2,"path":["core","iter","adapters","take","Take"],"kind":"struct"},"24:5822:3105":{"crate_id":24,"path":["syn","expr","ExprTryBlock"],"kind":"struct"},"2:1886:2140":{"crate_id":2,"path":["core","mem"],"kind":"module"},"16:5505:5884":{"crate_id":16,"path":["gimli","read","cfi","CfiEntriesIter"],"kind":"struct"},"1:12134:6330":{"crate_id":1,"path":["std","sys","unix","args","Args"],"kind":"struct"},"2:47226:3196":{"crate_id":2,"path":["core","result","Iter"],"kind":"struct"},"1:2159:3195":{"crate_id":1,"path":["std","collections","hash","set","IntoIter"],"kind":"struct"},"16:5407:5878":{"crate_id":16,"path":["gimli","read","cfi","ParsedEhFrameHdr"],"kind":"struct"},"2:48173:4081":{"crate_id":2,"path":["core","fmt","FlagV1"],"kind":"enum"},"1:10643:110":{"crate_id":1,"path":["std","fs","DirBuilder"],"kind":"struct"},"6:5522:8535":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","sigset_t"],"kind":"struct"},"6:5563:8561":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","semid_ds"],"kind":"struct"},"1:2027:137":{"crate_id":1,"path":["std","collections","hash","set","HashSet"],"kind":"struct"},"21:1360:1709":{"crate_id":21,"path":["proc_macro","bridge","client","Ident"],"kind":"struct"},"17:11653:6882":{"crate_id":17,"path":["object","elf","Rel64"],"kind":"struct"},"2:22692:17219":{"crate_id":2,"path":["core","core_simd","masks","to_bitmask","ToBitMask"],"kind":"trait"},"24:3781:3346":{"crate_id":24,"path":["syn","token","Loop"],"kind":"struct"},"21:1246:3303":{"crate_id":21,"path":["proc_macro","bridge","client","MultiSpan"],"kind":"struct"},"24:5754:3089":{"crate_id":24,"path":["syn","expr","ExprGroup"],"kind":"struct"},"6:6910:8732":{"crate_id":6,"path":["libc","unix","linux_like","linux","canfd_frame"],"kind":"struct"},"24:6309:3133":{"crate_id":24,"path":["syn","ty","TypeImplTrait"],"kind":"struct"},"6:1630:7985":{"crate_id":6,"path":["libc","unix","linux_like","lconv"],"kind":"struct"},"1:4527:4585":{"crate_id":1,"path":["std","io","Read"],"kind":"trait"},"5:3591:3252":{"crate_id":5,"path":["alloc","collections","linked_list","Cursor"],"kind":"struct"},"1:15684:2948":{"crate_id":1,"path":["std","u16"],"kind":"primitive"},"18:866:6278":{"crate_id":18,"path":["memchr","memmem","SearcherKind"],"kind":"enum"},"17:13842:7460":{"crate_id":17,"path":["object","pe","ImageEnclaveConfig64"],"kind":"struct"},"10:0:2907":{"crate_id":10,"path":["rustc_std_workspace_alloc"],"kind":"module"},"6:6005:8601":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stat"],"kind":"struct"},"2:52950:8906":{"crate_id":2,"path":["core","core_arch","x86","__m128i"],"kind":"struct"},"6:6812:8717":{"crate_id":6,"path":["libc","unix","linux_like","linux","arch","generic","termios2"],"kind":"struct"},"1:10651:4860":{"crate_id":1,"path":["std","io","buffered","linewritershim","LineWriterShim"],"kind":"struct"},"24:5930:3112":{"crate_id":24,"path":["syn","generics","BoundLifetimes"],"kind":"struct"},"22:938:3211":{"crate_id":22,"path":["proc_macro2","Delimiter"],"kind":"enum"},"17:10543:6811":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCache"],"kind":"struct"},"2:3288:5000":{"crate_id":2,"path":["core","ops","arith","DivAssign"],"kind":"trait"},"16:6110:5873":{"crate_id":16,"path":["gimli","read","abbrev","Abbreviation"],"kind":"struct"},"6:6106:8633":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_fpstate"],"kind":"struct"},"6:3990:8149":{"crate_id":6,"path":["libc","unix","linux_like","linux","sembuf"],"kind":"struct"},"24:2274:3192":{"crate_id":24,"path":["syn","punctuated","Pairs"],"kind":"struct"},"18:774:6676":{"crate_id":18,"path":["memchr","memmem","x86","avx","nostd","Forward"],"kind":"struct"},"17:10844:6217":{"crate_id":17,"path":["object","read","macho","symbol","SymbolTable"],"kind":"struct"},"5:2418:5567":{"crate_id":5,"path":["alloc","collections","btree","node","NodeRef"],"kind":"struct"},"18:660:6285":{"crate_id":18,"path":["memchr","memmem","prefilter","PrefilterState"],"kind":"struct"},"1:15688:2952":{"crate_id":1,"path":["std","isize"],"kind":"primitive"},"1:10667:3252":{"crate_id":1,"path":["std","io","cursor","Cursor"],"kind":"struct"},"1:5754:4941":{"crate_id":1,"path":["std","os","unix","net","addr","AsciiEscaped"],"kind":"struct"},"2:3177:192":{"crate_id":2,"path":["core","marker","Send"],"kind":"trait"},"1:8507:4905":{"crate_id":1,"path":["std","sync","barrier","Barrier"],"kind":"struct"},"6:563:7881":{"crate_id":6,"path":["libc","unix","ipv6_mreq"],"kind":"struct"},"6:4005:8155":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_id"],"kind":"struct"},"6:3905:8095":{"crate_id":6,"path":["libc","unix","linux_like","linux","dqblk"],"kind":"struct"},"1:2177:4823":{"crate_id":1,"path":["std","collections","hash","set","Difference"],"kind":"struct"},"2:45581:3225":{"crate_id":2,"path":["core","ops","range","Bound"],"kind":"enum"},"16:5029:7538":{"crate_id":16,"path":["gimli","constants","DwRle"],"kind":"struct"},"2:48596:5484":{"crate_id":2,"path":["core","slice","ascii","EscapeByte"],"kind":"struct"},"1:10915:4625":{"crate_id":1,"path":["std","io","Take"],"kind":"struct"},"2:49913:172":{"crate_id":2,"path":["core","task","poll","Poll"],"kind":"enum"},"2:49217:5336":{"crate_id":2,"path":["core","str","iter","Matches"],"kind":"struct"},"16:6807:5919":{"crate_id":16,"path":["gimli","read","op","Operation"],"kind":"enum"},"5:3145:4822":{"crate_id":5,"path":["alloc","collections","btree","set","Intersection"],"kind":"struct"},"24:5100:3392":{"crate_id":24,"path":["syn","token","Question"],"kind":"struct"},"24:6306:3132":{"crate_id":24,"path":["syn","ty","TypeGroup"],"kind":"struct"},"17:13306:7293":{"crate_id":17,"path":["object","pe","ImageAuxSymbolTokenDef"],"kind":"struct"},"24:5281:3405":{"crate_id":24,"path":["syn","token","SubEq"],"kind":"struct"},"2:6227:5088":{"crate_id":2,"path":["core","iter","adapters","flatten","Flatten"],"kind":"struct"},"2:48878:5313":{"crate_id":2,"path":["core","slice","iter","ArrayChunks"],"kind":"struct"},"1:3113:4409":{"crate_id":1,"path":["std","fs","read"],"kind":"function"},"16:7870:5842":{"crate_id":16,"path":["gimli","read","unit","DebugTypes"],"kind":"struct"},"24:5953:2396":{"crate_id":24,"path":["syn","generics","TraitBoundModifier"],"kind":"enum"},"24:6312:3134":{"crate_id":24,"path":["syn","ty","TypeInfer"],"kind":"struct"},"14:0:2910":{"crate_id":14,"path":["rustc_demangle"],"kind":"module"},"6:5407:8508":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_entry"],"kind":"struct"},"21:3360:1567":{"crate_id":21,"path":["proc_macro","TokenStream"],"kind":"struct"},"5:3457:152":{"crate_id":5,"path":["alloc","collections","linked_list","LinkedList"],"kind":"struct"},"17:9971:62866":{"crate_id":17,"path":["object","read","any","SectionRelocationIteratorInternal"],"kind":"enum"},"17:13590:7370":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation64"],"kind":"struct"},"2:0:461":{"crate_id":2,"path":["core"],"kind":"module"},"24:6360:167":{"crate_id":24,"path":["syn","path","Path"],"kind":"struct"},"17:10266:6157":{"crate_id":17,"path":["object","read","elf","segment","ElfSegment"],"kind":"struct"},"17:10887:6808":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbol"],"kind":"struct"},"2:49181:5334":{"crate_id":2,"path":["core","str","iter","RMatchIndices"],"kind":"struct"},"1:1633:4712":{"crate_id":1,"path":["std","collections","hash","map","OccupiedEntry"],"kind":"struct"},"16:3118:6101":{"crate_id":16,"path":["gimli","common","RawRangeListsOffset"],"kind":"struct"},"21:3369:3295":{"crate_id":21,"path":["proc_macro","ExpandError"],"kind":"struct"},"16:6366:5754":{"crate_id":16,"path":["gimli","read","line","LineRow"],"kind":"struct"},"6:6221:8704":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user_fpregs_struct"],"kind":"struct"},"12:747:3196":{"crate_id":12,"path":["hashbrown","map","Iter"],"kind":"struct"},"1:10594:4664":{"crate_id":1,"path":["std","fs","Metadata"],"kind":"struct"},"6:605:7904":{"crate_id":6,"path":["libc","unix","sigval"],"kind":"struct"},"16:7894:5871":{"crate_id":16,"path":["gimli","read","value","ValueType"],"kind":"enum"},"6:4325:8264":{"crate_id":6,"path":["libc","unix","linux_like","linux","fanotify_response"],"kind":"struct"},"1:4468:4259":{"crate_id":1,"path":["std","io","util","Repeat"],"kind":"struct"},"16:5421:5879":{"crate_id":16,"path":["gimli","read","cfi","EhHdrTable"],"kind":"struct"},"2:50698:5163":{"crate_id":2,"path":["core","core_arch","simd","i16x2"],"kind":"struct"},"1:6753:4563":{"crate_id":1,"path":["std","os","fd","raw","AsRawFd"],"kind":"trait"},"17:11947:6942":{"crate_id":17,"path":["object","macho","DyldCacheImageInfo"],"kind":"struct"},"5:6443:4610":{"crate_id":5,"path":["alloc","sync","from_iter_exact","Guard"],"kind":"struct"},"17:12467:7047":{"crate_id":17,"path":["object","macho","PrebindCksumCommand"],"kind":"struct"},"6:4371:8288":{"crate_id":6,"path":["libc","unix","linux_like","linux","can_filter"],"kind":"struct"},"17:11794:6916":{"crate_id":17,"path":["object","elf","Vernaux"],"kind":"struct"},"1:10496:9404":{"crate_id":1,"path":["std","env","JoinPathsError"],"kind":"struct"},"6:4395:8298":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_fprog"],"kind":"struct"},"6:1584:7956":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_ll"],"kind":"struct"},"1:6825:4565":{"crate_id":1,"path":["std","os","fd","owned","OwnedFd"],"kind":"struct"},"2:3205:3990":{"crate_id":2,"path":["core","marker","Freeze"],"kind":"trait"},"1:5631:4568":{"crate_id":1,"path":["std","os","unix","fs","OpenOptionsExt"],"kind":"trait"},"6:5269:8431":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_pktinfo"],"kind":"struct"},"2:50867:5164":{"crate_id":2,"path":["core","core_arch","simd","i16x4"],"kind":"struct"},"21:1091:4547":{"crate_id":21,"path":["proc_macro","bridge","client","TokenStreamBuilder"],"kind":"struct"},"18:667:6286":{"crate_id":18,"path":["memchr","memmem","rabinkarp","NeedleHash"],"kind":"struct"},"17:11572:6867":{"crate_id":17,"path":["object","elf","Sym32"],"kind":"struct"},"16:3018:6089":{"crate_id":16,"path":["gimli","common","DebugLocListsBase"],"kind":"struct"},"17:13394:7317":{"crate_id":17,"path":["object","pe","ImageBaseRelocation"],"kind":"struct"},"24:3889:3350":{"crate_id":24,"path":["syn","token","Override"],"kind":"struct"},"1:11960:4913":{"crate_id":1,"path":["std","sync","condvar","WaitTimeoutResult"],"kind":"struct"},"16:5456:5881":{"crate_id":16,"path":["gimli","read","cfi","CieOffsetEncoding"],"kind":"enum"},"24:6318:3137":{"crate_id":24,"path":["syn","ty","TypeParen"],"kind":"struct"},"1:9516:4873":{"crate_id":1,"path":["std","sys_common","remutex","ReentrantMutex"],"kind":"struct"},"24:5806:3101":{"crate_id":24,"path":["syn","expr","ExprRepeat"],"kind":"struct"},"17:12725:7090":{"crate_id":17,"path":["object","macho","NoteCommand"],"kind":"struct"},"1:11331:4775":{"crate_id":1,"path":["std","path","PrefixComponent"],"kind":"struct"},"1:7895:4136":{"crate_id":1,"path":["std","sync","mpsc","oneshot","Packet"],"kind":"struct"},"24:4849:3375":{"crate_id":24,"path":["syn","token","DivEq"],"kind":"struct"},"18:704:6676":{"crate_id":18,"path":["memchr","memmem","twoway","Forward"],"kind":"struct"},"17:13172:7262":{"crate_id":17,"path":["object","pe","ImageRomHeaders"],"kind":"struct"},"16:2945:6110":{"crate_id":16,"path":["gimli","common","DebugLineOffset"],"kind":"struct"},"2:46191:5083":{"crate_id":2,"path":["core","iter","adapters","enumerate","Enumerate"],"kind":"struct"},"5:1000:3196":{"crate_id":5,"path":["alloc","collections","binary_heap","Iter"],"kind":"struct"},"12:1235:5738":{"crate_id":12,"path":["hashbrown","map","VacantEntryRef"],"kind":"struct"},"24:4087:203":{"crate_id":24,"path":["syn","token","Try"],"kind":"struct"},"2:47156:3618":{"crate_id":2,"path":["core","panic","panic_info","PanicInfo"],"kind":"struct"},"16:6780:5918":{"crate_id":16,"path":["gimli","read","op","DieReference"],"kind":"enum"},"17:11482:1709":{"crate_id":17,"path":["object","elf","Ident"],"kind":"struct"},"22:716:3252":{"crate_id":22,"path":["proc_macro2","parse","Cursor"],"kind":"struct"},"17:10403:6216":{"crate_id":17,"path":["object","read","elf","relocation","RelocationSections"],"kind":"struct"},"1:4258:4865":{"crate_id":1,"path":["std","io","stdio","StdoutRaw"],"kind":"struct"},"5:8069:196":{"crate_id":5,"path":["alloc","string","String"],"kind":"struct"},"6:1547:7933":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr"],"kind":"struct"},"17:13477:7338":{"crate_id":17,"path":["object","pe","ImageImportDescriptor"],"kind":"struct"},"1:9069:4830":{"crate_id":1,"path":["std","lazy","SyncOnceCell"],"kind":"struct"},"6:4459:8324":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_alg"],"kind":"struct"},"5:6788:6519":{"crate_id":5,"path":["alloc","vec","drain_filter","drop","BackshiftOnDrop"],"kind":"struct"},"17:13180:7263":{"crate_id":17,"path":["object","pe","Guid"],"kind":"struct"},"5:6631:5506":{"crate_id":5,"path":["alloc","task","Wake"],"kind":"trait"},"2:22537:4597":{"crate_id":2,"path":["core","core_simd","lane_count","LaneCount"],"kind":"struct"},"16:5672:5889":{"crate_id":16,"path":["gimli","read","cfi","FrameDescriptionEntry"],"kind":"struct"},"17:10140:6217":{"crate_id":17,"path":["object","read","coff","symbol","SymbolTable"],"kind":"struct"},"24:4972:3383":{"crate_id":24,"path":["syn","token","Gt"],"kind":"struct"},"16:6718:6122":{"crate_id":16,"path":["gimli","read","lookup","DebugLookup"],"kind":"struct"},"17:9210:47454":{"crate_id":17,"path":["object","common","SymbolFlags"],"kind":"enum"},"18:720:6677":{"crate_id":18,"path":["memchr","memmem","twoway","TwoWay"],"kind":"struct"},"1:14319:4620":{"crate_id":1,"path":["std","sys","unix","io","IoSlice"],"kind":"struct"},"17:10071:6259":{"crate_id":17,"path":["object","read","coff","file","CoffFile"],"kind":"struct"},"16:3264:6095":{"crate_id":16,"path":["gimli","common","DebugStrOffsetsIndex"],"kind":"struct"},"2:3086:205":{"crate_id":2,"path":["core","convert","TryInto"],"kind":"trait"},"2:8302:149":{"crate_id":2,"path":["core","iter","traits","iterator","Iterator"],"kind":"trait"},"2:23644:5217":{"crate_id":2,"path":["core","num","dec2flt","common","BiasedFp"],"kind":"struct"},"22:365:3210":{"crate_id":22,"path":["proc_macro2","imp","LexError"],"kind":"enum"},"1:14633:6564":{"crate_id":1,"path":["std","sys","unix","process","process_inner","posix_spawn","PosixSpawnattr"],"kind":"struct"},"16:7146:5922":{"crate_id":16,"path":["gimli","read","op","OperationIter"],"kind":"struct"},"17:9245:6158":{"crate_id":17,"path":["object","endian","Endianness"],"kind":"enum"},"1:1149:12093":{"crate_id":1,"path":["std","backtrace","BacktraceFrame"],"kind":"struct"},"1:1507:4707":{"crate_id":1,"path":["std","collections","hash","map","RawEntryMut"],"kind":"enum"},"2:50804:8847":{"crate_id":2,"path":["core","core_arch","simd","u64x1"],"kind":"struct"},"6:1617:7978":{"crate_id":6,"path":["libc","unix","linux_like","sched_param"],"kind":"struct"},"24:5826:3106":{"crate_id":24,"path":["syn","expr","ExprTuple"],"kind":"struct"},"16:7392:5841":{"crate_id":16,"path":["gimli","read","str","DebugStrOffsets"],"kind":"struct"},"21:3330:6301":{"crate_id":21,"path":["proc_macro","diagnostic","Children"],"kind":"struct"},"2:48852:5312":{"crate_id":2,"path":["core","slice","iter","ArrayWindows"],"kind":"struct"},"6:4364:8286":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_j1939"],"kind":"struct"},"24:3367:3330":{"crate_id":24,"path":["syn","token","As"],"kind":"struct"},"20:350:2423":{"crate_id":20,"path":["quote","spanned","Spanned"],"kind":"trait"},"22:735:1567":{"crate_id":22,"path":["proc_macro2","fallback","TokenStream"],"kind":"struct"},"1:11161:4881":{"crate_id":1,"path":["std","os","unix","net","listener","Incoming"],"kind":"struct"},"16:5941:171":{"crate_id":16,"path":["gimli","read","cfi","Pointer"],"kind":"enum"},"6:1723:8049":{"crate_id":6,"path":["libc","unix","linux_like","epoll_event"],"kind":"struct"},"17:10571:47660":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCacheImage"],"kind":"struct"},"17:12168:6779":{"crate_id":17,"path":["object","macho","Dylib"],"kind":"struct"},"1:11153:4892":{"crate_id":1,"path":["std","os","unix","net","ancillary","SocketAncillary"],"kind":"struct"},"12:866:4498":{"crate_id":12,"path":["hashbrown","map","Drain"],"kind":"struct"},"24:6316:3136":{"crate_id":24,"path":["syn","ty","TypeNever"],"kind":"struct"},"2:9036:3621":{"crate_id":2,"path":["core","panic","unwind_safe","UnwindSafe"],"kind":"trait"},"2:3195:2342":{"crate_id":2,"path":["core","marker","PhantomData"],"kind":"struct"},"2:45960:3293":{"crate_id":2,"path":["core","char","EscapeDefault"],"kind":"struct"},"17:12552:7061":{"crate_id":17,"path":["object","macho","EncryptionInfoCommand64"],"kind":"struct"},"17:11406:6827":{"crate_id":17,"path":["object","archive","Header"],"kind":"struct"},"17:12645:7082":{"crate_id":17,"path":["object","macho","SymsegCommand"],"kind":"struct"},"17:13933:7481":{"crate_id":17,"path":["object","pe","ImageFunctionEntry64"],"kind":"struct"},"22:785:1709":{"crate_id":22,"path":["proc_macro2","fallback","Ident"],"kind":"struct"},"1:783:6555":{"crate_id":1,"path":["std","thread","local","fast","Key"],"kind":"struct"},"17:11628:6877":{"crate_id":17,"path":["object","elf","Rel32"],"kind":"struct"},"2:3083:127":{"crate_id":2,"path":["core","convert","From"],"kind":"trait"},"5:3679:6508":{"crate_id":5,"path":["alloc","collections","linked_list","drop","DropGuard"],"kind":"struct"},"2:10623:4584":{"crate_id":2,"path":["core","slice","index","private_slice_index","Sealed"],"kind":"trait"},"2:48989:5325":{"crate_id":2,"path":["core","str","iter","CharIndices"],"kind":"struct"},"1:3249:4847":{"crate_id":1,"path":["std","fs","read_link"],"kind":"function"},"2:4492:4610":{"crate_id":2,"path":["core","array","try_collect_into_array","Guard"],"kind":"struct"},"12:892:5727":{"crate_id":12,"path":["hashbrown","map","ConsumeAllOnDrop"],"kind":"struct"},"1:10965:4668":{"crate_id":1,"path":["std","net","addr","SocketAddrV4"],"kind":"struct"},"17:13760:7433":{"crate_id":17,"path":["object","pe","ImageHotPatchHashes"],"kind":"struct"},"2:51476:8859":{"crate_id":2,"path":["core","core_arch","simd","m64x2"],"kind":"struct"},"24:3691:3341":{"crate_id":24,"path":["syn","token","For"],"kind":"struct"},"1:10604:4579":{"crate_id":1,"path":["std","fs","OpenOptions"],"kind":"struct"},"16:7843:5934":{"crate_id":16,"path":["gimli","read","unit","EntriesTreeNode"],"kind":"struct"},"24:5719:3081":{"crate_id":24,"path":["syn","expr","ExprBox"],"kind":"struct"},"1:10500:1866":{"crate_id":1,"path":["std","error","private","Internal"],"kind":"struct"},"1:4334:4646":{"crate_id":1,"path":["std","io","stdio","StdoutLock"],"kind":"struct"},"9:1020:5672":{"crate_id":9,"path":["miniz_oxide","MZError"],"kind":"enum"},"17:13780:7439":{"crate_id":17,"path":["object","pe","ImageArm64RuntimeFunctionEntry"],"kind":"struct"},"17:12385:7032":{"crate_id":17,"path":["object","macho","DylibModule32"],"kind":"struct"},"5:8164:4497":{"crate_id":5,"path":["alloc","vec","splice","Splice"],"kind":"struct"},"9:603:9205":{"crate_id":9,"path":["miniz_oxide","inflate","stream","InflateState"],"kind":"struct"},"6:5998:8597":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stack_t"],"kind":"struct"},"2:49462:5040":{"crate_id":2,"path":["core","str","pattern","CharArrayRefSearcher"],"kind":"struct"},"1:1619:4711":{"crate_id":1,"path":["std","collections","hash","map","Entry"],"kind":"enum"},"22:739:3210":{"crate_id":22,"path":["proc_macro2","fallback","LexError"],"kind":"struct"},"16:2773:6111":{"crate_id":16,"path":["gimli","common","LineEncoding"],"kind":"struct"},"2:57005:8926":{"crate_id":2,"path":["core","core_simd","vector","ptr","SimdMutPtr"],"kind":"struct"},"24:1160:1999":{"crate_id":24,"path":["syn","lifetime","Lifetime"],"kind":"struct"},"12:2025:4822":{"crate_id":12,"path":["hashbrown","set","Intersection"],"kind":"struct"},"6:1540:7931":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreq_source"],"kind":"struct"},"24:5042:3388":{"crate_id":24,"path":["syn","token","Or"],"kind":"struct"},"17:9528:2686":{"crate_id":17,"path":["object","read","util","Bytes"],"kind":"struct"},"1:5693:4574":{"crate_id":1,"path":["std","os","unix","fs","DirBuilderExt"],"kind":"trait"},"17:13154:7257":{"crate_id":17,"path":["object","pe","ImageNtHeaders64"],"kind":"struct"},"1:14611:6562":{"crate_id":1,"path":["std","sys","unix","process","process_inner","do_exec","Reset"],"kind":"struct"},"16:6269:5907":{"crate_id":16,"path":["gimli","read","line","LineInstruction"],"kind":"enum"},"2:22739:5151":{"crate_id":2,"path":["core","core_simd","masks","Mask"],"kind":"struct"},"1:9664:6555":{"crate_id":1,"path":["std","sys_common","thread_local_key","Key"],"kind":"struct"},"1:2362:571":{"crate_id":1,"path":["std","env"],"kind":"module"},"2:46242:5091":{"crate_id":2,"path":["core","iter","adapters","inspect","Inspect"],"kind":"struct"},"1:3233:4394":{"crate_id":1,"path":["std","fs","metadata"],"kind":"function"},"24:5199:3399":{"crate_id":24,"path":["syn","token","Shl"],"kind":"struct"},"1:8721:4198":{"crate_id":1,"path":["std","sync","once","Once"],"kind":"struct"},"1:1472:4498":{"crate_id":1,"path":["std","collections","hash","map","Drain"],"kind":"struct"},"1:3108:120":{"crate_id":1,"path":["std","fs","File"],"kind":"struct"},"2:8107:143":{"crate_id":2,"path":["core","iter","traits","collect","IntoIterator"],"kind":"trait"},"17:11328:7097":{"crate_id":17,"path":["object","read","Relocation"],"kind":"struct"},"1:11798:58508":{"crate_id":1,"path":["std","sync","mpsc","shared","StartResult"],"kind":"enum"},"1:2458:13080":{"crate_id":1,"path":["std","env","ArgsOs"],"kind":"struct"},"17:13240:7277":{"crate_id":17,"path":["object","pe","ImageSectionHeader"],"kind":"struct"},"6:4439:8317":{"crate_id":6,"path":["libc","unix","linux_like","linux","dirent"],"kind":"struct"},"2:12731:5028":{"crate_id":2,"path":["core","str","pattern"],"kind":"module"},"2:3644:5069":{"crate_id":2,"path":["core","ops","try_trait","Residual"],"kind":"trait"},"2:3309:3980":{"crate_id":2,"path":["core","ops","bit","BitOr"],"kind":"trait"},"5:7981:96":{"crate_id":5,"path":["alloc","ffi","c_str","CString"],"kind":"struct"},"24:5842:3110":{"crate_id":24,"path":["syn","expr","ExprWhile"],"kind":"struct"},"12:853:4702":{"crate_id":12,"path":["hashbrown","map","Values"],"kind":"struct"},"22:985:2421":{"crate_id":22,"path":["proc_macro2","Literal"],"kind":"struct"},"2:32007:60183":{"crate_id":2,"path":["core","mem","valid_align","ValidAlignEnum32"],"kind":"enum"},"17:11147:9044":{"crate_id":17,"path":["object","read","SymbolMap"],"kind":"struct"},"17:12494:7051":{"crate_id":17,"path":["object","macho","RpathCommand"],"kind":"struct"},"17:11779:6910":{"crate_id":17,"path":["object","elf","Verneed"],"kind":"struct"},"12:1253:4714":{"crate_id":12,"path":["hashbrown","map","OccupiedError"],"kind":"struct"},"17:2543:6213":{"crate_id":17,"path":["object","read","elf","relocation","ElfSectionRelocationIterator"],"kind":"struct"},"2:47088:1757":{"crate_id":2,"path":["core","option","Item"],"kind":"struct"},"17:10975:47716":{"crate_id":17,"path":["object","read","pe","section","PeSegment"],"kind":"struct"},"5:7858:176":{"crate_id":5,"path":["alloc","collections","btree","set","Range"],"kind":"struct"},"16:6014:5900":{"crate_id":16,"path":["gimli","read","dwarf","RangeIter"],"kind":"struct"},"12:968:4709":{"crate_id":12,"path":["hashbrown","map","RawVacantEntryMut"],"kind":"struct"},"24:968:2770":{"crate_id":24,"path":["syn","generics","TypeGenerics"],"kind":"struct"},"17:12783:7100":{"crate_id":17,"path":["object","macho","RelocationInfo"],"kind":"struct"},"2:47234:3200":{"crate_id":2,"path":["core","result","IterMut"],"kind":"struct"},"17:12610:7070":{"crate_id":17,"path":["object","macho","DyldInfoCommand"],"kind":"struct"},"2:24278:4142":{"crate_id":2,"path":["core","num","nonzero","NonZeroUsize"],"kind":"struct"},"6:5159:8378":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","statx_timestamp"],"kind":"struct"},"17:12343:7011":{"crate_id":17,"path":["object","macho","DysymtabCommand"],"kind":"struct"},"2:52990:8910":{"crate_id":2,"path":["core","core_arch","x86","__m256"],"kind":"struct"},"16:7477:5857":{"crate_id":16,"path":["gimli","read","unit","UnitType"],"kind":"enum"},"5:8063:8738":{"crate_id":5,"path":["alloc","slice","merge_sort","Run"],"kind":"struct"},"24:5959:2059":{"crate_id":24,"path":["syn","generics","WhereClause"],"kind":"struct"},"2:49745:5355":{"crate_id":2,"path":["core","str","IsNotEmpty"],"kind":"struct"},"5:7898:3195":{"crate_id":5,"path":["alloc","collections","linked_list","IntoIter"],"kind":"struct"},"24:5838:3109":{"crate_id":24,"path":["syn","expr","ExprUnsafe"],"kind":"struct"},"2:10016:103":{"crate_id":2,"path":["core","fmt","Debug"],"kind":"trait"},"24:4989:3384":{"crate_id":24,"path":["syn","token","Le"],"kind":"struct"},"1:14042:4135":{"crate_id":1,"path":["std","sys","unix","thread","Thread"],"kind":"struct"},"2:3011:4584":{"crate_id":2,"path":["core","convert","num","private","Sealed"],"kind":"trait"},"2:49117:5303":{"crate_id":2,"path":["core","str","iter","SplitN"],"kind":"struct"},"24:5790:3098":{"crate_id":24,"path":["syn","expr","ExprParen"],"kind":"struct"},"17:13685:7420":{"crate_id":17,"path":["object","pe","ImageLoadConfigDirectory64"],"kind":"struct"},"6:88:40522":{"crate_id":6,"path":["libc","unix","DIR"],"kind":"enum"},"1:6845:4581":{"crate_id":1,"path":["std","os","fd","owned","AsFd"],"kind":"trait"},"17:13465:7337":{"crate_id":17,"path":["object","pe","ImageTlsDirectory32"],"kind":"struct"},"24:2959:1779":{"crate_id":24,"path":["syn","parse","Parse"],"kind":"trait"},"5:3123:3196":{"crate_id":5,"path":["alloc","collections","btree","set","Iter"],"kind":"struct"},"16:6152:5835":{"crate_id":16,"path":["gimli","read","aranges","DebugAranges"],"kind":"struct"},"24:2333:3194":{"crate_id":24,"path":["syn","punctuated","IntoPairs"],"kind":"struct"},"17:510:47445":{"crate_id":17,"path":["object","read","any","Segment"],"kind":"struct"},"1:15686:2950":{"crate_id":1,"path":["std","u64"],"kind":"primitive"},"24:4919:3380":{"crate_id":24,"path":["syn","token","DotDotEq"],"kind":"struct"},"16:7042:6134":{"crate_id":16,"path":["gimli","read","op","EvaluationWaiting"],"kind":"enum"},"2:24852:5235":{"crate_id":2,"path":["core","num","saturating","Saturating"],"kind":"struct"},"21:459:6502":{"crate_id":21,"path":["proc_macro","bridge","scoped_cell","replace","PutBackOnDrop"],"kind":"struct"},"16:7378:5840":{"crate_id":16,"path":["gimli","read","str","DebugStr"],"kind":"struct"},"1:10599:4840":{"crate_id":1,"path":["std","fs","ReadDir"],"kind":"struct"},"1:14244:4690":{"crate_id":1,"path":["std","sys","unix","fd","FileDesc"],"kind":"struct"},"2:50890:5168":{"crate_id":2,"path":["core","core_arch","simd","i32x2"],"kind":"struct"}},"external_crates":{"16":{"name":"gimli","html_root_url":"https://doc.rust-lang.org/nightly/"},"21":{"name":"proc_macro","html_root_url":"https://doc.rust-lang.org/nightly/"},"9":{"name":"miniz_oxide","html_root_url":"https://doc.rust-lang.org/nightly/"},"4":{"name":"rustc_std_workspace_core","html_root_url":"https://doc.rust-lang.org/nightly/"},"22":{"name":"proc_macro2","html_root_url":"https://docs.rs/proc-macro2/1.0.39/"},"17":{"name":"object","html_root_url":"https://doc.rust-lang.org/nightly/"},"20":{"name":"quote","html_root_url":"https://docs.rs/quote/1.0.18/"},"19":{"name":"panic_unwind","html_root_url":"https://doc.rust-lang.org/nightly/"},"14":{"name":"rustc_demangle","html_root_url":"https://doc.rust-lang.org/nightly/"},"13":{"name":"std_detect","html_root_url":"https://doc.rust-lang.org/nightly/"},"10":{"name":"rustc_std_workspace_alloc","html_root_url":"https://doc.rust-lang.org/nightly/"},"11":{"name":"adler","html_root_url":"https://docs.rs/adler/0.2.3/"},"18":{"name":"memchr","html_root_url":"https://doc.rust-lang.org/nightly/"},"15":{"name":"addr2line","html_root_url":"https://doc.rust-lang.org/nightly/"},"5":{"name":"alloc","html_root_url":"https://doc.rust-lang.org/nightly/"},"6":{"name":"libc","html_root_url":"https://doc.rust-lang.org/nightly/"},"3":{"name":"compiler_builtins","html_root_url":"https://doc.rust-lang.org/nightly/"},"12":{"name":"hashbrown","html_root_url":"https://doc.rust-lang.org/nightly/"},"7":{"name":"unwind","html_root_url":"https://doc.rust-lang.org/nightly/"},"23":{"name":"unicode_ident","html_root_url":null},"1":{"name":"std","html_root_url":"https://doc.rust-lang.org/nightly/"},"24":{"name":"syn","html_root_url":"https://docs.rs/syn/1.0.96/"},"2":{"name":"core","html_root_url":"https://doc.rust-lang.org/nightly/"},"8":{"name":"cfg_if","html_root_url":"https://docs.rs/cfg-if/"}},"format_version":15}