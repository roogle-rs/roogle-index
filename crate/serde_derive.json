{"root":"0:0:1843","crate_version":"1.0.196","includes_private":false,"index":{"2:12964:35087":{"id":"2:12964:35087","crate_id":2,"name":"trim_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes and suffixes that match a\npattern repeatedly removed.\n\nThe [pattern] can be a [`char`], a slice of [`char`]s, or a function\nor closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_matches('1'), \"foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_matches(char::is_numeric), \"foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_matches(x), \"foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1foo1barXX\".trim_matches(|c| c == '1' || c == 'X'), \"foo1bar\");\n```","links":{"prim@char":"1:12068:447","self::pattern":"2:12558:3812"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12563:15773","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12563:15773","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"DoubleEndedSearcher","id":"2:12583:15772","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12866:2184":{"id":"2:12866:2184","crate_id":2,"name":"is_empty","span":null,"visibility":"public","docs":"Returns `true` if `self` has a length of zero bytes.\n\n# Examples\n\n```\nlet s = \"\";\nassert!(s.is_empty());\n\nlet s = \"not empty\";\nassert!(!s.is_empty());\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12960:35084":{"id":"2:12960:35084","crate_id":2,"name":"trim_end","span":null,"visibility":"public","docs":"Returns a string slice with trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Text directionality\n\nA string is a sequence of bytes. `end` in this context means the last\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be right side, and for right-to-left languages like\nArabic or Hebrew, this will be the left side.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\nassert_eq!(\"\\n Hello\\tworld\", s.trim_end());\n```\n\nDirectionality:\n\n```\nlet s = \"  English  \";\nassert!(Some('h') == s.trim_end().chars().rev().next());\n\nlet s = \"  עברית  \";\nassert!(Some('ת') == s.trim_end().chars().rev().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_trim_end\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5556:2214":{"id":"5:5556:2214","crate_id":5,"name":"replace","span":null,"visibility":"public","docs":"Replaces all matches of a pattern with another string.\n\n`replace` creates a new [`String`], and copies the data from this string slice into it.\nWhile doing so, it attempts to find matches of a pattern. If it finds any, it\nreplaces them with the replacement string slice.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"this is old\";\n\nassert_eq!(\"this is new\", s.replace(\"old\", \"new\"));\nassert_eq!(\"than an old\", s.replace(\"is\", \"an\"));\n```\n\nWhen the pattern doesn't match, it returns this string slice as [`String`]:\n\n```\nlet s = \"this is old\";\nassert_eq!(s, s.replace(\"cookie monster\", \"little lamb\"));\n```","links":{"`String`":"5:7571:240"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the replaced string as a new allocation, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["from",{"generic":"P"}],["to",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7571:240","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12563:15773","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12926:35077":{"id":"2:12926:35077","crate_id":2,"name":"split_terminator","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by\ncharacters matched by a pattern.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\nEquivalent to [`split`], except that the trailing substring\nis skipped if empty.\n\n[`split`]: str::split\n\nThis method can be used for string data that is _terminated_,\nrather than _separated_ by a pattern.\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rsplit_terminator`] method can be used.\n\n[`rsplit_terminator`]: str::rsplit_terminator\n\n# Examples\n\n```\nlet v: Vec<&str> = \"A.B.\".split_terminator('.').collect();\nassert_eq!(v, [\"A\", \"B\"]);\n\nlet v: Vec<&str> = \"A..B..\".split_terminator(\".\").collect();\nassert_eq!(v, [\"A\", \"\", \"B\", \"\"]);\n\nlet v: Vec<&str> = \"A.B:C.D\".split_terminator(&['.', ':'][..]).collect();\nassert_eq!(v, [\"A\", \"B\", \"C\", \"D\"]);\n```","links":{"self::pattern":"2:12558:3812","str::split":"2:12917:29087","prim@char":"1:12068:447","`DoubleEndedIterator`":"2:7942:128","str::rsplit_terminator":"2:12929:35078"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"SplitTerminator","id":"2:44225:8767","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12563:15773","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12970:27131":{"id":"2:12970:27131","crate_id":2,"name":"strip_prefix","span":null,"visibility":"public","docs":"Returns a string slice with the prefix removed.\n\nIf the string starts with the pattern `prefix`, returns substring after the prefix, wrapped\nin `Some`.  Unlike `trim_start_matches`, this method removes the prefix exactly once.\n\nIf the string does not start with `prefix`, returns `None`.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nassert_eq!(\"foo:bar\".strip_prefix(\"foo:\"), Some(\"bar\"));\nassert_eq!(\"foo:bar\".strip_prefix(\"bar\"), None);\nassert_eq!(\"foofoo\".strip_prefix(\"foo\"), Some(\"foo\"));\n```","links":{"prim@char":"1:12068:447","self::pattern":"2:12558:3812"},"attrs":["#[must_use =\n\"this returns the remaining substring as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["prefix",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:42288:191","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12563:15773","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12920:29089":{"id":"2:12920:29089","crate_id":2,"name":"split_inclusive","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by\ncharacters matched by a pattern. Differs from the iterator produced by\n`split` in that `split_inclusive` leaves the matched part as the\nterminator of the substring.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\\nlittle lamb\\nlittle lamb.\"\n    .split_inclusive('\\n').collect();\nassert_eq!(v, [\"Mary had a little lamb\\n\", \"little lamb\\n\", \"little lamb.\"]);\n```\n\nIf the last element of the string is matched,\nthat element will be considered the terminator of the preceding substring.\nThat substring will be the last item returned by the iterator.\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\\nlittle lamb\\nlittle lamb.\\n\"\n    .split_inclusive('\\n').collect();\nassert_eq!(v, [\"Mary had a little lamb\\n\", \"little lamb\\n\", \"little lamb.\\n\"]);\n```","links":{"prim@char":"1:12068:447","self::pattern":"2:12558:3812"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"SplitInclusive","id":"2:12374:8692","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12563:15773","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12929:35078":{"id":"2:12929:35078","crate_id":2,"name":"rsplit_terminator","span":null,"visibility":"public","docs":"An iterator over substrings of `self`, separated by characters\nmatched by a pattern and yielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\nEquivalent to [`split`], except that the trailing substring is\nskipped if empty.\n\n[`split`]: str::split\n\nThis method can be used for string data that is _terminated_,\nrather than _separated_ by a pattern.\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a\nreverse search, and it will be double ended if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`split_terminator`] method can be\nused.\n\n[`split_terminator`]: str::split_terminator\n\n# Examples\n\n```\nlet v: Vec<&str> = \"A.B.\".rsplit_terminator('.').collect();\nassert_eq!(v, [\"B\", \"A\"]);\n\nlet v: Vec<&str> = \"A..B..\".rsplit_terminator(\".\").collect();\nassert_eq!(v, [\"\", \"B\", \"\", \"A\"]);\n\nlet v: Vec<&str> = \"A.B:C.D\".rsplit_terminator(&['.', ':'][..]).collect();\nassert_eq!(v, [\"D\", \"C\", \"B\", \"A\"]);\n```","links":{"self::pattern":"2:12558:3812","str::split":"2:12917:29087","prim@char":"1:12068:447","str::split_terminator":"2:12926:35077"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RSplitTerminator","id":"2:44243:8768","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12563:15773","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12563:15773","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12578:15774","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12890:29086":{"id":"2:12890:29086","crate_id":2,"name":"split_at_mut_checked","span":null,"visibility":"public","docs":"Divide one mutable string slice into two at an index.\n\nThe argument, `mid`, should be a valid byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point. The\nmethod returns `None` if that’s not the case.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get immutable string slices instead, see the [`split_at_checked`] method.\n\n[`split_at_checked`]: str::split_at_checked\n\n# Examples\n\n```\n#![feature(split_at_checked)]\n\nlet mut s = \"Per Martin-Löf\".to_string();\nif let Some((first, last)) = s.split_at_mut_checked(3) {\n    first.make_ascii_uppercase();\n    assert_eq!(\"PER\", first);\n    assert_eq!(\" Martin-Löf\", last);\n}\nassert_eq!(\"PER Martin-Löf\", s);\n\nassert_eq!(None, s.split_at_mut_checked(13));  // Inside “ö”\nassert_eq!(None, s.split_at_mut_checked(16));  // Beyond the string length\n```","links":{"str::split_at_checked":"2:12889:29085"},"attrs":["#[must_use]","#[unstable(feature = \"split_at_checked\", reason = \"new API\", issue =\n\"119128\")]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["mid",{"primitive":"usize"}]],"output":{"resolved_path":{"name":"Option","id":"2:42288:191","args":{"angle_bracketed":{"args":[{"type":{"tuple":[{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12935:29095":{"id":"2:12935:29095","crate_id":2,"name":"rsplitn","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by a\npattern, starting from the end of the string, restricted to returning\nat most `n` items.\n\nIf `n` substrings are returned, the last substring (the `n`th substring)\nwill contain the remainder of the string.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will not be double ended, because it is not\nefficient to support.\n\nFor splitting from the front, the [`splitn`] method can be used.\n\n[`splitn`]: str::splitn\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".rsplitn(3, ' ').collect();\nassert_eq!(v, [\"lamb\", \"little\", \"Mary had a\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".rsplitn(3, 'X').collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"lionX\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".rsplitn(2, \"::\").collect();\nassert_eq!(v, [\"leopard\", \"lion::tiger\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".rsplitn(2, |c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"ghi\", \"abc1def\"]);\n```","links":{"prim@char":"1:12068:447","str::splitn":"2:12932:29093","self::pattern":"2:12558:3812"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["n",{"primitive":"usize"}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RSplitN","id":"2:44297:8771","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12563:15773","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12563:15773","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12578:15774","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12950:35080":{"id":"2:12950:35080","crate_id":2,"name":"match_indices","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within this string\nslice as well as the index that the match starts at.\n\nFor matches of `pat` within `self` that overlap, only the indices\ncorresponding to the first match are returned.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rmatch_indices`] method can be used.\n\n[`rmatch_indices`]: str::rmatch_indices\n\n# Examples\n\n```\nlet v: Vec<_> = \"abcXXXabcYYYabc\".match_indices(\"abc\").collect();\nassert_eq!(v, [(0, \"abc\"), (6, \"abc\"), (12, \"abc\")]);\n\nlet v: Vec<_> = \"1abcabc2\".match_indices(\"abc\").collect();\nassert_eq!(v, [(1, \"abc\"), (4, \"abc\")]);\n\nlet v: Vec<_> = \"ababa\".match_indices(\"aba\").collect();\nassert_eq!(v, [(0, \"aba\")]); // only the first `aba`\n```","links":{"self::pattern":"2:12558:3812","`DoubleEndedIterator`":"2:7942:128","prim@char":"1:12068:447","str::rmatch_indices":"2:12953:35081"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"MatchIndices","id":"2:44325:8773","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12563:15773","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12976:35088":{"id":"2:12976:35088","crate_id":2,"name":"trim_end_matches","span":null,"visibility":"public","docs":"Returns a string slice with all suffixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. `end` in this context means the last\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be right side, and for right-to-left languages like\nArabic or Hebrew, this will be the left side.\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_end_matches('1'), \"11foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_end_matches(char::is_numeric), \"123foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_end_matches(x), \"12foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1fooX\".trim_end_matches(|c| c == '1' || c == 'X'), \"1foo\");\n```","links":{"prim@char":"1:12068:447","self::pattern":"2:12558:3812"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12563:15773","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12563:15773","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12578:15774","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5562:35779":{"id":"5:5562:35779","crate_id":5,"name":"to_lowercase","span":null,"visibility":"public","docs":"Returns the lowercase equivalent of this string slice, as a new [`String`].\n\n'Lowercase' is defined according to the terms of the Unicode Derived Core Property\n`Lowercase`.\n\nSince some characters can expand into multiple characters when changing\nthe case, this function returns a [`String`] instead of modifying the\nparameter in-place.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"HELLO\";\n\nassert_eq!(\"hello\", s.to_lowercase());\n```\n\nA tricky example, with sigma:\n\n```\nlet sigma = \"Σ\";\n\nassert_eq!(\"σ\", sigma.to_lowercase());\n\n// but at the end of a word, it's ς, not σ:\nlet odysseus = \"ὈΔΥΣΣΕΎΣ\";\n\nassert_eq!(\"ὀδυσσεύς\", odysseus.to_lowercase());\n```\n\nLanguages without case are not changed:\n\n```\nlet new_year = \"农历新年\";\n\nassert_eq!(new_year, new_year.to_lowercase());\n```","links":{"`String`":"5:7571:240"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the lowercase string as a new String, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7571:240","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12923:29091":{"id":"2:12923:29091","crate_id":2,"name":"rsplit","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by\ncharacters matched by a pattern and yielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`split`] method can be used.\n\n[`split`]: str::split\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".rsplit(' ').collect();\nassert_eq!(v, [\"lamb\", \"little\", \"a\", \"had\", \"Mary\"]);\n\nlet v: Vec<&str> = \"\".rsplit('X').collect();\nassert_eq!(v, [\"\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".rsplit('X').collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"\", \"lion\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".rsplit(\"::\").collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"lion\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".rsplit(|c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"ghi\", \"def\", \"abc\"]);\n```","links":{"self::pattern":"2:12558:3812","`DoubleEndedIterator`":"2:7942:128","prim@char":"1:12068:447","str::split":"2:12917:29087"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RSplit","id":"2:44193:8693","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12563:15773","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12563:15773","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12578:15774","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12990:28165":{"id":"2:12990:28165","crate_id":2,"name":"make_ascii_uppercase","span":null,"visibility":"public","docs":"Converts this string to its ASCII upper case equivalent in-place.\n\nASCII letters 'a' to 'z' are mapped to 'A' to 'Z',\nbut non-ASCII letters are unchanged.\n\nTo return a new uppercased value without modifying the existing one, use\n[`to_ascii_uppercase()`].\n\n[`to_ascii_uppercase()`]: #method.to_ascii_uppercase\n\n# Examples\n\n```\nlet mut s = String::from(\"Grüße, Jürgen ❤\");\n\ns.make_ascii_uppercase();\n\nassert_eq!(\"GRüßE, JüRGEN ❤\", s);\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12888:29082":{"id":"2:12888:29082","crate_id":2,"name":"split_at_mut","span":null,"visibility":"public","docs":"Divide one mutable string slice into two at an index.\n\nThe argument, `mid`, should be a byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get immutable string slices instead, see the [`split_at`] method.\n\n[`split_at`]: str::split_at\n\n# Panics\n\nPanics if `mid` is not on a UTF-8 code point boundary, or if it is past\nthe end of the last code point of the string slice.  For a non-panicking\nalternative see [`split_at_mut_checked`](str::split_at_mut_checked).\n\n# Examples\n\n```\nlet mut s = \"Per Martin-Löf\".to_string();\n{\n    let (first, last) = s.split_at_mut(3);\n    first.make_ascii_uppercase();\n    assert_eq!(\"PER\", first);\n    assert_eq!(\" Martin-Löf\", last);\n}\nassert_eq!(\"PER Martin-Löf\", s);\n```","links":{"str::split_at":"2:12887:2834","str::split_at_mut_checked":"2:12890:29086"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["mid",{"primitive":"usize"}]],"output":{"tuple":[{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12886:35075":{"id":"2:12886:35075","crate_id":2,"name":"slice_mut_unchecked","span":null,"visibility":"public","docs":"Creates a string slice from another string slice, bypassing safety\nchecks.\nThis is generally not recommended, use with caution! For a safe\nalternative see [`str`] and [`IndexMut`].\n\n[`IndexMut`]: crate::ops::IndexMut\n\nThis new slice goes from `begin` to `end`, including `begin` but\nexcluding `end`.\n\nTo get an immutable string slice instead, see the\n[`slice_unchecked`] method.\n\n[`slice_unchecked`]: str::slice_unchecked\n\n# Safety\n\nCallers of this function are responsible that three preconditions are\nsatisfied:\n\n* `begin` must not exceed `end`.\n* `begin` and `end` must be byte positions within the string slice.\n* `begin` and `end` must lie on UTF-8 sequence boundaries.","links":{"`str`":"1:12074:1538","crate::ops::IndexMut":"2:3222:3417","str::slice_unchecked":"2:12885:35074"},"attrs":["#[deprecated(since = \"1.29.0\", note =\n\"use `get_unchecked_mut(begin..end)` instead\")]"],"deprecation":{"since":"1.29.0","note":"use `get_unchecked_mut(begin..end)` instead"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["begin",{"primitive":"usize"}],["end",{"primitive":"usize"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"0:0:1843":{"id":"0:0:1843","crate_id":0,"name":"serde_derive","span":{"filename":"src/lib.rs","begin":[1,0],"end":[101,1]},"visibility":"public","docs":"This crate provides Serde's two derive macros.\n\n```edition2021\n# use serde_derive::{Deserialize, Serialize};\n#\n#[derive(Serialize, Deserialize)]\n# struct S;\n#\n# fn main() {}\n```\n\nPlease refer to [https://serde.rs/derive.html] for how to set this up.\n\n[https://serde.rs/derive.html]: https://serde.rs/derive.html","links":{},"attrs":["#![doc(html_root_url = \"https://docs.rs/serde_derive/1.0.196\")]","#![allow(clippy::branches_sharing_code, clippy::cognitive_complexity,\nclippy::collapsible_match, clippy::derive_partial_eq_without_eq,\nclippy::enum_variant_names, clippy::manual_map,\nclippy::match_like_matches_macro, clippy::needless_pass_by_value,\nclippy::too_many_arguments, clippy::trivially_copy_pass_by_ref,\nclippy::used_underscore_binding, clippy::wildcard_in_or_patterns,\nclippy::unnested_or_patterns,)]","#![allow(clippy::cast_possible_truncation, clippy::checked_conversions,\nclippy::doc_markdown, clippy::enum_glob_use, clippy::indexing_slicing,\nclippy::items_after_statements, clippy::let_underscore_untyped,\nclippy::manual_assert, clippy::map_err_ignore, clippy::match_same_arms,\nclippy::match_wildcard_for_single_variants, clippy::module_name_repetitions,\nclippy::must_use_candidate, clippy::similar_names, clippy::single_match_else,\nclippy::struct_excessive_bools, clippy::too_many_lines,\nclippy::unseparated_literal_suffix, clippy::unused_self, clippy::use_self,\nclippy::wildcard_imports)]"],"deprecation":null,"inner":{"module":{"is_crate":true,"items":["0:964:1832","0:965:1840"],"is_stripped":false}}},"0:492-0:1019:1964":{"id":"0:492-0:1019:1964","crate_id":0,"name":null,"span":{"filename":"src/internals/mod.rs","begin":[13,0],"end":[13,25]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"import":{"source":"self::ctxt::Ctxt","name":"Ctxt","id":"0:1019:1964","glob":false}}},"0:63:371":{"id":"0:63:371","crate_id":0,"name":"attr","span":{"filename":"src/internals/attr.rs","begin":[1,0],"end":[1881,1]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"module":{"is_crate":false,"items":["0:86-0:994:2058"],"is_stripped":false}}},"2:12867:35070":{"id":"2:12867:35070","crate_id":2,"name":"is_char_boundary","span":null,"visibility":"public","docs":"Checks that `index`-th byte is the first byte in a UTF-8 code point\nsequence or the end of the string.\n\nThe start and end of the string (when `index == self.len()`) are\nconsidered to be boundaries.\n\nReturns `false` if `index` is greater than `self.len()`.\n\n# Examples\n\n```\nlet s = \"Löwe 老虎 Léopard\";\nassert!(s.is_char_boundary(0));\n// start of `老`\nassert!(s.is_char_boundary(6));\nassert!(s.is_char_boundary(s.len()));\n\n// second byte of `ö`\nassert!(!s.is_char_boundary(2));\n\n// third byte of `老`\nassert!(!s.is_char_boundary(8));\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["index",{"primitive":"usize"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12895:32963":{"id":"2:12895:32963","crate_id":2,"name":"split_whitespace","span":null,"visibility":"public","docs":"Splits a string slice by whitespace.\n\nThe iterator returned will return string slices that are sub-slices of\nthe original string slice, separated by any amount of whitespace.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`. If you only want to split on ASCII whitespace\ninstead, use [`split_ascii_whitespace`].\n\n[`split_ascii_whitespace`]: str::split_ascii_whitespace\n\n# Examples\n\nBasic usage:\n\n```\nlet mut iter = \"A few words\".split_whitespace();\n\nassert_eq!(Some(\"A\"), iter.next());\nassert_eq!(Some(\"few\"), iter.next());\nassert_eq!(Some(\"words\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nAll kinds of whitespace are considered:\n\n```\nlet mut iter = \" Mary   had\\ta\\u{2009}little  \\n\\t lamb\".split_whitespace();\nassert_eq!(Some(\"Mary\"), iter.next());\nassert_eq!(Some(\"had\"), iter.next());\nassert_eq!(Some(\"a\"), iter.next());\nassert_eq!(Some(\"little\"), iter.next());\nassert_eq!(Some(\"lamb\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nIf the string is empty or all whitespace, the iterator yields no string slices:\n```\nassert_eq!(\"\".split_whitespace().next(), None);\nassert_eq!(\"   \".split_whitespace().next(), None);\n```","links":{"str::split_ascii_whitespace":"2:12896:32960"},"attrs":["#[must_use =\n\"this returns the split string as an iterator, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_split_whitespace\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"SplitWhitespace","id":"2:44449:8780","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12938:29097":{"id":"2:12938:29097","crate_id":2,"name":"split_once","span":null,"visibility":"public","docs":"Splits the string on the first occurrence of the specified delimiter and\nreturns prefix before delimiter and suffix after delimiter.\n\n# Examples\n\n```\nassert_eq!(\"cfg\".split_once('='), None);\nassert_eq!(\"cfg=\".split_once('='), Some((\"cfg\", \"\")));\nassert_eq!(\"cfg=foo\".split_once('='), Some((\"cfg\", \"foo\")));\nassert_eq!(\"cfg=foo=bar\".split_once('='), Some((\"cfg\", \"foo=bar\")));\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["delimiter",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:42288:191","args":{"angle_bracketed":{"args":[{"type":{"tuple":[{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12563:15773","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12985:2053":{"id":"2:12985:2053","crate_id":2,"name":"parse","span":null,"visibility":"public","docs":"Parses this string slice into another type.\n\nBecause `parse` is so general, it can cause problems with type\ninference. As such, `parse` is one of the few times you'll see\nthe syntax affectionately known as the 'turbofish': `::<>`. This\nhelps the inference algorithm understand specifically which type\nyou're trying to parse into.\n\n`parse` can parse into any type that implements the [`FromStr`] trait.\n\n# Errors\n\nWill return [`Err`] if it's not possible to parse this string slice into\nthe desired type.\n\n[`Err`]: FromStr::Err\n\n# Examples\n\nBasic usage\n\n```\nlet four: u32 = \"4\".parse().unwrap();\n\nassert_eq!(4, four);\n```\n\nUsing the 'turbofish' instead of annotating `four`:\n\n```\nlet four = \"4\".parse::<u32>();\n\nassert_eq!(Ok(4), four);\n```\n\nFailing to parse:\n\n```\nlet nope = \"j\".parse::<u32>();\n\nassert!(nope.is_err());\n```","links":{"FromStr::Err":"2:12519:134","`FromStr`":"2:12518:3433"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Result","id":"2:42431:223","args":{"angle_bracketed":{"args":[{"type":{"generic":"F"}},{"type":{"qualified_path":{"name":"Err","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"F"},"trait":{"name":"FromStr","id":"2:12518:3433","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"F"},"bounds":[{"trait_bound":{"trait":{"name":"FromStr","id":"2:12518:3433","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12989:28164":{"id":"2:12989:28164","crate_id":2,"name":"eq_ignore_ascii_case","span":null,"visibility":"public","docs":"Checks that two strings are an ASCII case-insensitive match.\n\nSame as `to_ascii_lowercase(a) == to_ascii_lowercase(b)`,\nbut without allocating and copying temporaries.\n\n# Examples\n\n```\nassert!(\"Ferris\".eq_ignore_ascii_case(\"FERRIS\"));\nassert!(\"Ferrös\".eq_ignore_ascii_case(\"FERRöS\"));\nassert!(!\"Ferrös\".eq_ignore_ascii_case(\"FERRÖS\"));\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["other",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12998:35092":{"id":"2:12998:35092","crate_id":2,"name":"escape_unicode","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_unicode`].\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"❤\\n!\".escape_unicode() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"❤\\n!\".escape_unicode());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"\\\\u{{2764}}\\\\u{{a}}\\\\u{{21}}\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"❤\\n!\".escape_unicode().to_string(), \"\\\\u{2764}\\\\u{a}\\\\u{21}\");\n```","links":{"`char::escape_unicode`":"2:4738:35092"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EscapeUnicode","id":"2:44492:8723","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12864":{"id":"2:12864","crate_id":2,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":["#[cfg(not(test))]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"primitive":"str"},"items":["2:12865:872","2:12866:2184","2:12867:35070","2:12868:35071","2:12870:35072","2:12873:2946","2:12874:35073","2:12875:329","2:12876:29059","2:12877:2073","2:12879:29056","2:12881:29057","2:12883:29058","2:12885:35074","2:12886:35075","2:12887:2834","2:12888:29082","2:12889:29085","2:12890:29086","2:12892:2427","2:12893:2421","2:12894:8679","2:12895:32963","2:12896:32960","2:12897:31965","2:12898:35076","2:12899:32918","2:12900:2286","2:12903:28626","2:12906:28628","2:12909:2736","2:12913:4359","2:12917:29087","2:12920:29089","2:12923:29091","2:12926:35077","2:12929:35078","2:12932:29093","2:12935:29095","2:12938:29097","2:12941:29098","2:12944:2180","2:12947:35079","2:12950:35080","2:12953:35081","2:12956:35082","2:12958:35083","2:12960:35084","2:12962:35085","2:12963:35086","2:12964:35087","2:12967:2092","2:12970:27131","2:12973:29099","2:12976:35088","2:12979:35089","2:12982:35090","2:12985:2053","2:12987:28162","2:12988:28977","2:12989:28164","2:12990:28165","2:12991:28166","2:12992:28980","2:12993:28981","2:12994:28982","2:12995:35091","2:12997:10311","2:12998:35092"],"negative":false,"synthetic":false,"blanket_impl":null}}},"2:12865:872":{"id":"2:12865:872","crate_id":2,"name":"len","span":null,"visibility":"public","docs":"Returns the length of `self`.\n\nThis length is in bytes, not [`char`]s or graphemes. In other words,\nit might not be what a human considers the length of the string.\n\n[`char`]: prim@char\n\n# Examples\n\n```\nlet len = \"foo\".len();\nassert_eq!(3, len);\n\nassert_eq!(\"ƒoo\".len(), 4); // fancy f!\nassert_eq!(\"ƒoo\".chars().count(), 3);\n```","links":{"prim@char":"1:12068:447"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5570:35780":{"id":"5:5570:35780","crate_id":5,"name":"to_uppercase","span":null,"visibility":"public","docs":"Returns the uppercase equivalent of this string slice, as a new [`String`].\n\n'Uppercase' is defined according to the terms of the Unicode Derived Core Property\n`Uppercase`.\n\nSince some characters can expand into multiple characters when changing\nthe case, this function returns a [`String`] instead of modifying the\nparameter in-place.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"hello\";\n\nassert_eq!(\"HELLO\", s.to_uppercase());\n```\n\nScripts without case are not changed:\n\n```\nlet new_year = \"农历新年\";\n\nassert_eq!(new_year, new_year.to_uppercase());\n```\n\nOne character can become multiple:\n```\nlet s = \"tschüß\";\n\nassert_eq!(\"TSCHÜSS\", s.to_uppercase());\n```","links":{"`String`":"5:7571:240"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the uppercase string as a new String, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7571:240","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12881:29057":{"id":"2:12881:29057","crate_id":2,"name":"get_unchecked","span":null,"visibility":"public","docs":"Returns an unchecked subslice of `str`.\n\nThis is the unchecked alternative to indexing the `str`.\n\n# Safety\n\nCallers of this function are responsible that these preconditions are\nsatisfied:\n\n* The starting index must not exceed the ending index;\n* Indexes must be within bounds of the original slice;\n* Indexes must lie on UTF-8 sequence boundaries.\n\nFailing that, the returned string slice may reference invalid memory or\nviolate the invariants communicated by the `str` type.\n\n# Examples\n\n```\nlet v = \"🗻∈🌏\";\nunsafe {\n    assert_eq!(\"🗻\", v.get_unchecked(0..4));\n    assert_eq!(\"∈\", v.get_unchecked(4..7));\n    assert_eq!(\"🌏\", v.get_unchecked(7..11));\n}\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"2:10651:236","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"2:10651:236","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"2:12997:10311":{"id":"2:12997:10311","crate_id":2,"name":"escape_default","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_default`].\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"❤\\n!\".escape_default() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"❤\\n!\".escape_default());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"\\\\u{{2764}}\\\\n!\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"❤\\n!\".escape_default().to_string(), \"\\\\u{2764}\\\\n!\");\n```","links":{"`char::escape_default`":"2:4741:10311"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EscapeDefault","id":"2:44483:8718","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12896:32960":{"id":"2:12896:32960","crate_id":2,"name":"split_ascii_whitespace","span":null,"visibility":"public","docs":"Splits a string slice by ASCII whitespace.\n\nThe iterator returned will return string slices that are sub-slices of\nthe original string slice, separated by any amount of ASCII whitespace.\n\nTo split by Unicode `Whitespace` instead, use [`split_whitespace`].\n\n[`split_whitespace`]: str::split_whitespace\n\n# Examples\n\nBasic usage:\n\n```\nlet mut iter = \"A few words\".split_ascii_whitespace();\n\nassert_eq!(Some(\"A\"), iter.next());\nassert_eq!(Some(\"few\"), iter.next());\nassert_eq!(Some(\"words\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nAll kinds of ASCII whitespace are considered:\n\n```\nlet mut iter = \" Mary   had\\ta little  \\n\\t lamb\".split_ascii_whitespace();\nassert_eq!(Some(\"Mary\"), iter.next());\nassert_eq!(Some(\"had\"), iter.next());\nassert_eq!(Some(\"a\"), iter.next());\nassert_eq!(Some(\"little\"), iter.next());\nassert_eq!(Some(\"lamb\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nIf the string is empty or all ASCII whitespace, the iterator yields no string slices:\n```\nassert_eq!(\"\".split_ascii_whitespace().next(), None);\nassert_eq!(\"   \".split_ascii_whitespace().next(), None);\n```","links":{"str::split_whitespace":"2:12895:32963"},"attrs":["#[must_use =\n\"this returns the split string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"SplitAsciiWhitespace","id":"2:44458:8781","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12992:28980":{"id":"2:12992:28980","crate_id":2,"name":"trim_ascii_start","span":null,"visibility":"public","docs":"Returns a string slice with leading ASCII whitespace removed.\n\n'Whitespace' refers to the definition used by\n[`u8::is_ascii_whitespace`].\n\n[`u8::is_ascii_whitespace`]: u8::is_ascii_whitespace\n\n# Examples\n\n```\n#![feature(byte_slice_trim_ascii)]\n\nassert_eq!(\" \\t \\u{3000}hello world\\n\".trim_ascii_start(), \"\\u{3000}hello world\\n\");\nassert_eq!(\"  \".trim_ascii_start(), \"\");\nassert_eq!(\"\".trim_ascii_start(), \"\");\n```","links":{"u8::is_ascii_whitespace":"2:912:37328"},"attrs":["#[unstable(feature = \"byte_slice_trim_ascii\", issue = \"94035\")]","#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12877:2073":{"id":"2:12877:2073","crate_id":2,"name":"get","span":null,"visibility":"public","docs":"Returns a subslice of `str`.\n\nThis is the non-panicking alternative to indexing the `str`. Returns\n[`None`] whenever equivalent indexing operation would panic.\n\n# Examples\n\n```\nlet v = String::from(\"🗻∈🌏\");\n\nassert_eq!(Some(\"🗻\"), v.get(0..4));\n\n// indices not on UTF-8 sequence boundaries\nassert!(v.get(1..).is_none());\nassert!(v.get(..8).is_none());\n\n// out of bounds\nassert!(v.get(..42).is_none());\n```","links":{"`None`":"2:42290:188"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"resolved_path":{"name":"Option","id":"2:42288:191","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"2:10651:236","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"2:10651:236","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12906:28628":{"id":"2:12906:28628","crate_id":2,"name":"ends_with","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a suffix of this\nstring slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.ends_with(\"anas\"));\nassert!(!bananas.ends_with(\"nana\"));\n```","links":{"prim@char":"1:12068:447","self::pattern":"2:12558:3812"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12563:15773","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12563:15773","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12578:15774","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12917:29087":{"id":"2:12917:29087","crate_id":2,"name":"split","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by\ncharacters matched by a pattern.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rsplit`] method can be used.\n\n[`rsplit`]: str::rsplit\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".split(' ').collect();\nassert_eq!(v, [\"Mary\", \"had\", \"a\", \"little\", \"lamb\"]);\n\nlet v: Vec<&str> = \"\".split('X').collect();\nassert_eq!(v, [\"\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".split('X').collect();\nassert_eq!(v, [\"lion\", \"\", \"tiger\", \"leopard\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".split(\"::\").collect();\nassert_eq!(v, [\"lion\", \"tiger\", \"leopard\"]);\n\nlet v: Vec<&str> = \"abc1def2ghi\".split(char::is_numeric).collect();\nassert_eq!(v, [\"abc\", \"def\", \"ghi\"]);\n\nlet v: Vec<&str> = \"lionXtigerXleopard\".split(char::is_uppercase).collect();\nassert_eq!(v, [\"lion\", \"tiger\", \"leopard\"]);\n```\n\nIf the pattern is a slice of chars, split on each occurrence of any of the characters:\n\n```\nlet v: Vec<&str> = \"2020-11-03 23:59\".split(&['-', ' ', ':', '@'][..]).collect();\nassert_eq!(v, [\"2020\", \"11\", \"03\", \"23\", \"59\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".split(|c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"abc\", \"def\", \"ghi\"]);\n```\n\nIf a string contains multiple contiguous separators, you will end up\nwith empty strings in the output:\n\n```\nlet x = \"||||a||b|c\".to_string();\nlet d: Vec<_> = x.split('|').collect();\n\nassert_eq!(d, &[\"\", \"\", \"\", \"\", \"a\", \"\", \"b\", \"c\"]);\n```\n\nContiguous separators are separated by the empty string.\n\n```\nlet x = \"(///)\".to_string();\nlet d: Vec<_> = x.split('/').collect();\n\nassert_eq!(d, &[\"(\", \"\", \"\", \")\"]);\n```\n\nSeparators at the start or end of a string are neighbored\nby empty strings.\n\n```\nlet d: Vec<_> = \"010\".split(\"0\").collect();\nassert_eq!(d, &[\"\", \"1\", \"\"]);\n```\n\nWhen the empty string is used as a separator, it separates\nevery character in the string, along with the beginning\nand end of the string.\n\n```\nlet f: Vec<_> = \"rust\".split(\"\").collect();\nassert_eq!(f, &[\"\", \"r\", \"u\", \"s\", \"t\", \"\"]);\n```\n\nContiguous separators can lead to possibly surprising behavior\nwhen whitespace is used as the separator. This code is correct:\n\n```\nlet x = \"    a  b c\".to_string();\nlet d: Vec<_> = x.split(' ').collect();\n\nassert_eq!(d, &[\"\", \"\", \"\", \"\", \"a\", \"\", \"b\", \"c\"]);\n```\n\nIt does _not_ give you:\n\n```,ignore\nassert_eq!(d, &[\"a\", \"b\", \"c\"]);\n```\n\nUse [`split_whitespace`] for this behavior.\n\n[`split_whitespace`]: str::split_whitespace","links":{"self::pattern":"2:12558:3812","`DoubleEndedIterator`":"2:7942:128","prim@char":"1:12068:447","str::split_whitespace":"2:12895:32963","str::rsplit":"2:12923:29091"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Split","id":"2:44175:8690","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12563:15773","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12944:2180":{"id":"2:12944:2180","crate_id":2,"name":"matches","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within the given string\nslice.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rmatches`] method can be used.\n\n[`rmatches`]: str::rmatches\n\n# Examples\n\n```\nlet v: Vec<&str> = \"abcXXXabcYYYabc\".matches(\"abc\").collect();\nassert_eq!(v, [\"abc\", \"abc\", \"abc\"]);\n\nlet v: Vec<&str> = \"1abc2abc3\".matches(char::is_numeric).collect();\nassert_eq!(v, [\"1\", \"2\", \"3\"]);\n```","links":{"self::pattern":"2:12558:3812","`DoubleEndedIterator`":"2:7942:128","prim@char":"1:12068:447","str::rmatches":"2:12947:35079"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Matches","id":"2:44379:8776","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12563:15773","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12995:35091":{"id":"2:12995:35091","crate_id":2,"name":"escape_debug","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_debug`].\n\nNote: only extended grapheme codepoints that begin the string will be\nescaped.\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"❤\\n!\".escape_debug() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"❤\\n!\".escape_debug());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"❤\\\\n!\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"❤\\n!\".escape_debug().to_string(), \"❤\\\\n!\");\n```","links":{"`char::escape_debug`":"2:4740:35091"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EscapeDebug","id":"2:44474:8724","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:8:1957":{"id":"0:8:1957","crate_id":0,"name":"ast","span":{"filename":"src/internals/ast.rs","begin":[1,0],"end":[216,1]},"visibility":"public","docs":"A Serde ast, parsed from the Syn ast and ready to generate Rust code.","links":{},"attrs":[],"deprecation":null,"inner":{"module":{"is_crate":false,"items":[],"is_stripped":false}}},"2:12913:4359":{"id":"2:12913:4359","crate_id":2,"name":"rfind","span":null,"visibility":"public","docs":"Returns the byte index for the first character of the last match of the pattern in\nthis string slice.\n\nReturns [`None`] if the pattern doesn't match.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nlet s = \"Löwe 老虎 Léopard Gepardi\";\n\nassert_eq!(s.rfind('L'), Some(13));\nassert_eq!(s.rfind('é'), Some(14));\nassert_eq!(s.rfind(\"pard\"), Some(24));\n```\n\nMore complex patterns with closures:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\n\nassert_eq!(s.rfind(char::is_whitespace), Some(12));\nassert_eq!(s.rfind(char::is_lowercase), Some(20));\n```\n\nNot finding the pattern:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\nlet x: &[_] = &['1', '2'];\n\nassert_eq!(s.rfind(x), None);\n```","links":{"`None`":"2:42290:188","prim@char":"1:12068:447","self::pattern":"2:12558:3812"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:42288:191","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12563:15773","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12563:15773","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12578:15774","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12941:29098":{"id":"2:12941:29098","crate_id":2,"name":"rsplit_once","span":null,"visibility":"public","docs":"Splits the string on the last occurrence of the specified delimiter and\nreturns prefix before delimiter and suffix after delimiter.\n\n# Examples\n\n```\nassert_eq!(\"cfg\".rsplit_once('='), None);\nassert_eq!(\"cfg=foo\".rsplit_once('='), Some((\"cfg\", \"foo\")));\nassert_eq!(\"cfg=foo=bar\".rsplit_once('='), Some((\"cfg=foo\", \"bar\")));\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["delimiter",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:42288:191","args":{"angle_bracketed":{"args":[{"type":{"tuple":[{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12563:15773","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12563:15773","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12578:15774","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12962:35085":{"id":"2:12962:35085","crate_id":2,"name":"trim_left","span":null,"visibility":"public","docs":"Returns a string slice with leading whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`.\n\n# Text directionality\n\nA string is a sequence of bytes. 'Left' in this context means the first\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _right_ side, not the left.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \" Hello\\tworld\\t\";\n\nassert_eq!(\"Hello\\tworld\\t\", s.trim_left());\n```\n\nDirectionality:\n\n```\nlet s = \"  English\";\nassert!(Some('E') == s.trim_left().chars().next());\n\nlet s = \"  עברית\";\nassert!(Some('ע') == s.trim_left().chars().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_start`\", suggestion\n= \"trim_start\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_start`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12991:28166":{"id":"2:12991:28166","crate_id":2,"name":"make_ascii_lowercase","span":null,"visibility":"public","docs":"Converts this string to its ASCII lower case equivalent in-place.\n\nASCII letters 'A' to 'Z' are mapped to 'a' to 'z',\nbut non-ASCII letters are unchanged.\n\nTo return a new lowercased value without modifying the existing one, use\n[`to_ascii_lowercase()`].\n\n[`to_ascii_lowercase()`]: #method.to_ascii_lowercase\n\n# Examples\n\n```\nlet mut s = String::from(\"GRÜßE, JÜRGEN ❤\");\n\ns.make_ascii_lowercase();\n\nassert_eq!(\"grÜße, jÜrgen ❤\", s);\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5571:35781":{"id":"5:5571:35781","crate_id":5,"name":"into_string","span":null,"visibility":"public","docs":"Converts a [`Box<str>`] into a [`String`] without copying or allocating.\n\n# Examples\n\n```\nlet string = String::from(\"birthday gift\");\nlet boxed_str = string.clone().into_boxed_str();\n\nassert_eq!(boxed_str.into_string(), string);\n```","links":{"`Box<str>`":"5:281:2028","`String`":"5:7571:240"},"attrs":["#[must_use = \"`self` will be dropped if the result is not used\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"resolved_path":{"name":"Box","id":"5:281:2028","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}]],"output":{"resolved_path":{"name":"String","id":"5:7571:240","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12885:35074":{"id":"2:12885:35074","crate_id":2,"name":"slice_unchecked","span":null,"visibility":"public","docs":"Creates a string slice from another string slice, bypassing safety\nchecks.\n\nThis is generally not recommended, use with caution! For a safe\nalternative see [`str`] and [`Index`].\n\n[`Index`]: crate::ops::Index\n\nThis new slice goes from `begin` to `end`, including `begin` but\nexcluding `end`.\n\nTo get a mutable string slice instead, see the\n[`slice_mut_unchecked`] method.\n\n[`slice_mut_unchecked`]: str::slice_mut_unchecked\n\n# Safety\n\nCallers of this function are responsible that three preconditions are\nsatisfied:\n\n* `begin` must not exceed `end`.\n* `begin` and `end` must be byte positions within the string slice.\n* `begin` and `end` must lie on UTF-8 sequence boundaries.\n\n# Examples\n\n```\nlet s = \"Löwe 老虎 Léopard\";\n\nunsafe {\n    assert_eq!(\"Löwe 老虎 Léopard\", s.slice_unchecked(0, 21));\n}\n\nlet s = \"Hello, world!\";\n\nunsafe {\n    assert_eq!(\"world\", s.slice_unchecked(7, 12));\n}\n```","links":{"`str`":"1:12074:1538","str::slice_mut_unchecked":"2:12886:35075","crate::ops::Index":"2:39907:2591"},"attrs":["#[deprecated(since = \"1.29.0\", note =\n\"use `get_unchecked(begin..end)` instead\")]","#[must_use]"],"deprecation":{"since":"1.29.0","note":"use `get_unchecked(begin..end)` instead"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["begin",{"primitive":"usize"}],["end",{"primitive":"usize"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"5:5572:3477":{"id":"5:5572:3477","crate_id":5,"name":"repeat","span":null,"visibility":"public","docs":"Creates a new [`String`] by repeating a string `n` times.\n\n# Panics\n\nThis function will panic if the capacity would overflow.\n\n# Examples\n\nBasic usage:\n\n```\nassert_eq!(\"abc\".repeat(4), String::from(\"abcabcabcabc\"));\n```\n\nA panic upon overflow:\n\n```should_panic\n// this will panic at runtime\nlet huge = \"0123456789abcdef\".repeat(usize::MAX);\n```","links":{"`String`":"5:7571:240"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["n",{"primitive":"usize"}]],"output":{"resolved_path":{"name":"String","id":"5:7571:240","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12892:2427":{"id":"2:12892:2427","crate_id":2,"name":"chars","span":null,"visibility":"public","docs":"Returns an iterator over the [`char`]s of a string slice.\n\nAs a string slice consists of valid UTF-8, we can iterate through a\nstring slice by [`char`]. This method returns such an iterator.\n\nIt's important to remember that [`char`] represents a Unicode Scalar\nValue, and might not match your idea of what a 'character' is. Iteration\nover grapheme clusters may be what you actually want. This functionality\nis not provided by Rust's standard library, check crates.io instead.\n\n# Examples\n\nBasic usage:\n\n```\nlet word = \"goodbye\";\n\nlet count = word.chars().count();\nassert_eq!(7, count);\n\nlet mut chars = word.chars();\n\nassert_eq!(Some('g'), chars.next());\nassert_eq!(Some('o'), chars.next());\nassert_eq!(Some('o'), chars.next());\nassert_eq!(Some('d'), chars.next());\nassert_eq!(Some('b'), chars.next());\nassert_eq!(Some('y'), chars.next());\nassert_eq!(Some('e'), chars.next());\n\nassert_eq!(None, chars.next());\n```\n\nRemember, [`char`]s might not match your intuition about characters:\n\n[`char`]: prim@char\n\n```\nlet y = \"y̆\";\n\nlet mut chars = y.chars();\n\nassert_eq!(Some('y'), chars.next()); // not 'y̆'\nassert_eq!(Some('\\u{0306}'), chars.next());\n\nassert_eq!(None, chars.next());\n```","links":{"prim@char":"1:12068:447"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Chars","id":"2:44145:8761","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5574:2417":{"id":"5:5574:2417","crate_id":5,"name":"to_ascii_lowercase","span":null,"visibility":"public","docs":"Returns a copy of this string where each character is mapped to its\nASCII lower case equivalent.\n\nASCII letters 'A' to 'Z' are mapped to 'a' to 'z',\nbut non-ASCII letters are unchanged.\n\nTo lowercase the value in-place, use [`make_ascii_lowercase`].\n\nTo lowercase ASCII characters in addition to non-ASCII characters, use\n[`to_lowercase`].\n\n# Examples\n\n```\nlet s = \"Grüße, Jürgen ❤\";\n\nassert_eq!(\"grüße, jürgen ❤\", s.to_ascii_lowercase());\n```\n\n[`make_ascii_lowercase`]: str::make_ascii_lowercase\n[`to_lowercase`]: #method.to_lowercase","links":{"str::make_ascii_lowercase":"2:12991:28166"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use = \"to lowercase the value in-place, use `make_ascii_lowercase()`\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7571:240","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12894:8679":{"id":"2:12894:8679","crate_id":2,"name":"bytes","span":null,"visibility":"public","docs":"An iterator over the bytes of a string slice.\n\nAs a string slice consists of a sequence of bytes, we can iterate\nthrough a string slice by byte. This method returns such an iterator.\n\n# Examples\n\n```\nlet mut bytes = \"bors\".bytes();\n\nassert_eq!(Some(b'b'), bytes.next());\nassert_eq!(Some(b'o'), bytes.next());\nassert_eq!(Some(b'r'), bytes.next());\nassert_eq!(Some(b's'), bytes.next());\n\nassert_eq!(None, bytes.next());\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Bytes","id":"2:44161:2956","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12973:29099":{"id":"2:12973:29099","crate_id":2,"name":"strip_suffix","span":null,"visibility":"public","docs":"Returns a string slice with the suffix removed.\n\nIf the string ends with the pattern `suffix`, returns the substring before the suffix,\nwrapped in `Some`.  Unlike `trim_end_matches`, this method removes the suffix exactly once.\n\nIf the string does not end with `suffix`, returns `None`.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nassert_eq!(\"bar:foo\".strip_suffix(\":foo\"), Some(\"bar\"));\nassert_eq!(\"bar:foo\".strip_suffix(\"bar\"), None);\nassert_eq!(\"foofoo\".strip_suffix(\"foo\"), Some(\"foo\"));\n```","links":{"prim@char":"1:12068:447","self::pattern":"2:12558:3812"},"attrs":["#[must_use =\n\"this returns the remaining substring as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["suffix",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:42288:191","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12563:15773","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12563:15773","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12578:15774","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:1023:2061":{"id":"0:1023:2061","crate_id":0,"name":"Symbol","span":{"filename":"src/internals/symbol.rs","begin":[5,0],"end":[5,32]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"struct":{"kind":{"tuple":[null]},"generics":{"params":[],"where_predicates":[]},"impls":[]}}},"2:12897:31965":{"id":"2:12897:31965","crate_id":2,"name":"lines","span":null,"visibility":"public","docs":"An iterator over the lines of a string, as string slices.\n\nLines are split at line endings that are either newlines (`\\n`) or\nsequences of a carriage return followed by a line feed (`\\r\\n`).\n\nLine terminators are not included in the lines returned by the iterator.\n\nNote that any carriage return (`\\r`) not immediately followed by a\nline feed (`\\n`) does not split a line. These carriage returns are\nthereby included in the produced lines.\n\nThe final line ending is optional. A string that ends with a final line\nending will return the same lines as an otherwise identical string\nwithout a final line ending.\n\n# Examples\n\nBasic usage:\n\n```\nlet text = \"foo\\r\\nbar\\n\\nbaz\\r\";\nlet mut lines = text.lines();\n\nassert_eq!(Some(\"foo\"), lines.next());\nassert_eq!(Some(\"bar\"), lines.next());\nassert_eq!(Some(\"\"), lines.next());\n// Trailing carriage return is included in the last line\nassert_eq!(Some(\"baz\\r\"), lines.next());\n\nassert_eq!(None, lines.next());\n```\n\nThe final line does not require any ending:\n\n```\nlet text = \"foo\\nbar\\n\\r\\nbaz\";\nlet mut lines = text.lines();\n\nassert_eq!(Some(\"foo\"), lines.next());\nassert_eq!(Some(\"bar\"), lines.next());\nassert_eq!(Some(\"\"), lines.next());\nassert_eq!(Some(\"baz\"), lines.next());\n\nassert_eq!(None, lines.next());\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Lines","id":"2:44429:8778","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12947:35079":{"id":"2:12947:35079","crate_id":2,"name":"rmatches","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within this string slice,\nyielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`matches`] method can be used.\n\n[`matches`]: str::matches\n\n# Examples\n\n```\nlet v: Vec<&str> = \"abcXXXabcYYYabc\".rmatches(\"abc\").collect();\nassert_eq!(v, [\"abc\", \"abc\", \"abc\"]);\n\nlet v: Vec<&str> = \"1abc2abc3\".rmatches(char::is_numeric).collect();\nassert_eq!(v, [\"3\", \"2\", \"1\"]);\n```","links":{"self::pattern":"2:12558:3812","`DoubleEndedIterator`":"2:7942:128","prim@char":"1:12068:447","str::matches":"2:12944:2180"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RMatches","id":"2:44397:8777","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12563:15773","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12563:15773","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12578:15774","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12958:35083":{"id":"2:12958:35083","crate_id":2,"name":"trim_start","span":null,"visibility":"public","docs":"Returns a string slice with leading whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Text directionality\n\nA string is a sequence of bytes. `start` in this context means the first\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be left side, and for right-to-left languages like\nArabic or Hebrew, this will be the right side.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\nassert_eq!(\"Hello\\tworld\\t\\n\", s.trim_start());\n```\n\nDirectionality:\n\n```\nlet s = \"  English  \";\nassert!(Some('E') == s.trim_start().chars().next());\n\nlet s = \"  עברית  \";\nassert!(Some('ע') == s.trim_start().chars().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_trim_start\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12982:35090":{"id":"2:12982:35090","crate_id":2,"name":"trim_right_matches","span":null,"visibility":"public","docs":"Returns a string slice with all suffixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. 'Right' in this context means the last\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _left_ side, not the right.\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_right_matches('1'), \"11foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_right_matches(char::is_numeric), \"123foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_right_matches(x), \"12foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1fooX\".trim_right_matches(|c| c == '1' || c == 'X'), \"1foo\");\n```","links":{"prim@char":"1:12068:447","self::pattern":"2:12558:3812"},"attrs":["#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_end_matches`\",\nsuggestion = \"trim_end_matches\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_end_matches`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12563:15773","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12563:15773","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12578:15774","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:965:1840":{"id":"0:965:1840","crate_id":0,"name":"Deserialize","span":{"filename":"src/lib.rs","begin":[96,0],"end":[101,1]},"visibility":"public","docs":null,"links":{},"attrs":["#[proc_macro_derive(Deserialize, attributes(serde))]"],"deprecation":null,"inner":{"proc_macro":{"kind":"derive","helpers":["serde"]}}},"2:12909:2736":{"id":"2:12909:2736","crate_id":2,"name":"find","span":null,"visibility":"public","docs":"Returns the byte index of the first character of this string slice that\nmatches the pattern.\n\nReturns [`None`] if the pattern doesn't match.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nlet s = \"Löwe 老虎 Léopard Gepardi\";\n\nassert_eq!(s.find('L'), Some(0));\nassert_eq!(s.find('é'), Some(14));\nassert_eq!(s.find(\"pard\"), Some(17));\n```\n\nMore complex patterns using point-free style and closures:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\n\nassert_eq!(s.find(char::is_whitespace), Some(5));\nassert_eq!(s.find(char::is_lowercase), Some(1));\nassert_eq!(s.find(|c: char| c.is_whitespace() || c.is_lowercase()), Some(1));\nassert_eq!(s.find(|c: char| (c < 'o') && (c > 'a')), Some(4));\n```\n\nNot finding the pattern:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\nlet x: &[_] = &['1', '2'];\n\nassert_eq!(s.find(x), None);\n```","links":{"`None`":"2:42290:188","prim@char":"1:12068:447","self::pattern":"2:12558:3812"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:42288:191","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12563:15773","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12994:28982":{"id":"2:12994:28982","crate_id":2,"name":"trim_ascii","span":null,"visibility":"public","docs":"Returns a string slice with leading and trailing ASCII whitespace\nremoved.\n\n'Whitespace' refers to the definition used by\n[`u8::is_ascii_whitespace`].\n\n[`u8::is_ascii_whitespace`]: u8::is_ascii_whitespace\n\n# Examples\n\n```\n#![feature(byte_slice_trim_ascii)]\n\nassert_eq!(\"\\r hello world\\n \".trim_ascii(), \"hello world\");\nassert_eq!(\"  \".trim_ascii(), \"\");\nassert_eq!(\"\".trim_ascii(), \"\");\n```","links":{"u8::is_ascii_whitespace":"2:912:37328"},"attrs":["#[unstable(feature = \"byte_slice_trim_ascii\", issue = \"94035\")]","#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12900:2286":{"id":"2:12900:2286","crate_id":2,"name":"contains","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a sub-slice of\nthis string slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.contains(\"nana\"));\nassert!(!bananas.contains(\"apples\"));\n```","links":{"prim@char":"1:12068:447","self::pattern":"2:12558:3812"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12563:15773","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5555:35777":{"id":"5:5555:35777","crate_id":5,"name":"into_boxed_bytes","span":null,"visibility":"public","docs":"Converts a `Box<str>` into a `Box<[u8]>` without copying or allocating.\n\n# Examples\n\n```\nlet s = \"this is a string\";\nlet boxed_str = s.to_owned().into_boxed_str();\nlet boxed_bytes = boxed_str.into_boxed_bytes();\nassert_eq!(*boxed_bytes, *s.as_bytes());\n```","links":{},"attrs":["#[must_use = \"`self` will be dropped if the result is not used\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"resolved_path":{"name":"Box","id":"5:281:2028","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}]],"output":{"resolved_path":{"name":"Box","id":"5:281:2028","args":{"angle_bracketed":{"args":[{"type":{"slice":{"primitive":"u8"}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5559:35778":{"id":"5:5559:35778","crate_id":5,"name":"replacen","span":null,"visibility":"public","docs":"Replaces first N matches of a pattern with another string.\n\n`replacen` creates a new [`String`], and copies the data from this string slice into it.\nWhile doing so, it attempts to find matches of a pattern. If it finds any, it\nreplaces them with the replacement string slice at most `count` times.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"foo foo 123 foo\";\nassert_eq!(\"new new 123 foo\", s.replacen(\"foo\", \"new\", 2));\nassert_eq!(\"faa fao 123 foo\", s.replacen('o', \"a\", 3));\nassert_eq!(\"foo foo new23 foo\", s.replacen(char::is_numeric, \"new\", 1));\n```\n\nWhen the pattern doesn't match, it returns this string slice as [`String`]:\n\n```\nlet s = \"this is old\";\nassert_eq!(s, s.replacen(\"cookie monster\", \"little lamb\", 10));\n```","links":{"`String`":"5:7571:240"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the replaced string as a new allocation, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}],["to",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}],["count",{"primitive":"usize"}]],"output":{"resolved_path":{"name":"String","id":"5:7571:240","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12563:15773","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12889:29085":{"id":"2:12889:29085","crate_id":2,"name":"split_at_checked","span":null,"visibility":"public","docs":"Divide one string slice into two at an index.\n\nThe argument, `mid`, should be a valid byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point. The\nmethod returns `None` if that’s not the case.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get mutable string slices instead, see the [`split_at_mut_checked`]\nmethod.\n\n[`split_at_mut_checked`]: str::split_at_mut_checked\n\n# Examples\n\n```\n#![feature(split_at_checked)]\n\nlet s = \"Per Martin-Löf\";\n\nlet (first, last) = s.split_at_checked(3).unwrap();\nassert_eq!(\"Per\", first);\nassert_eq!(\" Martin-Löf\", last);\n\nassert_eq!(None, s.split_at_checked(13));  // Inside “ö”\nassert_eq!(None, s.split_at_checked(16));  // Beyond the string length\n```","links":{"str::split_at_mut_checked":"2:12890:29086"},"attrs":["#[must_use]","#[unstable(feature = \"split_at_checked\", reason = \"new API\", issue =\n\"119128\")]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["mid",{"primitive":"usize"}]],"output":{"resolved_path":{"name":"Option","id":"2:42288:191","args":{"angle_bracketed":{"args":[{"type":{"tuple":[{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5554":{"id":"5:5554","crate_id":5,"name":null,"span":null,"visibility":"default","docs":"Methods for string slices.","links":{},"attrs":["#[cfg(not(test))]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"primitive":"str"},"items":["5:5555:35777","5:5556:2214","5:5559:35778","5:5562:35779","5:5570:35780","5:5571:35781","5:5572:3477","5:5573:2418","5:5574:2417"],"negative":false,"synthetic":false,"blanket_impl":null}}},"2:12956:35082":{"id":"2:12956:35082","crate_id":2,"name":"trim","span":null,"visibility":"public","docs":"Returns a string slice with leading and trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Examples\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\n\nassert_eq!(\"Hello\\tworld\", s.trim());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a slice, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_trim\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12963:35086":{"id":"2:12963:35086","crate_id":2,"name":"trim_right","span":null,"visibility":"public","docs":"Returns a string slice with trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`.\n\n# Text directionality\n\nA string is a sequence of bytes. 'Right' in this context means the last\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _left_ side, not the right.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \" Hello\\tworld\\t\";\n\nassert_eq!(\" Hello\\tworld\", s.trim_right());\n```\n\nDirectionality:\n\n```\nlet s = \"English  \";\nassert!(Some('h') == s.trim_right().chars().rev().next());\n\nlet s = \"עברית  \";\nassert!(Some('ת') == s.trim_right().chars().rev().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_end`\", suggestion =\n\"trim_end\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_end`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12953:35081":{"id":"2:12953:35081","crate_id":2,"name":"rmatch_indices","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within `self`,\nyielded in reverse order along with the index of the match.\n\nFor matches of `pat` within `self` that overlap, only the indices\ncorresponding to the last match are returned.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`match_indices`] method can be used.\n\n[`match_indices`]: str::match_indices\n\n# Examples\n\n```\nlet v: Vec<_> = \"abcXXXabcYYYabc\".rmatch_indices(\"abc\").collect();\nassert_eq!(v, [(12, \"abc\"), (6, \"abc\"), (0, \"abc\")]);\n\nlet v: Vec<_> = \"1abcabc2\".rmatch_indices(\"abc\").collect();\nassert_eq!(v, [(4, \"abc\"), (1, \"abc\")]);\n\nlet v: Vec<_> = \"ababa\".rmatch_indices(\"aba\").collect();\nassert_eq!(v, [(2, \"aba\")]); // only the last `aba`\n```","links":{"self::pattern":"2:12558:3812","`DoubleEndedIterator`":"2:7942:128","prim@char":"1:12068:447","str::match_indices":"2:12950:35080"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RMatchIndices","id":"2:44343:8774","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12563:15773","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12563:15773","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12578:15774","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:86-0:994:2058":{"id":"0:86-0:994:2058","crate_id":0,"name":null,"span":{"filename":"src/internals/attr.rs","begin":[21,0],"end":[21,43]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"import":{"source":"crate::internals::case::RenameRule","name":"RenameRule","id":"0:994:2058","glob":false}}},"2:12899:32918":{"id":"2:12899:32918","crate_id":2,"name":"encode_utf16","span":null,"visibility":"public","docs":"Returns an iterator of `u16` over the string encoded as UTF-16.\n\n# Examples\n\n```\nlet text = \"Zażółć gęślą jaźń\";\n\nlet utf8_len = text.len();\nlet utf16_len = text.encode_utf16().count();\n\nassert!(utf16_len <= utf8_len);\n```","links":{},"attrs":["#[must_use =\n\"this returns the encoded string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EncodeUtf16","id":"2:44467:8782","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12988:28977":{"id":"2:12988:28977","crate_id":2,"name":"as_ascii","span":null,"visibility":"public","docs":"If this string slice [`is_ascii`](Self::is_ascii), returns it as a slice\nof [ASCII characters](`ascii::Char`), otherwise returns `None`.","links":{"`ascii::Char`":"2:40261:28973","Self::is_ascii":"2:12987:28162"},"attrs":["#[unstable(feature = \"ascii_char\", issue = \"110998\")]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Option","id":"2:42288:191","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"resolved_path":{"name":"AsciiChar","id":"2:40261:28973","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:964:1832":{"id":"0:964:1832","crate_id":0,"name":"Serialize","span":{"filename":"src/lib.rs","begin":[88,0],"end":[93,1]},"visibility":"public","docs":null,"links":{},"attrs":["#[proc_macro_derive(Serialize, attributes(serde))]"],"deprecation":null,"inner":{"proc_macro":{"kind":"derive","helpers":["serde"]}}},"2:12876:29059":{"id":"2:12876:29059","crate_id":2,"name":"as_mut_ptr","span":null,"visibility":"public","docs":"Converts a mutable string slice to a raw pointer.\n\nAs string slices are a slice of bytes, the raw pointer points to a\n[`u8`]. This pointer will be pointing to the first byte of the string\nslice.\n\nIt is your responsibility to make sure that the string slice only gets\nmodified in a way that it remains valid UTF-8.","links":{"`u8`":"1:12085:1642"},"attrs":["#[rustc_never_returns_null_ptr]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"raw_pointer":{"mutable":true,"type":{"primitive":"u8"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12870:35072":{"id":"2:12870:35072","crate_id":2,"name":"ceil_char_boundary","span":null,"visibility":"public","docs":"Finds the closest `x` not below `index` where `is_char_boundary(x)` is `true`.\n\nIf `index` is greater than the length of the string, this returns the length of the string.\n\nThis method is the natural complement to [`floor_char_boundary`]. See that method\nfor more details.\n\n[`floor_char_boundary`]: str::floor_char_boundary\n\n\n# Examples\n\n```\n#![feature(round_char_boundary)]\nlet s = \"❤️🧡💛💚💙💜\";\nassert_eq!(s.len(), 26);\nassert!(!s.is_char_boundary(13));\n\nlet closest = s.ceil_char_boundary(13);\nassert_eq!(closest, 14);\nassert_eq!(&s[..closest], \"❤️🧡💛\");\n```","links":{"str::floor_char_boundary":"2:12868:35071"},"attrs":["#[unstable(feature = \"round_char_boundary\", issue = \"93743\")]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["index",{"primitive":"usize"}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12887:2834":{"id":"2:12887:2834","crate_id":2,"name":"split_at","span":null,"visibility":"public","docs":"Divide one string slice into two at an index.\n\nThe argument, `mid`, should be a byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get mutable string slices instead, see the [`split_at_mut`]\nmethod.\n\n[`split_at_mut`]: str::split_at_mut\n\n# Panics\n\nPanics if `mid` is not on a UTF-8 code point boundary, or if it is past\nthe end of the last code point of the string slice.  For a non-panicking\nalternative see [`split_at_checked`](str::split_at_checked).\n\n# Examples\n\n```\nlet s = \"Per Martin-Löf\";\n\nlet (first, last) = s.split_at(3);\n\nassert_eq!(\"Per\", first);\nassert_eq!(\" Martin-Löf\", last);\n```","links":{"str::split_at_checked":"2:12889:29085","str::split_at_mut":"2:12888:29082"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["mid",{"primitive":"usize"}]],"output":{"tuple":[{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:493-0:404:1965":{"id":"0:493-0:404:1965","crate_id":0,"name":null,"span":{"filename":"src/internals/mod.rs","begin":[14,0],"end":[14,41]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"import":{"source":"self::receiver::replace_receiver","name":"replace_receiver","id":"0:404:1965","glob":false}}},"2:12868:35071":{"id":"2:12868:35071","crate_id":2,"name":"floor_char_boundary","span":null,"visibility":"public","docs":"Finds the closest `x` not exceeding `index` where `is_char_boundary(x)` is `true`.\n\nThis method can help you truncate a string so that it's still valid UTF-8, but doesn't\nexceed a given number of bytes. Note that this is done purely at the character level\nand can still visually split graphemes, even though the underlying characters aren't\nsplit. For example, the emoji 🧑‍🔬 (scientist) could be split so that the string only\nincludes 🧑 (person) instead.\n\n# Examples\n\n```\n#![feature(round_char_boundary)]\nlet s = \"❤️🧡💛💚💙💜\";\nassert_eq!(s.len(), 26);\nassert!(!s.is_char_boundary(13));\n\nlet closest = s.floor_char_boundary(13);\nassert_eq!(closest, 10);\nassert_eq!(&s[..closest], \"❤️🧡\");\n```","links":{},"attrs":["#[unstable(feature = \"round_char_boundary\", issue = \"93743\")]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["index",{"primitive":"usize"}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12873:2946":{"id":"2:12873:2946","crate_id":2,"name":"as_bytes","span":null,"visibility":"public","docs":"Converts a string slice to a byte slice. To convert the byte slice back\ninto a string slice, use the [`from_utf8`] function.\n\n# Examples\n\n```\nlet bytes = \"bors\".as_bytes();\nassert_eq!(b\"bors\", bytes);\n```","links":{"`from_utf8`":"2:12106:15776"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"primitive":"u8"}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12903:28626":{"id":"2:12903:28626","crate_id":2,"name":"starts_with","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a prefix of this\nstring slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.starts_with(\"bana\"));\nassert!(!bananas.starts_with(\"nana\"));\n```","links":{"prim@char":"1:12068:447","self::pattern":"2:12558:3812"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12563:15773","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12979:35089":{"id":"2:12979:35089","crate_id":2,"name":"trim_left_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. 'Left' in this context means the first\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _right_ side, not the left.\n\n# Examples\n\n```\nassert_eq!(\"11foo1bar11\".trim_left_matches('1'), \"foo1bar11\");\nassert_eq!(\"123foo1bar123\".trim_left_matches(char::is_numeric), \"foo1bar123\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_left_matches(x), \"foo1bar12\");\n```","links":{"prim@char":"1:12068:447","self::pattern":"2:12558:3812"},"attrs":["#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_start_matches`\",\nsuggestion = \"trim_start_matches\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_start_matches`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12563:15773","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12993:28981":{"id":"2:12993:28981","crate_id":2,"name":"trim_ascii_end","span":null,"visibility":"public","docs":"Returns a string slice with trailing ASCII whitespace removed.\n\n'Whitespace' refers to the definition used by\n[`u8::is_ascii_whitespace`].\n\n[`u8::is_ascii_whitespace`]: u8::is_ascii_whitespace\n\n# Examples\n\n```\n#![feature(byte_slice_trim_ascii)]\n\nassert_eq!(\"\\r hello world\\u{3000}\\n \".trim_ascii_end(), \"\\r hello world\\u{3000}\");\nassert_eq!(\"  \".trim_ascii_end(), \"\");\nassert_eq!(\"\".trim_ascii_end(), \"\");\n```","links":{"u8::is_ascii_whitespace":"2:912:37328"},"attrs":["#[unstable(feature = \"byte_slice_trim_ascii\", issue = \"94035\")]","#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5573:2418":{"id":"5:5573:2418","crate_id":5,"name":"to_ascii_uppercase","span":null,"visibility":"public","docs":"Returns a copy of this string where each character is mapped to its\nASCII upper case equivalent.\n\nASCII letters 'a' to 'z' are mapped to 'A' to 'Z',\nbut non-ASCII letters are unchanged.\n\nTo uppercase the value in-place, use [`make_ascii_uppercase`].\n\nTo uppercase ASCII characters in addition to non-ASCII characters, use\n[`to_uppercase`].\n\n# Examples\n\n```\nlet s = \"Grüße, Jürgen ❤\";\n\nassert_eq!(\"GRüßE, JüRGEN ❤\", s.to_ascii_uppercase());\n```\n\n[`make_ascii_uppercase`]: str::make_ascii_uppercase\n[`to_uppercase`]: #method.to_uppercase","links":{"str::make_ascii_uppercase":"2:12990:28165"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use = \"to uppercase the value in-place, use `make_ascii_uppercase()`\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7571:240","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12875:329":{"id":"2:12875:329","crate_id":2,"name":"as_ptr","span":null,"visibility":"public","docs":"Converts a string slice to a raw pointer.\n\nAs string slices are a slice of bytes, the raw pointer points to a\n[`u8`]. This pointer will be pointing to the first byte of the string\nslice.\n\nThe caller must ensure that the returned pointer is never written to.\nIf you need to mutate the contents of the string slice, use [`as_mut_ptr`].\n\n[`as_mut_ptr`]: str::as_mut_ptr\n\n# Examples\n\n```\nlet s = \"Hello\";\nlet ptr = s.as_ptr();\n```","links":{"str::as_mut_ptr":"2:12876:29059","`u8`":"1:12085:1642"},"attrs":["#[rustc_never_returns_null_ptr]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"raw_pointer":{"mutable":false,"type":{"primitive":"u8"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12874:35073":{"id":"2:12874:35073","crate_id":2,"name":"as_bytes_mut","span":null,"visibility":"public","docs":"Converts a mutable string slice to a mutable byte slice.\n\n# Safety\n\nThe caller must ensure that the content of the slice is valid UTF-8\nbefore the borrow ends and the underlying `str` is used.\n\nUse of a `str` whose contents are not valid UTF-8 is undefined behavior.\n\n# Examples\n\nBasic usage:\n\n```\nlet mut s = String::from(\"Hello\");\nlet bytes = unsafe { s.as_bytes_mut() };\n\nassert_eq!(b\"Hello\", bytes);\n```\n\nMutability:\n\n```\nlet mut s = String::from(\"🗻∈🌏\");\n\nunsafe {\n    let bytes = s.as_bytes_mut();\n\n    bytes[0] = 0xF0;\n    bytes[1] = 0x9F;\n    bytes[2] = 0x8D;\n    bytes[3] = 0x94;\n}\n\nassert_eq!(\"🍔∈🌏\", s);\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"slice":{"primitive":"u8"}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"2:12932:29093":{"id":"2:12932:29093","crate_id":2,"name":"splitn","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by a\npattern, restricted to returning at most `n` items.\n\nIf `n` substrings are returned, the last substring (the `n`th substring)\nwill contain the remainder of the string.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will not be double ended, because it is\nnot efficient to support.\n\nIf the pattern allows a reverse search, the [`rsplitn`] method can be\nused.\n\n[`rsplitn`]: str::rsplitn\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lambda\".splitn(3, ' ').collect();\nassert_eq!(v, [\"Mary\", \"had\", \"a little lambda\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".splitn(3, \"X\").collect();\nassert_eq!(v, [\"lion\", \"\", \"tigerXleopard\"]);\n\nlet v: Vec<&str> = \"abcXdef\".splitn(1, 'X').collect();\nassert_eq!(v, [\"abcXdef\"]);\n\nlet v: Vec<&str> = \"\".splitn(1, 'X').collect();\nassert_eq!(v, [\"\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".splitn(2, |c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"abc\", \"defXghi\"]);\n```","links":{"prim@char":"1:12068:447","self::pattern":"2:12558:3812","str::rsplitn":"2:12935:29095"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["n",{"primitive":"usize"}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"SplitN","id":"2:44279:8770","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12563:15773","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12967:2092":{"id":"2:12967:2092","crate_id":2,"name":"trim_start_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. `start` in this context means the first\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be left side, and for right-to-left languages like\nArabic or Hebrew, this will be the right side.\n\n# Examples\n\n```\nassert_eq!(\"11foo1bar11\".trim_start_matches('1'), \"foo1bar11\");\nassert_eq!(\"123foo1bar123\".trim_start_matches(char::is_numeric), \"foo1bar123\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_start_matches(x), \"foo1bar12\");\n```","links":{"prim@char":"1:12068:447","self::pattern":"2:12558:3812"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12563:15773","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12879:29056":{"id":"2:12879:29056","crate_id":2,"name":"get_mut","span":null,"visibility":"public","docs":"Returns a mutable subslice of `str`.\n\nThis is the non-panicking alternative to indexing the `str`. Returns\n[`None`] whenever equivalent indexing operation would panic.\n\n# Examples\n\n```\nlet mut v = String::from(\"hello\");\n// correct length\nassert!(v.get_mut(0..5).is_some());\n// out of bounds\nassert!(v.get_mut(..42).is_none());\nassert_eq!(Some(\"he\"), v.get_mut(0..2).map(|v| &*v));\n\nassert_eq!(\"hello\", v);\n{\n    let s = v.get_mut(0..2);\n    let s = s.map(|s| {\n        s.make_ascii_uppercase();\n        &*s\n    });\n    assert_eq!(Some(\"HE\"), s);\n}\nassert_eq!(\"HEllo\", v);\n```","links":{"`None`":"2:42290:188"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"resolved_path":{"name":"Option","id":"2:42288:191","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"2:10651:236","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"2:10651:236","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12893:2421":{"id":"2:12893:2421","crate_id":2,"name":"char_indices","span":null,"visibility":"public","docs":"Returns an iterator over the [`char`]s of a string slice, and their\npositions.\n\nAs a string slice consists of valid UTF-8, we can iterate through a\nstring slice by [`char`]. This method returns an iterator of both\nthese [`char`]s, as well as their byte positions.\n\nThe iterator yields tuples. The position is first, the [`char`] is\nsecond.\n\n# Examples\n\nBasic usage:\n\n```\nlet word = \"goodbye\";\n\nlet count = word.char_indices().count();\nassert_eq!(7, count);\n\nlet mut char_indices = word.char_indices();\n\nassert_eq!(Some((0, 'g')), char_indices.next());\nassert_eq!(Some((1, 'o')), char_indices.next());\nassert_eq!(Some((2, 'o')), char_indices.next());\nassert_eq!(Some((3, 'd')), char_indices.next());\nassert_eq!(Some((4, 'b')), char_indices.next());\nassert_eq!(Some((5, 'y')), char_indices.next());\nassert_eq!(Some((6, 'e')), char_indices.next());\n\nassert_eq!(None, char_indices.next());\n```\n\nRemember, [`char`]s might not match your intuition about characters:\n\n[`char`]: prim@char\n\n```\nlet yes = \"y̆es\";\n\nlet mut char_indices = yes.char_indices();\n\nassert_eq!(Some((0, 'y')), char_indices.next()); // not (0, 'y̆')\nassert_eq!(Some((1, '\\u{0306}')), char_indices.next());\n\n// note the 3 here - the previous character took up two bytes\nassert_eq!(Some((3, 'e')), char_indices.next());\nassert_eq!(Some((4, 's')), char_indices.next());\n\nassert_eq!(None, char_indices.next());\n```","links":{"prim@char":"1:12068:447"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"CharIndices","id":"2:44151:8762","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12987:28162":{"id":"2:12987:28162","crate_id":2,"name":"is_ascii","span":null,"visibility":"public","docs":"Checks if all characters in this string are within the ASCII range.\n\n# Examples\n\n```\nlet ascii = \"hello!\\n\";\nlet non_ascii = \"Grüße, Jürgen ❤\";\n\nassert!(ascii.is_ascii());\nassert!(!non_ascii.is_ascii());\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12883:29058":{"id":"2:12883:29058","crate_id":2,"name":"get_unchecked_mut","span":null,"visibility":"public","docs":"Returns a mutable, unchecked subslice of `str`.\n\nThis is the unchecked alternative to indexing the `str`.\n\n# Safety\n\nCallers of this function are responsible that these preconditions are\nsatisfied:\n\n* The starting index must not exceed the ending index;\n* Indexes must be within bounds of the original slice;\n* Indexes must lie on UTF-8 sequence boundaries.\n\nFailing that, the returned string slice may reference invalid memory or\nviolate the invariants communicated by the `str` type.\n\n# Examples\n\n```\nlet mut v = String::from(\"🗻∈🌏\");\nunsafe {\n    assert_eq!(\"🗻\", v.get_unchecked_mut(0..4));\n    assert_eq!(\"∈\", v.get_unchecked_mut(4..7));\n    assert_eq!(\"🌏\", v.get_unchecked_mut(7..11));\n}\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"2:10651:236","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"2:10651:236","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"2:12898:35076":{"id":"2:12898:35076","crate_id":2,"name":"lines_any","span":null,"visibility":"public","docs":"An iterator over the lines of a string.","links":{},"attrs":["#[deprecated(since = \"1.4.0\", note = \"use lines() instead now\", suggestion =\n\"lines\")]"],"deprecation":{"since":"1.4.0","note":"use lines() instead now"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"LinesAny","id":"2:44439:8779","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}}},"paths":{"2:47401:8200":{"crate_id":2,"path":["core","core_arch","simd","i64x4"],"kind":"struct"},"23:38:3045":{"crate_id":23,"path":["quote","format_ident"],"kind":"macro"},"5:3609:3408":{"crate_id":5,"path":["alloc","collections","linked_list","Iter"],"kind":"struct"},"2:44020:8129":{"crate_id":2,"path":["core","slice","iter","ArrayWindows"],"kind":"struct"},"16:2665:6424":{"crate_id":16,"path":["gimli","common","RangeListsOffset"],"kind":"struct"},"2:4519:3573":{"crate_id":2,"path":["core","cell","BorrowRef"],"kind":"struct"},"2:44697:8794":{"crate_id":2,"path":["core","str","pattern","CharPredicateSearcher"],"kind":"struct"},"24:2080:3412":{"crate_id":24,"path":["syn","punctuated","IterMut"],"kind":"struct"},"24:4197:3713":{"crate_id":24,"path":["syn","token","Or"],"kind":"struct"},"17:15769:6280":{"crate_id":17,"path":["object","pe","ImageFunctionEntry64"],"kind":"struct"},"16:6579:22642":{"crate_id":16,"path":["gimli","read","line","ColumnType"],"kind":"enum"},"1:11409:9610":{"crate_id":1,"path":["std","sys_common","wtf8","Wtf8"],"kind":"struct"},"2:728:187":{"crate_id":2,"path":["core","num","nonzero","NonZero"],"kind":"struct"},"17:12887:8495":{"crate_id":17,"path":["object","read","ObjectMap"],"kind":"struct"},"2:44193:8693":{"crate_id":2,"path":["core","str","iter","RSplit"],"kind":"struct"},"2:32747:2745":{"crate_id":2,"path":["core","error","tags","Value"],"kind":"struct"},"24:2976:3671":{"crate_id":24,"path":["syn","token","Let"],"kind":"struct"},"24:5356:2631":{"crate_id":24,"path":["syn","path","PathSegment"],"kind":"struct"},"2:46611:8167":{"crate_id":2,"path":["core","core_arch","simd","i8x16"],"kind":"struct"},"6:533:6904":{"crate_id":6,"path":["libc","unix","hostent"],"kind":"struct"},"2:44449:8780":{"crate_id":2,"path":["core","str","iter","SplitWhitespace"],"kind":"struct"},"2:42228:8827":{"crate_id":2,"path":["core","net","socket_addr","SocketAddr"],"kind":"enum"},"2:43549:8124":{"crate_id":2,"path":["core","hash","sip","State"],"kind":"struct"},"16:7386:6450":{"crate_id":16,"path":["gimli","read","rnglists","DebugRanges"],"kind":"struct"},"6:580:6929":{"crate_id":6,"path":["libc","unix","tms"],"kind":"struct"},"2:43289:6629":{"crate_id":2,"path":["core","fmt","rt","Flag"],"kind":"enum"},"2:43980:8695":{"crate_id":2,"path":["core","slice","iter","Chunks"],"kind":"struct"},"2:41050:3512":{"crate_id":2,"path":["core","iter","adapters","inspect","Inspect"],"kind":"struct"},"18:718:5364":{"crate_id":18,"path":["memchr","memmem","NeedleInfo"],"kind":"struct"},"11:774:8653":{"crate_id":11,"path":["hashbrown","map","Keys"],"kind":"struct"},"24:4930:3335":{"crate_id":24,"path":["syn","expr","ExprParen"],"kind":"struct"},"17:14788:5958":{"crate_id":17,"path":["object","pe","ImageVxdHeader"],"kind":"struct"},"2:43314:3551":{"crate_id":2,"path":["core","fmt","Alignment"],"kind":"enum"},"24:2221:10406":{"crate_id":24,"path":["syn","sealed","lookahead","Sealed"],"kind":"trait"},"17:14079:5801":{"crate_id":17,"path":["object","macho","ThreadCommand"],"kind":"struct"},"5:281:2028":{"crate_id":5,"path":["alloc","boxed","Box"],"kind":"struct"},"17:403:22709":{"crate_id":17,"path":["object","read","any","Segment"],"kind":"struct"},"21:2253:3430":{"crate_id":21,"path":["proc_macro","bridge","DelimSpan"],"kind":"struct"},"2:48451:8249":{"crate_id":2,"path":["core","core_arch","x86","__m512i"],"kind":"struct"},"16:6929:8623":{"crate_id":16,"path":["gimli","read","lookup","PubStuffParser"],"kind":"struct"},"1:10687:8824":{"crate_id":1,"path":["std","sys","pal","unix","fs","OpenOptions"],"kind":"struct"},"2:41525:3480":{"crate_id":2,"path":["core","iter","sources","repeat_n","RepeatN"],"kind":"struct"},"11:2352:10330":{"crate_id":11,"path":["hashbrown","table","VacantEntry"],"kind":"struct"},"16:5485:6435":{"crate_id":16,"path":["gimli","read","addr","DebugAddr"],"kind":"struct"},"2:43512:8752":{"crate_id":2,"path":["core","hash","sip","SipHasher13"],"kind":"struct"},"1:8312:10454":{"crate_id":1,"path":["std","net","Shutdown"],"kind":"enum"},"2:2353:4713":{"crate_id":2,"path":["core","ptr","from_exposed_addr"],"kind":"function"},"16:3010:5371":{"crate_id":16,"path":["gimli","arch","Arm"],"kind":"struct"},"17:15222:6115":{"crate_id":17,"path":["object","pe","ImageArchiveMemberHeader"],"kind":"struct"},"21:1834:4799":{"crate_id":21,"path":["proc_macro","bridge","Marked"],"kind":"struct"},"2:40922:10402":{"crate_id":2,"path":["core","io","borrowed_buf","BorrowedCursor"],"kind":"struct"},"2:42754:89":{"crate_id":2,"path":["core","sync","atomic","AtomicI64"],"kind":"struct"},"5:7584:8681":{"crate_id":5,"path":["alloc","string","FromUtf8Error"],"kind":"struct"},"16:3741:6463":{"crate_id":16,"path":["gimli","constants","DwSectV2"],"kind":"struct"},"2:45159:178":{"crate_id":2,"path":["core","alloc","layout","Layout"],"kind":"struct"},"2:44243:8768":{"crate_id":2,"path":["core","str","iter","RSplitTerminator"],"kind":"struct"},"2:4807:15811":{"crate_id":2,"path":["core","char","REPLACEMENT_CHARACTER"],"kind":"constant"},"24:5146:2637":{"crate_id":24,"path":["syn","generics","PredicateType"],"kind":"struct"},"16:6152:6503":{"crate_id":16,"path":["gimli","read","endian_slice","EndianSlice"],"kind":"struct"},"11:2369:21703":{"crate_id":11,"path":["hashbrown","table","AbsentEntry"],"kind":"struct"},"2:32743:2136":{"crate_id":2,"path":["core","error","private","Internal"],"kind":"struct"},"2:12572:8451":{"crate_id":2,"path":["core","str","pattern","Searcher"],"kind":"trait"},"5:3358:4776":{"crate_id":5,"path":["alloc","collections","btree","set","ExtractIf"],"kind":"struct"},"16:6908:8622":{"crate_id":16,"path":["gimli","read","lookup","PubStuffHeader"],"kind":"struct"},"2:10008:3563":{"crate_id":2,"path":["core","fmt","UpperHex"],"kind":"trait"},"6:4473:7169":{"crate_id":6,"path":["libc","unix","linux_like","linux","sembuf"],"kind":"struct"},"1:8366:10500":{"crate_id":1,"path":["std","os","unix","net","ancillary","SocketAncillary"],"kind":"struct"},"2:4304:3585":{"crate_id":2,"path":["core","cell","lazy","LazyCell"],"kind":"struct"},"1:7929:8824":{"crate_id":1,"path":["std","fs","OpenOptions"],"kind":"struct"},"17:13832:5764":{"crate_id":17,"path":["object","macho","LoadCommand"],"kind":"struct"},"2:43920:33132":{"crate_id":2,"path":["core","slice","iter","GenericSplitN"],"kind":"struct"},"24:4325:3722":{"crate_id":24,"path":["syn","token","Question"],"kind":"struct"},"16:5662:22635":{"crate_id":16,"path":["gimli","read","cfi","CieOrFde"],"kind":"enum"},"16:6692:6545":{"crate_id":16,"path":["gimli","read","line","FileEntry"],"kind":"struct"},"17:15400:6162":{"crate_id":17,"path":["object","pe","ImageLoadConfigCodeIntegrity"],"kind":"struct"},"5:7038:5148":{"crate_id":5,"path":["alloc","vec","retain_mut","BackshiftOnDrop"],"kind":"struct"},"2:43277:32928":{"crate_id":2,"path":["core","fmt","rt","Count"],"kind":"enum"},"5:3245:34580":{"crate_id":5,"path":["alloc","collections","btree","set","IntersectionInner"],"kind":"enum"},"1:3579:10404":{"crate_id":1,"path":["std","io","Seek"],"kind":"trait"},"16:7414:6600":{"crate_id":16,"path":["gimli","read","rnglists","RangeLists"],"kind":"struct"},"6:4914:7336":{"crate_id":6,"path":["libc","unix","linux_like","linux","file_clone_range"],"kind":"struct"},"6:6107:7616":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_entry"],"kind":"struct"},"2:10651:236":{"crate_id":2,"path":["core","slice","index","SliceIndex"],"kind":"trait"},"6:7679:7857":{"crate_id":6,"path":["libc","unix","linux_like","linux","canxl_frame"],"kind":"struct"},"2:9799:3552":{"crate_id":2,"path":["core","fmt","builders","FormatterFn"],"kind":"struct"},"6:6128:7622":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ptrace_syscall_info"],"kind":"struct"},"1:3015:223":{"crate_id":1,"path":["std","io","error","Result"],"kind":"type_alias"},"1:11301:6847":{"crate_id":1,"path":["std","sys","os_str","bytes","Buf"],"kind":"struct"},"11:2542:6783":{"crate_id":11,"path":["hashbrown","raw","bitmask","BitMask"],"kind":"struct"},"24:877:10406":{"crate_id":24,"path":["syn","ext","private","Sealed"],"kind":"trait"},"21:53:4802":{"crate_id":21,"path":["proc_macro","bridge","buffer","Buffer"],"kind":"struct"},"17:12264:22871":{"crate_id":17,"path":["object","read","pe","section","PeSection"],"kind":"struct"},"17:14968:6057":{"crate_id":17,"path":["object","pe","ImageNtHeaders64"],"kind":"struct"},"0:965:1841":{"crate_id":0,"path":["serde_derive","Deserialize"],"kind":"proc_derive"},"17:15473:6181":{"crate_id":17,"path":["object","pe","ImageLoadConfigDirectory32"],"kind":"struct"},"16:5630:8512":{"crate_id":16,"path":["gimli","read","cfi","SectionBaseAddresses"],"kind":"struct"},"2:41543:3484":{"crate_id":2,"path":["core","iter","sources","successors","Successors"],"kind":"struct"},"17:11166:5488":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbolTable"],"kind":"struct"},"2:2714:78":{"crate_id":2,"path":["core","convert","AsRef"],"kind":"trait"},"1:8951:8328":{"crate_id":1,"path":["std","sync","mpsc","RecvError"],"kind":"struct"},"2:48043:8236":{"crate_id":2,"path":["core","core_arch","simd","u16x32"],"kind":"struct"},"1:8088:10438":{"crate_id":1,"path":["std","io","error","ErrorKind"],"kind":"enum"},"1:11348:8845":{"crate_id":1,"path":["std","sys_common","process","CommandEnv"],"kind":"struct"},"2:2723:142":{"crate_id":2,"path":["core","convert","From"],"kind":"trait"},"6:5075:7422":{"crate_id":6,"path":["libc","unix","linux_like","linux","mq_attr"],"kind":"struct"},"5:2988:35941":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Dying"],"kind":"enum"},"6:4647:7244":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Ehdr"],"kind":"struct"},"2:33626:5319":{"crate_id":2,"path":["core","ops","arith","Rem"],"kind":"trait"},"17:11915:22866":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandVariant"],"kind":"enum"},"5:4396:5129":{"crate_id":5,"path":["alloc","collections","vec_deque","drop","Dropper"],"kind":"struct"},"1:914:10078":{"crate_id":1,"path":["std","collections","hash","map","IntoKeys"],"kind":"struct"},"17:14560:5895":{"crate_id":17,"path":["object","macho","Nlist64"],"kind":"struct"},"1:836:3408":{"crate_id":1,"path":["std","collections","hash","map","Iter"],"kind":"struct"},"6:4543:7199":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_constant_effect"],"kind":"struct"},"17:12851:8494":{"crate_id":17,"path":["object","read","SymbolMap"],"kind":"struct"},"16:7951:8642":{"crate_id":16,"path":["gimli","read","unit","EntriesTree"],"kind":"struct"},"1:1975:702":{"crate_id":1,"path":["std","ffi"],"kind":"module"},"1:6378:217":{"crate_id":1,"path":["std","sync","mpmc","Receiver"],"kind":"struct"},"16:3177:6401":{"crate_id":16,"path":["gimli","arch","AArch64"],"kind":"struct"},"24:956:3040":{"crate_id":24,"path":["syn","generics","TypeGenerics"],"kind":"struct"},"18:548:150":{"crate_id":18,"path":["memchr","memmem","rabinkarp","Hash"],"kind":"struct"},"6:6666:7682":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statfs"],"kind":"struct"},"17:11841:22863":{"crate_id":17,"path":["object","read","macho","file","MachOComdatIterator"],"kind":"struct"},"2:22747:7881":{"crate_id":2,"path":["core","num","diy_float","Fp"],"kind":"struct"},"17:15434:6169":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation32V2"],"kind":"struct"},"1:11381:8349":{"crate_id":1,"path":["std","sys_common","wtf8","CodePoint"],"kind":"struct"},"11:1923:2017":{"crate_id":11,"path":["hashbrown","set","Union"],"kind":"struct"},"1:8355:8828":{"crate_id":1,"path":["std","os","unix","net","ancillary","SocketCred"],"kind":"struct"},"2:1916:7871":{"crate_id":2,"path":["core","ptr","metadata","PtrComponents"],"kind":"struct"},"6:4375:7104":{"crate_id":6,"path":["libc","unix","linux_like","linux","spwd"],"kind":"struct"},"16:4968:6488":{"crate_id":16,"path":["gimli","constants","DwLnct"],"kind":"struct"},"2:41027:8735":{"crate_id":2,"path":["core","iter","adapters","flatten","FlattenCompat"],"kind":"struct"},"2:34406:4269":{"crate_id":2,"path":["core","ops","bit","BitOr"],"kind":"trait"},"21:183:4424":{"crate_id":21,"path":["proc_macro","bridge","closure","Closure"],"kind":"struct"},"24:2755:3661":{"crate_id":24,"path":["syn","token","Crate"],"kind":"struct"},"6:7639:7849":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_mutex_t"],"kind":"struct"},"2:3014:3453":{"crate_id":2,"path":["core","ops","arith","Add"],"kind":"trait"},"2:44670:8793":{"crate_id":2,"path":["core","str","pattern","CharSliceSearcher"],"kind":"struct"},"2:43024:3562":{"crate_id":2,"path":["core","fmt","num","LowerHex"],"kind":"struct"},"24:4419:3729":{"crate_id":24,"path":["syn","token","Slash"],"kind":"struct"},"2:5852:3510":{"crate_id":2,"path":["core","iter","adapters","flatten","FlatMap"],"kind":"struct"},"17:10185:5469":{"crate_id":17,"path":["object","endian","U16Bytes"],"kind":"struct"},"24:5070:2606":{"crate_id":24,"path":["syn","generics","TypeParam"],"kind":"struct"},"6:119:16223":{"crate_id":6,"path":["libc","unix","FILE"],"kind":"enum"},"6:483:6873":{"crate_id":6,"path":["libc","unix","utimbuf"],"kind":"struct"},"2:1902:4728":{"crate_id":2,"path":["core","ptr","metadata","Pointee"],"kind":"trait"},"2:43771:8759":{"crate_id":2,"path":["core","slice","ascii","EscapeAscii"],"kind":"struct"},"21:2583:3596":{"crate_id":21,"path":["proc_macro","diagnostic","Level"],"kind":"enum"},"24:2806:3663":{"crate_id":24,"path":["syn","token","Dyn"],"kind":"struct"},"17:15023:6069":{"crate_id":17,"path":["object","pe","AnonObjectHeaderV2"],"kind":"struct"},"6:5052:7414":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_user_dev"],"kind":"struct"},"16:6858:6559":{"crate_id":16,"path":["gimli","read","loclists","LocationListEntry"],"kind":"struct"},"17:14876:6021":{"crate_id":17,"path":["object","pe","ImageOptionalHeader32"],"kind":"struct"},"16:7482:22651":{"crate_id":16,"path":["gimli","read","rnglists","RngListIter"],"kind":"struct"},"2:40902:10384":{"crate_id":2,"path":["core","ffi","VaList"],"kind":"struct"},"20:836:1980":{"crate_id":20,"path":["proc_macro2","imp","Ident"],"kind":"enum"},"5:2063:10332":{"crate_id":5,"path":["alloc","collections","btree","map","CursorMut"],"kind":"struct"},"24:4544:2181":{"crate_id":24,"path":["syn","attr","Meta"],"kind":"enum"},"7:31:21605":{"crate_id":7,"path":["unwind","libunwind","_Unwind_Reason_Code"],"kind":"enum"},"5:6137:5127":{"crate_id":5,"path":["alloc","sync","from_iter_exact","Guard"],"kind":"struct"},"1:4987:10534":{"crate_id":1,"path":["std","os","net","linux_ext","addr","SocketAddrExt"],"kind":"trait"},"17:13064:5597":{"crate_id":17,"path":["object","read","CompressedData"],"kind":"struct"},"2:12260:8764":{"crate_id":2,"path":["core","str","iter","SplitInternal"],"kind":"struct"},"24:5151:1980":{"crate_id":24,"path":["syn","ident","Ident"],"kind":"function"},"1:8002:9860":{"crate_id":1,"path":["std","io","buffered","IntoInnerError"],"kind":"struct"},"2:30995:32953":{"crate_id":2,"path":["core","ptr","alignment","AlignmentEnum16"],"kind":"enum"},"1:4650:10527":{"crate_id":1,"path":["std","os","unix","thread","JoinHandleExt"],"kind":"trait"},"1:12035:10091":{"crate_id":1,"path":["std","backtrace_rs","symbolize","gimli","Cache"],"kind":"struct"},"17:10534:36055":{"crate_id":17,"path":["object","read","any","SegmentIteratorInternal"],"kind":"enum"},"16:7429:36007":{"crate_id":16,"path":["gimli","read","rnglists","RangeListsFormat"],"kind":"enum"},"15:394:21737":{"crate_id":15,"path":["addr2line","DebugFile"],"kind":"enum"},"1:2271:4719":{"crate_id":1,"path":["std","fs","read"],"kind":"function"},"2:42496:193":{"crate_id":2,"path":["core","sync","atomic","Ordering"],"kind":"enum"},"17:11089:22747":{"crate_id":17,"path":["object","read","coff","section","CoffSegmentIterator"],"kind":"struct"},"18:0:3176":{"crate_id":18,"path":["memchr"],"kind":"module"},"2:34037:5322":{"crate_id":2,"path":["core","ops","arith","DivAssign"],"kind":"trait"},"2:3470:3584":{"crate_id":2,"path":["core","ops","unsize","DispatchFromDyn"],"kind":"trait"},"5:1517:10079":{"crate_id":5,"path":["alloc","collections","btree","map","IntoValues"],"kind":"struct"},"1:8523:8124":{"crate_id":1,"path":["std","path","State"],"kind":"enum"},"5:4881:214":{"crate_id":5,"path":["alloc","rc","Rc"],"kind":"struct"},"1:637:10313":{"crate_id":1,"path":["std","backtrace","BacktraceFrame"],"kind":"struct"},"2:47585:8202":{"crate_id":2,"path":["core","core_arch","simd","i8x64"],"kind":"struct"},"2:48121:8237":{"crate_id":2,"path":["core","core_arch","simd","i32x16"],"kind":"struct"},"17:14994:6063":{"crate_id":17,"path":["object","pe","Guid"],"kind":"struct"},"1:4784:10509":{"crate_id":1,"path":["std","os","linux","process","CommandExt"],"kind":"trait"},"2:22013:33245":{"crate_id":2,"path":["core","core_simd","vector","splat","Splat"],"kind":"struct"},"17:11242:22766":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdatSectionIterator"],"kind":"struct"},"1:11088:8135":{"crate_id":1,"path":["std","sys","pal","unix","time","Nanoseconds"],"kind":"struct"},"6:1632:7029":{"crate_id":6,"path":["libc","unix","linux_like","in_pktinfo"],"kind":"struct"},"1:12079:691":{"crate_id":1,"path":["std","f64"],"kind":"primitive"},"2:47371:8199":{"crate_id":2,"path":["core","core_arch","simd","i32x8"],"kind":"struct"},"1:8458:3979":{"crate_id":1,"path":["std","panic","BacktraceStyle"],"kind":"enum"},"23:345:2668":{"crate_id":23,"path":["quote","quote_spanned"],"kind":"macro"},"6:4523:7189":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_replay"],"kind":"struct"},"6:1521:6952":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr"],"kind":"struct"},"2:8360:3485":{"crate_id":2,"path":["core","iter","traits","marker","FusedIterator"],"kind":"trait"},"18:643:5345":{"crate_id":18,"path":["memchr","memmem","x86","avx","nostd","Forward"],"kind":"struct"},"17:12485:22901":{"crate_id":17,"path":["object","read","pe","resource","ResourceNameOrId"],"kind":"enum"},"11:832:10323":{"crate_id":11,"path":["hashbrown","map","ValuesMut"],"kind":"struct"},"17:12724:22727":{"crate_id":17,"path":["object","read","FileKind"],"kind":"enum"},"24:2704:105":{"crate_id":24,"path":["syn","token","Break"],"kind":"struct"},"6:1718:7076":{"crate_id":6,"path":["libc","unix","linux_like","utsname"],"kind":"struct"},"17:13986:5789":{"crate_id":17,"path":["object","macho","DylibCommand"],"kind":"struct"},"5:6713:5103":{"crate_id":5,"path":["alloc","vec","into_iter","drop","DropGuard"],"kind":"struct"},"1:3561:3559":{"crate_id":1,"path":["std","io","Write"],"kind":"trait"},"2:42194:32957":{"crate_id":2,"path":["core","net","parser","AddrKind"],"kind":"enum"},"1:10749:27979":{"crate_id":1,"path":["std","sys","pal","unix","kernel_copy","FdHandle"],"kind":"enum"},"17:14599:5905":{"crate_id":17,"path":["object","macho","ScatteredRelocationInfo"],"kind":"struct"},"24:5368:2346":{"crate_id":24,"path":["syn","path","GenericArgument"],"kind":"enum"},"24:5099:2537":{"crate_id":24,"path":["syn","generics","TypeParamBound"],"kind":"enum"},"17:14414:5869":{"crate_id":17,"path":["object","macho","DyldInfoCommand"],"kind":"struct"},"2:46110:8143":{"crate_id":2,"path":["core","core_arch","simd","u8x4"],"kind":"struct"},"2:10845:8690":{"crate_id":2,"path":["core","slice","iter","Split"],"kind":"struct"},"2:40075:7968":{"crate_id":2,"path":["core","any","TypeId"],"kind":"struct"},"17:11214:22744":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdatIterator"],"kind":"struct"},"2:30701:10462":{"crate_id":2,"path":["core","num","FpCategory"],"kind":"enum"},"24:2268:2670":{"crate_id":24,"path":["syn","spanned","Spanned"],"kind":"trait"},"24:5024:63":{"crate_id":24,"path":["syn","expr","parsing","kw","raw"],"kind":"struct"},"1:4718:7723":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt","st_mtime"],"kind":"foreign_type"},"16:7335:6448":{"crate_id":16,"path":["gimli","read","pubnames","DebugPubNames"],"kind":"struct"},"1:4823:10493":{"crate_id":1,"path":["std","os","fd","raw","FromRawFd"],"kind":"trait"},"2:21370:33253":{"crate_id":2,"path":["core","core_simd","swizzle","resize","Resize"],"kind":"struct"},"2:3003:4332":{"crate_id":2,"path":["core","marker","Freeze"],"kind":"trait"},"17:11621:8464":{"crate_id":17,"path":["object","read","elf","version","VersionTable"],"kind":"struct"},"24:3854:3690":{"crate_id":24,"path":["syn","token","AndAnd"],"kind":"struct"},"17:15092:6085":{"crate_id":17,"path":["object","pe","ImageSymbolBytes"],"kind":"struct"},"2:40088:7969":{"crate_id":2,"path":["core","array","TryFromSliceError"],"kind":"struct"},"6:7388:7838":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","align","sem_t"],"kind":"struct"},"1:5652:10559":{"crate_id":1,"path":["std","process","Termination"],"kind":"trait"},"21:2696:2047":{"crate_id":21,"path":["proc_macro","Span"],"kind":"struct"},"1:12075:1623":{"crate_id":1,"path":["std","tuple"],"kind":"primitive"},"1:909:10323":{"crate_id":1,"path":["std","collections","hash","map","ValuesMut"],"kind":"struct"},"16:7225:22647":{"crate_id":16,"path":["gimli","read","op","EvaluationResult"],"kind":"enum"},"5:1487:8654":{"crate_id":5,"path":["alloc","collections","btree","map","Values"],"kind":"struct"},"17:10612:22720":{"crate_id":17,"path":["object","read","any","SectionIterator"],"kind":"struct"},"17:10573:36068":{"crate_id":17,"path":["object","read","any","SegmentInternal"],"kind":"enum"},"24:5142:3367":{"crate_id":24,"path":["syn","generics","PredicateLifetime"],"kind":"struct"},"2:21358:33247":{"crate_id":2,"path":["core","core_simd","swizzle","deinterleave","Odd"],"kind":"struct"},"24:561:135":{"crate_id":24,"path":["syn","error","Error"],"kind":"struct"},"2:42402:3984":{"crate_id":2,"path":["core","panic","panic_info","PanicInfo"],"kind":"struct"},"6:6798:7735":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","pthread_attr_t"],"kind":"struct"},"2:31526:193":{"crate_id":2,"path":["core","cmp","Ordering"],"kind":"enum"},"17:11557:22820":{"crate_id":17,"path":["object","read","elf","note","GnuPropertyIterator"],"kind":"struct"},"17:10954:22736":{"crate_id":17,"path":["object","read","archive","ArchiveKind"],"kind":"enum"},"2:11121:15767":{"crate_id":2,"path":["core","slice","iter","RSplitNMut"],"kind":"struct"},"1:4550:10509":{"crate_id":1,"path":["std","os","unix","process","CommandExt"],"kind":"trait"},"6:4603:7230":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_ff_erase"],"kind":"struct"},"1:4720:7725":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt","st_ctime"],"kind":"foreign_type"},"5:2269:8667":{"crate_id":5,"path":["alloc","collections","btree","navigate","LazyLeafRange"],"kind":"struct"},"1:922:10324":{"crate_id":1,"path":["std","collections","hash","map","RawEntryBuilderMut"],"kind":"struct"},"24:4866:3346":{"crate_id":24,"path":["syn","expr","ExprClosure"],"kind":"struct"},"6:6100:7615":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ptrace_peeksiginfo_args"],"kind":"struct"},"2:48581:8255":{"crate_id":2,"path":["core","core_arch","x86","cpuid","CpuidResult"],"kind":"struct"},"3:0:474":{"crate_id":3,"path":["compiler_builtins"],"kind":"module"},"1:10085:27495":{"crate_id":1,"path":["std","sys","pal","unix","os","Env"],"kind":"struct"},"6:5928:7520":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","termios"],"kind":"struct"},"1:12086:1639":{"crate_id":1,"path":["std","u16"],"kind":"primitive"},"16:5521:6440":{"crate_id":16,"path":["gimli","read","cfi","EhFrameHdr"],"kind":"struct"},"16:3545:6461":{"crate_id":16,"path":["gimli","arch","X86"],"kind":"struct"},"5:7383:207":{"crate_id":5,"path":["alloc","collections","btree","set","Range"],"kind":"struct"},"16:6045:203":{"crate_id":16,"path":["gimli","read","cfi","Pointer"],"kind":"enum"},"16:4871:6485":{"crate_id":16,"path":["gimli","constants","DwDefaulted"],"kind":"struct"},"17:10905:22725":{"crate_id":17,"path":["object","read","any","SectionRelocationIterator"],"kind":"struct"},"17:15214:6113":{"crate_id":17,"path":["object","pe","ImageBaseRelocation"],"kind":"struct"},"24:3265:249":{"crate_id":24,"path":["syn","token","Trait"],"kind":"struct"},"2:22840:7894":{"crate_id":2,"path":["core","num","error","TryFromIntError"],"kind":"struct"},"17:15102:6086":{"crate_id":17,"path":["object","pe","ImageSymbolEx"],"kind":"struct"},"1:357:4578":{"crate_id":1,"path":["std","thread","scoped","Scope"],"kind":"struct"},"2:46877:8175":{"crate_id":2,"path":["core","core_arch","simd","m16x8"],"kind":"struct"},"16:6188:6506":{"crate_id":16,"path":["gimli","read","reader","ReaderOffsetId"],"kind":"struct"},"1:1590:8655":{"crate_id":1,"path":["std","collections","hash","set","Intersection"],"kind":"struct"},"16:3260:6459":{"crate_id":16,"path":["gimli","arch","LoongArch"],"kind":"struct"},"24:5094:3365":{"crate_id":24,"path":["syn","generics","BoundLifetimes"],"kind":"struct"},"24:1792:10258":{"crate_id":24,"path":["syn","print","TokensOrDefault"],"kind":"struct"},"17:13526:5690":{"crate_id":17,"path":["object","elf","Verdaux"],"kind":"struct"},"1:8399:10537":{"crate_id":1,"path":["std","os","linux","process","PidFd"],"kind":"struct"},"2:11606:15759":{"crate_id":2,"path":["core","slice","iter","ChunkBy"],"kind":"struct"},"2:3405:15799":{"crate_id":2,"path":["core","ops","try_trait","NeverShortCircuit"],"kind":"struct"},"17:10982:22737":{"crate_id":17,"path":["object","read","archive","Members"],"kind":"enum"},"24:5359:2343":{"crate_id":24,"path":["syn","path","PathArguments"],"kind":"enum"},"24:4594:3326":{"crate_id":24,"path":["syn","data","FieldsUnnamed"],"kind":"struct"},"24:4908:2322":{"crate_id":24,"path":["syn","expr","ExprLit"],"kind":"struct"},"2:10820:3412":{"crate_id":2,"path":["core","slice","iter","IterMut"],"kind":"struct"},"17:14284:5849":{"crate_id":17,"path":["object","macho","UuidCommand"],"kind":"struct"},"2:11107:15768":{"crate_id":2,"path":["core","slice","iter","SplitNMut"],"kind":"struct"},"9:0:3168":{"crate_id":9,"path":["miniz_oxide"],"kind":"module"},"24:620:3408":{"crate_id":24,"path":["syn","error","Iter"],"kind":"struct"},"24:2908:3667":{"crate_id":24,"path":["syn","token","For"],"kind":"struct"},"24:4168:3711":{"crate_id":24,"path":["syn","token","Ne"],"kind":"struct"},"17:15138:6091":{"crate_id":17,"path":["object","pe","ImageAuxSymbolFunction"],"kind":"struct"},"2:12297:8769":{"crate_id":2,"path":["core","str","iter","SplitNInternal"],"kind":"struct"},"1:2268:10385":{"crate_id":1,"path":["std","fs","DirEntry"],"kind":"struct"},"1:9038:4558":{"crate_id":1,"path":["std","sync","mpmc","context","Inner"],"kind":"struct"},"1:10858:9855":{"crate_id":1,"path":["std","sys","pal","unix","os","JoinPathsError"],"kind":"struct"},"1:5861:10084":{"crate_id":1,"path":["std","sync","condvar","Condvar"],"kind":"struct"},"1:5649:7631":{"crate_id":1,"path":["std","process","exit"],"kind":"function"},"17:12328:8478":{"crate_id":17,"path":["object","read","pe","export","ExportTable"],"kind":"struct"},"5:4381:260":{"crate_id":5,"path":["alloc","collections","vec_deque","VecDeque"],"kind":"struct"},"1:9032:114":{"crate_id":1,"path":["std","sync","mpmc","context","Context"],"kind":"struct"},"2:7449:3468":{"crate_id":2,"path":["core","iter","range","Step"],"kind":"trait"},"6:4724:7250":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Shdr"],"kind":"struct"},"24:4874:3348":{"crate_id":24,"path":["syn","expr","ExprContinue"],"kind":"struct"},"16:7366:6449":{"crate_id":16,"path":["gimli","read","pubtypes","DebugPubTypes"],"kind":"struct"},"16:5316:5467":{"crate_id":16,"path":["gimli","endianity","LittleEndian"],"kind":"struct"},"1:8561:10549":{"crate_id":1,"path":["std","path","Component"],"kind":"enum"},"2:3187:138":{"crate_id":2,"path":["core","ops","function","Fn"],"kind":"trait"},"2:10006:3562":{"crate_id":2,"path":["core","fmt","LowerHex"],"kind":"trait"},"7:78:21612":{"crate_id":7,"path":["unwind","libunwind","_Unwind_Action"],"kind":"enum"},"2:39978:212":{"crate_id":2,"path":["core","ops","range","RangeTo"],"kind":"struct"},"20:845:2667":{"crate_id":20,"path":["proc_macro2","imp","Literal"],"kind":"enum"},"2:4378:3548":{"crate_id":2,"path":["core","cell","Cell"],"kind":"struct"},"5:5896:4778":{"crate_id":5,"path":["alloc","string","Drain"],"kind":"struct"},"16:8109:135":{"crate_id":16,"path":["gimli","read","Error"],"kind":"enum"},"21:992:248":{"crate_id":21,"path":["proc_macro","bridge","client","TokenStream"],"kind":"struct"},"2:46733:8171":{"crate_id":2,"path":["core","core_arch","simd","f32x4"],"kind":"struct"},"1:4825:10494":{"crate_id":1,"path":["std","os","fd","raw","IntoRawFd"],"kind":"trait"},"16:8097:6657":{"crate_id":16,"path":["gimli","read","StoreOnHeap"],"kind":"struct"},"1:8867:196":{"crate_id":1,"path":["std","process","Output"],"kind":"struct"},"17:12150:5544":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbol"],"kind":"struct"},"17:13774:5755":{"crate_id":17,"path":["object","macho","FatArch32"],"kind":"struct"},"24:1166:8401":{"crate_id":24,"path":["syn","lit","LitRepr"],"kind":"struct"},"17:15342:6144":{"crate_id":17,"path":["object","pe","ImageDelayloadDescriptor"],"kind":"struct"},"17:11595:5502":{"crate_id":17,"path":["object","read","elf","version","VersionIndex"],"kind":"struct"},"5:6503:4778":{"crate_id":5,"path":["alloc","vec","drain","Drain"],"kind":"struct"},"1:5462:10554":{"crate_id":1,"path":["std","process","Child"],"kind":"struct"},"16:7609:8631":{"crate_id":16,"path":["gimli","read","unit","DebugInfoUnitHeadersIter"],"kind":"struct"},"2:2963:116":{"crate_id":2,"path":["core","marker","Copy"],"kind":"trait"},"24:4395:3727":{"crate_id":24,"path":["syn","token","Shr"],"kind":"struct"},"24:5387:2648":{"crate_id":24,"path":["syn","path","AngleBracketedGenericArguments"],"kind":"struct"},"2:13214:202":{"crate_id":2,"path":["core","future","pending","Pending"],"kind":"struct"},"6:6691:7700":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","flock64"],"kind":"struct"},"1:588:10310":{"crate_id":1,"path":["std","ascii","AsciiExt"],"kind":"trait"},"2:48183:8238":{"crate_id":2,"path":["core","core_arch","simd","u32x16"],"kind":"struct"},"2:22791:32933":{"crate_id":2,"path":["core","num","flt2dec","Sign"],"kind":"enum"},"2:12629:15781":{"crate_id":2,"path":["core","str","pattern","MultiCharEqPattern"],"kind":"struct"},"17:13844:5766":{"crate_id":17,"path":["object","macho","LcStr"],"kind":"struct"},"2:32779:241":{"crate_id":2,"path":["core","marker","StructuralPartialEq"],"kind":"trait"},"2:3019:5316":{"crate_id":2,"path":["core","ops","arith","Sub"],"kind":"trait"},"16:2593:6421":{"crate_id":16,"path":["gimli","common","DebugMacinfoOffset"],"kind":"struct"},"24:1967:3406":{"crate_id":24,"path":["syn","punctuated","IntoPairs"],"kind":"struct"},"1:6691:5195":{"crate_id":1,"path":["std","sync","remutex","ReentrantMutexGuard"],"kind":"struct"},"17:10350:5474":{"crate_id":17,"path":["object","endian","I64Bytes"],"kind":"struct"},"1:5713:5190":{"crate_id":1,"path":["std","sync","mpsc","Sender"],"kind":"struct"},"17:14246:5844":{"crate_id":17,"path":["object","macho","TwolevelHintsCommand"],"kind":"struct"},"17:15273:6127":{"crate_id":17,"path":["object","pe","ImageThunkData64"],"kind":"struct"},"2:1636:2533":{"crate_id":2,"path":["core","mem"],"kind":"module"},"2:42431:223":{"crate_id":2,"path":["core","result","Result"],"kind":"enum"},"5:3768:10332":{"crate_id":5,"path":["alloc","collections","linked_list","CursorMut"],"kind":"struct"},"16:6610:8594":{"crate_id":16,"path":["gimli","read","line","LineProgramHeader"],"kind":"struct"},"2:8051:176":{"crate_id":2,"path":["core","iter","traits","iterator","Iterator"],"kind":"trait"},"11:2469:4776":{"crate_id":11,"path":["hashbrown","table","ExtractIf"],"kind":"struct"},"2:47135:8195":{"crate_id":2,"path":["core","core_arch","simd","u32x8"],"kind":"struct"},"24:4967:3360":{"crate_id":24,"path":["syn","expr","ExprTryBlock"],"kind":"struct"},"1:4075:10480":{"crate_id":1,"path":["std","os","unix","fs","MetadataExt"],"kind":"trait"},"2:30963:4641":{"crate_id":2,"path":["core","mem","maybe_uninit","MaybeUninit"],"kind":"union"},"24:3129:3678":{"crate_id":24,"path":["syn","token","Pub"],"kind":"struct"},"2:11093:8771":{"crate_id":2,"path":["core","slice","iter","RSplitN"],"kind":"struct"},"11:1917:8657":{"crate_id":11,"path":["hashbrown","set","SymmetricDifference"],"kind":"struct"},"2:4095:5127":{"crate_id":2,"path":["core","array","Guard"],"kind":"struct"},"24:3992:3699":{"crate_id":24,"path":["syn","token","DotDot"],"kind":"struct"},"16:2319:6402":{"crate_id":16,"path":["gimli","common","Encoding"],"kind":"struct"},"17:12993:22729":{"crate_id":17,"path":["object","read","RelocationTarget"],"kind":"enum"},"2:22668:7876":{"crate_id":2,"path":["core","num","dec2flt","common","BiasedFp"],"kind":"struct"},"21:2641:3427":{"crate_id":21,"path":["proc_macro","LexError"],"kind":"struct"},"2:42912:10083":{"crate_id":2,"path":["core","sync","exclusive","Exclusive"],"kind":"struct"},"24:3231:1995":{"crate_id":24,"path":["syn","token","Struct"],"kind":"struct"},"13:226:6782":{"crate_id":13,"path":["std_detect","detect","cache","Initializer"],"kind":"struct"},"5:6033:16143":{"crate_id":5,"path":["alloc","sync","ArcInner"],"kind":"struct"},"2:32835:4335":{"crate_id":2,"path":["core","marker","PhantomPinned"],"kind":"struct"},"16:2979:6456":{"crate_id":16,"path":["gimli","common","DwoId"],"kind":"struct"},"24:3299:1963":{"crate_id":24,"path":["syn","token","Type"],"kind":"struct"},"1:621:9854":{"crate_id":1,"path":["std","backtrace","Backtrace"],"kind":"struct"},"2:40862:8731":{"crate_id":2,"path":["core","ffi","c_str","FromBytesUntilNulError"],"kind":"struct"},"2:42371:3983":{"crate_id":2,"path":["core","panic","location","Location"],"kind":"struct"},"2:43999:8697":{"crate_id":2,"path":["core","slice","iter","ChunksExact"],"kind":"struct"},"1:4821:10491":{"crate_id":1,"path":["std","os","fd","raw","AsRawFd"],"kind":"trait"},"6:5859:7488":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","statx_timestamp"],"kind":"struct"},"2:40673:8718":{"crate_id":2,"path":["core","ascii","EscapeDefault"],"kind":"struct"},"17:15289:6129":{"crate_id":17,"path":["object","pe","ImageTlsDirectory64"],"kind":"struct"},"17:13235:1980":{"crate_id":17,"path":["object","elf","Ident"],"kind":"struct"},"2:45084:147":{"crate_id":2,"path":["core","future","future","Future"],"kind":"trait"},"24:3866:3691":{"crate_id":24,"path":["syn","token","AndEq"],"kind":"struct"},"18:589:5352":{"crate_id":18,"path":["memchr","memmem","twoway","TwoWay"],"kind":"struct"},"20:702:8438":{"crate_id":20,"path":["proc_macro2","rcvec","RcVecIntoIter"],"kind":"struct"},"1:9073:10087":{"crate_id":1,"path":["std","sync","mpmc","list","ListToken"],"kind":"struct"},"16:2419:6413":{"crate_id":16,"path":["gimli","common","DebugAddrIndex"],"kind":"struct"},"1:7465:31760":{"crate_id":1,"path":["std","panicking","Hook"],"kind":"enum"},"2:41142:3518":{"crate_id":2,"path":["core","iter","adapters","skip_while","SkipWhile"],"kind":"struct"},"17:11102:22746":{"crate_id":17,"path":["object","read","coff","section","CoffSegment"],"kind":"struct"},"5:1537:10331":{"crate_id":5,"path":["alloc","collections","btree","map","RangeMut"],"kind":"struct"},"2:44161:2956":{"crate_id":2,"path":["core","str","iter","Bytes"],"kind":"struct"},"16:5865:8537":{"crate_id":16,"path":["gimli","read","cfi","RegisterRuleIter"],"kind":"struct"},"17:16235:6393":{"crate_id":17,"path":["object","xcoff","DwarfAux32"],"kind":"struct"},"10:36:6789":{"crate_id":10,"path":["adler","algo","U32X4"],"kind":"struct"},"17:10218:5470":{"crate_id":17,"path":["object","endian","U32Bytes"],"kind":"struct"},"6:4738:7251":{"crate_id":6,"path":["libc","unix","linux_like","linux","ucred"],"kind":"struct"},"24:4308:3721":{"crate_id":24,"path":["syn","token","Pound"],"kind":"struct"},"2:2849:10369":{"crate_id":2,"path":["core","error","Request"],"kind":"struct"},"17:13272:5644":{"crate_id":17,"path":["object","elf","SectionHeader64"],"kind":"struct"},"1:8307:10457":{"crate_id":1,"path":["std","net","tcp","IntoIncoming"],"kind":"struct"},"1:2450:10398":{"crate_id":1,"path":["std","fs","read_dir"],"kind":"function"},"1:9045:27130":{"crate_id":1,"path":["std","sync","mpmc","error","SendTimeoutError"],"kind":"enum"},"2:40892:5155":{"crate_id":2,"path":["core","ffi","VaListImpl"],"kind":"struct"},"17:15426:6168":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation64"],"kind":"struct"},"20:910:3429":{"crate_id":20,"path":["proc_macro2","Delimiter"],"kind":"enum"},"5:266:5103":{"crate_id":5,"path":["alloc","boxed","thin","drop","DropGuard"],"kind":"struct"},"21:2779:2667":{"crate_id":21,"path":["proc_macro","Literal"],"kind":"struct"},"14:0:3172":{"crate_id":14,"path":["rustc_demangle"],"kind":"module"},"17:13046:5594":{"crate_id":17,"path":["object","read","CompressedFileRange"],"kind":"struct"},"17:15190:6108":{"crate_id":17,"path":["object","pe","ImageAuxSymbolCrc"],"kind":"struct"},"2:12074:15912":{"crate_id":2,"path":["core","slice","SlicePattern"],"kind":"trait"},"2:42288:191":{"crate_id":2,"path":["core","option","Option"],"kind":"enum"},"23:235:4266":{"crate_id":23,"path":["quote","__private","get_span","GetSpan"],"kind":"struct"},"2:4529:3574":{"crate_id":2,"path":["core","cell","Ref"],"kind":"struct"},"17:12711:135":{"crate_id":17,"path":["object","read","Error"],"kind":"struct"},"2:32754:33134":{"crate_id":2,"path":["core","error","tags","MaybeSizedValue"],"kind":"struct"},"2:44782:8804":{"crate_id":2,"path":["core","str","lossy","Utf8Chunk"],"kind":"struct"},"24:1479:26997":{"crate_id":24,"path":["syn","parse","discouraged","Speculative"],"kind":"trait"},"17:12089:5541":{"crate_id":17,"path":["object","read","macho","section","MachOSectionInternal"],"kind":"struct"},"18:80:26960":{"crate_id":18,"path":["memchr","memchr","iter","Memchr"],"kind":"struct"},"17:13387:5661":{"crate_id":17,"path":["object","elf","Rel32"],"kind":"struct"},"6:6819:7741":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_fpstate"],"kind":"struct"},"2:43352:3553":{"crate_id":2,"path":["core","fmt","Arguments"],"kind":"struct"},"24:4983:3363":{"crate_id":24,"path":["syn","expr","ExprWhile"],"kind":"struct"},"2:10211:150":{"crate_id":2,"path":["core","hash","Hash"],"kind":"trait"},"5:40:4692":{"crate_id":5,"path":["alloc","raw_vec","RawVec"],"kind":"struct"},"5:6631:3407":{"crate_id":5,"path":["alloc","vec","into_iter","IntoIter"],"kind":"struct"},"23:0:1228":{"crate_id":23,"path":["quote"],"kind":"module"},"1:5720:8821":{"crate_id":1,"path":["std","sync","mpsc","SyncSender"],"kind":"struct"},"17:16079:6355":{"crate_id":17,"path":["object","xcoff","Symbol32"],"kind":"struct"},"11:811:4776":{"crate_id":11,"path":["hashbrown","map","ExtractIf"],"kind":"struct"},"15:288:21727":{"crate_id":15,"path":["addr2line","LocationRangeIter"],"kind":"struct"},"17:14311:5851":{"crate_id":17,"path":["object","macho","LinkeditDataCommand"],"kind":"struct"},"16:2749:6428":{"crate_id":16,"path":["gimli","common","DebugStrOffsetsBase"],"kind":"struct"},"16:6546:8592":{"crate_id":16,"path":["gimli","read","line","LineInstructions"],"kind":"struct"},"11:1676:5100":{"crate_id":11,"path":["hashbrown","scopeguard","ScopeGuard"],"kind":"struct"},"2:44046:3494":{"crate_id":2,"path":["core","slice","iter","ArrayChunks"],"kind":"struct"},"6:4595:7226":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_ff_upload"],"kind":"struct"},"20:716:3594":{"crate_id":20,"path":["proc_macro2","fallback","SourceFile"],"kind":"struct"},"1:5132:28055":{"crate_id":1,"path":["std","path","fmt","DebugHelper"],"kind":"struct"},"1:3237:27762":{"crate_id":1,"path":["std","io","stdio","StdoutRaw"],"kind":"struct"},"24:3924:3695":{"crate_id":24,"path":["syn","token","Colon"],"kind":"struct"},"16:2917:21774":{"crate_id":16,"path":["gimli","common","SectionId"],"kind":"enum"},"1:5527:112":{"crate_id":1,"path":["std","process","Command"],"kind":"struct"},"6:6263:7670":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","semid_ds"],"kind":"struct"},"1:11491:5211":{"crate_id":1,"path":["std","sys_common","net","LookupHost"],"kind":"struct"},"24:4214:3714":{"crate_id":24,"path":["syn","token","OrEq"],"kind":"struct"},"1:8617:8323":{"crate_id":1,"path":["std","path","Ancestors"],"kind":"struct"},"24:912:36405":{"crate_id":24,"path":["syn","generics","LifetimesMut"],"kind":"struct"},"16:7376:8630":{"crate_id":16,"path":["gimli","read","pubtypes","PubTypesEntryIter"],"kind":"struct"},"17:11026:22739":{"crate_id":17,"path":["object","read","archive","MemberHeader"],"kind":"enum"},"2:44605:8791":{"crate_id":2,"path":["core","str","pattern","CharArraySearcher"],"kind":"struct"},"2:42354:3412":{"crate_id":2,"path":["core","option","IterMut"],"kind":"struct"},"1:3354:10440":{"crate_id":1,"path":["std","io","stdio","Stderr"],"kind":"struct"},"17:3597:22848":{"crate_id":17,"path":["object","read","macho","relocation","MachORelocationIterator"],"kind":"struct"},"16:6599:8593":{"crate_id":16,"path":["gimli","read","line","LineSequence"],"kind":"struct"},"2:22211:10699":{"crate_id":2,"path":["core","core_simd","simd","num","float","SimdFloat"],"kind":"trait"},"17:13325:5651":{"crate_id":17,"path":["object","elf","Sym32"],"kind":"struct"},"1:6227:5174":{"crate_id":1,"path":["std","sync","mpmc","waker","Waker"],"kind":"struct"},"2:40018:213":{"crate_id":2,"path":["core","ops","range","RangeToInclusive"],"kind":"struct"},"16:2553:6419":{"crate_id":16,"path":["gimli","common","DebugLocListsBase"],"kind":"struct"},"17:12318:5551":{"crate_id":17,"path":["object","read","pe","export","Export"],"kind":"struct"},"16:6215:10053":{"crate_id":16,"path":["gimli","read","abbrev","AbbreviationsCache"],"kind":"struct"},"17:11189:5490":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbol"],"kind":"struct"},"6:5111:7444":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_ifc_ifcu"],"kind":"union"},"16:2789:6430":{"crate_id":16,"path":["gimli","common","DebugTypesOffset"],"kind":"struct"},"1:7924:10401":{"crate_id":1,"path":["std","fs","ReadDir"],"kind":"struct"},"23:281:2057":{"crate_id":23,"path":["quote","__private","push_lifetime_spanned","Lifetime"],"kind":"struct"},"17:15126:6088":{"crate_id":17,"path":["object","pe","ImageAuxSymbolTokenDef"],"kind":"struct"},"20:955:2667":{"crate_id":20,"path":["proc_macro2","Literal"],"kind":"struct"},"24:4069:3704":{"crate_id":24,"path":["syn","token","Ge"],"kind":"struct"},"17:2037:22779":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbolIterator"],"kind":"struct"},"2:42250:8110":{"crate_id":2,"path":["core","net","socket_addr","SocketAddrV4"],"kind":"struct"},"16:6811:22644":{"crate_id":16,"path":["gimli","read","loclists","RawLocListEntry"],"kind":"enum"},"17:11605:5503":{"crate_id":17,"path":["object","read","elf","version","Version"],"kind":"struct"},"2:13187:33073":{"crate_id":2,"path":["core","future","join","MaybeDone"],"kind":"enum"},"16:3709:6462":{"crate_id":16,"path":["gimli","constants","DwSect"],"kind":"struct"},"17:12043:22830":{"crate_id":17,"path":["object","read","macho","segment","MachOSegment"],"kind":"struct"},"1:1824:10338":{"crate_id":1,"path":["std","env","Vars"],"kind":"struct"},"1:10682:8838":{"crate_id":1,"path":["std","sys","pal","unix","fs","StatxExtraFields"],"kind":"struct"},"17:11661:8468":{"crate_id":17,"path":["object","read","elf","version","VerneedIterator"],"kind":"struct"},"17:12792:5433":{"crate_id":17,"path":["object","read","SectionIndex"],"kind":"struct"},"24:928:36407":{"crate_id":24,"path":["syn","generics","TypeParamsMut"],"kind":"struct"},"24:4942:3336":{"crate_id":24,"path":["syn","expr","ExprReference"],"kind":"struct"},"17:15266:6126":{"crate_id":17,"path":["object","pe","ImageImportByName"],"kind":"struct"},"24:4610:1985":{"crate_id":24,"path":["syn","derive","Data"],"kind":"enum"},"17:13606:5713":{"crate_id":17,"path":["object","elf","GnuHashHeader"],"kind":"struct"},"21:0:1176":{"crate_id":21,"path":["proc_macro"],"kind":"module"},"20:513:3427":{"crate_id":20,"path":["proc_macro2","LexError"],"kind":"struct"},"24:4856:3329":{"crate_id":24,"path":["syn","expr","ExprCall"],"kind":"struct"},"2:10010:203":{"crate_id":2,"path":["core","fmt","Pointer"],"kind":"trait"},"10:0:3169":{"crate_id":10,"path":["adler"],"kind":"module"},"1:12040:10320":{"crate_id":1,"path":["std","backtrace_rs","types","BytesOrWideString"],"kind":"enum"},"5:1528:207":{"crate_id":5,"path":["alloc","collections","btree","map","Range"],"kind":"struct"},"16:6669:8607":{"crate_id":16,"path":["gimli","read","line","CompleteLineProgram"],"kind":"struct"},"6:7610:7842":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_condattr_t"],"kind":"struct"},"17:11877:5505":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandIterator"],"kind":"struct"},"6:1596:6999":{"crate_id":6,"path":["libc","unix","linux_like","Dl_info"],"kind":"struct"},"2:42362:3407":{"crate_id":2,"path":["core","option","IntoIter"],"kind":"struct"},"2:3046:15863":{"crate_id":2,"path":["core","ops","async_function","AsyncFnMut"],"kind":"trait"},"2:46132:8144":{"crate_id":2,"path":["core","core_arch","simd","u16x2"],"kind":"struct"},"16:5959:21746":{"crate_id":16,"path":["gimli","read","cfi","CallFrameInstruction"],"kind":"enum"},"24:5547:3396":{"crate_id":24,"path":["syn","ty","TypeReference"],"kind":"struct"},"1:9142:184":{"crate_id":1,"path":["std","sync","mutex","MutexGuard"],"kind":"struct"},"1:7980:4844":{"crate_id":1,"path":["std","hash","random","RandomState"],"kind":"struct"},"2:43559:8756":{"crate_id":2,"path":["core","hash","sip","Sip13Rounds"],"kind":"struct"},"16:7619:22652":{"crate_id":16,"path":["gimli","read","unit","UnitType"],"kind":"enum"},"2:41277:3519":{"crate_id":2,"path":["core","iter","adapters","take","Take"],"kind":"struct"},"1:8282:2956":{"crate_id":1,"path":["std","io","Bytes"],"kind":"struct"},"6:5085:7427":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_ifr_ifru"],"kind":"union"},"2:44474:8724":{"crate_id":2,"path":["core","str","iter","EscapeDebug"],"kind":"struct"},"6:6927:7809":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","seccomp_notif_sizes"],"kind":"struct"},"17:10018:22695":{"crate_id":17,"path":["object","common","FileFlags"],"kind":"enum"},"1:3315:10444":{"crate_id":1,"path":["std","io","stdio","Stdout"],"kind":"struct"},"16:6268:6436":{"crate_id":16,"path":["gimli","read","aranges","DebugAranges"],"kind":"struct"},"21:2509:3595":{"crate_id":21,"path":["proc_macro","bridge","Diagnostic"],"kind":"struct"},"17:15822:6289":{"crate_id":17,"path":["object","pe","ImportObjectHeader"],"kind":"struct"},"24:5042:1988":{"crate_id":24,"path":["syn","generics","Generics"],"kind":"struct"},"18:573:5345":{"crate_id":18,"path":["memchr","memmem","twoway","Forward"],"kind":"struct"},"5:830:5109":{"crate_id":5,"path":["alloc","collections","binary_heap","RebuildOnDrop"],"kind":"struct"},"6:4535:7194":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_envelope"],"kind":"struct"},"11:687:3412":{"crate_id":11,"path":["hashbrown","map","IterMut"],"kind":"struct"},"5:3206:8656":{"crate_id":5,"path":["alloc","collections","btree","set","Difference"],"kind":"struct"},"17:15410:6165":{"crate_id":17,"path":["object","pe","ImageDynamicRelocationTable"],"kind":"struct"},"2:44923:8135":{"crate_id":2,"path":["core","time","Nanoseconds"],"kind":"struct"},"24:4911:3354":{"crate_id":24,"path":["syn","expr","ExprLoop"],"kind":"struct"},"2:22295:10701":{"crate_id":2,"path":["core","core_simd","simd","num","uint","SimdUint"],"kind":"trait"},"2:41093:3514":{"crate_id":2,"path":["core","iter","adapters","peekable","Peekable"],"kind":"struct"},"17:13738:5746":{"crate_id":17,"path":["object","macho","DyldCacheImageInfo"],"kind":"struct"},"17:14868:6020":{"crate_id":17,"path":["object","pe","ImageDataDirectory"],"kind":"struct"},"16:7869:3311":{"crate_id":16,"path":["gimli","read","unit","Attribute"],"kind":"struct"},"17:15313:6136":{"crate_id":17,"path":["object","pe","ImageImportDescriptor"],"kind":"struct"},"17:10044:22717":{"crate_id":17,"path":["object","common","SegmentFlags"],"kind":"enum"},"2:40679:8719":{"crate_id":2,"path":["core","async_iter","from_iter","FromIter"],"kind":"struct"},"6:1697:7068":{"crate_id":6,"path":["libc","unix","linux_like","epoll_event"],"kind":"struct"},"17:9671:22694":{"crate_id":17,"path":["object","common","Architecture"],"kind":"enum"},"2:21567:10613":{"crate_id":2,"path":["core","core_simd","lane_count","LaneCount"],"kind":"struct"},"6:4351:7087":{"crate_id":6,"path":["libc","unix","linux_like","linux","glob_t"],"kind":"struct"},"2:3159:124":{"crate_id":2,"path":["core","ops","deref","Deref"],"kind":"trait"},"2:42066:8103":{"crate_id":2,"path":["core","net","ip_addr","Ipv6Addr"],"kind":"struct"},"6:6086:7604":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","seminfo"],"kind":"struct"},"2:40716:8096":{"crate_id":2,"path":["core","char","convert","CharTryFromError"],"kind":"struct"},"6:4755:7260":{"crate_id":6,"path":["libc","unix","linux_like","linux","posix_spawn_file_actions_t"],"kind":"struct"},"1:4248:10504":{"crate_id":1,"path":["std","os","unix","net","ancillary","AncillaryData"],"kind":"enum"},"16:2835:6432":{"crate_id":16,"path":["gimli","common","DebugFrameOffset"],"kind":"struct"},"2:31553:4348":{"crate_id":2,"path":["core","cmp","Reverse"],"kind":"struct"},"24:2789:3662":{"crate_id":24,"path":["syn","token","Do"],"kind":"struct"},"2:21565:10406":{"crate_id":2,"path":["core","core_simd","lane_count","sealed","Sealed"],"kind":"trait"},"6:4401:7124":{"crate_id":6,"path":["libc","unix","linux_like","linux","signalfd_siginfo"],"kind":"struct"},"24:5256:3378":{"crate_id":24,"path":["syn","op","BinOp"],"kind":"enum"},"2:33860:3454":{"crate_id":2,"path":["core","ops","arith","AddAssign"],"kind":"trait"},"17:14341:5856":{"crate_id":17,"path":["object","macho","EncryptionInfoCommand32"],"kind":"struct"},"2:43567:8757":{"crate_id":2,"path":["core","hash","sip","Sip24Rounds"],"kind":"struct"},"24:5552:3397":{"crate_id":24,"path":["syn","ty","TypeSlice"],"kind":"struct"},"2:46779:8173":{"crate_id":2,"path":["core","core_arch","simd","f64x4"],"kind":"struct"},"24:3163:225":{"crate_id":24,"path":["syn","token","Return"],"kind":"struct"},"1:12066:397":{"crate_id":1,"path":["std","bool"],"kind":"primitive"},"1:4781:10536":{"crate_id":1,"path":["std","os","linux","process","ChildExt"],"kind":"trait"},"2:41018:3509":{"crate_id":2,"path":["core","iter","adapters","filter_map","FilterMap"],"kind":"struct"},"24:3350:3683":{"crate_id":24,"path":["syn","token","Unsafe"],"kind":"struct"},"5:7319:8671":{"crate_id":5,"path":["alloc","collections","binary_heap","IntoIterSorted"],"kind":"struct"},"24:4915:3333":{"crate_id":24,"path":["syn","expr","ExprMacro"],"kind":"struct"},"2:44800:8805":{"crate_id":2,"path":["core","str","lossy","Utf8Chunks"],"kind":"struct"},"20:116:36092":{"crate_id":20,"path":["proc_macro2","rcvec","RcVecBuilder"],"kind":"struct"},"2:44091:8699":{"crate_id":2,"path":["core","slice","iter","RChunksExact"],"kind":"struct"},"20:734:1968":{"crate_id":20,"path":["proc_macro2","fallback","Group"],"kind":"struct"},"17:11547:5340":{"crate_id":17,"path":["object","read","elf","note","Note"],"kind":"struct"},"24:2687:2028":{"crate_id":24,"path":["syn","token","Box"],"kind":"struct"},"2:40799:15818":{"crate_id":2,"path":["core","char","CaseMappingIter"],"kind":"enum"},"20:803:8439":{"crate_id":20,"path":["proc_macro2","imp","DeferredTokenStream"],"kind":"struct"},"2:44151:8762":{"crate_id":2,"path":["core","str","iter","CharIndices"],"kind":"struct"},"21:2715:2048":{"crate_id":21,"path":["proc_macro","TokenTree"],"kind":"enum"},"5:5360:5103":{"crate_id":5,"path":["alloc","slice","hack","to_vec","DropGuard"],"kind":"struct"},"1:4047:10477":{"crate_id":1,"path":["std","os","unix","fs","FileExt"],"kind":"trait"},"1:9961:8747":{"crate_id":1,"path":["std","sys","pal","unix","net","Socket"],"kind":"struct"},"24:4533:3311":{"crate_id":24,"path":["syn","attr","Attribute"],"kind":"struct"},"17:14986:6062":{"crate_id":17,"path":["object","pe","ImageRomHeaders"],"kind":"struct"},"17:13553:5699":{"crate_id":17,"path":["object","elf","Vernaux"],"kind":"struct"},"6:6222:7644":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","sigset_t"],"kind":"struct"},"5:7492:4568":{"crate_id":5,"path":["alloc","ffi","c_str","CString"],"kind":"struct"},"2:44279:8770":{"crate_id":2,"path":["core","str","iter","SplitN"],"kind":"struct"},"11:1603:21702":{"crate_id":11,"path":["hashbrown","rustc_entry","RustcVacantEntry"],"kind":"struct"},"6:1558:6975":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_ll"],"kind":"struct"},"2:43010:2584":{"crate_id":2,"path":["core","fmt","num","Binary"],"kind":"struct"},"21:2735:3429":{"crate_id":21,"path":["proc_macro","Delimiter"],"kind":"enum"},"2:43017:3554":{"crate_id":2,"path":["core","fmt","num","Octal"],"kind":"struct"},"17:11493:22784":{"crate_id":17,"path":["object","read","elf","relocation","RelocationSections"],"kind":"struct"},"11:1728:153":{"crate_id":11,"path":["hashbrown","set","HashSet"],"kind":"struct"},"17:12289:5546":{"crate_id":17,"path":["object","read","pe","data_directory","DataDirectories"],"kind":"struct"},"24:677:36259":{"crate_id":24,"path":["syn","expr","precedence","Precedence"],"kind":"enum"},"1:9066:28084":{"crate_id":1,"path":["std","sync","mpmc","list","Position"],"kind":"struct"},"6:4955:7358":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_sndrcvinfo"],"kind":"struct"},"21:2774:1980":{"crate_id":21,"path":["proc_macro","Ident"],"kind":"struct"},"18:680:8445":{"crate_id":18,"path":["memchr","memmem","Finder"],"kind":"struct"},"16:2399:6412":{"crate_id":16,"path":["gimli","common","DebugAddrBase"],"kind":"struct"},"2:30984:3551":{"crate_id":2,"path":["core","ptr","alignment","Alignment"],"kind":"struct"},"2:40766:8724":{"crate_id":2,"path":["core","char","EscapeDebug"],"kind":"struct"},"2:3667:4778":{"crate_id":2,"path":["core","array","drain","Drain"],"kind":"struct"},"6:0:877":{"crate_id":6,"path":["libc"],"kind":"module"},"16:5919:22638":{"crate_id":16,"path":["gimli","read","cfi","RegisterRule"],"kind":"enum"},"2:44379:8776":{"crate_id":2,"path":["core","str","iter","Matches"],"kind":"struct"},"2:40929:3494":{"crate_id":2,"path":["core","iter","adapters","array_chunks","ArrayChunks"],"kind":"struct"},"1:12068:447":{"crate_id":1,"path":["std","char"],"kind":"primitive"},"16:7507:207":{"crate_id":16,"path":["gimli","read","rnglists","Range"],"kind":"struct"},"16:6555:6533":{"crate_id":16,"path":["gimli","read","line","LineRow"],"kind":"struct"},"1:8546:8318":{"crate_id":1,"path":["std","path","PrefixComponent"],"kind":"struct"},"9:423:21621":{"crate_id":9,"path":["miniz_oxide","MZStatus"],"kind":"enum"},"24:4354:3724":{"crate_id":24,"path":["syn","token","Semi"],"kind":"struct"},"5:3596:180":{"crate_id":5,"path":["alloc","collections","linked_list","LinkedList"],"kind":"struct"},"16:2995:21775":{"crate_id":16,"path":["gimli","common","DwarfFileType"],"kind":"enum"},"2:44891:8808":{"crate_id":2,"path":["core","str","CharEscapeDebugContinue"],"kind":"struct"},"24:1994:3407":{"crate_id":24,"path":["syn","punctuated","IntoIter"],"kind":"struct"},"7:0:1687":{"crate_id":7,"path":["unwind"],"kind":"module"},"24:3248:3681":{"crate_id":24,"path":["syn","token","Super"],"kind":"struct"},"16:6462:22641":{"crate_id":16,"path":["gimli","read","line","LineInstruction"],"kind":"enum"},"1:6621:9861":{"crate_id":1,"path":["std","sync","poison","PoisonError"],"kind":"struct"},"17:13024:22730":{"crate_id":17,"path":["object","read","CompressionFormat"],"kind":"enum"},"16:6394:8586":{"crate_id":16,"path":["gimli","read","index","UnitIndexSectionIterator"],"kind":"struct"},"1:1809:655":{"crate_id":1,"path":["std","env"],"kind":"module"},"1:893:4778":{"crate_id":1,"path":["std","collections","hash","map","Drain"],"kind":"struct"},"1:8348:8827":{"crate_id":1,"path":["std","os","unix","net","addr","SocketAddr"],"kind":"struct"},"17:12399:8489":{"crate_id":17,"path":["object","read","pe","import","DelayLoadDescriptorIterator"],"kind":"struct"},"17:13877:5774":{"crate_id":17,"path":["object","macho","SegmentCommand64"],"kind":"struct"},"11:0:3170":{"crate_id":11,"path":["hashbrown"],"kind":"module"},"2:7397:32991":{"crate_id":2,"path":["core","iter","adapters","GenericShunt"],"kind":"struct"},"6:6248:7659":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","msqid_ds"],"kind":"struct"},"2:38504:5325":{"crate_id":2,"path":["core","ops","bit","BitAndAssign"],"kind":"trait"},"17:14235:5842":{"crate_id":17,"path":["object","macho","DylibReference"],"kind":"struct"},"24:3146:3574":{"crate_id":24,"path":["syn","token","Ref"],"kind":"struct"},"17:11153:22723":{"crate_id":17,"path":["object","read","coff","symbol","SymbolIterator"],"kind":"struct"},"11:1896:4776":{"crate_id":11,"path":["hashbrown","set","ExtractIf"],"kind":"struct"},"1:7752:4567":{"crate_id":1,"path":["std","thread","ThreadId"],"kind":"struct"},"17:14372:5861":{"crate_id":17,"path":["object","macho","VersionMinCommand"],"kind":"struct"},"1:8301:10458":{"crate_id":1,"path":["std","net","tcp","Incoming"],"kind":"struct"},"17:13753:5751":{"crate_id":17,"path":["object","macho","DyldSubCacheInfo"],"kind":"struct"},"16:6116:2010":{"crate_id":16,"path":["gimli","read","dwarf","Unit"],"kind":"struct"},"16:2489:6416":{"crate_id":16,"path":["gimli","common","DebugLineOffset"],"kind":"struct"},"2:44429:8778":{"crate_id":2,"path":["core","str","iter","Lines"],"kind":"struct"},"24:288:36244":{"crate_id":24,"path":["syn","bigint","BigInt"],"kind":"struct"},"5:5020:5127":{"crate_id":5,"path":["alloc","rc","from_iter_exact","Guard"],"kind":"struct"},"2:39911:8716":{"crate_id":2,"path":["core","ops","index_range","IndexRange"],"kind":"struct"},"17:2234:22796":{"crate_id":17,"path":["object","read","elf","relocation","ElfSectionRelocationIterator"],"kind":"struct"},"11:856:10326":{"crate_id":11,"path":["hashbrown","map","RawOccupiedEntryMut"],"kind":"struct"},"17:10661:22721":{"crate_id":17,"path":["object","read","any","ComdatIterator"],"kind":"struct"},"2:2677:10406":{"crate_id":2,"path":["core","convert","num","private","Sealed"],"kind":"trait"},"17:15701:6260":{"crate_id":17,"path":["object","pe","ImageEnclaveImport"],"kind":"struct"},"24:2636:3658":{"crate_id":24,"path":["syn","token","Auto"],"kind":"struct"},"24:5006:58":{"crate_id":24,"path":["syn","expr","parsing","kw","builtin"],"kind":"struct"},"1:11056:8324":{"crate_id":1,"path":["std","sys","pal","unix","process","process_inner","ExitStatus"],"kind":"struct"},"1:10350:10560":{"crate_id":1,"path":["std","sys","pal","unix","process","process_common","CommandArgs"],"kind":"struct"},"11:1883:3408":{"crate_id":11,"path":["hashbrown","set","Iter"],"kind":"struct"},"2:4966:415":{"crate_id":2,"path":["core","ffi","c_void"],"kind":"enum"},"1:6438:183":{"crate_id":1,"path":["std","sync","mutex","Mutex"],"kind":"struct"},"6:495:6879":{"crate_id":6,"path":["libc","unix","timespec"],"kind":"struct"},"1:7111:5198":{"crate_id":1,"path":["std","sys_common","lazy_box","LazyBox"],"kind":"struct"},"18:698:8449":{"crate_id":18,"path":["memchr","memmem","FinderBuilder"],"kind":"struct"},"6:4461:7160":{"crate_id":6,"path":["libc","unix","linux_like","linux","msginfo"],"kind":"struct"},"6:1710:7072":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_storage"],"kind":"struct"},"1:504:4554":{"crate_id":1,"path":["std","thread","PanicGuard"],"kind":"struct"},"24:1940:3405":{"crate_id":24,"path":["syn","punctuated","PairsMut"],"kind":"struct"},"24:3878:3692":{"crate_id":24,"path":["syn","token","At"],"kind":"struct"},"24:5431:3382":{"crate_id":24,"path":["syn","restriction","FieldMutability"],"kind":"enum"},"17:12530:22907":{"crate_id":17,"path":["object","read","xcoff","section","XcoffSectionIterator"],"kind":"struct"},"2:39923:210":{"crate_id":2,"path":["core","ops","range","RangeFull"],"kind":"struct"},"6:7622:7844":{"crate_id":6,"path":["libc","unix","linux_like","linux","fanotify_event_metadata"],"kind":"struct"},"17:13292:5645":{"crate_id":17,"path":["object","elf","CompressionHeader32"],"kind":"struct"},"2:21586:7874":{"crate_id":2,"path":["core","core_simd","masks","mask_impl","Mask"],"kind":"struct"},"24:5241:2365":{"crate_id":24,"path":["syn","mac","Macro"],"kind":"struct"},"16:5238:6491":{"crate_id":16,"path":["gimli","constants","DwOp"],"kind":"struct"},"2:41009:3508":{"crate_id":2,"path":["core","iter","adapters","filter","Filter"],"kind":"struct"},"16:7400:6451":{"crate_id":16,"path":["gimli","read","rnglists","DebugRngLists"],"kind":"struct"},"6:475:1969":{"crate_id":6,"path":["libc","unix","group"],"kind":"struct"},"2:21693:10614":{"crate_id":2,"path":["core","core_simd","masks","MaskElement"],"kind":"trait"},"17:13509:5682":{"crate_id":17,"path":["object","elf","Verdef"],"kind":"struct"},"2:22256:10700":{"crate_id":2,"path":["core","core_simd","simd","num","int","SimdInt"],"kind":"trait"},"24:2275:10406":{"crate_id":24,"path":["syn","spanned","private","Sealed"],"kind":"trait"},"2:3193:140":{"crate_id":2,"path":["core","ops","function","FnOnce"],"kind":"trait"},"11:1891:4778":{"crate_id":11,"path":["hashbrown","set","Drain"],"kind":"struct"},"1:2733:10437":{"crate_id":1,"path":["std","io","buffered","linewriter","LineWriter"],"kind":"struct"},"1:2588:10436":{"crate_id":1,"path":["std","io","buffered","bufreader","BufReader"],"kind":"struct"},"1:7772:4564":{"crate_id":1,"path":["std","thread","Thread"],"kind":"struct"},"16:7118:3983":{"crate_id":16,"path":["gimli","read","op","Location"],"kind":"enum"},"2:21302:4348":{"crate_id":2,"path":["core","core_simd","swizzle","reverse","Reverse"],"kind":"struct"},"16:4813:6483":{"crate_id":16,"path":["gimli","constants","DwDsc"],"kind":"struct"},"17:13116:5604":{"crate_id":17,"path":["object","archive","AixHeader"],"kind":"struct"},"17:11812:22827":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCacheImage"],"kind":"struct"},"2:46755:8172":{"crate_id":2,"path":["core","core_arch","simd","f64x2"],"kind":"struct"},"16:5278:6492":{"crate_id":16,"path":["gimli","constants","DwEhPe"],"kind":"struct"},"1:2440:10393":{"crate_id":1,"path":["std","fs","canonicalize"],"kind":"function"},"1:4011:10476":{"crate_id":1,"path":["std","os","unix","ffi","os_str","OsStringExt"],"kind":"trait"},"1:3317:10445":{"crate_id":1,"path":["std","io","stdio","StdoutLock"],"kind":"struct"},"6:6913:7800":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","shmid_ds"],"kind":"struct"},"16:7932:8639":{"crate_id":16,"path":["gimli","read","unit","EntriesCursor"],"kind":"struct"},"16:4733:6480":{"crate_id":16,"path":["gimli","constants","DwCc"],"kind":"struct"},"11:742:10079":{"crate_id":11,"path":["hashbrown","map","IntoValues"],"kind":"struct"},"2:13367:5174":{"crate_id":2,"path":["core","task","wake","Waker"],"kind":"struct"},"16:7537:6453":{"crate_id":16,"path":["gimli","read","str","DebugStrOffsets"],"kind":"struct"},"24:2286:5313":{"crate_id":24,"path":["syn","thread","ThreadBound"],"kind":"struct"},"24:960:3369":{"crate_id":24,"path":["syn","generics","Turbofish"],"kind":"struct"},"2:41152:3502":{"crate_id":2,"path":["core","iter","adapters","step_by","StepBy"],"kind":"struct"},"2:4196:108":{"crate_id":2,"path":["core","asserting","Capture"],"kind":"struct"},"2:4219:4683":{"crate_id":2,"path":["core","async_iter","async_iter","AsyncIterator"],"kind":"trait"},"1:9119:8335":{"crate_id":1,"path":["std","sync","mpmc","utils","CachePadded"],"kind":"struct"},"2:22123:10406":{"crate_id":2,"path":["core","core_simd","vector","sealed","Sealed"],"kind":"trait"},"16:5038:6490":{"crate_id":16,"path":["gimli","constants","DwRle"],"kind":"struct"},"1:3589:10425":{"crate_id":1,"path":["std","io","BufRead"],"kind":"trait"},"2:45105:204":{"crate_id":2,"path":["core","task","poll","Poll"],"kind":"enum"},"1:11650:8853":{"crate_id":1,"path":["std","backtrace_rs","backtrace","Frame"],"kind":"struct"},"16:0:3174":{"crate_id":16,"path":["gimli"],"kind":"module"},"17:15058:6073":{"crate_id":17,"path":["object","pe","ImageSectionHeader"],"kind":"struct"},"5:0:303":{"crate_id":5,"path":["alloc"],"kind":"module"},"11:2569:3464":{"crate_id":11,"path":["hashbrown","TryReserveError"],"kind":"enum"},"6:5117:7447":{"crate_id":6,"path":["libc","unix","linux_like","linux","ifconf"],"kind":"struct"},"18:613:36087":{"crate_id":18,"path":["memchr","memmem","twoway","SuffixKind"],"kind":"enum"},"5:2049:3546":{"crate_id":5,"path":["alloc","collections","btree","map","Cursor"],"kind":"struct"},"17:14847:6010":{"crate_id":17,"path":["object","pe","MaskedRichHeaderEntry"],"kind":"struct"},"6:5130:7453":{"crate_id":6,"path":["libc","unix","linux_like","linux","dirent64"],"kind":"struct"},"16:5759:8526":{"crate_id":16,"path":["gimli","read","cfi","PartialFrameDescriptionEntry"],"kind":"struct"},"2:41071:3513":{"crate_id":2,"path":["core","iter","adapters","map","Map"],"kind":"struct"},"2:22:729":{"crate_id":2,"path":["core","format_args"],"kind":"macro"},"1:6330:5190":{"crate_id":1,"path":["std","sync","mpmc","Sender"],"kind":"struct"},"2:39827:15798":{"crate_id":2,"path":["core","ops","control_flow","ControlFlow"],"kind":"enum"},"17:12478:5558":{"crate_id":17,"path":["object","read","pe","resource","ResourceName"],"kind":"struct"},"2:40261:28973":{"crate_id":2,"path":["core","ascii","ascii_char","AsciiChar"],"kind":"enum"},"1:8912:3408":{"crate_id":1,"path":["std","sync","mpsc","Iter"],"kind":"struct"},"2:32778:3600":{"crate_id":2,"path":["core","marker","Sized"],"kind":"trait"},"2:22319:10406":{"crate_id":2,"path":["core","core_simd","simd","num","sealed","Sealed"],"kind":"trait"},"17:16176:6382":{"crate_id":17,"path":["object","xcoff","FunAux64"],"kind":"struct"},"1:12069:1658":{"crate_id":1,"path":["std","unit"],"kind":"primitive"},"2:44397:8777":{"crate_id":2,"path":["core","str","iter","RMatches"],"kind":"struct"},"2:48425:8247":{"crate_id":2,"path":["core","core_arch","x86","__m256"],"kind":"struct"},"17:11647:8467":{"crate_id":17,"path":["object","read","elf","version","VerdauxIterator"],"kind":"struct"},"17:2203:22774":{"crate_id":17,"path":["object","read","elf","relocation","ElfDynamicRelocationIterator"],"kind":"struct"},"1:12073:1505":{"crate_id":1,"path":["std","slice"],"kind":"primitive"},"24:4407:3728":{"crate_id":24,"path":["syn","token","ShrEq"],"kind":"struct"},"24:2874:3666":{"crate_id":24,"path":["syn","token","Final"],"kind":"struct"},"5:6370:10705":{"crate_id":5,"path":["alloc","task","Wake"],"kind":"trait"},"20:929:2374":{"crate_id":20,"path":["proc_macro2","Punct"],"kind":"struct"},"24:4991:2003":{"crate_id":24,"path":["syn","expr","Member"],"kind":"enum"},"1:8233:8301":{"crate_id":1,"path":["std","io","IoSlice"],"kind":"struct"},"21:2754:2374":{"crate_id":21,"path":["proc_macro","Punct"],"kind":"struct"},"2:2511:132":{"crate_id":2,"path":["core","cmp","Eq"],"kind":"trait"},"17:11051:22758":{"crate_id":17,"path":["object","read","coff","file","CoffCommon"],"kind":"struct"},"24:3895:3693":{"crate_id":24,"path":["syn","token","Caret"],"kind":"struct"},"2:4172:33120":{"crate_id":2,"path":["core","asserting","TryCaptureWithoutDebug"],"kind":"struct"},"17:12464:22900":{"crate_id":17,"path":["object","read","pe","resource","ResourceDirectoryEntryData"],"kind":"enum"},"1:9175:8336":{"crate_id":1,"path":["std","time","SystemTime"],"kind":"struct"},"2:44467:8782":{"crate_id":2,"path":["core","str","iter","EncodeUtf16"],"kind":"struct"},"2:22477:10696":{"crate_id":2,"path":["core","core_simd","simd","cmp","ord","SimdPartialOrd"],"kind":"trait"},"2:42110:2047":{"crate_id":2,"path":["core","net","ip_addr","fmt","Span"],"kind":"struct"},"2:46280:8150":{"crate_id":2,"path":["core","core_arch","simd","u64x1"],"kind":"struct"},"17:10720:36064":{"crate_id":17,"path":["object","read","any","ComdatSectionIteratorInternal"],"kind":"enum"},"16:7306:22648":{"crate_id":16,"path":["gimli","read","op","Evaluation"],"kind":"struct"},"17:14489:5884":{"crate_id":17,"path":["object","macho","EntryPointCommand"],"kind":"struct"},"16:7551:6443":{"crate_id":16,"path":["gimli","read","str","DebugLineStr"],"kind":"struct"},"2:45097:224":{"crate_id":2,"path":["core","future","ResumeTy"],"kind":"struct"},"2:2961:3581":{"crate_id":2,"path":["core","marker","Unsize"],"kind":"trait"},"24:3418:3687":{"crate_id":24,"path":["syn","token","Where"],"kind":"struct"},"17:14977:6061":{"crate_id":17,"path":["object","pe","ImageNtHeaders32"],"kind":"struct"},"2:44965:8816":{"crate_id":2,"path":["core","time","TryFromFloatSecsError"],"kind":"struct"},"2:40729:8721":{"crate_id":2,"path":["core","char","decode","DecodeUtf16"],"kind":"struct"},"24:5573:2536":{"crate_id":24,"path":["syn","ty","ReturnType"],"kind":"enum"},"24:89:1974":{"crate_id":24,"path":["syn","token","Token"],"kind":"trait"},"17:15957:6310":{"crate_id":17,"path":["object","xcoff","AuxHeader32"],"kind":"struct"},"18:491:8441":{"crate_id":18,"path":["memchr","cow","Imp"],"kind":"struct"},"6:4808:7287":{"crate_id":6,"path":["libc","unix","linux_like","linux","fanotify_response"],"kind":"struct"},"2:40068:15866":{"crate_id":2,"path":["core","ops","try_trait","Yeet"],"kind":"struct"},"24:4110:3707":{"crate_id":24,"path":["syn","token","Le"],"kind":"struct"},"24:4597:1997":{"crate_id":24,"path":["syn","data","Field"],"kind":"struct"},"6:5140:7454":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_txtime"],"kind":"struct"},"2:47325:8198":{"crate_id":2,"path":["core","core_arch","simd","i16x16"],"kind":"struct"},"2:10365:5162":{"crate_id":2,"path":["core","slice","sort","InsertionHole"],"kind":"struct"},"2:5681:5127":{"crate_id":2,"path":["core","iter","adapters","filter","next_chunk","Guard"],"kind":"struct"},"20:794:248":{"crate_id":20,"path":["proc_macro2","imp","TokenStream"],"kind":"enum"},"11:1066:21697":{"crate_id":11,"path":["hashbrown","map","EntryRef"],"kind":"enum"},"1:9193:8835":{"crate_id":1,"path":["std","time","SystemTimeError"],"kind":"struct"},"2:42487:3407":{"crate_id":2,"path":["core","result","IntoIter"],"kind":"struct"},"2:44297:8771":{"crate_id":2,"path":["core","str","iter","RSplitN"],"kind":"struct"},"21:2314:2374":{"crate_id":21,"path":["proc_macro","bridge","Punct"],"kind":"struct"},"24:3180:3679":{"crate_id":24,"path":["syn","token","SelfType"],"kind":"struct"},"2:46709:8170":{"crate_id":2,"path":["core","core_arch","simd","i64x2"],"kind":"struct"},"24:1369:3550":{"crate_id":24,"path":["syn","lookahead","Peek"],"kind":"trait"},"11:2383:3408":{"crate_id":11,"path":["hashbrown","table","Iter"],"kind":"struct"},"16:6895:8619":{"crate_id":16,"path":["gimli","read","lookup","LookupEntryIter"],"kind":"struct"},"16:7984:22655":{"crate_id":16,"path":["gimli","read","unit","EntriesTreeIter"],"kind":"struct"},"5:7653:4776":{"crate_id":5,"path":["alloc","vec","extract_if","ExtractIf"],"kind":"struct"},"2:32707:6786":{"crate_id":2,"path":["core","convert","Infallible"],"kind":"enum"},"6:4902:7332":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlmsgerr"],"kind":"struct"},"6:1514:6950":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreq_source"],"kind":"struct"},"17:14091:5802":{"crate_id":17,"path":["object","macho","RoutinesCommand32"],"kind":"struct"},"6:5969:7540":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_pktinfo"],"kind":"struct"},"2:40792:8726":{"crate_id":2,"path":["core","char","ToUppercase"],"kind":"struct"},"1:1581:4778":{"crate_id":1,"path":["std","collections","hash","set","Drain"],"kind":"struct"},"2:44734:8795":{"crate_id":2,"path":["core","str","pattern","StrSearcher"],"kind":"struct"},"24:5417:3384":{"crate_id":24,"path":["syn","restriction","Visibility"],"kind":"enum"},"8:0:3167":{"crate_id":8,"path":["cfg_if"],"kind":"module"},"16:6724:6549":{"crate_id":16,"path":["gimli","read","line","FileEntryFormat"],"kind":"struct"},"16:2689:6425":{"crate_id":16,"path":["gimli","common","DebugRngListsBase"],"kind":"struct"},"2:41080:3499":{"crate_id":2,"path":["core","iter","adapters","map_while","MapWhile"],"kind":"struct"},"17:10997:5484":{"crate_id":17,"path":["object","read","archive","ArchiveFile"],"kind":"struct"},"24:4436:3730":{"crate_id":24,"path":["syn","token","SlashEq"],"kind":"struct"},"2:21512:10406":{"crate_id":2,"path":["core","core_simd","cast","sealed","Sealed"],"kind":"trait"},"2:46830:8174":{"crate_id":2,"path":["core","core_arch","simd","m8x16"],"kind":"struct"},"2:10796:3408":{"crate_id":2,"path":["core","slice","iter","Iter"],"kind":"struct"},"24:5001:3339":{"crate_id":24,"path":["syn","expr","FieldValue"],"kind":"struct"},"2:44009:15761":{"crate_id":2,"path":["core","slice","iter","ChunksExactMut"],"kind":"struct"},"2:10259:8688":{"crate_id":2,"path":["core","hash","BuildHasherDefault"],"kind":"struct"},"2:2730:253":{"crate_id":2,"path":["core","convert","TryFrom"],"kind":"trait"},"2:42834:91":{"crate_id":2,"path":["core","sync","atomic","AtomicIsize"],"kind":"struct"},"24:5527:3390":{"crate_id":24,"path":["syn","ty","TypeImplTrait"],"kind":"struct"},"5:3199:3408":{"crate_id":5,"path":["alloc","collections","btree","set","Iter"],"kind":"struct"},"17:16121:6366":{"crate_id":17,"path":["object","xcoff","FileAux64"],"kind":"struct"},"6:7616:7843":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_barrierattr_t"],"kind":"struct"},"1:3570:27310":{"crate_id":1,"path":["std","io","Write","write_fmt","Adapter"],"kind":"struct"},"1:867:8653":{"crate_id":1,"path":["std","collections","hash","map","Keys"],"kind":"struct"},"16:5645:8514":{"crate_id":16,"path":["gimli","read","cfi","CfiEntriesIter"],"kind":"struct"},"2:10002:3554":{"crate_id":2,"path":["core","fmt","Octal"],"kind":"trait"},"1:11631:8350":{"crate_id":1,"path":["std","alloc","System"],"kind":"struct"},"24:1484:26998":{"crate_id":24,"path":["syn","parse","discouraged","AnyDelimiter"],"kind":"trait"},"6:4884:7323":{"crate_id":6,"path":["libc","unix","linux_like","linux","seccomp_data"],"kind":"struct"},"24:3214:2715":{"crate_id":24,"path":["syn","token","Static"],"kind":"struct"},"11:2536:1968":{"crate_id":11,"path":["hashbrown","raw","sse2","Group"],"kind":"struct"},"24:3837:3689":{"crate_id":24,"path":["syn","token","And"],"kind":"struct"},"24:5077:3366":{"crate_id":24,"path":["syn","generics","ConstParam"],"kind":"struct"},"18:735:26971":{"crate_id":18,"path":["memchr","memmem","SearcherKind"],"kind":"enum"},"2:11079:8770":{"crate_id":2,"path":["core","slice","iter","SplitN"],"kind":"struct"},"2:44145:8761":{"crate_id":2,"path":["core","str","iter","Chars"],"kind":"struct"},"1:3399:10433":{"crate_id":1,"path":["std","io","stdio","IsTerminal"],"kind":"trait"},"2:43250:8116":{"crate_id":2,"path":["core","fmt","rt","Placeholder"],"kind":"struct"},"16:5713:8519":{"crate_id":16,"path":["gimli","read","cfi","AugmentationData"],"kind":"struct"},"16:6941:22646":{"crate_id":16,"path":["gimli","read","op","DieReference"],"kind":"enum"},"2:40831:107":{"crate_id":2,"path":["core","ffi","c_str","CStr"],"kind":"struct"},"17:16269:5666":{"crate_id":17,"path":["object","xcoff","Rel64"],"kind":"struct"},"17:12929:5587":{"crate_id":17,"path":["object","read","Import"],"kind":"struct"},"2:42598:87":{"crate_id":2,"path":["core","sync","atomic","AtomicI16"],"kind":"struct"},"2:46156:8145":{"crate_id":2,"path":["core","core_arch","simd","i8x4"],"kind":"struct"},"11:2423:3407":{"crate_id":11,"path":["hashbrown","table","IntoIter"],"kind":"struct"},"2:43031:3563":{"crate_id":2,"path":["core","fmt","num","UpperHex"],"kind":"struct"},"17:9916:22714":{"crate_id":17,"path":["object","common","SymbolScope"],"kind":"enum"},"2:42337:171":{"crate_id":2,"path":["core","option","Item"],"kind":"struct"},"16:4844:6484":{"crate_id":16,"path":["gimli","constants","DwIdx"],"kind":"struct"},"17:15931:5617":{"crate_id":17,"path":["object","xcoff","FileHeader32"],"kind":"struct"},"24:2993:3672":{"crate_id":24,"path":["syn","token","Loop"],"kind":"struct"},"2:44134:8760":{"crate_id":2,"path":["core","str","error","ParseBoolError"],"kind":"struct"},"9:356:21634":{"crate_id":9,"path":["miniz_oxide","inflate","TINFLStatus"],"kind":"enum"},"17:13146:5608":{"crate_id":17,"path":["object","archive","AixFileHeader"],"kind":"struct"},"2:47933:8235":{"crate_id":2,"path":["core","core_arch","simd","i16x32"],"kind":"struct"},"2:3051:15864":{"crate_id":2,"path":["core","ops","async_function","AsyncFnOnce"],"kind":"trait"},"2:45186:4689":{"crate_id":2,"path":["core","alloc","AllocError"],"kind":"struct"},"20:356:3427":{"crate_id":20,"path":["proc_macro2","imp","LexError"],"kind":"enum"},"2:5066:853":{"crate_id":2,"path":["core","iter"],"kind":"module"},"16:2336:6404":{"crate_id":16,"path":["gimli","common","LineEncoding"],"kind":"struct"},"11:299:8647":{"crate_id":11,"path":["hashbrown","raw","RawIterRange"],"kind":"struct"},"5:7391:8673":{"crate_id":5,"path":["alloc","collections","btree","set_val","SetValZST"],"kind":"struct"},"17:15616:6237":{"crate_id":17,"path":["object","pe","ImageArm64RuntimeFunctionEntry"],"kind":"struct"},"5:692:117":{"crate_id":5,"path":["alloc","borrow","Cow"],"kind":"enum"},"11:102:8646":{"crate_id":11,"path":["hashbrown","raw","Bucket"],"kind":"struct"},"1:2032:195":{"crate_id":1,"path":["std","ffi","os_str","OsString"],"kind":"struct"},"2:30969:4642":{"crate_id":2,"path":["core","mem","transmutability","Assume"],"kind":"struct"},"24:2772:123":{"crate_id":24,"path":["syn","token","Default"],"kind":"struct"},"17:12768:22696":{"crate_id":17,"path":["object","read","ObjectKind"],"kind":"enum"},"1:8475:8315":{"crate_id":1,"path":["std","path","Prefix"],"kind":"enum"},"17:11788:22861":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldSubCache"],"kind":"struct"},"6:6047:7590":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ntptimeval"],"kind":"struct"},"6:1703:7069":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_un"],"kind":"struct"},"6:1913:17572":{"crate_id":6,"path":["libc","unix","linux_like","linux","fpos64_t"],"kind":"enum"},"1:11854:5214":{"crate_id":1,"path":["std","backtrace_rs","symbolize","gimli","mmap","Mmap"],"kind":"struct"},"17:11773:5569":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCache"],"kind":"struct"},"23:11:3438":{"crate_id":23,"path":["quote","ext","TokenStreamExt"],"kind":"trait"},"6:6159:7630":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_data"],"kind":"union"},"24:5208:3372":{"crate_id":24,"path":["syn","lit","LitByte"],"kind":"struct"},"21:2597:3595":{"crate_id":21,"path":["proc_macro","diagnostic","Diagnostic"],"kind":"struct"},"5:1115:35859":{"crate_id":5,"path":["alloc","collections","btree","append","MergeIter"],"kind":"struct"},"16:6244:22640":{"crate_id":16,"path":["gimli","read","abbrev","Attributes"],"kind":"enum"},"24:3958:3697":{"crate_id":24,"path":["syn","token","Dollar"],"kind":"struct"},"16:6099:22639":{"crate_id":16,"path":["gimli","read","dwarf","DwarfPackage"],"kind":"struct"},"24:3282:250":{"crate_id":24,"path":["syn","token","Try"],"kind":"struct"},"17:11764:8477":{"crate_id":17,"path":["object","read","elf","attributes","AttributeReader"],"kind":"struct"},"18:96:26961":{"crate_id":18,"path":["memchr","memchr","iter","Memchr2"],"kind":"struct"},"24:5536:3394":{"crate_id":24,"path":["syn","ty","TypeParen"],"kind":"struct"},"16:4518:6474":{"crate_id":16,"path":["gimli","constants","DwAccess"],"kind":"struct"},"24:5341:3379":{"crate_id":24,"path":["syn","op","UnOp"],"kind":"enum"},"2:40701:32956":{"crate_id":2,"path":["core","char","convert","CharErrorKind"],"kind":"enum"},"2:726:10463":{"crate_id":2,"path":["core","num","nonzero","ZeroablePrimitive"],"kind":"trait"},"6:1674:7058":{"crate_id":6,"path":["libc","unix","linux_like","arpreq_old"],"kind":"struct"},"16:4761:6481":{"crate_id":16,"path":["gimli","constants","DwInl"],"kind":"struct"},"1:8963:10584":{"crate_id":1,"path":["std","sync","mpsc","TryRecvError"],"kind":"enum"},"17:13015:5554":{"crate_id":17,"path":["object","read","Relocation"],"kind":"struct"},"24:1771:10257":{"crate_id":24,"path":["syn","path","printing","span","QSelfDelimiters"],"kind":"struct"},"2:5966:3498":{"crate_id":2,"path":["core","iter","adapters","flatten","Flatten"],"kind":"struct"},"11:1887:3407":{"crate_id":11,"path":["hashbrown","set","IntoIter"],"kind":"struct"},"24:563:8400":{"crate_id":24,"path":["syn","error","ErrorMessage"],"kind":"struct"},"21:2645:3593":{"crate_id":21,"path":["proc_macro","ExpandError"],"kind":"struct"},"11:673:3408":{"crate_id":11,"path":["hashbrown","map","Iter"],"kind":"struct"},"24:5534:3393":{"crate_id":24,"path":["syn","ty","TypeNever"],"kind":"struct"},"16:7523:6452":{"crate_id":16,"path":["gimli","read","str","DebugStr"],"kind":"struct"},"1:1072:9846":{"crate_id":1,"path":["std","collections","hash","map","OccupiedError"],"kind":"struct"},"24:2087:3414":{"crate_id":24,"path":["syn","punctuated","PrivateIterMut"],"kind":"struct"},"16:5555:22633":{"crate_id":16,"path":["gimli","read","cfi","EhHdrTableIter"],"kind":"struct"},"2:22683:8703":{"crate_id":2,"path":["core","num","dec2flt","decimal","Decimal"],"kind":"struct"},"1:5834:10574":{"crate_id":1,"path":["std","sync","barrier","BarrierWaitResult"],"kind":"struct"},"18:598:5308":{"crate_id":18,"path":["memchr","memmem","twoway","Shift"],"kind":"enum"},"16:7452:22650":{"crate_id":16,"path":["gimli","read","rnglists","RawRngListEntry"],"kind":"enum"},"1:11141:159":{"crate_id":1,"path":["std","sys","pal","unix","time","Instant"],"kind":"struct"},"17:16249:6394":{"crate_id":17,"path":["object","xcoff","DwarfAux64"],"kind":"struct"},"23:148:4008":{"crate_id":23,"path":["quote","__private","HasIterator"],"kind":"struct"},"11:1910:8656":{"crate_id":11,"path":["hashbrown","set","Difference"],"kind":"struct"},"2:42216:8750":{"crate_id":2,"path":["core","net","parser","AddrParseError"],"kind":"struct"},"24:4900:3352":{"crate_id":24,"path":["syn","expr","ExprInfer"],"kind":"struct"},"17:15010:6064":{"crate_id":17,"path":["object","pe","AnonObjectHeader"],"kind":"struct"},"17:2175:22808":{"crate_id":17,"path":["object","read","elf","relocation","ElfRelaIterator"],"kind":"enum"},"1:903:4776":{"crate_id":1,"path":["std","collections","hash","map","ExtractIf"],"kind":"struct"},"6:4977:7374":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_rcvinfo"],"kind":"struct"},"1:10957:5207":{"crate_id":1,"path":["std","sys","pal","unix","process","process_inner","posix_spawn","PosixSpawnFileActions"],"kind":"struct"},"1:5827:10573":{"crate_id":1,"path":["std","sync","barrier","Barrier"],"kind":"struct"},"2:44903:8811":{"crate_id":2,"path":["core","str","IsWhitespace"],"kind":"struct"},"1:12090:847":{"crate_id":1,"path":["std","isize"],"kind":"primitive"},"16:149:5091":{"crate_id":16,"path":["gimli","read","util","ArrayVec"],"kind":"struct"},"1:1968:10366":{"crate_id":1,"path":["std","error","Indented"],"kind":"struct"},"24:4831:3341":{"crate_id":24,"path":["syn","expr","ExprAssign"],"kind":"struct"},"6:6889:7792":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","mcontext_t"],"kind":"struct"},"1:2276:10386":{"crate_id":1,"path":["std","fs","read_to_string"],"kind":"function"},"5:1316:9846":{"crate_id":5,"path":["alloc","collections","btree","map","entry","OccupiedError"],"kind":"struct"},"6:6079:7603":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","Elf32_Chdr"],"kind":"struct"},"21:433:5089":{"crate_id":21,"path":["proc_macro","bridge","scoped_cell","replace","PutBackOnDrop"],"kind":"struct"},"5:6549:5103":{"crate_id":5,"path":["alloc","vec","drain","drop","DropGuard"],"kind":"struct"},"3:234:223":{"crate_id":3,"path":["compiler_builtins","float","cmp","Result"],"kind":"enum"},"2:46400:8155":{"crate_id":2,"path":["core","core_arch","simd","f32x2"],"kind":"struct"},"0:0:1843":{"crate_id":0,"path":["serde_derive"],"kind":"module"},"1:3234:32356":{"crate_id":1,"path":["std","io","stdio","StdinRaw"],"kind":"struct"},"17:14587:5898":{"crate_id":17,"path":["object","macho","RelocationInfo"],"kind":"struct"},"2:7679:3473":{"crate_id":2,"path":["core","iter","sources","once","once"],"kind":"function"},"16:6422:5093":{"crate_id":16,"path":["gimli","read","lazy","imp","LazyArc"],"kind":"struct"},"1:5512:10557":{"crate_id":1,"path":["std","process","ChildStderr"],"kind":"struct"},"2:3433:3582":{"crate_id":2,"path":["core","ops","unsize","CoerceUnsized"],"kind":"trait"},"1:10700:8844":{"crate_id":1,"path":["std","sys","pal","unix","fs","FilePermissions"],"kind":"struct"},"17:10457:136":{"crate_id":17,"path":["object","read","any","File"],"kind":"enum"},"17:16259:5661":{"crate_id":17,"path":["object","xcoff","Rel32"],"kind":"struct"},"2:9467:85":{"crate_id":2,"path":["core","sync","atomic","AtomicBool"],"kind":"struct"},"1:3017:135":{"crate_id":1,"path":["std","io","error","Error"],"kind":"struct"},"17:11510:22772":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdat"],"kind":"struct"},"2:21976:10619":{"crate_id":2,"path":["core","core_simd","to_bytes","ToBytes"],"kind":"trait"},"1:12071:1152":{"crate_id":1,"path":["std","pointer"],"kind":"primitive"},"11:2548:6784":{"crate_id":11,"path":["hashbrown","raw","bitmask","BitMaskIter"],"kind":"struct"},"6:6682:7694":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","flock"],"kind":"struct"},"21:244:36124":{"crate_id":21,"path":["proc_macro","bridge","handle","OwnedStore"],"kind":"struct"},"2:46240:8148":{"crate_id":2,"path":["core","core_arch","simd","u16x4"],"kind":"struct"},"2:40690:8720":{"crate_id":2,"path":["core","char","convert","ParseCharError"],"kind":"struct"},"1:10946:5206":{"crate_id":1,"path":["std","sys","pal","unix","process","process_inner","do_exec","Reset"],"kind":"struct"},"24:5397:2363":{"crate_id":24,"path":["syn","path","AssocConst"],"kind":"struct"},"11:2151:10330":{"crate_id":11,"path":["hashbrown","set","VacantEntry"],"kind":"struct"},"6:5897:7507":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","glob64_t"],"kind":"struct"},"13:0:3165":{"crate_id":13,"path":["std_detect"],"kind":"module"},"24:3316:3682":{"crate_id":24,"path":["syn","token","Typeof"],"kind":"struct"},"1:11069:8325":{"crate_id":1,"path":["std","sys","pal","unix","process","process_inner","ExitStatusError"],"kind":"struct"},"1:8288:8690":{"crate_id":1,"path":["std","io","Split"],"kind":"struct"},"5:1271:8624":{"crate_id":5,"path":["alloc","collections","btree","map","entry","Entry"],"kind":"enum"},"17:15301:6135":{"crate_id":17,"path":["object","pe","ImageTlsDirectory32"],"kind":"struct"},"2:44343:8774":{"crate_id":2,"path":["core","str","iter","RMatchIndices"],"kind":"struct"},"17:11128:5458":{"crate_id":17,"path":["object","read","coff","section","CoffSection"],"kind":"struct"},"15:306:21728":{"crate_id":15,"path":["addr2line","LocationRangeUnitIter"],"kind":"struct"},"18:515:5348":{"crate_id":18,"path":["memchr","memmem","prefilter","PrefilterFn"],"kind":"struct"},"16:4907:6486":{"crate_id":16,"path":["gimli","constants","DwLns"],"kind":"struct"},"2:7332:3503":{"crate_id":2,"path":["core","iter","adapters","zip","TrustedRandomAccess"],"kind":"trait"},"1:11354:10563":{"crate_id":1,"path":["std","sys_common","process","CommandEnvs"],"kind":"struct"},"6:5941:7529":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","mallinfo"],"kind":"struct"},"17:11016:22738":{"crate_id":17,"path":["object","read","archive","ArchiveMemberIterator"],"kind":"struct"},"2:2355:4714":{"crate_id":2,"path":["core","ptr","from_exposed_addr_mut"],"kind":"function"},"1:2671:5165":{"crate_id":1,"path":["std","io","buffered","bufwriter","flush_buf","BufGuard"],"kind":"struct"},"2:6590:8686":{"crate_id":2,"path":["core","iter","adapters","map_windows","MapWindowsInner"],"kind":"struct"},"6:5910:7508":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","msghdr"],"kind":"struct"},"2:7867:3492":{"crate_id":2,"path":["core","iter","traits","accum","Product"],"kind":"trait"},"1:12072:328":{"crate_id":1,"path":["std","array"],"kind":"primitive"},"16:7152:6581":{"crate_id":16,"path":["gimli","read","op","Piece"],"kind":"struct"},"2:44919:8815":{"crate_id":2,"path":["core","str","UnsafeBytesToStr"],"kind":"struct"},"1:12082:794":{"crate_id":1,"path":["std","i32"],"kind":"primitive"},"17:14475:5883":{"crate_id":17,"path":["object","macho","FvmfileCommand"],"kind":"struct"},"1:10658:10538":{"crate_id":1,"path":["std","sys","pal","unix","fd","FileDesc"],"kind":"struct"},"16:4545:6475":{"crate_id":16,"path":["gimli","constants","DwVis"],"kind":"struct"},"24:5532:3392":{"crate_id":24,"path":["syn","ty","TypeMacro"],"kind":"struct"},"6:6012:7569":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","timex"],"kind":"struct"},"1:3749:10456":{"crate_id":1,"path":["std","net","socket_addr","ToSocketAddrs"],"kind":"trait"},"24:1102:2057":{"crate_id":24,"path":["syn","lifetime","Lifetime"],"kind":"struct"},"16:6745:6444":{"crate_id":16,"path":["gimli","read","loclists","DebugLoc"],"kind":"struct"},"2:43528:8755":{"crate_id":2,"path":["core","hash","sip","SipHasher"],"kind":"struct"},"2:11639:15760":{"crate_id":2,"path":["core","slice","iter","ChunkByMut"],"kind":"struct"},"5:7375:3407":{"crate_id":5,"path":["alloc","collections","btree","set","IntoIter"],"kind":"struct"},"24:5530:3391":{"crate_id":24,"path":["syn","ty","TypeInfer"],"kind":"struct"},"2:43331:135":{"crate_id":2,"path":["core","fmt","Error"],"kind":"struct"},"5:7669:4777":{"crate_id":5,"path":["alloc","vec","splice","Splice"],"kind":"struct"},"16:6230:8570":{"crate_id":16,"path":["gimli","read","abbrev","Abbreviation"],"kind":"struct"},"23:35:10406":{"crate_id":23,"path":["quote","ext","private","Sealed"],"kind":"trait"},"24:153:1974":{"crate_id":24,"path":["syn","Token"],"kind":"macro"},"2:21312:33250":{"crate_id":2,"path":["core","core_simd","swizzle","rotate_elements_left","Rotate"],"kind":"struct"},"5:1425:3408":{"crate_id":5,"path":["alloc","collections","btree","map","Iter"],"kind":"struct"},"2:1710:5127":{"crate_id":2,"path":["core","mem","maybe_uninit","write_slice_cloned","Guard"],"kind":"struct"},"5:4197:5127":{"crate_id":5,"path":["alloc","collections","vec_deque","into_iter","try_fold","Guard"],"kind":"struct"},"6:5044:7412":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_setup"],"kind":"struct"},"1:1607:2017":{"crate_id":1,"path":["std","collections","hash","set","Union"],"kind":"struct"},"24:4566:3313":{"crate_id":24,"path":["syn","attr","MetaNameValue"],"kind":"struct"},"24:3975:3698":{"crate_id":24,"path":["syn","token","Dot"],"kind":"struct"},"1:11241:2351":{"crate_id":1,"path":["std","sys","os_str","bytes","Slice"],"kind":"struct"},"17:12707:22726":{"crate_id":17,"path":["object","read","traits","NoDynamicRelocationIterator"],"kind":"struct"},"17:15655:6246":{"crate_id":17,"path":["object","pe","ImageEnclaveConfig32"],"kind":"struct"},"16:536:8497":{"crate_id":16,"path":["gimli","read","cfi","RegisterRuleMap"],"kind":"struct"},"6:4776:7272":{"crate_id":6,"path":["libc","unix","linux_like","linux","genlmsghdr"],"kind":"struct"},"17:15569:6219":{"crate_id":17,"path":["object","pe","ImageHotPatchInfo"],"kind":"struct"},"1:1585:4776":{"crate_id":1,"path":["std","collections","hash","set","ExtractIf"],"kind":"struct"},"6:4814:7289":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_vm"],"kind":"struct"},"17:15197:6110":{"crate_id":17,"path":["object","pe","ImageRelocation"],"kind":"struct"},"24:1442:2052":{"crate_id":24,"path":["syn","meta","ParseNestedMeta"],"kind":"struct"},"2:41516:3478":{"crate_id":2,"path":["core","iter","sources","repeat","Repeat"],"kind":"struct"},"2:22125:10615":{"crate_id":2,"path":["core","core_simd","vector","SimdElement"],"kind":"trait"},"6:5891:7506":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__timeval"],"kind":"struct"},"17:12863:5585":{"crate_id":17,"path":["object","read","SymbolMapName"],"kind":"struct"},"6:5974:7541":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_mmap_req"],"kind":"struct"},"17:10419:5476":{"crate_id":17,"path":["object","read","util","ByteString"],"kind":"struct"},"13:110:35997":{"crate_id":13,"path":["std_detect","detect","arch","x86","Feature"],"kind":"enum"},"24:2670:3660":{"crate_id":24,"path":["syn","token","Become"],"kind":"struct"},"2:22615:8702":{"crate_id":2,"path":["core","num","bignum","tests","Big8x3"],"kind":"struct"},"21:648:3597":{"crate_id":21,"path":["proc_macro","diagnostic","MultiSpan"],"kind":"trait"},"2:13406:149":{"crate_id":2,"path":["core","alloc","global","GlobalAlloc"],"kind":"trait"},"17:10671:36062":{"crate_id":17,"path":["object","read","any","ComdatIteratorInternal"],"kind":"enum"},"6:1682:7059":{"crate_id":6,"path":["libc","unix","linux_like","arphdr"],"kind":"struct"},"1:12088:1641":{"crate_id":1,"path":["std","u64"],"kind":"primitive"},"2:46657:8168":{"crate_id":2,"path":["core","core_arch","simd","i16x8"],"kind":"struct"},"24:1527:3535":{"crate_id":24,"path":["syn","parse","ParseBuffer"],"kind":"struct"},"5:3622:3412":{"crate_id":5,"path":["alloc","collections","linked_list","IterMut"],"kind":"struct"},"24:345:36413":{"crate_id":24,"path":["syn","buffer","empty","UnsafeSyncEntry"],"kind":"struct"},"17:15799:6285":{"crate_id":17,"path":["object","pe","NonPagedDebugInfo"],"kind":"struct"},"1:4119:10482":{"crate_id":1,"path":["std","os","unix","fs","DirEntryExt"],"kind":"trait"},"20:0:1820":{"crate_id":20,"path":["proc_macro2"],"kind":"module"},"16:2529:6418":{"crate_id":16,"path":["gimli","common","LocationListsOffset"],"kind":"struct"},"5:4267:3408":{"crate_id":5,"path":["alloc","collections","vec_deque","iter","Iter"],"kind":"struct"},"6:4364:7096":{"crate_id":6,"path":["libc","unix","linux_like","linux","passwd"],"kind":"struct"},"2:12090:9852":{"crate_id":2,"path":["core","slice","GetManyMutError"],"kind":"struct"},"16:3993:6467":{"crate_id":16,"path":["gimli","constants","DwTag"],"kind":"struct"},"1:2266:136":{"crate_id":1,"path":["std","fs","File"],"kind":"struct"},"2:42559:97":{"crate_id":2,"path":["core","sync","atomic","AtomicU8"],"kind":"struct"},"24:4562:3312":{"crate_id":24,"path":["syn","attr","MetaList"],"kind":"struct"},"6:1639:7033":{"crate_id":6,"path":["libc","unix","linux_like","ifaddrs"],"kind":"struct"},"1:4902:10490":{"crate_id":1,"path":["std","os","fd","owned","AsFd"],"kind":"trait"},"16:6408:6510":{"crate_id":16,"path":["gimli","read","index","UnitIndexSection"],"kind":"struct"},"1:4464:10501":{"crate_id":1,"path":["std","os","unix","net","stream","UnixStream"],"kind":"struct"},"2:44976:15951":{"crate_id":2,"path":["core","time","TryFromFloatSecsErrorKind"],"kind":"enum"},"24:3061:3674":{"crate_id":24,"path":["syn","token","Move"],"kind":"struct"},"16:3600:5376":{"crate_id":16,"path":["gimli","arch","X86_64"],"kind":"struct"},"24:5126:3041":{"crate_id":24,"path":["syn","generics","WhereClause"],"kind":"struct"},"17:12278:22898":{"crate_id":17,"path":["object","read","pe","section","PeRelocationIterator"],"kind":"struct"},"6:4854:7311":{"crate_id":6,"path":["libc","unix","linux_like","linux","can_filter"],"kind":"struct"},"6:4455:7157":{"crate_id":6,"path":["libc","unix","linux_like","linux","if_nameindex"],"kind":"struct"},"21:216:10036":{"crate_id":21,"path":["proc_macro","bridge","fxhash","FxHasher"],"kind":"struct"},"17:13375:5660":{"crate_id":17,"path":["object","elf","Syminfo64"],"kind":"struct"},"2:40818:8097":{"crate_id":2,"path":["core","char","TryFromCharError"],"kind":"struct"},"24:4904:3353":{"crate_id":24,"path":["syn","expr","ExprLet"],"kind":"struct"},"24:1817:1973":{"crate_id":24,"path":["syn","punctuated","Punctuated"],"kind":"struct"},"24:1908:3404":{"crate_id":24,"path":["syn","punctuated","Pairs"],"kind":"struct"},"1:11080:27976":{"crate_id":1,"path":["std","sys","pal","unix","thread","cgroups","Cgroup"],"kind":"enum"},"24:4507:3873":{"crate_id":24,"path":["syn","token","Bracket"],"kind":"struct"},"2:1834:1189":{"crate_id":2,"path":["core","ptr"],"kind":"module"},"1:10258:27493":{"crate_id":1,"path":["std","sys","pal","unix","process","process_common","Argv"],"kind":"struct"},"17:1098:22748":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbolIterator"],"kind":"struct"},"11:1160:9846":{"crate_id":11,"path":["hashbrown","map","OccupiedError"],"kind":"struct"},"1:11106:8336":{"crate_id":1,"path":["std","sys","pal","unix","time","SystemTime"],"kind":"struct"},"24:920:36409":{"crate_id":24,"path":["syn","generics","TypeParams"],"kind":"struct"},"5:3833:4776":{"crate_id":5,"path":["alloc","collections","linked_list","ExtractIf"],"kind":"struct"},"2:4335:3586":{"crate_id":2,"path":["core","cell","once","OnceCell"],"kind":"struct"},"2:43767:8758":{"crate_id":2,"path":["core","slice","ascii","EscapeByte"],"kind":"struct"},"16:7355:8629":{"crate_id":16,"path":["gimli","read","pubtypes","PubTypesEntry"],"kind":"struct"},"24:509:3418":{"crate_id":24,"path":["syn","drops","NoDrop"],"kind":"struct"},"24:4852:3345":{"crate_id":24,"path":["syn","expr","ExprBreak"],"kind":"struct"},"2:2459:111":{"crate_id":2,"path":["core","clone","Clone"],"kind":"trait"},"1:5163:28055":{"crate_id":1,"path":["std","path","fmt","DebugHelper"],"kind":"struct"},"5:4459:5129":{"crate_id":5,"path":["alloc","collections","vec_deque","truncate","Dropper"],"kind":"struct"},"6:569:6924":{"crate_id":6,"path":["libc","unix","sigval"],"kind":"struct"},"18:507:5345":{"crate_id":18,"path":["memchr","memmem","genericsimd","Forward"],"kind":"struct"},"24:4081:3705":{"crate_id":24,"path":["syn","token","Gt"],"kind":"struct"},"16:7684:8632":{"crate_id":16,"path":["gimli","read","unit","DebuggingInformationEntry"],"kind":"struct"},"24:2011:3408":{"crate_id":24,"path":["syn","punctuated","Iter"],"kind":"struct"},"24:2857:3665":{"crate_id":24,"path":["syn","token","Extern"],"kind":"struct"},"6:507:6884":{"crate_id":6,"path":["libc","unix","rusage"],"kind":"struct"},"23:46:3439":{"crate_id":23,"path":["quote","ident_fragment","IdentFragment"],"kind":"trait"},"1:3442:3478":{"crate_id":1,"path":["std","io","util","Repeat"],"kind":"struct"},"6:7343:7824":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","not_x32","statvfs"],"kind":"struct"},"2:22433:10406":{"crate_id":2,"path":["core","core_simd","simd","ptr","sealed","Sealed"],"kind":"trait"},"24:559:223":{"crate_id":24,"path":["syn","error","Result"],"kind":"type_alias"},"21:404:36119":{"crate_id":21,"path":["proc_macro","bridge","scoped_cell","RefMutL"],"kind":"struct"},"6:7645:7850":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_rwlock_t"],"kind":"struct"},"2:3558:71":{"crate_id":2,"path":["core","any","Any"],"kind":"trait"},"2:41287:3520":{"crate_id":2,"path":["core","iter","adapters","take_while","TakeWhile"],"kind":"struct"},"24:3912:3694":{"crate_id":24,"path":["syn","token","CaretEq"],"kind":"struct"},"2:42471:3408":{"crate_id":2,"path":["core","result","Iter"],"kind":"struct"},"6:123:16224":{"crate_id":6,"path":["libc","unix","fpos_t"],"kind":"enum"},"5:2994:3675":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Mut"],"kind":"struct"},"2:42479:3412":{"crate_id":2,"path":["core","result","IterMut"],"kind":"struct"},"2:22755:7882":{"crate_id":2,"path":["core","num","flt2dec","decoder","Decoded"],"kind":"struct"},"17:12621:5565":{"crate_id":17,"path":["object","read","xcoff","symbol","XcoffSymbol"],"kind":"struct"},"24:2925:3668":{"crate_id":24,"path":["syn","token","If"],"kind":"struct"},"24:4861:3330":{"crate_id":24,"path":["syn","expr","ExprCast"],"kind":"struct"},"16:6849:22645":{"crate_id":16,"path":["gimli","read","loclists","LocListIter"],"kind":"struct"},"11:1582:21701":{"crate_id":11,"path":["hashbrown","rustc_entry","RustcOccupiedEntry"],"kind":"struct"},"1:7728:10406":{"crate_id":1,"path":["std","sealed","Sealed"],"kind":"trait"},"2:3418:33093":{"crate_id":2,"path":["core","ops","try_trait","NeverShortCircuitResidual"],"kind":"enum"},"1:7068:9863":{"crate_id":1,"path":["std","sys_common","backtrace","_print","DisplayBacktrace"],"kind":"struct"},"2:41041:3511":{"crate_id":2,"path":["core","iter","adapters","fuse","Fuse"],"kind":"struct"},"24:337:3546":{"crate_id":24,"path":["syn","buffer","Cursor"],"kind":"struct"},"1:8360:10508":{"crate_id":1,"path":["std","os","unix","net","ancillary","AncillaryError"],"kind":"enum"},"24:2138:2604":{"crate_id":24,"path":["syn","punctuated","Pair"],"kind":"enum"},"24:4538:3310":{"crate_id":24,"path":["syn","attr","AttrStyle"],"kind":"enum"},"6:6059:7595":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","regex_t"],"kind":"struct"},"6:4745:7253":{"crate_id":6,"path":["libc","unix","linux_like","linux","mntent"],"kind":"struct"},"16:6803:22643":{"crate_id":16,"path":["gimli","read","loclists","RawLocListIter"],"kind":"struct"},"11:1142:21699":{"crate_id":11,"path":["hashbrown","map","VacantEntryRef"],"kind":"struct"},"9:501:6850":{"crate_id":9,"path":["miniz_oxide","StreamResult"],"kind":"struct"},"5:5170:5133":{"crate_id":5,"path":["alloc","rc","Weak"],"kind":"struct"},"2:48440:8248":{"crate_id":2,"path":["core","core_arch","x86","__m256d"],"kind":"struct"},"6:527:6901":{"crate_id":6,"path":["libc","unix","ipv6_mreq"],"kind":"struct"},"2:48367:8242":{"crate_id":2,"path":["core","core_arch","simd","f64x8"],"kind":"struct"},"17:13437:5668":{"crate_id":17,"path":["object","elf","ProgramHeader32"],"kind":"struct"},"17:12238:22873":{"crate_id":17,"path":["object","read","pe","section","PeSegment"],"kind":"struct"},"21:1402:2061":{"crate_id":21,"path":["proc_macro","bridge","symbol","Symbol"],"kind":"struct"},"5:7331:4778":{"crate_id":5,"path":["alloc","collections","binary_heap","Drain"],"kind":"struct"},"5:1131:34449":{"crate_id":5,"path":["alloc","collections","btree","borrow","DormantMutRef"],"kind":"struct"},"17:10068:22698":{"crate_id":17,"path":["object","common","SectionFlags"],"kind":"enum"},"24:2840:1993":{"crate_id":24,"path":["syn","token","Enum"],"kind":"struct"},"2:10004:2584":{"crate_id":2,"path":["core","fmt","Binary"],"kind":"trait"},"17:15635:6243":{"crate_id":17,"path":["object","pe","ImageAlphaRuntimeFunctionEntry"],"kind":"struct"},"2:42676:88":{"crate_id":2,"path":["core","sync","atomic","AtomicI32"],"kind":"struct"},"1:4392:10507":{"crate_id":1,"path":["std","os","unix","net","listener","UnixListener"],"kind":"struct"},"2:7942:128":{"crate_id":2,"path":["core","iter","traits","double_ended","DoubleEndedIterator"],"kind":"trait"},"2:31157:32968":{"crate_id":2,"path":["core","ptr","alignment","AlignmentEnum64"],"kind":"enum"},"5:3240:8655":{"crate_id":5,"path":["alloc","collections","btree","set","Intersection"],"kind":"struct"},"17:14463:5882":{"crate_id":17,"path":["object","macho","IdentCommand"],"kind":"struct"},"24:2942:3669":{"crate_id":24,"path":["syn","token","Impl"],"kind":"struct"},"1:1885:4852":{"crate_id":1,"path":["std","env","Args"],"kind":"struct"},"11:434:35992":{"crate_id":11,"path":["hashbrown","raw","RawIterHashInner"],"kind":"struct"},"5:2718:7868":{"crate_id":5,"path":["alloc","collections","btree","node","Handle"],"kind":"struct"},"24:4371:3725":{"crate_id":24,"path":["syn","token","Shl"],"kind":"struct"},"17:11115:22745":{"crate_id":17,"path":["object","read","coff","section","CoffSectionIterator"],"kind":"struct"},"5:212:4694":{"crate_id":5,"path":["alloc","boxed","thin","ThinBox"],"kind":"struct"},"2:9995:118":{"crate_id":2,"path":["core","fmt","Debug"],"kind":"trait"},"2:10254:10411":{"crate_id":2,"path":["core","hash","BuildHasher"],"kind":"trait"},"24:5120:2642":{"crate_id":24,"path":["syn","generics","TraitBoundModifier"],"kind":"enum"},"17:12808:5583":{"crate_id":17,"path":["object","read","SymbolIndex"],"kind":"struct"},"2:2797:123":{"crate_id":2,"path":["core","default","Default"],"kind":"trait"},"18:481:8440":{"crate_id":18,"path":["memchr","cow","CowBytes"],"kind":"struct"},"24:4057:3703":{"crate_id":24,"path":["syn","token","FatArrow"],"kind":"struct"},"1:7919:4966":{"crate_id":1,"path":["std","fs","Metadata"],"kind":"struct"},"17:16093:6359":{"crate_id":17,"path":["object","xcoff","Symbol64"],"kind":"struct"},"24:4279:3719":{"crate_id":24,"path":["syn","token","Plus"],"kind":"struct"},"24:5510:3387":{"crate_id":24,"path":["syn","ty","TypeArray"],"kind":"struct"},"24:4955:3337":{"crate_id":24,"path":["syn","expr","ExprStruct"],"kind":"struct"},"2:42637:94":{"crate_id":2,"path":["core","sync","atomic","AtomicU16"],"kind":"struct"},"2:2548:199":{"crate_id":2,"path":["core","cmp","PartialOrd"],"kind":"trait"},"17:14325:5854":{"crate_id":17,"path":["object","macho","FilesetEntryCommand"],"kind":"struct"},"16:6882:8617":{"crate_id":16,"path":["gimli","read","lookup","DebugLookup"],"kind":"struct"},"24:1542:3536":{"crate_id":24,"path":["syn","parse","StepCursor"],"kind":"struct"},"2:32761:3574":{"crate_id":2,"path":["core","error","tags","Ref"],"kind":"struct"},"17:12647:22905":{"crate_id":17,"path":["object","read","xcoff","comdat","XcoffComdatIterator"],"kind":"struct"},"2:46418:8156":{"crate_id":2,"path":["core","core_arch","simd","f64x1"],"kind":"struct"},"1:12087:1640":{"crate_id":1,"path":["std","u32"],"kind":"primitive"},"2:44907:8812":{"crate_id":2,"path":["core","str","IsAsciiWhitespace"],"kind":"struct"},"5:7411:3407":{"crate_id":5,"path":["alloc","collections","linked_list","IntoIter"],"kind":"struct"},"2:2726:254":{"crate_id":2,"path":["core","convert","TryInto"],"kind":"trait"},"1:4232:10502":{"crate_id":1,"path":["std","os","unix","net","ancillary","ScmRights"],"kind":"struct"},"1:6677:10580":{"crate_id":1,"path":["std","sync","remutex","ReentrantMutex"],"kind":"struct"},"1:8861:10560":{"crate_id":1,"path":["std","process","CommandArgs"],"kind":"struct"},"24:2653:3659":{"crate_id":24,"path":["syn","token","Await"],"kind":"struct"},"6:6868:7778":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user"],"kind":"struct"},"17:10251:5471":{"crate_id":17,"path":["object","endian","U64Bytes"],"kind":"struct"},"2:48414:8246":{"crate_id":2,"path":["core","core_arch","x86","__m256i"],"kind":"struct"},"2:2678:15823":{"crate_id":2,"path":["core","convert","num","FloatToInt"],"kind":"trait"},"11:837:10324":{"crate_id":11,"path":["hashbrown","map","RawEntryBuilderMut"],"kind":"struct"},"5:1456:3407":{"crate_id":5,"path":["alloc","collections","btree","map","IntoIter"],"kind":"struct"},"1:6892:10611":{"crate_id":1,"path":["std","std_float","StdFloat"],"kind":"trait"},"1:11420:8850":{"crate_id":1,"path":["std","sys_common","wtf8","Wtf8CodePoints"],"kind":"struct"},"1:10740:8301":{"crate_id":1,"path":["std","sys","pal","unix","io","IoSlice"],"kind":"struct"},"16:6077:10038":{"crate_id":16,"path":["gimli","read","dwarf","Dwarf"],"kind":"struct"},"17:13399:5664":{"crate_id":17,"path":["object","elf","Rela32"],"kind":"struct"},"16:6759:6445":{"crate_id":16,"path":["gimli","read","loclists","DebugLocLists"],"kind":"struct"},"2:42423:4571":{"crate_id":2,"path":["core","pin","Pin"],"kind":"struct"},"17:14212:5841":{"crate_id":17,"path":["object","macho","DylibModule64"],"kind":"struct"},"5:6012:5133":{"crate_id":5,"path":["alloc","sync","Weak"],"kind":"struct"},"12:0:3171":{"crate_id":12,"path":["rustc_std_workspace_alloc"],"kind":"module"},"2:4987:33582":{"crate_id":2,"path":["core","ffi","sealed_trait","VaArgSafe"],"kind":"trait"},"1:8934:8327":{"crate_id":1,"path":["std","sync","mpsc","SendError"],"kind":"struct"},"5:6994:259":{"crate_id":5,"path":["alloc","vec","Vec"],"kind":"struct"},"2:2968:243":{"crate_id":2,"path":["core","marker","Sync"],"kind":"trait"},"17:14038:5795":{"crate_id":17,"path":["object","macho","SubLibraryCommand"],"kind":"struct"},"17:14177:5830":{"crate_id":17,"path":["object","macho","DylibTableOfContents"],"kind":"struct"},"24:4895:3332":{"crate_id":24,"path":["syn","expr","ExprIndex"],"kind":"struct"},"24:253:9837":{"crate_id":24,"path":["syn","attr","parsing","DisplayAttrStyle"],"kind":"struct"},"1:7946:8825":{"crate_id":1,"path":["std","fs","Permissions"],"kind":"struct"},"6:4998:7389":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_prinfo"],"kind":"struct"},"1:6052:5190":{"crate_id":1,"path":["std","sync","mpmc","counter","Sender"],"kind":"struct"},"1:4210:31703":{"crate_id":1,"path":["std","os","unix","net","ancillary","AncillaryDataIter"],"kind":"struct"},"17:12353:8486":{"crate_id":17,"path":["object","read","pe","import","ImportDescriptorIterator"],"kind":"struct"},"21:1066:2047":{"crate_id":21,"path":["proc_macro","bridge","client","Span"],"kind":"struct"},"17:10399:2956":{"crate_id":17,"path":["object","read","util","Bytes"],"kind":"struct"},"17:11324:22790":{"crate_id":17,"path":["object","read","elf","file","ElfFile"],"kind":"struct"},"1:7958:137":{"crate_id":1,"path":["std","fs","FileType"],"kind":"struct"},"6:5123:7450":{"crate_id":6,"path":["libc","unix","linux_like","linux","hwtstamp_config"],"kind":"struct"},"2:40971:3496":{"crate_id":2,"path":["core","iter","adapters","cloned","Cloned"],"kind":"struct"},"2:41487:8742":{"crate_id":2,"path":["core","iter","sources","from_coroutine","FromCoroutine"],"kind":"struct"},"1:1574:3408":{"crate_id":1,"path":["std","collections","hash","set","Iter"],"kind":"struct"},"1:3811:10460":{"crate_id":1,"path":["std","net","tcp","TcpStream"],"kind":"struct"},"16:2304:21772":{"crate_id":16,"path":["gimli","common","Vendor"],"kind":"enum"},"9:329:6827":{"crate_id":9,"path":["miniz_oxide","inflate","core","LocalVars"],"kind":"struct"},"1:11657:8853":{"crate_id":1,"path":["std","backtrace_rs","backtrace","libunwind","Frame"],"kind":"enum"},"24:4628:2241":{"crate_id":24,"path":["syn","derive","DataUnion"],"kind":"struct"},"2:12563:15773":{"crate_id":2,"path":["core","str","pattern","Pattern"],"kind":"trait"},"17:9781:22711":{"crate_id":17,"path":["object","common","BinaryFormat"],"kind":"enum"},"1:2693:9859":{"crate_id":1,"path":["std","io","buffered","bufwriter","WriterPanicked"],"kind":"struct"},"16:5580:6439":{"crate_id":16,"path":["gimli","read","cfi","EhFrame"],"kind":"struct"},"17:14386:5863":{"crate_id":17,"path":["object","macho","BuildVersionCommand"],"kind":"struct"},"16:4787:6482":{"crate_id":16,"path":["gimli","constants","DwOrd"],"kind":"struct"},"24:1657:1823":{"crate_id":24,"path":["syn","parse_macro_input"],"kind":"macro"},"1:10066:10348":{"crate_id":1,"path":["std","sys","pal","unix","os","SplitPaths"],"kind":"struct"},"11:2403:3412":{"crate_id":11,"path":["hashbrown","table","IterMut"],"kind":"struct"},"1:8611:3408":{"crate_id":1,"path":["std","path","Iter"],"kind":"struct"},"2:12558:3812":{"crate_id":2,"path":["core","str","pattern"],"kind":"module"},"5:7311:3407":{"crate_id":5,"path":["alloc","collections","binary_heap","IntoIter"],"kind":"struct"},"21:2027:4800":{"crate_id":21,"path":["proc_macro","bridge","LitKind"],"kind":"enum"},"24:1637:3532":{"crate_id":24,"path":["syn","parse","Parser"],"kind":"trait"},"1:8222:8300":{"crate_id":1,"path":["std","io","util","Sink"],"kind":"struct"},"1:12091:1697":{"crate_id":1,"path":["std","usize"],"kind":"primitive"},"2:4574:3575":{"crate_id":2,"path":["core","cell","BorrowRefMut"],"kind":"struct"},"2:45175:8819":{"crate_id":2,"path":["core","alloc","layout","LayoutError"],"kind":"struct"},"24:3941:3696":{"crate_id":24,"path":["syn","token","Comma"],"kind":"struct"},"2:2343:632":{"crate_id":2,"path":["core","ptr","drop_in_place"],"kind":"function"},"6:4566:7212":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_periodic_effect"],"kind":"struct"},"17:11443:5499":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbolTable"],"kind":"struct"},"17:11853:22864":{"crate_id":17,"path":["object","read","macho","file","MachOComdat"],"kind":"struct"},"5:903:3408":{"crate_id":5,"path":["alloc","collections","binary_heap","Iter"],"kind":"struct"},"17:12189:22895":{"crate_id":17,"path":["object","read","pe","file","PeComdatIterator"],"kind":"struct"},"20:686:3546":{"crate_id":20,"path":["proc_macro2","parse","Cursor"],"kind":"struct"},"17:10915:36065":{"crate_id":17,"path":["object","read","any","SectionRelocationIteratorInternal"],"kind":"enum"},"6:6114:7617":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_exit"],"kind":"struct"},"16:2883:21773":{"crate_id":16,"path":["gimli","common","UnitSectionOffset"],"kind":"enum"},"5:1440:3412":{"crate_id":5,"path":["alloc","collections","btree","map","IterMut"],"kind":"struct"},"24:0:1821":{"crate_id":24,"path":["syn"],"kind":"module"},"6:4830:7298":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_extended_err"],"kind":"struct"},"6:6120:7620":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_seccomp"],"kind":"struct"},"5:2167:8660":{"crate_id":5,"path":["alloc","collections","btree","merge_iter","MergeIterInner"],"kind":"struct"},"5:5669:4782":{"crate_id":5,"path":["alloc","string","retain","SetLenOnDrop"],"kind":"struct"},"6:1507:6947":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreqn"],"kind":"struct"},"6:4610:7232":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_abs_setup"],"kind":"struct"},"6:4710:7249":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Shdr"],"kind":"struct"},"17:14545:5891":{"crate_id":17,"path":["object","macho","Nlist32"],"kind":"struct"},"1:557:4561":{"crate_id":1,"path":["std","thread","JoinHandle"],"kind":"struct"},"16:3773:6464":{"crate_id":16,"path":["gimli","constants","DwUt"],"kind":"struct"},"6:6741:7728":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stat64"],"kind":"struct"},"5:7548:8680":{"crate_id":5,"path":["alloc","ffi","c_str","IntoStringError"],"kind":"struct"},"24:128:1968":{"crate_id":24,"path":["syn","token","Group"],"kind":"struct"},"2:3082:3712":{"crate_id":2,"path":["core","ops","bit","Not"],"kind":"trait"},"15:0:3173":{"crate_id":15,"path":["addr2line"],"kind":"module"},"24:2568:3734":{"crate_id":24,"path":["syn","token","Underscore"],"kind":"struct"},"24:4156:3710":{"crate_id":24,"path":["syn","token","MinusEq"],"kind":"struct"},"6:7371:7827":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","align","clone_args"],"kind":"struct"},"6:6764:7729":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statfs64"],"kind":"struct"},"1:3504:8303":{"crate_id":1,"path":["std","io","Read"],"kind":"trait"},"24:5561:67":{"crate_id":24,"path":["syn","ty","Abi"],"kind":"struct"},"2:3172:3583":{"crate_id":2,"path":["core","ops","deref","DerefMut"],"kind":"trait"},"24:4918:3355":{"crate_id":24,"path":["syn","expr","ExprMatch"],"kind":"struct"},"6:4549:7202":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_ramp_effect"],"kind":"struct"},"17:11293:22768":{"crate_id":17,"path":["object","read","coff","import","ImportType"],"kind":"enum"},"2:22482:10694":{"crate_id":2,"path":["core","core_simd","simd","cmp","ord","SimdOrd"],"kind":"trait"},"1:11514:10460":{"crate_id":1,"path":["std","sys_common","net","TcpStream"],"kind":"struct"},"17:13855:5767":{"crate_id":17,"path":["object","macho","SegmentCommand32"],"kind":"struct"},"6:5152:7459":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_can"],"kind":"struct"},"24:4576:2039":{"crate_id":24,"path":["syn","data","Fields"],"kind":"enum"},"24:2721:2362":{"crate_id":24,"path":["syn","token","Const"],"kind":"struct"},"17:14298:5850":{"crate_id":17,"path":["object","macho","RpathCommand"],"kind":"struct"},"2:30931:4640":{"crate_id":2,"path":["core","mem","manually_drop","ManuallyDrop"],"kind":"struct"},"1:10455:10444":{"crate_id":1,"path":["std","sys","pal","unix","stdio","Stdout"],"kind":"struct"},"20:950:1980":{"crate_id":20,"path":["proc_macro2","Ident"],"kind":"struct"},"2:10888:8692":{"crate_id":2,"path":["core","slice","iter","SplitInclusive"],"kind":"struct"},"17:437:5419":{"crate_id":17,"path":["object","read","any","Section"],"kind":"struct"},"1:0:1530":{"crate_id":1,"path":["std"],"kind":"module"},"2:9952:3559":{"crate_id":2,"path":["core","fmt","Write"],"kind":"trait"},"17:12371:5587":{"crate_id":17,"path":["object","read","pe","import","Import"],"kind":"enum"},"17:13594:5710":{"crate_id":17,"path":["object","elf","HashHeader"],"kind":"struct"},"17:15368:6154":{"crate_id":17,"path":["object","pe","ImageResourceDirectoryEntry"],"kind":"struct"},"11:2140:10329":{"crate_id":11,"path":["hashbrown","set","OccupiedEntry"],"kind":"struct"},"17:12659:22904":{"crate_id":17,"path":["object","read","xcoff","comdat","XcoffComdat"],"kind":"struct"},"2:42028:168":{"crate_id":2,"path":["core","net","ip_addr","IpAddr"],"kind":"enum"},"5:3266:2017":{"crate_id":5,"path":["alloc","collections","btree","set","Union"],"kind":"struct"},"17:13814:5763":{"crate_id":17,"path":["object","macho","MachHeader64"],"kind":"struct"},"2:3393:144":{"crate_id":2,"path":["core","ops","try_trait","FromResidual"],"kind":"trait"},"2:32777:234":{"crate_id":2,"path":["core","marker","Send"],"kind":"trait"},"1:6243:5189":{"crate_id":1,"path":["std","sync","mpmc","waker","SyncWaker"],"kind":"struct"},"1:8245:10405":{"crate_id":1,"path":["std","io","SeekFrom"],"kind":"enum"},"1:12051:27116":{"crate_id":1,"path":["std","backtrace_rs","print","PrintFmt"],"kind":"enum"},"23:504:4262":{"crate_id":23,"path":["quote","__private","IdentFragmentAdapter"],"kind":"struct"},"24:4342:3723":{"crate_id":24,"path":["syn","token","RArrow"],"kind":"struct"},"21:2649:3407":{"crate_id":21,"path":["proc_macro","token_stream","IntoIter"],"kind":"struct"},"2:44555:15787":{"crate_id":2,"path":["core","str","pattern","SearchStep"],"kind":"enum"},"17:15582:6225":{"crate_id":17,"path":["object","pe","ImageHotPatchBase"],"kind":"struct"},"1:9210:28052":{"crate_id":1,"path":["std","sys","pal","common","thread_local","fast_local","Key"],"kind":"struct"},"2:41112:3516":{"crate_id":2,"path":["core","iter","adapters","scan","Scan"],"kind":"struct"},"2:22001:7875":{"crate_id":2,"path":["core","core_simd","vector","Simd"],"kind":"struct"},"1:7835:9855":{"crate_id":1,"path":["std","env","JoinPathsError"],"kind":"struct"},"1:8891:8325":{"crate_id":1,"path":["std","process","ExitStatusError"],"kind":"struct"},"1:5476:10555":{"crate_id":1,"path":["std","process","ChildStdin"],"kind":"struct"},"2:44225:8767":{"crate_id":2,"path":["core","str","iter","SplitTerminator"],"kind":"struct"},"2:15:2809":{"crate_id":2,"path":["core","write"],"kind":"macro"},"16:6445:8588":{"crate_id":16,"path":["gimli","read","line","LineRows"],"kind":"struct"},"18:689:8448":{"crate_id":18,"path":["memchr","memmem","FinderRev"],"kind":"struct"},"5:2074:10333":{"crate_id":5,"path":["alloc","collections","btree","map","CursorMutKey"],"kind":"struct"},"2:13165:162":{"crate_id":2,"path":["core","future","into_future","IntoFuture"],"kind":"trait"},"1:12085:1642":{"crate_id":1,"path":["std","u8"],"kind":"primitive"},"6:4584:7221":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_effect"],"kind":"struct"},"16:5541:8503":{"crate_id":16,"path":["gimli","read","cfi","ParsedEhFrameHdr"],"kind":"struct"},"6:4847:7309":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_j1939"],"kind":"struct"},"1:9232:27102":{"crate_id":1,"path":["std","sys","pal","common","thread_local","fast_local","DtorState"],"kind":"enum"},"16:2859:6433":{"crate_id":16,"path":["gimli","common","EhFrameOffset"],"kind":"struct"},"2:44439:8779":{"crate_id":2,"path":["core","str","iter","LinesAny"],"kind":"struct"},"14:165:21708":{"crate_id":14,"path":["rustc_demangle","DemangleStyle"],"kind":"enum"},"17:13485:5680":{"crate_id":17,"path":["object","elf","Dyn64"],"kind":"struct"},"2:9970:141":{"crate_id":2,"path":["core","fmt","Formatter"],"kind":"struct"},"16:7176:36027":{"crate_id":16,"path":["gimli","read","op","EvaluationState"],"kind":"enum"},"1:1446:153":{"crate_id":1,"path":["std","collections","hash","set","HashSet"],"kind":"struct"},"17:13455:5676":{"crate_id":17,"path":["object","elf","ProgramHeader64"],"kind":"struct"},"2:7227:2794":{"crate_id":2,"path":["core","iter","adapters","zip","zip"],"kind":"function"},"1:9296:4852":{"crate_id":1,"path":["std","sys","pal","unix","args","Args"],"kind":"struct"},"5:7419:3407":{"crate_id":5,"path":["alloc","collections","vec_deque","into_iter","IntoIter"],"kind":"struct"},"2:22853:8711":{"crate_id":2,"path":["core","num","error","ParseIntError"],"kind":"struct"},"24:4979:3362":{"crate_id":24,"path":["syn","expr","ExprUnsafe"],"kind":"struct"},"17:15678:6259":{"crate_id":17,"path":["object","pe","ImageEnclaveConfig64"],"kind":"struct"},"1:11171:8345":{"crate_id":1,"path":["std","sys","personality","dwarf","eh","EHContext"],"kind":"struct"},"1:3814:10459":{"crate_id":1,"path":["std","net","tcp","TcpListener"],"kind":"struct"},"1:9147:231":{"crate_id":1,"path":["std","sync","rwlock","RwLockReadGuard"],"kind":"struct"},"2:44887:8807":{"crate_id":2,"path":["core","str","LinesMap"],"kind":"struct"},"2:21573:10616":{"crate_id":2,"path":["core","core_simd","lane_count","SupportedLaneCount"],"kind":"trait"},"1:11426:8851":{"crate_id":1,"path":["std","sys_common","wtf8","EncodeWide"],"kind":"struct"},"6:7692:7861":{"crate_id":6,"path":["libc","unix","linux_like","linux","non_exhaustive","open_how"],"kind":"struct"},"6:4616:7234":{"crate_id":6,"path":["libc","unix","linux_like","linux","dl_phdr_info"],"kind":"struct"},"1:9464:10401":{"crate_id":1,"path":["std","sys","pal","unix","fs","ReadDir"],"kind":"struct"},"22:0:3297":{"crate_id":22,"path":["unicode_ident"],"kind":"module"},"2:8369:3489":{"crate_id":2,"path":["core","iter","traits","marker","TrustedStep"],"kind":"trait"},"2:22334:10702":{"crate_id":2,"path":["core","core_simd","simd","ptr","const_ptr","SimdConstPtr"],"kind":"trait"},"24:2019:3410":{"crate_id":24,"path":["syn","punctuated","PrivateIter"],"kind":"struct"},"6:7365:7825":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","align","max_align_t"],"kind":"struct"},"5:1506:10078":{"crate_id":5,"path":["alloc","collections","btree","map","IntoKeys"],"kind":"struct"},"6:1650:7041":{"crate_id":6,"path":["libc","unix","linux_like","in6_rtmsg"],"kind":"struct"},"17:13766:5753":{"crate_id":17,"path":["object","macho","FatHeader"],"kind":"struct"},"24:5411:2535":{"crate_id":24,"path":["syn","path","QSelf"],"kind":"struct"},"2:12106:15776":{"crate_id":2,"path":["core","str","converts","from_utf8"],"kind":"function"},"1:10087:28097":{"crate_id":1,"path":["std","sys","pal","unix","os","EnvStrDebug"],"kind":"struct"},"24:5212:3376":{"crate_id":24,"path":["syn","lit","LitInt"],"kind":"struct"},"2:2506:198":{"crate_id":2,"path":["core","cmp","PartialEq"],"kind":"trait"},"6:4922:7341":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_ifru_map"],"kind":"struct"},"2:7900:143":{"crate_id":2,"path":["core","iter","traits","collect","FromIterator"],"kind":"trait"},"24:53:2056":{"crate_id":24,"path":["syn","token"],"kind":"module"},"5:7536:8677":{"crate_id":5,"path":["alloc","ffi","c_str","FromVecWithNulError"],"kind":"struct"},"2:9654:33099":{"crate_id":2,"path":["core","fmt","builders","PadAdapter"],"kind":"struct"},"17:11730:8473":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSubsubsectionIterator"],"kind":"struct"},"17:13972:5512":{"crate_id":17,"path":["object","macho","Dylib"],"kind":"struct"},"1:7820:10356":{"crate_id":1,"path":["std","env","VarError"],"kind":"enum"},"24:4267:3718":{"crate_id":24,"path":["syn","token","PercentEq"],"kind":"struct"},"6:6934:7812":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ptrace_rseq_configuration"],"kind":"struct"},"17:12362:8487":{"crate_id":17,"path":["object","read","pe","import","ImportThunkList"],"kind":"struct"},"17:13473:5677":{"crate_id":17,"path":["object","elf","Dyn32"],"kind":"struct"},"1:8295:8778":{"crate_id":1,"path":["std","io","Lines"],"kind":"struct"},"6:6136:7624":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","sifields_sigchld"],"kind":"struct"},"1:4879:5182":{"crate_id":1,"path":["std","os","fd","owned","OwnedFd"],"kind":"struct"},"2:34096:5323":{"crate_id":2,"path":["core","ops","arith","RemAssign"],"kind":"trait"},"17:11063:22752":{"crate_id":17,"path":["object","read","coff","file","CoffFile"],"kind":"struct"},"6:7598:7840":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_mutexattr_t"],"kind":"struct"},"16:7565:6607":{"crate_id":16,"path":["gimli","read","UnitOffset"],"kind":"struct"},"16:5568:8507":{"crate_id":16,"path":["gimli","read","cfi","EhHdrTable"],"kind":"struct"},"20:935:2046":{"crate_id":20,"path":["proc_macro2","Spacing"],"kind":"enum"},"1:10721:137":{"crate_id":1,"path":["std","sys","pal","unix","fs","FileType"],"kind":"struct"},"17:15324:6140":{"crate_id":17,"path":["object","pe","ImageBoundImportDescriptor"],"kind":"struct"},"1:1054:10329":{"crate_id":1,"path":["std","collections","hash","map","OccupiedEntry"],"kind":"struct"},"1:849:3412":{"crate_id":1,"path":["std","collections","hash","map","IterMut"],"kind":"struct"},"14:214:8644":{"crate_id":14,"path":["rustc_demangle","TryDemangleError"],"kind":"struct"},"1:3916:10461":{"crate_id":1,"path":["std","net","udp","UdpSocket"],"kind":"struct"},"2:2720:160":{"crate_id":2,"path":["core","convert","Into"],"kind":"trait"},"2:46262:8149":{"crate_id":2,"path":["core","core_arch","simd","u32x2"],"kind":"struct"},"2:48385:8243":{"crate_id":2,"path":["core","core_arch","x86","__m128i"],"kind":"struct"},"5:5980:72":{"crate_id":5,"path":["alloc","sync","Arc"],"kind":"struct"},"5:790:5106":{"crate_id":5,"path":["alloc","collections","binary_heap","PeekMut"],"kind":"struct"},"24:5542:3395":{"crate_id":24,"path":["syn","ty","TypePtr"],"kind":"struct"},"9:177:10069":{"crate_id":9,"path":["miniz_oxide","inflate","stream","InflateState"],"kind":"struct"},"2:12518:3433":{"crate_id":2,"path":["core","str","traits","FromStr"],"kind":"trait"},"17:13497:5681":{"crate_id":17,"path":["object","elf","Versym"],"kind":"struct"},"24:4465:3732":{"crate_id":24,"path":["syn","token","StarEq"],"kind":"struct"},"24:904:36406":{"crate_id":24,"path":["syn","generics","Lifetimes"],"kind":"struct"},"2:41494:3472":{"crate_id":2,"path":["core","iter","sources","from_fn","FromFn"],"kind":"struct"},"24:5539:2538":{"crate_id":24,"path":["syn","ty","TypePath"],"kind":"struct"},"14:202:2414":{"crate_id":14,"path":["rustc_demangle","v0","ParseError"],"kind":"enum"},"2:42346:3408":{"crate_id":2,"path":["core","option","Iter"],"kind":"struct"},"5:1790:4776":{"crate_id":5,"path":["alloc","collections","btree","map","ExtractIf"],"kind":"struct"},"2:3141:4684":{"crate_id":2,"path":["core","ops","coroutine","Coroutine"],"kind":"trait"},"18:726:5367":{"crate_id":18,"path":["memchr","memmem","SearcherConfig"],"kind":"struct"},"16:7345:8628":{"crate_id":16,"path":["gimli","read","pubnames","PubNamesEntryIter"],"kind":"struct"},"1:4312:10506":{"crate_id":1,"path":["std","os","unix","net","datagram","UnixDatagram"],"kind":"struct"},"2:46511:8164":{"crate_id":2,"path":["core","core_arch","simd","u16x8"],"kind":"struct"},"2:32834:3601":{"crate_id":2,"path":["core","marker","Unpin"],"kind":"trait"},"24:98:3864":{"crate_id":24,"path":["syn","token","private","CustomToken"],"kind":"trait"},"24:95:10406":{"crate_id":24,"path":["syn","token","private","Sealed"],"kind":"trait"},"2:13239:15826":{"crate_id":2,"path":["core","future","poll_fn","PollFn"],"kind":"struct"},"2:22348:4713":{"crate_id":2,"path":["core","core_simd","simd","ptr","const_ptr","SimdConstPtr","from_exposed_addr"],"kind":"foreign_type"},"2:4603:3577":{"crate_id":2,"path":["core","cell","UnsafeCell"],"kind":"struct"},"16:5616:8509":{"crate_id":16,"path":["gimli","read","cfi","BaseAddresses"],"kind":"struct"},"24:3078:3675":{"crate_id":24,"path":["syn","token","Mut"],"kind":"struct"},"11:1087:35990":{"crate_id":11,"path":["hashbrown","map","KeyOrRef"],"kind":"enum"},"24:4591:3325":{"crate_id":24,"path":["syn","data","FieldsNamed"],"kind":"struct"},"17:12516:22914":{"crate_id":17,"path":["object","read","xcoff","file","XcoffFile"],"kind":"struct"},"17:15836:6292":{"crate_id":17,"path":["object","pe","ImageCor20Header"],"kind":"struct"},"24:952:3368":{"crate_id":24,"path":["syn","generics","ImplGenerics"],"kind":"struct"},"17:15521:6218":{"crate_id":17,"path":["object","pe","ImageLoadConfigDirectory64"],"kind":"struct"},"6:6169:7633":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","utmpx"],"kind":"struct"},"24:566:5304":{"crate_id":24,"path":["syn","error","SpanRange"],"kind":"struct"},"5:7351:8672":{"crate_id":5,"path":["alloc","collections","btree","map","UnorderedKeyError"],"kind":"struct"},"6:4908:7333":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlattr"],"kind":"struct"},"1:9086:8332":{"crate_id":1,"path":["std","sync","mpmc","select","Operation"],"kind":"struct"},"16:2709:6426":{"crate_id":16,"path":["gimli","common","DebugRngListsIndex"],"kind":"struct"},"17:513:22710":{"crate_id":17,"path":["object","read","any","Comdat"],"kind":"struct"},"6:7702:7863":{"crate_id":6,"path":["libc","unix","align","in6_addr"],"kind":"struct"},"1:8374:10458":{"crate_id":1,"path":["std","os","unix","net","listener","Incoming"],"kind":"struct"},"5:6893:4783":{"crate_id":5,"path":["alloc","vec","in_place_drop","InPlaceDrop"],"kind":"struct"},"5:7063:5151":{"crate_id":5,"path":["alloc","vec","dedup_by","FillGapOnDrop"],"kind":"struct"},"5:886:5111":{"crate_id":5,"path":["alloc","collections","binary_heap","Hole"],"kind":"struct"},"2:33978:5321":{"crate_id":2,"path":["core","ops","arith","MulAssign"],"kind":"trait"},"1:8601:8829":{"crate_id":1,"path":["std","path","Components"],"kind":"struct"},"17:13089:5598":{"crate_id":17,"path":["object","archive","Header"],"kind":"struct"},"16:6201:6434":{"crate_id":16,"path":["gimli","read","abbrev","DebugAbbrev"],"kind":"struct"},"6:1591:6997":{"crate_id":6,"path":["libc","unix","linux_like","sched_param"],"kind":"struct"},"2:40836:8730":{"crate_id":2,"path":["core","ffi","c_str","FromBytesWithNulError"],"kind":"struct"},"17:16069:6354":{"crate_id":17,"path":["object","xcoff","SymbolBytes"],"kind":"struct"},"24:3367:3684":{"crate_id":24,"path":["syn","token","Unsized"],"kind":"struct"},"2:43537:154":{"crate_id":2,"path":["core","hash","sip","Hasher"],"kind":"struct"},"17:13344:5656":{"crate_id":17,"path":["object","elf","Sym64"],"kind":"struct"},"1:7625:9864":{"crate_id":1,"path":["std","backtrace_rs","symbolize","SymbolName"],"kind":"struct"},"17:14271:5847":{"crate_id":17,"path":["object","macho","PrebindCksumCommand"],"kind":"struct"},"11:1903:8655":{"crate_id":11,"path":["hashbrown","set","Intersection"],"kind":"struct"},"24:5555:3398":{"crate_id":24,"path":["syn","ty","TypeTraitObject"],"kind":"struct"},"1:10677:8836":{"crate_id":1,"path":["std","sys","pal","unix","fs","FileAttr"],"kind":"struct"},"2:21514:10617":{"crate_id":2,"path":["core","core_simd","cast","SimdCast"],"kind":"trait"},"24:4098:3706":{"crate_id":24,"path":["syn","token","LArrow"],"kind":"struct"},"5:6903:4784":{"crate_id":5,"path":["alloc","vec","in_place_drop","InPlaceDstDataSrcBufDrop"],"kind":"struct"},"2:41510:3476":{"crate_id":2,"path":["core","iter","sources","once_with","OnceWith"],"kind":"struct"},"6:6943:7815":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user_fpregs_struct"],"kind":"struct"},"1:5321:200":{"crate_id":1,"path":["std","path","Path"],"kind":"struct"},"2:22806:32954":{"crate_id":2,"path":["core","num","fmt","Part"],"kind":"enum"},"17:11256:8459":{"crate_id":17,"path":["object","read","coff","import","ImportFile"],"kind":"struct"},"6:4434:7148":{"crate_id":6,"path":["libc","unix","linux_like","linux","fsid_t"],"kind":"struct"},"5:2998:27021":{"crate_id":5,"path":["alloc","collections","btree","node","marker","ValMut"],"kind":"struct"},"17:12824:22728":{"crate_id":17,"path":["object","read","SymbolSection"],"kind":"enum"},"16:8022:22656":{"crate_id":16,"path":["gimli","read","value","ValueType"],"kind":"enum"},"17:11755:8476":{"crate_id":17,"path":["object","read","elf","attributes","AttributeIndexIterator"],"kind":"struct"},"1:8403:7710":{"crate_id":1,"path":["std","os","linux","raw","arch","stat"],"kind":"struct"},"1:1862:10348":{"crate_id":1,"path":["std","env","SplitPaths"],"kind":"struct"},"1:533:4559":{"crate_id":1,"path":["std","thread","Packet"],"kind":"struct"},"17:10759:5494":{"crate_id":17,"path":["object","read","any","SymbolTable"],"kind":"struct"},"2:7904:163":{"crate_id":2,"path":["core","iter","traits","collect","IntoIterator"],"kind":"trait"},"2:13461:4690":{"crate_id":2,"path":["core","alloc","Allocator"],"kind":"trait"},"21:1201:205":{"crate_id":21,"path":["proc_macro","bridge","client","ProcMacro"],"kind":"enum"},"1:12067:1034":{"crate_id":1,"path":["std","never"],"kind":"primitive"},"2:46381:8154":{"crate_id":2,"path":["core","core_arch","simd","i64x1"],"kind":"struct"},"6:1691:7065":{"crate_id":6,"path":["libc","unix","linux_like","mmsghdr"],"kind":"struct"},"2:39907:2591":{"crate_id":2,"path":["core","ops","index","Index"],"kind":"trait"},"1:8078:28060":{"crate_id":1,"path":["std","io","error","SimpleMessage"],"kind":"struct"},"16:4702:6479":{"crate_id":16,"path":["gimli","constants","DwId"],"kind":"struct"},"24:4226:3715":{"crate_id":24,"path":["syn","token","OrOr"],"kind":"struct"},"1:12092:1248":{"crate_id":1,"path":["std","reference"],"kind":"primitive"},"5:2249:34383":{"crate_id":5,"path":["alloc","collections","btree","navigate","LazyLeafHandle"],"kind":"enum"},"16:4649:6477":{"crate_id":16,"path":["gimli","constants","DwLang"],"kind":"struct"},"1:5209:201":{"crate_id":1,"path":["std","path","PathBuf"],"kind":"struct"},"24:2959:3670":{"crate_id":24,"path":["syn","token","In"],"kind":"struct"},"17:10284:5472":{"crate_id":17,"path":["object","endian","I16Bytes"],"kind":"struct"},"11:2326:10329":{"crate_id":11,"path":["hashbrown","table","OccupiedEntry"],"kind":"struct"},"1:6978:5197":{"crate_id":1,"path":["std","sys","pal","common","thread_local","abort_on_dtor_unwind","DtorUnwindGuard"],"kind":"struct"},"6:4968:7368":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_sndinfo"],"kind":"struct"},"16:6282:8573":{"crate_id":16,"path":["gimli","read","aranges","ArangeHeaderIter"],"kind":"struct"},"17:14189:5832":{"crate_id":17,"path":["object","macho","DylibModule32"],"kind":"struct"},"24:3095:3676":{"crate_id":24,"path":["syn","token","Override"],"kind":"struct"},"1:10452:10442":{"crate_id":1,"path":["std","sys","pal","unix","stdio","Stdin"],"kind":"struct"},"17:15596:6231":{"crate_id":17,"path":["object","pe","ImageHotPatchHashes"],"kind":"struct"},"1:880:8654":{"crate_id":1,"path":["std","collections","hash","map","Values"],"kind":"struct"},"6:4686:7247":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Phdr"],"kind":"struct"},"1:918:10079":{"crate_id":1,"path":["std","collections","hash","map","IntoValues"],"kind":"struct"},"1:2496:3181":{"crate_id":1,"path":["std","io"],"kind":"module"},"24:1659:2055":{"crate_id":24,"path":["syn","parse_quote"],"kind":"macro"},"2:34752:3725":{"crate_id":2,"path":["core","ops","bit","Shl"],"kind":"trait"},"1:9469:5204":{"crate_id":1,"path":["std","sys","pal","unix","fs","Dir"],"kind":"struct"},"2:4238:15802":{"crate_id":2,"path":["core","async_iter","async_iter","IntoAsyncIterator"],"kind":"trait"},"1:859:3407":{"crate_id":1,"path":["std","collections","hash","map","IntoIter"],"kind":"struct"},"17:12076:22828":{"crate_id":17,"path":["object","read","macho","section","MachOSection"],"kind":"struct"},"16:6737:6551":{"crate_id":16,"path":["gimli","read","lists","ListsHeader"],"kind":"struct"},"2:22562:8701":{"crate_id":2,"path":["core","num","bignum","Big32x40"],"kind":"struct"},"6:4556:7205":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_condition_effect"],"kind":"struct"},"2:9472:92":{"crate_id":2,"path":["core","sync","atomic","AtomicPtr"],"kind":"struct"},"16:6221:8569":{"crate_id":16,"path":["gimli","read","abbrev","Abbreviations"],"kind":"struct"},"24:3384:3685":{"crate_id":24,"path":["syn","token","Use"],"kind":"struct"},"16:7324:8625":{"crate_id":16,"path":["gimli","read","pubnames","PubNamesEntry"],"kind":"struct"},"1:945:10327":{"crate_id":1,"path":["std","collections","hash","map","RawVacantEntryMut"],"kind":"struct"},"5:1496:10323":{"crate_id":5,"path":["alloc","collections","btree","map","ValuesMut"],"kind":"struct"},"24:96:4406":{"crate_id":24,"path":["syn","token","private","WithSpan"],"kind":"struct"},"16:5331:5468":{"crate_id":16,"path":["gimli","endianity","BigEndian"],"kind":"struct"},"17:14503:5887":{"crate_id":17,"path":["object","macho","SourceVersionCommand"],"kind":"struct"},"2:46066:8141":{"crate_id":2,"path":["core","core_arch","simd","u8x2"],"kind":"struct"},"20:880:248":{"crate_id":20,"path":["proc_macro2","TokenStream"],"kind":"struct"},"24:4987:3364":{"crate_id":24,"path":["syn","expr","ExprYield"],"kind":"struct"},"2:41301:3521":{"crate_id":2,"path":["core","iter","adapters","zip","Zip"],"kind":"struct"},"6:4516:7186":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_mask"],"kind":"struct"},"17:12572:5494":{"crate_id":17,"path":["object","read","xcoff","symbol","SymbolTable"],"kind":"struct"},"2:8407:33097":{"crate_id":2,"path":["core","net","display_buffer","DisplayBuffer"],"kind":"struct"},"23:322:2670":{"crate_id":23,"path":["quote","spanned","Spanned"],"kind":"trait"},"1:6275:10088":{"crate_id":1,"path":["std","sync","mpmc","zero","ZeroToken"],"kind":"struct"},"17:13581:5709":{"crate_id":17,"path":["object","elf","NoteHeader64"],"kind":"struct"},"24:4827:3340":{"crate_id":24,"path":["syn","expr","ExprArray"],"kind":"struct"},"2:4455:3566":{"crate_id":2,"path":["core","cell","BorrowMutError"],"kind":"struct"},"2:39998:211":{"crate_id":2,"path":["core","ops","range","RangeInclusive"],"kind":"struct"},"2:40874:10371":{"crate_id":2,"path":["core","ffi","c_char"],"kind":"type_alias"},"9:481:21618":{"crate_id":9,"path":["miniz_oxide","DataFormat"],"kind":"enum"},"1:9157:159":{"crate_id":1,"path":["std","time","Instant"],"kind":"struct"},"17:14723:5907":{"crate_id":17,"path":["object","pe","ImageDosHeader"],"kind":"struct"},"17:11497:22773":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdatIterator"],"kind":"struct"},"17:14752:5927":{"crate_id":17,"path":["object","pe","ImageOs2Header"],"kind":"struct"},"1:7665:5200":{"crate_id":1,"path":["std","backtrace_rs","print","BacktraceFrameFmt"],"kind":"struct"},"1:2422:4704":{"crate_id":1,"path":["std","fs","metadata"],"kind":"function"},"2:13356:114":{"crate_id":2,"path":["core","task","wake","Context"],"kind":"struct"},"1:8275:3519":{"crate_id":1,"path":["std","io","Take"],"kind":"struct"},"16:6348:6437":{"crate_id":16,"path":["gimli","read","index","DebugCuIndex"],"kind":"struct"},"1:11554:10459":{"crate_id":1,"path":["std","sys_common","net","TcpListener"],"kind":"struct"},"18:706:8451":{"crate_id":18,"path":["memchr","memmem","Searcher"],"kind":"struct"},"11:787:8654":{"crate_id":11,"path":["hashbrown","map","Values"],"kind":"struct"},"1:10963:5208":{"crate_id":1,"path":["std","sys","pal","unix","process","process_inner","posix_spawn","PosixSpawnattr"],"kind":"struct"},"23:344:1228":{"crate_id":23,"path":["quote","quote"],"kind":"macro"},"1:10881:27119":{"crate_id":1,"path":["std","sys","pal","unix","process","process_common","ProgramKind"],"kind":"enum"},"6:5885:7503":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__exit_status"],"kind":"struct"},"1:4240:10503":{"crate_id":1,"path":["std","os","unix","net","ancillary","ScmCredentials"],"kind":"struct"},"5:5826:247":{"crate_id":5,"path":["alloc","string","ToString"],"kind":"trait"},"2:45146:8138":{"crate_id":2,"path":["core","task","wake","RawWakerVTable"],"kind":"struct"},"1:8928:3407":{"crate_id":1,"path":["std","sync","mpsc","IntoIter"],"kind":"struct"},"2:12583:15772":{"crate_id":2,"path":["core","str","pattern","DoubleEndedSearcher"],"kind":"trait"},"5:2196:8662":{"crate_id":5,"path":["alloc","collections","btree","navigate","LeafRange"],"kind":"struct"},"20:885:2047":{"crate_id":20,"path":["proc_macro2","Span"],"kind":"struct"},"17:15608:6234":{"crate_id":17,"path":["object","pe","ImageArmRuntimeFunctionEntry"],"kind":"struct"},"2:2717:77":{"crate_id":2,"path":["core","convert","AsMut"],"kind":"trait"},"1:482:5176":{"crate_id":1,"path":["std","thread","spawn_unchecked_","MaybeDangling"],"kind":"struct"},"17:12494:5559":{"crate_id":17,"path":["object","read","pe","rich","RichHeaderInfo"],"kind":"struct"},"24:5163:2321":{"crate_id":24,"path":["syn","lit","Lit"],"kind":"enum"},"17:14516:5888":{"crate_id":17,"path":["object","macho","DataInCodeEntry"],"kind":"struct"},"16:5499:6438":{"crate_id":16,"path":["gimli","read","cfi","DebugFrame"],"kind":"struct"},"1:7814:10319":{"crate_id":1,"path":["std","backtrace","RawFrame"],"kind":"enum"},"6:4989:7383":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_nxtinfo"],"kind":"struct"},"1:10758:27981":{"crate_id":1,"path":["std","sys","pal","unix","kernel_copy","SpliceMode"],"kind":"enum"},"1:8425:8306":{"crate_id":1,"path":["std","os","fd","owned","BorrowedFd"],"kind":"struct"},"17:11799:22862":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCacheImageIterator"],"kind":"struct"},"17:14449:5881":{"crate_id":17,"path":["object","macho","SymsegCommand"],"kind":"struct"},"2:44175:8690":{"crate_id":2,"path":["core","str","iter","Split"],"kind":"struct"},"17:10170:5468":{"crate_id":17,"path":["object","endian","BigEndian"],"kind":"struct"},"24:4631:2320":{"crate_id":24,"path":["syn","expr","Expr"],"kind":"enum"},"2:7863:3493":{"crate_id":2,"path":["core","iter","traits","accum","Sum"],"kind":"trait"},"11:1566:21700":{"crate_id":11,"path":["hashbrown","rustc_entry","RustcEntry"],"kind":"enum"},"16:6030:8564":{"crate_id":16,"path":["gimli","read","cfi","CallFrameInstructionIter"],"kind":"struct"},"6:4428:7147":{"crate_id":6,"path":["libc","unix","linux_like","linux","itimerspec"],"kind":"struct"},"17:13363:5657":{"crate_id":17,"path":["object","elf","Syminfo32"],"kind":"struct"},"24:4835:3342":{"crate_id":24,"path":["syn","expr","ExprAsync"],"kind":"struct"},"24:5392:2360":{"crate_id":24,"path":["syn","path","AssocType"],"kind":"struct"},"2:46210:8147":{"crate_id":2,"path":["core","core_arch","simd","u8x8"],"kind":"struct"},"17:10524:22719":{"crate_id":17,"path":["object","read","any","SegmentIterator"],"kind":"struct"},"21:2606:8436":{"crate_id":21,"path":["proc_macro","diagnostic","Children"],"kind":"struct"},"6:5921:7516":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","cmsghdr"],"kind":"struct"},"5:2487:7865":{"crate_id":5,"path":["alloc","collections","btree","node","NodeRef"],"kind":"struct"},"2:46931:8177":{"crate_id":2,"path":["core","core_arch","simd","m64x2"],"kind":"struct"},"18:635:5363":{"crate_id":18,"path":["memchr","memmem","twoway","ApproximateByteSet"],"kind":"struct"},"17:13946:5781":{"crate_id":17,"path":["object","macho","Fvmlib"],"kind":"struct"},"17:13723:5742":{"crate_id":17,"path":["object","macho","DyldCacheMappingInfo"],"kind":"struct"},"1:9014:8331":{"crate_id":1,"path":["std","sync","condvar","WaitTimeoutResult"],"kind":"struct"},"17:12388:8488":{"crate_id":17,"path":["object","read","pe","import","DelayLoadImportTable"],"kind":"struct"},"24:4383:3726":{"crate_id":24,"path":["syn","token","ShlEq"],"kind":"struct"},"17:14147:5811":{"crate_id":17,"path":["object","macho","DysymtabCommand"],"kind":"struct"},"2:41103:3515":{"crate_id":2,"path":["core","iter","adapters","rev","Rev"],"kind":"struct"},"5:7302:4691":{"crate_id":5,"path":["alloc","alloc","Global"],"kind":"struct"},"20:708:248":{"crate_id":20,"path":["proc_macro2","fallback","TokenStream"],"kind":"struct"},"24:5065:2647":{"crate_id":24,"path":["syn","generics","LifetimeParam"],"kind":"struct"},"17:11715:8472":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSubsection"],"kind":"struct"},"2:46086:8142":{"crate_id":2,"path":["core","core_arch","simd","i8x2"],"kind":"struct"},"1:10458:10440":{"crate_id":1,"path":["std","sys","pal","unix","stdio","Stderr"],"kind":"struct"},"24:3452:263":{"crate_id":24,"path":["syn","token","Yield"],"kind":"struct"},"17:16165:6377":{"crate_id":17,"path":["object","xcoff","FunAux32"],"kind":"struct"},"17:11142:5494":{"crate_id":17,"path":["object","read","coff","symbol","SymbolTable"],"kind":"struct"},"16:6320:8576":{"crate_id":16,"path":["gimli","read","aranges","ArangeEntryIter"],"kind":"struct"},"1:1602:8657":{"crate_id":1,"path":["std","collections","hash","set","SymmetricDifference"],"kind":"struct"},"2:41501:3474":{"crate_id":2,"path":["core","iter","sources","once","Once"],"kind":"struct"},"6:4488:7175":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_id"],"kind":"struct"},"1:7974:126":{"crate_id":1,"path":["std","fs","DirBuilder"],"kind":"struct"},"1:10393:5205":{"crate_id":1,"path":["std","sys","pal","unix","stack_overflow","Handler"],"kind":"struct"},"2:44483:8718":{"crate_id":2,"path":["core","str","iter","EscapeDefault"],"kind":"struct"},"6:555:6916":{"crate_id":6,"path":["libc","unix","winsize"],"kind":"struct"},"1:11123:8344":{"crate_id":1,"path":["std","sys","pal","unix","time","Timespec"],"kind":"struct"},"17:9938:22715":{"crate_id":17,"path":["object","common","RelocationKind"],"kind":"enum"},"24:4477:3733":{"crate_id":24,"path":["syn","token","Tilde"],"kind":"struct"},"6:4893:7326":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlmsghdr"],"kind":"struct"},"2:38559:5326":{"crate_id":2,"path":["core","ops","bit","BitOrAssign"],"kind":"trait"},"11:123:5094":{"crate_id":11,"path":["hashbrown","raw","RawTable"],"kind":"struct"},"2:22402:4713":{"crate_id":2,"path":["core","core_simd","simd","ptr","mut_ptr","SimdMutPtr","from_exposed_addr"],"kind":"foreign_type"},"24:4934:2248":{"crate_id":24,"path":["syn","expr","ExprPath"],"kind":"struct"},"2:48291:8240":{"crate_id":2,"path":["core","core_arch","simd","i64x8"],"kind":"struct"},"2:10431:5164":{"crate_id":2,"path":["core","slice","sort","merge","MergeHole"],"kind":"struct"},"1:12084:791":{"crate_id":1,"path":["std","i128"],"kind":"primitive"},"11:700:3407":{"crate_id":11,"path":["hashbrown","map","IntoIter"],"kind":"struct"},"17:14025:5793":{"crate_id":17,"path":["object","macho","SubUmbrellaCommand"],"kind":"struct"},"17:16050:5644":{"crate_id":17,"path":["object","xcoff","SectionHeader64"],"kind":"struct"},"16:6254:6508":{"crate_id":16,"path":["gimli","read","abbrev","AttributeSpecification"],"kind":"struct"},"24:4975:3338":{"crate_id":24,"path":["syn","expr","ExprUnary"],"kind":"struct"},"2:3315:208":{"crate_id":2,"path":["core","ops","range","RangeBounds"],"kind":"trait"},"17:14436:5880":{"crate_id":17,"path":["object","macho","LinkerOptionCommand"],"kind":"struct"},"2:33254:5317":{"crate_id":2,"path":["core","ops","arith","Mul"],"kind":"trait"},"6:6071:7602":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","Elf64_Chdr"],"kind":"struct"},"17:15720:6265":{"crate_id":17,"path":["object","pe","ImageDebugDirectory"],"kind":"struct"},"11:1107:21698":{"crate_id":11,"path":["hashbrown","map","OccupiedEntryRef"],"kind":"struct"},"1:12083:795":{"crate_id":1,"path":["std","i64"],"kind":"primitive"},"16:5601:22634":{"crate_id":16,"path":["gimli","read","cfi","CieOffsetEncoding"],"kind":"enum"},"2:48329:8241":{"crate_id":2,"path":["core","core_arch","simd","u64x8"],"kind":"struct"},"24:3333:2017":{"crate_id":24,"path":["syn","token","Union"],"kind":"struct"},"2:46563:8166":{"crate_id":2,"path":["core","core_arch","simd","u64x2"],"kind":"struct"},"16:6134:10037":{"crate_id":16,"path":["gimli","read","dwarf","RangeIter"],"kind":"struct"},"17:1207:22753":{"crate_id":17,"path":["object","read","coff","relocation","CoffRelocationIterator"],"kind":"struct"},"2:725:10406":{"crate_id":2,"path":["core","num","nonzero","private","Sealed"],"kind":"trait"},"1:8010:3546":{"crate_id":1,"path":["std","io","cursor","Cursor"],"kind":"struct"},"18:623:36088":{"crate_id":18,"path":["memchr","memmem","twoway","SuffixOrdering"],"kind":"enum"},"2:22733:32949":{"crate_id":2,"path":["core","num","dec2flt","FloatErrorKind"],"kind":"enum"},"17:12443:5557":{"crate_id":17,"path":["object","read","pe","resource","ResourceDirectory"],"kind":"struct"},"6:542:6910":{"crate_id":6,"path":["libc","unix","iovec"],"kind":"struct"},"24:1569:2992":{"crate_id":24,"path":["syn","parse","Unexpected"],"kind":"enum"},"11:396:5098":{"crate_id":11,"path":["hashbrown","raw","RawDrain"],"kind":"struct"},"16:2819:6431":{"crate_id":16,"path":["gimli","common","DebugTypeSignature"],"kind":"struct"},"2:43989:15762":{"crate_id":2,"path":["core","slice","iter","ChunksMut"],"kind":"struct"},"2:5025:10447":{"crate_id":2,"path":["core","io","borrowed_buf","BorrowedBuf"],"kind":"struct"},"17:11743:8474":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSubsubsection"],"kind":"struct"},"24:4180:3712":{"crate_id":24,"path":["syn","token","Not"],"kind":"struct"},"1:363:4579":{"crate_id":1,"path":["std","thread","scoped","ScopedJoinHandle"],"kind":"struct"},"2:22448:10695":{"crate_id":2,"path":["core","core_simd","simd","cmp","eq","SimdPartialEq"],"kind":"trait"},"16:6362:6454":{"crate_id":16,"path":["gimli","read","index","DebugTuIndex"],"kind":"struct"},"17:14260:5846":{"crate_id":17,"path":["object","macho","TwolevelHint"],"kind":"struct"},"24:4122:3708":{"crate_id":24,"path":["syn","token","Lt"],"kind":"struct"},"21:2539:4801":{"crate_id":21,"path":["proc_macro","bridge","ExpnGlobals"],"kind":"struct"},"5:3753:3546":{"crate_id":5,"path":["alloc","collections","linked_list","Cursor"],"kind":"struct"},"16:2641:6423":{"crate_id":16,"path":["gimli","common","RawRangeListsOffset"],"kind":"struct"},"20:783:26982":{"crate_id":20,"path":["proc_macro2","extra","DelimSpanEnum"],"kind":"enum"},"2:42413:3986":{"crate_id":2,"path":["core","panic","unwind_safe","RefUnwindSafe"],"kind":"trait"},"24:4624:3327":{"crate_id":24,"path":["syn","derive","DataEnum"],"kind":"struct"},"1:10498:4564":{"crate_id":1,"path":["std","sys","pal","unix","thread","Thread"],"kind":"struct"},"2:41128:3517":{"crate_id":2,"path":["core","iter","adapters","skip","Skip"],"kind":"struct"},"17:9755:22691":{"crate_id":17,"path":["object","common","AddressSize"],"kind":"enum"},"24:4494:2660":{"crate_id":24,"path":["syn","token","Brace"],"kind":"struct"},"2:42793:96":{"crate_id":2,"path":["core","sync","atomic","AtomicU64"],"kind":"struct"},"1:11575:10461":{"crate_id":1,"path":["std","sys_common","net","UdpSocket"],"kind":"struct"},"2:12336:8775":{"crate_id":2,"path":["core","str","iter","MatchesInternal"],"kind":"struct"},"2:44492:8723":{"crate_id":2,"path":["core","str","iter","EscapeUnicode"],"kind":"struct"},"2:12374:8692":{"crate_id":2,"path":["core","str","iter","SplitInclusive"],"kind":"struct"},"2:44895:8809":{"crate_id":2,"path":["core","str","CharEscapeUnicode"],"kind":"struct"},"6:1546:6966":{"crate_id":6,"path":["libc","unix","linux_like","addrinfo"],"kind":"struct"},"2:43752:8128":{"crate_id":2,"path":["core","slice","sort","TimSortRun"],"kind":"struct"},"24:4887:3350":{"crate_id":24,"path":["syn","expr","ExprGroup"],"kind":"struct"},"2:42412:3987":{"crate_id":2,"path":["core","panic","unwind_safe","UnwindSafe"],"kind":"trait"},"18:754:8458":{"crate_id":18,"path":["memchr","memmem","SearcherRev"],"kind":"struct"},"24:2602:3656":{"crate_id":24,"path":["syn","token","As"],"kind":"struct"},"2:9998:118":{"crate_id":2,"path":["core","fmt","macros","Debug"],"kind":"proc_derive"},"1:4716:7721":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt","st_atime"],"kind":"foreign_type"},"24:4883:3349":{"crate_id":24,"path":["syn","expr","ExprForLoop"],"kind":"struct"},"1:8920:10586":{"crate_id":1,"path":["std","sync","mpsc","TryIter"],"kind":"struct"},"5:4792:715":{"crate_id":5,"path":["alloc","fmt"],"kind":"module"},"1:3522:10403":{"crate_id":1,"path":["std","io","IoSliceMut"],"kind":"struct"},"2:1925:4727":{"crate_id":2,"path":["core","ptr","metadata","DynMetadata"],"kind":"struct"},"17:16138:6368":{"crate_id":17,"path":["object","xcoff","CsectAux32"],"kind":"struct"},"2:11038:15766":{"crate_id":2,"path":["core","slice","iter","RSplitMut"],"kind":"struct"},"17:15734:6267":{"crate_id":17,"path":["object","pe","ImageCoffSymbolsHeader"],"kind":"struct"},"1:723:151":{"crate_id":1,"path":["std","collections","hash","map","HashMap"],"kind":"struct"},"1:2438:10392":{"crate_id":1,"path":["std","fs","read_link"],"kind":"function"},"24:4448:3731":{"crate_id":24,"path":["syn","token","Star"],"kind":"struct"},"1:3356:10441":{"crate_id":1,"path":["std","io","stdio","StderrLock"],"kind":"struct"},"2:47247:8197":{"crate_id":2,"path":["core","core_arch","simd","i8x32"],"kind":"struct"},"6:4698:7248":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Phdr"],"kind":"struct"},"17:12557:5486":{"crate_id":17,"path":["object","read","xcoff","section","SectionTable"],"kind":"struct"},"2:44622:8792":{"crate_id":2,"path":["core","str","pattern","CharArrayRefSearcher"],"kind":"struct"},"17:16212:6388":{"crate_id":17,"path":["object","xcoff","BlockAux64"],"kind":"struct"},"2:34233:5307":{"crate_id":2,"path":["core","ops","bit","BitAnd"],"kind":"trait"},"6:1734:7081":{"crate_id":6,"path":["libc","unix","linux_like","sigevent"],"kind":"struct"},"1:1063:10330":{"crate_id":1,"path":["std","collections","hash","map","VacantEntry"],"kind":"struct"},"6:5004:7392":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_authinfo"],"kind":"struct"},"1:5581:10558":{"crate_id":1,"path":["std","process","Stdio"],"kind":"struct"},"17:13424:5667":{"crate_id":17,"path":["object","elf","Rela64"],"kind":"struct"},"16:6062:8567":{"crate_id":16,"path":["gimli","read","cfi","PointerEncodingParameters"],"kind":"struct"},"11:710:10078":{"crate_id":11,"path":["hashbrown","map","IntoKeys"],"kind":"struct"},"1:645:10315":{"crate_id":1,"path":["std","backtrace","BytesOrWide"],"kind":"enum"},"17:13308:5649":{"crate_id":17,"path":["object","elf","CompressionHeader64"],"kind":"struct"},"1:2035:194":{"crate_id":1,"path":["std","ffi","os_str","OsStr"],"kind":"struct"},"2:10641:10406":{"crate_id":2,"path":["core","slice","index","private_slice_index","Sealed"],"kind":"trait"},"2:4583:3576":{"crate_id":2,"path":["core","cell","RefMut"],"kind":"struct"},"2:39938:207":{"crate_id":2,"path":["core","ops","range","Range"],"kind":"struct"},"2:6584:3500":{"crate_id":2,"path":["core","iter","adapters","map_windows","MapWindows"],"kind":"struct"},"17:11042:22740":{"crate_id":17,"path":["object","read","archive","ArchiveMember"],"kind":"struct"},"2:40758:8718":{"crate_id":2,"path":["core","char","EscapeDefault"],"kind":"struct"},"6:489:6876":{"crate_id":6,"path":["libc","unix","timeval"],"kind":"struct"},"2:43520:8754":{"crate_id":2,"path":["core","hash","sip","SipHasher24"],"kind":"struct"},"16:5298:22632":{"crate_id":16,"path":["gimli","endianity","RunTimeEndian"],"kind":"enum"},"1:1596:8656":{"crate_id":1,"path":["std","collections","hash","set","Difference"],"kind":"struct"},"18:563:5351":{"crate_id":18,"path":["memchr","memmem","rarebytes","RareNeedleBytes"],"kind":"struct"},"16:7914:8636":{"crate_id":16,"path":["gimli","read","unit","EntriesRaw"],"kind":"struct"},"2:21324:33250":{"crate_id":2,"path":["core","core_simd","swizzle","rotate_elements_right","Rotate"],"kind":"struct"},"11:883:10328":{"crate_id":11,"path":["hashbrown","map","RawEntryBuilder"],"kind":"struct"},"2:4446:218":{"crate_id":2,"path":["core","cell","RefCell"],"kind":"struct"},"6:7651:7851":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_barrier_t"],"kind":"struct"},"2:22864:10474":{"crate_id":2,"path":["core","num","error","IntErrorKind"],"kind":"enum"},"1:6547:5194":{"crate_id":1,"path":["std","sync","once_lock","OnceLock"],"kind":"struct"},"16:8055:2745":{"crate_id":16,"path":["gimli","read","value","Value"],"kind":"enum"},"17:11075:5486":{"crate_id":17,"path":["object","read","coff","section","SectionTable"],"kind":"struct"},"17:10877:22724":{"crate_id":17,"path":["object","read","any","DynamicRelocationIterator"],"kind":"struct"},"6:4440:7150":{"crate_id":6,"path":["libc","unix","linux_like","linux","packet_mreq"],"kind":"struct"},"2:40739:8722":{"crate_id":2,"path":["core","char","decode","DecodeUtf16Error"],"kind":"struct"},"2:3183:2531":{"crate_id":2,"path":["core","ops","drop","Drop"],"kind":"trait"},"17:11419:5494":{"crate_id":17,"path":["object","read","elf","symbol","SymbolTable"],"kind":"struct"},"17:15624:6238":{"crate_id":17,"path":["object","pe","ImageAlpha64RuntimeFunctionEntry"],"kind":"struct"},"17:9807:22699":{"crate_id":17,"path":["object","common","SectionKind"],"kind":"enum"},"17:12408:5553":{"crate_id":17,"path":["object","read","pe","relocation","RelocationBlockIterator"],"kind":"struct"},"24:4938:3356":{"crate_id":24,"path":["syn","expr","ExprRange"],"kind":"struct"},"18:670:26974":{"crate_id":18,"path":["memchr","memmem","FindRevIter"],"kind":"struct"},"24:4045:3702":{"crate_id":24,"path":["syn","token","EqEq"],"kind":"struct"},"14:31:9840":{"crate_id":14,"path":["rustc_demangle","v0","Demangle"],"kind":"struct"},"5:7521:32919":{"crate_id":5,"path":["alloc","ffi","c_str","FromBytesWithNulErrorKind"],"kind":"enum"},"6:62:16169":{"crate_id":6,"path":["libc","unix","DIR"],"kind":"enum"},"17:10439:5477":{"crate_id":17,"path":["object","read","util","StringTable"],"kind":"struct"},"16:4355:6469":{"crate_id":16,"path":["gimli","constants","DwForm"],"kind":"struct"},"2:39863:4685":{"crate_id":2,"path":["core","ops","coroutine","CoroutineState"],"kind":"enum"},"17:4986:22915":{"crate_id":17,"path":["object","read","xcoff","relocation","XcoffRelocationIterator"],"kind":"struct"},"2:3801:3407":{"crate_id":2,"path":["core","array","iter","IntoIter"],"kind":"struct"},"16:3830:6465":{"crate_id":16,"path":["gimli","constants","DwCfa"],"kind":"struct"},"5:7508:8674":{"crate_id":5,"path":["alloc","ffi","c_str","NulError"],"kind":"struct"},"1:11331:5209":{"crate_id":1,"path":["std","sys_common","once","futex","CompletionGuard"],"kind":"struct"},"17:13187:5617":{"crate_id":17,"path":["object","elf","FileHeader32"],"kind":"struct"},"1:11395:8848":{"crate_id":1,"path":["std","sys_common","wtf8","Wtf8Buf"],"kind":"struct"},"2:32864:2006":{"crate_id":2,"path":["core","marker","Tuple"],"kind":"trait"},"5:2157:4554":{"crate_id":5,"path":["alloc","collections","btree","mem","replace","PanicGuard"],"kind":"struct"},"24:4520:2313":{"crate_id":24,"path":["syn","token","Paren"],"kind":"struct"},"1:9078:1974":{"crate_id":1,"path":["std","sync","mpmc","select","Token"],"kind":"struct"},"2:47011:8178":{"crate_id":2,"path":["core","core_arch","simd","u8x32"],"kind":"struct"},"2:40773:15817":{"crate_id":2,"path":["core","char","EscapeDebugInner"],"kind":"enum"},"17:11354:22777":{"crate_id":17,"path":["object","read","elf","segment","ElfSegment"],"kind":"struct"},"20:740:1980":{"crate_id":20,"path":["proc_macro2","fallback","Ident"],"kind":"struct"},"16:7706:22653":{"crate_id":16,"path":["gimli","read","unit","AttributeValue"],"kind":"enum"},"24:260:9838":{"crate_id":24,"path":["syn","attr","parsing","DisplayPath"],"kind":"struct"},"2:47165:8196":{"crate_id":2,"path":["core","core_arch","simd","u64x4"],"kind":"struct"},"17:9984:22716":{"crate_id":17,"path":["object","common","RelocationEncoding"],"kind":"enum"},"2:42520:90":{"crate_id":2,"path":["core","sync","atomic","AtomicI8"],"kind":"struct"},"1:4017:10475":{"crate_id":1,"path":["std","os","unix","ffi","os_str","OsStrExt"],"kind":"trait"},"2:3041:15862":{"crate_id":2,"path":["core","ops","async_function","AsyncFn"],"kind":"trait"},"6:588:6934":{"crate_id":6,"path":["libc","unix","servent"],"kind":"struct"},"16:6788:36008":{"crate_id":16,"path":["gimli","read","loclists","LocListsFormat"],"kind":"enum"},"2:4:1115":{"crate_id":2,"path":["core","panic"],"kind":"macro"},"2:40980:3497":{"crate_id":2,"path":["core","iter","adapters","copied","Copied"],"kind":"struct"},"17:11537:22791":{"crate_id":17,"path":["object","read","elf","note","NoteIterator"],"kind":"struct"},"2:1797:631":{"crate_id":2,"path":["core","mem","drop"],"kind":"function"},"17:11405:22775":{"crate_id":17,"path":["object","read","elf","section","ElfSection"],"kind":"struct"},"6:1496:6942":{"crate_id":6,"path":["libc","unix","linux_like","in_addr"],"kind":"struct"},"1:12019:9611":{"crate_id":1,"path":["std","backtrace_rs","symbolize","gimli","parse_running_mmaps","MapsEntry"],"kind":"struct"},"2:48466:8250":{"crate_id":2,"path":["core","core_arch","x86","__m512"],"kind":"struct"},"2:33440:5318":{"crate_id":2,"path":["core","ops","arith","Div"],"kind":"trait"},"21:140:4812":{"crate_id":21,"path":["proc_macro","bridge","client","Client"],"kind":"struct"},"17:11674:8469":{"crate_id":17,"path":["object","read","elf","version","VernauxIterator"],"kind":"struct"},"1:6725:230":{"crate_id":1,"path":["std","sync","rwlock","RwLock"],"kind":"struct"},"20:113:8437":{"crate_id":20,"path":["proc_macro2","rcvec","RcVec"],"kind":"struct"},"6:5955:7539":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","mallinfo2"],"kind":"struct"},"6:4529:7191":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_trigger"],"kind":"struct"},"1:5496:10556":{"crate_id":1,"path":["std","process","ChildStdout"],"kind":"struct"},"24:4843:3328":{"crate_id":24,"path":["syn","expr","ExprBinary"],"kind":"struct"},"6:501:6881":{"crate_id":6,"path":["libc","unix","rlimit"],"kind":"struct"},"6:1664:7052":{"crate_id":6,"path":["libc","unix","linux_like","arpreq"],"kind":"struct"},"2:34579:5306":{"crate_id":2,"path":["core","ops","bit","BitXor"],"kind":"trait"},"18:765:26972":{"crate_id":18,"path":["memchr","memmem","SearcherRevKind"],"kind":"enum"},"5:7477:3465":{"crate_id":5,"path":["alloc","collections","TryReserveErrorKind"],"kind":"enum"},"17:14529:5889":{"crate_id":17,"path":["object","macho","NoteCommand"],"kind":"struct"},"17:15944:5631":{"crate_id":17,"path":["object","xcoff","FileHeader64"],"kind":"struct"},"2:9951:223":{"crate_id":2,"path":["core","fmt","Result"],"kind":"type_alias"},"17:11583:22797":{"crate_id":17,"path":["object","read","elf","hash","GnuHashTable"],"kind":"struct"},"2:3010:4334":{"crate_id":2,"path":["core","marker","FnPtr"],"kind":"trait"},"6:4932:7347":{"crate_id":6,"path":["libc","unix","linux_like","linux","in6_ifreq"],"kind":"struct"},"1:6507:3474":{"crate_id":1,"path":["std","sync","once","Once"],"kind":"struct"},"1:3275:10443":{"crate_id":1,"path":["std","io","stdio","StdinLock"],"kind":"struct"},"5:1302:10329":{"crate_id":5,"path":["alloc","collections","btree","map","entry","OccupiedEntry"],"kind":"struct"},"2:2542:192":{"crate_id":2,"path":["core","cmp","Ord"],"kind":"trait"},"5:7466:3464":{"crate_id":5,"path":["alloc","collections","TryReserveError"],"kind":"struct"},"16:5897:22637":{"crate_id":16,"path":["gimli","read","cfi","CfaRule"],"kind":"enum"},"2:22699:7877":{"crate_id":2,"path":["core","num","dec2flt","number","Number"],"kind":"struct"},"21:961:4818":{"crate_id":21,"path":["proc_macro","bridge","client","FreeFunctions"],"kind":"struct"},"17:14356:5860":{"crate_id":17,"path":["object","macho","EncryptionInfoCommand64"],"kind":"struct"},"24:2738:115":{"crate_id":24,"path":["syn","token","Continue"],"kind":"struct"},"17:12422:8490":{"crate_id":17,"path":["object","read","pe","relocation","RelocationIterator"],"kind":"struct"},"1:10730:126":{"crate_id":1,"path":["std","sys","pal","unix","fs","DirBuilder"],"kind":"struct"},"5:6870:4782":{"crate_id":5,"path":["alloc","vec","set_len_on_drop","SetLenOnDrop"],"kind":"struct"},"6:4506:7183":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_keymap_entry"],"kind":"struct"},"17:13538:5693":{"crate_id":17,"path":["object","elf","Verneed"],"kind":"struct"},"21:2730:1968":{"crate_id":21,"path":["proc_macro","Group"],"kind":"struct"},"16:8012:8643":{"crate_id":16,"path":["gimli","read","unit","DebugTypesUnitHeadersIter"],"kind":"struct"},"2:7619:3471":{"crate_id":2,"path":["core","iter","sources","empty","Empty"],"kind":"struct"},"21:367:4803":{"crate_id":21,"path":["proc_macro","bridge","rpc","PanicMessage"],"kind":"enum"},"2:21971:10406":{"crate_id":2,"path":["core","core_simd","to_bytes","sealed","Sealed"],"kind":"trait"},"24:879:5311":{"crate_id":24,"path":["syn","ext","private","PeekFn"],"kind":"struct"},"17:15992:6340":{"crate_id":17,"path":["object","xcoff","AuxHeader64"],"kind":"struct"},"1:10241:112":{"crate_id":1,"path":["std","sys","pal","unix","process","process_common","Command"],"kind":"struct"},"6:4764:7265":{"crate_id":6,"path":["libc","unix","linux_like","linux","posix_spawnattr_t"],"kind":"struct"},"2:32866:113":{"crate_id":2,"path":["core","marker","ConstParamTy"],"kind":"trait"},"2:3378:15865":{"crate_id":2,"path":["core","ops","range","OneSidedRange"],"kind":"trait"},"17:15445:6173":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation64V2"],"kind":"struct"},"1:7994:27765":{"crate_id":1,"path":["std","io","buffered","linewritershim","LineWriterShim"],"kind":"struct"},"17:256:36054":{"crate_id":17,"path":["object","read","util","DebugByte"],"kind":"struct"},"2:38614:5324":{"crate_id":2,"path":["core","ops","bit","BitXorAssign"],"kind":"trait"},"6:1604:7004":{"crate_id":6,"path":["libc","unix","linux_like","lconv"],"kind":"struct"},"17:16187:6383":{"crate_id":17,"path":["object","xcoff","ExpAux"],"kind":"struct"},"18:608:36089":{"crate_id":18,"path":["memchr","memmem","twoway","Suffix"],"kind":"struct"},"16:7889:6651":{"crate_id":16,"path":["gimli","read","unit","AttrsIter"],"kind":"struct"},"1:1939:9856":{"crate_id":1,"path":["std","error","Report"],"kind":"struct"},"17:11825:22843":{"crate_id":17,"path":["object","read","macho","file","MachOFile"],"kind":"struct"},"2:3190:139":{"crate_id":2,"path":["core","ops","function","FnMut"],"kind":"trait"},"24:610:3407":{"crate_id":24,"path":["syn","error","IntoIter"],"kind":"struct"},"16:2459:6415":{"crate_id":16,"path":["gimli","common","DebugInfoOffset"],"kind":"struct"},"17:11865:22865":{"crate_id":17,"path":["object","read","macho","file","MachOComdatSectionIterator"],"kind":"struct"},"1:7800:10318":{"crate_id":1,"path":["std","backtrace","BacktraceStatus"],"kind":"enum"},"2:44121:8131":{"crate_id":2,"path":["core","str","error","Utf8Error"],"kind":"struct"},"24:5246:3377":{"crate_id":24,"path":["syn","mac","MacroDelimiter"],"kind":"enum"},"6:5982:7546":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_mmap_hdr"],"kind":"struct"},"5:3232:8657":{"crate_id":5,"path":["alloc","collections","btree","set","SymmetricDifference"],"kind":"struct"},"16:7998:6455":{"crate_id":16,"path":["gimli","read","unit","DebugTypes"],"kind":"struct"},"16:7491:6604":{"crate_id":16,"path":["gimli","read","rnglists","RawRange"],"kind":"struct"},"2:3399:15800":{"crate_id":2,"path":["core","ops","try_trait","Residual"],"kind":"trait"},"2:40750:8723":{"crate_id":2,"path":["core","char","EscapeUnicode"],"kind":"struct"},"17:11574:8658":{"crate_id":17,"path":["object","read","elf","hash","HashTable"],"kind":"struct"},"6:4449:7155":{"crate_id":6,"path":["libc","unix","linux_like","linux","cpu_set_t"],"kind":"struct"},"17:13999:5790":{"crate_id":17,"path":["object","macho","SubFrameworkCommand"],"kind":"struct"},"1:7985:8826":{"crate_id":1,"path":["std","hash","random","DefaultHasher"],"kind":"struct"},"2:42082:10455":{"crate_id":2,"path":["core","net","ip_addr","Ipv6MulticastScope"],"kind":"enum"},"1:12081:793":{"crate_id":1,"path":["std","i16"],"kind":"primitive"},"1:7729:4580":{"crate_id":1,"path":["std","thread","local","AccessError"],"kind":"struct"},"1:5906:5184":{"crate_id":1,"path":["std","sync","lazy_lock","LazyLock"],"kind":"struct"},"24:4250:3717":{"crate_id":24,"path":["syn","token","Percent"],"kind":"struct"},"24:3112:3677":{"crate_id":24,"path":["syn","token","Priv"],"kind":"struct"},"23:78:2049":{"crate_id":23,"path":["quote","to_tokens","ToTokens"],"kind":"trait"},"18:651:5345":{"crate_id":18,"path":["memchr","memmem","x86","sse","Forward"],"kind":"struct"},"23:272:2057":{"crate_id":23,"path":["quote","__private","push_lifetime","Lifetime"],"kind":"struct"},"6:4628:7243":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Ehdr"],"kind":"struct"},"6:4824:7295":{"crate_id":6,"path":["libc","unix","linux_like","linux","regmatch_t"],"kind":"struct"},"2:3222:3417":{"crate_id":2,"path":["core","ops","index","IndexMut"],"kind":"trait"},"2:43971:8694":{"crate_id":2,"path":["core","slice","iter","Windows"],"kind":"struct"},"17:10622:36072":{"crate_id":17,"path":["object","read","any","SectionIteratorInternal"],"kind":"enum"},"24:5162:2057":{"crate_id":24,"path":["syn","lifetime","Lifetime"],"kind":"function"},"5:1478:8653":{"crate_id":5,"path":["alloc","collections","btree","map","Keys"],"kind":"struct"},"17:15376:6157":{"crate_id":17,"path":["object","pe","ImageResourceDirectoryString"],"kind":"struct"},"17:11313:8462":{"crate_id":17,"path":["object","read","coff","import","ImportObjectData"],"kind":"struct"},"16:2439:6414":{"crate_id":16,"path":["gimli","common","DebugArangesOffset"],"kind":"struct"},"24:5216:3371":{"crate_id":24,"path":["syn","lit","LitBool"],"kind":"struct"},"24:3010:2365":{"crate_id":24,"path":["syn","token","Macro"],"kind":"struct"},"2:48405:8245":{"crate_id":2,"path":["core","core_arch","x86","__m128d"],"kind":"struct"},"2:21356:33257":{"crate_id":2,"path":["core","core_simd","swizzle","deinterleave","Even"],"kind":"struct"},"2:10014:3561":{"crate_id":2,"path":["core","fmt","UpperExp"],"kind":"trait"},"24:5129:2115":{"crate_id":24,"path":["syn","generics","WherePredicate"],"kind":"enum"},"17:15249:6119":{"crate_id":17,"path":["object","pe","ImageExportDirectory"],"kind":"struct"},"16:2769:6429":{"crate_id":16,"path":["gimli","common","DebugStrOffsetsIndex"],"kind":"struct"},"1:7221:31700":{"crate_id":1,"path":["std","sys_common","wstr","WStrUnits"],"kind":"struct"},"20:891:2048":{"crate_id":20,"path":["proc_macro2","TokenTree"],"kind":"enum"},"17:15748:6274":{"crate_id":17,"path":["object","pe","ImageDebugMisc"],"kind":"struct"},"16:5696:6496":{"crate_id":16,"path":["gimli","read","cfi","Augmentation"],"kind":"struct"},"1:1826:10339":{"crate_id":1,"path":["std","env","VarsOs"],"kind":"struct"},"5:2987:2223":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Owned"],"kind":"enum"},"1:951:10328":{"crate_id":1,"path":["std","collections","hash","map","RawEntryBuilder"],"kind":"struct"},"5:683:246":{"crate_id":5,"path":["alloc","borrow","ToOwned"],"kind":"trait"},"16:5846:22636":{"crate_id":16,"path":["gimli","read","cfi","UnwindTable"],"kind":"struct"},"2:47089:8194":{"crate_id":2,"path":["core","core_arch","simd","u16x16"],"kind":"struct"},"17:15760:6276":{"crate_id":17,"path":["object","pe","ImageFunctionEntry"],"kind":"struct"},"6:7556:7839":{"crate_id":6,"path":["libc","unix","linux_like","linux","arch","generic","termios2"],"kind":"struct"},"24:5558:3399":{"crate_id":24,"path":["syn","ty","TypeTuple"],"kind":"struct"},"1:7614:2061":{"crate_id":1,"path":["std","backtrace_rs","symbolize","Symbol"],"kind":"struct"},"6:5023:7400":{"crate_id":6,"path":["libc","unix","linux_like","linux","dirent"],"kind":"struct"},"24:5407:3381":{"crate_id":24,"path":["syn","path","ParenthesizedGenericArguments"],"kind":"struct"},"17:10317:5473":{"crate_id":17,"path":["object","endian","I32Bytes"],"kind":"struct"},"24:5115:2639":{"crate_id":24,"path":["syn","generics","TraitBound"],"kind":"struct"},"21:478:5090":{"crate_id":21,"path":["proc_macro","bridge","server","RunningSameThreadGuard"],"kind":"struct"},"6:7633:7848":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_cond_t"],"kind":"struct"},"2:44748:15788":{"crate_id":2,"path":["core","str","pattern","StrSearcherImpl"],"kind":"enum"},"24:4296:3720":{"crate_id":24,"path":["syn","token","PlusEq"],"kind":"struct"},"24:1525:2054":{"crate_id":24,"path":["syn","parse","ParseStream"],"kind":"type_alias"},"16:5346:6493":{"crate_id":16,"path":["gimli","read","util","sealed","CapacityFull"],"kind":"struct"},"11:430:35991":{"crate_id":11,"path":["hashbrown","raw","RawIterHash"],"kind":"struct"},"24:5206:3373":{"crate_id":24,"path":["syn","lit","LitByteStr"],"kind":"struct"},"6:563:6921":{"crate_id":6,"path":["libc","unix","linger"],"kind":"struct"},"1:4706:10480":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt"],"kind":"trait"},"2:44759:8796":{"crate_id":2,"path":["core","str","pattern","EmptyNeedle"],"kind":"struct"},"21:2387:2667":{"crate_id":21,"path":["proc_macro","bridge","Literal"],"kind":"struct"},"2:9039:3985":{"crate_id":2,"path":["core","panic","unwind_safe","AssertUnwindSafe"],"kind":"struct"},"17:15116:6087":{"crate_id":17,"path":["object","pe","ImageSymbolExBytes"],"kind":"struct"},"17:11392:22776":{"crate_id":17,"path":["object","read","elf","section","ElfSectionIterator"],"kind":"struct"},"20:680:3431":{"crate_id":20,"path":["proc_macro2","marker","ProcMacroAutoTraits"],"kind":"struct"},"2:2112:4686":{"crate_id":2,"path":["core","ptr","unique","Unique"],"kind":"struct"},"2:8363:3488":{"crate_id":2,"path":["core","iter","traits","marker","TrustedLen"],"kind":"trait"},"9:446:21619":{"crate_id":9,"path":["miniz_oxide","MZError"],"kind":"enum"},"17:12030:22831":{"crate_id":17,"path":["object","read","macho","segment","MachOSegmentIterator"],"kind":"struct"},"2:21339:33255":{"crate_id":2,"path":["core","core_simd","swizzle","interleave","Lo"],"kind":"struct"},"6:6781:7730":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statvfs64"],"kind":"struct"},"2:6595:4802":{"crate_id":2,"path":["core","iter","adapters","map_windows","Buffer"],"kind":"struct"},"17:12433:5554":{"crate_id":17,"path":["object","read","pe","relocation","Relocation"],"kind":"struct"},"17:13785:5758":{"crate_id":17,"path":["object","macho","FatArch64"],"kind":"struct"},"2:40989:3506":{"crate_id":2,"path":["core","iter","adapters","cycle","Cycle"],"kind":"struct"},"1:8628:8832":{"crate_id":1,"path":["std","path","StripPrefixError"],"kind":"struct"},"2:6395:3523":{"crate_id":2,"path":["core","iter","adapters","intersperse","IntersperseWith"],"kind":"struct"},"17:10155:5467":{"crate_id":17,"path":["object","endian","LittleEndian"],"kind":"struct"},"17:12584:22723":{"crate_id":17,"path":["object","read","xcoff","symbol","SymbolIterator"],"kind":"struct"},"2:47791:8234":{"crate_id":2,"path":["core","core_arch","simd","u8x64"],"kind":"struct"},"1:6624:10578":{"crate_id":1,"path":["std","sync","poison","TryLockError"],"kind":"enum"},"16:4937:6487":{"crate_id":16,"path":["gimli","constants","DwLne"],"kind":"struct"},"5:3211:34585":{"crate_id":5,"path":["alloc","collections","btree","set","DifferenceInner"],"kind":"enum"},"24:4878:3331":{"crate_id":24,"path":["syn","expr","ExprField"],"kind":"struct"},"24:3435:3688":{"crate_id":24,"path":["syn","token","While"],"kind":"struct"},"21:2281:1968":{"crate_id":21,"path":["proc_macro","bridge","Group"],"kind":"struct"},"6:4870:7318":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_filter"],"kind":"struct"},"24:4848:3344":{"crate_id":24,"path":["syn","expr","ExprBlock"],"kind":"struct"},"1:1887:10354":{"crate_id":1,"path":["std","env","ArgsOs"],"kind":"struct"},"11:875:10327":{"crate_id":11,"path":["hashbrown","map","RawVacantEntryMut"],"kind":"struct"},"1:8978:10583":{"crate_id":1,"path":["std","sync","mpsc","RecvTimeoutError"],"kind":"enum"},"20:827:1968":{"crate_id":20,"path":["proc_macro2","imp","Group"],"kind":"enum"},"24:5568:3386":{"crate_id":24,"path":["syn","ty","BareVariadic"],"kind":"struct"},"14:40:1980":{"crate_id":14,"path":["rustc_demangle","v0","Ident"],"kind":"struct"},"17:15456:6174":{"crate_id":17,"path":["object","pe","ImagePrologueDynamicRelocationHeader"],"kind":"struct"},"17:0:3175":{"crate_id":17,"path":["object"],"kind":"module"},"17:10818:22723":{"crate_id":17,"path":["object","read","any","SymbolIterator"],"kind":"struct"},"24:1173:8404":{"crate_id":24,"path":["syn","lit","LitFloatRepr"],"kind":"struct"},"24:4016:3701":{"crate_id":24,"path":["syn","token","DotDotEq"],"kind":"struct"},"2:41059:3522":{"crate_id":2,"path":["core","iter","adapters","intersperse","Intersperse"],"kind":"struct"},"1:3472:5127":{"crate_id":1,"path":["std","io","Guard"],"kind":"struct"},"1:415:182":{"crate_id":1,"path":["std","thread","local","LocalKey"],"kind":"struct"},"2:33919:5320":{"crate_id":2,"path":["core","ops","arith","SubAssign"],"kind":"trait"},"2:42873:98":{"crate_id":2,"path":["core","sync","atomic","AtomicUsize"],"kind":"struct"},"24:5353:200":{"crate_id":24,"path":["syn","path","Path"],"kind":"struct"},"17:12543:22906":{"crate_id":17,"path":["object","read","xcoff","section","XcoffSection"],"kind":"struct"},"1:12093:13":{"crate_id":1,"path":["std","fn"],"kind":"primitive"},"18:659:26973":{"crate_id":18,"path":["memchr","memmem","FindIter"],"kind":"struct"},"6:5015:7395":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_nl"],"kind":"struct"},"9:237:8124":{"crate_id":9,"path":["miniz_oxide","inflate","core","State"],"kind":"enum"},"24:1523:3420":{"crate_id":24,"path":["syn","parse","Parse"],"kind":"trait"},"17:14066:5800":{"crate_id":17,"path":["object","macho","DylinkerCommand"],"kind":"struct"},"2:4184:33140":{"crate_id":2,"path":["core","asserting","TryCaptureWithDebug"],"kind":"struct"},"24:5214:3375":{"crate_id":24,"path":["syn","lit","LitFloat"],"kind":"struct"},"2:11000:8693":{"crate_id":2,"path":["core","slice","iter","RSplit"],"kind":"struct"},"17:12107:5494":{"crate_id":17,"path":["object","read","macho","symbol","SymbolTable"],"kind":"struct"},"1:12080:796":{"crate_id":1,"path":["std","i8"],"kind":"primitive"},"1:4069:10479":{"crate_id":1,"path":["std","os","unix","fs","OpenOptionsExt"],"kind":"trait"},"1:6068:217":{"crate_id":1,"path":["std","sync","mpmc","counter","Receiver"],"kind":"struct"},"2:3029:5329":{"crate_id":2,"path":["core","ops","arith","Neg"],"kind":"trait"},"17:13959:5784":{"crate_id":17,"path":["object","macho","FvmlibCommand"],"kind":"struct"},"17:15078:6081":{"crate_id":17,"path":["object","pe","ImageSymbol"],"kind":"struct"},"1:4996:10535":{"crate_id":1,"path":["std","os","net","linux_ext","tcp","TcpStreamExt"],"kind":"trait"},"6:6700:7701":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","siginfo_t"],"kind":"struct"},"20:712:3427":{"crate_id":20,"path":["proc_macro2","fallback","LexError"],"kind":"struct"},"16:6376:8578":{"crate_id":16,"path":["gimli","read","index","UnitIndex"],"kind":"struct"},"2:32768:8715":{"crate_id":2,"path":["core","error","Source"],"kind":"struct"},"2:44591:8789":{"crate_id":2,"path":["core","str","pattern","MultiCharEqSearcher"],"kind":"struct"},"6:6813:7740":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_xmmreg"],"kind":"struct"},"5:7341:5114":{"crate_id":5,"path":["alloc","collections","binary_heap","DrainSorted"],"kind":"struct"},"6:4676:7246":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Sym"],"kind":"struct"},"6:5068:7419":{"crate_id":6,"path":["libc","unix","linux_like","linux","af_alg_iv"],"kind":"struct"},"2:2973:2511":{"crate_id":2,"path":["core","marker","PhantomData"],"kind":"struct"},"17:13797:5760":{"crate_id":17,"path":["object","macho","MachHeader32"],"kind":"struct"},"2:7913:3491":{"crate_id":2,"path":["core","iter","traits","collect","Extend"],"kind":"trait"},"11:2443:4778":{"crate_id":11,"path":["hashbrown","table","Drain"],"kind":"struct"},"17:15814:6286":{"crate_id":17,"path":["object","pe","ImageArchitectureEntry"],"kind":"struct"},"11:351:35987":{"crate_id":11,"path":["hashbrown","raw","FullBucketsIndices"],"kind":"struct"},"18:581:4348":{"crate_id":18,"path":["memchr","memmem","twoway","Reverse"],"kind":"struct"},"1:7936:8260":{"crate_id":1,"path":["std","fs","FileTimes"],"kind":"struct"},"17:12342:8482":{"crate_id":17,"path":["object","read","pe","import","ImportTable"],"kind":"struct"},"2:10463:5169":{"crate_id":2,"path":["core","slice","sort","merge_sort","RunVec"],"kind":"struct"},"24:861:3533":{"crate_id":24,"path":["syn","ext","IdentExt"],"kind":"trait"},"17:15646:6244":{"crate_id":17,"path":["object","pe","ImageRuntimeFunctionEntry"],"kind":"struct"},"1:4109:10481":{"crate_id":1,"path":["std","os","unix","fs","FileTypeExt"],"kind":"trait"},"17:11524:22819":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdatSectionIterator"],"kind":"struct"},"11:490:151":{"crate_id":11,"path":["hashbrown","map","HashMap"],"kind":"struct"},"0:964:1834":{"crate_id":0,"path":["serde_derive","Serialize"],"kind":"proc_derive"},"1:9457:136":{"crate_id":1,"path":["std","sys","pal","unix","fs","File"],"kind":"struct"},"17:12695:22908":{"crate_id":17,"path":["object","read","xcoff","segment","XcoffSegment"],"kind":"struct"},"2:11680:4725":{"crate_id":2,"path":["core","slice","raw","from_raw_parts"],"kind":"function"},"2:45138:9600":{"crate_id":2,"path":["core","task","wake","RawWaker"],"kind":"struct"},"17:12175:22886":{"crate_id":17,"path":["object","read","pe","file","PeFile"],"kind":"struct"},"17:9886:22713":{"crate_id":17,"path":["object","common","SymbolKind"],"kind":"enum"},"5:5404:15751":{"crate_id":5,"path":["alloc","slice","Concat"],"kind":"trait"},"10:44:6790":{"crate_id":10,"path":["adler","Adler32"],"kind":"struct"},"2:40949:3495":{"crate_id":2,"path":["core","iter","adapters","by_ref_sized","ByRefSized"],"kind":"struct"},"16:4399:6470":{"crate_id":16,"path":["gimli","constants","DwAte"],"kind":"struct"},"14:187:21715":{"crate_id":14,"path":["rustc_demangle","SizeLimitedFmtAdapter"],"kind":"struct"},"16:7270:6598":{"crate_id":16,"path":["gimli","read","op","Expression"],"kind":"struct"},"17:14855:6013":{"crate_id":17,"path":["object","pe","ImageFileHeader"],"kind":"struct"},"17:15356:6151":{"crate_id":17,"path":["object","pe","ImageResourceDirectory"],"kind":"struct"},"17:15039:6072":{"crate_id":17,"path":["object","pe","AnonObjectHeaderBigobj"],"kind":"struct"},"14:220:6735":{"crate_id":14,"path":["rustc_demangle","SizeLimitExhausted"],"kind":"struct"},"6:7668:7856":{"crate_id":6,"path":["libc","unix","linux_like","linux","canfd_frame"],"kind":"struct"},"17:15333:6143":{"crate_id":17,"path":["object","pe","ImageBoundForwarderRef"],"kind":"struct"},"1:939:10326":{"crate_id":1,"path":["std","collections","hash","map","RawOccupiedEntryMut"],"kind":"struct"},"20:906:1968":{"crate_id":20,"path":["proc_macro2","Group"],"kind":"struct"},"17:15281:6128":{"crate_id":17,"path":["object","pe","ImageThunkData32"],"kind":"struct"},"5:4426:5127":{"crate_id":5,"path":["alloc","collections","vec_deque","write_iter_wrapping","Guard"],"kind":"struct"},"17:12508:5562":{"crate_id":17,"path":["object","read","pe","rich","RichHeaderEntry"],"kind":"struct"},"2:10000:127":{"crate_id":2,"path":["core","fmt","Display"],"kind":"trait"},"2:44941:129":{"crate_id":2,"path":["core","time","Duration"],"kind":"struct"},"2:42050:8101":{"crate_id":2,"path":["core","net","ip_addr","Ipv4Addr"],"kind":"struct"},"2:39960:209":{"crate_id":2,"path":["core","ops","range","RangeFrom"],"kind":"struct"},"17:12056:5539":{"crate_id":17,"path":["object","read","macho","segment","MachOSegmentInternal"],"kind":"struct"},"1:5706:217":{"crate_id":1,"path":["std","sync","mpsc","Receiver"],"kind":"struct"},"16:5006:6489":{"crate_id":16,"path":["gimli","constants","DwMacro"],"kind":"struct"},"16:5825:8534":{"crate_id":16,"path":["gimli","read","cfi","UnwindContext"],"kind":"struct"},"2:46363:8153":{"crate_id":2,"path":["core","core_arch","simd","i32x2"],"kind":"struct"},"11:328:8650":{"crate_id":11,"path":["hashbrown","raw","RawIter"],"kind":"struct"},"16:7294:6599":{"crate_id":16,"path":["gimli","read","op","OperationIter"],"kind":"struct"},"6:5009:7394":{"crate_id":6,"path":["libc","unix","linux_like","linux","rlimit64"],"kind":"struct"},"17:14131:5806":{"crate_id":17,"path":["object","macho","SymtabCommand"],"kind":"struct"},"5:3702:5103":{"crate_id":5,"path":["alloc","collections","linked_list","drop","DropGuard"],"kind":"struct"},"1:4123:10483":{"crate_id":1,"path":["std","os","unix","fs","DirEntryExt2"],"kind":"trait"},"2:22771:32947":{"crate_id":2,"path":["core","num","flt2dec","decoder","FullDecoded"],"kind":"enum"},"6:6718:7710":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stat"],"kind":"struct"},"11:1025:10329":{"crate_id":11,"path":["hashbrown","map","OccupiedEntry"],"kind":"struct"},"17:15168:6102":{"crate_id":17,"path":["object","pe","ImageAuxSymbolWeak"],"kind":"struct"},"17:10887:36063":{"crate_id":17,"path":["object","read","any","DynamicRelocationIteratorInternal"],"kind":"enum"},"24:4891:3351":{"crate_id":24,"path":["syn","expr","ExprIf"],"kind":"struct"},"17:11898:5507":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandData"],"kind":"struct"},"17:10769:36073":{"crate_id":17,"path":["object","read","any","SymbolTableInternal"],"kind":"enum"},"2:45087:216":{"crate_id":2,"path":["core","future","ready","Ready"],"kind":"struct"},"6:1537:6960":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_in6"],"kind":"struct"},"1:2424:10389":{"crate_id":1,"path":["std","fs","symlink_metadata"],"kind":"function"},"16:4491:6473":{"crate_id":16,"path":["gimli","constants","DwEnd"],"kind":"struct"},"2:41535:3482":{"crate_id":2,"path":["core","iter","sources","repeat_with","RepeatWith"],"kind":"struct"},"17:11567:22821":{"crate_id":17,"path":["object","read","elf","note","GnuProperty"],"kind":"struct"},"20:817:2047":{"crate_id":20,"path":["proc_macro2","imp","Span"],"kind":"enum"},"16:6965:8332":{"crate_id":16,"path":["gimli","read","op","Operation"],"kind":"enum"},"21:2759:2046":{"crate_id":21,"path":["proc_macro","Spacing"],"kind":"enum"},"6:7657:7852":{"crate_id":6,"path":["libc","unix","linux_like","linux","can_frame"],"kind":"struct"},"5:4107:3412":{"crate_id":5,"path":["alloc","collections","vec_deque","iter_mut","IterMut"],"kind":"struct"},"1:4131:10485":{"crate_id":1,"path":["std","os","unix","fs","DirBuilderExt"],"kind":"trait"},"1:307:1588":{"crate_id":1,"path":["std","thread"],"kind":"module"},"6:6804:7737":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_fpxreg"],"kind":"struct"},"24:5402:2364":{"crate_id":24,"path":["syn","path","Constraint"],"kind":"struct"},"6:4480:7173":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_event"],"kind":"struct"},"17:11702:8471":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSubsectionIterator"],"kind":"struct"},"16:7971:22654":{"crate_id":16,"path":["gimli","read","unit","EntriesTreeNode"],"kind":"struct"},"5:1686:5103":{"crate_id":5,"path":["alloc","collections","btree","map","drop","DropGuard"],"kind":"struct"},"6:6837:7752":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user_regs_struct"],"kind":"struct"},"2:21684:10406":{"crate_id":2,"path":["core","core_simd","masks","sealed","Sealed"],"kind":"trait"},"16:2509:6417":{"crate_id":16,"path":["gimli","common","DebugLineStrOffset"],"kind":"struct"},"21:107:4809":{"crate_id":21,"path":["proc_macro","bridge","client","Bridge"],"kind":"struct"},"2:47435:8201":{"crate_id":2,"path":["core","core_arch","simd","f32x8"],"kind":"struct"},"17:15151:6097":{"crate_id":17,"path":["object","pe","ImageAuxSymbolFunctionBeginEnd"],"kind":"struct"},"16:7194:36016":{"crate_id":16,"path":["gimli","read","op","EvaluationWaiting"],"kind":"enum"},"6:4878:7322":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_fprog"],"kind":"struct"},"1:8213:3471":{"crate_id":1,"path":["std","io","util","Empty"],"kind":"struct"},"17:14111:5805":{"crate_id":17,"path":["object","macho","RoutinesCommand64"],"kind":"struct"},"5:4227:5127":{"crate_id":5,"path":["alloc","collections","vec_deque","into_iter","try_rfold","Guard"],"kind":"struct"},"16:7103:36044":{"crate_id":16,"path":["gimli","read","op","OperationEvaluationResult"],"kind":"enum"},"17:12949:5551":{"crate_id":17,"path":["object","read","Export"],"kind":"struct"},"16:5878:8498":{"crate_id":16,"path":["gimli","read","cfi","UnwindTableRow"],"kind":"struct"},"16:2573:6420":{"crate_id":16,"path":["gimli","common","DebugLocListsIndex"],"kind":"struct"},"2:40847:32919":{"crate_id":2,"path":["core","ffi","c_str","FromBytesWithNulErrorKind"],"kind":"enum"},"24:4998:2591":{"crate_id":24,"path":["syn","expr","Index"],"kind":"struct"},"6:6711:7706":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stack_t"],"kind":"struct"},"6:5992:7553":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","rtentry"],"kind":"struct"},"21:2432:2048":{"crate_id":21,"path":["proc_macro","bridge","TokenTree"],"kind":"enum"},"24:5434:1963":{"crate_id":24,"path":["syn","ty","Type"],"kind":"enum"},"5:3170:101":{"crate_id":5,"path":["alloc","collections","btree","set","BTreeSet"],"kind":"struct"},"11:2304:8624":{"crate_id":11,"path":["hashbrown","table","Entry"],"kind":"enum"},"1:11643:28066":{"crate_id":1,"path":["std","panicking","panic_count","MustAbort"],"kind":"enum"},"17:13211:5631":{"crate_id":17,"path":["object","elf","FileHeader64"],"kind":"struct"},"1:8265:3505":{"crate_id":1,"path":["std","io","Chain"],"kind":"struct"},"6:6228:7645":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","sysinfo"],"kind":"struct"},"24:5210:3374":{"crate_id":24,"path":["syn","lit","LitChar"],"kind":"struct"},"2:46341:8152":{"crate_id":2,"path":["core","core_arch","simd","i16x4"],"kind":"struct"},"24:4870:3347":{"crate_id":24,"path":["syn","expr","ExprConst"],"kind":"struct"},"17:12213:22897":{"crate_id":17,"path":["object","read","pe","file","PeComdatSectionIterator"],"kind":"struct"},"6:4388:7114":{"crate_id":6,"path":["libc","unix","linux_like","linux","dqblk"],"kind":"struct"},"14:7:9840":{"crate_id":14,"path":["rustc_demangle","legacy","Demangle"],"kind":"struct"},"24:1375:36255":{"crate_id":24,"path":["syn","lookahead","TokenMarker"],"kind":"enum"},"2:0:529":{"crate_id":2,"path":["core"],"kind":"module"},"24:4571:1994":{"crate_id":24,"path":["syn","data","Variant"],"kind":"struct"},"2:22388:10703":{"crate_id":2,"path":["core","core_simd","simd","ptr","mut_ptr","SimdMutPtr"],"kind":"trait"},"1:12078:689":{"crate_id":1,"path":["std","f32"],"kind":"primitive"},"11:364:5096":{"crate_id":11,"path":["hashbrown","raw","RawIntoIter"],"kind":"struct"},"16:4674:6478":{"crate_id":16,"path":["gimli","constants","DwAddr"],"kind":"struct"},"1:8382:8305":{"crate_id":1,"path":["std","os","unix","ucred","UCred"],"kind":"struct"},"24:4951:3358":{"crate_id":24,"path":["syn","expr","ExprReturn"],"kind":"struct"},"17:12683:22909":{"crate_id":17,"path":["object","read","xcoff","segment","XcoffSegmentIterator"],"kind":"struct"},"17:11634:8466":{"crate_id":17,"path":["object","read","elf","version","VerdefIterator"],"kind":"struct"},"17:10092:22718":{"crate_id":17,"path":["object","common","SymbolFlags"],"kind":"enum"},"2:7333:3504":{"crate_id":2,"path":["core","iter","adapters","zip","TrustedRandomAccessNoCoerce"],"kind":"trait"},"6:1501:6944":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreq"],"kind":"struct"},"17:12900:5586":{"crate_id":17,"path":["object","read","ObjectMapEntry"],"kind":"struct"},"2:48519:8253":{"crate_id":2,"path":["core","core_arch","x86","__m256bh"],"kind":"struct"},"20:808:36099":{"crate_id":20,"path":["proc_macro2","imp","TokenTreeIter"],"kind":"enum"},"15:327:10054":{"crate_id":15,"path":["addr2line","RangeAttributes"],"kind":"struct"},"17:11341:22778":{"crate_id":17,"path":["object","read","elf","segment","ElfSegmentIterator"],"kind":"struct"},"6:5104:7441":{"crate_id":6,"path":["libc","unix","linux_like","linux","ifreq"],"kind":"struct"},"17:12300:22899":{"crate_id":17,"path":["object","read","pe","export","ExportTarget"],"kind":"enum"},"21:2636:248":{"crate_id":21,"path":["proc_macro","TokenStream"],"kind":"struct"},"17:13922:5780":{"crate_id":17,"path":["object","macho","Section64"],"kind":"struct"},"17:12597:5564":{"crate_id":17,"path":["object","read","xcoff","symbol","XcoffSymbolTable"],"kind":"struct"},"16:4462:6472":{"crate_id":16,"path":["gimli","constants","DwDs"],"kind":"struct"},"2:2808:135":{"crate_id":2,"path":["core","error","Error"],"kind":"trait"},"2:45198:8820":{"crate_id":2,"path":["core","escape","EscapeIterInner"],"kind":"struct"},"17:10828:36079":{"crate_id":17,"path":["object","read","any","SymbolIteratorInternal"],"kind":"enum"},"6:6658:7677":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","sigaction"],"kind":"struct"},"2:40785:8725":{"crate_id":2,"path":["core","char","ToLowercase"],"kind":"struct"},"2:9150:15773":{"crate_id":2,"path":["core","panicking","assert_matches_failed","Pattern"],"kind":"struct"},"6:4841:7306":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_tp"],"kind":"struct"},"11:2231:8658":{"crate_id":11,"path":["hashbrown","table","HashTable"],"kind":"struct"},"1:4572:10510":{"crate_id":1,"path":["std","os","unix","process","ExitStatusExt"],"kind":"trait"},"17:11269:22767":{"crate_id":17,"path":["object","read","coff","import","ImportName"],"kind":"enum"},"16:3856:6466":{"crate_id":16,"path":["gimli","constants","DwChildren"],"kind":"struct"},"17:14012:5792":{"crate_id":17,"path":["object","macho","SubClientCommand"],"kind":"struct"},"2:46465:8157":{"crate_id":2,"path":["core","core_arch","simd","u8x16"],"kind":"struct"},"2:9659:10081":{"crate_id":2,"path":["core","fmt","builders","PadAdapterState"],"kind":"struct"},"2:23977:233":{"crate_id":2,"path":["core","num","saturating","Saturating"],"kind":"struct"},"2:22346:32684":{"crate_id":2,"path":["core","core_simd","simd","ptr","const_ptr","SimdConstPtr","with_addr"],"kind":"foreign_type"},"16:6141:36020":{"crate_id":16,"path":["gimli","read","dwarf","RangeIterInner"],"kind":"enum"},"6:1576:6985":{"crate_id":6,"path":["libc","unix","linux_like","tm"],"kind":"struct"},"6:4578:7218":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_rumble_effect"],"kind":"struct"},"2:44911:8813":{"crate_id":2,"path":["core","str","IsNotEmpty"],"kind":"struct"},"24:5564:3385":{"crate_id":24,"path":["syn","ty","BareFnArg"],"kind":"struct"},"1:5389:127":{"crate_id":1,"path":["std","path","Display"],"kind":"struct"},"2:21341:33259":{"crate_id":2,"path":["core","core_simd","swizzle","interleave","Hi"],"kind":"struct"},"24:5524:3389":{"crate_id":24,"path":["syn","ty","TypeGroup"],"kind":"struct"},"1:8878:8324":{"crate_id":1,"path":["std","process","ExitStatus"],"kind":"struct"},"16:7653:6615":{"crate_id":16,"path":["gimli","read","unit","UnitHeader"],"kind":"struct"},"2:12320:8772":{"crate_id":2,"path":["core","str","iter","MatchIndicesInternal"],"kind":"struct"},"17:4821:22910":{"crate_id":17,"path":["object","read","xcoff","symbol","XcoffSymbolIterator"],"kind":"struct"},"17:14051:5797":{"crate_id":17,"path":["object","macho","PreboundDylibCommand"],"kind":"struct"},"6:5867:7490":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","aiocb"],"kind":"struct"},"17:13412:5666":{"crate_id":17,"path":["object","elf","Rel64"],"kind":"struct"},"24:2585:3655":{"crate_id":24,"path":["syn","token","Abstract"],"kind":"struct"},"2:43305:74":{"crate_id":2,"path":["core","fmt","rt","Argument"],"kind":"struct"},"17:13173:5616":{"crate_id":17,"path":["object","archive","AixMemberOffset"],"kind":"struct"},"2:10965:15769":{"crate_id":2,"path":["core","slice","iter","SplitInclusiveMut"],"kind":"struct"},"17:12201:22896":{"crate_id":17,"path":["object","read","pe","file","PeComdat"],"kind":"struct"},"24:3044:3673":{"crate_id":24,"path":["syn","token","Mod"],"kind":"struct"},"6:4860:7314":{"crate_id":6,"path":["libc","unix","linux_like","linux","j1939_filter"],"kind":"struct"},"19:0:1132":{"crate_id":19,"path":["panic_unwind"],"kind":"module"},"2:46541:8165":{"crate_id":2,"path":["core","core_arch","simd","u32x4"],"kind":"struct"},"17:15778:6282":{"crate_id":17,"path":["object","pe","ImageSeparateDebugHeader"],"kind":"struct"},"1:2657:5178":{"crate_id":1,"path":["std","io","buffered","bufwriter","BufWriter"],"kind":"struct"},"6:654:16580":{"crate_id":6,"path":["libc","unix","linux_like","timezone"],"kind":"enum"},"2:44059:15756":{"crate_id":2,"path":["core","slice","iter","ArrayChunksMut"],"kind":"struct"},"24:3027:2666":{"crate_id":24,"path":["syn","token","Match"],"kind":"struct"},"6:4947:7353":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_initmsg"],"kind":"struct"},"1:9099:27117":{"crate_id":1,"path":["std","sync","mpmc","select","Selected"],"kind":"enum"},"9:52:10058":{"crate_id":9,"path":["miniz_oxide","inflate","core","DecompressorOxide"],"kind":"struct"},"24:936:36404":{"crate_id":24,"path":["syn","generics","ConstParams"],"kind":"struct"},"2:42715:95":{"crate_id":2,"path":["core","sync","atomic","AtomicU32"],"kind":"struct"},"6:1570:6983":{"crate_id":6,"path":["libc","unix","linux_like","fd_set"],"kind":"struct"},"2:4450:3565":{"crate_id":2,"path":["core","cell","BorrowError"],"kind":"struct"},"16:6773:6554":{"crate_id":16,"path":["gimli","read","loclists","LocationLists"],"kind":"struct"},"17:12251:22872":{"crate_id":17,"path":["object","read","pe","section","PeSectionIterator"],"kind":"struct"},"5:1151:35857":{"crate_id":5,"path":["alloc","collections","btree","dedup_sorted_iter","DedupSortedIter"],"kind":"struct"},"2:31052:32931":{"crate_id":2,"path":["core","ptr","alignment","AlignmentEnum32"],"kind":"enum"},"2:21695:7874":{"crate_id":2,"path":["core","core_simd","masks","Mask"],"kind":"struct"},"17:13899:5775":{"crate_id":17,"path":["object","macho","Section32"],"kind":"struct"},"16:2355:6410":{"crate_id":16,"path":["gimli","common","Register"],"kind":"struct"},"2:36628:3727":{"crate_id":2,"path":["core","ops","bit","Shr"],"kind":"trait"},"2:44081:15765":{"crate_id":2,"path":["core","slice","iter","RChunksMut"],"kind":"struct"},"2:10012:3560":{"crate_id":2,"path":["core","fmt","LowerExp"],"kind":"trait"},"17:16223:6390":{"crate_id":17,"path":["object","xcoff","StatAux"],"kind":"struct"},"5:4035:4778":{"crate_id":5,"path":["alloc","collections","vec_deque","drain","Drain"],"kind":"struct"},"1:12089:1638":{"crate_id":1,"path":["std","u128"],"kind":"primitive"},"16:2375:6411":{"crate_id":16,"path":["gimli","common","DebugAbbrevOffset"],"kind":"struct"},"2:26377:262":{"crate_id":2,"path":["core","num","wrapping","Wrapping"],"kind":"struct"},"23:239:4268":{"crate_id":23,"path":["quote","__private","get_span","GetSpanInner"],"kind":"struct"},"1:7747:4565":{"crate_id":1,"path":["std","thread","Builder"],"kind":"struct"},"2:44072:8698":{"crate_id":2,"path":["core","slice","iter","RChunks"],"kind":"struct"},"6:5033:7406":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_alg"],"kind":"struct"},"2:40038:3458":{"crate_id":2,"path":["core","ops","range","Bound"],"kind":"enum"},"2:1992:186":{"crate_id":2,"path":["core","ptr","non_null","NonNull"],"kind":"struct"},"16:4572:6476":{"crate_id":16,"path":["gimli","constants","DwVirtuality"],"kind":"struct"},"18:538:5349":{"crate_id":18,"path":["memchr","memmem","rabinkarp","NeedleHash"],"kind":"struct"},"5:4065:5103":{"crate_id":5,"path":["alloc","collections","vec_deque","drain","drop","DropGuard"],"kind":"struct"},"2:46908:8176":{"crate_id":2,"path":["core","core_arch","simd","m32x4"],"kind":"struct"},"17:12127:5543":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbolTable"],"kind":"struct"},"16:4433:6471":{"crate_id":16,"path":["gimli","constants","DwLle"],"kind":"struct"},"16:2729:6427":{"crate_id":16,"path":["gimli","common","DebugStrOffset"],"kind":"struct"},"2:44769:8800":{"crate_id":2,"path":["core","str","pattern","TwoWaySearcher"],"kind":"struct"},"6:4783:7273":{"crate_id":6,"path":["libc","unix","linux_like","linux","in6_pktinfo"],"kind":"struct"},"2:48542:8254":{"crate_id":2,"path":["core","core_arch","x86","__m512bh"],"kind":"struct"},"5:1287:10330":{"crate_id":5,"path":["alloc","collections","btree","map","entry","VacantEntry"],"kind":"struct"},"24:2619:3657":{"crate_id":24,"path":["syn","token","Async"],"kind":"struct"},"11:1051:10330":{"crate_id":11,"path":["hashbrown","map","VacantEntry"],"kind":"struct"},"5:7560:5134":{"crate_id":5,"path":["alloc","rc","UniqueRc"],"kind":"struct"},"24:4839:3343":{"crate_id":24,"path":["syn","expr","ExprAwait"],"kind":"struct"},"17:14575:5554":{"crate_id":17,"path":["object","macho","Relocation"],"kind":"struct"},"1:10898:8326":{"crate_id":1,"path":["std","sys","pal","unix","process","process_common","ExitCode"],"kind":"struct"},"17:13568:5705":{"crate_id":17,"path":["object","elf","NoteHeader32"],"kind":"struct"},"2:38669:5327":{"crate_id":2,"path":["core","ops","bit","ShlAssign"],"kind":"trait"},"24:5047:2534":{"crate_id":24,"path":["syn","generics","GenericParam"],"kind":"enum"},"1:10711:8260":{"crate_id":1,"path":["std","sys","pal","unix","fs","FileTimes"],"kind":"struct"},"2:10219:154":{"crate_id":2,"path":["core","hash","Hasher"],"kind":"trait"},"2:46311:8151":{"crate_id":2,"path":["core","core_arch","simd","i8x8"],"kind":"struct"},"4:0:3166":{"crate_id":4,"path":["rustc_std_workspace_core"],"kind":"module"},"11:844:10325":{"crate_id":11,"path":["hashbrown","map","RawEntryMut"],"kind":"enum"},"9:391:21620":{"crate_id":9,"path":["miniz_oxide","MZFlush"],"kind":"enum"},"17:13674:5717":{"crate_id":17,"path":["object","macho","DyldCacheHeader"],"kind":"struct"},"24:2823:3664":{"crate_id":24,"path":["syn","token","Else"],"kind":"struct"},"16:5794:8528":{"crate_id":16,"path":["gimli","read","cfi","FrameDescriptionEntry"],"kind":"struct"},"24:4004:3700":{"crate_id":24,"path":["syn","token","DotDotDot"],"kind":"struct"},"16:6646:8606":{"crate_id":16,"path":["gimli","read","line","IncompleteLineProgram"],"kind":"struct"},"2:44458:8781":{"crate_id":2,"path":["core","str","iter","SplitAsciiWhitespace"],"kind":"struct"},"1:10866:10558":{"crate_id":1,"path":["std","sys","pal","unix","process","process_common","Stdio"],"kind":"enum"},"18:521:26975":{"crate_id":18,"path":["memchr","memmem","prefilter","Prefilter"],"kind":"enum"},"21:2340:1980":{"crate_id":21,"path":["proc_macro","bridge","Ident"],"kind":"struct"},"2:48245:8239":{"crate_id":2,"path":["core","core_arch","simd","f32x16"],"kind":"struct"},"24:4139:3709":{"crate_id":24,"path":["syn","token","Minus"],"kind":"struct"},"2:46687:8169":{"crate_id":2,"path":["core","core_arch","simd","i32x4"],"kind":"struct"},"1:1578:3407":{"crate_id":1,"path":["std","collections","hash","set","IntoIter"],"kind":"struct"},"2:42268:8111":{"crate_id":2,"path":["core","net","socket_addr","SocketAddrV6"],"kind":"struct"},"17:11467:5501":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbol"],"kind":"struct"},"6:4800:7283":{"crate_id":6,"path":["libc","unix","linux_like","linux","inotify_event"],"kind":"struct"},"16:3406:6460":{"crate_id":16,"path":["gimli","arch","RiscV"],"kind":"struct"},"2:5776:5127":{"crate_id":2,"path":["core","iter","adapters","filter_map","next_chunk","Guard"],"kind":"struct"},"17:9737:22693":{"crate_id":17,"path":["object","common","SubArchitecture"],"kind":"enum"},"16:6331:8577":{"crate_id":16,"path":["gimli","read","aranges","ArangeEntry"],"kind":"struct"},"17:10137:22692":{"crate_id":17,"path":["object","endian","Endianness"],"kind":"enum"},"24:4971:3361":{"crate_id":24,"path":["syn","expr","ExprTuple"],"kind":"struct"},"17:15206:6111":{"crate_id":17,"path":["object","pe","ImageLinenumber"],"kind":"struct"},"6:7604:7841":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_rwlockattr_t"],"kind":"struct"},"5:1388:100":{"crate_id":5,"path":["alloc","collections","btree","map","BTreeMap"],"kind":"struct"},"5:634:9847":{"crate_id":5,"path":["alloc","boxed","from","StringError"],"kind":"struct"},"1:4061:10478":{"crate_id":1,"path":["std","os","unix","fs","PermissionsExt"],"kind":"trait"},"24:5204:2188":{"crate_id":24,"path":["syn","lit","LitStr"],"kind":"struct"},"1:640:10314":{"crate_id":1,"path":["std","backtrace","BacktraceSymbol"],"kind":"struct"},"1:7684:5202":{"crate_id":1,"path":["std","backtrace_rs","Bomb"],"kind":"struct"},"6:5146:7456":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_can_addr"],"kind":"union"},"2:44101:15764":{"crate_id":2,"path":["core","slice","iter","RChunksExactMut"],"kind":"struct"},"16:2617:6422":{"crate_id":16,"path":["gimli","common","DebugMacroOffset"],"kind":"struct"},"17:15383:6158":{"crate_id":17,"path":["object","pe","ImageResourceDirStringU"],"kind":"struct"},"24:4963:3359":{"crate_id":24,"path":["syn","expr","ExprTry"],"kind":"struct"},"17:14402:5867":{"crate_id":17,"path":["object","macho","BuildToolVersion"],"kind":"struct"},"6:5829:7463":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","statx"],"kind":"struct"},"1:9027:10085":{"crate_id":1,"path":["std","sync","mpmc","array","ArrayToken"],"kind":"struct"},"17:11227:22743":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdat"],"kind":"struct"},"17:12671:22938":{"crate_id":17,"path":["object","read","xcoff","comdat","XcoffComdatSectionIterator"],"kind":"struct"},"17:12454:8492":{"crate_id":17,"path":["object","read","pe","resource","ResourceDirectoryTable"],"kind":"struct"},"11:2554:35986":{"crate_id":11,"path":["hashbrown","raw","Fallibility"],"kind":"enum"},"2:7995:3490":{"crate_id":2,"path":["core","iter","traits","exact_size","ExactSizeIterator"],"kind":"trait"},"11:2124:8624":{"crate_id":11,"path":["hashbrown","set","Entry"],"kind":"enum"},"2:43260:3551":{"crate_id":2,"path":["core","fmt","rt","Alignment"],"kind":"enum"},"1:1040:8624":{"crate_id":1,"path":["std","collections","hash","map","Entry"],"kind":"enum"},"1:8083:10089":{"crate_id":1,"path":["std","io","error","Custom"],"kind":"struct"},"6:6898:7795":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ipc_perm"],"kind":"struct"},"1:12074:1538":{"crate_id":1,"path":["std","str"],"kind":"primitive"},"2:48489:8251":{"crate_id":2,"path":["core","core_arch","x86","__m512d"],"kind":"struct"},"1:928:10325":{"crate_id":1,"path":["std","collections","hash","map","RawEntryMut"],"kind":"enum"},"2:40999:3507":{"crate_id":2,"path":["core","iter","adapters","enumerate","Enumerate"],"kind":"struct"},"2:48394:8244":{"crate_id":2,"path":["core","core_arch","x86","__m128"],"kind":"struct"},"2:10927:15763":{"crate_id":2,"path":["core","slice","iter","SplitMut"],"kind":"struct"},"2:2440:104":{"crate_id":2,"path":["core","borrow","BorrowMut"],"kind":"trait"},"1:4261:10505":{"crate_id":1,"path":["std","os","unix","net","ancillary","Messages"],"kind":"struct"},"2:44899:8810":{"crate_id":2,"path":["core","str","CharEscapeDefault"],"kind":"struct"},"18:113:26962":{"crate_id":18,"path":["memchr","memchr","iter","Memchr3"],"kind":"struct"},"1:8904:8326":{"crate_id":1,"path":["std","process","ExitCode"],"kind":"struct"},"2:4630:3578":{"crate_id":2,"path":["core","cell","SyncUnsafeCell"],"kind":"struct"},"16:4283:6468":{"crate_id":16,"path":["gimli","constants","DwAt"],"kind":"struct"},"17:16105:6361":{"crate_id":17,"path":["object","xcoff","FileAux32"],"kind":"struct"},"20:746:2667":{"crate_id":20,"path":["proc_macro2","fallback","Literal"],"kind":"struct"},"2:1804:4637":{"crate_id":2,"path":["core","mem","Discriminant"],"kind":"struct"},"2:46178:8146":{"crate_id":2,"path":["core","core_arch","simd","i16x2"],"kind":"struct"},"16:6292:8574":{"crate_id":16,"path":["gimli","read","aranges","ArangeHeader"],"kind":"struct"},"6:574:6926":{"crate_id":6,"path":["libc","unix","itimerval"],"kind":"struct"},"20:777:3430":{"crate_id":20,"path":["proc_macro2","extra","DelimSpan"],"kind":"struct"},"24:4604:1824":{"crate_id":24,"path":["syn","derive","DeriveInput"],"kind":"struct"},"24:4028:132":{"crate_id":24,"path":["syn","token","Eq"],"kind":"struct"},"17:12225:22874":{"crate_id":17,"path":["object","read","pe","section","PeSegmentIterator"],"kind":"struct"},"2:44325:8773":{"crate_id":2,"path":["core","str","iter","MatchIndices"],"kind":"struct"},"2:44576:8783":{"crate_id":2,"path":["core","str","pattern","CharSearcher"],"kind":"struct"},"1:3240:27777":{"crate_id":1,"path":["std","io","stdio","StderrRaw"],"kind":"struct"},"6:4789:7276":{"crate_id":6,"path":["libc","unix","linux_like","linux","arpd_request"],"kind":"struct"},"6:6961:7818":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ucontext_t"],"kind":"struct"},"6:548:6913":{"crate_id":6,"path":["libc","unix","pollfd"],"kind":"struct"},"5:1024:5103":{"crate_id":5,"path":["alloc","collections","binary_heap","drop","DropGuard"],"kind":"struct"},"6:4939:1102":{"crate_id":6,"path":["libc","unix","linux_like","linux","option"],"kind":"struct"},"23:150:4007":{"crate_id":23,"path":["quote","__private","ThereIsNoIteratorInRepetition"],"kind":"struct"},"17:11367:5486":{"crate_id":17,"path":["object","read","elf","section","SectionTable"],"kind":"struct"},"2:12578:15774":{"crate_id":2,"path":["core","str","pattern","ReverseSearcher"],"kind":"trait"},"2:10448:5165":{"crate_id":2,"path":["core","slice","sort","merge_sort","BufGuard"],"kind":"struct"},"24:3401:3686":{"crate_id":24,"path":["syn","token","Virtual"],"kind":"struct"},"24:3197:3680":{"crate_id":24,"path":["syn","token","SelfValue"],"kind":"struct"},"5:7594:9848":{"crate_id":5,"path":["alloc","string","FromUtf16Error"],"kind":"struct"},"17:15390:6159":{"crate_id":17,"path":["object","pe","ImageResourceDataEntry"],"kind":"struct"},"14:160:9840":{"crate_id":14,"path":["rustc_demangle","Demangle"],"kind":"struct"},"17:15418:6166":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation32"],"kind":"struct"},"17:12969:5589":{"crate_id":17,"path":["object","read","CodeView"],"kind":"struct"},"24:4947:3357":{"crate_id":24,"path":["syn","expr","ExprRepeat"],"kind":"struct"},"24:1169:8402":{"crate_id":24,"path":["syn","lit","LitIntRepr"],"kind":"struct"},"2:22833:8708":{"crate_id":2,"path":["core","num","fmt","Formatted"],"kind":"struct"},"17:9858:22712":{"crate_id":17,"path":["object","common","ComdatKind"],"kind":"enum"},"17:16151:6374":{"crate_id":17,"path":["object","xcoff","CsectAux64"],"kind":"struct"},"17:16198:6384":{"crate_id":17,"path":["object","xcoff","BlockAux32"],"kind":"struct"},"16:6431:6442":{"crate_id":16,"path":["gimli","read","line","DebugLine"],"kind":"struct"},"20:984:3407":{"crate_id":20,"path":["proc_macro2","token_stream","IntoIter"],"kind":"struct"},"17:14933:6056":{"crate_id":17,"path":["object","pe","ImageOptionalHeader64"],"kind":"struct"},"23:407:4147":{"crate_id":23,"path":["quote","__private","RepInterp"],"kind":"struct"},"16:7444:22649":{"crate_id":16,"path":["gimli","read","rnglists","RawRngListIter"],"kind":"struct"},"2:12789:118":{"crate_id":2,"path":["core","str","lossy","Debug"],"kind":"struct"},"24:1652:3545":{"crate_id":24,"path":["syn","parse","Nothing"],"kind":"struct"},"24:4922:3334":{"crate_id":24,"path":["syn","expr","ExprMethodCall"],"kind":"struct"},"17:3264:22829":{"crate_id":17,"path":["object","read","macho","section","MachOSectionIterator"],"kind":"struct"},"6:4666:7245":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Sym"],"kind":"struct"},"1:3273:10442":{"crate_id":1,"path":["std","io","stdio","Stdin"],"kind":"struct"},"17:597:2061":{"crate_id":17,"path":["object","read","any","Symbol"],"kind":"struct"},"21:2710:3594":{"crate_id":21,"path":["proc_macro","SourceFile"],"kind":"struct"},"2:39248:5328":{"crate_id":2,"path":["core","ops","bit","ShrAssign"],"kind":"trait"},"16:2284:21747":{"crate_id":16,"path":["gimli","common","Format"],"kind":"enum"},"1:6151:5185":{"crate_id":1,"path":["std","sync","mpmc","list","Channel"],"kind":"struct"},"5:7361:34372":{"crate_id":5,"path":["alloc","collections","btree","merge_iter","Peeked"],"kind":"enum"},"1:10167:10562":{"crate_id":1,"path":["std","sys","pal","unix","pipe","AnonPipe"],"kind":"struct"},"21:1023:3594":{"crate_id":21,"path":["proc_macro","bridge","client","SourceFile"],"kind":"struct"},"24:2891:138":{"crate_id":24,"path":["syn","token","Fn"],"kind":"struct"},"2:42414:4702":{"crate_id":2,"path":["core","panicking","AssertKind"],"kind":"enum"},"17:15463:6176":{"crate_id":17,"path":["object","pe","ImageEpilogueDynamicRelocationHeader"],"kind":"struct"},"24:4238:3716":{"crate_id":24,"path":["syn","token","PathSep"],"kind":"struct"},"16:7595:6441":{"crate_id":16,"path":["gimli","read","unit","DebugInfo"],"kind":"struct"},"5:2990:7867":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Immut"],"kind":"struct"},"17:10710:22722":{"crate_id":17,"path":["object","read","any","ComdatSectionIterator"],"kind":"struct"},"17:16032:5634":{"crate_id":17,"path":["object","xcoff","SectionHeader32"],"kind":"struct"},"24:5515:3388":{"crate_id":24,"path":["syn","ty","TypeBareFn"],"kind":"struct"},"6:4496:7177":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_absinfo"],"kind":"struct"},"20:725:2047":{"crate_id":20,"path":["proc_macro2","fallback","Span"],"kind":"struct"},"6:1528:6955":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_in"],"kind":"struct"},"5:7571:240":{"crate_id":5,"path":["alloc","string","String"],"kind":"struct"},"1:5045:3975":{"crate_id":1,"path":["std","panic","always_abort"],"kind":"function"},"24:944:36408":{"crate_id":24,"path":["syn","generics","ConstParamsMut"],"kind":"struct"},"24:4620:2197":{"crate_id":24,"path":["syn","derive","DataStruct"],"kind":"struct"},"2:3388:250":{"crate_id":2,"path":["core","ops","try_trait","Try"],"kind":"trait"},"16:5726:8520":{"crate_id":16,"path":["gimli","read","cfi","CommonInformationEntry"],"kind":"struct"},"2:22722:8706":{"crate_id":2,"path":["core","num","dec2flt","ParseFloatError"],"kind":"struct"},"1:9152:232":{"crate_id":1,"path":["std","sync","rwlock","RwLockWriteGuard"],"kind":"struct"},"6:596:6938":{"crate_id":6,"path":["libc","unix","protoent"],"kind":"struct"},"2:40958:3505":{"crate_id":2,"path":["core","iter","adapters","chain","Chain"],"kind":"struct"},"2:44915:8814":{"crate_id":2,"path":["core","str","BytesIsNotEmpty"],"kind":"struct"},"17:261:36071":{"crate_id":17,"path":["object","read","util","DebugLen"],"kind":"struct"},"11:1007:8624":{"crate_id":11,"path":["hashbrown","map","Entry"],"kind":"enum"},"1:8993:10585":{"crate_id":1,"path":["std","sync","mpsc","TrySendError"],"kind":"enum"},"17:14912:6051":{"crate_id":17,"path":["object","pe","ImageRomOptionalHeader"],"kind":"struct"},"17:3473:22832":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbolIterator"],"kind":"struct"},"1:2982:5181":{"crate_id":1,"path":["std","io","error","repr_bitpacked","Repr"],"kind":"struct"},"17:13252:5634":{"crate_id":17,"path":["object","elf","SectionHeader32"],"kind":"struct"},"11:800:4778":{"crate_id":11,"path":["hashbrown","map","Drain"],"kind":"struct"},"1:6511:10575":{"crate_id":1,"path":["std","sync","once","OnceState"],"kind":"struct"},"18:531:8442":{"crate_id":18,"path":["memchr","memmem","prefilter","PrefilterState"],"kind":"struct"},"17:15176:6105":{"crate_id":17,"path":["object","pe","ImageAuxSymbolSection"],"kind":"struct"},"2:2437:103":{"crate_id":2,"path":["core","borrow","Borrow"],"kind":"trait"},"17:11688:8470":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSection"],"kind":"struct"},"11:2562:6787":{"crate_id":11,"path":["hashbrown","raw","TableLayout"],"kind":"struct"},"5:5408:15752":{"crate_id":5,"path":["alloc","slice","Join"],"kind":"trait"},"5:786:102":{"crate_id":5,"path":["alloc","collections","binary_heap","BinaryHeap"],"kind":"struct"},"2:48504:8252":{"crate_id":2,"path":["core","core_arch","x86","__m128bh"],"kind":"struct"},"24:5426:3383":{"crate_id":24,"path":["syn","restriction","VisRestricted"],"kind":"struct"}},"external_crates":{"23":{"name":"quote","html_root_url":"https://docs.rs/quote/1.0.35/"},"20":{"name":"proc_macro2","html_root_url":"https://docs.rs/proc-macro2/1.0.78/"},"17":{"name":"object","html_root_url":"https://doc.rust-lang.org/nightly/"},"14":{"name":"rustc_demangle","html_root_url":"https://doc.rust-lang.org/nightly/"},"11":{"name":"hashbrown","html_root_url":"https://doc.rust-lang.org/nightly/"},"8":{"name":"cfg_if","html_root_url":"https://docs.rs/cfg-if/"},"5":{"name":"alloc","html_root_url":"https://doc.rust-lang.org/nightly/"},"2":{"name":"core","html_root_url":"https://doc.rust-lang.org/nightly/"},"22":{"name":"unicode_ident","html_root_url":"https://docs.rs/unicode-ident/1.0.12/"},"19":{"name":"panic_unwind","html_root_url":"https://doc.rust-lang.org/nightly/"},"16":{"name":"gimli","html_root_url":"https://doc.rust-lang.org/nightly/"},"13":{"name":"std_detect","html_root_url":"https://doc.rust-lang.org/nightly/"},"10":{"name":"adler","html_root_url":"https://docs.rs/adler/1.0.2/"},"7":{"name":"unwind","html_root_url":"https://doc.rust-lang.org/nightly/"},"4":{"name":"rustc_std_workspace_core","html_root_url":"https://doc.rust-lang.org/nightly/"},"1":{"name":"std","html_root_url":"https://doc.rust-lang.org/nightly/"},"24":{"name":"syn","html_root_url":"https://docs.rs/syn/2.0.48/"},"21":{"name":"proc_macro","html_root_url":"https://doc.rust-lang.org/nightly/"},"18":{"name":"memchr","html_root_url":"https://doc.rust-lang.org/nightly/"},"15":{"name":"addr2line","html_root_url":"https://doc.rust-lang.org/nightly/"},"12":{"name":"rustc_std_workspace_alloc","html_root_url":"https://doc.rust-lang.org/nightly/"},"9":{"name":"miniz_oxide","html_root_url":"https://doc.rust-lang.org/nightly/"},"6":{"name":"libc","html_root_url":"https://doc.rust-lang.org/nightly/"},"3":{"name":"compiler_builtins","html_root_url":"https://doc.rust-lang.org/nightly/"}},"format_version":28}