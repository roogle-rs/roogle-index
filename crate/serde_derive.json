{"root":"0:0:2379","crate_version":"1.0.202","includes_private":false,"index":{"2:13345:2719":{"id":"2:13345:2719","crate_id":2,"name":"matches","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within the given string\nslice.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rmatches`] method can be used.\n\n[`rmatches`]: str::rmatches\n\n# Examples\n\n```\nlet v: Vec<&str> = \"abcXXXabcYYYabc\".matches(\"abc\").collect();\nassert_eq!(v, [\"abc\", \"abc\", \"abc\"]);\n\nlet v: Vec<&str> = \"1abc2abc3\".matches(char::is_numeric).collect();\nassert_eq!(v, [\"1\", \"2\", \"3\"]);\n```","links":{"self::pattern":"2:12955:4365","`DoubleEndedIterator`":"2:8333:129","prim@char":"1:12346:471","str::rmatches":"2:13348:36474"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Matches","id":"2:44176:9523","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12961:16521","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13275:36468":{"id":"2:13275:36468","crate_id":2,"name":"as_bytes_mut","span":null,"visibility":"public","docs":"Converts a mutable string slice to a mutable byte slice.\n\n# Safety\n\nThe caller must ensure that the content of the slice is valid UTF-8\nbefore the borrow ends and the underlying `str` is used.\n\nUse of a `str` whose contents are not valid UTF-8 is undefined behavior.\n\n# Examples\n\nBasic usage:\n\n```\nlet mut s = String::from(\"Hello\");\nlet bytes = unsafe { s.as_bytes_mut() };\n\nassert_eq!(b\"Hello\", bytes);\n```\n\nMutability:\n\n```\nlet mut s = String::from(\"🗻∈🌏\");\n\nunsafe {\n    let bytes = s.as_bytes_mut();\n\n    bytes[0] = 0xF0;\n    bytes[1] = 0x9F;\n    bytes[2] = 0x8D;\n    bytes[3] = 0x94;\n}\n\nassert_eq!(\"🍔∈🌏\", s);\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"slice":{"primitive":"u8"}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"2:13294:2960":{"id":"2:13294:2960","crate_id":2,"name":"char_indices","span":null,"visibility":"public","docs":"Returns an iterator over the [`char`]s of a string slice, and their\npositions.\n\nAs a string slice consists of valid UTF-8, we can iterate through a\nstring slice by [`char`]. This method returns an iterator of both\nthese [`char`]s, as well as their byte positions.\n\nThe iterator yields tuples. The position is first, the [`char`] is\nsecond.\n\n# Examples\n\nBasic usage:\n\n```\nlet word = \"goodbye\";\n\nlet count = word.char_indices().count();\nassert_eq!(7, count);\n\nlet mut char_indices = word.char_indices();\n\nassert_eq!(Some((0, 'g')), char_indices.next());\nassert_eq!(Some((1, 'o')), char_indices.next());\nassert_eq!(Some((2, 'o')), char_indices.next());\nassert_eq!(Some((3, 'd')), char_indices.next());\nassert_eq!(Some((4, 'b')), char_indices.next());\nassert_eq!(Some((5, 'y')), char_indices.next());\nassert_eq!(Some((6, 'e')), char_indices.next());\n\nassert_eq!(None, char_indices.next());\n```\n\nRemember, [`char`]s might not match your intuition about characters:\n\n[`char`]: prim@char\n\n```\nlet yes = \"y̆es\";\n\nlet mut char_indices = yes.char_indices();\n\nassert_eq!(Some((0, 'y')), char_indices.next()); // not (0, 'y̆')\nassert_eq!(Some((1, '\\u{0306}')), char_indices.next());\n\n// note the 3 here - the previous character took up two bytes\nassert_eq!(Some((3, 'e')), char_indices.next());\nassert_eq!(Some((4, 's')), char_indices.next());\n\nassert_eq!(None, char_indices.next());\n```","links":{"prim@char":"1:12346:471"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"CharIndices","id":"2:43948:9509","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:8:2498":{"id":"0:8:2498","crate_id":0,"name":"ast","span":{"filename":"src/internals/ast.rs","begin":[1,0],"end":[216,1]},"visibility":"public","docs":"A Serde ast, parsed from the Syn ast and ready to generate Rust code.","links":{},"attrs":[],"deprecation":null,"inner":{"module":{"is_crate":false,"items":[],"is_stripped":false}}},"2:13271:36467":{"id":"2:13271:36467","crate_id":2,"name":"ceil_char_boundary","span":null,"visibility":"public","docs":"Finds the closest `x` not below `index` where `is_char_boundary(x)` is `true`.\n\nIf `index` is greater than the length of the string, this returns the length of the string.\n\nThis method is the natural complement to [`floor_char_boundary`]. See that method\nfor more details.\n\n[`floor_char_boundary`]: str::floor_char_boundary\n\n\n# Examples\n\n```\n#![feature(round_char_boundary)]\nlet s = \"❤️🧡💛💚💙💜\";\nassert_eq!(s.len(), 26);\nassert!(!s.is_char_boundary(13));\n\nlet closest = s.ceil_char_boundary(13);\nassert_eq!(closest, 14);\nassert_eq!(&s[..closest], \"❤️🧡💛\");\n```","links":{"str::floor_char_boundary":"2:13269:36466"},"attrs":["#[unstable(feature = \"round_char_boundary\", issue = \"93743\")]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["index",{"primitive":"usize"}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13295:9429":{"id":"2:13295:9429","crate_id":2,"name":"bytes","span":null,"visibility":"public","docs":"An iterator over the bytes of a string slice.\n\nAs a string slice consists of a sequence of bytes, we can iterate\nthrough a string slice by byte. This method returns such an iterator.\n\n# Examples\n\n```\nlet mut bytes = \"bors\".bytes();\n\nassert_eq!(Some(b'b'), bytes.next());\nassert_eq!(Some(b'o'), bytes.next());\nassert_eq!(Some(b'r'), bytes.next());\nassert_eq!(Some(b's'), bytes.next());\n\nassert_eq!(None, bytes.next());\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Bytes","id":"2:43958:3494","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13299:36471":{"id":"2:13299:36471","crate_id":2,"name":"lines_any","span":null,"visibility":"public","docs":"An iterator over the lines of a string.","links":{},"attrs":["#[deprecated(since = \"1.4.0\", note = \"use lines() instead now\", suggestion =\n\"lines\")]"],"deprecation":{"since":"1.4.0","note":"use lines() instead now"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"LinesAny","id":"2:44236:9526","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13301:2825":{"id":"2:13301:2825","crate_id":2,"name":"contains","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a sub-slice of\nthis string slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.contains(\"nana\"));\nassert!(!bananas.contains(\"apples\"));\n```","links":{"prim@char":"1:12346:471","self::pattern":"2:12955:4365"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12961:16521","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13364:36481":{"id":"2:13364:36481","crate_id":2,"name":"trim_right","span":null,"visibility":"public","docs":"Returns a string slice with trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`.\n\n# Text directionality\n\nA string is a sequence of bytes. 'Right' in this context means the last\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _left_ side, not the right.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \" Hello\\tworld\\t\";\n\nassert_eq!(\" Hello\\tworld\", s.trim_right());\n```\n\nDirectionality:\n\n```\nlet s = \"English  \";\nassert!(Some('h') == s.trim_right().chars().rev().next());\n\nlet s = \"עברית  \";\nassert!(Some('ת') == s.trim_right().chars().rev().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_end`\", suggestion =\n\"trim_end\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_end`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13398:11059":{"id":"2:13398:11059","crate_id":2,"name":"escape_default","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_default`].\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"❤\\n!\".escape_default() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"❤\\n!\".escape_default());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"\\\\u{{2764}}\\\\n!\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"❤\\n!\".escape_default().to_string(), \"\\\\u{2764}\\\\n!\");\n```","links":{"`char::escape_default`":"2:5023:11059"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EscapeDefault","id":"2:44280:9467","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5621:37179":{"id":"5:5621:37179","crate_id":5,"name":"into_boxed_bytes","span":null,"visibility":"public","docs":"Converts a `Box<str>` into a `Box<[u8]>` without copying or allocating.\n\n# Examples\n\n```\nlet s = \"this is a string\";\nlet boxed_str = s.to_owned().into_boxed_str();\nlet boxed_bytes = boxed_str.into_boxed_bytes();\nassert_eq!(*boxed_bytes, *s.as_bytes());\n```","links":{},"attrs":["#[must_use = \"`self` will be dropped if the result is not used\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"resolved_path":{"name":"Box","id":"5:304:2569","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}]],"output":{"resolved_path":{"name":"Box","id":"5:304:2569","args":{"angle_bracketed":{"args":[{"type":{"slice":{"primitive":"u8"}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13277:29811":{"id":"2:13277:29811","crate_id":2,"name":"as_mut_ptr","span":null,"visibility":"public","docs":"Converts a mutable string slice to a raw pointer.\n\nAs string slices are a slice of bytes, the raw pointer points to a\n[`u8`]. This pointer will be pointing to the first byte of the string\nslice.\n\nIt is your responsibility to make sure that the string slice only gets\nmodified in a way that it remains valid UTF-8.","links":{"`u8`":"1:12365:1854"},"attrs":["#[rustc_never_returns_null_ptr]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"raw_pointer":{"mutable":true,"type":{"primitive":"u8"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13365:36482":{"id":"2:13365:36482","crate_id":2,"name":"trim_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes and suffixes that match a\npattern repeatedly removed.\n\nThe [pattern] can be a [`char`], a slice of [`char`]s, or a function\nor closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_matches('1'), \"foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_matches(char::is_numeric), \"foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_matches(x), \"foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1foo1barXX\".trim_matches(|c| c == '1' || c == 'X'), \"foo1bar\");\n```","links":{"prim@char":"1:12346:471","self::pattern":"2:12955:4365"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12961:16521","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12961:16521","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"DoubleEndedSearcher","id":"2:12981:16520","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13297:34140":{"id":"2:13297:34140","crate_id":2,"name":"split_ascii_whitespace","span":null,"visibility":"public","docs":"Splits a string slice by ASCII whitespace.\n\nThe iterator returned will return string slices that are sub-slices of\nthe original string slice, separated by any amount of ASCII whitespace.\n\nTo split by Unicode `Whitespace` instead, use [`split_whitespace`].\n\n[`split_whitespace`]: str::split_whitespace\n\n# Examples\n\nBasic usage:\n\n```\nlet mut iter = \"A few words\".split_ascii_whitespace();\n\nassert_eq!(Some(\"A\"), iter.next());\nassert_eq!(Some(\"few\"), iter.next());\nassert_eq!(Some(\"words\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nAll kinds of ASCII whitespace are considered:\n\n```\nlet mut iter = \" Mary   had\\ta little  \\n\\t lamb\".split_ascii_whitespace();\nassert_eq!(Some(\"Mary\"), iter.next());\nassert_eq!(Some(\"had\"), iter.next());\nassert_eq!(Some(\"a\"), iter.next());\nassert_eq!(Some(\"little\"), iter.next());\nassert_eq!(Some(\"lamb\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nIf the string is empty or all ASCII whitespace, the iterator yields no string slices:\n```\nassert_eq!(\"\".split_ascii_whitespace().next(), None);\nassert_eq!(\"   \".split_ascii_whitespace().next(), None);\n```","links":{"str::split_whitespace":"2:13296:34122"},"attrs":["#[must_use =\n\"this returns the split string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"SplitAsciiWhitespace","id":"2:44255:9528","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5637:37183":{"id":"5:5637:37183","crate_id":5,"name":"into_string","span":null,"visibility":"public","docs":"Converts a [`Box<str>`] into a [`String`] without copying or allocating.\n\n# Examples\n\n```\nlet string = String::from(\"birthday gift\");\nlet boxed_str = string.clone().into_boxed_str();\n\nassert_eq!(boxed_str.into_string(), string);\n```","links":{"`Box<str>`":"5:304:2569","`String`":"5:7652:243"},"attrs":["#[must_use = \"`self` will be dropped if the result is not used\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"resolved_path":{"name":"Box","id":"5:304:2569","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}]],"output":{"resolved_path":{"name":"String","id":"5:7652:243","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13380:36484":{"id":"2:13380:36484","crate_id":2,"name":"trim_left_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. 'Left' in this context means the first\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _right_ side, not the left.\n\n# Examples\n\n```\nassert_eq!(\"11foo1bar11\".trim_left_matches('1'), \"foo1bar11\");\nassert_eq!(\"123foo1bar123\".trim_left_matches(char::is_numeric), \"foo1bar123\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_left_matches(x), \"foo1bar12\");\n```","links":{"prim@char":"1:12346:471","self::pattern":"2:12955:4365"},"attrs":["#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_start_matches`\",\nsuggestion = \"trim_start_matches\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_start_matches`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12961:16521","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13357:36477":{"id":"2:13357:36477","crate_id":2,"name":"trim","span":null,"visibility":"public","docs":"Returns a string slice with leading and trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Examples\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\n\nassert_eq!(\"Hello\\tworld\", s.trim());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a slice, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_trim\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13391:28616":{"id":"2:13391:28616","crate_id":2,"name":"make_ascii_uppercase","span":null,"visibility":"public","docs":"Converts this string to its ASCII upper case equivalent in-place.\n\nASCII letters 'a' to 'z' are mapped to 'A' to 'Z',\nbut non-ASCII letters are unchanged.\n\nTo return a new uppercased value without modifying the existing one, use\n[`to_ascii_uppercase()`].\n\n[`to_ascii_uppercase()`]: #method.to_ascii_uppercase\n\n# Examples\n\n```\nlet mut s = String::from(\"Grüße, Jürgen ❤\");\n\ns.make_ascii_uppercase();\n\nassert_eq!(\"GRüßE, JüRGEN ❤\", s);\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13276:336":{"id":"2:13276:336","crate_id":2,"name":"as_ptr","span":null,"visibility":"public","docs":"Converts a string slice to a raw pointer.\n\nAs string slices are a slice of bytes, the raw pointer points to a\n[`u8`]. This pointer will be pointing to the first byte of the string\nslice.\n\nThe caller must ensure that the returned pointer is never written to.\nIf you need to mutate the contents of the string slice, use [`as_mut_ptr`].\n\n[`as_mut_ptr`]: str::as_mut_ptr\n\n# Examples\n\n```\nlet s = \"Hello\";\nlet ptr = s.as_ptr();\n```","links":{"str::as_mut_ptr":"2:13277:29811","`u8`":"1:12365:1854"},"attrs":["#[rustc_never_returns_null_ptr]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"raw_pointer":{"mutable":false,"type":{"primitive":"u8"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13333:29844":{"id":"2:13333:29844","crate_id":2,"name":"splitn","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by a\npattern, restricted to returning at most `n` items.\n\nIf `n` substrings are returned, the last substring (the `n`th substring)\nwill contain the remainder of the string.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will not be double ended, because it is\nnot efficient to support.\n\nIf the pattern allows a reverse search, the [`rsplitn`] method can be\nused.\n\n[`rsplitn`]: str::rsplitn\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lambda\".splitn(3, ' ').collect();\nassert_eq!(v, [\"Mary\", \"had\", \"a little lambda\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".splitn(3, \"X\").collect();\nassert_eq!(v, [\"lion\", \"\", \"tigerXleopard\"]);\n\nlet v: Vec<&str> = \"abcXdef\".splitn(1, 'X').collect();\nassert_eq!(v, [\"abcXdef\"]);\n\nlet v: Vec<&str> = \"\".splitn(1, 'X').collect();\nassert_eq!(v, [\"\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".splitn(2, |c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"abc\", \"defXghi\"]);\n```","links":{"prim@char":"1:12346:471","self::pattern":"2:12955:4365","str::rsplitn":"2:13336:29846"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["n",{"primitive":"usize"}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"SplitN","id":"2:44076:9517","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12961:16521","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13363:36480":{"id":"2:13363:36480","crate_id":2,"name":"trim_left","span":null,"visibility":"public","docs":"Returns a string slice with leading whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`.\n\n# Text directionality\n\nA string is a sequence of bytes. 'Left' in this context means the first\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _right_ side, not the left.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \" Hello\\tworld\\t\";\n\nassert_eq!(\"Hello\\tworld\\t\", s.trim_left());\n```\n\nDirectionality:\n\n```\nlet s = \"  English\";\nassert!(Some('E') == s.trim_left().chars().next());\n\nlet s = \"  עברית\";\nassert!(Some('ע') == s.trim_left().chars().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_start`\", suggestion\n= \"trim_start\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_start`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13287:36470":{"id":"2:13287:36470","crate_id":2,"name":"slice_mut_unchecked","span":null,"visibility":"public","docs":"Creates a string slice from another string slice, bypassing safety\nchecks.\nThis is generally not recommended, use with caution! For a safe\nalternative see [`str`] and [`IndexMut`].\n\n[`IndexMut`]: crate::ops::IndexMut\n\nThis new slice goes from `begin` to `end`, including `begin` but\nexcluding `end`.\n\nTo get an immutable string slice instead, see the\n[`slice_unchecked`] method.\n\n[`slice_unchecked`]: str::slice_unchecked\n\n# Safety\n\nCallers of this function are responsible that three preconditions are\nsatisfied:\n\n* `begin` must not exceed `end`.\n* `begin` and `end` must be byte positions within the string slice.\n* `begin` and `end` must lie on UTF-8 sequence boundaries.","links":{"`str`":"1:12352:1724","crate::ops::IndexMut":"2:3489:3964","str::slice_unchecked":"2:13286:36469"},"attrs":["#[deprecated(since = \"1.29.0\", note =\n\"use `get_unchecked_mut(begin..end)` instead\")]"],"deprecation":{"since":"1.29.0","note":"use `get_unchecked_mut(begin..end)` instead"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["begin",{"primitive":"usize"}],["end",{"primitive":"usize"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"2:13321:29840":{"id":"2:13321:29840","crate_id":2,"name":"split_inclusive","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by\ncharacters matched by a pattern. Differs from the iterator produced by\n`split` in that `split_inclusive` leaves the matched part as the\nterminator of the substring.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\\nlittle lamb\\nlittle lamb.\"\n    .split_inclusive('\\n').collect();\nassert_eq!(v, [\"Mary had a little lamb\\n\", \"little lamb\\n\", \"little lamb.\"]);\n```\n\nIf the last element of the string is matched,\nthat element will be considered the terminator of the preceding substring.\nThat substring will be the last item returned by the iterator.\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\\nlittle lamb\\nlittle lamb.\\n\"\n    .split_inclusive('\\n').collect();\nassert_eq!(v, [\"Mary had a little lamb\\n\", \"little lamb\\n\", \"little lamb.\\n\"]);\n```","links":{"prim@char":"1:12346:471","self::pattern":"2:12955:4365"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"SplitInclusive","id":"2:12770:9442","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12961:16521","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13368:2632":{"id":"2:13368:2632","crate_id":2,"name":"trim_start_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. `start` in this context means the first\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be left side, and for right-to-left languages like\nArabic or Hebrew, this will be the right side.\n\n# Examples\n\n```\nassert_eq!(\"11foo1bar11\".trim_start_matches('1'), \"foo1bar11\");\nassert_eq!(\"123foo1bar123\".trim_start_matches(char::is_numeric), \"foo1bar123\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_start_matches(x), \"foo1bar12\");\n```","links":{"prim@char":"1:12346:471","self::pattern":"2:12955:4365"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12961:16521","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13339:29848":{"id":"2:13339:29848","crate_id":2,"name":"split_once","span":null,"visibility":"public","docs":"Splits the string on the first occurrence of the specified delimiter and\nreturns prefix before delimiter and suffix after delimiter.\n\n# Examples\n\n```\nassert_eq!(\"cfg\".split_once('='), None);\nassert_eq!(\"cfg=\".split_once('='), Some((\"cfg\", \"\")));\nassert_eq!(\"cfg=foo\".split_once('='), Some((\"cfg\", \"foo\")));\nassert_eq!(\"cfg=foo=bar\".split_once('='), Some((\"cfg\", \"foo=bar\")));\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["delimiter",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:42080:194","args":{"angle_bracketed":{"args":[{"type":{"tuple":[{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12961:16521","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13351:36475":{"id":"2:13351:36475","crate_id":2,"name":"match_indices","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within this string\nslice as well as the index that the match starts at.\n\nFor matches of `pat` within `self` that overlap, only the indices\ncorresponding to the first match are returned.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rmatch_indices`] method can be used.\n\n[`rmatch_indices`]: str::rmatch_indices\n\n# Examples\n\n```\nlet v: Vec<_> = \"abcXXXabcYYYabc\".match_indices(\"abc\").collect();\nassert_eq!(v, [(0, \"abc\"), (6, \"abc\"), (12, \"abc\")]);\n\nlet v: Vec<_> = \"1abcabc2\".match_indices(\"abc\").collect();\nassert_eq!(v, [(1, \"abc\"), (4, \"abc\")]);\n\nlet v: Vec<_> = \"ababa\".match_indices(\"aba\").collect();\nassert_eq!(v, [(0, \"aba\")]); // only the first `aba`\n```","links":{"self::pattern":"2:12955:4365","`DoubleEndedIterator`":"2:8333:129","prim@char":"1:12346:471","str::rmatch_indices":"2:13354:36476"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"MatchIndices","id":"2:44122:9520","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12961:16521","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13393:31062":{"id":"2:13393:31062","crate_id":2,"name":"trim_ascii_start","span":null,"visibility":"public","docs":"Returns a string slice with leading ASCII whitespace removed.\n\n'Whitespace' refers to the definition used by\n[`u8::is_ascii_whitespace`].\n\n[`u8::is_ascii_whitespace`]: u8::is_ascii_whitespace\n\n# Examples\n\n```\nassert_eq!(\" \\t \\u{3000}hello world\\n\".trim_ascii_start(), \"\\u{3000}hello world\\n\");\nassert_eq!(\"  \".trim_ascii_start(), \"\");\nassert_eq!(\"\".trim_ascii_start(), \"\");\n```","links":{"u8::is_ascii_whitespace":"2:1061:40768"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13342:29849":{"id":"2:13342:29849","crate_id":2,"name":"rsplit_once","span":null,"visibility":"public","docs":"Splits the string on the last occurrence of the specified delimiter and\nreturns prefix before delimiter and suffix after delimiter.\n\n# Examples\n\n```\nassert_eq!(\"cfg\".rsplit_once('='), None);\nassert_eq!(\"cfg=foo\".rsplit_once('='), Some((\"cfg\", \"foo\")));\nassert_eq!(\"cfg=foo=bar\".rsplit_once('='), Some((\"cfg=foo\", \"bar\")));\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["delimiter",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:42080:194","args":{"angle_bracketed":{"args":[{"type":{"tuple":[{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12961:16521","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12961:16521","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12976:16522","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13280:29808":{"id":"2:13280:29808","crate_id":2,"name":"get_mut","span":null,"visibility":"public","docs":"Returns a mutable subslice of `str`.\n\nThis is the non-panicking alternative to indexing the `str`. Returns\n[`None`] whenever equivalent indexing operation would panic.\n\n# Examples\n\n```\nlet mut v = String::from(\"hello\");\n// correct length\nassert!(v.get_mut(0..5).is_some());\n// out of bounds\nassert!(v.get_mut(..42).is_none());\nassert_eq!(Some(\"he\"), v.get_mut(0..2).map(|v| &*v));\n\nassert_eq!(\"hello\", v);\n{\n    let s = v.get_mut(0..2);\n    let s = s.map(|s| {\n        s.make_ascii_uppercase();\n        &*s\n    });\n    assert_eq!(Some(\"HE\"), s);\n}\nassert_eq!(\"HEllo\", v);\n```","links":{"`None`":"2:42082:191"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"resolved_path":{"name":"Option","id":"2:42080:194","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"2:11045:239","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"2:11045:239","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13399:36487":{"id":"2:13399:36487","crate_id":2,"name":"escape_unicode","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_unicode`].\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"❤\\n!\".escape_unicode() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"❤\\n!\".escape_unicode());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"\\\\u{{2764}}\\\\u{{a}}\\\\u{{21}}\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"❤\\n!\".escape_unicode().to_string(), \"\\\\u{2764}\\\\u{a}\\\\u{21}\");\n```","links":{"`char::escape_unicode`":"2:5020:36487"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EscapeUnicode","id":"2:44289:9472","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13310:3274":{"id":"2:13310:3274","crate_id":2,"name":"find","span":null,"visibility":"public","docs":"Returns the byte index of the first character of this string slice that\nmatches the pattern.\n\nReturns [`None`] if the pattern doesn't match.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nlet s = \"Löwe 老虎 Léopard Gepardi\";\n\nassert_eq!(s.find('L'), Some(0));\nassert_eq!(s.find('é'), Some(14));\nassert_eq!(s.find(\"pard\"), Some(17));\n```\n\nMore complex patterns using point-free style and closures:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\n\nassert_eq!(s.find(char::is_whitespace), Some(5));\nassert_eq!(s.find(char::is_lowercase), Some(1));\nassert_eq!(s.find(|c: char| c.is_whitespace() || c.is_lowercase()), Some(1));\nassert_eq!(s.find(|c: char| (c < 'o') && (c > 'a')), Some(4));\n```\n\nNot finding the pattern:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\nlet x: &[_] = &['1', '2'];\n\nassert_eq!(s.find(x), None);\n```","links":{"`None`":"2:42082:191","prim@char":"1:12346:471","self::pattern":"2:12955:4365"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:42080:194","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12961:16521","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13266:999":{"id":"2:13266:999","crate_id":2,"name":"len","span":null,"visibility":"public","docs":"Returns the length of `self`.\n\nThis length is in bytes, not [`char`]s or graphemes. In other words,\nit might not be what a human considers the length of the string.\n\n[`char`]: prim@char\n\n# Examples\n\n```\nlet len = \"foo\".len();\nassert_eq!(3, len);\n\nassert_eq!(\"ƒoo\".len(), 4); // fancy f!\nassert_eq!(\"ƒoo\".chars().count(), 3);\n```","links":{"prim@char":"1:12346:471"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13278:2614":{"id":"2:13278:2614","crate_id":2,"name":"get","span":null,"visibility":"public","docs":"Returns a subslice of `str`.\n\nThis is the non-panicking alternative to indexing the `str`. Returns\n[`None`] whenever equivalent indexing operation would panic.\n\n# Examples\n\n```\nlet v = String::from(\"🗻∈🌏\");\n\nassert_eq!(Some(\"🗻\"), v.get(0..4));\n\n// indices not on UTF-8 sequence boundaries\nassert!(v.get(1..).is_none());\nassert!(v.get(..8).is_none());\n\n// out of bounds\nassert!(v.get(..42).is_none());\n```","links":{"`None`":"2:42082:191"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"resolved_path":{"name":"Option","id":"2:42080:194","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"2:11045:239","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"2:11045:239","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5636:37182":{"id":"5:5636:37182","crate_id":5,"name":"to_uppercase","span":null,"visibility":"public","docs":"Returns the uppercase equivalent of this string slice, as a new [`String`].\n\n'Uppercase' is defined according to the terms of the Unicode Derived Core Property\n`Uppercase`.\n\nSince some characters can expand into multiple characters when changing\nthe case, this function returns a [`String`] instead of modifying the\nparameter in-place.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"hello\";\n\nassert_eq!(\"HELLO\", s.to_uppercase());\n```\n\nScripts without case are not changed:\n\n```\nlet new_year = \"农历新年\";\n\nassert_eq!(new_year, new_year.to_uppercase());\n```\n\nOne character can become multiple:\n```\nlet s = \"tschüß\";\n\nassert_eq!(\"TSCHÜSS\", s.to_uppercase());\n```","links":{"`String`":"5:7652:243"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the uppercase string as a new String, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7652:243","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:1023:2602":{"id":"0:1023:2602","crate_id":0,"name":"Symbol","span":{"filename":"src/internals/symbol.rs","begin":[5,0],"end":[5,32]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"struct":{"kind":{"tuple":[null]},"generics":{"params":[],"where_predicates":[]},"impls":[]}}},"2:13314:5129":{"id":"2:13314:5129","crate_id":2,"name":"rfind","span":null,"visibility":"public","docs":"Returns the byte index for the first character of the last match of the pattern in\nthis string slice.\n\nReturns [`None`] if the pattern doesn't match.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nlet s = \"Löwe 老虎 Léopard Gepardi\";\n\nassert_eq!(s.rfind('L'), Some(13));\nassert_eq!(s.rfind('é'), Some(14));\nassert_eq!(s.rfind(\"pard\"), Some(24));\n```\n\nMore complex patterns with closures:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\n\nassert_eq!(s.rfind(char::is_whitespace), Some(12));\nassert_eq!(s.rfind(char::is_lowercase), Some(20));\n```\n\nNot finding the pattern:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\nlet x: &[_] = &['1', '2'];\n\nassert_eq!(s.rfind(x), None);\n```","links":{"`None`":"2:42082:191","prim@char":"1:12346:471","self::pattern":"2:12955:4365"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:42080:194","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12961:16521","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12961:16521","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12976:16522","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13336:29846":{"id":"2:13336:29846","crate_id":2,"name":"rsplitn","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by a\npattern, starting from the end of the string, restricted to returning\nat most `n` items.\n\nIf `n` substrings are returned, the last substring (the `n`th substring)\nwill contain the remainder of the string.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will not be double ended, because it is not\nefficient to support.\n\nFor splitting from the front, the [`splitn`] method can be used.\n\n[`splitn`]: str::splitn\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".rsplitn(3, ' ').collect();\nassert_eq!(v, [\"lamb\", \"little\", \"Mary had a\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".rsplitn(3, 'X').collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"lionX\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".rsplitn(2, \"::\").collect();\nassert_eq!(v, [\"leopard\", \"lion::tiger\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".rsplitn(2, |c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"ghi\", \"abc1def\"]);\n```","links":{"prim@char":"1:12346:471","str::splitn":"2:13333:29844","self::pattern":"2:12955:4365"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["n",{"primitive":"usize"}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RSplitN","id":"2:44094:9518","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12961:16521","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12961:16521","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12976:16522","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13390:28615":{"id":"2:13390:28615","crate_id":2,"name":"eq_ignore_ascii_case","span":null,"visibility":"public","docs":"Checks that two strings are an ASCII case-insensitive match.\n\nSame as `to_ascii_lowercase(a) == to_ascii_lowercase(b)`,\nbut without allocating and copying temporaries.\n\n# Examples\n\n```\nassert!(\"Ferris\".eq_ignore_ascii_case(\"FERRIS\"));\nassert!(\"Ferrös\".eq_ignore_ascii_case(\"FERRöS\"));\nassert!(!\"Ferrös\".eq_ignore_ascii_case(\"FERRÖS\"));\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["other",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13330:36473":{"id":"2:13330:36473","crate_id":2,"name":"rsplit_terminator","span":null,"visibility":"public","docs":"An iterator over substrings of `self`, separated by characters\nmatched by a pattern and yielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\nEquivalent to [`split`], except that the trailing substring is\nskipped if empty.\n\n[`split`]: str::split\n\nThis method can be used for string data that is _terminated_,\nrather than _separated_ by a pattern.\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a\nreverse search, and it will be double ended if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`split_terminator`] method can be\nused.\n\n[`split_terminator`]: str::split_terminator\n\n# Examples\n\n```\nlet v: Vec<&str> = \"A.B.\".rsplit_terminator('.').collect();\nassert_eq!(v, [\"B\", \"A\"]);\n\nlet v: Vec<&str> = \"A..B..\".rsplit_terminator(\".\").collect();\nassert_eq!(v, [\"\", \"B\", \"\", \"A\"]);\n\nlet v: Vec<&str> = \"A.B:C.D\".rsplit_terminator(&['.', ':'][..]).collect();\nassert_eq!(v, [\"D\", \"C\", \"B\", \"A\"]);\n```","links":{"self::pattern":"2:12955:4365","str::split":"2:13318:28703","prim@char":"1:12346:471","str::split_terminator":"2:13327:36472"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RSplitTerminator","id":"2:44040:9515","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12961:16521","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12961:16521","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12976:16522","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13327:36472":{"id":"2:13327:36472","crate_id":2,"name":"split_terminator","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by\ncharacters matched by a pattern.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\nEquivalent to [`split`], except that the trailing substring\nis skipped if empty.\n\n[`split`]: str::split\n\nThis method can be used for string data that is _terminated_,\nrather than _separated_ by a pattern.\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rsplit_terminator`] method can be used.\n\n[`rsplit_terminator`]: str::rsplit_terminator\n\n# Examples\n\n```\nlet v: Vec<&str> = \"A.B.\".split_terminator('.').collect();\nassert_eq!(v, [\"A\", \"B\"]);\n\nlet v: Vec<&str> = \"A..B..\".split_terminator(\".\").collect();\nassert_eq!(v, [\"A\", \"\", \"B\", \"\"]);\n\nlet v: Vec<&str> = \"A.B:C.D\".split_terminator(&['.', ':'][..]).collect();\nassert_eq!(v, [\"A\", \"B\", \"C\", \"D\"]);\n```","links":{"self::pattern":"2:12955:4365","str::split":"2:13318:28703","prim@char":"1:12346:471","`DoubleEndedIterator`":"2:8333:129","str::rsplit_terminator":"2:13330:36473"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"SplitTerminator","id":"2:44022:9514","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12961:16521","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13296:34122":{"id":"2:13296:34122","crate_id":2,"name":"split_whitespace","span":null,"visibility":"public","docs":"Splits a string slice by whitespace.\n\nThe iterator returned will return string slices that are sub-slices of\nthe original string slice, separated by any amount of whitespace.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`. If you only want to split on ASCII whitespace\ninstead, use [`split_ascii_whitespace`].\n\n[`split_ascii_whitespace`]: str::split_ascii_whitespace\n\n# Examples\n\nBasic usage:\n\n```\nlet mut iter = \"A few words\".split_whitespace();\n\nassert_eq!(Some(\"A\"), iter.next());\nassert_eq!(Some(\"few\"), iter.next());\nassert_eq!(Some(\"words\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nAll kinds of whitespace are considered:\n\n```\nlet mut iter = \" Mary   had\\ta\\u{2009}little  \\n\\t lamb\".split_whitespace();\nassert_eq!(Some(\"Mary\"), iter.next());\nassert_eq!(Some(\"had\"), iter.next());\nassert_eq!(Some(\"a\"), iter.next());\nassert_eq!(Some(\"little\"), iter.next());\nassert_eq!(Some(\"lamb\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nIf the string is empty or all whitespace, the iterator yields no string slices:\n```\nassert_eq!(\"\".split_whitespace().next(), None);\nassert_eq!(\"   \".split_whitespace().next(), None);\n```","links":{"str::split_ascii_whitespace":"2:13297:34140"},"attrs":["#[must_use =\n\"this returns the split string as an iterator, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_split_whitespace\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"SplitWhitespace","id":"2:44246:9527","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13383:36485":{"id":"2:13383:36485","crate_id":2,"name":"trim_right_matches","span":null,"visibility":"public","docs":"Returns a string slice with all suffixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. 'Right' in this context means the last\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _left_ side, not the right.\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_right_matches('1'), \"11foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_right_matches(char::is_numeric), \"123foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_right_matches(x), \"12foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1fooX\".trim_right_matches(|c| c == '1' || c == 'X'), \"1foo\");\n```","links":{"prim@char":"1:12346:471","self::pattern":"2:12955:4365"},"attrs":["#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_end_matches`\",\nsuggestion = \"trim_end_matches\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_end_matches`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12961:16521","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12961:16521","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12976:16522","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13324:29842":{"id":"2:13324:29842","crate_id":2,"name":"rsplit","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by\ncharacters matched by a pattern and yielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`split`] method can be used.\n\n[`split`]: str::split\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".rsplit(' ').collect();\nassert_eq!(v, [\"lamb\", \"little\", \"a\", \"had\", \"Mary\"]);\n\nlet v: Vec<&str> = \"\".rsplit('X').collect();\nassert_eq!(v, [\"\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".rsplit('X').collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"\", \"lion\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".rsplit(\"::\").collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"lion\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".rsplit(|c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"ghi\", \"def\", \"abc\"]);\n```","links":{"self::pattern":"2:12955:4365","`DoubleEndedIterator`":"2:8333:129","prim@char":"1:12346:471","str::split":"2:13318:28703"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RSplit","id":"2:43990:9443","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12961:16521","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12961:16521","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12976:16522","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13354:36476":{"id":"2:13354:36476","crate_id":2,"name":"rmatch_indices","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within `self`,\nyielded in reverse order along with the index of the match.\n\nFor matches of `pat` within `self` that overlap, only the indices\ncorresponding to the last match are returned.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`match_indices`] method can be used.\n\n[`match_indices`]: str::match_indices\n\n# Examples\n\n```\nlet v: Vec<_> = \"abcXXXabcYYYabc\".rmatch_indices(\"abc\").collect();\nassert_eq!(v, [(12, \"abc\"), (6, \"abc\"), (0, \"abc\")]);\n\nlet v: Vec<_> = \"1abcabc2\".rmatch_indices(\"abc\").collect();\nassert_eq!(v, [(4, \"abc\"), (1, \"abc\")]);\n\nlet v: Vec<_> = \"ababa\".rmatch_indices(\"aba\").collect();\nassert_eq!(v, [(2, \"aba\")]); // only the last `aba`\n```","links":{"self::pattern":"2:12955:4365","`DoubleEndedIterator`":"2:8333:129","prim@char":"1:12346:471","str::match_indices":"2:13351:36475"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RMatchIndices","id":"2:44140:9521","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12961:16521","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12961:16521","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12976:16522","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13395:31064":{"id":"2:13395:31064","crate_id":2,"name":"trim_ascii","span":null,"visibility":"public","docs":"Returns a string slice with leading and trailing ASCII whitespace\nremoved.\n\n'Whitespace' refers to the definition used by\n[`u8::is_ascii_whitespace`].\n\n[`u8::is_ascii_whitespace`]: u8::is_ascii_whitespace\n\n# Examples\n\n```\nassert_eq!(\"\\r hello world\\n \".trim_ascii(), \"hello world\");\nassert_eq!(\"  \".trim_ascii(), \"\");\nassert_eq!(\"\".trim_ascii(), \"\");\n```","links":{"u8::is_ascii_whitespace":"2:1061:40768"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13371:28562":{"id":"2:13371:28562","crate_id":2,"name":"strip_prefix","span":null,"visibility":"public","docs":"Returns a string slice with the prefix removed.\n\nIf the string starts with the pattern `prefix`, returns the substring after the prefix,\nwrapped in `Some`. Unlike `trim_start_matches`, this method removes the prefix exactly once.\n\nIf the string does not start with `prefix`, returns `None`.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nassert_eq!(\"foo:bar\".strip_prefix(\"foo:\"), Some(\"bar\"));\nassert_eq!(\"foo:bar\".strip_prefix(\"bar\"), None);\nassert_eq!(\"foofoo\".strip_prefix(\"foo\"), Some(\"foo\"));\n```","links":{"prim@char":"1:12346:471","self::pattern":"2:12955:4365"},"attrs":["#[must_use =\n\"this returns the remaining substring as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["prefix",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:42080:194","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12961:16521","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13394:31063":{"id":"2:13394:31063","crate_id":2,"name":"trim_ascii_end","span":null,"visibility":"public","docs":"Returns a string slice with trailing ASCII whitespace removed.\n\n'Whitespace' refers to the definition used by\n[`u8::is_ascii_whitespace`].\n\n[`u8::is_ascii_whitespace`]: u8::is_ascii_whitespace\n\n# Examples\n\n```\nassert_eq!(\"\\r hello world\\u{3000}\\n \".trim_ascii_end(), \"\\r hello world\\u{3000}\");\nassert_eq!(\"  \".trim_ascii_end(), \"\");\nassert_eq!(\"\".trim_ascii_end(), \"\");\n```","links":{"u8::is_ascii_whitespace":"2:1061:40768"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13265":{"id":"2:13265","crate_id":2,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":["#[cfg(not(test))]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"primitive":"str"},"items":["2:13266:999","2:13267:2723","2:13268:36465","2:13269:36466","2:13271:36467","2:13274:3484","2:13275:36468","2:13276:336","2:13277:29811","2:13278:2614","2:13280:29808","2:13282:29809","2:13284:29810","2:13286:36469","2:13287:36470","2:13288:3372","2:13289:29834","2:13290:29837","2:13291:29838","2:13293:2966","2:13294:2960","2:13295:9429","2:13296:34122","2:13297:34140","2:13298:28704","2:13299:36471","2:13300:34663","2:13301:2825","2:13304:29850","2:13307:29851","2:13310:3274","2:13314:5129","2:13318:28703","2:13321:29840","2:13324:29842","2:13327:36472","2:13330:36473","2:13333:29844","2:13336:29846","2:13339:29848","2:13342:29849","2:13345:2719","2:13348:36474","2:13351:36475","2:13354:36476","2:13357:36477","2:13359:36478","2:13361:36479","2:13363:36480","2:13364:36481","2:13365:36482","2:13368:2632","2:13371:28562","2:13374:29852","2:13377:36483","2:13380:36484","2:13383:36485","2:13386:2594","2:13388:28613","2:13389:31059","2:13390:28615","2:13391:28616","2:13392:28617","2:13393:31062","2:13394:31063","2:13395:31064","2:13396:36486","2:13398:11059","2:13399:36487"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:492-0:1019:2505":{"id":"0:492-0:1019:2505","crate_id":0,"name":null,"span":{"filename":"src/internals/mod.rs","begin":[13,0],"end":[13,25]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"import":{"source":"self::ctxt::Ctxt","name":"Ctxt","id":"0:1019:2505","glob":false}}},"2:13300:34663":{"id":"2:13300:34663","crate_id":2,"name":"encode_utf16","span":null,"visibility":"public","docs":"Returns an iterator of `u16` over the string encoded as UTF-16.\n\n# Examples\n\n```\nlet text = \"Zażółć gęślą jaźń\";\n\nlet utf8_len = text.len();\nlet utf16_len = text.encode_utf16().count();\n\nassert!(utf16_len <= utf8_len);\n```","links":{},"attrs":["#[must_use =\n\"this returns the encoded string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EncodeUtf16","id":"2:44264:9529","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13269:36466":{"id":"2:13269:36466","crate_id":2,"name":"floor_char_boundary","span":null,"visibility":"public","docs":"Finds the closest `x` not exceeding `index` where `is_char_boundary(x)` is `true`.\n\nThis method can help you truncate a string so that it's still valid UTF-8, but doesn't\nexceed a given number of bytes. Note that this is done purely at the character level\nand can still visually split graphemes, even though the underlying characters aren't\nsplit. For example, the emoji 🧑‍🔬 (scientist) could be split so that the string only\nincludes 🧑 (person) instead.\n\n# Examples\n\n```\n#![feature(round_char_boundary)]\nlet s = \"❤️🧡💛💚💙💜\";\nassert_eq!(s.len(), 26);\nassert!(!s.is_char_boundary(13));\n\nlet closest = s.floor_char_boundary(13);\nassert_eq!(closest, 10);\nassert_eq!(&s[..closest], \"❤️🧡\");\n```","links":{},"attrs":["#[unstable(feature = \"round_char_boundary\", issue = \"93743\")]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["index",{"primitive":"usize"}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5620":{"id":"5:5620","crate_id":5,"name":null,"span":null,"visibility":"default","docs":"Methods for string slices.","links":{},"attrs":["#[cfg(not(test))]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"primitive":"str"},"items":["5:5621:37179","5:5622:2753","5:5625:37180","5:5628:37181","5:5636:37182","5:5637:37183","5:5638:4021","5:5639:2957","5:5640:2956"],"negative":false,"synthetic":false,"blanket_impl":null}}},"5:5625:37180":{"id":"5:5625:37180","crate_id":5,"name":"replacen","span":null,"visibility":"public","docs":"Replaces first N matches of a pattern with another string.\n\n`replacen` creates a new [`String`], and copies the data from this string slice into it.\nWhile doing so, it attempts to find matches of a pattern. If it finds any, it\nreplaces them with the replacement string slice at most `count` times.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"foo foo 123 foo\";\nassert_eq!(\"new new 123 foo\", s.replacen(\"foo\", \"new\", 2));\nassert_eq!(\"faa fao 123 foo\", s.replacen('o', \"a\", 3));\nassert_eq!(\"foo foo new23 foo\", s.replacen(char::is_numeric, \"new\", 1));\n```\n\nWhen the pattern doesn't match, it returns this string slice as [`String`]:\n\n```\nlet s = \"this is old\";\nassert_eq!(s, s.replacen(\"cookie monster\", \"little lamb\", 10));\n```","links":{"`String`":"5:7652:243"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the replaced string as a new allocation, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}],["to",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}],["count",{"primitive":"usize"}]],"output":{"resolved_path":{"name":"String","id":"5:7652:243","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12961:16521","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13377:36483":{"id":"2:13377:36483","crate_id":2,"name":"trim_end_matches","span":null,"visibility":"public","docs":"Returns a string slice with all suffixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. `end` in this context means the last\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be right side, and for right-to-left languages like\nArabic or Hebrew, this will be the left side.\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_end_matches('1'), \"11foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_end_matches(char::is_numeric), \"123foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_end_matches(x), \"12foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1fooX\".trim_end_matches(|c| c == '1' || c == 'X'), \"1foo\");\n```","links":{"prim@char":"1:12346:471","self::pattern":"2:12955:4365"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12961:16521","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12961:16521","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12976:16522","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5639:2957":{"id":"5:5639:2957","crate_id":5,"name":"to_ascii_uppercase","span":null,"visibility":"public","docs":"Returns a copy of this string where each character is mapped to its\nASCII upper case equivalent.\n\nASCII letters 'a' to 'z' are mapped to 'A' to 'Z',\nbut non-ASCII letters are unchanged.\n\nTo uppercase the value in-place, use [`make_ascii_uppercase`].\n\nTo uppercase ASCII characters in addition to non-ASCII characters, use\n[`to_uppercase`].\n\n# Examples\n\n```\nlet s = \"Grüße, Jürgen ❤\";\n\nassert_eq!(\"GRüßE, JüRGEN ❤\", s.to_ascii_uppercase());\n```\n\n[`make_ascii_uppercase`]: str::make_ascii_uppercase\n[`to_uppercase`]: #method.to_uppercase","links":{"str::make_ascii_uppercase":"2:13391:28616"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use = \"to uppercase the value in-place, use `make_ascii_uppercase()`\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7652:243","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5640:2956":{"id":"5:5640:2956","crate_id":5,"name":"to_ascii_lowercase","span":null,"visibility":"public","docs":"Returns a copy of this string where each character is mapped to its\nASCII lower case equivalent.\n\nASCII letters 'A' to 'Z' are mapped to 'a' to 'z',\nbut non-ASCII letters are unchanged.\n\nTo lowercase the value in-place, use [`make_ascii_lowercase`].\n\nTo lowercase ASCII characters in addition to non-ASCII characters, use\n[`to_lowercase`].\n\n# Examples\n\n```\nlet s = \"Grüße, Jürgen ❤\";\n\nassert_eq!(\"grüße, jürgen ❤\", s.to_ascii_lowercase());\n```\n\n[`make_ascii_lowercase`]: str::make_ascii_lowercase\n[`to_lowercase`]: #method.to_lowercase","links":{"str::make_ascii_lowercase":"2:13392:28617"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use = \"to lowercase the value in-place, use `make_ascii_lowercase()`\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7652:243","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13288:3372":{"id":"2:13288:3372","crate_id":2,"name":"split_at","span":null,"visibility":"public","docs":"Divide one string slice into two at an index.\n\nThe argument, `mid`, should be a byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get mutable string slices instead, see the [`split_at_mut`]\nmethod.\n\n[`split_at_mut`]: str::split_at_mut\n\n# Panics\n\nPanics if `mid` is not on a UTF-8 code point boundary, or if it is past\nthe end of the last code point of the string slice.  For a non-panicking\nalternative see [`split_at_checked`](str::split_at_checked).\n\n# Examples\n\n```\nlet s = \"Per Martin-Löf\";\n\nlet (first, last) = s.split_at(3);\n\nassert_eq!(\"Per\", first);\nassert_eq!(\" Martin-Löf\", last);\n```","links":{"str::split_at_checked":"2:13290:29837","str::split_at_mut":"2:13289:29834"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["mid",{"primitive":"usize"}]],"output":{"tuple":[{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:0:2379":{"id":"0:0:2379","crate_id":0,"name":"serde_derive","span":{"filename":"src/lib.rs","begin":[1,0],"end":[102,1]},"visibility":"public","docs":"This crate provides Serde's two derive macros.\n\n```edition2021\n# use serde_derive::{Deserialize, Serialize};\n#\n#[derive(Serialize, Deserialize)]\n# struct S;\n#\n# fn main() {}\n```\n\nPlease refer to [https://serde.rs/derive.html] for how to set this up.\n\n[https://serde.rs/derive.html]: https://serde.rs/derive.html","links":{},"attrs":["#![doc(html_root_url = \"https://docs.rs/serde_derive/1.0.202\")]","#![allow(unexpected_cfgs)]","#![allow(clippy::branches_sharing_code, clippy::cognitive_complexity,\nclippy::collapsible_match, clippy::derive_partial_eq_without_eq,\nclippy::enum_variant_names, clippy::manual_map,\nclippy::match_like_matches_macro, clippy::needless_pass_by_value,\nclippy::too_many_arguments, clippy::trivially_copy_pass_by_ref,\nclippy::used_underscore_binding, clippy::wildcard_in_or_patterns,\nclippy::unnested_or_patterns,)]","#![allow(clippy::cast_possible_truncation, clippy::checked_conversions,\nclippy::doc_markdown, clippy::enum_glob_use, clippy::indexing_slicing,\nclippy::items_after_statements, clippy::let_underscore_untyped,\nclippy::manual_assert, clippy::map_err_ignore, clippy::match_same_arms,\nclippy::match_wildcard_for_single_variants, clippy::module_name_repetitions,\nclippy::must_use_candidate, clippy::similar_names, clippy::single_match_else,\nclippy::struct_excessive_bools, clippy::too_many_lines,\nclippy::unseparated_literal_suffix, clippy::unused_self, clippy::use_self,\nclippy::wildcard_imports)]"],"deprecation":null,"inner":{"module":{"is_crate":true,"items":["0:964:2368","0:965:2376"],"is_stripped":false}}},"0:493-0:404:2506":{"id":"0:493-0:404:2506","crate_id":0,"name":null,"span":{"filename":"src/internals/mod.rs","begin":[14,0],"end":[14,41]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"import":{"source":"self::receiver::replace_receiver","name":"replace_receiver","id":"0:404:2506","glob":false}}},"0:63:391":{"id":"0:63:391","crate_id":0,"name":"attr","span":{"filename":"src/internals/attr.rs","begin":[1,0],"end":[1881,1]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"module":{"is_crate":false,"items":["0:86-0:994:2599"],"is_stripped":false}}},"2:13304:29850":{"id":"2:13304:29850","crate_id":2,"name":"starts_with","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a prefix of this\nstring slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, in which case this function will return true if\nthe `&str` is a prefix of this string slice.\n\nThe [pattern] can also be a [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\nThese will only be checked against the first character of this string slice.\nLook at the second example below regarding behavior for slices of [`char`]s.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.starts_with(\"bana\"));\nassert!(!bananas.starts_with(\"nana\"));\n```\n\n```\nlet bananas = \"bananas\";\n\n// Note that both of these assert successfully.\nassert!(bananas.starts_with(&['b', 'a', 'n', 'a']));\nassert!(bananas.starts_with(&['a', 'b', 'c', 'd']));\n```","links":{"prim@char":"1:12346:471","self::pattern":"2:12955:4365"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12961:16521","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13318:28703":{"id":"2:13318:28703","crate_id":2,"name":"split","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by\ncharacters matched by a pattern.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rsplit`] method can be used.\n\n[`rsplit`]: str::rsplit\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".split(' ').collect();\nassert_eq!(v, [\"Mary\", \"had\", \"a\", \"little\", \"lamb\"]);\n\nlet v: Vec<&str> = \"\".split('X').collect();\nassert_eq!(v, [\"\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".split('X').collect();\nassert_eq!(v, [\"lion\", \"\", \"tiger\", \"leopard\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".split(\"::\").collect();\nassert_eq!(v, [\"lion\", \"tiger\", \"leopard\"]);\n\nlet v: Vec<&str> = \"abc1def2ghi\".split(char::is_numeric).collect();\nassert_eq!(v, [\"abc\", \"def\", \"ghi\"]);\n\nlet v: Vec<&str> = \"lionXtigerXleopard\".split(char::is_uppercase).collect();\nassert_eq!(v, [\"lion\", \"tiger\", \"leopard\"]);\n```\n\nIf the pattern is a slice of chars, split on each occurrence of any of the characters:\n\n```\nlet v: Vec<&str> = \"2020-11-03 23:59\".split(&['-', ' ', ':', '@'][..]).collect();\nassert_eq!(v, [\"2020\", \"11\", \"03\", \"23\", \"59\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".split(|c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"abc\", \"def\", \"ghi\"]);\n```\n\nIf a string contains multiple contiguous separators, you will end up\nwith empty strings in the output:\n\n```\nlet x = \"||||a||b|c\".to_string();\nlet d: Vec<_> = x.split('|').collect();\n\nassert_eq!(d, &[\"\", \"\", \"\", \"\", \"a\", \"\", \"b\", \"c\"]);\n```\n\nContiguous separators are separated by the empty string.\n\n```\nlet x = \"(///)\".to_string();\nlet d: Vec<_> = x.split('/').collect();\n\nassert_eq!(d, &[\"(\", \"\", \"\", \")\"]);\n```\n\nSeparators at the start or end of a string are neighbored\nby empty strings.\n\n```\nlet d: Vec<_> = \"010\".split(\"0\").collect();\nassert_eq!(d, &[\"\", \"1\", \"\"]);\n```\n\nWhen the empty string is used as a separator, it separates\nevery character in the string, along with the beginning\nand end of the string.\n\n```\nlet f: Vec<_> = \"rust\".split(\"\").collect();\nassert_eq!(f, &[\"\", \"r\", \"u\", \"s\", \"t\", \"\"]);\n```\n\nContiguous separators can lead to possibly surprising behavior\nwhen whitespace is used as the separator. This code is correct:\n\n```\nlet x = \"    a  b c\".to_string();\nlet d: Vec<_> = x.split(' ').collect();\n\nassert_eq!(d, &[\"\", \"\", \"\", \"\", \"a\", \"\", \"b\", \"c\"]);\n```\n\nIt does _not_ give you:\n\n```,ignore\nassert_eq!(d, &[\"a\", \"b\", \"c\"]);\n```\n\nUse [`split_whitespace`] for this behavior.\n\n[`split_whitespace`]: str::split_whitespace","links":{"self::pattern":"2:12955:4365","`DoubleEndedIterator`":"2:8333:129","prim@char":"1:12346:471","str::split_whitespace":"2:13296:34122","str::rsplit":"2:13324:29842"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Split","id":"2:43972:9440","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12961:16521","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:86-0:994:2599":{"id":"0:86-0:994:2599","crate_id":0,"name":null,"span":{"filename":"src/internals/attr.rs","begin":[21,0],"end":[21,43]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"import":{"source":"crate::internals::case::RenameRule","name":"RenameRule","id":"0:994:2599","glob":false}}},"2:13286:36469":{"id":"2:13286:36469","crate_id":2,"name":"slice_unchecked","span":null,"visibility":"public","docs":"Creates a string slice from another string slice, bypassing safety\nchecks.\n\nThis is generally not recommended, use with caution! For a safe\nalternative see [`str`] and [`Index`].\n\n[`Index`]: crate::ops::Index\n\nThis new slice goes from `begin` to `end`, including `begin` but\nexcluding `end`.\n\nTo get a mutable string slice instead, see the\n[`slice_mut_unchecked`] method.\n\n[`slice_mut_unchecked`]: str::slice_mut_unchecked\n\n# Safety\n\nCallers of this function are responsible that three preconditions are\nsatisfied:\n\n* `begin` must not exceed `end`.\n* `begin` and `end` must be byte positions within the string slice.\n* `begin` and `end` must lie on UTF-8 sequence boundaries.\n\n# Examples\n\n```\nlet s = \"Löwe 老虎 Léopard\";\n\nunsafe {\n    assert_eq!(\"Löwe 老虎 Léopard\", s.slice_unchecked(0, 21));\n}\n\nlet s = \"Hello, world!\";\n\nunsafe {\n    assert_eq!(\"world\", s.slice_unchecked(7, 12));\n}\n```","links":{"`str`":"1:12352:1724","str::slice_mut_unchecked":"2:13287:36470","crate::ops::Index":"2:39626:3129"},"attrs":["#[deprecated(since = \"1.29.0\", note =\n\"use `get_unchecked(begin..end)` instead\")]","#[must_use]"],"deprecation":{"since":"1.29.0","note":"use `get_unchecked(begin..end)` instead"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["begin",{"primitive":"usize"}],["end",{"primitive":"usize"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"2:13359:36478":{"id":"2:13359:36478","crate_id":2,"name":"trim_start","span":null,"visibility":"public","docs":"Returns a string slice with leading whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Text directionality\n\nA string is a sequence of bytes. `start` in this context means the first\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be left side, and for right-to-left languages like\nArabic or Hebrew, this will be the right side.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\nassert_eq!(\"Hello\\tworld\\t\\n\", s.trim_start());\n```\n\nDirectionality:\n\n```\nlet s = \"  English  \";\nassert!(Some('E') == s.trim_start().chars().next());\n\nlet s = \"  עברית  \";\nassert!(Some('ע') == s.trim_start().chars().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_trim_start\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13290:29837":{"id":"2:13290:29837","crate_id":2,"name":"split_at_checked","span":null,"visibility":"public","docs":"Divide one string slice into two at an index.\n\nThe argument, `mid`, should be a valid byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point. The\nmethod returns `None` if that’s not the case.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get mutable string slices instead, see the [`split_at_mut_checked`]\nmethod.\n\n[`split_at_mut_checked`]: str::split_at_mut_checked\n\n# Examples\n\n```\nlet s = \"Per Martin-Löf\";\n\nlet (first, last) = s.split_at_checked(3).unwrap();\nassert_eq!(\"Per\", first);\nassert_eq!(\" Martin-Löf\", last);\n\nassert_eq!(None, s.split_at_checked(13));  // Inside “ö”\nassert_eq!(None, s.split_at_checked(16));  // Beyond the string length\n```","links":{"str::split_at_mut_checked":"2:13291:29838"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["mid",{"primitive":"usize"}]],"output":{"resolved_path":{"name":"Option","id":"2:42080:194","args":{"angle_bracketed":{"args":[{"type":{"tuple":[{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13374:29852":{"id":"2:13374:29852","crate_id":2,"name":"strip_suffix","span":null,"visibility":"public","docs":"Returns a string slice with the suffix removed.\n\nIf the string ends with the pattern `suffix`, returns the substring before the suffix,\nwrapped in `Some`.  Unlike `trim_end_matches`, this method removes the suffix exactly once.\n\nIf the string does not end with `suffix`, returns `None`.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nassert_eq!(\"bar:foo\".strip_suffix(\":foo\"), Some(\"bar\"));\nassert_eq!(\"bar:foo\".strip_suffix(\"bar\"), None);\nassert_eq!(\"foofoo\".strip_suffix(\"foo\"), Some(\"foo\"));\n```","links":{"prim@char":"1:12346:471","self::pattern":"2:12955:4365"},"attrs":["#[must_use =\n\"this returns the remaining substring as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["suffix",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:42080:194","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12961:16521","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12961:16521","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12976:16522","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13388:28613":{"id":"2:13388:28613","crate_id":2,"name":"is_ascii","span":null,"visibility":"public","docs":"Checks if all characters in this string are within the ASCII range.\n\n# Examples\n\n```\nlet ascii = \"hello!\\n\";\nlet non_ascii = \"Grüße, Jürgen ❤\";\n\nassert!(ascii.is_ascii());\nassert!(!non_ascii.is_ascii());\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5628:37181":{"id":"5:5628:37181","crate_id":5,"name":"to_lowercase","span":null,"visibility":"public","docs":"Returns the lowercase equivalent of this string slice, as a new [`String`].\n\n'Lowercase' is defined according to the terms of the Unicode Derived Core Property\n`Lowercase`.\n\nSince some characters can expand into multiple characters when changing\nthe case, this function returns a [`String`] instead of modifying the\nparameter in-place.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"HELLO\";\n\nassert_eq!(\"hello\", s.to_lowercase());\n```\n\nA tricky example, with sigma:\n\n```\nlet sigma = \"Σ\";\n\nassert_eq!(\"σ\", sigma.to_lowercase());\n\n// but at the end of a word, it's ς, not σ:\nlet odysseus = \"ὈΔΥΣΣΕΎΣ\";\n\nassert_eq!(\"ὀδυσσεύς\", odysseus.to_lowercase());\n```\n\nLanguages without case are not changed:\n\n```\nlet new_year = \"农历新年\";\n\nassert_eq!(new_year, new_year.to_lowercase());\n```","links":{"`String`":"5:7652:243"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the lowercase string as a new String, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7652:243","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13361:36479":{"id":"2:13361:36479","crate_id":2,"name":"trim_end","span":null,"visibility":"public","docs":"Returns a string slice with trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Text directionality\n\nA string is a sequence of bytes. `end` in this context means the last\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be right side, and for right-to-left languages like\nArabic or Hebrew, this will be the left side.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\nassert_eq!(\"\\n Hello\\tworld\", s.trim_end());\n```\n\nDirectionality:\n\n```\nlet s = \"  English  \";\nassert!(Some('h') == s.trim_end().chars().rev().next());\n\nlet s = \"  עברית  \";\nassert!(Some('ת') == s.trim_end().chars().rev().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_trim_end\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5638:4021":{"id":"5:5638:4021","crate_id":5,"name":"repeat","span":null,"visibility":"public","docs":"Creates a new [`String`] by repeating a string `n` times.\n\n# Panics\n\nThis function will panic if the capacity would overflow.\n\n# Examples\n\nBasic usage:\n\n```\nassert_eq!(\"abc\".repeat(4), String::from(\"abcabcabcabc\"));\n```\n\nA panic upon overflow:\n\n```should_panic\n// this will panic at runtime\nlet huge = \"0123456789abcdef\".repeat(usize::MAX);\n```","links":{"`String`":"5:7652:243"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["n",{"primitive":"usize"}]],"output":{"resolved_path":{"name":"String","id":"5:7652:243","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13267:2723":{"id":"2:13267:2723","crate_id":2,"name":"is_empty","span":null,"visibility":"public","docs":"Returns `true` if `self` has a length of zero bytes.\n\n# Examples\n\n```\nlet s = \"\";\nassert!(s.is_empty());\n\nlet s = \"not empty\";\nassert!(!s.is_empty());\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13284:29810":{"id":"2:13284:29810","crate_id":2,"name":"get_unchecked_mut","span":null,"visibility":"public","docs":"Returns a mutable, unchecked subslice of `str`.\n\nThis is the unchecked alternative to indexing the `str`.\n\n# Safety\n\nCallers of this function are responsible that these preconditions are\nsatisfied:\n\n* The starting index must not exceed the ending index;\n* Indexes must be within bounds of the original slice;\n* Indexes must lie on UTF-8 sequence boundaries.\n\nFailing that, the returned string slice may reference invalid memory or\nviolate the invariants communicated by the `str` type.\n\n# Examples\n\n```\nlet mut v = String::from(\"🗻∈🌏\");\nunsafe {\n    assert_eq!(\"🗻\", v.get_unchecked_mut(0..4));\n    assert_eq!(\"∈\", v.get_unchecked_mut(4..7));\n    assert_eq!(\"🌏\", v.get_unchecked_mut(7..11));\n}\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"2:11045:239","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"2:11045:239","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"2:13386:2594":{"id":"2:13386:2594","crate_id":2,"name":"parse","span":null,"visibility":"public","docs":"Parses this string slice into another type.\n\nBecause `parse` is so general, it can cause problems with type\ninference. As such, `parse` is one of the few times you'll see\nthe syntax affectionately known as the 'turbofish': `::<>`. This\nhelps the inference algorithm understand specifically which type\nyou're trying to parse into.\n\n`parse` can parse into any type that implements the [`FromStr`] trait.\n\n# Errors\n\nWill return [`Err`] if it's not possible to parse this string slice into\nthe desired type.\n\n[`Err`]: FromStr::Err\n\n# Examples\n\nBasic usage\n\n```\nlet four: u32 = \"4\".parse().unwrap();\n\nassert_eq!(4, four);\n```\n\nUsing the 'turbofish' instead of annotating `four`:\n\n```\nlet four = \"4\".parse::<u32>();\n\nassert_eq!(Ok(4), four);\n```\n\nFailing to parse:\n\n```\nlet nope = \"j\".parse::<u32>();\n\nassert!(nope.is_err());\n```","links":{"FromStr::Err":"2:12916:136","`FromStr`":"2:12915:3976"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Result","id":"2:42213:226","args":{"angle_bracketed":{"args":[{"type":{"generic":"F"}},{"type":{"qualified_path":{"name":"Err","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"F"},"trait":{"name":"FromStr","id":"2:12915:3976","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"F"},"bounds":[{"trait_bound":{"trait":{"name":"FromStr","id":"2:12915:3976","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5622:2753":{"id":"5:5622:2753","crate_id":5,"name":"replace","span":null,"visibility":"public","docs":"Replaces all matches of a pattern with another string.\n\n`replace` creates a new [`String`], and copies the data from this string slice into it.\nWhile doing so, it attempts to find matches of a pattern. If it finds any, it\nreplaces them with the replacement string slice.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"this is old\";\n\nassert_eq!(\"this is new\", s.replace(\"old\", \"new\"));\nassert_eq!(\"than an old\", s.replace(\"is\", \"an\"));\n```\n\nWhen the pattern doesn't match, it returns this string slice as [`String`]:\n\n```\nlet s = \"this is old\";\nassert_eq!(s, s.replace(\"cookie monster\", \"little lamb\"));\n```","links":{"`String`":"5:7652:243"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the replaced string as a new allocation, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["from",{"generic":"P"}],["to",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7652:243","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12961:16521","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13293:2966":{"id":"2:13293:2966","crate_id":2,"name":"chars","span":null,"visibility":"public","docs":"Returns an iterator over the [`char`]s of a string slice.\n\nAs a string slice consists of valid UTF-8, we can iterate through a\nstring slice by [`char`]. This method returns such an iterator.\n\nIt's important to remember that [`char`] represents a Unicode Scalar\nValue, and might not match your idea of what a 'character' is. Iteration\nover grapheme clusters may be what you actually want. This functionality\nis not provided by Rust's standard library, check crates.io instead.\n\n# Examples\n\nBasic usage:\n\n```\nlet word = \"goodbye\";\n\nlet count = word.chars().count();\nassert_eq!(7, count);\n\nlet mut chars = word.chars();\n\nassert_eq!(Some('g'), chars.next());\nassert_eq!(Some('o'), chars.next());\nassert_eq!(Some('o'), chars.next());\nassert_eq!(Some('d'), chars.next());\nassert_eq!(Some('b'), chars.next());\nassert_eq!(Some('y'), chars.next());\nassert_eq!(Some('e'), chars.next());\n\nassert_eq!(None, chars.next());\n```\n\nRemember, [`char`]s might not match your intuition about characters:\n\n[`char`]: prim@char\n\n```\nlet y = \"y̆\";\n\nlet mut chars = y.chars();\n\nassert_eq!(Some('y'), chars.next()); // not 'y̆'\nassert_eq!(Some('\\u{0306}'), chars.next());\n\nassert_eq!(None, chars.next());\n```","links":{"prim@char":"1:12346:471"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Chars","id":"2:43942:9508","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13268:36465":{"id":"2:13268:36465","crate_id":2,"name":"is_char_boundary","span":null,"visibility":"public","docs":"Checks that `index`-th byte is the first byte in a UTF-8 code point\nsequence or the end of the string.\n\nThe start and end of the string (when `index == self.len()`) are\nconsidered to be boundaries.\n\nReturns `false` if `index` is greater than `self.len()`.\n\n# Examples\n\n```\nlet s = \"Löwe 老虎 Léopard\";\nassert!(s.is_char_boundary(0));\n// start of `老`\nassert!(s.is_char_boundary(6));\nassert!(s.is_char_boundary(s.len()));\n\n// second byte of `ö`\nassert!(!s.is_char_boundary(2));\n\n// third byte of `老`\nassert!(!s.is_char_boundary(8));\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["index",{"primitive":"usize"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13274:3484":{"id":"2:13274:3484","crate_id":2,"name":"as_bytes","span":null,"visibility":"public","docs":"Converts a string slice to a byte slice. To convert the byte slice back\ninto a string slice, use the [`from_utf8`] function.\n\n# Examples\n\n```\nlet bytes = \"bors\".as_bytes();\nassert_eq!(b\"bors\", bytes);\n```","links":{"`from_utf8`":"2:12502:16524"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"primitive":"u8"}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13298:28704":{"id":"2:13298:28704","crate_id":2,"name":"lines","span":null,"visibility":"public","docs":"An iterator over the lines of a string, as string slices.\n\nLines are split at line endings that are either newlines (`\\n`) or\nsequences of a carriage return followed by a line feed (`\\r\\n`).\n\nLine terminators are not included in the lines returned by the iterator.\n\nNote that any carriage return (`\\r`) not immediately followed by a\nline feed (`\\n`) does not split a line. These carriage returns are\nthereby included in the produced lines.\n\nThe final line ending is optional. A string that ends with a final line\nending will return the same lines as an otherwise identical string\nwithout a final line ending.\n\n# Examples\n\nBasic usage:\n\n```\nlet text = \"foo\\r\\nbar\\n\\nbaz\\r\";\nlet mut lines = text.lines();\n\nassert_eq!(Some(\"foo\"), lines.next());\nassert_eq!(Some(\"bar\"), lines.next());\nassert_eq!(Some(\"\"), lines.next());\n// Trailing carriage return is included in the last line\nassert_eq!(Some(\"baz\\r\"), lines.next());\n\nassert_eq!(None, lines.next());\n```\n\nThe final line does not require any ending:\n\n```\nlet text = \"foo\\nbar\\n\\r\\nbaz\";\nlet mut lines = text.lines();\n\nassert_eq!(Some(\"foo\"), lines.next());\nassert_eq!(Some(\"bar\"), lines.next());\nassert_eq!(Some(\"\"), lines.next());\nassert_eq!(Some(\"baz\"), lines.next());\n\nassert_eq!(None, lines.next());\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Lines","id":"2:44226:9525","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13307:29851":{"id":"2:13307:29851","crate_id":2,"name":"ends_with","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a suffix of this\nstring slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.ends_with(\"anas\"));\nassert!(!bananas.ends_with(\"nana\"));\n```","links":{"prim@char":"1:12346:471","self::pattern":"2:12955:4365"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12961:16521","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12961:16521","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12976:16522","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:965:2376":{"id":"0:965:2376","crate_id":0,"name":"Deserialize","span":{"filename":"src/lib.rs","begin":[97,0],"end":[102,1]},"visibility":"public","docs":null,"links":{},"attrs":["#[proc_macro_derive(Deserialize, attributes(serde))]"],"deprecation":null,"inner":{"proc_macro":{"kind":"derive","helpers":["serde"]}}},"2:13282:29809":{"id":"2:13282:29809","crate_id":2,"name":"get_unchecked","span":null,"visibility":"public","docs":"Returns an unchecked subslice of `str`.\n\nThis is the unchecked alternative to indexing the `str`.\n\n# Safety\n\nCallers of this function are responsible that these preconditions are\nsatisfied:\n\n* The starting index must not exceed the ending index;\n* Indexes must be within bounds of the original slice;\n* Indexes must lie on UTF-8 sequence boundaries.\n\nFailing that, the returned string slice may reference invalid memory or\nviolate the invariants communicated by the `str` type.\n\n# Examples\n\n```\nlet v = \"🗻∈🌏\";\nunsafe {\n    assert_eq!(\"🗻\", v.get_unchecked(0..4));\n    assert_eq!(\"∈\", v.get_unchecked(4..7));\n    assert_eq!(\"🌏\", v.get_unchecked(7..11));\n}\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"2:11045:239","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"2:11045:239","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"2:13396:36486":{"id":"2:13396:36486","crate_id":2,"name":"escape_debug","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_debug`].\n\nNote: only extended grapheme codepoints that begin the string will be\nescaped.\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"❤\\n!\".escape_debug() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"❤\\n!\".escape_debug());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"❤\\\\n!\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"❤\\n!\".escape_debug().to_string(), \"❤\\\\n!\");\n```","links":{"`char::escape_debug`":"2:5022:36486"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EscapeDebug","id":"2:44271:9473","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13389:31059":{"id":"2:13389:31059","crate_id":2,"name":"as_ascii","span":null,"visibility":"public","docs":"If this string slice [`is_ascii`](Self::is_ascii), returns it as a slice\nof [ASCII characters](`ascii::Char`), otherwise returns `None`.","links":{"`ascii::Char`":"2:39981:5120","Self::is_ascii":"2:13388:28613"},"attrs":["#[unstable(feature = \"ascii_char\", issue = \"110998\")]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Option","id":"2:42080:194","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"resolved_path":{"name":"AsciiChar","id":"2:39981:5120","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13348:36474":{"id":"2:13348:36474","crate_id":2,"name":"rmatches","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within this string slice,\nyielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`matches`] method can be used.\n\n[`matches`]: str::matches\n\n# Examples\n\n```\nlet v: Vec<&str> = \"abcXXXabcYYYabc\".rmatches(\"abc\").collect();\nassert_eq!(v, [\"abc\", \"abc\", \"abc\"]);\n\nlet v: Vec<&str> = \"1abc2abc3\".rmatches(char::is_numeric).collect();\nassert_eq!(v, [\"3\", \"2\", \"1\"]);\n```","links":{"self::pattern":"2:12955:4365","`DoubleEndedIterator`":"2:8333:129","prim@char":"1:12346:471","str::matches":"2:13345:2719"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RMatches","id":"2:44194:9524","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12961:16521","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12961:16521","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12976:16522","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13291:29838":{"id":"2:13291:29838","crate_id":2,"name":"split_at_mut_checked","span":null,"visibility":"public","docs":"Divide one mutable string slice into two at an index.\n\nThe argument, `mid`, should be a valid byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point. The\nmethod returns `None` if that’s not the case.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get immutable string slices instead, see the [`split_at_checked`] method.\n\n[`split_at_checked`]: str::split_at_checked\n\n# Examples\n\n```\nlet mut s = \"Per Martin-Löf\".to_string();\nif let Some((first, last)) = s.split_at_mut_checked(3) {\n    first.make_ascii_uppercase();\n    assert_eq!(\"PER\", first);\n    assert_eq!(\" Martin-Löf\", last);\n}\nassert_eq!(\"PER Martin-Löf\", s);\n\nassert_eq!(None, s.split_at_mut_checked(13));  // Inside “ö”\nassert_eq!(None, s.split_at_mut_checked(16));  // Beyond the string length\n```","links":{"str::split_at_checked":"2:13290:29837"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["mid",{"primitive":"usize"}]],"output":{"resolved_path":{"name":"Option","id":"2:42080:194","args":{"angle_bracketed":{"args":[{"type":{"tuple":[{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13289:29834":{"id":"2:13289:29834","crate_id":2,"name":"split_at_mut","span":null,"visibility":"public","docs":"Divide one mutable string slice into two at an index.\n\nThe argument, `mid`, should be a byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get immutable string slices instead, see the [`split_at`] method.\n\n[`split_at`]: str::split_at\n\n# Panics\n\nPanics if `mid` is not on a UTF-8 code point boundary, or if it is past\nthe end of the last code point of the string slice.  For a non-panicking\nalternative see [`split_at_mut_checked`](str::split_at_mut_checked).\n\n# Examples\n\n```\nlet mut s = \"Per Martin-Löf\".to_string();\n{\n    let (first, last) = s.split_at_mut(3);\n    first.make_ascii_uppercase();\n    assert_eq!(\"PER\", first);\n    assert_eq!(\" Martin-Löf\", last);\n}\nassert_eq!(\"PER Martin-Löf\", s);\n```","links":{"str::split_at":"2:13288:3372","str::split_at_mut_checked":"2:13291:29838"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["mid",{"primitive":"usize"}]],"output":{"tuple":[{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:964:2368":{"id":"0:964:2368","crate_id":0,"name":"Serialize","span":{"filename":"src/lib.rs","begin":[89,0],"end":[94,1]},"visibility":"public","docs":null,"links":{},"attrs":["#[proc_macro_derive(Serialize, attributes(serde))]"],"deprecation":null,"inner":{"proc_macro":{"kind":"derive","helpers":["serde"]}}},"2:13392:28617":{"id":"2:13392:28617","crate_id":2,"name":"make_ascii_lowercase","span":null,"visibility":"public","docs":"Converts this string to its ASCII lower case equivalent in-place.\n\nASCII letters 'A' to 'Z' are mapped to 'a' to 'z',\nbut non-ASCII letters are unchanged.\n\nTo return a new lowercased value without modifying the existing one, use\n[`to_ascii_lowercase()`].\n\n[`to_ascii_lowercase()`]: #method.to_ascii_lowercase\n\n# Examples\n\n```\nlet mut s = String::from(\"GRÜßE, JÜRGEN ❤\");\n\ns.make_ascii_lowercase();\n\nassert_eq!(\"grÜße, jÜrgen ❤\", s);\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}}},"paths":{"2:40440:34288":{"crate_id":2,"path":["core","char","convert","CharErrorKind"],"kind":"enum"},"2:32372:5103":{"crate_id":2,"path":["core","marker","PhantomPinned"],"kind":"struct"},"24:5013:3855":{"crate_id":24,"path":["syn","attr","MetaList"],"kind":"struct"},"2:8063:4017":{"crate_id":2,"path":["core","iter","sources","once","once"],"kind":"function"},"11:102:9396":{"crate_id":11,"path":["hashbrown","raw","Bucket"],"kind":"struct"},"17:12530:24143":{"crate_id":17,"path":["object","read","xcoff","section","XcoffSectionIterator"],"kind":"struct"},"1:4487:11259":{"crate_id":1,"path":["std","os","unix","net","listener","UnixListener"],"kind":"struct"},"2:44226:9525":{"crate_id":2,"path":["core","str","iter","Lines"],"kind":"struct"},"2:10399:206":{"crate_id":2,"path":["core","fmt","Pointer"],"kind":"trait"},"24:3138:2569":{"crate_id":24,"path":["syn","token","Box"],"kind":"struct"},"1:12349:1316":{"crate_id":1,"path":["std","pointer"],"kind":"primitive"},"24:4317:4234":{"crate_id":24,"path":["syn","token","AndEq"],"kind":"struct"},"6:1510:7591":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr"],"kind":"struct"},"6:7330:8394":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","flock"],"kind":"struct"},"16:2708:7103":{"crate_id":16,"path":["gimli","common","DebugRngListsBase"],"kind":"struct"},"24:3427:4214":{"crate_id":24,"path":["syn","token","Let"],"kind":"struct"},"17:13015:6233":{"crate_id":17,"path":["object","read","Relocation"],"kind":"struct"},"11:2301:9374":{"crate_id":11,"path":["hashbrown","table","Entry"],"kind":"enum"},"2:42302:89":{"crate_id":2,"path":["core","sync","atomic","AtomicI8"],"kind":"struct"},"6:7359:8406":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stack_t"],"kind":"struct"},"13:229:7421":{"crate_id":13,"path":["std_detect","detect","cache","Initializer"],"kind":"struct"},"6:1547:7614":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_ll"],"kind":"struct"},"17:14271:6526":{"crate_id":17,"path":["object","macho","PrebindCksumCommand"],"kind":"struct"},"2:41874:11204":{"crate_id":2,"path":["core","net","ip_addr","Ipv6MulticastScope"],"kind":"enum"},"1:12356:737":{"crate_id":1,"path":["std","f16"],"kind":"primitive"},"24:3325:4209":{"crate_id":24,"path":["syn","token","Final"],"kind":"struct"},"2:8251:4035":{"crate_id":2,"path":["core","iter","traits","accum","Product"],"kind":"trait"},"24:1101:3911":{"crate_id":24,"path":["syn","generics","ImplGenerics"],"kind":"struct"},"24:4607:4253":{"crate_id":24,"path":["syn","token","MinusEq"],"kind":"struct"},"17:14260:6525":{"crate_id":17,"path":["object","macho","TwolevelHint"],"kind":"struct"},"24:6019:3943":{"crate_id":24,"path":["syn","ty","TypeTuple"],"kind":"struct"},"6:6738:8306":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_umem_reg_v1"],"kind":"struct"},"2:3701:4126":{"crate_id":2,"path":["core","ops","unsize","CoerceUnsized"],"kind":"trait"},"24:5286:3885":{"crate_id":24,"path":["syn","expr","ExprAsync"],"kind":"struct"},"17:13538:6372":{"crate_id":17,"path":["object","elf","Verneed"],"kind":"struct"},"2:44947:10303":{"crate_id":2,"path":["core","task","wake","RawWaker"],"kind":"struct"},"24:5082:2859":{"crate_id":24,"path":["syn","expr","Expr"],"kind":"enum"},"2:3656:254":{"crate_id":2,"path":["core","ops","try_trait","Try"],"kind":"trait"},"2:45005:9567":{"crate_id":2,"path":["core","alloc","layout","LayoutError"],"kind":"struct"},"2:2132:5504":{"crate_id":2,"path":["core","ptr","metadata","Pointee"],"kind":"trait"},"11:2545:7423":{"crate_id":11,"path":["hashbrown","raw","bitmask","BitMaskIter"],"kind":"struct"},"17:13235:2521":{"crate_id":17,"path":["object","elf","Ident"],"kind":"struct"},"1:9411:5793":{"crate_id":1,"path":["std","sync","poison","Guard"],"kind":"struct"},"16:6758:7213":{"crate_id":16,"path":["gimli","read","line","LineRow"],"kind":"struct"},"2:44280:9467":{"crate_id":2,"path":["core","str","iter","EscapeDefault"],"kind":"struct"},"2:44714:9562":{"crate_id":2,"path":["core","str","BytesIsNotEmpty"],"kind":"struct"},"17:14529:6568":{"crate_id":17,"path":["object","macho","NoteCommand"],"kind":"struct"},"16:4976:7164":{"crate_id":16,"path":["gimli","constants","DwLns"],"kind":"struct"},"1:3303:33276":{"crate_id":1,"path":["std","io","stdio","StderrRaw"],"kind":"struct"},"1:8546:9440":{"crate_id":1,"path":["std","io","Split"],"kind":"struct"},"17:9916:23950":{"crate_id":17,"path":["object","common","SymbolScope"],"kind":"enum"},"17:15249:6797":{"crate_id":17,"path":["object","pe","ImageExportDirectory"],"kind":"struct"},"1:938:5551":{"crate_id":1,"path":["std","collections","hash","map","ExtractIf"],"kind":"struct"},"2:12000:16507":{"crate_id":2,"path":["core","slice","iter","ChunkBy"],"kind":"struct"},"2:41902:2588":{"crate_id":2,"path":["core","net","ip_addr","fmt","Span"],"kind":"struct"},"2:4485:5452":{"crate_id":2,"path":["core","async_iter","async_iter","AsyncIterator"],"kind":"trait"},"24:5674:3914":{"crate_id":24,"path":["syn","lit","LitBool"],"kind":"struct"},"1:4333:11255":{"crate_id":1,"path":["std","os","unix","net","ancillary","ScmCredentials"],"kind":"struct"},"16:6442:9320":{"crate_id":16,"path":["gimli","read","abbrev","Abbreviation"],"kind":"struct"},"17:14284:6528":{"crate_id":17,"path":["object","macho","UuidCommand"],"kind":"struct"},"17:14091:6481":{"crate_id":17,"path":["object","macho","RoutinesCommand32"],"kind":"struct"},"17:13064:6276":{"crate_id":17,"path":["object","read","CompressedData"],"kind":"struct"},"16:5400:6147":{"crate_id":16,"path":["gimli","endianity","BigEndian"],"kind":"struct"},"16:8188:23892":{"crate_id":16,"path":["gimli","read","unit","EntriesTreeIter"],"kind":"struct"},"1:12318:11068":{"crate_id":1,"path":["std","backtrace_rs","types","BytesOrWideString"],"kind":"enum"},"1:7150:11356":{"crate_id":1,"path":["std","std_float","StdFloat"],"kind":"trait"},"1:6199:220":{"crate_id":1,"path":["std","sync","mpmc","counter","Receiver"],"kind":"struct"},"6:4811:7743":{"crate_id":6,"path":["libc","unix","linux_like","linux","spwd"],"kind":"struct"},"1:6572:186":{"crate_id":1,"path":["std","sync","mutex","Mutex"],"kind":"struct"},"11:328:9400":{"crate_id":11,"path":["hashbrown","raw","RawIter"],"kind":"struct"},"6:8328:8554":{"crate_id":6,"path":["libc","unix","linux_like","linux","canxl_frame"],"kind":"struct"},"16:8136:9389":{"crate_id":16,"path":["gimli","read","unit","EntriesCursor"],"kind":"struct"},"17:15410:6843":{"crate_id":17,"path":["object","pe","ImageDynamicRelocationTable"],"kind":"struct"},"21:952:2588":{"crate_id":21,"path":["proc_macro","bridge","client","Span"],"kind":"struct"},"24:5971:3931":{"crate_id":24,"path":["syn","ty","TypeArray"],"kind":"struct"},"2:44022:9514":{"crate_id":2,"path":["core","str","iter","SplitTerminator"],"kind":"struct"},"24:3750:2504":{"crate_id":24,"path":["syn","token","Type"],"kind":"struct"},"1:3395:11194":{"crate_id":1,"path":["std","io","stdio","StdoutLock"],"kind":"struct"},"1:10952:9008":{"crate_id":1,"path":["std","sys","pal","unix","fs","FileTimes"],"kind":"struct"},"1:2495:11146":{"crate_id":1,"path":["std","fs","read_dir"],"kind":"function"},"24:3682:2536":{"crate_id":24,"path":["syn","token","Struct"],"kind":"struct"},"17:11016:23974":{"crate_id":17,"path":["object","read","archive","ArchiveMemberIterator"],"kind":"struct"},"2:9852:84":{"crate_id":2,"path":["core","sync","atomic","AtomicBool"],"kind":"struct"},"1:11219:9072":{"crate_id":1,"path":["std","sys","pal","unix","process","process_inner","ExitStatusError"],"kind":"struct"},"5:3263:36257":{"crate_id":5,"path":["alloc","collections","btree","set","DifferenceInner"],"kind":"enum"},"16:7590:7128":{"crate_id":16,"path":["gimli","read","rnglists","DebugRanges"],"kind":"struct"},"16:150:5758":{"crate_id":16,"path":["gimli","read","util","ArrayVec"],"kind":"struct"},"2:3661:146":{"crate_id":2,"path":["core","ops","try_trait","FromResidual"],"kind":"trait"},"5:7675:10581":{"crate_id":5,"path":["alloc","string","FromUtf16Error"],"kind":"struct"},"24:4443:4242":{"crate_id":24,"path":["syn","token","DotDot"],"kind":"struct"},"11:1674:5766":{"crate_id":11,"path":["hashbrown","scopeguard","ScopeGuard"],"kind":"struct"},"6:6505:8201":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","mallinfo2"],"kind":"struct"},"1:8099:10588":{"crate_id":1,"path":["std","env","JoinPathsError"],"kind":"struct"},"2:2712:103":{"crate_id":2,"path":["core","borrow","BorrowMut"],"kind":"trait"},"2:12770:9442":{"crate_id":2,"path":["core","str","iter","SplitInclusive"],"kind":"struct"},"24:5895:2504":{"crate_id":24,"path":["syn","ty","Type"],"kind":"enum"},"5:3674:3956":{"crate_id":5,"path":["alloc","collections","linked_list","IterMut"],"kind":"struct"},"21:1781:5573":{"crate_id":21,"path":["proc_macro","bridge","Marked"],"kind":"struct"},"17:12371:6266":{"crate_id":17,"path":["object","read","pe","import","Import"],"kind":"enum"},"16:3329:7137":{"crate_id":16,"path":["gimli","arch","LoongArch"],"kind":"struct"},"1:4139:11228":{"crate_id":1,"path":["std","os","unix","fs","FileExt"],"kind":"trait"},"17:11537:24027":{"crate_id":17,"path":["object","read","elf","note","NoteIterator"],"kind":"struct"},"6:6821:8333":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","utmpx"],"kind":"struct"},"6:4891:7796":{"crate_id":6,"path":["libc","unix","linux_like","linux","if_nameindex"],"kind":"struct"},"6:5266:7937":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_extended_err"],"kind":"struct"},"17:15138:6770":{"crate_id":17,"path":["object","pe","ImageAuxSymbolFunction"],"kind":"struct"},"16:2660:7101":{"crate_id":16,"path":["gimli","common","RawRangeListsOffset"],"kind":"struct"},"18:515:6026":{"crate_id":18,"path":["memchr","memmem","prefilter","PrefilterFn"],"kind":"struct"},"2:1827:5307":{"crate_id":2,"path":["core","intrinsics","AggregateRawPtr"],"kind":"trait"},"17:15092:6764":{"crate_id":17,"path":["object","pe","ImageSymbolBytes"],"kind":"struct"},"17:15655:6924":{"crate_id":17,"path":["object","pe","ImageEnclaveConfig32"],"kind":"struct"},"24:5434:3906":{"crate_id":24,"path":["syn","expr","ExprWhile"],"kind":"struct"},"16:6160:22982":{"crate_id":16,"path":["gimli","read","cfi","CallFrameInstruction"],"kind":"enum"},"16:4502:7149":{"crate_id":16,"path":["gimli","constants","DwLle"],"kind":"struct"},"18:698:9199":{"crate_id":18,"path":["memchr","memmem","FinderBuilder"],"kind":"struct"},"2:41079:4062":{"crate_id":2,"path":["core","iter","adapters","take_while","TakeWhile"],"kind":"struct"},"17:12127:6222":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbolTable"],"kind":"struct"},"16:2684:7102":{"crate_id":16,"path":["gimli","common","RangeListsOffset"],"kind":"struct"},"6:5112:7885":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Sym"],"kind":"struct"},"17:10284:6151":{"crate_id":17,"path":["object","endian","I16Bytes"],"kind":"struct"},"16:5914:9269":{"crate_id":16,"path":["gimli","read","cfi","AugmentationData"],"kind":"struct"},"10:0:3707":{"crate_id":10,"path":["adler"],"kind":"module"},"2:2067:1360":{"crate_id":2,"path":["core","ptr"],"kind":"module"},"24:3495:4216":{"crate_id":24,"path":["syn","token","Mod"],"kind":"struct"},"6:1628:7672":{"crate_id":6,"path":["libc","unix","linux_like","ifaddrs"],"kind":"struct"},"1:1481:156":{"crate_id":1,"path":["std","collections","hash","set","HashSet"],"kind":"struct"},"21:2677:2509":{"crate_id":21,"path":["proc_macro","Group"],"kind":"struct"},"17:11557:24056":{"crate_id":17,"path":["object","read","elf","note","GnuPropertyIterator"],"kind":"struct"},"6:4916:7812":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_event"],"kind":"struct"},"6:5677:8121":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_can"],"kind":"struct"},"1:6799:11324":{"crate_id":1,"path":["std","sync","poison","TryLockError"],"kind":"enum"},"6:6768:8316":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_desc"],"kind":"struct"},"17:11367:6165":{"crate_id":17,"path":["object","read","elf","section","SectionTable"],"kind":"struct"},"24:5672:3919":{"crate_id":24,"path":["syn","lit","LitFloat"],"kind":"struct"},"24:5325:3891":{"crate_id":24,"path":["syn","expr","ExprContinue"],"kind":"struct"},"24:5071:2736":{"crate_id":24,"path":["syn","derive","DataStruct"],"kind":"struct"},"18:726:6045":{"crate_id":18,"path":["memchr","memmem","SearcherConfig"],"kind":"struct"},"6:7452:8437":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_fpxreg"],"kind":"struct"},"1:871:3952":{"crate_id":1,"path":["std","collections","hash","map","Iter"],"kind":"struct"},"1:9249:11330":{"crate_id":1,"path":["std","sync","mpsc","TrySendError"],"kind":"enum"},"11:835:11072":{"crate_id":11,"path":["hashbrown","map","RawEntryBuilderMut"],"kind":"struct"},"16:4718:7155":{"crate_id":16,"path":["gimli","constants","DwLang"],"kind":"struct"},"2:3253:5102":{"crate_id":2,"path":["core","marker","FnPtr"],"kind":"trait"},"2:33952:5982":{"crate_id":2,"path":["core","ops","bit","BitAnd"],"kind":"trait"},"2:11487:9518":{"crate_id":2,"path":["core","slice","iter","RSplitN"],"kind":"struct"},"17:13814:6442":{"crate_id":17,"path":["object","macho","MachHeader64"],"kind":"struct"},"1:4886:11261":{"crate_id":1,"path":["std","os","linux","process","CommandExt"],"kind":"trait"},"16:3669:6054":{"crate_id":16,"path":["gimli","arch","X86_64"],"kind":"struct"},"2:32314:244":{"crate_id":2,"path":["core","marker","StructuralPartialEq"],"kind":"trait"},"1:12362:899":{"crate_id":1,"path":["std","i32"],"kind":"primitive"},"17:15058:6752":{"crate_id":17,"path":["object","pe","ImageSectionHeader"],"kind":"struct"},"5:7629:9430":{"crate_id":5,"path":["alloc","ffi","c_str","IntoStringError"],"kind":"struct"},"6:1559:7622":{"crate_id":6,"path":["libc","unix","linux_like","fd_set"],"kind":"struct"},"1:3438:11190":{"crate_id":1,"path":["std","io","stdio","StderrLock"],"kind":"struct"},"1:320:1776":{"crate_id":1,"path":["std","thread"],"kind":"module"},"5:219:5466":{"crate_id":5,"path":["alloc","boxed","thin","ThinBox"],"kind":"struct"},"2:44686:9555":{"crate_id":2,"path":["core","str","LinesMap"],"kind":"struct"},"6:4885:7794":{"crate_id":6,"path":["libc","unix","linux_like","linux","cpu_set_t"],"kind":"struct"},"24:1702:2593":{"crate_id":24,"path":["syn","meta","ParseNestedMeta"],"kind":"struct"},"6:485:7518":{"crate_id":6,"path":["libc","unix","timespec"],"kind":"struct"},"24:2094:11004":{"crate_id":24,"path":["syn","path","printing","span","QSelfDelimiters"],"kind":"struct"},"1:11113:5881":{"crate_id":1,"path":["std","sys","pal","unix","process","process_inner","posix_spawn","PosixSpawnattr"],"kind":"struct"},"5:7400:9421":{"crate_id":5,"path":["alloc","collections","binary_heap","IntoIterSorted"],"kind":"struct"},"5:7665:9431":{"crate_id":5,"path":["alloc","string","FromUtf8Error"],"kind":"struct"},"14:0:3710":{"crate_id":14,"path":["rustc_demangle"],"kind":"module"},"1:3667:11152":{"crate_id":1,"path":["std","io","Seek"],"kind":"trait"},"24:5457:58":{"crate_id":24,"path":["syn","expr","parsing","kw","builtin"],"kind":"struct"},"16:8093:7331":{"crate_id":16,"path":["gimli","read","unit","AttrsIter"],"kind":"struct"},"17:10612:23956":{"crate_id":17,"path":["object","read","any","SectionIterator"],"kind":"struct"},"17:11102:23982":{"crate_id":17,"path":["object","read","coff","section","CoffSegment"],"kind":"struct"},"2:22354:11154":{"crate_id":2,"path":["core","core_simd","vector","sealed","Sealed"],"kind":"trait"},"17:0:3713":{"crate_id":17,"path":["object"],"kind":"module"},"24:1069:37714":{"crate_id":24,"path":["syn","generics","TypeParams"],"kind":"struct"},"21:242:37553":{"crate_id":21,"path":["proc_macro","bridge","handle","OwnedStore"],"kind":"struct"},"6:6874:8344":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","sigset_t"],"kind":"struct"},"17:16223:7068":{"crate_id":17,"path":["object","xcoff","StatAux"],"kind":"struct"},"2:8441:178":{"crate_id":2,"path":["core","iter","traits","iterator","Iterator"],"kind":"trait"},"24:661:9148":{"crate_id":24,"path":["syn","error","ErrorMessage"],"kind":"struct"},"2:3686:34319":{"crate_id":2,"path":["core","ops","try_trait","NeverShortCircuitResidual"],"kind":"enum"},"2:4882:4122":{"crate_id":2,"path":["core","cell","UnsafeCell"],"kind":"struct"},"1:8659:8410":{"crate_id":1,"path":["std","os","linux","raw","arch","stat"],"kind":"struct"},"16:6813:9344":{"crate_id":16,"path":["gimli","read","line","LineProgramHeader"],"kind":"struct"},"19:0:1293":{"crate_id":19,"path":["panic_unwind"],"kind":"module"},"5:7617:9427":{"crate_id":5,"path":["alloc","ffi","c_str","FromVecWithNulError"],"kind":"struct"},"2:10339:226":{"crate_id":2,"path":["core","fmt","Result"],"kind":"type_alias"},"17:15313:6814":{"crate_id":17,"path":["object","pe","ImageImportDescriptor"],"kind":"struct"},"1:623:11058":{"crate_id":1,"path":["std","ascii","AsciiExt"],"kind":"trait"},"2:32303:9464":{"crate_id":2,"path":["core","error","Source"],"kind":"struct"},"1:1616:5553":{"crate_id":1,"path":["std","collections","hash","set","Drain"],"kind":"struct"},"6:5565:8070":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_user_dev"],"kind":"struct"},"2:31099:5116":{"crate_id":2,"path":["core","cmp","Reverse"],"kind":"struct"},"17:12289:6225":{"crate_id":17,"path":["object","read","pe","data_directory","DataDirectories"],"kind":"struct"},"1:980:11075":{"crate_id":1,"path":["std","collections","hash","map","RawVacantEntryMut"],"kind":"struct"},"1:8655:11284":{"crate_id":1,"path":["std","os","linux","process","PidFd"],"kind":"struct"},"24:607:3961":{"crate_id":24,"path":["syn","drops","NoDrop"],"kind":"struct"},"16:6574:7132":{"crate_id":16,"path":["gimli","read","index","DebugTuIndex"],"kind":"struct"},"6:1680:7704":{"crate_id":6,"path":["libc","unix","linux_like","mmsghdr"],"kind":"struct"},"2:13597:16575":{"crate_id":2,"path":["core","future","async_drop","AsyncDropInPlace"],"kind":"struct"},"5:40:5464":{"crate_id":5,"path":["alloc","raw_vec","RawVec"],"kind":"struct"},"15:0:3711":{"crate_id":15,"path":["addr2line"],"kind":"module"},"6:8197:8536":{"crate_id":6,"path":["libc","unix","linux_like","linux","arch","generic","termios2"],"kind":"struct"},"5:5470:16498":{"crate_id":5,"path":["alloc","slice","Concat"],"kind":"trait"},"24:4858:4271":{"crate_id":24,"path":["syn","token","ShrEq"],"kind":"struct"},"2:6777:4065":{"crate_id":2,"path":["core","iter","adapters","intersperse","IntersperseWith"],"kind":"struct"},"16:7857:7295":{"crate_id":16,"path":["gimli","read","unit","UnitHeader"],"kind":"struct"},"16:6940:7231":{"crate_id":16,"path":["gimli","read","lists","ListsHeader"],"kind":"struct"},"1:9375:9082":{"crate_id":1,"path":["std","sync","mpmc","utils","CachePadded"],"kind":"struct"},"5:1549:11071":{"crate_id":5,"path":["alloc","collections","btree","map","ValuesMut"],"kind":"struct"},"6:7314:8382":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statfs"],"kind":"struct"},"2:2807:202":{"crate_id":2,"path":["core","cmp","PartialOrd"],"kind":"trait"},"21:2596:3951":{"crate_id":21,"path":["proc_macro","token_stream","IntoIter"],"kind":"struct"},"6:1707:7715":{"crate_id":6,"path":["libc","unix","linux_like","utsname"],"kind":"struct"},"6:1699:7711":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_storage"],"kind":"struct"},"17:11115:23981":{"crate_id":17,"path":["object","read","coff","section","CoffSectionIterator"],"kind":"struct"},"5:2210:5325":{"crate_id":5,"path":["alloc","collections","btree","mem","replace","PanicGuard"],"kind":"struct"},"1:9748:127":{"crate_id":1,"path":["std","sys","pal","unix","fs","DirBuilder"],"kind":"struct"},"20:518:3970":{"crate_id":20,"path":["proc_macro2","LexError"],"kind":"struct"},"24:5385:2787":{"crate_id":24,"path":["syn","expr","ExprPath"],"kind":"struct"},"11:2121:9374":{"crate_id":11,"path":["hashbrown","set","Entry"],"kind":"enum"},"17:15078:6760":{"crate_id":17,"path":["object","pe","ImageSymbol"],"kind":"struct"},"1:1637:9407":{"crate_id":1,"path":["std","collections","hash","set","SymmetricDifference"],"kind":"struct"},"16:7769:7287":{"crate_id":16,"path":["gimli","read","UnitOffset"],"kind":"struct"},"2:22621:11448":{"crate_id":2,"path":["core","core_simd","simd","ptr","mut_ptr","SimdMutPtr"],"kind":"trait"},"2:43353:9503":{"crate_id":2,"path":["core","hash","sip","Sip13Rounds"],"kind":"struct"},"6:5361:7972":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlmsghdr"],"kind":"struct"},"6:6491:8191":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","mallinfo"],"kind":"struct"},"6:5134:7887":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Phdr"],"kind":"struct"},"2:47057:8965":{"crate_id":2,"path":["core","core_arch","simd","u32x16"],"kind":"struct"},"5:6965:5558":{"crate_id":5,"path":["alloc","vec","in_place_drop","InPlaceDrop"],"kind":"struct"},"24:5351:3895":{"crate_id":24,"path":["syn","expr","ExprInfer"],"kind":"struct"},"2:47278:8984":{"crate_id":2,"path":["core","core_arch","x86","__m512d"],"kind":"struct"},"2:22846:9451":{"crate_id":2,"path":["core","num","bignum","tests","Big8x3"],"kind":"struct"},"5:3661:3952":{"crate_id":5,"path":["alloc","collections","linked_list","Iter"],"kind":"struct"},"6:5352:7968":{"crate_id":6,"path":["libc","unix","linux_like","linux","seccomp_notif_addfd"],"kind":"struct"},"6:6721:8302":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_mmap_offsets_v1"],"kind":"struct"},"17:437:6097":{"crate_id":17,"path":["object","read","any","Section"],"kind":"struct"},"17:10251:6150":{"crate_id":17,"path":["object","endian","U64Bytes"],"kind":"struct"},"6:5200:7904":{"crate_id":6,"path":["libc","unix","linux_like","linux","posix_spawnattr_t"],"kind":"struct"},"1:7409:5871":{"crate_id":1,"path":["std","sys_common","lazy_box","LazyBox"],"kind":"struct"},"20:933:2587":{"crate_id":20,"path":["proc_macro2","Spacing"],"kind":"enum"},"23:504:5032":{"crate_id":23,"path":["quote","__private","IdentFragmentAdapter"],"kind":"struct"},"5:5426:5769":{"crate_id":5,"path":["alloc","slice","hack","to_vec","DropGuard"],"kind":"struct"},"6:6524:8203":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_mmap_req"],"kind":"struct"},"5:3042:8564":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Immut"],"kind":"struct"},"1:12367:1842":{"crate_id":1,"path":["std","u32"],"kind":"primitive"},"24:3172:2901":{"crate_id":24,"path":["syn","token","Const"],"kind":"struct"},"2:43769:9444":{"crate_id":2,"path":["core","slice","iter","Windows"],"kind":"struct"},"1:4201:11232":{"crate_id":1,"path":["std","os","unix","fs","FileTypeExt"],"kind":"trait"},"2:40429:9469":{"crate_id":2,"path":["core","char","convert","ParseCharError"],"kind":"struct"},"2:46763:8928":{"crate_id":2,"path":["core","core_arch","simd","m32x8"],"kind":"struct"},"17:12707:23962":{"crate_id":17,"path":["object","read","traits","NoDynamicRelocationIterator"],"kind":"struct"},"22:0:3837":{"crate_id":22,"path":["unicode_ident"],"kind":"module"},"1:6358:5841":{"crate_id":1,"path":["std","sync","mpmc","waker","Waker"],"kind":"struct"},"1:11256:9083":{"crate_id":1,"path":["std","sys","pal","unix","time","SystemTime"],"kind":"struct"},"1:592:5333":{"crate_id":1,"path":["std","thread","JoinHandle"],"kind":"struct"},"1:9430:5869":{"crate_id":1,"path":["std","sync","rwlock","MappedRwLockWriteGuard"],"kind":"struct"},"1:12351:1690":{"crate_id":1,"path":["std","slice"],"kind":"primitive"},"2:47214:8974":{"crate_id":2,"path":["core","core_arch","x86","__m256"],"kind":"struct"},"17:13999:6469":{"crate_id":17,"path":["object","macho","SubFrameworkCommand"],"kind":"struct"},"6:4909:7808":{"crate_id":6,"path":["libc","unix","linux_like","linux","sembuf"],"kind":"struct"},"24:2365:3951":{"crate_id":24,"path":["syn","punctuated","IntoIter"],"kind":"struct"},"24:1093:37713":{"crate_id":24,"path":["syn","generics","ConstParamsMut"],"kind":"struct"},"1:3592:9051":{"crate_id":1,"path":["std","io","Read"],"kind":"trait"},"17:15463:6854":{"crate_id":17,"path":["object","pe","ImageEpilogueDynamicRelocationHeader"],"kind":"struct"},"1:9334:2515":{"crate_id":1,"path":["std","sync","mpmc","select","Token"],"kind":"struct"},"17:11788:24097":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldSubCache"],"kind":"struct"},"17:10828:37475":{"crate_id":17,"path":["object","read","any","SymbolIteratorInternal"],"kind":"enum"},"1:11921:29756":{"crate_id":1,"path":["std","panicking","panic_count","MustAbort"],"kind":"enum"},"5:4481:5793":{"crate_id":5,"path":["alloc","collections","vec_deque","write_iter_wrapping","Guard"],"kind":"struct"},"16:6433:9319":{"crate_id":16,"path":["gimli","read","abbrev","Abbreviations"],"kind":"struct"},"5:4848:804":{"crate_id":5,"path":["alloc","fmt"],"kind":"module"},"21:0:1347":{"crate_id":21,"path":["proc_macro"],"kind":"module"},"24:363:37656":{"crate_id":24,"path":["syn","buffer","empty","UnsafeSyncEntry"],"kind":"struct"},"1:8485:9048":{"crate_id":1,"path":["std","io","util","Sink"],"kind":"struct"},"17:15126:6767":{"crate_id":17,"path":["object","pe","ImageAuxSymbolTokenDef"],"kind":"struct"},"1:12357:740":{"crate_id":1,"path":["std","f32"],"kind":"primitive"},"6:5306:7957":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_filter"],"kind":"struct"},"2:43818:8841":{"crate_id":2,"path":["core","slice","iter","ArrayWindows"],"kind":"struct"},"5:1077:5769":{"crate_id":5,"path":["alloc","collections","binary_heap","drop","DropGuard"],"kind":"struct"},"1:2705:5846":{"crate_id":1,"path":["std","io","buffered","bufwriter","BufWriter"],"kind":"struct"},"11:2380:3952":{"crate_id":11,"path":["hashbrown","table","Iter"],"kind":"struct"},"2:41069:4061":{"crate_id":2,"path":["core","iter","adapters","take","Take"],"kind":"struct"},"2:44076:9517":{"crate_id":2,"path":["core","str","iter","SplitN"],"kind":"struct"},"2:46429:8900":{"crate_id":2,"path":["core","core_arch","simd","m64x2"],"kind":"struct"},"2:12955:4365":{"crate_id":2,"path":["core","str","pattern"],"kind":"module"},"2:10648:9438":{"crate_id":2,"path":["core","hash","BuildHasherDefault"],"kind":"struct"},"1:12359:735":{"crate_id":1,"path":["std","f128"],"kind":"primitive"},"1:3486:11180":{"crate_id":1,"path":["std","io","stdio","IsTerminal"],"kind":"trait"},"2:40842:4054":{"crate_id":2,"path":["core","iter","adapters","inspect","Inspect"],"kind":"struct"},"2:23071:8591":{"crate_id":2,"path":["core","num","error","TryFromIntError"],"kind":"struct"},"16:4856:7160":{"crate_id":16,"path":["gimli","constants","DwOrd"],"kind":"struct"},"24:5516:3185":{"crate_id":24,"path":["syn","generics","LifetimeParam"],"kind":"struct"},"24:6003:3939":{"crate_id":24,"path":["syn","ty","TypePtr"],"kind":"struct"},"2:23116:11154":{"crate_id":2,"path":["core","num","nonzero","private","Sealed"],"kind":"trait"},"6:5400:7993":{"crate_id":6,"path":["libc","unix","linux_like","linux","in6_ifreq"],"kind":"struct"},"6:1723:7720":{"crate_id":6,"path":["libc","unix","linux_like","sigevent"],"kind":"struct"},"1:4109:11226":{"crate_id":1,"path":["std","os","unix","ffi","os_str","OsStrExt"],"kind":"trait"},"16:7888:9382":{"crate_id":16,"path":["gimli","read","unit","DebuggingInformationEntry"],"kind":"struct"},"24:5362:3897":{"crate_id":24,"path":["syn","expr","ExprLoop"],"kind":"struct"},"17:12175:24122":{"crate_id":17,"path":["object","read","pe","file","PeFile"],"kind":"struct"},"1:11687:10313":{"crate_id":1,"path":["std","sys_common","wtf8","Wtf8"],"kind":"struct"},"17:12969:6268":{"crate_id":17,"path":["object","read","CodeView"],"kind":"struct"},"24:3886:4231":{"crate_id":24,"path":["syn","token","While"],"kind":"struct"},"21:1974:5574":{"crate_id":21,"path":["proc_macro","bridge","LitKind"],"kind":"enum"},"16:6427:10674":{"crate_id":16,"path":["gimli","read","abbrev","AbbreviationsCache"],"kind":"struct"},"5:956:3952":{"crate_id":5,"path":["alloc","collections","binary_heap","Iter"],"kind":"struct"},"2:4860:4121":{"crate_id":2,"path":["core","cell","RefMut"],"kind":"struct"},"2:42133:4708":{"crate_id":2,"path":["core","panic","location","Location"],"kind":"struct"},"24:5045:3869":{"crate_id":24,"path":["syn","data","FieldsUnnamed"],"kind":"struct"},"17:9858:23948":{"crate_id":17,"path":["object","common","ComdatKind"],"kind":"enum"},"2:33539:3997":{"crate_id":2,"path":["core","ops","arith","AddAssign"],"kind":"trait"},"16:7321:4708":{"crate_id":16,"path":["gimli","read","op","Location"],"kind":"enum"},"16:3614:7139":{"crate_id":16,"path":["gimli","arch","X86"],"kind":"struct"},"1:2780:11186":{"crate_id":1,"path":["std","io","buffered","linewriter","LineWriter"],"kind":"struct"},"20:723:2588":{"crate_id":20,"path":["proc_macro2","fallback","Span"],"kind":"struct"},"24:3036:4198":{"crate_id":24,"path":["syn","token","Abstract"],"kind":"struct"},"6:5382:7982":{"crate_id":6,"path":["libc","unix","linux_like","linux","file_clone_range"],"kind":"struct"},"1:3067:137":{"crate_id":1,"path":["std","io","error","Error"],"kind":"struct"},"23:235:5036":{"crate_id":23,"path":["quote","__private","get_span","GetSpan"],"kind":"struct"},"1:5965:11320":{"crate_id":1,"path":["std","sync","barrier","BarrierWaitResult"],"kind":"struct"},"17:12422:9240":{"crate_id":17,"path":["object","read","pe","relocation","RelocationIterator"],"kind":"struct"},"2:22530:11446":{"crate_id":2,"path":["core","core_simd","simd","num","uint","SimdUint"],"kind":"trait"},"1:4303:33001":{"crate_id":1,"path":["std","os","unix","net","ancillary","AncillaryDataIter"],"kind":"struct"},"2:3287:5454":{"crate_id":2,"path":["core","ops","async_function","AsyncFnMut"],"kind":"trait"},"2:13620:4053":{"crate_id":2,"path":["core","future","async_drop","Fuse"],"kind":"struct"},"17:10877:23960":{"crate_id":17,"path":["object","read","any","DynamicRelocationIterator"],"kind":"struct"},"18:754:9208":{"crate_id":18,"path":["memchr","memmem","SearcherRev"],"kind":"struct"},"17:12557:6165":{"crate_id":17,"path":["object","read","xcoff","section","SectionTable"],"kind":"struct"},"6:5515:8050":{"crate_id":6,"path":["libc","unix","linux_like","linux","tls12_crypto_info_chacha20_poly1305"],"kind":"struct"},"17:14847:6689":{"crate_id":17,"path":["object","pe","MaskedRichHeaderEntry"],"kind":"struct"},"2:22953:9455":{"crate_id":2,"path":["core","num","dec2flt","ParseFloatError"],"kind":"struct"},"2:30699:5411":{"crate_id":2,"path":["core","mem","transmutability","Assume"],"kind":"struct"},"16:3475:7138":{"crate_id":16,"path":["gimli","arch","RiscV"],"kind":"struct"},"2:44706:9560":{"crate_id":2,"path":["core","str","IsAsciiWhitespace"],"kind":"struct"},"18:589:6030":{"crate_id":18,"path":["memchr","memmem","twoway","TwoWay"],"kind":"struct"},"2:10842:5832":{"crate_id":2,"path":["core","slice","sort","merge_sort","BufGuard"],"kind":"struct"},"6:5225:7915":{"crate_id":6,"path":["libc","unix","linux_like","linux","arpd_request"],"kind":"struct"},"16:6504:9324":{"crate_id":16,"path":["gimli","read","aranges","ArangeHeader"],"kind":"struct"},"2:43087:34687":{"crate_id":2,"path":["core","fmt","rt","ArgumentType"],"kind":"enum"},"6:1639:7680":{"crate_id":6,"path":["libc","unix","linux_like","in6_rtmsg"],"kind":"struct"},"20:806:37492":{"crate_id":20,"path":["proc_macro2","imp","TokenTreeIter"],"kind":"enum"},"2:13029:16529":{"crate_id":2,"path":["core","str","pattern","MultiCharEqPattern"],"kind":"struct"},"2:47086:8966":{"crate_id":2,"path":["core","core_arch","simd","f32x16"],"kind":"struct"},"17:14449:6560":{"crate_id":17,"path":["object","macho","SymsegCommand"],"kind":"struct"},"6:5146:7888":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Shdr"],"kind":"struct"},"1:3677:11173":{"crate_id":1,"path":["std","io","BufRead"],"kind":"trait"},"2:40684:5822":{"crate_id":2,"path":["core","ffi","VaListImpl"],"kind":"struct"},"17:10044:23953":{"crate_id":17,"path":["object","common","SegmentFlags"],"kind":"enum"},"2:40618:9477":{"crate_id":2,"path":["core","ffi","c_str","FromBytesWithNulError"],"kind":"struct"},"17:14752:6606":{"crate_id":17,"path":["object","pe","ImageOs2Header"],"kind":"struct"},"21:2583:252":{"crate_id":21,"path":["proc_macro","TokenStream"],"kind":"struct"},"24:5820:2882":{"crate_id":24,"path":["syn","path","PathArguments"],"kind":"enum"},"16:6278:10659":{"crate_id":16,"path":["gimli","read","dwarf","Dwarf"],"kind":"struct"},"1:2467:5478":{"crate_id":1,"path":["std","fs","metadata"],"kind":"function"},"2:40714:11150":{"crate_id":2,"path":["core","io","borrowed_buf","BorrowedCursor"],"kind":"struct"},"2:46391:8898":{"crate_id":2,"path":["core","core_arch","simd","m16x8"],"kind":"struct"},"6:6609:8258":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","regex_t"],"kind":"struct"},"2:44040:9515":{"crate_id":2,"path":["core","str","iter","RSplitTerminator"],"kind":"struct"},"2:41308:4022":{"crate_id":2,"path":["core","iter","sources","repeat","Repeat"],"kind":"struct"},"1:8255:29748":{"crate_id":1,"path":["std","io","buffered","linewritershim","LineWriterShim"],"kind":"struct"},"1:10943:9592":{"crate_id":1,"path":["std","sys","pal","unix","fs","FilePermissions"],"kind":"struct"},"17:12851:9244":{"crate_id":17,"path":["object","read","SymbolMap"],"kind":"struct"},"2:40489:9472":{"crate_id":2,"path":["core","char","EscapeUnicode"],"kind":"struct"},"2:2221:189":{"crate_id":2,"path":["core","ptr","non_null","NonNull"],"kind":"struct"},"1:4923:11242":{"crate_id":1,"path":["std","os","fd","raw","AsRawFd"],"kind":"trait"},"2:42380:86":{"crate_id":2,"path":["core","sync","atomic","AtomicI16"],"kind":"struct"},"17:14587:6577":{"crate_id":17,"path":["object","macho","RelocationInfo"],"kind":"struct"},"1:568:5331":{"crate_id":1,"path":["std","thread","Packet"],"kind":"struct"},"6:5250:7928":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_vm"],"kind":"struct"},"2:22930:8574":{"crate_id":2,"path":["core","num","dec2flt","number","Number"],"kind":"struct"},"2:46106:8875":{"crate_id":2,"path":["core","core_arch","simd","i64x1"],"kind":"struct"},"2:11432:16514":{"crate_id":2,"path":["core","slice","iter","RSplitMut"],"kind":"struct"},"1:8345:29774":{"crate_id":1,"path":["std","io","error","SimpleMessage"],"kind":"struct"},"2:12033:16508":{"crate_id":2,"path":["core","slice","iter","ChunkByMut"],"kind":"struct"},"16:7132:9373":{"crate_id":16,"path":["gimli","read","lookup","PubStuffParser"],"kind":"struct"},"5:3284:9407":{"crate_id":5,"path":["alloc","collections","btree","set","SymmetricDifference"],"kind":"struct"},"17:12213:24133":{"crate_id":17,"path":["object","read","pe","file","PeComdatSectionIterator"],"kind":"struct"},"1:2003:11114":{"crate_id":1,"path":["std","error","Indented"],"kind":"struct"},"24:4701:4260":{"crate_id":24,"path":["syn","token","Percent"],"kind":"struct"},"1:8476:4015":{"crate_id":1,"path":["std","io","util","Empty"],"kind":"struct"},"17:13325:6330":{"crate_id":17,"path":["object","elf","Sym32"],"kind":"struct"},"2:816:11212":{"crate_id":2,"path":["core","num","nonzero","ZeroablePrimitive"],"kind":"trait"},"16:3778:7140":{"crate_id":16,"path":["gimli","constants","DwSect"],"kind":"struct"},"2:819:190":{"crate_id":2,"path":["core","num","nonzero","NonZero"],"kind":"struct"},"5:1168:37256":{"crate_id":5,"path":["alloc","collections","btree","append","MergeIter"],"kind":"struct"},"20:116:37493":{"crate_id":20,"path":["proc_macro2","rcvec","RcVecBuilder"],"kind":"struct"},"1:8222:139":{"crate_id":1,"path":["std","fs","FileType"],"kind":"struct"},"21:2287:2521":{"crate_id":21,"path":["proc_macro","bridge","Ident"],"kind":"struct"},"17:13375:6339":{"crate_id":17,"path":["object","elf","Syminfo64"],"kind":"struct"},"5:3040:37366":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Dying"],"kind":"enum"},"16:5347:7170":{"crate_id":16,"path":["gimli","constants","DwEhPe"],"kind":"struct"},"2:4725:4110":{"crate_id":2,"path":["core","cell","BorrowError"],"kind":"struct"},"6:5020:7860":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_effect"],"kind":"struct"},"21:2486:5575":{"crate_id":21,"path":["proc_macro","bridge","ExpnGlobals"],"kind":"struct"},"2:43948:9509":{"crate_id":2,"path":["core","str","iter","CharIndices"],"kind":"struct"},"2:44568:9547":{"crate_id":2,"path":["core","str","pattern","TwoWaySearcher"],"kind":"struct"},"1:3841:11205":{"crate_id":1,"path":["std","net","socket_addr","ToSocketAddrs"],"kind":"trait"},"6:5102:7884":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Sym"],"kind":"struct"},"2:2609:5489":{"crate_id":2,"path":["core","ptr","with_exposed_provenance"],"kind":"function"},"17:12454:9242":{"crate_id":17,"path":["object","read","pe","resource","ResourceDirectoryTable"],"kind":"struct"},"1:5638:11304":{"crate_id":1,"path":["std","process","ChildStderr"],"kind":"struct"},"1:8210:9573":{"crate_id":1,"path":["std","fs","Permissions"],"kind":"struct"},"5:6941:5557":{"crate_id":5,"path":["alloc","vec","set_len_on_drop","SetLenOnDrop"],"kind":"struct"},"1:11107:5880":{"crate_id":1,"path":["std","sys","pal","unix","process","process_inner","posix_spawn","PosixSpawnFileActions"],"kind":"struct"},"16:542:9247":{"crate_id":16,"path":["gimli","read","cfi","RegisterRuleMap"],"kind":"struct"},"24:1800:2595":{"crate_id":24,"path":["syn","parse","ParseStream"],"kind":"type_alias"},"17:14025:6472":{"crate_id":17,"path":["object","macho","SubUmbrellaCommand"],"kind":"struct"},"1:11909:9098":{"crate_id":1,"path":["std","alloc","System"],"kind":"struct"},"17:9671:23930":{"crate_id":17,"path":["object","common","Architecture"],"kind":"enum"},"16:6991:37399":{"crate_id":16,"path":["gimli","read","loclists","LocListsFormat"],"kind":"enum"},"16:6634:7120":{"crate_id":16,"path":["gimli","read","line","DebugLine"],"kind":"struct"},"1:4161:11230":{"crate_id":1,"path":["std","os","unix","fs","OpenOptionsExt"],"kind":"trait"},"24:3614:228":{"crate_id":24,"path":["syn","token","Return"],"kind":"struct"},"1:3300:33286":{"crate_id":1,"path":["std","io","stdio","StdoutRaw"],"kind":"struct"},"17:13568:6384":{"crate_id":17,"path":["object","elf","NoteHeader32"],"kind":"struct"},"9:482:22854":{"crate_id":9,"path":["miniz_oxide","DataFormat"],"kind":"enum"},"17:14986:6741":{"crate_id":17,"path":["object","pe","ImageRomHeaders"],"kind":"struct"},"16:4424:7147":{"crate_id":16,"path":["gimli","constants","DwForm"],"kind":"struct"},"6:6519:8202":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_pktinfo"],"kind":"struct"},"6:1585:7638":{"crate_id":6,"path":["libc","unix","linux_like","Dl_info"],"kind":"struct"},"24:3903:268":{"crate_id":24,"path":["syn","token","Yield"],"kind":"struct"},"5:5474:16499":{"crate_id":5,"path":["alloc","slice","Join"],"kind":"trait"},"6:5336:7966":{"crate_id":6,"path":["libc","unix","linux_like","linux","seccomp_notif"],"kind":"struct"},"1:9329:10707":{"crate_id":1,"path":["std","sync","mpmc","list","ListToken"],"kind":"struct"},"24:5329:3874":{"crate_id":24,"path":["syn","expr","ExprField"],"kind":"struct"},"2:40551:9474":{"crate_id":2,"path":["core","char","ToLowercase"],"kind":"struct"},"17:10720:37446":{"crate_id":17,"path":["object","read","any","ComdatSectionIteratorInternal"],"kind":"enum"},"16:6466:7188":{"crate_id":16,"path":["gimli","read","abbrev","AttributeSpecification"],"kind":"struct"},"6:6763:8315":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_options"],"kind":"struct"},"1:10726:11193":{"crate_id":1,"path":["std","sys","pal","unix","stdio","Stdout"],"kind":"struct"},"24:3274:4207":{"crate_id":24,"path":["syn","token","Else"],"kind":"struct"},"2:44581:9551":{"crate_id":2,"path":["core","str","lossy","Utf8Chunk"],"kind":"struct"},"24:3393:4212":{"crate_id":24,"path":["syn","token","Impl"],"kind":"struct"},"6:491:7520":{"crate_id":6,"path":["libc","unix","rlimit"],"kind":"struct"},"2:22964:34293":{"crate_id":2,"path":["core","num","dec2flt","FloatErrorKind"],"kind":"enum"},"6:6562:8231":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","timex"],"kind":"struct"},"11:2228:9408":{"crate_id":11,"path":["hashbrown","table","HashTable"],"kind":"struct"},"17:15434:6847":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation32V2"],"kind":"struct"},"1:9283:10705":{"crate_id":1,"path":["std","sync","mpmc","array","ArrayToken"],"kind":"struct"},"2:4851:4120":{"crate_id":2,"path":["core","cell","BorrowRefMut"],"kind":"struct"},"1:500:5844":{"crate_id":1,"path":["std","thread","spawn_unchecked_","MaybeDangling"],"kind":"struct"},"2:40585:9475":{"crate_id":2,"path":["core","char","ToUppercase"],"kind":"struct"},"21:365:5577":{"crate_id":21,"path":["proc_macro","bridge","rpc","PanicMessage"],"kind":"enum"},"17:15678:6937":{"crate_id":17,"path":["object","pe","ImageEnclaveConfig64"],"kind":"struct"},"17:16105:7039":{"crate_id":17,"path":["object","xcoff","FileAux32"],"kind":"struct"},"16:7741:7131":{"crate_id":16,"path":["gimli","read","str","DebugStrOffsets"],"kind":"struct"},"16:2728:7104":{"crate_id":16,"path":["gimli","common","DebugRngListsIndex"],"kind":"struct"},"2:46091:8874":{"crate_id":2,"path":["core","core_arch","simd","i32x2"],"kind":"struct"},"1:3297:29084":{"crate_id":1,"path":["std","io","stdio","StdinRaw"],"kind":"struct"},"9:0:3706":{"crate_id":9,"path":["miniz_oxide"],"kind":"module"},"2:39643:213":{"crate_id":2,"path":["core","ops","range","RangeFull"],"kind":"struct"},"17:12671:24174":{"crate_id":17,"path":["object","read","xcoff","comdat","XcoffComdatSectionIterator"],"kind":"struct"},"6:5376:7979":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlattr"],"kind":"struct"},"17:11583:24033":{"crate_id":17,"path":["object","read","elf","hash","GnuHashTable"],"kind":"struct"},"2:39718:214":{"crate_id":2,"path":["core","ops","range","RangeInclusive"],"kind":"struct"},"17:12056:6218":{"crate_id":17,"path":["object","read","macho","segment","MachOSegmentInternal"],"kind":"struct"},"6:5489:8043":{"crate_id":6,"path":["libc","unix","linux_like","linux","tls12_crypto_info_aes_gcm_128"],"kind":"struct"},"2:33606:5997":{"crate_id":2,"path":["core","ops","arith","SubAssign"],"kind":"trait"},"6:1485:7581":{"crate_id":6,"path":["libc","unix","linux_like","in_addr"],"kind":"struct"},"16:6385:7184":{"crate_id":16,"path":["gimli","read","reader","ReaderOffsetId"],"kind":"struct"},"2:42575:95":{"crate_id":2,"path":["core","sync","atomic","AtomicU64"],"kind":"struct"},"21:2682:3972":{"crate_id":21,"path":["proc_macro","Delimiter"],"kind":"enum"},"24:5593:3910":{"crate_id":24,"path":["syn","generics","PredicateLifetime"],"kind":"struct"},"2:2935:11154":{"crate_id":2,"path":["core","convert","num","private","Sealed"],"kind":"trait"},"17:15992:7018":{"crate_id":17,"path":["object","xcoff","AuxHeader64"],"kind":"struct"},"2:43561:9505":{"crate_id":2,"path":["core","slice","ascii","EscapeByte"],"kind":"struct"},"16:2572:7097":{"crate_id":16,"path":["gimli","common","DebugLocListsBase"],"kind":"struct"},"6:6460:8170":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","msghdr"],"kind":"struct"},"16:7061:7239":{"crate_id":16,"path":["gimli","read","loclists","LocationListEntry"],"kind":"struct"},"17:14475:6562":{"crate_id":17,"path":["object","macho","FvmfileCommand"],"kind":"struct"},"2:21923:11359":{"crate_id":2,"path":["core","core_simd","masks","MaskElement"],"kind":"trait"},"2:46313:8894":{"crate_id":2,"path":["core","core_arch","simd","f32x4"],"kind":"struct"},"2:3489:3964":{"crate_id":2,"path":["core","ops","index","IndexMut"],"kind":"trait"},"20:738:2521":{"crate_id":20,"path":["proc_macro2","fallback","Ident"],"kind":"struct"},"24:3376:4211":{"crate_id":24,"path":["syn","token","If"],"kind":"struct"},"2:41327:4026":{"crate_id":2,"path":["core","iter","sources","repeat_with","RepeatWith"],"kind":"struct"},"6:553:7560":{"crate_id":6,"path":["libc","unix","linger"],"kind":"struct"},"16:7656:23887":{"crate_id":16,"path":["gimli","read","rnglists","RawRngListEntry"],"kind":"enum"},"2:46601:8922":{"crate_id":2,"path":["core","core_arch","simd","i16x16"],"kind":"struct"},"2:2968:258":{"crate_id":2,"path":["core","convert","TryInto"],"kind":"trait"},"1:944:11071":{"crate_id":1,"path":["std","collections","hash","map","ValuesMut"],"kind":"struct"},"24:5075:3870":{"crate_id":24,"path":["syn","derive","DataEnum"],"kind":"struct"},"24:3444:4215":{"crate_id":24,"path":["syn","token","Loop"],"kind":"struct"},"2:43990:9443":{"crate_id":2,"path":["core","str","iter","RSplit"],"kind":"struct"},"2:46668:8925":{"crate_id":2,"path":["core","core_arch","simd","f32x8"],"kind":"struct"},"6:7584:8512":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user_fpregs_struct"],"kind":"struct"},"2:46149:8878":{"crate_id":2,"path":["core","core_arch","simd","u8x16"],"kind":"struct"},"1:4341:11256":{"crate_id":1,"path":["std","os","unix","net","ancillary","AncillaryData"],"kind":"enum"},"17:11063:23988":{"crate_id":17,"path":["object","read","coff","file","CoffFile"],"kind":"struct"},"1:12363:905":{"crate_id":1,"path":["std","i64"],"kind":"primitive"},"1:8570:11203":{"crate_id":1,"path":["std","net","Shutdown"],"kind":"enum"},"2:23037:34269":{"crate_id":2,"path":["core","num","fmt","Part"],"kind":"enum"},"17:12342:9232":{"crate_id":17,"path":["object","read","pe","import","ImportTable"],"kind":"struct"},"17:12543:24142":{"crate_id":17,"path":["object","read","xcoff","section","XcoffSection"],"kind":"struct"},"14:40:2521":{"crate_id":14,"path":["rustc_demangle","v0","Ident"],"kind":"struct"},"1:12344:417":{"crate_id":1,"path":["std","bool"],"kind":"primitive"},"5:6782:5769":{"crate_id":5,"path":["alloc","vec","into_iter","drop","DropGuard"],"kind":"struct"},"24:153:2515":{"crate_id":24,"path":["syn","Token"],"kind":"macro"},"16:2355:7082":{"crate_id":16,"path":["gimli","common","LineEncoding"],"kind":"struct"},"24:4984:3854":{"crate_id":24,"path":["syn","attr","Attribute"],"kind":"struct"},"2:10039:34251":{"crate_id":2,"path":["core","fmt","builders","PadAdapter"],"kind":"struct"},"2:43314:9501":{"crate_id":2,"path":["core","hash","sip","SipHasher24"],"kind":"struct"},"17:14012:6471":{"crate_id":17,"path":["object","macho","SubClientCommand"],"kind":"struct"},"2:11501:16516":{"crate_id":2,"path":["core","slice","iter","SplitNMut"],"kind":"struct"},"2:2342:5458":{"crate_id":2,"path":["core","ptr","unique","Unique"],"kind":"struct"},"2:32401:2547":{"crate_id":2,"path":["core","marker","Tuple"],"kind":"trait"},"24:3189:116":{"crate_id":24,"path":["syn","token","Continue"],"kind":"struct"},"24:5577:3579":{"crate_id":24,"path":["syn","generics","WhereClause"],"kind":"struct"},"5:4252:5793":{"crate_id":5,"path":["alloc","collections","vec_deque","into_iter","try_fold","Guard"],"kind":"struct"},"2:22448:11444":{"crate_id":2,"path":["core","core_simd","simd","num","float","SimdFloat"],"kind":"trait"},"17:14051:6476":{"crate_id":17,"path":["object","macho","PreboundDylibCommand"],"kind":"struct"},"2:3646:16610":{"crate_id":2,"path":["core","ops","range","OneSidedRange"],"kind":"trait"},"16:3014:23011":{"crate_id":16,"path":["gimli","common","DwarfFileType"],"kind":"enum"},"1:8714:4703":{"crate_id":1,"path":["std","panic","BacktraceStyle"],"kind":"enum"},"5:7432:9422":{"crate_id":5,"path":["alloc","collections","btree","map","UnorderedKeyError"],"kind":"struct"},"21:2334:3205":{"crate_id":21,"path":["proc_macro","bridge","Literal"],"kind":"struct"},"2:42124:3951":{"crate_id":2,"path":["core","option","IntoIter"],"kind":"struct"},"16:6962:7123":{"crate_id":16,"path":["gimli","read","loclists","DebugLocLists"],"kind":"struct"},"23:148:4730":{"crate_id":23,"path":["quote","__private","HasIterator"],"kind":"struct"},"24:5022:2535":{"crate_id":24,"path":["syn","data","Variant"],"kind":"struct"},"17:15281:6806":{"crate_id":17,"path":["object","pe","ImageThunkData32"],"kind":"struct"},"17:15582:6903":{"crate_id":17,"path":["object","pe","ImageHotPatchBase"],"kind":"struct"},"18:706:9201":{"crate_id":18,"path":["memchr","memmem","Searcher"],"kind":"struct"},"6:5064:7882":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Ehdr"],"kind":"struct"},"24:3223:123":{"crate_id":24,"path":["syn","token","Default"],"kind":"struct"},"1:4406:11258":{"crate_id":1,"path":["std","os","unix","net","datagram","UnixDatagram"],"kind":"struct"},"24:2458:3958":{"crate_id":24,"path":["syn","punctuated","PrivateIterMut"],"kind":"struct"},"17:14189:6511":{"crate_id":17,"path":["object","macho","DylibModule32"],"kind":"struct"},"9:357:22870":{"crate_id":9,"path":["miniz_oxide","inflate","TINFLStatus"],"kind":"enum"},"24:89:2515":{"crate_id":24,"path":["syn","token","Token"],"kind":"trait"},"2:22568:11447":{"crate_id":2,"path":["core","core_simd","simd","ptr","const_ptr","SimdConstPtr"],"kind":"trait"},"1:9134:9071":{"crate_id":1,"path":["std","process","ExitStatus"],"kind":"struct"},"2:46938:8962":{"crate_id":2,"path":["core","core_arch","simd","i16x32"],"kind":"struct"},"1:12371:1914":{"crate_id":1,"path":["std","usize"],"kind":"primitive"},"17:12949:6230":{"crate_id":17,"path":["object","read","Export"],"kind":"struct"},"17:15608:6912":{"crate_id":17,"path":["object","pe","ImageArmRuntimeFunctionEntry"],"kind":"struct"},"2:21744:11154":{"crate_id":2,"path":["core","core_simd","cast","sealed","Sealed"],"kind":"trait"},"24:5475:63":{"crate_id":24,"path":["syn","expr","parsing","kw","raw"],"kind":"struct"},"2:46983:8963":{"crate_id":2,"path":["core","core_arch","simd","u16x32"],"kind":"struct"},"6:6597:8253":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ntptimeval"],"kind":"struct"},"2:40763:4039":{"crate_id":2,"path":["core","iter","adapters","cloned","Cloned"],"kind":"struct"},"6:6621:8265":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","Elf64_Chdr"],"kind":"struct"},"16:2374:7088":{"crate_id":16,"path":["gimli","common","Register"],"kind":"struct"},"16:7168:9079":{"crate_id":16,"path":["gimli","read","op","Operation"],"kind":"enum"},"2:3051:137":{"crate_id":2,"path":["core","error","Error"],"kind":"trait"},"20:715:252":{"crate_id":20,"path":["proc_macro2","fallback","TokenStream"],"kind":"struct"},"1:12353:1814":{"crate_id":1,"path":["std","tuple"],"kind":"primitive"},"1:3342:11192":{"crate_id":1,"path":["std","io","stdio","StdinLock"],"kind":"struct"},"1:5602:11302":{"crate_id":1,"path":["std","process","ChildStdin"],"kind":"struct"},"2:40833:4053":{"crate_id":2,"path":["core","iter","adapters","fuse","Fuse"],"kind":"struct"},"2:44955:8851":{"crate_id":2,"path":["core","task","wake","RawWakerVTable"],"kind":"struct"},"1:5622:11303":{"crate_id":1,"path":["std","process","ChildStdout"],"kind":"struct"},"21:2530:4139":{"crate_id":21,"path":["proc_macro","diagnostic","Level"],"kind":"enum"},"6:6417:8152":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","aiocb"],"kind":"struct"},"2:4913:4123":{"crate_id":2,"path":["core","cell","SyncUnsafeCell"],"kind":"struct"},"24:3818:4227":{"crate_id":24,"path":["syn","token","Unsized"],"kind":"struct"},"17:11405:24011":{"crate_id":17,"path":["object","read","elf","section","ElfSection"],"kind":"struct"},"17:11773:6248":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCache"],"kind":"struct"},"18:521:28210":{"crate_id":18,"path":["memchr","memmem","prefilter","Prefilter"],"kind":"enum"},"14:165:22945":{"crate_id":14,"path":["rustc_demangle","DemangleStyle"],"kind":"enum"},"11:1049:11078":{"crate_id":11,"path":["hashbrown","map","VacantEntry"],"kind":"struct"},"17:597:2602":{"crate_id":17,"path":["object","read","any","Symbol"],"kind":"struct"},"17:10170:6147":{"crate_id":17,"path":["object","endian","BigEndian"],"kind":"struct"},"24:5666:3915":{"crate_id":24,"path":["syn","lit","LitByte"],"kind":"struct"},"24:5887:3927":{"crate_id":24,"path":["syn","restriction","VisRestricted"],"kind":"struct"},"6:7429:8430":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statvfs64"],"kind":"struct"},"17:11898:6186":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandData"],"kind":"struct"},"17:11865:24101":{"crate_id":17,"path":["object","read","macho","file","MachOComdatSectionIterator"],"kind":"struct"},"17:14311:6530":{"crate_id":17,"path":["object","macho","LinkeditDataCommand"],"kind":"struct"},"6:5320:7962":{"crate_id":6,"path":["libc","unix","linux_like","linux","seccomp_data"],"kind":"struct"},"1:9234:11328":{"crate_id":1,"path":["std","sync","mpsc","RecvTimeoutError"],"kind":"enum"},"2:30661:5409":{"crate_id":2,"path":["core","mem","manually_drop","ManuallyDrop"],"kind":"struct"},"2:47331:8987":{"crate_id":2,"path":["core","core_arch","x86","__m512bh"],"kind":"struct"},"1:11206:9071":{"crate_id":1,"path":["std","sys","pal","unix","process","process_inner","ExitStatus"],"kind":"struct"},"24:3529:4218":{"crate_id":24,"path":["syn","token","Mut"],"kind":"struct"},"17:10317:6152":{"crate_id":17,"path":["object","endian","I32Bytes"],"kind":"struct"},"17:14298:6529":{"crate_id":17,"path":["object","macho","RpathCommand"],"kind":"struct"},"24:3869:4230":{"crate_id":24,"path":["syn","token","Where"],"kind":"struct"},"24:5868:3925":{"crate_id":24,"path":["syn","path","ParenthesizedGenericArguments"],"kind":"struct"},"20:732:2509":{"crate_id":20,"path":["proc_macro2","fallback","Group"],"kind":"struct"},"23:11:3981":{"crate_id":23,"path":["quote","ext","TokenStreamExt"],"kind":"trait"},"17:12863:6264":{"crate_id":17,"path":["object","read","SymbolMapName"],"kind":"struct"},"5:4451:5795":{"crate_id":5,"path":["alloc","collections","vec_deque","drop","Dropper"],"kind":"struct"},"2:22196:11154":{"crate_id":2,"path":["core","core_simd","to_bytes","sealed","Sealed"],"kind":"trait"},"15:327:10675":{"crate_id":15,"path":["addr2line","RangeAttributes"],"kind":"struct"},"24:4899:4274":{"crate_id":24,"path":["syn","token","Star"],"kind":"struct"},"18:608:37486":{"crate_id":18,"path":["memchr","memmem","twoway","Suffix"],"kind":"struct"},"16:8202:7133":{"crate_id":16,"path":["gimli","read","unit","DebugTypes"],"kind":"struct"},"24:53:2597":{"crate_id":24,"path":["syn","token"],"kind":"module"},"17:12584:23959":{"crate_id":17,"path":["object","read","xcoff","symbol","SymbolIterator"],"kind":"struct"},"2:2959:76":{"crate_id":2,"path":["core","convert","AsMut"],"kind":"trait"},"17:10068:23934":{"crate_id":17,"path":["object","common","SectionFlags"],"kind":"enum"},"6:523:7543":{"crate_id":6,"path":["libc","unix","hostent"],"kind":"struct"},"17:10218:6149":{"crate_id":17,"path":["object","endian","U32Bytes"],"kind":"struct"},"5:6180:5793":{"crate_id":5,"path":["alloc","sync","from_iter_exact","Guard"],"kind":"struct"},"17:15778:6960":{"crate_id":17,"path":["object","pe","ImageSeparateDebugHeader"],"kind":"struct"},"2:46024:8870":{"crate_id":2,"path":["core","core_arch","simd","u32x2"],"kind":"struct"},"2:46861:8961":{"crate_id":2,"path":["core","core_arch","simd","u8x64"],"kind":"struct"},"17:10155:6146":{"crate_id":17,"path":["object","endian","LittleEndian"],"kind":"struct"},"1:6509:220":{"crate_id":1,"path":["std","sync","mpmc","Receiver"],"kind":"struct"},"16:4771:7157":{"crate_id":16,"path":["gimli","constants","DwId"],"kind":"struct"},"6:564:7565":{"crate_id":6,"path":["libc","unix","itimerval"],"kind":"struct"},"2:41317:4024":{"crate_id":2,"path":["core","iter","sources","repeat_n","RepeatN"],"kind":"struct"},"17:15760:6954":{"crate_id":17,"path":["object","pe","ImageFunctionEntry"],"kind":"struct"},"2:3454:140":{"crate_id":2,"path":["core","ops","function","Fn"],"kind":"trait"},"1:7366:10597":{"crate_id":1,"path":["std","sys_common","backtrace","_print","DisplayBacktrace"],"kind":"struct"},"2:22356:11360":{"crate_id":2,"path":["core","core_simd","vector","SimdElement"],"kind":"trait"},"17:15383:6836":{"crate_id":17,"path":["object","pe","ImageResourceDirStringU"],"kind":"struct"},"24:5422:3904":{"crate_id":24,"path":["syn","expr","ExprTuple"],"kind":"struct"},"2:44176:9523":{"crate_id":2,"path":["core","str","iter","Matches"],"kind":"struct"},"17:14912:6730":{"crate_id":17,"path":["object","pe","ImageRomOptionalHeader"],"kind":"struct"},"16:5385:6146":{"crate_id":16,"path":["gimli","endianity","LittleEndian"],"kind":"struct"},"2:13887:5841":{"crate_id":2,"path":["core","task","wake","Waker"],"kind":"struct"},"6:5415:7999":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_initmsg"],"kind":"struct"},"16:8216:9393":{"crate_id":16,"path":["gimli","read","unit","DebugTypesUnitHeadersIter"],"kind":"struct"},"2:30693:5410":{"crate_id":2,"path":["core","mem","maybe_uninit","MaybeUninit"],"kind":"union"},"9:238:8836":{"crate_id":9,"path":["miniz_oxide","inflate","core","State"],"kind":"enum"},"17:16069:7032":{"crate_id":17,"path":["object","xcoff","SymbolBytes"],"kind":"struct"},"16:5742:9253":{"crate_id":16,"path":["gimli","read","cfi","ParsedEhFrameHdr"],"kind":"struct"},"2:22978:8578":{"crate_id":2,"path":["core","num","diy_float","Fp"],"kind":"struct"},"6:5671:8118":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_can_addr"],"kind":"union"},"1:7995:5350":{"crate_id":1,"path":["std","thread","local","AccessError"],"kind":"struct"},"2:40904:4058":{"crate_id":2,"path":["core","iter","adapters","scan","Scan"],"kind":"struct"},"2:23022:34264":{"crate_id":2,"path":["core","num","flt2dec","Sign"],"kind":"enum"},"2:11282:9442":{"crate_id":2,"path":["core","slice","iter","SplitInclusive"],"kind":"struct"},"2:43879:16513":{"crate_id":2,"path":["core","slice","iter","RChunksMut"],"kind":"struct"},"1:373:5348":{"crate_id":1,"path":["std","thread","scoped","Scope"],"kind":"struct"},"24:1105:3578":{"crate_id":24,"path":["syn","generics","TypeGenerics"],"kind":"struct"},"1:2315:11133":{"crate_id":1,"path":["std","fs","DirEntry"],"kind":"struct"},"2:2595:672":{"crate_id":2,"path":["core","ptr","drop_in_place"],"kind":"function"},"1:3658:33679":{"crate_id":1,"path":["std","io","Write","write_fmt","Adapter"],"kind":"struct"},"2:40801:4050":{"crate_id":2,"path":["core","iter","adapters","filter","Filter"],"kind":"struct"},"16:7799:7119":{"crate_id":16,"path":["gimli","read","unit","DebugInfo"],"kind":"struct"},"5:7602:16647":{"crate_id":5,"path":["alloc","ffi","c_str","FromBytesWithNulErrorKind"],"kind":"enum"},"16:7379:37413":{"crate_id":16,"path":["gimli","read","op","EvaluationState"],"kind":"enum"},"17:14212:6520":{"crate_id":17,"path":["object","macho","DylibModule64"],"kind":"struct"},"1:8533:4061":{"crate_id":1,"path":["std","io","Take"],"kind":"struct"},"1:8494:9049":{"crate_id":1,"path":["std","io","IoSlice"],"kind":"struct"},"2:22680:11440":{"crate_id":2,"path":["core","core_simd","simd","cmp","eq","SimdPartialEq"],"kind":"trait"},"11:1601:22938":{"crate_id":11,"path":["hashbrown","rustc_entry","RustcVacantEntry"],"kind":"struct"},"17:13844:6445":{"crate_id":17,"path":["object","macho","LcStr"],"kind":"struct"},"3:0:505":{"crate_id":3,"path":["compiler_builtins"],"kind":"module"},"2:45971:8863":{"crate_id":2,"path":["core","core_arch","simd","i16x2"],"kind":"struct"},"11:1880:3952":{"crate_id":11,"path":["hashbrown","set","Iter"],"kind":"struct"},"2:30438:11211":{"crate_id":2,"path":["core","num","FpCategory"],"kind":"enum"},"11:671:3952":{"crate_id":11,"path":["hashbrown","map","Iter"],"kind":"struct"},"16:6532:9326":{"crate_id":16,"path":["gimli","read","aranges","ArangeEntryIter"],"kind":"struct"},"2:23084:9460":{"crate_id":2,"path":["core","num","error","ParseIntError"],"kind":"struct"},"2:7831:4012":{"crate_id":2,"path":["core","iter","range","Step"],"kind":"trait"},"16:5075:7167":{"crate_id":16,"path":["gimli","constants","DwMacro"],"kind":"struct"},"6:586:7577":{"crate_id":6,"path":["libc","unix","protoent"],"kind":"struct"},"24:4305:4233":{"crate_id":24,"path":["syn","token","AndAnd"],"kind":"struct"},"21:2721:2521":{"crate_id":21,"path":["proc_macro","Ident"],"kind":"struct"},"2:43787:16510":{"crate_id":2,"path":["core","slice","iter","ChunksMut"],"kind":"struct"},"1:1974:10589":{"crate_id":1,"path":["std","error","Report"],"kind":"struct"},"2:40781:4049":{"crate_id":2,"path":["core","iter","adapters","cycle","Cycle"],"kind":"struct"},"1:11010:10588":{"crate_id":1,"path":["std","sys","pal","unix","os","JoinPathsError"],"kind":"struct"},"6:5636:8105":{"crate_id":6,"path":["libc","unix","linux_like","linux","hwtstamp_config"],"kind":"struct"},"24:3784:2558":{"crate_id":24,"path":["syn","token","Union"],"kind":"struct"},"6:1526:7599":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_in6"],"kind":"struct"},"6:6670:8283":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_seccomp"],"kind":"struct"},"5:4162:3956":{"crate_id":5,"path":["alloc","collections","vec_deque","iter_mut","IterMut"],"kind":"struct"},"17:13485:6359":{"crate_id":17,"path":["object","elf","Dyn64"],"kind":"struct"},"16:5769:9257":{"crate_id":16,"path":["gimli","read","cfi","EhHdrTable"],"kind":"struct"},"2:44533:9542":{"crate_id":2,"path":["core","str","pattern","StrSearcher"],"kind":"struct"},"2:43942:9508":{"crate_id":2,"path":["core","str","iter","Chars"],"kind":"struct"},"16:2838:7109":{"crate_id":16,"path":["gimli","common","DebugTypeSignature"],"kind":"struct"},"1:10723:11191":{"crate_id":1,"path":["std","sys","pal","unix","stdio","Stdin"],"kind":"struct"},"24:664:5977":{"crate_id":24,"path":["syn","error","SpanRange"],"kind":"struct"},"17:15197:6788":{"crate_id":17,"path":["object","pe","ImageRelocation"],"kind":"struct"},"11:772:9403":{"crate_id":11,"path":["hashbrown","map","Keys"],"kind":"struct"},"16:2508:7094":{"crate_id":16,"path":["gimli","common","DebugLineOffset"],"kind":"struct"},"16:6066:9287":{"crate_id":16,"path":["gimli","read","cfi","RegisterRuleIter"],"kind":"struct"},"1:11050:9073":{"crate_id":1,"path":["std","sys","pal","unix","process","process_common","ExitCode"],"kind":"struct"},"17:15957:6988":{"crate_id":17,"path":["object","xcoff","AuxHeader32"],"kind":"struct"},"5:3251:3952":{"crate_id":5,"path":["alloc","collections","btree","set","Iter"],"kind":"struct"},"9:424:22857":{"crate_id":9,"path":["miniz_oxide","MZStatus"],"kind":"enum"},"17:11853:24100":{"crate_id":17,"path":["object","read","macho","file","MachOComdat"],"kind":"struct"},"20:687:3974":{"crate_id":20,"path":["proc_macro2","marker","ProcMacroAutoTraits"],"kind":"struct"},"17:13308:6328":{"crate_id":17,"path":["object","elf","CompressionHeader64"],"kind":"struct"},"20:775:3973":{"crate_id":20,"path":["proc_macro2","extra","DelimSpan"],"kind":"struct"},"17:12695:24144":{"crate_id":17,"path":["object","read","xcoff","segment","XcoffSegment"],"kind":"struct"},"1:12352:1724":{"crate_id":1,"path":["std","str"],"kind":"primitive"},"2:11214:3956":{"crate_id":2,"path":["core","slice","iter","IterMut"],"kind":"struct"},"6:5370:7978":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlmsgerr"],"kind":"struct"},"16:7014:23881":{"crate_id":16,"path":["gimli","read","loclists","RawLocListEntry"],"kind":"enum"},"17:11674:9219":{"crate_id":17,"path":["object","read","elf","version","VernauxIterator"],"kind":"struct"},"24:5571:3180":{"crate_id":24,"path":["syn","generics","TraitBoundModifier"],"kind":"enum"},"17:14356:6539":{"crate_id":17,"path":["object","macho","EncryptionInfoCommand64"],"kind":"struct"},"24:5613:2598":{"crate_id":24,"path":["syn","lifetime","Lifetime"],"kind":"function"},"6:532:7549":{"crate_id":6,"path":["libc","unix","iovec"],"kind":"struct"},"2:8759:4032":{"crate_id":2,"path":["core","iter","traits","marker","TrustedStep"],"kind":"trait"},"24:4288:4232":{"crate_id":24,"path":["syn","token","And"],"kind":"struct"},"1:9355:28570":{"crate_id":1,"path":["std","sync","mpmc","select","Selected"],"kind":"enum"},"17:12621:6244":{"crate_id":17,"path":["object","read","xcoff","symbol","XcoffSymbol"],"kind":"struct"},"1:9190:9074":{"crate_id":1,"path":["std","sync","mpsc","SendError"],"kind":"struct"},"5:3292:9405":{"crate_id":5,"path":["alloc","collections","btree","set","Intersection"],"kind":"struct"},"11:2323:11077":{"crate_id":11,"path":["hashbrown","table","OccupiedEntry"],"kind":"struct"},"24:2311:3949":{"crate_id":24,"path":["syn","punctuated","PairsMut"],"kind":"struct"},"18:0:3714":{"crate_id":18,"path":["memchr"],"kind":"module"},"24:1361:9149":{"crate_id":24,"path":["syn","lit","LitRepr"],"kind":"struct"},"6:4837:7763":{"crate_id":6,"path":["libc","unix","linux_like","linux","signalfd_siginfo"],"kind":"struct"},"21:2379:2589":{"crate_id":21,"path":["proc_macro","bridge","TokenTree"],"kind":"enum"},"1:4215:11234":{"crate_id":1,"path":["std","os","unix","fs","DirEntryExt2"],"kind":"trait"},"17:14545:6570":{"crate_id":17,"path":["object","macho","Nlist32"],"kind":"struct"},"1:6867:5866":{"crate_id":1,"path":["std","sync","reentrant_lock","ReentrantLockGuard"],"kind":"struct"},"1:9270:9078":{"crate_id":1,"path":["std","sync","condvar","WaitTimeoutResult"],"kind":"struct"},"16:4913:7162":{"crate_id":16,"path":["gimli","constants","DwIdx"],"kind":"struct"},"15:306:22965":{"crate_id":15,"path":["addr2line","LocationRangeUnitIter"],"kind":"struct"},"2:3342:4255":{"crate_id":2,"path":["core","ops","bit","Not"],"kind":"trait"},"16:6782:23879":{"crate_id":16,"path":["gimli","read","line","ColumnType"],"kind":"enum"},"6:6811:8330":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_data"],"kind":"union"},"1:8013:5337":{"crate_id":1,"path":["std","thread","Builder"],"kind":"struct"},"21:895:5590":{"crate_id":21,"path":["proc_macro","bridge","client","FreeFunctions"],"kind":"struct"},"24:5566:3177":{"crate_id":24,"path":["syn","generics","TraitBound"],"kind":"struct"},"6:6729:8303":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_umem_reg"],"kind":"struct"},"1:656:10587":{"crate_id":1,"path":["std","backtrace","Backtrace"],"kind":"struct"},"23:150:4729":{"crate_id":23,"path":["quote","__private","ThereIsNoIteratorInRepetition"],"kind":"struct"},"11:2539:7422":{"crate_id":11,"path":["hashbrown","raw","bitmask","BitMask"],"kind":"struct"},"1:9147:9072":{"crate_id":1,"path":["std","process","ExitStatusError"],"kind":"struct"},"17:10534:37469":{"crate_id":17,"path":["object","read","any","SegmentIteratorInternal"],"kind":"enum"},"2:40512:16565":{"crate_id":2,"path":["core","char","EscapeDebugInner"],"kind":"enum"},"17:11313:9212":{"crate_id":17,"path":["object","read","coff","import","ImportObjectData"],"kind":"struct"},"11:1725:156":{"crate_id":11,"path":["hashbrown","set","HashSet"],"kind":"struct"},"17:12659:24140":{"crate_id":17,"path":["object","read","xcoff","comdat","XcoffComdat"],"kind":"struct"},"1:5779:11306":{"crate_id":1,"path":["std","process","Termination"],"kind":"trait"},"18:735:28206":{"crate_id":18,"path":["memchr","memmem","SearcherKind"],"kind":"enum"},"2:42419:93":{"crate_id":2,"path":["core","sync","atomic","AtomicU16"],"kind":"struct"},"17:16187:7061":{"crate_id":17,"path":["object","xcoff","ExpAux"],"kind":"struct"},"1:9456:9083":{"crate_id":1,"path":["std","time","SystemTime"],"kind":"struct"},"1:5098:11281":{"crate_id":1,"path":["std","os","net","linux_ext","socket","UnixSocketExt"],"kind":"trait"},"24:4718:4261":{"crate_id":24,"path":["syn","token","PercentEq"],"kind":"struct"},"2:42655:97":{"crate_id":2,"path":["core","sync","atomic","AtomicUsize"],"kind":"struct"},"24:3053:4199":{"crate_id":24,"path":["syn","token","As"],"kind":"struct"},"0:965:2377":{"crate_id":0,"path":["serde_derive","Deserialize"],"kind":"proc_derive"},"17:13211:6310":{"crate_id":17,"path":["object","elf","FileHeader64"],"kind":"struct"},"24:3308:4208":{"crate_id":24,"path":["syn","token","Extern"],"kind":"struct"},"5:1509:3951":{"crate_id":5,"path":["alloc","collections","btree","map","IntoIter"],"kind":"struct"},"6:8300:8548":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_barrier_t"],"kind":"struct"},"2:22713:11439":{"crate_id":2,"path":["core","core_simd","simd","cmp","ord","SimdOrd"],"kind":"trait"},"6:6880:8345":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","sysinfo"],"kind":"struct"},"5:5081:5793":{"crate_id":5,"path":["alloc","rc","from_iter_exact","Guard"],"kind":"struct"},"17:16165:7055":{"crate_id":17,"path":["object","xcoff","FunAux32"],"kind":"struct"},"14:220:7415":{"crate_id":14,"path":["rustc_demangle","SizeLimitExhausted"],"kind":"struct"},"2:22:819":{"crate_id":2,"path":["core","format_args"],"kind":"macro"},"11:1907:9406":{"crate_id":11,"path":["hashbrown","set","Difference"],"kind":"struct"},"16:7618:7280":{"crate_id":16,"path":["gimli","read","rnglists","RangeLists"],"kind":"struct"},"5:1540:9404":{"crate_id":5,"path":["alloc","collections","btree","map","Values"],"kind":"struct"},"2:47174:8970":{"crate_id":2,"path":["core","core_arch","x86","__m128i"],"kind":"struct"},"1:9415:234":{"crate_id":1,"path":["std","sync","rwlock","RwLockReadGuard"],"kind":"struct"},"17:11467:6180":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbol"],"kind":"struct"},"11:1564:22936":{"crate_id":11,"path":["hashbrown","rustc_entry","RustcEntry"],"kind":"enum"},"24:5814:203":{"crate_id":24,"path":["syn","path","Path"],"kind":"struct"},"2:10825:5831":{"crate_id":2,"path":["core","slice","sort","merge","MergeHole"],"kind":"struct"},"20:358:3970":{"crate_id":20,"path":["proc_macro2","imp","LexError"],"kind":"enum"},"1:9726:11149":{"crate_id":1,"path":["std","sys","pal","unix","fs","ReadDir"],"kind":"struct"},"24:5334:3892":{"crate_id":24,"path":["syn","expr","ExprForLoop"],"kind":"struct"},"17:15701:6938":{"crate_id":17,"path":["object","pe","ImageEnclaveImport"],"kind":"struct"},"18:113:28198":{"crate_id":18,"path":["memchr","memchr","iter","Memchr3"],"kind":"struct"},"1:8565:11206":{"crate_id":1,"path":["std","net","tcp","IntoIncoming"],"kind":"struct"},"2:40478:9471":{"crate_id":2,"path":["core","char","decode","DecodeUtf16Error"],"kind":"struct"},"5:1493:3956":{"crate_id":5,"path":["alloc","collections","btree","map","IterMut"],"kind":"struct"},"6:7467:8441":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_fpstate"],"kind":"struct"},"23:78:2590":{"crate_id":23,"path":["quote","to_tokens","ToTokens"],"kind":"trait"},"1:12360:911":{"crate_id":1,"path":["std","i8"],"kind":"primitive"},"2:42278:196":{"crate_id":2,"path":["core","sync","atomic","Ordering"],"kind":"enum"},"17:13774:6434":{"crate_id":17,"path":["object","macho","FatArch32"],"kind":"struct"},"2:43958:3494":{"crate_id":2,"path":["core","str","iter","Bytes"],"kind":"struct"},"6:5390:7987":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_ifru_map"],"kind":"struct"},"1:8236:127":{"crate_id":1,"path":["std","fs","DirBuilder"],"kind":"struct"},"24:1943:2596":{"crate_id":24,"path":["syn","parse_quote"],"kind":"macro"},"21:929:4138":{"crate_id":21,"path":["proc_macro","bridge","client","SourceFile"],"kind":"struct"},"2:22914:9452":{"crate_id":2,"path":["core","num","dec2flt","decimal","Decimal"],"kind":"struct"},"16:4743:7156":{"crate_id":16,"path":["gimli","constants","DwAddr"],"kind":"struct"},"23:38:3583":{"crate_id":23,"path":["quote","format_ident"],"kind":"macro"},"2:12656:9511":{"crate_id":2,"path":["core","str","iter","SplitInternal"],"kind":"struct"},"2:10600:153":{"crate_id":2,"path":["core","hash","Hash"],"kind":"trait"},"5:5868:251":{"crate_id":5,"path":["alloc","string","ToString"],"kind":"trait"},"2:39981:5120":{"crate_id":2,"path":["core","ascii","ascii_char","AsciiChar"],"kind":"enum"},"1:11659:9097":{"crate_id":1,"path":["std","sys_common","wtf8","CodePoint"],"kind":"struct"},"20:0:2356":{"crate_id":20,"path":["proc_macro2"],"kind":"module"},"1:7994:11154":{"crate_id":1,"path":["std","sealed","Sealed"],"kind":"trait"},"2:43108:4096":{"crate_id":2,"path":["core","fmt","Alignment"],"kind":"enum"},"1:8355:11187":{"crate_id":1,"path":["std","io","error","ErrorKind"],"kind":"enum"},"17:15521:6896":{"crate_id":17,"path":["object","pe","ImageLoadConfigDirectory64"],"kind":"struct"},"21:421:5757":{"crate_id":21,"path":["proc_macro","bridge","server","RunningSameThreadGuard"],"kind":"struct"},"7:79:22848":{"crate_id":7,"path":["unwind","libunwind","_Unwind_Action"],"kind":"enum"},"5:7573:5341":{"crate_id":5,"path":["alloc","ffi","c_str","CString"],"kind":"struct"},"24:1916:4074":{"crate_id":24,"path":["syn","parse","Parser"],"kind":"trait"},"17:11269:24003":{"crate_id":17,"path":["object","read","coff","import","ImportName"],"kind":"enum"},"2:22635:5489":{"crate_id":2,"path":["core","core_simd","simd","ptr","mut_ptr","SimdMutPtr","with_exposed_provenance"],"kind":"function"},"16:0:3712":{"crate_id":16,"path":["gimli"],"kind":"module"},"1:4772:11279":{"crate_id":1,"path":["std","os","unix","thread","JoinHandleExt"],"kind":"trait"},"6:6746:8307":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_statistics"],"kind":"struct"},"24:1626:37705":{"crate_id":24,"path":["syn","lookahead","TokenMarker"],"kind":"enum"},"24:98:4417":{"crate_id":24,"path":["syn","token","private","CustomToken"],"kind":"trait"},"2:2030:671":{"crate_id":2,"path":["core","mem","drop"],"kind":"function"},"17:13412:6345":{"crate_id":17,"path":["object","elf","Rel64"],"kind":"struct"},"17:10915:37468":{"crate_id":17,"path":["object","read","any","SectionRelocationIteratorInternal"],"kind":"enum"},"6:6915:8370":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","semid_ds"],"kind":"struct"},"2:47229:8975":{"crate_id":2,"path":["core","core_arch","x86","__m256d"],"kind":"struct"},"17:11128:6137":{"crate_id":17,"path":["object","read","coff","section","CoffSection"],"kind":"struct"},"2:23095:11225":{"crate_id":2,"path":["core","num","error","IntErrorKind"],"kind":"enum"},"6:1565:7624":{"crate_id":6,"path":["libc","unix","linux_like","tm"],"kind":"struct"},"2:23726:236":{"crate_id":2,"path":["core","num","saturating","Saturating"],"kind":"struct"},"6:7339:8400":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","flock64"],"kind":"struct"},"1:2073:198":{"crate_id":1,"path":["std","ffi","os_str","OsString"],"kind":"struct"},"11:708:10699":{"crate_id":11,"path":["hashbrown","map","IntoKeys"],"kind":"struct"},"24:2338:3950":{"crate_id":24,"path":["syn","punctuated","IntoPairs"],"kind":"struct"},"11:2148:11078":{"crate_id":11,"path":["hashbrown","set","VacantEntry"],"kind":"struct"},"16:6456:23877":{"crate_id":16,"path":["gimli","read","abbrev","Attributes"],"kind":"enum"},"6:465:2510":{"crate_id":6,"path":["libc","unix","group"],"kind":"struct"},"24:5402:3901":{"crate_id":24,"path":["syn","expr","ExprReturn"],"kind":"struct"},"2:42164:4709":{"crate_id":2,"path":["core","panic","panic_info","PanicInfo"],"kind":"struct"},"21:2228:2509":{"crate_id":21,"path":["proc_macro","bridge","Group"],"kind":"struct"},"6:497:7523":{"crate_id":6,"path":["libc","unix","rusage"],"kind":"struct"},"16:7428:23884":{"crate_id":16,"path":["gimli","read","op","EvaluationResult"],"kind":"enum"},"5:839:101":{"crate_id":5,"path":["alloc","collections","binary_heap","BinaryHeap"],"kind":"struct"},"16:4531:7150":{"crate_id":16,"path":["gimli","constants","DwDs"],"kind":"struct"},"11:2440:5553":{"crate_id":11,"path":["hashbrown","table","Drain"],"kind":"struct"},"18:531:9192":{"crate_id":18,"path":["memchr","memmem","prefilter","PrefilterState"],"kind":"struct"},"2:43931:9507":{"crate_id":2,"path":["core","str","error","ParseBoolError"],"kind":"struct"},"2:41335:4028":{"crate_id":2,"path":["core","iter","sources","successors","Successors"],"kind":"struct"},"17:12494:6238":{"crate_id":17,"path":["object","read","pe","rich","RichHeaderInfo"],"kind":"struct"},"20:953:3205":{"crate_id":20,"path":["proc_macro2","Literal"],"kind":"struct"},"17:11341:24014":{"crate_id":17,"path":["object","read","elf","segment","ElfSegmentIterator"],"kind":"struct"},"2:23002:34287":{"crate_id":2,"path":["core","num","flt2dec","decoder","FullDecoded"],"kind":"enum"},"17:14341:6535":{"crate_id":17,"path":["object","macho","EncryptionInfoCommand32"],"kind":"struct"},"21:53:5576":{"crate_id":21,"path":["proc_macro","bridge","buffer","Buffer"],"kind":"struct"},"2:46231:8890":{"crate_id":2,"path":["core","core_arch","simd","i8x16"],"kind":"struct"},"14:31:10573":{"crate_id":14,"path":["rustc_demangle","v0","Demangle"],"kind":"struct"},"5:7464:210":{"crate_id":5,"path":["alloc","collections","btree","set","Range"],"kind":"struct"},"1:1631:9406":{"crate_id":1,"path":["std","collections","hash","set","Difference"],"kind":"struct"},"5:3754:5769":{"crate_id":5,"path":["alloc","collections","linked_list","drop","DropGuard"],"kind":"struct"},"1:10903:11285":{"crate_id":1,"path":["std","sys","pal","unix","fd","FileDesc"],"kind":"struct"},"2:6977:5576":{"crate_id":2,"path":["core","iter","adapters","map_windows","Buffer"],"kind":"struct"},"17:11799:24098":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCacheImageIterator"],"kind":"struct"},"1:11673:9596":{"crate_id":1,"path":["std","sys_common","wtf8","Wtf8Buf"],"kind":"struct"},"2:46298:8893":{"crate_id":2,"path":["core","core_arch","simd","i64x2"],"kind":"struct"},"6:6447:8169":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","glob64_t"],"kind":"struct"},"2:44722:8847":{"crate_id":2,"path":["core","time","Nanoseconds"],"kind":"struct"},"2:34298:5981":{"crate_id":2,"path":["core","ops","bit","BitXor"],"kind":"trait"},"1:1075:9374":{"crate_id":1,"path":["std","collections","hash","map","Entry"],"kind":"enum"},"1:4981:5850":{"crate_id":1,"path":["std","os","fd","owned","OwnedFd"],"kind":"struct"},"24:4375:4238":{"crate_id":24,"path":["syn","token","Colon"],"kind":"struct"},"17:16093:7037":{"crate_id":17,"path":["object","xcoff","Symbol64"],"kind":"struct"},"2:3040:123":{"crate_id":2,"path":["core","default","Default"],"kind":"trait"},"6:4924:7814":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_id"],"kind":"struct"},"16:7397:37420":{"crate_id":16,"path":["gimli","read","op","EvaluationWaiting"],"kind":"enum"},"6:4932:7816":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_absinfo"],"kind":"struct"},"5:2770:8565":{"crate_id":5,"path":["alloc","collections","btree","node","Handle"],"kind":"struct"},"17:11915:24102":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandVariant"],"kind":"enum"},"2:2611:5490":{"crate_id":2,"path":["core","ptr","with_exposed_provenance_mut"],"kind":"function"},"1:10360:29750":{"crate_id":1,"path":["std","sys","pal","unix","os","EnvStrDebug"],"kind":"struct"},"17:256:37421":{"crate_id":17,"path":["object","read","util","DebugByte"],"kind":"struct"},"1:12345:1176":{"crate_id":1,"path":["std","never"],"kind":"primitive"},"17:15333:6821":{"crate_id":17,"path":["object","pe","ImageBoundForwarderRef"],"kind":"struct"},"15:394:22974":{"crate_id":15,"path":["addr2line","DebugFile"],"kind":"enum"},"24:4689:4259":{"crate_id":24,"path":["syn","token","PathSep"],"kind":"struct"},"17:1207:23989":{"crate_id":17,"path":["object","read","coff","relocation","CoffRelocationIterator"],"kind":"struct"},"2:47028:8964":{"crate_id":2,"path":["core","core_arch","simd","i32x16"],"kind":"struct"},"24:5976:3932":{"crate_id":24,"path":["syn","ty","TypeBareFn"],"kind":"struct"},"1:9294:5330":{"crate_id":1,"path":["std","sync","mpmc","context","Inner"],"kind":"struct"},"2:46784:8929":{"crate_id":2,"path":["core","core_arch","simd","i8x64"],"kind":"struct"},"1:2741:10593":{"crate_id":1,"path":["std","io","buffered","bufwriter","WriterPanicked"],"kind":"struct"},"24:5664:3917":{"crate_id":24,"path":["syn","lit","LitCStr"],"kind":"struct"},"6:5630:8102":{"crate_id":6,"path":["libc","unix","linux_like","linux","ifconf"],"kind":"struct"},"2:21714:34881":{"crate_id":2,"path":["core","core_simd","swizzle","deinterleave","Odd"],"kind":"struct"},"17:3264:24065":{"crate_id":17,"path":["object","read","macho","section","MachOSectionIterator"],"kind":"struct"},"17:14066:6479":{"crate_id":17,"path":["object","macho","DylinkerCommand"],"kind":"struct"},"2:46444:8901":{"crate_id":2,"path":["core","core_arch","simd","u8x32"],"kind":"struct"},"17:11595:6181":{"crate_id":17,"path":["object","read","elf","version","VersionIndex"],"kind":"struct"},"16:2548:7096":{"crate_id":16,"path":["gimli","common","LocationListsOffset"],"kind":"struct"},"24:4467:4244":{"crate_id":24,"path":["syn","token","DotDotEq"],"kind":"struct"},"1:5289:29738":{"crate_id":1,"path":["std","path","fmt","DebugHelper"],"kind":"struct"},"24:5892:3926":{"crate_id":24,"path":["syn","restriction","FieldMutability"],"kind":"enum"},"2:42806:4107":{"crate_id":2,"path":["core","fmt","num","LowerHex"],"kind":"struct"},"6:7389:8428":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stat64"],"kind":"struct"},"16:7528:9375":{"crate_id":16,"path":["gimli","read","pubnames","PubNamesEntry"],"kind":"struct"},"2:22201:11364":{"crate_id":2,"path":["core","core_simd","to_bytes","ToBytes"],"kind":"trait"},"17:15931:6296":{"crate_id":17,"path":["object","xcoff","FileHeader32"],"kind":"struct"},"2:10184:4097":{"crate_id":2,"path":["core","fmt","builders","FormatterFn"],"kind":"struct"},"6:5219:7912":{"crate_id":6,"path":["libc","unix","linux_like","linux","in6_pktinfo"],"kind":"struct"},"17:10573:37461":{"crate_id":17,"path":["object","read","any","SegmentInternal"],"kind":"enum"},"17:13292:6324":{"crate_id":17,"path":["object","elf","CompressionHeader32"],"kind":"struct"},"17:15596:6909":{"crate_id":17,"path":["object","pe","ImageHotPatchHashes"],"kind":"struct"},"2:43042:4096":{"crate_id":2,"path":["core","fmt","rt","Alignment"],"kind":"enum"},"17:16212:7066":{"crate_id":17,"path":["object","xcoff","BlockAux64"],"kind":"struct"},"16:4641:7154":{"crate_id":16,"path":["gimli","constants","DwVirtuality"],"kind":"struct"},"17:13855:6446":{"crate_id":17,"path":["object","macho","SegmentCommand32"],"kind":"struct"},"17:12278:24134":{"crate_id":17,"path":["object","read","pe","section","PeRelocationIterator"],"kind":"struct"},"2:32282:3283":{"crate_id":2,"path":["core","error","tags","Value"],"kind":"struct"},"1:8503:11153":{"crate_id":1,"path":["std","io","SeekFrom"],"kind":"enum"},"2:46120:8876":{"crate_id":2,"path":["core","core_arch","simd","f32x2"],"kind":"struct"},"1:3340:11191":{"crate_id":1,"path":["std","io","stdio","Stdin"],"kind":"struct"},"24:3478:3204":{"crate_id":24,"path":["syn","token","Match"],"kind":"struct"},"21:2657:4138":{"crate_id":21,"path":["proc_macro","SourceFile"],"kind":"struct"},"24:4520:4247":{"crate_id":24,"path":["syn","token","Ge"],"kind":"struct"},"11:873:11075":{"crate_id":11,"path":["hashbrown","map","RawVacantEntryMut"],"kind":"struct"},"24:5602:2521":{"crate_id":24,"path":["syn","ident","Ident"],"kind":"function"},"17:14788:6637":{"crate_id":17,"path":["object","pe","ImageVxdHeader"],"kind":"struct"},"16:6665:23878":{"crate_id":16,"path":["gimli","read","line","LineInstruction"],"kind":"enum"},"17:12201:24132":{"crate_id":17,"path":["object","read","pe","file","PeComdat"],"kind":"struct"},"24:4945:3198":{"crate_id":24,"path":["syn","token","Brace"],"kind":"struct"},"17:15266:6804":{"crate_id":17,"path":["object","pe","ImageImportByName"],"kind":"struct"},"20:113:9187":{"crate_id":20,"path":["proc_macro2","rcvec","RcVec"],"kind":"struct"},"1:11518:5882":{"crate_id":1,"path":["std","sys","sync","once","futex","CompletionGuard"],"kind":"struct"},"5:1478:3952":{"crate_id":5,"path":["alloc","collections","btree","map","Iter"],"kind":"struct"},"17:11647:9217":{"crate_id":17,"path":["object","read","elf","version","VerdauxIterator"],"kind":"struct"},"24:5381:3878":{"crate_id":24,"path":["syn","expr","ExprParen"],"kind":"struct"},"1:4561:11252":{"crate_id":1,"path":["std","os","unix","net","stream","UnixStream"],"kind":"struct"},"16:6263:9317":{"crate_id":16,"path":["gimli","read","cfi","PointerEncodingParameters"],"kind":"struct"},"16:6246:206":{"crate_id":16,"path":["gimli","read","cfi","Pointer"],"kind":"enum"},"24:1941:2359":{"crate_id":24,"path":["syn","parse_macro_input"],"kind":"macro"},"1:8084:11104":{"crate_id":1,"path":["std","env","VarError"],"kind":"enum"},"17:2175:24044":{"crate_id":17,"path":["object","read","elf","relocation","ElfRelaIterator"],"kind":"enum"},"1:1859:11086":{"crate_id":1,"path":["std","env","Vars"],"kind":"struct"},"24:657:226":{"crate_id":24,"path":["syn","error","Result"],"kind":"type_alias"},"21:2662:2589":{"crate_id":21,"path":["proc_macro","TokenTree"],"kind":"enum"},"2:3284:5453":{"crate_id":2,"path":["core","ops","async_function","AsyncFn"],"kind":"trait"},"24:5369:3898":{"crate_id":24,"path":["syn","expr","ExprMatch"],"kind":"struct"},"17:15944:6310":{"crate_id":17,"path":["object","xcoff","FileHeader64"],"kind":"struct"},"5:3885:5551":{"crate_id":5,"path":["alloc","collections","linked_list","ExtractIf"],"kind":"struct"},"24:5717:3922":{"crate_id":24,"path":["syn","op","BinOp"],"kind":"enum"},"1:6374:5857":{"crate_id":1,"path":["std","sync","mpmc","waker","SyncWaker"],"kind":"struct"},"2:23164:8593":{"crate_id":2,"path":["core","num","nonzero","private","NonZeroU16Inner"],"kind":"struct"},"24:3155:104":{"crate_id":24,"path":["syn","token","Break"],"kind":"struct"},"23:407:4923":{"crate_id":23,"path":["quote","__private","RepInterp"],"kind":"struct"},"21:2553:9186":{"crate_id":21,"path":["proc_macro","diagnostic","Children"],"kind":"struct"},"1:2232:128":{"crate_id":1,"path":["std","ffi","os_str","Display"],"kind":"struct"},"16:2998:7134":{"crate_id":16,"path":["gimli","common","DwoId"],"kind":"struct"},"2:45986:8864":{"crate_id":2,"path":["core","core_arch","simd","u8x8"],"kind":"struct"},"6:6478:8182":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","termios"],"kind":"struct"},"17:11812:24063":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCacheImage"],"kind":"struct"},"16:872:37433":{"crate_id":16,"path":["gimli","read","endian_slice","DebugLen"],"kind":"struct"},"24:5662:3916":{"crate_id":24,"path":["syn","lit","LitByteStr"],"kind":"struct"},"2:44390:9536":{"crate_id":2,"path":["core","str","pattern","MultiCharEqSearcher"],"kind":"struct"},"1:8681:9054":{"crate_id":1,"path":["std","os","fd","owned","BorrowedFd"],"kind":"struct"},"6:5581:8075":{"crate_id":6,"path":["libc","unix","linux_like","linux","af_alg_iv"],"kind":"struct"},"5:5733:5557":{"crate_id":5,"path":["alloc","string","retain","SetLenOnDrop"],"kind":"struct"},"1:1089:11077":{"crate_id":1,"path":["std","collections","hash","map","OccupiedEntry"],"kind":"struct"},"6:8351:8560":{"crate_id":6,"path":["libc","unix","align","in6_addr"],"kind":"struct"},"1:9342:9079":{"crate_id":1,"path":["std","sync","mpmc","select","Operation"],"kind":"struct"},"16:5863:23871":{"crate_id":16,"path":["gimli","read","cfi","CieOrFde"],"kind":"enum"},"5:1324:9374":{"crate_id":5,"path":["alloc","collections","btree","map","entry","Entry"],"kind":"enum"},"1:6678:4018":{"crate_id":1,"path":["std","sync","once","Once"],"kind":"struct"},"17:13606:6392":{"crate_id":17,"path":["object","elf","GnuHashHeader"],"kind":"struct"},"24:1368:9152":{"crate_id":24,"path":["syn","lit","LitFloatRepr"],"kind":"struct"},"16:5897:7174":{"crate_id":16,"path":["gimli","read","cfi","Augmentation"],"kind":"struct"},"24:718:3952":{"crate_id":24,"path":["syn","error","Iter"],"kind":"struct"},"1:5004:11241":{"crate_id":1,"path":["std","os","fd","owned","AsFd"],"kind":"trait"},"1:884:3956":{"crate_id":1,"path":["std","collections","hash","map","IterMut"],"kind":"struct"},"6:6698:8293":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_ring_offset"],"kind":"struct"},"11:2400:3956":{"crate_id":11,"path":["hashbrown","table","IterMut"],"kind":"struct"},"24:4971:2852":{"crate_id":24,"path":["syn","token","Paren"],"kind":"struct"},"6:5031:7865":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_ff_upload"],"kind":"struct"},"17:14489:6563":{"crate_id":17,"path":["object","macho","EntryPointCommand"],"kind":"struct"},"17:13581:6388":{"crate_id":17,"path":["object","elf","NoteHeader64"],"kind":"struct"},"2:42813:4108":{"crate_id":2,"path":["core","fmt","num","UpperHex"],"kind":"struct"},"2:3292:5455":{"crate_id":2,"path":["core","ops","async_function","AsyncFnOnce"],"kind":"trait"},"1:5837:220":{"crate_id":1,"path":["std","sync","mpsc","Receiver"],"kind":"struct"},"1:10652:5878":{"crate_id":1,"path":["std","sys","pal","unix","stack_overflow","Handler"],"kind":"struct"},"17:14933:6735":{"crate_id":17,"path":["object","pe","ImageOptionalHeader64"],"kind":"struct"},"5:6023:71":{"crate_id":5,"path":["alloc","sync","Arc"],"kind":"struct"},"6:559:7563":{"crate_id":6,"path":["libc","unix","sigval"],"kind":"struct"},"5:7383:5463":{"crate_id":5,"path":["alloc","alloc","Global"],"kind":"struct"},"1:5335:204":{"crate_id":1,"path":["std","path","PathBuf"],"kind":"struct"},"6:6441:8168":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__timeval"],"kind":"struct"},"2:21797:11154":{"crate_id":2,"path":["core","core_simd","lane_count","sealed","Sealed"],"kind":"trait"},"18:635:6041":{"crate_id":18,"path":["memchr","memmem","twoway","ApproximateByteSet"],"kind":"struct"},"6:8265:8540":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_barrierattr_t"],"kind":"struct"},"2:46178:8887":{"crate_id":2,"path":["core","core_arch","simd","u16x8"],"kind":"struct"},"2:43071:7309":{"crate_id":2,"path":["core","fmt","rt","Flag"],"kind":"enum"},"1:10609:11307":{"crate_id":1,"path":["std","sys","pal","unix","process","process_common","CommandArgs"],"kind":"struct"},"24:2163:11005":{"crate_id":24,"path":["syn","print","TokensOrDefault"],"kind":"struct"},"24:1752:28232":{"crate_id":24,"path":["syn","parse","discouraged","Speculative"],"kind":"trait"},"16:6648:9338":{"crate_id":16,"path":["gimli","read","line","LineRows"],"kind":"struct"},"24:2667:5989":{"crate_id":24,"path":["syn","thread","ThreadBound"],"kind":"struct"},"6:8306:8549":{"crate_id":6,"path":["libc","unix","linux_like","linux","can_frame"],"kind":"struct"},"2:10608:157":{"crate_id":2,"path":["core","hash","Hasher"],"kind":"trait"},"17:12929:6266":{"crate_id":17,"path":["object","read","Import"],"kind":"struct"},"5:843:5772":{"crate_id":5,"path":["alloc","collections","binary_heap","PeekMut"],"kind":"struct"},"16:5367:23868":{"crate_id":16,"path":["gimli","endianity","RunTimeEndian"],"kind":"enum"},"2:2770:134":{"crate_id":2,"path":["core","cmp","Eq"],"kind":"trait"},"1:1897:11096":{"crate_id":1,"path":["std","env","SplitPaths"],"kind":"struct"},"17:15190:6787":{"crate_id":17,"path":["object","pe","ImageAuxSymbolCrc"],"kind":"struct"},"17:15400:6840":{"crate_id":17,"path":["object","pe","ImageLoadConfigCodeIntegrity"],"kind":"struct"},"17:12225:24110":{"crate_id":17,"path":["object","read","pe","section","PeSegmentIterator"],"kind":"struct"},"17:15836:6970":{"crate_id":17,"path":["object","pe","ImageCor20Header"],"kind":"struct"},"2:46007:8869":{"crate_id":2,"path":["core","core_arch","simd","u16x4"],"kind":"struct"},"17:12353:9236":{"crate_id":17,"path":["object","read","pe","import","ImportDescriptorIterator"],"kind":"struct"},"16:7570:7127":{"crate_id":16,"path":["gimli","read","pubtypes","DebugPubTypes"],"kind":"struct"},"0:0:2379":{"crate_id":0,"path":["serde_derive"],"kind":"module"},"1:2010:787":{"crate_id":1,"path":["std","ffi"],"kind":"module"},"17:14436:6559":{"crate_id":17,"path":["object","macho","LinkerOptionCommand"],"kind":"struct"},"21:214:10657":{"crate_id":21,"path":["proc_macro","bridge","fxhash","FxHasher"],"kind":"struct"},"20:889:2589":{"crate_id":20,"path":["proc_macro2","TokenTree"],"kind":"enum"},"1:11095:5879":{"crate_id":1,"path":["std","sys","pal","unix","process","process_inner","do_exec","Reset"],"kind":"struct"},"1:11769:5884":{"crate_id":1,"path":["std","sys_common","net","LookupHost"],"kind":"struct"},"17:11702:9221":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSubsectionIterator"],"kind":"struct"},"2:5093:16559":{"crate_id":2,"path":["core","char","REPLACEMENT_CHARACTER"],"kind":"constant"},"2:46330:8895":{"crate_id":2,"path":["core","core_arch","simd","f64x2"],"kind":"struct"},"24:5042:3868":{"crate_id":24,"path":["syn","data","FieldsNamed"],"kind":"struct"},"11:1900:9405":{"crate_id":11,"path":["hashbrown","set","Intersection"],"kind":"struct"},"1:9168:3952":{"crate_id":1,"path":["std","sync","mpsc","Iter"],"kind":"struct"},"1:10999:33004":{"crate_id":1,"path":["std","sys","pal","unix","kernel_copy","SpliceMode"],"kind":"enum"},"1:5992:4704":{"crate_id":1,"path":["std","sync","condvar","Condvar"],"kind":"struct"},"9:330:7466":{"crate_id":9,"path":["miniz_oxide","inflate","core","LocalVars"],"kind":"struct"},"1:9219:11329":{"crate_id":1,"path":["std","sync","mpsc","TryRecvError"],"kind":"enum"},"11:1064:22933":{"crate_id":11,"path":["hashbrown","map","EntryRef"],"kind":"enum"},"24:4455:4243":{"crate_id":24,"path":["syn","token","DotDotDot"],"kind":"struct"},"24:5346:3875":{"crate_id":24,"path":["syn","expr","ExprIndex"],"kind":"struct"},"17:16079:7033":{"crate_id":17,"path":["object","xcoff","Symbol32"],"kind":"struct"},"1:379:5349":{"crate_id":1,"path":["std","thread","scoped","ScopedJoinHandle"],"kind":"struct"},"6:7366:8410":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stat"],"kind":"struct"},"2:31072:196":{"crate_id":2,"path":["core","cmp","Ordering"],"kind":"enum"},"24:1061:37718":{"crate_id":24,"path":["syn","generics","LifetimesMut"],"kind":"struct"},"24:1004:4075":{"crate_id":24,"path":["syn","ext","IdentExt"],"kind":"trait"},"2:43125:137":{"crate_id":2,"path":["core","fmt","Error"],"kind":"struct"},"2:43972:9440":{"crate_id":2,"path":["core","str","iter","Split"],"kind":"struct"},"20:904:2509":{"crate_id":20,"path":["proc_macro2","Group"],"kind":"struct"},"1:9425:5868":{"crate_id":1,"path":["std","sync","rwlock","MappedRwLockReadGuard"],"kind":"struct"},"2:21746:11362":{"crate_id":2,"path":["core","core_simd","cast","SimdCast"],"kind":"trait"},"2:13191:119":{"crate_id":2,"path":["core","str","lossy","Debug"],"kind":"struct"},"17:15102:6765":{"crate_id":17,"path":["object","pe","ImageSymbolEx"],"kind":"struct"},"24:2451:3956":{"crate_id":24,"path":["syn","punctuated","IterMut"],"kind":"struct"},"2:44140:9521":{"crate_id":2,"path":["core","str","iter","RMatchIndices"],"kind":"struct"},"1:1844:696":{"crate_id":1,"path":["std","env"],"kind":"module"},"2:42213:226":{"crate_id":2,"path":["core","result","Result"],"kind":"enum"},"2:21697:34877":{"crate_id":2,"path":["core","core_simd","swizzle","interleave","Hi"],"kind":"struct"},"24:5614:2860":{"crate_id":24,"path":["syn","lit","Lit"],"kind":"enum"},"1:6682:11321":{"crate_id":1,"path":["std","sync","once","OnceState"],"kind":"struct"},"1:10981:9049":{"crate_id":1,"path":["std","sys","pal","unix","io","IoSlice"],"kind":"struct"},"17:12238:24109":{"crate_id":17,"path":["object","read","pe","section","PeSegment"],"kind":"struct"},"2:47255:8977":{"crate_id":2,"path":["core","core_arch","x86","__m512"],"kind":"struct"},"24:4508:4246":{"crate_id":24,"path":["syn","token","FatArrow"],"kind":"struct"},"5:2249:9412":{"crate_id":5,"path":["alloc","collections","btree","navigate","LeafRange"],"kind":"struct"},"17:11227:23979":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdat"],"kind":"struct"},"2:9420:4710":{"crate_id":2,"path":["core","panic","unwind_safe","AssertUnwindSafe"],"kind":"struct"},"1:9123:199":{"crate_id":1,"path":["std","process","Output"],"kind":"struct"},"17:14372:6540":{"crate_id":17,"path":["object","macho","VersionMinCommand"],"kind":"struct"},"16:8259:3283":{"crate_id":16,"path":["gimli","read","value","Value"],"kind":"enum"},"5:2102:4088":{"crate_id":5,"path":["alloc","collections","btree","map","Cursor"],"kind":"struct"},"24:5988:3934":{"crate_id":24,"path":["syn","ty","TypeImplTrait"],"kind":"struct"},"2:42116:3956":{"crate_id":2,"path":["core","option","IterMut"],"kind":"struct"},"2:4:1258":{"crate_id":2,"path":["core","panic"],"kind":"macro"},"10:36:7428":{"crate_id":10,"path":["adler","algo","U32X4"],"kind":"struct"},"2:44236:9526":{"crate_id":2,"path":["core","str","iter","LinesAny"],"kind":"struct"},"6:6542:8215":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","rtentry"],"kind":"struct"},"6:6714:8301":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_ring_offset_v1"],"kind":"struct"},"1:5258:29738":{"crate_id":1,"path":["std","path","fmt","DebugHelper"],"kind":"struct"},"2:26126:267":{"crate_id":2,"path":["core","num","wrapping","Wrapping"],"kind":"struct"},"24:274:10571":{"crate_id":24,"path":["syn","attr","parsing","DisplayPath"],"kind":"struct"},"6:6629:8266":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","Elf32_Chdr"],"kind":"struct"},"24:1020:11154":{"crate_id":24,"path":["syn","ext","private","Sealed"],"kind":"trait"},"5:939:5777":{"crate_id":5,"path":["alloc","collections","binary_heap","Hole"],"kind":"struct"},"11:2559:7426":{"crate_id":11,"path":["hashbrown","raw","TableLayout"],"kind":"struct"},"17:15301:6813":{"crate_id":17,"path":["object","pe","ImageTlsDirectory32"],"kind":"struct"},"2:44246:9527":{"crate_id":2,"path":["core","str","iter","SplitWhitespace"],"kind":"struct"},"17:12433:6233":{"crate_id":17,"path":["object","read","pe","relocation","Relocation"],"kind":"struct"},"2:22554:11154":{"crate_id":2,"path":["core","core_simd","simd","num","sealed","Sealed"],"kind":"trait"},"2:4504:16550":{"crate_id":2,"path":["core","async_iter","async_iter","IntoAsyncIterator"],"kind":"trait"},"2:15:3347":{"crate_id":2,"path":["core","write"],"kind":"macro"},"6:5528:8051":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_nl"],"kind":"struct"},"17:14325:6533":{"crate_id":17,"path":["object","macho","FilesetEntryCommand"],"kind":"struct"},"1:11321:9090":{"crate_id":1,"path":["std","sys","personality","dwarf","eh","EHContext"],"kind":"struct"},"1:2541:3719":{"crate_id":1,"path":["std","io"],"kind":"module"},"6:5665:8116":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_txtime"],"kind":"struct"},"17:12150:6223":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbol"],"kind":"struct"},"17:10671:37467":{"crate_id":17,"path":["object","read","any","ComdatIteratorInternal"],"kind":"enum"},"2:39738:216":{"crate_id":2,"path":["core","ops","range","RangeToInclusive"],"kind":"struct"},"2:10391:4099":{"crate_id":2,"path":["core","fmt","Octal"],"kind":"trait"},"24:5282:3884":{"crate_id":24,"path":["syn","expr","ExprAssign"],"kind":"struct"},"24:3206:4204":{"crate_id":24,"path":["syn","token","Crate"],"kind":"struct"},"6:5290:7950":{"crate_id":6,"path":["libc","unix","linux_like","linux","can_filter"],"kind":"struct"},"2:3583:211":{"crate_id":2,"path":["core","ops","range","RangeBounds"],"kind":"trait"},"17:4821:24146":{"crate_id":17,"path":["object","read","xcoff","symbol","XcoffSymbolIterator"],"kind":"struct"},"16:6588:9328":{"crate_id":16,"path":["gimli","read","index","UnitIndex"],"kind":"struct"},"24:1620:4094":{"crate_id":24,"path":["syn","lookahead","Peek"],"kind":"trait"},"17:15635:6921":{"crate_id":17,"path":["object","pe","ImageAlphaRuntimeFunctionEntry"],"kind":"struct"},"2:40741:4038":{"crate_id":2,"path":["core","iter","adapters","by_ref_sized","ByRefSized"],"kind":"struct"},"2:40920:4059":{"crate_id":2,"path":["core","iter","adapters","skip","Skip"],"kind":"struct"},"2:12961:16521":{"crate_id":2,"path":["core","str","pattern","Pattern"],"kind":"trait"},"18:538:6027":{"crate_id":18,"path":["memchr","memmem","rabinkarp","NeedleHash"],"kind":"struct"},"2:12693:9516":{"crate_id":2,"path":["core","str","iter","SplitNInternal"],"kind":"struct"},"2:40592:9476":{"crate_id":2,"path":["core","char","CaseMappingIter"],"kind":"struct"},"2:23186:8595":{"crate_id":2,"path":["core","num","nonzero","private","NonZeroU64Inner"],"kind":"struct"},"2:2765:201":{"crate_id":2,"path":["core","cmp","PartialEq"],"kind":"trait"},"17:11026:23975":{"crate_id":17,"path":["object","read","archive","MemberHeader"],"kind":"enum"},"6:1621:7668":{"crate_id":6,"path":["libc","unix","linux_like","in_pktinfo"],"kind":"struct"},"1:8630:11207":{"crate_id":1,"path":["std","os","unix","net","listener","Incoming"],"kind":"struct"},"1:11704:9599":{"crate_id":1,"path":["std","sys_common","wtf8","EncodeWide"],"kind":"struct"},"2:43797:9446":{"crate_id":2,"path":["core","slice","iter","ChunksExact"],"kind":"struct"},"2:12732:9522":{"crate_id":2,"path":["core","str","iter","MatchesInternal"],"kind":"struct"},"21:2200:3973":{"crate_id":21,"path":["proc_macro","bridge","DelimSpan"],"kind":"struct"},"2:10397:4108":{"crate_id":2,"path":["core","fmt","UpperHex"],"kind":"trait"},"5:6975:5559":{"crate_id":5,"path":["alloc","vec","in_place_drop","InPlaceDstDataSrcBufDrop"],"kind":"struct"},"2:46135:8877":{"crate_id":2,"path":["core","core_arch","simd","f64x1"],"kind":"struct"},"24:3835:4228":{"crate_id":24,"path":["syn","token","Use"],"kind":"struct"},"6:570:7568":{"crate_id":6,"path":["libc","unix","tms"],"kind":"struct"},"6:5407:1245":{"crate_id":6,"path":["libc","unix","linux_like","linux","option"],"kind":"struct"},"5:1590:11079":{"crate_id":5,"path":["alloc","collections","btree","map","RangeMut"],"kind":"struct"},"2:11473:9517":{"crate_id":2,"path":["core","slice","iter","SplitN"],"kind":"struct"},"16:7695:7284":{"crate_id":16,"path":["gimli","read","rnglists","RawRange"],"kind":"struct"},"17:16259:6340":{"crate_id":17,"path":["object","xcoff","Rel32"],"kind":"struct"},"6:8294:8547":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_rwlock_t"],"kind":"struct"},"24:6016:3942":{"crate_id":24,"path":["syn","ty","TypeTraitObject"],"kind":"struct"},"16:6317:2551":{"crate_id":16,"path":["gimli","read","dwarf","Unit"],"kind":"struct"},"16:5307:7169":{"crate_id":16,"path":["gimli","constants","DwOp"],"kind":"struct"},"6:5472:8038":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_authinfo"],"kind":"struct"},"18:481:9190":{"crate_id":18,"path":["memchr","cow","CowBytes"],"kind":"struct"},"17:15734:6945":{"crate_id":17,"path":["object","pe","ImageCoffSymbolsHeader"],"kind":"struct"},"2:42008:9497":{"crate_id":2,"path":["core","net","parser","AddrParseError"],"kind":"struct"},"24:5321:3890":{"crate_id":24,"path":["syn","expr","ExprConst"],"kind":"struct"},"24:5995:3937":{"crate_id":24,"path":["syn","ty","TypeNever"],"kind":"struct"},"2:46074:8873":{"crate_id":2,"path":["core","core_arch","simd","i16x4"],"kind":"struct"},"1:672:11061":{"crate_id":1,"path":["std","backtrace","BacktraceFrame"],"kind":"struct"},"24:2656:11154":{"crate_id":24,"path":["syn","spanned","private","Sealed"],"kind":"trait"},"16:2748:7105":{"crate_id":16,"path":["gimli","common","DebugStrOffset"],"kind":"struct"},"17:12189:24131":{"crate_id":17,"path":["object","read","pe","file","PeComdatIterator"],"kind":"struct"},"1:949:10699":{"crate_id":1,"path":["std","collections","hash","map","IntoKeys"],"kind":"struct"},"1:1613:3951":{"crate_id":1,"path":["std","collections","hash","set","IntoIter"],"kind":"struct"},"1:12368:1848":{"crate_id":1,"path":["std","u64"],"kind":"primitive"},"6:1692:7708":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_un"],"kind":"struct"},"2:10857:5836":{"crate_id":2,"path":["core","slice","sort","merge_sort","RunVec"],"kind":"struct"},"17:14386:6542":{"crate_id":17,"path":["object","macho","BuildVersionCommand"],"kind":"struct"},"23:513:1399":{"crate_id":23,"path":["quote","quote"],"kind":"macro"},"16:7686:23888":{"crate_id":16,"path":["gimli","read","rnglists","RngListIter"],"kind":"struct"},"2:43331:157":{"crate_id":2,"path":["core","hash","sip","Hasher"],"kind":"struct"},"5:6700:3951":{"crate_id":5,"path":["alloc","vec","into_iter","IntoIter"],"kind":"struct"},"17:513:23946":{"crate_id":17,"path":["object","read","any","Comdat"],"kind":"struct"},"5:7500:3951":{"crate_id":5,"path":["alloc","collections","vec_deque","into_iter","IntoIter"],"kind":"struct"},"2:44718:9563":{"crate_id":2,"path":["core","str","UnsafeBytesToStr"],"kind":"struct"},"24:4363:4237":{"crate_id":24,"path":["syn","token","CaretEq"],"kind":"struct"},"1:1609:3952":{"crate_id":1,"path":["std","collections","hash","set","Iter"],"kind":"struct"},"5:1531:9403":{"crate_id":5,"path":["alloc","collections","btree","map","Keys"],"kind":"struct"},"1:6718:5865":{"crate_id":1,"path":["std","sync","once_lock","OnceLock"],"kind":"struct"},"16:4802:7158":{"crate_id":16,"path":["gimli","constants","DwCc"],"kind":"struct"},"5:6573:5553":{"crate_id":5,"path":["alloc","vec","drain","Drain"],"kind":"struct"},"1:3906:11208":{"crate_id":1,"path":["std","net","tcp","TcpListener"],"kind":"struct"},"24:5498:3072":{"crate_id":24,"path":["syn","generics","GenericParam"],"kind":"enum"},"2:42799:4099":{"crate_id":2,"path":["core","fmt","num","Octal"],"kind":"struct"},"5:7472:9423":{"crate_id":5,"path":["alloc","collections","btree","set_val","SetValZST"],"kind":"struct"},"2:2962:163":{"crate_id":2,"path":["core","convert","Into"],"kind":"trait"},"14:160:10573":{"crate_id":14,"path":["rustc_demangle","Demangle"],"kind":"struct"},"24:6000:3076":{"crate_id":24,"path":["syn","ty","TypePath"],"kind":"struct"},"2:42042:8819":{"crate_id":2,"path":["core","net","socket_addr","SocketAddrV4"],"kind":"struct"},"2:44094:9518":{"crate_id":2,"path":["core","str","iter","RSplitN"],"kind":"struct"},"5:1581:210":{"crate_id":5,"path":["alloc","collections","btree","map","Range"],"kind":"struct"},"2:32843:5994":{"crate_id":2,"path":["core","ops","arith","Mul"],"kind":"trait"},"2:10393:3122":{"crate_id":2,"path":["core","fmt","Binary"],"kind":"trait"},"24:3580:4221":{"crate_id":24,"path":["syn","token","Pub"],"kind":"struct"},"18:573:6023":{"crate_id":18,"path":["memchr","memmem","twoway","Forward"],"kind":"struct"},"16:2592:7098":{"crate_id":16,"path":["gimli","common","DebugLocListsIndex"],"kind":"struct"},"1:12329:28572":{"crate_id":1,"path":["std","backtrace_rs","print","PrintFmt"],"kind":"enum"},"1:2719:5832":{"crate_id":1,"path":["std","io","buffered","bufwriter","flush_buf","BufGuard"],"kind":"struct"},"18:623:37485":{"crate_id":18,"path":["memchr","memmem","twoway","SuffixOrdering"],"kind":"enum"},"24:128:2509":{"crate_id":24,"path":["syn","token","Group"],"kind":"struct"},"16:7052:23882":{"crate_id":16,"path":["gimli","read","loclists","LocListIter"],"kind":"struct"},"2:44122:9520":{"crate_id":2,"path":["core","str","iter","MatchIndices"],"kind":"struct"},"11:2137:11077":{"crate_id":11,"path":["hashbrown","set","OccupiedEntry"],"kind":"struct"},"1:8523:4048":{"crate_id":1,"path":["std","io","Chain"],"kind":"struct"},"1:2318:5495":{"crate_id":1,"path":["std","fs","read"],"kind":"function"},"18:651:6023":{"crate_id":18,"path":["memchr","memmem","x86","sse","Forward"],"kind":"struct"},"2:23208:8597":{"crate_id":2,"path":["core","num","nonzero","private","NonZeroUsizeInner"],"kind":"struct"},"17:11166:6167":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbolTable"],"kind":"struct"},"2:23263:8602":{"crate_id":2,"path":["core","num","nonzero","private","NonZeroI128Inner"],"kind":"struct"},"6:5296:7953":{"crate_id":6,"path":["libc","unix","linux_like","linux","j1939_filter"],"kind":"struct"},"24:1821:4078":{"crate_id":24,"path":["syn","parse","StepCursor"],"kind":"struct"},"2:44764:9564":{"crate_id":2,"path":["core","time","TryFromFloatSecsError"],"kind":"struct"},"2:40399:9468":{"crate_id":2,"path":["core","async_iter","from_iter","FromIter"],"kind":"struct"},"1:1922:11102":{"crate_id":1,"path":["std","env","ArgsOs"],"kind":"struct"},"6:545:7555":{"crate_id":6,"path":["libc","unix","winsize"],"kind":"struct"},"2:8386:4033":{"crate_id":2,"path":["core","iter","traits","exact_size","ExactSizeIterator"],"kind":"trait"},"24:1109:3912":{"crate_id":24,"path":["syn","generics","Turbofish"],"kind":"struct"},"17:13946:6460":{"crate_id":17,"path":["object","macho","Fvmlib"],"kind":"struct"},"2:10340:4104":{"crate_id":2,"path":["core","fmt","Write"],"kind":"trait"},"2:3211:247":{"crate_id":2,"path":["core","marker","Sync"],"kind":"trait"},"2:12915:3976":{"crate_id":2,"path":["core","str","traits","FromStr"],"kind":"trait"},"2:13999:5462":{"crate_id":2,"path":["core","alloc","Allocator"],"kind":"trait"},"2:22223:8572":{"crate_id":2,"path":["core","core_simd","vector","Simd"],"kind":"struct"},"17:9807:23935":{"crate_id":17,"path":["object","common","SectionKind"],"kind":"enum"},"5:1369:10579":{"crate_id":5,"path":["alloc","collections","btree","map","entry","OccupiedError"],"kind":"struct"},"16:5960:9276":{"crate_id":16,"path":["gimli","read","cfi","PartialFrameDescriptionEntry"],"kind":"struct"},"24:5993:3936":{"crate_id":24,"path":["syn","ty","TypeMacro"],"kind":"struct"},"5:289:5769":{"crate_id":5,"path":["alloc","boxed","thin","drop","DropGuard"],"kind":"struct"},"2:3935:5553":{"crate_id":2,"path":["core","array","drain","Drain"],"kind":"struct"},"1:10990:33006":{"crate_id":1,"path":["std","sys","pal","unix","kernel_copy","FdHandle"],"kind":"enum"},"16:6412:23876":{"crate_id":16,"path":["gimli","read","abbrev","AbbreviationsCacheStrategy"],"kind":"enum"},"1:4927:11245":{"crate_id":1,"path":["std","os","fd","raw","IntoRawFd"],"kind":"trait"},"2:3419:124":{"crate_id":2,"path":["core","ops","deref","Deref"],"kind":"trait"},"17:13899:6454":{"crate_id":17,"path":["object","macho","Section32"],"kind":"struct"},"17:15426:6846":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation64"],"kind":"struct"},"6:4824:7753":{"crate_id":6,"path":["libc","unix","linux_like","linux","dqblk"],"kind":"struct"},"5:3050:28250":{"crate_id":5,"path":["alloc","collections","btree","node","marker","ValMut"],"kind":"struct"},"1:4103:11227":{"crate_id":1,"path":["std","os","unix","ffi","os_str","OsStringExt"],"kind":"trait"},"1:11636:28551":{"crate_id":1,"path":["std","sys","thread_local","fast_local","DtorState"],"kind":"enum"},"6:5502:8049":{"crate_id":6,"path":["libc","unix","linux_like","linux","tls12_crypto_info_aes_gcm_256"],"kind":"struct"},"24:5307:3872":{"crate_id":24,"path":["syn","expr","ExprCall"],"kind":"struct"},"17:15569:6897":{"crate_id":17,"path":["object","pe","ImageHotPatchInfo"],"kind":"struct"},"6:5314:7961":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_fprog"],"kind":"struct"},"21:2643:2588":{"crate_id":21,"path":["proc_macro","Span"],"kind":"struct"},"17:14414:6548":{"crate_id":17,"path":["object","macho","DyldInfoCommand"],"kind":"struct"},"16:5846:9264":{"crate_id":16,"path":["gimli","read","cfi","CfiEntriesIter"],"kind":"struct"},"2:42205:5342":{"crate_id":2,"path":["core","pin","Pin"],"kind":"struct"},"6:8288:8546":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_mutex_t"],"kind":"struct"},"11:881:11076":{"crate_id":11,"path":["hashbrown","map","RawEntryBuilder"],"kind":"struct"},"2:3092:11117":{"crate_id":2,"path":["core","error","Request"],"kind":"struct"},"2:13944:152":{"crate_id":2,"path":["core","alloc","global","GlobalAlloc"],"kind":"trait"},"2:12486:10585":{"crate_id":2,"path":["core","slice","GetManyMutError"],"kind":"struct"},"2:13907:5843":{"crate_id":2,"path":["core","task","wake","LocalWaker"],"kind":"struct"},"1:11647:9593":{"crate_id":1,"path":["std","sys_common","process","CommandEnv"],"kind":"struct"},"5:6440:11452":{"crate_id":5,"path":["alloc","task","LocalWake"],"kind":"trait"},"16:7497:7279":{"crate_id":16,"path":["gimli","read","op","OperationIter"],"kind":"struct"},"2:46518:8919":{"crate_id":2,"path":["core","core_arch","simd","u32x8"],"kind":"struct"},"11:830:11071":{"crate_id":11,"path":["hashbrown","map","ValuesMut"],"kind":"struct"},"14:7:10573":{"crate_id":14,"path":["rustc_demangle","legacy","Demangle"],"kind":"struct"},"1:6406:10708":{"crate_id":1,"path":["std","sync","mpmc","zero","ZeroToken"],"kind":"struct"},"11:842:11073":{"crate_id":11,"path":["hashbrown","map","RawEntryMut"],"kind":"enum"},"17:13959:6463":{"crate_id":17,"path":["object","macho","FvmlibCommand"],"kind":"struct"},"2:9531:16521":{"crate_id":2,"path":["core","panicking","assert_matches_failed","Pattern"],"kind":"struct"},"1:11018:11305":{"crate_id":1,"path":["std","sys","pal","unix","process","process_common","Stdio"],"kind":"enum"},"6:5457:8029":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_nxtinfo"],"kind":"struct"},"1:8622:11251":{"crate_id":1,"path":["std","os","unix","net","ancillary","SocketAncillary"],"kind":"struct"},"16:8118:9386":{"crate_id":16,"path":["gimli","read","unit","EntriesRaw"],"kind":"struct"},"2:5286:35657":{"crate_id":2,"path":["core","ffi","sealed_trait","VaArgSafe"],"kind":"trait"},"16:6895:7225":{"crate_id":16,"path":["gimli","read","line","FileEntry"],"kind":"struct"},"16:867:37421":{"crate_id":16,"path":["gimli","read","endian_slice","DebugByte"],"kind":"struct"},"16:5817:9259":{"crate_id":16,"path":["gimli","read","cfi","BaseAddresses"],"kind":"struct"},"21:181:5194":{"crate_id":21,"path":["proc_macro","bridge","closure","Closure"],"kind":"struct"},"1:10769:5336":{"crate_id":1,"path":["std","sys","pal","unix","thread","Thread"],"kind":"struct"},"2:3262:5993":{"crate_id":2,"path":["core","ops","arith","Sub"],"kind":"trait"},"6:6900:8359":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","msqid_ds"],"kind":"struct"},"2:23219:8598":{"crate_id":2,"path":["core","num","nonzero","private","NonZeroI8Inner"],"kind":"struct"},"18:680:9195":{"crate_id":18,"path":["memchr","memmem","Finder"],"kind":"struct"},"11:351:37373":{"crate_id":11,"path":["hashbrown","raw","FullBucketsIndices"],"kind":"struct"},"6:5052:7873":{"crate_id":6,"path":["libc","unix","linux_like","linux","dl_phdr_info"],"kind":"struct"},"1:4325:11254":{"crate_id":1,"path":["std","os","unix","net","ancillary","ScmRights"],"kind":"struct"},"6:5039:7869":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_ff_erase"],"kind":"struct"},"2:21658:5116":{"crate_id":2,"path":["core","core_simd","swizzle","reverse","Reverse"],"kind":"struct"},"16:6976:7234":{"crate_id":16,"path":["gimli","read","loclists","LocationLists"],"kind":"struct"},"1:9719:138":{"crate_id":1,"path":["std","sys","pal","unix","fs","File"],"kind":"struct"},"6:4979:7838":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_constant_effect"],"kind":"struct"},"24:5872:3073":{"crate_id":24,"path":["syn","path","QSelf"],"kind":"struct"},"17:12076:24064":{"crate_id":17,"path":["object","read","macho","section","MachOSection"],"kind":"struct"},"17:12768:23932":{"crate_id":17,"path":["object","read","ObjectKind"],"kind":"enum"},"17:11510:24008":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdat"],"kind":"struct"},"6:8253:8538":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_rwlockattr_t"],"kind":"struct"},"2:43918:8843":{"crate_id":2,"path":["core","str","error","Utf8Error"],"kind":"struct"},"2:38333:6001":{"crate_id":2,"path":["core","ops","bit","BitXorAssign"],"kind":"trait"},"1:10927:9586":{"crate_id":1,"path":["std","sys","pal","unix","fs","StatxExtraFields"],"kind":"struct"},"17:14868:6699":{"crate_id":17,"path":["object","pe","ImageDataDirectory"],"kind":"struct"},"6:5329:7965":{"crate_id":6,"path":["libc","unix","linux_like","linux","seccomp_notif_sizes"],"kind":"struct"},"17:11142:6173":{"crate_id":17,"path":["object","read","coff","symbol","SymbolTable"],"kind":"struct"},"24:5853:2899":{"crate_id":24,"path":["syn","path","AssocType"],"kind":"struct"},"2:23241:8600":{"crate_id":2,"path":["core","num","nonzero","private","NonZeroI32Inner"],"kind":"struct"},"2:4438:34255":{"crate_id":2,"path":["core","asserting","TryCaptureWithoutDebug"],"kind":"struct"},"17:14876:6700":{"crate_id":17,"path":["object","pe","ImageOptionalHeader32"],"kind":"struct"},"24:4776:4265":{"crate_id":24,"path":["syn","token","Question"],"kind":"struct"},"2:8284:145":{"crate_id":2,"path":["core","iter","traits","collect","FromIterator"],"kind":"trait"},"1:12313:10715":{"crate_id":1,"path":["std","backtrace_rs","symbolize","gimli","Cache"],"kind":"struct"},"16:3925:7144":{"crate_id":16,"path":["gimli","constants","DwChildren"],"kind":"struct"},"17:14235:6521":{"crate_id":17,"path":["object","macho","DylibReference"],"kind":"struct"},"2:40819:9482":{"crate_id":2,"path":["core","iter","adapters","flatten","FlattenCompat"],"kind":"struct"},"5:7734:5551":{"crate_id":5,"path":["alloc","vec","extract_if","ExtractIf"],"kind":"struct"},"1:5844:5858":{"crate_id":1,"path":["std","sync","mpsc","Sender"],"kind":"struct"},"24:2602:11154":{"crate_id":24,"path":["syn","sealed","lookahead","Sealed"],"kind":"trait"},"11:798:5553":{"crate_id":11,"path":["hashbrown","map","Drain"],"kind":"struct"},"16:2902:23009":{"crate_id":16,"path":["gimli","common","UnitSectionOffset"],"kind":"enum"},"17:12485:24137":{"crate_id":17,"path":["object","read","pe","resource","ResourceNameOrId"],"kind":"enum"},"11:1158:10579":{"crate_id":11,"path":["hashbrown","map","OccupiedError"],"kind":"struct"},"1:8873:9070":{"crate_id":1,"path":["std","path","Ancestors"],"kind":"struct"},"24:5418:3903":{"crate_id":24,"path":["syn","expr","ExprTryBlock"],"kind":"struct"},"24:4573:4251":{"crate_id":24,"path":["syn","token","Lt"],"kind":"struct"},"17:12808:6262":{"crate_id":17,"path":["object","read","SymbolIndex"],"kind":"struct"},"2:32278:2676":{"crate_id":2,"path":["core","error","private","Internal"],"kind":"struct"},"5:3410:5551":{"crate_id":5,"path":["alloc","collections","btree","set","ExtractIf"],"kind":"struct"},"6:1496:7586":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreqn"],"kind":"struct"},"2:40791:133":{"crate_id":2,"path":["core","iter","adapters","enumerate","Enumerate"],"kind":"struct"},"2:3738:4128":{"crate_id":2,"path":["core","ops","unsize","DispatchFromDyn"],"kind":"trait"},"5:2127:11081":{"crate_id":5,"path":["alloc","collections","btree","map","CursorMutKey"],"kind":"struct"},"17:14723:6586":{"crate_id":17,"path":["object","pe","ImageDosHeader"],"kind":"struct"},"2:6268:4041":{"crate_id":2,"path":["core","iter","adapters","flatten","Flatten"],"kind":"struct"},"17:16138:7046":{"crate_id":17,"path":["object","xcoff","CsectAux32"],"kind":"struct"},"1:9398:187":{"crate_id":1,"path":["std","sync","mutex","MutexGuard"],"kind":"struct"},"1:8884:9580":{"crate_id":1,"path":["std","path","StripPrefixError"],"kind":"struct"},"17:403:23945":{"crate_id":17,"path":["object","read","any","Segment"],"kind":"struct"},"24:5359:2861":{"crate_id":24,"path":["syn","expr","ExprLit"],"kind":"struct"},"24:5373:3877":{"crate_id":24,"path":["syn","expr","ExprMethodCall"],"kind":"struct"},"1:10969:9086":{"crate_id":1,"path":["std","sys","pal","unix","fs","Mode"],"kind":"struct"},"2:12502:16524":{"crate_id":2,"path":["core","str","converts","from_utf8"],"kind":"function"},"17:11547:6018":{"crate_id":17,"path":["object","read","elf","note","Note"],"kind":"struct"},"17:13785:6437":{"crate_id":17,"path":["object","macho","FatArch64"],"kind":"struct"},"20:709:9188":{"crate_id":20,"path":["proc_macro2","rcvec","RcVecIntoIter"],"kind":"struct"},"1:4223:11236":{"crate_id":1,"path":["std","os","unix","fs","DirBuilderExt"],"kind":"trait"},"1:8604:9575":{"crate_id":1,"path":["std","os","unix","net","addr","SocketAddr"],"kind":"struct"},"17:13553:6378":{"crate_id":17,"path":["object","elf","Vernaux"],"kind":"struct"},"17:12089:6220":{"crate_id":17,"path":["object","read","macho","section","MachOSectionInternal"],"kind":"struct"},"2:23252:8601":{"crate_id":2,"path":["core","num","nonzero","private","NonZeroI64Inner"],"kind":"struct"},"2:42694:10704":{"crate_id":2,"path":["core","sync","exclusive","Exclusive"],"kind":"struct"},"17:14994:6742":{"crate_id":17,"path":["object","pe","Guid"],"kind":"struct"},"2:41820:170":{"crate_id":2,"path":["core","net","ip_addr","IpAddr"],"kind":"enum"},"5:4117:5769":{"crate_id":5,"path":["alloc","collections","vec_deque","drain","drop","DropGuard"],"kind":"struct"},"5:7558:4009":{"crate_id":5,"path":["alloc","collections","TryReserveErrorKind"],"kind":"enum"},"2:43322:9502":{"crate_id":2,"path":["core","hash","sip","SipHasher"],"kind":"struct"},"1:9731:5877":{"crate_id":1,"path":["std","sys","pal","unix","fs","Dir"],"kind":"struct"},"17:261:37433":{"crate_id":17,"path":["object","read","util","DebugLen"],"kind":"struct"},"23:0:1399":{"crate_id":23,"path":["quote"],"kind":"module"},"20:982:3951":{"crate_id":20,"path":["proc_macro2","token_stream","IntoIter"],"kind":"struct"},"16:6560:7115":{"crate_id":16,"path":["gimli","read","index","DebugCuIndex"],"kind":"struct"},"2:22708:11441":{"crate_id":2,"path":["core","core_simd","simd","cmp","ord","SimdPartialOrd"],"kind":"trait"},"16:6849:9356":{"crate_id":16,"path":["gimli","read","line","IncompleteLineProgram"],"kind":"struct"},"1:5776:8331":{"crate_id":1,"path":["std","process","exit"],"kind":"function"},"2:39788:16611":{"crate_id":2,"path":["core","ops","try_trait","Yeet"],"kind":"struct"},"6:517:7540":{"crate_id":6,"path":["libc","unix","ipv6_mreq"],"kind":"struct"},"17:14147:6490":{"crate_id":17,"path":["object","macho","DysymtabCommand"],"kind":"struct"},"6:4942:7822":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_keymap_entry"],"kind":"struct"},"2:22492:11445":{"crate_id":2,"path":["core","core_simd","simd","num","int","SimdInt"],"kind":"trait"},"16:2768:7106":{"crate_id":16,"path":["gimli","common","DebugStrOffsetsBase"],"kind":"struct"},"24:4793:4266":{"crate_id":24,"path":["syn","token","RArrow"],"kind":"struct"},"2:8247:4036":{"crate_id":2,"path":["core","iter","traits","accum","Sum"],"kind":"trait"},"2:3432:4127":{"crate_id":2,"path":["core","ops","deref","DerefMut"],"kind":"trait"},"17:9781:23947":{"crate_id":17,"path":["object","common","BinaryFormat"],"kind":"enum"},"6:7984:8521":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","not_x32","statvfs"],"kind":"struct"},"16:6606:9336":{"crate_id":16,"path":["gimli","read","index","UnitIndexSectionIterator"],"kind":"struct"},"16:2438:7091":{"crate_id":16,"path":["gimli","common","DebugAddrIndex"],"kind":"struct"},"24:6034:3074":{"crate_id":24,"path":["syn","ty","ReturnType"],"kind":"enum"},"1:8064:11066":{"crate_id":1,"path":["std","backtrace","BacktraceStatus"],"kind":"enum"},"16:2636:7100":{"crate_id":16,"path":["gimli","common","DebugMacroOffset"],"kind":"struct"},"2:47293:8985":{"crate_id":2,"path":["core","core_arch","x86","__m128bh"],"kind":"struct"},"2:10403:4106":{"crate_id":2,"path":["core","fmt","UpperExp"],"kind":"trait"},"5:680:10580":{"crate_id":5,"path":["alloc","boxed","from","StringError"],"kind":"struct"},"11:785:9404":{"crate_id":11,"path":["hashbrown","map","Values"],"kind":"struct"},"2:47183:8971":{"crate_id":2,"path":["core","core_arch","x86","__m128"],"kind":"struct"},"1:1861:11087":{"crate_id":1,"path":["std","env","VarsOs"],"kind":"struct"},"2:38223:6002":{"crate_id":2,"path":["core","ops","bit","BitAndAssign"],"kind":"trait"},"2:44775:16706":{"crate_id":2,"path":["core","time","TryFromFloatSecsErrorKind"],"kind":"enum"},"2:21712:34885":{"crate_id":2,"path":["core","core_simd","swizzle","deinterleave","Even"],"kind":"struct"},"2:42341:96":{"crate_id":2,"path":["core","sync","atomic","AtomicU8"],"kind":"struct"},"17:14038:6474":{"crate_id":17,"path":["object","macho","SubLibraryCommand"],"kind":"struct"},"17:11354:24013":{"crate_id":17,"path":["object","read","elf","segment","ElfSegment"],"kind":"struct"},"5:7422:5780":{"crate_id":5,"path":["alloc","collections","binary_heap","DrainSorted"],"kind":"struct"},"2:40468:9470":{"crate_id":2,"path":["core","char","decode","DecodeUtf16"],"kind":"struct"},"11:430:37380":{"crate_id":11,"path":["hashbrown","raw","RawIterHash"],"kind":"struct"},"2:40863:4055":{"crate_id":2,"path":["core","iter","adapters","map","Map"],"kind":"struct"},"5:7412:5553":{"crate_id":5,"path":["alloc","collections","binary_heap","Drain"],"kind":"struct"},"17:15324:6818":{"crate_id":17,"path":["object","pe","ImageBoundImportDescriptor"],"kind":"struct"},"17:11574:9408":{"crate_id":17,"path":["object","read","elf","hash","HashTable"],"kind":"struct"},"17:14977:6740":{"crate_id":17,"path":["object","pe","ImageNtHeaders32"],"kind":"struct"},"6:5236:7922":{"crate_id":6,"path":["libc","unix","linux_like","linux","inotify_event"],"kind":"struct"},"2:44255:9528":{"crate_id":2,"path":["core","str","iter","SplitAsciiWhitespace"],"kind":"struct"},"1:758:154":{"crate_id":1,"path":["std","collections","hash","map","HashMap"],"kind":"struct"},"17:12408:6232":{"crate_id":17,"path":["object","read","pe","relocation","RelocationBlockIterator"],"kind":"struct"},"16:5700:7116":{"crate_id":16,"path":["gimli","read","cfi","DebugFrame"],"kind":"struct"},"16:7711:210":{"crate_id":16,"path":["gimli","read","rnglists","Range"],"kind":"struct"},"6:1503:7589":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreq_source"],"kind":"struct"},"24:2649:3208":{"crate_id":24,"path":["syn","spanned","Spanned"],"kind":"trait"},"21:2592:4137":{"crate_id":21,"path":["proc_macro","ExpandError"],"kind":"struct"},"2:40666:11118":{"crate_id":2,"path":["core","ffi","c_char"],"kind":"type_alias"},"6:1686:7707":{"crate_id":6,"path":["libc","unix","linux_like","epoll_event"],"kind":"struct"},"2:43032:8825":{"crate_id":2,"path":["core","fmt","rt","Placeholder"],"kind":"struct"},"16:7306:37403":{"crate_id":16,"path":["gimli","read","op","OperationEvaluationResult"],"kind":"enum"},"21:141:5584":{"crate_id":21,"path":["proc_macro","bridge","client","Client"],"kind":"struct"},"24:6013:3941":{"crate_id":24,"path":["syn","ty","TypeSlice"],"kind":"struct"},"1:10339:11096":{"crate_id":1,"path":["std","sys","pal","unix","os","SplitPaths"],"kind":"struct"},"24:5027:2580":{"crate_id":24,"path":["syn","data","Fields"],"kind":"enum"},"1:8271:4088":{"crate_id":1,"path":["std","io","cursor","Cursor"],"kind":"struct"},"24:2116:37655":{"crate_id":24,"path":["syn","precedence","Precedence"],"kind":"enum"},"23:322:3208":{"crate_id":23,"path":["quote","spanned","Spanned"],"kind":"trait"},"17:10982:23973":{"crate_id":17,"path":["object","read","archive","Members"],"kind":"enum"},"1:3903:11209":{"crate_id":1,"path":["std","net","tcp","TcpStream"],"kind":"struct"},"2:46260:8891":{"crate_id":2,"path":["core","core_arch","simd","i16x8"],"kind":"struct"},"16:4352:7146":{"crate_id":16,"path":["gimli","constants","DwAt"],"kind":"struct"},"2:41842:8810":{"crate_id":2,"path":["core","net","ip_addr","Ipv4Addr"],"kind":"struct"},"1:9301:28558":{"crate_id":1,"path":["std","sync","mpmc","error","SendTimeoutError"],"kind":"enum"},"23:514:3206":{"crate_id":23,"path":["quote","quote_spanned"],"kind":"macro"},"1:8540:3494":{"crate_id":1,"path":["std","io","Bytes"],"kind":"struct"},"2:1853:3071":{"crate_id":2,"path":["core","mem"],"kind":"module"},"20:948:2521":{"crate_id":20,"path":["proc_macro2","Ident"],"kind":"struct"},"1:8242:5632":{"crate_id":1,"path":["std","hash","random","RandomState"],"kind":"struct"},"5:7442:35813":{"crate_id":5,"path":["alloc","collections","btree","merge_iter","Peeked"],"kind":"enum"},"2:8753:4031":{"crate_id":2,"path":["core","iter","traits","marker","TrustedLen"],"kind":"trait"},"24:4346:4236":{"crate_id":24,"path":["syn","token","Caret"],"kind":"struct"},"1:7931:5873":{"crate_id":1,"path":["std","backtrace_rs","print","BacktraceFrameFmt"],"kind":"struct"},"2:40750:4048":{"crate_id":2,"path":["core","iter","adapters","chain","Chain"],"kind":"struct"},"2:5324:11196":{"crate_id":2,"path":["core","io","borrowed_buf","BorrowedBuf"],"kind":"struct"},"24:3512:4217":{"crate_id":24,"path":["syn","token","Move"],"kind":"struct"},"2:45907:8857":{"crate_id":2,"path":["core","core_arch","simd","i8x2"],"kind":"struct"},"11:2349:11078":{"crate_id":11,"path":["hashbrown","table","VacantEntry"],"kind":"struct"},"2:4651:4090":{"crate_id":2,"path":["core","cell","Cell"],"kind":"struct"},"17:12597:6243":{"crate_id":17,"path":["object","read","xcoff","symbol","XcoffSymbolTable"],"kind":"struct"},"2:46489:8918":{"crate_id":2,"path":["core","core_arch","simd","u16x16"],"kind":"struct"},"2:22793:9450":{"crate_id":2,"path":["core","num","bignum","Big32x40"],"kind":"struct"},"2:3246:5100":{"crate_id":2,"path":["core","marker","Freeze"],"kind":"trait"},"16:3029:6049":{"crate_id":16,"path":["gimli","arch","Arm"],"kind":"struct"},"16:5686:7113":{"crate_id":16,"path":["gimli","read","addr","DebugAddr"],"kind":"struct"},"11:488:154":{"crate_id":11,"path":["hashbrown","map","HashMap"],"kind":"struct"},"2:40851:4064":{"crate_id":2,"path":["core","iter","adapters","intersperse","Intersperse"],"kind":"struct"},"17:15445:6851":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation64V2"],"kind":"struct"},"6:6471:8178":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","cmsghdr"],"kind":"struct"},"2:11515:16515":{"crate_id":2,"path":["core","slice","iter","RSplitNMut"],"kind":"struct"},"24:3563:4220":{"crate_id":24,"path":["syn","token","Priv"],"kind":"struct"},"2:41093:4063":{"crate_id":2,"path":["core","iter","adapters","zip","Zip"],"kind":"struct"},"17:15814:6964":{"crate_id":17,"path":["object","pe","ImageArchitectureEntry"],"kind":"struct"},"6:6532:8208":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_mmap_hdr"],"kind":"struct"},"17:14177:6509":{"crate_id":17,"path":["object","macho","DylibTableOfContents"],"kind":"struct"},"24:1364:9150":{"crate_id":24,"path":["syn","lit","LitIntRepr"],"kind":"struct"},"1:4211:11233":{"crate_id":1,"path":["std","os","unix","fs","DirEntryExt"],"kind":"trait"},"17:11715:9222":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSubsection"],"kind":"struct"},"16:8301:7337":{"crate_id":16,"path":["gimli","read","StoreOnHeap"],"kind":"struct"},"17:12107:6173":{"crate_id":17,"path":["object","read","macho","symbol","SymbolTable"],"kind":"struct"},"1:1107:10579":{"crate_id":1,"path":["std","collections","hash","map","OccupiedError"],"kind":"struct"},"16:5831:9262":{"crate_id":16,"path":["gimli","read","cfi","SectionBaseAddresses"],"kind":"struct"},"17:2234:24032":{"crate_id":17,"path":["object","read","elf","relocation","ElfSectionRelocationIterator"],"kind":"struct"},"2:45954:8862":{"crate_id":2,"path":["core","core_arch","simd","i8x4"],"kind":"struct"},"2:6077:5793":{"crate_id":2,"path":["core","iter","adapters","filter_map","next_chunk","Guard"],"kind":"struct"},"2:23064:9457":{"crate_id":2,"path":["core","num","fmt","Formatted"],"kind":"struct"},"2:2972:257":{"crate_id":2,"path":["core","convert","TryFrom"],"kind":"trait"},"16:7727:7130":{"crate_id":16,"path":["gimli","read","str","DebugStr"],"kind":"struct"},"24:4619:4254":{"crate_id":24,"path":["syn","token","Ne"],"kind":"struct"},"1:11698:9598":{"crate_id":1,"path":["std","sys_common","wtf8","Wtf8CodePoints"],"kind":"struct"},"6:1663:7697":{"crate_id":6,"path":["libc","unix","linux_like","arpreq_old"],"kind":"struct"},"24:5366:3876":{"crate_id":24,"path":["syn","expr","ExprMacro"],"kind":"struct"},"2:46199:8888":{"crate_id":2,"path":["core","core_arch","simd","u32x4"],"kind":"struct"},"17:14246:6523":{"crate_id":17,"path":["object","macho","TwolevelHintsCommand"],"kind":"struct"},"1:8616:11260":{"crate_id":1,"path":["std","os","unix","net","ancillary","AncillaryError"],"kind":"enum"},"16:7473:7278":{"crate_id":16,"path":["gimli","read","op","Expression"],"kind":"struct"},"2:47194:8972":{"crate_id":2,"path":["core","core_arch","x86","__m128d"],"kind":"struct"},"2:8333:129":{"crate_id":2,"path":["core","iter","traits","double_ended","DoubleEndedIterator"],"kind":"trait"},"24:4665:4257":{"crate_id":24,"path":["syn","token","OrEq"],"kind":"struct"},"24:5985:3933":{"crate_id":24,"path":["syn","ty","TypeGroup"],"kind":"struct"},"2:10384:119":{"crate_id":2,"path":["core","fmt","Debug"],"kind":"trait"},"11:809:5551":{"crate_id":11,"path":["hashbrown","map","ExtractIf"],"kind":"struct"},"6:5191:7899":{"crate_id":6,"path":["libc","unix","linux_like","linux","posix_spawn_file_actions_t"],"kind":"struct"},"2:41302:4020":{"crate_id":2,"path":["core","iter","sources","once_with","OnceWith"],"kind":"struct"},"2:42616:90":{"crate_id":2,"path":["core","sync","atomic","AtomicIsize"],"kind":"struct"},"2:3448:3069":{"crate_id":2,"path":["core","ops","drop","Drop"],"kind":"trait"},"24:4561:4250":{"crate_id":24,"path":["syn","token","Le"],"kind":"struct"},"17:13387:6340":{"crate_id":17,"path":["object","elf","Rel32"],"kind":"struct"},"2:38278:6003":{"crate_id":2,"path":["core","ops","bit","BitOrAssign"],"kind":"trait"},"2:23230:8599":{"crate_id":2,"path":["core","num","nonzero","private","NonZeroI16Inner"],"kind":"struct"},"23:272:2598":{"crate_id":23,"path":["quote","__private","push_lifetime","Lifetime"],"kind":"struct"},"11:2366:22939":{"crate_id":11,"path":["hashbrown","table","AbsentEntry"],"kind":"struct"},"17:13986:6468":{"crate_id":17,"path":["object","macho","DylibCommand"],"kind":"struct"},"2:44547:16536":{"crate_id":2,"path":["core","str","pattern","StrSearcherImpl"],"kind":"enum"},"24:4329:4235":{"crate_id":24,"path":["syn","token","At"],"kind":"struct"},"17:10137:23928":{"crate_id":17,"path":["object","endian","Endianness"],"kind":"enum"},"5:3318:2558":{"crate_id":5,"path":["alloc","collections","btree","set","Union"],"kind":"struct"},"1:9288:115":{"crate_id":1,"path":["std","sync","mpmc","context","Context"],"kind":"struct"},"6:5436:8014":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_sndinfo"],"kind":"struct"},"1:12361:893":{"crate_id":1,"path":["std","i16"],"kind":"primitive"},"6:6636:8267":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","seminfo"],"kind":"struct"},"17:13877:6453":{"crate_id":17,"path":["object","macho","SegmentCommand64"],"kind":"struct"},"17:10905:23961":{"crate_id":17,"path":["object","read","any","SectionRelocationIterator"],"kind":"struct"},"2:44884:8850":{"crate_id":2,"path":["core","future","async_drop","Noop"],"kind":"struct"},"17:4986:24151":{"crate_id":17,"path":["object","read","xcoff","relocation","XcoffRelocationIterator"],"kind":"struct"},"23:35:11154":{"crate_id":23,"path":["quote","ext","private","Sealed"],"kind":"trait"},"2:33740:5999":{"crate_id":2,"path":["core","ops","arith","DivAssign"],"kind":"trait"},"2:43361:9504":{"crate_id":2,"path":["core","hash","sip","Sip24Rounds"],"kind":"struct"},"17:10622:37457":{"crate_id":17,"path":["object","read","any","SectionIteratorInternal"],"kind":"enum"},"1:12297:10314":{"crate_id":1,"path":["std","backtrace_rs","symbolize","gimli","parse_running_mmaps","MapsEntry"],"kind":"struct"},"2:4794:4118":{"crate_id":2,"path":["core","cell","BorrowRef"],"kind":"struct"},"2:8003:4015":{"crate_id":2,"path":["core","iter","sources","empty","Empty"],"kind":"struct"},"24:4549:4249":{"crate_id":24,"path":["syn","token","LArrow"],"kind":"struct"},"1:3610:11151":{"crate_id":1,"path":["std","io","IoSliceMut"],"kind":"struct"},"24:5528:3909":{"crate_id":24,"path":["syn","generics","ConstParam"],"kind":"struct"},"2:6972:9436":{"crate_id":2,"path":["core","iter","adapters","map_windows","MapWindowsInner"],"kind":"struct"},"2:11035:11154":{"crate_id":2,"path":["core","slice","index","private_slice_index","Sealed"],"kind":"trait"},"24:3648:4223":{"crate_id":24,"path":["syn","token","SelfValue"],"kind":"struct"},"17:10661:23957":{"crate_id":17,"path":["object","read","any","ComdatIterator"],"kind":"struct"},"5:7589:9424":{"crate_id":5,"path":["alloc","ffi","c_str","NulError"],"kind":"struct"},"1:7881:2602":{"crate_id":1,"path":["std","backtrace_rs","symbolize","Symbol"],"kind":"struct"},"1:1642:2558":{"crate_id":1,"path":["std","collections","hash","set","Union"],"kind":"struct"},"6:8259:8539":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_condattr_t"],"kind":"struct"},"21:2261:2913":{"crate_id":21,"path":["proc_macro","bridge","Punct"],"kind":"struct"},"24:5878:3928":{"crate_id":24,"path":["syn","restriction","Visibility"],"kind":"enum"},"5:4938:217":{"crate_id":5,"path":["alloc","rc","Rc"],"kind":"struct"},"24:4805:4267":{"crate_id":24,"path":["syn","token","Semi"],"kind":"struct"},"17:12647:24141":{"crate_id":17,"path":["object","read","xcoff","comdat","XcoffComdatIterator"],"kind":"struct"},"21:109:5583":{"crate_id":21,"path":["proc_macro","bridge","client","Bridge"],"kind":"struct"},"24:5817:3169":{"crate_id":24,"path":["syn","path","PathSegment"],"kind":"struct"},"5:0:309":{"crate_id":5,"path":["alloc"],"kind":"module"},"24:4677:4258":{"crate_id":24,"path":["syn","token","OrOr"],"kind":"struct"},"11:1914:9407":{"crate_id":11,"path":["hashbrown","set","SymmetricDifference"],"kind":"struct"},"16:5107:7168":{"crate_id":16,"path":["gimli","constants","DwRle"],"kind":"struct"},"24:4916:4275":{"crate_id":24,"path":["syn","token","StarEq"],"kind":"struct"},"1:8188:11149":{"crate_id":1,"path":["std","fs","ReadDir"],"kind":"struct"},"1:10500:113":{"crate_id":1,"path":["std","sys","pal","unix","process","process_common","Command"],"kind":"struct"},"2:44698:9558":{"crate_id":2,"path":["core","str","CharEscapeDefault"],"kind":"struct"},"2:13709:205":{"crate_id":2,"path":["core","future","pending","Pending"],"kind":"struct"},"16:6948:7122":{"crate_id":16,"path":["gimli","read","loclists","DebugLoc"],"kind":"struct"},"16:5995:9278":{"crate_id":16,"path":["gimli","read","cfi","FrameDescriptionEntry"],"kind":"struct"},"2:40505:9473":{"crate_id":2,"path":["core","char","EscapeDebug"],"kind":"struct"},"2:22582:5489":{"crate_id":2,"path":["core","core_simd","simd","ptr","const_ptr","SimdConstPtr","with_exposed_provenance"],"kind":"function"},"2:42792:3122":{"crate_id":2,"path":["core","fmt","num","Binary"],"kind":"struct"},"16:2478:7093":{"crate_id":16,"path":["gimli","common","DebugInfoOffset"],"kind":"struct"},"17:11743:9224":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSubsubsection"],"kind":"struct"},"24:3257:4206":{"crate_id":24,"path":["syn","token","Dyn"],"kind":"struct"},"17:11293:24004":{"crate_id":17,"path":["object","read","coff","import","ImportType"],"kind":"enum"},"17:14503:6566":{"crate_id":17,"path":["object","macho","SourceVersionCommand"],"kind":"struct"},"17:15616:6915":{"crate_id":17,"path":["object","pe","ImageArm64RuntimeFunctionEntry"],"kind":"struct"},"17:13187:6296":{"crate_id":17,"path":["object","elf","FileHeader32"],"kind":"struct"},"24:1798:3963":{"crate_id":24,"path":["syn","parse","Parse"],"kind":"trait"},"16:6927:7229":{"crate_id":16,"path":["gimli","read","line","FileEntryFormat"],"kind":"struct"},"17:11730:9223":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSubsubsectionIterator"],"kind":"struct"},"1:4925:11244":{"crate_id":1,"path":["std","os","fd","raw","FromRawFd"],"kind":"trait"},"1:4817:8421":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt","st_atime"],"kind":"function"},"17:15376:6835":{"crate_id":17,"path":["object","pe","ImageResourceDirectoryString"],"kind":"struct"},"18:80:28196":{"crate_id":18,"path":["memchr","memchr","iter","Memchr"],"kind":"struct"},"5:5938:5553":{"crate_id":5,"path":["alloc","string","Drain"],"kind":"struct"},"24:5829:2885":{"crate_id":24,"path":["syn","path","GenericArgument"],"kind":"enum"},"6:1490:7583":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreq"],"kind":"struct"},"17:15390:6837":{"crate_id":17,"path":["object","pe","ImageResourceDataEntry"],"kind":"struct"},"1:9322:29775":{"crate_id":1,"path":["std","sync","mpmc","list","Position"],"kind":"struct"},"1:8817:11296":{"crate_id":1,"path":["std","path","Component"],"kind":"enum"},"1:4354:11257":{"crate_id":1,"path":["std","os","unix","net","ancillary","Messages"],"kind":"struct"},"2:44558:9543":{"crate_id":2,"path":["core","str","pattern","EmptyNeedle"],"kind":"struct"},"11:1888:5553":{"crate_id":11,"path":["hashbrown","set","Drain"],"kind":"struct"},"17:16032:6313":{"crate_id":17,"path":["object","xcoff","SectionHeader32"],"kind":"struct"},"17:16151:7052":{"crate_id":17,"path":["object","xcoff","CsectAux64"],"kind":"struct"},"6:5174:7890":{"crate_id":6,"path":["libc","unix","linux_like","linux","ucred"],"kind":"struct"},"17:10759:6173":{"crate_id":17,"path":["object","read","any","SymbolTable"],"kind":"struct"},"17:15273:6805":{"crate_id":17,"path":["object","pe","ImageThunkData64"],"kind":"struct"},"21:127:5756":{"crate_id":21,"path":["proc_macro","bridge","client","state","set","RestoreOnDrop"],"kind":"struct"},"2:47157:8969":{"crate_id":2,"path":["core","core_arch","simd","f64x8"],"kind":"struct"},"24:5442:2544":{"crate_id":24,"path":["syn","expr","Member"],"kind":"enum"},"16:5722:7118":{"crate_id":16,"path":["gimli","read","cfi","EhFrameHdr"],"kind":"struct"},"16:4560:7151":{"crate_id":16,"path":["gimli","constants","DwEnd"],"kind":"struct"},"2:42020:9575":{"crate_id":2,"path":["core","net","socket_addr","SocketAddr"],"kind":"enum"},"24:4928:4276":{"crate_id":24,"path":["syn","token","Tilde"],"kind":"struct"},"5:4436:265":{"crate_id":5,"path":["alloc","collections","vec_deque","VecDeque"],"kind":"struct"},"6:4800:7735":{"crate_id":6,"path":["libc","unix","linux_like","linux","passwd"],"kind":"struct"},"2:13580:35401":{"crate_id":2,"path":["core","future","async_drop","AsyncDropOwning"],"kind":"struct"},"2:22666:11154":{"crate_id":2,"path":["core","core_simd","simd","ptr","sealed","Sealed"],"kind":"trait"},"11:1884:3951":{"crate_id":11,"path":["hashbrown","set","IntoIter"],"kind":"struct"},"2:44289:9472":{"crate_id":2,"path":["core","str","iter","EscapeUnicode"],"kind":"struct"},"24:6022:67":{"crate_id":24,"path":["syn","ty","Abi"],"kind":"struct"},"20:825:2509":{"crate_id":20,"path":["proc_macro2","imp","Group"],"kind":"enum"},"2:21805:11361":{"crate_id":2,"path":["core","core_simd","lane_count","SupportedLaneCount"],"kind":"trait"},"16:2303:22983":{"crate_id":16,"path":["gimli","common","Format"],"kind":"enum"},"2:40644:9478":{"crate_id":2,"path":["core","ffi","c_str","FromBytesUntilNulError"],"kind":"struct"},"16:6480:7114":{"crate_id":16,"path":["gimli","read","aranges","DebugAranges"],"kind":"struct"},"2:3437:3998":{"crate_id":2,"path":["core","ops","deref","DerefPure"],"kind":"trait"},"18:765:28207":{"crate_id":18,"path":["memchr","memmem","SearcherRevKind"],"kind":"enum"},"16:6802:9343":{"crate_id":16,"path":["gimli","read","line","LineSequence"],"kind":"struct"},"16:3810:7141":{"crate_id":16,"path":["gimli","constants","DwSectV2"],"kind":"struct"},"1:10232:9494":{"crate_id":1,"path":["std","sys","pal","unix","net","Socket"],"kind":"struct"},"17:13363:6336":{"crate_id":17,"path":["object","elf","Syminfo32"],"kind":"struct"},"2:46281:8892":{"crate_id":2,"path":["core","core_arch","simd","i32x4"],"kind":"struct"},"20:792:252":{"crate_id":20,"path":["proc_macro2","imp","TokenStream"],"kind":"enum"},"1:7950:5875":{"crate_id":1,"path":["std","backtrace_rs","Bomb"],"kind":"struct"},"1:5112:11282":{"crate_id":1,"path":["std","os","net","linux_ext","tcp","TcpStreamExt"],"kind":"trait"},"24:5430:3905":{"crate_id":24,"path":["syn","expr","ExprUnsafe"],"kind":"struct"},"2:6154:4052":{"crate_id":2,"path":["core","iter","adapters","flatten","FlatMap"],"kind":"struct"},"1:1098:11078":{"crate_id":1,"path":["std","collections","hash","map","VacantEntry"],"kind":"struct"},"5:1843:5551":{"crate_id":5,"path":["alloc","collections","btree","map","ExtractIf"],"kind":"struct"},"6:4864:7786":{"crate_id":6,"path":["libc","unix","linux_like","linux","itimerspec"],"kind":"struct"},"16:6872:9357":{"crate_id":16,"path":["gimli","read","line","CompleteLineProgram"],"kind":"struct"},"24:3597:4119":{"crate_id":24,"path":["syn","token","Ref"],"kind":"struct"},"17:12328:9228":{"crate_id":17,"path":["object","read","pe","export","ExportTable"],"kind":"struct"},"6:7602:8515":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ucontext_t"],"kind":"struct"},"24:5438:3907":{"crate_id":24,"path":["syn","expr","ExprYield"],"kind":"struct"},"18:670:28209":{"crate_id":18,"path":["memchr","memmem","FindRevIter"],"kind":"struct"},"11:2533:2509":{"crate_id":11,"path":["hashbrown","raw","sse2","Group"],"kind":"struct"},"24:5290:3886":{"crate_id":24,"path":["syn","expr","ExprAwait"],"kind":"struct"},"5:3297:36251":{"crate_id":5,"path":["alloc","collections","btree","set","IntersectionInner"],"kind":"enum"},"24:5863:2903":{"crate_id":24,"path":["syn","path","Constraint"],"kind":"struct"},"24:1077:37715":{"crate_id":24,"path":["syn","generics","TypeParamsMut"],"kind":"struct"},"17:11324:24026":{"crate_id":17,"path":["object","read","elf","file","ElfFile"],"kind":"struct"},"16:860:37423":{"crate_id":16,"path":["gimli","read","endian_slice","DebugBytes"],"kind":"struct"},"16:7085:9367":{"crate_id":16,"path":["gimli","read","lookup","DebugLookup"],"kind":"struct"},"24:3733:254":{"crate_id":24,"path":["syn","token","Try"],"kind":"struct"},"1:2483:11140":{"crate_id":1,"path":["std","fs","read_link"],"kind":"function"},"5:4322:3952":{"crate_id":5,"path":["alloc","collections","vec_deque","iter","Iter"],"kind":"struct"},"1:5588:11301":{"crate_id":1,"path":["std","process","Child"],"kind":"struct"},"2:13734:16573":{"crate_id":2,"path":["core","future","poll_fn","PollFn"],"kind":"struct"},"5:1441:99":{"crate_id":5,"path":["alloc","collections","btree","map","BTreeMap"],"kind":"struct"},"20:693:4088":{"crate_id":20,"path":["proc_macro2","parse","Cursor"],"kind":"struct"},"1:9207:9075":{"crate_id":1,"path":["std","sync","mpsc","RecvError"],"kind":"struct"},"1:9176:11331":{"crate_id":1,"path":["std","sync","mpsc","TryIter"],"kind":"struct"},"2:46345:8896":{"crate_id":2,"path":["core","core_arch","simd","f64x4"],"kind":"struct"},"6:6650:8278":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ptrace_peeksiginfo_args"],"kind":"struct"},"1:8857:9577":{"crate_id":1,"path":["std","path","Components"],"kind":"struct"},"6:8012:8524":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","align","clone_args"],"kind":"struct"},"1:3393:11193":{"crate_id":1,"path":["std","io","stdio","Stdout"],"kind":"struct"},"17:15214:6791":{"crate_id":17,"path":["object","pe","ImageBaseRelocation"],"kind":"struct"},"1:5089:11280":{"crate_id":1,"path":["std","os","net","linux_ext","addr","SocketAddrExt"],"kind":"trait"},"17:13473:6356":{"crate_id":17,"path":["object","elf","Dyn32"],"kind":"struct"},"2:1954:5793":{"crate_id":2,"path":["core","mem","maybe_uninit","Guard"],"kind":"struct"},"1:963:11073":{"crate_id":1,"path":["std","collections","hash","map","RawEntryMut"],"kind":"enum"},"2:46651:8924":{"crate_id":2,"path":["core","core_arch","simd","i64x4"],"kind":"struct"},"1:9474:9583":{"crate_id":1,"path":["std","time","SystemTimeError"],"kind":"struct"},"6:473:7512":{"crate_id":6,"path":["libc","unix","utimbuf"],"kind":"struct"},"11:740:10700":{"crate_id":11,"path":["hashbrown","map","IntoValues"],"kind":"struct"},"16:4614:7153":{"crate_id":16,"path":["gimli","constants","DwVis"],"kind":"struct"},"2:0:563":{"crate_id":2,"path":["core"],"kind":"module"},"24:96:5176":{"crate_id":24,"path":["syn","token","private","WithSpan"],"kind":"struct"},"16:6749:9342":{"crate_id":16,"path":["gimli","read","line","LineInstructions"],"kind":"struct"},"2:8304:4034":{"crate_id":2,"path":["core","iter","traits","collect","Extend"],"kind":"trait"},"24:5991:3935":{"crate_id":24,"path":["syn","ty","TypeInfer"],"kind":"struct"},"1:8802:9065":{"crate_id":1,"path":["std","path","PrefixComponent"],"kind":"struct"},"17:15720:6943":{"crate_id":17,"path":["object","pe","ImageDebugDirectory"],"kind":"struct"},"1:8018:5339":{"crate_id":1,"path":["std","thread","ThreadId"],"kind":"struct"},"17:13116:6283":{"crate_id":17,"path":["object","archive","AixHeader"],"kind":"struct"},"5:2302:35834":{"crate_id":5,"path":["alloc","collections","btree","navigate","LazyLeafHandle"],"kind":"enum"},"24:5702:2904":{"crate_id":24,"path":["syn","mac","Macro"],"kind":"struct"},"2:40393:9467":{"crate_id":2,"path":["core","ascii","EscapeDefault"],"kind":"struct"},"11:685:3956":{"crate_id":11,"path":["hashbrown","map","IterMut"],"kind":"struct"},"11:1140:22935":{"crate_id":11,"path":["hashbrown","map","VacantEntryRef"],"kind":"struct"},"21:912:252":{"crate_id":21,"path":["proc_macro","bridge","client","TokenStream"],"kind":"struct"},"17:15356:6829":{"crate_id":17,"path":["object","pe","ImageResourceDirectory"],"kind":"struct"},"2:3667:16548":{"crate_id":2,"path":["core","ops","try_trait","Residual"],"kind":"trait"},"1:1620:5551":{"crate_id":1,"path":["std","collections","hash","set","ExtractIf"],"kind":"struct"},"17:13832:6443":{"crate_id":17,"path":["object","macho","LoadCommand"],"kind":"struct"},"2:46539:8920":{"crate_id":2,"path":["core","core_arch","simd","u64x4"],"kind":"struct"},"2:4804:4119":{"crate_id":2,"path":["core","cell","Ref"],"kind":"struct"},"1:6461:5858":{"crate_id":1,"path":["std","sync","mpmc","Sender"],"kind":"struct"},"2:45939:8861":{"crate_id":2,"path":["core","core_arch","simd","u16x2"],"kind":"struct"},"2:3401:5456":{"crate_id":2,"path":["core","ops","coroutine","Coroutine"],"kind":"trait"},"1:5654:113":{"crate_id":1,"path":["std","process","Command"],"kind":"struct"},"2:11239:9440":{"crate_id":2,"path":["core","slice","iter","Split"],"kind":"struct"},"1:3436:11189":{"crate_id":1,"path":["std","io","stdio","Stderr"],"kind":"struct"},"2:32289:34466":{"crate_id":2,"path":["core","error","tags","MaybeSizedValue"],"kind":"struct"},"2:40810:4051":{"crate_id":2,"path":["core","iter","adapters","filter_map","FilterMap"],"kind":"struct"},"10:44:7429":{"crate_id":10,"path":["adler","Adler32"],"kind":"struct"},"24:267:10570":{"crate_id":24,"path":["syn","attr","parsing","DisplayAttrStyle"],"kind":"struct"},"6:5624:8099":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_ifc_ifcu"],"kind":"union"},"6:5122:7886":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Phdr"],"kind":"struct"},"24:5493:2529":{"crate_id":24,"path":["syn","generics","Generics"],"kind":"struct"},"24:4631:4255":{"crate_id":24,"path":["syn","token","Not"],"kind":"struct"},"1:957:11072":{"crate_id":1,"path":["std","collections","hash","map","RawEntryBuilderMut"],"kind":"struct"},"1:10358:29509":{"crate_id":1,"path":["std","sys","pal","unix","os","Env"],"kind":"struct"},"1:986:11076":{"crate_id":1,"path":["std","collections","hash","map","RawEntryBuilder"],"kind":"struct"},"1:8611:9576":{"crate_id":1,"path":["std","os","unix","net","ancillary","SocketCred"],"kind":"struct"},"17:11493:24020":{"crate_id":17,"path":["object","read","elf","relocation","RelocationSections"],"kind":"struct"},"17:15624:6916":{"crate_id":17,"path":["object","pe","ImageAlpha64RuntimeFunctionEntry"],"kind":"struct"},"16:4468:7148":{"crate_id":16,"path":["gimli","constants","DwAte"],"kind":"struct"},"1:8036:5336":{"crate_id":1,"path":["std","thread","Thread"],"kind":"struct"},"1:12358:756":{"crate_id":1,"path":["std","f64"],"kind":"primitive"},"1:4821:8425":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt","st_ctime"],"kind":"function"},"2:41986:34268":{"crate_id":2,"path":["core","net","parser","AddrKind"],"kind":"enum"},"17:10185:6148":{"crate_id":17,"path":["object","endian","U16Bytes"],"kind":"struct"},"2:39758:4002":{"crate_id":2,"path":["core","ops","range","Bound"],"kind":"enum"},"2:33267:5996":{"crate_id":2,"path":["core","ops","arith","Rem"],"kind":"trait"},"2:8295:165":{"crate_id":2,"path":["core","iter","traits","collect","IntoIterator"],"kind":"trait"},"6:5283:7948":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_j1939"],"kind":"struct"},"11:1580:22937":{"crate_id":11,"path":["hashbrown","rustc_entry","RustcOccupiedEntry"],"kind":"struct"},"17:12300:24135":{"crate_id":17,"path":["object","read","pe","export","ExportTarget"],"kind":"enum"},"6:1593:7643":{"crate_id":6,"path":["libc","unix","linux_like","lconv"],"kind":"struct"},"2:32371:4144":{"crate_id":2,"path":["core","marker","Unpin"],"kind":"trait"},"2:22235:34883":{"crate_id":2,"path":["core","core_simd","vector","splat","Splat"],"kind":"struct"},"16:2394:7089":{"crate_id":16,"path":["gimli","common","DebugAbbrevOffset"],"kind":"struct"},"24:4846:4270":{"crate_id":24,"path":["syn","token","Shr"],"kind":"struct"},"2:47370:9003":{"crate_id":2,"path":["core","core_arch","x86","cpuid","CpuidResult"],"kind":"struct"},"16:7910:23890":{"crate_id":16,"path":["gimli","read","unit","AttributeValue"],"kind":"enum"},"1:432:185":{"crate_id":1,"path":["std","thread","local","LocalKey"],"kind":"struct"},"2:47115:8967":{"crate_id":2,"path":["core","core_arch","simd","i64x8"],"kind":"struct"},"17:11524:24055":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdatSectionIterator"],"kind":"struct"},"1:12132:5887":{"crate_id":1,"path":["std","backtrace_rs","symbolize","gimli","mmap","Mmap"],"kind":"struct"},"2:47308:8986":{"crate_id":2,"path":["core","core_arch","x86","__m256bh"],"kind":"struct"},"16:5006:7165":{"crate_id":16,"path":["gimli","constants","DwLne"],"kind":"struct"},"2:2037:5406":{"crate_id":2,"path":["core","mem","Discriminant"],"kind":"struct"},"2:23175:8594":{"crate_id":2,"path":["core","num","nonzero","private","NonZeroU32Inner"],"kind":"struct"},"2:7780:34296":{"crate_id":2,"path":["core","iter","adapters","GenericShunt"],"kind":"struct"},"2:7715:4046":{"crate_id":2,"path":["core","iter","adapters","zip","TrustedRandomAccess"],"kind":"trait"},"2:11045:239":{"crate_id":2,"path":["core","slice","index","SliceIndex"],"kind":"trait"},"5:3258:9406":{"crate_id":5,"path":["alloc","collections","btree","set","Difference"],"kind":"struct"},"2:41858:8812":{"crate_id":2,"path":["core","net","ip_addr","Ipv6Addr"],"kind":"struct"},"1:4807:11231":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt"],"kind":"trait"},"1:4672:11261":{"crate_id":1,"path":["std","os","unix","process","CommandExt"],"kind":"trait"},"24:3801:4226":{"crate_id":24,"path":["syn","token","Unsafe"],"kind":"struct"},"2:41293:4018":{"crate_id":2,"path":["core","iter","sources","once","Once"],"kind":"struct"},"2:39582:5457":{"crate_id":2,"path":["core","ops","coroutine","CoroutineState"],"kind":"enum"},"2:3204:4125":{"crate_id":2,"path":["core","marker","Unsize"],"kind":"trait"},"2:7716:4047":{"crate_id":2,"path":["core","iter","adapters","zip","TrustedRandomAccessNoCoerce"],"kind":"trait"},"11:299:9397":{"crate_id":11,"path":["hashbrown","raw","RawIterRange"],"kind":"struct"},"1:11428:7486":{"crate_id":1,"path":["std","sys","os_str","bytes","Buf"],"kind":"struct"},"24:1848:3530":{"crate_id":24,"path":["syn","parse","Unexpected"],"kind":"enum"},"1:6853:10709":{"crate_id":1,"path":["std","sync","reentrant_lock","ReentrantLock"],"kind":"struct"},"16:4830:7159":{"crate_id":16,"path":["gimli","constants","DwInl"],"kind":"struct"},"16:2458:7092":{"crate_id":16,"path":["gimli","common","DebugArangesOffset"],"kind":"struct"},"6:5277:7945":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_tp"],"kind":"struct"},"17:12516:24150":{"crate_id":17,"path":["object","read","xcoff","file","XcoffFile"],"kind":"struct"},"17:13024:23966":{"crate_id":17,"path":["object","read","CompressionFormat"],"kind":"enum"},"24:4834:4269":{"crate_id":24,"path":["syn","token","ShlEq"],"kind":"struct"},"5:3820:11080":{"crate_id":5,"path":["alloc","collections","linked_list","CursorMut"],"kind":"struct"},"6:479:7515":{"crate_id":6,"path":["libc","unix","timeval"],"kind":"struct"},"2:33055:5995":{"crate_id":2,"path":["core","ops","arith","Div"],"kind":"trait"},"1:2469:11137":{"crate_id":1,"path":["std","fs","symlink_metadata"],"kind":"function"},"2:12470:16663":{"crate_id":2,"path":["core","slice","SlicePattern"],"kind":"trait"},"20:744:3205":{"crate_id":20,"path":["proc_macro2","fallback","Literal"],"kind":"struct"},"5:2322:9417":{"crate_id":5,"path":["alloc","collections","btree","navigate","LazyLeafRange"],"kind":"struct"},"1:2076:197":{"crate_id":1,"path":["std","ffi","os_str","OsStr"],"kind":"struct"},"2:43343:8836":{"crate_id":2,"path":["core","hash","sip","State"],"kind":"struct"},"17:14079:6480":{"crate_id":17,"path":["object","macho","ThreadCommand"],"kind":"struct"},"6:7461:8440":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_xmmreg"],"kind":"struct"},"2:8750:149":{"crate_id":2,"path":["core","iter","traits","marker","FusedIterator"],"kind":"trait"},"2:4450:34254":{"crate_id":2,"path":["core","asserting","TryCaptureWithDebug"],"kind":"struct"},"21:1089:208":{"crate_id":21,"path":["proc_macro","bridge","client","ProcMacro"],"kind":"enum"},"2:21799:11358":{"crate_id":2,"path":["core","core_simd","lane_count","LaneCount"],"kind":"struct"},"2:3457:141":{"crate_id":2,"path":["core","ops","function","FnMut"],"kind":"trait"},"1:5958:11319":{"crate_id":1,"path":["std","sync","barrier","Barrier"],"kind":"struct"},"1:9184:3951":{"crate_id":1,"path":["std","sync","mpsc","IntoIter"],"kind":"struct"},"24:5061:2526":{"crate_id":24,"path":["syn","derive","Data"],"kind":"enum"},"1:10517:29510":{"crate_id":1,"path":["std","sys","pal","unix","process","process_common","Argv"],"kind":"struct"},"1:8559:11207":{"crate_id":1,"path":["std","net","tcp","Incoming"],"kind":"struct"},"24:3410:4213":{"crate_id":24,"path":["syn","token","In"],"kind":"struct"},"2:40885:4056":{"crate_id":2,"path":["core","iter","adapters","peekable","Peekable"],"kind":"struct"},"1:928:5553":{"crate_id":1,"path":["std","collections","hash","map","Drain"],"kind":"struct"},"17:15010:6743":{"crate_id":17,"path":["object","pe","AnonObjectHeader"],"kind":"struct"},"2:43146:4098":{"crate_id":2,"path":["core","fmt","Arguments"],"kind":"struct"},"17:13509:6361":{"crate_id":17,"path":["object","elf","Verdef"],"kind":"struct"},"2:45016:5461":{"crate_id":2,"path":["core","alloc","AllocError"],"kind":"struct"},"1:9160:9073":{"crate_id":1,"path":["std","process","ExitCode"],"kind":"struct"},"6:5046:7871":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_abs_setup"],"kind":"struct"},"6:4959:7828":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_replay"],"kind":"struct"},"16:7006:23880":{"crate_id":16,"path":["gimli","read","loclists","RawLocListIter"],"kind":"struct"},"1:8247:9574":{"crate_id":1,"path":["std","hash","random","DefaultHasher"],"kind":"struct"},"17:15222:6793":{"crate_id":17,"path":["object","pe","ImageArchiveMemberHeader"],"kind":"struct"},"2:40497:9467":{"crate_id":2,"path":["core","char","EscapeDefault"],"kind":"struct"},"6:7561:8500":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","shmid_ds"],"kind":"struct"},"16:5802:23870":{"crate_id":16,"path":["gimli","read","cfi","CieOffsetEncoding"],"kind":"enum"},"16:6620:7190":{"crate_id":16,"path":["gimli","read","index","UnitIndexSection"],"kind":"struct"},"6:4971:7833":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_envelope"],"kind":"struct"},"5:6055:5799":{"crate_id":5,"path":["alloc","sync","Weak"],"kind":"struct"},"18:581:5116":{"crate_id":18,"path":["memchr","memmem","twoway","Reverse"],"kind":"struct"},"17:15748:6952":{"crate_id":17,"path":["object","pe","ImageDebugMisc"],"kind":"struct"},"24:3631:4222":{"crate_id":24,"path":["syn","token","SelfType"],"kind":"struct"},"17:11214:23980":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdatIterator"],"kind":"struct"},"17:9938:23951":{"crate_id":17,"path":["object","common","RelocationKind"],"kind":"enum"},"5:1355:11077":{"crate_id":5,"path":["alloc","collections","btree","map","entry","OccupiedEntry"],"kind":"struct"},"24:1802:4077":{"crate_id":24,"path":["syn","parse","ParseBuffer"],"kind":"struct"},"17:13594:6389":{"crate_id":17,"path":["object","elf","HashHeader"],"kind":"struct"},"16:7580:9380":{"crate_id":16,"path":["gimli","read","pubtypes","PubTypesEntryIter"],"kind":"struct"},"24:5580:2655":{"crate_id":24,"path":["syn","generics","WherePredicate"],"kind":"enum"},"1:11238:8847":{"crate_id":1,"path":["std","sys","pal","unix","time","Nanoseconds"],"kind":"struct"},"17:15168:6781":{"crate_id":17,"path":["object","pe","ImageAuxSymbolWeak"],"kind":"struct"},"5:6076:16896":{"crate_id":5,"path":["alloc","sync","ArcInner"],"kind":"struct"},"2:42261:3956":{"crate_id":2,"path":["core","result","IterMut"],"kind":"struct"},"17:11661:9218":{"crate_id":17,"path":["object","read","elf","version","VerneedIterator"],"kind":"struct"},"2:4068:3951":{"crate_id":2,"path":["core","array","iter","IntoIter"],"kind":"struct"},"24:4730:4262":{"crate_id":24,"path":["syn","token","Plus"],"kind":"struct"},"24:3767:4225":{"crate_id":24,"path":["syn","token","Typeof"],"kind":"struct"},"17:13766:6432":{"crate_id":17,"path":["object","macho","FatHeader"],"kind":"struct"},"17:14463:6561":{"crate_id":17,"path":["object","macho","IdentCommand"],"kind":"struct"},"1:902:9403":{"crate_id":1,"path":["std","collections","hash","map","Keys"],"kind":"struct"},"1:6183:5858":{"crate_id":1,"path":["std","sync","mpmc","counter","Sender"],"kind":"struct"},"24:4479:134":{"crate_id":24,"path":["syn","token","Eq"],"kind":"struct"},"20:834:2521":{"crate_id":20,"path":["proc_macro2","imp","Ident"],"kind":"enum"},"11:1005:9374":{"crate_id":11,"path":["hashbrown","map","Entry"],"kind":"enum"},"17:9755:23927":{"crate_id":17,"path":["object","common","AddressSize"],"kind":"enum"},"1:2322:11134":{"crate_id":1,"path":["std","fs","read_to_string"],"kind":"function"},"6:5466:8035":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_prinfo"],"kind":"struct"},"17:12900:6265":{"crate_id":17,"path":["object","read","ObjectMapEntry"],"kind":"struct"},"24:3342:140":{"crate_id":24,"path":["syn","token","Fn"],"kind":"struct"},"16:2612:7099":{"crate_id":16,"path":["gimli","common","DebugMacinfoOffset"],"kind":"struct"},"17:14575:6233":{"crate_id":17,"path":["object","macho","Relocation"],"kind":"struct"},"2:21925:8571":{"crate_id":2,"path":["core","core_simd","masks","Mask"],"kind":"struct"},"24:355:4088":{"crate_id":24,"path":["syn","buffer","Cursor"],"kind":"struct"},"17:13399:6343":{"crate_id":17,"path":["object","elf","Rela32"],"kind":"struct"},"6:6775:8317":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","iocb"],"kind":"struct"},"17:12572:6173":{"crate_id":17,"path":["object","read","xcoff","symbol","SymbolTable"],"kind":"struct"},"6:5260:7934":{"crate_id":6,"path":["libc","unix","linux_like","linux","regmatch_t"],"kind":"struct"},"24:659:137":{"crate_id":24,"path":["syn","error","Error"],"kind":"struct"},"6:4876:7789":{"crate_id":6,"path":["libc","unix","linux_like","linux","packet_mreq"],"kind":"struct"},"17:11242:24002":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdatSectionIterator"],"kind":"struct"},"2:22580:34177":{"crate_id":2,"path":["core","core_simd","simd","ptr","const_ptr","SimdConstPtr","with_addr"],"kind":"function"},"17:14131:6485":{"crate_id":17,"path":["object","macho","SymtabCommand"],"kind":"struct"},"20:719:3970":{"crate_id":20,"path":["proc_macro2","fallback","LexError"],"kind":"struct"},"17:11042:23976":{"crate_id":17,"path":["object","read","archive","ArchiveMember"],"kind":"struct"},"11:2466:5551":{"crate_id":11,"path":["hashbrown","table","ExtractIf"],"kind":"struct"},"16:2528:7095":{"crate_id":16,"path":["gimli","common","DebugLineStrOffset"],"kind":"struct"},"1:5708:11305":{"crate_id":1,"path":["std","process","Stdio"],"kind":"struct"},"24:5545:3908":{"crate_id":24,"path":["syn","generics","BoundLifetimes"],"kind":"struct"},"17:13497:6360":{"crate_id":17,"path":["object","elf","Versym"],"kind":"struct"},"17:13738:6425":{"crate_id":17,"path":["object","macho","DyldCacheImageInfo"],"kind":"struct"},"2:10643:11158":{"crate_id":2,"path":["core","hash","BuildHasher"],"kind":"trait"},"6:8271:8541":{"crate_id":6,"path":["libc","unix","linux_like","linux","fanotify_event_metadata"],"kind":"struct"},"2:30725:34259":{"crate_id":2,"path":["core","ptr","alignment","AlignmentEnum"],"kind":"enum"},"16:6047:23872":{"crate_id":16,"path":["gimli","read","cfi","UnwindTable"],"kind":"struct"},"6:4965:7830":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_trigger"],"kind":"struct"},"2:46412:8899":{"crate_id":2,"path":["core","core_arch","simd","m32x4"],"kind":"struct"},"16:6120:23874":{"crate_id":16,"path":["gimli","read","cfi","RegisterRule"],"kind":"enum"},"5:2539:8562":{"crate_id":5,"path":["alloc","collections","btree","node","NodeRef"],"kind":"struct"},"24:5597:3175":{"crate_id":24,"path":["syn","generics","PredicateType"],"kind":"struct"},"2:39626:3129":{"crate_id":2,"path":["core","ops","index","Index"],"kind":"trait"},"1:10729:11189":{"crate_id":1,"path":["std","sys","pal","unix","stdio","Stderr"],"kind":"struct"},"1:4167:11231":{"crate_id":1,"path":["std","os","unix","fs","MetadataExt"],"kind":"trait"},"2:12976:16522":{"crate_id":2,"path":["core","str","pattern","ReverseSearcher"],"kind":"trait"},"1:3032:5849":{"crate_id":1,"path":["std","io","error","repr_bitpacked","Repr"],"kind":"struct"},"11:364:5762":{"crate_id":11,"path":["hashbrown","raw","RawIntoIter"],"kind":"struct"},"5:1184:36212":{"crate_id":5,"path":["alloc","collections","btree","borrow","DormantMutRef"],"kind":"struct"},"1:6796:10595":{"crate_id":1,"path":["std","sync","poison","PoisonError"],"kind":"struct"},"5:7652:243":{"crate_id":5,"path":["alloc","string","String"],"kind":"struct"},"17:14855:6692":{"crate_id":17,"path":["object","pe","ImageFileHeader"],"kind":"struct"},"1:11792:11209":{"crate_id":1,"path":["std","sys_common","net","TcpStream"],"kind":"struct"},"8:0:3705":{"crate_id":8,"path":["cfg_if"],"kind":"module"},"1:8078:11067":{"crate_id":1,"path":["std","backtrace","RawFrame"],"kind":"enum"},"17:14516:6567":{"crate_id":17,"path":["object","macho","DataInCodeEntry"],"kind":"struct"},"24:4392:4239":{"crate_id":24,"path":["syn","token","Comma"],"kind":"struct"},"1:4694:11262":{"crate_id":1,"path":["std","os","unix","process","ExitStatusExt"],"kind":"trait"},"21:2544:126":{"crate_id":21,"path":["proc_macro","diagnostic","Diagnostic"],"kind":"struct"},"6:1580:7636":{"crate_id":6,"path":["libc","unix","linux_like","sched_param"],"kind":"struct"},"6:1671:7698":{"crate_id":6,"path":["libc","unix","linux_like","arphdr"],"kind":"struct"},"2:40613:106":{"crate_id":2,"path":["core","ffi","c_str","CStr"],"kind":"struct"},"17:13272:6323":{"crate_id":17,"path":["object","elf","SectionHeader64"],"kind":"struct"},"17:14111:6484":{"crate_id":17,"path":["object","macho","RoutinesCommand64"],"kind":"struct"},"16:3899:7143":{"crate_id":16,"path":["gimli","constants","DwCfa"],"kind":"struct"},"24:5393:3879":{"crate_id":24,"path":["syn","expr","ExprReference"],"kind":"struct"},"1:3529:4022":{"crate_id":1,"path":["std","io","util","Repeat"],"kind":"struct"},"16:2418:7090":{"crate_id":16,"path":["gimli","common","DebugAddrBase"],"kind":"struct"},"1:3649:4104":{"crate_id":1,"path":["std","io","Write"],"kind":"trait"},"16:6026:9284":{"crate_id":16,"path":["gimli","read","cfi","UnwindContext"],"kind":"struct"},"1:1625:9405":{"crate_id":1,"path":["std","collections","hash","set","Intersection"],"kind":"struct"},"2:23197:8596":{"crate_id":2,"path":["core","num","nonzero","private","NonZeroU128Inner"],"kind":"struct"},"6:5653:8109":{"crate_id":6,"path":["libc","unix","linux_like","linux","sched_attr"],"kind":"struct"},"11:1105:22934":{"crate_id":11,"path":["hashbrown","map","OccupiedEntryRef"],"kind":"struct"},"17:16249:7072":{"crate_id":17,"path":["object","xcoff","DwarfAux64"],"kind":"struct"},"17:11392:24012":{"crate_id":17,"path":["object","read","elf","section","ElfSectionIterator"],"kind":"struct"},"16:2936:23010":{"crate_id":16,"path":["gimli","common","SectionId"],"kind":"enum"},"17:16269:6345":{"crate_id":17,"path":["object","xcoff","Rel64"],"kind":"struct"},"16:6300:23875":{"crate_id":16,"path":["gimli","read","dwarf","DwarfPackage"],"kind":"struct"},"1:11653:11310":{"crate_id":1,"path":["std","sys_common","process","CommandEnvs"],"kind":"struct"},"2:46556:8921":{"crate_id":2,"path":["core","core_arch","simd","i8x32"],"kind":"struct"},"17:11688:9220":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSection"],"kind":"struct"},"2:46216:8889":{"crate_id":2,"path":["core","core_arch","simd","u64x2"],"kind":"struct"},"24:5338:3893":{"crate_id":24,"path":["syn","expr","ExprGroup"],"kind":"struct"},"2:44906:227":{"crate_id":2,"path":["core","future","ResumeTy"],"kind":"struct"},"6:7306:8377":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","sigaction"],"kind":"struct"},"2:42253:3952":{"crate_id":2,"path":["core","result","Iter"],"kind":"struct"},"14:202:2953":{"crate_id":14,"path":["rustc_demangle","v0","ParseError"],"kind":"enum"},"17:11189:6169":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbol"],"kind":"struct"},"16:2854:7110":{"crate_id":16,"path":["gimli","common","DebugFrameOffset"],"kind":"struct"},"2:34125:5039":{"crate_id":2,"path":["core","ops","bit","BitOr"],"kind":"trait"},"1:9556:5620":{"crate_id":1,"path":["std","sys","pal","unix","args","Args"],"kind":"struct"},"17:11051:23994":{"crate_id":17,"path":["object","read","coff","file","CoffCommon"],"kind":"struct"},"16:5756:23869":{"crate_id":16,"path":["gimli","read","cfi","EhHdrTableIter"],"kind":"struct"},"2:47203:8973":{"crate_id":2,"path":["core","core_arch","x86","__m256i"],"kind":"struct"},"17:15176:6784":{"crate_id":17,"path":["object","pe","ImageAuxSymbolSection"],"kind":"struct"},"6:4952:7825":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_mask"],"kind":"struct"},"16:7755:7121":{"crate_id":16,"path":["gimli","read","str","DebugLineStr"],"kind":"struct"},"5:743:118":{"crate_id":5,"path":["alloc","borrow","Cow"],"kind":"enum"},"2:21695:34871":{"crate_id":2,"path":["core","core_simd","swizzle","interleave","Lo"],"kind":"struct"},"17:10887:37471":{"crate_id":17,"path":["object","read","any","DynamicRelocationIteratorInternal"],"kind":"enum"},"6:8282:8545":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_cond_t"],"kind":"struct"},"20:843:3205":{"crate_id":20,"path":["proc_macro2","imp","Literal"],"kind":"enum"},"2:43889:9448":{"crate_id":2,"path":["core","slice","iter","RChunksExact"],"kind":"struct"},"2:21817:8571":{"crate_id":2,"path":["core","core_simd","masks","mask_impl","Mask"],"kind":"struct"},"6:5181:7892":{"crate_id":6,"path":["libc","unix","linux_like","linux","mntent"],"kind":"struct"},"2:5366:979":{"crate_id":2,"path":["core","iter"],"kind":"module"},"15:288:22964":{"crate_id":15,"path":["addr2line","LocationRangeIter"],"kind":"struct"},"2:42497:94":{"crate_id":2,"path":["core","sync","atomic","AtomicU32"],"kind":"struct"},"24:5660:2727":{"crate_id":24,"path":["syn","lit","LitStr"],"kind":"struct"},"2:45892:8854":{"crate_id":2,"path":["core","core_arch","simd","u8x2"],"kind":"struct"},"2:21726:34879":{"crate_id":2,"path":["core","core_simd","swizzle","resize","Resize"],"kind":"struct"},"18:613:37487":{"crate_id":18,"path":["memchr","memmem","twoway","SuffixKind"],"kind":"enum"},"24:4958:4598":{"crate_id":24,"path":["syn","token","Bracket"],"kind":"struct"},"2:44892:164":{"crate_id":2,"path":["core","future","into_future","IntoFuture"],"kind":"trait"},"2:44989:180":{"crate_id":2,"path":["core","alloc","layout","Layout"],"kind":"struct"},"17:15368:6832":{"crate_id":17,"path":["object","pe","ImageResourceDirectoryEntry"],"kind":"struct"},"24:1294:2598":{"crate_id":24,"path":["syn","lifetime","Lifetime"],"kind":"struct"},"16:6098:23873":{"crate_id":16,"path":["gimli","read","cfi","CfaRule"],"kind":"enum"},"2:8797:34250":{"crate_id":2,"path":["core","net","display_buffer","DisplayBuffer"],"kind":"struct"},"24:3070:4200":{"crate_id":24,"path":["syn","token","Async"],"kind":"struct"},"24:5079:2780":{"crate_id":24,"path":["syn","derive","DataUnion"],"kind":"struct"},"2:42174:4092":{"crate_id":2,"path":["core","panic","unwind_safe","UnwindSafe"],"kind":"trait"},"24:0:2357":{"crate_id":24,"path":["syn"],"kind":"module"},"2:10387:119":{"crate_id":2,"path":["core","fmt","macros","Debug"],"kind":"proc_derive"},"2:2965:144":{"crate_id":2,"path":["core","convert","From"],"kind":"trait"},"6:7575:8509":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ptrace_rseq_configuration"],"kind":"struct"},"1:5168:4699":{"crate_id":1,"path":["std","panic","always_abort"],"kind":"function"},"1:11273:9089":{"crate_id":1,"path":["std","sys","pal","unix","time","Timespec"],"kind":"struct"},"11:2551:37379":{"crate_id":11,"path":["hashbrown","raw","Fallibility"],"kind":"enum"},"2:39795:8677":{"crate_id":2,"path":["core","any","TypeId"],"kind":"struct"},"1:7484:32998":{"crate_id":1,"path":["std","sys_common","wstr","WStrUnits"],"kind":"struct"},"1:8867:3952":{"crate_id":1,"path":["std","path","Iter"],"kind":"struct"},"17:9984:23952":{"crate_id":17,"path":["object","common","RelocationEncoding"],"kind":"enum"},"2:32312:237":{"crate_id":2,"path":["core","marker","Send"],"kind":"trait"},"24:4995:2720":{"crate_id":24,"path":["syn","attr","Meta"],"kind":"enum"},"2:44375:9530":{"crate_id":2,"path":["core","str","pattern","CharSearcher"],"kind":"struct"},"24:3087:4201":{"crate_id":24,"path":["syn","token","Auto"],"kind":"struct"},"2:3828:70":{"crate_id":2,"path":["core","any","Any"],"kind":"trait"},"6:5643:8108":{"crate_id":6,"path":["libc","unix","linux_like","linux","dirent64"],"kind":"struct"},"6:5546:8062":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_alg"],"kind":"struct"},"1:8183:5629":{"crate_id":1,"path":["std","fs","Metadata"],"kind":"struct"},"24:2188:2514":{"crate_id":24,"path":["syn","punctuated","Punctuated"],"kind":"struct"},"1:9117:11307":{"crate_id":1,"path":["std","process","CommandArgs"],"kind":"struct"},"1:7729:28523":{"crate_id":1,"path":["std","panicking","Hook"],"kind":"enum"},"2:42536:88":{"crate_id":2,"path":["core","sync","atomic","AtomicI64"],"kind":"struct"},"24:5449:3129":{"crate_id":24,"path":["syn","expr","Index"],"kind":"struct"},"6:6435:8165":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__exit_status"],"kind":"struct"},"9:178:10690":{"crate_id":9,"path":["miniz_oxide","inflate","stream","InflateState"],"kind":"struct"},"2:3206:117":{"crate_id":2,"path":["core","marker","Copy"],"kind":"trait"},"1:4883:11283":{"crate_id":1,"path":["std","os","linux","process","ChildExt"],"kind":"trait"},"2:40455:8805":{"crate_id":2,"path":["core","char","convert","CharTryFromError"],"kind":"struct"},"17:11764:9227":{"crate_id":17,"path":["object","read","elf","attributes","AttributeReader"],"kind":"struct"},"24:708:3951":{"crate_id":24,"path":["syn","error","IntoIter"],"kind":"struct"},"2:4721:221":{"crate_id":2,"path":["core","cell","RefCell"],"kind":"struct"},"24:4747:4263":{"crate_id":24,"path":["syn","token","PlusEq"],"kind":"struct"},"2:42175:4091":{"crate_id":2,"path":["core","panic","unwind_safe","RefUnwindSafe"],"kind":"trait"},"2:38967:6005":{"crate_id":2,"path":["core","ops","bit","ShrAssign"],"kind":"trait"},"17:2203:24010":{"crate_id":17,"path":["object","read","elf","relocation","ElfDynamicRelocationIterator"],"kind":"struct"},"9:502:7489":{"crate_id":9,"path":["miniz_oxide","StreamResult"],"kind":"struct"},"2:4362:5793":{"crate_id":2,"path":["core","array","Guard"],"kind":"struct"},"6:4897:7799":{"crate_id":6,"path":["libc","unix","linux_like","linux","msginfo"],"kind":"struct"},"17:12399:9239":{"crate_id":17,"path":["object","read","pe","import","DelayLoadDescriptorIterator"],"kind":"struct"},"24:3699:4224":{"crate_id":24,"path":["syn","token","Super"],"kind":"struct"},"6:6706:8297":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_mmap_offsets"],"kind":"struct"},"16:7823:23889":{"crate_id":16,"path":["gimli","read","unit","UnitType"],"kind":"enum"},"16:8155:9392":{"crate_id":16,"path":["gimli","read","unit","EntriesTree"],"kind":"struct"},"1:4819:8423":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt","st_mtime"],"kind":"function"},"7:32:22841":{"crate_id":7,"path":["unwind","libunwind","_Unwind_Reason_Code"],"kind":"enum"},"2:13682:35406":{"crate_id":2,"path":["core","future","join","MaybeDone"],"kind":"enum"},"17:10457:138":{"crate_id":17,"path":["object","read","any","File"],"kind":"enum"},"17:12993:23965":{"crate_id":17,"path":["object","read","RelocationTarget"],"kind":"enum"},"2:44264:9529":{"crate_id":2,"path":["core","str","iter","EncodeUtf16"],"kind":"struct"},"18:548:153":{"crate_id":18,"path":["memchr","memmem","rabinkarp","Hash"],"kind":"struct"},"6:7537:8492":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","mcontext_t"],"kind":"struct"},"24:2382:3952":{"crate_id":24,"path":["syn","punctuated","Iter"],"kind":"struct"},"17:15116:6766":{"crate_id":17,"path":["object","pe","ImageSymbolExBytes"],"kind":"struct"},"24:3546:4219":{"crate_id":24,"path":["syn","token","Override"],"kind":"struct"},"2:32296:4119":{"crate_id":2,"path":["core","error","tags","Ref"],"kind":"struct"},"17:11877:6184":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandIterator"],"kind":"struct"},"2:9857:91":{"crate_id":2,"path":["core","sync","atomic","AtomicPtr"],"kind":"struct"},"6:5557:8068":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_setup"],"kind":"struct"},"17:12043:24066":{"crate_id":17,"path":["object","read","macho","segment","MachOSegment"],"kind":"struct"},"18:643:6023":{"crate_id":18,"path":["memchr","memmem","x86","avx","nostd","Forward"],"kind":"struct"},"17:15151:6776":{"crate_id":17,"path":["object","pe","ImageAuxSymbolFunctionBeginEnd"],"kind":"struct"},"17:12478:6237":{"crate_id":17,"path":["object","read","pe","resource","ResourceName"],"kind":"struct"},"5:7641:5800":{"crate_id":5,"path":["alloc","rc","UniqueRc"],"kind":"struct"},"24:5048:2538":{"crate_id":24,"path":["syn","data","Field"],"kind":"struct"},"2:43718:35419":{"crate_id":2,"path":["core","slice","iter","GenericSplitN"],"kind":"struct"},"6:0:1004":{"crate_id":6,"path":["libc"],"kind":"module"},"2:44889:150":{"crate_id":2,"path":["core","future","future","Future"],"kind":"trait"},"2:32313:4143":{"crate_id":2,"path":["core","marker","Sized"],"kind":"trait"},"24:5398:3900":{"crate_id":24,"path":["syn","expr","ExprRepeat"],"kind":"struct"},"21:2726:3205":{"crate_id":21,"path":["proc_macro","Literal"],"kind":"struct"},"17:14968:6736":{"crate_id":17,"path":["object","pe","ImageNtHeaders64"],"kind":"struct"},"5:1340:11078":{"crate_id":5,"path":["alloc","collections","btree","map","entry","VacantEntry"],"kind":"struct"},"2:33807:6000":{"crate_id":2,"path":["core","ops","arith","RemAssign"],"kind":"trait"},"2:44496:9541":{"crate_id":2,"path":["core","str","pattern","CharPredicateSearcher"],"kind":"struct"},"24:5858:2902":{"crate_id":24,"path":["syn","path","AssocConst"],"kind":"struct"},"1:9420:235":{"crate_id":1,"path":["std","sync","rwlock","RwLockWriteGuard"],"kind":"struct"},"2:46630:8923":{"crate_id":2,"path":["core","core_arch","simd","i32x8"],"kind":"struct"},"2:2956:77":{"crate_id":2,"path":["core","convert","AsRef"],"kind":"trait"},"2:44979:11449":{"crate_id":2,"path":["core","task","wake","ContextBuilder"],"kind":"struct"},"17:10439:6156":{"crate_id":17,"path":["object","read","util","StringTable"],"kind":"struct"},"17:12724:23963":{"crate_id":17,"path":["object","read","FileKind"],"kind":"enum"},"17:11089:23983":{"crate_id":17,"path":["object","read","coff","section","CoffSegmentIterator"],"kind":"struct"},"20:927:2913":{"crate_id":20,"path":["proc_macro2","Punct"],"kind":"struct"},"17:15456:6852":{"crate_id":17,"path":["object","pe","ImagePrologueDynamicRelocationHeader"],"kind":"struct"},"17:13424:6346":{"crate_id":17,"path":["object","elf","Rela64"],"kind":"struct"},"1:8731:5986":{"crate_id":1,"path":["std","path","Prefix"],"kind":"enum"},"5:1559:10699":{"crate_id":5,"path":["alloc","collections","btree","map","IntoKeys"],"kind":"struct"},"16:2878:7111":{"crate_id":16,"path":["gimli","common","EhFrameOffset"],"kind":"struct"},"18:689:9198":{"crate_id":18,"path":["memchr","memmem","FinderRev"],"kind":"struct"},"2:44599:9553":{"crate_id":2,"path":["core","str","lossy","Utf8Chunks"],"kind":"struct"},"2:3257:3996":{"crate_id":2,"path":["core","ops","arith","Add"],"kind":"trait"},"17:15289:6807":{"crate_id":17,"path":["object","pe","ImageTlsDirectory64"],"kind":"struct"},"17:13753:6430":{"crate_id":17,"path":["object","macho","DyldSubCacheInfo"],"kind":"struct"},"2:11190:3952":{"crate_id":2,"path":["core","slice","iter","Iter"],"kind":"struct"},"11:0:3708":{"crate_id":11,"path":["hashbrown"],"kind":"module"},"17:11567:24057":{"crate_id":17,"path":["object","read","elf","note","GnuProperty"],"kind":"struct"},"1:675:11062":{"crate_id":1,"path":["std","backtrace","BacktraceSymbol"],"kind":"struct"},"24:1085:37716":{"crate_id":24,"path":["syn","generics","ConstParams"],"kind":"struct"},"1:2313:138":{"crate_id":1,"path":["std","fs","File"],"kind":"struct"},"11:1893:5551":{"crate_id":11,"path":["hashbrown","set","ExtractIf"],"kind":"struct"},"5:4515:5795":{"crate_id":5,"path":["alloc","collections","vec_deque","truncate","Dropper"],"kind":"struct"},"17:12264:24107":{"crate_id":17,"path":["object","read","pe","section","PeSection"],"kind":"struct"},"2:44194:9524":{"crate_id":2,"path":["core","str","iter","RMatches"],"kind":"struct"},"17:12362:9237":{"crate_id":17,"path":["object","read","pe","import","ImportThunkList"],"kind":"struct"},"16:8226:23893":{"crate_id":16,"path":["gimli","read","value","ValueType"],"kind":"enum"},"2:47240:8976":{"crate_id":2,"path":["core","core_arch","x86","__m512i"],"kind":"struct"},"16:4940:7163":{"crate_id":16,"path":["gimli","constants","DwDefaulted"],"kind":"struct"},"24:5055:2360":{"crate_id":24,"path":["syn","derive","DeriveInput"],"kind":"struct"},"16:2338:7080":{"crate_id":16,"path":["gimli","common","Encoding"],"kind":"struct"},"17:12792:6111":{"crate_id":17,"path":["object","read","SectionIndex"],"kind":"struct"},"24:2390:3954":{"crate_id":24,"path":["syn","punctuated","PrivateIter"],"kind":"struct"},"18:96:28197":{"crate_id":18,"path":["memchr","memchr","iter","Memchr2"],"kind":"struct"},"13:110:37387":{"crate_id":13,"path":["std_detect","detect","arch","x86","Feature"],"kind":"enum"},"17:11841:24099":{"crate_id":17,"path":["object","read","macho","file","MachOComdatIterator"],"kind":"struct"},"16:5037:7166":{"crate_id":16,"path":["gimli","constants","DwLnct"],"kind":"struct"},"5:3046:4218":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Mut"],"kind":"struct"},"24:5312:3873":{"crate_id":24,"path":["syn","expr","ExprCast"],"kind":"struct"},"16:7813:9381":{"crate_id":16,"path":["gimli","read","unit","DebugInfoUnitHeadersIter"],"kind":"struct"},"17:13455:6355":{"crate_id":17,"path":["object","elf","ProgramHeader64"],"kind":"struct"},"1:11365:2890":{"crate_id":1,"path":["std","sys","os_str","bytes","Slice"],"kind":"struct"},"24:3359:4210":{"crate_id":24,"path":["syn","token","For"],"kind":"struct"},"24:4887:4273":{"crate_id":24,"path":["syn","token","SlashEq"],"kind":"struct"},"2:42269:3951":{"crate_id":2,"path":["core","result","IntoIter"],"kind":"struct"},"16:7539:7126":{"crate_id":16,"path":["gimli","read","pubnames","DebugPubNames"],"kind":"struct"},"6:5002:7851":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_periodic_effect"],"kind":"struct"},"17:15418:6844":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation32"],"kind":"struct"},"6:6664:8280":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_exit"],"kind":"struct"},"2:39680:212":{"crate_id":2,"path":["core","ops","range","RangeFrom"],"kind":"struct"},"2:43899:16512":{"crate_id":2,"path":["core","slice","iter","RChunksExactMut"],"kind":"struct"},"24:3240:4205":{"crate_id":24,"path":["syn","token","Do"],"kind":"struct"},"17:1098:23984":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbolIterator"],"kind":"struct"},"6:6657:8279":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_entry"],"kind":"struct"},"17:10769:37474":{"crate_id":17,"path":["object","read","any","SymbolTableInternal"],"kind":"enum"},"17:12683:24145":{"crate_id":17,"path":["object","read","xcoff","segment","XcoffSegmentIterator"],"kind":"struct"},"2:12970:9201":{"crate_id":2,"path":["core","str","pattern","Searcher"],"kind":"trait"},"24:4989:3853":{"crate_id":24,"path":["syn","attr","AttrStyle"],"kind":"enum"},"2:2936:16570":{"crate_id":2,"path":["core","convert","num","FloatToInt"],"kind":"trait"},"1:5515:128":{"crate_id":1,"path":["std","path","Display"],"kind":"struct"},"2:44421:9539":{"crate_id":2,"path":["core","str","pattern","CharArrayRefSearcher"],"kind":"struct"},"17:12508:6241":{"crate_id":17,"path":["object","read","pe","rich","RichHeaderEntry"],"kind":"struct"},"2:3272:6006":{"crate_id":2,"path":["core","ops","arith","Neg"],"kind":"trait"},"24:6029:3930":{"crate_id":24,"path":["syn","ty","BareVariadic"],"kind":"struct"},"6:5445:8020":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_rcvinfo"],"kind":"struct"},"1:12370:968":{"crate_id":1,"path":["std","isize"],"kind":"primitive"},"17:9886:23949":{"crate_id":17,"path":["object","common","SymbolKind"],"kind":"enum"},"2:43807:16509":{"crate_id":2,"path":["core","slice","iter","ChunksExactMut"],"kind":"struct"},"1:12346:471":{"crate_id":1,"path":["std","char"],"kind":"primitive"},"16:7355:7261":{"crate_id":16,"path":["gimli","read","op","Piece"],"kind":"struct"},"16:3196:7079":{"crate_id":16,"path":["gimli","arch","AArch64"],"kind":"struct"},"9:447:22855":{"crate_id":9,"path":["miniz_oxide","MZError"],"kind":"enum"},"2:21668:34875":{"crate_id":2,"path":["core","core_simd","swizzle","rotate_elements_left","Rotate"],"kind":"struct"},"24:3461:2904":{"crate_id":24,"path":["syn","token","Macro"],"kind":"struct"},"2:43100:73":{"crate_id":2,"path":["core","fmt","rt","Argument"],"kind":"struct"},"2:46053:8872":{"crate_id":2,"path":["core","core_arch","simd","i8x8"],"kind":"struct"},"17:15023:6748":{"crate_id":17,"path":["object","pe","AnonObjectHeaderV2"],"kind":"struct"},"17:10399:3494":{"crate_id":17,"path":["object","read","util","Bytes"],"kind":"struct"},"21:2588:3970":{"crate_id":21,"path":["proc_macro","LexError"],"kind":"struct"},"24:5278:3883":{"crate_id":24,"path":["syn","expr","ExprArray"],"kind":"struct"},"17:16198:7062":{"crate_id":17,"path":["object","xcoff","BlockAux32"],"kind":"struct"},"2:44404:9538":{"crate_id":2,"path":["core","str","pattern","CharArraySearcher"],"kind":"struct"},"2:43546:8840":{"crate_id":2,"path":["core","slice","sort","TimSortRun"],"kind":"struct"},"6:5536:8056":{"crate_id":6,"path":["libc","unix","linux_like","linux","dirent"],"kind":"struct"},"16:6335:10658":{"crate_id":16,"path":["gimli","read","dwarf","RangeIter"],"kind":"struct"},"5:883:5775":{"crate_id":5,"path":["alloc","collections","binary_heap","RebuildOnDrop"],"kind":"struct"},"1:11291:162":{"crate_id":1,"path":["std","sys","pal","unix","time","Instant"],"kind":"struct"},"24:1757:28233":{"crate_id":24,"path":["syn","parse","discouraged","AnyDelimiter"],"kind":"trait"},"16:7111:9372":{"crate_id":16,"path":["gimli","read","lookup","PubStuffHeader"],"kind":"struct"},"24:4759:4264":{"crate_id":24,"path":["syn","token","Pound"],"kind":"struct"},"1:11614:29746":{"crate_id":1,"path":["std","sys","thread_local","fast_local","Key"],"kind":"struct"},"17:15822:6967":{"crate_id":17,"path":["object","pe","ImportObjectHeader"],"kind":"struct"},"18:659:28208":{"crate_id":18,"path":["memchr","memmem","FindIter"],"kind":"struct"},"18:598:5983":{"crate_id":18,"path":["memchr","memmem","twoway","Shift"],"kind":"enum"},"21:1349:2602":{"crate_id":21,"path":["proc_macro","bridge","symbol","Symbol"],"kind":"struct"},"16:7633:37400":{"crate_id":16,"path":["gimli","read","rnglists","RangeListsFormat"],"kind":"enum"},"6:7546:8495":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ipc_perm"],"kind":"struct"},"12:0:3709":{"crate_id":12,"path":["rustc_std_workspace_alloc"],"kind":"module"},"16:6231:9314":{"crate_id":16,"path":["gimli","read","cfi","CallFrameInstructionIter"],"kind":"struct"},"2:10389:128":{"crate_id":2,"path":["core","fmt","Display"],"kind":"trait"},"2:4572:4129":{"crate_id":2,"path":["core","cell","lazy","LazyCell"],"kind":"struct"},"6:578:7573":{"crate_id":6,"path":["libc","unix","servent"],"kind":"struct"},"17:12464:24136":{"crate_id":17,"path":["object","read","pe","resource","ResourceDirectoryEntryData"],"kind":"enum"},"2:38388:6004":{"crate_id":2,"path":["core","ops","bit","ShlAssign"],"kind":"trait"},"2:44740:130":{"crate_id":2,"path":["core","time","Duration"],"kind":"struct"},"17:11755:9226":{"crate_id":17,"path":["object","read","elf","attributes","AttributeIndexIterator"],"kind":"struct"},"16:8073:3854":{"crate_id":16,"path":["gimli","read","unit","Attribute"],"kind":"struct"},"2:44896:219":{"crate_id":2,"path":["core","future","ready","Ready"],"kind":"struct"},"16:8175:23891":{"crate_id":16,"path":["gimli","read","unit","EntriesTreeNode"],"kind":"struct"},"17:11419:6173":{"crate_id":17,"path":["object","read","elf","symbol","SymbolTable"],"kind":"struct"},"20:801:9189":{"crate_id":20,"path":["proc_macro2","imp","DeferredTokenStream"],"kind":"struct"},"6:1653:7691":{"crate_id":6,"path":["libc","unix","linux_like","arpreq"],"kind":"struct"},"1:12366:1836":{"crate_id":1,"path":["std","u16"],"kind":"primitive"},"1:11033:28571":{"crate_id":1,"path":["std","sys","pal","unix","process","process_common","ProgramKind"],"kind":"enum"},"17:10419:6155":{"crate_id":17,"path":["object","read","util","ByteString"],"kind":"struct"},"5:7392:3951":{"crate_id":5,"path":["alloc","collections","binary_heap","IntoIter"],"kind":"struct"},"1:4153:11229":{"crate_id":1,"path":["std","os","unix","fs","PermissionsExt"],"kind":"trait"},"16:2788:7107":{"crate_id":16,"path":["gimli","common","DebugStrOffsetsIndex"],"kind":"struct"},"24:5802:3923":{"crate_id":24,"path":["syn","op","UnOp"],"kind":"enum"},"2:45028:9568":{"crate_id":2,"path":["core","escape","EscapeIterInner"],"kind":"struct"},"20:815:2588":{"crate_id":20,"path":["proc_macro2","imp","Span"],"kind":"enum"},"6:5014:7857":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_rumble_effect"],"kind":"struct"},"2:42099:173":{"crate_id":2,"path":["core","option","Item"],"kind":"struct"},"24:5342:3894":{"crate_id":24,"path":["syn","expr","ExprIf"],"kind":"struct"},"2:43778:9445":{"crate_id":2,"path":["core","slice","iter","Chunks"],"kind":"struct"},"2:6966:4043":{"crate_id":2,"path":["core","iter","adapters","map_windows","MapWindows"],"kind":"struct"},"1:7891:10598":{"crate_id":1,"path":["std","backtrace_rs","symbolize","SymbolName"],"kind":"struct"},"5:3222:100":{"crate_id":5,"path":["alloc","collections","btree","set","BTreeSet"],"kind":"struct"},"17:3597:24084":{"crate_id":17,"path":["object","read","macho","relocation","MachORelocationIterator"],"kind":"struct"},"23:46:3982":{"crate_id":23,"path":["quote","ident_fragment","IdentFragment"],"kind":"trait"},"2:40694:11131":{"crate_id":2,"path":["core","ffi","VaList"],"kind":"struct"},"6:8317:8553":{"crate_id":6,"path":["libc","unix","linux_like","linux","canfd_frame"],"kind":"struct"},"16:8313:137":{"crate_id":16,"path":["gimli","read","Error"],"kind":"enum"},"17:13344:6335":{"crate_id":17,"path":["object","elf","Sym64"],"kind":"struct"},"24:5452:3882":{"crate_id":24,"path":["syn","expr","FieldValue"],"kind":"struct"},"17:14402:6546":{"crate_id":17,"path":["object","macho","BuildToolVersion"],"kind":"struct"},"2:2146:8568":{"crate_id":2,"path":["core","ptr","metadata","PtrComponents"],"kind":"struct"},"17:10818:23959":{"crate_id":17,"path":["object","read","any","SymbolIterator"],"kind":"struct"},"2:10044:10702":{"crate_id":2,"path":["core","fmt","builders","PadAdapterState"],"kind":"struct"},"23:239:5038":{"crate_id":23,"path":["quote","__private","get_span","GetSpanInner"],"kind":"struct"},"2:44702:9559":{"crate_id":2,"path":["core","str","IsWhitespace"],"kind":"struct"},"1:953:10700":{"crate_id":1,"path":["std","collections","hash","map","IntoValues"],"kind":"struct"},"1:12347:1876":{"crate_id":1,"path":["std","unit"],"kind":"primitive"},"9:392:22856":{"crate_id":9,"path":["miniz_oxide","MZFlush"],"kind":"enum"},"2:2731:112":{"crate_id":2,"path":["core","clone","Clone"],"kind":"trait"},"24:2509:3142":{"crate_id":24,"path":["syn","punctuated","Pair"],"kind":"enum"},"18:491:9191":{"crate_id":18,"path":["memchr","cow","Imp"],"kind":"struct"},"24:4648:4256":{"crate_id":24,"path":["syn","token","Or"],"kind":"struct"},"2:3673:16547":{"crate_id":2,"path":["core","ops","try_trait","NeverShortCircuit"],"kind":"struct"},"6:6788:8324":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","sifields_sigchld"],"kind":"struct"},"24:3291:2534":{"crate_id":24,"path":["syn","token","Enum"],"kind":"struct"},"17:14560:6574":{"crate_id":17,"path":["object","macho","Nlist64"],"kind":"struct"},"2:44469:9540":{"crate_id":2,"path":["core","str","pattern","CharSliceSearcher"],"kind":"struct"},"17:15769:6958":{"crate_id":17,"path":["object","pe","ImageFunctionEntry64"],"kind":"struct"},"2:40872:4042":{"crate_id":2,"path":["core","iter","adapters","map_while","MapWhile"],"kind":"struct"},"24:4426:4241":{"crate_id":24,"path":["syn","token","Dot"],"kind":"struct"},"6:1535:7605":{"crate_id":6,"path":["libc","unix","linux_like","addrinfo"],"kind":"struct"},"6:5244:7926":{"crate_id":6,"path":["libc","unix","linux_like","linux","fanotify_response"],"kind":"struct"},"24:4590:4252":{"crate_id":24,"path":["syn","token","Minus"],"kind":"struct"},"24:5521:3144":{"crate_id":24,"path":["syn","generics","TypeParam"],"kind":"struct"},"24:5848:3186":{"crate_id":24,"path":["syn","path","AngleBracketedGenericArguments"],"kind":"struct"},"18:507:6023":{"crate_id":18,"path":["memchr","memmem","genericsimd","Forward"],"kind":"struct"},"1:8636:9053":{"crate_id":1,"path":["std","os","unix","net","ucred","UCred"],"kind":"struct"},"1:5447:203":{"crate_id":1,"path":["std","path","Path"],"kind":"struct"},"2:3216:3049":{"crate_id":2,"path":["core","marker","PhantomData"],"kind":"struct"},"17:15799:6963":{"crate_id":17,"path":["object","pe","NonPagedDebugInfo"],"kind":"struct"},"5:7456:3951":{"crate_id":5,"path":["alloc","collections","btree","set","IntoIter"],"kind":"struct"},"6:6689:8287":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","sockaddr_xdp"],"kind":"struct"},"21:2701:2913":{"crate_id":21,"path":["proc_macro","Punct"],"kind":"struct"},"17:12030:24067":{"crate_id":17,"path":["object","read","macho","segment","MachOSegmentIterator"],"kind":"struct"},"24:4532:4248":{"crate_id":24,"path":["syn","token","Gt"],"kind":"struct"},"11:1085:37385":{"crate_id":11,"path":["hashbrown","map","KeyOrRef"],"kind":"enum"},"2:11394:9443":{"crate_id":2,"path":["core","slice","iter","RSplit"],"kind":"struct"},"24:3716:253":{"crate_id":24,"path":["syn","token","Trait"],"kind":"struct"},"5:3039:2762":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Owned"],"kind":"enum"},"20:878:252":{"crate_id":20,"path":["proc_macro2","TokenStream"],"kind":"struct"},"2:46362:8897":{"crate_id":2,"path":["core","core_arch","simd","m8x16"],"kind":"struct"},"5:7547:4008":{"crate_id":5,"path":["alloc","collections","TryReserveError"],"kind":"struct"},"24:5550:3075":{"crate_id":24,"path":["syn","generics","TypeParamBound"],"kind":"enum"},"1:2635:11185":{"crate_id":1,"path":["std","io","buffered","bufreader","BufReader"],"kind":"struct"},"1:12373:13":{"crate_id":1,"path":["std","fn"],"kind":"primitive"},"2:32403:114":{"crate_id":2,"path":["core","marker","ConstParamTy"],"kind":"trait"},"2:36347:4270":{"crate_id":2,"path":["core","ops","bit","Shr"],"kind":"trait"},"1:8553:9525":{"crate_id":1,"path":["std","io","Lines"],"kind":"struct"},"3:234:226":{"crate_id":3,"path":["compiler_builtins","float","cmp","Result"],"kind":"enum"},"2:43857:16503":{"crate_id":2,"path":["core","slice","iter","ArrayChunksMut"],"kind":"struct"},"17:11153:23959":{"crate_id":17,"path":["object","read","coff","symbol","SymbolIterator"],"kind":"struct"},"5:304:2569":{"crate_id":5,"path":["alloc","boxed","Box"],"kind":"struct"},"2:3460:142":{"crate_id":2,"path":["core","ops","function","FnOnce"],"kind":"trait"},"11:1920:2558":{"crate_id":11,"path":["hashbrown","set","Union"],"kind":"struct"},"6:5617:8096":{"crate_id":6,"path":["libc","unix","linux_like","linux","ifreq"],"kind":"struct"},"11:2420:3951":{"crate_id":11,"path":["hashbrown","table","IntoIter"],"kind":"struct"},"24:5414:3902":{"crate_id":24,"path":["syn","expr","ExprTry"],"kind":"struct"},"16:7549:9378":{"crate_id":16,"path":["gimli","read","pubnames","PubNamesEntryIter"],"kind":"struct"},"17:11825:24079":{"crate_id":17,"path":["object","read","macho","file","MachOFile"],"kind":"struct"},"17:12443:6236":{"crate_id":17,"path":["object","read","pe","resource","ResourceDirectory"],"kind":"struct"},"2:44710:9561":{"crate_id":2,"path":["core","str","IsNotEmpty"],"kind":"struct"},"24:5294:3871":{"crate_id":24,"path":["syn","expr","ExprBinary"],"kind":"struct"},"6:4992:7844":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_condition_effect"],"kind":"struct"},"1:12369:1830":{"crate_id":1,"path":["std","u128"],"kind":"primitive"},"2:30714:4096":{"crate_id":2,"path":["core","ptr","alignment","Alignment"],"kind":"struct"},"21:2706:2587":{"crate_id":21,"path":["proc_macro","Spacing"],"kind":"enum"},"2:39658:210":{"crate_id":2,"path":["core","ops","range","Range"],"kind":"struct"},"24:5670:3920":{"crate_id":24,"path":["syn","lit","LitInt"],"kind":"struct"},"6:4787:7726":{"crate_id":6,"path":["libc","unix","linux_like","linux","glob_t"],"kind":"struct"},"2:22899:8573":{"crate_id":2,"path":["core","num","dec2flt","common","BiasedFp"],"kind":"struct"},"6:7446:8435":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","pthread_attr_t"],"kind":"struct"},"6:8029:8535":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","align","sem_t"],"kind":"struct"},"16:5415:7171":{"crate_id":16,"path":["gimli","read","util","sealed","CapacityFull"],"kind":"struct"},"17:12251:24108":{"crate_id":17,"path":["object","read","pe","section","PeSectionIterator"],"kind":"struct"},"2:32236:7425":{"crate_id":2,"path":["core","convert","Infallible"],"kind":"enum"},"2:4603:4130":{"crate_id":2,"path":["core","cell","once","OnceCell"],"kind":"struct"},"2:2155:5503":{"crate_id":2,"path":["core","ptr","metadata","DynMetadata"],"kind":"struct"},"2:42060:8820":{"crate_id":2,"path":["core","net","socket_addr","SocketAddrV6"],"kind":"struct"},"17:12388:9238":{"crate_id":17,"path":["object","read","pe","import","DelayLoadImportTable"],"kind":"struct"},"24:5303:3888":{"crate_id":24,"path":["syn","expr","ExprBreak"],"kind":"struct"},"20:908:3972":{"crate_id":20,"path":["proc_macro2","Delimiter"],"kind":"enum"},"1:6282:5853":{"crate_id":1,"path":["std","sync","mpmc","list","Channel"],"kind":"struct"},"2:40629:16647":{"crate_id":2,"path":["core","ffi","c_str","FromBytesWithNulErrorKind"],"kind":"enum"},"1:11936:9601":{"crate_id":1,"path":["std","backtrace_rs","backtrace","libunwind","Frame"],"kind":"enum"},"2:40934:4060":{"crate_id":2,"path":["core","iter","adapters","skip_while","SkipWhile"],"kind":"struct"},"24:2279:3948":{"crate_id":24,"path":["syn","punctuated","Pairs"],"kind":"struct"},"24:5406:3880":{"crate_id":24,"path":["syn","expr","ExprStruct"],"kind":"struct"},"17:10350:6153":{"crate_id":17,"path":["object","endian","I64Bytes"],"kind":"struct"},"1:4008:11210":{"crate_id":1,"path":["std","net","udp","UdpSocket"],"kind":"struct"},"16:4882:7161":{"crate_id":16,"path":["gimli","constants","DwDsc"],"kind":"struct"},"5:1739:5769":{"crate_id":5,"path":["alloc","collections","btree","map","drop","DropGuard"],"kind":"struct"},"6:8247:8537":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_mutexattr_t"],"kind":"struct"},"24:4496:4245":{"crate_id":24,"path":["syn","token","EqEq"],"kind":"struct"},"17:10954:23972":{"crate_id":17,"path":["object","read","archive","ArchiveKind"],"kind":"enum"},"16:2323:23008":{"crate_id":16,"path":["gimli","common","Vendor"],"kind":"enum"},"1:7337:5870":{"crate_id":1,"path":["std","sys","thread_local","abort_on_dtor_unwind","DtorUnwindGuard"],"kind":"struct"},"6:4985:7841":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_ramp_effect"],"kind":"struct"},"6:1517:7594":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_in"],"kind":"struct"},"16:5781:7117":{"crate_id":16,"path":["gimli","read","cfi","EhFrame"],"kind":"struct"},"17:13146:6287":{"crate_id":17,"path":["object","archive","AixFileHeader"],"kind":"struct"},"1:6037:5852":{"crate_id":1,"path":["std","sync","lazy_lock","LazyLock"],"kind":"struct"},"2:42458:87":{"crate_id":2,"path":["core","sync","atomic","AtomicI32"],"kind":"struct"},"2:12716:9519":{"crate_id":2,"path":["core","str","iter","MatchIndicesInternal"],"kind":"struct"},"17:12711:137":{"crate_id":17,"path":["object","read","Error"],"kind":"struct"},"2:33673:5998":{"crate_id":2,"path":["core","ops","arith","MulAssign"],"kind":"trait"},"5:4282:5793":{"crate_id":5,"path":["alloc","collections","vec_deque","into_iter","try_rfold","Guard"],"kind":"struct"},"17:13173:6295":{"crate_id":17,"path":["object","archive","AixMemberOffset"],"kind":"struct"},"2:11321:16511":{"crate_id":2,"path":["core","slice","iter","SplitMut"],"kind":"struct"},"5:7492:3951":{"crate_id":5,"path":["alloc","collections","linked_list","IntoIter"],"kind":"struct"},"2:2134:5505":{"crate_id":2,"path":["core","ptr","metadata","Thin"],"kind":"trait_alias"},"24:4822:4268":{"crate_id":24,"path":["syn","token","Shl"],"kind":"struct"},"2:43844:4037":{"crate_id":2,"path":["core","slice","iter","ArrayChunks"],"kind":"struct"},"2:40944:4045":{"crate_id":2,"path":["core","iter","adapters","step_by","StepBy"],"kind":"struct"},"17:13089:6277":{"crate_id":17,"path":["object","archive","Header"],"kind":"struct"},"24:5017:3856":{"crate_id":24,"path":["syn","attr","MetaNameValue"],"kind":"struct"},"2:43870:9447":{"crate_id":2,"path":["core","slice","iter","RChunks"],"kind":"struct"},"16:6543:9327":{"crate_id":16,"path":["gimli","read","aranges","ArangeEntry"],"kind":"struct"},"2:46734:8927":{"crate_id":2,"path":["core","core_arch","simd","m16x16"],"kind":"struct"},"2:42080:194":{"crate_id":2,"path":["core","option","Option"],"kind":"enum"},"14:214:9394":{"crate_id":14,"path":["rustc_demangle","TryDemangleError"],"kind":"struct"},"1:10932:9572":{"crate_id":1,"path":["std","sys","pal","unix","fs","OpenOptions"],"kind":"struct"},"2:45922:8858":{"crate_id":2,"path":["core","core_arch","simd","u8x4"],"kind":"struct"},"2:41279:9489":{"crate_id":2,"path":["core","iter","sources","from_coroutine","FromCoroutine"],"kind":"struct"},"5:1204:37257":{"crate_id":5,"path":["alloc","collections","btree","dedup_sorted_iter","DedupSortedIter"],"kind":"struct"},"24:5997:3938":{"crate_id":24,"path":["syn","ty","TypeParen"],"kind":"struct"},"2:21680:34875":{"crate_id":2,"path":["core","core_simd","swizzle","rotate_elements_right","Rotate"],"kind":"struct"},"11:2566:4008":{"crate_id":11,"path":["hashbrown","TryReserveError"],"kind":"enum"},"1:11853:11210":{"crate_id":1,"path":["std","sys_common","net","UdpSocket"],"kind":"struct"},"20:781:28217":{"crate_id":20,"path":["proc_macro2","extra","DelimSpanEnum"],"kind":"enum"},"24:5707:3921":{"crate_id":24,"path":["syn","mac","MacroDelimiter"],"kind":"enum"},"9:53:10679":{"crate_id":9,"path":["miniz_oxide","inflate","core","DecompressorOxide"],"kind":"struct"},"0:964:2370":{"crate_id":0,"path":["serde_derive","Serialize"],"kind":"proc_derive"},"1:10962:139":{"crate_id":1,"path":["std","sys","pal","unix","fs","FileType"],"kind":"struct"},"5:3648:182":{"crate_id":5,"path":["alloc","collections","linked_list","LinkedList"],"kind":"struct"},"2:7610:3332":{"crate_id":2,"path":["core","iter","adapters","zip","zip"],"kind":"function"},"6:5160:7889":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Shdr"],"kind":"struct"},"6:538:7552":{"crate_id":6,"path":["libc","unix","pollfd"],"kind":"struct"},"11:434:37381":{"crate_id":11,"path":["hashbrown","raw","RawIterHashInner"],"kind":"struct"},"2:44914:207":{"crate_id":2,"path":["core","task","poll","Poll"],"kind":"enum"},"24:5389:3899":{"crate_id":24,"path":["syn","expr","ExprRange"],"kind":"struct"},"17:10997:6163":{"crate_id":17,"path":["object","read","archive","ArchiveFile"],"kind":"struct"},"17:12824:23964":{"crate_id":17,"path":["object","read","SymbolSection"],"kind":"enum"},"1:2485:11141":{"crate_id":1,"path":["std","fs","canonicalize"],"kind":"function"},"16:2808:7108":{"crate_id":16,"path":["gimli","common","DebugTypesOffset"],"kind":"struct"},"17:12887:9245":{"crate_id":17,"path":["object","read","ObjectMap"],"kind":"struct"},"5:4087:5553":{"crate_id":5,"path":["alloc","collections","vec_deque","drain","Drain"],"kind":"struct"},"17:11634:9216":{"crate_id":17,"path":["object","read","elf","version","VerdefIterator"],"kind":"struct"},"1:5851:9569":{"crate_id":1,"path":["std","sync","mpsc","SyncSender"],"kind":"struct"},"2:23274:8603":{"crate_id":2,"path":["core","num","nonzero","private","NonZeroIsizeInner"],"kind":"struct"},"6:5212:7911":{"crate_id":6,"path":["libc","unix","linux_like","linux","genlmsghdr"],"kind":"struct"},"2:13864:115":{"crate_id":2,"path":["core","task","wake","Context"],"kind":"struct"},"17:12318:6230":{"crate_id":17,"path":["object","read","pe","export","Export"],"kind":"struct"},"6:5423:8004":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_sndrcvinfo"],"kind":"struct"},"23:281:2598":{"crate_id":23,"path":["quote","__private","push_lifetime_spanned","Lifetime"],"kind":"struct"},"1:11928:9601":{"crate_id":1,"path":["std","backtrace_rs","backtrace","Frame"],"kind":"struct"},"24:1022:5978":{"crate_id":24,"path":["syn","ext","private","PeekFn"],"kind":"struct"},"1:9403:5862":{"crate_id":1,"path":["std","sync","mutex","MappedMutexGuard"],"kind":"struct"},"1:12350:335":{"crate_id":1,"path":["std","array"],"kind":"primitive"},"5:2220:9410":{"crate_id":5,"path":["alloc","collections","btree","merge_iter","MergeIterInner"],"kind":"struct"},"6:5483:8041":{"crate_id":6,"path":["libc","unix","linux_like","linux","tls_crypto_info"],"kind":"struct"},"6:8006:8522":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","align","max_align_t"],"kind":"struct"},"17:11605:6182":{"crate_id":17,"path":["object","read","elf","version","Version"],"kind":"struct"},"2:10395:4107":{"crate_id":2,"path":["core","fmt","LowerHex"],"kind":"trait"},"17:11497:24009":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdatIterator"],"kind":"struct"},"6:7348:8401":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","siginfo_t"],"kind":"struct"},"1:3559:5793":{"crate_id":1,"path":["std","io","Guard"],"kind":"struct"},"6:6409:8150":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","statx_timestamp"],"kind":"struct"},"16:6342:37441":{"crate_id":16,"path":["gimli","read","dwarf","RangeIterInner"],"kind":"enum"},"5:1570:10700":{"crate_id":5,"path":["alloc","collections","btree","map","IntoValues"],"kind":"struct"},"5:734:250":{"crate_id":5,"path":["alloc","borrow","ToOwned"],"kind":"trait"},"1:9438:162":{"crate_id":1,"path":["std","time","Instant"],"kind":"struct"},"16:7098:9369":{"crate_id":16,"path":["gimli","read","lookup","LookupEntryIter"],"kind":"struct"},"2:4462:109":{"crate_id":2,"path":["core","asserting","Capture"],"kind":"struct"},"24:6008:3940":{"crate_id":24,"path":["syn","ty","TypeReference"],"kind":"struct"},"17:10092:23954":{"crate_id":17,"path":["object","common","SymbolFlags"],"kind":"enum"},"17:13797:6439":{"crate_id":17,"path":["object","macho","MachHeader32"],"kind":"struct"},"11:698:3951":{"crate_id":11,"path":["hashbrown","map","IntoIter"],"kind":"struct"},"2:10358:143":{"crate_id":2,"path":["core","fmt","Formatter"],"kind":"struct"},"2:42196:5476":{"crate_id":2,"path":["core","panicking","AssertKind"],"kind":"enum"},"24:5317:3889":{"crate_id":24,"path":["syn","expr","ExprClosure"],"kind":"struct"},"2:43565:9506":{"crate_id":2,"path":["core","slice","ascii","EscapeAscii"],"kind":"struct"},"17:15206:6789":{"crate_id":17,"path":["object","pe","ImageLinenumber"],"kind":"struct"},"1:12372:1421":{"crate_id":1,"path":["std","reference"],"kind":"primitive"},"24:3019:4277":{"crate_id":24,"path":["syn","token","Underscore"],"kind":"struct"},"6:7485:8452":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user_regs_struct"],"kind":"struct"},"17:16050:6323":{"crate_id":17,"path":["object","xcoff","SectionHeader64"],"kind":"struct"},"1:3065:226":{"crate_id":1,"path":["std","io","error","Result"],"kind":"type_alias"},"1:680:11063":{"crate_id":1,"path":["std","backtrace","BytesOrWide"],"kind":"enum"},"16:7559:9379":{"crate_id":16,"path":["gimli","read","pubtypes","PubTypesEntry"],"kind":"struct"},"2:44694:9557":{"crate_id":2,"path":["core","str","CharEscapeUnicode"],"kind":"struct"},"16:7509:23885":{"crate_id":16,"path":["gimli","read","op","Evaluation"],"kind":"struct"},"2:2709:102":{"crate_id":2,"path":["core","borrow","Borrow"],"kind":"trait"},"17:13252:6313":{"crate_id":17,"path":["object","elf","SectionHeader32"],"kind":"struct"},"6:5083:7883":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Ehdr"],"kind":"struct"},"24:3104:4202":{"crate_id":24,"path":["syn","token","Await"],"kind":"struct"},"21:2456:126":{"crate_id":21,"path":["proc_macro","bridge","Diagnostic"],"kind":"struct"},"16:6353:7181":{"crate_id":16,"path":["gimli","read","endian_slice","EndianSlice"],"kind":"struct"},"6:4870:7787":{"crate_id":6,"path":["libc","unix","linux_like","linux","fsid_t"],"kind":"struct"},"11:854:11074":{"crate_id":11,"path":["hashbrown","map","RawOccupiedEntryMut"],"kind":"struct"},"1:11230:33002":{"crate_id":1,"path":["std","sys","pal","unix","thread","cgroups","Cgroup"],"kind":"enum"},"2:41286:4016":{"crate_id":2,"path":["core","iter","sources","from_fn","FromFn"],"kind":"struct"},"17:13437:6347":{"crate_id":17,"path":["object","elf","ProgramHeader32"],"kind":"struct"},"24:1931:4087":{"crate_id":24,"path":["syn","parse","Nothing"],"kind":"struct"},"17:3473:24068":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbolIterator"],"kind":"struct"},"13:0:3703":{"crate_id":13,"path":["std_detect"],"kind":"module"},"11:123:5760":{"crate_id":11,"path":["hashbrown","raw","RawTable"],"kind":"struct"},"5:2116:11080":{"crate_id":5,"path":["alloc","collections","btree","map","CursorMut"],"kind":"struct"},"5:7750:5552":{"crate_id":5,"path":["alloc","vec","splice","Splice"],"kind":"struct"},"17:11621:9214":{"crate_id":17,"path":["object","read","elf","version","VersionTable"],"kind":"struct"},"16:4062:7145":{"crate_id":16,"path":["gimli","constants","DwTag"],"kind":"struct"},"16:7648:23886":{"crate_id":16,"path":["gimli","read","rnglists","RawRngListIter"],"kind":"struct"},"16:6494:9323":{"crate_id":16,"path":["gimli","read","aranges","ArangeHeaderIter"],"kind":"struct"},"1:8200:9008":{"crate_id":1,"path":["std","fs","FileTimes"],"kind":"struct"},"2:5265:435":{"crate_id":2,"path":["core","ffi","c_void"],"kind":"enum"},"16:3842:7142":{"crate_id":16,"path":["gimli","constants","DwUt"],"kind":"struct"},"2:44354:16535":{"crate_id":2,"path":["core","str","pattern","SearchStep"],"kind":"enum"},"1:1920:5620":{"crate_id":1,"path":["std","env","Args"],"kind":"struct"},"1:12365:1854":{"crate_id":1,"path":["std","u8"],"kind":"primitive"},"16:6079:9248":{"crate_id":16,"path":["gimli","read","cfi","UnwindTableRow"],"kind":"struct"},"16:7604:7129":{"crate_id":16,"path":["gimli","read","rnglists","DebugRngLists"],"kind":"struct"},"17:14599:6584":{"crate_id":17,"path":["object","macho","ScatteredRelocationInfo"],"kind":"struct"},"2:44271:9473":{"crate_id":2,"path":["core","str","iter","EscapeDebug"],"kind":"struct"},"2:39808:8678":{"crate_id":2,"path":["core","array","TryFromSliceError"],"kind":"struct"},"1:8193:9572":{"crate_id":1,"path":["std","fs","OpenOptions"],"kind":"struct"},"17:16176:7060":{"crate_id":17,"path":["object","xcoff","FunAux64"],"kind":"struct"},"17:15646:6922":{"crate_id":17,"path":["object","pe","ImageRuntimeFunctionEntry"],"kind":"struct"},"1:10922:9584":{"crate_id":1,"path":["std","sys","pal","unix","fs","FileAttr"],"kind":"struct"},"2:40772:4040":{"crate_id":2,"path":["core","iter","adapters","copied","Copied"],"kind":"struct"},"24:4409:4240":{"crate_id":24,"path":["syn","token","Dollar"],"kind":"struct"},"6:5477:8040":{"crate_id":6,"path":["libc","unix","linux_like","linux","rlimit64"],"kind":"struct"},"17:10524:23955":{"crate_id":17,"path":["object","read","any","SegmentIterator"],"kind":"struct"},"17:15342:6822":{"crate_id":17,"path":["object","pe","ImageDelayloadDescriptor"],"kind":"struct"},"2:12981:16520":{"crate_id":2,"path":["core","str","pattern","DoubleEndedSearcher"],"kind":"trait"},"18:563:6029":{"crate_id":18,"path":["memchr","memmem","rarebytes","RareNeedleBytes"],"kind":"struct"},"17:10710:23958":{"crate_id":17,"path":["object","read","any","ComdatSectionIterator"],"kind":"struct"},"1:11832:11208":{"crate_id":1,"path":["std","sys_common","net","TcpListener"],"kind":"struct"},"1:12364:886":{"crate_id":1,"path":["std","i128"],"kind":"primitive"},"17:13723:6421":{"crate_id":17,"path":["object","macho","DyldCacheMappingInfo"],"kind":"struct"},"5:6421:11451":{"crate_id":5,"path":["alloc","task","Wake"],"kind":"trait"},"2:11359:16517":{"crate_id":2,"path":["core","slice","iter","SplitInclusiveMut"],"kind":"struct"},"6:6379:8125":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","statx"],"kind":"struct"},"1:974:11074":{"crate_id":1,"path":["std","collections","hash","map","RawOccupiedEntryMut"],"kind":"struct"},"17:11256:9209":{"crate_id":17,"path":["object","read","coff","import","ImportFile"],"kind":"struct"},"24:95:11154":{"crate_id":24,"path":["syn","token","private","Sealed"],"kind":"trait"},"17:13674:6396":{"crate_id":17,"path":["object","macho","DyldCacheHeader"],"kind":"struct"},"5:3805:4088":{"crate_id":5,"path":["alloc","collections","linked_list","Cursor"],"kind":"struct"},"2:44968:35418":{"crate_id":2,"path":["core","task","wake","ExtData"],"kind":"enum"},"2:46689:8926":{"crate_id":2,"path":["core","core_arch","simd","m8x32"],"kind":"struct"},"2:39546:16546":{"crate_id":2,"path":["core","ops","control_flow","ControlFlow"],"kind":"enum"},"1:915:9404":{"crate_id":1,"path":["std","collections","hash","map","Values"],"kind":"struct"},"1:8350:10713":{"crate_id":1,"path":["std","io","error","Custom"],"kind":"struct"},"1:10426:11309":{"crate_id":1,"path":["std","sys","pal","unix","pipe","AnonPipe"],"kind":"struct"},"24:1053:37717":{"crate_id":24,"path":["syn","generics","Lifetimes"],"kind":"struct"},"24:3852:4229":{"crate_id":24,"path":["syn","token","Virtual"],"kind":"struct"},"16:7144:23883":{"crate_id":16,"path":["gimli","read","op","DieReference"],"kind":"enum"},"6:5598:8082":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_ifr_ifru"],"kind":"union"},"17:16235:7071":{"crate_id":17,"path":["object","xcoff","DwarfAux32"],"kind":"struct"},"1:8779:8836":{"crate_id":1,"path":["std","path","State"],"kind":"enum"},"2:5981:5793":{"crate_id":2,"path":["core","iter","adapters","filter","next_chunk","Guard"],"kind":"struct"},"2:40721:4037":{"crate_id":2,"path":["core","iter","adapters","array_chunks","ArrayChunks"],"kind":"struct"},"2:10401:4105":{"crate_id":2,"path":["core","fmt","LowerExp"],"kind":"trait"},"17:11075:6165":{"crate_id":17,"path":["object","read","coff","section","SectionTable"],"kind":"struct"},"1:6922:233":{"crate_id":1,"path":["std","sync","rwlock","RwLock"],"kind":"struct"},"2:43306:9499":{"crate_id":2,"path":["core","hash","sip","SipHasher13"],"kind":"struct"},"16:5927:9270":{"crate_id":16,"path":["gimli","read","cfi","CommonInformationEntry"],"kind":"struct"},"24:306:37704":{"crate_id":24,"path":["syn","bigint","BigInt"],"kind":"struct"},"2:10759:5829":{"crate_id":2,"path":["core","slice","sort","InsertionHole"],"kind":"struct"},"2:44690:9556":{"crate_id":2,"path":["core","str","CharEscapeDebugContinue"],"kind":"struct"},"5:7066:264":{"crate_id":5,"path":["alloc","vec","Vec"],"kind":"struct"},"5:5234:5799":{"crate_id":5,"path":["alloc","rc","Weak"],"kind":"struct"},"6:5344:7967":{"crate_id":6,"path":["libc","unix","linux_like","linux","seccomp_notif_resp"],"kind":"struct"},"6:6678:8285":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ptrace_syscall_info"],"kind":"struct"},"1:894:3951":{"crate_id":1,"path":["std","collections","hash","map","IntoIter"],"kind":"struct"},"17:13046:6273":{"crate_id":17,"path":["object","read","CompressedFileRange"],"kind":"struct"},"6:5588:8077":{"crate_id":6,"path":["libc","unix","linux_like","linux","mq_attr"],"kind":"struct"},"2:4730:4111":{"crate_id":2,"path":["core","cell","BorrowMutError"],"kind":"struct"},"24:6025:3929":{"crate_id":24,"path":["syn","ty","BareFnArg"],"kind":"struct"},"2:23153:8592":{"crate_id":2,"path":["core","num","nonzero","private","NonZeroU8Inner"],"kind":"struct"},"7:0:1904":{"crate_id":7,"path":["unwind"],"kind":"module"},"17:9737:23929":{"crate_id":17,"path":["object","common","SubArchitecture"],"kind":"enum"},"2:40600:8806":{"crate_id":2,"path":["core","char","TryFromCharError"],"kind":"struct"},"1:8263:10594":{"crate_id":1,"path":["std","io","buffered","IntoInnerError"],"kind":"struct"},"11:1023:11077":{"crate_id":11,"path":["hashbrown","map","OccupiedEntry"],"kind":"struct"},"17:13972:6191":{"crate_id":17,"path":["object","macho","Dylib"],"kind":"struct"},"20:883:2588":{"crate_id":20,"path":["proc_macro2","Span"],"kind":"struct"},"6:7516:8478":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user"],"kind":"struct"},"17:10018:23931":{"crate_id":17,"path":["object","common","FileFlags"],"kind":"enum"},"17:2037:24015":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbolIterator"],"kind":"struct"},"6:8341:8558":{"crate_id":6,"path":["libc","unix","linux_like","linux","non_exhaustive","open_how"],"kind":"struct"},"2:21913:11154":{"crate_id":2,"path":["core","core_simd","masks","sealed","Sealed"],"kind":"trait"},"1:527:5325":{"crate_id":1,"path":["std","thread","PanicGuard"],"kind":"struct"},"24:5426:3881":{"crate_id":24,"path":["syn","expr","ExprUnary"],"kind":"struct"},"16:4587:7152":{"crate_id":16,"path":["gimli","constants","DwAccess"],"kind":"struct"},"24:3665:3253":{"crate_id":24,"path":["syn","token","Static"],"kind":"struct"},"2:40656:3494":{"crate_id":2,"path":["core","ffi","c_str","Bytes"],"kind":"struct"},"6:6756:8314":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_statistics_v1"],"kind":"struct"},"2:40895:4057":{"crate_id":2,"path":["core","iter","adapters","rev","Rev"],"kind":"struct"},"24:4870:4272":{"crate_id":24,"path":["syn","token","Slash"],"kind":"struct"},"17:11443:6178":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbolTable"],"kind":"struct"},"6:7412:8429":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statfs64"],"kind":"struct"},"17:15473:6859":{"crate_id":17,"path":["object","pe","ImageLoadConfigDirectory32"],"kind":"struct"},"18:718:6042":{"crate_id":18,"path":["memchr","memmem","NeedleInfo"],"kind":"struct"},"11:396:5764":{"crate_id":11,"path":["hashbrown","raw","RawDrain"],"kind":"struct"},"1:0:1716":{"crate_id":1,"path":["std"],"kind":"module"},"5:6619:5769":{"crate_id":5,"path":["alloc","vec","drain","drop","DropGuard"],"kind":"struct"},"2:2801:195":{"crate_id":2,"path":["core","cmp","Ord"],"kind":"trait"},"14:187:22952":{"crate_id":14,"path":["rustc_demangle","SizeLimitedFmtAdapter"],"kind":"struct"},"2:47136:8968":{"crate_id":2,"path":["core","core_arch","simd","u64x8"],"kind":"struct"},"4:0:3704":{"crate_id":4,"path":["rustc_std_workspace_core"],"kind":"module"},"17:16121:7044":{"crate_id":17,"path":["object","xcoff","FileAux64"],"kind":"struct"},"24:3121:4203":{"crate_id":24,"path":["syn","token","Become"],"kind":"struct"},"2:39698:215":{"crate_id":2,"path":["core","ops","range","RangeTo"],"kind":"struct"},"2:22986:8579":{"crate_id":2,"path":["core","num","flt2dec","decoder","Decoded"],"kind":"struct"},"17:15039:6751":{"crate_id":17,"path":["object","pe","AnonObjectHeaderBigobj"],"kind":"struct"},"16:6398:7112":{"crate_id":16,"path":["gimli","read","abbrev","DebugAbbrev"],"kind":"struct"},"5:7139:5818":{"crate_id":5,"path":["alloc","vec","dedup_by","FillGapOnDrop"],"kind":"struct"},"24:5299:3887":{"crate_id":24,"path":["syn","expr","ExprBlock"],"kind":"struct"},"24:5668:3918":{"crate_id":24,"path":["syn","lit","LitChar"],"kind":"struct"},"17:13922:6459":{"crate_id":17,"path":["object","macho","Section64"],"kind":"struct"},"2:46039:8871":{"crate_id":2,"path":["core","core_arch","simd","u64x1"],"kind":"struct"},"2:42108:3952":{"crate_id":2,"path":["core","option","Iter"],"kind":"struct"},"5:7114:5815":{"crate_id":5,"path":["alloc","vec","retain_mut","BackshiftOnDrop"],"kind":"struct"},"2:43059:8834":{"crate_id":2,"path":["core","fmt","rt","Count"],"kind":"enum"},"2:34471:4268":{"crate_id":2,"path":["core","ops","bit","Shl"],"kind":"trait"},"24:5355:3896":{"crate_id":24,"path":["syn","expr","ExprLet"],"kind":"struct"},"17:13526:6369":{"crate_id":17,"path":["object","elf","Verdaux"],"kind":"struct"},"2:39630:9465":{"crate_id":2,"path":["core","ops","index_range","IndexRange"],"kind":"struct"},"2:12074:5501":{"crate_id":2,"path":["core","slice","raw","from_raw_parts"],"kind":"function"},"21:591:4140":{"crate_id":21,"path":["proc_macro","diagnostic","MultiSpan"],"kind":"trait"}},"external_crates":{"23":{"name":"quote","html_root_url":"https://docs.rs/quote/1.0.36/"},"20":{"name":"proc_macro2","html_root_url":"https://docs.rs/proc-macro2/1.0.82/"},"17":{"name":"object","html_root_url":"https://doc.rust-lang.org/nightly/"},"14":{"name":"rustc_demangle","html_root_url":"https://doc.rust-lang.org/nightly/"},"11":{"name":"hashbrown","html_root_url":"https://doc.rust-lang.org/nightly/"},"8":{"name":"cfg_if","html_root_url":"https://docs.rs/cfg-if/"},"5":{"name":"alloc","html_root_url":"https://doc.rust-lang.org/nightly/"},"2":{"name":"core","html_root_url":"https://doc.rust-lang.org/nightly/"},"22":{"name":"unicode_ident","html_root_url":"https://docs.rs/unicode-ident/1.0.12/"},"19":{"name":"panic_unwind","html_root_url":"https://doc.rust-lang.org/nightly/"},"16":{"name":"gimli","html_root_url":"https://doc.rust-lang.org/nightly/"},"13":{"name":"std_detect","html_root_url":"https://doc.rust-lang.org/nightly/"},"10":{"name":"adler","html_root_url":"https://docs.rs/adler/1.0.2/"},"7":{"name":"unwind","html_root_url":"https://doc.rust-lang.org/nightly/"},"4":{"name":"rustc_std_workspace_core","html_root_url":"https://doc.rust-lang.org/nightly/"},"1":{"name":"std","html_root_url":"https://doc.rust-lang.org/nightly/"},"24":{"name":"syn","html_root_url":"https://docs.rs/syn/2.0.64/"},"21":{"name":"proc_macro","html_root_url":"https://doc.rust-lang.org/nightly/"},"18":{"name":"memchr","html_root_url":"https://doc.rust-lang.org/nightly/"},"15":{"name":"addr2line","html_root_url":"https://doc.rust-lang.org/nightly/"},"12":{"name":"rustc_std_workspace_alloc","html_root_url":"https://doc.rust-lang.org/nightly/"},"9":{"name":"miniz_oxide","html_root_url":"https://doc.rust-lang.org/nightly/"},"6":{"name":"libc","html_root_url":"https://doc.rust-lang.org/nightly/"},"3":{"name":"compiler_builtins","html_root_url":"https://doc.rust-lang.org/nightly/"}},"format_version":29}