{"root":"0:0:1646","crate_version":"1.0.152","includes_private":false,"index":{"2:11342:62888":{"id":"2:11342:62888","crate_id":2,"name":"slice_unchecked","span":null,"visibility":"public","docs":"Creates a string slice from another string slice, bypassing safety\nchecks.\n\nThis is generally not recommended, use with caution! For a safe\nalternative see [`str`] and [`Index`].\n\n[`Index`]: crate::ops::Index\n\nThis new slice goes from `begin` to `end`, including `begin` but\nexcluding `end`.\n\nTo get a mutable string slice instead, see the\n[`slice_mut_unchecked`] method.\n\n[`slice_mut_unchecked`]: str::slice_mut_unchecked\n\n# Safety\n\nCallers of this function are responsible that three preconditions are\nsatisfied:\n\n* `begin` must not exceed `end`.\n* `begin` and `end` must be byte positions within the string slice.\n* `begin` and `end` must lie on UTF-8 sequence boundaries.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\n\nunsafe {\n    assert_eq!(\"Löwe 老虎 Léopard\", s.slice_unchecked(0, 21));\n}\n\nlet s = \"Hello, world!\";\n\nunsafe {\n    assert_eq!(\"world\", s.slice_unchecked(7, 12));\n}\n```","links":{"str::slice_mut_unchecked":"2:11343:62889","`str`":"1:12380:2996","crate::ops::Index":"2:2979:2247"},"attrs":["#[deprecated(since = \"1.29.0\", note =\n\"use `get_unchecked(begin..end)` instead\")]","#[must_use]"],"deprecation":{"since":"1.29.0","note":"use `get_unchecked(begin..end)` instead"},"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["begin",{"kind":"primitive","inner":"usize"}],["end",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}},"2:11347:2291":{"id":"2:11347:2291","crate_id":2,"name":"char_indices","span":null,"visibility":"public","docs":"Returns an iterator over the [`char`]s of a string slice, and their\npositions.\n\nAs a string slice consists of valid UTF-8, we can iterate through a\nstring slice by [`char`]. This method returns an iterator of both\nthese [`char`]s, as well as their byte positions.\n\nThe iterator yields tuples. The position is first, the [`char`] is\nsecond.\n\n# Examples\n\nBasic usage:\n\n```\nlet word = \"goodbye\";\n\nlet count = word.char_indices().count();\nassert_eq!(7, count);\n\nlet mut char_indices = word.char_indices();\n\nassert_eq!(Some((0, 'g')), char_indices.next());\nassert_eq!(Some((1, 'o')), char_indices.next());\nassert_eq!(Some((2, 'o')), char_indices.next());\nassert_eq!(Some((3, 'd')), char_indices.next());\nassert_eq!(Some((4, 'b')), char_indices.next());\nassert_eq!(Some((5, 'y')), char_indices.next());\nassert_eq!(Some((6, 'e')), char_indices.next());\n\nassert_eq!(None, char_indices.next());\n```\n\nRemember, [`char`]s might not match your intuition about characters:\n\n[`char`]: prim@char\n\n```\nlet yes = \"y̆es\";\n\nlet mut char_indices = yes.char_indices();\n\nassert_eq!(Some((0, 'y')), char_indices.next()); // not (0, 'y̆')\nassert_eq!(Some((1, '\\u{0306}')), char_indices.next());\n\n// note the 3 here - the last character took up two bytes\nassert_eq!(Some((3, 'e')), char_indices.next());\nassert_eq!(Some((4, 's')), char_indices.next());\n\nassert_eq!(None, char_indices.next());\n```","links":{"prim@char":"1:12374:2991"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"CharIndices","id":"2:49978:5420","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11344:56772":{"id":"2:11344:56772","crate_id":2,"name":"split_at","span":null,"visibility":"public","docs":"Divide one string slice into two at an index.\n\nThe argument, `mid`, should be a byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get mutable string slices instead, see the [`split_at_mut`]\nmethod.\n\n[`split_at_mut`]: str::split_at_mut\n\n# Panics\n\nPanics if `mid` is not on a UTF-8 code point boundary, or if it is\npast the end of the last code point of the string slice.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"Per Martin-Löf\";\n\nlet (first, last) = s.split_at(3);\n\nassert_eq!(\"Per\", first);\nassert_eq!(\" Martin-Löf\", last);\n```","links":{"str::split_at_mut":"2:11345:56773"},"attrs":["#[must_use]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["mid",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"tuple","inner":[{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11334:1859":{"id":"2:11334:1859","crate_id":2,"name":"get","span":null,"visibility":"public","docs":"Returns a subslice of `str`.\n\nThis is the non-panicking alternative to indexing the `str`. Returns\n[`None`] whenever equivalent indexing operation would panic.\n\n# Examples\n\n```\nlet v = String::from(\"🗻∈🌏\");\n\nassert_eq!(Some(\"🗻\"), v.get(0..4));\n\n// indices not on UTF-8 sequence boundaries\nassert!(v.get(1..).is_none());\nassert!(v.get(..8).is_none());\n\n// out of bounds\nassert!(v.get(..42).is_none());\n```","links":{"`None`":"2:48036:174"},"attrs":["#[rustc_const_unstable(feature = \"const_slice_index\", issue = \"none\")]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["i",{"kind":"generic","inner":"I"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:48034:176","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"qualified_path","inner":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"I"},"trait":{"name":"SliceIndex","id":"2:9120:217","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}}}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"2:9120:217","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11327:62886":{"id":"2:11327:62886","crate_id":2,"name":"ceil_char_boundary","span":null,"visibility":"public","docs":"Finds the closest `x` not below `index` where `is_char_boundary(x)` is `true`.\n\nThis method is the natural complement to [`floor_char_boundary`]. See that method\nfor more details.\n\n[`floor_char_boundary`]: str::floor_char_boundary\n\n# Panics\n\nPanics if `index > self.len()`.\n\n# Examples\n\n```\n#![feature(round_char_boundary)]\nlet s = \"❤️🧡💛💚💙💜\";\nassert_eq!(s.len(), 26);\nassert!(!s.is_char_boundary(13));\n\nlet closest = s.ceil_char_boundary(13);\nassert_eq!(closest, 14);\nassert_eq!(&s[..closest], \"❤️🧡💛\");\n```","links":{"str::floor_char_boundary":"2:11325:62885"},"attrs":["#[unstable(feature = \"round_char_boundary\", issue = \"93743\")]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["index",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"primitive","inner":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"5:5095:1996":{"id":"5:5095:1996","crate_id":5,"name":"replace","span":null,"visibility":"public","docs":"Replaces all matches of a pattern with another string.\n\n`replace` creates a new [`String`], and copies the data from this string slice into it.\nWhile doing so, it attempts to find matches of a pattern. If it finds any, it\nreplaces them with the replacement string slice.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"this is old\";\n\nassert_eq!(\"this is new\", s.replace(\"old\", \"new\"));\nassert_eq!(\"than an old\", s.replace(\"is\", \"an\"));\n```\n\nWhen the pattern doesn't match:\n\n```\nlet s = \"this is old\";\nassert_eq!(s, s.replace(\"cookie monster\", \"little lamb\"));\n```","links":{"`String`":"5:6980:219"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the replaced string as a new allocation, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["from",{"kind":"generic","inner":"P"}],["to",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:6980:219","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11028:5227","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11336:56747":{"id":"2:11336:56747","crate_id":2,"name":"get_mut","span":null,"visibility":"public","docs":"Returns a mutable subslice of `str`.\n\nThis is the non-panicking alternative to indexing the `str`. Returns\n[`None`] whenever equivalent indexing operation would panic.\n\n# Examples\n\n```\nlet mut v = String::from(\"hello\");\n// correct length\nassert!(v.get_mut(0..5).is_some());\n// out of bounds\nassert!(v.get_mut(..42).is_none());\nassert_eq!(Some(\"he\"), v.get_mut(0..2).map(|v| &*v));\n\nassert_eq!(\"hello\", v);\n{\n    let s = v.get_mut(0..2);\n    let s = s.map(|s| {\n        s.make_ascii_uppercase();\n        &*s\n    });\n    assert_eq!(Some(\"HE\"), s);\n}\nassert_eq!(\"HEllo\", v);\n```","links":{"`None`":"2:48036:174"},"attrs":["#[rustc_const_unstable(feature = \"const_slice_index\", issue = \"none\")]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["i",{"kind":"generic","inner":"I"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:48034:176","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"qualified_path","inner":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"I"},"trait":{"name":"SliceIndex","id":"2:9120:217","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}}}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"2:9120:217","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:343":{"id":"0:343","crate_id":0,"name":null,"span":{"filename":"src/internals/mod.rs","begin":[5,0],"end":[5,25]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"import","inner":{"source":"self::ctxt::Ctxt","name":"Ctxt","id":"0:971:1747","glob":false}},"2:11331:62887":{"id":"2:11331:62887","crate_id":2,"name":"as_bytes_mut","span":null,"visibility":"public","docs":"Converts a mutable string slice to a mutable byte slice.\n\n# Safety\n\nThe caller must ensure that the content of the slice is valid UTF-8\nbefore the borrow ends and the underlying `str` is used.\n\nUse of a `str` whose contents are not valid UTF-8 is undefined behavior.\n\n# Examples\n\nBasic usage:\n\n```\nlet mut s = String::from(\"Hello\");\nlet bytes = unsafe { s.as_bytes_mut() };\n\nassert_eq!(b\"Hello\", bytes);\n```\n\nMutability:\n\n```\nlet mut s = String::from(\"🗻∈🌏\");\n\nunsafe {\n    let bytes = s.as_bytes_mut();\n\n    bytes[0] = 0xF0;\n    bytes[1] = 0x9F;\n    bytes[2] = 0x8D;\n    bytes[3] = 0x94;\n}\n\nassert_eq!(\"🍔∈🌏\", s);\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"slice","inner":{"kind":"primitive","inner":"u8"}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}},"2:11421:62904":{"id":"2:11421:62904","crate_id":2,"name":"trim_start_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. `start` in this context means the first\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be left side, and for right-to-left languages like\nArabic or Hebrew, this will be the right side.\n\n# Examples\n\nBasic usage:\n\n```\nassert_eq!(\"11foo1bar11\".trim_start_matches('1'), \"foo1bar11\");\nassert_eq!(\"123foo1bar123\".trim_start_matches(char::is_numeric), \"foo1bar123\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_start_matches(x), \"foo1bar12\");\n```","links":{"prim@char":"1:12374:2991","self::pattern":"2:11023:5226"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11028:5227","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11427:56792":{"id":"2:11427:56792","crate_id":2,"name":"strip_suffix","span":null,"visibility":"public","docs":"Returns a string slice with the suffix removed.\n\nIf the string ends with the pattern `suffix`, returns the substring before the suffix,\nwrapped in `Some`.  Unlike `trim_end_matches`, this method removes the suffix exactly once.\n\nIf the string does not end with `suffix`, returns `None`.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nassert_eq!(\"bar:foo\".strip_suffix(\":foo\"), Some(\"bar\"));\nassert_eq!(\"bar:foo\".strip_suffix(\"bar\"), None);\nassert_eq!(\"foofoo\".strip_suffix(\"foo\"), Some(\"foo\"));\n```","links":{"prim@char":"1:12374:2991","self::pattern":"2:11023:5226"},"attrs":["#[must_use =\n\"this returns the remaining substring as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["suffix",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:48034:176","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11028:5227","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"2:11028:5227","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11043:5230","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:0:1646":{"id":"0:0:1646","crate_id":0,"name":"serde_derive","span":{"filename":"src/lib.rs","begin":[1,0],"end":[109,1]},"visibility":"public","docs":"This crate provides Serde's two derive macros.\n\n```edition2018\n# use serde_derive::{Serialize, Deserialize};\n#\n#[derive(Serialize, Deserialize)]\n# struct S;\n#\n# fn main() {}\n```\n\nPlease refer to [https://serde.rs/derive.html] for how to set this up.\n\n[https://serde.rs/derive.html]: https://serde.rs/derive.html","links":{},"attrs":["#![doc(html_root_url = \"https://docs.rs/serde_derive/1.0.152\")]","#![allow(unknown_lints, bare_trait_objects)]","#![allow(clippy :: branches_sharing_code, clippy :: cognitive_complexity,\nclippy :: collapsible_match, clippy :: derive_partial_eq_without_eq, clippy ::\nenum_variant_names, clippy :: manual_map, clippy :: match_like_matches_macro,\nclippy :: needless_pass_by_value, clippy :: too_many_arguments, clippy ::\ntrivially_copy_pass_by_ref, clippy :: used_underscore_binding, clippy ::\nwildcard_in_or_patterns, clippy :: unnested_or_patterns,)]","#![allow(clippy :: cast_possible_truncation, clippy :: checked_conversions,\nclippy :: doc_markdown, clippy :: enum_glob_use, clippy :: indexing_slicing,\nclippy :: items_after_statements, clippy :: manual_assert, clippy ::\nmap_err_ignore, clippy :: match_same_arms, clippy ::\nmatch_wildcard_for_single_variants, clippy :: module_name_repetitions, clippy\n:: must_use_candidate, clippy :: option_if_let_else, clippy :: similar_names,\nclippy :: single_match_else, clippy :: struct_excessive_bools, clippy ::\ntoo_many_lines, clippy :: unseparated_literal_suffix, clippy :: unused_self,\nclippy :: use_self, clippy :: wildcard_imports)]"],"deprecation":null,"kind":"module","inner":{"is_crate":true,"items":["0:946:1631","0:947:1640"],"is_stripped":false}},"0:946:1631":{"id":"0:946:1631","crate_id":0,"name":"Serialize","span":{"filename":"src/lib.rs","begin":[91,0],"end":[96,1]},"visibility":"public","docs":null,"links":{},"attrs":["#[proc_macro_derive(Serialize, attributes(serde))]"],"deprecation":null,"kind":"proc_macro","inner":{"kind":"derive","helpers":["serde"]}},"2:11392:62893":{"id":"2:11392:62893","crate_id":2,"name":"split_once","span":null,"visibility":"public","docs":"Splits the string on the first occurrence of the specified delimiter and\nreturns prefix before delimiter and suffix after delimiter.\n\n# Examples\n\n```\nassert_eq!(\"cfg\".split_once('='), None);\nassert_eq!(\"cfg=\".split_once('='), Some((\"cfg\", \"\")));\nassert_eq!(\"cfg=foo\".split_once('='), Some((\"cfg\", \"foo\")));\nassert_eq!(\"cfg=foo=bar\".split_once('='), Some((\"cfg\", \"foo=bar\")));\n```","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["delimiter",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:48034:176","args":{"angle_bracketed":{"args":[{"type":{"kind":"tuple","inner":[{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}},{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11028:5227","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:947:1640":{"id":"0:947:1640","crate_id":0,"name":"Deserialize","span":{"filename":"src/lib.rs","begin":[99,0],"end":[104,1]},"visibility":"public","docs":null,"links":{},"attrs":["#[proc_macro_derive(Deserialize, attributes(serde))]"],"deprecation":null,"kind":"proc_macro","inner":{"kind":"derive","helpers":["serde"]}},"5:5093":{"id":"5:5093","crate_id":5,"name":null,"span":null,"visibility":{"restricted":{"parent":"5:5004:1349","path":"::str"}},"docs":"Methods for string slices.","links":{},"attrs":["#[cfg(not(test))]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"kind":"primitive","inner":"str"},"items":["5:5094:63540","5:5095:1996","5:5098:63541","5:5101:63542","5:5109:63543","5:5110:63544","5:5111:4721","5:5112:2288","5:5113:2287"],"negative":false,"synthetic":false,"blanket_impl":null}},"2:11395:62894":{"id":"2:11395:62894","crate_id":2,"name":"rsplit_once","span":null,"visibility":"public","docs":"Splits the string on the last occurrence of the specified delimiter and\nreturns prefix before delimiter and suffix after delimiter.\n\n# Examples\n\n```\nassert_eq!(\"cfg\".rsplit_once('='), None);\nassert_eq!(\"cfg=foo\".rsplit_once('='), Some((\"cfg\", \"foo\")));\nassert_eq!(\"cfg=foo=bar\".rsplit_once('='), Some((\"cfg=foo\", \"bar\")));\n```","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["delimiter",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:48034:176","args":{"angle_bracketed":{"args":[{"type":{"kind":"tuple","inner":[{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}},{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11028:5227","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"2:11028:5227","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11043:5230","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11323:2073":{"id":"2:11323:2073","crate_id":2,"name":"is_empty","span":null,"visibility":"public","docs":"Returns `true` if `self` has a length of zero bytes.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\";\nassert!(s.is_empty());\n\nlet s = \"not empty\";\nassert!(!s.is_empty());\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11447:3359":{"id":"2:11447:3359","crate_id":2,"name":"escape_default","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_default`].\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"❤\\n!\".escape_default() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"❤\\n!\".escape_default());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"\\\\u{{2764}}\\\\n!\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"❤\\n!\".escape_default().to_string(), \"\\\\u{2764}\\\\n!\");\n```","links":{"`char::escape_default`":"2:4460:3359"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"EscapeDefault","id":"2:50310:3360","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11350:62119":{"id":"2:11350:62119","crate_id":2,"name":"split_ascii_whitespace","span":null,"visibility":"public","docs":"Splits a string slice by ASCII whitespace.\n\nThe iterator returned will return string slices that are sub-slices of\nthe original string slice, separated by any amount of ASCII whitespace.\n\nTo split by Unicode `Whitespace` instead, use [`split_whitespace`].\n\n[`split_whitespace`]: str::split_whitespace\n\n# Examples\n\nBasic usage:\n\n```\nlet mut iter = \"A few words\".split_ascii_whitespace();\n\nassert_eq!(Some(\"A\"), iter.next());\nassert_eq!(Some(\"few\"), iter.next());\nassert_eq!(Some(\"words\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nAll kinds of ASCII whitespace are considered:\n\n```\nlet mut iter = \" Mary   had\\ta little  \\n\\t lamb\".split_ascii_whitespace();\nassert_eq!(Some(\"Mary\"), iter.next());\nassert_eq!(Some(\"had\"), iter.next());\nassert_eq!(Some(\"a\"), iter.next());\nassert_eq!(Some(\"little\"), iter.next());\nassert_eq!(Some(\"lamb\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nIf the string is empty or all ASCII whitespace, the iterator yields no string slices:\n```\nassert_eq!(\"\".split_ascii_whitespace().next(), None);\nassert_eq!(\"   \".split_ascii_whitespace().next(), None);\n```","links":{"str::split_whitespace":"2:11349:62122"},"attrs":["#[must_use =\n\"this returns the split string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"SplitAsciiWhitespace","id":"2:50285:5435","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11380:62891":{"id":"2:11380:62891","crate_id":2,"name":"split_terminator","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by\ncharacters matched by a pattern.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\nEquivalent to [`split`], except that the trailing substring\nis skipped if empty.\n\n[`split`]: str::split\n\nThis method can be used for string data that is _terminated_,\nrather than _separated_ by a pattern.\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rsplit_terminator`] method can be used.\n\n[`rsplit_terminator`]: str::rsplit_terminator\n\n# Examples\n\nBasic usage:\n\n```\nlet v: Vec<&str> = \"A.B.\".split_terminator('.').collect();\nassert_eq!(v, [\"A\", \"B\"]);\n\nlet v: Vec<&str> = \"A..B..\".split_terminator(\".\").collect();\nassert_eq!(v, [\"A\", \"\", \"B\", \"\"]);\n\nlet v: Vec<&str> = \"A.B:C.D\".split_terminator(&['.', ':'][..]).collect();\nassert_eq!(v, [\"A\", \"B\", \"C\", \"D\"]);\n```","links":{"self::pattern":"2:11023:5226","str::rsplit_terminator":"2:11383:62892","prim@char":"1:12374:2991","str::split":"2:11371:56780","`DoubleEndedIterator`":"2:7063:119"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"SplitTerminator","id":"2:50052:5424","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11028:5227","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11424:56616":{"id":"2:11424:56616","crate_id":2,"name":"strip_prefix","span":null,"visibility":"public","docs":"Returns a string slice with the prefix removed.\n\nIf the string starts with the pattern `prefix`, returns substring after the prefix, wrapped\nin `Some`.  Unlike `trim_start_matches`, this method removes the prefix exactly once.\n\nIf the string does not start with `prefix`, returns `None`.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nassert_eq!(\"foo:bar\".strip_prefix(\"foo:\"), Some(\"bar\"));\nassert_eq!(\"foo:bar\".strip_prefix(\"bar\"), None);\nassert_eq!(\"foofoo\".strip_prefix(\"foo\"), Some(\"foo\"));\n```","links":{"prim@char":"1:12374:2991","self::pattern":"2:11023:5226"},"attrs":["#[must_use =\n\"this returns the remaining substring as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["prefix",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:48034:176","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11028:5227","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11348:5628":{"id":"2:11348:5628","crate_id":2,"name":"bytes","span":null,"visibility":"public","docs":"An iterator over the bytes of a string slice.\n\nAs a string slice consists of a sequence of bytes, we can iterate\nthrough a string slice by byte. This method returns such an iterator.\n\n# Examples\n\nBasic usage:\n\n```\nlet mut bytes = \"bors\".bytes();\n\nassert_eq!(Some(b'b'), bytes.next());\nassert_eq!(Some(b'o'), bytes.next());\nassert_eq!(Some(b'r'), bytes.next());\nassert_eq!(Some(b's'), bytes.next());\n\nassert_eq!(None, bytes.next());\n```","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Bytes","id":"2:49988:2742","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:90":{"id":"0:90","crate_id":0,"name":null,"span":{"filename":"src/internals/attr.rs","begin":[23,0],"end":[23,36]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"import","inner":{"source":"internals::case::RenameRule","name":"RenameRule","id":"0:975:1844","glob":false}},"2:11407:62897":{"id":"2:11407:62897","crate_id":2,"name":"rmatch_indices","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within `self`,\nyielded in reverse order along with the index of the match.\n\nFor matches of `pat` within `self` that overlap, only the indices\ncorresponding to the last match are returned.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`match_indices`] method can be used.\n\n[`match_indices`]: str::match_indices\n\n# Examples\n\nBasic usage:\n\n```\nlet v: Vec<_> = \"abcXXXabcYYYabc\".rmatch_indices(\"abc\").collect();\nassert_eq!(v, [(12, \"abc\"), (6, \"abc\"), (0, \"abc\")]);\n\nlet v: Vec<_> = \"1abcabc2\".rmatch_indices(\"abc\").collect();\nassert_eq!(v, [(4, \"abc\"), (1, \"abc\")]);\n\nlet v: Vec<_> = \"ababa\".rmatch_indices(\"aba\").collect();\nassert_eq!(v, [(2, \"aba\")]); // only the last `aba`\n```","links":{"self::pattern":"2:11023:5226","prim@char":"1:12374:2991","str::match_indices":"2:11404:62896","`DoubleEndedIterator`":"2:7063:119"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"RMatchIndices","id":"2:50170:5429","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11028:5227","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"2:11028:5227","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11043:5230","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11433:1878":{"id":"2:11433:1878","crate_id":2,"name":"trim_left_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. 'Left' in this context means the first\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _right_ side, not the left.\n\n# Examples\n\nBasic usage:\n\n```\nassert_eq!(\"11foo1bar11\".trim_left_matches('1'), \"foo1bar11\");\nassert_eq!(\"123foo1bar123\".trim_left_matches(char::is_numeric), \"foo1bar123\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_left_matches(x), \"foo1bar12\");\n```","links":{"self::pattern":"2:11023:5226","prim@char":"1:12374:2991"},"attrs":["#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_start_matches`\",\nsuggestion = \"trim_start_matches\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_start_matches`"},"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11028:5227","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11357:56790":{"id":"2:11357:56790","crate_id":2,"name":"starts_with","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a prefix of this\nstring slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nBasic usage:\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.starts_with(\"bana\"));\nassert!(!bananas.starts_with(\"nana\"));\n```","links":{"self::pattern":"2:11023:5226","prim@char":"1:12374:2991"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11028:5227","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11412:62899":{"id":"2:11412:62899","crate_id":2,"name":"trim_start","span":null,"visibility":"public","docs":"Returns a string slice with leading whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Text directionality\n\nA string is a sequence of bytes. `start` in this context means the first\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be left side, and for right-to-left languages like\nArabic or Hebrew, this will be the right side.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\nassert_eq!(\"Hello\\tworld\\t\\n\", s.trim_start());\n```\n\nDirectionality:\n\n```\nlet s = \"  English  \";\nassert!(Some('E') == s.trim_start().chars().next());\n\nlet s = \"  עברית  \";\nassert!(Some('ע') == s.trim_start().chars().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_trim_start\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11398:3072":{"id":"2:11398:3072","crate_id":2,"name":"matches","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within the given string\nslice.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rmatches`] method can be used.\n\n[`rmatches`]: str::matches\n\n# Examples\n\nBasic usage:\n\n```\nlet v: Vec<&str> = \"abcXXXabcYYYabc\".matches(\"abc\").collect();\nassert_eq!(v, [\"abc\", \"abc\", \"abc\"]);\n\nlet v: Vec<&str> = \"1abc2abc3\".matches(char::is_numeric).collect();\nassert_eq!(v, [\"1\", \"2\", \"3\"]);\n```","links":{"str::matches":"2:11398:3072","`DoubleEndedIterator`":"2:7063:119","prim@char":"1:12374:2991","self::pattern":"2:11023:5226"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Matches","id":"2:50206:5431","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11028:5227","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11322:785":{"id":"2:11322:785","crate_id":2,"name":"len","span":null,"visibility":"public","docs":"Returns the length of `self`.\n\nThis length is in bytes, not [`char`]s or graphemes. In other words,\nit might not be what a human considers the length of the string.\n\n[`char`]: prim@char\n\n# Examples\n\nBasic usage:\n\n```\nlet len = \"foo\".len();\nassert_eq!(3, len);\n\nassert_eq!(\"ƒoo\".len(), 4); // fancy f!\nassert_eq!(\"ƒoo\".chars().count(), 3);\n```","links":{"prim@char":"1:12374:2991"},"attrs":["#[must_use]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11443:4451":{"id":"2:11443:4451","crate_id":2,"name":"make_ascii_uppercase","span":null,"visibility":"public","docs":"Converts this string to its ASCII upper case equivalent in-place.\n\nASCII letters 'a' to 'z' are mapped to 'A' to 'Z',\nbut non-ASCII letters are unchanged.\n\nTo return a new uppercased value without modifying the existing one, use\n[`to_ascii_uppercase()`].\n\n[`to_ascii_uppercase()`]: #method.to_ascii_uppercase\n\n# Examples\n\n```\nlet mut s = String::from(\"Grüße, Jürgen ❤\");\n\ns.make_ascii_uppercase();\n\nassert_eq!(\"GRüßE, JüRGEN ❤\", s);\n```","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11444:4452":{"id":"2:11444:4452","crate_id":2,"name":"make_ascii_lowercase","span":null,"visibility":"public","docs":"Converts this string to its ASCII lower case equivalent in-place.\n\nASCII letters 'A' to 'Z' are mapped to 'a' to 'z',\nbut non-ASCII letters are unchanged.\n\nTo return a new lowercased value without modifying the existing one, use\n[`to_ascii_lowercase()`].\n\n[`to_ascii_lowercase()`]: #method.to_ascii_lowercase\n\n# Examples\n\n```\nlet mut s = String::from(\"GRÜßE, JÜRGEN ❤\");\n\ns.make_ascii_lowercase();\n\nassert_eq!(\"grÜße, jÜrgen ❤\", s);\n```","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"5:5112:2288":{"id":"5:5112:2288","crate_id":5,"name":"to_ascii_uppercase","span":null,"visibility":"public","docs":"Returns a copy of this string where each character is mapped to its\nASCII upper case equivalent.\n\nASCII letters 'a' to 'z' are mapped to 'A' to 'Z',\nbut non-ASCII letters are unchanged.\n\nTo uppercase the value in-place, use [`make_ascii_uppercase`].\n\nTo uppercase ASCII characters in addition to non-ASCII characters, use\n[`to_uppercase`].\n\n# Examples\n\n```\nlet s = \"Grüße, Jürgen ❤\";\n\nassert_eq!(\"GRüßE, JüRGEN ❤\", s.to_ascii_uppercase());\n```\n\n[`make_ascii_uppercase`]: str::make_ascii_uppercase\n[`to_uppercase`]: #method.to_uppercase","links":{"str::make_ascii_uppercase":"2:11443:4451"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use = \"to uppercase the value in-place, use `make_ascii_uppercase()`\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:6980:219","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11439:1836":{"id":"2:11439:1836","crate_id":2,"name":"parse","span":null,"visibility":"public","docs":"Parses this string slice into another type.\n\nBecause `parse` is so general, it can cause problems with type\ninference. As such, `parse` is one of the few times you'll see\nthe syntax affectionately known as the 'turbofish': `::<>`. This\nhelps the inference algorithm understand specifically which type\nyou're trying to parse into.\n\n`parse` can parse into any type that implements the [`FromStr`] trait.\n\n# Errors\n\nWill return [`Err`] if it's not possible to parse this string slice into\nthe desired type.\n\n[`Err`]: FromStr::Err\n\n# Examples\n\nBasic usage\n\n```\nlet four: u32 = \"4\".parse().unwrap();\n\nassert_eq!(4, four);\n```\n\nUsing the 'turbofish' instead of annotating `four`:\n\n```\nlet four = \"4\".parse::<u32>();\n\nassert_eq!(Ok(4), four);\n```\n\nFailing to parse:\n\n```\nlet nope = \"j\".parse::<u32>();\n\nassert!(nope.is_err());\n```","links":{"FromStr::Err":"2:10985:125","`FromStr`":"2:10984:3277"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Result","id":"2:48178:205","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"F"}},{"type":{"kind":"qualified_path","inner":{"name":"Err","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"F"},"trait":{"name":"FromStr","id":"2:10984:3277","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"F"},"bounds":[{"trait_bound":{"trait":{"name":"FromStr","id":"2:10984:3277","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11389:56788":{"id":"2:11389:56788","crate_id":2,"name":"rsplitn","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by a\npattern, starting from the end of the string, restricted to returning\nat most `n` items.\n\nIf `n` substrings are returned, the last substring (the `n`th substring)\nwill contain the remainder of the string.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will not be double ended, because it is not\nefficient to support.\n\nFor splitting from the front, the [`splitn`] method can be used.\n\n[`splitn`]: str::splitn\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".rsplitn(3, ' ').collect();\nassert_eq!(v, [\"lamb\", \"little\", \"Mary had a\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".rsplitn(3, 'X').collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"lionX\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".rsplitn(2, \"::\").collect();\nassert_eq!(v, [\"leopard\", \"lion::tiger\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".rsplitn(2, |c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"ghi\", \"abc1def\"]);\n```","links":{"self::pattern":"2:11023:5226","str::splitn":"2:11386:56786","prim@char":"1:12374:2991"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["n",{"kind":"primitive","inner":"usize"}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"RSplitN","id":"2:50124:4979","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11028:5227","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"2:11028:5227","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11043:5230","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11367:4086":{"id":"2:11367:4086","crate_id":2,"name":"rfind","span":null,"visibility":"public","docs":"Returns the byte index for the first character of the last match of the pattern in\nthis string slice.\n\nReturns [`None`] if the pattern doesn't match.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nlet s = \"Löwe 老虎 Léopard Gepardi\";\n\nassert_eq!(s.rfind('L'), Some(13));\nassert_eq!(s.rfind('é'), Some(14));\nassert_eq!(s.rfind(\"pard\"), Some(24));\n```\n\nMore complex patterns with closures:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\n\nassert_eq!(s.rfind(char::is_whitespace), Some(12));\nassert_eq!(s.rfind(char::is_lowercase), Some(20));\n```\n\nNot finding the pattern:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\nlet x: &[_] = &['1', '2'];\n\nassert_eq!(s.rfind(x), None);\n```","links":{"prim@char":"1:12374:2991","`None`":"2:48036:174","self::pattern":"2:11023:5226"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:48034:176","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11028:5227","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"2:11028:5227","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11043:5230","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11325:62885":{"id":"2:11325:62885","crate_id":2,"name":"floor_char_boundary","span":null,"visibility":"public","docs":"Finds the closest `x` not exceeding `index` where `is_char_boundary(x)` is `true`.\n\nThis method can help you truncate a string so that it's still valid UTF-8, but doesn't\nexceed a given number of bytes. Note that this is done purely at the character level\nand can still visually split graphemes, even though the underlying characters aren't\nsplit. For example, the emoji 🧑‍🔬 (scientist) could be split so that the string only\nincludes 🧑 (person) instead.\n\n# Examples\n\n```\n#![feature(round_char_boundary)]\nlet s = \"❤️🧡💛💚💙💜\";\nassert_eq!(s.len(), 26);\nassert!(!s.is_char_boundary(13));\n\nlet closest = s.floor_char_boundary(13);\nassert_eq!(closest, 10);\nassert_eq!(&s[..closest], \"❤️🧡\");\n```","links":{},"attrs":["#[unstable(feature = \"round_char_boundary\", issue = \"93743\")]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["index",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"primitive","inner":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11332:307":{"id":"2:11332:307","crate_id":2,"name":"as_ptr","span":null,"visibility":"public","docs":"Converts a string slice to a raw pointer.\n\nAs string slices are a slice of bytes, the raw pointer points to a\n[`u8`]. This pointer will be pointing to the first byte of the string\nslice.\n\nThe caller must ensure that the returned pointer is never written to.\nIf you need to mutate the contents of the string slice, use [`as_mut_ptr`].\n\n[`as_mut_ptr`]: str::as_mut_ptr\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"Hello\";\nlet ptr = s.as_ptr();\n```","links":{"str::as_mut_ptr":"2:11333:56750","`u8`":"1:12391:3005"},"attrs":["#[must_use]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"raw_pointer","inner":{"mutable":false,"type":{"kind":"primitive","inner":"u8"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11338:56748":{"id":"2:11338:56748","crate_id":2,"name":"get_unchecked","span":null,"visibility":"public","docs":"Returns an unchecked subslice of `str`.\n\nThis is the unchecked alternative to indexing the `str`.\n\n# Safety\n\nCallers of this function are responsible that these preconditions are\nsatisfied:\n\n* The starting index must not exceed the ending index;\n* Indexes must be within bounds of the original slice;\n* Indexes must lie on UTF-8 sequence boundaries.\n\nFailing that, the returned string slice may reference invalid memory or\nviolate the invariants communicated by the `str` type.\n\n# Examples\n\n```\nlet v = \"🗻∈🌏\";\nunsafe {\n    assert_eq!(\"🗻\", v.get_unchecked(0..4));\n    assert_eq!(\"∈\", v.get_unchecked(4..7));\n    assert_eq!(\"🌏\", v.get_unchecked(7..11));\n}\n```","links":{},"attrs":["#[rustc_const_unstable(feature = \"const_slice_index\", issue = \"none\")]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["i",{"kind":"generic","inner":"I"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"qualified_path","inner":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"I"},"trait":{"name":"SliceIndex","id":"2:9120:217","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}}}}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"2:9120:217","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}},"2:11442:4450":{"id":"2:11442:4450","crate_id":2,"name":"eq_ignore_ascii_case","span":null,"visibility":"public","docs":"Checks that two strings are an ASCII case-insensitive match.\n\nSame as `to_ascii_lowercase(a) == to_ascii_lowercase(b)`,\nbut without allocating and copying temporaries.\n\n# Examples\n\n```\nassert!(\"Ferris\".eq_ignore_ascii_case(\"FERRIS\"));\nassert!(\"Ferrös\".eq_ignore_ascii_case(\"FERRöS\"));\nassert!(!\"Ferrös\".eq_ignore_ascii_case(\"FERRÖS\"));\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["other",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11377:56784":{"id":"2:11377:56784","crate_id":2,"name":"rsplit","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by\ncharacters matched by a pattern and yielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`split`] method can be used.\n\n[`split`]: str::split\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".rsplit(' ').collect();\nassert_eq!(v, [\"lamb\", \"little\", \"a\", \"had\", \"Mary\"]);\n\nlet v: Vec<&str> = \"\".rsplit('X').collect();\nassert_eq!(v, [\"\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".rsplit('X').collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"\", \"lion\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".rsplit(\"::\").collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"lion\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".rsplit(|c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"ghi\", \"def\", \"abc\"]);\n```","links":{"str::split":"2:11371:56780","prim@char":"1:12374:2991","self::pattern":"2:11023:5226","`DoubleEndedIterator`":"2:7063:119"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"RSplit","id":"2:50020:4977","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11028:5227","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"2:11028:5227","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11043:5230","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"5:5101:63542":{"id":"5:5101:63542","crate_id":5,"name":"to_lowercase","span":null,"visibility":"public","docs":"Returns the lowercase equivalent of this string slice, as a new [`String`].\n\n'Lowercase' is defined according to the terms of the Unicode Derived Core Property\n`Lowercase`.\n\nSince some characters can expand into multiple characters when changing\nthe case, this function returns a [`String`] instead of modifying the\nparameter in-place.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"HELLO\";\n\nassert_eq!(\"hello\", s.to_lowercase());\n```\n\nA tricky example, with sigma:\n\n```\nlet sigma = \"Σ\";\n\nassert_eq!(\"σ\", sigma.to_lowercase());\n\n// but at the end of a word, it's ς, not σ:\nlet odysseus = \"ὈΔΥΣΣΕΎΣ\";\n\nassert_eq!(\"ὀδυσσεύς\", odysseus.to_lowercase());\n```\n\nLanguages without case are not changed:\n\n```\nlet new_year = \"农历新年\";\n\nassert_eq!(new_year, new_year.to_lowercase());\n```","links":{"`String`":"5:6980:219"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the lowercase string as a new String, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:6980:219","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11401:62895":{"id":"2:11401:62895","crate_id":2,"name":"rmatches","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within this string slice,\nyielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`matches`] method can be used.\n\n[`matches`]: str::matches\n\n# Examples\n\nBasic usage:\n\n```\nlet v: Vec<&str> = \"abcXXXabcYYYabc\".rmatches(\"abc\").collect();\nassert_eq!(v, [\"abc\", \"abc\", \"abc\"]);\n\nlet v: Vec<&str> = \"1abc2abc3\".rmatches(char::is_numeric).collect();\nassert_eq!(v, [\"3\", \"2\", \"1\"]);\n```","links":{"self::pattern":"2:11023:5226","prim@char":"1:12374:2991","`DoubleEndedIterator`":"2:7063:119","str::matches":"2:11398:3072"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"RMatches","id":"2:50224:5432","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11028:5227","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"2:11028:5227","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11043:5230","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:62:338":{"id":"0:62:338","crate_id":0,"name":"attr","span":{"filename":"src/internals/attr.rs","begin":[1,0],"end":[1952,1]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"module","inner":{"is_crate":false,"items":["0:90"],"is_stripped":false}},"2:11353:62105":{"id":"2:11353:62105","crate_id":2,"name":"encode_utf16","span":null,"visibility":"public","docs":"Returns an iterator of `u16` over the string encoded as UTF-16.\n\n# Examples\n\nBasic usage:\n\n```\nlet text = \"Zażółć gęślą jaźń\";\n\nlet utf8_len = text.len();\nlet utf16_len = text.encode_utf16().count();\n\nassert!(utf16_len <= utf8_len);\n```","links":{},"attrs":["#[must_use =\n\"this returns the encoded string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"EncodeUtf16","id":"2:50294:5436","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"5:5111:4721":{"id":"5:5111:4721","crate_id":5,"name":"repeat","span":null,"visibility":"public","docs":"Creates a new [`String`] by repeating a string `n` times.\n\n# Panics\n\nThis function will panic if the capacity would overflow.\n\n# Examples\n\nBasic usage:\n\n```\nassert_eq!(\"abc\".repeat(4), String::from(\"abcabcabcabc\"));\n```\n\nA panic upon overflow:\n\n```should_panic\n// this will panic at runtime\nlet huge = \"0123456789abcdef\".repeat(usize::MAX);\n```","links":{"`String`":"5:6980:219"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["n",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:6980:219","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11383:62892":{"id":"2:11383:62892","crate_id":2,"name":"rsplit_terminator","span":null,"visibility":"public","docs":"An iterator over substrings of `self`, separated by characters\nmatched by a pattern and yielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\nEquivalent to [`split`], except that the trailing substring is\nskipped if empty.\n\n[`split`]: str::split\n\nThis method can be used for string data that is _terminated_,\nrather than _separated_ by a pattern.\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a\nreverse search, and it will be double ended if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`split_terminator`] method can be\nused.\n\n[`split_terminator`]: str::split_terminator\n\n# Examples\n\n```\nlet v: Vec<&str> = \"A.B.\".rsplit_terminator('.').collect();\nassert_eq!(v, [\"B\", \"A\"]);\n\nlet v: Vec<&str> = \"A..B..\".rsplit_terminator(\".\").collect();\nassert_eq!(v, [\"\", \"B\", \"\", \"A\"]);\n\nlet v: Vec<&str> = \"A.B:C.D\".rsplit_terminator(&['.', ':'][..]).collect();\nassert_eq!(v, [\"D\", \"C\", \"B\", \"A\"]);\n```","links":{"str::split_terminator":"2:11380:62891","self::pattern":"2:11023:5226","str::split":"2:11371:56780","prim@char":"1:12374:2991"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"RSplitTerminator","id":"2:50070:5425","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11028:5227","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"2:11028:5227","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11043:5230","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11386:56786":{"id":"2:11386:56786","crate_id":2,"name":"splitn","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by a\npattern, restricted to returning at most `n` items.\n\nIf `n` substrings are returned, the last substring (the `n`th substring)\nwill contain the remainder of the string.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will not be double ended, because it is\nnot efficient to support.\n\nIf the pattern allows a reverse search, the [`rsplitn`] method can be\nused.\n\n[`rsplitn`]: str::rsplitn\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lambda\".splitn(3, ' ').collect();\nassert_eq!(v, [\"Mary\", \"had\", \"a little lambda\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".splitn(3, \"X\").collect();\nassert_eq!(v, [\"lion\", \"\", \"tigerXleopard\"]);\n\nlet v: Vec<&str> = \"abcXdef\".splitn(1, 'X').collect();\nassert_eq!(v, [\"abcXdef\"]);\n\nlet v: Vec<&str> = \"\".splitn(1, 'X').collect();\nassert_eq!(v, [\"\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".splitn(2, |c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"abc\", \"defXghi\"]);\n```","links":{"str::rsplitn":"2:11389:56788","self::pattern":"2:11023:5226","prim@char":"1:12374:2991"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["n",{"kind":"primitive","inner":"usize"}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"SplitN","id":"2:50106:4981","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11028:5227","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11445:62907":{"id":"2:11445:62907","crate_id":2,"name":"escape_debug","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_debug`].\n\nNote: only extended grapheme codepoints that begin the string will be\nescaped.\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"❤\\n!\".escape_debug() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"❤\\n!\".escape_debug());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"❤\\\\n!\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"❤\\n!\".escape_debug().to_string(), \"❤\\\\n!\");\n```","links":{"`char::escape_debug`":"2:4459:62907"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"EscapeDebug","id":"2:50301:5437","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11340:56749":{"id":"2:11340:56749","crate_id":2,"name":"get_unchecked_mut","span":null,"visibility":"public","docs":"Returns a mutable, unchecked subslice of `str`.\n\nThis is the unchecked alternative to indexing the `str`.\n\n# Safety\n\nCallers of this function are responsible that these preconditions are\nsatisfied:\n\n* The starting index must not exceed the ending index;\n* Indexes must be within bounds of the original slice;\n* Indexes must lie on UTF-8 sequence boundaries.\n\nFailing that, the returned string slice may reference invalid memory or\nviolate the invariants communicated by the `str` type.\n\n# Examples\n\n```\nlet mut v = String::from(\"🗻∈🌏\");\nunsafe {\n    assert_eq!(\"🗻\", v.get_unchecked_mut(0..4));\n    assert_eq!(\"∈\", v.get_unchecked_mut(4..7));\n    assert_eq!(\"🌏\", v.get_unchecked_mut(7..11));\n}\n```","links":{},"attrs":["#[rustc_const_unstable(feature = \"const_slice_index\", issue = \"none\")]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["i",{"kind":"generic","inner":"I"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"qualified_path","inner":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"I"},"trait":{"name":"SliceIndex","id":"2:9120:217","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}}}}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"2:9120:217","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}},"2:11441:4449":{"id":"2:11441:4449","crate_id":2,"name":"is_ascii","span":null,"visibility":"public","docs":"Checks if all characters in this string are within the ASCII range.\n\n# Examples\n\n```\nlet ascii = \"hello!\\n\";\nlet non_ascii = \"Grüße, Jürgen ❤\";\n\nassert!(ascii.is_ascii());\nassert!(!non_ascii.is_ascii());\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11349:62122":{"id":"2:11349:62122","crate_id":2,"name":"split_whitespace","span":null,"visibility":"public","docs":"Splits a string slice by whitespace.\n\nThe iterator returned will return string slices that are sub-slices of\nthe original string slice, separated by any amount of whitespace.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`. If you only want to split on ASCII whitespace\ninstead, use [`split_ascii_whitespace`].\n\n[`split_ascii_whitespace`]: str::split_ascii_whitespace\n\n# Examples\n\nBasic usage:\n\n```\nlet mut iter = \"A few words\".split_whitespace();\n\nassert_eq!(Some(\"A\"), iter.next());\nassert_eq!(Some(\"few\"), iter.next());\nassert_eq!(Some(\"words\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nAll kinds of whitespace are considered:\n\n```\nlet mut iter = \" Mary   had\\ta\\u{2009}little  \\n\\t lamb\".split_whitespace();\nassert_eq!(Some(\"Mary\"), iter.next());\nassert_eq!(Some(\"had\"), iter.next());\nassert_eq!(Some(\"a\"), iter.next());\nassert_eq!(Some(\"little\"), iter.next());\nassert_eq!(Some(\"lamb\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nIf the string is empty or all whitespace, the iterator yields no string slices:\n```\nassert_eq!(\"\".split_whitespace().next(), None);\nassert_eq!(\"   \".split_whitespace().next(), None);\n```","links":{"str::split_ascii_whitespace":"2:11350:62119"},"attrs":["#[must_use =\n\"this returns the split string as an iterator, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_split_whitespace\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"SplitWhitespace","id":"2:50276:5434","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11360:56791":{"id":"2:11360:56791","crate_id":2,"name":"ends_with","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a suffix of this\nstring slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nBasic usage:\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.ends_with(\"anas\"));\nassert!(!bananas.ends_with(\"nana\"));\n```","links":{"self::pattern":"2:11023:5226","prim@char":"1:12374:2991"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11028:5227","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"2:11028:5227","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11043:5230","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:1000:1847":{"id":"0:1000:1847","crate_id":0,"name":"Symbol","span":{"filename":"src/internals/symbol.rs","begin":[5,0],"end":[5,32]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"struct","inner":{"kind":{"tuple":[null]},"generics":{"params":[],"where_predicates":[]},"impls":[]}},"2:11321":{"id":"2:11321","crate_id":2,"name":null,"span":null,"visibility":{"restricted":{"parent":"2:10586:1349","path":"::str"}},"docs":null,"links":{},"attrs":["#[cfg(not(test))]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"kind":"primitive","inner":"str"},"items":["2:11322:785","2:11323:2073","2:11324:62884","2:11325:62885","2:11327:62886","2:11330:2729","2:11331:62887","2:11332:307","2:11333:56750","2:11334:1859","2:11336:56747","2:11338:56748","2:11340:56749","2:11342:62888","2:11343:62889","2:11344:56772","2:11345:56773","2:11346:2297","2:11347:2291","2:11348:5628","2:11349:62122","2:11350:62119","2:11351:5906","2:11352:62890","2:11353:62105","2:11354:1896","2:11357:56790","2:11360:56791","2:11363:2540","2:11367:4086","2:11371:56780","2:11374:56782","2:11377:56784","2:11380:62891","2:11383:62892","2:11386:56786","2:11389:56788","2:11392:62893","2:11395:62894","2:11398:3072","2:11401:62895","2:11404:62896","2:11407:62897","2:11410:62898","2:11412:62899","2:11414:62900","2:11416:62901","2:11417:62902","2:11418:62903","2:11421:62904","2:11424:56616","2:11427:56792","2:11430:62905","2:11433:1878","2:11436:62906","2:11439:1836","2:11441:4449","2:11442:4450","2:11443:4451","2:11444:4452","2:11445:62907","2:11447:3359","2:11448:62908"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:392":{"id":"0:392","crate_id":0,"name":null,"span":{"filename":"src/internals/mod.rs","begin":[8,0],"end":[8,41]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"import","inner":{"source":"self::receiver::replace_receiver","name":"replace_receiver","id":"0:368:1748","glob":false}},"2:11416:62901":{"id":"2:11416:62901","crate_id":2,"name":"trim_left","span":null,"visibility":"public","docs":"Returns a string slice with leading whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`.\n\n# Text directionality\n\nA string is a sequence of bytes. 'Left' in this context means the first\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _right_ side, not the left.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \" Hello\\tworld\\t\";\n\nassert_eq!(\"Hello\\tworld\\t\", s.trim_left());\n```\n\nDirectionality:\n\n```\nlet s = \"  English\";\nassert!(Some('E') == s.trim_left().chars().next());\n\nlet s = \"  עברית\";\nassert!(Some('ע') == s.trim_left().chars().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_start`\", suggestion\n= \"trim_start\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_start`"},"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11333:56750":{"id":"2:11333:56750","crate_id":2,"name":"as_mut_ptr","span":null,"visibility":"public","docs":"Converts a mutable string slice to a raw pointer.\n\nAs string slices are a slice of bytes, the raw pointer points to a\n[`u8`]. This pointer will be pointing to the first byte of the string\nslice.\n\nIt is your responsibility to make sure that the string slice only gets\nmodified in a way that it remains valid UTF-8.","links":{"`u8`":"1:12391:3005"},"attrs":["#[must_use]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"raw_pointer","inner":{"mutable":true,"type":{"kind":"primitive","inner":"u8"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11345:56773":{"id":"2:11345:56773","crate_id":2,"name":"split_at_mut","span":null,"visibility":"public","docs":"Divide one mutable string slice into two at an index.\n\nThe argument, `mid`, should be a byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get immutable string slices instead, see the [`split_at`] method.\n\n[`split_at`]: str::split_at\n\n# Panics\n\nPanics if `mid` is not on a UTF-8 code point boundary, or if it is\npast the end of the last code point of the string slice.\n\n# Examples\n\nBasic usage:\n\n```\nlet mut s = \"Per Martin-Löf\".to_string();\n{\n    let (first, last) = s.split_at_mut(3);\n    first.make_ascii_uppercase();\n    assert_eq!(\"PER\", first);\n    assert_eq!(\" Martin-Löf\", last);\n}\nassert_eq!(\"PER Martin-Löf\", s);\n```","links":{"str::split_at":"2:11344:56772"},"attrs":["#[must_use]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["mid",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"tuple","inner":[{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"primitive","inner":"str"}}},{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"primitive","inner":"str"}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11324:62884":{"id":"2:11324:62884","crate_id":2,"name":"is_char_boundary","span":null,"visibility":"public","docs":"Checks that `index`-th byte is the first byte in a UTF-8 code point\nsequence or the end of the string.\n\nThe start and end of the string (when `index == self.len()`) are\nconsidered to be boundaries.\n\nReturns `false` if `index` is greater than `self.len()`.\n\n# Examples\n\n```\nlet s = \"Löwe 老虎 Léopard\";\nassert!(s.is_char_boundary(0));\n// start of `老`\nassert!(s.is_char_boundary(6));\nassert!(s.is_char_boundary(s.len()));\n\n// second byte of `ö`\nassert!(!s.is_char_boundary(2));\n\n// third byte of `老`\nassert!(!s.is_char_boundary(8));\n```","links":{},"attrs":["#[must_use]","#[rustc_const_unstable(feature = \"const_is_char_boundary\", issue = \"none\")]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["index",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11351:5906":{"id":"2:11351:5906","crate_id":2,"name":"lines","span":null,"visibility":"public","docs":"An iterator over the lines of a string, as string slices.\n\nLines are split at line endings that are either newlines (`\\n`) or\nsequences of a carriage return followed by a line feed (`\\r\\n`).\n\nLine terminators are not included in the lines returned by the iterator.\n\nThe final line ending is optional. A string that ends with a final line\nending will return the same lines as an otherwise identical string\nwithout a final line ending.\n\n# Examples\n\nBasic usage:\n\n```\nlet text = \"foo\\r\\nbar\\n\\nbaz\\n\";\nlet mut lines = text.lines();\n\nassert_eq!(Some(\"foo\"), lines.next());\nassert_eq!(Some(\"bar\"), lines.next());\nassert_eq!(Some(\"\"), lines.next());\nassert_eq!(Some(\"baz\"), lines.next());\n\nassert_eq!(None, lines.next());\n```\n\nThe final line ending isn't required:\n\n```\nlet text = \"foo\\nbar\\n\\r\\nbaz\";\nlet mut lines = text.lines();\n\nassert_eq!(Some(\"foo\"), lines.next());\nassert_eq!(Some(\"bar\"), lines.next());\nassert_eq!(Some(\"\"), lines.next());\nassert_eq!(Some(\"baz\"), lines.next());\n\nassert_eq!(None, lines.next());\n```","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Lines","id":"2:50256:4699","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11448:62908":{"id":"2:11448:62908","crate_id":2,"name":"escape_unicode","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_unicode`].\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"❤\\n!\".escape_unicode() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"❤\\n!\".escape_unicode());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"\\\\u{{2764}}\\\\u{{a}}\\\\u{{21}}\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"❤\\n!\".escape_unicode().to_string(), \"\\\\u{2764}\\\\u{a}\\\\u{21}\");\n```","links":{"`char::escape_unicode`":"2:4457:62908"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"EscapeUnicode","id":"2:50319:5438","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11418:62903":{"id":"2:11418:62903","crate_id":2,"name":"trim_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes and suffixes that match a\npattern repeatedly removed.\n\nThe [pattern] can be a [`char`], a slice of [`char`]s, or a function\nor closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_matches('1'), \"foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_matches(char::is_numeric), \"foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_matches(x), \"foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1foo1barXX\".trim_matches(|c| c == '1' || c == 'X'), \"foo1bar\");\n```","links":{"prim@char":"1:12374:2991","self::pattern":"2:11023:5226"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11028:5227","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"2:11028:5227","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"DoubleEndedSearcher","id":"2:11048:5225","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11404:62896":{"id":"2:11404:62896","crate_id":2,"name":"match_indices","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within this string\nslice as well as the index that the match starts at.\n\nFor matches of `pat` within `self` that overlap, only the indices\ncorresponding to the first match are returned.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rmatch_indices`] method can be used.\n\n[`rmatch_indices`]: str::rmatch_indices\n\n# Examples\n\nBasic usage:\n\n```\nlet v: Vec<_> = \"abcXXXabcYYYabc\".match_indices(\"abc\").collect();\nassert_eq!(v, [(0, \"abc\"), (6, \"abc\"), (12, \"abc\")]);\n\nlet v: Vec<_> = \"1abcabc2\".match_indices(\"abc\").collect();\nassert_eq!(v, [(1, \"abc\"), (4, \"abc\")]);\n\nlet v: Vec<_> = \"ababa\".match_indices(\"aba\").collect();\nassert_eq!(v, [(0, \"aba\")]); // only the first `aba`\n```","links":{"`DoubleEndedIterator`":"2:7063:119","prim@char":"1:12374:2991","self::pattern":"2:11023:5226","str::rmatch_indices":"2:11407:62897"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"MatchIndices","id":"2:50152:5428","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11028:5227","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"5:5094:63540":{"id":"5:5094:63540","crate_id":5,"name":"into_boxed_bytes","span":null,"visibility":"public","docs":"Converts a `Box<str>` into a `Box<[u8]>` without copying or allocating.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"this is a string\";\nlet boxed_str = s.to_owned().into_boxed_str();\nlet boxed_bytes = boxed_str.into_boxed_bytes();\nassert_eq!(*boxed_bytes, *s.as_bytes());\n```","links":{},"attrs":["#[must_use = \"`self` will be dropped if the result is not used\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"resolved_path","inner":{"name":"Box","id":"5:276:1814","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}},{"type":{"kind":"resolved_path","inner":{"name":"Global","id":"5:6725:4469","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}]],"output":{"kind":"resolved_path","inner":{"name":"Box","id":"5:276:1814","args":{"angle_bracketed":{"args":[{"type":{"kind":"slice","inner":{"kind":"primitive","inner":"u8"}}},{"type":{"kind":"resolved_path","inner":{"name":"Global","id":"5:6725:4469","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11374:56782":{"id":"2:11374:56782","crate_id":2,"name":"split_inclusive","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by\ncharacters matched by a pattern. Differs from the iterator produced by\n`split` in that `split_inclusive` leaves the matched part as the\nterminator of the substring.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\\nlittle lamb\\nlittle lamb.\"\n    .split_inclusive('\\n').collect();\nassert_eq!(v, [\"Mary had a little lamb\\n\", \"little lamb\\n\", \"little lamb.\"]);\n```\n\nIf the last element of the string is matched,\nthat element will be considered the terminator of the preceding substring.\nThat substring will be the last item returned by the iterator.\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\\nlittle lamb\\nlittle lamb.\\n\"\n    .split_inclusive('\\n').collect();\nassert_eq!(v, [\"Mary had a little lamb\\n\", \"little lamb\\n\", \"little lamb.\\n\"]);\n```","links":{"prim@char":"1:12374:2991","self::pattern":"2:11023:5226"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"SplitInclusive","id":"2:10847:4983","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11028:5227","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11343:62889":{"id":"2:11343:62889","crate_id":2,"name":"slice_mut_unchecked","span":null,"visibility":"public","docs":"Creates a string slice from another string slice, bypassing safety\nchecks.\nThis is generally not recommended, use with caution! For a safe\nalternative see [`str`] and [`IndexMut`].\n\n[`IndexMut`]: crate::ops::IndexMut\n\nThis new slice goes from `begin` to `end`, including `begin` but\nexcluding `end`.\n\nTo get an immutable string slice instead, see the\n[`slice_unchecked`] method.\n\n[`slice_unchecked`]: str::slice_unchecked\n\n# Safety\n\nCallers of this function are responsible that three preconditions are\nsatisfied:\n\n* `begin` must not exceed `end`.\n* `begin` and `end` must be byte positions within the string slice.\n* `begin` and `end` must lie on UTF-8 sequence boundaries.","links":{"str::slice_unchecked":"2:11342:62888","`str`":"1:12380:2996","crate::ops::IndexMut":"2:2983:3262"},"attrs":["#[deprecated(since = \"1.29.0\", note =\n\"use `get_unchecked_mut(begin..end)` instead\")]"],"deprecation":{"since":"1.29.0","note":"use `get_unchecked_mut(begin..end)` instead"},"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["begin",{"kind":"primitive","inner":"usize"}],["end",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}},"2:11330:2729":{"id":"2:11330:2729","crate_id":2,"name":"as_bytes","span":null,"visibility":"public","docs":"Converts a string slice to a byte slice. To convert the byte slice back\ninto a string slice, use the [`from_utf8`] function.\n\n# Examples\n\nBasic usage:\n\n```\nlet bytes = \"bors\".as_bytes();\nassert_eq!(b\"bors\", bytes);\n```","links":{"`from_utf8`":"2:10591:5557"},"attrs":["#[must_use]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"slice","inner":{"kind":"primitive","inner":"u8"}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"5:5109:63543":{"id":"5:5109:63543","crate_id":5,"name":"to_uppercase","span":null,"visibility":"public","docs":"Returns the uppercase equivalent of this string slice, as a new [`String`].\n\n'Uppercase' is defined according to the terms of the Unicode Derived Core Property\n`Uppercase`.\n\nSince some characters can expand into multiple characters when changing\nthe case, this function returns a [`String`] instead of modifying the\nparameter in-place.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"hello\";\n\nassert_eq!(\"HELLO\", s.to_uppercase());\n```\n\nScripts without case are not changed:\n\n```\nlet new_year = \"农历新年\";\n\nassert_eq!(new_year, new_year.to_uppercase());\n```\n\nOne character can become multiple:\n```\nlet s = \"tschüß\";\n\nassert_eq!(\"TSCHÜSS\", s.to_uppercase());\n```","links":{"`String`":"5:6980:219"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the uppercase string as a new String, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:6980:219","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"5:5098:63541":{"id":"5:5098:63541","crate_id":5,"name":"replacen","span":null,"visibility":"public","docs":"Replaces first N matches of a pattern with another string.\n\n`replacen` creates a new [`String`], and copies the data from this string slice into it.\nWhile doing so, it attempts to find matches of a pattern. If it finds any, it\nreplaces them with the replacement string slice at most `count` times.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"foo foo 123 foo\";\nassert_eq!(\"new new 123 foo\", s.replacen(\"foo\", \"new\", 2));\nassert_eq!(\"faa fao 123 foo\", s.replacen('o', \"a\", 3));\nassert_eq!(\"foo foo new23 foo\", s.replacen(char::is_numeric, \"new\", 1));\n```\n\nWhen the pattern doesn't match:\n\n```\nlet s = \"this is old\";\nassert_eq!(s, s.replacen(\"cookie monster\", \"little lamb\", 10));\n```","links":{"`String`":"5:6980:219"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the replaced string as a new allocation, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}],["to",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}],["count",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:6980:219","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11028:5227","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11414:62900":{"id":"2:11414:62900","crate_id":2,"name":"trim_end","span":null,"visibility":"public","docs":"Returns a string slice with trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Text directionality\n\nA string is a sequence of bytes. `end` in this context means the last\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be right side, and for right-to-left languages like\nArabic or Hebrew, this will be the left side.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\nassert_eq!(\"\\n Hello\\tworld\", s.trim_end());\n```\n\nDirectionality:\n\n```\nlet s = \"  English  \";\nassert!(Some('h') == s.trim_end().chars().rev().next());\n\nlet s = \"  עברית  \";\nassert!(Some('ת') == s.trim_end().chars().rev().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_trim_end\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"5:5110:63544":{"id":"5:5110:63544","crate_id":5,"name":"into_string","span":null,"visibility":"public","docs":"Converts a [`Box<str>`] into a [`String`] without copying or allocating.\n\n# Examples\n\nBasic usage:\n\n```\nlet string = String::from(\"birthday gift\");\nlet boxed_str = string.clone().into_boxed_str();\n\nassert_eq!(boxed_str.into_string(), string);\n```","links":{"`Box<str>`":"5:276:1814","`String`":"5:6980:219"},"attrs":["#[must_use = \"`self` will be dropped if the result is not used\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"resolved_path","inner":{"name":"Box","id":"5:276:1814","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}},{"type":{"kind":"resolved_path","inner":{"name":"Global","id":"5:6725:4469","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:6980:219","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11410:62898":{"id":"2:11410:62898","crate_id":2,"name":"trim","span":null,"visibility":"public","docs":"Returns a string slice with leading and trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\n\nassert_eq!(\"Hello\\tworld\", s.trim());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a slice, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_trim\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11371:56780":{"id":"2:11371:56780","crate_id":2,"name":"split","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by\ncharacters matched by a pattern.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rsplit`] method can be used.\n\n[`rsplit`]: str::rsplit\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".split(' ').collect();\nassert_eq!(v, [\"Mary\", \"had\", \"a\", \"little\", \"lamb\"]);\n\nlet v: Vec<&str> = \"\".split('X').collect();\nassert_eq!(v, [\"\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".split('X').collect();\nassert_eq!(v, [\"lion\", \"\", \"tiger\", \"leopard\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".split(\"::\").collect();\nassert_eq!(v, [\"lion\", \"tiger\", \"leopard\"]);\n\nlet v: Vec<&str> = \"abc1def2ghi\".split(char::is_numeric).collect();\nassert_eq!(v, [\"abc\", \"def\", \"ghi\"]);\n\nlet v: Vec<&str> = \"lionXtigerXleopard\".split(char::is_uppercase).collect();\nassert_eq!(v, [\"lion\", \"tiger\", \"leopard\"]);\n```\n\nIf the pattern is a slice of chars, split on each occurrence of any of the characters:\n\n```\nlet v: Vec<&str> = \"2020-11-03 23:59\".split(&['-', ' ', ':', '@'][..]).collect();\nassert_eq!(v, [\"2020\", \"11\", \"03\", \"23\", \"59\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".split(|c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"abc\", \"def\", \"ghi\"]);\n```\n\nIf a string contains multiple contiguous separators, you will end up\nwith empty strings in the output:\n\n```\nlet x = \"||||a||b|c\".to_string();\nlet d: Vec<_> = x.split('|').collect();\n\nassert_eq!(d, &[\"\", \"\", \"\", \"\", \"a\", \"\", \"b\", \"c\"]);\n```\n\nContiguous separators are separated by the empty string.\n\n```\nlet x = \"(///)\".to_string();\nlet d: Vec<_> = x.split('/').collect();\n\nassert_eq!(d, &[\"(\", \"\", \"\", \")\"]);\n```\n\nSeparators at the start or end of a string are neighbored\nby empty strings.\n\n```\nlet d: Vec<_> = \"010\".split(\"0\").collect();\nassert_eq!(d, &[\"\", \"1\", \"\"]);\n```\n\nWhen the empty string is used as a separator, it separates\nevery character in the string, along with the beginning\nand end of the string.\n\n```\nlet f: Vec<_> = \"rust\".split(\"\").collect();\nassert_eq!(f, &[\"\", \"r\", \"u\", \"s\", \"t\", \"\"]);\n```\n\nContiguous separators can lead to possibly surprising behavior\nwhen whitespace is used as the separator. This code is correct:\n\n```\nlet x = \"    a  b c\".to_string();\nlet d: Vec<_> = x.split(' ').collect();\n\nassert_eq!(d, &[\"\", \"\", \"\", \"\", \"a\", \"\", \"b\", \"c\"]);\n```\n\nIt does _not_ give you:\n\n```,ignore\nassert_eq!(d, &[\"a\", \"b\", \"c\"]);\n```\n\nUse [`split_whitespace`] for this behavior.\n\n[`split_whitespace`]: str::split_whitespace","links":{"self::pattern":"2:11023:5226","`DoubleEndedIterator`":"2:7063:119","str::rsplit":"2:11377:56784","str::split_whitespace":"2:11349:62122","prim@char":"1:12374:2991"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Split","id":"2:50002:4698","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11028:5227","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:8:1745":{"id":"0:8:1745","crate_id":0,"name":"ast","span":{"filename":"src/internals/ast.rs","begin":[1,0],"end":[202,1]},"visibility":"public","docs":"A Serde ast, parsed from the Syn ast and ready to generate Rust code.","links":{},"attrs":[],"deprecation":null,"kind":"module","inner":{"is_crate":false,"items":[],"is_stripped":false}},"2:11436:62906":{"id":"2:11436:62906","crate_id":2,"name":"trim_right_matches","span":null,"visibility":"public","docs":"Returns a string slice with all suffixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. 'Right' in this context means the last\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _left_ side, not the right.\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_right_matches('1'), \"11foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_right_matches(char::is_numeric), \"123foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_right_matches(x), \"12foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1fooX\".trim_right_matches(|c| c == '1' || c == 'X'), \"1foo\");\n```","links":{"prim@char":"1:12374:2991","self::pattern":"2:11023:5226"},"attrs":["#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_end_matches`\",\nsuggestion = \"trim_end_matches\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_end_matches`"},"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11028:5227","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"2:11028:5227","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11043:5230","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11430:62905":{"id":"2:11430:62905","crate_id":2,"name":"trim_end_matches","span":null,"visibility":"public","docs":"Returns a string slice with all suffixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. `end` in this context means the last\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be right side, and for right-to-left languages like\nArabic or Hebrew, this will be the left side.\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_end_matches('1'), \"11foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_end_matches(char::is_numeric), \"123foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_end_matches(x), \"12foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1fooX\".trim_end_matches(|c| c == '1' || c == 'X'), \"1foo\");\n```","links":{"prim@char":"1:12374:2991","self::pattern":"2:11023:5226"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11028:5227","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"2:11028:5227","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11043:5230","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11354:1896":{"id":"2:11354:1896","crate_id":2,"name":"contains","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a sub-slice of\nthis string slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nBasic usage:\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.contains(\"nana\"));\nassert!(!bananas.contains(\"apples\"));\n```","links":{"self::pattern":"2:11023:5226","prim@char":"1:12374:2991"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11028:5227","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"5:5113:2287":{"id":"5:5113:2287","crate_id":5,"name":"to_ascii_lowercase","span":null,"visibility":"public","docs":"Returns a copy of this string where each character is mapped to its\nASCII lower case equivalent.\n\nASCII letters 'A' to 'Z' are mapped to 'a' to 'z',\nbut non-ASCII letters are unchanged.\n\nTo lowercase the value in-place, use [`make_ascii_lowercase`].\n\nTo lowercase ASCII characters in addition to non-ASCII characters, use\n[`to_lowercase`].\n\n# Examples\n\n```\nlet s = \"Grüße, Jürgen ❤\";\n\nassert_eq!(\"grüße, jürgen ❤\", s.to_ascii_lowercase());\n```\n\n[`make_ascii_lowercase`]: str::make_ascii_lowercase\n[`to_lowercase`]: #method.to_lowercase","links":{"str::make_ascii_lowercase":"2:11444:4452"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use = \"to lowercase the value in-place, use `make_ascii_lowercase()`\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:6980:219","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11417:62902":{"id":"2:11417:62902","crate_id":2,"name":"trim_right","span":null,"visibility":"public","docs":"Returns a string slice with trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`.\n\n# Text directionality\n\nA string is a sequence of bytes. 'Right' in this context means the last\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _left_ side, not the right.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \" Hello\\tworld\\t\";\n\nassert_eq!(\" Hello\\tworld\", s.trim_right());\n```\n\nDirectionality:\n\n```\nlet s = \"English  \";\nassert!(Some('h') == s.trim_right().chars().rev().next());\n\nlet s = \"עברית  \";\nassert!(Some('ת') == s.trim_right().chars().rev().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_end`\", suggestion =\n\"trim_end\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_end`"},"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11363:2540":{"id":"2:11363:2540","crate_id":2,"name":"find","span":null,"visibility":"public","docs":"Returns the byte index of the first character of this string slice that\nmatches the pattern.\n\nReturns [`None`] if the pattern doesn't match.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nlet s = \"Löwe 老虎 Léopard Gepardi\";\n\nassert_eq!(s.find('L'), Some(0));\nassert_eq!(s.find('é'), Some(14));\nassert_eq!(s.find(\"pard\"), Some(17));\n```\n\nMore complex patterns using point-free style and closures:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\n\nassert_eq!(s.find(char::is_whitespace), Some(5));\nassert_eq!(s.find(char::is_lowercase), Some(1));\nassert_eq!(s.find(|c: char| c.is_whitespace() || c.is_lowercase()), Some(1));\nassert_eq!(s.find(|c: char| (c < 'o') && (c > 'a')), Some(4));\n```\n\nNot finding the pattern:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\nlet x: &[_] = &['1', '2'];\n\nassert_eq!(s.find(x), None);\n```","links":{"self::pattern":"2:11023:5226","`None`":"2:48036:174","prim@char":"1:12374:2991"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:48034:176","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11028:5227","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11346:2297":{"id":"2:11346:2297","crate_id":2,"name":"chars","span":null,"visibility":"public","docs":"Returns an iterator over the [`char`]s of a string slice.\n\nAs a string slice consists of valid UTF-8, we can iterate through a\nstring slice by [`char`]. This method returns such an iterator.\n\nIt's important to remember that [`char`] represents a Unicode Scalar\nValue, and might not match your idea of what a 'character' is. Iteration\nover grapheme clusters may be what you actually want. This functionality\nis not provided by Rust's standard library, check crates.io instead.\n\n# Examples\n\nBasic usage:\n\n```\nlet word = \"goodbye\";\n\nlet count = word.chars().count();\nassert_eq!(7, count);\n\nlet mut chars = word.chars();\n\nassert_eq!(Some('g'), chars.next());\nassert_eq!(Some('o'), chars.next());\nassert_eq!(Some('o'), chars.next());\nassert_eq!(Some('d'), chars.next());\nassert_eq!(Some('b'), chars.next());\nassert_eq!(Some('y'), chars.next());\nassert_eq!(Some('e'), chars.next());\n\nassert_eq!(None, chars.next());\n```\n\nRemember, [`char`]s might not match your intuition about characters:\n\n[`char`]: prim@char\n\n```\nlet y = \"y̆\";\n\nlet mut chars = y.chars();\n\nassert_eq!(Some('y'), chars.next()); // not 'y̆'\nassert_eq!(Some('\\u{0306}'), chars.next());\n\nassert_eq!(None, chars.next());\n```","links":{"prim@char":"1:12374:2991"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Chars","id":"2:49972:5419","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11352:62890":{"id":"2:11352:62890","crate_id":2,"name":"lines_any","span":null,"visibility":"public","docs":"An iterator over the lines of a string.","links":{},"attrs":["#[deprecated(since = \"1.4.0\", note = \"use lines() instead now\")]"],"deprecation":{"since":"1.4.0","note":"use lines() instead now"},"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"LinesAny","id":"2:50266:5433","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"paths":{"24:104:4133":{"crate_id":24,"path":["syn","token","CustomToken"],"kind":"trait"},"1:8377:4690":{"crate_id":1,"path":["std","io","IoSlice"],"kind":"struct"},"5:6974:9012":{"crate_id":5,"path":["alloc","slice","merge_sort","Run"],"kind":"struct"},"2:20009:62765":{"crate_id":2,"path":["core","core_simd","swizzle","interleave","Hi"],"kind":"struct"},"2:47502:9407":{"crate_id":2,"path":["core","iter","sources","from_fn","FromFn"],"kind":"struct"},"24:4869:3149":{"crate_id":24,"path":["syn","expr","ExprLet"],"kind":"struct"},"17:9691:6375":{"crate_id":17,"path":["object","read","elf","hash","HashTable"],"kind":"struct"},"16:3623:7742":{"crate_id":16,"path":["gimli","constants","DwUt"],"kind":"struct"},"2:29523:4289":{"crate_id":2,"path":["core","mem","maybe_uninit","MaybeUninit"],"kind":"union"},"17:11528:7180":{"crate_id":17,"path":["object","macho","FatHeader"],"kind":"struct"},"16:2984:6241":{"crate_id":16,"path":["gimli","common","DwoId"],"kind":"struct"},"6:6302:8853":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","flock64"],"kind":"struct"},"16:7447:5966":{"crate_id":16,"path":["gimli","read","str","DebugStr"],"kind":"struct"},"17:12225:7307":{"crate_id":17,"path":["object","macho","IdentCommand"],"kind":"struct"},"17:10283:48760":{"crate_id":17,"path":["object","read","pe","section","PeSectionIterator"],"kind":"struct"},"6:4335:8431":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_effect"],"kind":"struct"},"2:2437:4644":{"crate_id":2,"path":["core","convert","num","FloatToInt"],"kind":"trait"},"2:3362:4829":{"crate_id":2,"path":["core","any","Provider"],"kind":"trait"},"1:1476:141":{"crate_id":1,"path":["std","collections","hash","set","HashSet"],"kind":"struct"},"17:420:5927":{"crate_id":17,"path":["object","read","any","Section"],"kind":"struct"},"21:2617:3252":{"crate_id":21,"path":["proc_macro","token_stream","IntoIter"],"kind":"struct"},"21:2495:3371":{"crate_id":21,"path":["proc_macro","bridge","Diagnostic"],"kind":"struct"},"6:5660:8743":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ntptimeval"],"kind":"struct"},"1:5644:4885":{"crate_id":1,"path":["std","process","Child"],"kind":"struct"},"6:4179:8358":{"crate_id":6,"path":["libc","unix","linux_like","linux","itimerspec"],"kind":"struct"},"16:5113:7769":{"crate_id":16,"path":["gimli","constants","DwOp"],"kind":"struct"},"21:1029:3368":{"crate_id":21,"path":["proc_macro","bridge","client","SourceFile"],"kind":"struct"},"24:4985:2190":{"crate_id":24,"path":["syn","generics","GenericParam"],"kind":"enum"},"23:0:3092":{"crate_id":23,"path":["unicode_ident"],"kind":"module"},"2:53800:5355":{"crate_id":2,"path":["core","core_arch","simd","u32x16"],"kind":"struct"},"16:5519:6016":{"crate_id":16,"path":["gimli","read","cfi","CfiEntriesIter"],"kind":"struct"},"1:11186:9431":{"crate_id":1,"path":["std","sys","unix","fs","FilePermissions"],"kind":"struct"},"1:11607:4756":{"crate_id":1,"path":["std","sys","unix","time","inner","Instant"],"kind":"struct"},"6:4797:8605":{"crate_id":6,"path":["libc","unix","linux_like","linux","ifreq"],"kind":"struct"},"24:2065:6498":{"crate_id":24,"path":["syn","lookahead","TokenMarker"],"kind":"enum"},"17:10139:6336":{"crate_id":17,"path":["object","read","macho","symbol","SymbolTable"],"kind":"struct"},"5:1201:4773":{"crate_id":5,"path":["alloc","collections","btree","map","entry","VacantEntry"],"kind":"struct"},"2:49335:142":{"crate_id":2,"path":["core","hash","sip","Hasher"],"kind":"struct"},"2:9564:4979":{"crate_id":2,"path":["core","slice","iter","RSplitN"],"kind":"struct"},"5:6779:3252":{"crate_id":5,"path":["alloc","collections","btree","set","IntoIter"],"kind":"struct"},"2:51958:5328":{"crate_id":2,"path":["core","core_arch","simd","i16x4"],"kind":"struct"},"17:12550:7383":{"crate_id":17,"path":["object","pe","ImageVxdHeader"],"kind":"struct"},"17:10108:6352":{"crate_id":17,"path":["object","read","macho","section","MachOSection"],"kind":"struct"},"16:4536:7756":{"crate_id":16,"path":["gimli","constants","DwAddr"],"kind":"struct"},"16:6149:6005":{"crate_id":16,"path":["gimli","read","abbrev","AttributeSpecification"],"kind":"struct"},"16:2859:6212":{"crate_id":16,"path":["gimli","common","EhFrameOffset"],"kind":"struct"},"2:49150:73":{"crate_id":2,"path":["core","fmt","Arguments"],"kind":"struct"},"2:48651:5515":{"crate_id":2,"path":["core","sync","exclusive","Exclusive"],"kind":"struct"},"24:4808:3135":{"crate_id":24,"path":["syn","expr","ExprAwait"],"kind":"struct"},"17:10455:6447":{"crate_id":17,"path":["object","read","pe","resource","ResourceDirectory"],"kind":"struct"},"6:1668:8263":{"crate_id":6,"path":["libc","unix","linux_like","arpreq"],"kind":"struct"},"22:753:1622":{"crate_id":22,"path":["proc_macro2","imp","TokenStream"],"kind":"enum"},"2:2436:4667":{"crate_id":2,"path":["core","convert","num","private","Sealed"],"kind":"trait"},"17:8241:6414":{"crate_id":17,"path":["object","common","SymbolKind"],"kind":"enum"},"1:6439:9699":{"crate_id":1,"path":["std","sync","mpmc","zero","ZeroToken"],"kind":"struct"},"2:47214:4933":{"crate_id":2,"path":["core","iter","adapters","peekable","Peekable"],"kind":"struct"},"2:50310:3360":{"crate_id":2,"path":["core","str","iter","EscapeDefault"],"kind":"struct"},"1:4300:4653":{"crate_id":1,"path":["std","os","unix","fs","FileTypeExt"],"kind":"trait"},"2:49782:4966":{"crate_id":2,"path":["core","slice","iter","Windows"],"kind":"struct"},"2:2760:3447":{"crate_id":2,"path":["core","ops","arith","Div"],"kind":"trait"},"9:19:5785":{"crate_id":9,"path":["miniz_oxide","deflate","buffer","HashBuffers"],"kind":"struct"},"2:52326:5336":{"crate_id":2,"path":["core","core_arch","simd","i64x2"],"kind":"struct"},"1:9343:3253":{"crate_id":1,"path":["std","sync","mpsc","Iter"],"kind":"struct"},"24:2114:1837":{"crate_id":24,"path":["syn","parse","Parse"],"kind":"trait"},"2:2809:3994":{"crate_id":2,"path":["core","ops","bit","BitOr"],"kind":"trait"},"16:7850:5973":{"crate_id":16,"path":["gimli","read","unit","EntriesRaw"],"kind":"struct"},"1:11543:59009":{"crate_id":1,"path":["std","sys","unix","thread","cgroups","Cgroup"],"kind":"enum"},"1:7735:1847":{"crate_id":1,"path":["std","backtrace_rs","symbolize","Symbol"],"kind":"struct"},"18:614:64369":{"crate_id":18,"path":["memchr","memmem","twoway","SuffixKind"],"kind":"enum"},"2:1737:4509":{"crate_id":2,"path":["core","ptr","metadata","Pointee"],"kind":"trait"},"2:21278:61598":{"crate_id":2,"path":["core","num","flt2dec","decoder","FullDecoded"],"kind":"enum"},"1:11977:9278":{"crate_id":1,"path":["std","alloc","System"],"kind":"struct"},"6:4139:8325":{"crate_id":6,"path":["libc","unix","linux_like","linux","dqblk"],"kind":"struct"},"20:275:2476":{"crate_id":20,"path":["quote","spanned","Spanned"],"kind":"trait"},"22:716:1767":{"crate_id":22,"path":["proc_macro2","fallback","Ident"],"kind":"struct"},"17:9644:6321":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdat"],"kind":"struct"},"5:1435:5655":{"crate_id":5,"path":["alloc","collections","btree","map","RangeMut"],"kind":"struct"},"16:2402:6248":{"crate_id":16,"path":["gimli","common","DebugArangesOffset"],"kind":"struct"},"2:46925:5312":{"crate_id":2,"path":["core","char","TryFromCharError"],"kind":"struct"},"1:1889:13260":{"crate_id":1,"path":["std","env","ArgsOs"],"kind":"struct"},"12:853:4769":{"crate_id":12,"path":["hashbrown","map","RawVacantEntryMut"],"kind":"struct"},"6:5782:8786":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","utmpx"],"kind":"struct"},"24:3772:3436":{"crate_id":24,"path":["syn","token","AddEq"],"kind":"struct"},"24:4944:3167":{"crate_id":24,"path":["syn","expr","ExprWhile"],"kind":"struct"},"17:12756:7488":{"crate_id":17,"path":["object","pe","Guid"],"kind":"struct"},"2:50525:5240":{"crate_id":2,"path":["core","str","pattern","CharPredicateSearcher"],"kind":"struct"},"6:4185:8359":{"crate_id":6,"path":["libc","unix","linux_like","linux","fsid_t"],"kind":"struct"},"1:1864:13254":{"crate_id":1,"path":["std","env","SplitPaths"],"kind":"struct"},"2:57004:240":{"crate_id":2,"path":["core","core_simd","fmt","fmt","Wrapper"],"kind":"struct"},"1:8225:4710":{"crate_id":1,"path":["std","io","error","ErrorKind"],"kind":"enum"},"24:4243:3468":{"crate_id":24,"path":["syn","token","Rem"],"kind":"struct"},"24:4860:3147":{"crate_id":24,"path":["syn","expr","ExprIf"],"kind":"struct"},"5:1049:5657":{"crate_id":5,"path":["alloc","collections","btree","borrow","DormantMutRef"],"kind":"struct"},"17:12176:7294":{"crate_id":17,"path":["object","macho","DyldInfoCommand"],"kind":"struct"},"17:9909:6977":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandIterator"],"kind":"struct"},"2:8587:2240":{"crate_id":2,"path":["core","fmt","Binary"],"kind":"trait"},"1:8064:4905":{"crate_id":1,"path":["std","fs","Metadata"],"kind":"struct"},"24:5420:3194":{"crate_id":24,"path":["syn","ty","TypeParen"],"kind":"struct"},"17:9071:64352":{"crate_id":17,"path":["object","read","any","SymbolTableInternal"],"kind":"enum"},"2:50749:5446":{"crate_id":2,"path":["core","str","UnsafeBytesToStr"],"kind":"struct"},"16:2696:6234":{"crate_id":16,"path":["gimli","common","DebugRngListsIndex"],"kind":"struct"},"2:11043:5230":{"crate_id":2,"path":["core","str","pattern","ReverseSearcher"],"kind":"trait"},"24:2505:3405":{"crate_id":24,"path":["syn","token","Auto"],"kind":"struct"},"2:7026:147":{"crate_id":2,"path":["core","iter","traits","collect","IntoIterator"],"kind":"trait"},"2:47049:4915":{"crate_id":2,"path":["core","iter","adapters","array_chunks","ArrayChunks"],"kind":"struct"},"6:1580:8196":{"crate_id":6,"path":["libc","unix","linux_like","tm"],"kind":"struct"},"2:20276:4667":{"crate_id":2,"path":["core","core_simd","lane_count","sealed","Sealed"],"kind":"trait"},"17:9118:64351":{"crate_id":17,"path":["object","read","any","SymbolIteratorInternal"],"kind":"enum"},"14:221:7950":{"crate_id":14,"path":["rustc_demangle","SizeLimitExhausted"],"kind":"struct"},"1:918:4761":{"crate_id":1,"path":["std","collections","hash","map","Keys"],"kind":"struct"},"8:0:2962":{"crate_id":8,"path":["cfg_if"],"kind":"module"},"1:4115:5092":{"crate_id":1,"path":["std","net","udp","UdpSocket"],"kind":"struct"},"17:9764:9327":{"crate_id":17,"path":["object","read","elf","version","VerdauxIterator"],"kind":"struct"},"2:50206:5431":{"crate_id":2,"path":["core","str","iter","Matches"],"kind":"struct"},"16:2816:6238":{"crate_id":16,"path":["gimli","common","DebugTypeSignature"],"kind":"struct"},"17:8666:6964":{"crate_id":17,"path":["object","endian","I32Bytes"],"kind":"struct"},"1:8739:8863":{"crate_id":1,"path":["std","os","linux","raw","arch","stat"],"kind":"struct"},"2:1760:4508":{"crate_id":2,"path":["core","ptr","metadata","DynMetadata"],"kind":"struct"},"16:6495:5875":{"crate_id":16,"path":["gimli","read","line","LineSequence"],"kind":"struct"},"2:21857:165":{"crate_id":2,"path":["core","num","nonzero","NonZeroI16"],"kind":"struct"},"1:4906:8878":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt","st_ctime"],"kind":"foreign_type"},"21:140:4633":{"crate_id":21,"path":["proc_macro","bridge","client","Client"],"kind":"struct"},"2:54057:9186":{"crate_id":2,"path":["core","core_arch","x86","__m256d"],"kind":"struct"},"17:1021:6430":{"crate_id":17,"path":["object","read","coff","relocation","CoffRelocationIterator"],"kind":"struct"},"1:7943:4775":{"crate_id":1,"path":["std","collections","hash","map","RandomState"],"kind":"struct"},"16:6654:5963":{"crate_id":16,"path":["gimli","read","loclists","DebugLoc"],"kind":"struct"},"21:107:4627":{"crate_id":21,"path":["proc_macro","bridge","client","Bridge"],"kind":"struct"},"17:12164:7292":{"crate_id":17,"path":["object","macho","BuildToolVersion"],"kind":"struct"},"12:2069:4772":{"crate_id":12,"path":["hashbrown","set","OccupiedEntry"],"kind":"struct"},"2:49883:4973":{"crate_id":2,"path":["core","slice","iter","RChunks"],"kind":"struct"},"6:4659:8539":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlattr"],"kind":"struct"},"16:6668:5964":{"crate_id":16,"path":["gimli","read","loclists","DebugLocLists"],"kind":"struct"},"2:49831:4961":{"crate_id":2,"path":["core","slice","iter","ArrayWindows"],"kind":"struct"},"6:7220:8994":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_condattr_t"],"kind":"struct"},"1:3345:4331":{"crate_id":1,"path":["std","io","util","Repeat"],"kind":"struct"},"2:46280:4462":{"crate_id":2,"path":["core","ops","generator","GeneratorState"],"kind":"enum"},"24:2451:3402":{"crate_id":24,"path":["syn","token","Abstract"],"kind":"struct"},"18:548:138":{"crate_id":18,"path":["memchr","memmem","rabinkarp","Hash"],"kind":"struct"},"1:11551:5530":{"crate_id":1,"path":["std","sys","unix","time","Nanoseconds"],"kind":"struct"},"2:21365:5493":{"crate_id":2,"path":["core","num","error","ParseIntError"],"kind":"struct"},"24:95:4140":{"crate_id":24,"path":["syn","token","private","WithSpan"],"kind":"struct"},"2:9291:3257":{"crate_id":2,"path":["core","slice","iter","IterMut"],"kind":"struct"},"16:5941:189":{"crate_id":16,"path":["gimli","read","cfi","Pointer"],"kind":"enum"},"17:10207:48773":{"crate_id":17,"path":["object","read","pe","file","PeFile"],"kind":"struct"},"2:3995:4458":{"crate_id":2,"path":["core","async_iter","async_iter","AsyncIterator"],"kind":"trait"},"1:11837:4805":{"crate_id":1,"path":["std","sys_common","net","LookupHost"],"kind":"struct"},"17:12073:7276":{"crate_id":17,"path":["object","macho","LinkeditDataCommand"],"kind":"struct"},"24:4132:3460":{"crate_id":24,"path":["syn","token","Ne"],"kind":"struct"},"2:46944:5510":{"crate_id":2,"path":["core","ffi","c_str","FromBytesWithNulError"],"kind":"struct"},"2:5449:4924":{"crate_id":2,"path":["core","iter","adapters","flatten","Flatten"],"kind":"struct"},"1:8389:4692":{"crate_id":1,"path":["std","io","SeekFrom"],"kind":"enum"},"1:4764:4901":{"crate_id":1,"path":["std","os","unix","process","ExitStatusExt"],"kind":"trait"},"6:4605:8518":{"crate_id":6,"path":["libc","unix","linux_like","linux","can_filter"],"kind":"struct"},"17:11288:7119":{"crate_id":17,"path":["object","elf","Verdaux"],"kind":"struct"},"0:0:1646":{"crate_id":0,"path":["serde_derive"],"kind":"module"},"22:686:3367":{"crate_id":22,"path":["proc_macro2","fallback","LineColumn"],"kind":"struct"},"24:2299:126":{"crate_id":24,"path":["syn","error","Error"],"kind":"struct"},"17:10625:6318":{"crate_id":17,"path":["object","read","SymbolIndex"],"kind":"struct"},"1:9637:4757":{"crate_id":1,"path":["std","time","SystemTime"],"kind":"struct"},"9:382:5689":{"crate_id":9,"path":["miniz_oxide","inflate","core","DecompressorOxide"],"kind":"struct"},"6:5841:8798":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","sysinfo"],"kind":"struct"},"1:7846:4667":{"crate_id":1,"path":["std","sealed","Sealed"],"kind":"trait"},"21:2370:2474":{"crate_id":21,"path":["proc_macro","bridge","Literal"],"kind":"struct"},"2:51998:9123":{"crate_id":2,"path":["core","core_arch","simd","i64x1"],"kind":"struct"},"17:12781:7498":{"crate_id":17,"path":["object","pe","AnonObjectHeaderV2"],"kind":"struct"},"1:681:12250":{"crate_id":1,"path":["std","backtrace","BacktraceSymbol"],"kind":"struct"},"16:6881:6050":{"crate_id":16,"path":["gimli","read","op","Operation"],"kind":"enum"},"17:9350:6428":{"crate_id":17,"path":["object","read","coff","section","CoffSection"],"kind":"struct"},"2:50610:5520":{"crate_id":2,"path":["core","str","lossy","Utf8Chunk"],"kind":"struct"},"5:3474:5641":{"crate_id":5,"path":["alloc","collections","linked_list","CursorMut"],"kind":"struct"},"17:13039:7556":{"crate_id":17,"path":["object","pe","ImageThunkData32"],"kind":"struct"},"6:5534:8669":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","cmsghdr"],"kind":"struct"},"6:7208:8992":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_mutexattr_t"],"kind":"struct"},"17:12955:7538":{"crate_id":17,"path":["object","pe","ImageRelocation"],"kind":"struct"},"1:8503:4849":{"crate_id":1,"path":["std","net","ip_addr","Ipv6MulticastScope"],"kind":"enum"},"2:20950:4667":{"crate_id":2,"path":["core","core_simd","vector","sealed","Sealed"],"kind":"trait"},"12:1518:5869":{"crate_id":12,"path":["hashbrown","rustc_entry","RustcEntry"],"kind":"enum"},"2:50906:200":{"crate_id":2,"path":["core","future","ready","Ready"],"kind":"struct"},"2:21659:170":{"crate_id":2,"path":["core","num","nonzero","NonZeroU16"],"kind":"struct"},"17:11500:7173":{"crate_id":17,"path":["object","macho","DyldCacheImageInfo"],"kind":"struct"},"24:2541:3407":{"crate_id":24,"path":["syn","token","Become"],"kind":"struct"},"6:4726:8570":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_alg"],"kind":"struct"},"1:10939:4716":{"crate_id":1,"path":["std","sys","unix","stdio","Stdin"],"kind":"struct"},"2:50170:5429":{"crate_id":2,"path":["core","str","iter","RMatchIndices"],"kind":"struct"},"18:521:6475":{"crate_id":18,"path":["memchr","memmem","prefilter","Prefilter"],"kind":"enum"},"24:2059:3315":{"crate_id":24,"path":["syn","lookahead","Peek"],"kind":"trait"},"24:4513:3124":{"crate_id":24,"path":["syn","attr","MetaNameValue"],"kind":"struct"},"16:6843:6267":{"crate_id":16,"path":["gimli","read","lookup","PubStuffParser"],"kind":"struct"},"2:2273:183":{"crate_id":2,"path":["core","cmp","PartialEq"],"kind":"trait"},"24:183:1767":{"crate_id":24,"path":["syn","ident","Ident"],"kind":"function"},"17:11343:7138":{"crate_id":17,"path":["object","elf","NoteHeader64"],"kind":"struct"},"6:6509:8949":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ipc_perm"],"kind":"struct"},"24:4556:1784":{"crate_id":24,"path":["syn","data","Field"],"kind":"struct"},"5:215:4472":{"crate_id":5,"path":["alloc","boxed","thin","ThinBox"],"kind":"struct"},"6:7237:8999":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_cond_t"],"kind":"struct"},"17:12198:7305":{"crate_id":17,"path":["object","macho","LinkerOptionCommand"],"kind":"struct"},"16:7545:5986":{"crate_id":16,"path":["gimli","read","unit","UnitType"],"kind":"enum"},"24:4062:3455":{"crate_id":24,"path":["syn","token","Ge"],"kind":"struct"},"24:4825:3139":{"crate_id":24,"path":["syn","expr","ExprBreak"],"kind":"struct"},"1:7746:9952":{"crate_id":1,"path":["std","backtrace_rs","symbolize","SymbolName"],"kind":"struct"},"5:6476:6729":{"crate_id":5,"path":["alloc","vec","dedup_by","FillGapOnDrop"],"kind":"struct"},"2:47120:4919":{"crate_id":2,"path":["core","iter","adapters","enumerate","Enumerate"],"kind":"struct"},"1:12390:3004":{"crate_id":1,"path":["std","i128"],"kind":"primitive"},"24:1452:6497":{"crate_id":24,"path":["syn","ext","IdentExt"],"kind":"trait"},"24:3297:3432":{"crate_id":24,"path":["syn","token","Use"],"kind":"struct"},"17:9947:48705":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandVariant"],"kind":"enum"},"24:600:64675":{"crate_id":24,"path":["syn","generics","Lifetimes"],"kind":"struct"},"17:9857:6360":{"crate_id":17,"path":["object","read","macho","file","MachOFile"],"kind":"struct"},"16:6597:6045":{"crate_id":16,"path":["gimli","read","line","FileEntry"],"kind":"struct"},"2:1751:9014":{"crate_id":2,"path":["core","ptr","metadata","PtrComponents"],"kind":"struct"},"2:20222:5367":{"crate_id":2,"path":["core","core_simd","elements","uint","SimdUint"],"kind":"trait"},"17:9751:6376":{"crate_id":17,"path":["object","read","elf","version","VerdefIterator"],"kind":"struct"},"2:48499:83":{"crate_id":2,"path":["core","sync","atomic","AtomicI64"],"kind":"struct"},"2:50793:4760":{"crate_id":2,"path":["core","time","TryFromFloatSecsError"],"kind":"struct"},"6:6981:8981":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","align","clone_args"],"kind":"struct"},"16:153:5945":{"crate_id":16,"path":["gimli","read","util","ArrayVec"],"kind":"struct"},"12:0:2966":{"crate_id":12,"path":["hashbrown"],"kind":"module"},"9:111:5753":{"crate_id":9,"path":["miniz_oxide","deflate","core","CompressorOxide"],"kind":"struct"},"2:8589:3352":{"crate_id":2,"path":["core","fmt","LowerHex"],"kind":"trait"},"2:9398:4970":{"crate_id":2,"path":["core","slice","iter","SplitMut"],"kind":"struct"},"2:4361:3334":{"crate_id":2,"path":["core","cell","SyncUnsafeCell"],"kind":"struct"},"1:996:4769":{"crate_id":1,"path":["std","collections","hash","map","RawVacantEntryMut"],"kind":"struct"},"24:4009:3452":{"crate_id":24,"path":["syn","token","Dot3"],"kind":"struct"},"1:1826:13243":{"crate_id":1,"path":["std","env","Vars"],"kind":"struct"},"1:7976:9949":{"crate_id":1,"path":["std","env","JoinPathsError"],"kind":"struct"},"1:11168:9425":{"crate_id":1,"path":["std","sys","unix","fs","StatxExtraFields"],"kind":"struct"},"12:834:4768":{"crate_id":12,"path":["hashbrown","map","RawOccupiedEntryMut"],"kind":"struct"},"6:7289:9009":{"crate_id":6,"path":["libc","unix","align","in6_addr"],"kind":"struct"},"24:2973:3422":{"crate_id":24,"path":["syn","token","Mut"],"kind":"struct"},"17:10245:48784":{"crate_id":17,"path":["object","read","pe","file","PeComdatSectionIterator"],"kind":"struct"},"5:1584:6714":{"crate_id":5,"path":["alloc","collections","btree","map","drop","DropGuard"],"kind":"struct"},"16:6262:5968":{"crate_id":16,"path":["gimli","read","index","DebugTuIndex"],"kind":"struct"},"2:8311:5405":{"crate_id":2,"path":["core","fmt","builders","PadAdapterState"],"kind":"struct"},"17:13404:7671":{"crate_id":17,"path":["object","pe","ImageRuntimeFunctionEntry"],"kind":"struct"},"5:6795:5623":{"crate_id":5,"path":["alloc","collections","btree","set_val","SetValZST"],"kind":"struct"},"2:48237:3252":{"crate_id":2,"path":["core","result","IntoIter"],"kind":"struct"},"20:446:3990":{"crate_id":20,"path":["quote","__private","IdentFragmentAdapter"],"kind":"struct"},"6:5541:8673":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","termios"],"kind":"struct"},"2:8731:62467":{"crate_id":2,"path":["core","fmt","fmt","BorrowedPlaceholder"],"kind":"struct"},"17:9303:6334":{"crate_id":17,"path":["object","read","coff","section","SectionTable"],"kind":"struct"},"2:47171:4930":{"crate_id":2,"path":["core","iter","adapters","inspect","Inspect"],"kind":"struct"},"1:12381:2997":{"crate_id":1,"path":["std","tuple"],"kind":"primitive"},"1:10527:58430":{"crate_id":1,"path":["std","sys","unix","os","Env"],"kind":"struct"},"17:10490:7021":{"crate_id":17,"path":["object","read","pe","resource","ResourceName"],"kind":"struct"},"2:49731:5418":{"crate_id":2,"path":["core","slice","iter","GenericSplitN"],"kind":"struct"},"17:11594:7191":{"crate_id":17,"path":["object","macho","LoadCommand"],"kind":"struct"},"2:38106:178":{"crate_id":2,"path":["core","cmp","Ordering"],"kind":"enum"},"21:2692:3368":{"crate_id":21,"path":["proc_macro","SourceFile"],"kind":"struct"},"1:900:3257":{"crate_id":1,"path":["std","collections","hash","map","IterMut"],"kind":"struct"},"6:4096:8297":{"crate_id":6,"path":["libc","unix","linux_like","linux","rlimit64"],"kind":"struct"},"17:11974:7266":{"crate_id":17,"path":["object","macho","DylibModule64"],"kind":"struct"},"2:2835:4864":{"crate_id":2,"path":["core","ops","bit","BitOrAssign"],"kind":"trait"},"17:8110:48486":{"crate_id":17,"path":["object","common","AddressSize"],"kind":"enum"},"2:52525:9133":{"crate_id":2,"path":["core","core_arch","simd","m32x4"],"kind":"struct"},"1:9918:6756":{"crate_id":1,"path":["std","sys","unix","fs","Dir"],"kind":"struct"},"2:20844:4882":{"crate_id":2,"path":["core","core_simd","vector","Simd"],"kind":"struct"},"24:5493:2455":{"crate_id":24,"path":["syn","path","AngleBracketedGenericArguments"],"kind":"struct"},"2:10077:4971":{"crate_id":2,"path":["core","slice","iter","GroupBy"],"kind":"struct"},"5:6816:3252":{"crate_id":5,"path":["alloc","collections","linked_list","IntoIter"],"kind":"struct"},"2:50382:5228":{"crate_id":2,"path":["core","str","pattern","SearchStep"],"kind":"enum"},"2:4318:3332":{"crate_id":2,"path":["core","cell","RefMut"],"kind":"struct"},"9:920:5693":{"crate_id":9,"path":["miniz_oxide","MZError"],"kind":"enum"},"24:1856:2008":{"crate_id":24,"path":["syn","parse_quote"],"kind":"module"},"2:2788:4752":{"crate_id":2,"path":["core","ops","arith","DivAssign"],"kind":"trait"},"6:1738:8291":{"crate_id":6,"path":["libc","unix","linux_like","sigevent"],"kind":"struct"},"17:11014:7063":{"crate_id":17,"path":["object","elf","SectionHeader32"],"kind":"struct"},"1:5892:4817":{"crate_id":1,"path":["std","sync","mpsc","SyncSender"],"kind":"struct"},"2:9550:4981":{"crate_id":2,"path":["core","slice","iter","SplitN"],"kind":"struct"},"21:0:1040":{"crate_id":21,"path":["proc_macro"],"kind":"module"},"16:6323:5961":{"crate_id":16,"path":["gimli","read","line","DebugLine"],"kind":"struct"},"6:7243:9000":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_mutex_t"],"kind":"struct"},"2:10591:5557":{"crate_id":2,"path":["core","str","converts","from_utf8"],"kind":"function"},"1:8954:3253":{"crate_id":1,"path":["std","path","Iter"],"kind":"struct"},"16:7934:5969":{"crate_id":16,"path":["gimli","read","unit","DebugTypes"],"kind":"struct"},"21:2609:3270":{"crate_id":21,"path":["proc_macro","LexError"],"kind":"struct"},"2:7035:3385":{"crate_id":2,"path":["core","iter","traits","collect","Extend"],"kind":"trait"},"16:7215:6053":{"crate_id":16,"path":["gimli","read","op","OperationIter"],"kind":"struct"},"1:12389:3003":{"crate_id":1,"path":["std","i64"],"kind":"primitive"},"2:2482:131":{"crate_id":2,"path":["core","convert","From"],"kind":"trait"},"2:47070:4913":{"crate_id":2,"path":["core","iter","adapters","by_ref_sized","ByRefSized"],"kind":"struct"},"1:11921:5092":{"crate_id":1,"path":["std","sys_common","net","UdpSocket"],"kind":"struct"},"17:11909:7236":{"crate_id":17,"path":["object","macho","DysymtabCommand"],"kind":"struct"},"24:4834:3141":{"crate_id":24,"path":["syn","expr","ExprCast"],"kind":"struct"},"2:47265:4937":{"crate_id":2,"path":["core","iter","adapters","skip_while","SkipWhile"],"kind":"struct"},"17:11515:7178":{"crate_id":17,"path":["object","macho","DyldSubCacheInfo"],"kind":"struct"},"16:6721:6047":{"crate_id":16,"path":["gimli","read","loclists","RawLocListEntry"],"kind":"enum"},"17:10973:7060":{"crate_id":17,"path":["object","elf","FileHeader64"],"kind":"struct"},"6:4115:8307":{"crate_id":6,"path":["libc","unix","linux_like","linux","passwd"],"kind":"struct"},"2:21351:5550":{"crate_id":2,"path":["core","num","error","TryFromIntError"],"kind":"struct"},"1:4012:5084":{"crate_id":1,"path":["std","net","tcp","TcpStream"],"kind":"struct"},"9:676:5783":{"crate_id":9,"path":["miniz_oxide","deflate","CompressionLevel"],"kind":"enum"},"1:6850:5081":{"crate_id":1,"path":["std","sync","remutex","ReentrantMutexGuard"],"kind":"struct"},"5:4616:4680":{"crate_id":5,"path":["alloc","rc","from_iter_exact","Guard"],"kind":"struct"},"2:3139:5505":{"crate_id":2,"path":["core","ops","range","OneSidedRange"],"kind":"trait"},"24:3027:3425":{"crate_id":24,"path":["syn","token","Pub"],"kind":"struct"},"17:10374:6387":{"crate_id":17,"path":["object","read","pe","import","ImportTable"],"kind":"struct"},"24:3261:3430":{"crate_id":24,"path":["syn","token","Unsafe"],"kind":"struct"},"1:8361:4723":{"crate_id":1,"path":["std","io","util","Empty"],"kind":"struct"},"1:11744:9738":{"crate_id":1,"path":["std","sys_common","wtf8","Wtf8"],"kind":"struct"},"17:12134:7286":{"crate_id":17,"path":["object","macho","VersionMinCommand"],"kind":"struct"},"1:4967:4847":{"crate_id":1,"path":["std","os","linux","process","ChildExt"],"kind":"trait"},"21:218:9692":{"crate_id":21,"path":["proc_macro","bridge","fxhash","FxHasher"],"kind":"struct"},"20:151:3093":{"crate_id":20,"path":["quote","__private","ext"],"kind":"module"},"2:9592:4980":{"crate_id":2,"path":["core","slice","iter","RSplitNMut"],"kind":"struct"},"6:4224:8379":{"crate_id":6,"path":["libc","unix","linux_like","linux","sembuf"],"kind":"struct"},"1:1604:3253":{"crate_id":1,"path":["std","collections","hash","set","Iter"],"kind":"struct"},"5:6897:102":{"crate_id":5,"path":["alloc","ffi","c_str","CString"],"kind":"struct"},"6:5582:8693":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_pktinfo"],"kind":"struct"},"24:4120:3459":{"crate_id":24,"path":["syn","token","MulEq"],"kind":"struct"},"2:54042:9185":{"crate_id":2,"path":["core","core_arch","x86","__m256"],"kind":"struct"},"5:2908:95":{"crate_id":5,"path":["alloc","collections","btree","set","BTreeSet"],"kind":"struct"},"1:11351:4891":{"crate_id":1,"path":["std","sys","unix","process","process_common","Stdio"],"kind":"enum"},"2:50319:5438":{"crate_id":2,"path":["core","str","iter","EscapeUnicode"],"kind":"struct"},"2:21:661":{"crate_id":2,"path":["core","format_args"],"kind":"macro"},"1:9519:9698":{"crate_id":1,"path":["std","sync","mpmc","list","ListToken"],"kind":"struct"},"1:3592:4806":{"crate_id":1,"path":["std","net","display_buffer","DisplayBuffer"],"kind":"struct"},"6:4354:8440":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_ff_erase"],"kind":"struct"},"18:727:6471":{"crate_id":18,"path":["memchr","memmem","SearcherConfig"],"kind":"struct"},"2:3166:5222":{"crate_id":2,"path":["core","ops","try_trait","NeverShortCircuit"],"kind":"struct"},"2:14:2609":{"crate_id":2,"path":["core","write"],"kind":"macro"},"2:2278:123":{"crate_id":2,"path":["core","cmp","Eq"],"kind":"trait"},"2:47546:9108":{"crate_id":2,"path":["core","iter","sources","repeat_with","RepeatWith"],"kind":"struct"},"24:3842:3441":{"crate_id":24,"path":["syn","token","Bang"],"kind":"struct"},"2:46826:5582":{"crate_id":2,"path":["core","char","decode","DecodeUtf16Error"],"kind":"struct"},"24:2793:3414":{"crate_id":24,"path":["syn","token","For"],"kind":"struct"},"14:0:2967":{"crate_id":14,"path":["rustc_demangle"],"kind":"module"},"16:7276:6058":{"crate_id":16,"path":["gimli","read","pubtypes","PubTypesEntry"],"kind":"struct"},"24:4940:3166":{"crate_id":24,"path":["syn","expr","ExprUnsafe"],"kind":"struct"},"6:5861:8812":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","msqid_ds"],"kind":"struct"},"2:9316:4698":{"crate_id":2,"path":["core","slice","iter","Split"],"kind":"struct"},"2:29565:5502":{"crate_id":2,"path":["core","ptr","alignment","AlignmentEnum16"],"kind":"enum"},"2:2673:2402":{"crate_id":2,"path":["core","marker","PhantomData"],"kind":"struct"},"5:3352:3257":{"crate_id":5,"path":["alloc","collections","linked_list","IterMut"],"kind":"struct"},"2:4711:769":{"crate_id":2,"path":["core","iter"],"kind":"module"},"2:2843:4868":{"crate_id":2,"path":["core","ops","bit","ShlAssign"],"kind":"trait"},"12:2190:64326":{"crate_id":12,"path":["hashbrown","raw","Fallibility"],"kind":"enum"},"5:6451:6725":{"crate_id":5,"path":["alloc","vec","retain_mut","BackshiftOnDrop"],"kind":"struct"},"16:6188:6035":{"crate_id":16,"path":["gimli","read","aranges","ArangeHeader"],"kind":"struct"},"17:12850:7514":{"crate_id":17,"path":["object","pe","ImageSymbolBytes"],"kind":"struct"},"1:7847:4226":{"crate_id":1,"path":["std","thread","local","AccessError"],"kind":"struct"},"9:33:5786":{"crate_id":9,"path":["miniz_oxide","deflate","buffer","LocalBuf"],"kind":"struct"},"17:11054:7074":{"crate_id":17,"path":["object","elf","CompressionHeader32"],"kind":"struct"},"2:4254:3329":{"crate_id":2,"path":["core","cell","BorrowRef"],"kind":"struct"},"17:10233:48783":{"crate_id":17,"path":["object","read","pe","file","PeComdat"],"kind":"struct"},"17:12948:7536":{"crate_id":17,"path":["object","pe","ImageAuxSymbolCrc"],"kind":"struct"},"6:4294:8410":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_constant_effect"],"kind":"struct"},"16:4565:7757":{"crate_id":16,"path":["gimli","constants","DwId"],"kind":"struct"},"1:969:4765":{"crate_id":1,"path":["std","collections","hash","map","IntoValues"],"kind":"struct"},"22:0:1620":{"crate_id":22,"path":["proc_macro2"],"kind":"module"},"2:5372:4923":{"crate_id":2,"path":["core","iter","adapters","flatten","FlatMap"],"kind":"struct"},"5:3339:3253":{"crate_id":5,"path":["alloc","collections","linked_list","Iter"],"kind":"struct"},"16:6337:6039":{"crate_id":16,"path":["gimli","read","line","LineRows"],"kind":"struct"},"17:10270:48761":{"crate_id":17,"path":["object","read","pe","section","PeSegment"],"kind":"struct"},"17:8055:6309":{"crate_id":17,"path":["object","common","Architecture"],"kind":"enum"},"5:2949:5619":{"crate_id":5,"path":["alloc","collections","btree","set","DifferenceInner"],"kind":"enum"},"24:5414:3191":{"crate_id":24,"path":["syn","ty","TypeInfer"],"kind":"struct"},"1:5504:185":{"crate_id":1,"path":["std","path","Path"],"kind":"struct"},"17:10708:6411":{"crate_id":17,"path":["object","read","ObjectMap"],"kind":"struct"},"24:5196:1772":{"crate_id":24,"path":["syn","derive","Data"],"kind":"enum"},"17:12768:7493":{"crate_id":17,"path":["object","pe","AnonObjectHeader"],"kind":"struct"},"24:4928:3163":{"crate_id":24,"path":["syn","expr","ExprTuple"],"kind":"struct"},"17:13148:7587":{"crate_id":17,"path":["object","pe","ImageResourceDataEntry"],"kind":"struct"},"1:11681:4899":{"crate_id":1,"path":["std","sys_common","process","CommandEnvs"],"kind":"struct"},"6:4761:8583":{"crate_id":6,"path":["libc","unix","linux_like","linux","af_alg_iv"],"kind":"struct"},"21:2758:1767":{"crate_id":21,"path":["proc_macro","Ident"],"kind":"struct"},"2:7063:119":{"crate_id":2,"path":["core","iter","traits","double_ended","DoubleEndedIterator"],"kind":"trait"},"2:46939:101":{"crate_id":2,"path":["core","ffi","c_str","CStr"],"kind":"struct"},"24:4349:3476":{"crate_id":24,"path":["syn","token","Star"],"kind":"struct"},"1:774:139":{"crate_id":1,"path":["std","collections","hash","map","HashMap"],"kind":"struct"},"17:10532:126":{"crate_id":17,"path":["object","read","Error"],"kind":"struct"},"1:2397:5053":{"crate_id":1,"path":["std","fs","read_link"],"kind":"function"},"1:5707:4889":{"crate_id":1,"path":["std","process","Command"],"kind":"struct"},"6:4212:8370":{"crate_id":6,"path":["libc","unix","linux_like","linux","msginfo"],"kind":"struct"},"5:1301:94":{"crate_id":5,"path":["alloc","collections","btree","map","BTreeMap"],"kind":"struct"},"16:5402:6009":{"crate_id":16,"path":["gimli","read","cfi","EhFrameHdr"],"kind":"struct"},"2:8597:3351":{"crate_id":2,"path":["core","fmt","UpperExp"],"kind":"trait"},"2:20409:17465":{"crate_id":2,"path":["core","core_simd","masks","to_bitmask","ToBitMask"],"kind":"trait"},"1:8137:4708":{"crate_id":1,"path":["std","io","buffered","IntoInnerError"],"kind":"struct"},"17:11761:7215":{"crate_id":17,"path":["object","macho","SubFrameworkCommand"],"kind":"struct"},"2:53660:5351":{"crate_id":2,"path":["core","core_arch","simd","u16x32"],"kind":"struct"},"2:8591:3353":{"crate_id":2,"path":["core","fmt","UpperHex"],"kind":"trait"},"5:4061:4680":{"crate_id":5,"path":["alloc","collections","vec_deque","write_iter_wrapping","Guard"],"kind":"struct"},"1:12387:3001":{"crate_id":1,"path":["std","i16"],"kind":"primitive"},"24:830:6511":{"crate_id":24,"path":["syn","lit","LitIntRepr"],"kind":"struct"},"11:44:5847":{"crate_id":11,"path":["adler","Adler32"],"kind":"struct"},"1:7868:4200":{"crate_id":1,"path":["std","thread","Builder"],"kind":"struct"},"17:13176:7594":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation32"],"kind":"struct"},"6:5772:8784":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_data"],"kind":"union"},"6:5472:8641":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","statx_timestamp"],"kind":"struct"},"18:671:6466":{"crate_id":18,"path":["memchr","memmem","FindRevIter"],"kind":"struct"},"1:11588:9276":{"crate_id":1,"path":["std","sys","unix","time","Timespec"],"kind":"struct"},"1:8794:3684":{"crate_id":1,"path":["std","panic","BacktraceStyle"],"kind":"enum"},"2:8306:5404":{"crate_id":2,"path":["core","fmt","builders","PadAdapter"],"kind":"struct"},"1:8761:4831":{"crate_id":1,"path":["std","os","fd","owned","BorrowedFd"],"kind":"struct"},"2:4051:3340":{"crate_id":2,"path":["core","cell","lazy","LazyCell"],"kind":"struct"},"12:1681:141":{"crate_id":12,"path":["hashbrown","set","HashSet"],"kind":"struct"},"2:4664:12254":{"crate_id":2,"path":["core","ffi","c_void"],"kind":"enum"},"17:8339:48494":{"crate_id":17,"path":["object","common","RelocationEncoding"],"kind":"enum"},"1:11714:9277":{"crate_id":1,"path":["std","sys_common","wtf8","CodePoint"],"kind":"struct"},"24:3315:3433":{"crate_id":24,"path":["syn","token","Virtual"],"kind":"struct"},"17:13221:7604":{"crate_id":17,"path":["object","pe","ImageEpilogueDynamicRelocationHeader"],"kind":"struct"},"2:50916:206":{"crate_id":2,"path":["core","future","ResumeTy"],"kind":"struct"},"16:2885:6245":{"crate_id":16,"path":["gimli","common","UnitSectionOffset"],"kind":"enum"},"9:622:5737":{"crate_id":9,"path":["miniz_oxide","deflate","core","TDEFLFlush"],"kind":"enum"},"24:4920:3161":{"crate_id":24,"path":["syn","expr","ExprTry"],"kind":"struct"},"2:29489:4288":{"crate_id":2,"path":["core","mem","manually_drop","ManuallyDrop"],"kind":"struct"},"14:31:9943":{"crate_id":14,"path":["rustc_demangle","v0","Demangle"],"kind":"struct"},"24:4562:3130":{"crate_id":24,"path":["syn","data","Visibility"],"kind":"enum"},"21:998:1622":{"crate_id":21,"path":["proc_macro","bridge","client","TokenStream"],"kind":"struct"},"24:3333:3434":{"crate_id":24,"path":["syn","token","Where"],"kind":"struct"},"3:223:205":{"crate_id":3,"path":["compiler_builtins","float","cmp","Result"],"kind":"enum"},"16:4348:7751":{"crate_id":16,"path":["gimli","constants","DwEnd"],"kind":"struct"},"2:46327:5266":{"crate_id":2,"path":["core","ops","index_range","IndexRange"],"kind":"struct"},"21:1072:1831":{"crate_id":21,"path":["proc_macro","bridge","client","Span"],"kind":"struct"},"1:9466:9696":{"crate_id":1,"path":["std","sync","mpmc","array","ArrayToken"],"kind":"struct"},"1:451:4224":{"crate_id":1,"path":["std","thread","scoped","Scope"],"kind":"struct"},"1:10663:4898":{"crate_id":1,"path":["std","sys","unix","pipe","AnonPipe"],"kind":"struct"},"17:13478:7692":{"crate_id":17,"path":["object","pe","ImageDebugDirectory"],"kind":"struct"},"1:12379:2995":{"crate_id":1,"path":["std","slice"],"kind":"primitive"},"24:4173:3463":{"crate_id":24,"path":["syn","token","OrOr"],"kind":"struct"},"2:46402:197":{"crate_id":2,"path":["core","ops","range","RangeTo"],"kind":"struct"},"6:5835:8797":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","sigset_t"],"kind":"struct"},"17:8871:48495":{"crate_id":17,"path":["object","read","any","SegmentIterator"],"kind":"struct"},"2:48385:88":{"crate_id":2,"path":["core","sync","atomic","AtomicU16"],"kind":"struct"},"1:7858:58765":{"crate_id":1,"path":["std","thread","local","fast","DtorState"],"kind":"enum"},"24:3369:241":{"crate_id":24,"path":["syn","token","Yield"],"kind":"struct"},"16:2674:6233":{"crate_id":16,"path":["gimli","common","DebugRngListsBase"],"kind":"struct"},"2:29729:5504":{"crate_id":2,"path":["core","ptr","alignment","AlignmentEnum64"],"kind":"enum"},"2:8585:3343":{"crate_id":2,"path":["core","fmt","Octal"],"kind":"trait"},"6:0:790":{"crate_id":6,"path":["libc"],"kind":"module"},"6:1678:8269":{"crate_id":6,"path":["libc","unix","linux_like","arpreq_old"],"kind":"struct"},"16:6115:5953":{"crate_id":16,"path":["gimli","read","abbrev","Abbreviations"],"kind":"struct"},"2:25198:5304":{"crate_id":2,"path":["core","num","wrapping","Wrapping"],"kind":"struct"},"6:5684:8755":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","Elf64_Chdr"],"kind":"struct"},"17:8701:6965":{"crate_id":17,"path":["object","endian","I64Bytes"],"kind":"struct"},"2:20435:5315":{"crate_id":2,"path":["core","core_simd","masks","MaskElement"],"kind":"trait"},"2:38123:4070":{"crate_id":2,"path":["core","cmp","Reverse"],"kind":"struct"},"2:21725:172":{"crate_id":2,"path":["core","num","nonzero","NonZeroU64"],"kind":"struct"},"17:8494:6960":{"crate_id":17,"path":["object","endian","LittleEndian"],"kind":"struct"},"17:13231:7609":{"crate_id":17,"path":["object","pe","ImageLoadConfigDirectory32"],"kind":"struct"},"16:2762:6237":{"crate_id":16,"path":["gimli","common","DebugStrOffsetsIndex"],"kind":"struct"},"17:12874:7516":{"crate_id":17,"path":["object","pe","ImageSymbolExBytes"],"kind":"struct"},"17:9831:6435":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCacheImageIterator"],"kind":"struct"},"1:12375:2992":{"crate_id":1,"path":["std","unit"],"kind":"primitive"},"16:5210:6961":{"crate_id":16,"path":["gimli","endianity","BigEndian"],"kind":"struct"},"2:7720:3694":{"crate_id":2,"path":["core","panic","unwind_safe","RefUnwindSafe"],"kind":"trait"},"2:50276:5434":{"crate_id":2,"path":["core","str","iter","SplitWhitespace"],"kind":"struct"},"1:6783:5029":{"crate_id":1,"path":["std","sync","poison","TryLockError"],"kind":"enum"},"2:20007:62761":{"crate_id":2,"path":["core","core_simd","swizzle","interleave","Lo"],"kind":"struct"},"2:50419:5234":{"crate_id":2,"path":["core","str","pattern","MultiCharEqSearcher"],"kind":"struct"},"2:9471:4977":{"crate_id":2,"path":["core","slice","iter","RSplit"],"kind":"struct"},"1:9618:4756":{"crate_id":1,"path":["std","time","Instant"],"kind":"struct"},"1:2901:205":{"crate_id":1,"path":["std","io","error","Result"],"kind":"typedef"},"24:4535:1823":{"crate_id":24,"path":["syn","data","Fields"],"kind":"enum"},"17:11271:7111":{"crate_id":17,"path":["object","elf","Verdef"],"kind":"struct"},"2:20235:4667":{"crate_id":2,"path":["core","core_simd","elements","sealed","Sealed"],"kind":"trait"},"2:52988:5334":{"crate_id":2,"path":["core","core_arch","simd","i32x8"],"kind":"struct"},"14:187:46802":{"crate_id":14,"path":["rustc_demangle","SizeLimitedFmtAdapter"],"kind":"struct"},"2:2243:105":{"crate_id":2,"path":["core","clone","Clone"],"kind":"trait"},"2:50997:4990":{"crate_id":2,"path":["core","alloc","layout","LayoutError"],"kind":"struct"},"24:4852:3145":{"crate_id":24,"path":["syn","expr","ExprForLoop"],"kind":"struct"},"1:9429:4822":{"crate_id":1,"path":["std","sync","mpsc","TrySendError"],"kind":"enum"},"17:1962:6373":{"crate_id":17,"path":["object","read","elf","relocation","ElfSectionRelocationIterator"],"kind":"struct"},"17:8991:64361":{"crate_id":17,"path":["object","read","any","ComdatIteratorInternal"],"kind":"enum"},"9:956:5692":{"crate_id":9,"path":["miniz_oxide","DataFormat"],"kind":"enum"},"18:660:6465":{"crate_id":18,"path":["memchr","memmem","FindIter"],"kind":"struct"},"16:6571:6044":{"crate_id":16,"path":["gimli","read","line","CompleteLineProgram"],"kind":"struct"},"2:11875:200":{"crate_id":2,"path":["core","task","ready","Ready"],"kind":"struct"},"17:9539:6324":{"crate_id":17,"path":["object","read","elf","section","ElfSection"],"kind":"struct"},"2:2920:2186":{"crate_id":2,"path":["core","ops","drop","Drop"],"kind":"trait"},"2:21315:61603":{"crate_id":2,"path":["core","num","fmt","Part"],"kind":"enum"},"5:3419:6714":{"crate_id":5,"path":["alloc","collections","linked_list","drop","DropGuard"],"kind":"struct"},"2:54121:9190":{"crate_id":2,"path":["core","core_arch","x86","__m128bh"],"kind":"struct"},"24:640:3174":{"crate_id":24,"path":["syn","generics","Turbofish"],"kind":"struct"},"18:719:6470":{"crate_id":18,"path":["memchr","memmem","NeedleInfo"],"kind":"struct"},"17:12103:7281":{"crate_id":17,"path":["object","macho","EncryptionInfoCommand32"],"kind":"struct"},"16:6276:5984":{"crate_id":16,"path":["gimli","read","index","UnitIndex"],"kind":"struct"},"17:9631:6322":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdatIterator"],"kind":"struct"},"22:108:64503":{"crate_id":22,"path":["proc_macro2","rcvec","RcVecBuilder"],"kind":"struct"},"17:12884:7517":{"crate_id":17,"path":["object","pe","ImageAuxSymbolTokenDef"],"kind":"struct"},"17:12748:7487":{"crate_id":17,"path":["object","pe","ImageRomHeaders"],"kind":"struct"},"6:4267:8397":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_mask"],"kind":"struct"},"1:9384:4819":{"crate_id":1,"path":["std","sync","mpsc","RecvError"],"kind":"struct"},"4:0:2961":{"crate_id":4,"path":["rustc_std_workspace_core"],"kind":"module"},"16:7413:5998":{"crate_id":16,"path":["gimli","read","rnglists","RawRange"],"kind":"struct"},"1:1938:5040":{"crate_id":1,"path":["std","error","Report"],"kind":"struct"},"1:8812:4998":{"crate_id":1,"path":["std","path","Prefix"],"kind":"enum"},"2:8593:189":{"crate_id":2,"path":["core","fmt","Pointer"],"kind":"trait"},"16:2332:6247":{"crate_id":16,"path":["gimli","common","DebugAbbrevOffset"],"kind":"struct"},"2:20284:4883":{"crate_id":2,"path":["core","core_simd","lane_count","SupportedLaneCount"],"kind":"trait"},"2:21692:171":{"crate_id":2,"path":["core","num","nonzero","NonZeroU32"],"kind":"struct"},"2:3608:3252":{"crate_id":2,"path":["core","array","iter","IntoIter"],"kind":"struct"},"12:1866:4838":{"crate_id":12,"path":["hashbrown","set","SymmetricDifference"],"kind":"struct"},"2:19962:4070":{"crate_id":2,"path":["core","core_simd","swizzle","reverse","Reverse"],"kind":"struct"},"12:777:5849":{"crate_id":12,"path":["hashbrown","map","ConsumeAllOnDrop"],"kind":"struct"},"16:6230:6037":{"crate_id":16,"path":["gimli","read","aranges","ArangeEntry"],"kind":"struct"},"17:12972:7541":{"crate_id":17,"path":["object","pe","ImageBaseRelocation"],"kind":"struct"},"1:574:4213":{"crate_id":1,"path":["std","thread","Packet"],"kind":"struct"},"24:4864:3148":{"crate_id":24,"path":["syn","expr","ExprIndex"],"kind":"struct"},"2:46765:9395":{"crate_id":2,"path":["core","async_iter","from_iter","FromIter"],"kind":"struct"},"24:5037:2193":{"crate_id":24,"path":["syn","generics","TypeParamBound"],"kind":"enum"},"2:48102:3257":{"crate_id":2,"path":["core","option","IterMut"],"kind":"struct"},"2:47092:4916":{"crate_id":2,"path":["core","iter","adapters","cloned","Cloned"],"kind":"struct"},"2:50152:5428":{"crate_id":2,"path":["core","str","iter","MatchIndices"],"kind":"struct"},"6:6975:8979":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","align","max_align_t"],"kind":"struct"},"6:4257:8394":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_keymap_entry"],"kind":"struct"},"2:3900:4680":{"crate_id":2,"path":["core","array","Guard"],"kind":"struct"},"17:13536:7709":{"crate_id":17,"path":["object","pe","ImageSeparateDebugHeader"],"kind":"struct"},"1:12028:5887":{"crate_id":1,"path":["std","backtrace_rs","backtrace","libunwind","Frame"],"kind":"enum"},"2:48034:176":{"crate_id":2,"path":["core","option","Option"],"kind":"enum"},"24:4796:3132":{"crate_id":24,"path":["syn","expr","ExprAssign"],"kind":"struct"},"1:12388:3002":{"crate_id":1,"path":["std","i32"],"kind":"primitive"},"16:7825:6063":{"crate_id":16,"path":["gimli","read","unit","AttrsIter"],"kind":"struct"},"16:3017:6885":{"crate_id":16,"path":["gimli","arch","Arm"],"kind":"struct"},"2:21261:9024":{"crate_id":2,"path":["core","num","flt2dec","decoder","Decoded"],"kind":"struct"},"24:5220:1979":{"crate_id":24,"path":["syn","derive","DataUnion"],"kind":"struct"},"2:2668:223":{"crate_id":2,"path":["core","marker","Sync"],"kind":"trait"},"17:12087:7279":{"crate_id":17,"path":["object","macho","FilesetEntryCommand"],"kind":"struct"},"1:12216:6764":{"crate_id":1,"path":["std","backtrace_rs","symbolize","gimli","mmap","Mmap"],"kind":"struct"},"1:910:3252":{"crate_id":1,"path":["std","collections","hash","map","IntoIter"],"kind":"struct"},"5:2732:3422":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Mut"],"kind":"struct"},"24:5061:2115":{"crate_id":24,"path":["syn","generics","WhereClause"],"kind":"struct"},"6:5510:8660":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","glob64_t"],"kind":"struct"},"5:3753:6714":{"crate_id":5,"path":["alloc","collections","vec_deque","drain","drop","DropGuard"],"kind":"struct"},"2:11094:5233":{"crate_id":2,"path":["core","str","pattern","MultiCharEqPattern"],"kind":"struct"},"17:9328:6426":{"crate_id":17,"path":["object","read","coff","section","CoffSegment"],"kind":"struct"},"12:1852:4836":{"crate_id":12,"path":["hashbrown","set","Intersection"],"kind":"struct"},"9:0:2963":{"crate_id":9,"path":["miniz_oxide"],"kind":"module"},"12:738:4762":{"crate_id":12,"path":["hashbrown","map","Values"],"kind":"struct"},"2:47527:4331":{"crate_id":2,"path":["core","iter","sources","repeat","Repeat"],"kind":"struct"},"16:7227:6054":{"crate_id":16,"path":["gimli","read","op","Evaluation"],"kind":"struct"},"16:4912:7768":{"crate_id":16,"path":["gimli","constants","DwRle"],"kind":"struct"},"2:51827:5360":{"crate_id":2,"path":["core","core_arch","simd","u8x8"],"kind":"struct"},"20:226:2055":{"crate_id":20,"path":["quote","__private","push_lifetime","Lifetime"],"kind":"struct"},"2:20404:4667":{"crate_id":2,"path":["core","core_simd","masks","to_bitmask","sealed","Sealed"],"kind":"trait"},"17:10583:6315":{"crate_id":17,"path":["object","read","ObjectKind"],"kind":"enum"},"16:4777:7764":{"crate_id":16,"path":["gimli","constants","DwLns"],"kind":"struct"},"1:3267:4714":{"crate_id":1,"path":["std","io","stdio","Stderr"],"kind":"struct"},"17:12797:7501":{"crate_id":17,"path":["object","pe","AnonObjectHeaderBigobj"],"kind":"struct"},"24:5510:2191":{"crate_id":24,"path":["syn","path","QSelf"],"kind":"struct"},"6:646:41260":{"crate_id":6,"path":["libc","unix","linux_like","timezone"],"kind":"enum"},"6:4489:5104":{"crate_id":6,"path":["libc","unix","linux_like","linux","ucred"],"kind":"struct"},"24:1494:1761":{"crate_id":24,"path":["syn","punctuated","Punctuated"],"kind":"struct"},"12:1065:5858":{"crate_id":12,"path":["hashbrown","map","KeyOrRef"],"kind":"enum"},"1:11778:6763":{"crate_id":1,"path":["std","sys_common","thread_local_key","Key"],"kind":"struct"},"24:4440:2149":{"crate_id":24,"path":["syn","token","Paren"],"kind":"struct"},"6:600:8144":{"crate_id":6,"path":["libc","unix","servent"],"kind":"struct"},"2:52447:9131":{"crate_id":2,"path":["core","core_arch","simd","m8x16"],"kind":"struct"},"6:5554:8682":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","mallinfo"],"kind":"struct"},"17:10332:6452":{"crate_id":17,"path":["object","read","pe","export","ExportTarget"],"kind":"enum"},"24:4074:3456":{"crate_id":24,"path":["syn","token","Gt"],"kind":"struct"},"17:11813:7222":{"crate_id":17,"path":["object","macho","PreboundDylibCommand"],"kind":"struct"},"17:12674:7476":{"crate_id":17,"path":["object","pe","ImageRomOptionalHeader"],"kind":"struct"},"1:8575:5138":{"crate_id":1,"path":["std","net","parser","AddrParseError"],"kind":"struct"},"17:11436:7144":{"crate_id":17,"path":["object","macho","DyldCacheHeader"],"kind":"struct"},"6:4300:8412":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_ramp_effect"],"kind":"struct"},"20:135:3721":{"crate_id":20,"path":["quote","__private","HasIterator"],"kind":"struct"},"1:1611:4562":{"crate_id":1,"path":["std","collections","hash","set","Drain"],"kind":"struct"},"2:1825:3339":{"crate_id":2,"path":["core","ptr","non_null","NonNull"],"kind":"struct"},"1:3402:4668":{"crate_id":1,"path":["std","io","Read"],"kind":"trait"},"24:4904:3157":{"crate_id":24,"path":["syn","expr","ExprReference"],"kind":"struct"},"24:4792:3131":{"crate_id":24,"path":["syn","expr","ExprArray"],"kind":"struct"},"1:1967:5041":{"crate_id":1,"path":["std","error","Indented"],"kind":"struct"},"1:12378:2994":{"crate_id":1,"path":["std","array"],"kind":"primitive"},"12:119:5865":{"crate_id":12,"path":["hashbrown","raw","RawTable"],"kind":"struct"},"5:768:96":{"crate_id":5,"path":["alloc","collections","binary_heap","BinaryHeap"],"kind":"struct"},"2:2731:1793":{"crate_id":2,"path":["core","marker","Tuple"],"kind":"trait"},"16:0:2969":{"crate_id":16,"path":["gimli"],"kind":"module"},"24:1682:3253":{"crate_id":24,"path":["syn","punctuated","Iter"],"kind":"struct"},"17:8911:64349":{"crate_id":17,"path":["object","read","any","SegmentInternal"],"kind":"enum"},"24:2865:3418":{"crate_id":24,"path":["syn","token","Let"],"kind":"struct"},"16:8047:126":{"crate_id":16,"path":["gimli","read","Error"],"kind":"enum"},"24:5138:3177":{"crate_id":24,"path":["syn","lit","LitByteStr"],"kind":"struct"},"12:2184:7996":{"crate_id":12,"path":["hashbrown","raw","bitmask","BitMask"],"kind":"struct"},"1:8735:4846":{"crate_id":1,"path":["std","os","linux","process","PidFd"],"kind":"struct"},"17:12060:7275":{"crate_id":17,"path":["object","macho","RpathCommand"],"kind":"struct"},"5:3794:3257":{"crate_id":5,"path":["alloc","collections","vec_deque","iter_mut","IterMut"],"kind":"struct"},"2:49960:4953":{"crate_id":2,"path":["core","str","error","ParseBoolError"],"kind":"struct"},"16:5194:6960":{"crate_id":16,"path":["gimli","endianity","LittleEndian"],"kind":"struct"},"2:2485:232":{"crate_id":2,"path":["core","convert","TryInto"],"kind":"trait"},"2:21890:166":{"crate_id":2,"path":["core","num","nonzero","NonZeroI32"],"kind":"struct"},"5:36:4470":{"crate_id":5,"path":["alloc","raw_vec","RawVec"],"kind":"struct"},"16:6101:5955":{"crate_id":16,"path":["gimli","read","abbrev","DebugAbbrev"],"kind":"struct"},"16:2424:6226":{"crate_id":16,"path":["gimli","common","DebugInfoOffset"],"kind":"struct"},"1:11238:59011":{"crate_id":1,"path":["std","sys","unix","kernel_copy","SpliceMode"],"kind":"enum"},"5:3900:3253":{"crate_id":5,"path":["alloc","collections","vec_deque","iter","Iter"],"kind":"struct"},"17:1903:48593":{"crate_id":17,"path":["object","read","elf","relocation","ElfRelaIterator"],"kind":"enum"},"1:965:4764":{"crate_id":1,"path":["std","collections","hash","map","IntoKeys"],"kind":"struct"},"0:947:1641":{"crate_id":0,"path":["serde_derive","Deserialize"],"kind":"proc_derive"},"1:686:12251":{"crate_id":1,"path":["std","backtrace","BytesOrWide"],"kind":"enum"},"17:10445:6412":{"crate_id":17,"path":["object","read","pe","relocation","Relocation"],"kind":"struct"},"1:1626:4837":{"crate_id":1,"path":["std","collections","hash","set","Difference"],"kind":"struct"},"16:2358:6229":{"crate_id":16,"path":["gimli","common","DebugAddrBase"],"kind":"struct"},"1:9307:4892":{"crate_id":1,"path":["std","process","ExitStatus"],"kind":"struct"},"21:2712:1756":{"crate_id":21,"path":["proc_macro","Group"],"kind":"struct"},"24:2757:3413":{"crate_id":24,"path":["syn","token","Final"],"kind":"struct"},"17:11841:7226":{"crate_id":17,"path":["object","macho","ThreadCommand"],"kind":"struct"},"2:20159:5213":{"crate_id":2,"path":["core","core_simd","elements","float","SimdFloat"],"kind":"trait"},"17:12349:7323":{"crate_id":17,"path":["object","macho","RelocationInfo"],"kind":"struct"},"2:52494:9132":{"crate_id":2,"path":["core","core_arch","simd","m16x8"],"kind":"struct"},"1:2383:5050":{"crate_id":1,"path":["std","fs","symlink_metadata"],"kind":"function"},"6:4575:8502":{"crate_id":6,"path":["libc","unix","linux_like","linux","regmatch_t"],"kind":"struct"},"17:9930:6979":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandData"],"kind":"struct"},"5:6725:4469":{"crate_id":5,"path":["alloc","alloc","Global"],"kind":"struct"},"6:7266:9006":{"crate_id":6,"path":["libc","unix","linux_like","linux","canfd_frame"],"kind":"struct"},"17:8368:6312":{"crate_id":17,"path":["object","common","FileFlags"],"kind":"enum"},"2:46541:3330":{"crate_id":2,"path":["core","any","tags","Ref"],"kind":"struct"},"24:2811:3415":{"crate_id":24,"path":["syn","token","If"],"kind":"struct"},"17:8162:6358":{"crate_id":17,"path":["object","common","SectionKind"],"kind":"enum"},"24:4202:3465":{"crate_id":24,"path":["syn","token","Question"],"kind":"struct"},"2:52082:5361":{"crate_id":2,"path":["core","core_arch","simd","u8x16"],"kind":"struct"},"2:2814:4840":{"crate_id":2,"path":["core","ops","bit","BitXor"],"kind":"trait"},"24:4144:3461":{"crate_id":24,"path":["syn","token","Or"],"kind":"struct"},"1:9608:213":{"crate_id":1,"path":["std","sync","rwlock","RwLockReadGuard"],"kind":"struct"},"2:48613:92":{"crate_id":2,"path":["core","sync","atomic","AtomicUsize"],"kind":"struct"},"16:2740:6236":{"crate_id":16,"path":["gimli","common","DebugStrOffsetsBase"],"kind":"struct"},"2:54083:9188":{"crate_id":2,"path":["core","core_arch","x86","__m512"],"kind":"struct"},"24:2847:3417":{"crate_id":24,"path":["syn","token","In"],"kind":"struct"},"17:12022:7271":{"crate_id":17,"path":["object","macho","TwolevelHint"],"kind":"struct"},"17:9274:48550":{"crate_id":17,"path":["object","read","archive","ArchiveMember"],"kind":"struct"},"1:5693:4888":{"crate_id":1,"path":["std","process","ChildStderr"],"kind":"struct"},"24:2577:99":{"crate_id":24,"path":["syn","token","Break"],"kind":"struct"},"5:6914:5636":{"crate_id":5,"path":["alloc","ffi","c_str","NulError"],"kind":"struct"},"1:3468:58379":{"crate_id":1,"path":["std","io","Write","write_fmt","Adapter"],"kind":"struct"},"17:10075:48678":{"crate_id":17,"path":["object","read","macho","segment","MachOSegment"],"kind":"struct"},"24:4272:3470":{"crate_id":24,"path":["syn","token","FatArrow"],"kind":"struct"},"24:4301:3472":{"crate_id":24,"path":["syn","token","Shl"],"kind":"struct"},"17:11576:7190":{"crate_id":17,"path":["object","macho","MachHeader64"],"kind":"struct"},"2:7086:3384":{"crate_id":2,"path":["core","iter","traits","exact_size","ExactSizeIterator"],"kind":"trait"},"16:5365:5956":{"crate_id":16,"path":["gimli","read","addr","DebugAddr"],"kind":"struct"},"24:5095:1843":{"crate_id":24,"path":["syn","lit","Lit"],"kind":"enum"},"12:60:64328":{"crate_id":12,"path":["hashbrown","raw","bitmask","BitMaskIter"],"kind":"struct"},"17:12148:7288":{"crate_id":17,"path":["object","macho","BuildVersionCommand"],"kind":"struct"},"21:246:64421":{"crate_id":21,"path":["proc_macro","bridge","handle","OwnedStore"],"kind":"struct"},"1:5085:4663":{"crate_id":1,"path":["std","os","fd","owned","AsFd"],"kind":"trait"},"1:4310:4654":{"crate_id":1,"path":["std","os","unix","fs","DirEntryExt"],"kind":"trait"},"17:10608:6316":{"crate_id":17,"path":["object","read","SectionIndex"],"kind":"struct"},"2:47301:4939":{"crate_id":2,"path":["core","iter","adapters","take_while","TakeWhile"],"kind":"struct"},"6:4427:8456":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Sym"],"kind":"struct"},"1:4742:4845":{"crate_id":1,"path":["std","os","unix","process","CommandExt"],"kind":"trait"},"5:4428:651":{"crate_id":5,"path":["alloc","fmt"],"kind":"module"},"12:320:5863":{"crate_id":12,"path":["hashbrown","raw","RawIntoIter"],"kind":"struct"},"1:6230:201":{"crate_id":1,"path":["std","sync","mpmc","counter","Receiver"],"kind":"struct"},"24:3825:3440":{"crate_id":24,"path":["syn","token","At"],"kind":"struct"},"16:7489:5938":{"crate_id":16,"path":["gimli","read","UnitOffset"],"kind":"struct"},"1:12384:2998":{"crate_id":1,"path":["std","f32"],"kind":"primitive"},"2:2792:4754":{"crate_id":2,"path":["core","ops","arith","RemAssign"],"kind":"trait"},"6:6293:8847":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","flock"],"kind":"struct"},"24:5087:3172":{"crate_id":24,"path":["syn","generics","PredicateLifetime"],"kind":"struct"},"12:1044:5857":{"crate_id":12,"path":["hashbrown","map","EntryRef"],"kind":"enum"},"2:21824:168":{"crate_id":2,"path":["core","num","nonzero","NonZeroI8"],"kind":"struct"},"1:979:4767":{"crate_id":1,"path":["std","collections","hash","map","RawEntryMut"],"kind":"enum"},"17:12617:7438":{"crate_id":17,"path":["object","pe","ImageFileHeader"],"kind":"struct"},"6:4398:8454":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Ehdr"],"kind":"struct"},"1:339:160":{"crate_id":1,"path":["std","thread","local","LocalKey"],"kind":"struct"},"2:9267:3253":{"crate_id":2,"path":["core","slice","iter","Iter"],"kind":"struct"},"1:8944:5011":{"crate_id":1,"path":["std","path","Components"],"kind":"struct"},"1:2399:5054":{"crate_id":1,"path":["std","fs","canonicalize"],"kind":"function"},"1:3228:4718":{"crate_id":1,"path":["std","io","stdio","Stdout"],"kind":"struct"},"24:56:2002":{"crate_id":24,"path":["syn","token"],"kind":"module"},"2:48152:3692":{"crate_id":2,"path":["core","panic","panic_info","PanicInfo"],"kind":"struct"},"16:7256:6056":{"crate_id":16,"path":["gimli","read","pubnames","DebugPubNames"],"kind":"struct"},"6:135:40927":{"crate_id":6,"path":["libc","unix","fpos_t"],"kind":"enum"},"16:3590:7741":{"crate_id":16,"path":["gimli","constants","DwSectV2"],"kind":"struct"},"24:4337:3475":{"crate_id":24,"path":["syn","token","ShrEq"],"kind":"struct"},"10:0:2964":{"crate_id":10,"path":["rustc_std_workspace_alloc"],"kind":"module"},"5:842:5630":{"crate_id":5,"path":["alloc","collections","binary_heap","Hole"],"kind":"struct"},"14:202:2284":{"crate_id":14,"path":["rustc_demangle","v0","ParseError"],"kind":"enum"},"2:8850:4781":{"crate_id":2,"path":["core","hash","BuildHasher"],"kind":"trait"},"5:1033:64024":{"crate_id":5,"path":["alloc","collections","btree","append","MergeIter"],"kind":"struct"},"21:2613:3362":{"crate_id":21,"path":["proc_macro","ExpandError"],"kind":"struct"},"22:865:1756":{"crate_id":22,"path":["proc_macro2","Group"],"kind":"struct"},"15:214:5883":{"crate_id":15,"path":["addr2line","RangeAttributes"],"kind":"struct"},"2:2983:3262":{"crate_id":2,"path":["core","ops","index","IndexMut"],"kind":"trait"},"2:52628:5362":{"crate_id":2,"path":["core","core_arch","simd","u8x32"],"kind":"struct"},"1:545:4206":{"crate_id":1,"path":["std","thread","PanicGuard"],"kind":"struct"},"12:1628:6712":{"crate_id":12,"path":["hashbrown","scopeguard","ScopeGuard"],"kind":"struct"},"6:513:8091":{"crate_id":6,"path":["libc","unix","rlimit"],"kind":"struct"},"2:10812:5430":{"crate_id":2,"path":["core","str","iter","MatchesInternal"],"kind":"struct"},"2:46527:2549":{"crate_id":2,"path":["core","any","tags","Value"],"kind":"struct"},"6:5672:8748":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","regex_t"],"kind":"struct"},"22:662:9320":{"crate_id":22,"path":["proc_macro2","rcvec","RcVecIntoIter"],"kind":"struct"},"1:6407:6749":{"crate_id":1,"path":["std","sync","mpmc","waker","SyncWaker"],"kind":"struct"},"5:3096:4560":{"crate_id":5,"path":["alloc","collections","btree","set","DrainFilter"],"kind":"struct"},"2:49946:5516":{"crate_id":2,"path":["core","str","error","Utf8Error"],"kind":"struct"},"17:11536:7182":{"crate_id":17,"path":["object","macho","FatArch32"],"kind":"struct"},"5:6881:3291":{"crate_id":5,"path":["alloc","collections","TryReserveErrorKind"],"kind":"enum"},"1:2513:4706":{"crate_id":1,"path":["std","io","buffered","bufreader","BufReader"],"kind":"struct"},"17:9712:6975":{"crate_id":17,"path":["object","read","elf","version","VersionIndex"],"kind":"struct"},"18:624:64367":{"crate_id":18,"path":["memchr","memmem","twoway","SuffixOrdering"],"kind":"enum"},"2:52782:5357":{"crate_id":2,"path":["core","core_arch","simd","u64x4"],"kind":"struct"},"6:5568:8692":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","mallinfo2"],"kind":"struct"},"2:9110:4667":{"crate_id":2,"path":["core","slice","index","private_slice_index","Sealed"],"kind":"trait"},"6:6479:8932":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user"],"kind":"struct"},"17:13091:7571":{"crate_id":17,"path":["object","pe","ImageBoundForwarderRef"],"kind":"struct"},"16:4626:7759":{"crate_id":16,"path":["gimli","constants","DwInl"],"kind":"struct"},"24:3801:3438":{"crate_id":24,"path":["syn","token","AndAnd"],"kind":"struct"},"1:2903:126":{"crate_id":1,"path":["std","io","error","Error"],"kind":"struct"},"2:4309:3331":{"crate_id":2,"path":["core","cell","BorrowRefMut"],"kind":"struct"},"24:1579:3249":{"crate_id":24,"path":["syn","punctuated","Pairs"],"kind":"struct"},"17:10949:7046":{"crate_id":17,"path":["object","elf","FileHeader32"],"kind":"struct"},"2:50717:5444":{"crate_id":2,"path":["core","str","LinesAnyMap"],"kind":"struct"},"2:51703:9121":{"crate_id":2,"path":["core","core_arch","simd","i8x2"],"kind":"struct"},"1:6313:6742":{"crate_id":1,"path":["std","sync","mpmc","list","Channel"],"kind":"struct"},"2:11834:4464":{"crate_id":2,"path":["core","task","wake","Context"],"kind":"struct"},"5:1415:4765":{"crate_id":5,"path":["alloc","collections","btree","map","IntoValues"],"kind":"struct"},"21:1397:1847":{"crate_id":21,"path":["proc_macro","bridge","symbol","Symbol"],"kind":"struct"},"21:53:4604":{"crate_id":21,"path":["proc_macro","bridge","buffer","Buffer"],"kind":"struct"},"2:9578:4982":{"crate_id":2,"path":["core","slice","iter","SplitNMut"],"kind":"struct"},"24:4033:123":{"crate_id":24,"path":["syn","token","Eq"],"kind":"struct"},"24:5190:1623":{"crate_id":24,"path":["syn","derive","DeriveInput"],"kind":"struct"},"1:3459:3349":{"crate_id":1,"path":["std","io","Write"],"kind":"trait"},"24:5142:3178":{"crate_id":24,"path":["syn","lit","LitChar"],"kind":"struct"},"6:4768:8586":{"crate_id":6,"path":["libc","unix","linux_like","linux","mq_attr"],"kind":"struct"},"16:6308:6038":{"crate_id":16,"path":["gimli","read","index","UnitIndexSection"],"kind":"struct"},"5:6928:5511":{"crate_id":5,"path":["alloc","ffi","c_str","FromBytesWithNulErrorKind"],"kind":"enum"},"5:6319:4568":{"crate_id":5,"path":["alloc","vec","in_place_drop","InPlaceDstBufDrop"],"kind":"struct"},"18:690:6468":{"crate_id":18,"path":["memchr","memmem","FinderRev"],"kind":"struct"},"16:5536:6017":{"crate_id":16,"path":["gimli","read","cfi","CieOrFde"],"kind":"enum"},"2:50721:5447":{"crate_id":2,"path":["core","str","CharEscapeDebugContinue"],"kind":"struct"},"1:8703:5097":{"crate_id":1,"path":["std","os","unix","net","ancillary","SocketAncillary"],"kind":"struct"},"6:4200:8365":{"crate_id":6,"path":["libc","unix","linux_like","linux","cpu_set_t"],"kind":"struct"},"2:50959:5457":{"crate_id":2,"path":["core","task","wake","RawWaker"],"kind":"struct"},"1:8611:4800":{"crate_id":1,"path":["std","net","socket_addr","SocketAddrV4"],"kind":"struct"},"24:584:64676":{"crate_id":24,"path":["syn","generics","TypeParams"],"kind":"struct"},"22:700:1831":{"crate_id":22,"path":["proc_macro2","fallback","Span"],"kind":"struct"},"18:574:6873":{"crate_id":18,"path":["memchr","memmem","twoway","Forward"],"kind":"struct"},"17:8774:6310":{"crate_id":17,"path":["object","read","util","ByteString"],"kind":"struct"},"22:722:2474":{"crate_id":22,"path":["proc_macro2","fallback","Literal"],"kind":"struct"},"24:5003:2414":{"crate_id":24,"path":["syn","generics","TypeParam"],"kind":"struct"},"24:1903:2476":{"crate_id":24,"path":["syn","spanned","Spanned"],"kind":"trait"},"1:10733:4889":{"crate_id":1,"path":["std","sys","unix","process","process_common","Command"],"kind":"struct"},"24:4219:3466":{"crate_id":24,"path":["syn","token","RArrow"],"kind":"struct"},"24:3009:3424":{"crate_id":24,"path":["syn","token","Priv"],"kind":"struct"},"2:56569:5464":{"crate_id":2,"path":["core","core_simd","swizzle","Which"],"kind":"enum"},"1:12385:2999":{"crate_id":1,"path":["std","f64"],"kind":"primitive"},"1:9532:6050":{"crate_id":1,"path":["std","sync","mpmc","select","Operation"],"kind":"struct"},"5:5424:4562":{"crate_id":5,"path":["alloc","string","Drain"],"kind":"struct"},"24:4804:3134":{"crate_id":24,"path":["syn","expr","ExprAsync"],"kind":"struct"},"24:1414:3263":{"crate_id":24,"path":["syn","drops","NoDrop"],"kind":"struct"},"2:8578:110":{"crate_id":2,"path":["core","fmt","Debug"],"kind":"trait"},"16:3557:7740":{"crate_id":16,"path":["gimli","constants","DwSect"],"kind":"struct"},"16:5758:6024":{"crate_id":16,"path":["gimli","read","cfi","RegisterRuleIter"],"kind":"struct"},"17:11235:7106":{"crate_id":17,"path":["object","elf","Dyn32"],"kind":"struct"},"17:12278:7313":{"crate_id":17,"path":["object","macho","DataInCodeEntry"],"kind":"struct"},"6:1562:8186":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_ll"],"kind":"struct"},"17:10854:6372":{"crate_id":17,"path":["object","read","CompressionFormat"],"kind":"enum"},"5:3004:1804":{"crate_id":5,"path":["alloc","collections","btree","set","Union"],"kind":"struct"},"1:6707:4790":{"crate_id":1,"path":["std","sync","once_lock","OnceLock"],"kind":"struct"},"2:46382:194":{"crate_id":2,"path":["core","ops","range","RangeFrom"],"kind":"struct"},"6:4152:8335":{"crate_id":6,"path":["libc","unix","linux_like","linux","signalfd_siginfo"],"kind":"struct"},"1:4244:4649":{"crate_id":1,"path":["std","os","unix","fs","FileExt"],"kind":"trait"},"16:7907:6064":{"crate_id":16,"path":["gimli","read","unit","EntriesTreeNode"],"kind":"struct"},"2:48271:84":{"crate_id":2,"path":["core","sync","atomic","AtomicI8"],"kind":"struct"},"1:11570:4757":{"crate_id":1,"path":["std","sys","unix","time","SystemTime"],"kind":"struct"},"1:10750:58431":{"crate_id":1,"path":["std","sys","unix","process","process_common","Argv"],"kind":"struct"},"17:0:2970":{"crate_id":17,"path":["object"],"kind":"module"},"6:1541:8171":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_in6"],"kind":"struct"},"17:1771:6327":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbolIterator"],"kind":"struct"},"24:94:4667":{"crate_id":24,"path":["syn","token","private","Sealed"],"kind":"trait"},"24:4843:3143":{"crate_id":24,"path":["syn","expr","ExprContinue"],"kind":"struct"},"1:6836:5080":{"crate_id":1,"path":["std","sync","remutex","ReentrantMutex"],"kind":"struct"},"1:6780:5119":{"crate_id":1,"path":["std","sync","poison","PoisonError"],"kind":"struct"},"6:131:40926":{"crate_id":6,"path":["libc","unix","FILE"],"kind":"enum"},"5:4031:6716":{"crate_id":5,"path":["alloc","collections","vec_deque","drop","Dropper"],"kind":"struct"},"6:1608:8215":{"crate_id":6,"path":["libc","unix","linux_like","lconv"],"kind":"struct"},"1:11228:4690":{"crate_id":1,"path":["std","sys","unix","io","IoSlice"],"kind":"struct"},"2:29623:5503":{"crate_id":2,"path":["core","ptr","alignment","AlignmentEnum32"],"kind":"enum"},"1:8711:5086":{"crate_id":1,"path":["std","os","unix","net","listener","Incoming"],"kind":"struct"},"5:6757:5632":{"crate_id":5,"path":["alloc","collections","binary_heap","DrainSorted"],"kind":"struct"},"1:8717:5105":{"crate_id":1,"path":["std","os","unix","ucred","UCred"],"kind":"struct"},"16:7287:6059":{"crate_id":16,"path":["gimli","read","pubtypes","DebugPubTypes"],"kind":"struct"},"16:6697:6260":{"crate_id":16,"path":["gimli","read","loclists","LocListsFormat"],"kind":"enum"},"18:481:6476":{"crate_id":18,"path":["memchr","cow","CowBytes"],"kind":"struct"},"17:11300:7122":{"crate_id":17,"path":["object","elf","Verneed"],"kind":"struct"},"17:10257:48762":{"crate_id":17,"path":["object","read","pe","section","PeSegmentIterator"],"kind":"struct"},"2:39319:4827":{"crate_id":2,"path":["core","error","Source"],"kind":"struct"},"6:4437:8457":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Phdr"],"kind":"struct"},"2:50745:5445":{"crate_id":2,"path":["core","str","BytesIsNotEmpty"],"kind":"struct"},"1:4322:4648":{"crate_id":1,"path":["std","os","unix","fs","DirBuilderExt"],"kind":"trait"},"17:9844:6436":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCacheImage"],"kind":"struct"},"1:12395:3009":{"crate_id":1,"path":["std","u128"],"kind":"primitive"},"1:8440:4699":{"crate_id":1,"path":["std","io","Lines"],"kind":"struct"},"1:9524:1820":{"crate_id":1,"path":["std","sync","mpmc","select","Token"],"kind":"struct"},"2:21238:5175":{"crate_id":2,"path":["core","num","dec2flt","FloatErrorKind"],"kind":"enum"},"2:4685:62132":{"crate_id":2,"path":["core","ffi","sealed_trait","VaArgSafe"],"kind":"trait"},"16:2456:6253":{"crate_id":16,"path":["gimli","common","DebugLineOffset"],"kind":"struct"},"6:6424:8894":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_xmmreg"],"kind":"struct"},"24:2118:3298":{"crate_id":24,"path":["syn","parse","ParseBuffer"],"kind":"struct"},"17:11661:7202":{"crate_id":17,"path":["object","macho","Section32"],"kind":"struct"},"2:46885:5437":{"crate_id":2,"path":["core","char","EscapeDebug"],"kind":"struct"},"1:990:4768":{"crate_id":1,"path":["std","collections","hash","map","RawOccupiedEntryMut"],"kind":"struct"},"24:1665:3252":{"crate_id":24,"path":["syn","punctuated","IntoIter"],"kind":"struct"},"17:9791:9328":{"crate_id":17,"path":["object","read","elf","version","VernauxIterator"],"kind":"struct"},"24:4584:3127":{"crate_id":24,"path":["syn","data","VisCrate"],"kind":"struct"},"7:0:1488":{"crate_id":7,"path":["unwind"],"kind":"module"},"24:592:64679":{"crate_id":24,"path":["syn","generics","TypeParamsMut"],"kind":"struct"},"18:564:6481":{"crate_id":18,"path":["memchr","memmem","rarebytes","RareNeedleBytes"],"kind":"struct"},"5:276:1814":{"crate_id":5,"path":["alloc","boxed","Box"],"kind":"struct"},"15:0:2968":{"crate_id":15,"path":["addr2line"],"kind":"module"},"2:1636:572":{"crate_id":2,"path":["core","mem","drop"],"kind":"function"},"9:896:5696":{"crate_id":9,"path":["miniz_oxide","MZStatus"],"kind":"enum"},"1:1811:593":{"crate_id":1,"path":["std","env"],"kind":"module"},"1:9613:214":{"crate_id":1,"path":["std","sync","rwlock","RwLockWriteGuard"],"kind":"struct"},"2:53202:5343":{"crate_id":2,"path":["core","core_arch","simd","i8x64"],"kind":"struct"},"2:53408:5363":{"crate_id":2,"path":["core","core_arch","simd","u8x64"],"kind":"struct"},"18:538:6480":{"crate_id":18,"path":["memchr","memmem","rabinkarp","NeedleHash"],"kind":"struct"},"1:11756:9437":{"crate_id":1,"path":["std","sys_common","wtf8","Wtf8CodePoints"],"kind":"struct"},"2:46869:5577":{"crate_id":2,"path":["core","char","EscapeDefaultState"],"kind":"enum"},"24:5411:3190":{"crate_id":24,"path":["syn","ty","TypeImplTrait"],"kind":"struct"},"1:2029:179":{"crate_id":1,"path":["std","ffi","os_str","OsStr"],"kind":"struct"},"24:2469:3403":{"crate_id":24,"path":["syn","token","As"],"kind":"struct"},"16:6178:6034":{"crate_id":16,"path":["gimli","read","aranges","ArangeHeaderIter"],"kind":"struct"},"20:0:1069":{"crate_id":20,"path":["quote"],"kind":"module"},"24:5091:3171":{"crate_id":24,"path":["syn","generics","PredicateEq"],"kind":"struct"},"24:4821:3138":{"crate_id":24,"path":["syn","expr","ExprBox"],"kind":"struct"},"2:9359:4983":{"crate_id":2,"path":["core","slice","iter","SplitInclusive"],"kind":"struct"},"16:4840:7766":{"crate_id":16,"path":["gimli","constants","DwLnct"],"kind":"struct"},"1:8532:1831":{"crate_id":1,"path":["std","net","ip_addr","fmt","Span"],"kind":"struct"},"2:21758:169":{"crate_id":2,"path":["core","num","nonzero","NonZeroU128"],"kind":"struct"},"2:6422:2594":{"crate_id":2,"path":["core","iter","adapters","zip","zip"],"kind":"function"},"20:45:3110":{"crate_id":20,"path":["quote","ident_fragment","IdentFragment"],"kind":"trait"},"13:220:7995":{"crate_id":13,"path":["std_detect","detect","cache","Initializer"],"kind":"struct"},"12:1085:5859":{"crate_id":12,"path":["hashbrown","map","OccupiedEntryRef"],"kind":"struct"},"17:9553:6336":{"crate_id":17,"path":["object","read","elf","symbol","SymbolTable"],"kind":"struct"},"2:47536:6736":{"crate_id":2,"path":["core","iter","sources","repeat_n","RepeatN"],"kind":"struct"},"13:108:64332":{"crate_id":13,"path":["std_detect","detect","arch","x86","Feature"],"kind":"enum"},"2:48229:3257":{"crate_id":2,"path":["core","result","IterMut"],"kind":"struct"},"17:9339:6427":{"crate_id":17,"path":["object","read","coff","section","CoffSectionIterator"],"kind":"struct"},"24:2116:1838":{"crate_id":24,"path":["syn","parse","ParseStream"],"kind":"typedef"},"17:10875:6355":{"crate_id":17,"path":["object","read","CompressedFileRange"],"kind":"struct"},"17:9700:6374":{"crate_id":17,"path":["object","read","elf","hash","GnuHashTable"],"kind":"struct"},"17:11774:7217":{"crate_id":17,"path":["object","macho","SubClientCommand"],"kind":"struct"},"20:349:3876":{"crate_id":20,"path":["quote","__private","RepInterp"],"kind":"struct"},"24:5394:3187":{"crate_id":24,"path":["syn","ty","TypeArray"],"kind":"struct"},"5:6980:219":{"crate_id":5,"path":["alloc","string","String"],"kind":"struct"},"17:13572:7713":{"crate_id":17,"path":["object","pe","ImageArchitectureEntry"],"kind":"struct"},"2:56926:240":{"crate_id":2,"path":["core","core_simd","fmt","fmt","Wrapper"],"kind":"struct"},"9:800:8051":{"crate_id":9,"path":["miniz_oxide","inflate","core","LocalVars"],"kind":"struct"},"1:5824:4896":{"crate_id":1,"path":["std","process","Termination"],"kind":"trait"},"17:8796:6317":{"crate_id":17,"path":["object","read","util","StringTable"],"kind":"struct"},"16:7992:2549":{"crate_id":16,"path":["gimli","read","value","Value"],"kind":"enum"},"17:11951:7257":{"crate_id":17,"path":["object","macho","DylibModule32"],"kind":"struct"},"2:8528:3349":{"crate_id":2,"path":["core","fmt","Write"],"kind":"trait"},"1:10508:13254":{"crate_id":1,"path":["std","sys","unix","os","SplitPaths"],"kind":"struct"},"2:53908:5338":{"crate_id":2,"path":["core","core_arch","simd","i64x8"],"kind":"struct"},"16:7321:5965":{"crate_id":16,"path":["gimli","read","rnglists","DebugRngLists"],"kind":"struct"},"17:13184:7596":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation64"],"kind":"struct"},"18:681:6467":{"crate_id":18,"path":["memchr","memmem","Finder"],"kind":"struct"},"1:7922:12246":{"crate_id":1,"path":["std","backtrace","BacktraceStatus"],"kind":"enum"},"17:9061:6336":{"crate_id":17,"path":["object","read","any","SymbolTable"],"kind":"struct"},"17:8941:48496":{"crate_id":17,"path":["object","read","any","SectionIterator"],"kind":"struct"},"17:8596:6962":{"crate_id":17,"path":["object","endian","U64Bytes"],"kind":"struct"},"6:5699:8757":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","seminfo"],"kind":"struct"},"2:46786:5308":{"crate_id":2,"path":["core","char","convert","CharErrorKind"],"kind":"enum"},"5:6957:5638":{"crate_id":5,"path":["alloc","ffi","c_str","IntoStringError"],"kind":"struct"},"17:11559:7187":{"crate_id":17,"path":["object","macho","MachHeader32"],"kind":"struct"},"1:4423:5143":{"crate_id":1,"path":["std","os","unix","net","ancillary","ScmRights"],"kind":"struct"},"2:7721:3693":{"crate_id":2,"path":["core","panic","unwind_safe","AssertUnwindSafe"],"kind":"struct"},"2:52035:9124":{"crate_id":2,"path":["core","core_arch","simd","f64x1"],"kind":"struct"},"6:5443:8617":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","statx"],"kind":"struct"},"6:1654:8252":{"crate_id":6,"path":["libc","unix","linux_like","in6_rtmsg"],"kind":"struct"},"2:2909:3338":{"crate_id":2,"path":["core","ops","deref","DerefMut"],"kind":"trait"},"18:755:6473":{"crate_id":18,"path":["memchr","memmem","SearcherRev"],"kind":"struct"},"22:869:3271":{"crate_id":22,"path":["proc_macro2","Delimiter"],"kind":"enum"},"2:49326:4796":{"crate_id":2,"path":["core","hash","sip","SipHasher"],"kind":"struct"},"17:9031:64353":{"crate_id":17,"path":["object","read","any","ComdatSectionIteratorInternal"],"kind":"enum"},"16:5424:6010":{"crate_id":16,"path":["gimli","read","cfi","ParsedEhFrameHdr"],"kind":"struct"},"16:4680:7761":{"crate_id":16,"path":["gimli","constants","DwDsc"],"kind":"struct"},"24:4412:2467":{"crate_id":24,"path":["syn","token","Brace"],"kind":"struct"},"2:56952:240":{"crate_id":2,"path":["core","core_simd","fmt","fmt","Wrapper"],"kind":"struct"},"6:62:40860":{"crate_id":6,"path":["libc","unix","DIR"],"kind":"enum"},"17:13492:7694":{"crate_id":17,"path":["object","pe","ImageCoffSymbolsHeader"],"kind":"struct"},"2:48773:2240":{"crate_id":2,"path":["core","fmt","num","Binary"],"kind":"struct"},"1:9567:9271":{"crate_id":1,"path":["std","sync","mpmc","utils","CachePadded"],"kind":"struct"},"18:707:5229":{"crate_id":18,"path":["memchr","memmem","Searcher"],"kind":"struct"},"24:4479:2101":{"crate_id":24,"path":["syn","attr","Attribute"],"kind":"struct"},"17:8212:6410":{"crate_id":17,"path":["object","common","ComdatKind"],"kind":"enum"},"2:3076:3276":{"crate_id":2,"path":["core","ops","range","RangeBounds"],"kind":"trait"},"17:10296:48759":{"crate_id":17,"path":["object","read","pe","section","PeSection"],"kind":"struct"},"17:9658:48604":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdatSectionIterator"],"kind":"struct"},"1:9913:5045":{"crate_id":1,"path":["std","sys","unix","fs","ReadDir"],"kind":"struct"},"1:11363:56612":{"crate_id":1,"path":["std","sys","unix","process","process_common","ProgramKind"],"kind":"enum"},"1:6919:59500":{"crate_id":1,"path":["std","sync","rwlock","fmt","LockedPlaceholder"],"kind":"struct"},"17:10221:48782":{"crate_id":17,"path":["object","read","pe","file","PeComdatIterator"],"kind":"struct"},"24:2487:3404":{"crate_id":24,"path":["syn","token","Async"],"kind":"struct"},"1:9321:4893":{"crate_id":1,"path":["std","process","ExitStatusError"],"kind":"struct"},"22:895:1830":{"crate_id":22,"path":["proc_macro2","Spacing"],"kind":"enum"},"1:5009:4673":{"crate_id":1,"path":["std","os","fd","raw","FromRawFd"],"kind":"trait"},"16:4740:7763":{"crate_id":16,"path":["gimli","constants","DwDefaulted"],"kind":"struct"},"16:6441:6041":{"crate_id":16,"path":["gimli","read","line","LineInstructions"],"kind":"struct"},"12:274:9375":{"crate_id":12,"path":["hashbrown","raw","RawIterRange"],"kind":"struct"},"1:944:4562":{"crate_id":1,"path":["std","collections","hash","map","Drain"],"kind":"struct"},"2:20028:62763":{"crate_id":2,"path":["core","core_simd","swizzle","deinterleave","Even"],"kind":"struct"},"2:46972:5512":{"crate_id":2,"path":["core","ffi","c_str","FromBytesUntilNulError"],"kind":"struct"},"2:49810:4967":{"crate_id":2,"path":["core","slice","iter","ChunksExact"],"kind":"struct"},"16:6219:6036":{"crate_id":16,"path":["gimli","read","aranges","ArangeEntryIter"],"kind":"struct"},"24:5416:3192":{"crate_id":24,"path":["syn","ty","TypeMacro"],"kind":"struct"},"6:5595:8699":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_mmap_hdr"],"kind":"struct"},"24:4884:3153":{"crate_id":24,"path":["syn","expr","ExprMatch"],"kind":"struct"},"17:12630:7445":{"crate_id":17,"path":["object","pe","ImageDataDirectory"],"kind":"struct"},"12:822:4767":{"crate_id":12,"path":["hashbrown","map","RawEntryMut"],"kind":"enum"},"16:6124:6004":{"crate_id":16,"path":["gimli","read","abbrev","Abbreviation"],"kind":"struct"},"12:393:64329":{"crate_id":12,"path":["hashbrown","raw","RawIterHashInner"],"kind":"struct"},"24:5064:1901":{"crate_id":24,"path":["syn","generics","WherePredicate"],"kind":"enum"},"2:10577:5594":{"crate_id":2,"path":["core","slice","GetManyMutError"],"kind":"struct"},"24:3135:1782":{"crate_id":24,"path":["syn","token","Struct"],"kind":"struct"},"17:9362:6336":{"crate_id":17,"path":["object","read","coff","symbol","SymbolTable"],"kind":"struct"},"17:10088:7011":{"crate_id":17,"path":["object","read","macho","segment","MachOSegmentInternal"],"kind":"struct"},"2:47019:6730":{"crate_id":2,"path":["core","ffi","VaListImpl"],"kind":"struct"},"22:916:2474":{"crate_id":22,"path":["proc_macro2","Literal"],"kind":"struct"},"17:11034:7073":{"crate_id":17,"path":["object","elf","SectionHeader64"],"kind":"struct"},"14:40:1767":{"crate_id":14,"path":["rustc_demangle","v0","Ident"],"kind":"struct"},"2:47224:4934":{"crate_id":2,"path":["core","iter","adapters","rev","Rev"],"kind":"struct"},"2:46759:3360":{"crate_id":2,"path":["core","ascii","EscapeDefault"],"kind":"struct"},"1:8643:5087":{"crate_id":1,"path":["std","net","tcp","IntoIncoming"],"kind":"struct"},"2:4187:3323":{"crate_id":2,"path":["core","cell","BorrowError"],"kind":"struct"},"2:49561:4962":{"crate_id":2,"path":["core","slice","ascii","EscapeAscii"],"kind":"struct"},"1:12372:2989":{"crate_id":1,"path":["std","bool"],"kind":"primitive"},"2:7719:3695":{"crate_id":2,"path":["core","panic","unwind_safe","UnwindSafe"],"kind":"trait"},"21:2565:3371":{"crate_id":21,"path":["proc_macro","diagnostic","Diagnostic"],"kind":"struct"},"17:11217:7105":{"crate_id":17,"path":["object","elf","ProgramHeader64"],"kind":"struct"},"24:0:1619":{"crate_id":24,"path":["syn"],"kind":"module"},"1:8410:4695":{"crate_id":1,"path":["std","io","Chain"],"kind":"struct"},"16:7350:6271":{"crate_id":16,"path":["gimli","read","rnglists","RangeListsFormat"],"kind":"enum"},"2:2220:97":{"crate_id":2,"path":["core","borrow","Borrow"],"kind":"trait"},"1:12398:3012":{"crate_id":1,"path":["std","reference"],"kind":"primitive"},"22:710:1756":{"crate_id":22,"path":["proc_macro2","fallback","Group"],"kind":"struct"},"2:50597:5244":{"crate_id":2,"path":["core","str","pattern","TwoWaySearcher"],"kind":"struct"},"16:6450:5876":{"crate_id":16,"path":["gimli","read","line","LineRow"],"kind":"struct"},"6:581:8134":{"crate_id":6,"path":["libc","unix","sigval"],"kind":"struct"},"1:1632:4838":{"crate_id":1,"path":["std","collections","hash","set","SymmetricDifference"],"kind":"struct"},"24:5032:3169":{"crate_id":24,"path":["syn","generics","BoundLifetimes"],"kind":"struct"},"22:676:3368":{"crate_id":22,"path":["proc_macro2","fallback","SourceFile"],"kind":"struct"},"2:6751:4723":{"crate_id":2,"path":["core","iter","sources","empty","Empty"],"kind":"struct"},"24:2901:2150":{"crate_id":24,"path":["syn","token","Macro"],"kind":"struct"},"6:1701:8279":{"crate_id":6,"path":["libc","unix","linux_like","epoll_event"],"kind":"struct"},"1:8637:5086":{"crate_id":1,"path":["std","net","tcp","Incoming"],"kind":"struct"},"17:9165:64347":{"crate_id":17,"path":["object","read","any","DynamicRelocationIteratorInternal"],"kind":"enum"},"6:6998:8990":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","align","sem_t"],"kind":"struct"},"5:667:226":{"crate_id":5,"path":["alloc","borrow","ToOwned"],"kind":"trait"},"21:2717:3271":{"crate_id":21,"path":["proc_macro","Delimiter"],"kind":"enum"},"16:2833:6211":{"crate_id":16,"path":["gimli","common","DebugFrameOffset"],"kind":"struct"},"24:2297:205":{"crate_id":24,"path":["syn","error","Result"],"kind":"typedef"},"2:6811:3322":{"crate_id":2,"path":["core","iter","sources","once","once"],"kind":"function"},"17:13126:7582":{"crate_id":17,"path":["object","pe","ImageResourceDirectoryEntry"],"kind":"struct"},"1:2248:127":{"crate_id":1,"path":["std","fs","File"],"kind":"struct"},"16:7404:5982":{"crate_id":16,"path":["gimli","read","rnglists","RngListIter"],"kind":"struct"},"2:20428:4667":{"crate_id":2,"path":["core","core_simd","masks","sealed","Sealed"],"kind":"trait"},"17:13007:7547":{"crate_id":17,"path":["object","pe","ImageExportDirectory"],"kind":"struct"},"17:13047:7557":{"crate_id":17,"path":["object","pe","ImageTlsDirectory64"],"kind":"struct"},"16:3680:7743":{"crate_id":16,"path":["gimli","constants","DwCfa"],"kind":"struct"},"2:10736:5423":{"crate_id":2,"path":["core","str","iter","SplitInternal"],"kind":"struct"},"2:51009:4467":{"crate_id":2,"path":["core","alloc","AllocError"],"kind":"struct"},"18:80:54925":{"crate_id":18,"path":["memchr","memchr","iter","Memchr"],"kind":"struct"},"6:4280:8402":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_trigger"],"kind":"struct"},"21:2697:1832":{"crate_id":21,"path":["proc_macro","TokenTree"],"kind":"enum"},"17:11721:7210":{"crate_id":17,"path":["object","macho","FvmlibCommand"],"kind":"struct"},"16:6632:6046":{"crate_id":16,"path":["gimli","read","line","FileEntryFormat"],"kind":"struct"},"6:4534:8481":{"crate_id":6,"path":["libc","unix","linux_like","linux","in6_pktinfo"],"kind":"struct"},"24:632:3173":{"crate_id":24,"path":["syn","generics","ImplGenerics"],"kind":"struct"},"1:3158:5072":{"crate_id":1,"path":["std","io","stdio","StderrRaw"],"kind":"struct"},"2:11605:134":{"crate_id":2,"path":["core","future","future","Future"],"kind":"trait"},"5:4934:4956":{"crate_id":5,"path":["alloc","slice","Concat"],"kind":"trait"},"6:4239:8385":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_id"],"kind":"struct"},"16:5574:6018":{"crate_id":16,"path":["gimli","read","cfi","Augmentation"],"kind":"struct"},"1:6638:59500":{"crate_id":1,"path":["std","sync","mutex","fmt","LockedPlaceholder"],"kind":"struct"},"24:5436:3197":{"crate_id":24,"path":["syn","ty","TypeSlice"],"kind":"struct"},"24:1611:3250":{"crate_id":24,"path":["syn","punctuated","PairsMut"],"kind":"struct"},"22:644:3311":{"crate_id":22,"path":["proc_macro2","parse","Cursor"],"kind":"struct"},"24:5140:3176":{"crate_id":24,"path":["syn","lit","LitByte"],"kind":"struct"},"1:628:2253":{"crate_id":1,"path":["std","ascii","AsciiExt"],"kind":"trait"},"2:51857:5348":{"crate_id":2,"path":["core","core_arch","simd","u16x4"],"kind":"struct"},"2:21253:9023":{"crate_id":2,"path":["core","num","diy_float","Fp"],"kind":"struct"},"21:2604:1622":{"crate_id":21,"path":["proc_macro","TokenStream"],"kind":"struct"},"17:12695:7481":{"crate_id":17,"path":["object","pe","ImageOptionalHeader64"],"kind":"struct"},"24:4924:3162":{"crate_id":24,"path":["syn","expr","ExprTryBlock"],"kind":"struct"},"1:8368:4724":{"crate_id":1,"path":["std","io","util","Sink"],"kind":"struct"},"1:5678:4887":{"crate_id":1,"path":["std","process","ChildStdout"],"kind":"struct"},"2:47286:4696":{"crate_id":2,"path":["core","iter","adapters","take","Take"],"kind":"struct"},"16:7095:6223":{"crate_id":16,"path":["gimli","read","op","EvaluationState"],"kind":"enum"},"5:0:280":{"crate_id":5,"path":["alloc"],"kind":"module"},"5:2736:56594":{"crate_id":5,"path":["alloc","collections","btree","node","marker","ValMut"],"kind":"struct"},"16:2648:6243":{"crate_id":16,"path":["gimli","common","RangeListsOffset"],"kind":"struct"},"6:1714:8282":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_storage"],"kind":"struct"},"16:6794:6264":{"crate_id":16,"path":["gimli","read","lookup","DebugLookup"],"kind":"struct"},"16:3707:7744":{"crate_id":16,"path":["gimli","constants","DwChildren"],"kind":"struct"},"16:7113:6224":{"crate_id":16,"path":["gimli","read","op","EvaluationWaiting"],"kind":"enum"},"2:11639:62073":{"crate_id":2,"path":["core","future","join","MaybeDone"],"kind":"enum"},"17:12609:7435":{"crate_id":17,"path":["object","pe","MaskedRichHeaderEntry"],"kind":"struct"},"1:1620:4836":{"crate_id":1,"path":["std","collections","hash","set","Intersection"],"kind":"struct"},"24:5448:3186":{"crate_id":24,"path":["syn","ty","BareFnArg"],"kind":"struct"},"2:6985:4928":{"crate_id":2,"path":["core","iter","traits","accum","Sum"],"kind":"trait"},"2:47162:4922":{"crate_id":2,"path":["core","iter","adapters","fuse","Fuse"],"kind":"struct"},"24:3963:3449":{"crate_id":24,"path":["syn","token","Dollar"],"kind":"struct"},"1:3477:4691":{"crate_id":1,"path":["std","io","Seek"],"kind":"trait"},"24:4091:3457":{"crate_id":24,"path":["syn","token","Le"],"kind":"struct"},"1:5007:4664":{"crate_id":1,"path":["std","os","fd","raw","AsRawFd"],"kind":"trait"},"5:1216:4772":{"crate_id":5,"path":["alloc","collections","btree","map","entry","OccupiedEntry"],"kind":"struct"},"2:53946:5358":{"crate_id":2,"path":["core","core_arch","simd","u64x8"],"kind":"struct"},"2:49902:4974":{"crate_id":2,"path":["core","slice","iter","RChunksExact"],"kind":"struct"},"5:6787:193":{"crate_id":5,"path":["alloc","collections","btree","set","Range"],"kind":"struct"},"2:2476:74":{"crate_id":2,"path":["core","convert","AsMut"],"kind":"trait"},"24:2829:3416":{"crate_id":24,"path":["syn","token","Impl"],"kind":"struct"},"2:52158:5353":{"crate_id":2,"path":["core","core_arch","simd","u32x4"],"kind":"struct"},"24:4829:3140":{"crate_id":24,"path":["syn","expr","ExprCall"],"kind":"struct"},"17:8561:6371":{"crate_id":17,"path":["object","endian","U32Bytes"],"kind":"struct"},"21:2551:3372":{"crate_id":21,"path":["proc_macro","diagnostic","Level"],"kind":"enum"},"17:10466:9331":{"crate_id":17,"path":["object","read","pe","resource","ResourceDirectoryTable"],"kind":"struct"},"6:6572:8972":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ucontext_t"],"kind":"struct"},"16:6807:6265":{"crate_id":16,"path":["gimli","read","lookup","LookupEntryIter"],"kind":"struct"},"5:1338:3253":{"crate_id":5,"path":["alloc","collections","btree","map","Iter"],"kind":"struct"},"16:7366:5980":{"crate_id":16,"path":["gimli","read","rnglists","RawRngListIter"],"kind":"struct"},"16:3845:7745":{"crate_id":16,"path":["gimli","constants","DwTag"],"kind":"struct"},"17:8441:6413":{"crate_id":17,"path":["object","common","SymbolFlags"],"kind":"enum"},"2:3176:5223":{"crate_id":2,"path":["core","ops","try_trait","NeverShortCircuitResidual"],"kind":"enum"},"17:11137:7089":{"crate_id":17,"path":["object","elf","Syminfo64"],"kind":"struct"},"17:9108:48499":{"crate_id":17,"path":["object","read","any","SymbolIterator"],"kind":"struct"},"16:7071:6051":{"crate_id":16,"path":["gimli","read","op","Piece"],"kind":"struct"},"5:2244:5662":{"crate_id":5,"path":["alloc","collections","btree","node","NodeRef"],"kind":"struct"},"1:7894:4212":{"crate_id":1,"path":["std","thread","Thread"],"kind":"struct"},"24:424:6854":{"crate_id":24,"path":["syn","expr","parsing","AllowStruct"],"kind":"struct"},"17:13141:7586":{"crate_id":17,"path":["object","pe","ImageResourceDirStringU"],"kind":"struct"},"17:13168:7593":{"crate_id":17,"path":["object","pe","ImageDynamicRelocationTable"],"kind":"struct"},"6:6375:8882":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statfs64"],"kind":"struct"},"17:12836:7510":{"crate_id":17,"path":["object","pe","ImageSymbol"],"kind":"struct"},"6:5713:8768":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ptrace_peeksiginfo_args"],"kind":"struct"},"2:50256:4699":{"crate_id":2,"path":["core","str","iter","Lines"],"kind":"struct"},"5:6407:238":{"crate_id":5,"path":["alloc","vec","Vec"],"kind":"struct"},"16:7266:6057":{"crate_id":16,"path":["gimli","read","pubnames","PubNamesEntryIter"],"kind":"struct"},"2:2473:75":{"crate_id":2,"path":["core","convert","AsRef"],"kind":"trait"},"6:4206:8367":{"crate_id":6,"path":["libc","unix","linux_like","linux","if_nameindex"],"kind":"struct"},"1:11218:117":{"crate_id":1,"path":["std","sys","unix","fs","DirBuilder"],"kind":"struct"},"16:2622:6244":{"crate_id":16,"path":["gimli","common","RawRangeListsOffset"],"kind":"struct"},"2:49791:4965":{"crate_id":2,"path":["core","slice","iter","Chunks"],"kind":"struct"},"12:1003:4772":{"crate_id":12,"path":["hashbrown","map","OccupiedEntry"],"kind":"struct"},"17:11748:7214":{"crate_id":17,"path":["object","macho","DylibCommand"],"kind":"struct"},"22:889:2160":{"crate_id":22,"path":["proc_macro2","Punct"],"kind":"struct"},"2:8815:142":{"crate_id":2,"path":["core","hash","Hasher"],"kind":"trait"},"24:3876:3443":{"crate_id":24,"path":["syn","token","CaretEq"],"kind":"struct"},"2:21626:173":{"crate_id":2,"path":["core","num","nonzero","NonZeroU8"],"kind":"struct"},"24:4313:3473":{"crate_id":24,"path":["syn","token","ShlEq"],"kind":"struct"},"1:8121:117":{"crate_id":1,"path":["std","fs","DirBuilder"],"kind":"struct"},"1:12397:3011":{"crate_id":1,"path":["std","usize"],"kind":"primitive"},"17:8981:48497":{"crate_id":17,"path":["object","read","any","ComdatIterator"],"kind":"struct"},"24:3934:3447":{"crate_id":24,"path":["syn","token","Div"],"kind":"struct"},"6:4540:8484":{"crate_id":6,"path":["libc","unix","linux_like","linux","arpd_request"],"kind":"struct"},"6:4286:8405":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_envelope"],"kind":"struct"},"16:2718:6235":{"crate_id":16,"path":["gimli","common","DebugStrOffset"],"kind":"struct"},"2:46838:5438":{"crate_id":2,"path":["core","char","EscapeUnicode"],"kind":"struct"},"6:1636:8240":{"crate_id":6,"path":["libc","unix","linux_like","in_pktinfo"],"kind":"struct"},"12:1872:1804":{"crate_id":12,"path":["hashbrown","set","Union"],"kind":"struct"},"2:51773:5339":{"crate_id":2,"path":["core","core_arch","simd","i8x4"],"kind":"struct"},"24:3189:228":{"crate_id":24,"path":["syn","token","Try"],"kind":"struct"},"17:13214:7602":{"crate_id":17,"path":["object","pe","ImagePrologueDynamicRelocationHeader"],"kind":"struct"},"2:2489:231":{"crate_id":2,"path":["core","convert","TryFrom"],"kind":"trait"},"24:4485:3121":{"crate_id":24,"path":["syn","attr","AttrStyle"],"kind":"enum"},"14:165:46796":{"crate_id":14,"path":["rustc_demangle","DemangleStyle"],"kind":"enum"},"2:54198:9193":{"crate_id":2,"path":["core","core_arch","x86","cpuid","CpuidResult"],"kind":"struct"},"2:10773:5426":{"crate_id":2,"path":["core","str","iter","SplitNInternal"],"kind":"struct"},"1:11900:5085":{"crate_id":1,"path":["std","sys_common","net","TcpListener"],"kind":"struct"},"7:32:46063":{"crate_id":7,"path":["unwind","libunwind","_Unwind_Reason_Code"],"kind":"enum"},"2:2780:4748":{"crate_id":2,"path":["core","ops","arith","SubAssign"],"kind":"trait"},"1:10984:4212":{"crate_id":1,"path":["std","sys","unix","thread","Thread"],"kind":"struct"},"6:4816:8613":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_can"],"kind":"struct"},"6:6415:8891":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_fpxreg"],"kind":"struct"},"16:6087:5981":{"crate_id":16,"path":["gimli","read","reader","ReaderOffsetId"],"kind":"struct"},"17:10321:6444":{"crate_id":17,"path":["object","read","pe","data_directory","DataDirectories"],"kind":"struct"},"2:2223:98":{"crate_id":2,"path":["core","borrow","BorrowMut"],"kind":"trait"},"12:300:5864":{"crate_id":12,"path":["hashbrown","raw","RawIter"],"kind":"struct"},"2:2705:4062":{"crate_id":2,"path":["core","marker","Freeze"],"kind":"trait"},"2:1552:4680":{"crate_id":2,"path":["core","mem","maybe_uninit","write_slice_cloned","Guard"],"kind":"struct"},"1:4252:4650":{"crate_id":1,"path":["std","os","unix","fs","PermissionsExt"],"kind":"trait"},"1:11198:5047":{"crate_id":1,"path":["std","sys","unix","fs","FileTimes"],"kind":"struct"},"1:9489:56607":{"crate_id":1,"path":["std","sync","mpmc","error","SendTimeoutError"],"kind":"enum"},"1:8220:4994":{"crate_id":1,"path":["std","io","error","Custom"],"kind":"struct"},"9:863:5694":{"crate_id":9,"path":["miniz_oxide","MZFlush"],"kind":"enum"},"2:11028:5227":{"crate_id":2,"path":["core","str","pattern","Pattern"],"kind":"trait"},"17:10822:48503":{"crate_id":17,"path":["object","read","RelocationTarget"],"kind":"enum"},"5:1230:4774":{"crate_id":5,"path":["alloc","collections","btree","map","entry","OccupiedError"],"kind":"struct"},"16:6682:5977":{"crate_id":16,"path":["gimli","read","loclists","LocationLists"],"kind":"struct"},"16:5175:46869":{"crate_id":16,"path":["gimli","endianity","RunTimeEndian"],"kind":"enum"},"1:2867:4996":{"crate_id":1,"path":["std","io","error","repr_bitpacked","Repr"],"kind":"struct"},"20:235:2055":{"crate_id":20,"path":["quote","__private","push_lifetime_spanned","Lifetime"],"kind":"struct"},"6:5523:8661":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","msghdr"],"kind":"struct"},"1:1637:1804":{"crate_id":1,"path":["std","collections","hash","set","Union"],"kind":"struct"},"6:4191:8360":{"crate_id":6,"path":["libc","unix","linux_like","linux","packet_mreq"],"kind":"struct"},"2:10187:6737":{"crate_id":2,"path":["core","slice","sort","CopyOnDrop"],"kind":"struct"},"6:4449:8458":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Phdr"],"kind":"struct"},"16:3179:7737":{"crate_id":16,"path":["gimli","arch","AArch64"],"kind":"struct"},"2:2718:3381":{"crate_id":2,"path":["core","marker","Unpin"],"kind":"trait"},"2:4183:202":{"crate_id":2,"path":["core","cell","RefCell"],"kind":"struct"},"5:6734:3252":{"crate_id":5,"path":["alloc","collections","binary_heap","IntoIter"],"kind":"struct"},"2:48246:178":{"crate_id":2,"path":["core","sync","atomic","Ordering"],"kind":"enum"},"17:10682:6416":{"crate_id":17,"path":["object","read","SymbolMapName"],"kind":"struct"},"22:672:3270":{"crate_id":22,"path":["proc_macro2","fallback","LexError"],"kind":"struct"},"6:6538:8963":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","seccomp_notif_sizes"],"kind":"struct"},"1:2253:4498":{"crate_id":1,"path":["std","fs","read"],"kind":"function"},"17:562:1847":{"crate_id":17,"path":["object","read","any","Symbol"],"kind":"struct"},"1:9452:5118":{"crate_id":1,"path":["std","sync","condvar","WaitTimeoutResult"],"kind":"struct"},"1:12399:3013":{"crate_id":1,"path":["std","fn"],"kind":"primitive"},"6:1511:8158":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreqn"],"kind":"struct"},"17:9401:6974":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbol"],"kind":"struct"},"2:50106:4981":{"crate_id":2,"path":["core","str","iter","SplitN"],"kind":"struct"},"17:10350:6311":{"crate_id":17,"path":["object","read","pe","export","Export"],"kind":"struct"},"1:11860:5084":{"crate_id":1,"path":["std","sys_common","net","TcpStream"],"kind":"struct"},"6:567:8126":{"crate_id":6,"path":["libc","unix","winsize"],"kind":"struct"},"17:12816:7502":{"crate_id":17,"path":["object","pe","ImageSectionHeader"],"kind":"struct"},"9:188:5761":{"crate_id":9,"path":["miniz_oxide","deflate","core","HuffmanOxide"],"kind":"struct"},"1:12374:2991":{"crate_id":1,"path":["std","char"],"kind":"primitive"},"2:21096:5476":{"crate_id":2,"path":["core","num","bignum","tests","Big8x3"],"kind":"struct"},"12:2198:7998":{"crate_id":12,"path":["hashbrown","raw","TableLayout"],"kind":"struct"},"6:4621:8524":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_filter"],"kind":"struct"},"2:6555:5300":{"crate_id":2,"path":["core","iter","adapters","GenericShunt"],"kind":"struct"},"17:10420:6446":{"crate_id":17,"path":["object","read","pe","relocation","RelocationBlockIterator"],"kind":"struct"},"1:11342:4844":{"crate_id":1,"path":["std","sys","unix","os_str","Buf"],"kind":"struct"},"1:8697:5145":{"crate_id":1,"path":["std","os","unix","net","ancillary","AncillaryError"],"kind":"enum"},"17:12291:7314":{"crate_id":17,"path":["object","macho","NoteCommand"],"kind":"struct"},"16:2784:6239":{"crate_id":16,"path":["gimli","common","DebugTypesOffset"],"kind":"struct"},"6:1887:42235":{"crate_id":6,"path":["libc","unix","linux_like","linux","fpos64_t"],"kind":"enum"},"6:1505:8155":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreq"],"kind":"struct"},"2:4118:3313":{"crate_id":2,"path":["core","cell","Cell"],"kind":"struct"},"17:11161:7093":{"crate_id":17,"path":["object","elf","Rela32"],"kind":"struct"},"2:47180:4925":{"crate_id":2,"path":["core","iter","adapters","intersperse","Intersperse"],"kind":"struct"},"24:4932:3164":{"crate_id":24,"path":["syn","expr","ExprType"],"kind":"struct"},"24:3045:3330":{"crate_id":24,"path":["syn","token","Ref"],"kind":"struct"},"21:2320:1767":{"crate_id":21,"path":["proc_macro","bridge","Ident"],"kind":"struct"},"17:9458:6299":{"crate_id":17,"path":["object","read","elf","file","ElfFile"],"kind":"struct"},"5:5513:69":{"crate_id":5,"path":["alloc","sync","Arc"],"kind":"struct"},"17:10385:6388":{"crate_id":17,"path":["object","read","pe","import","ImportDescriptorIterator"],"kind":"struct"},"2:21923:167":{"crate_id":2,"path":["core","num","nonzero","NonZeroI64"],"kind":"struct"},"1:2650:4709":{"crate_id":1,"path":["std","io","buffered","linewriter","LineWriter"],"kind":"struct"},"17:9021:48498":{"crate_id":17,"path":["object","read","any","ComdatSectionIterator"],"kind":"struct"},"17:11087:7080":{"crate_id":17,"path":["object","elf","Sym32"],"kind":"struct"},"20:137:3720":{"crate_id":20,"path":["quote","__private","ThereIsNoIteratorInRepetition"],"kind":"struct"},"24:3813:3439":{"crate_id":24,"path":["syn","token","AndEq"],"kind":"struct"},"1:6040:5113":{"crate_id":1,"path":["std","sync","condvar","Condvar"],"kind":"struct"},"24:2559:1814":{"crate_id":24,"path":["syn","token","Box"],"kind":"struct"},"17:9446:48565":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdatSectionIterator"],"kind":"struct"},"1:11675:9432":{"crate_id":1,"path":["std","sys_common","process","CommandEnv"],"kind":"struct"},"5:6991:5625":{"crate_id":5,"path":["alloc","string","FromUtf8Error"],"kind":"struct"},"2:8538:130":{"crate_id":2,"path":["core","fmt","Formatter"],"kind":"struct"},"1:8971:5014":{"crate_id":1,"path":["std","path","StripPrefixError"],"kind":"struct"},"17:9897:48704":{"crate_id":17,"path":["object","read","macho","file","MachOComdatSectionIterator"],"kind":"struct"},"2:1474:2188":{"crate_id":2,"path":["core","mem"],"kind":"module"},"16:7521:5959":{"crate_id":16,"path":["gimli","read","unit","DebugInfo"],"kind":"struct"},"24:4880:3152":{"crate_id":24,"path":["syn","expr","ExprMacro"],"kind":"struct"},"17:13071:7564":{"crate_id":17,"path":["object","pe","ImageImportDescriptor"],"kind":"struct"},"1:12393:3007":{"crate_id":1,"path":["std","u32"],"kind":"primitive"},"1:4970:4845":{"crate_id":1,"path":["std","os","linux","process","CommandExt"],"kind":"trait"},"1:4583:5102":{"crate_id":1,"path":["std","os","unix","net","listener","UnixListener"],"kind":"struct"},"17:10845:6412":{"crate_id":17,"path":["object","read","Relocation"],"kind":"struct"},"17:10528:6408":{"crate_id":17,"path":["object","read","traits","NoDynamicRelocationIterator"],"kind":"struct"},"17:11199:7097":{"crate_id":17,"path":["object","elf","ProgramHeader32"],"kind":"struct"},"6:4379:8453":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Ehdr"],"kind":"struct"},"2:51897:9122":{"crate_id":2,"path":["core","core_arch","simd","u64x1"],"kind":"struct"},"16:6820:9372":{"crate_id":16,"path":["gimli","read","lookup","PubStuffHeader"],"kind":"struct"},"17:11617:7194":{"crate_id":17,"path":["object","macho","SegmentCommand32"],"kind":"struct"},"18:590:6874":{"crate_id":18,"path":["memchr","memmem","twoway","TwoWay"],"kind":"struct"},"17:13158:7590":{"crate_id":17,"path":["object","pe","ImageLoadConfigCodeIntegrity"],"kind":"struct"},"17:11853:7227":{"crate_id":17,"path":["object","macho","RoutinesCommand32"],"kind":"struct"},"17:11708:7207":{"crate_id":17,"path":["object","macho","Fvmlib"],"kind":"struct"},"17:10670:6415":{"crate_id":17,"path":["object","read","SymbolMap"],"kind":"struct"},"2:2896:115":{"crate_id":2,"path":["core","ops","deref","Deref"],"kind":"trait"},"16:5472:6013":{"crate_id":16,"path":["gimli","read","cfi","CieOffsetEncoding"],"kind":"enum"},"24:4873:3150":{"crate_id":24,"path":["syn","expr","ExprLit"],"kind":"struct"},"16:2500:6242":{"crate_id":16,"path":["gimli","common","LocationListsOffset"],"kind":"struct"},"6:1686:8270":{"crate_id":6,"path":["libc","unix","linux_like","arphdr"],"kind":"struct"},"1:8862:5008":{"crate_id":1,"path":["std","path","State"],"kind":"enum"},"17:11734:6984":{"crate_id":17,"path":["object","macho","Dylib"],"kind":"struct"},"1:954:4560":{"crate_id":1,"path":["std","collections","hash","map","DrainFilter"],"kind":"struct"},"6:7226:8995":{"crate_id":6,"path":["libc","unix","linux_like","linux","fanotify_event_metadata"],"kind":"struct"},"2:50433:5237":{"crate_id":2,"path":["core","str","pattern","CharArraySearcher"],"kind":"struct"},"16:2311:5941":{"crate_id":16,"path":["gimli","common","Register"],"kind":"struct"},"2:56991:240":{"crate_id":2,"path":["core","core_simd","fmt","fmt","Wrapper"],"kind":"struct"},"1:8885:5009":{"crate_id":1,"path":["std","path","PrefixComponent"],"kind":"struct"},"5:2039:5659":{"crate_id":5,"path":["alloc","collections","btree","navigate","LazyLeafRange"],"kind":"struct"},"1:1091:4771":{"crate_id":1,"path":["std","collections","hash","map","Entry"],"kind":"enum"},"18:515:6478":{"crate_id":18,"path":["memchr","memmem","prefilter","PrefilterFn"],"kind":"struct"},"24:5308:3184":{"crate_id":24,"path":["syn","op","UnOp"],"kind":"enum"},"1:3951:4797":{"crate_id":1,"path":["std","net","socket_addr","ToSocketAddrs"],"kind":"trait"},"1:3230:4719":{"crate_id":1,"path":["std","io","stdio","StdoutLock"],"kind":"struct"},"6:4804:8608":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_txtime"],"kind":"struct"},"18:582:4070":{"crate_id":18,"path":["memchr","memmem","twoway","Reverse"],"kind":"struct"},"1:1828:13244":{"crate_id":1,"path":["std","env","VarsOs"],"kind":"struct"},"6:1532:8166":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_in"],"kind":"struct"},"16:6164:5957":{"crate_id":16,"path":["gimli","read","aranges","DebugAranges"],"kind":"struct"},"17:11800:7220":{"crate_id":17,"path":["object","macho","SubLibraryCommand"],"kind":"struct"},"2:49134:4156":{"crate_id":2,"path":["core","fmt","FlagV1"],"kind":"enum"},"17:9433:48561":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdat"],"kind":"struct"},"2:0:482":{"crate_id":2,"path":["core"],"kind":"module"},"5:1376:4761":{"crate_id":5,"path":["alloc","collections","btree","map","Keys"],"kind":"struct"},"2:50294:5436":{"crate_id":2,"path":["core","str","iter","EncodeUtf16"],"kind":"struct"},"2:11743:62074":{"crate_id":2,"path":["core","future","from_generator","GenFuture"],"kind":"struct"},"16:7307:6061":{"crate_id":16,"path":["gimli","read","rnglists","DebugRanges"],"kind":"struct"},"2:8148:86":{"crate_id":2,"path":["core","sync","atomic","AtomicPtr"],"kind":"struct"},"24:4812:3136":{"crate_id":24,"path":["syn","expr","ExprBinary"],"kind":"struct"},"17:9371:48499":{"crate_id":17,"path":["object","read","coff","symbol","SymbolIterator"],"kind":"struct"},"2:2479:145":{"crate_id":2,"path":["core","convert","Into"],"kind":"trait"},"12:1555:5871":{"crate_id":12,"path":["hashbrown","rustc_entry","RustcVacantEntry"],"kind":"struct"},"2:50052:5424":{"crate_id":2,"path":["core","str","iter","SplitTerminator"],"kind":"struct"},"17:11070:7078":{"crate_id":17,"path":["object","elf","CompressionHeader64"],"kind":"struct"},"24:4050:3454":{"crate_id":24,"path":["syn","token","EqEq"],"kind":"struct"},"24:3905:3445":{"crate_id":24,"path":["syn","token","Colon2"],"kind":"struct"},"2:54002:9181":{"crate_id":2,"path":["core","core_arch","x86","__m128i"],"kind":"struct"},"1:6214:4816":{"crate_id":1,"path":["std","sync","mpmc","counter","Sender"],"kind":"struct"},"16:7374:6062":{"crate_id":16,"path":["gimli","read","rnglists","RawRngListEntry"],"kind":"enum"},"17:13527:7707":{"crate_id":17,"path":["object","pe","ImageFunctionEntry64"],"kind":"struct"},"2:47191:4931":{"crate_id":2,"path":["core","iter","adapters","map","Map"],"kind":"struct"},"6:560:8123":{"crate_id":6,"path":["libc","unix","pollfd"],"kind":"struct"},"2:50753:5530":{"crate_id":2,"path":["core","time","Nanoseconds"],"kind":"struct"},"1:4902:8874":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt","st_atime"],"kind":"foreign_type"},"6:554:8120":{"crate_id":6,"path":["libc","unix","iovec"],"kind":"struct"},"6:6352:8881":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stat64"],"kind":"struct"},"16:5793:6026":{"crate_id":16,"path":["gimli","read","cfi","CfaRule"],"kind":"enum"},"18:636:6883":{"crate_id":18,"path":["memchr","memmem","twoway","ApproximateByteSet"],"kind":"struct"},"16:4510:7755":{"crate_id":16,"path":["gimli","constants","DwLang"],"kind":"struct"},"2:48119:3691":{"crate_id":2,"path":["core","panic","location","Location"],"kind":"struct"},"6:4810:8610":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_can_addr"],"kind":"union"},"21:2574:6495":{"crate_id":21,"path":["proc_macro","diagnostic","Children"],"kind":"struct"},"2:2315:184":{"crate_id":2,"path":["core","cmp","PartialOrd"],"kind":"trait"},"14:160:9943":{"crate_id":14,"path":["rustc_demangle","Demangle"],"kind":"struct"},"2:52128:5349":{"crate_id":2,"path":["core","core_arch","simd","u16x8"],"kind":"struct"},"5:3531:4560":{"crate_id":5,"path":["alloc","collections","linked_list","DrainFilter"],"kind":"struct"},"2:8855:4795":{"crate_id":2,"path":["core","hash","BuildHasherDefault"],"kind":"struct"},"16:4432:7754":{"crate_id":16,"path":["gimli","constants","DwVirtuality"],"kind":"struct"},"24:5498:2145":{"crate_id":24,"path":["syn","path","Binding"],"kind":"struct"},"1:598:4215":{"crate_id":1,"path":["std","thread","JoinHandle"],"kind":"struct"},"17:11639:7201":{"crate_id":17,"path":["object","macho","SegmentCommand64"],"kind":"struct"},"2:50498:5239":{"crate_id":2,"path":["core","str","pattern","CharSliceSearcher"],"kind":"struct"},"17:10434:9329":{"crate_id":17,"path":["object","read","pe","relocation","RelocationIterator"],"kind":"struct"},"1:9512:59505":{"crate_id":1,"path":["std","sync","mpmc","list","Position"],"kind":"struct"},"16:5681:6021":{"crate_id":16,"path":["gimli","read","cfi","FrameDescriptionEntry"],"kind":"struct"},"24:1361:3311":{"crate_id":24,"path":["syn","buffer","Cursor"],"kind":"struct"},"2:56939:240":{"crate_id":2,"path":["core","core_simd","fmt","fmt","Wrapper"],"kind":"struct"},"2:48110:3252":{"crate_id":2,"path":["core","option","IntoIter"],"kind":"struct"},"16:5450:6012":{"crate_id":16,"path":["gimli","read","cfi","EhFrame"],"kind":"struct"},"17:13382:7666":{"crate_id":17,"path":["object","pe","ImageAlpha64RuntimeFunctionEntry"],"kind":"struct"},"6:1643:8244":{"crate_id":6,"path":["libc","unix","linux_like","ifaddrs"],"kind":"struct"},"17:10497:48787":{"crate_id":17,"path":["object","read","pe","resource","ResourceNameOrId"],"kind":"enum"},"17:10310:48785":{"crate_id":17,"path":["object","read","pe","section","PeRelocationIterator"],"kind":"struct"},"2:10110:4972":{"crate_id":2,"path":["core","slice","iter","GroupByMut"],"kind":"struct"},"17:12322:7320":{"crate_id":17,"path":["object","macho","Nlist64"],"kind":"struct"},"17:12514:7352":{"crate_id":17,"path":["object","pe","ImageOs2Header"],"kind":"struct"},"5:1404:4764":{"crate_id":5,"path":["alloc","collections","btree","map","IntoKeys"],"kind":"struct"},"1:1114:4773":{"crate_id":1,"path":["std","collections","hash","map","VacantEntry"],"kind":"struct"},"2:22388:5279":{"crate_id":2,"path":["core","num","saturating","Saturating"],"kind":"struct"},"2:46899:5579":{"crate_id":2,"path":["core","char","ToUppercase"],"kind":"struct"},"2:2804:4839":{"crate_id":2,"path":["core","ops","bit","BitAnd"],"kind":"trait"},"5:6158:6714":{"crate_id":5,"path":["alloc","vec","into_iter","drop","DropGuard"],"kind":"struct"},"2:2979:2247":{"crate_id":2,"path":["core","ops","index","Index"],"kind":"trait"},"17:9193:64362":{"crate_id":17,"path":["object","read","any","SectionRelocationIteratorInternal"],"kind":"enum"},"2:47250:4936":{"crate_id":2,"path":["core","iter","adapters","skip","Skip"],"kind":"struct"},"22:795:1767":{"crate_id":22,"path":["proc_macro2","imp","Ident"],"kind":"enum"},"2:48575:85":{"crate_id":2,"path":["core","sync","atomic","AtomicIsize"],"kind":"struct"},"24:2353:3253":{"crate_id":24,"path":["syn","error","Iter"],"kind":"struct"},"1:12396:3010":{"crate_id":1,"path":["std","isize"],"kind":"primitive"},"24:4284:3471":{"crate_id":24,"path":["syn","token","Semi"],"kind":"struct"},"2:48094:3253":{"crate_id":2,"path":["core","option","Iter"],"kind":"struct"},"2:20247:5218":{"crate_id":2,"path":["core","core_simd","eq","SimdPartialEq"],"kind":"trait"},"1:305:1397":{"crate_id":1,"path":["std","thread"],"kind":"module"},"1:5885:4816":{"crate_id":1,"path":["std","sync","mpsc","Sender"],"kind":"struct"},"6:7255:9002":{"crate_id":6,"path":["libc","unix","linux_like","linux","can_frame"],"kind":"struct"},"24:4260:3469":{"crate_id":24,"path":["syn","token","RemEq"],"kind":"struct"},"24:2133:3299":{"crate_id":24,"path":["syn","parse","StepCursor"],"kind":"struct"},"1:5658:4886":{"crate_id":1,"path":["std","process","ChildStdin"],"kind":"struct"},"6:6392:8884":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statvfs64"],"kind":"struct"},"2:53984:5323":{"crate_id":2,"path":["core","core_arch","simd","f64x8"],"kind":"struct"},"21:2525:4603":{"crate_id":21,"path":["proc_macro","bridge","ExpnGlobals"],"kind":"struct"},"2:49318:9411":{"crate_id":2,"path":["core","hash","sip","SipHasher24"],"kind":"struct"},"1:5878:201":{"crate_id":1,"path":["std","sync","mpsc","Receiver"],"kind":"struct"},"5:6944:5637":{"crate_id":5,"path":["alloc","ffi","c_str","FromVecWithNulError"],"kind":"struct"},"24:5431:3196":{"crate_id":24,"path":["syn","ty","TypeReference"],"kind":"struct"},"21:370:4605":{"crate_id":21,"path":["proc_macro","bridge","rpc","PanicMessage"],"kind":"enum"},"16:8034:5939":{"crate_id":16,"path":["gimli","read","StoreOnHeap"],"kind":"struct"},"2:46906:5580":{"crate_id":2,"path":["core","char","CaseMappingIter"],"kind":"enum"},"16:6012:1797":{"crate_id":16,"path":["gimli","read","dwarf","Unit"],"kind":"struct"},"17:10774:6311":{"crate_id":17,"path":["object","read","Export"],"kind":"struct"},"24:4856:3146":{"crate_id":24,"path":["syn","expr","ExprGroup"],"kind":"struct"},"1:4439:5146":{"crate_id":1,"path":["std","os","unix","net","ancillary","AncillaryData"],"kind":"enum"},"2:52228:5341":{"crate_id":2,"path":["core","core_arch","simd","i8x16"],"kind":"struct"},"17:8418:6357":{"crate_id":17,"path":["object","common","SectionFlags"],"kind":"enum"},"24:1751:3257":{"crate_id":24,"path":["syn","punctuated","IterMut"],"kind":"struct"},"16:7920:6065":{"crate_id":16,"path":["gimli","read","unit","EntriesTreeIter"],"kind":"struct"},"2:51928:5340":{"crate_id":2,"path":["core","core_arch","simd","i8x8"],"kind":"struct"},"2:3154:133":{"crate_id":2,"path":["core","ops","try_trait","FromResidual"],"kind":"trait"},"2:46846:5576":{"crate_id":2,"path":["core","char","EscapeUnicodeState"],"kind":"enum"},"5:2726:2007":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Owned"],"kind":"enum"},"1:1123:4774":{"crate_id":1,"path":["std","collections","hash","map","OccupiedError"],"kind":"struct"},"1:7784:6752":{"crate_id":1,"path":["std","backtrace_rs","print","BacktraceFrameFmt"],"kind":"struct"},"12:985:4771":{"crate_id":12,"path":["hashbrown","map","Entry"],"kind":"enum"},"5:2983:5620":{"crate_id":5,"path":["alloc","collections","btree","set","IntersectionInner"],"kind":"enum"},"16:4208:7747":{"crate_id":16,"path":["gimli","constants","DwForm"],"kind":"struct"},"16:7637:5954":{"crate_id":16,"path":["gimli","read","unit","AttributeValue"],"kind":"enum"},"5:4938:4954":{"crate_id":5,"path":["alloc","slice","Join"],"kind":"trait"},"24:3951:3448":{"crate_id":24,"path":["syn","token","DivEq"],"kind":"struct"},"24:3997:3451":{"crate_id":24,"path":["syn","token","Dot2"],"kind":"struct"},"5:1067:5658":{"crate_id":5,"path":["alloc","collections","btree","dedup_sorted_iter","DedupSortedIter"],"kind":"struct"},"24:608:64680":{"crate_id":24,"path":["syn","generics","LifetimesMut"],"kind":"struct"},"17:13082:7568":{"crate_id":17,"path":["object","pe","ImageBoundImportDescriptor"],"kind":"struct"},"2:2666:107":{"crate_id":2,"path":["core","marker","Copy"],"kind":"trait"},"17:9183:48501":{"crate_id":17,"path":["object","read","any","SectionRelocationIterator"],"kind":"struct"},"24:3917:3446":{"crate_id":24,"path":["syn","token","Comma"],"kind":"struct"},"16:5927:6029":{"crate_id":16,"path":["gimli","read","cfi","CallFrameInstructionIter"],"kind":"struct"},"24:3117:2520":{"crate_id":24,"path":["syn","token","Static"],"kind":"struct"},"17:11174:7095":{"crate_id":17,"path":["object","elf","Rel64"],"kind":"struct"},"2:11901:137":{"crate_id":2,"path":["core","alloc","global","GlobalAlloc"],"kind":"trait"},"24:4366:3477":{"crate_id":24,"path":["syn","token","Sub"],"kind":"struct"},"17:9526:6325":{"crate_id":17,"path":["object","read","elf","section","ElfSectionIterator"],"kind":"struct"},"24:4980:1775":{"crate_id":24,"path":["syn","generics","Generics"],"kind":"struct"},"2:7410:4459":{"crate_id":2,"path":["core","iter","traits","marker","FusedIterator"],"kind":"trait"},"2:3149:228":{"crate_id":2,"path":["core","ops","try_trait","Try"],"kind":"trait"},"21:651:3373":{"crate_id":21,"path":["proc_macro","diagnostic","MultiSpan"],"kind":"trait"},"2:2556:114":{"crate_id":2,"path":["core","default","Default"],"kind":"trait"},"21:1202:191":{"crate_id":21,"path":["proc_macro","bridge","client","ProcMacro"],"kind":"enum"},"22:911:1767":{"crate_id":22,"path":["proc_macro2","Ident"],"kind":"struct"},"24:5318:1753":{"crate_id":24,"path":["syn","ty","Type"],"kind":"enum"},"17:13114:7579":{"crate_id":17,"path":["object","pe","ImageResourceDirectory"],"kind":"struct"},"21:2023:4599":{"crate_id":21,"path":["proc_macro","bridge","LitKind"],"kind":"enum"},"2:3960:5163":{"crate_id":2,"path":["core","asserting","TryCaptureWithDebug"],"kind":"struct"},"6:7214:8993":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_rwlockattr_t"],"kind":"struct"},"5:2970:4838":{"crate_id":5,"path":["alloc","collections","btree","set","SymmetricDifference"],"kind":"struct"},"17:12251:7309":{"crate_id":17,"path":["object","macho","EntryPointCommand"],"kind":"struct"},"16:2291:6254":{"crate_id":16,"path":["gimli","common","LineEncoding"],"kind":"struct"},"6:5587:8694":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_mmap_req"],"kind":"struct"},"6:4346:8436":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_ff_upload"],"kind":"struct"},"1:4015:5085":{"crate_id":1,"path":["std","net","tcp","TcpListener"],"kind":"struct"},"17:10721:7040":{"crate_id":17,"path":["object","read","ObjectMapEntry"],"kind":"struct"},"24:4498:1841":{"crate_id":24,"path":["syn","attr","Meta","NameValue"],"kind":"foreign_type"},"1:7190:6751":{"crate_id":1,"path":["std","sys_common","lazy_box","LazyBox"],"kind":"struct"},"2:46468:3284":{"crate_id":2,"path":["core","ops","range","Bound"],"kind":"enum"},"2:46816:5581":{"crate_id":2,"path":["core","char","decode","DecodeUtf16"],"kind":"struct"},"24:4521:1843":{"crate_id":24,"path":["syn","attr","NestedMeta","Lit"],"kind":"foreign_type"},"17:11247:7109":{"crate_id":17,"path":["object","elf","Dyn64"],"kind":"struct"},"2:11249:110":{"crate_id":2,"path":["core","str","lossy","Debug"],"kind":"struct"},"5:1348:3257":{"crate_id":5,"path":["alloc","collections","btree","map","IterMut"],"kind":"struct"},"2:49037:129":{"crate_id":2,"path":["core","fmt","rt","v1","FormatSpec"],"kind":"struct"},"16:6048:5947":{"crate_id":16,"path":["gimli","read","endian_slice","EndianSlice"],"kind":"struct"},"2:47110:4918":{"crate_id":2,"path":["core","iter","adapters","cycle","Cycle"],"kind":"struct"},"5:7057:4560":{"crate_id":5,"path":["alloc","vec","drain_filter","DrainFilter"],"kind":"struct"},"6:495:8083":{"crate_id":6,"path":["libc","unix","utimbuf"],"kind":"struct"},"1:8902:5010":{"crate_id":1,"path":["std","path","Component"],"kind":"enum"},"17:10360:6445":{"crate_id":17,"path":["object","read","pe","export","ExportTable"],"kind":"struct"},"2:46956:5511":{"crate_id":2,"path":["core","ffi","c_str","FromBytesWithNulErrorKind"],"kind":"enum"},"2:47079:4695":{"crate_id":2,"path":["core","iter","adapters","chain","Chain"],"kind":"struct"},"1:11381:4894":{"crate_id":1,"path":["std","sys","unix","process","process_common","ExitCode"],"kind":"struct"},"1:9413:4821":{"crate_id":1,"path":["std","sync","mpsc","RecvTimeoutError"],"kind":"enum"},"17:11939:7255":{"crate_id":17,"path":["object","macho","DylibTableOfContents"],"kind":"struct"},"17:9382:6972":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbolTable"],"kind":"struct"},"6:586:8136":{"crate_id":6,"path":["libc","unix","itimerval"],"kind":"struct"},"6:6545:8966":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ptrace_rseq_configuration"],"kind":"struct"},"1:8145:3311":{"crate_id":1,"path":["std","io","cursor","Cursor"],"kind":"struct"},"24:827:6510":{"crate_id":24,"path":["syn","lit","LitRepr"],"kind":"struct"},"24:624:64678":{"crate_id":24,"path":["syn","generics","ConstParamsMut"],"kind":"struct"},"24:4103:3458":{"crate_id":24,"path":["syn","token","Lt"],"kind":"struct"},"17:13413:7673":{"crate_id":17,"path":["object","pe","ImageEnclaveConfig32"],"kind":"struct"},"16:3448:6889":{"crate_id":16,"path":["gimli","arch","X86_64"],"kind":"struct"},"2:49978:5420":{"crate_id":2,"path":["core","str","iter","CharIndices"],"kind":"struct"},"1:8074:4661":{"crate_id":1,"path":["std","fs","OpenOptions"],"kind":"struct"},"1:5011:4671":{"crate_id":1,"path":["std","os","fd","raw","IntoRawFd"],"kind":"trait"},"5:2937:3253":{"crate_id":5,"path":["alloc","collections","btree","set","Iter"],"kind":"struct"},"22:850:1832":{"crate_id":22,"path":["proc_macro2","TokenTree"],"kind":"enum"},"6:519:8094":{"crate_id":6,"path":["libc","unix","rusage"],"kind":"struct"},"1:6602:161":{"crate_id":1,"path":["std","sync","mutex","Mutex"],"kind":"struct"},"6:592:8139":{"crate_id":6,"path":["libc","unix","tms"],"kind":"struct"},"1:11464:6760":{"crate_id":1,"path":["std","sys","unix","process","process_inner","posix_spawn","PosixSpawnattr"],"kind":"struct"},"2:2961:4461":{"crate_id":2,"path":["core","ops","generator","Generator"],"kind":"trait"},"16:4376:7752":{"crate_id":16,"path":["gimli","constants","DwAccess"],"kind":"struct"},"6:5498:8656":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__exit_status"],"kind":"struct"},"17:12307:7316":{"crate_id":17,"path":["object","macho","Nlist32"],"kind":"struct"},"1:7980:1922":{"crate_id":1,"path":["std","error","private","Internal"],"kind":"struct"},"6:6554:8969":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user_fpregs_struct"],"kind":"struct"},"2:3228:4460":{"crate_id":2,"path":["core","ops","unsize","DispatchFromDyn"],"kind":"trait"},"17:10894:6354":{"crate_id":17,"path":["object","read","CompressedData"],"kind":"struct"},"17:10796:6409":{"crate_id":17,"path":["object","read","CodeView"],"kind":"struct"},"2:49857:4915":{"crate_id":2,"path":["core","slice","iter","ArrayChunks"],"kind":"struct"},"24:2721:1780":{"crate_id":24,"path":["syn","token","Enum"],"kind":"struct"},"2:21989:5479":{"crate_id":2,"path":["core","num","nonzero","NonZeroIsize"],"kind":"struct"},"24:2073:1836":{"crate_id":24,"path":["syn","parse"],"kind":"module"},"24:5445:3185":{"crate_id":24,"path":["syn","ty","Abi"],"kind":"struct"},"6:4515:8473":{"crate_id":6,"path":["libc","unix","linux_like","linux","posix_spawnattr_t"],"kind":"struct"},"6:4706:8563":{"crate_id":6,"path":["libc","unix","linux_like","linux","dirent"],"kind":"struct"},"12:725:4761":{"crate_id":12,"path":["hashbrown","map","Keys"],"kind":"struct"},"1:3155:5071":{"crate_id":1,"path":["std","io","stdio","StdoutRaw"],"kind":"struct"},"24:2020:6503":{"crate_id":24,"path":["syn","thread","ThreadBound"],"kind":"struct"},"2:29529:4290":{"crate_id":2,"path":["core","mem","transmutability","Assume"],"kind":"struct"},"5:4976:6720":{"crate_id":5,"path":["alloc","slice","insert_head","InsertionHole"],"kind":"struct"},"1:1887:6536":{"crate_id":1,"path":["std","env","Args"],"kind":"struct"},"1:457:4225":{"crate_id":1,"path":["std","thread","scoped","ScopedJoinHandle"],"kind":"struct"},"1:3084:4725":{"crate_id":1,"path":["std","io","readbuf","BorrowedBuf"],"kind":"struct"},"24:5426:3195":{"crate_id":24,"path":["syn","ty","TypePtr"],"kind":"struct"},"16:5226:7770":{"crate_id":16,"path":["gimli","read","util","sealed","CapacityFull"],"kind":"struct"},"6:6329:8863":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stat"],"kind":"struct"},"17:9722:6976":{"crate_id":17,"path":["object","read","elf","version","Version"],"kind":"struct"},"17:12046:7274":{"crate_id":17,"path":["object","macho","UuidCommand"],"kind":"struct"},"17:12730:7482":{"crate_id":17,"path":["object","pe","ImageNtHeaders64"],"kind":"struct"},"1:8960:5013":{"crate_id":1,"path":["std","path","Ancestors"],"kind":"struct"},"5:1943:5622":{"crate_id":5,"path":["alloc","collections","btree","merge_iter","MergeIterInner"],"kind":"struct"},"24:5010:2454":{"crate_id":24,"path":["syn","generics","LifetimeDef"],"kind":"struct"},"2:50301:5437":{"crate_id":2,"path":["core","str","iter","EscapeDebug"],"kind":"struct"},"24:2266:9957":{"crate_id":24,"path":["syn","print","TokensOrDefault"],"kind":"struct"},"17:13354:7659":{"crate_id":17,"path":["object","pe","ImageHotPatchHashes"],"kind":"struct"},"16:5974:6030":{"crate_id":16,"path":["gimli","read","dwarf","Dwarf"],"kind":"struct"},"6:5876:8823":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","semid_ds"],"kind":"struct"},"2:11691:34432":{"crate_id":2,"path":["core","future","poll_fn","PollFn"],"kind":"struct"},"6:1550:8177":{"crate_id":6,"path":["libc","unix","linux_like","addrinfo"],"kind":"struct"},"2:21186:9386":{"crate_id":2,"path":["core","num","dec2flt","decimal","Decimal"],"kind":"struct"},"6:4683:8553":{"crate_id":6,"path":["libc","unix","linux_like","linux","in6_ifreq"],"kind":"struct"},"17:13580:7716":{"crate_id":17,"path":["object","pe","ImportObjectHeader"],"kind":"struct"},"2:8801:138":{"crate_id":2,"path":["core","hash","Hash"],"kind":"trait"},"13:0:2960":{"crate_id":13,"path":["std_detect"],"kind":"module"},"6:6430:8895":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_fpstate"],"kind":"struct"},"2:2924:2093":{"crate_id":2,"path":["core","ops","function","Fn"],"kind":"trait"},"1:2586:6740":{"crate_id":1,"path":["std","io","buffered","bufwriter","flush_buf","BufGuard"],"kind":"struct"},"18:609:64370":{"crate_id":18,"path":["memchr","memmem","twoway","Suffix"],"kind":"struct"},"21:183:4328":{"crate_id":21,"path":["proc_macro","bridge","closure","Closure"],"kind":"struct"},"24:4800:3133":{"crate_id":24,"path":["syn","expr","ExprAssignOp"],"kind":"struct"},"2:7417:4876":{"crate_id":2,"path":["core","iter","traits","marker","TrustedStep"],"kind":"trait"},"5:6749:4562":{"crate_id":5,"path":["alloc","collections","binary_heap","Drain"],"kind":"struct"},"12:861:4770":{"crate_id":12,"path":["hashbrown","map","RawEntryBuilder"],"kind":"struct"},"17:10394:6389":{"crate_id":17,"path":["object","read","pe","import","ImportThunkList"],"kind":"struct"},"6:4126:8315":{"crate_id":6,"path":["libc","unix","linux_like","linux","spwd"],"kind":"struct"},"16:4712:7762":{"crate_id":16,"path":["gimli","constants","DwIdx"],"kind":"struct"},"2:51980:5332":{"crate_id":2,"path":["core","core_arch","simd","i32x2"],"kind":"struct"},"17:9501:6334":{"crate_id":17,"path":["object","read","elf","section","SectionTable"],"kind":"struct"},"5:1359:3252":{"crate_id":5,"path":["alloc","collections","btree","map","IntoIter"],"kind":"struct"},"2:6799:62650":{"crate_id":2,"path":["core","iter","sources","from_generator","FromGenerator"],"kind":"struct"},"17:10403:6313":{"crate_id":17,"path":["object","read","pe","import","Import"],"kind":"enum"},"5:939:6714":{"crate_id":5,"path":["alloc","collections","binary_heap","drop","DropGuard"],"kind":"struct"},"17:12934:7534":{"crate_id":17,"path":["object","pe","ImageAuxSymbolSection"],"kind":"struct"},"1:11762:9438":{"crate_id":1,"path":["std","sys_common","wtf8","EncodeWide"],"kind":"struct"},"16:7475:5962":{"crate_id":16,"path":["gimli","read","str","DebugLineStr"],"kind":"struct"},"16:5739:6023":{"crate_id":16,"path":["gimli","read","cfi","UnwindTable"],"kind":"struct"},"16:7037:3691":{"crate_id":16,"path":["gimli","read","op","Location"],"kind":"enum"},"24:4892:3155":{"crate_id":24,"path":["syn","expr","ExprParen"],"kind":"struct"},"2:52864:5342":{"crate_id":2,"path":["core","core_arch","simd","i8x32"],"kind":"struct"},"16:5995:6031":{"crate_id":16,"path":["gimli","read","dwarf","DwarfPackage"],"kind":"struct"},"16:5817:6027":{"crate_id":16,"path":["gimli","read","cfi","RegisterRule"],"kind":"enum"},"17:11997:7267":{"crate_id":17,"path":["object","macho","DylibReference"],"kind":"struct"},"1:8328:4726":{"crate_id":1,"path":["std","io","readbuf","BorrowedCursor"],"kind":"struct"},"2:46358:193":{"crate_id":2,"path":["core","ops","range","Range"],"kind":"struct"},"1:6014:5112":{"crate_id":1,"path":["std","sync","barrier","BarrierWaitResult"],"kind":"struct"},"24:2228:3306":{"crate_id":24,"path":["syn","parse","Parser"],"kind":"trait"},"2:54022:9183":{"crate_id":2,"path":["core","core_arch","x86","__m128d"],"kind":"struct"},"24:89:1820":{"crate_id":24,"path":["syn","token","Token"],"kind":"trait"},"16:6506:6043":{"crate_id":16,"path":["gimli","read","line","LineProgramHeader"],"kind":"struct"},"2:49046:67":{"crate_id":2,"path":["core","fmt","rt","v1","Alignment"],"kind":"enum"},"17:13059:7563":{"crate_id":17,"path":["object","pe","ImageTlsDirectory32"],"kind":"struct"},"2:2665:220":{"crate_id":2,"path":["core","marker","StructuralEq"],"kind":"trait"},"6:4527:8480":{"crate_id":6,"path":["libc","unix","linux_like","linux","genlmsghdr"],"kind":"struct"},"24:2248:3310":{"crate_id":24,"path":["syn","parse","Nothing"],"kind":"struct"},"5:1385:4762":{"crate_id":5,"path":["alloc","collections","btree","map","Values"],"kind":"struct"},"2:1672:1052":{"crate_id":2,"path":["core","ptr"],"kind":"module"},"21:2261:1756":{"crate_id":21,"path":["proc_macro","bridge","Group"],"kind":"struct"},"5:6869:3290":{"crate_id":5,"path":["alloc","collections","TryReserveError"],"kind":"struct"},"1:11338:9949":{"crate_id":1,"path":["std","sys","unix","os","JoinPathsError"],"kind":"struct"},"24:5148:3175":{"crate_id":24,"path":["syn","lit","LitBool"],"kind":"struct"},"7:79:46070":{"crate_id":7,"path":["unwind","libunwind","_Unwind_Action"],"kind":"enum"},"6:4559:8494":{"crate_id":6,"path":["libc","unix","linux_like","linux","fanotify_response"],"kind":"struct"},"12:2080:4773":{"crate_id":12,"path":["hashbrown","set","VacantEntry"],"kind":"struct"},"1:12380:2996":{"crate_id":1,"path":["std","str"],"kind":"primitive"},"1:11519:4892":{"crate_id":1,"path":["std","sys","unix","process","process_inner","ExitStatus"],"kind":"struct"},"2:2831:4862":{"crate_id":2,"path":["core","ops","bit","BitAndAssign"],"kind":"trait"},"2:11618:34431":{"crate_id":2,"path":["core","future","into_future","IntoFuture"],"kind":"trait"},"24:2739:3412":{"crate_id":24,"path":["syn","token","Extern"],"kind":"struct"},"6:5741:8776":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ptrace_syscall_info"],"kind":"struct"},"6:4496:8461":{"crate_id":6,"path":["libc","unix","linux_like","linux","mntent"],"kind":"struct"},"6:7279:9007":{"crate_id":6,"path":["libc","unix","linux_like","linux","non_exhaustive","open_how"],"kind":"struct"},"1:8685:4799":{"crate_id":1,"path":["std","os","unix","net","addr","SocketAddr"],"kind":"struct"},"2:54031:9184":{"crate_id":2,"path":["core","core_arch","x86","__m256i"],"kind":"struct"},"2:11956:4468":{"crate_id":2,"path":["core","alloc","Allocator"],"kind":"trait"},"2:53018:5337":{"crate_id":2,"path":["core","core_arch","simd","i64x4"],"kind":"struct"},"5:6083:3252":{"crate_id":5,"path":["alloc","vec","into_iter","IntoIter"],"kind":"struct"},"1:8469:4803":{"crate_id":1,"path":["std","net","ip_addr","Ipv4Addr"],"kind":"struct"},"17:10476:48786":{"crate_id":17,"path":["object","read","pe","resource","ResourceDirectoryEntryData"],"kind":"enum"},"6:539:8111":{"crate_id":6,"path":["libc","unix","ipv6_mreq"],"kind":"struct"},"17:12337:6412":{"crate_id":17,"path":["object","macho","Relocation"],"kind":"struct"},"16:2526:6231":{"crate_id":16,"path":["gimli","common","DebugLocListsBase"],"kind":"struct"},"2:49912:4975":{"crate_id":2,"path":["core","slice","iter","RChunksExactMut"],"kind":"struct"},"17:9475:6289":{"crate_id":17,"path":["object","read","elf","segment","ElfSegmentIterator"],"kind":"struct"},"16:7245:6055":{"crate_id":16,"path":["gimli","read","pubnames","PubNamesEntry"],"kind":"struct"},"24:2883:3419":{"crate_id":24,"path":["syn","token","Loop"],"kind":"struct"},"17:11828:7225":{"crate_id":17,"path":["object","macho","DylinkerCommand"],"kind":"struct"},"1:10945:4714":{"crate_id":1,"path":["std","sys","unix","stdio","Stderr"],"kind":"struct"},"24:3063:207":{"crate_id":24,"path":["syn","token","Return"],"kind":"struct"},"1:9656:4758":{"crate_id":1,"path":["std","time","SystemTimeError"],"kind":"struct"},"2:7824:5227":{"crate_id":2,"path":["core","panicking","assert_matches_failed","Pattern"],"kind":"struct"},"2:48423:82":{"crate_id":2,"path":["core","sync","atomic","AtomicI32"],"kind":"struct"},"17:9601:6326":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbol"],"kind":"struct"},"24:5050:2446":{"crate_id":24,"path":["syn","generics","TraitBound"],"kind":"struct"},"2:3972:103":{"crate_id":2,"path":["core","asserting","Capture"],"kind":"struct"},"16:6713:5979":{"crate_id":16,"path":["gimli","read","loclists","RawLocListIter"],"kind":"struct"},"1:12386:3000":{"crate_id":1,"path":["std","i8"],"kind":"primitive"},"5:5201:4566":{"crate_id":5,"path":["alloc","string","retain","SetLenOnDrop"],"kind":"struct"},"2:47233:4935":{"crate_id":2,"path":["core","iter","adapters","scan","Scan"],"kind":"struct"},"24:3859:3442":{"crate_id":24,"path":["syn","token","Caret"],"kind":"struct"},"17:11485:7169":{"crate_id":17,"path":["object","macho","DyldCacheMappingInfo"],"kind":"struct"},"17:3125:48680":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbolIterator"],"kind":"struct"},"24:5442:3199":{"crate_id":24,"path":["syn","ty","TypeTuple"],"kind":"struct"},"1:11208:128":{"crate_id":1,"path":["std","sys","unix","fs","FileType"],"kind":"struct"},"6:1695:8276":{"crate_id":6,"path":["libc","unix","linux_like","mmsghdr"],"kind":"struct"},"2:29314:5545":{"crate_id":2,"path":["core","num","FpCategory"],"kind":"enum"},"12:1832:3253":{"crate_id":12,"path":["hashbrown","set","Iter"],"kind":"struct"},"2:52017:5317":{"crate_id":2,"path":["core","core_arch","simd","f32x2"],"kind":"struct"},"17:12211:7306":{"crate_id":17,"path":["object","macho","SymsegCommand"],"kind":"struct"},"2:49557:5596":{"crate_id":2,"path":["core","slice","ascii","EscapeByte"],"kind":"struct"},"16:4808:7765":{"crate_id":16,"path":["gimli","constants","DwLne"],"kind":"struct"},"6:4698:8558":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_nl"],"kind":"struct"},"2:56965:240":{"crate_id":2,"path":["core","core_simd","fmt","fmt","Wrapper"],"kind":"struct"},"17:13134:7585":{"crate_id":17,"path":["object","pe","ImageResourceDirectoryString"],"kind":"struct"},"24:5146:3179":{"crate_id":24,"path":["syn","lit","LitFloat"],"kind":"struct"},"2:49820:4968":{"crate_id":2,"path":["core","slice","iter","ChunksExactMut"],"kind":"struct"},"1:12340:9701":{"crate_id":1,"path":["std","backtrace_rs","symbolize","gimli","Cache"],"kind":"struct"},"24:4962:61":{"crate_id":24,"path":["syn","expr","parsing","raw"],"kind":"struct"},"5:3550:6714":{"crate_id":5,"path":["alloc","collections","linked_list","drop","DropGuard"],"kind":"struct"},"6:4506:8468":{"crate_id":6,"path":["libc","unix","linux_like","linux","posix_spawn_file_actions_t"],"kind":"struct"},"16:7615:5971":{"crate_id":16,"path":["gimli","read","unit","DebuggingInformationEntry"],"kind":"struct"},"1:7960:13249":{"crate_id":1,"path":["std","env","VarError"],"kind":"enum"},"24:5136:1970":{"crate_id":24,"path":["syn","lit","LitStr"],"kind":"struct"},"5:6765:63881":{"crate_id":5,"path":["alloc","collections","btree","merge_iter","Peeked"],"kind":"enum"},"24:4817:3137":{"crate_id":24,"path":["syn","expr","ExprBlock"],"kind":"struct"},"1:4266:4652":{"crate_id":1,"path":["std","os","unix","fs","MetadataExt"],"kind":"trait"},"17:10997:1767":{"crate_id":17,"path":["object","elf","Ident"],"kind":"struct"},"2:46507:4830":{"crate_id":2,"path":["core","any","TypeId"],"kind":"struct"},"17:9263:48549":{"crate_id":17,"path":["object","read","archive","ArchiveMemberIterator"],"kind":"struct"},"1:3190:4716":{"crate_id":1,"path":["std","io","stdio","Stdin"],"kind":"struct"},"24:5465:2439":{"crate_id":24,"path":["syn","path","PathSegment"],"kind":"struct"},"24:5144:3180":{"crate_id":24,"path":["syn","lit","LitInt"],"kind":"struct"},"12:1534:5870":{"crate_id":12,"path":["hashbrown","rustc_entry","RustcOccupiedEntry"],"kind":"struct"},"5:2466:5661":{"crate_id":5,"path":["alloc","collections","btree","node","Handle"],"kind":"struct"},"21:481:6709":{"crate_id":21,"path":["proc_macro","bridge","server","RunningSameThreadGuard"],"kind":"struct"},"17:13031:7555":{"crate_id":17,"path":["object","pe","ImageThunkData64"],"kind":"struct"},"5:771:5629":{"crate_id":5,"path":["alloc","collections","binary_heap","PeekMut"],"kind":"struct"},"24:5408:3189":{"crate_id":24,"path":["syn","ty","TypeGroup"],"kind":"struct"},"17:11186:7096":{"crate_id":17,"path":["object","elf","Rela64"],"kind":"struct"},"17:11547:7185":{"crate_id":17,"path":["object","macho","FatArch64"],"kind":"struct"},"1:0:1341":{"crate_id":1,"path":["std"],"kind":"module"},"15:175:5878":{"crate_id":15,"path":["addr2line","LocationRangeIter"],"kind":"struct"},"2:54159:9192":{"crate_id":2,"path":["core","core_arch","x86","__m512bh"],"kind":"struct"},"2:9509:4978":{"crate_id":2,"path":["core","slice","iter","RSplitMut"],"kind":"struct"},"24:1638:3251":{"crate_id":24,"path":["syn","punctuated","IntoPairs"],"kind":"struct"},"17:10121:6353":{"crate_id":17,"path":["object","read","macho","section","MachOSectionInternal"],"kind":"struct"},"2:48780:3343":{"crate_id":2,"path":["core","fmt","num","Octal"],"kind":"struct"},"24:4185:3464":{"crate_id":24,"path":["syn","token","Pound"],"kind":"struct"},"2:9436:4984":{"crate_id":2,"path":["core","slice","iter","SplitInclusiveMut"],"kind":"struct"},"9:977:5697":{"crate_id":9,"path":["miniz_oxide","StreamResult"],"kind":"struct"},"5:1971:5660":{"crate_id":5,"path":["alloc","collections","btree","navigate","LeafRange"],"kind":"struct"},"17:8475:6293":{"crate_id":17,"path":["object","endian","Endianness"],"kind":"enum"},"6:545:8114":{"crate_id":6,"path":["libc","unix","hostent"],"kind":"struct"},"24:2703:3411":{"crate_id":24,"path":["syn","token","Else"],"kind":"struct"},"5:4890:6714":{"crate_id":5,"path":["alloc","slice","hack","to_vec","DropGuard"],"kind":"struct"},"6:4598:8516":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_j1939"],"kind":"struct"},"6:4629:8528":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_fprog"],"kind":"struct"},"6:4690:970":{"crate_id":6,"path":["libc","unix","linux_like","linux","option"],"kind":"struct"},"2:49031:70":{"crate_id":2,"path":["core","fmt","rt","v1","Argument"],"kind":"struct"},"24:2595:2148":{"crate_id":24,"path":["syn","token","Const"],"kind":"struct"},"1:5315:59498":{"crate_id":1,"path":["std","path","fmt","DebugHelper"],"kind":"struct"},"16:5438:6011":{"crate_id":16,"path":["gimli","read","cfi","EhHdrTable"],"kind":"struct"},"16:6855:6049":{"crate_id":16,"path":["gimli","read","op","DieReference"],"kind":"enum"},"24:5462:185":{"crate_id":24,"path":["syn","path","Path"],"kind":"struct"},"1:9471:4464":{"crate_id":1,"path":["std","sync","mpmc","context","Context"],"kind":"struct"},"6:6311:8854":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","siginfo_t"],"kind":"struct"},"12:1120:5860":{"crate_id":12,"path":["hashbrown","map","VacantEntryRef"],"kind":"struct"},"5:6290:4566":{"crate_id":5,"path":["alloc","vec","set_len_on_drop","SetLenOnDrop"],"kind":"struct"},"1:7873:4210":{"crate_id":1,"path":["std","thread","ThreadId"],"kind":"struct"},"24:5082:2444":{"crate_id":24,"path":["syn","generics","PredicateType"],"kind":"struct"},"2:50741:5451":{"crate_id":2,"path":["core","str","IsNotEmpty"],"kind":"struct"},"12:632:3253":{"crate_id":12,"path":["hashbrown","map","Iter"],"kind":"struct"},"2:58300:9201":{"crate_id":2,"path":["core","core_simd","vector","ptr","SimdMutPtr"],"kind":"struct"},"17:9885:48703":{"crate_id":17,"path":["object","read","macho","file","MachOComdat"],"kind":"struct"},"24:3279:3431":{"crate_id":24,"path":["syn","token","Unsized"],"kind":"struct"},"18:652:6873":{"crate_id":18,"path":["memchr","memmem","x86","sse","Forward"],"kind":"struct"},"2:48787:3352":{"crate_id":2,"path":["core","fmt","num","LowerHex"],"kind":"struct"},"1:6391:5459":{"crate_id":1,"path":["std","sync","mpmc","waker","Waker"],"kind":"struct"},"2:46586:5290":{"crate_id":2,"path":["core","array","TryFromSliceError"],"kind":"struct"},"2:10561:5592":{"crate_id":2,"path":["core","slice","SlicePattern"],"kind":"trait"},"24:4383:3478":{"crate_id":24,"path":["syn","token","SubEq"],"kind":"struct"},"2:21202:9019":{"crate_id":2,"path":["core","num","dec2flt","number","Number"],"kind":"struct"},"2:11048:5225":{"crate_id":2,"path":["core","str","pattern","DoubleEndedSearcher"],"kind":"trait"},"21:1814:4597":{"crate_id":21,"path":["proc_macro","bridge","Marked"],"kind":"struct"},"6:487:1757":{"crate_id":6,"path":["libc","unix","group"],"kind":"struct"},"12:1836:3252":{"crate_id":12,"path":["hashbrown","set","IntoIter"],"kind":"struct"},"16:524:6205":{"crate_id":16,"path":["gimli","read","cfi","RegisterRuleMap"],"kind":"struct"},"24:4847:3144":{"crate_id":24,"path":["syn","expr","ExprField"],"kind":"struct"},"6:4611:8521":{"crate_id":6,"path":["libc","unix","linux_like","linux","j1939_filter"],"kind":"struct"},"17:9738:6378":{"crate_id":17,"path":["object","read","elf","version","VersionTable"],"kind":"struct"},"1:7803:6754":{"crate_id":1,"path":["std","backtrace_rs","Bomb"],"kind":"struct"},"24:4839:3142":{"crate_id":24,"path":["syn","expr","ExprClosure"],"kind":"struct"},"6:4653:8538":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlmsgerr"],"kind":"struct"},"18:113:54927":{"crate_id":18,"path":["memchr","memchr","iter","Memchr3"],"kind":"struct"},"1:1615:4560":{"crate_id":1,"path":["std","collections","hash","set","DrainFilter"],"kind":"struct"},"2:48794:3353":{"crate_id":2,"path":["core","fmt","num","UpperHex"],"kind":"struct"},"24:4553:3126":{"crate_id":24,"path":["syn","data","FieldsUnnamed"],"kind":"struct"},"5:4094:6716":{"crate_id":5,"path":["alloc","collections","vec_deque","truncate","Dropper"],"kind":"struct"},"2:2930:3383":{"crate_id":2,"path":["core","ops","function","FnOnce"],"kind":"trait"},"2:50224:5432":{"crate_id":2,"path":["core","str","iter","RMatches"],"kind":"struct"},"17:12964:7539":{"crate_id":17,"path":["object","pe","ImageLinenumber"],"kind":"struct"},"6:4635:8529":{"crate_id":6,"path":["libc","unix","linux_like","linux","seccomp_data"],"kind":"struct"},"1:9359:3252":{"crate_id":1,"path":["std","sync","mpsc","IntoIter"],"kind":"struct"},"12:1845:4560":{"crate_id":12,"path":["hashbrown","set","DrainFilter"],"kind":"struct"},"1:4503:5094":{"crate_id":1,"path":["std","os","unix","net","datagram","UnixDatagram"],"kind":"struct"},"5:2019:63878":{"crate_id":5,"path":["alloc","collections","btree","navigate","LazyLeafHandle"],"kind":"enum"},"24:4021:3453":{"crate_id":24,"path":["syn","token","DotDotEq"],"kind":"struct"},"2:50285:5435":{"crate_id":2,"path":["core","str","iter","SplitAsciiWhitespace"],"kind":"struct"},"2:4078:3341":{"crate_id":2,"path":["core","cell","once","OnceCell"],"kind":"struct"},"17:11873:7230":{"crate_id":17,"path":["object","macho","RoutinesCommand64"],"kind":"struct"},"16:7868:5972":{"crate_id":16,"path":["gimli","read","unit","EntriesCursor"],"kind":"struct"},"2:3374:4828":{"crate_id":2,"path":["core","any","Demand"],"kind":"struct"},"2:54136:9191":{"crate_id":2,"path":["core","core_arch","x86","__m256bh"],"kind":"struct"},"5:7074:4561":{"crate_id":5,"path":["alloc","vec","splice","Splice"],"kind":"struct"},"1:11531:4893":{"crate_id":1,"path":["std","sys","unix","process","process_inner","ExitStatusError"],"kind":"struct"},"17:8295:48493":{"crate_id":17,"path":["object","common","RelocationKind"],"kind":"enum"},"5:4016:239":{"crate_id":5,"path":["alloc","collections","vec_deque","VecDeque"],"kind":"struct"},"2:48347:81":{"crate_id":2,"path":["core","sync","atomic","AtomicI16"],"kind":"struct"},"2:47130:4920":{"crate_id":2,"path":["core","iter","adapters","filter","Filter"],"kind":"struct"},"16:6545:5975":{"crate_id":16,"path":["gimli","read","line","IncompleteLineProgram"],"kind":"struct"},"6:4778:8591":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_ifr_ifru"],"kind":"union"},"2:46241:4645":{"crate_id":2,"path":["core","ops","control_flow","ControlFlow"],"kind":"enum"},"24:5452:3200":{"crate_id":24,"path":["syn","ty","Variadic"],"kind":"struct"},"6:5625:8722":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","timex"],"kind":"struct"},"24:4395:3479":{"crate_id":24,"path":["syn","token","Tilde"],"kind":"struct"},"17:13374:7665":{"crate_id":17,"path":["object","pe","ImageArm64RuntimeFunctionEntry"],"kind":"struct"},"22:767:64486":{"crate_id":22,"path":["proc_macro2","imp","TokenTreeIter"],"kind":"enum"},"2:50562:5241":{"crate_id":2,"path":["core","str","pattern","StrSearcher"],"kind":"struct"},"12:444:139":{"crate_id":12,"path":["hashbrown","map","HashMap"],"kind":"struct"},"2:51749:5347":{"crate_id":2,"path":["core","core_arch","simd","u16x2"],"kind":"struct"},"24:5423:2194":{"crate_id":24,"path":["syn","ty","TypePath"],"kind":"struct"},"1:1608:3252":{"crate_id":1,"path":["std","collections","hash","set","IntoIter"],"kind":"struct"},"1:3269:4715":{"crate_id":1,"path":["std","io","stdio","StderrLock"],"kind":"struct"},"16:2596:6284":{"crate_id":16,"path":["gimli","common","DebugMacroOffset"],"kind":"struct"},"2:54106:9189":{"crate_id":2,"path":["core","core_arch","x86","__m512d"],"kind":"struct"},"24:3888:3444":{"crate_id":24,"path":["syn","token","Colon"],"kind":"struct"},"16:5715:6022":{"crate_id":16,"path":["gimli","read","cfi","UnwindContext"],"kind":"struct"},"9:709:5008":{"crate_id":9,"path":["miniz_oxide","inflate","core","State"],"kind":"enum"},"2:5837:4926":{"crate_id":2,"path":["core","iter","adapters","intersperse","IntersperseWith"],"kind":"struct"},"2:2848:4871":{"crate_id":2,"path":["core","ops","bit","ShrAssign"],"kind":"trait"},"2:6602:4877":{"crate_id":2,"path":["core","iter","range","Step"],"kind":"trait"},"1:10942:4718":{"crate_id":1,"path":["std","sys","unix","stdio","Stdout"],"kind":"struct"},"6:5504:8659":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__timeval"],"kind":"struct"},"2:11037:5229":{"crate_id":2,"path":["core","str","pattern","Searcher"],"kind":"trait"},"17:12485:7332":{"crate_id":17,"path":["object","pe","ImageDosHeader"],"kind":"struct"},"2:3311:68":{"crate_id":2,"path":["core","any","Any"],"kind":"trait"},"1:5176:4791":{"crate_id":1,"path":["std","os","net","linux_ext","tcp","TcpStreamExt"],"kind":"trait"},"1:4904:8876":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt","st_mtime"],"kind":"foreign_type"},"17:9627:6332":{"crate_id":17,"path":["object","read","elf","relocation","RelocationSections"],"kind":"struct"},"1:11163:9423":{"crate_id":1,"path":["std","sys","unix","fs","FileAttr"],"kind":"struct"},"9:505:5684":{"crate_id":9,"path":["miniz_oxide","inflate","stream","InflateState"],"kind":"struct"},"17:10642:6418":{"crate_id":17,"path":["object","read","SymbolSection"],"kind":"enum"},"1:4452:5147":{"crate_id":1,"path":["std","os","unix","net","ancillary","Messages"],"kind":"struct"},"2:50266:5433":{"crate_id":2,"path":["core","str","iter","LinesAny"],"kind":"struct"},"6:4673:8547":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_ifru_map"],"kind":"struct"},"1:11995:9279":{"crate_id":1,"path":["std","personality","dwarf","eh","EHContext"],"kind":"struct"},"17:8822:64357":{"crate_id":17,"path":["object","read","any","FileInternal"],"kind":"enum"},"2:7413:4874":{"crate_id":2,"path":["core","iter","traits","marker","TrustedLen"],"kind":"trait"},"17:8814:127":{"crate_id":17,"path":["object","read","any","File"],"kind":"struct"},"1:2381:4481":{"crate_id":1,"path":["std","fs","metadata"],"kind":"function"},"1:9906:127":{"crate_id":1,"path":["std","sys","unix","fs","File"],"kind":"struct"},"5:3723:4562":{"crate_id":5,"path":["alloc","collections","vec_deque","drain","Drain"],"kind":"struct"},"12:1859:4837":{"crate_id":12,"path":["hashbrown","set","Difference"],"kind":"struct"},"24:3784:3437":{"crate_id":24,"path":["syn","token","And"],"kind":"struct"},"17:12860:7515":{"crate_id":17,"path":["object","pe","ImageSymbolEx"],"kind":"struct"},"1:6679:5123":{"crate_id":1,"path":["std","sync","once","OnceState"],"kind":"struct"},"24:1758:3259":{"crate_id":24,"path":["syn","punctuated","PrivateIterMut"],"kind":"struct"},"2:49365:9413":{"crate_id":2,"path":["core","hash","sip","Sip24Rounds"],"kind":"struct"},"21:2737:2160":{"crate_id":21,"path":["proc_macro","Punct"],"kind":"struct"},"17:12008:7269":{"crate_id":17,"path":["object","macho","TwolevelHintsCommand"],"kind":"struct"},"2:3160:4911":{"crate_id":2,"path":["core","ops","try_trait","Residual"],"kind":"trait"},"17:13393:7670":{"crate_id":17,"path":["object","pe","ImageAlphaRuntimeFunctionEntry"],"kind":"struct"},"2:52752:5354":{"crate_id":2,"path":["core","core_arch","simd","u32x8"],"kind":"struct"},"2:50450:5238":{"crate_id":2,"path":["core","str","pattern","CharArrayRefSearcher"],"kind":"struct"},"21:436:6708":{"crate_id":21,"path":["proc_macro","bridge","scoped_cell","replace","PutBackOnDrop"],"kind":"struct"},"21:2664:1831":{"crate_id":21,"path":["proc_macro","Span"],"kind":"struct"},"1:719:12252":{"crate_id":1,"path":["std","backtrace","LazilyResolvedCapture"],"kind":"struct"},"24:1857:2008":{"crate_id":24,"path":["syn","parse_quote"],"kind":"macro"},"17:11106:7085":{"crate_id":17,"path":["object","elf","Sym64"],"kind":"struct"},"2:50725:5449":{"crate_id":2,"path":["core","str","CharEscapeUnicode"],"kind":"struct"},"2:46892:5578":{"crate_id":2,"path":["core","char","ToLowercase"],"kind":"struct"},"21:2742:1830":{"crate_id":21,"path":["proc_macro","Spacing"],"kind":"enum"},"2:21043:5474":{"crate_id":2,"path":["core","num","bignum","Big32x40"],"kind":"struct"},"1:7537:58670":{"crate_id":1,"path":["std","panicking","Hook"],"kind":"enum"},"24:5175:2150":{"crate_id":24,"path":["syn","mac","Macro"],"kind":"struct"},"1:9719:6536":{"crate_id":1,"path":["std","sys","unix","args","Args"],"kind":"struct"},"2:1643:4286":{"crate_id":2,"path":["core","mem","Discriminant"],"kind":"struct"},"24:4888:3154":{"crate_id":24,"path":["syn","expr","ExprMethodCall"],"kind":"struct"},"9:592:5736":{"crate_id":9,"path":["miniz_oxide","deflate","core","CompressionStrategy"],"kind":"enum"},"1:7055:4880":{"crate_id":1,"path":["std","std_float","StdFloat"],"kind":"trait"},"24:2919:2473":{"crate_id":24,"path":["syn","token","Match"],"kind":"struct"},"2:5616:62224":{"crate_id":2,"path":["core","iter","adapters","flatten","TrustedConstSize"],"kind":"trait"},"2:7022:132":{"crate_id":2,"path":["core","iter","traits","collect","FromIterator"],"kind":"trait"},"2:52706:5350":{"crate_id":2,"path":["core","core_arch","simd","u16x16"],"kind":"struct"},"2:54011:9182":{"crate_id":2,"path":["core","core_arch","x86","__m128"],"kind":"struct"},"2:1919:4463":{"crate_id":2,"path":["core","ptr","unique","Unique"],"kind":"struct"},"17:10159:7013":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbolTable"],"kind":"struct"},"2:47200:4932":{"crate_id":2,"path":["core","iter","adapters","map_while","MapWhile"],"kind":"struct"},"6:507:8089":{"crate_id":6,"path":["libc","unix","timespec"],"kind":"struct"},"1:8648:5088":{"crate_id":1,"path":["std","net","Shutdown"],"kind":"enum"},"1:7148:9951":{"crate_id":1,"path":["std","sys_common","backtrace","_print","DisplayBacktrace"],"kind":"struct"},"16:5606:6019":{"crate_id":16,"path":["gimli","read","cfi","CommonInformationEntry"],"kind":"struct"},"6:1525:8163":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr"],"kind":"struct"},"17:12896:7520":{"crate_id":17,"path":["object","pe","ImageAuxSymbolFunction"],"kind":"struct"},"2:11844:5459":{"crate_id":2,"path":["core","task","wake","Waker"],"kind":"struct"},"24:3153:3428":{"crate_id":24,"path":["syn","token","Super"],"kind":"struct"},"2:50733:5452":{"crate_id":2,"path":["core","str","IsWhitespace"],"kind":"struct"},"2:50729:5448":{"crate_id":2,"path":["core","str","CharEscapeDefault"],"kind":"struct"},"2:53738:5335":{"crate_id":2,"path":["core","core_arch","simd","i32x16"],"kind":"struct"},"6:7166:8991":{"crate_id":6,"path":["libc","unix","linux_like","linux","arch","generic","termios2"],"kind":"struct"},"24:2343:3252":{"crate_id":24,"path":["syn","error","IntoIter"],"kind":"struct"},"17:12638:7446":{"crate_id":17,"path":["object","pe","ImageOptionalHeader32"],"kind":"struct"},"2:8595:3350":{"crate_id":2,"path":["core","fmt","LowerExp"],"kind":"trait"},"1:5821:4895":{"crate_id":1,"path":["std","process","exit"],"kind":"function"},"1:12356:56608":{"crate_id":1,"path":["std","backtrace_rs","print","PrintFmt"],"kind":"enum"},"17:11684:7206":{"crate_id":17,"path":["object","macho","Section64"],"kind":"struct"},"2:48161:4476":{"crate_id":2,"path":["core","panicking","AssertKind"],"kind":"enum"},"22:762:9321":{"crate_id":22,"path":["proc_macro2","imp","DeferredTokenStream"],"kind":"struct"},"1:2409:5059":{"crate_id":1,"path":["std","fs","read_dir"],"kind":"function"},"24:5180:3182":{"crate_id":24,"path":["syn","mac","MacroDelimiter"],"kind":"enum"},"6:5480:8643":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","aiocb"],"kind":"struct"},"16:7335:5978":{"crate_id":16,"path":["gimli","read","rnglists","RangeLists"],"kind":"struct"},"6:4417:8455":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Sym"],"kind":"struct"},"1:10881:6757":{"crate_id":1,"path":["std","sys","unix","stack_overflow","Handler"],"kind":"struct"},"2:9120:217":{"crate_id":2,"path":["core","slice","index","SliceIndex"],"kind":"trait"},"2:2797:4853":{"crate_id":2,"path":["core","ops","bit","Not"],"kind":"trait"},"6:4581:8505":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_extended_err"],"kind":"struct"},"6:4247:8388":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_absinfo"],"kind":"struct"},"17:13557:7712":{"crate_id":17,"path":["object","pe","NonPagedDebugInfo"],"kind":"struct"},"12:98:5861":{"crate_id":12,"path":["hashbrown","raw","Bucket"],"kind":"struct"},"24:2937:3420":{"crate_id":24,"path":["syn","token","Mod"],"kind":"struct"},"2:20325:5216":{"crate_id":2,"path":["core","core_simd","masks","mask_impl","Mask"],"kind":"struct"},"1:9289:4890":{"crate_id":1,"path":["std","process","CommandArgs"],"kind":"struct"},"24:4900:3156":{"crate_id":24,"path":["syn","expr","ExprRange"],"kind":"struct"},"6:4274:8400":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_replay"],"kind":"struct"},"2:49870:4960":{"crate_id":2,"path":["core","slice","iter","ArrayChunksMut"],"kind":"struct"},"16:6646:6262":{"crate_id":16,"path":["gimli","read","lists","ListsHeader"],"kind":"struct"},"2:47557:9409":{"crate_id":2,"path":["core","iter","sources","successors","Successors"],"kind":"struct"},"17:12739:7486":{"crate_id":17,"path":["object","pe","ImageNtHeaders32"],"kind":"struct"},"1:3484:4694":{"crate_id":1,"path":["std","io","BufRead"],"kind":"trait"},"1:9295:181":{"crate_id":1,"path":["std","process","Output"],"kind":"struct"},"2:48537:90":{"crate_id":2,"path":["core","sync","atomic","AtomicU64"],"kind":"struct"},"2:50587:5243":{"crate_id":2,"path":["core","str","pattern","EmptyNeedle"],"kind":"struct"},"24:4231:3467":{"crate_id":24,"path":["syn","token","LArrow"],"kind":"struct"},"5:4521:199":{"crate_id":5,"path":["alloc","rc","Rc"],"kind":"struct"},"1:8552:5137":{"crate_id":1,"path":["std","net","parser","AddrKind"],"kind":"enum"},"17:8752:2742":{"crate_id":17,"path":["object","read","util","Bytes"],"kind":"struct"},"1:3192:4717":{"crate_id":1,"path":["std","io","stdio","StdinLock"],"kind":"struct"},"24:286:64504":{"crate_id":24,"path":["syn","bigint","BigInt"],"kind":"struct"},"24:2775:2093":{"crate_id":24,"path":["syn","token","Fn"],"kind":"struct"},"24:2667:3409":{"crate_id":24,"path":["syn","token","Do"],"kind":"struct"},"1:4314:4655":{"crate_id":1,"path":["std","os","unix","fs","DirEntryExt2"],"kind":"trait"},"17:11368:7142":{"crate_id":17,"path":["object","elf","GnuHashHeader"],"kind":"struct"},"17:12237:7308":{"crate_id":17,"path":["object","macho","FvmfileCommand"],"kind":"struct"},"2:8143:79":{"crate_id":2,"path":["core","sync","atomic","AtomicBool"],"kind":"struct"},"12:1029:4773":{"crate_id":12,"path":["hashbrown","map","VacantEntry"],"kind":"struct"},"2:8527:205":{"crate_id":2,"path":["core","fmt","Result"],"kind":"typedef"},"12:2053:4771":{"crate_id":12,"path":["hashbrown","set","Entry"],"kind":"enum"},"17:10182:7014":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbol"],"kind":"struct"},"24:4936:3165":{"crate_id":24,"path":["syn","expr","ExprUnary"],"kind":"struct"},"1:8486:4804":{"crate_id":1,"path":["std","net","ip_addr","Ipv6Addr"],"kind":"struct"},"1:9546:56613":{"crate_id":1,"path":["std","sync","mpmc","select","Selected"],"kind":"enum"},"24:4454:1756":{"crate_id":24,"path":["syn","token","Group"],"kind":"struct"},"17:3249:6361":{"crate_id":17,"path":["object","read","macho","relocation","MachORelocationIterator"],"kind":"struct"},"2:46446:198":{"crate_id":2,"path":["core","ops","range","RangeToInclusive"],"kind":"struct"},"16:5379:6008":{"crate_id":16,"path":["gimli","read","cfi","DebugFrame"],"kind":"struct"},"2:52942:5330":{"crate_id":2,"path":["core","core_arch","simd","i16x16"],"kind":"struct"},"5:4990:6723":{"crate_id":5,"path":["alloc","slice","merge","MergeHole"],"kind":"struct"},"2:47275:4938":{"crate_id":2,"path":["core","iter","adapters","step_by","StepBy"],"kind":"struct"},"21:2763:2474":{"crate_id":21,"path":["proc_macro","Literal"],"kind":"struct"},"1:8129:5066":{"crate_id":1,"path":["std","io","buffered","linewritershim","LineWriterShim"],"kind":"struct"},"24:4582:3128":{"crate_id":24,"path":["syn","data","VisPublic"],"kind":"struct"},"2:3948:5162":{"crate_id":2,"path":["core","asserting","TryCaptureWithoutDebug"],"kind":"struct"},"17:9283:48564":{"crate_id":17,"path":["object","read","coff","file","CoffCommon"],"kind":"struct"},"6:5605:8706":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","rtentry"],"kind":"struct"},"1:5062:4674":{"crate_id":1,"path":["std","os","fd","owned","OwnedFd"],"kind":"struct"},"2:47029:13777":{"crate_id":2,"path":["core","ffi","VaList"],"kind":"struct"},"17:8137:48492":{"crate_id":17,"path":["object","common","BinaryFormat"],"kind":"enum"},"2:49988:2742":{"crate_id":2,"path":["core","str","iter","Bytes"],"kind":"struct"},"5:1680:4560":{"crate_id":5,"path":["alloc","collections","btree","map","DrainFilter"],"kind":"struct"},"16:4253:7748":{"crate_id":16,"path":["gimli","constants","DwAte"],"kind":"struct"},"17:11315:7128":{"crate_id":17,"path":["object","elf","Vernaux"],"kind":"struct"},"1:11447:6758":{"crate_id":1,"path":["std","sys","unix","process","process_inner","do_exec","Reset"],"kind":"struct"},"6:6448:8906":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user_regs_struct"],"kind":"struct"},"17:11330:7134":{"crate_id":17,"path":["object","elf","NoteHeader32"],"kind":"struct"},"2:52548:9134":{"crate_id":2,"path":["core","core_arch","simd","m64x2"],"kind":"struct"},"16:2380:6225":{"crate_id":16,"path":["gimli","common","DebugAddrIndex"],"kind":"struct"},"18:736:6472":{"crate_id":18,"path":["memchr","memmem","SearcherKind"],"kind":"enum"},"2:49064:108":{"crate_id":2,"path":["core","fmt","rt","v1","Count"],"kind":"enum"},"24:1969:4667":{"crate_id":24,"path":["syn","sealed","lookahead","Sealed"],"kind":"trait"},"17:12361:7330":{"crate_id":17,"path":["object","macho","ScatteredRelocationInfo"],"kind":"struct"},"17:8881:64355":{"crate_id":17,"path":["object","read","any","SegmentIteratorInternal"],"kind":"enum"},"16:2921:5942":{"crate_id":16,"path":["gimli","common","SectionId"],"kind":"enum"},"5:5621:4680":{"crate_id":5,"path":["alloc","sync","from_iter_exact","Guard"],"kind":"struct"},"2:21226:5174":{"crate_id":2,"path":["core","num","dec2flt","ParseFloatError"],"kind":"struct"},"17:13024:7554":{"crate_id":17,"path":["object","pe","ImageImportByName"],"kind":"struct"},"6:4475:8460":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Shdr"],"kind":"struct"},"24:1809:2412":{"crate_id":24,"path":["syn","punctuated","Pair"],"kind":"enum"},"2:46534:62206":{"crate_id":2,"path":["core","any","tags","MaybeSizedValue"],"kind":"struct"},"1:9477:4211":{"crate_id":1,"path":["std","sync","mpmc","context","Inner"],"kind":"struct"},"2:56978:240":{"crate_id":2,"path":["core","core_simd","fmt","fmt","Wrapper"],"kind":"struct"},"1:12377:2993":{"crate_id":1,"path":["std","pointer"],"kind":"primitive"},"6:4231:8383":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_event"],"kind":"struct"},"16:6474:6042":{"crate_id":16,"path":["gimli","read","line","ColumnType"],"kind":"enum"},"2:46774:5307":{"crate_id":2,"path":["core","char","convert","ParseCharError"],"kind":"struct"},"1:1105:4772":{"crate_id":1,"path":["std","collections","hash","map","OccupiedEntry"],"kind":"struct"},"1:9335:4894":{"crate_id":1,"path":["std","process","ExitCode"],"kind":"struct"},"24:616:64677":{"crate_id":24,"path":["syn","generics","ConstParams"],"kind":"struct"},"2:2839:4866":{"crate_id":2,"path":["core","ops","bit","BitXorAssign"],"kind":"trait"},"1:2250:5046":{"crate_id":1,"path":["std","fs","DirEntry"],"kind":"struct"},"16:7430:193":{"crate_id":16,"path":["gimli","read","rnglists","Range"],"kind":"struct"},"2:50630:5521":{"crate_id":2,"path":["core","str","lossy","Utf8Chunks"],"kind":"struct"},"24:5418:3193":{"crate_id":24,"path":["syn","ty","TypeNever"],"kind":"struct"},"2:10796:5427":{"crate_id":2,"path":["core","str","iter","MatchIndicesInternal"],"kind":"struct"},"1:9597:162":{"crate_id":1,"path":["std","sync","mutex","MutexGuard"],"kind":"struct"},"1:10577:2138":{"crate_id":1,"path":["std","sys","unix","os_str","Slice"],"kind":"struct"},"17:13366:7662":{"crate_id":17,"path":["object","pe","ImageArmRuntimeFunctionEntry"],"kind":"struct"},"1:11458:6759":{"crate_id":1,"path":["std","sys","unix","process","process_inner","posix_spawn","PosixSpawnFileActions"],"kind":"struct"},"5:2728:9011":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Immut"],"kind":"struct"},"16:6768:6048":{"crate_id":16,"path":["gimli","read","loclists","LocationListEntry"],"kind":"struct"},"2:2819:3472":{"crate_id":2,"path":["core","ops","bit","Shl"],"kind":"trait"},"17:9671:6301":{"crate_id":17,"path":["object","read","elf","note","NoteIterator"],"kind":"struct"},"22:839:1622":{"crate_id":22,"path":["proc_macro2","TokenStream"],"kind":"struct"},"16:7297:6060":{"crate_id":16,"path":["gimli","read","pubtypes","PubTypesEntryIter"],"kind":"struct"},"17:9488:6292":{"crate_id":17,"path":["object","read","elf","segment","ElfSegment"],"kind":"struct"},"1:12391:3005":{"crate_id":1,"path":["std","u8"],"kind":"primitive"},"2:2825:3474":{"crate_id":2,"path":["core","ops","bit","Shr"],"kind":"trait"},"16:4879:7767":{"crate_id":16,"path":["gimli","constants","DwMacro"],"kind":"struct"},"6:6500:8946":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","mcontext_t"],"kind":"struct"},"12:387:64327":{"crate_id":12,"path":["hashbrown","raw","RawIterHash"],"kind":"struct"},"17:9155:48500":{"crate_id":17,"path":["object","read","any","DynamicRelocationIterator"],"kind":"struct"},"2:10847:4983":{"crate_id":2,"path":["core","str","iter","SplitInclusive"],"kind":"struct"},"15:193:5879":{"crate_id":15,"path":["addr2line","LocationRangeUnitIter"],"kind":"struct"},"2:47101:4917":{"crate_id":2,"path":["core","iter","adapters","copied","Copied"],"kind":"struct"},"21:407:64465":{"crate_id":21,"path":["proc_macro","bridge","scoped_cell","RefMutL"],"kind":"struct"},"17:9805:6432":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCache"],"kind":"struct"},"2:21791:4218":{"crate_id":2,"path":["core","num","nonzero","NonZeroUsize"],"kind":"struct"},"1:12394:3008":{"crate_id":1,"path":["std","u64"],"kind":"primitive"},"12:669:4764":{"crate_id":12,"path":["hashbrown","map","IntoKeys"],"kind":"struct"},"6:6953:8978":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","not_x32","statvfs"],"kind":"struct"},"24:5015:3170":{"crate_id":24,"path":["syn","generics","ConstParam"],"kind":"struct"},"2:50404:5231":{"crate_id":2,"path":["core","str","pattern","CharSearcher"],"kind":"struct"},"17:242:64354":{"crate_id":17,"path":["object","read","util","DebugByte"],"kind":"struct"},"5:2727:63771":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Dying"],"kind":"enum"},"24:3081:3426":{"crate_id":24,"path":["syn","token","SelfType"],"kind":"struct"},"1:4208:4843":{"crate_id":1,"path":["std","os","unix","ffi","os_str","OsStringExt"],"kind":"trait"},"16:5959:6209":{"crate_id":16,"path":["gimli","read","cfi","PointerEncodingParameters"],"kind":"struct"},"24:4492:185":{"crate_id":24,"path":["syn","attr","Meta","Path"],"kind":"foreign_type"},"5:5896:6725":{"crate_id":5,"path":["alloc","vec","drain_filter","drop","BackshiftOnDrop"],"kind":"struct"},"17:13594:7719":{"crate_id":17,"path":["object","pe","ImageCor20Header"],"kind":"struct"},"2:49347:5008":{"crate_id":2,"path":["core","hash","sip","State"],"kind":"struct"},"24:4426:3603":{"crate_id":24,"path":["syn","token","Bracket"],"kind":"struct"},"24:3099:3427":{"crate_id":24,"path":["syn","token","SelfValue"],"kind":"struct"},"6:4745:8578":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_user_dev"],"kind":"struct"},"1:412:6763":{"crate_id":1,"path":["std","thread","local","fast","Key"],"kind":"struct"},"17:9873:48702":{"crate_id":17,"path":["object","read","macho","file","MachOComdatIterator"],"kind":"struct"},"2:2661:3380":{"crate_id":2,"path":["core","marker","Sized"],"kind":"trait"},"6:4307:8415":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_condition_effect"],"kind":"struct"},"2:50980:156":{"crate_id":2,"path":["core","alloc","layout","Layout"],"kind":"struct"},"5:5964:4562":{"crate_id":5,"path":["alloc","vec","drain","Drain"],"kind":"struct"},"2:2755:4739":{"crate_id":2,"path":["core","ops","arith","Mul"],"kind":"trait"},"2:50576:5242":{"crate_id":2,"path":["core","str","pattern","StrSearcherImpl"],"kind":"enum"},"17:386:48490":{"crate_id":17,"path":["object","read","any","Segment"],"kind":"struct"},"17:9250:48548":{"crate_id":17,"path":["object","read","archive","ArchiveFile"],"kind":"struct"},"24:4325:3474":{"crate_id":24,"path":["syn","token","Shr"],"kind":"struct"},"5:676:109":{"crate_id":5,"path":["alloc","borrow","Cow"],"kind":"enum"},"1:4836:4850":{"crate_id":1,"path":["std","os","unix","thread","JoinHandleExt"],"kind":"trait"},"17:12909:7526":{"crate_id":17,"path":["object","pe","ImageAuxSymbolFunctionBeginEnd"],"kind":"struct"},"16:5154:6215":{"crate_id":16,"path":["gimli","constants","DwEhPe"],"kind":"struct"},"1:8420:4696":{"crate_id":1,"path":["std","io","Take"],"kind":"struct"},"2:19975:62678":{"crate_id":2,"path":["core","core_simd","swizzle","rotate_lanes_left","Rotate"],"kind":"struct"},"2:10984:3277":{"crate_id":2,"path":["core","str","traits","FromStr"],"kind":"trait"},"2:46863:3360":{"crate_id":2,"path":["core","char","EscapeDefault"],"kind":"struct"},"24:5223:3183":{"crate_id":24,"path":["syn","op","BinOp"],"kind":"enum"},"2:50737:5450":{"crate_id":2,"path":["core","str","IsAsciiWhitespace"],"kind":"struct"},"2:20278:4881":{"crate_id":2,"path":["core","core_simd","lane_count","LaneCount"],"kind":"struct"},"24:5477:2133":{"crate_id":24,"path":["syn","path","GenericArgument"],"kind":"enum"},"24:4550:3125":{"crate_id":24,"path":["syn","data","FieldsNamed"],"kind":"struct"},"12:659:3252":{"crate_id":12,"path":["hashbrown","map","IntoIter"],"kind":"struct"},"1:9351:4815":{"crate_id":1,"path":["std","sync","mpsc","TryIter"],"kind":"struct"},"1:6542:201":{"crate_id":1,"path":["std","sync","mpmc","Receiver"],"kind":"struct"},"16:6030:6032":{"crate_id":16,"path":["gimli","read","dwarf","RangeIter"],"kind":"struct"},"1:2576:4707":{"crate_id":1,"path":["std","io","buffered","bufwriter","BufWriter"],"kind":"struct"},"12:353:5862":{"crate_id":12,"path":["hashbrown","raw","RawDrain"],"kind":"struct"},"20:34:4667":{"crate_id":20,"path":["quote","ext","private","Sealed"],"kind":"trait"},"1:8446:150":{"crate_id":1,"path":["std","net","ip_addr","IpAddr"],"kind":"enum"},"2:46342:195":{"crate_id":2,"path":["core","ops","range","RangeFull"],"kind":"struct"},"6:1722:8286":{"crate_id":6,"path":["libc","unix","linux_like","utsname"],"kind":"struct"},"17:8510:6961":{"crate_id":17,"path":["object","endian","BigEndian"],"kind":"struct"},"1:661:5042":{"crate_id":1,"path":["std","backtrace","Backtrace"],"kind":"struct"},"2:4192:3324":{"crate_id":2,"path":["core","cell","BorrowMutError"],"kind":"struct"},"5:2978:4836":{"crate_id":5,"path":["alloc","collections","btree","set","Intersection"],"kind":"struct"},"1:8104:128":{"crate_id":1,"path":["std","fs","FileType"],"kind":"struct"},"16:4318:7750":{"crate_id":16,"path":["gimli","constants","DwDs"],"kind":"struct"},"17:9223:48547":{"crate_id":17,"path":["object","read","archive","ArchiveKind"],"kind":"enum"},"17:11149:7090":{"crate_id":17,"path":["object","elf","Rel32"],"kind":"struct"},"1:5392:186":{"crate_id":1,"path":["std","path","PathBuf"],"kind":"struct"},"24:4876:3151":{"crate_id":24,"path":["syn","expr","ExprLoop"],"kind":"struct"},"16:7887:5974":{"crate_id":16,"path":["gimli","read","unit","EntriesTree"],"kind":"struct"},"1:8091:4662":{"crate_id":1,"path":["std","fs","Permissions"],"kind":"struct"},"6:4361:8442":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_abs_setup"],"kind":"struct"},"1:4260:4651":{"crate_id":1,"path":["std","os","unix","fs","OpenOptionsExt"],"kind":"trait"},"1:1002:4770":{"crate_id":1,"path":["std","collections","hash","map","RawEntryBuilder"],"kind":"struct"},"2:21344:9389":{"crate_id":2,"path":["core","num","fmt","Formatted"],"kind":"struct"},"12:762:4560":{"crate_id":12,"path":["hashbrown","map","DrainFilter"],"kind":"struct"},"17:13518:7703":{"crate_id":17,"path":["object","pe","ImageFunctionEntry"],"kind":"struct"},"2:50772:120":{"crate_id":2,"path":["core","time","Duration"],"kind":"struct"},"2:49357:9412":{"crate_id":2,"path":["core","hash","sip","Sip13Rounds"],"kind":"struct"},"24:834:6512":{"crate_id":24,"path":["syn","lit","LitFloatRepr"],"kind":"struct"},"5:3328:158":{"crate_id":5,"path":["alloc","collections","linked_list","LinkedList"],"kind":"struct"},"2:39328:4063":{"crate_id":2,"path":["core","marker","PhantomPinned"],"kind":"struct"},"1:11152:4848":{"crate_id":1,"path":["std","sys","unix","fd","FileDesc"],"kind":"struct"},"2:52350:5318":{"crate_id":2,"path":["core","core_arch","simd","f32x4"],"kind":"struct"},"2:8581:110":{"crate_id":2,"path":["core","fmt","macros","Debug"],"kind":"proc_derive"},"6:1595:8208":{"crate_id":6,"path":["libc","unix","linux_like","sched_param"],"kind":"struct"},"1:5346:59498":{"crate_id":1,"path":["std","path","fmt","DebugHelper"],"kind":"struct"},"5:1185:4771":{"crate_id":5,"path":["alloc","collections","btree","map","entry","Entry"],"kind":"enum"},"24:4591:2189":{"crate_id":24,"path":["syn","expr","Expr"],"kind":"enum"},"16:2252:6214":{"crate_id":16,"path":["gimli","common","Format"],"kind":"enum"},"16:5503:6015":{"crate_id":16,"path":["gimli","read","cfi","SectionBaseAddresses"],"kind":"struct"},"24:2523:3406":{"crate_id":24,"path":["syn","token","Await"],"kind":"struct"},"2:20437:5216":{"crate_id":2,"path":["core","core_simd","masks","Mask"],"kind":"struct"},"1:960:4763":{"crate_id":1,"path":["std","collections","hash","map","ValuesMut"],"kind":"struct"},"16:2478:6230":{"crate_id":16,"path":["gimli","common","DebugLineStrOffset"],"kind":"struct"},"2:49076:126":{"crate_id":2,"path":["core","fmt","Error"],"kind":"struct"},"2:2766:3468":{"crate_id":2,"path":["core","ops","arith","Rem"],"kind":"trait"},"1:9397:4820":{"crate_id":1,"path":["std","sync","mpsc","TryRecvError"],"kind":"enum"},"6:1500:8153":{"crate_id":6,"path":["libc","unix","linux_like","in_addr"],"kind":"struct"},"16:7461:5967":{"crate_id":16,"path":["gimli","read","str","DebugStrOffsets"],"kind":"struct"},"24:4908:3158":{"crate_id":24,"path":["syn","expr","ExprRepeat"],"kind":"struct"},"17:2916:6349":{"crate_id":17,"path":["object","read","macho","section","MachOSectionIterator"],"kind":"struct"},"21:2233:4602":{"crate_id":21,"path":["proc_macro","bridge","DelimSpan"],"kind":"struct"},"1:2256:4688":{"crate_id":1,"path":["std","fs","read_to_string"],"kind":"function"},"24:3755:3279":{"crate_id":24,"path":["syn","token","Add"],"kind":"struct"},"18:599:6856":{"crate_id":18,"path":["memchr","memmem","twoway","Shift"],"kind":"enum"},"6:575:8131":{"crate_id":6,"path":["libc","unix","linger"],"kind":"struct"},"9:827:5691":{"crate_id":9,"path":["miniz_oxide","inflate","TINFLStatus"],"kind":"enum"},"2:4:980":{"crate_id":2,"path":["core","panic"],"kind":"macro"},"1:4401:5141":{"crate_id":1,"path":["std","os","unix","net","ancillary","AncillaryDataIter"],"kind":"struct"},"24:3225:3429":{"crate_id":24,"path":["syn","token","Typeof"],"kind":"struct"},"6:501:8086":{"crate_id":6,"path":["libc","unix","timeval"],"kind":"struct"},"6:6409:8889":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","pthread_attr_t"],"kind":"struct"},"2:21299:61604":{"crate_id":2,"path":["core","num","flt2dec","Sign"],"kind":"enum"},"2:2750:3477":{"crate_id":2,"path":["core","ops","arith","Sub"],"kind":"trait"},"17:13203:7601":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation64V2"],"kind":"struct"},"2:4522:5573":{"crate_id":2,"path":["core","char","REPLACEMENT_CHARACTER"],"kind":"constant"},"5:5533:5600":{"crate_id":5,"path":["alloc","sync","Weak"],"kind":"struct"},"16:7535:5960":{"crate_id":16,"path":["gimli","read","unit","DebugInfoUnitHeadersIter"],"kind":"struct"},"2:49800:4969":{"crate_id":2,"path":["core","slice","iter","ChunksMut"],"kind":"struct"},"12:1840:4562":{"crate_id":12,"path":["hashbrown","set","Drain"],"kind":"struct"},"1:4892:4652":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt"],"kind":"trait"},"24:1468:4667":{"crate_id":24,"path":["syn","ext","private","Sealed"],"kind":"trait"},"5:5549:5601":{"crate_id":5,"path":["alloc","sync","ArcInner"],"kind":"struct"},"12:1138:4774":{"crate_id":12,"path":["hashbrown","map","OccupiedError"],"kind":"struct"},"2:49098:71":{"crate_id":2,"path":["core","fmt","ArgumentV1"],"kind":"struct"},"1:8433:4698":{"crate_id":1,"path":["std","io","Split"],"kind":"struct"},"6:6277:8835":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statfs"],"kind":"struct"},"2:21956:164":{"crate_id":2,"path":["core","num","nonzero","NonZeroI128"],"kind":"struct"},"2:2745:3279":{"crate_id":2,"path":["core","ops","arith","Add"],"kind":"trait"},"1:4431:5144":{"crate_id":1,"path":["std","os","unix","net","ancillary","ScmCredentials"],"kind":"struct"},"2:2776:3280":{"crate_id":2,"path":["core","ops","arith","AddAssign"],"kind":"trait"},"17:13192:7597":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation32V2"],"kind":"struct"},"5:6010:6714":{"crate_id":5,"path":["alloc","vec","drain","drop","DropGuard"],"kind":"struct"},"20:77:1833":{"crate_id":20,"path":["quote","to_tokens","ToTokens"],"kind":"trait"},"6:1707:5098":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_un"],"kind":"struct"},"2:48309:91":{"crate_id":2,"path":["core","sync","atomic","AtomicU8"],"kind":"struct"},"24:2631:3408":{"crate_id":24,"path":["syn","token","Crate"],"kind":"struct"},"24:1470:6859":{"crate_id":24,"path":["syn","ext","private","PeekFn"],"kind":"struct"},"0:946:1633":{"crate_id":0,"path":["serde_derive","Serialize"],"kind":"proc_derive"},"16:3254:7738":{"crate_id":16,"path":["gimli","arch","RiscV"],"kind":"struct"},"2:46802:5310":{"crate_id":2,"path":["core","char","convert","CharTryFromError"],"kind":"struct"},"24:3351:3435":{"crate_id":24,"path":["syn","token","While"],"kind":"struct"},"1:3420:4689":{"crate_id":1,"path":["std","io","IoSliceMut"],"kind":"struct"},"24:2160:2751":{"crate_id":24,"path":["syn","parse","Unexpected"],"kind":"enum"},"16:4288:7749":{"crate_id":16,"path":["gimli","constants","DwLle"],"kind":"struct"},"24:427:64512":{"crate_id":24,"path":["syn","expr","parsing","Precedence"],"kind":"enum"},"1:973:4766":{"crate_id":1,"path":["std","collections","hash","map","RawEntryBuilderMut"],"kind":"struct"},"2:49972:5419":{"crate_id":2,"path":["core","str","iter","Chars"],"kind":"struct"},"1:6494:4816":{"crate_id":1,"path":["std","sync","mpmc","Sender"],"kind":"struct"},"2:11666:187":{"crate_id":2,"path":["core","future","pending","Pending"],"kind":"struct"},"2:20952:5217":{"crate_id":2,"path":["core","core_simd","vector","SimdElement"],"kind":"trait"},"17:9422:48562":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdatIterator"],"kind":"struct"},"17:11893:7231":{"crate_id":17,"path":["object","macho","SymtabCommand"],"kind":"struct"},"1:8692:5142":{"crate_id":1,"path":["std","os","unix","net","ancillary","SocketCred"],"kind":"struct"},"16:6139:6033":{"crate_id":16,"path":["gimli","read","abbrev","Attributes"],"kind":"enum"},"24:5502:2147":{"crate_id":24,"path":["syn","path","Constraint"],"kind":"struct"},"6:7249:9001":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_rwlock_t"],"kind":"struct"},"5:859:3253":{"crate_id":5,"path":["alloc","collections","binary_heap","Iter"],"kind":"struct"},"17:12265:7312":{"crate_id":17,"path":["object","macho","SourceVersionCommand"],"kind":"struct"},"2:50070:5425":{"crate_id":2,"path":["core","str","iter","RSplitTerminator"],"kind":"struct"},"11:0:2965":{"crate_id":11,"path":["adler"],"kind":"module"},"12:2205:3290":{"crate_id":12,"path":["hashbrown","TryReserveError"],"kind":"enum"},"16:7803:2101":{"crate_id":16,"path":["gimli","read","unit","Attribute"],"kind":"struct"},"2:21377:5492":{"crate_id":2,"path":["core","num","error","IntErrorKind"],"kind":"enum"},"17:8526:6391":{"crate_id":17,"path":["object","endian","U16Bytes"],"kind":"struct"},"17:13436:7686":{"crate_id":17,"path":["object","pe","ImageEnclaveConfig64"],"kind":"struct"},"5:1426:193":{"crate_id":5,"path":["alloc","collections","btree","map","Range"],"kind":"struct"},"2:20030:62766":{"crate_id":2,"path":["core","core_simd","swizzle","deinterleave","Odd"],"kind":"struct"},"1:6675:4270":{"crate_id":1,"path":["std","sync","once","Once"],"kind":"struct"},"22:105:9319":{"crate_id":22,"path":["proc_macro2","rcvec","RcVec"],"kind":"struct"},"24:4952:1790":{"crate_id":24,"path":["syn","expr","Member"],"kind":"enum"},"24:5506:3201":{"crate_id":24,"path":["syn","path","ParenthesizedGenericArguments"],"kind":"struct"},"21:967:4625":{"crate_id":21,"path":["proc_macro","bridge","client","FreeFunctions"],"kind":"struct"},"17:10506:7022":{"crate_id":17,"path":["object","read","pe","rich","RichHeaderInfo"],"kind":"struct"},"2:51879:5352":{"crate_id":2,"path":["core","core_arch","simd","u32x2"],"kind":"struct"},"16:6248:5958":{"crate_id":16,"path":["gimli","read","index","DebugCuIndex"],"kind":"struct"},"6:6269:8830":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","sigaction"],"kind":"struct"},"2:48085:1815":{"crate_id":2,"path":["core","option","Item"],"kind":"struct"},"18:96:54926":{"crate_id":18,"path":["memchr","memchr","iter","Memchr2"],"kind":"struct"},"1:8215:4993":{"crate_id":1,"path":["std","io","error","SimpleMessage"],"kind":"struct"},"2:52396:5322":{"crate_id":2,"path":["core","core_arch","simd","f64x4"],"kind":"struct"},"17:13327:7647":{"crate_id":17,"path":["object","pe","ImageHotPatchInfo"],"kind":"struct"},"1:3375:4680":{"crate_id":1,"path":["std","io","Guard"],"kind":"struct"},"1:5572:118":{"crate_id":1,"path":["std","path","Display"],"kind":"struct"},"24:5468:2130":{"crate_id":24,"path":["syn","path","PathArguments"],"kind":"enum"},"16:7948:5970":{"crate_id":16,"path":["gimli","read","unit","DebugTypesUnitHeadersIter"],"kind":"struct"},"2:52180:5356":{"crate_id":2,"path":["core","core_arch","simd","u64x2"],"kind":"struct"},"5:3462:3311":{"crate_id":5,"path":["alloc","collections","linked_list","Cursor"],"kind":"struct"},"17:12033:7272":{"crate_id":17,"path":["object","macho","PrebindCksumCommand"],"kind":"struct"},"5:1394:4763":{"crate_id":5,"path":["alloc","collections","btree","map","ValuesMut"],"kind":"struct"},"21:2678:3367":{"crate_id":21,"path":["proc_macro","LineColumn"],"kind":"struct"},"16:4135:7746":{"crate_id":16,"path":["gimli","constants","DwAt"],"kind":"struct"},"6:1600:8210":{"crate_id":6,"path":["libc","unix","linux_like","Dl_info"],"kind":"struct"},"16:5771:6025":{"crate_id":16,"path":["gimli","read","cfi","UnwindTableRow"],"kind":"struct"},"12:751:4562":{"crate_id":12,"path":["hashbrown","map","Drain"],"kind":"struct"},"17:8272:6417":{"crate_id":17,"path":["object","common","SymbolScope"],"kind":"enum"},"2:50805:5532":{"crate_id":2,"path":["core","time","TryFromFloatSecsErrorKind"],"kind":"enum"},"2:6989:4927":{"crate_id":2,"path":["core","iter","traits","accum","Product"],"kind":"trait"},"17:12118:7285":{"crate_id":17,"path":["object","macho","EncryptionInfoCommand64"],"kind":"struct"},"2:51683:9120":{"crate_id":2,"path":["core","core_arch","simd","u8x2"],"kind":"struct"},"2:51727:5359":{"crate_id":2,"path":["core","core_arch","simd","u8x4"],"kind":"struct"},"5:6309:4567":{"crate_id":5,"path":["alloc","vec","in_place_drop","InPlaceDrop"],"kind":"struct"},"2:50924:190":{"crate_id":2,"path":["core","task","poll","Poll"],"kind":"enum"},"5:5810:17677":{"crate_id":5,"path":["alloc","task","Wake"],"kind":"trait"},"2:49892:4976":{"crate_id":2,"path":["core","slice","iter","RChunksMut"],"kind":"struct"},"2:50967:5458":{"crate_id":2,"path":["core","task","wake","RawWakerVTable"],"kind":"struct"},"20:10:3109":{"crate_id":20,"path":["quote","ext","TokenStreamExt"],"kind":"trait"},"24:1690:3255":{"crate_id":24,"path":["syn","punctuated","PrivateIter"],"kind":"struct"},"16:5856:6028":{"crate_id":16,"path":["gimli","read","cfi","CallFrameInstruction"],"kind":"enum"},"2:47139:4921":{"crate_id":2,"path":["core","iter","adapters","filter_map","FilterMap"],"kind":"struct"},"2:50124:4979":{"crate_id":2,"path":["core","str","iter","RSplitN"],"kind":"struct"},"2:11998:4077":{"crate_id":2,"path":["core","const_closure","ConstFnMutClosure"],"kind":"struct"},"2:48170:188":{"crate_id":2,"path":["core","pin","Pin"],"kind":"struct"},"17:9681:6871":{"crate_id":17,"path":["object","read","elf","note","Note"],"kind":"struct"},"17:11125:7086":{"crate_id":17,"path":["object","elf","Syminfo32"],"kind":"struct"},"9:586:5734":{"crate_id":9,"path":["miniz_oxide","deflate","core","SymFreq"],"kind":"struct"},"24:2991:3423":{"crate_id":24,"path":["syn","token","Override"],"kind":"struct"},"17:11356:7139":{"crate_id":17,"path":["object","elf","HashHeader"],"kind":"struct"},"16:5488:6014":{"crate_id":16,"path":["gimli","read","cfi","BaseAddresses"],"kind":"struct"},"24:762:2055":{"crate_id":24,"path":["syn","lifetime","Lifetime"],"kind":"struct"},"2:6508:4914":{"crate_id":2,"path":["core","iter","adapters","zip","TrustedRandomAccessNoCoerce"],"kind":"trait"},"3:0:430":{"crate_id":3,"path":["compiler_builtins"],"kind":"module"},"24:5439:3198":{"crate_id":24,"path":["syn","ty","TypeTraitObject"],"kind":"struct"},"1:887:3253":{"crate_id":1,"path":["std","collections","hash","map","Iter"],"kind":"struct"},"14:7:9943":{"crate_id":14,"path":["rustc_demangle","legacy","Demangle"],"kind":"struct"},"24:5399:3188":{"crate_id":24,"path":["syn","ty","TypeBareFn"],"kind":"struct"},"1:7298:60992":{"crate_id":1,"path":["std","sys_common","wstr","WStrUnits"],"kind":"struct"},"21:2294:2160":{"crate_id":21,"path":["proc_macro","bridge","Punct"],"kind":"struct"},"2:20856:62676":{"crate_id":2,"path":["core","core_simd","vector","splat","Splat"],"kind":"struct"},"1:12392:3006":{"crate_id":1,"path":["std","u16"],"kind":"primitive"},"16:7958:6001":{"crate_id":16,"path":["gimli","read","value","ValueType"],"kind":"enum"},"18:699:6469":{"crate_id":18,"path":["memchr","memmem","FinderBuilder"],"kind":"struct"},"2:3191:3337":{"crate_id":2,"path":["core","ops","unsize","CoerceUnsized"],"kind":"trait"},"18:507:6873":{"crate_id":18,"path":["memchr","memmem","genericsimd","Forward"],"kind":"struct"},"2:52304:5333":{"crate_id":2,"path":["core","core_arch","simd","i32x4"],"kind":"struct"},"24:5212:1975":{"crate_id":24,"path":["syn","derive","DataStruct"],"kind":"struct"},"16:7144:6052":{"crate_id":16,"path":["gimli","read","op","EvaluationResult"],"kind":"enum"},"18:491:9322":{"crate_id":18,"path":["memchr","cow","Imp"],"kind":"struct"},"24:3980:3450":{"crate_id":24,"path":["syn","token","Dot"],"kind":"struct"},"17:10752:6313":{"crate_id":17,"path":["object","read","Import"],"kind":"struct"},"24:4517:1842":{"crate_id":24,"path":["syn","attr","NestedMeta"],"kind":"enum"},"6:5720:8770":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_entry"],"kind":"struct"},"2:29551:67":{"crate_id":2,"path":["core","ptr","alignment","Alignment"],"kind":"struct"},"18:644:6873":{"crate_id":18,"path":["memchr","memmem","x86","avx","nostd","Forward"],"kind":"struct"},"2:2784:4750":{"crate_id":2,"path":["core","ops","arith","MulAssign"],"kind":"trait"},"2:51795:5327":{"crate_id":2,"path":["core","core_arch","simd","i16x2"],"kind":"struct"},"24:4495:1840":{"crate_id":24,"path":["syn","attr","Meta","List"],"kind":"foreign_type"},"16:3001:6240":{"crate_id":16,"path":["gimli","common","DwarfFileType"],"kind":"enum"},"2:53862:5320":{"crate_id":2,"path":["core","core_arch","simd","f32x16"],"kind":"struct"},"6:4716:8569":{"crate_id":6,"path":["libc","unix","linux_like","linux","dirent64"],"kind":"struct"},"2:2662:3336":{"crate_id":2,"path":["core","marker","Unsize"],"kind":"trait"},"12:815:4766":{"crate_id":12,"path":["hashbrown","map","RawEntryBuilderMut"],"kind":"struct"},"5:6740:5631":{"crate_id":5,"path":["alloc","collections","binary_heap","IntoIterSorted"],"kind":"struct"},"1:6007:5110":{"crate_id":1,"path":["std","sync","barrier","Barrier"],"kind":"struct"},"1:8623:4801":{"crate_id":1,"path":["std","net","socket_addr","SocketAddrV6"],"kind":"struct"},"12:646:3257":{"crate_id":12,"path":["hashbrown","map","IterMut"],"kind":"struct"},"2:2654:215":{"crate_id":2,"path":["core","marker","Send"],"kind":"trait"},"17:8631:6963":{"crate_id":17,"path":["object","endian","I16Bytes"],"kind":"struct"},"18:0:2971":{"crate_id":18,"path":["memchr"],"kind":"module"},"1:524:6738":{"crate_id":1,"path":["std","thread","spawn_unchecked_","MaybeDangling"],"kind":"struct"},"16:7189:5948":{"crate_id":16,"path":["gimli","read","op","Expression"],"kind":"struct"},"2:53550:5331":{"crate_id":2,"path":["core","core_arch","simd","i16x32"],"kind":"struct"},"22:804:2474":{"crate_id":22,"path":["proc_macro2","imp","Literal"],"kind":"enum"},"6:4665:8542":{"crate_id":6,"path":["libc","unix","linux_like","linux","file_clone_range"],"kind":"struct"},"17:1931:6323":{"crate_id":17,"path":["object","read","elf","relocation","ElfDynamicRelocationIterator"],"kind":"struct"},"17:11787:7218":{"crate_id":17,"path":["object","macho","SubUmbrellaCommand"],"kind":"struct"},"24:3243:1804":{"crate_id":24,"path":["syn","token","Union"],"kind":"struct"},"1:6884:212":{"crate_id":1,"path":["std","sync","rwlock","RwLock"],"kind":"struct"},"16:4404:7753":{"crate_id":16,"path":["gimli","constants","DwVis"],"kind":"struct"},"6:5727:8771":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_exit"],"kind":"struct"},"1:4214:4841":{"crate_id":1,"path":["std","os","unix","ffi","os_str","OsStrExt"],"kind":"trait"},"5:4737:5600":{"crate_id":5,"path":["alloc","rc","Weak"],"kind":"struct"},"24:2649:114":{"crate_id":24,"path":["syn","token","Default"],"kind":"struct"},"12:697:4765":{"crate_id":12,"path":["hashbrown","map","IntoValues"],"kind":"struct"},"1:11659:6761":{"crate_id":1,"path":["std","sys_common","once","futex","CompletionGuard"],"kind":"struct"},"2:58279:9200":{"crate_id":2,"path":["core","core_simd","vector","ptr","SimdConstPtr"],"kind":"struct"},"1:7953:4776":{"crate_id":1,"path":["std","collections","hash","map","DefaultHasher"],"kind":"struct"},"2:49013:67":{"crate_id":2,"path":["core","fmt","Alignment"],"kind":"enum"},"24:2434:3480":{"crate_id":24,"path":["syn","token","Underscore"],"kind":"struct"},"20:37:2827":{"crate_id":20,"path":["quote","format_ident"],"kind":"macro"},"6:1518:8161":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreq_source"],"kind":"struct"},"1:7937:12249":{"crate_id":1,"path":["std","backtrace","RawFrame"],"kind":"enum"},"2:20687:5219":{"crate_id":2,"path":["core","core_simd","ord","SimdPartialOrd"],"kind":"trait"},"24:2076:6496":{"crate_id":24,"path":["syn","parse","discouraged","Speculative"],"kind":"trait"},"2:21149:9017":{"crate_id":2,"path":["core","num","dec2flt","common","AsciiStr"],"kind":"struct"},"17:12980:7543":{"crate_id":17,"path":["object","pe","ImageArchiveMemberHeader"],"kind":"struct"},"6:4737:8576":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_setup"],"kind":"struct"},"2:21170:5179":{"crate_id":2,"path":["core","num","dec2flt","common","BiasedFp"],"kind":"struct"},"17:13100:7572":{"crate_id":17,"path":["object","pe","ImageDelayloadDescriptor"],"kind":"struct"},"16:6759:5976":{"crate_id":16,"path":["gimli","read","loclists","LocListIter"],"kind":"struct"},"17:10546:48502":{"crate_id":17,"path":["object","read","FileKind"],"kind":"enum"},"17:11606:7193":{"crate_id":17,"path":["object","macho","LcStr"],"kind":"struct"},"18:766:6474":{"crate_id":18,"path":["memchr","memmem","SearcherRevKind"],"kind":"enum"},"2:54068:9187":{"crate_id":2,"path":["core","core_arch","x86","__m512i"],"kind":"struct"},"24:2955:3421":{"crate_id":24,"path":["syn","token","Move"],"kind":"struct"},"1:2610:4700":{"crate_id":1,"path":["std","io","buffered","bufwriter","WriterPanicked"],"kind":"struct"},"17:10520:7025":{"crate_id":17,"path":["object","read","pe","rich","RichHeaderEntry"],"kind":"struct"},"2:39315:1922":{"crate_id":2,"path":["core","error","private","Internal"],"kind":"struct"},"2:49310:4782":{"crate_id":2,"path":["core","hash","sip","SipHasher13"],"kind":"struct"},"17:13459:7687":{"crate_id":17,"path":["object","pe","ImageEnclaveImport"],"kind":"struct"},"24:4586:3129":{"crate_id":24,"path":["syn","data","VisRestricted"],"kind":"struct"},"17:967:48563":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbolIterator"],"kind":"struct"},"1:931:4762":{"crate_id":1,"path":["std","collections","hash","map","Values"],"kind":"struct"},"17:13279:7646":{"crate_id":17,"path":["object","pe","ImageLoadConfigDirectory64"],"kind":"struct"},"6:4565:8496":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_vm"],"kind":"struct"},"1:3152:5070":{"crate_id":1,"path":["std","io","stdio","StdinRaw"],"kind":"struct"},"24:4912:3159":{"crate_id":24,"path":["syn","expr","ExprReturn"],"kind":"struct"},"22:776:1831":{"crate_id":22,"path":["proc_macro2","imp","Span"],"kind":"enum"},"6:4551:8490":{"crate_id":6,"path":["libc","unix","linux_like","linux","inotify_event"],"kind":"struct"},"17:247:64356":{"crate_id":17,"path":["object","read","util","DebugLen"],"kind":"struct"},"5:7002:5626":{"crate_id":5,"path":["alloc","string","FromUtf16Error"],"kind":"struct"},"2:47148:9403":{"crate_id":2,"path":["core","iter","adapters","flatten","FlattenCompat"],"kind":"struct"},"24:4896:2030":{"crate_id":24,"path":["syn","expr","ExprPath"],"kind":"struct"},"2:19990:62678":{"crate_id":2,"path":["core","core_simd","swizzle","rotate_lanes_right","Rotate"],"kind":"struct"},"2:53052:5319":{"crate_id":2,"path":["core","core_arch","simd","f32x8"],"kind":"struct"},"1:12345:12253":{"crate_id":1,"path":["std","backtrace_rs","types","BytesOrWideString"],"kind":"enum"},"24:5055:2449":{"crate_id":24,"path":["syn","generics","TraitBoundModifier"],"kind":"enum"},"2:39279:4643":{"crate_id":2,"path":["core","convert","Infallible"],"kind":"enum"},"16:6354:6040":{"crate_id":16,"path":["gimli","read","line","LineInstruction"],"kind":"enum"},"17:487:48491":{"crate_id":17,"path":["object","read","any","Comdat"],"kind":"struct"},"2:52372:5321":{"crate_id":2,"path":["core","core_arch","simd","f64x2"],"kind":"struct"},"6:5733:8774":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_seccomp"],"kind":"struct"},"16:7581:5983":{"crate_id":16,"path":["gimli","read","unit","UnitHeader"],"kind":"struct"},"5:1933:4206":{"crate_id":5,"path":["alloc","collections","btree","mem","replace","PanicGuard"],"kind":"struct"},"6:4102:8298":{"crate_id":6,"path":["libc","unix","linux_like","linux","glob_t"],"kind":"struct"},"24:2685:3410":{"crate_id":24,"path":["syn","token","Dyn"],"kind":"struct"},"5:5360:227":{"crate_id":5,"path":["alloc","string","ToString"],"kind":"trait"},"5:6822:3252":{"crate_id":5,"path":["alloc","collections","vec_deque","into_iter","IntoIter"],"kind":"struct"},"6:608:8149":{"crate_id":6,"path":["libc","unix","protoent"],"kind":"struct"},"6:4644:8532":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlmsghdr"],"kind":"struct"},"5:620:9948":{"crate_id":5,"path":["alloc","boxed","from","StringError"],"kind":"struct"},"24:4948:3168":{"crate_id":24,"path":["syn","expr","ExprYield"],"kind":"struct"},"6:4329:8428":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_rumble_effect"],"kind":"struct"},"24:4161:3462":{"crate_id":24,"path":["syn","token","OrEq"],"kind":"struct"},"2:7140:154":{"crate_id":2,"path":["core","iter","traits","iterator","Iterator"],"kind":"trait"},"16:4597:7758":{"crate_id":16,"path":["gimli","constants","DwCc"],"kind":"struct"},"1:11173:4661":{"crate_id":1,"path":["std","sys","unix","fs","OpenOptions"],"kind":"struct"},"6:5749:8778":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","sifields_sigchld"],"kind":"struct"},"1:12021:5887":{"crate_id":1,"path":["std","backtrace_rs","backtrace","Frame"],"kind":"struct"},"6:4317:8422":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_periodic_effect"],"kind":"struct"},"24:2613:106":{"crate_id":24,"path":["syn","token","Continue"],"kind":"struct"},"16:7022:6220":{"crate_id":16,"path":["gimli","read","op","OperationEvaluationResult"],"kind":"enum"},"24:4509:3123":{"crate_id":24,"path":["syn","attr","MetaList"],"kind":"struct"},"24:4959:2247":{"crate_id":24,"path":["syn","expr","Index"],"kind":"struct"},"1:6134:6742":{"crate_id":1,"path":["std","sync","mpmc","array","Channel"],"kind":"struct"},"2:50020:4977":{"crate_id":2,"path":["core","str","iter","RSplit"],"kind":"struct"},"2:46500:5224":{"crate_id":2,"path":["core","ops","try_trait","Yeet"],"kind":"struct"},"1:10838:4890":{"crate_id":1,"path":["std","sys","unix","process","process_common","CommandArgs"],"kind":"struct"},"18:531:6479":{"crate_id":18,"path":["memchr","memmem","prefilter","PrefilterState"],"kind":"struct"},"6:4367:8444":{"crate_id":6,"path":["libc","unix","linux_like","linux","dl_phdr_info"],"kind":"struct"},"22:668:1622":{"crate_id":22,"path":["proc_macro2","fallback","TokenStream"],"kind":"struct"},"24:1369:64629":{"crate_id":24,"path":["syn","buffer","empty","UnsafeSyncEntry"],"kind":"struct"},"14:215:9373":{"crate_id":14,"path":["rustc_demangle","TryDemangleError"],"kind":"struct"},"2:8583:118":{"crate_id":2,"path":["core","fmt","Display"],"kind":"trait"},"21:2418:1832":{"crate_id":21,"path":["proc_macro","bridge","TokenTree"],"kind":"enum"},"1:6076:5122":{"crate_id":1,"path":["std","sync","lazy_lock","LazyLock"],"kind":"struct"},"17:11259:7110":{"crate_id":17,"path":["object","elf","Versym"],"kind":"struct"},"17:10062:48679":{"crate_id":17,"path":["object","read","macho","segment","MachOSegmentIterator"],"kind":"struct"},"2:20196:5366":{"crate_id":2,"path":["core","core_simd","elements","int","SimdInt"],"kind":"trait"},"16:2548:6232":{"crate_id":16,"path":["gimli","common","DebugLocListsIndex"],"kind":"struct"},"1:12373:2990":{"crate_id":1,"path":["std","never"],"kind":"primitive"},"16:5592:6203":{"crate_id":16,"path":["gimli","read","cfi","AugmentationData"],"kind":"struct"},"1:5761:4891":{"crate_id":1,"path":["std","process","Stdio"],"kind":"struct"},"1:8427:2742":{"crate_id":1,"path":["std","io","Bytes"],"kind":"struct"},"2:2142:573":{"crate_id":2,"path":["core","ptr","drop_in_place"],"kind":"function"},"16:6037:6228":{"crate_id":16,"path":["gimli","read","dwarf","RangeIterInner"],"kind":"enum"},"24:5216:1977":{"crate_id":24,"path":["syn","derive","DataEnum"],"kind":"struct"},"6:4592:8513":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_tp"],"kind":"struct"},"2:2664:221":{"crate_id":2,"path":["core","marker","StructuralPartialEq"],"kind":"trait"},"1:10404:5099":{"crate_id":1,"path":["std","sys","unix","net","Socket"],"kind":"struct"},"1:5225:3683":{"crate_id":1,"path":["std","panic","always_abort"],"kind":"function"},"2:4264:3330":{"crate_id":2,"path":["core","cell","Ref"],"kind":"struct"},"2:47509:4270":{"crate_id":2,"path":["core","iter","sources","once","Once"],"kind":"struct"},"2:11023:5226":{"crate_id":2,"path":["core","str","pattern"],"kind":"module"},"1:8081:5047":{"crate_id":1,"path":["std","fs","FileTimes"],"kind":"struct"},"24:4491:1839":{"crate_id":24,"path":["syn","attr","Meta"],"kind":"enum"},"17:8393:6298":{"crate_id":17,"path":["object","common","SegmentFlags"],"kind":"enum"},"22:786:1756":{"crate_id":22,"path":["proc_macro2","imp","Group"],"kind":"enum"},"16:4653:7760":{"crate_id":16,"path":["gimli","constants","DwOrd"],"kind":"struct"},"22:480:3270":{"crate_id":22,"path":["proc_macro2","LexError"],"kind":"struct"},"19:0:996":{"crate_id":19,"path":["panic_unwind"],"kind":"module"},"24:4916:3160":{"crate_id":24,"path":["syn","expr","ExprStruct"],"kind":"struct"},"1:678:12248":{"crate_id":1,"path":["std","backtrace","BacktraceFrame"],"kind":"struct"},"6:6524:8954":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","shmid_ds"],"kind":"struct"},"2:2772:4745":{"crate_id":2,"path":["core","ops","arith","Neg"],"kind":"trait"},"1:4655:5103":{"crate_id":1,"path":["std","os","unix","net","stream","UnixStream"],"kind":"struct"},"1:2026:180":{"crate_id":1,"path":["std","ffi","os_str","OsString"],"kind":"struct"},"2:20692:17483":{"crate_id":2,"path":["core","core_simd","ord","SimdOrd"],"kind":"trait"},"2:2309:177":{"crate_id":2,"path":["core","cmp","Ord"],"kind":"trait"},"2:4338:3333":{"crate_id":2,"path":["core","cell","UnsafeCell"],"kind":"struct"},"2:48221:3253":{"crate_id":2,"path":["core","result","Iter"],"kind":"struct"},"16:2570:6283":{"crate_id":16,"path":["gimli","common","DebugMacinfoOffset"],"kind":"struct"},"22:327:3270":{"crate_id":22,"path":["proc_macro2","imp","LexError"],"kind":"enum"},"24:4530:1781":{"crate_id":24,"path":["syn","data","Variant"],"kind":"struct"},"16:2273:6213":{"crate_id":16,"path":["gimli","common","Encoding"],"kind":"struct"},"2:2927:3382":{"crate_id":2,"path":["core","ops","function","FnMut"],"kind":"trait"},"17:9293:6429":{"crate_id":17,"path":["object","read","coff","file","CoffFile"],"kind":"struct"},"6:5692:8756":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","Elf32_Chdr"],"kind":"struct"},"9:649:5738":{"crate_id":9,"path":["miniz_oxide","deflate","core","TDEFLStatus"],"kind":"enum"},"24:636:2826":{"crate_id":24,"path":["syn","generics","TypeGenerics"],"kind":"struct"},"17:10921:7042":{"crate_id":17,"path":["object","archive","Header"],"kind":"struct"},"16:5642:6020":{"crate_id":16,"path":["gimli","read","cfi","PartialFrameDescriptionEntry"],"kind":"struct"},"24:3171:2234":{"crate_id":24,"path":["syn","token","Trait"],"kind":"struct"},"12:2178:1756":{"crate_id":12,"path":["hashbrown","raw","sse2","Group"],"kind":"struct"},"16:6294:5985":{"crate_id":16,"path":["gimli","read","index","UnitIndexSectionIterator"],"kind":"struct"},"1:8588:4799":{"crate_id":1,"path":["std","net","socket_addr","SocketAddr"],"kind":"enum"},"2:2570:126":{"crate_id":2,"path":["core","error","Error"],"kind":"trait"},"1:9365:4818":{"crate_id":1,"path":["std","sync","mpsc","SendError"],"kind":"struct"},"1:3312:4703":{"crate_id":1,"path":["std","io","stdio","IsTerminal"],"kind":"trait"},"24:4518:1839":{"crate_id":24,"path":["syn","attr","NestedMeta","Meta"],"kind":"foreign_type"},"17:8951:64350":{"crate_id":17,"path":["object","read","any","SectionIteratorInternal"],"kind":"enum"},"11:36:8000":{"crate_id":11,"path":["adler","algo","U32X4"],"kind":"struct"},"24:4468:1820":{"crate_id":24,"path":["syn","Token"],"kind":"macro"},"17:12926:7531":{"crate_id":17,"path":["object","pe","ImageAuxSymbolWeak"],"kind":"struct"},"17:9317:6425":{"crate_id":17,"path":["object","read","coff","section","CoffSegmentIterator"],"kind":"struct"},"17:13340:7653":{"crate_id":17,"path":["object","pe","ImageHotPatchBase"],"kind":"struct"},"24:3207:1753":{"crate_id":24,"path":["syn","token","Type"],"kind":"struct"},"6:1574:8194":{"crate_id":6,"path":["libc","unix","linux_like","fd_set"],"kind":"struct"},"2:52274:5329":{"crate_id":2,"path":["core","core_arch","simd","i16x8"],"kind":"struct"},"6:4461:8459":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Shdr"],"kind":"struct"},"2:46424:196":{"crate_id":2,"path":["core","ops","range","RangeInclusive"],"kind":"struct"},"1:11729:9435":{"crate_id":1,"path":["std","sys_common","wtf8","Wtf8Buf"],"kind":"struct"},"2:48178:205":{"crate_id":2,"path":["core","result","Result"],"kind":"enum"},"5:2944:4837":{"crate_id":5,"path":["alloc","collections","btree","set","Difference"],"kind":"struct"},"22:844:1831":{"crate_id":22,"path":["proc_macro2","Span"],"kind":"struct"},"2:47316:4929":{"crate_id":2,"path":["core","iter","adapters","zip","Zip"],"kind":"struct"},"17:9820:6433":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldSubCache"],"kind":"struct"},"6:6322:8859":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stack_t"],"kind":"struct"},"22:945:3252":{"crate_id":22,"path":["proc_macro2","token_stream","IntoIter"],"kind":"struct"},"2:50002:4698":{"crate_id":2,"path":["core","str","iter","Split"],"kind":"struct"},"2:47518:9408":{"crate_id":2,"path":["core","iter","sources","once_with","OnceWith"],"kind":"struct"},"17:13506:7701":{"crate_id":17,"path":["object","pe","ImageDebugMisc"],"kind":"struct"},"1:5167:4906":{"crate_id":1,"path":["std","os","net","linux_ext","addr","SocketAddrExt"],"kind":"trait"},"24:2301:6500":{"crate_id":24,"path":["syn","error","ErrorMessage"],"kind":"struct"},"17:9778:6377":{"crate_id":17,"path":["object","read","elf","version","VerneedIterator"],"kind":"struct"},"1:8069:5045":{"crate_id":1,"path":["std","fs","ReadDir"],"kind":"struct"},"12:810:4763":{"crate_id":12,"path":["hashbrown","map","ValuesMut"],"kind":"struct"},"24:5455:2192":{"crate_id":24,"path":["syn","ty","ReturnType"],"kind":"enum"},"22:14:56582":{"crate_id":22,"path":["proc_macro2","marker","ProcMacroAutoTraits"],"kind":"struct"},"16:3393:7739":{"crate_id":16,"path":["gimli","arch","X86"],"kind":"struct"},"2:48461:89":{"crate_id":2,"path":["core","sync","atomic","AtomicU32"],"kind":"struct"},"17:9577:6328":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbolTable"],"kind":"struct"}},"external_crates":{"14":{"name":"rustc_demangle","html_root_url":"https://doc.rust-lang.org/nightly/"},"8":{"name":"cfg_if","html_root_url":"https://docs.rs/cfg-if/"},"2":{"name":"core","html_root_url":"https://doc.rust-lang.org/nightly/"},"6":{"name":"libc","html_root_url":"https://doc.rust-lang.org/nightly/"},"20":{"name":"quote","html_root_url":"https://docs.rs/quote/1.0.23/"},"3":{"name":"compiler_builtins","html_root_url":"https://doc.rust-lang.org/nightly/"},"9":{"name":"miniz_oxide","html_root_url":"https://doc.rust-lang.org/nightly/"},"4":{"name":"rustc_std_workspace_core","html_root_url":"https://doc.rust-lang.org/nightly/"},"15":{"name":"addr2line","html_root_url":"https://doc.rust-lang.org/nightly/"},"1":{"name":"std","html_root_url":"https://doc.rust-lang.org/nightly/"},"23":{"name":"unicode_ident","html_root_url":null},"22":{"name":"proc_macro2","html_root_url":"https://docs.rs/proc-macro2/1.0.49/"},"16":{"name":"gimli","html_root_url":"https://doc.rust-lang.org/nightly/"},"10":{"name":"rustc_std_workspace_alloc","html_root_url":"https://doc.rust-lang.org/nightly/"},"5":{"name":"alloc","html_root_url":"https://doc.rust-lang.org/nightly/"},"17":{"name":"object","html_root_url":"https://doc.rust-lang.org/nightly/"},"11":{"name":"adler","html_root_url":"https://docs.rs/adler/1.0.2/"},"24":{"name":"syn","html_root_url":"https://docs.rs/syn/1.0.107/"},"13":{"name":"std_detect","html_root_url":"https://doc.rust-lang.org/nightly/"},"18":{"name":"memchr","html_root_url":"https://doc.rust-lang.org/nightly/"},"7":{"name":"unwind","html_root_url":"https://doc.rust-lang.org/nightly/"},"12":{"name":"hashbrown","html_root_url":"https://doc.rust-lang.org/nightly/"},"21":{"name":"proc_macro","html_root_url":"https://doc.rust-lang.org/nightly/"},"19":{"name":"panic_unwind","html_root_url":"https://doc.rust-lang.org/nightly/"}},"format_version":23}