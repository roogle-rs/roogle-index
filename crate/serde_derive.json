{"root":"0:0:1700","crate_version":"1.0.164","includes_private":false,"index":{"2:12047:1962":{"id":"2:12047:1962","crate_id":2,"name":"contains","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a sub-slice of\nthis string slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nBasic usage:\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.contains(\"nana\"));\nassert!(!bananas.contains(\"apples\"));\n```","links":{"prim@char":"1:11917:418","self::pattern":"2:11716:14376"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11721:14373","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12045:35920":{"id":"2:12045:35920","crate_id":2,"name":"lines_any","span":null,"visibility":"public","docs":"An iterator over the lines of a string.","links":{},"attrs":["#[deprecated(since = \"1.4.0\", note = \"use lines() instead now\")]"],"deprecation":{"since":"1.4.0","note":"use lines() instead now"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"LinesAny","id":"2:43635:8397","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12117:26831":{"id":"2:12117:26831","crate_id":2,"name":"strip_prefix","span":null,"visibility":"public","docs":"Returns a string slice with the prefix removed.\n\nIf the string starts with the pattern `prefix`, returns substring after the prefix, wrapped\nin `Some`.  Unlike `trim_start_matches`, this method removes the prefix exactly once.\n\nIf the string does not start with `prefix`, returns `None`.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nassert_eq!(\"foo:bar\".strip_prefix(\"foo:\"), Some(\"bar\"));\nassert_eq!(\"foo:bar\".strip_prefix(\"bar\"), None);\nassert_eq!(\"foofoo\".strip_prefix(\"foo\"), Some(\"foo\"));\n```","links":{"prim@char":"1:11917:418","self::pattern":"2:11716:14376"},"attrs":["#[must_use =\n\"this returns the remaining substring as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["prefix",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:41402:181","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11721:14373","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12039:2355":{"id":"2:12039:2355","crate_id":2,"name":"chars","span":null,"visibility":"public","docs":"Returns an iterator over the [`char`]s of a string slice.\n\nAs a string slice consists of valid UTF-8, we can iterate through a\nstring slice by [`char`]. This method returns such an iterator.\n\nIt's important to remember that [`char`] represents a Unicode Scalar\nValue, and might not match your idea of what a 'character' is. Iteration\nover grapheme clusters may be what you actually want. This functionality\nis not provided by Rust's standard library, check crates.io instead.\n\n# Examples\n\nBasic usage:\n\n```\nlet word = \"goodbye\";\n\nlet count = word.chars().count();\nassert_eq!(7, count);\n\nlet mut chars = word.chars();\n\nassert_eq!(Some('g'), chars.next());\nassert_eq!(Some('o'), chars.next());\nassert_eq!(Some('o'), chars.next());\nassert_eq!(Some('d'), chars.next());\nassert_eq!(Some('b'), chars.next());\nassert_eq!(Some('y'), chars.next());\nassert_eq!(Some('e'), chars.next());\n\nassert_eq!(None, chars.next());\n```\n\nRemember, [`char`]s might not match your intuition about characters:\n\n[`char`]: prim@char\n\n```\nlet y = \"y̆\";\n\nlet mut chars = y.chars();\n\nassert_eq!(Some('y'), chars.next()); // not 'y̆'\nassert_eq!(Some('\\u{0306}'), chars.next());\n\nassert_eq!(None, chars.next());\n```","links":{"prim@char":"1:11917:418"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Chars","id":"2:43341:8379","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12040:2349":{"id":"2:12040:2349","crate_id":2,"name":"char_indices","span":null,"visibility":"public","docs":"Returns an iterator over the [`char`]s of a string slice, and their\npositions.\n\nAs a string slice consists of valid UTF-8, we can iterate through a\nstring slice by [`char`]. This method returns an iterator of both\nthese [`char`]s, as well as their byte positions.\n\nThe iterator yields tuples. The position is first, the [`char`] is\nsecond.\n\n# Examples\n\nBasic usage:\n\n```\nlet word = \"goodbye\";\n\nlet count = word.char_indices().count();\nassert_eq!(7, count);\n\nlet mut char_indices = word.char_indices();\n\nassert_eq!(Some((0, 'g')), char_indices.next());\nassert_eq!(Some((1, 'o')), char_indices.next());\nassert_eq!(Some((2, 'o')), char_indices.next());\nassert_eq!(Some((3, 'd')), char_indices.next());\nassert_eq!(Some((4, 'b')), char_indices.next());\nassert_eq!(Some((5, 'y')), char_indices.next());\nassert_eq!(Some((6, 'e')), char_indices.next());\n\nassert_eq!(None, char_indices.next());\n```\n\nRemember, [`char`]s might not match your intuition about characters:\n\n[`char`]: prim@char\n\n```\nlet yes = \"y̆es\";\n\nlet mut char_indices = yes.char_indices();\n\nassert_eq!(Some((0, 'y')), char_indices.next()); // not (0, 'y̆')\nassert_eq!(Some((1, '\\u{0306}')), char_indices.next());\n\n// note the 3 here - the last character took up two bytes\nassert_eq!(Some((3, 'e')), char_indices.next());\nassert_eq!(Some((4, 's')), char_indices.next());\n\nassert_eq!(None, char_indices.next());\n```","links":{"prim@char":"1:11917:418"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"CharIndices","id":"2:43347:8380","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12134:4446":{"id":"2:12134:4446","crate_id":2,"name":"is_ascii","span":null,"visibility":"public","docs":"Checks if all characters in this string are within the ASCII range.\n\n# Examples\n\n```\nlet ascii = \"hello!\\n\";\nlet non_ascii = \"Grüße, Jürgen ❤\";\n\nassert!(ascii.is_ascii());\nassert!(!non_ascii.is_ascii());\n```","links":{},"attrs":["#[rustc_const_unstable(feature = \"const_slice_is_ascii\", issue = \"111090\")]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:63:345":{"id":"0:63:345","crate_id":0,"name":"attr","span":{"filename":"src/internals/attr.rs","begin":[1,0],"end":[1805,1]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"module":{"is_crate":false,"items":["0:85-0:958:1910"],"is_stripped":false}}},"2:12107:35930":{"id":"2:12107:35930","crate_id":2,"name":"trim_end","span":null,"visibility":"public","docs":"Returns a string slice with trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Text directionality\n\nA string is a sequence of bytes. `end` in this context means the last\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be right side, and for right-to-left languages like\nArabic or Hebrew, this will be the left side.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\nassert_eq!(\"\\n Hello\\tworld\", s.trim_end());\n```\n\nDirectionality:\n\n```\nlet s = \"  English  \";\nassert!(Some('h') == s.trim_end().chars().rev().next());\n\nlet s = \"  עברית  \";\nassert!(Some('ת') == s.trim_end().chars().rev().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_trim_end\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12038:28461":{"id":"2:12038:28461","crate_id":2,"name":"split_at_mut","span":null,"visibility":"public","docs":"Divide one mutable string slice into two at an index.\n\nThe argument, `mid`, should be a byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get immutable string slices instead, see the [`split_at`] method.\n\n[`split_at`]: str::split_at\n\n# Panics\n\nPanics if `mid` is not on a UTF-8 code point boundary, or if it is\npast the end of the last code point of the string slice.\n\n# Examples\n\nBasic usage:\n\n```\nlet mut s = \"Per Martin-Löf\".to_string();\n{\n    let (first, last) = s.split_at_mut(3);\n    first.make_ascii_uppercase();\n    assert_eq!(\"PER\", first);\n    assert_eq!(\" Martin-Löf\", last);\n}\nassert_eq!(\"PER Martin-Löf\", s);\n```","links":{"str::split_at":"2:12037:2669"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["mid",{"primitive":"usize"}]],"output":{"tuple":[{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12138:4449":{"id":"2:12138:4449","crate_id":2,"name":"make_ascii_lowercase","span":null,"visibility":"public","docs":"Converts this string to its ASCII lower case equivalent in-place.\n\nASCII letters 'A' to 'Z' are mapped to 'a' to 'z',\nbut non-ASCII letters are unchanged.\n\nTo return a new lowercased value without modifying the existing one, use\n[`to_ascii_lowercase()`].\n\n[`to_ascii_lowercase()`]: #method.to_ascii_lowercase\n\n# Examples\n\n```\nlet mut s = String::from(\"GRÜßE, JÜRGEN ❤\");\n\ns.make_ascii_lowercase();\n\nassert_eq!(\"grÜße, jÜrgen ❤\", s);\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12141:3414":{"id":"2:12141:3414","crate_id":2,"name":"escape_default","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_default`].\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"❤\\n!\".escape_default() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"❤\\n!\".escape_default());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"\\\\u{{2764}}\\\\n!\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"❤\\n!\".escape_default().to_string(), \"\\\\u{2764}\\\\n!\");\n```","links":{"`char::escape_default`":"2:4540:3414"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EscapeDefault","id":"2:43679:3415","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12025:314":{"id":"2:12025:314","crate_id":2,"name":"as_ptr","span":null,"visibility":"public","docs":"Converts a string slice to a raw pointer.\n\nAs string slices are a slice of bytes, the raw pointer points to a\n[`u8`]. This pointer will be pointing to the first byte of the string\nslice.\n\nThe caller must ensure that the returned pointer is never written to.\nIf you need to mutate the contents of the string slice, use [`as_mut_ptr`].\n\n[`as_mut_ptr`]: str::as_mut_ptr\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"Hello\";\nlet ptr = s.as_ptr();\n```","links":{"str::as_mut_ptr":"2:12026:28438","`u8`":"1:11934:1501"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"raw_pointer":{"mutable":false,"type":{"primitive":"u8"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12014":{"id":"2:12014","crate_id":2,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":["#[cfg(not(test))]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"primitive":"str"},"items":["2:12015:812","2:12016:2031","2:12017:35914","2:12018:35915","2:12020:35916","2:12023:2772","2:12024:35917","2:12025:314","2:12026:28438","2:12027:1925","2:12029:28435","2:12031:28436","2:12033:28437","2:12035:35918","2:12036:35919","2:12037:2669","2:12038:28461","2:12039:2355","2:12040:2349","2:12041:8301","2:12042:33267","2:12043:33266","2:12044:27098","2:12045:35920","2:12046:33334","2:12047:1962","2:12050:28477","2:12053:28478","2:12056:2574","2:12060:4130","2:12064:27097","2:12067:28469","2:12070:28471","2:12073:35921","2:12076:35922","2:12079:28473","2:12082:28475","2:12085:35923","2:12088:35924","2:12091:3109","2:12094:35925","2:12097:35926","2:12100:35927","2:12103:35928","2:12105:35929","2:12107:35930","2:12109:35931","2:12110:35932","2:12111:35933","2:12114:1944","2:12117:26831","2:12120:28479","2:12123:35934","2:12126:35935","2:12129:35936","2:12132:1906","2:12134:4446","2:12135:28368","2:12136:4447","2:12137:4448","2:12138:4449","2:12139:35937","2:12141:3414","2:12142:35938"],"negative":false,"synthetic":false,"blanket_impl":null}}},"2:12114:1944":{"id":"2:12114:1944","crate_id":2,"name":"trim_start_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. `start` in this context means the first\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be left side, and for right-to-left languages like\nArabic or Hebrew, this will be the right side.\n\n# Examples\n\nBasic usage:\n\n```\nassert_eq!(\"11foo1bar11\".trim_start_matches('1'), \"foo1bar11\");\nassert_eq!(\"123foo1bar123\".trim_start_matches(char::is_numeric), \"foo1bar123\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_start_matches(x), \"foo1bar12\");\n```","links":{"prim@char":"1:11917:418","self::pattern":"2:11716:14376"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11721:14373","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12103:35928":{"id":"2:12103:35928","crate_id":2,"name":"trim","span":null,"visibility":"public","docs":"Returns a string slice with leading and trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\n\nassert_eq!(\"Hello\\tworld\", s.trim());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a slice, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_trim\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12139:35937":{"id":"2:12139:35937","crate_id":2,"name":"escape_debug","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_debug`].\n\nNote: only extended grapheme codepoints that begin the string will be\nescaped.\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"❤\\n!\".escape_debug() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"❤\\n!\".escape_debug());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"❤\\\\n!\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"❤\\n!\".escape_debug().to_string(), \"❤\\\\n!\");\n```","links":{"`char::escape_debug`":"2:4539:35937"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EscapeDebug","id":"2:43670:8342","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5426:2345":{"id":"5:5426:2345","crate_id":5,"name":"to_ascii_lowercase","span":null,"visibility":"public","docs":"Returns a copy of this string where each character is mapped to its\nASCII lower case equivalent.\n\nASCII letters 'A' to 'Z' are mapped to 'a' to 'z',\nbut non-ASCII letters are unchanged.\n\nTo lowercase the value in-place, use [`make_ascii_lowercase`].\n\nTo lowercase ASCII characters in addition to non-ASCII characters, use\n[`to_lowercase`].\n\n# Examples\n\n```\nlet s = \"Grüße, Jürgen ❤\";\n\nassert_eq!(\"grüße, jürgen ❤\", s.to_ascii_lowercase());\n```\n\n[`make_ascii_lowercase`]: str::make_ascii_lowercase\n[`to_lowercase`]: #method.to_lowercase","links":{"str::make_ascii_lowercase":"2:12138:4449"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use = \"to lowercase the value in-place, use `make_ascii_lowercase()`\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7254:224","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12067:28469":{"id":"2:12067:28469","crate_id":2,"name":"split_inclusive","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by\ncharacters matched by a pattern. Differs from the iterator produced by\n`split` in that `split_inclusive` leaves the matched part as the\nterminator of the substring.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\\nlittle lamb\\nlittle lamb.\"\n    .split_inclusive('\\n').collect();\nassert_eq!(v, [\"Mary had a little lamb\\n\", \"little lamb\\n\", \"little lamb.\"]);\n```\n\nIf the last element of the string is matched,\nthat element will be considered the terminator of the preceding substring.\nThat substring will be the last item returned by the iterator.\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\\nlittle lamb\\nlittle lamb.\\n\"\n    .split_inclusive('\\n').collect();\nassert_eq!(v, [\"Mary had a little lamb\\n\", \"little lamb\\n\", \"little lamb.\\n\"]);\n```","links":{"prim@char":"1:11917:418","self::pattern":"2:11716:14376"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"SplitInclusive","id":"2:11539:8311","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11721:14373","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:326-0:954:1812":{"id":"0:326-0:954:1812","crate_id":0,"name":null,"span":{"filename":"src/internals/mod.rs","begin":[5,0],"end":[5,25]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"import":{"source":"self::ctxt::Ctxt","name":"Ctxt","id":"0:954:1812","glob":false}}},"2:12036:35919":{"id":"2:12036:35919","crate_id":2,"name":"slice_mut_unchecked","span":null,"visibility":"public","docs":"Creates a string slice from another string slice, bypassing safety\nchecks.\nThis is generally not recommended, use with caution! For a safe\nalternative see [`str`] and [`IndexMut`].\n\n[`IndexMut`]: crate::ops::IndexMut\n\nThis new slice goes from `begin` to `end`, including `begin` but\nexcluding `end`.\n\nTo get an immutable string slice instead, see the\n[`slice_unchecked`] method.\n\n[`slice_unchecked`]: str::slice_unchecked\n\n# Safety\n\nCallers of this function are responsible that three preconditions are\nsatisfied:\n\n* `begin` must not exceed `end`.\n* `begin` and `end` must be byte positions within the string slice.\n* `begin` and `end` must lie on UTF-8 sequence boundaries.","links":{"`str`":"1:11923:1399","crate::ops::IndexMut":"2:2985:3267","str::slice_unchecked":"2:12035:35918"},"attrs":["#[deprecated(since = \"1.29.0\", note =\n\"use `get_unchecked_mut(begin..end)` instead\")]"],"deprecation":{"since":"1.29.0","note":"use `get_unchecked_mut(begin..end)` instead"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["begin",{"primitive":"usize"}],["end",{"primitive":"usize"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"2:12042:33267":{"id":"2:12042:33267","crate_id":2,"name":"split_whitespace","span":null,"visibility":"public","docs":"Splits a string slice by whitespace.\n\nThe iterator returned will return string slices that are sub-slices of\nthe original string slice, separated by any amount of whitespace.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`. If you only want to split on ASCII whitespace\ninstead, use [`split_ascii_whitespace`].\n\n[`split_ascii_whitespace`]: str::split_ascii_whitespace\n\n# Examples\n\nBasic usage:\n\n```\nlet mut iter = \"A few words\".split_whitespace();\n\nassert_eq!(Some(\"A\"), iter.next());\nassert_eq!(Some(\"few\"), iter.next());\nassert_eq!(Some(\"words\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nAll kinds of whitespace are considered:\n\n```\nlet mut iter = \" Mary   had\\ta\\u{2009}little  \\n\\t lamb\".split_whitespace();\nassert_eq!(Some(\"Mary\"), iter.next());\nassert_eq!(Some(\"had\"), iter.next());\nassert_eq!(Some(\"a\"), iter.next());\nassert_eq!(Some(\"little\"), iter.next());\nassert_eq!(Some(\"lamb\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nIf the string is empty or all whitespace, the iterator yields no string slices:\n```\nassert_eq!(\"\".split_whitespace().next(), None);\nassert_eq!(\"   \".split_whitespace().next(), None);\n```","links":{"str::split_ascii_whitespace":"2:12043:33266"},"attrs":["#[must_use =\n\"this returns the split string as an iterator, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_split_whitespace\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"SplitWhitespace","id":"2:43645:8398","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5407:36586":{"id":"5:5407:36586","crate_id":5,"name":"into_boxed_bytes","span":null,"visibility":"public","docs":"Converts a `Box<str>` into a `Box<[u8]>` without copying or allocating.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"this is a string\";\nlet boxed_str = s.to_owned().into_boxed_str();\nlet boxed_bytes = boxed_str.into_boxed_bytes();\nassert_eq!(*boxed_bytes, *s.as_bytes());\n```","links":{},"attrs":["#[must_use = \"`self` will be dropped if the result is not used\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"resolved_path":{"name":"Box","id":"5:273:1879","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}},{"type":{"resolved_path":{"name":"Global","id":"5:6994:4464","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}]],"output":{"resolved_path":{"name":"Box","id":"5:273:1879","args":{"angle_bracketed":{"args":[{"type":{"slice":{"primitive":"u8"}}},{"type":{"resolved_path":{"name":"Global","id":"5:6994:4464","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12026:28438":{"id":"2:12026:28438","crate_id":2,"name":"as_mut_ptr","span":null,"visibility":"public","docs":"Converts a mutable string slice to a raw pointer.\n\nAs string slices are a slice of bytes, the raw pointer points to a\n[`u8`]. This pointer will be pointing to the first byte of the string\nslice.\n\nIt is your responsibility to make sure that the string slice only gets\nmodified in a way that it remains valid UTF-8.","links":{"`u8`":"1:11934:1501"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"raw_pointer":{"mutable":true,"type":{"primitive":"u8"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12111:35933":{"id":"2:12111:35933","crate_id":2,"name":"trim_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes and suffixes that match a\npattern repeatedly removed.\n\nThe [pattern] can be a [`char`], a slice of [`char`]s, or a function\nor closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_matches('1'), \"foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_matches(char::is_numeric), \"foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_matches(x), \"foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1foo1barXX\".trim_matches(|c| c == '1' || c == 'X'), \"foo1bar\");\n```","links":{"prim@char":"1:11917:418","self::pattern":"2:11716:14376"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11721:14373","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:11721:14373","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"DoubleEndedSearcher","id":"2:11741:14372","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:8:1810":{"id":"0:8:1810","crate_id":0,"name":"ast","span":{"filename":"src/internals/ast.rs","begin":[1,0],"end":[215,1]},"visibility":"public","docs":"A Serde ast, parsed from the Syn ast and ready to generate Rust code.","links":{},"attrs":[],"deprecation":null,"inner":{"module":{"is_crate":false,"items":[],"is_stripped":false}}},"2:12137:4448":{"id":"2:12137:4448","crate_id":2,"name":"make_ascii_uppercase","span":null,"visibility":"public","docs":"Converts this string to its ASCII upper case equivalent in-place.\n\nASCII letters 'a' to 'z' are mapped to 'A' to 'Z',\nbut non-ASCII letters are unchanged.\n\nTo return a new uppercased value without modifying the existing one, use\n[`to_ascii_uppercase()`].\n\n[`to_ascii_uppercase()`]: #method.to_ascii_uppercase\n\n# Examples\n\n```\nlet mut s = String::from(\"Grüße, Jürgen ❤\");\n\ns.make_ascii_uppercase();\n\nassert_eq!(\"GRüßE, JüRGEN ❤\", s);\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12073:35921":{"id":"2:12073:35921","crate_id":2,"name":"split_terminator","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by\ncharacters matched by a pattern.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\nEquivalent to [`split`], except that the trailing substring\nis skipped if empty.\n\n[`split`]: str::split\n\nThis method can be used for string data that is _terminated_,\nrather than _separated_ by a pattern.\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rsplit_terminator`] method can be used.\n\n[`rsplit_terminator`]: str::rsplit_terminator\n\n# Examples\n\nBasic usage:\n\n```\nlet v: Vec<&str> = \"A.B.\".split_terminator('.').collect();\nassert_eq!(v, [\"A\", \"B\"]);\n\nlet v: Vec<&str> = \"A..B..\".split_terminator(\".\").collect();\nassert_eq!(v, [\"A\", \"\", \"B\", \"\"]);\n\nlet v: Vec<&str> = \"A.B:C.D\".split_terminator(&['.', ':'][..]).collect();\nassert_eq!(v, [\"A\", \"B\", \"C\", \"D\"]);\n```","links":{"self::pattern":"2:11716:14376","str::split":"2:12064:27097","prim@char":"1:11917:418","`DoubleEndedIterator`":"2:7244:121","str::rsplit_terminator":"2:12076:35922"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"SplitTerminator","id":"2:43421:8385","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11721:14373","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12050:28477":{"id":"2:12050:28477","crate_id":2,"name":"starts_with","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a prefix of this\nstring slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nBasic usage:\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.starts_with(\"bana\"));\nassert!(!bananas.starts_with(\"nana\"));\n```","links":{"prim@char":"1:11917:418","self::pattern":"2:11716:14376"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11721:14373","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12097:35926":{"id":"2:12097:35926","crate_id":2,"name":"match_indices","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within this string\nslice as well as the index that the match starts at.\n\nFor matches of `pat` within `self` that overlap, only the indices\ncorresponding to the first match are returned.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rmatch_indices`] method can be used.\n\n[`rmatch_indices`]: str::rmatch_indices\n\n# Examples\n\nBasic usage:\n\n```\nlet v: Vec<_> = \"abcXXXabcYYYabc\".match_indices(\"abc\").collect();\nassert_eq!(v, [(0, \"abc\"), (6, \"abc\"), (12, \"abc\")]);\n\nlet v: Vec<_> = \"1abcabc2\".match_indices(\"abc\").collect();\nassert_eq!(v, [(1, \"abc\"), (4, \"abc\")]);\n\nlet v: Vec<_> = \"ababa\".match_indices(\"aba\").collect();\nassert_eq!(v, [(0, \"aba\")]); // only the first `aba`\n```","links":{"self::pattern":"2:11716:14376","`DoubleEndedIterator`":"2:7244:121","prim@char":"1:11917:418","str::rmatch_indices":"2:12100:35927"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"MatchIndices","id":"2:43521:8391","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11721:14373","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12094:35925":{"id":"2:12094:35925","crate_id":2,"name":"rmatches","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within this string slice,\nyielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`matches`] method can be used.\n\n[`matches`]: str::matches\n\n# Examples\n\nBasic usage:\n\n```\nlet v: Vec<&str> = \"abcXXXabcYYYabc\".rmatches(\"abc\").collect();\nassert_eq!(v, [\"abc\", \"abc\", \"abc\"]);\n\nlet v: Vec<&str> = \"1abc2abc3\".rmatches(char::is_numeric).collect();\nassert_eq!(v, [\"3\", \"2\", \"1\"]);\n```","links":{"self::pattern":"2:11716:14376","`DoubleEndedIterator`":"2:7244:121","prim@char":"1:11917:418","str::matches":"2:12091:3109"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RMatches","id":"2:43593:8395","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11721:14373","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:11721:14373","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11736:14374","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12064:27097":{"id":"2:12064:27097","crate_id":2,"name":"split","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by\ncharacters matched by a pattern.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rsplit`] method can be used.\n\n[`rsplit`]: str::rsplit\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".split(' ').collect();\nassert_eq!(v, [\"Mary\", \"had\", \"a\", \"little\", \"lamb\"]);\n\nlet v: Vec<&str> = \"\".split('X').collect();\nassert_eq!(v, [\"\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".split('X').collect();\nassert_eq!(v, [\"lion\", \"\", \"tiger\", \"leopard\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".split(\"::\").collect();\nassert_eq!(v, [\"lion\", \"tiger\", \"leopard\"]);\n\nlet v: Vec<&str> = \"abc1def2ghi\".split(char::is_numeric).collect();\nassert_eq!(v, [\"abc\", \"def\", \"ghi\"]);\n\nlet v: Vec<&str> = \"lionXtigerXleopard\".split(char::is_uppercase).collect();\nassert_eq!(v, [\"lion\", \"tiger\", \"leopard\"]);\n```\n\nIf the pattern is a slice of chars, split on each occurrence of any of the characters:\n\n```\nlet v: Vec<&str> = \"2020-11-03 23:59\".split(&['-', ' ', ':', '@'][..]).collect();\nassert_eq!(v, [\"2020\", \"11\", \"03\", \"23\", \"59\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".split(|c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"abc\", \"def\", \"ghi\"]);\n```\n\nIf a string contains multiple contiguous separators, you will end up\nwith empty strings in the output:\n\n```\nlet x = \"||||a||b|c\".to_string();\nlet d: Vec<_> = x.split('|').collect();\n\nassert_eq!(d, &[\"\", \"\", \"\", \"\", \"a\", \"\", \"b\", \"c\"]);\n```\n\nContiguous separators are separated by the empty string.\n\n```\nlet x = \"(///)\".to_string();\nlet d: Vec<_> = x.split('/').collect();\n\nassert_eq!(d, &[\"(\", \"\", \"\", \")\"]);\n```\n\nSeparators at the start or end of a string are neighbored\nby empty strings.\n\n```\nlet d: Vec<_> = \"010\".split(\"0\").collect();\nassert_eq!(d, &[\"\", \"1\", \"\"]);\n```\n\nWhen the empty string is used as a separator, it separates\nevery character in the string, along with the beginning\nand end of the string.\n\n```\nlet f: Vec<_> = \"rust\".split(\"\").collect();\nassert_eq!(f, &[\"\", \"r\", \"u\", \"s\", \"t\", \"\"]);\n```\n\nContiguous separators can lead to possibly surprising behavior\nwhen whitespace is used as the separator. This code is correct:\n\n```\nlet x = \"    a  b c\".to_string();\nlet d: Vec<_> = x.split(' ').collect();\n\nassert_eq!(d, &[\"\", \"\", \"\", \"\", \"a\", \"\", \"b\", \"c\"]);\n```\n\nIt does _not_ give you:\n\n```,ignore\nassert_eq!(d, &[\"a\", \"b\", \"c\"]);\n```\n\nUse [`split_whitespace`] for this behavior.\n\n[`split_whitespace`]: str::split_whitespace","links":{"self::pattern":"2:11716:14376","`DoubleEndedIterator`":"2:7244:121","prim@char":"1:11917:418","str::split_whitespace":"2:12042:33267","str::rsplit":"2:12070:28471"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Split","id":"2:43371:8309","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11721:14373","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12120:28479":{"id":"2:12120:28479","crate_id":2,"name":"strip_suffix","span":null,"visibility":"public","docs":"Returns a string slice with the suffix removed.\n\nIf the string ends with the pattern `suffix`, returns the substring before the suffix,\nwrapped in `Some`.  Unlike `trim_end_matches`, this method removes the suffix exactly once.\n\nIf the string does not end with `suffix`, returns `None`.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nassert_eq!(\"bar:foo\".strip_suffix(\":foo\"), Some(\"bar\"));\nassert_eq!(\"bar:foo\".strip_suffix(\"bar\"), None);\nassert_eq!(\"foofoo\".strip_suffix(\"foo\"), Some(\"foo\"));\n```","links":{"prim@char":"1:11917:418","self::pattern":"2:11716:14376"},"attrs":["#[must_use =\n\"this returns the remaining substring as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["suffix",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:41402:181","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11721:14373","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:11721:14373","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11736:14374","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12126:35935":{"id":"2:12126:35935","crate_id":2,"name":"trim_left_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. 'Left' in this context means the first\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _right_ side, not the left.\n\n# Examples\n\nBasic usage:\n\n```\nassert_eq!(\"11foo1bar11\".trim_left_matches('1'), \"foo1bar11\");\nassert_eq!(\"123foo1bar123\".trim_left_matches(char::is_numeric), \"foo1bar123\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_left_matches(x), \"foo1bar12\");\n```","links":{"prim@char":"1:11917:418","self::pattern":"2:11716:14376"},"attrs":["#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_start_matches`\",\nsuggestion = \"trim_start_matches\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_start_matches`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11721:14373","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12046:33334":{"id":"2:12046:33334","crate_id":2,"name":"encode_utf16","span":null,"visibility":"public","docs":"Returns an iterator of `u16` over the string encoded as UTF-16.\n\n# Examples\n\nBasic usage:\n\n```\nlet text = \"Zażółć gęślą jaźń\";\n\nlet utf8_len = text.len();\nlet utf16_len = text.encode_utf16().count();\n\nassert!(utf16_len <= utf8_len);\n```","links":{},"attrs":["#[must_use =\n\"this returns the encoded string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EncodeUtf16","id":"2:43663:8400","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12135:28368":{"id":"2:12135:28368","crate_id":2,"name":"as_ascii","span":null,"visibility":"public","docs":"If this string slice [`is_ascii`](Self::is_ascii), returns it as a slice\nof [ASCII characters](`ascii::Char`), otherwise returns `None`.","links":{"`ascii::Char`":"2:39560:3416","Self::is_ascii":"2:12134:4446"},"attrs":["#[unstable(feature = \"ascii_char\", issue = \"110998\")]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Option","id":"2:41402:181","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"resolved_path":{"name":"AsciiChar","id":"2:39560:3416","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12056:2574":{"id":"2:12056:2574","crate_id":2,"name":"find","span":null,"visibility":"public","docs":"Returns the byte index of the first character of this string slice that\nmatches the pattern.\n\nReturns [`None`] if the pattern doesn't match.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nlet s = \"Löwe 老虎 Léopard Gepardi\";\n\nassert_eq!(s.find('L'), Some(0));\nassert_eq!(s.find('é'), Some(14));\nassert_eq!(s.find(\"pard\"), Some(17));\n```\n\nMore complex patterns using point-free style and closures:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\n\nassert_eq!(s.find(char::is_whitespace), Some(5));\nassert_eq!(s.find(char::is_lowercase), Some(1));\nassert_eq!(s.find(|c: char| c.is_whitespace() || c.is_lowercase()), Some(1));\nassert_eq!(s.find(|c: char| (c < 'o') && (c > 'a')), Some(4));\n```\n\nNot finding the pattern:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\nlet x: &[_] = &['1', '2'];\n\nassert_eq!(s.find(x), None);\n```","links":{"`None`":"2:41404:179","prim@char":"1:11917:418","self::pattern":"2:11716:14376"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:41402:181","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11721:14373","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12082:28475":{"id":"2:12082:28475","crate_id":2,"name":"rsplitn","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by a\npattern, starting from the end of the string, restricted to returning\nat most `n` items.\n\nIf `n` substrings are returned, the last substring (the `n`th substring)\nwill contain the remainder of the string.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will not be double ended, because it is not\nefficient to support.\n\nFor splitting from the front, the [`splitn`] method can be used.\n\n[`splitn`]: str::splitn\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".rsplitn(3, ' ').collect();\nassert_eq!(v, [\"lamb\", \"little\", \"Mary had a\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".rsplitn(3, 'X').collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"lionX\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".rsplitn(2, \"::\").collect();\nassert_eq!(v, [\"leopard\", \"lion::tiger\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".rsplitn(2, |c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"ghi\", \"abc1def\"]);\n```","links":{"prim@char":"1:11917:418","str::splitn":"2:12079:28473","self::pattern":"2:11716:14376"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["n",{"primitive":"usize"}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RSplitN","id":"2:43493:8389","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11721:14373","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:11721:14373","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11736:14374","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12041:8301":{"id":"2:12041:8301","crate_id":2,"name":"bytes","span":null,"visibility":"public","docs":"An iterator over the bytes of a string slice.\n\nAs a string slice consists of a sequence of bytes, we can iterate\nthrough a string slice by byte. This method returns such an iterator.\n\n# Examples\n\nBasic usage:\n\n```\nlet mut bytes = \"bors\".bytes();\n\nassert_eq!(Some(b'b'), bytes.next());\nassert_eq!(Some(b'o'), bytes.next());\nassert_eq!(Some(b'r'), bytes.next());\nassert_eq!(Some(b's'), bytes.next());\n\nassert_eq!(None, bytes.next());\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Bytes","id":"2:43357:2785","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12027:1925":{"id":"2:12027:1925","crate_id":2,"name":"get","span":null,"visibility":"public","docs":"Returns a subslice of `str`.\n\nThis is the non-panicking alternative to indexing the `str`. Returns\n[`None`] whenever equivalent indexing operation would panic.\n\n# Examples\n\n```\nlet v = String::from(\"🗻∈🌏\");\n\nassert_eq!(Some(\"🗻\"), v.get(0..4));\n\n// indices not on UTF-8 sequence boundaries\nassert!(v.get(1..).is_none());\nassert!(v.get(..8).is_none());\n\n// out of bounds\nassert!(v.get(..42).is_none());\n```","links":{"`None`":"2:41404:179"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"resolved_path":{"name":"Option","id":"2:41402:181","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"2:9817:222","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"2:9817:222","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12109:35931":{"id":"2:12109:35931","crate_id":2,"name":"trim_left","span":null,"visibility":"public","docs":"Returns a string slice with leading whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`.\n\n# Text directionality\n\nA string is a sequence of bytes. 'Left' in this context means the first\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _right_ side, not the left.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \" Hello\\tworld\\t\";\n\nassert_eq!(\"Hello\\tworld\\t\", s.trim_left());\n```\n\nDirectionality:\n\n```\nlet s = \"  English\";\nassert!(Some('E') == s.trim_left().chars().next());\n\nlet s = \"  עברית\";\nassert!(Some('ע') == s.trim_left().chars().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_start`\", suggestion\n= \"trim_start\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_start`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12033:28437":{"id":"2:12033:28437","crate_id":2,"name":"get_unchecked_mut","span":null,"visibility":"public","docs":"Returns a mutable, unchecked subslice of `str`.\n\nThis is the unchecked alternative to indexing the `str`.\n\n# Safety\n\nCallers of this function are responsible that these preconditions are\nsatisfied:\n\n* The starting index must not exceed the ending index;\n* Indexes must be within bounds of the original slice;\n* Indexes must lie on UTF-8 sequence boundaries.\n\nFailing that, the returned string slice may reference invalid memory or\nviolate the invariants communicated by the `str` type.\n\n# Examples\n\n```\nlet mut v = String::from(\"🗻∈🌏\");\nunsafe {\n    assert_eq!(\"🗻\", v.get_unchecked_mut(0..4));\n    assert_eq!(\"∈\", v.get_unchecked_mut(4..7));\n    assert_eq!(\"🌏\", v.get_unchecked_mut(7..11));\n}\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"2:9817:222","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"2:9817:222","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"2:12043:33266":{"id":"2:12043:33266","crate_id":2,"name":"split_ascii_whitespace","span":null,"visibility":"public","docs":"Splits a string slice by ASCII whitespace.\n\nThe iterator returned will return string slices that are sub-slices of\nthe original string slice, separated by any amount of ASCII whitespace.\n\nTo split by Unicode `Whitespace` instead, use [`split_whitespace`].\n\n[`split_whitespace`]: str::split_whitespace\n\n# Examples\n\nBasic usage:\n\n```\nlet mut iter = \"A few words\".split_ascii_whitespace();\n\nassert_eq!(Some(\"A\"), iter.next());\nassert_eq!(Some(\"few\"), iter.next());\nassert_eq!(Some(\"words\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nAll kinds of ASCII whitespace are considered:\n\n```\nlet mut iter = \" Mary   had\\ta little  \\n\\t lamb\".split_ascii_whitespace();\nassert_eq!(Some(\"Mary\"), iter.next());\nassert_eq!(Some(\"had\"), iter.next());\nassert_eq!(Some(\"a\"), iter.next());\nassert_eq!(Some(\"little\"), iter.next());\nassert_eq!(Some(\"lamb\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nIf the string is empty or all ASCII whitespace, the iterator yields no string slices:\n```\nassert_eq!(\"\".split_ascii_whitespace().next(), None);\nassert_eq!(\"   \".split_ascii_whitespace().next(), None);\n```","links":{"str::split_whitespace":"2:12042:33267"},"attrs":["#[must_use =\n\"this returns the split string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"SplitAsciiWhitespace","id":"2:43654:8399","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:85-0:958:1910":{"id":"0:85-0:958:1910","crate_id":0,"name":null,"span":{"filename":"src/internals/attr.rs","begin":[22,0],"end":[22,36]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"import":{"source":"internals::case::RenameRule","name":"RenameRule","id":"0:958:1910","glob":false}}},"2:12076:35922":{"id":"2:12076:35922","crate_id":2,"name":"rsplit_terminator","span":null,"visibility":"public","docs":"An iterator over substrings of `self`, separated by characters\nmatched by a pattern and yielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\nEquivalent to [`split`], except that the trailing substring is\nskipped if empty.\n\n[`split`]: str::split\n\nThis method can be used for string data that is _terminated_,\nrather than _separated_ by a pattern.\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a\nreverse search, and it will be double ended if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`split_terminator`] method can be\nused.\n\n[`split_terminator`]: str::split_terminator\n\n# Examples\n\n```\nlet v: Vec<&str> = \"A.B.\".rsplit_terminator('.').collect();\nassert_eq!(v, [\"B\", \"A\"]);\n\nlet v: Vec<&str> = \"A..B..\".rsplit_terminator(\".\").collect();\nassert_eq!(v, [\"\", \"B\", \"\", \"A\"]);\n\nlet v: Vec<&str> = \"A.B:C.D\".rsplit_terminator(&['.', ':'][..]).collect();\nassert_eq!(v, [\"D\", \"C\", \"B\", \"A\"]);\n```","links":{"self::pattern":"2:11716:14376","str::split":"2:12064:27097","prim@char":"1:11917:418","str::split_terminator":"2:12073:35921"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RSplitTerminator","id":"2:43439:8386","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11721:14373","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:11721:14373","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11736:14374","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:930:1688":{"id":"0:930:1688","crate_id":0,"name":"Serialize","span":{"filename":"src/lib.rs","begin":[92,0],"end":[97,1]},"visibility":"public","docs":null,"links":{},"attrs":["#[proc_macro_derive(Serialize, attributes(serde))]"],"deprecation":null,"inner":{"proc_macro":{"kind":"derive","helpers":["serde"]}}},"2:12018:35915":{"id":"2:12018:35915","crate_id":2,"name":"floor_char_boundary","span":null,"visibility":"public","docs":"Finds the closest `x` not exceeding `index` where `is_char_boundary(x)` is `true`.\n\nThis method can help you truncate a string so that it's still valid UTF-8, but doesn't\nexceed a given number of bytes. Note that this is done purely at the character level\nand can still visually split graphemes, even though the underlying characters aren't\nsplit. For example, the emoji 🧑‍🔬 (scientist) could be split so that the string only\nincludes 🧑 (person) instead.\n\n# Examples\n\n```\n#![feature(round_char_boundary)]\nlet s = \"❤️🧡💛💚💙💜\";\nassert_eq!(s.len(), 26);\nassert!(!s.is_char_boundary(13));\n\nlet closest = s.floor_char_boundary(13);\nassert_eq!(closest, 10);\nassert_eq!(&s[..closest], \"❤️🧡\");\n```","links":{},"attrs":["#[unstable(feature = \"round_char_boundary\", issue = \"93743\")]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["index",{"primitive":"usize"}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12123:35934":{"id":"2:12123:35934","crate_id":2,"name":"trim_end_matches","span":null,"visibility":"public","docs":"Returns a string slice with all suffixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. `end` in this context means the last\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be right side, and for right-to-left languages like\nArabic or Hebrew, this will be the left side.\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_end_matches('1'), \"11foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_end_matches(char::is_numeric), \"123foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_end_matches(x), \"12foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1fooX\".trim_end_matches(|c| c == '1' || c == 'X'), \"1foo\");\n```","links":{"prim@char":"1:11917:418","self::pattern":"2:11716:14376"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11721:14373","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:11721:14373","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11736:14374","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:375-0:351:1813":{"id":"0:375-0:351:1813","crate_id":0,"name":null,"span":{"filename":"src/internals/mod.rs","begin":[8,0],"end":[8,41]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"import":{"source":"self::receiver::replace_receiver","name":"replace_receiver","id":"0:351:1813","glob":false}}},"0:983:1913":{"id":"0:983:1913","crate_id":0,"name":"Symbol","span":{"filename":"src/internals/symbol.rs","begin":[5,0],"end":[5,32]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"struct":{"kind":{"tuple":[null]},"generics":{"params":[],"where_predicates":[]},"impls":[]}}},"2:12079:28473":{"id":"2:12079:28473","crate_id":2,"name":"splitn","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by a\npattern, restricted to returning at most `n` items.\n\nIf `n` substrings are returned, the last substring (the `n`th substring)\nwill contain the remainder of the string.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will not be double ended, because it is\nnot efficient to support.\n\nIf the pattern allows a reverse search, the [`rsplitn`] method can be\nused.\n\n[`rsplitn`]: str::rsplitn\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lambda\".splitn(3, ' ').collect();\nassert_eq!(v, [\"Mary\", \"had\", \"a little lambda\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".splitn(3, \"X\").collect();\nassert_eq!(v, [\"lion\", \"\", \"tigerXleopard\"]);\n\nlet v: Vec<&str> = \"abcXdef\".splitn(1, 'X').collect();\nassert_eq!(v, [\"abcXdef\"]);\n\nlet v: Vec<&str> = \"\".splitn(1, 'X').collect();\nassert_eq!(v, [\"\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".splitn(2, |c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"abc\", \"defXghi\"]);\n```","links":{"prim@char":"1:11917:418","self::pattern":"2:11716:14376","str::rsplitn":"2:12082:28475"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["n",{"primitive":"usize"}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"SplitN","id":"2:43475:8388","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11721:14373","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5425:2346":{"id":"5:5425:2346","crate_id":5,"name":"to_ascii_uppercase","span":null,"visibility":"public","docs":"Returns a copy of this string where each character is mapped to its\nASCII upper case equivalent.\n\nASCII letters 'a' to 'z' are mapped to 'A' to 'Z',\nbut non-ASCII letters are unchanged.\n\nTo uppercase the value in-place, use [`make_ascii_uppercase`].\n\nTo uppercase ASCII characters in addition to non-ASCII characters, use\n[`to_uppercase`].\n\n# Examples\n\n```\nlet s = \"Grüße, Jürgen ❤\";\n\nassert_eq!(\"GRüßE, JüRGEN ❤\", s.to_ascii_uppercase());\n```\n\n[`make_ascii_uppercase`]: str::make_ascii_uppercase\n[`to_uppercase`]: #method.to_uppercase","links":{"str::make_ascii_uppercase":"2:12137:4448"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use = \"to uppercase the value in-place, use `make_ascii_uppercase()`\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7254:224","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12044:27098":{"id":"2:12044:27098","crate_id":2,"name":"lines","span":null,"visibility":"public","docs":"An iterator over the lines of a string, as string slices.\n\nLines are split at line endings that are either newlines (`\\n`) or\nsequences of a carriage return followed by a line feed (`\\r\\n`).\n\nLine terminators are not included in the lines returned by the iterator.\n\nThe final line ending is optional. A string that ends with a final line\nending will return the same lines as an otherwise identical string\nwithout a final line ending.\n\n# Examples\n\nBasic usage:\n\n```\nlet text = \"foo\\r\\nbar\\n\\nbaz\\n\";\nlet mut lines = text.lines();\n\nassert_eq!(Some(\"foo\"), lines.next());\nassert_eq!(Some(\"bar\"), lines.next());\nassert_eq!(Some(\"\"), lines.next());\nassert_eq!(Some(\"baz\"), lines.next());\n\nassert_eq!(None, lines.next());\n```\n\nThe final line ending isn't required:\n\n```\nlet text = \"foo\\nbar\\n\\r\\nbaz\";\nlet mut lines = text.lines();\n\nassert_eq!(Some(\"foo\"), lines.next());\nassert_eq!(Some(\"bar\"), lines.next());\nassert_eq!(Some(\"\"), lines.next());\nassert_eq!(Some(\"baz\"), lines.next());\n\nassert_eq!(None, lines.next());\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Lines","id":"2:43625:8396","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:0:1700":{"id":"0:0:1700","crate_id":0,"name":"serde_derive","span":{"filename":"src/lib.rs","begin":[1,0],"end":[105,1]},"visibility":"public","docs":"This crate provides Serde's two derive macros.\n\n```edition2018\n# use serde_derive::{Serialize, Deserialize};\n#\n#[derive(Serialize, Deserialize)]\n# struct S;\n#\n# fn main() {}\n```\n\nPlease refer to [https://serde.rs/derive.html] for how to set this up.\n\n[https://serde.rs/derive.html]: https://serde.rs/derive.html","links":{},"attrs":["#![doc(html_root_url = \"https://docs.rs/serde_derive/1.0.164\")]","#![allow(unknown_lints, bare_trait_objects)]","#![allow(clippy :: branches_sharing_code, clippy :: cognitive_complexity,\nclippy :: collapsible_match, clippy :: derive_partial_eq_without_eq, clippy ::\nenum_variant_names, clippy :: manual_map, clippy :: match_like_matches_macro,\nclippy :: needless_pass_by_value, clippy :: too_many_arguments, clippy ::\ntrivially_copy_pass_by_ref, clippy :: used_underscore_binding, clippy ::\nwildcard_in_or_patterns, clippy :: unnested_or_patterns,)]","#![allow(clippy :: cast_possible_truncation, clippy :: checked_conversions,\nclippy :: doc_markdown, clippy :: enum_glob_use, clippy :: indexing_slicing,\nclippy :: items_after_statements, clippy :: let_underscore_untyped, clippy ::\nmanual_assert, clippy :: map_err_ignore, clippy :: match_same_arms, clippy ::\nmatch_wildcard_for_single_variants, clippy :: module_name_repetitions, clippy\n:: must_use_candidate, clippy :: option_if_let_else, clippy :: similar_names,\nclippy :: single_match_else, clippy :: struct_excessive_bools, clippy ::\ntoo_many_lines, clippy :: unseparated_literal_suffix, clippy :: unused_self,\nclippy :: use_self, clippy :: wildcard_imports)]"],"deprecation":null,"inner":{"module":{"is_crate":true,"items":["0:930:1688","0:931:1697"],"is_stripped":false}}},"2:12024:35917":{"id":"2:12024:35917","crate_id":2,"name":"as_bytes_mut","span":null,"visibility":"public","docs":"Converts a mutable string slice to a mutable byte slice.\n\n# Safety\n\nThe caller must ensure that the content of the slice is valid UTF-8\nbefore the borrow ends and the underlying `str` is used.\n\nUse of a `str` whose contents are not valid UTF-8 is undefined behavior.\n\n# Examples\n\nBasic usage:\n\n```\nlet mut s = String::from(\"Hello\");\nlet bytes = unsafe { s.as_bytes_mut() };\n\nassert_eq!(b\"Hello\", bytes);\n```\n\nMutability:\n\n```\nlet mut s = String::from(\"🗻∈🌏\");\n\nunsafe {\n    let bytes = s.as_bytes_mut();\n\n    bytes[0] = 0xF0;\n    bytes[1] = 0x9F;\n    bytes[2] = 0x8D;\n    bytes[3] = 0x94;\n}\n\nassert_eq!(\"🍔∈🌏\", s);\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"slice":{"primitive":"u8"}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"2:12132:1906":{"id":"2:12132:1906","crate_id":2,"name":"parse","span":null,"visibility":"public","docs":"Parses this string slice into another type.\n\nBecause `parse` is so general, it can cause problems with type\ninference. As such, `parse` is one of the few times you'll see\nthe syntax affectionately known as the 'turbofish': `::<>`. This\nhelps the inference algorithm understand specifically which type\nyou're trying to parse into.\n\n`parse` can parse into any type that implements the [`FromStr`] trait.\n\n# Errors\n\nWill return [`Err`] if it's not possible to parse this string slice into\nthe desired type.\n\n[`Err`]: FromStr::Err\n\n# Examples\n\nBasic usage\n\n```\nlet four: u32 = \"4\".parse().unwrap();\n\nassert_eq!(4, four);\n```\n\nUsing the 'turbofish' instead of annotating `four`:\n\n```\nlet four = \"4\".parse::<u32>();\n\nassert_eq!(Ok(4), four);\n```\n\nFailing to parse:\n\n```\nlet nope = \"j\".parse::<u32>();\n\nassert!(nope.is_err());\n```","links":{"FromStr::Err":"2:11677:127","`FromStr`":"2:11676:3282"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Result","id":"2:41546:210","args":{"angle_bracketed":{"args":[{"type":{"generic":"F"}},{"type":{"qualified_path":{"name":"Err","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"F"},"trait":{"name":"FromStr","id":"2:11676:3282","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"F"},"bounds":[{"trait_bound":{"trait":{"name":"FromStr","id":"2:11676:3282","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12053:28478":{"id":"2:12053:28478","crate_id":2,"name":"ends_with","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a suffix of this\nstring slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nBasic usage:\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.ends_with(\"anas\"));\nassert!(!bananas.ends_with(\"nana\"));\n```","links":{"prim@char":"1:11917:418","self::pattern":"2:11716:14376"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11721:14373","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:11721:14373","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11736:14374","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12129:35936":{"id":"2:12129:35936","crate_id":2,"name":"trim_right_matches","span":null,"visibility":"public","docs":"Returns a string slice with all suffixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. 'Right' in this context means the last\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _left_ side, not the right.\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_right_matches('1'), \"11foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_right_matches(char::is_numeric), \"123foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_right_matches(x), \"12foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1fooX\".trim_right_matches(|c| c == '1' || c == 'X'), \"1foo\");\n```","links":{"prim@char":"1:11917:418","self::pattern":"2:11716:14376"},"attrs":["#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_end_matches`\",\nsuggestion = \"trim_end_matches\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_end_matches`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11721:14373","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:11721:14373","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11736:14374","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12105:35929":{"id":"2:12105:35929","crate_id":2,"name":"trim_start","span":null,"visibility":"public","docs":"Returns a string slice with leading whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Text directionality\n\nA string is a sequence of bytes. `start` in this context means the first\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be left side, and for right-to-left languages like\nArabic or Hebrew, this will be the right side.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\nassert_eq!(\"Hello\\tworld\\t\\n\", s.trim_start());\n```\n\nDirectionality:\n\n```\nlet s = \"  English  \";\nassert!(Some('E') == s.trim_start().chars().next());\n\nlet s = \"  עברית  \";\nassert!(Some('ע') == s.trim_start().chars().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_trim_start\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12142:35938":{"id":"2:12142:35938","crate_id":2,"name":"escape_unicode","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_unicode`].\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"❤\\n!\".escape_unicode() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"❤\\n!\".escape_unicode());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"\\\\u{{2764}}\\\\u{{a}}\\\\u{{21}}\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"❤\\n!\".escape_unicode().to_string(), \"\\\\u{2764}\\\\u{a}\\\\u{21}\");\n```","links":{"`char::escape_unicode`":"2:4537:35938"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EscapeUnicode","id":"2:43688:8341","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12070:28471":{"id":"2:12070:28471","crate_id":2,"name":"rsplit","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by\ncharacters matched by a pattern and yielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`split`] method can be used.\n\n[`split`]: str::split\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".rsplit(' ').collect();\nassert_eq!(v, [\"lamb\", \"little\", \"a\", \"had\", \"Mary\"]);\n\nlet v: Vec<&str> = \"\".rsplit('X').collect();\nassert_eq!(v, [\"\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".rsplit('X').collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"\", \"lion\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".rsplit(\"::\").collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"lion\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".rsplit(|c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"ghi\", \"def\", \"abc\"]);\n```","links":{"self::pattern":"2:11716:14376","`DoubleEndedIterator`":"2:7244:121","prim@char":"1:11917:418","str::split":"2:12064:27097"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RSplit","id":"2:43389:8312","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11721:14373","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:11721:14373","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11736:14374","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12020:35916":{"id":"2:12020:35916","crate_id":2,"name":"ceil_char_boundary","span":null,"visibility":"public","docs":"Finds the closest `x` not below `index` where `is_char_boundary(x)` is `true`.\n\nThis method is the natural complement to [`floor_char_boundary`]. See that method\nfor more details.\n\n[`floor_char_boundary`]: str::floor_char_boundary\n\n# Panics\n\nPanics if `index > self.len()`.\n\n# Examples\n\n```\n#![feature(round_char_boundary)]\nlet s = \"❤️🧡💛💚💙💜\";\nassert_eq!(s.len(), 26);\nassert!(!s.is_char_boundary(13));\n\nlet closest = s.ceil_char_boundary(13);\nassert_eq!(closest, 14);\nassert_eq!(&s[..closest], \"❤️🧡💛\");\n```","links":{"str::floor_char_boundary":"2:12018:35915"},"attrs":["#[unstable(feature = \"round_char_boundary\", issue = \"93743\")]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["index",{"primitive":"usize"}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12031:28436":{"id":"2:12031:28436","crate_id":2,"name":"get_unchecked","span":null,"visibility":"public","docs":"Returns an unchecked subslice of `str`.\n\nThis is the unchecked alternative to indexing the `str`.\n\n# Safety\n\nCallers of this function are responsible that these preconditions are\nsatisfied:\n\n* The starting index must not exceed the ending index;\n* Indexes must be within bounds of the original slice;\n* Indexes must lie on UTF-8 sequence boundaries.\n\nFailing that, the returned string slice may reference invalid memory or\nviolate the invariants communicated by the `str` type.\n\n# Examples\n\n```\nlet v = \"🗻∈🌏\";\nunsafe {\n    assert_eq!(\"🗻\", v.get_unchecked(0..4));\n    assert_eq!(\"∈\", v.get_unchecked(4..7));\n    assert_eq!(\"🌏\", v.get_unchecked(7..11));\n}\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"2:9817:222","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"2:9817:222","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"2:12023:2772":{"id":"2:12023:2772","crate_id":2,"name":"as_bytes","span":null,"visibility":"public","docs":"Converts a string slice to a byte slice. To convert the byte slice back\ninto a string slice, use the [`from_utf8`] function.\n\n# Examples\n\nBasic usage:\n\n```\nlet bytes = \"bors\".as_bytes();\nassert_eq!(b\"bors\", bytes);\n```","links":{"`from_utf8`":"2:11283:14377"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"primitive":"u8"}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5423:36590":{"id":"5:5423:36590","crate_id":5,"name":"into_string","span":null,"visibility":"public","docs":"Converts a [`Box<str>`] into a [`String`] without copying or allocating.\n\n# Examples\n\nBasic usage:\n\n```\nlet string = String::from(\"birthday gift\");\nlet boxed_str = string.clone().into_boxed_str();\n\nassert_eq!(boxed_str.into_string(), string);\n```","links":{"`Box<str>`":"5:273:1879","`String`":"5:7254:224"},"attrs":["#[must_use = \"`self` will be dropped if the result is not used\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"resolved_path":{"name":"Box","id":"5:273:1879","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}},{"type":{"resolved_path":{"name":"Global","id":"5:6994:4464","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}]],"output":{"resolved_path":{"name":"String","id":"5:7254:224","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5424:3309":{"id":"5:5424:3309","crate_id":5,"name":"repeat","span":null,"visibility":"public","docs":"Creates a new [`String`] by repeating a string `n` times.\n\n# Panics\n\nThis function will panic if the capacity would overflow.\n\n# Examples\n\nBasic usage:\n\n```\nassert_eq!(\"abc\".repeat(4), String::from(\"abcabcabcabc\"));\n```\n\nA panic upon overflow:\n\n```should_panic\n// this will panic at runtime\nlet huge = \"0123456789abcdef\".repeat(usize::MAX);\n```","links":{"`String`":"5:7254:224"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["n",{"primitive":"usize"}]],"output":{"resolved_path":{"name":"String","id":"5:7254:224","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5406":{"id":"5:5406","crate_id":5,"name":null,"span":null,"visibility":"default","docs":"Methods for string slices.","links":{},"attrs":["#[cfg(not(test))]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"primitive":"str"},"items":["5:5407:36586","5:5408:2061","5:5411:36587","5:5414:36588","5:5422:36589","5:5423:36590","5:5424:3309","5:5425:2346","5:5426:2345"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:931:1697":{"id":"0:931:1697","crate_id":0,"name":"Deserialize","span":{"filename":"src/lib.rs","begin":[100,0],"end":[105,1]},"visibility":"public","docs":null,"links":{},"attrs":["#[proc_macro_derive(Deserialize, attributes(serde))]"],"deprecation":null,"inner":{"proc_macro":{"kind":"derive","helpers":["serde"]}}},"2:12136:4447":{"id":"2:12136:4447","crate_id":2,"name":"eq_ignore_ascii_case","span":null,"visibility":"public","docs":"Checks that two strings are an ASCII case-insensitive match.\n\nSame as `to_ascii_lowercase(a) == to_ascii_lowercase(b)`,\nbut without allocating and copying temporaries.\n\n# Examples\n\n```\nassert!(\"Ferris\".eq_ignore_ascii_case(\"FERRIS\"));\nassert!(\"Ferrös\".eq_ignore_ascii_case(\"FERRöS\"));\nassert!(!\"Ferrös\".eq_ignore_ascii_case(\"FERRÖS\"));\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["other",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12037:2669":{"id":"2:12037:2669","crate_id":2,"name":"split_at","span":null,"visibility":"public","docs":"Divide one string slice into two at an index.\n\nThe argument, `mid`, should be a byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get mutable string slices instead, see the [`split_at_mut`]\nmethod.\n\n[`split_at_mut`]: str::split_at_mut\n\n# Panics\n\nPanics if `mid` is not on a UTF-8 code point boundary, or if it is\npast the end of the last code point of the string slice.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"Per Martin-Löf\";\n\nlet (first, last) = s.split_at(3);\n\nassert_eq!(\"Per\", first);\nassert_eq!(\" Martin-Löf\", last);\n```","links":{"str::split_at_mut":"2:12038:28461"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["mid",{"primitive":"usize"}]],"output":{"tuple":[{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5414:36588":{"id":"5:5414:36588","crate_id":5,"name":"to_lowercase","span":null,"visibility":"public","docs":"Returns the lowercase equivalent of this string slice, as a new [`String`].\n\n'Lowercase' is defined according to the terms of the Unicode Derived Core Property\n`Lowercase`.\n\nSince some characters can expand into multiple characters when changing\nthe case, this function returns a [`String`] instead of modifying the\nparameter in-place.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"HELLO\";\n\nassert_eq!(\"hello\", s.to_lowercase());\n```\n\nA tricky example, with sigma:\n\n```\nlet sigma = \"Σ\";\n\nassert_eq!(\"σ\", sigma.to_lowercase());\n\n// but at the end of a word, it's ς, not σ:\nlet odysseus = \"ὈΔΥΣΣΕΎΣ\";\n\nassert_eq!(\"ὀδυσσεύς\", odysseus.to_lowercase());\n```\n\nLanguages without case are not changed:\n\n```\nlet new_year = \"农历新年\";\n\nassert_eq!(new_year, new_year.to_lowercase());\n```","links":{"`String`":"5:7254:224"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the lowercase string as a new String, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7254:224","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12029:28435":{"id":"2:12029:28435","crate_id":2,"name":"get_mut","span":null,"visibility":"public","docs":"Returns a mutable subslice of `str`.\n\nThis is the non-panicking alternative to indexing the `str`. Returns\n[`None`] whenever equivalent indexing operation would panic.\n\n# Examples\n\n```\nlet mut v = String::from(\"hello\");\n// correct length\nassert!(v.get_mut(0..5).is_some());\n// out of bounds\nassert!(v.get_mut(..42).is_none());\nassert_eq!(Some(\"he\"), v.get_mut(0..2).map(|v| &*v));\n\nassert_eq!(\"hello\", v);\n{\n    let s = v.get_mut(0..2);\n    let s = s.map(|s| {\n        s.make_ascii_uppercase();\n        &*s\n    });\n    assert_eq!(Some(\"HE\"), s);\n}\nassert_eq!(\"HEllo\", v);\n```","links":{"`None`":"2:41404:179"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"resolved_path":{"name":"Option","id":"2:41402:181","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"2:9817:222","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"2:9817:222","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5422:36589":{"id":"5:5422:36589","crate_id":5,"name":"to_uppercase","span":null,"visibility":"public","docs":"Returns the uppercase equivalent of this string slice, as a new [`String`].\n\n'Uppercase' is defined according to the terms of the Unicode Derived Core Property\n`Uppercase`.\n\nSince some characters can expand into multiple characters when changing\nthe case, this function returns a [`String`] instead of modifying the\nparameter in-place.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"hello\";\n\nassert_eq!(\"HELLO\", s.to_uppercase());\n```\n\nScripts without case are not changed:\n\n```\nlet new_year = \"农历新年\";\n\nassert_eq!(new_year, new_year.to_uppercase());\n```\n\nOne character can become multiple:\n```\nlet s = \"tschüß\";\n\nassert_eq!(\"TSCHÜSS\", s.to_uppercase());\n```","links":{"`String`":"5:7254:224"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the uppercase string as a new String, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7254:224","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5408:2061":{"id":"5:5408:2061","crate_id":5,"name":"replace","span":null,"visibility":"public","docs":"Replaces all matches of a pattern with another string.\n\n`replace` creates a new [`String`], and copies the data from this string slice into it.\nWhile doing so, it attempts to find matches of a pattern. If it finds any, it\nreplaces them with the replacement string slice.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"this is old\";\n\nassert_eq!(\"this is new\", s.replace(\"old\", \"new\"));\nassert_eq!(\"than an old\", s.replace(\"is\", \"an\"));\n```\n\nWhen the pattern doesn't match, it returns this string slice as [`String`]:\n\n```\nlet s = \"this is old\";\nassert_eq!(s, s.replace(\"cookie monster\", \"little lamb\"));\n```","links":{"`String`":"5:7254:224"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the replaced string as a new allocation, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["from",{"generic":"P"}],["to",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7254:224","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11721:14373","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12035:35918":{"id":"2:12035:35918","crate_id":2,"name":"slice_unchecked","span":null,"visibility":"public","docs":"Creates a string slice from another string slice, bypassing safety\nchecks.\n\nThis is generally not recommended, use with caution! For a safe\nalternative see [`str`] and [`Index`].\n\n[`Index`]: crate::ops::Index\n\nThis new slice goes from `begin` to `end`, including `begin` but\nexcluding `end`.\n\nTo get a mutable string slice instead, see the\n[`slice_mut_unchecked`] method.\n\n[`slice_mut_unchecked`]: str::slice_mut_unchecked\n\n# Safety\n\nCallers of this function are responsible that three preconditions are\nsatisfied:\n\n* `begin` must not exceed `end`.\n* `begin` and `end` must be byte positions within the string slice.\n* `begin` and `end` must lie on UTF-8 sequence boundaries.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\n\nunsafe {\n    assert_eq!(\"Löwe 老虎 Léopard\", s.slice_unchecked(0, 21));\n}\n\nlet s = \"Hello, world!\";\n\nunsafe {\n    assert_eq!(\"world\", s.slice_unchecked(7, 12));\n}\n```","links":{"`str`":"1:11923:1399","str::slice_mut_unchecked":"2:12036:35919","crate::ops::Index":"2:2981:2305"},"attrs":["#[deprecated(since = \"1.29.0\", note =\n\"use `get_unchecked(begin..end)` instead\")]","#[must_use]"],"deprecation":{"since":"1.29.0","note":"use `get_unchecked(begin..end)` instead"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["begin",{"primitive":"usize"}],["end",{"primitive":"usize"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"2:12091:3109":{"id":"2:12091:3109","crate_id":2,"name":"matches","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within the given string\nslice.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rmatches`] method can be used.\n\n[`rmatches`]: str::matches\n\n# Examples\n\nBasic usage:\n\n```\nlet v: Vec<&str> = \"abcXXXabcYYYabc\".matches(\"abc\").collect();\nassert_eq!(v, [\"abc\", \"abc\", \"abc\"]);\n\nlet v: Vec<&str> = \"1abc2abc3\".matches(char::is_numeric).collect();\nassert_eq!(v, [\"1\", \"2\", \"3\"]);\n```","links":{"self::pattern":"2:11716:14376","`DoubleEndedIterator`":"2:7244:121","prim@char":"1:11917:418","str::matches":"2:12091:3109"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Matches","id":"2:43575:8394","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11721:14373","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5411:36587":{"id":"5:5411:36587","crate_id":5,"name":"replacen","span":null,"visibility":"public","docs":"Replaces first N matches of a pattern with another string.\n\n`replacen` creates a new [`String`], and copies the data from this string slice into it.\nWhile doing so, it attempts to find matches of a pattern. If it finds any, it\nreplaces them with the replacement string slice at most `count` times.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"foo foo 123 foo\";\nassert_eq!(\"new new 123 foo\", s.replacen(\"foo\", \"new\", 2));\nassert_eq!(\"faa fao 123 foo\", s.replacen('o', \"a\", 3));\nassert_eq!(\"foo foo new23 foo\", s.replacen(char::is_numeric, \"new\", 1));\n```\n\nWhen the pattern doesn't match, it returns this string slice as [`String`]:\n\n```\nlet s = \"this is old\";\nassert_eq!(s, s.replacen(\"cookie monster\", \"little lamb\", 10));\n```","links":{"`String`":"5:7254:224"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the replaced string as a new allocation, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}],["to",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}],["count",{"primitive":"usize"}]],"output":{"resolved_path":{"name":"String","id":"5:7254:224","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11721:14373","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12100:35927":{"id":"2:12100:35927","crate_id":2,"name":"rmatch_indices","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within `self`,\nyielded in reverse order along with the index of the match.\n\nFor matches of `pat` within `self` that overlap, only the indices\ncorresponding to the last match are returned.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`match_indices`] method can be used.\n\n[`match_indices`]: str::match_indices\n\n# Examples\n\nBasic usage:\n\n```\nlet v: Vec<_> = \"abcXXXabcYYYabc\".rmatch_indices(\"abc\").collect();\nassert_eq!(v, [(12, \"abc\"), (6, \"abc\"), (0, \"abc\")]);\n\nlet v: Vec<_> = \"1abcabc2\".rmatch_indices(\"abc\").collect();\nassert_eq!(v, [(4, \"abc\"), (1, \"abc\")]);\n\nlet v: Vec<_> = \"ababa\".rmatch_indices(\"aba\").collect();\nassert_eq!(v, [(2, \"aba\")]); // only the last `aba`\n```","links":{"self::pattern":"2:11716:14376","`DoubleEndedIterator`":"2:7244:121","prim@char":"1:11917:418","str::match_indices":"2:12097:35926"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RMatchIndices","id":"2:43539:8392","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11721:14373","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:11721:14373","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11736:14374","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12085:35923":{"id":"2:12085:35923","crate_id":2,"name":"split_once","span":null,"visibility":"public","docs":"Splits the string on the first occurrence of the specified delimiter and\nreturns prefix before delimiter and suffix after delimiter.\n\n# Examples\n\n```\nassert_eq!(\"cfg\".split_once('='), None);\nassert_eq!(\"cfg=\".split_once('='), Some((\"cfg\", \"\")));\nassert_eq!(\"cfg=foo\".split_once('='), Some((\"cfg\", \"foo\")));\nassert_eq!(\"cfg=foo=bar\".split_once('='), Some((\"cfg\", \"foo=bar\")));\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["delimiter",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:41402:181","args":{"angle_bracketed":{"args":[{"type":{"tuple":[{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11721:14373","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12015:812":{"id":"2:12015:812","crate_id":2,"name":"len","span":null,"visibility":"public","docs":"Returns the length of `self`.\n\nThis length is in bytes, not [`char`]s or graphemes. In other words,\nit might not be what a human considers the length of the string.\n\n[`char`]: prim@char\n\n# Examples\n\nBasic usage:\n\n```\nlet len = \"foo\".len();\nassert_eq!(3, len);\n\nassert_eq!(\"ƒoo\".len(), 4); // fancy f!\nassert_eq!(\"ƒoo\".chars().count(), 3);\n```","links":{"prim@char":"1:11917:418"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12017:35914":{"id":"2:12017:35914","crate_id":2,"name":"is_char_boundary","span":null,"visibility":"public","docs":"Checks that `index`-th byte is the first byte in a UTF-8 code point\nsequence or the end of the string.\n\nThe start and end of the string (when `index == self.len()`) are\nconsidered to be boundaries.\n\nReturns `false` if `index` is greater than `self.len()`.\n\n# Examples\n\n```\nlet s = \"Löwe 老虎 Léopard\";\nassert!(s.is_char_boundary(0));\n// start of `老`\nassert!(s.is_char_boundary(6));\nassert!(s.is_char_boundary(s.len()));\n\n// second byte of `ö`\nassert!(!s.is_char_boundary(2));\n\n// third byte of `老`\nassert!(!s.is_char_boundary(8));\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["index",{"primitive":"usize"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12088:35924":{"id":"2:12088:35924","crate_id":2,"name":"rsplit_once","span":null,"visibility":"public","docs":"Splits the string on the last occurrence of the specified delimiter and\nreturns prefix before delimiter and suffix after delimiter.\n\n# Examples\n\n```\nassert_eq!(\"cfg\".rsplit_once('='), None);\nassert_eq!(\"cfg=foo\".rsplit_once('='), Some((\"cfg\", \"foo\")));\nassert_eq!(\"cfg=foo=bar\".rsplit_once('='), Some((\"cfg=foo\", \"bar\")));\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["delimiter",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:41402:181","args":{"angle_bracketed":{"args":[{"type":{"tuple":[{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11721:14373","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:11721:14373","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11736:14374","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12060:4130":{"id":"2:12060:4130","crate_id":2,"name":"rfind","span":null,"visibility":"public","docs":"Returns the byte index for the first character of the last match of the pattern in\nthis string slice.\n\nReturns [`None`] if the pattern doesn't match.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nlet s = \"Löwe 老虎 Léopard Gepardi\";\n\nassert_eq!(s.rfind('L'), Some(13));\nassert_eq!(s.rfind('é'), Some(14));\nassert_eq!(s.rfind(\"pard\"), Some(24));\n```\n\nMore complex patterns with closures:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\n\nassert_eq!(s.rfind(char::is_whitespace), Some(12));\nassert_eq!(s.rfind(char::is_lowercase), Some(20));\n```\n\nNot finding the pattern:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\nlet x: &[_] = &['1', '2'];\n\nassert_eq!(s.rfind(x), None);\n```","links":{"`None`":"2:41404:179","prim@char":"1:11917:418","self::pattern":"2:11716:14376"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:41402:181","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11721:14373","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:11721:14373","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11736:14374","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12110:35932":{"id":"2:12110:35932","crate_id":2,"name":"trim_right","span":null,"visibility":"public","docs":"Returns a string slice with trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`.\n\n# Text directionality\n\nA string is a sequence of bytes. 'Right' in this context means the last\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _left_ side, not the right.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \" Hello\\tworld\\t\";\n\nassert_eq!(\" Hello\\tworld\", s.trim_right());\n```\n\nDirectionality:\n\n```\nlet s = \"English  \";\nassert!(Some('h') == s.trim_right().chars().rev().next());\n\nlet s = \"עברית  \";\nassert!(Some('ת') == s.trim_right().chars().rev().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_end`\", suggestion =\n\"trim_end\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_end`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12016:2031":{"id":"2:12016:2031","crate_id":2,"name":"is_empty","span":null,"visibility":"public","docs":"Returns `true` if `self` has a length of zero bytes.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\";\nassert!(s.is_empty());\n\nlet s = \"not empty\";\nassert!(!s.is_empty());\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}}},"paths":{"22:14:25186":{"crate_id":22,"path":["proc_macro2","marker","ProcMacroAutoTraits"],"kind":"struct"},"24:5052:2482":{"crate_id":24,"path":["syn","generics","TraitBoundModifier"],"kind":"enum"},"11:332:4865":{"crate_id":11,"path":["hashbrown","raw","RawIntoIter"],"kind":"struct"},"2:11741:14372":{"crate_id":2,"path":["core","str","pattern","DoubleEndedSearcher"],"kind":"trait"},"2:7322:159":{"crate_id":2,"path":["core","iter","traits","iterator","Iterator"],"kind":"trait"},"20:504:4032":{"crate_id":20,"path":["quote","__private","IdentFragmentAdapter"],"kind":"struct"},"21:2794:1899":{"crate_id":21,"path":["proc_macro","Spacing"],"kind":"enum"},"24:673:37355":{"crate_id":24,"path":["syn","expr","parsing","Precedence"],"kind":"enum"},"21:2713:1900":{"crate_id":21,"path":["proc_macro","Span"],"kind":"struct"},"24:5347:3232":{"crate_id":24,"path":["syn","restriction","Visibility"],"kind":"enum"},"1:9127:28268":{"crate_id":1,"path":["std","sys","common","thread_local","fast_local","Key"],"kind":"struct"},"2:41879:83":{"crate_id":2,"path":["core","sync","atomic","AtomicI64"],"kind":"struct"},"2:46306:7829":{"crate_id":2,"path":["core","core_arch","simd","u8x32"],"kind":"struct"},"1:8867:9177":{"crate_id":1,"path":["std","sync","mpsc","TryRecvError"],"kind":"enum"},"2:47416:7888":{"crate_id":2,"path":["core","core_arch","simd","i32x16"],"kind":"struct"},"5:1470:8278":{"crate_id":5,"path":["alloc","collections","btree","map","Values"],"kind":"struct"},"1:1924:8977":{"crate_id":1,"path":["std","error","Indented"],"kind":"struct"},"24:1623:2073":{"crate_id":24,"path":["syn","parse_quote"],"kind":"macro"},"16:535:8123":{"crate_id":16,"path":["gimli","read","cfi","RegisterRuleMap"],"kind":"struct"},"1:11401:9062":{"crate_id":1,"path":["std","sys_common","net","TcpListener"],"kind":"struct"},"1:3083:9050":{"crate_id":1,"path":["std","io","readbuf","BorrowedBuf"],"kind":"struct"},"11:793:8934":{"crate_id":11,"path":["hashbrown","map","ValuesMut"],"kind":"struct"},"16:7103:7985":{"crate_id":16,"path":["gimli","read","op","Operation"],"kind":"enum"},"16:4568:6128":{"crate_id":16,"path":["gimli","constants","DwAccess"],"kind":"struct"},"24:3177:1847":{"crate_id":24,"path":["syn","token","Struct"],"kind":"struct"},"1:5787:4952":{"crate_id":1,"path":["std","sync","lazy_lock","LazyLock"],"kind":"struct"},"2:47689:7895":{"crate_id":2,"path":["core","core_arch","x86","__m128"],"kind":"struct"},"2:11488:8390":{"crate_id":2,"path":["core","str","iter","MatchIndicesInternal"],"kind":"struct"},"1:6508:9171":{"crate_id":1,"path":["std","sync","poison","TryLockError"],"kind":"enum"},"2:40456:3332":{"crate_id":2,"path":["core","iter","adapters","step_by","StepBy"],"kind":"struct"},"2:47735:7899":{"crate_id":2,"path":["core","core_arch","x86","__m256d"],"kind":"struct"},"17:11891:5511":{"crate_id":17,"path":["object","macho","LcStr"],"kind":"struct"},"1:3934:9069":{"crate_id":1,"path":["std","os","unix","fs","FileExt"],"kind":"trait"},"1:901:4549":{"crate_id":1,"path":["std","collections","hash","map","Drain"],"kind":"struct"},"16:2357:6063":{"crate_id":16,"path":["gimli","common","Register"],"kind":"struct"},"24:5289:2187":{"crate_id":24,"path":["syn","path","PathArguments"],"kind":"enum"},"2:12334:33788":{"crate_id":2,"path":["core","future","join","MaybeDone"],"kind":"enum"},"2:21:682":{"crate_id":2,"path":["core","format_args"],"kind":"macro"},"17:8858:5227":{"crate_id":17,"path":["object","endian","I64Bytes"],"kind":"struct"},"2:21814:7525":{"crate_id":2,"path":["core","num","dec2flt","number","Number"],"kind":"struct"},"16:7803:6269":{"crate_id":16,"path":["gimli","read","unit","UnitHeader"],"kind":"struct"},"2:43593:8395":{"crate_id":2,"path":["core","str","iter","RMatches"],"kind":"struct"},"16:4789:6134":{"crate_id":16,"path":["gimli","constants","DwCc"],"kind":"struct"},"17:12770:5652":{"crate_id":17,"path":["object","pe","ImageDosHeader"],"kind":"struct"},"1:8791:7978":{"crate_id":1,"path":["std","process","ExitStatusError"],"kind":"struct"},"6:4677:6903":{"crate_id":6,"path":["libc","unix","linux_like","linux","ucred"],"kind":"struct"},"21:2815:2507":{"crate_id":21,"path":["proc_macro","Literal"],"kind":"struct"},"1:11497:8001":{"crate_id":1,"path":["std","personality","dwarf","eh","EHContext"],"kind":"struct"},"2:40157:8349":{"crate_id":2,"path":["core","ffi","c_str","FromBytesUntilNulError"],"kind":"struct"},"6:4505:6864":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_periodic_effect"],"kind":"struct"},"2:42921:8376":{"crate_id":2,"path":["core","slice","ascii","EscapeByte"],"kind":"struct"},"1:5742:8557":{"crate_id":1,"path":["std","sync","condvar","Condvar"],"kind":"struct"},"2:2589:116":{"crate_id":2,"path":["core","default","Default"],"kind":"trait"},"16:5643:8133":{"crate_id":16,"path":["gimli","read","cfi","EhHdrTable"],"kind":"struct"},"17:9068:37133":{"crate_id":17,"path":["object","read","any","SegmentInternal"],"kind":"enum"},"2:2348:182":{"crate_id":2,"path":["core","cmp","Ord"],"kind":"trait"},"2:46004:7821":{"crate_id":2,"path":["core","core_arch","simd","i64x2"],"kind":"struct"},"6:554:6567":{"crate_id":6,"path":["libc","unix","winsize"],"kind":"struct"},"17:13443:5911":{"crate_id":17,"path":["object","pe","ImageLoadConfigCodeIntegrity"],"kind":"struct"},"3:229:210":{"crate_id":3,"path":["compiler_builtins","float","cmp","Result"],"kind":"enum"},"6:4871:6999":{"crate_id":6,"path":["libc","unix","linux_like","linux","in6_ifreq"],"kind":"struct"},"2:2151:588":{"crate_id":2,"path":["core","ptr","drop_in_place"],"kind":"function"},"2:12517:4940":{"crate_id":2,"path":["core","task","wake","Waker"],"kind":"struct"},"17:11060:5306":{"crate_id":17,"path":["object","read","Relocation"],"kind":"struct"},"16:6981:21149":{"crate_id":16,"path":["gimli","read","loclists","LocListIter"],"kind":"struct"},"6:6066:7277":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_data"],"kind":"union"},"22:689:8071":{"crate_id":22,"path":["proc_macro2","rcvec","RcVecIntoIter"],"kind":"struct"},"1:5525:9152":{"crate_id":1,"path":["std","process","Termination"],"kind":"trait"},"17:11193:5353":{"crate_id":17,"path":["object","archive","AixFileHeader"],"kind":"struct"},"17:10527:21385":{"crate_id":17,"path":["object","read","pe","export","ExportTarget"],"kind":"enum"},"1:7537:4967":{"crate_id":1,"path":["std","backtrace_rs","print","BacktraceFrameFmt"],"kind":"struct"},"2:32071:8334":{"crate_id":2,"path":["core","error","Source"],"kind":"struct"},"1:11918:1517":{"crate_id":1,"path":["std","unit"],"kind":"primitive"},"2:42713:8374":{"crate_id":2,"path":["core","hash","sip","Sip13Rounds"],"kind":"struct"},"1:8176:8309":{"crate_id":1,"path":["std","io","Split"],"kind":"struct"},"16:4400:6123":{"crate_id":16,"path":["gimli","constants","DwForm"],"kind":"struct"},"1:11422:9064":{"crate_id":1,"path":["std","sys_common","net","UdpSocket"],"kind":"struct"},"2:41268:9058":{"crate_id":2,"path":["core","net","ip_addr","Ipv6MulticastScope"],"kind":"enum"},"17:9545:5215":{"crate_id":17,"path":["object","read","coff","section","CoffSection"],"kind":"struct"},"2:20781:4484":{"crate_id":2,"path":["core","core_simd","elements","const_ptr","SimdConstPtr","from_exposed_addr"],"kind":"foreign_type"},"2:9121:132":{"crate_id":2,"path":["core","fmt","Formatter"],"kind":"struct"},"2:44340:8597":{"crate_id":2,"path":["core","task","wake","RawWaker"],"kind":"struct"},"2:43237:14356":{"crate_id":2,"path":["core","slice","iter","ArrayChunksMut"],"kind":"struct"},"16:7077:21150":{"crate_id":16,"path":["gimli","read","op","DieReference"],"kind":"enum"},"24:5047:2479":{"crate_id":24,"path":["syn","generics","TraitBound"],"kind":"struct"},"2:45575:7801":{"crate_id":2,"path":["core","core_arch","simd","u64x1"],"kind":"struct"},"1:8120:7954":{"crate_id":1,"path":["std","io","IoSlice"],"kind":"struct"},"24:5488:3248":{"crate_id":24,"path":["syn","ty","TypeTuple"],"kind":"struct"},"6:1701:6721":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_un"],"kind":"struct"},"17:9641:21254":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdatSectionIterator"],"kind":"struct"},"24:2701:3454":{"crate_id":24,"path":["syn","token","Crate"],"kind":"struct"},"5:682:111":{"crate_id":5,"path":["alloc","borrow","Cow"],"kind":"enum"},"2:44145:122":{"crate_id":2,"path":["core","time","Duration"],"kind":"struct"},"2:21798:8322":{"crate_id":2,"path":["core","num","dec2flt","decimal","Decimal"],"kind":"struct"},"2:45361:7792":{"crate_id":2,"path":["core","core_arch","simd","u8x2"],"kind":"struct"},"2:46666:7850":{"crate_id":2,"path":["core","core_arch","simd","i32x8"],"kind":"struct"},"21:405:37265":{"crate_id":21,"path":["proc_macro","bridge","scoped_cell","RefMutL"],"kind":"struct"},"16:7488:8252":{"crate_id":16,"path":["gimli","read","pubnames","PubNamesEntryIter"],"kind":"struct"},"1:10894:7979":{"crate_id":1,"path":["std","sys","unix","process","process_common","ExitCode"],"kind":"struct"},"17:8788:5225":{"crate_id":17,"path":["object","endian","I16Bytes"],"kind":"struct"},"2:43475:8388":{"crate_id":2,"path":["core","str","iter","SplitN"],"kind":"struct"},"24:5317:2488":{"crate_id":24,"path":["syn","path","AngleBracketedGenericArguments"],"kind":"struct"},"1:7619:4222":{"crate_id":1,"path":["std","thread","Builder"],"kind":"struct"},"24:0:1677":{"crate_id":24,"path":["syn"],"kind":"module"},"22:729:1832":{"crate_id":22,"path":["proc_macro2","fallback","Ident"],"kind":"struct"},"17:9098:21221":{"crate_id":17,"path":["object","read","any","SectionIterator"],"kind":"struct"},"2:44166:8434":{"crate_id":2,"path":["core","time","TryFromFloatSecsError"],"kind":"struct"},"6:4549:6884":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_abs_setup"],"kind":"struct"},"6:6804:7442":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ipc_perm"],"kind":"struct"},"2:8842:35168":{"crate_id":2,"path":["core","fmt","builders","PadAdapter"],"kind":"struct"},"1:11866:8605":{"crate_id":1,"path":["std","backtrace_rs","symbolize","gimli","parse_running_mmaps","MapsEntry"],"kind":"struct"},"6:7563:7499":{"crate_id":6,"path":["libc","unix","linux_like","linux","can_frame"],"kind":"struct"},"2:2839:5090":{"crate_id":2,"path":["core","ops","bit","BitAndAssign"],"kind":"trait"},"16:5104:6144":{"crate_id":16,"path":["gimli","constants","DwRle"],"kind":"struct"},"2:1467:2243":{"crate_id":2,"path":["core","mem"],"kind":"module"},"1:10751:26923":{"crate_id":1,"path":["std","sys","unix","kernel_copy","SpliceMode"],"kind":"enum"},"2:30371:32755":{"crate_id":2,"path":["core","ptr","alignment","AlignmentEnum32"],"kind":"enum"},"17:9696:5239":{"crate_id":17,"path":["object","read","elf","section","SectionTable"],"kind":"struct"},"24:3921:3491":{"crate_id":24,"path":["syn","token","Dot"],"kind":"struct"},"24:2973:2506":{"crate_id":24,"path":["syn","token","Match"],"kind":"struct"},"2:47680:7894":{"crate_id":2,"path":["core","core_arch","x86","__m128i"],"kind":"struct"},"24:4824:3189":{"crate_id":24,"path":["syn","expr","ExprField"],"kind":"struct"},"1:4877:9127":{"crate_id":1,"path":["std","os","net","linux_ext","tcp","TcpStreamExt"],"kind":"trait"},"20:239:4038":{"crate_id":20,"path":["quote","__private","get_span","GetSpanInner"],"kind":"struct"},"24:4920:3211":{"crate_id":24,"path":["syn","expr","ExprWhile"],"kind":"struct"},"22:919:2214":{"crate_id":22,"path":["proc_macro2","Punct"],"kind":"struct"},"1:8508:3258":{"crate_id":1,"path":["std","path","Iter"],"kind":"struct"},"24:4329:3519":{"crate_id":24,"path":["syn","token","ShlEq"],"kind":"struct"},"16:7498:8253":{"crate_id":16,"path":["gimli","read","pubtypes","PubTypesEntry"],"kind":"struct"},"1:11272:8468":{"crate_id":1,"path":["std","sys_common","wtf8","EncodeWide"],"kind":"struct"},"17:12224:5575":{"crate_id":17,"path":["object","macho","DylibTableOfContents"],"kind":"struct"},"6:4445:6835":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_keymap_entry"],"kind":"struct"},"2:7202:134":{"crate_id":2,"path":["core","iter","traits","collect","FromIterator"],"kind":"trait"},"1:2481:9039":{"crate_id":1,"path":["std","io","buffered","bufreader","BufReader"],"kind":"struct"},"2:9146:112":{"crate_id":2,"path":["core","fmt","Debug"],"kind":"trait"},"1:11360:9063":{"crate_id":1,"path":["std","sys_common","net","TcpStream"],"kind":"struct"},"17:9534:21247":{"crate_id":17,"path":["object","read","coff","section","CoffSectionIterator"],"kind":"struct"},"5:0:286":{"crate_id":5,"path":["alloc"],"kind":"module"},"1:1583:8280":{"crate_id":1,"path":["std","collections","hash","set","Difference"],"kind":"struct"},"6:6624:7357":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stat"],"kind":"struct"},"5:4347:245":{"crate_id":5,"path":["alloc","collections","vec_deque","VecDeque"],"kind":"struct"},"1:9057:167":{"crate_id":1,"path":["std","sync","mutex","MutexGuard"],"kind":"struct"},"16:6236:8507":{"crate_id":16,"path":["gimli","read","dwarf","RangeIter"],"kind":"struct"},"5:4163:4896":{"crate_id":5,"path":["alloc","collections","vec_deque","into_iter","try_fold","Guard"],"kind":"struct"},"11:447:142":{"crate_id":11,"path":["hashbrown","map","HashMap"],"kind":"struct"},"21:2614:3427":{"crate_id":21,"path":["proc_macro","diagnostic","Diagnostic"],"kind":"struct"},"1:1982:185":{"crate_id":1,"path":["std","ffi","os_str","OsString"],"kind":"struct"},"1:3193:9046":{"crate_id":1,"path":["std","io","stdio","StdinLock"],"kind":"struct"},"17:9959:8100":{"crate_id":17,"path":["object","read","elf","version","VerdauxIterator"],"kind":"struct"},"1:7815:9009":{"crate_id":1,"path":["std","fs","ReadDir"],"kind":"struct"},"6:6710:7384":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_fpxreg"],"kind":"struct"},"20:272:1909":{"crate_id":20,"path":["quote","__private","push_lifetime","Lifetime"],"kind":"struct"},"20:148:3760":{"crate_id":20,"path":["quote","__private","HasIterator"],"kind":"struct"},"5:4362:4898":{"crate_id":5,"path":["alloc","collections","vec_deque","drop","Dropper"],"kind":"struct"},"2:4437:3394":{"crate_id":2,"path":["core","cell","SyncUnsafeCell"],"kind":"struct"},"2:44106:8429":{"crate_id":2,"path":["core","str","IsWhitespace"],"kind":"struct"},"5:1423:3262":{"crate_id":5,"path":["alloc","collections","btree","map","IterMut"],"kind":"struct"},"6:5899:7199":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","rtentry"],"kind":"struct"},"2:43279:14364":{"crate_id":2,"path":["core","slice","iter","RChunksExactMut"],"kind":"struct"},"6:7522:7490":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_barrierattr_t"],"kind":"struct"},"1:480:4942":{"crate_id":1,"path":["std","thread","spawn_unchecked_","MaybeDangling"],"kind":"struct"},"24:5058:2871":{"crate_id":24,"path":["syn","generics","WhereClause"],"kind":"struct"},"17:9498:5239":{"crate_id":17,"path":["object","read","coff","section","SectionTable"],"kind":"struct"},"1:4704:9085":{"crate_id":1,"path":["std","os","fd","raw","FromRawFd"],"kind":"trait"},"17:12098:5542":{"crate_id":17,"path":["object","macho","PreboundDylibCommand"],"kind":"struct"},"1:10731:119":{"crate_id":1,"path":["std","sys","unix","fs","DirBuilder"],"kind":"struct"},"1:3898:9068":{"crate_id":1,"path":["std","os","unix","ffi","os_str","OsStringExt"],"kind":"trait"},"17:10712:21387":{"crate_id":17,"path":["object","read","pe","resource","ResourceNameOrId"],"kind":"enum"},"1:9149:28068":{"crate_id":1,"path":["std","sys","common","thread_local","fast_local","DtorState"],"kind":"enum"},"16:3047:20282":{"crate_id":16,"path":["gimli","common","DwarfFileType"],"kind":"enum"},"1:11254:8604":{"crate_id":1,"path":["std","sys_common","wtf8","Wtf8"],"kind":"struct"},"17:13411:5903":{"crate_id":17,"path":["object","pe","ImageResourceDirectoryEntry"],"kind":"struct"},"17:13879:6041":{"crate_id":17,"path":["object","pe","ImageCor20Header"],"kind":"struct"},"2:47799:7903":{"crate_id":2,"path":["core","core_arch","x86","__m128bh"],"kind":"struct"},"2:11676:3282":{"crate_id":2,"path":["core","str","traits","FromStr"],"kind":"trait"},"17:1978:21282":{"crate_id":17,"path":["object","read","elf","relocation","ElfSectionRelocationIterator"],"kind":"struct"},"16:2378:6064":{"crate_id":16,"path":["gimli","common","DebugAbbrevOffset"],"kind":"struct"},"2:3079:3281":{"crate_id":2,"path":["core","ops","range","RangeBounds"],"kind":"trait"},"17:10026:21347":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCacheImageIterator"],"kind":"struct"},"11:1845:8280":{"crate_id":11,"path":["hashbrown","set","Difference"],"kind":"struct"},"1:8936:8558":{"crate_id":1,"path":["std","sync","mpmc","array","ArrayToken"],"kind":"struct"},"17:10598:5333":{"crate_id":17,"path":["object","read","pe","import","Import"],"kind":"enum"},"24:921:2870":{"crate_id":24,"path":["syn","generics","TypeGenerics"],"kind":"struct"},"24:5074:3215":{"crate_id":24,"path":["syn","generics","PredicateLifetime"],"kind":"struct"},"17:8823:5226":{"crate_id":17,"path":["object","endian","I32Bytes"],"kind":"struct"},"16:6164:8191":{"crate_id":16,"path":["gimli","read","cfi","PointerEncodingParameters"],"kind":"struct"},"1:3488:9031":{"crate_id":1,"path":["std","io","BufRead"],"kind":"trait"},"6:4847:6985":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlattr"],"kind":"struct"},"2:5991:3353":{"crate_id":2,"path":["core","iter","adapters","intersperse","IntersperseWith"],"kind":"struct"},"1:501:4211":{"crate_id":1,"path":["std","thread","PanicGuard"],"kind":"struct"},"1:7556:4969":{"crate_id":1,"path":["std","backtrace_rs","Bomb"],"kind":"struct"},"1:8498:8446":{"crate_id":1,"path":["std","path","Components"],"kind":"struct"},"5:7161:3297":{"crate_id":5,"path":["alloc","collections","TryReserveErrorKind"],"kind":"enum"},"24:2633:1879":{"crate_id":24,"path":["syn","token","Box"],"kind":"struct"},"17:13639:5980":{"crate_id":17,"path":["object","pe","ImageHotPatchHashes"],"kind":"struct"},"24:4935:2305":{"crate_id":24,"path":["syn","expr","Index"],"kind":"struct"},"2:8253:3741":{"crate_id":2,"path":["core","panic","unwind_safe","UnwindSafe"],"kind":"trait"},"2:2768:5083":{"crate_id":2,"path":["core","ops","arith","Div"],"kind":"trait"},"1:1048:8248":{"crate_id":1,"path":["std","collections","hash","map","Entry"],"kind":"enum"},"17:9748:5245":{"crate_id":17,"path":["object","read","elf","symbol","SymbolTable"],"kind":"struct"},"6:7294:7485":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","align","sem_t"],"kind":"struct"},"2:22601:7543":{"crate_id":2,"path":["core","num","nonzero","NonZeroIsize"],"kind":"struct"},"1:7488:1913":{"crate_id":1,"path":["std","backtrace_rs","symbolize","Symbol"],"kind":"struct"},"24:3991:3495":{"crate_id":24,"path":["syn","token","EqEq"],"kind":"struct"},"24:5477:3245":{"crate_id":24,"path":["syn","ty","TypeReference"],"kind":"struct"},"17:11037:21231":{"crate_id":17,"path":["object","read","RelocationTarget"],"kind":"enum"},"5:7208:32777":{"crate_id":5,"path":["alloc","ffi","c_str","FromBytesWithNulErrorKind"],"kind":"enum"},"18:538:5114":{"crate_id":18,"path":["memchr","memmem","rabinkarp","NeedleHash"],"kind":"struct"},"2:40685:8360":{"crate_id":2,"path":["core","iter","sources","from_generator","FromGenerator"],"kind":"struct"},"5:2963:3468":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Mut"],"kind":"struct"},"2:46542:7848":{"crate_id":2,"path":["core","core_arch","simd","i8x32"],"kind":"struct"},"5:2959:7514":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Immut"],"kind":"struct"},"2:9807:9014":{"crate_id":2,"path":["core","slice","index","private_slice_index","Sealed"],"kind":"trait"},"2:1733:4500":{"crate_id":2,"path":["core","ptr","metadata","Pointee"],"kind":"trait"},"1:11490:28267":{"crate_id":1,"path":["std","panicking","panic_count","MustAbort"],"kind":"enum"},"2:11716:14376":{"crate_id":2,"path":["core","str","pattern"],"kind":"module"},"18:113:25119":{"crate_id":18,"path":["memchr","memchr","iter","Memchr3"],"kind":"struct"},"16:6904:6207":{"crate_id":16,"path":["gimli","read","loclists","LocationLists"],"kind":"struct"},"6:4747:6939":{"crate_id":6,"path":["libc","unix","linux_like","linux","fanotify_response"],"kind":"struct"},"18:681:8083":{"crate_id":18,"path":["memchr","memmem","Finder"],"kind":"struct"},"2:47700:7896":{"crate_id":2,"path":["core","core_arch","x86","__m128d"],"kind":"struct"},"17:12085:5540":{"crate_id":17,"path":["object","macho","SubLibraryCommand"],"kind":"struct"},"2:20933:9014":{"crate_id":2,"path":["core","core_simd","elements","sealed","Sealed"],"kind":"trait"},"17:13777:6016":{"crate_id":17,"path":["object","pe","ImageCoffSymbolsHeader"],"kind":"struct"},"17:12138:5547":{"crate_id":17,"path":["object","macho","RoutinesCommand32"],"kind":"struct"},"17:9038:37132":{"crate_id":17,"path":["object","read","any","SegmentIteratorInternal"],"kind":"enum"},"1:4010:9075":{"crate_id":1,"path":["std","os","unix","fs","DirEntryExt2"],"kind":"trait"},"24:4353:3521":{"crate_id":24,"path":["syn","token","ShrEq"],"kind":"struct"},"22:834:2507":{"crate_id":22,"path":["proc_macro2","imp","Literal"],"kind":"enum"},"6:1512:6602":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreq_source"],"kind":"struct"},"2:43098:33333":{"crate_id":2,"path":["core","slice","iter","GenericSplitN"],"kind":"struct"},"6:6572:7329":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statfs"],"kind":"struct"},"2:41478:3257":{"crate_id":2,"path":["core","option","IntoIter"],"kind":"struct"},"5:819:4878":{"crate_id":5,"path":["alloc","collections","binary_heap","RebuildOnDrop"],"kind":"struct"},"1:2215:4492":{"crate_id":1,"path":["std","fs","read"],"kind":"function"},"6:488:6527":{"crate_id":6,"path":["libc","unix","timeval"],"kind":"struct"},"17:13145:5835":{"crate_id":17,"path":["object","pe","ImageSymbolEx"],"kind":"struct"},"24:2599:3452":{"crate_id":24,"path":["syn","token","Await"],"kind":"struct"},"11:1663:144":{"crate_id":11,"path":["hashbrown","set","HashSet"],"kind":"struct"},"1:3703:9062":{"crate_id":1,"path":["std","net","tcp","TcpListener"],"kind":"struct"},"17:13625:5974":{"crate_id":17,"path":["object","pe","ImageHotPatchBase"],"kind":"struct"},"24:4794:3182":{"crate_id":24,"path":["syn","expr","ExprBlock"],"kind":"struct"},"17:11520:5422":{"crate_id":17,"path":["object","elf","Dyn32"],"kind":"struct"},"1:4926:3729":{"crate_id":1,"path":["std","panic","always_abort"],"kind":"function"},"1:1577:8279":{"crate_id":1,"path":["std","collections","hash","set","Intersection"],"kind":"struct"},"1:11529:8470":{"crate_id":1,"path":["std","backtrace_rs","backtrace","libunwind","Frame"],"kind":"enum"},"2:3935:4896":{"crate_id":2,"path":["core","array","Guard"],"kind":"struct"},"24:5472:3244":{"crate_id":24,"path":["syn","ty","TypePtr"],"kind":"struct"},"2:2929:3434":{"crate_id":2,"path":["core","ops","function","FnMut"],"kind":"trait"},"2:2926:2153":{"crate_id":2,"path":["core","ops","function","Fn"],"kind":"trait"},"24:3950:3493":{"crate_id":24,"path":["syn","token","DotDotDot"],"kind":"struct"},"17:10039:21312":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCacheImage"],"kind":"struct"},"24:4411:3525":{"crate_id":24,"path":["syn","token","StarEq"],"kind":"struct"},"16:8180:21160":{"crate_id":16,"path":["gimli","read","value","ValueType"],"kind":"enum"},"17:13367:5889":{"crate_id":17,"path":["object","pe","ImageBoundImportDescriptor"],"kind":"struct"},"16:6431:8200":{"crate_id":16,"path":["gimli","read","aranges","ArangeEntryIter"],"kind":"struct"},"24:3211:2292":{"crate_id":24,"path":["syn","token","Trait"],"kind":"struct"},"2:42401:7767":{"crate_id":2,"path":["core","fmt","rt","Placeholder"],"kind":"struct"},"2:45982:7820":{"crate_id":2,"path":["core","core_arch","simd","i32x4"],"kind":"struct"},"16:6061:20254":{"crate_id":16,"path":["gimli","read","cfi","CallFrameInstruction"],"kind":"enum"},"2:9299:33366":{"crate_id":2,"path":["core","fmt","fmt","BorrowedPlaceholder"],"kind":"struct"},"6:5014:7074":{"crate_id":6,"path":["libc","unix","linux_like","linux","mq_attr"],"kind":"struct"},"24:4979:2244":{"crate_id":24,"path":["syn","generics","GenericParam"],"kind":"enum"},"16:7757:8255":{"crate_id":16,"path":["gimli","read","unit","DebugInfoUnitHeadersIter"],"kind":"struct"},"18:564:5116":{"crate_id":18,"path":["memchr","memmem","rarebytes","RareNeedleBytes"],"kind":"struct"},"2:46172:7826":{"crate_id":2,"path":["core","core_arch","simd","m16x8"],"kind":"struct"},"2:40141:32777":{"crate_id":2,"path":["core","ffi","c_str","FromBytesWithNulErrorKind"],"kind":"enum"},"17:12449:5612":{"crate_id":17,"path":["object","macho","BuildToolVersion"],"kind":"struct"},"17:11339:5390":{"crate_id":17,"path":["object","elf","CompressionHeader32"],"kind":"struct"},"16:4445:6124":{"crate_id":16,"path":["gimli","constants","DwAte"],"kind":"struct"},"6:1494:6594":{"crate_id":6,"path":["libc","unix","linux_like","in_addr"],"kind":"struct"},"2:42691:145":{"crate_id":2,"path":["core","hash","sip","Hasher"],"kind":"struct"},"16:5346:6146":{"crate_id":16,"path":["gimli","constants","DwEhPe"],"kind":"struct"},"16:6671:6186":{"crate_id":16,"path":["gimli","read","line","LineRow"],"kind":"struct"},"2:41520:3738":{"crate_id":2,"path":["core","panic","panic_info","PanicInfo"],"kind":"struct"},"2:44378:8437":{"crate_id":2,"path":["core","alloc","layout","LayoutError"],"kind":"struct"},"1:10010:8959":{"crate_id":1,"path":["std","sys","unix","os","SplitPaths"],"kind":"struct"},"1:11915:371":{"crate_id":1,"path":["std","bool"],"kind":"primitive"},"17:12372:5599":{"crate_id":17,"path":["object","macho","FilesetEntryCommand"],"kind":"struct"},"5:7177:102":{"crate_id":5,"path":["alloc","ffi","c_str","CString"],"kind":"struct"},"16:8072:8260":{"crate_id":16,"path":["gimli","read","unit","EntriesRaw"],"kind":"struct"},"16:7588:21153":{"crate_id":16,"path":["gimli","read","rnglists","RawRngListIter"],"kind":"struct"},"2:47814:7904":{"crate_id":2,"path":["core","core_arch","x86","__m256bh"],"kind":"struct"},"2:8847:8551":{"crate_id":2,"path":["core","fmt","builders","PadAdapterState"],"kind":"struct"},"2:20852:9226":{"crate_id":2,"path":["core","core_simd","elements","int","SimdInt"],"kind":"trait"},"17:10416:21381":{"crate_id":17,"path":["object","read","pe","file","PeComdatIterator"],"kind":"struct"},"18:736:25128":{"crate_id":18,"path":["memchr","memmem","SearcherKind"],"kind":"enum"},"2:1756:4499":{"crate_id":2,"path":["core","ptr","metadata","DynMetadata"],"kind":"struct"},"2:39963:3415":{"crate_id":2,"path":["core","ascii","EscapeDefault"],"kind":"struct"},"12:0:3005":{"crate_id":12,"path":["rustc_std_workspace_alloc"],"kind":"module"},"5:6611:4555":{"crate_id":5,"path":["alloc","vec","in_place_drop","InPlaceDstBufDrop"],"kind":"struct"},"6:4542:6882":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_ff_erase"],"kind":"struct"},"24:4577:2166":{"crate_id":24,"path":["syn","expr","Expr"],"kind":"enum"},"1:5377:9148":{"crate_id":1,"path":["std","process","ChildStdout"],"kind":"struct"},"17:11355:5394":{"crate_id":17,"path":["object","elf","CompressionHeader64"],"kind":"struct"},"6:7551:7497":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_rwlock_t"],"kind":"struct"},"24:5460:3240":{"crate_id":24,"path":["syn","ty","TypeInfer"],"kind":"struct"},"6:1544:6618":{"crate_id":6,"path":["libc","unix","linux_like","addrinfo"],"kind":"struct"},"24:4833:3191":{"crate_id":24,"path":["syn","expr","ExprGroup"],"kind":"struct"},"14:0:3006":{"crate_id":14,"path":["rustc_demangle"],"kind":"module"},"2:47086:7885":{"crate_id":2,"path":["core","core_arch","simd","u8x64"],"kind":"struct"},"2:47720:7898":{"crate_id":2,"path":["core","core_arch","x86","__m256"],"kind":"struct"},"17:247:37114":{"crate_id":17,"path":["object","read","util","DebugLen"],"kind":"struct"},"16:5976:8124":{"crate_id":16,"path":["gimli","read","cfi","UnwindTableRow"],"kind":"struct"},"16:8214:2584":{"crate_id":16,"path":["gimli","read","value","Value"],"kind":"enum"},"5:4392:4896":{"crate_id":5,"path":["alloc","collections","vec_deque","write_iter_wrapping","Guard"],"kind":"struct"},"17:9826:21259":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdatIterator"],"kind":"struct"},"17:8283:21209":{"crate_id":17,"path":["object","common","BinaryFormat"],"kind":"enum"},"1:11921:312":{"crate_id":1,"path":["std","array"],"kind":"primitive"},"5:7057:3257":{"crate_id":5,"path":["alloc","collections","btree","set","IntoIter"],"kind":"struct"},"18:521:25132":{"crate_id":18,"path":["memchr","memmem","prefilter","Prefilter"],"kind":"enum"},"1:11920:1050":{"crate_id":1,"path":["std","pointer"],"kind":"primitive"},"6:4468:6843":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_trigger"],"kind":"struct"},"1:8954:26836":{"crate_id":1,"path":["std","sync","mpmc","error","SendTimeoutError"],"kind":"enum"},"1:7883:8858":{"crate_id":1,"path":["std","io","buffered","IntoInnerError"],"kind":"struct"},"6:1526:6607":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_in"],"kind":"struct"},"17:13219:5854":{"crate_id":17,"path":["object","pe","ImageAuxSymbolSection"],"kind":"struct"},"17:11946:5520":{"crate_id":17,"path":["object","macho","Section32"],"kind":"struct"},"17:8521:21216":{"crate_id":17,"path":["object","common","FileFlags"],"kind":"enum"},"2:47876:7906":{"crate_id":2,"path":["core","core_arch","x86","cpuid","CpuidResult"],"kind":"struct"},"2:43777:8401":{"crate_id":2,"path":["core","str","pattern","CharSearcher"],"kind":"struct"},"2:40124:101":{"crate_id":2,"path":["core","ffi","c_str","CStr"],"kind":"struct"},"17:13135:5834":{"crate_id":17,"path":["object","pe","ImageSymbolBytes"],"kind":"struct"},"1:1783:8949":{"crate_id":1,"path":["std","env","Vars"],"kind":"struct"},"14:187:20229":{"crate_id":14,"path":["rustc_demangle","SizeLimitedFmtAdapter"],"kind":"struct"},"17:12126:5546":{"crate_id":17,"path":["object","macho","ThreadCommand"],"kind":"struct"},"2:45806:7815":{"crate_id":2,"path":["core","core_arch","simd","u16x8"],"kind":"struct"},"2:40397:3344":{"crate_id":2,"path":["core","iter","adapters","peekable","Peekable"],"kind":"struct"},"2:4264:3384":{"crate_id":2,"path":["core","cell","BorrowMutError"],"kind":"struct"},"2:22436:173":{"crate_id":2,"path":["core","num","nonzero","NonZeroI8"],"kind":"struct"},"11:2174:6435":{"crate_id":11,"path":["hashbrown","raw","bitmask","BitMask"],"kind":"struct"},"17:13857:6035":{"crate_id":17,"path":["object","pe","ImageArchitectureEntry"],"kind":"struct"},"1:1895:8854":{"crate_id":1,"path":["std","error","Report"],"kind":"struct"},"16:6132:8188":{"crate_id":16,"path":["gimli","read","cfi","CallFrameInstructionIter"],"kind":"struct"},"6:4427:6826":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_id"],"kind":"struct"},"2:4812:796":{"crate_id":2,"path":["core","iter"],"kind":"module"},"17:11832:5503":{"crate_id":17,"path":["object","macho","FatArch64"],"kind":"struct"},"22:925:1899":{"crate_id":22,"path":["proc_macro2","Spacing"],"kind":"enum"},"2:42175:3412":{"crate_id":2,"path":["core","fmt","num","LowerHex"],"kind":"struct"},"17:2933:21314":{"crate_id":17,"path":["object","read","macho","section","MachOSectionIterator"],"kind":"struct"},"1:7624:4224":{"crate_id":1,"path":["std","thread","ThreadId"],"kind":"struct"},"17:13233:5857":{"crate_id":17,"path":["object","pe","ImageAuxSymbolCrc"],"kind":"struct"},"1:3904:9067":{"crate_id":1,"path":["std","os","unix","ffi","os_str","OsStrExt"],"kind":"trait"},"2:4255:207":{"crate_id":2,"path":["core","cell","RefCell"],"kind":"struct"},"16:7669:6105":{"crate_id":16,"path":["gimli","read","str","DebugStr"],"kind":"struct"},"24:3109:212":{"crate_id":24,"path":["syn","token","Return"],"kind":"struct"},"2:40726:3314":{"crate_id":2,"path":["core","iter","sources","repeat_with","RepeatWith"],"kind":"struct"},"24:3024:3468":{"crate_id":24,"path":["syn","token","Mut"],"kind":"struct"},"2:43177:8316":{"crate_id":2,"path":["core","slice","iter","ChunksExact"],"kind":"struct"},"2:44122:8433":{"crate_id":2,"path":["core","str","UnsafeBytesToStr"],"kind":"struct"},"2:20815:9225":{"crate_id":2,"path":["core","core_simd","elements","float","SimdFloat"],"kind":"trait"},"24:4773:3177":{"crate_id":24,"path":["syn","expr","ExprArray"],"kind":"struct"},"5:4938:4896":{"crate_id":5,"path":["alloc","rc","from_iter_exact","Guard"],"kind":"struct"},"5:2967:25763":{"crate_id":5,"path":["alloc","collections","btree","node","marker","ValMut"],"kind":"struct"},"22:695:233":{"crate_id":22,"path":["proc_macro2","fallback","TokenStream"],"kind":"struct"},"6:579:6580":{"crate_id":6,"path":["libc","unix","tms"],"kind":"struct"},"16:6488:8202":{"crate_id":16,"path":["gimli","read","index","UnitIndex"],"kind":"struct"},"2:45906:7818":{"crate_id":2,"path":["core","core_arch","simd","i8x16"],"kind":"struct"},"1:8989:1885":{"crate_id":1,"path":["std","sync","mpmc","select","Token"],"kind":"struct"},"2:32031:6438":{"crate_id":2,"path":["core","convert","Infallible"],"kind":"enum"},"17:12113:5545":{"crate_id":17,"path":["object","macho","DylinkerCommand"],"kind":"struct"},"17:11410:5402":{"crate_id":17,"path":["object","elf","Syminfo32"],"kind":"struct"},"2:2744:1858":{"crate_id":2,"path":["core","marker","Tuple"],"kind":"trait"},"17:10691:21386":{"crate_id":17,"path":["object","read","pe","resource","ResourceDirectoryEntryData"],"kind":"enum"},"16:5000:6141":{"crate_id":16,"path":["gimli","constants","DwLne"],"kind":"struct"},"2:30847:183":{"crate_id":2,"path":["core","cmp","Ordering"],"kind":"enum"},"5:35:4465":{"crate_id":5,"path":["alloc","raw_vec","RawVec"],"kind":"struct"},"11:817:8937":{"crate_id":11,"path":["hashbrown","map","RawOccupiedEntryMut"],"kind":"struct"},"17:10635:5305":{"crate_id":17,"path":["object","read","pe","relocation","RelocationBlockIterator"],"kind":"struct"},"2:10808:14363":{"crate_id":2,"path":["core","slice","iter","GroupByMut"],"kind":"struct"},"1:3191:9045":{"crate_id":1,"path":["std","io","stdio","Stdin"],"kind":"struct"},"24:1533:2794":{"crate_id":24,"path":["syn","parse","Unexpected"],"kind":"enum"},"1:917:8934":{"crate_id":1,"path":["std","collections","hash","map","ValuesMut"],"kind":"struct"},"6:4694:6912":{"crate_id":6,"path":["libc","unix","linux_like","linux","posix_spawn_file_actions_t"],"kind":"struct"},"16:7652:198":{"crate_id":16,"path":["gimli","read","rnglists","Range"],"kind":"struct"},"2:4145:3402":{"crate_id":2,"path":["core","cell","once","OnceCell"],"kind":"struct"},"17:12419:5606":{"crate_id":17,"path":["object","macho","VersionMinCommand"],"kind":"struct"},"6:4943:7044":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_authinfo"],"kind":"struct"},"6:4379:6801":{"crate_id":6,"path":["libc","unix","linux_like","linux","packet_mreq"],"kind":"struct"},"1:2391:3014":{"crate_id":1,"path":["std","io"],"kind":"module"},"17:11628:5454":{"crate_id":17,"path":["object","elf","NoteHeader64"],"kind":"struct"},"17:11573:5435":{"crate_id":17,"path":["object","elf","Verdaux"],"kind":"struct"},"17:9917:5254":{"crate_id":17,"path":["object","read","elf","version","Version"],"kind":"struct"},"6:7585:7504":{"crate_id":6,"path":["libc","unix","linux_like","linux","canxl_frame"],"kind":"struct"},"17:13477:5918":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation32V2"],"kind":"struct"},"2:30299:68":{"crate_id":2,"path":["core","ptr","alignment","Alignment"],"kind":"struct"},"24:4213:3511":{"crate_id":24,"path":["syn","token","PercentEq"],"kind":"struct"},"2:10057:8311":{"crate_id":2,"path":["core","slice","iter","SplitInclusive"],"kind":"struct"},"24:4974:1840":{"crate_id":24,"path":["syn","generics","Generics"],"kind":"struct"},"17:11800:5496":{"crate_id":17,"path":["object","macho","DyldSubCacheInfo"],"kind":"struct"},"1:11478:8000":{"crate_id":1,"path":["std","alloc","System"],"kind":"struct"},"1:6780:9211":{"crate_id":1,"path":["std","std_float","StdFloat"],"kind":"trait"},"1:7837:8443":{"crate_id":1,"path":["std","fs","Permissions"],"kind":"struct"},"17:13181:5840":{"crate_id":17,"path":["object","pe","ImageAuxSymbolFunction"],"kind":"struct"},"2:9155:2298":{"crate_id":2,"path":["core","fmt","Binary"],"kind":"trait"},"18:531:8080":{"crate_id":18,"path":["memchr","memmem","prefilter","PrefilterState"],"kind":"struct"},"17:12033:5534":{"crate_id":17,"path":["object","macho","DylibCommand"],"kind":"struct"},"17:10440:21383":{"crate_id":17,"path":["object","read","pe","file","PeComdatSectionIterator"],"kind":"struct"},"17:12433:5608":{"crate_id":17,"path":["object","macho","BuildVersionCommand"],"kind":"struct"},"17:9617:21246":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdatIterator"],"kind":"struct"},"16:4596:6129":{"crate_id":16,"path":["gimli","constants","DwVis"],"kind":"struct"},"1:11101:7998":{"crate_id":1,"path":["std","sys","unix","time","Timespec"],"kind":"struct"},"17:10334:5245":{"crate_id":17,"path":["object","read","macho","symbol","SymbolTable"],"kind":"struct"},"10:0:3003":{"crate_id":10,"path":["adler"],"kind":"module"},"1:11522:8470":{"crate_id":1,"path":["std","backtrace_rs","backtrace","Frame"],"kind":"struct"},"24:4864:3198":{"crate_id":24,"path":["syn","expr","ExprMatch"],"kind":"struct"},"7:0:1545":{"crate_id":7,"path":["unwind"],"kind":"module"},"16:7244:37095":{"crate_id":16,"path":["gimli","read","op","OperationEvaluationResult"],"kind":"enum"},"6:7462:7486":{"crate_id":6,"path":["libc","unix","linux_like","linux","arch","generic","termios2"],"kind":"struct"},"1:8439:7971":{"crate_id":1,"path":["std","path","PrefixComponent"],"kind":"struct"},"21:2764:1821":{"crate_id":21,"path":["proc_macro","Group"],"kind":"struct"},"2:43259:14365":{"crate_id":2,"path":["core","slice","iter","RChunksMut"],"kind":"struct"},"2:44390:4462":{"crate_id":2,"path":["core","alloc","AllocError"],"kind":"struct"},"16:5630:21137":{"crate_id":16,"path":["gimli","read","cfi","EhHdrTableIter"],"kind":"struct"},"5:273:1879":{"crate_id":5,"path":["alloc","boxed","Box"],"kind":"struct"},"1:6865:4964":{"crate_id":1,"path":["std","sys","common","thread_local","abort_on_dtor_unwind","DtorUnwindGuard"],"kind":"struct"},"13:226:6434":{"crate_id":13,"path":["std_detect","detect","cache","Initializer"],"kind":"struct"},"24:4888:3203":{"crate_id":24,"path":["syn","expr","ExprRepeat"],"kind":"struct"},"16:6361:6160":{"crate_id":16,"path":["gimli","read","abbrev","AttributeSpecification"],"kind":"struct"},"1:7820:8442":{"crate_id":1,"path":["std","fs","OpenOptions"],"kind":"struct"},"24:5327:2287":{"crate_id":24,"path":["syn","path","AssocConst"],"kind":"struct"},"24:5140:3221":{"crate_id":24,"path":["syn","lit","LitChar"],"kind":"struct"},"2:49682:9231":{"crate_id":2,"path":["core","core_simd","swizzle","Which"],"kind":"enum"},"2:40692:3306":{"crate_id":2,"path":["core","iter","sources","once","Once"],"kind":"struct"},"2:10134:14369":{"crate_id":2,"path":["core","slice","iter","SplitInclusiveMut"],"kind":"struct"},"24:4956:62":{"crate_id":24,"path":["syn","expr","parsing","kw","raw"],"kind":"struct"},"17:11391:5401":{"crate_id":17,"path":["object","elf","Sym64"],"kind":"struct"},"2:9965:3258":{"crate_id":2,"path":["core","slice","iter","Iter"],"kind":"struct"},"5:7268:8303":{"crate_id":5,"path":["alloc","string","FromUtf8Error"],"kind":"struct"},"2:44094:8426":{"crate_id":2,"path":["core","str","CharEscapeDebugContinue"],"kind":"struct"},"5:6768:4916":{"crate_id":5,"path":["alloc","vec","dedup_by","FillGapOnDrop"],"kind":"struct"},"16:5708:8138":{"crate_id":16,"path":["gimli","read","cfi","SectionBaseAddresses"],"kind":"struct"},"24:4857:3196":{"crate_id":24,"path":["syn","expr","ExprLoop"],"kind":"struct"},"1:5462:9151":{"crate_id":1,"path":["std","process","Stdio"],"kind":"struct"},"2:46074:7824":{"crate_id":2,"path":["core","core_arch","simd","f64x4"],"kind":"struct"},"6:4703:6917":{"crate_id":6,"path":["libc","unix","linux_like","linux","posix_spawnattr_t"],"kind":"struct"},"2:2805:3505":{"crate_id":2,"path":["core","ops","bit","Not"],"kind":"trait"},"1:8456:9141":{"crate_id":1,"path":["std","path","Component"],"kind":"enum"},"17:11924:5519":{"crate_id":17,"path":["object","macho","SegmentCommand64"],"kind":"struct"},"17:13332:5878":{"crate_id":17,"path":["object","pe","ImageTlsDirectory64"],"kind":"struct"},"1:4783:9082":{"crate_id":1,"path":["std","os","fd","owned","AsFd"],"kind":"trait"},"2:2163:4485":{"crate_id":2,"path":["core","ptr","from_exposed_addr_mut"],"kind":"function"},"21:1403:1913":{"crate_id":21,"path":["proc_macro","bridge","symbol","Symbol"],"kind":"struct"},"17:9734:21261":{"crate_id":17,"path":["object","read","elf","section","ElfSection"],"kind":"struct"},"2:11539:8311":{"crate_id":2,"path":["core","str","iter","SplitInclusive"],"kind":"struct"},"16:6460:6090":{"crate_id":16,"path":["gimli","read","index","DebugCuIndex"],"kind":"struct"},"16:3749:6116":{"crate_id":16,"path":["gimli","constants","DwSect"],"kind":"struct"},"6:562:6572":{"crate_id":6,"path":["libc","unix","linger"],"kind":"struct"},"1:8765:186":{"crate_id":1,"path":["std","process","Output"],"kind":"struct"},"17:8548:21217":{"crate_id":17,"path":["object","common","SegmentFlags"],"kind":"enum"},"2:43806:8409":{"crate_id":2,"path":["core","str","pattern","CharArraySearcher"],"kind":"struct"},"2:3169:14409":{"crate_id":2,"path":["core","ops","try_trait","NeverShortCircuit"],"kind":"struct"},"2:20575:33259":{"crate_id":2,"path":["core","core_simd","swizzle","rotate_lanes_right","Rotate"],"kind":"struct"},"18:507:5110":{"crate_id":18,"path":["memchr","memmem","genericsimd","Forward"],"kind":"struct"},"16:6179:8508":{"crate_id":16,"path":["gimli","read","dwarf","Dwarf"],"kind":"struct"},"1:6561:9173":{"crate_id":1,"path":["std","sync","remutex","ReentrantMutex"],"kind":"struct"},"2:40084:8344":{"crate_id":2,"path":["core","char","ToUppercase"],"kind":"struct"},"17:13041:5808":{"crate_id":17,"path":["object","pe","Guid"],"kind":"struct"},"1:1594:1869":{"crate_id":1,"path":["std","collections","hash","set","Union"],"kind":"struct"},"2:45451:7796":{"crate_id":2,"path":["core","core_arch","simd","i8x4"],"kind":"struct"},"17:10257:21316":{"crate_id":17,"path":["object","read","macho","segment","MachOSegmentIterator"],"kind":"struct"},"5:1299:8845":{"crate_id":5,"path":["alloc","collections","btree","map","entry","OccupiedError"],"kind":"struct"},"1:8293:7357":{"crate_id":1,"path":["std","os","linux","raw","arch","stat"],"kind":"struct"},"17:9443:21240":{"crate_id":17,"path":["object","read","archive","ArchiveMemberIterator"],"kind":"struct"},"24:4143:3506":{"crate_id":24,"path":["syn","token","Or"],"kind":"struct"},"17:9866:21277":{"crate_id":17,"path":["object","read","elf","note","NoteIterator"],"kind":"struct"},"6:7574:7503":{"crate_id":6,"path":["libc","unix","linux_like","linux","canfd_frame"],"kind":"struct"},"2:44118:8432":{"crate_id":2,"path":["core","str","BytesIsNotEmpty"],"kind":"struct"},"1:7694:4614":{"crate_id":1,"path":["std","collections","hash","map","RandomState"],"kind":"struct"},"24:4537:3175":{"crate_id":24,"path":["syn","data","FieldsNamed"],"kind":"struct"},"2:42666:8370":{"crate_id":2,"path":["core","hash","sip","SipHasher13"],"kind":"struct"},"1:8883:9176":{"crate_id":1,"path":["std","sync","mpsc","RecvTimeoutError"],"kind":"enum"},"11:844:8939":{"crate_id":11,"path":["hashbrown","map","RawEntryBuilder"],"kind":"struct"},"20:0:1108":{"crate_id":20,"path":["quote"],"kind":"module"},"1:844:3258":{"crate_id":1,"path":["std","collections","hash","map","Iter"],"kind":"struct"},"24:844:5078":{"crate_id":24,"path":["syn","ext","private","PeekFn"],"kind":"struct"},"24:4798:3183":{"crate_id":24,"path":["syn","expr","ExprBreak"],"kind":"struct"},"2:21989:9066":{"crate_id":2,"path":["core","num","error","IntErrorKind"],"kind":"enum"},"1:731:142":{"crate_id":1,"path":["std","collections","hash","map","HashMap"],"kind":"struct"},"1:4351:9093":{"crate_id":1,"path":["std","os","unix","net","stream","UnixStream"],"kind":"struct"},"16:7029:8243":{"crate_id":16,"path":["gimli","read","lookup","LookupEntryIter"],"kind":"struct"},"2:9817:222":{"crate_id":2,"path":["core","slice","index","SliceIndex"],"kind":"trait"},"2:4259:3383":{"crate_id":2,"path":["core","cell","BorrowError"],"kind":"struct"},"6:6021:7264":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_exit"],"kind":"struct"},"2:43167:14360":{"crate_id":2,"path":["core","slice","iter","ChunksMut"],"kind":"struct"},"6:1910:16167":{"crate_id":6,"path":["libc","unix","linux_like","linux","fpos64_t"],"kind":"enum"},"1:10711:7913":{"crate_id":1,"path":["std","sys","unix","fs","FileTimes"],"kind":"struct"},"2:9613:4931":{"crate_id":2,"path":["core","slice","sort","merge_sort","BufGuard"],"kind":"struct"},"21:245:37208":{"crate_id":21,"path":["proc_macro","bridge","handle","OwnedStore"],"kind":"struct"},"2:45381:7793":{"crate_id":2,"path":["core","core_arch","simd","i8x2"],"kind":"struct"},"17:12563:5633":{"crate_id":17,"path":["object","macho","DataInCodeEntry"],"kind":"struct"},"6:7271:7472":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","align","max_align_t"],"kind":"struct"},"17:11721:5462":{"crate_id":17,"path":["object","macho","DyldCacheHeader"],"kind":"struct"},"5:5820:70":{"crate_id":5,"path":["alloc","sync","Arc"],"kind":"struct"},"17:13667:5987":{"crate_id":17,"path":["object","pe","ImageAlpha64RuntimeFunctionEntry"],"kind":"struct"},"5:3175:8280":{"crate_id":5,"path":["alloc","collections","btree","set","Difference"],"kind":"struct"},"17:12799:5672":{"crate_id":17,"path":["object","pe","ImageOs2Header"],"kind":"struct"},"17:11556:5427":{"crate_id":17,"path":["object","elf","Verdef"],"kind":"struct"},"1:3996:9073":{"crate_id":1,"path":["std","os","unix","fs","FileTypeExt"],"kind":"trait"},"24:94:4177":{"crate_id":24,"path":["syn","token","private","WithSpan"],"kind":"struct"},"22:869:233":{"crate_id":22,"path":["proc_macro2","TokenStream"],"kind":"struct"},"21:2292:1821":{"crate_id":21,"path":["proc_macro","bridge","Group"],"kind":"struct"},"16:2967:20281":{"crate_id":16,"path":["gimli","common","SectionId"],"kind":"enum"},"5:6699:244":{"crate_id":5,"path":["alloc","vec","Vec"],"kind":"struct"},"5:3209:8279":{"crate_id":5,"path":["alloc","collections","btree","set","Intersection"],"kind":"struct"},"2:2758:5081":{"crate_id":2,"path":["core","ops","arith","Sub"],"kind":"trait"},"2:40446:3348":{"crate_id":2,"path":["core","iter","adapters","skip_while","SkipWhile"],"kind":"struct"},"24:4837:3192":{"crate_id":24,"path":["syn","expr","ExprIf"],"kind":"struct"},"2:41919:90":{"crate_id":2,"path":["core","sync","atomic","AtomicU64"],"kind":"struct"},"16:6307:6087":{"crate_id":16,"path":["gimli","read","abbrev","DebugAbbrev"],"kind":"struct"},"13:110:37056":{"crate_id":13,"path":["std_detect","detect","arch","x86","Feature"],"kind":"enum"},"24:5138:3219":{"crate_id":24,"path":["syn","lit","LitByte"],"kind":"struct"},"2:8674:79":{"crate_id":2,"path":["core","sync","atomic","AtomicBool"],"kind":"struct"},"1:11928:643":{"crate_id":1,"path":["std","f64"],"kind":"primitive"},"17:13812:6029":{"crate_id":17,"path":["object","pe","ImageFunctionEntry64"],"kind":"struct"},"17:9577:5241":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbolTable"],"kind":"struct"},"6:7557:7498":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_barrier_t"],"kind":"struct"},"24:2956:2204":{"crate_id":24,"path":["syn","token","Macro"],"kind":"struct"},"2:7165:3324":{"crate_id":2,"path":["core","iter","traits","accum","Sum"],"kind":"trait"},"2:10096:14361":{"crate_id":2,"path":["core","slice","iter","SplitMut"],"kind":"struct"},"1:3481:9012":{"crate_id":1,"path":["std","io","Seek"],"kind":"trait"},"2:43224:3325":{"crate_id":2,"path":["core","slice","iter","ArrayChunks"],"kind":"struct"},"2:7206:152":{"crate_id":2,"path":["core","iter","traits","collect","IntoIterator"],"kind":"trait"},"5:1500:8549":{"crate_id":5,"path":["alloc","collections","btree","map","IntoValues"],"kind":"struct"},"24:4543:1849":{"crate_id":24,"path":["syn","data","Field"],"kind":"struct"},"17:8573:21218":{"crate_id":17,"path":["object","common","SectionFlags"],"kind":"enum"},"2:41999:92":{"crate_id":2,"path":["core","sync","atomic","AtomicUsize"],"kind":"struct"},"24:5440:3236":{"crate_id":24,"path":["syn","ty","TypeArray"],"kind":"struct"},"2:39227:199":{"crate_id":2,"path":["core","ops","range","RangeFrom"],"kind":"struct"},"11:657:3257":{"crate_id":11,"path":["hashbrown","map","IntoIter"],"kind":"struct"},"2:30875:4119":{"crate_id":2,"path":["core","cmp","Reverse"],"kind":"struct"},"24:4854:2168":{"crate_id":24,"path":["syn","expr","ExprLit"],"kind":"struct"},"2:3386:14395":{"crate_id":2,"path":["core","any","Demand"],"kind":"struct"},"21:1029:3426":{"crate_id":21,"path":["proc_macro","bridge","client","SourceFile"],"kind":"struct"},"2:43149:8313":{"crate_id":2,"path":["core","slice","iter","Windows"],"kind":"struct"},"2:46028:7822":{"crate_id":2,"path":["core","core_arch","simd","f32x4"],"kind":"struct"},"16:4969:6140":{"crate_id":16,"path":["gimli","constants","DwLns"],"kind":"struct"},"17:13024:5806":{"crate_id":17,"path":["object","pe","ImageNtHeaders32"],"kind":"struct"},"16:4510:6126":{"crate_id":16,"path":["gimli","constants","DwDs"],"kind":"struct"},"1:857:3262":{"crate_id":1,"path":["std","collections","hash","map","IterMut"],"kind":"struct"},"16:7711:6261":{"crate_id":16,"path":["gimli","read","UnitOffset"],"kind":"struct"},"2:21782:7524":{"crate_id":2,"path":["core","num","dec2flt","common","BiasedFp"],"kind":"struct"},"6:1680:6711":{"crate_id":6,"path":["libc","unix","linux_like","arphdr"],"kind":"struct"},"17:13211:5851":{"crate_id":17,"path":["object","pe","ImageAuxSymbolWeak"],"kind":"struct"},"2:45760:7808":{"crate_id":2,"path":["core","core_arch","simd","u8x16"],"kind":"struct"},"16:154:4860":{"crate_id":16,"path":["gimli","read","util","ArrayVec"],"kind":"struct"},"1:7699:8439":{"crate_id":1,"path":["std","collections","hash","map","DefaultHasher"],"kind":"struct"},"2:2696:109":{"crate_id":2,"path":["core","marker","Copy"],"kind":"trait"},"17:8195:21196":{"crate_id":17,"path":["object","common","Architecture"],"kind":"enum"},"2:42411:68":{"crate_id":2,"path":["core","fmt","rt","Alignment"],"kind":"enum"},"5:1008:4872":{"crate_id":5,"path":["alloc","collections","binary_heap","drop","DropGuard"],"kind":"struct"},"11:1818:3258":{"crate_id":11,"path":["hashbrown","set","Iter"],"kind":"struct"},"2:44102:8428":{"crate_id":2,"path":["core","str","CharEscapeDefault"],"kind":"struct"},"24:2752:3456":{"crate_id":24,"path":["syn","token","Dyn"],"kind":"struct"},"24:5466:3243":{"crate_id":24,"path":["syn","ty","TypeParen"],"kind":"struct"},"2:30283:4295":{"crate_id":2,"path":["core","mem","transmutability","Assume"],"kind":"struct"},"2:39247:202":{"crate_id":2,"path":["core","ops","range","RangeTo"],"kind":"struct"},"5:4233:3258":{"crate_id":5,"path":["alloc","collections","vec_deque","iter","Iter"],"kind":"struct"},"18:574:5110":{"crate_id":18,"path":["memchr","memmem","twoway","Forward"],"kind":"struct"},"24:5337:3229":{"crate_id":24,"path":["syn","path","ParenthesizedGenericArguments"],"kind":"struct"},"2:45636:7803":{"crate_id":2,"path":["core","core_arch","simd","i16x4"],"kind":"struct"},"17:11422:5405":{"crate_id":17,"path":["object","elf","Syminfo64"],"kind":"struct"},"17:10465:21359":{"crate_id":17,"path":["object","read","pe","section","PeSegment"],"kind":"struct"},"10:44:6442":{"crate_id":10,"path":["adler","Adler32"],"kind":"struct"},"16:2337:6057":{"crate_id":16,"path":["gimli","common","LineEncoding"],"kind":"struct"},"1:11337:4978":{"crate_id":1,"path":["std","sys_common","net","LookupHost"],"kind":"struct"},"11:1538:20217":{"crate_id":11,"path":["hashbrown","rustc_entry","RustcVacantEntry"],"kind":"struct"},"16:7016:8241":{"crate_id":16,"path":["gimli","read","lookup","DebugLookup"],"kind":"struct"},"1:2890:210":{"crate_id":1,"path":["std","io","error","Result"],"kind":"typedef"},"2:2509:74":{"crate_id":2,"path":["core","convert","AsMut"],"kind":"trait"},"1:2892:128":{"crate_id":1,"path":["std","io","error","Error"],"kind":"struct"},"17:12510:5627":{"crate_id":17,"path":["object","macho","IdentCommand"],"kind":"struct"},"5:3668:4872":{"crate_id":5,"path":["alloc","collections","linked_list","drop","DropGuard"],"kind":"struct"},"21:2658:3276":{"crate_id":21,"path":["proc_macro","LexError"],"kind":"struct"},"1:10657:9130":{"crate_id":1,"path":["std","sys","unix","fd","FileDesc"],"kind":"struct"},"6:6743:7399":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user_regs_struct"],"kind":"struct"},"17:1787:21265":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbolIterator"],"kind":"struct"},"2:6772:3300":{"crate_id":2,"path":["core","iter","range","Step"],"kind":"trait"},"17:9721:21262":{"crate_id":17,"path":["object","read","elf","section","ElfSectionIterator"],"kind":"struct"},"9:502:6501":{"crate_id":9,"path":["miniz_oxide","StreamResult"],"kind":"struct"},"1:10721:130":{"crate_id":1,"path":["std","sys","unix","fs","FileType"],"kind":"struct"},"2:22271:175":{"crate_id":2,"path":["core","num","nonzero","NonZeroU16"],"kind":"struct"},"17:12158:5550":{"crate_id":17,"path":["object","macho","RoutinesCommand64"],"kind":"struct"},"1:1572:4547":{"crate_id":1,"path":["std","collections","hash","set","ExtractIf"],"kind":"struct"},"6:5050:7096":{"crate_id":6,"path":["libc","unix","linux_like","linux","hwtstamp_config"],"kind":"struct"},"15:198:20236":{"crate_id":15,"path":["addr2line","LocationRangeUnitIter"],"kind":"struct"},"2:44003:8423":{"crate_id":2,"path":["core","str","lossy","Utf8Chunks"],"kind":"struct"},"2:3514:4549":{"crate_id":2,"path":["core","array","drain","Drain"],"kind":"struct"},"2:45858:7817":{"crate_id":2,"path":["core","core_arch","simd","u64x2"],"kind":"struct"},"2:43389:8312":{"crate_id":2,"path":["core","str","iter","RSplit"],"kind":"struct"},"6:1568:6635":{"crate_id":6,"path":["libc","unix","linux_like","fd_set"],"kind":"struct"},"16:5847:8152":{"crate_id":16,"path":["gimli","read","cfi","PartialFrameDescriptionEntry"],"kind":"struct"},"5:779:4875":{"crate_id":5,"path":["alloc","collections","binary_heap","PeekMut"],"kind":"struct"},"17:10681:8117":{"crate_id":17,"path":["object","read","pe","resource","ResourceDirectoryTable"],"kind":"struct"},"2:8254:3740":{"crate_id":2,"path":["core","panic","unwind_safe","RefUnwindSafe"],"kind":"trait"},"1:5949:206":{"crate_id":1,"path":["std","sync","mpmc","counter","Receiver"],"kind":"struct"},"6:653:15177":{"crate_id":6,"path":["libc","unix","linux_like","timezone"],"kind":"enum"},"18:719:5129":{"crate_id":18,"path":["memchr","memmem","NeedleInfo"],"kind":"struct"},"24:3887:3489":{"crate_id":24,"path":["syn","token","Comma"],"kind":"struct"},"17:9028:21220":{"crate_id":17,"path":["object","read","any","SegmentIterator"],"kind":"struct"},"1:3962:9072":{"crate_id":1,"path":["std","os","unix","fs","MetadataExt"],"kind":"trait"},"2:12312:151":{"crate_id":2,"path":["core","future","into_future","IntoFuture"],"kind":"trait"},"1:10079:2195":{"crate_id":1,"path":["std","sys","unix","os_str","Slice"],"kind":"struct"},"16:2594:6073":{"crate_id":16,"path":["gimli","common","DebugLocListsIndex"],"kind":"struct"},"18:481:8078":{"crate_id":18,"path":["memchr","cow","CowBytes"],"kind":"struct"},"2:40077:8343":{"crate_id":2,"path":["core","char","ToLowercase"],"kind":"struct"},"24:2786:1845":{"crate_id":24,"path":["syn","token","Enum"],"kind":"struct"},"1:11940:1555":{"crate_id":1,"path":["std","usize"],"kind":"primitive"},"2:2800:5088":{"crate_id":2,"path":["core","ops","arith","RemAssign"],"kind":"trait"},"1:4868:9126":{"crate_id":1,"path":["std","os","net","linux_ext","addr","SocketAddrExt"],"kind":"trait"},"16:7697:6096":{"crate_id":16,"path":["gimli","read","str","DebugLineStr"],"kind":"struct"},"1:1821:8959":{"crate_id":1,"path":["std","env","SplitPaths"],"kind":"struct"},"6:7608:7510":{"crate_id":6,"path":["libc","unix","align","in6_addr"],"kind":"struct"},"2:43315:7782":{"crate_id":2,"path":["core","str","error","Utf8Error"],"kind":"struct"},"24:5503:2246":{"crate_id":24,"path":["syn","ty","ReturnType"],"kind":"enum"},"6:4809:6970":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_filter"],"kind":"struct"},"24:2531:3448":{"crate_id":24,"path":["syn","token","Abstract"],"kind":"struct"},"17:9228:37126":{"crate_id":17,"path":["object","read","any","SymbolTableInternal"],"kind":"enum"},"16:5305:6145":{"crate_id":16,"path":["gimli","constants","DwOp"],"kind":"struct"},"6:6155:7306":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","msqid_ds"],"kind":"struct"},"5:3201:8281":{"crate_id":5,"path":["alloc","collections","btree","set","SymmetricDifference"],"kind":"struct"},"17:11372:5396":{"crate_id":17,"path":["object","elf","Sym32"],"kind":"struct"},"1:676:8929":{"crate_id":1,"path":["std","backtrace","LazilyResolvedCapture"],"kind":"struct"},"2:39313:3290":{"crate_id":2,"path":["core","ops","range","Bound"],"kind":"enum"},"9:352:20150":{"crate_id":9,"path":["miniz_oxide","inflate","TINFLStatus"],"kind":"enum"},"24:4114:3504":{"crate_id":24,"path":["syn","token","Ne"],"kind":"struct"},"5:2138:8283":{"crate_id":5,"path":["alloc","collections","btree","merge_iter","MergeIterInner"],"kind":"struct"},"24:4556:1837":{"crate_id":24,"path":["syn","derive","Data"],"kind":"enum"},"21:479:4859":{"crate_id":21,"path":["proc_macro","bridge","server","RunningSameThreadGuard"],"kind":"struct"},"24:2548:3449":{"crate_id":24,"path":["syn","token","As"],"kind":"struct"},"21:217:8506":{"crate_id":21,"path":["proc_macro","bridge","fxhash","FxHasher"],"kind":"struct"},"24:4394:3524":{"crate_id":24,"path":["syn","token","Star"],"kind":"struct"},"16:6327:8193":{"crate_id":16,"path":["gimli","read","abbrev","Abbreviations"],"kind":"struct"},"2:41487:3737":{"crate_id":2,"path":["core","panic","location","Location"],"kind":"struct"},"1:5716:9167":{"crate_id":1,"path":["std","sync","barrier","BarrierWaitResult"],"kind":"struct"},"17:0:3009":{"crate_id":17,"path":["object"],"kind":"module"},"24:3279:1869":{"crate_id":24,"path":["syn","token","Union"],"kind":"struct"},"2:2780:5094":{"crate_id":2,"path":["core","ops","arith","Neg"],"kind":"trait"},"2:41251:7755":{"crate_id":2,"path":["core","net","ip_addr","Ipv6Addr"],"kind":"struct"},"1:8829:3257":{"crate_id":1,"path":["std","sync","mpsc","IntoIter"],"kind":"struct"},"2:5590:3329":{"crate_id":2,"path":["core","iter","adapters","flatten","Flatten"],"kind":"struct"},"16:2642:6075":{"crate_id":16,"path":["gimli","common","DebugMacroOffset"],"kind":"struct"},"6:5067:7100":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_txtime"],"kind":"struct"},"24:3800:3483":{"crate_id":24,"path":["syn","token","AndAnd"],"kind":"struct"},"24:4789:3181":{"crate_id":24,"path":["syn","expr","ExprBinary"],"kind":"struct"},"24:4892:3204":{"crate_id":24,"path":["syn","expr","ExprReturn"],"kind":"struct"},"2:4011:33367":{"crate_id":2,"path":["core","asserting","TryCaptureWithDebug"],"kind":"struct"},"24:5332:2288":{"crate_id":24,"path":["syn","path","Constraint"],"kind":"struct"},"2:40332:8353":{"crate_id":2,"path":["core","iter","adapters","flatten","FlattenCompat"],"kind":"struct"},"4:0:3000":{"crate_id":4,"path":["rustc_std_workspace_core"],"kind":"module"},"16:4904:6138":{"crate_id":16,"path":["gimli","constants","DwIdx"],"kind":"struct"},"17:10649:8115":{"crate_id":17,"path":["object","read","pe","relocation","RelocationIterator"],"kind":"struct"},"17:12019:5263":{"crate_id":17,"path":["object","macho","Dylib"],"kind":"struct"},"17:11446:5409":{"crate_id":17,"path":["object","elf","Rela32"],"kind":"struct"},"16:7529:6103":{"crate_id":16,"path":["gimli","read","rnglists","DebugRanges"],"kind":"struct"},"6:6725:7388":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_fpstate"],"kind":"struct"},"22:735:2507":{"crate_id":22,"path":["proc_macro2","fallback","Literal"],"kind":"struct"},"17:12388:5601":{"crate_id":17,"path":["object","macho","EncryptionInfoCommand32"],"kind":"struct"},"2:43688:8341":{"crate_id":2,"path":["core","str","iter","EscapeUnicode"],"kind":"struct"},"24:4225:3512":{"crate_id":24,"path":["syn","token","Plus"],"kind":"struct"},"24:4300:3517":{"crate_id":24,"path":["syn","token","Semi"],"kind":"struct"},"24:1937:3257":{"crate_id":24,"path":["syn","punctuated","IntoIter"],"kind":"struct"},"6:1695:6720":{"crate_id":6,"path":["libc","unix","linux_like","epoll_event"],"kind":"struct"},"6:6840:7459":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ptrace_rseq_configuration"],"kind":"struct"},"1:911:4547":{"crate_id":1,"path":["std","collections","hash","map","ExtractIf"],"kind":"struct"},"1:2376:9006":{"crate_id":1,"path":["std","fs","read_dir"],"kind":"function"},"17:10080:21349":{"crate_id":17,"path":["object","read","macho","file","MachOComdat"],"kind":"struct"},"17:386:21207":{"crate_id":17,"path":["object","read","any","Segment"],"kind":"struct"},"24:5462:3241":{"crate_id":24,"path":["syn","ty","TypeMacro"],"kind":"struct"},"2:11428:8382":{"crate_id":2,"path":["core","str","iter","SplitInternal"],"kind":"struct"},"6:1505:6599":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreqn"],"kind":"struct"},"16:6876:6097":{"crate_id":16,"path":["gimli","read","loclists","DebugLoc"],"kind":"struct"},"17:13612:5968":{"crate_id":17,"path":["object","pe","ImageHotPatchInfo"],"kind":"struct"},"2:2784:3286":{"crate_id":2,"path":["core","ops","arith","AddAssign"],"kind":"trait"},"17:8420:21213":{"crate_id":17,"path":["object","common","SymbolScope"],"kind":"enum"},"17:12536:5629":{"crate_id":17,"path":["object","macho","EntryPointCommand"],"kind":"struct"},"6:4972:7058":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_alg"],"kind":"struct"},"24:3858:3487":{"crate_id":24,"path":["syn","token","CaretEq"],"kind":"struct"},"17:11234:5362":{"crate_id":17,"path":["object","elf","FileHeader32"],"kind":"struct"},"1:3948:9070":{"crate_id":1,"path":["std","os","unix","fs","PermissionsExt"],"kind":"trait"},"21:2749:1901":{"crate_id":21,"path":["proc_macro","TokenTree"],"kind":"enum"},"17:9469:21242":{"crate_id":17,"path":["object","read","archive","ArchiveMember"],"kind":"struct"},"2:1916:4459":{"crate_id":2,"path":["core","ptr","unique","Unique"],"kind":"struct"},"6:4786:6961":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_j1939"],"kind":"struct"},"2:39352:7620":{"crate_id":2,"path":["core","any","TypeId"],"kind":"struct"},"24:2922:3464":{"crate_id":24,"path":["syn","token","Let"],"kind":"struct"},"2:45695:7806":{"crate_id":2,"path":["core","core_arch","simd","f32x2"],"kind":"struct"},"6:4625:6899":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Phdr"],"kind":"struct"},"1:10971:4974":{"crate_id":1,"path":["std","sys","unix","process","process_inner","posix_spawn","PosixSpawnFileActions"],"kind":"struct"},"11:1822:3257":{"crate_id":11,"path":["hashbrown","set","IntoIter"],"kind":"struct"},"2:46125:7825":{"crate_id":2,"path":["core","core_arch","simd","m8x16"],"kind":"struct"},"1:7285:26119":{"crate_id":1,"path":["std","panicking","Hook"],"kind":"enum"},"24:5002:2446":{"crate_id":24,"path":["syn","generics","TypeParam"],"kind":"struct"},"1:2366:9001":{"crate_id":1,"path":["std","fs","canonicalize"],"kind":"function"},"2:5472:4896":{"crate_id":2,"path":["core","iter","adapters","filter_map","next_chunk","Guard"],"kind":"struct"},"2:22535:172":{"crate_id":2,"path":["core","num","nonzero","NonZeroI64"],"kind":"struct"},"2:2522:237":{"crate_id":2,"path":["core","convert","TryFrom"],"kind":"trait"},"16:2931:20280":{"crate_id":16,"path":["gimli","common","UnitSectionOffset"],"kind":"enum"},"5:3799:4547":{"crate_id":5,"path":["alloc","collections","linked_list","ExtractIf"],"kind":"struct"},"22:792:8072":{"crate_id":22,"path":["proc_macro2","imp","DeferredTokenStream"],"kind":"struct"},"17:975:21250":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbolIterator"],"kind":"struct"},"2:40294:3336":{"crate_id":2,"path":["core","iter","adapters","cycle","Cycle"],"kind":"struct"},"14:40:1832":{"crate_id":14,"path":["rustc_demangle","v0","Ident"],"kind":"struct"},"2:21850:32746":{"crate_id":2,"path":["core","num","dec2flt","FloatErrorKind"],"kind":"enum"},"24:2650:99":{"crate_id":24,"path":["syn","token","Break"],"kind":"struct"},"17:13469:5917":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation64"],"kind":"struct"},"24:4997:2487":{"crate_id":24,"path":["syn","generics","LifetimeParam"],"kind":"struct"},"18:548:141":{"crate_id":18,"path":["memchr","memmem","rabinkarp","Hash"],"kind":"struct"},"24:2164:9014":{"crate_id":24,"path":["syn","sealed","lookahead","Sealed"],"kind":"trait"},"24:4550:1680":{"crate_id":24,"path":["syn","derive","DeriveInput"],"kind":"struct"},"2:43935:8413":{"crate_id":2,"path":["core","str","pattern","StrSearcher"],"kind":"struct"},"17:10452:21360":{"crate_id":17,"path":["object","read","pe","section","PeSegmentIterator"],"kind":"struct"},"2:43329:8378":{"crate_id":2,"path":["core","str","error","ParseBoolError"],"kind":"struct"},"17:9796:5252":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbol"],"kind":"struct"},"1:11922:1369":{"crate_id":1,"path":["std","slice"],"kind":"primitive"},"17:13194:5846":{"crate_id":17,"path":["object","pe","ImageAuxSymbolFunctionBeginEnd"],"kind":"struct"},"2:43187:14359":{"crate_id":2,"path":["core","slice","iter","ChunksExactMut"],"kind":"struct"},"1:9091:7990":{"crate_id":1,"path":["std","time","SystemTime"],"kind":"struct"},"14:160:8839":{"crate_id":14,"path":["rustc_demangle","Demangle"],"kind":"struct"},"1:10445:9045":{"crate_id":1,"path":["std","sys","unix","stdio","Stdin"],"kind":"struct"},"5:4073:3262":{"crate_id":5,"path":["alloc","collections","vec_deque","iter_mut","IterMut"],"kind":"struct"},"24:4880:3201":{"crate_id":24,"path":["syn","expr","ExprRange"],"kind":"struct"},"17:9839:21258":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdat"],"kind":"struct"},"5:258:4872":{"crate_id":5,"path":["alloc","boxed","thin","drop","DropGuard"],"kind":"struct"},"2:4390:3392":{"crate_id":2,"path":["core","cell","RefMut"],"kind":"struct"},"17:10303:21313":{"crate_id":17,"path":["object","read","macho","section","MachOSection"],"kind":"struct"},"6:474:1822":{"crate_id":6,"path":["libc","unix","group"],"kind":"struct"},"24:2871:3461":{"crate_id":24,"path":["syn","token","If"],"kind":"struct"},"17:10402:21372":{"crate_id":17,"path":["object","read","pe","file","PeFile"],"kind":"struct"},"1:953:8938":{"crate_id":1,"path":["std","collections","hash","map","RawVacantEntryMut"],"kind":"struct"},"1:5522:7278":{"crate_id":1,"path":["std","process","exit"],"kind":"function"},"1:2620:9040":{"crate_id":1,"path":["std","io","buffered","linewriter","LineWriter"],"kind":"struct"},"24:4242:3513":{"crate_id":24,"path":["syn","token","PlusEq"],"kind":"struct"},"1:10676:8453":{"crate_id":1,"path":["std","sys","unix","fs","FileAttr"],"kind":"struct"},"5:5059:4902":{"crate_id":5,"path":["alloc","rc","Weak"],"kind":"struct"},"16:2524:6070":{"crate_id":16,"path":["gimli","common","DebugLineStrOffset"],"kind":"struct"},"2:8679:86":{"crate_id":2,"path":["core","sync","atomic","AtomicPtr"],"kind":"struct"},"2:40467:3349":{"crate_id":2,"path":["core","iter","adapters","take","Take"],"kind":"struct"},"1:11927:641":{"crate_id":1,"path":["std","f32"],"kind":"primitive"},"17:10989:5302":{"crate_id":17,"path":["object","read","Export"],"kind":"struct"},"9:388:20136":{"crate_id":9,"path":["miniz_oxide","MZFlush"],"kind":"enum"},"24:1910:3256":{"crate_id":24,"path":["syn","punctuated","IntoPairs"],"kind":"struct"},"17:12059:5537":{"crate_id":17,"path":["object","macho","SubClientCommand"],"kind":"struct"},"1:3378:4896":{"crate_id":1,"path":["std","io","Guard"],"kind":"struct"},"24:4423:3526":{"crate_id":24,"path":["syn","token","Tilde"],"kind":"struct"},"1:3233:9048":{"crate_id":1,"path":["std","io","stdio","StdoutLock"],"kind":"struct"},"2:4023:103":{"crate_id":2,"path":["core","asserting","Capture"],"kind":"struct"},"17:9822:21270":{"crate_id":17,"path":["object","read","elf","relocation","RelocationSections"],"kind":"struct"},"2:7244:121":{"crate_id":2,"path":["core","iter","traits","double_ended","DoubleEndedIterator"],"kind":"trait"},"2:9530:4927":{"crate_id":2,"path":["core","slice","sort","InsertionHole"],"kind":"struct"},"17:13324:5877":{"crate_id":17,"path":["object","pe","ImageThunkData32"],"kind":"struct"},"17:10840:5329":{"crate_id":17,"path":["object","read","SymbolIndex"],"kind":"struct"},"1:11064:7786":{"crate_id":1,"path":["std","sys","unix","time","Nanoseconds"],"kind":"struct"},"24:4126:3505":{"crate_id":24,"path":["syn","token","Not"],"kind":"struct"},"1:8237:8444":{"crate_id":1,"path":["std","os","unix","net","addr","SocketAddr"],"kind":"struct"},"11:1611:4869":{"crate_id":11,"path":["hashbrown","scopeguard","ScopeGuard"],"kind":"struct"},"24:2684:108":{"crate_id":24,"path":["syn","token","Continue"],"kind":"struct"},"1:11934:1501":{"crate_id":1,"path":["std","u8"],"kind":"primitive"},"17:9523:21248":{"crate_id":17,"path":["object","read","coff","section","CoffSegment"],"kind":"struct"},"24:53:1908":{"crate_id":24,"path":["syn","token"],"kind":"module"},"17:13015:5802":{"crate_id":17,"path":["object","pe","ImageNtHeaders64"],"kind":"struct"},"13:0:2999":{"crate_id":13,"path":["std_detect"],"kind":"module"},"5:1285:8940":{"crate_id":5,"path":["alloc","collections","btree","map","entry","OccupiedEntry"],"kind":"struct"},"24:4015:3497":{"crate_id":24,"path":["syn","token","Ge"],"kind":"struct"},"6:7545:7496":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_mutex_t"],"kind":"struct"},"6:5024:7079":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_ifr_ifru"],"kind":"union"},"11:1501:20215":{"crate_id":11,"path":["hashbrown","rustc_entry","RustcEntry"],"kind":"enum"},"16:7467:8249":{"crate_id":16,"path":["gimli","read","pubnames","PubNamesEntry"],"kind":"struct"},"2:20890:4484":{"crate_id":2,"path":["core","core_simd","elements","mut_ptr","SimdMutPtr","from_exposed_addr"],"kind":"foreign_type"},"16:6474:6107":{"crate_id":16,"path":["gimli","read","index","DebugTuIndex"],"kind":"struct"},"6:4991:7066":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_user_dev"],"kind":"struct"},"24:3160:2554":{"crate_id":24,"path":["syn","token","Static"],"kind":"struct"},"1:8170:2785":{"crate_id":1,"path":["std","io","Bytes"],"kind":"struct"},"2:20949:9213":{"crate_id":2,"path":["core","core_simd","eq","SimdPartialEq"],"kind":"trait"},"2:9163:3410":{"crate_id":2,"path":["core","fmt","LowerExp"],"kind":"trait"},"22:350:3276":{"crate_id":22,"path":["proc_macro2","imp","LexError"],"kind":"enum"},"6:5766:7134":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","statx_timestamp"],"kind":"struct"},"2:43823:8410":{"crate_id":2,"path":["core","str","pattern","CharArrayRefSearcher"],"kind":"struct"},"1:1565:3257":{"crate_id":1,"path":["std","collections","hash","set","IntoIter"],"kind":"struct"},"2:3157:135":{"crate_id":2,"path":["core","ops","try_trait","FromResidual"],"kind":"trait"},"2:20995:9215":{"crate_id":2,"path":["core","core_simd","lane_count","LaneCount"],"kind":"struct"},"2:9149:112":{"crate_id":2,"path":["core","fmt","macros","Debug"],"kind":"proc_derive"},"24:2514:3527":{"crate_id":24,"path":["syn","token","Underscore"],"kind":"struct"},"1:8759:9153":{"crate_id":1,"path":["std","process","CommandArgs"],"kind":"struct"},"16:5616:8129":{"crate_id":16,"path":["gimli","read","cfi","ParsedEhFrameHdr"],"kind":"struct"},"2:43983:8422":{"crate_id":2,"path":["core","str","lossy","Utf8Chunk"],"kind":"struct"},"24:4254:3514":{"crate_id":24,"path":["syn","token","Pound"],"kind":"struct"},"2:21963:7542":{"crate_id":2,"path":["core","num","error","TryFromIntError"],"kind":"struct"},"2:46620:7849":{"crate_id":2,"path":["core","core_arch","simd","i16x16"],"kind":"struct"},"16:4872:6137":{"crate_id":16,"path":["gimli","constants","DwDsc"],"kind":"struct"},"6:5881:7187":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_mmap_req"],"kind":"struct"},"17:12282:5587":{"crate_id":17,"path":["object","macho","DylibReference"],"kind":"struct"},"2:3999:33364":{"crate_id":2,"path":["core","asserting","TryCaptureWithoutDebug"],"kind":"struct"},"17:13659:5986":{"crate_id":17,"path":["object","pe","ImageArm64RuntimeFunctionEntry"],"kind":"struct"},"16:7411:6252":{"crate_id":16,"path":["gimli","read","op","Expression"],"kind":"struct"},"2:43645:8398":{"crate_id":2,"path":["core","str","iter","SplitWhitespace"],"kind":"struct"},"16:6575:21145":{"crate_id":16,"path":["gimli","read","line","LineInstruction"],"kind":"enum"},"2:40204:4920":{"crate_id":2,"path":["core","ffi","VaListImpl"],"kind":"struct"},"6:4823:6975":{"crate_id":6,"path":["libc","unix","linux_like","linux","seccomp_data"],"kind":"struct"},"2:1544:4896":{"crate_id":2,"path":["core","mem","maybe_uninit","write_slice_cloned","Guard"],"kind":"struct"},"2:41453:1880":{"crate_id":2,"path":["core","option","Item"],"kind":"struct"},"24:103:4175":{"crate_id":24,"path":["syn","token","CustomToken"],"kind":"trait"},"2:2898:117":{"crate_id":2,"path":["core","ops","deref","Deref"],"kind":"trait"},"6:6035:7269":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ptrace_syscall_info"],"kind":"struct"},"6:4412:6820":{"crate_id":6,"path":["libc","unix","linux_like","linux","sembuf"],"kind":"struct"},"1:2350:8997":{"crate_id":1,"path":["std","fs","symlink_metadata"],"kind":"function"},"1:1931:654":{"crate_id":1,"path":["std","ffi"],"kind":"module"},"18:727:5132":{"crate_id":18,"path":["memchr","memmem","SearcherConfig"],"kind":"struct"},"1:1589:8281":{"crate_id":1,"path":["std","collections","hash","set","SymmetricDifference"],"kind":"struct"},"6:541:6561":{"crate_id":6,"path":["libc","unix","iovec"],"kind":"struct"},"2:12361:192":{"crate_id":2,"path":["core","future","pending","Pending"],"kind":"struct"},"22:766:3279":{"crate_id":22,"path":["proc_macro2","extra","DelimSpan"],"kind":"struct"},"5:6119:9305":{"crate_id":5,"path":["alloc","task","Wake"],"kind":"trait"},"24:1140:8043":{"crate_id":24,"path":["syn","lit","LitFloatRepr"],"kind":"struct"},"5:6371:3257":{"crate_id":5,"path":["alloc","vec","into_iter","IntoIter"],"kind":"struct"},"24:4484:3160":{"crate_id":24,"path":["syn","attr","AttrStyle"],"kind":"enum"},"6:4615:6898":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Sym"],"kind":"struct"},"18:0:3010":{"crate_id":18,"path":["memchr"],"kind":"module"},"17:12522:5628":{"crate_id":17,"path":["object","macho","FvmfileCommand"],"kind":"struct"},"11:2060:8941":{"crate_id":11,"path":["hashbrown","set","VacantEntry"],"kind":"struct"},"1:888:8278":{"crate_id":1,"path":["std","collections","hash","map","Values"],"kind":"struct"},"17:13516:5930":{"crate_id":17,"path":["object","pe","ImageLoadConfigDirectory32"],"kind":"struct"},"5:3734:8943":{"crate_id":5,"path":["alloc","collections","linked_list","CursorMut"],"kind":"struct"},"17:9876:5108":{"crate_id":17,"path":["object","read","elf","note","Note"],"kind":"struct"},"1:6211:4950":{"crate_id":1,"path":["std","sync","mpmc","Sender"],"kind":"struct"},"6:4586:6896":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Ehdr"],"kind":"struct"},"2:46226:7828":{"crate_id":2,"path":["core","core_arch","simd","m64x2"],"kind":"struct"},"2:12609:4463":{"crate_id":2,"path":["core","alloc","Allocator"],"kind":"trait"},"16:2572:6072":{"crate_id":16,"path":["gimli","common","DebugLocListsBase"],"kind":"struct"},"2:40375:3343":{"crate_id":2,"path":["core","iter","adapters","map","Map"],"kind":"struct"},"17:11011:5335":{"crate_id":17,"path":["object","read","CodeView"],"kind":"struct"},"24:3812:3484":{"crate_id":24,"path":["syn","token","AndEq"],"kind":"struct"},"2:47709:7897":{"crate_id":2,"path":["core","core_arch","x86","__m256i"],"kind":"struct"},"2:2981:2305":{"crate_id":2,"path":["core","ops","index","Index"],"kind":"trait"},"2:21343:9218":{"crate_id":2,"path":["core","core_simd","ord","SimdPartialOrd"],"kind":"trait"},"17:12046:5535":{"crate_id":17,"path":["object","macho","SubFrameworkCommand"],"kind":"struct"},"17:12293:5589":{"crate_id":17,"path":["object","macho","TwolevelHintsCommand"],"kind":"struct"},"5:7334:4547":{"crate_id":5,"path":["alloc","vec","extract_if","ExtractIf"],"kind":"struct"},"6:4567:6895":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Ehdr"],"kind":"struct"},"2:21094:9014":{"crate_id":2,"path":["core","core_simd","masks","to_bitmask","sealed","Sealed"],"kind":"trait"},"2:3152:234":{"crate_id":2,"path":["core","ops","try_trait","Try"],"kind":"trait"},"1:6156:8561":{"crate_id":1,"path":["std","sync","mpmc","zero","ZeroToken"],"kind":"struct"},"2:2515:133":{"crate_id":2,"path":["core","convert","From"],"kind":"trait"},"16:3446:6114":{"crate_id":16,"path":["gimli","arch","RiscV"],"kind":"struct"},"24:3870:3488":{"crate_id":24,"path":["syn","token","Colon"],"kind":"struct"},"2:11465:8387":{"crate_id":2,"path":["core","str","iter","SplitNInternal"],"kind":"struct"},"6:547:6564":{"crate_id":6,"path":["libc","unix","pollfd"],"kind":"struct"},"17:12894:5755":{"crate_id":17,"path":["object","pe","MaskedRichHeaderEntry"],"kind":"struct"},"0:930:1690":{"crate_id":0,"path":["serde_derive","Serialize"],"kind":"proc_derive"},"17:12646:5650":{"crate_id":17,"path":["object","macho","ScatteredRelocationInfo"],"kind":"struct"},"16:4728:6132":{"crate_id":16,"path":["gimli","constants","DwAddr"],"kind":"struct"},"1:8525:8449":{"crate_id":1,"path":["std","path","StripPrefixError"],"kind":"struct"},"1:11883:8564":{"crate_id":1,"path":["std","backtrace_rs","symbolize","gimli","Cache"],"kind":"struct"},"11:2194:6439":{"crate_id":11,"path":["hashbrown","raw","TableLayout"],"kind":"struct"},"24:2565:3450":{"crate_id":24,"path":["syn","token","Async"],"kind":"struct"},"17:12550:5632":{"crate_id":17,"path":["object","macho","SourceVersionCommand"],"kind":"struct"},"16:6506:8210":{"crate_id":16,"path":["gimli","read","index","UnitIndexSectionIterator"],"kind":"struct"},"17:12178:5551":{"crate_id":17,"path":["object","macho","SymtabCommand"],"kind":"struct"},"5:1511:198":{"crate_id":5,"path":["alloc","collections","btree","map","Range"],"kind":"struct"},"2:7595:3319":{"crate_id":2,"path":["core","iter","traits","marker","TrustedLen"],"kind":"trait"},"17:11615:5450":{"crate_id":17,"path":["object","elf","NoteHeader32"],"kind":"struct"},"18:96:25118":{"crate_id":18,"path":["memchr","memchr","iter","Memchr2"],"kind":"struct"},"1:7961:28261":{"crate_id":1,"path":["std","io","error","SimpleMessage"],"kind":"struct"},"16:8090:8263":{"crate_id":16,"path":["gimli","read","unit","EntriesCursor"],"kind":"struct"},"6:4928:7035":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_nxtinfo"],"kind":"struct"},"24:2218:9014":{"crate_id":24,"path":["syn","spanned","private","Sealed"],"kind":"trait"},"0:931:1698":{"crate_id":0,"path":["serde_derive","Deserialize"],"kind":"proc_derive"},"5:775:96":{"crate_id":5,"path":["alloc","collections","binary_heap","BinaryHeap"],"kind":"struct"},"18:636:5128":{"crate_id":18,"path":["memchr","memmem","twoway","ApproximateByteSet"],"kind":"struct"},"2:43357:2785":{"crate_id":2,"path":["core","str","iter","Bytes"],"kind":"struct"},"5:6298:4872":{"crate_id":5,"path":["alloc","vec","drain","drop","DropGuard"],"kind":"struct"},"5:1439:3257":{"crate_id":5,"path":["alloc","collections","btree","map","IntoIter"],"kind":"struct"},"11:2180:6436":{"crate_id":11,"path":["hashbrown","raw","bitmask","BitMaskIter"],"kind":"struct"},"17:8443:21214":{"crate_id":17,"path":["object","common","RelocationKind"],"kind":"enum"},"5:2046:8943":{"crate_id":5,"path":["alloc","collections","btree","map","CursorMut"],"kind":"struct"},"11:2033:8248":{"crate_id":11,"path":["hashbrown","set","Entry"],"kind":"enum"},"24:2228:8044":{"crate_id":24,"path":["syn","thread","ThreadBound"],"kind":"struct"},"6:4937:7041":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_prinfo"],"kind":"struct"},"2:40214:8992":{"crate_id":2,"path":["core","ffi","VaList"],"kind":"struct"},"24:4085:3502":{"crate_id":24,"path":["syn","token","Minus"],"kind":"struct"},"17:9453:21241":{"crate_id":17,"path":["object","read","archive","MemberHeader"],"kind":"enum"},"17:11459:5411":{"crate_id":17,"path":["object","elf","Rel64"],"kind":"struct"},"2:10262:8389":{"crate_id":2,"path":["core","slice","iter","RSplitN"],"kind":"struct"},"6:5876:7186":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_pktinfo"],"kind":"struct"},"21:2623:8077":{"crate_id":21,"path":["proc_macro","diagnostic","Children"],"kind":"struct"},"16:7635:6258":{"crate_id":16,"path":["gimli","read","rnglists","RawRange"],"kind":"struct"},"2:2856:5093":{"crate_id":2,"path":["core","ops","bit","ShrAssign"],"kind":"trait"},"1:11174:4976":{"crate_id":1,"path":["std","sys_common","once","futex","CompletionGuard"],"kind":"struct"},"17:10761:21228":{"crate_id":17,"path":["object","read","FileKind"],"kind":"enum"},"22:772:25139":{"crate_id":22,"path":["proc_macro2","extra","DelimSpanEnum"],"kind":"enum"},"2:21454:33257":{"crate_id":2,"path":["core","core_simd","vector","splat","Splat"],"kind":"struct"},"16:6336:8194":{"crate_id":16,"path":["gimli","read","abbrev","Abbreviation"],"kind":"struct"},"17:11993:5526":{"crate_id":17,"path":["object","macho","Fvmlib"],"kind":"struct"},"1:8315:7959":{"crate_id":1,"path":["std","os","fd","owned","BorrowedFd"],"kind":"struct"},"1:6032:4953":{"crate_id":1,"path":["std","sync","mpmc","list","Channel"],"kind":"struct"},"2:4:1015":{"crate_id":2,"path":["core","panic"],"kind":"macro"},"2:6725:33368":{"crate_id":2,"path":["core","iter","adapters","GenericShunt"],"kind":"struct"},"17:10068:21348":{"crate_id":17,"path":["object","read","macho","file","MachOComdatIterator"],"kind":"struct"},"22:112:37299":{"crate_id":22,"path":["proc_macro2","rcvec","RcVecBuilder"],"kind":"struct"},"17:242:37127":{"crate_id":17,"path":["object","read","util","DebugByte"],"kind":"struct"},"17:8909:2785":{"crate_id":17,"path":["object","read","util","Bytes"],"kind":"struct"},"5:5509:4553":{"crate_id":5,"path":["alloc","string","retain","SetLenOnDrop"],"kind":"struct"},"5:2687:7515":{"crate_id":5,"path":["alloc","collections","btree","node","Handle"],"kind":"struct"},"11:1012:8941":{"crate_id":11,"path":["hashbrown","map","VacantEntry"],"kind":"struct"},"16:3585:6115":{"crate_id":16,"path":["gimli","arch","X86"],"kind":"struct"},"17:9322:37108":{"crate_id":17,"path":["object","read","any","DynamicRelocationIteratorInternal"],"kind":"enum"},"21:184:4196":{"crate_id":21,"path":["proc_macro","bridge","closure","Closure"],"kind":"struct"},"17:10516:5297":{"crate_id":17,"path":["object","read","pe","data_directory","DataDirectories"],"kind":"struct"},"7:32:20121":{"crate_id":7,"path":["unwind","libunwind","_Unwind_Reason_Code"],"kind":"enum"},"2:43341:8379":{"crate_id":2,"path":["core","str","iter","Chars"],"kind":"struct"},"22:699:3276":{"crate_id":22,"path":["proc_macro2","fallback","LexError"],"kind":"struct"},"17:10798:21229":{"crate_id":17,"path":["object","read","ObjectKind"],"kind":"enum"},"2:9989:3262":{"crate_id":2,"path":["core","slice","iter","IterMut"],"kind":"struct"},"6:5993:7250":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","seminfo"],"kind":"struct"},"16:2830:6083":{"crate_id":16,"path":["gimli","common","DebugTypesOffset"],"kind":"struct"},"5:5736:4549":{"crate_id":5,"path":["alloc","string","Drain"],"kind":"struct"},"1:7867:119":{"crate_id":1,"path":["std","fs","DirBuilder"],"kind":"struct"},"16:6793:8231":{"crate_id":16,"path":["gimli","read","line","CompleteLineProgram"],"kind":"struct"},"1:7043:32213":{"crate_id":1,"path":["std","sys_common","wstr","WStrUnits"],"kind":"struct"},"16:7449:21152":{"crate_id":16,"path":["gimli","read","op","Evaluation"],"kind":"struct"},"24:2582:3451":{"crate_id":24,"path":["syn","token","Auto"],"kind":"struct"},"5:5840:4902":{"crate_id":5,"path":["alloc","sync","Weak"],"kind":"struct"},"2:39086:14408":{"crate_id":2,"path":["core","ops","control_flow","ControlFlow"],"kind":"enum"},"24:885:37487":{"crate_id":24,"path":["syn","generics","TypeParams"],"kind":"struct"},"5:7279:8847":{"crate_id":5,"path":["alloc","string","FromUtf16Error"],"kind":"struct"},"1:1846:8965":{"crate_id":1,"path":["std","env","ArgsOs"],"kind":"struct"},"1:8821:9179":{"crate_id":1,"path":["std","sync","mpsc","TryIter"],"kind":"struct"},"2:9157:3412":{"crate_id":2,"path":["core","fmt","LowerHex"],"kind":"trait"},"11:749:4549":{"crate_id":11,"path":["hashbrown","map","Drain"],"kind":"struct"},"6:62:14767":{"crate_id":6,"path":["libc","unix","DIR"],"kind":"enum"},"24:549:128":{"crate_id":24,"path":["syn","error","Error"],"kind":"struct"},"17:10545:5302":{"crate_id":17,"path":["object","read","pe","export","Export"],"kind":"struct"},"17:10092:21350":{"crate_id":17,"path":["object","read","macho","file","MachOComdatSectionIterator"],"kind":"struct"},"17:8718:5223":{"crate_id":17,"path":["object","endian","U32Bytes"],"kind":"struct"},"16:3030:6109":{"crate_id":16,"path":["gimli","common","DwoId"],"kind":"struct"},"2:44090:8425":{"crate_id":2,"path":["core","str","LinesMap"],"kind":"struct"},"24:1736:8868":{"crate_id":24,"path":["syn","print","TokensOrDefault"],"kind":"struct"},"2:43575:8394":{"crate_id":2,"path":["core","str","iter","Matches"],"kind":"struct"},"17:13101:5822":{"crate_id":17,"path":["object","pe","ImageSectionHeader"],"kind":"struct"},"24:2718:116":{"crate_id":24,"path":["syn","token","Default"],"kind":"struct"},"2:2741:3433":{"crate_id":2,"path":["core","marker","Unpin"],"kind":"trait"},"17:12959:5796":{"crate_id":17,"path":["object","pe","ImageRomOptionalHeader"],"kind":"struct"},"1:9906:8365":{"crate_id":1,"path":["std","sys","unix","net","Socket"],"kind":"struct"},"21:2401:2507":{"crate_id":21,"path":["proc_macro","bridge","Literal"],"kind":"struct"},"2:41529:4473":{"crate_id":2,"path":["core","panicking","AssertKind"],"kind":"enum"},"24:917:3216":{"crate_id":24,"path":["syn","generics","ImplGenerics"],"kind":"struct"},"1:7726:1988":{"crate_id":1,"path":["std","error","private","Internal"],"kind":"struct"},"5:7011:8294":{"crate_id":5,"path":["alloc","collections","binary_heap","IntoIterSorted"],"kind":"struct"},"5:3168:3258":{"crate_id":5,"path":["alloc","collections","btree","set","Iter"],"kind":"struct"},"1:530:4216":{"crate_id":1,"path":["std","thread","Packet"],"kind":"struct"},"2:22403:4225":{"crate_id":2,"path":["core","num","nonzero","NonZeroUsize"],"kind":"struct"},"20:281:1909":{"crate_id":20,"path":["quote","__private","push_lifetime_spanned","Lifetime"],"kind":"struct"},"2:2796:5087":{"crate_id":2,"path":["core","ops","arith","DivAssign"],"kind":"trait"},"1:10855:6498":{"crate_id":1,"path":["std","sys","unix","os_str","Buf"],"kind":"struct"},"1:1433:144":{"crate_id":1,"path":["std","collections","hash","set","HashSet"],"kind":"struct"},"1:8813:3258":{"crate_id":1,"path":["std","sync","mpsc","Iter"],"kind":"struct"},"1:5357:9147":{"crate_id":1,"path":["std","process","ChildStdin"],"kind":"struct"},"24:3245:1818":{"crate_id":24,"path":["syn","token","Type"],"kind":"struct"},"17:12483:5625":{"crate_id":17,"path":["object","macho","LinkerOptionCommand"],"kind":"struct"},"22:109:8070":{"crate_id":22,"path":["proc_macro2","rcvec","RcVec"],"kind":"struct"},"2:2749:4109":{"crate_id":2,"path":["core","marker","FnPtr"],"kind":"trait"},"2:41402:181":{"crate_id":2,"path":["core","option","Option"],"kind":"enum"},"24:1883:3255":{"crate_id":24,"path":["syn","punctuated","PairsMut"],"kind":"struct"},"2:12299:136":{"crate_id":2,"path":["core","future","future","Future"],"kind":"trait"},"24:4850:3195":{"crate_id":24,"path":["syn","expr","ExprLet"],"kind":"struct"},"2:40314:3338":{"crate_id":2,"path":["core","iter","adapters","filter","Filter"],"kind":"struct"},"2:41353:8444":{"crate_id":2,"path":["core","net","socket_addr","SocketAddr"],"kind":"enum"},"16:8047:6305":{"crate_id":16,"path":["gimli","read","unit","AttrsIter"],"kind":"struct"},"16:4818:6135":{"crate_id":16,"path":["gimli","constants","DwInl"],"kind":"struct"},"16:4480:6125":{"crate_id":16,"path":["gimli","constants","DwLle"],"kind":"struct"},"1:11191:8462":{"crate_id":1,"path":["std","sys_common","process","CommandEnv"],"kind":"struct"},"17:11069:21232":{"crate_id":17,"path":["object","read","CompressionFormat"],"kind":"enum"},"2:43347:8380":{"crate_id":2,"path":["core","str","iter","CharIndices"],"kind":"struct"},"1:6392:3306":{"crate_id":1,"path":["std","sync","once","Once"],"kind":"struct"},"16:5944:21140":{"crate_id":16,"path":["gimli","read","cfi","UnwindTable"],"kind":"struct"},"6:7277:7474":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","align","clone_args"],"kind":"struct"},"6:4367:6799":{"crate_id":6,"path":["libc","unix","linux_like","linux","itimerspec"],"kind":"struct"},"24:4508:3162":{"crate_id":24,"path":["syn","attr","MetaList"],"kind":"struct"},"17:13376:5892":{"crate_id":17,"path":["object","pe","ImageBoundForwarderRef"],"kind":"struct"},"1:7827:7913":{"crate_id":1,"path":["std","fs","FileTimes"],"kind":"struct"},"16:5655:6092":{"crate_id":16,"path":["gimli","read","cfi","EhFrame"],"kind":"struct"},"24:4160:3507":{"crate_id":24,"path":["syn","token","OrEq"],"kind":"struct"},"1:10960:4973":{"crate_id":1,"path":["std","sys","unix","process","process_inner","do_exec","Reset"],"kind":"struct"},"1:9032:7988":{"crate_id":1,"path":["std","sync","mpmc","utils","CachePadded"],"kind":"struct"},"17:9138:21222":{"crate_id":17,"path":["object","read","any","ComdatIterator"],"kind":"struct"},"24:4517:1846":{"crate_id":24,"path":["syn","data","Variant"],"kind":"struct"},"2:11504:8393":{"crate_id":2,"path":["core","str","iter","MatchesInternal"],"kind":"struct"},"24:1962:3260":{"crate_id":24,"path":["syn","punctuated","PrivateIter"],"kind":"struct"},"5:2240:8290":{"crate_id":5,"path":["alloc","collections","btree","navigate","LazyLeafRange"],"kind":"struct"},"17:11600:5444":{"crate_id":17,"path":["object","elf","Vernaux"],"kind":"struct"},"11:403:37049":{"crate_id":11,"path":["hashbrown","raw","RawIterHashInner"],"kind":"struct"},"17:3142:21317":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbolIterator"],"kind":"struct"},"2:43371:8309":{"crate_id":2,"path":["core","str","iter","Split"],"kind":"struct"},"17:12236:5577":{"crate_id":17,"path":["object","macho","DylibModule32"],"kind":"struct"},"6:4861:6993":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_ifru_map"],"kind":"struct"},"1:6893:8862":{"crate_id":1,"path":["std","sys_common","backtrace","_print","DisplayBacktrace"],"kind":"struct"},"2:2985:3267":{"crate_id":2,"path":["core","ops","index","IndexMut"],"kind":"trait"},"11:1858:1869":{"crate_id":11,"path":["hashbrown","set","Union"],"kind":"struct"},"21:1828:4570":{"crate_id":21,"path":["proc_macro","bridge","Marked"],"kind":"struct"},"24:1954:3258":{"crate_id":24,"path":["syn","punctuated","Iter"],"kind":"struct"},"24:1068:1909":{"crate_id":24,"path":["syn","lifetime","Lifetime"],"kind":"struct"},"5:7073:8295":{"crate_id":5,"path":["alloc","collections","btree","set_val","SetValZST"],"kind":"struct"},"6:4793:6963":{"crate_id":6,"path":["libc","unix","linux_like","linux","can_filter"],"kind":"struct"},"1:11083:7990":{"crate_id":1,"path":["std","sys","unix","time","SystemTime"],"kind":"struct"},"5:6994:4464":{"crate_id":5,"path":["alloc","alloc","Global"],"kind":"struct"},"16:7366:21151":{"crate_id":16,"path":["gimli","read","op","EvaluationResult"],"kind":"enum"},"16:5724:8140":{"crate_id":16,"path":["gimli","read","cfi","CfiEntriesIter"],"kind":"struct"},"1:7850:130":{"crate_id":1,"path":["std","fs","FileType"],"kind":"struct"},"1:6609:217":{"crate_id":1,"path":["std","sync","rwlock","RwLock"],"kind":"struct"},"16:6390:8197":{"crate_id":16,"path":["gimli","read","aranges","ArangeHeaderIter"],"kind":"struct"},"24:3126:3472":{"crate_id":24,"path":["syn","token","SelfType"],"kind":"struct"},"17:10491:21357":{"crate_id":17,"path":["object","read","pe","section","PeSection"],"kind":"struct"},"2:41546:210":{"crate_id":2,"path":["core","result","Result"],"kind":"enum"},"2:21873:7530":{"crate_id":2,"path":["core","num","flt2dec","decoder","Decoded"],"kind":"struct"},"1:8200:9057":{"crate_id":1,"path":["std","net","Shutdown"],"kind":"enum"},"2:21348:9228":{"crate_id":2,"path":["core","core_simd","ord","SimdOrd"],"kind":"trait"},"6:7249:7471":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","not_x32","statvfs"],"kind":"struct"},"24:4003:3496":{"crate_id":24,"path":["syn","token","FatArrow"],"kind":"struct"},"21:2526:3427":{"crate_id":21,"path":["proc_macro","bridge","Diagnostic"],"kind":"struct"},"2:40234:3325":{"crate_id":2,"path":["core","iter","adapters","array_chunks","ArrayChunks"],"kind":"struct"},"2:6678:3334":{"crate_id":2,"path":["core","iter","adapters","zip","TrustedRandomAccessNoCoerce"],"kind":"trait"},"1:5393:9149":{"crate_id":1,"path":["std","process","ChildStderr"],"kind":"struct"},"1:5579:206":{"crate_id":1,"path":["std","sync","mpsc","Receiver"],"kind":"struct"},"16:6696:21146":{"crate_id":16,"path":["gimli","read","line","ColumnType"],"kind":"enum"},"6:4373:6800":{"crate_id":6,"path":["libc","unix","linux_like","linux","fsid_t"],"kind":"struct"},"2:43269:8318":{"crate_id":2,"path":["core","slice","iter","RChunksExact"],"kind":"struct"},"1:6108:4940":{"crate_id":1,"path":["std","sync","mpmc","waker","Waker"],"kind":"struct"},"17:9409:21239":{"crate_id":17,"path":["object","read","archive","Members"],"kind":"enum"},"1:8514:7976":{"crate_id":1,"path":["std","path","Ancestors"],"kind":"struct"},"1:3424:9011":{"crate_id":1,"path":["std","io","IoSliceMut"],"kind":"struct"},"17:10000:5317":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCache"],"kind":"struct"},"2:41589:3258":{"crate_id":2,"path":["core","result","Iter"],"kind":"struct"},"24:3075:3471":{"crate_id":24,"path":["syn","token","Pub"],"kind":"struct"},"24:4938:58":{"crate_id":24,"path":["syn","expr","parsing","kw","builtin"],"kind":"struct"},"2:2312:188":{"crate_id":2,"path":["core","cmp","PartialEq"],"kind":"trait"},"5:6743:4913":{"crate_id":5,"path":["alloc","vec","retain_mut","BackshiftOnDrop"],"kind":"struct"},"21:2325:2214":{"crate_id":21,"path":["proc_macro","bridge","Punct"],"kind":"struct"},"24:551:8038":{"crate_id":24,"path":["syn","error","ErrorMessage"],"kind":"struct"},"1:4279:9099":{"crate_id":1,"path":["std","os","unix","net","listener","UnixListener"],"kind":"struct"},"16:8170:8267":{"crate_id":16,"path":["gimli","read","unit","DebugTypesUnitHeadersIter"],"kind":"struct"},"2:0:496":{"crate_id":2,"path":["core"],"kind":"module"},"24:2888:3462":{"crate_id":24,"path":["syn","token","Impl"],"kind":"struct"},"24:2769:3457":{"crate_id":24,"path":["syn","token","Else"],"kind":"struct"},"2:4381:3391":{"crate_id":2,"path":["core","cell","BorrowRefMut"],"kind":"struct"},"24:1332:3381":{"crate_id":24,"path":["syn","lookahead","Peek"],"kind":"trait"},"16:6293:6158":{"crate_id":16,"path":["gimli","read","reader","ReaderOffsetId"],"kind":"struct"},"1:9110:8452":{"crate_id":1,"path":["std","time","SystemTimeError"],"kind":"struct"},"2:20880:9220":{"crate_id":2,"path":["core","core_simd","elements","mut_ptr","SimdMutPtr"],"kind":"trait"},"24:3143:3473":{"crate_id":24,"path":["syn","token","SelfValue"],"kind":"struct"},"6:6819:7447":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","shmid_ds"],"kind":"struct"},"1:4119:9094":{"crate_id":1,"path":["std","os","unix","net","ancillary","ScmRights"],"kind":"struct"},"6:1519:6604":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr"],"kind":"struct"},"2:40254:3326":{"crate_id":2,"path":["core","iter","adapters","by_ref_sized","ByRefSized"],"kind":"struct"},"16:6935:21147":{"crate_id":16,"path":["gimli","read","loclists","RawLocListIter"],"kind":"struct"},"5:2128:4211":{"crate_id":5,"path":["alloc","collections","btree","mem","replace","PanicGuard"],"kind":"struct"},"16:2319:6055":{"crate_id":16,"path":["gimli","common","Encoding"],"kind":"struct"},"24:4872:3200":{"crate_id":24,"path":["syn","expr","ExprParen"],"kind":"struct"},"6:6867:7465":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ucontext_t"],"kind":"struct"},"11:667:8548":{"crate_id":11,"path":["hashbrown","map","IntoKeys"],"kind":"struct"},"21:1205:196":{"crate_id":21,"path":["proc_macro","bridge","client","ProcMacro"],"kind":"enum"},"24:3364:3480":{"crate_id":24,"path":["syn","token","Where"],"kind":"struct"},"9:0:3002":{"crate_id":9,"path":["miniz_oxide"],"kind":"module"},"16:4845:6136":{"crate_id":16,"path":["gimli","constants","DwOrd"],"kind":"struct"},"16:5797:8145":{"crate_id":16,"path":["gimli","read","cfi","AugmentationData"],"kind":"struct"},"1:1568:4549":{"crate_id":1,"path":["std","collections","hash","set","Drain"],"kind":"struct"},"17:11434:5406":{"crate_id":17,"path":["object","elf","Rel32"],"kind":"struct"},"9:52:8528":{"crate_id":9,"path":["miniz_oxide","inflate","core","DecompressorOxide"],"kind":"struct"},"1:4531:9119":{"crate_id":1,"path":["std","os","unix","thread","JoinHandleExt"],"kind":"trait"},"24:5322:2202":{"crate_id":24,"path":["syn","path","AssocType"],"kind":"struct"},"2:39373:33343":{"crate_id":2,"path":["core","any","tags","MaybeSizedValue"],"kind":"struct"},"6:573:6577":{"crate_id":6,"path":["libc","unix","itimerval"],"kind":"struct"},"2:46730:7852":{"crate_id":2,"path":["core","core_arch","simd","f32x8"],"kind":"struct"},"6:6719:7387":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_xmmreg"],"kind":"struct"},"1:10686:8442":{"crate_id":1,"path":["std","sys","unix","fs","OpenOptions"],"kind":"struct"},"24:5093:2167":{"crate_id":24,"path":["syn","lit","Lit"],"kind":"enum"},"1:8777:7977":{"crate_id":1,"path":["std","process","ExitStatus"],"kind":"struct"},"16:5677:21138":{"crate_id":16,"path":["gimli","read","cfi","CieOffsetEncoding"],"kind":"enum"},"6:4605:6897":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Sym"],"kind":"struct"},"24:842:9014":{"crate_id":24,"path":["syn","ext","private","Sealed"],"kind":"trait"},"16:5693:8135":{"crate_id":16,"path":["gimli","read","cfi","BaseAddresses"],"kind":"struct"},"22:899:3278":{"crate_id":22,"path":["proc_macro2","Delimiter"],"kind":"enum"},"1:11923:1399":{"crate_id":1,"path":["std","str"],"kind":"primitive"},"17:8953:5230":{"crate_id":17,"path":["object","read","util","StringTable"],"kind":"struct"},"5:5666:232":{"crate_id":5,"path":["alloc","string","ToString"],"kind":"trait"},"6:4886:7005":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_initmsg"],"kind":"struct"},"9:174:8539":{"crate_id":9,"path":["miniz_oxide","inflate","stream","InflateState"],"kind":"struct"},"1:7891:3377":{"crate_id":1,"path":["std","io","cursor","Cursor"],"kind":"struct"},"2:22370:174":{"crate_id":2,"path":["core","num","nonzero","NonZeroU128"],"kind":"struct"},"17:12461:5614":{"crate_id":17,"path":["object","macho","DyldInfoCommand"],"kind":"struct"},"17:11299:5379":{"crate_id":17,"path":["object","elf","SectionHeader32"],"kind":"struct"},"2:41639:84":{"crate_id":2,"path":["core","sync","atomic","AtomicI8"],"kind":"struct"},"16:7259:3737":{"crate_id":16,"path":["gimli","read","op","Location"],"kind":"enum"},"6:6795:7439":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","mcontext_t"],"kind":"struct"},"2:2746:106":{"crate_id":2,"path":["core","marker","ConstParamTy"],"kind":"trait"},"2:2512:149":{"crate_id":2,"path":["core","convert","Into"],"kind":"trait"},"2:42925:8377":{"crate_id":2,"path":["core","slice","ascii","EscapeAscii"],"kind":"struct"},"15:0:3007":{"crate_id":15,"path":["addr2line"],"kind":"module"},"2:40481:3350":{"crate_id":2,"path":["core","iter","adapters","take_while","TakeWhile"],"kind":"struct"},"24:5485:3247":{"crate_id":24,"path":["syn","ty","TypeTraitObject"],"kind":"struct"},"5:1135:36990":{"crate_id":5,"path":["alloc","collections","btree","dedup_sorted_iter","DedupSortedIter"],"kind":"struct"},"1:8244:8445":{"crate_id":1,"path":["std","os","unix","net","ancillary","SocketCred"],"kind":"struct"},"2:40285:3328":{"crate_id":2,"path":["core","iter","adapters","copied","Copied"],"kind":"struct"},"20:10:3134":{"crate_id":20,"path":["quote","ext","TokenStreamExt"],"kind":"trait"},"1:11942:13":{"crate_id":1,"path":["std","fn"],"kind":"primitive"},"1:11266:8467":{"crate_id":1,"path":["std","sys_common","wtf8","Wtf8CodePoints"],"kind":"struct"},"24:4044:3499":{"crate_id":24,"path":["syn","token","LArrow"],"kind":"struct"},"2:9111:3409":{"crate_id":2,"path":["core","fmt","Write"],"kind":"trait"},"1:6644:28240":{"crate_id":1,"path":["std","sync","rwlock","fmt","LockedPlaceholder"],"kind":"struct"},"17:11136:5343":{"crate_id":17,"path":["object","archive","Header"],"kind":"struct"},"1:4760:4948":{"crate_id":1,"path":["std","os","fd","owned","OwnedFd"],"kind":"struct"},"17:8360:21211":{"crate_id":17,"path":["object","common","ComdatKind"],"kind":"enum"},"18:660:25130":{"crate_id":18,"path":["memchr","memmem","FindIter"],"kind":"struct"},"24:93:9014":{"crate_id":24,"path":["syn","token","private","Sealed"],"kind":"trait"},"2:40495:3351":{"crate_id":2,"path":["core","iter","adapters","zip","Zip"],"kind":"struct"},"5:3327:4547":{"crate_id":5,"path":["alloc","collections","btree","set","ExtractIf"],"kind":"struct"},"17:10721:5311":{"crate_id":17,"path":["object","read","pe","rich","RichHeaderInfo"],"kind":"struct"},"17:12345:5595":{"crate_id":17,"path":["object","macho","RpathCommand"],"kind":"struct"},"15:219:8524":{"crate_id":15,"path":["addr2line","RangeAttributes"],"kind":"struct"},"1:413:165":{"crate_id":1,"path":["std","thread","local","LocalKey"],"kind":"struct"},"2:40355:3342":{"crate_id":2,"path":["core","iter","adapters","inspect","Inspect"],"kind":"struct"},"6:4832:6978":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlmsghdr"],"kind":"struct"},"1:5709:9166":{"crate_id":1,"path":["std","sync","barrier","Barrier"],"kind":"struct"},"1:3158:26735":{"crate_id":1,"path":["std","io","stdio","StderrRaw"],"kind":"struct"},"18:644:5110":{"crate_id":18,"path":["memchr","memmem","x86","avx","nostd","Forward"],"kind":"struct"},"16:5032:6142":{"crate_id":16,"path":["gimli","constants","DwLnct"],"kind":"struct"},"1:8348:3733":{"crate_id":1,"path":["std","panic","BacktraceStyle"],"kind":"enum"},"17:13344:5884":{"crate_id":17,"path":["object","pe","ImageTlsDirectory32"],"kind":"struct"},"5:875:4880":{"crate_id":5,"path":["alloc","collections","binary_heap","Hole"],"kind":"struct"},"16:5557:6088":{"crate_id":16,"path":["gimli","read","addr","DebugAddr"],"kind":"struct"},"5:1520:8942":{"crate_id":5,"path":["alloc","collections","btree","map","RangeMut"],"kind":"struct"},"5:1669:4872":{"crate_id":5,"path":["alloc","collections","btree","map","drop","DropGuard"],"kind":"struct"},"2:39125:4458":{"crate_id":2,"path":["core","ops","generator","GeneratorState"],"kind":"enum"},"2:39203:198":{"crate_id":2,"path":["core","ops","range","Range"],"kind":"struct"},"24:826:3363":{"crate_id":24,"path":["syn","ext","IdentExt"],"kind":"trait"},"18:707:8089":{"crate_id":18,"path":["memchr","memmem","Searcher"],"kind":"struct"},"2:40129:8348":{"crate_id":2,"path":["core","ffi","c_str","FromBytesWithNulError"],"kind":"struct"},"24:4365:3522":{"crate_id":24,"path":["syn","token","Slash"],"kind":"struct"},"21:2666:3257":{"crate_id":21,"path":["proc_macro","token_stream","IntoIter"],"kind":"struct"},"24:5356:3231":{"crate_id":24,"path":["syn","restriction","VisRestricted"],"kind":"struct"},"2:42506:73":{"crate_id":2,"path":["core","fmt","Arguments"],"kind":"struct"},"20:150:3759":{"crate_id":20,"path":["quote","__private","ThereIsNoIteratorInRepetition"],"kind":"struct"},"2:21001:9217":{"crate_id":2,"path":["core","core_simd","lane_count","SupportedLaneCount"],"kind":"trait"},"6:5079:7105":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_can"],"kind":"struct"},"5:1479:8934":{"crate_id":5,"path":["alloc","collections","btree","map","ValuesMut"],"kind":"struct"},"2:2738:4106":{"crate_id":2,"path":["core","marker","Freeze"],"kind":"trait"},"2:21927:32770":{"crate_id":2,"path":["core","num","fmt","Part"],"kind":"enum"},"24:1133:8039":{"crate_id":24,"path":["syn","lit","LitRepr"],"kind":"struct"},"5:4758:669":{"crate_id":5,"path":["alloc","fmt"],"kind":"module"},"2:9596:4930":{"crate_id":2,"path":["core","slice","sort","merge","MergeHole"],"kind":"struct"},"5:3180:35713":{"crate_id":5,"path":["alloc","collections","btree","set","DifferenceInner"],"kind":"enum"},"16:2404:6065":{"crate_id":16,"path":["gimli","common","DebugAddrBase"],"kind":"struct"},"17:13033:5807":{"crate_id":17,"path":["object","pe","ImageRomHeaders"],"kind":"struct"},"16:2298:20255":{"crate_id":16,"path":["gimli","common","Format"],"kind":"enum"},"2:43439:8386":{"crate_id":2,"path":["core","str","iter","RSplitTerminator"],"kind":"struct"},"6:4388:6806":{"crate_id":6,"path":["libc","unix","linux_like","linux","cpu_set_t"],"kind":"struct"},"16:6442:8201":{"crate_id":16,"path":["gimli","read","aranges","ArangeEntry"],"kind":"struct"},"1:8835:7980":{"crate_id":1,"path":["std","sync","mpsc","SendError"],"kind":"struct"},"6:5862:7185":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","mallinfo2"],"kind":"struct"},"5:5856:14741":{"crate_id":5,"path":["alloc","sync","ArcInner"],"kind":"struct"},"24:3381:3481":{"crate_id":24,"path":["syn","token","While"],"kind":"struct"},"17:9670:21264":{"crate_id":17,"path":["object","read","elf","segment","ElfSegmentIterator"],"kind":"struct"},"16:7859:21157":{"crate_id":16,"path":["gimli","read","unit","AttributeValue"],"kind":"enum"},"6:7528:7491":{"crate_id":6,"path":["libc","unix","linux_like","linux","fanotify_event_metadata"],"kind":"struct"},"2:40042:8341":{"crate_id":2,"path":["core","char","EscapeUnicode"],"kind":"struct"},"5:6582:4553":{"crate_id":5,"path":["alloc","vec","set_len_on_drop","SetLenOnDrop"],"kind":"struct"},"16:5071:6143":{"crate_id":16,"path":["gimli","constants","DwMacro"],"kind":"struct"},"1:10977:4975":{"crate_id":1,"path":["std","sys","unix","process","process_inner","posix_spawn","PosixSpawnattr"],"kind":"struct"},"1:5933:4950":{"crate_id":1,"path":["std","sync","mpmc","counter","Sender"],"kind":"struct"},"17:11532:5425":{"crate_id":17,"path":["object","elf","Dyn64"],"kind":"struct"},"1:2219:8994":{"crate_id":1,"path":["std","fs","read_to_string"],"kind":"function"},"24:2211:2509":{"crate_id":24,"path":["syn","spanned","Spanned"],"kind":"trait"},"1:11938:1497":{"crate_id":1,"path":["std","u128"],"kind":"primitive"},"1:8271:7958":{"crate_id":1,"path":["std","os","unix","ucred","UCred"],"kind":"struct"},"16:7596:21154":{"crate_id":16,"path":["gimli","read","rnglists","RawRngListEntry"],"kind":"enum"},"18:624:37137":{"crate_id":18,"path":["memchr","memmem","twoway","SuffixOrdering"],"kind":"enum"},"15:180:20235":{"crate_id":15,"path":["addr2line","LocationRangeIter"],"kind":"struct"},"17:13803:6025":{"crate_id":17,"path":["object","pe","ImageFunctionEntry"],"kind":"struct"},"24:4924:3212":{"crate_id":24,"path":["syn","expr","ExprYield"],"kind":"struct"},"17:10283:5290":{"crate_id":17,"path":["object","read","macho","segment","MachOSegmentInternal"],"kind":"struct"},"16:4757:6133":{"crate_id":16,"path":["gimli","constants","DwId"],"kind":"struct"},"11:1048:37055":{"crate_id":11,"path":["hashbrown","map","KeyOrRef"],"kind":"enum"},"17:13821:6031":{"crate_id":17,"path":["object","pe","ImageSeparateDebugHeader"],"kind":"struct"},"6:4482:6851":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_constant_effect"],"kind":"struct"},"16:3872:6119":{"crate_id":16,"path":["gimli","constants","DwCfa"],"kind":"struct"},"17:12403:5605":{"crate_id":17,"path":["object","macho","EncryptionInfoCommand64"],"kind":"struct"},"1:9415:4971":{"crate_id":1,"path":["std","sys","unix","fs","Dir"],"kind":"struct"},"24:4196:3510":{"crate_id":24,"path":["syn","token","Percent"],"kind":"struct"},"16:4932:6139":{"crate_id":16,"path":["gimli","constants","DwDefaulted"],"kind":"struct"},"1:1080:8845":{"crate_id":1,"path":["std","collections","hash","map","OccupiedError"],"kind":"struct"},"21:108:4580":{"crate_id":21,"path":["proc_macro","bridge","client","Bridge"],"kind":"struct"},"1:11937:1500":{"crate_id":1,"path":["std","u64"],"kind":"primitive"},"22:797:37284":{"crate_id":22,"path":["proc_macro2","imp","TokenTreeIter"],"kind":"enum"},"24:4453:3651":{"crate_id":24,"path":["syn","token","Bracket"],"kind":"struct"},"24:4184:3509":{"crate_id":24,"path":["syn","token","PathSep"],"kind":"struct"},"24:3228:234":{"crate_id":24,"path":["syn","token","Try"],"kind":"struct"},"17:13257:5862":{"crate_id":17,"path":["object","pe","ImageBaseRelocation"],"kind":"struct"},"17:10743:21227":{"crate_id":17,"path":["object","read","traits","NoDynamicRelocationIterator"],"kind":"struct"},"5:4842:204":{"crate_id":5,"path":["alloc","rc","Rc"],"kind":"struct"},"5:7351:4548":{"crate_id":5,"path":["alloc","vec","splice","Splice"],"kind":"struct"},"2:2518:238":{"crate_id":2,"path":["core","convert","TryInto"],"kind":"trait"},"24:4829:3190":{"crate_id":24,"path":["syn","expr","ExprForLoop"],"kind":"struct"},"1:7810:4733":{"crate_id":1,"path":["std","fs","Metadata"],"kind":"struct"},"6:4948:7046":{"crate_id":6,"path":["libc","unix","linux_like","linux","rlimit64"],"kind":"struct"},"16:3640:5140":{"crate_id":16,"path":["gimli","arch","X86_64"],"kind":"struct"},"17:9424:5237":{"crate_id":17,"path":["object","read","archive","ArchiveFile"],"kind":"struct"},"21:2600:3428":{"crate_id":21,"path":["proc_macro","diagnostic","Level"],"kind":"enum"},"2:2242:97":{"crate_id":2,"path":["core","borrow","Borrow"],"kind":"trait"},"17:10354:5294":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbolTable"],"kind":"struct"},"17:3266:21333":{"crate_id":17,"path":["object","read","macho","relocation","MachORelocationIterator"],"kind":"struct"},"2:45713:7807":{"crate_id":2,"path":["core","core_arch","simd","f64x1"],"kind":"struct"},"2:4187:3379":{"crate_id":2,"path":["core","cell","Cell"],"kind":"struct"},"5:1408:3258":{"crate_id":5,"path":["alloc","collections","btree","map","Iter"],"kind":"struct"},"24:5031:2247":{"crate_id":24,"path":["syn","generics","TypeParamBound"],"kind":"enum"},"6:4555:6886":{"crate_id":6,"path":["libc","unix","linux_like","linux","dl_phdr_info"],"kind":"struct"},"24:901:37482":{"crate_id":24,"path":["syn","generics","ConstParams"],"kind":"struct"},"2:20588:33445":{"crate_id":2,"path":["core","core_simd","swizzle","interleave","Lo"],"kind":"struct"},"2:22337:177":{"crate_id":2,"path":["core","num","nonzero","NonZeroU64"],"kind":"struct"},"11:311:8274":{"crate_id":11,"path":["hashbrown","raw","RawIter"],"kind":"struct"},"6:5774:7136":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","aiocb"],"kind":"struct"},"1:8289:9129":{"crate_id":1,"path":["std","os","linux","process","PidFd"],"kind":"struct"},"2:21442:7523":{"crate_id":2,"path":["core","core_simd","vector","Simd"],"kind":"struct"},"2:44361:161":{"crate_id":2,"path":["core","alloc","layout","Layout"],"kind":"struct"},"2:2695:225":{"crate_id":2,"path":["core","marker","StructuralEq"],"kind":"trait"},"17:8971:129":{"crate_id":17,"path":["object","read","any","File"],"kind":"struct"},"24:151:1885":{"crate_id":24,"path":["syn","Token"],"kind":"macro"},"16:3815:6118":{"crate_id":16,"path":["gimli","constants","DwUt"],"kind":"struct"},"24:4382:3523":{"crate_id":24,"path":["syn","token","SlashEq"],"kind":"struct"},"24:4816:3187":{"crate_id":24,"path":["syn","expr","ExprConst"],"kind":"struct"},"17:9218:5245":{"crate_id":17,"path":["object","read","any","SymbolTable"],"kind":"struct"},"24:2667:2286":{"crate_id":24,"path":["syn","token","Const"],"kind":"struct"},"1:4199:9098":{"crate_id":1,"path":["std","os","unix","net","datagram","UnixDatagram"],"kind":"struct"},"6:5007:7071":{"crate_id":6,"path":["libc","unix","linux_like","linux","af_alg_iv"],"kind":"struct"},"11:644:3262":{"crate_id":11,"path":["hashbrown","map","IterMut"],"kind":"struct"},"2:2694:226":{"crate_id":2,"path":["core","marker","StructuralPartialEq"],"kind":"trait"},"16:7626:21155":{"crate_id":16,"path":["gimli","read","rnglists","RngListIter"],"kind":"struct"},"1:8984:8560":{"crate_id":1,"path":["std","sync","mpmc","list","ListToken"],"kind":"struct"},"6:568:6575":{"crate_id":6,"path":["libc","unix","sigval"],"kind":"struct"},"24:4027:3498":{"crate_id":24,"path":["syn","token","Gt"],"kind":"struct"},"24:4904:3207":{"crate_id":24,"path":["syn","expr","ExprTryBlock"],"kind":"struct"},"2:43871:8411":{"crate_id":2,"path":["core","str","pattern","CharSliceSearcher"],"kind":"struct"},"24:5178:3225":{"crate_id":24,"path":["syn","mac","MacroDelimiter"],"kind":"enum"},"1:3270:9043":{"crate_id":1,"path":["std","io","stdio","Stderr"],"kind":"struct"},"6:4327:6766":{"crate_id":6,"path":["libc","unix","linux_like","linux","dqblk"],"kind":"struct"},"16:8256:6311":{"crate_id":16,"path":["gimli","read","StoreOnHeap"],"kind":"struct"},"5:2458:7512":{"crate_id":5,"path":["alloc","collections","btree","node","NodeRef"],"kind":"struct"},"2:20779:33604":{"crate_id":2,"path":["core","core_simd","elements","const_ptr","SimdConstPtr","with_addr"],"kind":"foreign_type"},"17:12634:5643":{"crate_id":17,"path":["object","macho","RelocationInfo"],"kind":"struct"},"6:7516:7489":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_condattr_t"],"kind":"struct"},"6:4853:6988":{"crate_id":6,"path":["libc","unix","linux_like","linux","file_clone_range"],"kind":"struct"},"1:8163:3349":{"crate_id":1,"path":["std","io","Take"],"kind":"struct"},"6:6588:7341":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","flock"],"kind":"struct"},"17:12915:5765":{"crate_id":17,"path":["object","pe","ImageDataDirectory"],"kind":"struct"},"1:7673:8930":{"crate_id":1,"path":["std","backtrace","BacktraceStatus"],"kind":"enum"},"17:8256:21194":{"crate_id":17,"path":["object","common","AddressSize"],"kind":"enum"},"6:6027:7267":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_seccomp"],"kind":"struct"},"24:1851:3254":{"crate_id":24,"path":["syn","punctuated","Pairs"],"kind":"struct"},"2:2817:4039":{"crate_id":2,"path":["core","ops","bit","BitOr"],"kind":"trait"},"2:14:2644":{"crate_id":2,"path":["core","write"],"kind":"macro"},"16:6321:8523":{"crate_id":16,"path":["gimli","read","abbrev","AbbreviationsCache"],"kind":"struct"},"2:2469:9014":{"crate_id":2,"path":["core","convert","num","private","Sealed"],"kind":"trait"},"1:8805:7979":{"crate_id":1,"path":["std","process","ExitCode"],"kind":"struct"},"16:6535:4862":{"crate_id":16,"path":["gimli","read","lazy","imp","LazyArc"],"kind":"struct"},"6:5798:7152":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__timeval"],"kind":"struct"},"1:6319:166":{"crate_id":1,"path":["std","sync","mutex","Mutex"],"kind":"struct"},"1:3805:9064":{"crate_id":1,"path":["std","net","udp","UdpSocket"],"kind":"struct"},"16:2905:6086":{"crate_id":16,"path":["gimli","common","EhFrameOffset"],"kind":"struct"},"24:1487:3270":{"crate_id":24,"path":["syn","parse","Parse"],"kind":"trait"},"21:2556:4572":{"crate_id":21,"path":["proc_macro","bridge","ExpnGlobals"],"kind":"struct"},"17:10316:5292":{"crate_id":17,"path":["object","read","macho","section","MachOSectionInternal"],"kind":"struct"},"1:10448:9047":{"crate_id":1,"path":["std","sys","unix","stdio","Stdout"],"kind":"struct"},"24:2939:3465":{"crate_id":24,"path":["syn","token","Loop"],"kind":"struct"},"2:2691:3432":{"crate_id":2,"path":["core","marker","Sized"],"kind":"trait"},"1:7966:8562":{"crate_id":1,"path":["std","io","error","Custom"],"kind":"struct"},"5:2956:2072":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Owned"],"kind":"enum"},"6:4340:6776":{"crate_id":6,"path":["libc","unix","linux_like","linux","signalfd_siginfo"],"kind":"struct"},"2:2822:5073":{"crate_id":2,"path":["core","ops","bit","BitXor"],"kind":"trait"},"1:8366:7968":{"crate_id":1,"path":["std","path","Prefix"],"kind":"enum"},"2:9165:3411":{"crate_id":2,"path":["core","fmt","UpperExp"],"kind":"trait"},"16:6218:1862":{"crate_id":16,"path":["gimli","read","dwarf","Unit"],"kind":"struct"},"16:7572:37072":{"crate_id":16,"path":["gimli","read","rnglists","RangeListsFormat"],"kind":"enum"},"24:3092:3390":{"crate_id":24,"path":["syn","token","Ref"],"kind":"struct"},"17:8979:37119":{"crate_id":17,"path":["object","read","any","FileInternal"],"kind":"enum"},"22:723:1821":{"crate_id":22,"path":["proc_macro2","fallback","Group"],"kind":"struct"},"2:39387:7621":{"crate_id":2,"path":["core","array","TryFromSliceError"],"kind":"struct"},"1:7599:9014":{"crate_id":1,"path":["std","sealed","Sealed"],"kind":"trait"},"24:4341:3520":{"crate_id":24,"path":["syn","token","Shr"],"kind":"struct"},"2:42721:8375":{"crate_id":2,"path":["core","hash","sip","Sip24Rounds"],"kind":"struct"},"21:998:233":{"crate_id":21,"path":["proc_macro","bridge","client","TokenStream"],"kind":"struct"},"17:487:21208":{"crate_id":17,"path":["object","read","any","Comdat"],"kind":"struct"},"2:21015:7521":{"crate_id":2,"path":["core","core_simd","masks","mask_impl","Mask"],"kind":"struct"},"18:699:8087":{"crate_id":18,"path":["memchr","memmem","FinderBuilder"],"kind":"struct"},"2:39560:3416":{"crate_id":2,"path":["core","ascii","ascii_char","AsciiChar"],"kind":"enum"},"24:3007:3467":{"crate_id":24,"path":["syn","token","Move"],"kind":"struct"},"17:13356:5885":{"crate_id":17,"path":["object","pe","ImageImportDescriptor"],"kind":"struct"},"2:9159:3413":{"crate_id":2,"path":["core","fmt","UpperHex"],"kind":"trait"},"22:671:3377":{"crate_id":22,"path":["proc_macro2","parse","Cursor"],"kind":"struct"},"6:6170:7317":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","semid_ds"],"kind":"struct"},"24:5009:3214":{"crate_id":24,"path":["syn","generics","ConstParam"],"kind":"struct"},"1:7706:8967":{"crate_id":1,"path":["std","env","VarError"],"kind":"enum"},"11:1517:20216":{"crate_id":11,"path":["hashbrown","rustc_entry","RustcOccupiedEntry"],"kind":"struct"},"17:11861:5508":{"crate_id":17,"path":["object","macho","MachHeader64"],"kind":"struct"},"24:2854:3460":{"crate_id":24,"path":["syn","token","For"],"kind":"struct"},"16:5367:20253":{"crate_id":16,"path":["gimli","endianity","RunTimeEndian"],"kind":"enum"},"2:43670:8342":{"crate_id":2,"path":["core","str","iter","EscapeDebug"],"kind":"struct"},"17:13651:5983":{"crate_id":17,"path":["object","pe","ImageArmRuntimeFunctionEntry"],"kind":"struct"},"24:2735:3455":{"crate_id":24,"path":["syn","token","Do"],"kind":"struct"},"11:1831:4547":{"crate_id":11,"path":["hashbrown","set","ExtractIf"],"kind":"struct"},"6:4290:6739":{"crate_id":6,"path":["libc","unix","linux_like","linux","glob_t"],"kind":"struct"},"1:4601:7372":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt","st_ctime"],"kind":"foreign_type"},"2:2833:3520":{"crate_id":2,"path":["core","ops","bit","Shr"],"kind":"trait"},"17:12318:5592":{"crate_id":17,"path":["object","macho","PrebindCksumCommand"],"kind":"struct"},"2:46880:7853":{"crate_id":2,"path":["core","core_arch","simd","i8x64"],"kind":"struct"},"1:10864:9151":{"crate_id":1,"path":["std","sys","unix","process","process_common","Stdio"],"kind":"enum"},"16:2546:6071":{"crate_id":16,"path":["gimli","common","LocationListsOffset"],"kind":"struct"},"2:41340:8368":{"crate_id":2,"path":["core","net","parser","AddrParseError"],"kind":"struct"},"24:5136:3220":{"crate_id":24,"path":["syn","lit","LitByteStr"],"kind":"struct"},"2:45658:7804":{"crate_id":2,"path":["core","core_arch","simd","i32x2"],"kind":"struct"},"1:5090:191":{"crate_id":1,"path":["std","path","PathBuf"],"kind":"struct"},"16:2426:6066":{"crate_id":16,"path":["gimli","common","DebugAddrIndex"],"kind":"struct"},"6:4916:7026":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_rcvinfo"],"kind":"struct"},"5:7065:198":{"crate_id":5,"path":["alloc","collections","btree","set","Range"],"kind":"struct"},"17:13121:5830":{"crate_id":17,"path":["object","pe","ImageSymbol"],"kind":"struct"},"6:4435:6829":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_absinfo"],"kind":"struct"},"1:5013:28234":{"crate_id":1,"path":["std","path","fmt","DebugHelper"],"kind":"struct"},"21:2449:1901":{"crate_id":21,"path":["proc_macro","bridge","TokenTree"],"kind":"enum"},"2:4046:4456":{"crate_id":2,"path":["core","async_iter","async_iter","AsyncIterator"],"kind":"trait"},"17:13564:5967":{"crate_id":17,"path":["object","pe","ImageLoadConfigDirectory64"],"kind":"struct"},"6:1716:6728":{"crate_id":6,"path":["libc","unix","linux_like","utsname"],"kind":"struct"},"17:11544:5426":{"crate_id":17,"path":["object","elf","Versym"],"kind":"struct"},"24:126:1821":{"crate_id":24,"path":["syn","token","Group"],"kind":"struct"},"6:5073:7102":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_can_addr"],"kind":"union"},"2:43654:8399":{"crate_id":2,"path":["core","str","iter","SplitAsciiWhitespace"],"kind":"struct"},"6:6606:7348":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","siginfo_t"],"kind":"struct"},"16:6351:21144":{"crate_id":16,"path":["gimli","read","abbrev","Attributes"],"kind":"enum"},"16:6767:8230":{"crate_id":16,"path":["gimli","read","line","IncompleteLineProgram"],"kind":"struct"},"17:9946:8099":{"crate_id":17,"path":["object","read","elf","version","VerdefIterator"],"kind":"struct"},"1:4437:9101":{"crate_id":1,"path":["std","os","unix","process","CommandExt"],"kind":"trait"},"17:10885:8120":{"crate_id":17,"path":["object","read","SymbolMap"],"kind":"struct"},"5:7003:3257":{"crate_id":5,"path":["alloc","collections","binary_heap","IntoIter"],"kind":"struct"},"16:5920:8160":{"crate_id":16,"path":["gimli","read","cfi","UnwindContext"],"kind":"struct"},"16:6890:6098":{"crate_id":16,"path":["gimli","read","loclists","DebugLocLists"],"kind":"struct"},"2:3142:14458":{"crate_id":2,"path":["core","ops","range","OneSidedRange"],"kind":"trait"},"2:40058:8342":{"crate_id":2,"path":["core","char","EscapeDebug"],"kind":"struct"},"20:322:2509":{"crate_id":20,"path":["quote","spanned","Spanned"],"kind":"trait"},"17:9188:37125":{"crate_id":17,"path":["object","read","any","ComdatSectionIteratorInternal"],"kind":"enum"},"2:44348:7789":{"crate_id":2,"path":["core","task","wake","RawWakerVTable"],"kind":"struct"},"17:9380:21238":{"crate_id":17,"path":["object","read","archive","ArchiveKind"],"kind":"enum"},"24:258:8838":{"crate_id":24,"path":["syn","attr","parsing","DisplayPath"],"kind":"struct"},"16:6717:8217":{"crate_id":16,"path":["gimli","read","line","LineSequence"],"kind":"struct"},"21:2264:3279":{"crate_id":21,"path":["proc_macro","bridge","DelimSpan"],"kind":"struct"},"5:7043:35715":{"crate_id":5,"path":["alloc","collections","btree","merge_iter","Peeked"],"kind":"enum"},"17:13763:6014":{"crate_id":17,"path":["object","pe","ImageDebugDirectory"],"kind":"struct"},"2:46460:7847":{"crate_id":2,"path":["core","core_arch","simd","u64x4"],"kind":"struct"},"2:41605:3257":{"crate_id":2,"path":["core","result","IntoIter"],"kind":"struct"},"2:46203:7827":{"crate_id":2,"path":["core","core_arch","simd","m32x4"],"kind":"struct"},"17:9275:37105":{"crate_id":17,"path":["object","read","any","SymbolIteratorInternal"],"kind":"enum"},"18:766:25129":{"crate_id":18,"path":["memchr","memmem","SearcherRevKind"],"kind":"enum"},"17:9512:21249":{"crate_id":17,"path":["object","read","coff","section","CoffSegmentIterator"],"kind":"struct"},"21:2653:233":{"crate_id":21,"path":["proc_macro","TokenStream"],"kind":"struct"},"22:975:3257":{"crate_id":22,"path":["proc_macro2","token_stream","IntoIter"],"kind":"struct"},"5:2032:3377":{"crate_id":5,"path":["alloc","collections","btree","map","Cursor"],"kind":"struct"},"2:12554:140":{"crate_id":2,"path":["core","alloc","global","GlobalAlloc"],"kind":"trait"},"24:5298:2190":{"crate_id":24,"path":["syn","path","GenericArgument"],"kind":"enum"},"24:3783:3482":{"crate_id":24,"path":["syn","token","And"],"kind":"struct"},"1:307:1451":{"crate_id":1,"path":["std","thread"],"kind":"module"},"2:42039:8553":{"crate_id":2,"path":["core","sync","exclusive","Exclusive"],"kind":"struct"},"17:12980:5801":{"crate_id":17,"path":["object","pe","ImageOptionalHeader64"],"kind":"struct"},"20:45:3135":{"crate_id":20,"path":["quote","ident_fragment","IdentFragment"],"kind":"trait"},"24:5494:3234":{"crate_id":24,"path":["syn","ty","BareFnArg"],"kind":"struct"},"24:1448:25155":{"crate_id":24,"path":["syn","parse","discouraged","AnyDelimiter"],"kind":"trait"},"5:1489:8548":{"crate_id":5,"path":["alloc","collections","btree","map","IntoKeys"],"kind":"struct"},"6:5736:7109":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","statx"],"kind":"struct"},"2:21676:8320":{"crate_id":2,"path":["core","num","bignum","Big32x40"],"kind":"struct"},"2:11942:112":{"crate_id":2,"path":["core","str","lossy","Debug"],"kind":"struct"},"16:5386:5220":{"crate_id":16,"path":["gimli","endianity","LittleEndian"],"kind":"struct"},"24:5144:3222":{"crate_id":24,"path":["syn","lit","LitFloat"],"kind":"struct"},"2:41470:3262":{"crate_id":2,"path":["core","option","IterMut"],"kind":"struct"},"17:11770:5487":{"crate_id":17,"path":["object","macho","DyldCacheMappingInfo"],"kind":"struct"},"2:39978:8338":{"crate_id":2,"path":["core","char","convert","ParseCharError"],"kind":"struct"},"2:45535:7799":{"crate_id":2,"path":["core","core_arch","simd","u16x4"],"kind":"struct"},"1:11924:1483":{"crate_id":1,"path":["std","tuple"],"kind":"primitive"},"24:88:1885":{"crate_id":24,"path":["syn","token","Token"],"kind":"trait"},"1:10851:8853":{"crate_id":1,"path":["std","sys","unix","os","JoinPathsError"],"kind":"struct"},"1:4665:9101":{"crate_id":1,"path":["std","os","linux","process","CommandExt"],"kind":"trait"},"6:1574:6637":{"crate_id":6,"path":["libc","unix","linux_like","tm"],"kind":"struct"},"16:2720:6078":{"crate_id":16,"path":["gimli","common","DebugRngListsBase"],"kind":"struct"},"16:2616:6074":{"crate_id":16,"path":["gimli","common","DebugMacinfoOffset"],"kind":"struct"},"17:12622:5306":{"crate_id":17,"path":["object","macho","Relocation"],"kind":"struct"},"6:6564:7324":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","sigaction"],"kind":"struct"},"6:6774:7425":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user"],"kind":"struct"},"6:6704:7382":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","pthread_attr_t"],"kind":"struct"},"17:12072:5538":{"crate_id":17,"path":["object","macho","SubUmbrellaCommand"],"kind":"struct"},"2:1637:4290":{"crate_id":2,"path":["core","mem","Discriminant"],"kind":"struct"},"17:13488:5922":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation64V2"],"kind":"struct"},"5:4425:4898":{"crate_id":5,"path":["alloc","collections","vec_deque","truncate","Dropper"],"kind":"struct"},"21:2744:3426":{"crate_id":21,"path":["proc_macro","SourceFile"],"kind":"struct"},"17:11090:5339":{"crate_id":17,"path":["object","read","CompressedFileRange"],"kind":"struct"},"6:6135:7292":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","sysinfo"],"kind":"struct"},"1:930:8935":{"crate_id":1,"path":["std","collections","hash","map","RawEntryBuilderMut"],"kind":"struct"},"11:986:8940":{"crate_id":11,"path":["hashbrown","map","OccupiedEntry"],"kind":"struct"},"17:11502:5421":{"crate_id":17,"path":["object","elf","ProgramHeader64"],"kind":"struct"},"17:9907:5253":{"crate_id":17,"path":["object","read","elf","version","VersionIndex"],"kind":"struct"},"2:21911:32747":{"crate_id":2,"path":["core","num","flt2dec","Sign"],"kind":"enum"},"1:11197:9156":{"crate_id":1,"path":["std","sys_common","process","CommandEnvs"],"kind":"struct"},"22:880:1901":{"crate_id":22,"path":["proc_macro2","TokenTree"],"kind":"enum"},"2:43755:14388":{"crate_id":2,"path":["core","str","pattern","SearchStep"],"kind":"enum"},"17:11220:5361":{"crate_id":17,"path":["object","archive","AixMemberOffset"],"kind":"struct"},"6:4769:6950":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_extended_err"],"kind":"struct"},"1:4097:32216":{"crate_id":1,"path":["std","os","unix","net","ancillary","AncillaryDataIter"],"kind":"struct"},"6:6043:7271":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","sifields_sigchld"],"kind":"struct"},"5:2167:8285":{"crate_id":5,"path":["alloc","collections","btree","navigate","LeafRange"],"kind":"struct"},"1:1768:609":{"crate_id":1,"path":["std","env"],"kind":"module"},"1:11717:4981":{"crate_id":1,"path":["std","backtrace_rs","symbolize","gimli","mmap","Mmap"],"kind":"struct"},"1:11120:7989":{"crate_id":1,"path":["std","sys","unix","time","inner","Instant"],"kind":"struct"},"18:609:37145":{"crate_id":18,"path":["memchr","memmem","twoway","Suffix"],"kind":"struct"},"2:43898:8412":{"crate_id":2,"path":["core","str","pattern","CharPredicateSearcher"],"kind":"struct"},"2:47624:7892":{"crate_id":2,"path":["core","core_arch","simd","u64x8"],"kind":"struct"},"17:11641:5455":{"crate_id":17,"path":["object","elf","HashHeader"],"kind":"struct"},"6:6007:7261":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ptrace_peeksiginfo_args"],"kind":"struct"},"24:1338:37357":{"crate_id":24,"path":["syn","lookahead","TokenMarker"],"kind":"enum"},"24:3262:3475":{"crate_id":24,"path":["syn","token","Typeof"],"kind":"struct"},"17:10897:5331":{"crate_id":17,"path":["object","read","SymbolMapName"],"kind":"struct"},"5:3139:95":{"crate_id":5,"path":["alloc","collections","btree","set","BTreeSet"],"kind":"struct"},"24:3824:3485":{"crate_id":24,"path":["syn","token","At"],"kind":"struct"},"24:4479:3161":{"crate_id":24,"path":["syn","attr","Attribute"],"kind":"struct"},"2:10290:14367":{"crate_id":2,"path":["core","slice","iter","RSplitNMut"],"kind":"struct"},"5:6450:4872":{"crate_id":5,"path":["alloc","vec","into_iter","drop","DropGuard"],"kind":"struct"},"1:11899:26922":{"crate_id":1,"path":["std","backtrace_rs","print","PrintFmt"],"kind":"enum"},"1:3638:9059":{"crate_id":1,"path":["std","net","socket_addr","ToSocketAddrs"],"kind":"trait"},"24:1489:1907":{"crate_id":24,"path":["syn","parse","ParseStream"],"kind":"typedef"},"17:9178:21223":{"crate_id":17,"path":["object","read","any","ComdatSectionIterator"],"kind":"struct"},"2:6921:3303":{"crate_id":2,"path":["core","iter","sources","empty","Empty"],"kind":"struct"},"17:11844:5505":{"crate_id":17,"path":["object","macho","MachHeader32"],"kind":"struct"},"1:6124:4957":{"crate_id":1,"path":["std","sync","mpmc","waker","SyncWaker"],"kind":"struct"},"24:5286:2471":{"crate_id":24,"path":["syn","path","PathSegment"],"kind":"struct"},"21:2769:3278":{"crate_id":21,"path":["proc_macro","Delimiter"],"kind":"enum"},"24:3313:3477":{"crate_id":24,"path":["syn","token","Unsized"],"kind":"struct"},"1:926:8549":{"crate_id":1,"path":["std","collections","hash","map","IntoValues"],"kind":"struct"},"2:10207:14366":{"crate_id":2,"path":["core","slice","iter","RSplitMut"],"kind":"struct"},"2:41959:85":{"crate_id":2,"path":["core","sync","atomic","AtomicIsize"],"kind":"struct"},"17:12496:5626":{"crate_id":17,"path":["object","macho","SymsegCommand"],"kind":"struct"},"18:80:25117":{"crate_id":18,"path":["memchr","memchr","iter","Memchr"],"kind":"struct"},"6:5804:7153":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","glob64_t"],"kind":"struct"},"6:4878:1002":{"crate_id":6,"path":["libc","unix","linux_like","linux","option"],"kind":"struct"},"16:6254:6155":{"crate_id":16,"path":["gimli","read","endian_slice","EndianSlice"],"kind":"struct"},"2:40416:3346":{"crate_id":2,"path":["core","iter","adapters","scan","Scan"],"kind":"struct"},"9:445:20135":{"crate_id":9,"path":["miniz_oxide","MZError"],"kind":"enum"},"24:2905:3463":{"crate_id":24,"path":["syn","token","In"],"kind":"struct"},"2:2963:4457":{"crate_id":2,"path":["core","ops","generator","Generator"],"kind":"trait"},"24:343:37356":{"crate_id":24,"path":["syn","buffer","empty","UnsafeSyncEntry"],"kind":"struct"},"5:7254:224":{"crate_id":5,"path":["alloc","string","String"],"kind":"struct"},"16:5741:21139":{"crate_id":16,"path":["gimli","read","cfi","CieOrFde"],"kind":"enum"},"1:8899:9178":{"crate_id":1,"path":["std","sync","mpsc","TrySendError"],"kind":"enum"},"2:2843:5091":{"crate_id":2,"path":["core","ops","bit","BitOrAssign"],"kind":"trait"},"2:21977:8330":{"crate_id":2,"path":["core","num","error","ParseIntError"],"kind":"struct"},"1:3956:9071":{"crate_id":1,"path":["std","os","unix","fs","OpenOptionsExt"],"kind":"trait"},"2:47761:7901":{"crate_id":2,"path":["core","core_arch","x86","__m512"],"kind":"struct"},"6:6129:7291":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","sigset_t"],"kind":"struct"},"1:4706:9086":{"crate_id":1,"path":["std","os","fd","raw","IntoRawFd"],"kind":"trait"},"6:482:6524":{"crate_id":6,"path":["libc","unix","utimbuf"],"kind":"struct"},"17:13169:5837":{"crate_id":17,"path":["object","pe","ImageAuxSymbolTokenDef"],"kind":"struct"},"10:36:6441":{"crate_id":10,"path":["adler","algo","U32X4"],"kind":"struct"},"6:4400:6811":{"crate_id":6,"path":["libc","unix","linux_like","linux","msginfo"],"kind":"struct"},"24:2803:3458":{"crate_id":24,"path":["syn","token","Extern"],"kind":"struct"},"6:123:14822":{"crate_id":6,"path":["libc","unix","fpos_t"],"kind":"enum"},"17:11879:5509":{"crate_id":17,"path":["object","macho","LoadCommand"],"kind":"struct"},"2:11736:14374":{"crate_id":2,"path":["core","str","pattern","ReverseSearcher"],"kind":"trait"},"2:8360:14373":{"crate_id":2,"path":["core","panicking","assert_matches_failed","Pattern"],"kind":"struct"},"21:2037:4571":{"crate_id":21,"path":["proc_macro","bridge","LitKind"],"kind":"enum"},"1:5593:4951":{"crate_id":1,"path":["std","sync","mpsc","SyncSender"],"kind":"struct"},"2:4606:14420":{"crate_id":2,"path":["core","char","REPLACEMENT_CHARACTER"],"kind":"constant"},"24:4900:3206":{"crate_id":24,"path":["syn","expr","ExprTry"],"kind":"struct"},"17:9340:21226":{"crate_id":17,"path":["object","read","any","SectionRelocationIterator"],"kind":"struct"},"17:12331:5594":{"crate_id":17,"path":["object","macho","UuidCommand"],"kind":"struct"},"6:7598:7508":{"crate_id":6,"path":["libc","unix","linux_like","linux","non_exhaustive","open_how"],"kind":"struct"},"2:41538:193":{"crate_id":2,"path":["core","pin","Pin"],"kind":"struct"},"1:1561:3258":{"crate_id":1,"path":["std","collections","hash","set","Iter"],"kind":"struct"},"6:4419:6824":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_event"],"kind":"struct"},"5:7023:4549":{"crate_id":5,"path":["alloc","collections","binary_heap","Drain"],"kind":"struct"},"1:11931:744":{"crate_id":1,"path":["std","i32"],"kind":"primitive"},"6:526:6552":{"crate_id":6,"path":["libc","unix","ipv6_mreq"],"kind":"struct"},"1:0:1391":{"crate_id":1,"path":["std"],"kind":"module"},"2:20771:9219":{"crate_id":2,"path":["core","core_simd","elements","const_ptr","SimdConstPtr"],"kind":"trait"},"2:47228:7886":{"crate_id":2,"path":["core","core_arch","simd","i16x32"],"kind":"struct"},"6:4739:6935":{"crate_id":6,"path":["libc","unix","linux_like","linux","inotify_event"],"kind":"struct"},"24:5173:2204":{"crate_id":24,"path":["syn","mac","Macro"],"kind":"struct"},"16:5571:6091":{"crate_id":16,"path":["gimli","read","cfi","DebugFrame"],"kind":"struct"},"16:6544:6095":{"crate_id":16,"path":["gimli","read","line","DebugLine"],"kind":"struct"},"2:47837:7905":{"crate_id":2,"path":["core","core_arch","x86","__m512bh"],"kind":"struct"},"6:4753:6941":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_vm"],"kind":"struct"},"24:4490:2029":{"crate_id":24,"path":["syn","attr","Meta"],"kind":"enum"},"11:695:8549":{"crate_id":11,"path":["hashbrown","map","IntoValues"],"kind":"struct"},"17:13865:6038":{"crate_id":17,"path":["object","pe","ImportObjectHeader"],"kind":"struct"},"16:8142:21159":{"crate_id":16,"path":["gimli","read","unit","EntriesTreeIter"],"kind":"struct"},"24:2820:3459":{"crate_id":24,"path":["syn","token","Final"],"kind":"struct"},"2:7592:3317":{"crate_id":2,"path":["core","iter","traits","marker","FusedIterator"],"kind":"trait"},"2:2911:3398":{"crate_id":2,"path":["core","ops","deref","DerefMut"],"kind":"trait"},"2:43949:14389":{"crate_id":2,"path":["core","str","pattern","StrSearcherImpl"],"kind":"enum"},"6:500:6532":{"crate_id":6,"path":["libc","unix","rlimit"],"kind":"struct"},"2:7169:3323":{"crate_id":2,"path":["core","iter","traits","accum","Product"],"kind":"trait"},"6:119:14821":{"crate_id":6,"path":["libc","unix","FILE"],"kind":"enum"},"16:6854:6202":{"crate_id":16,"path":["gimli","read","line","FileEntryFormat"],"kind":"struct"},"2:40716:3312":{"crate_id":2,"path":["core","iter","sources","repeat_n","RepeatN"],"kind":"struct"},"17:11471:5412":{"crate_id":17,"path":["object","elf","Rela64"],"kind":"struct"},"1:4662:9128":{"crate_id":1,"path":["std","os","linux","process","ChildExt"],"kind":"trait"},"24:251:8837":{"crate_id":24,"path":["syn","attr","parsing","DisplayAttrStyle"],"kind":"struct"},"24:4466:2159":{"crate_id":24,"path":["syn","token","Paren"],"kind":"struct"},"6:1689:6717":{"crate_id":6,"path":["libc","unix","linux_like","mmsghdr"],"kind":"struct"},"2:44178:14548":{"crate_id":2,"path":["core","time","TryFromFloatSecsErrorKind"],"kind":"enum"},"2:40091:14427":{"crate_id":2,"path":["core","char","CaseMappingIter"],"kind":"enum"},"24:3974:125":{"crate_id":24,"path":["syn","token","Eq"],"kind":"struct"},"17:13399:5900":{"crate_id":17,"path":["object","pe","ImageResourceDirectory"],"kind":"struct"},"2:30243:4293":{"crate_id":2,"path":["core","mem","manually_drop","ManuallyDrop"],"kind":"struct"},"11:968:8248":{"crate_id":11,"path":["hashbrown","map","Entry"],"kind":"enum"},"5:1099:36989":{"crate_id":5,"path":["alloc","collections","btree","append","MergeIter"],"kind":"struct"},"11:836:8938":{"crate_id":11,"path":["hashbrown","map","RawVacantEntryMut"],"kind":"struct"},"24:4928:1855":{"crate_id":24,"path":["syn","expr","Member"],"kind":"enum"},"6:4517:6870":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_rumble_effect"],"kind":"struct"},"16:6662:8216":{"crate_id":16,"path":["gimli","read","line","LineInstructions"],"kind":"struct"},"20:407:3918":{"crate_id":20,"path":["quote","__private","RepInterp"],"kind":"struct"},"16:4540:6127":{"crate_id":16,"path":["gimli","constants","DwEnd"],"kind":"struct"},"6:5978:7248":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","Elf64_Chdr"],"kind":"struct"},"24:925:3217":{"crate_id":24,"path":["syn","generics","Turbofish"],"kind":"struct"},"2:30277:4294":{"crate_id":2,"path":["core","mem","maybe_uninit","MaybeUninit"],"kind":"union"},"17:10589:8112":{"crate_id":17,"path":["object","read","pe","import","ImportThunkList"],"kind":"struct"},"17:11821:5500":{"crate_id":17,"path":["object","macho","FatArch32"],"kind":"struct"},"24:3904:3490":{"crate_id":24,"path":["syn","token","Dollar"],"kind":"struct"},"20:235:4036":{"crate_id":20,"path":["quote","__private","get_span","GetSpan"],"kind":"struct"},"2:40323:3339":{"crate_id":2,"path":["core","iter","adapters","filter_map","FilterMap"],"kind":"struct"},"2:42161:2298":{"crate_id":2,"path":["core","fmt","num","Binary"],"kind":"struct"},"17:8310:21210":{"crate_id":17,"path":["object","common","SectionKind"],"kind":"enum"},"1:4148:9097":{"crate_id":1,"path":["std","os","unix","net","ancillary","Messages"],"kind":"struct"},"5:3719:3377":{"crate_id":5,"path":["alloc","collections","linked_list","Cursor"],"kind":"struct"},"24:1443:25154":{"crate_id":24,"path":["syn","parse","discouraged","Speculative"],"kind":"trait"},"18:690:8086":{"crate_id":18,"path":["memchr","memmem","FinderRev"],"kind":"struct"},"17:13453:5914":{"crate_id":17,"path":["object","pe","ImageDynamicRelocationTable"],"kind":"struct"},"1:6505:8859":{"crate_id":1,"path":["std","sync","poison","PoisonError"],"kind":"struct"},"17:10569:8107":{"crate_id":17,"path":["object","read","pe","import","ImportTable"],"kind":"struct"},"2:3318:69":{"crate_id":2,"path":["core","any","Any"],"kind":"trait"},"2:40734:3316":{"crate_id":2,"path":["core","iter","sources","successors","Successors"],"kind":"struct"},"18:515:5113":{"crate_id":18,"path":["memchr","memmem","prefilter","PrefilterFn"],"kind":"struct"},"17:11282:1832":{"crate_id":17,"path":["object","elf","Ident"],"kind":"struct"},"17:8753:5224":{"crate_id":17,"path":["object","endian","U64Bytes"],"kind":"struct"},"6:5966:7241":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","regex_t"],"kind":"struct"},"1:11888:8932":{"crate_id":1,"path":["std","backtrace_rs","types","BytesOrWideString"],"kind":"enum"},"17:9478:21253":{"crate_id":17,"path":["object","read","coff","file","CoffCommon"],"kind":"struct"},"2:21125:9221":{"crate_id":2,"path":["core","core_simd","masks","MaskElement"],"kind":"trait"},"2:11269:8850":{"crate_id":2,"path":["core","slice","GetManyMutError"],"kind":"struct"},"17:10555:8103":{"crate_id":17,"path":["object","read","pe","export","ExportTable"],"kind":"struct"},"1:8183:8396":{"crate_id":1,"path":["std","io","Lines"],"kind":"struct"},"6:4394:6808":{"crate_id":6,"path":["libc","unix","linux_like","linux","if_nameindex"],"kind":"struct"},"18:614:37138":{"crate_id":18,"path":["memchr","memmem","twoway","SuffixKind"],"kind":"enum"},"16:7065:8247":{"crate_id":16,"path":["gimli","read","lookup","PubStuffParser"],"kind":"struct"},"1:618:8852":{"crate_id":1,"path":["std","backtrace","Backtrace"],"kind":"struct"},"1:922:8548":{"crate_id":1,"path":["std","collections","hash","map","IntoKeys"],"kind":"struct"},"2:40065:14426":{"crate_id":2,"path":["core","char","EscapeDebugInner"],"kind":"enum"},"17:9628:21245":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdat"],"kind":"struct"},"24:4876:2095":{"crate_id":24,"path":["syn","expr","ExprPath"],"kind":"struct"},"17:9895:21283":{"crate_id":17,"path":["object","read","elf","hash","GnuHashTable"],"kind":"struct"},"1:9213:4624":{"crate_id":1,"path":["std","sys","unix","args","Args"],"kind":"struct"},"17:9312:21225":{"crate_id":17,"path":["object","read","any","DynamicRelocationIterator"],"kind":"struct"},"17:11258:5376":{"crate_id":17,"path":["object","elf","FileHeader64"],"kind":"struct"},"6:7504:7487":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_mutexattr_t"],"kind":"struct"},"6:5835:7166":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","termios"],"kind":"struct"},"2:4336:3390":{"crate_id":2,"path":["core","cell","Ref"],"kind":"struct"},"2:47586:7891":{"crate_id":2,"path":["core","core_arch","simd","i64x8"],"kind":"struct"},"6:532:6555":{"crate_id":6,"path":["libc","unix","hostent"],"kind":"struct"},"16:2764:6080":{"crate_id":16,"path":["gimli","common","DebugStrOffset"],"kind":"struct"},"2:9414:8308":{"crate_id":2,"path":["core","hash","BuildHasherDefault"],"kind":"struct"},"16:7837:8256":{"crate_id":16,"path":["gimli","read","unit","DebuggingInformationEntry"],"kind":"struct"},"17:11902:5512":{"crate_id":17,"path":["object","macho","SegmentCommand32"],"kind":"struct"},"2:1821:3400":{"crate_id":2,"path":["core","ptr","non_null","NonNull"],"kind":"struct"},"24:2081:2444":{"crate_id":24,"path":["syn","punctuated","Pair"],"kind":"enum"},"6:5057:7099":{"crate_id":6,"path":["libc","unix","linux_like","linux","dirent64"],"kind":"struct"},"2:45505:7798":{"crate_id":2,"path":["core","core_arch","simd","u8x8"],"kind":"struct"},"2:21118:9014":{"crate_id":2,"path":["core","core_simd","masks","sealed","Sealed"],"kind":"trait"},"5:3235:1869":{"crate_id":5,"path":["alloc","collections","btree","set","Union"],"kind":"struct"},"24:4068:3501":{"crate_id":24,"path":["syn","token","Lt"],"kind":"struct"},"24:2990:3466":{"crate_id":24,"path":["syn","token","Mod"],"kind":"struct"},"16:7335:37102":{"crate_id":16,"path":["gimli","read","op","EvaluationWaiting"],"kind":"enum"},"2:21956:8327":{"crate_id":2,"path":["core","num","fmt","Formatted"],"kind":"struct"},"21:967:4589":{"crate_id":21,"path":["proc_macro","bridge","client","FreeFunctions"],"kind":"struct"},"21:2727:3424":{"crate_id":21,"path":["proc_macro","LineColumn"],"kind":"struct"},"8:0:3001":{"crate_id":8,"path":["cfg_if"],"kind":"module"},"1:2210:129":{"crate_id":1,"path":["std","fs","File"],"kind":"struct"},"2:21127:7521":{"crate_id":2,"path":["core","core_simd","masks","Mask"],"kind":"struct"},"17:8389:21212":{"crate_id":17,"path":["object","common","SymbolKind"],"kind":"enum"},"16:7437:6253":{"crate_id":16,"path":["gimli","read","op","OperationIter"],"kind":"struct"},"17:11813:5498":{"crate_id":17,"path":["object","macho","FatHeader"],"kind":"struct"},"1:8249:9100":{"crate_id":1,"path":["std","os","unix","net","ancillary","AncillaryError"],"kind":"enum"},"17:9557:5245":{"crate_id":17,"path":["object","read","coff","symbol","SymbolTable"],"kind":"struct"},"2:4114:3401":{"crate_id":2,"path":["core","cell","lazy","LazyCell"],"kind":"struct"},"1:8997:7985":{"crate_id":1,"path":["std","sync","mpmc","select","Operation"],"kind":"struct"},"16:55:6296":{"crate_id":16,"path":["gimli","endianity","Endianity"],"kind":"trait"},"11:1838:8279":{"crate_id":11,"path":["hashbrown","set","Intersection"],"kind":"struct"},"2:8255:3739":{"crate_id":2,"path":["core","panic","unwind_safe","AssertUnwindSafe"],"kind":"struct"},"1:585:2311":{"crate_id":1,"path":["std","ascii","AsciiExt"],"kind":"trait"},"24:877:37486":{"crate_id":24,"path":["syn","generics","LifetimesMut"],"kind":"struct"},"6:1648:6693":{"crate_id":6,"path":["libc","unix","linux_like","in6_rtmsg"],"kind":"struct"},"2:47662:7893":{"crate_id":2,"path":["core","core_arch","simd","f64x8"],"kind":"struct"},"19:0:1032":{"crate_id":19,"path":["panic_unwind"],"kind":"module"},"1:9062:218":{"crate_id":1,"path":["std","sync","rwlock","RwLockReadGuard"],"kind":"struct"},"17:13506:5925":{"crate_id":17,"path":["object","pe","ImageEpilogueDynamicRelocationHeader"],"kind":"struct"},"24:5142:3223":{"crate_id":24,"path":["syn","lit","LitInt"],"kind":"struct"},"16:3225:6112":{"crate_id":16,"path":["gimli","arch","AArch64"],"kind":"struct"},"1:1062:8940":{"crate_id":1,"path":["std","collections","hash","map","OccupiedEntry"],"kind":"struct"},"1:8132:9013":{"crate_id":1,"path":["std","io","SeekFrom"],"kind":"enum"},"2:40171:8979":{"crate_id":2,"path":["core","ffi","c_char"],"kind":"typedef"},"24:1136:8041":{"crate_id":24,"path":["syn","lit","LitIntRepr"],"kind":"struct"},"2:45952:7819":{"crate_id":2,"path":["core","core_arch","simd","i16x8"],"kind":"struct"},"1:11032:7977":{"crate_id":1,"path":["std","sys","unix","process","process_inner","ExitStatus"],"kind":"struct"},"24:2030:3264":{"crate_id":24,"path":["syn","punctuated","PrivateIterMut"],"kind":"struct"},"16:7767:21156":{"crate_id":16,"path":["gimli","read","unit","UnitType"],"kind":"enum"},"6:4780:6958":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_tp"],"kind":"struct"},"1:9011:26096":{"crate_id":1,"path":["std","sync","mpmc","select","Selected"],"kind":"enum"},"2:2506:75":{"crate_id":2,"path":["core","convert","AsRef"],"kind":"trait"},"16:3063:5136":{"crate_id":16,"path":["gimli","arch","Arm"],"kind":"struct"},"2:41376:7762":{"crate_id":2,"path":["core","net","socket_addr","SocketAddrV4"],"kind":"struct"},"24:554:5071":{"crate_id":24,"path":["syn","error","SpanRange"],"kind":"struct"},"1:10029:26504":{"crate_id":1,"path":["std","sys","unix","os","Env"],"kind":"struct"},"6:4474:6846":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_envelope"],"kind":"struct"},"2:47478:7889":{"crate_id":2,"path":["core","core_arch","simd","u32x16"],"kind":"struct"},"2:39345:14459":{"crate_id":2,"path":["core","ops","try_trait","Yeet"],"kind":"struct"},"2:40006:7748":{"crate_id":2,"path":["core","char","convert","CharTryFromError"],"kind":"struct"},"0:0:1700":{"crate_id":0,"path":["serde_derive"],"kind":"module"},"5:3567:163":{"crate_id":5,"path":["alloc","collections","linked_list","LinkedList"],"kind":"struct"},"16:6943:21148":{"crate_id":16,"path":["gimli","read","loclists","RawLocListEntry"],"kind":"enum"},"1:4587:9072":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt"],"kind":"trait"},"16:6819:6198":{"crate_id":16,"path":["gimli","read","line","FileEntry"],"kind":"struct"},"11:1852:8281":{"crate_id":11,"path":["hashbrown","set","SymmetricDifference"],"kind":"struct"},"6:4817:6974":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_fprog"],"kind":"struct"},"6:4907:7020":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_sndinfo"],"kind":"struct"},"16:6868:6204":{"crate_id":16,"path":["gimli","read","lists","ListsHeader"],"kind":"struct"},"2:10014:8309":{"crate_id":2,"path":["core","slice","iter","Split"],"kind":"struct"},"24:5283:190":{"crate_id":24,"path":["syn","path","Path"],"kind":"struct"},"1:1785:8950":{"crate_id":1,"path":["std","env","VarsOs"],"kind":"struct"},"6:4799:6966":{"crate_id":6,"path":["libc","unix","linux_like","linux","j1939_filter"],"kind":"struct"},"1:10451:9043":{"crate_id":1,"path":["std","sys","unix","stdio","Stderr"],"kind":"struct"},"17:9772:5250":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbolTable"],"kind":"struct"},"16:2668:6076":{"crate_id":16,"path":["gimli","common","RawRangeListsOffset"],"kind":"struct"},"6:6076:7280":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","utmpx"],"kind":"struct"},"16:3782:6117":{"crate_id":16,"path":["gimli","constants","DwSectV2"],"kind":"struct"},"17:8683:5222":{"crate_id":17,"path":["object","endian","U16Bytes"],"kind":"struct"},"1:3315:9036":{"crate_id":1,"path":["std","io","stdio","IsTerminal"],"kind":"trait"},"1:8854:7981":{"crate_id":1,"path":["std","sync","mpsc","RecvError"],"kind":"struct"},"2:4410:3393":{"crate_id":2,"path":["core","cell","UnsafeCell"],"kind":"struct"},"2:11787:14382":{"crate_id":2,"path":["core","str","pattern","MultiCharEqPattern"],"kind":"struct"},"20:77:1902":{"crate_id":20,"path":["quote","to_tokens","ToTokens"],"kind":"trait"},"17:9265:21224":{"crate_id":17,"path":["object","read","any","SymbolIterator"],"kind":"struct"},"24:2023:3262":{"crate_id":24,"path":["syn","punctuated","IterMut"],"kind":"struct"},"17:13265:5864":{"crate_id":17,"path":["object","pe","ImageArchiveMemberHeader"],"kind":"struct"},"24:1035:1832":{"crate_id":24,"path":["syn","ident","Ident"],"kind":"function"},"16:7543:6104":{"crate_id":16,"path":["gimli","read","rnglists","DebugRngLists"],"kind":"struct"},"17:420:5178":{"crate_id":17,"path":["object","read","any","Section"],"kind":"struct"},"2:2692:3396":{"crate_id":2,"path":["core","marker","Unsize"],"kind":"trait"},"24:893:37483":{"crate_id":24,"path":["syn","generics","TypeParamsMut"],"kind":"struct"},"2:30477:32738":{"crate_id":2,"path":["core","ptr","alignment","AlignmentEnum64"],"kind":"enum"},"2:4786:34376":{"crate_id":2,"path":["core","ffi","sealed_trait","VaArgSafe"],"kind":"trait"},"24:4896:3205":{"crate_id":24,"path":["syn","expr","ExprStruct"],"kind":"struct"},"2:47746:7900":{"crate_id":2,"path":["core","core_arch","x86","__m512i"],"kind":"struct"},"1:8104:3303":{"crate_id":1,"path":["std","io","util","Empty"],"kind":"struct"},"20:34:9014":{"crate_id":20,"path":["quote","ext","private","Sealed"],"kind":"trait"},"2:40707:3310":{"crate_id":2,"path":["core","iter","sources","repeat","Repeat"],"kind":"struct"},"2:45473:7797":{"crate_id":2,"path":["core","core_arch","simd","i16x2"],"kind":"struct"},"2:21890:32769":{"crate_id":2,"path":["core","num","flt2dec","decoder","FullDecoded"],"kind":"enum"},"16:6201:21143":{"crate_id":16,"path":["gimli","read","dwarf","DwarfPackage"],"kind":"struct"},"2:21729:8321":{"crate_id":2,"path":["core","num","bignum","tests","Big8x3"],"kind":"struct"},"16:5418:6147":{"crate_id":16,"path":["gimli","read","util","sealed","CapacityFull"],"kind":"struct"},"24:5491:3233":{"crate_id":24,"path":["syn","ty","Abi"],"kind":"struct"},"5:5930:4896":{"crate_id":5,"path":["alloc","sync","from_iter_exact","Guard"],"kind":"struct"},"9:481:20134":{"crate_id":9,"path":["miniz_oxide","DataFormat"],"kind":"enum"},"2:12386:14435":{"crate_id":2,"path":["core","future","poll_fn","PollFn"],"kind":"struct"},"1:9403:129":{"crate_id":1,"path":["std","sys","unix","fs","File"],"kind":"struct"},"16:7293:6234":{"crate_id":16,"path":["gimli","read","op","Piece"],"kind":"struct"},"24:598:3257":{"crate_id":24,"path":["syn","error","IntoIter"],"kind":"struct"},"1:10167:9155":{"crate_id":1,"path":["std","sys","unix","pipe","AnonPipe"],"kind":"struct"},"17:10125:5258":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandData"],"kind":"struct"},"24:5061:1967":{"crate_id":24,"path":["syn","generics","WherePredicate"],"kind":"enum"},"2:41597:3262":{"crate_id":2,"path":["core","result","IterMut"],"kind":"struct"},"1:11933:741":{"crate_id":1,"path":["std","i128"],"kind":"primitive"},"2:43250:8317":{"crate_id":2,"path":["core","slice","iter","RChunks"],"kind":"struct"},"17:10104:5256":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandIterator"],"kind":"struct"},"6:1708:6724":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_storage"],"kind":"struct"},"2:2264:105":{"crate_id":2,"path":["core","clone","Clone"],"kind":"trait"},"2:41719:81":{"crate_id":2,"path":["core","sync","atomic","AtomicI16"],"kind":"struct"},"22:946:2507":{"crate_id":22,"path":["proc_macro2","Literal"],"kind":"struct"},"5:7194:8296":{"crate_id":5,"path":["alloc","ffi","c_str","NulError"],"kind":"struct"},"1:10681:8455":{"crate_id":1,"path":["std","sys","unix","fs","StatxExtraFields"],"kind":"struct"},"11:736:8278":{"crate_id":11,"path":["hashbrown","map","Values"],"kind":"struct"},"2:1667:1088":{"crate_id":2,"path":["core","ptr"],"kind":"module"},"21:434:4858":{"crate_id":21,"path":["proc_macro","bridge","scoped_cell","replace","PutBackOnDrop"],"kind":"struct"},"5:1773:4547":{"crate_id":5,"path":["alloc","collections","btree","map","ExtractIf"],"kind":"struct"},"6:4722:6925":{"crate_id":6,"path":["libc","unix","linux_like","linux","in6_pktinfo"],"kind":"struct"},"6:5792:7149":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__exit_status"],"kind":"struct"},"17:12592:5636":{"crate_id":17,"path":["object","macho","Nlist32"],"kind":"struct"},"24:4271:3515":{"crate_id":24,"path":["syn","token","Question"],"kind":"struct"},"2:43679:3415":{"crate_id":2,"path":["core","str","iter","EscapeDefault"],"kind":"struct"},"2:10775:14362":{"crate_id":2,"path":["core","slice","iter","GroupBy"],"kind":"struct"},"2:40407:3345":{"crate_id":2,"path":["core","iter","adapters","rev","Rev"],"kind":"struct"},"2:43421:8385":{"crate_id":2,"path":["core","str","iter","SplitTerminator"],"kind":"struct"},"5:2957:35535":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Dying"],"kind":"enum"},"16:6919:37103":{"crate_id":16,"path":["gimli","read","loclists","LocListsFormat"],"kind":"enum"},"5:1371:94":{"crate_id":5,"path":["alloc","collections","btree","map","BTreeMap"],"kind":"struct"},"17:562:1913":{"crate_id":17,"path":["object","read","any","Symbol"],"kind":"struct"},"6:1589:6649":{"crate_id":6,"path":["libc","unix","linux_like","sched_param"],"kind":"struct"},"17:11163:5349":{"crate_id":17,"path":["object","archive","AixHeader"],"kind":"struct"},"17:9933:8097":{"crate_id":17,"path":["object","read","elf","version","VersionTable"],"kind":"struct"},"2:21838:8325":{"crate_id":2,"path":["core","num","dec2flt","ParseFloatError"],"kind":"struct"},"1:3272:9044":{"crate_id":1,"path":["std","io","stdio","StderrLock"],"kind":"struct"},"1:3700:9063":{"crate_id":1,"path":["std","net","tcp","TcpStream"],"kind":"struct"},"14:202:2342":{"crate_id":14,"path":["rustc_demangle","v0","ParseError"],"kind":"enum"},"16:8269:128":{"crate_id":16,"path":["gimli","read","Error"],"kind":"enum"},"2:2774:5084":{"crate_id":2,"path":["core","ops","arith","Rem"],"kind":"trait"},"11:723:8277":{"crate_id":11,"path":["hashbrown","map","Keys"],"kind":"struct"},"18:755:8096":{"crate_id":18,"path":["memchr","memmem","SearcherRev"],"kind":"struct"},"2:2706:2433":{"crate_id":2,"path":["core","marker","PhantomData"],"kind":"struct"},"5:1115:35541":{"crate_id":5,"path":["alloc","collections","btree","borrow","DormantMutRef"],"kind":"struct"},"5:7102:3257":{"crate_id":5,"path":["alloc","collections","vec_deque","into_iter","IntoIter"],"kind":"struct"},"2:46384:7845":{"crate_id":2,"path":["core","core_arch","simd","u16x16"],"kind":"struct"},"6:6670:7376":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statfs64"],"kind":"struct"},"2:43792:8407":{"crate_id":2,"path":["core","str","pattern","MultiCharEqSearcher"],"kind":"struct"},"17:12006:5529":{"crate_id":17,"path":["object","macho","FvmlibCommand"],"kind":"struct"},"16:2786:6081":{"crate_id":16,"path":["gimli","common","DebugStrOffsetsBase"],"kind":"struct"},"17:8667:5221":{"crate_id":17,"path":["object","endian","BigEndian"],"kind":"struct"},"1:643:8928":{"crate_id":1,"path":["std","backtrace","BytesOrWide"],"kind":"enum"},"2:41679:91":{"crate_id":2,"path":["core","sync","atomic","AtomicU8"],"kind":"struct"},"17:10823:5192":{"crate_id":17,"path":["object","read","SectionIndex"],"kind":"struct"},"14:31:8839":{"crate_id":14,"path":["rustc_demangle","v0","Demangle"],"kind":"struct"},"17:10670:5309":{"crate_id":17,"path":["object","read","pe","resource","ResourceDirectory"],"kind":"struct"},"1:3348:3310":{"crate_id":1,"path":["std","io","util","Repeat"],"kind":"struct"},"17:11585:5438":{"crate_id":17,"path":["object","elf","Verneed"],"kind":"struct"},"24:497:3268":{"crate_id":24,"path":["syn","drops","NoDrop"],"kind":"struct"},"6:6647:7375":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stat64"],"kind":"struct"},"6:4894:7010":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_sndrcvinfo"],"kind":"struct"},"2:11253:14508":{"crate_id":2,"path":["core","slice","SlicePattern"],"kind":"trait"},"2:2851:5092":{"crate_id":2,"path":["core","ops","bit","ShlAssign"],"kind":"trait"},"18:590:5117":{"crate_id":18,"path":["memchr","memmem","twoway","TwoWay"],"kind":"struct"},"24:286:37346":{"crate_id":24,"path":["syn","bigint","BigInt"],"kind":"struct"},"2:42674:8372":{"crate_id":2,"path":["core","hash","sip","SipHasher24"],"kind":"struct"},"1:6575:4962":{"crate_id":1,"path":["std","sync","remutex","ReentrantMutexGuard"],"kind":"struct"},"24:5482:3246":{"crate_id":24,"path":["syn","ty","TypeSlice"],"kind":"struct"},"6:1662:6704":{"crate_id":6,"path":["libc","unix","linux_like","arpreq"],"kind":"struct"},"5:7094:3257":{"crate_id":5,"path":["alloc","collections","linked_list","IntoIter"],"kind":"struct"},"1:4018:9077":{"crate_id":1,"path":["std","os","unix","fs","DirBuilderExt"],"kind":"trait"},"2:40701:3308":{"crate_id":2,"path":["core","iter","sources","once_with","OnceWith"],"kind":"struct"},"17:9853:21306":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdatSectionIterator"],"kind":"struct"},"7:79:20128":{"crate_id":7,"path":["unwind","libunwind","_Unwind_Action"],"kind":"enum"},"1:11916:937":{"crate_id":1,"path":["std","never"],"kind":"primitive"},"16:7683:6106":{"crate_id":16,"path":["gimli","read","str","DebugStrOffsets"],"kind":"struct"},"2:39380:3390":{"crate_id":2,"path":["core","any","tags","Ref"],"kind":"struct"},"17:13842:6034":{"crate_id":17,"path":["object","pe","NonPagedDebugInfo"],"kind":"struct"},"2:45427:7795":{"crate_id":2,"path":["core","core_arch","simd","u16x2"],"kind":"struct"},"2:2317:125":{"crate_id":2,"path":["core","cmp","Eq"],"kind":"trait"},"5:7224:8299":{"crate_id":5,"path":["alloc","ffi","c_str","FromVecWithNulError"],"kind":"struct"},"24:3058:3470":{"crate_id":24,"path":["syn","token","Priv"],"kind":"struct"},"9:421:20137":{"crate_id":9,"path":["miniz_oxide","MZStatus"],"kind":"enum"},"1:9072:7989":{"crate_id":1,"path":["std","time","Instant"],"kind":"struct"},"2:6981:3305":{"crate_id":2,"path":["core","iter","sources","once","once"],"kind":"function"},"6:5986:7249":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","Elf32_Chdr"],"kind":"struct"},"1:11044:7978":{"crate_id":1,"path":["std","sys","unix","process","process_inner","ExitStatusError"],"kind":"struct"},"24:4812:3186":{"crate_id":24,"path":["syn","expr","ExprClosure"],"kind":"struct"},"17:12194:5556":{"crate_id":17,"path":["object","macho","DysymtabCommand"],"kind":"struct"},"24:3296:3476":{"crate_id":24,"path":["syn","token","Unsafe"],"kind":"struct"},"17:13698:5995":{"crate_id":17,"path":["object","pe","ImageEnclaveConfig32"],"kind":"struct"},"24:5361:3230":{"crate_id":24,"path":["syn","restriction","FieldMutability"],"kind":"enum"},"2:20740:9222":{"crate_id":2,"path":["core","core_simd","cast","SimdCast"],"kind":"trait"},"17:10857:21230":{"crate_id":17,"path":["object","read","SymbolSection"],"kind":"enum"},"1:9410:9009":{"crate_id":1,"path":["std","sys","unix","fs","ReadDir"],"kind":"struct"},"16:4037:6121":{"crate_id":16,"path":["gimli","constants","DwTag"],"kind":"struct"},"2:43158:8314":{"crate_id":2,"path":["core","slice","iter","Chunks"],"kind":"struct"},"17:1947:21260":{"crate_id":17,"path":["object","read","elf","relocation","ElfDynamicRelocationIterator"],"kind":"struct"},"1:10491:4221":{"crate_id":1,"path":["std","sys","unix","thread","Thread"],"kind":"struct"},"17:9973:8101":{"crate_id":17,"path":["object","read","elf","version","VerneedIterator"],"kind":"struct"},"24:3841:3486":{"crate_id":24,"path":["syn","token","Caret"],"kind":"struct"},"2:44098:8427":{"crate_id":2,"path":["core","str","CharEscapeUnicode"],"kind":"struct"},"24:5364:1818":{"crate_id":24,"path":["syn","ty","Type"],"kind":"enum"},"16:5402:5221":{"crate_id":16,"path":["gimli","endianity","BigEndian"],"kind":"struct"},"2:3197:3397":{"crate_id":2,"path":["core","ops","unsize","CoerceUnsized"],"kind":"trait"},"16:3300:6113":{"crate_id":16,"path":["gimli","arch","LoongArch"],"kind":"struct"},"2:1630:587":{"crate_id":2,"path":["core","mem","drop"],"kind":"function"},"2:42484:128":{"crate_id":2,"path":["core","fmt","Error"],"kind":"struct"},"6:4962:7052":{"crate_id":6,"path":["libc","unix","linux_like","linux","dirent"],"kind":"struct"},"5:4001:4549":{"crate_id":5,"path":["alloc","collections","vec_deque","drain","Drain"],"kind":"struct"},"6:7510:7488":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_rwlockattr_t"],"kind":"struct"},"5:626:8846":{"crate_id":5,"path":["alloc","boxed","from","StringError"],"kind":"struct"},"6:4715:6924":{"crate_id":6,"path":["libc","unix","linux_like","linux","genlmsghdr"],"kind":"struct"},"2:42682:8373":{"crate_id":2,"path":["core","hash","sip","SipHasher"],"kind":"struct"},"24:5341:2245":{"crate_id":24,"path":["syn","path","QSelf"],"kind":"struct"},"2:40678:3304":{"crate_id":2,"path":["core","iter","sources","from_fn","FromFn"],"kind":"struct"},"1:11932:745":{"crate_id":1,"path":["std","i64"],"kind":"primitive"},"17:8651:5220":{"crate_id":17,"path":["object","endian","LittleEndian"],"kind":"struct"},"1:8076:9010":{"crate_id":1,"path":["std","io","readbuf","BorrowedCursor"],"kind":"struct"},"2:44305:195":{"crate_id":2,"path":["core","task","poll","Poll"],"kind":"enum"},"6:4637:6900":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Phdr"],"kind":"struct"},"22:783:233":{"crate_id":22,"path":["proc_macro2","imp","TokenStream"],"kind":"enum"},"1:5586:4950":{"crate_id":1,"path":["std","sync","mpsc","Sender"],"kind":"struct"},"2:9628:4935":{"crate_id":2,"path":["core","slice","sort","merge_sort","RunVec"],"kind":"struct"},"16:2879:6085":{"crate_id":16,"path":["gimli","common","DebugFrameOffset"],"kind":"struct"},"2:20993:9014":{"crate_id":2,"path":["core","core_simd","lane_count","sealed","Sealed"],"kind":"trait"},"2:39969:8337":{"crate_id":2,"path":["core","async_iter","from_iter","FromIter"],"kind":"struct"},"16:3899:6120":{"crate_id":16,"path":["gimli","constants","DwChildren"],"kind":"struct"},"17:12923:5766":{"crate_id":17,"path":["object","pe","ImageOptionalHeader32"],"kind":"struct"},"1:7688:8931":{"crate_id":1,"path":["std","backtrace","RawFrame"],"kind":"enum"},"21:1072:1900":{"crate_id":21,"path":["proc_macro","bridge","client","Span"],"kind":"struct"},"2:44297:211":{"crate_id":2,"path":["core","future","ResumeTy"],"kind":"struct"},"2:40050:3415":{"crate_id":2,"path":["core","char","EscapeDefault"],"kind":"struct"},"1:4135:9096":{"crate_id":1,"path":["std","os","unix","net","ancillary","AncillaryData"],"kind":"enum"},"14:221:6387":{"crate_id":14,"path":["rustc_demangle","SizeLimitExhausted"],"kind":"struct"},"2:21099:9214":{"crate_id":2,"path":["core","core_simd","masks","to_bitmask","ToBitMask"],"kind":"trait"},"22:713:1900":{"crate_id":22,"path":["proc_macro2","fallback","Span"],"kind":"struct"},"17:13678:5992":{"crate_id":17,"path":["object","pe","ImageAlphaRuntimeFunctionEntry"],"kind":"struct"},"17:13292:5868":{"crate_id":17,"path":["object","pe","ImageExportDirectory"],"kind":"struct"},"16:6558:8212":{"crate_id":16,"path":["gimli","read","line","LineRows"],"kind":"struct"},"24:5273:3227":{"crate_id":24,"path":["syn","op","UnOp"],"kind":"enum"},"1:6396:9168":{"crate_id":1,"path":["std","sync","once","OnceState"],"kind":"struct"},"17:8598:21219":{"crate_id":17,"path":["object","common","SymbolFlags"],"kind":"enum"},"2:7215:3322":{"crate_id":2,"path":["core","iter","traits","collect","Extend"],"kind":"trait"},"24:4820:3188":{"crate_id":24,"path":["syn","expr","ExprContinue"],"kind":"struct"},"2:41388:7763":{"crate_id":2,"path":["core","net","socket_addr","SocketAddrV6"],"kind":"struct"},"24:5146:3218":{"crate_id":24,"path":["syn","lit","LitBool"],"kind":"struct"},"24:547:210":{"crate_id":24,"path":["syn","error","Result"],"kind":"typedef"},"24:1405:1905":{"crate_id":24,"path":["syn","meta","ParseNestedMeta"],"kind":"struct"},"2:43198:7780":{"crate_id":2,"path":["core","slice","iter","ArrayWindows"],"kind":"struct"},"5:1461:8277":{"crate_id":5,"path":["alloc","collections","btree","map","Keys"],"kind":"struct"},"2:32067:1988":{"crate_id":2,"path":["core","error","private","Internal"],"kind":"struct"},"24:335:3377":{"crate_id":24,"path":["syn","buffer","Cursor"],"kind":"struct"},"2:22238:178":{"crate_id":2,"path":["core","num","nonzero","NonZeroU8"],"kind":"struct"},"16:4624:6130":{"crate_id":16,"path":["gimli","constants","DwVirtuality"],"kind":"struct"},"2:9151:120":{"crate_id":2,"path":["core","fmt","Display"],"kind":"trait"},"17:10615:8113":{"crate_id":17,"path":["object","read","pe","import","DelayLoadImportTable"],"kind":"struct"},"2:41462:3258":{"crate_id":2,"path":["core","option","Iter"],"kind":"struct"},"24:4570:2043":{"crate_id":24,"path":["syn","derive","DataEnum"],"kind":"struct"},"2:45557:7800":{"crate_id":2,"path":["core","core_arch","simd","u32x2"],"kind":"struct"},"2:45606:7802":{"crate_id":2,"path":["core","core_arch","simd","i8x8"],"kind":"struct"},"17:12259:5586":{"crate_id":17,"path":["object","macho","DylibModule64"],"kind":"struct"},"17:9566:21224":{"crate_id":17,"path":["object","read","coff","symbol","SymbolIterator"],"kind":"struct"},"1:2580:8857":{"crate_id":1,"path":["std","io","buffered","bufwriter","WriterPanicked"],"kind":"struct"},"2:42182:3413":{"crate_id":2,"path":["core","fmt","num","UpperHex"],"kind":"struct"},"18:671:25131":{"crate_id":18,"path":["memchr","memmem","FindRevIter"],"kind":"struct"},"24:4317:3518":{"crate_id":24,"path":["syn","token","Shl"],"kind":"struct"},"16:2808:6082":{"crate_id":16,"path":["gimli","common","DebugStrOffsetsIndex"],"kind":"struct"},"24:2616:3453":{"crate_id":24,"path":["syn","token","Become"],"kind":"struct"},"2:43635:8397":{"crate_id":2,"path":["core","str","iter","LinesAny"],"kind":"struct"},"24:3347:3479":{"crate_id":24,"path":["syn","token","Virtual"],"kind":"struct"},"6:5954:7236":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ntptimeval"],"kind":"struct"},"1:11056:26934":{"crate_id":1,"path":["std","sys","unix","thread","cgroups","Cgroup"],"kind":"enum"},"1:11936:1499":{"crate_id":1,"path":["std","u32"],"kind":"primitive"},"1:8153:3335":{"crate_id":1,"path":["std","io","Chain"],"kind":"struct"},"17:12358:5596":{"crate_id":17,"path":["object","macho","LinkeditDataCommand"],"kind":"struct"},"6:5043:7093":{"crate_id":6,"path":["libc","unix","linux_like","linux","ifreq"],"kind":"struct"},"11:365:4867":{"crate_id":11,"path":["hashbrown","raw","RawDrain"],"kind":"struct"},"17:10660:5306":{"crate_id":17,"path":["object","read","pe","relocation","Relocation"],"kind":"struct"},"2:2470:14432":{"crate_id":2,"path":["core","convert","num","FloatToInt"],"kind":"trait"},"2:2788:5085":{"crate_id":2,"path":["core","ops","arith","SubAssign"],"kind":"trait"},"6:1602:6656":{"crate_id":6,"path":["libc","unix","linux_like","lconv"],"kind":"struct"},"2:20605:33441":{"crate_id":2,"path":["core","core_simd","swizzle","deinterleave","Even"],"kind":"struct"},"2:44110:8430":{"crate_id":2,"path":["core","str","IsAsciiWhitespace"],"kind":"struct"},"9:325:6478":{"crate_id":9,"path":["miniz_oxide","inflate","core","LocalVars"],"kind":"struct"},"5:1254:8248":{"crate_id":5,"path":["alloc","collections","btree","map","entry","Entry"],"kind":"enum"},"2:43960:8414":{"crate_id":2,"path":["core","str","pattern","EmptyNeedle"],"kind":"struct"},"24:4172:3508":{"crate_id":24,"path":["syn","token","OrOr"],"kind":"struct"},"24:3194:3474":{"crate_id":24,"path":["syn","token","Super"],"kind":"struct"},"22:816:1821":{"crate_id":22,"path":["proc_macro2","imp","Group"],"kind":"enum"},"2:45405:7794":{"crate_id":2,"path":["core","core_arch","simd","u8x4"],"kind":"struct"},"1:2348:4475":{"crate_id":1,"path":["std","fs","metadata"],"kind":"function"},"1:3406:7956":{"crate_id":1,"path":["std","io","Read"],"kind":"trait"},"5:2220:36686":{"crate_id":5,"path":["alloc","collections","btree","navigate","LazyLeafHandle"],"kind":"enum"},"11:2201:3296":{"crate_id":11,"path":["hashbrown","TryReserveError"],"kind":"enum"},"2:40020:8339":{"crate_id":2,"path":["core","char","decode","DecodeUtf16"],"kind":"struct"},"2:42457:71":{"crate_id":2,"path":["core","fmt","rt","Argument"],"kind":"struct"},"24:5078:2477":{"crate_id":24,"path":["syn","generics","PredicateType"],"kind":"struct"},"2:40364:3352":{"crate_id":2,"path":["core","iter","adapters","intersperse","Intersperse"],"kind":"struct"},"2:41297:1900":{"crate_id":2,"path":["core","net","ip_addr","fmt","Span"],"kind":"struct"},"2:43663:8400":{"crate_id":2,"path":["core","str","iter","EncodeUtf16"],"kind":"struct"},"11:399:37054":{"crate_id":11,"path":["hashbrown","raw","RawIterHash"],"kind":"struct"},"22:703:3426":{"crate_id":22,"path":["proc_macro2","fallback","SourceFile"],"kind":"struct"},"6:1594:6651":{"crate_id":6,"path":["libc","unix","linux_like","Dl_info"],"kind":"struct"},"1:7600:4234":{"crate_id":1,"path":["std","thread","local","AccessError"],"kind":"struct"},"11:798:8935":{"crate_id":11,"path":["hashbrown","map","RawEntryBuilderMut"],"kind":"struct"},"2:43493:8389":{"crate_id":2,"path":["core","str","iter","RSplitN"],"kind":"struct"},"17:13426:5907":{"crate_id":17,"path":["object","pe","ImageResourceDirStringU"],"kind":"struct"},"17:9886:21284":{"crate_id":17,"path":["object","read","elf","hash","HashTable"],"kind":"struct"},"24:5457:3239":{"crate_id":24,"path":["syn","ty","TypeImplTrait"],"kind":"struct"},"17:13240:5859":{"crate_id":17,"path":["object","pe","ImageRelocation"],"kind":"struct"},"1:10386:4972":{"crate_id":1,"path":["std","sys","unix","stack_overflow","Handler"],"kind":"struct"},"2:5384:4896":{"crate_id":2,"path":["core","iter","adapters","filter","next_chunk","Guard"],"kind":"struct"},"24:3962:3494":{"crate_id":24,"path":["syn","token","DotDotEq"],"kind":"struct"},"5:7149:3296":{"crate_id":5,"path":["alloc","collections","TryReserveError"],"kind":"struct"},"17:13791:6023":{"crate_id":17,"path":["object","pe","ImageDebugMisc"],"kind":"struct"},"17:10052:21328":{"crate_id":17,"path":["object","read","macho","file","MachOFile"],"kind":"struct"},"2:2763:5082":{"crate_id":2,"path":["core","ops","arith","Mul"],"kind":"trait"},"17:10015:21346":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldSubCache"],"kind":"struct"},"17:13461:5915":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation32"],"kind":"struct"},"2:39990:32784":{"crate_id":2,"path":["core","char","convert","CharErrorKind"],"kind":"enum"},"1:8195:9060":{"crate_id":1,"path":["std","net","tcp","IntoIncoming"],"kind":"struct"},"16:6376:6089":{"crate_id":16,"path":["gimli","read","aranges","DebugAranges"],"kind":"struct"},"24:4846:3194":{"crate_id":24,"path":["syn","expr","ExprInfer"],"kind":"struct"},"6:4523:6873":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_effect"],"kind":"struct"},"2:20560:33259":{"crate_id":2,"path":["core","core_simd","swizzle","rotate_lanes_left","Rotate"],"kind":"struct"},"21:368:4574":{"crate_id":21,"path":["proc_macro","bridge","rpc","PanicMessage"],"kind":"enum"},"1:6355:28240":{"crate_id":1,"path":["std","sync","mutex","fmt","LockedPlaceholder"],"kind":"struct"},"17:12576:5634":{"crate_id":17,"path":["object","macho","NoteCommand"],"kind":"struct"},"2:20920:9227":{"crate_id":2,"path":["core","core_simd","elements","uint","SimdUint"],"kind":"trait"},"2:4326:3389":{"crate_id":2,"path":["core","cell","BorrowRef"],"kind":"struct"},"11:760:4547":{"crate_id":11,"path":["hashbrown","map","ExtractIf"],"kind":"struct"},"16:2502:6069":{"crate_id":16,"path":["gimli","common","DebugLineOffset"],"kind":"struct"},"2:20753:9223":{"crate_id":2,"path":["core","core_simd","cast","SimdCastPtr"],"kind":"trait"},"2:6589:2629":{"crate_id":2,"path":["core","iter","adapters","zip","zip"],"kind":"function"},"2:11721:14373":{"crate_id":2,"path":["core","str","pattern","Pattern"],"kind":"trait"},"6:4534:6878":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_ff_upload"],"kind":"struct"},"16:2448:6067":{"crate_id":16,"path":["gimli","common","DebugArangesOffset"],"kind":"struct"},"21:0:1076":{"crate_id":21,"path":["proc_macro"],"kind":"module"},"2:7636:35166":{"crate_id":2,"path":["core","net","display_buffer","DisplayBuffer"],"kind":"struct"},"1:638:8927":{"crate_id":1,"path":["std","backtrace","BacktraceSymbol"],"kind":"struct"},"17:9108:37111":{"crate_id":17,"path":["object","read","any","SectionIteratorInternal"],"kind":"enum"},"1:11930:743":{"crate_id":1,"path":["std","i16"],"kind":"primitive"},"1:11239:8465":{"crate_id":1,"path":["std","sys_common","wtf8","Wtf8Buf"],"kind":"struct"},"1:959:8939":{"crate_id":1,"path":["std","collections","hash","map","RawEntryBuilder"],"kind":"struct"},"16:7743:6094":{"crate_id":16,"path":["gimli","read","unit","DebugInfo"],"kind":"struct"},"24:1089:1909":{"crate_id":24,"path":["syn","lifetime","Lifetime"],"kind":"function"},"2:42168:3403":{"crate_id":2,"path":["core","fmt","num","Octal"],"kind":"struct"},"1:2855:4947":{"crate_id":1,"path":["std","io","error","repr_bitpacked","Repr"],"kind":"struct"},"2:2812:5074":{"crate_id":2,"path":["core","ops","bit","BitAnd"],"kind":"trait"},"16:7042:8246":{"crate_id":16,"path":["gimli","read","lookup","PubStuffHeader"],"kind":"struct"},"2:41211:155":{"crate_id":2,"path":["core","net","ip_addr","IpAddr"],"kind":"enum"},"24:1491:3366":{"crate_id":24,"path":["syn","parse","ParseBuffer"],"kind":"struct"},"17:9986:8102":{"crate_id":17,"path":["object","read","elf","version","VernauxIterator"],"kind":"struct"},"6:4983:7064":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_setup"],"kind":"struct"},"17:13385:5893":{"crate_id":17,"path":["object","pe","ImageDelayloadDescriptor"],"kind":"struct"},"2:46430:7846":{"crate_id":2,"path":["core","core_arch","simd","u32x8"],"kind":"struct"},"2:2922:2241":{"crate_id":2,"path":["core","ops","drop","Drop"],"kind":"trait"},"16:5594:6093":{"crate_id":16,"path":["gimli","read","cfi","EhFrameHdr"],"kind":"struct"},"24:5188:3226":{"crate_id":24,"path":["syn","op","BinOp"],"kind":"enum"},"2:2827:3518":{"crate_id":2,"path":["core","ops","bit","Shl"],"kind":"trait"},"1:1985:184":{"crate_id":1,"path":["std","ffi","os_str","OsStr"],"kind":"struct"},"17:13053:5813":{"crate_id":17,"path":["object","pe","AnonObjectHeader"],"kind":"struct"},"1:5408:9150":{"crate_id":1,"path":["std","process","Command"],"kind":"struct"},"16:2862:6084":{"crate_id":16,"path":["gimli","common","DebugTypeSignature"],"kind":"struct"},"5:6252:4549":{"crate_id":5,"path":["alloc","vec","drain","Drain"],"kind":"struct"},"1:7722:8853":{"crate_id":1,"path":["std","env","JoinPathsError"],"kind":"struct"},"17:13721:6008":{"crate_id":17,"path":["object","pe","ImageEnclaveConfig64"],"kind":"struct"},"6:4728:6928":{"crate_id":6,"path":["libc","unix","linux_like","linux","arpd_request"],"kind":"struct"},"16:8109:8266":{"crate_id":16,"path":["gimli","read","unit","EntriesTree"],"kind":"struct"},"1:8947:4215":{"crate_id":1,"path":["std","sync","mpmc","context","Inner"],"kind":"struct"},"2:44126:7786":{"crate_id":2,"path":["core","time","Nanoseconds"],"kind":"struct"},"24:4841:3193":{"crate_id":24,"path":["syn","expr","ExprIndex"],"kind":"struct"},"16:6990:6212":{"crate_id":16,"path":["gimli","read","loclists","LocationListEntry"],"kind":"struct"},"2:42906:7779":{"crate_id":2,"path":["core","slice","sort","TimSortRun"],"kind":"struct"},"21:649:3429":{"crate_id":21,"path":["proc_macro","diagnostic","MultiSpan"],"kind":"trait"},"24:2837:2153":{"crate_id":24,"path":["syn","token","Fn"],"kind":"struct"},"2:42429:110":{"crate_id":2,"path":["core","fmt","rt","Count"],"kind":"enum"},"6:1637:6685":{"crate_id":6,"path":["libc","unix","linux_like","ifaddrs"],"kind":"struct"},"6:1630:6681":{"crate_id":6,"path":["libc","unix","linux_like","in_pktinfo"],"kind":"struct"},"16:2694:6077":{"crate_id":16,"path":["gimli","common","RangeListsOffset"],"kind":"struct"},"1:11935:1498":{"crate_id":1,"path":["std","u16"],"kind":"primitive"},"24:1761:1826":{"crate_id":24,"path":["syn","punctuated","Punctuated"],"kind":"struct"},"17:11653:5458":{"crate_id":17,"path":["object","elf","GnuHashHeader"],"kind":"struct"},"24:3938:3492":{"crate_id":24,"path":["syn","token","DotDot"],"kind":"struct"},"2:2354:189":{"crate_id":2,"path":["core","cmp","PartialOrd"],"kind":"trait"},"17:10580:8111":{"crate_id":17,"path":["object","read","pe","import","ImportDescriptorIterator"],"kind":"struct"},"6:5848:7175":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","mallinfo"],"kind":"struct"},"17:10478:21358":{"crate_id":17,"path":["object","read","pe","section","PeSectionIterator"],"kind":"struct"},"16:5998:21141":{"crate_id":16,"path":["gimli","read","cfi","CfaRule"],"kind":"enum"},"1:8263:9061":{"crate_id":1,"path":["std","os","unix","net","listener","Incoming"],"kind":"struct"},"24:3041:3469":{"crate_id":24,"path":["syn","token","Override"],"kind":"struct"},"2:20547:4119":{"crate_id":2,"path":["core","core_simd","swizzle","reverse","Reverse"],"kind":"struct"},"5:7033:4883":{"crate_id":5,"path":["alloc","collections","binary_heap","DrainSorted"],"kind":"struct"},"1:8189:9061":{"crate_id":1,"path":["std","net","tcp","Incoming"],"kind":"struct"},"2:44287:205":{"crate_id":2,"path":["core","future","ready","Ready"],"kind":"struct"},"2:40276:3327":{"crate_id":2,"path":["core","iter","adapters","cloned","Cloned"],"kind":"struct"},"17:13744:6009":{"crate_id":17,"path":["object","pe","ImageEnclaveImport"],"kind":"struct"},"24:3398:247":{"crate_id":24,"path":["syn","token","Yield"],"kind":"struct"},"17:11969:5525":{"crate_id":17,"path":["object","macho","Section64"],"kind":"struct"},"17:13082:5821":{"crate_id":17,"path":["object","pe","AnonObjectHeaderBigobj"],"kind":"struct"},"2:2161:4484":{"crate_id":2,"path":["core","ptr","from_exposed_addr"],"kind":"function"},"1:5343:9146":{"crate_id":1,"path":["std","process","Child"],"kind":"struct"},"24:4781:3179":{"crate_id":24,"path":["syn","expr","ExprAsync"],"kind":"struct"},"16:6728:8218":{"crate_id":16,"path":["gimli","read","line","LineProgramHeader"],"kind":"struct"},"16:4327:6122":{"crate_id":16,"path":["gimli","constants","DwAt"],"kind":"struct"},"17:9683:21263":{"crate_id":17,"path":["object","read","elf","segment","ElfSegment"],"kind":"struct"},"6:6014:7263":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_entry"],"kind":"struct"},"5:5215:4872":{"crate_id":5,"path":["alloc","slice","hack","to_vec","DropGuard"],"kind":"struct"},"6:4954:7047":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_nl"],"kind":"struct"},"1:11941:1128":{"crate_id":1,"path":["std","reference"],"kind":"primitive"},"17:13419:5906":{"crate_id":17,"path":["object","pe","ImageResourceDirectoryString"],"kind":"struct"},"24:5026:3213":{"crate_id":24,"path":["syn","generics","BoundLifetimes"],"kind":"struct"},"6:1535:6612":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_in6"],"kind":"struct"},"17:13433:5908":{"crate_id":17,"path":["object","pe","ImageResourceDataEntry"],"kind":"struct"},"24:4908:3208":{"crate_id":24,"path":["syn","expr","ExprTuple"],"kind":"struct"},"16:7509:6102":{"crate_id":16,"path":["gimli","read","pubtypes","DebugPubTypes"],"kind":"struct"},"17:8931:5229":{"crate_id":17,"path":["object","read","util","ByteString"],"kind":"struct"},"6:4649:6901":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Shdr"],"kind":"struct"},"2:47540:7890":{"crate_id":2,"path":["core","core_arch","simd","f32x16"],"kind":"struct"},"24:1506:3367":{"crate_id":24,"path":["syn","parse","StepCursor"],"kind":"struct"},"2:9161:194":{"crate_id":2,"path":["core","fmt","Pointer"],"kind":"trait"},"2:42703:7775":{"crate_id":2,"path":["core","hash","sip","State"],"kind":"struct"},"1:8111:7953":{"crate_id":1,"path":["std","io","util","Sink"],"kind":"struct"},"2:43521:8391":{"crate_id":2,"path":["core","str","iter","MatchIndices"],"kind":"struct"},"2:5532:3340":{"crate_id":2,"path":["core","iter","adapters","flatten","FlatMap"],"kind":"struct"},"11:805:8936":{"crate_id":11,"path":["hashbrown","map","RawEntryMut"],"kind":"enum"},"24:4777:3178":{"crate_id":24,"path":["syn","expr","ExprAssign"],"kind":"struct"},"2:9153:3403":{"crate_id":2,"path":["core","fmt","Octal"],"kind":"trait"},"17:9350:37112":{"crate_id":17,"path":["object","read","any","SectionRelocationIteratorInternal"],"kind":"enum"},"24:4440:2500":{"crate_id":24,"path":["syn","token","Brace"],"kind":"struct"},"24:4522:1892":{"crate_id":24,"path":["syn","data","Fields"],"kind":"enum"},"24:5445:3237":{"crate_id":24,"path":["syn","ty","TypeBareFn"],"kind":"struct"},"11:1068:20213":{"crate_id":11,"path":["hashbrown","map","OccupiedEntryRef"],"kind":"struct"},"11:1103:20214":{"crate_id":11,"path":["hashbrown","map","VacantEntryRef"],"kind":"struct"},"2:25858:7545":{"crate_id":2,"path":["core","num","wrapping","Wrapping"],"kind":"struct"},"1:3472:26056":{"crate_id":1,"path":["std","io","Write","write_fmt","Adapter"],"kind":"struct"},"1:10876:26921":{"crate_id":1,"path":["std","sys","unix","process","process_common","ProgramKind"],"kind":"enum"},"1:2544:4944":{"crate_id":1,"path":["std","io","buffered","bufwriter","BufWriter"],"kind":"struct"},"24:4102:3503":{"crate_id":24,"path":["syn","token","MinusEq"],"kind":"struct"},"6:1732:6733":{"crate_id":6,"path":["libc","unix","linux_like","sigevent"],"kind":"struct"},"16:6146:194":{"crate_id":16,"path":["gimli","read","cfi","Pointer"],"kind":"enum"},"17:10747:128":{"crate_id":17,"path":["object","read","Error"],"kind":"struct"},"2:47784:7902":{"crate_id":2,"path":["core","core_arch","x86","__m512d"],"kind":"struct"},"17:10428:21382":{"crate_id":17,"path":["object","read","pe","file","PeComdat"],"kind":"struct"},"6:5919:7215":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","timex"],"kind":"struct"},"1:10741:7954":{"crate_id":1,"path":["std","sys","unix","io","IoSlice"],"kind":"struct"},"2:41234:7753":{"crate_id":2,"path":["core","net","ip_addr","Ipv4Addr"],"kind":"struct"},"17:10270:21315":{"crate_id":17,"path":["object","read","macho","segment","MachOSegment"],"kind":"struct"},"1:3463:3409":{"crate_id":1,"path":["std","io","Write"],"kind":"trait"},"2:2792:5086":{"crate_id":2,"path":["core","ops","arith","MulAssign"],"kind":"trait"},"6:0:817":{"crate_id":6,"path":["libc"],"kind":"module"},"17:13689:5993":{"crate_id":17,"path":["object","pe","ImageRuntimeFunctionEntry"],"kind":"struct"},"17:1034:21252":{"crate_id":17,"path":["object","read","coff","relocation","CoffRelocationIterator"],"kind":"struct"},"2:43539:8392":{"crate_id":2,"path":["core","str","iter","RMatchIndices"],"kind":"struct"},"6:1556:6627":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_ll"],"kind":"struct"},"17:9488:21251":{"crate_id":17,"path":["object","read","coff","file","CoffFile"],"kind":"struct"},"16:7519:8254":{"crate_id":16,"path":["gimli","read","pubtypes","PubTypesEntryIter"],"kind":"struct"},"2:40304:3337":{"crate_id":2,"path":["core","iter","adapters","enumerate","Enumerate"],"kind":"struct"},"2:23048:7544":{"crate_id":2,"path":["core","num","saturating","Saturating"],"kind":"struct"},"5:7237:8302":{"crate_id":5,"path":["alloc","ffi","c_str","IntoStringError"],"kind":"struct"},"6:1672:6710":{"crate_id":6,"path":["libc","unix","linux_like","arpreq_old"],"kind":"struct"},"6:4495:6857":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_condition_effect"],"kind":"struct"},"16:5811:8146":{"crate_id":16,"path":["gimli","read","cfi","CommonInformationEntry"],"kind":"struct"},"5:1270:8941":{"crate_id":5,"path":["alloc","collections","btree","map","entry","VacantEntry"],"kind":"struct"},"17:12307:5591":{"crate_id":17,"path":["object","macho","TwolevelHint"],"kind":"struct"},"1:5044:28234":{"crate_id":1,"path":["std","path","fmt","DebugHelper"],"kind":"struct"},"11:97:8270":{"crate_id":11,"path":["hashbrown","raw","Bucket"],"kind":"struct"},"1:635:8926":{"crate_id":1,"path":["std","backtrace","BacktraceFrame"],"kind":"struct"},"11:0:3004":{"crate_id":11,"path":["hashbrown"],"kind":"module"},"16:7557:6254":{"crate_id":16,"path":["gimli","read","rnglists","RangeLists"],"kind":"struct"},"1:2212:8993":{"crate_id":1,"path":["std","fs","DirEntry"],"kind":"struct"},"1:8255:9092":{"crate_id":1,"path":["std","os","unix","net","ancillary","SocketAncillary"],"kind":"struct"},"17:10936:5332":{"crate_id":17,"path":["object","read","ObjectMapEntry"],"kind":"struct"},"6:4314:6756":{"crate_id":6,"path":["libc","unix","linux_like","linux","spwd"],"kind":"struct"},"1:6432:4961":{"crate_id":1,"path":["std","sync","once_lock","OnceLock"],"kind":"struct"},"16:2742:6079":{"crate_id":16,"path":["gimli","common","DebugRngListsIndex"],"kind":"struct"},"17:11785:5491":{"crate_id":17,"path":["object","macho","DyldCacheImageInfo"],"kind":"struct"},"24:4512:3163":{"crate_id":24,"path":["syn","attr","MetaNameValue"],"kind":"struct"},"16:2470:6068":{"crate_id":16,"path":["gimli","common","DebugInfoOffset"],"kind":"struct"},"22:0:1678":{"crate_id":22,"path":["proc_macro2"],"kind":"module"},"6:4455:6838":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_mask"],"kind":"struct"},"24:4540:3176":{"crate_id":24,"path":["syn","data","FieldsUnnamed"],"kind":"struct"},"24:5464:3242":{"crate_id":24,"path":["syn","ty","TypeNever"],"kind":"struct"},"1:7971:9041":{"crate_id":1,"path":["std","io","error","ErrorKind"],"kind":"enum"},"1:7499:8863":{"crate_id":1,"path":["std","backtrace_rs","symbolize","SymbolName"],"kind":"struct"},"24:1601:3364":{"crate_id":24,"path":["syn","parse","Parser"],"kind":"trait"},"2:3374:14391":{"crate_id":2,"path":["core","any","Provider"],"kind":"trait"},"2:40030:8340":{"crate_id":2,"path":["core","char","decode","DecodeUtf16Error"],"kind":"struct"},"1:361:4233":{"crate_id":1,"path":["std","thread","scoped","ScopedJoinHandle"],"kind":"struct"},"17:11109:5342":{"crate_id":17,"path":["object","read","CompressedData"],"kind":"struct"},"1:8941:107":{"crate_id":1,"path":["std","sync","mpmc","context","Context"],"kind":"struct"},"6:6617:7353":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stack_t"],"kind":"struct"},"24:869:37485":{"crate_id":24,"path":["syn","generics","Lifetimes"],"kind":"struct"},"14:165:20222":{"crate_id":14,"path":["rustc_demangle","DemangleStyle"],"kind":"enum"},"6:5889:7192":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_mmap_hdr"],"kind":"struct"},"17:10735:5314":{"crate_id":17,"path":["object","read","pe","rich","RichHeaderEntry"],"kind":"struct"},"1:8977:28270":{"crate_id":1,"path":["std","sync","mpmc","list","Position"],"kind":"struct"},"2:43625:8396":{"crate_id":2,"path":["core","str","iter","Lines"],"kind":"struct"},"6:6597:7347":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","flock64"],"kind":"struct"},"6:1499:6596":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreq"],"kind":"struct"},"6:7539:7495":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_cond_t"],"kind":"struct"},"2:39269:201":{"crate_id":2,"path":["core","ops","range","RangeInclusive"],"kind":"struct"},"2:9110:210":{"crate_id":2,"path":["core","fmt","Result"],"kind":"typedef"},"24:5498:3235":{"crate_id":24,"path":["syn","ty","BareVariadic"],"kind":"struct"},"17:8490:21215":{"crate_id":17,"path":["object","common","RelocationEncoding"],"kind":"enum"},"16:5963:8163":{"crate_id":16,"path":["gimli","read","cfi","RegisterRuleIter"],"kind":"struct"},"24:5454:3238":{"crate_id":24,"path":["syn","ty","TypeGroup"],"kind":"struct"},"1:3155:26744":{"crate_id":1,"path":["std","io","stdio","StdoutRaw"],"kind":"struct"},"16:5779:6149":{"crate_id":16,"path":["gimli","read","cfi","Augmentation"],"kind":"struct"},"1:4702:9083":{"crate_id":1,"path":["std","os","fd","raw","AsRawFd"],"kind":"trait"},"1:3152:30617":{"crate_id":1,"path":["std","io","stdio","StdinRaw"],"kind":"struct"},"2:41759:88":{"crate_id":2,"path":["core","sync","atomic","AtomicU16"],"kind":"struct"},"11:2186:37048":{"crate_id":11,"path":["hashbrown","raw","Fallibility"],"kind":"enum"},"2:32158:4110":{"crate_id":2,"path":["core","marker","PhantomPinned"],"kind":"struct"},"1:2558:4931":{"crate_id":1,"path":["std","io","buffered","bufwriter","flush_buf","BufGuard"],"kind":"struct"},"5:5263:14352":{"crate_id":5,"path":["alloc","slice","Join"],"kind":"trait"},"24:4912:3209":{"crate_id":24,"path":["syn","expr","ExprUnary"],"kind":"struct"},"6:4462:6841":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_replay"],"kind":"struct"},"6:6687:7377":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statvfs64"],"kind":"struct"},"24:5469:2248":{"crate_id":24,"path":["syn","ty","TypePath"],"kind":"struct"},"1:936:8936":{"crate_id":1,"path":["std","collections","hash","map","RawEntryMut"],"kind":"enum"},"2:21865:7529":{"crate_id":2,"path":["core","num","diy_float","Fp"],"kind":"struct"},"16:0:3008":{"crate_id":16,"path":["gimli"],"kind":"module"},"24:4884:3202":{"crate_id":24,"path":["syn","expr","ExprReference"],"kind":"struct"},"17:9596:5243":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbol"],"kind":"struct"},"22:825:1832":{"crate_id":22,"path":["proc_macro2","imp","Ident"],"kind":"enum"},"2:45836:7816":{"crate_id":2,"path":["core","core_arch","simd","u32x4"],"kind":"struct"},"5:892:3258":{"crate_id":5,"path":["alloc","collections","binary_heap","Iter"],"kind":"struct"},"2:7599:3320":{"crate_id":2,"path":["core","iter","traits","marker","TrustedStep"],"kind":"trait"},"2:46050:7823":{"crate_id":2,"path":["core","core_arch","simd","f64x2"],"kind":"struct"},"6:595:6590":{"crate_id":6,"path":["libc","unix","protoent"],"kind":"struct"},"2:21570:9014":{"crate_id":2,"path":["core","core_simd","vector","sealed","Sealed"],"kind":"trait"},"18:491:8079":{"crate_id":18,"path":["memchr","cow","Imp"],"kind":"struct"},"6:4763:6947":{"crate_id":6,"path":["libc","unix","linux_like","linux","regmatch_t"],"kind":"struct"},"24:4574:2045":{"crate_id":24,"path":["syn","derive","DataUnion"],"kind":"struct"},"2:47338:7887":{"crate_id":2,"path":["core","core_arch","simd","u16x32"],"kind":"struct"},"2:1747:7518":{"crate_id":2,"path":["core","ptr","metadata","PtrComponents"],"kind":"struct"},"16:4702:6131":{"crate_id":16,"path":["gimli","constants","DwLang"],"kind":"struct"},"1:10699:8461":{"crate_id":1,"path":["std","sys","unix","fs","FilePermissions"],"kind":"struct"},"1:10238:9150":{"crate_id":1,"path":["std","sys","unix","process","process_common","Command"],"kind":"struct"},"21:2351:1832":{"crate_id":21,"path":["proc_macro","bridge","Ident"],"kind":"struct"},"24:5134:2035":{"crate_id":24,"path":["syn","lit","LitStr"],"kind":"struct"},"16:8129:21158":{"crate_id":16,"path":["gimli","read","unit","EntriesTreeNode"],"kind":"struct"},"2:9374:145":{"crate_id":2,"path":["core","hash","Hasher"],"kind":"trait"},"6:6849:7462":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user_fpregs_struct"],"kind":"struct"},"24:909:37484":{"crate_id":24,"path":["syn","generics","ConstParamsMut"],"kind":"struct"},"16:6400:8198":{"crate_id":16,"path":["gimli","read","aranges","ArangeHeader"],"kind":"struct"},"6:4488:6854":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_ramp_effect"],"kind":"struct"},"2:22502:171":{"crate_id":2,"path":["core","num","nonzero","NonZeroI32"],"kind":"struct"},"16:8156:6108":{"crate_id":16,"path":["gimli","read","unit","DebugTypes"],"kind":"struct"},"5:4193:4896":{"crate_id":5,"path":["alloc","collections","vec_deque","into_iter","try_rfold","Guard"],"kind":"struct"},"2:21572:9216":{"crate_id":2,"path":["core","core_simd","vector","SimdElement"],"kind":"trait"},"24:4802:3184":{"crate_id":24,"path":["syn","expr","ExprCall"],"kind":"struct"},"1:947:8937":{"crate_id":1,"path":["std","collections","hash","map","RawOccupiedEntryMut"],"kind":"struct"},"16:8025:3161":{"crate_id":16,"path":["gimli","read","unit","Attribute"],"kind":"struct"},"5:3214:35721":{"crate_id":5,"path":["alloc","collections","btree","set","IntersectionInner"],"kind":"enum"},"5:6601:4554":{"crate_id":5,"path":["alloc","vec","in_place_drop","InPlaceDrop"],"kind":"struct"},"2:10248:8388":{"crate_id":2,"path":["core","slice","iter","SplitN"],"kind":"struct"},"17:10967:5333":{"crate_id":17,"path":["object","read","Import"],"kind":"struct"},"5:3580:3258":{"crate_id":5,"path":["alloc","collections","linked_list","Iter"],"kind":"struct"},"18:599:5075":{"crate_id":18,"path":["memchr","memmem","twoway","Shift"],"kind":"enum"},"17:12607:5640":{"crate_id":17,"path":["object","macho","Nlist64"],"kind":"struct"},"18:652:5110":{"crate_id":18,"path":["memchr","memmem","x86","sse","Forward"],"kind":"struct"},"2:42466:68":{"crate_id":2,"path":["core","fmt","Alignment"],"kind":"enum"},"17:9653:21276":{"crate_id":17,"path":["object","read","elf","file","ElfFile"],"kind":"struct"},"1:7875:26746":{"crate_id":1,"path":["std","io","buffered","linewritershim","LineWriterShim"],"kind":"struct"},"1:5202:190":{"crate_id":1,"path":["std","path","Path"],"kind":"struct"},"1:875:8277":{"crate_id":1,"path":["std","collections","hash","map","Keys"],"kind":"struct"},"9:234:7775":{"crate_id":9,"path":["miniz_oxide","inflate","core","State"],"kind":"enum"},"16:7478:6101":{"crate_id":16,"path":["gimli","read","pubnames","DebugPubNames"],"kind":"struct"},"11:2168:1821":{"crate_id":11,"path":["hashbrown","raw","sse2","Group"],"kind":"struct"},"2:2847:5089":{"crate_id":2,"path":["core","ops","bit","BitXorAssign"],"kind":"trait"},"1:11939:790":{"crate_id":1,"path":["std","isize"],"kind":"primitive"},"2:44114:8431":{"crate_id":2,"path":["core","str","IsNotEmpty"],"kind":"struct"},"2:40432:3347":{"crate_id":2,"path":["core","iter","adapters","skip","Skip"],"kind":"struct"},"5:3593:3262":{"crate_id":5,"path":["alloc","collections","linked_list","IterMut"],"kind":"struct"},"2:2753:3285":{"crate_id":2,"path":["core","ops","arith","Add"],"kind":"trait"},"2:2245:98":{"crate_id":2,"path":["core","borrow","BorrowMut"],"kind":"trait"},"16:6243:37074":{"crate_id":16,"path":["gimli","read","dwarf","RangeIterInner"],"kind":"enum"},"1:4599:7370":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt","st_mtime"],"kind":"foreign_type"},"6:5828:7162":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","cmsghdr"],"kind":"struct"},"24:4288:3516":{"crate_id":24,"path":["syn","token","RArrow"],"kind":"struct"},"2:3182:35239":{"crate_id":2,"path":["core","ops","try_trait","NeverShortCircuitResidual"],"kind":"enum"},"24:4868:3199":{"crate_id":24,"path":["syn","expr","ExprMethodCall"],"kind":"struct"},"2:22304:176":{"crate_id":2,"path":["core","num","nonzero","NonZeroU32"],"kind":"struct"},"22:806:1900":{"crate_id":22,"path":["proc_macro2","imp","Span"],"kind":"enum"},"1:11929:746":{"crate_id":1,"path":["std","i8"],"kind":"primitive"},"1:1844:4624":{"crate_id":1,"path":["std","env","Args"],"kind":"struct"},"11:119:4863":{"crate_id":11,"path":["hashbrown","raw","RawTable"],"kind":"struct"},"24:4807:3185":{"crate_id":24,"path":["syn","expr","ExprCast"],"kind":"struct"},"20:37:2877":{"crate_id":20,"path":["quote","format_ident"],"kind":"macro"},"24:1616:3376":{"crate_id":24,"path":["syn","parse","Nothing"],"kind":"struct"},"2:41799:82":{"crate_id":2,"path":["core","sync","atomic","AtomicI32"],"kind":"struct"},"5:5259:14351":{"crate_id":5,"path":["alloc","slice","Concat"],"kind":"trait"},"11:1826:4549":{"crate_id":11,"path":["hashbrown","set","Drain"],"kind":"struct"},"5:204:4467":{"crate_id":5,"path":["alloc","boxed","thin","ThinBox"],"kind":"struct"},"17:13499:5923":{"crate_id":17,"path":["object","pe","ImagePrologueDynamicRelocationHeader"],"kind":"struct"},"14:7:8839":{"crate_id":14,"path":["rustc_demangle","legacy","Demangle"],"kind":"struct"},"2:3234:3399":{"crate_id":2,"path":["core","ops","unsize","DispatchFromDyn"],"kind":"trait"},"16:6520:6163":{"crate_id":16,"path":["gimli","read","index","UnitIndexSection"],"kind":"struct"},"2:9409:14437":{"crate_id":2,"path":["core","hash","BuildHasher"],"kind":"trait"},"2:2684:220":{"crate_id":2,"path":["core","marker","Send"],"kind":"trait"},"2:30313:32778":{"crate_id":2,"path":["core","ptr","alignment","AlignmentEnum16"],"kind":"enum"},"2:40346:3341":{"crate_id":2,"path":["core","iter","adapters","fuse","Fuse"],"kind":"struct"},"1:4127:9095":{"crate_id":1,"path":["std","os","unix","net","ancillary","ScmCredentials"],"kind":"struct"},"23:0:3130":{"crate_id":23,"path":["unicode_ident"],"kind":"module"},"16:7317:37081":{"crate_id":16,"path":["gimli","read","op","EvaluationState"],"kind":"enum"},"1:10343:9153":{"crate_id":1,"path":["std","sys","unix","process","process_common","CommandArgs"],"kind":"struct"},"1:10255:26499":{"crate_id":1,"path":["std","sys","unix","process","process_common","Argv"],"kind":"struct"},"17:10923:8121":{"crate_id":17,"path":["object","read","ObjectMap"],"kind":"struct"},"22:895:1821":{"crate_id":22,"path":["proc_macro2","Group"],"kind":"struct"},"1:2364:9000":{"crate_id":1,"path":["std","fs","read_link"],"kind":"function"},"17:10626:8114":{"crate_id":17,"path":["object","read","pe","import","DelayLoadDescriptorIterator"],"kind":"struct"},"17:10505:21384":{"crate_id":17,"path":["object","read","pe","section","PeRelocationIterator"],"kind":"struct"},"17:11319:5389":{"crate_id":17,"path":["object","elf","SectionHeader64"],"kind":"struct"},"17:11484:5413":{"crate_id":17,"path":["object","elf","ProgramHeader32"],"kind":"struct"},"2:20607:33446":{"crate_id":2,"path":["core","core_simd","swizzle","deinterleave","Odd"],"kind":"struct"},"24:3330:3478":{"crate_id":24,"path":["syn","token","Use"],"kind":"struct"},"2:3163:14410":{"crate_id":2,"path":["core","ops","try_trait","Residual"],"kind":"trait"},"11:1121:8845":{"crate_id":11,"path":["hashbrown","map","OccupiedError"],"kind":"struct"},"17:10705:5310":{"crate_id":17,"path":["object","read","pe","resource","ResourceName"],"kind":"struct"},"11:1027:20212":{"crate_id":11,"path":["hashbrown","map","EntryRef"],"kind":"enum"},"1:867:3257":{"crate_id":1,"path":["std","collections","hash","map","IntoIter"],"kind":"struct"},"17:10142:21351":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandVariant"],"kind":"enum"},"1:11917:418":{"crate_id":1,"path":["std","char"],"kind":"primitive"},"5:4031:4872":{"crate_id":5,"path":["alloc","collections","vec_deque","drain","drop","DropGuard"],"kind":"struct"},"17:10377:5295":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbol"],"kind":"struct"},"2:12506:107":{"crate_id":2,"path":["core","task","wake","Context"],"kind":"struct"},"2:41614:183":{"crate_id":2,"path":["core","sync","atomic","Ordering"],"kind":"enum"},"1:9067:219":{"crate_id":1,"path":["std","sync","rwlock","RwLockWriteGuard"],"kind":"struct"},"1:8416:7775":{"crate_id":1,"path":["std","path","State"],"kind":"enum"},"21:54:4573":{"crate_id":21,"path":["proc_macro","bridge","buffer","Buffer"],"kind":"struct"},"2:20590:33443":{"crate_id":2,"path":["core","core_simd","swizzle","interleave","Hi"],"kind":"struct"},"2:3648:3257":{"crate_id":2,"path":["core","array","iter","IntoIter"],"kind":"struct"},"18:582:4119":{"crate_id":18,"path":["memchr","memmem","twoway","Reverse"],"kind":"struct"},"17:8632:21195":{"crate_id":17,"path":["object","endian","Endianness"],"kind":"enum"},"2:10276:14368":{"crate_id":2,"path":["core","slice","iter","SplitNMut"],"kind":"struct"},"24:4861:3197":{"crate_id":24,"path":["syn","expr","ExprMacro"],"kind":"struct"},"2:22568:169":{"crate_id":2,"path":["core","num","nonzero","NonZeroI128"],"kind":"struct"},"22:941:1832":{"crate_id":22,"path":["proc_macro2","Ident"],"kind":"struct"},"2:2701:228":{"crate_id":2,"path":["core","marker","Sync"],"kind":"trait"},"24:4056:3500":{"crate_id":24,"path":["syn","token","Le"],"kind":"struct"},"2:40110:7749":{"crate_id":2,"path":["core","char","TryFromCharError"],"kind":"struct"},"2:11283:14377":{"crate_id":2,"path":["core","str","converts","from_utf8"],"kind":"function"},"1:5270:120":{"crate_id":1,"path":["std","path","Display"],"kind":"struct"},"2:40384:3330":{"crate_id":2,"path":["core","iter","adapters","map_while","MapWhile"],"kind":"struct"},"17:13159:5836":{"crate_id":17,"path":["object","pe","ImageSymbolExBytes"],"kind":"struct"},"24:608:3258":{"crate_id":24,"path":["syn","error","Iter"],"kind":"struct"},"1:6259:206":{"crate_id":1,"path":["std","sync","mpmc","Receiver"],"kind":"struct"},"2:2603:128":{"crate_id":2,"path":["core","error","Error"],"kind":"trait"},"22:505:3276":{"crate_id":22,"path":["proc_macro2","LexError"],"kind":"struct"},"17:13316:5876":{"crate_id":17,"path":["object","pe","ImageThunkData64"],"kind":"struct"},"1:4597:7368":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt","st_atime"],"kind":"foreign_type"},"11:630:3258":{"crate_id":11,"path":["hashbrown","map","Iter"],"kind":"struct"},"1:6935:4965":{"crate_id":1,"path":["std","sys_common","lazy_box","LazyBox"],"kind":"struct"},"2:41839:89":{"crate_id":2,"path":["core","sync","atomic","AtomicU32"],"kind":"struct"},"21:2810:1832":{"crate_id":21,"path":["proc_macro","Ident"],"kind":"struct"},"6:506:6535":{"crate_id":6,"path":["libc","unix","rusage"],"kind":"struct"},"2:40263:3335":{"crate_id":2,"path":["core","iter","adapters","chain","Chain"],"kind":"struct"},"1:7645:4221":{"crate_id":1,"path":["std","thread","Thread"],"kind":"struct"},"16:6022:21142":{"crate_id":16,"path":["gimli","read","cfi","RegisterRule"],"kind":"enum"},"2:9366:141":{"crate_id":2,"path":["core","hash","Hash"],"kind":"trait"},"2:4765:388":{"crate_id":2,"path":["core","ffi","c_void"],"kind":"enum"},"21:2662:3425":{"crate_id":21,"path":["proc_macro","ExpandError"],"kind":"struct"},"2:7267:3321":{"crate_id":2,"path":["core","iter","traits","exact_size","ExactSizeIterator"],"kind":"trait"},"1:355:4232":{"crate_id":1,"path":["std","thread","scoped","Scope"],"kind":"struct"},"21:2789:2214":{"crate_id":21,"path":["proc_macro","Punct"],"kind":"struct"},"2:43970:8418":{"crate_id":2,"path":["core","str","pattern","TwoWaySearcher"],"kind":"struct"},"1:8922:7984":{"crate_id":1,"path":["std","sync","condvar","WaitTimeoutResult"],"kind":"struct"},"2:11730:8089":{"crate_id":2,"path":["core","str","pattern","Searcher"],"kind":"trait"},"2:42441:6283":{"crate_id":2,"path":["core","fmt","rt","Flag"],"kind":"enum"},"16:5886:8154":{"crate_id":16,"path":["gimli","read","cfi","FrameDescriptionEntry"],"kind":"struct"},"17:13309:5875":{"crate_id":17,"path":["object","pe","ImageImportByName"],"kind":"struct"},"5:673:231":{"crate_id":5,"path":["alloc","borrow","ToOwned"],"kind":"trait"},"21:141:4583":{"crate_id":21,"path":["proc_macro","bridge","client","Client"],"kind":"struct"},"2:22469:170":{"crate_id":2,"path":["core","num","nonzero","NonZeroI16"],"kind":"struct"},"1:1071:8941":{"crate_id":1,"path":["std","collections","hash","map","VacantEntry"],"kind":"struct"},"17:13249:5860":{"crate_id":17,"path":["object","pe","ImageLinenumber"],"kind":"struct"},"1:3231:9047":{"crate_id":1,"path":["std","io","stdio","Stdout"],"kind":"struct"},"1:11224:7999":{"crate_id":1,"path":["std","sys_common","wtf8","CodePoint"],"kind":"struct"},"2:41317:32737":{"crate_id":2,"path":["core","net","parser","AddrKind"],"kind":"enum"},"17:1919:21295":{"crate_id":17,"path":["object","read","elf","relocation","ElfRelaIterator"],"kind":"enum"},"6:6833:7456":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","seccomp_notif_sizes"],"kind":"struct"},"1:4459:9102":{"crate_id":1,"path":["std","os","unix","process","ExitStatusExt"],"kind":"trait"},"11:2049:8940":{"crate_id":11,"path":["hashbrown","set","OccupiedEntry"],"kind":"struct"},"1:554:4218":{"crate_id":1,"path":["std","thread","JoinHandle"],"kind":"struct"},"6:4663:6902":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Shdr"],"kind":"struct"},"2:39172:8335":{"crate_id":2,"path":["core","ops","index_range","IndexRange"],"kind":"struct"},"17:12835:5703":{"crate_id":17,"path":["object","pe","ImageVxdHeader"],"kind":"struct"},"17:13066:5818":{"crate_id":17,"path":["object","pe","AnonObjectHeaderV2"],"kind":"struct"},"6:4684:6905":{"crate_id":6,"path":["libc","unix","linux_like","linux","mntent"],"kind":"struct"},"1:4006:9074":{"crate_id":1,"path":["std","os","unix","fs","DirEntryExt"],"kind":"trait"},"6:494:6530":{"crate_id":6,"path":["libc","unix","timespec"],"kind":"struct"},"14:215:8268":{"crate_id":14,"path":["rustc_demangle","TryDemangleError"],"kind":"struct"},"6:587:6585":{"crate_id":6,"path":["libc","unix","servent"],"kind":"struct"},"2:39366:2584":{"crate_id":2,"path":["core","any","tags","Value"],"kind":"struct"},"22:874:1900":{"crate_id":22,"path":["proc_macro2","Span"],"kind":"struct"},"17:12902:5758":{"crate_id":17,"path":["object","pe","ImageFileHeader"],"kind":"struct"},"3:0:442":{"crate_id":3,"path":["compiler_builtins"],"kind":"module"},"17:9148:37131":{"crate_id":17,"path":["object","read","any","ComdatIteratorInternal"],"kind":"enum"},"2:44403:8438":{"crate_id":2,"path":["core","escape","EscapeIterInner"],"kind":"struct"},"6:5817:7154":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","msghdr"],"kind":"struct"},"24:4916:3210":{"crate_id":24,"path":["syn","expr","ExprUnsafe"],"kind":"struct"},"24:4566:2041":{"crate_id":24,"path":["syn","derive","DataStruct"],"kind":"struct"},"2:10169:8312":{"crate_id":2,"path":["core","slice","iter","RSplit"],"kind":"struct"},"2:39291:203":{"crate_id":2,"path":["core","ops","range","RangeToInclusive"],"kind":"struct"},"2:2932:3435":{"crate_id":2,"path":["core","ops","function","FnOnce"],"kind":"trait"},"2:46696:7851":{"crate_id":2,"path":["core","core_arch","simd","i64x4"],"kind":"struct"},"2:39187:200":{"crate_id":2,"path":["core","ops","range","RangeFull"],"kind":"struct"},"2:45676:7805":{"crate_id":2,"path":["core","core_arch","simd","i64x1"],"kind":"struct"},"24:4785:3180":{"crate_id":24,"path":["syn","expr","ExprAwait"],"kind":"struct"},"6:4303:6748":{"crate_id":6,"path":["libc","unix","linux_like","linux","passwd"],"kind":"struct"},"6:4841:6984":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlmsgerr"],"kind":"struct"},"2:30052:9065":{"crate_id":2,"path":["core","num","FpCategory"],"kind":"enum"},"11:285:8271":{"crate_id":11,"path":["hashbrown","raw","RawIterRange"],"kind":"struct"}},"external_crates":{"23":{"name":"unicode_ident","html_root_url":"https://docs.rs/unicode-ident/1.0.9/"},"20":{"name":"quote","html_root_url":"https://docs.rs/quote/1.0.28/"},"17":{"name":"object","html_root_url":"https://doc.rust-lang.org/nightly/"},"14":{"name":"rustc_demangle","html_root_url":"https://doc.rust-lang.org/nightly/"},"11":{"name":"hashbrown","html_root_url":"https://doc.rust-lang.org/nightly/"},"8":{"name":"cfg_if","html_root_url":"https://docs.rs/cfg-if/"},"5":{"name":"alloc","html_root_url":"https://doc.rust-lang.org/nightly/"},"2":{"name":"core","html_root_url":"https://doc.rust-lang.org/nightly/"},"22":{"name":"proc_macro2","html_root_url":"https://docs.rs/proc-macro2/1.0.60/"},"19":{"name":"panic_unwind","html_root_url":"https://doc.rust-lang.org/nightly/"},"16":{"name":"gimli","html_root_url":"https://doc.rust-lang.org/nightly/"},"13":{"name":"std_detect","html_root_url":"https://doc.rust-lang.org/nightly/"},"10":{"name":"adler","html_root_url":"https://docs.rs/adler/1.0.2/"},"7":{"name":"unwind","html_root_url":"https://doc.rust-lang.org/nightly/"},"4":{"name":"rustc_std_workspace_core","html_root_url":"https://doc.rust-lang.org/nightly/"},"1":{"name":"std","html_root_url":"https://doc.rust-lang.org/nightly/"},"24":{"name":"syn","html_root_url":"https://docs.rs/syn/2.0.18/"},"21":{"name":"proc_macro","html_root_url":"https://doc.rust-lang.org/nightly/"},"18":{"name":"memchr","html_root_url":"https://doc.rust-lang.org/nightly/"},"15":{"name":"addr2line","html_root_url":"https://doc.rust-lang.org/nightly/"},"12":{"name":"rustc_std_workspace_alloc","html_root_url":"https://doc.rust-lang.org/nightly/"},"9":{"name":"miniz_oxide","html_root_url":"https://doc.rust-lang.org/nightly/"},"6":{"name":"libc","html_root_url":"https://doc.rust-lang.org/nightly/"},"3":{"name":"compiler_builtins","html_root_url":"https://doc.rust-lang.org/nightly/"}},"format_version":26}