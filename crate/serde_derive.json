{"root":"0:0:1992","crate_version":"1.0.197","includes_private":false,"index":{"2:13047:30262":{"id":"2:13047:30262","crate_id":2,"name":"trim_ascii_end","span":null,"visibility":"public","docs":"Returns a string slice with trailing ASCII whitespace removed.\n\n'Whitespace' refers to the definition used by\n[`u8::is_ascii_whitespace`].\n\n[`u8::is_ascii_whitespace`]: u8::is_ascii_whitespace\n\n# Examples\n\n```\n#![feature(byte_slice_trim_ascii)]\n\nassert_eq!(\"\\r hello world\\u{3000}\\n \".trim_ascii_end(), \"\\r hello world\\u{3000}\");\nassert_eq!(\"  \".trim_ascii_end(), \"\");\nassert_eq!(\"\".trim_ascii_end(), \"\");\n```","links":{"u8::is_ascii_whitespace":"2:970:40943"},"attrs":["#[unstable(feature = \"byte_slice_trim_ascii\", issue = \"94035\")]","#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12920:2330":{"id":"2:12920:2330","crate_id":2,"name":"is_empty","span":null,"visibility":"public","docs":"Returns `true` if `self` has a length of zero bytes.\n\n# Examples\n\n```\nlet s = \"\";\nassert!(s.is_empty());\n\nlet s = \"not empty\";\nassert!(!s.is_empty());\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12954:2432":{"id":"2:12954:2432","crate_id":2,"name":"contains","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a sub-slice of\nthis string slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.contains(\"nana\"));\nassert!(!bananas.contains(\"apples\"));\n```","links":{"prim@char":"1:12265:458","self::pattern":"2:12609:3967"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12615:16075","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12946:2573":{"id":"2:12946:2573","crate_id":2,"name":"chars","span":null,"visibility":"public","docs":"Returns an iterator over the [`char`]s of a string slice.\n\nAs a string slice consists of valid UTF-8, we can iterate through a\nstring slice by [`char`]. This method returns such an iterator.\n\nIt's important to remember that [`char`] represents a Unicode Scalar\nValue, and might not match your idea of what a 'character' is. Iteration\nover grapheme clusters may be what you actually want. This functionality\nis not provided by Rust's standard library, check crates.io instead.\n\n# Examples\n\nBasic usage:\n\n```\nlet word = \"goodbye\";\n\nlet count = word.chars().count();\nassert_eq!(7, count);\n\nlet mut chars = word.chars();\n\nassert_eq!(Some('g'), chars.next());\nassert_eq!(Some('o'), chars.next());\nassert_eq!(Some('o'), chars.next());\nassert_eq!(Some('d'), chars.next());\nassert_eq!(Some('b'), chars.next());\nassert_eq!(Some('y'), chars.next());\nassert_eq!(Some('e'), chars.next());\n\nassert_eq!(None, chars.next());\n```\n\nRemember, [`char`]s might not match your intuition about characters:\n\n[`char`]: prim@char\n\n```\nlet y = \"yÃÜ\";\n\nlet mut chars = y.chars();\n\nassert_eq!(Some('y'), chars.next()); // not 'yÃÜ'\nassert_eq!(Some('\\u{0306}'), chars.next());\n\nassert_eq!(None, chars.next());\n```","links":{"prim@char":"1:12265:458"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Chars","id":"2:43144:9017","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12940:35426":{"id":"2:12940:35426","crate_id":2,"name":"slice_mut_unchecked","span":null,"visibility":"public","docs":"Creates a string slice from another string slice, bypassing safety\nchecks.\nThis is generally not recommended, use with caution! For a safe\nalternative see [`str`] and [`IndexMut`].\n\n[`IndexMut`]: crate::ops::IndexMut\n\nThis new slice goes from `begin` to `end`, including `begin` but\nexcluding `end`.\n\nTo get an immutable string slice instead, see the\n[`slice_unchecked`] method.\n\n[`slice_unchecked`]: str::slice_unchecked\n\n# Safety\n\nCallers of this function are responsible that three preconditions are\nsatisfied:\n\n* `begin` must not exceed `end`.\n* `begin` and `end` must be byte positions within the string slice.\n* `begin` and `end` must lie on UTF-8 sequence boundaries.","links":{"`str`":"1:12271:1658","crate::ops::IndexMut":"2:3178:3566","str::slice_unchecked":"2:12939:35425"},"attrs":["#[deprecated(since = \"1.29.0\", note =\n\"use `get_unchecked_mut(begin..end)` instead\")]"],"deprecation":{"since":"1.29.0","note":"use `get_unchecked_mut(begin..end)` instead"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["begin",{"primitive":"usize"}],["end",{"primitive":"usize"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"2:12974:29096":{"id":"2:12974:29096","crate_id":2,"name":"split_inclusive","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by\ncharacters matched by a pattern. Differs from the iterator produced by\n`split` in that `split_inclusive` leaves the matched part as the\nterminator of the substring.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\\nlittle lamb\\nlittle lamb.\"\n    .split_inclusive('\\n').collect();\nassert_eq!(v, [\"Mary had a little lamb\\n\", \"little lamb\\n\", \"little lamb.\"]);\n```\n\nIf the last element of the string is matched,\nthat element will be considered the terminator of the preceding substring.\nThat substring will be the last item returned by the iterator.\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\\nlittle lamb\\nlittle lamb.\\n\"\n    .split_inclusive('\\n').collect();\nassert_eq!(v, [\"Mary had a little lamb\\n\", \"little lamb\\n\", \"little lamb.\\n\"]);\n```","links":{"prim@char":"1:12265:458","self::pattern":"2:12609:3967"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"SplitInclusive","id":"2:12425:8948","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12615:16075","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:86-0:994:2204":{"id":"0:86-0:994:2204","crate_id":0,"name":null,"span":{"filename":"src/internals/attr.rs","begin":[21,0],"end":[21,43]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"import":{"source":"crate::internals::case::RenameRule","name":"RenameRule","id":"0:994:2204","glob":false}}},"2:12935:29064":{"id":"2:12935:29064","crate_id":2,"name":"get_unchecked","span":null,"visibility":"public","docs":"Returns an unchecked subslice of `str`.\n\nThis is the unchecked alternative to indexing the `str`.\n\n# Safety\n\nCallers of this function are responsible that these preconditions are\nsatisfied:\n\n* The starting index must not exceed the ending index;\n* Indexes must be within bounds of the original slice;\n* Indexes must lie on UTF-8 sequence boundaries.\n\nFailing that, the returned string slice may reference invalid memory or\nviolate the invariants communicated by the `str` type.\n\n# Examples\n\n```\nlet v = \"üóª‚ààüåè\";\nunsafe {\n    assert_eq!(\"üóª\", v.get_unchecked(0..4));\n    assert_eq!(\"‚àà\", v.get_unchecked(4..7));\n    assert_eq!(\"üåè\", v.get_unchecked(7..11));\n}\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"2:10701:239","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"2:10701:239","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"2:13014:35435":{"id":"2:13014:35435","crate_id":2,"name":"trim_end","span":null,"visibility":"public","docs":"Returns a string slice with trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Text directionality\n\nA string is a sequence of bytes. `end` in this context means the last\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be right side, and for right-to-left languages like\nArabic or Hebrew, this will be the left side.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\nassert_eq!(\"\\n Hello\\tworld\", s.trim_end());\n```\n\nDirectionality:\n\n```\nlet s = \"  English  \";\nassert!(Some('h') == s.trim_end().chars().rev().next());\n\nlet s = \"  ◊¢◊ë◊®◊ô◊™  \";\nassert!(Some('◊™') == s.trim_end().chars().rev().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_trim_end\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12992:29104":{"id":"2:12992:29104","crate_id":2,"name":"split_once","span":null,"visibility":"public","docs":"Splits the string on the first occurrence of the specified delimiter and\nreturns prefix before delimiter and suffix after delimiter.\n\n# Examples\n\n```\nassert_eq!(\"cfg\".split_once('='), None);\nassert_eq!(\"cfg=\".split_once('='), Some((\"cfg\", \"\")));\nassert_eq!(\"cfg=foo\".split_once('='), Some((\"cfg\", \"foo\")));\nassert_eq!(\"cfg=foo=bar\".split_once('='), Some((\"cfg\", \"foo=bar\")));\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["delimiter",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:41291:194","args":{"angle_bracketed":{"args":[{"type":{"tuple":[{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12615:16075","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12948:8935":{"id":"2:12948:8935","crate_id":2,"name":"bytes","span":null,"visibility":"public","docs":"An iterator over the bytes of a string slice.\n\nAs a string slice consists of a sequence of bytes, we can iterate\nthrough a string slice by byte. This method returns such an iterator.\n\n# Examples\n\n```\nlet mut bytes = \"bors\".bytes();\n\nassert_eq!(Some(b'b'), bytes.next());\nassert_eq!(Some(b'o'), bytes.next());\nassert_eq!(Some(b'r'), bytes.next());\nassert_eq!(Some(b's'), bytes.next());\n\nassert_eq!(None, bytes.next());\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Bytes","id":"2:43160:3102","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13024:27818":{"id":"2:13024:27818","crate_id":2,"name":"strip_prefix","span":null,"visibility":"public","docs":"Returns a string slice with the prefix removed.\n\nIf the string starts with the pattern `prefix`, returns the substring after the prefix,\nwrapped in `Some`. Unlike `trim_start_matches`, this method removes the prefix exactly once.\n\nIf the string does not start with `prefix`, returns `None`.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nassert_eq!(\"foo:bar\".strip_prefix(\"foo:\"), Some(\"bar\"));\nassert_eq!(\"foo:bar\".strip_prefix(\"bar\"), None);\nassert_eq!(\"foofoo\".strip_prefix(\"foo\"), Some(\"foo\"));\n```","links":{"prim@char":"1:12265:458","self::pattern":"2:12609:3967"},"attrs":["#[must_use =\n\"this returns the remaining substring as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["prefix",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:41291:194","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12615:16075","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13048:30263":{"id":"2:13048:30263","crate_id":2,"name":"trim_ascii","span":null,"visibility":"public","docs":"Returns a string slice with leading and trailing ASCII whitespace\nremoved.\n\n'Whitespace' refers to the definition used by\n[`u8::is_ascii_whitespace`].\n\n[`u8::is_ascii_whitespace`]: u8::is_ascii_whitespace\n\n# Examples\n\n```\n#![feature(byte_slice_trim_ascii)]\n\nassert_eq!(\"\\r hello world\\n \".trim_ascii(), \"hello world\");\nassert_eq!(\"  \".trim_ascii(), \"\");\nassert_eq!(\"\".trim_ascii(), \"\");\n```","links":{"u8::is_ascii_whitespace":"2:970:40943"},"attrs":["#[unstable(feature = \"byte_slice_trim_ascii\", issue = \"94035\")]","#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12986:29100":{"id":"2:12986:29100","crate_id":2,"name":"splitn","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by a\npattern, restricted to returning at most `n` items.\n\nIf `n` substrings are returned, the last substring (the `n`th substring)\nwill contain the remainder of the string.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will not be double ended, because it is\nnot efficient to support.\n\nIf the pattern allows a reverse search, the [`rsplitn`] method can be\nused.\n\n[`rsplitn`]: str::rsplitn\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lambda\".splitn(3, ' ').collect();\nassert_eq!(v, [\"Mary\", \"had\", \"a little lambda\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".splitn(3, \"X\").collect();\nassert_eq!(v, [\"lion\", \"\", \"tigerXleopard\"]);\n\nlet v: Vec<&str> = \"abcXdef\".splitn(1, 'X').collect();\nassert_eq!(v, [\"abcXdef\"]);\n\nlet v: Vec<&str> = \"\".splitn(1, 'X').collect();\nassert_eq!(v, [\"\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".splitn(2, |c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"abc\", \"defXghi\"]);\n```","links":{"prim@char":"1:12265:458","self::pattern":"2:12609:3967","str::rsplitn":"2:12989:29102"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["n",{"primitive":"usize"}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"SplitN","id":"2:43278:9026","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12615:16075","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12980:35428":{"id":"2:12980:35428","crate_id":2,"name":"split_terminator","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by\ncharacters matched by a pattern.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\nEquivalent to [`split`], except that the trailing substring\nis skipped if empty.\n\n[`split`]: str::split\n\nThis method can be used for string data that is _terminated_,\nrather than _separated_ by a pattern.\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rsplit_terminator`] method can be used.\n\n[`rsplit_terminator`]: str::rsplit_terminator\n\n# Examples\n\n```\nlet v: Vec<&str> = \"A.B.\".split_terminator('.').collect();\nassert_eq!(v, [\"A\", \"B\"]);\n\nlet v: Vec<&str> = \"A..B..\".split_terminator(\".\").collect();\nassert_eq!(v, [\"A\", \"\", \"B\", \"\"]);\n\nlet v: Vec<&str> = \"A.B:C.D\".split_terminator(&['.', ':'][..]).collect();\nassert_eq!(v, [\"A\", \"B\", \"C\", \"D\"]);\n```","links":{"self::pattern":"2:12609:3967","str::split":"2:12971:29094","prim@char":"1:12265:458","`DoubleEndedIterator`":"2:7986:131","str::rsplit_terminator":"2:12983:35429"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"SplitTerminator","id":"2:43224:9023","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12615:16075","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12931:2219":{"id":"2:12931:2219","crate_id":2,"name":"get","span":null,"visibility":"public","docs":"Returns a subslice of `str`.\n\nThis is the non-panicking alternative to indexing the `str`. Returns\n[`None`] whenever equivalent indexing operation would panic.\n\n# Examples\n\n```\nlet v = String::from(\"üóª‚ààüåè\");\n\nassert_eq!(Some(\"üóª\"), v.get(0..4));\n\n// indices not on UTF-8 sequence boundaries\nassert!(v.get(1..).is_none());\nassert!(v.get(..8).is_none());\n\n// out of bounds\nassert!(v.get(..42).is_none());\n```","links":{"`None`":"2:41293:191"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"resolved_path":{"name":"Option","id":"2:41291:194","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"2:10701:239","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"2:10701:239","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12942:29089":{"id":"2:12942:29089","crate_id":2,"name":"split_at_mut","span":null,"visibility":"public","docs":"Divide one mutable string slice into two at an index.\n\nThe argument, `mid`, should be a byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get immutable string slices instead, see the [`split_at`] method.\n\n[`split_at`]: str::split_at\n\n# Panics\n\nPanics if `mid` is not on a UTF-8 code point boundary, or if it is past\nthe end of the last code point of the string slice.  For a non-panicking\nalternative see [`split_at_mut_checked`](str::split_at_mut_checked).\n\n# Examples\n\n```\nlet mut s = \"Per Martin-L√∂f\".to_string();\n{\n    let (first, last) = s.split_at_mut(3);\n    first.make_ascii_uppercase();\n    assert_eq!(\"PER\", first);\n    assert_eq!(\" Martin-L√∂f\", last);\n}\nassert_eq!(\"PER Martin-L√∂f\", s);\n```","links":{"str::split_at":"2:12941:2980","str::split_at_mut_checked":"2:12944:29093"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["mid",{"primitive":"usize"}]],"output":{"tuple":[{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12952:35427":{"id":"2:12952:35427","crate_id":2,"name":"lines_any","span":null,"visibility":"public","docs":"An iterator over the lines of a string.","links":{},"attrs":["#[deprecated(since = \"1.4.0\", note = \"use lines() instead now\", suggestion =\n\"lines\")]"],"deprecation":{"since":"1.4.0","note":"use lines() instead now"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"LinesAny","id":"2:43438:9035","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12951:32667":{"id":"2:12951:32667","crate_id":2,"name":"lines","span":null,"visibility":"public","docs":"An iterator over the lines of a string, as string slices.\n\nLines are split at line endings that are either newlines (`\\n`) or\nsequences of a carriage return followed by a line feed (`\\r\\n`).\n\nLine terminators are not included in the lines returned by the iterator.\n\nNote that any carriage return (`\\r`) not immediately followed by a\nline feed (`\\n`) does not split a line. These carriage returns are\nthereby included in the produced lines.\n\nThe final line ending is optional. A string that ends with a final line\nending will return the same lines as an otherwise identical string\nwithout a final line ending.\n\n# Examples\n\nBasic usage:\n\n```\nlet text = \"foo\\r\\nbar\\n\\nbaz\\r\";\nlet mut lines = text.lines();\n\nassert_eq!(Some(\"foo\"), lines.next());\nassert_eq!(Some(\"bar\"), lines.next());\nassert_eq!(Some(\"\"), lines.next());\n// Trailing carriage return is included in the last line\nassert_eq!(Some(\"baz\\r\"), lines.next());\n\nassert_eq!(None, lines.next());\n```\n\nThe final line does not require any ending:\n\n```\nlet text = \"foo\\nbar\\n\\r\\nbaz\";\nlet mut lines = text.lines();\n\nassert_eq!(Some(\"foo\"), lines.next());\nassert_eq!(Some(\"bar\"), lines.next());\nassert_eq!(Some(\"\"), lines.next());\nassert_eq!(Some(\"baz\"), lines.next());\n\nassert_eq!(None, lines.next());\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Lines","id":"2:43428:9034","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13001:35430":{"id":"2:13001:35430","crate_id":2,"name":"rmatches","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within this string slice,\nyielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`matches`] method can be used.\n\n[`matches`]: str::matches\n\n# Examples\n\n```\nlet v: Vec<&str> = \"abcXXXabcYYYabc\".rmatches(\"abc\").collect();\nassert_eq!(v, [\"abc\", \"abc\", \"abc\"]);\n\nlet v: Vec<&str> = \"1abc2abc3\".rmatches(char::is_numeric).collect();\nassert_eq!(v, [\"3\", \"2\", \"1\"]);\n```","links":{"self::pattern":"2:12609:3967","`DoubleEndedIterator`":"2:7986:131","prim@char":"1:12265:458","str::matches":"2:12998:2326"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RMatches","id":"2:43396:9033","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12615:16075","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12615:16075","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12630:16076","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13021:2238":{"id":"2:13021:2238","crate_id":2,"name":"trim_start_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. `start` in this context means the first\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be left side, and for right-to-left languages like\nArabic or Hebrew, this will be the right side.\n\n# Examples\n\n```\nassert_eq!(\"11foo1bar11\".trim_start_matches('1'), \"foo1bar11\");\nassert_eq!(\"123foo1bar123\".trim_start_matches(char::is_numeric), \"foo1bar123\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_start_matches(x), \"foo1bar12\");\n```","links":{"prim@char":"1:12265:458","self::pattern":"2:12609:3967"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12615:16075","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13041:28846":{"id":"2:13041:28846","crate_id":2,"name":"is_ascii","span":null,"visibility":"public","docs":"Checks if all characters in this string are within the ASCII range.\n\n# Examples\n\n```\nlet ascii = \"hello!\\n\";\nlet non_ascii = \"Gr√º√üe, J√ºrgen ‚ù§\";\n\nassert!(ascii.is_ascii());\nassert!(!non_ascii.is_ascii());\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12924:35423":{"id":"2:12924:35423","crate_id":2,"name":"ceil_char_boundary","span":null,"visibility":"public","docs":"Finds the closest `x` not below `index` where `is_char_boundary(x)` is `true`.\n\nIf `index` is greater than the length of the string, this returns the length of the string.\n\nThis method is the natural complement to [`floor_char_boundary`]. See that method\nfor more details.\n\n[`floor_char_boundary`]: str::floor_char_boundary\n\n\n# Examples\n\n```\n#![feature(round_char_boundary)]\nlet s = \"‚ù§Ô∏èüß°üíõüíöüíôüíú\";\nassert_eq!(s.len(), 26);\nassert!(!s.is_char_boundary(13));\n\nlet closest = s.ceil_char_boundary(13);\nassert_eq!(closest, 14);\nassert_eq!(&s[..closest], \"‚ù§Ô∏èüß°üíõ\");\n```","links":{"str::floor_char_boundary":"2:12922:35422"},"attrs":["#[unstable(feature = \"round_char_boundary\", issue = \"93743\")]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["index",{"primitive":"usize"}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12949:33545":{"id":"2:12949:33545","crate_id":2,"name":"split_whitespace","span":null,"visibility":"public","docs":"Splits a string slice by whitespace.\n\nThe iterator returned will return string slices that are sub-slices of\nthe original string slice, separated by any amount of whitespace.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`. If you only want to split on ASCII whitespace\ninstead, use [`split_ascii_whitespace`].\n\n[`split_ascii_whitespace`]: str::split_ascii_whitespace\n\n# Examples\n\nBasic usage:\n\n```\nlet mut iter = \"A few words\".split_whitespace();\n\nassert_eq!(Some(\"A\"), iter.next());\nassert_eq!(Some(\"few\"), iter.next());\nassert_eq!(Some(\"words\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nAll kinds of whitespace are considered:\n\n```\nlet mut iter = \" Mary   had\\ta\\u{2009}little  \\n\\t lamb\".split_whitespace();\nassert_eq!(Some(\"Mary\"), iter.next());\nassert_eq!(Some(\"had\"), iter.next());\nassert_eq!(Some(\"a\"), iter.next());\nassert_eq!(Some(\"little\"), iter.next());\nassert_eq!(Some(\"lamb\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nIf the string is empty or all whitespace, the iterator yields no string slices:\n```\nassert_eq!(\"\".split_whitespace().next(), None);\nassert_eq!(\"   \".split_whitespace().next(), None);\n```","links":{"str::split_ascii_whitespace":"2:12950:33548"},"attrs":["#[must_use =\n\"this returns the split string as an iterator, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_split_whitespace\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"SplitWhitespace","id":"2:43448:9036","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12941:2980":{"id":"2:12941:2980","crate_id":2,"name":"split_at","span":null,"visibility":"public","docs":"Divide one string slice into two at an index.\n\nThe argument, `mid`, should be a byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get mutable string slices instead, see the [`split_at_mut`]\nmethod.\n\n[`split_at_mut`]: str::split_at_mut\n\n# Panics\n\nPanics if `mid` is not on a UTF-8 code point boundary, or if it is past\nthe end of the last code point of the string slice.  For a non-panicking\nalternative see [`split_at_checked`](str::split_at_checked).\n\n# Examples\n\n```\nlet s = \"Per Martin-L√∂f\";\n\nlet (first, last) = s.split_at(3);\n\nassert_eq!(\"Per\", first);\nassert_eq!(\" Martin-L√∂f\", last);\n```","links":{"str::split_at_checked":"2:12943:29092","str::split_at_mut":"2:12942:29089"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["mid",{"primitive":"usize"}]],"output":{"tuple":[{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:493-0:404:2111":{"id":"0:493-0:404:2111","crate_id":0,"name":null,"span":{"filename":"src/internals/mod.rs","begin":[14,0],"end":[14,41]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"import":{"source":"self::receiver::replace_receiver","name":"replace_receiver","id":"0:404:2111","glob":false}}},"0:0:1992":{"id":"0:0:1992","crate_id":0,"name":"serde_derive","span":{"filename":"src/lib.rs","begin":[1,0],"end":[101,1]},"visibility":"public","docs":"This crate provides Serde's two derive macros.\n\n```edition2021\n# use serde_derive::{Deserialize, Serialize};\n#\n#[derive(Serialize, Deserialize)]\n# struct S;\n#\n# fn main() {}\n```\n\nPlease refer to [https://serde.rs/derive.html] for how to set this up.\n\n[https://serde.rs/derive.html]: https://serde.rs/derive.html","links":{},"attrs":["#![doc(html_root_url = \"https://docs.rs/serde_derive/1.0.197\")]","#![allow(clippy::branches_sharing_code, clippy::cognitive_complexity,\nclippy::collapsible_match, clippy::derive_partial_eq_without_eq,\nclippy::enum_variant_names, clippy::manual_map,\nclippy::match_like_matches_macro, clippy::needless_pass_by_value,\nclippy::too_many_arguments, clippy::trivially_copy_pass_by_ref,\nclippy::used_underscore_binding, clippy::wildcard_in_or_patterns,\nclippy::unnested_or_patterns,)]","#![allow(clippy::cast_possible_truncation, clippy::checked_conversions,\nclippy::doc_markdown, clippy::enum_glob_use, clippy::indexing_slicing,\nclippy::items_after_statements, clippy::let_underscore_untyped,\nclippy::manual_assert, clippy::map_err_ignore, clippy::match_same_arms,\nclippy::match_wildcard_for_single_variants, clippy::module_name_repetitions,\nclippy::must_use_candidate, clippy::similar_names, clippy::single_match_else,\nclippy::struct_excessive_bools, clippy::too_many_lines,\nclippy::unseparated_literal_suffix, clippy::unused_self, clippy::use_self,\nclippy::wildcard_imports)]"],"deprecation":null,"inner":{"module":{"is_crate":true,"items":["0:964:1981","0:965:1989"],"is_stripped":false}}},"2:13033:35440":{"id":"2:13033:35440","crate_id":2,"name":"trim_left_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. 'Left' in this context means the first\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _right_ side, not the left.\n\n# Examples\n\n```\nassert_eq!(\"11foo1bar11\".trim_left_matches('1'), \"foo1bar11\");\nassert_eq!(\"123foo1bar123\".trim_left_matches(char::is_numeric), \"foo1bar123\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_left_matches(x), \"foo1bar12\");\n```","links":{"prim@char":"1:12265:458","self::pattern":"2:12609:3967"},"attrs":["#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_start_matches`\",\nsuggestion = \"trim_start_matches\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_start_matches`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12615:16075","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12933:29063":{"id":"2:12933:29063","crate_id":2,"name":"get_mut","span":null,"visibility":"public","docs":"Returns a mutable subslice of `str`.\n\nThis is the non-panicking alternative to indexing the `str`. Returns\n[`None`] whenever equivalent indexing operation would panic.\n\n# Examples\n\n```\nlet mut v = String::from(\"hello\");\n// correct length\nassert!(v.get_mut(0..5).is_some());\n// out of bounds\nassert!(v.get_mut(..42).is_none());\nassert_eq!(Some(\"he\"), v.get_mut(0..2).map(|v| &*v));\n\nassert_eq!(\"hello\", v);\n{\n    let s = v.get_mut(0..2);\n    let s = s.map(|s| {\n        s.make_ascii_uppercase();\n        &*s\n    });\n    assert_eq!(Some(\"HE\"), s);\n}\nassert_eq!(\"HEllo\", v);\n```","links":{"`None`":"2:41293:191"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"resolved_path":{"name":"Option","id":"2:41291:194","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"2:10701:239","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"2:10701:239","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5604:36137":{"id":"5:5604:36137","crate_id":5,"name":"replacen","span":null,"visibility":"public","docs":"Replaces first N matches of a pattern with another string.\n\n`replacen` creates a new [`String`], and copies the data from this string slice into it.\nWhile doing so, it attempts to find matches of a pattern. If it finds any, it\nreplaces them with the replacement string slice at most `count` times.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"foo foo 123 foo\";\nassert_eq!(\"new new 123 foo\", s.replacen(\"foo\", \"new\", 2));\nassert_eq!(\"faa fao 123 foo\", s.replacen('o', \"a\", 3));\nassert_eq!(\"foo foo new23 foo\", s.replacen(char::is_numeric, \"new\", 1));\n```\n\nWhen the pattern doesn't match, it returns this string slice as [`String`]:\n\n```\nlet s = \"this is old\";\nassert_eq!(s, s.replacen(\"cookie monster\", \"little lamb\", 10));\n```","links":{"`String`":"5:7615:243"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the replaced string as a new allocation, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}],["to",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}],["count",{"primitive":"usize"}]],"output":{"resolved_path":{"name":"String","id":"5:7615:243","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12615:16075","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13039:2199":{"id":"2:13039:2199","crate_id":2,"name":"parse","span":null,"visibility":"public","docs":"Parses this string slice into another type.\n\nBecause `parse` is so general, it can cause problems with type\ninference. As such, `parse` is one of the few times you'll see\nthe syntax affectionately known as the 'turbofish': `::<>`. This\nhelps the inference algorithm understand specifically which type\nyou're trying to parse into.\n\n`parse` can parse into any type that implements the [`FromStr`] trait.\n\n# Errors\n\nWill return [`Err`] if it's not possible to parse this string slice into\nthe desired type.\n\n[`Err`]: FromStr::Err\n\n# Examples\n\nBasic usage\n\n```\nlet four: u32 = \"4\".parse().unwrap();\n\nassert_eq!(4, four);\n```\n\nUsing the 'turbofish' instead of annotating `four`:\n\n```\nlet four = \"4\".parse::<u32>();\n\nassert_eq!(Ok(4), four);\n```\n\nFailing to parse:\n\n```\nlet nope = \"j\".parse::<u32>();\n\nassert!(nope.is_err());\n```","links":{"FromStr::Err":"2:12570:137","`FromStr`":"2:12569:3579"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Result","id":"2:41434:226","args":{"angle_bracketed":{"args":[{"type":{"generic":"F"}},{"type":{"qualified_path":{"name":"Err","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"F"},"trait":{"name":"FromStr","id":"2:12569:3579","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"F"},"bounds":[{"trait_bound":{"trait":{"name":"FromStr","id":"2:12569:3579","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12983:35429":{"id":"2:12983:35429","crate_id":2,"name":"rsplit_terminator","span":null,"visibility":"public","docs":"An iterator over substrings of `self`, separated by characters\nmatched by a pattern and yielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\nEquivalent to [`split`], except that the trailing substring is\nskipped if empty.\n\n[`split`]: str::split\n\nThis method can be used for string data that is _terminated_,\nrather than _separated_ by a pattern.\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a\nreverse search, and it will be double ended if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`split_terminator`] method can be\nused.\n\n[`split_terminator`]: str::split_terminator\n\n# Examples\n\n```\nlet v: Vec<&str> = \"A.B.\".rsplit_terminator('.').collect();\nassert_eq!(v, [\"B\", \"A\"]);\n\nlet v: Vec<&str> = \"A..B..\".rsplit_terminator(\".\").collect();\nassert_eq!(v, [\"\", \"B\", \"\", \"A\"]);\n\nlet v: Vec<&str> = \"A.B:C.D\".rsplit_terminator(&['.', ':'][..]).collect();\nassert_eq!(v, [\"D\", \"C\", \"B\", \"A\"]);\n```","links":{"self::pattern":"2:12609:3967","str::split":"2:12971:29094","prim@char":"1:12265:458","str::split_terminator":"2:12980:35428"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RSplitTerminator","id":"2:43242:9024","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12615:16075","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12615:16075","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12630:16076","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5617:3623":{"id":"5:5617:3623","crate_id":5,"name":"repeat","span":null,"visibility":"public","docs":"Creates a new [`String`] by repeating a string `n` times.\n\n# Panics\n\nThis function will panic if the capacity would overflow.\n\n# Examples\n\nBasic usage:\n\n```\nassert_eq!(\"abc\".repeat(4), String::from(\"abcabcabcabc\"));\n```\n\nA panic upon overflow:\n\n```should_panic\n// this will panic at runtime\nlet huge = \"0123456789abcdef\".repeat(usize::MAX);\n```","links":{"`String`":"5:7615:243"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["n",{"primitive":"usize"}]],"output":{"resolved_path":{"name":"String","id":"5:7615:243","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12977:29098":{"id":"2:12977:29098","crate_id":2,"name":"rsplit","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by\ncharacters matched by a pattern and yielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`split`] method can be used.\n\n[`split`]: str::split\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".rsplit(' ').collect();\nassert_eq!(v, [\"lamb\", \"little\", \"a\", \"had\", \"Mary\"]);\n\nlet v: Vec<&str> = \"\".rsplit('X').collect();\nassert_eq!(v, [\"\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".rsplit('X').collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"\", \"lion\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".rsplit(\"::\").collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"lion\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".rsplit(|c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"ghi\", \"def\", \"abc\"]);\n```","links":{"self::pattern":"2:12609:3967","`DoubleEndedIterator`":"2:7986:131","prim@char":"1:12265:458","str::split":"2:12971:29094"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RSplit","id":"2:43192:8949","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12615:16075","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12615:16075","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12630:16076","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13045:28844":{"id":"2:13045:28844","crate_id":2,"name":"make_ascii_lowercase","span":null,"visibility":"public","docs":"Converts this string to its ASCII lower case equivalent in-place.\n\nASCII letters 'A' to 'Z' are mapped to 'a' to 'z',\nbut non-ASCII letters are unchanged.\n\nTo return a new lowercased value without modifying the existing one, use\n[`to_ascii_lowercase()`].\n\n[`to_ascii_lowercase()`]: #method.to_ascii_lowercase\n\n# Examples\n\n```\nlet mut s = String::from(\"GR√ú√üE, J√úRGEN ‚ù§\");\n\ns.make_ascii_lowercase();\n\nassert_eq!(\"gr√ú√üe, j√úrgen ‚ù§\", s);\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13017:35437":{"id":"2:13017:35437","crate_id":2,"name":"trim_right","span":null,"visibility":"public","docs":"Returns a string slice with trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`.\n\n# Text directionality\n\nA string is a sequence of bytes. 'Right' in this context means the last\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _left_ side, not the right.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \" Hello\\tworld\\t\";\n\nassert_eq!(\" Hello\\tworld\", s.trim_right());\n```\n\nDirectionality:\n\n```\nlet s = \"English  \";\nassert!(Some('h') == s.trim_right().chars().rev().next());\n\nlet s = \"◊¢◊ë◊®◊ô◊™  \";\nassert!(Some('◊™') == s.trim_right().chars().rev().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_end`\", suggestion =\n\"trim_end\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_end`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5599":{"id":"5:5599","crate_id":5,"name":null,"span":null,"visibility":"default","docs":"Methods for string slices.","links":{},"attrs":["#[cfg(not(test))]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"primitive":"str"},"items":["5:5600:36136","5:5601:2360","5:5604:36137","5:5607:36138","5:5615:36139","5:5616:36140","5:5617:3623","5:5618:2564","5:5619:2563"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:965:1989":{"id":"0:965:1989","crate_id":0,"name":"Deserialize","span":{"filename":"src/lib.rs","begin":[96,0],"end":[101,1]},"visibility":"public","docs":null,"links":{},"attrs":["#[proc_macro_derive(Deserialize, attributes(serde))]"],"deprecation":null,"inner":{"proc_macro":{"kind":"derive","helpers":["serde"]}}},"2:13044:28845":{"id":"2:13044:28845","crate_id":2,"name":"make_ascii_uppercase","span":null,"visibility":"public","docs":"Converts this string to its ASCII upper case equivalent in-place.\n\nASCII letters 'a' to 'z' are mapped to 'A' to 'Z',\nbut non-ASCII letters are unchanged.\n\nTo return a new uppercased value without modifying the existing one, use\n[`to_ascii_uppercase()`].\n\n[`to_ascii_uppercase()`]: #method.to_ascii_uppercase\n\n# Examples\n\n```\nlet mut s = String::from(\"Gr√º√üe, J√ºrgen ‚ù§\");\n\ns.make_ascii_uppercase();\n\nassert_eq!(\"GR√º√üE, J√ºRGEN ‚ù§\", s);\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5601:2360":{"id":"5:5601:2360","crate_id":5,"name":"replace","span":null,"visibility":"public","docs":"Replaces all matches of a pattern with another string.\n\n`replace` creates a new [`String`], and copies the data from this string slice into it.\nWhile doing so, it attempts to find matches of a pattern. If it finds any, it\nreplaces them with the replacement string slice.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"this is old\";\n\nassert_eq!(\"this is new\", s.replace(\"old\", \"new\"));\nassert_eq!(\"than an old\", s.replace(\"is\", \"an\"));\n```\n\nWhen the pattern doesn't match, it returns this string slice as [`String`]:\n\n```\nlet s = \"this is old\";\nassert_eq!(s, s.replace(\"cookie monster\", \"little lamb\"));\n```","links":{"`String`":"5:7615:243"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the replaced string as a new allocation, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["from",{"generic":"P"}],["to",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7615:243","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12615:16075","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12960:28495":{"id":"2:12960:28495","crate_id":2,"name":"ends_with","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a suffix of this\nstring slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.ends_with(\"anas\"));\nassert!(!bananas.ends_with(\"nana\"));\n```","links":{"prim@char":"1:12265:458","self::pattern":"2:12609:3967"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12615:16075","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12615:16075","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12630:16076","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:964:1981":{"id":"0:964:1981","crate_id":0,"name":"Serialize","span":{"filename":"src/lib.rs","begin":[88,0],"end":[93,1]},"visibility":"public","docs":null,"links":{},"attrs":["#[proc_macro_derive(Serialize, attributes(serde))]"],"deprecation":null,"inner":{"proc_macro":{"kind":"derive","helpers":["serde"]}}},"2:13052:35443":{"id":"2:13052:35443","crate_id":2,"name":"escape_unicode","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_unicode`].\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"‚ù§\\n!\".escape_unicode() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"‚ù§\\n!\".escape_unicode());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"\\\\u{{2764}}\\\\u{{a}}\\\\u{{21}}\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"‚ù§\\n!\".escape_unicode().to_string(), \"\\\\u{2764}\\\\u{a}\\\\u{21}\");\n```","links":{"`char::escape_unicode`":"2:4698:35443"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EscapeUnicode","id":"2:43491:8979","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13010:35433":{"id":"2:13010:35433","crate_id":2,"name":"trim","span":null,"visibility":"public","docs":"Returns a string slice with leading and trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Examples\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\n\nassert_eq!(\"Hello\\tworld\", s.trim());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a slice, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_trim\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12921:35421":{"id":"2:12921:35421","crate_id":2,"name":"is_char_boundary","span":null,"visibility":"public","docs":"Checks that `index`-th byte is the first byte in a UTF-8 code point\nsequence or the end of the string.\n\nThe start and end of the string (when `index == self.len()`) are\nconsidered to be boundaries.\n\nReturns `false` if `index` is greater than `self.len()`.\n\n# Examples\n\n```\nlet s = \"L√∂we ËÄÅËôé L√©opard\";\nassert!(s.is_char_boundary(0));\n// start of `ËÄÅ`\nassert!(s.is_char_boundary(6));\nassert!(s.is_char_boundary(s.len()));\n\n// second byte of `√∂`\nassert!(!s.is_char_boundary(2));\n\n// third byte of `ËÄÅ`\nassert!(!s.is_char_boundary(8));\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["index",{"primitive":"usize"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12989:29102":{"id":"2:12989:29102","crate_id":2,"name":"rsplitn","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by a\npattern, starting from the end of the string, restricted to returning\nat most `n` items.\n\nIf `n` substrings are returned, the last substring (the `n`th substring)\nwill contain the remainder of the string.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will not be double ended, because it is not\nefficient to support.\n\nFor splitting from the front, the [`splitn`] method can be used.\n\n[`splitn`]: str::splitn\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".rsplitn(3, ' ').collect();\nassert_eq!(v, [\"lamb\", \"little\", \"Mary had a\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".rsplitn(3, 'X').collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"lionX\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".rsplitn(2, \"::\").collect();\nassert_eq!(v, [\"leopard\", \"lion::tiger\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".rsplitn(2, |c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"ghi\", \"abc1def\"]);\n```","links":{"prim@char":"1:12265:458","str::splitn":"2:12986:29100","self::pattern":"2:12609:3967"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["n",{"primitive":"usize"}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RSplitN","id":"2:43296:9027","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12615:16075","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12615:16075","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12630:16076","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12950:33548":{"id":"2:12950:33548","crate_id":2,"name":"split_ascii_whitespace","span":null,"visibility":"public","docs":"Splits a string slice by ASCII whitespace.\n\nThe iterator returned will return string slices that are sub-slices of\nthe original string slice, separated by any amount of ASCII whitespace.\n\nTo split by Unicode `Whitespace` instead, use [`split_whitespace`].\n\n[`split_whitespace`]: str::split_whitespace\n\n# Examples\n\nBasic usage:\n\n```\nlet mut iter = \"A few words\".split_ascii_whitespace();\n\nassert_eq!(Some(\"A\"), iter.next());\nassert_eq!(Some(\"few\"), iter.next());\nassert_eq!(Some(\"words\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nAll kinds of ASCII whitespace are considered:\n\n```\nlet mut iter = \" Mary   had\\ta little  \\n\\t lamb\".split_ascii_whitespace();\nassert_eq!(Some(\"Mary\"), iter.next());\nassert_eq!(Some(\"had\"), iter.next());\nassert_eq!(Some(\"a\"), iter.next());\nassert_eq!(Some(\"little\"), iter.next());\nassert_eq!(Some(\"lamb\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nIf the string is empty or all ASCII whitespace, the iterator yields no string slices:\n```\nassert_eq!(\"\".split_ascii_whitespace().next(), None);\nassert_eq!(\"   \".split_ascii_whitespace().next(), None);\n```","links":{"str::split_whitespace":"2:12949:33545"},"attrs":["#[must_use =\n\"this returns the split string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"SplitAsciiWhitespace","id":"2:43457:9037","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13049:35442":{"id":"2:13049:35442","crate_id":2,"name":"escape_debug","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_debug`].\n\nNote: only extended grapheme codepoints that begin the string will be\nescaped.\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"‚ù§\\n!\".escape_debug() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"‚ù§\\n!\".escape_debug());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"‚ù§\\\\n!\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"‚ù§\\n!\".escape_debug().to_string(), \"‚ù§\\\\n!\");\n```","links":{"`char::escape_debug`":"2:4700:35442"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EscapeDebug","id":"2:43473:8980","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5615:36139":{"id":"5:5615:36139","crate_id":5,"name":"to_uppercase","span":null,"visibility":"public","docs":"Returns the uppercase equivalent of this string slice, as a new [`String`].\n\n'Uppercase' is defined according to the terms of the Unicode Derived Core Property\n`Uppercase`.\n\nSince some characters can expand into multiple characters when changing\nthe case, this function returns a [`String`] instead of modifying the\nparameter in-place.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"hello\";\n\nassert_eq!(\"HELLO\", s.to_uppercase());\n```\n\nScripts without case are not changed:\n\n```\nlet new_year = \"ÂÜúÂéÜÊñ∞Âπ¥\";\n\nassert_eq!(new_year, new_year.to_uppercase());\n```\n\nOne character can become multiple:\n```\nlet s = \"tsch√º√ü\";\n\nassert_eq!(\"TSCH√úSS\", s.to_uppercase());\n```","links":{"`String`":"5:7615:243"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the uppercase string as a new String, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7615:243","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12947:2567":{"id":"2:12947:2567","crate_id":2,"name":"char_indices","span":null,"visibility":"public","docs":"Returns an iterator over the [`char`]s of a string slice, and their\npositions.\n\nAs a string slice consists of valid UTF-8, we can iterate through a\nstring slice by [`char`]. This method returns an iterator of both\nthese [`char`]s, as well as their byte positions.\n\nThe iterator yields tuples. The position is first, the [`char`] is\nsecond.\n\n# Examples\n\nBasic usage:\n\n```\nlet word = \"goodbye\";\n\nlet count = word.char_indices().count();\nassert_eq!(7, count);\n\nlet mut char_indices = word.char_indices();\n\nassert_eq!(Some((0, 'g')), char_indices.next());\nassert_eq!(Some((1, 'o')), char_indices.next());\nassert_eq!(Some((2, 'o')), char_indices.next());\nassert_eq!(Some((3, 'd')), char_indices.next());\nassert_eq!(Some((4, 'b')), char_indices.next());\nassert_eq!(Some((5, 'y')), char_indices.next());\nassert_eq!(Some((6, 'e')), char_indices.next());\n\nassert_eq!(None, char_indices.next());\n```\n\nRemember, [`char`]s might not match your intuition about characters:\n\n[`char`]: prim@char\n\n```\nlet yes = \"yÃÜes\";\n\nlet mut char_indices = yes.char_indices();\n\nassert_eq!(Some((0, 'y')), char_indices.next()); // not (0, 'yÃÜ')\nassert_eq!(Some((1, '\\u{0306}')), char_indices.next());\n\n// note the 3 here - the previous character took up two bytes\nassert_eq!(Some((3, 'e')), char_indices.next());\nassert_eq!(Some((4, 's')), char_indices.next());\n\nassert_eq!(None, char_indices.next());\n```","links":{"prim@char":"1:12265:458"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"CharIndices","id":"2:43150:9018","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12995:29105":{"id":"2:12995:29105","crate_id":2,"name":"rsplit_once","span":null,"visibility":"public","docs":"Splits the string on the last occurrence of the specified delimiter and\nreturns prefix before delimiter and suffix after delimiter.\n\n# Examples\n\n```\nassert_eq!(\"cfg\".rsplit_once('='), None);\nassert_eq!(\"cfg=foo\".rsplit_once('='), Some((\"cfg\", \"foo\")));\nassert_eq!(\"cfg=foo=bar\".rsplit_once('='), Some((\"cfg=foo\", \"bar\")));\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["delimiter",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:41291:194","args":{"angle_bracketed":{"args":[{"type":{"tuple":[{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12615:16075","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12615:16075","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12630:16076","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5619:2563":{"id":"5:5619:2563","crate_id":5,"name":"to_ascii_lowercase","span":null,"visibility":"public","docs":"Returns a copy of this string where each character is mapped to its\nASCII lower case equivalent.\n\nASCII letters 'A' to 'Z' are mapped to 'a' to 'z',\nbut non-ASCII letters are unchanged.\n\nTo lowercase the value in-place, use [`make_ascii_lowercase`].\n\nTo lowercase ASCII characters in addition to non-ASCII characters, use\n[`to_lowercase`].\n\n# Examples\n\n```\nlet s = \"Gr√º√üe, J√ºrgen ‚ù§\";\n\nassert_eq!(\"gr√º√üe, j√ºrgen ‚ù§\", s.to_ascii_lowercase());\n```\n\n[`make_ascii_lowercase`]: str::make_ascii_lowercase\n[`to_lowercase`]: #method.to_lowercase","links":{"str::make_ascii_lowercase":"2:13045:28844"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use = \"to lowercase the value in-place, use `make_ascii_lowercase()`\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7615:243","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13004:35431":{"id":"2:13004:35431","crate_id":2,"name":"match_indices","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within this string\nslice as well as the index that the match starts at.\n\nFor matches of `pat` within `self` that overlap, only the indices\ncorresponding to the first match are returned.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rmatch_indices`] method can be used.\n\n[`rmatch_indices`]: str::rmatch_indices\n\n# Examples\n\n```\nlet v: Vec<_> = \"abcXXXabcYYYabc\".match_indices(\"abc\").collect();\nassert_eq!(v, [(0, \"abc\"), (6, \"abc\"), (12, \"abc\")]);\n\nlet v: Vec<_> = \"1abcabc2\".match_indices(\"abc\").collect();\nassert_eq!(v, [(1, \"abc\"), (4, \"abc\")]);\n\nlet v: Vec<_> = \"ababa\".match_indices(\"aba\").collect();\nassert_eq!(v, [(0, \"aba\")]); // only the first `aba`\n```","links":{"self::pattern":"2:12609:3967","`DoubleEndedIterator`":"2:7986:131","prim@char":"1:12265:458","str::rmatch_indices":"2:13007:35432"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"MatchIndices","id":"2:43324:9029","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12615:16075","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12929:334":{"id":"2:12929:334","crate_id":2,"name":"as_ptr","span":null,"visibility":"public","docs":"Converts a string slice to a raw pointer.\n\nAs string slices are a slice of bytes, the raw pointer points to a\n[`u8`]. This pointer will be pointing to the first byte of the string\nslice.\n\nThe caller must ensure that the returned pointer is never written to.\nIf you need to mutate the contents of the string slice, use [`as_mut_ptr`].\n\n[`as_mut_ptr`]: str::as_mut_ptr\n\n# Examples\n\n```\nlet s = \"Hello\";\nlet ptr = s.as_ptr();\n```","links":{"str::as_mut_ptr":"2:12930:29066","`u8`":"1:12282:1785"},"attrs":["#[rustc_never_returns_null_ptr]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"raw_pointer":{"mutable":false,"type":{"primitive":"u8"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12937:29065":{"id":"2:12937:29065","crate_id":2,"name":"get_unchecked_mut","span":null,"visibility":"public","docs":"Returns a mutable, unchecked subslice of `str`.\n\nThis is the unchecked alternative to indexing the `str`.\n\n# Safety\n\nCallers of this function are responsible that these preconditions are\nsatisfied:\n\n* The starting index must not exceed the ending index;\n* Indexes must be within bounds of the original slice;\n* Indexes must lie on UTF-8 sequence boundaries.\n\nFailing that, the returned string slice may reference invalid memory or\nviolate the invariants communicated by the `str` type.\n\n# Examples\n\n```\nlet mut v = String::from(\"üóª‚ààüåè\");\nunsafe {\n    assert_eq!(\"üóª\", v.get_unchecked_mut(0..4));\n    assert_eq!(\"‚àà\", v.get_unchecked_mut(4..7));\n    assert_eq!(\"üåè\", v.get_unchecked_mut(7..11));\n}\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"2:10701:239","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"2:10701:239","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"2:12918":{"id":"2:12918","crate_id":2,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":["#[cfg(not(test))]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"primitive":"str"},"items":["2:12919:963","2:12920:2330","2:12921:35421","2:12922:35422","2:12924:35423","2:12927:3092","2:12928:35424","2:12929:334","2:12930:29066","2:12931:2219","2:12933:29063","2:12935:29064","2:12937:29065","2:12939:35425","2:12940:35426","2:12941:2980","2:12942:29089","2:12943:29092","2:12944:29093","2:12946:2573","2:12947:2567","2:12948:8935","2:12949:33545","2:12950:33548","2:12951:32667","2:12952:35427","2:12953:33566","2:12954:2432","2:12957:28493","2:12960:28495","2:12963:2882","2:12967:4516","2:12971:29094","2:12974:29096","2:12977:29098","2:12980:35428","2:12983:35429","2:12986:29100","2:12989:29102","2:12992:29104","2:12995:29105","2:12998:2326","2:13001:35430","2:13004:35431","2:13007:35432","2:13010:35433","2:13012:35434","2:13014:35435","2:13016:35436","2:13017:35437","2:13018:35438","2:13021:2238","2:13024:27818","2:13027:29106","2:13030:35439","2:13033:35440","2:13036:35441","2:13039:2199","2:13041:28846","2:13042:30258","2:13043:28847","2:13044:28845","2:13045:28844","2:13046:30261","2:13047:30262","2:13048:30263","2:13049:35442","2:13051:10617","2:13052:35443"],"negative":false,"synthetic":false,"blanket_impl":null}}},"2:12930:29066":{"id":"2:12930:29066","crate_id":2,"name":"as_mut_ptr","span":null,"visibility":"public","docs":"Converts a mutable string slice to a raw pointer.\n\nAs string slices are a slice of bytes, the raw pointer points to a\n[`u8`]. This pointer will be pointing to the first byte of the string\nslice.\n\nIt is your responsibility to make sure that the string slice only gets\nmodified in a way that it remains valid UTF-8.","links":{"`u8`":"1:12282:1785"},"attrs":["#[rustc_never_returns_null_ptr]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"raw_pointer":{"mutable":true,"type":{"primitive":"u8"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5607:36138":{"id":"5:5607:36138","crate_id":5,"name":"to_lowercase","span":null,"visibility":"public","docs":"Returns the lowercase equivalent of this string slice, as a new [`String`].\n\n'Lowercase' is defined according to the terms of the Unicode Derived Core Property\n`Lowercase`.\n\nSince some characters can expand into multiple characters when changing\nthe case, this function returns a [`String`] instead of modifying the\nparameter in-place.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"HELLO\";\n\nassert_eq!(\"hello\", s.to_lowercase());\n```\n\nA tricky example, with sigma:\n\n```\nlet sigma = \"Œ£\";\n\nassert_eq!(\"œÉ\", sigma.to_lowercase());\n\n// but at the end of a word, it's œÇ, not œÉ:\nlet odysseus = \"·ΩàŒîŒ•Œ£Œ£ŒïŒéŒ£\";\n\nassert_eq!(\"·ΩÄŒ¥œÖœÉœÉŒµœçœÇ\", odysseus.to_lowercase());\n```\n\nLanguages without case are not changed:\n\n```\nlet new_year = \"ÂÜúÂéÜÊñ∞Âπ¥\";\n\nassert_eq!(new_year, new_year.to_lowercase());\n```","links":{"`String`":"5:7615:243"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the lowercase string as a new String, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7615:243","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:492-0:1019:2110":{"id":"0:492-0:1019:2110","crate_id":0,"name":null,"span":{"filename":"src/internals/mod.rs","begin":[13,0],"end":[13,25]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"import":{"source":"self::ctxt::Ctxt","name":"Ctxt","id":"0:1019:2110","glob":false}}},"0:8:2103":{"id":"0:8:2103","crate_id":0,"name":"ast","span":{"filename":"src/internals/ast.rs","begin":[1,0],"end":[216,1]},"visibility":"public","docs":"A Serde ast, parsed from the Syn ast and ready to generate Rust code.","links":{},"attrs":[],"deprecation":null,"inner":{"module":{"is_crate":false,"items":[],"is_stripped":false}}},"2:12971:29094":{"id":"2:12971:29094","crate_id":2,"name":"split","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by\ncharacters matched by a pattern.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rsplit`] method can be used.\n\n[`rsplit`]: str::rsplit\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".split(' ').collect();\nassert_eq!(v, [\"Mary\", \"had\", \"a\", \"little\", \"lamb\"]);\n\nlet v: Vec<&str> = \"\".split('X').collect();\nassert_eq!(v, [\"\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".split('X').collect();\nassert_eq!(v, [\"lion\", \"\", \"tiger\", \"leopard\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".split(\"::\").collect();\nassert_eq!(v, [\"lion\", \"tiger\", \"leopard\"]);\n\nlet v: Vec<&str> = \"abc1def2ghi\".split(char::is_numeric).collect();\nassert_eq!(v, [\"abc\", \"def\", \"ghi\"]);\n\nlet v: Vec<&str> = \"lionXtigerXleopard\".split(char::is_uppercase).collect();\nassert_eq!(v, [\"lion\", \"tiger\", \"leopard\"]);\n```\n\nIf the pattern is a slice of chars, split on each occurrence of any of the characters:\n\n```\nlet v: Vec<&str> = \"2020-11-03 23:59\".split(&['-', ' ', ':', '@'][..]).collect();\nassert_eq!(v, [\"2020\", \"11\", \"03\", \"23\", \"59\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".split(|c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"abc\", \"def\", \"ghi\"]);\n```\n\nIf a string contains multiple contiguous separators, you will end up\nwith empty strings in the output:\n\n```\nlet x = \"||||a||b|c\".to_string();\nlet d: Vec<_> = x.split('|').collect();\n\nassert_eq!(d, &[\"\", \"\", \"\", \"\", \"a\", \"\", \"b\", \"c\"]);\n```\n\nContiguous separators are separated by the empty string.\n\n```\nlet x = \"(///)\".to_string();\nlet d: Vec<_> = x.split('/').collect();\n\nassert_eq!(d, &[\"(\", \"\", \"\", \")\"]);\n```\n\nSeparators at the start or end of a string are neighbored\nby empty strings.\n\n```\nlet d: Vec<_> = \"010\".split(\"0\").collect();\nassert_eq!(d, &[\"\", \"1\", \"\"]);\n```\n\nWhen the empty string is used as a separator, it separates\nevery character in the string, along with the beginning\nand end of the string.\n\n```\nlet f: Vec<_> = \"rust\".split(\"\").collect();\nassert_eq!(f, &[\"\", \"r\", \"u\", \"s\", \"t\", \"\"]);\n```\n\nContiguous separators can lead to possibly surprising behavior\nwhen whitespace is used as the separator. This code is correct:\n\n```\nlet x = \"    a  b c\".to_string();\nlet d: Vec<_> = x.split(' ').collect();\n\nassert_eq!(d, &[\"\", \"\", \"\", \"\", \"a\", \"\", \"b\", \"c\"]);\n```\n\nIt does _not_ give you:\n\n```,ignore\nassert_eq!(d, &[\"a\", \"b\", \"c\"]);\n```\n\nUse [`split_whitespace`] for this behavior.\n\n[`split_whitespace`]: str::split_whitespace","links":{"self::pattern":"2:12609:3967","`DoubleEndedIterator`":"2:7986:131","prim@char":"1:12265:458","str::split_whitespace":"2:12949:33545","str::rsplit":"2:12977:29098"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Split","id":"2:43174:8946","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12615:16075","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:1023:2207":{"id":"0:1023:2207","crate_id":0,"name":"Symbol","span":{"filename":"src/internals/symbol.rs","begin":[5,0],"end":[5,32]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"struct":{"kind":{"tuple":[null]},"generics":{"params":[],"where_predicates":[]},"impls":[]}}},"2:12967:4516":{"id":"2:12967:4516","crate_id":2,"name":"rfind","span":null,"visibility":"public","docs":"Returns the byte index for the first character of the last match of the pattern in\nthis string slice.\n\nReturns [`None`] if the pattern doesn't match.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nlet s = \"L√∂we ËÄÅËôé L√©opard Gepardi\";\n\nassert_eq!(s.rfind('L'), Some(13));\nassert_eq!(s.rfind('√©'), Some(14));\nassert_eq!(s.rfind(\"pard\"), Some(24));\n```\n\nMore complex patterns with closures:\n\n```\nlet s = \"L√∂we ËÄÅËôé L√©opard\";\n\nassert_eq!(s.rfind(char::is_whitespace), Some(12));\nassert_eq!(s.rfind(char::is_lowercase), Some(20));\n```\n\nNot finding the pattern:\n\n```\nlet s = \"L√∂we ËÄÅËôé L√©opard\";\nlet x: &[_] = &['1', '2'];\n\nassert_eq!(s.rfind(x), None);\n```","links":{"`None`":"2:41293:191","prim@char":"1:12265:458","self::pattern":"2:12609:3967"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:41291:194","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12615:16075","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12615:16075","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12630:16076","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12998:2326":{"id":"2:12998:2326","crate_id":2,"name":"matches","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within the given string\nslice.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rmatches`] method can be used.\n\n[`rmatches`]: str::rmatches\n\n# Examples\n\n```\nlet v: Vec<&str> = \"abcXXXabcYYYabc\".matches(\"abc\").collect();\nassert_eq!(v, [\"abc\", \"abc\", \"abc\"]);\n\nlet v: Vec<&str> = \"1abc2abc3\".matches(char::is_numeric).collect();\nassert_eq!(v, [\"1\", \"2\", \"3\"]);\n```","links":{"self::pattern":"2:12609:3967","`DoubleEndedIterator`":"2:7986:131","prim@char":"1:12265:458","str::rmatches":"2:13001:35430"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Matches","id":"2:43378:9032","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12615:16075","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13018:35438":{"id":"2:13018:35438","crate_id":2,"name":"trim_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes and suffixes that match a\npattern repeatedly removed.\n\nThe [pattern] can be a [`char`], a slice of [`char`]s, or a function\nor closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_matches('1'), \"foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_matches(char::is_numeric), \"foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_matches(x), \"foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1foo1barXX\".trim_matches(|c| c == '1' || c == 'X'), \"foo1bar\");\n```","links":{"prim@char":"1:12265:458","self::pattern":"2:12609:3967"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12615:16075","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12615:16075","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"DoubleEndedSearcher","id":"2:12635:16074","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5616:36140":{"id":"5:5616:36140","crate_id":5,"name":"into_string","span":null,"visibility":"public","docs":"Converts a [`Box<str>`] into a [`String`] without copying or allocating.\n\n# Examples\n\n```\nlet string = String::from(\"birthday gift\");\nlet boxed_str = string.clone().into_boxed_str();\n\nassert_eq!(boxed_str.into_string(), string);\n```","links":{"`Box<str>`":"5:297:2174","`String`":"5:7615:243"},"attrs":["#[must_use = \"`self` will be dropped if the result is not used\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"resolved_path":{"name":"Box","id":"5:297:2174","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}]],"output":{"resolved_path":{"name":"String","id":"5:7615:243","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13043:28847":{"id":"2:13043:28847","crate_id":2,"name":"eq_ignore_ascii_case","span":null,"visibility":"public","docs":"Checks that two strings are an ASCII case-insensitive match.\n\nSame as `to_ascii_lowercase(a) == to_ascii_lowercase(b)`,\nbut without allocating and copying temporaries.\n\n# Examples\n\n```\nassert!(\"Ferris\".eq_ignore_ascii_case(\"FERRIS\"));\nassert!(\"Ferr√∂s\".eq_ignore_ascii_case(\"FERR√∂S\"));\nassert!(!\"Ferr√∂s\".eq_ignore_ascii_case(\"FERR√ñS\"));\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["other",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:63:379":{"id":"0:63:379","crate_id":0,"name":"attr","span":{"filename":"src/internals/attr.rs","begin":[1,0],"end":[1881,1]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"module":{"is_crate":false,"items":["0:86-0:994:2204"],"is_stripped":false}}},"2:13007:35432":{"id":"2:13007:35432","crate_id":2,"name":"rmatch_indices","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within `self`,\nyielded in reverse order along with the index of the match.\n\nFor matches of `pat` within `self` that overlap, only the indices\ncorresponding to the last match are returned.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`match_indices`] method can be used.\n\n[`match_indices`]: str::match_indices\n\n# Examples\n\n```\nlet v: Vec<_> = \"abcXXXabcYYYabc\".rmatch_indices(\"abc\").collect();\nassert_eq!(v, [(12, \"abc\"), (6, \"abc\"), (0, \"abc\")]);\n\nlet v: Vec<_> = \"1abcabc2\".rmatch_indices(\"abc\").collect();\nassert_eq!(v, [(4, \"abc\"), (1, \"abc\")]);\n\nlet v: Vec<_> = \"ababa\".rmatch_indices(\"aba\").collect();\nassert_eq!(v, [(2, \"aba\")]); // only the last `aba`\n```","links":{"self::pattern":"2:12609:3967","`DoubleEndedIterator`":"2:7986:131","prim@char":"1:12265:458","str::match_indices":"2:13004:35431"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RMatchIndices","id":"2:43342:9030","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12615:16075","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12615:16075","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12630:16076","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12953:33566":{"id":"2:12953:33566","crate_id":2,"name":"encode_utf16","span":null,"visibility":"public","docs":"Returns an iterator of `u16` over the string encoded as UTF-16.\n\n# Examples\n\n```\nlet text = \"Za≈º√≥≈Çƒá gƒô≈õlƒÖ ja≈∫≈Ñ\";\n\nlet utf8_len = text.len();\nlet utf16_len = text.encode_utf16().count();\n\nassert!(utf16_len <= utf8_len);\n```","links":{},"attrs":["#[must_use =\n\"this returns the encoded string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EncodeUtf16","id":"2:43466:9038","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13016:35436":{"id":"2:13016:35436","crate_id":2,"name":"trim_left","span":null,"visibility":"public","docs":"Returns a string slice with leading whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`.\n\n# Text directionality\n\nA string is a sequence of bytes. 'Left' in this context means the first\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _right_ side, not the left.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \" Hello\\tworld\\t\";\n\nassert_eq!(\"Hello\\tworld\\t\", s.trim_left());\n```\n\nDirectionality:\n\n```\nlet s = \"  English\";\nassert!(Some('E') == s.trim_left().chars().next());\n\nlet s = \"  ◊¢◊ë◊®◊ô◊™\";\nassert!(Some('◊¢') == s.trim_left().chars().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_start`\", suggestion\n= \"trim_start\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_start`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5600:36136":{"id":"5:5600:36136","crate_id":5,"name":"into_boxed_bytes","span":null,"visibility":"public","docs":"Converts a `Box<str>` into a `Box<[u8]>` without copying or allocating.\n\n# Examples\n\n```\nlet s = \"this is a string\";\nlet boxed_str = s.to_owned().into_boxed_str();\nlet boxed_bytes = boxed_str.into_boxed_bytes();\nassert_eq!(*boxed_bytes, *s.as_bytes());\n```","links":{},"attrs":["#[must_use = \"`self` will be dropped if the result is not used\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"resolved_path":{"name":"Box","id":"5:297:2174","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}]],"output":{"resolved_path":{"name":"Box","id":"5:297:2174","args":{"angle_bracketed":{"args":[{"type":{"slice":{"primitive":"u8"}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12939:35425":{"id":"2:12939:35425","crate_id":2,"name":"slice_unchecked","span":null,"visibility":"public","docs":"Creates a string slice from another string slice, bypassing safety\nchecks.\n\nThis is generally not recommended, use with caution! For a safe\nalternative see [`str`] and [`Index`].\n\n[`Index`]: crate::ops::Index\n\nThis new slice goes from `begin` to `end`, including `begin` but\nexcluding `end`.\n\nTo get a mutable string slice instead, see the\n[`slice_mut_unchecked`] method.\n\n[`slice_mut_unchecked`]: str::slice_mut_unchecked\n\n# Safety\n\nCallers of this function are responsible that three preconditions are\nsatisfied:\n\n* `begin` must not exceed `end`.\n* `begin` and `end` must be byte positions within the string slice.\n* `begin` and `end` must lie on UTF-8 sequence boundaries.\n\n# Examples\n\n```\nlet s = \"L√∂we ËÄÅËôé L√©opard\";\n\nunsafe {\n    assert_eq!(\"L√∂we ËÄÅËôé L√©opard\", s.slice_unchecked(0, 21));\n}\n\nlet s = \"Hello, world!\";\n\nunsafe {\n    assert_eq!(\"world\", s.slice_unchecked(7, 12));\n}\n```","links":{"`str`":"1:12271:1658","str::slice_mut_unchecked":"2:12940:35426","crate::ops::Index":"2:38910:2737"},"attrs":["#[deprecated(since = \"1.29.0\", note =\n\"use `get_unchecked(begin..end)` instead\")]","#[must_use]"],"deprecation":{"since":"1.29.0","note":"use `get_unchecked(begin..end)` instead"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["begin",{"primitive":"usize"}],["end",{"primitive":"usize"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"2:13036:35441":{"id":"2:13036:35441","crate_id":2,"name":"trim_right_matches","span":null,"visibility":"public","docs":"Returns a string slice with all suffixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. 'Right' in this context means the last\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _left_ side, not the right.\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_right_matches('1'), \"11foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_right_matches(char::is_numeric), \"123foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_right_matches(x), \"12foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1fooX\".trim_right_matches(|c| c == '1' || c == 'X'), \"1foo\");\n```","links":{"prim@char":"1:12265:458","self::pattern":"2:12609:3967"},"attrs":["#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_end_matches`\",\nsuggestion = \"trim_end_matches\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_end_matches`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12615:16075","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12615:16075","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12630:16076","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13012:35434":{"id":"2:13012:35434","crate_id":2,"name":"trim_start","span":null,"visibility":"public","docs":"Returns a string slice with leading whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Text directionality\n\nA string is a sequence of bytes. `start` in this context means the first\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be left side, and for right-to-left languages like\nArabic or Hebrew, this will be the right side.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\nassert_eq!(\"Hello\\tworld\\t\\n\", s.trim_start());\n```\n\nDirectionality:\n\n```\nlet s = \"  English  \";\nassert!(Some('E') == s.trim_start().chars().next());\n\nlet s = \"  ◊¢◊ë◊®◊ô◊™  \";\nassert!(Some('◊¢') == s.trim_start().chars().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_trim_start\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5618:2564":{"id":"5:5618:2564","crate_id":5,"name":"to_ascii_uppercase","span":null,"visibility":"public","docs":"Returns a copy of this string where each character is mapped to its\nASCII upper case equivalent.\n\nASCII letters 'a' to 'z' are mapped to 'A' to 'Z',\nbut non-ASCII letters are unchanged.\n\nTo uppercase the value in-place, use [`make_ascii_uppercase`].\n\nTo uppercase ASCII characters in addition to non-ASCII characters, use\n[`to_uppercase`].\n\n# Examples\n\n```\nlet s = \"Gr√º√üe, J√ºrgen ‚ù§\";\n\nassert_eq!(\"GR√º√üE, J√ºRGEN ‚ù§\", s.to_ascii_uppercase());\n```\n\n[`make_ascii_uppercase`]: str::make_ascii_uppercase\n[`to_uppercase`]: #method.to_uppercase","links":{"str::make_ascii_uppercase":"2:13044:28845"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use = \"to uppercase the value in-place, use `make_ascii_uppercase()`\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7615:243","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12922:35422":{"id":"2:12922:35422","crate_id":2,"name":"floor_char_boundary","span":null,"visibility":"public","docs":"Finds the closest `x` not exceeding `index` where `is_char_boundary(x)` is `true`.\n\nThis method can help you truncate a string so that it's still valid UTF-8, but doesn't\nexceed a given number of bytes. Note that this is done purely at the character level\nand can still visually split graphemes, even though the underlying characters aren't\nsplit. For example, the emoji üßë‚Äçüî¨ (scientist) could be split so that the string only\nincludes üßë (person) instead.\n\n# Examples\n\n```\n#![feature(round_char_boundary)]\nlet s = \"‚ù§Ô∏èüß°üíõüíöüíôüíú\";\nassert_eq!(s.len(), 26);\nassert!(!s.is_char_boundary(13));\n\nlet closest = s.floor_char_boundary(13);\nassert_eq!(closest, 10);\nassert_eq!(&s[..closest], \"‚ù§Ô∏èüß°\");\n```","links":{},"attrs":["#[unstable(feature = \"round_char_boundary\", issue = \"93743\")]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["index",{"primitive":"usize"}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13027:29106":{"id":"2:13027:29106","crate_id":2,"name":"strip_suffix","span":null,"visibility":"public","docs":"Returns a string slice with the suffix removed.\n\nIf the string ends with the pattern `suffix`, returns the substring before the suffix,\nwrapped in `Some`.  Unlike `trim_end_matches`, this method removes the suffix exactly once.\n\nIf the string does not end with `suffix`, returns `None`.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nassert_eq!(\"bar:foo\".strip_suffix(\":foo\"), Some(\"bar\"));\nassert_eq!(\"bar:foo\".strip_suffix(\"bar\"), None);\nassert_eq!(\"foofoo\".strip_suffix(\"foo\"), Some(\"foo\"));\n```","links":{"prim@char":"1:12265:458","self::pattern":"2:12609:3967"},"attrs":["#[must_use =\n\"this returns the remaining substring as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["suffix",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:41291:194","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12615:16075","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12615:16075","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12630:16076","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13030:35439":{"id":"2:13030:35439","crate_id":2,"name":"trim_end_matches","span":null,"visibility":"public","docs":"Returns a string slice with all suffixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. `end` in this context means the last\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be right side, and for right-to-left languages like\nArabic or Hebrew, this will be the left side.\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_end_matches('1'), \"11foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_end_matches(char::is_numeric), \"123foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_end_matches(x), \"12foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1fooX\".trim_end_matches(|c| c == '1' || c == 'X'), \"1foo\");\n```","links":{"prim@char":"1:12265:458","self::pattern":"2:12609:3967"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12615:16075","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12615:16075","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12630:16076","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12919:963":{"id":"2:12919:963","crate_id":2,"name":"len","span":null,"visibility":"public","docs":"Returns the length of `self`.\n\nThis length is in bytes, not [`char`]s or graphemes. In other words,\nit might not be what a human considers the length of the string.\n\n[`char`]: prim@char\n\n# Examples\n\n```\nlet len = \"foo\".len();\nassert_eq!(3, len);\n\nassert_eq!(\"∆íoo\".len(), 4); // fancy f!\nassert_eq!(\"∆íoo\".chars().count(), 3);\n```","links":{"prim@char":"1:12265:458"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12927:3092":{"id":"2:12927:3092","crate_id":2,"name":"as_bytes","span":null,"visibility":"public","docs":"Converts a string slice to a byte slice. To convert the byte slice back\ninto a string slice, use the [`from_utf8`] function.\n\n# Examples\n\n```\nlet bytes = \"bors\".as_bytes();\nassert_eq!(b\"bors\", bytes);\n```","links":{"`from_utf8`":"2:12157:16078"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"primitive":"u8"}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13042:30258":{"id":"2:13042:30258","crate_id":2,"name":"as_ascii","span":null,"visibility":"public","docs":"If this string slice [`is_ascii`](Self::is_ascii), returns it as a slice\nof [ASCII characters](`ascii::Char`), otherwise returns `None`.","links":{"`ascii::Char`":"2:39264:4507","Self::is_ascii":"2:13041:28846"},"attrs":["#[unstable(feature = \"ascii_char\", issue = \"110998\")]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Option","id":"2:41291:194","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"resolved_path":{"name":"AsciiChar","id":"2:39264:4507","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13046:30261":{"id":"2:13046:30261","crate_id":2,"name":"trim_ascii_start","span":null,"visibility":"public","docs":"Returns a string slice with leading ASCII whitespace removed.\n\n'Whitespace' refers to the definition used by\n[`u8::is_ascii_whitespace`].\n\n[`u8::is_ascii_whitespace`]: u8::is_ascii_whitespace\n\n# Examples\n\n```\n#![feature(byte_slice_trim_ascii)]\n\nassert_eq!(\" \\t \\u{3000}hello world\\n\".trim_ascii_start(), \"\\u{3000}hello world\\n\");\nassert_eq!(\"  \".trim_ascii_start(), \"\");\nassert_eq!(\"\".trim_ascii_start(), \"\");\n```","links":{"u8::is_ascii_whitespace":"2:970:40943"},"attrs":["#[unstable(feature = \"byte_slice_trim_ascii\", issue = \"94035\")]","#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13051:10617":{"id":"2:13051:10617","crate_id":2,"name":"escape_default","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_default`].\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"‚ù§\\n!\".escape_default() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"‚ù§\\n!\".escape_default());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"\\\\u{{2764}}\\\\n!\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"‚ù§\\n!\".escape_default().to_string(), \"\\\\u{2764}\\\\n!\");\n```","links":{"`char::escape_default`":"2:4701:10617"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EscapeDefault","id":"2:43482:8974","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12928:35424":{"id":"2:12928:35424","crate_id":2,"name":"as_bytes_mut","span":null,"visibility":"public","docs":"Converts a mutable string slice to a mutable byte slice.\n\n# Safety\n\nThe caller must ensure that the content of the slice is valid UTF-8\nbefore the borrow ends and the underlying `str` is used.\n\nUse of a `str` whose contents are not valid UTF-8 is undefined behavior.\n\n# Examples\n\nBasic usage:\n\n```\nlet mut s = String::from(\"Hello\");\nlet bytes = unsafe { s.as_bytes_mut() };\n\nassert_eq!(b\"Hello\", bytes);\n```\n\nMutability:\n\n```\nlet mut s = String::from(\"üóª‚ààüåè\");\n\nunsafe {\n    let bytes = s.as_bytes_mut();\n\n    bytes[0] = 0xF0;\n    bytes[1] = 0x9F;\n    bytes[2] = 0x8D;\n    bytes[3] = 0x94;\n}\n\nassert_eq!(\"üçî‚ààüåè\", s);\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"slice":{"primitive":"u8"}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"2:12944:29093":{"id":"2:12944:29093","crate_id":2,"name":"split_at_mut_checked","span":null,"visibility":"public","docs":"Divide one mutable string slice into two at an index.\n\nThe argument, `mid`, should be a valid byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point. The\nmethod returns `None` if that‚Äôs not the case.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get immutable string slices instead, see the [`split_at_checked`] method.\n\n[`split_at_checked`]: str::split_at_checked\n\n# Examples\n\n```\n#![feature(split_at_checked)]\n\nlet mut s = \"Per Martin-L√∂f\".to_string();\nif let Some((first, last)) = s.split_at_mut_checked(3) {\n    first.make_ascii_uppercase();\n    assert_eq!(\"PER\", first);\n    assert_eq!(\" Martin-L√∂f\", last);\n}\nassert_eq!(\"PER Martin-L√∂f\", s);\n\nassert_eq!(None, s.split_at_mut_checked(13));  // Inside ‚Äú√∂‚Äù\nassert_eq!(None, s.split_at_mut_checked(16));  // Beyond the string length\n```","links":{"str::split_at_checked":"2:12943:29092"},"attrs":["#[must_use]","#[unstable(feature = \"split_at_checked\", reason = \"new API\", issue =\n\"119128\")]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["mid",{"primitive":"usize"}]],"output":{"resolved_path":{"name":"Option","id":"2:41291:194","args":{"angle_bracketed":{"args":[{"type":{"tuple":[{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12957:28493":{"id":"2:12957:28493","crate_id":2,"name":"starts_with","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a prefix of this\nstring slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, in which case this function will return true if\nthe `&str` is a prefix of this string slice.\n\nThe [pattern] can also be a [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\nThese will only be checked against the first character of this string slice.\nLook at the second example below regarding behavior for slices of [`char`]s.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.starts_with(\"bana\"));\nassert!(!bananas.starts_with(\"nana\"));\n```\n\n```\nlet bananas = \"bananas\";\n\n// Note that both of these assert successfully.\nassert!(bananas.starts_with(&['b', 'a', 'n', 'a']));\nassert!(bananas.starts_with(&['a', 'b', 'c', 'd']));\n```","links":{"prim@char":"1:12265:458","self::pattern":"2:12609:3967"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12615:16075","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12963:2882":{"id":"2:12963:2882","crate_id":2,"name":"find","span":null,"visibility":"public","docs":"Returns the byte index of the first character of this string slice that\nmatches the pattern.\n\nReturns [`None`] if the pattern doesn't match.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nlet s = \"L√∂we ËÄÅËôé L√©opard Gepardi\";\n\nassert_eq!(s.find('L'), Some(0));\nassert_eq!(s.find('√©'), Some(14));\nassert_eq!(s.find(\"pard\"), Some(17));\n```\n\nMore complex patterns using point-free style and closures:\n\n```\nlet s = \"L√∂we ËÄÅËôé L√©opard\";\n\nassert_eq!(s.find(char::is_whitespace), Some(5));\nassert_eq!(s.find(char::is_lowercase), Some(1));\nassert_eq!(s.find(|c: char| c.is_whitespace() || c.is_lowercase()), Some(1));\nassert_eq!(s.find(|c: char| (c < 'o') && (c > 'a')), Some(4));\n```\n\nNot finding the pattern:\n\n```\nlet s = \"L√∂we ËÄÅËôé L√©opard\";\nlet x: &[_] = &['1', '2'];\n\nassert_eq!(s.find(x), None);\n```","links":{"`None`":"2:41293:191","prim@char":"1:12265:458","self::pattern":"2:12609:3967"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:41291:194","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12615:16075","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12943:29092":{"id":"2:12943:29092","crate_id":2,"name":"split_at_checked","span":null,"visibility":"public","docs":"Divide one string slice into two at an index.\n\nThe argument, `mid`, should be a valid byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point. The\nmethod returns `None` if that‚Äôs not the case.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get mutable string slices instead, see the [`split_at_mut_checked`]\nmethod.\n\n[`split_at_mut_checked`]: str::split_at_mut_checked\n\n# Examples\n\n```\n#![feature(split_at_checked)]\n\nlet s = \"Per Martin-L√∂f\";\n\nlet (first, last) = s.split_at_checked(3).unwrap();\nassert_eq!(\"Per\", first);\nassert_eq!(\" Martin-L√∂f\", last);\n\nassert_eq!(None, s.split_at_checked(13));  // Inside ‚Äú√∂‚Äù\nassert_eq!(None, s.split_at_checked(16));  // Beyond the string length\n```","links":{"str::split_at_mut_checked":"2:12944:29093"},"attrs":["#[must_use]","#[unstable(feature = \"split_at_checked\", reason = \"new API\", issue =\n\"119128\")]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["mid",{"primitive":"usize"}]],"output":{"resolved_path":{"name":"Option","id":"2:41291:194","args":{"angle_bracketed":{"args":[{"type":{"tuple":[{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}}},"paths":{"1:5942:5335":{"crate_id":1,"path":["std","sync","lazy_lock","LazyLock"],"kind":"struct"},"2:4479:3719":{"crate_id":2,"path":["core","cell","BorrowRef"],"kind":"struct"},"24:4820:3876":{"crate_id":24,"path":["syn","token","Star"],"kind":"struct"},"24:1908:1972":{"crate_id":24,"path":["syn","parse_macro_input"],"kind":"macro"},"16:6620:6671":{"crate_id":16,"path":["gimli","read","index","UnitIndexSection"],"kind":"struct"},"21:2011:4962":{"crate_id":21,"path":["proc_macro","bridge","LitKind"],"kind":"enum"},"24:5740:2492":{"crate_id":24,"path":["syn","path","GenericArgument"],"kind":"enum"},"2:10052:3700":{"crate_id":2,"path":["core","fmt","Octal"],"kind":"trait"},"24:4528:3855":{"crate_id":24,"path":["syn","token","MinusEq"],"kind":"struct"},"2:41474:3554":{"crate_id":2,"path":["core","result","Iter"],"kind":"struct"},"9:178:10241":{"crate_id":9,"path":["miniz_oxide","inflate","stream","InflateState"],"kind":"struct"},"18:680:8701":{"crate_id":18,"path":["memchr","memmem","Finder"],"kind":"struct"},"5:944:3554":{"crate_id":5,"path":["alloc","collections","binary_heap","Iter"],"kind":"struct"},"1:2278:10692":{"crate_id":1,"path":["std","fs","read_to_string"],"kind":"function"},"24:3518:3720":{"crate_id":24,"path":["syn","token","Ref"],"kind":"struct"},"1:10882:140":{"crate_id":1,"path":["std","sys","pal","unix","fs","FileType"],"kind":"struct"},"18:718:5522":{"crate_id":18,"path":["memchr","memmem","NeedleInfo"],"kind":"struct"},"6:545:7077":{"crate_id":6,"path":["libc","unix","winsize"],"kind":"struct"},"1:10861:9101":{"crate_id":1,"path":["std","sys","pal","unix","fs","FilePermissions"],"kind":"struct"},"17:12724:23515":{"crate_id":17,"path":["object","read","FileKind"],"kind":"enum"},"1:1809:672":{"crate_id":1,"path":["std","env"],"kind":"module"},"17:11841:23651":{"crate_id":17,"path":["object","read","macho","file","MachOComdatIterator"],"kind":"struct"},"16:7686:23439":{"crate_id":16,"path":["gimli","read","rnglists","RngListIter"],"kind":"struct"},"10:0:3315":{"crate_id":10,"path":["adler"],"kind":"module"},"24:5936:3531":{"crate_id":24,"path":["syn","ty","BareFnArg"],"kind":"struct"},"17:12201:23684":{"crate_id":17,"path":["object","read","pe","file","PeComdat"],"kind":"struct"},"17:15010:6223":{"crate_id":17,"path":["object","pe","AnonObjectHeader"],"kind":"struct"},"2:12141:10146":{"crate_id":2,"path":["core","slice","GetManyMutError"],"kind":"struct"},"2:12683:16083":{"crate_id":2,"path":["core","str","pattern","MultiCharEqPattern"],"kind":"struct"},"17:15931:5776":{"crate_id":17,"path":["object","xcoff","FileHeader32"],"kind":"struct"},"2:45331:8386":{"crate_id":2,"path":["core","core_arch","simd","u8x16"],"kind":"struct"},"11:102:8902":{"crate_id":11,"path":["hashbrown","raw","Bucket"],"kind":"struct"},"6:5457:7551":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_nxtinfo"],"kind":"struct"},"17:11075:5645":{"crate_id":17,"path":["object","read","coff","section","SectionTable"],"kind":"struct"},"2:10309:8944":{"crate_id":2,"path":["core","hash","BuildHasherDefault"],"kind":"struct"},"17:15214:6272":{"crate_id":17,"path":["object","pe","ImageBaseRelocation"],"kind":"struct"},"17:11764:8733":{"crate_id":17,"path":["object","read","elf","attributes","AttributeReader"],"kind":"struct"},"24:5906:3539":{"crate_id":24,"path":["syn","ty","TypeNever"],"kind":"struct"},"1:10504:10862":{"crate_id":1,"path":["std","sys","pal","unix","process","process_common","CommandArgs"],"kind":"struct"},"17:11367:5645":{"crate_id":17,"path":["object","read","elf","section","SectionTable"],"kind":"struct"},"24:1888:3678":{"crate_id":24,"path":["syn","parse","Parser"],"kind":"trait"},"16:8216:8899":{"crate_id":16,"path":["gimli","read","unit","DebugTypesUnitHeadersIter"],"kind":"struct"},"1:1602:8913":{"crate_id":1,"path":["std","collections","hash","set","SymmetricDifference"],"kind":"struct"},"2:21299:10712":{"crate_id":2,"path":["core","core_simd","cast","sealed","Sealed"],"kind":"trait"},"1:2730:10742":{"crate_id":1,"path":["std","io","buffered","linewriter","LineWriter"],"kind":"struct"},"1:1574:3554":{"crate_id":1,"path":["std","collections","hash","set","Iter"],"kind":"struct"},"2:41482:3558":{"crate_id":2,"path":["core","result","IterMut"],"kind":"struct"},"1:5195:32851":{"crate_id":1,"path":["std","path","fmt","DebugHelper"],"kind":"struct"},"2:4140:34551":{"crate_id":2,"path":["core","asserting","TryCaptureWithDebug"],"kind":"struct"},"2:31781:3745":{"crate_id":2,"path":["core","marker","Sized"],"kind":"trait"},"2:39264:4507":{"crate_id":2,"path":["core","ascii","ascii_char","AsciiChar"],"kind":"enum"},"5:733:120":{"crate_id":5,"path":["alloc","borrow","Cow"],"kind":"enum"},"17:2234:23584":{"crate_id":17,"path":["object","read","elf","relocation","ElfSectionRelocationIterator"],"kind":"struct"},"23:78:2195":{"crate_id":23,"path":["quote","to_tokens","ToTokens"],"kind":"trait"},"1:12248:27837":{"crate_id":1,"path":["std","backtrace_rs","print","PrintFmt"],"kind":"enum"},"1:5164:32851":{"crate_id":1,"path":["std","path","fmt","DebugHelper"],"kind":"struct"},"24:4209:3834":{"crate_id":24,"path":["syn","token","And"],"kind":"struct"},"1:10395:115":{"crate_id":1,"path":["std","sys","pal","unix","process","process_common","Command"],"kind":"struct"},"6:5181:7414":{"crate_id":6,"path":["libc","unix","linux_like","linux","mntent"],"kind":"struct"},"2:4406:221":{"crate_id":2,"path":["core","cell","RefCell"],"kind":"struct"},"21:216:10208":{"crate_id":21,"path":["proc_macro","bridge","fxhash","FxHasher"],"kind":"struct"},"17:10419:5635":{"crate_id":17,"path":["object","read","util","ByteString"],"kind":"struct"},"16:5846:8770":{"crate_id":16,"path":["gimli","read","cfi","CfiEntriesIter"],"kind":"struct"},"16:6353:6662":{"crate_id":16,"path":["gimli","read","endian_slice","EndianSlice"],"kind":"struct"},"17:12342:8738":{"crate_id":17,"path":["object","read","pe","import","ImportTable"],"kind":"struct"},"6:7330:7916":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","flock"],"kind":"struct"},"16:4352:6627":{"crate_id":16,"path":["gimli","constants","DwAt"],"kind":"struct"},"1:12276:730":{"crate_id":1,"path":["std","f64"],"kind":"primitive"},"2:22032:11000":{"crate_id":2,"path":["core","core_simd","simd","num","int","SimdInt"],"kind":"trait"},"16:5107:6649":{"crate_id":16,"path":["gimli","constants","DwRle"],"kind":"struct"},"1:11193:8595":{"crate_id":1,"path":["std","sys","pal","unix","time","Timespec"],"kind":"struct"},"11:1923:2163":{"crate_id":11,"path":["hashbrown","set","Union"],"kind":"struct"},"2:43906:9069":{"crate_id":2,"path":["core","str","IsAsciiWhitespace"],"kind":"struct"},"2:2657:145":{"crate_id":2,"path":["core","convert","From"],"kind":"trait"},"17:4821:23698":{"crate_id":17,"path":["object","read","xcoff","symbol","XcoffSymbolIterator"],"kind":"struct"},"21:2371:2813":{"crate_id":21,"path":["proc_macro","bridge","Literal"],"kind":"struct"},"6:5588:7599":{"crate_id":6,"path":["libc","unix","linux_like","linux","mq_attr"],"kind":"struct"},"1:10609:10749":{"crate_id":1,"path":["std","sys","pal","unix","stdio","Stdout"],"kind":"struct"},"16:8301:6818":{"crate_id":16,"path":["gimli","read","StoreOnHeap"],"kind":"struct"},"2:40131:3663":{"crate_id":2,"path":["core","iter","adapters","skip","Skip"],"kind":"struct"},"17:15463:6335":{"crate_id":17,"path":["object","pe","ImageEpilogueDynamicRelocationHeader"],"kind":"struct"},"2:40012:3654":{"crate_id":2,"path":["core","iter","adapters","filter","Filter"],"kind":"struct"},"2:42515:9008":{"crate_id":2,"path":["core","hash","sip","SipHasher13"],"kind":"struct"},"5:1481:3558":{"crate_id":5,"path":["alloc","collections","btree","map","IterMut"],"kind":"struct"},"17:3264:23617":{"crate_id":17,"path":["object","read","macho","section","MachOSectionIterator"],"kind":"struct"},"17:11898:5666":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandData"],"kind":"struct"},"2:43473:8980":{"crate_id":2,"path":["core","str","iter","EscapeDebug"],"kind":"struct"},"23:239:4423":{"crate_id":23,"path":["quote","__private","get_span","GetSpanInner"],"kind":"struct"},"17:15456:6333":{"crate_id":17,"path":["object","pe","ImagePrologueDynamicRelocationHeader"],"kind":"struct"},"17:10671:36926":{"crate_id":17,"path":["object","read","any","ComdatIteratorInternal"],"kind":"enum"},"2:41426:4728":{"crate_id":2,"path":["core","pin","Pin"],"kind":"struct"},"2:728:190":{"crate_id":2,"path":["core","num","nonzero","NonZero"],"kind":"struct"},"2:3149:143":{"crate_id":2,"path":["core","ops","function","FnOnce"],"kind":"trait"},"24:5904:3538":{"crate_id":24,"path":["syn","ty","TypeMacro"],"kind":"struct"},"16:150:5242":{"crate_id":16,"path":["gimli","read","util","ArrayVec"],"kind":"struct"},"17:3473:23620":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbolIterator"],"kind":"struct"},"1:6587:10876":{"crate_id":1,"path":["std","sync","once","OnceState"],"kind":"struct"},"24:4726:3869":{"crate_id":24,"path":["syn","token","Semi"],"kind":"struct"},"1:7811:10159":{"crate_id":1,"path":["std","backtrace_rs","symbolize","SymbolName"],"kind":"struct"},"1:3579:3705":{"crate_id":1,"path":["std","io","Write"],"kind":"trait"},"6:8029:8057":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","align","sem_t"],"kind":"struct"},"17:11115:23533":{"crate_id":17,"path":["object","read","coff","section","CoffSectionIterator"],"kind":"struct"},"16:7473:6759":{"crate_id":16,"path":["gimli","read","op","Expression"],"kind":"struct"},"24:3433:3819":{"crate_id":24,"path":["syn","token","Move"],"kind":"struct"},"17:10284:5631":{"crate_id":17,"path":["object","endian","I16Bytes"],"kind":"struct"},"5:4106:5253":{"crate_id":5,"path":["alloc","collections","vec_deque","drain","drop","DropGuard"],"kind":"struct"},"17:13485:5839":{"crate_id":17,"path":["object","elf","Dyn64"],"kind":"struct"},"2:10050:130":{"crate_id":2,"path":["core","fmt","Display"],"kind":"trait"},"17:13753:5910":{"crate_id":17,"path":["object","macho","DyldSubCacheInfo"],"kind":"struct"},"5:1558:10251":{"crate_id":5,"path":["alloc","collections","btree","map","IntoValues"],"kind":"struct"},"5:4837:776":{"crate_id":5,"path":["alloc","fmt"],"kind":"module"},"2:32863:3600":{"crate_id":2,"path":["core","ops","arith","AddAssign"],"kind":"trait"},"17:14503:6046":{"crate_id":17,"path":["object","macho","SourceVersionCommand"],"kind":"struct"},"1:8645:4133":{"crate_id":1,"path":["std","panic","BacktraceStyle"],"kind":"enum"},"17:15445:6332":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation64V2"],"kind":"struct"},"2:41757:89":{"crate_id":2,"path":["core","sync","atomic","AtomicI64"],"kind":"struct"},"11:2151:10636":{"crate_id":11,"path":["hashbrown","set","VacantEntry"],"kind":"struct"},"1:9273:8586":{"crate_id":1,"path":["std","sync","mpmc","select","Operation"],"kind":"struct"},"1:2655:5329":{"crate_id":1,"path":["std","io","buffered","bufwriter","BufWriter"],"kind":"struct"},"11:2383:3554":{"crate_id":11,"path":["hashbrown","table","Iter"],"kind":"struct"},"17:14311:6010":{"crate_id":17,"path":["object","macho","LinkeditDataCommand"],"kind":"struct"},"6:5244:7448":{"crate_id":6,"path":["libc","unix","linux_like","linux","fanotify_response"],"kind":"struct"},"11:2542:6944":{"crate_id":11,"path":["hashbrown","raw","bitmask","BitMask"],"kind":"struct"},"24:5783:2681":{"crate_id":24,"path":["syn","path","QSelf"],"kind":"struct"},"24:4376:3845":{"crate_id":24,"path":["syn","token","DotDotDot"],"kind":"struct"},"6:4811:7265":{"crate_id":6,"path":["libc","unix","linux_like","linux","spwd"],"kind":"struct"},"1:1063:10636":{"crate_id":1,"path":["std","collections","hash","map","VacantEntry"],"kind":"struct"},"5:5847:250":{"crate_id":5,"path":["alloc","string","ToString"],"kind":"trait"},"17:14298:6009":{"crate_id":17,"path":["object","macho","RpathCommand"],"kind":"struct"},"1:8748:10851":{"crate_id":1,"path":["std","path","Component"],"kind":"enum"},"17:15778:6441":{"crate_id":17,"path":["object","pe","ImageSeparateDebugHeader"],"kind":"struct"},"24:2109:2119":{"crate_id":24,"path":["syn","punctuated","Punctuated"],"kind":"struct"},"24:267:10131":{"crate_id":24,"path":["syn","attr","parsing","DisplayAttrStyle"],"kind":"struct"},"17:11755:8732":{"crate_id":17,"path":["object","read","elf","attributes","AttributeIndexIterator"],"kind":"struct"},"1:9329:187":{"crate_id":1,"path":["std","sync","mutex","MutexGuard"],"kind":"struct"},"11:2124:8880":{"crate_id":11,"path":["hashbrown","set","Entry"],"kind":"enum"},"2:2964:5486":{"crate_id":2,"path":["core","ops","arith","Neg"],"kind":"trait"},"24:4610:3861":{"crate_id":24,"path":["syn","token","PathSep"],"kind":"struct"},"1:9405:9092":{"crate_id":1,"path":["std","time","SystemTimeError"],"kind":"struct"},"24:5803:3528":{"crate_id":24,"path":["syn","restriction","FieldMutability"],"kind":"enum"},"2:42992:16064":{"crate_id":2,"path":["core","slice","iter","ChunksMut"],"kind":"struct"},"1:8171:9083":{"crate_id":1,"path":["std","hash","random","DefaultHasher"],"kind":"struct"},"24:355:3692":{"crate_id":24,"path":["syn","buffer","Cursor"],"kind":"struct"},"5:4311:3554":{"crate_id":5,"path":["alloc","collections","vec_deque","iter","Iter"],"kind":"struct"},"16:8118:8892":{"crate_id":16,"path":["gimli","read","unit","EntriesRaw"],"kind":"struct"},"1:5241:204":{"crate_id":1,"path":["std","path","PathBuf"],"kind":"struct"},"18:754:8714":{"crate_id":18,"path":["memchr","memmem","SearcherRev"],"kind":"struct"},"2:22:791":{"crate_id":2,"path":["core","format_args"],"kind":"macro"},"16:7428:23435":{"crate_id":16,"path":["gimli","read","op","EvaluationResult"],"kind":"enum"},"17:13899:5934":{"crate_id":17,"path":["object","macho","Section32"],"kind":"struct"},"24:5339:3506":{"crate_id":24,"path":["syn","expr","ExprTryBlock"],"kind":"struct"},"17:15190:6267":{"crate_id":17,"path":["object","pe","ImageAuxSymbolCrc"],"kind":"struct"},"11:787:8910":{"crate_id":11,"path":["hashbrown","map","Values"],"kind":"struct"},"5:7419:3553":{"crate_id":5,"path":["alloc","collections","btree","set","IntoIter"],"kind":"struct"},"2:4262:3730":{"crate_id":2,"path":["core","cell","lazy","LazyCell"],"kind":"struct"},"24:5487:2785":{"crate_id":24,"path":["syn","generics","TraitBound"],"kind":"struct"},"17:15521:6377":{"crate_id":17,"path":["object","pe","ImageLoadConfigDirectory64"],"kind":"struct"},"6:8317:8075":{"crate_id":6,"path":["libc","unix","linux_like","linux","canfd_frame"],"kind":"struct"},"24:5280:2468":{"crate_id":24,"path":["syn","expr","ExprLit"],"kind":"struct"},"6:5002:7373":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_periodic_effect"],"kind":"struct"},"21:2680:2193":{"crate_id":21,"path":["proc_macro","Span"],"kind":"struct"},"24:3739:3829":{"crate_id":24,"path":["syn","token","Unsized"],"kind":"struct"},"24:1013:3679":{"crate_id":24,"path":["syn","ext","IdentExt"],"kind":"trait"},"16:7910:23441":{"crate_id":16,"path":["gimli","read","unit","AttributeValue"],"kind":"enum"},"5:831:5256":{"crate_id":5,"path":["alloc","collections","binary_heap","PeekMut"],"kind":"struct"},"1:3233:33119":{"crate_id":1,"path":["std","io","stdio","StdinRaw"],"kind":"struct"},"1:4808:10817":{"crate_id":1,"path":["std","os","linux","process","CommandExt"],"kind":"trait"},"17:11227:23531":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdat"],"kind":"struct"},"11:1566:22486":{"crate_id":11,"path":["hashbrown","rustc_entry","RustcEntry"],"kind":"enum"},"16:2478:6574":{"crate_id":16,"path":["gimli","common","DebugInfoOffset"],"kind":"struct"},"17:13116:5763":{"crate_id":17,"path":["object","archive","AixHeader"],"kind":"struct"},"17:14189:5991":{"crate_id":17,"path":["object","macho","DylibModule32"],"kind":"struct"},"17:13437:5827":{"crate_id":17,"path":["object","elf","ProgramHeader32"],"kind":"struct"},"17:14386:6022":{"crate_id":17,"path":["object","macho","BuildVersionCommand"],"kind":"struct"},"6:1485:7103":{"crate_id":6,"path":["libc","unix","linux_like","in_addr"],"kind":"struct"},"20:680:3577":{"crate_id":20,"path":["proc_macro2","marker","ProcMacroAutoTraits"],"kind":"struct"},"18:481:8696":{"crate_id":18,"path":["memchr","cow","CowBytes"],"kind":"struct"},"17:14977:6220":{"crate_id":17,"path":["object","pe","ImageNtHeaders32"],"kind":"struct"},"1:2188:130":{"crate_id":1,"path":["std","ffi","os_str","Display"],"kind":"struct"},"5:927:5261":{"crate_id":5,"path":["alloc","collections","binary_heap","Hole"],"kind":"struct"},"16:5347:6651":{"crate_id":16,"path":["gimli","constants","DwEhPe"],"kind":"struct"},"6:5630:7624":{"crate_id":6,"path":["libc","unix","linux_like","linux","ifconf"],"kind":"struct"},"2:21903:10915":{"crate_id":2,"path":["core","core_simd","vector","SimdElement"],"kind":"trait"},"1:7958:4723":{"crate_id":1,"path":["std","thread","Thread"],"kind":"struct"},"9:392:22406":{"crate_id":9,"path":["miniz_oxide","MZFlush"],"kind":"enum"},"2:40096:3660":{"crate_id":2,"path":["core","iter","adapters","peekable","Peekable"],"kind":"struct"},"17:15116:6246":{"crate_id":17,"path":["object","pe","ImageSymbolExBytes"],"kind":"struct"},"24:4938:3459":{"crate_id":24,"path":["syn","attr","MetaNameValue"],"kind":"struct"},"6:5502:7571":{"crate_id":6,"path":["libc","unix","linux_like","linux","tls12_crypto_info_aes_gcm_256"],"kind":"struct"},"24:4808:3875":{"crate_id":24,"path":["syn","token","SlashEq"],"kind":"struct"},"6:5677:7643":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_can"],"kind":"struct"},"18:608:36940":{"crate_id":18,"path":["memchr","memmem","twoway","Suffix"],"kind":"struct"},"2:12615:16075":{"crate_id":2,"path":["core","str","pattern","Pattern"],"kind":"trait"},"1:918:10251":{"crate_id":1,"path":["std","collections","hash","map","IntoValues"],"kind":"struct"},"24:5355:3509":{"crate_id":24,"path":["syn","expr","ExprWhile"],"kind":"struct"},"24:5725:203":{"crate_id":24,"path":["syn","path","Path"],"kind":"struct"},"16:6494:8829":{"crate_id":16,"path":["gimli","read","aranges","ArangeHeaderIter"],"kind":"struct"},"2:10513:5320":{"crate_id":2,"path":["core","slice","sort","merge_sort","RunVec"],"kind":"struct"},"2:21250:34838":{"crate_id":2,"path":["core","core_simd","swizzle","interleave","Lo"],"kind":"struct"},"2:22220:10995":{"crate_id":2,"path":["core","core_simd","simd","cmp","eq","SimdPartialEq"],"kind":"trait"},"6:1639:7202":{"crate_id":6,"path":["libc","unix","linux_like","in6_rtmsg"],"kind":"struct"},"17:12030:23619":{"crate_id":17,"path":["object","read","macho","segment","MachOSegmentIterator"],"kind":"struct"},"6:1692:7230":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_un"],"kind":"struct"},"1:10606:10747":{"crate_id":1,"path":["std","sys","pal","unix","stdio","Stdin"],"kind":"struct"},"20:0:1969":{"crate_id":20,"path":["proc_macro2"],"kind":"module"},"5:7580:8933":{"crate_id":5,"path":["alloc","ffi","c_str","FromVecWithNulError"],"kind":"struct"},"2:44198:4848":{"crate_id":2,"path":["core","alloc","AllocError"],"kind":"struct"},"6:8247:8059":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_mutexattr_t"],"kind":"struct"},"2:43621:9048":{"crate_id":2,"path":["core","str","pattern","CharArrayRefSearcher"],"kind":"struct"},"1:9334:5345":{"crate_id":1,"path":["std","sync","mutex","MappedMutexGuard"],"kind":"struct"},"2:45288:8383":{"crate_id":2,"path":["core","core_arch","simd","i64x1"],"kind":"struct"},"1:12280:875":{"crate_id":1,"path":["std","i64"],"kind":"primitive"},"1:8432:10711":{"crate_id":1,"path":["std","io","SeekFrom"],"kind":"enum"},"24:5789:3530":{"crate_id":24,"path":["syn","restriction","Visibility"],"kind":"enum"},"24:1793:3682":{"crate_id":24,"path":["syn","parse","StepCursor"],"kind":"struct"},"16:6991:36851":{"crate_id":16,"path":["gimli","read","loclists","LocListsFormat"],"kind":"enum"},"1:12289:1357":{"crate_id":1,"path":["std","reference"],"kind":"primitive"},"1:3013:138":{"crate_id":1,"path":["std","io","error","Error"],"kind":"struct"},"1:8804:8577":{"crate_id":1,"path":["std","path","Ancestors"],"kind":"struct"},"16:6160:22533":{"crate_id":16,"path":["gimli","read","cfi","CallFrameInstruction"],"kind":"enum"},"17:256:36868":{"crate_id":17,"path":["object","read","util","DebugByte"],"kind":"struct"},"2:22603:8964":{"crate_id":2,"path":["core","num","fmt","Formatted"],"kind":"struct"},"2:42355:3699":{"crate_id":2,"path":["core","fmt","Arguments"],"kind":"struct"},"17:12175:23674":{"crate_id":17,"path":["object","read","pe","file","PeFile"],"kind":"struct"},"2:45495:8402":{"crate_id":2,"path":["core","core_arch","simd","f32x4"],"kind":"struct"},"24:5945:2682":{"crate_id":24,"path":["syn","ty","ReturnType"],"kind":"enum"},"2:4410:3711":{"crate_id":2,"path":["core","cell","BorrowError"],"kind":"struct"},"20:734:2114":{"crate_id":20,"path":["proc_macro2","fallback","Group"],"kind":"struct"},"6:5376:7501":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlattr"],"kind":"struct"},"17:14038:5954":{"crate_id":17,"path":["object","macho","SubLibraryCommand"],"kind":"struct"},"24:5259:3496":{"crate_id":24,"path":["syn","expr","ExprGroup"],"kind":"struct"},"21:1818:4961":{"crate_id":21,"path":["proc_macro","bridge","Marked"],"kind":"struct"},"6:485:7040":{"crate_id":6,"path":["libc","unix","timespec"],"kind":"struct"},"17:11089:23535":{"crate_id":17,"path":["object","read","coff","section","CoffSegmentIterator"],"kind":"struct"},"2:1949:189":{"crate_id":2,"path":["core","ptr","non_null","NonNull"],"kind":"struct"},"24:2286:3553":{"crate_id":24,"path":["syn","punctuated","IntoIter"],"kind":"struct"},"17:12808:5742":{"crate_id":17,"path":["object","read","SymbolIndex"],"kind":"struct"},"9:482:22404":{"crate_id":9,"path":["miniz_oxide","DataFormat"],"kind":"enum"},"5:5713:4944":{"crate_id":5,"path":["alloc","string","retain","SetLenOnDrop"],"kind":"struct"},"17:13814:5922":{"crate_id":17,"path":["object","macho","MachHeader64"],"kind":"struct"},"2:10936:8948":{"crate_id":2,"path":["core","slice","iter","SplitInclusive"],"kind":"struct"},"0:965:1990":{"crate_id":0,"path":["serde_derive","Deserialize"],"kind":"proc_derive"},"17:10710:23510":{"crate_id":17,"path":["object","read","any","ComdatSectionIterator"],"kind":"struct"},"17:12647:23693":{"crate_id":17,"path":["object","read","xcoff","comdat","XcoffComdatIterator"],"kind":"struct"},"11:0:3316":{"crate_id":11,"path":["hashbrown"],"kind":"module"},"17:2175:23596":{"crate_id":17,"path":["object","read","elf","relocation","ElfRelaIterator"],"kind":"enum"},"2:43062:16058":{"crate_id":2,"path":["core","slice","iter","ArrayChunksMut"],"kind":"struct"},"24:1366:8656":{"crate_id":24,"path":["syn","lit","LitIntRepr"],"kind":"struct"},"11:875:10633":{"crate_id":11,"path":["hashbrown","map","RawVacantEntryMut"],"kind":"struct"},"6:8282:8067":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_cond_t"],"kind":"struct"},"2:10691:10712":{"crate_id":2,"path":["core","slice","index","private_slice_index","Sealed"],"kind":"trait"},"6:7516:8000":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user"],"kind":"struct"},"2:4051:5277":{"crate_id":2,"path":["core","array","Guard"],"kind":"struct"},"2:46418:8493":{"crate_id":2,"path":["core","core_arch","x86","__m512bh"],"kind":"struct"},"2:39753:8979":{"crate_id":2,"path":["core","char","EscapeUnicode"],"kind":"struct"},"24:274:10132":{"crate_id":24,"path":["syn","attr","parsing","DisplayPath"],"kind":"struct"},"6:5306:7479":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_filter"],"kind":"struct"},"17:14752:6086":{"crate_id":17,"path":["object","pe","ImageOs2Header"],"kind":"struct"},"5:7592:8936":{"crate_id":5,"path":["alloc","ffi","c_str","IntoStringError"],"kind":"struct"},"1:9091:8580":{"crate_id":1,"path":["std","process","ExitCode"],"kind":"struct"},"2:40083:3645":{"crate_id":2,"path":["core","iter","adapters","map_while","MapWhile"],"kind":"struct"},"24:3161:3807":{"crate_id":24,"path":["syn","token","Do"],"kind":"struct"},"2:12157:16078":{"crate_id":2,"path":["core","str","converts","from_utf8"],"kind":"function"},"24:1682:2198":{"crate_id":24,"path":["syn","meta","ParseNestedMeta"],"kind":"struct"},"2:2954:5473":{"crate_id":2,"path":["core","ops","arith","Sub"],"kind":"trait"},"20:803:8695":{"crate_id":20,"path":["proc_macro2","imp","DeferredTokenStream"],"kind":"struct"},"2:10269:157":{"crate_id":2,"path":["core","hash","Hasher"],"kind":"trait"},"6:4800:7257":{"crate_id":6,"path":["libc","unix","linux_like","linux","passwd"],"kind":"struct"},"1:4414:10815":{"crate_id":1,"path":["std","os","unix","net","listener","UnixListener"],"kind":"struct"},"2:38981:215":{"crate_id":2,"path":["core","ops","range","RangeTo"],"kind":"struct"},"1:6752:10260":{"crate_id":1,"path":["std","sync","reentrant_lock","ReentrantLock"],"kind":"struct"},"17:15273:6286":{"crate_id":17,"path":["object","pe","ImageThunkData64"],"kind":"struct"},"16:5914:8775":{"crate_id":16,"path":["gimli","read","cfi","AugmentationData"],"kind":"struct"},"17:14260:6005":{"crate_id":17,"path":["object","macho","TwolevelHint"],"kind":"struct"},"16:4614:6634":{"crate_id":16,"path":["gimli","constants","DwVis"],"kind":"struct"},"2:43554:16089":{"crate_id":2,"path":["core","str","pattern","SearchStep"],"kind":"enum"},"2:33236:5463":{"crate_id":2,"path":["core","ops","bit","BitAnd"],"kind":"trait"},"24:5246:3494":{"crate_id":24,"path":["syn","expr","ExprContinue"],"kind":"struct"},"9:330:6988":{"crate_id":9,"path":["miniz_oxide","inflate","core","LocalVars"],"kind":"struct"},"1:7049:10911":{"crate_id":1,"path":["std","std_float","StdFloat"],"kind":"trait"},"11:2469:4938":{"crate_id":11,"path":["hashbrown","table","ExtractIf"],"kind":"struct"},"17:11537:23579":{"crate_id":17,"path":["object","read","elf","note","NoteIterator"],"kind":"struct"},"16:3329:6618":{"crate_id":16,"path":["gimli","arch","LoongArch"],"kind":"struct"},"2:41562:97":{"crate_id":2,"path":["core","sync","atomic","AtomicU8"],"kind":"struct"},"6:6609:7780":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","regex_t"],"kind":"struct"},"2:43174:8946":{"crate_id":2,"path":["core","str","iter","Split"],"kind":"struct"},"1:9342:5277":{"crate_id":1,"path":["std","sync","poison","Guard"],"kind":"struct"},"1:7651:33373":{"crate_id":1,"path":["std","panicking","Hook"],"kind":"enum"},"1:9219:117":{"crate_id":1,"path":["std","sync","mpmc","context","Context"],"kind":"struct"},"11:832:10629":{"crate_id":11,"path":["hashbrown","map","ValuesMut"],"kind":"struct"},"2:11731:4887":{"crate_id":2,"path":["core","slice","raw","from_raw_parts"],"kind":"function"},"2:43669:9049":{"crate_id":2,"path":["core","str","pattern","CharSliceSearcher"],"kind":"struct"},"6:1510:7113":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr"],"kind":"struct"},"2:31771:8971":{"crate_id":2,"path":["core","error","Source"],"kind":"struct"},"17:14545:6050":{"crate_id":17,"path":["object","macho","Nlist32"],"kind":"struct"},"5:724:249":{"crate_id":5,"path":["alloc","borrow","ToOwned"],"kind":"trait"},"2:12569:3579":{"crate_id":2,"path":["core","str","traits","FromStr"],"kind":"trait"},"2:43964:9073":{"crate_id":2,"path":["core","time","TryFromFloatSecsError"],"kind":"struct"},"1:893:4940":{"crate_id":1,"path":["std","collections","hash","map","Drain"],"kind":"struct"},"1:7938:4726":{"crate_id":1,"path":["std","thread","ThreadId"],"kind":"struct"},"24:5302:3481":{"crate_id":24,"path":["syn","expr","ExprParen"],"kind":"struct"},"17:14723:6066":{"crate_id":17,"path":["object","pe","ImageDosHeader"],"kind":"struct"},"1:7256:10158":{"crate_id":1,"path":["std","sys_common","backtrace","_print","DisplayBacktrace"],"kind":"struct"},"16:6962:6604":{"crate_id":16,"path":["gimli","read","loclists","DebugLocLists"],"kind":"struct"},"1:11241:8596":{"crate_id":1,"path":["std","sys","personality","dwarf","eh","EHContext"],"kind":"struct"},"17:14587:6057":{"crate_id":17,"path":["object","macho","RelocationInfo"],"kind":"struct"},"17:11042:23528":{"crate_id":17,"path":["object","read","archive","ArchiveMember"],"kind":"struct"},"6:5020:7382":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_effect"],"kind":"struct"},"2:22623:8967":{"crate_id":2,"path":["core","num","error","ParseIntError"],"kind":"struct"},"17:12683:23697":{"crate_id":17,"path":["object","read","xcoff","segment","XcoffSegmentIterator"],"kind":"struct"},"17:13594:5869":{"crate_id":17,"path":["object","elf","HashHeader"],"kind":"struct"},"17:13015:5713":{"crate_id":17,"path":["object","read","Relocation"],"kind":"struct"},"17:10534:36907":{"crate_id":17,"path":["object","read","any","SegmentIteratorInternal"],"kind":"enum"},"6:6524:7725":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_mmap_req"],"kind":"struct"},"1:11027:5363":{"crate_id":1,"path":["std","sys","pal","unix","process","process_inner","posix_spawn","PosixSpawnFileActions"],"kind":"struct"},"16:7559:8885":{"crate_id":16,"path":["gimli","read","pubtypes","PubTypesEntry"],"kind":"struct"},"2:41434:226":{"crate_id":2,"path":["core","result","Result"],"kind":"enum"},"6:5557:7590":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_setup"],"kind":"struct"},"6:5624:7621":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_ifc_ifcu"],"kind":"union"},"17:13387:5820":{"crate_id":17,"path":["object","elf","Rel32"],"kind":"struct"},"6:523:7065":{"crate_id":6,"path":["libc","unix","hostent"],"kind":"struct"},"2:10844:3554":{"crate_id":2,"path":["core","slice","iter","Iter"],"kind":"struct"},"5:1328:10636":{"crate_id":5,"path":["alloc","collections","btree","map","entry","VacantEntry"],"kind":"struct"},"17:13877:5933":{"crate_id":17,"path":["object","macho","SegmentCommand64"],"kind":"struct"},"5:827:102":{"crate_id":5,"path":["alloc","collections","binary_heap","BinaryHeap"],"kind":"struct"},"2:39676:8974":{"crate_id":2,"path":["core","ascii","EscapeDefault"],"kind":"struct"},"1:11688:5367":{"crate_id":1,"path":["std","sys_common","net","LookupHost"],"kind":"struct"},"24:363:37103":{"crate_id":24,"path":["syn","buffer","empty","UnsafeSyncEntry"],"kind":"struct"},"1:2271:10691":{"crate_id":1,"path":["std","fs","DirEntry"],"kind":"struct"},"1:4262:10811":{"crate_id":1,"path":["std","os","unix","net","ancillary","ScmCredentials"],"kind":"struct"},"2:10893:8946":{"crate_id":2,"path":["core","slice","iter","Split"],"kind":"struct"},"21:2567:3741":{"crate_id":21,"path":["proc_macro","diagnostic","Level"],"kind":"enum"},"1:12270:1624":{"crate_id":1,"path":["std","slice"],"kind":"primitive"},"1:8469:3102":{"crate_id":1,"path":["std","io","Bytes"],"kind":"struct"},"18:635:5521":{"crate_id":18,"path":["memchr","memmem","twoway","ApproximateByteSet"],"kind":"struct"},"6:8294:8069":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_rwlock_t"],"kind":"struct"},"6:8259:8061":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_condattr_t"],"kind":"struct"},"5:1192:36697":{"crate_id":5,"path":["alloc","collections","btree","dedup_sorted_iter","DedupSortedIter"],"kind":"struct"},"11:2304:8880":{"crate_id":11,"path":["hashbrown","table","Entry"],"kind":"enum"},"17:10044:23505":{"crate_id":17,"path":["object","common","SegmentFlags"],"kind":"enum"},"24:4313:3841":{"crate_id":24,"path":["syn","token","Comma"],"kind":"struct"},"24:4697:3867":{"crate_id":24,"path":["syn","token","Question"],"kind":"struct"},"6:5665:7638":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_txtime"],"kind":"struct"},"16:5006:6646":{"crate_id":16,"path":["gimli","constants","DwLne"],"kind":"struct"},"11:2443:4940":{"crate_id":11,"path":["hashbrown","table","Drain"],"kind":"struct"},"17:14012:5951":{"crate_id":17,"path":["object","macho","SubClientCommand"],"kind":"struct"},"2:46202:8473":{"crate_id":2,"path":["core","core_arch","simd","i64x8"],"kind":"struct"},"17:14575:5713":{"crate_id":17,"path":["object","macho","Relocation"],"kind":"struct"},"16:6047:23423":{"crate_id":16,"path":["gimli","read","cfi","UnwindTable"],"kind":"struct"},"1:10872:8514":{"crate_id":1,"path":["std","sys","pal","unix","fs","FileTimes"],"kind":"struct"},"17:14091:5961":{"crate_id":17,"path":["object","macho","RoutinesCommand32"],"kind":"struct"},"17:15206:6270":{"crate_id":17,"path":["object","pe","ImageLinenumber"],"kind":"struct"},"6:5146:7410":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Shdr"],"kind":"struct"},"16:2548:6577":{"crate_id":16,"path":["gimli","common","LocationListsOffset"],"kind":"struct"},"18:531:8698":{"crate_id":18,"path":["memchr","memmem","prefilter","PrefilterState"],"kind":"struct"},"6:5472:7560":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_authinfo"],"kind":"struct"},"6:5225:7437":{"crate_id":6,"path":["libc","unix","linux_like","linux","arpd_request"],"kind":"struct"},"1:8586:10839":{"crate_id":1,"path":["std","os","linux","process","PidFd"],"kind":"struct"},"16:7006:23431":{"crate_id":16,"path":["gimli","read","loclists","RawLocListIter"],"kind":"struct"},"17:11341:23566":{"crate_id":17,"path":["object","read","elf","segment","ElfSegmentIterator"],"kind":"struct"},"1:10255:32850":{"crate_id":1,"path":["std","sys","pal","unix","os","EnvStrDebug"],"kind":"struct"},"5:7697:4938":{"crate_id":5,"path":["alloc","vec","extract_if","ExtractIf"],"kind":"struct"},"2:4563:3723":{"crate_id":2,"path":["core","cell","UnsafeCell"],"kind":"struct"},"11:2554:36835":{"crate_id":11,"path":["hashbrown","raw","Fallibility"],"kind":"enum"},"17:13292:5804":{"crate_id":17,"path":["object","elf","CompressionHeader32"],"kind":"struct"},"6:5046:7393":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_abs_setup"],"kind":"struct"},"24:693:3553":{"crate_id":24,"path":["syn","error","IntoIter"],"kind":"struct"},"1:9635:10707":{"crate_id":1,"path":["std","sys","pal","unix","fs","ReadDir"],"kind":"struct"},"24:3348:3816":{"crate_id":24,"path":["syn","token","Let"],"kind":"struct"},"24:5582:3520":{"crate_id":24,"path":["syn","lit","LitChar"],"kind":"struct"},"17:13999:5949":{"crate_id":17,"path":["object","macho","SubFrameworkCommand"],"kind":"struct"},"2:10868:3558":{"crate_id":2,"path":["core","slice","iter","IterMut"],"kind":"struct"},"23:148:4163":{"crate_id":23,"path":["quote","__private","HasIterator"],"kind":"struct"},"24:5378:58":{"crate_id":24,"path":["syn","expr","parsing","kw","builtin"],"kind":"struct"},"17:513:23498":{"crate_id":17,"path":["object","read","any","Comdat"],"kind":"struct"},"17:12318:5710":{"crate_id":17,"path":["object","read","pe","export","Export"],"kind":"struct"},"5:1569:210":{"crate_id":5,"path":["alloc","collections","btree","map","Range"],"kind":"struct"},"6:1663:7219":{"crate_id":6,"path":["libc","unix","linux_like","arpreq_old"],"kind":"struct"},"17:12264:23659":{"crate_id":17,"path":["object","read","pe","section","PeSection"],"kind":"struct"},"17:14284:6008":{"crate_id":17,"path":["object","macho","UuidCommand"],"kind":"struct"},"2:10415:5313":{"crate_id":2,"path":["core","slice","sort","InsertionHole"],"kind":"struct"},"1:10838:9093":{"crate_id":1,"path":["std","sys","pal","unix","fs","FileAttr"],"kind":"struct"},"1:8494:10762":{"crate_id":1,"path":["std","net","tcp","IntoIncoming"],"kind":"struct"},"1:8399:3617":{"crate_id":1,"path":["std","io","util","Empty"],"kind":"struct"},"23:322:2816":{"crate_id":23,"path":["quote","spanned","Spanned"],"kind":"trait"},"6:5283:7470":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_j1939"],"kind":"struct"},"21:2743:2192":{"crate_id":21,"path":["proc_macro","Spacing"],"kind":"enum"},"24:5233:3476":{"crate_id":24,"path":["syn","expr","ExprCast"],"kind":"struct"},"6:6775:7839":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","iocb"],"kind":"struct"},"17:0:3321":{"crate_id":17,"path":["object"],"kind":"module"},"16:5700:6597":{"crate_id":16,"path":["gimli","read","cfi","DebugFrame"],"kind":"struct"},"18:581:4503":{"crate_id":18,"path":["memchr","memmem","twoway","Reverse"],"kind":"struct"},"16:2684:6583":{"crate_id":16,"path":["gimli","common","RangeListsOffset"],"kind":"struct"},"6:5643:7630":{"crate_id":6,"path":["libc","unix","linux_like","linux","dirent64"],"kind":"struct"},"1:8132:9082":{"crate_id":1,"path":["std","fs","Permissions"],"kind":"struct"},"2:9516:85":{"crate_id":2,"path":["core","sync","atomic","AtomicBool"],"kind":"struct"},"16:3899:6624":{"crate_id":16,"path":["gimli","constants","DwCfa"],"kind":"struct"},"17:15760:6435":{"crate_id":17,"path":["object","pe","ImageFunctionEntry"],"kind":"struct"},"17:14876:6180":{"crate_id":17,"path":["object","pe","ImageOptionalHeader32"],"kind":"struct"},"2:4534:3721":{"crate_id":2,"path":["core","cell","BorrowRefMut"],"kind":"struct"},"17:10457:139":{"crate_id":17,"path":["object","read","any","File"],"kind":"enum"},"16:2418:6571":{"crate_id":16,"path":["gimli","common","DebugAddrBase"],"kind":"struct"},"1:6583:3620":{"crate_id":1,"path":["std","sync","once","Once"],"kind":"struct"},"5:4926:217":{"crate_id":5,"path":["alloc","rc","Rc"],"kind":"struct"},"24:3331:3815":{"crate_id":24,"path":["syn","token","In"],"kind":"struct"},"5:3281:8911":{"crate_id":5,"path":["alloc","collections","btree","set","Intersection"],"kind":"struct"},"2:40519:3624":{"crate_id":2,"path":["core","iter","sources","repeat","Repeat"],"kind":"struct"},"1:3369:10745":{"crate_id":1,"path":["std","io","stdio","Stderr"],"kind":"struct"},"2:3115:127":{"crate_id":2,"path":["core","ops","deref","Deref"],"kind":"trait"},"21:244:37043":{"crate_id":21,"path":["proc_macro","bridge","handle","OwnedStore"],"kind":"struct"},"17:12251:23660":{"crate_id":17,"path":["object","read","pe","section","PeSectionIterator"],"kind":"struct"},"1:1596:8912":{"crate_id":1,"path":["std","collections","hash","set","Difference"],"kind":"struct"},"1:6279:5340":{"crate_id":1,"path":["std","sync","mpmc","waker","SyncWaker"],"kind":"struct"},"16:6532:8832":{"crate_id":16,"path":["gimli","read","aranges","ArangeEntryIter"],"kind":"struct"},"2:43160:3102":{"crate_id":2,"path":["core","str","iter","Bytes"],"kind":"struct"},"11:364:5246":{"crate_id":11,"path":["hashbrown","raw","RawIntoIter"],"kind":"struct"},"2:42013:2730":{"crate_id":2,"path":["core","fmt","num","Binary"],"kind":"struct"},"2:42983:8951":{"crate_id":2,"path":["core","slice","iter","Chunks"],"kind":"struct"},"17:10137:23480":{"crate_id":17,"path":["object","endian","Endianness"],"kind":"enum"},"17:12076:23616":{"crate_id":17,"path":["object","read","macho","section","MachOSection"],"kind":"struct"},"24:1078:37300":{"crate_id":24,"path":["syn","generics","TypeParams"],"kind":"struct"},"2:43575:9039":{"crate_id":2,"path":["core","str","pattern","CharSearcher"],"kind":"struct"},"5:4271:5277":{"crate_id":5,"path":["alloc","collections","vec_deque","into_iter","try_rfold","Guard"],"kind":"struct"},"1:9115:3553":{"crate_id":1,"path":["std","sync","mpsc","IntoIter"],"kind":"struct"},"17:14111:5964":{"crate_id":17,"path":["object","macho","RoutinesCommand64"],"kind":"struct"},"24:5588:3517":{"crate_id":24,"path":["syn","lit","LitBool"],"kind":"struct"},"24:98:4019":{"crate_id":24,"path":["syn","token","private","CustomToken"],"kind":"trait"},"16:6456:23428":{"crate_id":16,"path":["gimli","read","abbrev","Attributes"],"kind":"enum"},"13:226:6943":{"crate_id":13,"path":["std_detect","detect","cache","Initializer"],"kind":"struct"},"6:5191:7421":{"crate_id":6,"path":["libc","unix","linux_like","linux","posix_spawn_file_actions_t"],"kind":"struct"},"1:9150:10884":{"crate_id":1,"path":["std","sync","mpsc","TryRecvError"],"kind":"enum"},"17:11419:5653":{"crate_id":17,"path":["object","read","elf","symbol","SymbolTable"],"kind":"struct"},"14:165:22495":{"crate_id":14,"path":["rustc_demangle","DemangleStyle"],"kind":"enum"},"24:5534:2203":{"crate_id":24,"path":["syn","lifetime","Lifetime"],"kind":"function"},"16:7755:6602":{"crate_id":16,"path":["gimli","read","str","DebugLineStr"],"kind":"struct"},"2:2908:2657":{"crate_id":2,"path":["core","marker","PhantomData"],"kind":"struct"},"16:7580:8886":{"crate_id":16,"path":["gimli","read","pubtypes","PubTypesEntryIter"],"kind":"struct"},"17:15624:6397":{"crate_id":17,"path":["object","pe","ImageAlpha64RuntimeFunctionEntry"],"kind":"struct"},"21:966:3739":{"crate_id":21,"path":["proc_macro","bridge","client","SourceFile"],"kind":"struct"},"6:1621:7190":{"crate_id":6,"path":["libc","unix","linux_like","in_pktinfo"],"kind":"struct"},"2:10056:3708":{"crate_id":2,"path":["core","fmt","LowerHex"],"kind":"trait"},"17:15281:6287":{"crate_id":17,"path":["object","pe","ImageThunkData32"],"kind":"struct"},"6:5483:7563":{"crate_id":6,"path":["libc","unix","linux_like","linux","tls_crypto_info"],"kind":"struct"},"17:15342:6303":{"crate_id":17,"path":["object","pe","ImageDelayloadDescriptor"],"kind":"struct"},"24:4586:3859":{"crate_id":24,"path":["syn","token","OrEq"],"kind":"struct"},"6:5407:1205":{"crate_id":6,"path":["libc","unix","linux_like","linux","option"],"kind":"struct"},"2:5739:5277":{"crate_id":2,"path":["core","iter","adapters","filter_map","next_chunk","Guard"],"kind":"struct"},"2:40497:3618":{"crate_id":2,"path":["core","iter","sources","from_fn","FromFn"],"kind":"struct"},"17:15655:6405":{"crate_id":17,"path":["object","pe","ImageEnclaveConfig32"],"kind":"struct"},"17:12485:23689":{"crate_id":17,"path":["object","read","pe","resource","ResourceNameOrId"],"kind":"enum"},"0:964:1983":{"crate_id":0,"path":["serde_derive","Serialize"],"kind":"proc_derive"},"6:4952:7347":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_mask"],"kind":"struct"},"5:3307:2163":{"crate_id":5,"path":["alloc","collections","btree","set","Union"],"kind":"struct"},"24:89:2120":{"crate_id":24,"path":["syn","token","Token"],"kind":"trait"},"6:6447:7691":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","glob64_t"],"kind":"struct"},"17:12433:5713":{"crate_id":17,"path":["object","read","pe","relocation","Relocation"],"kind":"struct"},"1:7851:5356":{"crate_id":1,"path":["std","backtrace_rs","print","BacktraceFrameFmt"],"kind":"struct"},"5:5215:5283":{"crate_id":5,"path":["alloc","rc","Weak"],"kind":"struct"},"16:860:36869":{"crate_id":16,"path":["gimli","read","endian_slice","DebugBytes"],"kind":"struct"},"17:14933:6215":{"crate_id":17,"path":["object","pe","ImageOptionalHeader64"],"kind":"struct"},"14:160:10134":{"crate_id":14,"path":["rustc_demangle","Demangle"],"kind":"struct"},"6:1585:7160":{"crate_id":6,"path":["libc","unix","linux_like","Dl_info"],"kind":"struct"},"1:4849:10801":{"crate_id":1,"path":["std","os","fd","raw","IntoRawFd"],"kind":"trait"},"1:7227:5353":{"crate_id":1,"path":["std","sys","thread_local","abort_on_dtor_unwind","DtorUnwindGuard"],"kind":"struct"},"2:40290:3666":{"crate_id":2,"path":["core","iter","adapters","take_while","TakeWhile"],"kind":"struct"},"1:12237:10626":{"crate_id":1,"path":["std","backtrace_rs","types","BytesOrWideString"],"kind":"enum"},"5:6158:5277":{"crate_id":5,"path":["alloc","sync","from_iter_exact","Guard"],"kind":"struct"},"2:4128:34550":{"crate_id":2,"path":["core","asserting","TryCaptureWithoutDebug"],"kind":"struct"},"17:10068:23486":{"crate_id":17,"path":["object","common","SectionFlags"],"kind":"enum"},"2:45833:8432":{"crate_id":2,"path":["core","core_arch","simd","i64x4"],"kind":"struct"},"1:11606:9874":{"crate_id":1,"path":["std","sys_common","wtf8","Wtf8"],"kind":"struct"},"2:31867:2152":{"crate_id":2,"path":["core","marker","Tuple"],"kind":"trait"},"24:1600:3696":{"crate_id":24,"path":["syn","lookahead","Peek"],"kind":"trait"},"1:6366:5341":{"crate_id":1,"path":["std","sync","mpmc","Sender"],"kind":"struct"},"23:46:3585":{"crate_id":23,"path":["quote","ident_fragment","IdentFragment"],"kind":"trait"},"2:9088:4140":{"crate_id":2,"path":["core","panic","unwind_safe","AssertUnwindSafe"],"kind":"struct"},"16:2394:6570":{"crate_id":16,"path":["gimli","common","DebugAbbrevOffset"],"kind":"struct"},"17:15836:6451":{"crate_id":17,"path":["object","pe","ImageCor20Header"],"kind":"struct"},"2:21988:10999":{"crate_id":2,"path":["core","core_simd","simd","num","float","SimdFloat"],"kind":"trait"},"2:5930:3644":{"crate_id":2,"path":["core","iter","adapters","flatten","Flatten"],"kind":"struct"},"1:12281:856":{"crate_id":1,"path":["std","i128"],"kind":"primitive"},"6:6542:7737":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","rtentry"],"kind":"struct"},"21:2699:2194":{"crate_id":21,"path":["proc_macro","TokenTree"],"kind":"enum"},"2:41349:3554":{"crate_id":2,"path":["core","option","Iter"],"kind":"struct"},"24:3229:3810":{"crate_id":24,"path":["syn","token","Extern"],"kind":"struct"},"2:6628:3646":{"crate_id":2,"path":["core","iter","adapters","map_windows","MapWindows"],"kind":"struct"},"2:4194:16104":{"crate_id":2,"path":["core","async_iter","async_iter","IntoAsyncIterator"],"kind":"trait"},"24:95:10712":{"crate_id":24,"path":["syn","token","private","Sealed"],"kind":"trait"},"2:2497:202":{"crate_id":2,"path":["core","cmp","PartialOrd"],"kind":"trait"},"16:7144:23434":{"crate_id":16,"path":["gimli","read","op","DieReference"],"kind":"enum"},"5:7435:8929":{"crate_id":5,"path":["alloc","collections","btree","set_val","SetValZST"],"kind":"struct"},"6:5260:7456":{"crate_id":6,"path":["libc","unix","linux_like","linux","regmatch_t"],"kind":"struct"},"24:5764:2506":{"crate_id":24,"path":["syn","path","AssocType"],"kind":"struct"},"21:2265:2114":{"crate_id":21,"path":["proc_macro","bridge","Group"],"kind":"struct"},"24:4267:3838":{"crate_id":24,"path":["syn","token","Caret"],"kind":"struct"},"16:5385:5626":{"crate_id":16,"path":["gimli","endianity","LittleEndian"],"kind":"struct"},"24:3637:252":{"crate_id":24,"path":["syn","token","Trait"],"kind":"struct"},"17:14489:6043":{"crate_id":17,"path":["object","macho","EntryPointCommand"],"kind":"struct"},"15:0:3319":{"crate_id":15,"path":["addr2line"],"kind":"module"},"5:7036:263":{"crate_id":5,"path":["alloc","vec","Vec"],"kind":"struct"},"5:7536:4727":{"crate_id":5,"path":["alloc","ffi","c_str","CString"],"kind":"struct"},"2:5643:5277":{"crate_id":2,"path":["core","iter","adapters","filter","next_chunk","Guard"],"kind":"struct"},"16:7085:8873":{"crate_id":16,"path":["gimli","read","lookup","DebugLookup"],"kind":"struct"},"17:12328:8734":{"crate_id":17,"path":["object","read","pe","export","ExportTable"],"kind":"struct"},"20:845:2813":{"crate_id":20,"path":["proc_macro2","imp","Literal"],"kind":"enum"},"23:235:4421":{"crate_id":23,"path":["quote","__private","get_span","GetSpan"],"kind":"struct"},"16:5960:8782":{"crate_id":16,"path":["gimli","read","cfi","PartialFrameDescriptionEntry"],"kind":"struct"},"1:11545:9102":{"crate_id":1,"path":["std","sys_common","process","CommandEnv"],"kind":"struct"},"1:1826:10645":{"crate_id":1,"path":["std","env","VarsOs"],"kind":"struct"},"2:15:2955":{"crate_id":2,"path":["core","write"],"kind":"macro"},"11:123:5244":{"crate_id":11,"path":["hashbrown","raw","RawTable"],"kind":"struct"},"1:4845:10798":{"crate_id":1,"path":["std","os","fd","raw","AsRawFd"],"kind":"trait"},"16:6317:2156":{"crate_id":16,"path":["gimli","read","dwarf","Unit"],"kind":"struct"},"16:7648:23437":{"crate_id":16,"path":["gimli","read","rnglists","RawRngListIter"],"kind":"struct"},"24:3552:3824":{"crate_id":24,"path":["syn","token","SelfType"],"kind":"struct"},"2:43049:3640":{"crate_id":2,"path":["core","slice","iter","ArrayChunks"],"kind":"struct"},"2:4543:3722":{"crate_id":2,"path":["core","cell","RefMut"],"kind":"struct"},"5:5065:5277":{"crate_id":5,"path":["alloc","rc","from_iter_exact","Guard"],"kind":"struct"},"16:6412:23427":{"crate_id":16,"path":["gimli","read","abbrev","AbbreviationsCacheStrategy"],"kind":"enum"},"2:3143:141":{"crate_id":2,"path":["core","ops","function","Fn"],"kind":"trait"},"21:2714:2114":{"crate_id":21,"path":["proc_macro","Group"],"kind":"struct"},"2:40546:3630":{"crate_id":2,"path":["core","iter","sources","successors","Successors"],"kind":"struct"},"6:8288:8068":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_mutex_t"],"kind":"struct"},"2:4590:3724":{"crate_id":2,"path":["core","cell","SyncUnsafeCell"],"kind":"struct"},"21:2738:2520":{"crate_id":21,"path":["proc_macro","Punct"],"kind":"struct"},"9:424:22407":{"crate_id":9,"path":["miniz_oxide","MZStatus"],"kind":"enum"},"17:15197:6269":{"crate_id":17,"path":["object","pe","ImageRelocation"],"kind":"struct"},"5:7427:210":{"crate_id":5,"path":["alloc","collections","btree","set","Range"],"kind":"struct"},"2:41069:8322":{"crate_id":2,"path":["core","net","ip_addr","Ipv6Addr"],"kind":"struct"},"17:403:23497":{"crate_id":17,"path":["object","read","any","Segment"],"kind":"struct"},"17:12969:5748":{"crate_id":17,"path":["object","read","CodeView"],"kind":"struct"},"2:41837:91":{"crate_id":2,"path":["core","sync","atomic","AtomicIsize"],"kind":"struct"},"17:11812:23615":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCacheImage"],"kind":"struct"},"2:42317:3697":{"crate_id":2,"path":["core","fmt","Alignment"],"kind":"enum"},"6:8197:8058":{"crate_id":6,"path":["libc","unix","linux_like","linux","arch","generic","termios2"],"kind":"struct"},"2:23085:236":{"crate_id":2,"path":["core","num","saturating","Saturating"],"kind":"struct"},"2:45700:8427":{"crate_id":2,"path":["core","core_arch","simd","u32x8"],"kind":"struct"},"24:5584:3522":{"crate_id":24,"path":["syn","lit","LitInt"],"kind":"struct"},"17:14235:6001":{"crate_id":17,"path":["object","macho","DylibReference"],"kind":"struct"},"6:4971:7355":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_envelope"],"kind":"struct"},"24:4779:3873":{"crate_id":24,"path":["syn","token","ShrEq"],"kind":"struct"},"1:12277:881":{"crate_id":1,"path":["std","i8"],"kind":"primitive"},"17:11547:5498":{"crate_id":17,"path":["object","read","elf","note","Note"],"kind":"struct"},"17:14372:6020":{"crate_id":17,"path":["object","macho","VersionMinCommand"],"kind":"struct"},"5:3240:3554":{"crate_id":5,"path":["alloc","collections","btree","set","Iter"],"kind":"struct"},"17:11557:23608":{"crate_id":17,"path":["object","read","elf","note","GnuPropertyIterator"],"kind":"struct"},"2:2627:16125":{"crate_id":2,"path":["core","convert","num","FloatToInt"],"kind":"trait"},"2:45611:8408":{"crate_id":2,"path":["core","core_arch","simd","m64x2"],"kind":"struct"},"24:5501:2261":{"crate_id":24,"path":["syn","generics","WherePredicate"],"kind":"enum"},"2:4152:111":{"crate_id":2,"path":["core","asserting","Capture"],"kind":"struct"},"2:39905:10689":{"crate_id":2,"path":["core","ffi","VaList"],"kind":"struct"},"17:12824:23516":{"crate_id":17,"path":["object","read","SymbolSection"],"kind":"enum"},"23:344:1337":{"crate_id":23,"path":["quote","quote"],"kind":"macro"},"2:40155:3648":{"crate_id":2,"path":["core","iter","adapters","step_by","StepBy"],"kind":"struct"},"11:2231:8914":{"crate_id":11,"path":["hashbrown","table","HashTable"],"kind":"struct"},"14:202:2560":{"crate_id":14,"path":["rustc_demangle","v0","ParseError"],"kind":"enum"},"5:3663:3558":{"crate_id":5,"path":["alloc","collections","linked_list","IterMut"],"kind":"struct"},"2:22492:8962":{"crate_id":2,"path":["core","num","dec2flt","ParseFloatError"],"kind":"struct"},"2:2626:10712":{"crate_id":2,"path":["core","convert","num","private","Sealed"],"kind":"trait"},"5:1312:8880":{"crate_id":5,"path":["alloc","collections","btree","map","entry","Entry"],"kind":"enum"},"2:42552:8345":{"crate_id":2,"path":["core","hash","sip","State"],"kind":"struct"},"2:45948:8467":{"crate_id":2,"path":["core","core_arch","simd","u8x64"],"kind":"struct"},"11:844:10631":{"crate_id":11,"path":["hashbrown","map","RawEntryMut"],"kind":"enum"},"1:8144:140":{"crate_id":1,"path":["std","fs","FileType"],"kind":"struct"},"16:6398:6593":{"crate_id":16,"path":["gimli","read","abbrev","DebugAbbrev"],"kind":"struct"},"16:4940:6644":{"crate_id":16,"path":["gimli","constants","DwDefaulted"],"kind":"struct"},"2:43378:9032":{"crate_id":2,"path":["core","str","iter","Matches"],"kind":"struct"},"2:41197:33612":{"crate_id":2,"path":["core","net","parser","AddrKind"],"kind":"enum"},"7:0:1835":{"crate_id":7,"path":["unwind"],"kind":"module"},"5:297:2174":{"crate_id":5,"path":["alloc","boxed","Box"],"kind":"struct"},"2:46025:8468":{"crate_id":2,"path":["core","core_arch","simd","i16x32"],"kind":"struct"},"18:0:3322":{"crate_id":18,"path":["memchr"],"kind":"module"},"21:2763:2813":{"crate_id":21,"path":["proc_macro","Literal"],"kind":"struct"},"20:817:2193":{"crate_id":20,"path":["proc_macro2","imp","Span"],"kind":"enum"},"11:1917:8913":{"crate_id":11,"path":["hashbrown","set","SymmetricDifference"],"kind":"struct"},"2:29809:10767":{"crate_id":2,"path":["core","num","FpCategory"],"kind":"enum"},"24:4837:3877":{"crate_id":24,"path":["syn","token","StarEq"],"kind":"struct"},"2:39802:16120":{"crate_id":2,"path":["core","char","CaseMappingIter"],"kind":"enum"},"6:5382:7504":{"crate_id":6,"path":["libc","unix","linux_like","linux","file_clone_range"],"kind":"struct"},"16:2902:22560":{"crate_id":16,"path":["gimli","common","UnitSectionOffset"],"kind":"enum"},"2:40074:3659":{"crate_id":2,"path":["core","iter","adapters","map","Map"],"kind":"struct"},"6:6417:7674":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","aiocb"],"kind":"struct"},"2:40002:3653":{"crate_id":2,"path":["core","iter","adapters","enumerate","Enumerate"],"kind":"struct"},"2:2491:195":{"crate_id":2,"path":["core","cmp","Ord"],"kind":"trait"},"2:42020:3700":{"crate_id":2,"path":["core","fmt","num","Octal"],"kind":"struct"},"1:3938:10766":{"crate_id":1,"path":["std","net","udp","UdpSocket"],"kind":"struct"},"17:10317:5632":{"crate_id":17,"path":["object","endian","I32Bytes"],"kind":"struct"},"5:3794:3692":{"crate_id":5,"path":["alloc","collections","linked_list","Cursor"],"kind":"struct"},"2:10261:153":{"crate_id":2,"path":["core","hash","Hash"],"kind":"trait"},"6:5296:7475":{"crate_id":6,"path":["libc","unix","linux_like","linux","j1939_filter"],"kind":"struct"},"24:5290:3501":{"crate_id":24,"path":["syn","expr","ExprMatch"],"kind":"struct"},"5:1429:100":{"crate_id":5,"path":["alloc","collections","btree","map","BTreeMap"],"kind":"struct"},"24:2084:10556":{"crate_id":24,"path":["syn","print","TokensOrDefault"],"kind":"struct"},"24:1062:37302":{"crate_id":24,"path":["syn","generics","Lifetimes"],"kind":"struct"},"16:4830:6640":{"crate_id":16,"path":["gimli","constants","DwInl"],"kind":"struct"},"24:5215:3474":{"crate_id":24,"path":["syn","expr","ExprBinary"],"kind":"struct"},"17:10769:36899":{"crate_id":17,"path":["object","read","any","SymbolTableInternal"],"kind":"enum"},"1:2978:5332":{"crate_id":1,"path":["std","io","error","repr_bitpacked","Repr"],"kind":"struct"},"2:2945:4489":{"crate_id":2,"path":["core","marker","FnPtr"],"kind":"trait"},"6:6409:7672":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","statx_timestamp"],"kind":"struct"},"6:5320:7484":{"crate_id":6,"path":["libc","unix","linux_like","linux","seccomp_data"],"kind":"struct"},"1:8662:8569":{"crate_id":1,"path":["std","path","Prefix"],"kind":"enum"},"16:7168:8586":{"crate_id":16,"path":["gimli","read","op","Operation"],"kind":"enum"},"1:5756:9078":{"crate_id":1,"path":["std","sync","mpsc","SyncSender"],"kind":"struct"},"24:4284:3839":{"crate_id":24,"path":["syn","token","CaretEq"],"kind":"struct"},"1:9387:8590":{"crate_id":1,"path":["std","time","SystemTime"],"kind":"struct"},"1:2423:10695":{"crate_id":1,"path":["std","fs","symlink_metadata"],"kind":"function"},"16:4743:6637":{"crate_id":16,"path":["gimli","constants","DwAddr"],"kind":"struct"},"2:43781:9060":{"crate_id":2,"path":["core","str","lossy","Utf8Chunk"],"kind":"struct"},"1:1607:2163":{"crate_id":1,"path":["std","collections","hash","set","Union"],"kind":"struct"},"1:3491:5277":{"crate_id":1,"path":["std","io","Guard"],"kind":"struct"},"2:21281:34841":{"crate_id":2,"path":["core","core_simd","swizzle","resize","Resize"],"kind":"struct"},"2:10481:5315":{"crate_id":2,"path":["core","slice","sort","merge","MergeHole"],"kind":"struct"},"5:6754:5253":{"crate_id":5,"path":["alloc","vec","into_iter","drop","DropGuard"],"kind":"struct"},"2:39821:8316":{"crate_id":2,"path":["core","char","TryFromCharError"],"kind":"struct"},"17:15176:6264":{"crate_id":17,"path":["object","pe","ImageAuxSymbolSection"],"kind":"struct"},"18:643:5503":{"crate_id":18,"path":["memchr","memmem","x86","avx","nostd","Forward"],"kind":"struct"},"16:6634:6601":{"crate_id":16,"path":["gimli","read","line","DebugLine"],"kind":"struct"},"24:3603:2141":{"crate_id":24,"path":["syn","token","Struct"],"kind":"struct"},"2:22094:10712":{"crate_id":2,"path":["core","core_simd","simd","num","sealed","Sealed"],"kind":"trait"},"17:11647:8723":{"crate_id":17,"path":["object","read","elf","version","VerdauxIterator"],"kind":"struct"},"24:5887:3534":{"crate_id":24,"path":["syn","ty","TypeBareFn"],"kind":"struct"},"1:4487:10808":{"crate_id":1,"path":["std","os","unix","net","stream","UnixStream"],"kind":"struct"},"1:12265:458":{"crate_id":1,"path":["std","char"],"kind":"primitive"},"1:10843:9095":{"crate_id":1,"path":["std","sys","pal","unix","fs","StatxExtraFields"],"kind":"struct"},"21:183:4581":{"crate_id":21,"path":["proc_macro","bridge","closure","Closure"],"kind":"struct"},"16:7695:6765":{"crate_id":16,"path":["gimli","read","rnglists","RawRange"],"kind":"struct"},"1:6821:233":{"crate_id":1,"path":["std","sync","rwlock","RwLock"],"kind":"struct"},"2:42974:8950":{"crate_id":2,"path":["core","slice","iter","Windows"],"kind":"struct"},"2:21750:10712":{"crate_id":2,"path":["core","core_simd","to_bytes","sealed","Sealed"],"kind":"trait"},"1:12278:863":{"crate_id":1,"path":["std","i16"],"kind":"primitive"},"1:4742:7945":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt","st_mtime"],"kind":"function"},"2:43491:8979":{"crate_id":2,"path":["core","str","iter","EscapeUnicode"],"kind":"struct"},"6:5236:7444":{"crate_id":6,"path":["libc","unix","linux_like","linux","inotify_event"],"kind":"struct"},"1:11033:5364":{"crate_id":1,"path":["std","sys","pal","unix","process","process_inner","posix_spawn","PosixSpawnattr"],"kind":"struct"},"17:15569:6378":{"crate_id":17,"path":["object","pe","ImageHotPatchInfo"],"kind":"struct"},"20:708:251":{"crate_id":20,"path":["proc_macro2","fallback","TokenStream"],"kind":"struct"},"1:3328:10750":{"crate_id":1,"path":["std","io","stdio","StdoutLock"],"kind":"struct"},"5:3874:4938":{"crate_id":5,"path":["alloc","collections","linked_list","ExtractIf"],"kind":"struct"},"11:2569:3610":{"crate_id":11,"path":["hashbrown","TryReserveError"],"kind":"enum"},"1:12268:1256":{"crate_id":1,"path":["std","pointer"],"kind":"primitive"},"2:43922:8356":{"crate_id":2,"path":["core","time","Nanoseconds"],"kind":"struct"},"1:11828:8604":{"crate_id":1,"path":["std","alloc","System"],"kind":"struct"},"20:906:2114":{"crate_id":20,"path":["proc_macro2","Group"],"kind":"struct"},"11:2548:6945":{"crate_id":11,"path":["hashbrown","raw","bitmask","BitMaskIter"],"kind":"struct"},"2:46223:8474":{"crate_id":2,"path":["core","core_arch","simd","u64x8"],"kind":"struct"},"17:14325:6013":{"crate_id":17,"path":["object","macho","FilesetEntryCommand"],"kind":"struct"},"1:4903:5333":{"crate_id":1,"path":["std","os","fd","owned","OwnedFd"],"kind":"struct"},"1:4097:10787":{"crate_id":1,"path":["std","os","unix","fs","MetadataExt"],"kind":"trait"},"17:12711:138":{"crate_id":17,"path":["object","read","Error"],"kind":"struct"},"16:7132:8879":{"crate_id":16,"path":["gimli","read","lookup","PubStuffParser"],"kind":"struct"},"17:10997:5643":{"crate_id":17,"path":["object","read","archive","ArchiveFile"],"kind":"struct"},"2:39719:8315":{"crate_id":2,"path":["core","char","convert","CharTryFromError"],"kind":"struct"},"24:96:4563":{"crate_id":24,"path":["syn","token","private","WithSpan"],"kind":"struct"},"7:31:22391":{"crate_id":7,"path":["unwind","libunwind","_Unwind_Reason_Code"],"kind":"enum"},"17:10350:5633":{"crate_id":17,"path":["object","endian","I64Bytes"],"kind":"struct"},"24:4400:135":{"crate_id":24,"path":["syn","token","Eq"],"kind":"struct"},"1:8475:8946":{"crate_id":1,"path":["std","io","Split"],"kind":"struct"},"1:12287:937":{"crate_id":1,"path":["std","isize"],"kind":"primitive"},"16:6466:6669":{"crate_id":16,"path":["gimli","read","abbrev","AttributeSpecification"],"kind":"struct"},"17:15410:6324":{"crate_id":17,"path":["object","pe","ImageDynamicRelocationTable"],"kind":"struct"},"1:3597:10710":{"crate_id":1,"path":["std","io","Seek"],"kind":"trait"},"6:1503:7111":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreq_source"],"kind":"struct"},"2:43150:9018":{"crate_id":2,"path":["core","str","iter","CharIndices"],"kind":"struct"},"11:1007:8880":{"crate_id":11,"path":["hashbrown","map","Entry"],"kind":"enum"},"1:10910:27824":{"crate_id":1,"path":["std","sys","pal","unix","kernel_copy","FdHandle"],"kind":"enum"},"22:0:3443":{"crate_id":22,"path":["unicode_ident"],"kind":"module"},"2:45850:8433":{"crate_id":2,"path":["core","core_arch","simd","f32x8"],"kind":"struct"},"24:3093:2508":{"crate_id":24,"path":["syn","token","Const"],"kind":"struct"},"6:8265:8062":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_barrierattr_t"],"kind":"struct"},"2:38941:210":{"crate_id":2,"path":["core","ops","range","Range"],"kind":"struct"},"6:6706:7819":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_mmap_offsets"],"kind":"struct"},"16:6385:6665":{"crate_id":16,"path":["gimli","read","reader","ReaderOffsetId"],"kind":"struct"},"1:4232:32587":{"crate_id":1,"path":["std","os","unix","net","ancillary","AncillaryDataIter"],"kind":"struct"},"2:45168:8372":{"crate_id":2,"path":["core","core_arch","simd","u8x8"],"kind":"struct"},"1:9054:199":{"crate_id":1,"path":["std","process","Output"],"kind":"struct"},"6:6629:7788":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","Elf32_Chdr"],"kind":"struct"},"6:5052:7395":{"crate_id":6,"path":["libc","unix","linux_like","linux","dl_phdr_info"],"kind":"struct"},"11:2562:6948":{"crate_id":11,"path":["hashbrown","raw","TableLayout"],"kind":"struct"},"2:7911:3638":{"crate_id":2,"path":["core","iter","traits","accum","Product"],"kind":"trait"},"2:40021:3655":{"crate_id":2,"path":["core","iter","adapters","filter_map","FilterMap"],"kind":"struct"},"11:2140:10635":{"crate_id":11,"path":["hashbrown","set","OccupiedEntry"],"kind":"struct"},"2:31746:2282":{"crate_id":2,"path":["core","error","private","Internal"],"kind":"struct"},"2:45206:8378":{"crate_id":2,"path":["core","core_arch","simd","u32x2"],"kind":"struct"},"2:41417:4862":{"crate_id":2,"path":["core","panicking","AssertKind"],"kind":"enum"},"16:4641:6635":{"crate_id":16,"path":["gimli","constants","DwVirtuality"],"kind":"struct"},"1:2033:197":{"crate_id":1,"path":["std","ffi","os_str","OsStr"],"kind":"struct"},"17:16235:6552":{"crate_id":17,"path":["object","xcoff","DwarfAux32"],"kind":"struct"},"2:44100:227":{"crate_id":2,"path":["core","future","ResumeTy"],"kind":"struct"},"1:5076:4129":{"crate_id":1,"path":["std","panic","always_abort"],"kind":"function"},"6:4992:7366":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_condition_effect"],"kind":"struct"},"6:0:968":{"crate_id":6,"path":["libc"],"kind":"module"},"24:1363:8655":{"crate_id":24,"path":["syn","lit","LitRepr"],"kind":"struct"},"16:4587:6633":{"crate_id":16,"path":["gimli","constants","DwAccess"],"kind":"struct"},"6:1686:7229":{"crate_id":6,"path":["libc","unix","linux_like","epoll_event"],"kind":"struct"},"2:45256:8381":{"crate_id":2,"path":["core","core_arch","simd","i16x4"],"kind":"struct"},"2:33099:5480":{"crate_id":2,"path":["core","ops","arith","RemAssign"],"kind":"trait"},"11:811:4938":{"crate_id":11,"path":["hashbrown","map","ExtractIf"],"kind":"struct"},"24:5220:3490":{"crate_id":24,"path":["syn","expr","ExprBlock"],"kind":"struct"},"6:5314:7483":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_fprog"],"kind":"struct"},"2:42334:138":{"crate_id":2,"path":["core","fmt","Error"],"kind":"struct"},"21:932:4980":{"crate_id":21,"path":["proc_macro","bridge","client","FreeFunctions"],"kind":"struct"},"17:11877:5664":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandIterator"],"kind":"struct"},"2:7944:146":{"crate_id":2,"path":["core","iter","traits","collect","FromIterator"],"kind":"trait"},"24:3654:253":{"crate_id":24,"path":["syn","token","Try"],"kind":"struct"},"1:4069:10784":{"crate_id":1,"path":["std","os","unix","fs","FileExt"],"kind":"trait"},"5:6672:3553":{"crate_id":5,"path":["alloc","vec","into_iter","IntoIter"],"kind":"struct"},"6:6670:7805":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_seccomp"],"kind":"struct"},"2:22120:34193":{"crate_id":2,"path":["core","core_simd","simd","ptr","const_ptr","SimdConstPtr","with_addr"],"kind":"function"},"17:14177:5989":{"crate_id":17,"path":["object","macho","DylibTableOfContents"],"kind":"struct"},"2:45812:8431":{"crate_id":2,"path":["core","core_arch","simd","i32x8"],"kind":"struct"},"24:5731:2489":{"crate_id":24,"path":["syn","path","PathArguments"],"kind":"enum"},"16:2636:6581":{"crate_id":16,"path":["gimli","common","DebugMacroOffset"],"kind":"struct"},"16:6335:10209":{"crate_id":16,"path":["gimli","read","dwarf","RangeIter"],"kind":"struct"},"2:1675:5277":{"crate_id":2,"path":["core","mem","maybe_uninit","Guard"],"kind":"struct"},"17:9807:23487":{"crate_id":17,"path":["object","common","SectionKind"],"kind":"enum"},"1:6311:10259":{"crate_id":1,"path":["std","sync","mpmc","zero","ZeroToken"],"kind":"struct"},"17:14079:5960":{"crate_id":17,"path":["object","macho","ThreadCommand"],"kind":"struct"},"16:2998:6615":{"crate_id":16,"path":["gimli","common","DwoId"],"kind":"struct"},"1:2669:5316":{"crate_id":1,"path":["std","io","buffered","bufwriter","flush_buf","BufGuard"],"kind":"struct"},"2:726:10768":{"crate_id":2,"path":["core","num","nonzero","ZeroablePrimitive"],"kind":"trait"},"2:12425:8948":{"crate_id":2,"path":["core","str","iter","SplitInclusive"],"kind":"struct"},"17:10170:5627":{"crate_id":17,"path":["object","endian","BigEndian"],"kind":"struct"},"16:7379:36896":{"crate_id":16,"path":["gimli","read","op","EvaluationState"],"kind":"enum"},"24:3705:2163":{"crate_id":24,"path":["syn","token","Union"],"kind":"struct"},"21:2758:2126":{"crate_id":21,"path":["proc_macro","Ident"],"kind":"struct"},"20:716:3739":{"crate_id":20,"path":["proc_macro2","fallback","SourceFile"],"kind":"struct"},"16:7656:23438":{"crate_id":16,"path":["gimli","read","rnglists","RawRngListEntry"],"kind":"enum"},"1:2495:3327":{"crate_id":1,"path":["std","io"],"kind":"module"},"24:4992:2343":{"crate_id":24,"path":["syn","derive","DataStruct"],"kind":"struct"},"24:4866:2806":{"crate_id":24,"path":["syn","token","Brace"],"kind":"struct"},"16:6120:23425":{"crate_id":16,"path":["gimli","read","cfi","RegisterRule"],"kind":"enum"},"14:0:3318":{"crate_id":14,"path":["rustc_demangle"],"kind":"module"},"1:8000:10625":{"crate_id":1,"path":["std","backtrace","RawFrame"],"kind":"enum"},"17:12659:23692":{"crate_id":17,"path":["object","read","xcoff","comdat","XcoffComdat"],"kind":"struct"},"2:45527:8404":{"crate_id":2,"path":["core","core_arch","simd","f64x4"],"kind":"struct"},"17:13538:5852":{"crate_id":17,"path":["object","elf","Verneed"],"kind":"struct"},"24:646:8654":{"crate_id":24,"path":["syn","error","ErrorMessage"],"kind":"struct"},"18:706:8707":{"crate_id":18,"path":["memchr","memmem","Searcher"],"kind":"struct"},"2:43902:9068":{"crate_id":2,"path":["core","str","IsWhitespace"],"kind":"struct"},"17:15333:6302":{"crate_id":17,"path":["object","pe","ImageBoundForwarderRef"],"kind":"struct"},"17:15678:6418":{"crate_id":17,"path":["object","pe","ImageEnclaveConfig64"],"kind":"struct"},"17:16138:6527":{"crate_id":17,"path":["object","xcoff","CsectAux32"],"kind":"struct"},"2:5816:3656":{"crate_id":2,"path":["core","iter","adapters","flatten","FlatMap"],"kind":"struct"},"24:2311:3556":{"crate_id":24,"path":["syn","punctuated","PrivateIter"],"kind":"struct"},"24:4948:2185":{"crate_id":24,"path":["syn","data","Fields"],"kind":"enum"},"2:21479:8093":{"crate_id":2,"path":["core","core_simd","masks","Mask"],"kind":"struct"},"14:31:10134":{"crate_id":14,"path":["rustc_demangle","v0","Demangle"],"kind":"struct"},"1:8122:8514":{"crate_id":1,"path":["std","fs","FileTimes"],"kind":"struct"},"1:6623:5348":{"crate_id":1,"path":["std","sync","once_lock","OnceLock"],"kind":"struct"},"11:742:10251":{"crate_id":11,"path":["hashbrown","map","IntoValues"],"kind":"struct"},"2:10062:3706":{"crate_id":2,"path":["core","fmt","LowerExp"],"kind":"trait"},"2:7907:3639":{"crate_id":2,"path":["core","iter","traits","accum","Sum"],"kind":"trait"},"24:4767:3872":{"crate_id":24,"path":["syn","token","Shr"],"kind":"struct"},"2:21901:10712":{"crate_id":2,"path":["core","core_simd","vector","sealed","Sealed"],"kind":"trait"},"17:13832:5923":{"crate_id":17,"path":["object","macho","LoadCommand"],"kind":"struct"},"1:8264:32876":{"crate_id":1,"path":["std","io","error","SimpleMessage"],"kind":"struct"},"2:39704:33618":{"crate_id":2,"path":["core","char","convert","CharErrorKind"],"kind":"enum"},"2:43975:16253":{"crate_id":2,"path":["core","time","TryFromFloatSecsErrorKind"],"kind":"enum"},"2:7957:3637":{"crate_id":2,"path":["core","iter","traits","collect","Extend"],"kind":"trait"},"16:5781:6598":{"crate_id":16,"path":["gimli","read","cfi","EhFrame"],"kind":"struct"},"6:5536:7578":{"crate_id":6,"path":["libc","unix","linux_like","linux","dirent"],"kind":"struct"},"2:3514:71":{"crate_id":2,"path":["core","any","Any"],"kind":"trait"},"24:5335:3505":{"crate_id":24,"path":["syn","expr","ExprTry"],"kind":"struct"},"17:16093:6518":{"crate_id":17,"path":["object","xcoff","Symbol64"],"kind":"struct"},"1:10901:8555":{"crate_id":1,"path":["std","sys","pal","unix","io","IoSlice"],"kind":"struct"},"2:39865:8987":{"crate_id":2,"path":["core","ffi","c_str","FromBytesUntilNulError"],"kind":"struct"},"2:39932:3640":{"crate_id":2,"path":["core","iter","adapters","array_chunks","ArrayChunks"],"kind":"struct"},"2:43604:9047":{"crate_id":2,"path":["core","str","pattern","CharArraySearcher"],"kind":"struct"},"5:7395:8928":{"crate_id":5,"path":["alloc","collections","btree","map","UnorderedKeyError"],"kind":"struct"},"2:13245:34891":{"crate_id":2,"path":["core","future","join","MaybeDone"],"kind":"enum"},"2:6439:3669":{"crate_id":2,"path":["core","iter","adapters","intersperse","IntersperseWith"],"kind":"struct"},"1:11442:7008":{"crate_id":1,"path":["std","sys","os_str","bytes","Buf"],"kind":"struct"},"1:2587:10741":{"crate_id":1,"path":["std","io","buffered","bufreader","BufReader"],"kind":"struct"},"17:10828:36919":{"crate_id":17,"path":["object","read","any","SymbolIteratorInternal"],"kind":"enum"},"17:15799:6444":{"crate_id":17,"path":["object","pe","NonPagedDebugInfo"],"kind":"struct"},"1:8798:3554":{"crate_id":1,"path":["std","path","Iter"],"kind":"struct"},"1:9225:4717":{"crate_id":1,"path":["std","sync","mpmc","context","Inner"],"kind":"struct"},"17:9671:23482":{"crate_id":17,"path":["object","common","Architecture"],"kind":"enum"},"1:939:10632":{"crate_id":1,"path":["std","collections","hash","map","RawOccupiedEntryMut"],"kind":"struct"},"9:357:22420":{"crate_id":9,"path":["miniz_oxide","inflate","TINFLStatus"],"kind":"enum"},"1:5544:10859":{"crate_id":1,"path":["std","process","ChildStderr"],"kind":"struct"},"17:16079:6514":{"crate_id":17,"path":["object","xcoff","Symbol32"],"kind":"struct"},"24:5314:3482":{"crate_id":24,"path":["syn","expr","ExprReference"],"kind":"struct"},"2:22503:33593":{"crate_id":2,"path":["core","num","dec2flt","FloatErrorKind"],"kind":"enum"},"20:116:36965":{"crate_id":20,"path":["proc_macro2","rcvec","RcVecBuilder"],"kind":"struct"},"5:2208:8916":{"crate_id":5,"path":["alloc","collections","btree","merge_iter","MergeIterInner"],"kind":"struct"},"17:14986:6221":{"crate_id":17,"path":["object","pe","ImageRomHeaders"],"kind":"struct"},"24:4714:3868":{"crate_id":24,"path":["syn","token","RArrow"],"kind":"struct"},"17:12464:23688":{"crate_id":17,"path":["object","read","pe","resource","ResourceDirectoryEntryData"],"kind":"enum"},"24:5927:3544":{"crate_id":24,"path":["syn","ty","TypeTraitObject"],"kind":"struct"},"1:8482:9034":{"crate_id":1,"path":["std","io","Lines"],"kind":"struct"},"24:5924:3543":{"crate_id":24,"path":["syn","ty","TypeSlice"],"kind":"struct"},"2:40304:3667":{"crate_id":2,"path":["core","iter","adapters","zip","Zip"],"kind":"struct"},"2:725:10712":{"crate_id":2,"path":["core","num","nonzero","private","Sealed"],"kind":"trait"},"11:2423:3553":{"crate_id":11,"path":["hashbrown","table","IntoIter"],"kind":"struct"},"16:8202:6614":{"crate_id":16,"path":["gimli","read","unit","DebugTypes"],"kind":"struct"},"2:46173:8472":{"crate_id":2,"path":["core","core_arch","simd","f32x16"],"kind":"struct"},"17:11063:23540":{"crate_id":17,"path":["object","read","coff","file","CoffFile"],"kind":"struct"},"24:5798:3529":{"crate_id":24,"path":["syn","restriction","VisRestricted"],"kind":"struct"},"6:5064:7404":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Ehdr"],"kind":"struct"},"24:4347:3843":{"crate_id":24,"path":["syn","token","Dot"],"kind":"struct"},"1:8408:8554":{"crate_id":1,"path":["std","io","util","Sink"],"kind":"struct"},"24:5414:2134":{"crate_id":24,"path":["syn","generics","Generics"],"kind":"struct"},"2:33582:5462":{"crate_id":2,"path":["core","ops","bit","BitXor"],"kind":"trait"},"2:22161:11003":{"crate_id":2,"path":["core","core_simd","simd","ptr","mut_ptr","SimdMutPtr"],"kind":"trait"},"2:37617:5481":{"crate_id":2,"path":["core","ops","bit","BitXorAssign"],"kind":"trait"},"17:11773:5728":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCache"],"kind":"struct"},"16:6504:8830":{"crate_id":16,"path":["gimli","read","aranges","ArangeHeader"],"kind":"struct"},"2:32629:5476":{"crate_id":2,"path":["core","ops","arith","Rem"],"kind":"trait"},"24:4569:3858":{"crate_id":24,"path":["syn","token","Or"],"kind":"struct"},"6:532:7071":{"crate_id":6,"path":["libc","unix","iovec"],"kind":"struct"},"2:45381:8396":{"crate_id":2,"path":["core","core_arch","simd","u32x4"],"kind":"struct"},"18:491:8697":{"crate_id":18,"path":["memchr","cow","Imp"],"kind":"struct"},"17:11595:5661":{"crate_id":17,"path":["object","read","elf","version","VersionIndex"],"kind":"struct"},"1:5749:5341":{"crate_id":1,"path":["std","sync","mpsc","Sender"],"kind":"struct"},"5:1357:10140":{"crate_id":5,"path":["alloc","collections","btree","map","entry","OccupiedError"],"kind":"struct"},"24:3195:3809":{"crate_id":24,"path":["syn","token","Else"],"kind":"struct"},"1:1581:4940":{"crate_id":1,"path":["std","collections","hash","set","Drain"],"kind":"struct"},"21:949:251":{"crate_id":21,"path":["proc_macro","bridge","client","TokenStream"],"kind":"struct"},"2:3334:16164":{"crate_id":2,"path":["core","ops","range","OneSidedRange"],"kind":"trait"},"24:5442:2752":{"crate_id":24,"path":["syn","generics","TypeParam"],"kind":"struct"},"2:5028:943":{"crate_id":2,"path":["core","iter"],"kind":"module"},"6:5370:7500":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlmsgerr"],"kind":"struct"},"1:8274:10743":{"crate_id":1,"path":["std","io","error","ErrorKind"],"kind":"enum"},"2:1577:2679":{"crate_id":2,"path":["core","mem"],"kind":"module"},"2:9703:35082":{"crate_id":2,"path":["core","fmt","builders","PadAdapter"],"kind":"struct"},"2:30620:196":{"crate_id":2,"path":["core","cmp","Ordering"],"kind":"enum"},"2:46380:8491":{"crate_id":2,"path":["core","core_arch","x86","__m128bh"],"kind":"struct"},"24:5207:3488":{"crate_id":24,"path":["syn","expr","ExprAsync"],"kind":"struct"},"24:3756:3830":{"crate_id":24,"path":["syn","token","Use"],"kind":"struct"},"24:3416:3818":{"crate_id":24,"path":["syn","token","Mod"],"kind":"struct"},"2:21779:8094":{"crate_id":2,"path":["core","core_simd","vector","Simd"],"kind":"struct"},"6:6746:7829":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_statistics"],"kind":"struct"},"5:2290:36667":{"crate_id":5,"path":["alloc","collections","btree","navigate","LazyLeafHandle"],"kind":"enum"},"11:1887:3553":{"crate_id":11,"path":["hashbrown","set","IntoIter"],"kind":"struct"},"16:3196:6560":{"crate_id":16,"path":["gimli","arch","AArch64"],"kind":"struct"},"2:43747:16090":{"crate_id":2,"path":["core","str","pattern","StrSearcherImpl"],"kind":"enum"},"6:4870:7309":{"crate_id":6,"path":["libc","unix","linux_like","linux","fsid_t"],"kind":"struct"},"24:4966:3472":{"crate_id":24,"path":["syn","data","FieldsUnnamed"],"kind":"struct"},"20:929:2520":{"crate_id":20,"path":["proc_macro2","Punct"],"kind":"struct"},"2:43758:9052":{"crate_id":2,"path":["core","str","pattern","EmptyNeedle"],"kind":"struct"},"2:40145:3664":{"crate_id":2,"path":["core","iter","adapters","skip_while","SkipWhile"],"kind":"struct"},"1:8553:10807":{"crate_id":1,"path":["std","os","unix","net","ancillary","SocketAncillary"],"kind":"struct"},"16:5817:8765":{"crate_id":16,"path":["gimli","read","cfi","BaseAddresses"],"kind":"struct"},"2:4175:4839":{"crate_id":2,"path":["core","async_iter","async_iter","AsyncIterator"],"kind":"trait"},"1:6263:5325":{"crate_id":1,"path":["std","sync","mpmc","waker","Waker"],"kind":"struct"},"2:2896:3726":{"crate_id":2,"path":["core","marker","Unsize"],"kind":"trait"},"2:43120:8352":{"crate_id":2,"path":["core","str","error","Utf8Error"],"kind":"struct"},"1:4617:10818":{"crate_id":1,"path":["std","os","unix","process","ExitStatusExt"],"kind":"trait"},"17:11313:8718":{"crate_id":17,"path":["object","read","coff","import","ImportObjectData"],"kind":"struct"},"2:45189:8377":{"crate_id":2,"path":["core","core_arch","simd","u16x4"],"kind":"struct"},"17:14529:6048":{"crate_id":17,"path":["object","macho","NoteCommand"],"kind":"struct"},"1:4033:10783":{"crate_id":1,"path":["std","os","unix","ffi","os_str","OsStringExt"],"kind":"trait"},"2:40044:3657":{"crate_id":2,"path":["core","iter","adapters","fuse","Fuse"],"kind":"struct"},"15:327:10226":{"crate_id":15,"path":["addr2line","RangeAttributes"],"kind":"struct"},"20:725:2193":{"crate_id":20,"path":["proc_macro2","fallback","Span"],"kind":"struct"},"1:5494:10856":{"crate_id":1,"path":["std","process","Child"],"kind":"struct"},"17:13024:23518":{"crate_id":17,"path":["object","read","CompressionFormat"],"kind":"enum"},"2:39682:8975":{"crate_id":2,"path":["core","async_iter","from_iter","FromIter"],"kind":"struct"},"2:41374:4138":{"crate_id":2,"path":["core","panic","location","Location"],"kind":"struct"},"16:6066:8793":{"crate_id":16,"path":["gimli","read","cfi","RegisterRuleIter"],"kind":"struct"},"2:39732:8977":{"crate_id":2,"path":["core","char","decode","DecodeUtf16"],"kind":"struct"},"21:2324:2126":{"crate_id":21,"path":["proc_macro","bridge","Ident"],"kind":"struct"},"6:6597:7775":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ntptimeval"],"kind":"struct"},"2:7271:2940":{"crate_id":2,"path":["core","iter","adapters","zip","zip"],"kind":"function"},"17:9737:23481":{"crate_id":17,"path":["object","common","SubArchitecture"],"kind":"enum"},"17:11674:8725":{"crate_id":17,"path":["object","read","elf","version","VernauxIterator"],"kind":"struct"},"17:12225:23662":{"crate_id":17,"path":["object","read","pe","section","PeSegmentIterator"],"kind":"struct"},"5:7355:3553":{"crate_id":5,"path":["alloc","collections","binary_heap","IntoIter"],"kind":"struct"},"16:5400:5627":{"crate_id":16,"path":["gimli","endianity","BigEndian"],"kind":"struct"},"24:5618:3523":{"crate_id":24,"path":["syn","mac","MacroDelimiter"],"kind":"enum"},"6:4959:7350":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_replay"],"kind":"struct"},"16:4882:6642":{"crate_id":16,"path":["gimli","constants","DwDsc"],"kind":"struct"},"1:10321:10864":{"crate_id":1,"path":["std","sys","pal","unix","pipe","AnonPipe"],"kind":"struct"},"1:4334:10814":{"crate_id":1,"path":["std","os","unix","net","datagram","UnixDatagram"],"kind":"struct"},"17:12150:5703":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbol"],"kind":"struct"},"2:3757:3553":{"crate_id":2,"path":["core","array","iter","IntoIter"],"kind":"struct"},"2:10304:10716":{"crate_id":2,"path":["core","hash","BuildHasher"],"kind":"trait"},"24:5471:2683":{"crate_id":24,"path":["syn","generics","TypeParamBound"],"kind":"enum"},"17:10661:23509":{"crate_id":17,"path":["object","read","any","ComdatIterator"],"kind":"struct"},"24:5255:3495":{"crate_id":24,"path":["syn","expr","ExprForLoop"],"kind":"struct"},"17:12362:8743":{"crate_id":17,"path":["object","read","pe","import","ImportThunkList"],"kind":"struct"},"16:6246:206":{"crate_id":16,"path":["gimli","read","cfi","Pointer"],"kind":"enum"},"5:1831:4938":{"crate_id":5,"path":["alloc","collections","btree","map","ExtractIf"],"kind":"struct"},"6:1547:7136":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_ll"],"kind":"struct"},"17:11256:8715":{"crate_id":17,"path":["object","read","coff","import","ImportFile"],"kind":"struct"},"1:533:4718":{"crate_id":1,"path":["std","thread","Packet"],"kind":"struct"},"1:9121:8581":{"crate_id":1,"path":["std","sync","mpsc","SendError"],"kind":"struct"},"2:45221:8379":{"crate_id":2,"path":["core","core_arch","simd","u64x1"],"kind":"struct"},"6:5423:7526":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_sndrcvinfo"],"kind":"struct"},"16:2508:6575":{"crate_id":16,"path":["gimli","common","DebugLineOffset"],"kind":"struct"},"16:6574:6613":{"crate_id":16,"path":["gimli","read","index","DebugTuIndex"],"kind":"struct"},"24:2588:5469":{"crate_id":24,"path":["syn","thread","ThreadBound"],"kind":"struct"},"1:4145:10790":{"crate_id":1,"path":["std","os","unix","fs","DirEntryExt2"],"kind":"trait"},"24:0:1970":{"crate_id":24,"path":["syn"],"kind":"module"},"17:12707:23514":{"crate_id":17,"path":["object","read","traits","NoDynamicRelocationIterator"],"kind":"struct"},"2:3097:4843":{"crate_id":2,"path":["core","ops","coroutine","Coroutine"],"kind":"trait"},"2:43918:9072":{"crate_id":2,"path":["core","str","UnsafeBytesToStr"],"kind":"struct"},"16:5722:6599":{"crate_id":16,"path":["gimli","read","cfi","EhFrameHdr"],"kind":"struct"},"5:5453:16054":{"crate_id":5,"path":["alloc","slice","Join"],"kind":"trait"},"24:4976:1973":{"crate_id":24,"path":["syn","derive","DeriveInput"],"kind":"struct"},"17:13922:5939":{"crate_id":17,"path":["object","macho","Section64"],"kind":"struct"},"24:5466:3511":{"crate_id":24,"path":["syn","generics","BoundLifetimes"],"kind":"struct"},"17:11865:23653":{"crate_id":17,"path":["object","read","macho","file","MachOComdatSectionIterator"],"kind":"struct"},"17:12671:23726":{"crate_id":17,"path":["object","read","xcoff","comdat","XcoffComdatSectionIterator"],"kind":"struct"},"1:645:10621":{"crate_id":1,"path":["std","backtrace","BytesOrWide"],"kind":"enum"},"6:465:2115":{"crate_id":6,"path":["libc","unix","group"],"kind":"struct"},"21:2523:4963":{"crate_id":21,"path":["proc_macro","bridge","ExpnGlobals"],"kind":"struct"},"2:45783:8430":{"crate_id":2,"path":["core","core_arch","simd","i16x16"],"kind":"struct"},"2:11169:16069":{"crate_id":2,"path":["core","slice","iter","RSplitNMut"],"kind":"struct"},"2:41415:4142":{"crate_id":2,"path":["core","panic","unwind_safe","UnwindSafe"],"kind":"trait"},"2:2903:246":{"crate_id":2,"path":["core","marker","Sync"],"kind":"trait"},"6:6657:7801":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_entry"],"kind":"struct"},"1:723:154":{"crate_id":1,"path":["std","collections","hash","map","HashMap"],"kind":"struct"},"2:2651:77":{"crate_id":2,"path":["core","convert","AsMut"],"kind":"trait"},"17:11189:5649":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbol"],"kind":"struct"},"21:2629:3738":{"crate_id":21,"path":["proc_macro","ExpandError"],"kind":"struct"},"6:6811:7852":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_data"],"kind":"union"},"17:15138:6250":{"crate_id":17,"path":["object","pe","ImageAuxSymbolFunction"],"kind":"struct"},"1:880:8910":{"crate_id":1,"path":["std","collections","hash","map","Values"],"kind":"struct"},"16:4062:6626":{"crate_id":16,"path":["gimli","constants","DwTag"],"kind":"struct"},"1:11158:8356":{"crate_id":1,"path":["std","sys","pal","unix","time","Nanoseconds"],"kind":"struct"},"17:13774:5914":{"crate_id":17,"path":["object","macho","FatArch32"],"kind":"struct"},"1:588:10616":{"crate_id":1,"path":["std","ascii","AsciiExt"],"kind":"trait"},"11:2536:2114":{"crate_id":11,"path":["hashbrown","raw","sse2","Group"],"kind":"struct"},"24:3773:3831":{"crate_id":24,"path":["syn","token","Virtual"],"kind":"struct"},"17:12572:5653":{"crate_id":17,"path":["object","read","xcoff","symbol","SymbolTable"],"kind":"struct"},"2:3146:142":{"crate_id":2,"path":["core","ops","function","FnMut"],"kind":"trait"},"17:15582:6384":{"crate_id":17,"path":["object","pe","ImageHotPatchBase"],"kind":"struct"},"1:10253:30476":{"crate_id":1,"path":["std","sys","pal","unix","os","Env"],"kind":"struct"},"17:11621:8720":{"crate_id":17,"path":["object","read","elf","version","VersionTable"],"kind":"struct"},"16:4913:6643":{"crate_id":16,"path":["gimli","constants","DwIdx"],"kind":"struct"},"2:39795:8982":{"crate_id":2,"path":["core","char","ToUppercase"],"kind":"struct"},"2:31757:33801":{"crate_id":2,"path":["core","error","tags","MaybeSizedValue"],"kind":"struct"},"16:7727:6611":{"crate_id":16,"path":["gimli","read","str","DebugStr"],"kind":"struct"},"2:45544:8405":{"crate_id":2,"path":["core","core_arch","simd","m8x16"],"kind":"struct"},"1:6695:10156":{"crate_id":1,"path":["std","sync","poison","PoisonError"],"kind":"struct"},"6:5014:7379":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_rumble_effect"],"kind":"struct"},"16:6849:8862":{"crate_id":16,"path":["gimli","read","line","IncompleteLineProgram"],"kind":"struct"},"21:2625:3573":{"crate_id":21,"path":["proc_macro","LexError"],"kind":"struct"},"17:12107:5653":{"crate_id":17,"path":["object","read","macho","symbol","SymbolTable"],"kind":"struct"},"17:11524:23607":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdatSectionIterator"],"kind":"struct"},"9:238:8345":{"crate_id":9,"path":["miniz_oxide","inflate","core","State"],"kind":"enum"},"24:3059:2174":{"crate_id":24,"path":["syn","token","Box"],"kind":"struct"},"2:44108:207":{"crate_id":2,"path":["core","task","poll","Poll"],"kind":"enum"},"17:15102:6245":{"crate_id":17,"path":["object","pe","ImageSymbolEx"],"kind":"struct"},"24:1903:3691":{"crate_id":24,"path":["syn","parse","Nothing"],"kind":"struct"},"2:45302:8384":{"crate_id":2,"path":["core","core_arch","simd","f32x2"],"kind":"struct"},"2:41357:3558":{"crate_id":2,"path":["core","option","IterMut"],"kind":"struct"},"17:11016:23526":{"crate_id":17,"path":["object","read","archive","ArchiveMemberIterator"],"kind":"struct"},"2:31764:3720":{"crate_id":2,"path":["core","error","tags","Ref"],"kind":"struct"},"5:7552:8930":{"crate_id":5,"path":["alloc","ffi","c_str","NulError"],"kind":"struct"},"17:13187:5776":{"crate_id":17,"path":["object","elf","FileHeader32"],"kind":"struct"},"15:288:22514":{"crate_id":15,"path":["addr2line","LocationRangeIter"],"kind":"struct"},"2:41219:9006":{"crate_id":2,"path":["core","net","parser","AddrParseError"],"kind":"struct"},"11:2352:10636":{"crate_id":11,"path":["hashbrown","table","VacantEntry"],"kind":"struct"},"13:0:3311":{"crate_id":13,"path":["std_detect"],"kind":"module"},"2:45721:8428":{"crate_id":2,"path":["core","core_arch","simd","u64x4"],"kind":"struct"},"2:2732:126":{"crate_id":2,"path":["core","default","Default"],"kind":"trait"},"6:8271:8063":{"crate_id":6,"path":["libc","unix","linux_like","linux","fanotify_event_metadata"],"kind":"struct"},"17:15324:6299":{"crate_id":17,"path":["object","pe","ImageBoundImportDescriptor"],"kind":"struct"},"6:473:7034":{"crate_id":6,"path":["libc","unix","utimbuf"],"kind":"struct"},"17:11102:23534":{"crate_id":17,"path":["object","read","coff","section","CoffSegment"],"kind":"struct"},"18:613:36931":{"crate_id":18,"path":["memchr","memmem","twoway","SuffixKind"],"kind":"enum"},"17:14271:6006":{"crate_id":17,"path":["object","macho","PrebindCksumCommand"],"kind":"struct"},"17:13785:5917":{"crate_id":17,"path":["object","macho","FatArch64"],"kind":"struct"},"17:15383:6317":{"crate_id":17,"path":["object","pe","ImageResourceDirStringU"],"kind":"struct"},"17:13272:5803":{"crate_id":17,"path":["object","elf","SectionHeader64"],"kind":"struct"},"2:39001:214":{"crate_id":2,"path":["core","ops","range","RangeInclusive"],"kind":"struct"},"24:3807:3833":{"crate_id":24,"path":["syn","token","While"],"kind":"struct"},"17:2203:23562":{"crate_id":17,"path":["object","read","elf","relocation","ElfDynamicRelocationIterator"],"kind":"struct"},"21:628:3742":{"crate_id":21,"path":["proc_macro","diagnostic","MultiSpan"],"kind":"trait"},"11:299:8903":{"crate_id":11,"path":["hashbrown","raw","RawIterRange"],"kind":"struct"},"2:1754:648":{"crate_id":2,"path":["core","mem","drop"],"kind":"function"},"1:5897:4134":{"crate_id":1,"path":["std","sync","condvar","Condvar"],"kind":"struct"},"6:8012:8046":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","align","clone_args"],"kind":"struct"},"6:5250:7450":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_vm"],"kind":"struct"},"16:2936:22561":{"crate_id":16,"path":["gimli","common","SectionId"],"kind":"enum"},"24:5930:3545":{"crate_id":24,"path":["syn","ty","TypeTuple"],"kind":"struct"},"6:8006:8044":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","align","max_align_t"],"kind":"struct"},"1:1887:10660":{"crate_id":1,"path":["std","env","ArgsOs"],"kind":"struct"},"1:8160:129":{"crate_id":1,"path":["std","fs","DirBuilder"],"kind":"struct"},"2:45360:8395":{"crate_id":2,"path":["core","core_arch","simd","u16x8"],"kind":"struct"},"2:43914:9071":{"crate_id":2,"path":["core","str","BytesIsNotEmpty"],"kind":"struct"},"5:3273:8913":{"crate_id":5,"path":["alloc","collections","btree","set","SymmetricDifference"],"kind":"struct"},"16:6231:8820":{"crate_id":16,"path":["gimli","read","cfi","CallFrameInstructionIter"],"kind":"struct"},"2:39742:8978":{"crate_id":2,"path":["core","char","decode","DecodeUtf16Error"],"kind":"struct"},"21:140:4974":{"crate_id":21,"path":["proc_macro","bridge","client","Client"],"kind":"struct"},"2:43094:8954":{"crate_id":2,"path":["core","slice","iter","RChunksExact"],"kind":"struct"},"2:22108:11002":{"crate_id":2,"path":["core","core_simd","simd","ptr","const_ptr","SimdConstPtr"],"kind":"trait"},"5:5405:5253":{"crate_id":5,"path":["alloc","slice","hack","to_vec","DropGuard"],"kind":"struct"},"9:0:3314":{"crate_id":9,"path":["miniz_oxide"],"kind":"module"},"5:1172:36288":{"crate_id":5,"path":["alloc","collections","btree","borrow","DormantMutRef"],"kind":"struct"},"1:922:10630":{"crate_id":1,"path":["std","collections","hash","map","RawEntryBuilderMut"],"kind":"struct"},"1:5684:10861":{"crate_id":1,"path":["std","process","Termination"],"kind":"trait"},"2:22610:8113":{"crate_id":2,"path":["core","num","error","TryFromIntError"],"kind":"struct"},"1:1590:8911":{"crate_id":1,"path":["std","collections","hash","set","Intersection"],"kind":"struct"},"2:39761:8974":{"crate_id":2,"path":["core","char","EscapeDefault"],"kind":"struct"},"2:8095:179":{"crate_id":2,"path":["core","iter","traits","iterator","Iterator"],"kind":"trait"},"17:15126:6247":{"crate_id":17,"path":["object","pe","ImageAuxSymbolTokenDef"],"kind":"struct"},"17:15944:5790":{"crate_id":17,"path":["object","xcoff","FileHeader64"],"kind":"struct"},"1:4153:10792":{"crate_id":1,"path":["std","os","unix","fs","DirBuilderExt"],"kind":"trait"},"2:42562:9012":{"crate_id":2,"path":["core","hash","sip","Sip13Rounds"],"kind":"struct"},"24:2372:3558":{"crate_id":24,"path":["syn","punctuated","IterMut"],"kind":"struct"},"17:11443:5658":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbolTable"],"kind":"struct"},"6:5636:7627":{"crate_id":6,"path":["libc","unix","linux_like","linux","hwtstamp_config"],"kind":"struct"},"1:3540:10709":{"crate_id":1,"path":["std","io","IoSliceMut"],"kind":"struct"},"5:2198:4713":{"crate_id":5,"path":["alloc","collections","btree","mem","replace","PanicGuard"],"kind":"struct"},"24:3586:2861":{"crate_id":24,"path":["syn","token","Static"],"kind":"struct"},"2:21223:34830":{"crate_id":2,"path":["core","core_simd","swizzle","rotate_elements_left","Rotate"],"kind":"struct"},"16:2878:6592":{"crate_id":16,"path":["gimli","common","EhFrameOffset"],"kind":"struct"},"17:13509:5841":{"crate_id":17,"path":["object","elf","Verdef"],"kind":"struct"},"16:6976:6715":{"crate_id":16,"path":["gimli","read","loclists","LocationLists"],"kind":"struct"},"6:7546:8017":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ipc_perm"],"kind":"struct"},"17:16121:6525":{"crate_id":17,"path":["object","xcoff","FileAux64"],"kind":"struct"},"2:42280:33576":{"crate_id":2,"path":["core","fmt","rt","Count"],"kind":"enum"},"2:42292:6790":{"crate_id":2,"path":["core","fmt","rt","Flag"],"kind":"enum"},"5:2237:8918":{"crate_id":5,"path":["alloc","collections","btree","navigate","LeafRange"],"kind":"struct"},"16:2728:6585":{"crate_id":16,"path":["gimli","common","DebugRngListsIndex"],"kind":"struct"},"24:5238:3492":{"crate_id":24,"path":["syn","expr","ExprClosure"],"kind":"struct"},"11:1066:22483":{"crate_id":11,"path":["hashbrown","map","EntryRef"],"kind":"enum"},"2:41053:8320":{"crate_id":2,"path":["core","net","ip_addr","Ipv4Addr"],"kind":"struct"},"2:7723:3619":{"crate_id":2,"path":["core","iter","sources","once","once"],"kind":"function"},"17:10524:23507":{"crate_id":17,"path":["object","read","any","SegmentIterator"],"kind":"struct"},"1:7406:32581":{"crate_id":1,"path":["std","sys_common","wstr","WStrUnits"],"kind":"struct"},"17:11026:23527":{"crate_id":17,"path":["object","read","archive","MemberHeader"],"kind":"enum"},"21:108:4971":{"crate_id":21,"path":["proc_macro","bridge","client","Bridge"],"kind":"struct"},"1:9306:8589":{"crate_id":1,"path":["std","sync","mpmc","utils","CachePadded"],"kind":"struct"},"1:8105:5112":{"crate_id":1,"path":["std","fs","Metadata"],"kind":"struct"},"2:2421:114":{"crate_id":2,"path":["core","clone","Clone"],"kind":"trait"},"5:5917:4940":{"crate_id":5,"path":["alloc","string","Drain"],"kind":"struct"},"6:7461:7962":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_xmmreg"],"kind":"struct"},"1:5559:115":{"crate_id":1,"path":["std","process","Command"],"kind":"struct"},"17:11688:8726":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSection"],"kind":"struct"},"5:2528:8084":{"crate_id":5,"path":["alloc","collections","btree","node","NodeRef"],"kind":"struct"},"2:41340:174":{"crate_id":2,"path":["core","option","Item"],"kind":"struct"},"16:6342:36867":{"crate_id":16,"path":["gimli","read","dwarf","RangeIterInner"],"kind":"enum"},"17:12238:23661":{"crate_id":17,"path":["object","read","pe","section","PeSegment"],"kind":"struct"},"17:15301:6294":{"crate_id":17,"path":["object","pe","ImageTlsDirectory32"],"kind":"struct"},"2:22525:8101":{"crate_id":2,"path":["core","num","flt2dec","decoder","Decoded"],"kind":"struct"},"17:14356:6019":{"crate_id":17,"path":["object","macho","EncryptionInfoCommand64"],"kind":"struct"},"17:13946:5940":{"crate_id":17,"path":["object","macho","Fvmlib"],"kind":"struct"},"17:2037:23567":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbolIterator"],"kind":"struct"},"16:3475:6619":{"crate_id":16,"path":["gimli","arch","RiscV"],"kind":"struct"},"5:7463:3553":{"crate_id":5,"path":["alloc","collections","vec_deque","into_iter","IntoIter"],"kind":"struct"},"6:564:7087":{"crate_id":6,"path":["libc","unix","itimerval"],"kind":"struct"},"2:41085:10760":{"crate_id":2,"path":["core","net","ip_addr","Ipv6MulticastScope"],"kind":"enum"},"2:4415:3712":{"crate_id":2,"path":["core","cell","BorrowMutError"],"kind":"struct"},"1:12051:5370":{"crate_id":1,"path":["std","backtrace_rs","symbolize","gimli","mmap","Mmap"],"kind":"struct"},"2:4767:16113":{"crate_id":2,"path":["core","char","REPLACEMENT_CHARACTER"],"kind":"constant"},"23:281:2203":{"crate_id":23,"path":["quote","__private","push_lifetime_spanned","Lifetime"],"kind":"struct"},"24:5628:3524":{"crate_id":24,"path":["syn","op","BinOp"],"kind":"enum"},"2:46342:8483":{"crate_id":2,"path":["core","core_arch","x86","__m512"],"kind":"struct"},"1:11617:9107":{"crate_id":1,"path":["std","sys_common","wtf8","Wtf8CodePoints"],"kind":"struct"},"11:1025:10635":{"crate_id":11,"path":["hashbrown","map","OccupiedEntry"],"kind":"struct"},"2:40062:3668":{"crate_id":2,"path":["core","iter","adapters","intersperse","Intersperse"],"kind":"struct"},"1:1885:5102":{"crate_id":1,"path":["std","env","Args"],"kind":"struct"},"1:2449:10704":{"crate_id":1,"path":["std","fs","read_dir"],"kind":"function"},"1:8788:9086":{"crate_id":1,"path":["std","path","Components"],"kind":"struct"},"2:30207:4796":{"crate_id":2,"path":["core","mem","manually_drop","ManuallyDrop"],"kind":"struct"},"2:0:543":{"crate_id":2,"path":["core"],"kind":"module"},"2:43890:9065":{"crate_id":2,"path":["core","str","CharEscapeDebugContinue"],"kind":"struct"},"6:7446:7957":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","pthread_attr_t"],"kind":"struct"},"17:15356:6310":{"crate_id":17,"path":["object","pe","ImageResourceDirectory"],"kind":"struct"},"16:6543:8833":{"crate_id":16,"path":["gimli","read","aranges","ArangeEntry"],"kind":"struct"},"17:15039:6231":{"crate_id":17,"path":["object","pe","AnonObjectHeaderBigobj"],"kind":"struct"},"1:5681:7853":{"crate_id":1,"path":["std","process","exit"],"kind":"function"},"24:5272:3498":{"crate_id":24,"path":["syn","expr","ExprInfer"],"kind":"struct"},"1:9107:10886":{"crate_id":1,"path":["std","sync","mpsc","TryIter"],"kind":"struct"},"16:6026:8790":{"crate_id":16,"path":["gimli","read","cfi","UnwindContext"],"kind":"struct"},"17:13046:5753":{"crate_id":17,"path":["object","read","CompressedFileRange"],"kind":"struct"},"2:42263:3697":{"crate_id":2,"path":["core","fmt","rt","Alignment"],"kind":"enum"},"2:8404:3631":{"crate_id":2,"path":["core","iter","traits","marker","FusedIterator"],"kind":"trait"},"1:3522:8557":{"crate_id":1,"path":["std","io","Read"],"kind":"trait"},"17:14341:6015":{"crate_id":17,"path":["object","macho","EncryptionInfoCommand32"],"kind":"struct"},"24:5370:2737":{"crate_id":24,"path":["syn","expr","Index"],"kind":"struct"},"6:8300:8070":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_barrier_t"],"kind":"struct"},"1:4595:10817":{"crate_id":1,"path":["std","os","unix","process","CommandExt"],"kind":"trait"},"2:43075:8953":{"crate_id":2,"path":["core","slice","iter","RChunks"],"kind":"struct"},"11:1603:22488":{"crate_id":11,"path":["hashbrown","rustc_entry","RustcVacantEntry"],"kind":"struct"},"1:1939:10150":{"crate_id":1,"path":["std","error","Report"],"kind":"struct"},"5:4151:3558":{"crate_id":5,"path":["alloc","collections","vec_deque","iter_mut","IterMut"],"kind":"struct"},"14:220:6896":{"crate_id":14,"path":["rustc_demangle","SizeLimitExhausted"],"kind":"struct"},"2:31782:244":{"crate_id":2,"path":["core","marker","StructuralPartialEq"],"kind":"trait"},"6:6689:7809":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","sockaddr_xdp"],"kind":"struct"},"1:5528:10858":{"crate_id":1,"path":["std","process","ChildStdout"],"kind":"struct"},"24:4849:3878":{"crate_id":24,"path":["syn","token","Tilde"],"kind":"struct"},"17:11715:8728":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSubsection"],"kind":"struct"},"24:4296:3840":{"crate_id":24,"path":["syn","token","Colon"],"kind":"struct"},"5:282:5253":{"crate_id":5,"path":["alloc","boxed","thin","drop","DropGuard"],"kind":"struct"},"17:15596:6390":{"crate_id":17,"path":["object","pe","ImageHotPatchHashes"],"kind":"struct"},"24:4453:3850":{"crate_id":24,"path":["syn","token","Gt"],"kind":"struct"},"24:3110:118":{"crate_id":24,"path":["syn","token","Continue"],"kind":"struct"},"2:43940:132":{"crate_id":2,"path":["core","time","Duration"],"kind":"struct"},"24:644:138":{"crate_id":24,"path":["syn","error","Error"],"kind":"struct"},"16:5927:8776":{"crate_id":16,"path":["gimli","read","cfi","CommonInformationEntry"],"kind":"struct"},"17:13235:2126":{"crate_id":17,"path":["object","elf","Ident"],"kind":"struct"},"1:11528:5365":{"crate_id":1,"path":["std","sys_common","once","futex","CompletionGuard"],"kind":"struct"},"16:8175:23442":{"crate_id":16,"path":["gimli","read","unit","EntriesTreeNode"],"kind":"struct"},"6:5122:7408":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Phdr"],"kind":"struct"},"2:6639:4964":{"crate_id":2,"path":["core","iter","adapters","map_windows","Buffer"],"kind":"struct"},"2:42308:74":{"crate_id":2,"path":["core","fmt","rt","Argument"],"kind":"struct"},"2:43278:9026":{"crate_id":2,"path":["core","str","iter","SplitN"],"kind":"struct"},"24:4622:3862":{"crate_id":24,"path":["syn","token","Percent"],"kind":"struct"},"1:8590:7932":{"crate_id":1,"path":["std","os","linux","raw","arch","stat"],"kind":"struct"},"1:6088:5341":{"crate_id":1,"path":["std","sync","mpmc","counter","Sender"],"kind":"struct"},"17:13308:5808":{"crate_id":17,"path":["object","elf","CompressionHeader64"],"kind":"struct"},"17:12127:5702":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbolTable"],"kind":"struct"},"2:13421:117":{"crate_id":2,"path":["core","task","wake","Context"],"kind":"struct"},"21:0:1285":{"crate_id":21,"path":["proc_macro"],"kind":"module"},"2:43590:9045":{"crate_id":2,"path":["core","str","pattern","MultiCharEqSearcher"],"kind":"struct"},"1:11840:32854":{"crate_id":1,"path":["std","panicking","panic_count","MustAbort"],"kind":"enum"},"16:5897:6655":{"crate_id":16,"path":["gimli","read","cfi","Augmentation"],"kind":"struct"},"20:702:8694":{"crate_id":20,"path":["proc_macro2","rcvec","RcVecIntoIter"],"kind":"struct"},"11:1676:5250":{"crate_id":11,"path":["hashbrown","scopeguard","ScopeGuard"],"kind":"struct"},"5:1528:8910":{"crate_id":5,"path":["alloc","collections","btree","map","Values"],"kind":"struct"},"16:2788:6588":{"crate_id":16,"path":["gimli","common","DebugStrOffsetsIndex"],"kind":"struct"},"12:0:3317":{"crate_id":12,"path":["rustc_std_workspace_alloc"],"kind":"module"},"16:4424:6628":{"crate_id":16,"path":["gimli","constants","DwForm"],"kind":"struct"},"2:10975:16065":{"crate_id":2,"path":["core","slice","iter","SplitMut"],"kind":"struct"},"17:12949:5710":{"crate_id":17,"path":["object","read","Export"],"kind":"struct"},"1:7299:5354":{"crate_id":1,"path":["std","sys_common","lazy_box","LazyBox"],"kind":"struct"},"17:16032:5793":{"crate_id":17,"path":["object","xcoff","SectionHeader32"],"kind":"struct"},"17:14968:6216":{"crate_id":17,"path":["object","pe","ImageNtHeaders64"],"kind":"struct"},"21:2416:2194":{"crate_id":21,"path":["proc_macro","bridge","TokenTree"],"kind":"enum"},"1:11592:9105":{"crate_id":1,"path":["std","sys_common","wtf8","Wtf8Buf"],"kind":"struct"},"2:41796:96":{"crate_id":2,"path":["core","sync","atomic","AtomicU64"],"kind":"struct"},"2:43466:9038":{"crate_id":2,"path":["core","str","iter","EncodeUtf16"],"kind":"struct"},"24:2430:2750":{"crate_id":24,"path":["syn","punctuated","Pair"],"kind":"enum"},"2:46457:8509":{"crate_id":2,"path":["core","core_arch","x86","cpuid","CpuidResult"],"kind":"struct"},"2:22332:8957":{"crate_id":2,"path":["core","num","bignum","Big32x40"],"kind":"struct"},"6:4837:7285":{"crate_id":6,"path":["libc","unix","linux_like","linux","signalfd_siginfo"],"kind":"struct"},"16:7604:6610":{"crate_id":16,"path":["gimli","read","rnglists","DebugRngLists"],"kind":"struct"},"18:698:8705":{"crate_id":18,"path":["memchr","memmem","FinderBuilder"],"kind":"struct"},"5:7638:10142":{"crate_id":5,"path":["alloc","string","FromUtf16Error"],"kind":"struct"},"2:43242:9024":{"crate_id":2,"path":["core","str","iter","RSplitTerminator"],"kind":"struct"},"5:1343:10635":{"crate_id":5,"path":["alloc","collections","btree","map","entry","OccupiedEntry"],"kind":"struct"},"6:1496:7108":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreqn"],"kind":"struct"},"1:11016:5362":{"crate_id":1,"path":["std","sys","pal","unix","process","process_inner","do_exec","Reset"],"kind":"struct"},"17:13455:5835":{"crate_id":17,"path":["object","elf","ProgramHeader64"],"kind":"struct"},"1:12283:1767":{"crate_id":1,"path":["std","u16"],"kind":"primitive"},"1:8021:10149":{"crate_id":1,"path":["std","env","JoinPathsError"],"kind":"struct"},"14:7:10134":{"crate_id":14,"path":["rustc_demangle","legacy","Demangle"],"kind":"struct"},"17:15701:6419":{"crate_id":17,"path":["object","pe","ImageEnclaveImport"],"kind":"struct"},"1:8110:10707":{"crate_id":1,"path":["std","fs","ReadDir"],"kind":"struct"},"2:2986:4842":{"crate_id":2,"path":["core","ops","async_function","AsyncFnOnce"],"kind":"trait"},"2:43002:8952":{"crate_id":2,"path":["core","slice","iter","ChunksExact"],"kind":"struct"},"16:5769:8763":{"crate_id":16,"path":["gimli","read","cfi","EhHdrTable"],"kind":"struct"},"1:8710:8345":{"crate_id":1,"path":["std","path","State"],"kind":"enum"},"16:4976:6645":{"crate_id":16,"path":["gimli","constants","DwLns"],"kind":"struct"},"5:2104:10638":{"crate_id":5,"path":["alloc","collections","btree","map","CursorMut"],"kind":"struct"},"5:4425:264":{"crate_id":5,"path":["alloc","collections","vec_deque","VecDeque"],"kind":"struct"},"17:11269:23555":{"crate_id":17,"path":["object","read","coff","import","ImportName"],"kind":"enum"},"6:5039:7391":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_ff_erase"],"kind":"struct"},"2:45871:8434":{"crate_id":2,"path":["core","core_arch","simd","i8x64"],"kind":"struct"},"1:7870:5358":{"crate_id":1,"path":["std","backtrace_rs","Bomb"],"kind":"struct"},"5:1727:5253":{"crate_id":5,"path":["alloc","collections","btree","map","drop","DropGuard"],"kind":"struct"},"24:1118:3515":{"crate_id":24,"path":["syn","generics","Turbofish"],"kind":"struct"},"24:4934:3458":{"crate_id":24,"path":["syn","attr","MetaList"],"kind":"struct"},"2:32257:5474":{"crate_id":2,"path":["core","ops","arith","Mul"],"kind":"trait"},"11:1142:22485":{"crate_id":11,"path":["hashbrown","map","VacantEntryRef"],"kind":"struct"},"16:7823:23440":{"crate_id":16,"path":["gimli","read","unit","UnitType"],"kind":"enum"},"5:6033:5283":{"crate_id":5,"path":["alloc","sync","Weak"],"kind":"struct"},"6:4979:7360":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_constant_effect"],"kind":"struct"},"16:2572:6578":{"crate_id":16,"path":["gimli","common","DebugLocListsBase"],"kind":"struct"},"1:4131:10788":{"crate_id":1,"path":["std","os","unix","fs","FileTypeExt"],"kind":"trait"},"6:6519:7724":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_pktinfo"],"kind":"struct"},"17:12494:5718":{"crate_id":17,"path":["object","read","pe","rich","RichHeaderInfo"],"kind":"struct"},"24:5306:2394":{"crate_id":24,"path":["syn","expr","ExprPath"],"kind":"struct"},"24:5914:3541":{"crate_id":24,"path":["syn","ty","TypePtr"],"kind":"struct"},"5:6912:4944":{"crate_id":5,"path":["alloc","vec","set_len_on_drop","SetLenOnDrop"],"kind":"struct"},"24:5896:3535":{"crate_id":24,"path":["syn","ty","TypeGroup"],"kind":"struct"},"17:14475:6042":{"crate_id":17,"path":["object","macho","FvmfileCommand"],"kind":"struct"},"24:3178:3808":{"crate_id":24,"path":["syn","token","Dyn"],"kind":"struct"},"1:8115:9081":{"crate_id":1,"path":["std","fs","OpenOptions"],"kind":"struct"},"17:1098:23536":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbolIterator"],"kind":"struct"},"24:4330:3842":{"crate_id":24,"path":["syn","token","Dollar"],"kind":"struct"},"24:4470:3851":{"crate_id":24,"path":["syn","token","LArrow"],"kind":"struct"},"16:7590:6609":{"crate_id":16,"path":["gimli","read","rnglists","DebugRanges"],"kind":"struct"},"16:8313:138":{"crate_id":16,"path":["gimli","read","Error"],"kind":"enum"},"5:41:4851":{"crate_id":5,"path":["alloc","raw_vec","RawVec"],"kind":"struct"},"17:13986:5948":{"crate_id":17,"path":["object","macho","DylibCommand"],"kind":"struct"},"1:8815:9089":{"crate_id":1,"path":["std","path","StripPrefixError"],"kind":"struct"},"2:22576:33615":{"crate_id":2,"path":["core","num","fmt","Part"],"kind":"enum"},"5:7565:33609":{"crate_id":5,"path":["alloc","ffi","c_str","FromBytesWithNulErrorKind"],"kind":"enum"},"24:5728:2777":{"crate_id":24,"path":["syn","path","PathSegment"],"kind":"struct"},"17:14147:5970":{"crate_id":17,"path":["object","macho","DysymtabCommand"],"kind":"struct"},"17:4986:23703":{"crate_id":17,"path":["object","read","xcoff","relocation","XcoffRelocationIterator"],"kind":"struct"},"20:984:3553":{"crate_id":20,"path":["proc_macro2","token_stream","IntoIter"],"kind":"struct"},"17:12929:5746":{"crate_id":17,"path":["object","read","Import"],"kind":"struct"},"24:4982:2131":{"crate_id":24,"path":["syn","derive","Data"],"kind":"enum"},"6:5489:7565":{"crate_id":6,"path":["libc","unix","linux_like","linux","tls12_crypto_info_aes_gcm_128"],"kind":"struct"},"1:8561:10763":{"crate_id":1,"path":["std","os","unix","net","listener","Incoming"],"kind":"struct"},"1:9467:5102":{"crate_id":1,"path":["std","sys","pal","unix","args","Args"],"kind":"struct"},"6:6532:7730":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_mmap_hdr"],"kind":"struct"},"16:867:36868":{"crate_id":16,"path":["gimli","read","endian_slice","DebugByte"],"kind":"struct"},"24:5396:63":{"crate_id":24,"path":["syn","expr","parsing","kw","raw"],"kind":"struct"},"24:5779:3527":{"crate_id":24,"path":["syn","path","ParenthesizedGenericArguments"],"kind":"struct"},"2:31869:116":{"crate_id":2,"path":["core","marker","ConstParamTy"],"kind":"trait"},"2:41718:95":{"crate_id":2,"path":["core","sync","atomic","AtomicU32"],"kind":"struct"},"17:14855:6172":{"crate_id":17,"path":["object","pe","ImageFileHeader"],"kind":"struct"},"16:7098:8875":{"crate_id":16,"path":["gimli","read","lookup","LookupEntryIter"],"kind":"struct"},"17:12543:23694":{"crate_id":17,"path":["object","read","xcoff","section","XcoffSection"],"kind":"struct"},"21:413:5240":{"crate_id":21,"path":["proc_macro","bridge","scoped_cell","replace","PutBackOnDrop"],"kind":"struct"},"2:45626:8409":{"crate_id":2,"path":["core","core_arch","simd","u8x32"],"kind":"struct"},"2:43104:16066":{"crate_id":2,"path":["core","slice","iter","RChunksExactMut"],"kind":"struct"},"6:6880:7867":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","sysinfo"],"kind":"struct"},"2:3426:3729":{"crate_id":2,"path":["core","ops","unsize","DispatchFromDyn"],"kind":"trait"},"18:670:27762":{"crate_id":18,"path":["memchr","memmem","FindRevIter"],"kind":"struct"},"2:43023:8350":{"crate_id":2,"path":["core","slice","iter","ArrayWindows"],"kind":"struct"},"2:22517:8100":{"crate_id":2,"path":["core","num","diy_float","Fp"],"kind":"struct"},"2:46270:8477":{"crate_id":2,"path":["core","core_arch","x86","__m128"],"kind":"struct"},"5:7405:36673":{"crate_id":5,"path":["alloc","collections","btree","merge_iter","Peeked"],"kind":"enum"},"16:6442:8826":{"crate_id":16,"path":["gimli","read","abbrev","Abbreviation"],"kind":"struct"},"16:7857:6776":{"crate_id":16,"path":["gimli","read","unit","UnitHeader"],"kind":"struct"},"16:6940:6712":{"crate_id":16,"path":["gimli","read","lists","ListsHeader"],"kind":"struct"},"6:6505:7723":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","mallinfo2"],"kind":"struct"},"5:220:4853":{"crate_id":5,"path":["alloc","boxed","thin","ThinBox"],"kind":"struct"},"24:2200:3550":{"crate_id":24,"path":["syn","punctuated","Pairs"],"kind":"struct"},"24:4388:3846":{"crate_id":24,"path":["syn","token","DotDotEq"],"kind":"struct"},"1:10938:10860":{"crate_id":1,"path":["std","sys","pal","unix","process","process_common","Stdio"],"kind":"enum"},"18:113:27750":{"crate_id":18,"path":["memchr","memchr","iter","Memchr3"],"kind":"struct"},"1:12272:1746":{"crate_id":1,"path":["std","tuple"],"kind":"primitive"},"0:0:1992":{"crate_id":0,"path":["serde_derive"],"kind":"module"},"1:9214:10256":{"crate_id":1,"path":["std","sync","mpmc","array","ArrayToken"],"kind":"struct"},"2:41601:87":{"crate_id":2,"path":["core","sync","atomic","AtomicI16"],"kind":"struct"},"1:8535:9084":{"crate_id":1,"path":["std","os","unix","net","addr","SocketAddr"],"kind":"struct"},"5:7628:8937":{"crate_id":5,"path":["alloc","string","FromUtf8Error"],"kind":"struct"},"6:5415:7521":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_initmsg"],"kind":"struct"},"2:30271:33614":{"crate_id":2,"path":["core","ptr","alignment","AlignmentEnum"],"kind":"enum"},"1:6104:220":{"crate_id":1,"path":["std","sync","mpmc","counter","Receiver"],"kind":"struct"},"1:10848:9081":{"crate_id":1,"path":["std","sys","pal","unix","fs","OpenOptions"],"kind":"struct"},"16:4718:6636":{"crate_id":16,"path":["gimli","constants","DwLang"],"kind":"struct"},"24:592:3563":{"crate_id":24,"path":["syn","drops","NoDrop"],"kind":"struct"},"1:481:5327":{"crate_id":1,"path":["std","thread","spawn_unchecked_","MaybeDangling"],"kind":"struct"},"21:53:4964":{"crate_id":21,"path":["proc_macro","bridge","buffer","Buffer"],"kind":"struct"},"16:6588:8834":{"crate_id":16,"path":["gimli","read","index","UnitIndex"],"kind":"struct"},"16:7769:6768":{"crate_id":16,"path":["gimli","read","UnitOffset"],"kind":"struct"},"1:9180:10885":{"crate_id":1,"path":["std","sync","mpsc","TrySendError"],"kind":"enum"},"16:6433:8825":{"crate_id":16,"path":["gimli","read","abbrev","Abbreviations"],"kind":"struct"},"17:13344:5815":{"crate_id":17,"path":["object","elf","Sym64"],"kind":"struct"},"1:5613:10860":{"crate_id":1,"path":["std","process","Stdio"],"kind":"struct"},"1:11847:9110":{"crate_id":1,"path":["std","backtrace_rs","backtrace","Frame"],"kind":"struct"},"2:21267:34843":{"crate_id":2,"path":["core","core_simd","swizzle","deinterleave","Even"],"kind":"struct"},"1:3833:10765":{"crate_id":1,"path":["std","net","tcp","TcpStream"],"kind":"struct"},"6:5466:7557":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_prinfo"],"kind":"struct"},"6:6738:7828":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_umem_reg_v1"],"kind":"struct"},"16:8226:23444":{"crate_id":16,"path":["gimli","read","value","ValueType"],"kind":"enum"},"17:9755:23479":{"crate_id":17,"path":["object","common","AddressSize"],"kind":"enum"},"2:3389:3727":{"crate_id":2,"path":["core","ops","unsize","CoerceUnsized"],"kind":"trait"},"1:10547:5361":{"crate_id":1,"path":["std","sys","pal","unix","stack_overflow","Handler"],"kind":"struct"},"17:11214:23532":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdatIterator"],"kind":"struct"},"5:7713:4939":{"crate_id":5,"path":["alloc","vec","splice","Splice"],"kind":"struct"},"16:2374:6569":{"crate_id":16,"path":["gimli","common","Register"],"kind":"struct"},"2:30260:3697":{"crate_id":2,"path":["core","ptr","alignment","Alignment"],"kind":"struct"},"23:38:3191":{"crate_id":23,"path":["quote","format_ident"],"kind":"macro"},"2:22469:8096":{"crate_id":2,"path":["core","num","dec2flt","number","Number"],"kind":"struct"},"1:414:185":{"crate_id":1,"path":["std","thread","local","LocalKey"],"kind":"struct"},"16:6079:8754":{"crate_id":16,"path":["gimli","read","cfi","UnwindTableRow"],"kind":"struct"},"2:45074:8362":{"crate_id":2,"path":["core","core_arch","simd","u8x2"],"kind":"struct"},"2:7376:3649":{"crate_id":2,"path":["core","iter","adapters","zip","TrustedRandomAccess"],"kind":"trait"},"16:6782:23430":{"crate_id":16,"path":["gimli","read","line","ColumnType"],"kind":"enum"},"17:12851:8750":{"crate_id":17,"path":["object","read","SymbolMap"],"kind":"struct"},"17:11354:23565":{"crate_id":17,"path":["object","read","elf","segment","ElfSegment"],"kind":"struct"},"1:637:10619":{"crate_id":1,"path":["std","backtrace","BacktraceFrame"],"kind":"struct"},"17:14463:6041":{"crate_id":17,"path":["object","macho","IdentCommand"],"kind":"struct"},"2:46115:8470":{"crate_id":2,"path":["core","core_arch","simd","i32x16"],"kind":"struct"},"6:7467:7963":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_fpstate"],"kind":"struct"},"11:2326:10635":{"crate_id":11,"path":["hashbrown","table","OccupiedEntry"],"kind":"struct"},"17:10218:5629":{"crate_id":17,"path":["object","endian","U32Bytes"],"kind":"struct"},"9:502:7011":{"crate_id":9,"path":["miniz_oxide","StreamResult"],"kind":"struct"},"17:12278:23686":{"crate_id":17,"path":["object","read","pe","section","PeRelocationIterator"],"kind":"struct"},"18:521:27763":{"crate_id":18,"path":["memchr","memmem","prefilter","Prefilter"],"kind":"enum"},"17:10399:3102":{"crate_id":17,"path":["object","read","util","Bytes"],"kind":"struct"},"24:5228:3475":{"crate_id":24,"path":["syn","expr","ExprCall"],"kind":"struct"},"17:12399:8745":{"crate_id":17,"path":["object","read","pe","import","DelayLoadDescriptorIterator"],"kind":"struct"},"1:3588:31183":{"crate_id":1,"path":["std","io","Write","write_fmt","Adapter"],"kind":"struct"},"1:12264:1137":{"crate_id":1,"path":["std","never"],"kind":"primitive"},"17:13766:5912":{"crate_id":17,"path":["object","macho","FatHeader"],"kind":"struct"},"2:35631:3872":{"crate_id":2,"path":["core","ops","bit","Shr"],"kind":"trait"},"5:2115:10639":{"crate_id":5,"path":["alloc","collections","btree","map","CursorMutKey"],"kind":"struct"},"16:5686:6594":{"crate_id":16,"path":["gimli","read","addr","DebugAddr"],"kind":"struct"},"2:25485:266":{"crate_id":2,"path":["core","num","wrapping","Wrapping"],"kind":"struct"},"2:45480:8401":{"crate_id":2,"path":["core","core_arch","simd","i64x2"],"kind":"struct"},"17:14994:6222":{"crate_id":17,"path":["object","pe","Guid"],"kind":"struct"},"20:885:2193":{"crate_id":20,"path":["proc_macro2","Span"],"kind":"struct"},"17:12597:5723":{"crate_id":17,"path":["object","read","xcoff","symbol","XcoffSymbolTable"],"kind":"struct"},"24:3790:3832":{"crate_id":24,"path":["syn","token","Where"],"kind":"struct"},"5:871:5259":{"crate_id":5,"path":["alloc","collections","binary_heap","RebuildOnDrop"],"kind":"struct"},"2:44210:9077":{"crate_id":2,"path":["core","escape","EscapeIterInner"],"kind":"struct"},"17:10887:36906":{"crate_id":17,"path":["object","read","any","DynamicRelocationIteratorInternal"],"kind":"enum"},"6:1517:7116":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_in"],"kind":"struct"},"1:12284:1773":{"crate_id":1,"path":["std","u32"],"kind":"primitive"},"17:12792:5591":{"crate_id":17,"path":["object","read","SectionIndex"],"kind":"struct"},"6:4942:7344":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_keymap_entry"],"kind":"struct"},"1:11211:162":{"crate_id":1,"path":["std","sys","pal","unix","time","Instant"],"kind":"struct"},"1:5353:203":{"crate_id":1,"path":["std","path","Path"],"kind":"struct"},"2:46244:8475":{"crate_id":2,"path":["core","core_arch","simd","f64x8"],"kind":"struct"},"5:5449:16053":{"crate_id":5,"path":["alloc","slice","Concat"],"kind":"trait"},"17:13581:5868":{"crate_id":17,"path":["object","elf","NoteHeader64"],"kind":"struct"},"16:6278:10210":{"crate_id":16,"path":["gimli","read","dwarf","Dwarf"],"kind":"struct"},"2:37507:5482":{"crate_id":2,"path":["core","ops","bit","BitAndAssign"],"kind":"trait"},"5:7375:4940":{"crate_id":5,"path":["alloc","collections","binary_heap","Drain"],"kind":"struct"},"2:45671:8426":{"crate_id":2,"path":["core","core_arch","simd","u16x16"],"kind":"struct"},"2:31708:6947":{"crate_id":2,"path":["core","convert","Infallible"],"kind":"enum"},"5:6412:11007":{"crate_id":5,"path":["alloc","task","LocalWake"],"kind":"trait"},"6:5174:7412":{"crate_id":6,"path":["libc","unix","linux_like","linux","ucred"],"kind":"struct"},"6:6729:7825":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_umem_reg"],"kind":"struct"},"2:4927:423":{"crate_id":2,"path":["core","ffi","c_void"],"kind":"enum"},"17:15222:6274":{"crate_id":17,"path":["object","pe","ImageArchiveMemberHeader"],"kind":"struct"},"18:515:5506":{"crate_id":18,"path":["memchr","memmem","prefilter","PrefilterFn"],"kind":"struct"},"17:10905:23513":{"crate_id":17,"path":["object","read","any","SectionRelocationIterator"],"kind":"struct"},"23:0:1337":{"crate_id":23,"path":["quote"],"kind":"module"},"17:15992:6499":{"crate_id":17,"path":["object","xcoff","AuxHeader64"],"kind":"struct"},"17:16187:6542":{"crate_id":17,"path":["object","xcoff","ExpAux"],"kind":"struct"},"16:4856:6641":{"crate_id":16,"path":["gimli","constants","DwOrd"],"kind":"struct"},"16:7711:210":{"crate_id":16,"path":["gimli","read","rnglists","Range"],"kind":"struct"},"17:13146:5767":{"crate_id":17,"path":["object","archive","AixFileHeader"],"kind":"struct"},"2:43438:9035":{"crate_id":2,"path":["core","str","iter","LinesAny"],"kind":"struct"},"21:2694:3739":{"crate_id":21,"path":["proc_macro","SourceFile"],"kind":"struct"},"16:3014:22562":{"crate_id":16,"path":["gimli","common","DwarfFileType"],"kind":"enum"},"17:13399:5823":{"crate_id":17,"path":["object","elf","Rela32"],"kind":"struct"},"2:44171:181":{"crate_id":2,"path":["core","alloc","layout","Layout"],"kind":"struct"},"5:3650:3554":{"crate_id":5,"path":["alloc","collections","linked_list","Iter"],"kind":"struct"},"24:5419:2680":{"crate_id":24,"path":["syn","generics","GenericParam"],"kind":"enum"},"2:38866:4844":{"crate_id":2,"path":["core","ops","coroutine","CoroutineState"],"kind":"enum"},"2:40513:3622":{"crate_id":2,"path":["core","iter","sources","once_with","OnceWith"],"kind":"struct"},"21:1386:2207":{"crate_id":21,"path":["proc_macro","bridge","symbol","Symbol"],"kind":"struct"},"16:7528:8881":{"crate_id":16,"path":["gimli","read","pubnames","PubNamesEntry"],"kind":"struct"},"2:40115:3662":{"crate_id":2,"path":["core","iter","adapters","scan","Scan"],"kind":"struct"},"24:5250:3477":{"crate_id":24,"path":["syn","expr","ExprField"],"kind":"struct"},"2:12387:9031":{"crate_id":2,"path":["core","str","iter","MatchesInternal"],"kind":"struct"},"20:827:2114":{"crate_id":20,"path":["proc_macro2","imp","Group"],"kind":"enum"},"2:43428:9034":{"crate_id":2,"path":["core","str","iter","Lines"],"kind":"struct"},"17:14402:6026":{"crate_id":17,"path":["object","macho","BuildToolVersion"],"kind":"struct"},"20:794:251":{"crate_id":20,"path":["proc_macro2","imp","TokenStream"],"kind":"enum"},"2:43224:9023":{"crate_id":2,"path":["core","str","iter","SplitTerminator"],"kind":"struct"},"17:13497:5840":{"crate_id":17,"path":["object","elf","Versym"],"kind":"struct"},"20:955:2813":{"crate_id":20,"path":["proc_macro2","Literal"],"kind":"struct"},"2:9521:92":{"crate_id":2,"path":["core","sync","atomic","AtomicPtr"],"kind":"struct"},"17:3597:23636":{"crate_id":17,"path":["object","read","macho","relocation","MachORelocationIterator"],"kind":"struct"},"2:9708:10253":{"crate_id":2,"path":["core","fmt","builders","PadAdapterState"],"kind":"struct"},"6:5329:7487":{"crate_id":6,"path":["libc","unix","linux_like","linux","seccomp_notif_sizes"],"kind":"struct"},"17:14847:6169":{"crate_id":17,"path":["object","pe","MaskedRichHeaderEntry"],"kind":"struct"},"1:10612:10745":{"crate_id":1,"path":["std","sys","pal","unix","stdio","Stderr"],"kind":"struct"},"6:6768:7838":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_desc"],"kind":"struct"},"24:1776:2200":{"crate_id":24,"path":["syn","parse","ParseStream"],"kind":"type_alias"},"6:6678:7807":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ptrace_syscall_info"],"kind":"struct"},"2:2069:4845":{"crate_id":2,"path":["core","ptr","unique","Unique"],"kind":"struct"},"21:2590:8692":{"crate_id":21,"path":["proc_macro","diagnostic","Children"],"kind":"struct"},"16:5075:6648":{"crate_id":16,"path":["gimli","constants","DwMacro"],"kind":"struct"},"24:3008:3803":{"crate_id":24,"path":["syn","token","Auto"],"kind":"struct"},"1:9640:5360":{"crate_id":1,"path":["std","sys","pal","unix","fs","Dir"],"kind":"struct"},"24:5373:3485":{"crate_id":24,"path":["syn","expr","FieldValue"],"kind":"struct"},"17:9916:23502":{"crate_id":17,"path":["object","common","SymbolScope"],"kind":"enum"},"2:10064:3707":{"crate_id":2,"path":["core","fmt","UpperExp"],"kind":"trait"},"1:12282:1785":{"crate_id":1,"path":["std","u8"],"kind":"primitive"},"17:10982:23525":{"crate_id":17,"path":["object","read","archive","Members"],"kind":"enum"},"2:31750:2891":{"crate_id":2,"path":["core","error","tags","Value"],"kind":"struct"},"17:11497:23561":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdatIterator"],"kind":"struct"},"6:5212:7433":{"crate_id":6,"path":["libc","unix","linux_like","linux","genlmsghdr"],"kind":"struct"},"24:4879:4028":{"crate_id":24,"path":["syn","token","Bracket"],"kind":"struct"},"24:3722:3828":{"crate_id":24,"path":["syn","token","Unsafe"],"kind":"struct"},"21:2581:3740":{"crate_id":21,"path":["proc_macro","diagnostic","Diagnostic"],"kind":"struct"},"16:7014:23432":{"crate_id":16,"path":["gimli","read","loclists","RawLocListEntry"],"kind":"enum"},"11:856:10632":{"crate_id":11,"path":["hashbrown","map","RawOccupiedEntryMut"],"kind":"struct"},"2:3178:3566":{"crate_id":2,"path":["core","ops","index","IndexMut"],"kind":"trait"},"24:4892:2459":{"crate_id":24,"path":["syn","token","Paren"],"kind":"struct"},"17:16269:5825":{"crate_id":17,"path":["object","xcoff","Rel64"],"kind":"struct"},"1:3461:3624":{"crate_id":1,"path":["std","io","util","Repeat"],"kind":"struct"},"11:1728:156":{"crate_id":11,"path":["hashbrown","set","HashSet"],"kind":"struct"},"11:490:154":{"crate_id":11,"path":["hashbrown","map","HashMap"],"kind":"struct"},"1:914:10250":{"crate_id":1,"path":["std","collections","hash","map","IntoKeys"],"kind":"struct"},"17:15814:6445":{"crate_id":17,"path":["object","pe","ImageArchitectureEntry"],"kind":"struct"},"24:306:37215":{"crate_id":24,"path":["syn","bigint","BigInt"],"kind":"struct"},"17:16151:6533":{"crate_id":17,"path":["object","xcoff","CsectAux64"],"kind":"struct"},"17:16198:6543":{"crate_id":17,"path":["object","xcoff","BlockAux32"],"kind":"struct"},"24:5902:3537":{"crate_id":24,"path":["syn","ty","TypeInfer"],"kind":"struct"},"17:11166:5647":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbolTable"],"kind":"struct"},"2:42770:9014":{"crate_id":2,"path":["core","slice","ascii","EscapeByte"],"kind":"struct"},"24:1102:37299":{"crate_id":24,"path":["syn","generics","ConstParamsMut"],"kind":"struct"},"17:15473:6340":{"crate_id":17,"path":["object","pe","ImageLoadConfigDirectory32"],"kind":"struct"},"18:735:27759":{"crate_id":18,"path":["memchr","memmem","SearcherKind"],"kind":"enum"},"24:5224:3491":{"crate_id":24,"path":["syn","expr","ExprBreak"],"kind":"struct"},"11:2403:3558":{"crate_id":11,"path":["hashbrown","table","IterMut"],"kind":"struct"},"1:10970:8580":{"crate_id":1,"path":["std","sys","pal","unix","process","process_common","ExitCode"],"kind":"struct"},"6:7584:8034":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user_fpregs_struct"],"kind":"struct"},"24:5933:67":{"crate_id":24,"path":["syn","ty","Abi"],"kind":"struct"},"5:1156:36699":{"crate_id":5,"path":["alloc","collections","btree","append","MergeIter"],"kind":"struct"},"24:5363:2149":{"crate_id":24,"path":["syn","expr","Member"],"kind":"enum"},"2:39850:33609":{"crate_id":2,"path":["core","ffi","c_str","FromBytesWithNulErrorKind"],"kind":"enum"},"17:13363:5816":{"crate_id":17,"path":["object","elf","Syminfo32"],"kind":"struct"},"5:4440:5279":{"crate_id":5,"path":["alloc","collections","vec_deque","drop","Dropper"],"kind":"struct"},"2:43296:9027":{"crate_id":2,"path":["core","str","iter","RSplitN"],"kind":"struct"},"11:1896:4938":{"crate_id":11,"path":["hashbrown","set","ExtractIf"],"kind":"struct"},"6:6621:7787":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","Elf64_Chdr"],"kind":"struct"},"1:5742:220":{"crate_id":1,"path":["std","sync","mpsc","Receiver"],"kind":"struct"},"2:43696:9050":{"crate_id":2,"path":["core","str","pattern","CharPredicateSearcher"],"kind":"struct"},"2:3623:4940":{"crate_id":2,"path":["core","array","drain","Drain"],"kind":"struct"},"2:22253:10994":{"crate_id":2,"path":["core","core_simd","simd","cmp","ord","SimdOrd"],"kind":"trait"},"2:1860:4890":{"crate_id":2,"path":["core","ptr","metadata","Pointee"],"kind":"trait"},"16:3842:6623":{"crate_id":16,"path":["gimli","constants","DwUt"],"kind":"struct"},"1:3771:10761":{"crate_id":1,"path":["std","net","socket_addr","ToSocketAddrs"],"kind":"trait"},"17:10155:5626":{"crate_id":17,"path":["object","endian","LittleEndian"],"kind":"struct"},"2:21791:34836":{"crate_id":2,"path":["core","core_simd","vector","splat","Splat"],"kind":"struct"},"1:4730:10787":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt"],"kind":"trait"},"6:4916:7334":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_event"],"kind":"struct"},"1:11150:27834":{"crate_id":1,"path":["std","sys","pal","unix","thread","cgroups","Cgroup"],"kind":"enum"},"16:6480:6595":{"crate_id":16,"path":["gimli","read","aranges","DebugAranges"],"kind":"struct"},"2:21372:8093":{"crate_id":2,"path":["core","core_simd","masks","mask_impl","Mask"],"kind":"struct"},"17:16165:6536":{"crate_id":17,"path":["object","xcoff","FunAux32"],"kind":"struct"},"6:5400:7515":{"crate_id":6,"path":["libc","unix","linux_like","linux","in6_ifreq"],"kind":"struct"},"24:5319:3503":{"crate_id":24,"path":["syn","expr","ExprRepeat"],"kind":"struct"},"6:6650:7800":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ptrace_peeksiginfo_args"],"kind":"struct"},"1:10919:27828":{"crate_id":1,"path":["std","sys","pal","unix","kernel_copy","SpliceMode"],"kind":"enum"},"2:2660:257":{"crate_id":2,"path":["core","convert","TryInto"],"kind":"trait"},"2:11048:8949":{"crate_id":2,"path":["core","slice","iter","RSplit"],"kind":"struct"},"11:434:36831":{"crate_id":11,"path":["hashbrown","raw","RawIterHashInner"],"kind":"struct"},"17:16212:6547":{"crate_id":17,"path":["object","xcoff","BlockAux64"],"kind":"struct"},"17:10622:36909":{"crate_id":17,"path":["object","read","any","SectionIteratorInternal"],"kind":"enum"},"18:598:5464":{"crate_id":18,"path":["memchr","memmem","twoway","Shift"],"kind":"enum"},"18:651:5503":{"crate_id":18,"path":["memchr","memmem","x86","sse","Forward"],"kind":"struct"},"16:6648:8844":{"crate_id":16,"path":["gimli","read","line","LineRows"],"kind":"struct"},"1:503:4713":{"crate_id":1,"path":["std","thread","PanicGuard"],"kind":"struct"},"2:4336:3694":{"crate_id":2,"path":["core","cell","Cell"],"kind":"struct"},"2:42523:9010":{"crate_id":2,"path":["core","hash","sip","SipHasher24"],"kind":"struct"},"6:6763:7837":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_options"],"kind":"struct"},"16:8136:8895":{"crate_id":16,"path":["gimli","read","unit","EntriesCursor"],"kind":"struct"},"17:437:5577":{"crate_id":17,"path":["object","read","any","Section"],"kind":"struct"},"16:0:3320":{"crate_id":16,"path":["gimli"],"kind":"module"},"16:4468:6629":{"crate_id":16,"path":["gimli","constants","DwAte"],"kind":"struct"},"10:44:6951":{"crate_id":10,"path":["adler","Adler32"],"kind":"struct"},"1:9201:8585":{"crate_id":1,"path":["std","sync","condvar","WaitTimeoutResult"],"kind":"struct"},"18:563:5509":{"crate_id":18,"path":["memchr","memmem","rarebytes","RareNeedleBytes"],"kind":"struct"},"2:42531:9011":{"crate_id":2,"path":["core","hash","sip","SipHasher"],"kind":"struct"},"16:3925:6625":{"crate_id":16,"path":["gimli","constants","DwChildren"],"kind":"struct"},"17:11293:23556":{"crate_id":17,"path":["object","read","coff","import","ImportType"],"kind":"enum"},"24:4226:3835":{"crate_id":24,"path":["syn","token","AndAnd"],"kind":"struct"},"11:1891:4940":{"crate_id":11,"path":["hashbrown","set","Drain"],"kind":"struct"},"6:8351:8082":{"crate_id":6,"path":["libc","unix","align","in6_addr"],"kind":"struct"},"20:880:251":{"crate_id":20,"path":["proc_macro2","TokenStream"],"kind":"struct"},"24:1299:2203":{"crate_id":24,"path":["syn","lifetime","Lifetime"],"kind":"struct"},"2:45153:8371":{"crate_id":2,"path":["core","core_arch","simd","i16x2"],"kind":"struct"},"24:3246:3811":{"crate_id":24,"path":["syn","token","Final"],"kind":"struct"},"16:6758:6694":{"crate_id":16,"path":["gimli","read","line","LineRow"],"kind":"struct"},"11:774:8909":{"crate_id":11,"path":["hashbrown","map","Keys"],"kind":"struct"},"2:22070:11001":{"crate_id":2,"path":["core","core_simd","simd","num","uint","SimdUint"],"kind":"trait"},"1:3607:10730":{"crate_id":1,"path":["std","io","BufRead"],"kind":"trait"},"24:5003:2466":{"crate_id":24,"path":["syn","expr","Expr"],"kind":"enum"},"1:10127:9003":{"crate_id":1,"path":["std","sys","pal","unix","net","Socket"],"kind":"struct"},"6:4787:7248":{"crate_id":6,"path":["libc","unix","linux_like","linux","glob_t"],"kind":"struct"},"24:5203:3487":{"crate_id":24,"path":["syn","expr","ExprAssign"],"kind":"struct"},"18:589:5510":{"crate_id":18,"path":["memchr","memmem","twoway","TwoWay"],"kind":"struct"},"6:5102:7406":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Sym"],"kind":"struct"},"2:8039:3636":{"crate_id":2,"path":["core","iter","traits","exact_size","ExactSizeIterator"],"kind":"trait"},"1:8547:10816":{"crate_id":1,"path":["std","os","unix","net","ancillary","AncillaryError"],"kind":"enum"},"2:10001:3705":{"crate_id":2,"path":["core","fmt","Write"],"kind":"trait"},"16:872:36897":{"crate_id":16,"path":["gimli","read","endian_slice","DebugLen"],"kind":"struct"},"6:1559:7144":{"crate_id":6,"path":["libc","unix","linux_like","fd_set"],"kind":"struct"},"5:2090:3692":{"crate_id":5,"path":["alloc","collections","btree","map","Cursor"],"kind":"struct"},"1:11551:10865":{"crate_id":1,"path":["std","sys_common","process","CommandEnvs"],"kind":"struct"},"17:261:36897":{"crate_id":17,"path":["object","read","util","DebugLen"],"kind":"struct"},"21:2620:251":{"crate_id":21,"path":["proc_macro","TokenStream"],"kind":"struct"},"6:5671:7640":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_can_addr"],"kind":"union"},"6:5277:7467":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_tp"],"kind":"struct"},"24:4482:3852":{"crate_id":24,"path":["syn","token","Le"],"kind":"struct"},"6:5598:7604":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_ifr_ifru"],"kind":"union"},"2:39895:5306":{"crate_id":2,"path":["core","ffi","VaListImpl"],"kind":"struct"},"2:39041:3604":{"crate_id":2,"path":["core","ops","range","Bound"],"kind":"enum"},"17:15646:6403":{"crate_id":17,"path":["object","pe","ImageRuntimeFunctionEntry"],"kind":"struct"},"1:4254:10810":{"crate_id":1,"path":["std","os","unix","net","ancillary","ScmRights"],"kind":"struct"},"5:4470:5277":{"crate_id":5,"path":["alloc","collections","vec_deque","write_iter_wrapping","Guard"],"kind":"struct"},"1:4740:7943":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt","st_atime"],"kind":"function"},"1:12216:9875":{"crate_id":1,"path":["std","backtrace_rs","symbolize","gimli","parse_running_mmaps","MapsEntry"],"kind":"struct"},"17:12508:5721":{"crate_id":17,"path":["object","read","pe","rich","RichHeaderEntry"],"kind":"struct"},"16:2458:6573":{"crate_id":16,"path":["gimli","common","DebugArangesOffset"],"kind":"struct"},"24:3382:2511":{"crate_id":24,"path":["syn","token","Macro"],"kind":"struct"},"5:3252:36742":{"crate_id":5,"path":["alloc","collections","btree","set","DifferenceInner"],"kind":"enum"},"16:2338:6561":{"crate_id":16,"path":["gimli","common","Encoding"],"kind":"struct"},"24:53:2202":{"crate_id":24,"path":["syn","token"],"kind":"module"},"2:13439:5325":{"crate_id":2,"path":["core","task","wake","Waker"],"kind":"struct"},"2:2317:4876":{"crate_id":2,"path":["core","ptr","from_exposed_addr_mut"],"kind":"function"},"6:1723:7242":{"crate_id":6,"path":["libc","unix","linux_like","sigevent"],"kind":"struct"},"18:689:8704":{"crate_id":18,"path":["memchr","memmem","FinderRev"],"kind":"struct"},"24:3824:267":{"crate_id":24,"path":["syn","token","Yield"],"kind":"struct"},"6:1653:7213":{"crate_id":6,"path":["libc","unix","linux_like","arpreq"],"kind":"struct"},"16:3778:6621":{"crate_id":16,"path":["gimli","constants","DwSect"],"kind":"struct"},"6:1680:7226":{"crate_id":6,"path":["libc","unix","linux_like","mmsghdr"],"kind":"struct"},"17:9938:23503":{"crate_id":17,"path":["object","common","RelocationKind"],"kind":"enum"},"17:11853:23652":{"crate_id":17,"path":["object","read","macho","file","MachOComdat"],"kind":"struct"},"24:4969:2143":{"crate_id":24,"path":["syn","data","Field"],"kind":"struct"},"11:1160:10140":{"crate_id":11,"path":["hashbrown","map","OccupiedError"],"kind":"struct"},"16:2612:6580":{"crate_id":16,"path":["gimli","common","DebugMacinfoOffset"],"kind":"struct"},"8:0:3313":{"crate_id":8,"path":["cfg_if"],"kind":"module"},"16:2438:6572":{"crate_id":16,"path":["gimli","common","DebugAddrIndex"],"kind":"struct"},"14:187:22502":{"crate_id":14,"path":["rustc_demangle","SizeLimitedFmtAdapter"],"kind":"struct"},"17:11915:23654":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandVariant"],"kind":"enum"},"2:41679:88":{"crate_id":2,"path":["core","sync","atomic","AtomicI32"],"kind":"struct"},"6:4891:7318":{"crate_id":6,"path":["libc","unix","linux_like","linux","if_nameindex"],"kind":"struct"},"17:14868:6179":{"crate_id":17,"path":["object","pe","ImageDataDirectory"],"kind":"struct"},"18:623:36933":{"crate_id":18,"path":["memchr","memmem","twoway","SuffixOrdering"],"kind":"enum"},"24:3212:2139":{"crate_id":24,"path":["syn","token","Enum"],"kind":"struct"},"17:12993:23517":{"crate_id":17,"path":["object","read","RelocationTarget"],"kind":"enum"},"6:559:7085":{"crate_id":6,"path":["libc","unix","sigval"],"kind":"struct"},"19:0:1235":{"crate_id":19,"path":["panic_unwind"],"kind":"module"},"2:2654:163":{"crate_id":2,"path":["core","convert","Into"],"kind":"trait"},"2:45512:8403":{"crate_id":2,"path":["core","core_arch","simd","f64x2"],"kind":"struct"},"1:4744:7947":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt","st_ctime"],"kind":"function"},"2:39021:216":{"crate_id":2,"path":["core","ops","range","RangeToInclusive"],"kind":"struct"},"16:5367:23419":{"crate_id":16,"path":["gimli","endianity","RunTimeEndian"],"kind":"enum"},"18:538:5507":{"crate_id":18,"path":["memchr","memmem","rabinkarp","NeedleHash"],"kind":"struct"},"16:7549:8884":{"crate_id":16,"path":["gimli","read","pubnames","PubNamesEntryIter"],"kind":"struct"},"24:5359:3510":{"crate_id":24,"path":["syn","expr","ExprYield"],"kind":"struct"},"17:13674:5876":{"crate_id":17,"path":["object","macho","DyldCacheHeader"],"kind":"struct"},"2:43448:9036":{"crate_id":2,"path":["core","str","iter","SplitWhitespace"],"kind":"struct"},"2:31838:4490":{"crate_id":2,"path":["core","marker","PhantomPinned"],"kind":"struct"},"17:10915:36905":{"crate_id":17,"path":["object","read","any","SectionRelocationIteratorInternal"],"kind":"enum"},"2:45121:8369":{"crate_id":2,"path":["core","core_arch","simd","u16x2"],"kind":"struct"},"1:1824:10644":{"crate_id":1,"path":["std","env","Vars"],"kind":"struct"},"17:15616:6396":{"crate_id":17,"path":["object","pe","ImageArm64RuntimeFunctionEntry"],"kind":"struct"},"17:12388:8744":{"crate_id":17,"path":["object","read","pe","import","DelayLoadImportTable"],"kind":"struct"},"1:12279:869":{"crate_id":1,"path":["std","i32"],"kind":"primitive"},"11:1910:8912":{"crate_id":11,"path":["hashbrown","set","Difference"],"kind":"struct"},"2:21755:10919":{"crate_id":2,"path":["core","core_simd","to_bytes","ToBytes"],"kind":"trait"},"5:3637:183":{"crate_id":5,"path":["alloc","collections","linked_list","LinkedList"],"kind":"struct"},"24:5518:2783":{"crate_id":24,"path":["syn","generics","PredicateType"],"kind":"struct"},"24:5287:3479":{"crate_id":24,"path":["syn","expr","ExprMacro"],"kind":"struct"},"16:6813:8850":{"crate_id":16,"path":["gimli","read","line","LineProgramHeader"],"kind":"struct"},"2:22438:8095":{"crate_id":2,"path":["core","num","dec2flt","common","BiasedFp"],"kind":"struct"},"18:96:27749":{"crate_id":18,"path":["memchr","memchr","iter","Memchr2"],"kind":"struct"},"1:9286:27839":{"crate_id":1,"path":["std","sync","mpmc","select","Selected"],"kind":"enum"},"24:4552:3857":{"crate_id":24,"path":["syn","token","Not"],"kind":"struct"},"24:128:2114":{"crate_id":24,"path":["syn","token","Group"],"kind":"struct"},"1:1446:156":{"crate_id":1,"path":["std","collections","hash","set","HashSet"],"kind":"struct"},"24:5000:2387":{"crate_id":24,"path":["syn","derive","DataUnion"],"kind":"struct"},"6:5581:7597":{"crate_id":6,"path":["libc","unix","linux_like","linux","af_alg_iv"],"kind":"struct"},"1:1968:10672":{"crate_id":1,"path":["std","error","Indented"],"kind":"struct"},"6:6435:7687":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__exit_status"],"kind":"struct"},"16:2528:6576":{"crate_id":16,"path":["gimli","common","DebugLineStrOffset"],"kind":"struct"},"2:45273:8382":{"crate_id":2,"path":["core","core_arch","simd","i32x2"],"kind":"struct"},"24:1114:3186":{"crate_id":24,"path":["syn","generics","TypeGenerics"],"kind":"struct"},"2:11155:16070":{"crate_id":2,"path":["core","slice","iter","SplitNMut"],"kind":"struct"},"17:12887:8751":{"crate_id":17,"path":["object","read","ObjectMap"],"kind":"struct"},"6:4909:7330":{"crate_id":6,"path":["libc","unix","linux_like","linux","sembuf"],"kind":"struct"},"16:2355:6563":{"crate_id":16,"path":["gimli","common","LineEncoding"],"kind":"struct"},"24:5492:2788":{"crate_id":24,"path":["syn","generics","TraitBoundModifier"],"kind":"enum"},"16:8188:23443":{"crate_id":16,"path":["gimli","read","unit","EntriesTreeIter"],"kind":"struct"},"2:39983:3643":{"crate_id":2,"path":["core","iter","adapters","copied","Copied"],"kind":"struct"},"24:1086:37297":{"crate_id":24,"path":["syn","generics","TypeParamsMut"],"kind":"struct"},"17:13972:5671":{"crate_id":17,"path":["object","macho","Dylib"],"kind":"struct"},"6:5565:7592":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_user_dev"],"kind":"struct"},"24:1732:27785":{"crate_id":24,"path":["syn","parse","discouraged","Speculative"],"kind":"trait"},"17:11743:8730":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSubsubsection"],"kind":"struct"},"6:7452:7959":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_fpxreg"],"kind":"struct"},"5:1519:8909":{"crate_id":5,"path":["alloc","collections","btree","map","Keys"],"kind":"struct"},"1:6414:220":{"crate_id":1,"path":["std","sync","mpmc","Receiver"],"kind":"struct"},"16:3614:6620":{"crate_id":16,"path":["gimli","arch","X86"],"kind":"struct"},"24:4680:3866":{"crate_id":24,"path":["syn","token","Pound"],"kind":"struct"},"2:10701:239":{"crate_id":2,"path":["core","slice","index","SliceIndex"],"kind":"trait"},"20:740:2126":{"crate_id":20,"path":["proc_macro2","fallback","Ident"],"kind":"struct"},"2:4948:33406":{"crate_id":2,"path":["core","ffi","sealed_trait","VaArgSafe"],"kind":"trait"},"2:7948:166":{"crate_id":2,"path":["core","iter","traits","collect","IntoIterator"],"kind":"trait"},"17:10877:23512":{"crate_id":17,"path":["object","read","any","DynamicRelocationIterator"],"kind":"struct"},"6:7485:7974":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user_regs_struct"],"kind":"struct"},"17:15289:6288":{"crate_id":17,"path":["object","pe","ImageTlsDirectory64"],"kind":"struct"},"17:13738:5905":{"crate_id":17,"path":["object","macho","DyldCacheImageInfo"],"kind":"struct"},"17:14131:5965":{"crate_id":17,"path":["object","macho","SymtabCommand"],"kind":"struct"},"1:945:10633":{"crate_id":1,"path":["std","collections","hash","map","RawVacantEntryMut"],"kind":"struct"},"2:3349:147":{"crate_id":2,"path":["core","ops","try_trait","FromResidual"],"kind":"trait"},"5:4504:5279":{"crate_id":5,"path":["alloc","collections","vec_deque","truncate","Dropper"],"kind":"struct"},"6:4885:7316":{"crate_id":6,"path":["libc","unix","linux_like","linux","cpu_set_t"],"kind":"struct"},"2:39091:8188":{"crate_id":2,"path":["core","array","TryFromSliceError"],"kind":"struct"},"2:13494:152":{"crate_id":2,"path":["core","alloc","global","GlobalAlloc"],"kind":"trait"},"1:621:10148":{"crate_id":1,"path":["std","backtrace","Backtrace"],"kind":"struct"},"17:16050:5803":{"crate_id":17,"path":["object","xcoff","SectionHeader64"],"kind":"struct"},"1:4039:10782":{"crate_id":1,"path":["std","os","unix","ffi","os_str","OsStrExt"],"kind":"trait"},"2:1883:4889":{"crate_id":2,"path":["core","ptr","metadata","DynMetadata"],"kind":"struct"},"17:11583:23585":{"crate_id":17,"path":["object","read","elf","hash","GnuHashTable"],"kind":"struct"},"24:4943:2140":{"crate_id":24,"path":["syn","data","Variant"],"kind":"struct"},"17:16249:6553":{"crate_id":17,"path":["object","xcoff","DwarfAux64"],"kind":"struct"},"16:5802:23421":{"crate_id":16,"path":["gimli","read","cfi","CieOffsetEncoding"],"kind":"enum"},"24:4511:3854":{"crate_id":24,"path":["syn","token","Minus"],"kind":"struct"},"2:44141:9864":{"crate_id":2,"path":["core","task","wake","RawWaker"],"kind":"struct"},"17:12557:5645":{"crate_id":17,"path":["object","read","xcoff","section","SectionTable"],"kind":"struct"},"24:1820:3138":{"crate_id":24,"path":["syn","parse","Unexpected"],"kind":"enum"},"2:21213:4503":{"crate_id":2,"path":["core","core_simd","swizzle","reverse","Reverse"],"kind":"struct"},"16:2768:6587":{"crate_id":16,"path":["gimli","common","DebugStrOffsetsBase"],"kind":"struct"},"2:43144:9017":{"crate_id":2,"path":["core","str","iter","Chars"],"kind":"struct"},"17:12289:5705":{"crate_id":17,"path":["object","read","pe","data_directory","DataDirectories"],"kind":"struct"},"24:4996:3473":{"crate_id":24,"path":["syn","derive","DataEnum"],"kind":"struct"},"20:891:2194":{"crate_id":20,"path":["proc_macro2","TokenTree"],"kind":"enum"},"2:38914:8972":{"crate_id":2,"path":["core","ops","index_range","IndexRange"],"kind":"struct"},"1:8166:5115":{"crate_id":1,"path":["std","hash","random","RandomState"],"kind":"struct"},"16:5756:23420":{"crate_id":16,"path":["gimli","read","cfi","EhHdrTableIter"],"kind":"struct"},"17:13553:5858":{"crate_id":17,"path":["object","elf","Vernaux"],"kind":"struct"},"2:11127:9026":{"crate_id":2,"path":["core","slice","iter","SplitN"],"kind":"struct"},"2:45463:8400":{"crate_id":2,"path":["core","core_arch","simd","i32x4"],"kind":"struct"},"2:46316:8481":{"crate_id":2,"path":["core","core_arch","x86","__m256d"],"kind":"struct"},"24:5242:3493":{"crate_id":24,"path":["syn","expr","ExprConst"],"kind":"struct"},"2:42027:3708":{"crate_id":2,"path":["core","fmt","num","LowerHex"],"kind":"struct"},"2:10054:2730":{"crate_id":2,"path":["core","fmt","Binary"],"kind":"trait"},"16:7497:6760":{"crate_id":16,"path":["gimli","read","op","OperationIter"],"kind":"struct"},"24:5327:3483":{"crate_id":24,"path":["syn","expr","ExprStruct"],"kind":"struct"},"1:9356:5351":{"crate_id":1,"path":["std","sync","rwlock","MappedRwLockReadGuard"],"kind":"struct"},"17:16176:6541":{"crate_id":17,"path":["object","xcoff","FunAux64"],"kind":"struct"},"6:1671:7220":{"crate_id":6,"path":["libc","unix","linux_like","arphdr"],"kind":"struct"},"2:41113:2193":{"crate_id":2,"path":["core","net","ip_addr","fmt","Span"],"kind":"struct"},"1:9260:10258":{"crate_id":1,"path":["std","sync","mpmc","list","ListToken"],"kind":"struct"},"2:44149:8359":{"crate_id":2,"path":["core","task","wake","RawWakerVTable"],"kind":"struct"},"6:8341:8080":{"crate_id":6,"path":["libc","unix","linux_like","linux","non_exhaustive","open_how"],"kind":"struct"},"24:3399:2812":{"crate_id":24,"path":["syn","token","Match"],"kind":"struct"},"2:41291:194":{"crate_id":2,"path":["core","option","Option"],"kind":"enum"},"2:10048:121":{"crate_id":2,"path":["core","fmt","macros","Debug"],"kind":"proc_derive"},"6:5266:7459":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_extended_err"],"kind":"struct"},"1:6698:10879":{"crate_id":1,"path":["std","sync","poison","TryLockError"],"kind":"enum"},"24:3144:126":{"crate_id":24,"path":["syn","token","Default"],"kind":"struct"},"1:12232:10266":{"crate_id":1,"path":["std","backtrace_rs","symbolize","gimli","Cache"],"kind":"struct"},"24:4364:3844":{"crate_id":24,"path":["syn","token","DotDot"],"kind":"struct"},"11:800:4940":{"crate_id":11,"path":["hashbrown","map","Drain"],"kind":"struct"},"24:4417:3847":{"crate_id":24,"path":["syn","token","EqEq"],"kind":"struct"},"2:2898:119":{"crate_id":2,"path":["core","marker","Copy"],"kind":"trait"},"1:3236:28435":{"crate_id":1,"path":["std","io","stdio","StdoutRaw"],"kind":"struct"},"17:12422:8746":{"crate_id":17,"path":["object","read","pe","relocation","RelocationIterator"],"kind":"struct"},"2:40106:3661":{"crate_id":2,"path":["core","iter","adapters","rev","Rev"],"kind":"struct"},"2:42774:9015":{"crate_id":2,"path":["core","slice","ascii","EscapeAscii"],"kind":"struct"},"24:1910:2201":{"crate_id":24,"path":["syn","parse_quote"],"kind":"macro"},"2:11654:16061":{"crate_id":2,"path":["core","slice","iter","ChunkBy"],"kind":"struct"},"6:7314:7904":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statfs"],"kind":"struct"},"1:9253:32877":{"crate_id":1,"path":["std","sync","mpmc","list","Position"],"kind":"struct"},"24:5343:3507":{"crate_id":24,"path":["syn","expr","ExprTuple"],"kind":"struct"},"2:43799:9062":{"crate_id":2,"path":["core","str","lossy","Utf8Chunks"],"kind":"struct"},"16:7321:4138":{"crate_id":16,"path":["gimli","read","op","Location"],"kind":"enum"},"16:6427:10225":{"crate_id":16,"path":["gimli","read","abbrev","AbbreviationsCache"],"kind":"struct"},"2:39776:16119":{"crate_id":2,"path":["core","char","EscapeDebugInner"],"kind":"enum"},"24:5347:3484":{"crate_id":24,"path":["syn","expr","ExprUnary"],"kind":"struct"},"1:909:10629":{"crate_id":1,"path":["std","collections","hash","map","ValuesMut"],"kind":"struct"},"1:4283:10813":{"crate_id":1,"path":["std","os","unix","net","ancillary","Messages"],"kind":"struct"},"2:45594:8407":{"crate_id":2,"path":["core","core_arch","simd","m32x4"],"kind":"struct"},"2:22634:10781":{"crate_id":2,"path":["core","num","error","IntErrorKind"],"kind":"enum"},"2:13272:205":{"crate_id":2,"path":["core","future","pending","Pending"],"kind":"struct"},"17:10185:5628":{"crate_id":17,"path":["object","endian","U16Bytes"],"kind":"struct"},"2:7441:33727":{"crate_id":2,"path":["core","iter","adapters","GenericShunt"],"kind":"struct"},"2:32922:5477":{"crate_id":2,"path":["core","ops","arith","SubAssign"],"kind":"trait"},"2:33409:4424":{"crate_id":2,"path":["core","ops","bit","BitOr"],"kind":"trait"},"6:6698:7815":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_ring_offset"],"kind":"struct"},"2:40490:8998":{"crate_id":2,"path":["core","iter","sources","from_coroutine","FromCoroutine"],"kind":"struct"},"2:39974:3642":{"crate_id":2,"path":["core","iter","adapters","cloned","Cloned"],"kind":"struct"},"6:1593:7165":{"crate_id":6,"path":["libc","unix","linux_like","lconv"],"kind":"struct"},"6:5336:7488":{"crate_id":6,"path":["libc","unix","linux_like","linux","seccomp_notif"],"kind":"struct"},"20:686:3692":{"crate_id":20,"path":["proc_macro2","parse","Cursor"],"kind":"struct"},"1:3278:10748":{"crate_id":1,"path":["std","io","stdio","StdinLock"],"kind":"struct"},"2:2976:4840":{"crate_id":2,"path":["core","ops","async_function","AsyncFn"],"kind":"trait"},"6:7366:7932":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stat"],"kind":"struct"},"16:5307:6650":{"crate_id":16,"path":["gimli","constants","DwOp"],"kind":"struct"},"2:1791:1298":{"crate_id":2,"path":["core","ptr"],"kind":"module"},"16:6948:6603":{"crate_id":16,"path":["gimli","read","loclists","DebugLoc"],"kind":"struct"},"2:39961:3651":{"crate_id":2,"path":["core","iter","adapters","chain","Chain"],"kind":"struct"},"24:5199:3486":{"crate_id":24,"path":["syn","expr","ExprArray"],"kind":"struct"},"6:8306:8071":{"crate_id":6,"path":["libc","unix","linux_like","linux","can_frame"],"kind":"struct"},"17:12900:5745":{"crate_id":17,"path":["object","read","ObjectMapEntry"],"kind":"struct"},"2:9199:16075":{"crate_id":2,"path":["core","panicking","assert_matches_failed","Pattern"],"kind":"struct"},"17:11467:5660":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbol"],"kind":"struct"},"1:356:4735":{"crate_id":1,"path":["std","thread","scoped","Scope"],"kind":"struct"},"2:39952:3641":{"crate_id":2,"path":["core","iter","adapters","by_ref_sized","ByRefSized"],"kind":"struct"},"17:13473:5836":{"crate_id":17,"path":["object","elf","Dyn32"],"kind":"struct"},"24:5774:2510":{"crate_id":24,"path":["syn","path","Constraint"],"kind":"struct"},"17:12516:23702":{"crate_id":17,"path":["object","read","xcoff","file","XcoffFile"],"kind":"struct"},"20:712:3573":{"crate_id":20,"path":["proc_macro2","fallback","LexError"],"kind":"struct"},"16:7052:23433":{"crate_id":16,"path":["gimli","read","loclists","LocListIter"],"kind":"struct"},"2:38963:212":{"crate_id":2,"path":["core","ops","range","RangeFrom"],"kind":"struct"},"2:3139:2677":{"crate_id":2,"path":["core","ops","drop","Drop"],"kind":"trait"},"1:5421:130":{"crate_id":1,"path":["std","path","Display"],"kind":"struct"},"11:1903:8911":{"crate_id":11,"path":["hashbrown","set","Intersection"],"kind":"struct"},"16:2748:6586":{"crate_id":16,"path":["gimli","common","DebugStrOffset"],"kind":"struct"},"1:12286:1761":{"crate_id":1,"path":["std","u128"],"kind":"primitive"},"1:7915:4737":{"crate_id":1,"path":["std","thread","local","AccessError"],"kind":"struct"},"2:38910:2737":{"crate_id":2,"path":["core","ops","index","Index"],"kind":"trait"},"1:8196:3692":{"crate_id":1,"path":["std","io","cursor","Cursor"],"kind":"struct"},"17:11799:23650":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCacheImageIterator"],"kind":"struct"},"5:7510:3610":{"crate_id":5,"path":["alloc","collections","TryReserveError"],"kind":"struct"},"24:3467:3821":{"crate_id":24,"path":["syn","token","Override"],"kind":"struct"},"5:7385:5264":{"crate_id":5,"path":["alloc","collections","binary_heap","DrainSorted"],"kind":"struct"},"24:5899:3536":{"crate_id":24,"path":["syn","ty","TypeImplTrait"],"kind":"struct"},"16:7306:36865":{"crate_id":16,"path":["gimli","read","op","OperationEvaluationResult"],"kind":"enum"},"2:4986:10752":{"crate_id":2,"path":["core","io","borrowed_buf","BorrowedBuf"],"kind":"struct"},"17:11153:23511":{"crate_id":17,"path":["object","read","coff","symbol","SymbolIterator"],"kind":"struct"},"1:362:4736":{"crate_id":1,"path":["std","thread","scoped","ScopedJoinHandle"],"kind":"struct"},"17:15092:6244":{"crate_id":17,"path":["object","pe","ImageSymbolBytes"],"kind":"struct"},"17:12454:8748":{"crate_id":17,"path":["object","read","pe","resource","ResourceDirectoryTable"],"kind":"struct"},"17:14212:6000":{"crate_id":17,"path":["object","macho","DylibModule64"],"kind":"struct"},"2:45136:8370":{"crate_id":2,"path":["core","core_arch","simd","i8x4"],"kind":"struct"},"20:836:2126":{"crate_id":20,"path":["proc_macro2","imp","Ident"],"kind":"enum"},"24:4743:3870":{"crate_id":24,"path":["syn","token","Shl"],"kind":"struct"},"16:3669:5534":{"crate_id":16,"path":["gimli","arch","X86_64"],"kind":"struct"},"2:37672:5484":{"crate_id":2,"path":["core","ops","bit","ShlAssign"],"kind":"trait"},"1:6766:5349":{"crate_id":1,"path":["std","sync","reentrant_lock","ReentrantLockGuard"],"kind":"struct"},"17:12408:5712":{"crate_id":17,"path":["object","read","pe","relocation","RelocationBlockIterator"],"kind":"struct"},"1:3836:10764":{"crate_id":1,"path":["std","net","tcp","TcpListener"],"kind":"struct"},"6:6491:7713":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","mallinfo"],"kind":"struct"},"2:12630:16076":{"crate_id":2,"path":["core","str","pattern","ReverseSearcher"],"kind":"trait"},"6:7984:8043":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","not_x32","statvfs"],"kind":"struct"},"2:44162:11004":{"crate_id":2,"path":["core","task","wake","ContextBuilder"],"kind":"struct"},"21:458:5241":{"crate_id":21,"path":["proc_macro","bridge","server","RunningSameThreadGuard"],"kind":"struct"},"1:7914:10712":{"crate_id":1,"path":["std","sealed","Sealed"],"kind":"trait"},"17:12530:23695":{"crate_id":17,"path":["object","read","xcoff","section","XcoffSectionIterator"],"kind":"struct"},"21:1126:208":{"crate_id":21,"path":["proc_macro","bridge","client","ProcMacro"],"kind":"enum"},"2:41876:98":{"crate_id":2,"path":["core","sync","atomic","AtomicUsize"],"kind":"struct"},"1:3326:10749":{"crate_id":1,"path":["std","io","stdio","Stdout"],"kind":"struct"},"2:22206:10712":{"crate_id":2,"path":["core","core_simd","simd","ptr","sealed","Sealed"],"kind":"trait"},"16:4771:6638":{"crate_id":16,"path":["gimli","constants","DwId"],"kind":"struct"},"1:8733:8572":{"crate_id":1,"path":["std","path","PrefixComponent"],"kind":"struct"},"1:11471:32870":{"crate_id":1,"path":["std","sys","thread_local","fast_local","Key"],"kind":"struct"},"2:32981:5478":{"crate_id":2,"path":["core","ops","arith","MulAssign"],"kind":"trait"},"2:10045:121":{"crate_id":2,"path":["core","fmt","Debug"],"kind":"trait"},"5:4076:4940":{"crate_id":5,"path":["alloc","collections","vec_deque","drain","Drain"],"kind":"struct"},"6:6379:7647":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","statx"],"kind":"struct"},"11:673:3554":{"crate_id":11,"path":["hashbrown","map","Iter"],"kind":"struct"},"16:2854:6591":{"crate_id":16,"path":["gimli","common","DebugFrameOffset"],"kind":"struct"},"2:4489:3720":{"crate_id":2,"path":["core","cell","Ref"],"kind":"struct"},"16:7061:6720":{"crate_id":16,"path":["gimli","read","loclists","LocationListEntry"],"kind":"struct"},"2:12311:9020":{"crate_id":2,"path":["core","str","iter","SplitInternal"],"kind":"struct"},"11:328:8906":{"crate_id":11,"path":["hashbrown","raw","RawIter"],"kind":"struct"},"21:367:4965":{"crate_id":21,"path":["proc_macro","bridge","rpc","PanicMessage"],"kind":"enum"},"2:46281:8478":{"crate_id":2,"path":["core","core_arch","x86","__m128d"],"kind":"struct"},"17:14246:6003":{"crate_id":17,"path":["object","macho","TwolevelHintsCommand"],"kind":"struct"},"17:12056:5698":{"crate_id":17,"path":["object","read","macho","segment","MachOSegmentInternal"],"kind":"struct"},"17:15058:6232":{"crate_id":17,"path":["object","pe","ImageSectionHeader"],"kind":"struct"},"1:4695:10835":{"crate_id":1,"path":["std","os","unix","thread","JoinHandleExt"],"kind":"trait"},"1:8567:8559":{"crate_id":1,"path":["std","os","unix","net","ucred","UCred"],"kind":"struct"},"2:45235:8380":{"crate_id":2,"path":["core","core_arch","simd","i8x8"],"kind":"struct"},"6:7561:8022":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","shmid_ds"],"kind":"struct"},"17:12300:23687":{"crate_id":17,"path":["object","read","pe","export","ExportTarget"],"kind":"enum"},"1:7933:4724":{"crate_id":1,"path":["std","thread","Builder"],"kind":"struct"},"17:15168:6261":{"crate_id":17,"path":["object","pe","ImageAuxSymbolWeak"],"kind":"struct"},"6:5445:7542":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_rcvinfo"],"kind":"struct"},"17:10954:23524":{"crate_id":17,"path":["object","read","archive","ArchiveKind"],"kind":"enum"},"24:4905:3457":{"crate_id":24,"path":["syn","attr","Attribute"],"kind":"struct"},"2:45104:8366":{"crate_id":2,"path":["core","core_arch","simd","u8x4"],"kind":"struct"},"17:12478:5717":{"crate_id":17,"path":["object","read","pe","resource","ResourceName"],"kind":"struct"},"2:41490:3553":{"crate_id":2,"path":["core","result","IntoIter"],"kind":"struct"},"17:13797:5919":{"crate_id":17,"path":["object","macho","MachHeader32"],"kind":"struct"},"1:640:10620":{"crate_id":1,"path":["std","backtrace","BacktraceSymbol"],"kind":"struct"},"16:5831:8768":{"crate_id":16,"path":["gimli","read","cfi","SectionBaseAddresses"],"kind":"struct"},"16:3810:6622":{"crate_id":16,"path":["gimli","constants","DwSectV2"],"kind":"struct"},"1:10819:10840":{"crate_id":1,"path":["std","sys","pal","unix","fd","FileDesc"],"kind":"struct"},"5:3743:5253":{"crate_id":5,"path":["alloc","collections","linked_list","drop","DropGuard"],"kind":"struct"},"2:10498:5316":{"crate_id":2,"path":["core","slice","sort","merge_sort","BufGuard"],"kind":"struct"},"2:45089:8365":{"crate_id":2,"path":["core","core_arch","simd","i8x2"],"kind":"struct"},"17:16105:6520":{"crate_id":17,"path":["object","xcoff","FileAux32"],"kind":"struct"},"1:8420:8555":{"crate_id":1,"path":["std","io","IoSlice"],"kind":"struct"},"24:2063:10555":{"crate_id":24,"path":["syn","path","printing","span","QSelfDelimiters"],"kind":"struct"},"2:4:1218":{"crate_id":2,"path":["core","panic"],"kind":"macro"},"24:2232:3551":{"crate_id":24,"path":["syn","punctuated","PairsMut"],"kind":"struct"},"2:41640:94":{"crate_id":2,"path":["core","sync","atomic","AtomicU16"],"kind":"struct"},"2:22541:33610":{"crate_id":2,"path":["core","num","flt2dec","decoder","FullDecoded"],"kind":"enum"},"17:1207:23541":{"crate_id":17,"path":["object","read","coff","relocation","CoffRelocationIterator"],"kind":"struct"},"24:5576:2334":{"crate_id":24,"path":["syn","lit","LitStr"],"kind":"struct"},"2:33040:5479":{"crate_id":2,"path":["core","ops","arith","DivAssign"],"kind":"trait"},"1:11578:8603":{"crate_id":1,"path":["std","sys_common","wtf8","CodePoint"],"kind":"struct"},"24:3484:3822":{"crate_id":24,"path":["syn","token","Priv"],"kind":"struct"},"5:7346:4850":{"crate_id":5,"path":["alloc","alloc","Global"],"kind":"struct"},"17:15748:6433":{"crate_id":17,"path":["object","pe","ImageDebugMisc"],"kind":"struct"},"24:3365:3817":{"crate_id":24,"path":["syn","token","Loop"],"kind":"struct"},"16:6606:8842":{"crate_id":16,"path":["gimli","read","index","UnitIndexSectionIterator"],"kind":"struct"},"17:15635:6402":{"crate_id":17,"path":["object","pe","ImageAlphaRuntimeFunctionEntry"],"kind":"struct"},"17:12695:23696":{"crate_id":17,"path":["object","read","xcoff","segment","XcoffSegment"],"kind":"struct"},"1:5863:10874":{"crate_id":1,"path":["std","sync","barrier","Barrier"],"kind":"struct"},"2:43192:8949":{"crate_id":2,"path":["core","str","iter","RSplit"],"kind":"struct"},"20:777:3576":{"crate_id":20,"path":["proc_macro2","extra","DelimSpan"],"kind":"struct"},"6:5031:7387":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_ff_upload"],"kind":"struct"},"6:4864:7308":{"crate_id":6,"path":["libc","unix","linux_like","linux","itimerspec"],"kind":"struct"},"16:7539:6607":{"crate_id":16,"path":["gimli","read","pubnames","DebugPubNames"],"kind":"struct"},"2:7986:131":{"crate_id":2,"path":["core","iter","traits","double_ended","DoubleEndedIterator"],"kind":"trait"},"2:2784:10675":{"crate_id":2,"path":["core","error","Request"],"kind":"struct"},"24:4668:3865":{"crate_id":24,"path":["syn","token","PlusEq"],"kind":"struct"},"2:3361:16101":{"crate_id":2,"path":["core","ops","try_trait","NeverShortCircuit"],"kind":"struct"},"24:5437:2793":{"crate_id":24,"path":["syn","generics","LifetimeParam"],"kind":"struct"},"16:5742:8759":{"crate_id":16,"path":["gimli","read","cfi","ParsedEhFrameHdr"],"kind":"struct"},"6:7602:8037":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ucontext_t"],"kind":"struct"},"2:46395:8492":{"crate_id":2,"path":["core","core_arch","x86","__m256bh"],"kind":"struct"},"17:15078:6240":{"crate_id":17,"path":["object","pe","ImageSymbol"],"kind":"struct"},"17:11051:23546":{"crate_id":17,"path":["object","read","coff","file","CoffCommon"],"kind":"struct"},"17:13959:5943":{"crate_id":17,"path":["object","macho","FvmlibCommand"],"kind":"struct"},"2:42540:157":{"crate_id":2,"path":["core","hash","sip","Hasher"],"kind":"struct"},"2:46365:8490":{"crate_id":2,"path":["core","core_arch","x86","__m512d"],"kind":"struct"},"17:10612:23508":{"crate_id":17,"path":["object","read","any","SectionIterator"],"kind":"struct"},"1:2269:139":{"crate_id":1,"path":["std","fs","File"],"kind":"struct"},"1:12285:1779":{"crate_id":1,"path":["std","u64"],"kind":"primitive"},"17:15418:6325":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation32"],"kind":"struct"},"24:3280:3812":{"crate_id":24,"path":["syn","token","For"],"kind":"struct"},"17:11574:8914":{"crate_id":17,"path":["object","read","elf","hash","HashTable"],"kind":"struct"},"1:1040:8880":{"crate_id":1,"path":["std","collections","hash","map","Entry"],"kind":"enum"},"11:710:10250":{"crate_id":11,"path":["hashbrown","map","IntoKeys"],"kind":"struct"},"2:12624:8707":{"crate_id":2,"path":["core","str","pattern","Searcher"],"kind":"trait"},"6:5083:7405":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Ehdr"],"kind":"struct"},"6:5361:7494":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlmsghdr"],"kind":"struct"},"1:9265:2120":{"crate_id":1,"path":["std","sync","mpmc","select","Token"],"kind":"struct"},"1:10412:30477":{"crate_id":1,"path":["std","sys","pal","unix","process","process_common","Argv"],"kind":"struct"},"1:849:3558":{"crate_id":1,"path":["std","collections","hash","map","IterMut"],"kind":"struct"},"2:40280:3665":{"crate_id":2,"path":["core","iter","adapters","take","Take"],"kind":"struct"},"5:6054:16445":{"crate_id":5,"path":["alloc","sync","ArcInner"],"kind":"struct"},"2:3128:3728":{"crate_id":2,"path":["core","ops","deref","DerefMut"],"kind":"trait"},"17:10251:5630":{"crate_id":17,"path":["object","endian","U64Bytes"],"kind":"struct"},"24:5713:3525":{"crate_id":24,"path":["syn","op","UnOp"],"kind":"enum"},"6:517:7062":{"crate_id":6,"path":["libc","unix","ipv6_mreq"],"kind":"struct"},"17:15313:6295":{"crate_id":17,"path":["object","pe","ImageImportDescriptor"],"kind":"struct"},"17:15822:6448":{"crate_id":17,"path":["object","pe","ImportObjectHeader"],"kind":"struct"},"2:41915:10255":{"crate_id":2,"path":["core","sync","exclusive","Exclusive"],"kind":"struct"},"2:46144:8471":{"crate_id":2,"path":["core","core_arch","simd","u32x16"],"kind":"struct"},"2:42570:9013":{"crate_id":2,"path":["core","hash","sip","Sip24Rounds"],"kind":"struct"},"6:1526:7121":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_in6"],"kind":"struct"},"2:42923:34546":{"crate_id":2,"path":["core","slice","iter","GenericSplitN"],"kind":"struct"},"2:39788:8981":{"crate_id":2,"path":["core","char","ToLowercase"],"kind":"struct"},"2:21269:34834":{"crate_id":2,"path":["core","core_simd","swizzle","deinterleave","Odd"],"kind":"struct"},"17:11392:23564":{"crate_id":17,"path":["object","read","elf","section","ElfSectionIterator"],"kind":"struct"},"6:5477:7562":{"crate_id":6,"path":["libc","unix","linux_like","linux","rlimit64"],"kind":"struct"},"6:491:7042":{"crate_id":6,"path":["libc","unix","rlimit"],"kind":"struct"},"2:43133:9016":{"crate_id":2,"path":["core","str","error","ParseBoolError"],"kind":"struct"},"24:5263:3497":{"crate_id":24,"path":["syn","expr","ExprIf"],"kind":"struct"},"24:4250:3837":{"crate_id":24,"path":["syn","token","At"],"kind":"struct"},"1:11854:9110":{"crate_id":1,"path":["std","backtrace_rs","backtrace","libunwind","Frame"],"kind":"enum"},"2:37562:5483":{"crate_id":2,"path":["core","ops","bit","BitOrAssign"],"kind":"trait"},"6:5390:7509":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_ifru_map"],"kind":"struct"},"2:45738:8429":{"crate_id":2,"path":["core","core_arch","simd","i8x32"],"kind":"struct"},"2:42755:8349":{"crate_id":2,"path":["core","slice","sort","TimSortRun"],"kind":"struct"},"24:5267:3478":{"crate_id":24,"path":["syn","expr","ExprIndex"],"kind":"struct"},"21:2237:3576":{"crate_id":21,"path":["proc_macro","bridge","DelimSpan"],"kind":"struct"},"17:15720:6424":{"crate_id":17,"path":["object","pe","ImageDebugDirectory"],"kind":"struct"},"1:3239:28294":{"crate_id":1,"path":["std","io","stdio","StderrRaw"],"kind":"struct"},"24:1070:37298":{"crate_id":24,"path":["syn","generics","LifetimesMut"],"kind":"struct"},"17:12089:5700":{"crate_id":17,"path":["object","read","macho","section","MachOSectionInternal"],"kind":"struct"},"2:2301:649":{"crate_id":2,"path":["core","ptr","drop_in_place"],"kind":"function"},"6:6721:7824":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_mmap_offsets_v1"],"kind":"struct"},"2:40528:3626":{"crate_id":2,"path":["core","iter","sources","repeat_n","RepeatN"],"kind":"struct"},"2:2938:4487":{"crate_id":2,"path":["core","marker","Freeze"],"kind":"trait"},"17:13424:5826":{"crate_id":17,"path":["object","elf","Rela64"],"kind":"struct"},"21:2633:3553":{"crate_id":21,"path":["proc_macro","token_stream","IntoIter"],"kind":"struct"},"17:14599:6064":{"crate_id":17,"path":["object","macho","ScatteredRelocationInfo"],"kind":"struct"},"1:1578:3553":{"crate_id":1,"path":["std","collections","hash","set","IntoIter"],"kind":"struct"},"2:8413:3635":{"crate_id":2,"path":["core","iter","traits","marker","TrustedStep"],"kind":"trait"},"24:5908:3540":{"crate_id":24,"path":["syn","ty","TypeParen"],"kind":"struct"},"16:6802:8849":{"crate_id":16,"path":["gimli","read","line","LineSequence"],"kind":"struct"},"2:43342:9030":{"crate_id":2,"path":["core","str","iter","RMatchIndices"],"kind":"struct"},"2:13549:4849":{"crate_id":2,"path":["core","alloc","Allocator"],"kind":"trait"},"2:46070:8469":{"crate_id":2,"path":["core","core_arch","simd","u16x32"],"kind":"struct"},"6:497:7045":{"crate_id":6,"path":["libc","unix","rusage"],"kind":"struct"},"6:4932:7338":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_absinfo"],"kind":"struct"},"17:15957:6469":{"crate_id":17,"path":["object","xcoff","AuxHeader32"],"kind":"struct"},"23:150:4162":{"crate_id":23,"path":["quote","__private","ThereIsNoIteratorInRepetition"],"kind":"struct"},"24:4916:2327":{"crate_id":24,"path":["syn","attr","Meta"],"kind":"enum"},"1:4091:10786":{"crate_id":1,"path":["std","os","unix","fs","OpenOptionsExt"],"kind":"trait"},"1:5020:10837":{"crate_id":1,"path":["std","os","net","linux_ext","tcp","TcpStreamExt"],"kind":"trait"},"1:9165:10883":{"crate_id":1,"path":["std","sync","mpsc","RecvTimeoutError"],"kind":"enum"},"16:6560:6596":{"crate_id":16,"path":["gimli","read","index","DebugCuIndex"],"kind":"struct"},"6:5515:7572":{"crate_id":6,"path":["libc","unix","linux_like","linux","tls12_crypto_info_chacha20_poly1305"],"kind":"struct"},"2:7663:3617":{"crate_id":2,"path":["core","iter","sources","empty","Empty"],"kind":"struct"},"1:8542:9085":{"crate_id":1,"path":["std","os","unix","net","ancillary","SocketCred"],"kind":"struct"},"1:11751:10764":{"crate_id":1,"path":["std","sys_common","net","TcpListener"],"kind":"struct"},"1:9078:8579":{"crate_id":1,"path":["std","process","ExitStatusError"],"kind":"struct"},"11:883:10634":{"crate_id":11,"path":["hashbrown","map","RawEntryBuilder"],"kind":"struct"},"16:7618:6761":{"crate_id":16,"path":["gimli","read","rnglists","RangeLists"],"kind":"struct"},"1:4083:10785":{"crate_id":1,"path":["std","os","unix","fs","PermissionsExt"],"kind":"trait"},"23:407:4302":{"crate_id":23,"path":["quote","__private","RepInterp"],"kind":"struct"},"2:41031:171":{"crate_id":2,"path":["core","net","ip_addr","IpAddr"],"kind":"enum"},"20:513:3573":{"crate_id":20,"path":["proc_macro2","LexError"],"kind":"struct"},"2:10019:144":{"crate_id":2,"path":["core","fmt","Formatter"],"kind":"struct"},"20:808:36941":{"crate_id":20,"path":["proc_macro2","imp","TokenTreeIter"],"kind":"enum"},"17:16223:6549":{"crate_id":17,"path":["object","xcoff","StatAux"],"kind":"struct"},"6:4897:7321":{"crate_id":6,"path":["libc","unix","linux_like","linux","msginfo"],"kind":"struct"},"1:9351:235":{"crate_id":1,"path":["std","sync","rwlock","RwLockWriteGuard"],"kind":"struct"},"9:447:22405":{"crate_id":9,"path":["miniz_oxide","MZError"],"kind":"enum"},"23:11:3584":{"crate_id":23,"path":["quote","ext","TokenStreamExt"],"kind":"trait"},"1:3011:226":{"crate_id":1,"path":["std","io","error","Result"],"kind":"type_alias"},"17:13325:5810":{"crate_id":17,"path":["object","elf","Sym32"],"kind":"struct"},"24:2957:3800":{"crate_id":24,"path":["syn","token","Abstract"],"kind":"struct"},"17:15151:6256":{"crate_id":17,"path":["object","pe","ImageAuxSymbolFunctionBeginEnd"],"kind":"struct"},"2:3344:253":{"crate_id":2,"path":["core","ops","try_trait","Try"],"kind":"trait"},"17:9984:23504":{"crate_id":17,"path":["object","common","RelocationEncoding"],"kind":"enum"},"24:5759:2794":{"crate_id":24,"path":["syn","path","AngleBracketedGenericArguments"],"kind":"struct"},"24:771:37104":{"crate_id":24,"path":["syn","expr","precedence","Precedence"],"kind":"enum"},"24:3314:3814":{"crate_id":24,"path":["syn","token","Impl"],"kind":"struct"},"2:11141:9027":{"crate_id":2,"path":["core","slice","iter","RSplitN"],"kind":"struct"},"17:14788:6117":{"crate_id":17,"path":["object","pe","ImageVxdHeader"],"kind":"struct"},"2:31780:237":{"crate_id":2,"path":["core","marker","Send"],"kind":"trait"},"5:672:10141":{"crate_id":5,"path":["alloc","boxed","from","StringError"],"kind":"struct"},"18:548:153":{"crate_id":18,"path":["memchr","memmem","rabinkarp","Hash"],"kind":"struct"},"17:12353:8742":{"crate_id":17,"path":["object","read","pe","import","ImportDescriptorIterator"],"kind":"struct"},"1:6477:186":{"crate_id":1,"path":["std","sync","mutex","Mutex"],"kind":"struct"},"17:11661:8724":{"crate_id":17,"path":["object","read","elf","version","VerneedIterator"],"kind":"struct"},"24:5586:3521":{"crate_id":24,"path":["syn","lit","LitFloat"],"kind":"struct"},"16:6895:6706":{"crate_id":16,"path":["gimli","read","line","FileEntry"],"kind":"struct"},"1:1072:10140":{"crate_id":1,"path":["std","collections","hash","map","OccupiedError"],"kind":"struct"},"5:3031:8086":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Immut"],"kind":"struct"},"17:11142:5653":{"crate_id":17,"path":["object","read","coff","symbol","SymbolTable"],"kind":"struct"},"17:15734:6426":{"crate_id":17,"path":["object","pe","ImageCoffSymbolsHeader"],"kind":"struct"},"24:5882:3533":{"crate_id":24,"path":["syn","ty","TypeArray"],"kind":"struct"},"1:10234:10654":{"crate_id":1,"path":["std","sys","pal","unix","os","SplitPaths"],"kind":"struct"},"17:11634:8722":{"crate_id":17,"path":["object","read","elf","version","VerdefIterator"],"kind":"struct"},"24:4755:3871":{"crate_id":24,"path":["syn","token","ShlEq"],"kind":"struct"},"1:9346:234":{"crate_id":1,"path":["std","sync","rwlock","RwLockReadGuard"],"kind":"struct"},"17:13252:5793":{"crate_id":17,"path":["object","elf","SectionHeader32"],"kind":"struct"},"5:6545:4940":{"crate_id":5,"path":["alloc","vec","drain","Drain"],"kind":"struct"},"5:1578:10637":{"crate_id":5,"path":["alloc","collections","btree","map","RangeMut"],"kind":"struct"},"24:5535:2467":{"crate_id":24,"path":["syn","lit","Lit"],"kind":"enum"},"17:15426:6327":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation64"],"kind":"struct"},"5:6591:5253":{"crate_id":5,"path":["alloc","vec","drain","drop","DropGuard"],"kind":"struct"},"2:31837:3746":{"crate_id":2,"path":["core","marker","Unpin"],"kind":"trait"},"24:5294:3480":{"crate_id":24,"path":["syn","expr","ExprMethodCall"],"kind":"struct"},"16:2708:6584":{"crate_id":16,"path":["gimli","common","DebugRngListsBase"],"kind":"struct"},"16:5863:23422":{"crate_id":16,"path":["gimli","read","cfi","CieOrFde"],"kind":"enum"},"1:8180:28422":{"crate_id":1,"path":["std","io","buffered","linewritershim","LineWriterShim"],"kind":"struct"},"24:3450:3820":{"crate_id":24,"path":["syn","token","Mut"],"kind":"struct"},"6:6460:7692":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","msghdr"],"kind":"struct"},"11:837:10630":{"crate_id":11,"path":["hashbrown","map","RawEntryBuilderMut"],"kind":"struct"},"1:4847:10800":{"crate_id":1,"path":["std","os","fd","raw","FromRawFd"],"kind":"trait"},"2:21252:34840":{"crate_id":2,"path":["core","core_simd","swizzle","interleave","Hi"],"kind":"struct"},"11:700:3553":{"crate_id":11,"path":["hashbrown","map","IntoIter"],"kind":"struct"},"17:14449:6040":{"crate_id":17,"path":["object","macho","SymsegCommand"],"kind":"struct"},"16:6749:8848":{"crate_id":16,"path":["gimli","read","line","LineInstructions"],"kind":"struct"},"16:4531:6631":{"crate_id":16,"path":["gimli","constants","DwDs"],"kind":"struct"},"24:2379:3560":{"crate_id":24,"path":["syn","punctuated","PrivateIterMut"],"kind":"struct"},"11:687:3558":{"crate_id":11,"path":["hashbrown","map","IterMut"],"kind":"struct"},"17:597:2207":{"crate_id":17,"path":["object","read","any","Symbol"],"kind":"struct"},"7:78:22398":{"crate_id":7,"path":["unwind","libunwind","_Unwind_Action"],"kind":"enum"},"2:21477:10914":{"crate_id":2,"path":["core","core_simd","masks","MaskElement"],"kind":"trait"},"5:0:307":{"crate_id":5,"path":["alloc"],"kind":"module"},"16:7111:8878":{"crate_id":16,"path":["gimli","read","lookup","PubStuffHeader"],"kind":"struct"},"1:4270:10812":{"crate_id":1,"path":["std","os","unix","net","ancillary","AncillaryData"],"kind":"enum"},"6:5344:7489":{"crate_id":6,"path":["libc","unix","linux_like","linux","seccomp_notif_resp"],"kind":"struct"},"1:7986:10624":{"crate_id":1,"path":["std","backtrace","BacktraceStatus"],"kind":"enum"},"24:3297:3813":{"crate_id":24,"path":["syn","token","If"],"kind":"struct"},"2:21354:10913":{"crate_id":2,"path":["core","core_simd","lane_count","LaneCount"],"kind":"struct"},"17:15400:6321":{"crate_id":17,"path":["object","pe","ImageLoadConfigCodeIntegrity"],"kind":"struct"},"2:7377:3650":{"crate_id":2,"path":["core","iter","adapters","zip","TrustedRandomAccessNoCoerce"],"kind":"trait"},"5:3039:27809":{"crate_id":5,"path":["alloc","collections","btree","node","marker","ValMut"],"kind":"struct"},"6:5200:7426":{"crate_id":6,"path":["libc","unix","linux_like","linux","posix_spawnattr_t"],"kind":"struct"},"2:32443:5475":{"crate_id":2,"path":["core","ops","arith","Div"],"kind":"trait"},"2:2455:201":{"crate_id":2,"path":["core","cmp","PartialEq"],"kind":"trait"},"24:5919:3542":{"crate_id":24,"path":["syn","ty","TypeReference"],"kind":"struct"},"2:9848:3698":{"crate_id":2,"path":["core","fmt","builders","FormatterFn"],"kind":"struct"},"2:12843:121":{"crate_id":2,"path":["core","str","lossy","Debug"],"kind":"struct"},"5:1497:3553":{"crate_id":5,"path":["alloc","collections","btree","map","IntoIter"],"kind":"struct"},"11:430:36829":{"crate_id":11,"path":["hashbrown","raw","RawIterHash"],"kind":"struct"},"17:12213:23685":{"crate_id":17,"path":["object","read","pe","file","PeComdatSectionIterator"],"kind":"struct"},"2:12635:16074":{"crate_id":2,"path":["core","str","pattern","DoubleEndedSearcher"],"kind":"trait"},"6:1699:7233":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_storage"],"kind":"struct"},"2:13459:8956":{"crate_id":2,"path":["core","task","wake","LocalWaker"],"kind":"struct"},"2:44090:219":{"crate_id":2,"path":["core","future","ready","Ready"],"kind":"struct"},"1:10654:4723":{"crate_id":1,"path":["std","sys","pal","unix","thread","Thread"],"kind":"struct"},"24:3535:228":{"crate_id":24,"path":["syn","token","Return"],"kind":"struct"},"15:394:22524":{"crate_id":15,"path":["addr2line","DebugFile"],"kind":"enum"},"11:1107:22484":{"crate_id":11,"path":["hashbrown","map","OccupiedEntryRef"],"kind":"struct"},"16:7799:6600":{"crate_id":16,"path":["gimli","read","unit","DebugInfo"],"kind":"struct"},"16:7741:6612":{"crate_id":16,"path":["gimli","read","str","DebugStrOffsets"],"kind":"struct"},"16:5415:6652":{"crate_id":16,"path":["gimli","read","util","sealed","CapacityFull"],"kind":"struct"},"24:1774:3565":{"crate_id":24,"path":["syn","parse","Parse"],"kind":"trait"},"2:43012:16063":{"crate_id":2,"path":["core","slice","iter","ChunksExactMut"],"kind":"struct"},"24:1094:37301":{"crate_id":24,"path":["syn","generics","ConstParams"],"kind":"struct"},"6:6562:7753":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","timex"],"kind":"struct"},"5:6945:4946":{"crate_id":5,"path":["alloc","vec","in_place_drop","InPlaceDstDataSrcBufDrop"],"kind":"struct"},"5:1537:10629":{"crate_id":5,"path":["alloc","collections","btree","map","ValuesMut"],"kind":"struct"},"17:14414:6028":{"crate_id":17,"path":["object","macho","DyldInfoCommand"],"kind":"struct"},"6:5160:7411":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Shdr"],"kind":"struct"},"5:7107:5302":{"crate_id":5,"path":["alloc","vec","dedup_by","FillGapOnDrop"],"kind":"struct"},"6:6478:7704":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","termios"],"kind":"struct"},"6:586:7099":{"crate_id":6,"path":["libc","unix","protoent"],"kind":"struct"},"6:6471:7700":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","cmsghdr"],"kind":"struct"},"24:2940:3879":{"crate_id":24,"path":["syn","token","Underscore"],"kind":"struct"},"2:40504:3620":{"crate_id":2,"path":["core","iter","sources","once","Once"],"kind":"struct"},"1:12288:1845":{"crate_id":1,"path":["std","usize"],"kind":"primitive"},"2:41405:4139":{"crate_id":2,"path":["core","panic","panic_info","PanicInfo"],"kind":"struct"},"2:38830:16100":{"crate_id":2,"path":["core","ops","control_flow","ControlFlow"],"kind":"enum"},"2:2460:135":{"crate_id":2,"path":["core","cmp","Eq"],"kind":"trait"},"2:30647:4503":{"crate_id":2,"path":["core","cmp","Reverse"],"kind":"struct"},"2:41271:8330":{"crate_id":2,"path":["core","net","socket_addr","SocketAddrV6"],"kind":"struct"},"17:11493:23572":{"crate_id":17,"path":["object","read","elf","relocation","RelocationSections"],"kind":"struct"},"2:8407:3634":{"crate_id":2,"path":["core","iter","traits","marker","TrustedLen"],"kind":"trait"},"24:642:226":{"crate_id":24,"path":["syn","error","Result"],"kind":"type_alias"},"16:7570:6608":{"crate_id":16,"path":["gimli","read","pubtypes","DebugPubTypes"],"kind":"struct"},"1:11176:8590":{"crate_id":1,"path":["std","sys","pal","unix","time","SystemTime"],"kind":"struct"},"1:9232:27823":{"crate_id":1,"path":["std","sync","mpmc","error","SendTimeoutError"],"kind":"enum"},"6:5528:7573":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_nl"],"kind":"struct"},"14:214:8900":{"crate_id":14,"path":["rustc_demangle","TryDemangleError"],"kind":"struct"},"1:8488:10763":{"crate_id":1,"path":["std","net","tcp","Incoming"],"kind":"struct"},"1:859:3553":{"crate_id":1,"path":["std","collections","hash","map","IntoIter"],"kind":"struct"},"2:2399:103":{"crate_id":2,"path":["core","borrow","Borrow"],"kind":"trait"},"2:43457:9037":{"crate_id":2,"path":["core","str","iter","SplitAsciiWhitespace"],"kind":"struct"},"20:746:2813":{"crate_id":20,"path":["proc_macro2","fallback","Literal"],"kind":"struct"},"6:7429:7952":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statvfs64"],"kind":"struct"},"24:3263:141":{"crate_id":24,"path":["syn","token","Fn"],"kind":"struct"},"6:4824:7275":{"crate_id":6,"path":["libc","unix","linux_like","linux","dqblk"],"kind":"struct"},"1:1054:10635":{"crate_id":1,"path":["std","collections","hash","map","OccupiedEntry"],"kind":"struct"},"5:7363:8927":{"crate_id":5,"path":["alloc","collections","binary_heap","IntoIterSorted"],"kind":"struct"},"17:11510:23560":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdat"],"kind":"struct"},"17:10439:5636":{"crate_id":17,"path":["object","read","util","StringTable"],"kind":"struct"},"24:4441:3849":{"crate_id":24,"path":["syn","token","Ge"],"kind":"struct"},"2:46327:8482":{"crate_id":2,"path":["core","core_arch","x86","__m512i"],"kind":"struct"},"16:6300:23426":{"crate_id":16,"path":["gimli","read","dwarf","DwarfPackage"],"kind":"struct"},"16:5995:8784":{"crate_id":16,"path":["gimli","read","cfi","FrameDescriptionEntry"],"kind":"struct"},"5:1547:10250":{"crate_id":5,"path":["alloc","collections","btree","map","IntoKeys"],"kind":"struct"},"24:649:5460":{"crate_id":24,"path":["syn","error","SpanRange"],"kind":"struct"},"1:11380:2497":{"crate_id":1,"path":["std","sys","os_str","bytes","Slice"],"kind":"struct"},"1:8462:3665":{"crate_id":1,"path":["std","io","Take"],"kind":"struct"},"24:1606:37102":{"crate_id":24,"path":["syn","lookahead","TokenMarker"],"kind":"enum"},"1:12269:333":{"crate_id":1,"path":["std","array"],"kind":"primitive"},"1:3371:10746":{"crate_id":1,"path":["std","io","stdio","StderrLock"],"kind":"struct"},"5:3286:36737":{"crate_id":5,"path":["alloc","collections","btree","set","IntersectionInner"],"kind":"enum"},"1:11126:8578":{"crate_id":1,"path":["std","sys","pal","unix","process","process_inner","ExitStatus"],"kind":"struct"},"17:12443:5716":{"crate_id":17,"path":["object","read","pe","resource","ResourceDirectory"],"kind":"struct"},"2:43324:9029":{"crate_id":2,"path":["core","str","iter","MatchIndices"],"kind":"struct"},"6:7389:7950":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stat64"],"kind":"struct"},"16:2838:6590":{"crate_id":16,"path":["gimli","common","DebugTypeSignature"],"kind":"struct"},"16:6927:6710":{"crate_id":16,"path":["gimli","read","line","FileEntryFormat"],"kind":"struct"},"6:5546:7584":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_alg"],"kind":"struct"},"1:9065:8578":{"crate_id":1,"path":["std","process","ExitStatus"],"kind":"struct"},"1:867:8909":{"crate_id":1,"path":["std","collections","hash","map","Keys"],"kind":"struct"},"2:42253:8335":{"crate_id":2,"path":["core","fmt","rt","Placeholder"],"kind":"struct"},"2:43396:9033":{"crate_id":2,"path":["core","str","iter","RMatches"],"kind":"struct"},"1:12271:1658":{"crate_id":1,"path":["std","str"],"kind":"primitive"},"6:5653:7631":{"crate_id":6,"path":["libc","unix","linux_like","linux","sched_attr"],"kind":"struct"},"2:41365:3553":{"crate_id":2,"path":["core","option","IntoIter"],"kind":"struct"},"23:345:2814":{"crate_id":23,"path":["quote","quote_spanned"],"kind":"macro"},"5:6001:72":{"crate_id":5,"path":["alloc","sync","Arc"],"kind":"struct"},"17:12043:23618":{"crate_id":17,"path":["object","read","macho","segment","MachOSegment"],"kind":"struct"},"5:3809:10638":{"crate_id":5,"path":["alloc","collections","linked_list","CursorMut"],"kind":"struct"},"24:5498:3187":{"crate_id":24,"path":["syn","generics","WhereClause"],"kind":"struct"},"24:5323:3504":{"crate_id":24,"path":["syn","expr","ExprReturn"],"kind":"struct"},"17:14516:6047":{"crate_id":17,"path":["object","macho","DataInCodeEntry"],"kind":"struct"},"20:113:8693":{"crate_id":20,"path":["proc_macro2","rcvec","RcVec"],"kind":"struct"},"20:910:3575":{"crate_id":20,"path":["proc_macro2","Delimiter"],"kind":"enum"},"20:950:2126":{"crate_id":20,"path":["proc_macro2","Ident"],"kind":"struct"},"1:9628:139":{"crate_id":1,"path":["std","sys","pal","unix","fs","File"],"kind":"struct"},"1:2274:4881":{"crate_id":1,"path":["std","fs","read"],"kind":"function"},"1:8188:10155":{"crate_id":1,"path":["std","io","buffered","IntoInnerError"],"kind":"struct"},"5:3247:8912":{"crate_id":5,"path":["alloc","collections","btree","set","Difference"],"kind":"struct"},"17:14051:5956":{"crate_id":17,"path":["object","macho","PreboundDylibCommand"],"kind":"struct"},"24:2991:3802":{"crate_id":24,"path":["syn","token","Async"],"kind":"struct"},"2:45413:8398":{"crate_id":2,"path":["core","core_arch","simd","i8x16"],"kind":"struct"},"2:12125:16210":{"crate_id":2,"path":["core","slice","SlicePattern"],"kind":"trait"},"2:41231:9084":{"crate_id":2,"path":["core","net","socket_addr","SocketAddr"],"kind":"enum"},"16:7633:36852":{"crate_id":16,"path":["gimli","read","rnglists","RangeListsFormat"],"kind":"enum"},"2:30239:4797":{"crate_id":2,"path":["core","mem","maybe_uninit","MaybeUninit"],"kind":"union"},"17:13412:5825":{"crate_id":17,"path":["object","elf","Rel64"],"kind":"struct"},"1:10930:10149":{"crate_id":1,"path":["std","sys","pal","unix","os","JoinPathsError"],"kind":"struct"},"2:43894:9066":{"crate_id":2,"path":["core","str","CharEscapeUnicode"],"kind":"struct"},"17:16069:6513":{"crate_id":17,"path":["object","xcoff","SymbolBytes"],"kind":"struct"},"2:44187:9076":{"crate_id":2,"path":["core","alloc","layout","LayoutError"],"kind":"struct"},"17:9781:23499":{"crate_id":17,"path":["object","common","BinaryFormat"],"kind":"enum"},"6:6664:7802":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_exit"],"kind":"struct"},"5:3035:3820":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Mut"],"kind":"struct"},"17:10818:23511":{"crate_id":17,"path":["object","read","any","SymbolIterator"],"kind":"struct"},"6:6441:7690":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__timeval"],"kind":"struct"},"16:2303:22534":{"crate_id":16,"path":["gimli","common","Format"],"kind":"enum"},"6:7412:7951":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statfs64"],"kind":"struct"},"17:11405:23563":{"crate_id":17,"path":["object","read","elf","section","ElfSection"],"kind":"struct"},"2:22248:10996":{"crate_id":2,"path":["core","core_simd","simd","cmp","ord","SimdPartialOrd"],"kind":"trait"},"2:38926:213":{"crate_id":2,"path":["core","ops","range","RangeFull"],"kind":"struct"},"1:2691:10154":{"crate_id":1,"path":["std","io","buffered","bufwriter","WriterPanicked"],"kind":"struct"},"2:12348:9025":{"crate_id":2,"path":["core","str","iter","SplitNInternal"],"kind":"struct"},"2:41416:4141":{"crate_id":2,"path":["core","panic","unwind_safe","RefUnwindSafe"],"kind":"trait"},"6:6874:7866":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","sigset_t"],"kind":"struct"},"2:11013:16071":{"crate_id":2,"path":["core","slice","iter","SplitInclusiveMut"],"kind":"struct"},"17:12863:5744":{"crate_id":17,"path":["object","read","SymbolMapName"],"kind":"struct"},"6:6900:7881":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","msqid_ds"],"kind":"struct"},"2:43910:9070":{"crate_id":2,"path":["core","str","IsNotEmpty"],"kind":"struct"},"24:5580:3518":{"crate_id":24,"path":["syn","lit","LitByte"],"kind":"struct"},"2:33755:3870":{"crate_id":2,"path":["core","ops","bit","Shl"],"kind":"trait"},"24:5806:2109":{"crate_id":24,"path":["syn","ty","Type"],"kind":"enum"},"1:11493:31004":{"crate_id":1,"path":["std","sys","thread_local","fast_local","DtorState"],"kind":"enum"},"11:351:36824":{"crate_id":11,"path":["hashbrown","raw","FullBucketsIndices"],"kind":"struct"},"5:3028:2369":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Owned"],"kind":"enum"},"1:3276:10747":{"crate_id":1,"path":["std","io","stdio","Stdin"],"kind":"struct"},"2:40538:3628":{"crate_id":2,"path":["core","iter","sources","repeat_with","RepeatWith"],"kind":"struct"},"24:2570:2816":{"crate_id":24,"path":["syn","spanned","Spanned"],"kind":"trait"},"24:5310:3502":{"crate_id":24,"path":["syn","expr","ExprRange"],"kind":"struct"},"1:2439:10699":{"crate_id":1,"path":["std","fs","canonicalize"],"kind":"function"},"1:1862:10654":{"crate_id":1,"path":["std","env","SplitPaths"],"kind":"struct"},"2:22453:8959":{"crate_id":2,"path":["core","num","dec2flt","decimal","Decimal"],"kind":"struct"},"17:10720:36910":{"crate_id":17,"path":["object","read","any","ComdatSectionIteratorInternal"],"kind":"enum"},"6:6756:7836":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_statistics_v1"],"kind":"struct"},"5:2310:8923":{"crate_id":5,"path":["alloc","collections","btree","navigate","LazyLeafRange"],"kind":"struct"},"20:783:27770":{"crate_id":20,"path":["proc_macro2","extra","DelimSpanEnum"],"kind":"enum"},"16:2323:22559":{"crate_id":16,"path":["gimli","common","Vendor"],"kind":"enum"},"2:40030:8991":{"crate_id":2,"path":["core","iter","adapters","flatten","FlattenCompat"],"kind":"struct"},"5:2759:8087":{"crate_id":5,"path":["alloc","collections","btree","node","Handle"],"kind":"struct"},"6:7306:7899":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","sigaction"],"kind":"struct"},"20:356:3573":{"crate_id":20,"path":["proc_macro2","imp","LexError"],"kind":"enum"},"6:6636:7789":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","seminfo"],"kind":"struct"},"24:4651:3864":{"crate_id":24,"path":["syn","token","Plus"],"kind":"struct"},"24:3688:3827":{"crate_id":24,"path":["syn","token","Typeof"],"kind":"struct"},"2:2315:4875":{"crate_id":2,"path":["core","ptr","from_exposed_addr"],"kind":"function"},"16:6872:8863":{"crate_id":16,"path":["gimli","read","line","CompleteLineProgram"],"kind":"struct"},"1:12263:405":{"crate_id":1,"path":["std","bool"],"kind":"primitive"},"16:8073:3457":{"crate_id":16,"path":["gimli","read","unit","Attribute"],"kind":"struct"},"24:2577:10712":{"crate_id":24,"path":["syn","spanned","private","Sealed"],"kind":"trait"},"17:14912:6210":{"crate_id":17,"path":["object","pe","ImageRomOptionalHeader"],"kind":"struct"},"17:13606:5872":{"crate_id":17,"path":["object","elf","GnuHashHeader"],"kind":"struct"},"2:39925:10708":{"crate_id":2,"path":["core","io","borrowed_buf","BorrowedCursor"],"kind":"struct"},"17:15390:6318":{"crate_id":17,"path":["object","pe","ImageResourceDataEntry"],"kind":"struct"},"24:1737:27786":{"crate_id":24,"path":["syn","parse","discouraged","AnyDelimiter"],"kind":"trait"},"1:9048:10862":{"crate_id":1,"path":["std","process","CommandArgs"],"kind":"struct"},"16:2808:6589":{"crate_id":16,"path":["gimli","common","DebugTypesOffset"],"kind":"struct"},"1:4141:10789":{"crate_id":1,"path":["std","os","unix","fs","DirEntryExt"],"kind":"trait"},"17:9886:23501":{"crate_id":17,"path":["object","common","SymbolKind"],"kind":"enum"},"24:1029:10712":{"crate_id":24,"path":["syn","ext","private","Sealed"],"kind":"trait"},"14:40:2126":{"crate_id":14,"path":["rustc_demangle","v0","Ident"],"kind":"struct"},"2:39877:10676":{"crate_id":2,"path":["core","ffi","c_char"],"kind":"type_alias"},"6:8253:8060":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_rwlockattr_t"],"kind":"struct"},"2:39693:8976":{"crate_id":2,"path":["core","char","convert","ParseCharError"],"kind":"struct"},"24:4540:3856":{"crate_id":24,"path":["syn","token","Ne"],"kind":"struct"},"4:0:3312":{"crate_id":4,"path":["rustc_std_workspace_core"],"kind":"module"},"17:13089:5757":{"crate_id":17,"path":["object","archive","Header"],"kind":"struct"},"24:1778:3681":{"crate_id":24,"path":["syn","parse","ParseBuffer"],"kind":"struct"},"3:234:226":{"crate_id":3,"path":["compiler_builtins","float","cmp","Result"],"kind":"enum"},"24:3620:3826":{"crate_id":24,"path":["syn","token","Super"],"kind":"struct"},"17:14436:6039":{"crate_id":17,"path":["object","macho","LinkerOptionCommand"],"kind":"struct"},"24:3501:3823":{"crate_id":24,"path":["syn","token","Pub"],"kind":"struct"},"2:43733:9051":{"crate_id":2,"path":["core","str","pattern","StrSearcher"],"kind":"struct"},"24:5613:2511":{"crate_id":24,"path":["syn","mac","Macro"],"kind":"struct"},"2:1761:4793":{"crate_id":2,"path":["core","mem","Discriminant"],"kind":"struct"},"2:12371:9028":{"crate_id":2,"path":["core","str","iter","MatchIndicesInternal"],"kind":"struct"},"2:21352:10712":{"crate_id":2,"path":["core","core_simd","lane_count","sealed","Sealed"],"kind":"trait"},"24:4429:3848":{"crate_id":24,"path":["syn","token","FatArrow"],"kind":"struct"},"24:5449:3512":{"crate_id":24,"path":["syn","generics","ConstParam"],"kind":"struct"},"6:1565:7146":{"crate_id":6,"path":["libc","unix","linux_like","tm"],"kind":"struct"},"6:6915:7892":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","semid_ds"],"kind":"struct"},"1:9361:5352":{"crate_id":1,"path":["std","sync","rwlock","MappedRwLockWriteGuard"],"kind":"struct"},"16:7888:8888":{"crate_id":16,"path":["gimli","read","unit","DebuggingInformationEntry"],"kind":"struct"},"1:11623:9108":{"crate_id":1,"path":["std","sys_common","wtf8","EncodeWide"],"kind":"struct"},"1:8452:3651":{"crate_id":1,"path":["std","io","Chain"],"kind":"struct"},"1:8499:10759":{"crate_id":1,"path":["std","net","Shutdown"],"kind":"enum"},"6:5134:7409":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Phdr"],"kind":"struct"},"1:2421:4864":{"crate_id":1,"path":["std","fs","metadata"],"kind":"function"},"17:11825:23631":{"crate_id":17,"path":["object","read","macho","file","MachOFile"],"kind":"struct"},"24:153:2120":{"crate_id":24,"path":["syn","Token"],"kind":"macro"},"2:45442:8399":{"crate_id":2,"path":["core","core_arch","simd","i16x8"],"kind":"struct"},"2:41253:8329":{"crate_id":2,"path":["core","net","socket_addr","SocketAddrV4"],"kind":"struct"},"24:703:3554":{"crate_id":24,"path":["syn","error","Iter"],"kind":"struct"},"6:6788:7846":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","sifields_sigchld"],"kind":"struct"},"17:13855:5926":{"crate_id":17,"path":["object","macho","SegmentCommand32"],"kind":"struct"},"6:6821:7855":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","utmpx"],"kind":"struct"},"16:542:8753":{"crate_id":16,"path":["gimli","read","cfi","RegisterRuleMap"],"kind":"struct"},"2:3374:34986":{"crate_id":2,"path":["core","ops","try_trait","NeverShortCircuitResidual"],"kind":"enum"},"1:928:10631":{"crate_id":1,"path":["std","collections","hash","map","RawEntryMut"],"kind":"enum"},"24:5514:3513":{"crate_id":24,"path":["syn","generics","PredicateLifetime"],"kind":"struct"},"2:8451:35081":{"crate_id":2,"path":["core","net","display_buffer","DisplayBuffer"],"kind":"struct"},"2:3038:3857":{"crate_id":2,"path":["core","ops","bit","Not"],"kind":"trait"},"16:5037:6647":{"crate_id":16,"path":["gimli","constants","DwLnct"],"kind":"struct"},"17:15266:6285":{"crate_id":17,"path":["object","pe","ImageImportByName"],"kind":"struct"},"17:10759:5653":{"crate_id":17,"path":["object","read","any","SymbolTable"],"kind":"struct"},"1:2437:10698":{"crate_id":1,"path":["std","fs","read_link"],"kind":"function"},"2:45398:8397":{"crate_id":2,"path":["core","core_arch","simd","u64x2"],"kind":"struct"},"6:7339:7922":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","flock64"],"kind":"struct"},"2:11086:16068":{"crate_id":2,"path":["core","slice","iter","RSplitMut"],"kind":"struct"},"5:4241:5277":{"crate_id":5,"path":["alloc","collections","vec_deque","into_iter","try_fold","Guard"],"kind":"struct"},"9:53:10230":{"crate_id":9,"path":["miniz_oxide","inflate","core","DecompressorOxide"],"kind":"struct"},"1:4805:10838":{"crate_id":1,"path":["std","os","linux","process","ChildExt"],"kind":"trait"},"17:12584:23511":{"crate_id":17,"path":["object","read","xcoff","symbol","SymbolIterator"],"kind":"struct"},"2:10058:3709":{"crate_id":2,"path":["core","fmt","UpperHex"],"kind":"trait"},"1:6187:5336":{"crate_id":1,"path":["std","sync","mpmc","list","Channel"],"kind":"struct"},"24:5276:3499":{"crate_id":24,"path":["syn","expr","ExprLet"],"kind":"struct"},"6:8328:8076":{"crate_id":6,"path":["libc","unix","linux_like","linux","canxl_frame"],"kind":"struct"},"6:1490:7105":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreq"],"kind":"struct"},"2:46261:8476":{"crate_id":2,"path":["core","core_arch","x86","__m128i"],"kind":"struct"},"17:15608:6393":{"crate_id":17,"path":["object","pe","ImageArmRuntimeFunctionEntry"],"kind":"struct"},"6:578:7095":{"crate_id":6,"path":["libc","unix","servent"],"kind":"struct"},"24:1031:5467":{"crate_id":24,"path":["syn","ext","private","PeekFn"],"kind":"struct"},"16:7355:6742":{"crate_id":16,"path":["gimli","read","op","Piece"],"kind":"struct"},"24:3127:3806":{"crate_id":24,"path":["syn","token","Crate"],"kind":"struct"},"23:504:4417":{"crate_id":23,"path":["quote","__private","IdentFragmentAdapter"],"kind":"struct"},"24:5769:2509":{"crate_id":24,"path":["syn","path","AssocConst"],"kind":"struct"},"1:11711:10765":{"crate_id":1,"path":["std","sys_common","net","TcpStream"],"kind":"struct"},"6:479:7037":{"crate_id":6,"path":["libc","unix","timeval"],"kind":"struct"},"21:2298:2520":{"crate_id":21,"path":["proc_macro","bridge","Punct"],"kind":"struct"},"2:39992:3652":{"crate_id":2,"path":["core","iter","adapters","cycle","Cycle"],"kind":"struct"},"16:7397:36895":{"crate_id":16,"path":["gimli","read","op","EvaluationWaiting"],"kind":"enum"},"6:7359:7928":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stack_t"],"kind":"struct"},"2:41499:196":{"crate_id":2,"path":["core","sync","atomic","Ordering"],"kind":"enum"},"2:39839:8986":{"crate_id":2,"path":["core","ffi","c_str","FromBytesWithNulError"],"kind":"struct"},"24:2303:3554":{"crate_id":24,"path":["syn","punctuated","Iter"],"kind":"struct"},"6:7537:8014":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","mcontext_t"],"kind":"struct"},"1:0:1650":{"crate_id":1,"path":["std"],"kind":"module"},"11:396:5248":{"crate_id":11,"path":["hashbrown","raw","RawDrain"],"kind":"struct"},"1:5870:10875":{"crate_id":1,"path":["std","sync","barrier","BarrierWaitResult"],"kind":"struct"},"1:4926:10797":{"crate_id":1,"path":["std","os","fd","owned","AsFd"],"kind":"trait"},"18:507:5503":{"crate_id":18,"path":["memchr","memmem","genericsimd","Forward"],"kind":"struct"},"16:7813:8887":{"crate_id":16,"path":["gimli","read","unit","DebugInfoUnitHeadersIter"],"kind":"struct"},"16:6665:23429":{"crate_id":16,"path":["gimli","read","line","LineInstruction"],"kind":"enum"},"16:4560:6632":{"crate_id":16,"path":["gimli","constants","DwEnd"],"kind":"struct"},"11:1087:36836":{"crate_id":11,"path":["hashbrown","map","KeyOrRef"],"kind":"enum"},"17:12189:23683":{"crate_id":17,"path":["object","read","pe","file","PeComdatIterator"],"kind":"struct"},"2:22122:4875":{"crate_id":2,"path":["core","core_simd","simd","ptr","const_ptr","SimdConstPtr","from_exposed_addr"],"kind":"function"},"1:2030:198":{"crate_id":1,"path":["std","ffi","os_str","OsString"],"kind":"struct"},"2:41523:90":{"crate_id":2,"path":["core","sync","atomic","AtomicI8"],"kind":"struct"},"17:13844:5925":{"crate_id":17,"path":["object","macho","LcStr"],"kind":"struct"},"16:6098:23424":{"crate_id":16,"path":["gimli","read","cfi","CfaRule"],"kind":"enum"},"17:10092:23506":{"crate_id":17,"path":["object","common","SymbolFlags"],"kind":"enum"},"2:43482:8974":{"crate_id":2,"path":["core","str","iter","EscapeDefault"],"kind":"struct"},"16:3029:5529":{"crate_id":16,"path":["gimli","arch","Arm"],"kind":"struct"},"2:46301:8480":{"crate_id":2,"path":["core","core_arch","x86","__m256"],"kind":"struct"},"5:6393:11006":{"crate_id":5,"path":["alloc","task","Wake"],"kind":"trait"},"2:3271:211":{"crate_id":2,"path":["core","ops","range","RangeBounds"],"kind":"trait"},"2:45573:8406":{"crate_id":2,"path":["core","core_arch","simd","m16x8"],"kind":"struct"},"17:13723:5901":{"crate_id":17,"path":["object","macho","DyldCacheMappingInfo"],"kind":"struct"},"2:1874:8090":{"crate_id":2,"path":["core","ptr","metadata","PtrComponents"],"kind":"struct"},"16:4802:6639":{"crate_id":16,"path":["gimli","constants","DwCc"],"kind":"struct"},"6:1535:7127":{"crate_id":6,"path":["libc","unix","linux_like","addrinfo"],"kind":"struct"},"24:5940:3532":{"crate_id":24,"path":["syn","ty","BareVariadic"],"kind":"struct"},"1:8006:10662":{"crate_id":1,"path":["std","env","VarError"],"kind":"enum"},"2:21235:34830":{"crate_id":2,"path":["core","core_simd","swizzle","rotate_elements_right","Rotate"],"kind":"struct"},"24:3569:3825":{"crate_id":24,"path":["syn","token","SelfValue"],"kind":"struct"},"11:2369:22489":{"crate_id":11,"path":["hashbrown","table","AbsentEntry"],"kind":"struct"},"2:44083:150":{"crate_id":2,"path":["core","future","future","Future"],"kind":"trait"},"16:2592:6579":{"crate_id":16,"path":["gimli","common","DebugLocListsIndex"],"kind":"struct"},"18:573:5503":{"crate_id":18,"path":["memchr","memmem","twoway","Forward"],"kind":"struct"},"15:306:22515":{"crate_id":15,"path":["addr2line","LocationRangeUnitIter"],"kind":"struct"},"2:12609:3967":{"crate_id":2,"path":["core","str","pattern"],"kind":"module"},"2:22561:33575":{"crate_id":2,"path":["core","num","flt2dec","Sign"],"kind":"enum"},"1:12290:13":{"crate_id":1,"path":["std","fn"],"kind":"primitive"},"6:5219:7434":{"crate_id":6,"path":["libc","unix","linux_like","linux","in6_pktinfo"],"kind":"struct"},"17:16259:5820":{"crate_id":17,"path":["object","xcoff","Rel32"],"kind":"struct"},"1:7800:2207":{"crate_id":1,"path":["std","backtrace_rs","symbolize","Symbol"],"kind":"struct"},"5:1466:3554":{"crate_id":5,"path":["alloc","collections","btree","map","Iter"],"kind":"struct"},"17:11605:5662":{"crate_id":17,"path":["object","read","elf","version","Version"],"kind":"struct"},"16:8155:8898":{"crate_id":16,"path":["gimli","read","unit","EntriesTree"],"kind":"struct"},"17:9858:23500":{"crate_id":17,"path":["object","common","ComdatKind"],"kind":"enum"},"6:7348:7923":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","siginfo_t"],"kind":"struct"},"2:38251:5485":{"crate_id":2,"path":["core","ops","bit","ShrAssign"],"kind":"trait"},"2:39078:8187":{"crate_id":2,"path":["core","any","TypeId"],"kind":"struct"},"2:39769:8980":{"crate_id":2,"path":["core","char","EscapeDebug"],"kind":"struct"},"6:4965:7352":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_trigger"],"kind":"struct"},"1:903:4938":{"crate_id":1,"path":["std","collections","hash","map","ExtractIf"],"kind":"struct"},"2:6634:8942":{"crate_id":2,"path":["core","iter","adapters","map_windows","MapWindowsInner"],"kind":"struct"},"18:765:27760":{"crate_id":18,"path":["memchr","memmem","SearcherRevKind"],"kind":"enum"},"2:43768:9056":{"crate_id":2,"path":["core","str","pattern","TwoWaySearcher"],"kind":"struct"},"24:3076:105":{"crate_id":24,"path":["syn","token","Break"],"kind":"struct"},"6:5290:7472":{"crate_id":6,"path":["libc","unix","linux_like","linux","can_filter"],"kind":"struct"},"17:12621:5724":{"crate_id":17,"path":["object","read","xcoff","symbol","XcoffSymbol"],"kind":"struct"},"17:15376:6316":{"crate_id":17,"path":["object","pe","ImageResourceDirectoryString"],"kind":"struct"},"6:7575:8031":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ptrace_rseq_configuration"],"kind":"struct"},"16:6263:8823":{"crate_id":16,"path":["gimli","read","cfi","PointerEncodingParameters"],"kind":"struct"},"16:4502:6630":{"crate_id":16,"path":["gimli","constants","DwLle"],"kind":"struct"},"2:44086:165":{"crate_id":2,"path":["core","future","into_future","IntoFuture"],"kind":"trait"},"1:11772:10766":{"crate_id":1,"path":["std","sys_common","net","UdpSocket"],"kind":"struct"},"6:553:7082":{"crate_id":6,"path":["libc","unix","linger"],"kind":"struct"},"2:2743:138":{"crate_id":2,"path":["core","error","Error"],"kind":"trait"},"5:1065:5253":{"crate_id":5,"path":["alloc","collections","binary_heap","drop","DropGuard"],"kind":"struct"},"2:21468:10712":{"crate_id":2,"path":["core","core_simd","masks","sealed","Sealed"],"kind":"trait"},"2:43084:16067":{"crate_id":2,"path":["core","slice","iter","RChunksMut"],"kind":"struct"},"1:12266:1806":{"crate_id":1,"path":["std","unit"],"kind":"primitive"},"1:8269:10264":{"crate_id":1,"path":["std","io","error","Custom"],"kind":"struct"},"17:14066:5959":{"crate_id":17,"path":["object","macho","DylinkerCommand"],"kind":"struct"},"5:3399:4938":{"crate_id":5,"path":["alloc","collections","btree","set","ExtractIf"],"kind":"struct"},"17:11730:8729":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSubsubsectionIterator"],"kind":"struct"},"6:4924:7336":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_id"],"kind":"struct"},"1:10891:129":{"crate_id":1,"path":["std","sys","pal","unix","fs","DirBuilder"],"kind":"struct"},"1:1975:759":{"crate_id":1,"path":["std","ffi"],"kind":"module"},"16:8259:2891":{"crate_id":16,"path":["gimli","read","value","Value"],"kind":"enum"},"1:12275:714":{"crate_id":1,"path":["std","f32"],"kind":"primitive"},"17:11242:23554":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdatSectionIterator"],"kind":"struct"},"2:46290:8479":{"crate_id":2,"path":["core","core_arch","x86","__m256i"],"kind":"struct"},"21:2719:3575":{"crate_id":21,"path":["proc_macro","Delimiter"],"kind":"enum"},"17:12768:23484":{"crate_id":17,"path":["object","read","ObjectKind"],"kind":"enum"},"6:6714:7823":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_ring_offset_v1"],"kind":"struct"},"24:4791:3874":{"crate_id":24,"path":["syn","token","Slash"],"kind":"struct"},"17:11702:8727":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSubsectionIterator"],"kind":"struct"},"6:5352:7490":{"crate_id":6,"path":["libc","unix","linux_like","linux","seccomp_notif_addfd"],"kind":"struct"},"2:43898:9067":{"crate_id":2,"path":["core","str","CharEscapeDefault"],"kind":"struct"},"20:935:2192":{"crate_id":20,"path":["proc_macro2","Spacing"],"kind":"enum"},"1:951:10634":{"crate_id":1,"path":["std","collections","hash","map","RawEntryBuilder"],"kind":"struct"},"1:1585:4938":{"crate_id":1,"path":["std","collections","hash","set","ExtractIf"],"kind":"struct"},"24:5283:3500":{"crate_id":24,"path":["syn","expr","ExprLoop"],"kind":"struct"},"2:2981:4841":{"crate_id":2,"path":["core","ops","async_function","AsyncFnMut"],"kind":"trait"},"2:7493:3614":{"crate_id":2,"path":["core","iter","range","Step"],"kind":"trait"},"23:272:2203":{"crate_id":23,"path":["quote","__private","push_lifetime","Lifetime"],"kind":"struct"},"1:836:3554":{"crate_id":1,"path":["std","collections","hash","map","Iter"],"kind":"struct"},"2:21301:10917":{"crate_id":2,"path":["core","core_simd","cast","SimdCast"],"kind":"trait"},"5:7521:3611":{"crate_id":5,"path":["alloc","collections","TryReserveErrorKind"],"kind":"enum"},"17:11324:23578":{"crate_id":17,"path":["object","read","elf","file","ElfFile"],"kind":"struct"},"5:6935:4945":{"crate_id":5,"path":["alloc","vec","in_place_drop","InPlaceDrop"],"kind":"struct"},"17:10573:36902":{"crate_id":17,"path":["object","read","any","SegmentInternal"],"kind":"enum"},"1:5011:10836":{"crate_id":1,"path":["std","os","net","linux_ext","addr","SocketAddrExt"],"kind":"trait"},"24:1370:8658":{"crate_id":24,"path":["syn","lit","LitFloatRepr"],"kind":"struct"},"2:42034:3709":{"crate_id":2,"path":["core","fmt","num","UpperHex"],"kind":"struct"},"1:9138:8582":{"crate_id":1,"path":["std","sync","mpsc","RecvError"],"kind":"struct"},"24:4639:3863":{"crate_id":24,"path":["syn","token","PercentEq"],"kind":"struct"},"17:13375:5819":{"crate_id":17,"path":["object","elf","Syminfo64"],"kind":"struct"},"2:40053:3658":{"crate_id":2,"path":["core","iter","adapters","inspect","Inspect"],"kind":"struct"},"23:35:10712":{"crate_id":23,"path":["quote","ext","private","Sealed"],"kind":"trait"},"18:80:27748":{"crate_id":18,"path":["memchr","memchr","iter","Memchr"],"kind":"struct"},"17:14025:5952":{"crate_id":17,"path":["object","macho","SubUmbrellaCommand"],"kind":"struct"},"6:4876:7311":{"crate_id":6,"path":["libc","unix","linux_like","linux","packet_mreq"],"kind":"struct"},"2:13297:16128":{"crate_id":2,"path":["core","future","poll_fn","PollFn"],"kind":"struct"},"2:2664:256":{"crate_id":2,"path":["core","convert","TryFrom"],"kind":"trait"},"24:3025:3804":{"crate_id":24,"path":["syn","token","Await"],"kind":"struct"},"5:7455:3553":{"crate_id":5,"path":["alloc","collections","linked_list","IntoIter"],"kind":"struct"},"5:7615:243":{"crate_id":5,"path":["alloc","string","String"],"kind":"struct"},"3:0:485":{"crate_id":3,"path":["compiler_builtins"],"kind":"module"},"21:2493:3740":{"crate_id":21,"path":["proc_macro","bridge","Diagnostic"],"kind":"struct"},"24:4238:3836":{"crate_id":24,"path":["syn","token","AndEq"],"kind":"struct"},"1:307:1709":{"crate_id":1,"path":["std","thread"],"kind":"module"},"6:1580:7158":{"crate_id":6,"path":["libc","unix","linux_like","sched_param"],"kind":"struct"},"1:9369:162":{"crate_id":1,"path":["std","time","Instant"],"kind":"struct"},"2:2402:104":{"crate_id":2,"path":["core","borrow","BorrowMut"],"kind":"trait"},"1:8612:8560":{"crate_id":1,"path":["std","os","fd","owned","BorrowedFd"],"kind":"struct"},"24:5523:2126":{"crate_id":24,"path":["syn","ident","Ident"],"kind":"function"},"2:21360:10916":{"crate_id":2,"path":["core","core_simd","lane_count","SupportedLaneCount"],"kind":"trait"},"2:39834:107":{"crate_id":2,"path":["core","ffi","c_str","CStr"],"kind":"struct"},"17:15023:6228":{"crate_id":17,"path":["object","pe","AnonObjectHeaderV2"],"kind":"struct"},"2:2949:3599":{"crate_id":2,"path":["core","ops","arith","Add"],"kind":"trait"},"2:10060:206":{"crate_id":2,"path":["core","fmt","Pointer"],"kind":"trait"},"17:13568:5864":{"crate_id":17,"path":["object","elf","NoteHeader32"],"kind":"struct"},"2:10000:226":{"crate_id":2,"path":["core","fmt","Result"],"kind":"type_alias"},"17:11788:23649":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldSubCache"],"kind":"struct"},"17:10018:23483":{"crate_id":17,"path":["object","common","FileFlags"],"kind":"enum"},"1:557:4720":{"crate_id":1,"path":["std","thread","JoinHandle"],"kind":"struct"},"2:43886:9064":{"crate_id":2,"path":["core","str","LinesMap"],"kind":"struct"},"24:1110:3514":{"crate_id":24,"path":["syn","generics","ImplGenerics"],"kind":"struct"},"17:12371:5746":{"crate_id":17,"path":["object","read","pe","import","Import"],"kind":"enum"},"13:109:36839":{"crate_id":13,"path":["std_detect","detect","arch","x86","Feature"],"kind":"enum"},"2:3355:16102":{"crate_id":2,"path":["core","ops","try_trait","Residual"],"kind":"trait"},"6:570:7090":{"crate_id":6,"path":["libc","unix","tms"],"kind":"struct"},"24:4963:3471":{"crate_id":24,"path":["syn","data","FieldsNamed"],"kind":"struct"},"6:5112:7407":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Sym"],"kind":"struct"},"24:3042:3805":{"crate_id":24,"path":["syn","token","Become"],"kind":"struct"},"17:15434:6328":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation32V2"],"kind":"struct"},"6:5436:7536":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_sndinfo"],"kind":"struct"},"5:3029:36286":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Dying"],"kind":"enum"},"17:13173:5775":{"crate_id":17,"path":["object","archive","AixMemberOffset"],"kind":"struct"},"2:4293:3731":{"crate_id":2,"path":["core","cell","once","OnceCell"],"kind":"struct"},"17:13526:5849":{"crate_id":17,"path":["object","elf","Verdaux"],"kind":"struct"},"17:14560:6054":{"crate_id":17,"path":["object","macho","Nlist64"],"kind":"struct"},"24:2974:3801":{"crate_id":24,"path":["syn","token","As"],"kind":"struct"},"16:8093:6812":{"crate_id":16,"path":["gimli","read","unit","AttrsIter"],"kind":"struct"},"10:36:6950":{"crate_id":10,"path":["adler","algo","U32X4"],"kind":"struct"},"17:15769:6439":{"crate_id":17,"path":["object","pe","ImageFunctionEntry64"],"kind":"struct"},"1:10953:27826":{"crate_id":1,"path":["std","sys","pal","unix","process","process_common","ProgramKind"],"kind":"enum"},"11:1582:22487":{"crate_id":11,"path":["hashbrown","rustc_entry","RustcOccupiedEntry"],"kind":"struct"},"2:11687:16062":{"crate_id":2,"path":["core","slice","iter","ChunkByMut"],"kind":"struct"},"17:13064:5756":{"crate_id":17,"path":["object","read","CompressedData"],"kind":"struct"},"2:22385:8958":{"crate_id":2,"path":["core","num","bignum","tests","Big8x3"],"kind":"struct"},"6:4985:7363":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_ramp_effect"],"kind":"struct"},"1:11139:8579":{"crate_id":1,"path":["std","sys","pal","unix","process","process_inner","ExitStatusError"],"kind":"struct"},"2:2648:78":{"crate_id":2,"path":["core","convert","AsRef"],"kind":"trait"},"17:11567:23609":{"crate_id":17,"path":["object","read","elf","note","GnuProperty"],"kind":"struct"},"24:4494:3853":{"crate_id":24,"path":["syn","token","Lt"],"kind":"struct"},"21:989:2193":{"crate_id":21,"path":["proc_macro","bridge","client","Span"],"kind":"struct"},"6:1628:7194":{"crate_id":6,"path":["libc","unix","linux_like","ifaddrs"],"kind":"struct"},"24:4910:3456":{"crate_id":24,"path":["syn","attr","AttrStyle"],"kind":"enum"},"2:39071:16165":{"crate_id":2,"path":["core","ops","try_trait","Yeet"],"kind":"struct"},"24:3671:2109":{"crate_id":24,"path":["syn","token","Type"],"kind":"struct"},"24:2523:10712":{"crate_id":24,"path":["syn","sealed","lookahead","Sealed"],"kind":"trait"},"1:3418:10738":{"crate_id":1,"path":["std","io","stdio","IsTerminal"],"kind":"trait"},"24:5578:3519":{"crate_id":24,"path":["syn","lit","LitByteStr"],"kind":"struct"},"1:9099:3554":{"crate_id":1,"path":["std","sync","mpsc","Iter"],"kind":"struct"},"11:1883:3554":{"crate_id":11,"path":["hashbrown","set","Iter"],"kind":"struct"},"24:4598:3860":{"crate_id":24,"path":["syn","token","OrOr"],"kind":"struct"},"24:5911:2684":{"crate_id":24,"path":["syn","ty","TypePath"],"kind":"struct"},"17:13211:5790":{"crate_id":17,"path":["object","elf","FileHeader64"],"kind":"struct"},"24:5351:3508":{"crate_id":24,"path":["syn","expr","ExprUnsafe"],"kind":"struct"},"2:22175:4875":{"crate_id":2,"path":["core","core_simd","simd","ptr","mut_ptr","SimdMutPtr","from_exposed_addr"],"kind":"function"},"17:11128:5617":{"crate_id":17,"path":["object","read","coff","section","CoffSection"],"kind":"struct"},"6:1707:7237":{"crate_id":6,"path":["libc","unix","linux_like","utsname"],"kind":"struct"},"16:7509:23436":{"crate_id":16,"path":["gimli","read","op","Evaluation"],"kind":"struct"},"5:3211:101":{"crate_id":5,"path":["alloc","collections","btree","set","BTreeSet"],"kind":"struct"},"2:45317:8385":{"crate_id":2,"path":["core","core_arch","simd","f64x1"],"kind":"struct"},"11:1051:10636":{"crate_id":11,"path":["hashbrown","map","VacantEntry"],"kind":"struct"},"6:5617:7618":{"crate_id":6,"path":["libc","unix","linux_like","linux","ifreq"],"kind":"struct"},"18:726:5525":{"crate_id":18,"path":["memchr","memmem","SearcherConfig"],"kind":"struct"},"5:7082:5299":{"crate_id":5,"path":["alloc","vec","retain_mut","BackshiftOnDrop"],"kind":"struct"},"16:2660:6582":{"crate_id":16,"path":["gimli","common","RawRangeListsOffset"],"kind":"struct"},"1:5508:10857":{"crate_id":1,"path":["std","process","ChildStdin"],"kind":"struct"},"24:2259:3552":{"crate_id":24,"path":["syn","punctuated","IntoPairs"],"kind":"struct"},"5:7604:5284":{"crate_id":5,"path":["alloc","rc","UniqueRc"],"kind":"struct"},"17:15368:6313":{"crate_id":17,"path":["object","pe","ImageResourceDirectoryEntry"],"kind":"struct"},"17:15249:6278":{"crate_id":17,"path":["object","pe","ImageExportDirectory"],"kind":"struct"},"24:5211:3489":{"crate_id":24,"path":["syn","expr","ExprAwait"],"kind":"struct"},"18:659:27761":{"crate_id":18,"path":["memchr","memmem","FindIter"],"kind":"struct"},"2:30245:4798":{"crate_id":2,"path":["core","mem","transmutability","Assume"],"kind":"struct"},"6:538:7074":{"crate_id":6,"path":["libc","unix","pollfd"],"kind":"struct"}},"external_crates":{"23":{"name":"quote","html_root_url":"https://docs.rs/quote/1.0.35/"},"20":{"name":"proc_macro2","html_root_url":"https://docs.rs/proc-macro2/1.0.78/"},"17":{"name":"object","html_root_url":"https://doc.rust-lang.org/nightly/"},"14":{"name":"rustc_demangle","html_root_url":"https://doc.rust-lang.org/nightly/"},"11":{"name":"hashbrown","html_root_url":"https://doc.rust-lang.org/nightly/"},"8":{"name":"cfg_if","html_root_url":"https://docs.rs/cfg-if/"},"5":{"name":"alloc","html_root_url":"https://doc.rust-lang.org/nightly/"},"2":{"name":"core","html_root_url":"https://doc.rust-lang.org/nightly/"},"22":{"name":"unicode_ident","html_root_url":"https://docs.rs/unicode-ident/1.0.12/"},"19":{"name":"panic_unwind","html_root_url":"https://doc.rust-lang.org/nightly/"},"16":{"name":"gimli","html_root_url":"https://doc.rust-lang.org/nightly/"},"13":{"name":"std_detect","html_root_url":"https://doc.rust-lang.org/nightly/"},"10":{"name":"adler","html_root_url":"https://docs.rs/adler/1.0.2/"},"7":{"name":"unwind","html_root_url":"https://doc.rust-lang.org/nightly/"},"4":{"name":"rustc_std_workspace_core","html_root_url":"https://doc.rust-lang.org/nightly/"},"1":{"name":"std","html_root_url":"https://doc.rust-lang.org/nightly/"},"24":{"name":"syn","html_root_url":"https://docs.rs/syn/2.0.52/"},"21":{"name":"proc_macro","html_root_url":"https://doc.rust-lang.org/nightly/"},"18":{"name":"memchr","html_root_url":"https://doc.rust-lang.org/nightly/"},"15":{"name":"addr2line","html_root_url":"https://doc.rust-lang.org/nightly/"},"12":{"name":"rustc_std_workspace_alloc","html_root_url":"https://doc.rust-lang.org/nightly/"},"9":{"name":"miniz_oxide","html_root_url":"https://doc.rust-lang.org/nightly/"},"6":{"name":"libc","html_root_url":"https://doc.rust-lang.org/nightly/"},"3":{"name":"compiler_builtins","html_root_url":"https://doc.rust-lang.org/nightly/"}},"format_version":28}