{"root":"0:0:1706","crate_version":"1.0.168","includes_private":false,"index":{"2:12101:2359":{"id":"2:12101:2359","crate_id":2,"name":"chars","span":null,"visibility":"public","docs":"Returns an iterator over the [`char`]s of a string slice.\n\nAs a string slice consists of valid UTF-8, we can iterate through a\nstring slice by [`char`]. This method returns such an iterator.\n\nIt's important to remember that [`char`] represents a Unicode Scalar\nValue, and might not match your idea of what a 'character' is. Iteration\nover grapheme clusters may be what you actually want. This functionality\nis not provided by Rust's standard library, check crates.io instead.\n\n# Examples\n\nBasic usage:\n\n```\nlet word = \"goodbye\";\n\nlet count = word.chars().count();\nassert_eq!(7, count);\n\nlet mut chars = word.chars();\n\nassert_eq!(Some('g'), chars.next());\nassert_eq!(Some('o'), chars.next());\nassert_eq!(Some('o'), chars.next());\nassert_eq!(Some('d'), chars.next());\nassert_eq!(Some('b'), chars.next());\nassert_eq!(Some('y'), chars.next());\nassert_eq!(Some('e'), chars.next());\n\nassert_eq!(None, chars.next());\n```\n\nRemember, [`char`]s might not match your intuition about characters:\n\n[`char`]: prim@char\n\n```\nlet y = \"yÃÜ\";\n\nlet mut chars = y.chars();\n\nassert_eq!(Some('y'), chars.next()); // not 'yÃÜ'\nassert_eq!(Some('\\u{0306}'), chars.next());\n\nassert_eq!(None, chars.next());\n```","links":{"prim@char":"1:11945:418"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Chars","id":"2:43528:8429","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12179:26283":{"id":"2:12179:26283","crate_id":2,"name":"strip_prefix","span":null,"visibility":"public","docs":"Returns a string slice with the prefix removed.\n\nIf the string starts with the pattern `prefix`, returns substring after the prefix, wrapped\nin `Some`.  Unlike `trim_start_matches`, this method removes the prefix exactly once.\n\nIf the string does not start with `prefix`, returns `None`.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nassert_eq!(\"foo:bar\".strip_prefix(\"foo:\"), Some(\"bar\"));\nassert_eq!(\"foo:bar\".strip_prefix(\"bar\"), None);\nassert_eq!(\"foofoo\".strip_prefix(\"foo\"), Some(\"foo\"));\n```","links":{"prim@char":"1:11945:418","self::pattern":"2:11778:14425"},"attrs":["#[must_use =\n\"this returns the remaining substring as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["prefix",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:41589:181","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11783:14422","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:85-0:974:1914":{"id":"0:85-0:974:1914","crate_id":0,"name":null,"span":{"filename":"src/internals/attr.rs","begin":[22,0],"end":[22,36]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"import":{"source":"internals::case::RenameRule","name":"RenameRule","id":"0:974:1914","glob":false}}},"2:12079:35701":{"id":"2:12079:35701","crate_id":2,"name":"is_char_boundary","span":null,"visibility":"public","docs":"Checks that `index`-th byte is the first byte in a UTF-8 code point\nsequence or the end of the string.\n\nThe start and end of the string (when `index == self.len()`) are\nconsidered to be boundaries.\n\nReturns `false` if `index` is greater than `self.len()`.\n\n# Examples\n\n```\nlet s = \"L√∂we ËÄÅËôé L√©opard\";\nassert!(s.is_char_boundary(0));\n// start of `ËÄÅ`\nassert!(s.is_char_boundary(6));\nassert!(s.is_char_boundary(s.len()));\n\n// second byte of `√∂`\nassert!(!s.is_char_boundary(2));\n\n// third byte of `ËÄÅ`\nassert!(!s.is_char_boundary(8));\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["index",{"primitive":"usize"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12100:27100":{"id":"2:12100:27100","crate_id":2,"name":"split_at_mut","span":null,"visibility":"public","docs":"Divide one mutable string slice into two at an index.\n\nThe argument, `mid`, should be a byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get immutable string slices instead, see the [`split_at`] method.\n\n[`split_at`]: str::split_at\n\n# Panics\n\nPanics if `mid` is not on a UTF-8 code point boundary, or if it is\npast the end of the last code point of the string slice.\n\n# Examples\n\n```\nlet mut s = \"Per Martin-L√∂f\".to_string();\n{\n    let (first, last) = s.split_at_mut(3);\n    first.make_ascii_uppercase();\n    assert_eq!(\"PER\", first);\n    assert_eq!(\" Martin-L√∂f\", last);\n}\nassert_eq!(\"PER Martin-L√∂f\", s);\n```","links":{"str::split_at":"2:12099:2682"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["mid",{"primitive":"usize"}]],"output":{"tuple":[{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:63:345":{"id":"0:63:345","crate_id":0,"name":"attr","span":{"filename":"src/internals/attr.rs","begin":[1,0],"end":[1805,1]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"module":{"is_crate":false,"items":["0:85-0:974:1914"],"is_stripped":false}}},"2:12147:35710":{"id":"2:12147:35710","crate_id":2,"name":"split_once","span":null,"visibility":"public","docs":"Splits the string on the first occurrence of the specified delimiter and\nreturns prefix before delimiter and suffix after delimiter.\n\n# Examples\n\n```\nassert_eq!(\"cfg\".split_once('='), None);\nassert_eq!(\"cfg=\".split_once('='), Some((\"cfg\", \"\")));\nassert_eq!(\"cfg=foo\".split_once('='), Some((\"cfg\", \"foo\")));\nassert_eq!(\"cfg=foo=bar\".split_once('='), Some((\"cfg\", \"foo=bar\")));\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["delimiter",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:41589:181","args":{"angle_bracketed":{"args":[{"type":{"tuple":[{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11783:14422","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12089:1929":{"id":"2:12089:1929","crate_id":2,"name":"get","span":null,"visibility":"public","docs":"Returns a subslice of `str`.\n\nThis is the non-panicking alternative to indexing the `str`. Returns\n[`None`] whenever equivalent indexing operation would panic.\n\n# Examples\n\n```\nlet v = String::from(\"üóª‚ààüåè\");\n\nassert_eq!(Some(\"üóª\"), v.get(0..4));\n\n// indices not on UTF-8 sequence boundaries\nassert!(v.get(1..).is_none());\nassert!(v.get(..8).is_none());\n\n// out of bounds\nassert!(v.get(..42).is_none());\n```","links":{"`None`":"2:41591:179"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"resolved_path":{"name":"Option","id":"2:41589:181","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"2:9879:222","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"2:9879:222","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12132:27111":{"id":"2:12132:27111","crate_id":2,"name":"rsplit","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by\ncharacters matched by a pattern and yielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`split`] method can be used.\n\n[`split`]: str::split\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".rsplit(' ').collect();\nassert_eq!(v, [\"lamb\", \"little\", \"a\", \"had\", \"Mary\"]);\n\nlet v: Vec<&str> = \"\".rsplit('X').collect();\nassert_eq!(v, [\"\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".rsplit('X').collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"\", \"lion\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".rsplit(\"::\").collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"lion\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".rsplit(|c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"ghi\", \"def\", \"abc\"]);\n```","links":{"self::pattern":"2:11778:14425","`DoubleEndedIterator`":"2:7306:121","prim@char":"1:11945:418","str::split":"2:12126:27107"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RSplit","id":"2:43576:8362","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11783:14422","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:11783:14422","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11798:14423","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12156:35712":{"id":"2:12156:35712","crate_id":2,"name":"rmatches","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within this string slice,\nyielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`matches`] method can be used.\n\n[`matches`]: str::matches\n\n# Examples\n\n```\nlet v: Vec<&str> = \"abcXXXabcYYYabc\".rmatches(\"abc\").collect();\nassert_eq!(v, [\"abc\", \"abc\", \"abc\"]);\n\nlet v: Vec<&str> = \"1abc2abc3\".rmatches(char::is_numeric).collect();\nassert_eq!(v, [\"3\", \"2\", \"1\"]);\n```","links":{"self::pattern":"2:11778:14425","`DoubleEndedIterator`":"2:7306:121","prim@char":"1:11945:418","str::matches":"2:12153:3117"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RMatches","id":"2:43780:8445","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11783:14422","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:11783:14422","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11798:14423","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12196:4453":{"id":"2:12196:4453","crate_id":2,"name":"is_ascii","span":null,"visibility":"public","docs":"Checks if all characters in this string are within the ASCII range.\n\n# Examples\n\n```\nlet ascii = \"hello!\\n\";\nlet non_ascii = \"Gr√º√üe, J√ºrgen ‚ù§\";\n\nassert!(ascii.is_ascii());\nassert!(!non_ascii.is_ascii());\n```","links":{},"attrs":["#[rustc_const_unstable(feature = \"const_slice_is_ascii\", issue = \"111090\")]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12109:1966":{"id":"2:12109:1966","crate_id":2,"name":"contains","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a sub-slice of\nthis string slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.contains(\"nana\"));\nassert!(!bananas.contains(\"apples\"));\n```","links":{"prim@char":"1:11945:418","self::pattern":"2:11778:14425"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11783:14422","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:999:1917":{"id":"0:999:1917","crate_id":0,"name":"Symbol","span":{"filename":"src/internals/symbol.rs","begin":[5,0],"end":[5,32]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"struct":{"kind":{"tuple":[null]},"generics":{"params":[],"where_predicates":[]},"impls":[]}}},"2:12167:35716":{"id":"2:12167:35716","crate_id":2,"name":"trim_start","span":null,"visibility":"public","docs":"Returns a string slice with leading whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Text directionality\n\nA string is a sequence of bytes. `start` in this context means the first\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be left side, and for right-to-left languages like\nArabic or Hebrew, this will be the right side.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\nassert_eq!(\"Hello\\tworld\\t\\n\", s.trim_start());\n```\n\nDirectionality:\n\n```\nlet s = \"  English  \";\nassert!(Some('E') == s.trim_start().chars().next());\n\nlet s = \"  ◊¢◊ë◊®◊ô◊™  \";\nassert!(Some('◊¢') == s.trim_start().chars().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_trim_start\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12169:35717":{"id":"2:12169:35717","crate_id":2,"name":"trim_end","span":null,"visibility":"public","docs":"Returns a string slice with trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Text directionality\n\nA string is a sequence of bytes. `end` in this context means the last\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be right side, and for right-to-left languages like\nArabic or Hebrew, this will be the left side.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\nassert_eq!(\"\\n Hello\\tworld\", s.trim_end());\n```\n\nDirectionality:\n\n```\nlet s = \"  English  \";\nassert!(Some('h') == s.trim_end().chars().rev().next());\n\nlet s = \"  ◊¢◊ë◊®◊ô◊™  \";\nassert!(Some('◊™') == s.trim_end().chars().rev().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_trim_end\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12198:4454":{"id":"2:12198:4454","crate_id":2,"name":"eq_ignore_ascii_case","span":null,"visibility":"public","docs":"Checks that two strings are an ASCII case-insensitive match.\n\nSame as `to_ascii_lowercase(a) == to_ascii_lowercase(b)`,\nbut without allocating and copying temporaries.\n\n# Examples\n\n```\nassert!(\"Ferris\".eq_ignore_ascii_case(\"FERRIS\"));\nassert!(\"Ferr√∂s\".eq_ignore_ascii_case(\"FERR√∂S\"));\nassert!(!\"Ferr√∂s\".eq_ignore_ascii_case(\"FERR√ñS\"));\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["other",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12076":{"id":"2:12076","crate_id":2,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":["#[cfg(not(test))]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"primitive":"str"},"items":["2:12077:816","2:12078:2035","2:12079:35701","2:12080:35702","2:12082:35703","2:12085:2784","2:12086:35704","2:12087:314","2:12088:27077","2:12089:1929","2:12091:27074","2:12093:27075","2:12095:27076","2:12097:35705","2:12098:35706","2:12099:2682","2:12100:27100","2:12101:2359","2:12102:2353","2:12103:8351","2:12104:33425","2:12105:33428","2:12106:29043","2:12107:35707","2:12108:33459","2:12109:1966","2:12112:27117","2:12115:27118","2:12118:2579","2:12122:4137","2:12126:27107","2:12129:27109","2:12132:27111","2:12135:35708","2:12138:35709","2:12141:27113","2:12144:27115","2:12147:35710","2:12150:35711","2:12153:3117","2:12156:35712","2:12159:35713","2:12162:35714","2:12165:35715","2:12167:35716","2:12169:35717","2:12171:35718","2:12172:35719","2:12173:35720","2:12176:1948","2:12179:26283","2:12182:27119","2:12185:35721","2:12188:35722","2:12191:35723","2:12194:1910","2:12196:4453","2:12197:28274","2:12198:4454","2:12199:4455","2:12200:4456","2:12201:35724","2:12203:3422","2:12204:35725"],"negative":false,"synthetic":false,"blanket_impl":null}}},"2:12105:33428":{"id":"2:12105:33428","crate_id":2,"name":"split_ascii_whitespace","span":null,"visibility":"public","docs":"Splits a string slice by ASCII whitespace.\n\nThe iterator returned will return string slices that are sub-slices of\nthe original string slice, separated by any amount of ASCII whitespace.\n\nTo split by Unicode `Whitespace` instead, use [`split_whitespace`].\n\n[`split_whitespace`]: str::split_whitespace\n\n# Examples\n\nBasic usage:\n\n```\nlet mut iter = \"A few words\".split_ascii_whitespace();\n\nassert_eq!(Some(\"A\"), iter.next());\nassert_eq!(Some(\"few\"), iter.next());\nassert_eq!(Some(\"words\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nAll kinds of ASCII whitespace are considered:\n\n```\nlet mut iter = \" Mary   had\\ta little  \\n\\t lamb\".split_ascii_whitespace();\nassert_eq!(Some(\"Mary\"), iter.next());\nassert_eq!(Some(\"had\"), iter.next());\nassert_eq!(Some(\"a\"), iter.next());\nassert_eq!(Some(\"little\"), iter.next());\nassert_eq!(Some(\"lamb\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nIf the string is empty or all ASCII whitespace, the iterator yields no string slices:\n```\nassert_eq!(\"\".split_ascii_whitespace().next(), None);\nassert_eq!(\"   \".split_ascii_whitespace().next(), None);\n```","links":{"str::split_whitespace":"2:12104:33425"},"attrs":["#[must_use =\n\"this returns the split string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"SplitAsciiWhitespace","id":"2:43841:8449","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5443:2350":{"id":"5:5443:2350","crate_id":5,"name":"to_ascii_uppercase","span":null,"visibility":"public","docs":"Returns a copy of this string where each character is mapped to its\nASCII upper case equivalent.\n\nASCII letters 'a' to 'z' are mapped to 'A' to 'Z',\nbut non-ASCII letters are unchanged.\n\nTo uppercase the value in-place, use [`make_ascii_uppercase`].\n\nTo uppercase ASCII characters in addition to non-ASCII characters, use\n[`to_uppercase`].\n\n# Examples\n\n```\nlet s = \"Gr√º√üe, J√ºrgen ‚ù§\";\n\nassert_eq!(\"GR√º√üE, J√ºRGEN ‚ù§\", s.to_ascii_uppercase());\n```\n\n[`make_ascii_uppercase`]: str::make_ascii_uppercase\n[`to_uppercase`]: #method.to_uppercase","links":{"str::make_ascii_uppercase":"2:12199:4455"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use = \"to uppercase the value in-place, use `make_ascii_uppercase()`\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7280:224","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12171:35718":{"id":"2:12171:35718","crate_id":2,"name":"trim_left","span":null,"visibility":"public","docs":"Returns a string slice with leading whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`.\n\n# Text directionality\n\nA string is a sequence of bytes. 'Left' in this context means the first\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _right_ side, not the left.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \" Hello\\tworld\\t\";\n\nassert_eq!(\"Hello\\tworld\\t\", s.trim_left());\n```\n\nDirectionality:\n\n```\nlet s = \"  English\";\nassert!(Some('E') == s.trim_left().chars().next());\n\nlet s = \"  ◊¢◊ë◊®◊ô◊™\";\nassert!(Some('◊¢') == s.trim_left().chars().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_start`\", suggestion\n= \"trim_start\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_start`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12103:8351":{"id":"2:12103:8351","crate_id":2,"name":"bytes","span":null,"visibility":"public","docs":"An iterator over the bytes of a string slice.\n\nAs a string slice consists of a sequence of bytes, we can iterate\nthrough a string slice by byte. This method returns such an iterator.\n\n# Examples\n\n```\nlet mut bytes = \"bors\".bytes();\n\nassert_eq!(Some(b'b'), bytes.next());\nassert_eq!(Some(b'o'), bytes.next());\nassert_eq!(Some(b'r'), bytes.next());\nassert_eq!(Some(b's'), bytes.next());\n\nassert_eq!(None, bytes.next());\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Bytes","id":"2:43544:2797","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12106:29043":{"id":"2:12106:29043","crate_id":2,"name":"lines","span":null,"visibility":"public","docs":"An iterator over the lines of a string, as string slices.\n\nLines are split at line endings that are either newlines (`\\n`) or\nsequences of a carriage return followed by a line feed (`\\r\\n`).\n\nLine terminators are not included in the lines returned by the iterator.\n\nThe final line ending is optional. A string that ends with a final line\nending will return the same lines as an otherwise identical string\nwithout a final line ending.\n\n# Examples\n\nBasic usage:\n\n```\nlet text = \"foo\\r\\nbar\\n\\nbaz\\n\";\nlet mut lines = text.lines();\n\nassert_eq!(Some(\"foo\"), lines.next());\nassert_eq!(Some(\"bar\"), lines.next());\nassert_eq!(Some(\"\"), lines.next());\nassert_eq!(Some(\"baz\"), lines.next());\n\nassert_eq!(None, lines.next());\n```\n\nThe final line ending isn't required:\n\n```\nlet text = \"foo\\nbar\\n\\r\\nbaz\";\nlet mut lines = text.lines();\n\nassert_eq!(Some(\"foo\"), lines.next());\nassert_eq!(Some(\"bar\"), lines.next());\nassert_eq!(Some(\"\"), lines.next());\nassert_eq!(Some(\"baz\"), lines.next());\n\nassert_eq!(None, lines.next());\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Lines","id":"2:43812:8446","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12080:35702":{"id":"2:12080:35702","crate_id":2,"name":"floor_char_boundary","span":null,"visibility":"public","docs":"Finds the closest `x` not exceeding `index` where `is_char_boundary(x)` is `true`.\n\nThis method can help you truncate a string so that it's still valid UTF-8, but doesn't\nexceed a given number of bytes. Note that this is done purely at the character level\nand can still visually split graphemes, even though the underlying characters aren't\nsplit. For example, the emoji üßë‚Äçüî¨ (scientist) could be split so that the string only\nincludes üßë (person) instead.\n\n# Examples\n\n```\n#![feature(round_char_boundary)]\nlet s = \"‚ù§Ô∏èüß°üíõüíöüíôüíú\";\nassert_eq!(s.len(), 26);\nassert!(!s.is_char_boundary(13));\n\nlet closest = s.floor_char_boundary(13);\nassert_eq!(closest, 10);\nassert_eq!(&s[..closest], \"‚ù§Ô∏èüß°\");\n```","links":{},"attrs":["#[unstable(feature = \"round_char_boundary\", issue = \"93743\")]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["index",{"primitive":"usize"}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12091:27074":{"id":"2:12091:27074","crate_id":2,"name":"get_mut","span":null,"visibility":"public","docs":"Returns a mutable subslice of `str`.\n\nThis is the non-panicking alternative to indexing the `str`. Returns\n[`None`] whenever equivalent indexing operation would panic.\n\n# Examples\n\n```\nlet mut v = String::from(\"hello\");\n// correct length\nassert!(v.get_mut(0..5).is_some());\n// out of bounds\nassert!(v.get_mut(..42).is_none());\nassert_eq!(Some(\"he\"), v.get_mut(0..2).map(|v| &*v));\n\nassert_eq!(\"hello\", v);\n{\n    let s = v.get_mut(0..2);\n    let s = s.map(|s| {\n        s.make_ascii_uppercase();\n        &*s\n    });\n    assert_eq!(Some(\"HE\"), s);\n}\nassert_eq!(\"HEllo\", v);\n```","links":{"`None`":"2:41591:179"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"resolved_path":{"name":"Option","id":"2:41589:181","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"2:9879:222","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"2:9879:222","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12172:35719":{"id":"2:12172:35719","crate_id":2,"name":"trim_right","span":null,"visibility":"public","docs":"Returns a string slice with trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`.\n\n# Text directionality\n\nA string is a sequence of bytes. 'Right' in this context means the last\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _left_ side, not the right.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \" Hello\\tworld\\t\";\n\nassert_eq!(\" Hello\\tworld\", s.trim_right());\n```\n\nDirectionality:\n\n```\nlet s = \"English  \";\nassert!(Some('h') == s.trim_right().chars().rev().next());\n\nlet s = \"◊¢◊ë◊®◊ô◊™  \";\nassert!(Some('◊™') == s.trim_right().chars().rev().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_end`\", suggestion =\n\"trim_end\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_end`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12118:2579":{"id":"2:12118:2579","crate_id":2,"name":"find","span":null,"visibility":"public","docs":"Returns the byte index of the first character of this string slice that\nmatches the pattern.\n\nReturns [`None`] if the pattern doesn't match.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nlet s = \"L√∂we ËÄÅËôé L√©opard Gepardi\";\n\nassert_eq!(s.find('L'), Some(0));\nassert_eq!(s.find('√©'), Some(14));\nassert_eq!(s.find(\"pard\"), Some(17));\n```\n\nMore complex patterns using point-free style and closures:\n\n```\nlet s = \"L√∂we ËÄÅËôé L√©opard\";\n\nassert_eq!(s.find(char::is_whitespace), Some(5));\nassert_eq!(s.find(char::is_lowercase), Some(1));\nassert_eq!(s.find(|c: char| c.is_whitespace() || c.is_lowercase()), Some(1));\nassert_eq!(s.find(|c: char| (c < 'o') && (c > 'a')), Some(4));\n```\n\nNot finding the pattern:\n\n```\nlet s = \"L√∂we ËÄÅËôé L√©opard\";\nlet x: &[_] = &['1', '2'];\n\nassert_eq!(s.find(x), None);\n```","links":{"`None`":"2:41591:179","prim@char":"1:11945:418","self::pattern":"2:11778:14425"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:41589:181","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11783:14422","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12162:35714":{"id":"2:12162:35714","crate_id":2,"name":"rmatch_indices","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within `self`,\nyielded in reverse order along with the index of the match.\n\nFor matches of `pat` within `self` that overlap, only the indices\ncorresponding to the last match are returned.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`match_indices`] method can be used.\n\n[`match_indices`]: str::match_indices\n\n# Examples\n\n```\nlet v: Vec<_> = \"abcXXXabcYYYabc\".rmatch_indices(\"abc\").collect();\nassert_eq!(v, [(12, \"abc\"), (6, \"abc\"), (0, \"abc\")]);\n\nlet v: Vec<_> = \"1abcabc2\".rmatch_indices(\"abc\").collect();\nassert_eq!(v, [(4, \"abc\"), (1, \"abc\")]);\n\nlet v: Vec<_> = \"ababa\".rmatch_indices(\"aba\").collect();\nassert_eq!(v, [(2, \"aba\")]); // only the last `aba`\n```","links":{"self::pattern":"2:11778:14425","`DoubleEndedIterator`":"2:7306:121","prim@char":"1:11945:418","str::match_indices":"2:12159:35713"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RMatchIndices","id":"2:43726:8442","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11783:14422","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:11783:14422","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11798:14423","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12159:35713":{"id":"2:12159:35713","crate_id":2,"name":"match_indices","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within this string\nslice as well as the index that the match starts at.\n\nFor matches of `pat` within `self` that overlap, only the indices\ncorresponding to the first match are returned.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rmatch_indices`] method can be used.\n\n[`rmatch_indices`]: str::rmatch_indices\n\n# Examples\n\n```\nlet v: Vec<_> = \"abcXXXabcYYYabc\".match_indices(\"abc\").collect();\nassert_eq!(v, [(0, \"abc\"), (6, \"abc\"), (12, \"abc\")]);\n\nlet v: Vec<_> = \"1abcabc2\".match_indices(\"abc\").collect();\nassert_eq!(v, [(1, \"abc\"), (4, \"abc\")]);\n\nlet v: Vec<_> = \"ababa\".match_indices(\"aba\").collect();\nassert_eq!(v, [(0, \"aba\")]); // only the first `aba`\n```","links":{"self::pattern":"2:11778:14425","`DoubleEndedIterator`":"2:7306:121","prim@char":"1:11945:418","str::rmatch_indices":"2:12162:35714"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"MatchIndices","id":"2:43708:8441","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11783:14422","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12122:4137":{"id":"2:12122:4137","crate_id":2,"name":"rfind","span":null,"visibility":"public","docs":"Returns the byte index for the first character of the last match of the pattern in\nthis string slice.\n\nReturns [`None`] if the pattern doesn't match.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nlet s = \"L√∂we ËÄÅËôé L√©opard Gepardi\";\n\nassert_eq!(s.rfind('L'), Some(13));\nassert_eq!(s.rfind('√©'), Some(14));\nassert_eq!(s.rfind(\"pard\"), Some(24));\n```\n\nMore complex patterns with closures:\n\n```\nlet s = \"L√∂we ËÄÅËôé L√©opard\";\n\nassert_eq!(s.rfind(char::is_whitespace), Some(12));\nassert_eq!(s.rfind(char::is_lowercase), Some(20));\n```\n\nNot finding the pattern:\n\n```\nlet s = \"L√∂we ËÄÅËôé L√©opard\";\nlet x: &[_] = &['1', '2'];\n\nassert_eq!(s.rfind(x), None);\n```","links":{"`None`":"2:41591:179","prim@char":"1:11945:418","self::pattern":"2:11778:14425"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:41589:181","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11783:14422","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:11783:14422","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11798:14423","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12201:35724":{"id":"2:12201:35724","crate_id":2,"name":"escape_debug","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_debug`].\n\nNote: only extended grapheme codepoints that begin the string will be\nescaped.\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"‚ù§\\n!\".escape_debug() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"‚ù§\\n!\".escape_debug());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"‚ù§\\\\n!\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"‚ù§\\n!\".escape_debug().to_string(), \"‚ù§\\\\n!\");\n```","links":{"`char::escape_debug`":"2:4538:35724"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EscapeDebug","id":"2:43857:8392","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12173:35720":{"id":"2:12173:35720","crate_id":2,"name":"trim_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes and suffixes that match a\npattern repeatedly removed.\n\nThe [pattern] can be a [`char`], a slice of [`char`]s, or a function\nor closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_matches('1'), \"foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_matches(char::is_numeric), \"foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_matches(x), \"foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1foo1barXX\".trim_matches(|c| c == '1' || c == 'X'), \"foo1bar\");\n```","links":{"prim@char":"1:11945:418","self::pattern":"2:11778:14425"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11783:14422","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:11783:14422","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"DoubleEndedSearcher","id":"2:11803:14421","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5429:36374":{"id":"5:5429:36374","crate_id":5,"name":"replacen","span":null,"visibility":"public","docs":"Replaces first N matches of a pattern with another string.\n\n`replacen` creates a new [`String`], and copies the data from this string slice into it.\nWhile doing so, it attempts to find matches of a pattern. If it finds any, it\nreplaces them with the replacement string slice at most `count` times.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"foo foo 123 foo\";\nassert_eq!(\"new new 123 foo\", s.replacen(\"foo\", \"new\", 2));\nassert_eq!(\"faa fao 123 foo\", s.replacen('o', \"a\", 3));\nassert_eq!(\"foo foo new23 foo\", s.replacen(char::is_numeric, \"new\", 1));\n```\n\nWhen the pattern doesn't match, it returns this string slice as [`String`]:\n\n```\nlet s = \"this is old\";\nassert_eq!(s, s.replacen(\"cookie monster\", \"little lamb\", 10));\n```","links":{"`String`":"5:7280:224"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the replaced string as a new allocation, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}],["to",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}],["count",{"primitive":"usize"}]],"output":{"resolved_path":{"name":"String","id":"5:7280:224","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11783:14422","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12086:35704":{"id":"2:12086:35704","crate_id":2,"name":"as_bytes_mut","span":null,"visibility":"public","docs":"Converts a mutable string slice to a mutable byte slice.\n\n# Safety\n\nThe caller must ensure that the content of the slice is valid UTF-8\nbefore the borrow ends and the underlying `str` is used.\n\nUse of a `str` whose contents are not valid UTF-8 is undefined behavior.\n\n# Examples\n\nBasic usage:\n\n```\nlet mut s = String::from(\"Hello\");\nlet bytes = unsafe { s.as_bytes_mut() };\n\nassert_eq!(b\"Hello\", bytes);\n```\n\nMutability:\n\n```\nlet mut s = String::from(\"üóª‚ààüåè\");\n\nunsafe {\n    let bytes = s.as_bytes_mut();\n\n    bytes[0] = 0xF0;\n    bytes[1] = 0x9F;\n    bytes[2] = 0x8D;\n    bytes[3] = 0x94;\n}\n\nassert_eq!(\"üçî‚ààüåè\", s);\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"slice":{"primitive":"u8"}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"2:12087:314":{"id":"2:12087:314","crate_id":2,"name":"as_ptr","span":null,"visibility":"public","docs":"Converts a string slice to a raw pointer.\n\nAs string slices are a slice of bytes, the raw pointer points to a\n[`u8`]. This pointer will be pointing to the first byte of the string\nslice.\n\nThe caller must ensure that the returned pointer is never written to.\nIf you need to mutate the contents of the string slice, use [`as_mut_ptr`].\n\n[`as_mut_ptr`]: str::as_mut_ptr\n\n# Examples\n\n```\nlet s = \"Hello\";\nlet ptr = s.as_ptr();\n```","links":{"str::as_mut_ptr":"2:12088:27077","`u8`":"1:11962:1507"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"raw_pointer":{"mutable":false,"type":{"primitive":"u8"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12188:35722":{"id":"2:12188:35722","crate_id":2,"name":"trim_left_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. 'Left' in this context means the first\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _right_ side, not the left.\n\n# Examples\n\n```\nassert_eq!(\"11foo1bar11\".trim_left_matches('1'), \"foo1bar11\");\nassert_eq!(\"123foo1bar123\".trim_left_matches(char::is_numeric), \"foo1bar123\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_left_matches(x), \"foo1bar12\");\n```","links":{"prim@char":"1:11945:418","self::pattern":"2:11778:14425"},"attrs":["#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_start_matches`\",\nsuggestion = \"trim_start_matches\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_start_matches`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11783:14422","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12153:3117":{"id":"2:12153:3117","crate_id":2,"name":"matches","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within the given string\nslice.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rmatches`] method can be used.\n\n[`rmatches`]: str::matches\n\n# Examples\n\n```\nlet v: Vec<&str> = \"abcXXXabcYYYabc\".matches(\"abc\").collect();\nassert_eq!(v, [\"abc\", \"abc\", \"abc\"]);\n\nlet v: Vec<&str> = \"1abc2abc3\".matches(char::is_numeric).collect();\nassert_eq!(v, [\"1\", \"2\", \"3\"]);\n```","links":{"self::pattern":"2:11778:14425","`DoubleEndedIterator`":"2:7306:121","prim@char":"1:11945:418","str::matches":"2:12153:3117"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Matches","id":"2:43762:8444","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11783:14422","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12077:816":{"id":"2:12077:816","crate_id":2,"name":"len","span":null,"visibility":"public","docs":"Returns the length of `self`.\n\nThis length is in bytes, not [`char`]s or graphemes. In other words,\nit might not be what a human considers the length of the string.\n\n[`char`]: prim@char\n\n# Examples\n\n```\nlet len = \"foo\".len();\nassert_eq!(3, len);\n\nassert_eq!(\"∆íoo\".len(), 4); // fancy f!\nassert_eq!(\"∆íoo\".chars().count(), 3);\n```","links":{"prim@char":"1:11945:418"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12093:27075":{"id":"2:12093:27075","crate_id":2,"name":"get_unchecked","span":null,"visibility":"public","docs":"Returns an unchecked subslice of `str`.\n\nThis is the unchecked alternative to indexing the `str`.\n\n# Safety\n\nCallers of this function are responsible that these preconditions are\nsatisfied:\n\n* The starting index must not exceed the ending index;\n* Indexes must be within bounds of the original slice;\n* Indexes must lie on UTF-8 sequence boundaries.\n\nFailing that, the returned string slice may reference invalid memory or\nviolate the invariants communicated by the `str` type.\n\n# Examples\n\n```\nlet v = \"üóª‚ààüåè\";\nunsafe {\n    assert_eq!(\"üóª\", v.get_unchecked(0..4));\n    assert_eq!(\"‚àà\", v.get_unchecked(4..7));\n    assert_eq!(\"üåè\", v.get_unchecked(7..11));\n}\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"2:9879:222","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"2:9879:222","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"5:5444:2349":{"id":"5:5444:2349","crate_id":5,"name":"to_ascii_lowercase","span":null,"visibility":"public","docs":"Returns a copy of this string where each character is mapped to its\nASCII lower case equivalent.\n\nASCII letters 'A' to 'Z' are mapped to 'a' to 'z',\nbut non-ASCII letters are unchanged.\n\nTo lowercase the value in-place, use [`make_ascii_lowercase`].\n\nTo lowercase ASCII characters in addition to non-ASCII characters, use\n[`to_lowercase`].\n\n# Examples\n\n```\nlet s = \"Gr√º√üe, J√ºrgen ‚ù§\";\n\nassert_eq!(\"gr√º√üe, j√ºrgen ‚ù§\", s.to_ascii_lowercase());\n```\n\n[`make_ascii_lowercase`]: str::make_ascii_lowercase\n[`to_lowercase`]: #method.to_lowercase","links":{"str::make_ascii_lowercase":"2:12200:4456"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use = \"to lowercase the value in-place, use `make_ascii_lowercase()`\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7280:224","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12088:27077":{"id":"2:12088:27077","crate_id":2,"name":"as_mut_ptr","span":null,"visibility":"public","docs":"Converts a mutable string slice to a raw pointer.\n\nAs string slices are a slice of bytes, the raw pointer points to a\n[`u8`]. This pointer will be pointing to the first byte of the string\nslice.\n\nIt is your responsibility to make sure that the string slice only gets\nmodified in a way that it remains valid UTF-8.","links":{"`u8`":"1:11962:1507"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"raw_pointer":{"mutable":true,"type":{"primitive":"u8"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5426:2065":{"id":"5:5426:2065","crate_id":5,"name":"replace","span":null,"visibility":"public","docs":"Replaces all matches of a pattern with another string.\n\n`replace` creates a new [`String`], and copies the data from this string slice into it.\nWhile doing so, it attempts to find matches of a pattern. If it finds any, it\nreplaces them with the replacement string slice.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"this is old\";\n\nassert_eq!(\"this is new\", s.replace(\"old\", \"new\"));\nassert_eq!(\"than an old\", s.replace(\"is\", \"an\"));\n```\n\nWhen the pattern doesn't match, it returns this string slice as [`String`]:\n\n```\nlet s = \"this is old\";\nassert_eq!(s, s.replace(\"cookie monster\", \"little lamb\"));\n```","links":{"`String`":"5:7280:224"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the replaced string as a new allocation, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["from",{"generic":"P"}],["to",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7280:224","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11783:14422","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5441:36377":{"id":"5:5441:36377","crate_id":5,"name":"into_string","span":null,"visibility":"public","docs":"Converts a [`Box<str>`] into a [`String`] without copying or allocating.\n\n# Examples\n\nBasic usage:\n\n```\nlet string = String::from(\"birthday gift\");\nlet boxed_str = string.clone().into_boxed_str();\n\nassert_eq!(boxed_str.into_string(), string);\n```","links":{"`Box<str>`":"5:273:1883","`String`":"5:7280:224"},"attrs":["#[must_use = \"`self` will be dropped if the result is not used\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"resolved_path":{"name":"Box","id":"5:273:1883","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}},{"type":{"resolved_path":{"name":"Global","id":"5:7013:4471","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}]],"output":{"resolved_path":{"name":"String","id":"5:7280:224","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12107:35707":{"id":"2:12107:35707","crate_id":2,"name":"lines_any","span":null,"visibility":"public","docs":"An iterator over the lines of a string.","links":{},"attrs":["#[deprecated(since = \"1.4.0\", note = \"use lines() instead now\")]"],"deprecation":{"since":"1.4.0","note":"use lines() instead now"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"LinesAny","id":"2:43822:8447","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12150:35711":{"id":"2:12150:35711","crate_id":2,"name":"rsplit_once","span":null,"visibility":"public","docs":"Splits the string on the last occurrence of the specified delimiter and\nreturns prefix before delimiter and suffix after delimiter.\n\n# Examples\n\n```\nassert_eq!(\"cfg\".rsplit_once('='), None);\nassert_eq!(\"cfg=foo\".rsplit_once('='), Some((\"cfg\", \"foo\")));\nassert_eq!(\"cfg=foo=bar\".rsplit_once('='), Some((\"cfg=foo\", \"bar\")));\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["delimiter",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:41589:181","args":{"angle_bracketed":{"args":[{"type":{"tuple":[{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11783:14422","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:11783:14422","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11798:14423","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12185:35721":{"id":"2:12185:35721","crate_id":2,"name":"trim_end_matches","span":null,"visibility":"public","docs":"Returns a string slice with all suffixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. `end` in this context means the last\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be right side, and for right-to-left languages like\nArabic or Hebrew, this will be the left side.\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_end_matches('1'), \"11foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_end_matches(char::is_numeric), \"123foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_end_matches(x), \"12foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1fooX\".trim_end_matches(|c| c == '1' || c == 'X'), \"1foo\");\n```","links":{"prim@char":"1:11945:418","self::pattern":"2:11778:14425"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11783:14422","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:11783:14422","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11798:14423","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5425:36373":{"id":"5:5425:36373","crate_id":5,"name":"into_boxed_bytes","span":null,"visibility":"public","docs":"Converts a `Box<str>` into a `Box<[u8]>` without copying or allocating.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"this is a string\";\nlet boxed_str = s.to_owned().into_boxed_str();\nlet boxed_bytes = boxed_str.into_boxed_bytes();\nassert_eq!(*boxed_bytes, *s.as_bytes());\n```","links":{},"attrs":["#[must_use = \"`self` will be dropped if the result is not used\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"resolved_path":{"name":"Box","id":"5:273:1883","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}},{"type":{"resolved_path":{"name":"Global","id":"5:7013:4471","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}]],"output":{"resolved_path":{"name":"Box","id":"5:273:1883","args":{"angle_bracketed":{"args":[{"type":{"slice":{"primitive":"u8"}}},{"type":{"resolved_path":{"name":"Global","id":"5:7013:4471","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5442:3317":{"id":"5:5442:3317","crate_id":5,"name":"repeat","span":null,"visibility":"public","docs":"Creates a new [`String`] by repeating a string `n` times.\n\n# Panics\n\nThis function will panic if the capacity would overflow.\n\n# Examples\n\nBasic usage:\n\n```\nassert_eq!(\"abc\".repeat(4), String::from(\"abcabcabcabc\"));\n```\n\nA panic upon overflow:\n\n```should_panic\n// this will panic at runtime\nlet huge = \"0123456789abcdef\".repeat(usize::MAX);\n```","links":{"`String`":"5:7280:224"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["n",{"primitive":"usize"}]],"output":{"resolved_path":{"name":"String","id":"5:7280:224","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12191:35723":{"id":"2:12191:35723","crate_id":2,"name":"trim_right_matches","span":null,"visibility":"public","docs":"Returns a string slice with all suffixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. 'Right' in this context means the last\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _left_ side, not the right.\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_right_matches('1'), \"11foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_right_matches(char::is_numeric), \"123foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_right_matches(x), \"12foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1fooX\".trim_right_matches(|c| c == '1' || c == 'X'), \"1foo\");\n```","links":{"prim@char":"1:11945:418","self::pattern":"2:11778:14425"},"attrs":["#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_end_matches`\",\nsuggestion = \"trim_end_matches\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_end_matches`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11783:14422","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:11783:14422","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11798:14423","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:8:1814":{"id":"0:8:1814","crate_id":0,"name":"ast","span":{"filename":"src/internals/ast.rs","begin":[1,0],"end":[215,1]},"visibility":"public","docs":"A Serde ast, parsed from the Syn ast and ready to generate Rust code.","links":{},"attrs":[],"deprecation":null,"inner":{"module":{"is_crate":false,"items":[],"is_stripped":false}}},"2:12078:2035":{"id":"2:12078:2035","crate_id":2,"name":"is_empty","span":null,"visibility":"public","docs":"Returns `true` if `self` has a length of zero bytes.\n\n# Examples\n\n```\nlet s = \"\";\nassert!(s.is_empty());\n\nlet s = \"not empty\";\nassert!(!s.is_empty());\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5424":{"id":"5:5424","crate_id":5,"name":null,"span":null,"visibility":"default","docs":"Methods for string slices.","links":{},"attrs":["#[cfg(not(test))]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"primitive":"str"},"items":["5:5425:36373","5:5426:2065","5:5429:36374","5:5432:36375","5:5440:36376","5:5441:36377","5:5442:3317","5:5443:2350","5:5444:2349"],"negative":false,"synthetic":false,"blanket_impl":null}}},"2:12141:27113":{"id":"2:12141:27113","crate_id":2,"name":"splitn","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by a\npattern, restricted to returning at most `n` items.\n\nIf `n` substrings are returned, the last substring (the `n`th substring)\nwill contain the remainder of the string.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will not be double ended, because it is\nnot efficient to support.\n\nIf the pattern allows a reverse search, the [`rsplitn`] method can be\nused.\n\n[`rsplitn`]: str::rsplitn\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lambda\".splitn(3, ' ').collect();\nassert_eq!(v, [\"Mary\", \"had\", \"a little lambda\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".splitn(3, \"X\").collect();\nassert_eq!(v, [\"lion\", \"\", \"tigerXleopard\"]);\n\nlet v: Vec<&str> = \"abcXdef\".splitn(1, 'X').collect();\nassert_eq!(v, [\"abcXdef\"]);\n\nlet v: Vec<&str> = \"\".splitn(1, 'X').collect();\nassert_eq!(v, [\"\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".splitn(2, |c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"abc\", \"defXghi\"]);\n```","links":{"prim@char":"1:11945:418","self::pattern":"2:11778:14425","str::rsplitn":"2:12144:27115"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["n",{"primitive":"usize"}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"SplitN","id":"2:43662:8438","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11783:14422","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12165:35715":{"id":"2:12165:35715","crate_id":2,"name":"trim","span":null,"visibility":"public","docs":"Returns a string slice with leading and trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Examples\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\n\nassert_eq!(\"Hello\\tworld\", s.trim());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a slice, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_trim\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:326-0:970:1816":{"id":"0:326-0:970:1816","crate_id":0,"name":null,"span":{"filename":"src/internals/mod.rs","begin":[5,0],"end":[5,25]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"import":{"source":"self::ctxt::Ctxt","name":"Ctxt","id":"0:970:1816","glob":false}}},"2:12095:27076":{"id":"2:12095:27076","crate_id":2,"name":"get_unchecked_mut","span":null,"visibility":"public","docs":"Returns a mutable, unchecked subslice of `str`.\n\nThis is the unchecked alternative to indexing the `str`.\n\n# Safety\n\nCallers of this function are responsible that these preconditions are\nsatisfied:\n\n* The starting index must not exceed the ending index;\n* Indexes must be within bounds of the original slice;\n* Indexes must lie on UTF-8 sequence boundaries.\n\nFailing that, the returned string slice may reference invalid memory or\nviolate the invariants communicated by the `str` type.\n\n# Examples\n\n```\nlet mut v = String::from(\"üóª‚ààüåè\");\nunsafe {\n    assert_eq!(\"üóª\", v.get_unchecked_mut(0..4));\n    assert_eq!(\"‚àà\", v.get_unchecked_mut(4..7));\n    assert_eq!(\"üåè\", v.get_unchecked_mut(7..11));\n}\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"2:9879:222","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"2:9879:222","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"2:12176:1948":{"id":"2:12176:1948","crate_id":2,"name":"trim_start_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. `start` in this context means the first\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be left side, and for right-to-left languages like\nArabic or Hebrew, this will be the right side.\n\n# Examples\n\n```\nassert_eq!(\"11foo1bar11\".trim_start_matches('1'), \"foo1bar11\");\nassert_eq!(\"123foo1bar123\".trim_start_matches(char::is_numeric), \"foo1bar123\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_start_matches(x), \"foo1bar12\");\n```","links":{"prim@char":"1:11945:418","self::pattern":"2:11778:14425"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11783:14422","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12097:35705":{"id":"2:12097:35705","crate_id":2,"name":"slice_unchecked","span":null,"visibility":"public","docs":"Creates a string slice from another string slice, bypassing safety\nchecks.\n\nThis is generally not recommended, use with caution! For a safe\nalternative see [`str`] and [`Index`].\n\n[`Index`]: crate::ops::Index\n\nThis new slice goes from `begin` to `end`, including `begin` but\nexcluding `end`.\n\nTo get a mutable string slice instead, see the\n[`slice_mut_unchecked`] method.\n\n[`slice_mut_unchecked`]: str::slice_mut_unchecked\n\n# Safety\n\nCallers of this function are responsible that three preconditions are\nsatisfied:\n\n* `begin` must not exceed `end`.\n* `begin` and `end` must be byte positions within the string slice.\n* `begin` and `end` must lie on UTF-8 sequence boundaries.\n\n# Examples\n\n```\nlet s = \"L√∂we ËÄÅËôé L√©opard\";\n\nunsafe {\n    assert_eq!(\"L√∂we ËÄÅËôé L√©opard\", s.slice_unchecked(0, 21));\n}\n\nlet s = \"Hello, world!\";\n\nunsafe {\n    assert_eq!(\"world\", s.slice_unchecked(7, 12));\n}\n```","links":{"`str`":"1:11951:1404","str::slice_mut_unchecked":"2:12098:35706","crate::ops::Index":"2:2980:2309"},"attrs":["#[deprecated(since = \"1.29.0\", note =\n\"use `get_unchecked(begin..end)` instead\")]","#[must_use]"],"deprecation":{"since":"1.29.0","note":"use `get_unchecked(begin..end)` instead"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["begin",{"primitive":"usize"}],["end",{"primitive":"usize"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"0:375-0:351:1817":{"id":"0:375-0:351:1817","crate_id":0,"name":null,"span":{"filename":"src/internals/mod.rs","begin":[8,0],"end":[8,41]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"import":{"source":"self::receiver::replace_receiver","name":"replace_receiver","id":"0:351:1817","glob":false}}},"2:12135:35708":{"id":"2:12135:35708","crate_id":2,"name":"split_terminator","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by\ncharacters matched by a pattern.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\nEquivalent to [`split`], except that the trailing substring\nis skipped if empty.\n\n[`split`]: str::split\n\nThis method can be used for string data that is _terminated_,\nrather than _separated_ by a pattern.\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rsplit_terminator`] method can be used.\n\n[`rsplit_terminator`]: str::rsplit_terminator\n\n# Examples\n\n```\nlet v: Vec<&str> = \"A.B.\".split_terminator('.').collect();\nassert_eq!(v, [\"A\", \"B\"]);\n\nlet v: Vec<&str> = \"A..B..\".split_terminator(\".\").collect();\nassert_eq!(v, [\"A\", \"\", \"B\", \"\"]);\n\nlet v: Vec<&str> = \"A.B:C.D\".split_terminator(&['.', ':'][..]).collect();\nassert_eq!(v, [\"A\", \"B\", \"C\", \"D\"]);\n```","links":{"self::pattern":"2:11778:14425","str::split":"2:12126:27107","prim@char":"1:11945:418","`DoubleEndedIterator`":"2:7306:121","str::rsplit_terminator":"2:12138:35709"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"SplitTerminator","id":"2:43608:8435","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11783:14422","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12204:35725":{"id":"2:12204:35725","crate_id":2,"name":"escape_unicode","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_unicode`].\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"‚ù§\\n!\".escape_unicode() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"‚ù§\\n!\".escape_unicode());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"\\\\u{{2764}}\\\\u{{a}}\\\\u{{21}}\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"‚ù§\\n!\".escape_unicode().to_string(), \"\\\\u{2764}\\\\u{a}\\\\u{21}\");\n```","links":{"`char::escape_unicode`":"2:4536:35725"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EscapeUnicode","id":"2:43875:8391","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:946:1694":{"id":"0:946:1694","crate_id":0,"name":"Serialize","span":{"filename":"src/lib.rs","begin":[92,0],"end":[97,1]},"visibility":"public","docs":null,"links":{},"attrs":["#[proc_macro_derive(Serialize, attributes(serde))]"],"deprecation":null,"inner":{"proc_macro":{"kind":"derive","helpers":["serde"]}}},"2:12129:27109":{"id":"2:12129:27109","crate_id":2,"name":"split_inclusive","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by\ncharacters matched by a pattern. Differs from the iterator produced by\n`split` in that `split_inclusive` leaves the matched part as the\nterminator of the substring.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\\nlittle lamb\\nlittle lamb.\"\n    .split_inclusive('\\n').collect();\nassert_eq!(v, [\"Mary had a little lamb\\n\", \"little lamb\\n\", \"little lamb.\"]);\n```\n\nIf the last element of the string is matched,\nthat element will be considered the terminator of the preceding substring.\nThat substring will be the last item returned by the iterator.\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\\nlittle lamb\\nlittle lamb.\\n\"\n    .split_inclusive('\\n').collect();\nassert_eq!(v, [\"Mary had a little lamb\\n\", \"little lamb\\n\", \"little lamb.\\n\"]);\n```","links":{"prim@char":"1:11945:418","self::pattern":"2:11778:14425"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"SplitInclusive","id":"2:11601:8361","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11783:14422","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12144:27115":{"id":"2:12144:27115","crate_id":2,"name":"rsplitn","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by a\npattern, starting from the end of the string, restricted to returning\nat most `n` items.\n\nIf `n` substrings are returned, the last substring (the `n`th substring)\nwill contain the remainder of the string.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will not be double ended, because it is not\nefficient to support.\n\nFor splitting from the front, the [`splitn`] method can be used.\n\n[`splitn`]: str::splitn\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".rsplitn(3, ' ').collect();\nassert_eq!(v, [\"lamb\", \"little\", \"Mary had a\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".rsplitn(3, 'X').collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"lionX\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".rsplitn(2, \"::\").collect();\nassert_eq!(v, [\"leopard\", \"lion::tiger\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".rsplitn(2, |c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"ghi\", \"abc1def\"]);\n```","links":{"prim@char":"1:11945:418","str::splitn":"2:12141:27113","self::pattern":"2:11778:14425"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["n",{"primitive":"usize"}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RSplitN","id":"2:43680:8439","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11783:14422","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:11783:14422","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11798:14423","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12203:3422":{"id":"2:12203:3422","crate_id":2,"name":"escape_default","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_default`].\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"‚ù§\\n!\".escape_default() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"‚ù§\\n!\".escape_default());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"\\\\u{{2764}}\\\\n!\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"‚ù§\\n!\".escape_default().to_string(), \"\\\\u{2764}\\\\n!\");\n```","links":{"`char::escape_default`":"2:4539:3422"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EscapeDefault","id":"2:43866:3423","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12098:35706":{"id":"2:12098:35706","crate_id":2,"name":"slice_mut_unchecked","span":null,"visibility":"public","docs":"Creates a string slice from another string slice, bypassing safety\nchecks.\nThis is generally not recommended, use with caution! For a safe\nalternative see [`str`] and [`IndexMut`].\n\n[`IndexMut`]: crate::ops::IndexMut\n\nThis new slice goes from `begin` to `end`, including `begin` but\nexcluding `end`.\n\nTo get an immutable string slice instead, see the\n[`slice_unchecked`] method.\n\n[`slice_unchecked`]: str::slice_unchecked\n\n# Safety\n\nCallers of this function are responsible that three preconditions are\nsatisfied:\n\n* `begin` must not exceed `end`.\n* `begin` and `end` must be byte positions within the string slice.\n* `begin` and `end` must lie on UTF-8 sequence boundaries.","links":{"`str`":"1:11951:1404","crate::ops::IndexMut":"2:2984:3275","str::slice_unchecked":"2:12097:35705"},"attrs":["#[deprecated(since = \"1.29.0\", note =\n\"use `get_unchecked_mut(begin..end)` instead\")]"],"deprecation":{"since":"1.29.0","note":"use `get_unchecked_mut(begin..end)` instead"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["begin",{"primitive":"usize"}],["end",{"primitive":"usize"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"2:12085:2784":{"id":"2:12085:2784","crate_id":2,"name":"as_bytes","span":null,"visibility":"public","docs":"Converts a string slice to a byte slice. To convert the byte slice back\ninto a string slice, use the [`from_utf8`] function.\n\n# Examples\n\n```\nlet bytes = \"bors\".as_bytes();\nassert_eq!(b\"bors\", bytes);\n```","links":{"`from_utf8`":"2:11345:14426"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"primitive":"u8"}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12115:27118":{"id":"2:12115:27118","crate_id":2,"name":"ends_with","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a suffix of this\nstring slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.ends_with(\"anas\"));\nassert!(!bananas.ends_with(\"nana\"));\n```","links":{"prim@char":"1:11945:418","self::pattern":"2:11778:14425"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11783:14422","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:11783:14422","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11798:14423","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12104:33425":{"id":"2:12104:33425","crate_id":2,"name":"split_whitespace","span":null,"visibility":"public","docs":"Splits a string slice by whitespace.\n\nThe iterator returned will return string slices that are sub-slices of\nthe original string slice, separated by any amount of whitespace.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`. If you only want to split on ASCII whitespace\ninstead, use [`split_ascii_whitespace`].\n\n[`split_ascii_whitespace`]: str::split_ascii_whitespace\n\n# Examples\n\nBasic usage:\n\n```\nlet mut iter = \"A few words\".split_whitespace();\n\nassert_eq!(Some(\"A\"), iter.next());\nassert_eq!(Some(\"few\"), iter.next());\nassert_eq!(Some(\"words\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nAll kinds of whitespace are considered:\n\n```\nlet mut iter = \" Mary   had\\ta\\u{2009}little  \\n\\t lamb\".split_whitespace();\nassert_eq!(Some(\"Mary\"), iter.next());\nassert_eq!(Some(\"had\"), iter.next());\nassert_eq!(Some(\"a\"), iter.next());\nassert_eq!(Some(\"little\"), iter.next());\nassert_eq!(Some(\"lamb\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nIf the string is empty or all whitespace, the iterator yields no string slices:\n```\nassert_eq!(\"\".split_whitespace().next(), None);\nassert_eq!(\"   \".split_whitespace().next(), None);\n```","links":{"str::split_ascii_whitespace":"2:12105:33428"},"attrs":["#[must_use =\n\"this returns the split string as an iterator, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_split_whitespace\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"SplitWhitespace","id":"2:43832:8448","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12102:2353":{"id":"2:12102:2353","crate_id":2,"name":"char_indices","span":null,"visibility":"public","docs":"Returns an iterator over the [`char`]s of a string slice, and their\npositions.\n\nAs a string slice consists of valid UTF-8, we can iterate through a\nstring slice by [`char`]. This method returns an iterator of both\nthese [`char`]s, as well as their byte positions.\n\nThe iterator yields tuples. The position is first, the [`char`] is\nsecond.\n\n# Examples\n\nBasic usage:\n\n```\nlet word = \"goodbye\";\n\nlet count = word.char_indices().count();\nassert_eq!(7, count);\n\nlet mut char_indices = word.char_indices();\n\nassert_eq!(Some((0, 'g')), char_indices.next());\nassert_eq!(Some((1, 'o')), char_indices.next());\nassert_eq!(Some((2, 'o')), char_indices.next());\nassert_eq!(Some((3, 'd')), char_indices.next());\nassert_eq!(Some((4, 'b')), char_indices.next());\nassert_eq!(Some((5, 'y')), char_indices.next());\nassert_eq!(Some((6, 'e')), char_indices.next());\n\nassert_eq!(None, char_indices.next());\n```\n\nRemember, [`char`]s might not match your intuition about characters:\n\n[`char`]: prim@char\n\n```\nlet yes = \"yÃÜes\";\n\nlet mut char_indices = yes.char_indices();\n\nassert_eq!(Some((0, 'y')), char_indices.next()); // not (0, 'yÃÜ')\nassert_eq!(Some((1, '\\u{0306}')), char_indices.next());\n\n// note the 3 here - the last character took up two bytes\nassert_eq!(Some((3, 'e')), char_indices.next());\nassert_eq!(Some((4, 's')), char_indices.next());\n\nassert_eq!(None, char_indices.next());\n```","links":{"prim@char":"1:11945:418"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"CharIndices","id":"2:43534:8430","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12197:28274":{"id":"2:12197:28274","crate_id":2,"name":"as_ascii","span":null,"visibility":"public","docs":"If this string slice [`is_ascii`](Self::is_ascii), returns it as a slice\nof [ASCII characters](`ascii::Char`), otherwise returns `None`.","links":{"`ascii::Char`":"2:39628:3424","Self::is_ascii":"2:12196:4453"},"attrs":["#[unstable(feature = \"ascii_char\", issue = \"110998\")]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Option","id":"2:41589:181","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"resolved_path":{"name":"AsciiChar","id":"2:39628:3424","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5432:36375":{"id":"5:5432:36375","crate_id":5,"name":"to_lowercase","span":null,"visibility":"public","docs":"Returns the lowercase equivalent of this string slice, as a new [`String`].\n\n'Lowercase' is defined according to the terms of the Unicode Derived Core Property\n`Lowercase`.\n\nSince some characters can expand into multiple characters when changing\nthe case, this function returns a [`String`] instead of modifying the\nparameter in-place.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"HELLO\";\n\nassert_eq!(\"hello\", s.to_lowercase());\n```\n\nA tricky example, with sigma:\n\n```\nlet sigma = \"Œ£\";\n\nassert_eq!(\"œÉ\", sigma.to_lowercase());\n\n// but at the end of a word, it's œÇ, not œÉ:\nlet odysseus = \"·ΩàŒîŒ•Œ£Œ£ŒïŒéŒ£\";\n\nassert_eq!(\"·ΩÄŒ¥œÖœÉœÉŒµœçœÇ\", odysseus.to_lowercase());\n```\n\nLanguages without case are not changed:\n\n```\nlet new_year = \"ÂÜúÂéÜÊñ∞Âπ¥\";\n\nassert_eq!(new_year, new_year.to_lowercase());\n```","links":{"`String`":"5:7280:224"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the lowercase string as a new String, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7280:224","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12082:35703":{"id":"2:12082:35703","crate_id":2,"name":"ceil_char_boundary","span":null,"visibility":"public","docs":"Finds the closest `x` not below `index` where `is_char_boundary(x)` is `true`.\n\nThis method is the natural complement to [`floor_char_boundary`]. See that method\nfor more details.\n\n[`floor_char_boundary`]: str::floor_char_boundary\n\n# Panics\n\nPanics if `index > self.len()`.\n\n# Examples\n\n```\n#![feature(round_char_boundary)]\nlet s = \"‚ù§Ô∏èüß°üíõüíöüíôüíú\";\nassert_eq!(s.len(), 26);\nassert!(!s.is_char_boundary(13));\n\nlet closest = s.ceil_char_boundary(13);\nassert_eq!(closest, 14);\nassert_eq!(&s[..closest], \"‚ù§Ô∏èüß°üíõ\");\n```","links":{"str::floor_char_boundary":"2:12080:35702"},"attrs":["#[unstable(feature = \"round_char_boundary\", issue = \"93743\")]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["index",{"primitive":"usize"}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5440:36376":{"id":"5:5440:36376","crate_id":5,"name":"to_uppercase","span":null,"visibility":"public","docs":"Returns the uppercase equivalent of this string slice, as a new [`String`].\n\n'Uppercase' is defined according to the terms of the Unicode Derived Core Property\n`Uppercase`.\n\nSince some characters can expand into multiple characters when changing\nthe case, this function returns a [`String`] instead of modifying the\nparameter in-place.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"hello\";\n\nassert_eq!(\"HELLO\", s.to_uppercase());\n```\n\nScripts without case are not changed:\n\n```\nlet new_year = \"ÂÜúÂéÜÊñ∞Âπ¥\";\n\nassert_eq!(new_year, new_year.to_uppercase());\n```\n\nOne character can become multiple:\n```\nlet s = \"tsch√º√ü\";\n\nassert_eq!(\"TSCH√úSS\", s.to_uppercase());\n```","links":{"`String`":"5:7280:224"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the uppercase string as a new String, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7280:224","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12108:33459":{"id":"2:12108:33459","crate_id":2,"name":"encode_utf16","span":null,"visibility":"public","docs":"Returns an iterator of `u16` over the string encoded as UTF-16.\n\n# Examples\n\n```\nlet text = \"Za≈º√≥≈Çƒá gƒô≈õlƒÖ ja≈∫≈Ñ\";\n\nlet utf8_len = text.len();\nlet utf16_len = text.encode_utf16().count();\n\nassert!(utf16_len <= utf8_len);\n```","links":{},"attrs":["#[must_use =\n\"this returns the encoded string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EncodeUtf16","id":"2:43850:8450","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:0:1706":{"id":"0:0:1706","crate_id":0,"name":"serde_derive","span":{"filename":"src/lib.rs","begin":[1,0],"end":[105,1]},"visibility":"public","docs":"This crate provides Serde's two derive macros.\n\n```edition2021\n# use serde_derive::{Deserialize, Serialize};\n#\n#[derive(Serialize, Deserialize)]\n# struct S;\n#\n# fn main() {}\n```\n\nPlease refer to [https://serde.rs/derive.html] for how to set this up.\n\n[https://serde.rs/derive.html]: https://serde.rs/derive.html","links":{},"attrs":["#![doc(html_root_url = \"https://docs.rs/serde_derive/1.0.168\")]","#![allow(unknown_lints, bare_trait_objects)]","#![allow(clippy :: branches_sharing_code, clippy :: cognitive_complexity,\nclippy :: collapsible_match, clippy :: derive_partial_eq_without_eq, clippy ::\nenum_variant_names, clippy :: manual_map, clippy :: match_like_matches_macro,\nclippy :: needless_pass_by_value, clippy :: too_many_arguments, clippy ::\ntrivially_copy_pass_by_ref, clippy :: used_underscore_binding, clippy ::\nwildcard_in_or_patterns, clippy :: unnested_or_patterns,)]","#![allow(clippy :: cast_possible_truncation, clippy :: checked_conversions,\nclippy :: doc_markdown, clippy :: enum_glob_use, clippy :: indexing_slicing,\nclippy :: items_after_statements, clippy :: let_underscore_untyped, clippy ::\nmanual_assert, clippy :: map_err_ignore, clippy :: match_same_arms, clippy ::\nmatch_wildcard_for_single_variants, clippy :: module_name_repetitions, clippy\n:: must_use_candidate, clippy :: option_if_let_else, clippy :: similar_names,\nclippy :: single_match_else, clippy :: struct_excessive_bools, clippy ::\ntoo_many_lines, clippy :: unseparated_literal_suffix, clippy :: unused_self,\nclippy :: use_self, clippy :: wildcard_imports)]"],"deprecation":null,"inner":{"module":{"is_crate":true,"items":["0:946:1694","0:947:1703"],"is_stripped":false}}},"2:12112:27117":{"id":"2:12112:27117","crate_id":2,"name":"starts_with","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a prefix of this\nstring slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.starts_with(\"bana\"));\nassert!(!bananas.starts_with(\"nana\"));\n```","links":{"prim@char":"1:11945:418","self::pattern":"2:11778:14425"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11783:14422","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12138:35709":{"id":"2:12138:35709","crate_id":2,"name":"rsplit_terminator","span":null,"visibility":"public","docs":"An iterator over substrings of `self`, separated by characters\nmatched by a pattern and yielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\nEquivalent to [`split`], except that the trailing substring is\nskipped if empty.\n\n[`split`]: str::split\n\nThis method can be used for string data that is _terminated_,\nrather than _separated_ by a pattern.\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a\nreverse search, and it will be double ended if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`split_terminator`] method can be\nused.\n\n[`split_terminator`]: str::split_terminator\n\n# Examples\n\n```\nlet v: Vec<&str> = \"A.B.\".rsplit_terminator('.').collect();\nassert_eq!(v, [\"B\", \"A\"]);\n\nlet v: Vec<&str> = \"A..B..\".rsplit_terminator(\".\").collect();\nassert_eq!(v, [\"\", \"B\", \"\", \"A\"]);\n\nlet v: Vec<&str> = \"A.B:C.D\".rsplit_terminator(&['.', ':'][..]).collect();\nassert_eq!(v, [\"D\", \"C\", \"B\", \"A\"]);\n```","links":{"self::pattern":"2:11778:14425","str::split":"2:12126:27107","prim@char":"1:11945:418","str::split_terminator":"2:12135:35708"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RSplitTerminator","id":"2:43626:8436","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11783:14422","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:11783:14422","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11798:14423","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12199:4455":{"id":"2:12199:4455","crate_id":2,"name":"make_ascii_uppercase","span":null,"visibility":"public","docs":"Converts this string to its ASCII upper case equivalent in-place.\n\nASCII letters 'a' to 'z' are mapped to 'A' to 'Z',\nbut non-ASCII letters are unchanged.\n\nTo return a new uppercased value without modifying the existing one, use\n[`to_ascii_uppercase()`].\n\n[`to_ascii_uppercase()`]: #method.to_ascii_uppercase\n\n# Examples\n\n```\nlet mut s = String::from(\"Gr√º√üe, J√ºrgen ‚ù§\");\n\ns.make_ascii_uppercase();\n\nassert_eq!(\"GR√º√üE, J√ºRGEN ‚ù§\", s);\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12126:27107":{"id":"2:12126:27107","crate_id":2,"name":"split","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by\ncharacters matched by a pattern.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rsplit`] method can be used.\n\n[`rsplit`]: str::rsplit\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".split(' ').collect();\nassert_eq!(v, [\"Mary\", \"had\", \"a\", \"little\", \"lamb\"]);\n\nlet v: Vec<&str> = \"\".split('X').collect();\nassert_eq!(v, [\"\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".split('X').collect();\nassert_eq!(v, [\"lion\", \"\", \"tiger\", \"leopard\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".split(\"::\").collect();\nassert_eq!(v, [\"lion\", \"tiger\", \"leopard\"]);\n\nlet v: Vec<&str> = \"abc1def2ghi\".split(char::is_numeric).collect();\nassert_eq!(v, [\"abc\", \"def\", \"ghi\"]);\n\nlet v: Vec<&str> = \"lionXtigerXleopard\".split(char::is_uppercase).collect();\nassert_eq!(v, [\"lion\", \"tiger\", \"leopard\"]);\n```\n\nIf the pattern is a slice of chars, split on each occurrence of any of the characters:\n\n```\nlet v: Vec<&str> = \"2020-11-03 23:59\".split(&['-', ' ', ':', '@'][..]).collect();\nassert_eq!(v, [\"2020\", \"11\", \"03\", \"23\", \"59\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".split(|c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"abc\", \"def\", \"ghi\"]);\n```\n\nIf a string contains multiple contiguous separators, you will end up\nwith empty strings in the output:\n\n```\nlet x = \"||||a||b|c\".to_string();\nlet d: Vec<_> = x.split('|').collect();\n\nassert_eq!(d, &[\"\", \"\", \"\", \"\", \"a\", \"\", \"b\", \"c\"]);\n```\n\nContiguous separators are separated by the empty string.\n\n```\nlet x = \"(///)\".to_string();\nlet d: Vec<_> = x.split('/').collect();\n\nassert_eq!(d, &[\"(\", \"\", \"\", \")\"]);\n```\n\nSeparators at the start or end of a string are neighbored\nby empty strings.\n\n```\nlet d: Vec<_> = \"010\".split(\"0\").collect();\nassert_eq!(d, &[\"\", \"1\", \"\"]);\n```\n\nWhen the empty string is used as a separator, it separates\nevery character in the string, along with the beginning\nand end of the string.\n\n```\nlet f: Vec<_> = \"rust\".split(\"\").collect();\nassert_eq!(f, &[\"\", \"r\", \"u\", \"s\", \"t\", \"\"]);\n```\n\nContiguous separators can lead to possibly surprising behavior\nwhen whitespace is used as the separator. This code is correct:\n\n```\nlet x = \"    a  b c\".to_string();\nlet d: Vec<_> = x.split(' ').collect();\n\nassert_eq!(d, &[\"\", \"\", \"\", \"\", \"a\", \"\", \"b\", \"c\"]);\n```\n\nIt does _not_ give you:\n\n```,ignore\nassert_eq!(d, &[\"a\", \"b\", \"c\"]);\n```\n\nUse [`split_whitespace`] for this behavior.\n\n[`split_whitespace`]: str::split_whitespace","links":{"self::pattern":"2:11778:14425","`DoubleEndedIterator`":"2:7306:121","prim@char":"1:11945:418","str::split_whitespace":"2:12104:33425","str::rsplit":"2:12132:27111"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Split","id":"2:43558:8359","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11783:14422","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12200:4456":{"id":"2:12200:4456","crate_id":2,"name":"make_ascii_lowercase","span":null,"visibility":"public","docs":"Converts this string to its ASCII lower case equivalent in-place.\n\nASCII letters 'A' to 'Z' are mapped to 'a' to 'z',\nbut non-ASCII letters are unchanged.\n\nTo return a new lowercased value without modifying the existing one, use\n[`to_ascii_lowercase()`].\n\n[`to_ascii_lowercase()`]: #method.to_ascii_lowercase\n\n# Examples\n\n```\nlet mut s = String::from(\"GR√ú√üE, J√úRGEN ‚ù§\");\n\ns.make_ascii_lowercase();\n\nassert_eq!(\"gr√ú√üe, j√úrgen ‚ù§\", s);\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12099:2682":{"id":"2:12099:2682","crate_id":2,"name":"split_at","span":null,"visibility":"public","docs":"Divide one string slice into two at an index.\n\nThe argument, `mid`, should be a byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get mutable string slices instead, see the [`split_at_mut`]\nmethod.\n\n[`split_at_mut`]: str::split_at_mut\n\n# Panics\n\nPanics if `mid` is not on a UTF-8 code point boundary, or if it is\npast the end of the last code point of the string slice.\n\n# Examples\n\n```\nlet s = \"Per Martin-L√∂f\";\n\nlet (first, last) = s.split_at(3);\n\nassert_eq!(\"Per\", first);\nassert_eq!(\" Martin-L√∂f\", last);\n```","links":{"str::split_at_mut":"2:12100:27100"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["mid",{"primitive":"usize"}]],"output":{"tuple":[{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12182:27119":{"id":"2:12182:27119","crate_id":2,"name":"strip_suffix","span":null,"visibility":"public","docs":"Returns a string slice with the suffix removed.\n\nIf the string ends with the pattern `suffix`, returns the substring before the suffix,\nwrapped in `Some`.  Unlike `trim_end_matches`, this method removes the suffix exactly once.\n\nIf the string does not end with `suffix`, returns `None`.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nassert_eq!(\"bar:foo\".strip_suffix(\":foo\"), Some(\"bar\"));\nassert_eq!(\"bar:foo\".strip_suffix(\"bar\"), None);\nassert_eq!(\"foofoo\".strip_suffix(\"foo\"), Some(\"foo\"));\n```","links":{"prim@char":"1:11945:418","self::pattern":"2:11778:14425"},"attrs":["#[must_use =\n\"this returns the remaining substring as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["suffix",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:41589:181","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11783:14422","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:11783:14422","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11798:14423","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12194:1910":{"id":"2:12194:1910","crate_id":2,"name":"parse","span":null,"visibility":"public","docs":"Parses this string slice into another type.\n\nBecause `parse` is so general, it can cause problems with type\ninference. As such, `parse` is one of the few times you'll see\nthe syntax affectionately known as the 'turbofish': `::<>`. This\nhelps the inference algorithm understand specifically which type\nyou're trying to parse into.\n\n`parse` can parse into any type that implements the [`FromStr`] trait.\n\n# Errors\n\nWill return [`Err`] if it's not possible to parse this string slice into\nthe desired type.\n\n[`Err`]: FromStr::Err\n\n# Examples\n\nBasic usage\n\n```\nlet four: u32 = \"4\".parse().unwrap();\n\nassert_eq!(4, four);\n```\n\nUsing the 'turbofish' instead of annotating `four`:\n\n```\nlet four = \"4\".parse::<u32>();\n\nassert_eq!(Ok(4), four);\n```\n\nFailing to parse:\n\n```\nlet nope = \"j\".parse::<u32>();\n\nassert!(nope.is_err());\n```","links":{"FromStr::Err":"2:11739:127","`FromStr`":"2:11738:3290"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Result","id":"2:41733:210","args":{"angle_bracketed":{"args":[{"type":{"generic":"F"}},{"type":{"qualified_path":{"name":"Err","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"F"},"trait":{"name":"FromStr","id":"2:11738:3290","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"F"},"bounds":[{"trait_bound":{"trait":{"name":"FromStr","id":"2:11738:3290","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:947:1703":{"id":"0:947:1703","crate_id":0,"name":"Deserialize","span":{"filename":"src/lib.rs","begin":[100,0],"end":[105,1]},"visibility":"public","docs":null,"links":{},"attrs":["#[proc_macro_derive(Deserialize, attributes(serde))]"],"deprecation":null,"inner":{"proc_macro":{"kind":"derive","helpers":["serde"]}}}},"paths":{"22:902:1825":{"crate_id":22,"path":["proc_macro2","Group"],"kind":"struct"},"2:43726:8442":{"crate_id":2,"path":["core","str","iter","RMatchIndices"],"kind":"struct"},"17:14380:6076":{"crate_id":17,"path":["object","pe","NonPagedDebugInfo"],"kind":"struct"},"17:9840:21299":{"crate_id":17,"path":["object","read","archive","ArchiveMemberIterator"],"kind":"struct"},"24:4868:3207":{"crate_id":24,"path":["syn","expr","ExprMethodCall"],"kind":"struct"},"2:43336:8363":{"crate_id":2,"path":["core","slice","iter","Windows"],"kind":"struct"},"6:6711:7428":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_fpxreg"],"kind":"struct"},"17:10812:5334":{"crate_id":17,"path":["object","read","macho","segment","MachOSegmentInternal"],"kind":"struct"},"2:11315:14557":{"crate_id":2,"path":["core","slice","SlicePattern"],"kind":"trait"},"24:2218:9064":{"crate_id":24,"path":["syn","spanned","private","Sealed"],"kind":"trait"},"24:4920:3219":{"crate_id":24,"path":["syn","expr","ExprWhile"],"kind":"struct"},"24:4892:3212":{"crate_id":24,"path":["syn","expr","ExprReturn"],"kind":"struct"},"2:40913:3322":{"crate_id":2,"path":["core","iter","sources","repeat_with","RepeatWith"],"kind":"struct"},"17:9977:21283":{"crate_id":17,"path":["object","read","coff","symbol","SymbolIterator"],"kind":"struct"},"17:2164:21355":{"crate_id":17,"path":["object","read","elf","relocation","ElfSectionRelocationIterator"],"kind":"struct"},"17:9153:5269":{"crate_id":17,"path":["object","endian","I16Bytes"],"kind":"struct"},"2:49869:9280":{"crate_id":2,"path":["core","core_simd","swizzle","Which"],"kind":"enum"},"22:790:233":{"crate_id":22,"path":["proc_macro2","imp","TokenStream"],"kind":"enum"},"2:47933:7944":{"crate_id":2,"path":["core","core_arch","x86","__m512i"],"kind":"struct"},"6:573:6621":{"crate_id":6,"path":["libc","unix","itimerval"],"kind":"struct"},"24:103:4182":{"crate_id":24,"path":["syn","token","CustomToken"],"kind":"trait"},"6:1631:6725":{"crate_id":6,"path":["libc","unix","linux_like","in_pktinfo"],"kind":"struct"},"2:39295:199":{"crate_id":2,"path":["core","ops","range","RangeFrom"],"kind":"struct"},"16:3635:5178":{"crate_id":16,"path":["gimli","arch","X86_64"],"kind":"struct"},"2:9215:3411":{"crate_id":2,"path":["core","fmt","Octal"],"kind":"trait"},"17:13043:5673":{"crate_id":17,"path":["object","macho","IdentCommand"],"kind":"struct"},"9:357:20200":{"crate_id":9,"path":["miniz_oxide","inflate","TINFLStatus"],"kind":"enum"},"5:5838:70":{"crate_id":5,"path":["alloc","sync","Arc"],"kind":"struct"},"1:1931:656":{"crate_id":1,"path":["std","ffi"],"kind":"module"},"19:0:1036":{"crate_id":19,"path":["panic_unwind"],"kind":"module"},"1:585:2315":{"crate_id":1,"path":["std","ascii","AsciiExt"],"kind":"trait"},"18:699:8129":{"crate_id":18,"path":["memchr","memmem","FinderBuilder"],"kind":"struct"},"16:2352:6105":{"crate_id":16,"path":["gimli","common","Register"],"kind":"struct"},"2:41527:8418":{"crate_id":2,"path":["core","net","parser","AddrParseError"],"kind":"struct"},"5:2957:36658":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Dying"],"kind":"enum"},"2:7268:152":{"crate_id":2,"path":["core","iter","traits","collect","IntoIterator"],"kind":"trait"},"22:710:3433":{"crate_id":22,"path":["proc_macro2","fallback","SourceFile"],"kind":"struct"},"6:4955:7091":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_nl"],"kind":"struct"},"6:5900:7243":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","rtentry"],"kind":"struct"},"1:11242:8515":{"crate_id":1,"path":["std","sys_common","wtf8","Wtf8Buf"],"kind":"struct"},"24:4900:3214":{"crate_id":24,"path":["syn","expr","ExprTry"],"kind":"struct"},"16:5720:8190":{"crate_id":16,"path":["gimli","read","cfi","CfiEntriesIter"],"kind":"struct"},"2:3998:33392":{"crate_id":2,"path":["core","asserting","TryCaptureWithoutDebug"],"kind":"struct"},"5:4392:4932":{"crate_id":5,"path":["alloc","collections","vec_deque","write_iter_wrapping","Guard"],"kind":"struct"},"6:4395:6852":{"crate_id":6,"path":["libc","unix","linux_like","linux","if_nameindex"],"kind":"struct"},"6:4887:7049":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_initmsg"],"kind":"struct"},"2:2980:2309":{"crate_id":2,"path":["core","ops","index","Index"],"kind":"trait"},"16:6128:8238":{"crate_id":16,"path":["gimli","read","cfi","CallFrameInstructionIter"],"kind":"struct"},"2:44122:8463":{"crate_id":2,"path":["core","str","pattern","StrSearcher"],"kind":"struct"},"24:4773:3185":{"crate_id":24,"path":["syn","expr","ExprArray"],"kind":"struct"},"6:1520:6648":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr"],"kind":"struct"},"16:6347:21203":{"crate_id":16,"path":["gimli","read","abbrev","Attributes"],"kind":"enum"},"17:9706:21284":{"crate_id":17,"path":["object","read","any","DynamicRelocationIterator"],"kind":"struct"},"20:0:1112":{"crate_id":20,"path":["quote"],"kind":"module"},"24:5332:2292":{"crate_id":24,"path":["syn","path","Constraint"],"kind":"struct"},"2:42362:3420":{"crate_id":2,"path":["core","fmt","num","LowerHex"],"kind":"struct"},"1:11177:5012":{"crate_id":1,"path":["std","sys_common","once","futex","CompletionGuard"],"kind":"struct"},"16:6484:8252":{"crate_id":16,"path":["gimli","read","index","UnitIndex"],"kind":"struct"},"24:3058:3477":{"crate_id":24,"path":["syn","token","Priv"],"kind":"struct"},"5:7213:8346":{"crate_id":5,"path":["alloc","ffi","c_str","NulError"],"kind":"struct"},"17:12077:5472":{"crate_id":17,"path":["object","elf","Versym"],"kind":"struct"},"2:2740:3440":{"crate_id":2,"path":["core","marker","Unpin"],"kind":"trait"},"18:614:37334":{"crate_id":18,"path":["memchr","memmem","twoway","SuffixKind"],"kind":"enum"},"1:11481:8044":{"crate_id":1,"path":["std","alloc","System"],"kind":"struct"},"2:43558:8359":{"crate_id":2,"path":["core","str","iter","Split"],"kind":"struct"},"21:2724:1825":{"crate_id":21,"path":["proc_macro","Group"],"kind":"struct"},"2:22072:8377":{"crate_id":2,"path":["core","num","fmt","Formatted"],"kind":"struct"},"5:1270:8991":{"crate_id":5,"path":["alloc","collections","btree","map","entry","VacantEntry"],"kind":"struct"},"17:11726:5399":{"crate_id":17,"path":["object","archive","AixFileHeader"],"kind":"struct"},"2:2791:5124":{"crate_id":2,"path":["core","ops","arith","MulAssign"],"kind":"trait"},"24:4861:3205":{"crate_id":24,"path":["syn","expr","ExprMacro"],"kind":"struct"},"6:6671:7420":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statfs64"],"kind":"struct"},"5:7269:4939":{"crate_id":5,"path":["alloc","rc","UniqueRc"],"kind":"struct"},"5:7376:4555":{"crate_id":5,"path":["alloc","vec","splice","Splice"],"kind":"struct"},"2:21551:7567":{"crate_id":2,"path":["core","core_simd","vector","Simd"],"kind":"struct"},"17:14026:5964":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation64V2"],"kind":"struct"},"17:11155:8164":{"crate_id":17,"path":["object","read","pe","import","DelayLoadDescriptorIterator"],"kind":"struct"},"1:11949:312":{"crate_id":1,"path":["std","array"],"kind":"primitive"},"2:21060:9263":{"crate_id":2,"path":["core","core_simd","eq","SimdPartialEq"],"kind":"trait"},"1:3996:9123":{"crate_id":1,"path":["std","os","unix","fs","FileTypeExt"],"kind":"trait"},"24:673:37552":{"crate_id":24,"path":["syn","expr","parsing","Precedence"],"kind":"enum"},"11:2049:8990":{"crate_id":11,"path":["hashbrown","set","OccupiedEntry"],"kind":"struct"},"16:8166:8317":{"crate_id":16,"path":["gimli","read","unit","DebugTypesUnitHeadersIter"],"kind":"struct"},"24:5078:2481":{"crate_id":24,"path":["syn","generics","PredicateType"],"kind":"struct"},"17:8924:21277":{"crate_id":17,"path":["object","common","SectionFlags"],"kind":"enum"},"2:9219:3420":{"crate_id":2,"path":["core","fmt","LowerHex"],"kind":"trait"},"17:11872:5436":{"crate_id":17,"path":["object","elf","CompressionHeader32"],"kind":"struct"},"1:7839:8493":{"crate_id":1,"path":["std","fs","Permissions"],"kind":"struct"},"6:1569:6679":{"crate_id":6,"path":["libc","unix","linux_like","fd_set"],"kind":"struct"},"5:35:4472":{"crate_id":5,"path":["alloc","raw_vec","RawVec"],"kind":"struct"},"21:2600:8119":{"crate_id":21,"path":["proc_macro","diagnostic","Children"],"kind":"struct"},"5:3168:3266":{"crate_id":5,"path":["alloc","collections","btree","set","Iter"],"kind":"struct"},"1:3805:9114":{"crate_id":1,"path":["std","net","udp","UdpSocket"],"kind":"struct"},"5:682:111":{"crate_id":5,"path":["alloc","borrow","Cow"],"kind":"enum"},"1:11927:28983":{"crate_id":1,"path":["std","backtrace_rs","print","PrintFmt"],"kind":"enum"},"16:6850:6243":{"crate_id":16,"path":["gimli","read","line","FileEntryFormat"],"kind":"struct"},"6:4291:6783":{"crate_id":6,"path":["libc","unix","linux_like","linux","glob_t"],"kind":"struct"},"2:40682:3359":{"crate_id":2,"path":["core","iter","adapters","zip","Zip"],"kind":"struct"},"2:46215:7866":{"crate_id":2,"path":["core","core_arch","simd","f32x4"],"kind":"struct"},"1:11957:748":{"crate_id":1,"path":["std","i8"],"kind":"primitive"},"2:39434:2589":{"crate_id":2,"path":["core","any","tags","Value"],"kind":"struct"},"2:41649:3266":{"crate_id":2,"path":["core","option","Iter"],"kind":"struct"},"1:1062:8990":{"crate_id":1,"path":["std","collections","hash","map","OccupiedEntry"],"kind":"struct"},"16:6289:6200":{"crate_id":16,"path":["gimli","read","reader","ReaderOffsetId"],"kind":"struct"},"14:202:2346":{"crate_id":14,"path":["rustc_demangle","v0","ParseError"],"kind":"enum"},"2:47986:7947":{"crate_id":2,"path":["core","core_arch","x86","__m128bh"],"kind":"struct"},"17:12303:5533":{"crate_id":17,"path":["object","macho","DyldCacheMappingInfo"],"kind":"struct"},"1:7043:31909":{"crate_id":1,"path":["std","sys_common","wstr","WStrUnits"],"kind":"struct"},"1:4704:9135":{"crate_id":1,"path":["std","os","fd","raw","FromRawFd"],"kind":"trait"},"11:1027:20263":{"crate_id":11,"path":["hashbrown","map","EntryRef"],"kind":"enum"},"6:4787:7005":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_j1939"],"kind":"struct"},"1:857:3270":{"crate_id":1,"path":["std","collections","hash","map","IterMut"],"kind":"struct"},"6:6648:7419":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stat64"],"kind":"struct"},"1:1583:8330":{"crate_id":1,"path":["std","collections","hash","set","Difference"],"kind":"struct"},"6:532:6599":{"crate_id":6,"path":["libc","unix","hostent"],"kind":"struct"},"1:11963:1504":{"crate_id":1,"path":["std","u16"],"kind":"primitive"},"16:5882:8204":{"crate_id":16,"path":["gimli","read","cfi","FrameDescriptionEntry"],"kind":"struct"},"17:13448:5811":{"crate_id":17,"path":["object","pe","ImageDataDirectory"],"kind":"struct"},"6:4389:6850":{"crate_id":6,"path":["libc","unix","linux_like","linux","cpu_set_t"],"kind":"struct"},"24:343:37708":{"crate_id":24,"path":["syn","buffer","empty","UnsafeSyncEntry"],"kind":"struct"},"1:8823:9229":{"crate_id":1,"path":["std","sync","mpsc","TryIter"],"kind":"struct"},"1:7499:8913":{"crate_id":1,"path":["std","backtrace_rs","symbolize","SymbolName"],"kind":"struct"},"2:4144:3410":{"crate_id":2,"path":["core","cell","once","OnceCell"],"kind":"struct"},"24:4329:3526":{"crate_id":24,"path":["syn","token","ShlEq"],"kind":"struct"},"2:44301:8481":{"crate_id":2,"path":["core","str","IsNotEmpty"],"kind":"struct"},"16:7622:21214":{"crate_id":16,"path":["gimli","read","rnglists","RngListIter"],"kind":"struct"},"24:3812:3491":{"crate_id":24,"path":["syn","token","AndEq"],"kind":"struct"},"2:44293:8479":{"crate_id":2,"path":["core","str","IsWhitespace"],"kind":"struct"},"2:12579:4976":{"crate_id":2,"path":["core","task","wake","Waker"],"kind":"struct"},"2:32139:8384":{"crate_id":2,"path":["core","error","Source"],"kind":"struct"},"16:530:8173":{"crate_id":16,"path":["gimli","read","cfi","RegisterRuleMap"],"kind":"struct"},"5:0:286":{"crate_id":5,"path":["alloc"],"kind":"module"},"16:7289:6275":{"crate_id":16,"path":["gimli","read","op","Piece"],"kind":"struct"},"5:7092:8345":{"crate_id":5,"path":["alloc","collections","btree","set_val","SetValZST"],"kind":"struct"},"16:7038:8296":{"crate_id":16,"path":["gimli","read","lookup","PubStuffHeader"],"kind":"struct"},"22:906:3286":{"crate_id":22,"path":["proc_macro2","Delimiter"],"kind":"enum"},"24:126:1825":{"crate_id":24,"path":["syn","token","Group"],"kind":"struct"},"2:44136:14438":{"crate_id":2,"path":["core","str","pattern","StrSearcherImpl"],"kind":"enum"},"17:9475:21280":{"crate_id":17,"path":["object","read","any","SectionIterator"],"kind":"struct"},"1:11525:8520":{"crate_id":1,"path":["std","backtrace_rs","backtrace","Frame"],"kind":"struct"},"5:4347:245":{"crate_id":5,"path":["alloc","collections","vec_deque","VecDeque"],"kind":"struct"},"11:2194:6482":{"crate_id":11,"path":["hashbrown","raw","TableLayout"],"kind":"struct"},"11:447:142":{"crate_id":11,"path":["hashbrown","map","HashMap"],"kind":"struct"},"1:1982:185":{"crate_id":1,"path":["std","ffi","os_str","OsString"],"kind":"struct"},"6:7558:7542":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_barrier_t"],"kind":"struct"},"1:11969:1132":{"crate_id":1,"path":["std","reference"],"kind":"primitive"},"17:13557:5852":{"crate_id":17,"path":["object","pe","ImageNtHeaders32"],"kind":"struct"},"2:41776:3266":{"crate_id":2,"path":["core","result","Iter"],"kind":"struct"},"2:46917:7896":{"crate_id":2,"path":["core","core_arch","simd","f32x8"],"kind":"struct"},"17:10280:21379":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdatSectionIterator"],"kind":"struct"},"2:2838:5128":{"crate_id":2,"path":["core","ops","bit","BitAndAssign"],"kind":"trait"},"16:5414:6189":{"crate_id":16,"path":["gimli","read","util","sealed","CapacityFull"],"kind":"struct"},"9:486:20184":{"crate_id":9,"path":["miniz_oxide","DataFormat"],"kind":"enum"},"20:150:3766":{"crate_id":20,"path":["quote","__private","ThereIsNoIteratorInRepetition"],"kind":"struct"},"5:2956:2076":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Owned"],"kind":"enum"},"1:5044:29988":{"crate_id":1,"path":["std","path","fmt","DebugHelper"],"kind":"struct"},"1:4587:9122":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt"],"kind":"trait"},"21:1195:196":{"crate_id":21,"path":["proc_macro","bridge","client","ProcMacro"],"kind":"enum"},"5:6137:9354":{"crate_id":5,"path":["alloc","task","Wake"],"kind":"trait"},"16:6018:21201":{"crate_id":16,"path":["gimli","read","cfi","RegisterRule"],"kind":"enum"},"24:4271:3522":{"crate_id":24,"path":["syn","token","Question"],"kind":"struct"},"7:32:20171":{"crate_id":7,"path":["unwind","libunwind","_Unwind_Reason_Code"],"kind":"enum"},"24:0:1683":{"crate_id":24,"path":["syn"],"kind":"module"},"2:9221:3421":{"crate_id":2,"path":["core","fmt","UpperHex"],"kind":"trait"},"1:3472:32340":{"crate_id":1,"path":["std","io","Write","write_fmt","Adapter"],"kind":"struct"},"17:10097:21337":{"crate_id":17,"path":["object","read","elf","segment","ElfSegmentIterator"],"kind":"struct"},"17:9777:21297":{"crate_id":17,"path":["object","read","archive","ArchiveKind"],"kind":"enum"},"17:13778:5901":{"crate_id":17,"path":["object","pe","ImageRelocation"],"kind":"struct"},"16:5612:8179":{"crate_id":16,"path":["gimli","read","cfi","ParsedEhFrameHdr"],"kind":"struct"},"18:507:5148":{"crate_id":18,"path":["memchr","memmem","genericsimd","Forward"],"kind":"struct"},"5:6270:4556":{"crate_id":5,"path":["alloc","vec","drain","Drain"],"kind":"struct"},"17:12878:5641":{"crate_id":17,"path":["object","macho","RpathCommand"],"kind":"struct"},"2:2162:4492":{"crate_id":2,"path":["core","ptr","from_exposed_addr_mut"],"kind":"function"},"6:4740:6979":{"crate_id":6,"path":["libc","unix","linux_like","linux","inotify_event"],"kind":"struct"},"16:3810:6160":{"crate_id":16,"path":["gimli","constants","DwUt"],"kind":"struct"},"2:44285:8477":{"crate_id":2,"path":["core","str","CharEscapeUnicode"],"kind":"struct"},"17:13683:5877":{"crate_id":17,"path":["object","pe","ImageSymbolEx"],"kind":"struct"},"24:5142:3231":{"crate_id":24,"path":["syn","lit","LitInt"],"kind":"struct"},"6:7599:7552":{"crate_id":6,"path":["libc","unix","linux_like","linux","non_exhaustive","open_how"],"kind":"struct"},"17:434:5218":{"crate_id":17,"path":["object","read","any","Section"],"kind":"struct"},"5:3201:8331":{"crate_id":5,"path":["alloc","collections","btree","set","SymmetricDifference"],"kind":"struct"},"17:13949:5945":{"crate_id":17,"path":["object","pe","ImageResourceDirectoryEntry"],"kind":"struct"},"2:40031:3423":{"crate_id":2,"path":["core","ascii","EscapeDefault"],"kind":"struct"},"1:8516:8020":{"crate_id":1,"path":["std","path","Ancestors"],"kind":"struct"},"24:2030:3272":{"crate_id":24,"path":["syn","punctuated","PrivateIterMut"],"kind":"struct"},"16:5737:21198":{"crate_id":16,"path":["gimli","read","cfi","CieOrFde"],"kind":"enum"},"16:7679:6148":{"crate_id":16,"path":["gimli","read","str","DebugStrOffsets"],"kind":"struct"},"17:14216:6034":{"crate_id":17,"path":["object","pe","ImageAlphaRuntimeFunctionEntry"],"kind":"struct"},"5:5277:14400":{"crate_id":5,"path":["alloc","slice","Concat"],"kind":"trait"},"2:45744:7844":{"crate_id":2,"path":["core","core_arch","simd","u32x2"],"kind":"struct"},"24:4833:3199":{"crate_id":24,"path":["syn","expr","ExprGroup"],"kind":"struct"},"6:4917:7070":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_rcvinfo"],"kind":"struct"},"2:7277:3330":{"crate_id":2,"path":["core","iter","traits","collect","Extend"],"kind":"trait"},"5:819:4914":{"crate_id":5,"path":["alloc","collections","binary_heap","RebuildOnDrop"],"kind":"struct"},"17:9318:5274":{"crate_id":17,"path":["object","read","util","StringTable"],"kind":"struct"},"16:6502:8260":{"crate_id":16,"path":["gimli","read","index","UnitIndexSectionIterator"],"kind":"struct"},"2:4325:3397":{"crate_id":2,"path":["core","cell","BorrowRef"],"kind":"struct"},"2:1636:4297":{"crate_id":2,"path":["core","mem","Discriminant"],"kind":"struct"},"2:43626:8436":{"crate_id":2,"path":["core","str","iter","RSplitTerminator"],"kind":"struct"},"2:44289:8478":{"crate_id":2,"path":["core","str","CharEscapeDefault"],"kind":"struct"},"17:11888:5440":{"crate_id":17,"path":["object","elf","CompressionHeader64"],"kind":"struct"},"24:4904:3215":{"crate_id":24,"path":["syn","expr","ExprTryBlock"],"kind":"struct"},"17:14150:6010":{"crate_id":17,"path":["object","pe","ImageHotPatchInfo"],"kind":"struct"},"18:671:25299":{"crate_id":18,"path":["memchr","memmem","FindRevIter"],"kind":"struct"},"16:4476:6167":{"crate_id":16,"path":["gimli","constants","DwLle"],"kind":"struct"},"5:1489:8598":{"crate_id":5,"path":["alloc","collections","btree","map","IntoKeys"],"kind":"struct"},"17:14403:6080":{"crate_id":17,"path":["object","pe","ImportObjectHeader"],"kind":"struct"},"6:6044:7315":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","sifields_sigchld"],"kind":"struct"},"24:251:8887":{"crate_id":24,"path":["syn","attr","parsing","DisplayAttrStyle"],"kind":"struct"},"17:8997:21254":{"crate_id":17,"path":["object","endian","Endianness"],"kind":"enum"},"17:13125:5682":{"crate_id":17,"path":["object","macho","Nlist32"],"kind":"struct"},"2:2921:2245":{"crate_id":2,"path":["core","ops","drop","Drop"],"kind":"trait"},"16:5639:8183":{"crate_id":16,"path":["gimli","read","cfi","EhHdrTable"],"kind":"struct"},"2:21845:8371":{"crate_id":2,"path":["core","num","bignum","tests","Big8x3"],"kind":"struct"},"17:13456:5812":{"crate_id":17,"path":["object","pe","ImageOptionalHeader32"],"kind":"struct"},"17:14007:5959":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation64"],"kind":"struct"},"18:113:25287":{"crate_id":18,"path":["memchr","memchr","iter","Memchr3"],"kind":"struct"},"1:10451:9097":{"crate_id":1,"path":["std","sys","unix","stdio","Stdout"],"kind":"struct"},"24:5289:2191":{"crate_id":24,"path":["syn","path","PathArguments"],"kind":"enum"},"1:11911:8614":{"crate_id":1,"path":["std","backtrace_rs","symbolize","gimli","Cache"],"kind":"struct"},"17:1184:21314":{"crate_id":17,"path":["object","read","coff","relocation","CoffRelocationIterator"],"kind":"struct"},"17:13854:5918":{"crate_id":17,"path":["object","pe","ImageThunkData64"],"kind":"struct"},"1:2366:9051":{"crate_id":1,"path":["std","fs","canonicalize"],"kind":"function"},"1:6893:8912":{"crate_id":1,"path":["std","sys_common","backtrace","_print","DisplayBacktrace"],"kind":"struct"},"17:9399:21279":{"crate_id":17,"path":["object","read","any","SegmentIterator"],"kind":"struct"},"2:9227:3419":{"crate_id":2,"path":["core","fmt","UpperExp"],"kind":"trait"},"2:2469:14481":{"crate_id":2,"path":["core","convert","num","FloatToInt"],"kind":"trait"},"24:2023:3270":{"crate_id":24,"path":["syn","punctuated","IterMut"],"kind":"struct"},"6:7250:7515":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","not_x32","statvfs"],"kind":"struct"},"17:13096:5679":{"crate_id":17,"path":["object","macho","DataInCodeEntry"],"kind":"struct"},"21:2014:4578":{"crate_id":21,"path":["proc_macro","bridge","LitKind"],"kind":"enum"},"1:8178:8359":{"crate_id":1,"path":["std","io","Split"],"kind":"struct"},"21:957:4596":{"crate_id":21,"path":["proc_macro","bridge","client","FreeFunctions"],"kind":"struct"},"24:4570:2047":{"crate_id":24,"path":["syn","derive","DataEnum"],"kind":"struct"},"6:1696:6764":{"crate_id":6,"path":["libc","unix","linux_like","epoll_event"],"kind":"struct"},"24:2752:3463":{"crate_id":24,"path":["syn","token","Dyn"],"kind":"struct"},"24:3938:3499":{"crate_id":24,"path":["syn","token","DotDot"],"kind":"struct"},"1:5013:29988":{"crate_id":1,"path":["std","path","fmt","DebugHelper"],"kind":"struct"},"2:40475:3353":{"crate_id":2,"path":["core","iter","adapters","rev","Rev"],"kind":"struct"},"2:40654:3357":{"crate_id":2,"path":["core","iter","adapters","take","Take"],"kind":"struct"},"24:3991:3502":{"crate_id":24,"path":["syn","token","EqEq"],"kind":"struct"},"6:6720:7431":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_xmmreg"],"kind":"struct"},"11:1663:144":{"crate_id":11,"path":["hashbrown","set","HashSet"],"kind":"struct"},"17:582:1917":{"crate_id":17,"path":["object","read","any","Symbol"],"kind":"struct"},"1:8901:9228":{"crate_id":1,"path":["std","sync","mpsc","TrySendError"],"kind":"enum"},"1:4531:9169":{"crate_id":1,"path":["std","os","unix","thread","JoinHandleExt"],"kind":"trait"},"1:7558:5005":{"crate_id":1,"path":["std","backtrace_rs","Bomb"],"kind":"struct"},"11:1068:20264":{"crate_id":11,"path":["hashbrown","map","OccupiedEntryRef"],"kind":"struct"},"17:11371:5374":{"crate_id":17,"path":["object","read","SymbolIndex"],"kind":"struct"},"6:7523:7534":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_barrierattr_t"],"kind":"struct"},"17:14037:5965":{"crate_id":17,"path":["object","pe","ImagePrologueDynamicRelocationHeader"],"kind":"struct"},"6:7517:7533":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_condattr_t"],"kind":"struct"},"2:3934:4932":{"crate_id":2,"path":["core","array","Guard"],"kind":"struct"},"11:1845:8330":{"crate_id":11,"path":["hashbrown","set","Difference"],"kind":"struct"},"1:2855:4983":{"crate_id":1,"path":["std","io","error","repr_bitpacked","Repr"],"kind":"struct"},"24:286:37673":{"crate_id":24,"path":["syn","bigint","BigInt"],"kind":"struct"},"17:12118:5484":{"crate_id":17,"path":["object","elf","Verneed"],"kind":"struct"},"2:40074:7792":{"crate_id":2,"path":["core","char","convert","CharTryFromError"],"kind":"struct"},"16:7525:6145":{"crate_id":16,"path":["gimli","read","rnglists","DebugRanges"],"kind":"struct"},"2:41986:82":{"crate_id":2,"path":["core","sync","atomic","AtomicI32"],"kind":"struct"},"5:1408:3266":{"crate_id":5,"path":["alloc","collections","btree","map","Iter"],"kind":"struct"},"2:21954:8375":{"crate_id":2,"path":["core","num","dec2flt","ParseFloatError"],"kind":"struct"},"11:0:3012":{"crate_id":11,"path":["hashbrown"],"kind":"module"},"2:43832:8448":{"crate_id":2,"path":["core","str","iter","SplitWhitespace"],"kind":"struct"},"2:44147:8464":{"crate_id":2,"path":["core","str","pattern","EmptyNeedle"],"kind":"struct"},"2:2931:3442":{"crate_id":2,"path":["core","ops","function","FnOnce"],"kind":"trait"},"6:6136:7336":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","sysinfo"],"kind":"struct"},"6:6573:7373":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statfs"],"kind":"struct"},"5:2167:8335":{"crate_id":5,"path":["alloc","collections","btree","navigate","LeafRange"],"kind":"struct"},"2:2505:75":{"crate_id":2,"path":["core","convert","AsRef"],"kind":"trait"},"9:0:3010":{"crate_id":9,"path":["miniz_oxide"],"kind":"module"},"6:4908:7064":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_sndinfo"],"kind":"struct"},"17:10486:8148":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSubsubsectionIterator"],"kind":"struct"},"2:2353:189":{"crate_id":2,"path":["core","cmp","PartialOrd"],"kind":"trait"},"1:10684:8505":{"crate_id":1,"path":["std","sys","unix","fs","StatxExtraFields"],"kind":"struct"},"18:660:25298":{"crate_id":18,"path":["memchr","memmem","FindIter"],"kind":"struct"},"24:3347:3486":{"crate_id":24,"path":["syn","token","Virtual"],"kind":"struct"},"24:5322:2206":{"crate_id":24,"path":["syn","path","AssocType"],"kind":"struct"},"17:13591:5855":{"crate_id":17,"path":["object","pe","AnonObjectHeader"],"kind":"struct"},"1:875:8327":{"crate_id":1,"path":["std","collections","hash","map","Keys"],"kind":"struct"},"0:0:1706":{"crate_id":0,"path":["serde_derive"],"kind":"module"},"5:1439:3265":{"crate_id":5,"path":["alloc","collections","btree","map","IntoIter"],"kind":"struct"},"1:901:4556":{"crate_id":1,"path":["std","collections","hash","map","Drain"],"kind":"struct"},"24:1443:25322":{"crate_id":24,"path":["syn","parse","discouraged","Speculative"],"kind":"trait"},"2:48063:7950":{"crate_id":2,"path":["core","core_arch","x86","cpuid","CpuidResult"],"kind":"struct"},"6:4854:7032":{"crate_id":6,"path":["libc","unix","linux_like","linux","file_clone_range"],"kind":"struct"},"2:40302:3333":{"crate_id":2,"path":["core","iter","adapters","array_chunks","ArrayChunks"],"kind":"struct"},"5:7113:3265":{"crate_id":5,"path":["alloc","collections","linked_list","IntoIter"],"kind":"struct"},"5:3580:3266":{"crate_id":5,"path":["alloc","collections","linked_list","Iter"],"kind":"struct"},"24:3296:3483":{"crate_id":24,"path":["syn","token","Unsafe"],"kind":"struct"},"2:48024:7949":{"crate_id":2,"path":["core","core_arch","x86","__m512bh"],"kind":"struct"},"1:10170:9205":{"crate_id":1,"path":["std","sys","unix","pipe","AnonPipe"],"kind":"struct"},"2:47896:7941":{"crate_id":2,"path":["core","core_arch","x86","__m256i"],"kind":"struct"},"24:3950:3500":{"crate_id":24,"path":["syn","token","DotDotDot"],"kind":"struct"},"21:988:233":{"crate_id":21,"path":["proc_macro","bridge","client","TokenStream"],"kind":"struct"},"16:2293:20312":{"crate_id":16,"path":["gimli","common","Format"],"kind":"enum"},"18:736:25296":{"crate_id":18,"path":["memchr","memmem","SearcherKind"],"kind":"enum"},"12:0:3013":{"crate_id":12,"path":["rustc_std_workspace_alloc"],"kind":"module"},"17:13069:5675":{"crate_id":17,"path":["object","macho","EntryPointCommand"],"kind":"struct"},"6:4463:6885":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_replay"],"kind":"struct"},"16:149:4896":{"crate_id":16,"path":["gimli","read","util","ArrayVec"],"kind":"struct"},"15:394:20302":{"crate_id":15,"path":["addr2line","DebugFile"],"kind":"enum"},"24:3143:3480":{"crate_id":24,"path":["syn","token","SelfValue"],"kind":"struct"},"24:4114:3511":{"crate_id":24,"path":["syn","token","Ne"],"kind":"struct"},"17:11428:5376":{"crate_id":17,"path":["object","read","SymbolMapName"],"kind":"struct"},"1:2558:4967":{"crate_id":1,"path":["std","io","buffered","bufwriter","flush_buf","BufGuard"],"kind":"struct"},"24:2973:2510":{"crate_id":24,"path":["syn","token","Match"],"kind":"struct"},"2:2683:220":{"crate_id":2,"path":["core","marker","Send"],"kind":"trait"},"2:6651:2640":{"crate_id":2,"path":["core","iter","adapters","zip","zip"],"kind":"function"},"21:216:8556":{"crate_id":21,"path":["proc_macro","bridge","fxhash","FxHasher"],"kind":"struct"},"1:3231:9097":{"crate_id":1,"path":["std","io","stdio","Stdout"],"kind":"struct"},"22:881:1904":{"crate_id":22,"path":["proc_macro2","Span"],"kind":"struct"},"2:5990:3361":{"crate_id":2,"path":["core","iter","adapters","intersperse","IntersperseWith"],"kind":"struct"},"21:2591:3434":{"crate_id":21,"path":["proc_macro","diagnostic","Diagnostic"],"kind":"struct"},"24:5140:3229":{"crate_id":24,"path":["syn","lit","LitChar"],"kind":"struct"},"24:2616:3460":{"crate_id":24,"path":["syn","token","Become"],"kind":"struct"},"24:5498:3243":{"crate_id":24,"path":["syn","ty","BareVariadic"],"kind":"struct"},"2:43108:8426":{"crate_id":2,"path":["core","slice","ascii","EscapeByte"],"kind":"struct"},"24:5337:3237":{"crate_id":24,"path":["syn","path","ParenthesizedGenericArguments"],"kind":"struct"},"1:8986:8610":{"crate_id":1,"path":["std","sync","mpmc","list","ListToken"],"kind":"struct"},"1:7724:8903":{"crate_id":1,"path":["std","env","JoinPathsError"],"kind":"struct"},"16:4841:6178":{"crate_id":16,"path":["gimli","constants","DwOrd"],"kind":"struct"},"17:13492:5842":{"crate_id":17,"path":["object","pe","ImageRomOptionalHeader"],"kind":"struct"},"2:2517:238":{"crate_id":2,"path":["core","convert","TryInto"],"kind":"trait"},"2:45638:7840":{"crate_id":2,"path":["core","core_arch","simd","i8x4"],"kind":"struct"},"2:47727:7934":{"crate_id":2,"path":["core","core_arch","simd","f32x16"],"kind":"struct"},"2:9879:222":{"crate_id":2,"path":["core","slice","index","SliceIndex"],"kind":"trait"},"17:13016:5671":{"crate_id":17,"path":["object","macho","LinkerOptionCommand"],"kind":"struct"},"5:2687:7559":{"crate_id":5,"path":["alloc","collections","btree","node","Handle"],"kind":"struct"},"2:40322:3334":{"crate_id":2,"path":["core","iter","adapters","by_ref_sized","ByRefSized"],"kind":"struct"},"2:41665:3265":{"crate_id":2,"path":["core","option","IntoIter"],"kind":"struct"},"2:10158:14410":{"crate_id":2,"path":["core","slice","iter","SplitMut"],"kind":"struct"},"6:7540:7539":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_cond_t"],"kind":"struct"},"2:20652:34400":{"crate_id":2,"path":["core","core_simd","swizzle","interleave","Hi"],"kind":"struct"},"16:3744:6158":{"crate_id":16,"path":["gimli","constants","DwSect"],"kind":"struct"},"16:6470:6149":{"crate_id":16,"path":["gimli","read","index","DebugTuIndex"],"kind":"struct"},"24:5482:3254":{"crate_id":24,"path":["syn","ty","TypeSlice"],"kind":"struct"},"24:2582:3458":{"crate_id":24,"path":["syn","token","Auto"],"kind":"struct"},"2:41438:7799":{"crate_id":2,"path":["core","net","ip_addr","Ipv6Addr"],"kind":"struct"},"2:2514:133":{"crate_id":2,"path":["core","convert","From"],"kind":"trait"},"6:7552:7541":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_rwlock_t"],"kind":"struct"},"17:13659:5872":{"crate_id":17,"path":["object","pe","ImageSymbol"],"kind":"struct"},"16:7707:6302":{"crate_id":16,"path":["gimli","read","UnitOffset"],"kind":"struct"},"1:8510:3266":{"crate_id":1,"path":["std","path","Iter"],"kind":"struct"},"24:2633:1883":{"crate_id":24,"path":["syn","token","Box"],"kind":"struct"},"2:43979:8457":{"crate_id":2,"path":["core","str","pattern","MultiCharEqSearcher"],"kind":"struct"},"1:4926:3736":{"crate_id":1,"path":["std","panic","always_abort"],"kind":"function"},"1:9216:4660":{"crate_id":1,"path":["std","sys","unix","args","Args"],"kind":"struct"},"1:5408:9200":{"crate_id":1,"path":["std","process","Command"],"kind":"struct"},"17:12982:5658":{"crate_id":17,"path":["object","macho","BuildToolVersion"],"kind":"struct"},"24:3109:212":{"crate_id":24,"path":["syn","token","Return"],"kind":"struct"},"1:11500:8045":{"crate_id":1,"path":["std","personality","dwarf","eh","EHContext"],"kind":"struct"},"6:4973:7102":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_alg"],"kind":"struct"},"17:11329:21288":{"crate_id":17,"path":["object","read","ObjectKind"],"kind":"enum"},"11:403:37244":{"crate_id":11,"path":["hashbrown","raw","RawIterHashInner"],"kind":"struct"},"1:10702:8511":{"crate_id":1,"path":["std","sys","unix","fs","FilePermissions"],"kind":"struct"},"17:12161:5500":{"crate_id":17,"path":["object","elf","NoteHeader64"],"kind":"struct"},"1:1895:8904":{"crate_id":1,"path":["std","error","Report"],"kind":"struct"},"6:4685:6949":{"crate_id":6,"path":["libc","unix","linux_like","linux","mntent"],"kind":"struct"},"17:10845:5336":{"crate_id":17,"path":["object","read","macho","section","MachOSectionInternal"],"kind":"struct"},"17:9223:5271":{"crate_id":17,"path":["object","endian","I64Bytes"],"kind":"struct"},"1:4148:9147":{"crate_id":1,"path":["std","os","unix","net","ancillary","Messages"],"kind":"struct"},"1:307:1456":{"crate_id":1,"path":["std","thread"],"kind":"module"},"24:4812:3194":{"crate_id":24,"path":["syn","expr","ExprClosure"],"kind":"struct"},"24:4876:2099":{"crate_id":24,"path":["syn","expr","ExprPath"],"kind":"struct"},"1:4127:9145":{"crate_id":1,"path":["std","os","unix","net","ancillary","ScmCredentials"],"kind":"struct"},"1:9413:9059":{"crate_id":1,"path":["std","sys","unix","fs","ReadDir"],"kind":"struct"},"1:8999:8029":{"crate_id":1,"path":["std","sync","mpmc","select","Operation"],"kind":"struct"},"1:530:4223":{"crate_id":1,"path":["std","thread","Packet"],"kind":"struct"},"2:43285:34324":{"crate_id":2,"path":["core","slice","iter","GenericSplitN"],"kind":"struct"},"11:667:8598":{"crate_id":11,"path":["hashbrown","map","IntoKeys"],"kind":"struct"},"21:107:4587":{"crate_id":21,"path":["proc_macro","bridge","client","Bridge"],"kind":"struct"},"6:4810:7014":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_filter"],"kind":"struct"},"24:5469:2252":{"crate_id":24,"path":["syn","ty","TypePath"],"kind":"struct"},"21:244:37472":{"crate_id":21,"path":["proc_macro","bridge","handle","OwnedStore"],"kind":"struct"},"6:5849:7219":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","mallinfo"],"kind":"struct"},"17:10253:21332":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdatIterator"],"kind":"struct"},"2:2748:4116":{"crate_id":2,"path":["core","marker","FnPtr"],"kind":"trait"},"1:5343:9196":{"crate_id":1,"path":["std","process","Child"],"kind":"struct"},"6:587:6629":{"crate_id":6,"path":["libc","unix","servent"],"kind":"struct"},"24:2854:3467":{"crate_id":24,"path":["syn","token","For"],"kind":"struct"},"2:3141:14507":{"crate_id":2,"path":["core","ops","range","OneSidedRange"],"kind":"trait"},"22:926:2218":{"crate_id":22,"path":["proc_macro2","Punct"],"kind":"struct"},"11:760:4554":{"crate_id":11,"path":["hashbrown","map","ExtractIf"],"kind":"struct"},"24:4003:3503":{"crate_id":24,"path":["syn","token","FatArrow"],"kind":"struct"},"24:3245:1822":{"crate_id":24,"path":["syn","token","Type"],"kind":"struct"},"1:10689:8492":{"crate_id":1,"path":["std","sys","unix","fs","OpenOptions"],"kind":"struct"},"6:4304:6792":{"crate_id":6,"path":["libc","unix","linux_like","linux","passwd"],"kind":"struct"},"5:2967:25945":{"crate_id":5,"path":["alloc","collections","btree","node","marker","ValMut"],"kind":"struct"},"1:4097:31908":{"crate_id":1,"path":["std","os","unix","net","ancillary","AncillaryDataIter"],"kind":"struct"},"6:6589:7385":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","flock"],"kind":"struct"},"1:8251:9150":{"crate_id":1,"path":["std","os","unix","net","ancillary","AncillaryError"],"kind":"enum"},"6:5979:7292":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","Elf64_Chdr"],"kind":"struct"},"17:400:21266":{"crate_id":17,"path":["object","read","any","Segment"],"kind":"struct"},"1:10734:119":{"crate_id":1,"path":["std","sys","unix","fs","DirBuilder"],"kind":"struct"},"6:1681:6755":{"crate_id":6,"path":["libc","unix","linux_like","arphdr"],"kind":"struct"},"5:273:1883":{"crate_id":5,"path":["alloc","boxed","Box"],"kind":"struct"},"16:8210:2589":{"crate_id":16,"path":["gimli","read","value","Value"],"kind":"enum"},"24:4440:2504":{"crate_id":24,"path":["syn","token","Brace"],"kind":"struct"},"2:25974:7589":{"crate_id":2,"path":["core","num","wrapping","Wrapping"],"kind":"struct"},"1:11067:7830":{"crate_id":1,"path":["std","sys","unix","time","Nanoseconds"],"kind":"struct"},"2:2962:4464":{"crate_id":2,"path":["core","ops","generator","Generator"],"kind":"trait"},"16:5843:8202":{"crate_id":16,"path":["gimli","read","cfi","PartialFrameDescriptionEntry"],"kind":"struct"},"2:21027:9268":{"crate_id":2,"path":["core","core_simd","elements","uint","SimdUint"],"kind":"trait"},"11:2174:6478":{"crate_id":11,"path":["hashbrown","raw","bitmask","BitMask"],"kind":"struct"},"17:11767:5408":{"crate_id":17,"path":["object","elf","FileHeader32"],"kind":"struct"},"11:805:8986":{"crate_id":11,"path":["hashbrown","map","RawEntryMut"],"kind":"enum"},"1:7696:4621":{"crate_id":1,"path":["std","collections","hash","map","RandomState"],"kind":"struct"},"16:7855:21216":{"crate_id":16,"path":["gimli","read","unit","AttributeValue"],"kind":"enum"},"16:8043:6346":{"crate_id":16,"path":["gimli","read","unit","AttrsIter"],"kind":"struct"},"17:14359:6073":{"crate_id":17,"path":["object","pe","ImageSeparateDebugHeader"],"kind":"struct"},"16:4323:6164":{"crate_id":16,"path":["gimli","constants","DwAt"],"kind":"struct"},"1:11945:418":{"crate_id":1,"path":["std","char"],"kind":"primitive"},"1:11047:8022":{"crate_id":1,"path":["std","sys","unix","process","process_inner","ExitStatusError"],"kind":"struct"},"1:6865:5000":{"crate_id":1,"path":["std","sys","common","thread_local","abort_on_dtor_unwind","DtorUnwindGuard"],"kind":"struct"},"16:4753:6175":{"crate_id":16,"path":["gimli","constants","DwId"],"kind":"struct"},"2:42671:128":{"crate_id":2,"path":["core","fmt","Error"],"kind":"struct"},"6:4800:7010":{"crate_id":6,"path":["libc","unix","linux_like","linux","j1939_filter"],"kind":"struct"},"2:11550:8440":{"crate_id":2,"path":["core","str","iter","MatchIndicesInternal"],"kind":"struct"},"21:183:4203":{"crate_id":21,"path":["proc_macro","bridge","closure","Closure"],"kind":"struct"},"2:20805:9269":{"crate_id":2,"path":["core","core_simd","cast","SimdCast"],"kind":"trait"},"1:11200:9206":{"crate_id":1,"path":["std","sys_common","process","CommandEnvs"],"kind":"struct"},"2:23164:7588":{"crate_id":2,"path":["core","num","saturating","Saturating"],"kind":"struct"},"2:43576:8362":{"crate_id":2,"path":["core","str","iter","RSplit"],"kind":"struct"},"2:43762:8444":{"crate_id":2,"path":["core","str","iter","Matches"],"kind":"struct"},"24:4956:62":{"crate_id":24,"path":["syn","expr","parsing","kw","raw"],"kind":"struct"},"16:6915:37260":{"crate_id":16,"path":["gimli","read","loclists","LocListsFormat"],"kind":"enum"},"5:4193:4932":{"crate_id":5,"path":["alloc","collections","vec_deque","into_iter","try_rfold","Guard"],"kind":"struct"},"17:2133:21333":{"crate_id":17,"path":["object","read","elf","relocation","ElfDynamicRelocationIterator"],"kind":"struct"},"1:9069:219":{"crate_id":1,"path":["std","sync","rwlock","RwLockWriteGuard"],"kind":"struct"},"2:7264:134":{"crate_id":2,"path":["core","iter","traits","collect","FromIterator"],"kind":"trait"},"24:3962:3501":{"crate_id":24,"path":["syn","token","DotDotEq"],"kind":"struct"},"2:45548:7836":{"crate_id":2,"path":["core","core_arch","simd","u8x2"],"kind":"struct"},"1:9074:8033":{"crate_id":1,"path":["std","time","Instant"],"kind":"struct"},"2:21205:9064":{"crate_id":2,"path":["core","core_simd","masks","to_bitmask","sealed","Sealed"],"kind":"trait"},"6:6820:7491":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","shmid_ds"],"kind":"struct"},"1:8134:9063":{"crate_id":1,"path":["std","io","SeekFrom"],"kind":"enum"},"2:12374:151":{"crate_id":2,"path":["core","future","into_future","IntoFuture"],"kind":"trait"},"24:3783:3489":{"crate_id":24,"path":["syn","token","And"],"kind":"struct"},"6:6565:7368":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","sigaction"],"kind":"struct"},"2:20855:4491":{"crate_id":2,"path":["core","core_simd","elements","const_ptr","SimdConstPtr","from_exposed_addr"],"kind":"foreign_type"},"2:32135:1992":{"crate_id":2,"path":["core","error","private","Internal"],"kind":"struct"},"2:46617:7890":{"crate_id":2,"path":["core","core_arch","simd","u32x8"],"kind":"struct"},"2:41421:7797":{"crate_id":2,"path":["core","net","ip_addr","Ipv4Addr"],"kind":"struct"},"17:10223:5296":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbol"],"kind":"struct"},"6:4716:6968":{"crate_id":6,"path":["libc","unix","linux_like","linux","genlmsghdr"],"kind":"struct"},"6:4963:7096":{"crate_id":6,"path":["libc","unix","linux_like","linux","dirent"],"kind":"struct"},"2:20650:34403":{"crate_id":2,"path":["core","core_simd","swizzle","interleave","Lo"],"kind":"struct"},"22:357:3284":{"crate_id":22,"path":["proc_macro2","imp","LexError"],"kind":"enum"},"2:22043:33138":{"crate_id":2,"path":["core","num","fmt","Part"],"kind":"enum"},"2:39193:4465":{"crate_id":2,"path":["core","ops","generator","GeneratorState"],"kind":"enum"},"21:0:1080":{"crate_id":21,"path":["proc_macro"],"kind":"module"},"5:7042:4556":{"crate_id":5,"path":["alloc","collections","binary_heap","Drain"],"kind":"struct"},"6:1495:6638":{"crate_id":6,"path":["libc","unix","linux_like","in_addr"],"kind":"struct"},"20:322:2513":{"crate_id":20,"path":["quote","spanned","Spanned"],"kind":"trait"},"5:2959:7558":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Immut"],"kind":"struct"},"16:7763:21215":{"crate_id":16,"path":["gimli","read","unit","UnitType"],"kind":"enum"},"1:618:8902":{"crate_id":1,"path":["std","backtrace","Backtrace"],"kind":"struct"},"2:7227:3332":{"crate_id":2,"path":["core","iter","traits","accum","Sum"],"kind":"trait"},"17:14197:6028":{"crate_id":17,"path":["object","pe","ImageArm64RuntimeFunctionEntry"],"kind":"struct"},"2:40400:8403":{"crate_id":2,"path":["core","iter","adapters","flatten","FlattenCompat"],"kind":"struct"},"2:44309:8483":{"crate_id":2,"path":["core","str","UnsafeBytesToStr"],"kind":"struct"},"17:10568:21387":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCacheImage"],"kind":"struct"},"16:7799:6310":{"crate_id":16,"path":["gimli","read","unit","UnitHeader"],"kind":"struct"},"24:4254:3521":{"crate_id":24,"path":["syn","token","Pound"],"kind":"struct"},"2:3385:14444":{"crate_id":2,"path":["core","any","Demand"],"kind":"struct"},"1:9112:8502":{"crate_id":1,"path":["std","time","SystemTimeError"],"kind":"struct"},"2:2842:5129":{"crate_id":2,"path":["core","ops","bit","BitOrAssign"],"kind":"trait"},"2:21673:9064":{"crate_id":2,"path":["core","core_simd","vector","sealed","Sealed"],"kind":"trait"},"2:10870:14412":{"crate_id":2,"path":["core","slice","iter","GroupByMut"],"kind":"struct"},"17:11600:21291":{"crate_id":17,"path":["object","read","CompressionFormat"],"kind":"enum"},"2:44170:8472":{"crate_id":2,"path":["core","str","lossy","Utf8Chunk"],"kind":"struct"},"21:2690:1904":{"crate_id":21,"path":["proc_macro","Span"],"kind":"struct"},"2:43841:8449":{"crate_id":2,"path":["core","str","iter","SplitAsciiWhitespace"],"kind":"struct"},"2:20667:34398":{"crate_id":2,"path":["core","core_simd","swizzle","deinterleave","Even"],"kind":"struct"},"16:5793:8195":{"crate_id":16,"path":["gimli","read","cfi","AugmentationData"],"kind":"struct"},"6:4638:6944":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Phdr"],"kind":"struct"},"2:39381:3298":{"crate_id":2,"path":["core","ops","range","Bound"],"kind":"enum"},"17:11642:5388":{"crate_id":17,"path":["object","read","CompressedData"],"kind":"struct"},"5:892:3266":{"crate_id":5,"path":["alloc","collections","binary_heap","Iter"],"kind":"struct"},"2:2511:149":{"crate_id":2,"path":["core","convert","Into"],"kind":"trait"},"14:221:6430":{"crate_id":14,"path":["rustc_demangle","SizeLimitExhausted"],"kind":"struct"},"5:6316:4908":{"crate_id":5,"path":["alloc","vec","drain","drop","DropGuard"],"kind":"struct"},"6:5890:7236":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_mmap_hdr"],"kind":"struct"},"17:11056:21460":{"crate_id":17,"path":["object","read","pe","export","ExportTarget"],"kind":"enum"},"16:3894:6162":{"crate_id":16,"path":["gimli","constants","DwChildren"],"kind":"struct"},"1:731:142":{"crate_id":1,"path":["std","collections","hash","map","HashMap"],"kind":"struct"},"1:6508:9221":{"crate_id":1,"path":["std","sync","poison","TryLockError"],"kind":"enum"},"2:2160:4491":{"crate_id":2,"path":["core","ptr","from_exposed_addr"],"kind":"function"},"1:10724:130":{"crate_id":1,"path":["std","sys","unix","fs","FileType"],"kind":"struct"},"24:5485:3255":{"crate_id":24,"path":["syn","ty","TypeTraitObject"],"kind":"struct"},"6:6796:7483":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","mcontext_t"],"kind":"struct"},"16:7463:8299":{"crate_id":16,"path":["gimli","read","pubnames","PubNamesEntry"],"kind":"struct"},"20:272:1913":{"crate_id":20,"path":["quote","__private","push_lifetime","Lifetime"],"kind":"struct"},"24:4102:3510":{"crate_id":24,"path":["syn","token","MinusEq"],"kind":"struct"},"24:1491:3374":{"crate_id":24,"path":["syn","parse","ParseBuffer"],"kind":"struct"},"17:9016:5264":{"crate_id":17,"path":["object","endian","LittleEndian"],"kind":"struct"},"2:42588:7811":{"crate_id":2,"path":["core","fmt","rt","Placeholder"],"kind":"struct"},"2:22105:9116":{"crate_id":2,"path":["core","num","error","IntErrorKind"],"kind":"enum"},"2:21210:9264":{"crate_id":2,"path":["core","core_simd","masks","to_bitmask","ToBitMask"],"kind":"trait"},"22:832:1836":{"crate_id":22,"path":["proc_macro2","imp","Ident"],"kind":"enum"},"17:13513:5847":{"crate_id":17,"path":["object","pe","ImageOptionalHeader64"],"kind":"struct"},"1:7621:4229":{"crate_id":1,"path":["std","thread","Builder"],"kind":"struct"},"6:6015:7307":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_entry"],"kind":"struct"},"1:635:8976":{"crate_id":1,"path":["std","backtrace","BacktraceFrame"],"kind":"struct"},"24:4846:3202":{"crate_id":24,"path":["syn","expr","ExprInfer"],"kind":"struct"},"2:6834:3308":{"crate_id":2,"path":["core","iter","range","Step"],"kind":"trait"},"17:10544:21421":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldSubCache"],"kind":"struct"},"1:1048:8298":{"crate_id":1,"path":["std","collections","hash","map","Entry"],"kind":"enum"},"17:11210:8167":{"crate_id":17,"path":["object","read","pe","resource","ResourceDirectoryTable"],"kind":"struct"},"21:2770:1836":{"crate_id":21,"path":["proc_macro","Ident"],"kind":"struct"},"6:4496:6901":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_condition_effect"],"kind":"struct"},"2:1466:2247":{"crate_id":2,"path":["core","mem"],"kind":"module"},"18:719:5167":{"crate_id":18,"path":["memchr","memmem","NeedleInfo"],"kind":"struct"},"24:2871:3468":{"crate_id":24,"path":["syn","token","If"],"kind":"struct"},"2:40225:8399":{"crate_id":2,"path":["core","ffi","c_str","FromBytesUntilNulError"],"kind":"struct"},"17:14259:6050":{"crate_id":17,"path":["object","pe","ImageEnclaveConfig64"],"kind":"struct"},"5:2046:8993":{"crate_id":5,"path":["alloc","collections","btree","map","CursorMut"],"kind":"struct"},"1:6355:29976":{"crate_id":1,"path":["std","sync","mutex","fmt","LockedPlaceholder"],"kind":"struct"},"17:11791:5422":{"crate_id":17,"path":["object","elf","FileHeader64"],"kind":"struct"},"11:1838:8329":{"crate_id":11,"path":["hashbrown","set","Intersection"],"kind":"struct"},"2:6983:3311":{"crate_id":2,"path":["core","iter","sources","empty","Empty"],"kind":"struct"},"24:1338:37541":{"crate_id":24,"path":["syn","lookahead","TokenMarker"],"kind":"enum"},"2:21044:9064":{"crate_id":2,"path":["core","core_simd","elements","sealed","Sealed"],"kind":"trait"},"2:47415:7930":{"crate_id":2,"path":["core","core_arch","simd","i16x32"],"kind":"struct"},"2:4022:103":{"crate_id":2,"path":["core","asserting","Capture"],"kind":"struct"},"2:46312:7869":{"crate_id":2,"path":["core","core_arch","simd","m8x16"],"kind":"struct"},"1:11967:793":{"crate_id":1,"path":["std","isize"],"kind":"primitive"},"24:151:1889":{"crate_id":24,"path":["syn","Token"],"kind":"macro"},"17:14395:6077":{"crate_id":17,"path":["object","pe","ImageArchitectureEntry"],"kind":"struct"},"2:12616:140":{"crate_id":2,"path":["core","alloc","global","GlobalAlloc"],"kind":"trait"},"2:44058:8461":{"crate_id":2,"path":["core","str","pattern","CharSliceSearcher"],"kind":"struct"},"17:13697:5878":{"crate_id":17,"path":["object","pe","ImageSymbolExBytes"],"kind":"struct"},"16:0:3016":{"crate_id":16,"path":["gimli"],"kind":"module"},"2:40192:101":{"crate_id":2,"path":["core","ffi","c_str","CStr"],"kind":"struct"},"9:330:6522":{"crate_id":9,"path":["miniz_oxide","inflate","core","LocalVars"],"kind":"struct"},"1:3700:9113":{"crate_id":1,"path":["std","net","tcp","TcpStream"],"kind":"struct"},"21:648:3436":{"crate_id":21,"path":["proc_macro","diagnostic","MultiSpan"],"kind":"trait"},"18:491:8121":{"crate_id":18,"path":["memchr","cow","Imp"],"kind":"struct"},"1:11425:9114":{"crate_id":1,"path":["std","sys_common","net","UdpSocket"],"kind":"struct"},"2:11803:14421":{"crate_id":2,"path":["core","str","pattern","DoubleEndedSearcher"],"kind":"trait"},"2:47887:7940":{"crate_id":2,"path":["core","core_arch","x86","__m128d"],"kind":"struct"},"1:11956:645":{"crate_id":1,"path":["std","f64"],"kind":"primitive"},"2:44313:7830":{"crate_id":2,"path":["core","time","Nanoseconds"],"kind":"struct"},"2:30943:4126":{"crate_id":2,"path":["core","cmp","Reverse"],"kind":"struct"},"1:3378:4932":{"crate_id":1,"path":["std","io","Guard"],"kind":"struct"},"24:4789:3189":{"crate_id":24,"path":["syn","expr","ExprBinary"],"kind":"struct"},"2:9436:145":{"crate_id":2,"path":["core","hash","Hasher"],"kind":"trait"},"2:40118:3423":{"crate_id":2,"path":["core","char","EscapeDefault"],"kind":"struct"},"24:5298:2194":{"crate_id":24,"path":["syn","path","GenericArgument"],"kind":"enum"},"0:947:1704":{"crate_id":0,"path":["serde_derive","Deserialize"],"kind":"proc_derive"},"17:12148:5496":{"crate_id":17,"path":["object","elf","NoteHeader32"],"kind":"struct"},"17:13109:5680":{"crate_id":17,"path":["object","macho","NoteCommand"],"kind":"struct"},"1:10744:7998":{"crate_id":1,"path":["std","sys","unix","io","IoSlice"],"kind":"struct"},"1:7708:9017":{"crate_id":1,"path":["std","env","VarError"],"kind":"enum"},"2:11778:14425":{"crate_id":2,"path":["core","str","pattern"],"kind":"module"},"6:6775:7469":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user"],"kind":"struct"},"5:3799:4554":{"crate_id":5,"path":["alloc","collections","linked_list","ExtractIf"],"kind":"struct"},"17:12004:5458":{"crate_id":17,"path":["object","elf","Rela64"],"kind":"struct"},"24:4864:3206":{"crate_id":24,"path":["syn","expr","ExprMatch"],"kind":"struct"},"16:55:6337":{"crate_id":16,"path":["gimli","endianity","Endianity"],"kind":"trait"},"17:9518:21281":{"crate_id":17,"path":["object","read","any","ComdatIterator"],"kind":"struct"},"17:2105:21368":{"crate_id":17,"path":["object","read","elf","relocation","ElfRelaIterator"],"kind":"enum"},"2:42066:83":{"crate_id":2,"path":["core","sync","atomic","AtomicI64"],"kind":"struct"},"18:481:8120":{"crate_id":18,"path":["memchr","cow","CowBytes"],"kind":"struct"},"6:4848:7029":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlattr"],"kind":"struct"},"1:1846:9015":{"crate_id":1,"path":["std","env","ArgsOs"],"kind":"struct"},"1:8924:8028":{"crate_id":1,"path":["std","sync","condvar","WaitTimeoutResult"],"kind":"struct"},"16:7331:37280":{"crate_id":16,"path":["gimli","read","op","EvaluationWaiting"],"kind":"enum"},"1:6935:5001":{"crate_id":1,"path":["std","sys_common","lazy_box","LazyBox"],"kind":"struct"},"17:11276:128":{"crate_id":17,"path":["object","read","Error"],"kind":"struct"},"22:702:233":{"crate_id":22,"path":["proc_macro2","fallback","TokenStream"],"kind":"struct"},"24:5462:3249":{"crate_id":24,"path":["syn","ty","TypeMacro"],"kind":"struct"},"17:13964:5949":{"crate_id":17,"path":["object","pe","ImageResourceDirStringU"],"kind":"struct"},"24:4908:3216":{"crate_id":24,"path":["syn","expr","ExprTuple"],"kind":"struct"},"5:7256:8352":{"crate_id":5,"path":["alloc","ffi","c_str","IntoStringError"],"kind":"struct"},"1:10714:7957":{"crate_id":1,"path":["std","sys","unix","fs","FileTimes"],"kind":"struct"},"2:7231:3331":{"crate_id":2,"path":["core","iter","traits","accum","Product"],"kind":"trait"},"2:40372:3345":{"crate_id":2,"path":["core","iter","adapters","enumerate","Enumerate"],"kind":"struct"},"24:1506:3375":{"crate_id":24,"path":["syn","parse","StepCursor"],"kind":"struct"},"24:3381:3488":{"crate_id":24,"path":["syn","token","While"],"kind":"struct"},"24:4027:3505":{"crate_id":24,"path":["syn","token","Gt"],"kind":"struct"},"2:2757:5119":{"crate_id":2,"path":["core","ops","arith","Sub"],"kind":"trait"},"16:6531:4898":{"crate_id":16,"path":["gimli","read","lazy","imp","LazyArc"],"kind":"struct"},"2:2241:97":{"crate_id":2,"path":["core","borrow","Borrow"],"kind":"trait"},"2:2347:182":{"crate_id":2,"path":["core","cmp","Ord"],"kind":"trait"},"6:4420:6868":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_event"],"kind":"struct"},"1:2892:128":{"crate_id":1,"path":["std","io","error","Error"],"kind":"struct"},"17:10390:8141":{"crate_id":17,"path":["object","read","elf","version","VerdefIterator"],"kind":"struct"},"17:10555:21422":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCacheImageIterator"],"kind":"struct"},"1:8257:9142":{"crate_id":1,"path":["std","os","unix","net","ancillary","SocketAncillary"],"kind":"struct"},"1:2890:210":{"crate_id":1,"path":["std","io","error","Result"],"kind":"typedef"},"17:13894:5927":{"crate_id":17,"path":["object","pe","ImageImportDescriptor"],"kind":"struct"},"1:643:8978":{"crate_id":1,"path":["std","backtrace","BytesOrWide"],"kind":"enum"},"24:4857:3204":{"crate_id":24,"path":["syn","expr","ExprLoop"],"kind":"struct"},"11:1611:4905":{"crate_id":11,"path":["hashbrown","scopeguard","ScopeGuard"],"kind":"struct"},"2:4258:3391":{"crate_id":2,"path":["core","cell","BorrowError"],"kind":"struct"},"24:3177:1851":{"crate_id":24,"path":["syn","token","Struct"],"kind":"struct"},"2:6787:34364":{"crate_id":2,"path":["core","iter","adapters","GenericShunt"],"kind":"struct"},"1:3962:9122":{"crate_id":1,"path":["std","os","unix","fs","MetadataExt"],"kind":"trait"},"1:7539:5003":{"crate_id":1,"path":["std","backtrace_rs","print","BacktraceFrameFmt"],"kind":"struct"},"16:4506:6168":{"crate_id":16,"path":["gimli","constants","DwDs"],"kind":"struct"},"2:2795:5125":{"crate_id":2,"path":["core","ops","arith","DivAssign"],"kind":"trait"},"2:11601:8361":{"crate_id":2,"path":["core","str","iter","SplitInclusive"],"kind":"struct"},"2:43364:8366":{"crate_id":2,"path":["core","slice","iter","ChunksExact"],"kind":"struct"},"1:10454:9093":{"crate_id":1,"path":["std","sys","unix","stdio","Stderr"],"kind":"struct"},"24:4816:3195":{"crate_id":24,"path":["syn","expr","ExprConst"],"kind":"struct"},"22:823:1825":{"crate_id":22,"path":["proc_macro2","imp","Group"],"kind":"enum"},"24:4872:3208":{"crate_id":24,"path":["syn","expr","ExprParen"],"kind":"struct"},"2:42890:7819":{"crate_id":2,"path":["core","hash","sip","State"],"kind":"struct"},"2:1629:587":{"crate_id":2,"path":["core","mem","drop"],"kind":"function"},"1:8943:107":{"crate_id":1,"path":["std","sync","mpmc","context","Context"],"kind":"struct"},"24:3904:3497":{"crate_id":24,"path":["syn","token","Dollar"],"kind":"struct"},"2:22453:177":{"crate_id":2,"path":["core","num","nonzero","NonZeroU64"],"kind":"struct"},"17:1973:21338":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbolIterator"],"kind":"struct"},"1:10032:29351":{"crate_id":1,"path":["std","sys","unix","os","Env"],"kind":"struct"},"17:9899:5283":{"crate_id":17,"path":["object","read","coff","section","SectionTable"],"kind":"struct"},"24:5327:2291":{"crate_id":24,"path":["syn","path","AssocConst"],"kind":"struct"},"24:5341:2249":{"crate_id":24,"path":["syn","path","QSelf"],"kind":"struct"},"16:6789:8281":{"crate_id":16,"path":["gimli","read","line","CompleteLineProgram"],"kind":"struct"},"24:5286:2475":{"crate_id":24,"path":["syn","path","PathSegment"],"kind":"struct"},"17:10175:5289":{"crate_id":17,"path":["object","read","elf","symbol","SymbolTable"],"kind":"struct"},"21:2241:3287":{"crate_id":21,"path":["proc_macro","bridge","DelimSpan"],"kind":"struct"},"1:5949:206":{"crate_id":1,"path":["std","sync","mpmc","counter","Receiver"],"kind":"struct"},"2:2821:5109":{"crate_id":2,"path":["core","ops","bit","BitXor"],"kind":"trait"},"6:1545:6662":{"crate_id":6,"path":["libc","unix","linux_like","addrinfo"],"kind":"struct"},"17:11568:21290":{"crate_id":17,"path":["object","read","RelocationTarget"],"kind":"enum"},"2:46493:7873":{"crate_id":2,"path":["core","core_arch","simd","u8x32"],"kind":"struct"},"16:5567:6133":{"crate_id":16,"path":["gimli","read","cfi","DebugFrame"],"kind":"struct"},"18:515:5151":{"crate_id":18,"path":["memchr","memmem","prefilter","PrefilterFn"],"kind":"struct"},"5:7121:3265":{"crate_id":5,"path":["alloc","collections","vec_deque","into_iter","IntoIter"],"kind":"struct"},"2:40888:3316":{"crate_id":2,"path":["core","iter","sources","once_with","OnceWith"],"kind":"struct"},"2:3151:234":{"crate_id":2,"path":["core","ops","try_trait","Try"],"kind":"trait"},"1:3463:3417":{"crate_id":1,"path":["std","io","Write"],"kind":"trait"},"16:7833:8306":{"crate_id":16,"path":["gimli","read","unit","DebuggingInformationEntry"],"kind":"struct"},"1:7675:8980":{"crate_id":1,"path":["std","backtrace","BacktraceStatus"],"kind":"enum"},"2:4010:33346":{"crate_id":2,"path":["core","asserting","TryCaptureWithDebug"],"kind":"struct"},"17:10621:21425":{"crate_id":17,"path":["object","read","macho","file","MachOComdatSectionIterator"],"kind":"struct"},"16:7025:8293":{"crate_id":16,"path":["gimli","read","lookup","LookupEntryIter"],"kind":"struct"},"24:4896:3213":{"crate_id":24,"path":["syn","expr","ExprStruct"],"kind":"struct"},"16:6427:8250":{"crate_id":16,"path":["gimli","read","aranges","ArangeEntryIter"],"kind":"struct"},"24:4880:3209":{"crate_id":24,"path":["syn","expr","ExprRange"],"kind":"struct"},"6:488:6571":{"crate_id":6,"path":["libc","unix","timeval"],"kind":"struct"},"2:39448:3398":{"crate_id":2,"path":["core","any","tags","Ref"],"kind":"struct"},"5:1099:37074":{"crate_id":5,"path":["alloc","collections","btree","append","MergeIter"],"kind":"struct"},"1:554:4225":{"crate_id":1,"path":["std","thread","JoinHandle"],"kind":"struct"},"6:482:6568":{"crate_id":6,"path":["libc","unix","utimbuf"],"kind":"struct"},"6:547:6608":{"crate_id":6,"path":["libc","unix","pollfd"],"kind":"struct"},"16:5994:21200":{"crate_id":16,"path":["gimli","read","cfi","CfaRule"],"kind":"enum"},"22:932:1903":{"crate_id":22,"path":["proc_macro2","Spacing"],"kind":"enum"},"11:695:8599":{"crate_id":11,"path":["hashbrown","map","IntoValues"],"kind":"struct"},"17:11074:5346":{"crate_id":17,"path":["object","read","pe","export","Export"],"kind":"struct"},"24:3262:3482":{"crate_id":24,"path":["syn","token","Typeof"],"kind":"struct"},"11:2201:3304":{"crate_id":11,"path":["hashbrown","TryReserveError"],"kind":"enum"},"1:6644:29976":{"crate_id":1,"path":["std","sync","rwlock","fmt","LockedPlaceholder"],"kind":"struct"},"16:6692:21205":{"crate_id":16,"path":["gimli","read","line","ColumnType"],"kind":"enum"},"1:3956:9121":{"crate_id":1,"path":["std","os","unix","fs","OpenOptionsExt"],"kind":"trait"},"24:1405:1909":{"crate_id":24,"path":["syn","meta","ParseNestedMeta"],"kind":"struct"},"2:2737:4113":{"crate_id":2,"path":["core","marker","Freeze"],"kind":"trait"},"6:5920:7259":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","timex"],"kind":"struct"},"17:9118:5268":{"crate_id":17,"path":["object","endian","U64Bytes"],"kind":"struct"},"17:14227:6035":{"crate_id":17,"path":["object","pe","ImageRuntimeFunctionEntry"],"kind":"struct"},"2:4186:3387":{"crate_id":2,"path":["core","cell","Cell"],"kind":"struct"},"6:7295:7529":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","align","sem_t"],"kind":"struct"},"5:1520:8992":{"crate_id":5,"path":["alloc","collections","btree","map","RangeMut"],"kind":"struct"},"1:10389:5008":{"crate_id":1,"path":["std","sys","unix","stack_overflow","Handler"],"kind":"struct"},"17:10581:21403":{"crate_id":17,"path":["object","read","macho","file","MachOFile"],"kind":"struct"},"11:1517:20267":{"crate_id":11,"path":["hashbrown","rustc_entry","RustcOccupiedEntry"],"kind":"struct"},"2:10338:14417":{"crate_id":2,"path":["core","slice","iter","SplitNMut"],"kind":"struct"},"2:21229:9064":{"crate_id":2,"path":["core","core_simd","masks","sealed","Sealed"],"kind":"trait"},"24:3313:3484":{"crate_id":24,"path":["syn","token","Unsized"],"kind":"struct"},"1:5716:9217":{"crate_id":1,"path":["std","sync","barrier","BarrierWaitResult"],"kind":"struct"},"5:7062:36750":{"crate_id":5,"path":["alloc","collections","btree","merge_iter","Peeked"],"kind":"enum"},"2:4:1019":{"crate_id":2,"path":["core","panic"],"kind":"macro"},"1:4135:9146":{"crate_id":1,"path":["std","os","unix","net","ancillary","AncillaryData"],"kind":"enum"},"1:2219:9044":{"crate_id":1,"path":["std","fs","read_to_string"],"kind":"function"},"5:1285:8990":{"crate_id":5,"path":["alloc","collections","btree","map","entry","OccupiedEntry"],"kind":"struct"},"1:11035:8021":{"crate_id":1,"path":["std","sys","unix","process","process_inner","ExitStatus"],"kind":"struct"},"21:2302:2218":{"crate_id":21,"path":["proc_macro","bridge","Punct"],"kind":"struct"},"6:4380:6845":{"crate_id":6,"path":["libc","unix","linux_like","linux","packet_mreq"],"kind":"struct"},"2:11792:8131":{"crate_id":2,"path":["core","str","pattern","Searcher"],"kind":"trait"},"6:1717:6772":{"crate_id":6,"path":["libc","unix","linux_like","utsname"],"kind":"struct"},"17:10832:21388":{"crate_id":17,"path":["object","read","macho","section","MachOSection"],"kind":"struct"},"1:2215:4499":{"crate_id":1,"path":["std","fs","read"],"kind":"function"},"24:5317:2492":{"crate_id":24,"path":["syn","path","AngleBracketedGenericArguments"],"kind":"struct"},"2:4785:33473":{"crate_id":2,"path":["core","ffi","sealed_trait","VaArgSafe"],"kind":"trait"},"2:4045:4463":{"crate_id":2,"path":["core","async_iter","async_iter","AsyncIterator"],"kind":"trait"},"1:2580:8907":{"crate_id":1,"path":["std","io","buffered","bufwriter","WriterPanicked"],"kind":"struct"},"6:4506:6908":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_periodic_effect"],"kind":"struct"},"5:3327:4554":{"crate_id":5,"path":["alloc","collections","btree","set","ExtractIf"],"kind":"struct"},"2:21106:9265":{"crate_id":2,"path":["core","core_simd","lane_count","LaneCount"],"kind":"struct"},"24:4837:3200":{"crate_id":24,"path":["syn","expr","ExprIf"],"kind":"struct"},"17:9485:37331":{"crate_id":17,"path":["object","read","any","SectionIteratorInternal"],"kind":"enum"},"1:2620:9090":{"crate_id":1,"path":["std","io","buffered","linewriter","LineWriter"],"kind":"struct"},"1:1783:8999":{"crate_id":1,"path":["std","env","Vars"],"kind":"struct"},"22:696:8113":{"crate_id":22,"path":["proc_macro2","rcvec","RcVecIntoIter"],"kind":"struct"},"17:10080:21349":{"crate_id":17,"path":["object","read","elf","file","ElfFile"],"kind":"struct"},"23:0:3138":{"crate_id":23,"path":["unicode_ident"],"kind":"module"},"1:926:8599":{"crate_id":1,"path":["std","collections","hash","map","IntoValues"],"kind":"struct"},"2:44484:211":{"crate_id":2,"path":["core","future","ResumeTy"],"kind":"struct"},"24:598:3265":{"crate_id":24,"path":["syn","error","IntoIter"],"kind":"struct"},"17:10351:5297":{"crate_id":17,"path":["object","read","elf","version","VersionIndex"],"kind":"struct"},"21:2775:2511":{"crate_id":21,"path":["proc_macro","Literal"],"kind":"struct"},"17:10199:5294":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbolTable"],"kind":"struct"},"24:909:37718":{"crate_id":24,"path":["syn","generics","ConstParamsMut"],"kind":"struct"},"2:22585:170":{"crate_id":2,"path":["core","num","nonzero","NonZeroI16"],"kind":"struct"},"2:39359:203":{"crate_id":2,"path":["core","ops","range","RangeToInclusive"],"kind":"struct"},"24:2905:3470":{"crate_id":24,"path":["syn","token","In"],"kind":"struct"},"17:8841:21274":{"crate_id":17,"path":["object","common","RelocationEncoding"],"kind":"enum"},"6:4862:7037":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_ifru_map"],"kind":"struct"},"1:4868:9176":{"crate_id":1,"path":["std","os","net","linux_ext","addr","SocketAddrExt"],"kind":"trait"},"17:13971:5950":{"crate_id":17,"path":["object","pe","ImageResourceDataEntry"],"kind":"struct"},"24:2228:5116":{"crate_id":24,"path":["syn","thread","ThreadBound"],"kind":"struct"},"17:10799:21390":{"crate_id":17,"path":["object","read","macho","segment","MachOSegment"],"kind":"struct"},"17:8711:21270":{"crate_id":17,"path":["object","common","ComdatKind"],"kind":"enum"},"17:12921:5647":{"crate_id":17,"path":["object","macho","EncryptionInfoCommand32"],"kind":"struct"},"24:4912:3217":{"crate_id":24,"path":["syn","expr","ExprUnary"],"kind":"struct"},"2:2150:588":{"crate_id":2,"path":["core","ptr","drop_in_place"],"kind":"function"},"17:9850:21300":{"crate_id":17,"path":["object","read","archive","MemberHeader"],"kind":"enum"},"24:4928:1859":{"crate_id":24,"path":["syn","expr","Member"],"kind":"enum"},"17:13303:5698":{"crate_id":17,"path":["object","pe","ImageDosHeader"],"kind":"struct"},"2:43708:8441":{"crate_id":2,"path":["core","str","iter","MatchIndices"],"kind":"struct"},"17:12659:5592":{"crate_id":17,"path":["object","macho","ThreadCommand"],"kind":"struct"},"17:11388:21289":{"crate_id":17,"path":["object","read","SymbolSection"],"kind":"enum"},"17:9926:21307":{"crate_id":17,"path":["object","read","coff","section","CoffSegment"],"kind":"struct"},"17:9296:5273":{"crate_id":17,"path":["object","read","util","ByteString"],"kind":"struct"},"17:11164:5349":{"crate_id":17,"path":["object","read","pe","relocation","RelocationBlockIterator"],"kind":"struct"},"1:6108:4976":{"crate_id":1,"path":["std","sync","mpmc","waker","Waker"],"kind":"struct"},"1:953:8988":{"crate_id":1,"path":["std","collections","hash","map","RawVacantEntryMut"],"kind":"struct"},"24:4394:3531":{"crate_id":24,"path":["syn","token","Star"],"kind":"struct"},"1:4010:9125":{"crate_id":1,"path":["std","os","unix","fs","DirEntryExt2"],"kind":"trait"},"24:4484:3168":{"crate_id":24,"path":["syn","attr","AttrStyle"],"kind":"enum"},"24:2650:99":{"crate_id":24,"path":["syn","token","Break"],"kind":"struct"},"21:2729:3286":{"crate_id":21,"path":["proc_macro","Delimiter"],"kind":"enum"},"18:548:141":{"crate_id":18,"path":["memchr","memmem","rabinkarp","Hash"],"kind":"struct"},"24:4543:1853":{"crate_id":24,"path":["syn","data","Field"],"kind":"struct"},"17:13830:5910":{"crate_id":17,"path":["object","pe","ImageExportDirectory"],"kind":"struct"},"2:39315:202":{"crate_id":2,"path":["core","ops","range","RangeTo"],"kind":"struct"},"17:12757:5621":{"crate_id":17,"path":["object","macho","DylibTableOfContents"],"kind":"struct"},"24:1623:2077":{"crate_id":24,"path":["syn","parse_quote"],"kind":"macro"},"22:773:3287":{"crate_id":22,"path":["proc_macro2","extra","DelimSpan"],"kind":"struct"},"17:12671:5593":{"crate_id":17,"path":["object","macho","RoutinesCommand32"],"kind":"struct"},"1:8113:7997":{"crate_id":1,"path":["std","io","util","Sink"],"kind":"struct"},"1:3703:9112":{"crate_id":1,"path":["std","net","tcp","TcpListener"],"kind":"struct"},"2:41504:33136":{"crate_id":2,"path":["core","net","parser","AddrKind"],"kind":"enum"},"16:5775:6191":{"crate_id":16,"path":["gimli","read","cfi","Augmentation"],"kind":"struct"},"2:21459:9278":{"crate_id":2,"path":["core","core_simd","ord","SimdOrd"],"kind":"trait"},"24:5494:3242":{"crate_id":24,"path":["syn","ty","BareFnArg"],"kind":"struct"},"2:8736:79":{"crate_id":2,"path":["core","sync","atomic","AtomicBool"],"kind":"struct"},"2:46571:7889":{"crate_id":2,"path":["core","core_arch","simd","u16x16"],"kind":"struct"},"6:6618:7397":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stack_t"],"kind":"struct"},"17:11498:5378":{"crate_id":17,"path":["object","read","Import"],"kind":"struct"},"6:4556:6930":{"crate_id":6,"path":["libc","unix","linux_like","linux","dl_phdr_info"],"kind":"struct"},"17:8659:21269":{"crate_id":17,"path":["object","common","SectionKind"],"kind":"enum"},"6:6868:7509":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ucontext_t"],"kind":"struct"},"24:4242:3520":{"crate_id":24,"path":["syn","token","PlusEq"],"kind":"struct"},"24:2803:3465":{"crate_id":24,"path":["syn","token","Extern"],"kind":"struct"},"1:2348:4482":{"crate_id":1,"path":["std","fs","metadata"],"kind":"function"},"1:8185:8446":{"crate_id":1,"path":["std","io","Lines"],"kind":"struct"},"17:11753:5407":{"crate_id":17,"path":["object","archive","AixMemberOffset"],"kind":"struct"},"11:1831:4554":{"crate_id":11,"path":["hashbrown","set","ExtractIf"],"kind":"struct"},"1:3948:9120":{"crate_id":1,"path":["std","os","unix","fs","PermissionsExt"],"kind":"trait"},"2:47067:7897":{"crate_id":2,"path":["core","core_arch","simd","i8x64"],"kind":"struct"},"21:478:4895":{"crate_id":21,"path":["proc_macro","bridge","server","RunningSameThreadGuard"],"kind":"struct"},"24:1136:8085":{"crate_id":24,"path":["syn","lit","LitIntRepr"],"kind":"struct"},"1:10858:6542":{"crate_id":1,"path":["std","sys","unix","os_str","Buf"],"kind":"struct"},"17:11020:21432":{"crate_id":17,"path":["object","read","pe","section","PeSection"],"kind":"struct"},"2:11566:8443":{"crate_id":2,"path":["core","str","iter","MatchesInternal"],"kind":"struct"},"5:5754:4556":{"crate_id":5,"path":["alloc","string","Drain"],"kind":"struct"},"21:2269:1825":{"crate_id":21,"path":["proc_macro","bridge","Group"],"kind":"struct"},"17:8872:21275":{"crate_id":17,"path":["object","common","FileFlags"],"kind":"enum"},"1:638:8977":{"crate_id":1,"path":["std","backtrace","BacktraceSymbol"],"kind":"struct"},"16:7753:8305":{"crate_id":16,"path":["gimli","read","unit","DebugInfoUnitHeadersIter"],"kind":"struct"},"24:4807:3193":{"crate_id":24,"path":["syn","expr","ExprCast"],"kind":"struct"},"6:4984:7108":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_setup"],"kind":"struct"},"11:817:8987":{"crate_id":11,"path":["hashbrown","map","RawOccupiedEntryMut"],"kind":"struct"},"2:1543:4932":{"crate_id":2,"path":["core","mem","maybe_uninit","write_slice_cloned","Guard"],"kind":"struct"},"2:4811:799":{"crate_id":2,"path":["core","iter"],"kind":"module"},"22:953:2511":{"crate_id":22,"path":["proc_macro2","Literal"],"kind":"struct"},"6:4833:7022":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlmsghdr"],"kind":"struct"},"17:13937:5942":{"crate_id":17,"path":["object","pe","ImageResourceDirectory"],"kind":"struct"},"2:20853:33359":{"crate_id":2,"path":["core","core_simd","elements","const_ptr","SimdConstPtr","with_addr"],"kind":"foreign_type"},"2:9675:4967":{"crate_id":2,"path":["core","slice","sort","merge_sort","BufGuard"],"kind":"struct"},"2:43662:8438":{"crate_id":2,"path":["core","str","iter","SplitN"],"kind":"struct"},"2:2508:74":{"crate_id":2,"path":["core","convert","AsMut"],"kind":"trait"},"2:21238:7565":{"crate_id":2,"path":["core","core_simd","masks","Mask"],"kind":"struct"},"2:47525:7931":{"crate_id":2,"path":["core","core_arch","simd","u16x32"],"kind":"struct"},"24:2684:108":{"crate_id":24,"path":["syn","token","Continue"],"kind":"struct"},"6:4754:6985":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_vm"],"kind":"struct"},"17:9336:129":{"crate_id":17,"path":["object","read","any","File"],"kind":"struct"},"2:40668:3358":{"crate_id":2,"path":["core","iter","adapters","take_while","TakeWhile"],"kind":"struct"},"6:6067:7321":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_data"],"kind":"union"},"2:45692:7842":{"crate_id":2,"path":["core","core_arch","simd","u8x8"],"kind":"struct"},"5:7076:3265":{"crate_id":5,"path":["alloc","collections","btree","set","IntoIter"],"kind":"struct"},"21:1818:4577":{"crate_id":21,"path":["proc_macro","bridge","Marked"],"kind":"struct"},"2:40879:3314":{"crate_id":2,"path":["core","iter","sources","once","Once"],"kind":"struct"},"24:1937:3265":{"crate_id":24,"path":["syn","punctuated","IntoIter"],"kind":"struct"},"5:6468:4908":{"crate_id":5,"path":["alloc","vec","into_iter","drop","DropGuard"],"kind":"struct"},"2:46191:7865":{"crate_id":2,"path":["core","core_arch","simd","i64x2"],"kind":"struct"},"6:7609:7554":{"crate_id":6,"path":["libc","unix","align","in6_addr"],"kind":"struct"},"1:9064:218":{"crate_id":1,"path":["std","sync","rwlock","RwLockReadGuard"],"kind":"struct"},"24:1487:3278":{"crate_id":24,"path":["syn","parse","Parse"],"kind":"trait"},"5:3668:4908":{"crate_id":5,"path":["alloc","collections","linked_list","drop","DropGuard"],"kind":"struct"},"17:11144:8163":{"crate_id":17,"path":["object","read","pe","import","DelayLoadImportTable"],"kind":"struct"},"24:4820:3196":{"crate_id":24,"path":["syn","expr","ExprContinue"],"kind":"struct"},"16:6142:194":{"crate_id":16,"path":["gimli","read","cfi","Pointer"],"kind":"enum"},"16:5940:21199":{"crate_id":16,"path":["gimli","read","cfi","UnwindTable"],"kind":"struct"},"17:9821:5281":{"crate_id":17,"path":["object","read","archive","ArchiveFile"],"kind":"struct"},"2:41589:181":{"crate_id":2,"path":["core","option","Option"],"kind":"enum"},"2:44085:8462":{"crate_id":2,"path":["core","str","pattern","CharPredicateSearcher"],"kind":"struct"},"24:5146:3226":{"crate_id":24,"path":["syn","lit","LitBool"],"kind":"struct"},"2:2910:3406":{"crate_id":2,"path":["core","ops","deref","DerefMut"],"kind":"trait"},"6:5008:7115":{"crate_id":6,"path":["libc","unix","linux_like","linux","af_alg_iv"],"kind":"struct"},"16:6554:8262":{"crate_id":16,"path":["gimli","read","line","LineRows"],"kind":"struct"},"17:13732:5888":{"crate_id":17,"path":["object","pe","ImageAuxSymbolFunctionBeginEnd"],"kind":"struct"},"17:12631:5588":{"crate_id":17,"path":["object","macho","PreboundDylibCommand"],"kind":"struct"},"17:11669:5389":{"crate_id":17,"path":["object","archive","Header"],"kind":"struct"},"1:8265:9111":{"crate_id":1,"path":["std","os","unix","net","listener","Incoming"],"kind":"struct"},"2:7657:3327":{"crate_id":2,"path":["core","iter","traits","marker","TrustedLen"],"kind":"trait"},"2:21126:7565":{"crate_id":2,"path":["core","core_simd","masks","mask_impl","Mask"],"kind":"struct"},"1:7885:8908":{"crate_id":1,"path":["std","io","buffered","IntoInnerError"],"kind":"struct"},"17:10786:21391":{"crate_id":17,"path":["object","read","macho","segment","MachOSegmentIterator"],"kind":"struct"},"24:5503:2250":{"crate_id":24,"path":["syn","ty","ReturnType"],"kind":"enum"},"2:41826:84":{"crate_id":2,"path":["core","sync","atomic","AtomicI8"],"kind":"struct"},"2:47971:7946":{"crate_id":2,"path":["core","core_arch","x86","__m512d"],"kind":"struct"},"17:10633:5300":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandIterator"],"kind":"struct"},"17:13787:5902":{"crate_id":17,"path":["object","pe","ImageLinenumber"],"kind":"struct"},"24:1068:1913":{"crate_id":24,"path":["syn","lifetime","Lifetime"],"kind":"struct"},"2:9223:194":{"crate_id":2,"path":["core","fmt","Pointer"],"kind":"trait"},"6:4489:6898":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_ramp_effect"],"kind":"struct"},"6:4315:6800":{"crate_id":6,"path":["libc","unix","linux_like","linux","spwd"],"kind":"struct"},"2:2984:3275":{"crate_id":2,"path":["core","ops","index","IndexMut"],"kind":"trait"},"2:42693:73":{"crate_id":2,"path":["core","fmt","Arguments"],"kind":"struct"},"24:4015:3504":{"crate_id":24,"path":["syn","token","Ge"],"kind":"struct"},"2:12361:136":{"crate_id":2,"path":["core","future","future","Future"],"kind":"trait"},"5:1423:3270":{"crate_id":5,"path":["alloc","collections","btree","map","IterMut"],"kind":"struct"},"6:6726:7432":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_fpstate"],"kind":"struct"},"17:14236:6037":{"crate_id":17,"path":["object","pe","ImageEnclaveConfig32"],"kind":"struct"},"17:9032:5265":{"crate_id":17,"path":["object","endian","BigEndian"],"kind":"struct"},"17:12106:5481":{"crate_id":17,"path":["object","elf","Verdaux"],"kind":"struct"},"24:3279:1873":{"crate_id":24,"path":["syn","token","Union"],"kind":"struct"},"11:630:3266":{"crate_id":11,"path":["hashbrown","map","Iter"],"kind":"struct"},"24:1489:1911":{"crate_id":24,"path":["syn","parse","ParseStream"],"kind":"typedef"},"20:281:1913":{"crate_id":20,"path":["quote","__private","push_lifetime_spanned","Lifetime"],"kind":"struct"},"6:5068:7144":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_txtime"],"kind":"struct"},"2:10196:14418":{"crate_id":2,"path":["core","slice","iter","SplitInclusiveMut"],"kind":"struct"},"1:9406:129":{"crate_id":1,"path":["std","sys","unix","fs","File"],"kind":"struct"},"1:8368:8012":{"crate_id":1,"path":["std","path","Prefix"],"kind":"enum"},"2:4113:3409":{"crate_id":2,"path":["core","cell","lazy","LazyCell"],"kind":"struct"},"5:3209:8329":{"crate_id":5,"path":["alloc","collections","btree","set","Intersection"],"kind":"struct"},"24:4423:3533":{"crate_id":24,"path":["syn","token","Tilde"],"kind":"struct"},"2:42226:8603":{"crate_id":2,"path":["core","sync","exclusive","Exclusive"],"kind":"struct"},"1:5377:9198":{"crate_id":1,"path":["std","process","ChildStdout"],"kind":"struct"},"2:46729:7892":{"crate_id":2,"path":["core","core_arch","simd","i8x32"],"kind":"struct"},"5:3214:36739":{"crate_id":5,"path":["alloc","collections","btree","set","IntersectionInner"],"kind":"enum"},"17:10863:5289":{"crate_id":17,"path":["object","read","macho","symbol","SymbolTable"],"kind":"struct"},"1:8807:8023":{"crate_id":1,"path":["std","process","ExitCode"],"kind":"struct"},"2:11345:14426":{"crate_id":2,"path":["core","str","converts","from_utf8"],"kind":"function"},"22:841:2511":{"crate_id":22,"path":["proc_macro2","imp","Literal"],"kind":"enum"},"24:921:2880":{"crate_id":24,"path":["syn","generics","TypeGenerics"],"kind":"struct"},"18:755:8138":{"crate_id":18,"path":["memchr","memmem","SearcherRev"],"kind":"struct"},"24:1035:1836":{"crate_id":24,"path":["syn","ident","Ident"],"kind":"function"},"2:41906:81":{"crate_id":2,"path":["core","sync","atomic","AtomicI16"],"kind":"struct"},"2:43093:7823":{"crate_id":2,"path":["core","slice","sort","TimSortRun"],"kind":"struct"},"24:5136:3228":{"crate_id":24,"path":["syn","lit","LitByteStr"],"kind":"struct"},"6:579:6624":{"crate_id":6,"path":["libc","unix","tms"],"kind":"struct"},"17:13368:5749":{"crate_id":17,"path":["object","pe","ImageVxdHeader"],"kind":"struct"},"21:2643:3265":{"crate_id":21,"path":["proc_macro","token_stream","IntoIter"],"kind":"struct"},"1:8527:8499":{"crate_id":1,"path":["std","path","StripPrefixError"],"kind":"struct"},"11:736:8328":{"crate_id":11,"path":["hashbrown","map","Values"],"kind":"struct"},"18:609:37339":{"crate_id":18,"path":["memchr","memmem","twoway","Suffix"],"kind":"struct"},"6:1911:16217":{"crate_id":6,"path":["libc","unix","linux_like","linux","fpos64_t"],"kind":"enum"},"16:5363:21195":{"crate_id":16,"path":["gimli","endianity","RunTimeEndian"],"kind":"enum"},"24:2599:3459":{"crate_id":24,"path":["syn","token","Await"],"kind":"struct"},"6:4616:6942":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Sym"],"kind":"struct"},"1:911:4554":{"crate_id":1,"path":["std","collections","hash","map","ExtractIf"],"kind":"struct"},"6:4748:6983":{"crate_id":6,"path":["libc","unix","linux_like","linux","fanotify_response"],"kind":"struct"},"24:258:8888":{"crate_id":24,"path":["syn","attr","parsing","DisplayPath"],"kind":"struct"},"16:2874:6127":{"crate_id":16,"path":["gimli","common","DebugFrameOffset"],"kind":"struct"},"1:4351:9143":{"crate_id":1,"path":["std","os","unix","net","stream","UnixStream"],"kind":"struct"},"10:36:6484":{"crate_id":10,"path":["adler","algo","U32X4"],"kind":"struct"},"6:5987:7293":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","Elf32_Chdr"],"kind":"struct"},"1:11952:1488":{"crate_id":1,"path":["std","tuple"],"kind":"primitive"},"24:877:37719":{"crate_id":24,"path":["syn","generics","LifetimesMut"],"kind":"struct"},"20:239:4045":{"crate_id":20,"path":["quote","__private","get_span","GetSpanInner"],"kind":"struct"},"16:2589:6115":{"crate_id":16,"path":["gimli","common","DebugLocListsIndex"],"kind":"struct"},"24:869:37717":{"crate_id":24,"path":["syn","generics","Lifetimes"],"kind":"struct"},"5:1511:198":{"crate_id":5,"path":["alloc","collections","btree","map","Range"],"kind":"struct"},"17:8899:21276":{"crate_id":17,"path":["object","common","SegmentFlags"],"kind":"enum"},"24:1910:3264":{"crate_id":24,"path":["syn","punctuated","IntoPairs"],"kind":"struct"},"17:14350:6071":{"crate_id":17,"path":["object","pe","ImageFunctionEntry64"],"kind":"struct"},"16:2332:6099":{"crate_id":16,"path":["gimli","common","LineEncoding"],"kind":"struct"},"24:4577:2170":{"crate_id":24,"path":["syn","expr","Expr"],"kind":"enum"},"1:4437:9151":{"crate_id":1,"path":["std","os","unix","process","CommandExt"],"kind":"trait"},"17:10417:8143":{"crate_id":17,"path":["object","read","elf","version","VerneedIterator"],"kind":"struct"},"2:3181:34375":{"crate_id":2,"path":["core","ops","try_trait","NeverShortCircuitResidual"],"kind":"enum"},"20:77:1906":{"crate_id":20,"path":["quote","to_tokens","ToTokens"],"kind":"trait"},"5:775:96":{"crate_id":5,"path":["alloc","collections","binary_heap","BinaryHeap"],"kind":"struct"},"2:2690:3439":{"crate_id":2,"path":["core","marker","Sized"],"kind":"trait"},"21:2749:2218":{"crate_id":21,"path":["proc_macro","Punct"],"kind":"struct"},"2:32226:4117":{"crate_id":2,"path":["core","marker","PhantomPinned"],"kind":"struct"},"2:43875:8391":{"crate_id":2,"path":["core","str","iter","EscapeUnicode"],"kind":"struct"},"17:10110:21336":{"crate_id":17,"path":["object","read","elf","segment","ElfSegment"],"kind":"struct"},"5:204:4474":{"crate_id":5,"path":["alloc","boxed","thin","ThinBox"],"kind":"struct"},"6:4587:6940":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Ehdr"],"kind":"struct"},"24:5188:3234":{"crate_id":24,"path":["syn","op","BinOp"],"kind":"enum"},"2:9217:2302":{"crate_id":2,"path":["core","fmt","Binary"],"kind":"trait"},"2:44535:7833":{"crate_id":2,"path":["core","task","wake","RawWakerVTable"],"kind":"struct"},"1:9059:167":{"crate_id":1,"path":["std","sync","mutex","MutexGuard"],"kind":"struct"},"1:355:4239":{"crate_id":1,"path":["std","thread","scoped","Scope"],"kind":"struct"},"1:3934:9119":{"crate_id":1,"path":["std","os","unix","fs","FileExt"],"kind":"trait"},"16:7584:21212":{"crate_id":16,"path":["gimli","read","rnglists","RawRngListIter"],"kind":"struct"},"11:836:8988":{"crate_id":11,"path":["hashbrown","map","RawVacantEntryMut"],"kind":"struct"},"2:2779:5132":{"crate_id":2,"path":["core","ops","arith","Neg"],"kind":"trait"},"18:599:5111":{"crate_id":18,"path":["memchr","memmem","twoway","Shift"],"kind":"enum"},"1:9418:5007":{"crate_id":1,"path":["std","sys","unix","fs","Dir"],"kind":"struct"},"16:8105:8316":{"crate_id":16,"path":["gimli","read","unit","EntriesTree"],"kind":"struct"},"5:875:4916":{"crate_id":5,"path":["alloc","collections","binary_heap","Hole"],"kind":"struct"},"16:2637:6117":{"crate_id":16,"path":["gimli","common","DebugMacroOffset"],"kind":"struct"},"15:288:20292":{"crate_id":15,"path":["addr2line","LocationRangeIter"],"kind":"struct"},"16:6160:8241":{"crate_id":16,"path":["gimli","read","cfi","PointerEncodingParameters"],"kind":"struct"},"18:690:8128":{"crate_id":18,"path":["memchr","memmem","FinderRev"],"kind":"struct"},"2:21981:7573":{"crate_id":2,"path":["core","num","diy_float","Fp"],"kind":"struct"},"1:8837:8024":{"crate_id":1,"path":["std","sync","mpsc","SendError"],"kind":"struct"},"1:10867:9201":{"crate_id":1,"path":["std","sys","unix","process","process_common","Stdio"],"kind":"enum"},"5:1669:4908":{"crate_id":5,"path":["alloc","collections","btree","map","drop","DropGuard"],"kind":"struct"},"17:13905:5931":{"crate_id":17,"path":["object","pe","ImageBoundImportDescriptor"],"kind":"struct"},"2:30915:183":{"crate_id":2,"path":["core","cmp","Ordering"],"kind":"enum"},"17:10671:21426":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandVariant"],"kind":"enum"},"6:0:821":{"crate_id":6,"path":["libc"],"kind":"module"},"22:948:1836":{"crate_id":22,"path":["proc_macro2","Ident"],"kind":"struct"},"16:5689:8185":{"crate_id":16,"path":["gimli","read","cfi","BaseAddresses"],"kind":"struct"},"24:4935:2309":{"crate_id":24,"path":["syn","expr","Index"],"kind":"struct"},"17:13749:5893":{"crate_id":17,"path":["object","pe","ImageAuxSymbolWeak"],"kind":"struct"},"6:6598:7391":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","flock64"],"kind":"struct"},"5:1299:8895":{"crate_id":5,"path":["alloc","collections","btree","map","entry","OccupiedError"],"kind":"struct"},"16:4900:6180":{"crate_id":16,"path":["gimli","constants","DwIdx"],"kind":"struct"},"2:43942:14437":{"crate_id":2,"path":["core","str","pattern","SearchStep"],"kind":"enum"},"1:888:8328":{"crate_id":1,"path":["std","collections","hash","map","Values"],"kind":"struct"},"24:1962:3268":{"crate_id":24,"path":["syn","punctuated","PrivateIter"],"kind":"struct"},"16:8252:6352":{"crate_id":16,"path":["gimli","read","StoreOnHeap"],"kind":"struct"},"16:6456:6132":{"crate_id":16,"path":["gimli","read","index","DebugCuIndex"],"kind":"struct"},"16:2737:6121":{"crate_id":16,"path":["gimli","common","DebugRngListsIndex"],"kind":"struct"},"6:5058:7143":{"crate_id":6,"path":["libc","unix","linux_like","linux","dirent64"],"kind":"struct"},"16:2314:6097":{"crate_id":16,"path":["gimli","common","Encoding"],"kind":"struct"},"17:9744:37306":{"crate_id":17,"path":["object","read","any","SectionRelocationIteratorInternal"],"kind":"enum"},"2:42355:3411":{"crate_id":2,"path":["core","fmt","num","Octal"],"kind":"struct"},"17:11943:5448":{"crate_id":17,"path":["object","elf","Syminfo32"],"kind":"struct"},"2:9869:9064":{"crate_id":2,"path":["core","slice","index","private_slice_index","Sealed"],"kind":"trait"},"20:407:3925":{"crate_id":20,"path":["quote","__private","RepInterp"],"kind":"struct"},"2:14:2655":{"crate_id":2,"path":["core","write"],"kind":"macro"},"6:7529:7535":{"crate_id":6,"path":["libc","unix","linux_like","linux","fanotify_event_metadata"],"kind":"struct"},"24:3870:3495":{"crate_id":24,"path":["syn","token","Colon"],"kind":"struct"},"16:2611:6116":{"crate_id":16,"path":["gimli","common","DebugMacinfoOffset"],"kind":"struct"},"6:4664:6946":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Shdr"],"kind":"struct"},"2:2773:5122":{"crate_id":2,"path":["core","ops","arith","Rem"],"kind":"trait"},"17:13923:5935":{"crate_id":17,"path":["object","pe","ImageDelayloadDescriptor"],"kind":"struct"},"17:10303:5146":{"crate_id":17,"path":["object","read","elf","note","Note"],"kind":"struct"},"6:1649:6737":{"crate_id":6,"path":["libc","unix","linux_like","in6_rtmsg"],"kind":"struct"},"1:1594:1873":{"crate_id":1,"path":["std","collections","hash","set","Union"],"kind":"struct"},"2:22486:174":{"crate_id":2,"path":["core","num","nonzero","NonZeroU128"],"kind":"struct"},"1:6561:9223":{"crate_id":1,"path":["std","sync","remutex","ReentrantMutex"],"kind":"struct"},"17:11591:5350":{"crate_id":17,"path":["object","read","Relocation"],"kind":"struct"},"24:4143:3513":{"crate_id":24,"path":["syn","token","Or"],"kind":"struct"},"2:47811:7936":{"crate_id":2,"path":["core","core_arch","simd","u64x8"],"kind":"struct"},"17:12479:5566":{"crate_id":17,"path":["object","macho","Section32"],"kind":"struct"},"16:3295:6155":{"crate_id":16,"path":["gimli","arch","LoongArch"],"kind":"struct"},"2:42878:145":{"crate_id":2,"path":["core","hash","sip","Hasher"],"kind":"struct"},"16:8152:6150":{"crate_id":16,"path":["gimli","read","unit","DebugTypes"],"kind":"struct"},"2:41398:155":{"crate_id":2,"path":["core","net","ip_addr","IpAddr"],"kind":"enum"},"17:8632:21268":{"crate_id":17,"path":["object","common","BinaryFormat"],"kind":"enum"},"16:6724:8268":{"crate_id":16,"path":["gimli","read","line","LineProgramHeader"],"kind":"struct"},"1:4018:9127":{"crate_id":1,"path":["std","os","unix","fs","DirBuilderExt"],"kind":"trait"},"11:2060:8991":{"crate_id":11,"path":["hashbrown","set","VacantEntry"],"kind":"struct"},"1:2481:9089":{"crate_id":1,"path":["std","io","buffered","bufreader","BufReader"],"kind":"struct"},"17:13604:5860":{"crate_id":17,"path":["object","pe","AnonObjectHeaderV2"],"kind":"struct"},"17:14177:6022":{"crate_id":17,"path":["object","pe","ImageHotPatchHashes"],"kind":"struct"},"1:11059:29775":{"crate_id":1,"path":["std","sys","unix","thread","cgroups","Cgroup"],"kind":"enum"},"17:11832:5425":{"crate_id":17,"path":["object","elf","SectionHeader32"],"kind":"struct"},"24:549:128":{"crate_id":24,"path":["syn","error","Error"],"kind":"struct"},"17:12539:5575":{"crate_id":17,"path":["object","macho","FvmlibCommand"],"kind":"struct"},"2:9173:3417":{"crate_id":2,"path":["core","fmt","Write"],"kind":"trait"},"1:11960:747":{"crate_id":1,"path":["std","i64"],"kind":"primitive"},"2:22420:176":{"crate_id":2,"path":["core","num","nonzero","NonZeroU32"],"kind":"struct"},"1:8956:26281":{"crate_id":1,"path":["std","sync","mpmc","error","SendTimeoutError"],"kind":"enum"},"2:9225:3418":{"crate_id":2,"path":["core","fmt","LowerExp"],"kind":"trait"},"1:11965:1506":{"crate_id":1,"path":["std","u64"],"kind":"primitive"},"2:5471:4932":{"crate_id":2,"path":["core","iter","adapters","filter_map","next_chunk","Guard"],"kind":"struct"},"18:521:25300":{"crate_id":18,"path":["memchr","memmem","prefilter","Prefilter"],"kind":"enum"},"24:2718:116":{"crate_id":24,"path":["syn","token","Default"],"kind":"struct"},"24:497:3276":{"crate_id":24,"path":["syn","drops","NoDrop"],"kind":"struct"},"2:20609:4126":{"crate_id":2,"path":["core","core_simd","swizzle","reverse","Reverse"],"kind":"struct"},"2:47907:7942":{"crate_id":2,"path":["core","core_arch","x86","__m256"],"kind":"struct"},"17:14054:5972":{"crate_id":17,"path":["object","pe","ImageLoadConfigDirectory32"],"kind":"struct"},"24:3211:2296":{"crate_id":24,"path":["syn","token","Trait"],"kind":"struct"},"2:2767:5121":{"crate_id":2,"path":["core","ops","arith","Div"],"kind":"trait"},"1:8295:7401":{"crate_id":1,"path":["std","os","linux","raw","arch","stat"],"kind":"struct"},"17:9604:5289":{"crate_id":17,"path":["object","read","any","SymbolTable"],"kind":"struct"},"2:44365:14597":{"crate_id":2,"path":["core","time","TryFromFloatSecsErrorKind"],"kind":"enum"},"21:2635:3284":{"crate_id":21,"path":["proc_macro","LexError"],"kind":"struct"},"24:5460:3248":{"crate_id":24,"path":["syn","ty","TypeInfer"],"kind":"struct"},"1:1433:144":{"crate_id":1,"path":["std","collections","hash","set","HashSet"],"kind":"struct"},"17:10931:21447":{"crate_id":17,"path":["object","read","pe","file","PeFile"],"kind":"struct"},"1:6396:9218":{"crate_id":1,"path":["std","sync","once","OnceState"],"kind":"struct"},"24:4453:3658":{"crate_id":24,"path":["syn","token","Bracket"],"kind":"struct"},"11:2033:8298":{"crate_id":11,"path":["hashbrown","set","Entry"],"kind":"enum"},"1:11257:8654":{"crate_id":1,"path":["std","sys_common","wtf8","Wtf8"],"kind":"struct"},"1:3272:9094":{"crate_id":1,"path":["std","io","stdio","StderrLock"],"kind":"struct"},"2:3317:69":{"crate_id":2,"path":["core","any","Any"],"kind":"trait"},"2:1732:4507":{"crate_id":2,"path":["core","ptr","metadata","Pointee"],"kind":"trait"},"2:48001:7948":{"crate_id":2,"path":["core","core_arch","x86","__m256bh"],"kind":"struct"},"17:13870:5920":{"crate_id":17,"path":["object","pe","ImageTlsDirectory64"],"kind":"struct"},"1:3488:9081":{"crate_id":1,"path":["std","io","BufRead"],"kind":"trait"},"18:96:25286":{"crate_id":18,"path":["memchr","memchr","iter","Memchr2"],"kind":"struct"},"6:4824:7019":{"crate_id":6,"path":["libc","unix","linux_like","linux","seccomp_data"],"kind":"struct"},"16:7407:6293":{"crate_id":16,"path":["gimli","read","op","Expression"],"kind":"struct"},"2:9592:4963":{"crate_id":2,"path":["core","slice","sort","InsertionHole"],"kind":"struct"},"7:79:20178":{"crate_id":7,"path":["unwind","libunwind","_Unwind_Action"],"kind":"enum"},"17:9409:37310":{"crate_id":17,"path":["object","read","any","SegmentIteratorInternal"],"kind":"enum"},"2:43516:8428":{"crate_id":2,"path":["core","str","error","ParseBoolError"],"kind":"struct"},"24:4824:3197":{"crate_id":24,"path":["syn","expr","ExprField"],"kind":"struct"},"1:2376:9056":{"crate_id":1,"path":["std","fs","read_dir"],"kind":"function"},"2:10051:3270":{"crate_id":2,"path":["core","slice","iter","IterMut"],"kind":"struct"},"17:13957:5948":{"crate_id":17,"path":["object","pe","ImageResourceDirectoryString"],"kind":"struct"},"2:2705:2437":{"crate_id":2,"path":["core","marker","PhantomData"],"kind":"struct"},"6:4764:6991":{"crate_id":6,"path":["libc","unix","linux_like","linux","regmatch_t"],"kind":"struct"},"16:6317:8573":{"crate_id":16,"path":["gimli","read","abbrev","AbbreviationsCache"],"kind":"struct"},"17:10330:21357":{"crate_id":17,"path":["object","read","elf","hash","HashTable"],"kind":"struct"},"2:43112:8427":{"crate_id":2,"path":["core","slice","ascii","EscapeAscii"],"kind":"struct"},"2:30367:68":{"crate_id":2,"path":["core","ptr","alignment","Alignment"],"kind":"struct"},"6:4704:6961":{"crate_id":6,"path":["libc","unix","linux_like","linux","posix_spawnattr_t"],"kind":"struct"},"2:39240:8385":{"crate_id":2,"path":["core","ops","index_range","IndexRange"],"kind":"struct"},"11:1012:8991":{"crate_id":11,"path":["hashbrown","map","VacantEntry"],"kind":"struct"},"1:8350:3740":{"crate_id":1,"path":["std","panic","BacktraceStyle"],"kind":"enum"},"2:6740:3342":{"crate_id":2,"path":["core","iter","adapters","zip","TrustedRandomAccessNoCoerce"],"kind":"trait"},"2:47948:7945":{"crate_id":2,"path":["core","core_arch","x86","__m512"],"kind":"struct"},"17:10430:8144":{"crate_id":17,"path":["object","read","elf","version","VernauxIterator"],"kind":"struct"},"6:5767:7178":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","statx_timestamp"],"kind":"struct"},"18:574:5148":{"crate_id":18,"path":["memchr","memmem","twoway","Forward"],"kind":"struct"},"2:39154:14457":{"crate_id":2,"path":["core","ops","control_flow","ControlFlow"],"kind":"enum"},"6:4992:7110":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_user_dev"],"kind":"struct"},"17:9939:21306":{"crate_id":17,"path":["object","read","coff","section","CoffSectionIterator"],"kind":"struct"},"24:554:5107":{"crate_id":24,"path":["syn","error","SpanRange"],"kind":"struct"},"1:10241:9200":{"crate_id":1,"path":["std","sys","unix","process","process_common","Command"],"kind":"struct"},"16:7494:8303":{"crate_id":16,"path":["gimli","read","pubtypes","PubTypesEntry"],"kind":"struct"},"24:4411:3532":{"crate_id":24,"path":["syn","token","StarEq"],"kind":"struct"},"24:1601:3372":{"crate_id":24,"path":["syn","parse","Parser"],"kind":"trait"},"17:11454:8171":{"crate_id":17,"path":["object","read","ObjectMap"],"kind":"struct"},"1:936:8986":{"crate_id":1,"path":["std","collections","hash","map","RawEntryMut"],"kind":"enum"},"2:44332:122":{"crate_id":2,"path":["core","time","Duration"],"kind":"struct"},"24:5356:3239":{"crate_id":24,"path":["syn","restriction","VisRestricted"],"kind":"struct"},"1:917:8984":{"crate_id":1,"path":["std","collections","hash","map","ValuesMut"],"kind":"struct"},"6:1603:6700":{"crate_id":6,"path":["libc","unix","linux_like","lconv"],"kind":"struct"},"1:9909:8415":{"crate_id":1,"path":["std","sys","unix","net","Socket"],"kind":"struct"},"1:6609:217":{"crate_id":1,"path":["std","sync","rwlock","RwLock"],"kind":"struct"},"6:6688:7421":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statvfs64"],"kind":"struct"},"17:12994:5660":{"crate_id":17,"path":["object","macho","DyldInfoCommand"],"kind":"struct"},"2:7043:3313":{"crate_id":2,"path":["core","iter","sources","once","once"],"kind":"function"},"2:5383:4932":{"crate_id":2,"path":["core","iter","adapters","filter","next_chunk","Guard"],"kind":"struct"},"1:8885:9226":{"crate_id":1,"path":["std","sync","mpsc","RecvTimeoutError"],"kind":"enum"},"17:12936:5651":{"crate_id":17,"path":["object","macho","EncryptionInfoCommand64"],"kind":"struct"},"11:986:8990":{"crate_id":11,"path":["hashbrown","map","OccupiedEntry"],"kind":"struct"},"1:947:8987":{"crate_id":1,"path":["std","collections","hash","map","RawOccupiedEntryMut"],"kind":"struct"},"11:1818:3266":{"crate_id":11,"path":["hashbrown","set","Iter"],"kind":"struct"},"2:2691:3404":{"crate_id":2,"path":["core","marker","Unsize"],"kind":"trait"},"17:12646:5591":{"crate_id":17,"path":["object","macho","DylinkerCommand"],"kind":"struct"},"17:14282:6051":{"crate_id":17,"path":["object","pe","ImageEnclaveImport"],"kind":"struct"},"1:5579:206":{"crate_id":1,"path":["std","sync","mpsc","Receiver"],"kind":"struct"},"5:3180:36748":{"crate_id":5,"path":["alloc","collections","btree","set","DifferenceInner"],"kind":"enum"},"6:6841:7503":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ptrace_rseq_configuration"],"kind":"struct"},"16:6939:21207":{"crate_id":16,"path":["gimli","read","loclists","RawLocListEntry"],"kind":"enum"},"17:11815:1836":{"crate_id":17,"path":["object","elf","Ident"],"kind":"struct"},"21:1019:3433":{"crate_id":21,"path":["proc_macro","bridge","client","SourceFile"],"kind":"struct"},"2:10324:8439":{"crate_id":2,"path":["core","slice","iter","RSplitN"],"kind":"struct"},"2:21454:9270":{"crate_id":2,"path":["core","core_simd","ord","SimdPartialOrd"],"kind":"trait"},"17:12815:5633":{"crate_id":17,"path":["object","macho","DylibReference"],"kind":"struct"},"1:3233:9098":{"crate_id":1,"path":["std","io","stdio","StdoutLock"],"kind":"struct"},"24:5440:3244":{"crate_id":24,"path":["syn","ty","TypeArray"],"kind":"struct"},"1:8869:9227":{"crate_id":1,"path":["std","sync","mpsc","TryRecvError"],"kind":"enum"},"6:6850:7506":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user_fpregs_struct"],"kind":"struct"},"24:4938:58":{"crate_id":24,"path":["syn","expr","parsing","kw","builtin"],"kind":"struct"},"2:2811:5110":{"crate_id":2,"path":["core","ops","bit","BitAnd"],"kind":"trait"},"17:10249:21343":{"crate_id":17,"path":["object","read","elf","relocation","RelocationSections"],"kind":"struct"},"5:2128:4218":{"crate_id":5,"path":["alloc","collections","btree","mem","replace","PanicGuard"],"kind":"struct"},"2:0:496":{"crate_id":2,"path":["core"],"kind":"module"},"6:500:6576":{"crate_id":6,"path":["libc","unix","rlimit"],"kind":"struct"},"16:4536:6169":{"crate_id":16,"path":["gimli","constants","DwEnd"],"kind":"struct"},"6:4446:6879":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_keymap_entry"],"kind":"struct"},"16:2567:6114":{"crate_id":16,"path":["gimli","common","DebugLocListsBase"],"kind":"struct"},"24:2769:3464":{"crate_id":24,"path":["syn","token","Else"],"kind":"struct"},"24:5074:3223":{"crate_id":24,"path":["syn","generics","PredicateLifetime"],"kind":"struct"},"17:12318:5537":{"crate_id":17,"path":["object","macho","DyldCacheImageInfo"],"kind":"struct"},"16:2715:6120":{"crate_id":16,"path":["gimli","common","DebugRngListsBase"],"kind":"struct"},"2:43411:3333":{"crate_id":2,"path":["core","slice","iter","ArrayChunks"],"kind":"struct"},"24:4884:3210":{"crate_id":24,"path":["syn","expr","ExprReference"],"kind":"struct"},"24:3841:3493":{"crate_id":24,"path":["syn","token","Caret"],"kind":"struct"},"16:6250:6197":{"crate_id":16,"path":["gimli","read","endian_slice","EndianSlice"],"kind":"struct"},"16:4814:6177":{"crate_id":16,"path":["gimli","constants","DwInl"],"kind":"struct"},"2:39420:7664":{"crate_id":2,"path":["core","any","TypeId"],"kind":"struct"},"2:2855:5131":{"crate_id":2,"path":["core","ops","bit","ShrAssign"],"kind":"trait"},"6:494:6574":{"crate_id":6,"path":["libc","unix","timespec"],"kind":"struct"},"2:43993:8459":{"crate_id":2,"path":["core","str","pattern","CharArraySearcher"],"kind":"struct"},"5:1470:8328":{"crate_id":5,"path":["alloc","collections","btree","map","Values"],"kind":"struct"},"1:3191:9095":{"crate_id":1,"path":["std","io","stdio","Stdin"],"kind":"struct"},"16:4564:6170":{"crate_id":16,"path":["gimli","constants","DwAccess"],"kind":"struct"},"16:7631:6299":{"crate_id":16,"path":["gimli","read","rnglists","RawRange"],"kind":"struct"},"2:22684:169":{"crate_id":2,"path":["core","num","nonzero","NonZeroI128"],"kind":"struct"},"1:11086:8034":{"crate_id":1,"path":["std","sys","unix","time","SystemTime"],"kind":"struct"},"22:0:1684":{"crate_id":22,"path":["proc_macro2"],"kind":"module"},"17:13055:5674":{"crate_id":17,"path":["object","macho","FvmfileCommand"],"kind":"struct"},"5:4163:4932":{"crate_id":5,"path":["alloc","collections","vec_deque","into_iter","try_fold","Guard"],"kind":"struct"},"2:7654:3325":{"crate_id":2,"path":["core","iter","traits","marker","FusedIterator"],"kind":"trait"},"17:11416:8170":{"crate_id":17,"path":["object","read","SymbolMap"],"kind":"struct"},"2:44157:8468":{"crate_id":2,"path":["core","str","pattern","TwoWaySearcher"],"kind":"struct"},"1:10879:29023":{"crate_id":1,"path":["std","sys","unix","process","process_common","ProgramKind"],"kind":"enum"},"17:13914:5934":{"crate_id":17,"path":["object","pe","ImageBoundForwarderRef"],"kind":"struct"},"2:40362:3344":{"crate_id":2,"path":["core","iter","adapters","cycle","Cycle"],"kind":"struct"},"24:4829:3198":{"crate_id":24,"path":["syn","expr","ExprForLoop"],"kind":"struct"},"6:5882:7231":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_mmap_req"],"kind":"struct"},"6:7463:7530":{"crate_id":6,"path":["libc","unix","linux_like","linux","arch","generic","termios2"],"kind":"struct"},"1:2544:4980":{"crate_id":1,"path":["std","io","buffered","bufwriter","BufWriter"],"kind":"struct"},"6:5994:7294":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","seminfo"],"kind":"struct"},"17:10403:8142":{"crate_id":17,"path":["object","read","elf","version","VerdauxIterator"],"kind":"struct"},"1:11916:8982":{"crate_id":1,"path":["std","backtrace_rs","types","BytesOrWideString"],"kind":"enum"},"24:4854:2172":{"crate_id":24,"path":["syn","expr","ExprLit"],"kind":"struct"},"6:595:6634":{"crate_id":6,"path":["libc","unix","protoent"],"kind":"struct"},"5:5858:4938":{"crate_id":5,"path":["alloc","sync","Weak"],"kind":"struct"},"2:42908:8425":{"crate_id":2,"path":["core","hash","sip","Sip24Rounds"],"kind":"struct"},"17:11272:21286":{"crate_id":17,"path":["object","read","traits","NoDynamicRelocationIterator"],"kind":"struct"},"17:12254:5508":{"crate_id":17,"path":["object","macho","DyldCacheHeader"],"kind":"struct"},"17:261:37312":{"crate_id":17,"path":["object","read","util","DebugLen"],"kind":"struct"},"6:4543:6926":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_ff_erase"],"kind":"struct"},"2:22717:7587":{"crate_id":2,"path":["core","num","nonzero","NonZeroIsize"],"kind":"struct"},"1:5742:8607":{"crate_id":1,"path":["std","sync","condvar","Condvar"],"kind":"struct"},"17:3186:21389":{"crate_id":17,"path":["object","read","macho","section","MachOSectionIterator"],"kind":"struct"},"16:5916:8210":{"crate_id":16,"path":["gimli","read","cfi","UnwindContext"],"kind":"struct"},"2:43354:14409":{"crate_id":2,"path":["core","slice","iter","ChunksMut"],"kind":"struct"},"2:3168:14458":{"crate_id":2,"path":["core","ops","try_trait","NeverShortCircuit"],"kind":"struct"},"17:9048:5266":{"crate_id":17,"path":["object","endian","U16Bytes"],"kind":"struct"},"24:5052:2486":{"crate_id":24,"path":["syn","generics","TraitBoundModifier"],"kind":"enum"},"24:2837:2157":{"crate_id":24,"path":["syn","token","Fn"],"kind":"struct"},"1:10013:9009":{"crate_id":1,"path":["std","sys","unix","os","SplitPaths"],"kind":"struct"},"16:7739:6136":{"crate_id":16,"path":["gimli","read","unit","DebugInfo"],"kind":"struct"},"2:2695:109":{"crate_id":2,"path":["core","marker","Copy"],"kind":"trait"},"2:3513:4556":{"crate_id":2,"path":["core","array","drain","Drain"],"kind":"struct"},"11:968:8298":{"crate_id":11,"path":["hashbrown","map","Entry"],"kind":"enum"},"1:501:4218":{"crate_id":1,"path":["std","thread","PanicGuard"],"kind":"struct"},"1:8172:2797":{"crate_id":1,"path":["std","io","Bytes"],"kind":"struct"},"2:42853:8420":{"crate_id":2,"path":["core","hash","sip","SipHasher13"],"kind":"struct"},"2:22618:171":{"crate_id":2,"path":["core","num","nonzero","NonZeroI32"],"kind":"struct"},"2:45793:7846":{"crate_id":2,"path":["core","core_arch","simd","i8x8"],"kind":"struct"},"17:11290:21287":{"crate_id":17,"path":["object","read","FileKind"],"kind":"enum"},"2:44548:161":{"crate_id":2,"path":["core","alloc","layout","Layout"],"kind":"struct"},"24:893:37721":{"crate_id":24,"path":["syn","generics","TypeParamsMut"],"kind":"struct"},"17:9952:5255":{"crate_id":17,"path":["object","read","coff","section","CoffSection"],"kind":"struct"},"1:9034:8032":{"crate_id":1,"path":["std","sync","mpmc","utils","CachePadded"],"kind":"struct"},"5:5233:4908":{"crate_id":5,"path":["alloc","slice","hack","to_vec","DropGuard"],"kind":"struct"},"1:5586:4986":{"crate_id":1,"path":["std","sync","mpsc","Sender"],"kind":"struct"},"11:285:8321":{"crate_id":11,"path":["hashbrown","raw","RawIterRange"],"kind":"struct"},"20:235:4043":{"crate_id":20,"path":["quote","__private","get_span","GetSpan"],"kind":"struct"},"16:6931:21206":{"crate_id":16,"path":["gimli","read","loclists","RawLocListIter"],"kind":"struct"},"17:11118:8162":{"crate_id":17,"path":["object","read","pe","import","ImportThunkList"],"kind":"struct"},"18:636:5166":{"crate_id":18,"path":["memchr","memmem","twoway","ApproximateByteSet"],"kind":"struct"},"1:4783:9132":{"crate_id":1,"path":["std","os","fd","owned","AsFd"],"kind":"trait"},"2:46413:7872":{"crate_id":2,"path":["core","core_arch","simd","m64x2"],"kind":"struct"},"2:39455:7665":{"crate_id":2,"path":["core","array","TryFromSliceError"],"kind":"struct"},"6:6156:7350":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","msqid_ds"],"kind":"struct"},"21:2378:2511":{"crate_id":21,"path":["proc_macro","bridge","Literal"],"kind":"struct"},"1:413:165":{"crate_id":1,"path":["std","thread","local","LocalKey"],"kind":"struct"},"2:46359:7870":{"crate_id":2,"path":["core","core_arch","simd","m16x8"],"kind":"struct"},"2:40133:14475":{"crate_id":2,"path":["core","char","EscapeDebugInner"],"kind":"enum"},"17:14315:6058":{"crate_id":17,"path":["object","pe","ImageCoffSymbolsHeader"],"kind":"struct"},"1:5522:7322":{"crate_id":1,"path":["std","process","exit"],"kind":"function"},"16:7665:6147":{"crate_id":16,"path":["gimli","read","str","DebugStr"],"kind":"struct"},"17:12579:5581":{"crate_id":17,"path":["object","macho","SubFrameworkCommand"],"kind":"struct"},"16:6872:6139":{"crate_id":16,"path":["gimli","read","loclists","DebugLoc"],"kind":"struct"},"16:5301:6187":{"crate_id":16,"path":["gimli","constants","DwOp"],"kind":"struct"},"17:12354:5546":{"crate_id":17,"path":["object","macho","FatArch32"],"kind":"struct"},"1:10897:8023":{"crate_id":1,"path":["std","sys","unix","process","process_common","ExitCode"],"kind":"struct"},"2:30439:33156":{"crate_id":2,"path":["core","ptr","alignment","AlignmentEnum32"],"kind":"enum"},"2:45845:7848":{"crate_id":2,"path":["core","core_arch","simd","i32x2"],"kind":"struct"},"6:4626:6943":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Phdr"],"kind":"struct"},"17:9734:21285":{"crate_id":17,"path":["object","read","any","SectionRelocationIterator"],"kind":"struct"},"6:4401:6855":{"crate_id":6,"path":["libc","unix","linux_like","linux","msginfo"],"kind":"struct"},"6:7272:7516":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","align","max_align_t"],"kind":"struct"},"5:6619:4561":{"crate_id":5,"path":["alloc","vec","in_place_drop","InPlaceDrop"],"kind":"struct"},"16:2663:6118":{"crate_id":16,"path":["gimli","common","RawRangeListsOffset"],"kind":"struct"},"5:2220:36762":{"crate_id":5,"path":["alloc","collections","btree","navigate","LazyLeafHandle"],"kind":"enum"},"1:8122:7998":{"crate_id":1,"path":["std","io","IoSlice"],"kind":"struct"},"17:9716:37313":{"crate_id":17,"path":["object","read","any","DynamicRelocationIteratorInternal"],"kind":"enum"},"17:10293:21350":{"crate_id":17,"path":["object","read","elf","note","NoteIterator"],"kind":"struct"},"2:43780:8445":{"crate_id":2,"path":["core","str","iter","RMatches"],"kind":"struct"},"22:706:3284":{"crate_id":22,"path":["proc_macro2","fallback","LexError"],"kind":"struct"},"1:9151:29614":{"crate_id":1,"path":["std","sys","common","thread_local","fast_local","DtorState"],"kind":"enum"},"16:7313:37265":{"crate_id":16,"path":["gimli","read","op","EvaluationState"],"kind":"enum"},"1:5933:4986":{"crate_id":1,"path":["std","sync","mpmc","counter","Sender"],"kind":"struct"},"1:8239:8494":{"crate_id":1,"path":["std","os","unix","net","addr","SocketAddr"],"kind":"struct"},"6:4606:6941":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Sym"],"kind":"struct"},"1:10448:9095":{"crate_id":1,"path":["std","sys","unix","stdio","Stdin"],"kind":"struct"},"16:6357:6202":{"crate_id":16,"path":["gimli","read","abbrev","AttributeSpecification"],"kind":"struct"},"16:2825:6125":{"crate_id":16,"path":["gimli","common","DebugTypesOffset"],"kind":"struct"},"2:47922:7943":{"crate_id":2,"path":["core","core_arch","x86","__m256d"],"kind":"struct"},"1:10854:8903":{"crate_id":1,"path":["std","sys","unix","os","JoinPathsError"],"kind":"struct"},"24:4044:3506":{"crate_id":24,"path":["syn","token","LArrow"],"kind":"struct"},"2:40098:8390":{"crate_id":2,"path":["core","char","decode","DecodeUtf16Error"],"kind":"struct"},"18:644:5148":{"crate_id":18,"path":["memchr","memmem","x86","avx","nostd","Forward"],"kind":"struct"},"2:22552:173":{"crate_id":2,"path":["core","num","nonzero","NonZeroI8"],"kind":"struct"},"2:39255:200":{"crate_id":2,"path":["core","ops","range","RangeFull"],"kind":"struct"},"6:6834:7500":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","seccomp_notif_sizes"],"kind":"struct"},"16:6323:8243":{"crate_id":16,"path":["gimli","read","abbrev","Abbreviations"],"kind":"struct"},"17:10520:8152":{"crate_id":17,"path":["object","read","elf","attributes","AttributeReader"],"kind":"struct"},"16:2900:6128":{"crate_id":16,"path":["gimli","common","EhFrameOffset"],"kind":"struct"},"1:9093:8034":{"crate_id":1,"path":["std","time","SystemTime"],"kind":"struct"},"24:3092:3398":{"crate_id":24,"path":["syn","token","Ref"],"kind":"struct"},"16:6900:6248":{"crate_id":16,"path":["gimli","read","loclists","LocationLists"],"kind":"struct"},"6:6171:7361":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","semid_ds"],"kind":"struct"},"17:11264:5358":{"crate_id":17,"path":["object","read","pe","rich","RichHeaderEntry"],"kind":"struct"},"11:1858:1873":{"crate_id":11,"path":["hashbrown","set","Union"],"kind":"struct"},"6:506:6579":{"crate_id":6,"path":["libc","unix","rusage"],"kind":"struct"},"1:11943:371":{"crate_id":1,"path":["std","bool"],"kind":"primitive"},"17:9614:37314":{"crate_id":17,"path":["object","read","any","SymbolTableInternal"],"kind":"enum"},"2:2799:5126":{"crate_id":2,"path":["core","ops","arith","RemAssign"],"kind":"trait"},"5:7196:102":{"crate_id":5,"path":["alloc","ffi","c_str","CString"],"kind":"struct"},"2:7329:3329":{"crate_id":2,"path":["core","iter","traits","exact_size","ExactSizeIterator"],"kind":"trait"},"17:11045:5341":{"crate_id":17,"path":["object","read","pe","data_directory","DataDirectories"],"kind":"struct"},"5:1115:36654":{"crate_id":5,"path":["alloc","collections","btree","borrow","DormantMutRef"],"kind":"struct"},"2:43857:8392":{"crate_id":2,"path":["core","str","iter","EscapeDebug"],"kind":"struct"},"22:742:2511":{"crate_id":22,"path":["proc_macro2","fallback","Literal"],"kind":"struct"},"24:4522:1896":{"crate_id":24,"path":["syn","data","Fields"],"kind":"enum"},"16:2926:20337":{"crate_id":16,"path":["gimli","common","UnitSectionOffset"],"kind":"enum"},"2:10310:8438":{"crate_id":2,"path":["core","slice","iter","SplitN"],"kind":"struct"},"24:1533:2806":{"crate_id":24,"path":["syn","parse","Unexpected"],"kind":"enum"},"2:1915:4466":{"crate_id":2,"path":["core","ptr","unique","Unique"],"kind":"struct"},"17:13795:5904":{"crate_id":17,"path":["object","pe","ImageBaseRelocation"],"kind":"struct"},"2:45762:7845":{"crate_id":2,"path":["core","core_arch","simd","u64x1"],"kind":"struct"},"2:40088:8389":{"crate_id":2,"path":["core","char","decode","DecodeUtf16"],"kind":"struct"},"24:5273:3235":{"crate_id":24,"path":["syn","op","UnOp"],"kind":"enum"},"24:5364:1822":{"crate_id":24,"path":["syn","ty","Type"],"kind":"enum"},"24:4556:1841":{"crate_id":24,"path":["syn","derive","Data"],"kind":"enum"},"1:922:8598":{"crate_id":1,"path":["std","collections","hash","map","IntoKeys"],"kind":"struct"},"18:80:25285":{"crate_id":18,"path":["memchr","memchr","iter","Memchr"],"kind":"struct"},"2:41725:193":{"crate_id":2,"path":["core","pin","Pin"],"kind":"struct"},"14:215:8318":{"crate_id":14,"path":["rustc_demangle","TryDemangleError"],"kind":"struct"},"1:6575:4998":{"crate_id":1,"path":["std","sync","remutex","ReentrantMutexGuard"],"kind":"struct"},"2:47867:7938":{"crate_id":2,"path":["core","core_arch","x86","__m128i"],"kind":"struct"},"6:568:6619":{"crate_id":6,"path":["libc","unix","sigval"],"kind":"struct"},"6:1709:6768":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_storage"],"kind":"struct"},"17:8949:21278":{"crate_id":17,"path":["object","common","SymbolFlags"],"kind":"enum"},"24:3228:234":{"crate_id":24,"path":["syn","token","Try"],"kind":"struct"},"17:11696:5395":{"crate_id":17,"path":["object","archive","AixHeader"],"kind":"struct"},"6:1663:6748":{"crate_id":6,"path":["libc","unix","linux_like","arpreq"],"kind":"struct"},"17:13574:5854":{"crate_id":17,"path":["object","pe","Guid"],"kind":"struct"},"24:3041:3476":{"crate_id":24,"path":["syn","token","Override"],"kind":"struct"},"16:7505:6144":{"crate_id":16,"path":["gimli","read","pubtypes","DebugPubTypes"],"kind":"struct"},"2:43456:8368":{"crate_id":2,"path":["core","slice","iter","RChunksExact"],"kind":"struct"},"2:43374:14408":{"crate_id":2,"path":["core","slice","iter","ChunksExactMut"],"kind":"struct"},"18:538:5152":{"crate_id":18,"path":["memchr","memmem","rabinkarp","NeedleHash"],"kind":"struct"},"1:2212:9043":{"crate_id":1,"path":["std","fs","DirEntry"],"kind":"struct"},"5:6629:4562":{"crate_id":5,"path":["alloc","vec","in_place_drop","InPlaceDstBufDrop"],"kind":"struct"},"6:1638:6729":{"crate_id":6,"path":["libc","unix","linux_like","ifaddrs"],"kind":"struct"},"16:7255:3744":{"crate_id":16,"path":["gimli","read","op","Location"],"kind":"enum"},"6:5955:7280":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ntptimeval"],"kind":"struct"},"16:7568:37261":{"crate_id":16,"path":["gimli","read","rnglists","RangeListsFormat"],"kind":"enum"},"16:5972:8174":{"crate_id":16,"path":["gimli","read","cfi","UnwindTableRow"],"kind":"struct"},"16:8068:8310":{"crate_id":16,"path":["gimli","read","unit","EntriesRaw"],"kind":"struct"},"21:367:4581":{"crate_id":21,"path":["proc_macro","bridge","rpc","PanicMessage"],"kind":"enum"},"2:47603:7932":{"crate_id":2,"path":["core","core_arch","simd","i32x16"],"kind":"struct"},"17:11979:5455":{"crate_id":17,"path":["object","elf","Rela32"],"kind":"struct"},"17:13427:5801":{"crate_id":17,"path":["object","pe","MaskedRichHeaderEntry"],"kind":"struct"},"2:44277:8475":{"crate_id":2,"path":["core","str","LinesMap"],"kind":"struct"},"1:1561:3266":{"crate_id":1,"path":["std","collections","hash","set","Iter"],"kind":"struct"},"22:730:1825":{"crate_id":22,"path":["proc_macro2","fallback","Group"],"kind":"struct"},"17:10945:21456":{"crate_id":17,"path":["object","read","pe","file","PeComdatIterator"],"kind":"struct"},"1:4599:7414":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt","st_mtime"],"kind":"foreign_type"},"5:5948:4932":{"crate_id":5,"path":["alloc","sync","from_iter_exact","Guard"],"kind":"struct"},"17:10148:21335":{"crate_id":17,"path":["object","read","elf","section","ElfSectionIterator"],"kind":"struct"},"16:8176:21219":{"crate_id":16,"path":["gimli","read","value","ValueType"],"kind":"enum"},"16:5673:21197":{"crate_id":16,"path":["gimli","read","cfi","CieOffsetEncoding"],"kind":"enum"},"17:8542:21255":{"crate_id":17,"path":["object","common","Architecture"],"kind":"enum"},"1:844:3266":{"crate_id":1,"path":["std","collections","hash","map","Iter"],"kind":"struct"},"17:13179:5696":{"crate_id":17,"path":["object","macho","ScatteredRelocationInfo"],"kind":"struct"},"2:46853:7894":{"crate_id":2,"path":["core","core_arch","simd","i32x8"],"kind":"struct"},"5:7227:33153":{"crate_id":5,"path":["alloc","ffi","c_str","FromBytesWithNulErrorKind"],"kind":"enum"},"1:7728:1992":{"crate_id":1,"path":["std","error","private","Internal"],"kind":"struct"},"2:40872:8410":{"crate_id":2,"path":["core","iter","sources","from_generator","FromGenerator"],"kind":"struct"},"6:1595:6695":{"crate_id":6,"path":["libc","unix","linux_like","Dl_info"],"kind":"struct"},"2:2752:3293":{"crate_id":2,"path":["core","ops","arith","Add"],"kind":"trait"},"16:3580:6157":{"crate_id":16,"path":["gimli","arch","X86"],"kind":"struct"},"17:10038:21305":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdatIterator"],"kind":"struct"},"6:1506:6643":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreqn"],"kind":"struct"},"1:7601:9064":{"crate_id":1,"path":["std","sealed","Sealed"],"kind":"trait"},"24:2990:3473":{"crate_id":24,"path":["syn","token","Mod"],"kind":"struct"},"1:3481:9062":{"crate_id":1,"path":["std","io","Seek"],"kind":"trait"},"17:11955:5451":{"crate_id":17,"path":["object","elf","Syminfo64"],"kind":"struct"},"2:4409:3401":{"crate_id":2,"path":["core","cell","UnsafeCell"],"kind":"struct"},"2:22006:33144":{"crate_id":2,"path":["core","num","flt2dec","decoder","FullDecoded"],"kind":"enum"},"16:7061:8297":{"crate_id":16,"path":["gimli","read","lookup","PubStuffParser"],"kind":"struct"},"2:40178:7793":{"crate_id":2,"path":["core","char","TryFromCharError"],"kind":"struct"},"1:1844:4660":{"crate_id":1,"path":["std","env","Args"],"kind":"struct"},"24:5002:2450":{"crate_id":24,"path":["syn","generics","TypeParam"],"kind":"struct"},"1:11894:8655":{"crate_id":1,"path":["std","backtrace_rs","symbolize","gimli","parse_running_mmaps","MapsEntry"],"kind":"struct"},"17:14341:6067":{"crate_id":17,"path":["object","pe","ImageFunctionEntry"],"kind":"struct"},"2:21898:7568":{"crate_id":2,"path":["core","num","dec2flt","common","BiasedFp"],"kind":"struct"},"1:6319:166":{"crate_id":1,"path":["std","sync","mutex","Mutex"],"kind":"struct"},"21:2533:4579":{"crate_id":21,"path":["proc_macro","bridge","ExpnGlobals"],"kind":"struct"},"5:4001:4556":{"crate_id":5,"path":["alloc","collections","vec_deque","drain","Drain"],"kind":"struct"},"6:4368:6843":{"crate_id":6,"path":["libc","unix","linux_like","linux","itimerspec"],"kind":"struct"},"24:4997:2491":{"crate_id":24,"path":["syn","generics","LifetimeParam"],"kind":"struct"},"24:925:3225":{"crate_id":24,"path":["syn","generics","Turbofish"],"kind":"struct"},"16:6396:8248":{"crate_id":16,"path":["gimli","read","aranges","ArangeHeader"],"kind":"struct"},"16:6658:8266":{"crate_id":16,"path":["gimli","read","line","LineInstructions"],"kind":"struct"},"2:4254:207":{"crate_id":2,"path":["core","cell","RefCell"],"kind":"struct"},"24:842:9064":{"crate_id":24,"path":["syn","ext","private","Sealed"],"kind":"trait"},"5:7052:4919":{"crate_id":5,"path":["alloc","collections","binary_heap","DrainSorted"],"kind":"struct"},"6:4695:6956":{"crate_id":6,"path":["libc","unix","linux_like","linux","posix_spawn_file_actions_t"],"kind":"struct"},"2:2787:5123":{"crate_id":2,"path":["core","ops","arith","SubAssign"],"kind":"trait"},"17:12526:5572":{"crate_id":17,"path":["object","macho","Fvmlib"],"kind":"struct"},"2:11331:8900":{"crate_id":2,"path":["core","slice","GetManyMutError"],"kind":"struct"},"2:9690:4971":{"crate_id":2,"path":["core","slice","sort","merge_sort","RunVec"],"kind":"struct"},"17:12966:5654":{"crate_id":17,"path":["object","macho","BuildVersionCommand"],"kind":"struct"},"24:5093:2171":{"crate_id":24,"path":["syn","lit","Lit"],"kind":"enum"},"24:5361:3238":{"crate_id":24,"path":["syn","restriction","FieldMutability"],"kind":"enum"},"24:4466:2163":{"crate_id":24,"path":["syn","token","Paren"],"kind":"struct"},"1:2391:3022":{"crate_id":1,"path":["std","io"],"kind":"module"},"2:4764:388":{"crate_id":2,"path":["core","ffi","c_void"],"kind":"enum"},"2:30381:33150":{"crate_id":2,"path":["core","ptr","alignment","AlignmentEnum16"],"kind":"enum"},"4:0:3008":{"crate_id":4,"path":["rustc_std_workspace_core"],"kind":"module"},"2:42106:90":{"crate_id":2,"path":["core","sync","atomic","AtomicU64"],"kind":"struct"},"24:4781:3187":{"crate_id":24,"path":["syn","expr","ExprAsync"],"kind":"struct"},"24:2888:3469":{"crate_id":24,"path":["syn","token","Impl"],"kind":"struct"},"2:47876:7939":{"crate_id":2,"path":["core","core_arch","x86","__m128"],"kind":"struct"},"2:9361:34314":{"crate_id":2,"path":["core","fmt","fmt","BorrowedPlaceholder"],"kind":"struct"},"2:2521:237":{"crate_id":2,"path":["core","convert","TryFrom"],"kind":"trait"},"2:40353:3336":{"crate_id":2,"path":["core","iter","adapters","copied","Copied"],"kind":"struct"},"24:4924:3220":{"crate_id":24,"path":["syn","expr","ExprYield"],"kind":"struct"},"2:20637:34106":{"crate_id":2,"path":["core","core_simd","swizzle","rotate_lanes_right","Rotate"],"kind":"struct"},"2:9471:14486":{"crate_id":2,"path":["core","hash","BuildHasher"],"kind":"trait"},"2:11527:8437":{"crate_id":2,"path":["core","str","iter","SplitNInternal"],"kind":"struct"},"22:119:37494":{"crate_id":22,"path":["proc_macro2","rcvec","RcVecBuilder"],"kind":"struct"},"16:4965:6182":{"crate_id":16,"path":["gimli","constants","DwLns"],"kind":"struct"},"5:3593:3270":{"crate_id":5,"path":["alloc","collections","linked_list","IterMut"],"kind":"struct"},"17:10471:8147":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSubsection"],"kind":"struct"},"24:4479:3169":{"crate_id":24,"path":["syn","attr","Attribute"],"kind":"struct"},"24:4056:3507":{"crate_id":24,"path":["syn","token","Le"],"kind":"struct"},"17:9528:37325":{"crate_id":17,"path":["object","read","any","ComdatIteratorInternal"],"kind":"enum"},"24:4888:3211":{"crate_id":24,"path":["syn","expr","ExprRepeat"],"kind":"struct"},"2:42186:92":{"crate_id":2,"path":["core","sync","atomic","AtomicUsize"],"kind":"struct"},"2:30311:4300":{"crate_id":2,"path":["core","mem","manually_drop","ManuallyDrop"],"kind":"struct"},"2:40921:3324":{"crate_id":2,"path":["core","iter","sources","successors","Successors"],"kind":"struct"},"17:11109:8161":{"crate_id":17,"path":["object","read","pe","import","ImportDescriptorIterator"],"kind":"struct"},"24:4574:2049":{"crate_id":24,"path":["syn","derive","DataUnion"],"kind":"struct"},"6:1513:6646":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreq_source"],"kind":"struct"},"1:4702:9133":{"crate_id":1,"path":["std","os","fd","raw","AsRawFd"],"kind":"trait"},"16:2519:6112":{"crate_id":16,"path":["gimli","common","DebugLineStrOffset"],"kind":"struct"},"24:5134:2039":{"crate_id":24,"path":["syn","lit","LitStr"],"kind":"struct"},"6:4413:6864":{"crate_id":6,"path":["libc","unix","linux_like","linux","sembuf"],"kind":"struct"},"17:13673:5876":{"crate_id":17,"path":["object","pe","ImageSymbolBytes"],"kind":"struct"},"2:2468:9064":{"crate_id":2,"path":["core","convert","num","private","Sealed"],"kind":"trait"},"5:2963:3475":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Mut"],"kind":"struct"},"2:30120:9115":{"crate_id":2,"path":["core","num","FpCategory"],"kind":"enum"},"2:2745:106":{"crate_id":2,"path":["core","marker","ConstParamTy"],"kind":"trait"},"2:39337:201":{"crate_id":2,"path":["core","ops","range","RangeInclusive"],"kind":"struct"},"1:5090:191":{"crate_id":1,"path":["std","path","PathBuf"],"kind":"struct"},"1:7817:9059":{"crate_id":1,"path":["std","fs","ReadDir"],"kind":"struct"},"2:41575:7807":{"crate_id":2,"path":["core","net","socket_addr","SocketAddrV6"],"kind":"struct"},"1:8779:8021":{"crate_id":1,"path":["std","process","ExitStatus"],"kind":"struct"},"1:3348:3318":{"crate_id":1,"path":["std","io","util","Repeat"],"kind":"struct"},"24:4777:3186":{"crate_id":24,"path":["syn","expr","ExprAssign"],"kind":"struct"},"2:40500:3355":{"crate_id":2,"path":["core","iter","adapters","skip","Skip"],"kind":"struct"},"2:11798:14423":{"crate_id":2,"path":["core","str","pattern","ReverseSearcher"],"kind":"trait"},"2:10076:8359":{"crate_id":2,"path":["core","slice","iter","Split"],"kind":"struct"},"2:43534:8430":{"crate_id":2,"path":["core","str","iter","CharIndices"],"kind":"struct"},"24:917:3224":{"crate_id":24,"path":["syn","generics","ImplGenerics"],"kind":"struct"},"16:6232:8557":{"crate_id":16,"path":["gimli","read","dwarf","RangeIter"],"kind":"struct"},"11:2168:1825":{"crate_id":11,"path":["hashbrown","raw","sse2","Group"],"kind":"struct"},"5:7294:8353":{"crate_id":5,"path":["alloc","string","FromUtf8Error"],"kind":"struct"},"6:7586:7548":{"crate_id":6,"path":["libc","unix","linux_like","linux","canxl_frame"],"kind":"struct"},"6:4524:6917":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_effect"],"kind":"struct"},"6:4475:6890":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_envelope"],"kind":"struct"},"2:43466:14413":{"crate_id":2,"path":["core","slice","iter","RChunksExactMut"],"kind":"struct"},"17:10511:8151":{"crate_id":17,"path":["object","read","elf","attributes","AttributeIndexIterator"],"kind":"struct"},"16:7433:6294":{"crate_id":16,"path":["gimli","read","op","OperationIter"],"kind":"struct"},"17:13999:5957":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation32"],"kind":"struct"},"2:2602:128":{"crate_id":2,"path":["core","error","Error"],"kind":"trait"},"16:6864:6245":{"crate_id":16,"path":["gimli","read","lists","ListsHeader"],"kind":"struct"},"5:5281:14401":{"crate_id":5,"path":["alloc","slice","Join"],"kind":"trait"},"17:11234:5354":{"crate_id":17,"path":["object","read","pe","resource","ResourceName"],"kind":"struct"},"17:13140:5686":{"crate_id":17,"path":["object","macho","Nlist64"],"kind":"struct"},"17:13029:5672":{"crate_id":17,"path":["object","macho","SymsegCommand"],"kind":"struct"},"2:42653:68":{"crate_id":2,"path":["core","fmt","Alignment"],"kind":"enum"},"24:4068:3508":{"crate_id":24,"path":["syn","token","Lt"],"kind":"struct"},"2:40159:14476":{"crate_id":2,"path":["core","char","CaseMappingIter"],"kind":"enum"},"24:2211:2513":{"crate_id":24,"path":["syn","spanned","Spanned"],"kind":"trait"},"17:256:37330":{"crate_id":17,"path":["object","read","util","DebugByte"],"kind":"struct"},"2:2925:2157":{"crate_id":2,"path":["core","ops","function","Fn"],"kind":"trait"},"11:723:8327":{"crate_id":11,"path":["hashbrown","map","Keys"],"kind":"struct"},"17:10529:5362":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCache"],"kind":"struct"},"24:1851:3262":{"crate_id":24,"path":["syn","punctuated","Pairs"],"kind":"struct"},"5:626:8896":{"crate_id":5,"path":["alloc","boxed","from","StringError"],"kind":"struct"},"24:5445:3245":{"crate_id":24,"path":["syn","ty","TypeBareFn"],"kind":"struct"},"17:12053:5468":{"crate_id":17,"path":["object","elf","Dyn32"],"kind":"struct"},"16:2465:6110":{"crate_id":16,"path":["gimli","common","DebugInfoOffset"],"kind":"struct"},"1:10494:4228":{"crate_id":1,"path":["std","sys","unix","thread","Thread"],"kind":"struct"},"16:7474:6143":{"crate_id":16,"path":["gimli","read","pubnames","DebugPubNames"],"kind":"struct"},"24:4798:3191":{"crate_id":24,"path":["syn","expr","ExprBreak"],"kind":"struct"},"17:13639:5864":{"crate_id":17,"path":["object","pe","ImageSectionHeader"],"kind":"struct"},"1:4760:4984":{"crate_id":1,"path":["std","os","fd","owned","OwnedFd"],"kind":"struct"},"2:3156:135":{"crate_id":2,"path":["core","ops","try_trait","FromResidual"],"kind":"trait"},"24:2164:9064":{"crate_id":24,"path":["syn","sealed","lookahead","Sealed"],"kind":"trait"},"5:4073:3270":{"crate_id":5,"path":["alloc","collections","vec_deque","iter_mut","IterMut"],"kind":"struct"},"2:8422:14422":{"crate_id":2,"path":["core","panicking","assert_matches_failed","Pattern"],"kind":"struct"},"2:46139:7863":{"crate_id":2,"path":["core","core_arch","simd","i16x8"],"kind":"struct"},"17:11034:21459":{"crate_id":17,"path":["object","read","pe","section","PeRelocationIterator"],"kind":"struct"},"11:119:4899":{"crate_id":11,"path":["hashbrown","raw","RawTable"],"kind":"struct"},"24:3887:3496":{"crate_id":24,"path":["syn","token","Comma"],"kind":"struct"},"24:5047:2483":{"crate_id":24,"path":["syn","generics","TraitBound"],"kind":"struct"},"17:11852:5435":{"crate_id":17,"path":["object","elf","SectionHeader64"],"kind":"struct"},"1:676:8979":{"crate_id":1,"path":["std","backtrace","LazilyResolvedCapture"],"kind":"struct"},"1:11194:8512":{"crate_id":1,"path":["std","sys_common","process","CommandEnv"],"kind":"struct"},"11:1826:4556":{"crate_id":11,"path":["hashbrown","set","Drain"],"kind":"struct"},"16:2689:6119":{"crate_id":16,"path":["gimli","common","RangeListsOffset"],"kind":"struct"},"6:4678:6947":{"crate_id":6,"path":["libc","unix","linux_like","linux","ucred"],"kind":"struct"},"24:4540:3184":{"crate_id":24,"path":["syn","data","FieldsUnnamed"],"kind":"struct"},"1:5709:9216":{"crate_id":1,"path":["std","sync","barrier","Barrier"],"kind":"struct"},"17:12089:5473":{"crate_id":17,"path":["object","elf","Verdef"],"kind":"struct"},"11:1822:3265":{"crate_id":11,"path":["hashbrown","set","IntoIter"],"kind":"struct"},"24:5491:3241":{"crate_id":24,"path":["syn","ty","Abi"],"kind":"struct"},"2:12448:14484":{"crate_id":2,"path":["core","future","poll_fn","PollFn"],"kind":"struct"},"6:5051:7140":{"crate_id":6,"path":["libc","unix","linux_like","linux","hwtstamp_config"],"kind":"struct"},"21:53:4580":{"crate_id":21,"path":["proc_macro","bridge","buffer","Buffer"],"kind":"struct"},"5:6761:4949":{"crate_id":5,"path":["alloc","vec","retain_mut","BackshiftOnDrop"],"kind":"struct"},"1:8949:4222":{"crate_id":1,"path":["std","sync","mpmc","context","Inner"],"kind":"struct"},"17:13991:5956":{"crate_id":17,"path":["object","pe","ImageDynamicRelocationTable"],"kind":"struct"},"16:5807:8196":{"crate_id":16,"path":["gimli","read","cfi","CommonInformationEntry"],"kind":"struct"},"5:3139:95":{"crate_id":5,"path":["alloc","collections","btree","set","BTreeSet"],"kind":"struct"},"2:45993:7859":{"crate_id":2,"path":["core","core_arch","simd","u16x8"],"kind":"struct"},"22:116:8112":{"crate_id":22,"path":["proc_macro2","rcvec","RcVec"],"kind":"struct"},"16:7693:6138":{"crate_id":16,"path":["gimli","read","str","DebugLineStr"],"kind":"struct"},"6:1527:6651":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_in"],"kind":"struct"},"24:5138:3227":{"crate_id":24,"path":["syn","lit","LitByte"],"kind":"struct"},"17:13083:5678":{"crate_id":17,"path":["object","macho","SourceVersionCommand"],"kind":"struct"},"2:12004:112":{"crate_id":2,"path":["core","str","lossy","Debug"],"kind":"struct"},"2:11849:14431":{"crate_id":2,"path":["core","str","pattern","MultiCharEqPattern"],"kind":"struct"},"24:2667:2290":{"crate_id":24,"path":["syn","token","Const"],"kind":"struct"},"17:11992:5457":{"crate_id":17,"path":["object","elf","Rel64"],"kind":"struct"},"24:335:3385":{"crate_id":24,"path":["syn","buffer","Cursor"],"kind":"struct"},"6:5877:7230":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_pktinfo"],"kind":"struct"},"6:4535:6922":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_ff_upload"],"kind":"struct"},"1:11950:1374":{"crate_id":1,"path":["std","slice"],"kind":"primitive"},"1:8106:3311":{"crate_id":1,"path":["std","io","util","Empty"],"kind":"struct"},"24:4512:3171":{"crate_id":24,"path":["syn","attr","MetaNameValue"],"kind":"struct"},"2:2694:225":{"crate_id":2,"path":["core","marker","StructuralEq"],"kind":"trait"},"1:10660:9180":{"crate_id":1,"path":["std","sys","unix","fd","FileDesc"],"kind":"struct"},"16:6516:6204":{"crate_id":16,"path":["gimli","read","index","UnitIndexSection"],"kind":"struct"},"1:0:1396":{"crate_id":1,"path":["std"],"kind":"module"},"5:4362:4934":{"crate_id":5,"path":["alloc","collections","vec_deque","drop","Dropper"],"kind":"struct"},"2:20622:34106":{"crate_id":2,"path":["core","core_simd","swizzle","rotate_lanes_left","Rotate"],"kind":"struct"},"6:4518:6914":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_rumble_effect"],"kind":"struct"},"21:404:37418":{"crate_id":21,"path":["proc_macro","bridge","scoped_cell","RefMutL"],"kind":"struct"},"24:5464:3250":{"crate_id":24,"path":["syn","ty","TypeNever"],"kind":"struct"},"2:42348:2302":{"crate_id":2,"path":["core","fmt","num","Binary"],"kind":"struct"},"2:3196:3405":{"crate_id":2,"path":["core","ops","unsize","CoerceUnsized"],"kind":"trait"},"2:42369:3421":{"crate_id":2,"path":["core","fmt","num","UpperHex"],"kind":"struct"},"18:727:5170":{"crate_id":18,"path":["memchr","memmem","SearcherConfig"],"kind":"struct"},"6:4944:7088":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_authinfo"],"kind":"struct"},"24:4300:3524":{"crate_id":24,"path":["syn","token","Semi"],"kind":"struct"},"17:10123:5283":{"crate_id":17,"path":["object","read","elf","section","SectionTable"],"kind":"struct"},"17:12905:5645":{"crate_id":17,"path":["object","macho","FilesetEntryCommand"],"kind":"struct"},"15:327:8574":{"crate_id":15,"path":["addr2line","RangeAttributes"],"kind":"struct"},"13:110:37250":{"crate_id":13,"path":["std_detect","detect","arch","x86","Feature"],"kind":"enum"},"6:5967:7285":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","regex_t"],"kind":"struct"},"16:3025:6151":{"crate_id":16,"path":["gimli","common","DwoId"],"kind":"struct"},"2:43850:8450":{"crate_id":2,"path":["core","str","iter","EncodeUtf16"],"kind":"struct"},"14:40:1836":{"crate_id":14,"path":["rustc_demangle","v0","Ident"],"kind":"struct"},"2:44297:8480":{"crate_id":2,"path":["core","str","IsAsciiWhitespace"],"kind":"struct"},"2:2263:105":{"crate_id":2,"path":["core","clone","Clone"],"kind":"trait"},"17:12711:5597":{"crate_id":17,"path":["object","macho","SymtabCommand"],"kind":"struct"},"6:5805:7197":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","glob64_t"],"kind":"struct"},"5:258:4908":{"crate_id":5,"path":["alloc","boxed","thin","drop","DropGuard"],"kind":"struct"},"2:46883:7895":{"crate_id":2,"path":["core","core_arch","simd","i64x4"],"kind":"struct"},"1:11964:1505":{"crate_id":1,"path":["std","u32"],"kind":"primitive"},"2:20841:9271":{"crate_id":2,"path":["core","core_simd","elements","const_ptr","SimdConstPtr"],"kind":"trait"},"16:3777:6159":{"crate_id":16,"path":["gimli","constants","DwSectV2"],"kind":"struct"},"2:47849:7937":{"crate_id":2,"path":["core","core_arch","simd","f64x8"],"kind":"struct"},"24:3858:3494":{"crate_id":24,"path":["syn","token","CaretEq"],"kind":"struct"},"24:5454:3246":{"crate_id":24,"path":["syn","ty","TypeGroup"],"kind":"struct"},"6:6805:7486":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ipc_perm"],"kind":"struct"},"9:426:20187":{"crate_id":9,"path":["miniz_oxide","MZStatus"],"kind":"enum"},"1:10974:5010":{"crate_id":1,"path":["std","sys","unix","process","process_inner","posix_spawn","PosixSpawnFileActions"],"kind":"struct"},"1:8767:186":{"crate_id":1,"path":["std","process","Output"],"kind":"struct"},"2:44474:205":{"crate_id":2,"path":["core","future","ready","Ready"],"kind":"struct"},"1:3904:9117":{"crate_id":1,"path":["std","os","unix","ffi","os_str","OsStrExt"],"kind":"trait"},"17:11354:5232":{"crate_id":17,"path":["object","read","SectionIndex"],"kind":"struct"},"16:4698:6173":{"crate_id":16,"path":["gimli","constants","DwLang"],"kind":"struct"},"16:2541:6113":{"crate_id":16,"path":["gimli","common","LocationListsOffset"],"kind":"struct"},"2:41792:3265":{"crate_id":2,"path":["core","result","IntoIter"],"kind":"struct"},"24:4566:2045":{"crate_id":24,"path":["syn","derive","DataStruct"],"kind":"struct"},"16:5626:21196":{"crate_id":16,"path":["gimli","read","cfi","EhHdrTableIter"],"kind":"struct"},"11:793:8984":{"crate_id":11,"path":["hashbrown","map","ValuesMut"],"kind":"struct"},"17:10323:21381":{"crate_id":17,"path":["object","read","elf","note","GnuProperty"],"kind":"struct"},"17:11178:8165":{"crate_id":17,"path":["object","read","pe","relocation","RelocationIterator"],"kind":"struct"},"24:2820:3466":{"crate_id":24,"path":["syn","token","Final"],"kind":"struct"},"17:9442:37307":{"crate_id":17,"path":["object","read","any","SegmentInternal"],"kind":"enum"},"2:2850:5130":{"crate_id":2,"path":["core","ops","bit","ShlAssign"],"kind":"trait"},"1:10082:2199":{"crate_id":1,"path":["std","sys","unix","os_str","Slice"],"kind":"struct"},"1:11532:8520":{"crate_id":1,"path":["std","backtrace_rs","backtrace","libunwind","Frame"],"kind":"enum"},"16:4620:6172":{"crate_id":16,"path":["gimli","constants","DwVirtuality"],"kind":"struct"},"2:9428:141":{"crate_id":2,"path":["core","hash","Hash"],"kind":"trait"},"2:45660:7841":{"crate_id":2,"path":["core","core_arch","simd","i16x2"],"kind":"struct"},"5:2458:7556":{"crate_id":5,"path":["alloc","collections","btree","node","NodeRef"],"kind":"struct"},"17:11967:5452":{"crate_id":17,"path":["object","elf","Rel32"],"kind":"struct"},"6:6022:7308":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_exit"],"kind":"struct"},"2:8316:3747":{"crate_id":2,"path":["core","panic","unwind_safe","RefUnwindSafe"],"kind":"trait"},"6:4341:6820":{"crate_id":6,"path":["libc","unix","linux_like","linux","signalfd_siginfo"],"kind":"struct"},"17:9665:37327":{"crate_id":17,"path":["object","read","any","SymbolIteratorInternal"],"kind":"enum"},"2:40126:8392":{"crate_id":2,"path":["core","char","EscapeDebug"],"kind":"struct"},"1:7602:4241":{"crate_id":1,"path":["std","thread","local","AccessError"],"kind":"struct"},"17:11467:5377":{"crate_id":17,"path":["object","read","ObjectMapEntry"],"kind":"struct"},"2:40484:3354":{"crate_id":2,"path":["core","iter","adapters","scan","Scan"],"kind":"struct"},"2:8909:8601":{"crate_id":2,"path":["core","fmt","builders","PadAdapterState"],"kind":"struct"},"17:11924:5447":{"crate_id":17,"path":["object","elf","Sym64"],"kind":"struct"},"2:12423:192":{"crate_id":2,"path":["core","future","pending","Pending"],"kind":"struct"},"2:42616:110":{"crate_id":2,"path":["core","fmt","rt","Count"],"kind":"enum"},"6:5863:7229":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","mallinfo2"],"kind":"struct"},"24:1616:3384":{"crate_id":24,"path":["syn","parse","Nothing"],"kind":"struct"},"17:10957:21457":{"crate_id":17,"path":["object","read","pe","file","PeComdat"],"kind":"struct"},"24:3974:125":{"crate_id":24,"path":["syn","token","Eq"],"kind":"struct"},"2:1666:1092":{"crate_id":2,"path":["core","ptr"],"kind":"module"},"24:4802:3192":{"crate_id":24,"path":["syn","expr","ExprCall"],"kind":"struct"},"24:4317:3525":{"crate_id":24,"path":["syn","token","Shl"],"kind":"struct"},"6:4456:6882":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_mask"],"kind":"struct"},"16:7362:21210":{"crate_id":16,"path":["gimli","read","op","EvaluationResult"],"kind":"enum"},"17:12891:5642":{"crate_id":17,"path":["object","macho","LinkeditDataCommand"],"kind":"struct"},"6:5044:7137":{"crate_id":6,"path":["libc","unix","linux_like","linux","ifreq"],"kind":"struct"},"1:4601:7416":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt","st_ctime"],"kind":"foreign_type"},"5:2240:8340":{"crate_id":5,"path":["alloc","collections","btree","navigate","LazyLeafRange"],"kind":"struct"},"6:4895:7054":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_sndrcvinfo"],"kind":"struct"},"1:3083:9100":{"crate_id":1,"path":["std","io","readbuf","BorrowedBuf"],"kind":"struct"},"6:5799:7196":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__timeval"],"kind":"struct"},"1:11959:746":{"crate_id":1,"path":["std","i32"],"kind":"primitive"},"1:11728:5017":{"crate_id":1,"path":["std","backtrace_rs","symbolize","gimli","mmap","Mmap"],"kind":"struct"},"6:4723:6969":{"crate_id":6,"path":["libc","unix","linux_like","linux","in6_pktinfo"],"kind":"struct"},"1:11269:8517":{"crate_id":1,"path":["std","sys_common","wtf8","Wtf8CodePoints"],"kind":"struct"},"2:22354:178":{"crate_id":2,"path":["core","num","nonzero","NonZeroU8"],"kind":"struct"},"2:44353:8484":{"crate_id":2,"path":["core","time","TryFromFloatSecsError"],"kind":"struct"},"2:22093:8380":{"crate_id":2,"path":["core","num","error","ParseIntError"],"kind":"struct"},"6:4729:6972":{"crate_id":6,"path":["libc","unix","linux_like","linux","arpd_request"],"kind":"struct"},"5:1500:8599":{"crate_id":5,"path":["alloc","collections","btree","map","IntoValues"],"kind":"struct"},"2:3233:3407":{"crate_id":2,"path":["core","ops","unsize","DispatchFromDyn"],"kind":"trait"},"16:7073:21209":{"crate_id":16,"path":["gimli","read","op","DieReference"],"kind":"enum"},"17:12840:5637":{"crate_id":17,"path":["object","macho","TwolevelHint"],"kind":"struct"},"2:42146:85":{"crate_id":2,"path":["core","sync","atomic","AtomicIsize"],"kind":"struct"},"2:43528:8429":{"crate_id":2,"path":["core","str","iter","Chars"],"kind":"struct"},"10:0:3011":{"crate_id":10,"path":["adler"],"kind":"module"},"2:21989:7574":{"crate_id":2,"path":["core","num","flt2dec","decoder","Decoded"],"kind":"struct"},"2:20669:34402":{"crate_id":2,"path":["core","core_simd","swizzle","deinterleave","Odd"],"kind":"struct"},"2:42026:89":{"crate_id":2,"path":["core","sync","atomic","AtomicU32"],"kind":"struct"},"2:42869:8423":{"crate_id":2,"path":["core","hash","sip","SipHasher"],"kind":"struct"},"2:20803:9064":{"crate_id":2,"path":["core","core_simd","cast","sealed","Sealed"],"kind":"trait"},"3:234:210":{"crate_id":3,"path":["compiler_builtins","float","cmp","Result"],"kind":"enum"},"17:12792:5632":{"crate_id":17,"path":["object","macho","DylibModule64"],"kind":"struct"},"24:4126:3512":{"crate_id":24,"path":["syn","token","Not"],"kind":"struct"},"16:5959:8213":{"crate_id":16,"path":["gimli","read","cfi","RegisterRuleIter"],"kind":"struct"},"17:12952:5652":{"crate_id":17,"path":["object","macho","VersionMinCommand"],"kind":"struct"},"2:46390:7871":{"crate_id":2,"path":["core","core_arch","simd","m32x4"],"kind":"struct"},"17:0:3017":{"crate_id":17,"path":["object"],"kind":"module"},"17:12394:5554":{"crate_id":17,"path":["object","macho","MachHeader64"],"kind":"struct"},"17:12435:5558":{"crate_id":17,"path":["object","macho","SegmentCommand32"],"kind":"struct"},"17:10994:21434":{"crate_id":17,"path":["object","read","pe","section","PeSegment"],"kind":"struct"},"6:562:6616":{"crate_id":6,"path":["libc","unix","linger"],"kind":"struct"},"5:4758:671":{"crate_id":5,"path":["alloc","fmt"],"kind":"module"},"17:13803:5906":{"crate_id":17,"path":["object","pe","ImageArchiveMemberHeader"],"kind":"struct"},"6:1575:6681":{"crate_id":6,"path":["libc","unix","linux_like","tm"],"kind":"struct"},"1:11958:745":{"crate_id":1,"path":["std","i16"],"kind":"primitive"},"18:590:5155":{"crate_id":18,"path":["memchr","memmem","twoway","TwoWay"],"kind":"struct"},"16:2421:6108":{"crate_id":16,"path":["gimli","common","DebugAddrIndex"],"kind":"struct"},"24:2514:3534":{"crate_id":24,"path":["syn","token","Underscore"],"kind":"struct"},"1:8317:8003":{"crate_id":1,"path":["std","os","fd","owned","BorrowedFd"],"kind":"struct"},"16:3867:6161":{"crate_id":16,"path":["gimli","constants","DwCfa"],"kind":"struct"},"6:4794:7007":{"crate_id":6,"path":["libc","unix","linux_like","linux","can_filter"],"kind":"struct"},"2:47773:7935":{"crate_id":2,"path":["core","core_arch","simd","i64x8"],"kind":"struct"},"16:2962:20338":{"crate_id":16,"path":["gimli","common","SectionId"],"kind":"enum"},"17:9875:21319":{"crate_id":17,"path":["object","read","coff","file","CoffCommon"],"kind":"struct"},"21:1393:1917":{"crate_id":21,"path":["proc_macro","bridge","symbol","Symbol"],"kind":"struct"},"24:5058:2881":{"crate_id":24,"path":["syn","generics","WhereClause"],"kind":"struct"},"24:4517:1850":{"crate_id":24,"path":["syn","data","Variant"],"kind":"struct"},"1:7963:29972":{"crate_id":1,"path":["std","io","error","SimpleMessage"],"kind":"struct"},"1:2210:129":{"crate_id":1,"path":["std","fs","File"],"kind":"struct"},"6:7546:7540":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_mutex_t"],"kind":"struct"},"16:6571:21204":{"crate_id":16,"path":["gimli","read","line","LineInstruction"],"kind":"enum"},"2:2316:125":{"crate_id":2,"path":["core","cmp","Eq"],"kind":"trait"},"1:5525:9202":{"crate_id":1,"path":["std","process","Termination"],"kind":"trait"},"1:8815:3266":{"crate_id":1,"path":["std","sync","mpsc","Iter"],"kind":"struct"},"2:44577:4469":{"crate_id":2,"path":["core","alloc","AllocError"],"kind":"struct"},"2:5589:3337":{"crate_id":2,"path":["core","iter","adapters","flatten","Flatten"],"kind":"struct"},"5:4233:3266":{"crate_id":5,"path":["alloc","collections","vec_deque","iter","Iter"],"kind":"struct"},"16:3441:6156":{"crate_id":16,"path":["gimli","arch","RiscV"],"kind":"struct"},"1:3270:9093":{"crate_id":1,"path":["std","io","stdio","Stderr"],"kind":"struct"},"16:5590:6135":{"crate_id":16,"path":["gimli","read","cfi","EhFrameHdr"],"kind":"struct"},"5:7030:8344":{"crate_id":5,"path":["alloc","collections","binary_heap","IntoIterSorted"],"kind":"struct"},"2:44527:8647":{"crate_id":2,"path":["core","task","wake","RawWaker"],"kind":"struct"},"6:4568:6939":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Ehdr"],"kind":"struct"},"17:10161:21334":{"crate_id":17,"path":["object","read","elf","section","ElfSection"],"kind":"struct"},"2:9208:112":{"crate_id":2,"path":["core","fmt","Debug"],"kind":"trait"},"2:22519:4232":{"crate_id":2,"path":["core","num","nonzero","NonZeroUsize"],"kind":"struct"},"17:14417:6083":{"crate_id":17,"path":["object","pe","ImageCor20Header"],"kind":"struct"},"14:7:8889":{"crate_id":14,"path":["rustc_demangle","legacy","Demangle"],"kind":"struct"},"2:3647:3265":{"crate_id":2,"path":["core","array","iter","IntoIter"],"kind":"struct"},"2:45614:7839":{"crate_id":2,"path":["core","core_arch","simd","u16x2"],"kind":"struct"},"1:4597:7412":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt","st_atime"],"kind":"foreign_type"},"2:40058:33155":{"crate_id":2,"path":["core","char","convert","CharErrorKind"],"kind":"enum"},"1:7869:119":{"crate_id":1,"path":["std","fs","DirBuilder"],"kind":"struct"},"1:10963:5009":{"crate_id":1,"path":["std","sys","unix","process","process_inner","do_exec","Reset"],"kind":"struct"},"24:4550:1686":{"crate_id":24,"path":["syn","derive","DeriveInput"],"kind":"struct"},"2:11490:8432":{"crate_id":2,"path":["core","str","iter","SplitInternal"],"kind":"struct"},"21:2754:1903":{"crate_id":21,"path":["proc_macro","Spacing"],"kind":"enum"},"2:8741:86":{"crate_id":2,"path":["core","sync","atomic","AtomicPtr"],"kind":"struct"},"17:9561:21282":{"crate_id":17,"path":["object","read","any","ComdatSectionIterator"],"kind":"struct"},"15:0:3015":{"crate_id":15,"path":["addr2line"],"kind":"module"},"17:13882:5926":{"crate_id":17,"path":["object","pe","ImageTlsDirectory32"],"kind":"struct"},"5:6717:244":{"crate_id":5,"path":["alloc","vec","Vec"],"kind":"struct"},"2:42861:8422":{"crate_id":2,"path":["core","hash","sip","SipHasher24"],"kind":"struct"},"2:40382:3346":{"crate_id":2,"path":["core","iter","adapters","filter","Filter"],"kind":"struct"},"22:736:1836":{"crate_id":22,"path":["proc_macro2","fallback","Ident"],"kind":"struct"},"17:14205:6029":{"crate_id":17,"path":["object","pe","ImageAlpha64RuntimeFunctionEntry"],"kind":"struct"},"11:97:8320":{"crate_id":11,"path":["hashbrown","raw","Bucket"],"kind":"struct"},"24:5457:3247":{"crate_id":24,"path":["syn","ty","TypeImplTrait"],"kind":"struct"},"24:1448:25323":{"crate_id":24,"path":["syn","parse","discouraged","AnyDelimiter"],"kind":"trait"},"2:21112:9267":{"crate_id":2,"path":["core","core_simd","lane_count","SupportedLaneCount"],"kind":"trait"},"16:4396:6165":{"crate_id":16,"path":["gimli","constants","DwForm"],"kind":"struct"},"17:12412:5555":{"crate_id":17,"path":["object","macho","LoadCommand"],"kind":"struct"},"2:47273:7929":{"crate_id":2,"path":["core","core_arch","simd","u8x64"],"kind":"struct"},"2:45882:7850":{"crate_id":2,"path":["core","core_arch","simd","f32x2"],"kind":"struct"},"16:7539:6146":{"crate_id":16,"path":["gimli","read","rnglists","DebugRngLists"],"kind":"struct"},"5:3567:163":{"crate_id":5,"path":["alloc","collections","linked_list","LinkedList"],"kind":"struct"},"24:1736:8918":{"crate_id":24,"path":["syn","print","TokensOrDefault"],"kind":"struct"},"2:2832:3527":{"crate_id":2,"path":["core","ops","bit","Shr"],"kind":"trait"},"2:45947:7852":{"crate_id":2,"path":["core","core_arch","simd","u8x16"],"kind":"struct"},"2:40152:8394":{"crate_id":2,"path":["core","char","ToUppercase"],"kind":"struct"},"5:1479:8984":{"crate_id":5,"path":["alloc","collections","btree","map","ValuesMut"],"kind":"struct"},"1:8831:3265":{"crate_id":1,"path":["std","sync","mpsc","IntoIter"],"kind":"struct"},"24:3075:3478":{"crate_id":24,"path":["syn","token","Pub"],"kind":"struct"},"2:3373:14440":{"crate_id":2,"path":["core","any","Provider"],"kind":"trait"},"9:507:6545":{"crate_id":9,"path":["miniz_oxide","StreamResult"],"kind":"struct"},"21:2704:3433":{"crate_id":21,"path":["proc_macro","SourceFile"],"kind":"struct"},"16:6197:21202":{"crate_id":16,"path":["gimli","read","dwarf","DwarfPackage"],"kind":"struct"},"18:582:4126":{"crate_id":18,"path":["memchr","memmem","twoway","Reverse"],"kind":"struct"},"1:8165:3357":{"crate_id":1,"path":["std","io","Take"],"kind":"struct"},"24:5283:190":{"crate_id":24,"path":["syn","path","Path"],"kind":"struct"},"1:8793:8022":{"crate_id":1,"path":["std","process","ExitStatusError"],"kind":"struct"},"2:41540:8494":{"crate_id":2,"path":["core","net","socket_addr","SocketAddr"],"kind":"enum"},"1:10679:8503":{"crate_id":1,"path":["std","sys","unix","fs","FileAttr"],"kind":"struct"},"2:9213:120":{"crate_id":2,"path":["core","fmt","Display"],"kind":"trait"},"2:41801:183":{"crate_id":2,"path":["core","sync","atomic","Ordering"],"kind":"enum"},"2:21:684":{"crate_id":2,"path":["core","format_args"],"kind":"macro"},"16:4724:6174":{"crate_id":16,"path":["gimli","constants","DwAddr"],"kind":"struct"},"5:4031:4908":{"crate_id":5,"path":["alloc","collections","vec_deque","drain","drop","DropGuard"],"kind":"struct"},"24:3126:3479":{"crate_id":24,"path":["syn","token","SelfType"],"kind":"struct"},"2:40110:8391":{"crate_id":2,"path":["core","char","EscapeUnicode"],"kind":"struct"},"24:608:3266":{"crate_id":24,"path":["syn","error","Iter"],"kind":"struct"},"1:7822:8492":{"crate_id":1,"path":["std","fs","OpenOptions"],"kind":"struct"},"1:1568:4556":{"crate_id":1,"path":["std","collections","hash","set","Drain"],"kind":"struct"},"2:45568:7837":{"crate_id":2,"path":["core","core_arch","simd","i8x2"],"kind":"struct"},"2:21104:9064":{"crate_id":2,"path":["core","core_simd","lane_count","sealed","Sealed"],"kind":"trait"},"16:2803:6124":{"crate_id":16,"path":["gimli","common","DebugStrOffsetsIndex"],"kind":"struct"},"2:46045:7861":{"crate_id":2,"path":["core","core_arch","simd","u64x2"],"kind":"struct"},"1:3193:9096":{"crate_id":1,"path":["std","io","stdio","StdinLock"],"kind":"struct"},"16:6372:6131":{"crate_id":16,"path":["gimli","read","aranges","DebugAranges"],"kind":"struct"},"2:30545:33132":{"crate_id":2,"path":["core","ptr","alignment","AlignmentEnum64"],"kind":"enum"},"1:11404:9112":{"crate_id":1,"path":["std","sys_common","net","TcpListener"],"kind":"struct"},"16:2497:6111":{"crate_id":16,"path":["gimli","common","DebugLineOffset"],"kind":"struct"},"2:40414:3349":{"crate_id":2,"path":["core","iter","adapters","fuse","Fuse"],"kind":"struct"},"17:12864:5640":{"crate_id":17,"path":["object","macho","UuidCommand"],"kind":"struct"},"6:554:6611":{"crate_id":6,"path":["libc","unix","winsize"],"kind":"struct"},"2:2846:5127":{"crate_id":2,"path":["core","ops","bit","BitXorAssign"],"kind":"trait"},"17:10654:5302":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandData"],"kind":"struct"},"11:1048:37242":{"crate_id":11,"path":["hashbrown","map","KeyOrRef"],"kind":"enum"},"11:844:8989":{"crate_id":11,"path":["hashbrown","map","RawEntryBuilder"],"kind":"struct"},"16:7648:198":{"crate_id":16,"path":["gimli","read","rnglists","Range"],"kind":"struct"},"16:5704:8188":{"crate_id":16,"path":["gimli","read","cfi","SectionBaseAddresses"],"kind":"struct"},"2:2928:3441":{"crate_id":2,"path":["core","ops","function","FnMut"],"kind":"trait"},"17:12502:5571":{"crate_id":17,"path":["object","macho","Section64"],"kind":"struct"},"2:46023:7860":{"crate_id":2,"path":["core","core_arch","simd","u32x4"],"kind":"struct"},"1:11944:941":{"crate_id":1,"path":["std","never"],"kind":"primitive"},"1:6124:4993":{"crate_id":1,"path":["std","sync","mpmc","waker","SyncWaker"],"kind":"struct"},"6:1590:6693":{"crate_id":6,"path":["libc","unix","linux_like","sched_param"],"kind":"struct"},"1:11961:743":{"crate_id":1,"path":["std","i128"],"kind":"primitive"},"1:930:8985":{"crate_id":1,"path":["std","collections","hash","map","RawEntryBuilderMut"],"kind":"struct"},"2:2826:3525":{"crate_id":2,"path":["core","ops","bit","Shl"],"kind":"trait"},"17:8794:21273":{"crate_id":17,"path":["object","common","RelocationKind"],"kind":"enum"},"16:6815:6239":{"crate_id":16,"path":["gimli","read","line","FileEntry"],"kind":"struct"},"1:1821:9009":{"crate_id":1,"path":["std","env","SplitPaths"],"kind":"struct"},"2:21675:9266":{"crate_id":2,"path":["core","core_simd","vector","SimdElement"],"kind":"trait"},"2:43502:7826":{"crate_id":2,"path":["core","str","error","Utf8Error"],"kind":"struct"},"5:1461:8327":{"crate_id":5,"path":["alloc","collections","btree","map","Keys"],"kind":"struct"},"1:4665:9151":{"crate_id":1,"path":["std","os","linux","process","CommandExt"],"kind":"trait"},"2:4263:3392":{"crate_id":2,"path":["core","cell","BorrowMutError"],"kind":"struct"},"2:45722:7843":{"crate_id":2,"path":["core","core_arch","simd","u16x4"],"kind":"struct"},"17:10597:21423":{"crate_id":17,"path":["object","read","macho","file","MachOComdatIterator"],"kind":"struct"},"20:34:9064":{"crate_id":20,"path":["quote","ext","private","Sealed"],"kind":"trait"},"24:826:3371":{"crate_id":24,"path":["syn","ext","IdentExt"],"kind":"trait"},"17:8740:21271":{"crate_id":17,"path":["object","common","SymbolKind"],"kind":"enum"},"17:9966:5289":{"crate_id":17,"path":["object","read","coff","symbol","SymbolTable"],"kind":"struct"},"1:1768:610":{"crate_id":1,"path":["std","env"],"kind":"module"},"1:8991:1889":{"crate_id":1,"path":["std","sync","mpmc","select","Token"],"kind":"struct"},"16:6175:8558":{"crate_id":16,"path":["gimli","read","dwarf","Dwarf"],"kind":"struct"},"0:946:1696":{"crate_id":0,"path":["serde_derive","Serialize"],"kind":"proc_derive"},"1:11227:8043":{"crate_id":1,"path":["std","sys_common","wtf8","CodePoint"],"kind":"struct"},"2:40239:9029":{"crate_id":2,"path":["core","ffi","c_char"],"kind":"typedef"},"5:1371:94":{"crate_id":5,"path":["alloc","collections","btree","map","BTreeMap"],"kind":"struct"},"1:5357:9197":{"crate_id":1,"path":["std","process","ChildStdin"],"kind":"struct"},"2:2804:3512":{"crate_id":2,"path":["core","ops","bit","Not"],"kind":"trait"},"22:813:1904":{"crate_id":22,"path":["proc_macro2","imp","Span"],"kind":"enum"},"11:311:8324":{"crate_id":11,"path":["hashbrown","raw","RawIter"],"kind":"struct"},"11:1852:8331":{"crate_id":11,"path":["hashbrown","set","SymmetricDifference"],"kind":"struct"},"14:31:8889":{"crate_id":14,"path":["rustc_demangle","v0","Demangle"],"kind":"struct"},"2:42598:68":{"crate_id":2,"path":["core","fmt","rt","Alignment"],"kind":"enum"},"17:12017:5459":{"crate_id":17,"path":["object","elf","ProgramHeader32"],"kind":"struct"},"1:7973:9091":{"crate_id":1,"path":["std","io","error","ErrorKind"],"kind":"enum"},"17:8605:21253":{"crate_id":17,"path":["object","common","AddressSize"],"kind":"enum"},"16:6977:21208":{"crate_id":16,"path":["gimli","read","loclists","LocListIter"],"kind":"struct"},"1:11104:8042":{"crate_id":1,"path":["std","sys","unix","time","Timespec"],"kind":"struct"},"6:123:14871":{"crate_id":6,"path":["libc","unix","fpos_t"],"kind":"enum"},"2:9476:8358":{"crate_id":2,"path":["core","hash","BuildHasherDefault"],"kind":"struct"},"1:11340:5014":{"crate_id":1,"path":["std","sys_common","net","LookupHost"],"kind":"struct"},"6:5793:7193":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__exit_status"],"kind":"struct"},"2:9211:112":{"crate_id":2,"path":["core","fmt","macros","Debug"],"kind":"proc_derive"},"2:39271:198":{"crate_id":2,"path":["core","ops","range","Range"],"kind":"struct"},"11:1501:20266":{"crate_id":11,"path":["hashbrown","rustc_entry","RustcEntry"],"kind":"enum"},"5:7360:4554":{"crate_id":5,"path":["alloc","vec","extract_if","ExtractIf"],"kind":"struct"},"1:7893:3385":{"crate_id":1,"path":["std","io","cursor","Cursor"],"kind":"struct"},"17:12592:5583":{"crate_id":17,"path":["object","macho","SubClientCommand"],"kind":"struct"},"1:480:4978":{"crate_id":1,"path":["std","thread","spawn_unchecked_","MaybeDangling"],"kind":"struct"},"6:6028:7311":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_seccomp"],"kind":"struct"},"6:4949:7090":{"crate_id":6,"path":["libc","unix","linux_like","linux","rlimit64"],"kind":"struct"},"1:8155:3343":{"crate_id":1,"path":["std","io","Chain"],"kind":"struct"},"2:3078:3289":{"crate_id":2,"path":["core","ops","range","RangeBounds"],"kind":"trait"},"21:2639:3432":{"crate_id":21,"path":["proc_macro","ExpandError"],"kind":"struct"},"24:1332:3389":{"crate_id":24,"path":["syn","lookahead","Peek"],"kind":"trait"},"2:40272:4956":{"crate_id":2,"path":["core","ffi","VaListImpl"],"kind":"struct"},"22:887:1905":{"crate_id":22,"path":["proc_macro2","TokenTree"],"kind":"enum"},"16:4928:6181":{"crate_id":16,"path":["gimli","constants","DwDefaulted"],"kind":"struct"},"6:5775:7180":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","aiocb"],"kind":"struct"},"17:12618:5586":{"crate_id":17,"path":["object","macho","SubLibraryCommand"],"kind":"struct"},"24:844:5114":{"crate_id":24,"path":["syn","ext","private","PeekFn"],"kind":"struct"},"24:4979:2248":{"crate_id":24,"path":["syn","generics","GenericParam"],"kind":"enum"},"2:41674:3744":{"crate_id":2,"path":["core","panic","location","Location"],"kind":"struct"},"6:4872:7043":{"crate_id":6,"path":["libc","unix","linux_like","linux","in6_ifreq"],"kind":"struct"},"17:10444:8145":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSection"],"kind":"struct"},"17:10066:21327":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdatSectionIterator"],"kind":"struct"},"21:2328:1836":{"crate_id":21,"path":["proc_macro","bridge","Ident"],"kind":"struct"},"1:11951:1404":{"crate_id":1,"path":["std","str"],"kind":"primitive"},"24:5488:3256":{"crate_id":24,"path":["syn","ty","TypeTuple"],"kind":"struct"},"20:45:3143":{"crate_id":20,"path":["quote","ident_fragment","IdentFragment"],"kind":"trait"},"6:4770:6994":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_extended_err"],"kind":"struct"},"11:2180:6479":{"crate_id":11,"path":["hashbrown","raw","bitmask","BitMaskIter"],"kind":"struct"},"1:11968:1561":{"crate_id":1,"path":["std","usize"],"kind":"primitive"},"16:5651:6134":{"crate_id":16,"path":["gimli","read","cfi","EhFrame"],"kind":"struct"},"2:40452:3338":{"crate_id":2,"path":["core","iter","adapters","map_while","MapWhile"],"kind":"struct"},"2:41784:3270":{"crate_id":2,"path":["core","result","IterMut"],"kind":"struct"},"17:14301:6056":{"crate_id":17,"path":["object","pe","ImageDebugDirectory"],"kind":"struct"},"17:10266:21331":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdat"],"kind":"struct"},"6:7575:7547":{"crate_id":6,"path":["libc","unix","linux_like","linux","canfd_frame"],"kind":"struct"},"17:11189:5350":{"crate_id":17,"path":["object","read","pe","relocation","Relocation"],"kind":"struct"},"1:7852:130":{"crate_id":1,"path":["std","fs","FileType"],"kind":"struct"},"11:657:3265":{"crate_id":11,"path":["hashbrown","map","IntoIter"],"kind":"struct"},"1:10258:29348":{"crate_id":1,"path":["std","sys","unix","process","process_common","Argv"],"kind":"struct"},"17:10906:5339":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbol"],"kind":"struct"},"6:1733:6777":{"crate_id":6,"path":["libc","unix","linux_like","sigevent"],"kind":"struct"},"24:5031:2251":{"crate_id":24,"path":["syn","generics","TypeParamBound"],"kind":"enum"},"2:30345:4301":{"crate_id":2,"path":["core","mem","maybe_uninit","MaybeUninit"],"kind":"union"},"17:10883:5338":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbolTable"],"kind":"struct"},"2:8904:35651":{"crate_id":2,"path":["core","fmt","builders","PadAdapter"],"kind":"struct"},"16:4592:6171":{"crate_id":16,"path":["gimli","constants","DwVis"],"kind":"struct"},"1:3898:9118":{"crate_id":1,"path":["std","os","unix","ffi","os_str","OsStringExt"],"kind":"trait"},"2:4605:14469":{"crate_id":2,"path":["core","char","REPLACEMENT_CHARACTER"],"kind":"constant"},"1:3152:32196":{"crate_id":1,"path":["std","io","stdio","StdinRaw"],"kind":"struct"},"6:7505:7531":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_mutexattr_t"],"kind":"struct"},"6:1690:6761":{"crate_id":6,"path":["libc","unix","linux_like","mmsghdr"],"kind":"struct"},"24:5009:3222":{"crate_id":24,"path":["syn","generics","ConstParam"],"kind":"struct"},"17:13981:5953":{"crate_id":17,"path":["object","pe","ImageLoadConfigCodeIntegrity"],"kind":"struct"},"17:9571:37308":{"crate_id":17,"path":["object","read","any","ComdatSectionIteratorInternal"],"kind":"enum"},"24:4160:3514":{"crate_id":24,"path":["syn","token","OrEq"],"kind":"struct"},"1:8202:9107":{"crate_id":1,"path":["std","net","Shutdown"],"kind":"enum"},"17:13548:5848":{"crate_id":17,"path":["object","pe","ImageNtHeaders64"],"kind":"struct"},"1:4877:9177":{"crate_id":1,"path":["std","os","net","linux_ext","tcp","TcpStreamExt"],"kind":"trait"},"11:644:3270":{"crate_id":11,"path":["hashbrown","map","IterMut"],"kind":"struct"},"16:8086:8313":{"crate_id":16,"path":["gimli","read","unit","EntriesCursor"],"kind":"struct"},"2:41657:3270":{"crate_id":2,"path":["core","option","IterMut"],"kind":"struct"},"2:43964:8451":{"crate_id":2,"path":["core","str","pattern","CharSearcher"],"kind":"struct"},"17:13167:5689":{"crate_id":17,"path":["object","macho","RelocationInfo"],"kind":"struct"},"1:6432:4997":{"crate_id":1,"path":["std","sync","once_lock","OnceLock"],"kind":"struct"},"2:2897:117":{"crate_id":2,"path":["core","ops","deref","Deref"],"kind":"trait"},"2:43385:7824":{"crate_id":2,"path":["core","slice","iter","ArrayWindows"],"kind":"struct"},"24:5173:2208":{"crate_id":24,"path":["syn","mac","Macro"],"kind":"struct"},"22:804:37495":{"crate_id":22,"path":["proc_macro2","imp","TokenTreeIter"],"kind":"enum"},"2:43446:14414":{"crate_id":2,"path":["core","slice","iter","RChunksMut"],"kind":"struct"},"2:22079:7586":{"crate_id":2,"path":["core","num","error","TryFromIntError"],"kind":"struct"},"14:0:3014":{"crate_id":14,"path":["rustc_demangle"],"kind":"module"},"16:5342:6188":{"crate_id":16,"path":["gimli","constants","DwEhPe"],"kind":"struct"},"17:3395:21392":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbolIterator"],"kind":"struct"},"5:5527:4560":{"crate_id":5,"path":["alloc","string","retain","SetLenOnDrop"],"kind":"struct"},"5:2138:8333":{"crate_id":5,"path":["alloc","collections","btree","merge_iter","MergeIterInner"],"kind":"struct"},"16:2759:6122":{"crate_id":16,"path":["gimli","common","DebugStrOffset"],"kind":"struct"},"2:40331:3343":{"crate_id":2,"path":["core","iter","adapters","chain","Chain"],"kind":"struct"},"2:44190:8473":{"crate_id":2,"path":["core","str","lossy","Utf8Chunks"],"kind":"struct"},"24:4785:3188":{"crate_id":24,"path":["syn","expr","ExprAwait"],"kind":"struct"},"1:11955:643":{"crate_id":1,"path":["std","f32"],"kind":"primitive"},"2:7384:159":{"crate_id":2,"path":["core","iter","traits","iterator","Iterator"],"kind":"trait"},"2:10027:3266":{"crate_id":2,"path":["core","slice","iter","Iter"],"kind":"struct"},"17:12065:5471":{"crate_id":17,"path":["object","elf","Dyn64"],"kind":"struct"},"14:187:20280":{"crate_id":14,"path":["rustc_demangle","SizeLimitedFmtAdapter"],"kind":"struct"},"1:5593:4987":{"crate_id":1,"path":["std","sync","mpsc","SyncSender"],"kind":"struct"},"1:11966:1503":{"crate_id":1,"path":["std","u128"],"kind":"primitive"},"24:3921:3498":{"crate_id":24,"path":["syn","token","Dot"],"kind":"struct"},"17:13332:5718":{"crate_id":17,"path":["object","pe","ImageOs2Header"],"kind":"struct"},"6:1673:6754":{"crate_id":6,"path":["libc","unix","linux_like","arpreq_old"],"kind":"struct"},"2:8317:3746":{"crate_id":2,"path":["core","panic","unwind_safe","AssertUnwindSafe"],"kind":"struct"},"24:547:210":{"crate_id":24,"path":["syn","error","Result"],"kind":"typedef"},"1:1572:4554":{"crate_id":1,"path":["std","collections","hash","set","ExtractIf"],"kind":"struct"},"1:7285:32502":{"crate_id":1,"path":["std","panicking","Hook"],"kind":"enum"},"24:4288:3523":{"crate_id":24,"path":["syn","token","RArrow"],"kind":"struct"},"6:526:6596":{"crate_id":6,"path":["libc","unix","ipv6_mreq"],"kind":"struct"},"6:1557:6671":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_ll"],"kind":"struct"},"17:9887:21313":{"crate_id":17,"path":["object","read","coff","file","CoffFile"],"kind":"struct"},"17:504:21267":{"crate_id":17,"path":["object","read","any","Comdat"],"kind":"struct"},"2:7306:121":{"crate_id":2,"path":["core","iter","traits","double_ended","DoubleEndedIterator"],"kind":"trait"},"2:11783:14422":{"crate_id":2,"path":["core","str","pattern","Pattern"],"kind":"trait"},"2:1755:4506":{"crate_id":2,"path":["core","ptr","metadata","DynMetadata"],"kind":"struct"},"1:2350:9047":{"crate_id":1,"path":["std","fs","symlink_metadata"],"kind":"function"},"1:11948:1054":{"crate_id":1,"path":["std","pointer"],"kind":"primitive"},"17:11520:5346":{"crate_id":17,"path":["object","read","Export"],"kind":"struct"},"1:3158:26948":{"crate_id":1,"path":["std","io","stdio","StderrRaw"],"kind":"struct"},"9:237:7819":{"crate_id":9,"path":["miniz_oxide","inflate","core","State"],"kind":"enum"},"1:6780:9261":{"crate_id":1,"path":["std","std_float","StdFloat"],"kind":"trait"},"1:11363:9113":{"crate_id":1,"path":["std","sys_common","net","TcpStream"],"kind":"struct"},"24:551:8082":{"crate_id":24,"path":["syn","error","ErrorMessage"],"kind":"struct"},"24:2565:3457":{"crate_id":24,"path":["syn","token","Async"],"kind":"struct"},"2:1820:3408":{"crate_id":2,"path":["core","ptr","non_null","NonNull"],"kind":"struct"},"2:9172:210":{"crate_id":2,"path":["core","fmt","Result"],"kind":"typedef"},"17:11007:21433":{"crate_id":17,"path":["object","read","pe","section","PeSectionIterator"],"kind":"struct"},"24:5061:1971":{"crate_id":24,"path":["syn","generics","WherePredicate"],"kind":"enum"},"21:2709:1905":{"crate_id":21,"path":["proc_macro","TokenTree"],"kind":"enum"},"17:11250:5355":{"crate_id":17,"path":["object","read","pe","rich","RichHeaderInfo"],"kind":"struct"},"16:6386:8247":{"crate_id":16,"path":["gimli","read","aranges","ArangeHeaderIter"],"kind":"struct"},"17:10458:8146":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSubsectionIterator"],"kind":"struct"},"16:6239:37293":{"crate_id":16,"path":["gimli","read","dwarf","RangeIterInner"],"kind":"enum"},"1:8441:8015":{"crate_id":1,"path":["std","path","PrefixComponent"],"kind":"struct"},"1:5393:9199":{"crate_id":1,"path":["std","process","ChildStderr"],"kind":"struct"},"17:11542:5380":{"crate_id":17,"path":["object","read","CodeView"],"kind":"struct"},"16:7240:37291":{"crate_id":16,"path":["gimli","read","op","OperationEvaluationResult"],"kind":"enum"},"17:1075:21309":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbolIterator"],"kind":"struct"},"2:2816:4046":{"crate_id":2,"path":["core","ops","bit","BitOr"],"kind":"trait"},"2:40894:3318":{"crate_id":2,"path":["core","iter","sources","repeat","Repeat"],"kind":"struct"},"17:13847:5917":{"crate_id":17,"path":["object","pe","ImageImportByName"],"kind":"struct"},"18:652:5148":{"crate_id":18,"path":["memchr","memmem","x86","sse","Forward"],"kind":"struct"},"6:4818:7018":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_fprog"],"kind":"struct"},"1:3424:9061":{"crate_id":1,"path":["std","io","IoSliceMut"],"kind":"struct"},"16:5553:6130":{"crate_id":16,"path":["gimli","read","addr","DebugAddr"],"kind":"struct"},"1:7647:4228":{"crate_id":1,"path":["std","thread","Thread"],"kind":"struct"},"16:6214:1866":{"crate_id":16,"path":["gimli","read","dwarf","Unit"],"kind":"struct"},"17:10499:8149":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSubsubsection"],"kind":"struct"},"1:4279:9149":{"crate_id":1,"path":["std","os","unix","net","listener","UnixListener"],"kind":"struct"},"22:982:3265":{"crate_id":22,"path":["proc_macro2","token_stream","IntoIter"],"kind":"struct"},"24:1883:3263":{"crate_id":24,"path":["syn","punctuated","PairsMut"],"kind":"struct"},"24:4085:3509":{"crate_id":24,"path":["syn","token","Minus"],"kind":"struct"},"17:9344:37326":{"crate_id":17,"path":["object","read","any","FileInternal"],"kind":"enum"},"17:12424:5557":{"crate_id":17,"path":["object","macho","LcStr"],"kind":"struct"},"2:2693:226":{"crate_id":2,"path":["core","marker","StructuralPartialEq"],"kind":"trait"},"24:5477:3253":{"crate_id":24,"path":["syn","ty","TypeReference"],"kind":"struct"},"24:4974:1844":{"crate_id":24,"path":["syn","generics","Generics"],"kind":"struct"},"1:4459:9152":{"crate_id":1,"path":["std","os","unix","process","ExitStatusExt"],"kind":"trait"},"21:433:4894":{"crate_id":21,"path":["proc_macro","bridge","scoped_cell","replace","PutBackOnDrop"],"kind":"struct"},"17:10339:21356":{"crate_id":17,"path":["object","read","elf","hash","GnuHashTable"],"kind":"struct"},"17:12346:5544":{"crate_id":17,"path":["object","macho","FatHeader"],"kind":"struct"},"6:4650:6945":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Shdr"],"kind":"struct"},"2:44492:195":{"crate_id":2,"path":["core","task","poll","Poll"],"kind":"enum"},"24:4341:3527":{"crate_id":24,"path":["syn","token","Shr"],"kind":"struct"},"17:12605:5584":{"crate_id":17,"path":["object","macho","SubUmbrellaCommand"],"kind":"struct"},"6:62:14816":{"crate_id":6,"path":["libc","unix","DIR"],"kind":"enum"},"5:779:4911":{"crate_id":5,"path":["alloc","collections","binary_heap","PeekMut"],"kind":"struct"},"1:8273:8002":{"crate_id":1,"path":["std","os","unix","ucred","UCred"],"kind":"struct"},"6:4374:6844":{"crate_id":6,"path":["libc","unix","linux_like","linux","fsid_t"],"kind":"struct"},"24:3194:3481":{"crate_id":24,"path":["syn","token","Super"],"kind":"struct"},"2:41563:7806":{"crate_id":2,"path":["core","net","socket_addr","SocketAddrV4"],"kind":"struct"},"6:6130:7335":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","sigset_t"],"kind":"struct"},"1:11123:8033":{"crate_id":1,"path":["std","sys","unix","time","inner","Instant"],"kind":"struct"},"1:5787:4988":{"crate_id":1,"path":["std","sync","lazy_lock","LazyLock"],"kind":"struct"},"17:11623:5385":{"crate_id":17,"path":["object","read","CompressedFileRange"],"kind":"struct"},"2:43424:14405":{"crate_id":2,"path":["core","slice","iter","ArrayChunksMut"],"kind":"struct"},"24:4508:3170":{"crate_id":24,"path":["syn","attr","MetaList"],"kind":"struct"},"5:7305:8897":{"crate_id":5,"path":["alloc","string","FromUtf16Error"],"kind":"struct"},"17:9655:21283":{"crate_id":17,"path":["object","read","any","SymbolIterator"],"kind":"struct"},"1:8979:29999":{"crate_id":1,"path":["std","sync","mpmc","list","Position"],"kind":"struct"},"24:885:37720":{"crate_id":24,"path":["syn","generics","TypeParams"],"kind":"struct"},"2:44281:8476":{"crate_id":2,"path":["core","str","CharEscapeDebugContinue"],"kind":"struct"},"2:42628:6324":{"crate_id":2,"path":["core","fmt","rt","Flag"],"kind":"enum"},"6:4879:1006":{"crate_id":6,"path":["libc","unix","linux_like","linux","option"],"kind":"struct"},"17:12377:5551":{"crate_id":17,"path":["object","macho","MachHeader32"],"kind":"struct"},"16:5382:5264":{"crate_id":16,"path":["gimli","endianity","LittleEndian"],"kind":"struct"},"5:1008:4908":{"crate_id":5,"path":["alloc","collections","binary_heap","drop","DropGuard"],"kind":"struct"},"5:7280:224":{"crate_id":5,"path":["alloc","string","String"],"kind":"struct"},"1:1985:184":{"crate_id":1,"path":["std","ffi","os_str","OsStr"],"kind":"struct"},"5:4941:4932":{"crate_id":5,"path":["alloc","rc","from_iter_exact","Guard"],"kind":"struct"},"2:44305:8482":{"crate_id":2,"path":["core","str","BytesIsNotEmpty"],"kind":"struct"},"6:6705:7426":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","pthread_attr_t"],"kind":"struct"},"9:177:8589":{"crate_id":9,"path":["miniz_oxide","inflate","stream","InflateState"],"kind":"struct"},"2:10837:14411":{"crate_id":2,"path":["core","slice","iter","GroupBy"],"kind":"struct"},"17:12186:5504":{"crate_id":17,"path":["object","elf","GnuHashHeader"],"kind":"struct"},"16:6763:8280":{"crate_id":16,"path":["gimli","read","line","IncompleteLineProgram"],"kind":"struct"},"16:5067:6185":{"crate_id":16,"path":["gimli","constants","DwMacro"],"kind":"struct"},"11:1121:8895":{"crate_id":11,"path":["hashbrown","map","OccupiedError"],"kind":"struct"},"2:2762:5120":{"crate_id":2,"path":["core","ops","arith","Mul"],"kind":"trait"},"6:119:14870":{"crate_id":6,"path":["libc","unix","FILE"],"kind":"enum"},"2:41455:9108":{"crate_id":2,"path":["core","net","ip_addr","Ipv6MulticastScope"],"kind":"enum"},"1:5462:9201":{"crate_id":1,"path":["std","process","Stdio"],"kind":"struct"},"20:10:3142":{"crate_id":20,"path":["quote","ext","TokenStreamExt"],"kind":"trait"},"22:512:3284":{"crate_id":22,"path":["proc_macro2","LexError"],"kind":"struct"},"6:7564:7543":{"crate_id":6,"path":["libc","unix","linux_like","linux","can_frame"],"kind":"struct"},"5:5062:4938":{"crate_id":5,"path":["alloc","rc","Weak"],"kind":"struct"},"16:8021:3169":{"crate_id":16,"path":["gimli","read","unit","Attribute"],"kind":"struct"},"16:8265:128":{"crate_id":16,"path":["gimli","read","Error"],"kind":"enum"},"24:4172:3515":{"crate_id":24,"path":["syn","token","OrOr"],"kind":"struct"},"16:6667:6227":{"crate_id":16,"path":["gimli","read","line","LineRow"],"kind":"struct"},"2:40443:3351":{"crate_id":2,"path":["core","iter","adapters","map","Map"],"kind":"struct"},"2:43437:8367":{"crate_id":2,"path":["core","slice","iter","RChunks"],"kind":"struct"},"1:1924:9027":{"crate_id":1,"path":["std","error","Indented"],"kind":"struct"},"2:40282:9042":{"crate_id":2,"path":["core","ffi","VaList"],"kind":"struct"},"5:4425:4934":{"crate_id":5,"path":["alloc","collections","vec_deque","truncate","Dropper"],"kind":"struct"},"1:10346:9203":{"crate_id":1,"path":["std","sys","unix","process","process_common","CommandArgs"],"kind":"struct"},"2:12568:107":{"crate_id":2,"path":["core","task","wake","Context"],"kind":"struct"},"6:6625:7401":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stat"],"kind":"struct"},"2:42644:71":{"crate_id":2,"path":["core","fmt","rt","Argument"],"kind":"struct"},"2:43608:8435":{"crate_id":2,"path":["core","str","iter","SplitTerminator"],"kind":"struct"},"21:2577:3435":{"crate_id":21,"path":["proc_macro","diagnostic","Level"],"kind":"enum"},"17:13862:5919":{"crate_id":17,"path":["object","pe","ImageThunkData32"],"kind":"struct"},"1:11970:13":{"crate_id":1,"path":["std","fn"],"kind":"primitive"},"17:13155:5350":{"crate_id":17,"path":["object","macho","Relocation"],"kind":"struct"},"16:5100:6186":{"crate_id":16,"path":["gimli","constants","DwRle"],"kind":"struct"},"2:41640:1884":{"crate_id":2,"path":["core","option","Item"],"kind":"struct"},"16:5398:5265":{"crate_id":16,"path":["gimli","endianity","BigEndian"],"kind":"struct"},"1:6505:8909":{"crate_id":1,"path":["std","sync","poison","PoisonError"],"kind":"struct"},"16:6540:6137":{"crate_id":16,"path":["gimli","read","line","DebugLine"],"kind":"struct"},"1:10980:5011":{"crate_id":1,"path":["std","sys","unix","process","process_inner","posix_spawn","PosixSpawnattr"],"kind":"struct"},"24:4353:3528":{"crate_id":24,"path":["syn","token","ShrEq"],"kind":"struct"},"2:21930:7569":{"crate_id":2,"path":["core","num","dec2flt","number","Number"],"kind":"struct"},"16:4868:6179":{"crate_id":16,"path":["gimli","constants","DwDsc"],"kind":"struct"},"1:1589:8331":{"crate_id":1,"path":["std","collections","hash","set","SymmetricDifference"],"kind":"struct"},"13:0:3007":{"crate_id":13,"path":["std_detect"],"kind":"module"},"17:13566:5853":{"crate_id":17,"path":["object","pe","ImageRomHeaders"],"kind":"struct"},"24:3024:3475":{"crate_id":24,"path":["syn","token","Mut"],"kind":"struct"},"2:39628:3424":{"crate_id":2,"path":["core","ascii","ascii_char","AsciiChar"],"kind":"enum"},"1:8938:8608":{"crate_id":1,"path":["std","sync","mpmc","array","ArrayToken"],"kind":"struct"},"20:504:4039":{"crate_id":20,"path":["quote","__private","IdentFragmentAdapter"],"kind":"struct"},"2:2311:188":{"crate_id":2,"path":["core","cmp","PartialEq"],"kind":"trait"},"5:7243:8349":{"crate_id":5,"path":["alloc","ffi","c_str","FromVecWithNulError"],"kind":"struct"},"17:9274:2797":{"crate_id":17,"path":["object","read","util","Bytes"],"kind":"struct"},"16:4785:6176":{"crate_id":16,"path":["gimli","constants","DwCc"],"kind":"struct"},"17:12333:5542":{"crate_id":17,"path":["object","macho","DyldSubCacheInfo"],"kind":"struct"},"2:4335:3398":{"crate_id":2,"path":["core","cell","Ref"],"kind":"struct"},"2:40037:8387":{"crate_id":2,"path":["core","async_iter","from_iter","FromIter"],"kind":"struct"},"2:2783:3294":{"crate_id":2,"path":["core","ops","arith","AddAssign"],"kind":"trait"},"6:1702:6765":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_un"],"kind":"struct"},"24:3398:247":{"crate_id":24,"path":["syn","token","Yield"],"kind":"struct"},"5:3734:8993":{"crate_id":5,"path":["alloc","collections","linked_list","CursorMut"],"kind":"struct"},"1:6211:4986":{"crate_id":1,"path":["std","sync","mpmc","Sender"],"kind":"struct"},"6:5074:7146":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_can_addr"],"kind":"union"},"1:4006:9124":{"crate_id":1,"path":["std","os","unix","fs","DirEntryExt"],"kind":"trait"},"2:4436:3402":{"crate_id":2,"path":["core","cell","SyncUnsafeCell"],"kind":"struct"},"17:14189:6025":{"crate_id":17,"path":["object","pe","ImageArmRuntimeFunctionEntry"],"kind":"struct"},"6:6744:7443":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user_regs_struct"],"kind":"struct"},"6:1536:6656":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_in6"],"kind":"struct"},"1:7690:8981":{"crate_id":1,"path":["std","backtrace","RawFrame"],"kind":"enum"},"2:40046:8388":{"crate_id":2,"path":["core","char","convert","ParseCharError"],"kind":"struct"},"6:4842:7028":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlmsgerr"],"kind":"struct"},"11:365:4903":{"crate_id":11,"path":["hashbrown","raw","RawDrain"],"kind":"struct"},"2:12396:34740":{"crate_id":2,"path":["core","future","join","MaybeDone"],"kind":"enum"},"5:3175:8330":{"crate_id":5,"path":["alloc","collections","btree","set","Difference"],"kind":"struct"},"2:41707:3745":{"crate_id":2,"path":["core","panic","panic_info","PanicInfo"],"kind":"struct"},"22:14:25338":{"crate_id":22,"path":["proc_macro2","marker","ProcMacroAutoTraits"],"kind":"struct"},"16:2781:6123":{"crate_id":16,"path":["gimli","common","DebugStrOffsetsBase"],"kind":"struct"},"1:10754:29773":{"crate_id":1,"path":["std","sys","unix","kernel_copy","SpliceMode"],"kind":"enum"},"17:12826:5635":{"crate_id":17,"path":["object","macho","TwolevelHintsCommand"],"kind":"struct"},"5:7013:4471":{"crate_id":5,"path":["alloc","alloc","Global"],"kind":"struct"},"2:9658:4966":{"crate_id":2,"path":["core","slice","sort","merge","MergeHole"],"kind":"struct"},"16:6438:8251":{"crate_id":16,"path":["gimli","read","aranges","ArangeEntry"],"kind":"struct"},"24:4184:3516":{"crate_id":24,"path":["syn","token","PathSep"],"kind":"struct"},"16:6886:6140":{"crate_id":16,"path":["gimli","read","loclists","DebugLocLists"],"kind":"struct"},"1:3315:9086":{"crate_id":1,"path":["std","io","stdio","IsTerminal"],"kind":"trait"},"16:2373:6106":{"crate_id":16,"path":["gimli","common","DebugAbbrevOffset"],"kind":"struct"},"2:46169:7864":{"crate_id":2,"path":["core","core_arch","simd","i32x4"],"kind":"struct"},"17:12566:5580":{"crate_id":17,"path":["object","macho","DylibCommand"],"kind":"struct"},"18:624:37333":{"crate_id":18,"path":["memchr","memmem","twoway","SuffixOrdering"],"kind":"enum"},"17:12851:5638":{"crate_id":17,"path":["object","macho","PrebindCksumCommand"],"kind":"struct"},"1:1080:8895":{"crate_id":1,"path":["std","collections","hash","map","OccupiedError"],"kind":"struct"},"2:2700:228":{"crate_id":2,"path":["core","marker","Sync"],"kind":"trait"},"17:9913:21308":{"crate_id":17,"path":["object","read","coff","section","CoffSegmentIterator"],"kind":"struct"},"6:4469:6887":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_trigger"],"kind":"struct"},"2:32099:6481":{"crate_id":2,"path":["core","convert","Infallible"],"kind":"enum"},"1:1071:8991":{"crate_id":1,"path":["std","collections","hash","map","VacantEntry"],"kind":"struct"},"17:12174:5501":{"crate_id":17,"path":["object","elf","HashHeader"],"kind":"struct"},"6:6008:7305":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ptrace_peeksiginfo_args"],"kind":"struct"},"24:4382:3530":{"crate_id":24,"path":["syn","token","SlashEq"],"kind":"struct"},"18:0:3018":{"crate_id":18,"path":["memchr"],"kind":"module"},"18:681:8125":{"crate_id":18,"path":["memchr","memmem","Finder"],"kind":"struct"},"2:21914:8372":{"crate_id":2,"path":["core","num","dec2flt","decimal","Decimal"],"kind":"struct"},"24:2956:2208":{"crate_id":24,"path":["syn","token","Macro"],"kind":"struct"},"22:678:3385":{"crate_id":22,"path":["proc_macro2","parse","Cursor"],"kind":"struct"},"17:11220:21461":{"crate_id":17,"path":["object","read","pe","resource","ResourceDirectoryEntryData"],"kind":"enum"},"5:2032:3385":{"crate_id":5,"path":["alloc","collections","btree","map","Cursor"],"kind":"struct"},"2:22027:33137":{"crate_id":2,"path":["core","num","flt2dec","Sign"],"kind":"enum"},"2:30351:4302":{"crate_id":2,"path":["core","mem","transmutability","Assume"],"kind":"struct"},"2:40524:3340":{"crate_id":2,"path":["core","iter","adapters","step_by","StepBy"],"kind":"struct"},"5:3719:3385":{"crate_id":5,"path":["alloc","collections","linked_list","Cursor"],"kind":"struct"},"17:13771:5899":{"crate_id":17,"path":["object","pe","ImageAuxSymbolCrc"],"kind":"struct"},"2:12671:4470":{"crate_id":2,"path":["core","alloc","Allocator"],"kind":"trait"},"17:9866:21301":{"crate_id":17,"path":["object","read","archive","ArchiveMember"],"kind":"struct"},"17:12769:5623":{"crate_id":17,"path":["object","macho","DylibModule32"],"kind":"struct"},"2:43345:8364":{"crate_id":2,"path":["core","slice","iter","Chunks"],"kind":"struct"},"21:140:4590":{"crate_id":21,"path":["proc_macro","bridge","client","Client"],"kind":"struct"},"1:7829:7957":{"crate_id":1,"path":["std","fs","FileTimes"],"kind":"struct"},"24:53:1912":{"crate_id":24,"path":["syn","token"],"kind":"module"},"2:40903:3320":{"crate_id":2,"path":["core","iter","sources","repeat_n","RepeatN"],"kind":"struct"},"2:20897:9276":{"crate_id":2,"path":["core","core_simd","elements","float","SimdFloat"],"kind":"trait"},"16:8138:21218":{"crate_id":16,"path":["gimli","read","unit","EntriesTreeIter"],"kind":"struct"},"20:148:3767":{"crate_id":20,"path":["quote","__private","HasIterator"],"kind":"struct"},"2:7698:35649":{"crate_id":2,"path":["core","net","display_buffer","DisplayBuffer"],"kind":"struct"},"2:11738:3290":{"crate_id":2,"path":["core","str","traits","FromStr"],"kind":"trait"},"24:4225:3519":{"crate_id":24,"path":["syn","token","Plus"],"kind":"struct"},"24:4490:2033":{"crate_id":24,"path":["syn","attr","Meta"],"kind":"enum"},"2:20941:9277":{"crate_id":2,"path":["core","core_simd","elements","int","SimdInt"],"kind":"trait"},"6:7511:7532":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_rwlockattr_t"],"kind":"struct"},"16:6303:6129":{"crate_id":16,"path":["gimli","read","abbrev","DebugAbbrev"],"kind":"struct"},"6:6077:7324":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","utmpx"],"kind":"struct"},"6:1500:6640":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreq"],"kind":"struct"},"2:39441:34322":{"crate_id":2,"path":["core","any","tags","MaybeSizedValue"],"kind":"struct"},"2:44010:8460":{"crate_id":2,"path":["core","str","pattern","CharArrayRefSearcher"],"kind":"struct"},"17:12691:5596":{"crate_id":17,"path":["object","macho","RoutinesCommand64"],"kind":"struct"},"5:1773:4554":{"crate_id":5,"path":["alloc","collections","btree","map","ExtractIf"],"kind":"struct"},"16:2443:6109":{"crate_id":16,"path":["gimli","common","DebugArangesOffset"],"kind":"struct"},"24:2939:3472":{"crate_id":24,"path":["syn","token","Loop"],"kind":"struct"},"5:5684:232":{"crate_id":5,"path":["alloc","string","ToString"],"kind":"trait"},"24:5347:3240":{"crate_id":24,"path":["syn","restriction","Visibility"],"kind":"enum"},"16:4032:6163":{"crate_id":16,"path":["gimli","constants","DwTag"],"kind":"struct"},"2:5531:3348":{"crate_id":2,"path":["core","iter","adapters","flatten","FlatMap"],"kind":"struct"},"17:11199:5353":{"crate_id":17,"path":["object","read","pe","resource","ResourceDirectory"],"kind":"struct"},"22:876:233":{"crate_id":22,"path":["proc_macro2","TokenStream"],"kind":"struct"},"6:5836:7210":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","termios"],"kind":"struct"},"24:2701:3461":{"crate_id":24,"path":["syn","token","Crate"],"kind":"struct"},"5:7084:198":{"crate_id":5,"path":["alloc","collections","btree","set","Range"],"kind":"struct"},"24:901:37716":{"crate_id":24,"path":["syn","generics","ConstParams"],"kind":"struct"},"2:43544:2797":{"crate_id":2,"path":["core","str","iter","Bytes"],"kind":"struct"},"2:3162:14459":{"crate_id":2,"path":["core","ops","try_trait","Residual"],"kind":"trait"},"2:40514:3356":{"crate_id":2,"path":["core","iter","adapters","skip_while","SkipWhile"],"kind":"struct"},"17:10609:21424":{"crate_id":17,"path":["object","read","macho","file","MachOComdat"],"kind":"struct"},"17:14015:5960":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation32V2"],"kind":"struct"},"24:4841:3201":{"crate_id":24,"path":["syn","expr","ExprIndex"],"kind":"struct"},"24:3007:3474":{"crate_id":24,"path":["syn","token","Move"],"kind":"struct"},"1:4199:9148":{"crate_id":1,"path":["std","os","unix","net","datagram","UnixDatagram"],"kind":"struct"},"6:5818:7198":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","msghdr"],"kind":"struct"},"17:12365:5549":{"crate_id":17,"path":["object","macho","FatArch64"],"kind":"struct"},"2:10119:8361":{"crate_id":2,"path":["core","slice","iter","SplitInclusive"],"kind":"struct"},"17:14102:6009":{"crate_id":17,"path":["object","pe","ImageLoadConfigDirectory64"],"kind":"struct"},"1:1577:8329":{"crate_id":1,"path":["std","collections","hash","set","Intersection"],"kind":"struct"},"11:2186:37241":{"crate_id":11,"path":["hashbrown","raw","Fallibility"],"kind":"enum"},"1:11946:1523":{"crate_id":1,"path":["std","unit"],"kind":"primitive"},"1:7812:4769":{"crate_id":1,"path":["std","fs","Metadata"],"kind":"struct"},"1:8418:7819":{"crate_id":1,"path":["std","path","State"],"kind":"enum"},"11:399:37243":{"crate_id":11,"path":["hashbrown","raw","RawIterHash"],"kind":"struct"},"24:5026:3221":{"crate_id":24,"path":["syn","generics","BoundLifetimes"],"kind":"struct"},"24:1089:1913":{"crate_id":24,"path":["syn","lifetime","Lifetime"],"kind":"function"},"24:1133:8083":{"crate_id":24,"path":["syn","lit","LitRepr"],"kind":"struct"},"2:4389:3400":{"crate_id":2,"path":["core","cell","RefMut"],"kind":"struct"},"24:2735:3462":{"crate_id":24,"path":["syn","token","Do"],"kind":"struct"},"16:8125:21217":{"crate_id":16,"path":["gimli","read","unit","EntriesTreeNode"],"kind":"struct"},"18:564:5154":{"crate_id":18,"path":["memchr","memmem","rarebytes","RareNeedleBytes"],"kind":"struct"},"22:779:25307":{"crate_id":22,"path":["proc_macro2","extra","DelimSpanEnum"],"kind":"enum"},"24:3364:3487":{"crate_id":24,"path":["syn","token","Where"],"kind":"struct"},"16:6986:6253":{"crate_id":16,"path":["gimli","read","loclists","LocationListEntry"],"kind":"struct"},"2:20988:4491":{"crate_id":2,"path":["core","core_simd","elements","mut_ptr","SimdMutPtr","from_exposed_addr"],"kind":"foreign_type"},"24:4213:3518":{"crate_id":24,"path":["syn","token","PercentEq"],"kind":"struct"},"17:10313:21380":{"crate_id":17,"path":["object","read","elf","note","GnuPropertyIterator"],"kind":"struct"},"2:41484:1904":{"crate_id":2,"path":["core","net","ip_addr","fmt","Span"],"kind":"struct"},"5:7168:3304":{"crate_id":5,"path":["alloc","collections","TryReserveError"],"kind":"struct"},"2:21563:34109":{"crate_id":2,"path":["core","core_simd","vector","splat","Splat"],"kind":"struct"},"1:7701:8489":{"crate_id":1,"path":["std","collections","hash","map","DefaultHasher"],"kind":"struct"},"2:45592:7838":{"crate_id":2,"path":["core","core_arch","simd","u8x4"],"kind":"struct"},"24:2786:1849":{"crate_id":24,"path":["syn","token","Enum"],"kind":"struct"},"2:46093:7862":{"crate_id":2,"path":["core","core_arch","simd","i8x16"],"kind":"struct"},"16:7484:8302":{"crate_id":16,"path":["gimli","read","pubnames","PubNamesEntryIter"],"kind":"struct"},"15:306:20293":{"crate_id":15,"path":["addr2line","LocationRangeUnitIter"],"kind":"struct"},"17:13435:5804":{"crate_id":17,"path":["object","pe","ImageFileHeader"],"kind":"struct"},"16:7099:8029":{"crate_id":16,"path":["gimli","read","op","Operation"],"kind":"enum"},"6:5080:7149":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_can"],"kind":"struct"},"2:10231:8362":{"crate_id":2,"path":["core","slice","iter","RSplit"],"kind":"struct"},"24:88:1889":{"crate_id":24,"path":["syn","token","Token"],"kind":"trait"},"24:4537:3183":{"crate_id":24,"path":["syn","data","FieldsNamed"],"kind":"struct"},"2:46261:7868":{"crate_id":2,"path":["core","core_arch","simd","f64x4"],"kind":"struct"},"17:11905:5442":{"crate_id":17,"path":["object","elf","Sym32"],"kind":"struct"},"2:46237:7867":{"crate_id":2,"path":["core","core_arch","simd","f64x2"],"kind":"struct"},"6:541:6605":{"crate_id":6,"path":["libc","unix","iovec"],"kind":"struct"},"6:6036:7313":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ptrace_syscall_info"],"kind":"struct"},"2:41946:88":{"crate_id":2,"path":["core","sync","atomic","AtomicU16"],"kind":"struct"},"5:1254:8298":{"crate_id":5,"path":["alloc","collections","btree","map","entry","Entry"],"kind":"enum"},"5:4845:204":{"crate_id":5,"path":["alloc","rc","Rc"],"kind":"struct"},"2:41866:91":{"crate_id":2,"path":["core","sync","atomic","AtomicU8"],"kind":"struct"},"21:1062:1904":{"crate_id":21,"path":["proc_macro","bridge","client","Span"],"kind":"struct"},"2:40197:8398":{"crate_id":2,"path":["core","ffi","c_str","FromBytesWithNulError"],"kind":"struct"},"5:1135:37072":{"crate_id":5,"path":["alloc","collections","btree","dedup_sorted_iter","DedupSortedIter"],"kind":"struct"},"2:40432:3360":{"crate_id":2,"path":["core","iter","adapters","intersperse","Intersperse"],"kind":"struct"},"16:3042:20339":{"crate_id":16,"path":["gimli","common","DwarfFileType"],"kind":"enum"},"9:52:8578":{"crate_id":9,"path":["miniz_oxide","inflate","core","DecompressorOxide"],"kind":"struct"},"24:1761:1830":{"crate_id":24,"path":["syn","punctuated","Punctuated"],"kind":"struct"},"21:2630:233":{"crate_id":21,"path":["proc_macro","TokenStream"],"kind":"struct"},"18:766:25297":{"crate_id":18,"path":["memchr","memmem","SearcherRevKind"],"kind":"enum"},"2:45863:7849":{"crate_id":2,"path":["core","core_arch","simd","i64x1"],"kind":"struct"},"2:2588:116":{"crate_id":2,"path":["core","default","Default"],"kind":"trait"},"1:8761:9203":{"crate_id":1,"path":["std","process","CommandArgs"],"kind":"struct"},"1:8500:8496":{"crate_id":1,"path":["std","path","Components"],"kind":"struct"},"2:44565:8487":{"crate_id":2,"path":["core","alloc","layout","LayoutError"],"kind":"struct"},"17:9188:5270":{"crate_id":17,"path":["object","endian","I32Bytes"],"kind":"struct"},"24:5178:3233":{"crate_id":24,"path":["syn","mac","MacroDelimiter"],"kind":"enum"},"1:8078:9060":{"crate_id":1,"path":["std","io","readbuf","BorrowedCursor"],"kind":"struct"},"1:1565:3265":{"crate_id":1,"path":["std","collections","hash","set","IntoIter"],"kind":"struct"},"6:4483:6895":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_constant_effect"],"kind":"struct"},"1:8191:9111":{"crate_id":1,"path":["std","net","tcp","Incoming"],"kind":"struct"},"22:720:1904":{"crate_id":22,"path":["proc_macro2","fallback","Span"],"kind":"struct"},"5:7022:3265":{"crate_id":5,"path":["alloc","collections","binary_heap","IntoIter"],"kind":"struct"},"21:2426:1905":{"crate_id":21,"path":["proc_macro","bridge","TokenTree"],"kind":"enum"},"2:40145:8393":{"crate_id":2,"path":["core","char","ToLowercase"],"kind":"struct"},"2:39413:14508":{"crate_id":2,"path":["core","ops","try_trait","Yeet"],"kind":"struct"},"2:41716:4480":{"crate_id":2,"path":["core","panicking","AssertKind"],"kind":"enum"},"1:4706:9136":{"crate_id":1,"path":["std","os","fd","raw","IntoRawFd"],"kind":"trait"},"1:5202:190":{"crate_id":1,"path":["std","path","Path"],"kind":"struct"},"16:7515:8304":{"crate_id":16,"path":["gimli","read","pubtypes","PubTypesEntryIter"],"kind":"struct"},"6:7278:7518":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","align","clone_args"],"kind":"struct"},"17:9083:5267":{"crate_id":17,"path":["object","endian","U32Bytes"],"kind":"struct"},"24:4365:3529":{"crate_id":24,"path":["syn","token","Slash"],"kind":"struct"},"17:10969:21458":{"crate_id":17,"path":["object","read","pe","file","PeComdatSectionIterator"],"kind":"struct"},"1:11493:30004":{"crate_id":1,"path":["std","panicking","panic_count","MustAbort"],"kind":"enum"},"1:6156:8611":{"crate_id":1,"path":["std","sync","mpmc","zero","ZeroToken"],"kind":"struct"},"16:3220:6154":{"crate_id":16,"path":["gimli","arch","AArch64"],"kind":"struct"},"1:867:3265":{"crate_id":1,"path":["std","collections","hash","map","IntoIter"],"kind":"struct"},"16:2857:6126":{"crate_id":16,"path":["gimli","common","DebugTypeSignature"],"kind":"struct"},"1:8856:8025":{"crate_id":1,"path":["std","sync","mpsc","RecvError"],"kind":"struct"},"2:40391:3347":{"crate_id":2,"path":["core","iter","adapters","filter_map","FilterMap"],"kind":"struct"},"2:45823:7847":{"crate_id":2,"path":["core","core_arch","simd","i16x4"],"kind":"struct"},"17:13707:5879":{"crate_id":17,"path":["object","pe","ImageAuxSymbolTokenDef"],"kind":"struct"},"11:749:4556":{"crate_id":11,"path":["hashbrown","map","Drain"],"kind":"struct"},"1:9129:29983":{"crate_id":1,"path":["std","sys","common","thread_local","fast_local","Key"],"kind":"struct"},"2:10269:14415":{"crate_id":2,"path":["core","slice","iter","RSplitMut"],"kind":"struct"},"2:2743:1862":{"crate_id":2,"path":["core","marker","Tuple"],"kind":"trait"},"5:6389:3265":{"crate_id":5,"path":["alloc","vec","into_iter","IntoIter"],"kind":"struct"},"1:11275:8518":{"crate_id":1,"path":["std","sys_common","wtf8","EncodeWide"],"kind":"struct"},"17:14044:5967":{"crate_id":17,"path":["object","pe","ImageEpilogueDynamicRelocationHeader"],"kind":"struct"},"17:14329:6065":{"crate_id":17,"path":["object","pe","ImageDebugMisc"],"kind":"struct"},"2:10352:14416":{"crate_id":2,"path":["core","slice","iter","RSplitNMut"],"kind":"struct"},"2:40423:3350":{"crate_id":2,"path":["core","iter","adapters","inspect","Inspect"],"kind":"struct"},"17:13719:5882":{"crate_id":17,"path":["object","pe","ImageAuxSymbolFunction"],"kind":"struct"},"2:43822:8447":{"crate_id":2,"path":["core","str","iter","LinesAny"],"kind":"struct"},"16:7445:21211":{"crate_id":16,"path":["gimli","read","op","Evaluation"],"kind":"struct"},"1:8458:9191":{"crate_id":1,"path":["std","path","Component"],"kind":"enum"},"1:11962:1507":{"crate_id":1,"path":["std","u8"],"kind":"primitive"},"1:7968:8612":{"crate_id":1,"path":["std","io","error","Custom"],"kind":"struct"},"2:46647:7891":{"crate_id":2,"path":["core","core_arch","simd","u64x4"],"kind":"struct"},"11:798:8985":{"crate_id":11,"path":["hashbrown","map","RawEntryBuilderMut"],"kind":"struct"},"2:20974:9272":{"crate_id":2,"path":["core","core_simd","elements","mut_ptr","SimdMutPtr"],"kind":"trait"},"6:4550:6928":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_abs_setup"],"kind":"struct"},"1:3406:8000":{"crate_id":1,"path":["std","io","Read"],"kind":"trait"},"1:8291:9179":{"crate_id":1,"path":["std","os","linux","process","PidFd"],"kind":"struct"},"1:7626:4231":{"crate_id":1,"path":["std","thread","ThreadId"],"kind":"struct"},"1:6032:4989":{"crate_id":1,"path":["std","sync","mpmc","list","Channel"],"kind":"struct"},"18:531:8122":{"crate_id":18,"path":["memchr","memmem","prefilter","PrefilterState"],"kind":"struct"},"24:4916:3218":{"crate_id":24,"path":["syn","expr","ExprUnsafe"],"kind":"struct"},"1:7488:1917":{"crate_id":1,"path":["std","backtrace_rs","symbolize","Symbol"],"kind":"struct"},"2:7661:3328":{"crate_id":2,"path":["core","iter","traits","marker","TrustedStep"],"kind":"trait"},"6:6607:7392":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","siginfo_t"],"kind":"struct"},"1:7877:26946":{"crate_id":1,"path":["std","io","buffered","linewritershim","LineWriterShim"],"kind":"struct"},"17:10377:8139":{"crate_id":17,"path":["object","read","elf","version","VersionTable"],"kind":"struct"},"24:3824:3492":{"crate_id":24,"path":["syn","token","At"],"kind":"struct"},"9:450:20185":{"crate_id":9,"path":["miniz_oxide","MZError"],"kind":"enum"},"5:7180:3305":{"crate_id":5,"path":["alloc","collections","TryReserveErrorKind"],"kind":"enum"},"24:4196:3517":{"crate_id":24,"path":["syn","token","Percent"],"kind":"struct"},"2:45900:7851":{"crate_id":2,"path":["core","core_arch","simd","f64x1"],"kind":"struct"},"11:332:4901":{"crate_id":11,"path":["hashbrown","raw","RawIntoIter"],"kind":"struct"},"24:2548:3456":{"crate_id":24,"path":["syn","token","As"],"kind":"struct"},"17:10013:5287":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbol"],"kind":"struct"},"2:41733:210":{"crate_id":2,"path":["core","result","Result"],"kind":"enum"},"6:4781:7002":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_tp"],"kind":"struct"},"10:44:6485":{"crate_id":10,"path":["adler","Adler32"],"kind":"struct"},"16:6713:8267":{"crate_id":16,"path":["gimli","read","line","LineSequence"],"kind":"struct"},"16:6057:20311":{"crate_id":16,"path":["gimli","read","cfi","CallFrameInstruction"],"kind":"enum"},"20:37:2887":{"crate_id":20,"path":["quote","format_ident"],"kind":"macro"},"2:43680:8439":{"crate_id":2,"path":["core","str","iter","RSplitN"],"kind":"struct"},"17:13757:5896":{"crate_id":17,"path":["object","pe","ImageAuxSymbolSection"],"kind":"struct"},"6:653:15226":{"crate_id":6,"path":["libc","unix","linux_like","timezone"],"kind":"enum"},"24:3800:3490":{"crate_id":24,"path":["syn","token","AndAnd"],"kind":"struct"},"6:5015:7118":{"crate_id":6,"path":["libc","unix","linux_like","linux","mq_attr"],"kind":"struct"},"2:40465:3352":{"crate_id":2,"path":["core","iter","adapters","peekable","Peekable"],"kind":"struct"},"1:4119:9144":{"crate_id":1,"path":["std","os","unix","net","ancillary","ScmRights"],"kind":"struct"},"1:2364:9050":{"crate_id":1,"path":["std","fs","read_link"],"kind":"function"},"22:799:8114":{"crate_id":22,"path":["proc_macro2","imp","DeferredTokenStream"],"kind":"struct"},"11:1103:20265":{"crate_id":11,"path":["hashbrown","map","VacantEntryRef"],"kind":"struct"},"1:3155:26945":{"crate_id":1,"path":["std","io","stdio","StdoutRaw"],"kind":"struct"},"8:0:3009":{"crate_id":8,"path":["cfg_if"],"kind":"module"},"2:1746:7562":{"crate_id":2,"path":["core","ptr","metadata","PtrComponents"],"kind":"struct"},"2:40344:3335":{"crate_id":2,"path":["core","iter","adapters","cloned","Cloned"],"kind":"struct"},"2:44590:8488":{"crate_id":2,"path":["core","escape","EscapeIterInner"],"kind":"struct"},"6:4328:6810":{"crate_id":6,"path":["libc","unix","linux_like","linux","dqblk"],"kind":"struct"},"2:40209:33153":{"crate_id":2,"path":["core","ffi","c_str","FromBytesWithNulErrorKind"],"kind":"enum"},"17:12035:5467":{"crate_id":17,"path":["object","elf","ProgramHeader64"],"kind":"struct"},"1:9013:29017":{"crate_id":1,"path":["std","sync","mpmc","select","Selected"],"kind":"enum"},"17:10051:21304":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdat"],"kind":"struct"},"6:4929:7079":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_nxtinfo"],"kind":"struct"},"24:2531:3455":{"crate_id":24,"path":["syn","token","Abstract"],"kind":"struct"},"16:7592:21213":{"crate_id":16,"path":["gimli","read","rnglists","RawRngListEntry"],"kind":"enum"},"7:0:1551":{"crate_id":7,"path":["unwind"],"kind":"module"},"6:4436:6873":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_absinfo"],"kind":"struct"},"17:11241:21462":{"crate_id":17,"path":["object","read","pe","resource","ResourceNameOrId"],"kind":"enum"},"16:5028:6184":{"crate_id":16,"path":["gimli","constants","DwLnct"],"kind":"struct"},"16:4441:6166":{"crate_id":16,"path":["gimli","constants","DwAte"],"kind":"struct"},"2:21792:8370":{"crate_id":2,"path":["core","num","bignum","Big32x40"],"kind":"struct"},"2:43866:3423":{"crate_id":2,"path":["core","str","iter","EscapeDefault"],"kind":"struct"},"6:5025:7123":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_ifr_ifru"],"kind":"union"},"1:5270:120":{"crate_id":1,"path":["std","path","Display"],"kind":"struct"},"13:226:6477":{"crate_id":13,"path":["std_detect","detect","cache","Initializer"],"kind":"struct"},"5:3235:1873":{"crate_id":5,"path":["alloc","collections","btree","set","Union"],"kind":"struct"},"17:12457:5565":{"crate_id":17,"path":["object","macho","SegmentCommand64"],"kind":"struct"},"2:46807:7893":{"crate_id":2,"path":["core","core_arch","simd","i16x16"],"kind":"struct"},"1:6259:206":{"crate_id":1,"path":["std","sync","mpmc","Receiver"],"kind":"struct"},"14:160:8889":{"crate_id":14,"path":["rustc_demangle","Demangle"],"kind":"struct"},"6:4938:7085":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_prinfo"],"kind":"struct"},"6:5737:7153":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","statx"],"kind":"struct"},"9:393:20186":{"crate_id":9,"path":["miniz_oxide","MZFlush"],"kind":"enum"},"16:4996:6183":{"crate_id":16,"path":["gimli","constants","DwLne"],"kind":"struct"},"17:12133:5490":{"crate_id":17,"path":["object","elf","Vernaux"],"kind":"struct"},"1:6392:3314":{"crate_id":1,"path":["std","sync","once","Once"],"kind":"struct"},"16:2399:6107":{"crate_id":16,"path":["gimli","common","DebugAddrBase"],"kind":"struct"},"24:5466:3251":{"crate_id":24,"path":["syn","ty","TypeParen"],"kind":"struct"},"18:707:8131":{"crate_id":18,"path":["memchr","memmem","Searcher"],"kind":"struct"},"24:3330:3485":{"crate_id":24,"path":["syn","token","Use"],"kind":"struct"},"16:7553:6295":{"crate_id":16,"path":["gimli","read","rnglists","RangeLists"],"kind":"struct"},"2:40865:3312":{"crate_id":2,"path":["core","iter","sources","from_fn","FromFn"],"kind":"struct"},"2:8315:3748":{"crate_id":2,"path":["core","panic","unwind_safe","UnwindSafe"],"kind":"trait"},"2:42900:8424":{"crate_id":2,"path":["core","hash","sip","Sip13Rounds"],"kind":"struct"},"24:94:4184":{"crate_id":24,"path":["syn","token","private","WithSpan"],"kind":"struct"},"5:6786:4952":{"crate_id":5,"path":["alloc","vec","dedup_by","FillGapOnDrop"],"kind":"struct"},"17:9990:5285":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbolTable"],"kind":"struct"},"1:3638:9109":{"crate_id":1,"path":["std","net","socket_addr","ToSocketAddrs"],"kind":"trait"},"17:14163:6016":{"crate_id":17,"path":["object","pe","ImageHotPatchBase"],"kind":"struct"},"24:5144:3230":{"crate_id":24,"path":["syn","lit","LitFloat"],"kind":"struct"},"2:2244:98":{"crate_id":2,"path":["core","borrow","BorrowMut"],"kind":"trait"},"17:12727:5602":{"crate_id":17,"path":["object","macho","DysymtabCommand"],"kind":"struct"},"17:10981:21435":{"crate_id":17,"path":["object","read","pe","section","PeSegmentIterator"],"kind":"struct"},"2:4380:3399":{"crate_id":2,"path":["core","cell","BorrowRefMut"],"kind":"struct"},"17:10361:5298":{"crate_id":17,"path":["object","read","elf","version","Version"],"kind":"struct"},"5:673:231":{"crate_id":5,"path":["alloc","borrow","ToOwned"],"kind":"trait"},"6:5829:7206":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","cmsghdr"],"kind":"struct"},"1:959:8989":{"crate_id":1,"path":["std","collections","hash","map","RawEntryBuilder"],"kind":"struct"},"16:7012:8291":{"crate_id":16,"path":["gimli","read","lookup","DebugLookup"],"kind":"struct"},"17:8771:21272":{"crate_id":17,"path":["object","common","SymbolScope"],"kind":"enum"},"17:13620:5863":{"crate_id":17,"path":["object","pe","AnonObjectHeaderBigobj"],"kind":"struct"},"24:3160:2558":{"crate_id":24,"path":["syn","token","Static"],"kind":"struct"},"1:361:4240":{"crate_id":1,"path":["std","thread","scoped","ScopedJoinHandle"],"kind":"struct"},"11:1538:20268":{"crate_id":11,"path":["hashbrown","rustc_entry","RustcVacantEntry"],"kind":"struct"},"5:5874:14790":{"crate_id":5,"path":["alloc","sync","ArcInner"],"kind":"struct"},"24:1140:8087":{"crate_id":24,"path":["syn","lit","LitFloatRepr"],"kind":"struct"},"17:12552:5307":{"crate_id":17,"path":["object","macho","Dylib"],"kind":"struct"},"2:21236:9273":{"crate_id":2,"path":["core","core_simd","masks","MaskElement"],"kind":"trait"},"21:2503:3434":{"crate_id":21,"path":["proc_macro","bridge","Diagnostic"],"kind":"struct"},"24:2081:2448":{"crate_id":24,"path":["syn","punctuated","Pair"],"kind":"enum"},"5:6600:4560":{"crate_id":5,"path":["alloc","vec","set_len_on_drop","SetLenOnDrop"],"kind":"struct"},"2:21966:33139":{"crate_id":2,"path":["core","num","dec2flt","FloatErrorKind"],"kind":"enum"},"1:1785:9000":{"crate_id":1,"path":["std","env","VarsOs"],"kind":"struct"},"3:0:442":{"crate_id":3,"path":["compiler_builtins"],"kind":"module"},"24:2922:3471":{"crate_id":24,"path":["syn","token","Let"],"kind":"struct"},"2:43812:8446":{"crate_id":2,"path":["core","str","iter","Lines"],"kind":"struct"},"17:11127:5378":{"crate_id":17,"path":["object","read","pe","import","Import"],"kind":"enum"},"24:4850:3203":{"crate_id":24,"path":["syn","expr","ExprLet"],"kind":"struct"},"6:4428:6870":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_id"],"kind":"struct"},"1:8197:9110":{"crate_id":1,"path":["std","net","tcp","IntoIncoming"],"kind":"struct"},"6:474:1826":{"crate_id":6,"path":["libc","unix","group"],"kind":"struct"},"24:93:9064":{"crate_id":24,"path":["syn","token","private","Sealed"],"kind":"trait"},"2:47665:7933":{"crate_id":2,"path":["core","core_arch","simd","u32x16"],"kind":"struct"},"2:22651:172":{"crate_id":2,"path":["core","num","nonzero","NonZeroI64"],"kind":"struct"},"17:3519:21408":{"crate_id":17,"path":["object","read","macho","relocation","MachORelocationIterator"],"kind":"struct"},"24:4794:3190":{"crate_id":24,"path":["syn","expr","ExprBlock"],"kind":"struct"},"24:1954:3266":{"crate_id":24,"path":["syn","punctuated","Iter"],"kind":"struct"},"17:11098:8157":{"crate_id":17,"path":["object","read","pe","import","ImportTable"],"kind":"struct"},"2:22387:175":{"crate_id":2,"path":["core","num","nonzero","NonZeroU16"],"kind":"struct"},"1:8246:8495":{"crate_id":1,"path":["std","os","unix","net","ancillary","SocketCred"],"kind":"struct"},"16:3058:5174":{"crate_id":16,"path":["gimli","arch","Arm"],"kind":"struct"},"16:6332:8244":{"crate_id":16,"path":["gimli","read","abbrev","Abbreviation"],"kind":"struct"},"24:5472:3252":{"crate_id":24,"path":["syn","ty","TypePtr"],"kind":"struct"},"17:11084:8153":{"crate_id":17,"path":["object","read","pe","export","ExportTable"],"kind":"struct"},"17:9806:21298":{"crate_id":17,"path":["object","read","archive","Members"],"kind":"enum"},"14:165:20273":{"crate_id":14,"path":["rustc_demangle","DemangleStyle"],"kind":"enum"},"2:9183:132":{"crate_id":2,"path":["core","fmt","Formatter"],"kind":"struct"},"1:4662:9178":{"crate_id":1,"path":["std","os","linux","process","ChildExt"],"kind":"trait"}},"external_crates":{"23":{"name":"unicode_ident","html_root_url":"https://docs.rs/unicode-ident/1.0.10/"},"20":{"name":"quote","html_root_url":"https://docs.rs/quote/1.0.29/"},"17":{"name":"object","html_root_url":"https://doc.rust-lang.org/nightly/"},"14":{"name":"rustc_demangle","html_root_url":"https://doc.rust-lang.org/nightly/"},"11":{"name":"hashbrown","html_root_url":"https://doc.rust-lang.org/nightly/"},"8":{"name":"cfg_if","html_root_url":"https://docs.rs/cfg-if/"},"5":{"name":"alloc","html_root_url":"https://doc.rust-lang.org/nightly/"},"2":{"name":"core","html_root_url":"https://doc.rust-lang.org/nightly/"},"22":{"name":"proc_macro2","html_root_url":"https://docs.rs/proc-macro2/1.0.63/"},"19":{"name":"panic_unwind","html_root_url":"https://doc.rust-lang.org/nightly/"},"16":{"name":"gimli","html_root_url":"https://doc.rust-lang.org/nightly/"},"13":{"name":"std_detect","html_root_url":"https://doc.rust-lang.org/nightly/"},"10":{"name":"adler","html_root_url":"https://docs.rs/adler/1.0.2/"},"7":{"name":"unwind","html_root_url":"https://doc.rust-lang.org/nightly/"},"4":{"name":"rustc_std_workspace_core","html_root_url":"https://doc.rust-lang.org/nightly/"},"1":{"name":"std","html_root_url":"https://doc.rust-lang.org/nightly/"},"24":{"name":"syn","html_root_url":"https://docs.rs/syn/2.0.23/"},"21":{"name":"proc_macro","html_root_url":"https://doc.rust-lang.org/nightly/"},"18":{"name":"memchr","html_root_url":"https://doc.rust-lang.org/nightly/"},"15":{"name":"addr2line","html_root_url":"https://doc.rust-lang.org/nightly/"},"12":{"name":"rustc_std_workspace_alloc","html_root_url":"https://doc.rust-lang.org/nightly/"},"9":{"name":"miniz_oxide","html_root_url":"https://doc.rust-lang.org/nightly/"},"6":{"name":"libc","html_root_url":"https://doc.rust-lang.org/nightly/"},"3":{"name":"compiler_builtins","html_root_url":"https://doc.rust-lang.org/nightly/"}},"format_version":26}