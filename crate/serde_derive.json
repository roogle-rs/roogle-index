{"root":"0:0:1678","crate_version":"1.0.160","includes_private":false,"index":{"2:11872:802":{"id":"2:11872:802","crate_id":2,"name":"len","span":null,"visibility":"public","docs":"Returns the length of `self`.\n\nThis length is in bytes, not [`char`]s or graphemes. In other words,\nit might not be what a human considers the length of the string.\n\n[`char`]: prim@char\n\n# Examples\n\nBasic usage:\n\n```\nlet len = \"foo\".len();\nassert_eq!(3, len);\n\nassert_eq!(\"∆íoo\".len(), 4); // fancy f!\nassert_eq!(\"∆íoo\".chars().count(), 3);\n```","links":{"prim@char":"1:11872:411"},"attrs":["#[must_use]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11921:25979":{"id":"2:11921:25979","crate_id":2,"name":"split","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by\ncharacters matched by a pattern.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rsplit`] method can be used.\n\n[`rsplit`]: str::rsplit\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".split(' ').collect();\nassert_eq!(v, [\"Mary\", \"had\", \"a\", \"little\", \"lamb\"]);\n\nlet v: Vec<&str> = \"\".split('X').collect();\nassert_eq!(v, [\"\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".split('X').collect();\nassert_eq!(v, [\"lion\", \"\", \"tiger\", \"leopard\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".split(\"::\").collect();\nassert_eq!(v, [\"lion\", \"tiger\", \"leopard\"]);\n\nlet v: Vec<&str> = \"abc1def2ghi\".split(char::is_numeric).collect();\nassert_eq!(v, [\"abc\", \"def\", \"ghi\"]);\n\nlet v: Vec<&str> = \"lionXtigerXleopard\".split(char::is_uppercase).collect();\nassert_eq!(v, [\"lion\", \"tiger\", \"leopard\"]);\n```\n\nIf the pattern is a slice of chars, split on each occurrence of any of the characters:\n\n```\nlet v: Vec<&str> = \"2020-11-03 23:59\".split(&['-', ' ', ':', '@'][..]).collect();\nassert_eq!(v, [\"2020\", \"11\", \"03\", \"23\", \"59\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".split(|c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"abc\", \"def\", \"ghi\"]);\n```\n\nIf a string contains multiple contiguous separators, you will end up\nwith empty strings in the output:\n\n```\nlet x = \"||||a||b|c\".to_string();\nlet d: Vec<_> = x.split('|').collect();\n\nassert_eq!(d, &[\"\", \"\", \"\", \"\", \"a\", \"\", \"b\", \"c\"]);\n```\n\nContiguous separators are separated by the empty string.\n\n```\nlet x = \"(///)\".to_string();\nlet d: Vec<_> = x.split('/').collect();\n\nassert_eq!(d, &[\"(\", \"\", \"\", \")\"]);\n```\n\nSeparators at the start or end of a string are neighbored\nby empty strings.\n\n```\nlet d: Vec<_> = \"010\".split(\"0\").collect();\nassert_eq!(d, &[\"\", \"1\", \"\"]);\n```\n\nWhen the empty string is used as a separator, it separates\nevery character in the string, along with the beginning\nand end of the string.\n\n```\nlet f: Vec<_> = \"rust\".split(\"\").collect();\nassert_eq!(f, &[\"\", \"r\", \"u\", \"s\", \"t\", \"\"]);\n```\n\nContiguous separators can lead to possibly surprising behavior\nwhen whitespace is used as the separator. This code is correct:\n\n```\nlet x = \"    a  b c\".to_string();\nlet d: Vec<_> = x.split(' ').collect();\n\nassert_eq!(d, &[\"\", \"\", \"\", \"\", \"a\", \"\", \"b\", \"c\"]);\n```\n\nIt does _not_ give you:\n\n```,ignore\nassert_eq!(d, &[\"a\", \"b\", \"c\"]);\n```\n\nUse [`split_whitespace`] for this behavior.\n\n[`split_whitespace`]: str::split_whitespace","links":{"self::pattern":"2:11573:14118","`DoubleEndedIterator`":"2:7167:119","prim@char":"1:11872:411","str::split_whitespace":"2:11899:33155","str::rsplit":"2:11927:25983"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Split","id":"2:42645:8100","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11578:14115","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"5:5392:2310":{"id":"5:5392:2310","crate_id":5,"name":"to_ascii_lowercase","span":null,"visibility":"public","docs":"Returns a copy of this string where each character is mapped to its\nASCII lower case equivalent.\n\nASCII letters 'A' to 'Z' are mapped to 'a' to 'z',\nbut non-ASCII letters are unchanged.\n\nTo lowercase the value in-place, use [`make_ascii_lowercase`].\n\nTo lowercase ASCII characters in addition to non-ASCII characters, use\n[`to_lowercase`].\n\n# Examples\n\n```\nlet s = \"Gr√º√üe, J√ºrgen ‚ù§\";\n\nassert_eq!(\"gr√º√üe, j√ºrgen ‚ù§\", s.to_ascii_lowercase());\n```\n\n[`make_ascii_lowercase`]: str::make_ascii_lowercase\n[`to_lowercase`]: #method.to_lowercase","links":{"str::make_ascii_lowercase":"2:11994:4411"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use = \"to lowercase the value in-place, use `make_ascii_lowercase()`\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:7239:221","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11880:2730":{"id":"2:11880:2730","crate_id":2,"name":"as_bytes","span":null,"visibility":"public","docs":"Converts a string slice to a byte slice. To convert the byte slice back\ninto a string slice, use the [`from_utf8`] function.\n\n# Examples\n\nBasic usage:\n\n```\nlet bytes = \"bors\".as_bytes();\nassert_eq!(b\"bors\", bytes);\n```","links":{"`from_utf8`":"2:11141:14119"},"attrs":["#[must_use]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"slice","inner":{"kind":"primitive","inner":"u8"}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11890:25947":{"id":"2:11890:25947","crate_id":2,"name":"get_unchecked_mut","span":null,"visibility":"public","docs":"Returns a mutable, unchecked subslice of `str`.\n\nThis is the unchecked alternative to indexing the `str`.\n\n# Safety\n\nCallers of this function are responsible that these preconditions are\nsatisfied:\n\n* The starting index must not exceed the ending index;\n* Indexes must be within bounds of the original slice;\n* Indexes must lie on UTF-8 sequence boundaries.\n\nFailing that, the returned string slice may reference invalid memory or\nviolate the invariants communicated by the `str` type.\n\n# Examples\n\n```\nlet mut v = String::from(\"üóª‚ààüåè\");\nunsafe {\n    assert_eq!(\"üóª\", v.get_unchecked_mut(0..4));\n    assert_eq!(\"‚àà\", v.get_unchecked_mut(4..7));\n    assert_eq!(\"üåè\", v.get_unchecked_mut(7..11));\n}\n```","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["i",{"kind":"generic","inner":"I"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"qualified_path","inner":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"I"},"trait":{"name":"SliceIndex","id":"2:9754:219","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}}}}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"2:9754:219","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}},"2:11933:35229":{"id":"2:11933:35229","crate_id":2,"name":"rsplit_terminator","span":null,"visibility":"public","docs":"An iterator over substrings of `self`, separated by characters\nmatched by a pattern and yielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\nEquivalent to [`split`], except that the trailing substring is\nskipped if empty.\n\n[`split`]: str::split\n\nThis method can be used for string data that is _terminated_,\nrather than _separated_ by a pattern.\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a\nreverse search, and it will be double ended if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`split_terminator`] method can be\nused.\n\n[`split_terminator`]: str::split_terminator\n\n# Examples\n\n```\nlet v: Vec<&str> = \"A.B.\".rsplit_terminator('.').collect();\nassert_eq!(v, [\"B\", \"A\"]);\n\nlet v: Vec<&str> = \"A..B..\".rsplit_terminator(\".\").collect();\nassert_eq!(v, [\"\", \"B\", \"\", \"A\"]);\n\nlet v: Vec<&str> = \"A.B:C.D\".rsplit_terminator(&['.', ':'][..]).collect();\nassert_eq!(v, [\"D\", \"C\", \"B\", \"A\"]);\n```","links":{"self::pattern":"2:11573:14118","str::split":"2:11921:25979","prim@char":"1:11872:411","str::split_terminator":"2:11930:35228"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"RSplitTerminator","id":"2:42713:8181","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11578:14115","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"2:11578:14115","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11593:14116","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"5:5377:35892":{"id":"5:5377:35892","crate_id":5,"name":"replacen","span":null,"visibility":"public","docs":"Replaces first N matches of a pattern with another string.\n\n`replacen` creates a new [`String`], and copies the data from this string slice into it.\nWhile doing so, it attempts to find matches of a pattern. If it finds any, it\nreplaces them with the replacement string slice at most `count` times.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"foo foo 123 foo\";\nassert_eq!(\"new new 123 foo\", s.replacen(\"foo\", \"new\", 2));\nassert_eq!(\"faa fao 123 foo\", s.replacen('o', \"a\", 3));\nassert_eq!(\"foo foo new23 foo\", s.replacen(char::is_numeric, \"new\", 1));\n```\n\nWhen the pattern doesn't match, it returns this string slice as [`String`]:\n\n```\nlet s = \"this is old\";\nassert_eq!(s, s.replacen(\"cookie monster\", \"little lamb\", 10));\n```","links":{"`String`":"5:7239:221"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the replaced string as a new allocation, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}],["to",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}],["count",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:7239:221","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11578:14115","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11881:35224":{"id":"2:11881:35224","crate_id":2,"name":"as_bytes_mut","span":null,"visibility":"public","docs":"Converts a mutable string slice to a mutable byte slice.\n\n# Safety\n\nThe caller must ensure that the content of the slice is valid UTF-8\nbefore the borrow ends and the underlying `str` is used.\n\nUse of a `str` whose contents are not valid UTF-8 is undefined behavior.\n\n# Examples\n\nBasic usage:\n\n```\nlet mut s = String::from(\"Hello\");\nlet bytes = unsafe { s.as_bytes_mut() };\n\nassert_eq!(b\"Hello\", bytes);\n```\n\nMutability:\n\n```\nlet mut s = String::from(\"üóª‚ààüåè\");\n\nunsafe {\n    let bytes = s.as_bytes_mut();\n\n    bytes[0] = 0xF0;\n    bytes[1] = 0x9F;\n    bytes[2] = 0x8D;\n    bytes[3] = 0x94;\n}\n\nassert_eq!(\"üçî‚ààüåè\", s);\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"slice","inner":{"kind":"primitive","inner":"u8"}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}},"2:11930:35228":{"id":"2:11930:35228","crate_id":2,"name":"split_terminator","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by\ncharacters matched by a pattern.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\nEquivalent to [`split`], except that the trailing substring\nis skipped if empty.\n\n[`split`]: str::split\n\nThis method can be used for string data that is _terminated_,\nrather than _separated_ by a pattern.\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rsplit_terminator`] method can be used.\n\n[`rsplit_terminator`]: str::rsplit_terminator\n\n# Examples\n\nBasic usage:\n\n```\nlet v: Vec<&str> = \"A.B.\".split_terminator('.').collect();\nassert_eq!(v, [\"A\", \"B\"]);\n\nlet v: Vec<&str> = \"A..B..\".split_terminator(\".\").collect();\nassert_eq!(v, [\"A\", \"\", \"B\", \"\"]);\n\nlet v: Vec<&str> = \"A.B:C.D\".split_terminator(&['.', ':'][..]).collect();\nassert_eq!(v, [\"A\", \"B\", \"C\", \"D\"]);\n```","links":{"self::pattern":"2:11573:14118","str::split":"2:11921:25979","prim@char":"1:11872:411","`DoubleEndedIterator`":"2:7167:119","str::rsplit_terminator":"2:11933:35229"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"SplitTerminator","id":"2:42695:8180","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11578:14115","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11936:25985":{"id":"2:11936:25985","crate_id":2,"name":"splitn","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by a\npattern, restricted to returning at most `n` items.\n\nIf `n` substrings are returned, the last substring (the `n`th substring)\nwill contain the remainder of the string.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will not be double ended, because it is\nnot efficient to support.\n\nIf the pattern allows a reverse search, the [`rsplitn`] method can be\nused.\n\n[`rsplitn`]: str::rsplitn\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lambda\".splitn(3, ' ').collect();\nassert_eq!(v, [\"Mary\", \"had\", \"a little lambda\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".splitn(3, \"X\").collect();\nassert_eq!(v, [\"lion\", \"\", \"tigerXleopard\"]);\n\nlet v: Vec<&str> = \"abcXdef\".splitn(1, 'X').collect();\nassert_eq!(v, [\"abcXdef\"]);\n\nlet v: Vec<&str> = \"\".splitn(1, 'X').collect();\nassert_eq!(v, [\"\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".splitn(2, |c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"abc\", \"defXghi\"]);\n```","links":{"prim@char":"1:11872:411","self::pattern":"2:11573:14118","str::rsplitn":"2:11939:25987"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["n",{"kind":"primitive","inner":"usize"}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"SplitN","id":"2:42749:8183","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11578:14115","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:372-0:348:1785":{"id":"0:372-0:348:1785","crate_id":0,"name":null,"span":{"filename":"src/internals/mod.rs","begin":[8,0],"end":[8,41]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"import","inner":{"source":"self::receiver::replace_receiver","name":"replace_receiver","id":"0:348:1785","glob":false}},"2:11957:35234":{"id":"2:11957:35234","crate_id":2,"name":"rmatch_indices","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within `self`,\nyielded in reverse order along with the index of the match.\n\nFor matches of `pat` within `self` that overlap, only the indices\ncorresponding to the last match are returned.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`match_indices`] method can be used.\n\n[`match_indices`]: str::match_indices\n\n# Examples\n\nBasic usage:\n\n```\nlet v: Vec<_> = \"abcXXXabcYYYabc\".rmatch_indices(\"abc\").collect();\nassert_eq!(v, [(12, \"abc\"), (6, \"abc\"), (0, \"abc\")]);\n\nlet v: Vec<_> = \"1abcabc2\".rmatch_indices(\"abc\").collect();\nassert_eq!(v, [(4, \"abc\"), (1, \"abc\")]);\n\nlet v: Vec<_> = \"ababa\".rmatch_indices(\"aba\").collect();\nassert_eq!(v, [(2, \"aba\")]); // only the last `aba`\n```","links":{"self::pattern":"2:11573:14118","`DoubleEndedIterator`":"2:7167:119","prim@char":"1:11872:411","str::match_indices":"2:11954:35233"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"RMatchIndices","id":"2:42813:8187","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11578:14115","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"2:11578:14115","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11593:14116","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11901:29750":{"id":"2:11901:29750","crate_id":2,"name":"lines","span":null,"visibility":"public","docs":"An iterator over the lines of a string, as string slices.\n\nLines are split at line endings that are either newlines (`\\n`) or\nsequences of a carriage return followed by a line feed (`\\r\\n`).\n\nLine terminators are not included in the lines returned by the iterator.\n\nThe final line ending is optional. A string that ends with a final line\nending will return the same lines as an otherwise identical string\nwithout a final line ending.\n\n# Examples\n\nBasic usage:\n\n```\nlet text = \"foo\\r\\nbar\\n\\nbaz\\n\";\nlet mut lines = text.lines();\n\nassert_eq!(Some(\"foo\"), lines.next());\nassert_eq!(Some(\"bar\"), lines.next());\nassert_eq!(Some(\"\"), lines.next());\nassert_eq!(Some(\"baz\"), lines.next());\n\nassert_eq!(None, lines.next());\n```\n\nThe final line ending isn't required:\n\n```\nlet text = \"foo\\nbar\\n\\r\\nbaz\";\nlet mut lines = text.lines();\n\nassert_eq!(Some(\"foo\"), lines.next());\nassert_eq!(Some(\"bar\"), lines.next());\nassert_eq!(Some(\"\"), lines.next());\nassert_eq!(Some(\"baz\"), lines.next());\n\nassert_eq!(None, lines.next());\n```","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Lines","id":"2:42899:8191","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11888:25946":{"id":"2:11888:25946","crate_id":2,"name":"get_unchecked","span":null,"visibility":"public","docs":"Returns an unchecked subslice of `str`.\n\nThis is the unchecked alternative to indexing the `str`.\n\n# Safety\n\nCallers of this function are responsible that these preconditions are\nsatisfied:\n\n* The starting index must not exceed the ending index;\n* Indexes must be within bounds of the original slice;\n* Indexes must lie on UTF-8 sequence boundaries.\n\nFailing that, the returned string slice may reference invalid memory or\nviolate the invariants communicated by the `str` type.\n\n# Examples\n\n```\nlet v = \"üóª‚ààüåè\";\nunsafe {\n    assert_eq!(\"üóª\", v.get_unchecked(0..4));\n    assert_eq!(\"‚àà\", v.get_unchecked(4..7));\n    assert_eq!(\"üåè\", v.get_unchecked(7..11));\n}\n```","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["i",{"kind":"generic","inner":"I"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"qualified_path","inner":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"I"},"trait":{"name":"SliceIndex","id":"2:9754:219","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}}}}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"2:9754:219","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}},"0:928:1672":{"id":"0:928:1672","crate_id":0,"name":"Deserialize","span":{"filename":"src/lib.rs","begin":[100,0],"end":[105,1]},"visibility":"public","docs":null,"links":{},"attrs":["#[proc_macro_derive(Deserialize, attributes(serde))]"],"deprecation":null,"kind":"proc_macro","inner":{"kind":"derive","helpers":["serde"]}},"0:927:1663":{"id":"0:927:1663","crate_id":0,"name":"Serialize","span":{"filename":"src/lib.rs","begin":[92,0],"end":[97,1]},"visibility":"public","docs":null,"links":{},"attrs":["#[proc_macro_derive(Serialize, attributes(serde))]"],"deprecation":null,"kind":"proc_macro","inner":{"kind":"derive","helpers":["serde"]}},"0:0:1678":{"id":"0:0:1678","crate_id":0,"name":"serde_derive","span":{"filename":"src/lib.rs","begin":[1,0],"end":[110,1]},"visibility":"public","docs":"This crate provides Serde's two derive macros.\n\n```edition2018\n# use serde_derive::{Serialize, Deserialize};\n#\n#[derive(Serialize, Deserialize)]\n# struct S;\n#\n# fn main() {}\n```\n\nPlease refer to [https://serde.rs/derive.html] for how to set this up.\n\n[https://serde.rs/derive.html]: https://serde.rs/derive.html","links":{},"attrs":["#![doc(html_root_url = \"https://docs.rs/serde_derive/1.0.160\")]","#![allow(unknown_lints, bare_trait_objects)]","#![allow(clippy :: branches_sharing_code, clippy :: cognitive_complexity,\nclippy :: collapsible_match, clippy :: derive_partial_eq_without_eq, clippy ::\nenum_variant_names, clippy :: manual_map, clippy :: match_like_matches_macro,\nclippy :: needless_pass_by_value, clippy :: too_many_arguments, clippy ::\ntrivially_copy_pass_by_ref, clippy :: used_underscore_binding, clippy ::\nwildcard_in_or_patterns, clippy :: unnested_or_patterns,)]","#![allow(clippy :: cast_possible_truncation, clippy :: checked_conversions,\nclippy :: doc_markdown, clippy :: enum_glob_use, clippy :: indexing_slicing,\nclippy :: items_after_statements, clippy :: let_underscore_untyped, clippy ::\nmanual_assert, clippy :: map_err_ignore, clippy :: match_same_arms, clippy ::\nmatch_wildcard_for_single_variants, clippy :: module_name_repetitions, clippy\n:: must_use_candidate, clippy :: option_if_let_else, clippy :: similar_names,\nclippy :: single_match_else, clippy :: struct_excessive_bools, clippy ::\ntoo_many_lines, clippy :: unseparated_literal_suffix, clippy :: unused_self,\nclippy :: use_self, clippy :: wildcard_imports)]"],"deprecation":null,"kind":"module","inner":{"is_crate":true,"items":["0:927:1663","0:928:1672"],"is_stripped":false}},"2:11899:33155":{"id":"2:11899:33155","crate_id":2,"name":"split_whitespace","span":null,"visibility":"public","docs":"Splits a string slice by whitespace.\n\nThe iterator returned will return string slices that are sub-slices of\nthe original string slice, separated by any amount of whitespace.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`. If you only want to split on ASCII whitespace\ninstead, use [`split_ascii_whitespace`].\n\n[`split_ascii_whitespace`]: str::split_ascii_whitespace\n\n# Examples\n\nBasic usage:\n\n```\nlet mut iter = \"A few words\".split_whitespace();\n\nassert_eq!(Some(\"A\"), iter.next());\nassert_eq!(Some(\"few\"), iter.next());\nassert_eq!(Some(\"words\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nAll kinds of whitespace are considered:\n\n```\nlet mut iter = \" Mary   had\\ta\\u{2009}little  \\n\\t lamb\".split_whitespace();\nassert_eq!(Some(\"Mary\"), iter.next());\nassert_eq!(Some(\"had\"), iter.next());\nassert_eq!(Some(\"a\"), iter.next());\nassert_eq!(Some(\"little\"), iter.next());\nassert_eq!(Some(\"lamb\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nIf the string is empty or all whitespace, the iterator yields no string slices:\n```\nassert_eq!(\"\".split_whitespace().next(), None);\nassert_eq!(\"   \".split_whitespace().next(), None);\n```","links":{"str::split_ascii_whitespace":"2:11900:33143"},"attrs":["#[must_use =\n\"this returns the split string as an iterator, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_split_whitespace\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"SplitWhitespace","id":"2:42919:8193","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11968:35240":{"id":"2:11968:35240","crate_id":2,"name":"trim_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes and suffixes that match a\npattern repeatedly removed.\n\nThe [pattern] can be a [`char`], a slice of [`char`]s, or a function\nor closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_matches('1'), \"foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_matches(char::is_numeric), \"foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_matches(x), \"foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1foo1barXX\".trim_matches(|c| c == '1' || c == 'X'), \"foo1bar\");\n```","links":{"prim@char":"1:11872:411","self::pattern":"2:11573:14118"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11578:14115","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"2:11578:14115","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"DoubleEndedSearcher","id":"2:11598:14114","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11874:35221":{"id":"2:11874:35221","crate_id":2,"name":"is_char_boundary","span":null,"visibility":"public","docs":"Checks that `index`-th byte is the first byte in a UTF-8 code point\nsequence or the end of the string.\n\nThe start and end of the string (when `index == self.len()`) are\nconsidered to be boundaries.\n\nReturns `false` if `index` is greater than `self.len()`.\n\n# Examples\n\n```\nlet s = \"L√∂we ËÄÅËôé L√©opard\";\nassert!(s.is_char_boundary(0));\n// start of `ËÄÅ`\nassert!(s.is_char_boundary(6));\nassert!(s.is_char_boundary(s.len()));\n\n// second byte of `√∂`\nassert!(!s.is_char_boundary(2));\n\n// third byte of `ËÄÅ`\nassert!(!s.is_char_boundary(8));\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["index",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11971:1913":{"id":"2:11971:1913","crate_id":2,"name":"trim_start_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. `start` in this context means the first\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be left side, and for right-to-left languages like\nArabic or Hebrew, this will be the right side.\n\n# Examples\n\nBasic usage:\n\n```\nassert_eq!(\"11foo1bar11\".trim_start_matches('1'), \"foo1bar11\");\nassert_eq!(\"123foo1bar123\".trim_start_matches(char::is_numeric), \"foo1bar123\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_start_matches(x), \"foo1bar12\");\n```","links":{"prim@char":"1:11872:411","self::pattern":"2:11573:14118"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11578:14115","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11983:35242":{"id":"2:11983:35242","crate_id":2,"name":"trim_left_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. 'Left' in this context means the first\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _right_ side, not the left.\n\n# Examples\n\nBasic usage:\n\n```\nassert_eq!(\"11foo1bar11\".trim_left_matches('1'), \"foo1bar11\");\nassert_eq!(\"123foo1bar123\".trim_left_matches(char::is_numeric), \"foo1bar123\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_left_matches(x), \"foo1bar12\");\n```","links":{"prim@char":"1:11872:411","self::pattern":"2:11573:14118"},"attrs":["#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_start_matches`\",\nsuggestion = \"trim_start_matches\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_start_matches`"},"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11578:14115","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11886:25945":{"id":"2:11886:25945","crate_id":2,"name":"get_mut","span":null,"visibility":"public","docs":"Returns a mutable subslice of `str`.\n\nThis is the non-panicking alternative to indexing the `str`. Returns\n[`None`] whenever equivalent indexing operation would panic.\n\n# Examples\n\n```\nlet mut v = String::from(\"hello\");\n// correct length\nassert!(v.get_mut(0..5).is_some());\n// out of bounds\nassert!(v.get_mut(..42).is_none());\nassert_eq!(Some(\"he\"), v.get_mut(0..2).map(|v| &*v));\n\nassert_eq!(\"hello\", v);\n{\n    let s = v.get_mut(0..2);\n    let s = s.map(|s| {\n        s.make_ascii_uppercase();\n        &*s\n    });\n    assert_eq!(Some(\"HE\"), s);\n}\nassert_eq!(\"HEllo\", v);\n```","links":{"`None`":"2:40682:176"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["i",{"kind":"generic","inner":"I"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:40680:178","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"qualified_path","inner":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"I"},"trait":{"name":"SliceIndex","id":"2:9754:219","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}}}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"2:9754:219","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11871":{"id":"2:11871","crate_id":2,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":["#[cfg(not(test))]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"kind":"primitive","inner":"str"},"items":["2:11872:802","2:11873:2001","2:11874:35221","2:11875:35222","2:11877:35223","2:11880:2730","2:11881:35224","2:11882:311","2:11883:25948","2:11884:1894","2:11886:25945","2:11888:25946","2:11890:25947","2:11892:35225","2:11893:35226","2:11894:25971","2:11895:25972","2:11896:2320","2:11897:2314","2:11898:8092","2:11899:33155","2:11900:33143","2:11901:29750","2:11902:35227","2:11903:33132","2:11904:1931","2:11907:25989","2:11910:25990","2:11913:2539","2:11917:4091","2:11921:25979","2:11924:25981","2:11927:25983","2:11930:35228","2:11933:35229","2:11936:25985","2:11939:25987","2:11942:35230","2:11945:35231","2:11948:3071","2:11951:35232","2:11954:35233","2:11957:35234","2:11960:35235","2:11962:35236","2:11964:35237","2:11966:35238","2:11967:35239","2:11968:35240","2:11971:1913","2:11974:25991","2:11977:25992","2:11980:35241","2:11983:35242","2:11986:35243","2:11989:1874","2:11991:4408","2:11992:4409","2:11993:4410","2:11994:4411","2:11995:35244","2:11997:3376","2:11998:35245"],"negative":false,"synthetic":false,"blanket_impl":null}},"2:11974:25991":{"id":"2:11974:25991","crate_id":2,"name":"strip_prefix","span":null,"visibility":"public","docs":"Returns a string slice with the prefix removed.\n\nIf the string starts with the pattern `prefix`, returns substring after the prefix, wrapped\nin `Some`.  Unlike `trim_start_matches`, this method removes the prefix exactly once.\n\nIf the string does not start with `prefix`, returns `None`.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nassert_eq!(\"foo:bar\".strip_prefix(\"foo:\"), Some(\"bar\"));\nassert_eq!(\"foo:bar\".strip_prefix(\"bar\"), None);\nassert_eq!(\"foofoo\".strip_prefix(\"foo\"), Some(\"foo\"));\n```","links":{"prim@char":"1:11872:411","self::pattern":"2:11573:14118"},"attrs":["#[must_use =\n\"this returns the remaining substring as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["prefix",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:40680:178","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11578:14115","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11992:4409":{"id":"2:11992:4409","crate_id":2,"name":"eq_ignore_ascii_case","span":null,"visibility":"public","docs":"Checks that two strings are an ASCII case-insensitive match.\n\nSame as `to_ascii_lowercase(a) == to_ascii_lowercase(b)`,\nbut without allocating and copying temporaries.\n\n# Examples\n\n```\nassert!(\"Ferris\".eq_ignore_ascii_case(\"FERRIS\"));\nassert!(\"Ferr√∂s\".eq_ignore_ascii_case(\"FERR√∂S\"));\nassert!(!\"Ferr√∂s\".eq_ignore_ascii_case(\"FERR√ñS\"));\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["other",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"5:5388:35894":{"id":"5:5388:35894","crate_id":5,"name":"to_uppercase","span":null,"visibility":"public","docs":"Returns the uppercase equivalent of this string slice, as a new [`String`].\n\n'Uppercase' is defined according to the terms of the Unicode Derived Core Property\n`Uppercase`.\n\nSince some characters can expand into multiple characters when changing\nthe case, this function returns a [`String`] instead of modifying the\nparameter in-place.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"hello\";\n\nassert_eq!(\"HELLO\", s.to_uppercase());\n```\n\nScripts without case are not changed:\n\n```\nlet new_year = \"ÂÜúÂéÜÊñ∞Âπ¥\";\n\nassert_eq!(new_year, new_year.to_uppercase());\n```\n\nOne character can become multiple:\n```\nlet s = \"tsch√º√ü\";\n\nassert_eq!(\"TSCH√úSS\", s.to_uppercase());\n```","links":{"`String`":"5:7239:221"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the uppercase string as a new String, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:7239:221","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:84-0:956:1878":{"id":"0:84-0:956:1878","crate_id":0,"name":null,"span":{"filename":"src/internals/attr.rs","begin":[22,0],"end":[22,36]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"import","inner":{"source":"internals::case::RenameRule","name":"RenameRule","id":"0:956:1878","glob":false}},"2:11882:311":{"id":"2:11882:311","crate_id":2,"name":"as_ptr","span":null,"visibility":"public","docs":"Converts a string slice to a raw pointer.\n\nAs string slices are a slice of bytes, the raw pointer points to a\n[`u8`]. This pointer will be pointing to the first byte of the string\nslice.\n\nThe caller must ensure that the returned pointer is never written to.\nIf you need to mutate the contents of the string slice, use [`as_mut_ptr`].\n\n[`as_mut_ptr`]: str::as_mut_ptr\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"Hello\";\nlet ptr = s.as_ptr();\n```","links":{"str::as_mut_ptr":"2:11883:25948","`u8`":"1:11889:1478"},"attrs":["#[must_use]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"raw_pointer","inner":{"mutable":false,"type":{"kind":"primitive","inner":"u8"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11924:25981":{"id":"2:11924:25981","crate_id":2,"name":"split_inclusive","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by\ncharacters matched by a pattern. Differs from the iterator produced by\n`split` in that `split_inclusive` leaves the matched part as the\nterminator of the substring.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\\nlittle lamb\\nlittle lamb.\"\n    .split_inclusive('\\n').collect();\nassert_eq!(v, [\"Mary had a little lamb\\n\", \"little lamb\\n\", \"little lamb.\"]);\n```\n\nIf the last element of the string is matched,\nthat element will be considered the terminator of the preceding substring.\nThat substring will be the last item returned by the iterator.\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\\nlittle lamb\\nlittle lamb.\\n\"\n    .split_inclusive('\\n').collect();\nassert_eq!(v, [\"Mary had a little lamb\\n\", \"little lamb\\n\", \"little lamb.\\n\"]);\n```","links":{"prim@char":"1:11872:411","self::pattern":"2:11573:14118"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"SplitInclusive","id":"2:11397:8102","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11578:14115","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11964:35237":{"id":"2:11964:35237","crate_id":2,"name":"trim_end","span":null,"visibility":"public","docs":"Returns a string slice with trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Text directionality\n\nA string is a sequence of bytes. `end` in this context means the last\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be right side, and for right-to-left languages like\nArabic or Hebrew, this will be the left side.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\nassert_eq!(\"\\n Hello\\tworld\", s.trim_end());\n```\n\nDirectionality:\n\n```\nlet s = \"  English  \";\nassert!(Some('h') == s.trim_end().chars().rev().next());\n\nlet s = \"  ◊¢◊ë◊®◊ô◊™  \";\nassert!(Some('◊™') == s.trim_end().chars().rev().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_trim_end\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11995:35244":{"id":"2:11995:35244","crate_id":2,"name":"escape_debug","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_debug`].\n\nNote: only extended grapheme codepoints that begin the string will be\nescaped.\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"‚ù§\\n!\".escape_debug() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"‚ù§\\n!\".escape_debug());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"‚ù§\\\\n!\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"‚ù§\\n!\".escape_debug().to_string(), \"‚ù§\\\\n!\");\n```","links":{"`char::escape_debug`":"2:4519:35244"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"EscapeDebug","id":"2:42944:8138","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11894:25971":{"id":"2:11894:25971","crate_id":2,"name":"split_at","span":null,"visibility":"public","docs":"Divide one string slice into two at an index.\n\nThe argument, `mid`, should be a byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get mutable string slices instead, see the [`split_at_mut`]\nmethod.\n\n[`split_at_mut`]: str::split_at_mut\n\n# Panics\n\nPanics if `mid` is not on a UTF-8 code point boundary, or if it is\npast the end of the last code point of the string slice.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"Per Martin-L√∂f\";\n\nlet (first, last) = s.split_at(3);\n\nassert_eq!(\"Per\", first);\nassert_eq!(\" Martin-L√∂f\", last);\n```","links":{"str::split_at_mut":"2:11895:25972"},"attrs":["#[must_use]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["mid",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"tuple","inner":[{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11883:25948":{"id":"2:11883:25948","crate_id":2,"name":"as_mut_ptr","span":null,"visibility":"public","docs":"Converts a mutable string slice to a raw pointer.\n\nAs string slices are a slice of bytes, the raw pointer points to a\n[`u8`]. This pointer will be pointing to the first byte of the string\nslice.\n\nIt is your responsibility to make sure that the string slice only gets\nmodified in a way that it remains valid UTF-8.","links":{"`u8`":"1:11889:1478"},"attrs":["#[must_use]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"raw_pointer","inner":{"mutable":true,"type":{"kind":"primitive","inner":"u8"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"5:5391:2311":{"id":"5:5391:2311","crate_id":5,"name":"to_ascii_uppercase","span":null,"visibility":"public","docs":"Returns a copy of this string where each character is mapped to its\nASCII upper case equivalent.\n\nASCII letters 'a' to 'z' are mapped to 'A' to 'Z',\nbut non-ASCII letters are unchanged.\n\nTo uppercase the value in-place, use [`make_ascii_uppercase`].\n\nTo uppercase ASCII characters in addition to non-ASCII characters, use\n[`to_uppercase`].\n\n# Examples\n\n```\nlet s = \"Gr√º√üe, J√ºrgen ‚ù§\";\n\nassert_eq!(\"GR√º√üE, J√ºRGEN ‚ù§\", s.to_ascii_uppercase());\n```\n\n[`make_ascii_uppercase`]: str::make_ascii_uppercase\n[`to_uppercase`]: #method.to_uppercase","links":{"str::make_ascii_uppercase":"2:11993:4410"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use = \"to uppercase the value in-place, use `make_ascii_uppercase()`\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:7239:221","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"5:5373:35891":{"id":"5:5373:35891","crate_id":5,"name":"into_boxed_bytes","span":null,"visibility":"public","docs":"Converts a `Box<str>` into a `Box<[u8]>` without copying or allocating.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"this is a string\";\nlet boxed_str = s.to_owned().into_boxed_str();\nlet boxed_bytes = boxed_str.into_boxed_bytes();\nassert_eq!(*boxed_bytes, *s.as_bytes());\n```","links":{},"attrs":["#[must_use = \"`self` will be dropped if the result is not used\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"resolved_path","inner":{"name":"Box","id":"5:279:1851","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}},{"type":{"kind":"resolved_path","inner":{"name":"Global","id":"5:6988:4425","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}]],"output":{"kind":"resolved_path","inner":{"name":"Box","id":"5:279:1851","args":{"angle_bracketed":{"args":[{"type":{"kind":"slice","inner":{"kind":"primitive","inner":"u8"}}},{"type":{"kind":"resolved_path","inner":{"name":"Global","id":"5:6988:4425","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11994:4411":{"id":"2:11994:4411","crate_id":2,"name":"make_ascii_lowercase","span":null,"visibility":"public","docs":"Converts this string to its ASCII lower case equivalent in-place.\n\nASCII letters 'A' to 'Z' are mapped to 'a' to 'z',\nbut non-ASCII letters are unchanged.\n\nTo return a new lowercased value without modifying the existing one, use\n[`to_ascii_lowercase()`].\n\n[`to_ascii_lowercase()`]: #method.to_ascii_lowercase\n\n# Examples\n\n```\nlet mut s = String::from(\"GR√ú√üE, J√úRGEN ‚ù§\");\n\ns.make_ascii_lowercase();\n\nassert_eq!(\"gr√ú√üe, j√úrgen ‚ù§\", s);\n```","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11977:25992":{"id":"2:11977:25992","crate_id":2,"name":"strip_suffix","span":null,"visibility":"public","docs":"Returns a string slice with the suffix removed.\n\nIf the string ends with the pattern `suffix`, returns the substring before the suffix,\nwrapped in `Some`.  Unlike `trim_end_matches`, this method removes the suffix exactly once.\n\nIf the string does not end with `suffix`, returns `None`.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nassert_eq!(\"bar:foo\".strip_suffix(\":foo\"), Some(\"bar\"));\nassert_eq!(\"bar:foo\".strip_suffix(\"bar\"), None);\nassert_eq!(\"foofoo\".strip_suffix(\"foo\"), Some(\"foo\"));\n```","links":{"prim@char":"1:11872:411","self::pattern":"2:11573:14118"},"attrs":["#[must_use =\n\"this returns the remaining substring as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["suffix",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:40680:178","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11578:14115","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"2:11578:14115","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11593:14116","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11939:25987":{"id":"2:11939:25987","crate_id":2,"name":"rsplitn","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by a\npattern, starting from the end of the string, restricted to returning\nat most `n` items.\n\nIf `n` substrings are returned, the last substring (the `n`th substring)\nwill contain the remainder of the string.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will not be double ended, because it is not\nefficient to support.\n\nFor splitting from the front, the [`splitn`] method can be used.\n\n[`splitn`]: str::splitn\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".rsplitn(3, ' ').collect();\nassert_eq!(v, [\"lamb\", \"little\", \"Mary had a\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".rsplitn(3, 'X').collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"lionX\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".rsplitn(2, \"::\").collect();\nassert_eq!(v, [\"leopard\", \"lion::tiger\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".rsplitn(2, |c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"ghi\", \"abc1def\"]);\n```","links":{"prim@char":"1:11872:411","str::splitn":"2:11936:25985","self::pattern":"2:11573:14118"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["n",{"kind":"primitive","inner":"usize"}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"RSplitN","id":"2:42767:8184","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11578:14115","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"2:11578:14115","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11593:14116","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11989:1874":{"id":"2:11989:1874","crate_id":2,"name":"parse","span":null,"visibility":"public","docs":"Parses this string slice into another type.\n\nBecause `parse` is so general, it can cause problems with type\ninference. As such, `parse` is one of the few times you'll see\nthe syntax affectionately known as the 'turbofish': `::<>`. This\nhelps the inference algorithm understand specifically which type\nyou're trying to parse into.\n\n`parse` can parse into any type that implements the [`FromStr`] trait.\n\n# Errors\n\nWill return [`Err`] if it's not possible to parse this string slice into\nthe desired type.\n\n[`Err`]: FromStr::Err\n\n# Examples\n\nBasic usage\n\n```\nlet four: u32 = \"4\".parse().unwrap();\n\nassert_eq!(4, four);\n```\n\nUsing the 'turbofish' instead of annotating `four`:\n\n```\nlet four = \"4\".parse::<u32>();\n\nassert_eq!(Ok(4), four);\n```\n\nFailing to parse:\n\n```\nlet nope = \"j\".parse::<u32>();\n\nassert!(nope.is_err());\n```","links":{"FromStr::Err":"2:11535:125","`FromStr`":"2:11534:3244"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Result","id":"2:40824:207","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"F"}},{"type":{"kind":"qualified_path","inner":{"name":"Err","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"F"},"trait":{"name":"FromStr","id":"2:11534:3244","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"F"},"bounds":[{"trait_bound":{"trait":{"name":"FromStr","id":"2:11534:3244","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"5:5380:35893":{"id":"5:5380:35893","crate_id":5,"name":"to_lowercase","span":null,"visibility":"public","docs":"Returns the lowercase equivalent of this string slice, as a new [`String`].\n\n'Lowercase' is defined according to the terms of the Unicode Derived Core Property\n`Lowercase`.\n\nSince some characters can expand into multiple characters when changing\nthe case, this function returns a [`String`] instead of modifying the\nparameter in-place.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"HELLO\";\n\nassert_eq!(\"hello\", s.to_lowercase());\n```\n\nA tricky example, with sigma:\n\n```\nlet sigma = \"Œ£\";\n\nassert_eq!(\"œÉ\", sigma.to_lowercase());\n\n// but at the end of a word, it's œÇ, not œÉ:\nlet odysseus = \"·ΩàŒîŒ•Œ£Œ£ŒïŒéŒ£\";\n\nassert_eq!(\"·ΩÄŒ¥œÖœÉœÉŒµœçœÇ\", odysseus.to_lowercase());\n```\n\nLanguages without case are not changed:\n\n```\nlet new_year = \"ÂÜúÂéÜÊñ∞Âπ¥\";\n\nassert_eq!(new_year, new_year.to_lowercase());\n```","links":{"`String`":"5:7239:221"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the lowercase string as a new String, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:7239:221","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11897:2314":{"id":"2:11897:2314","crate_id":2,"name":"char_indices","span":null,"visibility":"public","docs":"Returns an iterator over the [`char`]s of a string slice, and their\npositions.\n\nAs a string slice consists of valid UTF-8, we can iterate through a\nstring slice by [`char`]. This method returns an iterator of both\nthese [`char`]s, as well as their byte positions.\n\nThe iterator yields tuples. The position is first, the [`char`] is\nsecond.\n\n# Examples\n\nBasic usage:\n\n```\nlet word = \"goodbye\";\n\nlet count = word.char_indices().count();\nassert_eq!(7, count);\n\nlet mut char_indices = word.char_indices();\n\nassert_eq!(Some((0, 'g')), char_indices.next());\nassert_eq!(Some((1, 'o')), char_indices.next());\nassert_eq!(Some((2, 'o')), char_indices.next());\nassert_eq!(Some((3, 'd')), char_indices.next());\nassert_eq!(Some((4, 'b')), char_indices.next());\nassert_eq!(Some((5, 'y')), char_indices.next());\nassert_eq!(Some((6, 'e')), char_indices.next());\n\nassert_eq!(None, char_indices.next());\n```\n\nRemember, [`char`]s might not match your intuition about characters:\n\n[`char`]: prim@char\n\n```\nlet yes = \"yÃÜes\";\n\nlet mut char_indices = yes.char_indices();\n\nassert_eq!(Some((0, 'y')), char_indices.next()); // not (0, 'yÃÜ')\nassert_eq!(Some((1, '\\u{0306}')), char_indices.next());\n\n// note the 3 here - the last character took up two bytes\nassert_eq!(Some((3, 'e')), char_indices.next());\nassert_eq!(Some((4, 's')), char_indices.next());\n\nassert_eq!(None, char_indices.next());\n```","links":{"prim@char":"1:11872:411"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"CharIndices","id":"2:42621:8175","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:62:342":{"id":"0:62:342","crate_id":0,"name":"attr","span":{"filename":"src/internals/attr.rs","begin":[1,0],"end":[1796,1]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"module","inner":{"is_crate":false,"items":["0:84-0:956:1878"],"is_stripped":false}},"2:11875:35222":{"id":"2:11875:35222","crate_id":2,"name":"floor_char_boundary","span":null,"visibility":"public","docs":"Finds the closest `x` not exceeding `index` where `is_char_boundary(x)` is `true`.\n\nThis method can help you truncate a string so that it's still valid UTF-8, but doesn't\nexceed a given number of bytes. Note that this is done purely at the character level\nand can still visually split graphemes, even though the underlying characters aren't\nsplit. For example, the emoji üßë‚Äçüî¨ (scientist) could be split so that the string only\nincludes üßë (person) instead.\n\n# Examples\n\n```\n#![feature(round_char_boundary)]\nlet s = \"‚ù§Ô∏èüß°üíõüíöüíôüíú\";\nassert_eq!(s.len(), 26);\nassert!(!s.is_char_boundary(13));\n\nlet closest = s.floor_char_boundary(13);\nassert_eq!(closest, 10);\nassert_eq!(&s[..closest], \"‚ù§Ô∏èüß°\");\n```","links":{},"attrs":["#[unstable(feature = \"round_char_boundary\", issue = \"93743\")]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["index",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"primitive","inner":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:981:1881":{"id":"0:981:1881","crate_id":0,"name":"Symbol","span":{"filename":"src/internals/symbol.rs","begin":[5,0],"end":[5,32]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"struct","inner":{"kind":{"tuple":[null]},"generics":{"params":[],"where_predicates":[]},"impls":[]}},"2:11884:1894":{"id":"2:11884:1894","crate_id":2,"name":"get","span":null,"visibility":"public","docs":"Returns a subslice of `str`.\n\nThis is the non-panicking alternative to indexing the `str`. Returns\n[`None`] whenever equivalent indexing operation would panic.\n\n# Examples\n\n```\nlet v = String::from(\"üóª‚ààüåè\");\n\nassert_eq!(Some(\"üóª\"), v.get(0..4));\n\n// indices not on UTF-8 sequence boundaries\nassert!(v.get(1..).is_none());\nassert!(v.get(..8).is_none());\n\n// out of bounds\nassert!(v.get(..42).is_none());\n```","links":{"`None`":"2:40682:176"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["i",{"kind":"generic","inner":"I"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:40680:178","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"qualified_path","inner":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"I"},"trait":{"name":"SliceIndex","id":"2:9754:219","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}}}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"2:9754:219","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11991:4408":{"id":"2:11991:4408","crate_id":2,"name":"is_ascii","span":null,"visibility":"public","docs":"Checks if all characters in this string are within the ASCII range.\n\n# Examples\n\n```\nlet ascii = \"hello!\\n\";\nlet non_ascii = \"Gr√º√üe, J√ºrgen ‚ù§\";\n\nassert!(ascii.is_ascii());\nassert!(!non_ascii.is_ascii());\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:8:1782":{"id":"0:8:1782","crate_id":0,"name":"ast","span":{"filename":"src/internals/ast.rs","begin":[1,0],"end":[202,1]},"visibility":"public","docs":"A Serde ast, parsed from the Syn ast and ready to generate Rust code.","links":{},"attrs":[],"deprecation":null,"kind":"module","inner":{"is_crate":false,"items":[],"is_stripped":false}},"2:11877:35223":{"id":"2:11877:35223","crate_id":2,"name":"ceil_char_boundary","span":null,"visibility":"public","docs":"Finds the closest `x` not below `index` where `is_char_boundary(x)` is `true`.\n\nThis method is the natural complement to [`floor_char_boundary`]. See that method\nfor more details.\n\n[`floor_char_boundary`]: str::floor_char_boundary\n\n# Panics\n\nPanics if `index > self.len()`.\n\n# Examples\n\n```\n#![feature(round_char_boundary)]\nlet s = \"‚ù§Ô∏èüß°üíõüíöüíôüíú\";\nassert_eq!(s.len(), 26);\nassert!(!s.is_char_boundary(13));\n\nlet closest = s.ceil_char_boundary(13);\nassert_eq!(closest, 14);\nassert_eq!(&s[..closest], \"‚ù§Ô∏èüß°üíõ\");\n```","links":{"str::floor_char_boundary":"2:11875:35222"},"attrs":["#[unstable(feature = \"round_char_boundary\", issue = \"93743\")]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["index",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"primitive","inner":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11910:25990":{"id":"2:11910:25990","crate_id":2,"name":"ends_with","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a suffix of this\nstring slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nBasic usage:\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.ends_with(\"anas\"));\nassert!(!bananas.ends_with(\"nana\"));\n```","links":{"prim@char":"1:11872:411","self::pattern":"2:11573:14118"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11578:14115","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"2:11578:14115","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11593:14116","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11993:4410":{"id":"2:11993:4410","crate_id":2,"name":"make_ascii_uppercase","span":null,"visibility":"public","docs":"Converts this string to its ASCII upper case equivalent in-place.\n\nASCII letters 'a' to 'z' are mapped to 'A' to 'Z',\nbut non-ASCII letters are unchanged.\n\nTo return a new uppercased value without modifying the existing one, use\n[`to_ascii_uppercase()`].\n\n[`to_ascii_uppercase()`]: #method.to_ascii_uppercase\n\n# Examples\n\n```\nlet mut s = String::from(\"Gr√º√üe, J√ºrgen ‚ù§\");\n\ns.make_ascii_uppercase();\n\nassert_eq!(\"GR√º√üE, J√ºRGEN ‚ù§\", s);\n```","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"5:5374:2031":{"id":"5:5374:2031","crate_id":5,"name":"replace","span":null,"visibility":"public","docs":"Replaces all matches of a pattern with another string.\n\n`replace` creates a new [`String`], and copies the data from this string slice into it.\nWhile doing so, it attempts to find matches of a pattern. If it finds any, it\nreplaces them with the replacement string slice.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"this is old\";\n\nassert_eq!(\"this is new\", s.replace(\"old\", \"new\"));\nassert_eq!(\"than an old\", s.replace(\"is\", \"an\"));\n```\n\nWhen the pattern doesn't match, it returns this string slice as [`String`]:\n\n```\nlet s = \"this is old\";\nassert_eq!(s, s.replace(\"cookie monster\", \"little lamb\"));\n```","links":{"`String`":"5:7239:221"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the replaced string as a new allocation, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["from",{"kind":"generic","inner":"P"}],["to",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:7239:221","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11578:14115","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"5:5389:35895":{"id":"5:5389:35895","crate_id":5,"name":"into_string","span":null,"visibility":"public","docs":"Converts a [`Box<str>`] into a [`String`] without copying or allocating.\n\n# Examples\n\nBasic usage:\n\n```\nlet string = String::from(\"birthday gift\");\nlet boxed_str = string.clone().into_boxed_str();\n\nassert_eq!(boxed_str.into_string(), string);\n```","links":{"`Box<str>`":"5:279:1851","`String`":"5:7239:221"},"attrs":["#[must_use = \"`self` will be dropped if the result is not used\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"resolved_path","inner":{"name":"Box","id":"5:279:1851","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}},{"type":{"kind":"resolved_path","inner":{"name":"Global","id":"5:6988:4425","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:7239:221","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:323-0:952:1784":{"id":"0:323-0:952:1784","crate_id":0,"name":null,"span":{"filename":"src/internals/mod.rs","begin":[5,0],"end":[5,25]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"import","inner":{"source":"self::ctxt::Ctxt","name":"Ctxt","id":"0:952:1784","glob":false}},"2:11900:33143":{"id":"2:11900:33143","crate_id":2,"name":"split_ascii_whitespace","span":null,"visibility":"public","docs":"Splits a string slice by ASCII whitespace.\n\nThe iterator returned will return string slices that are sub-slices of\nthe original string slice, separated by any amount of ASCII whitespace.\n\nTo split by Unicode `Whitespace` instead, use [`split_whitespace`].\n\n[`split_whitespace`]: str::split_whitespace\n\n# Examples\n\nBasic usage:\n\n```\nlet mut iter = \"A few words\".split_ascii_whitespace();\n\nassert_eq!(Some(\"A\"), iter.next());\nassert_eq!(Some(\"few\"), iter.next());\nassert_eq!(Some(\"words\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nAll kinds of ASCII whitespace are considered:\n\n```\nlet mut iter = \" Mary   had\\ta little  \\n\\t lamb\".split_ascii_whitespace();\nassert_eq!(Some(\"Mary\"), iter.next());\nassert_eq!(Some(\"had\"), iter.next());\nassert_eq!(Some(\"a\"), iter.next());\nassert_eq!(Some(\"little\"), iter.next());\nassert_eq!(Some(\"lamb\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nIf the string is empty or all ASCII whitespace, the iterator yields no string slices:\n```\nassert_eq!(\"\".split_ascii_whitespace().next(), None);\nassert_eq!(\"   \".split_ascii_whitespace().next(), None);\n```","links":{"str::split_whitespace":"2:11899:33155"},"attrs":["#[must_use =\n\"this returns the split string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"SplitAsciiWhitespace","id":"2:42928:8194","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11927:25983":{"id":"2:11927:25983","crate_id":2,"name":"rsplit","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by\ncharacters matched by a pattern and yielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`split`] method can be used.\n\n[`split`]: str::split\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".rsplit(' ').collect();\nassert_eq!(v, [\"lamb\", \"little\", \"a\", \"had\", \"Mary\"]);\n\nlet v: Vec<&str> = \"\".rsplit('X').collect();\nassert_eq!(v, [\"\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".rsplit('X').collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"\", \"lion\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".rsplit(\"::\").collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"lion\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".rsplit(|c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"ghi\", \"def\", \"abc\"]);\n```","links":{"self::pattern":"2:11573:14118","`DoubleEndedIterator`":"2:7167:119","prim@char":"1:11872:411","str::split":"2:11921:25979"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"RSplit","id":"2:42663:8103","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11578:14115","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"2:11578:14115","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11593:14116","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11998:35245":{"id":"2:11998:35245","crate_id":2,"name":"escape_unicode","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_unicode`].\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"‚ù§\\n!\".escape_unicode() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"‚ù§\\n!\".escape_unicode());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"\\\\u{{2764}}\\\\u{{a}}\\\\u{{21}}\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"‚ù§\\n!\".escape_unicode().to_string(), \"\\\\u{2764}\\\\u{a}\\\\u{21}\");\n```","links":{"`char::escape_unicode`":"2:4517:35245"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"EscapeUnicode","id":"2:42962:8132","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"5:5372":{"id":"5:5372","crate_id":5,"name":null,"span":null,"visibility":"default","docs":"Methods for string slices.","links":{},"attrs":["#[cfg(not(test))]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"kind":"primitive","inner":"str"},"items":["5:5373:35891","5:5374:2031","5:5377:35892","5:5380:35893","5:5388:35894","5:5389:35895","5:5390:3271","5:5391:2311","5:5392:2310"],"negative":false,"synthetic":false,"blanket_impl":null}},"2:11917:4091":{"id":"2:11917:4091","crate_id":2,"name":"rfind","span":null,"visibility":"public","docs":"Returns the byte index for the first character of the last match of the pattern in\nthis string slice.\n\nReturns [`None`] if the pattern doesn't match.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nlet s = \"L√∂we ËÄÅËôé L√©opard Gepardi\";\n\nassert_eq!(s.rfind('L'), Some(13));\nassert_eq!(s.rfind('√©'), Some(14));\nassert_eq!(s.rfind(\"pard\"), Some(24));\n```\n\nMore complex patterns with closures:\n\n```\nlet s = \"L√∂we ËÄÅËôé L√©opard\";\n\nassert_eq!(s.rfind(char::is_whitespace), Some(12));\nassert_eq!(s.rfind(char::is_lowercase), Some(20));\n```\n\nNot finding the pattern:\n\n```\nlet s = \"L√∂we ËÄÅËôé L√©opard\";\nlet x: &[_] = &['1', '2'];\n\nassert_eq!(s.rfind(x), None);\n```","links":{"`None`":"2:40682:176","prim@char":"1:11872:411","self::pattern":"2:11573:14118"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:40680:178","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11578:14115","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"2:11578:14115","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11593:14116","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11962:35236":{"id":"2:11962:35236","crate_id":2,"name":"trim_start","span":null,"visibility":"public","docs":"Returns a string slice with leading whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Text directionality\n\nA string is a sequence of bytes. `start` in this context means the first\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be left side, and for right-to-left languages like\nArabic or Hebrew, this will be the right side.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\nassert_eq!(\"Hello\\tworld\\t\\n\", s.trim_start());\n```\n\nDirectionality:\n\n```\nlet s = \"  English  \";\nassert!(Some('E') == s.trim_start().chars().next());\n\nlet s = \"  ◊¢◊ë◊®◊ô◊™  \";\nassert!(Some('◊¢') == s.trim_start().chars().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_trim_start\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11893:35226":{"id":"2:11893:35226","crate_id":2,"name":"slice_mut_unchecked","span":null,"visibility":"public","docs":"Creates a string slice from another string slice, bypassing safety\nchecks.\nThis is generally not recommended, use with caution! For a safe\nalternative see [`str`] and [`IndexMut`].\n\n[`IndexMut`]: crate::ops::IndexMut\n\nThis new slice goes from `begin` to `end`, including `begin` but\nexcluding `end`.\n\nTo get an immutable string slice instead, see the\n[`slice_unchecked`] method.\n\n[`slice_unchecked`]: str::slice_unchecked\n\n# Safety\n\nCallers of this function are responsible that three preconditions are\nsatisfied:\n\n* `begin` must not exceed `end`.\n* `begin` and `end` must be byte positions within the string slice.\n* `begin` and `end` must lie on UTF-8 sequence boundaries.","links":{"`str`":"1:11878:1380","crate::ops::IndexMut":"2:2997:3229","str::slice_unchecked":"2:11892:35225"},"attrs":["#[deprecated(since = \"1.29.0\", note =\n\"use `get_unchecked_mut(begin..end)` instead\")]"],"deprecation":{"since":"1.29.0","note":"use `get_unchecked_mut(begin..end)` instead"},"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["begin",{"kind":"primitive","inner":"usize"}],["end",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}},"2:11945:35231":{"id":"2:11945:35231","crate_id":2,"name":"rsplit_once","span":null,"visibility":"public","docs":"Splits the string on the last occurrence of the specified delimiter and\nreturns prefix before delimiter and suffix after delimiter.\n\n# Examples\n\n```\nassert_eq!(\"cfg\".rsplit_once('='), None);\nassert_eq!(\"cfg=foo\".rsplit_once('='), Some((\"cfg\", \"foo\")));\nassert_eq!(\"cfg=foo=bar\".rsplit_once('='), Some((\"cfg=foo\", \"bar\")));\n```","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["delimiter",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:40680:178","args":{"angle_bracketed":{"args":[{"type":{"kind":"tuple","inner":[{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}},{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11578:14115","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"2:11578:14115","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11593:14116","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11892:35225":{"id":"2:11892:35225","crate_id":2,"name":"slice_unchecked","span":null,"visibility":"public","docs":"Creates a string slice from another string slice, bypassing safety\nchecks.\n\nThis is generally not recommended, use with caution! For a safe\nalternative see [`str`] and [`Index`].\n\n[`Index`]: crate::ops::Index\n\nThis new slice goes from `begin` to `end`, including `begin` but\nexcluding `end`.\n\nTo get a mutable string slice instead, see the\n[`slice_mut_unchecked`] method.\n\n[`slice_mut_unchecked`]: str::slice_mut_unchecked\n\n# Safety\n\nCallers of this function are responsible that three preconditions are\nsatisfied:\n\n* `begin` must not exceed `end`.\n* `begin` and `end` must be byte positions within the string slice.\n* `begin` and `end` must lie on UTF-8 sequence boundaries.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"L√∂we ËÄÅËôé L√©opard\";\n\nunsafe {\n    assert_eq!(\"L√∂we ËÄÅËôé L√©opard\", s.slice_unchecked(0, 21));\n}\n\nlet s = \"Hello, world!\";\n\nunsafe {\n    assert_eq!(\"world\", s.slice_unchecked(7, 12));\n}\n```","links":{"`str`":"1:11878:1380","str::slice_mut_unchecked":"2:11893:35226","crate::ops::Index":"2:2993:2270"},"attrs":["#[deprecated(since = \"1.29.0\", note =\n\"use `get_unchecked(begin..end)` instead\")]","#[must_use]"],"deprecation":{"since":"1.29.0","note":"use `get_unchecked(begin..end)` instead"},"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["begin",{"kind":"primitive","inner":"usize"}],["end",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}},"2:11904:1931":{"id":"2:11904:1931","crate_id":2,"name":"contains","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a sub-slice of\nthis string slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nBasic usage:\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.contains(\"nana\"));\nassert!(!bananas.contains(\"apples\"));\n```","links":{"prim@char":"1:11872:411","self::pattern":"2:11573:14118"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11578:14115","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11873:2001":{"id":"2:11873:2001","crate_id":2,"name":"is_empty","span":null,"visibility":"public","docs":"Returns `true` if `self` has a length of zero bytes.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\";\nassert!(s.is_empty());\n\nlet s = \"not empty\";\nassert!(!s.is_empty());\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11895:25972":{"id":"2:11895:25972","crate_id":2,"name":"split_at_mut","span":null,"visibility":"public","docs":"Divide one mutable string slice into two at an index.\n\nThe argument, `mid`, should be a byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get immutable string slices instead, see the [`split_at`] method.\n\n[`split_at`]: str::split_at\n\n# Panics\n\nPanics if `mid` is not on a UTF-8 code point boundary, or if it is\npast the end of the last code point of the string slice.\n\n# Examples\n\nBasic usage:\n\n```\nlet mut s = \"Per Martin-L√∂f\".to_string();\n{\n    let (first, last) = s.split_at_mut(3);\n    first.make_ascii_uppercase();\n    assert_eq!(\"PER\", first);\n    assert_eq!(\" Martin-L√∂f\", last);\n}\nassert_eq!(\"PER Martin-L√∂f\", s);\n```","links":{"str::split_at":"2:11894:25971"},"attrs":["#[must_use]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["mid",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"tuple","inner":[{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"primitive","inner":"str"}}},{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"primitive","inner":"str"}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11896:2320":{"id":"2:11896:2320","crate_id":2,"name":"chars","span":null,"visibility":"public","docs":"Returns an iterator over the [`char`]s of a string slice.\n\nAs a string slice consists of valid UTF-8, we can iterate through a\nstring slice by [`char`]. This method returns such an iterator.\n\nIt's important to remember that [`char`] represents a Unicode Scalar\nValue, and might not match your idea of what a 'character' is. Iteration\nover grapheme clusters may be what you actually want. This functionality\nis not provided by Rust's standard library, check crates.io instead.\n\n# Examples\n\nBasic usage:\n\n```\nlet word = \"goodbye\";\n\nlet count = word.chars().count();\nassert_eq!(7, count);\n\nlet mut chars = word.chars();\n\nassert_eq!(Some('g'), chars.next());\nassert_eq!(Some('o'), chars.next());\nassert_eq!(Some('o'), chars.next());\nassert_eq!(Some('d'), chars.next());\nassert_eq!(Some('b'), chars.next());\nassert_eq!(Some('y'), chars.next());\nassert_eq!(Some('e'), chars.next());\n\nassert_eq!(None, chars.next());\n```\n\nRemember, [`char`]s might not match your intuition about characters:\n\n[`char`]: prim@char\n\n```\nlet y = \"yÃÜ\";\n\nlet mut chars = y.chars();\n\nassert_eq!(Some('y'), chars.next()); // not 'yÃÜ'\nassert_eq!(Some('\\u{0306}'), chars.next());\n\nassert_eq!(None, chars.next());\n```","links":{"prim@char":"1:11872:411"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Chars","id":"2:42615:8174","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11902:35227":{"id":"2:11902:35227","crate_id":2,"name":"lines_any","span":null,"visibility":"public","docs":"An iterator over the lines of a string.","links":{},"attrs":["#[deprecated(since = \"1.4.0\", note = \"use lines() instead now\")]"],"deprecation":{"since":"1.4.0","note":"use lines() instead now"},"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"LinesAny","id":"2:42909:8192","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11913:2539":{"id":"2:11913:2539","crate_id":2,"name":"find","span":null,"visibility":"public","docs":"Returns the byte index of the first character of this string slice that\nmatches the pattern.\n\nReturns [`None`] if the pattern doesn't match.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nlet s = \"L√∂we ËÄÅËôé L√©opard Gepardi\";\n\nassert_eq!(s.find('L'), Some(0));\nassert_eq!(s.find('√©'), Some(14));\nassert_eq!(s.find(\"pard\"), Some(17));\n```\n\nMore complex patterns using point-free style and closures:\n\n```\nlet s = \"L√∂we ËÄÅËôé L√©opard\";\n\nassert_eq!(s.find(char::is_whitespace), Some(5));\nassert_eq!(s.find(char::is_lowercase), Some(1));\nassert_eq!(s.find(|c: char| c.is_whitespace() || c.is_lowercase()), Some(1));\nassert_eq!(s.find(|c: char| (c < 'o') && (c > 'a')), Some(4));\n```\n\nNot finding the pattern:\n\n```\nlet s = \"L√∂we ËÄÅËôé L√©opard\";\nlet x: &[_] = &['1', '2'];\n\nassert_eq!(s.find(x), None);\n```","links":{"`None`":"2:40682:176","prim@char":"1:11872:411","self::pattern":"2:11573:14118"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:40680:178","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11578:14115","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11903:33132":{"id":"2:11903:33132","crate_id":2,"name":"encode_utf16","span":null,"visibility":"public","docs":"Returns an iterator of `u16` over the string encoded as UTF-16.\n\n# Examples\n\nBasic usage:\n\n```\nlet text = \"Za≈º√≥≈Çƒá gƒô≈õlƒÖ ja≈∫≈Ñ\";\n\nlet utf8_len = text.len();\nlet utf16_len = text.encode_utf16().count();\n\nassert!(utf16_len <= utf8_len);\n```","links":{},"attrs":["#[must_use =\n\"this returns the encoded string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"EncodeUtf16","id":"2:42937:8195","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11907:25989":{"id":"2:11907:25989","crate_id":2,"name":"starts_with","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a prefix of this\nstring slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nBasic usage:\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.starts_with(\"bana\"));\nassert!(!bananas.starts_with(\"nana\"));\n```","links":{"prim@char":"1:11872:411","self::pattern":"2:11573:14118"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11578:14115","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11942:35230":{"id":"2:11942:35230","crate_id":2,"name":"split_once","span":null,"visibility":"public","docs":"Splits the string on the first occurrence of the specified delimiter and\nreturns prefix before delimiter and suffix after delimiter.\n\n# Examples\n\n```\nassert_eq!(\"cfg\".split_once('='), None);\nassert_eq!(\"cfg=\".split_once('='), Some((\"cfg\", \"\")));\nassert_eq!(\"cfg=foo\".split_once('='), Some((\"cfg\", \"foo\")));\nassert_eq!(\"cfg=foo=bar\".split_once('='), Some((\"cfg\", \"foo=bar\")));\n```","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["delimiter",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:40680:178","args":{"angle_bracketed":{"args":[{"type":{"kind":"tuple","inner":[{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}},{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11578:14115","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11898:8092":{"id":"2:11898:8092","crate_id":2,"name":"bytes","span":null,"visibility":"public","docs":"An iterator over the bytes of a string slice.\n\nAs a string slice consists of a sequence of bytes, we can iterate\nthrough a string slice by byte. This method returns such an iterator.\n\n# Examples\n\nBasic usage:\n\n```\nlet mut bytes = \"bors\".bytes();\n\nassert_eq!(Some(b'b'), bytes.next());\nassert_eq!(Some(b'o'), bytes.next());\nassert_eq!(Some(b'r'), bytes.next());\nassert_eq!(Some(b's'), bytes.next());\n\nassert_eq!(None, bytes.next());\n```","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Bytes","id":"2:42631:2743","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11951:35232":{"id":"2:11951:35232","crate_id":2,"name":"rmatches","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within this string slice,\nyielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`matches`] method can be used.\n\n[`matches`]: str::matches\n\n# Examples\n\nBasic usage:\n\n```\nlet v: Vec<&str> = \"abcXXXabcYYYabc\".rmatches(\"abc\").collect();\nassert_eq!(v, [\"abc\", \"abc\", \"abc\"]);\n\nlet v: Vec<&str> = \"1abc2abc3\".rmatches(char::is_numeric).collect();\nassert_eq!(v, [\"3\", \"2\", \"1\"]);\n```","links":{"self::pattern":"2:11573:14118","`DoubleEndedIterator`":"2:7167:119","prim@char":"1:11872:411","str::matches":"2:11948:3071"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"RMatches","id":"2:42867:8190","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11578:14115","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"2:11578:14115","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11593:14116","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11966:35238":{"id":"2:11966:35238","crate_id":2,"name":"trim_left","span":null,"visibility":"public","docs":"Returns a string slice with leading whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`.\n\n# Text directionality\n\nA string is a sequence of bytes. 'Left' in this context means the first\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _right_ side, not the left.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \" Hello\\tworld\\t\";\n\nassert_eq!(\"Hello\\tworld\\t\", s.trim_left());\n```\n\nDirectionality:\n\n```\nlet s = \"  English\";\nassert!(Some('E') == s.trim_left().chars().next());\n\nlet s = \"  ◊¢◊ë◊®◊ô◊™\";\nassert!(Some('◊¢') == s.trim_left().chars().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_start`\", suggestion\n= \"trim_start\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_start`"},"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11967:35239":{"id":"2:11967:35239","crate_id":2,"name":"trim_right","span":null,"visibility":"public","docs":"Returns a string slice with trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`.\n\n# Text directionality\n\nA string is a sequence of bytes. 'Right' in this context means the last\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _left_ side, not the right.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \" Hello\\tworld\\t\";\n\nassert_eq!(\" Hello\\tworld\", s.trim_right());\n```\n\nDirectionality:\n\n```\nlet s = \"English  \";\nassert!(Some('h') == s.trim_right().chars().rev().next());\n\nlet s = \"◊¢◊ë◊®◊ô◊™  \";\nassert!(Some('◊™') == s.trim_right().chars().rev().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_end`\", suggestion =\n\"trim_end\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_end`"},"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11960:35235":{"id":"2:11960:35235","crate_id":2,"name":"trim","span":null,"visibility":"public","docs":"Returns a string slice with leading and trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\n\nassert_eq!(\"Hello\\tworld\", s.trim());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a slice, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_trim\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11948:3071":{"id":"2:11948:3071","crate_id":2,"name":"matches","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within the given string\nslice.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rmatches`] method can be used.\n\n[`rmatches`]: str::matches\n\n# Examples\n\nBasic usage:\n\n```\nlet v: Vec<&str> = \"abcXXXabcYYYabc\".matches(\"abc\").collect();\nassert_eq!(v, [\"abc\", \"abc\", \"abc\"]);\n\nlet v: Vec<&str> = \"1abc2abc3\".matches(char::is_numeric).collect();\nassert_eq!(v, [\"1\", \"2\", \"3\"]);\n```","links":{"self::pattern":"2:11573:14118","`DoubleEndedIterator`":"2:7167:119","prim@char":"1:11872:411","str::matches":"2:11948:3071"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Matches","id":"2:42849:8189","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11578:14115","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11980:35241":{"id":"2:11980:35241","crate_id":2,"name":"trim_end_matches","span":null,"visibility":"public","docs":"Returns a string slice with all suffixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. `end` in this context means the last\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be right side, and for right-to-left languages like\nArabic or Hebrew, this will be the left side.\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_end_matches('1'), \"11foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_end_matches(char::is_numeric), \"123foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_end_matches(x), \"12foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1fooX\".trim_end_matches(|c| c == '1' || c == 'X'), \"1foo\");\n```","links":{"prim@char":"1:11872:411","self::pattern":"2:11573:14118"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11578:14115","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"2:11578:14115","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11593:14116","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11986:35243":{"id":"2:11986:35243","crate_id":2,"name":"trim_right_matches","span":null,"visibility":"public","docs":"Returns a string slice with all suffixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. 'Right' in this context means the last\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _left_ side, not the right.\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_right_matches('1'), \"11foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_right_matches(char::is_numeric), \"123foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_right_matches(x), \"12foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1fooX\".trim_right_matches(|c| c == '1' || c == 'X'), \"1foo\");\n```","links":{"prim@char":"1:11872:411","self::pattern":"2:11573:14118"},"attrs":["#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_end_matches`\",\nsuggestion = \"trim_end_matches\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_end_matches`"},"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11578:14115","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"2:11578:14115","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11593:14116","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11954:35233":{"id":"2:11954:35233","crate_id":2,"name":"match_indices","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within this string\nslice as well as the index that the match starts at.\n\nFor matches of `pat` within `self` that overlap, only the indices\ncorresponding to the first match are returned.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rmatch_indices`] method can be used.\n\n[`rmatch_indices`]: str::rmatch_indices\n\n# Examples\n\nBasic usage:\n\n```\nlet v: Vec<_> = \"abcXXXabcYYYabc\".match_indices(\"abc\").collect();\nassert_eq!(v, [(0, \"abc\"), (6, \"abc\"), (12, \"abc\")]);\n\nlet v: Vec<_> = \"1abcabc2\".match_indices(\"abc\").collect();\nassert_eq!(v, [(1, \"abc\"), (4, \"abc\")]);\n\nlet v: Vec<_> = \"ababa\".match_indices(\"aba\").collect();\nassert_eq!(v, [(0, \"aba\")]); // only the first `aba`\n```","links":{"self::pattern":"2:11573:14118","`DoubleEndedIterator`":"2:7167:119","prim@char":"1:11872:411","str::rmatch_indices":"2:11957:35234"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"MatchIndices","id":"2:42795:8186","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11578:14115","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11997:3376":{"id":"2:11997:3376","crate_id":2,"name":"escape_default","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_default`].\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"‚ù§\\n!\".escape_default() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"‚ù§\\n!\".escape_default());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"\\\\u{{2764}}\\\\n!\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"‚ù§\\n!\".escape_default().to_string(), \"\\\\u{2764}\\\\n!\");\n```","links":{"`char::escape_default`":"2:4520:3376"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"EscapeDefault","id":"2:42953:3377","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"5:5390:3271":{"id":"5:5390:3271","crate_id":5,"name":"repeat","span":null,"visibility":"public","docs":"Creates a new [`String`] by repeating a string `n` times.\n\n# Panics\n\nThis function will panic if the capacity would overflow.\n\n# Examples\n\nBasic usage:\n\n```\nassert_eq!(\"abc\".repeat(4), String::from(\"abcabcabcabc\"));\n```\n\nA panic upon overflow:\n\n```should_panic\n// this will panic at runtime\nlet huge = \"0123456789abcdef\".repeat(usize::MAX);\n```","links":{"`String`":"5:7239:221"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["n",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:7239:221","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"paths":{"1:2388:2976":{"crate_id":1,"path":["std","io"],"kind":"module"},"6:4819:6897":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlmsghdr"],"kind":"struct"},"2:12189:34376":{"crate_id":2,"path":["core","future","join","MaybeDone"],"kind":"enum"},"1:5249:118":{"crate_id":1,"path":["std","path","Display"],"kind":"struct"},"17:9876:5027":{"crate_id":17,"path":["object","read","elf","note","Note"],"kind":"struct"},"11:2053:8040":{"crate_id":11,"path":["hashbrown","set","Entry"],"kind":"enum"},"17:12006:5448":{"crate_id":17,"path":["object","macho","FvmlibCommand"],"kind":"struct"},"24:5271:2157":{"crate_id":24,"path":["syn","path","PathArguments"],"kind":"enum"},"18:515:5032":{"crate_id":18,"path":["memchr","memmem","prefilter","PrefilterFn"],"kind":"struct"},"2:21720:32417":{"crate_id":2,"path":["core","num","fmt","Part"],"kind":"enum"},"24:3330:3439":{"crate_id":24,"path":["syn","token","Use"],"kind":"struct"},"2:20835:9009":{"crate_id":2,"path":["core","core_simd","masks","to_bitmask","ToBitMask"],"kind":"trait"},"2:2686:225":{"crate_id":2,"path":["core","marker","Sync"],"kind":"trait"},"16:7498:8045":{"crate_id":16,"path":["gimli","read","pubtypes","PubTypesEntry"],"kind":"struct"},"24:1962:3222":{"crate_id":24,"path":["syn","punctuated","PrivateIter"],"kind":"struct"},"22:925:1867":{"crate_id":22,"path":["proc_macro2","Spacing"],"kind":"enum"},"2:41991:8169":{"crate_id":2,"path":["core","hash","sip","Sip13Rounds"],"kind":"struct"},"2:7088:3286":{"crate_id":2,"path":["core","iter","traits","accum","Sum"],"kind":"trait"},"24:2922:3425":{"crate_id":24,"path":["syn","token","Let"],"kind":"struct"},"18:80:24829":{"crate_id":18,"path":["memchr","memchr","iter","Memchr"],"kind":"struct"},"24:4317:3479":{"crate_id":24,"path":["syn","token","Shl"],"kind":"struct"},"5:4722:659":{"crate_id":5,"path":["alloc","fmt"],"kind":"module"},"1:10856:7771":{"crate_id":1,"path":["std","sys","unix","process","process_common","ExitCode"],"kind":"struct"},"2:46562:7684":{"crate_id":2,"path":["core","core_arch","x86","__m128i"],"kind":"struct"},"1:5356:8943":{"crate_id":1,"path":["std","process","ChildStdout"],"kind":"struct"},"2:44910:7612":{"crate_id":2,"path":["core","core_arch","simd","f32x4"],"kind":"struct"},"2:42511:14098":{"crate_id":2,"path":["core","slice","iter","ArrayChunksMut"],"kind":"struct"},"17:10660:5225":{"crate_id":17,"path":["object","read","pe","relocation","Relocation"],"kind":"struct"},"6:1695:6629":{"crate_id":6,"path":["libc","unix","linux_like","arphdr"],"kind":"struct"},"24:4479:3123":{"crate_id":24,"path":["syn","attr","Attribute"],"kind":"struct"},"24:4056:3461":{"crate_id":24,"path":["syn","token","Le"],"kind":"struct"},"24:4242:3474":{"crate_id":24,"path":["syn","token","PlusEq"],"kind":"struct"},"6:573:6495":{"crate_id":6,"path":["libc","unix","itimerval"],"kind":"struct"},"22:505:3238":{"crate_id":22,"path":["proc_macro2","LexError"],"kind":"struct"},"1:1930:8771":{"crate_id":1,"path":["std","error","Indented"],"kind":"struct"},"16:6793:8023":{"crate_id":16,"path":["gimli","read","line","CompleteLineProgram"],"kind":"struct"},"1:8896:8352":{"crate_id":1,"path":["std","sync","mpmc","array","ArrayToken"],"kind":"struct"},"17:9577:5160":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbolTable"],"kind":"struct"},"21:2539:4535":{"crate_id":21,"path":["proc_macro","bridge","ExpnGlobals"],"kind":"struct"},"5:2898:7428":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Immut"],"kind":"struct"},"5:623:8640":{"crate_id":5,"path":["alloc","boxed","from","StringError"],"kind":"struct"},"24:877:36925":{"crate_id":24,"path":["syn","generics","LifetimesMut"],"kind":"struct"},"1:591:2276":{"crate_id":1,"path":["std","ascii","AsciiExt"],"kind":"trait"},"2:2498:73":{"crate_id":2,"path":["core","convert","AsMut"],"kind":"trait"},"24:909:36926":{"crate_id":24,"path":["syn","generics","ConstParamsMut"],"kind":"struct"},"2:43209:8208":{"crate_id":2,"path":["core","str","pattern","StrSearcher"],"kind":"struct"},"6:1514:6514":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreq"],"kind":"struct"},"24:4892:3166":{"crate_id":24,"path":["syn","expr","ExprReturn"],"kind":"struct"},"6:541:6479":{"crate_id":6,"path":["libc","unix","iovec"],"kind":"struct"},"24:5120:3181":{"crate_id":24,"path":["syn","lit","LitByte"],"kind":"struct"},"1:6867:8656":{"crate_id":1,"path":["std","sys_common","backtrace","_print","DisplayBacktrace"],"kind":"struct"},"2:40798:3699":{"crate_id":2,"path":["core","panic","panic_info","PanicInfo"],"kind":"struct"},"2:42944:8138":{"crate_id":2,"path":["core","str","iter","EscapeDebug"],"kind":"struct"},"17:11234:5281":{"crate_id":17,"path":["object","elf","FileHeader32"],"kind":"struct"},"6:5868:7117":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","rtentry"],"kind":"struct"},"24:599:3219":{"crate_id":24,"path":["syn","error","IntoIter"],"kind":"struct"},"2:2824:4994":{"crate_id":2,"path":["core","ops","bit","BitAnd"],"kind":"trait"},"17:8195:20908":{"crate_id":17,"path":["object","common","Architecture"],"kind":"enum"},"2:1655:1075":{"crate_id":2,"path":["core","ptr"],"kind":"module"},"6:1589:6555":{"crate_id":6,"path":["libc","unix","linux_like","tm"],"kind":"struct"},"1:11843:8725":{"crate_id":1,"path":["std","backtrace_rs","types","BytesOrWideString"],"kind":"enum"},"24:4794:3144":{"crate_id":24,"path":["syn","expr","ExprBlock"],"kind":"struct"},"2:42199:8171":{"crate_id":2,"path":["core","slice","ascii","EscapeByte"],"kind":"struct"},"2:3380:14133":{"crate_id":2,"path":["core","any","Provider"],"kind":"trait"},"24:5116:2005":{"crate_id":24,"path":["syn","lit","LitStr"],"kind":"struct"},"21:245:36768":{"crate_id":21,"path":["proc_macro","bridge","handle","OwnedStore"],"kind":"struct"},"1:3136:29458":{"crate_id":1,"path":["std","io","stdio","StderrRaw"],"kind":"struct"},"6:1541:6525":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_in"],"kind":"struct"},"2:41981:7565":{"crate_id":2,"path":["core","hash","sip","State"],"kind":"struct"},"24:4900:3168":{"crate_id":24,"path":["syn","expr","ExprTry"],"kind":"struct"},"16:6854:6121":{"crate_id":16,"path":["gimli","read","line","FileEntryFormat"],"kind":"struct"},"2:39994:3274":{"crate_id":2,"path":["core","iter","sources","repeat_n","RepeatN"],"kind":"struct"},"2:46360:7679":{"crate_id":2,"path":["core","core_arch","simd","u32x16"],"kind":"struct"},"6:1723:6642":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_storage"],"kind":"struct"},"5:1048:36487":{"crate_id":5,"path":["alloc","collections","btree","borrow","DormantMutRef"],"kind":"struct"},"2:21658:7443":{"crate_id":2,"path":["core","num","diy_float","Fp"],"kind":"struct"},"1:6238:203":{"crate_id":1,"path":["std","sync","mpmc","Receiver"],"kind":"struct"},"17:11319:5308":{"crate_id":17,"path":["object","elf","SectionHeader64"],"kind":"struct"},"17:13265:5783":{"crate_id":17,"path":["object","pe","ImageArchiveMemberHeader"],"kind":"struct"},"17:8667:5140":{"crate_id":17,"path":["object","endian","BigEndian"],"kind":"struct"},"11:387:36610":{"crate_id":11,"path":["hashbrown","raw","RawIterHash"],"kind":"struct"},"17:9068:36691":{"crate_id":17,"path":["object","read","any","SegmentInternal"],"kind":"enum"},"1:5572:4872":{"crate_id":1,"path":["std","sync","mpsc","SyncSender"],"kind":"struct"},"24:5485:2211":{"crate_id":24,"path":["syn","ty","ReturnType"],"kind":"enum"},"5:7028:36480":{"crate_id":5,"path":["alloc","collections","btree","merge_iter","Peeked"],"kind":"enum"},"24:1736:8662":{"crate_id":24,"path":["syn","print","TokensOrDefault"],"kind":"struct"},"18:644:5029":{"crate_id":18,"path":["memchr","memmem","x86","avx","nostd","Forward"],"kind":"struct"},"1:8249:8923":{"crate_id":1,"path":["std","os","linux","process","PidFd"],"kind":"struct"},"16:8142:20871":{"crate_id":16,"path":["gimli","read","unit","EntriesTreeIter"],"kind":"struct"},"6:4387:6730":{"crate_id":6,"path":["libc","unix","linux_like","linux","msginfo"],"kind":"struct"},"5:870:3220":{"crate_id":5,"path":["alloc","collections","binary_heap","Iter"],"kind":"struct"},"1:11893:1474":{"crate_id":1,"path":["std","u128"],"kind":"primitive"},"1:2347:8791":{"crate_id":1,"path":["std","fs","symlink_metadata"],"kind":"function"},"2:39369:14170":{"crate_id":2,"path":["core","char","CaseMappingIter"],"kind":"enum"},"6:4848:6912":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_ifru_map"],"kind":"struct"},"17:12607:5559":{"crate_id":17,"path":["object","macho","Nlist64"],"kind":"struct"},"21:649:3389":{"crate_id":21,"path":["proc_macro","diagnostic","MultiSpan"],"kind":"trait"},"17:11556:5346":{"crate_id":17,"path":["object","elf","Verdef"],"kind":"struct"},"17:13612:5887":{"crate_id":17,"path":["object","pe","ImageHotPatchInfo"],"kind":"struct"},"17:13332:5797":{"crate_id":17,"path":["object","pe","ImageTlsDirectory64"],"kind":"struct"},"2:3246:3361":{"crate_id":2,"path":["core","ops","unsize","DispatchFromDyn"],"kind":"trait"},"1:5721:8351":{"crate_id":1,"path":["std","sync","condvar","Condvar"],"kind":"struct"},"2:50273:7703":{"crate_id":2,"path":["core","core_simd","vector","ptr","SimdConstPtr"],"kind":"struct"},"5:6997:3219":{"crate_id":5,"path":["alloc","collections","binary_heap","IntoIter"],"kind":"struct"},"1:3459:8806":{"crate_id":1,"path":["std","io","Seek"],"kind":"trait"},"16:8269:126":{"crate_id":16,"path":["gimli","read","Error"],"kind":"enum"},"16:2967:19993":{"crate_id":16,"path":["gimli","common","SectionId"],"kind":"enum"},"2:40631:8238":{"crate_id":2,"path":["core","net","socket_addr","SocketAddr"],"kind":"enum"},"17:247:36681":{"crate_id":17,"path":["object","read","util","DebugLen"],"kind":"struct"},"24:5160:3187":{"crate_id":24,"path":["syn","mac","MacroDelimiter"],"kind":"enum"},"2:2800:5005":{"crate_id":2,"path":["core","ops","arith","SubAssign"],"kind":"trait"},"20:45:3097":{"crate_id":20,"path":["quote","ident_fragment","IdentFragment"],"kind":"trait"},"17:10303:21025":{"crate_id":17,"path":["object","read","macho","section","MachOSection"],"kind":"struct"},"6:6712:7317":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user_regs_struct"],"kind":"struct"},"16:4568:6047":{"crate_id":16,"path":["gimli","constants","DwAccess"],"kind":"struct"},"6:4881:6929":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_sndrcvinfo"],"kind":"struct"},"10:36:6359":{"crate_id":10,"path":["adler","algo","U32X4"],"kind":"struct"},"21:1828:4533":{"crate_id":21,"path":["proc_macro","bridge","Marked"],"kind":"struct"},"1:9990:30275":{"crate_id":1,"path":["std","sys","unix","os","Env"],"kind":"struct"},"16:6201:20855":{"crate_id":16,"path":["gimli","read","dwarf","DwarfPackage"],"kind":"struct"},"21:108:4543":{"crate_id":21,"path":["proc_macro","bridge","client","Bridge"],"kind":"struct"},"1:11045:7782":{"crate_id":1,"path":["std","sys","unix","time","SystemTime"],"kind":"struct"},"24:2548:3410":{"crate_id":24,"path":["syn","token","As"],"kind":"struct"},"5:6988:4425":{"crate_id":5,"path":["alloc","alloc","Global"],"kind":"struct"},"2:11644:14124":{"crate_id":2,"path":["core","str","pattern","MultiCharEqPattern"],"kind":"struct"},"16:4789:6053":{"crate_id":16,"path":["gimli","constants","DwCc"],"kind":"struct"},"2:9069:110":{"crate_id":2,"path":["core","fmt","Debug"],"kind":"trait"},"18:507:5029":{"crate_id":18,"path":["memchr","memmem","genericsimd","Forward"],"kind":"struct"},"17:11060:5225":{"crate_id":17,"path":["object","read","Relocation"],"kind":"struct"},"2:2859:5009":{"crate_id":2,"path":["core","ops","bit","BitXorAssign"],"kind":"trait"},"18:624:36695":{"crate_id":18,"path":["memchr","memmem","twoway","SuffixOrdering"],"kind":"enum"},"17:13516:5849":{"crate_id":17,"path":["object","pe","ImageLoadConfigDirectory32"],"kind":"struct"},"1:10933:4894":{"crate_id":1,"path":["std","sys","unix","process","process_inner","posix_spawn","PosixSpawnFileActions"],"kind":"struct"},"2:10028:14103":{"crate_id":2,"path":["core","slice","iter","SplitMut"],"kind":"struct"},"1:8231:7750":{"crate_id":1,"path":["std","os","unix","ucred","UCred"],"kind":"struct"},"16:5693:7927":{"crate_id":16,"path":["gimli","read","cfi","BaseAddresses"],"kind":"struct"},"5:0:283":{"crate_id":5,"path":["alloc"],"kind":"module"},"5:4311:242":{"crate_id":5,"path":["alloc","collections","vec_deque","VecDeque"],"kind":"struct"},"17:8651:5139":{"crate_id":17,"path":["object","endian","LittleEndian"],"kind":"struct"},"6:6788:7365":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","shmid_ds"],"kind":"struct"},"16:8214:2549":{"crate_id":16,"path":["gimli","read","value","Value"],"kind":"enum"},"2:6844:3265":{"crate_id":2,"path":["core","iter","sources","empty","Empty"],"kind":"struct"},"2:43571:208":{"crate_id":2,"path":["core","future","ResumeTy"],"kind":"struct"},"16:2357:5982":{"crate_id":16,"path":["gimli","common","Register"],"kind":"struct"},"11:777:4789":{"crate_id":11,"path":["hashbrown","map","ConsumeAllOnDrop"],"kind":"struct"},"11:393:36612":{"crate_id":11,"path":["hashbrown","raw","RawIterHashInner"],"kind":"struct"},"1:1774:601":{"crate_id":1,"path":["std","env"],"kind":"module"},"1:8223:8854":{"crate_id":1,"path":["std","os","unix","net","listener","Incoming"],"kind":"struct"},"1:8725:183":{"crate_id":1,"path":["std","process","Output"],"kind":"struct"},"5:279:1851":{"crate_id":5,"path":["alloc","boxed","Box"],"kind":"struct"},"6:1645:6599":{"crate_id":6,"path":["libc","unix","linux_like","in_pktinfo"],"kind":"struct"},"24:5029:2444":{"crate_id":24,"path":["syn","generics","TraitBound"],"kind":"struct"},"2:7190:3283":{"crate_id":2,"path":["core","iter","traits","exact_size","ExactSizeIterator"],"kind":"trait"},"6:1520:6517":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreqn"],"kind":"struct"},"24:2565:3411":{"crate_id":24,"path":["syn","token","Async"],"kind":"struct"},"24:4924:3174":{"crate_id":24,"path":["syn","expr","ExprYield"],"kind":"struct"},"17:10015:21058":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldSubCache"],"kind":"struct"},"16:7859:20869":{"crate_id":16,"path":["gimli","read","unit","AttributeValue"],"kind":"enum"},"2:39694:3308":{"crate_id":2,"path":["core","iter","adapters","scan","Scan"],"kind":"struct"},"1:8275:7751":{"crate_id":1,"path":["std","os","fd","owned","BorrowedFd"],"kind":"struct"},"24:4577:2136":{"crate_id":24,"path":["syn","expr","Expr"],"kind":"enum"},"2:43384:8225":{"crate_id":2,"path":["core","str","IsAsciiWhitespace"],"kind":"struct"},"1:7843:8652":{"crate_id":1,"path":["std","io","buffered","IntoInnerError"],"kind":"struct"},"1:8253:7275":{"crate_id":1,"path":["std","os","linux","raw","arch","stat"],"kind":"struct"},"2:39633:3304":{"crate_id":2,"path":["core","iter","adapters","inspect","Inspect"],"kind":"struct"},"2:8179:3701":{"crate_id":2,"path":["core","panic","unwind_safe","RefUnwindSafe"],"kind":"trait"},"1:10215:30276":{"crate_id":1,"path":["std","sys","unix","process","process_common","Argv"],"kind":"struct"},"6:4271:6657":{"crate_id":6,"path":["libc","unix","linux_like","linux","rlimit64"],"kind":"struct"},"1:8209:8894":{"crate_id":1,"path":["std","os","unix","net","ancillary","AncillaryError"],"kind":"enum"},"24:3812:3445":{"crate_id":24,"path":["syn","token","AndEq"],"kind":"struct"},"5:1403:8070":{"crate_id":5,"path":["alloc","collections","btree","map","Values"],"kind":"struct"},"22:729:1804":{"crate_id":22,"path":["proc_macro2","fallback","Ident"],"kind":"struct"},"6:1677:6622":{"crate_id":6,"path":["libc","unix","linux_like","arpreq"],"kind":"struct"},"2:46643:7691":{"crate_id":2,"path":["core","core_arch","x86","__m512"],"kind":"struct"},"2:39563:3290":{"crate_id":2,"path":["core","iter","adapters","copied","Copied"],"kind":"struct"},"16:5944:20852":{"crate_id":16,"path":["gimli","read","cfi","UnwindTable"],"kind":"struct"},"24:3347:3440":{"crate_id":24,"path":["syn","token","Virtual"],"kind":"struct"},"18:727:5051":{"crate_id":18,"path":["memchr","memmem","SearcherConfig"],"kind":"struct"},"17:11484:5332":{"crate_id":17,"path":["object","elf","ProgramHeader32"],"kind":"struct"},"5:7264:8641":{"crate_id":5,"path":["alloc","string","FromUtf16Error"],"kind":"struct"},"24:2820:3420":{"crate_id":24,"path":["syn","token","Final"],"kind":"struct"},"2:46696:7694":{"crate_id":2,"path":["core","core_arch","x86","__m256bh"],"kind":"struct"},"7:32:19833":{"crate_id":7,"path":["unwind","libunwind","_Unwind_Reason_Code"],"kind":"enum"},"16:5998:20853":{"crate_id":16,"path":["gimli","read","cfi","CfaRule"],"kind":"enum"},"10:44:6360":{"crate_id":10,"path":["adler","Adler32"],"kind":"struct"},"16:5677:20850":{"crate_id":16,"path":["gimli","read","cfi","CieOffsetEncoding"],"kind":"enum"},"16:5104:6063":{"crate_id":16,"path":["gimli","constants","DwRle"],"kind":"struct"},"6:4915:6954":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_nxtinfo"],"kind":"struct"},"6:4767:6877":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_tp"],"kind":"struct"},"24:2030:3226":{"crate_id":24,"path":["syn","punctuated","PrivateIterMut"],"kind":"struct"},"6:1900:15904":{"crate_id":6,"path":["libc","unix","linux_like","linux","fpos64_t"],"kind":"enum"},"2:41117:88":{"crate_id":2,"path":["core","sync","atomic","AtomicU32"],"kind":"struct"},"2:43051:8196":{"crate_id":2,"path":["core","str","pattern","CharSearcher"],"kind":"struct"},"6:4406:6743":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_event"],"kind":"struct"},"11:2069:8734":{"crate_id":11,"path":["hashbrown","set","OccupiedEntry"],"kind":"struct"},"17:13211:5770":{"crate_id":17,"path":["object","pe","ImageAuxSymbolWeak"],"kind":"struct"},"2:46544:7683":{"crate_id":2,"path":["core","core_arch","simd","f64x8"],"kind":"struct"},"2:39685:3307":{"crate_id":2,"path":["core","iter","adapters","rev","Rev"],"kind":"struct"},"17:8573:20930":{"crate_id":17,"path":["object","common","SectionFlags"],"kind":"enum"},"1:11892:1477":{"crate_id":1,"path":["std","u64"],"kind":"primitive"},"1:5441:8946":{"crate_id":1,"path":["std","process","Stdio"],"kind":"struct"},"2:46422:7680":{"crate_id":2,"path":["core","core_arch","simd","f32x16"],"kind":"struct"},"2:20704:9010":{"crate_id":2,"path":["core","core_simd","lane_count","LaneCount"],"kind":"struct"},"24:4904:3169":{"crate_id":24,"path":["syn","expr","ExprTryBlock"],"kind":"struct"},"1:9051:7782":{"crate_id":1,"path":["std","time","SystemTime"],"kind":"struct"},"6:5962:7168":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","seminfo"],"kind":"struct"},"2:39541:3297":{"crate_id":2,"path":["core","iter","adapters","chain","Chain"],"kind":"struct"},"2:22097:173":{"crate_id":2,"path":["core","num","nonzero","NonZeroU32"],"kind":"struct"},"24:2211:2474":{"crate_id":24,"path":["syn","spanned","Spanned"],"kind":"trait"},"2:39745:3311":{"crate_id":2,"path":["core","iter","adapters","take","Take"],"kind":"struct"},"18:766:24841":{"crate_id":18,"path":["memchr","memmem","SearcherRevKind"],"kind":"enum"},"2:44387:7588":{"crate_id":2,"path":["core","core_arch","simd","u8x8"],"kind":"struct"},"1:4126:8891":{"crate_id":1,"path":["std","os","unix","net","ancillary","Messages"],"kind":"struct"},"17:11355:5313":{"crate_id":17,"path":["object","elf","CompressionHeader64"],"kind":"struct"},"2:42451:8107":{"crate_id":2,"path":["core","slice","iter","ChunksExact"],"kind":"struct"},"6:4554:6814":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Ehdr"],"kind":"struct"},"17:12980:5720":{"crate_id":17,"path":["object","pe","ImageOptionalHeader64"],"kind":"struct"},"2:50294:7704":{"crate_id":2,"path":["core","core_simd","vector","ptr","SimdMutPtr"],"kind":"struct"},"11:119:4781":{"crate_id":11,"path":["hashbrown","raw","RawTable"],"kind":"struct"},"5:7253:8094":{"crate_id":5,"path":["alloc","string","FromUtf8Error"],"kind":"struct"},"2:43440:8229":{"crate_id":2,"path":["core","time","TryFromFloatSecsError"],"kind":"struct"},"2:2511:234":{"crate_id":2,"path":["core","convert","TryFrom"],"kind":"trait"},"20:272:1877":{"crate_id":20,"path":["quote","__private","push_lifetime","Lifetime"],"kind":"struct"},"17:12959:5715":{"crate_id":17,"path":["object","pe","ImageRomOptionalHeader"],"kind":"struct"},"17:386:20919":{"crate_id":17,"path":["object","read","any","Segment"],"kind":"struct"},"24:2023:3224":{"crate_id":24,"path":["syn","punctuated","IterMut"],"kind":"struct"},"24:4353:3482":{"crate_id":24,"path":["syn","token","ShrEq"],"kind":"struct"},"17:10735:5233":{"crate_id":17,"path":["object","read","pe","rich","RichHeaderEntry"],"kind":"struct"},"1:1988:182":{"crate_id":1,"path":["std","ffi","os_str","OsString"],"kind":"struct"},"1:4761:8875":{"crate_id":1,"path":["std","os","fd","owned","AsFd"],"kind":"trait"},"24:5446:3204":{"crate_id":24,"path":["syn","ty","TypeNever"],"kind":"struct"},"21:2727:3386":{"crate_id":21,"path":["proc_macro","SourceFile"],"kind":"struct"},"2:8767:32654":{"crate_id":2,"path":["core","fmt","builders","PadAdapter"],"kind":"struct"},"24:2752:3417":{"crate_id":24,"path":["syn","token","Dyn"],"kind":"struct"},"24:4044:3460":{"crate_id":24,"path":["syn","token","LArrow"],"kind":"struct"},"17:13240:5778":{"crate_id":17,"path":["object","pe","ImageRelocation"],"kind":"struct"},"24:126:1793":{"crate_id":24,"path":["syn","token","Group"],"kind":"struct"},"6:6679:7302":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_fpxreg"],"kind":"struct"},"2:48920:243":{"crate_id":2,"path":["core","core_simd","fmt","fmt","Wrapper"],"kind":"struct"},"1:8416:8936":{"crate_id":1,"path":["std","path","Component"],"kind":"enum"},"6:4442:6757":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_mask"],"kind":"struct"},"1:11872:411":{"crate_id":1,"path":["std","char"],"kind":"primitive"},"2:20861:9014":{"crate_id":2,"path":["core","core_simd","masks","MaskElement"],"kind":"trait"},"17:12835:5622":{"crate_id":17,"path":["object","pe","ImageVxdHeader"],"kind":"struct"},"1:5504:8947":{"crate_id":1,"path":["std","process","Termination"],"kind":"trait"},"14:202:2307":{"crate_id":14,"path":["rustc_demangle","v0","ParseError"],"kind":"enum"},"16:5779:6068":{"crate_id":16,"path":["gimli","read","cfi","Augmentation"],"kind":"struct"},"2:30624:4080":{"crate_id":2,"path":["core","cmp","Reverse"],"kind":"struct"},"24:2786:1817":{"crate_id":24,"path":["syn","token","Enum"],"kind":"struct"},"11:762:4510":{"crate_id":11,"path":["hashbrown","map","DrainFilter"],"kind":"struct"},"20:235:3996":{"crate_id":20,"path":["quote","__private","get_span","GetSpan"],"kind":"struct"},"1:6588:214":{"crate_id":1,"path":["std","sync","rwlock","RwLock"],"kind":"struct"},"16:2830:6002":{"crate_id":16,"path":["gimli","common","DebugTypesOffset"],"kind":"struct"},"17:9380:20950":{"crate_id":17,"path":["object","read","archive","ArchiveKind"],"kind":"enum"},"2:3993:33011":{"crate_id":2,"path":["core","asserting","TryCaptureWithDebug"],"kind":"struct"},"1:936:8729":{"crate_id":1,"path":["std","collections","hash","map","RawEntryBuilderMut"],"kind":"struct"},"24:4411:3486":{"crate_id":24,"path":["syn","token","StarEq"],"kind":"struct"},"24:1601:3326":{"crate_id":24,"path":["syn","parse","Parser"],"kind":"trait"},"1:3974:8866":{"crate_id":1,"path":["std","os","unix","fs","FileTypeExt"],"kind":"trait"},"24:3262:3436":{"crate_id":24,"path":["syn","token","Typeof"],"kind":"struct"},"1:4565:8865":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt"],"kind":"trait"},"2:40807:4434":{"crate_id":2,"path":["core","panicking","AssertKind"],"kind":"enum"},"2:44457:7591":{"crate_id":2,"path":["core","core_arch","simd","u64x1"],"kind":"struct"},"6:6694:7306":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_fpstate"],"kind":"struct"},"24:93:8877":{"crate_id":24,"path":["syn","token","private","Sealed"],"kind":"trait"},"1:8859:8973":{"crate_id":1,"path":["std","sync","mpsc","TrySendError"],"kind":"enum"},"16:6361:6079":{"crate_id":16,"path":["gimli","read","abbrev","AttributeSpecification"],"kind":"struct"},"1:7931:8834":{"crate_id":1,"path":["std","io","error","ErrorKind"],"kind":"enum"},"2:40666:7553":{"crate_id":2,"path":["core","net","socket_addr","SocketAddrV6"],"kind":"struct"},"1:4738:4869":{"crate_id":1,"path":["std","os","fd","owned","OwnedFd"],"kind":"struct"},"1:2212:8787":{"crate_id":1,"path":["std","fs","DirEntry"],"kind":"struct"},"17:11520:5341":{"crate_id":17,"path":["object","elf","Dyn32"],"kind":"struct"},"2:2459:14175":{"crate_id":2,"path":["core","convert","num","FloatToInt"],"kind":"trait"},"24:4517:1818":{"crate_id":24,"path":["syn","data","Variant"],"kind":"struct"},"5:773:4796":{"crate_id":5,"path":["alloc","collections","binary_heap","PeekMut"],"kind":"struct"},"6:119:14565":{"crate_id":6,"path":["libc","unix","FILE"],"kind":"enum"},"17:13135:5753":{"crate_id":17,"path":["object","pe","ImageSymbolBytes"],"kind":"struct"},"24:3041:3430":{"crate_id":24,"path":["syn","token","Override"],"kind":"struct"},"1:6298:163":{"crate_id":1,"path":["std","sync","mutex","Mutex"],"kind":"struct"},"24:3092:3352":{"crate_id":24,"path":["syn","token","Ref"],"kind":"struct"},"11:1872:1841":{"crate_id":11,"path":["hashbrown","set","Union"],"kind":"struct"},"20:150:3720":{"crate_id":20,"path":["quote","__private","ThereIsNoIteratorInRepetition"],"kind":"struct"},"17:10545:5221":{"crate_id":17,"path":["object","read","pe","export","Export"],"kind":"struct"},"18:96:24830":{"crate_id":18,"path":["memchr","memchr","iter","Memchr2"],"kind":"struct"},"6:5955:7167":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","Elf32_Chdr"],"kind":"struct"},"2:44558:7595":{"crate_id":2,"path":["core","core_arch","simd","i64x1"],"kind":"struct"},"16:6400:7990":{"crate_id":16,"path":["gimli","read","aranges","ArangeHeader"],"kind":"struct"},"2:39773:3313":{"crate_id":2,"path":["core","iter","adapters","zip","Zip"],"kind":"struct"},"6:4542:6805":{"crate_id":6,"path":["libc","unix","linux_like","linux","dl_phdr_info"],"kind":"struct"},"16:2319:5974":{"crate_id":16,"path":["gimli","common","Encoding"],"kind":"struct"},"11:1534:19928":{"crate_id":11,"path":["hashbrown","rustc_entry","RustcOccupiedEntry"],"kind":"struct"},"2:40529:7545":{"crate_id":2,"path":["core","net","ip_addr","Ipv6Addr"],"kind":"struct"},"17:12449:5531":{"crate_id":17,"path":["object","macho","BuildToolVersion"],"kind":"struct"},"16:6904:6126":{"crate_id":16,"path":["gimli","read","loclists","LocationLists"],"kind":"struct"},"16:7478:6020":{"crate_id":16,"path":["gimli","read","pubnames","DebugPubNames"],"kind":"struct"},"24:4300:3478":{"crate_id":24,"path":["syn","token","Semi"],"kind":"struct"},"2:21270:7437":{"crate_id":2,"path":["core","core_simd","vector","Simd"],"kind":"struct"},"21:1205:193":{"crate_id":21,"path":["proc_macro","bridge","client","ProcMacro"],"kind":"enum"},"2:2796:3248":{"crate_id":2,"path":["core","ops","arith","AddAssign"],"kind":"trait"},"1:6484:8653":{"crate_id":1,"path":["std","sync","poison","PoisonError"],"kind":"struct"},"2:41453:3374":{"crate_id":2,"path":["core","fmt","num","LowerHex"],"kind":"struct"},"16:6535:4780":{"crate_id":16,"path":["gimli","read","lazy","imp","LazyArc"],"kind":"struct"},"2:43392:8227":{"crate_id":2,"path":["core","str","BytesIsNotEmpty"],"kind":"struct"},"1:537:4179":{"crate_id":1,"path":["std","thread","Packet"],"kind":"struct"},"1:8149:8854":{"crate_id":1,"path":["std","net","tcp","Incoming"],"kind":"struct"},"6:5060:7023":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_can"],"kind":"struct"},"20:239:3998":{"crate_id":20,"path":["quote","__private","get_span","GetSpanInner"],"kind":"struct"},"17:9566:20936":{"crate_id":17,"path":["object","read","coff","symbol","SymbolIterator"],"kind":"struct"},"21:479:4777":{"crate_id":21,"path":["proc_macro","bridge","server","RunningSameThreadGuard"],"kind":"struct"},"17:8753:5143":{"crate_id":17,"path":["object","endian","U64Bytes"],"kind":"struct"},"1:11871:926":{"crate_id":1,"path":["std","never"],"kind":"primitive"},"17:8909:2743":{"crate_id":17,"path":["object","read","util","Bytes"],"kind":"struct"},"17:9148:36675":{"crate_id":17,"path":["object","read","any","ComdatIteratorInternal"],"kind":"enum"},"5:3153:36478":{"crate_id":5,"path":["alloc","collections","btree","set","IntersectionInner"],"kind":"enum"},"2:2804:5006":{"crate_id":2,"path":["core","ops","arith","MulAssign"],"kind":"trait"},"17:13777:5935":{"crate_id":17,"path":["object","pe","ImageCoffSymbolsHeader"],"kind":"struct"},"17:9917:5173":{"crate_id":17,"path":["object","read","elf","version","Version"],"kind":"struct"},"1:10673:7705":{"crate_id":1,"path":["std","sys","unix","fs","FileTimes"],"kind":"struct"},"17:10761:20940":{"crate_id":17,"path":["object","read","FileKind"],"kind":"enum"},"1:9087:29741":{"crate_id":1,"path":["std","sys","common","thread_local","fast_local","Key"],"kind":"struct"},"24:4288:3477":{"crate_id":24,"path":["syn","token","RArrow"],"kind":"struct"},"24:2616:3414":{"crate_id":24,"path":["syn","token","Become"],"kind":"struct"},"2:4582:14162":{"crate_id":2,"path":["core","char","REPLACEMENT_CHARACTER"],"kind":"constant"},"2:8604:85":{"crate_id":2,"path":["core","sync","atomic","AtomicPtr"],"kind":"struct"},"17:13399:5819":{"crate_id":17,"path":["object","pe","ImageResourceDirectory"],"kind":"struct"},"1:487:4863":{"crate_id":1,"path":["std","thread","spawn_unchecked_","MaybeDangling"],"kind":"struct"},"16:6179:8302":{"crate_id":16,"path":["gimli","read","dwarf","Dwarf"],"kind":"struct"},"17:13082:5740":{"crate_id":17,"path":["object","pe","AnonObjectHeaderBigobj"],"kind":"struct"},"2:4308:3351":{"crate_id":2,"path":["core","cell","BorrowRef"],"kind":"struct"},"17:9265:20936":{"crate_id":17,"path":["object","read","any","SymbolIterator"],"kind":"struct"},"17:13499:5842":{"crate_id":17,"path":["object","pe","ImagePrologueDynamicRelocationHeader"],"kind":"struct"},"5:1304:93":{"crate_id":5,"path":["alloc","collections","btree","map","BTreeMap"],"kind":"struct"},"17:12576:5553":{"crate_id":17,"path":["object","macho","NoteCommand"],"kind":"struct"},"11:98:8062":{"crate_id":11,"path":["hashbrown","raw","Bucket"],"kind":"struct"},"5:7134:3258":{"crate_id":5,"path":["alloc","collections","TryReserveError"],"kind":"struct"},"17:10798:20941":{"crate_id":17,"path":["object","read","ObjectKind"],"kind":"enum"},"16:7697:6015":{"crate_id":16,"path":["gimli","read","str","DebugLineStr"],"kind":"struct"},"2:39482:4841":{"crate_id":2,"path":["core","ffi","VaListImpl"],"kind":"struct"},"14:40:1804":{"crate_id":14,"path":["rustc_demangle","v0","Ident"],"kind":"struct"},"12:0:2967":{"crate_id":12,"path":["rustc_std_workspace_alloc"],"kind":"module"},"16:5963:7955":{"crate_id":16,"path":["gimli","read","cfi","RegisterRuleIter"],"kind":"struct"},"17:10670:5228":{"crate_id":17,"path":["object","read","pe","resource","ResourceDirectory"],"kind":"struct"},"17:10691:21098":{"crate_id":17,"path":["object","read","pe","resource","ResourceDirectoryEntryData"],"kind":"enum"},"5:1985:8737":{"crate_id":5,"path":["alloc","collections","btree","map","CursorMut"],"kind":"struct"},"6:7532:7417":{"crate_id":6,"path":["libc","unix","linux_like","linux","can_frame"],"kind":"struct"},"2:10740:14105":{"crate_id":2,"path":["core","slice","iter","GroupByMut"],"kind":"struct"},"16:7626:20867":{"crate_id":16,"path":["gimli","read","rnglists","RngListIter"],"kind":"struct"},"6:7431:7404":{"crate_id":6,"path":["libc","unix","linux_like","linux","arch","generic","termios2"],"kind":"struct"},"16:5655:6011":{"crate_id":16,"path":["gimli","read","cfi","EhFrame"],"kind":"struct"},"24:5442:3202":{"crate_id":24,"path":["syn","ty","TypeInfer"],"kind":"struct"},"2:41707:108":{"crate_id":2,"path":["core","fmt","rt","Count"],"kind":"enum"},"2:39279:8130":{"crate_id":2,"path":["core","char","decode","DecodeUtf16"],"kind":"struct"},"24:3126:3433":{"crate_id":24,"path":["syn","token","SelfType"],"kind":"struct"},"17:10615:7905":{"crate_id":17,"path":["object","read","pe","import","DelayLoadImportTable"],"kind":"struct"},"24:4956:1812":{"crate_id":24,"path":["syn","generics","Generics"],"kind":"struct"},"16:7029:8035":{"crate_id":16,"path":["gimli","read","lookup","LookupEntryIter"],"kind":"struct"},"17:12293:5508":{"crate_id":17,"path":["object","macho","TwolevelHintsCommand"],"kind":"struct"},"17:11220:5280":{"crate_id":17,"path":["object","archive","AixMemberOffset"],"kind":"struct"},"24:4329:3480":{"crate_id":24,"path":["syn","token","ShlEq"],"kind":"struct"},"17:10840:5248":{"crate_id":17,"path":["object","read","SymbolIndex"],"kind":"struct"},"1:7682:8647":{"crate_id":1,"path":["std","env","JoinPathsError"],"kind":"struct"},"16:4445:6043":{"crate_id":16,"path":["gimli","constants","DwAte"],"kind":"struct"},"2:20854:8877":{"crate_id":2,"path":["core","core_simd","masks","sealed","Sealed"],"kind":"trait"},"1:907:4512":{"crate_id":1,"path":["std","collections","hash","map","Drain"],"kind":"struct"},"1:3984:8867":{"crate_id":1,"path":["std","os","unix","fs","DirEntryExt"],"kind":"trait"},"1:5501:7196":{"crate_id":1,"path":["std","process","exit"],"kind":"function"},"16:5346:6065":{"crate_id":16,"path":["gimli","constants","DwEhPe"],"kind":"struct"},"17:11821:5419":{"crate_id":17,"path":["object","macho","FatArch32"],"kind":"struct"},"17:12236:5496":{"crate_id":17,"path":["object","macho","DylibModule32"],"kind":"struct"},"1:11440:7792":{"crate_id":1,"path":["std","alloc","System"],"kind":"struct"},"6:7556:7422":{"crate_id":6,"path":["libc","unix","linux_like","linux","non_exhaustive","open_how"],"kind":"struct"},"6:4840:6907":{"crate_id":6,"path":["libc","unix","linux_like","linux","file_clone_range"],"kind":"struct"},"6:1609:6569":{"crate_id":6,"path":["libc","unix","linux_like","Dl_info"],"kind":"struct"},"21:0:1063":{"crate_id":21,"path":["proc_macro"],"kind":"module"},"18:690:7878":{"crate_id":18,"path":["memchr","memmem","FinderRev"],"kind":"struct"},"24:555:4991":{"crate_id":24,"path":["syn","error","SpanRange"],"kind":"struct"},"1:8914:27784":{"crate_id":1,"path":["std","sync","mpmc","error","SendTimeoutError"],"kind":"enum"},"24:2888:3423":{"crate_id":24,"path":["syn","token","Impl"],"kind":"struct"},"2:41744:67":{"crate_id":2,"path":["core","fmt","Alignment"],"kind":"enum"},"16:8025:3123":{"crate_id":16,"path":["gimli","read","unit","Attribute"],"kind":"struct"},"6:1731:6646":{"crate_id":6,"path":["libc","unix","linux_like","utsname"],"kind":"struct"},"18:574:5029":{"crate_id":18,"path":["memchr","memmem","twoway","Forward"],"kind":"struct"},"2:43172:8207":{"crate_id":2,"path":["core","str","pattern","CharPredicateSearcher"],"kind":"struct"},"17:9772:5169":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbolTable"],"kind":"struct"},"17:11628:5373":{"crate_id":17,"path":["object","elf","NoteHeader64"],"kind":"struct"},"6:4455:6762":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_trigger"],"kind":"struct"},"17:9696:5158":{"crate_id":17,"path":["object","read","elf","section","SectionTable"],"kind":"struct"},"9:325:6396":{"crate_id":9,"path":["miniz_oxide","inflate","core","LocalVars"],"kind":"struct"},"17:11573:5354":{"crate_id":17,"path":["object","elf","Verdaux"],"kind":"struct"},"1:6411:4882":{"crate_id":1,"path":["std","sync","once_lock","OnceLock"],"kind":"struct"},"6:4573:6815":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Ehdr"],"kind":"struct"},"2:21643:32437":{"crate_id":2,"path":["core","num","dec2flt","FloatErrorKind"],"kind":"enum"},"16:6876:6016":{"crate_id":16,"path":["gimli","read","loclists","DebugLoc"],"kind":"struct"},"16:3047:19994":{"crate_id":16,"path":["gimli","common","DwarfFileType"],"kind":"enum"},"2:4418:3356":{"crate_id":2,"path":["core","cell","SyncUnsafeCell"],"kind":"struct"},"1:6371:3268":{"crate_id":1,"path":["std","sync","once","Once"],"kind":"struct"},"2:4372:3354":{"crate_id":2,"path":["core","cell","RefMut"],"kind":"struct"},"6:5817:7093":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","mallinfo"],"kind":"struct"},"5:1706:4510":{"crate_id":5,"path":["alloc","collections","btree","map","DrainFilter"],"kind":"struct"},"11:300:8066":{"crate_id":11,"path":["hashbrown","raw","RawIter"],"kind":"struct"},"5:7239:221":{"crate_id":5,"path":["alloc","string","String"],"kind":"struct"},"5:7087:3219":{"crate_id":5,"path":["alloc","collections","vec_deque","into_iter","IntoIter"],"kind":"struct"},"1:8197:8238":{"crate_id":1,"path":["std","os","unix","net","addr","SocketAddr"],"kind":"struct"},"1:2615:8833":{"crate_id":1,"path":["std","io","buffered","linewriter","LineWriter"],"kind":"struct"},"2:2938:2123":{"crate_id":2,"path":["core","ops","function","Fn"],"kind":"trait"},"24:4854:2138":{"crate_id":24,"path":["syn","expr","ExprLit"],"kind":"struct"},"1:8474:7768":{"crate_id":1,"path":["std","path","Ancestors"],"kind":"struct"},"16:6236:8301":{"crate_id":16,"path":["gimli","read","dwarf","RangeIter"],"kind":"struct"},"2:9076:3365":{"crate_id":2,"path":["core","fmt","Octal"],"kind":"trait"},"17:12646:5569":{"crate_id":17,"path":["object","macho","ScatteredRelocationInfo"],"kind":"struct"},"9:421:19849":{"crate_id":9,"path":["miniz_oxide","MZStatus"],"kind":"enum"},"24:4781:3141":{"crate_id":24,"path":["syn","expr","ExprAsync"],"kind":"struct"},"2:38883:196":{"crate_id":2,"path":["core","ops","range","RangeFrom"],"kind":"struct"},"24:5170:3188":{"crate_id":24,"path":["syn","op","BinOp"],"kind":"enum"},"14:160:8633":{"crate_id":14,"path":["rustc_demangle","Demangle"],"kind":"struct"},"17:13865:5957":{"crate_id":17,"path":["object","pe","ImportObjectHeader"],"kind":"struct"},"17:13857:5954":{"crate_id":17,"path":["object","pe","ImageArchitectureEntry"],"kind":"struct"},"2:2868:5013":{"crate_id":2,"path":["core","ops","bit","ShrAssign"],"kind":"trait"},"1:6190:4871":{"crate_id":1,"path":["std","sync","mpmc","Sender"],"kind":"struct"},"1:2541:4865":{"crate_id":1,"path":["std","io","buffered","bufwriter","BufWriter"],"kind":"struct"},"1:2373:8800":{"crate_id":1,"path":["std","fs","read_dir"],"kind":"function"},"16:6351:20856":{"crate_id":16,"path":["gimli","read","abbrev","Attributes"],"kind":"enum"},"1:1054:8040":{"crate_id":1,"path":["std","collections","hash","map","Entry"],"kind":"enum"},"11:1859:8072":{"crate_id":11,"path":["hashbrown","set","Difference"],"kind":"struct"},"16:5847:7944":{"crate_id":16,"path":["gimli","read","cfi","PartialFrameDescriptionEntry"],"kind":"struct"},"17:9986:7894":{"crate_id":17,"path":["object","read","elf","version","VernauxIterator"],"kind":"struct"},"2:43388:8226":{"crate_id":2,"path":["core","str","IsNotEmpty"],"kind":"struct"},"2:2944:3395":{"crate_id":2,"path":["core","ops","function","FnOnce"],"kind":"trait"},"22:806:1868":{"crate_id":22,"path":["proc_macro2","imp","Span"],"kind":"enum"},"24:4908:3170":{"crate_id":24,"path":["syn","expr","ExprTuple"],"kind":"struct"},"2:39710:3309":{"crate_id":2,"path":["core","iter","adapters","skip","Skip"],"kind":"struct"},"6:494:6448":{"crate_id":6,"path":["libc","unix","timespec"],"kind":"struct"},"22:919:2184":{"crate_id":22,"path":["proc_macro2","Punct"],"kind":"struct"},"2:39049:7535":{"crate_id":2,"path":["core","array","TryFromSliceError"],"kind":"struct"},"24:4423:3487":{"crate_id":24,"path":["syn","token","Tilde"],"kind":"struct"},"2:1903:4420":{"crate_id":2,"path":["core","ptr","unique","Unique"],"kind":"struct"},"1:7648:8724":{"crate_id":1,"path":["std","backtrace","RawFrame"],"kind":"enum"},"11:834:8731":{"crate_id":11,"path":["hashbrown","map","RawOccupiedEntryMut"],"kind":"struct"},"5:7162:101":{"crate_id":5,"path":["alloc","ffi","c_str","CString"],"kind":"struct"},"16:6146:191":{"crate_id":16,"path":["gimli","read","cfi","Pointer"],"kind":"enum"},"2:39237:8129":{"crate_id":2,"path":["core","char","convert","ParseCharError"],"kind":"struct"},"6:6012:7189":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","sifields_sigchld"],"kind":"struct"},"17:13821:5950":{"crate_id":17,"path":["object","pe","ImageSeparateDebugHeader"],"kind":"struct"},"1:11299:4898":{"crate_id":1,"path":["std","sys_common","net","LookupHost"],"kind":"struct"},"24:4068:3462":{"crate_id":24,"path":["syn","token","Lt"],"kind":"struct"},"6:4998:6990":{"crate_id":6,"path":["libc","unix","linux_like","linux","af_alg_iv"],"kind":"struct"},"2:2786:5004":{"crate_id":2,"path":["core","ops","arith","Rem"],"kind":"trait"},"16:5000:6060":{"crate_id":16,"path":["gimli","constants","DwLne"],"kind":"struct"},"2:12365:105":{"crate_id":2,"path":["core","task","wake","Context"],"kind":"struct"},"16:7016:8033":{"crate_id":16,"path":["gimli","read","lookup","DebugLookup"],"kind":"struct"},"2:1625:4252":{"crate_id":2,"path":["core","mem","Discriminant"],"kind":"struct"},"1:8827:8972":{"crate_id":1,"path":["std","sync","mpsc","TryRecvError"],"kind":"enum"},"17:12098:5461":{"crate_id":17,"path":["object","macho","PreboundDylibCommand"],"kind":"struct"},"24:4777:3140":{"crate_id":24,"path":["syn","expr","ExprAssign"],"kind":"struct"},"17:12372:5518":{"crate_id":17,"path":["object","macho","FilesetEntryCommand"],"kind":"struct"},"6:4592:6816":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Sym"],"kind":"struct"},"16:6327:7985":{"crate_id":16,"path":["gimli","read","abbrev","Abbreviations"],"kind":"struct"},"6:4726:6854":{"crate_id":6,"path":["libc","unix","linux_like","linux","inotify_event"],"kind":"struct"},"2:44718:7606":{"crate_id":2,"path":["core","core_arch","simd","u32x4"],"kind":"struct"},"2:20673:9008":{"crate_id":2,"path":["core","core_simd","eq","SimdPartialEq"],"kind":"trait"},"21:2384:2472":{"crate_id":21,"path":["proc_macro","bridge","Literal"],"kind":"struct"},"5:6081:9047":{"crate_id":5,"path":["alloc","task","Wake"],"kind":"trait"},"16:535:7915":{"crate_id":16,"path":["gimli","read","cfi","RegisterRuleMap"],"kind":"struct"},"1:5322:8941":{"crate_id":1,"path":["std","process","Child"],"kind":"struct"},"24:4365:3483":{"crate_id":24,"path":["syn","token","Slash"],"kind":"struct"},"2:41037:87":{"crate_id":2,"path":["core","sync","atomic","AtomicU16"],"kind":"struct"},"1:5558:203":{"crate_id":1,"path":["std","sync","mpsc","Receiver"],"kind":"struct"},"1:1068:8734":{"crate_id":1,"path":["std","collections","hash","map","OccupiedEntry"],"kind":"struct"},"17:420:5097":{"crate_id":17,"path":["object","read","any","Section"],"kind":"struct"},"6:4834:6904":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlattr"],"kind":"struct"},"1:4075:32017":{"crate_id":1,"path":["std","os","unix","net","ancillary","AncillaryDataIter"],"kind":"struct"},"18:719:5048":{"crate_id":18,"path":["memchr","memmem","NeedleInfo"],"kind":"struct"},"6:6773:7360":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ipc_perm"],"kind":"struct"},"2:48972:243":{"crate_id":2,"path":["core","core_simd","fmt","fmt","Wrapper"],"kind":"struct"},"1:4680:8876":{"crate_id":1,"path":["std","os","fd","raw","AsRawFd"],"kind":"trait"},"1:11006:7770":{"crate_id":1,"path":["std","sys","unix","process","process_inner","ExitStatusError"],"kind":"struct"},"16:8129:20870":{"crate_id":16,"path":["gimli","read","unit","EntriesTreeNode"],"kind":"struct"},"1:624:8646":{"crate_id":1,"path":["std","backtrace","Backtrace"],"kind":"struct"},"2:6904:3267":{"crate_id":2,"path":["core","iter","sources","once","once"],"kind":"function"},"1:953:8731":{"crate_id":1,"path":["std","collections","hash","map","RawOccupiedEntryMut"],"kind":"struct"},"17:3142:21029":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbolIterator"],"kind":"struct"},"1:11082:7781":{"crate_id":1,"path":["std","sys","unix","time","inner","Instant"],"kind":"struct"},"1:2575:8651":{"crate_id":1,"path":["std","io","buffered","bufwriter","WriterPanicked"],"kind":"struct"},"1:0:1372":{"crate_id":1,"path":["std"],"kind":"module"},"14:215:8060":{"crate_id":14,"path":["rustc_demangle","TryDemangleError"],"kind":"struct"},"1:5766:4873":{"crate_id":1,"path":["std","sync","lazy_lock","LazyLock"],"kind":"struct"},"2:2138:580":{"crate_id":2,"path":["core","ptr","drop_in_place"],"kind":"function"},"5:7020:4804":{"crate_id":5,"path":["alloc","collections","binary_heap","DrainSorted"],"kind":"struct"},"1:3876:8861":{"crate_id":1,"path":["std","os","unix","ffi","os_str","OsStringExt"],"kind":"trait"},"2:11534:3244":{"crate_id":2,"path":["core","str","traits","FromStr"],"kind":"trait"},"6:6743:7343":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user"],"kind":"struct"},"2:31829:4071":{"crate_id":2,"path":["core","marker","PhantomPinned"],"kind":"struct"},"18:614:36697":{"crate_id":18,"path":["memchr","memmem","twoway","SuffixKind"],"kind":"enum"},"16:5557:6007":{"crate_id":16,"path":["gimli","read","addr","DebugAddr"],"kind":"struct"},"24:4440:2465":{"crate_id":24,"path":["syn","token","Brace"],"kind":"struct"},"2:42423:8104":{"crate_id":2,"path":["core","slice","iter","Windows"],"kind":"struct"},"24:1332:3343":{"crate_id":24,"path":["syn","lookahead","Peek"],"kind":"trait"},"6:4681:6831":{"crate_id":6,"path":["libc","unix","linux_like","linux","posix_spawn_file_actions_t"],"kind":"struct"},"2:38781:4419":{"crate_id":2,"path":["core","ops","generator","GeneratorState"],"kind":"enum"},"17:13506:5844":{"crate_id":17,"path":["object","pe","ImageEpilogueDynamicRelocationHeader"],"kind":"struct"},"11:815:8729":{"crate_id":11,"path":["hashbrown","map","RawEntryBuilderMut"],"kind":"struct"},"2:2993:2270":{"crate_id":2,"path":["core","ops","index","Index"],"kind":"trait"},"6:7473:7405":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_mutexattr_t"],"kind":"struct"},"24:4102:3464":{"crate_id":24,"path":["syn","token","MinusEq"],"kind":"struct"},"1:1595:8073":{"crate_id":1,"path":["std","collections","hash","set","SymmetricDifference"],"kind":"struct"},"2:3643:3219":{"crate_id":2,"path":["core","array","iter","IntoIter"],"kind":"struct"},"10:0:2965":{"crate_id":10,"path":["adler"],"kind":"module"},"1:10693:117":{"crate_id":1,"path":["std","sys","unix","fs","DirBuilder"],"kind":"struct"},"2:20433:34723":{"crate_id":2,"path":["core","core_simd","swizzle","interleave","Lo"],"kind":"struct"},"11:1832:3220":{"crate_id":11,"path":["hashbrown","set","Iter"],"kind":"struct"},"24:1491:3328":{"crate_id":24,"path":["syn","parse","ParseBuffer"],"kind":"struct"},"24:3245:1790":{"crate_id":24,"path":["syn","token","Type"],"kind":"struct"},"2:43400:7576":{"crate_id":2,"path":["core","time","Nanoseconds"],"kind":"struct"},"2:30026:4256":{"crate_id":2,"path":["core","mem","maybe_uninit","MaybeUninit"],"kind":"union"},"16:7803:6188":{"crate_id":16,"path":["gimli","read","unit","UnitHeader"],"kind":"struct"},"24:251:8631":{"crate_id":24,"path":["syn","attr","parsing","DisplayAttrStyle"],"kind":"struct"},"2:39572:3298":{"crate_id":2,"path":["core","iter","adapters","cycle","Cycle"],"kind":"struct"},"6:1559:6536":{"crate_id":6,"path":["libc","unix","linux_like","addrinfo"],"kind":"struct"},"24:3887:3450":{"crate_id":24,"path":["syn","token","Comma"],"kind":"struct"},"17:2933:21026":{"crate_id":17,"path":["object","read","macho","section","MachOSectionIterator"],"kind":"struct"},"17:9734:20973":{"crate_id":17,"path":["object","read","elf","section","ElfSection"],"kind":"struct"},"1:4846:8920":{"crate_id":1,"path":["std","os","net","linux_ext","addr","SocketAddrExt"],"kind":"trait"},"15:0:2969":{"crate_id":15,"path":["addr2line"],"kind":"module"},"1:649:8721":{"crate_id":1,"path":["std","backtrace","BytesOrWide"],"kind":"enum"},"6:1663:6611":{"crate_id":6,"path":["libc","unix","linux_like","in6_rtmsg"],"kind":"struct"},"2:41157:82":{"crate_id":2,"path":["core","sync","atomic","AtomicI64"],"kind":"struct"},"2:41784:72":{"crate_id":2,"path":["core","fmt","Arguments"],"kind":"struct"},"2:4127:3364":{"crate_id":2,"path":["core","cell","once","OnceCell"],"kind":"struct"},"16:6728:8010":{"crate_id":16,"path":["gimli","read","line","LineProgramHeader"],"kind":"struct"},"24:5268:2436":{"crate_id":24,"path":["syn","path","PathSegment"],"kind":"struct"},"6:6586:7271":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stack_t"],"kind":"struct"},"1:3678:8856":{"crate_id":1,"path":["std","net","tcp","TcpStream"],"kind":"struct"},"1:10683:128":{"crate_id":1,"path":["std","sys","unix","fs","FileType"],"kind":"struct"},"2:39028:2549":{"crate_id":2,"path":["core","any","tags","Value"],"kind":"struct"},"24:94:4139":{"crate_id":24,"path":["syn","token","private","WithSpan"],"kind":"struct"},"1:11877:1350":{"crate_id":1,"path":["std","slice"],"kind":"primitive"},"16:6558:8004":{"crate_id":16,"path":["gimli","read","line","LineRows"],"kind":"struct"},"11:353:4785":{"crate_id":11,"path":["hashbrown","raw","RawDrain"],"kind":"struct"},"16:6321:8317":{"crate_id":16,"path":["gimli","read","abbrev","AbbreviationsCache"],"kind":"struct"},"17:11902:5431":{"crate_id":17,"path":["object","macho","SegmentCommand32"],"kind":"struct"},"2:39492:8786":{"crate_id":2,"path":["core","ffi","VaList"],"kind":"struct"},"16:5724:7932":{"crate_id":16,"path":["gimli","read","cfi","CfiEntriesIter"],"kind":"struct"},"16:2378:5983":{"crate_id":16,"path":["gimli","common","DebugAbbrevOffset"],"kind":"struct"},"2:44577:7596":{"crate_id":2,"path":["core","core_arch","simd","f32x2"],"kind":"struct"},"17:12126:5465":{"crate_id":17,"path":["object","macho","ThreadCommand"],"kind":"struct"},"17:13477:5837":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation32V2"],"kind":"struct"},"17:0:2971":{"crate_id":17,"path":["object"],"kind":"module"},"16:3749:6035":{"crate_id":16,"path":["gimli","constants","DwSect"],"kind":"struct"},"2:46681:7693":{"crate_id":2,"path":["core","core_arch","x86","__m128bh"],"kind":"struct"},"1:9027:216":{"crate_id":1,"path":["std","sync","rwlock","RwLockWriteGuard"],"kind":"struct"},"24:925:3179":{"crate_id":24,"path":["syn","generics","Turbofish"],"kind":"struct"},"17:11037:20943":{"crate_id":17,"path":["object","read","RelocationTarget"],"kind":"enum"},"17:12799:5591":{"crate_id":17,"path":["object","pe","ImageOs2Header"],"kind":"struct"},"17:11193:5272":{"crate_id":17,"path":["object","archive","AixFileHeader"],"kind":"struct"},"2:39970:3268":{"crate_id":2,"path":["core","iter","sources","once","Once"],"kind":"struct"},"6:6045:7198":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","utmpx"],"kind":"struct"},"6:4786:6885":{"crate_id":6,"path":["libc","unix","linux_like","linux","j1939_filter"],"kind":"struct"},"2:31816:1957":{"crate_id":2,"path":["core","error","private","Internal"],"kind":"struct"},"24:901:36924":{"crate_id":24,"path":["syn","generics","ConstParams"],"kind":"struct"},"17:10377:5214":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbol"],"kind":"struct"},"2:2749:1830":{"crate_id":2,"path":["core","marker","Tuple"],"kind":"trait"},"1:11821:8399":{"crate_id":1,"path":["std","backtrace_rs","symbolize","gimli","parse_running_mmaps","MapsEntry"],"kind":"struct"},"17:9826:20971":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdatIterator"],"kind":"struct"},"17:8283:20921":{"crate_id":17,"path":["object","common","BinaryFormat"],"kind":"enum"},"14:165:19934":{"crate_id":14,"path":["rustc_demangle","DemangleStyle"],"kind":"enum"},"17:9933:7889":{"crate_id":17,"path":["object","read","elf","version","VersionTable"],"kind":"struct"},"20:37:2829":{"crate_id":20,"path":["quote","format_ident"],"kind":"macro"},"1:4177:8892":{"crate_id":1,"path":["std","os","unix","net","datagram","UnixDatagram"],"kind":"struct"},"16:2546:5990":{"crate_id":16,"path":["gimli","common","LocationListsOffset"],"kind":"struct"},"6:1704:6635":{"crate_id":6,"path":["libc","unix","linux_like","mmsghdr"],"kind":"struct"},"5:7050:195":{"crate_id":5,"path":["alloc","collections","btree","set","Range"],"kind":"struct"},"16:6696:20858":{"crate_id":16,"path":["gimli","read","line","ColumnType"],"kind":"enum"},"5:5181:4793":{"crate_id":5,"path":["alloc","slice","hack","to_vec","DropGuard"],"kind":"struct"},"5:3119:36472":{"crate_id":5,"path":["alloc","collections","btree","set","DifferenceInner"],"kind":"enum"},"24:4912:3171":{"crate_id":24,"path":["syn","expr","ExprUnary"],"kind":"struct"},"2:20388:4080":{"crate_id":2,"path":["core","core_simd","swizzle","reverse","Reverse"],"kind":"struct"},"16:7449:20864":{"crate_id":16,"path":["gimli","read","op","Evaluation"],"kind":"struct"},"11:751:4512":{"crate_id":11,"path":["hashbrown","map","Drain"],"kind":"struct"},"1:3996:8870":{"crate_id":1,"path":["std","os","unix","fs","DirBuilderExt"],"kind":"trait"},"18:582:4080":{"crate_id":18,"path":["memchr","memmem","twoway","Reverse"],"kind":"struct"},"2:44864:7610":{"crate_id":2,"path":["core","core_arch","simd","i32x4"],"kind":"struct"},"1:7797:8237":{"crate_id":1,"path":["std","fs","Permissions"],"kind":"struct"},"22:895:1793":{"crate_id":22,"path":["proc_macro2","Group"],"kind":"struct"},"5:4127:4819":{"crate_id":5,"path":["alloc","collections","vec_deque","into_iter","try_fold","Guard"],"kind":"struct"},"17:13639:5899":{"crate_id":17,"path":["object","pe","ImageHotPatchHashes"],"kind":"struct"},"2:2975:4418":{"crate_id":2,"path":["core","ops","generator","Generator"],"kind":"trait"},"17:11861:5427":{"crate_id":17,"path":["object","macho","MachHeader64"],"kind":"struct"},"6:5761:7067":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__exit_status"],"kind":"struct"},"1:7258:28317":{"crate_id":1,"path":["std","panicking","Hook"],"kind":"enum"},"2:39362:8140":{"crate_id":2,"path":["core","char","ToUppercase"],"kind":"struct"},"1:11894:780":{"crate_id":1,"path":["std","isize"],"kind":"primitive"},"11:1681:142":{"crate_id":11,"path":["hashbrown","set","HashSet"],"kind":"struct"},"2:2812:5008":{"crate_id":2,"path":["core","ops","arith","RemAssign"],"kind":"trait"},"6:7263:7403":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","align","sem_t"],"kind":"struct"},"16:5886:7946":{"crate_id":16,"path":["gimli","read","cfi","FrameDescriptionEntry"],"kind":"struct"},"17:11422:5324":{"crate_id":17,"path":["object","elf","Syminfo64"],"kind":"struct"},"24:3109:209":{"crate_id":24,"path":["syn","token","Return"],"kind":"struct"},"24:1506:3329":{"crate_id":24,"path":["syn","parse","StepCursor"],"kind":"struct"},"1:9017:164":{"crate_id":1,"path":["std","sync","mutex","MutexGuard"],"kind":"struct"},"22:713:1868":{"crate_id":22,"path":["proc_macro2","fallback","Span"],"kind":"struct"},"1:1589:8072":{"crate_id":1,"path":["std","collections","hash","set","Difference"],"kind":"struct"},"6:6035:7195":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_data"],"kind":"union"},"11:669:8342":{"crate_id":11,"path":["hashbrown","map","IntoKeys"],"kind":"struct"},"24:4466:2129":{"crate_id":24,"path":["syn","token","Paren"],"kind":"struct"},"24:550:126":{"crate_id":24,"path":["syn","error","Error"],"kind":"struct"},"1:8155:8853":{"crate_id":1,"path":["std","net","tcp","IntoIncoming"],"kind":"struct"},"1:3926:8863":{"crate_id":1,"path":["std","os","unix","fs","PermissionsExt"],"kind":"trait"},"24:4984:2411":{"crate_id":24,"path":["syn","generics","TypeParam"],"kind":"struct"},"2:41679:7557":{"crate_id":2,"path":["core","fmt","rt","Placeholder"],"kind":"struct"},"2:46758:7696":{"crate_id":2,"path":["core","core_arch","x86","cpuid","CpuidResult"],"kind":"struct"},"1:8971:27644":{"crate_id":1,"path":["std","sync","mpmc","select","Selected"],"kind":"enum"},"17:13419:5825":{"crate_id":17,"path":["object","pe","ImageResourceDirectoryString"],"kind":"struct"},"13:0:2961":{"crate_id":13,"path":["std_detect"],"kind":"module"},"1:11882:633":{"crate_id":1,"path":["std","f32"],"kind":"primitive"},"24:2854:3421":{"crate_id":24,"path":["syn","token","For"],"kind":"struct"},"6:506:6453":{"crate_id":6,"path":["libc","unix","rusage"],"kind":"struct"},"1:7456:1881":{"crate_id":1,"path":["std","backtrace_rs","symbolize","Symbol"],"kind":"struct"},"2:9086:3372":{"crate_id":2,"path":["core","fmt","LowerExp"],"kind":"trait"},"2:2829:3999":{"crate_id":2,"path":["core","ops","bit","BitOr"],"kind":"trait"},"2:39042:3352":{"crate_id":2,"path":["core","any","tags","Ref"],"kind":"struct"},"2:2765:3247":{"crate_id":2,"path":["core","ops","arith","Add"],"kind":"trait"},"2:43579:192":{"crate_id":2,"path":["core","task","poll","Poll"],"kind":"enum"},"24:5343:3192":{"crate_id":24,"path":["syn","restriction","FieldMutability"],"kind":"enum"},"6:5015:6998":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_ifr_ifru"],"kind":"union"},"16:7077:20862":{"crate_id":16,"path":["gimli","read","op","DieReference"],"kind":"enum"},"1:8719:8948":{"crate_id":1,"path":["std","process","CommandArgs"],"kind":"struct"},"1:11026:7576":{"crate_id":1,"path":["std","sys","unix","time","Nanoseconds"],"kind":"struct"},"1:10939:4895":{"crate_id":1,"path":["std","sys","unix","process","process_inner","posix_spawn","PosixSpawnattr"],"kind":"struct"},"17:10721:5230":{"crate_id":17,"path":["object","read","pe","rich","RichHeaderInfo"],"kind":"struct"},"5:3663:3339":{"crate_id":5,"path":["alloc","collections","linked_list","Cursor"],"kind":"struct"},"21:184:4158":{"crate_id":21,"path":["proc_macro","bridge","closure","Closure"],"kind":"struct"},"24:5323:2210":{"crate_id":24,"path":["syn","path","QSelf"],"kind":"struct"},"2:41969:143":{"crate_id":2,"path":["core","hash","sip","Hasher"],"kind":"struct"},"1:7775:8803":{"crate_id":1,"path":["std","fs","ReadDir"],"kind":"struct"},"5:4904:4819":{"crate_id":5,"path":["alloc","rc","from_iter_exact","Guard"],"kind":"struct"},"6:6818:7380":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user_fpregs_struct"],"kind":"struct"},"1:3171:8839":{"crate_id":1,"path":["std","io","stdio","StdinLock"],"kind":"struct"},"24:4896:3167":{"crate_id":24,"path":["syn","expr","ExprStruct"],"kind":"struct"},"2:12376:4861":{"crate_id":2,"path":["core","task","wake","Waker"],"kind":"struct"},"2:10180:8183":{"crate_id":2,"path":["core","slice","iter","SplitN"],"kind":"struct"},"20:148:3721":{"crate_id":20,"path":["quote","__private","HasIterator"],"kind":"struct"},"1:4329:8887":{"crate_id":1,"path":["std","os","unix","net","stream","UnixStream"],"kind":"struct"},"18:531:7872":{"crate_id":18,"path":["memchr","memmem","prefilter","PrefilterState"],"kind":"struct"},"17:13316:5795":{"crate_id":17,"path":["object","pe","ImageThunkData64"],"kind":"struct"},"17:487:20920":{"crate_id":17,"path":["object","read","any","Comdat"],"kind":"struct"},"16:4510:6045":{"crate_id":16,"path":["gimli","constants","DwDs"],"kind":"struct"},"17:10681:7909":{"crate_id":17,"path":["object","read","pe","resource","ResourceDirectoryTable"],"kind":"struct"},"2:48959:243":{"crate_id":2,"path":["core","core_simd","fmt","fmt","Wrapper"],"kind":"struct"},"2:21631:8116":{"crate_id":2,"path":["core","num","dec2flt","ParseFloatError"],"kind":"struct"},"17:10743:20939":{"crate_id":17,"path":["object","read","traits","NoDynamicRelocationIterator"],"kind":"struct"},"1:11216:8398":{"crate_id":1,"path":["std","sys_common","wtf8","Wtf8"],"kind":"struct"},"24:4816:3149":{"crate_id":24,"path":["syn","expr","ExprConst"],"kind":"struct"},"24:2228:7836":{"crate_id":24,"path":["syn","thread","ThreadBound"],"kind":"struct"},"1:2551:4852":{"crate_id":1,"path":["std","io","buffered","bufwriter","flush_buf","BufGuard"],"kind":"struct"},"2:2691:2398":{"crate_id":2,"path":["core","marker","PhantomData"],"kind":"struct"},"2:42621:8175":{"crate_id":2,"path":["core","str","iter","CharIndices"],"kind":"struct"},"1:3061:8843":{"crate_id":1,"path":["std","io","readbuf","BorrowedBuf"],"kind":"struct"},"17:12072:5457":{"crate_id":17,"path":["object","macho","SubUmbrellaCommand"],"kind":"struct"},"2:39309:14168":{"crate_id":2,"path":["core","char","EscapeUnicodeState"],"kind":"enum"},"24:4512:3125":{"crate_id":24,"path":["syn","attr","MetaNameValue"],"kind":"struct"},"6:1617:6574":{"crate_id":6,"path":["libc","unix","linux_like","lconv"],"kind":"struct"},"17:10857:20942":{"crate_id":17,"path":["object","read","SymbolSection"],"kind":"enum"},"1:7524:4889":{"crate_id":1,"path":["std","backtrace_rs","Bomb"],"kind":"struct"},"24:5454:3206":{"crate_id":24,"path":["syn","ty","TypePtr"],"kind":"struct"},"24:1623:2043":{"crate_id":24,"path":["syn","parse_quote"],"kind":"macro"},"5:1203:8735":{"crate_id":5,"path":["alloc","collections","btree","map","entry","VacantEntry"],"kind":"struct"},"17:12085:5459":{"crate_id":17,"path":["object","macho","SubLibraryCommand"],"kind":"struct"},"5:6351:3219":{"crate_id":5,"path":["alloc","vec","into_iter","IntoIter"],"kind":"struct"},"20:0:1092":{"crate_id":20,"path":["quote"],"kind":"module"},"24:4540:3138":{"crate_id":24,"path":["syn","data","FieldsUnnamed"],"kind":"struct"},"17:9628:20957":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdat"],"kind":"struct"},"6:5947:7166":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","Elf64_Chdr"],"kind":"struct"},"16:7103:7777":{"crate_id":16,"path":["gimli","read","op","Operation"],"kind":"enum"},"6:5786:7072":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","msghdr"],"kind":"struct"},"2:41960:8168":{"crate_id":2,"path":["core","hash","sip","SipHasher"],"kind":"struct"},"22:869:230":{"crate_id":22,"path":["proc_macro2","TokenStream"],"kind":"struct"},"17:13145:5754":{"crate_id":17,"path":["object","pe","ImageSymbolEx"],"kind":"struct"},"2:44834:7609":{"crate_id":2,"path":["core","core_arch","simd","i16x8"],"kind":"struct"},"5:1971:3339":{"crate_id":5,"path":["alloc","collections","btree","map","Cursor"],"kind":"struct"},"6:7218:7389":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","not_x32","statvfs"],"kind":"struct"},"2:40883:3219":{"crate_id":2,"path":["core","result","IntoIter"],"kind":"struct"},"16:6890:6017":{"crate_id":16,"path":["gimli","read","loclists","DebugLocLists"],"kind":"struct"},"17:12138:5466":{"crate_id":17,"path":["object","macho","RoutinesCommand32"],"kind":"struct"},"17:9653:20988":{"crate_id":17,"path":["object","read","elf","file","ElfFile"],"kind":"struct"},"24:5040:2828":{"crate_id":24,"path":["syn","generics","WhereClause"],"kind":"struct"},"2:2578:114":{"crate_id":2,"path":["core","default","Default"],"kind":"trait"},"2:44688:7605":{"crate_id":2,"path":["core","core_arch","simd","u16x8"],"kind":"struct"},"17:11471:5331":{"crate_id":17,"path":["object","elf","Rela64"],"kind":"struct"},"2:20401:34478":{"crate_id":2,"path":["core","core_simd","swizzle","rotate_lanes_left","Rotate"],"kind":"struct"},"6:7566:7424":{"crate_id":6,"path":["libc","unix","align","in6_addr"],"kind":"struct"},"5:4037:3224":{"crate_id":5,"path":["alloc","collections","vec_deque","iter_mut","IterMut"],"kind":"struct"},"0:928:1673":{"crate_id":0,"path":["serde_derive","Deserialize"],"kind":"proc_derive"},"17:8858:5146":{"crate_id":17,"path":["object","endian","I64Bytes"],"kind":"struct"},"17:9340:20938":{"crate_id":17,"path":["object","read","any","SectionRelocationIterator"],"kind":"struct"},"24:4550:1655":{"crate_id":24,"path":["syn","derive","DeriveInput"],"kind":"struct"},"24:5459:3207":{"crate_id":24,"path":["syn","ty","TypeReference"],"kind":"struct"},"11:1029:8735":{"crate_id":11,"path":["hashbrown","map","VacantEntry"],"kind":"struct"},"2:44932:7613":{"crate_id":2,"path":["core","core_arch","simd","f64x2"],"kind":"struct"},"15:219:8318":{"crate_id":15,"path":["addr2line","RangeAttributes"],"kind":"struct"},"11:725:8069":{"crate_id":11,"path":["hashbrown","map","Keys"],"kind":"struct"},"1:11888:731":{"crate_id":1,"path":["std","i128"],"kind":"primitive"},"2:9078:2263":{"crate_id":2,"path":["core","fmt","Binary"],"kind":"trait"},"2:11111:14251":{"crate_id":2,"path":["core","slice","SlicePattern"],"kind":"trait"},"21:217:8300":{"crate_id":21,"path":["proc_macro","bridge","fxhash","FxHasher"],"kind":"struct"},"16:6575:20857":{"crate_id":16,"path":["gimli","read","line","LineInstruction"],"kind":"enum"},"16:3640:5059":{"crate_id":16,"path":["gimli","arch","X86_64"],"kind":"struct"},"18:548:139":{"crate_id":18,"path":["memchr","memmem","rabinkarp","Hash"],"kind":"struct"},"2:41197:89":{"crate_id":2,"path":["core","sync","atomic","AtomicU64"],"kind":"struct"},"6:4290:6667":{"crate_id":6,"path":["libc","unix","linux_like","linux","passwd"],"kind":"struct"},"24:5319:3191":{"crate_id":24,"path":["syn","path","ParenthesizedGenericArguments"],"kind":"struct"},"2:9946:8100":{"crate_id":2,"path":["core","slice","iter","Split"],"kind":"struct"},"2:2817:3466":{"crate_id":2,"path":["core","ops","bit","Not"],"kind":"trait"},"1:11887:735":{"crate_id":1,"path":["std","i64"],"kind":"primitive"},"2:2301:185":{"crate_id":2,"path":["core","cmp","PartialEq"],"kind":"trait"},"2:9072:110":{"crate_id":2,"path":["core","fmt","macros","Debug"],"kind":"proc_derive"},"24:344:37081":{"crate_id":24,"path":["syn","buffer","empty","UnsafeSyncEntry"],"kind":"struct"},"2:2808:5007":{"crate_id":2,"path":["core","ops","arith","DivAssign"],"kind":"trait"},"1:7666:8761":{"crate_id":1,"path":["std","env","VarError"],"kind":"enum"},"2:39301:8132":{"crate_id":2,"path":["core","char","EscapeUnicode"],"kind":"struct"},"1:8751:7770":{"crate_id":1,"path":["std","process","ExitStatusError"],"kind":"struct"},"2:43066:8202":{"crate_id":2,"path":["core","str","pattern","MultiCharEqSearcher"],"kind":"struct"},"1:10838:27966":{"crate_id":1,"path":["std","sys","unix","process","process_common","ProgramKind"],"kind":"enum"},"16:2448:5986":{"crate_id":16,"path":["gimli","common","DebugArangesOffset"],"kind":"struct"},"2:44355:7587":{"crate_id":2,"path":["core","core_arch","simd","i16x2"],"kind":"struct"},"6:568:6493":{"crate_id":6,"path":["libc","unix","sigval"],"kind":"struct"},"16:6506:8002":{"crate_id":16,"path":["gimli","read","index","UnitIndexSectionIterator"],"kind":"struct"},"2:44263:7583":{"crate_id":2,"path":["core","core_arch","simd","i8x2"],"kind":"struct"},"18:636:5047":{"crate_id":18,"path":["memchr","memmem","twoway","ApproximateByteSet"],"kind":"struct"},"17:9545:5134":{"crate_id":17,"path":["object","read","coff","section","CoffSection"],"kind":"struct"},"6:5705:7027":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","statx"],"kind":"struct"},"2:2775:5002":{"crate_id":2,"path":["core","ops","arith","Mul"],"kind":"trait"},"17:13309:5794":{"crate_id":17,"path":["object","pe","ImageImportByName"],"kind":"struct"},"1:4643:8895":{"crate_id":1,"path":["std","os","linux","process","CommandExt"],"kind":"trait"},"2:2834:4993":{"crate_id":2,"path":["core","ops","bit","BitXor"],"kind":"trait"},"5:3114:8072":{"crate_id":5,"path":["alloc","collections","btree","set","Difference"],"kind":"struct"},"2:42937:8195":{"crate_id":2,"path":["core","str","iter","EncodeUtf16"],"kind":"struct"},"1:10922:4893":{"crate_id":1,"path":["std","sys","unix","process","process_inner","do_exec","Reset"],"kind":"struct"},"2:2504:131":{"crate_id":2,"path":["core","convert","From"],"kind":"trait"},"2:39675:3306":{"crate_id":2,"path":["core","iter","adapters","peekable","Peekable"],"kind":"struct"},"21:2432:1869":{"crate_id":21,"path":["proc_macro","bridge","TokenTree"],"kind":"enum"},"2:45312:7636":{"crate_id":2,"path":["core","core_arch","simd","u32x8"],"kind":"struct"},"2:39228:8128":{"crate_id":2,"path":["core","async_iter","from_iter","FromIter"],"kind":"struct"},"2:3981:33014":{"crate_id":2,"path":["core","asserting","TryCaptureWithoutDebug"],"kind":"struct"},"1:3133:29459":{"crate_id":1,"path":["std","io","stdio","StdoutRaw"],"kind":"struct"},"17:8788:5144":{"crate_id":17,"path":["object","endian","I16Bytes"],"kind":"struct"},"17:11434:5325":{"crate_id":17,"path":["object","elf","Rel32"],"kind":"struct"},"11:1836:3219":{"crate_id":11,"path":["hashbrown","set","IntoIter"],"kind":"struct"},"2:4028:4417":{"crate_id":2,"path":["core","async_iter","async_iter","AsyncIterator"],"kind":"trait"},"24:4225:3473":{"crate_id":24,"path":["syn","token","Plus"],"kind":"struct"},"2:43396:8228":{"crate_id":2,"path":["core","str","UnsafeBytesToStr"],"kind":"struct"},"2:40489:152":{"crate_id":2,"path":["core","net","ip_addr","IpAddr"],"kind":"enum"},"6:547:6482":{"crate_id":6,"path":["libc","unix","pollfd"],"kind":"struct"},"16:2298:19967":{"crate_id":16,"path":["gimli","common","Format"],"kind":"enum"},"5:210:4428":{"crate_id":5,"path":["alloc","boxed","thin","ThinBox"],"kind":"struct"},"1:11879:1460":{"crate_id":1,"path":["std","tuple"],"kind":"primitive"},"17:11615:5369":{"crate_id":17,"path":["object","elf","NoteHeader32"],"kind":"struct"},"1:355:4194":{"crate_id":1,"path":["std","thread","scoped","Scope"],"kind":"struct"},"24:2803:3419":{"crate_id":24,"path":["syn","token","Extern"],"kind":"struct"},"16:6943:20860":{"crate_id":16,"path":["gimli","read","loclists","RawLocListEntry"],"kind":"enum"},"1:1583:8071":{"crate_id":1,"path":["std","collections","hash","set","Intersection"],"kind":"struct"},"2:22295:168":{"crate_id":2,"path":["core","num","nonzero","NonZeroI32"],"kind":"struct"},"17:9312:20937":{"crate_id":17,"path":["object","read","any","DynamicRelocationIterator"],"kind":"struct"},"22:671:3339":{"crate_id":22,"path":["proc_macro2","parse","Cursor"],"kind":"struct"},"16:7572:36626":{"crate_id":16,"path":["gimli","read","rnglists","RangeListsFormat"],"kind":"enum"},"2:20416:34478":{"crate_id":2,"path":["core","core_simd","swizzle","rotate_lanes_right","Rotate"],"kind":"struct"},"1:8399:7763":{"crate_id":1,"path":["std","path","PrefixComponent"],"kind":"struct"},"1:4105:8889":{"crate_id":1,"path":["std","os","unix","net","ancillary","ScmCredentials"],"kind":"struct"},"17:9350:36690":{"crate_id":17,"path":["object","read","any","SectionRelocationIteratorInternal"],"kind":"enum"},"2:21:672":{"crate_id":2,"path":["core","format_args"],"kind":"macro"},"11:697:8343":{"crate_id":11,"path":["hashbrown","map","IntoValues"],"kind":"struct"},"17:11339:5309":{"crate_id":17,"path":["object","elf","CompressionHeader32"],"kind":"struct"},"24:2973:2471":{"crate_id":24,"path":["syn","token","Match"],"kind":"struct"},"24:1133:7831":{"crate_id":24,"path":["syn","lit","LitRepr"],"kind":"struct"},"17:11785:5410":{"crate_id":17,"path":["object","macho","DyldCacheImageInfo"],"kind":"struct"},"2:3209:3359":{"crate_id":2,"path":["core","ops","unsize","CoerceUnsized"],"kind":"trait"},"11:2190:36609":{"crate_id":11,"path":["hashbrown","raw","Fallibility"],"kind":"enum"},"2:8772:8345":{"crate_id":2,"path":["core","fmt","builders","PadAdapterState"],"kind":"struct"},"17:13053:5732":{"crate_id":17,"path":["object","pe","AnonObjectHeader"],"kind":"struct"},"24:1616:3338":{"crate_id":24,"path":["syn","parse","Nothing"],"kind":"struct"},"17:10516:5216":{"crate_id":17,"path":["object","read","pe","data_directory","DataDirectories"],"kind":"struct"},"1:8882:7776":{"crate_id":1,"path":["std","sync","condvar","WaitTimeoutResult"],"kind":"struct"},"17:12318:5511":{"crate_id":17,"path":["object","macho","PrebindCksumCommand"],"kind":"struct"},"5:7079:3219":{"crate_id":5,"path":["alloc","collections","linked_list","IntoIter"],"kind":"struct"},"1:644:8720":{"crate_id":1,"path":["std","backtrace","BacktraceSymbol"],"kind":"struct"},"3:0:435":{"crate_id":3,"path":["compiler_builtins"],"kind":"module"},"24:5338:3193":{"crate_id":24,"path":["syn","restriction","VisRestricted"],"kind":"struct"},"17:9886:20996":{"crate_id":17,"path":["object","read","elf","hash","HashTable"],"kind":"struct"},"24:4850:3157":{"crate_id":24,"path":["syn","expr","ExprLet"],"kind":"struct"},"18:491:7871":{"crate_id":18,"path":["memchr","cow","Imp"],"kind":"struct"},"1:11234:8262":{"crate_id":1,"path":["std","sys_common","wtf8","EncodeWide"],"kind":"struct"},"24:4812:3148":{"crate_id":24,"path":["syn","expr","ExprClosure"],"kind":"struct"},"24:4928:1827":{"crate_id":24,"path":["syn","expr","Member"],"kind":"enum"},"2:42849:8189":{"crate_id":2,"path":["core","str","iter","Matches"],"kind":"struct"},"3:229:207":{"crate_id":3,"path":["compiler_builtins","float","cmp","Result"],"kind":"enum"},"20:281:1877":{"crate_id":20,"path":["quote","__private","push_lifetime_spanned","Lifetime"],"kind":"struct"},"21:2777:1867":{"crate_id":21,"path":["proc_macro","Spacing"],"kind":"enum"},"17:10416:21093":{"crate_id":17,"path":["object","read","pe","file","PeComdatIterator"],"kind":"struct"},"6:4314:6685":{"crate_id":6,"path":["libc","unix","linux_like","linux","dqblk"],"kind":"struct"},"18:660:24842":{"crate_id":18,"path":["memchr","memmem","FindIter"],"kind":"struct"},"16:5616:7921":{"crate_id":16,"path":["gimli","read","cfi","ParsedEhFrameHdr"],"kind":"struct"},"2:39610:8148":{"crate_id":2,"path":["core","iter","adapters","flatten","FlattenCompat"],"kind":"struct"},"2:21575:7438":{"crate_id":2,"path":["core","num","dec2flt","common","BiasedFp"],"kind":"struct"},"13:226:6353":{"crate_id":13,"path":["std_detect","detect","cache","Initializer"],"kind":"struct"},"11:1120:19926":{"crate_id":11,"path":["hashbrown","map","VacantEntryRef"],"kind":"struct"},"24:4543:1821":{"crate_id":24,"path":["syn","data","Field"],"kind":"struct"},"2:45612:7642":{"crate_id":2,"path":["core","core_arch","simd","f32x8"],"kind":"struct"},"2:20648:9018":{"crate_id":2,"path":["core","core_simd","elements","uint","SimdUint"],"kind":"trait"},"16:6431:7992":{"crate_id":16,"path":["gimli","read","aranges","ArangeEntryIter"],"kind":"struct"},"17:8683:5141":{"crate_id":17,"path":["object","endian","U16Bytes"],"kind":"struct"},"24:2514:3488":{"crate_id":24,"path":["syn","token","Underscore"],"kind":"struct"},"16:6164:7983":{"crate_id":16,"path":["gimli","read","cfi","PointerEncodingParameters"],"kind":"struct"},"24:4807:3147":{"crate_id":24,"path":["syn","expr","ExprCast"],"kind":"struct"},"17:11721:5381":{"crate_id":17,"path":["object","macho","DyldCacheHeader"],"kind":"struct"},"1:11159:8951":{"crate_id":1,"path":["std","sys_common","process","CommandEnvs"],"kind":"struct"},"6:4865:990":{"crate_id":6,"path":["libc","unix","linux_like","linux","option"],"kind":"struct"},"16:7669:6024":{"crate_id":16,"path":["gimli","read","str","DebugStr"],"kind":"struct"},"2:40012:3278":{"crate_id":2,"path":["core","iter","sources","successors","Successors"],"kind":"struct"},"2:3936:4819":{"crate_id":2,"path":["core","array","Guard"],"kind":"struct"},"17:9498:5158":{"crate_id":17,"path":["object","read","coff","section","SectionTable"],"kind":"struct"},"17:13015:5721":{"crate_id":17,"path":["object","pe","ImageNtHeaders64"],"kind":"struct"},"1:10040:2165":{"crate_id":1,"path":["std","sys","unix","os_str","Slice"],"kind":"struct"},"17:11282:1804":{"crate_id":17,"path":["object","elf","Ident"],"kind":"struct"},"2:6695:3262":{"crate_id":2,"path":["core","iter","range","Step"],"kind":"trait"},"1:4904:3690":{"crate_id":1,"path":["std","panic","always_abort"],"kind":"function"},"6:4475:6773":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_ramp_effect"],"kind":"struct"},"2:3392:14137":{"crate_id":2,"path":["core","any","Demand"],"kind":"struct"},"9:52:8322":{"crate_id":9,"path":["miniz_oxide","inflate","core","DecompressorOxide"],"kind":"struct"},"16:6544:6014":{"crate_id":16,"path":["gimli","read","line","DebugLine"],"kind":"struct"},"16:5571:6010":{"crate_id":16,"path":["gimli","read","cfi","DebugFrame"],"kind":"struct"},"1:7926:8356":{"crate_id":1,"path":["std","io","error","Custom"],"kind":"struct"},"2:38969:3252":{"crate_id":2,"path":["core","ops","range","Bound"],"kind":"enum"},"11:1065:36608":{"crate_id":11,"path":["hashbrown","map","KeyOrRef"],"kind":"enum"},"5:2626:7429":{"crate_id":5,"path":["alloc","collections","btree","node","Handle"],"kind":"struct"},"1:8992:7780":{"crate_id":1,"path":["std","sync","mpmc","utils","CachePadded"],"kind":"struct"},"2:4773:786":{"crate_id":2,"path":["core","iter"],"kind":"module"},"6:4715:6847":{"crate_id":6,"path":["libc","unix","linux_like","linux","arpd_request"],"kind":"struct"},"20:504:3992":{"crate_id":20,"path":["quote","__private","IdentFragmentAdapter"],"kind":"struct"},"2:4241:3345":{"crate_id":2,"path":["core","cell","BorrowError"],"kind":"struct"},"6:5054:7020":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_can_addr"],"kind":"union"},"1:8843:8971":{"crate_id":1,"path":["std","sync","mpsc","RecvTimeoutError"],"kind":"enum"},"1:873:3219":{"crate_id":1,"path":["std","collections","hash","map","IntoIter"],"kind":"struct"},"1:11885:733":{"crate_id":1,"path":["std","i16"],"kind":"primitive"},"16:5741:20851":{"crate_id":16,"path":["gimli","read","cfi","CieOrFde"],"kind":"enum"},"16:6717:8009":{"crate_id":16,"path":["gimli","read","line","LineSequence"],"kind":"struct"},"2:29803:8858":{"crate_id":2,"path":["core","num","FpCategory"],"kind":"enum"},"23:0:3092":{"crate_id":23,"path":["unicode_ident"],"kind":"module"},"17:12902:5677":{"crate_id":17,"path":["object","pe","ImageFileHeader"],"kind":"struct"},"2:41952:8167":{"crate_id":2,"path":["core","hash","sip","SipHasher24"],"kind":"struct"},"2:8599:78":{"crate_id":2,"path":["core","sync","atomic","AtomicBool"],"kind":"struct"},"1:11884:736":{"crate_id":1,"path":["std","i8"],"kind":"primitive"},"2:7129:149":{"crate_id":2,"path":["core","iter","traits","collect","IntoIterator"],"kind":"trait"},"11:810:8728":{"crate_id":11,"path":["hashbrown","map","ValuesMut"],"kind":"struct"},"6:4536:6803":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_abs_setup"],"kind":"struct"},"1:2833:4868":{"crate_id":1,"path":["std","io","error","repr_bitpacked","Repr"],"kind":"struct"},"24:5280:2160":{"crate_id":24,"path":["syn","path","GenericArgument"],"kind":"enum"},"17:10580:7903":{"crate_id":17,"path":["object","read","pe","import","ImportDescriptorIterator"],"kind":"struct"},"1:7467:8657":{"crate_id":1,"path":["std","backtrace_rs","symbolize","SymbolName"],"kind":"struct"},"7:79:19840":{"crate_id":7,"path":["unwind","libunwind","_Unwind_Action"],"kind":"enum"},"5:3678:8737":{"crate_id":5,"path":["alloc","collections","linked_list","CursorMut"],"kind":"struct"},"2:39582:3299":{"crate_id":2,"path":["core","iter","adapters","enumerate","Enumerate"],"kind":"struct"},"6:4974:6983":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_setup"],"kind":"struct"},"1:863:3224":{"crate_id":1,"path":["std","collections","hash","map","IterMut"],"kind":"struct"},"17:9748:5164":{"crate_id":17,"path":["object","read","elf","symbol","SymbolTable"],"kind":"struct"},"2:3181:14151":{"crate_id":2,"path":["core","ops","try_trait","NeverShortCircuit"],"kind":"struct"},"16:2572:5991":{"crate_id":16,"path":["gimli","common","DebugLocListsBase"],"kind":"struct"},"17:10823:5111":{"crate_id":17,"path":["object","read","SectionIndex"],"kind":"struct"},"1:1600:1841":{"crate_id":1,"path":["std","collections","hash","set","Union"],"kind":"struct"},"5:2902:3429":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Mut"],"kind":"struct"},"2:0:488":{"crate_id":2,"path":["core"],"kind":"module"},"16:5386:5139":{"crate_id":16,"path":["gimli","endianity","LittleEndian"],"kind":"struct"},"5:6164:4830":{"crate_id":5,"path":["alloc","vec","drain_filter","drop","BackshiftOnDrop"],"kind":"struct"},"2:42372:33596":{"crate_id":2,"path":["core","slice","iter","GenericSplitN"],"kind":"struct"},"2:2592:126":{"crate_id":2,"path":["core","error","Error"],"kind":"trait"},"24:5008:3175":{"crate_id":24,"path":["syn","generics","BoundLifetimes"],"kind":"struct"},"6:5048:7018":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_txtime"],"kind":"struct"},"24:826:3325":{"crate_id":24,"path":["syn","ext","IdentExt"],"kind":"trait"},"24:4861:3159":{"crate_id":24,"path":["syn","expr","ExprMacro"],"kind":"struct"},"16:4596:6048":{"crate_id":16,"path":["gimli","constants","DwVis"],"kind":"struct"},"24:673:36913":{"crate_id":24,"path":["syn","expr","parsing","Precedence"],"kind":"enum"},"17:13376:5811":{"crate_id":17,"path":["object","pe","ImageBoundForwarderRef"],"kind":"struct"},"6:4894:6939":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_sndinfo"],"kind":"struct"},"2:43145:8206":{"crate_id":2,"path":["core","str","pattern","CharSliceSearcher"],"kind":"struct"},"2:39355:8139":{"crate_id":2,"path":["core","char","ToLowercase"],"kind":"struct"},"1:959:8732":{"crate_id":1,"path":["std","collections","hash","map","RawVacantEntryMut"],"kind":"struct"},"5:7336:4511":{"crate_id":5,"path":["alloc","vec","splice","Splice"],"kind":"struct"},"17:13121:5749":{"crate_id":17,"path":["object","pe","ImageSymbol"],"kind":"struct"},"17:9108:36688":{"crate_id":17,"path":["object","read","any","SectionIteratorInternal"],"kind":"enum"},"17:11372:5315":{"crate_id":17,"path":["object","elf","Sym32"],"kind":"struct"},"17:13667:5906":{"crate_id":17,"path":["object","pe","ImageAlpha64RuntimeFunctionEntry"],"kind":"struct"},"24:5056:3177":{"crate_id":24,"path":["syn","generics","PredicateLifetime"],"kind":"struct"},"22:14:24877":{"crate_id":22,"path":["proc_macro2","marker","ProcMacroAutoTraits"],"kind":"struct"},"1:8092:8807":{"crate_id":1,"path":["std","io","SeekFrom"],"kind":"enum"},"2:20710:9012":{"crate_id":2,"path":["core","core_simd","lane_count","SupportedLaneCount"],"kind":"trait"},"24:151:1857":{"crate_id":24,"path":["syn","Token"],"kind":"macro"},"2:44740:7607":{"crate_id":2,"path":["core","core_arch","simd","u64x2"],"kind":"struct"},"16:4872:6056":{"crate_id":16,"path":["gimli","constants","DwDsc"],"kind":"struct"},"2:2458:8877":{"crate_id":2,"path":["core","convert","num","private","Sealed"],"kind":"trait"},"16:7411:6171":{"crate_id":16,"path":["gimli","read","op","Expression"],"kind":"struct"},"1:3209:8840":{"crate_id":1,"path":["std","io","stdio","Stdout"],"kind":"struct"},"16:7366:20863":{"crate_id":16,"path":["gimli","read","op","EvaluationResult"],"kind":"enum"},"1:4575:7286":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt","st_atime"],"kind":"foreign_type"},"22:695:230":{"crate_id":22,"path":["proc_macro2","fallback","TokenStream"],"kind":"struct"},"6:6836:7383":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ucontext_t"],"kind":"struct"},"2:46220:7677":{"crate_id":2,"path":["core","core_arch","simd","u16x32"],"kind":"struct"},"18:538:5033":{"crate_id":18,"path":["memchr","memmem","rabinkarp","NeedleHash"],"kind":"struct"},"16:2524:5989":{"crate_id":16,"path":["gimli","common","DebugLineStrOffset"],"kind":"struct"},"1:1789:8743":{"crate_id":1,"path":["std","env","Vars"],"kind":"struct"},"21:2583:3388":{"crate_id":21,"path":["proc_macro","diagnostic","Level"],"kind":"enum"},"1:5565:4871":{"crate_id":1,"path":["std","sync","mpsc","Sender"],"kind":"struct"},"5:7012:4512":{"crate_id":5,"path":["alloc","collections","binary_heap","Drain"],"kind":"struct"},"5:805:4799":{"crate_id":5,"path":["alloc","collections","binary_heap","RebuildOnDrop"],"kind":"struct"},"1:9070:8246":{"crate_id":1,"path":["std","time","SystemTimeError"],"kind":"struct"},"1:9022:215":{"crate_id":1,"path":["std","sync","rwlock","RwLockReadGuard"],"kind":"struct"},"2:1744:4460":{"crate_id":2,"path":["core","ptr","metadata","DynMetadata"],"kind":"struct"},"2:30596:180":{"crate_id":2,"path":["core","cmp","Ordering"],"kind":"enum"},"9:234:7565":{"crate_id":9,"path":["miniz_oxide","inflate","core","State"],"kind":"enum"},"2:39956:3266":{"crate_id":2,"path":["core","iter","sources","from_fn","FromFn"],"kind":"struct"},"17:11544:5345":{"crate_id":17,"path":["object","elf","Versym"],"kind":"struct"},"1:10638:8247":{"crate_id":1,"path":["std","sys","unix","fs","FileAttr"],"kind":"struct"},"24:4824:3151":{"crate_id":24,"path":["syn","expr","ExprField"],"kind":"struct"},"2:39265:7538":{"crate_id":2,"path":["core","char","convert","CharTryFromError"],"kind":"struct"},"17:10478:21070":{"crate_id":17,"path":["object","read","pe","section","PeSectionIterator"],"kind":"struct"},"16:4624:6049":{"crate_id":16,"path":["gimli","constants","DwVirtuality"],"kind":"struct"},"2:43614:8391":{"crate_id":2,"path":["core","task","wake","RawWaker"],"kind":"struct"},"16:5976:7916":{"crate_id":16,"path":["gimli","read","cfi","UnwindTableRow"],"kind":"struct"},"16:5367:19965":{"crate_id":16,"path":["gimli","endianity","RunTimeEndian"],"kind":"enum"},"1:11063:7790":{"crate_id":1,"path":["std","sys","unix","time","Timespec"],"kind":"struct"},"5:7179:8087":{"crate_id":5,"path":["alloc","ffi","c_str","NulError"],"kind":"struct"},"5:1433:8343":{"crate_id":5,"path":["alloc","collections","btree","map","IntoValues"],"kind":"struct"},"6:4422:6748":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_absinfo"],"kind":"struct"},"16:3446:6033":{"crate_id":16,"path":["gimli","arch","RiscV"],"kind":"struct"},"6:123:14566":{"crate_id":6,"path":["libc","unix","fpos_t"],"kind":"enum"},"2:22829:7458":{"crate_id":2,"path":["core","num","saturating","Saturating"],"kind":"struct"},"16:8072:8052":{"crate_id":16,"path":["gimli","read","unit","EntriesRaw"],"kind":"struct"},"16:4728:6051":{"crate_id":16,"path":["gimli","constants","DwAddr"],"kind":"struct"},"5:1356:3224":{"crate_id":5,"path":["alloc","collections","btree","map","IterMut"],"kind":"struct"},"1:8136:8100":{"crate_id":1,"path":["std","io","Split"],"kind":"struct"},"16:8170:8059":{"crate_id":16,"path":["gimli","read","unit","DebugTypesUnitHeadersIter"],"kind":"struct"},"24:4785:3142":{"crate_id":24,"path":["syn","expr","ExprAwait"],"kind":"struct"},"2:7515:3279":{"crate_id":2,"path":["core","iter","traits","marker","FusedIterator"],"kind":"trait"},"24:4143:3467":{"crate_id":24,"path":["syn","token","Or"],"kind":"struct"},"2:21782:8859":{"crate_id":2,"path":["core","num","error","IntErrorKind"],"kind":"enum"},"24:4841:3155":{"crate_id":24,"path":["syn","expr","ExprIndex"],"kind":"struct"},"17:12033:5453":{"crate_id":17,"path":["object","macho","DylibCommand"],"kind":"struct"},"17:9178:20935":{"crate_id":17,"path":["object","read","any","ComdatSectionIterator"],"kind":"struct"},"5:2077:8075":{"crate_id":5,"path":["alloc","collections","btree","merge_iter","MergeIterInner"],"kind":"struct"},"17:13812:5948":{"crate_id":17,"path":["object","pe","ImageFunctionEntry64"],"kind":"struct"},"2:48933:243":{"crate_id":2,"path":["core","core_simd","fmt","fmt","Wrapper"],"kind":"struct"},"24:3921:3452":{"crate_id":24,"path":["syn","token","Dot"],"kind":"struct"},"2:7125:132":{"crate_id":2,"path":["core","iter","traits","collect","FromIterator"],"kind":"trait"},"2:42543:8109":{"crate_id":2,"path":["core","slice","iter","RChunksExact"],"kind":"struct"},"2:39001:14203":{"crate_id":2,"path":["core","ops","try_trait","Yeet"],"kind":"struct"},"1:4113:8890":{"crate_id":1,"path":["std","os","unix","net","ancillary","AncillaryData"],"kind":"enum"},"22:689:7863":{"crate_id":22,"path":["proc_macro2","rcvec","RcVecIntoIter"],"kind":"struct"},"5:2179:8082":{"crate_id":5,"path":["alloc","collections","btree","navigate","LazyLeafRange"],"kind":"struct"},"1:9032:7781":{"crate_id":1,"path":["std","time","Instant"],"kind":"struct"},"2:2253:104":{"crate_id":2,"path":["core","clone","Clone"],"kind":"trait"},"17:11446:5328":{"crate_id":17,"path":["object","elf","Rela32"],"kind":"struct"},"2:39963:8155":{"crate_id":2,"path":["core","iter","sources","from_generator","FromGenerator"],"kind":"struct"},"17:10527:21097":{"crate_id":17,"path":["object","read","pe","export","ExportTarget"],"kind":"enum"},"24:4085:3463":{"crate_id":24,"path":["syn","token","Minus"],"kind":"struct"},"17:12388:5520":{"crate_id":17,"path":["object","macho","EncryptionInfoCommand32"],"kind":"struct"},"24:4271:3476":{"crate_id":24,"path":["syn","token","Question"],"kind":"struct"},"17:8632:20907":{"crate_id":17,"path":["object","endian","Endianness"],"kind":"enum"},"18:0:2972":{"crate_id":18,"path":["memchr"],"kind":"module"},"17:12331:5513":{"crate_id":17,"path":["object","macho","UuidCommand"],"kind":"struct"},"24:3870:3449":{"crate_id":24,"path":["syn","token","Colon"],"kind":"struct"},"16:7635:6177":{"crate_id":16,"path":["gimli","read","rnglists","RawRange"],"kind":"struct"},"17:12158:5469":{"crate_id":17,"path":["object","macho","RoutinesCommand64"],"kind":"struct"},"24:5265:187":{"crate_id":24,"path":["syn","path","Path"],"kind":"struct"},"5:6592:4518":{"crate_id":5,"path":["alloc","vec","in_place_drop","InPlaceDstBufDrop"],"kind":"struct"},"1:3783:8857":{"crate_id":1,"path":["std","net","udp","UdpSocket"],"kind":"struct"},"6:595:6508":{"crate_id":6,"path":["libc","unix","protoent"],"kind":"struct"},"2:2306:123":{"crate_id":2,"path":["core","cmp","Eq"],"kind":"trait"},"2:21522:8112":{"crate_id":2,"path":["core","num","bignum","tests","Big8x3"],"kind":"struct"},"24:5448:3205":{"crate_id":24,"path":["syn","ty","TypeParen"],"kind":"struct"},"1:4509:8913":{"crate_id":1,"path":["std","os","unix","thread","JoinHandleExt"],"kind":"trait"},"17:1787:20977":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbolIterator"],"kind":"struct"},"1:5181:187":{"crate_id":1,"path":["std","path","Path"],"kind":"struct"},"6:6533:7242":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","sigaction"],"kind":"struct"},"2:1735:7432":{"crate_id":2,"path":["core","ptr","metadata","PtrComponents"],"kind":"struct"},"17:12536:5548":{"crate_id":17,"path":["object","macho","EntryPointCommand"],"kind":"struct"},"1:10405:8838":{"crate_id":1,"path":["std","sys","unix","stdio","Stdin"],"kind":"struct"},"21:405:36773":{"crate_id":21,"path":["proc_macro","bridge","scoped_cell","RefMutL"],"kind":"struct"},"6:1571:6545":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_ll"],"kind":"struct"},"20:10:3096":{"crate_id":20,"path":["quote","ext","TokenStreamExt"],"kind":"trait"},"2:3175:14152":{"crate_id":2,"path":["core","ops","try_trait","Residual"],"kind":"trait"},"6:4414:6745":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_id"],"kind":"struct"},"1:4257:8893":{"crate_id":1,"path":["std","os","unix","net","listener","UnixListener"],"kind":"struct"},"14:187:19941":{"crate_id":14,"path":["rustc_demangle","SizeLimitedFmtAdapter"],"kind":"struct"},"2:42953:3377":{"crate_id":2,"path":["core","str","iter","EscapeDefault"],"kind":"struct"},"24:5439:3201":{"crate_id":24,"path":["syn","ty","TypeImplTrait"],"kind":"struct"},"2:2501:147":{"crate_id":2,"path":["core","convert","Into"],"kind":"trait"},"17:11585:5357":{"crate_id":17,"path":["object","elf","Verneed"],"kind":"struct"},"1:8949:1857":{"crate_id":1,"path":["std","sync","mpmc","select","Token"],"kind":"struct"},"2:25639:7459":{"crate_id":2,"path":["core","num","wrapping","Wrapping"],"kind":"struct"},"24:5126:3184":{"crate_id":24,"path":["syn","lit","LitFloat"],"kind":"struct"},"2:30032:4257":{"crate_id":2,"path":["core","mem","transmutability","Assume"],"kind":"struct"},"16:3585:6034":{"crate_id":16,"path":["gimli","arch","X86"],"kind":"struct"},"16:5643:7925":{"crate_id":16,"path":["gimli","read","cfi","EhHdrTable"],"kind":"struct"},"2:39979:3270":{"crate_id":2,"path":["core","iter","sources","once_with","OnceWith"],"kind":"struct"},"9:481:19846":{"crate_id":9,"path":["miniz_oxide","DataFormat"],"kind":"enum"},"2:43097:8205":{"crate_id":2,"path":["core","str","pattern","CharArrayRefSearcher"],"kind":"struct"},"2:45548:7640":{"crate_id":2,"path":["core","core_arch","simd","i32x8"],"kind":"struct"},"6:562:6490":{"crate_id":6,"path":["libc","unix","linger"],"kind":"struct"},"24:4829:3152":{"crate_id":24,"path":["syn","expr","ExprForLoop"],"kind":"struct"},"24:1954:3220":{"crate_id":24,"path":["syn","punctuated","Iter"],"kind":"struct"},"2:39449:8773":{"crate_id":2,"path":["core","ffi","c_char"],"kind":"typedef"},"1:4579:7290":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt","st_ctime"],"kind":"foreign_type"},"6:1604:6567":{"crate_id":6,"path":["libc","unix","linux_like","sched_param"],"kind":"struct"},"5:1372:3219":{"crate_id":5,"path":["alloc","collections","btree","map","IntoIter"],"kind":"struct"},"5:5025:4825":{"crate_id":5,"path":["alloc","rc","Weak"],"kind":"struct"},"1:1991:181":{"crate_id":1,"path":["std","ffi","os_str","OsStr"],"kind":"struct"},"2:42441:14102":{"crate_id":2,"path":["core","slice","iter","ChunksMut"],"kind":"struct"},"17:9138:20934":{"crate_id":17,"path":["object","read","any","ComdatIterator"],"kind":"struct"},"2:45762:7643":{"crate_id":2,"path":["core","core_arch","simd","i8x64"],"kind":"struct"},"1:8765:7771":{"crate_id":1,"path":["std","process","ExitCode"],"kind":"struct"},"6:488:6445":{"crate_id":6,"path":["libc","unix","timeval"],"kind":"struct"},"24:609:3220":{"crate_id":24,"path":["syn","error","Iter"],"kind":"struct"},"17:10283:5209":{"crate_id":17,"path":["object","read","macho","segment","MachOSegmentInternal"],"kind":"struct"},"16:7711:6180":{"crate_id":16,"path":["gimli","read","UnitOffset"],"kind":"struct"},"16:7317:36660":{"crate_id":16,"path":["gimli","read","op","EvaluationState"],"kind":"enum"},"17:9973:7893":{"crate_id":17,"path":["object","read","elf","version","VerneedIterator"],"kind":"struct"},"2:40731:1852":{"crate_id":2,"path":["core","option","Item"],"kind":"struct"},"2:7559:32652":{"crate_id":2,"path":["core","net","display_buffer","DisplayBuffer"],"kind":"struct"},"1:8113:3297":{"crate_id":1,"path":["std","io","Chain"],"kind":"struct"},"6:1583:6553":{"crate_id":6,"path":["libc","unix","linux_like","fd_set"],"kind":"struct"},"17:9617:20958":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdatIterator"],"kind":"struct"},"24:4961:2209":{"crate_id":24,"path":["syn","generics","GenericParam"],"kind":"enum"},"16:2931:19992":{"crate_id":16,"path":["gimli","common","UnitSectionOffset"],"kind":"enum"},"1:7851:3339":{"crate_id":1,"path":["std","io","cursor","Cursor"],"kind":"struct"},"6:4963:6977":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_alg"],"kind":"struct"},"17:13169:5756":{"crate_id":17,"path":["object","pe","ImageAuxSymbolTokenDef"],"kind":"struct"},"2:38843:197":{"crate_id":2,"path":["core","ops","range","RangeFull"],"kind":"struct"},"17:10428:21094":{"crate_id":17,"path":["object","read","pe","file","PeComdat"],"kind":"struct"},"2:39642:3314":{"crate_id":2,"path":["core","iter","adapters","intersperse","Intersperse"],"kind":"struct"},"5:1453:8736":{"crate_id":5,"path":["alloc","collections","btree","map","RangeMut"],"kind":"struct"},"2:2863:5012":{"crate_id":2,"path":["core","ops","bit","ShlAssign"],"kind":"trait"},"1:2219:8788":{"crate_id":1,"path":["std","fs","read_to_string"],"kind":"function"},"6:6764:7357":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","mcontext_t"],"kind":"struct"},"5:2159:36555":{"crate_id":5,"path":["alloc","collections","btree","navigate","LazyLeafHandle"],"kind":"enum"},"17:12483:5544":{"crate_id":17,"path":["object","macho","LinkerOptionCommand"],"kind":"struct"},"24:3991:3456":{"crate_id":24,"path":["syn","token","EqEq"],"kind":"struct"},"1:5372:8944":{"crate_id":1,"path":["std","process","ChildStderr"],"kind":"struct"},"2:9034:3371":{"crate_id":2,"path":["core","fmt","Write"],"kind":"trait"},"1:10303:8948":{"crate_id":1,"path":["std","sys","unix","process","process_common","CommandArgs"],"kind":"struct"},"16:3030:6028":{"crate_id":16,"path":["gimli","common","DwoId"],"kind":"struct"},"17:8490:20927":{"crate_id":17,"path":["object","common","RelocationEncoding"],"kind":"enum"},"5:5631:229":{"crate_id":5,"path":["alloc","string","ToString"],"kind":"trait"},"16:2642:5994":{"crate_id":16,"path":["gimli","common","DebugMacroOffset"],"kind":"struct"},"21:967:4552":{"crate_id":21,"path":["proc_macro","bridge","client","FreeFunctions"],"kind":"struct"},"5:35:4426":{"crate_id":5,"path":["alloc","raw_vec","RawVec"],"kind":"struct"},"2:12433:138":{"crate_id":2,"path":["core","alloc","global","GlobalAlloc"],"kind":"trait"},"1:894:8070":{"crate_id":1,"path":["std","collections","hash","map","Values"],"kind":"struct"},"2:40957:90":{"crate_id":2,"path":["core","sync","atomic","AtomicU8"],"kind":"struct"},"1:10994:7769":{"crate_id":1,"path":["std","sys","unix","process","process_inner","ExitStatus"],"kind":"struct"},"2:41689:67":{"crate_id":2,"path":["core","fmt","rt","Alignment"],"kind":"enum"},"2:7245:156":{"crate_id":2,"path":["core","iter","traits","iterator","Iterator"],"kind":"trait"},"2:42472:7570":{"crate_id":2,"path":["core","slice","iter","ArrayWindows"],"kind":"struct"},"5:2906:25472":{"crate_id":5,"path":["alloc","collections","btree","node","marker","ValMut"],"kind":"struct"},"17:10923:7913":{"crate_id":17,"path":["object","read","ObjectMap"],"kind":"struct"},"17:12046:5454":{"crate_id":17,"path":["object","macho","SubFrameworkCommand"],"kind":"struct"},"2:42663:8103":{"crate_id":2,"path":["core","str","iter","RSplit"],"kind":"struct"},"2:2683:222":{"crate_id":2,"path":["core","marker","StructuralEq"],"kind":"trait"},"2:4363:3353":{"crate_id":2,"path":["core","cell","BorrowRefMut"],"kind":"struct"},"24:4556:1809":{"crate_id":24,"path":["syn","derive","Data"],"kind":"enum"},"17:12194:5475":{"crate_id":17,"path":["object","macho","DysymtabCommand"],"kind":"struct"},"5:1218:8734":{"crate_id":5,"path":["alloc","collections","btree","map","entry","OccupiedEntry"],"kind":"struct"},"17:975:20962":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbolIterator"],"kind":"struct"},"2:7518:3281":{"crate_id":2,"path":["core","iter","traits","marker","TrustedLen"],"kind":"trait"},"22:975:3219":{"crate_id":22,"path":["proc_macro2","token_stream","IntoIter"],"kind":"struct"},"17:13181:5759":{"crate_id":17,"path":["object","pe","ImageAuxSymbolFunction"],"kind":"struct"},"16:2786:6000":{"crate_id":16,"path":["gimli","common","DebugStrOffsetsBase"],"kind":"struct"},"2:12168:14179":{"crate_id":2,"path":["core","future","into_future","IntoFuture"],"kind":"trait"},"24:3058:3431":{"crate_id":24,"path":["syn","token","Priv"],"kind":"struct"},"14:221:6306":{"crate_id":14,"path":["rustc_demangle","SizeLimitExhausted"],"kind":"struct"},"24:5060:2442":{"crate_id":24,"path":["syn","generics","PredicateType"],"kind":"struct"},"1:3130:28586":{"crate_id":1,"path":["std","io","stdio","StdinRaw"],"kind":"struct"},"16:2720:5997":{"crate_id":16,"path":["gimli","common","DebugRngListsBase"],"kind":"struct"},"16:8047:6224":{"crate_id":16,"path":["gimli","read","unit","AttrsIter"],"kind":"struct"},"1:11889:1478":{"crate_id":1,"path":["std","u8"],"kind":"primitive"},"16:4818:6054":{"crate_id":16,"path":["gimli","constants","DwInl"],"kind":"struct"},"2:2736:3393":{"crate_id":2,"path":["core","marker","Unpin"],"kind":"trait"},"2:1534:4819":{"crate_id":2,"path":["core","mem","maybe_uninit","write_slice_cloned","Guard"],"kind":"struct"},"24:5444:3203":{"crate_id":24,"path":["syn","ty","TypeMacro"],"kind":"struct"},"2:3509:4512":{"crate_id":2,"path":["core","array","drain","Drain"],"kind":"struct"},"18:736:24840":{"crate_id":18,"path":["memchr","memmem","SearcherKind"],"kind":"enum"},"17:9557:5164":{"crate_id":17,"path":["object","read","coff","symbol","SymbolTable"],"kind":"struct"},"5:5475:4516":{"crate_id":5,"path":["alloc","string","retain","SetLenOnDrop"],"kind":"struct"},"24:4876:2065":{"crate_id":24,"path":["syn","expr","ExprPath"],"kind":"struct"},"1:413:162":{"crate_id":1,"path":["std","thread","local","LocalKey"],"kind":"struct"},"24:2164:8877":{"crate_id":24,"path":["syn","sealed","lookahead","Sealed"],"kind":"trait"},"24:3950:3454":{"crate_id":24,"path":["syn","token","DotDotDot"],"kind":"struct"},"17:13219:5773":{"crate_id":17,"path":["object","pe","ImageAuxSymbolSection"],"kind":"struct"},"1:8907:4178":{"crate_id":1,"path":["std","sync","mpmc","context","Inner"],"kind":"struct"},"16:4480:6044":{"crate_id":16,"path":["gimli","constants","DwLle"],"kind":"struct"},"17:12923:5685":{"crate_id":17,"path":["object","pe","ImageOptionalHeader32"],"kind":"struct"},"24:3211:2257":{"crate_id":24,"path":["syn","token","Trait"],"kind":"struct"},"6:4461:6765":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_envelope"],"kind":"struct"},"9:388:19848":{"crate_id":9,"path":["miniz_oxide","MZFlush"],"kind":"enum"},"17:10589:7904":{"crate_id":17,"path":["object","read","pe","import","ImportThunkList"],"kind":"struct"},"5:1422:8342":{"crate_id":5,"path":["alloc","collections","btree","map","IntoKeys"],"kind":"struct"},"2:42695:8180":{"crate_id":2,"path":["core","str","iter","SplitTerminator"],"kind":"struct"},"2:12488:4424":{"crate_id":2,"path":["core","alloc","Allocator"],"kind":"trait"},"22:834:2472":{"crate_id":22,"path":["proc_macro2","imp","Literal"],"kind":"enum"},"16:5305:6064":{"crate_id":16,"path":["gimli","constants","DwOp"],"kind":"struct"},"24:4114:3465":{"crate_id":24,"path":["syn","token","Ne"],"kind":"struct"},"17:9218:5164":{"crate_id":17,"path":["object","read","any","SymbolTable"],"kind":"struct"},"6:4935:6965":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_nl"],"kind":"struct"},"20:77:1870":{"crate_id":20,"path":["quote","to_tokens","ToTokens"],"kind":"trait"},"5:4197:3220":{"crate_id":5,"path":["alloc","collections","vec_deque","iter","Iter"],"kind":"struct"},"6:4740:6860":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_vm"],"kind":"struct"},"6:7246:7392":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","align","clone_args"],"kind":"struct"},"1:6011:4874":{"crate_id":1,"path":["std","sync","mpmc","list","Channel"],"kind":"struct"},"2:40618:8163":{"crate_id":2,"path":["core","net","parser","AddrParseError"],"kind":"struct"},"16:6460:6009":{"crate_id":16,"path":["gimli","read","index","DebugCuIndex"],"kind":"struct"},"1:7770:4702":{"crate_id":1,"path":["std","fs","Metadata"],"kind":"struct"},"1:9371:8803":{"crate_id":1,"path":["std","sys","unix","fs","ReadDir"],"kind":"struct"},"2:9332:14182":{"crate_id":2,"path":["core","hash","BuildHasher"],"kind":"trait"},"16:7519:8046":{"crate_id":16,"path":["gimli","read","pubtypes","PubTypesEntryIter"],"kind":"struct"},"2:9084:191":{"crate_id":2,"path":["core","fmt","Pointer"],"kind":"trait"},"17:8256:20906":{"crate_id":17,"path":["object","common","AddressSize"],"kind":"enum"},"2:9297:143":{"crate_id":2,"path":["core","hash","Hasher"],"kind":"trait"},"1:11228:8261":{"crate_id":1,"path":["std","sys_common","wtf8","Wtf8CodePoints"],"kind":"struct"},"5:3174:1841":{"crate_id":5,"path":["alloc","collections","btree","set","Union"],"kind":"struct"},"1:1850:4587":{"crate_id":1,"path":["std","env","Args"],"kind":"struct"},"1:7633:8723":{"crate_id":1,"path":["std","backtrace","BacktraceStatus"],"kind":"enum"},"2:9080:3374":{"crate_id":2,"path":["core","fmt","LowerHex"],"kind":"trait"},"2:42589:7572":{"crate_id":2,"path":["core","str","error","Utf8Error"],"kind":"struct"},"6:1687:6628":{"crate_id":6,"path":["libc","unix","linux_like","arpreq_old"],"kind":"struct"},"1:11838:8358":{"crate_id":1,"path":["std","backtrace_rs","symbolize","gimli","Cache"],"kind":"struct"},"16:4904:6057":{"crate_id":16,"path":["gimli","constants","DwIdx"],"kind":"struct"},"16:7529:6022":{"crate_id":16,"path":["gimli","read","rnglists","DebugRanges"],"kind":"struct"},"17:11391:5320":{"crate_id":17,"path":["object","elf","Sym64"],"kind":"struct"},"2:39512:3287":{"crate_id":2,"path":["core","iter","adapters","array_chunks","ArrayChunks"],"kind":"struct"},"17:13194:5765":{"crate_id":17,"path":["object","pe","ImageAuxSymbolFunctionBeginEnd"],"kind":"struct"},"6:1509:6512":{"crate_id":6,"path":["libc","unix","linux_like","in_addr"],"kind":"struct"},"2:43622:7579":{"crate_id":2,"path":["core","task","wake","RawWakerVTable"],"kind":"struct"},"2:11362:8188":{"crate_id":2,"path":["core","str","iter","MatchesInternal"],"kind":"struct"},"24:3841:3447":{"crate_id":24,"path":["syn","token","Caret"],"kind":"struct"},"2:22196:4187":{"crate_id":2,"path":["core","num","nonzero","NonZeroUsize"],"kind":"struct"},"5:4389:4821":{"crate_id":5,"path":["alloc","collections","vec_deque","truncate","Dropper"],"kind":"struct"},"20:322:2474":{"crate_id":20,"path":["quote","spanned","Spanned"],"kind":"trait"},"17:13488:5841":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation64V2"],"kind":"struct"},"17:11090:5258":{"crate_id":17,"path":["object","read","CompressedFileRange"],"kind":"struct"},"21:2509:3387":{"crate_id":21,"path":["proc_macro","bridge","Diagnostic"],"kind":"struct"},"17:12622:5225":{"crate_id":17,"path":["object","macho","Relocation"],"kind":"struct"},"2:30062:32398":{"crate_id":2,"path":["core","ptr","alignment","AlignmentEnum16"],"kind":"enum"},"17:10705:5229":{"crate_id":17,"path":["object","read","pe","resource","ResourceName"],"kind":"struct"},"2:2231:96":{"crate_id":2,"path":["core","borrow","Borrow"],"kind":"trait"},"2:1618:579":{"crate_id":2,"path":["core","mem","drop"],"kind":"function"},"1:7605:4184":{"crate_id":1,"path":["std","thread","Thread"],"kind":"struct"},"2:44540:7594":{"crate_id":2,"path":["core","core_arch","simd","i32x2"],"kind":"struct"},"2:10222:14109":{"crate_id":2,"path":["core","slice","iter","RSplitNMut"],"kind":"struct"},"2:11346:8185":{"crate_id":2,"path":["core","str","iter","MatchIndicesInternal"],"kind":"struct"},"0:0:1678":{"crate_id":0,"path":["serde_derive"],"kind":"module"},"17:11410:5321":{"crate_id":17,"path":["object","elf","Syminfo32"],"kind":"struct"},"16:2879:6004":{"crate_id":16,"path":["gimli","common","DebugFrameOffset"],"kind":"struct"},"2:42899:8191":{"crate_id":2,"path":["core","str","iter","Lines"],"kind":"struct"},"1:4415:8895":{"crate_id":1,"path":["std","os","unix","process","CommandExt"],"kind":"trait"},"1:3402:8805":{"crate_id":1,"path":["std","io","IoSliceMut"],"kind":"struct"},"18:599:4995":{"crate_id":18,"path":["memchr","memmem","twoway","Shift"],"kind":"enum"},"17:10402:21084":{"crate_id":17,"path":["object","read","pe","file","PeFile"],"kind":"struct"},"17:13469:5836":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation64"],"kind":"struct"},"2:1721:4461":{"crate_id":2,"path":["core","ptr","metadata","Pointee"],"kind":"trait"},"2:2839:3479":{"crate_id":2,"path":["core","ops","bit","Shl"],"kind":"trait"},"24:0:1652":{"crate_id":24,"path":["syn"],"kind":"module"},"2:2680:3358":{"crate_id":2,"path":["core","marker","Unsize"],"kind":"trait"},"6:7497:7409":{"crate_id":6,"path":["libc","unix","linux_like","linux","fanotify_event_metadata"],"kind":"struct"},"2:5513:3291":{"crate_id":2,"path":["core","iter","adapters","flatten","Flatten"],"kind":"struct"},"24:3194:3435":{"crate_id":24,"path":["syn","token","Super"],"kind":"struct"},"16:6293:6077":{"crate_id":16,"path":["gimli","read","reader","ReaderOffsetId"],"kind":"struct"},"1:8376:7565":{"crate_id":1,"path":["std","path","State"],"kind":"enum"},"2:31780:6356":{"crate_id":2,"path":["core","convert","Infallible"],"kind":"enum"},"5:6278:4793":{"crate_id":5,"path":["alloc","vec","drain","drop","DropGuard"],"kind":"struct"},"1:3912:8862":{"crate_id":1,"path":["std","os","unix","fs","FileExt"],"kind":"trait"},"2:11397:8102":{"crate_id":2,"path":["core","str","iter","SplitInclusive"],"kind":"struct"},"2:48985:243":{"crate_id":2,"path":["core","core_simd","fmt","fmt","Wrapper"],"kind":"struct"},"17:10897:5250":{"crate_id":17,"path":["object","read","SymbolMapName"],"kind":"struct"},"6:4650:6821":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Shdr"],"kind":"struct"},"24:1405:1873":{"crate_id":24,"path":["syn","meta","ParseNestedMeta"],"kind":"struct"},"11:2205:3258":{"crate_id":11,"path":["hashbrown","TryReserveError"],"kind":"enum"},"24:5299:2453":{"crate_id":24,"path":["syn","path","AngleBracketedGenericArguments"],"kind":"struct"},"17:10334:5164":{"crate_id":17,"path":["object","read","macho","symbol","SymbolTable"],"kind":"struct"},"1:5387:8945":{"crate_id":1,"path":["std","process","Command"],"kind":"struct"},"1:7787:7705":{"crate_id":1,"path":["std","fs","FileTimes"],"kind":"struct"},"2:39402:100":{"crate_id":2,"path":["core","ffi","c_str","CStr"],"kind":"struct"},"6:5804:7084":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","termios"],"kind":"struct"},"17:13411:5822":{"crate_id":17,"path":["object","pe","ImageResourceDirectoryEntry"],"kind":"struct"},"1:3250:8837":{"crate_id":1,"path":["std","io","stdio","StderrLock"],"kind":"struct"},"2:2910:115":{"crate_id":2,"path":["core","ops","deref","Deref"],"kind":"trait"},"16:2694:5996":{"crate_id":16,"path":["gimli","common","RangeListsOffset"],"kind":"struct"},"17:11844:5424":{"crate_id":17,"path":["object","macho","MachHeader32"],"kind":"struct"},"16:4845:6055":{"crate_id":16,"path":["gimli","constants","DwOrd"],"kind":"struct"},"5:3107:3220":{"crate_id":5,"path":["alloc","collections","btree","set","Iter"],"kind":"struct"},"17:13659:5905":{"crate_id":17,"path":["object","pe","ImageArm64RuntimeFunctionEntry"],"kind":"struct"},"5:3511:160":{"crate_id":5,"path":["alloc","collections","linked_list","LinkedList"],"kind":"struct"},"16:2808:6001":{"crate_id":16,"path":["gimli","common","DebugStrOffsetsIndex"],"kind":"struct"},"2:44956:7614":{"crate_id":2,"path":["core","core_arch","simd","f64x4"],"kind":"struct"},"17:9453:20953":{"crate_id":17,"path":["object","read","archive","MemberHeader"],"kind":"enum"},"5:7193:32418":{"crate_id":5,"path":["alloc","ffi","c_str","FromBytesWithNulErrorKind"],"kind":"enum"},"6:4301:6675":{"crate_id":6,"path":["libc","unix","linux_like","linux","spwd"],"kind":"struct"},"1:3441:3371":{"crate_id":1,"path":["std","io","Write"],"kind":"trait"},"17:562:1881":{"crate_id":17,"path":["object","read","any","Symbol"],"kind":"struct"},"2:4726:8726":{"crate_id":2,"path":["core","ffi","c_void"],"kind":"enum"},"6:4449:6760":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_replay"],"kind":"struct"},"17:13324:5796":{"crate_id":17,"path":["object","pe","ImageThunkData32"],"kind":"struct"},"6:4924:6960":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_prinfo"],"kind":"struct"},"21:2710:3384":{"crate_id":21,"path":["proc_macro","LineColumn"],"kind":"struct"},"2:41077:81":{"crate_id":2,"path":["core","sync","atomic","AtomicI32"],"kind":"struct"},"4:0:2962":{"crate_id":4,"path":["rustc_std_workspace_core"],"kind":"module"},"2:7522:3282":{"crate_id":2,"path":["core","iter","traits","marker","TrustedStep"],"kind":"trait"},"2:39326:3377":{"crate_id":2,"path":["core","char","EscapeDefault"],"kind":"struct"},"17:12770:5571":{"crate_id":17,"path":["object","pe","ImageDosHeader"],"kind":"struct"},"16:6767:8022":{"crate_id":16,"path":["gimli","read","line","IncompleteLineProgram"],"kind":"struct"},"6:1652:6603":{"crate_id":6,"path":["libc","unix","linux_like","ifaddrs"],"kind":"struct"},"2:43635:158":{"crate_id":2,"path":["core","alloc","layout","Layout"],"kind":"struct"},"2:43257:8217":{"crate_id":2,"path":["core","str","lossy","Utf8Chunk"],"kind":"struct"},"21:141:4546":{"crate_id":21,"path":["proc_macro","bridge","client","Client"],"kind":"struct"},"2:39332:14169":{"crate_id":2,"path":["core","char","EscapeDefaultState"],"kind":"enum"},"6:4375:6725":{"crate_id":6,"path":["libc","unix","linux_like","linux","cpu_set_t"],"kind":"struct"},"2:41944:8165":{"crate_id":2,"path":["core","hash","sip","SipHasher13"],"kind":"struct"},"2:40765:3698":{"crate_id":2,"path":["core","panic","location","Location"],"kind":"struct"},"5:5229:14094":{"crate_id":5,"path":["alloc","slice","Join"],"kind":"trait"},"0:927:1665":{"crate_id":0,"path":["serde_derive","Serialize"],"kind":"proc_derive"},"2:38859:195":{"crate_id":2,"path":["core","ops","range","Range"],"kind":"struct"},"17:13453:5833":{"crate_id":17,"path":["object","pe","ImageDynamicRelocationTable"],"kind":"struct"},"6:4510:6792":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_effect"],"kind":"struct"},"5:6749:4837":{"crate_id":5,"path":["alloc","vec","dedup_by","FillGapOnDrop"],"kind":"struct"},"2:4318:3352":{"crate_id":2,"path":["core","cell","Ref"],"kind":"struct"},"24:4453:3612":{"crate_id":24,"path":["syn","token","Bracket"],"kind":"struct"},"21:2606:7869":{"crate_id":21,"path":["proc_macro","diagnostic","Children"],"kind":"struct"},"17:13033:5726":{"crate_id":17,"path":["object","pe","ImageRomHeaders"],"kind":"struct"},"24:3364:3441":{"crate_id":24,"path":["syn","token","Where"],"kind":"struct"},"24:5436:3200":{"crate_id":24,"path":["syn","ty","TypeGroup"],"kind":"struct"},"17:9322:36680":{"crate_id":17,"path":["object","read","any","DynamicRelocationIteratorInternal"],"kind":"enum"},"6:4773:6880":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_j1939"],"kind":"struct"},"24:3962:3455":{"crate_id":24,"path":["syn","token","DotDotEq"],"kind":"struct"},"17:8718:5142":{"crate_id":17,"path":["object","endian","U32Bytes"],"kind":"struct"},"2:40595:32399":{"crate_id":2,"path":["core","net","parser","AddrKind"],"kind":"enum"},"5:5225:14093":{"crate_id":5,"path":["alloc","slice","Concat"],"kind":"trait"},"24:5346:1790":{"crate_id":24,"path":["syn","ty","Type"],"kind":"enum"},"1:361:4195":{"crate_id":1,"path":["std","thread","scoped","ScopedJoinHandle"],"kind":"struct"},"17:10885:7912":{"crate_id":17,"path":["object","read","SymbolMap"],"kind":"struct"},"6:1716:6639":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_un"],"kind":"struct"},"16:6376:6008":{"crate_id":16,"path":["gimli","read","aranges","DebugAranges"],"kind":"struct"},"24:5124:3185":{"crate_id":24,"path":["syn","lit","LitInt"],"kind":"struct"},"16:8180:20872":{"crate_id":16,"path":["gimli","read","value","ValueType"],"kind":"enum"},"6:6575:7266":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","siginfo_t"],"kind":"struct"},"17:9534:20959":{"crate_id":17,"path":["object","read","coff","section","CoffSectionIterator"],"kind":"struct"},"11:1085:19925":{"crate_id":11,"path":["hashbrown","map","OccupiedEntryRef"],"kind":"struct"},"2:11323:8182":{"crate_id":2,"path":["core","str","iter","SplitNInternal"],"kind":"struct"},"17:9443:20952":{"crate_id":17,"path":["object","read","archive","ArchiveMemberIterator"],"kind":"struct"},"1:4437:8896":{"crate_id":1,"path":["std","os","unix","process","ExitStatusExt"],"kind":"trait"},"2:11799:110":{"crate_id":2,"path":["core","str","lossy","Debug"],"kind":"struct"},"17:10635:5224":{"crate_id":17,"path":["object","read","pe","relocation","RelocationBlockIterator"],"kind":"struct"},"2:8285:14115":{"crate_id":2,"path":["core","panicking","assert_matches_failed","Pattern"],"kind":"struct"},"2:10707:14104":{"crate_id":2,"path":["core","slice","iter","GroupBy"],"kind":"struct"},"2:20435:34721":{"crate_id":2,"path":["core","core_simd","swizzle","interleave","Hi"],"kind":"struct"},"6:6104:7210":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","sysinfo"],"kind":"struct"},"16:7743:6013":{"crate_id":16,"path":["gimli","read","unit","DebugInfo"],"kind":"struct"},"24:4382:3484":{"crate_id":24,"path":["syn","token","SlashEq"],"kind":"struct"},"1:7827:117":{"crate_id":1,"path":["std","fs","DirBuilder"],"kind":"struct"},"24:1089:1877":{"crate_id":24,"path":["syn","lifetime","Lifetime"],"kind":"function"},"24:4991:3176":{"crate_id":24,"path":["syn","generics","ConstParam"],"kind":"struct"},"16:5708:7930":{"crate_id":16,"path":["gimli","read","cfi","SectionBaseAddresses"],"kind":"struct"},"2:40867:3220":{"crate_id":2,"path":["core","result","Iter"],"kind":"struct"},"16:6474:6026":{"crate_id":16,"path":["gimli","read","index","DebugTuIndex"],"kind":"struct"},"1:8308:3694":{"crate_id":1,"path":["std","panic","BacktraceStyle"],"kind":"enum"},"16:5594:6012":{"crate_id":16,"path":["gimli","read","cfi","EhFrameHdr"],"kind":"struct"},"2:46591:7687":{"crate_id":2,"path":["core","core_arch","x86","__m256i"],"kind":"struct"},"24:5480:3197":{"crate_id":24,"path":["syn","ty","BareVariadic"],"kind":"struct"},"18:564:5035":{"crate_id":18,"path":["memchr","memmem","rarebytes","RareNeedleBytes"],"kind":"struct"},"9:0:2964":{"crate_id":9,"path":["miniz_oxide"],"kind":"module"},"24:1761:1798":{"crate_id":24,"path":["syn","punctuated","Punctuated"],"kind":"struct"},"2:42962:8132":{"crate_id":2,"path":["core","str","iter","EscapeUnicode"],"kind":"struct"},"6:5831:7103":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","mallinfo2"],"kind":"struct"},"2:43223:14131":{"crate_id":2,"path":["core","str","pattern","StrSearcherImpl"],"kind":"enum"},"24:4254:3475":{"crate_id":24,"path":["syn","token","Pound"],"kind":"struct"},"24:2990:3427":{"crate_id":24,"path":["syn","token","Mod"],"kind":"struct"},"17:9907:5172":{"crate_id":17,"path":["object","read","elf","version","VersionIndex"],"kind":"struct"},"17:11879:5428":{"crate_id":17,"path":["object","macho","LoadCommand"],"kind":"struct"},"2:29992:4255":{"crate_id":2,"path":["core","mem","manually_drop","ManuallyDrop"],"kind":"struct"},"2:3164:231":{"crate_id":2,"path":["core","ops","try_trait","Try"],"kind":"trait"},"16:4757:6052":{"crate_id":16,"path":["gimli","constants","DwId"],"kind":"struct"},"1:1574:4512":{"crate_id":1,"path":["std","collections","hash","set","Drain"],"kind":"struct"},"21:54:4536":{"crate_id":21,"path":["proc_macro","bridge","buffer","Buffer"],"kind":"struct"},"2:42749:8183":{"crate_id":2,"path":["core","str","iter","SplitN"],"kind":"struct"},"5:953:4793":{"crate_id":5,"path":["alloc","collections","binary_heap","drop","DropGuard"],"kind":"struct"},"16:2742:5998":{"crate_id":16,"path":["gimli","common","DebugRngListsIndex"],"kind":"struct"},"1:11384:8857":{"crate_id":1,"path":["std","sys_common","net","UdpSocket"],"kind":"struct"},"24:4196:3471":{"crate_id":24,"path":["syn","token","Percent"],"kind":"struct"},"16:2426:5985":{"crate_id":16,"path":["gimli","common","DebugAddrIndex"],"kind":"struct"},"2:21469:8111":{"crate_id":2,"path":["core","num","bignum","Big32x40"],"kind":"struct"},"17:10270:21027":{"crate_id":17,"path":["object","read","macho","segment","MachOSegment"],"kind":"struct"},"2:4747:34610":{"crate_id":2,"path":["core","ffi","sealed_trait","VaArgSafe"],"kind":"trait"},"2:39348:8138":{"crate_id":2,"path":["core","char","EscapeDebug"],"kind":"struct"},"1:5695:8962":{"crate_id":1,"path":["std","sync","barrier","BarrierWaitResult"],"kind":"struct"},"16:4932:6058":{"crate_id":16,"path":["gimli","constants","DwDefaulted"],"kind":"struct"},"24:2939:3426":{"crate_id":24,"path":["syn","token","Loop"],"kind":"struct"},"24:3938:3453":{"crate_id":24,"path":["syn","token","DotDot"],"kind":"struct"},"24:5473:3195":{"crate_id":24,"path":["syn","ty","Abi"],"kind":"struct"},"2:20830:8877":{"crate_id":2,"path":["core","core_simd","masks","to_bitmask","sealed","Sealed"],"kind":"trait"},"17:10440:21095":{"crate_id":17,"path":["object","read","pe","file","PeComdatSectionIterator"],"kind":"struct"},"2:46506:7682":{"crate_id":2,"path":["core","core_arch","simd","u64x8"],"kind":"struct"},"16:7244:36662":{"crate_id":16,"path":["gimli","read","op","OperationEvaluationResult"],"kind":"enum"},"17:11969:5444":{"crate_id":17,"path":["object","macho","Section64"],"kind":"struct"},"6:6124:7224":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","msqid_ds"],"kind":"struct"},"17:10104:5175":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandIterator"],"kind":"struct"},"5:2106:8077":{"crate_id":5,"path":["alloc","collections","btree","navigate","LeafRange"],"kind":"struct"},"22:112:36850":{"crate_id":22,"path":["proc_macro2","rcvec","RcVecBuilder"],"kind":"struct"},"2:2495:74":{"crate_id":2,"path":["core","convert","AsRef"],"kind":"trait"},"2:40756:3219":{"crate_id":2,"path":["core","option","IntoIter"],"kind":"struct"},"21:2793:1804":{"crate_id":21,"path":["proc_macro","Ident"],"kind":"struct"},"2:43029:14130":{"crate_id":2,"path":["core","str","pattern","SearchStep"],"kind":"enum"},"17:11641:5374":{"crate_id":17,"path":["object","elf","HashHeader"],"kind":"struct"},"9:502:6419":{"crate_id":9,"path":["miniz_oxide","StreamResult"],"kind":"struct"},"24:4846:3156":{"crate_id":24,"path":["syn","expr","ExprInfer"],"kind":"struct"},"2:43080:8204":{"crate_id":2,"path":["core","str","pattern","CharArraySearcher"],"kind":"struct"},"17:9670:20976":{"crate_id":17,"path":["object","read","elf","segment","ElfSegmentIterator"],"kind":"struct"},"1:1086:8639":{"crate_id":1,"path":["std","collections","hash","map","OccupiedError"],"kind":"struct"},"17:13879:5960":{"crate_id":17,"path":["object","pe","ImageCor20Header"],"kind":"struct"},"5:2895:2042":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Owned"],"kind":"enum"},"17:11891:5430":{"crate_id":17,"path":["object","macho","LcStr"],"kind":"struct"},"6:4756:6869":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_extended_err"],"kind":"struct"},"16:3899:6039":{"crate_id":16,"path":["gimli","constants","DwChildren"],"kind":"struct"},"5:670:228":{"crate_id":5,"path":["alloc","borrow","ToOwned"],"kind":"trait"},"5:7222:8093":{"crate_id":5,"path":["alloc","ffi","c_str","IntoStringError"],"kind":"struct"},"1:682:8722":{"crate_id":1,"path":["std","backtrace","LazilyResolvedCapture"],"kind":"struct"},"13:110:36615":{"crate_id":13,"path":["std_detect","detect","arch","x86","Feature"],"kind":"enum"},"6:6593:7275":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stat"],"kind":"struct"},"1:1439:142":{"crate_id":1,"path":["std","collections","hash","set","HashSet"],"kind":"struct"},"2:43376:8223":{"crate_id":2,"path":["core","str","CharEscapeDefault"],"kind":"struct"},"1:10408:8840":{"crate_id":1,"path":["std","sys","unix","stdio","Stdout"],"kind":"struct"},"2:42928:8194":{"crate_id":2,"path":["core","str","iter","SplitAsciiWhitespace"],"kind":"struct"},"1:11890:1475":{"crate_id":1,"path":["std","u16"],"kind":"primitive"},"5:1602:4793":{"crate_id":5,"path":["alloc","collections","btree","map","drop","DropGuard"],"kind":"struct"},"17:9028:20932":{"crate_id":17,"path":["object","read","any","SegmentIterator"],"kind":"struct"},"2:38828:8126":{"crate_id":2,"path":["core","ops","index_range","IndexRange"],"kind":"struct"},"5:7058:8086":{"crate_id":5,"path":["alloc","collections","btree","set_val","SetValZST"],"kind":"struct"},"16:3815:6037":{"crate_id":16,"path":["gimli","constants","DwUt"],"kind":"struct"},"1:6623:29721":{"crate_id":1,"path":["std","sync","rwlock","fmt","LockedPlaceholder"],"kind":"struct"},"1:4682:8879":{"crate_id":1,"path":["std","os","fd","raw","FromRawFd"],"kind":"trait"},"16:2337:5976":{"crate_id":16,"path":["gimli","common","LineEncoding"],"kind":"struct"},"11:853:8732":{"crate_id":11,"path":["hashbrown","map","RawVacantEntryMut"],"kind":"struct"},"17:11258:5295":{"crate_id":17,"path":["object","elf","FileHeader64"],"kind":"struct"},"2:43234:8209":{"crate_id":2,"path":["core","str","pattern","EmptyNeedle"],"kind":"struct"},"18:681:7875":{"crate_id":18,"path":["memchr","memmem","Finder"],"kind":"struct"},"11:444:140":{"crate_id":11,"path":["hashbrown","map","HashMap"],"kind":"struct"},"24:5155:2174":{"crate_id":24,"path":["syn","mac","Macro"],"kind":"struct"},"2:42645:8100":{"crate_id":2,"path":["core","str","iter","Split"],"kind":"struct"},"16:4400:6042":{"crate_id":16,"path":["gimli","constants","DwForm"],"kind":"struct"},"1:11897:13":{"crate_id":1,"path":["std","fn"],"kind":"primitive"},"2:20456:34718":{"crate_id":2,"path":["core","core_simd","swizzle","deinterleave","Odd"],"kind":"struct"},"2:39662:3292":{"crate_id":2,"path":["core","iter","adapters","map_while","MapWhile"],"kind":"struct"},"1:8080:7746":{"crate_id":1,"path":["std","io","IoSlice"],"kind":"struct"},"24:2718:114":{"crate_id":24,"path":["syn","token","Default"],"kind":"struct"},"24:5304:2172":{"crate_id":24,"path":["syn","path","AssocType"],"kind":"struct"},"16:6218:1834":{"crate_id":16,"path":["gimli","read","dwarf","Unit"],"kind":"struct"},"2:39985:3272":{"crate_id":2,"path":["core","iter","sources","repeat","Repeat"],"kind":"struct"},"16:8256:6230":{"crate_id":16,"path":["gimli","read","StoreOnHeap"],"kind":"struct"},"2:21591:8113":{"crate_id":2,"path":["core","num","dec2flt","decimal","Decimal"],"kind":"struct"},"24:103:4137":{"crate_id":24,"path":["syn","token","CustomToken"],"kind":"trait"},"17:10257:21028":{"crate_id":17,"path":["object","read","macho","segment","MachOSegmentIterator"],"kind":"struct"},"5:5892:4819":{"crate_id":5,"path":["alloc","sync","from_iter_exact","Guard"],"kind":"struct"},"2:46571:7685":{"crate_id":2,"path":["core","core_arch","x86","__m128"],"kind":"struct"},"1:11186:7791":{"crate_id":1,"path":["std","sys_common","wtf8","CodePoint"],"kind":"struct"},"5:4808:201":{"crate_id":5,"path":["alloc","rc","Rc"],"kind":"struct"},"17:12592:5555":{"crate_id":17,"path":["object","macho","Nlist32"],"kind":"struct"},"1:965:8733":{"crate_id":1,"path":["std","collections","hash","map","RawEntryBuilder"],"kind":"struct"},"1:7686:1957":{"crate_id":1,"path":["std","error","private","Internal"],"kind":"struct"},"2:41439:2263":{"crate_id":2,"path":["core","fmt","num","Binary"],"kind":"struct"},"6:6004:7187":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ptrace_syscall_info"],"kind":"struct"},"11:1555:19929":{"crate_id":11,"path":["hashbrown","rustc_entry","RustcVacantEntry"],"kind":"struct"},"2:38925:198":{"crate_id":2,"path":["core","ops","range","RangeInclusive"],"kind":"struct"},"16:7335:36659":{"crate_id":16,"path":["gimli","read","op","EvaluationWaiting"],"kind":"enum"},"1:11870:368":{"crate_id":1,"path":["std","bool"],"kind":"primitive"},"16:6819:6117":{"crate_id":16,"path":["gimli","read","line","FileEntry"],"kind":"struct"},"6:5735:7052":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","statx_timestamp"],"kind":"struct"},"18:755:7888":{"crate_id":18,"path":["memchr","memmem","SearcherRev"],"kind":"struct"},"2:42203:8172":{"crate_id":2,"path":["core","slice","ascii","EscapeAscii"],"kind":"struct"},"2:9044:130":{"crate_id":2,"path":["core","fmt","Formatter"],"kind":"struct"},"16:2594:5992":{"crate_id":16,"path":["gimli","common","DebugLocListsIndex"],"kind":"struct"},"5:6232:4512":{"crate_id":5,"path":["alloc","vec","drain","Drain"],"kind":"struct"},"2:42184:7569":{"crate_id":2,"path":["core","slice","sort","TimSortRun"],"kind":"struct"},"5:853:4801":{"crate_id":5,"path":["alloc","collections","binary_heap","Hole"],"kind":"struct"},"21:2037:4534":{"crate_id":21,"path":["proc_macro","bridge","LitKind"],"kind":"enum"},"2:21756:7456":{"crate_id":2,"path":["core","num","error","TryFromIntError"],"kind":"struct"},"5:1444:195":{"crate_id":5,"path":["alloc","collections","btree","map","Range"],"kind":"struct"},"2:40824:207":{"crate_id":2,"path":["core","result","Result"],"kind":"enum"},"1:8326:7760":{"crate_id":1,"path":["std","path","Prefix"],"kind":"enum"},"24:88:1857":{"crate_id":24,"path":["syn","token","Token"],"kind":"trait"},"1:6759:9006":{"crate_id":1,"path":["std","std_float","StdFloat"],"kind":"trait"},"2:4096:3363":{"crate_id":2,"path":["core","cell","lazy","LazyCell"],"kind":"struct"},"2:38903:199":{"crate_id":2,"path":["core","ops","range","RangeTo"],"kind":"struct"},"1:7921:29737":{"crate_id":1,"path":["std","io","error","SimpleMessage"],"kind":"struct"},"16:2764:5999":{"crate_id":16,"path":["gimli","common","DebugStrOffset"],"kind":"struct"},"2:4392:3355":{"crate_id":2,"path":["core","cell","UnsafeCell"],"kind":"struct"},"16:6919:36625":{"crate_id":16,"path":["gimli","read","loclists","LocListsFormat"],"kind":"enum"},"17:11109:5261":{"crate_id":17,"path":["object","read","CompressedData"],"kind":"struct"},"1:11895:1531":{"crate_id":1,"path":["std","usize"],"kind":"primitive"},"17:13678:5911":{"crate_id":17,"path":["object","pe","ImageAlphaRuntimeFunctionEntry"],"kind":"struct"},"6:1550:6530":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_in6"],"kind":"struct"},"9:352:19862":{"crate_id":9,"path":["miniz_oxide","inflate","TINFLStatus"],"kind":"enum"},"7:0:1521":{"crate_id":7,"path":["unwind"],"kind":"module"},"2:11593:14116":{"crate_id":2,"path":["core","str","pattern","ReverseSearcher"],"kind":"trait"},"2:39532:3288":{"crate_id":2,"path":["core","iter","adapters","by_ref_sized","ByRefSized"],"kind":"struct"},"17:8443:20926":{"crate_id":17,"path":["object","common","RelocationKind"],"kind":"enum"},"16:6662:8008":{"crate_id":16,"path":["gimli","read","line","LineInstructions"],"kind":"struct"},"17:12496:5545":{"crate_id":17,"path":["object","macho","SymsegCommand"],"kind":"struct"},"17:11924:5438":{"crate_id":17,"path":["object","macho","SegmentCommand64"],"kind":"struct"},"24:4537:3137":{"crate_id":24,"path":["syn","data","FieldsNamed"],"kind":"struct"},"2:2679:3392":{"crate_id":2,"path":["core","marker","Sized"],"kind":"trait"},"2:20622:9017":{"crate_id":2,"path":["core","core_simd","elements","int","SimdInt"],"kind":"trait"},"17:13344:5803":{"crate_id":17,"path":["object","pe","ImageTlsDirectory32"],"kind":"struct"},"2:7092:3285":{"crate_id":2,"path":["core","iter","traits","accum","Product"],"kind":"trait"},"18:481:7870":{"crate_id":18,"path":["memchr","cow","CowBytes"],"kind":"struct"},"17:12282:5506":{"crate_id":17,"path":["object","macho","DylibReference"],"kind":"struct"},"17:9721:20974":{"crate_id":17,"path":["object","read","elf","section","ElfSectionIterator"],"kind":"struct"},"2:40997:80":{"crate_id":2,"path":["core","sync","atomic","AtomicI16"],"kind":"struct"},"17:13024:5725":{"crate_id":17,"path":["object","pe","ImageNtHeaders32"],"kind":"struct"},"2:21113:9013":{"crate_id":2,"path":["core","core_simd","ord","SimdPartialOrd"],"kind":"trait"},"17:9488:20963":{"crate_id":17,"path":["object","read","coff","file","CoffFile"],"kind":"struct"},"6:5773:7071":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","glob64_t"],"kind":"struct"},"16:2616:5993":{"crate_id":16,"path":["gimli","common","DebugMacinfoOffset"],"kind":"struct"},"17:11459:5330":{"crate_id":17,"path":["object","elf","Rel64"],"kind":"struct"},"17:12019:5182":{"crate_id":17,"path":["object","macho","Dylib"],"kind":"struct"},"5:7209:8090":{"crate_id":5,"path":["alloc","ffi","c_str","FromVecWithNulError"],"kind":"struct"},"17:11770:5406":{"crate_id":17,"path":["object","macho","DyldCacheMappingInfo"],"kind":"struct"},"2:9552:4852":{"crate_id":2,"path":["core","slice","sort","merge_sort","BufGuard"],"kind":"struct"},"17:9275:36676":{"crate_id":17,"path":["object","read","any","SymbolIteratorInternal"],"kind":"enum"},"17:8420:20925":{"crate_id":17,"path":["object","common","SymbolScope"],"kind":"enum"},"2:45188:7619":{"crate_id":2,"path":["core","core_arch","simd","u8x32"],"kind":"struct"},"15:198:19948":{"crate_id":15,"path":["addr2line","LocationRangeUnitIter"],"kind":"struct"},"2:4237:204":{"crate_id":2,"path":["core","cell","RefCell"],"kind":"struct"},"2:9074:118":{"crate_id":2,"path":["core","fmt","Display"],"kind":"trait"},"6:4930:6963":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_authinfo"],"kind":"struct"},"17:10491:21069":{"crate_id":17,"path":["object","read","pe","section","PeSection"],"kind":"struct"},"2:48998:243":{"crate_id":2,"path":["core","core_simd","fmt","fmt","Wrapper"],"kind":"struct"},"2:2941:3394":{"crate_id":2,"path":["core","ops","function","FnMut"],"kind":"trait"},"2:43652:8232":{"crate_id":2,"path":["core","alloc","layout","LayoutError"],"kind":"struct"},"22:941:1804":{"crate_id":22,"path":["proc_macro2","Ident"],"kind":"struct"},"2:40680:178":{"crate_id":2,"path":["core","option","Option"],"kind":"enum"},"1:2345:4436":{"crate_id":1,"path":["std","fs","metadata"],"kind":"function"},"5:6680:241":{"crate_id":5,"path":["alloc","vec","Vec"],"kind":"struct"},"1:6540:8968":{"crate_id":1,"path":["std","sync","remutex","ReentrantMutex"],"kind":"struct"},"24:1338:36905":{"crate_id":24,"path":["syn","lookahead","TokenMarker"],"kind":"enum"},"5:3148:8071":{"crate_id":5,"path":["alloc","collections","btree","set","Intersection"],"kind":"struct"},"1:2870:126":{"crate_id":1,"path":["std","io","error","Error"],"kind":"struct"},"1:8123:3311":{"crate_id":1,"path":["std","io","Take"],"kind":"struct"},"16:7065:8039":{"crate_id":16,"path":["gimli","read","lookup","PubStuffParser"],"kind":"struct"},"22:946:2472":{"crate_id":22,"path":["proc_macro2","Literal"],"kind":"struct"},"5:3140:8073":{"crate_id":5,"path":["alloc","collections","btree","set","SymmetricDifference"],"kind":"struct"},"2:45266:7635":{"crate_id":2,"path":["core","core_arch","simd","u16x16"],"kind":"struct"},"24:2837:2123":{"crate_id":24,"path":["syn","token","Fn"],"kind":"struct"},"24:1448:24868":{"crate_id":24,"path":["syn","parse","discouraged","AnyDelimiter"],"kind":"trait"},"6:5767:7070":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__timeval"],"kind":"struct"},"6:5041:7015":{"crate_id":6,"path":["libc","unix","linux_like","linux","hwtstamp_config"],"kind":"struct"},"17:11600:5363":{"crate_id":17,"path":["object","elf","Vernaux"],"kind":"struct"},"17:11800:5415":{"crate_id":17,"path":["object","macho","DyldSubCacheInfo"],"kind":"struct"},"5:1068:36576":{"crate_id":5,"path":["alloc","collections","btree","dedup_sorted_iter","DedupSortedIter"],"kind":"struct"},"1:737:140":{"crate_id":1,"path":["std","collections","hash","map","HashMap"],"kind":"struct"},"5:1412:8728":{"crate_id":5,"path":["alloc","collections","btree","map","ValuesMut"],"kind":"struct"},"1:6909:4885":{"crate_id":1,"path":["std","sys_common","lazy_box","LazyBox"],"kind":"struct"},"16:7837:8048":{"crate_id":16,"path":["gimli","read","unit","DebuggingInformationEntry"],"kind":"struct"},"2:46110:7676":{"crate_id":2,"path":["core","core_arch","simd","i16x32"],"kind":"struct"},"6:587:6503":{"crate_id":6,"path":["libc","unix","servent"],"kind":"struct"},"1:4097:8888":{"crate_id":1,"path":["std","os","unix","net","ancillary","ScmRights"],"kind":"struct"},"2:9535:4851":{"crate_id":2,"path":["core","slice","sort","merge","MergeHole"],"kind":"struct"},"1:10826:8946":{"crate_id":1,"path":["std","sys","unix","process","process_common","Stdio"],"kind":"enum"},"17:10354:5213":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbolTable"],"kind":"struct"},"17:10465:21071":{"crate_id":17,"path":["object","read","pe","section","PeSegment"],"kind":"struct"},"1:8737:7769":{"crate_id":1,"path":["std","process","ExitStatus"],"kind":"struct"},"2:46468:7681":{"crate_id":2,"path":["core","core_arch","simd","i64x8"],"kind":"struct"},"21:998:230":{"crate_id":21,"path":["proc_macro","bridge","client","TokenStream"],"kind":"struct"},"2:2997:3229":{"crate_id":2,"path":["core","ops","index","IndexMut"],"kind":"trait"},"6:6673:7300":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","pthread_attr_t"],"kind":"struct"},"24:5255:3189":{"crate_id":24,"path":["syn","op","UnOp"],"kind":"enum"},"6:6616:7293":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stat64"],"kind":"struct"},"1:10346:4892":{"crate_id":1,"path":["std","sys","unix","stack_overflow","Handler"],"kind":"struct"},"1:11875:1037":{"crate_id":1,"path":["std","pointer"],"kind":"primitive"},"2:1809:3362":{"crate_id":2,"path":["core","ptr","non_null","NonNull"],"kind":"struct"},"6:4504:6789":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_rumble_effect"],"kind":"struct"},"17:3266:21045":{"crate_id":17,"path":["object","read","macho","relocation","MachORelocationIterator"],"kind":"struct"},"16:6022:20854":{"crate_id":16,"path":["gimli","read","cfi","RegisterRule"],"kind":"enum"},"16:6981:20861":{"crate_id":16,"path":["gimli","read","loclists","LocListIter"],"kind":"struct"},"24:4837:3154":{"crate_id":24,"path":["syn","expr","ExprIf"],"kind":"struct"},"21:2649:3219":{"crate_id":21,"path":["proc_macro","token_stream","IntoIter"],"kind":"struct"},"16:7596:20866":{"crate_id":16,"path":["gimli","read","rnglists","RawRngListEntry"],"kind":"enum"},"2:42461:14101":{"crate_id":2,"path":["core","slice","iter","ChunksExactMut"],"kind":"struct"},"2:44243:7582":{"crate_id":2,"path":["core","core_arch","simd","u8x2"],"kind":"struct"},"1:7835:29463":{"crate_id":1,"path":["std","io","buffered","linewritershim","LineWriterShim"],"kind":"struct"},"24:4394:3485":{"crate_id":24,"path":["syn","token","Star"],"kind":"struct"},"17:13066:5737":{"crate_id":17,"path":["object","pe","AnonObjectHeaderV2"],"kind":"struct"},"1:1827:8753":{"crate_id":1,"path":["std","env","SplitPaths"],"kind":"struct"},"6:4399:6739":{"crate_id":6,"path":["libc","unix","linux_like","linux","sembuf"],"kind":"struct"},"21:2597:3387":{"crate_id":21,"path":["proc_macro","diagnostic","Diagnostic"],"kind":"struct"},"6:4366:6720":{"crate_id":6,"path":["libc","unix","linux_like","linux","packet_mreq"],"kind":"struct"},"5:264:4793":{"crate_id":5,"path":["alloc","boxed","thin","drop","DropGuard"],"kind":"struct"},"6:5797:7080":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","cmsghdr"],"kind":"struct"},"5:770:95":{"crate_id":5,"path":["alloc","collections","binary_heap","BinaryHeap"],"kind":"struct"},"17:10649:7907":{"crate_id":17,"path":["object","read","pe","relocation","RelocationIterator"],"kind":"struct"},"1:11886:734":{"crate_id":1,"path":["std","i32"],"kind":"primitive"},"5:2067:4174":{"crate_id":5,"path":["alloc","collections","btree","mem","replace","PanicGuard"],"kind":"struct"},"17:13689:5912":{"crate_id":17,"path":["object","pe","ImageRuntimeFunctionEntry"],"kind":"struct"},"2:40875:3224":{"crate_id":2,"path":["core","result","IterMut"],"kind":"struct"},"16:7488:8044":{"crate_id":16,"path":["gimli","read","pubnames","PubNamesEntryIter"],"kind":"struct"},"17:11813:5417":{"crate_id":17,"path":["object","macho","FatHeader"],"kind":"struct"},"6:62:14511":{"crate_id":6,"path":["libc","unix","DIR"],"kind":"enum"},"2:42795:8186":{"crate_id":2,"path":["core","str","iter","MatchIndices"],"kind":"struct"},"16:5630:20849":{"crate_id":16,"path":["gimli","read","cfi","EhHdrTableIter"],"kind":"struct"},"22:699:3238":{"crate_id":22,"path":["proc_macro2","fallback","LexError"],"kind":"struct"},"5:3965:4512":{"crate_id":5,"path":["alloc","collections","vec_deque","drain","Drain"],"kind":"struct"},"1:2361:8794":{"crate_id":1,"path":["std","fs","read_link"],"kind":"function"},"6:6639:7294":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statfs64"],"kind":"struct"},"17:8360:20923":{"crate_id":17,"path":["object","common","ComdatKind"],"kind":"enum"},"16:7652:195":{"crate_id":16,"path":["gimli","read","rnglists","Range"],"kind":"struct"},"2:40575:1868":{"crate_id":2,"path":["core","net","ip_addr","fmt","Span"],"kind":"struct"},"16:8090:8055":{"crate_id":16,"path":["gimli","read","unit","EntriesCursor"],"kind":"struct"},"22:772:24851":{"crate_id":22,"path":["proc_macro2","extra","DelimSpanEnum"],"kind":"enum"},"2:10139:14108":{"crate_id":2,"path":["core","slice","iter","RSplitMut"],"kind":"struct"},"2:21118:9036":{"crate_id":2,"path":["core","core_simd","ord","SimdOrd"],"kind":"trait"},"16:6254:6074":{"crate_id":16,"path":["gimli","read","endian_slice","EndianSlice"],"kind":"struct"},"16:6336:7986":{"crate_id":16,"path":["gimli","read","abbrev","Abbreviation"],"kind":"struct"},"24:3858:3448":{"crate_id":24,"path":["syn","token","CaretEq"],"kind":"struct"},"2:2682:223":{"crate_id":2,"path":["core","marker","StructuralPartialEq"],"kind":"trait"},"5:6430:4793":{"crate_id":5,"path":["alloc","vec","into_iter","drop","DropGuard"],"kind":"struct"},"1:2215:4453":{"crate_id":1,"path":["std","fs","read"],"kind":"function"},"21:2798:2472":{"crate_id":21,"path":["proc_macro","Literal"],"kind":"struct"},"2:21704:32421":{"crate_id":2,"path":["core","num","flt2dec","Sign"],"kind":"enum"},"17:12345:5514":{"crate_id":17,"path":["object","macho","RpathCommand"],"kind":"struct"},"17:10505:21096":{"crate_id":17,"path":["object","read","pe","section","PeRelocationIterator"],"kind":"struct"},"1:5928:203":{"crate_id":1,"path":["std","sync","mpmc","counter","Receiver"],"kind":"struct"},"2:44595:7597":{"crate_id":2,"path":["core","core_arch","simd","f64x1"],"kind":"struct"},"24:53:1876":{"crate_id":24,"path":["syn","token"],"kind":"module"},"11:320:4783":{"crate_id":11,"path":["hashbrown","raw","RawIntoIter"],"kind":"struct"},"17:10000:5236":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCache"],"kind":"struct"},"2:39435:8145":{"crate_id":2,"path":["core","ffi","c_str","FromBytesUntilNulError"],"kind":"struct"},"24:2871:3422":{"crate_id":24,"path":["syn","token","If"],"kind":"struct"},"2:3169:133":{"crate_id":2,"path":["core","ops","try_trait","FromResidual"],"kind":"trait"},"24:5467:3209":{"crate_id":24,"path":["syn","ty","TypeTraitObject"],"kind":"struct"},"2:43452:14292":{"crate_id":2,"path":["core","time","TryFromFloatSecsErrorKind"],"kind":"enum"},"17:8310:20922":{"crate_id":17,"path":["object","common","SectionKind"],"kind":"enum"},"17:9895:20995":{"crate_id":17,"path":["object","read","elf","hash","GnuHashTable"],"kind":"struct"},"1:8814:7773":{"crate_id":1,"path":["std","sync","mpsc","RecvError"],"kind":"struct"},"2:9088:3373":{"crate_id":2,"path":["core","fmt","UpperExp"],"kind":"trait"},"1:8773:3220":{"crate_id":1,"path":["std","sync","mpsc","Iter"],"kind":"struct"},"2:39734:3294":{"crate_id":2,"path":["core","iter","adapters","step_by","StepBy"],"kind":"struct"},"2:41999:8170":{"crate_id":2,"path":["core","hash","sip","Sip24Rounds"],"kind":"struct"},"2:9033:207":{"crate_id":2,"path":["core","fmt","Result"],"kind":"typedef"},"2:43419:120":{"crate_id":2,"path":["core","time","Duration"],"kind":"struct"},"2:43368:8221":{"crate_id":2,"path":["core","str","CharEscapeDebugContinue"],"kind":"struct"},"17:9409:20951":{"crate_id":17,"path":["object","read","archive","Members"],"kind":"enum"},"6:7479:7406":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_rwlockattr_t"],"kind":"struct"},"24:4935:2270":{"crate_id":24,"path":["syn","expr","Index"],"kind":"struct"},"24:844:4998":{"crate_id":24,"path":["syn","ext","private","PeekFn"],"kind":"struct"},"1:1901:8648":{"crate_id":1,"path":["std","error","Report"],"kind":"struct"},"22:899:3240":{"crate_id":22,"path":["proc_macro2","Delimiter"],"kind":"enum"},"24:4003:3457":{"crate_id":24,"path":["syn","token","FatArrow"],"kind":"struct"},"1:8036:8804":{"crate_id":1,"path":["std","io","readbuf","BorrowedCursor"],"kind":"struct"},"6:474:1794":{"crate_id":6,"path":["libc","unix","group"],"kind":"struct"},"1:2210:127":{"crate_id":1,"path":["std","fs","File"],"kind":"struct"},"24:4126:3466":{"crate_id":24,"path":["syn","token","Not"],"kind":"struct"},"2:10101:8103":{"crate_id":2,"path":["core","slice","iter","RSplit"],"kind":"struct"},"1:942:8730":{"crate_id":1,"path":["std","collections","hash","map","RawEntryMut"],"kind":"enum"},"24:4802:3146":{"crate_id":24,"path":["syn","expr","ExprCall"],"kind":"struct"},"16:2404:5984":{"crate_id":16,"path":["gimli","common","DebugAddrBase"],"kind":"struct"},"1:6554:4883":{"crate_id":1,"path":["std","sync","remutex","ReentrantMutexGuard"],"kind":"struct"},"2:39407:8144":{"crate_id":2,"path":["core","ffi","c_str","FromBytesWithNulError"],"kind":"struct"},"2:42603:8173":{"crate_id":2,"path":["core","str","error","ParseBoolError"],"kind":"struct"},"1:2478:8832":{"crate_id":1,"path":["std","io","buffered","bufreader","BufReader"],"kind":"struct"},"6:4810:6894":{"crate_id":6,"path":["libc","unix","linux_like","linux","seccomp_data"],"kind":"struct"},"18:671:24843":{"crate_id":18,"path":["memchr","memmem","FindRevIter"],"kind":"struct"},"21:368:4537":{"crate_id":21,"path":["proc_macro","bridge","rpc","PanicMessage"],"kind":"enum"},"17:10626:7906":{"crate_id":17,"path":["object","read","pe","import","DelayLoadDescriptorIterator"],"kind":"struct"},"24:1937:3219":{"crate_id":24,"path":["syn","punctuated","IntoIter"],"kind":"struct"},"2:39653:3305":{"crate_id":2,"path":["core","iter","adapters","map","Map"],"kind":"struct"},"1:10451:4184":{"crate_id":1,"path":["std","sys","unix","thread","Thread"],"kind":"struct"},"6:6098:7209":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","sigset_t"],"kind":"struct"},"2:2672:217":{"crate_id":2,"path":["core","marker","Send"],"kind":"trait"},"17:9038:36674":{"crate_id":17,"path":["object","read","any","SegmentIteratorInternal"],"kind":"enum"},"6:6566:7265":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","flock64"],"kind":"struct"},"6:5888:7133":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","timex"],"kind":"struct"},"1:8458:8240":{"crate_id":1,"path":["std","path","Components"],"kind":"struct"},"24:3160:2519":{"crate_id":24,"path":["syn","token","Static"],"kind":"struct"},"24:2956:2174":{"crate_id":24,"path":["syn","token","Macro"],"kind":"struct"},"17:11136:5262":{"crate_id":17,"path":["object","archive","Header"],"kind":"struct"},"2:44518:7593":{"crate_id":2,"path":["core","core_arch","simd","i16x4"],"kind":"struct"},"1:8130:2743":{"crate_id":1,"path":["std","io","Bytes"],"kind":"struct"},"17:10125:5177":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandData"],"kind":"struct"},"16:2502:5988":{"crate_id":16,"path":["gimli","common","DebugLineOffset"],"kind":"struct"},"6:532:6473":{"crate_id":6,"path":["libc","unix","hostent"],"kind":"struct"},"24:2081:2409":{"crate_id":24,"path":["syn","punctuated","Pair"],"kind":"enum"},"16:7588:20865":{"crate_id":16,"path":["gimli","read","rnglists","RawRngListIter"],"kind":"struct"},"2:9897:3220":{"crate_id":2,"path":["core","slice","iter","Iter"],"kind":"struct"},"2:41237:84":{"crate_id":2,"path":["core","sync","atomic","AtomicIsize"],"kind":"struct"},"24:5309:2252":{"crate_id":24,"path":["syn","path","AssocConst"],"kind":"struct"},"24:4789:3143":{"crate_id":24,"path":["syn","expr","ExprBinary"],"kind":"struct"},"2:46298:7678":{"crate_id":2,"path":["core","core_arch","simd","i32x16"],"kind":"struct"},"2:40740:3220":{"crate_id":2,"path":["core","option","Iter"],"kind":"struct"},"1:4684:8880":{"crate_id":1,"path":["std","os","fd","raw","IntoRawFd"],"kind":"trait"},"22:797:36849":{"crate_id":22,"path":["proc_macro2","imp","TokenTreeIter"],"kind":"enum"},"6:4327:6695":{"crate_id":6,"path":["libc","unix","linux_like","linux","signalfd_siginfo"],"kind":"struct"},"2:40917:83":{"crate_id":2,"path":["core","sync","atomic","AtomicI8"],"kind":"struct"},"1:3988:8868":{"crate_id":1,"path":["std","os","unix","fs","DirEntryExt2"],"kind":"trait"},"2:40004:3276":{"crate_id":2,"path":["core","iter","sources","repeat_with","RepeatWith"],"kind":"struct"},"24:5422:3198":{"crate_id":24,"path":["syn","ty","TypeArray"],"kind":"struct"},"2:41317:8347":{"crate_id":2,"path":["core","sync","exclusive","Exclusive"],"kind":"struct"},"2:44439:7590":{"crate_id":2,"path":["core","core_arch","simd","u32x2"],"kind":"struct"},"17:8971:127":{"crate_id":17,"path":["object","read","any","File"],"kind":"struct"},"1:11854:27960":{"crate_id":1,"path":["std","backtrace_rs","print","PrintFmt"],"kind":"enum"},"2:41719:6202":{"crate_id":2,"path":["core","fmt","rt","Flag"],"kind":"enum"},"24:3177:1819":{"crate_id":24,"path":["syn","token","Struct"],"kind":"struct"},"21:2645:3385":{"crate_id":21,"path":["proc_macro","ExpandError"],"kind":"struct"},"24:258:8632":{"crate_id":24,"path":["syn","attr","parsing","DisplayPath"],"kind":"struct"},"2:10066:14111":{"crate_id":2,"path":["core","slice","iter","SplitInclusiveMut"],"kind":"struct"},"17:9478:20965":{"crate_id":17,"path":["object","read","coff","file","CoffCommon"],"kind":"struct"},"16:4540:6046":{"crate_id":16,"path":["gimli","constants","DwEnd"],"kind":"struct"},"1:881:8069":{"crate_id":1,"path":["std","collections","hash","map","Keys"],"kind":"struct"},"17:9596:5162":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbol"],"kind":"struct"},"1:3326:3272":{"crate_id":1,"path":["std","io","util","Repeat"],"kind":"struct"},"16:5032:6061":{"crate_id":16,"path":["gimli","constants","DwLnct"],"kind":"struct"},"24:4015:3458":{"crate_id":24,"path":["syn","token","Ge"],"kind":"struct"},"2:6648:33685":{"crate_id":2,"path":["core","iter","adapters","GenericShunt"],"kind":"struct"},"11:60:36611":{"crate_id":11,"path":["hashbrown","raw","bitmask","BitMaskIter"],"kind":"struct"},"2:44309:7585":{"crate_id":2,"path":["core","core_arch","simd","u16x2"],"kind":"struct"},"5:5803:4825":{"crate_id":5,"path":["alloc","sync","Weak"],"kind":"struct"},"2:30120:32420":{"crate_id":2,"path":["core","ptr","alignment","AlignmentEnum32"],"kind":"enum"},"11:1628:4790":{"crate_id":11,"path":["hashbrown","scopeguard","ScopeGuard"],"kind":"struct"},"2:42713:8181":{"crate_id":2,"path":["core","str","iter","RSplitTerminator"],"kind":"struct"},"17:13426:5826":{"crate_id":17,"path":["object","pe","ImageResourceDirStringU"],"kind":"struct"},"1:6334:29721":{"crate_id":1,"path":["std","sync","mutex","fmt","LockedPlaceholder"],"kind":"struct"},"24:921:2827":{"crate_id":24,"path":["syn","generics","TypeGenerics"],"kind":"struct"},"17:12522:5547":{"crate_id":17,"path":["object","macho","FvmfileCommand"],"kind":"struct"},"11:2184:6354":{"crate_id":11,"path":["hashbrown","raw","bitmask","BitMask"],"kind":"struct"},"5:3266:4510":{"crate_id":5,"path":["alloc","collections","btree","set","DrainFilter"],"kind":"struct"},"24:2633:1851":{"crate_id":24,"path":["syn","token","Box"],"kind":"struct"},"1:10703:7746":{"crate_id":1,"path":["std","sys","unix","io","IoSlice"],"kind":"struct"},"2:4246:3346":{"crate_id":2,"path":["core","cell","BorrowMutError"],"kind":"struct"},"17:9683:20975":{"crate_id":17,"path":["object","read","elf","segment","ElfSegment"],"kind":"struct"},"6:1534:6522":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr"],"kind":"struct"},"24:4833:3153":{"crate_id":24,"path":["syn","expr","ExprGroup"],"kind":"struct"},"2:20585:9016":{"crate_id":2,"path":["core","core_simd","elements","float","SimdFloat"],"kind":"trait"},"2:21683:32416":{"crate_id":2,"path":["core","num","flt2dec","decoder","FullDecoded"],"kind":"enum"},"24:4773:3139":{"crate_id":24,"path":["syn","expr","ExprArray"],"kind":"struct"},"1:1571:3219":{"crate_id":1,"path":["std","collections","hash","set","IntoIter"],"kind":"struct"},"5:3078:94":{"crate_id":5,"path":["alloc","collections","btree","set","BTreeSet"],"kind":"struct"},"2:45007:7615":{"crate_id":2,"path":["core","core_arch","simd","m8x16"],"kind":"struct"},"2:3329:68":{"crate_id":2,"path":["core","any","Any"],"kind":"trait"},"24:5427:3199":{"crate_id":24,"path":["syn","ty","TypeBareFn"],"kind":"struct"},"2:43664:4423":{"crate_id":2,"path":["core","alloc","AllocError"],"kind":"struct"},"20:34:8877":{"crate_id":20,"path":["quote","ext","private","Sealed"],"kind":"trait"},"2:39249:32426":{"crate_id":2,"path":["core","char","convert","CharErrorKind"],"kind":"enum"},"2:42813:8187":{"crate_id":2,"path":["core","str","iter","RMatchIndices"],"kind":"struct"},"2:9754:219":{"crate_id":2,"path":["core","slice","index","SliceIndex"],"kind":"trait"},"2:11286:8177":{"crate_id":2,"path":["core","str","iter","SplitInternal"],"kind":"struct"},"2:42909:8192":{"crate_id":2,"path":["core","str","iter","LinesAny"],"kind":"struct"},"2:41762:126":{"crate_id":2,"path":["core","fmt","Error"],"kind":"struct"},"16:5071:6062":{"crate_id":16,"path":["gimli","constants","DwMacro"],"kind":"struct"},"16:2862:6003":{"crate_id":16,"path":["gimli","common","DebugTypeSignature"],"kind":"struct"},"17:12403:5524":{"crate_id":17,"path":["object","macho","EncryptionInfoCommand64"],"kind":"struct"},"2:2770:5001":{"crate_id":2,"path":["core","ops","arith","Sub"],"kind":"trait"},"6:4709:6844":{"crate_id":6,"path":["libc","unix","linux_like","linux","in6_pktinfo"],"kind":"struct"},"1:2363:8795":{"crate_id":1,"path":["std","fs","canonicalize"],"kind":"function"},"17:10989:5221":{"crate_id":17,"path":["object","read","Export"],"kind":"struct"},"5:1394:8069":{"crate_id":5,"path":["alloc","collections","btree","map","Keys"],"kind":"struct"},"1:4855:8921":{"crate_id":1,"path":["std","os","net","linux_ext","tcp","TcpStreamExt"],"kind":"trait"},"16:7467:8041":{"crate_id":16,"path":["gimli","read","pubnames","PubNamesEntry"],"kind":"struct"},"24:5122:3183":{"crate_id":24,"path":["syn","lit","LitChar"],"kind":"struct"},"2:9082:3375":{"crate_id":2,"path":["core","fmt","UpperHex"],"kind":"trait"},"16:6390:7989":{"crate_id":16,"path":["gimli","read","aranges","ArangeHeaderIter"],"kind":"struct"},"17:8823:5145":{"crate_id":17,"path":["object","endian","I32Bytes"],"kind":"struct"},"2:42867:8190":{"crate_id":2,"path":["core","str","iter","RMatches"],"kind":"struct"},"11:1003:8734":{"crate_id":11,"path":["hashbrown","map","OccupiedEntry"],"kind":"struct"},"1:9174:4587":{"crate_id":1,"path":["std","sys","unix","args","Args"],"kind":"struct"},"21:2275:1793":{"crate_id":21,"path":["proc_macro","bridge","Group"],"kind":"struct"},"17:11069:20944":{"crate_id":17,"path":["object","read","CompressionFormat"],"kind":"enum"},"24:1910:3218":{"crate_id":24,"path":["syn","punctuated","IntoPairs"],"kind":"struct"},"1:8944:8354":{"crate_id":1,"path":["std","sync","mpmc","list","ListToken"],"kind":"struct"},"16:3872:6038":{"crate_id":16,"path":["gimli","constants","DwCfa"],"kind":"struct"},"6:7526:7416":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_barrier_t"],"kind":"struct"},"16:2668:5995":{"crate_id":16,"path":["gimli","common","RawRangeListsOffset"],"kind":"struct"},"1:8064:3265":{"crate_id":1,"path":["std","io","util","Empty"],"kind":"struct"},"16:7757:8047":{"crate_id":16,"path":["gimli","read","unit","DebugInfoUnitHeadersIter"],"kind":"struct"},"18:590:5036":{"crate_id":18,"path":["memchr","memmem","twoway","TwoWay"],"kind":"struct"},"24:4490:1999":{"crate_id":24,"path":["syn","attr","Meta"],"kind":"enum"},"1:10817:6416":{"crate_id":1,"path":["std","sys","unix","os_str","Buf"],"kind":"struct"},"14:31:8633":{"crate_id":14,"path":["rustc_demangle","v0","Demangle"],"kind":"struct"},"2:21378:9011":{"crate_id":2,"path":["core","core_simd","vector","SimdElement"],"kind":"trait"},"1:7505:4887":{"crate_id":1,"path":["std","backtrace_rs","print","BacktraceFrameFmt"],"kind":"struct"},"6:1710:6638":{"crate_id":6,"path":["libc","unix","linux_like","epoll_event"],"kind":"struct"},"16:7437:6172":{"crate_id":16,"path":["gimli","read","op","OperationIter"],"kind":"struct"},"11:1044:19924":{"crate_id":11,"path":["hashbrown","map","EntryRef"],"kind":"enum"},"6:4804:6893":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_fprog"],"kind":"struct"},"2:1457:2208":{"crate_id":2,"path":["core","mem"],"kind":"module"},"21:2747:1793":{"crate_id":21,"path":["proc_macro","Group"],"kind":"struct"},"1:932:8343":{"crate_id":1,"path":["std","collections","hash","map","IntoValues"],"kind":"struct"},"1:8160:8850":{"crate_id":1,"path":["std","net","Shutdown"],"kind":"enum"},"1:11896:1112":{"crate_id":1,"path":["std","reference"],"kind":"primitive"},"1:928:8342":{"crate_id":1,"path":["std","collections","hash","map","IntoKeys"],"kind":"struct"},"5:3612:4793":{"crate_id":5,"path":["alloc","collections","linked_list","drop","DropGuard"],"kind":"struct"},"17:12113:5464":{"crate_id":17,"path":["object","macho","DylinkerCommand"],"kind":"struct"},"24:5118:3182":{"crate_id":24,"path":["syn","lit","LitByteStr"],"kind":"struct"},"1:11477:8264":{"crate_id":1,"path":["std","backtrace_rs","backtrace","Frame"],"kind":"struct"},"2:9744:8877":{"crate_id":2,"path":["core","slice","index","private_slice_index","Sealed"],"kind":"trait"},"16:3225:6031":{"crate_id":16,"path":["gimli","arch","AArch64"],"kind":"struct"},"1:7810:128":{"crate_id":1,"path":["std","fs","FileType"],"kind":"struct"},"17:12358:5515":{"crate_id":17,"path":["object","macho","LinkeditDataCommand"],"kind":"struct"},"6:5743:7054":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","aiocb"],"kind":"struct"},"17:9959:7892":{"crate_id":17,"path":["object","read","elf","version","VerdauxIterator"],"kind":"struct"},"2:21376:8877":{"crate_id":2,"path":["core","core_simd","vector","sealed","Sealed"],"kind":"trait"},"17:12550:5551":{"crate_id":17,"path":["object","macho","SourceVersionCommand"],"kind":"struct"},"1:3616:8852":{"crate_id":1,"path":["std","net","socket_addr","ToSocketAddrs"],"kind":"trait"},"17:9523:20960":{"crate_id":17,"path":["object","read","coff","section","CoffSegment"],"kind":"struct"},"1:9971:8753":{"crate_id":1,"path":["std","sys","unix","os","SplitPaths"],"kind":"struct"},"17:1034:20964":{"crate_id":17,"path":["object","read","coff","relocation","CoffRelocationIterator"],"kind":"struct"},"16:5797:7937":{"crate_id":16,"path":["gimli","read","cfi","AugmentationData"],"kind":"struct"},"2:2761:4070":{"crate_id":2,"path":["core","marker","FnPtr"],"kind":"trait"},"24:4570:2013":{"crate_id":24,"path":["syn","derive","DataEnum"],"kind":"struct"},"16:3063:5055":{"crate_id":16,"path":["gimli","arch","Arm"],"kind":"struct"},"1:11878:1380":{"crate_id":1,"path":["std","str"],"kind":"primitive"},"2:42631:2743":{"crate_id":2,"path":["core","str","iter","Bytes"],"kind":"struct"},"16:6488:7994":{"crate_id":16,"path":["gimli","read","index","UnitIndex"],"kind":"struct"},"2:21282:34476":{"crate_id":2,"path":["core","core_simd","vector","splat","Splat"],"kind":"struct"},"2:11141:14119":{"crate_id":2,"path":["core","str","converts","from_utf8"],"kind":"function"},"11:822:8730":{"crate_id":11,"path":["hashbrown","map","RawEntryMut"],"kind":"enum"},"17:10936:5251":{"crate_id":17,"path":["object","read","ObjectMapEntry"],"kind":"struct"},"24:917:3178":{"crate_id":24,"path":["syn","generics","ImplGenerics"],"kind":"struct"},"2:40816:190":{"crate_id":2,"path":["core","pin","Pin"],"kind":"struct"},"17:10026:21059":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCacheImageIterator"],"kind":"struct"},"1:10198:8945":{"crate_id":1,"path":["std","sys","unix","process","process_common","Command"],"kind":"struct"},"2:44886:7611":{"crate_id":2,"path":["core","core_arch","simd","i64x2"],"kind":"struct"},"24:2582:3412":{"crate_id":24,"path":["syn","token","Auto"],"kind":"struct"},"22:703:3386":{"crate_id":22,"path":["proc_macro2","fallback","SourceFile"],"kind":"struct"},"1:10713:28010":{"crate_id":1,"path":["std","sys","unix","kernel_copy","SpliceMode"],"kind":"enum"},"2:4:1002":{"crate_id":2,"path":["core","panic"],"kind":"macro"},"24:5013:2212":{"crate_id":24,"path":["syn","generics","TypeParamBound"],"kind":"enum"},"5:3765:4793":{"crate_id":5,"path":["alloc","collections","linked_list","drop","DropGuard"],"kind":"struct"},"2:14:2609":{"crate_id":2,"path":["core","write"],"kind":"macro"},"24:4938:61":{"crate_id":24,"path":["syn","expr","parsing","raw"],"kind":"struct"},"6:4671:6824":{"crate_id":6,"path":["libc","unix","linux_like","linux","mntent"],"kind":"struct"},"2:48563:9045":{"crate_id":2,"path":["core","core_simd","swizzle","Which"],"kind":"enum"},"1:1567:3220":{"crate_id":1,"path":["std","collections","hash","set","Iter"],"kind":"struct"},"17:12563:5552":{"crate_id":17,"path":["object","macho","DataInCodeEntry"],"kind":"struct"},"11:985:8040":{"crate_id":11,"path":["hashbrown","map","Entry"],"kind":"enum"},"17:1919:21007":{"crate_id":17,"path":["object","read","elf","relocation","ElfRelaIterator"],"kind":"enum"},"1:5336:8942":{"crate_id":1,"path":["std","process","ChildStdin"],"kind":"struct"},"5:6563:4516":{"crate_id":5,"path":["alloc","vec","set_len_on_drop","SetLenOnDrop"],"kind":"struct"},"18:699:7879":{"crate_id":18,"path":["memchr","memmem","FinderBuilder"],"kind":"struct"},"5:1187:8040":{"crate_id":5,"path":["alloc","collections","btree","map","entry","Entry"],"kind":"enum"},"6:5005:6993":{"crate_id":6,"path":["libc","unix","linux_like","linux","mq_attr"],"kind":"struct"},"24:4027:3459":{"crate_id":24,"path":["syn","token","Gt"],"kind":"struct"},"17:13842:5953":{"crate_id":17,"path":["object","pe","NonPagedDebugInfo"],"kind":"struct"},"16:5418:6066":{"crate_id":16,"path":["gimli","read","util","sealed","CapacityFull"],"kind":"struct"},"24:5043:1936":{"crate_id":24,"path":["syn","generics","WherePredicate"],"kind":"enum"},"6:5976:7179":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ptrace_peeksiginfo_args"],"kind":"struct"},"1:7567:8877":{"crate_id":1,"path":["std","sealed","Sealed"],"kind":"trait"},"2:22064:172":{"crate_id":2,"path":["core","num","nonzero","NonZeroU16"],"kind":"struct"},"2:20863:7435":{"crate_id":2,"path":["core","core_simd","masks","Mask"],"kind":"struct"},"6:4636:6820":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Shdr"],"kind":"struct"},"1:6087:4861":{"crate_id":1,"path":["std","sync","mpmc","waker","Waker"],"kind":"struct"},"2:12216:189":{"crate_id":2,"path":["core","future","pending","Pending"],"kind":"struct"},"24:4857:3158":{"crate_id":24,"path":["syn","expr","ExprLoop"],"kind":"struct"},"22:880:1869":{"crate_id":22,"path":["proc_macro2","TokenTree"],"kind":"enum"},"2:39554:3289":{"crate_id":2,"path":["core","iter","adapters","cloned","Cloned"],"kind":"struct"},"2:44287:7584":{"crate_id":2,"path":["core","core_arch","simd","u8x4"],"kind":"struct"},"2:39289:8131":{"crate_id":2,"path":["core","char","decode","DecodeUtf16Error"],"kind":"struct"},"2:22031:175":{"crate_id":2,"path":["core","num","nonzero","NonZeroU8"],"kind":"struct"},"2:42498:3287":{"crate_id":2,"path":["core","slice","iter","ArrayChunks"],"kind":"struct"},"6:0:807":{"crate_id":6,"path":["libc"],"kind":"module"},"5:6582:4517":{"crate_id":5,"path":["alloc","vec","in_place_drop","InPlaceDrop"],"kind":"struct"},"1:1578:4510":{"crate_id":1,"path":["std","collections","hash","set","DrainFilter"],"kind":"struct"},"1:8901:105":{"crate_id":1,"path":["std","sync","mpmc","context","Context"],"kind":"struct"},"2:41460:3375":{"crate_id":2,"path":["core","fmt","num","UpperHex"],"kind":"struct"},"17:13461:5834":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation32"],"kind":"struct"},"1:8215:8886":{"crate_id":1,"path":["std","os","unix","net","ancillary","SocketAncillary"],"kind":"struct"},"17:12634:5562":{"crate_id":17,"path":["object","macho","RelocationInfo"],"kind":"struct"},"24:336:3339":{"crate_id":24,"path":["syn","buffer","Cursor"],"kind":"struct"},"24:548:207":{"crate_id":24,"path":["syn","error","Result"],"kind":"typedef"},"5:7003:8085":{"crate_id":5,"path":["alloc","collections","binary_heap","IntoIterSorted"],"kind":"struct"},"5:6724:4830":{"crate_id":5,"path":["alloc","vec","retain_mut","BackshiftOnDrop"],"kind":"struct"},"2:39419:32418":{"crate_id":2,"path":["core","ffi","c_str","FromBytesWithNulErrorKind"],"kind":"enum"},"2:11573:14118":{"crate_id":2,"path":["core","str","pattern"],"kind":"module"},"11:1840:4512":{"crate_id":11,"path":["hashbrown","set","Drain"],"kind":"struct"},"17:12224:5494":{"crate_id":17,"path":["object","macho","DylibTableOfContents"],"kind":"struct"},"2:2507:235":{"crate_id":2,"path":["core","convert","TryInto"],"kind":"trait"},"17:1947:20972":{"crate_id":17,"path":["object","read","elf","relocation","ElfDynamicRelocationIterator"],"kind":"struct"},"2:46666:7692":{"crate_id":2,"path":["core","core_arch","x86","__m512d"],"kind":"struct"},"2:46719:7695":{"crate_id":2,"path":["core","core_arch","x86","__m512bh"],"kind":"struct"},"2:43277:8218":{"crate_id":2,"path":["core","str","lossy","Utf8Chunks"],"kind":"struct"},"11:2198:6357":{"crate_id":11,"path":["hashbrown","raw","TableLayout"],"kind":"struct"},"17:10712:21099":{"crate_id":17,"path":["object","read","pe","resource","ResourceNameOrId"],"kind":"enum"},"2:45342:7637":{"crate_id":2,"path":["core","core_arch","simd","u64x4"],"kind":"struct"},"2:21749:8118":{"crate_id":2,"path":["core","num","fmt","Formatted"],"kind":"struct"},"22:735:2472":{"crate_id":22,"path":["proc_macro2","fallback","Literal"],"kind":"struct"},"16:8109:8058":{"crate_id":16,"path":["gimli","read","unit","EntriesTree"],"kind":"struct"},"2:43244:8213":{"crate_id":2,"path":["core","str","pattern","TwoWaySearcher"],"kind":"struct"},"2:39601:3301":{"crate_id":2,"path":["core","iter","adapters","filter_map","FilterMap"],"kind":"struct"},"2:39388:7539":{"crate_id":2,"path":["core","char","TryFromCharError"],"kind":"struct"},"17:10092:21062":{"crate_id":17,"path":["object","read","macho","file","MachOComdatSectionIterator"],"kind":"struct"},"22:825:1804":{"crate_id":22,"path":["proc_macro2","imp","Ident"],"kind":"enum"},"1:8468:3220":{"crate_id":1,"path":["std","path","Iter"],"kind":"struct"},"2:45968:7675":{"crate_id":2,"path":["core","core_arch","simd","u8x64"],"kind":"struct"},"17:13292:5787":{"crate_id":17,"path":["object","pe","ImageExportDirectory"],"kind":"struct"},"11:2080:8735":{"crate_id":11,"path":["hashbrown","set","VacantEntry"],"kind":"struct"},"20:407:3878":{"crate_id":20,"path":["quote","__private","RepInterp"],"kind":"struct"},"5:5697:4512":{"crate_id":5,"path":["alloc","string","Drain"],"kind":"struct"},"24:4160:3468":{"crate_id":24,"path":["syn","token","OrEq"],"kind":"struct"},"2:9222:33595":{"crate_id":2,"path":["core","fmt","fmt","BorrowedPlaceholder"],"kind":"struct"},"2:11587:7881":{"crate_id":2,"path":["core","str","pattern","Searcher"],"kind":"trait"},"24:4798:3145":{"crate_id":24,"path":["syn","expr","ExprBreak"],"kind":"struct"},"16:0:2970":{"crate_id":16,"path":["gimli"],"kind":"module"},"6:4750:6866":{"crate_id":6,"path":["libc","unix","linux_like","linux","regmatch_t"],"kind":"struct"},"24:4920:3173":{"crate_id":24,"path":["syn","expr","ExprWhile"],"kind":"struct"},"2:5455:3302":{"crate_id":2,"path":["core","iter","adapters","flatten","FlatMap"],"kind":"struct"},"6:4664:6822":{"crate_id":6,"path":["libc","unix","linux_like","linux","ucred"],"kind":"struct"},"1:9364:127":{"crate_id":1,"path":["std","sys","unix","fs","File"],"kind":"struct"},"11:1138:8639":{"crate_id":11,"path":["hashbrown","map","OccupiedError"],"kind":"struct"},"2:44788:7608":{"crate_id":2,"path":["core","core_arch","simd","i8x16"],"kind":"struct"},"6:482:6442":{"crate_id":6,"path":["libc","unix","utimbuf"],"kind":"struct"},"2:4005:102":{"crate_id":2,"path":["core","asserting","Capture"],"kind":"struct"},"16:7767:20868":{"crate_id":16,"path":["gimli","read","unit","UnitType"],"kind":"enum"},"6:6809:7377":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ptrace_rseq_configuration"],"kind":"struct"},"2:44488:7592":{"crate_id":2,"path":["core","core_arch","simd","i8x8"],"kind":"struct"},"2:3194:34939":{"crate_id":2,"path":["core","ops","try_trait","NeverShortCircuitResidual"],"kind":"enum"},"17:12510:5546":{"crate_id":17,"path":["object","macho","IdentCommand"],"kind":"struct"},"2:46582:7686":{"crate_id":2,"path":["core","core_arch","x86","__m128d"],"kind":"struct"},"17:13564:5886":{"crate_id":17,"path":["object","pe","ImageLoadConfigDirectory64"],"kind":"struct"},"1:3248:8836":{"crate_id":1,"path":["std","io","stdio","Stderr"],"kind":"struct"},"6:6139:7235":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","semid_ds"],"kind":"struct"},"22:723:1793":{"crate_id":22,"path":["proc_macro2","fallback","Group"],"kind":"struct"},"6:4492:6783":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_periodic_effect"],"kind":"struct"},"2:11127:8644":{"crate_id":2,"path":["core","slice","GetManyMutError"],"kind":"struct"},"1:3681:8855":{"crate_id":1,"path":["std","net","tcp","TcpListener"],"kind":"struct"},"1:11873:1494":{"crate_id":1,"path":["std","unit"],"kind":"primitive"},"24:4820:3150":{"crate_id":24,"path":["syn","expr","ExprContinue"],"kind":"struct"},"17:11163:5268":{"crate_id":17,"path":["object","archive","AixHeader"],"kind":"struct"},"21:2636:230":{"crate_id":21,"path":["proc_macro","TokenStream"],"kind":"struct"},"1:8781:8974":{"crate_id":1,"path":["std","sync","mpsc","TryIter"],"kind":"struct"},"21:2772:2184":{"crate_id":21,"path":["proc_macro","Punct"],"kind":"struct"},"2:44333:7586":{"crate_id":2,"path":["core","core_arch","simd","i8x4"],"kind":"struct"},"6:4953:6976":{"crate_id":6,"path":["libc","unix","linux_like","linux","dirent64"],"kind":"struct"},"2:12241:14180":{"crate_id":2,"path":["core","future","poll_fn","PollFn"],"kind":"struct"},"11:646:3224":{"crate_id":11,"path":["hashbrown","map","IterMut"],"kind":"struct"},"16:6935:20859":{"crate_id":16,"path":["gimli","read","loclists","RawLocListIter"],"kind":"struct"},"16:7683:6025":{"crate_id":16,"path":["gimli","read","str","DebugStrOffsets"],"kind":"struct"},"17:11946:5439":{"crate_id":17,"path":["object","macho","Section32"],"kind":"struct"},"6:7520:7415":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_rwlock_t"],"kind":"struct"},"17:8931:5148":{"crate_id":17,"path":["object","read","util","ByteString"],"kind":"struct"},"24:4184:3470":{"crate_id":24,"path":["syn","token","PathSep"],"kind":"struct"},"6:526:6470":{"crate_id":6,"path":["libc","unix","ipv6_mreq"],"kind":"struct"},"11:1845:4510":{"crate_id":11,"path":["hashbrown","set","DrainFilter"],"kind":"struct"},"2:2684:107":{"crate_id":2,"path":["core","marker","Copy"],"kind":"trait"},"6:1747:6651":{"crate_id":6,"path":["libc","unix","linux_like","sigevent"],"kind":"struct"},"17:9469:20954":{"crate_id":17,"path":["object","read","archive","ArchiveMember"],"kind":"struct"},"17:9512:20961":{"crate_id":17,"path":["object","read","coff","section","CoffSegmentIterator"],"kind":"struct"},"2:21666:7444":{"crate_id":2,"path":["core","num","flt2dec","decoder","Decoded"],"kind":"struct"},"2:43380:8224":{"crate_id":2,"path":["core","str","IsWhitespace"],"kind":"struct"},"24:3783:3443":{"crate_id":24,"path":["syn","token","And"],"kind":"struct"},"1:10643:8249":{"crate_id":1,"path":["std","sys","unix","fs","StatxExtraFields"],"kind":"struct"},"24:3075:3432":{"crate_id":24,"path":["syn","token","Pub"],"kind":"struct"},"16:4037:6040":{"crate_id":16,"path":["gimli","constants","DwTag"],"kind":"struct"},"17:9424:5156":{"crate_id":17,"path":["object","read","archive","ArchiveFile"],"kind":"struct"},"1:11018:28007":{"crate_id":1,"path":["std","sys","unix","thread","cgroups","Cgroup"],"kind":"enum"},"6:7485:7407":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_condattr_t"],"kind":"struct"},"1:4640:8922":{"crate_id":1,"path":["std","os","linux","process","ChildExt"],"kind":"trait"},"22:874:1868":{"crate_id":22,"path":["proc_macro2","Span"],"kind":"struct"},"24:2769:3418":{"crate_id":24,"path":["syn","token","Else"],"kind":"struct"},"2:45054:7616":{"crate_id":2,"path":["core","core_arch","simd","m16x8"],"kind":"struct"},"11:861:8733":{"crate_id":11,"path":["hashbrown","map","RawEntryBuilder"],"kind":"struct"},"1:8143:8191":{"crate_id":1,"path":["std","io","Lines"],"kind":"struct"},"1:5069:188":{"crate_id":1,"path":["std","path","PathBuf"],"kind":"struct"},"24:4884:3164":{"crate_id":24,"path":["syn","expr","ExprReference"],"kind":"struct"},"16:5920:7952":{"crate_id":16,"path":["gimli","read","cfi","UnwindContext"],"kind":"struct"},"21:2334:1804":{"crate_id":21,"path":["proc_macro","bridge","Ident"],"kind":"struct"},"6:4360:6719":{"crate_id":6,"path":["libc","unix","linux_like","linux","fsid_t"],"kind":"struct"},"24:3143:3434":{"crate_id":24,"path":["syn","token","SelfValue"],"kind":"struct"},"16:5402:5140":{"crate_id":16,"path":["gimli","endianity","BigEndian"],"kind":"struct"},"2:41277:91":{"crate_id":2,"path":["core","sync","atomic","AtomicUsize"],"kind":"struct"},"11:1866:8073":{"crate_id":11,"path":["hashbrown","set","SymmetricDifference"],"kind":"struct"},"11:632:3220":{"crate_id":11,"path":["hashbrown","map","Iter"],"kind":"struct"},"16:3300:6032":{"crate_id":16,"path":["gimli","arch","LoongArch"],"kind":"struct"},"21:2247:3241":{"crate_id":21,"path":["proc_macro","bridge","DelimSpan"],"kind":"struct"},"2:45085:7617":{"crate_id":2,"path":["core","core_arch","simd","m32x4"],"kind":"struct"},"17:8389:20924":{"crate_id":17,"path":["object","common","SymbolKind"],"kind":"enum"},"17:13625:5893":{"crate_id":17,"path":["object","pe","ImageHotPatchBase"],"kind":"struct"},"17:13257:5781":{"crate_id":17,"path":["object","pe","ImageBaseRelocation"],"kind":"struct"},"2:42432:8105":{"crate_id":2,"path":["core","slice","iter","Chunks"],"kind":"struct"},"2:22394:7457":{"crate_id":2,"path":["core","num","nonzero","NonZeroIsize"],"kind":"struct"},"17:13803:5944":{"crate_id":17,"path":["object","pe","ImageFunctionEntry"],"kind":"struct"},"18:609:36704":{"crate_id":18,"path":["memchr","memmem","twoway","Suffix"],"kind":"struct"},"24:1883:3217":{"crate_id":24,"path":["syn","punctuated","PairsMut"],"kind":"struct"},"24:5470:3210":{"crate_id":24,"path":["syn","ty","TypeTuple"],"kind":"struct"},"1:4577:7288":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt","st_mtime"],"kind":"foreign_type"},"17:9228:36686":{"crate_id":17,"path":["object","read","any","SymbolTableInternal"],"kind":"enum"},"2:40892:180":{"crate_id":2,"path":["core","sync","atomic","Ordering"],"kind":"enum"},"2:43372:8222":{"crate_id":2,"path":["core","str","CharEscapeUnicode"],"kind":"struct"},"2:42524:8108":{"crate_id":2,"path":["core","slice","iter","RChunks"],"kind":"struct"},"22:816:1793":{"crate_id":22,"path":["proc_macro2","imp","Group"],"kind":"enum"},"1:8071:7745":{"crate_id":1,"path":["std","io","util","Sink"],"kind":"struct"},"6:4982:6985":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_user_dev"],"kind":"struct"},"2:21770:8121":{"crate_id":2,"path":["core","num","error","ParseIntError"],"kind":"struct"},"2:45424:7638":{"crate_id":2,"path":["core","core_arch","simd","i8x32"],"kind":"struct"},"2:46617:7689":{"crate_id":2,"path":["core","core_arch","x86","__m256d"],"kind":"struct"},"17:13651:5902":{"crate_id":17,"path":["object","pe","ImageArmRuntimeFunctionEntry"],"kind":"struct"},"17:13385:5812":{"crate_id":17,"path":["object","pe","ImageDelayloadDescriptor"],"kind":"struct"},"11:1852:8071":{"crate_id":11,"path":["hashbrown","set","Intersection"],"kind":"struct"},"16:6243:36647":{"crate_id":16,"path":["gimli","read","dwarf","RangeIterInner"],"kind":"enum"},"6:7514:7414":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_mutex_t"],"kind":"struct"},"2:30226:32436":{"crate_id":2,"path":["core","ptr","alignment","AlignmentEnum64"],"kind":"enum"},"2:21607:7439":{"crate_id":2,"path":["core","num","dec2flt","number","Number"],"kind":"struct"},"17:10598:5252":{"crate_id":17,"path":["object","read","pe","import","Import"],"kind":"enum"},"1:11672:4901":{"crate_id":1,"path":["std","backtrace_rs","symbolize","gimli","mmap","Mmap"],"kind":"struct"},"2:9337:8099":{"crate_id":2,"path":["core","hash","BuildHasherDefault"],"kind":"struct"},"2:2934:2206":{"crate_id":2,"path":["core","ops","drop","Drop"],"kind":"trait"},"16:154:4778":{"crate_id":16,"path":["gimli","read","util","ArrayVec"],"kind":"struct"},"6:4482:6776":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_condition_effect"],"kind":"struct"},"5:4157:4819":{"crate_id":5,"path":["alloc","collections","vec_deque","into_iter","try_rfold","Guard"],"kind":"struct"},"2:22361:166":{"crate_id":2,"path":["core","num","nonzero","NonZeroI128"],"kind":"struct"},"24:4508:3124":{"crate_id":24,"path":["syn","attr","MetaList"],"kind":"struct"},"24:893:36927":{"crate_id":24,"path":["syn","generics","TypeParamsMut"],"kind":"struct"},"6:4521:6797":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_ff_upload"],"kind":"struct"},"2:11578:14115":{"crate_id":2,"path":["core","str","pattern","Pattern"],"kind":"trait"},"5:3995:4793":{"crate_id":5,"path":["alloc","collections","vec_deque","drain","drop","DropGuard"],"kind":"struct"},"24:2667:2251":{"crate_id":24,"path":["syn","token","Const"],"kind":"struct"},"17:10452:21072":{"crate_id":17,"path":["object","read","pe","section","PeSegmentIterator"],"kind":"struct"},"18:652:5029":{"crate_id":18,"path":["memchr","memmem","x86","sse","Forward"],"kind":"struct"},"1:11891:1476":{"crate_id":1,"path":["std","u32"],"kind":"primitive"},"1:850:3220":{"crate_id":1,"path":["std","collections","hash","map","Iter"],"kind":"struct"},"1:10813:8647":{"crate_id":1,"path":["std","sys","unix","os","JoinPathsError"],"kind":"struct"},"18:707:7881":{"crate_id":18,"path":["memchr","memmem","Searcher"],"kind":"struct"},"1:641:8719":{"crate_id":1,"path":["std","backtrace","BacktraceFrame"],"kind":"struct"},"16:6671:6105":{"crate_id":16,"path":["gimli","read","line","LineRow"],"kind":"struct"},"6:5858:7110":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_mmap_hdr"],"kind":"struct"},"6:5996:7185":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_seccomp"],"kind":"struct"},"24:3228:231":{"crate_id":24,"path":["syn","token","Try"],"kind":"struct"},"2:39624:3303":{"crate_id":2,"path":["core","iter","adapters","fuse","Fuse"],"kind":"struct"},"2:42615:8174":{"crate_id":2,"path":["core","str","iter","Chars"],"kind":"struct"},"1:9867:8160":{"crate_id":1,"path":["std","sys","unix","net","Socket"],"kind":"struct"},"1:5023:29722":{"crate_id":1,"path":["std","path","fmt","DebugHelper"],"kind":"struct"},"1:8957:7777":{"crate_id":1,"path":["std","sync","mpmc","select","Operation"],"kind":"struct"},"2:4169:3341":{"crate_id":2,"path":["core","cell","Cell"],"kind":"struct"},"2:22229:170":{"crate_id":2,"path":["core","num","nonzero","NonZeroI8"],"kind":"struct"},"6:5845:7104":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_pktinfo"],"kind":"struct"},"2:9567:4856":{"crate_id":2,"path":["core","slice","sort","merge_sort","RunVec"],"kind":"struct"},"2:10208:14110":{"crate_id":2,"path":["core","slice","iter","SplitNMut"],"kind":"struct"},"17:9866:20989":{"crate_id":17,"path":["object","read","elf","note","NoteIterator"],"kind":"struct"},"2:22328:169":{"crate_id":2,"path":["core","num","nonzero","NonZeroI64"],"kind":"struct"},"17:13356:5804":{"crate_id":17,"path":["object","pe","ImageImportDescriptor"],"kind":"struct"},"6:5923:7154":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ntptimeval"],"kind":"struct"},"16:4969:6059":{"crate_id":16,"path":["gimli","constants","DwLns"],"kind":"struct"},"24:4172:3469":{"crate_id":24,"path":["syn","token","OrOr"],"kind":"struct"},"24:4864:3160":{"crate_id":24,"path":["syn","expr","ExprMatch"],"kind":"struct"},"2:44642:7598":{"crate_id":2,"path":["core","core_arch","simd","u8x16"],"kind":"struct"},"24:5329:3194":{"crate_id":24,"path":["syn","restriction","Visibility"],"kind":"enum"},"2:42533:14107":{"crate_id":2,"path":["core","slice","iter","RChunksMut"],"kind":"struct"},"2:12155:134":{"crate_id":2,"path":["core","future","future","Future"],"kind":"trait"},"16:6132:7980":{"crate_id":16,"path":["gimli","read","cfi","CallFrameInstructionIter"],"kind":"struct"},"6:4690:6836":{"crate_id":6,"path":["libc","unix","linux_like","linux","posix_spawnattr_t"],"kind":"struct"},"6:7240:7390":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","align","max_align_t"],"kind":"struct"},"2:7167:119":{"crate_id":2,"path":["core","iter","traits","double_ended","DoubleEndedIterator"],"kind":"trait"},"1:8937:29729":{"crate_id":1,"path":["std","sync","mpmc","list","Position"],"kind":"struct"},"1:1077:8735":{"crate_id":1,"path":["std","collections","hash","map","VacantEntry"],"kind":"struct"},"17:8548:20929":{"crate_id":17,"path":["object","common","SegmentFlags"],"kind":"enum"},"21:2641:3238":{"crate_id":21,"path":["proc_macro","LexError"],"kind":"struct"},"21:2732:1869":{"crate_id":21,"path":["proc_macro","TokenTree"],"kind":"enum"},"5:7042:3219":{"crate_id":5,"path":["alloc","collections","btree","set","IntoIter"],"kind":"struct"},"24:869:36929":{"crate_id":24,"path":["syn","generics","Lifetimes"],"kind":"struct"},"24:3024:3429":{"crate_id":24,"path":["syn","token","Mut"],"kind":"struct"},"2:2234:97":{"crate_id":2,"path":["core","borrow","BorrowMut"],"kind":"trait"},"2:39724:3310":{"crate_id":2,"path":["core","iter","adapters","skip_while","SkipWhile"],"kind":"struct"},"6:4702:6843":{"crate_id":6,"path":["libc","unix","linux_like","linux","genlmsghdr"],"kind":"struct"},"6:1527:6520":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreq_source"],"kind":"struct"},"6:4354:6718":{"crate_id":6,"path":["libc","unix","linux_like","linux","itimerspec"],"kind":"struct"},"2:39222:3377":{"crate_id":2,"path":["core","ascii","EscapeDefault"],"kind":"struct"},"24:4213:3472":{"crate_id":24,"path":["syn","token","PercentEq"],"kind":"struct"},"1:3882:8860":{"crate_id":1,"path":["std","os","unix","ffi","os_str","OsStrExt"],"kind":"trait"},"24:3398:244":{"crate_id":24,"path":["syn","token","Yield"],"kind":"struct"},"15:180:19947":{"crate_id":15,"path":["addr2line","LocationRangeIter"],"kind":"struct"},"22:783:230":{"crate_id":22,"path":["proc_macro2","imp","TokenStream"],"kind":"enum"},"2:48946:243":{"crate_id":2,"path":["core","core_simd","fmt","fmt","Wrapper"],"kind":"struct"},"5:1341:3220":{"crate_id":5,"path":["alloc","collections","btree","map","Iter"],"kind":"struct"},"17:8979:36693":{"crate_id":17,"path":["object","read","any","FileInternal"],"kind":"enum"},"2:44417:7589":{"crate_id":2,"path":["core","core_arch","simd","u16x4"],"kind":"struct"},"24:1443:24867":{"crate_id":24,"path":["syn","parse","discouraged","Speculative"],"kind":"trait"},"17:13698:5914":{"crate_id":17,"path":["object","pe","ImageEnclaveConfig32"],"kind":"struct"},"5:2896:36488":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Dying"],"kind":"enum"},"1:6135:8355":{"crate_id":1,"path":["std","sync","mpmc","zero","ZeroToken"],"kind":"struct"},"5:7319:4510":{"crate_id":5,"path":["alloc","vec","drain_filter","DrainFilter"],"kind":"struct"},"6:554:6485":{"crate_id":6,"path":["libc","unix","winsize"],"kind":"struct"},"2:42919:8193":{"crate_id":2,"path":["core","str","iter","SplitWhitespace"],"kind":"struct"},"17:11299:5298":{"crate_id":17,"path":["object","elf","SectionHeader32"],"kind":"struct"},"17:9853:21018":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdatSectionIterator"],"kind":"struct"},"17:13791:5942":{"crate_id":17,"path":["object","pe","ImageDebugMisc"],"kind":"struct"},"6:4277:6658":{"crate_id":6,"path":["libc","unix","linux_like","linux","glob_t"],"kind":"struct"},"2:45502:7639":{"crate_id":2,"path":["core","core_arch","simd","i16x16"],"kind":"struct"},"2:40546:8851":{"crate_id":2,"path":["core","net","ip_addr","Ipv6MulticastScope"],"kind":"enum"},"1:8204:8239":{"crate_id":1,"path":["std","os","unix","net","ancillary","SocketCred"],"kind":"struct"},"17:13041:5727":{"crate_id":17,"path":["object","pe","Guid"],"kind":"struct"},"2:43561:202":{"crate_id":2,"path":["core","future","ready","Ready"],"kind":"struct"},"17:10068:21060":{"crate_id":17,"path":["object","read","macho","file","MachOComdatIterator"],"kind":"struct"},"24:4872:3162":{"crate_id":24,"path":["syn","expr","ExprParen"],"kind":"struct"},"1:6103:4878":{"crate_id":1,"path":["std","sync","mpmc","waker","SyncWaker"],"kind":"struct"},"6:7543:7421":{"crate_id":6,"path":["libc","unix","linux_like","linux","canfd_frame"],"kind":"struct"},"24:4574:2015":{"crate_id":24,"path":["syn","derive","DataUnion"],"kind":"struct"},"24:5075:2137":{"crate_id":24,"path":["syn","lit","Lit"],"kind":"enum"},"2:2337:179":{"crate_id":2,"path":["core","cmp","Ord"],"kind":"trait"},"2:38947:200":{"crate_id":2,"path":["core","ops","range","RangeToInclusive"],"kind":"struct"},"17:10052:21040":{"crate_id":17,"path":["object","read","macho","file","MachOFile"],"kind":"struct"},"6:579:6498":{"crate_id":6,"path":["libc","unix","tms"],"kind":"struct"},"2:40654:7552":{"crate_id":2,"path":["core","net","socket_addr","SocketAddrV4"],"kind":"struct"},"2:10194:8184":{"crate_id":2,"path":["core","slice","iter","RSplitN"],"kind":"struct"},"2:45578:7641":{"crate_id":2,"path":["core","core_arch","simd","i64x4"],"kind":"struct"},"1:7780:8236":{"crate_id":1,"path":["std","fs","OpenOptions"],"kind":"struct"},"24:3381:3442":{"crate_id":24,"path":["syn","token","While"],"kind":"struct"},"2:30048:67":{"crate_id":2,"path":["core","ptr","alignment","Alignment"],"kind":"struct"},"2:2851:5010":{"crate_id":2,"path":["core","ops","bit","BitAndAssign"],"kind":"trait"},"17:13721:5927":{"crate_id":17,"path":["object","pe","ImageEnclaveConfig64"],"kind":"struct"},"24:2684:106":{"crate_id":24,"path":["syn","token","Continue"],"kind":"struct"},"17:9822:20982":{"crate_id":17,"path":["object","read","elf","relocation","RelocationSections"],"kind":"struct"},"2:11598:14114":{"crate_id":2,"path":["core","str","pattern","DoubleEndedSearcher"],"kind":"trait"},"2:8180:3700":{"crate_id":2,"path":["core","panic","unwind_safe","AssertUnwindSafe"],"kind":"struct"},"5:1232:8639":{"crate_id":5,"path":["alloc","collections","btree","map","entry","OccupiedError"],"kind":"struct"},"24:4880:3163":{"crate_id":24,"path":["syn","expr","ExprRange"],"kind":"struct"},"22:766:3241":{"crate_id":22,"path":["proc_macro2","extra","DelimSpan"],"kind":"struct"},"1:11876:309":{"crate_id":1,"path":["std","array"],"kind":"primitive"},"22:0:1653":{"crate_id":22,"path":["proc_macro2"],"kind":"module"},"1:3293:8829":{"crate_id":1,"path":["std","io","stdio","IsTerminal"],"kind":"trait"},"2:31820:8125":{"crate_id":2,"path":["core","error","Source"],"kind":"struct"},"16:6990:6131":{"crate_id":16,"path":["gimli","read","loclists","LocationListEntry"],"kind":"struct"},"24:5314:2253":{"crate_id":24,"path":["syn","path","Constraint"],"kind":"struct"},"1:11452:7793":{"crate_id":1,"path":["std","personality","dwarf","eh","EHContext"],"kind":"struct"},"2:6601:3296":{"crate_id":2,"path":["core","iter","adapters","zip","TrustedRandomAccessNoCoerce"],"kind":"trait"},"17:11653:5377":{"crate_id":17,"path":["object","elf","GnuHashHeader"],"kind":"struct"},"24:3904:3451":{"crate_id":24,"path":["syn","token","Dollar"],"kind":"struct"},"24:2650:98":{"crate_id":24,"path":["syn","token","Break"],"kind":"struct"},"2:39035:32496":{"crate_id":2,"path":["core","any","tags","MaybeSizedValue"],"kind":"struct"},"17:242:36673":{"crate_id":17,"path":["object","read","util","DebugByte"],"kind":"struct"},"17:12307:5510":{"crate_id":17,"path":["object","macho","TwolevelHint"],"kind":"struct"},"17:11011:5254":{"crate_id":17,"path":["object","read","CodeView"],"kind":"struct"},"1:6487:8966":{"crate_id":1,"path":["std","sync","poison","TryLockError"],"kind":"enum"},"17:13433:5827":{"crate_id":17,"path":["object","pe","ImageResourceDataEntry"],"kind":"struct"},"1:10648:8236":{"crate_id":1,"path":["std","sys","unix","fs","OpenOptions"],"kind":"struct"},"1:10661:8255":{"crate_id":1,"path":["std","sys","unix","fs","FilePermissions"],"kind":"struct"},"2:22262:167":{"crate_id":2,"path":["core","num","nonzero","NonZeroI16"],"kind":"struct"},"17:13367:5808":{"crate_id":17,"path":["object","pe","ImageBoundImportDescriptor"],"kind":"struct"},"2:9921:3224":{"crate_id":2,"path":["core","slice","iter","IterMut"],"kind":"struct"},"1:3940:8865":{"crate_id":1,"path":["std","os","unix","fs","MetadataExt"],"kind":"trait"},"6:6656:7295":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statvfs64"],"kind":"struct"},"17:12894:5674":{"crate_id":17,"path":["object","pe","MaskedRichHeaderEntry"],"kind":"struct"},"2:2343:186":{"crate_id":2,"path":["core","cmp","PartialOrd"],"kind":"trait"},"6:5935:7159":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","regex_t"],"kind":"struct"},"1:7584:4186":{"crate_id":1,"path":["std","thread","ThreadId"],"kind":"struct"},"2:41735:70":{"crate_id":2,"path":["core","fmt","rt","Argument"],"kind":"struct"},"24:4916:3172":{"crate_id":24,"path":["syn","expr","ExprUnsafe"],"kind":"struct"},"2:8178:3702":{"crate_id":2,"path":["core","panic","unwind_safe","UnwindSafe"],"kind":"trait"},"16:4327:6041":{"crate_id":16,"path":["gimli","constants","DwAt"],"kind":"struct"},"17:12178:5470":{"crate_id":17,"path":["object","macho","SymtabCommand"],"kind":"struct"},"1:5912:4871":{"crate_id":1,"path":["std","sync","mpmc","counter","Sender"],"kind":"struct"},"21:2752:3240":{"crate_id":21,"path":["proc_macro","Delimiter"],"kind":"enum"},"17:9839:20970":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdat"],"kind":"struct"},"9:174:8333":{"crate_id":9,"path":["miniz_oxide","inflate","stream","InflateState"],"kind":"struct"},"6:4943:6970":{"crate_id":6,"path":["libc","unix","linux_like","linux","dirent"],"kind":"struct"},"1:11322:8856":{"crate_id":1,"path":["std","sys_common","net","TcpStream"],"kind":"struct"},"2:39592:3300":{"crate_id":2,"path":["core","iter","adapters","filter","Filter"],"kind":"struct"},"2:40512:7543":{"crate_id":2,"path":["core","net","ip_addr","Ipv4Addr"],"kind":"struct"},"22:792:7864":{"crate_id":22,"path":["proc_macro2","imp","DeferredTokenStream"],"kind":"struct"},"1:3169:8838":{"crate_id":1,"path":["std","io","stdio","Stdin"],"kind":"struct"},"24:3279:1841":{"crate_id":24,"path":["syn","token","Union"],"kind":"struct"},"17:9098:20933":{"crate_id":17,"path":["object","read","any","SectionIterator"],"kind":"struct"},"16:7509:6021":{"crate_id":16,"path":["gimli","read","pubtypes","DebugPubTypes"],"kind":"struct"},"1:923:8728":{"crate_id":1,"path":["std","collections","hash","map","ValuesMut"],"kind":"struct"},"6:7508:7413":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_cond_t"],"kind":"struct"},"6:5990:7182":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_exit"],"kind":"struct"},"2:2923:3360":{"crate_id":2,"path":["core","ops","deref","DerefMut"],"kind":"trait"},"24:885:36928":{"crate_id":24,"path":["syn","generics","TypeParams"],"kind":"struct"},"17:12259:5505":{"crate_id":17,"path":["object","macho","DylibModule64"],"kind":"struct"},"17:11502:5340":{"crate_id":17,"path":["object","elf","ProgramHeader64"],"kind":"struct"},"21:2696:1868":{"crate_id":21,"path":["proc_macro","Span"],"kind":"struct"},"24:1035:1804":{"crate_id":24,"path":["syn","ident","Ident"],"kind":"function"},"17:12059:5456":{"crate_id":17,"path":["object","macho","SubClientCommand"],"kind":"struct"},"17:1978:20994":{"crate_id":17,"path":["object","read","elf","relocation","ElfSectionRelocationIterator"],"kind":"struct"},"17:11832:5422":{"crate_id":17,"path":["object","macho","FatArch64"],"kind":"struct"},"16:2470:5987":{"crate_id":16,"path":["gimli","common","DebugInfoOffset"],"kind":"struct"},"11:659:3219":{"crate_id":11,"path":["hashbrown","map","IntoIter"],"kind":"struct"},"24:2701:3415":{"crate_id":24,"path":["syn","token","Crate"],"kind":"struct"},"6:4469:6770":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_constant_effect"],"kind":"struct"},"24:2218:8877":{"crate_id":24,"path":["syn","spanned","private","Sealed"],"kind":"trait"},"6:4858:6918":{"crate_id":6,"path":["libc","unix","linux_like","linux","in6_ifreq"],"kind":"struct"},"24:1140:7835":{"crate_id":24,"path":["syn","lit","LitFloatRepr"],"kind":"struct"},"2:39008:7534":{"crate_id":2,"path":["core","any","TypeId"],"kind":"struct"},"2:22130:174":{"crate_id":2,"path":["core","num","nonzero","NonZeroU64"],"kind":"struct"},"1:11883:634":{"crate_id":1,"path":["std","f64"],"kind":"primitive"},"17:13249:5779":{"crate_id":17,"path":["object","pe","ImageLinenumber"],"kind":"struct"},"9:445:19847":{"crate_id":9,"path":["miniz_oxide","MZError"],"kind":"enum"},"5:5819:14485":{"crate_id":5,"path":["alloc","sync","ArcInner"],"kind":"struct"},"24:3007:3428":{"crate_id":24,"path":["syn","token","Move"],"kind":"struct"},"2:3154:14202":{"crate_id":2,"path":["core","ops","range","OneSidedRange"],"kind":"trait"},"2:20454:34720":{"crate_id":2,"path":["core","core_simd","swizzle","deinterleave","Even"],"kind":"struct"},"2:7138:3284":{"crate_id":2,"path":["core","iter","traits","collect","Extend"],"kind":"trait"},"6:7491:7408":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_barrierattr_t"],"kind":"struct"},"2:45108:7618":{"crate_id":2,"path":["core","core_arch","simd","m64x2"],"kind":"struct"},"21:1403:1881":{"crate_id":21,"path":["proc_macro","bridge","symbol","Symbol"],"kind":"struct"},"2:46602:7688":{"crate_id":2,"path":["core","core_arch","x86","__m256"],"kind":"struct"},"1:7659:8233":{"crate_id":1,"path":["std","collections","hash","map","DefaultHasher"],"kind":"struct"},"24:4888:3165":{"crate_id":24,"path":["syn","expr","ExprRepeat"],"kind":"struct"},"17:13763:5933":{"crate_id":17,"path":["object","pe","ImageDebugDirectory"],"kind":"struct"},"24:2735:3416":{"crate_id":24,"path":["syn","token","Do"],"kind":"struct"},"16:6868:6123":{"crate_id":16,"path":["gimli","read","lists","ListsHeader"],"kind":"struct"},"11:738:8070":{"crate_id":11,"path":["hashbrown","map","Values"],"kind":"struct"},"24:4484:3122":{"crate_id":24,"path":["syn","attr","AttrStyle"],"kind":"enum"},"5:5783:69":{"crate_id":5,"path":["alloc","sync","Arc"],"kind":"struct"},"2:2723:4066":{"crate_id":2,"path":["core","marker","Freeze"],"kind":"trait"},"2:5914:3315":{"crate_id":2,"path":["core","iter","adapters","intersperse","IntersperseWith"],"kind":"struct"},"16:6442:7993":{"crate_id":16,"path":["gimli","read","aranges","ArangeEntry"],"kind":"struct"},"17:10555:7895":{"crate_id":17,"path":["object","read","pe","export","ExportTable"],"kind":"struct"},"16:3782:6036":{"crate_id":16,"path":["gimli","constants","DwSectV2"],"kind":"struct"},"5:7146:3259":{"crate_id":5,"path":["alloc","collections","TryReserveErrorKind"],"kind":"enum"},"17:13101:5741":{"crate_id":17,"path":["object","pe","ImageSectionHeader"],"kind":"struct"},"6:4529:6801":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_ff_erase"],"kind":"struct"},"1:3356:4819":{"crate_id":1,"path":["std","io","Guard"],"kind":"struct"},"17:13443:5830":{"crate_id":17,"path":["object","pe","ImageLoadConfigCodeIntegrity"],"kind":"struct"},"1:7017:32014":{"crate_id":1,"path":["std","sys_common","wstr","WStrUnits"],"kind":"struct"},"1:5688:8961":{"crate_id":1,"path":["std","sync","barrier","Barrier"],"kind":"struct"},"6:4612:6818":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Phdr"],"kind":"struct"},"22:350:3238":{"crate_id":22,"path":["proc_macro2","imp","LexError"],"kind":"enum"},"16:7543:6023":{"crate_id":16,"path":["gimli","read","rnglists","DebugRngLists"],"kind":"struct"},"1:8485:8243":{"crate_id":1,"path":["std","path","StripPrefixError"],"kind":"struct"},"6:653:14922":{"crate_id":6,"path":["libc","unix","linux_like","timezone"],"kind":"enum"},"2:6512:2594":{"crate_id":2,"path":["core","iter","adapters","zip","zip"],"kind":"function"},"24:4341:3481":{"crate_id":24,"path":["syn","token","Shr"],"kind":"struct"},"8:0:2963":{"crate_id":8,"path":["cfg_if"],"kind":"module"},"21:1029:3386":{"crate_id":21,"path":["proc_macro","bridge","client","SourceFile"],"kind":"struct"},"2:2792:5014":{"crate_id":2,"path":["core","ops","arith","Neg"],"kind":"trait"},"2:39759:3312":{"crate_id":2,"path":["core","iter","adapters","take_while","TakeWhile"],"kind":"struct"},"6:4602:6817":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Sym"],"kind":"struct"},"6:6802:7374":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","seccomp_notif_sizes"],"kind":"struct"},"22:109:7862":{"crate_id":22,"path":["proc_macro2","rcvec","RcVec"],"kind":"struct"},"16:55:6215":{"crate_id":16,"path":["gimli","endianity","Endianity"],"kind":"trait"},"24:4522:1860":{"crate_id":24,"path":["syn","data","Fields"],"kind":"enum"},"24:1533:2752":{"crate_id":24,"path":["syn","parse","Unexpected"],"kind":"enum"},"17:13159:5755":{"crate_id":17,"path":["object","pe","ImageSymbolExBytes"],"kind":"struct"},"17:12915:5684":{"crate_id":17,"path":["object","pe","ImageDataDirectory"],"kind":"struct"},"1:9109:27977":{"crate_id":1,"path":["std","sys","common","thread_local","fast_local","DtorState"],"kind":"enum"},"24:5128:3180":{"crate_id":24,"path":["syn","lit","LitBool"],"kind":"struct"},"16:6061:19966":{"crate_id":16,"path":["gimli","read","cfi","CallFrameInstruction"],"kind":"enum"},"16:7259:3698":{"crate_id":16,"path":["gimli","read","op","Location"],"kind":"enum"},"1:3384:7748":{"crate_id":1,"path":["std","io","Read"],"kind":"trait"},"2:2845:3481":{"crate_id":2,"path":["core","ops","bit","Shr"],"kind":"trait"},"21:2308:2184":{"crate_id":21,"path":["proc_macro","bridge","Punct"],"kind":"struct"},"1:9376:4891":{"crate_id":1,"path":["std","sys","unix","fs","Dir"],"kind":"struct"},"16:7557:6173":{"crate_id":16,"path":["gimli","read","rnglists","RangeLists"],"kind":"struct"},"16:7293:6153":{"crate_id":16,"path":["gimli","read","op","Piece"],"kind":"struct"},"1:3934:8864":{"crate_id":1,"path":["std","os","unix","fs","OpenOptionsExt"],"kind":"trait"},"16:2905:6005":{"crate_id":16,"path":["gimli","common","EhFrameOffset"],"kind":"struct"},"2:9453:4848":{"crate_id":2,"path":["core","slice","sort","InsertionHole"],"kind":"struct"},"6:6557:7259":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","flock"],"kind":"struct"},"24:842:8877":{"crate_id":24,"path":["syn","ext","private","Sealed"],"kind":"trait"},"1:3450:30117":{"crate_id":1,"path":["std","io","Write","write_fmt","Adapter"],"kind":"struct"},"24:1136:7833":{"crate_id":24,"path":["syn","lit","LitIntRepr"],"kind":"struct"},"24:5476:3196":{"crate_id":24,"path":["syn","ty","BareFnArg"],"kind":"struct"},"18:113:24831":{"crate_id":18,"path":["memchr","memchr","iter","Memchr3"],"kind":"struct"},"24:5464:3208":{"crate_id":24,"path":["syn","ty","TypeSlice"],"kind":"struct"},"1:10127:8950":{"crate_id":1,"path":["std","sys","unix","pipe","AnonPipe"],"kind":"struct"},"1:7579:4185":{"crate_id":1,"path":["std","thread","Builder"],"kind":"struct"},"17:8953:5149":{"crate_id":17,"path":["object","read","util","StringTable"],"kind":"struct"},"1:7654:4577":{"crate_id":1,"path":["std","collections","hash","map","RandomState"],"kind":"struct"},"24:1851:3216":{"crate_id":24,"path":["syn","punctuated","Pairs"],"kind":"struct"},"17:9641:20966":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdatSectionIterator"],"kind":"struct"},"24:4566:2011":{"crate_id":24,"path":["syn","derive","DataStruct"],"kind":"struct"},"6:4796:6889":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_filter"],"kind":"struct"},"6:5850:7105":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_mmap_req"],"kind":"struct"},"6:500:6450":{"crate_id":6,"path":["libc","unix","rlimit"],"kind":"struct"},"2:40748:3224":{"crate_id":2,"path":["core","option","IterMut"],"kind":"struct"},"5:679:109":{"crate_id":5,"path":["alloc","borrow","Cow"],"kind":"enum"},"16:6307:6006":{"crate_id":16,"path":["gimli","read","abbrev","DebugAbbrev"],"kind":"struct"},"2:20751:7435":{"crate_id":2,"path":["core","core_simd","masks","mask_impl","Mask"],"kind":"struct"},"6:5983:7181":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_entry"],"kind":"struct"},"5:3524:3220":{"crate_id":5,"path":["alloc","collections","linked_list","Iter"],"kind":"struct"},"5:3537:3224":{"crate_id":5,"path":["alloc","collections","linked_list","IterMut"],"kind":"struct"},"1:11136:4896":{"crate_id":1,"path":["std","sys_common","once","futex","CompletionGuard"],"kind":"struct"},"2:43364:8220":{"crate_id":2,"path":["core","str","LinesMap"],"kind":"struct"},"24:1487:3232":{"crate_id":24,"path":["syn","parse","Parse"],"kind":"trait"},"6:4432:6754":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_keymap_entry"],"kind":"struct"},"1:6375:8963":{"crate_id":1,"path":["std","sync","once","OnceState"],"kind":"struct"},"16:7042:8038":{"crate_id":16,"path":["gimli","read","lookup","PubStuffHeader"],"kind":"struct"},"1:11201:8259":{"crate_id":1,"path":["std","sys_common","wtf8","Wtf8Buf"],"kind":"struct"},"18:521:24844":{"crate_id":18,"path":["memchr","memmem","prefilter","Prefilter"],"kind":"enum"},"6:4873:6924":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_initmsg"],"kind":"struct"},"5:1032:36575":{"crate_id":5,"path":["alloc","collections","btree","append","MergeIter"],"kind":"struct"},"24:4868:3161":{"crate_id":24,"path":["syn","expr","ExprMethodCall"],"kind":"struct"},"17:9796:5171":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbol"],"kind":"struct"},"2:20661:8877":{"crate_id":2,"path":["core","core_simd","elements","sealed","Sealed"],"kind":"trait"},"5:4356:4819":{"crate_id":5,"path":["alloc","collections","vec_deque","write_iter_wrapping","Guard"],"kind":"struct"},"5:2397:7426":{"crate_id":5,"path":["alloc","collections","btree","node","NodeRef"],"kind":"struct"},"11:0:2966":{"crate_id":11,"path":["hashbrown"],"kind":"module"},"19:0:1019":{"crate_id":19,"path":["panic_unwind"],"kind":"module"},"1:10619:8924":{"crate_id":1,"path":["std","sys","unix","fd","FileDesc"],"kind":"struct"},"2:3091:3243":{"crate_id":2,"path":["core","ops","range","RangeBounds"],"kind":"trait"},"2:42553:14106":{"crate_id":2,"path":["core","slice","iter","RChunksExactMut"],"kind":"struct"},"11:274:8063":{"crate_id":11,"path":["hashbrown","raw","RawIterRange"],"kind":"struct"},"17:10039:21024":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCacheImage"],"kind":"struct"},"17:9946:7891":{"crate_id":17,"path":["object","read","elf","version","VerdefIterator"],"kind":"struct"},"1:11363:8855":{"crate_id":1,"path":["std","sys_common","net","TcpListener"],"kind":"struct"},"1:4992:29722":{"crate_id":1,"path":["std","path","fmt","DebugHelper"],"kind":"struct"},"24:3974:123":{"crate_id":24,"path":["syn","token","Eq"],"kind":"struct"},"2:12407:202":{"crate_id":2,"path":["core","task","ready","Ready"],"kind":"struct"},"6:4381:6727":{"crate_id":6,"path":["libc","unix","linux_like","linux","if_nameindex"],"kind":"struct"},"17:11993:5445":{"crate_id":17,"path":["object","macho","Fvmlib"],"kind":"struct"},"5:3743:4510":{"crate_id":5,"path":["alloc","collections","linked_list","DrainFilter"],"kind":"struct"},"16:4702:6050":{"crate_id":16,"path":["gimli","constants","DwLang"],"kind":"struct"},"17:11532:5344":{"crate_id":17,"path":["object","elf","Dyn64"],"kind":"struct"},"14:7:8633":{"crate_id":14,"path":["rustc_demangle","legacy","Demangle"],"kind":"struct"},"17:10747:126":{"crate_id":17,"path":["object","read","Error"],"kind":"struct"},"1:3211:8841":{"crate_id":1,"path":["std","io","stdio","StdoutLock"],"kind":"struct"},"6:6688:7305":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_xmmreg"],"kind":"struct"},"1:307:1428":{"crate_id":1,"path":["std","thread"],"kind":"module"},"2:38742:14150":{"crate_id":2,"path":["core","ops","control_flow","ControlFlow"],"kind":"enum"},"17:10080:21061":{"crate_id":17,"path":["object","read","macho","file","MachOComdat"],"kind":"struct"},"24:3313:3438":{"crate_id":24,"path":["syn","token","Unsized"],"kind":"struct"},"17:10967:5252":{"crate_id":17,"path":["object","read","Import"],"kind":"struct"},"1:508:4174":{"crate_id":1,"path":["std","thread","PanicGuard"],"kind":"struct"},"24:552:7830":{"crate_id":24,"path":["syn","error","ErrorMessage"],"kind":"struct"},"14:0:2968":{"crate_id":14,"path":["rustc_demangle"],"kind":"module"},"1:561:4181":{"crate_id":1,"path":["std","thread","JoinHandle"],"kind":"struct"},"11:1518:19927":{"crate_id":11,"path":["hashbrown","rustc_entry","RustcEntry"],"kind":"enum"},"24:2905:3424":{"crate_id":24,"path":["syn","token","In"],"kind":"struct"},"16:8156:6027":{"crate_id":16,"path":["gimli","read","unit","DebugTypes"],"kind":"struct"},"1:3466:8824":{"crate_id":1,"path":["std","io","BufRead"],"kind":"trait"},"1:8795:7772":{"crate_id":1,"path":["std","sync","mpsc","SendError"],"kind":"struct"},"17:8521:20928":{"crate_id":17,"path":["object","common","FileFlags"],"kind":"enum"},"17:13233:5776":{"crate_id":17,"path":["object","pe","ImageAuxSymbolCrc"],"kind":"struct"},"2:42767:8184":{"crate_id":2,"path":["core","str","iter","RSplitN"],"kind":"struct"},"1:1791:8744":{"crate_id":1,"path":["std","env","VarsOs"],"kind":"struct"},"6:4828:6903":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlmsgerr"],"kind":"struct"},"1:8789:3219":{"crate_id":1,"path":["std","sync","mpsc","IntoIter"],"kind":"struct"},"24:2599:3413":{"crate_id":24,"path":["syn","token","Await"],"kind":"struct"},"17:13744:5928":{"crate_id":17,"path":["object","pe","ImageEnclaveImport"],"kind":"struct"},"17:10569:7899":{"crate_id":17,"path":["object","read","pe","import","ImportTable"],"kind":"struct"},"2:9989:8102":{"crate_id":2,"path":["core","slice","iter","SplitInclusive"],"kind":"struct"},"17:10316:5211":{"crate_id":17,"path":["object","read","macho","section","MachOSectionInternal"],"kind":"struct"},"24:2531:3409":{"crate_id":24,"path":["syn","token","Abstract"],"kind":"struct"},"24:3296:3437":{"crate_id":24,"path":["syn","token","Unsafe"],"kind":"struct"},"6:5034:7012":{"crate_id":6,"path":["libc","unix","linux_like","linux","ifreq"],"kind":"struct"},"6:6541:7247":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statfs"],"kind":"struct"},"1:2868:207":{"crate_id":1,"path":["std","io","error","Result"],"kind":"typedef"},"24:3824:3446":{"crate_id":24,"path":["syn","token","At"],"kind":"struct"},"1:1852:8759":{"crate_id":1,"path":["std","env","ArgsOs"],"kind":"struct"},"17:10142:21063":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandVariant"],"kind":"enum"},"1:11484:8264":{"crate_id":1,"path":["std","backtrace_rs","backtrace","libunwind","Frame"],"kind":"enum"},"5:4326:4821":{"crate_id":5,"path":["alloc","collections","vec_deque","drop","Dropper"],"kind":"struct"},"16:5811:7938":{"crate_id":16,"path":["gimli","read","cfi","CommonInformationEntry"],"kind":"struct"},"11:2178:1793":{"crate_id":11,"path":["hashbrown","raw","sse2","Group"],"kind":"struct"},"17:12419:5525":{"crate_id":17,"path":["object","macho","VersionMinCommand"],"kind":"struct"},"6:4903:6945":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_rcvinfo"],"kind":"struct"},"2:20702:8877":{"crate_id":2,"path":["core","core_simd","lane_count","sealed","Sealed"],"kind":"trait"},"1:11153:8256":{"crate_id":1,"path":["std","sys_common","process","CommandEnv"],"kind":"struct"},"1:917:4510":{"crate_id":1,"path":["std","collections","hash","map","DrainFilter"],"kind":"struct"},"1:10411:8836":{"crate_id":1,"path":["std","sys","unix","stdio","Stderr"],"kind":"struct"},"2:41446:3365":{"crate_id":2,"path":["core","fmt","num","Octal"],"kind":"struct"},"2:22163:171":{"crate_id":2,"path":["core","num","nonzero","NonZeroU128"],"kind":"struct"},"24:4979:2452":{"crate_id":24,"path":["syn","generics","LifetimeParam"],"kind":"struct"},"24:3800:3444":{"crate_id":24,"path":["syn","token","AndAnd"],"kind":"struct"},"21:434:4776":{"crate_id":21,"path":["proc_macro","bridge","scoped_cell","replace","PutBackOnDrop"],"kind":"struct"},"2:2780:5003":{"crate_id":2,"path":["core","ops","arith","Div"],"kind":"trait"},"6:4734:6858":{"crate_id":6,"path":["libc","unix","linux_like","linux","fanotify_response"],"kind":"struct"},"2:2855:5011":{"crate_id":2,"path":["core","ops","bit","BitOrAssign"],"kind":"trait"},"6:4780:6882":{"crate_id":6,"path":["libc","unix","linux_like","linux","can_filter"],"kind":"struct"},"24:5034:2447":{"crate_id":24,"path":["syn","generics","TraitBoundModifier"],"kind":"enum"},"17:12433:5527":{"crate_id":17,"path":["object","macho","BuildVersionCommand"],"kind":"struct"},"16:6520:6082":{"crate_id":16,"path":["gimli","read","index","UnitIndexSection"],"kind":"struct"},"1:7568:4196":{"crate_id":1,"path":["std","thread","local","AccessError"],"kind":"struct"},"17:8598:20931":{"crate_id":17,"path":["object","common","SymbolFlags"],"kind":"enum"},"24:286:36972":{"crate_id":24,"path":["syn","bigint","BigInt"],"kind":"struct"},"6:4624:6819":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Phdr"],"kind":"struct"},"24:5451:2213":{"crate_id":24,"path":["syn","ty","TypePath"],"kind":"struct"},"24:1068:1877":{"crate_id":24,"path":["syn","lifetime","Lifetime"],"kind":"struct"},"17:9188:36692":{"crate_id":17,"path":["object","read","any","ComdatSectionIteratorInternal"],"kind":"enum"},"2:9289:139":{"crate_id":2,"path":["core","hash","Hash"],"kind":"trait"},"21:1072:1868":{"crate_id":21,"path":["proc_macro","bridge","client","Span"],"kind":"struct"},"24:498:3230":{"crate_id":24,"path":["syn","drops","NoDrop"],"kind":"struct"},"2:46628:7690":{"crate_id":2,"path":["core","core_arch","x86","__m512i"],"kind":"struct"},"17:12461:5533":{"crate_id":17,"path":["object","macho","DyldInfoCommand"],"kind":"struct"},"24:1489:1875":{"crate_id":24,"path":["syn","parse","ParseStream"],"kind":"typedef"}},"external_crates":{"23":{"name":"unicode_ident","html_root_url":"https://docs.rs/unicode-ident/1.0.8/"},"20":{"name":"quote","html_root_url":"https://docs.rs/quote/1.0.26/"},"17":{"name":"object","html_root_url":"https://doc.rust-lang.org/nightly/"},"14":{"name":"rustc_demangle","html_root_url":"https://doc.rust-lang.org/nightly/"},"11":{"name":"hashbrown","html_root_url":"https://doc.rust-lang.org/nightly/"},"8":{"name":"cfg_if","html_root_url":"https://docs.rs/cfg-if/"},"5":{"name":"alloc","html_root_url":"https://doc.rust-lang.org/nightly/"},"2":{"name":"core","html_root_url":"https://doc.rust-lang.org/nightly/"},"22":{"name":"proc_macro2","html_root_url":"https://docs.rs/proc-macro2/1.0.56/"},"19":{"name":"panic_unwind","html_root_url":"https://doc.rust-lang.org/nightly/"},"16":{"name":"gimli","html_root_url":"https://doc.rust-lang.org/nightly/"},"13":{"name":"std_detect","html_root_url":"https://doc.rust-lang.org/nightly/"},"10":{"name":"adler","html_root_url":"https://docs.rs/adler/1.0.2/"},"7":{"name":"unwind","html_root_url":"https://doc.rust-lang.org/nightly/"},"4":{"name":"rustc_std_workspace_core","html_root_url":"https://doc.rust-lang.org/nightly/"},"1":{"name":"std","html_root_url":"https://doc.rust-lang.org/nightly/"},"24":{"name":"syn","html_root_url":"https://docs.rs/syn/2.0.15/"},"21":{"name":"proc_macro","html_root_url":"https://doc.rust-lang.org/nightly/"},"18":{"name":"memchr","html_root_url":"https://doc.rust-lang.org/nightly/"},"15":{"name":"addr2line","html_root_url":"https://doc.rust-lang.org/nightly/"},"12":{"name":"rustc_std_workspace_alloc","html_root_url":"https://doc.rust-lang.org/nightly/"},"9":{"name":"miniz_oxide","html_root_url":"https://doc.rust-lang.org/nightly/"},"6":{"name":"libc","html_root_url":"https://doc.rust-lang.org/nightly/"},"3":{"name":"compiler_builtins","html_root_url":"https://doc.rust-lang.org/nightly/"}},"format_version":24}