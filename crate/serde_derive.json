{"root":"0:0:1837","crate_version":"1.0.193","includes_private":false,"index":{"2:12774:30723":{"id":"2:12774:30723","crate_id":2,"name":"rsplit","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by\ncharacters matched by a pattern and yielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`split`] method can be used.\n\n[`split`]: str::split\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".rsplit(' ').collect();\nassert_eq!(v, [\"lamb\", \"little\", \"a\", \"had\", \"Mary\"]);\n\nlet v: Vec<&str> = \"\".rsplit('X').collect();\nassert_eq!(v, [\"\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".rsplit('X').collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"\", \"lion\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".rsplit(\"::\").collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"lion\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".rsplit(|c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"ghi\", \"def\", \"abc\"]);\n```","links":{"self::pattern":"2:12415:3806","`DoubleEndedIterator`":"2:7785:127","prim@char":"1:12034:448","str::split":"2:12768:27281"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RSplit","id":"2:43869:9595","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12420:15641","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12420:15641","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12435:15642","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12741:2830":{"id":"2:12741:2830","crate_id":2,"name":"split_at","span":null,"visibility":"public","docs":"Divide one string slice into two at an index.\n\nThe argument, `mid`, should be a byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get mutable string slices instead, see the [`split_at_mut`]\nmethod.\n\n[`split_at_mut`]: str::split_at_mut\n\n# Panics\n\nPanics if `mid` is not on a UTF-8 code point boundary, or if it is\npast the end of the last code point of the string slice.\n\n# Examples\n\n```\nlet s = \"Per Martin-Löf\";\n\nlet (first, last) = s.split_at(3);\n\nassert_eq!(\"Per\", first);\nassert_eq!(\" Martin-Löf\", last);\n```","links":{"str::split_at_mut":"2:12742:30713"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["mid",{"primitive":"usize"}]],"output":{"tuple":[{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:8:1953":{"id":"0:8:1953","crate_id":0,"name":"ast","span":{"filename":"src/internals/ast.rs","begin":[1,0],"end":[216,1]},"visibility":"public","docs":"A Serde ast, parsed from the Syn ast and ready to generate Rust code.","links":{},"attrs":[],"deprecation":null,"inner":{"module":{"is_crate":false,"items":[],"is_stripped":false}}},"2:12751:2282":{"id":"2:12751:2282","crate_id":2,"name":"contains","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a sub-slice of\nthis string slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.contains(\"nana\"));\nassert!(!bananas.contains(\"apples\"));\n```","links":{"prim@char":"1:12034:448","self::pattern":"2:12415:3806"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12420:15641","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12771:30721":{"id":"2:12771:30721","crate_id":2,"name":"split_inclusive","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by\ncharacters matched by a pattern. Differs from the iterator produced by\n`split` in that `split_inclusive` leaves the matched part as the\nterminator of the substring.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\\nlittle lamb\\nlittle lamb.\"\n    .split_inclusive('\\n').collect();\nassert_eq!(v, [\"Mary had a little lamb\\n\", \"little lamb\\n\", \"little lamb.\"]);\n```\n\nIf the last element of the string is matched,\nthat element will be considered the terminator of the preceding substring.\nThat substring will be the last item returned by the iterator.\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\\nlittle lamb\\nlittle lamb.\\n\"\n    .split_inclusive('\\n').collect();\nassert_eq!(v, [\"Mary had a little lamb\\n\", \"little lamb\\n\", \"little lamb.\\n\"]);\n```","links":{"prim@char":"1:12034:448","self::pattern":"2:12415:3806"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"SplitInclusive","id":"2:12231:9594","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12420:15641","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12789:30729":{"id":"2:12789:30729","crate_id":2,"name":"split_once","span":null,"visibility":"public","docs":"Splits the string on the first occurrence of the specified delimiter and\nreturns prefix before delimiter and suffix after delimiter.\n\n# Examples\n\n```\nassert_eq!(\"cfg\".split_once('='), None);\nassert_eq!(\"cfg=\".split_once('='), Some((\"cfg\", \"\")));\nassert_eq!(\"cfg=foo\".split_once('='), Some((\"cfg\", \"foo\")));\nassert_eq!(\"cfg=foo=bar\".split_once('='), Some((\"cfg\", \"foo=bar\")));\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["delimiter",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:41929:200","args":{"angle_bracketed":{"args":[{"type":{"tuple":[{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12420:15641","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12742:30713":{"id":"2:12742:30713","crate_id":2,"name":"split_at_mut","span":null,"visibility":"public","docs":"Divide one mutable string slice into two at an index.\n\nThe argument, `mid`, should be a byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get immutable string slices instead, see the [`split_at`] method.\n\n[`split_at`]: str::split_at\n\n# Panics\n\nPanics if `mid` is not on a UTF-8 code point boundary, or if it is\npast the end of the last code point of the string slice.\n\n# Examples\n\n```\nlet mut s = \"Per Martin-Löf\".to_string();\n{\n    let (first, last) = s.split_at_mut(3);\n    first.make_ascii_uppercase();\n    assert_eq!(\"PER\", first);\n    assert_eq!(\" Martin-Löf\", last);\n}\nassert_eq!(\"PER Martin-Löf\", s);\n```","links":{"str::split_at":"2:12741:2830"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["mid",{"primitive":"usize"}]],"output":{"tuple":[{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12718":{"id":"2:12718","crate_id":2,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":["#[cfg(not(test))]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"primitive":"str"},"items":["2:12719:867","2:12720:2180","2:12721:34562","2:12722:34563","2:12724:34564","2:12727:2942","2:12728:34565","2:12729:339","2:12730:30691","2:12731:2069","2:12733:30688","2:12735:30689","2:12737:30690","2:12739:34566","2:12740:34567","2:12741:2830","2:12742:30713","2:12743:2420","2:12744:2414","2:12745:9583","2:12746:32203","2:12747:32215","2:12748:27282","2:12749:34568","2:12750:32517","2:12751:2282","2:12754:30321","2:12757:30323","2:12760:2732","2:12764:4352","2:12768:27281","2:12771:30721","2:12774:30723","2:12777:34569","2:12780:34570","2:12783:30725","2:12786:30727","2:12789:30729","2:12792:30730","2:12795:2176","2:12798:34571","2:12801:34572","2:12804:34573","2:12807:34574","2:12809:34575","2:12811:34576","2:12813:34577","2:12814:34578","2:12815:34579","2:12818:2088","2:12821:27531","2:12824:30731","2:12827:34580","2:12830:34581","2:12833:34582","2:12836:2049","2:12838:29221","2:12839:31855","2:12840:29223","2:12841:29224","2:12842:29225","2:12843:34583","2:12845:10191","2:12846:34584"],"negative":false,"synthetic":false,"blanket_impl":null}}},"2:12813:34577":{"id":"2:12813:34577","crate_id":2,"name":"trim_left","span":null,"visibility":"public","docs":"Returns a string slice with leading whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`.\n\n# Text directionality\n\nA string is a sequence of bytes. 'Left' in this context means the first\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _right_ side, not the left.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \" Hello\\tworld\\t\";\n\nassert_eq!(\"Hello\\tworld\\t\", s.trim_left());\n```\n\nDirectionality:\n\n```\nlet s = \"  English\";\nassert!(Some('E') == s.trim_left().chars().next());\n\nlet s = \"  עברית\";\nassert!(Some('ע') == s.trim_left().chars().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_start`\", suggestion\n= \"trim_start\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_start`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12818:2088":{"id":"2:12818:2088","crate_id":2,"name":"trim_start_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. `start` in this context means the first\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be left side, and for right-to-left languages like\nArabic or Hebrew, this will be the right side.\n\n# Examples\n\n```\nassert_eq!(\"11foo1bar11\".trim_start_matches('1'), \"foo1bar11\");\nassert_eq!(\"123foo1bar123\".trim_start_matches(char::is_numeric), \"foo1bar123\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_start_matches(x), \"foo1bar12\");\n```","links":{"prim@char":"1:12034:448","self::pattern":"2:12415:3806"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12420:15641","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12811:34576":{"id":"2:12811:34576","crate_id":2,"name":"trim_end","span":null,"visibility":"public","docs":"Returns a string slice with trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Text directionality\n\nA string is a sequence of bytes. `end` in this context means the last\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be right side, and for right-to-left languages like\nArabic or Hebrew, this will be the left side.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\nassert_eq!(\"\\n Hello\\tworld\", s.trim_end());\n```\n\nDirectionality:\n\n```\nlet s = \"  English  \";\nassert!(Some('h') == s.trim_end().chars().rev().next());\n\nlet s = \"  עברית  \";\nassert!(Some('ת') == s.trim_end().chars().rev().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_trim_end\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12768:27281":{"id":"2:12768:27281","crate_id":2,"name":"split","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by\ncharacters matched by a pattern.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rsplit`] method can be used.\n\n[`rsplit`]: str::rsplit\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".split(' ').collect();\nassert_eq!(v, [\"Mary\", \"had\", \"a\", \"little\", \"lamb\"]);\n\nlet v: Vec<&str> = \"\".split('X').collect();\nassert_eq!(v, [\"\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".split('X').collect();\nassert_eq!(v, [\"lion\", \"\", \"tiger\", \"leopard\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".split(\"::\").collect();\nassert_eq!(v, [\"lion\", \"tiger\", \"leopard\"]);\n\nlet v: Vec<&str> = \"abc1def2ghi\".split(char::is_numeric).collect();\nassert_eq!(v, [\"abc\", \"def\", \"ghi\"]);\n\nlet v: Vec<&str> = \"lionXtigerXleopard\".split(char::is_uppercase).collect();\nassert_eq!(v, [\"lion\", \"tiger\", \"leopard\"]);\n```\n\nIf the pattern is a slice of chars, split on each occurrence of any of the characters:\n\n```\nlet v: Vec<&str> = \"2020-11-03 23:59\".split(&['-', ' ', ':', '@'][..]).collect();\nassert_eq!(v, [\"2020\", \"11\", \"03\", \"23\", \"59\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".split(|c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"abc\", \"def\", \"ghi\"]);\n```\n\nIf a string contains multiple contiguous separators, you will end up\nwith empty strings in the output:\n\n```\nlet x = \"||||a||b|c\".to_string();\nlet d: Vec<_> = x.split('|').collect();\n\nassert_eq!(d, &[\"\", \"\", \"\", \"\", \"a\", \"\", \"b\", \"c\"]);\n```\n\nContiguous separators are separated by the empty string.\n\n```\nlet x = \"(///)\".to_string();\nlet d: Vec<_> = x.split('/').collect();\n\nassert_eq!(d, &[\"(\", \"\", \"\", \")\"]);\n```\n\nSeparators at the start or end of a string are neighbored\nby empty strings.\n\n```\nlet d: Vec<_> = \"010\".split(\"0\").collect();\nassert_eq!(d, &[\"\", \"1\", \"\"]);\n```\n\nWhen the empty string is used as a separator, it separates\nevery character in the string, along with the beginning\nand end of the string.\n\n```\nlet f: Vec<_> = \"rust\".split(\"\").collect();\nassert_eq!(f, &[\"\", \"r\", \"u\", \"s\", \"t\", \"\"]);\n```\n\nContiguous separators can lead to possibly surprising behavior\nwhen whitespace is used as the separator. This code is correct:\n\n```\nlet x = \"    a  b c\".to_string();\nlet d: Vec<_> = x.split(' ').collect();\n\nassert_eq!(d, &[\"\", \"\", \"\", \"\", \"a\", \"\", \"b\", \"c\"]);\n```\n\nIt does _not_ give you:\n\n```,ignore\nassert_eq!(d, &[\"a\", \"b\", \"c\"]);\n```\n\nUse [`split_whitespace`] for this behavior.\n\n[`split_whitespace`]: str::split_whitespace","links":{"self::pattern":"2:12415:3806","`DoubleEndedIterator`":"2:7785:127","prim@char":"1:12034:448","str::split_whitespace":"2:12746:32203","str::rsplit":"2:12774:30723"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Split","id":"2:43851:9592","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12420:15641","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12798:34571":{"id":"2:12798:34571","crate_id":2,"name":"rmatches","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within this string slice,\nyielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`matches`] method can be used.\n\n[`matches`]: str::matches\n\n# Examples\n\n```\nlet v: Vec<&str> = \"abcXXXabcYYYabc\".rmatches(\"abc\").collect();\nassert_eq!(v, [\"abc\", \"abc\", \"abc\"]);\n\nlet v: Vec<&str> = \"1abc2abc3\".rmatches(char::is_numeric).collect();\nassert_eq!(v, [\"3\", \"2\", \"1\"]);\n```","links":{"self::pattern":"2:12415:3806","`DoubleEndedIterator`":"2:7785:127","prim@char":"1:12034:448","str::matches":"2:12795:2176"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RMatches","id":"2:44073:9678","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12420:15641","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12420:15641","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12435:15642","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5538:35242":{"id":"5:5538:35242","crate_id":5,"name":"to_lowercase","span":null,"visibility":"public","docs":"Returns the lowercase equivalent of this string slice, as a new [`String`].\n\n'Lowercase' is defined according to the terms of the Unicode Derived Core Property\n`Lowercase`.\n\nSince some characters can expand into multiple characters when changing\nthe case, this function returns a [`String`] instead of modifying the\nparameter in-place.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"HELLO\";\n\nassert_eq!(\"hello\", s.to_lowercase());\n```\n\nA tricky example, with sigma:\n\n```\nlet sigma = \"Σ\";\n\nassert_eq!(\"σ\", sigma.to_lowercase());\n\n// but at the end of a word, it's ς, not σ:\nlet odysseus = \"ὈΔΥΣΣΕΎΣ\";\n\nassert_eq!(\"ὀδυσσεύς\", odysseus.to_lowercase());\n```\n\nLanguages without case are not changed:\n\n```\nlet new_year = \"农历新年\";\n\nassert_eq!(new_year, new_year.to_lowercase());\n```","links":{"`String`":"5:7529:249"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the lowercase string as a new String, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7529:249","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5531:35240":{"id":"5:5531:35240","crate_id":5,"name":"into_boxed_bytes","span":null,"visibility":"public","docs":"Converts a `Box<str>` into a `Box<[u8]>` without copying or allocating.\n\n# Examples\n\n```\nlet s = \"this is a string\";\nlet boxed_str = s.to_owned().into_boxed_str();\nlet boxed_bytes = boxed_str.into_boxed_bytes();\nassert_eq!(*boxed_bytes, *s.as_bytes());\n```","links":{},"attrs":["#[must_use = \"`self` will be dropped if the result is not used\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"resolved_path":{"name":"Box","id":"5:276:2024","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}]],"output":{"resolved_path":{"name":"Box","id":"5:276:2024","args":{"angle_bracketed":{"args":[{"type":{"slice":{"primitive":"u8"}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5550:2410":{"id":"5:5550:2410","crate_id":5,"name":"to_ascii_lowercase","span":null,"visibility":"public","docs":"Returns a copy of this string where each character is mapped to its\nASCII lower case equivalent.\n\nASCII letters 'A' to 'Z' are mapped to 'a' to 'z',\nbut non-ASCII letters are unchanged.\n\nTo lowercase the value in-place, use [`make_ascii_lowercase`].\n\nTo lowercase ASCII characters in addition to non-ASCII characters, use\n[`to_lowercase`].\n\n# Examples\n\n```\nlet s = \"Grüße, Jürgen ❤\";\n\nassert_eq!(\"grüße, jürgen ❤\", s.to_ascii_lowercase());\n```\n\n[`make_ascii_lowercase`]: str::make_ascii_lowercase\n[`to_lowercase`]: #method.to_lowercase","links":{"str::make_ascii_lowercase":"2:12842:29225"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use = \"to lowercase the value in-place, use `make_ascii_lowercase()`\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7529:249","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12845:10191":{"id":"2:12845:10191","crate_id":2,"name":"escape_default","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_default`].\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"❤\\n!\".escape_default() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"❤\\n!\".escape_default());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"\\\\u{{2764}}\\\\n!\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"❤\\n!\".escape_default().to_string(), \"\\\\u{2764}\\\\n!\");\n```","links":{"`char::escape_default`":"2:4616:10191"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EscapeDefault","id":"2:44159:9620","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12724:34564":{"id":"2:12724:34564","crate_id":2,"name":"ceil_char_boundary","span":null,"visibility":"public","docs":"Finds the closest `x` not below `index` where `is_char_boundary(x)` is `true`.\n\nIf `index` is greater than the length of the string, this returns the length of the string.\n\nThis method is the natural complement to [`floor_char_boundary`]. See that method\nfor more details.\n\n[`floor_char_boundary`]: str::floor_char_boundary\n\n\n# Examples\n\n```\n#![feature(round_char_boundary)]\nlet s = \"❤️🧡💛💚💙💜\";\nassert_eq!(s.len(), 26);\nassert!(!s.is_char_boundary(13));\n\nlet closest = s.ceil_char_boundary(13);\nassert_eq!(closest, 14);\nassert_eq!(&s[..closest], \"❤️🧡💛\");\n```","links":{"str::floor_char_boundary":"2:12722:34563"},"attrs":["#[unstable(feature = \"round_char_boundary\", issue = \"93743\")]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["index",{"primitive":"usize"}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:493-0:404:1961":{"id":"0:493-0:404:1961","crate_id":0,"name":null,"span":{"filename":"src/internals/mod.rs","begin":[14,0],"end":[14,41]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"import":{"source":"self::receiver::replace_receiver","name":"replace_receiver","id":"0:404:1961","glob":false}}},"2:12801:34572":{"id":"2:12801:34572","crate_id":2,"name":"match_indices","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within this string\nslice as well as the index that the match starts at.\n\nFor matches of `pat` within `self` that overlap, only the indices\ncorresponding to the first match are returned.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rmatch_indices`] method can be used.\n\n[`rmatch_indices`]: str::rmatch_indices\n\n# Examples\n\n```\nlet v: Vec<_> = \"abcXXXabcYYYabc\".match_indices(\"abc\").collect();\nassert_eq!(v, [(0, \"abc\"), (6, \"abc\"), (12, \"abc\")]);\n\nlet v: Vec<_> = \"1abcabc2\".match_indices(\"abc\").collect();\nassert_eq!(v, [(1, \"abc\"), (4, \"abc\")]);\n\nlet v: Vec<_> = \"ababa\".match_indices(\"aba\").collect();\nassert_eq!(v, [(0, \"aba\")]); // only the first `aba`\n```","links":{"self::pattern":"2:12415:3806","`DoubleEndedIterator`":"2:7785:127","prim@char":"1:12034:448","str::rmatch_indices":"2:12804:34573"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"MatchIndices","id":"2:44001:9674","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12420:15641","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:492-0:1019:1960":{"id":"0:492-0:1019:1960","crate_id":0,"name":null,"span":{"filename":"src/internals/mod.rs","begin":[13,0],"end":[13,25]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"import":{"source":"self::ctxt::Ctxt","name":"Ctxt","id":"0:1019:1960","glob":false}}},"2:12744:2414":{"id":"2:12744:2414","crate_id":2,"name":"char_indices","span":null,"visibility":"public","docs":"Returns an iterator over the [`char`]s of a string slice, and their\npositions.\n\nAs a string slice consists of valid UTF-8, we can iterate through a\nstring slice by [`char`]. This method returns an iterator of both\nthese [`char`]s, as well as their byte positions.\n\nThe iterator yields tuples. The position is first, the [`char`] is\nsecond.\n\n# Examples\n\nBasic usage:\n\n```\nlet word = \"goodbye\";\n\nlet count = word.char_indices().count();\nassert_eq!(7, count);\n\nlet mut char_indices = word.char_indices();\n\nassert_eq!(Some((0, 'g')), char_indices.next());\nassert_eq!(Some((1, 'o')), char_indices.next());\nassert_eq!(Some((2, 'o')), char_indices.next());\nassert_eq!(Some((3, 'd')), char_indices.next());\nassert_eq!(Some((4, 'b')), char_indices.next());\nassert_eq!(Some((5, 'y')), char_indices.next());\nassert_eq!(Some((6, 'e')), char_indices.next());\n\nassert_eq!(None, char_indices.next());\n```\n\nRemember, [`char`]s might not match your intuition about characters:\n\n[`char`]: prim@char\n\n```\nlet yes = \"y̆es\";\n\nlet mut char_indices = yes.char_indices();\n\nassert_eq!(Some((0, 'y')), char_indices.next()); // not (0, 'y̆')\nassert_eq!(Some((1, '\\u{0306}')), char_indices.next());\n\n// note the 3 here - the previous character took up two bytes\nassert_eq!(Some((3, 'e')), char_indices.next());\nassert_eq!(Some((4, 's')), char_indices.next());\n\nassert_eq!(None, char_indices.next());\n```","links":{"prim@char":"1:12034:448"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"CharIndices","id":"2:43827:9663","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12843:34583":{"id":"2:12843:34583","crate_id":2,"name":"escape_debug","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_debug`].\n\nNote: only extended grapheme codepoints that begin the string will be\nescaped.\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"❤\\n!\".escape_debug() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"❤\\n!\".escape_debug());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"❤\\\\n!\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"❤\\n!\".escape_debug().to_string(), \"❤\\\\n!\");\n```","links":{"`char::escape_debug`":"2:4615:34583"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EscapeDebug","id":"2:44150:9626","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12730:30691":{"id":"2:12730:30691","crate_id":2,"name":"as_mut_ptr","span":null,"visibility":"public","docs":"Converts a mutable string slice to a raw pointer.\n\nAs string slices are a slice of bytes, the raw pointer points to a\n[`u8`]. This pointer will be pointing to the first byte of the string\nslice.\n\nIt is your responsibility to make sure that the string slice only gets\nmodified in a way that it remains valid UTF-8.","links":{"`u8`":"1:12051:1636"},"attrs":["#[rustc_never_returns_null_ptr]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"raw_pointer":{"mutable":true,"type":{"primitive":"u8"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12792:30730":{"id":"2:12792:30730","crate_id":2,"name":"rsplit_once","span":null,"visibility":"public","docs":"Splits the string on the last occurrence of the specified delimiter and\nreturns prefix before delimiter and suffix after delimiter.\n\n# Examples\n\n```\nassert_eq!(\"cfg\".rsplit_once('='), None);\nassert_eq!(\"cfg=foo\".rsplit_once('='), Some((\"cfg\", \"foo\")));\nassert_eq!(\"cfg=foo=bar\".rsplit_once('='), Some((\"cfg=foo\", \"bar\")));\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["delimiter",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:41929:200","args":{"angle_bracketed":{"args":[{"type":{"tuple":[{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12420:15641","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12420:15641","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12435:15642","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12739:34566":{"id":"2:12739:34566","crate_id":2,"name":"slice_unchecked","span":null,"visibility":"public","docs":"Creates a string slice from another string slice, bypassing safety\nchecks.\n\nThis is generally not recommended, use with caution! For a safe\nalternative see [`str`] and [`Index`].\n\n[`Index`]: crate::ops::Index\n\nThis new slice goes from `begin` to `end`, including `begin` but\nexcluding `end`.\n\nTo get a mutable string slice instead, see the\n[`slice_mut_unchecked`] method.\n\n[`slice_mut_unchecked`]: str::slice_mut_unchecked\n\n# Safety\n\nCallers of this function are responsible that three preconditions are\nsatisfied:\n\n* `begin` must not exceed `end`.\n* `begin` and `end` must be byte positions within the string slice.\n* `begin` and `end` must lie on UTF-8 sequence boundaries.\n\n# Examples\n\n```\nlet s = \"Löwe 老虎 Léopard\";\n\nunsafe {\n    assert_eq!(\"Löwe 老虎 Léopard\", s.slice_unchecked(0, 21));\n}\n\nlet s = \"Hello, world!\";\n\nunsafe {\n    assert_eq!(\"world\", s.slice_unchecked(7, 12));\n}\n```","links":{"`str`":"1:12040:1531","str::slice_mut_unchecked":"2:12740:34567","crate::ops::Index":"2:3112:2587"},"attrs":["#[deprecated(since = \"1.29.0\", note =\n\"use `get_unchecked(begin..end)` instead\")]","#[must_use]"],"deprecation":{"since":"1.29.0","note":"use `get_unchecked(begin..end)` instead"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["begin",{"primitive":"usize"}],["end",{"primitive":"usize"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"2:12827:34580":{"id":"2:12827:34580","crate_id":2,"name":"trim_end_matches","span":null,"visibility":"public","docs":"Returns a string slice with all suffixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. `end` in this context means the last\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be right side, and for right-to-left languages like\nArabic or Hebrew, this will be the left side.\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_end_matches('1'), \"11foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_end_matches(char::is_numeric), \"123foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_end_matches(x), \"12foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1fooX\".trim_end_matches(|c| c == '1' || c == 'X'), \"1foo\");\n```","links":{"prim@char":"1:12034:448","self::pattern":"2:12415:3806"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12420:15641","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12420:15641","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12435:15642","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12728:34565":{"id":"2:12728:34565","crate_id":2,"name":"as_bytes_mut","span":null,"visibility":"public","docs":"Converts a mutable string slice to a mutable byte slice.\n\n# Safety\n\nThe caller must ensure that the content of the slice is valid UTF-8\nbefore the borrow ends and the underlying `str` is used.\n\nUse of a `str` whose contents are not valid UTF-8 is undefined behavior.\n\n# Examples\n\nBasic usage:\n\n```\nlet mut s = String::from(\"Hello\");\nlet bytes = unsafe { s.as_bytes_mut() };\n\nassert_eq!(b\"Hello\", bytes);\n```\n\nMutability:\n\n```\nlet mut s = String::from(\"🗻∈🌏\");\n\nunsafe {\n    let bytes = s.as_bytes_mut();\n\n    bytes[0] = 0xF0;\n    bytes[1] = 0x9F;\n    bytes[2] = 0x8D;\n    bytes[3] = 0x94;\n}\n\nassert_eq!(\"🍔∈🌏\", s);\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"slice":{"primitive":"u8"}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"2:12764:4352":{"id":"2:12764:4352","crate_id":2,"name":"rfind","span":null,"visibility":"public","docs":"Returns the byte index for the first character of the last match of the pattern in\nthis string slice.\n\nReturns [`None`] if the pattern doesn't match.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nlet s = \"Löwe 老虎 Léopard Gepardi\";\n\nassert_eq!(s.rfind('L'), Some(13));\nassert_eq!(s.rfind('é'), Some(14));\nassert_eq!(s.rfind(\"pard\"), Some(24));\n```\n\nMore complex patterns with closures:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\n\nassert_eq!(s.rfind(char::is_whitespace), Some(12));\nassert_eq!(s.rfind(char::is_lowercase), Some(20));\n```\n\nNot finding the pattern:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\nlet x: &[_] = &['1', '2'];\n\nassert_eq!(s.rfind(x), None);\n```","links":{"`None`":"2:41931:197","prim@char":"1:12034:448","self::pattern":"2:12415:3806"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:41929:200","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12420:15641","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12420:15641","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12435:15642","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12821:27531":{"id":"2:12821:27531","crate_id":2,"name":"strip_prefix","span":null,"visibility":"public","docs":"Returns a string slice with the prefix removed.\n\nIf the string starts with the pattern `prefix`, returns substring after the prefix, wrapped\nin `Some`.  Unlike `trim_start_matches`, this method removes the prefix exactly once.\n\nIf the string does not start with `prefix`, returns `None`.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nassert_eq!(\"foo:bar\".strip_prefix(\"foo:\"), Some(\"bar\"));\nassert_eq!(\"foo:bar\".strip_prefix(\"bar\"), None);\nassert_eq!(\"foofoo\".strip_prefix(\"foo\"), Some(\"foo\"));\n```","links":{"prim@char":"1:12034:448","self::pattern":"2:12415:3806"},"attrs":["#[must_use =\n\"this returns the remaining substring as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["prefix",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:41929:200","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12420:15641","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:63:373":{"id":"0:63:373","crate_id":0,"name":"attr","span":{"filename":"src/internals/attr.rs","begin":[1,0],"end":[1878,1]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"module":{"is_crate":false,"items":["0:86-0:994:2054"],"is_stripped":false}}},"2:12746:32203":{"id":"2:12746:32203","crate_id":2,"name":"split_whitespace","span":null,"visibility":"public","docs":"Splits a string slice by whitespace.\n\nThe iterator returned will return string slices that are sub-slices of\nthe original string slice, separated by any amount of whitespace.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`. If you only want to split on ASCII whitespace\ninstead, use [`split_ascii_whitespace`].\n\n[`split_ascii_whitespace`]: str::split_ascii_whitespace\n\n# Examples\n\nBasic usage:\n\n```\nlet mut iter = \"A few words\".split_whitespace();\n\nassert_eq!(Some(\"A\"), iter.next());\nassert_eq!(Some(\"few\"), iter.next());\nassert_eq!(Some(\"words\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nAll kinds of whitespace are considered:\n\n```\nlet mut iter = \" Mary   had\\ta\\u{2009}little  \\n\\t lamb\".split_whitespace();\nassert_eq!(Some(\"Mary\"), iter.next());\nassert_eq!(Some(\"had\"), iter.next());\nassert_eq!(Some(\"a\"), iter.next());\nassert_eq!(Some(\"little\"), iter.next());\nassert_eq!(Some(\"lamb\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nIf the string is empty or all whitespace, the iterator yields no string slices:\n```\nassert_eq!(\"\".split_whitespace().next(), None);\nassert_eq!(\"   \".split_whitespace().next(), None);\n```","links":{"str::split_ascii_whitespace":"2:12747:32215"},"attrs":["#[must_use =\n\"this returns the split string as an iterator, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_split_whitespace\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"SplitWhitespace","id":"2:44125:9681","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5549:2411":{"id":"5:5549:2411","crate_id":5,"name":"to_ascii_uppercase","span":null,"visibility":"public","docs":"Returns a copy of this string where each character is mapped to its\nASCII upper case equivalent.\n\nASCII letters 'a' to 'z' are mapped to 'A' to 'Z',\nbut non-ASCII letters are unchanged.\n\nTo uppercase the value in-place, use [`make_ascii_uppercase`].\n\nTo uppercase ASCII characters in addition to non-ASCII characters, use\n[`to_uppercase`].\n\n# Examples\n\n```\nlet s = \"Grüße, Jürgen ❤\";\n\nassert_eq!(\"GRüßE, JüRGEN ❤\", s.to_ascii_uppercase());\n```\n\n[`make_ascii_uppercase`]: str::make_ascii_uppercase\n[`to_uppercase`]: #method.to_uppercase","links":{"str::make_ascii_uppercase":"2:12841:29224"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use = \"to uppercase the value in-place, use `make_ascii_uppercase()`\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7529:249","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5530":{"id":"5:5530","crate_id":5,"name":null,"span":null,"visibility":"default","docs":"Methods for string slices.","links":{},"attrs":["#[cfg(not(test))]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"primitive":"str"},"items":["5:5531:35240","5:5532:2210","5:5535:35241","5:5538:35242","5:5546:35243","5:5547:35244","5:5548:3471","5:5549:2411","5:5550:2410"],"negative":false,"synthetic":false,"blanket_impl":null}}},"2:12733:30688":{"id":"2:12733:30688","crate_id":2,"name":"get_mut","span":null,"visibility":"public","docs":"Returns a mutable subslice of `str`.\n\nThis is the non-panicking alternative to indexing the `str`. Returns\n[`None`] whenever equivalent indexing operation would panic.\n\n# Examples\n\n```\nlet mut v = String::from(\"hello\");\n// correct length\nassert!(v.get_mut(0..5).is_some());\n// out of bounds\nassert!(v.get_mut(..42).is_none());\nassert_eq!(Some(\"he\"), v.get_mut(0..2).map(|v| &*v));\n\nassert_eq!(\"hello\", v);\n{\n    let s = v.get_mut(0..2);\n    let s = s.map(|s| {\n        s.make_ascii_uppercase();\n        &*s\n    });\n    assert_eq!(Some(\"HE\"), s);\n}\nassert_eq!(\"HEllo\", v);\n```","links":{"`None`":"2:41931:197"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"resolved_path":{"name":"Option","id":"2:41929:200","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"2:10500:245","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"2:10500:245","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12760:2732":{"id":"2:12760:2732","crate_id":2,"name":"find","span":null,"visibility":"public","docs":"Returns the byte index of the first character of this string slice that\nmatches the pattern.\n\nReturns [`None`] if the pattern doesn't match.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nlet s = \"Löwe 老虎 Léopard Gepardi\";\n\nassert_eq!(s.find('L'), Some(0));\nassert_eq!(s.find('é'), Some(14));\nassert_eq!(s.find(\"pard\"), Some(17));\n```\n\nMore complex patterns using point-free style and closures:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\n\nassert_eq!(s.find(char::is_whitespace), Some(5));\nassert_eq!(s.find(char::is_lowercase), Some(1));\nassert_eq!(s.find(|c: char| c.is_whitespace() || c.is_lowercase()), Some(1));\nassert_eq!(s.find(|c: char| (c < 'o') && (c > 'a')), Some(4));\n```\n\nNot finding the pattern:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\nlet x: &[_] = &['1', '2'];\n\nassert_eq!(s.find(x), None);\n```","links":{"`None`":"2:41931:197","prim@char":"1:12034:448","self::pattern":"2:12415:3806"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:41929:200","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12420:15641","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12777:34569":{"id":"2:12777:34569","crate_id":2,"name":"split_terminator","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by\ncharacters matched by a pattern.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\nEquivalent to [`split`], except that the trailing substring\nis skipped if empty.\n\n[`split`]: str::split\n\nThis method can be used for string data that is _terminated_,\nrather than _separated_ by a pattern.\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rsplit_terminator`] method can be used.\n\n[`rsplit_terminator`]: str::rsplit_terminator\n\n# Examples\n\n```\nlet v: Vec<&str> = \"A.B.\".split_terminator('.').collect();\nassert_eq!(v, [\"A\", \"B\"]);\n\nlet v: Vec<&str> = \"A..B..\".split_terminator(\".\").collect();\nassert_eq!(v, [\"A\", \"\", \"B\", \"\"]);\n\nlet v: Vec<&str> = \"A.B:C.D\".split_terminator(&['.', ':'][..]).collect();\nassert_eq!(v, [\"A\", \"B\", \"C\", \"D\"]);\n```","links":{"self::pattern":"2:12415:3806","str::split":"2:12768:27281","prim@char":"1:12034:448","`DoubleEndedIterator`":"2:7785:127","str::rsplit_terminator":"2:12780:34570"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"SplitTerminator","id":"2:43901:9668","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12420:15641","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12747:32215":{"id":"2:12747:32215","crate_id":2,"name":"split_ascii_whitespace","span":null,"visibility":"public","docs":"Splits a string slice by ASCII whitespace.\n\nThe iterator returned will return string slices that are sub-slices of\nthe original string slice, separated by any amount of ASCII whitespace.\n\nTo split by Unicode `Whitespace` instead, use [`split_whitespace`].\n\n[`split_whitespace`]: str::split_whitespace\n\n# Examples\n\nBasic usage:\n\n```\nlet mut iter = \"A few words\".split_ascii_whitespace();\n\nassert_eq!(Some(\"A\"), iter.next());\nassert_eq!(Some(\"few\"), iter.next());\nassert_eq!(Some(\"words\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nAll kinds of ASCII whitespace are considered:\n\n```\nlet mut iter = \" Mary   had\\ta little  \\n\\t lamb\".split_ascii_whitespace();\nassert_eq!(Some(\"Mary\"), iter.next());\nassert_eq!(Some(\"had\"), iter.next());\nassert_eq!(Some(\"a\"), iter.next());\nassert_eq!(Some(\"little\"), iter.next());\nassert_eq!(Some(\"lamb\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nIf the string is empty or all ASCII whitespace, the iterator yields no string slices:\n```\nassert_eq!(\"\".split_ascii_whitespace().next(), None);\nassert_eq!(\"   \".split_ascii_whitespace().next(), None);\n```","links":{"str::split_whitespace":"2:12746:32203"},"attrs":["#[must_use =\n\"this returns the split string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"SplitAsciiWhitespace","id":"2:44134:9682","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12809:34575":{"id":"2:12809:34575","crate_id":2,"name":"trim_start","span":null,"visibility":"public","docs":"Returns a string slice with leading whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Text directionality\n\nA string is a sequence of bytes. `start` in this context means the first\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be left side, and for right-to-left languages like\nArabic or Hebrew, this will be the right side.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\nassert_eq!(\"Hello\\tworld\\t\\n\", s.trim_start());\n```\n\nDirectionality:\n\n```\nlet s = \"  English  \";\nassert!(Some('E') == s.trim_start().chars().next());\n\nlet s = \"  עברית  \";\nassert!(Some('ע') == s.trim_start().chars().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_trim_start\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12783:30725":{"id":"2:12783:30725","crate_id":2,"name":"splitn","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by a\npattern, restricted to returning at most `n` items.\n\nIf `n` substrings are returned, the last substring (the `n`th substring)\nwill contain the remainder of the string.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will not be double ended, because it is\nnot efficient to support.\n\nIf the pattern allows a reverse search, the [`rsplitn`] method can be\nused.\n\n[`rsplitn`]: str::rsplitn\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lambda\".splitn(3, ' ').collect();\nassert_eq!(v, [\"Mary\", \"had\", \"a little lambda\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".splitn(3, \"X\").collect();\nassert_eq!(v, [\"lion\", \"\", \"tigerXleopard\"]);\n\nlet v: Vec<&str> = \"abcXdef\".splitn(1, 'X').collect();\nassert_eq!(v, [\"abcXdef\"]);\n\nlet v: Vec<&str> = \"\".splitn(1, 'X').collect();\nassert_eq!(v, [\"\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".splitn(2, |c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"abc\", \"defXghi\"]);\n```","links":{"prim@char":"1:12034:448","self::pattern":"2:12415:3806","str::rsplitn":"2:12786:30727"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["n",{"primitive":"usize"}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"SplitN","id":"2:43955:9671","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12420:15641","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12804:34573":{"id":"2:12804:34573","crate_id":2,"name":"rmatch_indices","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within `self`,\nyielded in reverse order along with the index of the match.\n\nFor matches of `pat` within `self` that overlap, only the indices\ncorresponding to the last match are returned.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`match_indices`] method can be used.\n\n[`match_indices`]: str::match_indices\n\n# Examples\n\n```\nlet v: Vec<_> = \"abcXXXabcYYYabc\".rmatch_indices(\"abc\").collect();\nassert_eq!(v, [(12, \"abc\"), (6, \"abc\"), (0, \"abc\")]);\n\nlet v: Vec<_> = \"1abcabc2\".rmatch_indices(\"abc\").collect();\nassert_eq!(v, [(4, \"abc\"), (1, \"abc\")]);\n\nlet v: Vec<_> = \"ababa\".rmatch_indices(\"aba\").collect();\nassert_eq!(v, [(2, \"aba\")]); // only the last `aba`\n```","links":{"self::pattern":"2:12415:3806","`DoubleEndedIterator`":"2:7785:127","prim@char":"1:12034:448","str::match_indices":"2:12801:34572"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RMatchIndices","id":"2:44019:9675","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12420:15641","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12420:15641","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12435:15642","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5547:35244":{"id":"5:5547:35244","crate_id":5,"name":"into_string","span":null,"visibility":"public","docs":"Converts a [`Box<str>`] into a [`String`] without copying or allocating.\n\n# Examples\n\n```\nlet string = String::from(\"birthday gift\");\nlet boxed_str = string.clone().into_boxed_str();\n\nassert_eq!(boxed_str.into_string(), string);\n```","links":{"`Box<str>`":"5:276:2024","`String`":"5:7529:249"},"attrs":["#[must_use = \"`self` will be dropped if the result is not used\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"resolved_path":{"name":"Box","id":"5:276:2024","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}]],"output":{"resolved_path":{"name":"String","id":"5:7529:249","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12839:31855":{"id":"2:12839:31855","crate_id":2,"name":"as_ascii","span":null,"visibility":"public","docs":"If this string slice [`is_ascii`](Self::is_ascii), returns it as a slice\nof [ASCII characters](`ascii::Char`), otherwise returns `None`.","links":{"`ascii::Char`":"2:39878:31851","Self::is_ascii":"2:12838:29221"},"attrs":["#[unstable(feature = \"ascii_char\", issue = \"110998\")]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Option","id":"2:41929:200","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"resolved_path":{"name":"AsciiChar","id":"2:39878:31851","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12750:32517":{"id":"2:12750:32517","crate_id":2,"name":"encode_utf16","span":null,"visibility":"public","docs":"Returns an iterator of `u16` over the string encoded as UTF-16.\n\n# Examples\n\n```\nlet text = \"Zażółć gęślą jaźń\";\n\nlet utf8_len = text.len();\nlet utf16_len = text.encode_utf16().count();\n\nassert!(utf16_len <= utf8_len);\n```","links":{},"attrs":["#[must_use =\n\"this returns the encoded string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EncodeUtf16","id":"2:44143:9683","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12745:9583":{"id":"2:12745:9583","crate_id":2,"name":"bytes","span":null,"visibility":"public","docs":"An iterator over the bytes of a string slice.\n\nAs a string slice consists of a sequence of bytes, we can iterate\nthrough a string slice by byte. This method returns such an iterator.\n\n# Examples\n\n```\nlet mut bytes = \"bors\".bytes();\n\nassert_eq!(Some(b'b'), bytes.next());\nassert_eq!(Some(b'o'), bytes.next());\nassert_eq!(Some(b'r'), bytes.next());\nassert_eq!(Some(b's'), bytes.next());\n\nassert_eq!(None, bytes.next());\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Bytes","id":"2:43837:2952","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12757:30323":{"id":"2:12757:30323","crate_id":2,"name":"ends_with","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a suffix of this\nstring slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.ends_with(\"anas\"));\nassert!(!bananas.ends_with(\"nana\"));\n```","links":{"prim@char":"1:12034:448","self::pattern":"2:12415:3806"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12420:15641","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12420:15641","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12435:15642","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:964:1826":{"id":"0:964:1826","crate_id":0,"name":"Serialize","span":{"filename":"src/lib.rs","begin":[89,0],"end":[94,1]},"visibility":"public","docs":null,"links":{},"attrs":["#[proc_macro_derive(Serialize, attributes(serde))]"],"deprecation":null,"inner":{"proc_macro":{"kind":"derive","helpers":["serde"]}}},"0:965:1834":{"id":"0:965:1834","crate_id":0,"name":"Deserialize","span":{"filename":"src/lib.rs","begin":[97,0],"end":[102,1]},"visibility":"public","docs":null,"links":{},"attrs":["#[proc_macro_derive(Deserialize, attributes(serde))]"],"deprecation":null,"inner":{"proc_macro":{"kind":"derive","helpers":["serde"]}}},"5:5546:35243":{"id":"5:5546:35243","crate_id":5,"name":"to_uppercase","span":null,"visibility":"public","docs":"Returns the uppercase equivalent of this string slice, as a new [`String`].\n\n'Uppercase' is defined according to the terms of the Unicode Derived Core Property\n`Uppercase`.\n\nSince some characters can expand into multiple characters when changing\nthe case, this function returns a [`String`] instead of modifying the\nparameter in-place.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"hello\";\n\nassert_eq!(\"HELLO\", s.to_uppercase());\n```\n\nScripts without case are not changed:\n\n```\nlet new_year = \"农历新年\";\n\nassert_eq!(new_year, new_year.to_uppercase());\n```\n\nOne character can become multiple:\n```\nlet s = \"tschüß\";\n\nassert_eq!(\"TSCHÜSS\", s.to_uppercase());\n```","links":{"`String`":"5:7529:249"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the uppercase string as a new String, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7529:249","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12846:34584":{"id":"2:12846:34584","crate_id":2,"name":"escape_unicode","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_unicode`].\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"❤\\n!\".escape_unicode() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"❤\\n!\".escape_unicode());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"\\\\u{{2764}}\\\\u{{a}}\\\\u{{21}}\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"❤\\n!\".escape_unicode().to_string(), \"\\\\u{2764}\\\\u{a}\\\\u{21}\");\n```","links":{"`char::escape_unicode`":"2:4613:34584"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EscapeUnicode","id":"2:44168:9625","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12729:339":{"id":"2:12729:339","crate_id":2,"name":"as_ptr","span":null,"visibility":"public","docs":"Converts a string slice to a raw pointer.\n\nAs string slices are a slice of bytes, the raw pointer points to a\n[`u8`]. This pointer will be pointing to the first byte of the string\nslice.\n\nThe caller must ensure that the returned pointer is never written to.\nIf you need to mutate the contents of the string slice, use [`as_mut_ptr`].\n\n[`as_mut_ptr`]: str::as_mut_ptr\n\n# Examples\n\n```\nlet s = \"Hello\";\nlet ptr = s.as_ptr();\n```","links":{"str::as_mut_ptr":"2:12730:30691","`u8`":"1:12051:1636"},"attrs":["#[rustc_never_returns_null_ptr]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"raw_pointer":{"mutable":false,"type":{"primitive":"u8"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12814:34578":{"id":"2:12814:34578","crate_id":2,"name":"trim_right","span":null,"visibility":"public","docs":"Returns a string slice with trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`.\n\n# Text directionality\n\nA string is a sequence of bytes. 'Right' in this context means the last\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _left_ side, not the right.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \" Hello\\tworld\\t\";\n\nassert_eq!(\" Hello\\tworld\", s.trim_right());\n```\n\nDirectionality:\n\n```\nlet s = \"English  \";\nassert!(Some('h') == s.trim_right().chars().rev().next());\n\nlet s = \"עברית  \";\nassert!(Some('ת') == s.trim_right().chars().rev().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_end`\", suggestion =\n\"trim_end\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_end`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12727:2942":{"id":"2:12727:2942","crate_id":2,"name":"as_bytes","span":null,"visibility":"public","docs":"Converts a string slice to a byte slice. To convert the byte slice back\ninto a string slice, use the [`from_utf8`] function.\n\n# Examples\n\n```\nlet bytes = \"bors\".as_bytes();\nassert_eq!(b\"bors\", bytes);\n```","links":{"`from_utf8`":"2:11970:15644"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"primitive":"u8"}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12824:30731":{"id":"2:12824:30731","crate_id":2,"name":"strip_suffix","span":null,"visibility":"public","docs":"Returns a string slice with the suffix removed.\n\nIf the string ends with the pattern `suffix`, returns the substring before the suffix,\nwrapped in `Some`.  Unlike `trim_end_matches`, this method removes the suffix exactly once.\n\nIf the string does not end with `suffix`, returns `None`.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nassert_eq!(\"bar:foo\".strip_suffix(\":foo\"), Some(\"bar\"));\nassert_eq!(\"bar:foo\".strip_suffix(\"bar\"), None);\nassert_eq!(\"foofoo\".strip_suffix(\"foo\"), Some(\"foo\"));\n```","links":{"prim@char":"1:12034:448","self::pattern":"2:12415:3806"},"attrs":["#[must_use =\n\"this returns the remaining substring as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["suffix",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:41929:200","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12420:15641","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12420:15641","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12435:15642","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12719:867":{"id":"2:12719:867","crate_id":2,"name":"len","span":null,"visibility":"public","docs":"Returns the length of `self`.\n\nThis length is in bytes, not [`char`]s or graphemes. In other words,\nit might not be what a human considers the length of the string.\n\n[`char`]: prim@char\n\n# Examples\n\n```\nlet len = \"foo\".len();\nassert_eq!(3, len);\n\nassert_eq!(\"ƒoo\".len(), 4); // fancy f!\nassert_eq!(\"ƒoo\".chars().count(), 3);\n```","links":{"prim@char":"1:12034:448"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12840:29223":{"id":"2:12840:29223","crate_id":2,"name":"eq_ignore_ascii_case","span":null,"visibility":"public","docs":"Checks that two strings are an ASCII case-insensitive match.\n\nSame as `to_ascii_lowercase(a) == to_ascii_lowercase(b)`,\nbut without allocating and copying temporaries.\n\n# Examples\n\n```\nassert!(\"Ferris\".eq_ignore_ascii_case(\"FERRIS\"));\nassert!(\"Ferrös\".eq_ignore_ascii_case(\"FERRöS\"));\nassert!(!\"Ferrös\".eq_ignore_ascii_case(\"FERRÖS\"));\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["other",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12815:34579":{"id":"2:12815:34579","crate_id":2,"name":"trim_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes and suffixes that match a\npattern repeatedly removed.\n\nThe [pattern] can be a [`char`], a slice of [`char`]s, or a function\nor closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_matches('1'), \"foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_matches(char::is_numeric), \"foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_matches(x), \"foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1foo1barXX\".trim_matches(|c| c == '1' || c == 'X'), \"foo1bar\");\n```","links":{"prim@char":"1:12034:448","self::pattern":"2:12415:3806"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12420:15641","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12420:15641","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"DoubleEndedSearcher","id":"2:12440:15640","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12833:34582":{"id":"2:12833:34582","crate_id":2,"name":"trim_right_matches","span":null,"visibility":"public","docs":"Returns a string slice with all suffixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. 'Right' in this context means the last\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _left_ side, not the right.\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_right_matches('1'), \"11foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_right_matches(char::is_numeric), \"123foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_right_matches(x), \"12foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1fooX\".trim_right_matches(|c| c == '1' || c == 'X'), \"1foo\");\n```","links":{"prim@char":"1:12034:448","self::pattern":"2:12415:3806"},"attrs":["#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_end_matches`\",\nsuggestion = \"trim_end_matches\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_end_matches`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12420:15641","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12420:15641","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12435:15642","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:0:1837":{"id":"0:0:1837","crate_id":0,"name":"serde_derive","span":{"filename":"src/lib.rs","begin":[1,0],"end":[102,1]},"visibility":"public","docs":"This crate provides Serde's two derive macros.\n\n```edition2021\n# use serde_derive::{Deserialize, Serialize};\n#\n#[derive(Serialize, Deserialize)]\n# struct S;\n#\n# fn main() {}\n```\n\nPlease refer to [https://serde.rs/derive.html] for how to set this up.\n\n[https://serde.rs/derive.html]: https://serde.rs/derive.html","links":{},"attrs":["#![doc(html_root_url = \"https://docs.rs/serde_derive/1.0.193\")]","#![allow(clippy :: branches_sharing_code, clippy :: cognitive_complexity,\nclippy :: collapsible_match, clippy :: derive_partial_eq_without_eq, clippy ::\nenum_variant_names, clippy :: manual_map, clippy :: match_like_matches_macro,\nclippy :: needless_pass_by_value, clippy :: too_many_arguments, clippy ::\ntrivially_copy_pass_by_ref, clippy :: used_underscore_binding, clippy ::\nwildcard_in_or_patterns, clippy :: unnested_or_patterns,)]","#![allow(clippy :: cast_possible_truncation, clippy :: checked_conversions,\nclippy :: doc_markdown, clippy :: enum_glob_use, clippy :: indexing_slicing,\nclippy :: items_after_statements, clippy :: let_underscore_untyped, clippy ::\nmanual_assert, clippy :: map_err_ignore, clippy :: match_same_arms, clippy ::\nmatch_wildcard_for_single_variants, clippy :: module_name_repetitions, clippy\n:: must_use_candidate, clippy :: option_if_let_else, clippy :: similar_names,\nclippy :: single_match_else, clippy :: struct_excessive_bools, clippy ::\ntoo_many_lines, clippy :: unseparated_literal_suffix, clippy :: unused_self,\nclippy :: use_self, clippy :: wildcard_imports)]"],"deprecation":null,"inner":{"module":{"is_crate":true,"items":["0:964:1826","0:965:1834"],"is_stripped":false}}},"2:12740:34567":{"id":"2:12740:34567","crate_id":2,"name":"slice_mut_unchecked","span":null,"visibility":"public","docs":"Creates a string slice from another string slice, bypassing safety\nchecks.\nThis is generally not recommended, use with caution! For a safe\nalternative see [`str`] and [`IndexMut`].\n\n[`IndexMut`]: crate::ops::IndexMut\n\nThis new slice goes from `begin` to `end`, including `begin` but\nexcluding `end`.\n\nTo get an immutable string slice instead, see the\n[`slice_unchecked`] method.\n\n[`slice_unchecked`]: str::slice_unchecked\n\n# Safety\n\nCallers of this function are responsible that three preconditions are\nsatisfied:\n\n* `begin` must not exceed `end`.\n* `begin` and `end` must be byte positions within the string slice.\n* `begin` and `end` must lie on UTF-8 sequence boundaries.","links":{"`str`":"1:12040:1531","crate::ops::IndexMut":"2:3116:3413","str::slice_unchecked":"2:12739:34566"},"attrs":["#[deprecated(since = \"1.29.0\", note =\n\"use `get_unchecked_mut(begin..end)` instead\")]"],"deprecation":{"since":"1.29.0","note":"use `get_unchecked_mut(begin..end)` instead"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["begin",{"primitive":"usize"}],["end",{"primitive":"usize"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"2:12748:27282":{"id":"2:12748:27282","crate_id":2,"name":"lines","span":null,"visibility":"public","docs":"An iterator over the lines of a string, as string slices.\n\nLines are split at line endings that are either newlines (`\\n`) or\nsequences of a carriage return followed by a line feed (`\\r\\n`).\n\nLine terminators are not included in the lines returned by the iterator.\n\nNote that any carriage return (`\\r`) not immediately followed by a\nline feed (`\\n`) does not split a line. These carriage returns are\nthereby included in the produced lines.\n\nThe final line ending is optional. A string that ends with a final line\nending will return the same lines as an otherwise identical string\nwithout a final line ending.\n\n# Examples\n\nBasic usage:\n\n```\nlet text = \"foo\\r\\nbar\\n\\nbaz\\r\";\nlet mut lines = text.lines();\n\nassert_eq!(Some(\"foo\"), lines.next());\nassert_eq!(Some(\"bar\"), lines.next());\nassert_eq!(Some(\"\"), lines.next());\n// Trailing carriage return is included in the last line\nassert_eq!(Some(\"baz\\r\"), lines.next());\n\nassert_eq!(None, lines.next());\n```\n\nThe final line does not require any ending:\n\n```\nlet text = \"foo\\nbar\\n\\r\\nbaz\";\nlet mut lines = text.lines();\n\nassert_eq!(Some(\"foo\"), lines.next());\nassert_eq!(Some(\"bar\"), lines.next());\nassert_eq!(Some(\"\"), lines.next());\nassert_eq!(Some(\"baz\"), lines.next());\n\nassert_eq!(None, lines.next());\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Lines","id":"2:44105:9679","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12735:30689":{"id":"2:12735:30689","crate_id":2,"name":"get_unchecked","span":null,"visibility":"public","docs":"Returns an unchecked subslice of `str`.\n\nThis is the unchecked alternative to indexing the `str`.\n\n# Safety\n\nCallers of this function are responsible that these preconditions are\nsatisfied:\n\n* The starting index must not exceed the ending index;\n* Indexes must be within bounds of the original slice;\n* Indexes must lie on UTF-8 sequence boundaries.\n\nFailing that, the returned string slice may reference invalid memory or\nviolate the invariants communicated by the `str` type.\n\n# Examples\n\n```\nlet v = \"🗻∈🌏\";\nunsafe {\n    assert_eq!(\"🗻\", v.get_unchecked(0..4));\n    assert_eq!(\"∈\", v.get_unchecked(4..7));\n    assert_eq!(\"🌏\", v.get_unchecked(7..11));\n}\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"2:10500:245","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"2:10500:245","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"2:12720:2180":{"id":"2:12720:2180","crate_id":2,"name":"is_empty","span":null,"visibility":"public","docs":"Returns `true` if `self` has a length of zero bytes.\n\n# Examples\n\n```\nlet s = \"\";\nassert!(s.is_empty());\n\nlet s = \"not empty\";\nassert!(!s.is_empty());\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5532:2210":{"id":"5:5532:2210","crate_id":5,"name":"replace","span":null,"visibility":"public","docs":"Replaces all matches of a pattern with another string.\n\n`replace` creates a new [`String`], and copies the data from this string slice into it.\nWhile doing so, it attempts to find matches of a pattern. If it finds any, it\nreplaces them with the replacement string slice.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"this is old\";\n\nassert_eq!(\"this is new\", s.replace(\"old\", \"new\"));\nassert_eq!(\"than an old\", s.replace(\"is\", \"an\"));\n```\n\nWhen the pattern doesn't match, it returns this string slice as [`String`]:\n\n```\nlet s = \"this is old\";\nassert_eq!(s, s.replace(\"cookie monster\", \"little lamb\"));\n```","links":{"`String`":"5:7529:249"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the replaced string as a new allocation, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["from",{"generic":"P"}],["to",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7529:249","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12420:15641","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12722:34563":{"id":"2:12722:34563","crate_id":2,"name":"floor_char_boundary","span":null,"visibility":"public","docs":"Finds the closest `x` not exceeding `index` where `is_char_boundary(x)` is `true`.\n\nThis method can help you truncate a string so that it's still valid UTF-8, but doesn't\nexceed a given number of bytes. Note that this is done purely at the character level\nand can still visually split graphemes, even though the underlying characters aren't\nsplit. For example, the emoji 🧑‍🔬 (scientist) could be split so that the string only\nincludes 🧑 (person) instead.\n\n# Examples\n\n```\n#![feature(round_char_boundary)]\nlet s = \"❤️🧡💛💚💙💜\";\nassert_eq!(s.len(), 26);\nassert!(!s.is_char_boundary(13));\n\nlet closest = s.floor_char_boundary(13);\nassert_eq!(closest, 10);\nassert_eq!(&s[..closest], \"❤️🧡\");\n```","links":{},"attrs":["#[unstable(feature = \"round_char_boundary\", issue = \"93743\")]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["index",{"primitive":"usize"}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:86-0:994:2054":{"id":"0:86-0:994:2054","crate_id":0,"name":null,"span":{"filename":"src/internals/attr.rs","begin":[21,0],"end":[21,43]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"import":{"source":"crate::internals::case::RenameRule","name":"RenameRule","id":"0:994:2054","glob":false}}},"2:12807:34574":{"id":"2:12807:34574","crate_id":2,"name":"trim","span":null,"visibility":"public","docs":"Returns a string slice with leading and trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Examples\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\n\nassert_eq!(\"Hello\\tworld\", s.trim());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a slice, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_trim\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12749:34568":{"id":"2:12749:34568","crate_id":2,"name":"lines_any","span":null,"visibility":"public","docs":"An iterator over the lines of a string.","links":{},"attrs":["#[deprecated(since = \"1.4.0\", note = \"use lines() instead now\", suggestion =\n\"lines\")]"],"deprecation":{"since":"1.4.0","note":"use lines() instead now"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"LinesAny","id":"2:44115:9680","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5535:35241":{"id":"5:5535:35241","crate_id":5,"name":"replacen","span":null,"visibility":"public","docs":"Replaces first N matches of a pattern with another string.\n\n`replacen` creates a new [`String`], and copies the data from this string slice into it.\nWhile doing so, it attempts to find matches of a pattern. If it finds any, it\nreplaces them with the replacement string slice at most `count` times.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"foo foo 123 foo\";\nassert_eq!(\"new new 123 foo\", s.replacen(\"foo\", \"new\", 2));\nassert_eq!(\"faa fao 123 foo\", s.replacen('o', \"a\", 3));\nassert_eq!(\"foo foo new23 foo\", s.replacen(char::is_numeric, \"new\", 1));\n```\n\nWhen the pattern doesn't match, it returns this string slice as [`String`]:\n\n```\nlet s = \"this is old\";\nassert_eq!(s, s.replacen(\"cookie monster\", \"little lamb\", 10));\n```","links":{"`String`":"5:7529:249"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the replaced string as a new allocation, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}],["to",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}],["count",{"primitive":"usize"}]],"output":{"resolved_path":{"name":"String","id":"5:7529:249","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12420:15641","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12743:2420":{"id":"2:12743:2420","crate_id":2,"name":"chars","span":null,"visibility":"public","docs":"Returns an iterator over the [`char`]s of a string slice.\n\nAs a string slice consists of valid UTF-8, we can iterate through a\nstring slice by [`char`]. This method returns such an iterator.\n\nIt's important to remember that [`char`] represents a Unicode Scalar\nValue, and might not match your idea of what a 'character' is. Iteration\nover grapheme clusters may be what you actually want. This functionality\nis not provided by Rust's standard library, check crates.io instead.\n\n# Examples\n\nBasic usage:\n\n```\nlet word = \"goodbye\";\n\nlet count = word.chars().count();\nassert_eq!(7, count);\n\nlet mut chars = word.chars();\n\nassert_eq!(Some('g'), chars.next());\nassert_eq!(Some('o'), chars.next());\nassert_eq!(Some('o'), chars.next());\nassert_eq!(Some('d'), chars.next());\nassert_eq!(Some('b'), chars.next());\nassert_eq!(Some('y'), chars.next());\nassert_eq!(Some('e'), chars.next());\n\nassert_eq!(None, chars.next());\n```\n\nRemember, [`char`]s might not match your intuition about characters:\n\n[`char`]: prim@char\n\n```\nlet y = \"y̆\";\n\nlet mut chars = y.chars();\n\nassert_eq!(Some('y'), chars.next()); // not 'y̆'\nassert_eq!(Some('\\u{0306}'), chars.next());\n\nassert_eq!(None, chars.next());\n```","links":{"prim@char":"1:12034:448"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Chars","id":"2:43821:9662","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12795:2176":{"id":"2:12795:2176","crate_id":2,"name":"matches","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within the given string\nslice.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rmatches`] method can be used.\n\n[`rmatches`]: str::rmatches\n\n# Examples\n\n```\nlet v: Vec<&str> = \"abcXXXabcYYYabc\".matches(\"abc\").collect();\nassert_eq!(v, [\"abc\", \"abc\", \"abc\"]);\n\nlet v: Vec<&str> = \"1abc2abc3\".matches(char::is_numeric).collect();\nassert_eq!(v, [\"1\", \"2\", \"3\"]);\n```","links":{"self::pattern":"2:12415:3806","`DoubleEndedIterator`":"2:7785:127","prim@char":"1:12034:448","str::rmatches":"2:12798:34571"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Matches","id":"2:44055:9677","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12420:15641","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12731:2069":{"id":"2:12731:2069","crate_id":2,"name":"get","span":null,"visibility":"public","docs":"Returns a subslice of `str`.\n\nThis is the non-panicking alternative to indexing the `str`. Returns\n[`None`] whenever equivalent indexing operation would panic.\n\n# Examples\n\n```\nlet v = String::from(\"🗻∈🌏\");\n\nassert_eq!(Some(\"🗻\"), v.get(0..4));\n\n// indices not on UTF-8 sequence boundaries\nassert!(v.get(1..).is_none());\nassert!(v.get(..8).is_none());\n\n// out of bounds\nassert!(v.get(..42).is_none());\n```","links":{"`None`":"2:41931:197"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"resolved_path":{"name":"Option","id":"2:41929:200","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"2:10500:245","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"2:10500:245","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12737:30690":{"id":"2:12737:30690","crate_id":2,"name":"get_unchecked_mut","span":null,"visibility":"public","docs":"Returns a mutable, unchecked subslice of `str`.\n\nThis is the unchecked alternative to indexing the `str`.\n\n# Safety\n\nCallers of this function are responsible that these preconditions are\nsatisfied:\n\n* The starting index must not exceed the ending index;\n* Indexes must be within bounds of the original slice;\n* Indexes must lie on UTF-8 sequence boundaries.\n\nFailing that, the returned string slice may reference invalid memory or\nviolate the invariants communicated by the `str` type.\n\n# Examples\n\n```\nlet mut v = String::from(\"🗻∈🌏\");\nunsafe {\n    assert_eq!(\"🗻\", v.get_unchecked_mut(0..4));\n    assert_eq!(\"∈\", v.get_unchecked_mut(4..7));\n    assert_eq!(\"🌏\", v.get_unchecked_mut(7..11));\n}\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"2:10500:245","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"2:10500:245","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"2:12780:34570":{"id":"2:12780:34570","crate_id":2,"name":"rsplit_terminator","span":null,"visibility":"public","docs":"An iterator over substrings of `self`, separated by characters\nmatched by a pattern and yielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\nEquivalent to [`split`], except that the trailing substring is\nskipped if empty.\n\n[`split`]: str::split\n\nThis method can be used for string data that is _terminated_,\nrather than _separated_ by a pattern.\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a\nreverse search, and it will be double ended if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`split_terminator`] method can be\nused.\n\n[`split_terminator`]: str::split_terminator\n\n# Examples\n\n```\nlet v: Vec<&str> = \"A.B.\".rsplit_terminator('.').collect();\nassert_eq!(v, [\"B\", \"A\"]);\n\nlet v: Vec<&str> = \"A..B..\".rsplit_terminator(\".\").collect();\nassert_eq!(v, [\"\", \"B\", \"\", \"A\"]);\n\nlet v: Vec<&str> = \"A.B:C.D\".rsplit_terminator(&['.', ':'][..]).collect();\nassert_eq!(v, [\"D\", \"C\", \"B\", \"A\"]);\n```","links":{"self::pattern":"2:12415:3806","str::split":"2:12768:27281","prim@char":"1:12034:448","str::split_terminator":"2:12777:34569"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RSplitTerminator","id":"2:43919:9669","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12420:15641","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12420:15641","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12435:15642","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12721:34562":{"id":"2:12721:34562","crate_id":2,"name":"is_char_boundary","span":null,"visibility":"public","docs":"Checks that `index`-th byte is the first byte in a UTF-8 code point\nsequence or the end of the string.\n\nThe start and end of the string (when `index == self.len()`) are\nconsidered to be boundaries.\n\nReturns `false` if `index` is greater than `self.len()`.\n\n# Examples\n\n```\nlet s = \"Löwe 老虎 Léopard\";\nassert!(s.is_char_boundary(0));\n// start of `老`\nassert!(s.is_char_boundary(6));\nassert!(s.is_char_boundary(s.len()));\n\n// second byte of `ö`\nassert!(!s.is_char_boundary(2));\n\n// third byte of `老`\nassert!(!s.is_char_boundary(8));\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["index",{"primitive":"usize"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12841:29224":{"id":"2:12841:29224","crate_id":2,"name":"make_ascii_uppercase","span":null,"visibility":"public","docs":"Converts this string to its ASCII upper case equivalent in-place.\n\nASCII letters 'a' to 'z' are mapped to 'A' to 'Z',\nbut non-ASCII letters are unchanged.\n\nTo return a new uppercased value without modifying the existing one, use\n[`to_ascii_uppercase()`].\n\n[`to_ascii_uppercase()`]: #method.to_ascii_uppercase\n\n# Examples\n\n```\nlet mut s = String::from(\"Grüße, Jürgen ❤\");\n\ns.make_ascii_uppercase();\n\nassert_eq!(\"GRüßE, JüRGEN ❤\", s);\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12786:30727":{"id":"2:12786:30727","crate_id":2,"name":"rsplitn","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by a\npattern, starting from the end of the string, restricted to returning\nat most `n` items.\n\nIf `n` substrings are returned, the last substring (the `n`th substring)\nwill contain the remainder of the string.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will not be double ended, because it is not\nefficient to support.\n\nFor splitting from the front, the [`splitn`] method can be used.\n\n[`splitn`]: str::splitn\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".rsplitn(3, ' ').collect();\nassert_eq!(v, [\"lamb\", \"little\", \"Mary had a\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".rsplitn(3, 'X').collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"lionX\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".rsplitn(2, \"::\").collect();\nassert_eq!(v, [\"leopard\", \"lion::tiger\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".rsplitn(2, |c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"ghi\", \"abc1def\"]);\n```","links":{"prim@char":"1:12034:448","str::splitn":"2:12783:30725","self::pattern":"2:12415:3806"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["n",{"primitive":"usize"}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RSplitN","id":"2:43973:9672","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12420:15641","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12420:15641","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12435:15642","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12830:34581":{"id":"2:12830:34581","crate_id":2,"name":"trim_left_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. 'Left' in this context means the first\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _right_ side, not the left.\n\n# Examples\n\n```\nassert_eq!(\"11foo1bar11\".trim_left_matches('1'), \"foo1bar11\");\nassert_eq!(\"123foo1bar123\".trim_left_matches(char::is_numeric), \"foo1bar123\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_left_matches(x), \"foo1bar12\");\n```","links":{"prim@char":"1:12034:448","self::pattern":"2:12415:3806"},"attrs":["#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_start_matches`\",\nsuggestion = \"trim_start_matches\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_start_matches`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12420:15641","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5548:3471":{"id":"5:5548:3471","crate_id":5,"name":"repeat","span":null,"visibility":"public","docs":"Creates a new [`String`] by repeating a string `n` times.\n\n# Panics\n\nThis function will panic if the capacity would overflow.\n\n# Examples\n\nBasic usage:\n\n```\nassert_eq!(\"abc\".repeat(4), String::from(\"abcabcabcabc\"));\n```\n\nA panic upon overflow:\n\n```should_panic\n// this will panic at runtime\nlet huge = \"0123456789abcdef\".repeat(usize::MAX);\n```","links":{"`String`":"5:7529:249"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["n",{"primitive":"usize"}]],"output":{"resolved_path":{"name":"String","id":"5:7529:249","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:1023:2057":{"id":"0:1023:2057","crate_id":0,"name":"Symbol","span":{"filename":"src/internals/symbol.rs","begin":[5,0],"end":[5,32]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"struct":{"kind":{"tuple":[null]},"generics":{"params":[],"where_predicates":[]},"impls":[]}}},"2:12754:30321":{"id":"2:12754:30321","crate_id":2,"name":"starts_with","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a prefix of this\nstring slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.starts_with(\"bana\"));\nassert!(!bananas.starts_with(\"nana\"));\n```","links":{"prim@char":"1:12034:448","self::pattern":"2:12415:3806"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12420:15641","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12836:2049":{"id":"2:12836:2049","crate_id":2,"name":"parse","span":null,"visibility":"public","docs":"Parses this string slice into another type.\n\nBecause `parse` is so general, it can cause problems with type\ninference. As such, `parse` is one of the few times you'll see\nthe syntax affectionately known as the 'turbofish': `::<>`. This\nhelps the inference algorithm understand specifically which type\nyou're trying to parse into.\n\n`parse` can parse into any type that implements the [`FromStr`] trait.\n\n# Errors\n\nWill return [`Err`] if it's not possible to parse this string slice into\nthe desired type.\n\n[`Err`]: FromStr::Err\n\n# Examples\n\nBasic usage\n\n```\nlet four: u32 = \"4\".parse().unwrap();\n\nassert_eq!(4, four);\n```\n\nUsing the 'turbofish' instead of annotating `four`:\n\n```\nlet four = \"4\".parse::<u32>();\n\nassert_eq!(Ok(4), four);\n```\n\nFailing to parse:\n\n```\nlet nope = \"j\".parse::<u32>();\n\nassert!(nope.is_err());\n```","links":{"FromStr::Err":"2:12376:133","`FromStr`":"2:12375:3427"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Result","id":"2:42074:232","args":{"angle_bracketed":{"args":[{"type":{"generic":"F"}},{"type":{"qualified_path":{"name":"Err","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"F"},"trait":{"name":"FromStr","id":"2:12375:3427","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"F"},"bounds":[{"trait_bound":{"trait":{"name":"FromStr","id":"2:12375:3427","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12838:29221":{"id":"2:12838:29221","crate_id":2,"name":"is_ascii","span":null,"visibility":"public","docs":"Checks if all characters in this string are within the ASCII range.\n\n# Examples\n\n```\nlet ascii = \"hello!\\n\";\nlet non_ascii = \"Grüße, Jürgen ❤\";\n\nassert!(ascii.is_ascii());\nassert!(!non_ascii.is_ascii());\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12842:29225":{"id":"2:12842:29225","crate_id":2,"name":"make_ascii_lowercase","span":null,"visibility":"public","docs":"Converts this string to its ASCII lower case equivalent in-place.\n\nASCII letters 'A' to 'Z' are mapped to 'a' to 'z',\nbut non-ASCII letters are unchanged.\n\nTo return a new lowercased value without modifying the existing one, use\n[`to_ascii_lowercase()`].\n\n[`to_ascii_lowercase()`]: #method.to_ascii_lowercase\n\n# Examples\n\n```\nlet mut s = String::from(\"GRÜßE, JÜRGEN ❤\");\n\ns.make_ascii_lowercase();\n\nassert_eq!(\"grÜße, jÜrgen ❤\", s);\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}}},"paths":{"7:78:21481":{"crate_id":7,"path":["unwind","libunwind","_Unwind_Action"],"kind":"enum"},"2:22:726":{"crate_id":2,"path":["core","format_args"],"kind":"macro"},"1:2201:135":{"crate_id":1,"path":["std","fs","File"],"kind":"struct"},"17:10098:22610":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdat"],"kind":"struct"},"1:923:10204":{"crate_id":1,"path":["std","collections","hash","map","RawEntryBuilderMut"],"kind":"struct"},"16:5322:7418":{"crate_id":16,"path":["gimli","constants","DwOp"],"kind":"struct"},"17:14069:7176":{"crate_id":17,"path":["object","pe","ImageResourceDirectoryEntry"],"kind":"struct"},"2:42481:90":{"crate_id":2,"path":["core","sync","atomic","AtomicIsize"],"kind":"struct"},"2:39608:220":{"crate_id":2,"path":["core","ops","range","RangeInclusive"],"kind":"struct"},"24:4799:3328":{"crate_id":24,"path":["syn","expr","ExprBinary"],"kind":"struct"},"16:5712:9416":{"crate_id":16,"path":["gimli","read","cfi","BaseAddresses"],"kind":"struct"},"2:48160:9170":{"crate_id":2,"path":["core","core_arch","x86","__m128i"],"kind":"struct"},"24:4856:3341":{"crate_id":24,"path":["syn","expr","ExprInfer"],"kind":"struct"},"6:4968:8296":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_sndinfo"],"kind":"struct"},"6:4783:8201":{"crate_id":6,"path":["libc","unix","linux_like","linux","in6_pktinfo"],"kind":"struct"},"2:9498:10131":{"crate_id":2,"path":["core","fmt","builders","PadAdapterState"],"kind":"struct"},"1:7849:9725":{"crate_id":1,"path":["std","fs","OpenOptions"],"kind":"struct"},"2:43955:9671":{"crate_id":2,"path":["core","str","iter","SplitN"],"kind":"struct"},"2:41746:2043":{"crate_id":2,"path":["core","net","ip_addr","fmt","Span"],"kind":"struct"},"1:4744:10361":{"crate_id":1,"path":["std","os","fd","raw","FromRawFd"],"kind":"trait"},"2:31167:202":{"crate_id":2,"path":["core","cmp","Ordering"],"kind":"enum"},"2:5637:6161":{"crate_id":2,"path":["core","iter","adapters","filter_map","next_chunk","Guard"],"kind":"struct"},"1:10249:10430":{"crate_id":1,"path":["std","sys","unix","pipe","AnonPipe"],"kind":"struct"},"2:41148:3472":{"crate_id":2,"path":["core","iter","sources","repeat","Repeat"],"kind":"struct"},"2:3272:15724":{"crate_id":2,"path":["core","ops","range","OneSidedRange"],"kind":"trait"},"16:2574:7346":{"crate_id":16,"path":["gimli","common","DebugLocListsBase"],"kind":"struct"},"17:9052:22560":{"crate_id":17,"path":["object","endian","Endianness"],"kind":"enum"},"18:599:6339":{"crate_id":18,"path":["memchr","memmem","twoway","Shift"],"kind":"enum"},"1:11357:9749":{"crate_id":1,"path":["std","sys_common","wtf8","Wtf8Buf"],"kind":"struct"},"1:7690:4557":{"crate_id":1,"path":["std","thread","Thread"],"kind":"struct"},"24:5472:3384":{"crate_id":24,"path":["syn","ty","TypeGroup"],"kind":"struct"},"2:40457:32491":{"crate_id":2,"path":["core","ffi","c_str","FromBytesWithNulErrorKind"],"kind":"enum"},"17:11216:9389":{"crate_id":17,"path":["object","read","pe","import","ImportTable"],"kind":"struct"},"1:910:10203":{"crate_id":1,"path":["std","collections","hash","map","ValuesMut"],"kind":"struct"},"1:11518:10338":{"crate_id":1,"path":["std","sys_common","net","TcpListener"],"kind":"struct"},"5:1511:10129":{"crate_id":5,"path":["alloc","collections","btree","map","IntoValues"],"kind":"struct"},"24:4532:2035":{"crate_id":24,"path":["syn","data","Fields"],"kind":"enum"},"1:8937:10453":{"crate_id":1,"path":["std","sync","mpsc","TrySendError"],"kind":"enum"},"24:4054:3700":{"crate_id":24,"path":["syn","token","LArrow"],"kind":"struct"},"21:2534:4791":{"crate_id":21,"path":["proc_macro","bridge","ExpnGlobals"],"kind":"struct"},"16:6560:6133":{"crate_id":16,"path":["gimli","read","lazy","imp","LazyArc"],"kind":"struct"},"1:11478:10339":{"crate_id":1,"path":["std","sys_common","net","TcpStream"],"kind":"struct"},"2:4478:3571":{"crate_id":2,"path":["core","cell","UnsafeCell"],"kind":"struct"},"16:7462:7526":{"crate_id":16,"path":["gimli","read","op","OperationIter"],"kind":"struct"},"17:11816:6626":{"crate_id":17,"path":["object","archive","AixHeader"],"kind":"struct"},"5:1265:9531":{"crate_id":5,"path":["alloc","collections","btree","map","entry","Entry"],"kind":"enum"},"2:4105:4673":{"crate_id":2,"path":["core","async_iter","async_iter","AsyncIterator"],"kind":"trait"},"2:40346:9624":{"crate_id":2,"path":["core","char","decode","DecodeUtf16Error"],"kind":"struct"},"17:13852:7119":{"crate_id":17,"path":["object","pe","ImageAuxSymbolFunctionBeginEnd"],"kind":"struct"},"2:42986:3545":{"crate_id":2,"path":["core","fmt","Alignment"],"kind":"enum"},"1:4040:10350":{"crate_id":1,"path":["std","os","unix","fs","DirEntryExt"],"kind":"trait"},"18:564:6382":{"crate_id":18,"path":["memchr","memmem","rarebytes","RareNeedleBytes"],"kind":"struct"},"1:6646:239":{"crate_id":1,"path":["std","sync","rwlock","RwLock"],"kind":"struct"},"2:23228:188":{"crate_id":2,"path":["core","num","nonzero","NonZeroI32"],"kind":"struct"},"20:815:2043":{"crate_id":20,"path":["proc_macro2","imp","Span"],"kind":"enum"},"1:6898:6228":{"crate_id":1,"path":["std","sys","common","thread_local","abort_on_dtor_unwind","DtorUnwindGuard"],"kind":"struct"},"6:6159:8558":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_data"],"kind":"union"},"1:4044:10351":{"crate_id":1,"path":["std","os","unix","fs","DirEntryExt2"],"kind":"trait"},"24:4037:3699":{"crate_id":24,"path":["syn","token","Gt"],"kind":"struct"},"1:12045:688":{"crate_id":1,"path":["std","f64"],"kind":"primitive"},"2:44253:9684":{"crate_id":2,"path":["core","str","pattern","CharSearcher"],"kind":"struct"},"5:629:10033":{"crate_id":5,"path":["alloc","boxed","from","StringError"],"kind":"struct"},"1:8404:9242":{"crate_id":1,"path":["std","path","Prefix"],"kind":"enum"},"2:40909:3513":{"crate_id":2,"path":["core","iter","adapters","take","Take"],"kind":"struct"},"2:42695:3556":{"crate_id":2,"path":["core","fmt","num","LowerHex"],"kind":"struct"},"1:10946:7774":{"crate_id":1,"path":["std","sys","unix","os_str","Buf"],"kind":"struct"},"5:7505:9584":{"crate_id":5,"path":["alloc","ffi","c_str","IntoStringError"],"kind":"struct"},"24:99:3858":{"crate_id":24,"path":["syn","token","private","CustomToken"],"kind":"trait"},"24:5355:3376":{"crate_id":24,"path":["syn","path","ParenthesizedGenericArguments"],"kind":"struct"},"1:12038:338":{"crate_id":1,"path":["std","array"],"kind":"primitive"},"16:5648:22502":{"crate_id":16,"path":["gimli","read","cfi","EhHdrTableIter"],"kind":"struct"},"1:10740:10406":{"crate_id":1,"path":["std","sys","unix","fd","FileDesc"],"kind":"struct"},"1:2519:10315":{"crate_id":1,"path":["std","io","buffered","bufreader","BufReader"],"kind":"struct"},"17:12497:6782":{"crate_id":17,"path":["object","macho","MachHeader32"],"kind":"struct"},"14:215:9551":{"crate_id":14,"path":["rustc_demangle","TryDemangleError"],"kind":"struct"},"17:13229:6911":{"crate_id":17,"path":["object","macho","NoteCommand"],"kind":"struct"},"17:13907:7133":{"crate_id":17,"path":["object","pe","ImageLinenumber"],"kind":"struct"},"18:113:26600":{"crate_id":18,"path":["memchr","memchr","iter","Memchr3"],"kind":"struct"},"11:328:9557":{"crate_id":11,"path":["hashbrown","raw","RawIter"],"kind":"struct"},"2:21168:33494":{"crate_id":2,"path":["core","core_simd","swizzle","rotate_elements_left","Rotate"],"kind":"struct"},"17:256:35600":{"crate_id":17,"path":["object","read","util","DebugByte"],"kind":"struct"},"17:12712:6814":{"crate_id":17,"path":["object","macho","SubClientCommand"],"kind":"struct"},"1:2355:10268":{"crate_id":1,"path":["std","fs","symlink_metadata"],"kind":"function"},"2:7894:175":{"crate_id":2,"path":["core","iter","traits","iterator","Iterator"],"kind":"trait"},"16:6226:22508":{"crate_id":16,"path":["gimli","read","dwarf","DwarfPackage"],"kind":"struct"},"17:14174:7203":{"crate_id":17,"path":["object","pe","ImageLoadConfigDirectory32"],"kind":"struct"},"24:3810:3684":{"crate_id":24,"path":["syn","token","AndAnd"],"kind":"struct"},"2:12415:3806":{"crate_id":2,"path":["core","str","pattern"],"kind":"module"},"16:7054:9526":{"crate_id":16,"path":["gimli","read","lookup","LookupEntryIter"],"kind":"struct"},"24:1134:5256":{"crate_id":24,"path":["syn","lit","LitRepr"],"kind":"struct"},"24:5150:3366":{"crate_id":24,"path":["syn","lit","LitByte"],"kind":"struct"},"24:3102:3568":{"crate_id":24,"path":["syn","token","Ref"],"kind":"struct"},"16:8050:3307":{"crate_id":16,"path":["gimli","read","unit","Attribute"],"kind":"struct"},"18:766:26610":{"crate_id":18,"path":["memchr","memmem","SearcherRevKind"],"kind":"enum"},"11:2423:3403":{"crate_id":11,"path":["hashbrown","table","IntoIter"],"kind":"struct"},"2:10313:6200":{"crate_id":2,"path":["core","slice","sort","merge_sort","RunVec"],"kind":"struct"},"5:7341:5552":{"crate_id":5,"path":["alloc","collections","btree","set_val","SetValZST"],"kind":"struct"},"2:10490:10285":{"crate_id":2,"path":["core","slice","index","private_slice_index","Sealed"],"kind":"trait"},"6:5033:8334":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_alg"],"kind":"struct"},"6:5941:8457":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","mallinfo"],"kind":"struct"},"2:44658:15820":{"crate_id":2,"path":["core","time","TryFromFloatSecsErrorKind"],"kind":"enum"},"2:23042:193":{"crate_id":2,"path":["core","num","nonzero","NonZeroU32"],"kind":"struct"},"2:22175:10285":{"crate_id":2,"path":["core","core_simd","simd","num","sealed","Sealed"],"kind":"trait"},"1:3168:29777":{"crate_id":1,"path":["std","io","stdio","StderrRaw"],"kind":"struct"},"2:5542:6161":{"crate_id":2,"path":["core","iter","adapters","filter","next_chunk","Guard"],"kind":"struct"},"24:4843:3338":{"crate_id":24,"path":["syn","expr","ExprGroup"],"kind":"struct"},"24:2541:3649":{"crate_id":24,"path":["syn","token","Abstract"],"kind":"struct"},"15:306:21597":{"crate_id":15,"path":["addr2line","LocationRangeUnitIter"],"kind":"struct"},"1:533:4552":{"crate_id":1,"path":["std","thread","Packet"],"kind":"struct"},"24:4124:3705":{"crate_id":24,"path":["syn","token","Ne"],"kind":"struct"},"11:434:35529":{"crate_id":11,"path":["hashbrown","raw","RawIterHashInner"],"kind":"struct"},"6:5897:8435":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","glob64_t"],"kind":"struct"},"24:4310:3718":{"crate_id":24,"path":["syn","token","Semi"],"kind":"struct"},"24:4948:58":{"crate_id":24,"path":["syn","expr","parsing","kw","builtin"],"kind":"struct"},"20:712:3588":{"crate_id":20,"path":["proc_macro2","fallback","SourceFile"],"kind":"struct"},"2:7838:3484":{"crate_id":2,"path":["core","iter","traits","exact_size","ExactSizeIterator"],"kind":"trait"},"16:5384:22501":{"crate_id":16,"path":["gimli","endianity","RunTimeEndian"],"kind":"enum"},"17:10772:6533":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandData"],"kind":"struct"},"1:3241:10323":{"crate_id":1,"path":["std","io","stdio","Stdout"],"kind":"struct"},"5:3150:100":{"crate_id":5,"path":["alloc","collections","btree","set","BTreeSet"],"kind":"struct"},"16:6041:22507":{"crate_id":16,"path":["gimli","read","cfi","RegisterRule"],"kind":"enum"},"6:1546:7894":{"crate_id":6,"path":["libc","unix","linux_like","addrinfo"],"kind":"struct"},"17:10448:9564":{"crate_id":17,"path":["object","read","elf","hash","HashTable"],"kind":"struct"},"17:14470:7302":{"crate_id":17,"path":["object","pe","ImageFunctionEntry64"],"kind":"struct"},"2:2884:3447":{"crate_id":2,"path":["core","ops","arith","Add"],"kind":"trait"},"17:12514:6785":{"crate_id":17,"path":["object","macho","MachHeader64"],"kind":"struct"},"2:42206:96":{"crate_id":2,"path":["core","sync","atomic","AtomicU8"],"kind":"struct"},"6:6012:8497":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","timex"],"kind":"struct"},"2:41866:9728":{"crate_id":2,"path":["core","net","socket_addr","SocketAddr"],"kind":"enum"},"1:4627:10348":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt"],"kind":"trait"},"2:11458:15630":{"crate_id":2,"path":["core","slice","iter","GroupBy"],"kind":"struct"},"2:2899:6349":{"crate_id":2,"path":["core","ops","arith","Div"],"kind":"trait"},"17:11873:6638":{"crate_id":17,"path":["object","archive","AixMemberOffset"],"kind":"struct"},"6:5910:8436":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","msghdr"],"kind":"struct"},"18:736:26609":{"crate_id":18,"path":["memchr","memmem","SearcherKind"],"kind":"enum"},"2:42074:232":{"crate_id":2,"path":["core","result","Result"],"kind":"enum"},"23:281:2053":{"crate_id":23,"path":["quote","__private","push_lifetime_spanned","Lifetime"],"kind":"struct"},"1:8851:3404":{"crate_id":1,"path":["std","sync","mpsc","Iter"],"kind":"struct"},"5:6856:4773":{"crate_id":5,"path":["alloc","vec","in_place_drop","InPlaceDrop"],"kind":"struct"},"6:4939:1092":{"crate_id":6,"path":["libc","unix","linux_like","linux","option"],"kind":"struct"},"16:8154:22523":{"crate_id":16,"path":["gimli","read","unit","EntriesTreeNode"],"kind":"struct"},"2:6450:4792":{"crate_id":2,"path":["core","iter","adapters","map_windows","Buffer"],"kind":"struct"},"2:39427:15666":{"crate_id":2,"path":["core","ops","control_flow","ControlFlow"],"kind":"enum"},"1:1797:10227":{"crate_id":1,"path":["std","env","SplitPaths"],"kind":"struct"},"2:41175:3478":{"crate_id":2,"path":["core","iter","sources","successors","Successors"],"kind":"struct"},"2:42117:3404":{"crate_id":2,"path":["core","result","Iter"],"kind":"struct"},"17:11273:9396":{"crate_id":17,"path":["object","read","pe","import","DelayLoadDescriptorIterator"],"kind":"struct"},"1:8859:10454":{"crate_id":1,"path":["std","sync","mpsc","TryIter"],"kind":"struct"},"17:13990:7151":{"crate_id":17,"path":["object","pe","ImageTlsDirectory64"],"kind":"struct"},"16:8281:7584":{"crate_id":16,"path":["gimli","read","StoreOnHeap"],"kind":"struct"},"24:2677:2570":{"crate_id":24,"path":["syn","token","Const"],"kind":"struct"},"16:7436:7525":{"crate_id":16,"path":["gimli","read","op","Expression"],"kind":"struct"},"17:11743:6616":{"crate_id":17,"path":["object","read","CompressedFileRange"],"kind":"struct"},"16:6944:35545":{"crate_id":16,"path":["gimli","read","loclists","LocListsFormat"],"kind":"enum"},"24:2847:137":{"crate_id":24,"path":["syn","token","Fn"],"kind":"struct"},"24:5374:3378":{"crate_id":24,"path":["syn","restriction","VisRestricted"],"kind":"struct"},"1:8138:3465":{"crate_id":1,"path":["std","io","util","Empty"],"kind":"struct"},"2:22556:8804":{"crate_id":2,"path":["core","num","dec2flt","number","Number"],"kind":"struct"},"1:6813:10479":{"crate_id":1,"path":["std","std_float","StdFloat"],"kind":"trait"},"2:7176:3498":{"crate_id":2,"path":["core","iter","adapters","zip","TrustedRandomAccessNoCoerce"],"kind":"trait"},"2:44777:233":{"crate_id":2,"path":["core","future","ResumeTy"],"kind":"struct"},"11:1887:3403":{"crate_id":11,"path":["hashbrown","set","IntoIter"],"kind":"struct"},"2:2869:4325":{"crate_id":2,"path":["core","marker","Freeze"],"kind":"trait"},"16:6792:9513":{"crate_id":16,"path":["gimli","read","line","IncompleteLineProgram"],"kind":"struct"},"1:5782:10134":{"crate_id":1,"path":["std","sync","condvar","Condvar"],"kind":"struct"},"5:3682:6141":{"crate_id":5,"path":["alloc","collections","linked_list","drop","DropGuard"],"kind":"struct"},"16:3797:7390":{"crate_id":16,"path":["gimli","constants","DwSectV2"],"kind":"struct"},"24:4550:3322":{"crate_id":24,"path":["syn","data","FieldsUnnamed"],"kind":"struct"},"6:4860:8242":{"crate_id":6,"path":["libc","unix","linux_like","linux","j1939_filter"],"kind":"struct"},"2:21214:33492":{"crate_id":2,"path":["core","core_simd","swizzle","deinterleave","Odd"],"kind":"struct"},"18:521:26613":{"crate_id":18,"path":["memchr","memmem","prefilter","Prefilter"],"kind":"enum"},"9:52:10108":{"crate_id":9,"path":["miniz_oxide","inflate","core","DecompressorOxide"],"kind":"struct"},"2:10697:9592":{"crate_id":2,"path":["core","slice","iter","Split"],"kind":"struct"},"5:1126:34489":{"crate_id":5,"path":["alloc","collections","btree","borrow","DormantMutRef"],"kind":"struct"},"6:7388:8766":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","align","sem_t"],"kind":"struct"},"16:7597:35546":{"crate_id":16,"path":["gimli","read","rnglists","RangeListsFormat"],"kind":"enum"},"16:2380:7338":{"crate_id":16,"path":["gimli","common","DebugAbbrevOffset"],"kind":"struct"},"6:6868:8706":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user"],"kind":"struct"},"2:42362:94":{"crate_id":2,"path":["core","sync","atomic","AtomicU32"],"kind":"struct"},"17:9071:6493":{"crate_id":17,"path":["object","endian","LittleEndian"],"kind":"struct"},"2:44582:9712":{"crate_id":2,"path":["core","str","IsWhitespace"],"kind":"struct"},"1:2427:3177":{"crate_id":1,"path":["std","io"],"kind":"module"},"24:3221:259":{"crate_id":24,"path":["syn","token","Trait"],"kind":"struct"},"17:13915:7135":{"crate_id":17,"path":["object","pe","ImageBaseRelocation"],"kind":"struct"},"1:8843:9253":{"crate_id":1,"path":["std","process","ExitCode"],"kind":"struct"},"17:14479:7304":{"crate_id":17,"path":["object","pe","ImageSeparateDebugHeader"],"kind":"struct"},"24:5482:3388":{"crate_id":24,"path":["syn","ty","TypeNever"],"kind":"struct"},"1:10988:9253":{"crate_id":1,"path":["std","sys","unix","process","process_common","ExitCode"],"kind":"struct"},"2:44446:9701":{"crate_id":2,"path":["core","str","pattern","TwoWaySearcher"],"kind":"struct"},"2:40322:9024":{"crate_id":2,"path":["core","char","convert","CharTryFromError"],"kind":"struct"},"17:14034:7165":{"crate_id":17,"path":["object","pe","ImageBoundForwarderRef"],"kind":"struct"},"2:9306:84":{"crate_id":2,"path":["core","sync","atomic","AtomicBool"],"kind":"struct"},"2:41167:3476":{"crate_id":2,"path":["core","iter","sources","repeat_with","RepeatWith"],"kind":"struct"},"2:15:2805":{"crate_id":2,"path":["core","write"],"kind":"macro"},"2:45931:9072":{"crate_id":2,"path":["core","core_arch","simd","i8x4"],"kind":"struct"},"16:7090:9530":{"crate_id":16,"path":["gimli","read","lookup","PubStuffParser"],"kind":"struct"},"17:12281:6731":{"crate_id":17,"path":["object","elf","NoteHeader64"],"kind":"struct"},"24:129:1964":{"crate_id":24,"path":["syn","token","Group"],"kind":"struct"},"17:9351:6502":{"crate_id":17,"path":["object","read","util","ByteString"],"kind":"struct"},"21:2644:3403":{"crate_id":21,"path":["proc_macro","token_stream","IntoIter"],"kind":"struct"},"5:7333:216":{"crate_id":5,"path":["alloc","collections","btree","set","Range"],"kind":"struct"},"6:4535:8122":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_envelope"],"kind":"struct"},"2:9493:33781":{"crate_id":2,"path":["core","fmt","builders","PadAdapter"],"kind":"struct"},"6:4440:8078":{"crate_id":6,"path":["libc","unix","linux_like","linux","packet_mreq"],"kind":"struct"},"2:3073:2524":{"crate_id":2,"path":["core","ops","drop","Drop"],"kind":"trait"},"2:21421:10285":{"crate_id":2,"path":["core","core_simd","lane_count","sealed","Sealed"],"kind":"trait"},"6:6741:8656":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stat64"],"kind":"struct"},"1:11818:6245":{"crate_id":1,"path":["std","backtrace_rs","symbolize","gimli","mmap","Mmap"],"kind":"struct"},"24:4787:3325":{"crate_id":24,"path":["syn","expr","ExprAssign"],"kind":"struct"},"24:4890:3348":{"crate_id":24,"path":["syn","expr","ExprRange"],"kind":"struct"},"2:46940:9123":{"crate_id":2,"path":["core","core_arch","simd","u64x4"],"kind":"struct"},"24:4066:3701":{"crate_id":24,"path":["syn","token","Le"],"kind":"struct"},"1:10537:10323":{"crate_id":1,"path":["std","sys","unix","stdio","Stdout"],"kind":"struct"},"20:515:3422":{"crate_id":20,"path":["proc_macro2","LexError"],"kind":"struct"},"1:946:10207":{"crate_id":1,"path":["std","collections","hash","map","RawVacantEntryMut"],"kind":"struct"},"24:2898:3663":{"crate_id":24,"path":["syn","token","Impl"],"kind":"struct"},"1:3672:10335":{"crate_id":1,"path":["std","net","socket_addr","ToSocketAddrs"],"kind":"trait"},"6:1703:7997":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_un"],"kind":"struct"},"1:8221:9679":{"crate_id":1,"path":["std","io","Lines"],"kind":"struct"},"9:450:21488":{"crate_id":9,"path":["miniz_oxide","MZError"],"kind":"enum"},"16:8134:9549":{"crate_id":16,"path":["gimli","read","unit","EntriesTree"],"kind":"struct"},"16:7474:22517":{"crate_id":16,"path":["gimli","read","op","Evaluation"],"kind":"struct"},"17:11587:6608":{"crate_id":17,"path":["object","read","ObjectMapEntry"],"kind":"struct"},"2:21540:10285":{"crate_id":2,"path":["core","core_simd","masks","sealed","Sealed"],"kind":"trait"},"16:8167:22524":{"crate_id":16,"path":["gimli","read","unit","EntriesTreeIter"],"kind":"struct"},"2:21869:33499":{"crate_id":2,"path":["core","core_simd","vector","splat","Splat"],"kind":"struct"},"2:46910:9122":{"crate_id":2,"path":["core","core_arch","simd","u32x8"],"kind":"struct"},"2:40520:6185":{"crate_id":2,"path":["core","ffi","VaListImpl"],"kind":"struct"},"1:7932:3540":{"crate_id":1,"path":["std","io","cursor","Cursor"],"kind":"struct"},"21:648:3591":{"crate_id":21,"path":["proc_macro","diagnostic","MultiSpan"],"kind":"trait"},"6:5969:8468":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_pktinfo"],"kind":"struct"},"11:710:10128":{"crate_id":11,"path":["hashbrown","map","IntoKeys"],"kind":"struct"},"16:5727:9419":{"crate_id":16,"path":["gimli","read","cfi","SectionBaseAddresses"],"kind":"struct"},"17:11338:22767":{"crate_id":17,"path":["object","read","pe","resource","ResourceDirectoryEntryData"],"kind":"enum"},"5:1481:9560":{"crate_id":5,"path":["alloc","collections","btree","map","Values"],"kind":"struct"},"17:13488:6980":{"crate_id":17,"path":["object","pe","ImageVxdHeader"],"kind":"struct"},"11:0:3166":{"crate_id":11,"path":["hashbrown"],"kind":"module"},"2:48180:9172":{"crate_id":2,"path":["core","core_arch","x86","__m128d"],"kind":"struct"},"1:9148:9736":{"crate_id":1,"path":["std","time","SystemTimeError"],"kind":"struct"},"6:4401:8052":{"crate_id":6,"path":["libc","unix","linux_like","linux","signalfd_siginfo"],"kind":"struct"},"11:1142:21568":{"crate_id":11,"path":["hashbrown","map","VacantEntryRef"],"kind":"struct"},"1:9197:9267":{"crate_id":1,"path":["std","sys","personality","dwarf","eh","EHContext"],"kind":"struct"},"1:5989:226":{"crate_id":1,"path":["std","sync","mpmc","counter","Receiver"],"kind":"struct"},"2:10973:15635":{"crate_id":2,"path":["core","slice","iter","RSplitNMut"],"kind":"struct"},"2:22540:9605":{"crate_id":2,"path":["core","num","dec2flt","decimal","Decimal"],"kind":"struct"},"5:3813:4766":{"crate_id":5,"path":["alloc","collections","linked_list","ExtractIf"],"kind":"struct"},"17:9946:6512":{"crate_id":17,"path":["object","read","coff","section","SectionTable"],"kind":"struct"},"1:12057:1691":{"crate_id":1,"path":["std","usize"],"kind":"primitive"},"2:46484:9097":{"crate_id":2,"path":["core","core_arch","simd","i64x2"],"kind":"struct"},"20:834:1976":{"crate_id":20,"path":["proc_macro2","imp","Ident"],"kind":"enum"},"1:12000:10141":{"crate_id":1,"path":["std","backtrace_rs","symbolize","gimli","Cache"],"kind":"struct"},"6:1537:7888":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_in6"],"kind":"struct"},"1:4746:10362":{"crate_id":1,"path":["std","os","fd","raw","IntoRawFd"],"kind":"trait"},"17:12173:6699":{"crate_id":17,"path":["object","elf","Dyn32"],"kind":"struct"},"2:1644:629":{"crate_id":2,"path":["core","mem","drop"],"kind":"function"},"2:46530:9099":{"crate_id":2,"path":["core","core_arch","simd","f64x2"],"kind":"struct"},"5:1450:3403":{"crate_id":5,"path":["alloc","collections","btree","map","IntoIter"],"kind":"struct"},"1:9476:10280":{"crate_id":1,"path":["std","sys","unix","fs","ReadDir"],"kind":"struct"},"1:3203:10322":{"crate_id":1,"path":["std","io","stdio","StdinLock"],"kind":"struct"},"24:4795:3327":{"crate_id":24,"path":["syn","expr","ExprAwait"],"kind":"struct"},"2:4210:3580":{"crate_id":2,"path":["core","cell","once","OnceCell"],"kind":"struct"},"2:6439:3494":{"crate_id":2,"path":["core","iter","adapters","map_windows","MapWindows"],"kind":"struct"},"2:31195:4341":{"crate_id":2,"path":["core","cmp","Reverse"],"kind":"struct"},"1:8201:3513":{"crate_id":1,"path":["std","io","Take"],"kind":"struct"},"1:5502:10426":{"crate_id":1,"path":["std","process","Stdio"],"kind":"struct"},"2:42323:87":{"crate_id":2,"path":["core","sync","atomic","AtomicI32"],"kind":"struct"},"2:44590:9714":{"crate_id":2,"path":["core","str","IsNotEmpty"],"kind":"struct"},"24:4817:3332":{"crate_id":24,"path":["syn","expr","ExprCast"],"kind":"struct"},"6:6128:8550":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ptrace_syscall_info"],"kind":"struct"},"16:6243:2006":{"crate_id":16,"path":["gimli","read","dwarf","Unit"],"kind":"struct"},"2:43683:15627":{"crate_id":2,"path":["core","slice","iter","ChunksExactMut"],"kind":"struct"},"1:11180:9062":{"crate_id":1,"path":["std","sys","unix","time","Nanoseconds"],"kind":"struct"},"1:7644:10285":{"crate_id":1,"path":["std","sealed","Sealed"],"kind":"trait"},"1:8233:10336":{"crate_id":1,"path":["std","net","tcp","IntoIncoming"],"kind":"struct"},"17:11359:22768":{"crate_id":17,"path":["object","read","pe","resource","ResourceNameOrId"],"kind":"enum"},"17:14111:7187":{"crate_id":17,"path":["object","pe","ImageDynamicRelocationTable"],"kind":"struct"},"2:40919:3514":{"crate_id":2,"path":["core","iter","adapters","take_while","TakeWhile"],"kind":"struct"},"24:2177:10285":{"crate_id":24,"path":["syn","sealed","lookahead","Sealed"],"kind":"trait"},"24:154:1970":{"crate_id":24,"path":["syn","Token"],"kind":"macro"},"2:39705:8897":{"crate_id":2,"path":["core","array","TryFromSliceError"],"kind":"struct"},"24:3034:3669":{"crate_id":24,"path":["syn","token","Mut"],"kind":"struct"},"21:2750:2367":{"crate_id":21,"path":["proc_macro","Punct"],"kind":"struct"},"16:4557:7400":{"crate_id":16,"path":["gimli","constants","DwEnd"],"kind":"struct"},"2:11532:4715":{"crate_id":2,"path":["core","slice","raw","from_raw_parts"],"kind":"function"},"2:44858:9720":{"crate_id":2,"path":["core","alloc","layout","LayoutError"],"kind":"struct"},"2:43765:9601":{"crate_id":2,"path":["core","slice","iter","RChunksExact"],"kind":"struct"},"2:4943:848":{"crate_id":2,"path":["core","iter"],"kind":"module"},"2:41142:3470":{"crate_id":2,"path":["core","iter","sources","once_with","OnceWith"],"kind":"struct"},"6:548:7840":{"crate_id":6,"path":["libc","unix","pollfd"],"kind":"struct"},"17:9651:6520":{"crate_id":17,"path":["object","read","any","SymbolTable"],"kind":"struct"},"1:638:10193":{"crate_id":1,"path":["std","backtrace","BacktraceFrame"],"kind":"struct"},"6:123:16093":{"crate_id":6,"path":["libc","unix","fpos_t"],"kind":"enum"},"17:9456:35601":{"crate_id":17,"path":["object","read","any","SegmentIteratorInternal"],"kind":"enum"},"6:7692:8789":{"crate_id":6,"path":["libc","unix","linux_like","linux","non_exhaustive","open_how"],"kind":"struct"},"5:3589:3404":{"crate_id":5,"path":["alloc","collections","linked_list","Iter"],"kind":"struct"},"2:42921:9043":{"crate_id":2,"path":["core","fmt","rt","Placeholder"],"kind":"struct"},"20:0:1814":{"crate_id":20,"path":["proc_macro2"],"kind":"module"},"2:10740:9594":{"crate_id":2,"path":["core","slice","iter","SplitInclusive"],"kind":"struct"},"24:4834:3336":{"crate_id":24,"path":["syn","expr","ExprField"],"kind":"struct"},"5:1434:3408":{"crate_id":5,"path":["alloc","collections","btree","map","IterMut"],"kind":"struct"},"5:7529:249":{"crate_id":5,"path":["alloc","string","String"],"kind":"struct"},"24:4560:1818":{"crate_id":24,"path":["syn","derive","DeriveInput"],"kind":"struct"},"16:6332:7361":{"crate_id":16,"path":["gimli","read","abbrev","DebugAbbrev"],"kind":"struct"},"24:5057:2635":{"crate_id":24,"path":["syn","generics","TraitBound"],"kind":"struct"},"1:10097:29171":{"crate_id":1,"path":["std","sys","unix","os","Env"],"kind":"struct"},"17:10367:22651":{"crate_id":17,"path":["object","read","elf","relocation","RelocationSections"],"kind":"struct"},"17:504:22573":{"crate_id":17,"path":["object","read","any","Comdat"],"kind":"struct"},"2:22289:10285":{"crate_id":2,"path":["core","core_simd","simd","ptr","sealed","Sealed"],"kind":"trait"},"5:1522:216":{"crate_id":5,"path":["alloc","collections","btree","map","Range"],"kind":"struct"},"2:22204:4703":{"crate_id":2,"path":["core","core_simd","simd","ptr","const_ptr","SimdConstPtr","from_exposed_addr"],"kind":"foreign_type"},"17:11236:9394":{"crate_id":17,"path":["object","read","pe","import","ImportThunkList"],"kind":"struct"},"6:4364:8024":{"crate_id":6,"path":["libc","unix","linux_like","linux","passwd"],"kind":"struct"},"21:2270:1964":{"crate_id":21,"path":["proc_macro","bridge","Group"],"kind":"struct"},"23:504:4255":{"crate_id":23,"path":["quote","__private","IdentFragmentAdapter"],"kind":"struct"},"24:5509:66":{"crate_id":24,"path":["syn","ty","Abi"],"kind":"struct"},"11:430:35533":{"crate_id":11,"path":["hashbrown","raw","RawIterHash"],"kind":"struct"},"6:555:7843":{"crate_id":6,"path":["libc","unix","winsize"],"kind":"struct"},"16:3049:21644":{"crate_id":16,"path":["gimli","common","DwarfFileType"],"kind":"enum"},"2:46386:9094":{"crate_id":2,"path":["core","core_arch","simd","i8x16"],"kind":"struct"},"5:3602:3408":{"crate_id":5,"path":["alloc","collections","linked_list","IterMut"],"kind":"struct"},"6:563:7848":{"crate_id":6,"path":["libc","unix","linger"],"kind":"struct"},"1:3282:10320":{"crate_id":1,"path":["std","io","stdio","StderrLock"],"kind":"struct"},"16:5798:7423":{"crate_id":16,"path":["gimli","read","cfi","Augmentation"],"kind":"struct"},"5:7462:9578":{"crate_id":5,"path":["alloc","ffi","c_str","NulError"],"kind":"struct"},"6:4461:8088":{"crate_id":6,"path":["libc","unix","linux_like","linux","msginfo"],"kind":"struct"},"11:2443:4768":{"crate_id":11,"path":["hashbrown","table","Drain"],"kind":"struct"},"1:9015:29315":{"crate_id":1,"path":["std","sync","mpmc","list","Position"],"kind":"struct"},"6:4814:8217":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_vm"],"kind":"struct"},"2:10060:153":{"crate_id":2,"path":["core","hash","Hasher"],"kind":"trait"},"24:5007:2643":{"crate_id":24,"path":["syn","generics","LifetimeParam"],"kind":"struct"},"2:30599:4631":{"crate_id":2,"path":["core","mem","maybe_uninit","MaybeUninit"],"kind":"union"},"17:9824:22603":{"crate_id":17,"path":["object","read","archive","ArchiveKind"],"kind":"enum"},"13:226:7709":{"crate_id":13,"path":["std_detect","detect","cache","Initializer"],"kind":"struct"},"16:4613:7402":{"crate_id":16,"path":["gimli","constants","DwVis"],"kind":"struct"},"2:2905:6350":{"crate_id":2,"path":["core","ops","arith","Rem"],"kind":"trait"},"2:21442:8801":{"crate_id":2,"path":["core","core_simd","masks","mask_impl","Mask"],"kind":"struct"},"2:40687:3516":{"crate_id":2,"path":["core","iter","adapters","intersperse","Intersperse"],"kind":"struct"},"16:5760:22504":{"crate_id":16,"path":["gimli","read","cfi","CieOrFde"],"kind":"enum"},"1:5383:10422":{"crate_id":1,"path":["std","process","Child"],"kind":"struct"},"2:46193:9083":{"crate_id":2,"path":["core","core_arch","simd","f64x1"],"kind":"struct"},"17:13633:7078":{"crate_id":17,"path":["object","pe","ImageOptionalHeader64"],"kind":"struct"},"16:6569:7369":{"crate_id":16,"path":["gimli","read","line","DebugLine"],"kind":"struct"},"6:7371:8755":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","align","clone_args"],"kind":"struct"},"17:9565:22587":{"crate_id":17,"path":["object","read","any","ComdatIterator"],"kind":"struct"},"16:6083:21615":{"crate_id":16,"path":["gimli","read","cfi","CallFrameInstruction"],"kind":"enum"},"5:3179:3404":{"crate_id":5,"path":["alloc","collections","btree","set","Iter"],"kind":"struct"},"24:4934:3359":{"crate_id":24,"path":["syn","expr","ExprYield"],"kind":"struct"},"2:9311:91":{"crate_id":2,"path":["core","sync","atomic","AtomicPtr"],"kind":"struct"},"2:10890:15634":{"crate_id":2,"path":["core","slice","iter","RSplitMut"],"kind":"struct"},"24:4584:2237":{"crate_id":24,"path":["syn","derive","DataUnion"],"kind":"struct"},"11:2554:35522":{"crate_id":11,"path":["hashbrown","raw","Fallibility"],"kind":"enum"},"11:2548:7711":{"crate_id":11,"path":["hashbrown","raw","bitmask","BitMaskIter"],"kind":"struct"},"1:4169:10372":{"crate_id":1,"path":["std","os","unix","net","ancillary","AncillaryData"],"kind":"enum"},"2:2964:3721":{"crate_id":2,"path":["core","ops","bit","Shr"],"kind":"trait"},"1:8477:9245":{"crate_id":1,"path":["std","path","PrefixComponent"],"kind":"struct"},"24:550:232":{"crate_id":24,"path":["syn","error","Result"],"kind":"type_alias"},"16:5634:9410":{"crate_id":16,"path":["gimli","read","cfi","ParsedEhFrameHdr"],"kind":"struct"},"2:43202:9656":{"crate_id":2,"path":["core","hash","sip","SipHasher"],"kind":"struct"},"16:2907:7360":{"crate_id":16,"path":["gimli","common","EhFrameOffset"],"kind":"struct"},"2:48142:9169":{"crate_id":2,"path":["core","core_arch","simd","f64x8"],"kind":"struct"},"24:4527:1990":{"crate_id":24,"path":["syn","data","Variant"],"kind":"struct"},"17:10739:22732":{"crate_id":17,"path":["object","read","macho","file","MachOComdatSectionIterator"],"kind":"struct"},"20:781:26620":{"crate_id":20,"path":["proc_macro2","extra","DelimSpanEnum"],"kind":"enum"},"2:3049:123":{"crate_id":2,"path":["core","ops","deref","Deref"],"kind":"trait"},"17:10662:22728":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldSubCache"],"kind":"struct"},"17:11099:22741":{"crate_id":17,"path":["object","read","pe","section","PeSegmentIterator"],"kind":"struct"},"1:8494:10417":{"crate_id":1,"path":["std","path","Component"],"kind":"enum"},"24:2224:2666":{"crate_id":24,"path":["syn","spanned","Spanned"],"kind":"trait"},"17:13839:7113":{"crate_id":17,"path":["object","pe","ImageAuxSymbolFunction"],"kind":"struct"},"5:5645:4772":{"crate_id":5,"path":["alloc","string","retain","SetLenOnDrop"],"kind":"struct"},"6:4724:8178":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Shdr"],"kind":"struct"},"1:8921:10451":{"crate_id":1,"path":["std","sync","mpsc","RecvTimeoutError"],"kind":"enum"},"17:9753:22590":{"crate_id":17,"path":["object","read","any","DynamicRelocationIterator"],"kind":"struct"},"16:3655:6407":{"crate_id":16,"path":["gimli","arch","X86_64"],"kind":"struct"},"21:2755:2042":{"crate_id":21,"path":["proc_macro","Spacing"],"kind":"enum"},"1:415:181":{"crate_id":1,"path":["std","thread","local","LocalKey"],"kind":"struct"},"6:5009:8322":{"crate_id":6,"path":["libc","unix","linux_like","linux","rlimit64"],"kind":"struct"},"17:13694:7085":{"crate_id":17,"path":["object","pe","Guid"],"kind":"struct"},"17:11711:6580":{"crate_id":17,"path":["object","read","Relocation"],"kind":"struct"},"6:4947:8281":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_initmsg"],"kind":"struct"},"1:11036:6237":{"crate_id":1,"path":["std","sys","unix","process","process_inner","do_exec","Reset"],"kind":"struct"},"2:21832:10487":{"crate_id":2,"path":["core","core_simd","to_bytes","ToBytes"],"kind":"trait"},"2:46316:9092":{"crate_id":2,"path":["core","core_arch","simd","u32x4"],"kind":"struct"},"18:719:6395":{"crate_id":18,"path":["memchr","memmem","NeedleInfo"],"kind":"struct"},"24:2983:2662":{"crate_id":24,"path":["syn","token","Match"],"kind":"struct"},"24:4500:2177":{"crate_id":24,"path":["syn","attr","Meta"],"kind":"enum"},"2:10215:6192":{"crate_id":2,"path":["core","slice","sort","InsertionHole"],"kind":"struct"},"17:10638:9384":{"crate_id":17,"path":["object","read","elf","attributes","AttributeReader"],"kind":"struct"},"5:7476:32491":{"crate_id":5,"path":["alloc","ffi","c_str","FromBytesWithNulErrorKind"],"kind":"enum"},"1:8974:10135":{"crate_id":1,"path":["std","sync","mpmc","array","ArrayToken"],"kind":"struct"},"24:1748:10147":{"crate_id":24,"path":["syn","print","TokensOrDefault"],"kind":"struct"},"17:9781:22591":{"crate_id":17,"path":["object","read","any","SectionRelocationIterator"],"kind":"struct"},"24:5289:3374":{"crate_id":24,"path":["syn","op","UnOp"],"kind":"enum"},"2:44299:9693":{"crate_id":2,"path":["core","str","pattern","CharArrayRefSearcher"],"kind":"struct"},"2:4082:107":{"crate_id":2,"path":["core","asserting","Capture"],"kind":"struct"},"1:1967:204":{"crate_id":1,"path":["std","ffi","os_str","OsString"],"kind":"struct"},"24:601:3403":{"crate_id":24,"path":["syn","error","IntoIter"],"kind":"struct"},"24:3914:3691":{"crate_id":24,"path":["syn","token","Dollar"],"kind":"struct"},"2:9811:140":{"crate_id":2,"path":["core","fmt","Formatter"],"kind":"struct"},"2:45907:9071":{"crate_id":2,"path":["core","core_arch","simd","u16x2"],"kind":"struct"},"2:44578:9711":{"crate_id":2,"path":["core","str","CharEscapeDefault"],"kind":"struct"},"6:4428:8075":{"crate_id":6,"path":["libc","unix","linux_like","linux","itimerspec"],"kind":"struct"},"2:48104:9168":{"crate_id":2,"path":["core","core_arch","simd","u64x8"],"kind":"struct"},"17:10469:6528":{"crate_id":17,"path":["object","read","elf","version","VersionIndex"],"kind":"struct"},"21:1394:2057":{"crate_id":21,"path":["proc_macro","bridge","symbol","Symbol"],"kind":"struct"},"1:8979:113":{"crate_id":1,"path":["std","sync","mpmc","context","Context"],"kind":"struct"},"11:1917:9563":{"crate_id":11,"path":["hashbrown","set","SymmetricDifference"],"kind":"struct"},"1:8797:10428":{"crate_id":1,"path":["std","process","CommandArgs"],"kind":"struct"},"16:6600:22510":{"crate_id":16,"path":["gimli","read","line","LineInstruction"],"kind":"enum"},"1:9110:158":{"crate_id":1,"path":["std","time","Instant"],"kind":"struct"},"11:687:3408":{"crate_id":11,"path":["hashbrown","map","IterMut"],"kind":"struct"},"1:622:10040":{"crate_id":1,"path":["std","backtrace","Backtrace"],"kind":"struct"},"2:42688:3548":{"crate_id":2,"path":["core","fmt","num","Octal"],"kind":"struct"},"6:4388:8042":{"crate_id":6,"path":["libc","unix","linux_like","linux","dqblk"],"kind":"struct"},"24:5516:3381":{"crate_id":24,"path":["syn","ty","BareVariadic"],"kind":"struct"},"17:10241:6512":{"crate_id":17,"path":["object","read","elf","section","SectionTable"],"kind":"struct"},"13:110:35534":{"crate_id":13,"path":["std_detect","detect","arch","x86","Feature"],"kind":"enum"},"2:7756:3485":{"crate_id":2,"path":["core","iter","traits","collect","Extend"],"kind":"trait"},"16:4835:7408":{"crate_id":16,"path":["gimli","constants","DwInl"],"kind":"struct"},"17:10279:22642":{"crate_id":17,"path":["object","read","elf","section","ElfSection"],"kind":"struct"},"24:4812:3331":{"crate_id":24,"path":["syn","expr","ExprCall"],"kind":"struct"},"1:4702:10404":{"crate_id":1,"path":["std","os","linux","process","ChildExt"],"kind":"trait"},"1:12033:1025":{"crate_id":1,"path":["std","never"],"kind":"primitive"},"21:2242:3425":{"crate_id":21,"path":["proc_macro","bridge","DelimSpan"],"kind":"struct"},"14:160:10026":{"crate_id":14,"path":["rustc_demangle","Demangle"],"kind":"struct"},"24:2231:10285":{"crate_id":24,"path":["syn","spanned","private","Sealed"],"kind":"trait"},"5:1680:6141":{"crate_id":5,"path":["alloc","collections","btree","map","drop","DropGuard"],"kind":"struct"},"5:6599:3403":{"crate_id":5,"path":["alloc","vec","into_iter","IntoIter"],"kind":"struct"},"2:40426:9025":{"crate_id":2,"path":["core","char","TryFromCharError"],"kind":"struct"},"1:504:4547":{"crate_id":1,"path":["std","thread","PanicGuard"],"kind":"struct"},"2:42520:97":{"crate_id":2,"path":["core","sync","atomic","AtomicUsize"],"kind":"struct"},"1:12041:1617":{"crate_id":1,"path":["std","tuple"],"kind":"primitive"},"2:13039:33654":{"crate_id":2,"path":["core","future","join","MaybeDone"],"kind":"enum"},"17:10060:6516":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbol"],"kind":"struct"},"1:9469:135":{"crate_id":1,"path":["std","sys","unix","fs","File"],"kind":"struct"},"6:5085:8355":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_ifr_ifru"],"kind":"union"},"1:10157:2347":{"crate_id":1,"path":["std","sys","unix","os_str","Slice"],"kind":"struct"},"24:2966:2357":{"crate_id":24,"path":["syn","token","Macro"],"kind":"struct"},"17:14356:7268":{"crate_id":17,"path":["object","pe","ImageEnclaveConfig32"],"kind":"struct"},"1:1073:10032":{"crate_id":1,"path":["std","collections","hash","map","OccupiedError"],"kind":"struct"},"1:8867:3403":{"crate_id":1,"path":["std","sync","mpsc","IntoIter"],"kind":"struct"},"17:10266:22643":{"crate_id":17,"path":["object","read","elf","section","ElfSectionIterator"],"kind":"struct"},"11:2124:9531":{"crate_id":11,"path":["hashbrown","set","Entry"],"kind":"enum"},"17:12646:6803":{"crate_id":17,"path":["object","macho","Fvmlib"],"kind":"struct"},"2:9855:3555":{"crate_id":2,"path":["core","fmt","UpperExp"],"kind":"trait"},"17:13779:7103":{"crate_id":17,"path":["object","pe","ImageSymbol"],"kind":"struct"},"1:10842:29817":{"crate_id":1,"path":["std","sys","unix","kernel_copy","SpliceMode"],"kind":"enum"},"17:11317:6583":{"crate_id":17,"path":["object","read","pe","resource","ResourceDirectory"],"kind":"struct"},"2:1961:4676":{"crate_id":2,"path":["core","ptr","unique","Unique"],"kind":"struct"},"24:2745:3656":{"crate_id":24,"path":["syn","token","Do"],"kind":"struct"},"2:2364:207":{"crate_id":2,"path":["core","cmp","PartialEq"],"kind":"trait"},"1:4131:29182":{"crate_id":1,"path":["std","os","unix","net","ancillary","AncillaryDataIter"],"kind":"struct"},"2:2915:3448":{"crate_id":2,"path":["core","ops","arith","AddAssign"],"kind":"trait"},"21:433:6129":{"crate_id":21,"path":["proc_macro","bridge","scoped_cell","replace","PutBackOnDrop"],"kind":"struct"},"24:5158:3365":{"crate_id":24,"path":["syn","lit","LitBool"],"kind":"struct"},"2:42167:89":{"crate_id":2,"path":["core","sync","atomic","AtomicI8"],"kind":"struct"},"17:10904:22698":{"crate_id":17,"path":["object","read","macho","segment","MachOSegmentIterator"],"kind":"struct"},"17:13898:7132":{"crate_id":17,"path":["object","pe","ImageRelocation"],"kind":"struct"},"6:7610:8770":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_condattr_t"],"kind":"struct"},"24:4808:3330":{"crate_id":24,"path":["syn","expr","ExprBreak"],"kind":"struct"},"6:6837:8680":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user_regs_struct"],"kind":"struct"},"5:6112:6161":{"crate_id":5,"path":["alloc","sync","from_iter_exact","Guard"],"kind":"struct"},"21:1819:4789":{"crate_id":21,"path":["proc_macro","bridge","Marked"],"kind":"struct"},"2:46138:9080":{"crate_id":2,"path":["core","core_arch","simd","i32x2"],"kind":"struct"},"17:11282:6579":{"crate_id":17,"path":["object","read","pe","relocation","RelocationBlockIterator"],"kind":"struct"},"2:21827:10285":{"crate_id":2,"path":["core","core_simd","to_bytes","sealed","Sealed"],"kind":"trait"},"17:8979:22583":{"crate_id":17,"path":["object","common","SectionFlags"],"kind":"enum"},"6:4516:8114":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_mask"],"kind":"struct"},"17:11001:6569":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbolTable"],"kind":"struct"},"24:2643:2024":{"crate_id":24,"path":["syn","token","Box"],"kind":"struct"},"2:2580:159":{"crate_id":2,"path":["core","convert","Into"],"kind":"trait"},"17:8826:22578":{"crate_id":17,"path":["object","common","SymbolScope"],"kind":"enum"},"16:7318:7508":{"crate_id":16,"path":["gimli","read","op","Piece"],"kind":"struct"},"7:0:1681":{"crate_id":7,"path":["unwind"],"kind":"module"},"17:9661:35597":{"crate_id":17,"path":["object","read","any","SymbolTableInternal"],"kind":"enum"},"6:1514:7878":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreq_source"],"kind":"struct"},"16:4462:7397":{"crate_id":16,"path":["gimli","constants","DwAte"],"kind":"struct"},"1:724:150":{"crate_id":1,"path":["std","collections","hash","map","HashMap"],"kind":"struct"},"5:3748:10212":{"crate_id":5,"path":["alloc","collections","linked_list","CursorMut"],"kind":"struct"},"2:46554:9100":{"crate_id":2,"path":["core","core_arch","simd","f64x4"],"kind":"struct"},"5:4361:270":{"crate_id":5,"path":["alloc","collections","vec_deque","VecDeque"],"kind":"struct"},"24:5359:2528":{"crate_id":24,"path":["syn","path","QSelf"],"kind":"struct"},"2:40557:3488":{"crate_id":2,"path":["core","iter","adapters","array_chunks","ArrayChunks"],"kind":"struct"},"1:11309:9746":{"crate_id":1,"path":["std","sys_common","process","CommandEnv"],"kind":"struct"},"17:12555:6789":{"crate_id":17,"path":["object","macho","SegmentCommand32"],"kind":"struct"},"2:3287:143":{"crate_id":2,"path":["core","ops","try_trait","FromResidual"],"kind":"trait"},"6:4566:8140":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_periodic_effect"],"kind":"struct"},"2:44159:9620":{"crate_id":2,"path":["core","str","iter","EscapeDefault"],"kind":"struct"},"5:1531:10211":{"crate_id":5,"path":["alloc","collections","btree","map","RangeMut"],"kind":"struct"},"6:7598:8768":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_mutexattr_t"],"kind":"struct"},"6:5004:8320":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_authinfo"],"kind":"struct"},"1:5748:10441":{"crate_id":1,"path":["std","sync","barrier","Barrier"],"kind":"struct"},"2:21197:33489":{"crate_id":2,"path":["core","core_simd","swizzle","interleave","Hi"],"kind":"struct"},"2:44574:9710":{"crate_id":2,"path":["core","str","CharEscapeUnicode"],"kind":"struct"},"5:4406:6161":{"crate_id":5,"path":["alloc","collections","vec_deque","write_iter_wrapping","Guard"],"kind":"struct"},"1:8309:9232":{"crate_id":1,"path":["std","os","unix","ucred","UCred"],"kind":"struct"},"11:1566:21569":{"crate_id":11,"path":["hashbrown","rustc_entry","RustcEntry"],"kind":"enum"},"16:8115:9546":{"crate_id":16,"path":["gimli","read","unit","EntriesCursor"],"kind":"struct"},"1:1542:4768":{"crate_id":1,"path":["std","collections","hash","set","Drain"],"kind":"struct"},"17:12532:6786":{"crate_id":17,"path":["object","macho","LoadCommand"],"kind":"struct"},"17:10727:22731":{"crate_id":17,"path":["object","read","macho","file","MachOComdat"],"kind":"struct"},"1:7028:6229":{"crate_id":1,"path":["std","sys_common","lazy_box","LazyBox"],"kind":"struct"},"5:1019:6141":{"crate_id":5,"path":["alloc","collections","binary_heap","drop","DropGuard"],"kind":"struct"},"6:4595:8154":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_ff_upload"],"kind":"struct"},"17:13711:7086":{"crate_id":17,"path":["object","pe","AnonObjectHeader"],"kind":"struct"},"2:13091:15693":{"crate_id":2,"path":["core","future","poll_fn","PollFn"],"kind":"struct"},"1:915:10128":{"crate_id":1,"path":["std","collections","hash","map","IntoKeys"],"kind":"struct"},"17:9243:6499":{"crate_id":17,"path":["object","endian","I32Bytes"],"kind":"struct"},"1:7896:125":{"crate_id":1,"path":["std","fs","DirBuilder"],"kind":"struct"},"2:45841:9068":{"crate_id":2,"path":["core","core_arch","simd","u8x2"],"kind":"struct"},"2:12180:9673":{"crate_id":2,"path":["core","str","iter","MatchIndicesInternal"],"kind":"struct"},"17:13011:6873":{"crate_id":17,"path":["object","macho","LinkeditDataCommand"],"kind":"struct"},"2:32398:33301":{"crate_id":2,"path":["core","error","tags","MaybeSizedValue"],"kind":"struct"},"5:2251:9573":{"crate_id":5,"path":["alloc","collections","btree","navigate","LazyLeafRange"],"kind":"struct"},"1:10323:111":{"crate_id":1,"path":["std","sys","unix","process","process_common","Command"],"kind":"struct"},"2:10500:245":{"crate_id":2,"path":["core","slice","index","SliceIndex"],"kind":"trait"},"17:10508:9373":{"crate_id":17,"path":["object","read","elf","version","VerdefIterator"],"kind":"struct"},"2:9851:212":{"crate_id":2,"path":["core","fmt","Pointer"],"kind":"trait"},"24:2592:3652":{"crate_id":24,"path":["syn","token","Auto"],"kind":"struct"},"16:6721:22511":{"crate_id":16,"path":["gimli","read","line","ColumnType"],"kind":"enum"},"20:738:1976":{"crate_id":20,"path":["proc_macro2","fallback","Ident"],"kind":"struct"},"17:10013:6520":{"crate_id":17,"path":["object","read","coff","symbol","SymbolTable"],"kind":"struct"},"2:3282:260":{"crate_id":2,"path":["core","ops","try_trait","Try"],"kind":"trait"},"24:4906:3352":{"crate_id":24,"path":["syn","expr","ExprStruct"],"kind":"struct"},"17:12209:6704":{"crate_id":17,"path":["object","elf","Verdef"],"kind":"struct"},"2:21423:10481":{"crate_id":2,"path":["core","core_simd","lane_count","LaneCount"],"kind":"struct"},"1:10794:9187":{"crate_id":1,"path":["std","sys","unix","fs","FileTimes"],"kind":"struct"},"17:9934:22619":{"crate_id":17,"path":["object","read","coff","file","CoffFile"],"kind":"struct"},"5:687:116":{"crate_id":5,"path":["alloc","borrow","Cow"],"kind":"enum"},"16:7523:9536":{"crate_id":16,"path":["gimli","read","pubtypes","PubTypesEntry"],"kind":"struct"},"1:8331:8638":{"crate_id":1,"path":["std","os","linux","raw","arch","stat"],"kind":"struct"},"16:2596:7347":{"crate_id":16,"path":["gimli","common","DebugLocListsIndex"],"kind":"struct"},"6:7657:8780":{"crate_id":6,"path":["libc","unix","linux_like","linux","can_frame"],"kind":"struct"},"24:3051:3670":{"crate_id":24,"path":["syn","token","Override"],"kind":"struct"},"5:4015:4768":{"crate_id":5,"path":["alloc","collections","vec_deque","drain","Drain"],"kind":"struct"},"2:43775:15632":{"crate_id":2,"path":["core","slice","iter","RChunksExactMut"],"kind":"struct"},"17:10317:6525":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbolTable"],"kind":"struct"},"2:23197:187":{"crate_id":2,"path":["core","num","nonzero","NonZeroI16"],"kind":"struct"},"11:673:3404":{"crate_id":11,"path":["hashbrown","map","Iter"],"kind":"struct"},"21:0:1166":{"crate_id":21,"path":["proc_macro"],"kind":"module"},"24:2796:1989":{"crate_id":24,"path":["syn","token","Enum"],"kind":"struct"},"16:5995:9405":{"crate_id":16,"path":["gimli","read","cfi","UnwindTableRow"],"kind":"struct"},"21:2427:2044":{"crate_id":21,"path":["proc_macro","bridge","TokenTree"],"kind":"enum"},"24:4867:3343":{"crate_id":24,"path":["syn","expr","ExprLoop"],"kind":"struct"},"4:0:3162":{"crate_id":4,"path":["rustc_std_workspace_core"],"kind":"module"},"2:11491:15631":{"crate_id":2,"path":["core","slice","iter","GroupByMut"],"kind":"struct"},"17:11640:6577":{"crate_id":17,"path":["object","read","Export"],"kind":"struct"},"1:1744:653":{"crate_id":1,"path":["std","env"],"kind":"module"},"6:4824:8223":{"crate_id":6,"path":["libc","unix","linux_like","linux","regmatch_t"],"kind":"struct"},"2:40407:15685":{"crate_id":2,"path":["core","char","CaseMappingIter"],"kind":"enum"},"24:346:35952":{"crate_id":24,"path":["syn","buffer","empty","UnsafeSyncEntry"],"kind":"struct"},"17:10930:6565":{"crate_id":17,"path":["object","read","macho","segment","MachOSegmentInternal"],"kind":"struct"},"17:14119:7188":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation32"],"kind":"struct"},"17:13668:7079":{"crate_id":17,"path":["object","pe","ImageNtHeaders64"],"kind":"struct"},"2:42440:95":{"crate_id":2,"path":["core","sync","atomic","AtomicU64"],"kind":"struct"},"11:1007:9531":{"crate_id":11,"path":["hashbrown","map","Entry"],"kind":"enum"},"24:3272:3676":{"crate_id":24,"path":["syn","token","Typeof"],"kind":"struct"},"1:9100:240":{"crate_id":1,"path":["std","sync","rwlock","RwLockReadGuard"],"kind":"struct"},"2:43241:9658":{"crate_id":2,"path":["core","hash","sip","Sip24Rounds"],"kind":"struct"},"6:6100:8543":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ptrace_peeksiginfo_args"],"kind":"struct"},"2:40586:3499":{"crate_id":2,"path":["core","iter","adapters","chain","Chain"],"kind":"struct"},"24:4298:3717":{"crate_id":24,"path":["syn","token","RArrow"],"kind":"struct"},"24:5068:3037":{"crate_id":24,"path":["syn","generics","WhereClause"],"kind":"struct"},"6:5111:8372":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_ifc_ifcu"],"kind":"union"},"24:261:10025":{"crate_id":24,"path":["syn","attr","parsing","DisplayPath"],"kind":"struct"},"2:48169:9171":{"crate_id":2,"path":["core","core_arch","x86","__m128"],"kind":"struct"},"13:0:3161":{"crate_id":13,"path":["std_detect"],"kind":"module"},"24:2626:3654":{"crate_id":24,"path":["syn","token","Become"],"kind":"struct"},"2:21212:33497":{"crate_id":2,"path":["core","core_simd","swizzle","deinterleave","Even"],"kind":"struct"},"24:3085:3672":{"crate_id":24,"path":["syn","token","Pub"],"kind":"struct"},"2:41853:9651":{"crate_id":2,"path":["core","net","parser","AddrParseError"],"kind":"struct"},"6:574:7853":{"crate_id":6,"path":["libc","unix","itimerval"],"kind":"struct"},"24:3323:3678":{"crate_id":24,"path":["syn","token","Unsized"],"kind":"struct"},"1:8563:9733":{"crate_id":1,"path":["std","path","StripPrefixError"],"kind":"struct"},"2:3299:15667":{"crate_id":2,"path":["core","ops","try_trait","NeverShortCircuit"],"kind":"struct"},"5:5956:71":{"crate_id":5,"path":["alloc","sync","Arc"],"kind":"struct"},"1:5130:210":{"crate_id":1,"path":["std","path","PathBuf"],"kind":"struct"},"24:2915:3664":{"crate_id":24,"path":["syn","token","In"],"kind":"struct"},"16:7613:22518":{"crate_id":16,"path":["gimli","read","rnglists","RawRngListIter"],"kind":"struct"},"1:1822:10233":{"crate_id":1,"path":["std","env","ArgsOs"],"kind":"struct"},"5:7613:4766":{"crate_id":5,"path":["alloc","vec","extract_if","ExtractIf"],"kind":"struct"},"2:42005:3403":{"crate_id":2,"path":["core","option","IntoIter"],"kind":"struct"},"2:9849:3557":{"crate_id":2,"path":["core","fmt","UpperHex"],"kind":"trait"},"21:107:4799":{"crate_id":21,"path":["proc_macro","bridge","client","Bridge"],"kind":"struct"},"17:10950:22695":{"crate_id":17,"path":["object","read","macho","section","MachOSection"],"kind":"struct"},"6:1697:7996":{"crate_id":6,"path":["libc","unix","linux_like","epoll_event"],"kind":"struct"},"24:3136:3673":{"crate_id":24,"path":["syn","token","SelfType"],"kind":"struct"},"2:2827:115":{"crate_id":2,"path":["core","marker","Copy"],"kind":"trait"},"17:11508:22595":{"crate_id":17,"path":["object","read","SymbolSection"],"kind":"enum"},"1:3445:10282":{"crate_id":1,"path":["std","io","IoSliceMut"],"kind":"struct"},"17:10293:6520":{"crate_id":17,"path":["object","read","elf","symbol","SymbolTable"],"kind":"struct"},"17:14379:7281":{"crate_id":17,"path":["object","pe","ImageEnclaveConfig64"],"kind":"struct"},"24:5503:3393":{"crate_id":24,"path":["syn","ty","TypeTraitObject"],"kind":"struct"},"1:6985:10049":{"crate_id":1,"path":["std","sys_common","backtrace","_print","DisplayBacktrace"],"kind":"struct"},"17:11075:22763":{"crate_id":17,"path":["object","read","pe","file","PeComdat"],"kind":"struct"},"17:9575:35607":{"crate_id":17,"path":["object","read","any","ComdatIteratorInternal"],"kind":"enum"},"2:40739:3510":{"crate_id":2,"path":["core","iter","adapters","scan","Scan"],"kind":"struct"},"2:47360:9129":{"crate_id":2,"path":["core","core_arch","simd","i8x64"],"kind":"struct"},"1:4966:3969":{"crate_id":1,"path":["std","panic","always_abort"],"kind":"function"},"17:14500:7307":{"crate_id":17,"path":["object","pe","NonPagedDebugInfo"],"kind":"struct"},"6:1639:7961":{"crate_id":6,"path":["libc","unix","linux_like","ifaddrs"],"kind":"struct"},"2:44150:9626":{"crate_id":2,"path":["core","str","iter","EscapeDebug"],"kind":"struct"},"24:5316:2342":{"crate_id":24,"path":["syn","path","GenericArgument"],"kind":"enum"},"24:5104:2053":{"crate_id":24,"path":["syn","lifetime","Lifetime"],"kind":"function"},"2:43663:15628":{"crate_id":2,"path":["core","slice","iter","ChunksMut"],"kind":"struct"},"5:2139:4547":{"crate_id":5,"path":["alloc","collections","btree","mem","replace","PanicGuard"],"kind":"struct"},"24:3793:3683":{"crate_id":24,"path":["syn","token","And"],"kind":"struct"},"17:14043:7166":{"crate_id":17,"path":["object","pe","ImageDelayloadDescriptor"],"kind":"struct"},"6:6666:8610":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statfs"],"kind":"struct"},"1:8454:9051":{"crate_id":1,"path":["std","path","State"],"kind":"enum"},"6:4884:8251":{"crate_id":6,"path":["libc","unix","linux_like","linux","seccomp_data"],"kind":"struct"},"6:5015:8323":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_nl"],"kind":"struct"},"16:2526:7344":{"crate_id":16,"path":["gimli","common","DebugLineStrOffset"],"kind":"struct"},"2:44602:9062":{"crate_id":2,"path":["core","time","Nanoseconds"],"kind":"struct"},"2:0:528":{"crate_id":2,"path":["core"],"kind":"module"},"16:5588:7365":{"crate_id":16,"path":["gimli","read","cfi","DebugFrame"],"kind":"struct"},"5:4439:6163":{"crate_id":5,"path":["alloc","collections","vec_deque","truncate","Dropper"],"kind":"struct"},"6:7622:8772":{"crate_id":6,"path":["libc","unix","linux_like","linux","fanotify_event_metadata"],"kind":"struct"},"2:22580:9608":{"crate_id":2,"path":["core","num","dec2flt","ParseFloatError"],"kind":"struct"},"16:6318:7433":{"crate_id":16,"path":["gimli","read","reader","ReaderOffsetId"],"kind":"struct"},"20:15:4977":{"crate_id":20,"path":["proc_macro2","marker","ProcMacroAutoTraits"],"kind":"struct"},"2:22698:9610":{"crate_id":2,"path":["core","num","fmt","Formatted"],"kind":"struct"},"2:46175:9082":{"crate_id":2,"path":["core","core_arch","simd","f32x2"],"kind":"struct"},"2:7070:2790":{"crate_id":2,"path":["core","iter","adapters","zip","zip"],"kind":"function"},"6:1710:8000":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_storage"],"kind":"struct"},"2:46286:9091":{"crate_id":2,"path":["core","core_arch","simd","u16x8"],"kind":"struct"},"5:6998:6178":{"crate_id":5,"path":["alloc","vec","retain_mut","BackshiftOnDrop"],"kind":"struct"},"2:40669:3505":{"crate_id":2,"path":["core","iter","adapters","fuse","Fuse"],"kind":"struct"},"17:12155:6698":{"crate_id":17,"path":["object","elf","ProgramHeader64"],"kind":"struct"},"24:0:1815":{"crate_id":24,"path":["syn"],"kind":"module"},"2:47100:9125":{"crate_id":2,"path":["core","core_arch","simd","i16x16"],"kind":"struct"},"2:8248:33784":{"crate_id":2,"path":["core","net","display_buffer","DisplayBuffer"],"kind":"struct"},"1:8546:3404":{"crate_id":1,"path":["std","path","Iter"],"kind":"struct"},"1:8191:3499":{"crate_id":1,"path":["std","io","Chain"],"kind":"struct"},"16:2933:21642":{"crate_id":16,"path":["gimli","common","UnitSectionOffset"],"kind":"enum"},"2:1481:2526":{"crate_id":2,"path":["core","mem"],"kind":"module"},"2:9638:3546":{"crate_id":2,"path":["core","fmt","builders","FormatterFn"],"kind":"struct"},"2:40599:3490":{"crate_id":2,"path":["core","iter","adapters","cloned","Cloned"],"kind":"struct"},"21:2640:3587":{"crate_id":21,"path":["proc_macro","ExpandError"],"kind":"struct"},"1:8214:9592":{"crate_id":1,"path":["std","io","Split"],"kind":"struct"},"2:47818:9163":{"crate_id":2,"path":["core","core_arch","simd","u16x32"],"kind":"struct"},"6:5921:8444":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","cmsghdr"],"kind":"struct"},"11:490:150":{"crate_id":11,"path":["hashbrown","map","HashMap"],"kind":"struct"},"2:10648:3404":{"crate_id":2,"path":["core","slice","iter","Iter"],"kind":"struct"},"1:7924:10046":{"crate_id":1,"path":["std","io","buffered","IntoInnerError"],"kind":"struct"},"2:10945:9672":{"crate_id":2,"path":["core","slice","iter","RSplitN"],"kind":"struct"},"21:367:4793":{"crate_id":21,"path":["proc_macro","bridge","rpc","PanicMessage"],"kind":"enum"},"2:46652:9102":{"crate_id":2,"path":["core","core_arch","simd","m16x8"],"kind":"struct"},"5:3220:9561":{"crate_id":5,"path":["alloc","collections","btree","set","Intersection"],"kind":"struct"},"5:7271:3403":{"crate_id":5,"path":["alloc","collections","binary_heap","IntoIter"],"kind":"struct"},"5:7492:9581":{"crate_id":5,"path":["alloc","ffi","c_str","FromVecWithNulError"],"kind":"struct"},"16:6189:9474":{"crate_id":16,"path":["gimli","read","cfi","PointerEncodingParameters"],"kind":"struct"},"2:3080:138":{"crate_id":2,"path":["core","ops","function","FnMut"],"kind":"trait"},"2:44820:9787":{"crate_id":2,"path":["core","task","wake","RawWaker"],"kind":"struct"},"17:12075:6682":{"crate_id":17,"path":["object","elf","Syminfo64"],"kind":"struct"},"2:2369:131":{"crate_id":2,"path":["core","cmp","Eq"],"kind":"trait"},"5:6866:4774":{"crate_id":5,"path":["alloc","vec","in_place_drop","InPlaceDstBufDrop"],"kind":"struct"},"2:44134:9682":{"crate_id":2,"path":["core","str","iter","SplitAsciiWhitespace"],"kind":"struct"},"2:43973:9672":{"crate_id":2,"path":["core","str","iter","RSplitN"],"kind":"struct"},"11:1603:21571":{"crate_id":11,"path":["hashbrown","rustc_entry","RustcVacantEntry"],"kind":"struct"},"17:14084:7180":{"crate_id":17,"path":["object","pe","ImageResourceDirStringU"],"kind":"struct"},"2:2583:141":{"crate_id":2,"path":["core","convert","From"],"kind":"trait"},"16:7554:7377":{"crate_id":16,"path":["gimli","read","rnglists","DebugRanges"],"kind":"struct"},"9:237:9051":{"crate_id":9,"path":["miniz_oxide","inflate","core","State"],"kind":"enum"},"1:5433:10425":{"crate_id":1,"path":["std","process","ChildStderr"],"kind":"struct"},"15:327:10104":{"crate_id":15,"path":["addr2line","RangeAttributes"],"kind":"struct"},"5:2974:3669":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Mut"],"kind":"struct"},"6:4686:8175":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Phdr"],"kind":"struct"},"6:5982:8474":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_mmap_hdr"],"kind":"struct"},"17:10187:9369":{"crate_id":17,"path":["object","read","coff","import","ImportObjectData"],"kind":"struct"},"1:8829:9252":{"crate_id":1,"path":["std","process","ExitStatusError"],"kind":"struct"},"2:30621:3545":{"crate_id":2,"path":["core","ptr","alignment","Alignment"],"kind":"struct"},"6:6169:8561":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","utmpx"],"kind":"struct"},"1:919:10129":{"crate_id":1,"path":["std","collections","hash","map","IntoValues"],"kind":"struct"},"11:856:10206":{"crate_id":11,"path":["hashbrown","map","RawOccupiedEntryMut"],"kind":"struct"},"17:13793:7107":{"crate_id":17,"path":["object","pe","ImageSymbolBytes"],"kind":"struct"},"17:13149:6903":{"crate_id":17,"path":["object","macho","SymsegCommand"],"kind":"struct"},"16:7284:3977":{"crate_id":16,"path":["gimli","read","op","Location"],"kind":"enum"},"24:4886:2244":{"crate_id":24,"path":["syn","expr","ExprPath"],"kind":"struct"},"11:800:4768":{"crate_id":11,"path":["hashbrown","map","Drain"],"kind":"struct"},"1:7733:10199":{"crate_id":1,"path":["std","backtrace","RawFrame"],"kind":"enum"},"21:2636:3422":{"crate_id":21,"path":["proc_macro","LexError"],"kind":"struct"},"6:5123:8378":{"crate_id":6,"path":["libc","unix","linux_like","linux","hwtstamp_config"],"kind":"struct"},"17:12811:6827":{"crate_id":17,"path":["object","macho","RoutinesCommand64"],"kind":"struct"},"1:4493:10378":{"crate_id":1,"path":["std","os","unix","process","ExitStatusExt"],"kind":"trait"},"1:9049:26967":{"crate_id":1,"path":["std","sync","mpmc","select","Selected"],"kind":"enum"},"6:6263:8598":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","semid_ds"],"kind":"struct"},"2:9793:3553":{"crate_id":2,"path":["core","fmt","Write"],"kind":"trait"},"17:11972:6666":{"crate_id":17,"path":["object","elf","SectionHeader64"],"kind":"struct"},"17:12008:6671":{"crate_id":17,"path":["object","elf","CompressionHeader64"],"kind":"struct"},"16:2321:7329":{"crate_id":16,"path":["gimli","common","Encoding"],"kind":"struct"},"6:6691:8628":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","flock64"],"kind":"struct"},"17:13869:7124":{"crate_id":17,"path":["object","pe","ImageAuxSymbolWeak"],"kind":"struct"},"24:5019:3361":{"crate_id":24,"path":["syn","generics","ConstParam"],"kind":"struct"},"17:10617:9381":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSubsubsection"],"kind":"struct"},"1:8960:9258":{"crate_id":1,"path":["std","sync","condvar","WaitTimeoutResult"],"kind":"struct"},"17:3565:22715":{"crate_id":17,"path":["object","read","macho","relocation","MachORelocationIterator"],"kind":"struct"},"24:3897:3690":{"crate_id":24,"path":["syn","token","Comma"],"kind":"struct"},"6:7702:8791":{"crate_id":6,"path":["libc","unix","align","in6_addr"],"kind":"struct"},"2:30691:32488":{"crate_id":2,"path":["core","ptr","alignment","AlignmentEnum32"],"kind":"enum"},"2:43821:9662":{"crate_id":2,"path":["core","str","iter","Chars"],"kind":"struct"},"20:792:258":{"crate_id":20,"path":["proc_macro2","imp","TokenStream"],"kind":"enum"},"2:44282:9692":{"crate_id":2,"path":["core","str","pattern","CharArraySearcher"],"kind":"struct"},"24:1337:35962":{"crate_id":24,"path":["syn","lookahead","TokenMarker"],"kind":"enum"},"17:13041:6878":{"crate_id":17,"path":["object","macho","EncryptionInfoCommand32"],"kind":"struct"},"5:3576:179":{"crate_id":5,"path":["alloc","collections","linked_list","LinkedList"],"kind":"struct"},"1:7600:6233":{"crate_id":1,"path":["std","backtrace_rs","Bomb"],"kind":"struct"},"17:9208:6498":{"crate_id":17,"path":["object","endian","I16Bytes"],"kind":"struct"},"18:96:26599":{"crate_id":18,"path":["memchr","memchr","iter","Memchr2"],"kind":"struct"},"2:4682:15678":{"crate_id":2,"path":["core","char","REPLACEMENT_CHARACTER"],"kind":"constant"},"2:43233:9657":{"crate_id":2,"path":["core","hash","sip","Sip13Rounds"],"kind":"struct"},"1:9129:9263":{"crate_id":1,"path":["std","time","SystemTime"],"kind":"struct"},"17:12699:6812":{"crate_id":17,"path":["object","macho","SubFrameworkCommand"],"kind":"struct"},"5:1490:10203":{"crate_id":5,"path":["alloc","collections","btree","map","ValuesMut"],"kind":"struct"},"24:4822:3333":{"crate_id":24,"path":["syn","expr","ExprClosure"],"kind":"struct"},"2:40608:3491":{"crate_id":2,"path":["core","iter","adapters","copied","Copied"],"kind":"struct"},"11:2403:3408":{"crate_id":11,"path":["hashbrown","table","IterMut"],"kind":"struct"},"6:4496:8105":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_absinfo"],"kind":"struct"},"1:8208:2952":{"crate_id":1,"path":["std","io","Bytes"],"kind":"struct"},"16:6583:9495":{"crate_id":16,"path":["gimli","read","line","LineRows"],"kind":"struct"},"6:1576:7913":{"crate_id":6,"path":["libc","unix","linux_like","tm"],"kind":"struct"},"2:43211:153":{"crate_id":2,"path":["core","hash","sip","Hasher"],"kind":"struct"},"24:872:35961":{"crate_id":24,"path":["syn","generics","Lifetimes"],"kind":"struct"},"23:150:4000":{"crate_id":23,"path":["quote","__private","ThereIsNoIteratorInRepetition"],"kind":"struct"},"24:845:10285":{"crate_id":24,"path":["syn","ext","private","Sealed"],"kind":"trait"},"2:2927:6353":{"crate_id":2,"path":["core","ops","arith","DivAssign"],"kind":"trait"},"17:10371:22640":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdatIterator"],"kind":"struct"},"2:46706:9104":{"crate_id":2,"path":["core","core_arch","simd","m64x2"],"kind":"struct"},"2:2877:112":{"crate_id":2,"path":["core","marker","ConstParamTy"],"kind":"trait"},"17:13299:6927":{"crate_id":17,"path":["object","macho","ScatteredRelocationInfo"],"kind":"struct"},"1:9276:4842":{"crate_id":1,"path":["std","sys","unix","args","Args"],"kind":"struct"},"2:10779:15629":{"crate_id":2,"path":["core","slice","iter","SplitMut"],"kind":"struct"},"18:548:149":{"crate_id":18,"path":["memchr","memmem","rabinkarp","Hash"],"kind":"struct"},"24:1975:3406":{"crate_id":24,"path":["syn","punctuated","PrivateIter"],"kind":"struct"},"2:12157:9670":{"crate_id":2,"path":["core","str","iter","SplitNInternal"],"kind":"struct"},"1:10955:10426":{"crate_id":1,"path":["std","sys","unix","process","process_common","Stdio"],"kind":"enum"},"20:360:3422":{"crate_id":20,"path":["proc_macro2","imp","LexError"],"kind":"enum"},"16:149:6131":{"crate_id":16,"path":["gimli","read","util","ArrayVec"],"kind":"struct"},"17:8795:22577":{"crate_id":17,"path":["object","common","SymbolKind"],"kind":"enum"},"17:12185:6702":{"crate_id":17,"path":["object","elf","Dyn64"],"kind":"struct"},"1:9187:27536":{"crate_id":1,"path":["std","sys","common","thread_local","fast_local","DtorState"],"kind":"enum"},"2:12420:15641":{"crate_id":2,"path":["core","str","pattern","Pattern"],"kind":"trait"},"11:2140:10209":{"crate_id":11,"path":["hashbrown","set","OccupiedEntry"],"kind":"struct"},"6:5955:8467":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","mallinfo2"],"kind":"struct"},"2:21981:10483":{"crate_id":2,"path":["core","core_simd","vector","SimdElement"],"kind":"trait"},"24:4847:3339":{"crate_id":24,"path":["syn","expr","ExprIf"],"kind":"struct"},"6:5891:8434":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__timeval"],"kind":"struct"},"24:1864:3400":{"crate_id":24,"path":["syn","punctuated","Pairs"],"kind":"struct"},"24:4489:3307":{"crate_id":24,"path":["syn","attr","Attribute"],"kind":"struct"},"2:12120:9665":{"crate_id":2,"path":["core","str","iter","SplitInternal"],"kind":"struct"},"17:10166:22635":{"crate_id":17,"path":["object","read","coff","import","ImportType"],"kind":"enum"},"6:6764:8657":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statfs64"],"kind":"struct"},"1:11236:158":{"crate_id":1,"path":["std","sys","unix","time","Instant"],"kind":"struct"},"2:2316:110":{"crate_id":2,"path":["core","clone","Clone"],"kind":"trait"},"5:2968:34560":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Dying"],"kind":"enum"},"2:13260:148":{"crate_id":2,"path":["core","alloc","global","GlobalAlloc"],"kind":"trait"},"1:8158:9228":{"crate_id":1,"path":["std","io","IoSlice"],"kind":"struct"},"6:6913:8728":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","shmid_ds"],"kind":"struct"},"1:1568:2013":{"crate_id":1,"path":["std","collections","hash","set","Union"],"kind":"struct"},"1:10804:136":{"crate_id":1,"path":["std","sys","unix","fs","FileType"],"kind":"struct"},"2:21368:10285":{"crate_id":2,"path":["core","core_simd","cast","sealed","Sealed"],"kind":"trait"},"11:1582:21570":{"crate_id":11,"path":["hashbrown","rustc_entry","RustcOccupiedEntry"],"kind":"struct"},"2:11940:15781":{"crate_id":2,"path":["core","slice","SlicePattern"],"kind":"trait"},"1:5627:226":{"crate_id":1,"path":["std","sync","mpsc","Receiver"],"kind":"struct"},"24:1490:3529":{"crate_id":24,"path":["syn","parse","ParseBuffer"],"kind":"struct"},"24:896:35960":{"crate_id":24,"path":["syn","generics","TypeParamsMut"],"kind":"struct"},"24:3408:273":{"crate_id":24,"path":["syn","token","Yield"],"kind":"struct"},"5:5339:6141":{"crate_id":5,"path":["alloc","slice","hack","to_vec","DropGuard"],"kind":"struct"},"17:13967:7148":{"crate_id":17,"path":["object","pe","ImageImportByName"],"kind":"struct"},"16:2406:7339":{"crate_id":16,"path":["gimli","common","DebugAddrBase"],"kind":"struct"},"16:7660:7531":{"crate_id":16,"path":["gimli","read","rnglists","RawRange"],"kind":"struct"},"16:2670:7350":{"crate_id":16,"path":["gimli","common","RawRangeListsOffset"],"kind":"struct"},"24:5521:2529":{"crate_id":24,"path":["syn","ty","ReturnType"],"kind":"enum"},"2:39466:4675":{"crate_id":2,"path":["core","ops","coroutine","CoroutineState"],"kind":"enum"},"17:12544:6788":{"crate_id":17,"path":["object","macho","LcStr"],"kind":"struct"},"16:7006:22514":{"crate_id":16,"path":["gimli","read","loclists","LocListIter"],"kind":"struct"},"17:11328:9399":{"crate_id":17,"path":["object","read","pe","resource","ResourceDirectoryTable"],"kind":"struct"},"6:580:7856":{"crate_id":6,"path":["libc","unix","tms"],"kind":"struct"},"10:36:7716":{"crate_id":10,"path":["adler","algo","U32X4"],"kind":"struct"},"6:1691:7993":{"crate_id":6,"path":["libc","unix","linux_like","mmsghdr"],"kind":"struct"},"2:2982:6358":{"crate_id":2,"path":["core","ops","bit","ShlAssign"],"kind":"trait"},"2:48020:9166":{"crate_id":2,"path":["core","core_arch","simd","f32x16"],"kind":"struct"},"17:10629:9383":{"crate_id":17,"path":["object","read","elf","attributes","AttributeIndexIterator"],"kind":"struct"},"2:40279:9620":{"crate_id":2,"path":["core","ascii","EscapeDefault"],"kind":"struct"},"16:5963:22505":{"crate_id":16,"path":["gimli","read","cfi","UnwindTable"],"kind":"struct"},"1:3996:10348":{"crate_id":1,"path":["std","os","unix","fs","MetadataExt"],"kind":"trait"},"24:5500:3392":{"crate_id":24,"path":["syn","ty","TypeSlice"],"kind":"struct"},"2:1763:8799":{"crate_id":2,"path":["core","ptr","metadata","PtrComponents"],"kind":"struct"},"17:2178:22641":{"crate_id":17,"path":["object","read","elf","relocation","ElfDynamicRelocationIterator"],"kind":"struct"},"17:11618:6609":{"crate_id":17,"path":["object","read","Import"],"kind":"struct"},"17:10521:9374":{"crate_id":17,"path":["object","read","elf","version","VerdauxIterator"],"kind":"struct"},"24:5307:2339":{"crate_id":24,"path":["syn","path","PathArguments"],"kind":"enum"},"2:44598:9716":{"crate_id":2,"path":["core","str","UnsafeBytesToStr"],"kind":"struct"},"1:7541:10050":{"crate_id":1,"path":["std","backtrace_rs","symbolize","SymbolName"],"kind":"struct"},"21:183:4417":{"crate_id":21,"path":["proc_macro","bridge","closure","Closure"],"kind":"struct"},"6:1664:7980":{"crate_id":6,"path":["libc","unix","linux_like","arpreq"],"kind":"struct"},"2:2953:6337":{"crate_id":2,"path":["core","ops","bit","BitXor"],"kind":"trait"},"5:6008:16012":{"crate_id":5,"path":["alloc","sync","ArcInner"],"kind":"struct"},"16:5866:9433":{"crate_id":16,"path":["gimli","read","cfi","PartialFrameDescriptionEntry"],"kind":"struct"},"6:4647:8172":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Ehdr"],"kind":"struct"},"24:3255:1959":{"crate_id":24,"path":["syn","token","Type"],"kind":"struct"},"17:9702:22589":{"crate_id":17,"path":["object","read","any","SymbolIterator"],"kind":"struct"},"2:44566:9708":{"crate_id":2,"path":["core","str","LinesMap"],"kind":"struct"},"16:2832:7357":{"crate_id":16,"path":["gimli","common","DebugTypesOffset"],"kind":"struct"},"5:7445:4561":{"crate_id":5,"path":["alloc","ffi","c_str","CString"],"kind":"struct"},"6:6718:8638":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stat"],"kind":"struct"},"5:7262:4681":{"crate_id":5,"path":["alloc","alloc","Global"],"kind":"struct"},"24:888:35957":{"crate_id":24,"path":["syn","generics","TypeParams"],"kind":"struct"},"6:5885:8431":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__exit_status"],"kind":"struct"},"2:9847:3556":{"crate_id":2,"path":["core","fmt","LowerHex"],"kind":"trait"},"24:4791:3326":{"crate_id":24,"path":["syn","expr","ExprAsync"],"kind":"struct"},"2:32499:4329":{"crate_id":2,"path":["core","marker","PhantomPinned"],"kind":"struct"},"6:1734:8009":{"crate_id":6,"path":["libc","unix","linux_like","sigevent"],"kind":"struct"},"17:12935:6864":{"crate_id":17,"path":["object","macho","DylibReference"],"kind":"struct"},"1:8282:9729":{"crate_id":1,"path":["std","os","unix","net","ancillary","SocketCred"],"kind":"struct"},"17:10479:6529":{"crate_id":17,"path":["object","read","elf","version","Version"],"kind":"struct"},"24:4281:3716":{"crate_id":24,"path":["syn","token","Question"],"kind":"struct"},"2:22615:8809":{"crate_id":2,"path":["core","num","flt2dec","decoder","Decoded"],"kind":"struct"},"2:22705:8821":{"crate_id":2,"path":["core","num","error","TryFromIntError"],"kind":"struct"},"17:14515:7308":{"crate_id":17,"path":["object","pe","ImageArchitectureEntry"],"kind":"struct"},"2:13017:161":{"crate_id":2,"path":["core","future","into_future","IntoFuture"],"kind":"trait"},"17:10715:22730":{"crate_id":17,"path":["object","read","macho","file","MachOComdatIterator"],"kind":"struct"},"2:41717:10334":{"crate_id":2,"path":["core","net","ip_addr","Ipv6MulticastScope"],"kind":"enum"},"2:41830:32496":{"crate_id":2,"path":["core","net","parser","AddrKind"],"kind":"enum"},"17:582:2057":{"crate_id":17,"path":["object","read","any","Symbol"],"kind":"struct"},"24:4871:3344":{"crate_id":24,"path":["syn","expr","ExprMacro"],"kind":"struct"},"2:43795:9058":{"crate_id":2,"path":["core","str","error","Utf8Error"],"kind":"struct"},"1:4471:10377":{"crate_id":1,"path":["std","os","unix","process","CommandExt"],"kind":"trait"},"23:38:3041":{"crate_id":23,"path":["quote","format_ident"],"kind":"macro"},"2:48066:9167":{"crate_id":2,"path":["core","core_arch","simd","i64x8"],"kind":"struct"},"17:12946:6866":{"crate_id":17,"path":["object","macho","TwolevelHintsCommand"],"kind":"struct"},"2:46055:9077":{"crate_id":2,"path":["core","core_arch","simd","u64x1"],"kind":"struct"},"2:22202:32526":{"crate_id":2,"path":["core","core_simd","simd","ptr","const_ptr","SimdConstPtr","with_addr"],"kind":"foreign_type"},"24:611:3404":{"crate_id":24,"path":["syn","error","Iter"],"kind":"struct"},"5:7370:3403":{"crate_id":5,"path":["alloc","collections","vec_deque","into_iter","IntoIter"],"kind":"struct"},"24:1727:10146":{"crate_id":24,"path":["syn","path","printing","span","QSelfDelimiters"],"kind":"struct"},"5:3191:34482":{"crate_id":5,"path":["alloc","collections","btree","set","DifferenceInner"],"kind":"enum"},"1:837:3404":{"crate_id":1,"path":["std","collections","hash","map","Iter"],"kind":"struct"},"17:14146:7195":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation64V2"],"kind":"struct"},"17:13189:6906":{"crate_id":17,"path":["object","macho","EntryPointCommand"],"kind":"struct"},"2:4843:417":{"crate_id":2,"path":["core","ffi","c_void"],"kind":"enum"},"24:1615:3539":{"crate_id":24,"path":["syn","parse","Nothing"],"kind":"struct"},"21:2303:2367":{"crate_id":21,"path":["proc_macro","bridge","Punct"],"kind":"struct"},"24:5105:2317":{"crate_id":24,"path":["syn","lit","Lit"],"kind":"enum"},"16:7792:22521":{"crate_id":16,"path":["gimli","read","unit","UnitType"],"kind":"enum"},"2:6253:3517":{"crate_id":2,"path":["core","iter","adapters","intersperse","IntersperseWith"],"kind":"struct"},"24:3000:3667":{"crate_id":24,"path":["syn","token","Mod"],"kind":"struct"},"2:43827:9663":{"crate_id":2,"path":["core","str","iter","CharIndices"],"kind":"struct"},"17:14402:7282":{"crate_id":17,"path":["object","pe","ImageEnclaveImport"],"kind":"struct"},"2:2970:6356":{"crate_id":2,"path":["core","ops","bit","BitAndAssign"],"kind":"trait"},"1:8992:27025":{"crate_id":1,"path":["std","sync","mpmc","error","SendTimeoutError"],"kind":"enum"},"16:5612:7367":{"crate_id":16,"path":["gimli","read","cfi","EhFrameHdr"],"kind":"struct"},"24:3238:260":{"crate_id":24,"path":["syn","token","Try"],"kind":"struct"},"2:43694:9056":{"crate_id":2,"path":["core","slice","iter","ArrayWindows"],"kind":"struct"},"17:13568:7042":{"crate_id":17,"path":["object","pe","ImageDataDirectory"],"kind":"struct"},"1:8293:10368":{"crate_id":1,"path":["std","os","unix","net","ancillary","SocketAncillary"],"kind":"struct"},"2:10100:9590":{"crate_id":2,"path":["core","hash","BuildHasherDefault"],"kind":"struct"},"17:14449:7296":{"crate_id":17,"path":["object","pe","ImageDebugMisc"],"kind":"struct"},"24:3289:2013":{"crate_id":24,"path":["syn","token","Union"],"kind":"struct"},"17:10140:22634":{"crate_id":17,"path":["object","read","coff","import","ImportName"],"kind":"enum"},"5:898:3404":{"crate_id":5,"path":["alloc","collections","binary_heap","Iter"],"kind":"struct"},"6:1650:7969":{"crate_id":6,"path":["libc","unix","linux_like","in6_rtmsg"],"kind":"struct"},"2:23104:191":{"crate_id":2,"path":["core","num","nonzero","NonZeroU128"],"kind":"struct"},"1:6196:10138":{"crate_id":1,"path":["std","sync","mpmc","zero","ZeroToken"],"kind":"struct"},"2:23073:194":{"crate_id":2,"path":["core","num","nonzero","NonZeroU64"],"kind":"struct"},"2:43673:9599":{"crate_id":2,"path":["core","slice","iter","ChunksExact"],"kind":"struct"},"2:4404:3568":{"crate_id":2,"path":["core","cell","Ref"],"kind":"struct"},"16:5363:7419":{"crate_id":16,"path":["gimli","constants","DwEhPe"],"kind":"struct"},"24:1488:2050":{"crate_id":24,"path":["syn","parse","ParseStream"],"kind":"type_alias"},"2:2297:103":{"crate_id":2,"path":["core","borrow","BorrowMut"],"kind":"trait"},"2:21195:33501":{"crate_id":2,"path":["core","core_simd","swizzle","interleave","Lo"],"kind":"struct"},"17:10441:22688":{"crate_id":17,"path":["object","read","elf","note","GnuProperty"],"kind":"struct"},"23:344:1218":{"crate_id":23,"path":["quote","quote"],"kind":"macro"},"2:3327:3576":{"crate_id":2,"path":["core","ops","unsize","CoerceUnsized"],"kind":"trait"},"1:12048:791":{"crate_id":1,"path":["std","i32"],"kind":"primitive"},"24:5093:1976":{"crate_id":24,"path":["syn","ident","Ident"],"kind":"function"},"16:4641:7403":{"crate_id":16,"path":["gimli","constants","DwVirtuality"],"kind":"struct"},"24:4153:3707":{"crate_id":24,"path":["syn","token","Or"],"kind":"struct"},"17:14270:7241":{"crate_id":17,"path":["object","pe","ImageHotPatchInfo"],"kind":"struct"},"2:40730:3509":{"crate_id":2,"path":["core","iter","adapters","rev","Rev"],"kind":"struct"},"6:7633:8776":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_cond_t"],"kind":"struct"},"6:4808:8215":{"crate_id":6,"path":["libc","unix","linux_like","linux","fanotify_response"],"kind":"struct"},"17:10751:6531":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandIterator"],"kind":"struct"},"1:952:10208":{"crate_id":1,"path":["std","collections","hash","map","RawEntryBuilder"],"kind":"struct"},"11:1025:10209":{"crate_id":11,"path":["hashbrown","map","OccupiedEntry"],"kind":"struct"},"9:393:21489":{"crate_id":9,"path":["miniz_oxide","MZFlush"],"kind":"enum"},"1:1759:10217":{"crate_id":1,"path":["std","env","Vars"],"kind":"struct"},"17:13175:6905":{"crate_id":17,"path":["object","macho","FvmfileCommand"],"kind":"struct"},"6:4543:8127":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_constant_effect"],"kind":"struct"},"16:2305:21641":{"crate_id":16,"path":["gimli","common","Vendor"],"kind":"enum"},"17:12137:6690":{"crate_id":17,"path":["object","elf","ProgramHeader32"],"kind":"struct"},"11:1883:3404":{"crate_id":11,"path":["hashbrown","set","Iter"],"kind":"struct"},"1:4571:10395":{"crate_id":1,"path":["std","os","unix","thread","JoinHandleExt"],"kind":"trait"},"5:3733:3540":{"crate_id":5,"path":["alloc","collections","linked_list","Cursor"],"kind":"struct"},"2:48226:9176":{"crate_id":2,"path":["core","core_arch","x86","__m512i"],"kind":"struct"},"16:6742:9500":{"crate_id":16,"path":["gimli","read","line","LineSequence"],"kind":"struct"},"17:12453:6773":{"crate_id":17,"path":["object","macho","DyldSubCacheInfo"],"kind":"struct"},"6:6700:8629":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","siginfo_t"],"kind":"struct"},"5:0:313":{"crate_id":5,"path":["alloc"],"kind":"module"},"24:1331:3544":{"crate_id":24,"path":["syn","lookahead","Peek"],"kind":"trait"},"5:5149:6167":{"crate_id":5,"path":["alloc","rc","Weak"],"kind":"struct"},"2:48356:9182":{"crate_id":2,"path":["core","core_arch","x86","cpuid","CpuidResult"],"kind":"struct"},"24:4930:3358":{"crate_id":24,"path":["syn","expr","ExprWhile"],"kind":"struct"},"2:2943:6338":{"crate_id":2,"path":["core","ops","bit","BitAnd"],"kind":"trait"},"6:5928:8448":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","termios"],"kind":"struct"},"1:482:6207":{"crate_id":1,"path":["std","thread","spawn_unchecked_","MaybeDangling"],"kind":"struct"},"2:9839:117":{"crate_id":2,"path":["core","fmt","macros","Debug"],"kind":"proc_derive"},"16:6499:7381":{"crate_id":16,"path":["gimli","read","index","DebugTuIndex"],"kind":"struct"},"2:46240:9084":{"crate_id":2,"path":["core","core_arch","simd","u8x16"],"kind":"struct"},"2:40336:9623":{"crate_id":2,"path":["core","char","decode","DecodeUtf16"],"kind":"struct"},"24:2830:3660":{"crate_id":24,"path":["syn","token","Final"],"kind":"struct"},"16:4862:7409":{"crate_id":16,"path":["gimli","constants","DwOrd"],"kind":"struct"},"17:14325:7260":{"crate_id":17,"path":["object","pe","ImageAlpha64RuntimeFunctionEntry"],"kind":"struct"},"24:847:6342":{"crate_id":24,"path":["syn","ext","private","PeekFn"],"kind":"struct"},"16:6456:9483":{"crate_id":16,"path":["gimli","read","aranges","ArangeEntryIter"],"kind":"struct"},"17:14222:7240":{"crate_id":17,"path":["object","pe","ImageLoadConfigDirectory64"],"kind":"struct"},"1:1903:10245":{"crate_id":1,"path":["std","error","Indented"],"kind":"struct"},"16:4806:7407":{"crate_id":16,"path":["gimli","constants","DwCc"],"kind":"struct"},"2:40698:3507":{"crate_id":2,"path":["core","iter","adapters","map","Map"],"kind":"struct"},"2:41683:9029":{"crate_id":2,"path":["core","net","ip_addr","Ipv4Addr"],"kind":"struct"},"1:3484:3553":{"crate_id":1,"path":["std","io","Write"],"kind":"trait"},"17:9373:6503":{"crate_id":17,"path":["object","read","util","StringTable"],"kind":"struct"},"1:4385:10369":{"crate_id":1,"path":["std","os","unix","net","stream","UnixStream"],"kind":"struct"},"20:928:2367":{"crate_id":20,"path":["proc_macro2","Punct"],"kind":"struct"},"1:894:4768":{"crate_id":1,"path":["std","collections","hash","map","Drain"],"kind":"struct"},"1:2203:10264":{"crate_id":1,"path":["std","fs","DirEntry"],"kind":"struct"},"5:1784:4766":{"crate_id":5,"path":["alloc","collections","btree","map","ExtractIf"],"kind":"struct"},"24:912:35959":{"crate_id":24,"path":["syn","generics","ConstParamsMut"],"kind":"struct"},"2:22632:32511":{"crate_id":2,"path":["core","num","flt2dec","decoder","FullDecoded"],"kind":"enum"},"24:4966:63":{"crate_id":24,"path":["syn","expr","parsing","kw","raw"],"kind":"struct"},"24:5012:2602":{"crate_id":24,"path":["syn","generics","TypeParam"],"kind":"struct"},"5:1472:9559":{"crate_id":5,"path":["alloc","collections","btree","map","Keys"],"kind":"struct"},"18:531:9349":{"crate_id":18,"path":["memchr","memmem","prefilter","PrefilterState"],"kind":"struct"},"17:9391:135":{"crate_id":17,"path":["object","read","any","File"],"kind":"enum"},"2:26168:272":{"crate_id":2,"path":["core","num","wrapping","Wrapping"],"kind":"struct"},"2:32387:2132":{"crate_id":2,"path":["core","error","private","Internal"],"kind":"struct"},"6:6248:8587":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","msqid_ds"],"kind":"struct"},"6:6047:8518":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ntptimeval"],"kind":"struct"},"17:9887:22605":{"crate_id":17,"path":["object","read","archive","ArchiveMemberIterator"],"kind":"struct"},"16:3065:6402":{"crate_id":16,"path":["gimli","arch","Arm"],"kind":"struct"},"6:6086:8532":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","seminfo"],"kind":"struct"},"1:6612:6226":{"crate_id":1,"path":["std","sync","remutex","ReentrantMutexGuard"],"kind":"struct"},"5:781:101":{"crate_id":5,"path":["alloc","collections","binary_heap","BinaryHeap"],"kind":"struct"},"6:1596:7927":{"crate_id":6,"path":["libc","unix","linux_like","Dl_info"],"kind":"struct"},"6:4549:8130":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_ramp_effect"],"kind":"struct"},"6:7556:8767":{"crate_id":6,"path":["libc","unix","linux_like","linux","arch","generic","termios2"],"kind":"struct"},"6:4764:8193":{"crate_id":6,"path":["libc","unix","linux_like","linux","posix_spawnattr_t"],"kind":"struct"},"17:3441:22699":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbolIterator"],"kind":"struct"},"17:11382:6588":{"crate_id":17,"path":["object","read","pe","rich","RichHeaderEntry"],"kind":"struct"},"6:6228:8573":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","sysinfo"],"kind":"struct"},"6:569:7851":{"crate_id":6,"path":["libc","unix","sigval"],"kind":"struct"},"2:30633:32485":{"crate_id":2,"path":["core","ptr","alignment","AlignmentEnum16"],"kind":"enum"},"16:7269:35556":{"crate_id":16,"path":["gimli","read","op","OperationEvaluationResult"],"kind":"enum"},"2:30338:10341":{"crate_id":2,"path":["core","num","FpCategory"],"kind":"enum"},"2:2978:6355":{"crate_id":2,"path":["core","ops","bit","BitXorAssign"],"kind":"trait"},"2:2825:251":{"crate_id":2,"path":["core","marker","StructuralPartialEq"],"kind":"trait"},"5:7629:4767":{"crate_id":5,"path":["alloc","vec","splice","Splice"],"kind":"struct"},"17:12087:6683":{"crate_id":17,"path":["object","elf","Rel32"],"kind":"struct"},"24:2762:3657":{"crate_id":24,"path":["syn","token","Dyn"],"kind":"struct"},"24:5490:3390":{"crate_id":24,"path":["syn","ty","TypePtr"],"kind":"struct"},"1:5417:10424":{"crate_id":1,"path":["std","process","ChildStdout"],"kind":"struct"},"17:12599:6797":{"crate_id":17,"path":["object","macho","Section32"],"kind":"struct"},"17:9960:22614":{"crate_id":17,"path":["object","read","coff","section","CoffSegmentIterator"],"kind":"struct"},"2:44767:225":{"crate_id":2,"path":["core","future","ready","Ready"],"kind":"struct"},"11:1107:21567":{"crate_id":11,"path":["hashbrown","map","OccupiedEntryRef"],"kind":"struct"},"2:43901:9668":{"crate_id":2,"path":["core","str","iter","SplitTerminator"],"kind":"struct"},"2:40707:3493":{"crate_id":2,"path":["core","iter","adapters","map_while","MapWhile"],"kind":"struct"},"2:22258:4703":{"crate_id":2,"path":["core","core_simd","simd","ptr","mut_ptr","SimdMutPtr","from_exposed_addr"],"kind":"foreign_type"},"16:7736:7534":{"crate_id":16,"path":["gimli","read","UnitOffset"],"kind":"struct"},"1:8873:9254":{"crate_id":1,"path":["std","sync","mpsc","SendError"],"kind":"struct"},"11:2352:10210":{"crate_id":11,"path":["hashbrown","table","VacantEntry"],"kind":"struct"},"17:11227:9393":{"crate_id":17,"path":["object","read","pe","import","ImportDescriptorIterator"],"kind":"struct"},"1:3280:10319":{"crate_id":1,"path":["std","io","stdio","Stderr"],"kind":"struct"},"20:744:2663":{"crate_id":20,"path":["proc_macro2","fallback","Literal"],"kind":"struct"},"24:2813:3659":{"crate_id":24,"path":["syn","token","Extern"],"kind":"struct"},"17:11952:6656":{"crate_id":17,"path":["object","elf","SectionHeader32"],"kind":"struct"},"18:755:9365":{"crate_id":18,"path":["memchr","memmem","SearcherRev"],"kind":"struct"},"1:12054:1635":{"crate_id":1,"path":["std","u64"],"kind":"primitive"},"17:9763:35592":{"crate_id":17,"path":["object","read","any","DynamicRelocationIteratorInternal"],"kind":"enum"},"17:13025:6876":{"crate_id":17,"path":["object","macho","FilesetEntryCommand"],"kind":"struct"},"1:12044:686":{"crate_id":1,"path":["std","f32"],"kind":"primitive"},"1:3502:10283":{"crate_id":1,"path":["std","io","Seek"],"kind":"trait"},"11:1923:2013":{"crate_id":11,"path":["hashbrown","set","Union"],"kind":"struct"},"2:41929:200":{"crate_id":2,"path":["core","option","Option"],"kind":"enum"},"2:4:1105":{"crate_id":2,"path":["core","panic"],"kind":"macro"},"1:1910:699":{"crate_id":1,"path":["std","ffi"],"kind":"module"},"2:39691:8896":{"crate_id":2,"path":["core","any","TypeId"],"kind":"struct"},"11:123:5981":{"crate_id":11,"path":["hashbrown","raw","RawTable"],"kind":"struct"},"11:1160:10032":{"crate_id":11,"path":["hashbrown","map","OccupiedError"],"kind":"struct"},"20:889:2044":{"crate_id":20,"path":["proc_macro2","TokenTree"],"kind":"enum"},"17:13163:6904":{"crate_id":17,"path":["object","macho","IdentCommand"],"kind":"struct"},"1:11292:6240":{"crate_id":1,"path":["std","sys_common","once","futex","CompletionGuard"],"kind":"struct"},"20:950:1976":{"crate_id":20,"path":["proc_macro2","Ident"],"kind":"struct"},"17:11449:22594":{"crate_id":17,"path":["object","read","ObjectKind"],"kind":"enum"},"5:4999:6161":{"crate_id":5,"path":["alloc","rc","from_iter_exact","Guard"],"kind":"struct"},"5:5802:257":{"crate_id":5,"path":["alloc","string","ToString"],"kind":"trait"},"2:48294:9180":{"crate_id":2,"path":["core","core_arch","x86","__m256bh"],"kind":"struct"},"24:4826:3334":{"crate_id":24,"path":["syn","expr","ExprConst"],"kind":"struct"},"1:12034:448":{"crate_id":1,"path":["std","char"],"kind":"primitive"},"17:12253:6721":{"crate_id":17,"path":["object","elf","Vernaux"],"kind":"struct"},"17:14014:7158":{"crate_id":17,"path":["object","pe","ImageImportDescriptor"],"kind":"struct"},"17:12374:6739":{"crate_id":17,"path":["object","macho","DyldCacheHeader"],"kind":"struct"},"1:3201:10321":{"crate_id":1,"path":["std","io","stdio","Stdin"],"kind":"struct"},"21:216:10086":{"crate_id":21,"path":["proc_macro","bridge","fxhash","FxHasher"],"kind":"struct"},"5:7417:3458":{"crate_id":5,"path":["alloc","collections","TryReserveError"],"kind":"struct"},"2:41126:3466":{"crate_id":2,"path":["core","iter","sources","from_fn","FromFn"],"kind":"struct"},"17:10457:22664":{"crate_id":17,"path":["object","read","elf","hash","GnuHashTable"],"kind":"struct"},"2:42961:7556":{"crate_id":2,"path":["core","fmt","rt","Flag"],"kind":"enum"},"2:41989:3404":{"crate_id":2,"path":["core","option","Iter"],"kind":"struct"},"1:1407:152":{"crate_id":1,"path":["std","collections","hash","set","HashSet"],"kind":"struct"},"1:557:4554":{"crate_id":1,"path":["std","thread","JoinHandle"],"kind":"struct"},"17:12751:6819":{"crate_id":17,"path":["object","macho","PreboundDylibCommand"],"kind":"struct"},"1:10970:27511":{"crate_id":1,"path":["std","sys","unix","process","process_common","ProgramKind"],"kind":"enum"},"5:7543:9585":{"crate_id":5,"path":["alloc","string","FromUtf8Error"],"kind":"struct"},"2:5715:3504":{"crate_id":2,"path":["core","iter","adapters","flatten","FlatMap"],"kind":"struct"},"17:10673:22729":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCacheImageIterator"],"kind":"struct"},"24:928:3364":{"crate_id":24,"path":["syn","generics","Turbofish"],"kind":"struct"},"6:6658:8605":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","sigaction"],"kind":"struct"},"2:39542:216":{"crate_id":2,"path":["core","ops","range","Range"],"kind":"struct"},"2:46462:9096":{"crate_id":2,"path":["core","core_arch","simd","i32x4"],"kind":"struct"},"17:11474:6461":{"crate_id":17,"path":["object","read","SectionIndex"],"kind":"struct"},"2:2837:2504":{"crate_id":2,"path":["core","marker","PhantomData"],"kind":"struct"},"2:8878:3981":{"crate_id":2,"path":["core","panic","unwind_safe","UnwindSafe"],"kind":"trait"},"2:46508:9098":{"crate_id":2,"path":["core","core_arch","simd","f32x4"],"kind":"struct"},"20:908:3424":{"crate_id":20,"path":["proc_macro2","Delimiter"],"kind":"enum"},"16:6261:10087":{"crate_id":16,"path":["gimli","read","dwarf","RangeIter"],"kind":"struct"},"16:2810:7356":{"crate_id":16,"path":["gimli","common","DebugStrOffsetsIndex"],"kind":"struct"},"5:1281:10210":{"crate_id":5,"path":["alloc","collections","btree","map","entry","VacantEntry"],"kind":"struct"},"2:3692:3403":{"crate_id":2,"path":["core","array","iter","IntoIter"],"kind":"struct"},"24:4206:3711":{"crate_id":24,"path":["syn","token","Percent"],"kind":"struct"},"2:39513:9618":{"crate_id":2,"path":["core","ops","index_range","IndexRange"],"kind":"struct"},"0:0:1837":{"crate_id":0,"path":["serde_derive"],"kind":"module"},"6:6798:8663":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","pthread_attr_t"],"kind":"struct"},"1:4742:10359":{"crate_id":1,"path":["std","os","fd","raw","AsRawFd"],"kind":"trait"},"6:1496:7870":{"crate_id":6,"path":["libc","unix","linux_like","in_addr"],"kind":"struct"},"2:45985:9074":{"crate_id":2,"path":["core","core_arch","simd","u8x8"],"kind":"struct"},"17:11087:22764":{"crate_id":17,"path":["object","read","pe","file","PeComdatSectionIterator"],"kind":"struct"},"2:3112:2587":{"crate_id":2,"path":["core","ops","index","Index"],"kind":"trait"},"1:6428:3468":{"crate_id":1,"path":["std","sync","once","Once"],"kind":"struct"},"1:8147:9227":{"crate_id":1,"path":["std","io","util","Sink"],"kind":"struct"},"18:481:9347":{"crate_id":18,"path":["memchr","cow","CowBytes"],"kind":"struct"},"2:43026:3547":{"crate_id":2,"path":["core","fmt","Arguments"],"kind":"struct"},"5:785:6144":{"crate_id":5,"path":["alloc","collections","binary_heap","PeekMut"],"kind":"struct"},"24:4878:3346":{"crate_id":24,"path":["syn","expr","ExprMethodCall"],"kind":"struct"},"2:41980:170":{"crate_id":2,"path":["core","option","Item"],"kind":"struct"},"5:207:4684":{"crate_id":5,"path":["alloc","boxed","thin","ThinBox"],"kind":"struct"},"11:2469:4766":{"crate_id":11,"path":["hashbrown","table","ExtractIf"],"kind":"struct"},"1:12016:27524":{"crate_id":1,"path":["std","backtrace_rs","print","PrintFmt"],"kind":"enum"},"2:4505:3572":{"crate_id":2,"path":["core","cell","SyncUnsafeCell"],"kind":"struct"},"16:7492:9532":{"crate_id":16,"path":["gimli","read","pubnames","PubNamesEntry"],"kind":"struct"},"17:11491:6605":{"crate_id":17,"path":["object","read","SymbolIndex"],"kind":"struct"},"18:491:9348":{"crate_id":18,"path":["memchr","cow","Imp"],"kind":"struct"},"2:42133:3403":{"crate_id":2,"path":["core","result","IntoIter"],"kind":"struct"},"2:2987:6359":{"crate_id":2,"path":["core","ops","bit","ShrAssign"],"kind":"trait"},"2:48200:9174":{"crate_id":2,"path":["core","core_arch","x86","__m256"],"kind":"struct"},"18:671:26612":{"crate_id":18,"path":["memchr","memmem","FindRevIter"],"kind":"struct"},"1:4641:8653":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt","st_ctime"],"kind":"foreign_type"},"1:1041:9531":{"crate_id":1,"path":["std","collections","hash","map","Entry"],"kind":"enum"},"24:5382:1959":{"crate_id":24,"path":["syn","ty","Type"],"kind":"enum"},"2:2210:4703":{"crate_id":2,"path":["core","ptr","from_exposed_addr"],"kind":"function"},"24:829:3526":{"crate_id":24,"path":["syn","ext","IdentExt"],"kind":"trait"},"24:3340:3679":{"crate_id":24,"path":["syn","token","Use"],"kind":"struct"},"24:5345:2571":{"crate_id":24,"path":["syn","path","AssocConst"],"kind":"struct"},"20:904:1964":{"crate_id":20,"path":["proc_macro2","Group"],"kind":"struct"},"16:6960:22512":{"crate_id":16,"path":["gimli","read","loclists","RawLocListIter"],"kind":"struct"},"17:10562:9377":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSection"],"kind":"struct"},"24:2932:3665":{"crate_id":24,"path":["syn","token","Let"],"kind":"struct"},"17:12044:6678":{"crate_id":17,"path":["object","elf","Sym64"],"kind":"struct"},"2:44105:9679":{"crate_id":2,"path":["core","str","iter","Lines"],"kind":"struct"},"1:4153:10370":{"crate_id":1,"path":["std","os","unix","net","ancillary","ScmRights"],"kind":"struct"},"24:4327:3719":{"crate_id":24,"path":["syn","token","Shl"],"kind":"struct"},"2:12435:15642":{"crate_id":2,"path":["core","str","pattern","ReverseSearcher"],"kind":"trait"},"16:4774:7406":{"crate_id":16,"path":["gimli","constants","DwId"],"kind":"struct"},"2:46864:9121":{"crate_id":2,"path":["core","core_arch","simd","u16x16"],"kind":"struct"},"6:5130:8381":{"crate_id":6,"path":["libc","unix","linux_like","linux","dirent64"],"kind":"struct"},"1:10769:9725":{"crate_id":1,"path":["std","sys","unix","fs","OpenOptions"],"kind":"struct"},"2:43004:134":{"crate_id":2,"path":["core","fmt","Error"],"kind":"struct"},"2:3062:3577":{"crate_id":2,"path":["core","ops","deref","DerefMut"],"kind":"trait"},"2:40655:9637":{"crate_id":2,"path":["core","iter","adapters","flatten","FlattenCompat"],"kind":"struct"},"24:5379:3377":{"crate_id":24,"path":["syn","restriction","FieldMutability"],"kind":"enum"},"1:6072:6216":{"crate_id":1,"path":["std","sync","mpmc","list","Channel"],"kind":"struct"},"2:47958:9165":{"crate_id":2,"path":["core","core_arch","simd","u32x16"],"kind":"struct"},"1:11607:29288":{"crate_id":1,"path":["std","panicking","panic_count","MustAbort"],"kind":"enum"},"16:7513:9535":{"crate_id":16,"path":["gimli","read","pubnames","PubNamesEntryIter"],"kind":"struct"},"24:3984:131":{"crate_id":24,"path":["syn","token","Eq"],"kind":"struct"},"1:3839:10340":{"crate_id":1,"path":["std","net","udp","UdpSocket"],"kind":"struct"},"16:7015:7486":{"crate_id":16,"path":["gimli","read","loclists","LocationListEntry"],"kind":"struct"},"23:78:2045":{"crate_id":23,"path":["quote","to_tokens","ToTokens"],"kind":"trait"},"2:9843:3548":{"crate_id":2,"path":["core","fmt","Octal"],"kind":"trait"},"1:2371:10272":{"crate_id":1,"path":["std","fs","canonicalize"],"kind":"function"},"16:2864:7358":{"crate_id":16,"path":["gimli","common","DebugTypeSignature"],"kind":"struct"},"16:3032:7383":{"crate_id":16,"path":["gimli","common","DwoId"],"kind":"struct"},"2:43755:15633":{"crate_id":2,"path":["core","slice","iter","RChunksMut"],"kind":"struct"},"17:10228:22644":{"crate_id":17,"path":["object","read","elf","segment","ElfSegment"],"kind":"struct"},"17:10981:6520":{"crate_id":17,"path":["object","read","macho","symbol","SymbolTable"],"kind":"struct"},"1:7664:4558":{"crate_id":1,"path":["std","thread","Builder"],"kind":"struct"},"2:21857:8802":{"crate_id":2,"path":["core","core_simd","vector","Simd"],"kind":"struct"},"24:3187:1991":{"crate_id":24,"path":["syn","token","Struct"],"kind":"struct"},"1:3325:10312":{"crate_id":1,"path":["std","io","stdio","IsTerminal"],"kind":"trait"},"9:177:10119":{"crate_id":9,"path":["miniz_oxide","inflate","stream","InflateState"],"kind":"struct"},"6:4488:8103":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_id"],"kind":"struct"},"24:5041:2530":{"crate_id":24,"path":["syn","generics","TypeParamBound"],"kind":"enum"},"1:12053:1634":{"crate_id":1,"path":["std","u32"],"kind":"primitive"},"24:5350:2572":{"crate_id":24,"path":["syn","path","Constraint"],"kind":"struct"},"2:22592:32492":{"crate_id":2,"path":["core","num","dec2flt","FloatErrorKind"],"kind":"enum"},"1:868:9559":{"crate_id":1,"path":["std","collections","hash","map","Keys"],"kind":"struct"},"16:7128:9259":{"crate_id":16,"path":["gimli","read","op","Operation"],"kind":"enum"},"24:4860:3342":{"crate_id":24,"path":["syn","expr","ExprLet"],"kind":"struct"},"1:3932:10344":{"crate_id":1,"path":["std","os","unix","ffi","os_str","OsStringExt"],"kind":"trait"},"1:8238:10333":{"crate_id":1,"path":["std","net","Shutdown"],"kind":"enum"},"24:3170:2711":{"crate_id":24,"path":["syn","token","Static"],"kind":"struct"},"24:2558:3650":{"crate_id":24,"path":["syn","token","As"],"kind":"struct"},"16:7782:9538":{"crate_id":16,"path":["gimli","read","unit","DebugInfoUnitHeadersIter"],"kind":"struct"},"16:6467:9484":{"crate_id":16,"path":["gimli","read","aranges","ArangeEntry"],"kind":"struct"},"24:4136:3706":{"crate_id":24,"path":["syn","token","Not"],"kind":"struct"},"6:6136:8552":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","sifields_sigchld"],"kind":"struct"},"6:119:16092":{"crate_id":6,"path":["libc","unix","FILE"],"kind":"enum"},"2:2668:134":{"crate_id":2,"path":["core","error","Error"],"kind":"trait"},"24:1622:2051":{"crate_id":24,"path":["syn","parse_quote"],"kind":"macro"},"17:12577:6796":{"crate_id":17,"path":["object","macho","SegmentCommand64"],"kind":"struct"},"21:1020:3588":{"crate_id":21,"path":["proc_macro","bridge","client","SourceFile"],"kind":"struct"},"24:5487:2531":{"crate_id":24,"path":["syn","ty","TypePath"],"kind":"struct"},"2:44001:9674":{"crate_id":2,"path":["core","str","iter","MatchIndices"],"kind":"struct"},"24:5463:3383":{"crate_id":24,"path":["syn","ty","TypeBareFn"],"kind":"struct"},"2:46683:9103":{"crate_id":2,"path":["core","core_arch","simd","m32x4"],"kind":"struct"},"20:806:35644":{"crate_id":20,"path":["proc_macro2","imp","TokenTreeIter"],"kind":"enum"},"17:13452:6949":{"crate_id":17,"path":["object","pe","ImageOs2Header"],"kind":"struct"},"2:45885:9070":{"crate_id":2,"path":["core","core_arch","simd","u8x4"],"kind":"struct"},"23:35:10285":{"crate_id":23,"path":["quote","ext","private","Sealed"],"kind":"trait"},"1:8353:9233":{"crate_id":1,"path":["std","os","fd","owned","BorrowedFd"],"kind":"struct"},"9:330:7754":{"crate_id":9,"path":["miniz_oxide","inflate","core","LocalVars"],"kind":"struct"},"24:4078:3702":{"crate_id":24,"path":["syn","token","Lt"],"kind":"struct"},"24:289:35848":{"crate_id":24,"path":["syn","bigint","BigInt"],"kind":"struct"},"1:11372:9797":{"crate_id":1,"path":["std","sys_common","wtf8","Wtf8"],"kind":"struct"},"12:0:3167":{"crate_id":12,"path":["rustc_std_workspace_alloc"],"kind":"module"},"1:8552:9250":{"crate_id":1,"path":["std","path","Ancestors"],"kind":"struct"},"2:2577:76":{"crate_id":2,"path":["core","convert","AsMut"],"kind":"trait"},"6:4878:8250":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_fprog"],"kind":"struct"},"17:11202:9385":{"crate_id":17,"path":["object","read","pe","export","ExportTable"],"kind":"struct"},"17:14057:7173":{"crate_id":17,"path":["object","pe","ImageResourceDirectory"],"kind":"struct"},"16:8097:9543":{"crate_id":16,"path":["gimli","read","unit","EntriesRaw"],"kind":"struct"},"16:5049:7415":{"crate_id":16,"path":["gimli","constants","DwLnct"],"kind":"struct"},"1:6542:10047":{"crate_id":1,"path":["std","sync","poison","PoisonError"],"kind":"struct"},"6:6107:8544":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_entry"],"kind":"struct"},"1:10824:9228":{"crate_id":1,"path":["std","sys","unix","io","IoSlice"],"kind":"struct"},"2:4179:3579":{"crate_id":2,"path":["core","cell","lazy","LazyCell"],"kind":"struct"},"17:9087:6494":{"crate_id":17,"path":["object","endian","BigEndian"],"kind":"struct"},"18:609:35620":{"crate_id":18,"path":["memchr","memmem","twoway","Suffix"],"kind":"struct"},"2:2294:102":{"crate_id":2,"path":["core","borrow","Borrow"],"kind":"trait"},"17:12960:6868":{"crate_id":17,"path":["object","macho","TwolevelHint"],"kind":"struct"},"17:13086:6885":{"crate_id":17,"path":["object","macho","BuildVersionCommand"],"kind":"struct"},"2:43645:9596":{"crate_id":2,"path":["core","slice","iter","Windows"],"kind":"struct"},"2:43837:2952":{"crate_id":2,"path":["core","str","iter","Bytes"],"kind":"struct"},"24:90:1970":{"crate_id":24,"path":["syn","token","Token"],"kind":"trait"},"20:984:3403":{"crate_id":20,"path":["proc_macro2","token_stream","IntoIter"],"kind":"struct"},"5:1419:3404":{"crate_id":5,"path":["alloc","collections","btree","map","Iter"],"kind":"struct"},"1:12056:842":{"crate_id":1,"path":["std","isize"],"kind":"primitive"},"16:6696:7460":{"crate_id":16,"path":["gimli","read","line","LineRow"],"kind":"struct"},"1:6545:10446":{"crate_id":1,"path":["std","sync","poison","TryLockError"],"kind":"enum"},"2:22719:9613":{"crate_id":2,"path":["core","num","error","ParseIntError"],"kind":"struct"},"24:4095:3703":{"crate_id":24,"path":["syn","token","Minus"],"kind":"struct"},"17:10431:22687":{"crate_id":17,"path":["object","read","elf","note","GnuPropertyIterator"],"kind":"struct"},"24:3931:3692":{"crate_id":24,"path":["syn","token","Dot"],"kind":"struct"},"17:9138:6496":{"crate_id":17,"path":["object","endian","U32Bytes"],"kind":"struct"},"1:1055:10209":{"crate_id":1,"path":["std","collections","hash","map","OccupiedEntry"],"kind":"struct"},"17:10085:22611":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdatIterator"],"kind":"struct"},"2:12375:3427":{"crate_id":2,"path":["core","str","traits","FromStr"],"kind":"trait"},"5:2057:10212":{"crate_id":5,"path":["alloc","collections","btree","map","CursorMut"],"kind":"struct"},"23:0:1218":{"crate_id":23,"path":["quote"],"kind":"module"},"17:400:22572":{"crate_id":17,"path":["object","read","any","Segment"],"kind":"struct"},"2:40473:9633":{"crate_id":2,"path":["core","ffi","c_str","FromBytesUntilNulError"],"kind":"struct"},"6:4351:8015":{"crate_id":6,"path":["libc","unix","linux_like","linux","glob_t"],"kind":"struct"},"11:837:10204":{"crate_id":11,"path":["hashbrown","map","RawEntryBuilderMut"],"kind":"struct"},"2:40933:3515":{"crate_id":2,"path":["core","iter","adapters","zip","Zip"],"kind":"struct"},"18:507:6376":{"crate_id":18,"path":["memchr","memmem","genericsimd","Forward"],"kind":"struct"},"1:10099:29316":{"crate_id":1,"path":["std","sys","unix","os","EnvStrDebug"],"kind":"struct"},"17:13102:6889":{"crate_id":17,"path":["object","macho","BuildToolVersion"],"kind":"struct"},"6:4506:8111":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_keymap_entry"],"kind":"struct"},"16:4889:7410":{"crate_id":16,"path":["gimli","constants","DwDsc"],"kind":"struct"},"17:13724:7091":{"crate_id":17,"path":["object","pe","AnonObjectHeaderV2"],"kind":"struct"},"17:14283:7247":{"crate_id":17,"path":["object","pe","ImageHotPatchBase"],"kind":"struct"},"16:6279:7430":{"crate_id":16,"path":["gimli","read","endian_slice","EndianSlice"],"kind":"struct"},"1:12040:1531":{"crate_id":1,"path":["std","str"],"kind":"primitive"},"1:5310:126":{"crate_id":1,"path":["std","path","Display"],"kind":"struct"},"1:12049:792":{"crate_id":1,"path":["std","i64"],"kind":"primitive"},"6:6961:8746":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ucontext_t"],"kind":"struct"},"6:4473:8097":{"crate_id":6,"path":["libc","unix","linux_like","linux","sembuf"],"kind":"struct"},"1:2210:10265":{"crate_id":1,"path":["std","fs","read_to_string"],"kind":"function"},"17:9329:2952":{"crate_id":17,"path":["object","read","util","Bytes"],"kind":"struct"},"17:13803:7108":{"crate_id":17,"path":["object","pe","ImageSymbolEx"],"kind":"struct"},"17:12466:6775":{"crate_id":17,"path":["object","macho","FatHeader"],"kind":"struct"},"18:681:9352":{"crate_id":18,"path":["memchr","memmem","Finder"],"kind":"struct"},"2:13004:146":{"crate_id":2,"path":["core","future","future","Future"],"kind":"trait"},"17:9973:22613":{"crate_id":17,"path":["object","read","coff","section","CoffSegment"],"kind":"struct"},"17:11935:1976":{"crate_id":17,"path":["object","elf","Ident"],"kind":"struct"},"17:13547:7032":{"crate_id":17,"path":["object","pe","MaskedRichHeaderEntry"],"kind":"struct"},"6:489:7803":{"crate_id":6,"path":["libc","unix","timeval"],"kind":"struct"},"17:0:3171":{"crate_id":17,"path":["object"],"kind":"module"},"16:7544:9537":{"crate_id":16,"path":["gimli","read","pubtypes","PubTypesEntryIter"],"kind":"struct"},"16:7862:9539":{"crate_id":16,"path":["gimli","read","unit","DebuggingInformationEntry"],"kind":"struct"},"17:13275:6580":{"crate_id":17,"path":["object","macho","Relocation"],"kind":"struct"},"24:3822:3685":{"crate_id":24,"path":["syn","token","AndEq"],"kind":"struct"},"1:7902:4834":{"crate_id":1,"path":["std","hash","random","RandomState"],"kind":"struct"},"5:7311:34407":{"crate_id":5,"path":["alloc","collections","btree","merge_iter","Peeked"],"kind":"enum"},"20:955:2663":{"crate_id":20,"path":["proc_macro2","Literal"],"kind":"struct"},"6:1558:7903":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_ll"],"kind":"struct"},"1:7839:5333":{"crate_id":1,"path":["std","fs","Metadata"],"kind":"struct"},"5:3246:2013":{"crate_id":5,"path":["alloc","collections","btree","set","Union"],"kind":"struct"},"1:8327:10405":{"crate_id":1,"path":["std","os","linux","process","PidFd"],"kind":"struct"},"2:23290:186":{"crate_id":2,"path":["core","num","nonzero","NonZeroI128"],"kind":"struct"},"15:288:21596":{"crate_id":15,"path":["addr2line","LocationRangeIter"],"kind":"struct"},"18:652:6376":{"crate_id":18,"path":["memchr","memmem","x86","sse","Forward"],"kind":"struct"},"1:3737:10338":{"crate_id":1,"path":["std","net","tcp","TcpListener"],"kind":"struct"},"24:4351:3721":{"crate_id":24,"path":["syn","token","Shr"],"kind":"struct"},"17:11152:22765":{"crate_id":17,"path":["object","read","pe","section","PeRelocationIterator"],"kind":"struct"},"17:14135:7191":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation32V2"],"kind":"struct"},"17:9913:22607":{"crate_id":17,"path":["object","read","archive","ArchiveMember"],"kind":"struct"},"17:10535:9375":{"crate_id":17,"path":["object","read","elf","version","VerneedIterator"],"kind":"struct"},"6:4870:8246":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_filter"],"kind":"struct"},"2:3557:4768":{"crate_id":2,"path":["core","array","drain","Drain"],"kind":"struct"},"16:2722:7352":{"crate_id":16,"path":["gimli","common","DebugRngListsBase"],"kind":"struct"},"1:1539:3403":{"crate_id":1,"path":["std","collections","hash","set","IntoIter"],"kind":"struct"},"2:47022:9124":{"crate_id":2,"path":["core","core_arch","simd","i8x32"],"kind":"struct"},"17:11390:22592":{"crate_id":17,"path":["object","read","traits","NoDynamicRelocationIterator"],"kind":"struct"},"2:7710:3486":{"crate_id":2,"path":["core","iter","traits","accum","Product"],"kind":"trait"},"6:4455:8085":{"crate_id":6,"path":["libc","unix","linux_like","linux","if_nameindex"],"kind":"struct"},"6:7365:8753":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","align","max_align_t"],"kind":"struct"},"17:12306:6735":{"crate_id":17,"path":["object","elf","GnuHashHeader"],"kind":"struct"},"6:1674:7986":{"crate_id":6,"path":["libc","unix","linux_like","arpreq_old"],"kind":"struct"},"1:4182:10373":{"crate_id":1,"path":["std","os","unix","net","ancillary","Messages"],"kind":"struct"},"1:3165:29780":{"crate_id":1,"path":["std","io","stdio","StdoutRaw"],"kind":"struct"},"6:5044:8340":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_setup"],"kind":"struct"},"5:6479:4768":{"crate_id":5,"path":["alloc","vec","drain","Drain"],"kind":"struct"},"1:1546:4766":{"crate_id":1,"path":["std","collections","hash","set","ExtractIf"],"kind":"struct"},"16:7651:22520":{"crate_id":16,"path":["gimli","read","rnglists","RngListIter"],"kind":"struct"},"5:7291:4768":{"crate_id":5,"path":["alloc","collections","binary_heap","Drain"],"kind":"struct"},"16:5905:9435":{"crate_id":16,"path":["gimli","read","cfi","FrameDescriptionEntry"],"kind":"struct"},"2:46338:9093":{"crate_id":2,"path":["core","core_arch","simd","u64x2"],"kind":"struct"},"24:4223:3712":{"crate_id":24,"path":["syn","token","PercentEq"],"kind":"struct"},"2:2936:3706":{"crate_id":2,"path":["core","ops","bit","Not"],"kind":"trait"},"1:4030:10349":{"crate_id":1,"path":["std","os","unix","fs","FileTypeExt"],"kind":"trait"},"1:7866:9726":{"crate_id":1,"path":["std","fs","Permissions"],"kind":"struct"},"17:9608:22588":{"crate_id":17,"path":["object","read","any","ComdatSectionIterator"],"kind":"struct"},"2:43194:9655":{"crate_id":2,"path":["core","hash","sip","SipHasher24"],"kind":"struct"},"1:9035:9259":{"crate_id":1,"path":["std","sync","mpmc","select","Operation"],"kind":"struct"},"16:2450:7341":{"crate_id":16,"path":["gimli","common","DebugArangesOffset"],"kind":"struct"},"20:878:258":{"crate_id":20,"path":["proc_macro2","TokenStream"],"kind":"struct"},"6:6781:8658":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statvfs64"],"kind":"struct"},"24:2728:122":{"crate_id":24,"path":["syn","token","Default"],"kind":"struct"},"2:3116:3413":{"crate_id":2,"path":["core","ops","index","IndexMut"],"kind":"trait"},"16:5661:9414":{"crate_id":16,"path":["gimli","read","cfi","EhHdrTable"],"kind":"struct"},"1:5973:6221":{"crate_id":1,"path":["std","sync","mpmc","counter","Sender"],"kind":"struct"},"6:1604:7932":{"crate_id":6,"path":["libc","unix","linux_like","lconv"],"kind":"struct"},"1:3396:6161":{"crate_id":1,"path":["std","io","Guard"],"kind":"struct"},"5:5383:15619":{"crate_id":5,"path":["alloc","slice","Concat"],"kind":"trait"},"1:3162:27715":{"crate_id":1,"path":["std","io","stdio","StdinRaw"],"kind":"struct"},"2:22333:10564":{"crate_id":2,"path":["core","core_simd","simd","cmp","ord","SimdPartialOrd"],"kind":"trait"},"2:43441:9659":{"crate_id":2,"path":["core","slice","ascii","EscapeByte"],"kind":"struct"},"1:5242:209":{"crate_id":1,"path":["std","path","Path"],"kind":"struct"},"0:965:1835":{"crate_id":0,"path":["serde_derive","Deserialize"],"kind":"proc_derive"},"24:2711:3655":{"crate_id":24,"path":["syn","token","Crate"],"kind":"struct"},"17:10384:22639":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdat"],"kind":"struct"},"17:14461:7298":{"crate_id":17,"path":["object","pe","ImageFunctionEntry"],"kind":"struct"},"16:6017:22506":{"crate_id":16,"path":["gimli","read","cfi","CfaRule"],"kind":"enum"},"2:48215:9175":{"crate_id":2,"path":["core","core_arch","x86","__m256d"],"kind":"struct"},"2:3209:217":{"crate_id":2,"path":["core","ops","range","RangeBounds"],"kind":"trait"},"24:3834:3686":{"crate_id":24,"path":["syn","token","At"],"kind":"struct"},"2:2872:3595":{"crate_id":2,"path":["core","marker","Unpin"],"kind":"trait"},"2:1558:6161":{"crate_id":2,"path":["core","mem","maybe_uninit","write_slice_cloned","Guard"],"kind":"struct"},"6:4841:8234":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_tp"],"kind":"struct"},"1:7581:6231":{"crate_id":1,"path":["std","backtrace_rs","print","BacktraceFrameFmt"],"kind":"struct"},"5:3225:34487":{"crate_id":5,"path":["alloc","collections","btree","set","IntersectionInner"],"kind":"enum"},"2:9845:2580":{"crate_id":2,"path":["core","fmt","Binary"],"kind":"trait"},"2:12231:9594":{"crate_id":2,"path":["core","str","iter","SplitInclusive"],"kind":"struct"},"6:5974:8469":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_mmap_req"],"kind":"struct"},"20:732:1964":{"crate_id":20,"path":["proc_macro2","fallback","Group"],"kind":"struct"},"24:4580:3323":{"crate_id":24,"path":["syn","derive","DataEnum"],"kind":"struct"},"6:654:16449":{"crate_id":6,"path":["libc","unix","linux_like","timezone"],"kind":"enum"},"2:22067:10567":{"crate_id":2,"path":["core","core_simd","simd","num","float","SimdFloat"],"kind":"trait"},"24:4918:3355":{"crate_id":24,"path":["syn","expr","ExprTuple"],"kind":"struct"},"2:7292:3462":{"crate_id":2,"path":["core","iter","range","Step"],"kind":"trait"},"1:9022:10137":{"crate_id":1,"path":["std","sync","mpmc","list","ListToken"],"kind":"struct"},"2:9792:232":{"crate_id":2,"path":["core","fmt","Result"],"kind":"type_alias"},"24:4363:3722":{"crate_id":24,"path":["syn","token","ShrEq"],"kind":"struct"},"2:23135:196":{"crate_id":2,"path":["core","num","nonzero","NonZeroUsize"],"kind":"struct"},"24:3306:3677":{"crate_id":24,"path":["syn","token","Unsafe"],"kind":"struct"},"16:5743:9421":{"crate_id":16,"path":["gimli","read","cfi","CfiEntriesIter"],"kind":"struct"},"1:1820:4842":{"crate_id":1,"path":["std","env","Args"],"kind":"struct"},"16:6268:35577":{"crate_id":16,"path":["gimli","read","dwarf","RangeIterInner"],"kind":"enum"},"2:10052:149":{"crate_id":2,"path":["core","hash","Hash"],"kind":"trait"},"1:12037:1142":{"crate_id":1,"path":["std","pointer"],"kind":"primitive"},"17:14164:7198":{"crate_id":17,"path":["object","pe","ImageEpilogueDynamicRelocationHeader"],"kind":"struct"},"2:45953:9073":{"crate_id":2,"path":["core","core_arch","simd","i16x2"],"kind":"struct"},"6:4666:8173":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Sym"],"kind":"struct"},"5:4247:3404":{"crate_id":5,"path":["alloc","collections","vec_deque","iter","Iter"],"kind":"struct"},"1:11199:9263":{"crate_id":1,"path":["std","sys","unix","time","SystemTime"],"kind":"struct"},"24:5152:3368":{"crate_id":24,"path":["syn","lit","LitChar"],"kind":"struct"},"6:4776:8200":{"crate_id":6,"path":["libc","unix","linux_like","linux","genlmsghdr"],"kind":"struct"},"11:1896:4766":{"crate_id":11,"path":["hashbrown","set","ExtractIf"],"kind":"struct"},"15:0:3169":{"crate_id":15,"path":["addr2line"],"kind":"module"},"2:40366:9620":{"crate_id":2,"path":["core","char","EscapeDefault"],"kind":"struct"},"24:5154:3370":{"crate_id":24,"path":["syn","lit","LitInt"],"kind":"struct"},"24:1620:1817":{"crate_id":24,"path":["syn","parse_macro_input"],"kind":"macro"},"2:9841:126":{"crate_id":2,"path":["core","fmt","Display"],"kind":"trait"},"17:11063:22762":{"crate_id":17,"path":["object","read","pe","file","PeComdatIterator"],"kind":"struct"},"24:5484:3389":{"crate_id":24,"path":["syn","ty","TypeParen"],"kind":"struct"},"16:7503:7375":{"crate_id":16,"path":["gimli","read","pubnames","DebugPubNames"],"kind":"struct"},"17:8660:22559":{"crate_id":17,"path":["object","common","AddressSize"],"kind":"enum"},"11:299:9554":{"crate_id":11,"path":["hashbrown","raw","RawIterRange"],"kind":"struct"},"17:10789:22733":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandVariant"],"kind":"enum"},"2:39586:221":{"crate_id":2,"path":["core","ops","range","RangeTo"],"kind":"struct"},"17:9791:35612":{"crate_id":17,"path":["object","read","any","SectionRelocationIteratorInternal"],"kind":"enum"},"17:12226:6712":{"crate_id":17,"path":["object","elf","Verdaux"],"kind":"struct"},"17:10341:6527":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbol"],"kind":"struct"},"24:4404:3725":{"crate_id":24,"path":["syn","token","Star"],"kind":"struct"},"16:5696:22503":{"crate_id":16,"path":["gimli","read","cfi","CieOffsetEncoding"],"kind":"enum"},"17:11789:6620":{"crate_id":17,"path":["object","archive","Header"],"kind":"struct"},"1:5827:6215":{"crate_id":1,"path":["std","sync","lazy_lock","LazyLock"],"kind":"struct"},"16:3915:7393":{"crate_id":16,"path":["gimli","constants","DwChildren"],"kind":"struct"},"17:2012:22646":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbolIterator"],"kind":"struct"},"1:11595:9277":{"crate_id":1,"path":["std","alloc","System"],"kind":"struct"},"6:501:7808":{"crate_id":6,"path":["libc","unix","rlimit"],"kind":"struct"},"24:4587:2316":{"crate_id":24,"path":["syn","expr","Expr"],"kind":"enum"},"1:2913:6212":{"crate_id":1,"path":["std","io","error","repr_bitpacked","Repr"],"kind":"struct"},"17:9897:22606":{"crate_id":17,"path":["object","read","archive","MemberHeader"],"kind":"enum"},"2:32391:2741":{"crate_id":2,"path":["core","error","tags","Value"],"kind":"struct"},"1:6468:6225":{"crate_id":1,"path":["std","sync","once_lock","OnceLock"],"kind":"struct"},"6:1591:7925":{"crate_id":6,"path":["libc","unix","linux_like","sched_param"],"kind":"struct"},"2:22338:10562":{"crate_id":2,"path":["core","core_simd","simd","cmp","ord","SimdOrd"],"kind":"trait"},"6:4914:8264":{"crate_id":6,"path":["libc","unix","linux_like","linux","file_clone_range"],"kind":"struct"},"2:2400:201":{"crate_id":2,"path":["core","cmp","Ord"],"kind":"trait"},"6:6813:8668":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_xmmreg"],"kind":"struct"},"24:4339:3720":{"crate_id":24,"path":["syn","token","ShlEq"],"kind":"struct"},"23:235:4259":{"crate_id":23,"path":["quote","__private","get_span","GetSpan"],"kind":"struct"},"24:2036:3408":{"crate_id":24,"path":["syn","punctuated","IterMut"],"kind":"struct"},"16:5088:7416":{"crate_id":16,"path":["gimli","constants","DwMacro"],"kind":"struct"},"2:22418:9603":{"crate_id":2,"path":["core","num","bignum","Big32x40"],"kind":"struct"},"2:4321:227":{"crate_id":2,"path":["core","cell","RefCell"],"kind":"struct"},"17:8954:22582":{"crate_id":17,"path":["object","common","SegmentFlags"],"kind":"enum"},"2:23321:8822":{"crate_id":2,"path":["core","num","nonzero","NonZeroIsize"],"kind":"struct"},"6:4893:8254":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlmsghdr"],"kind":"struct"},"1:10764:9739":{"crate_id":1,"path":["std","sys","unix","fs","StatxExtraFields"],"kind":"struct"},"24:3357:3680":{"crate_id":24,"path":["syn","token","Virtual"],"kind":"struct"},"2:10959:15636":{"crate_id":2,"path":["core","slice","iter","SplitNMut"],"kind":"struct"},"6:6059:8523":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","regex_t"],"kind":"struct"},"17:12738:6817":{"crate_id":17,"path":["object","macho","SubLibraryCommand"],"kind":"struct"},"11:1891:4768":{"crate_id":11,"path":["hashbrown","set","Drain"],"kind":"struct"},"1:12046:793":{"crate_id":1,"path":["std","i8"],"kind":"primitive"},"17:10398:22686":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdatSectionIterator"],"kind":"struct"},"5:881:6149":{"crate_id":5,"path":["alloc","collections","binary_heap","Hole"],"kind":"struct"},"2:42142:202":{"crate_id":2,"path":["core","sync","atomic","Ordering"],"kind":"enum"},"1:1563:9563":{"crate_id":1,"path":["std","collections","hash","set","SymmetricDifference"],"kind":"struct"},"14:31:10026":{"crate_id":14,"path":["rustc_demangle","v0","Demangle"],"kind":"struct"},"6:4449:8083":{"crate_id":6,"path":["libc","unix","linux_like","linux","cpu_set_t"],"kind":"struct"},"2:3364:3578":{"crate_id":2,"path":["core","ops","unsize","DispatchFromDyn"],"kind":"trait"},"17:13950:7141":{"crate_id":17,"path":["object","pe","ImageExportDirectory"],"kind":"struct"},"6:7651:8779":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_barrier_t"],"kind":"struct"},"1:7137:29172":{"crate_id":1,"path":["std","sys_common","wstr","WStrUnits"],"kind":"struct"},"1:7879:136":{"crate_id":1,"path":["std","fs","FileType"],"kind":"struct"},"24:2864:3661":{"crate_id":24,"path":["syn","token","For"],"kind":"struct"},"17:13759:7095":{"crate_id":17,"path":["object","pe","ImageSectionHeader"],"kind":"struct"},"1:11983:9798":{"crate_id":1,"path":["std","backtrace_rs","symbolize","gimli","parse_running_mmaps","MapsEntry"],"kind":"struct"},"14:187:21584":{"crate_id":14,"path":["rustc_demangle","SizeLimitedFmtAdapter"],"kind":"struct"},"6:5829:8391":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","statx"],"kind":"struct"},"1:12051:1636":{"crate_id":1,"path":["std","u8"],"kind":"primitive"},"2:41889:9038":{"crate_id":2,"path":["core","net","socket_addr","SocketAddrV4"],"kind":"struct"},"2:44055:9677":{"crate_id":2,"path":["core","str","iter","Matches"],"kind":"struct"},"1:850:3408":{"crate_id":1,"path":["std","collections","hash","map","IterMut"],"kind":"struct"},"1:588:10190":{"crate_id":1,"path":["std","ascii","AsciiExt"],"kind":"trait"},"24:4235:3713":{"crate_id":24,"path":["syn","token","Plus"],"kind":"struct"},"2:6445:9588":{"crate_id":2,"path":["core","iter","adapters","map_windows","MapWindowsInner"],"kind":"struct"},"2:8201:3479":{"crate_id":2,"path":["core","iter","traits","marker","FusedIterator"],"kind":"trait"},"2:32351:7713":{"crate_id":2,"path":["core","convert","Infallible"],"kind":"enum"},"17:13056:6882":{"crate_id":17,"path":["object","macho","EncryptionInfoCommand64"],"kind":"struct"},"1:7718:10198":{"crate_id":1,"path":["std","backtrace","BacktraceStatus"],"kind":"enum"},"24:3374:3681":{"crate_id":24,"path":["syn","token","Where"],"kind":"struct"},"2:30797:32497":{"crate_id":2,"path":["core","ptr","alignment","AlignmentEnum64"],"kind":"enum"},"17:11408:22593":{"crate_id":17,"path":["object","read","FileKind"],"kind":"enum"},"6:4955:8286":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_sndrcvinfo"],"kind":"struct"},"16:4053:7394":{"crate_id":16,"path":["gimli","constants","DwTag"],"kind":"struct"},"2:22607:8808":{"crate_id":2,"path":["core","num","diy_float","Fp"],"kind":"struct"},"24:4882:3347":{"crate_id":24,"path":["syn","expr","ExprParen"],"kind":"struct"},"11:2151:10210":{"crate_id":11,"path":["hashbrown","set","VacantEntry"],"kind":"struct"},"17:14077:7179":{"crate_id":17,"path":["object","pe","ImageResourceDirectoryString"],"kind":"struct"},"2:40720:3508":{"crate_id":2,"path":["core","iter","adapters","peekable","Peekable"],"kind":"struct"},"16:7708:7380":{"crate_id":16,"path":["gimli","read","str","DebugStrOffsets"],"kind":"struct"},"2:9836:117":{"crate_id":2,"path":["core","fmt","Debug"],"kind":"trait"},"17:11192:6577":{"crate_id":17,"path":["object","read","pe","export","Export"],"kind":"struct"},"2:40294:9622":{"crate_id":2,"path":["core","char","convert","ParseCharError"],"kind":"struct"},"24:3119:234":{"crate_id":24,"path":["syn","token","Return"],"kind":"struct"},"6:6120:8548":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_seccomp"],"kind":"struct"},"6:4710:8177":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Shdr"],"kind":"struct"},"17:8927:22581":{"crate_id":17,"path":["object","common","FileFlags"],"kind":"enum"},"1:6251:6221":{"crate_id":1,"path":["std","sync","mpmc","Sender"],"kind":"struct"},"16:4417:7396":{"crate_id":16,"path":["gimli","constants","DwForm"],"kind":"struct"},"17:10411:22658":{"crate_id":17,"path":["object","read","elf","note","NoteIterator"],"kind":"struct"},"16:6879:7476":{"crate_id":16,"path":["gimli","read","line","FileEntryFormat"],"kind":"struct"},"1:7844:10280":{"crate_id":1,"path":["std","fs","ReadDir"],"kind":"struct"},"1:4639:8651":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt","st_mtime"],"kind":"foreign_type"},"16:8072:7578":{"crate_id":16,"path":["gimli","read","unit","AttrsIter"],"kind":"struct"},"24:2242:6344":{"crate_id":24,"path":["syn","thread","ThreadBound"],"kind":"struct"},"24:3204:3675":{"crate_id":24,"path":["syn","token","Super"],"kind":"struct"},"17:9999:6484":{"crate_id":17,"path":["object","read","coff","section","CoffSection"],"kind":"struct"},"16:6968:22513":{"crate_id":16,"path":["gimli","read","loclists","RawLocListEntry"],"kind":"enum"},"24:96:10285":{"crate_id":24,"path":["syn","token","private","Sealed"],"kind":"trait"},"24:1532:2988":{"crate_id":24,"path":["syn","parse","Unexpected"],"kind":"enum"},"6:6079:8531":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","Elf32_Chdr"],"kind":"struct"},"2:48317:9181":{"crate_id":2,"path":["core","core_arch","x86","__m512bh"],"kind":"struct"},"1:5641:9722":{"crate_id":1,"path":["std","sync","mpsc","SyncSender"],"kind":"struct"},"6:533:7831":{"crate_id":6,"path":["libc","unix","hostent"],"kind":"struct"},"5:2231:34386":{"crate_id":5,"path":["alloc","collections","btree","navigate","LazyLeafHandle"],"kind":"enum"},"2:39566:218":{"crate_id":2,"path":["core","ops","range","RangeFrom"],"kind":"struct"},"17:12877:6852":{"crate_id":17,"path":["object","macho","DylibTableOfContents"],"kind":"struct"},"6:4977:8302":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_rcvinfo"],"kind":"struct"},"5:261:6141":{"crate_id":5,"path":["alloc","boxed","thin","drop","DropGuard"],"kind":"struct"},"6:1913:17441":{"crate_id":6,"path":["libc","unix","linux_like","linux","fpos64_t"],"kind":"enum"},"1:12005:10200":{"crate_id":1,"path":["std","backtrace_rs","types","BytesOrWideString"],"kind":"enum"},"1:9973:9648":{"crate_id":1,"path":["std","sys","unix","net","Socket"],"kind":"struct"},"16:5419:6494":{"crate_id":16,"path":["gimli","endianity","BigEndian"],"kind":"struct"},"5:6346:10573":{"crate_id":5,"path":["alloc","task","Wake"],"kind":"trait"},"1:12058:1238":{"crate_id":1,"path":["std","reference"],"kind":"primitive"},"21:989:258":{"crate_id":21,"path":["proc_macro","bridge","client","TokenStream"],"kind":"struct"},"17:13576:7043":{"crate_id":17,"path":["object","pe","ImageOptionalHeader32"],"kind":"struct"},"24:4839:3337":{"crate_id":24,"path":["syn","expr","ExprForLoop"],"kind":"struct"},"5:2178:9568":{"crate_id":5,"path":["alloc","collections","btree","navigate","LeafRange"],"kind":"struct"},"16:4344:7395":{"crate_id":16,"path":["gimli","constants","DwAt"],"kind":"struct"},"2:45861:9069":{"crate_id":2,"path":["core","core_arch","simd","i8x2"],"kind":"struct"},"6:7604:8769":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_rwlockattr_t"],"kind":"struct"},"21:244:35707":{"crate_id":21,"path":["proc_macro","bridge","handle","OwnedStore"],"kind":"struct"},"2:44785:213":{"crate_id":2,"path":["core","task","poll","Poll"],"kind":"enum"},"1:10540:10319":{"crate_id":1,"path":["std","sys","unix","stdio","Stderr"],"kind":"struct"},"5:6681:6141":{"crate_id":5,"path":["alloc","vec","into_iter","drop","DropGuard"],"kind":"struct"},"6:6682:8622":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","flock"],"kind":"struct"},"16:5574:7362":{"crate_id":16,"path":["gimli","read","addr","DebugAddr"],"kind":"struct"},"11:1087:35528":{"crate_id":11,"path":["hashbrown","map","KeyOrRef"],"kind":"enum"},"16:0:3170":{"crate_id":16,"path":["gimli"],"kind":"module"},"16:5403:6493":{"crate_id":16,"path":["gimli","endianity","LittleEndian"],"kind":"struct"},"1:3734:10339":{"crate_id":1,"path":["std","net","tcp","TcpStream"],"kind":"struct"},"21:2725:1964":{"crate_id":21,"path":["proc_macro","Group"],"kind":"struct"},"3:0:473":{"crate_id":3,"path":["compiler_builtins"],"kind":"module"},"2:3986:6161":{"crate_id":2,"path":["core","array","Guard"],"kind":"struct"},"17:11720:22597":{"crate_id":17,"path":["object","read","CompressionFormat"],"kind":"enum"},"17:11394:134":{"crate_id":17,"path":["object","read","Error"],"kind":"struct"},"6:4523:8117":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_replay"],"kind":"struct"},"1:4705:10377":{"crate_id":1,"path":["std","os","linux","process","CommandExt"],"kind":"trait"},"16:3764:7389":{"crate_id":16,"path":["gimli","constants","DwSect"],"kind":"struct"},"17:11368:6585":{"crate_id":17,"path":["object","read","pe","rich","RichHeaderInfo"],"kind":"struct"},"6:1521:7880":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr"],"kind":"struct"},"20:680:3540":{"crate_id":20,"path":["proc_macro2","parse","Cursor"],"kind":"struct"},"24:1923:3402":{"crate_id":24,"path":["syn","punctuated","IntoPairs"],"kind":"struct"},"1:11053:6239":{"crate_id":1,"path":["std","sys","unix","process","process_inner","posix_spawn","PosixSpawnattr"],"kind":"struct"},"1:10078:10227":{"crate_id":1,"path":["std","sys","unix","os","SplitPaths"],"kind":"struct"},"2:46015:9075":{"crate_id":2,"path":["core","core_arch","simd","u16x4"],"kind":"struct"},"5:1310:10032":{"crate_id":5,"path":["alloc","collections","btree","map","entry","OccupiedError"],"kind":"struct"},"5:4045:6141":{"crate_id":5,"path":["alloc","collections","vec_deque","drain","drop","DropGuard"],"kind":"struct"},"6:4922:8269":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_ifru_map"],"kind":"struct"},"24:500:3414":{"crate_id":24,"path":["syn","drops","NoDrop"],"kind":"struct"},"1:6359:182":{"crate_id":1,"path":["std","sync","mutex","Mutex"],"kind":"struct"},"17:9173:6497":{"crate_id":17,"path":["object","endian","U64Bytes"],"kind":"struct"},"2:10298:6196":{"crate_id":2,"path":["core","slice","sort","merge_sort","BufGuard"],"kind":"struct"},"1:9027:1970":{"crate_id":1,"path":["std","sync","mpmc","select","Token"],"kind":"struct"},"14:165:21577":{"crate_id":14,"path":["rustc_demangle","DemangleStyle"],"kind":"enum"},"24:4433:3727":{"crate_id":24,"path":["syn","token","Tilde"],"kind":"struct"},"20:119:9344":{"crate_id":20,"path":["proc_macro2","rcvec","RcVec"],"kind":"struct"},"17:1075:22615":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbolIterator"],"kind":"struct"},"6:1632:7957":{"crate_id":6,"path":["libc","unix","linux_like","in_pktinfo"],"kind":"struct"},"16:4921:7411":{"crate_id":16,"path":["gimli","constants","DwIdx"],"kind":"struct"},"16:5939:9441":{"crate_id":16,"path":["gimli","read","cfi","UnwindContext"],"kind":"struct"},"2:42977:73":{"crate_id":2,"path":["core","fmt","rt","Argument"],"kind":"struct"},"17:11174:22766":{"crate_id":17,"path":["object","read","pe","export","ExportTarget"],"kind":"enum"},"5:1382:99":{"crate_id":5,"path":["alloc","collections","btree","map","BTreeMap"],"kind":"struct"},"2:2919:6351":{"crate_id":2,"path":["core","ops","arith","SubAssign"],"kind":"trait"},"2:13211:113":{"crate_id":2,"path":["core","task","wake","Context"],"kind":"struct"},"6:4628:8171":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Ehdr"],"kind":"struct"},"6:5117:8375":{"crate_id":6,"path":["libc","unix","linux_like","linux","ifconf"],"kind":"struct"},"24:1070:2053":{"crate_id":24,"path":["syn","lifetime","Lifetime"],"kind":"struct"},"1:6432:10443":{"crate_id":1,"path":["std","sync","once","OnceState"],"kind":"struct"},"24:4902:3351":{"crate_id":24,"path":["syn","expr","ExprReturn"],"kind":"struct"},"18:538:6380":{"crate_id":18,"path":["memchr","memmem","rabinkarp","NeedleHash"],"kind":"struct"},"2:2880:4328":{"crate_id":2,"path":["core","marker","FnPtr"],"kind":"trait"},"6:4578:8146":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_rumble_effect"],"kind":"struct"},"1:363:4570":{"crate_id":1,"path":["std","thread","scoped","ScopedJoinHandle"],"kind":"struct"},"2:43186:9653":{"crate_id":2,"path":["core","hash","sip","SipHasher13"],"kind":"struct"},"6:5104:8369":{"crate_id":6,"path":["libc","unix","linux_like","linux","ifreq"],"kind":"struct"},"1:4637:8649":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt","st_atime"],"kind":"foreign_type"},"9:507:7777":{"crate_id":9,"path":["miniz_oxide","StreamResult"],"kind":"struct"},"1:4233:10374":{"crate_id":1,"path":["std","os","unix","net","datagram","UnixDatagram"],"kind":"struct"},"2:8204:3482":{"crate_id":2,"path":["core","iter","traits","marker","TrustedLen"],"kind":"trait"},"17:14101:7184":{"crate_id":17,"path":["object","pe","ImageLoadConfigCodeIntegrity"],"kind":"struct"},"18:624:35621":{"crate_id":18,"path":["memchr","memmem","twoway","SuffixOrdering"],"kind":"enum"},"17:9522:22586":{"crate_id":17,"path":["object","read","any","SectionIterator"],"kind":"struct"},"5:2698:8796":{"crate_id":5,"path":["alloc","collections","btree","node","Handle"],"kind":"struct"},"2:23166:190":{"crate_id":2,"path":["core","num","nonzero","NonZeroI8"],"kind":"struct"},"2:39526:219":{"crate_id":2,"path":["core","ops","range","RangeFull"],"kind":"struct"},"17:10647:6593":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCache"],"kind":"struct"},"17:10576:9378":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSubsectionIterator"],"kind":"struct"},"1:3990:10347":{"crate_id":1,"path":["std","os","unix","fs","OpenOptionsExt"],"kind":"trait"},"2:44143:9683":{"crate_id":2,"path":["core","str","iter","EncodeUtf16"],"kind":"struct"},"2:44828:9065":{"crate_id":2,"path":["core","task","wake","RawWakerVTable"],"kind":"struct"},"2:48189:9173":{"crate_id":2,"path":["core","core_arch","x86","__m256i"],"kind":"struct"},"11:364:6134":{"crate_id":11,"path":["hashbrown","raw","RawIntoIter"],"kind":"struct"},"5:1110:34422":{"crate_id":5,"path":["alloc","collections","btree","append","MergeIter"],"kind":"struct"},"24:924:3036":{"crate_id":24,"path":["syn","generics","TypeGenerics"],"kind":"struct"},"21:1196:214":{"crate_id":21,"path":["proc_macro","bridge","client","ProcMacro"],"kind":"enum"},"24:4922:3356":{"crate_id":24,"path":["syn","expr","ExprUnary"],"kind":"struct"},"17:13686:7084":{"crate_id":17,"path":["object","pe","ImageRomHeaders"],"kind":"struct"},"5:35:4682":{"crate_id":5,"path":["alloc","raw_vec","RawVec"],"kind":"struct"},"2:42949:33043":{"crate_id":2,"path":["core","fmt","rt","Count"],"kind":"enum"},"20:704:258":{"crate_id":20,"path":["proc_macro2","fallback","TokenStream"],"kind":"struct"},"17:11887:6639":{"crate_id":17,"path":["object","elf","FileHeader32"],"kind":"struct"},"2:44646:9717":{"crate_id":2,"path":["core","time","TryFromFloatSecsError"],"kind":"struct"},"23:407:4140":{"crate_id":23,"path":["quote","__private","RepInterp"],"kind":"struct"},"16:7694:7379":{"crate_id":16,"path":["gimli","read","str","DebugStr"],"kind":"struct"},"20:122:35628":{"crate_id":20,"path":["proc_macro2","rcvec","RcVecBuilder"],"kind":"struct"},"17:12659:6806":{"crate_id":17,"path":["object","macho","FvmlibCommand"],"kind":"struct"},"11:811:4766":{"crate_id":11,"path":["hashbrown","map","ExtractIf"],"kind":"struct"},"1:10534:10321":{"crate_id":1,"path":["std","sys","unix","stdio","Stdin"],"kind":"struct"},"16:6415:9480":{"crate_id":16,"path":["gimli","read","aranges","ArangeHeaderIter"],"kind":"struct"},"16:3600:7388":{"crate_id":16,"path":["gimli","arch","X86"],"kind":"struct"},"18:574:6376":{"crate_id":18,"path":["memchr","memmem","twoway","Forward"],"kind":"struct"},"17:13114:6891":{"crate_id":17,"path":["object","macho","DyldInfoCommand"],"kind":"struct"},"17:9618:35613":{"crate_id":17,"path":["object","read","any","ComdatSectionIteratorInternal"],"kind":"enum"},"24:2660:104":{"crate_id":24,"path":["syn","token","Break"],"kind":"struct"},"17:14127:7190":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation64"],"kind":"struct"},"21:2379:2663":{"crate_id":21,"path":["proc_macro","bridge","Literal"],"kind":"struct"},"1:8536:9730":{"crate_id":1,"path":["std","path","Components"],"kind":"struct"},"6:4434:8076":{"crate_id":6,"path":["libc","unix","linux_like","linux","fsid_t"],"kind":"struct"},"16:8205:22525":{"crate_id":16,"path":["gimli","read","value","ValueType"],"kind":"enum"},"6:4800:8211":{"crate_id":6,"path":["libc","unix","linux_like","linux","inotify_event"],"kind":"struct"},"1:8007:10139":{"crate_id":1,"path":["std","io","error","Custom"],"kind":"struct"},"17:9986:22612":{"crate_id":17,"path":["object","read","coff","section","CoffSectionIterator"],"kind":"struct"},"17:13260:6917":{"crate_id":17,"path":["object","macho","Nlist64"],"kind":"struct"},"1:11172:29818":{"crate_id":1,"path":["std","sys","unix","thread","cgroups","Cgroup"],"kind":"enum"},"2:44231:15655":{"crate_id":2,"path":["core","str","pattern","SearchStep"],"kind":"enum"},"1:12059:13":{"crate_id":1,"path":["std","fn"],"kind":"primitive"},"2:46786:9105":{"crate_id":2,"path":["core","core_arch","simd","u8x32"],"kind":"struct"},"2:10281:6195":{"crate_id":2,"path":["core","slice","sort","merge","MergeHole"],"kind":"struct"},"11:742:10129":{"crate_id":11,"path":["hashbrown","map","IntoValues"],"kind":"struct"},"2:30605:4632":{"crate_id":2,"path":["core","mem","transmutability","Assume"],"kind":"struct"},"2:43869:9595":{"crate_id":2,"path":["core","str","iter","RSplit"],"kind":"struct"},"18:644:6376":{"crate_id":18,"path":["memchr","memmem","x86","avx","nostd","Forward"],"kind":"struct"},"16:6531:9493":{"crate_id":16,"path":["gimli","read","index","UnitIndexSectionIterator"],"kind":"struct"},"24:4984:1984":{"crate_id":24,"path":["syn","generics","Generics"],"kind":"struct"},"2:2889:6347":{"crate_id":2,"path":["core","ops","arith","Sub"],"kind":"trait"},"2:22151:10569":{"crate_id":2,"path":["core","core_simd","simd","num","uint","SimdUint"],"kind":"trait"},"2:10931:9671":{"crate_id":2,"path":["core","slice","iter","SplitN"],"kind":"struct"},"24:4894:3349":{"crate_id":24,"path":["syn","expr","ExprReference"],"kind":"struct"},"24:4476:2309":{"crate_id":24,"path":["syn","token","Paren"],"kind":"struct"},"2:4394:3567":{"crate_id":2,"path":["core","cell","BorrowRef"],"kind":"struct"},"24:4001:3696":{"crate_id":24,"path":["syn","token","EqEq"],"kind":"struct"},"16:7884:22522":{"crate_id":16,"path":["gimli","read","unit","AttributeValue"],"kind":"enum"},"16:4527:7399":{"crate_id":16,"path":["gimli","constants","DwDs"],"kind":"struct"},"16:7768:7368":{"crate_id":16,"path":["gimli","read","unit","DebugInfo"],"kind":"struct"},"1:9165:29302":{"crate_id":1,"path":["std","sys","common","thread_local","fast_local","Key"],"kind":"struct"},"18:515:6379":{"crate_id":18,"path":["memchr","memmem","prefilter","PrefilterFn"],"kind":"struct"},"11:1066:21566":{"crate_id":11,"path":["hashbrown","map","EntryRef"],"kind":"enum"},"2:2931:6354":{"crate_id":2,"path":["core","ops","arith","RemAssign"],"kind":"trait"},"24:2575:3651":{"crate_id":24,"path":["syn","token","Async"],"kind":"struct"},"2:10817:15637":{"crate_id":2,"path":["core","slice","iter","SplitInclusiveMut"],"kind":"struct"},"2:2911:6360":{"crate_id":2,"path":["core","ops","arith","Neg"],"kind":"trait"},"2:40393:9627":{"crate_id":2,"path":["core","char","ToLowercase"],"kind":"struct"},"24:4112:3704":{"crate_id":24,"path":["syn","token","MinusEq"],"kind":"struct"},"2:40627:3501":{"crate_id":2,"path":["core","iter","adapters","enumerate","Enumerate"],"kind":"struct"},"17:12099:6686":{"crate_id":17,"path":["object","elf","Rela32"],"kind":"struct"},"24:904:35958":{"crate_id":24,"path":["syn","generics","ConstParams"],"kind":"struct"},"17:10495:9371":{"crate_id":17,"path":["object","read","elf","version","VersionTable"],"kind":"struct"},"1:1874:10042":{"crate_id":1,"path":["std","error","Report"],"kind":"struct"},"21:2578:3590":{"crate_id":21,"path":["proc_macro","diagnostic","Level"],"kind":"enum"},"24:4864:2318":{"crate_id":24,"path":["syn","expr","ExprLit"],"kind":"struct"},"16:5816:9426":{"crate_id":16,"path":["gimli","read","cfi","AugmentationData"],"kind":"struct"},"24:4392:3724":{"crate_id":24,"path":["syn","token","SlashEq"],"kind":"struct"},"6:1682:7987":{"crate_id":6,"path":["libc","unix","linux_like","arphdr"],"kind":"struct"},"2:46116:9079":{"crate_id":2,"path":["core","core_arch","simd","i16x4"],"kind":"struct"},"17:9446:22585":{"crate_id":17,"path":["object","read","any","SegmentIterator"],"kind":"struct"},"2:3312:33431":{"crate_id":2,"path":["core","ops","try_trait","NeverShortCircuitResidual"],"kind":"enum"},"6:6711:8634":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stack_t"],"kind":"struct"},"21:1063:2043":{"crate_id":21,"path":["proc_macro","bridge","client","Span"],"kind":"struct"},"24:1137:5261":{"crate_id":24,"path":["syn","lit","LitIntRepr"],"kind":"struct"},"2:47210:9128":{"crate_id":2,"path":["core","core_arch","simd","f32x8"],"kind":"struct"},"2:42245:86":{"crate_id":2,"path":["core","sync","atomic","AtomicI16"],"kind":"struct"},"5:6525:6141":{"crate_id":5,"path":["alloc","vec","drain","drop","DropGuard"],"kind":"struct"},"17:10215:22645":{"crate_id":17,"path":["object","read","elf","segment","ElfSegmentIterator"],"kind":"struct"},"2:21226:33502":{"crate_id":2,"path":["core","core_simd","swizzle","resize","Resize"],"kind":"struct"},"2:41133:3468":{"crate_id":2,"path":["core","iter","sources","once","Once"],"kind":"struct"},"11:1910:9562":{"crate_id":11,"path":["hashbrown","set","Difference"],"kind":"struct"},"6:483:7800":{"crate_id":6,"path":["libc","unix","utimbuf"],"kind":"struct"},"2:8879:3980":{"crate_id":2,"path":["core","panic","unwind_safe","RefUnwindSafe"],"kind":"trait"},"1:11146:9251":{"crate_id":1,"path":["std","sys","unix","process","process_inner","ExitStatus"],"kind":"struct"},"1:2381:10277":{"crate_id":1,"path":["std","fs","read_dir"],"kind":"function"},"1:2623:10045":{"crate_id":1,"path":["std","io","buffered","bufwriter","WriterPanicked"],"kind":"struct"},"2:13066:211":{"crate_id":2,"path":["core","future","pending","Pending"],"kind":"struct"},"5:1500:10128":{"crate_id":5,"path":["alloc","collections","btree","map","IntoKeys"],"kind":"struct"},"1:11342:9276":{"crate_id":1,"path":["std","sys_common","wtf8","CodePoint"],"kind":"struct"},"2:11970:15644":{"crate_id":2,"path":["core","str","converts","from_utf8"],"kind":"function"},"17:12238:6715":{"crate_id":17,"path":["object","elf","Verneed"],"kind":"struct"},"1:11614:9754":{"crate_id":1,"path":["std","backtrace_rs","backtrace","Frame"],"kind":"struct"},"2:12429:9358":{"crate_id":2,"path":["core","str","pattern","Searcher"],"kind":"trait"},"16:4949:7412":{"crate_id":16,"path":["gimli","constants","DwDefaulted"],"kind":"struct"},"2:46605:9101":{"crate_id":2,"path":["core","core_arch","simd","m8x16"],"kind":"struct"},"1:12050:788":{"crate_id":1,"path":["std","i128"],"kind":"primitive"},"17:13677:7083":{"crate_id":17,"path":["object","pe","ImageNtHeaders32"],"kind":"struct"},"16:7342:35567":{"crate_id":16,"path":["gimli","read","op","EvaluationState"],"kind":"enum"},"2:47708:9162":{"crate_id":2,"path":["core","core_arch","simd","i16x32"],"kind":"struct"},"2:43733:15624":{"crate_id":2,"path":["core","slice","iter","ArrayChunksMut"],"kind":"struct"},"24:4450:2656":{"crate_id":24,"path":["syn","token","Brace"],"kind":"struct"},"16:6485:7364":{"crate_id":16,"path":["gimli","read","index","DebugCuIndex"],"kind":"struct"},"2:40779:3496":{"crate_id":2,"path":["core","iter","adapters","step_by","StepBy"],"kind":"struct"},"16:6818:9514":{"crate_id":16,"path":["gimli","read","line","CompleteLineProgram"],"kind":"struct"},"24:5062:2638":{"crate_id":24,"path":["syn","generics","TraitBoundModifier"],"kind":"enum"},"24:2524:3728":{"crate_id":24,"path":["syn","token","Underscore"],"kind":"struct"},"5:5872:4768":{"crate_id":5,"path":["alloc","string","Drain"],"kind":"struct"},"6:4745:8181":{"crate_id":6,"path":["libc","unix","linux_like","linux","mntent"],"kind":"struct"},"2:40530:10263":{"crate_id":2,"path":["core","ffi","VaList"],"kind":"struct"},"2:3448:70":{"crate_id":2,"path":["core","any","Any"],"kind":"trait"},"17:8766:22576":{"crate_id":17,"path":["object","common","ComdatKind"],"kind":"enum"},"16:2548:7345":{"crate_id":16,"path":["gimli","common","LocationListsOffset"],"kind":"struct"},"5:7554:10034":{"crate_id":5,"path":["alloc","string","FromUtf16Error"],"kind":"struct"},"17:13216:6910":{"crate_id":17,"path":["object","macho","DataInCodeEntry"],"kind":"struct"},"24:4874:3345":{"crate_id":24,"path":["syn","expr","ExprMatch"],"kind":"struct"},"1:4823:10358":{"crate_id":1,"path":["std","os","fd","owned","AsFd"],"kind":"trait"},"2:44436:9697":{"crate_id":2,"path":["core","str","pattern","EmptyNeedle"],"kind":"struct"},"17:14025:7162":{"crate_id":17,"path":["object","pe","ImageBoundImportDescriptor"],"kind":"struct"},"6:596:7866":{"crate_id":6,"path":["libc","unix","protoent"],"kind":"struct"},"2:40646:3503":{"crate_id":2,"path":["core","iter","adapters","filter_map","FilterMap"],"kind":"struct"},"2:40400:9628":{"crate_id":2,"path":["core","char","ToUppercase"],"kind":"struct"},"6:7639:8777":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_mutex_t"],"kind":"struct"},"16:6425:9481":{"crate_id":16,"path":["gimli","read","aranges","ArangeHeader"],"kind":"struct"},"16:8181:7382":{"crate_id":16,"path":["gimli","read","unit","DebugTypes"],"kind":"struct"},"2:23011:192":{"crate_id":2,"path":["core","num","nonzero","NonZeroU16"],"kind":"struct"},"17:11163:6572":{"crate_id":17,"path":["object","read","pe","data_directory","DataDirectories"],"kind":"struct"},"24:920:3363":{"crate_id":24,"path":["syn","generics","ImplGenerics"],"kind":"struct"},"17:261:35616":{"crate_id":17,"path":["object","read","util","DebugLen"],"kind":"struct"},"2:22524:8803":{"crate_id":2,"path":["core","num","dec2flt","common","BiasedFp"],"kind":"struct"},"6:6804:8665":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_fpxreg"],"kind":"struct"},"5:1296:10209":{"crate_id":5,"path":["alloc","collections","btree","map","entry","OccupiedEntry"],"kind":"struct"},"5:4207:6161":{"crate_id":5,"path":["alloc","collections","vec_deque","into_iter","try_rfold","Guard"],"kind":"struct"},"11:1676:6138":{"crate_id":11,"path":["hashbrown","scopeguard","ScopeGuard"],"kind":"struct"},"11:774:9559":{"crate_id":11,"path":["hashbrown","map","Keys"],"kind":"struct"},"1:929:10205":{"crate_id":1,"path":["std","collections","hash","map","RawEntryMut"],"kind":"enum"},"24:54:2052":{"crate_id":24,"path":["syn","token"],"kind":"module"},"24:4566:1981":{"crate_id":24,"path":["syn","derive","Data"],"kind":"enum"},"21:2015:4790":{"crate_id":21,"path":["proc_macro","bridge","LitKind"],"kind":"enum"},"20:843:2663":{"crate_id":20,"path":["proc_macro2","imp","Literal"],"kind":"enum"},"2:44586:9713":{"crate_id":2,"path":["core","str","IsAsciiWhitespace"],"kind":"struct"},"17:12025:6673":{"crate_id":17,"path":["object","elf","Sym32"],"kind":"struct"},"2:40374:9626":{"crate_id":2,"path":["core","char","EscapeDebug"],"kind":"struct"},"1:5053:29272":{"crate_id":1,"path":["std","path","fmt","DebugHelper"],"kind":"struct"},"1:3968:10345":{"crate_id":1,"path":["std","os","unix","fs","FileExt"],"kind":"trait"},"1:11384:9751":{"crate_id":1,"path":["std","sys_common","wtf8","Wtf8CodePoints"],"kind":"struct"},"22:0:3293":{"crate_id":22,"path":["unicode_ident"],"kind":"module"},"24:5156:3369":{"crate_id":24,"path":["syn","lit","LitFloat"],"kind":"struct"},"24:4989:2527":{"crate_id":24,"path":["syn","generics","GenericParam"],"kind":"enum"},"1:10942:10041":{"crate_id":1,"path":["std","sys","unix","os","JoinPathsError"],"kind":"struct"},"6:7679:8785":{"crate_id":6,"path":["libc","unix","linux_like","linux","canxl_frame"],"kind":"struct"},"17:14297:7253":{"crate_id":17,"path":["object","pe","ImageHotPatchHashes"],"kind":"struct"},"24:1773:1969":{"crate_id":24,"path":["syn","punctuated","Punctuated"],"kind":"struct"},"1:6164:6220":{"crate_id":1,"path":["std","sync","mpmc","waker","SyncWaker"],"kind":"struct"},"1:3243:10324":{"crate_id":1,"path":["std","io","stdio","StdoutLock"],"kind":"struct"},"6:5068:8347":{"crate_id":6,"path":["libc","unix","linux_like","linux","af_alg_iv"],"kind":"struct"},"17:10113:22633":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdatSectionIterator"],"kind":"struct"},"2:43594:33317":{"crate_id":2,"path":["core","slice","iter","GenericSplitN"],"kind":"struct"},"19:0:1122":{"crate_id":19,"path":["panic_unwind"],"kind":"module"},"16:2359:7337":{"crate_id":16,"path":["gimli","common","Register"],"kind":"struct"},"16:6401:7363":{"crate_id":16,"path":["gimli","read","aranges","DebugAranges"],"kind":"struct"},"23:11:3432":{"crate_id":23,"path":["quote","ext","TokenStreamExt"],"kind":"trait"},"1:11160:9252":{"crate_id":1,"path":["std","sys","unix","process","process_inner","ExitStatusError"],"kind":"struct"},"16:8294:134":{"crate_id":16,"path":["gimli","read","Error"],"kind":"enum"},"24:5036:3360":{"crate_id":24,"path":["syn","generics","BoundLifetimes"],"kind":"struct"},"17:12725:6815":{"crate_id":17,"path":["object","macho","SubUmbrellaCommand"],"kind":"struct"},"2:42681:2580":{"crate_id":2,"path":["core","fmt","num","Binary"],"kind":"struct"},"24:3868:3688":{"crate_id":24,"path":["syn","token","CaretEq"],"kind":"struct"},"17:11125:22739":{"crate_id":17,"path":["object","read","pe","section","PeSectionIterator"],"kind":"struct"},"5:7023:6181":{"crate_id":5,"path":["alloc","vec","dedup_by","FillGapOnDrop"],"kind":"struct"},"2:3293:15668":{"crate_id":2,"path":["core","ops","try_trait","Residual"],"kind":"trait"},"18:582:4341":{"crate_id":18,"path":["memchr","memmem","twoway","Reverse"],"kind":"struct"},"24:1141:5265":{"crate_id":24,"path":["syn","lit","LitFloatRepr"],"kind":"struct"},"24:1896:3401":{"crate_id":24,"path":["syn","punctuated","PairsMut"],"kind":"struct"},"20:698:9345":{"crate_id":20,"path":["proc_macro2","rcvec","RcVecIntoIter"],"kind":"struct"},"17:14002:7157":{"crate_id":17,"path":["object","pe","ImageTlsDirectory32"],"kind":"struct"},"24:4898:3350":{"crate_id":24,"path":["syn","expr","ExprRepeat"],"kind":"struct"},"16:2618:7348":{"crate_id":16,"path":["gimli","common","DebugMacinfoOffset"],"kind":"struct"},"24:557:6335":{"crate_id":24,"path":["syn","error","SpanRange"],"kind":"struct"},"16:5435:7420":{"crate_id":16,"path":["gimli","read","util","sealed","CapacityFull"],"kind":"struct"},"16:6545:7437":{"crate_id":16,"path":["gimli","read","index","UnitIndexSection"],"kind":"struct"},"6:1718:8004":{"crate_id":6,"path":["libc","unix","linux_like","utsname"],"kind":"struct"},"1:1761:10218":{"crate_id":1,"path":["std","env","VarsOs"],"kind":"struct"},"2:4070:32154":{"crate_id":2,"path":["core","asserting","TryCaptureWithDebug"],"kind":"struct"},"17:10604:9380":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSubsubsectionIterator"],"kind":"struct"},"9:426:21490":{"crate_id":9,"path":["miniz_oxide","MZStatus"],"kind":"enum"},"16:8239:2741":{"crate_id":16,"path":["gimli","read","value","Value"],"kind":"enum"},"2:39684:15725":{"crate_id":2,"path":["core","ops","try_trait","Yeet"],"kind":"struct"},"2:12486:15649":{"crate_id":2,"path":["core","str","pattern","MultiCharEqPattern"],"kind":"struct"},"24:3068:3671":{"crate_id":24,"path":["syn","token","Priv"],"kind":"struct"},"1:646:10195":{"crate_id":1,"path":["std","backtrace","BytesOrWide"],"kind":"enum"},"2:30565:4630":{"crate_id":2,"path":["core","mem","manually_drop","ManuallyDrop"],"kind":"struct"},"17:11536:9401":{"crate_id":17,"path":["object","read","SymbolMap"],"kind":"struct"},"17:12197:6703":{"crate_id":17,"path":["object","elf","Versym"],"kind":"struct"},"16:6171:212":{"crate_id":16,"path":["gimli","read","cfi","Pointer"],"kind":"enum"},"2:44841:177":{"crate_id":2,"path":["core","alloc","layout","Layout"],"kind":"struct"},"1:10580:4557":{"crate_id":1,"path":["std","sys","unix","thread","Thread"],"kind":"struct"},"17:11662:6611":{"crate_id":17,"path":["object","read","CodeView"],"kind":"struct"},"2:2958:3719":{"crate_id":2,"path":["core","ops","bit","Shl"],"kind":"trait"},"11:883:10208":{"crate_id":11,"path":["hashbrown","map","RawEntryBuilder"],"kind":"struct"},"1:7916:29281":{"crate_id":1,"path":["std","io","buffered","linewritershim","LineWriterShim"],"kind":"struct"},"24:5304:2627":{"crate_id":24,"path":["syn","path","PathSegment"],"kind":"struct"},"2:2823:3575":{"crate_id":2,"path":["core","marker","Unsize"],"kind":"trait"},"17:9853:22604":{"crate_id":17,"path":["object","read","archive","Members"],"kind":"enum"},"16:2504:7343":{"crate_id":16,"path":["gimli","common","DebugLineOffset"],"kind":"struct"},"1:12035:1652":{"crate_id":1,"path":["std","unit"],"kind":"primitive"},"1:4052:10353":{"crate_id":1,"path":["std","os","unix","fs","DirBuilderExt"],"kind":"trait"},"5:2149:9566":{"crate_id":5,"path":["alloc","collections","btree","merge_iter","MergeIterInner"],"kind":"struct"},"11:2369:21572":{"crate_id":11,"path":["hashbrown","table","AbsentEntry"],"kind":"struct"},"6:588:7861":{"crate_id":6,"path":["libc","unix","servent"],"kind":"struct"},"1:7755:10041":{"crate_id":1,"path":["std","env","JoinPathsError"],"kind":"struct"},"16:6352:9476":{"crate_id":16,"path":["gimli","read","abbrev","Abbreviations"],"kind":"struct"},"9:0:3164":{"crate_id":9,"path":["miniz_oxide"],"kind":"module"},"1:8002:29256":{"crate_id":1,"path":["std","io","error","SimpleMessage"],"kind":"struct"},"2:4253:3542":{"crate_id":2,"path":["core","cell","Cell"],"kind":"struct"},"1:12039:1498":{"crate_id":1,"path":["std","slice"],"kind":"primitive"},"21:2329:1976":{"crate_id":21,"path":["proc_macro","bridge","Ident"],"kind":"struct"},"24:5189:2357":{"crate_id":24,"path":["syn","mac","Macro"],"kind":"struct"},"24:2881:3662":{"crate_id":24,"path":["syn","token","If"],"kind":"struct"},"5:1146:34420":{"crate_id":5,"path":["alloc","collections","btree","dedup_sorted_iter","DedupSortedIter"],"kind":"struct"},"24:4926:3357":{"crate_id":24,"path":["syn","expr","ExprUnsafe"],"kind":"struct"},"6:5023:8328":{"crate_id":6,"path":["libc","unix","linux_like","linux","dirent"],"kind":"struct"},"1:2601:6196":{"crate_id":1,"path":["std","io","buffered","bufwriter","flush_buf","BufGuard"],"kind":"struct"},"17:12485:6780":{"crate_id":17,"path":["object","macho","FatArch64"],"kind":"struct"},"16:7677:216":{"crate_id":16,"path":["gimli","read","rnglists","Range"],"kind":"struct"},"21:478:6130":{"crate_id":21,"path":["proc_macro","bridge","server","RunningSameThreadGuard"],"kind":"struct"},"24:4252:3714":{"crate_id":24,"path":["syn","token","PlusEq"],"kind":"struct"},"17:10917:22697":{"crate_id":17,"path":["object","read","macho","segment","MachOSegment"],"kind":"struct"},"1:3427:9230":{"crate_id":1,"path":["std","io","Read"],"kind":"trait"},"2:9853:3554":{"crate_id":2,"path":["core","fmt","LowerExp"],"kind":"trait"},"17:9278:6500":{"crate_id":17,"path":["object","endian","I64Bytes"],"kind":"struct"},"11:1903:9561":{"crate_id":11,"path":["hashbrown","set","Intersection"],"kind":"struct"},"24:1967:3404":{"crate_id":24,"path":["syn","punctuated","Iter"],"kind":"struct"},"1:5570:8559":{"crate_id":1,"path":["std","process","exit"],"kind":"function"},"2:40358:9625":{"crate_id":2,"path":["core","char","EscapeUnicode"],"kind":"struct"},"16:3315:7386":{"crate_id":16,"path":["gimli","arch","LoongArch"],"kind":"struct"},"17:11762:6619":{"crate_id":17,"path":["object","read","CompressedData"],"kind":"struct"},"6:4610:8160":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_abs_setup"],"kind":"struct"},"5:4177:6161":{"crate_id":5,"path":["alloc","collections","vec_deque","into_iter","try_fold","Guard"],"kind":"struct"},"1:11315:10431":{"crate_id":1,"path":["std","sys_common","process","CommandEnvs"],"kind":"struct"},"17:13203:6909":{"crate_id":17,"path":["object","macho","SourceVersionCommand"],"kind":"struct"},"23:272:2053":{"crate_id":23,"path":["quote","__private","push_lifetime","Lifetime"],"kind":"struct"},"6:0:872":{"crate_id":6,"path":["libc"],"kind":"module"},"11:832:10203":{"crate_id":11,"path":["hashbrown","map","ValuesMut"],"kind":"struct"},"5:2043:3540":{"crate_id":5,"path":["alloc","collections","btree","map","Cursor"],"kind":"struct"},"2:47566:9161":{"crate_id":2,"path":["core","core_arch","simd","u8x64"],"kind":"struct"},"17:10037:6514":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbolTable"],"kind":"struct"},"1:8287:10376":{"crate_id":1,"path":["std","os","unix","net","ancillary","AncillaryError"],"kind":"enum"},"1:9105:241":{"crate_id":1,"path":["std","sync","rwlock","RwLockWriteGuard"],"kind":"struct"},"17:12124:6689":{"crate_id":17,"path":["object","elf","Rela64"],"kind":"struct"},"1:940:10206":{"crate_id":1,"path":["std","collections","hash","map","RawOccupiedEntryMut"],"kind":"struct"},"15:394:21606":{"crate_id":15,"path":["addr2line","DebugFile"],"kind":"enum"},"6:6898:8723":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ipc_perm"],"kind":"struct"},"9:357:21503":{"crate_id":9,"path":["miniz_oxide","inflate","TINFLStatus"],"kind":"enum"},"24:5495:3391":{"crate_id":24,"path":["syn","ty","TypeReference"],"kind":"struct"},"2:2574:77":{"crate_id":2,"path":["core","convert","AsRef"],"kind":"trait"},"17:12998:6872":{"crate_id":17,"path":["object","macho","RpathCommand"],"kind":"struct"},"24:5340:2355":{"crate_id":24,"path":["syn","path","AssocType"],"kind":"struct"},"6:4375:8032":{"crate_id":6,"path":["libc","unix","linux_like","linux","spwd"],"kind":"struct"},"2:2537:10285":{"crate_id":2,"path":["core","convert","num","private","Sealed"],"kind":"trait"},"16:2696:7351":{"crate_id":16,"path":["gimli","common","RangeListsOffset"],"kind":"struct"},"18:707:9358":{"crate_id":18,"path":["memchr","memmem","Searcher"],"kind":"struct"},"5:825:6147":{"crate_id":5,"path":["alloc","collections","binary_heap","RebuildOnDrop"],"kind":"struct"},"24:4013:3697":{"crate_id":24,"path":["syn","token","FatArrow"],"kind":"struct"},"11:102:9553":{"crate_id":11,"path":["hashbrown","raw","Bucket"],"kind":"struct"},"17:10024:22589":{"crate_id":17,"path":["object","read","coff","symbol","SymbolIterator"],"kind":"struct"},"24:1950:3403":{"crate_id":24,"path":["syn","punctuated","IntoIter"],"kind":"struct"},"16:536:9404":{"crate_id":16,"path":["gimli","read","cfi","RegisterRuleMap"],"kind":"struct"},"2:44374:9695":{"crate_id":2,"path":["core","str","pattern","CharPredicateSearcher"],"kind":"struct"},"1:10814:125":{"crate_id":1,"path":["std","sys","unix","fs","DirBuilder"],"kind":"struct"},"11:2304:9531":{"crate_id":11,"path":["hashbrown","table","Entry"],"kind":"enum"},"2:1772:4717":{"crate_id":2,"path":["core","ptr","metadata","DynMetadata"],"kind":"struct"},"6:4584:8149":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_effect"],"kind":"struct"},"2:21180:33494":{"crate_id":2,"path":["core","core_simd","swizzle","rotate_elements_right","Rotate"],"kind":"struct"},"6:4738:8179":{"crate_id":6,"path":["libc","unix","linux_like","linux","ucred"],"kind":"struct"},"17:10589:9379":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSubsection"],"kind":"struct"},"2:41157:3474":{"crate_id":2,"path":["core","iter","sources","repeat_n","RepeatN"],"kind":"struct"},"16:2644:7349":{"crate_id":16,"path":["gimli","common","DebugMacroOffset"],"kind":"struct"},"21:958:4808":{"crate_id":21,"path":["proc_macro","bridge","client","FreeFunctions"],"kind":"struct"},"1:4917:10403":{"crate_id":1,"path":["std","os","net","linux_ext","tcp","TcpStreamExt"],"kind":"trait"},"2:41700:9031":{"crate_id":2,"path":["core","net","ip_addr","Ipv6Addr"],"kind":"struct"},"17:14435:7289":{"crate_id":17,"path":["object","pe","ImageCoffSymbolsHeader"],"kind":"struct"},"6:5152:8387":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_can"],"kind":"struct"},"1:12032:399":{"crate_id":1,"path":["std","bool"],"kind":"primitive"},"24:2779:3658":{"crate_id":24,"path":["syn","token","Else"],"kind":"struct"},"1:2206:4709":{"crate_id":1,"path":["std","fs","read"],"kind":"function"},"1:8227:10337":{"crate_id":1,"path":["std","net","tcp","Incoming"],"kind":"struct"},"1:11621:9754":{"crate_id":1,"path":["std","backtrace_rs","backtrace","libunwind","Frame"],"kind":"enum"},"17:14523:7311":{"crate_id":17,"path":["object","pe","ImportObjectHeader"],"kind":"struct"},"24:5480:3387":{"crate_id":24,"path":["syn","ty","TypeMacro"],"kind":"struct"},"5:7325:3403":{"crate_id":5,"path":["alloc","collections","btree","set","IntoIter"],"kind":"struct"},"17:9103:6495":{"crate_id":17,"path":["object","endian","U16Bytes"],"kind":"struct"},"2:12646:117":{"crate_id":2,"path":["core","str","lossy","Debug"],"kind":"struct"},"5:7279:9577":{"crate_id":5,"path":["alloc","collections","binary_heap","IntoIterSorted"],"kind":"struct"},"17:14421:7287":{"crate_id":17,"path":["object","pe","ImageDebugDirectory"],"kind":"struct"},"17:11352:6584":{"crate_id":17,"path":["object","read","pe","resource","ResourceName"],"kind":"struct"},"1:5448:111":{"crate_id":1,"path":["std","process","Command"],"kind":"struct"},"16:2284:21616":{"crate_id":16,"path":["gimli","common","Format"],"kind":"enum"},"11:2231:9564":{"crate_id":11,"path":["hashbrown","table","HashTable"],"kind":"struct"},"6:6222:8572":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","sigset_t"],"kind":"struct"},"6:4932:8275":{"crate_id":6,"path":["libc","unix","linux_like","linux","in6_ifreq"],"kind":"struct"},"6:4755:8188":{"crate_id":6,"path":["libc","unix","linux_like","linux","posix_spawn_file_actions_t"],"kind":"struct"},"11:1728:152":{"crate_id":11,"path":["hashbrown","set","HashSet"],"kind":"struct"},"2:2538:15690":{"crate_id":2,"path":["core","convert","num","FloatToInt"],"kind":"trait"},"5:3212:9563":{"crate_id":5,"path":["alloc","collections","btree","set","SymmetricDifference"],"kind":"struct"},"6:4603:8158":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_ff_erase"],"kind":"struct"},"17:3232:22696":{"crate_id":17,"path":["object","read","macho","section","MachOSectionIterator"],"kind":"struct"},"2:1749:4718":{"crate_id":2,"path":["core","ptr","metadata","Pointee"],"kind":"trait"},"16:3232:7328":{"crate_id":16,"path":["gimli","arch","AArch64"],"kind":"struct"},"24:4025:3698":{"crate_id":24,"path":["syn","token","Ge"],"kind":"struct"},"24:4553:1993":{"crate_id":24,"path":["syn","data","Field"],"kind":"struct"},"2:44479:9706":{"crate_id":2,"path":["core","str","lossy","Utf8Chunks"],"kind":"struct"},"7:31:21474":{"crate_id":7,"path":["unwind","libunwind","_Unwind_Reason_Code"],"kind":"enum"},"17:10963:6567":{"crate_id":17,"path":["object","read","macho","section","MachOSectionInternal"],"kind":"struct"},"17:13923:7137":{"crate_id":17,"path":["object","pe","ImageArchiveMemberHeader"],"kind":"struct"},"24:5084:3362":{"crate_id":24,"path":["syn","generics","PredicateLifetime"],"kind":"struct"},"24:254:10024":{"crate_id":24,"path":["syn","attr","parsing","DisplayAttrStyle"],"kind":"struct"},"1:8170:10284":{"crate_id":1,"path":["std","io","SeekFrom"],"kind":"enum"},"2:7706:3487":{"crate_id":2,"path":["core","iter","traits","accum","Sum"],"kind":"trait"},"2:41660:167":{"crate_id":2,"path":["core","net","ip_addr","IpAddr"],"kind":"enum"},"16:5830:9427":{"crate_id":16,"path":["gimli","read","cfi","CommonInformationEntry"],"kind":"struct"},"24:5506:3394":{"crate_id":24,"path":["syn","ty","TypeTuple"],"kind":"struct"},"2:2832:253":{"crate_id":2,"path":["core","marker","Sync"],"kind":"trait"},"11:1051:10210":{"crate_id":11,"path":["hashbrown","map","VacantEntry"],"kind":"struct"},"2:4458:3570":{"crate_id":2,"path":["core","cell","RefMut"],"kind":"struct"},"6:4908:8261":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlattr"],"kind":"struct"},"2:21370:10485":{"crate_id":2,"path":["core","core_simd","cast","SimdCast"],"kind":"trait"},"18:80:26598":{"crate_id":18,"path":["memchr","memchr","iter","Memchr"],"kind":"struct"},"2:47146:9126":{"crate_id":2,"path":["core","core_arch","simd","i32x8"],"kind":"struct"},"6:6927:8737":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","seccomp_notif_sizes"],"kind":"struct"},"2:4330:3560":{"crate_id":2,"path":["core","cell","BorrowMutError"],"kind":"struct"},"2:2894:6348":{"crate_id":2,"path":["core","ops","arith","Mul"],"kind":"trait"},"1:10782:9745":{"crate_id":1,"path":["std","sys","unix","fs","FilePermissions"],"kind":"struct"},"6:5146:8384":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_can_addr"],"kind":"union"},"5:3338:4766":{"crate_id":5,"path":["alloc","collections","btree","set","ExtractIf"],"kind":"struct"},"16:5121:7417":{"crate_id":16,"path":["gimli","constants","DwRle"],"kind":"struct"},"2:2406:208":{"crate_id":2,"path":["core","cmp","PartialOrd"],"kind":"trait"},"14:221:7662":{"crate_id":14,"path":["rustc_demangle","SizeLimitExhausted"],"kind":"struct"},"2:2815:243":{"crate_id":2,"path":["core","marker","Send"],"kind":"trait"},"24:5458:3382":{"crate_id":24,"path":["syn","ty","TypeArray"],"kind":"struct"},"2:10672:3408":{"crate_id":2,"path":["core","slice","iter","IterMut"],"kind":"struct"},"2:40445:9632":{"crate_id":2,"path":["core","ffi","c_str","FromBytesWithNulError"],"kind":"struct"},"6:542:7837":{"crate_id":6,"path":["libc","unix","iovec"],"kind":"struct"},"21:2776:2663":{"crate_id":21,"path":["proc_macro","Literal"],"kind":"struct"},"21:2631:258":{"crate_id":21,"path":["proc_macro","TokenStream"],"kind":"struct"},"2:8991:15641":{"crate_id":2,"path":["core","panicking","assert_matches_failed","Pattern"],"kind":"struct"},"2:22731:10342":{"crate_id":2,"path":["core","num","error","IntErrorKind"],"kind":"enum"},"1:641:10194":{"crate_id":1,"path":["std","backtrace","BacktraceSymbol"],"kind":"struct"},"23:239:4261":{"crate_id":23,"path":["quote","__private","get_span","GetSpanInner"],"kind":"struct"},"18:699:9356":{"crate_id":18,"path":["memchr","memmem","FinderBuilder"],"kind":"struct"},"24:4375:3723":{"crate_id":24,"path":["syn","token","Slash"],"kind":"struct"},"24:880:35956":{"crate_id":24,"path":["syn","generics","LifetimesMut"],"kind":"struct"},"2:43919:9669":{"crate_id":2,"path":["core","str","iter","RSplitTerminator"],"kind":"struct"},"24:2043:3410":{"crate_id":24,"path":["syn","punctuated","PrivateIterMut"],"kind":"struct"},"1:4313:10375":{"crate_id":1,"path":["std","os","unix","net","listener","UnixListener"],"kind":"struct"},"2:42702:3557":{"crate_id":2,"path":["core","fmt","num","UpperHex"],"kind":"struct"},"1:881:9560":{"crate_id":1,"path":["std","collections","hash","map","Values"],"kind":"struct"},"24:4522:3309":{"crate_id":24,"path":["syn","attr","MetaNameValue"],"kind":"struct"},"16:6753:9501":{"crate_id":16,"path":["gimli","read","line","LineProgramHeader"],"kind":"struct"},"2:22190:10570":{"crate_id":2,"path":["core","core_simd","simd","ptr","const_ptr","SimdConstPtr"],"kind":"trait"},"2:42401:88":{"crate_id":2,"path":["core","sync","atomic","AtomicI64"],"kind":"struct"},"1:6299:226":{"crate_id":1,"path":["std","sync","mpmc","Receiver"],"kind":"struct"},"6:4854:8239":{"crate_id":6,"path":["libc","unix","linux_like","linux","can_filter"],"kind":"struct"},"21:2710:2044":{"crate_id":21,"path":["proc_macro","TokenTree"],"kind":"enum"},"2:44570:9709":{"crate_id":2,"path":["core","str","CharEscapeDebugContinue"],"kind":"struct"},"11:351:35524":{"crate_id":11,"path":["hashbrown","raw","FullBucketsIndices"],"kind":"struct"},"17:12063:6679":{"crate_id":17,"path":["object","elf","Syminfo32"],"kind":"struct"},"16:7621:22519":{"crate_id":16,"path":["gimli","read","rnglists","RawRngListEntry"],"kind":"enum"},"1:9070:9262":{"crate_id":1,"path":["std","sync","mpmc","utils","CachePadded"],"kind":"struct"},"24:2694:114":{"crate_id":24,"path":["syn","token","Continue"],"kind":"struct"},"2:13315:4680":{"crate_id":2,"path":["core","alloc","Allocator"],"kind":"trait"},"5:2978:26658":{"crate_id":5,"path":["alloc","collections","btree","node","marker","ValMut"],"kind":"struct"},"17:9868:6510":{"crate_id":17,"path":["object","read","archive","ArchiveFile"],"kind":"struct"},"24:4938:1999":{"crate_id":24,"path":["syn","expr","Member"],"kind":"enum"},"2:40487:10250":{"crate_id":2,"path":["core","ffi","c_char"],"kind":"type_alias"},"2:12196:9676":{"crate_id":2,"path":["core","str","iter","MatchesInternal"],"kind":"struct"},"1:8803:205":{"crate_id":1,"path":["std","process","Output"],"kind":"struct"},"17:12268:6727":{"crate_id":17,"path":["object","elf","NoteHeader32"],"kind":"struct"},"2:8880:3979":{"crate_id":2,"path":["core","panic","unwind_safe","AssertUnwindSafe"],"kind":"struct"},"11:875:10207":{"crate_id":11,"path":["hashbrown","map","RawVacantEntryMut"],"kind":"struct"},"24:5071:2111":{"crate_id":24,"path":["syn","generics","WherePredicate"],"kind":"enum"},"1:5755:10442":{"crate_id":1,"path":["std","sync","barrier","BarrierWaitResult"],"kind":"struct"},"2:4058:32155":{"crate_id":2,"path":["core","asserting","TryCaptureWithoutDebug"],"kind":"struct"},"17:11307:6580":{"crate_id":17,"path":["object","read","pe","relocation","Relocation"],"kind":"struct"},"24:4518:3308":{"crate_id":24,"path":["syn","attr","MetaList"],"kind":"struct"},"17:9922:22625":{"crate_id":17,"path":["object","read","coff","file","CoffCommon"],"kind":"struct"},"1:5084:29272":{"crate_id":1,"path":["std","path","fmt","DebugHelper"],"kind":"struct"},"17:12112:6688":{"crate_id":17,"path":["object","elf","Rel64"],"kind":"struct"},"17:13136:6902":{"crate_id":17,"path":["object","macho","LinkerOptionCommand"],"kind":"struct"},"6:6114:8545":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_exit"],"kind":"struct"},"2:41997:3408":{"crate_id":2,"path":["core","option","IterMut"],"kind":"struct"},"1:8301:10337":{"crate_id":1,"path":["std","os","unix","net","listener","Incoming"],"kind":"struct"},"2:44459:9705":{"crate_id":2,"path":["core","str","lossy","Utf8Chunk"],"kind":"struct"},"17:13982:7150":{"crate_id":17,"path":["object","pe","ImageThunkData32"],"kind":"struct"},"23:46:3433":{"crate_id":23,"path":["quote","ident_fragment","IdentFragment"],"kind":"trait"},"2:43445:9660":{"crate_id":2,"path":["core","slice","ascii","EscapeAscii"],"kind":"struct"},"1:3982:10346":{"crate_id":1,"path":["std","os","unix","fs","PermissionsExt"],"kind":"trait"},"1:1064:10210":{"crate_id":1,"path":["std","collections","hash","map","VacantEntry"],"kind":"struct"},"16:5982:9444":{"crate_id":16,"path":["gimli","read","cfi","RegisterRuleIter"],"kind":"struct"},"24:4783:3324":{"crate_id":24,"path":["syn","expr","ExprArray"],"kind":"struct"},"16:6915:7372":{"crate_id":16,"path":["gimli","read","loclists","DebugLocLists"],"kind":"struct"},"24:2949:3666":{"crate_id":24,"path":["syn","token","Loop"],"kind":"struct"},"2:43851:9592":{"crate_id":2,"path":["core","str","iter","Split"],"kind":"struct"},"5:678:256":{"crate_id":5,"path":["alloc","borrow","ToOwned"],"kind":"trait"},"1:7669:4560":{"crate_id":1,"path":["std","thread","ThreadId"],"kind":"struct"},"16:6156:9471":{"crate_id":16,"path":["gimli","read","cfi","CallFrameInstructionIter"],"kind":"struct"},"2:11956:10038":{"crate_id":2,"path":["core","slice","GetManyMutError"],"kind":"struct"},"1:6598:10448":{"crate_id":1,"path":["std","sync","remutex","ReentrantMutex"],"kind":"struct"},"2:32405:3568":{"crate_id":2,"path":["core","error","tags","Ref"],"kind":"struct"},"2:39878:31851":{"crate_id":2,"path":["core","ascii","ascii_char","AsciiChar"],"kind":"enum"},"11:787:9560":{"crate_id":11,"path":["hashbrown","map","Values"],"kind":"struct"},"24:676:35849":{"crate_id":24,"path":["syn","expr","parsing","Precedence"],"kind":"enum"},"2:22669:32499":{"crate_id":2,"path":["core","num","fmt","Part"],"kind":"enum"},"2:41119:9643":{"crate_id":2,"path":["core","iter","sources","from_coroutine","FromCoroutine"],"kind":"struct"},"5:2967:2219":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Owned"],"kind":"enum"},"11:700:3403":{"crate_id":11,"path":["hashbrown","map","IntoIter"],"kind":"struct"},"16:7534:7376":{"crate_id":16,"path":["gimli","read","pubtypes","DebugPubTypes"],"kind":"struct"},"2:3077:137":{"crate_id":2,"path":["core","ops","function","Fn"],"kind":"trait"},"1:5397:10423":{"crate_id":1,"path":["std","process","ChildStdin"],"kind":"struct"},"2:42014:3977":{"crate_id":2,"path":["core","panic","location","Location"],"kind":"struct"},"2:7522:3467":{"crate_id":2,"path":["core","iter","sources","once","once"],"kind":"function"},"5:7301:6152":{"crate_id":5,"path":["alloc","collections","binary_heap","DrainSorted"],"kind":"struct"},"6:4789:8204":{"crate_id":6,"path":["libc","unix","linux_like","linux","arpd_request"],"kind":"struct"},"2:21979:10285":{"crate_id":2,"path":["core","core_simd","vector","sealed","Sealed"],"kind":"trait"},"10:0:3165":{"crate_id":10,"path":["adler"],"kind":"module"},"24:4804:3329":{"crate_id":24,"path":["syn","expr","ExprBlock"],"kind":"struct"},"1:1535:3404":{"crate_id":1,"path":["std","collections","hash","set","Iter"],"kind":"struct"},"21:53:4792":{"crate_id":21,"path":["proc_macro","bridge","buffer","Buffer"],"kind":"struct"},"24:4264:3715":{"crate_id":24,"path":["syn","token","Pound"],"kind":"struct"},"1:5573:10427":{"crate_id":1,"path":["std","process","Termination"],"kind":"trait"},"16:7067:9529":{"crate_id":16,"path":["gimli","read","lookup","PubStuffHeader"],"kind":"struct"},"6:5052:8342":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_user_dev"],"kind":"struct"},"17:11846:6630":{"crate_id":17,"path":["object","archive","AixFileHeader"],"kind":"struct"},"16:2766:7354":{"crate_id":16,"path":["gimli","common","DebugStrOffset"],"kind":"struct"},"16:5673:7366":{"crate_id":16,"path":["gimli","read","cfi","EhFrame"],"kind":"struct"},"2:43720:3488":{"crate_id":2,"path":["core","slice","iter","ArrayChunks"],"kind":"struct"},"18:727:6398":{"crate_id":18,"path":["memchr","memmem","SearcherConfig"],"kind":"struct"},"2:48279:9179":{"crate_id":2,"path":["core","core_arch","x86","__m128bh"],"kind":"struct"},"2:10095:10290":{"crate_id":2,"path":["core","hash","BuildHasher"],"kind":"trait"},"24:5335:2644":{"crate_id":24,"path":["syn","path","AngleBracketedGenericArguments"],"kind":"struct"},"5:7362:3403":{"crate_id":5,"path":["alloc","collections","linked_list","IntoIter"],"kind":"struct"},"17:13072:6883":{"crate_id":17,"path":["object","macho","VersionMinCommand"],"kind":"struct"},"1:4908:10402":{"crate_id":1,"path":["std","os","net","linux_ext","addr","SocketAddrExt"],"kind":"trait"},"5:4772:712":{"crate_id":5,"path":["alloc","fmt"],"kind":"module"},"1:9095:183":{"crate_id":1,"path":["std","sync","mutex","MutexGuard"],"kind":"struct"},"16:6893:7478":{"crate_id":16,"path":["gimli","read","lists","ListsHeader"],"kind":"struct"},"17:10699:22710":{"crate_id":17,"path":["object","read","macho","file","MachOFile"],"kind":"struct"},"2:46432:9095":{"crate_id":2,"path":["core","core_arch","simd","i16x8"],"kind":"struct"},"14:202:2407":{"crate_id":14,"path":["rustc_demangle","v0","ParseError"],"kind":"enum"},"18:614:35622":{"crate_id":18,"path":["memchr","memmem","twoway","SuffixKind"],"kind":"enum"},"24:4830:3335":{"crate_id":24,"path":["syn","expr","ExprContinue"],"kind":"struct"},"1:12052:1633":{"crate_id":1,"path":["std","u16"],"kind":"primitive"},"1:12047:790":{"crate_id":1,"path":["std","i16"],"kind":"primitive"},"2:40678:3506":{"crate_id":2,"path":["core","iter","adapters","inspect","Inspect"],"kind":"struct"},"5:276:2024":{"crate_id":5,"path":["alloc","boxed","Box"],"kind":"struct"},"17:8687:22574":{"crate_id":17,"path":["object","common","BinaryFormat"],"kind":"enum"},"6:4989:8311":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_nxtinfo"],"kind":"struct"},"2:22653:32486":{"crate_id":2,"path":["core","num","flt2dec","Sign"],"kind":"enum"},"2:10852:9595":{"crate_id":2,"path":["core","slice","iter","RSplit"],"kind":"struct"},"6:1507:7875":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreqn"],"kind":"struct"},"2:4449:3569":{"crate_id":2,"path":["core","cell","BorrowRefMut"],"kind":"struct"},"2:2212:4704":{"crate_id":2,"path":["core","ptr","from_exposed_addr_mut"],"kind":"function"},"6:7343:8752":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","not_x32","statvfs"],"kind":"struct"},"1:10432:10428":{"crate_id":1,"path":["std","sys","unix","process","process_common","CommandArgs"],"kind":"struct"},"5:7518:6168":{"crate_id":5,"path":["alloc","rc","UniqueRc"],"kind":"struct"},"16:6929:7481":{"crate_id":16,"path":["gimli","read","loclists","LocationLists"],"kind":"struct"},"24:5204:3373":{"crate_id":24,"path":["syn","op","BinOp"],"kind":"enum"},"17:11245:6609":{"crate_id":17,"path":["object","read","pe","import","Import"],"kind":"enum"},"1:7381:27803":{"crate_id":1,"path":["std","panicking","Hook"],"kind":"enum"},"1:7907:9727":{"crate_id":1,"path":["std","hash","random","DefaultHasher"],"kind":"struct"},"24:4945:2587":{"crate_id":24,"path":["syn","expr","Index"],"kind":"struct"},"21:2771:1976":{"crate_id":21,"path":["proc_macro","Ident"],"kind":"struct"},"17:12474:6777":{"crate_id":17,"path":["object","macho","FatArch32"],"kind":"struct"},"24:4170:3708":{"crate_id":24,"path":["syn","token","OrEq"],"kind":"struct"},"1:2587:6209":{"crate_id":1,"path":["std","io","buffered","bufwriter","BufWriter"],"kind":"struct"},"21:140:4802":{"crate_id":21,"path":["proc_macro","bridge","client","Client"],"kind":"struct"},"2:1681:1179":{"crate_id":2,"path":["core","ptr"],"kind":"module"},"21:404:35659":{"crate_id":21,"path":["proc_macro","bridge","scoped_cell","RefMutL"],"kind":"struct"},"17:11688:22596":{"crate_id":17,"path":["object","read","RelocationTarget"],"kind":"enum"},"2:7462:3465":{"crate_id":2,"path":["core","iter","sources","empty","Empty"],"kind":"struct"},"17:11049:22753":{"crate_id":17,"path":["object","read","pe","file","PeFile"],"kind":"struct"},"17:14347:7266":{"crate_id":17,"path":["object","pe","ImageRuntimeFunctionEntry"],"kind":"struct"},"2:22471:9604":{"crate_id":2,"path":["core","num","bignum","tests","Big8x3"],"kind":"struct"},"17:14157:7196":{"crate_id":17,"path":["object","pe","ImagePrologueDynamicRelocationHeader"],"kind":"struct"},"2:21429:10484":{"crate_id":2,"path":["core","core_simd","lane_count","SupportedLaneCount"],"kind":"trait"},"17:11574:9402":{"crate_id":17,"path":["object","read","ObjectMap"],"kind":"struct"},"2:1651:4627":{"crate_id":2,"path":["core","mem","Discriminant"],"kind":"struct"},"20:775:3425":{"crate_id":20,"path":["proc_macro2","extra","DelimSpan"],"kind":"struct"},"2:39652:3452":{"crate_id":2,"path":["core","ops","range","Bound"],"kind":"enum"},"2:2590:263":{"crate_id":2,"path":["core","convert","TryFrom"],"kind":"trait"},"6:6819:8669":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_fpstate"],"kind":"struct"},"1:11047:6238":{"crate_id":1,"path":["std","sys","unix","process","process_inner","posix_spawn","PosixSpawnFileActions"],"kind":"struct"},"2:7240:32284":{"crate_id":2,"path":["core","iter","adapters","GenericShunt"],"kind":"struct"},"2:13222:6205":{"crate_id":2,"path":["core","task","wake","Waker"],"kind":"struct"},"17:12294:6732":{"crate_id":17,"path":["object","elf","HashHeader"],"kind":"struct"},"1:904:4766":{"crate_id":1,"path":["std","collections","hash","map","ExtractIf"],"kind":"struct"},"5:4860:223":{"crate_id":5,"path":["alloc","rc","Rc"],"kind":"struct"},"16:7568:7378":{"crate_id":16,"path":["gimli","read","rnglists","DebugRngLists"],"kind":"struct"},"17:14309:7256":{"crate_id":17,"path":["object","pe","ImageArmRuntimeFunctionEntry"],"kind":"struct"},"2:40550:10281":{"crate_id":2,"path":["core","io","borrowed_buf","BorrowedCursor"],"kind":"struct"},"3:234:232":{"crate_id":3,"path":["compiler_builtins","float","cmp","Result"],"kind":"enum"},"23:148:4001":{"crate_id":23,"path":["quote","__private","HasIterator"],"kind":"struct"},"17:12791:6824":{"crate_id":17,"path":["object","macho","RoutinesCommand32"],"kind":"struct"},"24:4851:3340":{"crate_id":24,"path":["syn","expr","ExprIndex"],"kind":"struct"},"1:8386:3973":{"crate_id":1,"path":["std","panic","BacktraceStyle"],"kind":"enum"},"16:7041:9524":{"crate_id":16,"path":["gimli","read","lookup","DebugLookup"],"kind":"struct"},"5:2469:8793":{"crate_id":5,"path":["alloc","collections","btree","node","NodeRef"],"kind":"struct"},"23:322:2666":{"crate_id":23,"path":["quote","spanned","Spanned"],"kind":"trait"},"16:6361:9477":{"crate_id":16,"path":["gimli","read","abbrev","Abbreviation"],"kind":"struct"},"1:307:1582":{"crate_id":1,"path":["std","thread"],"kind":"module"},"17:11992:6667":{"crate_id":17,"path":["object","elf","CompressionHeader32"],"kind":"struct"},"17:10686:22694":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCacheImage"],"kind":"struct"},"1:11217:9275":{"crate_id":1,"path":["std","sys","unix","time","Timespec"],"kind":"struct"},"17:12847:6833":{"crate_id":17,"path":["object","macho","DysymtabCommand"],"kind":"struct"},"6:5859:8416":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","statx_timestamp"],"kind":"struct"},"5:4376:6163":{"crate_id":5,"path":["alloc","collections","vec_deque","drop","Dropper"],"kind":"struct"},"17:14336:7265":{"crate_id":17,"path":["object","pe","ImageAlphaRuntimeFunctionEntry"],"kind":"struct"},"1:8985:4551":{"crate_id":1,"path":["std","sync","mpmc","context","Inner"],"kind":"struct"},"17:13287:6920":{"crate_id":17,"path":["object","macho","RelocationInfo"],"kind":"struct"},"1:1551:9561":{"crate_id":1,"path":["std","collections","hash","set","Intersection"],"kind":"struct"},"16:5017:7414":{"crate_id":16,"path":["gimli","constants","DwLne"],"kind":"struct"},"17:11296:9397":{"crate_id":17,"path":["object","read","pe","relocation","RelocationIterator"],"kind":"struct"},"2:3083:139":{"crate_id":2,"path":["core","ops","function","FnOnce"],"kind":"trait"},"6:495:7806":{"crate_id":6,"path":["libc","unix","timespec"],"kind":"struct"},"17:11262:9395":{"crate_id":17,"path":["object","read","pe","import","DelayLoadImportTable"],"kind":"struct"},"6:527:7828":{"crate_id":6,"path":["libc","unix","ipv6_mreq"],"kind":"struct"},"6:4556:8133":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_condition_effect"],"kind":"struct"},"6:6889:8720":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","mcontext_t"],"kind":"struct"},"6:507:7811":{"crate_id":6,"path":["libc","unix","rusage"],"kind":"struct"},"2:42066:4562":{"crate_id":2,"path":["core","pin","Pin"],"kind":"struct"},"6:4676:8174":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Sym"],"kind":"struct"},"16:4585:7401":{"crate_id":16,"path":["gimli","constants","DwAccess"],"kind":"struct"},"17:8896:22580":{"crate_id":17,"path":["object","common","RelocationEncoding"],"kind":"enum"},"2:44268:9690":{"crate_id":2,"path":["core","str","pattern","MultiCharEqSearcher"],"kind":"struct"},"2:2822:3594":{"crate_id":2,"path":["core","marker","Sized"],"kind":"trait"},"9:486:21487":{"crate_id":9,"path":["miniz_oxide","DataFormat"],"kind":"enum"},"6:4616:8162":{"crate_id":6,"path":["libc","unix","linux_like","linux","dl_phdr_info"],"kind":"struct"},"16:6376:22509":{"crate_id":16,"path":["gimli","read","abbrev","Attributes"],"kind":"enum"},"17:2150:22675":{"crate_id":17,"path":["object","read","elf","relocation","ElfRelaIterator"],"kind":"enum"},"17:13817:7109":{"crate_id":17,"path":["object","pe","ImageSymbolExBytes"],"kind":"struct"},"20:801:9346":{"crate_id":20,"path":["proc_macro2","imp","DeferredTokenStream"],"kind":"struct"},"2:42931:3545":{"crate_id":2,"path":["core","fmt","rt","Alignment"],"kind":"enum"},"5:5987:6167":{"crate_id":5,"path":["alloc","sync","Weak"],"kind":"struct"},"1:357:4569":{"crate_id":1,"path":["std","thread","scoped","Scope"],"kind":"struct"},"2:43809:9661":{"crate_id":2,"path":["core","str","error","ParseBoolError"],"kind":"struct"},"1:3493:29821":{"crate_id":1,"path":["std","io","Write","write_fmt","Adapter"],"kind":"struct"},"24:5088:2633":{"crate_id":24,"path":["syn","generics","PredicateType"],"kind":"struct"},"5:2970:8795":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Immut"],"kind":"struct"},"2:40755:3511":{"crate_id":2,"path":["core","iter","adapters","skip","Skip"],"kind":"struct"},"1:2369:10271":{"crate_id":1,"path":["std","fs","read_link"],"kind":"function"},"1:10475:6236":{"crate_id":1,"path":["std","sys","unix","stack_overflow","Handler"],"kind":"struct"},"16:3888:7392":{"crate_id":16,"path":["gimli","constants","DwCfa"],"kind":"struct"},"20:722:2043":{"crate_id":20,"path":["proc_macro2","fallback","Span"],"kind":"struct"},"11:2562:7714":{"crate_id":11,"path":["hashbrown","raw","TableLayout"],"kind":"struct"},"17:14091:7181":{"crate_id":17,"path":["object","pe","ImageResourceDataEntry"],"kind":"struct"},"5:5387:15620":{"crate_id":5,"path":["alloc","slice","Join"],"kind":"trait"},"16:8195:9550":{"crate_id":16,"path":["gimli","read","unit","DebugTypesUnitHeadersIter"],"kind":"struct"},"6:4998:8317":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_prinfo"],"kind":"struct"},"1:2353:4694":{"crate_id":1,"path":["std","fs","metadata"],"kind":"function"},"6:1570:7911":{"crate_id":6,"path":["libc","unix","linux_like","fd_set"],"kind":"struct"},"2:44125:9681":{"crate_id":2,"path":["core","str","iter","SplitWhitespace"],"kind":"struct"},"24:5512:3380":{"crate_id":24,"path":["syn","ty","BareFnArg"],"kind":"struct"},"16:2969:21643":{"crate_id":16,"path":["gimli","common","SectionId"],"kind":"enum"},"5:3186:9562":{"crate_id":5,"path":["alloc","collections","btree","set","Difference"],"kind":"struct"},"2:21549:10482":{"crate_id":2,"path":["core","core_simd","masks","MaskElement"],"kind":"trait"},"24:4494:3306":{"crate_id":24,"path":["syn","attr","AttrStyle"],"kind":"enum"},"11:396:6136":{"crate_id":11,"path":["hashbrown","raw","RawDrain"],"kind":"struct"},"1:8012:10317":{"crate_id":1,"path":["std","io","error","ErrorKind"],"kind":"enum"},"2:40617:3500":{"crate_id":2,"path":["core","iter","adapters","cycle","Cycle"],"kind":"struct"},"24:2609:3653":{"crate_id":24,"path":["syn","token","Await"],"kind":"struct"},"2:40577:3489":{"crate_id":2,"path":["core","iter","adapters","by_ref_sized","ByRefSized"],"kind":"struct"},"2:3031:4674":{"crate_id":2,"path":["core","ops","coroutine","Coroutine"],"kind":"trait"},"6:5867:8418":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","aiocb"],"kind":"struct"},"2:23766:242":{"crate_id":2,"path":["core","num","saturating","Saturating"],"kind":"struct"},"16:2788:7355":{"crate_id":16,"path":["gimli","common","DebugStrOffsetsBase"],"kind":"struct"},"17:8714:22575":{"crate_id":17,"path":["object","common","SectionKind"],"kind":"enum"},"24:4914:3354":{"crate_id":24,"path":["syn","expr","ExprTryBlock"],"kind":"struct"},"6:1528:7883":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_in"],"kind":"struct"},"18:590:6383":{"crate_id":18,"path":["memchr","memmem","twoway","TwoWay"],"kind":"struct"},"2:40381:15684":{"crate_id":2,"path":["core","char","EscapeDebugInner"],"kind":"enum"},"2:44115:9680":{"crate_id":2,"path":["core","str","iter","LinesAny"],"kind":"struct"},"2:44425:15656":{"crate_id":2,"path":["core","str","pattern","StrSearcherImpl"],"kind":"enum"},"2:42125:3408":{"crate_id":2,"path":["core","result","IterMut"],"kind":"struct"},"2:42047:3978":{"crate_id":2,"path":["core","panic","panic_info","PanicInfo"],"kind":"struct"},"17:13827:7110":{"crate_id":17,"path":["object","pe","ImageAuxSymbolTokenDef"],"kind":"struct"},"2:41908:9039":{"crate_id":2,"path":["core","net","socket_addr","SocketAddrV6"],"kind":"struct"},"1:2663:10316":{"crate_id":1,"path":["std","io","buffered","linewriter","LineWriter"],"kind":"struct"},"24:3960:3694":{"crate_id":24,"path":["syn","token","DotDotDot"],"kind":"struct"},"2:44019:9675":{"crate_id":2,"path":["core","str","iter","RMatchIndices"],"kind":"struct"},"17:10421:6371":{"crate_id":17,"path":["object","read","elf","note","Note"],"kind":"struct"},"17:12831:6828":{"crate_id":17,"path":["object","macho","SymtabCommand"],"kind":"struct"},"2:2948:4262":{"crate_id":2,"path":["core","ops","bit","BitOr"],"kind":"trait"},"2:40285:9621":{"crate_id":2,"path":["core","async_iter","from_iter","FromIter"],"kind":"struct"},"24:4421:3726":{"crate_id":24,"path":["syn","token","StarEq"],"kind":"struct"},"17:9532:35610":{"crate_id":17,"path":["object","read","any","SectionIteratorInternal"],"kind":"enum"},"5:7429:3459":{"crate_id":5,"path":["alloc","collections","TryReserveErrorKind"],"kind":"enum"},"16:3830:7391":{"crate_id":16,"path":["gimli","constants","DwUt"],"kind":"struct"},"16:2881:7359":{"crate_id":16,"path":["gimli","common","DebugFrameOffset"],"kind":"struct"},"1:3938:10343":{"crate_id":1,"path":["std","os","unix","ffi","os_str","OsStrExt"],"kind":"trait"},"24:5194:3372":{"crate_id":24,"path":["syn","mac","MacroDelimiter"],"kind":"enum"},"24:3153:3674":{"crate_id":24,"path":["syn","token","SelfValue"],"kind":"struct"},"2:44073:9678":{"crate_id":2,"path":["core","str","iter","RMatches"],"kind":"struct"},"2:8210:3483":{"crate_id":2,"path":["core","iter","traits","marker","TrustedStep"],"kind":"trait"},"2:7785:127":{"crate_id":2,"path":["core","iter","traits","double_ended","DoubleEndedIterator"],"kind":"trait"},"1:1970:203":{"crate_id":1,"path":["std","ffi","os_str","OsStr"],"kind":"struct"},"17:12912:6863":{"crate_id":17,"path":["object","macho","DylibModule64"],"kind":"struct"},"17:14537:7314":{"crate_id":17,"path":["object","pe","ImageCor20Header"],"kind":"struct"},"16:4745:7405":{"crate_id":16,"path":["gimli","constants","DwAddr"],"kind":"struct"},"2:22244:10571":{"crate_id":2,"path":["core","core_simd","simd","ptr","mut_ptr","SimdMutPtr"],"kind":"trait"},"24:3017:3668":{"crate_id":24,"path":["syn","token","Move"],"kind":"struct"},"21:2705:3588":{"crate_id":21,"path":["proc_macro","SourceFile"],"kind":"struct"},"17:13740:7094":{"crate_id":17,"path":["object","pe","AnonObjectHeaderBigobj"],"kind":"struct"},"1:11455:6242":{"crate_id":1,"path":["std","sys_common","net","LookupHost"],"kind":"struct"},"2:2875:2002":{"crate_id":2,"path":["core","marker","Tuple"],"kind":"trait"},"2:43426:9055":{"crate_id":2,"path":["core","slice","sort","TimSortRun"],"kind":"struct"},"6:6934:8740":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ptrace_rseq_configuration"],"kind":"struct"},"1:5634:6221":{"crate_id":1,"path":["std","sync","mpsc","Sender"],"kind":"struct"},"2:21551:8801":{"crate_id":2,"path":["core","core_simd","masks","Mask"],"kind":"struct"},"17:12438:6768":{"crate_id":17,"path":["object","macho","DyldCacheImageInfo"],"kind":"struct"},"2:2826:250":{"crate_id":2,"path":["core","marker","StructuralEq"],"kind":"trait"},"2:44411:9696":{"crate_id":2,"path":["core","str","pattern","StrSearcher"],"kind":"struct"},"2:42559:10133":{"crate_id":2,"path":["core","sync","exclusive","Exclusive"],"kind":"struct"},"24:4194:3710":{"crate_id":24,"path":["syn","token","PathSep"],"kind":"struct"},"24:5301:209":{"crate_id":24,"path":["syn","path","Path"],"kind":"struct"},"2:22112:10568":{"crate_id":2,"path":["core","core_simd","simd","num","int","SimdInt"],"kind":"trait"},"24:4182:3709":{"crate_id":24,"path":["syn","token","OrOr"],"kind":"struct"},"1:2948:134":{"crate_id":1,"path":["std","io","error","Error"],"kind":"struct"},"2:47176:9127":{"crate_id":2,"path":["core","core_arch","simd","i64x4"],"kind":"struct"},"24:5365:3379":{"crate_id":24,"path":["syn","restriction","Visibility"],"kind":"enum"},"24:5478:3386":{"crate_id":24,"path":["syn","ty","TypeInfer"],"kind":"struct"},"2:40769:3512":{"crate_id":2,"path":["core","iter","adapters","skip_while","SkipWhile"],"kind":"struct"},"24:5475:3385":{"crate_id":24,"path":["syn","ty","TypeImplTrait"],"kind":"struct"},"2:46156:9081":{"crate_id":2,"path":["core","core_arch","simd","i64x1"],"kind":"struct"},"17:14317:7259":{"crate_id":17,"path":["object","pe","ImageArm64RuntimeFunctionEntry"],"kind":"struct"},"24:1442:26635":{"crate_id":24,"path":["syn","parse","discouraged","Speculative"],"kind":"trait"},"16:7391:22516":{"crate_id":16,"path":["gimli","read","op","EvaluationResult"],"kind":"enum"},"16:6687:9499":{"crate_id":16,"path":["gimli","read","line","LineInstructions"],"kind":"struct"},"2:43654:9597":{"crate_id":2,"path":["core","slice","iter","Chunks"],"kind":"struct"},"24:1447:26636":{"crate_id":24,"path":["syn","parse","discouraged","AnyDelimiter"],"kind":"trait"},"1:2946:232":{"crate_id":1,"path":["std","io","error","Result"],"kind":"type_alias"},"1:7645:4571":{"crate_id":1,"path":["std","thread","local","AccessError"],"kind":"struct"},"1:6148:6205":{"crate_id":1,"path":["std","sync","mpmc","waker","Waker"],"kind":"struct"},"2:44594:9715":{"crate_id":2,"path":["core","str","BytesIsNotEmpty"],"kind":"struct"},"2:48264:9178":{"crate_id":2,"path":["core","core_arch","x86","__m512d"],"kind":"struct"},"17:12779:6823":{"crate_id":17,"path":["object","macho","ThreadCommand"],"kind":"struct"},"2:46037:9076":{"crate_id":2,"path":["core","core_arch","simd","u32x2"],"kind":"struct"},"24:3851:3687":{"crate_id":24,"path":["syn","token","Caret"],"kind":"struct"},"2:32412:9617":{"crate_id":2,"path":["core","error","Source"],"kind":"struct"},"11:2383:3404":{"crate_id":11,"path":["hashbrown","table","Iter"],"kind":"struct"},"2:44168:9625":{"crate_id":2,"path":["core","str","iter","EscapeUnicode"],"kind":"struct"},"11:2542:7710":{"crate_id":11,"path":["hashbrown","raw","bitmask","BitMask"],"kind":"struct"},"2:22304:10563":{"crate_id":2,"path":["core","core_simd","simd","cmp","eq","SimdPartialEq"],"kind":"trait"},"24:3391:3682":{"crate_id":24,"path":["syn","token","While"],"kind":"struct"},"2:1840:185":{"crate_id":2,"path":["core","ptr","non_null","NonNull"],"kind":"struct"},"2:5828:3492":{"crate_id":2,"path":["core","iter","adapters","flatten","Flatten"],"kind":"struct"},"16:6513:9485":{"crate_id":16,"path":["gimli","read","index","UnitIndex"],"kind":"struct"},"6:5075:8350":{"crate_id":6,"path":["libc","unix","linux_like","linux","mq_attr"],"kind":"struct"},"2:2657:122":{"crate_id":2,"path":["core","default","Default"],"kind":"trait"},"2:40637:3502":{"crate_id":2,"path":["core","iter","adapters","filter","Filter"],"kind":"struct"},"18:660:26611":{"crate_id":18,"path":["memchr","memmem","FindIter"],"kind":"struct"},"1:11390:9752":{"crate_id":1,"path":["std","sys_common","wtf8","EncodeWide"],"kind":"struct"},"24:1404:2048":{"crate_id":24,"path":["syn","meta","ParseNestedMeta"],"kind":"struct"},"6:1501:7872":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreq"],"kind":"struct"},"11:844:10205":{"crate_id":11,"path":["hashbrown","map","RawEntryMut"],"kind":"enum"},"17:1184:22620":{"crate_id":17,"path":["object","read","coff","relocation","CoffRelocationIterator"],"kind":"struct"},"18:0:3172":{"crate_id":18,"path":["memchr"],"kind":"module"},"18:690:9355":{"crate_id":18,"path":["memchr","memmem","FinderRev"],"kind":"struct"},"14:7:10026":{"crate_id":14,"path":["rustc_demangle","legacy","Demangle"],"kind":"struct"},"2:44870:4679":{"crate_id":2,"path":["core","alloc","AllocError"],"kind":"struct"},"1:10833:29815":{"crate_id":1,"path":["std","sys","unix","kernel_copy","FdHandle"],"kind":"enum"},"16:6844:7472":{"crate_id":16,"path":["gimli","read","line","FileEntry"],"kind":"struct"},"2:44621:128":{"crate_id":2,"path":["core","time","Duration"],"kind":"struct"},"16:2744:7353":{"crate_id":16,"path":["gimli","common","DebugRngListsIndex"],"kind":"struct"},"14:0:3168":{"crate_id":14,"path":["rustc_demangle"],"kind":"module"},"16:2428:7340":{"crate_id":16,"path":["gimli","common","DebugAddrIndex"],"kind":"struct"},"10:44:7717":{"crate_id":10,"path":["adler","Adler32"],"kind":"struct"},"6:475:1965":{"crate_id":6,"path":["libc","unix","group"],"kind":"struct"},"11:2536:1964":{"crate_id":11,"path":["hashbrown","raw","sse2","Group"],"kind":"struct"},"1:12055:1632":{"crate_id":1,"path":["std","u128"],"kind":"primitive"},"6:4529:8119":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_trigger"],"kind":"struct"},"16:2339:7331":{"crate_id":16,"path":["gimli","common","LineEncoding"],"kind":"struct"},"2:44347:9694":{"crate_id":2,"path":["core","str","pattern","CharSliceSearcher"],"kind":"struct"},"23:345:2664":{"crate_id":23,"path":["quote","quote_spanned"],"kind":"macro"},"2:2709:10248":{"crate_id":2,"path":["core","error","Request"],"kind":"struct"},"17:10198:22657":{"crate_id":17,"path":["object","read","elf","file","ElfFile"],"kind":"struct"},"16:7102:22515":{"crate_id":16,"path":["gimli","read","op","DieReference"],"kind":"enum"},"24:4463:3867":{"crate_id":24,"path":["syn","token","Bracket"],"kind":"struct"},"1:7856:9187":{"crate_id":1,"path":["std","fs","FileTimes"],"kind":"struct"},"16:6204:10088":{"crate_id":16,"path":["gimli","read","dwarf","Dwarf"],"kind":"struct"},"17:9004:22584":{"crate_id":17,"path":["object","common","SymbolFlags"],"kind":"enum"},"17:2209:22663":{"crate_id":17,"path":["object","read","elf","relocation","ElfSectionRelocationIterator"],"kind":"struct"},"2:4325:3559":{"crate_id":2,"path":["core","cell","BorrowError"],"kind":"struct"},"16:7582:7527":{"crate_id":16,"path":["gimli","read","rnglists","RangeLists"],"kind":"struct"},"8:0:3163":{"crate_id":8,"path":["cfg_if"],"kind":"module"},"17:13891:7130":{"crate_id":17,"path":["object","pe","ImageAuxSymbolCrc"],"kind":"struct"},"1:7530:2057":{"crate_id":1,"path":["std","backtrace_rs","symbolize","Symbol"],"kind":"struct"},"6:4698:8176":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Phdr"],"kind":"struct"},"16:7828:7542":{"crate_id":16,"path":["gimli","read","unit","UnitHeader"],"kind":"struct"},"24:5146:2184":{"crate_id":24,"path":["syn","lit","LitStr"],"kind":"struct"},"20:708:3422":{"crate_id":20,"path":["proc_macro2","fallback","LexError"],"kind":"struct"},"17:10548:9376":{"crate_id":17,"path":["object","read","elf","version","VernauxIterator"],"kind":"struct"},"1:3512:10304":{"crate_id":1,"path":["std","io","BufRead"],"kind":"trait"},"1:860:3403":{"crate_id":1,"path":["std","collections","hash","map","IntoIter"],"kind":"struct"},"24:554:5689":{"crate_id":24,"path":["syn","error","ErrorMessage"],"kind":"struct"},"16:2472:7342":{"crate_id":16,"path":["gimli","common","DebugInfoOffset"],"kind":"struct"},"2:46086:9078":{"crate_id":2,"path":["core","core_arch","simd","i8x8"],"kind":"struct"},"17:11548:6607":{"crate_id":17,"path":["object","read","SymbolMapName"],"kind":"struct"},"2:2586:264":{"crate_id":2,"path":["core","convert","TryInto"],"kind":"trait"},"17:13974:7149":{"crate_id":17,"path":["object","pe","ImageThunkData64"],"kind":"struct"},"5:6954:269":{"crate_id":5,"path":["alloc","vec","Vec"],"kind":"struct"},"14:40:1976":{"crate_id":14,"path":["rustc_demangle","v0","Ident"],"kind":"struct"},"1:10340:29363":{"crate_id":1,"path":["std","sys","unix","process","process_common","Argv"],"kind":"struct"},"2:4902:10326":{"crate_id":2,"path":["core","io","borrowed_buf","BorrowedBuf"],"kind":"struct"},"2:44883:9721":{"crate_id":2,"path":["core","escape","EscapeIterInner"],"kind":"struct"},"20:883:2043":{"crate_id":20,"path":["proc_macro2","Span"],"kind":"struct"},"17:12686:6811":{"crate_id":17,"path":["object","macho","DylibCommand"],"kind":"struct"},"1:8815:9251":{"crate_id":1,"path":["std","process","ExitStatus"],"kind":"struct"},"17:12766:6822":{"crate_id":17,"path":["object","macho","DylinkerCommand"],"kind":"struct"},"1:1557:9562":{"crate_id":1,"path":["std","collections","hash","set","Difference"],"kind":"struct"},"21:2592:3589":{"crate_id":21,"path":["proc_macro","diagnostic","Diagnostic"],"kind":"struct"},"1:7739:10235":{"crate_id":1,"path":["std","env","VarError"],"kind":"enum"},"17:11911:6653":{"crate_id":17,"path":["object","elf","FileHeader64"],"kind":"struct"},"16:7360:35565":{"crate_id":16,"path":["gimli","read","op","EvaluationWaiting"],"kind":"enum"},"2:7747:162":{"crate_id":2,"path":["core","iter","traits","collect","IntoIterator"],"kind":"trait"},"24:3972:3695":{"crate_id":24,"path":["syn","token","DotDotEq"],"kind":"struct"},"21:2691:2043":{"crate_id":21,"path":["proc_macro","Span"],"kind":"struct"},"16:4719:7404":{"crate_id":16,"path":["gimli","constants","DwLang"],"kind":"struct"},"20:934:2042":{"crate_id":20,"path":["proc_macro2","Spacing"],"kind":"enum"},"6:7616:8771":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_barrierattr_t"],"kind":"struct"},"2:40440:106":{"crate_id":2,"path":["core","ffi","c_str","CStr"],"kind":"struct"},"24:1600:3527":{"crate_id":24,"path":["syn","parse","Parser"],"kind":"trait"},"24:1486:3416":{"crate_id":24,"path":["syn","parse","Parse"],"kind":"trait"},"17:13245:6913":{"crate_id":17,"path":["object","macho","Nlist32"],"kind":"struct"},"2:39630:222":{"crate_id":2,"path":["core","ops","range","RangeToInclusive"],"kind":"struct"},"16:6346:10103":{"crate_id":16,"path":["gimli","read","abbrev","AbbreviationsCache"],"kind":"struct"},"24:552:134":{"crate_id":24,"path":["syn","error","Error"],"kind":"struct"},"1:9481:6235":{"crate_id":1,"path":["std","sys","unix","fs","Dir"],"kind":"struct"},"16:6386:7435":{"crate_id":16,"path":["gimli","read","abbrev","AttributeSpecification"],"kind":"struct"},"17:13612:7073":{"crate_id":17,"path":["object","pe","ImageRomOptionalHeader"],"kind":"struct"},"18:636:6394":{"crate_id":18,"path":["memchr","memmem","twoway","ApproximateByteSet"],"kind":"struct"},"17:434:6447":{"crate_id":17,"path":["object","read","any","Section"],"kind":"struct"},"1:10759:9737":{"crate_id":1,"path":["std","sys","unix","fs","FileAttr"],"kind":"struct"},"2:43746:9600":{"crate_id":2,"path":["core","slice","iter","RChunks"],"kind":"struct"},"6:62:16038":{"crate_id":6,"path":["libc","unix","DIR"],"kind":"enum"},"24:1505:3530":{"crate_id":24,"path":["syn","parse","StepCursor"],"kind":"struct"},"6:5992:8481":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","rtentry"],"kind":"struct"},"17:9712:35603":{"crate_id":17,"path":["object","read","any","SymbolIteratorInternal"],"kind":"enum"},"6:4847:8237":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_j1939"],"kind":"struct"},"6:7668:8784":{"crate_id":6,"path":["libc","unix","linux_like","linux","canfd_frame"],"kind":"struct"},"17:13877:7127":{"crate_id":17,"path":["object","pe","ImageAuxSymbolSection"],"kind":"struct"},"17:12672:6538":{"crate_id":17,"path":["object","macho","Dylib"],"kind":"struct"},"5:4087:3408":{"crate_id":5,"path":["alloc","collections","vec_deque","iter_mut","IterMut"],"kind":"struct"},"2:2200:630":{"crate_id":2,"path":["core","ptr","drop_in_place"],"kind":"function"},"6:4902:8260":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlmsgerr"],"kind":"struct"},"2:7743:142":{"crate_id":2,"path":["core","iter","traits","collect","FromIterator"],"kind":"trait"},"24:338:3540":{"crate_id":24,"path":["syn","buffer","Cursor"],"kind":"struct"},"1:8275:9728":{"crate_id":1,"path":["std","os","unix","net","addr","SocketAddr"],"kind":"struct"},"16:4986:7413":{"crate_id":16,"path":["gimli","constants","DwLns"],"kind":"struct"},"24:5148:3367":{"crate_id":24,"path":["syn","lit","LitByteStr"],"kind":"struct"},"16:7722:7370":{"crate_id":16,"path":["gimli","read","str","DebugLineStr"],"kind":"struct"},"1:11539:10340":{"crate_id":1,"path":["std","sys_common","net","UdpSocket"],"kind":"struct"},"24:3880:3689":{"crate_id":24,"path":["syn","token","Colon"],"kind":"struct"},"2:21158:4341":{"crate_id":2,"path":["core","core_simd","swizzle","reverse","Reverse"],"kind":"struct"},"11:2326:10209":{"crate_id":11,"path":["hashbrown","table","OccupiedEntry"],"kind":"struct"},"2:22980:195":{"crate_id":2,"path":["core","num","nonzero","NonZeroU8"],"kind":"struct"},"2:40306:32502":{"crate_id":2,"path":["core","char","convert","CharErrorKind"],"kind":"enum"},"1:8892:9255":{"crate_id":1,"path":["std","sync","mpsc","RecvError"],"kind":"struct"},"0:964:1828":{"crate_id":0,"path":["serde_derive","Serialize"],"kind":"proc_derive"},"11:2569:3458":{"crate_id":11,"path":["hashbrown","TryReserveError"],"kind":"enum"},"2:48241:9177":{"crate_id":2,"path":["core","core_arch","x86","__m512"],"kind":"struct"},"5:6837:4772":{"crate_id":5,"path":["alloc","vec","set_len_on_drop","SetLenOnDrop"],"kind":"struct"},"1:4161:10371":{"crate_id":1,"path":["std","os","unix","net","ancillary","ScmCredentials"],"kind":"struct"},"17:11024:6570":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbol"],"kind":"struct"},"1:4800:6213":{"crate_id":1,"path":["std","os","fd","owned","OwnedFd"],"kind":"struct"},"6:4830:8226":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_extended_err"],"kind":"struct"},"17:13423:6929":{"crate_id":17,"path":["object","pe","ImageDosHeader"],"kind":"struct"},"16:3461:7387":{"crate_id":16,"path":["gimli","arch","RiscV"],"kind":"struct"},"16:4497:7398":{"crate_id":16,"path":["gimli","constants","DwLle"],"kind":"struct"},"6:7645:8778":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_rwlock_t"],"kind":"struct"},"2:2923:6352":{"crate_id":2,"path":["core","ops","arith","MulAssign"],"kind":"trait"},"24:4576:2193":{"crate_id":24,"path":["syn","derive","DataStruct"],"kind":"struct"},"20:825:1964":{"crate_id":20,"path":["proc_macro2","imp","Group"],"kind":"enum"},"6:6071:8530":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","Elf64_Chdr"],"kind":"struct"},"24:3948:3693":{"crate_id":24,"path":["syn","token","DotDot"],"kind":"struct"},"2:47896:9164":{"crate_id":2,"path":["core","core_arch","simd","i32x16"],"kind":"struct"},"24:4910:3353":{"crate_id":24,"path":["syn","expr","ExprTry"],"kind":"struct"},"1:0:1523":{"crate_id":1,"path":["std"],"kind":"module"},"17:9489:35594":{"crate_id":17,"path":["object","read","any","SegmentInternal"],"kind":"enum"},"2:42057:4692":{"crate_id":2,"path":["core","panicking","AssertKind"],"kind":"enum"},"2:23259:189":{"crate_id":2,"path":["core","num","nonzero","NonZeroI64"],"kind":"struct"},"6:5140:8382":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_txtime"],"kind":"struct"},"17:12984:6871":{"crate_id":17,"path":["object","macho","UuidCommand"],"kind":"struct"},"1:8905:10452":{"crate_id":1,"path":["std","sync","mpsc","TryRecvError"],"kind":"enum"},"2:42284:93":{"crate_id":2,"path":["core","sync","atomic","AtomicU16"],"kind":"struct"},"17:11138:22738":{"crate_id":17,"path":["object","read","pe","section","PeSection"],"kind":"struct"},"2:43223:9051":{"crate_id":2,"path":["core","hash","sip","State"],"kind":"struct"},"17:10127:9366":{"crate_id":17,"path":["object","read","coff","import","ImportFile"],"kind":"struct"},"24:97:4399":{"crate_id":24,"path":["syn","token","private","WithSpan"],"kind":"struct"},"21:2601:9343":{"crate_id":21,"path":["proc_macro","diagnostic","Children"],"kind":"struct"},"24:2094:2600":{"crate_id":24,"path":["syn","punctuated","Pair"],"kind":"enum"},"6:6943:8743":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user_fpregs_struct"],"kind":"struct"},"16:6901:7371":{"crate_id":16,"path":["gimli","read","loclists","DebugLoc"],"kind":"struct"},"24:4547:3321":{"crate_id":24,"path":["syn","data","FieldsNamed"],"kind":"struct"},"21:2730:3424":{"crate_id":21,"path":["proc_macro","Delimiter"],"kind":"enum"},"21:2504:3589":{"crate_id":21,"path":["proc_macro","bridge","Diagnostic"],"kind":"struct"},"2:4864:33413":{"crate_id":2,"path":["core","ffi","sealed_trait","VaArgSafe"],"kind":"trait"},"2:12440:15640":{"crate_id":2,"path":["core","str","pattern","DoubleEndedSearcher"],"kind":"trait"},"17:12622:6802":{"crate_id":17,"path":["object","macho","Section64"],"kind":"struct"},"17:11112:22740":{"crate_id":17,"path":["object","read","pe","section","PeSegment"],"kind":"struct"},"17:8595:22561":{"crate_id":17,"path":["object","common","Architecture"],"kind":"enum"},"2:2974:6357":{"crate_id":2,"path":["core","ops","bit","BitOrAssign"],"kind":"trait"},"17:12423:6764":{"crate_id":17,"path":["object","macho","DyldCacheMappingInfo"],"kind":"struct"},"6:4480:8101":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_event"],"kind":"struct"},"17:12889:6854":{"crate_id":17,"path":["object","macho","DylibModule32"],"kind":"struct"},"1:3368:3472":{"crate_id":1,"path":["std","io","util","Repeat"],"kind":"struct"},"17:8849:22579":{"crate_id":17,"path":["object","common","RelocationKind"],"kind":"enum"},"17:12971:6869":{"crate_id":17,"path":["object","macho","PrebindCksumCommand"],"kind":"struct"},"17:13555:7035":{"crate_id":17,"path":["object","pe","ImageFileHeader"],"kind":"struct"}},"external_crates":{"23":{"name":"quote","html_root_url":"https://docs.rs/quote/1.0.33/"},"20":{"name":"proc_macro2","html_root_url":"https://docs.rs/proc-macro2/1.0.70/"},"17":{"name":"object","html_root_url":"https://doc.rust-lang.org/nightly/"},"14":{"name":"rustc_demangle","html_root_url":"https://doc.rust-lang.org/nightly/"},"11":{"name":"hashbrown","html_root_url":"https://doc.rust-lang.org/nightly/"},"8":{"name":"cfg_if","html_root_url":"https://docs.rs/cfg-if/"},"5":{"name":"alloc","html_root_url":"https://doc.rust-lang.org/nightly/"},"2":{"name":"core","html_root_url":"https://doc.rust-lang.org/nightly/"},"22":{"name":"unicode_ident","html_root_url":"https://docs.rs/unicode-ident/1.0.12/"},"19":{"name":"panic_unwind","html_root_url":"https://doc.rust-lang.org/nightly/"},"16":{"name":"gimli","html_root_url":"https://doc.rust-lang.org/nightly/"},"13":{"name":"std_detect","html_root_url":"https://doc.rust-lang.org/nightly/"},"10":{"name":"adler","html_root_url":"https://docs.rs/adler/1.0.2/"},"7":{"name":"unwind","html_root_url":"https://doc.rust-lang.org/nightly/"},"4":{"name":"rustc_std_workspace_core","html_root_url":"https://doc.rust-lang.org/nightly/"},"1":{"name":"std","html_root_url":"https://doc.rust-lang.org/nightly/"},"24":{"name":"syn","html_root_url":"https://docs.rs/syn/2.0.39/"},"21":{"name":"proc_macro","html_root_url":"https://doc.rust-lang.org/nightly/"},"18":{"name":"memchr","html_root_url":"https://doc.rust-lang.org/nightly/"},"15":{"name":"addr2line","html_root_url":"https://doc.rust-lang.org/nightly/"},"12":{"name":"rustc_std_workspace_alloc","html_root_url":"https://doc.rust-lang.org/nightly/"},"9":{"name":"miniz_oxide","html_root_url":"https://doc.rust-lang.org/nightly/"},"6":{"name":"libc","html_root_url":"https://doc.rust-lang.org/nightly/"},"3":{"name":"compiler_builtins","html_root_url":"https://doc.rust-lang.org/nightly/"}},"format_version":27}