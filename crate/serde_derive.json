{"root":"0:0:2063","crate_version":"1.0.199","includes_private":false,"index":{"5:5629:36392":{"id":"5:5629:36392","crate_id":5,"name":"into_string","span":null,"visibility":"public","docs":"Converts a [`Box<str>`] into a [`String`] without copying or allocating.\n\n# Examples\n\n```\nlet string = String::from(\"birthday gift\");\nlet boxed_str = string.clone().into_boxed_str();\n\nassert_eq!(boxed_str.into_string(), string);\n```","links":{"`Box<str>`":"5:304:2251","`String`":"5:7641:243"},"attrs":["#[must_use = \"`self` will be dropped if the result is not used\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"resolved_path":{"name":"Box","id":"5:304:2251","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}]],"output":{"resolved_path":{"name":"String","id":"5:7641:243","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13236:29728":{"id":"2:13236:29728","crate_id":2,"name":"split","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by\ncharacters matched by a pattern.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rsplit`] method can be used.\n\n[`rsplit`]: str::rsplit\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".split(' ').collect();\nassert_eq!(v, [\"Mary\", \"had\", \"a\", \"little\", \"lamb\"]);\n\nlet v: Vec<&str> = \"\".split('X').collect();\nassert_eq!(v, [\"\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".split('X').collect();\nassert_eq!(v, [\"lion\", \"\", \"tiger\", \"leopard\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".split(\"::\").collect();\nassert_eq!(v, [\"lion\", \"tiger\", \"leopard\"]);\n\nlet v: Vec<&str> = \"abc1def2ghi\".split(char::is_numeric).collect();\nassert_eq!(v, [\"abc\", \"def\", \"ghi\"]);\n\nlet v: Vec<&str> = \"lionXtigerXleopard\".split(char::is_uppercase).collect();\nassert_eq!(v, [\"lion\", \"tiger\", \"leopard\"]);\n```\n\nIf the pattern is a slice of chars, split on each occurrence of any of the characters:\n\n```\nlet v: Vec<&str> = \"2020-11-03 23:59\".split(&['-', ' ', ':', '@'][..]).collect();\nassert_eq!(v, [\"2020\", \"11\", \"03\", \"23\", \"59\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".split(|c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"abc\", \"def\", \"ghi\"]);\n```\n\nIf a string contains multiple contiguous separators, you will end up\nwith empty strings in the output:\n\n```\nlet x = \"||||a||b|c\".to_string();\nlet d: Vec<_> = x.split('|').collect();\n\nassert_eq!(d, &[\"\", \"\", \"\", \"\", \"a\", \"\", \"b\", \"c\"]);\n```\n\nContiguous separators are separated by the empty string.\n\n```\nlet x = \"(///)\".to_string();\nlet d: Vec<_> = x.split('/').collect();\n\nassert_eq!(d, &[\"(\", \"\", \"\", \")\"]);\n```\n\nSeparators at the start or end of a string are neighbored\nby empty strings.\n\n```\nlet d: Vec<_> = \"010\".split(\"0\").collect();\nassert_eq!(d, &[\"\", \"1\", \"\"]);\n```\n\nWhen the empty string is used as a separator, it separates\nevery character in the string, along with the beginning\nand end of the string.\n\n```\nlet f: Vec<_> = \"rust\".split(\"\").collect();\nassert_eq!(f, &[\"\", \"r\", \"u\", \"s\", \"t\", \"\"]);\n```\n\nContiguous separators can lead to possibly surprising behavior\nwhen whitespace is used as the separator. This code is correct:\n\n```\nlet x = \"    a  b c\".to_string();\nlet d: Vec<_> = x.split(' ').collect();\n\nassert_eq!(d, &[\"\", \"\", \"\", \"\", \"a\", \"\", \"b\", \"c\"]);\n```\n\nIt does _not_ give you:\n\n```,ignore\nassert_eq!(d, &[\"a\", \"b\", \"c\"]);\n```\n\nUse [`split_whitespace`] for this behavior.\n\n[`split_whitespace`]: str::split_whitespace","links":{"self::pattern":"2:12873:4044","`DoubleEndedIterator`":"2:8256:129","prim@char":"1:12334:471","str::split_whitespace":"2:13214:33808","str::rsplit":"2:13242:29732"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Split","id":"2:43876:9164","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12879:16236","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13195:29700":{"id":"2:13195:29700","crate_id":2,"name":"as_mut_ptr","span":null,"visibility":"public","docs":"Converts a mutable string slice to a raw pointer.\n\nAs string slices are a slice of bytes, the raw pointer points to a\n[`u8`]. This pointer will be pointing to the first byte of the string\nslice.\n\nIt is your responsibility to make sure that the string slice only gets\nmodified in a way that it remains valid UTF-8.","links":{"`u8`":"1:12353:1850"},"attrs":["#[rustc_never_returns_null_ptr]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"raw_pointer":{"mutable":true,"type":{"primitive":"u8"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13282:35689":{"id":"2:13282:35689","crate_id":2,"name":"trim_right","span":null,"visibility":"public","docs":"Returns a string slice with trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`.\n\n# Text directionality\n\nA string is a sequence of bytes. 'Right' in this context means the last\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _left_ side, not the right.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \" Hello\\tworld\\t\";\n\nassert_eq!(\" Hello\\tworld\", s.trim_right());\n```\n\nDirectionality:\n\n```\nlet s = \"English  \";\nassert!(Some('h') == s.trim_right().chars().rev().next());\n\nlet s = \"עברית  \";\nassert!(Some('ת') == s.trim_right().chars().rev().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_end`\", suggestion =\n\"trim_end\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_end`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5630:3703":{"id":"5:5630:3703","crate_id":5,"name":"repeat","span":null,"visibility":"public","docs":"Creates a new [`String`] by repeating a string `n` times.\n\n# Panics\n\nThis function will panic if the capacity would overflow.\n\n# Examples\n\nBasic usage:\n\n```\nassert_eq!(\"abc\".repeat(4), String::from(\"abcabcabcabc\"));\n```\n\nA panic upon overflow:\n\n```should_panic\n// this will panic at runtime\nlet huge = \"0123456789abcdef\".repeat(usize::MAX);\n```","links":{"`String`":"5:7641:243"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["n",{"primitive":"usize"}]],"output":{"resolved_path":{"name":"String","id":"5:7641:243","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13266:35682":{"id":"2:13266:35682","crate_id":2,"name":"rmatches","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within this string slice,\nyielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`matches`] method can be used.\n\n[`matches`]: str::matches\n\n# Examples\n\n```\nlet v: Vec<&str> = \"abcXXXabcYYYabc\".rmatches(\"abc\").collect();\nassert_eq!(v, [\"abc\", \"abc\", \"abc\"]);\n\nlet v: Vec<&str> = \"1abc2abc3\".rmatches(char::is_numeric).collect();\nassert_eq!(v, [\"3\", \"2\", \"1\"]);\n```","links":{"self::pattern":"2:12873:4044","`DoubleEndedIterator`":"2:8256:129","prim@char":"1:12334:471","str::matches":"2:13263:2403"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RMatches","id":"2:44098:9248","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12879:16236","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12879:16236","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12894:16237","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13193:35676":{"id":"2:13193:35676","crate_id":2,"name":"as_bytes_mut","span":null,"visibility":"public","docs":"Converts a mutable string slice to a mutable byte slice.\n\n# Safety\n\nThe caller must ensure that the content of the slice is valid UTF-8\nbefore the borrow ends and the underlying `str` is used.\n\nUse of a `str` whose contents are not valid UTF-8 is undefined behavior.\n\n# Examples\n\nBasic usage:\n\n```\nlet mut s = String::from(\"Hello\");\nlet bytes = unsafe { s.as_bytes_mut() };\n\nassert_eq!(b\"Hello\", bytes);\n```\n\nMutability:\n\n```\nlet mut s = String::from(\"🗻∈🌏\");\n\nunsafe {\n    let bytes = s.as_bytes_mut();\n\n    bytes[0] = 0xF0;\n    bytes[1] = 0x9F;\n    bytes[2] = 0x8D;\n    bytes[3] = 0x94;\n}\n\nassert_eq!(\"🍔∈🌏\", s);\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"slice":{"primitive":"u8"}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"2:13205:35678":{"id":"2:13205:35678","crate_id":2,"name":"slice_mut_unchecked","span":null,"visibility":"public","docs":"Creates a string slice from another string slice, bypassing safety\nchecks.\nThis is generally not recommended, use with caution! For a safe\nalternative see [`str`] and [`IndexMut`].\n\n[`IndexMut`]: crate::ops::IndexMut\n\nThis new slice goes from `begin` to `end`, including `begin` but\nexcluding `end`.\n\nTo get an immutable string slice instead, see the\n[`slice_unchecked`] method.\n\n[`slice_unchecked`]: str::slice_unchecked\n\n# Safety\n\nCallers of this function are responsible that three preconditions are\nsatisfied:\n\n* `begin` must not exceed `end`.\n* `begin` and `end` must be byte positions within the string slice.\n* `begin` and `end` must lie on UTF-8 sequence boundaries.","links":{"`str`":"1:12340:1720","crate::ops::IndexMut":"2:3415:3647","str::slice_unchecked":"2:13204:35677"},"attrs":["#[deprecated(since = \"1.29.0\", note =\n\"use `get_unchecked_mut(begin..end)` instead\")]"],"deprecation":{"since":"1.29.0","note":"use `get_unchecked_mut(begin..end)` instead"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["begin",{"primitive":"usize"}],["end",{"primitive":"usize"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"2:13196:2296":{"id":"2:13196:2296","crate_id":2,"name":"get","span":null,"visibility":"public","docs":"Returns a subslice of `str`.\n\nThis is the non-panicking alternative to indexing the `str`. Returns\n[`None`] whenever equivalent indexing operation would panic.\n\n# Examples\n\n```\nlet v = String::from(\"🗻∈🌏\");\n\nassert_eq!(Some(\"🗻\"), v.get(0..4));\n\n// indices not on UTF-8 sequence boundaries\nassert!(v.get(1..).is_none());\nassert!(v.get(..8).is_none());\n\n// out of bounds\nassert!(v.get(..42).is_none());\n```","links":{"`None`":"2:41986:191"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"resolved_path":{"name":"Option","id":"2:41984:194","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"2:10963:239","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"2:10963:239","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13283:35690":{"id":"2:13283:35690","crate_id":2,"name":"trim_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes and suffixes that match a\npattern repeatedly removed.\n\nThe [pattern] can be a [`char`], a slice of [`char`]s, or a function\nor closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_matches('1'), \"foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_matches(char::is_numeric), \"foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_matches(x), \"foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1foo1barXX\".trim_matches(|c| c == '1' || c == 'X'), \"foo1bar\");\n```","links":{"prim@char":"1:12334:471","self::pattern":"2:12873:4044"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12879:16236","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12879:16236","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"DoubleEndedSearcher","id":"2:12899:16235","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13307:30905":{"id":"2:13307:30905","crate_id":2,"name":"as_ascii","span":null,"visibility":"public","docs":"If this string slice [`is_ascii`](Self::is_ascii), returns it as a slice\nof [ASCII characters](`ascii::Char`), otherwise returns `None`.","links":{"`ascii::Char`":"2:39885:4801","Self::is_ascii":"2:13306:28572"},"attrs":["#[unstable(feature = \"ascii_char\", issue = \"110998\")]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Option","id":"2:41984:194","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"resolved_path":{"name":"AsciiChar","id":"2:39885:4801","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13314:35694":{"id":"2:13314:35694","crate_id":2,"name":"escape_debug","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_debug`].\n\nNote: only extended grapheme codepoints that begin the string will be\nescaped.\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"❤\\n!\".escape_debug() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"❤\\n!\".escape_debug());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"❤\\\\n!\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"❤\\n!\".escape_debug().to_string(), \"❤\\\\n!\");\n```","links":{"`char::escape_debug`":"2:4944:35694"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EscapeDebug","id":"2:44175:9197","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13279:35687":{"id":"2:13279:35687","crate_id":2,"name":"trim_end","span":null,"visibility":"public","docs":"Returns a string slice with trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Text directionality\n\nA string is a sequence of bytes. `end` in this context means the last\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be right side, and for right-to-left languages like\nArabic or Hebrew, this will be the left side.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\nassert_eq!(\"\\n Hello\\tworld\", s.trim_end());\n```\n\nDirectionality:\n\n```\nlet s = \"  English  \";\nassert!(Some('h') == s.trim_end().chars().rev().next());\n\nlet s = \"  עברית  \";\nassert!(Some('ת') == s.trim_end().chars().rev().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_trim_end\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13275:35685":{"id":"2:13275:35685","crate_id":2,"name":"trim","span":null,"visibility":"public","docs":"Returns a string slice with leading and trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Examples\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\n\nassert_eq!(\"Hello\\tworld\", s.trim());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a slice, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_trim\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13295:35691":{"id":"2:13295:35691","crate_id":2,"name":"trim_end_matches","span":null,"visibility":"public","docs":"Returns a string slice with all suffixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. `end` in this context means the last\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be right side, and for right-to-left languages like\nArabic or Hebrew, this will be the left side.\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_end_matches('1'), \"11foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_end_matches(char::is_numeric), \"123foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_end_matches(x), \"12foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1fooX\".trim_end_matches(|c| c == '1' || c == 'X'), \"1foo\");\n```","links":{"prim@char":"1:12334:471","self::pattern":"2:12873:4044"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12879:16236","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12879:16236","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12894:16237","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13289:28469":{"id":"2:13289:28469","crate_id":2,"name":"strip_prefix","span":null,"visibility":"public","docs":"Returns a string slice with the prefix removed.\n\nIf the string starts with the pattern `prefix`, returns the substring after the prefix,\nwrapped in `Some`. Unlike `trim_start_matches`, this method removes the prefix exactly once.\n\nIf the string does not start with `prefix`, returns `None`.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nassert_eq!(\"foo:bar\".strip_prefix(\"foo:\"), Some(\"bar\"));\nassert_eq!(\"foo:bar\".strip_prefix(\"bar\"), None);\nassert_eq!(\"foofoo\".strip_prefix(\"foo\"), Some(\"foo\"));\n```","links":{"prim@char":"1:12334:471","self::pattern":"2:12873:4044"},"attrs":["#[must_use =\n\"this returns the remaining substring as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["prefix",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:41984:194","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12879:16236","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:493-0:404:2188":{"id":"0:493-0:404:2188","crate_id":0,"name":null,"span":{"filename":"src/internals/mod.rs","begin":[14,0],"end":[14,41]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"import":{"source":"self::receiver::replace_receiver","name":"replace_receiver","id":"0:404:2188","glob":false}}},"2:13308:28574":{"id":"2:13308:28574","crate_id":2,"name":"eq_ignore_ascii_case","span":null,"visibility":"public","docs":"Checks that two strings are an ASCII case-insensitive match.\n\nSame as `to_ascii_lowercase(a) == to_ascii_lowercase(b)`,\nbut without allocating and copying temporaries.\n\n# Examples\n\n```\nassert!(\"Ferris\".eq_ignore_ascii_case(\"FERRIS\"));\nassert!(\"Ferrös\".eq_ignore_ascii_case(\"FERRöS\"));\nassert!(!\"Ferrös\".eq_ignore_ascii_case(\"FERRÖS\"));\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["other",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5632:2640":{"id":"5:5632:2640","crate_id":5,"name":"to_ascii_lowercase","span":null,"visibility":"public","docs":"Returns a copy of this string where each character is mapped to its\nASCII lower case equivalent.\n\nASCII letters 'A' to 'Z' are mapped to 'a' to 'z',\nbut non-ASCII letters are unchanged.\n\nTo lowercase the value in-place, use [`make_ascii_lowercase`].\n\nTo lowercase ASCII characters in addition to non-ASCII characters, use\n[`to_lowercase`].\n\n# Examples\n\n```\nlet s = \"Grüße, Jürgen ❤\";\n\nassert_eq!(\"grüße, jürgen ❤\", s.to_ascii_lowercase());\n```\n\n[`make_ascii_lowercase`]: str::make_ascii_lowercase\n[`to_lowercase`]: #method.to_lowercase","links":{"str::make_ascii_lowercase":"2:13310:28576"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use = \"to lowercase the value in-place, use `make_ascii_lowercase()`\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7641:243","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13209:29727":{"id":"2:13209:29727","crate_id":2,"name":"split_at_mut_checked","span":null,"visibility":"public","docs":"Divide one mutable string slice into two at an index.\n\nThe argument, `mid`, should be a valid byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point. The\nmethod returns `None` if that’s not the case.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get immutable string slices instead, see the [`split_at_checked`] method.\n\n[`split_at_checked`]: str::split_at_checked\n\n# Examples\n\n```\n#![feature(split_at_checked)]\n\nlet mut s = \"Per Martin-Löf\".to_string();\nif let Some((first, last)) = s.split_at_mut_checked(3) {\n    first.make_ascii_uppercase();\n    assert_eq!(\"PER\", first);\n    assert_eq!(\" Martin-Löf\", last);\n}\nassert_eq!(\"PER Martin-Löf\", s);\n\nassert_eq!(None, s.split_at_mut_checked(13));  // Inside “ö”\nassert_eq!(None, s.split_at_mut_checked(16));  // Beyond the string length\n```","links":{"str::split_at_checked":"2:13208:29726"},"attrs":["#[must_use]","#[unstable(feature = \"split_at_checked\", reason = \"new API\", issue =\n\"119128\")]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["mid",{"primitive":"usize"}]],"output":{"resolved_path":{"name":"Option","id":"2:41984:194","args":{"angle_bracketed":{"args":[{"type":{"tuple":[{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13215:33815":{"id":"2:13215:33815","crate_id":2,"name":"split_ascii_whitespace","span":null,"visibility":"public","docs":"Splits a string slice by ASCII whitespace.\n\nThe iterator returned will return string slices that are sub-slices of\nthe original string slice, separated by any amount of ASCII whitespace.\n\nTo split by Unicode `Whitespace` instead, use [`split_whitespace`].\n\n[`split_whitespace`]: str::split_whitespace\n\n# Examples\n\nBasic usage:\n\n```\nlet mut iter = \"A few words\".split_ascii_whitespace();\n\nassert_eq!(Some(\"A\"), iter.next());\nassert_eq!(Some(\"few\"), iter.next());\nassert_eq!(Some(\"words\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nAll kinds of ASCII whitespace are considered:\n\n```\nlet mut iter = \" Mary   had\\ta little  \\n\\t lamb\".split_ascii_whitespace();\nassert_eq!(Some(\"Mary\"), iter.next());\nassert_eq!(Some(\"had\"), iter.next());\nassert_eq!(Some(\"a\"), iter.next());\nassert_eq!(Some(\"little\"), iter.next());\nassert_eq!(Some(\"lamb\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nIf the string is empty or all ASCII whitespace, the iterator yields no string slices:\n```\nassert_eq!(\"\".split_ascii_whitespace().next(), None);\nassert_eq!(\"   \".split_ascii_whitespace().next(), None);\n```","links":{"str::split_whitespace":"2:13214:33808"},"attrs":["#[must_use =\n\"this returns the split string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"SplitAsciiWhitespace","id":"2:44159:9252","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13217:35679":{"id":"2:13217:35679","crate_id":2,"name":"lines_any","span":null,"visibility":"public","docs":"An iterator over the lines of a string.","links":{},"attrs":["#[deprecated(since = \"1.4.0\", note = \"use lines() instead now\", suggestion =\n\"lines\")]"],"deprecation":{"since":"1.4.0","note":"use lines() instead now"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"LinesAny","id":"2:44140:9250","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13219:2509":{"id":"2:13219:2509","crate_id":2,"name":"contains","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a sub-slice of\nthis string slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.contains(\"nana\"));\nassert!(!bananas.contains(\"apples\"));\n```","links":{"prim@char":"1:12334:471","self::pattern":"2:12873:4044"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12879:16236","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13311:30908":{"id":"2:13311:30908","crate_id":2,"name":"trim_ascii_start","span":null,"visibility":"public","docs":"Returns a string slice with leading ASCII whitespace removed.\n\n'Whitespace' refers to the definition used by\n[`u8::is_ascii_whitespace`].\n\n[`u8::is_ascii_whitespace`]: u8::is_ascii_whitespace\n\n# Examples\n\n```\n#![feature(byte_slice_trim_ascii)]\n\nassert_eq!(\" \\t \\u{3000}hello world\\n\".trim_ascii_start(), \"\\u{3000}hello world\\n\");\nassert_eq!(\"  \".trim_ascii_start(), \"\");\nassert_eq!(\"\".trim_ascii_start(), \"\");\n```","links":{"u8::is_ascii_whitespace":"2:992:40484"},"attrs":["#[unstable(feature = \"byte_slice_trim_ascii\", issue = \"94035\")]","#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13218:33803":{"id":"2:13218:33803","crate_id":2,"name":"encode_utf16","span":null,"visibility":"public","docs":"Returns an iterator of `u16` over the string encoded as UTF-16.\n\n# Examples\n\n```\nlet text = \"Zażółć gęślą jaźń\";\n\nlet utf8_len = text.len();\nlet utf16_len = text.encode_utf16().count();\n\nassert!(utf16_len <= utf8_len);\n```","links":{},"attrs":["#[must_use =\n\"this returns the encoded string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EncodeUtf16","id":"2:44168:9253","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13222:29740":{"id":"2:13222:29740","crate_id":2,"name":"starts_with","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a prefix of this\nstring slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, in which case this function will return true if\nthe `&str` is a prefix of this string slice.\n\nThe [pattern] can also be a [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\nThese will only be checked against the first character of this string slice.\nLook at the second example below regarding behavior for slices of [`char`]s.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.starts_with(\"bana\"));\nassert!(!bananas.starts_with(\"nana\"));\n```\n\n```\nlet bananas = \"bananas\";\n\n// Note that both of these assert successfully.\nassert!(bananas.starts_with(&['b', 'a', 'n', 'a']));\nassert!(bananas.starts_with(&['a', 'b', 'c', 'd']));\n```","links":{"prim@char":"1:12334:471","self::pattern":"2:12873:4044"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12879:16236","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13306:28572":{"id":"2:13306:28572","crate_id":2,"name":"is_ascii","span":null,"visibility":"public","docs":"Checks if all characters in this string are within the ASCII range.\n\n# Examples\n\n```\nlet ascii = \"hello!\\n\";\nlet non_ascii = \"Grüße, Jürgen ❤\";\n\nassert!(ascii.is_ascii());\nassert!(!non_ascii.is_ascii());\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13202:29699":{"id":"2:13202:29699","crate_id":2,"name":"get_unchecked_mut","span":null,"visibility":"public","docs":"Returns a mutable, unchecked subslice of `str`.\n\nThis is the unchecked alternative to indexing the `str`.\n\n# Safety\n\nCallers of this function are responsible that these preconditions are\nsatisfied:\n\n* The starting index must not exceed the ending index;\n* Indexes must be within bounds of the original slice;\n* Indexes must lie on UTF-8 sequence boundaries.\n\nFailing that, the returned string slice may reference invalid memory or\nviolate the invariants communicated by the `str` type.\n\n# Examples\n\n```\nlet mut v = String::from(\"🗻∈🌏\");\nunsafe {\n    assert_eq!(\"🗻\", v.get_unchecked_mut(0..4));\n    assert_eq!(\"∈\", v.get_unchecked_mut(4..7));\n    assert_eq!(\"🌏\", v.get_unchecked_mut(7..11));\n}\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"2:10963:239","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"2:10963:239","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"2:13232:4810":{"id":"2:13232:4810","crate_id":2,"name":"rfind","span":null,"visibility":"public","docs":"Returns the byte index for the first character of the last match of the pattern in\nthis string slice.\n\nReturns [`None`] if the pattern doesn't match.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nlet s = \"Löwe 老虎 Léopard Gepardi\";\n\nassert_eq!(s.rfind('L'), Some(13));\nassert_eq!(s.rfind('é'), Some(14));\nassert_eq!(s.rfind(\"pard\"), Some(24));\n```\n\nMore complex patterns with closures:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\n\nassert_eq!(s.rfind(char::is_whitespace), Some(12));\nassert_eq!(s.rfind(char::is_lowercase), Some(20));\n```\n\nNot finding the pattern:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\nlet x: &[_] = &['1', '2'];\n\nassert_eq!(s.rfind(x), None);\n```","links":{"`None`":"2:41986:191","prim@char":"1:12334:471","self::pattern":"2:12873:4044"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:41984:194","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12879:16236","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12879:16236","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12894:16237","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5617:36389":{"id":"5:5617:36389","crate_id":5,"name":"replacen","span":null,"visibility":"public","docs":"Replaces first N matches of a pattern with another string.\n\n`replacen` creates a new [`String`], and copies the data from this string slice into it.\nWhile doing so, it attempts to find matches of a pattern. If it finds any, it\nreplaces them with the replacement string slice at most `count` times.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"foo foo 123 foo\";\nassert_eq!(\"new new 123 foo\", s.replacen(\"foo\", \"new\", 2));\nassert_eq!(\"faa fao 123 foo\", s.replacen('o', \"a\", 3));\nassert_eq!(\"foo foo new23 foo\", s.replacen(char::is_numeric, \"new\", 1));\n```\n\nWhen the pattern doesn't match, it returns this string slice as [`String`]:\n\n```\nlet s = \"this is old\";\nassert_eq!(s, s.replacen(\"cookie monster\", \"little lamb\", 10));\n```","links":{"`String`":"5:7641:243"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the replaced string as a new allocation, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}],["to",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}],["count",{"primitive":"usize"}]],"output":{"resolved_path":{"name":"String","id":"5:7641:243","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12879:16236","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13316:10774":{"id":"2:13316:10774","crate_id":2,"name":"escape_default","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_default`].\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"❤\\n!\".escape_default() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"❤\\n!\".escape_default());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"\\\\u{{2764}}\\\\n!\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"❤\\n!\".escape_default().to_string(), \"\\\\u{2764}\\\\n!\");\n```","links":{"`char::escape_default`":"2:4945:10774"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EscapeDefault","id":"2:44184:9191","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:965:2060":{"id":"0:965:2060","crate_id":0,"name":"Deserialize","span":{"filename":"src/lib.rs","begin":[96,0],"end":[101,1]},"visibility":"public","docs":null,"links":{},"attrs":["#[proc_macro_derive(Deserialize, attributes(serde))]"],"deprecation":null,"inner":{"proc_macro":{"kind":"derive","helpers":["serde"]}}},"0:0:2063":{"id":"0:0:2063","crate_id":0,"name":"serde_derive","span":{"filename":"src/lib.rs","begin":[1,0],"end":[101,1]},"visibility":"public","docs":"This crate provides Serde's two derive macros.\n\n```edition2021\n# use serde_derive::{Deserialize, Serialize};\n#\n#[derive(Serialize, Deserialize)]\n# struct S;\n#\n# fn main() {}\n```\n\nPlease refer to [https://serde.rs/derive.html] for how to set this up.\n\n[https://serde.rs/derive.html]: https://serde.rs/derive.html","links":{},"attrs":["#![doc(html_root_url = \"https://docs.rs/serde_derive/1.0.199\")]","#![allow(clippy::branches_sharing_code, clippy::cognitive_complexity,\nclippy::collapsible_match, clippy::derive_partial_eq_without_eq,\nclippy::enum_variant_names, clippy::manual_map,\nclippy::match_like_matches_macro, clippy::needless_pass_by_value,\nclippy::too_many_arguments, clippy::trivially_copy_pass_by_ref,\nclippy::used_underscore_binding, clippy::wildcard_in_or_patterns,\nclippy::unnested_or_patterns,)]","#![allow(clippy::cast_possible_truncation, clippy::checked_conversions,\nclippy::doc_markdown, clippy::enum_glob_use, clippy::indexing_slicing,\nclippy::items_after_statements, clippy::let_underscore_untyped,\nclippy::manual_assert, clippy::map_err_ignore, clippy::match_same_arms,\nclippy::match_wildcard_for_single_variants, clippy::module_name_repetitions,\nclippy::must_use_candidate, clippy::similar_names, clippy::single_match_else,\nclippy::struct_excessive_bools, clippy::too_many_lines,\nclippy::unseparated_literal_suffix, clippy::unused_self, clippy::use_self,\nclippy::wildcard_imports)]"],"deprecation":null,"inner":{"module":{"is_crate":true,"items":["0:964:2052","0:965:2060"],"is_stripped":false}}},"2:13207:29723":{"id":"2:13207:29723","crate_id":2,"name":"split_at_mut","span":null,"visibility":"public","docs":"Divide one mutable string slice into two at an index.\n\nThe argument, `mid`, should be a byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get immutable string slices instead, see the [`split_at`] method.\n\n[`split_at`]: str::split_at\n\n# Panics\n\nPanics if `mid` is not on a UTF-8 code point boundary, or if it is past\nthe end of the last code point of the string slice.  For a non-panicking\nalternative see [`split_at_mut_checked`](str::split_at_mut_checked).\n\n# Examples\n\n```\nlet mut s = \"Per Martin-Löf\".to_string();\n{\n    let (first, last) = s.split_at_mut(3);\n    first.make_ascii_uppercase();\n    assert_eq!(\"PER\", first);\n    assert_eq!(\" Martin-Löf\", last);\n}\nassert_eq!(\"PER Martin-Löf\", s);\n```","links":{"str::split_at":"2:13206:3057","str::split_at_mut_checked":"2:13209:29727"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["mid",{"primitive":"usize"}]],"output":{"tuple":[{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13211:2650":{"id":"2:13211:2650","crate_id":2,"name":"chars","span":null,"visibility":"public","docs":"Returns an iterator over the [`char`]s of a string slice.\n\nAs a string slice consists of valid UTF-8, we can iterate through a\nstring slice by [`char`]. This method returns such an iterator.\n\nIt's important to remember that [`char`] represents a Unicode Scalar\nValue, and might not match your idea of what a 'character' is. Iteration\nover grapheme clusters may be what you actually want. This functionality\nis not provided by Rust's standard library, check crates.io instead.\n\n# Examples\n\nBasic usage:\n\n```\nlet word = \"goodbye\";\n\nlet count = word.chars().count();\nassert_eq!(7, count);\n\nlet mut chars = word.chars();\n\nassert_eq!(Some('g'), chars.next());\nassert_eq!(Some('o'), chars.next());\nassert_eq!(Some('o'), chars.next());\nassert_eq!(Some('d'), chars.next());\nassert_eq!(Some('b'), chars.next());\nassert_eq!(Some('y'), chars.next());\nassert_eq!(Some('e'), chars.next());\n\nassert_eq!(None, chars.next());\n```\n\nRemember, [`char`]s might not match your intuition about characters:\n\n[`char`]: prim@char\n\n```\nlet y = \"y̆\";\n\nlet mut chars = y.chars();\n\nassert_eq!(Some('y'), chars.next()); // not 'y̆'\nassert_eq!(Some('\\u{0306}'), chars.next());\n\nassert_eq!(None, chars.next());\n```","links":{"prim@char":"1:12334:471"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Chars","id":"2:43846:9232","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13251:29734":{"id":"2:13251:29734","crate_id":2,"name":"splitn","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by a\npattern, restricted to returning at most `n` items.\n\nIf `n` substrings are returned, the last substring (the `n`th substring)\nwill contain the remainder of the string.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will not be double ended, because it is\nnot efficient to support.\n\nIf the pattern allows a reverse search, the [`rsplitn`] method can be\nused.\n\n[`rsplitn`]: str::rsplitn\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lambda\".splitn(3, ' ').collect();\nassert_eq!(v, [\"Mary\", \"had\", \"a little lambda\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".splitn(3, \"X\").collect();\nassert_eq!(v, [\"lion\", \"\", \"tigerXleopard\"]);\n\nlet v: Vec<&str> = \"abcXdef\".splitn(1, 'X').collect();\nassert_eq!(v, [\"abcXdef\"]);\n\nlet v: Vec<&str> = \"\".splitn(1, 'X').collect();\nassert_eq!(v, [\"\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".splitn(2, |c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"abc\", \"defXghi\"]);\n```","links":{"prim@char":"1:12334:471","self::pattern":"2:12873:4044","str::rsplitn":"2:13254:29736"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["n",{"primitive":"usize"}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"SplitN","id":"2:43980:9241","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12879:16236","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13194:336":{"id":"2:13194:336","crate_id":2,"name":"as_ptr","span":null,"visibility":"public","docs":"Converts a string slice to a raw pointer.\n\nAs string slices are a slice of bytes, the raw pointer points to a\n[`u8`]. This pointer will be pointing to the first byte of the string\nslice.\n\nThe caller must ensure that the returned pointer is never written to.\nIf you need to mutate the contents of the string slice, use [`as_mut_ptr`].\n\n[`as_mut_ptr`]: str::as_mut_ptr\n\n# Examples\n\n```\nlet s = \"Hello\";\nlet ptr = s.as_ptr();\n```","links":{"str::as_mut_ptr":"2:13195:29700","`u8`":"1:12353:1850"},"attrs":["#[rustc_never_returns_null_ptr]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"raw_pointer":{"mutable":false,"type":{"primitive":"u8"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13298:35692":{"id":"2:13298:35692","crate_id":2,"name":"trim_left_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. 'Left' in this context means the first\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _right_ side, not the left.\n\n# Examples\n\n```\nassert_eq!(\"11foo1bar11\".trim_left_matches('1'), \"foo1bar11\");\nassert_eq!(\"123foo1bar123\".trim_left_matches(char::is_numeric), \"foo1bar123\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_left_matches(x), \"foo1bar12\");\n```","links":{"prim@char":"1:12334:471","self::pattern":"2:12873:4044"},"attrs":["#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_start_matches`\",\nsuggestion = \"trim_start_matches\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_start_matches`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12879:16236","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13183":{"id":"2:13183","crate_id":2,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":["#[cfg(not(test))]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"primitive":"str"},"items":["2:13184:996","2:13185:2407","2:13186:35673","2:13187:35674","2:13189:35675","2:13192:3169","2:13193:35676","2:13194:336","2:13195:29700","2:13196:2296","2:13198:29697","2:13200:29698","2:13202:29699","2:13204:35677","2:13205:35678","2:13206:3057","2:13207:29723","2:13208:29726","2:13209:29727","2:13211:2650","2:13212:2644","2:13213:9153","2:13214:33808","2:13215:33815","2:13216:31608","2:13217:35679","2:13218:33803","2:13219:2509","2:13222:29740","2:13225:29741","2:13228:2959","2:13232:4810","2:13236:29728","2:13239:29730","2:13242:29732","2:13245:35680","2:13248:35681","2:13251:29734","2:13254:29736","2:13257:29738","2:13260:29739","2:13263:2403","2:13266:35682","2:13269:35683","2:13272:35684","2:13275:35685","2:13277:35686","2:13279:35687","2:13281:35688","2:13282:35689","2:13283:35690","2:13286:2315","2:13289:28469","2:13292:29742","2:13295:35691","2:13298:35692","2:13301:35693","2:13304:2276","2:13306:28572","2:13307:30905","2:13308:28574","2:13309:28575","2:13310:28576","2:13311:30908","2:13312:30909","2:13313:30910","2:13314:35694","2:13316:10774","2:13317:35695"],"negative":false,"synthetic":false,"blanket_impl":null}}},"2:13245:35680":{"id":"2:13245:35680","crate_id":2,"name":"split_terminator","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by\ncharacters matched by a pattern.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\nEquivalent to [`split`], except that the trailing substring\nis skipped if empty.\n\n[`split`]: str::split\n\nThis method can be used for string data that is _terminated_,\nrather than _separated_ by a pattern.\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rsplit_terminator`] method can be used.\n\n[`rsplit_terminator`]: str::rsplit_terminator\n\n# Examples\n\n```\nlet v: Vec<&str> = \"A.B.\".split_terminator('.').collect();\nassert_eq!(v, [\"A\", \"B\"]);\n\nlet v: Vec<&str> = \"A..B..\".split_terminator(\".\").collect();\nassert_eq!(v, [\"A\", \"\", \"B\", \"\"]);\n\nlet v: Vec<&str> = \"A.B:C.D\".split_terminator(&['.', ':'][..]).collect();\nassert_eq!(v, [\"A\", \"B\", \"C\", \"D\"]);\n```","links":{"self::pattern":"2:12873:4044","str::split":"2:13236:29728","prim@char":"1:12334:471","`DoubleEndedIterator`":"2:8256:129","str::rsplit_terminator":"2:13248:35681"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"SplitTerminator","id":"2:43926:9238","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12879:16236","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13248:35681":{"id":"2:13248:35681","crate_id":2,"name":"rsplit_terminator","span":null,"visibility":"public","docs":"An iterator over substrings of `self`, separated by characters\nmatched by a pattern and yielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\nEquivalent to [`split`], except that the trailing substring is\nskipped if empty.\n\n[`split`]: str::split\n\nThis method can be used for string data that is _terminated_,\nrather than _separated_ by a pattern.\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a\nreverse search, and it will be double ended if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`split_terminator`] method can be\nused.\n\n[`split_terminator`]: str::split_terminator\n\n# Examples\n\n```\nlet v: Vec<&str> = \"A.B.\".rsplit_terminator('.').collect();\nassert_eq!(v, [\"B\", \"A\"]);\n\nlet v: Vec<&str> = \"A..B..\".rsplit_terminator(\".\").collect();\nassert_eq!(v, [\"\", \"B\", \"\", \"A\"]);\n\nlet v: Vec<&str> = \"A.B:C.D\".rsplit_terminator(&['.', ':'][..]).collect();\nassert_eq!(v, [\"D\", \"C\", \"B\", \"A\"]);\n```","links":{"self::pattern":"2:12873:4044","str::split":"2:13236:29728","prim@char":"1:12334:471","str::split_terminator":"2:13245:35680"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RSplitTerminator","id":"2:43944:9239","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12879:16236","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12879:16236","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12894:16237","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13212:2644":{"id":"2:13212:2644","crate_id":2,"name":"char_indices","span":null,"visibility":"public","docs":"Returns an iterator over the [`char`]s of a string slice, and their\npositions.\n\nAs a string slice consists of valid UTF-8, we can iterate through a\nstring slice by [`char`]. This method returns an iterator of both\nthese [`char`]s, as well as their byte positions.\n\nThe iterator yields tuples. The position is first, the [`char`] is\nsecond.\n\n# Examples\n\nBasic usage:\n\n```\nlet word = \"goodbye\";\n\nlet count = word.char_indices().count();\nassert_eq!(7, count);\n\nlet mut char_indices = word.char_indices();\n\nassert_eq!(Some((0, 'g')), char_indices.next());\nassert_eq!(Some((1, 'o')), char_indices.next());\nassert_eq!(Some((2, 'o')), char_indices.next());\nassert_eq!(Some((3, 'd')), char_indices.next());\nassert_eq!(Some((4, 'b')), char_indices.next());\nassert_eq!(Some((5, 'y')), char_indices.next());\nassert_eq!(Some((6, 'e')), char_indices.next());\n\nassert_eq!(None, char_indices.next());\n```\n\nRemember, [`char`]s might not match your intuition about characters:\n\n[`char`]: prim@char\n\n```\nlet yes = \"y̆es\";\n\nlet mut char_indices = yes.char_indices();\n\nassert_eq!(Some((0, 'y')), char_indices.next()); // not (0, 'y̆')\nassert_eq!(Some((1, '\\u{0306}')), char_indices.next());\n\n// note the 3 here - the previous character took up two bytes\nassert_eq!(Some((3, 'e')), char_indices.next());\nassert_eq!(Some((4, 's')), char_indices.next());\n\nassert_eq!(None, char_indices.next());\n```","links":{"prim@char":"1:12334:471"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"CharIndices","id":"2:43852:9233","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:492-0:1019:2187":{"id":"0:492-0:1019:2187","crate_id":0,"name":null,"span":{"filename":"src/internals/mod.rs","begin":[13,0],"end":[13,25]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"import":{"source":"self::ctxt::Ctxt","name":"Ctxt","id":"0:1019:2187","glob":false}}},"2:13192:3169":{"id":"2:13192:3169","crate_id":2,"name":"as_bytes","span":null,"visibility":"public","docs":"Converts a string slice to a byte slice. To convert the byte slice back\ninto a string slice, use the [`from_utf8`] function.\n\n# Examples\n\n```\nlet bytes = \"bors\".as_bytes();\nassert_eq!(b\"bors\", bytes);\n```","links":{"`from_utf8`":"2:12420:16239"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"primitive":"u8"}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13263:2403":{"id":"2:13263:2403","crate_id":2,"name":"matches","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within the given string\nslice.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rmatches`] method can be used.\n\n[`rmatches`]: str::rmatches\n\n# Examples\n\n```\nlet v: Vec<&str> = \"abcXXXabcYYYabc\".matches(\"abc\").collect();\nassert_eq!(v, [\"abc\", \"abc\", \"abc\"]);\n\nlet v: Vec<&str> = \"1abc2abc3\".matches(char::is_numeric).collect();\nassert_eq!(v, [\"1\", \"2\", \"3\"]);\n```","links":{"self::pattern":"2:12873:4044","`DoubleEndedIterator`":"2:8256:129","prim@char":"1:12334:471","str::rmatches":"2:13266:35682"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Matches","id":"2:44080:9247","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12879:16236","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13198:29697":{"id":"2:13198:29697","crate_id":2,"name":"get_mut","span":null,"visibility":"public","docs":"Returns a mutable subslice of `str`.\n\nThis is the non-panicking alternative to indexing the `str`. Returns\n[`None`] whenever equivalent indexing operation would panic.\n\n# Examples\n\n```\nlet mut v = String::from(\"hello\");\n// correct length\nassert!(v.get_mut(0..5).is_some());\n// out of bounds\nassert!(v.get_mut(..42).is_none());\nassert_eq!(Some(\"he\"), v.get_mut(0..2).map(|v| &*v));\n\nassert_eq!(\"hello\", v);\n{\n    let s = v.get_mut(0..2);\n    let s = s.map(|s| {\n        s.make_ascii_uppercase();\n        &*s\n    });\n    assert_eq!(Some(\"HE\"), s);\n}\nassert_eq!(\"HEllo\", v);\n```","links":{"`None`":"2:41986:191"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"resolved_path":{"name":"Option","id":"2:41984:194","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"2:10963:239","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"2:10963:239","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13185:2407":{"id":"2:13185:2407","crate_id":2,"name":"is_empty","span":null,"visibility":"public","docs":"Returns `true` if `self` has a length of zero bytes.\n\n# Examples\n\n```\nlet s = \"\";\nassert!(s.is_empty());\n\nlet s = \"not empty\";\nassert!(!s.is_empty());\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13208:29726":{"id":"2:13208:29726","crate_id":2,"name":"split_at_checked","span":null,"visibility":"public","docs":"Divide one string slice into two at an index.\n\nThe argument, `mid`, should be a valid byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point. The\nmethod returns `None` if that’s not the case.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get mutable string slices instead, see the [`split_at_mut_checked`]\nmethod.\n\n[`split_at_mut_checked`]: str::split_at_mut_checked\n\n# Examples\n\n```\n#![feature(split_at_checked)]\n\nlet s = \"Per Martin-Löf\";\n\nlet (first, last) = s.split_at_checked(3).unwrap();\nassert_eq!(\"Per\", first);\nassert_eq!(\" Martin-Löf\", last);\n\nassert_eq!(None, s.split_at_checked(13));  // Inside “ö”\nassert_eq!(None, s.split_at_checked(16));  // Beyond the string length\n```","links":{"str::split_at_mut_checked":"2:13209:29727"},"attrs":["#[must_use]","#[unstable(feature = \"split_at_checked\", reason = \"new API\", issue =\n\"119128\")]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["mid",{"primitive":"usize"}]],"output":{"resolved_path":{"name":"Option","id":"2:41984:194","args":{"angle_bracketed":{"args":[{"type":{"tuple":[{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5612":{"id":"5:5612","crate_id":5,"name":null,"span":null,"visibility":"default","docs":"Methods for string slices.","links":{},"attrs":["#[cfg(not(test))]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"primitive":"str"},"items":["5:5613:36388","5:5614:2437","5:5617:36389","5:5620:36390","5:5628:36391","5:5629:36392","5:5630:3703","5:5631:2641","5:5632:2640"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:8:2180":{"id":"0:8:2180","crate_id":0,"name":"ast","span":{"filename":"src/internals/ast.rs","begin":[1,0],"end":[216,1]},"visibility":"public","docs":"A Serde ast, parsed from the Syn ast and ready to generate Rust code.","links":{},"attrs":[],"deprecation":null,"inner":{"module":{"is_crate":false,"items":[],"is_stripped":false}}},"0:964:2052":{"id":"0:964:2052","crate_id":0,"name":"Serialize","span":{"filename":"src/lib.rs","begin":[88,0],"end":[93,1]},"visibility":"public","docs":null,"links":{},"attrs":["#[proc_macro_derive(Serialize, attributes(serde))]"],"deprecation":null,"inner":{"proc_macro":{"kind":"derive","helpers":["serde"]}}},"2:13213:9153":{"id":"2:13213:9153","crate_id":2,"name":"bytes","span":null,"visibility":"public","docs":"An iterator over the bytes of a string slice.\n\nAs a string slice consists of a sequence of bytes, we can iterate\nthrough a string slice by byte. This method returns such an iterator.\n\n# Examples\n\n```\nlet mut bytes = \"bors\".bytes();\n\nassert_eq!(Some(b'b'), bytes.next());\nassert_eq!(Some(b'o'), bytes.next());\nassert_eq!(Some(b'r'), bytes.next());\nassert_eq!(Some(b's'), bytes.next());\n\nassert_eq!(None, bytes.next());\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Bytes","id":"2:43862:3179","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13257:29738":{"id":"2:13257:29738","crate_id":2,"name":"split_once","span":null,"visibility":"public","docs":"Splits the string on the first occurrence of the specified delimiter and\nreturns prefix before delimiter and suffix after delimiter.\n\n# Examples\n\n```\nassert_eq!(\"cfg\".split_once('='), None);\nassert_eq!(\"cfg=\".split_once('='), Some((\"cfg\", \"\")));\nassert_eq!(\"cfg=foo\".split_once('='), Some((\"cfg\", \"foo\")));\nassert_eq!(\"cfg=foo=bar\".split_once('='), Some((\"cfg\", \"foo=bar\")));\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["delimiter",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:41984:194","args":{"angle_bracketed":{"args":[{"type":{"tuple":[{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12879:16236","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13254:29736":{"id":"2:13254:29736","crate_id":2,"name":"rsplitn","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by a\npattern, starting from the end of the string, restricted to returning\nat most `n` items.\n\nIf `n` substrings are returned, the last substring (the `n`th substring)\nwill contain the remainder of the string.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will not be double ended, because it is not\nefficient to support.\n\nFor splitting from the front, the [`splitn`] method can be used.\n\n[`splitn`]: str::splitn\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".rsplitn(3, ' ').collect();\nassert_eq!(v, [\"lamb\", \"little\", \"Mary had a\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".rsplitn(3, 'X').collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"lionX\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".rsplitn(2, \"::\").collect();\nassert_eq!(v, [\"leopard\", \"lion::tiger\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".rsplitn(2, |c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"ghi\", \"abc1def\"]);\n```","links":{"prim@char":"1:12334:471","str::splitn":"2:13251:29734","self::pattern":"2:12873:4044"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["n",{"primitive":"usize"}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RSplitN","id":"2:43998:9242","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12879:16236","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12879:16236","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12894:16237","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13269:35683":{"id":"2:13269:35683","crate_id":2,"name":"match_indices","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within this string\nslice as well as the index that the match starts at.\n\nFor matches of `pat` within `self` that overlap, only the indices\ncorresponding to the first match are returned.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rmatch_indices`] method can be used.\n\n[`rmatch_indices`]: str::rmatch_indices\n\n# Examples\n\n```\nlet v: Vec<_> = \"abcXXXabcYYYabc\".match_indices(\"abc\").collect();\nassert_eq!(v, [(0, \"abc\"), (6, \"abc\"), (12, \"abc\")]);\n\nlet v: Vec<_> = \"1abcabc2\".match_indices(\"abc\").collect();\nassert_eq!(v, [(1, \"abc\"), (4, \"abc\")]);\n\nlet v: Vec<_> = \"ababa\".match_indices(\"aba\").collect();\nassert_eq!(v, [(0, \"aba\")]); // only the first `aba`\n```","links":{"self::pattern":"2:12873:4044","`DoubleEndedIterator`":"2:8256:129","prim@char":"1:12334:471","str::rmatch_indices":"2:13272:35684"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"MatchIndices","id":"2:44026:9244","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12879:16236","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13214:33808":{"id":"2:13214:33808","crate_id":2,"name":"split_whitespace","span":null,"visibility":"public","docs":"Splits a string slice by whitespace.\n\nThe iterator returned will return string slices that are sub-slices of\nthe original string slice, separated by any amount of whitespace.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`. If you only want to split on ASCII whitespace\ninstead, use [`split_ascii_whitespace`].\n\n[`split_ascii_whitespace`]: str::split_ascii_whitespace\n\n# Examples\n\nBasic usage:\n\n```\nlet mut iter = \"A few words\".split_whitespace();\n\nassert_eq!(Some(\"A\"), iter.next());\nassert_eq!(Some(\"few\"), iter.next());\nassert_eq!(Some(\"words\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nAll kinds of whitespace are considered:\n\n```\nlet mut iter = \" Mary   had\\ta\\u{2009}little  \\n\\t lamb\".split_whitespace();\nassert_eq!(Some(\"Mary\"), iter.next());\nassert_eq!(Some(\"had\"), iter.next());\nassert_eq!(Some(\"a\"), iter.next());\nassert_eq!(Some(\"little\"), iter.next());\nassert_eq!(Some(\"lamb\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nIf the string is empty or all whitespace, the iterator yields no string slices:\n```\nassert_eq!(\"\".split_whitespace().next(), None);\nassert_eq!(\"   \".split_whitespace().next(), None);\n```","links":{"str::split_ascii_whitespace":"2:13215:33815"},"attrs":["#[must_use =\n\"this returns the split string as an iterator, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_split_whitespace\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"SplitWhitespace","id":"2:44150:9251","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13242:29732":{"id":"2:13242:29732","crate_id":2,"name":"rsplit","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by\ncharacters matched by a pattern and yielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`split`] method can be used.\n\n[`split`]: str::split\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".rsplit(' ').collect();\nassert_eq!(v, [\"lamb\", \"little\", \"a\", \"had\", \"Mary\"]);\n\nlet v: Vec<&str> = \"\".rsplit('X').collect();\nassert_eq!(v, [\"\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".rsplit('X').collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"\", \"lion\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".rsplit(\"::\").collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"lion\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".rsplit(|c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"ghi\", \"def\", \"abc\"]);\n```","links":{"self::pattern":"2:12873:4044","`DoubleEndedIterator`":"2:8256:129","prim@char":"1:12334:471","str::split":"2:13236:29728"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RSplit","id":"2:43894:9167","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12879:16236","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12879:16236","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12894:16237","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13301:35693":{"id":"2:13301:35693","crate_id":2,"name":"trim_right_matches","span":null,"visibility":"public","docs":"Returns a string slice with all suffixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. 'Right' in this context means the last\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _left_ side, not the right.\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_right_matches('1'), \"11foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_right_matches(char::is_numeric), \"123foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_right_matches(x), \"12foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1fooX\".trim_right_matches(|c| c == '1' || c == 'X'), \"1foo\");\n```","links":{"prim@char":"1:12334:471","self::pattern":"2:12873:4044"},"attrs":["#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_end_matches`\",\nsuggestion = \"trim_end_matches\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_end_matches`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12879:16236","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12879:16236","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12894:16237","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13189:35675":{"id":"2:13189:35675","crate_id":2,"name":"ceil_char_boundary","span":null,"visibility":"public","docs":"Finds the closest `x` not below `index` where `is_char_boundary(x)` is `true`.\n\nIf `index` is greater than the length of the string, this returns the length of the string.\n\nThis method is the natural complement to [`floor_char_boundary`]. See that method\nfor more details.\n\n[`floor_char_boundary`]: str::floor_char_boundary\n\n\n# Examples\n\n```\n#![feature(round_char_boundary)]\nlet s = \"❤️🧡💛💚💙💜\";\nassert_eq!(s.len(), 26);\nassert!(!s.is_char_boundary(13));\n\nlet closest = s.ceil_char_boundary(13);\nassert_eq!(closest, 14);\nassert_eq!(&s[..closest], \"❤️🧡💛\");\n```","links":{"str::floor_char_boundary":"2:13187:35674"},"attrs":["#[unstable(feature = \"round_char_boundary\", issue = \"93743\")]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["index",{"primitive":"usize"}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13310:28576":{"id":"2:13310:28576","crate_id":2,"name":"make_ascii_lowercase","span":null,"visibility":"public","docs":"Converts this string to its ASCII lower case equivalent in-place.\n\nASCII letters 'A' to 'Z' are mapped to 'a' to 'z',\nbut non-ASCII letters are unchanged.\n\nTo return a new lowercased value without modifying the existing one, use\n[`to_ascii_lowercase()`].\n\n[`to_ascii_lowercase()`]: #method.to_ascii_lowercase\n\n# Examples\n\n```\nlet mut s = String::from(\"GRÜßE, JÜRGEN ❤\");\n\ns.make_ascii_lowercase();\n\nassert_eq!(\"grÜße, jÜrgen ❤\", s);\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13200:29698":{"id":"2:13200:29698","crate_id":2,"name":"get_unchecked","span":null,"visibility":"public","docs":"Returns an unchecked subslice of `str`.\n\nThis is the unchecked alternative to indexing the `str`.\n\n# Safety\n\nCallers of this function are responsible that these preconditions are\nsatisfied:\n\n* The starting index must not exceed the ending index;\n* Indexes must be within bounds of the original slice;\n* Indexes must lie on UTF-8 sequence boundaries.\n\nFailing that, the returned string slice may reference invalid memory or\nviolate the invariants communicated by the `str` type.\n\n# Examples\n\n```\nlet v = \"🗻∈🌏\";\nunsafe {\n    assert_eq!(\"🗻\", v.get_unchecked(0..4));\n    assert_eq!(\"∈\", v.get_unchecked(4..7));\n    assert_eq!(\"🌏\", v.get_unchecked(7..11));\n}\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"2:10963:239","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"2:10963:239","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"2:13312:30909":{"id":"2:13312:30909","crate_id":2,"name":"trim_ascii_end","span":null,"visibility":"public","docs":"Returns a string slice with trailing ASCII whitespace removed.\n\n'Whitespace' refers to the definition used by\n[`u8::is_ascii_whitespace`].\n\n[`u8::is_ascii_whitespace`]: u8::is_ascii_whitespace\n\n# Examples\n\n```\n#![feature(byte_slice_trim_ascii)]\n\nassert_eq!(\"\\r hello world\\u{3000}\\n \".trim_ascii_end(), \"\\r hello world\\u{3000}\");\nassert_eq!(\"  \".trim_ascii_end(), \"\");\nassert_eq!(\"\".trim_ascii_end(), \"\");\n```","links":{"u8::is_ascii_whitespace":"2:992:40484"},"attrs":["#[unstable(feature = \"byte_slice_trim_ascii\", issue = \"94035\")]","#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13286:2315":{"id":"2:13286:2315","crate_id":2,"name":"trim_start_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. `start` in this context means the first\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be left side, and for right-to-left languages like\nArabic or Hebrew, this will be the right side.\n\n# Examples\n\n```\nassert_eq!(\"11foo1bar11\".trim_start_matches('1'), \"foo1bar11\");\nassert_eq!(\"123foo1bar123\".trim_start_matches(char::is_numeric), \"foo1bar123\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_start_matches(x), \"foo1bar12\");\n```","links":{"prim@char":"1:12334:471","self::pattern":"2:12873:4044"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12879:16236","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13317:35695":{"id":"2:13317:35695","crate_id":2,"name":"escape_unicode","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_unicode`].\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"❤\\n!\".escape_unicode() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"❤\\n!\".escape_unicode());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"\\\\u{{2764}}\\\\u{{a}}\\\\u{{21}}\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"❤\\n!\".escape_unicode().to_string(), \"\\\\u{2764}\\\\u{a}\\\\u{21}\");\n```","links":{"`char::escape_unicode`":"2:4942:35695"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EscapeUnicode","id":"2:44193:9196","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5631:2641":{"id":"5:5631:2641","crate_id":5,"name":"to_ascii_uppercase","span":null,"visibility":"public","docs":"Returns a copy of this string where each character is mapped to its\nASCII upper case equivalent.\n\nASCII letters 'a' to 'z' are mapped to 'A' to 'Z',\nbut non-ASCII letters are unchanged.\n\nTo uppercase the value in-place, use [`make_ascii_uppercase`].\n\nTo uppercase ASCII characters in addition to non-ASCII characters, use\n[`to_uppercase`].\n\n# Examples\n\n```\nlet s = \"Grüße, Jürgen ❤\";\n\nassert_eq!(\"GRüßE, JüRGEN ❤\", s.to_ascii_uppercase());\n```\n\n[`make_ascii_uppercase`]: str::make_ascii_uppercase\n[`to_uppercase`]: #method.to_uppercase","links":{"str::make_ascii_uppercase":"2:13309:28575"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use = \"to uppercase the value in-place, use `make_ascii_uppercase()`\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7641:243","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:63:391":{"id":"0:63:391","crate_id":0,"name":"attr","span":{"filename":"src/internals/attr.rs","begin":[1,0],"end":[1881,1]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"module":{"is_crate":false,"items":["0:86-0:994:2281"],"is_stripped":false}}},"2:13277:35686":{"id":"2:13277:35686","crate_id":2,"name":"trim_start","span":null,"visibility":"public","docs":"Returns a string slice with leading whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Text directionality\n\nA string is a sequence of bytes. `start` in this context means the first\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be left side, and for right-to-left languages like\nArabic or Hebrew, this will be the right side.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\nassert_eq!(\"Hello\\tworld\\t\\n\", s.trim_start());\n```\n\nDirectionality:\n\n```\nlet s = \"  English  \";\nassert!(Some('E') == s.trim_start().chars().next());\n\nlet s = \"  עברית  \";\nassert!(Some('ע') == s.trim_start().chars().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_trim_start\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13225:29741":{"id":"2:13225:29741","crate_id":2,"name":"ends_with","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a suffix of this\nstring slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.ends_with(\"anas\"));\nassert!(!bananas.ends_with(\"nana\"));\n```","links":{"prim@char":"1:12334:471","self::pattern":"2:12873:4044"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12879:16236","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12879:16236","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12894:16237","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13239:29730":{"id":"2:13239:29730","crate_id":2,"name":"split_inclusive","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by\ncharacters matched by a pattern. Differs from the iterator produced by\n`split` in that `split_inclusive` leaves the matched part as the\nterminator of the substring.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\\nlittle lamb\\nlittle lamb.\"\n    .split_inclusive('\\n').collect();\nassert_eq!(v, [\"Mary had a little lamb\\n\", \"little lamb\\n\", \"little lamb.\"]);\n```\n\nIf the last element of the string is matched,\nthat element will be considered the terminator of the preceding substring.\nThat substring will be the last item returned by the iterator.\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\\nlittle lamb\\nlittle lamb.\\n\"\n    .split_inclusive('\\n').collect();\nassert_eq!(v, [\"Mary had a little lamb\\n\", \"little lamb\\n\", \"little lamb.\\n\"]);\n```","links":{"prim@char":"1:12334:471","self::pattern":"2:12873:4044"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"SplitInclusive","id":"2:12688:9166","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12879:16236","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13304:2276":{"id":"2:13304:2276","crate_id":2,"name":"parse","span":null,"visibility":"public","docs":"Parses this string slice into another type.\n\nBecause `parse` is so general, it can cause problems with type\ninference. As such, `parse` is one of the few times you'll see\nthe syntax affectionately known as the 'turbofish': `::<>`. This\nhelps the inference algorithm understand specifically which type\nyou're trying to parse into.\n\n`parse` can parse into any type that implements the [`FromStr`] trait.\n\n# Errors\n\nWill return [`Err`] if it's not possible to parse this string slice into\nthe desired type.\n\n[`Err`]: FromStr::Err\n\n# Examples\n\nBasic usage\n\n```\nlet four: u32 = \"4\".parse().unwrap();\n\nassert_eq!(4, four);\n```\n\nUsing the 'turbofish' instead of annotating `four`:\n\n```\nlet four = \"4\".parse::<u32>();\n\nassert_eq!(Ok(4), four);\n```\n\nFailing to parse:\n\n```\nlet nope = \"j\".parse::<u32>();\n\nassert!(nope.is_err());\n```","links":{"FromStr::Err":"2:12834:136","`FromStr`":"2:12833:3659"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Result","id":"2:42117:226","args":{"angle_bracketed":{"args":[{"type":{"generic":"F"}},{"type":{"qualified_path":{"name":"Err","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"F"},"trait":{"name":"FromStr","id":"2:12833:3659","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"F"},"bounds":[{"trait_bound":{"trait":{"name":"FromStr","id":"2:12833:3659","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13206:3057":{"id":"2:13206:3057","crate_id":2,"name":"split_at","span":null,"visibility":"public","docs":"Divide one string slice into two at an index.\n\nThe argument, `mid`, should be a byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get mutable string slices instead, see the [`split_at_mut`]\nmethod.\n\n[`split_at_mut`]: str::split_at_mut\n\n# Panics\n\nPanics if `mid` is not on a UTF-8 code point boundary, or if it is past\nthe end of the last code point of the string slice.  For a non-panicking\nalternative see [`split_at_checked`](str::split_at_checked).\n\n# Examples\n\n```\nlet s = \"Per Martin-Löf\";\n\nlet (first, last) = s.split_at(3);\n\nassert_eq!(\"Per\", first);\nassert_eq!(\" Martin-Löf\", last);\n```","links":{"str::split_at_checked":"2:13208:29726","str::split_at_mut":"2:13207:29723"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["mid",{"primitive":"usize"}]],"output":{"tuple":[{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13272:35684":{"id":"2:13272:35684","crate_id":2,"name":"rmatch_indices","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within `self`,\nyielded in reverse order along with the index of the match.\n\nFor matches of `pat` within `self` that overlap, only the indices\ncorresponding to the last match are returned.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`match_indices`] method can be used.\n\n[`match_indices`]: str::match_indices\n\n# Examples\n\n```\nlet v: Vec<_> = \"abcXXXabcYYYabc\".rmatch_indices(\"abc\").collect();\nassert_eq!(v, [(12, \"abc\"), (6, \"abc\"), (0, \"abc\")]);\n\nlet v: Vec<_> = \"1abcabc2\".rmatch_indices(\"abc\").collect();\nassert_eq!(v, [(4, \"abc\"), (1, \"abc\")]);\n\nlet v: Vec<_> = \"ababa\".rmatch_indices(\"aba\").collect();\nassert_eq!(v, [(2, \"aba\")]); // only the last `aba`\n```","links":{"self::pattern":"2:12873:4044","`DoubleEndedIterator`":"2:8256:129","prim@char":"1:12334:471","str::match_indices":"2:13269:35683"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RMatchIndices","id":"2:44044:9245","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12879:16236","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12879:16236","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12894:16237","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13292:29742":{"id":"2:13292:29742","crate_id":2,"name":"strip_suffix","span":null,"visibility":"public","docs":"Returns a string slice with the suffix removed.\n\nIf the string ends with the pattern `suffix`, returns the substring before the suffix,\nwrapped in `Some`.  Unlike `trim_end_matches`, this method removes the suffix exactly once.\n\nIf the string does not end with `suffix`, returns `None`.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nassert_eq!(\"bar:foo\".strip_suffix(\":foo\"), Some(\"bar\"));\nassert_eq!(\"bar:foo\".strip_suffix(\"bar\"), None);\nassert_eq!(\"foofoo\".strip_suffix(\"foo\"), Some(\"foo\"));\n```","links":{"prim@char":"1:12334:471","self::pattern":"2:12873:4044"},"attrs":["#[must_use =\n\"this returns the remaining substring as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["suffix",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:41984:194","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12879:16236","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12879:16236","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12894:16237","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13187:35674":{"id":"2:13187:35674","crate_id":2,"name":"floor_char_boundary","span":null,"visibility":"public","docs":"Finds the closest `x` not exceeding `index` where `is_char_boundary(x)` is `true`.\n\nThis method can help you truncate a string so that it's still valid UTF-8, but doesn't\nexceed a given number of bytes. Note that this is done purely at the character level\nand can still visually split graphemes, even though the underlying characters aren't\nsplit. For example, the emoji 🧑‍🔬 (scientist) could be split so that the string only\nincludes 🧑 (person) instead.\n\n# Examples\n\n```\n#![feature(round_char_boundary)]\nlet s = \"❤️🧡💛💚💙💜\";\nassert_eq!(s.len(), 26);\nassert!(!s.is_char_boundary(13));\n\nlet closest = s.floor_char_boundary(13);\nassert_eq!(closest, 10);\nassert_eq!(&s[..closest], \"❤️🧡\");\n```","links":{},"attrs":["#[unstable(feature = \"round_char_boundary\", issue = \"93743\")]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["index",{"primitive":"usize"}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13228:2959":{"id":"2:13228:2959","crate_id":2,"name":"find","span":null,"visibility":"public","docs":"Returns the byte index of the first character of this string slice that\nmatches the pattern.\n\nReturns [`None`] if the pattern doesn't match.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nlet s = \"Löwe 老虎 Léopard Gepardi\";\n\nassert_eq!(s.find('L'), Some(0));\nassert_eq!(s.find('é'), Some(14));\nassert_eq!(s.find(\"pard\"), Some(17));\n```\n\nMore complex patterns using point-free style and closures:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\n\nassert_eq!(s.find(char::is_whitespace), Some(5));\nassert_eq!(s.find(char::is_lowercase), Some(1));\nassert_eq!(s.find(|c: char| c.is_whitespace() || c.is_lowercase()), Some(1));\nassert_eq!(s.find(|c: char| (c < 'o') && (c > 'a')), Some(4));\n```\n\nNot finding the pattern:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\nlet x: &[_] = &['1', '2'];\n\nassert_eq!(s.find(x), None);\n```","links":{"`None`":"2:41986:191","prim@char":"1:12334:471","self::pattern":"2:12873:4044"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:41984:194","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12879:16236","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13309:28575":{"id":"2:13309:28575","crate_id":2,"name":"make_ascii_uppercase","span":null,"visibility":"public","docs":"Converts this string to its ASCII upper case equivalent in-place.\n\nASCII letters 'a' to 'z' are mapped to 'A' to 'Z',\nbut non-ASCII letters are unchanged.\n\nTo return a new uppercased value without modifying the existing one, use\n[`to_ascii_uppercase()`].\n\n[`to_ascii_uppercase()`]: #method.to_ascii_uppercase\n\n# Examples\n\n```\nlet mut s = String::from(\"Grüße, Jürgen ❤\");\n\ns.make_ascii_uppercase();\n\nassert_eq!(\"GRüßE, JüRGEN ❤\", s);\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13260:29739":{"id":"2:13260:29739","crate_id":2,"name":"rsplit_once","span":null,"visibility":"public","docs":"Splits the string on the last occurrence of the specified delimiter and\nreturns prefix before delimiter and suffix after delimiter.\n\n# Examples\n\n```\nassert_eq!(\"cfg\".rsplit_once('='), None);\nassert_eq!(\"cfg=foo\".rsplit_once('='), Some((\"cfg\", \"foo\")));\nassert_eq!(\"cfg=foo=bar\".rsplit_once('='), Some((\"cfg=foo\", \"bar\")));\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["delimiter",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:41984:194","args":{"angle_bracketed":{"args":[{"type":{"tuple":[{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12879:16236","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12879:16236","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12894:16237","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13313:30910":{"id":"2:13313:30910","crate_id":2,"name":"trim_ascii","span":null,"visibility":"public","docs":"Returns a string slice with leading and trailing ASCII whitespace\nremoved.\n\n'Whitespace' refers to the definition used by\n[`u8::is_ascii_whitespace`].\n\n[`u8::is_ascii_whitespace`]: u8::is_ascii_whitespace\n\n# Examples\n\n```\n#![feature(byte_slice_trim_ascii)]\n\nassert_eq!(\"\\r hello world\\n \".trim_ascii(), \"hello world\");\nassert_eq!(\"  \".trim_ascii(), \"\");\nassert_eq!(\"\".trim_ascii(), \"\");\n```","links":{"u8::is_ascii_whitespace":"2:992:40484"},"attrs":["#[unstable(feature = \"byte_slice_trim_ascii\", issue = \"94035\")]","#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5614:2437":{"id":"5:5614:2437","crate_id":5,"name":"replace","span":null,"visibility":"public","docs":"Replaces all matches of a pattern with another string.\n\n`replace` creates a new [`String`], and copies the data from this string slice into it.\nWhile doing so, it attempts to find matches of a pattern. If it finds any, it\nreplaces them with the replacement string slice.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"this is old\";\n\nassert_eq!(\"this is new\", s.replace(\"old\", \"new\"));\nassert_eq!(\"than an old\", s.replace(\"is\", \"an\"));\n```\n\nWhen the pattern doesn't match, it returns this string slice as [`String`]:\n\n```\nlet s = \"this is old\";\nassert_eq!(s, s.replace(\"cookie monster\", \"little lamb\"));\n```","links":{"`String`":"5:7641:243"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the replaced string as a new allocation, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["from",{"generic":"P"}],["to",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7641:243","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12879:16236","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:86-0:994:2281":{"id":"0:86-0:994:2281","crate_id":0,"name":null,"span":{"filename":"src/internals/attr.rs","begin":[21,0],"end":[21,43]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"import":{"source":"crate::internals::case::RenameRule","name":"RenameRule","id":"0:994:2281","glob":false}}},"0:1023:2284":{"id":"0:1023:2284","crate_id":0,"name":"Symbol","span":{"filename":"src/internals/symbol.rs","begin":[5,0],"end":[5,32]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"struct":{"kind":{"tuple":[null]},"generics":{"params":[],"where_predicates":[]},"impls":[]}}},"2:13216:31608":{"id":"2:13216:31608","crate_id":2,"name":"lines","span":null,"visibility":"public","docs":"An iterator over the lines of a string, as string slices.\n\nLines are split at line endings that are either newlines (`\\n`) or\nsequences of a carriage return followed by a line feed (`\\r\\n`).\n\nLine terminators are not included in the lines returned by the iterator.\n\nNote that any carriage return (`\\r`) not immediately followed by a\nline feed (`\\n`) does not split a line. These carriage returns are\nthereby included in the produced lines.\n\nThe final line ending is optional. A string that ends with a final line\nending will return the same lines as an otherwise identical string\nwithout a final line ending.\n\n# Examples\n\nBasic usage:\n\n```\nlet text = \"foo\\r\\nbar\\n\\nbaz\\r\";\nlet mut lines = text.lines();\n\nassert_eq!(Some(\"foo\"), lines.next());\nassert_eq!(Some(\"bar\"), lines.next());\nassert_eq!(Some(\"\"), lines.next());\n// Trailing carriage return is included in the last line\nassert_eq!(Some(\"baz\\r\"), lines.next());\n\nassert_eq!(None, lines.next());\n```\n\nThe final line does not require any ending:\n\n```\nlet text = \"foo\\nbar\\n\\r\\nbaz\";\nlet mut lines = text.lines();\n\nassert_eq!(Some(\"foo\"), lines.next());\nassert_eq!(Some(\"bar\"), lines.next());\nassert_eq!(Some(\"\"), lines.next());\nassert_eq!(Some(\"baz\"), lines.next());\n\nassert_eq!(None, lines.next());\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Lines","id":"2:44130:9249","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13204:35677":{"id":"2:13204:35677","crate_id":2,"name":"slice_unchecked","span":null,"visibility":"public","docs":"Creates a string slice from another string slice, bypassing safety\nchecks.\n\nThis is generally not recommended, use with caution! For a safe\nalternative see [`str`] and [`Index`].\n\n[`Index`]: crate::ops::Index\n\nThis new slice goes from `begin` to `end`, including `begin` but\nexcluding `end`.\n\nTo get a mutable string slice instead, see the\n[`slice_mut_unchecked`] method.\n\n[`slice_mut_unchecked`]: str::slice_mut_unchecked\n\n# Safety\n\nCallers of this function are responsible that three preconditions are\nsatisfied:\n\n* `begin` must not exceed `end`.\n* `begin` and `end` must be byte positions within the string slice.\n* `begin` and `end` must lie on UTF-8 sequence boundaries.\n\n# Examples\n\n```\nlet s = \"Löwe 老虎 Léopard\";\n\nunsafe {\n    assert_eq!(\"Löwe 老虎 Léopard\", s.slice_unchecked(0, 21));\n}\n\nlet s = \"Hello, world!\";\n\nunsafe {\n    assert_eq!(\"world\", s.slice_unchecked(7, 12));\n}\n```","links":{"`str`":"1:12340:1720","str::slice_mut_unchecked":"2:13205:35678","crate::ops::Index":"2:39530:2814"},"attrs":["#[deprecated(since = \"1.29.0\", note =\n\"use `get_unchecked(begin..end)` instead\")]","#[must_use]"],"deprecation":{"since":"1.29.0","note":"use `get_unchecked(begin..end)` instead"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["begin",{"primitive":"usize"}],["end",{"primitive":"usize"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"2:13184:996":{"id":"2:13184:996","crate_id":2,"name":"len","span":null,"visibility":"public","docs":"Returns the length of `self`.\n\nThis length is in bytes, not [`char`]s or graphemes. In other words,\nit might not be what a human considers the length of the string.\n\n[`char`]: prim@char\n\n# Examples\n\n```\nlet len = \"foo\".len();\nassert_eq!(3, len);\n\nassert_eq!(\"ƒoo\".len(), 4); // fancy f!\nassert_eq!(\"ƒoo\".chars().count(), 3);\n```","links":{"prim@char":"1:12334:471"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13281:35688":{"id":"2:13281:35688","crate_id":2,"name":"trim_left","span":null,"visibility":"public","docs":"Returns a string slice with leading whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`.\n\n# Text directionality\n\nA string is a sequence of bytes. 'Left' in this context means the first\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _right_ side, not the left.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \" Hello\\tworld\\t\";\n\nassert_eq!(\"Hello\\tworld\\t\", s.trim_left());\n```\n\nDirectionality:\n\n```\nlet s = \"  English\";\nassert!(Some('E') == s.trim_left().chars().next());\n\nlet s = \"  עברית\";\nassert!(Some('ע') == s.trim_left().chars().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_start`\", suggestion\n= \"trim_start\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_start`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5628:36391":{"id":"5:5628:36391","crate_id":5,"name":"to_uppercase","span":null,"visibility":"public","docs":"Returns the uppercase equivalent of this string slice, as a new [`String`].\n\n'Uppercase' is defined according to the terms of the Unicode Derived Core Property\n`Uppercase`.\n\nSince some characters can expand into multiple characters when changing\nthe case, this function returns a [`String`] instead of modifying the\nparameter in-place.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"hello\";\n\nassert_eq!(\"HELLO\", s.to_uppercase());\n```\n\nScripts without case are not changed:\n\n```\nlet new_year = \"农历新年\";\n\nassert_eq!(new_year, new_year.to_uppercase());\n```\n\nOne character can become multiple:\n```\nlet s = \"tschüß\";\n\nassert_eq!(\"TSCHÜSS\", s.to_uppercase());\n```","links":{"`String`":"5:7641:243"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the uppercase string as a new String, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7641:243","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5613:36388":{"id":"5:5613:36388","crate_id":5,"name":"into_boxed_bytes","span":null,"visibility":"public","docs":"Converts a `Box<str>` into a `Box<[u8]>` without copying or allocating.\n\n# Examples\n\n```\nlet s = \"this is a string\";\nlet boxed_str = s.to_owned().into_boxed_str();\nlet boxed_bytes = boxed_str.into_boxed_bytes();\nassert_eq!(*boxed_bytes, *s.as_bytes());\n```","links":{},"attrs":["#[must_use = \"`self` will be dropped if the result is not used\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"resolved_path":{"name":"Box","id":"5:304:2251","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}]],"output":{"resolved_path":{"name":"Box","id":"5:304:2251","args":{"angle_bracketed":{"args":[{"type":{"slice":{"primitive":"u8"}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13186:35673":{"id":"2:13186:35673","crate_id":2,"name":"is_char_boundary","span":null,"visibility":"public","docs":"Checks that `index`-th byte is the first byte in a UTF-8 code point\nsequence or the end of the string.\n\nThe start and end of the string (when `index == self.len()`) are\nconsidered to be boundaries.\n\nReturns `false` if `index` is greater than `self.len()`.\n\n# Examples\n\n```\nlet s = \"Löwe 老虎 Léopard\";\nassert!(s.is_char_boundary(0));\n// start of `老`\nassert!(s.is_char_boundary(6));\nassert!(s.is_char_boundary(s.len()));\n\n// second byte of `ö`\nassert!(!s.is_char_boundary(2));\n\n// third byte of `老`\nassert!(!s.is_char_boundary(8));\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["index",{"primitive":"usize"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5620:36390":{"id":"5:5620:36390","crate_id":5,"name":"to_lowercase","span":null,"visibility":"public","docs":"Returns the lowercase equivalent of this string slice, as a new [`String`].\n\n'Lowercase' is defined according to the terms of the Unicode Derived Core Property\n`Lowercase`.\n\nSince some characters can expand into multiple characters when changing\nthe case, this function returns a [`String`] instead of modifying the\nparameter in-place.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"HELLO\";\n\nassert_eq!(\"hello\", s.to_lowercase());\n```\n\nA tricky example, with sigma:\n\n```\nlet sigma = \"Σ\";\n\nassert_eq!(\"σ\", sigma.to_lowercase());\n\n// but at the end of a word, it's ς, not σ:\nlet odysseus = \"ὈΔΥΣΣΕΎΣ\";\n\nassert_eq!(\"ὀδυσσεύς\", odysseus.to_lowercase());\n```\n\nLanguages without case are not changed:\n\n```\nlet new_year = \"农历新年\";\n\nassert_eq!(new_year, new_year.to_lowercase());\n```","links":{"`String`":"5:7641:243"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the lowercase string as a new String, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7641:243","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}}},"paths":{"24:5404:3565":{"crate_id":24,"path":["syn","expr","FieldValue"],"kind":"struct"},"17:10828:37201":{"crate_id":17,"path":["object","read","any","SymbolIteratorInternal"],"kind":"enum"},"24:5654:2588":{"crate_id":24,"path":["syn","mac","Macro"],"kind":"struct"},"24:4448:3924":{"crate_id":24,"path":["syn","token","EqEq"],"kind":"struct"},"2:40618:10865":{"crate_id":2,"path":["core","io","borrowed_buf","BorrowedCursor"],"kind":"struct"},"16:2998:6814":{"crate_id":16,"path":["gimli","common","DwoId"],"kind":"struct"},"2:41231:3708":{"crate_id":2,"path":["core","iter","sources","repeat_with","RepeatWith"],"kind":"struct"},"6:5483:7763":{"crate_id":6,"path":["libc","unix","linux_like","linux","tls_crypto_info"],"kind":"struct"},"2:43247:8558":{"crate_id":2,"path":["core","hash","sip","State"],"kind":"struct"},"2:4775:3799":{"crate_id":2,"path":["core","cell","BorrowRefMut"],"kind":"struct"},"6:7348:8123":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","siginfo_t"],"kind":"struct"},"2:10528:157":{"crate_id":2,"path":["core","hash","Hasher"],"kind":"trait"},"17:11537:23740":{"crate_id":17,"path":["object","read","elf","note","NoteIterator"],"kind":"struct"},"2:33856:5662":{"crate_id":2,"path":["core","ops","bit","BitAnd"],"kind":"trait"},"17:15624:6596":{"crate_id":17,"path":["object","pe","ImageAlpha64RuntimeFunctionEntry"],"kind":"struct"},"17:11405:23724":{"crate_id":17,"path":["object","read","elf","section","ElfSection"],"kind":"struct"},"16:6442:9044":{"crate_id":16,"path":["gimli","read","abbrev","Abbreviation"],"kind":"struct"},"17:15646:6602":{"crate_id":17,"path":["object","pe","ImageRuntimeFunctionEntry"],"kind":"struct"},"6:523:7265":{"crate_id":6,"path":["libc","unix","hostent"],"kind":"struct"},"2:22534:11163":{"crate_id":2,"path":["core","core_simd","simd","ptr","mut_ptr","SimdMutPtr"],"kind":"trait"},"24:5554:2203":{"crate_id":24,"path":["syn","ident","Ident"],"kind":"function"},"6:8012:8246":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","align","clone_args"],"kind":"struct"},"17:12572:5852":{"crate_id":17,"path":["object","read","xcoff","symbol","SymbolTable"],"kind":"struct"},"6:6738:8028":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_umem_reg_v1"],"kind":"struct"},"1:9273:10420":{"crate_id":1,"path":["std","sync","mpmc","array","ArrayToken"],"kind":"struct"},"5:3670:3639":{"crate_id":5,"path":["alloc","collections","linked_list","IterMut"],"kind":"struct"},"16:7098:9093":{"crate_id":16,"path":["gimli","read","lookup","LookupEntryIter"],"kind":"struct"},"24:96:4857":{"crate_id":24,"path":["syn","token","private","WithSpan"],"kind":"struct"},"6:6657:8001":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_entry"],"kind":"struct"},"16:6962:6803":{"crate_id":16,"path":["gimli","read","loclists","DebugLocLists"],"kind":"struct"},"2:46135:8612":{"crate_id":2,"path":["core","core_arch","simd","i8x16"],"kind":"struct"},"24:5259:3555":{"crate_id":24,"path":["syn","expr","ExprCall"],"kind":"struct"},"2:12420:16239":{"crate_id":2,"path":["core","str","converts","from_utf8"],"kind":"function"},"2:30599:5091":{"crate_id":2,"path":["core","mem","maybe_uninit","MaybeUninit"],"kind":"union"},"17:597:2284":{"crate_id":17,"path":["object","read","any","Symbol"],"kind":"struct"},"6:5191:7621":{"crate_id":6,"path":["libc","unix","linux_like","linux","posix_spawn_file_actions_t"],"kind":"struct"},"5:3881:5233":{"crate_id":5,"path":["alloc","collections","linked_list","ExtractIf"],"kind":"struct"},"24:5830:3611":{"crate_id":24,"path":["syn","restriction","Visibility"],"kind":"enum"},"2:44622:9287":{"crate_id":2,"path":["core","str","UnsafeBytesToStr"],"kind":"struct"},"21:952:2270":{"crate_id":21,"path":["proc_macro","bridge","client","Span"],"kind":"struct"},"17:13723:6100":{"crate_id":17,"path":["object","macho","DyldCacheMappingInfo"],"kind":"struct"},"24:5545:3593":{"crate_id":24,"path":["syn","generics","PredicateLifetime"],"kind":"struct"},"2:44594:9280":{"crate_id":2,"path":["core","str","CharEscapeDebugContinue"],"kind":"struct"},"16:6588:9052":{"crate_id":16,"path":["gimli","read","index","UnitIndex"],"kind":"struct"},"2:23164:8323":{"crate_id":2,"path":["core","num","nonzero","private","NonZeroI64Inner"],"kind":"struct"},"5:6047:5481":{"crate_id":5,"path":["alloc","sync","Weak"],"kind":"struct"},"1:5834:5540":{"crate_id":1,"path":["std","sync","mpsc","Sender"],"kind":"struct"},"16:6433:9043":{"crate_id":16,"path":["gimli","read","abbrev","Abbreviations"],"kind":"struct"},"2:22:816":{"crate_id":2,"path":["core","format_args"],"kind":"macro"},"17:16198:6742":{"crate_id":17,"path":["object","xcoff","BlockAux32"],"kind":"struct"},"15:306:22677":{"crate_id":15,"path":["addr2line","LocationRangeUnitIter"],"kind":"struct"},"17:15266:6484":{"crate_id":17,"path":["object","pe","ImageImportByName"],"kind":"struct"},"24:5532:2338":{"crate_id":24,"path":["syn","generics","WherePredicate"],"kind":"enum"},"24:4583:3934":{"crate_id":24,"path":["syn","token","Not"],"kind":"struct"},"24:3736:2240":{"crate_id":24,"path":["syn","token","Union"],"kind":"struct"},"17:3597:23797":{"crate_id":17,"path":["object","read","macho","relocation","MachORelocationIterator"],"kind":"struct"},"24:4344:3918":{"crate_id":24,"path":["syn","token","Comma"],"kind":"struct"},"1:10940:8731":{"crate_id":1,"path":["std","sys","pal","unix","fs","FileTimes"],"kind":"struct"},"2:40570:10833":{"crate_id":2,"path":["core","ffi","c_char"],"kind":"type_alias"},"2:13624:205":{"crate_id":2,"path":["core","future","pending","Pending"],"kind":"struct"},"2:46555:8646":{"crate_id":2,"path":["core","core_arch","simd","i64x4"],"kind":"struct"},"24:5800:2871":{"crate_id":24,"path":["syn","path","AngleBracketedGenericArguments"],"kind":"struct"},"17:15324:6498":{"crate_id":17,"path":["object","pe","ImageBoundImportDescriptor"],"kind":"struct"},"24:3107:104":{"crate_id":24,"path":["syn","token","Break"],"kind":"struct"},"17:12808:5941":{"crate_id":17,"path":["object","read","SymbolIndex"],"kind":"struct"},"2:40776:3724":{"crate_id":2,"path":["core","iter","adapters","map_while","MapWhile"],"kind":"struct"},"2:13109:119":{"crate_id":2,"path":["core","str","lossy","Debug"],"kind":"struct"},"16:5415:6851":{"crate_id":16,"path":["gimli","read","util","sealed","CapacityFull"],"kind":"struct"},"16:2548:6776":{"crate_id":16,"path":["gimli","common","LocationListsOffset"],"kind":"struct"},"5:935:5459":{"crate_id":5,"path":["alloc","collections","binary_heap","Hole"],"kind":"struct"},"2:43050:3777":{"crate_id":2,"path":["core","fmt","Arguments"],"kind":"struct"},"9:357:22582":{"crate_id":9,"path":["miniz_oxide","inflate","TINFLStatus"],"kind":"enum"},"6:6519:7924":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_pktinfo"],"kind":"struct"},"5:1536:9128":{"crate_id":5,"path":["alloc","collections","btree","map","Values"],"kind":"struct"},"1:9405:234":{"crate_id":1,"path":["std","sync","rwlock","RwLockReadGuard"],"kind":"struct"},"2:2891:144":{"crate_id":2,"path":["core","convert","From"],"kind":"trait"},"2:22758:9175":{"crate_id":2,"path":["core","num","bignum","tests","Big8x3"],"kind":"struct"},"6:586:7299":{"crate_id":6,"path":["libc","unix","protoent"],"kind":"struct"},"16:860:37149":{"crate_id":16,"path":["gimli","read","endian_slice","DebugBytes"],"kind":"struct"},"10:36:7150":{"crate_id":10,"path":["adler","algo","U32X4"],"kind":"struct"},"24:5386:3589":{"crate_id":24,"path":["syn","expr","ExprWhile"],"kind":"struct"},"2:40598:10846":{"crate_id":2,"path":["core","ffi","VaList"],"kind":"struct"},"2:39534:9189":{"crate_id":2,"path":["core","ops","index_range","IndexRange"],"kind":"struct"},"1:9388:187":{"crate_id":1,"path":["std","sync","mutex","MutexGuard"],"kind":"struct"},"2:44175:9197":{"crate_id":2,"path":["core","str","iter","EscapeDebug"],"kind":"struct"},"24:1031:5666":{"crate_id":24,"path":["syn","ext","private","PeekFn"],"kind":"struct"},"6:4979:7560":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_constant_effect"],"kind":"struct"},"1:2479:10856":{"crate_id":1,"path":["std","fs","canonicalize"],"kind":"function"},"17:3473:23781":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbolIterator"],"kind":"struct"},"5:1351:10792":{"crate_id":5,"path":["alloc","collections","btree","map","entry","OccupiedEntry"],"kind":"struct"},"2:43822:8565":{"crate_id":2,"path":["core","str","error","Utf8Error"],"kind":"struct"},"18:706:8925":{"crate_id":18,"path":["memchr","memmem","Searcher"],"kind":"struct"},"2:10304:119":{"crate_id":2,"path":["core","fmt","Debug"],"kind":"trait"},"17:513:23659":{"crate_id":17,"path":["object","read","any","Comdat"],"kind":"struct"},"1:3056:226":{"crate_id":1,"path":["std","io","error","Result"],"kind":"type_alias"},"6:8294:8269":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_rwlock_t"],"kind":"struct"},"2:21836:11074":{"crate_id":2,"path":["core","core_simd","masks","MaskElement"],"kind":"trait"},"16:7306:37151":{"crate_id":16,"path":["gimli","read","op","OperationEvaluationResult"],"kind":"enum"},"2:38237:5680":{"crate_id":2,"path":["core","ops","bit","BitXorAssign"],"kind":"trait"},"17:12318:5909":{"crate_id":17,"path":["object","read","pe","export","Export"],"kind":"struct"},"16:2323:22720":{"crate_id":16,"path":["gimli","common","Vendor"],"kind":"enum"},"17:11189:5848":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbol"],"kind":"struct"},"17:15456:6532":{"crate_id":17,"path":["object","pe","ImagePrologueDynamicRelocationHeader"],"kind":"struct"},"2:44644:130":{"crate_id":2,"path":["core","time","Duration"],"kind":"struct"},"17:13568:6063":{"crate_id":17,"path":["object","elf","NoteHeader32"],"kind":"struct"},"5:5462:16213":{"crate_id":5,"path":["alloc","slice","Concat"],"kind":"trait"},"1:9197:8799":{"crate_id":1,"path":["std","sync","mpsc","RecvError"],"kind":"struct"},"21:591:3819":{"crate_id":21,"path":["proc_macro","diagnostic","MultiSpan"],"kind":"trait"},"2:46039:8599":{"crate_id":2,"path":["core","core_arch","simd","f64x1"],"kind":"struct"},"2:43711:16224":{"crate_id":2,"path":["core","slice","iter","ChunksExactMut"],"kind":"struct"},"1:6857:5548":{"crate_id":1,"path":["std","sync","reentrant_lock","ReentrantLockGuard"],"kind":"struct"},"17:15197:6468":{"crate_id":17,"path":["object","pe","ImageRelocation"],"kind":"struct"},"16:5367:23580":{"crate_id":16,"path":["gimli","endianity","RunTimeEndian"],"kind":"enum"},"16:2418:6770":{"crate_id":16,"path":["gimli","common","DebugAddrBase"],"kind":"struct"},"16:7823:23601":{"crate_id":16,"path":["gimli","read","unit","UnitType"],"kind":"enum"},"2:40409:9197":{"crate_id":2,"path":["core","char","EscapeDebug"],"kind":"struct"},"24:5981:3613":{"crate_id":24,"path":["syn","ty","BareVariadic"],"kind":"struct"},"1:3583:8774":{"crate_id":1,"path":["std","io","Read"],"kind":"trait"},"2:43029:137":{"crate_id":2,"path":["core","fmt","Error"],"kind":"struct"},"1:8601:9300":{"crate_id":1,"path":["std","os","unix","net","ancillary","SocketCred"],"kind":"struct"},"1:5766:8053":{"crate_id":1,"path":["std","process","exit"],"kind":"function"},"16:7656:23599":{"crate_id":16,"path":["gimli","read","rnglists","RawRngListEntry"],"kind":"enum"},"5:835:101":{"crate_id":5,"path":["alloc","collections","binary_heap","BinaryHeap"],"kind":"struct"},"17:12107:5852":{"crate_id":17,"path":["object","read","macho","symbol","SymbolTable"],"kind":"struct"},"6:5489:7765":{"crate_id":6,"path":["libc","unix","linux_like","linux","tls12_crypto_info_aes_gcm_128"],"kind":"struct"},"2:47078:8693":{"crate_id":2,"path":["core","core_arch","x86","__m128i"],"kind":"struct"},"6:7330:8116":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","flock"],"kind":"struct"},"24:0:2041":{"crate_id":24,"path":["syn"],"kind":"module"},"6:5536:7778":{"crate_id":6,"path":["libc","unix","linux_like","linux","dirent"],"kind":"struct"},"1:12356:1844":{"crate_id":1,"path":["std","u64"],"kind":"primitive"},"24:644:137":{"crate_id":24,"path":["syn","error","Error"],"kind":"struct"},"1:3649:28280":{"crate_id":1,"path":["std","io","Write","write_fmt","Adapter"],"kind":"struct"},"2:3210:5134":{"crate_id":2,"path":["core","ops","async_function","AsyncFn"],"kind":"trait"},"5:3035:2446":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Owned"],"kind":"enum"},"1:1614:5233":{"crate_id":1,"path":["std","collections","hash","set","ExtractIf"],"kind":"struct"},"17:10982:23686":{"crate_id":17,"path":["object","read","archive","Members"],"kind":"enum"},"1:3601:10866":{"crate_id":1,"path":["std","io","IoSliceMut"],"kind":"struct"},"20:723:2270":{"crate_id":20,"path":["proc_macro2","fallback","Span"],"kind":"struct"},"17:11026:23688":{"crate_id":17,"path":["object","read","archive","MemberHeader"],"kind":"enum"},"6:4787:7448":{"crate_id":6,"path":["libc","unix","linux_like","linux","glob_t"],"kind":"struct"},"16:5960:9000":{"crate_id":16,"path":["gimli","read","cfi","PartialFrameDescriptionEntry"],"kind":"struct"},"2:5209:35258":{"crate_id":2,"path":["core","ffi","sealed_trait","VaArgSafe"],"kind":"trait"},"16:5756:23581":{"crate_id":16,"path":["gimli","read","cfi","EhHdrTableIter"],"kind":"struct"},"16:5831:8986":{"crate_id":16,"path":["gimli","read","cfi","SectionBaseAddresses"],"kind":"struct"},"17:11443:5857":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbolTable"],"kind":"struct"},"21:242:37262":{"crate_id":21,"path":["proc_macro","bridge","handle","OwnedStore"],"kind":"struct"},"1:3288:32034":{"crate_id":1,"path":["std","io","stdio","StdinRaw"],"kind":"struct"},"17:13211:5989":{"crate_id":17,"path":["object","elf","FileHeader64"],"kind":"struct"},"16:6026:9008":{"crate_id":16,"path":["gimli","read","cfi","UnwindContext"],"kind":"struct"},"17:10137:23641":{"crate_id":17,"path":["object","endian","Endianness"],"kind":"enum"},"6:4824:7475":{"crate_id":6,"path":["libc","unix","linux_like","linux","dqblk"],"kind":"struct"},"21:2643:2270":{"crate_id":21,"path":["proc_macro","Span"],"kind":"struct"},"2:8673:149":{"crate_id":2,"path":["core","iter","traits","marker","FusedIterator"],"kind":"trait"},"24:5325:3560":{"crate_id":24,"path":["syn","expr","ExprMethodCall"],"kind":"struct"},"16:5400:5826":{"crate_id":16,"path":["gimli","endianity","BigEndian"],"kind":"struct"},"24:5281:3557":{"crate_id":24,"path":["syn","expr","ExprField"],"kind":"struct"},"16:4882:6841":{"crate_id":16,"path":["gimli","constants","DwDsc"],"kind":"struct"},"2:44294:9260":{"crate_id":2,"path":["core","str","pattern","MultiCharEqSearcher"],"kind":"struct"},"6:8197:8258":{"crate_id":6,"path":["libc","unix","linux_like","linux","arch","generic","termios2"],"kind":"struct"},"2:41924:9299":{"crate_id":2,"path":["core","net","socket_addr","SocketAddr"],"kind":"enum"},"17:11166:5846":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbolTable"],"kind":"struct"},"1:4812:8147":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt","st_ctime"],"kind":"function"},"1:4685:10977":{"crate_id":1,"path":["std","os","unix","process","ExitStatusExt"],"kind":"trait"},"16:7006:23592":{"crate_id":16,"path":["gimli","read","loclists","RawLocListIter"],"kind":"struct"},"9:424:22569":{"crate_id":9,"path":["miniz_oxide","MZStatus"],"kind":"enum"},"2:39712:8400":{"crate_id":2,"path":["core","array","TryFromSliceError"],"kind":"struct"},"24:4407:3922":{"crate_id":24,"path":["syn","token","DotDotDot"],"kind":"struct"},"2:11157:9164":{"crate_id":2,"path":["core","slice","iter","Split"],"kind":"struct"},"1:8493:10868":{"crate_id":1,"path":["std","io","SeekFrom"],"kind":"enum"},"1:9319:10422":{"crate_id":1,"path":["std","sync","mpmc","list","ListToken"],"kind":"struct"},"0:0:2063":{"crate_id":0,"path":["serde_derive"],"kind":"module"},"16:6353:6861":{"crate_id":16,"path":["gimli","read","endian_slice","EndianSlice"],"kind":"struct"},"2:11918:16222":{"crate_id":2,"path":["core","slice","iter","ChunkBy"],"kind":"struct"},"16:2508:6774":{"crate_id":16,"path":["gimli","common","DebugLineOffset"],"kind":"struct"},"16:6574:6812":{"crate_id":16,"path":["gimli","read","index","DebugTuIndex"],"kind":"struct"},"1:9180:8798":{"crate_id":1,"path":["std","sync","mpsc","SendError"],"kind":"struct"},"17:11524:23768":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdatSectionIterator"],"kind":"struct"},"16:5742:8977":{"crate_id":16,"path":["gimli","read","cfi","ParsedEhFrameHdr"],"kind":"struct"},"17:10524:23668":{"crate_id":17,"path":["object","read","any","SegmentIterator"],"kind":"struct"},"2:43265:9228":{"crate_id":2,"path":["core","hash","sip","Sip24Rounds"],"kind":"struct"},"17:11467:5859":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbol"],"kind":"struct"},"2:9343:4389":{"crate_id":2,"path":["core","panic","unwind_safe","AssertUnwindSafe"],"kind":"struct"},"1:3291:28770":{"crate_id":1,"path":["std","io","stdio","StdoutRaw"],"kind":"struct"},"20:927:2597":{"crate_id":20,"path":["proc_macro2","Punct"],"kind":"struct"},"17:16138:6726":{"crate_id":17,"path":["object","xcoff","CsectAux32"],"kind":"struct"},"17:13252:5992":{"crate_id":17,"path":["object","elf","SectionHeader32"],"kind":"struct"},"2:46505:8644":{"crate_id":2,"path":["core","core_arch","simd","i16x16"],"kind":"struct"},"17:14051:6155":{"crate_id":17,"path":["object","macho","PreboundDylibCommand"],"kind":"struct"},"16:7144:23595":{"crate_id":16,"path":["gimli","read","op","DieReference"],"kind":"enum"},"2:45995:8596":{"crate_id":2,"path":["core","core_arch","simd","i32x2"],"kind":"struct"},"17:16212:6746":{"crate_id":17,"path":["object","xcoff","BlockAux64"],"kind":"struct"},"2:43793:9172":{"crate_id":2,"path":["core","slice","iter","RChunksExact"],"kind":"struct"},"23:407:4604":{"crate_id":23,"path":["quote","__private","RepInterp"],"kind":"struct"},"17:15720:6623":{"crate_id":17,"path":["object","pe","ImageDebugDirectory"],"kind":"struct"},"17:16105:6719":{"crate_id":17,"path":["object","xcoff","FileAux32"],"kind":"struct"},"5:6429:11167":{"crate_id":5,"path":["alloc","task","LocalWake"],"kind":"trait"},"2:42284:86":{"crate_id":2,"path":["core","sync","atomic","AtomicI16"],"kind":"struct"},"2:4498:3808":{"crate_id":2,"path":["core","cell","lazy","LazyCell"],"kind":"struct"},"24:5473:2829":{"crate_id":24,"path":["syn","generics","TypeParam"],"kind":"struct"},"1:11006:11020":{"crate_id":1,"path":["std","sys","pal","unix","process","process_common","Stdio"],"kind":"enum"},"24:4682:3941":{"crate_id":24,"path":["syn","token","Plus"],"kind":"struct"},"17:11051:23707":{"crate_id":17,"path":["object","read","coff","file","CoffCommon"],"kind":"struct"},"17:10622:37198":{"crate_id":17,"path":["object","read","any","SectionIteratorInternal"],"kind":"enum"},"2:6900:5258":{"crate_id":2,"path":["core","iter","adapters","map_windows","Buffer"],"kind":"struct"},"16:6456:23589":{"crate_id":16,"path":["gimli","read","abbrev","Attributes"],"kind":"enum"},"16:4913:6842":{"crate_id":16,"path":["gimli","constants","DwIdx"],"kind":"struct"},"24:4431:134":{"crate_id":24,"path":["syn","token","Eq"],"kind":"struct"},"24:3141:116":{"crate_id":24,"path":["syn","token","Continue"],"kind":"struct"},"2:43235:157":{"crate_id":2,"path":["core","hash","sip","Hasher"],"kind":"struct"},"24:3005:3878":{"crate_id":24,"path":["syn","token","As"],"kind":"struct"},"1:12348:908":{"crate_id":1,"path":["std","i8"],"kind":"primitive"},"16:6342:37157":{"crate_id":16,"path":["gimli","read","dwarf","RangeIterInner"],"kind":"enum"},"2:44373:9264":{"crate_id":2,"path":["core","str","pattern","CharSliceSearcher"],"kind":"struct"},"2:9777:91":{"crate_id":2,"path":["core","sync","atomic","AtomicPtr"],"kind":"struct"},"2:40808:3740":{"crate_id":2,"path":["core","iter","adapters","scan","Scan"],"kind":"struct"},"6:8265:8262":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_barrierattr_t"],"kind":"struct"},"24:1373:8876":{"crate_id":24,"path":["syn","lit","LitFloatRepr"],"kind":"struct"},"5:4158:3639":{"crate_id":5,"path":["alloc","collections","vec_deque","iter_mut","IterMut"],"kind":"struct"},"2:32186:2968":{"crate_id":2,"path":["core","error","tags","Value"],"kind":"struct"},"2:44618:9286":{"crate_id":2,"path":["core","str","BytesIsNotEmpty"],"kind":"struct"},"2:44606:9283":{"crate_id":2,"path":["core","str","IsWhitespace"],"kind":"struct"},"6:473:7234":{"crate_id":6,"path":["libc","unix","utimbuf"],"kind":"struct"},"6:5236:7644":{"crate_id":6,"path":["libc","unix","linux_like","linux","inotify_event"],"kind":"struct"},"6:5466:7757":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_prinfo"],"kind":"struct"},"1:10505:29353":{"crate_id":1,"path":["std","sys","pal","unix","process","process_common","Argv"],"kind":"struct"},"1:4130:10943":{"crate_id":1,"path":["std","os","unix","fs","FileExt"],"kind":"trait"},"24:3651:3903":{"crate_id":24,"path":["syn","token","Super"],"kind":"struct"},"24:5960:3623":{"crate_id":24,"path":["syn","ty","TypeReference"],"kind":"struct"},"17:12792:5790":{"crate_id":17,"path":["object","read","SectionIndex"],"kind":"struct"},"2:21659:11077":{"crate_id":2,"path":["core","core_simd","cast","SimdCast"],"kind":"trait"},"16:8155:9116":{"crate_id":16,"path":["gimli","read","unit","EntriesTree"],"kind":"struct"},"24:3498:3898":{"crate_id":24,"path":["syn","token","Override"],"kind":"struct"},"2:5015:16274":{"crate_id":2,"path":["core","char","REPLACEMENT_CHARACTER"],"kind":"constant"},"2:10315:3786":{"crate_id":2,"path":["core","fmt","LowerHex"],"kind":"trait"},"2:10760:5514":{"crate_id":2,"path":["core","slice","sort","merge_sort","BufGuard"],"kind":"struct"},"24:4757:3946":{"crate_id":24,"path":["syn","token","Semi"],"kind":"struct"},"1:666:10776":{"crate_id":1,"path":["std","backtrace","BacktraceFrame"],"kind":"struct"},"6:5653:7831":{"crate_id":6,"path":["libc","unix","linux_like","linux","sched_attr"],"kind":"struct"},"2:3374:2754":{"crate_id":2,"path":["core","ops","drop","Drop"],"kind":"trait"},"24:1631:37393":{"crate_id":24,"path":["syn","lookahead","TokenMarker"],"kind":"enum"},"21:2334:2890":{"crate_id":21,"path":["proc_macro","bridge","Literal"],"kind":"struct"},"24:5427:63":{"crate_id":24,"path":["syn","expr","parsing","kw","raw"],"kind":"struct"},"20:904:2191":{"crate_id":20,"path":["proc_macro2","Group"],"kind":"struct"},"6:5112:7607":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Sym"],"kind":"struct"},"1:5506:128":{"crate_id":1,"path":["std","path","Display"],"kind":"struct"},"1:367:5029":{"crate_id":1,"path":["std","thread","scoped","Scope"],"kind":"struct"},"17:11595:5860":{"crate_id":17,"path":["object","read","elf","version","VersionIndex"],"kind":"struct"},"11:430:37102":{"crate_id":11,"path":["hashbrown","raw","RawIterHash"],"kind":"struct"},"17:13412:6024":{"crate_id":17,"path":["object","elf","Rel64"],"kind":"struct"},"1:957:10788":{"crate_id":1,"path":["std","collections","hash","map","RawEntryMut"],"kind":"enum"},"2:39486:5138":{"crate_id":2,"path":["core","ops","coroutine","CoroutineState"],"kind":"enum"},"24:5955:3622":{"crate_id":24,"path":["syn","ty","TypePtr"],"kind":"struct"},"2:22914:33886":{"crate_id":2,"path":["core","num","flt2dec","decoder","FullDecoded"],"kind":"enum"},"16:4743:6836":{"crate_id":16,"path":["gimli","constants","DwAddr"],"kind":"struct"},"16:7397:37146":{"crate_id":16,"path":["gimli","read","op","EvaluationWaiting"],"kind":"enum"},"1:10597:11022":{"crate_id":1,"path":["std","sys","pal","unix","process","process_common","CommandArgs"],"kind":"struct"},"2:3213:5135":{"crate_id":2,"path":["core","ops","async_function","AsyncFnMut"],"kind":"trait"},"16:6927:6909":{"crate_id":16,"path":["gimli","read","line","FileEntryFormat"],"kind":"struct"},"2:42946:3775":{"crate_id":2,"path":["core","fmt","rt","Alignment"],"kind":"enum"},"2:40517:106":{"crate_id":2,"path":["core","ffi","c_str","CStr"],"kind":"struct"},"16:7497:6959":{"crate_id":16,"path":["gimli","read","op","OperationIter"],"kind":"struct"},"2:33171:5675":{"crate_id":2,"path":["core","ops","arith","Rem"],"kind":"trait"},"2:3593:16263":{"crate_id":2,"path":["core","ops","try_trait","Residual"],"kind":"trait"},"17:14912:6409":{"crate_id":17,"path":["object","pe","ImageRomOptionalHeader"],"kind":"struct"},"5:1320:9098":{"crate_id":5,"path":["alloc","collections","btree","map","entry","Entry"],"kind":"enum"},"2:42182:196":{"crate_id":2,"path":["core","sync","atomic","Ordering"],"kind":"enum"},"2:23153:8322":{"crate_id":2,"path":["core","num","nonzero","private","NonZeroI32Inner"],"kind":"struct"},"17:14752:6285":{"crate_id":17,"path":["object","pe","ImageOs2Header"],"kind":"struct"},"2:33510:5676":{"crate_id":2,"path":["core","ops","arith","SubAssign"],"kind":"trait"},"6:6768:8038":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_desc"],"kind":"struct"},"17:14529:6247":{"crate_id":17,"path":["object","macho","NoteCommand"],"kind":"struct"},"1:12285:10038":{"crate_id":1,"path":["std","backtrace_rs","symbolize","gimli","parse_running_mmaps","MapsEntry"],"kind":"struct"},"2:46393:8640":{"crate_id":2,"path":["core","core_arch","simd","u16x16"],"kind":"struct"},"17:11853:23813":{"crate_id":17,"path":["object","read","macho","file","MachOComdat"],"kind":"struct"},"17:12597:5922":{"crate_id":17,"path":["object","read","xcoff","symbol","XcoffSymbolTable"],"kind":"struct"},"17:14311:6209":{"crate_id":17,"path":["object","macho","LinkeditDataCommand"],"kind":"struct"},"17:14402:6225":{"crate_id":17,"path":["object","macho","BuildToolVersion"],"kind":"struct"},"17:13797:6118":{"crate_id":17,"path":["object","macho","MachHeader32"],"kind":"struct"},"24:1086:37400":{"crate_id":24,"path":["syn","generics","TypeParamsMut"],"kind":"struct"},"17:11392:23725":{"crate_id":17,"path":["object","read","elf","section","ElfSectionIterator"],"kind":"struct"},"1:1619:9129":{"crate_id":1,"path":["std","collections","hash","set","Intersection"],"kind":"struct"},"17:15655:6604":{"crate_id":17,"path":["object","pe","ImageEnclaveConfig32"],"kind":"struct"},"21:0:1344":{"crate_id":21,"path":["proc_macro"],"kind":"module"},"17:11574:9132":{"crate_id":17,"path":["object","read","elf","hash","HashTable"],"kind":"struct"},"17:10877:23673":{"crate_id":17,"path":["object","read","any","DynamicRelocationIterator"],"kind":"struct"},"11:351:37108":{"crate_id":11,"path":["hashbrown","raw","FullBucketsIndices"],"kind":"struct"},"16:6976:6914":{"crate_id":16,"path":["gimli","read","loclists","LocationLists"],"kind":"struct"},"24:4641:3938":{"crate_id":24,"path":["syn","token","PathSep"],"kind":"struct"},"5:2216:9134":{"crate_id":5,"path":["alloc","collections","btree","merge_iter","MergeIterInner"],"kind":"struct"},"9:482:22566":{"crate_id":9,"path":["miniz_oxide","DataFormat"],"kind":"enum"},"1:4152:10945":{"crate_id":1,"path":["std","os","unix","fs","OpenOptionsExt"],"kind":"trait"},"17:15249:6477":{"crate_id":17,"path":["object","pe","ImageExportDirectory"],"kind":"struct"},"1:11909:28933":{"crate_id":1,"path":["std","panicking","panic_count","MustAbort"],"kind":"enum"},"1:4663:10976":{"crate_id":1,"path":["std","os","unix","process","CommandExt"],"kind":"trait"},"24:1939:2043":{"crate_id":24,"path":["syn","parse_macro_input"],"kind":"macro"},"2:47061:8692":{"crate_id":2,"path":["core","core_arch","simd","f64x8"],"kind":"struct"},"2:43218:9225":{"crate_id":2,"path":["core","hash","sip","SipHasher24"],"kind":"struct"},"17:15222:6473":{"crate_id":17,"path":["object","pe","ImageArchiveMemberHeader"],"kind":"struct"},"20:883:2270":{"crate_id":20,"path":["proc_macro2","Span"],"kind":"struct"},"16:2728:6784":{"crate_id":16,"path":["gimli","common","DebugRngListsIndex"],"kind":"struct"},"5:3280:9131":{"crate_id":5,"path":["alloc","collections","btree","set","SymmetricDifference"],"kind":"struct"},"17:13235:2203":{"crate_id":17,"path":["object","elf","Ident"],"kind":"struct"},"24:1299:2280":{"crate_id":24,"path":["syn","lifetime","Lifetime"],"kind":"struct"},"2:47098:8695":{"crate_id":2,"path":["core","core_arch","x86","__m128d"],"kind":"struct"},"17:15390:6517":{"crate_id":17,"path":["object","pe","ImageResourceDataEntry"],"kind":"struct"},"2:43469:9230":{"crate_id":2,"path":["core","slice","ascii","EscapeAscii"],"kind":"struct"},"17:10018:23644":{"crate_id":17,"path":["object","common","FileFlags"],"kind":"enum"},"1:951:10787":{"crate_id":1,"path":["std","collections","hash","map","RawEntryBuilderMut"],"kind":"struct"},"1:9113:199":{"crate_id":1,"path":["std","process","Output"],"kind":"struct"},"1:3894:10924":{"crate_id":1,"path":["std","net","tcp","TcpStream"],"kind":"struct"},"20:781:27931":{"crate_id":20,"path":["proc_macro2","extra","DelimSpanEnum"],"kind":"enum"},"17:12043:23779":{"crate_id":17,"path":["object","read","macho","segment","MachOSegment"],"kind":"struct"},"16:6466:6868":{"crate_id":16,"path":["gimli","read","abbrev","AttributeSpecification"],"kind":"struct"},"2:22269:11075":{"crate_id":2,"path":["core","core_simd","vector","SimdElement"],"kind":"trait"},"1:669:10777":{"crate_id":1,"path":["std","backtrace","BacktraceSymbol"],"kind":"struct"},"6:6609:7980":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","regex_t"],"kind":"struct"},"17:13509:6040":{"crate_id":17,"path":["object","elf","Verdef"],"kind":"struct"},"2:5247:10911":{"crate_id":2,"path":["core","io","borrowed_buf","BorrowedBuf"],"kind":"struct"},"11:364:5444":{"crate_id":11,"path":["hashbrown","raw","RawIntoIter"],"kind":"struct"},"17:10534:37197":{"crate_id":17,"path":["object","read","any","SegmentIteratorInternal"],"kind":"enum"},"24:4774:3947":{"crate_id":24,"path":["syn","token","Shl"],"kind":"struct"},"5:7411:5462":{"crate_id":5,"path":["alloc","collections","binary_heap","DrainSorted"],"kind":"struct"},"24:5847:2186":{"crate_id":24,"path":["syn","ty","Type"],"kind":"enum"},"17:10419:5834":{"crate_id":17,"path":["object","read","util","ByteString"],"kind":"struct"},"11:700:3634":{"crate_id":11,"path":["hashbrown","map","IntoIter"],"kind":"struct"},"16:3475:6818":{"crate_id":16,"path":["gimli","arch","RiscV"],"kind":"struct"},"1:943:10414":{"crate_id":1,"path":["std","collections","hash","map","IntoKeys"],"kind":"struct"},"23:281:2280":{"crate_id":23,"path":["quote","__private","push_lifetime_spanned","Lifetime"],"kind":"struct"},"1:11207:8796":{"crate_id":1,"path":["std","sys","pal","unix","process","process_inner","ExitStatusError"],"kind":"struct"},"2:22996:9184":{"crate_id":2,"path":["core","num","error","ParseIntError"],"kind":"struct"},"2:11200:9166":{"crate_id":2,"path":["core","slice","iter","SplitInclusive"],"kind":"struct"},"2:34202:5661":{"crate_id":2,"path":["core","ops","bit","BitXor"],"kind":"trait"},"24:1800:3646":{"crate_id":24,"path":["syn","parse","Parse"],"kind":"trait"},"6:6491:7913":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","mallinfo"],"kind":"struct"},"17:13292:6003":{"crate_id":17,"path":["object","elf","CompressionHeader32"],"kind":"struct"},"5:304:2251":{"crate_id":5,"path":["alloc","boxed","Box"],"kind":"struct"},"2:33711:5679":{"crate_id":2,"path":["core","ops","arith","RemAssign"],"kind":"trait"},"6:1517:7316":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_in"],"kind":"struct"},"21:2583:252":{"crate_id":21,"path":["proc_macro","TokenStream"],"kind":"struct"},"17:3264:23778":{"crate_id":17,"path":["object","read","macho","section","MachOSectionIterator"],"kind":"struct"},"17:11341:23727":{"crate_id":17,"path":["object","read","elf","segment","ElfSegmentIterator"],"kind":"struct"},"17:14516:6246":{"crate_id":17,"path":["object","macho","DataInCodeEntry"],"kind":"struct"},"17:10284:5830":{"crate_id":17,"path":["object","endian","I16Bytes"],"kind":"struct"},"24:3226:3886":{"crate_id":24,"path":["syn","token","Else"],"kind":"struct"},"2:3664:3807":{"crate_id":2,"path":["core","ops","unsize","DispatchFromDyn"],"kind":"trait"},"1:7983:10869":{"crate_id":1,"path":["std","sealed","Sealed"],"kind":"trait"},"1:3658:10867":{"crate_id":1,"path":["std","io","Seek"],"kind":"trait"},"24:3260:3887":{"crate_id":24,"path":["syn","token","Extern"],"kind":"struct"},"5:1073:5451":{"crate_id":5,"path":["alloc","collections","binary_heap","drop","DropGuard"],"kind":"struct"},"2:21608:33610":{"crate_id":2,"path":["core","core_simd","swizzle","interleave","Lo"],"kind":"struct"},"1:4808:8143":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt","st_atime"],"kind":"function"},"17:13187:5975":{"crate_id":17,"path":["object","elf","FileHeader32"],"kind":"struct"},"1:9401:5475":{"crate_id":1,"path":["std","sync","poison","Guard"],"kind":"struct"},"24:5230:3566":{"crate_id":24,"path":["syn","expr","ExprArray"],"kind":"struct"},"2:41964:8542":{"crate_id":2,"path":["core","net","socket_addr","SocketAddrV6"],"kind":"struct"},"1:10220:9218":{"crate_id":1,"path":["std","sys","pal","unix","net","Socket"],"kind":"struct"},"23:35:10869":{"crate_id":23,"path":["quote","ext","private","Sealed"],"kind":"trait"},"17:14284:6207":{"crate_id":17,"path":["object","macho","UuidCommand"],"kind":"struct"},"17:12863:5943":{"crate_id":17,"path":["object","read","SymbolMapName"],"kind":"struct"},"1:7325:5552":{"crate_id":1,"path":["std","sys","thread_local","abort_on_dtor_unwind","DtorUnwindGuard"],"kind":"struct"},"2:44614:9285":{"crate_id":2,"path":["core","str","IsNotEmpty"],"kind":"struct"},"1:4094:10942":{"crate_id":1,"path":["std","os","unix","ffi","os_str","OsStringExt"],"kind":"trait"},"17:11063:23701":{"crate_id":17,"path":["object","read","coff","file","CoffFile"],"kind":"struct"},"24:4617:3936":{"crate_id":24,"path":["syn","token","OrEq"],"kind":"struct"},"5:1555:10414":{"crate_id":5,"path":["alloc","collections","btree","map","IntoKeys"],"kind":"struct"},"24:5824:2758":{"crate_id":24,"path":["syn","path","QSelf"],"kind":"struct"},"2:21826:10869":{"crate_id":2,"path":["core","core_simd","masks","sealed","Sealed"],"kind":"trait"},"17:15778:6640":{"crate_id":17,"path":["object","pe","ImageSeparateDebugHeader"],"kind":"struct"},"2:10307:119":{"crate_id":2,"path":["core","fmt","macros","Debug"],"kind":"proc_derive"},"1:909:9128":{"crate_id":1,"path":["std","collections","hash","map","Values"],"kind":"struct"},"16:7061:6919":{"crate_id":16,"path":["gimli","read","loclists","LocationListEntry"],"kind":"struct"},"2:32276:4784":{"crate_id":2,"path":["core","marker","PhantomPinned"],"kind":"struct"},"1:5438:203":{"crate_id":1,"path":["std","path","Path"],"kind":"struct"},"2:22361:11159":{"crate_id":2,"path":["core","core_simd","simd","num","float","SimdFloat"],"kind":"trait"},"5:2245:9136":{"crate_id":5,"path":["alloc","collections","btree","navigate","LeafRange"],"kind":"struct"},"1:8053:10781":{"crate_id":1,"path":["std","backtrace","BacktraceStatus"],"kind":"enum"},"6:1653:7413":{"crate_id":6,"path":["libc","unix","linux_like","arpreq"],"kind":"struct"},"2:2733:202":{"crate_id":2,"path":["core","cmp","PartialOrd"],"kind":"trait"},"24:5754:3606":{"crate_id":24,"path":["syn","op","UnOp"],"kind":"enum"},"17:15102:6444":{"crate_id":17,"path":["object","pe","ImageSymbolEx"],"kind":"struct"},"24:4472:3926":{"crate_id":24,"path":["syn","token","Ge"],"kind":"struct"},"1:8847:9301":{"crate_id":1,"path":["std","path","Components"],"kind":"struct"},"6:5083:7605":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Ehdr"],"kind":"struct"},"17:13399:6022":{"crate_id":17,"path":["object","elf","Rela32"],"kind":"struct"},"24:5810:2586":{"crate_id":24,"path":["syn","path","AssocConst"],"kind":"struct"},"24:5529:3264":{"crate_id":24,"path":["syn","generics","WhereClause"],"kind":"struct"},"1:12355:1838":{"crate_id":1,"path":["std","u32"],"kind":"primitive"},"24:4786:3948":{"crate_id":24,"path":["syn","token","ShlEq"],"kind":"struct"},"5:7401:5235":{"crate_id":5,"path":["alloc","collections","binary_heap","Drain"],"kind":"struct"},"2:26038:267":{"crate_id":2,"path":["core","num","wrapping","Wrapping"],"kind":"struct"},"2:32307:114":{"crate_id":2,"path":["core","marker","ConstParamTy"],"kind":"trait"},"1:5089:10996":{"crate_id":1,"path":["std","os","net","linux_ext","socket","UnixSocketExt"],"kind":"trait"},"2:39584:212":{"crate_id":2,"path":["core","ops","range","RangeFrom"],"kind":"struct"},"24:4969:3539":{"crate_id":24,"path":["syn","attr","MetaNameValue"],"kind":"struct"},"1:8769:8558":{"crate_id":1,"path":["std","path","State"],"kind":"enum"},"2:41778:10919":{"crate_id":2,"path":["core","net","ip_addr","Ipv6MulticastScope"],"kind":"enum"},"6:5122:7608":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Phdr"],"kind":"struct"},"2:4804:3801":{"crate_id":2,"path":["core","cell","UnsafeCell"],"kind":"struct"},"17:12056:5897":{"crate_id":17,"path":["object","read","macho","segment","MachOSegmentInternal"],"kind":"struct"},"1:4158:10946":{"crate_id":1,"path":["std","os","unix","fs","MetadataExt"],"kind":"trait"},"6:6746:8029":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_statistics"],"kind":"struct"},"17:12300:23848":{"crate_id":17,"path":["object","read","pe","export","ExportTarget"],"kind":"enum"},"1:11620:11025":{"crate_id":1,"path":["std","sys_common","process","CommandEnvs"],"kind":"struct"},"16:5897:6854":{"crate_id":16,"path":["gimli","read","cfi","Augmentation"],"kind":"struct"},"24:53:2279":{"crate_id":24,"path":["syn","token"],"kind":"module"},"24:3634:2218":{"crate_id":24,"path":["syn","token","Struct"],"kind":"struct"},"24:5497:3591":{"crate_id":24,"path":["syn","generics","BoundLifetimes"],"kind":"struct"},"17:13606:6071":{"crate_id":17,"path":["object","elf","GnuHashHeader"],"kind":"struct"},"1:3668:10888":{"crate_id":1,"path":["std","io","BufRead"],"kind":"trait"},"2:2078:8290":{"crate_id":2,"path":["core","ptr","metadata","PtrComponents"],"kind":"struct"},"16:4424:6827":{"crate_id":16,"path":["gimli","constants","DwForm"],"kind":"struct"},"2:42717:3787":{"crate_id":2,"path":["core","fmt","num","UpperHex"],"kind":"struct"},"2:42362:87":{"crate_id":2,"path":["core","sync","atomic","AtomicI32"],"kind":"struct"},"1:10757:5017":{"crate_id":1,"path":["std","sys","pal","unix","thread","Thread"],"kind":"struct"},"2:6895:9160":{"crate_id":2,"path":["core","iter","adapters","map_windows","MapWindowsInner"],"kind":"struct"},"16:3329:6817":{"crate_id":16,"path":["gimli","arch","LoongArch"],"kind":"struct"},"1:8236:9298":{"crate_id":1,"path":["std","hash","random","DefaultHasher"],"kind":"struct"},"5:1365:10303":{"crate_id":5,"path":["alloc","collections","btree","map","entry","OccupiedError"],"kind":"struct"},"17:16259:6019":{"crate_id":17,"path":["object","xcoff","Rel32"],"kind":"struct"},"24:5307:3579":{"crate_id":24,"path":["syn","expr","ExprLet"],"kind":"struct"},"20:775:3656":{"crate_id":20,"path":["proc_macro2","extra","DelimSpan"],"kind":"struct"},"1:7880:10322":{"crate_id":1,"path":["std","backtrace_rs","symbolize","SymbolName"],"kind":"struct"},"11:2124:9098":{"crate_id":11,"path":["hashbrown","set","Entry"],"kind":"enum"},"6:1707:7437":{"crate_id":6,"path":["libc","unix","linux_like","utsname"],"kind":"struct"},"2:46295:8620":{"crate_id":2,"path":["core","core_arch","simd","m16x8"],"kind":"struct"},"5:7664:10305":{"crate_id":5,"path":["alloc","string","FromUtf16Error"],"kind":"struct"},"5:4113:5451":{"crate_id":5,"path":["alloc","collections","vec_deque","drain","drop","DropGuard"],"kind":"struct"},"1:9410:235":{"crate_id":1,"path":["std","sync","rwlock","RwLockWriteGuard"],"kind":"struct"},"21:2706:2269":{"crate_id":21,"path":["proc_macro","Spacing"],"kind":"enum"},"2:8227:3716":{"crate_id":2,"path":["core","iter","traits","collect","Extend"],"kind":"trait"},"1:11353:2574":{"crate_id":1,"path":["std","sys","os_str","bytes","Slice"],"kind":"struct"},"2:44818:207":{"crate_id":2,"path":["core","task","poll","Poll"],"kind":"enum"},"24:2601:2893":{"crate_id":24,"path":["syn","spanned","Spanned"],"kind":"trait"},"17:14788:6316":{"crate_id":17,"path":["object","pe","ImageVxdHeader"],"kind":"struct"},"2:38182:5682":{"crate_id":2,"path":["core","ops","bit","BitOrAssign"],"kind":"trait"},"17:12076:23777":{"crate_id":17,"path":["object","read","macho","section","MachOSection"],"kind":"struct"},"6:4985:7563":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_ramp_effect"],"kind":"struct"},"5:2206:5006":{"crate_id":5,"path":["alloc","collections","btree","mem","replace","PanicGuard"],"kind":"struct"},"17:1098:23697":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbolIterator"],"kind":"struct"},"5:7630:5482":{"crate_id":5,"path":["alloc","rc","UniqueRc"],"kind":"struct"},"16:5995:9002":{"crate_id":16,"path":["gimli","read","cfi","FrameDescriptionEntry"],"kind":"struct"},"1:4345:10972":{"crate_id":1,"path":["std","os","unix","net","ancillary","Messages"],"kind":"struct"},"6:5400:7715":{"crate_id":6,"path":["libc","unix","linux_like","linux","in6_ifreq"],"kind":"struct"},"18:689:8922":{"crate_id":18,"path":["memchr","memmem","FinderRev"],"kind":"struct"},"2:12894:16237":{"crate_id":2,"path":["core","str","pattern","ReverseSearcher"],"kind":"trait"},"18:623:37211":{"crate_id":18,"path":["memchr","memmem","twoway","SuffixOrdering"],"kind":"enum"},"17:15168:6460":{"crate_id":17,"path":["object","pe","ImageAuxSymbolWeak"],"kind":"struct"},"2:4730:3798":{"crate_id":2,"path":["core","cell","Ref"],"kind":"struct"},"21:2721:2203":{"crate_id":21,"path":["proc_macro","Ident"],"kind":"struct"},"2:21610:33621":{"crate_id":2,"path":["core","core_simd","swizzle","interleave","Hi"],"kind":"struct"},"2:4647:221":{"crate_id":2,"path":["core","cell","RefCell"],"kind":"struct"},"17:10399:3179":{"crate_id":17,"path":["object","read","util","Bytes"],"kind":"struct"},"24:1094:37405":{"crate_id":24,"path":["syn","generics","ConstParams"],"kind":"struct"},"1:3550:5475":{"crate_id":1,"path":["std","io","Guard"],"kind":"struct"},"11:1566:22648":{"crate_id":11,"path":["hashbrown","rustc_entry","RustcEntry"],"kind":"enum"},"2:43748:3719":{"crate_id":2,"path":["core","slice","iter","ArrayChunks"],"kind":"struct"},"17:16269:6024":{"crate_id":17,"path":["object","xcoff","Rel64"],"kind":"struct"},"5:6954:5240":{"crate_id":5,"path":["alloc","vec","in_place_drop","InPlaceDrop"],"kind":"struct"},"24:5294:3577":{"crate_id":24,"path":["syn","expr","ExprIf"],"kind":"struct"},"2:3327:5137":{"crate_id":2,"path":["core","ops","coroutine","Coroutine"],"kind":"trait"},"17:15814:6644":{"crate_id":17,"path":["object","pe","ImageArchitectureEntry"],"kind":"struct"},"5:2318:9141":{"crate_id":5,"path":["alloc","collections","btree","navigate","LazyLeafRange"],"kind":"struct"},"17:9755:23640":{"crate_id":17,"path":["object","common","AddressSize"],"kind":"enum"},"17:14066:6158":{"crate_id":17,"path":["object","macho","DylinkerCommand"],"kind":"struct"},"2:32747:5673":{"crate_id":2,"path":["core","ops","arith","Mul"],"kind":"trait"},"5:680:10304":{"crate_id":5,"path":["alloc","boxed","from","StringError"],"kind":"struct"},"20:806:37238":{"crate_id":20,"path":["proc_macro2","imp","TokenTreeIter"],"kind":"enum"},"6:4811:7465":{"crate_id":6,"path":["libc","unix","linux_like","linux","spwd"],"kind":"struct"},"2:46082:8609":{"crate_id":2,"path":["core","core_arch","simd","u16x8"],"kind":"struct"},"18:765:27921":{"crate_id":18,"path":["memchr","memmem","SearcherRevKind"],"kind":"enum"},"6:6532:7930":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_mmap_hdr"],"kind":"struct"},"1:12344:734":{"crate_id":1,"path":["std","f16"],"kind":"primitive"},"2:5289:976":{"crate_id":2,"path":["core","iter"],"kind":"module"},"2:36251:3949":{"crate_id":2,"path":["core","ops","bit","Shr"],"kind":"trait"},"17:10350:5832":{"crate_id":17,"path":["object","endian","I64Bytes"],"kind":"struct"},"2:9959:34511":{"crate_id":2,"path":["core","fmt","builders","PadAdapter"],"kind":"struct"},"11:811:5233":{"crate_id":11,"path":["hashbrown","map","ExtractIf"],"kind":"struct"},"16:4502:6829":{"crate_id":16,"path":["gimli","constants","DwLle"],"kind":"struct"},"2:32218:244":{"crate_id":2,"path":["core","marker","StructuralPartialEq"],"kind":"trait"},"16:2303:22695":{"crate_id":16,"path":["gimli","common","Format"],"kind":"enum"},"2:12574:9235":{"crate_id":2,"path":["core","str","iter","SplitInternal"],"kind":"struct"},"1:12353:1850":{"crate_id":1,"path":["std","u8"],"kind":"primitive"},"24:1029:10869":{"crate_id":24,"path":["syn","ext","private","Sealed"],"kind":"trait"},"17:15992:6698":{"crate_id":17,"path":["object","xcoff","AuxHeader64"],"kind":"struct"},"2:40455:9198":{"crate_id":2,"path":["core","char","ToLowercase"],"kind":"struct"},"17:12201:23845":{"crate_id":17,"path":["object","read","pe","file","PeComdat"],"kind":"struct"},"17:13832:6122":{"crate_id":17,"path":["object","macho","LoadCommand"],"kind":"struct"},"24:4378:3920":{"crate_id":24,"path":["syn","token","Dot"],"kind":"struct"},"20:518:3653":{"crate_id":20,"path":["proc_macro2","LexError"],"kind":"struct"},"15:0:3396":{"crate_id":15,"path":["addr2line"],"kind":"module"},"24:4670:3940":{"crate_id":24,"path":["syn","token","PercentEq"],"kind":"struct"},"24:4629:3937":{"crate_id":24,"path":["syn","token","OrOr"],"kind":"struct"},"2:44679:16417":{"crate_id":2,"path":["core","time","TryFromFloatSecsErrorKind"],"kind":"enum"},"17:16235:6751":{"crate_id":17,"path":["object","xcoff","DwarfAux32"],"kind":"struct"},"6:6650:8000":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ptrace_peeksiginfo_args"],"kind":"struct"},"6:545:7277":{"crate_id":6,"path":["libc","unix","winsize"],"kind":"struct"},"24:4361:3919":{"crate_id":24,"path":["syn","token","Dollar"],"kind":"struct"},"24:1114:3263":{"crate_id":24,"path":["syn","generics","TypeGenerics"],"kind":"struct"},"16:4718:6835":{"crate_id":16,"path":["gimli","constants","DwLang"],"kind":"struct"},"24:2263:3632":{"crate_id":24,"path":["syn","punctuated","PairsMut"],"kind":"struct"},"6:6721:8024":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_mmap_offsets_v1"],"kind":"struct"},"2:45843:8583":{"crate_id":2,"path":["core","core_arch","simd","u16x2"],"kind":"struct"},"24:2317:3634":{"crate_id":24,"path":["syn","punctuated","IntoIter"],"kind":"struct"},"16:7769:6967":{"crate_id":16,"path":["gimli","read","UnitOffset"],"kind":"struct"},"6:7446:8157":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","pthread_attr_t"],"kind":"struct"},"1:8612:10966":{"crate_id":1,"path":["std","os","unix","net","ancillary","SocketAncillary"],"kind":"struct"},"1:9716:10864":{"crate_id":1,"path":["std","sys","pal","unix","fs","ReadDir"],"kind":"struct"},"1:9107:11022":{"crate_id":1,"path":["std","process","CommandArgs"],"kind":"struct"},"24:5781:2569":{"crate_id":24,"path":["syn","path","GenericArgument"],"kind":"enum"},"2:22593:11155":{"crate_id":2,"path":["core","core_simd","simd","cmp","eq","SimdPartialEq"],"kind":"trait"},"5:3314:2240":{"crate_id":5,"path":["alloc","collections","btree","set","Union"],"kind":"struct"},"1:1607:3634":{"crate_id":1,"path":["std","collections","hash","set","IntoIter"],"kind":"struct"},"11:1007:9098":{"crate_id":11,"path":["hashbrown","map","Entry"],"kind":"enum"},"1:9464:9307":{"crate_id":1,"path":["std","time","SystemTimeError"],"kind":"struct"},"6:7516:8200":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user"],"kind":"struct"},"24:5614:3599":{"crate_id":24,"path":["syn","lit","LitByteStr"],"kind":"struct"},"16:7085:9091":{"crate_id":16,"path":["gimli","read","lookup","DebugLookup"],"kind":"struct"},"17:12278:23847":{"crate_id":17,"path":["object","read","pe","section","PeRelocationIterator"],"kind":"struct"},"1:9420:5551":{"crate_id":1,"path":["std","sync","rwlock","MappedRwLockWriteGuard"],"kind":"struct"},"2:4835:3802":{"crate_id":2,"path":["core","cell","SyncUnsafeCell"],"kind":"struct"},"17:16249:6752":{"crate_id":17,"path":["object","xcoff","DwarfAux64"],"kind":"struct"},"2:21657:10869":{"crate_id":2,"path":["core","core_simd","cast","sealed","Sealed"],"kind":"trait"},"24:5337:2471":{"crate_id":24,"path":["syn","expr","ExprPath"],"kind":"struct"},"2:44909:9291":{"crate_id":2,"path":["core","alloc","layout","LayoutError"],"kind":"struct"},"20:715:252":{"crate_id":20,"path":["proc_macro2","fallback","TokenStream"],"kind":"struct"},"2:2153:189":{"crate_id":2,"path":["core","ptr","non_null","NonNull"],"kind":"struct"},"6:6689:8009":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","sockaddr_xdp"],"kind":"struct"},"18:651:5702":{"crate_id":18,"path":["memchr","memmem","x86","sse","Forward"],"kind":"struct"},"6:5472:7760":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_authinfo"],"kind":"struct"},"16:2374:6768":{"crate_id":16,"path":["gimli","common","Register"],"kind":"struct"},"24:3719:3904":{"crate_id":24,"path":["syn","token","Typeof"],"kind":"struct"},"2:11992:5183":{"crate_id":2,"path":["core","slice","raw","from_raw_parts"],"kind":"function"},"23:11:3664":{"crate_id":23,"path":["quote","ext","TokenStreamExt"],"kind":"trait"},"6:4897:7521":{"crate_id":6,"path":["libc","unix","linux_like","linux","msginfo"],"kind":"struct"},"2:4365:34156":{"crate_id":2,"path":["core","asserting","TryCaptureWithoutDebug"],"kind":"struct"},"24:3753:3905":{"crate_id":24,"path":["syn","token","Unsafe"],"kind":"struct"},"11:1066:22645":{"crate_id":11,"path":["hashbrown","map","EntryRef"],"kind":"enum"},"2:21639:33619":{"crate_id":2,"path":["core","core_simd","swizzle","resize","Resize"],"kind":"struct"},"16:2612:6779":{"crate_id":16,"path":["gimli","common","DebugMacinfoOffset"],"kind":"struct"},"2:42598:10419":{"crate_id":2,"path":["core","sync","exclusive","Exclusive"],"kind":"struct"},"24:771:37387":{"crate_id":24,"path":["syn","expr","precedence","Precedence"],"kind":"enum"},"2:45978:8595":{"crate_id":2,"path":["core","core_arch","simd","i16x4"],"kind":"struct"},"24:3532:3900":{"crate_id":24,"path":["syn","token","Pub"],"kind":"struct"},"22:0:3522":{"crate_id":22,"path":["unicode_ident"],"kind":"module"},"2:45858:8584":{"crate_id":2,"path":["core","core_arch","simd","i8x4"],"kind":"struct"},"1:11218:28835":{"crate_id":1,"path":["std","sys","pal","unix","thread","cgroups","Cgroup"],"kind":"enum"},"24:3396:3894":{"crate_id":24,"path":["syn","token","Loop"],"kind":"struct"},"1:8807:11011":{"crate_id":1,"path":["std","path","Component"],"kind":"enum"},"1:9166:11046":{"crate_id":1,"path":["std","sync","mpsc","TryIter"],"kind":"struct"},"2:10278:143":{"crate_id":2,"path":["core","fmt","Formatter"],"kind":"struct"},"2:30631:33899":{"crate_id":2,"path":["core","ptr","alignment","AlignmentEnum"],"kind":"enum"},"17:14560:6253":{"crate_id":17,"path":["object","macho","Nlist64"],"kind":"struct"},"11:2326:10792":{"crate_id":11,"path":["hashbrown","table","OccupiedEntry"],"kind":"struct"},"24:2334:3635":{"crate_id":24,"path":["syn","punctuated","Iter"],"kind":"struct"},"1:4316:10969":{"crate_id":1,"path":["std","os","unix","net","ancillary","ScmRights"],"kind":"struct"},"2:22267:10869":{"crate_id":2,"path":["core","core_simd","vector","sealed","Sealed"],"kind":"trait"},"24:5965:3624":{"crate_id":24,"path":["syn","ty","TypeSlice"],"kind":"struct"},"2:40560:3179":{"crate_id":2,"path":["core","ffi","c_str","Bytes"],"kind":"struct"},"17:14968:6415":{"crate_id":17,"path":["object","pe","ImageNtHeaders64"],"kind":"struct"},"5:2766:8287":{"crate_id":5,"path":["alloc","collections","btree","node","Handle"],"kind":"struct"},"2:43803:16227":{"crate_id":2,"path":["core","slice","iter","RChunksExactMut"],"kind":"struct"},"5:3644:182":{"crate_id":5,"path":["alloc","collections","linked_list","LinkedList"],"kind":"struct"},"17:12557:5844":{"crate_id":17,"path":["object","read","xcoff","section","SectionTable"],"kind":"struct"},"17:403:23658":{"crate_id":17,"path":["object","read","any","Segment"],"kind":"struct"},"24:3838:3910":{"crate_id":24,"path":["syn","token","While"],"kind":"struct"},"21:2701:2597":{"crate_id":21,"path":["proc_macro","Punct"],"kind":"struct"},"24:5820:3608":{"crate_id":24,"path":["syn","path","ParenthesizedGenericArguments"],"kind":"struct"},"24:5269:3572":{"crate_id":24,"path":["syn","expr","ExprClosure"],"kind":"struct"},"2:41762:8534":{"crate_id":2,"path":["core","net","ip_addr","Ipv6Addr"],"kind":"struct"},"17:12399:8963":{"crate_id":17,"path":["object","read","pe","import","DelayLoadDescriptorIterator"],"kind":"struct"},"2:10568:9162":{"crate_id":2,"path":["core","hash","BuildHasherDefault"],"kind":"struct"},"17:14356:6218":{"crate_id":17,"path":["object","macho","EncryptionInfoCommand64"],"kind":"struct"},"1:12354:1832":{"crate_id":1,"path":["std","u16"],"kind":"primitive"},"1:4192:10947":{"crate_id":1,"path":["std","os","unix","fs","FileTypeExt"],"kind":"trait"},"2:33577:5677":{"crate_id":2,"path":["core","ops","arith","MulAssign"],"kind":"trait"},"2:44893:180":{"crate_id":2,"path":["core","alloc","layout","Layout"],"kind":"struct"},"24:5766:203":{"crate_id":24,"path":["syn","path","Path"],"kind":"struct"},"24:4868:3954":{"crate_id":24,"path":["syn","token","StarEq"],"kind":"struct"},"2:44859:8573":{"crate_id":2,"path":["core","task","wake","RawWakerVTable"],"kind":"struct"},"2:42323:93":{"crate_id":2,"path":["core","sync","atomic","AtomicU16"],"kind":"struct"},"24:3447:3895":{"crate_id":24,"path":["syn","token","Mod"],"kind":"struct"},"6:6447:7891":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","glob64_t"],"kind":"struct"},"1:6668:3700":{"crate_id":1,"path":["std","sync","once","Once"],"kind":"struct"},"6:4932:7538":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_absinfo"],"kind":"struct"},"24:4395:3921":{"crate_id":24,"path":["syn","token","DotDot"],"kind":"struct"},"17:12929:5945":{"crate_id":17,"path":["object","read","Import"],"kind":"struct"},"17:15434:6527":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation32V2"],"kind":"struct"},"16:8118:9110":{"crate_id":16,"path":["gimli","read","unit","EntriesRaw"],"kind":"struct"},"17:256:37152":{"crate_id":17,"path":["object","read","util","DebugByte"],"kind":"struct"},"1:10957:8810":{"crate_id":1,"path":["std","sys","pal","unix","fs","Mode"],"kind":"struct"},"24:3804:3908":{"crate_id":24,"path":["syn","token","Virtual"],"kind":"struct"},"1:9224:11043":{"crate_id":1,"path":["std","sync","mpsc","RecvTimeoutError"],"kind":"enum"},"16:6300:23587":{"crate_id":16,"path":["gimli","read","dwarf","DwarfPackage"],"kind":"struct"},"2:45826:8580":{"crate_id":2,"path":["core","core_arch","simd","u8x4"],"kind":"struct"},"16:6160:22694":{"crate_id":16,"path":["gimli","read","cfi","CallFrameInstruction"],"kind":"enum"},"16:4062:6825":{"crate_id":16,"path":["gimli","constants","DwTag"],"kind":"struct"},"24:5937:3616":{"crate_id":24,"path":["syn","ty","TypeGroup"],"kind":"struct"},"17:11042:23689":{"crate_id":17,"path":["object","read","archive","ArchiveMember"],"kind":"struct"},"24:2094:10719":{"crate_id":24,"path":["syn","path","printing","span","QSelfDelimiters"],"kind":"struct"},"16:8301:7017":{"crate_id":16,"path":["gimli","read","StoreOnHeap"],"kind":"struct"},"2:750:190":{"crate_id":2,"path":["core","num","nonzero","NonZero"],"kind":"struct"},"11:123:5442":{"crate_id":11,"path":["hashbrown","raw","RawTable"],"kind":"struct"},"6:8288:8268":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_mutex_t"],"kind":"struct"},"2:7926:3697":{"crate_id":2,"path":["core","iter","sources","empty","Empty"],"kind":"struct"},"6:1559:7344":{"crate_id":6,"path":["libc","unix","linux_like","fd_set"],"kind":"struct"},"5:879:5457":{"crate_id":5,"path":["alloc","collections","binary_heap","RebuildOnDrop"],"kind":"struct"},"2:22579:10869":{"crate_id":2,"path":["core","core_simd","simd","ptr","sealed","Sealed"],"kind":"trait"},"2:46164:8613":{"crate_id":2,"path":["core","core_arch","simd","i16x8"],"kind":"struct"},"6:5174:7612":{"crate_id":6,"path":["libc","unix","linux_like","linux","ucred"],"kind":"struct"},"1:11095:5562":{"crate_id":1,"path":["std","sys","pal","unix","process","process_inner","posix_spawn","PosixSpawnFileActions"],"kind":"struct"},"17:13766:6111":{"crate_id":17,"path":["object","macho","FatHeader"],"kind":"struct"},"2:42206:89":{"crate_id":2,"path":["core","sync","atomic","AtomicI8"],"kind":"struct"},"1:4332:10971":{"crate_id":1,"path":["std","os","unix","net","ancillary","AncillaryData"],"kind":"enum"},"6:5244:7648":{"crate_id":6,"path":["libc","unix","linux_like","linux","fanotify_response"],"kind":"struct"},"16:7727:6810":{"crate_id":16,"path":["gimli","read","str","DebugStr"],"kind":"struct"},"24:4484:3927":{"crate_id":24,"path":["syn","token","Gt"],"kind":"struct"},"16:4856:6840":{"crate_id":16,"path":["gimli","constants","DwOrd"],"kind":"struct"},"2:4389:109":{"crate_id":2,"path":["core","asserting","Capture"],"kind":"struct"},"2:4577:3772":{"crate_id":2,"path":["core","cell","Cell"],"kind":"struct"},"17:12900:5944":{"crate_id":17,"path":["object","read","ObjectMapEntry"],"kind":"struct"},"1:2477:10855":{"crate_id":1,"path":["std","fs","read_link"],"kind":"function"},"16:6047:23584":{"crate_id":16,"path":["gimli","read","cfi","UnwindTable"],"kind":"struct"},"24:3600:3902":{"crate_id":24,"path":["syn","token","SelfValue"],"kind":"struct"},"1:12340:1720":{"crate_id":1,"path":["std","str"],"kind":"primitive"},"2:46316:8621":{"crate_id":2,"path":["core","core_arch","simd","m32x4"],"kind":"struct"},"2:10260:3783":{"crate_id":2,"path":["core","fmt","Write"],"kind":"trait"},"24:5390:3590":{"crate_id":24,"path":["syn","expr","ExprYield"],"kind":"struct"},"6:7314:8104":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statfs"],"kind":"struct"},"5:6771:5451":{"crate_id":5,"path":["alloc","vec","into_iter","drop","DropGuard"],"kind":"struct"},"6:8282:8267":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_cond_t"],"kind":"struct"},"17:15410:6523":{"crate_id":17,"path":["object","pe","ImageDynamicRelocationTable"],"kind":"struct"},"17:15957:6668":{"crate_id":17,"path":["object","xcoff","AuxHeader32"],"kind":"struct"},"2:44308:9262":{"crate_id":2,"path":["core","str","pattern","CharArraySearcher"],"kind":"struct"},"6:5277:7667":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_tp"],"kind":"struct"},"2:22826:9176":{"crate_id":2,"path":["core","num","dec2flt","decimal","Decimal"],"kind":"struct"},"2:11350:16229":{"crate_id":2,"path":["core","slice","iter","RSplitMut"],"kind":"struct"},"24:1929:3769":{"crate_id":24,"path":["syn","parse","Nothing"],"kind":"struct"},"2:43774:9171":{"crate_id":2,"path":["core","slice","iter","RChunks"],"kind":"struct"},"2:44796:164":{"crate_id":2,"path":["core","future","into_future","IntoFuture"],"kind":"trait"},"1:0:1712":{"crate_id":1,"path":["std"],"kind":"module"},"1:5769:11021":{"crate_id":1,"path":["std","process","Termination"],"kind":"trait"},"2:41912:9221":{"crate_id":2,"path":["core","net","parser","AddrParseError"],"kind":"struct"},"2:13914:5144":{"crate_id":2,"path":["core","alloc","Allocator"],"kind":"trait"},"2:38292:5683":{"crate_id":2,"path":["core","ops","bit","ShlAssign"],"kind":"trait"},"1:6708:5547":{"crate_id":1,"path":["std","sync","once_lock","OnceLock"],"kind":"struct"},"2:12404:10309":{"crate_id":2,"path":["core","slice","GetManyMutError"],"kind":"struct"},"3:0:505":{"crate_id":3,"path":["compiler_builtins"],"kind":"module"},"24:5034:2543":{"crate_id":24,"path":["syn","expr","Expr"],"kind":"enum"},"17:14341:6214":{"crate_id":17,"path":["object","macho","EncryptionInfoCommand32"],"kind":"struct"},"6:5546:7784":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_alg"],"kind":"struct"},"2:46887:8686":{"crate_id":2,"path":["core","core_arch","simd","u16x32"],"kind":"struct"},"1:11416:7208":{"crate_id":1,"path":["std","sys","os_str","bytes","Buf"],"kind":"struct"},"17:14986:6420":{"crate_id":17,"path":["object","pe","ImageRomHeaders"],"kind":"struct"},"16:6849:9080":{"crate_id":16,"path":["gimli","read","line","IncompleteLineProgram"],"kind":"struct"},"17:15023:6427":{"crate_id":17,"path":["object","pe","AnonObjectHeaderV2"],"kind":"struct"},"1:2489:10861":{"crate_id":1,"path":["std","fs","read_dir"],"kind":"function"},"1:9738:127":{"crate_id":1,"path":["std","sys","pal","unix","fs","DirBuilder"],"kind":"struct"},"2:46103:8610":{"crate_id":2,"path":["core","core_arch","simd","u32x4"],"kind":"struct"},"20:843:2890":{"crate_id":20,"path":["proc_macro2","imp","Literal"],"kind":"enum"},"6:4891:7518":{"crate_id":6,"path":["libc","unix","linux_like","linux","if_nameindex"],"kind":"struct"},"16:5075:6847":{"crate_id":16,"path":["gimli","constants","DwMacro"],"kind":"struct"},"17:11773:5927":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCache"],"kind":"struct"},"16:6802:9067":{"crate_id":16,"path":["gimli","read","line","LineSequence"],"kind":"struct"},"1:2629:10900":{"crate_id":1,"path":["std","io","buffered","bufreader","BufReader"],"kind":"struct"},"6:6524:7925":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_mmap_req"],"kind":"struct"},"6:7584:8234":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user_fpregs_struct"],"kind":"struct"},"1:865:3635":{"crate_id":1,"path":["std","collections","hash","map","Iter"],"kind":"struct"},"2:44598:9281":{"crate_id":2,"path":["core","str","CharEscapeUnicode"],"kind":"struct"},"2:40746:3736":{"crate_id":2,"path":["core","iter","adapters","inspect","Inspect"],"kind":"struct"},"9:392:22568":{"crate_id":9,"path":["miniz_oxide","MZFlush"],"kind":"enum"},"17:14876:6379":{"crate_id":17,"path":["object","pe","ImageOptionalHeader32"],"kind":"struct"},"1:10950:139":{"crate_id":1,"path":["std","sys","pal","unix","fs","FileType"],"kind":"struct"},"5:4477:5475":{"crate_id":5,"path":["alloc","collections","vec_deque","write_iter_wrapping","Guard"],"kind":"struct"},"11:742:10415":{"crate_id":11,"path":["hashbrown","map","IntoValues"],"kind":"struct"},"23:78:2272":{"crate_id":23,"path":["quote","to_tokens","ToTokens"],"kind":"trait"},"17:2203:23723":{"crate_id":17,"path":["object","read","elf","relocation","ElfDynamicRelocationIterator"],"kind":"struct"},"6:5361:7694":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlmsghdr"],"kind":"struct"},"11:2151:10793":{"crate_id":11,"path":["hashbrown","set","VacantEntry"],"kind":"struct"},"1:1603:3635":{"crate_id":1,"path":["std","collections","hash","set","Iter"],"kind":"struct"},"17:15092:6443":{"crate_id":17,"path":["object","pe","ImageSymbolBytes"],"kind":"struct"},"2:43226:9226":{"crate_id":2,"path":["core","hash","sip","SipHasher"],"kind":"struct"},"1:11261:8813":{"crate_id":1,"path":["std","sys","pal","unix","time","Timespec"],"kind":"struct"},"16:2478:6773":{"crate_id":16,"path":["gimli","common","DebugInfoOffset"],"kind":"struct"},"24:3617:2938":{"crate_id":24,"path":["syn","token","Static"],"kind":"struct"},"17:9807:23648":{"crate_id":17,"path":["object","common","SectionKind"],"kind":"enum"},"5:6562:5235":{"crate_id":5,"path":["alloc","vec","drain","Drain"],"kind":"struct"},"11:2403:3639":{"crate_id":11,"path":["hashbrown","table","IterMut"],"kind":"struct"},"18:521:27924":{"crate_id":18,"path":["memchr","memmem","prefilter","Prefilter"],"kind":"enum"},"2:40676:3722":{"crate_id":2,"path":["core","iter","adapters","copied","Copied"],"kind":"struct"},"24:89:2197":{"crate_id":24,"path":["syn","token","Token"],"kind":"trait"},"1:5103:10997":{"crate_id":1,"path":["std","os","net","linux_ext","tcp","TcpStreamExt"],"kind":"trait"},"2:42020:3639":{"crate_id":2,"path":["core","option","IterMut"],"kind":"struct"},"24:5290:3576":{"crate_id":24,"path":["syn","expr","ExprGroup"],"kind":"struct"},"20:815:2270":{"crate_id":20,"path":["proc_macro2","imp","Span"],"kind":"enum"},"17:15273:6485":{"crate_id":17,"path":["object","pe","ImageThunkData64"],"kind":"struct"},"24:646:8872":{"crate_id":24,"path":["syn","error","ErrorMessage"],"kind":"struct"},"2:4:1255":{"crate_id":2,"path":["core","panic"],"kind":"macro"},"17:12264:23820":{"crate_id":17,"path":["object","read","pe","section","PeSection"],"kind":"struct"},"2:46842:8685":{"crate_id":2,"path":["core","core_arch","simd","i16x32"],"kind":"struct"},"2:43691:16225":{"crate_id":2,"path":["core","slice","iter","ChunksMut"],"kind":"struct"},"6:497:7245":{"crate_id":6,"path":["libc","unix","rusage"],"kind":"struct"},"23:504:4713":{"crate_id":23,"path":["quote","__private","IdentFragmentAdapter"],"kind":"struct"},"2:11391:9241":{"crate_id":2,"path":["core","slice","iter","SplitN"],"kind":"struct"},"1:4972:5532":{"crate_id":1,"path":["std","os","fd","owned","OwnedFd"],"kind":"struct"},"1:9291:28455":{"crate_id":1,"path":["std","sync","mpmc","error","SendTimeoutError"],"kind":"enum"},"24:1110:3594":{"crate_id":24,"path":["syn","generics","ImplGenerics"],"kind":"struct"},"17:15799:6643":{"crate_id":17,"path":["object","pe","NonPagedDebugInfo"],"kind":"struct"},"17:11688:8944":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSection"],"kind":"struct"},"2:21581:33616":{"crate_id":2,"path":["core","core_simd","swizzle","rotate_elements_left","Rotate"],"kind":"struct"},"2:1999:1357":{"crate_id":2,"path":["core","ptr"],"kind":"module"},"16:6634:6800":{"crate_id":16,"path":["gimli","read","line","DebugLine"],"kind":"struct"},"2:42109:5023":{"crate_id":2,"path":["core","pin","Pin"],"kind":"struct"},"5:1577:210":{"crate_id":5,"path":["alloc","collections","btree","map","Range"],"kind":"struct"},"24:2410:3641":{"crate_id":24,"path":["syn","punctuated","PrivateIterMut"],"kind":"struct"},"14:0:3395":{"crate_id":14,"path":["rustc_demangle"],"kind":"module"},"17:14977:6419":{"crate_id":17,"path":["object","pe","ImageNtHeaders32"],"kind":"struct"},"16:2936:22722":{"crate_id":16,"path":["gimli","common","SectionId"],"kind":"enum"},"17:13877:6132":{"crate_id":17,"path":["object","macho","SegmentCommand64"],"kind":"struct"},"6:1510:7313":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr"],"kind":"struct"},"20:709:8912":{"crate_id":20,"path":["proc_macro2","rcvec","RcVecIntoIter"],"kind":"struct"},"6:5352:7690":{"crate_id":6,"path":["libc","unix","linux_like","linux","seccomp_notif_addfd"],"kind":"struct"},"16:6749:9066":{"crate_id":16,"path":["gimli","read","line","LineInstructions"],"kind":"struct"},"2:43210:9223":{"crate_id":2,"path":["core","hash","sip","SipHasher13"],"kind":"struct"},"6:6636:7989":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","seminfo"],"kind":"struct"},"1:1610:5235":{"crate_id":1,"path":["std","collections","hash","set","Drain"],"kind":"struct"},"2:3861:5235":{"crate_id":2,"path":["core","array","drain","Drain"],"kind":"struct"},"17:13146:5966":{"crate_id":17,"path":["object","archive","AixFileHeader"],"kind":"struct"},"24:5968:3625":{"crate_id":24,"path":["syn","ty","TypeTraitObject"],"kind":"struct"},"24:3056:3881":{"crate_id":24,"path":["syn","token","Await"],"kind":"struct"},"24:3124:2585":{"crate_id":24,"path":["syn","token","Const"],"kind":"struct"},"21:2261:2597":{"crate_id":21,"path":["proc_macro","bridge","Punct"],"kind":"struct"},"1:2535:3404":{"crate_id":1,"path":["std","io"],"kind":"module"},"1:314:1772":{"crate_id":1,"path":["std","thread"],"kind":"module"},"1:4144:10944":{"crate_id":1,"path":["std","os","unix","fs","PermissionsExt"],"kind":"trait"},"1:7397:5553":{"crate_id":1,"path":["std","sys_common","lazy_box","LazyBox"],"kind":"struct"},"1:11841:10925":{"crate_id":1,"path":["std","sys_common","net","UdpSocket"],"kind":"struct"},"16:6758:6893":{"crate_id":16,"path":["gimli","read","line","LineRow"],"kind":"struct"},"5:3254:9130":{"crate_id":5,"path":["alloc","collections","btree","set","Difference"],"kind":"struct"},"16:6412:23588":{"crate_id":16,"path":["gimli","read","abbrev","AbbreviationsCacheStrategy"],"kind":"enum"},"6:5225:7637":{"crate_id":6,"path":["libc","unix","linux_like","linux","arpd_request"],"kind":"struct"},"17:15342:6502":{"crate_id":17,"path":["object","pe","ImageDelayloadDescriptor"],"kind":"struct"},"1:9158:3635":{"crate_id":1,"path":["std","sync","mpsc","Iter"],"kind":"struct"},"16:542:8971":{"crate_id":16,"path":["gimli","read","cfi","RegisterRuleMap"],"kind":"struct"},"21:2726:2890":{"crate_id":21,"path":["proc_macro","Literal"],"kind":"struct"},"17:13959:6142":{"crate_id":17,"path":["object","macho","FvmlibCommand"],"kind":"struct"},"17:12969:5947":{"crate_id":17,"path":["object","read","CodeView"],"kind":"struct"},"21:421:5439":{"crate_id":21,"path":["proc_macro","bridge","server","RunningSameThreadGuard"],"kind":"struct"},"24:267:10294":{"crate_id":24,"path":["syn","attr","parsing","DisplayAttrStyle"],"kind":"struct"},"17:15748:6632":{"crate_id":17,"path":["object","pe","ImageDebugMisc"],"kind":"struct"},"6:559:7285":{"crate_id":6,"path":["libc","unix","sigval"],"kind":"struct"},"5:1527:9127":{"crate_id":5,"path":["alloc","collections","btree","map","Keys"],"kind":"struct"},"21:181:4875":{"crate_id":21,"path":["proc_macro","bridge","closure","Closure"],"kind":"struct"},"2:43876:9164":{"crate_id":2,"path":["core","str","iter","Split"],"kind":"struct"},"2:13535:3735":{"crate_id":2,"path":["core","future","async_drop","Fuse"],"kind":"struct"},"17:15010:6422":{"crate_id":17,"path":["object","pe","AnonObjectHeader"],"kind":"struct"},"24:5007:2044":{"crate_id":24,"path":["syn","derive","DeriveInput"],"kind":"struct"},"24:5624:3602":{"crate_id":24,"path":["syn","lit","LitFloat"],"kind":"struct"},"2:7754:3694":{"crate_id":2,"path":["core","iter","range","Step"],"kind":"trait"},"1:8211:139":{"crate_id":1,"path":["std","fs","FileType"],"kind":"struct"},"16:2458:6772":{"crate_id":16,"path":["gimli","common","DebugArangesOffset"],"kind":"struct"},"16:6385:6864":{"crate_id":16,"path":["gimli","read","reader","ReaderOffsetId"],"kind":"struct"},"16:2338:6760":{"crate_id":16,"path":["gimli","common","Encoding"],"kind":"struct"},"2:5188:435":{"crate_id":2,"path":["core","ffi","c_void"],"kind":"enum"},"2:32305:2229":{"crate_id":2,"path":["core","marker","Tuple"],"kind":"trait"},"6:5436:7736":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_sndinfo"],"kind":"struct"},"24:5945:3619":{"crate_id":24,"path":["syn","ty","TypeMacro"],"kind":"struct"},"6:6435:7887":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__exit_status"],"kind":"struct"},"17:11825:23792":{"crate_id":17,"path":["object","read","macho","file","MachOFile"],"kind":"struct"},"16:3778:6820":{"crate_id":16,"path":["gimli","constants","DwSect"],"kind":"struct"},"17:13844:6124":{"crate_id":17,"path":["object","macho","LcStr"],"kind":"struct"},"6:5581:7797":{"crate_id":6,"path":["libc","unix","linux_like","linux","af_alg_iv"],"kind":"struct"},"1:5326:204":{"crate_id":1,"path":["std","path","PathBuf"],"kind":"struct"},"23:46:3665":{"crate_id":23,"path":["quote","ident_fragment","IdentFragment"],"kind":"trait"},"17:11634:8940":{"crate_id":17,"path":["object","read","elf","version","VerdefIterator"],"kind":"struct"},"2:22890:8300":{"crate_id":2,"path":["core","num","diy_float","Fp"],"kind":"struct"},"17:11016:23687":{"crate_id":17,"path":["object","read","archive","ArchiveMemberIterator"],"kind":"struct"},"24:5943:3618":{"crate_id":24,"path":["syn","ty","TypeInfer"],"kind":"struct"},"16:2438:6771":{"crate_id":16,"path":["gimli","common","DebugAddrIndex"],"kind":"struct"},"17:14449:6239":{"crate_id":17,"path":["object","macho","SymsegCommand"],"kind":"struct"},"2:23175:8324":{"crate_id":2,"path":["core","num","nonzero","private","NonZeroI128Inner"],"kind":"struct"},"17:10769:37186":{"crate_id":17,"path":["object","read","any","SymbolTableInternal"],"kind":"enum"},"1:6843:10424":{"crate_id":1,"path":["std","sync","reentrant_lock","ReentrantLock"],"kind":"struct"},"1:5644:113":{"crate_id":1,"path":["std","process","Command"],"kind":"struct"},"17:14298:6208":{"crate_id":17,"path":["object","macho","RpathCommand"],"kind":"struct"},"17:11702:8945":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSubsectionIterator"],"kind":"struct"},"2:3383:141":{"crate_id":2,"path":["core","ops","function","FnMut"],"kind":"trait"},"6:4876:7511":{"crate_id":6,"path":["libc","unix","linux_like","linux","packet_mreq"],"kind":"struct"},"17:10317:5831":{"crate_id":17,"path":["object","endian","I32Bytes"],"kind":"struct"},"6:6900:8081":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","msqid_ds"],"kind":"struct"},"13:0:3388":{"crate_id":13,"path":["std_detect"],"kind":"module"},"24:5314:3580":{"crate_id":24,"path":["syn","expr","ExprLoop"],"kind":"struct"},"16:7321:4387":{"crate_id":16,"path":["gimli","read","op","Location"],"kind":"enum"},"17:12388:8962":{"crate_id":17,"path":["object","read","pe","import","DelayLoadImportTable"],"kind":"struct"},"6:5283:7670":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_j1939"],"kind":"struct"},"1:1891:10811":{"crate_id":1,"path":["std","env","SplitPaths"],"kind":"struct"},"6:5219:7634":{"crate_id":6,"path":["libc","unix","linux_like","linux","in6_pktinfo"],"kind":"struct"},"17:11898:5865":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandData"],"kind":"struct"},"1:5613:11018":{"crate_id":1,"path":["std","process","ChildStdout"],"kind":"struct"},"1:5982:4383":{"crate_id":1,"path":["std","sync","condvar","Condvar"],"kind":"struct"},"1:12341:1810":{"crate_id":1,"path":["std","tuple"],"kind":"primitive"},"24:5502:2760":{"crate_id":24,"path":["syn","generics","TypeParamBound"],"kind":"enum"},"5:6172:5475":{"crate_id":5,"path":["alloc","sync","from_iter_exact","Guard"],"kind":"struct"},"2:44098:9248":{"crate_id":2,"path":["core","str","iter","RMatches"],"kind":"struct"},"1:4874:10998":{"crate_id":1,"path":["std","os","linux","process","ChildExt"],"kind":"trait"},"2:9772:84":{"crate_id":2,"path":["core","sync","atomic","AtomicBool"],"kind":"struct"},"17:9781:23660":{"crate_id":17,"path":["object","common","BinaryFormat"],"kind":"enum"},"5:1437:99":{"crate_id":5,"path":["alloc","collections","btree","map","BTreeMap"],"kind":"struct"},"2:22493:34434":{"crate_id":2,"path":["core","core_simd","simd","ptr","const_ptr","SimdConstPtr","with_addr"],"kind":"function"},"2:44080:9247":{"crate_id":2,"path":["core","str","iter","Matches"],"kind":"struct"},"17:14212:6199":{"crate_id":17,"path":["object","macho","DylibModule64"],"kind":"struct"},"16:2355:6762":{"crate_id":16,"path":["gimli","common","LineEncoding"],"kind":"struct"},"17:10905:23674":{"crate_id":17,"path":["object","read","any","SectionRelocationIterator"],"kind":"struct"},"17:12707:23675":{"crate_id":17,"path":["object","read","traits","NoDynamicRelocationIterator"],"kind":"struct"},"6:1723:7442":{"crate_id":6,"path":["libc","unix","linux_like","sigevent"],"kind":"struct"},"17:13272:6002":{"crate_id":17,"path":["object","elf","SectionHeader64"],"kind":"struct"},"17:10218:5828":{"crate_id":17,"path":["object","endian","U32Bytes"],"kind":"struct"},"5:6410:11166":{"crate_id":5,"path":["alloc","task","Wake"],"kind":"trait"},"17:14325:6212":{"crate_id":17,"path":["object","macho","FilesetEntryCommand"],"kind":"struct"},"1:11279:162":{"crate_id":1,"path":["std","sys","pal","unix","time","Instant"],"kind":"struct"},"17:13325:6009":{"crate_id":17,"path":["object","elf","Sym32"],"kind":"struct"},"2:40333:9193":{"crate_id":2,"path":["core","char","convert","ParseCharError"],"kind":"struct"},"1:8073:10819":{"crate_id":1,"path":["std","env","VarError"],"kind":"enum"},"6:5296:7675":{"crate_id":6,"path":["libc","unix","linux_like","linux","j1939_filter"],"kind":"struct"},"17:10954:23685":{"crate_id":17,"path":["object","read","archive","ArchiveKind"],"kind":"enum"},"17:12353:8960":{"crate_id":17,"path":["object","read","pe","import","ImportDescriptorIterator"],"kind":"struct"},"6:5390:7709":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_ifru_map"],"kind":"struct"},"16:7559:9103":{"crate_id":16,"path":["gimli","read","pubtypes","PubTypesEntry"],"kind":"struct"},"5:289:5451":{"crate_id":5,"path":["alloc","boxed","thin","drop","DropGuard"],"kind":"struct"},"24:5450:2757":{"crate_id":24,"path":["syn","generics","GenericParam"],"kind":"enum"},"2:44883:11164":{"crate_id":2,"path":["core","task","wake","ContextBuilder"],"kind":"struct"},"17:437:5776":{"crate_id":17,"path":["object","read","any","Section"],"kind":"struct"},"2:42963:8556":{"crate_id":2,"path":["core","fmt","rt","Count"],"kind":"enum"},"6:7561:8222":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","shmid_ds"],"kind":"struct"},"16:2572:6777":{"crate_id":16,"path":["gimli","common","DebugLocListsBase"],"kind":"struct"},"2:5904:5475":{"crate_id":2,"path":["core","iter","adapters","filter","next_chunk","Guard"],"kind":"struct"},"1:8344:10902":{"crate_id":1,"path":["std","io","error","ErrorKind"],"kind":"enum"},"5:7654:9155":{"crate_id":5,"path":["alloc","string","FromUtf8Error"],"kind":"struct"},"24:5238:3568":{"crate_id":24,"path":["syn","expr","ExprAsync"],"kind":"struct"},"24:5341:3582":{"crate_id":24,"path":["syn","expr","ExprRange"],"kind":"struct"},"6:1621:7390":{"crate_id":6,"path":["libc","unix","linux_like","in_pktinfo"],"kind":"struct"},"1:11675:10037":{"crate_id":1,"path":["std","sys_common","wtf8","Wtf8"],"kind":"struct"},"2:40767:3737":{"crate_id":2,"path":["core","iter","adapters","map","Map"],"kind":"struct"},"2:2691:201":{"crate_id":2,"path":["core","cmp","PartialEq"],"kind":"trait"},"2:42703:3778":{"crate_id":2,"path":["core","fmt","num","Octal"],"kind":"struct"},"2:45811:8579":{"crate_id":2,"path":["core","core_arch","simd","i8x2"],"kind":"struct"},"1:6173:5540":{"crate_id":1,"path":["std","sync","mpmc","counter","Sender"],"kind":"struct"},"16:6246:206":{"crate_id":16,"path":["gimli","read","cfi","Pointer"],"kind":"enum"},"16:5781:6797":{"crate_id":16,"path":["gimli","read","cfi","EhFrame"],"kind":"struct"},"5:3259:35626":{"crate_id":5,"path":["alloc","collections","btree","set","DifferenceInner"],"kind":"enum"},"2:43682:9169":{"crate_id":2,"path":["core","slice","iter","Chunks"],"kind":"struct"},"24:3379:3893":{"crate_id":24,"path":["syn","token","Let"],"kind":"struct"},"2:42100:5158":{"crate_id":2,"path":["core","panicking","AssertKind"],"kind":"enum"},"24:3311:3889":{"crate_id":24,"path":["syn","token","For"],"kind":"struct"},"5:1336:10793":{"crate_id":5,"path":["alloc","collections","btree","map","entry","VacantEntry"],"kind":"struct"},"17:14503:6245":{"crate_id":17,"path":["object","macho","SourceVersionCommand"],"kind":"struct"},"2:3345:124":{"crate_id":2,"path":["core","ops","deref","Deref"],"kind":"trait"},"16:7686:23600":{"crate_id":16,"path":["gimli","read","rnglists","RngListIter"],"kind":"struct"},"16:2768:6786":{"crate_id":16,"path":["gimli","common","DebugStrOffsetsBase"],"kind":"struct"},"17:11877:5863":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandIterator"],"kind":"struct"},"1:9284:5011":{"crate_id":1,"path":["std","sync","mpmc","context","Inner"],"kind":"struct"},"1:11581:28962":{"crate_id":1,"path":["std","sys","thread_local","fast_local","Key"],"kind":"struct"},"24:1070:37404":{"crate_id":24,"path":["syn","generics","LifetimesMut"],"kind":"struct"},"2:43846:9232":{"crate_id":2,"path":["core","str","iter","Chars"],"kind":"struct"},"6:5260:7656":{"crate_id":6,"path":["libc","unix","linux_like","linux","regmatch_t"],"kind":"struct"},"17:9984:23665":{"crate_id":17,"path":["object","common","RelocationEncoding"],"kind":"enum"},"1:12338:335":{"crate_id":1,"path":["std","array"],"kind":"primitive"},"20:719:3653":{"crate_id":20,"path":["proc_macro2","fallback","LexError"],"kind":"struct"},"16:7580:9104":{"crate_id":16,"path":["gimli","read","pubtypes","PubTypesEntryIter"],"kind":"struct"},"16:8202:6813":{"crate_id":16,"path":["gimli","read","unit","DebugTypes"],"kind":"struct"},"24:5000:2220":{"crate_id":24,"path":["syn","data","Field"],"kind":"struct"},"1:3384:10908":{"crate_id":1,"path":["std","io","stdio","Stdout"],"kind":"struct"},"17:11865:23814":{"crate_id":17,"path":["object","read","macho","file","MachOComdatSectionIterator"],"kind":"struct"},"17:12993:23678":{"crate_id":17,"path":["object","read","RelocationTarget"],"kind":"enum"},"2:3994:3634":{"crate_id":2,"path":["core","array","iter","IntoIter"],"kind":"struct"},"16:7857:6975":{"crate_id":16,"path":["gimli","read","unit","UnitHeader"],"kind":"struct"},"1:6672:11036":{"crate_id":1,"path":["std","sync","once","OnceState"],"kind":"struct"},"16:6940:6911":{"crate_id":16,"path":["gimli","read","lists","ListsHeader"],"kind":"struct"},"2:46688:8651":{"crate_id":2,"path":["core","core_arch","simd","i8x64"],"kind":"struct"},"17:11102:23695":{"crate_id":17,"path":["object","read","coff","section","CoffSegment"],"kind":"struct"},"17:15569:6577":{"crate_id":17,"path":["object","pe","ImageHotPatchInfo"],"kind":"struct"},"1:4918:10960":{"crate_id":1,"path":["std","os","fd","raw","IntoRawFd"],"kind":"trait"},"1:922:5235":{"crate_id":1,"path":["std","collections","hash","map","Drain"],"kind":"struct"},"17:10710:23671":{"crate_id":17,"path":["object","read","any","ComdatSectionIterator"],"kind":"struct"},"2:32193:34140":{"crate_id":2,"path":["core","error","tags","MaybeSizedValue"],"kind":"struct"},"2:8720:34510":{"crate_id":2,"path":["core","net","display_buffer","DisplayBuffer"],"kind":"struct"},"18:581:4797":{"crate_id":18,"path":["memchr","memmem","twoway","Reverse"],"kind":"struct"},"2:39699:8399":{"crate_id":2,"path":["core","any","TypeId"],"kind":"struct"},"16:5700:6796":{"crate_id":16,"path":["gimli","read","cfi","DebugFrame"],"kind":"struct"},"17:12422:8964":{"crate_id":17,"path":["object","read","pe","relocation","RelocationIterator"],"kind":"struct"},"1:7920:5555":{"crate_id":1,"path":["std","backtrace_rs","print","BacktraceFrameFmt"],"kind":"struct"},"1:12350:896":{"crate_id":1,"path":["std","i32"],"kind":"primitive"},"6:5306:7679":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_filter"],"kind":"struct"},"24:5311:2545":{"crate_id":24,"path":["syn","expr","ExprLit"],"kind":"struct"},"6:5052:7595":{"crate_id":6,"path":["libc","unix","linux_like","linux","dl_phdr_info"],"kind":"struct"},"1:9260:8802":{"crate_id":1,"path":["std","sync","condvar","WaitTimeoutResult"],"kind":"struct"},"17:15426:6526":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation64"],"kind":"struct"},"17:14386:6221":{"crate_id":17,"path":["object","macho","BuildVersionCommand"],"kind":"struct"},"5:7103:5497":{"crate_id":5,"path":["alloc","vec","retain_mut","BackshiftOnDrop"],"kind":"struct"},"20:744:2890":{"crate_id":20,"path":["proc_macro2","fallback","Literal"],"kind":"struct"},"17:13785:6116":{"crate_id":17,"path":["object","macho","FatArch64"],"kind":"struct"},"17:12543:23855":{"crate_id":17,"path":["object","read","xcoff","section","XcoffSection"],"kind":"struct"},"6:570:7290":{"crate_id":6,"path":["libc","unix","tms"],"kind":"struct"},"2:44590:9279":{"crate_id":2,"path":["core","str","LinesMap"],"kind":"struct"},"19:0:1290":{"crate_id":19,"path":["panic_unwind"],"kind":"module"},"1:6348:5523":{"crate_id":1,"path":["std","sync","mpmc","waker","Waker"],"kind":"struct"},"6:1526:7321":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_in6"],"kind":"struct"},"1:5249:28954":{"crate_id":1,"path":["std","path","fmt","DebugHelper"],"kind":"struct"},"2:41806:2270":{"crate_id":2,"path":["core","net","ip_addr","fmt","Span"],"kind":"struct"},"2:2898:257":{"crate_id":2,"path":["core","convert","TryFrom"],"kind":"trait"},"17:14545:6249":{"crate_id":17,"path":["object","macho","Nlist32"],"kind":"struct"},"1:8543:9249":{"crate_id":1,"path":["std","io","Lines"],"kind":"struct"},"17:13046:5952":{"crate_id":17,"path":["object","read","CompressedFileRange"],"kind":"struct"},"17:14025:6151":{"crate_id":17,"path":["object","macho","SubUmbrellaCommand"],"kind":"struct"},"15:394:22686":{"crate_id":15,"path":["addr2line","DebugFile"],"kind":"enum"},"6:5212:7633":{"crate_id":6,"path":["libc","unix","linux_like","linux","genlmsghdr"],"kind":"struct"},"11:1160:10303":{"crate_id":11,"path":["hashbrown","map","OccupiedError"],"kind":"struct"},"1:8199:9297":{"crate_id":1,"path":["std","fs","Permissions"],"kind":"struct"},"17:11115:23694":{"crate_id":17,"path":["object","read","coff","section","CoffSectionIterator"],"kind":"struct"},"1:11897:8822":{"crate_id":1,"path":["std","alloc","System"],"kind":"struct"},"1:11647:8821":{"crate_id":1,"path":["std","sys_common","wtf8","CodePoint"],"kind":"struct"},"1:521:5006":{"crate_id":1,"path":["std","thread","PanicGuard"],"kind":"struct"},"1:2699:5528":{"crate_id":1,"path":["std","io","buffered","bufwriter","BufWriter"],"kind":"struct"},"2:43944:9239":{"crate_id":2,"path":["core","str","iter","RSplitTerminator"],"kind":"struct"},"24:2461:2827":{"crate_id":24,"path":["syn","punctuated","Pair"],"kind":"enum"},"2:10309:128":{"crate_id":2,"path":["core","fmt","Display"],"kind":"trait"},"17:15608:6592":{"crate_id":17,"path":["object","pe","ImageArmRuntimeFunctionEntry"],"kind":"struct"},"17:11605:5861":{"crate_id":17,"path":["object","read","elf","version","Version"],"kind":"struct"},"17:13375:6018":{"crate_id":17,"path":["object","elf","Syminfo64"],"kind":"struct"},"17:12584:23672":{"crate_id":17,"path":["object","read","xcoff","symbol","SymbolIterator"],"kind":"struct"},"2:41206:3702":{"crate_id":2,"path":["core","iter","sources","once_with","OnceWith"],"kind":"struct"},"2:43450:8562":{"crate_id":2,"path":["core","slice","sort","TimSortRun"],"kind":"struct"},"1:10327:10811":{"crate_id":1,"path":["std","sys","pal","unix","os","SplitPaths"],"kind":"struct"},"5:6015:71":{"crate_id":5,"path":["alloc","sync","Arc"],"kind":"struct"},"24:5468:2870":{"crate_id":24,"path":["syn","generics","LifetimeParam"],"kind":"struct"},"5:1839:5233":{"crate_id":5,"path":["alloc","collections","btree","map","ExtractIf"],"kind":"struct"},"2:44325:9263":{"crate_id":2,"path":["core","str","pattern","CharArrayRefSearcher"],"kind":"struct"},"2:12611:9240":{"crate_id":2,"path":["core","str","iter","SplitNInternal"],"kind":"struct"},"2:44258:16250":{"crate_id":2,"path":["core","str","pattern","SearchStep"],"kind":"enum"},"17:12454:8966":{"crate_id":17,"path":["object","read","pe","resource","ResourceDirectoryTable"],"kind":"struct"},"17:9737:23642":{"crate_id":17,"path":["object","common","SubArchitecture"],"kind":"enum"},"6:1585:7360":{"crate_id":6,"path":["libc","unix","linux_like","Dl_info"],"kind":"struct"},"16:5686:6793":{"crate_id":16,"path":["gimli","read","addr","DebugAddr"],"kind":"struct"},"5:5466:16214":{"crate_id":5,"path":["alloc","slice","Join"],"kind":"trait"},"16:3669:5733":{"crate_id":16,"path":["gimli","arch","X86_64"],"kind":"struct"},"1:3023:5531":{"crate_id":1,"path":["std","io","error","repr_bitpacked","Repr"],"kind":"struct"},"2:40654:3730":{"crate_id":2,"path":["core","iter","adapters","chain","Chain"],"kind":"struct"},"2:12947:16244":{"crate_id":2,"path":["core","str","pattern","MultiCharEqPattern"],"kind":"struct"},"24:5620:3601":{"crate_id":24,"path":["syn","lit","LitChar"],"kind":"struct"},"1:11038:8797":{"crate_id":1,"path":["std","sys","pal","unix","process","process_common","ExitCode"],"kind":"struct"},"1:8067:10782":{"crate_id":1,"path":["std","backtrace","RawFrame"],"kind":"enum"},"2:46572:8647":{"crate_id":2,"path":["core","core_arch","simd","f32x8"],"kind":"struct"},"24:3039:3880":{"crate_id":24,"path":["syn","token","Auto"],"kind":"struct"},"11:2443:5235":{"crate_id":11,"path":["hashbrown","table","Drain"],"kind":"struct"},"1:6789:11039":{"crate_id":1,"path":["std","sync","poison","TryLockError"],"kind":"enum"},"6:4916:7534":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_event"],"kind":"struct"},"2:40705:3732":{"crate_id":2,"path":["core","iter","adapters","filter","Filter"],"kind":"struct"},"5:5725:5239":{"crate_id":5,"path":["alloc","string","retain","SetLenOnDrop"],"kind":"struct"},"2:22976:9181":{"crate_id":2,"path":["core","num","fmt","Formatted"],"kind":"struct"},"6:5064:7604":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Ehdr"],"kind":"struct"},"9:53:10394":{"crate_id":9,"path":["miniz_oxide","inflate","core","DecompressorOxide"],"kind":"struct"},"16:4771:6837":{"crate_id":16,"path":["gimli","constants","DwId"],"kind":"struct"},"6:5181:7614":{"crate_id":6,"path":["libc","unix","linux_like","linux","mntent"],"kind":"struct"},"2:3137:247":{"crate_id":2,"path":["core","marker","Sync"],"kind":"trait"},"18:80:27909":{"crate_id":18,"path":["memchr","memchr","iter","Memchr"],"kind":"struct"},"6:6811:8052":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_data"],"kind":"union"},"17:10671:37202":{"crate_id":17,"path":["object","read","any","ComdatIteratorInternal"],"kind":"enum"},"24:4923:2536":{"crate_id":24,"path":["syn","token","Paren"],"kind":"struct"},"23:235:4717":{"crate_id":23,"path":["quote","__private","get_span","GetSpan"],"kind":"struct"},"2:10775:5518":{"crate_id":2,"path":["core","slice","sort","merge_sort","RunVec"],"kind":"struct"},"24:1366:8873":{"crate_id":24,"path":["syn","lit","LitRepr"],"kind":"struct"},"16:6427:10389":{"crate_id":16,"path":["gimli","read","abbrev","AbbreviationsCache"],"kind":"struct"},"24:1757:27946":{"crate_id":24,"path":["syn","parse","discouraged","Speculative"],"kind":"trait"},"1:12301:10430":{"crate_id":1,"path":["std","backtrace_rs","symbolize","gimli","Cache"],"kind":"struct"},"1:650:10311":{"crate_id":1,"path":["std","backtrace","Backtrace"],"kind":"struct"},"6:7461:8162":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_xmmreg"],"kind":"struct"},"5:6964:5241":{"crate_id":5,"path":["alloc","vec","in_place_drop","InPlaceDstDataSrcBufDrop"],"kind":"struct"},"1:10711:10906":{"crate_id":1,"path":["std","sys","pal","unix","stdio","Stdin"],"kind":"struct"},"24:5445:2211":{"crate_id":24,"path":["syn","generics","Generics"],"kind":"struct"},"1:3427:10904":{"crate_id":1,"path":["std","io","stdio","Stderr"],"kind":"struct"},"6:4942:7544":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_keymap_entry"],"kind":"struct"},"24:3515:3899":{"crate_id":24,"path":["syn","token","Priv"],"kind":"struct"},"1:3058:137":{"crate_id":1,"path":["std","io","error","Error"],"kind":"struct"},"2:43012:3775":{"crate_id":2,"path":["core","fmt","Alignment"],"kind":"enum"},"17:14587:6256":{"crate_id":17,"path":["object","macho","RelocationInfo"],"kind":"struct"},"1:9324:2197":{"crate_id":1,"path":["std","sync","mpmc","select","Token"],"kind":"struct"},"2:7703:33799":{"crate_id":2,"path":["core","iter","adapters","GenericShunt"],"kind":"struct"},"2:4656:3790":{"crate_id":2,"path":["core","cell","BorrowMutError"],"kind":"struct"},"1:11603:28795":{"crate_id":1,"path":["std","sys","thread_local","fast_local","DtorState"],"kind":"enum"},"17:11324:23739":{"crate_id":17,"path":["object","read","elf","file","ElfFile"],"kind":"struct"},"24:3328:3890":{"crate_id":24,"path":["syn","token","If"],"kind":"struct"},"2:46234:8617":{"crate_id":2,"path":["core","core_arch","simd","f64x2"],"kind":"struct"},"2:12388:16373":{"crate_id":2,"path":["core","slice","SlicePattern"],"kind":"trait"},"2:3188:5672":{"crate_id":2,"path":["core","ops","arith","Sub"],"kind":"trait"},"5:7372:5145":{"crate_id":5,"path":["alloc","alloc","Global"],"kind":"struct"},"17:14012:6150":{"crate_id":17,"path":["object","macho","SubClientCommand"],"kind":"struct"},"2:12688:9166":{"crate_id":2,"path":["core","str","iter","SplitInclusive"],"kind":"struct"},"20:116:37220":{"crate_id":20,"path":["proc_macro2","rcvec","RcVecBuilder"],"kind":"struct"},"1:9546:5302":{"crate_id":1,"path":["std","sys","pal","unix","args","Args"],"kind":"struct"},"17:14475:6241":{"crate_id":17,"path":["object","macho","FvmfileCommand"],"kind":"struct"},"6:5671:7840":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_can_addr"],"kind":"union"},"2:23638:236":{"crate_id":2,"path":["core","num","saturating","Saturating"],"kind":"struct"},"2:42559:97":{"crate_id":2,"path":["core","sync","atomic","AtomicUsize"],"kind":"struct"},"24:5242:3569":{"crate_id":24,"path":["syn","expr","ExprAwait"],"kind":"struct"},"1:8704:4382":{"crate_id":1,"path":["std","panic","BacktraceStyle"],"kind":"enum"},"17:15822:6647":{"crate_id":17,"path":["object","pe","ImportObjectHeader"],"kind":"struct"},"1:3640:3783":{"crate_id":1,"path":["std","io","Write"],"kind":"trait"},"17:14723:6265":{"crate_id":17,"path":["object","pe","ImageDosHeader"],"kind":"struct"},"2:3018:10832":{"crate_id":2,"path":["core","error","Request"],"kind":"struct"},"14:220:7095":{"crate_id":14,"path":["rustc_demangle","SizeLimitExhausted"],"kind":"struct"},"2:46593:8648":{"crate_id":2,"path":["core","core_arch","simd","m8x32"],"kind":"struct"},"5:3657:3635":{"crate_id":5,"path":["alloc","collections","linked_list","Iter"],"kind":"struct"},"6:1496:7308":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreqn"],"kind":"struct"},"17:9671:23643":{"crate_id":17,"path":["object","common","Architecture"],"kind":"enum"},"2:6000:5475":{"crate_id":2,"path":["core","iter","adapters","filter_map","next_chunk","Guard"],"kind":"struct"},"17:13753:6109":{"crate_id":17,"path":["object","macho","DyldSubCacheInfo"],"kind":"struct"},"2:12879:16236":{"crate_id":2,"path":["core","str","pattern","Pattern"],"kind":"trait"},"6:7537:8214":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","mcontext_t"],"kind":"struct"},"16:7539:6806":{"crate_id":16,"path":["gimli","read","pubnames","DebugPubNames"],"kind":"struct"},"16:7888:9106":{"crate_id":16,"path":["gimli","read","unit","DebuggingInformationEntry"],"kind":"struct"},"17:14414:6227":{"crate_id":17,"path":["object","macho","DyldInfoCommand"],"kind":"struct"},"6:5160:7611":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Shdr"],"kind":"struct"},"6:5039:7591":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_ff_erase"],"kind":"struct"},"1:5080:10995":{"crate_id":1,"path":["std","os","net","linux_ext","addr","SocketAddrExt"],"kind":"trait"},"2:43673:9168":{"crate_id":2,"path":["core","slice","iter","Windows"],"kind":"struct"},"2:23098:8317":{"crate_id":2,"path":["core","num","nonzero","private","NonZeroU64Inner"],"kind":"struct"},"6:5502:7771":{"crate_id":6,"path":["libc","unix","linux_like","linux","tls12_crypto_info_aes_gcm_256"],"kind":"struct"},"2:46667:8650":{"crate_id":2,"path":["core","core_arch","simd","m32x8"],"kind":"struct"},"17:13999:6148":{"crate_id":17,"path":["object","macho","SubFrameworkCommand"],"kind":"struct"},"1:1914:5302":{"crate_id":1,"path":["std","env","Args"],"kind":"struct"},"6:5415:7721":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_initmsg"],"kind":"struct"},"1:5629:11019":{"crate_id":1,"path":["std","process","ChildStderr"],"kind":"struct"},"2:42037:4387":{"crate_id":2,"path":["core","panic","location","Location"],"kind":"struct"},"6:5617:7818":{"crate_id":6,"path":["libc","unix","linux_like","linux","ifreq"],"kind":"struct"},"17:13173:5974":{"crate_id":17,"path":["object","archive","AixMemberOffset"],"kind":"struct"},"16:7910:23602":{"crate_id":16,"path":["gimli","read","unit","AttributeValue"],"kind":"enum"},"24:3294:140":{"crate_id":24,"path":["syn","token","Fn"],"kind":"struct"},"24:95:10869":{"crate_id":24,"path":["syn","token","private","Sealed"],"kind":"trait"},"1:8874:9304":{"crate_id":1,"path":["std","path","StripPrefixError"],"kind":"struct"},"16:6782:23591":{"crate_id":16,"path":["gimli","read","line","ColumnType"],"kind":"enum"},"6:5445:7742":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_rcvinfo"],"kind":"struct"},"17:13089:5956":{"crate_id":17,"path":["object","archive","Header"],"kind":"struct"},"16:2838:6789":{"crate_id":16,"path":["gimli","common","DebugTypeSignature"],"kind":"struct"},"2:43926:9238":{"crate_id":2,"path":["core","str","iter","SplitTerminator"],"kind":"struct"},"24:4525:3930":{"crate_id":24,"path":["syn","token","Lt"],"kind":"struct"},"2:34375:3947":{"crate_id":2,"path":["core","ops","bit","Shl"],"kind":"trait"},"17:15289:6487":{"crate_id":17,"path":["object","pe","ImageTlsDirectory64"],"kind":"struct"},"1:7354:10321":{"crate_id":1,"path":["std","sys_common","backtrace","_print","DisplayBacktrace"],"kind":"struct"},"2:2657:112":{"crate_id":2,"path":["core","clone","Clone"],"kind":"trait"},"2:10323:3785":{"crate_id":2,"path":["core","fmt","UpperExp"],"kind":"trait"},"6:4952:7547":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_mask"],"kind":"struct"},"24:4571:3933":{"crate_id":24,"path":["syn","token","Ne"],"kind":"struct"},"2:47040:8691":{"crate_id":2,"path":["core","core_arch","simd","u64x8"],"kind":"struct"},"6:465:2192":{"crate_id":6,"path":["libc","unix","group"],"kind":"struct"},"11:1917:9131":{"crate_id":11,"path":["hashbrown","set","SymmetricDifference"],"kind":"struct"},"5:7453:210":{"crate_id":5,"path":["alloc","collections","btree","set","Range"],"kind":"struct"},"6:6505:7923":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","mallinfo2"],"kind":"struct"},"2:6700:3747":{"crate_id":2,"path":["core","iter","adapters","intersperse","IntersperseWith"],"kind":"struct"},"11:2352:10793":{"crate_id":11,"path":["hashbrown","table","VacantEntry"],"kind":"struct"},"16:3842:6822":{"crate_id":16,"path":["gimli","constants","DwUt"],"kind":"struct"},"17:15701:6618":{"crate_id":17,"path":["object","pe","ImageEnclaveImport"],"kind":"struct"},"11:800:5235":{"crate_id":11,"path":["hashbrown","map","Drain"],"kind":"struct"},"1:4798:10946":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt"],"kind":"trait"},"6:6729:8025":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_umem_reg"],"kind":"struct"},"6:8247:8259":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_mutexattr_t"],"kind":"struct"},"1:947:10415":{"crate_id":1,"path":["std","collections","hash","map","IntoValues"],"kind":"struct"},"16:6480:6794":{"crate_id":16,"path":["gimli","read","aranges","DebugAranges"],"kind":"struct"},"16:6335:10373":{"crate_id":16,"path":["gimli","read","dwarf","RangeIter"],"kind":"struct"},"2:12634:9243":{"crate_id":2,"path":["core","str","iter","MatchIndicesInternal"],"kind":"struct"},"2:2861:10869":{"crate_id":2,"path":["core","convert","num","private","Sealed"],"kind":"trait"},"6:578:7295":{"crate_id":6,"path":["libc","unix","servent"],"kind":"struct"},"1:12120:5569":{"crate_id":1,"path":["std","backtrace_rs","symbolize","gimli","mmap","Mmap"],"kind":"struct"},"17:9916:23663":{"crate_id":17,"path":["object","common","SymbolScope"],"kind":"enum"},"17:15582:6583":{"crate_id":17,"path":["object","pe","ImageHotPatchBase"],"kind":"struct"},"2:40789:3738":{"crate_id":2,"path":["core","iter","adapters","peekable","Peekable"],"kind":"struct"},"17:11293:23717":{"crate_id":17,"path":["object","read","coff","import","ImportType"],"kind":"enum"},"9:502:7211":{"crate_id":9,"path":["miniz_oxide","StreamResult"],"kind":"struct"},"2:2064:5186":{"crate_id":2,"path":["core","ptr","metadata","Pointee"],"kind":"trait"},"16:5914:8993":{"crate_id":16,"path":["gimli","read","cfi","AugmentationData"],"kind":"struct"},"1:586:5014":{"crate_id":1,"path":["std","thread","JoinHandle"],"kind":"struct"},"1:12357:1826":{"crate_id":1,"path":["std","u128"],"kind":"primitive"},"11:1676:5448":{"crate_id":11,"path":["hashbrown","scopeguard","ScopeGuard"],"kind":"struct"},"11:102:9120":{"crate_id":11,"path":["hashbrown","raw","Bucket"],"kind":"struct"},"1:4478:10974":{"crate_id":1,"path":["std","os","unix","net","listener","UnixListener"],"kind":"struct"},"21:1349:2284":{"crate_id":21,"path":["proc_macro","bridge","symbol","Symbol"],"kind":"struct"},"16:7633:37127":{"crate_id":16,"path":["gimli","read","rnglists","RangeListsFormat"],"kind":"enum"},"6:5665:7838":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_txtime"],"kind":"struct"},"5:7536:3690":{"crate_id":5,"path":["alloc","collections","TryReserveError"],"kind":"struct"},"16:2878:6791":{"crate_id":16,"path":["gimli","common","EhFrameOffset"],"kind":"struct"},"24:5321:3581":{"crate_id":24,"path":["syn","expr","ExprMatch"],"kind":"struct"},"24:3345:3891":{"crate_id":24,"path":["syn","token","Impl"],"kind":"struct"},"17:15190:6466":{"crate_id":17,"path":["object","pe","ImageAuxSymbolCrc"],"kind":"struct"},"5:5226:5481":{"crate_id":5,"path":["alloc","rc","Weak"],"kind":"struct"},"2:38871:5684":{"crate_id":2,"path":["core","ops","bit","ShrAssign"],"kind":"trait"},"6:5677:7843":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_can"],"kind":"struct"},"18:680:8919":{"crate_id":18,"path":["memchr","memmem","Finder"],"kind":"struct"},"2:44451:16251":{"crate_id":2,"path":["core","str","pattern","StrSearcherImpl"],"kind":"enum"},"20:889:2271":{"crate_id":20,"path":["proc_macro2","TokenTree"],"kind":"enum"},"1:8260:3770":{"crate_id":1,"path":["std","io","cursor","Cursor"],"kind":"struct"},"2:46333:8622":{"crate_id":2,"path":["core","core_arch","simd","m64x2"],"kind":"struct"},"24:5844:3609":{"crate_id":24,"path":["syn","restriction","FieldMutability"],"kind":"enum"},"17:10915:37187":{"crate_id":17,"path":["object","read","any","SectionRelocationIteratorInternal"],"kind":"enum"},"6:1639:7402":{"crate_id":6,"path":["libc","unix","linux_like","in6_rtmsg"],"kind":"struct"},"16:4468:6828":{"crate_id":16,"path":["gimli","constants","DwAte"],"kind":"struct"},"9:238:8558":{"crate_id":9,"path":["miniz_oxide","inflate","core","State"],"kind":"enum"},"6:5636:7827":{"crate_id":6,"path":["libc","unix","linux_like","linux","hwtstamp_config"],"kind":"struct"},"1:11226:8569":{"crate_id":1,"path":["std","sys","pal","unix","time","Nanoseconds"],"kind":"struct"},"17:11915:23815":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandVariant"],"kind":"enum"},"20:948:2203":{"crate_id":20,"path":["proc_macro2","Ident"],"kind":"struct"},"5:7591:16357":{"crate_id":5,"path":["alloc","ffi","c_str","FromBytesWithNulErrorKind"],"kind":"enum"},"2:46765:8684":{"crate_id":2,"path":["core","core_arch","simd","u8x64"],"kind":"struct"},"1:752:154":{"crate_id":1,"path":["std","collections","hash","map","HashMap"],"kind":"struct"},"16:6648:9062":{"crate_id":16,"path":["gimli","read","line","LineRows"],"kind":"struct"},"5:3046:27964":{"crate_id":5,"path":["alloc","collections","btree","node","marker","ValMut"],"kind":"struct"},"17:12289:5904":{"crate_id":17,"path":["object","read","pe","data_directory","DataDirectories"],"kind":"struct"},"2:2885:76":{"crate_id":2,"path":["core","convert","AsMut"],"kind":"trait"},"1:8474:8771":{"crate_id":1,"path":["std","io","util","Sink"],"kind":"struct"},"1:11101:5563":{"crate_id":1,"path":["std","sys","pal","unix","process","process_inner","posix_spawn","PosixSpawnattr"],"kind":"struct"},"16:7813:9105":{"crate_id":16,"path":["gimli","read","unit","DebugInfoUnitHeadersIter"],"kind":"struct"},"5:7445:3634":{"crate_id":5,"path":["alloc","collections","btree","set","IntoIter"],"kind":"struct"},"18:613:37209":{"crate_id":18,"path":["memchr","memmem","twoway","SuffixKind"],"kind":"enum"},"24:1062:37401":{"crate_id":24,"path":["syn","generics","Lifetimes"],"kind":"struct"},"16:7168:8803":{"crate_id":16,"path":["gimli","read","op","Operation"],"kind":"enum"},"2:45943:8593":{"crate_id":2,"path":["core","core_arch","simd","u64x1"],"kind":"struct"},"17:4986:23864":{"crate_id":17,"path":["object","read","xcoff","relocation","XcoffRelocationIterator"],"kind":"struct"},"2:21730:8293":{"crate_id":2,"path":["core","core_simd","masks","mask_impl","Mask"],"kind":"struct"},"6:1503:7311":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreq_source"],"kind":"struct"},"14:160:10297":{"crate_id":14,"path":["rustc_demangle","Demangle"],"kind":"struct"},"17:11841:23812":{"crate_id":17,"path":["object","read","macho","file","MachOComdatIterator"],"kind":"struct"},"17:15058:6431":{"crate_id":17,"path":["object","pe","ImageSectionHeader"],"kind":"struct"},"2:41890:33883":{"crate_id":2,"path":["core","net","parser","AddrKind"],"kind":"enum"},"9:330:7188":{"crate_id":9,"path":["miniz_oxide","inflate","core","LocalVars"],"kind":"struct"},"1:1855:10802":{"crate_id":1,"path":["std","env","VarsOs"],"kind":"struct"},"16:7111:9096":{"crate_id":16,"path":["gimli","read","lookup","PubStuffHeader"],"kind":"struct"},"5:4318:3635":{"crate_id":5,"path":["alloc","collections","vec_deque","iter","Iter"],"kind":"struct"},"1:1636:2240":{"crate_id":1,"path":["std","collections","hash","set","Union"],"kind":"struct"},"24:5549:2860":{"crate_id":24,"path":["syn","generics","PredicateType"],"kind":"struct"},"11:1910:9130":{"crate_id":11,"path":["hashbrown","set","Difference"],"kind":"struct"},"24:2231:3631":{"crate_id":24,"path":["syn","punctuated","Pairs"],"kind":"struct"},"17:11621:8938":{"crate_id":17,"path":["object","read","elf","version","VersionTable"],"kind":"struct"},"17:12433:5912":{"crate_id":17,"path":["object","read","pe","relocation","Relocation"],"kind":"struct"},"24:5031:2464":{"crate_id":24,"path":["syn","derive","DataUnion"],"kind":"struct"},"5:7489:3634":{"crate_id":5,"path":["alloc","collections","vec_deque","into_iter","IntoIter"],"kind":"struct"},"2:40372:9194":{"crate_id":2,"path":["core","char","decode","DecodeUtf16"],"kind":"struct"},"24:5358:3563":{"crate_id":24,"path":["syn","expr","ExprStruct"],"kind":"struct"},"2:42245:96":{"crate_id":2,"path":["core","sync","atomic","AtomicU8"],"kind":"struct"},"1:8560:10918":{"crate_id":1,"path":["std","net","Shutdown"],"kind":"enum"},"24:5923:3614":{"crate_id":24,"path":["syn","ty","TypeArray"],"kind":"struct"},"2:3587:146":{"crate_id":2,"path":["core","ops","try_trait","FromResidual"],"kind":"trait"},"16:6231:9038":{"crate_id":16,"path":["gimli","read","cfi","CallFrameInstructionIter"],"kind":"struct"},"16:2394:6769":{"crate_id":16,"path":["gimli","common","DebugAbbrevOffset"],"kind":"struct"},"2:43894:9167":{"crate_id":2,"path":["core","str","iter","RSplit"],"kind":"struct"},"1:4877:10976":{"crate_id":1,"path":["std","os","linux","process","CommandExt"],"kind":"trait"},"7:79:22560":{"crate_id":7,"path":["unwind","libunwind","_Unwind_Action"],"kind":"enum"},"1:1853:10801":{"crate_id":1,"path":["std","env","Vars"],"kind":"struct"},"1:3429:10905":{"crate_id":1,"path":["std","io","stdio","StderrLock"],"kind":"struct"},"2:2635:102":{"crate_id":2,"path":["core","borrow","Borrow"],"kind":"trait"},"11:434:37103":{"crate_id":11,"path":["hashbrown","raw","RawIterHashInner"],"kind":"struct"},"5:839:5454":{"crate_id":5,"path":["alloc","collections","binary_heap","PeekMut"],"kind":"struct"},"1:2309:10848":{"crate_id":1,"path":["std","fs","DirEntry"],"kind":"struct"},"1:888:3634":{"crate_id":1,"path":["std","collections","hash","map","IntoIter"],"kind":"struct"},"1:9239:11045":{"crate_id":1,"path":["std","sync","mpsc","TrySendError"],"kind":"enum"},"1:9428:162":{"crate_id":1,"path":["std","time","Instant"],"kind":"struct"},"17:15473:6539":{"crate_id":17,"path":["object","pe","ImageLoadConfigDirectory32"],"kind":"struct"},"17:11242:23715":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdatSectionIterator"],"kind":"struct"},"5:7641:243":{"crate_id":5,"path":["alloc","string","String"],"kind":"struct"},"24:5333:3561":{"crate_id":24,"path":["syn","expr","ExprParen"],"kind":"struct"},"24:4542:3931":{"crate_id":24,"path":["syn","token","Minus"],"kind":"struct"},"5:5860:251":{"crate_id":5,"path":["alloc","string","ToString"],"kind":"trait"},"24:1369:8874":{"crate_id":24,"path":["syn","lit","LitIntRepr"],"kind":"struct"},"16:4587:6832":{"crate_id":16,"path":["gimli","constants","DwAccess"],"kind":"struct"},"2:46534:8645":{"crate_id":2,"path":["core","core_arch","simd","i32x8"],"kind":"struct"},"1:12361:13":{"crate_id":1,"path":["std","fn"],"kind":"primitive"},"17:2037:23728":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbolIterator"],"kind":"struct"},"5:6608:5451":{"crate_id":5,"path":["alloc","vec","drain","drop","DropGuard"],"kind":"struct"},"2:42401:94":{"crate_id":2,"path":["core","sync","atomic","AtomicU32"],"kind":"struct"},"16:6543:9051":{"crate_id":16,"path":["gimli","read","aranges","ArangeEntry"],"kind":"struct"},"5:2112:10795":{"crate_id":5,"path":["alloc","collections","btree","map","CursorMut"],"kind":"struct"},"24:5378:3564":{"crate_id":24,"path":["syn","expr","ExprUnary"],"kind":"struct"},"24:4513:3929":{"crate_id":24,"path":["syn","token","Le"],"kind":"struct"},"5:7389:9145":{"crate_id":5,"path":["alloc","collections","binary_heap","IntoIterSorted"],"kind":"struct"},"6:5477:7762":{"crate_id":6,"path":["libc","unix","linux_like","linux","rlimit64"],"kind":"struct"},"5:6930:5239":{"crate_id":5,"path":["alloc","vec","set_len_on_drop","SetLenOnDrop"],"kind":"struct"},"17:15383:6516":{"crate_id":17,"path":["object","pe","ImageResourceDirStringU"],"kind":"struct"},"5:2298:35565":{"crate_id":5,"path":["alloc","collections","btree","navigate","LazyLeafHandle"],"kind":"enum"},"11:1025:10792":{"crate_id":11,"path":["hashbrown","map","OccupiedEntry"],"kind":"struct"},"2:40723:9206":{"crate_id":2,"path":["core","iter","adapters","flatten","FlattenCompat"],"kind":"struct"},"16:6895:6905":{"crate_id":16,"path":["gimli","read","line","FileEntry"],"kind":"struct"},"1:9332:8803":{"crate_id":1,"path":["std","sync","mpmc","select","Operation"],"kind":"struct"},"17:15418:6524":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation32"],"kind":"struct"},"20:982:3634":{"crate_id":20,"path":["proc_macro2","token_stream","IntoIter"],"kind":"struct"},"17:15281:6486":{"crate_id":17,"path":["object","pe","ImageThunkData32"],"kind":"struct"},"1:4552:10967":{"crate_id":1,"path":["std","os","unix","net","stream","UnixStream"],"kind":"struct"},"24:3549:3798":{"crate_id":24,"path":["syn","token","Ref"],"kind":"struct"},"2:40973:3743":{"crate_id":2,"path":["core","iter","adapters","take","Take"],"kind":"struct"},"11:875:10790":{"crate_id":11,"path":["hashbrown","map","RawVacantEntryMut"],"kind":"struct"},"17:14847:6368":{"crate_id":17,"path":["object","pe","MaskedRichHeaderEntry"],"kind":"struct"},"24:3362:3892":{"crate_id":24,"path":["syn","token","In"],"kind":"struct"},"17:12516:23863":{"crate_id":17,"path":["object","read","xcoff","file","XcoffFile"],"kind":"struct"},"2:43701:9170":{"crate_id":2,"path":["core","slice","iter","ChunksExact"],"kind":"struct"},"6:0:1001":{"crate_id":6,"path":["libc"],"kind":"module"},"17:13363:6015":{"crate_id":17,"path":["object","elf","Syminfo32"],"kind":"struct"},"1:4202:10948":{"crate_id":1,"path":["std","os","unix","fs","DirEntryExt"],"kind":"trait"},"1:4100:10941":{"crate_id":1,"path":["std","os","unix","ffi","os_str","OsStrExt"],"kind":"trait"},"17:11354:23726":{"crate_id":17,"path":["object","read","elf","segment","ElfSegment"],"kind":"struct"},"24:693:3634":{"crate_id":24,"path":["syn","error","IntoIter"],"kind":"struct"},"2:47019:8690":{"crate_id":2,"path":["core","core_arch","simd","i64x8"],"kind":"struct"},"2:41183:9213":{"crate_id":2,"path":["core","iter","sources","from_coroutine","FromCoroutine"],"kind":"struct"},"2:22405:11160":{"crate_id":2,"path":["core","core_simd","simd","num","int","SimdInt"],"kind":"trait"},"9:0:3391":{"crate_id":9,"path":["miniz_oxide"],"kind":"module"},"2:40489:9199":{"crate_id":2,"path":["core","char","ToUppercase"],"kind":"struct"},"24:2115:10720":{"crate_id":24,"path":["syn","print","TokensOrDefault"],"kind":"struct"},"6:5020:7582":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_effect"],"kind":"struct"},"10:44:7151":{"crate_id":10,"path":["adler","Adler32"],"kind":"struct"},"17:10997:5842":{"crate_id":17,"path":["object","read","archive","ArchiveFile"],"kind":"struct"},"2:22548:5171":{"crate_id":2,"path":["core","core_simd","simd","ptr","mut_ptr","SimdMutPtr","with_exposed_provenance"],"kind":"function"},"17:15463:6534":{"crate_id":17,"path":["object","pe","ImageEpilogueDynamicRelocationHeader"],"kind":"struct"},"17:13485:6038":{"crate_id":17,"path":["object","elf","Dyn64"],"kind":"struct"},"16:2788:6787":{"crate_id":16,"path":["gimli","common","DebugStrOffsetsIndex"],"kind":"struct"},"1:8606:10975":{"crate_id":1,"path":["std","os","unix","net","ancillary","AncillaryError"],"kind":"enum"},"2:44503:9277":{"crate_id":2,"path":["core","str","lossy","Utf8Chunks"],"kind":"struct"},"2:3218:5136":{"crate_id":2,"path":["core","ops","async_function","AsyncFnOnce"],"kind":"trait"},"24:5565:2280":{"crate_id":24,"path":["syn","lifetime","Lifetime"],"kind":"function"},"2:39562:210":{"crate_id":2,"path":["core","ops","range","Range"],"kind":"struct"},"2:12888:8925":{"crate_id":2,"path":["core","str","pattern","Searcher"],"kind":"trait"},"17:14189:6190":{"crate_id":17,"path":["object","macho","DylibModule32"],"kind":"struct"},"17:0:3398":{"crate_id":17,"path":["object"],"kind":"module"},"17:11367:5844":{"crate_id":17,"path":["object","read","elf","section","SectionTable"],"kind":"struct"},"1:8339:10428":{"crate_id":1,"path":["std","io","error","Custom"],"kind":"struct"},"24:355:3770":{"crate_id":24,"path":["syn","buffer","Cursor"],"kind":"struct"},"2:3572:16325":{"crate_id":2,"path":["core","ops","range","OneSidedRange"],"kind":"trait"},"24:5480:3592":{"crate_id":24,"path":["syn","generics","ConstParam"],"kind":"struct"},"17:9938:23664":{"crate_id":17,"path":["object","common","RelocationKind"],"kind":"enum"},"17:16151:6732":{"crate_id":17,"path":["object","xcoff","CsectAux64"],"kind":"struct"},"17:12251:23821":{"crate_id":17,"path":["object","read","pe","section","PeSectionIterator"],"kind":"struct"},"6:5002:7573":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_periodic_effect"],"kind":"struct"},"24:5298:3558":{"crate_id":24,"path":["syn","expr","ExprIndex"],"kind":"struct"},"6:5046:7593":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_abs_setup"],"kind":"struct"},"18:698:8923":{"crate_id":18,"path":["memchr","memmem","FinderBuilder"],"kind":"struct"},"11:837:10787":{"crate_id":11,"path":["hashbrown","map","RawEntryBuilderMut"],"kind":"struct"},"11:1891:5235":{"crate_id":11,"path":["hashbrown","set","Drain"],"kind":"struct"},"2:13779:115":{"crate_id":2,"path":["core","task","wake","Context"],"kind":"struct"},"16:7741:6811":{"crate_id":16,"path":["gimli","read","str","DebugStrOffsets"],"kind":"struct"},"1:6786:10319":{"crate_id":1,"path":["std","sync","poison","PoisonError"],"kind":"struct"},"24:5354:3584":{"crate_id":24,"path":["syn","expr","ExprReturn"],"kind":"struct"},"16:5863:23583":{"crate_id":16,"path":["gimli","read","cfi","CieOrFde"],"kind":"enum"},"2:46638:8649":{"crate_id":2,"path":["core","core_arch","simd","m16x16"],"kind":"struct"},"16:4976:6844":{"crate_id":16,"path":["gimli","constants","DwLns"],"kind":"struct"},"11:844:10788":{"crate_id":11,"path":["hashbrown","map","RawEntryMut"],"kind":"enum"},"2:10963:239":{"crate_id":2,"path":["core","slice","index","SliceIndex"],"kind":"trait"},"2:10743:5513":{"crate_id":2,"path":["core","slice","sort","merge","MergeHole"],"kind":"struct"},"6:8029:8257":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","align","sem_t"],"kind":"struct"},"17:15596:6589":{"crate_id":17,"path":["object","pe","ImageHotPatchHashes"],"kind":"struct"},"16:6317:2233":{"crate_id":16,"path":["gimli","read","dwarf","Unit"],"kind":"struct"},"17:15126:6446":{"crate_id":17,"path":["object","pe","ImageAuxSymbolTokenDef"],"kind":"struct"},"1:2312:5177":{"crate_id":1,"path":["std","fs","read"],"kind":"function"},"1:11021:28800":{"crate_id":1,"path":["std","sys","pal","unix","process","process_common","ProgramKind"],"kind":"enum"},"2:11108:3635":{"crate_id":2,"path":["core","slice","iter","Iter"],"kind":"struct"},"24:363:37585":{"crate_id":24,"path":["syn","buffer","empty","UnsafeSyncEntry"],"kind":"struct"},"1:11692:9323":{"crate_id":1,"path":["std","sys_common","wtf8","EncodeWide"],"kind":"struct"},"2:47274:8726":{"crate_id":2,"path":["core","core_arch","x86","cpuid","CpuidResult"],"kind":"struct"},"11:687:3639":{"crate_id":11,"path":["hashbrown","map","IterMut"],"kind":"struct"},"5:4844:801":{"crate_id":5,"path":["alloc","fmt"],"kind":"module"},"11:673:3635":{"crate_id":11,"path":["hashbrown","map","Iter"],"kind":"struct"},"5:3816:10795":{"crate_id":5,"path":["alloc","collections","linked_list","CursorMut"],"kind":"struct"},"17:16165:6735":{"crate_id":17,"path":["object","xcoff","FunAux32"],"kind":"struct"},"2:7638:3728":{"crate_id":2,"path":["core","iter","adapters","zip","TrustedRandomAccess"],"kind":"trait"},"16:7570:6807":{"crate_id":16,"path":["gimli","read","pubtypes","DebugPubTypes"],"kind":"struct"},"1:12358:965":{"crate_id":1,"path":["std","isize"],"kind":"primitive"},"24:5839:3610":{"crate_id":24,"path":["syn","restriction","VisRestricted"],"kind":"struct"},"11:2140:10792":{"crate_id":11,"path":["hashbrown","set","OccupiedEntry"],"kind":"struct"},"18:726:5724":{"crate_id":18,"path":["memchr","memmem","SearcherConfig"],"kind":"struct"},"2:11405:9242":{"crate_id":2,"path":["core","slice","iter","RSplitN"],"kind":"struct"},"5:3038:8286":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Immut"],"kind":"struct"},"1:3520:3704":{"crate_id":1,"path":["std","io","util","Repeat"],"kind":"struct"},"2:2521:672":{"crate_id":2,"path":["core","ptr","drop_in_place"],"kind":"function"},"24:5949:3621":{"crate_id":24,"path":["syn","ty","TypeParen"],"kind":"struct"},"1:1838:695":{"crate_id":1,"path":["std","env"],"kind":"module"},"16:7590:6808":{"crate_id":16,"path":["gimli","read","rnglists","DebugRanges"],"kind":"struct"},"6:1628:7394":{"crate_id":6,"path":["libc","unix","linux_like","ifaddrs"],"kind":"struct"},"6:1663:7419":{"crate_id":6,"path":["libc","unix","linux_like","arpreq_old"],"kind":"struct"},"5:7431:35562":{"crate_id":5,"path":["alloc","collections","btree","merge_iter","Peeked"],"kind":"enum"},"24:1102:37402":{"crate_id":24,"path":["syn","generics","ConstParamsMut"],"kind":"struct"},"17:2175:23757":{"crate_id":17,"path":["object","read","elf","relocation","ElfRelaIterator"],"kind":"enum"},"16:6066:9011":{"crate_id":16,"path":["gimli","read","cfi","RegisterRuleIter"],"kind":"struct"},"2:2638:103":{"crate_id":2,"path":["core","borrow","BorrowMut"],"kind":"trait"},"24:2403:3639":{"crate_id":24,"path":["syn","punctuated","IterMut"],"kind":"struct"},"24:2140:2196":{"crate_id":24,"path":["syn","punctuated","Punctuated"],"kind":"struct"},"5:40:5146":{"crate_id":5,"path":["alloc","raw_vec","RawVec"],"kind":"struct"},"1:6562:186":{"crate_id":1,"path":["std","sync","mutex","Mutex"],"kind":"struct"},"1:8620:10922":{"crate_id":1,"path":["std","os","unix","net","listener","Incoming"],"kind":"struct"},"2:44193:9196":{"crate_id":2,"path":["core","str","iter","EscapeUnicode"],"kind":"struct"},"1:8792:8789":{"crate_id":1,"path":["std","path","PrefixComponent"],"kind":"struct"},"24:4745:3945":{"crate_id":24,"path":["syn","token","RArrow"],"kind":"struct"},"21:1974:5256":{"crate_id":21,"path":["proc_macro","bridge","LitKind"],"kind":"enum"},"17:15176:6463":{"crate_id":17,"path":["object","pe","ImageAuxSymbolSection"],"kind":"struct"},"18:531:8916":{"crate_id":18,"path":["memchr","memmem","prefilter","PrefilterState"],"kind":"struct"},"2:13649:16288":{"crate_id":2,"path":["core","future","poll_fn","PollFn"],"kind":"struct"},"17:15151:6455":{"crate_id":17,"path":["object","pe","ImageAuxSymbolFunctionBeginEnd"],"kind":"struct"},"6:4971:7555":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_envelope"],"kind":"struct"},"17:12464:23849":{"crate_id":17,"path":["object","read","pe","resource","ResourceDirectoryEntryData"],"kind":"enum"},"17:12225:23823":{"crate_id":17,"path":["object","read","pe","section","PeSegmentIterator"],"kind":"struct"},"17:10887:37196":{"crate_id":17,"path":["object","read","any","DynamicRelocationIteratorInternal"],"kind":"enum"},"13:229:7143":{"crate_id":13,"path":["std_detect","detect","cache","Initializer"],"kind":"struct"},"6:1692:7430":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_un"],"kind":"struct"},"1:11083:5561":{"crate_id":1,"path":["std","sys","pal","unix","process","process_inner","do_exec","Reset"],"kind":"struct"},"17:13972:5870":{"crate_id":17,"path":["object","macho","Dylib"],"kind":"struct"},"16:7711:210":{"crate_id":16,"path":["gimli","read","rnglists","Range"],"kind":"struct"},"6:6562:7953":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","timex"],"kind":"struct"},"11:856:10789":{"crate_id":11,"path":["hashbrown","map","RawOccupiedEntryMut"],"kind":"struct"},"2:46348:8623":{"crate_id":2,"path":["core","core_arch","simd","u8x32"],"kind":"struct"},"1:9393:5544":{"crate_id":1,"path":["std","sync","mutex","MappedMutexGuard"],"kind":"struct"},"17:14855:6371":{"crate_id":17,"path":["object","pe","ImageFileHeader"],"kind":"struct"},"2:42710:3786":{"crate_id":2,"path":["core","fmt","num","LowerHex"],"kind":"struct"},"1:8244:28753":{"crate_id":1,"path":["std","io","buffered","linewritershim","LineWriterShim"],"kind":"struct"},"17:12508:5920":{"crate_id":17,"path":["object","read","pe","rich","RichHeaderEntry"],"kind":"struct"},"1:3294:28767":{"crate_id":1,"path":["std","io","stdio","StderrRaw"],"kind":"struct"},"2:10321:3784":{"crate_id":2,"path":["core","fmt","LowerExp"],"kind":"trait"},"1:1069:9098":{"crate_id":1,"path":["std","collections","hash","map","Entry"],"kind":"enum"},"17:15734:6625":{"crate_id":17,"path":["object","pe","ImageCoffSymbolsHeader"],"kind":"struct"},"24:5977:3612":{"crate_id":24,"path":["syn","ty","BareFnArg"],"kind":"struct"},"17:12342:8956":{"crate_id":17,"path":["object","read","pe","import","ImportTable"],"kind":"struct"},"17:11313:8936":{"crate_id":17,"path":["object","read","coff","import","ImportObjectData"],"kind":"struct"},"2:10259:226":{"crate_id":2,"path":["core","fmt","Result"],"kind":"type_alias"},"2:11239:16226":{"crate_id":2,"path":["core","slice","iter","SplitMut"],"kind":"struct"},"2:33443:3680":{"crate_id":2,"path":["core","ops","arith","AddAssign"],"kind":"trait"},"24:5246:3554":{"crate_id":24,"path":["syn","expr","ExprBinary"],"kind":"struct"},"2:3183:3679":{"crate_id":2,"path":["core","ops","arith","Add"],"kind":"trait"},"11:1603:22650":{"crate_id":11,"path":["hashbrown","rustc_entry","RustcVacantEntry"],"kind":"struct"},"17:11583:23746":{"crate_id":17,"path":["object","read","elf","hash","GnuHashTable"],"kind":"struct"},"6:538:7274":{"crate_id":6,"path":["libc","unix","pollfd"],"kind":"struct"},"2:12873:4044":{"crate_id":2,"path":["core","str","pattern"],"kind":"module"},"2:12650:9246":{"crate_id":2,"path":["core","str","iter","MatchesInternal"],"kind":"struct"},"16:8226:23605":{"crate_id":16,"path":["gimli","read","value","ValueType"],"kind":"enum"},"24:5947:3620":{"crate_id":24,"path":["syn","ty","TypeNever"],"kind":"struct"},"2:8174:3717":{"crate_id":2,"path":["core","iter","traits","accum","Product"],"kind":"trait"},"6:8271:8263":{"crate_id":6,"path":["libc","unix","linux_like","linux","fanotify_event_metadata"],"kind":"struct"},"21:141:5266":{"crate_id":21,"path":["proc_macro","bridge","client","Client"],"kind":"struct"},"17:11142:5852":{"crate_id":17,"path":["object","read","coff","symbol","SymbolTable"],"kind":"struct"},"5:1180:35638":{"crate_id":5,"path":["alloc","collections","btree","borrow","DormantMutRef"],"kind":"struct"},"2:40303:9192":{"crate_id":2,"path":["core","async_iter","from_iter","FromIter"],"kind":"struct"},"20:825:2191":{"crate_id":20,"path":["proc_macro2","imp","Group"],"kind":"enum"},"17:13455:6034":{"crate_id":17,"path":["object","elf","ProgramHeader64"],"kind":"struct"},"18:573:5702":{"crate_id":18,"path":["memchr","memmem","twoway","Forward"],"kind":"struct"},"1:6364:5539":{"crate_id":1,"path":["std","sync","mpmc","waker","SyncWaker"],"kind":"struct"},"6:7452:8159":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_fpxreg"],"kind":"struct"},"6:5624:7821":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_ifc_ifcu"],"kind":"union"},"24:274:10295":{"crate_id":24,"path":["syn","attr","parsing","DisplayPath"],"kind":"struct"},"2:40695:133":{"crate_id":2,"path":["core","iter","adapters","enumerate","Enumerate"],"kind":"struct"},"2:42696:2807":{"crate_id":2,"path":["core","fmt","num","Binary"],"kind":"struct"},"24:4810:3950":{"crate_id":24,"path":["syn","token","ShrEq"],"kind":"struct"},"2:6889:3725":{"crate_id":2,"path":["core","iter","adapters","map_windows","MapWindows"],"kind":"struct"},"6:6763:8037":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_options"],"kind":"struct"},"2:8676:3713":{"crate_id":2,"path":["core","iter","traits","marker","TrustedLen"],"kind":"trait"},"17:15333:6501":{"crate_id":17,"path":["object","pe","ImageBoundForwarderRef"],"kind":"struct"},"1:11916:9325":{"crate_id":1,"path":["std","backtrace_rs","backtrace","Frame"],"kind":"struct"},"2:40667:3721":{"crate_id":2,"path":["core","iter","adapters","cloned","Cloned"],"kind":"struct"},"1:10640:5560":{"crate_id":1,"path":["std","sys","pal","unix","stack_overflow","Handler"],"kind":"struct"},"6:4965:7552":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_trigger"],"kind":"struct"},"11:490:154":{"crate_id":11,"path":["hashbrown","map","HashMap"],"kind":"struct"},"11:1728:156":{"crate_id":11,"path":["hashbrown","set","HashSet"],"kind":"struct"},"17:12443:5915":{"crate_id":17,"path":["object","read","pe","resource","ResourceDirectory"],"kind":"struct"},"14:187:22664":{"crate_id":14,"path":["rustc_demangle","SizeLimitedFmtAdapter"],"kind":"struct"},"17:16079:6713":{"crate_id":17,"path":["object","xcoff","Symbol32"],"kind":"struct"},"24:3770:3906":{"crate_id":24,"path":["syn","token","Unsized"],"kind":"struct"},"24:5659:3604":{"crate_id":24,"path":["syn","mac","MacroDelimiter"],"kind":"enum"},"24:2619:5668":{"crate_id":24,"path":["syn","thread","ThreadBound"],"kind":"struct"},"1:12339:1686":{"crate_id":1,"path":["std","slice"],"kind":"primitive"},"2:10104:3776":{"crate_id":2,"path":["core","fmt","builders","FormatterFn"],"kind":"struct"},"2:3754:70":{"crate_id":2,"path":["core","any","Any"],"kind":"trait"},"20:738:2203":{"crate_id":20,"path":["proc_macro2","fallback","Ident"],"kind":"struct"},"2:42936:8547":{"crate_id":2,"path":["core","fmt","rt","Placeholder"],"kind":"struct"},"1:10717:10904":{"crate_id":1,"path":["std","sys","pal","unix","stdio","Stderr"],"kind":"struct"},"1:4214:10951":{"crate_id":1,"path":["std","os","unix","fs","DirBuilderExt"],"kind":"trait"},"16:8216:9117":{"crate_id":16,"path":["gimli","read","unit","DebugTypesUnitHeadersIter"],"kind":"struct"},"14:7:10297":{"crate_id":14,"path":["rustc_demangle","legacy","Demangle"],"kind":"struct"},"2:44920:5143":{"crate_id":2,"path":["core","alloc","AllocError"],"kind":"struct"},"2:44793:150":{"crate_id":2,"path":["core","future","future","Future"],"kind":"trait"},"2:40983:3744":{"crate_id":2,"path":["core","iter","adapters","take_while","TakeWhile"],"kind":"struct"},"5:7128:5500":{"crate_id":5,"path":["alloc","vec","dedup_by","FillGapOnDrop"],"kind":"struct"},"2:40625:3719":{"crate_id":2,"path":["core","iter","adapters","array_chunks","ArrayChunks"],"kind":"struct"},"2:1962:671":{"crate_id":2,"path":["core","mem","drop"],"kind":"function"},"2:41746:8532":{"crate_id":2,"path":["core","net","ip_addr","Ipv4Addr"],"kind":"struct"},"2:3509:211":{"crate_id":2,"path":["core","ops","range","RangeBounds"],"kind":"trait"},"17:12695:23857":{"crate_id":17,"path":["object","read","xcoff","segment","XcoffSegment"],"kind":"struct"},"6:5515:7772":{"crate_id":6,"path":["libc","unix","linux_like","linux","tls12_crypto_info_chacha20_poly1305"],"kind":"struct"},"16:5722:6798":{"crate_id":16,"path":["gimli","read","cfi","EhFrameHdr"],"kind":"struct"},"14:31:10297":{"crate_id":14,"path":["rustc_demangle","v0","Demangle"],"kind":"struct"},"1:11309:8814":{"crate_id":1,"path":["std","sys","personality","dwarf","eh","EHContext"],"kind":"struct"},"1:1475:156":{"crate_id":1,"path":["std","collections","hash","set","HashSet"],"kind":"struct"},"6:6478:7904":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","termios"],"kind":"struct"},"1:11661:9320":{"crate_id":1,"path":["std","sys_common","wtf8","Wtf8Buf"],"kind":"struct"},"5:1545:10786":{"crate_id":5,"path":["alloc","collections","btree","map","ValuesMut"],"kind":"struct"},"2:46217:8616":{"crate_id":2,"path":["core","core_arch","simd","f32x4"],"kind":"struct"},"2:40997:3745":{"crate_id":2,"path":["core","iter","adapters","zip","Zip"],"kind":"struct"},"16:2854:6790":{"crate_id":16,"path":["gimli","common","DebugFrameOffset"],"kind":"struct"},"2:23186:8325":{"crate_id":2,"path":["core","num","nonzero","private","NonZeroIsizeInner"],"kind":"struct"},"2:22443:11161":{"crate_id":2,"path":["core","core_simd","simd","num","uint","SimdUint"],"kind":"trait"},"24:5518:2862":{"crate_id":24,"path":["syn","generics","TraitBound"],"kind":"struct"},"17:13473:6035":{"crate_id":17,"path":["object","elf","Dyn32"],"kind":"struct"},"6:1680:7426":{"crate_id":6,"path":["libc","unix","linux_like","mmsghdr"],"kind":"struct"},"16:2808:6788":{"crate_id":16,"path":["gimli","common","DebugTypesOffset"],"kind":"struct"},"2:42028:3634":{"crate_id":2,"path":["core","option","IntoIter"],"kind":"struct"},"6:5134:7609":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Phdr"],"kind":"struct"},"24:5394:2226":{"crate_id":24,"path":["syn","expr","Member"],"kind":"enum"},"2:44788:8572":{"crate_id":2,"path":["core","future","async_drop","Noop"],"kind":"struct"},"1:974:10790":{"crate_id":1,"path":["std","collections","hash","map","RawVacantEntryMut"],"kind":"struct"},"6:1593:7365":{"crate_id":6,"path":["libc","unix","linux_like","lconv"],"kind":"struct"},"14:202:2637":{"crate_id":14,"path":["rustc_demangle","v0","ParseError"],"kind":"enum"},"17:13424:6025":{"crate_id":17,"path":["object","elf","Rela64"],"kind":"struct"},"17:13308:6007":{"crate_id":17,"path":["object","elf","CompressionHeader64"],"kind":"struct"},"16:7509:23597":{"crate_id":16,"path":["gimli","read","op","Evaluation"],"kind":"struct"},"6:5557:7790":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_setup"],"kind":"struct"},"2:23076:8315":{"crate_id":2,"path":["core","num","nonzero","private","NonZeroU16Inner"],"kind":"struct"},"17:11256:8933":{"crate_id":17,"path":["object","read","coff","import","ImportFile"],"kind":"struct"},"6:4909:7530":{"crate_id":6,"path":["libc","unix","linux_like","linux","sembuf"],"kind":"struct"},"6:5031:7587":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_ff_upload"],"kind":"struct"},"16:5846:8988":{"crate_id":16,"path":["gimli","read","cfi","CfiEntriesIter"],"kind":"struct"},"6:4885:7516":{"crate_id":6,"path":["libc","unix","linux_like","linux","cpu_set_t"],"kind":"struct"},"24:5772:2566":{"crate_id":24,"path":["syn","path","PathArguments"],"kind":"enum"},"17:14111:6163":{"crate_id":17,"path":["object","macho","RoutinesCommand64"],"kind":"struct"},"11:299:9121":{"crate_id":11,"path":["hashbrown","raw","RawIterRange"],"kind":"struct"},"6:7984:8243":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","not_x32","statvfs"],"kind":"struct"},"17:16223:6748":{"crate_id":17,"path":["object","xcoff","StatAux"],"kind":"struct"},"17:13814:6121":{"crate_id":17,"path":["object","macho","MachHeader64"],"kind":"struct"},"2:46443:8642":{"crate_id":2,"path":["core","core_arch","simd","u64x4"],"kind":"struct"},"24:4851:3953":{"crate_id":24,"path":["syn","token","Star"],"kind":"struct"},"16:6494:9047":{"crate_id":16,"path":["gimli","read","aranges","ArangeHeaderIter"],"kind":"struct"},"17:10439:5835":{"crate_id":17,"path":["object","read","util","StringTable"],"kind":"struct"},"17:2234:23745":{"crate_id":17,"path":["object","read","elf","relocation","ElfSectionRelocationIterator"],"kind":"struct"},"2:40848:3727":{"crate_id":2,"path":["core","iter","adapters","step_by","StepBy"],"kind":"struct"},"2:8218:165":{"crate_id":2,"path":["core","iter","traits","collect","IntoIterator"],"kind":"trait"},"15:327:10390":{"crate_id":15,"path":["addr2line","RangeAttributes"],"kind":"struct"},"24:5350:3583":{"crate_id":24,"path":["syn","expr","ExprRepeat"],"kind":"struct"},"2:8364:178":{"crate_id":2,"path":["core","iter","traits","iterator","Iterator"],"kind":"trait"},"2:1762:4988":{"crate_id":2,"path":["core","intrinsics","AggregateRawPtr"],"kind":"trait"},"1:1997:10829":{"crate_id":1,"path":["std","error","Indented"],"kind":"struct"},"17:10185:5827":{"crate_id":17,"path":["object","endian","U16Bytes"],"kind":"struct"},"17:15301:6493":{"crate_id":17,"path":["object","pe","ImageTlsDirectory32"],"kind":"struct"},"24:4653:3939":{"crate_id":24,"path":["syn","token","Percent"],"kind":"struct"},"2:43004:73":{"crate_id":2,"path":["core","fmt","rt","Argument"],"kind":"struct"},"24:5366:3585":{"crate_id":24,"path":["syn","expr","ExprTry"],"kind":"struct"},"5:0:309":{"crate_id":5,"path":["alloc"],"kind":"module"},"17:13538:6051":{"crate_id":17,"path":["object","elf","Verneed"],"kind":"struct"},"17:12371:5945":{"crate_id":17,"path":["object","read","pe","import","Import"],"kind":"enum"},"11:1896:5233":{"crate_id":11,"path":["hashbrown","set","ExtractIf"],"kind":"struct"},"1:8555:10921":{"crate_id":1,"path":["std","net","tcp","IntoIncoming"],"kind":"struct"},"2:13822:5525":{"crate_id":2,"path":["core","task","wake","LocalWaker"],"kind":"struct"},"6:479:7237":{"crate_id":6,"path":["libc","unix","timeval"],"kind":"struct"},"14:165:22657":{"crate_id":14,"path":["rustc_demangle","DemangleStyle"],"kind":"enum"},"1:11506:5564":{"crate_id":1,"path":["std","sys","sync","once","futex","CompletionGuard"],"kind":"struct"},"9:447:22567":{"crate_id":9,"path":["miniz_oxide","MZError"],"kind":"enum"},"17:13344:6014":{"crate_id":17,"path":["object","elf","Sym64"],"kind":"struct"},"17:11089:23696":{"crate_id":17,"path":["object","read","coff","section","CoffSegmentIterator"],"kind":"struct"},"2:3363:5139":{"crate_id":2,"path":["core","ops","deref","DerefPure"],"kind":"trait"},"6:1535:7327":{"crate_id":6,"path":["libc","unix","linux_like","addrinfo"],"kind":"struct"},"6:8253:8260":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_rwlockattr_t"],"kind":"struct"},"1:5280:28954":{"crate_id":1,"path":["std","path","fmt","DebugHelper"],"kind":"struct"},"16:6263:9041":{"crate_id":16,"path":["gimli","read","cfi","PointerEncodingParameters"],"kind":"struct"},"2:2882:77":{"crate_id":2,"path":["core","convert","AsRef"],"kind":"trait"},"17:4821:23859":{"crate_id":17,"path":["object","read","xcoff","symbol","XcoffSymbolIterator"],"kind":"struct"},"6:5370:7700":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlmsgerr"],"kind":"struct"},"17:261:37155":{"crate_id":17,"path":["object","read","util","DebugLen"],"kind":"struct"},"1:8007:5020":{"crate_id":1,"path":["std","thread","ThreadId"],"kind":"struct"},"24:4974:2217":{"crate_id":24,"path":["syn","data","Variant"],"kind":"struct"},"16:5037:6846":{"crate_id":16,"path":["gimli","constants","DwLnct"],"kind":"struct"},"1:7473:33592":{"crate_id":1,"path":["std","sys_common","wstr","WStrUnits"],"kind":"struct"},"1:2463:10852":{"crate_id":1,"path":["std","fs","symlink_metadata"],"kind":"function"},"2:43980:9241":{"crate_id":2,"path":["core","str","iter","SplitN"],"kind":"struct"},"2:46990:8689":{"crate_id":2,"path":["core","core_arch","simd","f32x16"],"kind":"struct"},"24:5940:3617":{"crate_id":24,"path":["syn","ty","TypeImplTrait"],"kind":"struct"},"1:8334:28945":{"crate_id":1,"path":["std","io","error","SimpleMessage"],"kind":"struct"},"24:4240:3911":{"crate_id":24,"path":["syn","token","And"],"kind":"struct"},"6:4837:7485":{"crate_id":6,"path":["libc","unix","linux_like","linux","signalfd_siginfo"],"kind":"struct"},"1:8465:3697":{"crate_id":1,"path":["std","io","util","Empty"],"kind":"struct"},"18:670:27923":{"crate_id":18,"path":["memchr","memmem","FindRevIter"],"kind":"struct"},"24:153:2197":{"crate_id":24,"path":["syn","Token"],"kind":"macro"},"2:42079:4390":{"crate_id":2,"path":["core","panic","unwind_safe","RefUnwindSafe"],"kind":"trait"},"2:22934:33893":{"crate_id":2,"path":["core","num","flt2dec","Sign"],"kind":"enum"},"21:2657:3817":{"crate_id":21,"path":["proc_macro","SourceFile"],"kind":"struct"},"1:8671:8777":{"crate_id":1,"path":["std","os","fd","owned","BorrowedFd"],"kind":"struct"},"1:5698:11020":{"crate_id":1,"path":["std","process","Stdio"],"kind":"struct"},"2:8170:3718":{"crate_id":2,"path":["core","iter","traits","accum","Sum"],"kind":"trait"},"18:113:27911":{"crate_id":18,"path":["memchr","memchr","iter","Memchr3"],"kind":"struct"},"17:14994:6421":{"crate_id":17,"path":["object","pe","Guid"],"kind":"struct"},"2:46120:8611":{"crate_id":2,"path":["core","core_arch","simd","u64x2"],"kind":"struct"},"16:872:37155":{"crate_id":16,"path":["gimli","read","endian_slice","DebugLen"],"kind":"struct"},"20:732:2191":{"crate_id":20,"path":["proc_macro2","fallback","Group"],"kind":"struct"},"24:1914:3756":{"crate_id":24,"path":["syn","parse","Parser"],"kind":"trait"},"21:895:5272":{"crate_id":21,"path":["proc_macro","bridge","client","FreeFunctions"],"kind":"struct"},"2:22626:11154":{"crate_id":2,"path":["core","core_simd","simd","cmp","ord","SimdOrd"],"kind":"trait"},"6:7485:8174":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user_regs_struct"],"kind":"struct"},"17:12659:23853":{"crate_id":17,"path":["object","read","xcoff","comdat","XcoffComdat"],"kind":"struct"},"17:12887:8969":{"crate_id":17,"path":["object","read","ObjectMap"],"kind":"struct"},"6:6409:7872":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","statx_timestamp"],"kind":"struct"},"2:21593:33616":{"crate_id":2,"path":["core","core_simd","swizzle","rotate_elements_right","Rotate"],"kind":"struct"},"16:4560:6831":{"crate_id":16,"path":["gimli","constants","DwEnd"],"kind":"struct"},"17:15138:6449":{"crate_id":17,"path":["object","pe","ImageAuxSymbolFunction"],"kind":"struct"},"1:8721:8786":{"crate_id":1,"path":["std","path","Prefix"],"kind":"enum"},"17:12189:23844":{"crate_id":17,"path":["object","read","pe","file","PeComdatIterator"],"kind":"struct"},"16:3029:5728":{"crate_id":16,"path":["gimli","arch","Arm"],"kind":"struct"},"24:2554:10869":{"crate_id":24,"path":["syn","sealed","lookahead","Sealed"],"kind":"trait"},"1:8513:3730":{"crate_id":1,"path":["std","io","Chain"],"kind":"struct"},"6:4864:7508":{"crate_id":6,"path":["libc","unix","linux_like","linux","itimerspec"],"kind":"struct"},"16:4802:6838":{"crate_id":16,"path":["gimli","constants","DwCc"],"kind":"struct"},"5:3247:3635":{"crate_id":5,"path":["alloc","collections","btree","set","Iter"],"kind":"struct"},"5:4432:265":{"crate_id":5,"path":["alloc","collections","vec_deque","VecDeque"],"kind":"struct"},"2:40382:9195":{"crate_id":2,"path":["core","char","decode","DecodeUtf16Error"],"kind":"struct"},"2:12899:16235":{"crate_id":2,"path":["core","str","pattern","DoubleEndedSearcher"],"kind":"trait"},"5:3288:9129":{"crate_id":5,"path":["alloc","collections","btree","set","Intersection"],"kind":"struct"},"17:10573:37190":{"crate_id":17,"path":["object","read","any","SegmentInternal"],"kind":"enum"},"16:2902:22721":{"crate_id":16,"path":["gimli","common","UnitSectionOffset"],"kind":"enum"},"2:2894:258":{"crate_id":2,"path":["core","convert","TryInto"],"kind":"trait"},"24:3243:2216":{"crate_id":24,"path":["syn","token","Enum"],"kind":"struct"},"24:4298:3915":{"crate_id":24,"path":["syn","token","Caret"],"kind":"struct"},"18:659:27922":{"crate_id":18,"path":["memchr","memmem","FindIter"],"kind":"struct"},"16:2592:6778":{"crate_id":16,"path":["gimli","common","DebugLocListsIndex"],"kind":"struct"},"17:15445:6531":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation64V2"],"kind":"struct"},"1:1101:10303":{"crate_id":1,"path":["std","collections","hash","map","OccupiedError"],"kind":"struct"},"1:10348:28965":{"crate_id":1,"path":["std","sys","pal","unix","os","EnvStrDebug"],"kind":"struct"},"14:40:2203":{"crate_id":14,"path":["rustc_demangle","v0","Ident"],"kind":"struct"},"6:6874:8066":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","sigset_t"],"kind":"struct"},"20:792:252":{"crate_id":20,"path":["proc_macro2","imp","TokenStream"],"kind":"enum"},"24:5251:3570":{"crate_id":24,"path":["syn","expr","ExprBlock"],"kind":"struct"},"23:513:1396":{"crate_id":23,"path":["quote","quote"],"kind":"macro"},"1:8649:8132":{"crate_id":1,"path":["std","os","linux","raw","arch","stat"],"kind":"struct"},"6:564:7287":{"crate_id":6,"path":["libc","unix","itimerval"],"kind":"struct"},"17:14436:6238":{"crate_id":17,"path":["object","macho","LinkerOptionCommand"],"kind":"struct"},"2:32140:7147":{"crate_id":2,"path":["core","convert","Infallible"],"kind":"enum"},"1:7939:5557":{"crate_id":1,"path":["std","backtrace_rs","Bomb"],"kind":"struct"},"2:42157:3635":{"crate_id":2,"path":["core","result","Iter"],"kind":"struct"},"11:2554:37100":{"crate_id":11,"path":["hashbrown","raw","Fallibility"],"kind":"enum"},"2:32217:3822":{"crate_id":2,"path":["core","marker","Sized"],"kind":"trait"},"1:9137:8796":{"crate_id":1,"path":["std","process","ExitStatusError"],"kind":"struct"},"17:13437:6026":{"crate_id":17,"path":["object","elf","ProgramHeader32"],"kind":"struct"},"17:15760:6634":{"crate_id":17,"path":["object","pe","ImageFunctionEntry"],"kind":"struct"},"21:2677:2191":{"crate_id":21,"path":["proc_macro","Group"],"kind":"struct"},"1:12349:890":{"crate_id":1,"path":["std","i16"],"kind":"primitive"},"16:3925:6824":{"crate_id":16,"path":["gimli","constants","DwChildren"],"kind":"struct"},"18:481:8914":{"crate_id":18,"path":["memchr","cow","CowBytes"],"kind":"struct"},"6:5200:7626":{"crate_id":6,"path":["libc","unix","linux_like","linux","posix_spawnattr_t"],"kind":"struct"},"24:3855:268":{"crate_id":24,"path":["syn","token","Yield"],"kind":"struct"},"17:10720:37203":{"crate_id":17,"path":["object","read","any","ComdatSectionIteratorInternal"],"kind":"enum"},"5:6068:16607":{"crate_id":5,"path":["alloc","sync","ArcInner"],"kind":"struct"},"24:4839:3952":{"crate_id":24,"path":["syn","token","SlashEq"],"kind":"struct"},"17:14463:6240":{"crate_id":17,"path":["object","macho","IdentCommand"],"kind":"struct"},"17:13553:6057":{"crate_id":17,"path":["object","elf","Vernaux"],"kind":"struct"},"1:9721:5559":{"crate_id":1,"path":["std","sys","pal","unix","fs","Dir"],"kind":"struct"},"21:2592:3816":{"crate_id":21,"path":["proc_macro","ExpandError"],"kind":"struct"},"17:12150:5902":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbol"],"kind":"struct"},"1:8088:10312":{"crate_id":1,"path":["std","env","JoinPathsError"],"kind":"struct"},"23:38:3268":{"crate_id":23,"path":["quote","format_ident"],"kind":"macro"},"17:12768:23645":{"crate_id":17,"path":["object","read","ObjectKind"],"kind":"enum"},"15:288:22676":{"crate_id":15,"path":["addr2line","LocationRangeIter"],"kind":"struct"},"6:7546:8217":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ipc_perm"],"kind":"struct"},"6:4959:7550":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_replay"],"kind":"struct"},"24:5928:3615":{"crate_id":24,"path":["syn","ty","TypeBareFn"],"kind":"struct"},"24:5626:3597":{"crate_id":24,"path":["syn","lit","LitBool"],"kind":"struct"},"24:4880:3955":{"crate_id":24,"path":["syn","token","Tilde"],"kind":"struct"},"24:4994:3551":{"crate_id":24,"path":["syn","data","FieldsNamed"],"kind":"struct"},"17:12485:23850":{"crate_id":17,"path":["object","read","pe","resource","ResourceNameOrId"],"kind":"enum"},"6:6915:8092":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","semid_ds"],"kind":"struct"},"2:40714:3733":{"crate_id":2,"path":["core","iter","adapters","filter_map","FilterMap"],"kind":"struct"},"23:150:4411":{"crate_id":23,"path":["quote","__private","ThereIsNoIteratorInRepetition"],"kind":"struct"},"2:10311:3778":{"crate_id":2,"path":["core","fmt","Octal"],"kind":"trait"},"17:13024:23679":{"crate_id":17,"path":["object","read","CompressionFormat"],"kind":"enum"},"1:3333:10907":{"crate_id":1,"path":["std","io","stdio","StdinLock"],"kind":"struct"},"2:41190:3698":{"crate_id":2,"path":["core","iter","sources","from_fn","FromFn"],"kind":"struct"},"16:7014:23593":{"crate_id":16,"path":["gimli","read","loclists","RawLocListEntry"],"kind":"enum"},"1:9150:8797":{"crate_id":1,"path":["std","process","ExitCode"],"kind":"struct"},"24:1078:37403":{"crate_id":24,"path":["syn","generics","TypeParams"],"kind":"struct"},"1:8182:9296":{"crate_id":1,"path":["std","fs","OpenOptions"],"kind":"struct"},"1:4916:10959":{"crate_id":1,"path":["std","os","fd","raw","FromRawFd"],"kind":"trait"},"2:0:563":{"crate_id":2,"path":["core"],"kind":"module"},"2:39530:2814":{"crate_id":2,"path":["core","ops","index","Index"],"kind":"trait"},"2:3132:117":{"crate_id":2,"path":["core","marker","Copy"],"kind":"trait"},"5:219:5148":{"crate_id":5,"path":["alloc","boxed","thin","ThinBox"],"kind":"struct"},"6:553:7282":{"crate_id":6,"path":["libc","unix","linger"],"kind":"struct"},"1:4995:10956":{"crate_id":1,"path":["std","os","fd","owned","AsFd"],"kind":"trait"},"24:3821:3909":{"crate_id":24,"path":["syn","token","Where"],"kind":"struct"},"24:4269:3913":{"crate_id":24,"path":["syn","token","AndEq"],"kind":"struct"},"2:44810:227":{"crate_id":2,"path":["core","future","ResumeTy"],"kind":"struct"},"2:40588:5504":{"crate_id":2,"path":["core","ffi","VaListImpl"],"kind":"struct"},"17:12030:23780":{"crate_id":17,"path":["object","read","macho","segment","MachOSegmentIterator"],"kind":"struct"},"21:912:252":{"crate_id":21,"path":["proc_macro","bridge","client","TokenStream"],"kind":"struct"},"1:2316:10849":{"crate_id":1,"path":["std","fs","read_to_string"],"kind":"function"},"2:46422:8641":{"crate_id":2,"path":["core","core_arch","simd","u32x8"],"kind":"struct"},"18:96:27910":{"crate_id":18,"path":["memchr","memchr","iter","Memchr2"],"kind":"struct"},"1:5579:11016":{"crate_id":1,"path":["std","process","Child"],"kind":"struct"},"2:34029:4720":{"crate_id":2,"path":["core","ops","bit","BitOr"],"kind":"trait"},"17:10155:5825":{"crate_id":17,"path":["object","endian","LittleEndian"],"kind":"struct"},"2:46185:8614":{"crate_id":2,"path":["core","core_arch","simd","i32x4"],"kind":"struct"},"21:1781:5255":{"crate_id":21,"path":["proc_macro","bridge","Marked"],"kind":"struct"},"2:10953:10869":{"crate_id":2,"path":["core","slice","index","private_slice_index","Sealed"],"kind":"trait"},"2:10317:3787":{"crate_id":2,"path":["core","fmt","UpperHex"],"kind":"trait"},"2:43257:9227":{"crate_id":2,"path":["core","hash","sip","Sip13Rounds"],"kind":"struct"},"6:1699:7433":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_storage"],"kind":"struct"},"2:10319:206":{"crate_id":2,"path":["core","fmt","Pointer"],"kind":"trait"},"24:1013:3757":{"crate_id":24,"path":["syn","ext","IdentExt"],"kind":"trait"},"1:10714:10908":{"crate_id":1,"path":["std","sys","pal","unix","stdio","Stdout"],"kind":"struct"},"11:1142:22647":{"crate_id":11,"path":["hashbrown","map","VacantEntryRef"],"kind":"struct"},"21:2530:3818":{"crate_id":21,"path":["proc_macro","diagnostic","Level"],"kind":"enum"},"24:5027:3553":{"crate_id":24,"path":["syn","derive","DataEnum"],"kind":"struct"},"2:44140:9250":{"crate_id":2,"path":["core","str","iter","LinesAny"],"kind":"struct"},"11:1582:22649":{"crate_id":11,"path":["hashbrown","rustc_entry","RustcOccupiedEntry"],"kind":"struct"},"17:16176:6740":{"crate_id":17,"path":["object","xcoff","FunAux64"],"kind":"struct"},"2:22876:33884":{"crate_id":2,"path":["core","num","dec2flt","FloatErrorKind"],"kind":"enum"},"2:44044:9245":{"crate_id":2,"path":["core","str","iter","RMatchIndices"],"kind":"struct"},"2:33644:5678":{"crate_id":2,"path":["core","ops","arith","DivAssign"],"kind":"trait"},"1:373:5030":{"crate_id":1,"path":["std","thread","scoped","ScopedJoinHandle"],"kind":"struct"},"1:4206:10949":{"crate_id":1,"path":["std","os","unix","fs","DirEntryExt2"],"kind":"trait"},"6:8351:8282":{"crate_id":6,"path":["libc","unix","align","in6_addr"],"kind":"struct"},"21:214:10372":{"crate_id":21,"path":["proc_macro","bridge","fxhash","FxHasher"],"kind":"struct"},"17:11153:23672":{"crate_id":17,"path":["object","read","coff","symbol","SymbolIterator"],"kind":"struct"},"2:39885:4801":{"crate_id":2,"path":["core","ascii","ascii_char","AsciiChar"],"kind":"enum"},"1:2713:5514":{"crate_id":1,"path":["std","io","buffered","bufwriter","flush_buf","BufGuard"],"kind":"struct"},"17:11661:8942":{"crate_id":17,"path":["object","read","elf","version","VerneedIterator"],"kind":"struct"},"16:8175:23603":{"crate_id":16,"path":["gimli","read","unit","EntriesTreeNode"],"kind":"struct"},"6:6597:7975":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ntptimeval"],"kind":"struct"},"2:39450:16261":{"crate_id":2,"path":["core","ops","control_flow","ControlFlow"],"kind":"enum"},"5:952:3635":{"crate_id":5,"path":["alloc","collections","binary_heap","Iter"],"kind":"struct"},"24:5523:2865":{"crate_id":24,"path":["syn","generics","TraitBoundModifier"],"kind":"enum"},"1:5593:11017":{"crate_id":1,"path":["std","process","ChildStdin"],"kind":"struct"},"2:40297:9191":{"crate_id":2,"path":["core","ascii","EscapeDefault"],"kind":"struct"},"1:10414:11024":{"crate_id":1,"path":["std","sys","pal","unix","pipe","AnonPipe"],"kind":"struct"},"2:43465:9229":{"crate_id":2,"path":["core","slice","ascii","EscapeByte"],"kind":"struct"},"5:3801:3770":{"crate_id":5,"path":["alloc","collections","linked_list","Cursor"],"kind":"struct"},"17:12851:8968":{"crate_id":17,"path":["object","read","SymbolMap"],"kind":"struct"},"2:39547:213":{"crate_id":2,"path":["core","ops","range","RangeFull"],"kind":"struct"},"2:45911:8591":{"crate_id":2,"path":["core","core_arch","simd","u16x4"],"kind":"struct"},"24:5264:3556":{"crate_id":24,"path":["syn","expr","ExprCast"],"kind":"struct"},"6:7306:8099":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","sigaction"],"kind":"struct"},"2:6077:3734":{"crate_id":2,"path":["core","iter","adapters","flatten","FlatMap"],"kind":"struct"},"17:14038:6153":{"crate_id":17,"path":["object","macho","SubLibraryCommand"],"kind":"struct"},"1:12317:28802":{"crate_id":1,"path":["std","backtrace_rs","print","PrintFmt"],"kind":"enum"},"24:5013:2208":{"crate_id":24,"path":["syn","derive","Data"],"kind":"enum"},"17:14079:6159":{"crate_id":17,"path":["object","macho","ThreadCommand"],"kind":"struct"},"1:932:5233":{"crate_id":1,"path":["std","collections","hash","map","ExtractIf"],"kind":"struct"},"2:22136:8294":{"crate_id":2,"path":["core","core_simd","vector","Simd"],"kind":"struct"},"6:6460:7892":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","msghdr"],"kind":"struct"},"17:15836:6650":{"crate_id":17,"path":["object","pe","ImageCor20Header"],"kind":"struct"},"24:1802:2277":{"crate_id":24,"path":["syn","parse","ParseStream"],"kind":"type_alias"},"2:22949:33895":{"crate_id":2,"path":["core","num","fmt","Part"],"kind":"enum"},"5:732:250":{"crate_id":5,"path":["alloc","borrow","ToOwned"],"kind":"trait"},"6:1565:7346":{"crate_id":6,"path":["libc","unix","linux_like","tm"],"kind":"struct"},"11:2423:3634":{"crate_id":11,"path":["hashbrown","table","IntoIter"],"kind":"struct"},"17:12478:5916":{"crate_id":17,"path":["object","read","pe","resource","ResourceName"],"kind":"struct"},"1:9124:8795":{"crate_id":1,"path":["std","process","ExitStatus"],"kind":"struct"},"1:1968:10313":{"crate_id":1,"path":["std","error","Report"],"kind":"struct"},"2:32275:3823":{"crate_id":2,"path":["core","marker","Unpin"],"kind":"trait"},"16:2528:6775":{"crate_id":16,"path":["gimli","common","DebugLineStrOffset"],"kind":"struct"},"2:43835:9231":{"crate_id":2,"path":["core","str","error","ParseBoolError"],"kind":"struct"},"2:41239:3710":{"crate_id":2,"path":["core","iter","sources","successors","Successors"],"kind":"struct"},"17:15376:6515":{"crate_id":17,"path":["object","pe","ImageResourceDirectoryString"],"kind":"struct"},"5:7547:3691":{"crate_id":5,"path":["alloc","collections","TryReserveErrorKind"],"kind":"enum"},"2:39642:216":{"crate_id":2,"path":["core","ops","range","RangeToInclusive"],"kind":"struct"},"17:13774:6113":{"crate_id":17,"path":["object","macho","FatArch32"],"kind":"struct"},"2:4784:3800":{"crate_id":2,"path":["core","cell","RefMut"],"kind":"struct"},"16:6532:9050":{"crate_id":16,"path":["gimli","read","aranges","ArangeEntryIter"],"kind":"struct"},"6:5643:7830":{"crate_id":6,"path":["libc","unix","linux_like","linux","dirent64"],"kind":"struct"},"5:7421:9146":{"crate_id":5,"path":["alloc","collections","btree","map","UnorderedKeyError"],"kind":"struct"},"17:12949:5909":{"crate_id":17,"path":["object","read","Export"],"kind":"struct"},"6:6788:8046":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","sifields_sigchld"],"kind":"struct"},"2:3268:3934":{"crate_id":2,"path":["core","ops","bit","Not"],"kind":"trait"},"2:4431:16265":{"crate_id":2,"path":["core","async_iter","async_iter","IntoAsyncIterator"],"kind":"trait"},"5:2098:3770":{"crate_id":5,"path":["alloc","collections","btree","map","Cursor"],"kind":"struct"},"2:41212:3704":{"crate_id":2,"path":["core","iter","sources","repeat","Repeat"],"kind":"struct"},"2:11419:16231":{"crate_id":2,"path":["core","slice","iter","SplitNMut"],"kind":"struct"},"1:968:10789":{"crate_id":1,"path":["std","collections","hash","map","RawOccupiedEntryMut"],"kind":"struct"},"16:5817:8983":{"crate_id":16,"path":["gimli","read","cfi","BaseAddresses"],"kind":"struct"},"24:5345:3562":{"crate_id":24,"path":["syn","expr","ExprReference"],"kind":"struct"},"24:4600:3935":{"crate_id":24,"path":["syn","token","Or"],"kind":"struct"},"1:9209:11044":{"crate_id":1,"path":["std","sync","mpsc","TryRecvError"],"kind":"enum"},"21:2553:8910":{"crate_id":21,"path":["proc_macro","diagnostic","Children"],"kind":"struct"},"1:10978:28834":{"crate_id":1,"path":["std","sys","pal","unix","kernel_copy","FdHandle"],"kind":"enum"},"1:8025:5017":{"crate_id":1,"path":["std","thread","Thread"],"kind":"struct"},"17:10818:23672":{"crate_id":17,"path":["object","read","any","SymbolIterator"],"kind":"struct"},"2:23065:8314":{"crate_id":2,"path":["core","num","nonzero","private","NonZeroU8Inner"],"kind":"struct"},"6:6621:7987":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","Elf64_Chdr"],"kind":"struct"},"18:0:3399":{"crate_id":18,"path":["memchr"],"kind":"module"},"17:12824:23677":{"crate_id":17,"path":["object","read","SymbolSection"],"kind":"enum"},"1:12332:417":{"crate_id":1,"path":["std","bool"],"kind":"primitive"},"16:4830:6839":{"crate_id":16,"path":["gimli","constants","DwInl"],"kind":"struct"},"2:44437:9266":{"crate_id":2,"path":["core","str","pattern","StrSearcher"],"kind":"struct"},"1:7140:11071":{"crate_id":1,"path":["std","std_float","StdFloat"],"kind":"trait"},"1:12333:1173":{"crate_id":1,"path":["std","never"],"kind":"primitive"},"2:10313:2807":{"crate_id":2,"path":["core","fmt","Binary"],"kind":"trait"},"2:44184:9191":{"crate_id":2,"path":["core","str","iter","EscapeDefault"],"kind":"struct"},"24:5318:3559":{"crate_id":24,"path":["syn","expr","ExprMacro"],"kind":"struct"},"21:1089:208":{"crate_id":21,"path":["proc_macro","bridge","client","ProcMacro"],"kind":"enum"},"17:16093:6717":{"crate_id":17,"path":["object","xcoff","Symbol64"],"kind":"struct"},"6:5266:7659":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_extended_err"],"kind":"struct"},"16:6120:23586":{"crate_id":16,"path":["gimli","read","cfi","RegisterRule"],"kind":"enum"},"1:6912:233":{"crate_id":1,"path":["std","sync","rwlock","RwLock"],"kind":"struct"},"2:15:3032":{"crate_id":2,"path":["core","write"],"kind":"macro"},"24:3668:253":{"crate_id":24,"path":["syn","token","Trait"],"kind":"struct"},"24:5370:3586":{"crate_id":24,"path":["syn","expr","ExprTryBlock"],"kind":"struct"},"2:42165:3639":{"crate_id":2,"path":["core","result","IterMut"],"kind":"struct"},"24:4897:2883":{"crate_id":24,"path":["syn","token","Brace"],"kind":"struct"},"11:1883:3635":{"crate_id":11,"path":["hashbrown","set","Iter"],"kind":"struct"},"1:11820:10923":{"crate_id":1,"path":["std","sys_common","net","TcpListener"],"kind":"struct"},"17:13116:5962":{"crate_id":17,"path":["object","archive","AixHeader"],"kind":"struct"},"11:1887:3634":{"crate_id":11,"path":["hashbrown","set","IntoIter"],"kind":"struct"},"1:5827:220":{"crate_id":1,"path":["std","sync","mpsc","Receiver"],"kind":"struct"},"2:8207:145":{"crate_id":2,"path":["core","iter","traits","collect","FromIterator"],"kind":"trait"},"16:2660:6781":{"crate_id":16,"path":["gimli","common","RawRangeListsOffset"],"kind":"struct"},"1:6272:5535":{"crate_id":1,"path":["std","sync","mpmc","list","Channel"],"kind":"struct"},"1:10920:9296":{"crate_id":1,"path":["std","sys","pal","unix","fs","OpenOptions"],"kind":"struct"},"24:2988:3877":{"crate_id":24,"path":["syn","token","Abstract"],"kind":"struct"},"16:6813:9068":{"crate_id":16,"path":["gimli","read","line","LineProgramHeader"],"kind":"struct"},"17:16121:6724":{"crate_id":17,"path":["object","xcoff","FileAux64"],"kind":"struct"},"17:1207:23702":{"crate_id":17,"path":["object","read","coff","relocation","CoffRelocationIterator"],"kind":"struct"},"1:5841:9293":{"crate_id":1,"path":["std","sync","mpsc","SyncSender"],"kind":"struct"},"0:965:2061":{"crate_id":0,"path":["serde_derive","Deserialize"],"kind":"proc_derive"},"16:6620:6870":{"crate_id":16,"path":["gimli","read","index","UnitIndexSection"],"kind":"struct"},"6:7359:8128":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stack_t"],"kind":"struct"},"11:2542:7144":{"crate_id":11,"path":["hashbrown","raw","bitmask","BitMask"],"kind":"struct"},"17:10068:23647":{"crate_id":17,"path":["object","common","SectionFlags"],"kind":"enum"},"1:896:9127":{"crate_id":1,"path":["std","collections","hash","map","Keys"],"kind":"struct"},"5:1586:10794":{"crate_id":5,"path":["alloc","collections","btree","map","RangeMut"],"kind":"struct"},"1:9446:8807":{"crate_id":1,"path":["std","time","SystemTime"],"kind":"struct"},"5:7381:3634":{"crate_id":5,"path":["alloc","collections","binary_heap","IntoIter"],"kind":"struct"},"24:3566:228":{"crate_id":24,"path":["syn","token","Return"],"kind":"struct"},"2:6191:3723":{"crate_id":2,"path":["core","iter","adapters","flatten","Flatten"],"kind":"struct"},"16:6991:37126":{"crate_id":16,"path":["gimli","read","loclists","LocListsFormat"],"kind":"enum"},"2:4377:34162":{"crate_id":2,"path":["core","asserting","TryCaptureWithDebug"],"kind":"struct"},"11:710:10414":{"crate_id":11,"path":["hashbrown","map","IntoKeys"],"kind":"struct"},"2:22983:8313":{"crate_id":2,"path":["core","num","error","TryFromIntError"],"kind":"struct"},"21:127:5438":{"crate_id":21,"path":["proc_macro","bridge","client","state","set","RestoreOnDrop"],"kind":"struct"},"17:11227:23692":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdat"],"kind":"struct"},"8:0:3390":{"crate_id":8,"path":["cfg_if"],"kind":"module"},"1:6451:5540":{"crate_id":1,"path":["std","sync","mpmc","Sender"],"kind":"struct"},"17:12494:5917":{"crate_id":17,"path":["object","read","pe","rich","RichHeaderInfo"],"kind":"struct"},"6:5423:7726":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_sndrcvinfo"],"kind":"struct"},"23:148:4412":{"crate_id":23,"path":["quote","__private","HasIterator"],"kind":"struct"},"6:6706:8019":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_mmap_offsets"],"kind":"struct"},"1:8523:3743":{"crate_id":1,"path":["std","io","Take"],"kind":"struct"},"17:15116:6445":{"crate_id":17,"path":["object","pe","ImageSymbolExBytes"],"kind":"struct"},"16:6872:9081":{"crate_id":16,"path":["gimli","read","line","CompleteLineProgram"],"kind":"struct"},"2:39602:215":{"crate_id":2,"path":["core","ops","range","RangeTo"],"kind":"struct"},"1:3897:10923":{"crate_id":1,"path":["std","net","tcp","TcpListener"],"kind":"struct"},"16:150:5440":{"crate_id":16,"path":["gimli","read","util","ArrayVec"],"kind":"struct"},"2:42068:4388":{"crate_id":2,"path":["core","panic","panic_info","PanicInfo"],"kind":"struct"},"2:47159:8700":{"crate_id":2,"path":["core","core_arch","x86","__m512"],"kind":"struct"},"1:2070:197":{"crate_id":1,"path":["std","ffi","os_str","OsStr"],"kind":"struct"},"5:741:118":{"crate_id":5,"path":["alloc","borrow","Cow"],"kind":"enum"},"1:4810:8145":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt","st_mtime"],"kind":"function"},"1:2004:784":{"crate_id":1,"path":["std","ffi"],"kind":"module"},"17:15635:6601":{"crate_id":17,"path":["object","pe","ImageAlphaRuntimeFunctionEntry"],"kind":"struct"},"5:1200:37090":{"crate_id":5,"path":["alloc","collections","btree","dedup_sorted_iter","DedupSortedIter"],"kind":"struct"},"2:46932:8687":{"crate_id":2,"path":["core","core_arch","simd","i32x16"],"kind":"struct"},"1:4324:10970":{"crate_id":1,"path":["std","os","unix","net","ancillary","ScmCredentials"],"kind":"struct"},"2:11277:16232":{"crate_id":2,"path":["core","slice","iter","SplitInclusiveMut"],"kind":"struct"},"2:2537:5172":{"crate_id":2,"path":["core","ptr","with_exposed_provenance_mut"],"kind":"function"},"21:2596:3634":{"crate_id":21,"path":["proc_macro","token_stream","IntoIter"],"kind":"struct"},"1:10969:8772":{"crate_id":1,"path":["std","sys","pal","unix","io","IoSlice"],"kind":"struct"},"24:703:3635":{"crate_id":24,"path":["syn","error","Iter"],"kind":"struct"},"2:4651:3789":{"crate_id":2,"path":["core","cell","BorrowError"],"kind":"struct"},"2:40838:3742":{"crate_id":2,"path":["core","iter","adapters","skip_while","SkipWhile"],"kind":"struct"},"17:16050:6002":{"crate_id":17,"path":["object","xcoff","SectionHeader64"],"kind":"struct"},"6:5382:7704":{"crate_id":6,"path":["libc","unix","linux_like","linux","file_clone_range"],"kind":"struct"},"17:13674:6075":{"crate_id":17,"path":["object","macho","DyldCacheHeader"],"kind":"struct"},"17:15931:5975":{"crate_id":17,"path":["object","xcoff","FileHeader32"],"kind":"struct"},"2:44130:9249":{"crate_id":2,"path":["core","str","iter","Lines"],"kind":"struct"},"2:41984:194":{"crate_id":2,"path":["core","option","Option"],"kind":"enum"},"24:5618:3598":{"crate_id":24,"path":["syn","lit","LitByte"],"kind":"struct"},"2:46961:8688":{"crate_id":2,"path":["core","core_arch","simd","u32x16"],"kind":"struct"},"1:11757:5566":{"crate_id":1,"path":["std","sys_common","net","LookupHost"],"kind":"struct"},"6:4924:7536":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_id"],"kind":"struct"},"5:2123:10796":{"crate_id":5,"path":["alloc","collections","btree","map","CursorMutKey"],"kind":"struct"},"1:10987:28832":{"crate_id":1,"path":["std","sys","pal","unix","kernel_copy","SpliceMode"],"kind":"enum"},"2:40737:3735":{"crate_id":2,"path":["core","iter","adapters","fuse","Fuse"],"kind":"struct"},"2:13802:5523":{"crate_id":2,"path":["core","task","wake","Waker"],"kind":"struct"},"24:5255:3571":{"crate_id":24,"path":["syn","expr","ExprBreak"],"kind":"struct"},"5:5930:5235":{"crate_id":5,"path":["alloc","string","Drain"],"kind":"struct"},"1:2307:138":{"crate_id":1,"path":["std","fs","File"],"kind":"struct"},"21:2544:126":{"crate_id":21,"path":["proc_macro","diagnostic","Diagnostic"],"kind":"struct"},"18:589:5709":{"crate_id":18,"path":["memchr","memmem","twoway","TwoWay"],"kind":"struct"},"16:6948:6802":{"crate_id":16,"path":["gimli","read","loclists","DebugLoc"],"kind":"struct"},"2:23120:8319":{"crate_id":2,"path":["core","num","nonzero","private","NonZeroUsizeInner"],"kind":"struct"},"2:44851:10027":{"crate_id":2,"path":["core","task","wake","RawWaker"],"kind":"struct"},"21:109:5265":{"crate_id":21,"path":["proc_macro","bridge","client","Bridge"],"kind":"struct"},"11:2231:9132":{"crate_id":11,"path":["hashbrown","table","HashTable"],"kind":"struct"},"1:9365:8806":{"crate_id":1,"path":["std","sync","mpmc","utils","CachePadded"],"kind":"struct"},"17:14177:6188":{"crate_id":17,"path":["object","macho","DylibTableOfContents"],"kind":"struct"},"11:774:9127":{"crate_id":11,"path":["hashbrown","map","Keys"],"kind":"struct"},"16:4352:6826":{"crate_id":16,"path":["gimli","constants","DwAt"],"kind":"struct"},"16:0:3397":{"crate_id":16,"path":["gimli"],"kind":"module"},"24:5401:2814":{"crate_id":24,"path":["syn","expr","Index"],"kind":"struct"},"2:21838:8293":{"crate_id":2,"path":["core","core_simd","masks","Mask"],"kind":"struct"},"2:11312:9167":{"crate_id":2,"path":["core","slice","iter","RSplit"],"kind":"struct"},"16:8093:7011":{"crate_id":16,"path":["gimli","read","unit","AttrsIter"],"kind":"struct"},"2:3627:3805":{"crate_id":2,"path":["core","ops","unsize","CoerceUnsized"],"kind":"trait"},"1:11924:9325":{"crate_id":1,"path":["std","backtrace_rs","backtrace","libunwind","Frame"],"kind":"enum"},"21:2287:2203":{"crate_id":21,"path":["proc_macro","bridge","Ident"],"kind":"struct"},"2:13597:35363":{"crate_id":2,"path":["core","future","join","MaybeDone"],"kind":"enum"},"2:41724:170":{"crate_id":2,"path":["core","net","ip_addr","IpAddr"],"kind":"enum"},"2:42520:90":{"crate_id":2,"path":["core","sync","atomic","AtomicIsize"],"kind":"struct"},"11:1923:2240":{"crate_id":11,"path":["hashbrown","set","Union"],"kind":"struct"},"1:12334:471":{"crate_id":1,"path":["std","char"],"kind":"primitive"},"2:13859:152":{"crate_id":2,"path":["core","alloc","global","GlobalAlloc"],"kind":"trait"},"20:693:3770":{"crate_id":20,"path":["proc_macro2","parse","Cursor"],"kind":"struct"},"2:22467:10869":{"crate_id":2,"path":["core","core_simd","simd","num","sealed","Sealed"],"kind":"trait"},"17:12328:8952":{"crate_id":17,"path":["object","read","pe","export","ExportTable"],"kind":"struct"},"1:2226:128":{"crate_id":1,"path":["std","ffi","os_str","Display"],"kind":"struct"},"24:4699:3942":{"crate_id":24,"path":["syn","token","PlusEq"],"kind":"struct"},"24:4501:3928":{"crate_id":24,"path":["syn","token","LArrow"],"kind":"struct"},"5:3042:3897":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Mut"],"kind":"struct"},"17:14599:6263":{"crate_id":17,"path":["object","macho","ScatteredRelocationInfo"],"kind":"struct"},"2:2274:5140":{"crate_id":2,"path":["core","ptr","unique","Unique"],"kind":"struct"},"2:22495:5171":{"crate_id":2,"path":["core","core_simd","simd","ptr","const_ptr","SimdConstPtr","with_exposed_provenance"],"kind":"function"},"2:40393:9196":{"crate_id":2,"path":["core","char","EscapeUnicode"],"kind":"struct"},"17:13738:6104":{"crate_id":17,"path":["object","macho","DyldCacheImageInfo"],"kind":"struct"},"16:7604:6809":{"crate_id":16,"path":["gimli","read","rnglists","DebugRngLists"],"kind":"struct"},"5:6689:3634":{"crate_id":5,"path":["alloc","vec","into_iter","IntoIter"],"kind":"struct"},"1:9312:28951":{"crate_id":1,"path":["std","sync","mpmc","list","Position"],"kind":"struct"},"17:15616:6595":{"crate_id":17,"path":["object","pe","ImageArm64RuntimeFunctionEntry"],"kind":"struct"},"17:9886:23662":{"crate_id":17,"path":["object","common","SymbolKind"],"kind":"enum"},"24:3430:2889":{"crate_id":24,"path":["syn","token","Match"],"kind":"struct"},"6:5014:7579":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_rumble_effect"],"kind":"struct"},"17:10092:23667":{"crate_id":17,"path":["object","common","SymbolFlags"],"kind":"enum"},"20:358:3653":{"crate_id":20,"path":["proc_macro2","imp","LexError"],"kind":"enum"},"16:7799:6799":{"crate_id":16,"path":["gimli","read","unit","DebugInfo"],"kind":"struct"},"5:4934:217":{"crate_id":5,"path":["alloc","rc","Rc"],"kind":"struct"},"21:365:5259":{"crate_id":21,"path":["proc_macro","bridge","rpc","PanicMessage"],"kind":"enum"},"17:11567:23770":{"crate_id":17,"path":["object","read","elf","note","GnuProperty"],"kind":"struct"},"17:13064:5955":{"crate_id":17,"path":["object","read","CompressedData"],"kind":"struct"},"24:4281:3914":{"crate_id":24,"path":["syn","token","At"],"kind":"struct"},"16:7473:6958":{"crate_id":16,"path":["gimli","read","op","Expression"],"kind":"struct"},"5:1735:5451":{"crate_id":5,"path":["alloc","collections","btree","map","drop","DropGuard"],"kind":"struct"},"5:5418:5451":{"crate_id":5,"path":["alloc","slice","hack","to_vec","DropGuard"],"kind":"struct"},"2:43852:9233":{"crate_id":2,"path":["core","str","iter","CharIndices"],"kind":"struct"},"20:933:2269":{"crate_id":20,"path":["proc_macro2","Spacing"],"kind":"enum"},"17:12408:5911":{"crate_id":17,"path":["object","read","pe","relocation","RelocationBlockIterator"],"kind":"struct"},"11:2369:22651":{"crate_id":11,"path":["hashbrown","table","AbsentEntry"],"kind":"struct"},"17:12647:23854":{"crate_id":17,"path":["object","read","xcoff","comdat","XcoffComdatIterator"],"kind":"struct"},"5:4278:5475":{"crate_id":5,"path":["alloc","collections","vec_deque","into_iter","try_rfold","Guard"],"kind":"struct"},"1:2067:198":{"crate_id":1,"path":["std","ffi","os_str","OsString"],"kind":"struct"},"11:832:10786":{"crate_id":11,"path":["hashbrown","map","ValuesMut"],"kind":"struct"},"5:7562:5022":{"crate_id":5,"path":["alloc","ffi","c_str","CString"],"kind":"struct"},"1:7718:32055":{"crate_id":1,"path":["std","panicking","Hook"],"kind":"enum"},"1:2735:10317":{"crate_id":1,"path":["std","io","buffered","bufwriter","WriterPanicked"],"kind":"struct"},"2:3172:4781":{"crate_id":2,"path":["core","marker","Freeze"],"kind":"trait"},"2:22621:11156":{"crate_id":2,"path":["core","core_simd","simd","cmp","ord","SimdPartialOrd"],"kind":"trait"},"24:5277:3574":{"crate_id":24,"path":["syn","expr","ExprContinue"],"kind":"struct"},"24:4947:2404":{"crate_id":24,"path":["syn","attr","Meta"],"kind":"enum"},"24:1707:2275":{"crate_id":24,"path":["syn","meta","ParseNestedMeta"],"kind":"struct"},"1:12352:883":{"crate_id":1,"path":["std","i128"],"kind":"primitive"},"1:3832:10920":{"crate_id":1,"path":["std","net","socket_addr","ToSocketAddrs"],"kind":"trait"},"2:47087:8694":{"crate_id":2,"path":["core","core_arch","x86","__m128"],"kind":"struct"},"24:3175:123":{"crate_id":24,"path":["syn","token","Default"],"kind":"struct"},"2:8256:129":{"crate_id":2,"path":["core","iter","traits","double_ended","DoubleEndedIterator"],"kind":"trait"},"5:7481:3634":{"crate_id":5,"path":["alloc","collections","linked_list","IntoIter"],"kind":"struct"},"17:11755:8950":{"crate_id":17,"path":["object","read","elf","attributes","AttributeIndexIterator"],"kind":"struct"},"6:7429:8152":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statvfs64"],"kind":"struct"},"2:42440:88":{"crate_id":2,"path":["core","sync","atomic","AtomicI64"],"kind":"struct"},"7:32:22553":{"crate_id":7,"path":["unwind","libunwind","_Unwind_Reason_Code"],"kind":"enum"},"24:5566:2544":{"crate_id":24,"path":["syn","lit","Lit"],"kind":"enum"},"2:47133:8698":{"crate_id":2,"path":["core","core_arch","x86","__m256d"],"kind":"struct"},"11:2304:9098":{"crate_id":11,"path":["hashbrown","table","Entry"],"kind":"enum"},"21:2200:3656":{"crate_id":21,"path":["proc_macro","bridge","DelimSpan"],"kind":"struct"},"2:42078:4391":{"crate_id":2,"path":["core","panic","unwind_safe","UnwindSafe"],"kind":"trait"},"2:12833:3659":{"crate_id":2,"path":["core","str","traits","FromStr"],"kind":"trait"},"16:3014:22723":{"crate_id":16,"path":["gimli","common","DwarfFileType"],"kind":"enum"},"21:2228:2191":{"crate_id":21,"path":["proc_macro","bridge","Group"],"kind":"struct"},"24:3158:3883":{"crate_id":24,"path":["syn","token","Crate"],"kind":"struct"},"17:11128:5816":{"crate_id":17,"path":["object","read","coff","section","CoffSection"],"kind":"struct"},"16:3810:6821":{"crate_id":16,"path":["gimli","constants","DwSectV2"],"kind":"struct"},"24:5382:3588":{"crate_id":24,"path":["syn","expr","ExprUnsafe"],"kind":"struct"},"6:6542:7937":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","rtentry"],"kind":"struct"},"24:4315:3916":{"crate_id":24,"path":["syn","token","CaretEq"],"kind":"struct"},"2:3612:34123":{"crate_id":2,"path":["core","ops","try_trait","NeverShortCircuitResidual"],"kind":"enum"},"2:32200:3798":{"crate_id":2,"path":["core","error","tags","Ref"],"kind":"struct"},"17:15368:6512":{"crate_id":17,"path":["object","pe","ImageResourceDirectoryEntry"],"kind":"struct"},"2:39622:214":{"crate_id":2,"path":["core","ops","range","RangeInclusive"],"kind":"struct"},"2:23007:10940":{"crate_id":2,"path":["core","num","error","IntErrorKind"],"kind":"enum"},"2:30620:3775":{"crate_id":2,"path":["core","ptr","alignment","Alignment"],"kind":"struct"},"24:2342:3637":{"crate_id":24,"path":["syn","punctuated","PrivateIter"],"kind":"struct"},"1:6396:10423":{"crate_id":1,"path":["std","sync","mpmc","zero","ZeroToken"],"kind":"struct"},"5:7723:5233":{"crate_id":5,"path":["alloc","vec","extract_if","ExtractIf"],"kind":"struct"},"1:9415:5550":{"crate_id":1,"path":["std","sync","rwlock","MappedRwLockReadGuard"],"kind":"struct"},"2:4288:5475":{"crate_id":2,"path":["core","array","Guard"],"kind":"struct"},"2:1788:2756":{"crate_id":2,"path":["core","mem"],"kind":"module"},"1:4763:10994":{"crate_id":1,"path":["std","os","unix","thread","JoinHandleExt"],"kind":"trait"},"2:46249:8618":{"crate_id":2,"path":["core","core_arch","simd","f64x4"],"kind":"struct"},"24:3702:2186":{"crate_id":24,"path":["syn","token","Type"],"kind":"struct"},"2:45796:8576":{"crate_id":2,"path":["core","core_arch","simd","u8x2"],"kind":"struct"},"6:517:7262":{"crate_id":6,"path":["libc","unix","ipv6_mreq"],"kind":"struct"},"16:6606:9060":{"crate_id":16,"path":["gimli","read","index","UnitIndexSectionIterator"],"kind":"struct"},"17:14575:5912":{"crate_id":17,"path":["object","macho","Relocation"],"kind":"struct"},"24:4257:3912":{"crate_id":24,"path":["syn","token","AndAnd"],"kind":"struct"},"6:491:7242":{"crate_id":6,"path":["libc","unix","rlimit"],"kind":"struct"},"1:8189:8731":{"crate_id":1,"path":["std","fs","FileTimes"],"kind":"struct"},"24:5409:58":{"crate_id":24,"path":["syn","expr","parsing","kw","builtin"],"kind":"struct"},"2:41221:3706":{"crate_id":2,"path":["core","iter","sources","repeat_n","RepeatN"],"kind":"struct"},"2:9454:16236":{"crate_id":2,"path":["core","panicking","assert_matches_failed","Pattern"],"kind":"struct"},"24:1846:3215":{"crate_id":24,"path":["syn","parse","Unexpected"],"kind":"enum"},"5:3036:36697":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Dying"],"kind":"enum"},"24:5986:2759":{"crate_id":24,"path":["syn","ty","ReturnType"],"kind":"enum"},"24:4460:3925":{"crate_id":24,"path":["syn","token","FatArrow"],"kind":"struct"},"2:23131:8320":{"crate_id":2,"path":["core","num","nonzero","private","NonZeroI8Inner"],"kind":"struct"},"5:4083:5235":{"crate_id":5,"path":["alloc","collections","vec_deque","drain","Drain"],"kind":"struct"},"17:10457:138":{"crate_id":17,"path":["object","read","any","File"],"kind":"enum"},"1:3331:10906":{"crate_id":1,"path":["std","io","stdio","Stdin"],"kind":"struct"},"18:548:153":{"crate_id":18,"path":["memchr","memmem","rabinkarp","Hash"],"kind":"struct"},"16:6504:9048":{"crate_id":16,"path":["gimli","read","aranges","ArangeHeader"],"kind":"struct"},"11:1903:9129":{"crate_id":11,"path":["hashbrown","set","Intersection"],"kind":"struct"},"2:23109:8318":{"crate_id":2,"path":["core","num","nonzero","private","NonZeroU128Inner"],"kind":"struct"},"2:42479:95":{"crate_id":2,"path":["core","sync","atomic","AtomicU64"],"kind":"struct"},"24:2608:10869":{"crate_id":24,"path":["syn","spanned","private","Sealed"],"kind":"trait"},"17:13526:6048":{"crate_id":17,"path":["object","elf","Verdaux"],"kind":"struct"},"5:7618:9154":{"crate_id":5,"path":["alloc","ffi","c_str","IntoStringError"],"kind":"struct"},"16:5347:6850":{"crate_id":16,"path":["gimli","constants","DwEhPe"],"kind":"struct"},"2:747:10927":{"crate_id":2,"path":["core","num","nonzero","ZeroablePrimitive"],"kind":"trait"},"17:13899:6133":{"crate_id":17,"path":["object","macho","Section32"],"kind":"struct"},"1:8177:10864":{"crate_id":1,"path":["std","fs","ReadDir"],"kind":"struct"},"20:834:2203":{"crate_id":20,"path":["proc_macro2","imp","Ident"],"kind":"enum"},"2:10520:153":{"crate_id":2,"path":["core","hash","Hash"],"kind":"trait"},"17:14372:6219":{"crate_id":17,"path":["object","macho","VersionMinCommand"],"kind":"struct"},"11:787:9128":{"crate_id":11,"path":["hashbrown","map","Values"],"kind":"struct"},"24:3022:3879":{"crate_id":24,"path":["syn","token","Async"],"kind":"struct"},"24:4979:2262":{"crate_id":24,"path":["syn","data","Fields"],"kind":"enum"},"24:4910:4277":{"crate_id":24,"path":["syn","token","Bracket"],"kind":"struct"},"17:14271:6205":{"crate_id":17,"path":["object","macho","PrebindCksumCommand"],"kind":"struct"},"17:13581:6067":{"crate_id":17,"path":["object","elf","NoteHeader64"],"kind":"struct"},"16:8188:23604":{"crate_id":16,"path":["gimli","read","unit","EntriesTreeIter"],"kind":"struct"},"1:9278:115":{"crate_id":1,"path":["std","sync","mpmc","context","Context"],"kind":"struct"},"2:40359:8527":{"crate_id":2,"path":["core","char","convert","CharTryFromError"],"kind":"struct"},"5:7055:264":{"crate_id":5,"path":["alloc","vec","Vec"],"kind":"struct"},"2:40685:3731":{"crate_id":2,"path":["core","iter","adapters","cycle","Cycle"],"kind":"struct"},"2:40496:9200":{"crate_id":2,"path":["core","char","CaseMappingIter"],"kind":"struct"},"2:43998:9242":{"crate_id":2,"path":["core","str","iter","RSplitN"],"kind":"struct"},"6:485:7240":{"crate_id":6,"path":["libc","unix","timespec"],"kind":"struct"},"1:8863:8794":{"crate_id":1,"path":["std","path","Ancestors"],"kind":"struct"},"1:8225:127":{"crate_id":1,"path":["std","fs","DirBuilder"],"kind":"struct"},"1:11686:9322":{"crate_id":1,"path":["std","sys_common","wtf8","Wtf8CodePoints"],"kind":"struct"},"24:5374:3587":{"crate_id":24,"path":["syn","expr","ExprTuple"],"kind":"struct"},"2:21710:10869":{"crate_id":2,"path":["core","core_simd","lane_count","sealed","Sealed"],"kind":"trait"},"6:1686:7429":{"crate_id":6,"path":["libc","unix","linux_like","epoll_event"],"kind":"struct"},"21:2588:3653":{"crate_id":21,"path":["proc_macro","LexError"],"kind":"struct"},"17:9858:23661":{"crate_id":17,"path":["object","common","ComdatKind"],"kind":"enum"},"2:11951:16223":{"crate_id":2,"path":["core","slice","iter","ChunkByMut"],"kind":"struct"},"1:12351:902":{"crate_id":1,"path":["std","i64"],"kind":"primitive"},"2:21718:11076":{"crate_id":2,"path":["core","core_simd","lane_count","SupportedLaneCount"],"kind":"trait"},"16:7132:9097":{"crate_id":16,"path":["gimli","read","lookup","PubStuffParser"],"kind":"struct"},"17:14489:6242":{"crate_id":17,"path":["object","macho","EntryPointCommand"],"kind":"struct"},"11:2536:2191":{"crate_id":11,"path":["hashbrown","raw","sse2","Group"],"kind":"struct"},"16:5927:8994":{"crate_id":16,"path":["gimli","read","cfi","CommonInformationEntry"],"kind":"struct"},"17:15944:5989":{"crate_id":17,"path":["object","xcoff","FileHeader64"],"kind":"struct"},"5:1164:37092":{"crate_id":5,"path":["alloc","collections","btree","append","MergeIter"],"kind":"struct"},"24:5616:3600":{"crate_id":24,"path":["syn","lit","LitCStr"],"kind":"struct"},"2:40416:16280":{"crate_id":2,"path":["core","char","EscapeDebugInner"],"kind":"enum"},"18:491:8915":{"crate_id":18,"path":["memchr","cow","Imp"],"kind":"struct"},"24:3073:3882":{"crate_id":24,"path":["syn","token","Become"],"kind":"struct"},"2:3380:140":{"crate_id":2,"path":["core","ops","function","Fn"],"kind":"trait"},"1:8626:8776":{"crate_id":1,"path":["std","os","unix","net","ucred","UCred"],"kind":"struct"},"24:3413:2588":{"crate_id":24,"path":["syn","token","Macro"],"kind":"struct"},"16:7648:23598":{"crate_id":16,"path":["gimli","read","rnglists","RawRngListIter"],"kind":"struct"},"17:12724:23676":{"crate_id":17,"path":["object","read","FileKind"],"kind":"enum"},"5:3750:5451":{"crate_id":5,"path":["alloc","collections","linked_list","drop","DropGuard"],"kind":"struct"},"2:22842:8296":{"crate_id":2,"path":["core","num","dec2flt","number","Number"],"kind":"struct"},"1:8231:5314":{"crate_id":1,"path":["std","hash","random","RandomState"],"kind":"struct"},"24:1118:3595":{"crate_id":24,"path":["syn","generics","Turbofish"],"kind":"struct"},"17:13946:6139":{"crate_id":17,"path":["object","macho","Fvmlib"],"kind":"struct"},"24:3209:3885":{"crate_id":24,"path":["syn","token","Dyn"],"kind":"struct"},"2:43783:16228":{"crate_id":2,"path":["core","slice","iter","RChunksMut"],"kind":"struct"},"2:2696:134":{"crate_id":2,"path":["core","cmp","Eq"],"kind":"trait"},"1:6027:5534":{"crate_id":1,"path":["std","sync","lazy_lock","LazyLock"],"kind":"struct"},"12:0:3394":{"crate_id":12,"path":["rustc_std_workspace_alloc"],"kind":"module"},"5:4447:5477":{"crate_id":5,"path":["alloc","collections","vec_deque","drop","Dropper"],"kind":"struct"},"2:44668:9288":{"crate_id":2,"path":["core","time","TryFromFloatSecsError"],"kind":"struct"},"16:7549:9102":{"crate_id":16,"path":["gimli","read","pubnames","PubNamesEntryIter"],"kind":"struct"},"2:42991:34406":{"crate_id":2,"path":["core","fmt","rt","ArgumentType"],"kind":"enum"},"24:4711:3943":{"crate_id":24,"path":["syn","token","Pound"],"kind":"struct"},"1:11614:9317":{"crate_id":1,"path":["std","sys_common","process","CommandEnv"],"kind":"struct"},"2:2977:137":{"crate_id":2,"path":["core","error","Error"],"kind":"trait"},"2:47144:8699":{"crate_id":2,"path":["core","core_arch","x86","__m512i"],"kind":"struct"},"1:1083:10792":{"crate_id":1,"path":["std","collections","hash","map","OccupiedEntry"],"kind":"struct"},"20:801:8913":{"crate_id":20,"path":["proc_macro2","imp","DeferredTokenStream"],"kind":"struct"},"2:44159:9252":{"crate_id":2,"path":["core","str","iter","SplitAsciiWhitespace"],"kind":"struct"},"17:10251:5829":{"crate_id":17,"path":["object","endian","U64Bytes"],"kind":"struct"},"17:11743:8948":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSubsubsection"],"kind":"struct"},"2:32959:5674":{"crate_id":2,"path":["core","ops","arith","Div"],"kind":"trait"},"6:5588:7799":{"crate_id":6,"path":["libc","unix","linux_like","linux","mq_attr"],"kind":"struct"},"2:46202:8615":{"crate_id":2,"path":["core","core_arch","simd","i64x2"],"kind":"struct"},"18:598:5663":{"crate_id":18,"path":["memchr","memmem","twoway","Shift"],"kind":"enum"},"5:7739:5234":{"crate_id":5,"path":["alloc","vec","splice","Splice"],"kind":"struct"},"6:5565:7792":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_user_dev"],"kind":"struct"},"16:8259:2968":{"crate_id":16,"path":["gimli","read","value","Value"],"kind":"enum"},"24:5974:67":{"crate_id":24,"path":["syn","ty","Abi"],"kind":"struct"},"17:13986:6147":{"crate_id":17,"path":["object","macho","DylibCommand"],"kind":"struct"},"1:8549:10922":{"crate_id":1,"path":["std","net","tcp","Incoming"],"kind":"struct"},"1:3386:10909":{"crate_id":1,"path":["std","io","stdio","StdoutLock"],"kind":"struct"},"16:5769:8981":{"crate_id":16,"path":["gimli","read","cfi","EhHdrTable"],"kind":"struct"},"20:908:3655":{"crate_id":20,"path":["proc_macro2","Delimiter"],"kind":"enum"},"17:10044:23666":{"crate_id":17,"path":["object","common","SegmentFlags"],"kind":"enum"},"1:11780:10924":{"crate_id":1,"path":["std","sys_common","net","TcpStream"],"kind":"struct"},"17:11647:8941":{"crate_id":17,"path":["object","read","elf","version","VerdauxIterator"],"kind":"struct"},"23:514:2891":{"crate_id":23,"path":["quote","quote_spanned"],"kind":"macro"},"16:6560:6795":{"crate_id":16,"path":["gimli","read","index","DebugCuIndex"],"kind":"struct"},"11:2469:5233":{"crate_id":11,"path":["hashbrown","table","ExtractIf"],"kind":"struct"},"23:239:4719":{"crate_id":23,"path":["quote","__private","get_span","GetSpanInner"],"kind":"struct"},"16:7618:6960":{"crate_id":16,"path":["gimli","read","rnglists","RangeLists"],"kind":"struct"},"24:4941:3536":{"crate_id":24,"path":["syn","attr","AttrStyle"],"kind":"enum"},"23:322:2893":{"crate_id":23,"path":["quote","spanned","Spanned"],"kind":"trait"},"24:3685:254":{"crate_id":24,"path":["syn","token","Try"],"kind":"struct"},"6:6698:8015":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_ring_offset"],"kind":"struct"},"24:642:226":{"crate_id":24,"path":["syn","error","Result"],"kind":"type_alias"},"24:4419:3923":{"crate_id":24,"path":["syn","token","DotDotEq"],"kind":"struct"},"17:15313:6494":{"crate_id":17,"path":["object","pe","ImageImportDescriptor"],"kind":"struct"},"1:10998:10312":{"crate_id":1,"path":["std","sys","pal","unix","os","JoinPathsError"],"kind":"struct"},"24:3192:3884":{"crate_id":24,"path":["syn","token","Do"],"kind":"struct"},"17:12621:5923":{"crate_id":17,"path":["object","read","xcoff","symbol","XcoffSymbol"],"kind":"struct"},"2:21625:33613":{"crate_id":2,"path":["core","core_simd","swizzle","deinterleave","Even"],"kind":"struct"},"21:929:3817":{"crate_id":21,"path":["proc_macro","bridge","client","SourceFile"],"kind":"struct"},"1:12337:1313":{"crate_id":1,"path":["std","pointer"],"kind":"primitive"},"1:5159:4378":{"crate_id":1,"path":["std","panic","always_abort"],"kind":"function"},"17:11557:23769":{"crate_id":17,"path":["object","read","elf","note","GnuPropertyIterator"],"kind":"struct"},"24:3787:3907":{"crate_id":24,"path":["syn","token","Use"],"kind":"struct"},"1:12345:737":{"crate_id":1,"path":["std","f32"],"kind":"primitive"},"1:10488:113":{"crate_id":1,"path":["std","sys","pal","unix","process","process_common","Command"],"kind":"struct"},"2:47118:8697":{"crate_id":2,"path":["core","core_arch","x86","__m256"],"kind":"struct"},"5:1474:3635":{"crate_id":5,"path":["alloc","collections","btree","map","Iter"],"kind":"struct"},"6:5314:7683":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_fprog"],"kind":"struct"},"17:16187:6741":{"crate_id":17,"path":["object","xcoff","ExpAux"],"kind":"struct"},"24:1762:27947":{"crate_id":24,"path":["syn","parse","discouraged","AnyDelimiter"],"kind":"trait"},"2:3386:142":{"crate_id":2,"path":["core","ops","function","FnOnce"],"kind":"trait"},"2:22705:9174":{"crate_id":2,"path":["core","num","bignum","Big32x40"],"kind":"struct"},"1:9345:28094":{"crate_id":1,"path":["std","sync","mpmc","select","Selected"],"kind":"enum"},"6:7412:8151":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statfs64"],"kind":"struct"},"16:4614:6833":{"crate_id":16,"path":["gimli","constants","DwVis"],"kind":"struct"},"1:12335:1872":{"crate_id":1,"path":["std","unit"],"kind":"primitive"},"5:1505:3634":{"crate_id":5,"path":["alloc","collections","btree","map","IntoIter"],"kind":"struct"},"6:8341:8280":{"crate_id":6,"path":["libc","unix","linux_like","linux","non_exhaustive","open_how"],"kind":"struct"},"16:7528:9099":{"crate_id":16,"path":["gimli","read","pubnames","PubNamesEntry"],"kind":"struct"},"1:617:10773":{"crate_id":1,"path":["std","ascii","AsciiExt"],"kind":"trait"},"1:1916:10817":{"crate_id":1,"path":["std","env","ArgsOs"],"kind":"struct"},"6:5344:7689":{"crate_id":6,"path":["libc","unix","linux_like","linux","seccomp_notif_resp"],"kind":"struct"},"2:42003:173":{"crate_id":2,"path":["core","option","Item"],"kind":"struct"},"24:2290:3633":{"crate_id":24,"path":["syn","punctuated","IntoPairs"],"kind":"struct"},"24:128:2191":{"crate_id":24,"path":["syn","token","Group"],"kind":"struct"},"1:8645:10999":{"crate_id":1,"path":["std","os","linux","process","PidFd"],"kind":"struct"},"24:649:5659":{"crate_id":24,"path":["syn","error","SpanRange"],"kind":"struct"},"1:12360:1418":{"crate_id":1,"path":["std","reference"],"kind":"primitive"},"17:10759:5852":{"crate_id":17,"path":["object","read","any","SymbolTable"],"kind":"struct"},"6:6471:7900":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","cmsghdr"],"kind":"struct"},"17:11214:23693":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdatIterator"],"kind":"struct"},"1:8530:3179":{"crate_id":1,"path":["std","io","Bytes"],"kind":"struct"},"18:563:5708":{"crate_id":18,"path":["memchr","memmem","rarebytes","RareNeedleBytes"],"kind":"struct"},"2:3130:3804":{"crate_id":2,"path":["core","marker","Unsize"],"kind":"trait"},"16:2708:6783":{"crate_id":16,"path":["gimli","common","DebugRngListsBase"],"kind":"struct"},"17:11510:23721":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdat"],"kind":"struct"},"6:6821:8055":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","utmpx"],"kind":"struct"},"17:12671:23887":{"crate_id":17,"path":["object","read","xcoff","comdat","XcoffComdatSectionIterator"],"kind":"struct"},"1:4397:10973":{"crate_id":1,"path":["std","os","unix","net","datagram","UnixDatagram"],"kind":"struct"},"24:5952:2761":{"crate_id":24,"path":["syn","ty","TypePath"],"kind":"struct"},"1:494:5526":{"crate_id":1,"path":["std","thread","spawn_unchecked_","MaybeDangling"],"kind":"struct"},"17:15206:6469":{"crate_id":17,"path":["object","pe","ImageLinenumber"],"kind":"struct"},"2:22148:33608":{"crate_id":2,"path":["core","core_simd","vector","splat","Splat"],"kind":"struct"},"2:40344:33889":{"crate_id":2,"path":["core","char","convert","CharErrorKind"],"kind":"enum"},"17:13922:6138":{"crate_id":17,"path":["object","macho","Section64"],"kind":"struct"},"2:22109:10869":{"crate_id":2,"path":["core","core_simd","to_bytes","sealed","Sealed"],"kind":"trait"},"16:4531:6830":{"crate_id":16,"path":["gimli","constants","DwDs"],"kind":"struct"},"2:47182:8707":{"crate_id":2,"path":["core","core_arch","x86","__m512d"],"kind":"struct"},"20:953:2890":{"crate_id":20,"path":["proc_macro2","Literal"],"kind":"struct"},"24:4559:3932":{"crate_id":24,"path":["syn","token","MinusEq"],"kind":"struct"},"17:11493:23733":{"crate_id":17,"path":["object","read","elf","relocation","RelocationSections"],"kind":"struct"},"24:3277:3888":{"crate_id":24,"path":["syn","token","Final"],"kind":"struct"},"6:7467:8163":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_fpstate"],"kind":"struct"},"1:8536:9164":{"crate_id":1,"path":["std","io","Split"],"kind":"struct"},"7:0:1901":{"crate_id":7,"path":["unwind"],"kind":"module"},"14:214:9118":{"crate_id":14,"path":["rustc_demangle","TryDemangleError"],"kind":"struct"},"2:32182:2359":{"crate_id":2,"path":["core","error","private","Internal"],"kind":"struct"},"2:43761:16218":{"crate_id":2,"path":["core","slice","iter","ArrayChunksMut"],"kind":"struct"},"24:5023:2420":{"crate_id":24,"path":["syn","derive","DataStruct"],"kind":"struct"},"24:5273:3573":{"crate_id":24,"path":["syn","expr","ExprConst"],"kind":"struct"},"16:8313:137":{"crate_id":16,"path":["gimli","read","Error"],"kind":"enum"},"1:10891:11000":{"crate_id":1,"path":["std","sys","pal","unix","fd","FileDesc"],"kind":"struct"},"2:30978:196":{"crate_id":2,"path":["core","cmp","Ordering"],"kind":"enum"},"2:23142:8321":{"crate_id":2,"path":["core","num","nonzero","private","NonZeroI16Inner"],"kind":"struct"},"6:532:7271":{"crate_id":6,"path":["libc","unix","iovec"],"kind":"struct"},"11:883:10791":{"crate_id":11,"path":["hashbrown","map","RawEntryBuilder"],"kind":"struct"},"24:1804:3759":{"crate_id":24,"path":["syn","parse","ParseBuffer"],"kind":"struct"},"2:23087:8316":{"crate_id":2,"path":["core","num","nonzero","private","NonZeroU32Inner"],"kind":"struct"},"2:45890:8586":{"crate_id":2,"path":["core","core_arch","simd","u8x8"],"kind":"struct"},"5:1489:3639":{"crate_id":5,"path":["alloc","collections","btree","map","IterMut"],"kind":"struct"},"0:964:2054":{"crate_id":0,"path":["serde_derive","Serialize"],"kind":"proc_derive"},"6:7339:8122":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","flock64"],"kind":"struct"},"6:5290:7672":{"crate_id":6,"path":["libc","unix","linux_like","linux","can_filter"],"kind":"struct"},"1:6189:220":{"crate_id":1,"path":["std","sync","mpmc","counter","Receiver"],"kind":"struct"},"17:10612:23669":{"crate_id":17,"path":["object","read","any","SectionIterator"],"kind":"struct"},"5:3218:100":{"crate_id":5,"path":["alloc","collections","btree","set","BTreeSet"],"kind":"struct"},"16:5006:6845":{"crate_id":16,"path":["gimli","constants","DwLne"],"kind":"struct"},"2:41197:3700":{"crate_id":2,"path":["core","iter","sources","once","Once"],"kind":"struct"},"24:4997:3552":{"crate_id":24,"path":["syn","data","FieldsUnnamed"],"kind":"struct"},"16:6079:8972":{"crate_id":16,"path":["gimli","read","cfi","UnwindTableRow"],"kind":"struct"},"1:3999:10925":{"crate_id":1,"path":["std","net","udp","UdpSocket"],"kind":"struct"},"17:10661:23670":{"crate_id":17,"path":["object","read","any","ComdatIterator"],"kind":"struct"},"24:4327:3917":{"crate_id":24,"path":["syn","token","Colon"],"kind":"struct"},"17:14933:6414":{"crate_id":17,"path":["object","pe","ImageOptionalHeader64"],"kind":"struct"},"6:6441:7890":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__timeval"],"kind":"struct"},"10:0:3392":{"crate_id":10,"path":["adler"],"kind":"module"},"5:4248:5475":{"crate_id":5,"path":["alloc","collections","vec_deque","into_iter","try_fold","Guard"],"kind":"struct"},"1:8172:5311":{"crate_id":1,"path":["std","fs","Metadata"],"kind":"struct"},"21:2682:3655":{"crate_id":21,"path":["proc_macro","Delimiter"],"kind":"enum"},"2:44279:9254":{"crate_id":2,"path":["core","str","pattern","CharSearcher"],"kind":"struct"},"2:44400:9265":{"crate_id":2,"path":["core","str","pattern","CharPredicateSearcher"],"kind":"struct"},"17:15521:6576":{"crate_id":17,"path":["object","pe","ImageLoadConfigDirectory64"],"kind":"struct"},"2:11433:16230":{"crate_id":2,"path":["core","slice","iter","RSplitNMut"],"kind":"struct"},"1:8857:3635":{"crate_id":1,"path":["std","path","Iter"],"kind":"struct"},"6:8006:8244":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","align","max_align_t"],"kind":"struct"},"18:735:27920":{"crate_id":18,"path":["memchr","memmem","SearcherKind"],"kind":"enum"},"1:3477:10895":{"crate_id":1,"path":["std","io","stdio","IsTerminal"],"kind":"trait"},"6:6678:8007":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ptrace_syscall_info"],"kind":"struct"},"2:44800:219":{"crate_id":2,"path":["core","future","ready","Ready"],"kind":"struct"},"17:12530:23856":{"crate_id":17,"path":["object","read","xcoff","section","XcoffSectionIterator"],"kind":"struct"},"2:45928:8592":{"crate_id":2,"path":["core","core_arch","simd","u32x2"],"kind":"struct"},"6:4800:7457":{"crate_id":6,"path":["libc","unix","linux_like","linux","passwd"],"kind":"struct"},"17:14091:6160":{"crate_id":17,"path":["object","macho","RoutinesCommand32"],"kind":"struct"},"2:43722:8563":{"crate_id":2,"path":["core","slice","iter","ArrayWindows"],"kind":"struct"},"2:44610:9284":{"crate_id":2,"path":["core","str","IsAsciiWhitespace"],"kind":"struct"},"21:2379:2271":{"crate_id":21,"path":["proc_macro","bridge","TokenTree"],"kind":"enum"},"2:4412:5133":{"crate_id":2,"path":["core","async_iter","async_iter","AsyncIterator"],"kind":"trait"},"1:7870:2284":{"crate_id":1,"path":["std","backtrace_rs","symbolize","Symbol"],"kind":"struct"},"16:8073:3537":{"crate_id":16,"path":["gimli","read","unit","Attribute"],"kind":"struct"},"2:38127:5681":{"crate_id":2,"path":["core","ops","bit","BitAndAssign"],"kind":"trait"},"2:39662:3684":{"crate_id":2,"path":["core","ops","range","Bound"],"kind":"enum"},"2:2862:16285":{"crate_id":2,"path":["core","convert","num","FloatToInt"],"kind":"trait"},"1:12359:1911":{"crate_id":1,"path":["std","usize"],"kind":"primitive"},"20:878:252":{"crate_id":20,"path":["proc_macro2","TokenStream"],"kind":"struct"},"2:22898:8301":{"crate_id":2,"path":["core","num","flt2dec","decoder","Decoded"],"kind":"struct"},"17:15356:6509":{"crate_id":17,"path":["object","pe","ImageResourceDirectory"],"kind":"struct"},"16:2684:6782":{"crate_id":16,"path":["gimli","common","RangeListsOffset"],"kind":"struct"},"16:3899:6823":{"crate_id":16,"path":["gimli","constants","DwCfa"],"kind":"struct"},"11:1051:10793":{"crate_id":11,"path":["hashbrown","map","VacantEntry"],"kind":"struct"},"24:5303:3578":{"crate_id":24,"path":["syn","expr","ExprInfer"],"kind":"struct"},"1:9709:138":{"crate_id":1,"path":["std","sys","pal","unix","fs","File"],"kind":"struct"},"2:44462:9267":{"crate_id":2,"path":["core","str","pattern","EmptyNeedle"],"kind":"struct"},"2:42173:3634":{"crate_id":2,"path":["core","result","IntoIter"],"kind":"struct"},"2:46010:8597":{"crate_id":2,"path":["core","core_arch","simd","i64x1"],"kind":"struct"},"3:234:226":{"crate_id":3,"path":["compiler_builtins","float","cmp","Result"],"kind":"enum"},"1:2774:10901":{"crate_id":1,"path":["std","io","buffered","linewriter","LineWriter"],"kind":"struct"},"1:674:10778":{"crate_id":1,"path":["std","backtrace","BytesOrWide"],"kind":"enum"},"11:328:9124":{"crate_id":11,"path":["hashbrown","raw","RawIter"],"kind":"struct"},"17:10170:5826":{"crate_id":17,"path":["object","endian","BigEndian"],"kind":"struct"},"17:11764:8951":{"crate_id":17,"path":["object","read","elf","attributes","AttributeReader"],"kind":"struct"},"24:2971:3956":{"crate_id":24,"path":["syn","token","Underscore"],"kind":"struct"},"6:4870:7509":{"crate_id":6,"path":["libc","unix","linux_like","linux","fsid_t"],"kind":"struct"},"1:5948:11034":{"crate_id":1,"path":["std","sync","barrier","Barrier"],"kind":"struct"},"24:1625:3774":{"crate_id":24,"path":["syn","lookahead","Peek"],"kind":"trait"},"17:14147:6169":{"crate_id":17,"path":["object","macho","DysymtabCommand"],"kind":"struct"},"2:40548:9202":{"crate_id":2,"path":["core","ffi","c_str","FromBytesUntilNulError"],"kind":"struct"},"1:8594:9299":{"crate_id":1,"path":["std","os","unix","net","addr","SocketAddr"],"kind":"struct"},"23:0:1396":{"crate_id":23,"path":["quote"],"kind":"module"},"2:46053:8600":{"crate_id":2,"path":["core","core_arch","simd","u8x16"],"kind":"struct"},"2:9964:10417":{"crate_id":2,"path":["core","fmt","builders","PadAdapterState"],"kind":"struct"},"6:5102:7606":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Sym"],"kind":"struct"},"2:40401:9191":{"crate_id":2,"path":["core","char","EscapeDefault"],"kind":"struct"},"2:44932:9292":{"crate_id":2,"path":["core","escape","EscapeIterInner"],"kind":"struct"},"17:13015:5912":{"crate_id":17,"path":["object","read","Relocation"],"kind":"struct"},"18:643:5702":{"crate_id":18,"path":["memchr","memmem","x86","avx","nostd","Forward"],"kind":"struct"},"1:980:10791":{"crate_id":1,"path":["std","collections","hash","map","RawEntryBuilder"],"kind":"struct"},"24:4936:3537":{"crate_id":24,"path":["syn","attr","Attribute"],"kind":"struct"},"1:426:185":{"crate_id":1,"path":["std","thread","local","LocalKey"],"kind":"struct"},"16:7755:6801":{"crate_id":16,"path":["gimli","read","str","DebugLineStr"],"kind":"struct"},"2:21571:4797":{"crate_id":2,"path":["core","core_simd","swizzle","reverse","Reverse"],"kind":"struct"},"2:47235:8710":{"crate_id":2,"path":["core","core_arch","x86","__m512bh"],"kind":"struct"},"6:6756:8036":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_statistics_v1"],"kind":"struct"},"6:8306:8271":{"crate_id":6,"path":["libc","unix","linux_like","linux","can_frame"],"kind":"struct"},"5:7461:9147":{"crate_id":5,"path":["alloc","collections","btree","set_val","SetValZST"],"kind":"struct"},"18:515:5705":{"crate_id":18,"path":["memchr","memmem","prefilter","PrefilterFn"],"kind":"struct"},"2:2087:5185":{"crate_id":2,"path":["core","ptr","metadata","DynMetadata"],"kind":"struct"},"24:5669:3605":{"crate_id":24,"path":["syn","op","BinOp"],"kind":"enum"},"24:5234:3567":{"crate_id":24,"path":["syn","expr","ExprAssign"],"kind":"struct"},"17:12238:23822":{"crate_id":17,"path":["object","read","pe","section","PeSegment"],"kind":"struct"},"6:8300:8270":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_barrier_t"],"kind":"struct"},"2:44026:9244":{"crate_id":2,"path":["core","str","iter","MatchIndices"],"kind":"struct"},"2:22114:11079":{"crate_id":2,"path":["core","core_simd","to_bytes","ToBytes"],"kind":"trait"},"6:5457:7751":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_nxtinfo"],"kind":"struct"},"2:39692:16326":{"crate_id":2,"path":["core","ops","try_trait","Yeet"],"kind":"struct"},"13:110:37114":{"crate_id":13,"path":["std_detect","detect","arch","x86","Feature"],"kind":"enum"},"2:41946:8541":{"crate_id":2,"path":["core","net","socket_addr","SocketAddrV4"],"kind":"struct"},"2:11132:3639":{"crate_id":2,"path":["core","slice","iter","IterMut"],"kind":"struct"},"1:6499:220":{"crate_id":1,"path":["std","sync","mpmc","Receiver"],"kind":"struct"},"24:5612:2411":{"crate_id":24,"path":["syn","lit","LitStr"],"kind":"struct"},"6:1485:7303":{"crate_id":6,"path":["libc","unix","linux_like","in_addr"],"kind":"struct"},"16:5107:6848":{"crate_id":16,"path":["gimli","constants","DwRle"],"kind":"struct"},"1:1092:10793":{"crate_id":1,"path":["std","collections","hash","map","VacantEntry"],"kind":"struct"},"17:13855:6125":{"crate_id":17,"path":["object","macho","SegmentCommand32"],"kind":"struct"},"24:4965:3538":{"crate_id":24,"path":["syn","attr","MetaList"],"kind":"struct"},"2:44472:9271":{"crate_id":2,"path":["core","str","pattern","TwoWaySearcher"],"kind":"struct"},"2:2888:163":{"crate_id":2,"path":["core","convert","Into"],"kind":"trait"},"16:2748:6785":{"crate_id":16,"path":["gimli","common","DebugStrOffset"],"kind":"struct"},"2:44168:9253":{"crate_id":2,"path":["core","str","iter","EncodeUtf16"],"kind":"struct"},"17:12711:137":{"crate_id":17,"path":["object","read","Error"],"kind":"struct"},"6:7575:8231":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ptrace_rseq_configuration"],"kind":"struct"},"6:8328:8276":{"crate_id":6,"path":["libc","unix","linux_like","linux","canxl_frame"],"kind":"struct"},"6:5528:7773":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_nl"],"kind":"struct"},"2:23028:10869":{"crate_id":2,"path":["core","num","nonzero","private","Sealed"],"kind":"trait"},"2:32207:9188":{"crate_id":2,"path":["core","error","Source"],"kind":"struct"},"2:30567:5090":{"crate_id":2,"path":["core","mem","manually_drop","ManuallyDrop"],"kind":"struct"},"5:3293:35621":{"crate_id":5,"path":["alloc","collections","btree","set","IntersectionInner"],"kind":"enum"},"2:3582:254":{"crate_id":2,"path":["core","ops","try_trait","Try"],"kind":"trait"},"21:53:5258":{"crate_id":21,"path":["proc_macro","bridge","buffer","Buffer"],"kind":"struct"},"1:10915:9310":{"crate_id":1,"path":["std","sys","pal","unix","fs","StatxExtraFields"],"kind":"struct"},"1:562:5012":{"crate_id":1,"path":["std","thread","Packet"],"kind":"struct"},"2:42117:226":{"crate_id":2,"path":["core","result","Result"],"kind":"enum"},"16:5802:23582":{"crate_id":16,"path":["gimli","read","cfi","CieOffsetEncoding"],"kind":"enum"},"2:44872:34163":{"crate_id":2,"path":["core","task","wake","ExtData"],"kind":"enum"},"17:14868:6378":{"crate_id":17,"path":["object","pe","ImageDataDirectory"],"kind":"struct"},"16:867:37152":{"crate_id":16,"path":["gimli","read","endian_slice","DebugByte"],"kind":"struct"},"17:11497:23722":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdatIterator"],"kind":"struct"},"17:13497:6039":{"crate_id":17,"path":["object","elf","Versym"],"kind":"struct"},"24:306:37375":{"crate_id":24,"path":["syn","bigint","BigInt"],"kind":"struct"},"6:6670:8005":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_seccomp"],"kind":"struct"},"5:7606:9151":{"crate_id":5,"path":["alloc","ffi","c_str","FromVecWithNulError"],"kind":"struct"},"1:11244:8807":{"crate_id":1,"path":["std","sys","pal","unix","time","SystemTime"],"kind":"struct"},"2:40799:3739":{"crate_id":2,"path":["core","iter","adapters","rev","Rev"],"kind":"struct"},"2:7639:3729":{"crate_id":2,"path":["core","iter","adapters","zip","TrustedRandomAccessNoCoerce"],"kind":"trait"},"2:22811:8295":{"crate_id":2,"path":["core","num","dec2flt","common","BiasedFp"],"kind":"struct"},"2:42012:3635":{"crate_id":2,"path":["core","option","Iter"],"kind":"struct"},"2:45957:8594":{"crate_id":2,"path":["core","core_arch","simd","i8x8"],"kind":"struct"},"21:2486:5257":{"crate_id":21,"path":["proc_macro","bridge","ExpnGlobals"],"kind":"struct"},"24:4798:3949":{"crate_id":24,"path":["syn","token","Shr"],"kind":"struct"},"16:7052:23594":{"crate_id":16,"path":["gimli","read","loclists","LocListIter"],"kind":"struct"},"11:2548:7145":{"crate_id":11,"path":["hashbrown","raw","bitmask","BitMaskIter"],"kind":"struct"},"2:2727:195":{"crate_id":2,"path":["core","cmp","Ord"],"kind":"trait"},"24:3583:3901":{"crate_id":24,"path":["syn","token","SelfType"],"kind":"struct"},"1:8252:10318":{"crate_id":1,"path":["std","io","buffered","IntoInnerError"],"kind":"struct"},"5:7578:9148":{"crate_id":5,"path":["alloc","ffi","c_str","NulError"],"kind":"struct"},"17:11799:23811":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCacheImageIterator"],"kind":"struct"},"2:7533:3017":{"crate_id":2,"path":["core","iter","adapters","zip","zip"],"kind":"function"},"17:11075:5844":{"crate_id":17,"path":["object","read","coff","section","SectionTable"],"kind":"struct"},"1:878:3639":{"crate_id":1,"path":["std","collections","hash","map","IterMut"],"kind":"struct"},"23:272:2280":{"crate_id":23,"path":["quote","__private","push_lifetime","Lifetime"],"kind":"struct"},"2:30605:5092":{"crate_id":2,"path":["core","mem","transmutability","Assume"],"kind":"struct"},"2:47212:8709":{"crate_id":2,"path":["core","core_arch","x86","__m256bh"],"kind":"struct"},"11:2383:3635":{"crate_id":11,"path":["hashbrown","table","Iter"],"kind":"struct"},"2:7986:3699":{"crate_id":2,"path":["core","iter","sources","once","once"],"kind":"function"},"16:3614:6819":{"crate_id":16,"path":["gimli","arch","X86"],"kind":"struct"},"24:5622:3603":{"crate_id":24,"path":["syn","lit","LitInt"],"kind":"struct"},"2:3599:16262":{"crate_id":2,"path":["core","ops","try_trait","NeverShortCircuit"],"kind":"struct"},"24:5769:2854":{"crate_id":24,"path":["syn","path","PathSegment"],"kind":"struct"},"17:15400:6520":{"crate_id":17,"path":["object","pe","ImageLoadConfigCodeIntegrity"],"kind":"struct"},"16:5385:5825":{"crate_id":16,"path":["gimli","endianity","LittleEndian"],"kind":"struct"},"17:15039:6430":{"crate_id":17,"path":["object","pe","AnonObjectHeaderBigobj"],"kind":"struct"},"24:3464:3896":{"crate_id":24,"path":["syn","token","Move"],"kind":"struct"},"18:538:5706":{"crate_id":18,"path":["memchr","memmem","rabinkarp","NeedleHash"],"kind":"struct"},"17:11674:8943":{"crate_id":17,"path":["object","read","elf","version","VernauxIterator"],"kind":"struct"},"1:2461:5160":{"crate_id":1,"path":["std","fs","metadata"],"kind":"function"},"11:1087:37101":{"crate_id":11,"path":["hashbrown","map","KeyOrRef"],"kind":"enum"},"1:11194:8795":{"crate_id":1,"path":["std","sys","pal","unix","process","process_inner","ExitStatus"],"kind":"struct"},"6:6714:8023":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_ring_offset_v1"],"kind":"struct"},"2:43622:33812":{"crate_id":2,"path":["core","slice","iter","GenericSplitN"],"kind":"struct"},"1:4914:10957":{"crate_id":1,"path":["std","os","fd","raw","AsRawFd"],"kind":"trait"},"2:40504:8528":{"crate_id":2,"path":["core","char","TryFromCharError"],"kind":"struct"},"18:507:5702":{"crate_id":18,"path":["memchr","memmem","genericsimd","Forward"],"kind":"struct"},"2:40824:3741":{"crate_id":2,"path":["core","iter","adapters","skip","Skip"],"kind":"struct"},"24:5805:2583":{"crate_id":24,"path":["syn","path","AssocType"],"kind":"struct"},"1:5955:11035":{"crate_id":1,"path":["std","sync","barrier","BarrierWaitResult"],"kind":"struct"},"2:44626:8569":{"crate_id":2,"path":["core","time","Nanoseconds"],"kind":"struct"},"2:40645:3720":{"crate_id":2,"path":["core","iter","adapters","by_ref_sized","ByRefSized"],"kind":"struct"},"17:12362:8961":{"crate_id":17,"path":["object","read","pe","import","ImportThunkList"],"kind":"struct"},"17:12683:23858":{"crate_id":17,"path":["object","read","xcoff","segment","XcoffSegmentIterator"],"kind":"struct"},"2:44485:9275":{"crate_id":2,"path":["core","str","lossy","Utf8Chunk"],"kind":"struct"},"2:40755:3746":{"crate_id":2,"path":["core","iter","adapters","intersperse","Intersperse"],"kind":"struct"},"24:592:3644":{"crate_id":24,"path":["syn","drops","NoDrop"],"kind":"struct"},"9:178:10405":{"crate_id":9,"path":["miniz_oxide","inflate","stream","InflateState"],"kind":"struct"},"11:2569:3690":{"crate_id":11,"path":["hashbrown","TryReserveError"],"kind":"enum"},"6:6880:8067":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","sysinfo"],"kind":"struct"},"6:1671:7420":{"crate_id":6,"path":["libc","unix","linux_like","arphdr"],"kind":"struct"},"6:5598:7804":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_ifr_ifru"],"kind":"union"},"6:5376:7701":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlattr"],"kind":"struct"},"6:8317:8275":{"crate_id":6,"path":["libc","unix","linux_like","linux","canfd_frame"],"kind":"struct"},"6:6379:7847":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","statx"],"kind":"struct"},"11:2562:7148":{"crate_id":11,"path":["hashbrown","raw","TableLayout"],"kind":"struct"},"17:12127:5901":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbolTable"],"kind":"struct"},"17:12089:5899":{"crate_id":17,"path":["object","read","macho","section","MachOSectionInternal"],"kind":"struct"},"6:1580:7358":{"crate_id":6,"path":["libc","unix","linux_like","sched_param"],"kind":"struct"},"2:3198:5685":{"crate_id":2,"path":["core","ops","arith","Neg"],"kind":"trait"},"17:14260:6204":{"crate_id":17,"path":["object","macho","TwolevelHint"],"kind":"struct"},"6:5630:7824":{"crate_id":6,"path":["libc","unix","linux_like","linux","ifconf"],"kind":"struct"},"17:15214:6471":{"crate_id":17,"path":["object","pe","ImageBaseRelocation"],"kind":"struct"},"24:3481:3897":{"crate_id":24,"path":["syn","token","Mut"],"kind":"struct"},"6:8259:8261":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_condattr_t"],"kind":"struct"},"2:21627:33618":{"crate_id":2,"path":["core","core_simd","swizzle","deinterleave","Odd"],"kind":"struct"},"17:16032:5992":{"crate_id":17,"path":["object","xcoff","SectionHeader32"],"kind":"struct"},"16:6665:23590":{"crate_id":16,"path":["gimli","read","line","LineInstruction"],"kind":"enum"},"2:46460:8643":{"crate_id":2,"path":["core","core_arch","simd","i8x32"],"kind":"struct"},"21:2456:126":{"crate_id":21,"path":["proc_macro","bridge","Diagnostic"],"kind":"struct"},"2:3142:2734":{"crate_id":2,"path":["core","marker","PhantomData"],"kind":"struct"},"20:687:3657":{"crate_id":20,"path":["proc_macro2","marker","ProcMacroAutoTraits"],"kind":"struct"},"16:7379:37169":{"crate_id":16,"path":["gimli","read","op","EvaluationState"],"kind":"enum"},"11:0:3393":{"crate_id":11,"path":["hashbrown"],"kind":"module"},"6:5407:1242":{"crate_id":6,"path":["libc","unix","linux_like","linux","option"],"kind":"struct"},"17:14131:6164":{"crate_id":17,"path":["object","macho","SymtabCommand"],"kind":"struct"},"1:12346:753":{"crate_id":1,"path":["std","f64"],"kind":"primitive"},"2:45875:8585":{"crate_id":2,"path":["core","core_arch","simd","i16x2"],"kind":"struct"},"4:0:3389":{"crate_id":4,"path":["rustc_std_workspace_core"],"kind":"module"},"5:4511:5477":{"crate_id":5,"path":["alloc","collections","vec_deque","truncate","Dropper"],"kind":"struct"},"16:6398:6792":{"crate_id":16,"path":["gimli","read","abbrev","DebugAbbrev"],"kind":"struct"},"16:4940:6843":{"crate_id":16,"path":["gimli","constants","DwDefaulted"],"kind":"struct"},"24:4822:3951":{"crate_id":24,"path":["syn","token","Slash"],"kind":"struct"},"2:43862:3179":{"crate_id":2,"path":["core","str","iter","Bytes"],"kind":"struct"},"2:3415:3647":{"crate_id":2,"path":["core","ops","index","IndexMut"],"kind":"trait"},"16:8136:9113":{"crate_id":16,"path":["gimli","read","unit","EntriesCursor"],"kind":"struct"},"24:3090:2251":{"crate_id":24,"path":["syn","token","Box"],"kind":"struct"},"2:1969:5087":{"crate_id":2,"path":["core","mem","Discriminant"],"kind":"struct"},"17:13594:6068":{"crate_id":17,"path":["object","elf","HashHeader"],"kind":"struct"},"2:31005:4797":{"crate_id":2,"path":["core","cmp","Reverse"],"kind":"struct"},"17:15678:6617":{"crate_id":17,"path":["object","pe","ImageEnclaveConfig64"],"kind":"struct"},"21:2662:2271":{"crate_id":21,"path":["proc_macro","TokenTree"],"kind":"enum"},"2:13512:16290":{"crate_id":2,"path":["core","future","async_drop","AsyncDropInPlace"],"kind":"struct"},"6:5250:7650":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_vm"],"kind":"struct"},"2:42975:6989":{"crate_id":2,"path":["core","fmt","rt","Flag"],"kind":"enum"},"20:113:8911":{"crate_id":20,"path":["proc_macro2","rcvec","RcVec"],"kind":"struct"},"17:12175:23835":{"crate_id":17,"path":["object","read","pe","file","PeFile"],"kind":"struct"},"2:10677:5511":{"crate_id":2,"path":["core","slice","sort","InsertionHole"],"kind":"struct"},"2:32216:237":{"crate_id":2,"path":["core","marker","Send"],"kind":"trait"},"5:1566:10415":{"crate_id":5,"path":["alloc","collections","btree","map","IntoValues"],"kind":"struct"},"2:2966:123":{"crate_id":2,"path":["core","default","Default"],"kind":"trait"},"1:938:10786":{"crate_id":1,"path":["std","collections","hash","map","ValuesMut"],"kind":"struct"},"16:7355:6941":{"crate_id":16,"path":["gimli","read","op","Piece"],"kind":"struct"},"1:10931:9316":{"crate_id":1,"path":["std","sys","pal","unix","fs","FilePermissions"],"kind":"struct"},"16:6278:10374":{"crate_id":16,"path":["gimli","read","dwarf","Dwarf"],"kind":"struct"},"2:30350:10926":{"crate_id":2,"path":["core","num","FpCategory"],"kind":"enum"},"1:10346:28964":{"crate_id":1,"path":["std","sys","pal","unix","os","Env"],"kind":"struct"},"20:0:2040":{"crate_id":20,"path":["proc_macro2"],"kind":"module"},"2:46024:8598":{"crate_id":2,"path":["core","core_arch","simd","f32x2"],"kind":"struct"},"6:6664:8002":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_exit"],"kind":"struct"},"2:44150:9251":{"crate_id":2,"path":["core","str","iter","SplitWhitespace"],"kind":"struct"},"6:6629:7988":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","Elf32_Chdr"],"kind":"struct"},"24:98:4096":{"crate_id":24,"path":["syn","token","private","CustomToken"],"kind":"trait"},"17:11788:23810":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldSubCache"],"kind":"struct"},"17:11419:5852":{"crate_id":17,"path":["object","read","elf","symbol","SymbolTable"],"kind":"struct"},"24:5815:2587":{"crate_id":24,"path":["syn","path","Constraint"],"kind":"struct"},"6:6417:7874":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","aiocb"],"kind":"struct"},"16:7695:6964":{"crate_id":16,"path":["gimli","read","rnglists","RawRange"],"kind":"struct"},"16:3196:6759":{"crate_id":16,"path":["gimli","arch","AArch64"],"kind":"struct"},"16:5307:6849":{"crate_id":16,"path":["gimli","constants","DwOp"],"kind":"struct"},"2:21712:11073":{"crate_id":2,"path":["core","core_simd","lane_count","LaneCount"],"kind":"struct"},"2:3179:4783":{"crate_id":2,"path":["core","marker","FnPtr"],"kind":"trait"},"2:10563:10873":{"crate_id":2,"path":["core","hash","BuildHasher"],"kind":"trait"},"6:4992:7566":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_condition_effect"],"kind":"struct"},"11:1107:22646":{"crate_id":11,"path":["hashbrown","map","OccupiedEntryRef"],"kind":"struct"},"6:1490:7305":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreq"],"kind":"struct"},"17:11730:8947":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSubsubsectionIterator"],"kind":"struct"},"18:608:37212":{"crate_id":18,"path":["memchr","memmem","twoway","Suffix"],"kind":"struct"},"5:2535:8284":{"crate_id":5,"path":["alloc","collections","btree","node","NodeRef"],"kind":"struct"},"5:3406:5233":{"crate_id":5,"path":["alloc","collections","btree","set","ExtractIf"],"kind":"struct"},"18:754:8932":{"crate_id":18,"path":["memchr","memmem","SearcherRev"],"kind":"struct"},"2:4720:3797":{"crate_id":2,"path":["core","cell","BorrowRef"],"kind":"struct"},"2:1886:5475":{"crate_id":2,"path":["core","mem","maybe_uninit","Guard"],"kind":"struct"},"17:16069:6712":{"crate_id":17,"path":["object","xcoff","SymbolBytes"],"kind":"struct"},"16:6098:23585":{"crate_id":16,"path":["gimli","read","cfi","CfaRule"],"kind":"enum"},"2:3358:3806":{"crate_id":2,"path":["core","ops","deref","DerefMut"],"kind":"trait"},"2:22481:11162":{"crate_id":2,"path":["core","core_simd","simd","ptr","const_ptr","SimdConstPtr"],"kind":"trait"},"6:6775:8039":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","iocb"],"kind":"struct"},"11:396:5446":{"crate_id":11,"path":["hashbrown","raw","RawDrain"],"kind":"struct"},"6:1547:7336":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_ll"],"kind":"struct"},"18:635:5720":{"crate_id":18,"path":["memchr","memmem","twoway","ApproximateByteSet"],"kind":"struct"},"1:12347:732":{"crate_id":1,"path":["std","f128"],"kind":"primitive"},"24:4728:3944":{"crate_id":24,"path":["syn","token","Question"],"kind":"struct"},"6:7602:8237":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ucontext_t"],"kind":"struct"},"1:9174:3634":{"crate_id":1,"path":["std","sync","mpsc","IntoIter"],"kind":"struct"},"6:5320:7684":{"crate_id":6,"path":["libc","unix","linux_like","linux","seccomp_data"],"kind":"struct"},"2:40533:16357":{"crate_id":2,"path":["core","ffi","c_str","FromBytesWithNulErrorKind"],"kind":"enum"},"2:47107:8696":{"crate_id":2,"path":["core","core_arch","x86","__m256i"],"kind":"struct"},"1:1631:9131":{"crate_id":1,"path":["std","collections","hash","set","SymmetricDifference"],"kind":"struct"},"24:1941:2278":{"crate_id":24,"path":["syn","parse_quote"],"kind":"macro"},"2:13495:34141":{"crate_id":2,"path":["core","future","async_drop","AsyncDropOwning"],"kind":"struct"},"2:44602:9282":{"crate_id":2,"path":["core","str","CharEscapeDefault"],"kind":"struct"},"6:7366:8132":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stat"],"kind":"struct"},"5:5073:5475":{"crate_id":5,"path":["alloc","rc","from_iter_exact","Guard"],"kind":"struct"},"17:12213:23846":{"crate_id":17,"path":["object","read","pe","file","PeComdatSectionIterator"],"kind":"struct"},"6:5146:7610":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Shdr"],"kind":"struct"},"1:10910:9308":{"crate_id":1,"path":["std","sys","pal","unix","fs","FileAttr"],"kind":"struct"},"2:46266:8619":{"crate_id":2,"path":["core","core_arch","simd","m8x16"],"kind":"struct"},"17:15769:6638":{"crate_id":17,"path":["object","pe","ImageFunctionEntry64"],"kind":"struct"},"17:14235:6200":{"crate_id":17,"path":["object","macho","DylibReference"],"kind":"struct"},"2:4529:3809":{"crate_id":2,"path":["core","cell","once","OnceCell"],"kind":"struct"},"2:2066:5187":{"crate_id":2,"path":["core","ptr","metadata","Thin"],"kind":"trait_alias"},"1:8483:8772":{"crate_id":1,"path":["std","io","IoSlice"],"kind":"struct"},"16:7428:23596":{"crate_id":16,"path":["gimli","read","op","EvaluationResult"],"kind":"enum"},"17:13387:6019":{"crate_id":17,"path":["object","elf","Rel32"],"kind":"struct"},"1:4294:33595":{"crate_id":1,"path":["std","os","unix","net","ancillary","AncillaryDataIter"],"kind":"struct"},"17:11269:23716":{"crate_id":17,"path":["object","read","coff","import","ImportName"],"kind":"enum"},"2:22865:9179":{"crate_id":2,"path":["core","num","dec2flt","ParseFloatError"],"kind":"struct"},"2:8309:3715":{"crate_id":2,"path":["core","iter","traits","exact_size","ExactSizeIterator"],"kind":"trait"},"16:4641:6834":{"crate_id":16,"path":["gimli","constants","DwVirtuality"],"kind":"struct"},"17:15078:6439":{"crate_id":17,"path":["object","pe","ImageSymbol"],"kind":"struct"},"18:718:5721":{"crate_id":18,"path":["memchr","memmem","NeedleInfo"],"kind":"struct"},"6:7389:8150":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stat64"],"kind":"struct"},"17:11715:8946":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSubsection"],"kind":"struct"},"1:7984:5031":{"crate_id":1,"path":["std","thread","local","AccessError"],"kind":"struct"},"2:2535:5171":{"crate_id":2,"path":["core","ptr","with_exposed_provenance"],"kind":"function"},"1:1625:9130":{"crate_id":1,"path":["std","collections","hash","set","Difference"],"kind":"struct"},"17:11547:5697":{"crate_id":17,"path":["object","read","elf","note","Note"],"kind":"struct"},"6:5336:7688":{"crate_id":6,"path":["libc","unix","linux_like","linux","seccomp_notif"],"kind":"struct"},"1:8002:5018":{"crate_id":1,"path":["std","thread","Builder"],"kind":"struct"},"24:1819:3760":{"crate_id":24,"path":["syn","parse","StepCursor"],"kind":"struct"},"17:11812:23776":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCacheImage"],"kind":"struct"},"24:5971:3626":{"crate_id":24,"path":["syn","ty","TypeTuple"],"kind":"struct"},"17:14246:6202":{"crate_id":17,"path":["object","macho","TwolevelHintsCommand"],"kind":"struct"},"6:5329:7687":{"crate_id":6,"path":["libc","unix","linux_like","linux","seccomp_notif_sizes"],"kind":"struct"},"24:5286:3575":{"crate_id":24,"path":["syn","expr","ExprForLoop"],"kind":"struct"},"2:40522:9201":{"crate_id":2,"path":["core","ffi","c_str","FromBytesWithNulError"],"kind":"struct"},"2:8682:3714":{"crate_id":2,"path":["core","iter","traits","marker","TrustedStep"],"kind":"trait"},"1:12306:10783":{"crate_id":1,"path":["std","backtrace_rs","types","BytesOrWideString"],"kind":"enum"},"16:2636:6780":{"crate_id":16,"path":["gimli","common","DebugMacroOffset"],"kind":"struct"},"2:47197:8708":{"crate_id":2,"path":["core","core_arch","x86","__m128bh"],"kind":"struct"}},"external_crates":{"23":{"name":"quote","html_root_url":"https://docs.rs/quote/1.0.36/"},"20":{"name":"proc_macro2","html_root_url":"https://docs.rs/proc-macro2/1.0.81/"},"17":{"name":"object","html_root_url":"https://doc.rust-lang.org/nightly/"},"14":{"name":"rustc_demangle","html_root_url":"https://doc.rust-lang.org/nightly/"},"11":{"name":"hashbrown","html_root_url":"https://doc.rust-lang.org/nightly/"},"8":{"name":"cfg_if","html_root_url":"https://docs.rs/cfg-if/"},"5":{"name":"alloc","html_root_url":"https://doc.rust-lang.org/nightly/"},"2":{"name":"core","html_root_url":"https://doc.rust-lang.org/nightly/"},"22":{"name":"unicode_ident","html_root_url":"https://docs.rs/unicode-ident/1.0.12/"},"19":{"name":"panic_unwind","html_root_url":"https://doc.rust-lang.org/nightly/"},"16":{"name":"gimli","html_root_url":"https://doc.rust-lang.org/nightly/"},"13":{"name":"std_detect","html_root_url":"https://doc.rust-lang.org/nightly/"},"10":{"name":"adler","html_root_url":"https://docs.rs/adler/1.0.2/"},"7":{"name":"unwind","html_root_url":"https://doc.rust-lang.org/nightly/"},"4":{"name":"rustc_std_workspace_core","html_root_url":"https://doc.rust-lang.org/nightly/"},"1":{"name":"std","html_root_url":"https://doc.rust-lang.org/nightly/"},"24":{"name":"syn","html_root_url":"https://docs.rs/syn/2.0.60/"},"21":{"name":"proc_macro","html_root_url":"https://doc.rust-lang.org/nightly/"},"18":{"name":"memchr","html_root_url":"https://doc.rust-lang.org/nightly/"},"15":{"name":"addr2line","html_root_url":"https://doc.rust-lang.org/nightly/"},"12":{"name":"rustc_std_workspace_alloc","html_root_url":"https://doc.rust-lang.org/nightly/"},"9":{"name":"miniz_oxide","html_root_url":"https://doc.rust-lang.org/nightly/"},"6":{"name":"libc","html_root_url":"https://doc.rust-lang.org/nightly/"},"3":{"name":"compiler_builtins","html_root_url":"https://doc.rust-lang.org/nightly/"}},"format_version":29}