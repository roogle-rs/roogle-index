{"root":"0:0:2416","crate_version":"1.0.203","includes_private":false,"index":{"2:13635:29142":{"id":"2:13635:29142","crate_id":2,"name":"split_at_mut","span":null,"visibility":"public","docs":"Divide one mutable string slice into two at an index.\n\nThe argument, `mid`, should be a byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get immutable string slices instead, see the [`split_at`] method.\n\n[`split_at`]: str::split_at\n\n# Panics\n\nPanics if `mid` is not on a UTF-8 code point boundary, or if it is past\nthe end of the last code point of the string slice.  For a non-panicking\nalternative see [`split_at_mut_checked`](str::split_at_mut_checked).\n\n# Examples\n\n```\nlet mut s = \"Per Martin-Löf\".to_string();\n{\n    let (first, last) = s.split_at_mut(3);\n    first.make_ascii_uppercase();\n    assert_eq!(\"PER\", first);\n    assert_eq!(\" Martin-Löf\", last);\n}\nassert_eq!(\"PER Martin-Löf\", s);\n```","links":{"str::split_at":"2:13634:3409","str::split_at_mut_checked":"2:13637:29146"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["mid",{"primitive":"usize"}]],"output":{"tuple":[{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13636:29145":{"id":"2:13636:29145","crate_id":2,"name":"split_at_checked","span":null,"visibility":"public","docs":"Divide one string slice into two at an index.\n\nThe argument, `mid`, should be a valid byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point. The\nmethod returns `None` if that’s not the case.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get mutable string slices instead, see the [`split_at_mut_checked`]\nmethod.\n\n[`split_at_mut_checked`]: str::split_at_mut_checked\n\n# Examples\n\n```\nlet s = \"Per Martin-Löf\";\n\nlet (first, last) = s.split_at_checked(3).unwrap();\nassert_eq!(\"Per\", first);\nassert_eq!(\" Martin-Löf\", last);\n\nassert_eq!(None, s.split_at_checked(13));  // Inside “ö”\nassert_eq!(None, s.split_at_checked(16));  // Beyond the string length\n```","links":{"str::split_at_mut_checked":"2:13637:29146"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["mid",{"primitive":"usize"}]],"output":{"resolved_path":{"name":"Option","id":"2:42511:197","args":{"angle_bracketed":{"args":[{"type":{"tuple":[{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13707:35923":{"id":"2:13707:35923","crate_id":2,"name":"trim_end","span":null,"visibility":"public","docs":"Returns a string slice with trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Text directionality\n\nA string is a sequence of bytes. `end` in this context means the last\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be right side, and for right-to-left languages like\nArabic or Hebrew, this will be the left side.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\nassert_eq!(\"\\n Hello\\tworld\", s.trim_end());\n```\n\nDirectionality:\n\n```\nlet s = \"  English  \";\nassert!(Some('h') == s.trim_end().chars().rev().next());\n\nlet s = \"  עברית  \";\nassert!(Some('ת') == s.trim_end().chars().rev().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_trim_end\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13632:35913":{"id":"2:13632:35913","crate_id":2,"name":"slice_unchecked","span":null,"visibility":"public","docs":"Creates a string slice from another string slice, bypassing safety\nchecks.\n\nThis is generally not recommended, use with caution! For a safe\nalternative see [`str`] and [`Index`].\n\n[`Index`]: crate::ops::Index\n\nThis new slice goes from `begin` to `end`, including `begin` but\nexcluding `end`.\n\nTo get a mutable string slice instead, see the\n[`slice_mut_unchecked`] method.\n\n[`slice_mut_unchecked`]: str::slice_mut_unchecked\n\n# Safety\n\nCallers of this function are responsible that three preconditions are\nsatisfied:\n\n* `begin` must not exceed `end`.\n* `begin` and `end` must be byte positions within the string slice.\n* `begin` and `end` must lie on UTF-8 sequence boundaries.\n\n# Examples\n\n```\nlet s = \"Löwe 老虎 Léopard\";\n\nunsafe {\n    assert_eq!(\"Löwe 老虎 Léopard\", s.slice_unchecked(0, 21));\n}\n\nlet s = \"Hello, world!\";\n\nunsafe {\n    assert_eq!(\"world\", s.slice_unchecked(7, 12));\n}\n```","links":{"`str`":"1:12458:1754","str::slice_mut_unchecked":"2:13633:35914","crate::ops::Index":"2:40057:3166"},"attrs":["#[deprecated(since = \"1.29.0\", note =\n\"use `get_unchecked(begin..end)` instead\")]","#[must_use]"],"deprecation":{"since":"1.29.0","note":"use `get_unchecked(begin..end)` instead"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["begin",{"primitive":"usize"}],["end",{"primitive":"usize"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"0:0:2416":{"id":"0:0:2416","crate_id":0,"name":"serde_derive","span":{"filename":"src/lib.rs","begin":[1,0],"end":[102,1]},"visibility":"public","docs":"This crate provides Serde's two derive macros.\n\n```edition2021\n# use serde_derive::{Deserialize, Serialize};\n#\n#[derive(Serialize, Deserialize)]\n# struct S;\n#\n# fn main() {}\n```\n\nPlease refer to [https://serde.rs/derive.html] for how to set this up.\n\n[https://serde.rs/derive.html]: https://serde.rs/derive.html","links":{},"attrs":["#![doc(html_root_url = \"https://docs.rs/serde_derive/1.0.203\")]","#![allow(unexpected_cfgs)]","#![allow(clippy::branches_sharing_code, clippy::cognitive_complexity,\nclippy::collapsible_match, clippy::derive_partial_eq_without_eq,\nclippy::enum_variant_names, clippy::manual_map,\nclippy::match_like_matches_macro, clippy::needless_pass_by_value,\nclippy::too_many_arguments, clippy::trivially_copy_pass_by_ref,\nclippy::used_underscore_binding, clippy::wildcard_in_or_patterns,\nclippy::unnested_or_patterns,)]","#![allow(clippy::cast_possible_truncation, clippy::checked_conversions,\nclippy::doc_markdown, clippy::enum_glob_use, clippy::indexing_slicing,\nclippy::items_after_statements, clippy::let_underscore_untyped,\nclippy::manual_assert, clippy::map_err_ignore, clippy::match_same_arms,\nclippy::match_wildcard_for_single_variants, clippy::module_name_repetitions,\nclippy::must_use_candidate, clippy::similar_names, clippy::single_match_else,\nclippy::struct_excessive_bools, clippy::too_many_lines,\nclippy::unseparated_literal_suffix, clippy::unused_self, clippy::use_self,\nclippy::wildcard_imports)]"],"deprecation":null,"inner":{"module":{"is_crate":true,"items":["0:964:2405","0:965:2413"],"is_stripped":false}}},"0:1023:2639":{"id":"0:1023:2639","crate_id":0,"name":"Symbol","span":{"filename":"src/internals/symbol.rs","begin":[5,0],"end":[5,32]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"struct":{"kind":{"tuple":[null]},"generics":{"params":[],"where_predicates":[]},"impls":[]}}},"2:13700:35920":{"id":"2:13700:35920","crate_id":2,"name":"rmatch_indices","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within `self`,\nyielded in reverse order along with the index of the match.\n\nFor matches of `pat` within `self` that overlap, only the indices\ncorresponding to the last match are returned.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`match_indices`] method can be used.\n\n[`match_indices`]: str::match_indices\n\n# Examples\n\n```\nlet v: Vec<_> = \"abcXXXabcYYYabc\".rmatch_indices(\"abc\").collect();\nassert_eq!(v, [(12, \"abc\"), (6, \"abc\"), (0, \"abc\")]);\n\nlet v: Vec<_> = \"1abcabc2\".rmatch_indices(\"abc\").collect();\nassert_eq!(v, [(4, \"abc\"), (1, \"abc\")]);\n\nlet v: Vec<_> = \"ababa\".rmatch_indices(\"aba\").collect();\nassert_eq!(v, [(2, \"aba\")]); // only the last `aba`\n```","links":{"self::pattern":"2:13301:4402","`DoubleEndedIterator`":"2:8451:133","prim@char":"1:12452:482","str::match_indices":"2:13697:35919"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RMatchIndices","id":"2:44549:9575","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13307:16583","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:13307:16583","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:13322:16584","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13732:2631":{"id":"2:13732:2631","crate_id":2,"name":"parse","span":null,"visibility":"public","docs":"Parses this string slice into another type.\n\nBecause `parse` is so general, it can cause problems with type\ninference. As such, `parse` is one of the few times you'll see\nthe syntax affectionately known as the 'turbofish': `::<>`. This\nhelps the inference algorithm understand specifically which type\nyou're trying to parse into.\n\n`parse` can parse into any type that implements the [`FromStr`] trait.\n\n# Errors\n\nWill return [`Err`] if it's not possible to parse this string slice into\nthe desired type.\n\n[`Err`]: FromStr::Err\n\n# Examples\n\nBasic usage\n\n```\nlet four: u32 = \"4\".parse().unwrap();\n\nassert_eq!(4, four);\n```\n\nUsing the 'turbofish' instead of annotating `four`:\n\n```\nlet four = \"4\".parse::<u32>();\n\nassert_eq!(Ok(4), four);\n```\n\nFailing to parse:\n\n```\nlet nope = \"j\".parse::<u32>();\n\nassert!(nope.is_err());\n```","links":{"FromStr::Err":"2:13262:140","`FromStr`":"2:13261:4013"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Result","id":"2:42643:229","args":{"angle_bracketed":{"args":[{"type":{"generic":"F"}},{"type":{"qualified_path":{"name":"Err","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"F"},"trait":{"name":"FromStr","id":"2:13261:4013","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"F"},"bounds":[{"trait_bound":{"trait":{"name":"FromStr","id":"2:13261:4013","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13664:29147":{"id":"2:13664:29147","crate_id":2,"name":"split","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by\ncharacters matched by a pattern.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rsplit`] method can be used.\n\n[`rsplit`]: str::rsplit\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".split(' ').collect();\nassert_eq!(v, [\"Mary\", \"had\", \"a\", \"little\", \"lamb\"]);\n\nlet v: Vec<&str> = \"\".split('X').collect();\nassert_eq!(v, [\"\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".split('X').collect();\nassert_eq!(v, [\"lion\", \"\", \"tiger\", \"leopard\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".split(\"::\").collect();\nassert_eq!(v, [\"lion\", \"tiger\", \"leopard\"]);\n\nlet v: Vec<&str> = \"abc1def2ghi\".split(char::is_numeric).collect();\nassert_eq!(v, [\"abc\", \"def\", \"ghi\"]);\n\nlet v: Vec<&str> = \"lionXtigerXleopard\".split(char::is_uppercase).collect();\nassert_eq!(v, [\"lion\", \"tiger\", \"leopard\"]);\n```\n\nIf the pattern is a slice of chars, split on each occurrence of any of the characters:\n\n```\nlet v: Vec<&str> = \"2020-11-03 23:59\".split(&['-', ' ', ':', '@'][..]).collect();\nassert_eq!(v, [\"2020\", \"11\", \"03\", \"23\", \"59\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".split(|c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"abc\", \"def\", \"ghi\"]);\n```\n\nIf a string contains multiple contiguous separators, you will end up\nwith empty strings in the output:\n\n```\nlet x = \"||||a||b|c\".to_string();\nlet d: Vec<_> = x.split('|').collect();\n\nassert_eq!(d, &[\"\", \"\", \"\", \"\", \"a\", \"\", \"b\", \"c\"]);\n```\n\nContiguous separators are separated by the empty string.\n\n```\nlet x = \"(///)\".to_string();\nlet d: Vec<_> = x.split('/').collect();\n\nassert_eq!(d, &[\"(\", \"\", \"\", \")\"]);\n```\n\nSeparators at the start or end of a string are neighbored\nby empty strings.\n\n```\nlet d: Vec<_> = \"010\".split(\"0\").collect();\nassert_eq!(d, &[\"\", \"1\", \"\"]);\n```\n\nWhen the empty string is used as a separator, it separates\nevery character in the string, along with the beginning\nand end of the string.\n\n```\nlet f: Vec<_> = \"rust\".split(\"\").collect();\nassert_eq!(f, &[\"\", \"r\", \"u\", \"s\", \"t\", \"\"]);\n```\n\nContiguous separators can lead to possibly surprising behavior\nwhen whitespace is used as the separator. This code is correct:\n\n```\nlet x = \"    a  b c\".to_string();\nlet d: Vec<_> = x.split(' ').collect();\n\nassert_eq!(d, &[\"\", \"\", \"\", \"\", \"a\", \"\", \"b\", \"c\"]);\n```\n\nIt does _not_ give you:\n\n```,ignore\nassert_eq!(d, &[\"a\", \"b\", \"c\"]);\n```\n\nUse [`split_whitespace`] for this behavior.\n\n[`split_whitespace`]: str::split_whitespace","links":{"self::pattern":"2:13301:4402","`DoubleEndedIterator`":"2:8451:133","prim@char":"1:12452:482","str::split_whitespace":"2:13642:34438","str::rsplit":"2:13670:29151"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Split","id":"2:44381:9494","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13307:16583","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13644:33570":{"id":"2:13644:33570","crate_id":2,"name":"lines","span":null,"visibility":"public","docs":"An iterator over the lines of a string, as string slices.\n\nLines are split at line endings that are either newlines (`\\n`) or\nsequences of a carriage return followed by a line feed (`\\r\\n`).\n\nLine terminators are not included in the lines returned by the iterator.\n\nNote that any carriage return (`\\r`) not immediately followed by a\nline feed (`\\n`) does not split a line. These carriage returns are\nthereby included in the produced lines.\n\nThe final line ending is optional. A string that ends with a final line\nending will return the same lines as an otherwise identical string\nwithout a final line ending.\n\n# Examples\n\nBasic usage:\n\n```\nlet text = \"foo\\r\\nbar\\n\\nbaz\\r\";\nlet mut lines = text.lines();\n\nassert_eq!(Some(\"foo\"), lines.next());\nassert_eq!(Some(\"bar\"), lines.next());\nassert_eq!(Some(\"\"), lines.next());\n// Trailing carriage return is included in the last line\nassert_eq!(Some(\"baz\\r\"), lines.next());\n\nassert_eq!(None, lines.next());\n```\n\nThe final line does not require any ending:\n\n```\nlet text = \"foo\\nbar\\n\\r\\nbaz\";\nlet mut lines = text.lines();\n\nassert_eq!(Some(\"foo\"), lines.next());\nassert_eq!(Some(\"bar\"), lines.next());\nassert_eq!(Some(\"\"), lines.next());\nassert_eq!(Some(\"baz\"), lines.next());\n\nassert_eq!(None, lines.next());\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Lines","id":"2:44635:9579","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13611":{"id":"2:13611","crate_id":2,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":["#[cfg(not(test))]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"primitive":"str"},"items":["2:13612:1016","2:13613:2760","2:13614:35909","2:13615:35910","2:13617:35911","2:13620:3521","2:13621:35912","2:13622:342","2:13623:29119","2:13624:2651","2:13626:29116","2:13628:29117","2:13630:29118","2:13632:35913","2:13633:35914","2:13634:3409","2:13635:29142","2:13636:29145","2:13637:29146","2:13639:3003","2:13640:2997","2:13641:9483","2:13642:34438","2:13643:34454","2:13644:33570","2:13645:35915","2:13646:34452","2:13647:2862","2:13650:28767","2:13653:28769","2:13656:3311","2:13660:5167","2:13664:29147","2:13667:29149","2:13670:29151","2:13673:35916","2:13676:35917","2:13679:29153","2:13682:29155","2:13685:29157","2:13688:29158","2:13691:2756","2:13694:35918","2:13697:35919","2:13700:35920","2:13703:35921","2:13705:35922","2:13707:35923","2:13709:35924","2:13710:35925","2:13711:35926","2:13714:2669","2:13717:28369","2:13720:29159","2:13723:35927","2:13726:35928","2:13729:35929","2:13732:2631","2:13734:28583","2:13735:30353","2:13736:28584","2:13737:28582","2:13738:28581","2:13739:30356","2:13740:30357","2:13741:30358","2:13742:35930","2:13744:11119","2:13745:35931"],"negative":false,"synthetic":false,"blanket_impl":null}}},"2:13624:2651":{"id":"2:13624:2651","crate_id":2,"name":"get","span":null,"visibility":"public","docs":"Returns a subslice of `str`.\n\nThis is the non-panicking alternative to indexing the `str`. Returns\n[`None`] whenever equivalent indexing operation would panic.\n\n# Examples\n\n```\nlet v = String::from(\"🗻∈🌏\");\n\nassert_eq!(Some(\"🗻\"), v.get(0..4));\n\n// indices not on UTF-8 sequence boundaries\nassert!(v.get(1..).is_none());\nassert!(v.get(..8).is_none());\n\n// out of bounds\nassert!(v.get(..42).is_none());\n```","links":{"`None`":"2:42513:194"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"resolved_path":{"name":"Option","id":"2:42511:197","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"2:11434:243","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"2:11434:243","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13612:1016":{"id":"2:13612:1016","crate_id":2,"name":"len","span":null,"visibility":"public","docs":"Returns the length of `self`.\n\nThis length is in bytes, not [`char`]s or graphemes. In other words,\nit might not be what a human considers the length of the string.\n\n[`char`]: prim@char\n\n# Examples\n\n```\nlet len = \"foo\".len();\nassert_eq!(3, len);\n\nassert_eq!(\"ƒoo\".len(), 4); // fancy f!\nassert_eq!(\"ƒoo\".chars().count(), 3);\n```","links":{"prim@char":"1:12452:482"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13685:29157":{"id":"2:13685:29157","crate_id":2,"name":"split_once","span":null,"visibility":"public","docs":"Splits the string on the first occurrence of the specified delimiter and\nreturns prefix before delimiter and suffix after delimiter.\n\n# Examples\n\n```\nassert_eq!(\"cfg\".split_once('='), None);\nassert_eq!(\"cfg=\".split_once('='), Some((\"cfg\", \"\")));\nassert_eq!(\"cfg=foo\".split_once('='), Some((\"cfg\", \"foo\")));\nassert_eq!(\"cfg=foo=bar\".split_once('='), Some((\"cfg\", \"foo=bar\")));\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["delimiter",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:42511:197","args":{"angle_bracketed":{"args":[{"type":{"tuple":[{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13307:16583","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13744:11119":{"id":"2:13744:11119","crate_id":2,"name":"escape_default","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_default`].\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"❤\\n!\".escape_default() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"❤\\n!\".escape_default());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"\\\\u{{2764}}\\\\n!\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"❤\\n!\".escape_default().to_string(), \"\\\\u{2764}\\\\n!\");\n```","links":{"`char::escape_default`":"2:5125:11119"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EscapeDefault","id":"2:44689:9521","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13709:35924":{"id":"2:13709:35924","crate_id":2,"name":"trim_left","span":null,"visibility":"public","docs":"Returns a string slice with leading whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`.\n\n# Text directionality\n\nA string is a sequence of bytes. 'Left' in this context means the first\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _right_ side, not the left.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \" Hello\\tworld\\t\";\n\nassert_eq!(\"Hello\\tworld\\t\", s.trim_left());\n```\n\nDirectionality:\n\n```\nlet s = \"  English\";\nassert!(Some('E') == s.trim_left().chars().next());\n\nlet s = \"  עברית\";\nassert!(Some('ע') == s.trim_left().chars().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_start`\", suggestion\n= \"trim_start\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_start`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13642:34438":{"id":"2:13642:34438","crate_id":2,"name":"split_whitespace","span":null,"visibility":"public","docs":"Splits a string slice by whitespace.\n\nThe iterator returned will return string slices that are sub-slices of\nthe original string slice, separated by any amount of whitespace.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`. If you only want to split on ASCII whitespace\ninstead, use [`split_ascii_whitespace`].\n\n[`split_ascii_whitespace`]: str::split_ascii_whitespace\n\n# Examples\n\nBasic usage:\n\n```\nlet mut iter = \"A few words\".split_whitespace();\n\nassert_eq!(Some(\"A\"), iter.next());\nassert_eq!(Some(\"few\"), iter.next());\nassert_eq!(Some(\"words\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nAll kinds of whitespace are considered:\n\n```\nlet mut iter = \" Mary   had\\ta\\u{2009}little  \\n\\t lamb\".split_whitespace();\nassert_eq!(Some(\"Mary\"), iter.next());\nassert_eq!(Some(\"had\"), iter.next());\nassert_eq!(Some(\"a\"), iter.next());\nassert_eq!(Some(\"little\"), iter.next());\nassert_eq!(Some(\"lamb\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nIf the string is empty or all whitespace, the iterator yields no string slices:\n```\nassert_eq!(\"\".split_whitespace().next(), None);\nassert_eq!(\"   \".split_whitespace().next(), None);\n```","links":{"str::split_ascii_whitespace":"2:13643:34454"},"attrs":["#[must_use =\n\"this returns the split string as an iterator, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_split_whitespace\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"SplitWhitespace","id":"2:44655:9581","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13660:5167":{"id":"2:13660:5167","crate_id":2,"name":"rfind","span":null,"visibility":"public","docs":"Returns the byte index for the first character of the last match of the pattern in\nthis string slice.\n\nReturns [`None`] if the pattern doesn't match.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nlet s = \"Löwe 老虎 Léopard Gepardi\";\n\nassert_eq!(s.rfind('L'), Some(13));\nassert_eq!(s.rfind('é'), Some(14));\nassert_eq!(s.rfind(\"pard\"), Some(24));\n```\n\nMore complex patterns with closures:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\n\nassert_eq!(s.rfind(char::is_whitespace), Some(12));\nassert_eq!(s.rfind(char::is_lowercase), Some(20));\n```\n\nNot finding the pattern:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\nlet x: &[_] = &['1', '2'];\n\nassert_eq!(s.rfind(x), None);\n```","links":{"`None`":"2:42513:194","prim@char":"1:12452:482","self::pattern":"2:13301:4402"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:42511:197","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13307:16583","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:13307:16583","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:13322:16584","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:493-0:404:2543":{"id":"0:493-0:404:2543","crate_id":0,"name":null,"span":{"filename":"src/internals/mod.rs","begin":[14,0],"end":[14,41]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"import":{"source":"self::receiver::replace_receiver","name":"replace_receiver","id":"0:404:2543","glob":false}}},"2:13714:2669":{"id":"2:13714:2669","crate_id":2,"name":"trim_start_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. `start` in this context means the first\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be left side, and for right-to-left languages like\nArabic or Hebrew, this will be the right side.\n\n# Examples\n\n```\nassert_eq!(\"11foo1bar11\".trim_start_matches('1'), \"foo1bar11\");\nassert_eq!(\"123foo1bar123\".trim_start_matches(char::is_numeric), \"foo1bar123\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_start_matches(x), \"foo1bar12\");\n```","links":{"prim@char":"1:12452:482","self::pattern":"2:13301:4402"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13307:16583","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13703:35921":{"id":"2:13703:35921","crate_id":2,"name":"trim","span":null,"visibility":"public","docs":"Returns a string slice with leading and trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Examples\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\n\nassert_eq!(\"Hello\\tworld\", s.trim());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a slice, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_trim\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13614:35909":{"id":"2:13614:35909","crate_id":2,"name":"is_char_boundary","span":null,"visibility":"public","docs":"Checks that `index`-th byte is the first byte in a UTF-8 code point\nsequence or the end of the string.\n\nThe start and end of the string (when `index == self.len()`) are\nconsidered to be boundaries.\n\nReturns `false` if `index` is greater than `self.len()`.\n\n# Examples\n\n```\nlet s = \"Löwe 老虎 Léopard\";\nassert!(s.is_char_boundary(0));\n// start of `老`\nassert!(s.is_char_boundary(6));\nassert!(s.is_char_boundary(s.len()));\n\n// second byte of `ö`\nassert!(!s.is_char_boundary(2));\n\n// third byte of `老`\nassert!(!s.is_char_boundary(8));\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["index",{"primitive":"usize"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13737:28582":{"id":"2:13737:28582","crate_id":2,"name":"make_ascii_uppercase","span":null,"visibility":"public","docs":"Converts this string to its ASCII upper case equivalent in-place.\n\nASCII letters 'a' to 'z' are mapped to 'A' to 'Z',\nbut non-ASCII letters are unchanged.\n\nTo return a new uppercased value without modifying the existing one, use\n[`to_ascii_uppercase()`].\n\n[`to_ascii_uppercase()`]: #method.to_ascii_uppercase\n\n# Examples\n\n```\nlet mut s = String::from(\"Grüße, Jürgen ❤\");\n\ns.make_ascii_uppercase();\n\nassert_eq!(\"GRüßE, JüRGEN ❤\", s);\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5729:36625":{"id":"5:5729:36625","crate_id":5,"name":"to_lowercase","span":null,"visibility":"public","docs":"Returns the lowercase equivalent of this string slice, as a new [`String`].\n\n'Lowercase' is defined according to the terms of the Unicode Derived Core Property\n`Lowercase`.\n\nSince some characters can expand into multiple characters when changing\nthe case, this function returns a [`String`] instead of modifying the\nparameter in-place.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"HELLO\";\n\nassert_eq!(\"hello\", s.to_lowercase());\n```\n\nA tricky example, with sigma:\n\n```\nlet sigma = \"Σ\";\n\nassert_eq!(\"σ\", sigma.to_lowercase());\n\n// but at the end of a word, it's ς, not σ:\nlet odysseus = \"ὈΔΥΣΣΕΎΣ\";\n\nassert_eq!(\"ὀδυσσεύς\", odysseus.to_lowercase());\n```\n\nLanguages without case are not changed:\n\n```\nlet new_year = \"农历新年\";\n\nassert_eq!(new_year, new_year.to_lowercase());\n```","links":{"`String`":"5:7801:248"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the lowercase string as a new String, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7801:248","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5737:36626":{"id":"5:5737:36626","crate_id":5,"name":"to_uppercase","span":null,"visibility":"public","docs":"Returns the uppercase equivalent of this string slice, as a new [`String`].\n\n'Uppercase' is defined according to the terms of the Unicode Derived Core Property\n`Uppercase`.\n\nSince some characters can expand into multiple characters when changing\nthe case, this function returns a [`String`] instead of modifying the\nparameter in-place.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"hello\";\n\nassert_eq!(\"HELLO\", s.to_uppercase());\n```\n\nScripts without case are not changed:\n\n```\nlet new_year = \"农历新年\";\n\nassert_eq!(new_year, new_year.to_uppercase());\n```\n\nOne character can become multiple:\n```\nlet s = \"tschüß\";\n\nassert_eq!(\"TSCHÜSS\", s.to_uppercase());\n```","links":{"`String`":"5:7801:248"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the uppercase string as a new String, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7801:248","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13691:2756":{"id":"2:13691:2756","crate_id":2,"name":"matches","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within the given string\nslice.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rmatches`] method can be used.\n\n[`rmatches`]: str::rmatches\n\n# Examples\n\n```\nlet v: Vec<&str> = \"abcXXXabcYYYabc\".matches(\"abc\").collect();\nassert_eq!(v, [\"abc\", \"abc\", \"abc\"]);\n\nlet v: Vec<&str> = \"1abc2abc3\".matches(char::is_numeric).collect();\nassert_eq!(v, [\"1\", \"2\", \"3\"]);\n```","links":{"self::pattern":"2:13301:4402","`DoubleEndedIterator`":"2:8451:133","prim@char":"1:12452:482","str::rmatches":"2:13694:35918"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Matches","id":"2:44585:9577","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13307:16583","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:965:2413":{"id":"0:965:2413","crate_id":0,"name":"Deserialize","span":{"filename":"src/lib.rs","begin":[97,0],"end":[102,1]},"visibility":"public","docs":null,"links":{},"attrs":["#[proc_macro_derive(Deserialize, attributes(serde))]"],"deprecation":null,"inner":{"proc_macro":{"kind":"derive","helpers":["serde"]}}},"2:13634:3409":{"id":"2:13634:3409","crate_id":2,"name":"split_at","span":null,"visibility":"public","docs":"Divide one string slice into two at an index.\n\nThe argument, `mid`, should be a byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get mutable string slices instead, see the [`split_at_mut`]\nmethod.\n\n[`split_at_mut`]: str::split_at_mut\n\n# Panics\n\nPanics if `mid` is not on a UTF-8 code point boundary, or if it is past\nthe end of the last code point of the string slice.  For a non-panicking\nalternative see [`split_at_checked`](str::split_at_checked).\n\n# Examples\n\n```\nlet s = \"Per Martin-Löf\";\n\nlet (first, last) = s.split_at(3);\n\nassert_eq!(\"Per\", first);\nassert_eq!(\" Martin-Löf\", last);\n```","links":{"str::split_at_checked":"2:13636:29145","str::split_at_mut":"2:13635:29142"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["mid",{"primitive":"usize"}]],"output":{"tuple":[{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13630:29118":{"id":"2:13630:29118","crate_id":2,"name":"get_unchecked_mut","span":null,"visibility":"public","docs":"Returns a mutable, unchecked subslice of `str`.\n\nThis is the unchecked alternative to indexing the `str`.\n\n# Safety\n\nCallers of this function are responsible that these preconditions are\nsatisfied:\n\n* The starting index must not exceed the ending index;\n* Indexes must be within bounds of the original slice;\n* Indexes must lie on UTF-8 sequence boundaries.\n\nFailing that, the returned string slice may reference invalid memory or\nviolate the invariants communicated by the `str` type.\n\n# Examples\n\n```\nlet mut v = String::from(\"🗻∈🌏\");\nunsafe {\n    assert_eq!(\"🗻\", v.get_unchecked_mut(0..4));\n    assert_eq!(\"∈\", v.get_unchecked_mut(4..7));\n    assert_eq!(\"🌏\", v.get_unchecked_mut(7..11));\n}\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"2:11434:243","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"2:11434:243","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"2:13723:35927":{"id":"2:13723:35927","crate_id":2,"name":"trim_end_matches","span":null,"visibility":"public","docs":"Returns a string slice with all suffixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. `end` in this context means the last\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be right side, and for right-to-left languages like\nArabic or Hebrew, this will be the left side.\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_end_matches('1'), \"11foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_end_matches(char::is_numeric), \"123foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_end_matches(x), \"12foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1fooX\".trim_end_matches(|c| c == '1' || c == 'X'), \"1foo\");\n```","links":{"prim@char":"1:12452:482","self::pattern":"2:13301:4402"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13307:16583","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:13307:16583","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:13322:16584","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13738:28581":{"id":"2:13738:28581","crate_id":2,"name":"make_ascii_lowercase","span":null,"visibility":"public","docs":"Converts this string to its ASCII lower case equivalent in-place.\n\nASCII letters 'A' to 'Z' are mapped to 'a' to 'z',\nbut non-ASCII letters are unchanged.\n\nTo return a new lowercased value without modifying the existing one, use\n[`to_ascii_lowercase()`].\n\n[`to_ascii_lowercase()`]: #method.to_ascii_lowercase\n\n# Examples\n\n```\nlet mut s = String::from(\"GRÜßE, JÜRGEN ❤\");\n\ns.make_ascii_lowercase();\n\nassert_eq!(\"grÜße, jÜrgen ❤\", s);\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13734:28583":{"id":"2:13734:28583","crate_id":2,"name":"is_ascii","span":null,"visibility":"public","docs":"Checks if all characters in this string are within the ASCII range.\n\n# Examples\n\n```\nlet ascii = \"hello!\\n\";\nlet non_ascii = \"Grüße, Jürgen ❤\";\n\nassert!(ascii.is_ascii());\nassert!(!non_ascii.is_ascii());\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13729:35929":{"id":"2:13729:35929","crate_id":2,"name":"trim_right_matches","span":null,"visibility":"public","docs":"Returns a string slice with all suffixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. 'Right' in this context means the last\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _left_ side, not the right.\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_right_matches('1'), \"11foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_right_matches(char::is_numeric), \"123foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_right_matches(x), \"12foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1fooX\".trim_right_matches(|c| c == '1' || c == 'X'), \"1foo\");\n```","links":{"prim@char":"1:12452:482","self::pattern":"2:13301:4402"},"attrs":["#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_end_matches`\",\nsuggestion = \"trim_end_matches\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_end_matches`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13307:16583","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:13307:16583","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:13322:16584","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:86-0:994:2636":{"id":"0:86-0:994:2636","crate_id":0,"name":null,"span":{"filename":"src/internals/attr.rs","begin":[21,0],"end":[21,43]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"import":{"source":"crate::internals::case::RenameRule","name":"RenameRule","id":"0:994:2636","glob":false}}},"2:13676:35917":{"id":"2:13676:35917","crate_id":2,"name":"rsplit_terminator","span":null,"visibility":"public","docs":"An iterator over substrings of `self`, separated by characters\nmatched by a pattern and yielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\nEquivalent to [`split`], except that the trailing substring is\nskipped if empty.\n\n[`split`]: str::split\n\nThis method can be used for string data that is _terminated_,\nrather than _separated_ by a pattern.\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a\nreverse search, and it will be double ended if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`split_terminator`] method can be\nused.\n\n[`split_terminator`]: str::split_terminator\n\n# Examples\n\n```\nlet v: Vec<&str> = \"A.B.\".rsplit_terminator('.').collect();\nassert_eq!(v, [\"B\", \"A\"]);\n\nlet v: Vec<&str> = \"A..B..\".rsplit_terminator(\".\").collect();\nassert_eq!(v, [\"\", \"B\", \"\", \"A\"]);\n\nlet v: Vec<&str> = \"A.B:C.D\".rsplit_terminator(&['.', ':'][..]).collect();\nassert_eq!(v, [\"D\", \"C\", \"B\", \"A\"]);\n```","links":{"self::pattern":"2:13301:4402","str::split":"2:13664:29147","prim@char":"1:12452:482","str::split_terminator":"2:13673:35916"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RSplitTerminator","id":"2:44449:9569","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13307:16583","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:13307:16583","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:13322:16584","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13740:30357":{"id":"2:13740:30357","crate_id":2,"name":"trim_ascii_end","span":null,"visibility":"public","docs":"Returns a string slice with trailing ASCII whitespace removed.\n\n'Whitespace' refers to the definition used by\n[`u8::is_ascii_whitespace`].\n\n[`u8::is_ascii_whitespace`]: u8::is_ascii_whitespace\n\n# Examples\n\n```\nassert_eq!(\"\\r hello world\\u{3000}\\n \".trim_ascii_end(), \"\\r hello world\\u{3000}\");\nassert_eq!(\"  \".trim_ascii_end(), \"\");\nassert_eq!(\"\".trim_ascii_end(), \"\");\n```","links":{"u8::is_ascii_whitespace":"2:1126:40959"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13621:35912":{"id":"2:13621:35912","crate_id":2,"name":"as_bytes_mut","span":null,"visibility":"public","docs":"Converts a mutable string slice to a mutable byte slice.\n\n# Safety\n\nThe caller must ensure that the content of the slice is valid UTF-8\nbefore the borrow ends and the underlying `str` is used.\n\nUse of a `str` whose contents are not valid UTF-8 is undefined behavior.\n\n# Examples\n\nBasic usage:\n\n```\nlet mut s = String::from(\"Hello\");\nlet bytes = unsafe { s.as_bytes_mut() };\n\nassert_eq!(b\"Hello\", bytes);\n```\n\nMutability:\n\n```\nlet mut s = String::from(\"🗻∈🌏\");\n\nunsafe {\n    let bytes = s.as_bytes_mut();\n\n    bytes[0] = 0xF0;\n    bytes[1] = 0x9F;\n    bytes[2] = 0x8D;\n    bytes[3] = 0x94;\n}\n\nassert_eq!(\"🍔∈🌏\", s);\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"slice":{"primitive":"u8"}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"2:13620:3521":{"id":"2:13620:3521","crate_id":2,"name":"as_bytes","span":null,"visibility":"public","docs":"Converts a string slice to a byte slice. To convert the byte slice back\ninto a string slice, use the [`from_utf8`] function.\n\n# Examples\n\n```\nlet bytes = \"bors\".as_bytes();\nassert_eq!(b\"bors\", bytes);\n```","links":{"`from_utf8`":"2:12848:16586"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"primitive":"u8"}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13735:30353":{"id":"2:13735:30353","crate_id":2,"name":"as_ascii","span":null,"visibility":"public","docs":"If this string slice [`is_ascii`](Self::is_ascii), returns it as a slice\nof [ASCII characters](`ascii::Char`), otherwise returns `None`.","links":{"`ascii::Char`":"2:40412:5158","Self::is_ascii":"2:13734:28583"},"attrs":["#[unstable(feature = \"ascii_char\", issue = \"110998\")]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Option","id":"2:42511:197","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"resolved_path":{"name":"AsciiChar","id":"2:40412:5158","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5726:36624":{"id":"5:5726:36624","crate_id":5,"name":"replacen","span":null,"visibility":"public","docs":"Replaces first N matches of a pattern with another string.\n\n`replacen` creates a new [`String`], and copies the data from this string slice into it.\nWhile doing so, it attempts to find matches of a pattern. If it finds any, it\nreplaces them with the replacement string slice at most `count` times.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"foo foo 123 foo\";\nassert_eq!(\"new new 123 foo\", s.replacen(\"foo\", \"new\", 2));\nassert_eq!(\"faa fao 123 foo\", s.replacen('o', \"a\", 3));\nassert_eq!(\"foo foo new23 foo\", s.replacen(char::is_numeric, \"new\", 1));\n```\n\nWhen the pattern doesn't match, it returns this string slice as [`String`]:\n\n```\nlet s = \"this is old\";\nassert_eq!(s, s.replacen(\"cookie monster\", \"little lamb\", 10));\n```","links":{"`String`":"5:7801:248"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the replaced string as a new allocation, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}],["to",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}],["count",{"primitive":"usize"}]],"output":{"resolved_path":{"name":"String","id":"5:7801:248","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13307:16583","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13641:9483":{"id":"2:13641:9483","crate_id":2,"name":"bytes","span":null,"visibility":"public","docs":"An iterator over the bytes of a string slice.\n\nAs a string slice consists of a sequence of bytes, we can iterate\nthrough a string slice by byte. This method returns such an iterator.\n\n# Examples\n\n```\nlet mut bytes = \"bors\".bytes();\n\nassert_eq!(Some(b'b'), bytes.next());\nassert_eq!(Some(b'o'), bytes.next());\nassert_eq!(Some(b'r'), bytes.next());\nassert_eq!(Some(b's'), bytes.next());\n\nassert_eq!(None, bytes.next());\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Bytes","id":"2:44367:3531","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5722:36623":{"id":"5:5722:36623","crate_id":5,"name":"into_boxed_bytes","span":null,"visibility":"public","docs":"Converts a `Box<str>` into a `Box<[u8]>` without copying or allocating.\n\n# Examples\n\n```\nlet s = \"this is a string\";\nlet boxed_str = s.to_owned().into_boxed_str();\nlet boxed_bytes = boxed_str.into_boxed_bytes();\nassert_eq!(*boxed_bytes, *s.as_bytes());\n```","links":{},"attrs":["#[must_use = \"`self` will be dropped if the result is not used\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"resolved_path":{"name":"Box","id":"5:296:2606","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}]],"output":{"resolved_path":{"name":"Box","id":"5:296:2606","args":{"angle_bracketed":{"args":[{"type":{"slice":{"primitive":"u8"}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13653:28769":{"id":"2:13653:28769","crate_id":2,"name":"ends_with","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a suffix of this\nstring slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.ends_with(\"anas\"));\nassert!(!bananas.ends_with(\"nana\"));\n```","links":{"prim@char":"1:12452:482","self::pattern":"2:13301:4402"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13307:16583","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:13307:16583","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:13322:16584","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13739:30356":{"id":"2:13739:30356","crate_id":2,"name":"trim_ascii_start","span":null,"visibility":"public","docs":"Returns a string slice with leading ASCII whitespace removed.\n\n'Whitespace' refers to the definition used by\n[`u8::is_ascii_whitespace`].\n\n[`u8::is_ascii_whitespace`]: u8::is_ascii_whitespace\n\n# Examples\n\n```\nassert_eq!(\" \\t \\u{3000}hello world\\n\".trim_ascii_start(), \"\\u{3000}hello world\\n\");\nassert_eq!(\"  \".trim_ascii_start(), \"\");\nassert_eq!(\"\".trim_ascii_start(), \"\");\n```","links":{"u8::is_ascii_whitespace":"2:1126:40959"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13726:35928":{"id":"2:13726:35928","crate_id":2,"name":"trim_left_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. 'Left' in this context means the first\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _right_ side, not the left.\n\n# Examples\n\n```\nassert_eq!(\"11foo1bar11\".trim_left_matches('1'), \"foo1bar11\");\nassert_eq!(\"123foo1bar123\".trim_left_matches(char::is_numeric), \"foo1bar123\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_left_matches(x), \"foo1bar12\");\n```","links":{"prim@char":"1:12452:482","self::pattern":"2:13301:4402"},"attrs":["#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_start_matches`\",\nsuggestion = \"trim_start_matches\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_start_matches`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13307:16583","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5741:2993":{"id":"5:5741:2993","crate_id":5,"name":"to_ascii_lowercase","span":null,"visibility":"public","docs":"Returns a copy of this string where each character is mapped to its\nASCII lower case equivalent.\n\nASCII letters 'A' to 'Z' are mapped to 'a' to 'z',\nbut non-ASCII letters are unchanged.\n\nTo lowercase the value in-place, use [`make_ascii_lowercase`].\n\nTo lowercase ASCII characters in addition to non-ASCII characters, use\n[`to_lowercase`].\n\n# Examples\n\n```\nlet s = \"Grüße, Jürgen ❤\";\n\nassert_eq!(\"grüße, jürgen ❤\", s.to_ascii_lowercase());\n```\n\n[`make_ascii_lowercase`]: str::make_ascii_lowercase\n[`to_lowercase`]: #method.to_lowercase","links":{"str::make_ascii_lowercase":"2:13738:28581"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use = \"to lowercase the value in-place, use `make_ascii_lowercase()`\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7801:248","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13622:342":{"id":"2:13622:342","crate_id":2,"name":"as_ptr","span":null,"visibility":"public","docs":"Converts a string slice to a raw pointer.\n\nAs string slices are a slice of bytes, the raw pointer points to a\n[`u8`]. This pointer will be pointing to the first byte of the string\nslice.\n\nThe caller must ensure that the returned pointer is never written to.\nIf you need to mutate the contents of the string slice, use [`as_mut_ptr`].\n\n[`as_mut_ptr`]: str::as_mut_ptr\n\n# Examples\n\n```\nlet s = \"Hello\";\nlet ptr = s.as_ptr();\n```","links":{"str::as_mut_ptr":"2:13623:29119","`u8`":"1:12471:1884"},"attrs":["#[rustc_never_returns_null_ptr]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"raw_pointer":{"mutable":false,"type":{"primitive":"u8"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13628:29117":{"id":"2:13628:29117","crate_id":2,"name":"get_unchecked","span":null,"visibility":"public","docs":"Returns an unchecked subslice of `str`.\n\nThis is the unchecked alternative to indexing the `str`.\n\n# Safety\n\nCallers of this function are responsible that these preconditions are\nsatisfied:\n\n* The starting index must not exceed the ending index;\n* Indexes must be within bounds of the original slice;\n* Indexes must lie on UTF-8 sequence boundaries.\n\nFailing that, the returned string slice may reference invalid memory or\nviolate the invariants communicated by the `str` type.\n\n# Examples\n\n```\nlet v = \"🗻∈🌏\";\nunsafe {\n    assert_eq!(\"🗻\", v.get_unchecked(0..4));\n    assert_eq!(\"∈\", v.get_unchecked(4..7));\n    assert_eq!(\"🌏\", v.get_unchecked(7..11));\n}\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"2:11434:243","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"2:11434:243","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"5:5721":{"id":"5:5721","crate_id":5,"name":null,"span":null,"visibility":"default","docs":"Methods for string slices.","links":{},"attrs":["#[cfg(not(test))]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"primitive":"str"},"items":["5:5722:36623","5:5723:2790","5:5726:36624","5:5729:36625","5:5737:36626","5:5738:36627","5:5739:4058","5:5740:2994","5:5741:2993"],"negative":false,"synthetic":false,"blanket_impl":null}}},"2:13650:28767":{"id":"2:13650:28767","crate_id":2,"name":"starts_with","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a prefix of this\nstring slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, in which case this function will return true if\nthe `&str` is a prefix of this string slice.\n\nThe [pattern] can also be a [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\nThese will only be checked against the first character of this string slice.\nLook at the second example below regarding behavior for slices of [`char`]s.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.starts_with(\"bana\"));\nassert!(!bananas.starts_with(\"nana\"));\n```\n\n```\nlet bananas = \"bananas\";\n\n// Note that both of these assert successfully.\nassert!(bananas.starts_with(&['b', 'a', 'n', 'a']));\nassert!(bananas.starts_with(&['a', 'b', 'c', 'd']));\n```","links":{"prim@char":"1:12452:482","self::pattern":"2:13301:4402"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13307:16583","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13646:34452":{"id":"2:13646:34452","crate_id":2,"name":"encode_utf16","span":null,"visibility":"public","docs":"Returns an iterator of `u16` over the string encoded as UTF-16.\n\n# Examples\n\n```\nlet text = \"Zażółć gęślą jaźń\";\n\nlet utf8_len = text.len();\nlet utf16_len = text.encode_utf16().count();\n\nassert!(utf16_len <= utf8_len);\n```","links":{},"attrs":["#[must_use =\n\"this returns the encoded string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EncodeUtf16","id":"2:44673:9583","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5723:2790":{"id":"5:5723:2790","crate_id":5,"name":"replace","span":null,"visibility":"public","docs":"Replaces all matches of a pattern with another string.\n\n`replace` creates a new [`String`], and copies the data from this string slice into it.\nWhile doing so, it attempts to find matches of a pattern. If it finds any, it\nreplaces them with the replacement string slice.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"this is old\";\n\nassert_eq!(\"this is new\", s.replace(\"old\", \"new\"));\nassert_eq!(\"than an old\", s.replace(\"is\", \"an\"));\n```\n\nWhen the pattern doesn't match, it returns this string slice as [`String`]:\n\n```\nlet s = \"this is old\";\nassert_eq!(s, s.replace(\"cookie monster\", \"little lamb\"));\n```","links":{"`String`":"5:7801:248"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the replaced string as a new allocation, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["from",{"generic":"P"}],["to",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7801:248","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13307:16583","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13710:35925":{"id":"2:13710:35925","crate_id":2,"name":"trim_right","span":null,"visibility":"public","docs":"Returns a string slice with trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`.\n\n# Text directionality\n\nA string is a sequence of bytes. 'Right' in this context means the last\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _left_ side, not the right.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \" Hello\\tworld\\t\";\n\nassert_eq!(\" Hello\\tworld\", s.trim_right());\n```\n\nDirectionality:\n\n```\nlet s = \"English  \";\nassert!(Some('h') == s.trim_right().chars().rev().next());\n\nlet s = \"עברית  \";\nassert!(Some('ת') == s.trim_right().chars().rev().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_end`\", suggestion =\n\"trim_end\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_end`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13694:35918":{"id":"2:13694:35918","crate_id":2,"name":"rmatches","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within this string slice,\nyielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`matches`] method can be used.\n\n[`matches`]: str::matches\n\n# Examples\n\n```\nlet v: Vec<&str> = \"abcXXXabcYYYabc\".rmatches(\"abc\").collect();\nassert_eq!(v, [\"abc\", \"abc\", \"abc\"]);\n\nlet v: Vec<&str> = \"1abc2abc3\".rmatches(char::is_numeric).collect();\nassert_eq!(v, [\"3\", \"2\", \"1\"]);\n```","links":{"self::pattern":"2:13301:4402","`DoubleEndedIterator`":"2:8451:133","prim@char":"1:12452:482","str::matches":"2:13691:2756"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RMatches","id":"2:44603:9578","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13307:16583","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:13307:16583","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:13322:16584","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13617:35911":{"id":"2:13617:35911","crate_id":2,"name":"ceil_char_boundary","span":null,"visibility":"public","docs":"Finds the closest `x` not below `index` where `is_char_boundary(x)` is `true`.\n\nIf `index` is greater than the length of the string, this returns the length of the string.\n\nThis method is the natural complement to [`floor_char_boundary`]. See that method\nfor more details.\n\n[`floor_char_boundary`]: str::floor_char_boundary\n\n\n# Examples\n\n```\n#![feature(round_char_boundary)]\nlet s = \"❤️🧡💛💚💙💜\";\nassert_eq!(s.len(), 26);\nassert!(!s.is_char_boundary(13));\n\nlet closest = s.ceil_char_boundary(13);\nassert_eq!(closest, 14);\nassert_eq!(&s[..closest], \"❤️🧡💛\");\n```","links":{"str::floor_char_boundary":"2:13615:35910"},"attrs":["#[unstable(feature = \"round_char_boundary\", issue = \"93743\")]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["index",{"primitive":"usize"}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13623:29119":{"id":"2:13623:29119","crate_id":2,"name":"as_mut_ptr","span":null,"visibility":"public","docs":"Converts a mutable string slice to a raw pointer.\n\nAs string slices are a slice of bytes, the raw pointer points to a\n[`u8`]. This pointer will be pointing to the first byte of the string\nslice.\n\nIt is your responsibility to make sure that the string slice only gets\nmodified in a way that it remains valid UTF-8.","links":{"`u8`":"1:12471:1884"},"attrs":["#[rustc_never_returns_null_ptr]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"raw_pointer":{"mutable":true,"type":{"primitive":"u8"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13711:35926":{"id":"2:13711:35926","crate_id":2,"name":"trim_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes and suffixes that match a\npattern repeatedly removed.\n\nThe [pattern] can be a [`char`], a slice of [`char`]s, or a function\nor closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_matches('1'), \"foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_matches(char::is_numeric), \"foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_matches(x), \"foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1foo1barXX\".trim_matches(|c| c == '1' || c == 'X'), \"foo1bar\");\n```","links":{"prim@char":"1:12452:482","self::pattern":"2:13301:4402"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13307:16583","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:13307:16583","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"DoubleEndedSearcher","id":"2:13327:16582","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:8:2535":{"id":"0:8:2535","crate_id":0,"name":"ast","span":{"filename":"src/internals/ast.rs","begin":[1,0],"end":[216,1]},"visibility":"public","docs":"A Serde ast, parsed from the Syn ast and ready to generate Rust code.","links":{},"attrs":[],"deprecation":null,"inner":{"module":{"is_crate":false,"items":[],"is_stripped":false}}},"2:13688:29158":{"id":"2:13688:29158","crate_id":2,"name":"rsplit_once","span":null,"visibility":"public","docs":"Splits the string on the last occurrence of the specified delimiter and\nreturns prefix before delimiter and suffix after delimiter.\n\n# Examples\n\n```\nassert_eq!(\"cfg\".rsplit_once('='), None);\nassert_eq!(\"cfg=foo\".rsplit_once('='), Some((\"cfg\", \"foo\")));\nassert_eq!(\"cfg=foo=bar\".rsplit_once('='), Some((\"cfg=foo\", \"bar\")));\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["delimiter",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:42511:197","args":{"angle_bracketed":{"args":[{"type":{"tuple":[{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13307:16583","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:13307:16583","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:13322:16584","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13682:29155":{"id":"2:13682:29155","crate_id":2,"name":"rsplitn","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by a\npattern, starting from the end of the string, restricted to returning\nat most `n` items.\n\nIf `n` substrings are returned, the last substring (the `n`th substring)\nwill contain the remainder of the string.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will not be double ended, because it is not\nefficient to support.\n\nFor splitting from the front, the [`splitn`] method can be used.\n\n[`splitn`]: str::splitn\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".rsplitn(3, ' ').collect();\nassert_eq!(v, [\"lamb\", \"little\", \"Mary had a\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".rsplitn(3, 'X').collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"lionX\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".rsplitn(2, \"::\").collect();\nassert_eq!(v, [\"leopard\", \"lion::tiger\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".rsplitn(2, |c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"ghi\", \"abc1def\"]);\n```","links":{"prim@char":"1:12452:482","str::splitn":"2:13679:29153","self::pattern":"2:13301:4402"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["n",{"primitive":"usize"}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RSplitN","id":"2:44503:9572","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13307:16583","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:13307:16583","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:13322:16584","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13667:29149":{"id":"2:13667:29149","crate_id":2,"name":"split_inclusive","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by\ncharacters matched by a pattern. Differs from the iterator produced by\n`split` in that `split_inclusive` leaves the matched part as the\nterminator of the substring.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\\nlittle lamb\\nlittle lamb.\"\n    .split_inclusive('\\n').collect();\nassert_eq!(v, [\"Mary had a little lamb\\n\", \"little lamb\\n\", \"little lamb.\"]);\n```\n\nIf the last element of the string is matched,\nthat element will be considered the terminator of the preceding substring.\nThat substring will be the last item returned by the iterator.\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\\nlittle lamb\\nlittle lamb.\\n\"\n    .split_inclusive('\\n').collect();\nassert_eq!(v, [\"Mary had a little lamb\\n\", \"little lamb\\n\", \"little lamb.\\n\"]);\n```","links":{"prim@char":"1:12452:482","self::pattern":"2:13301:4402"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"SplitInclusive","id":"2:13116:9496","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13307:16583","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:63:400":{"id":"0:63:400","crate_id":0,"name":"attr","span":{"filename":"src/internals/attr.rs","begin":[1,0],"end":[1881,1]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"module":{"is_crate":false,"items":["0:86-0:994:2636"],"is_stripped":false}}},"2:13742:35930":{"id":"2:13742:35930","crate_id":2,"name":"escape_debug","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_debug`].\n\nNote: only extended grapheme codepoints that begin the string will be\nescaped.\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"❤\\n!\".escape_debug() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"❤\\n!\".escape_debug());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"❤\\\\n!\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"❤\\n!\".escape_debug().to_string(), \"❤\\\\n!\");\n```","links":{"`char::escape_debug`":"2:5124:35930"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EscapeDebug","id":"2:44680:9527","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13647:2862":{"id":"2:13647:2862","crate_id":2,"name":"contains","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a sub-slice of\nthis string slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.contains(\"nana\"));\nassert!(!bananas.contains(\"apples\"));\n```","links":{"prim@char":"1:12452:482","self::pattern":"2:13301:4402"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13307:16583","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13656:3311":{"id":"2:13656:3311","crate_id":2,"name":"find","span":null,"visibility":"public","docs":"Returns the byte index of the first character of this string slice that\nmatches the pattern.\n\nReturns [`None`] if the pattern doesn't match.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nlet s = \"Löwe 老虎 Léopard Gepardi\";\n\nassert_eq!(s.find('L'), Some(0));\nassert_eq!(s.find('é'), Some(14));\nassert_eq!(s.find(\"pard\"), Some(17));\n```\n\nMore complex patterns using point-free style and closures:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\n\nassert_eq!(s.find(char::is_whitespace), Some(5));\nassert_eq!(s.find(char::is_lowercase), Some(1));\nassert_eq!(s.find(|c: char| c.is_whitespace() || c.is_lowercase()), Some(1));\nassert_eq!(s.find(|c: char| (c < 'o') && (c > 'a')), Some(4));\n```\n\nNot finding the pattern:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\nlet x: &[_] = &['1', '2'];\n\nassert_eq!(s.find(x), None);\n```","links":{"`None`":"2:42513:194","prim@char":"1:12452:482","self::pattern":"2:13301:4402"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:42511:197","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13307:16583","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5740:2994":{"id":"5:5740:2994","crate_id":5,"name":"to_ascii_uppercase","span":null,"visibility":"public","docs":"Returns a copy of this string where each character is mapped to its\nASCII upper case equivalent.\n\nASCII letters 'a' to 'z' are mapped to 'A' to 'Z',\nbut non-ASCII letters are unchanged.\n\nTo uppercase the value in-place, use [`make_ascii_uppercase`].\n\nTo uppercase ASCII characters in addition to non-ASCII characters, use\n[`to_uppercase`].\n\n# Examples\n\n```\nlet s = \"Grüße, Jürgen ❤\";\n\nassert_eq!(\"GRüßE, JüRGEN ❤\", s.to_ascii_uppercase());\n```\n\n[`make_ascii_uppercase`]: str::make_ascii_uppercase\n[`to_uppercase`]: #method.to_uppercase","links":{"str::make_ascii_uppercase":"2:13737:28582"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use = \"to uppercase the value in-place, use `make_ascii_uppercase()`\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7801:248","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13640:2997":{"id":"2:13640:2997","crate_id":2,"name":"char_indices","span":null,"visibility":"public","docs":"Returns an iterator over the [`char`]s of a string slice, and their\npositions.\n\nAs a string slice consists of valid UTF-8, we can iterate through a\nstring slice by [`char`]. This method returns an iterator of both\nthese [`char`]s, as well as their byte positions.\n\nThe iterator yields tuples. The position is first, the [`char`] is\nsecond.\n\n# Examples\n\nBasic usage:\n\n```\nlet word = \"goodbye\";\n\nlet count = word.char_indices().count();\nassert_eq!(7, count);\n\nlet mut char_indices = word.char_indices();\n\nassert_eq!(Some((0, 'g')), char_indices.next());\nassert_eq!(Some((1, 'o')), char_indices.next());\nassert_eq!(Some((2, 'o')), char_indices.next());\nassert_eq!(Some((3, 'd')), char_indices.next());\nassert_eq!(Some((4, 'b')), char_indices.next());\nassert_eq!(Some((5, 'y')), char_indices.next());\nassert_eq!(Some((6, 'e')), char_indices.next());\n\nassert_eq!(None, char_indices.next());\n```\n\nRemember, [`char`]s might not match your intuition about characters:\n\n[`char`]: prim@char\n\n```\nlet yes = \"y̆es\";\n\nlet mut char_indices = yes.char_indices();\n\nassert_eq!(Some((0, 'y')), char_indices.next()); // not (0, 'y̆')\nassert_eq!(Some((1, '\\u{0306}')), char_indices.next());\n\n// note the 3 here - the previous character took up two bytes\nassert_eq!(Some((3, 'e')), char_indices.next());\nassert_eq!(Some((4, 's')), char_indices.next());\n\nassert_eq!(None, char_indices.next());\n```","links":{"prim@char":"1:12452:482"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"CharIndices","id":"2:44357:9563","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13615:35910":{"id":"2:13615:35910","crate_id":2,"name":"floor_char_boundary","span":null,"visibility":"public","docs":"Finds the closest `x` not exceeding `index` where `is_char_boundary(x)` is `true`.\n\nThis method can help you truncate a string so that it's still valid UTF-8, but doesn't\nexceed a given number of bytes. Note that this is done purely at the character level\nand can still visually split graphemes, even though the underlying characters aren't\nsplit. For example, the emoji 🧑‍🔬 (scientist) could be split so that the string only\nincludes 🧑 (person) instead.\n\n# Examples\n\n```\n#![feature(round_char_boundary)]\nlet s = \"❤️🧡💛💚💙💜\";\nassert_eq!(s.len(), 26);\nassert!(!s.is_char_boundary(13));\n\nlet closest = s.floor_char_boundary(13);\nassert_eq!(closest, 10);\nassert_eq!(&s[..closest], \"❤️🧡\");\n```","links":{},"attrs":["#[unstable(feature = \"round_char_boundary\", issue = \"93743\")]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["index",{"primitive":"usize"}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13670:29151":{"id":"2:13670:29151","crate_id":2,"name":"rsplit","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by\ncharacters matched by a pattern and yielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`split`] method can be used.\n\n[`split`]: str::split\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".rsplit(' ').collect();\nassert_eq!(v, [\"lamb\", \"little\", \"a\", \"had\", \"Mary\"]);\n\nlet v: Vec<&str> = \"\".rsplit('X').collect();\nassert_eq!(v, [\"\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".rsplit('X').collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"\", \"lion\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".rsplit(\"::\").collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"lion\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".rsplit(|c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"ghi\", \"def\", \"abc\"]);\n```","links":{"self::pattern":"2:13301:4402","`DoubleEndedIterator`":"2:8451:133","prim@char":"1:12452:482","str::split":"2:13664:29147"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RSplit","id":"2:44399:9497","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13307:16583","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:13307:16583","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:13322:16584","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13679:29153":{"id":"2:13679:29153","crate_id":2,"name":"splitn","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by a\npattern, restricted to returning at most `n` items.\n\nIf `n` substrings are returned, the last substring (the `n`th substring)\nwill contain the remainder of the string.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will not be double ended, because it is\nnot efficient to support.\n\nIf the pattern allows a reverse search, the [`rsplitn`] method can be\nused.\n\n[`rsplitn`]: str::rsplitn\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lambda\".splitn(3, ' ').collect();\nassert_eq!(v, [\"Mary\", \"had\", \"a little lambda\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".splitn(3, \"X\").collect();\nassert_eq!(v, [\"lion\", \"\", \"tigerXleopard\"]);\n\nlet v: Vec<&str> = \"abcXdef\".splitn(1, 'X').collect();\nassert_eq!(v, [\"abcXdef\"]);\n\nlet v: Vec<&str> = \"\".splitn(1, 'X').collect();\nassert_eq!(v, [\"\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".splitn(2, |c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"abc\", \"defXghi\"]);\n```","links":{"prim@char":"1:12452:482","self::pattern":"2:13301:4402","str::rsplitn":"2:13682:29155"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["n",{"primitive":"usize"}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"SplitN","id":"2:44485:9571","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13307:16583","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13717:28369":{"id":"2:13717:28369","crate_id":2,"name":"strip_prefix","span":null,"visibility":"public","docs":"Returns a string slice with the prefix removed.\n\nIf the string starts with the pattern `prefix`, returns the substring after the prefix,\nwrapped in `Some`. Unlike `trim_start_matches`, this method removes the prefix exactly once.\n\nIf the string does not start with `prefix`, returns `None`.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nassert_eq!(\"foo:bar\".strip_prefix(\"foo:\"), Some(\"bar\"));\nassert_eq!(\"foo:bar\".strip_prefix(\"bar\"), None);\nassert_eq!(\"foofoo\".strip_prefix(\"foo\"), Some(\"foo\"));\n```","links":{"prim@char":"1:12452:482","self::pattern":"2:13301:4402"},"attrs":["#[must_use =\n\"this returns the remaining substring as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["prefix",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:42511:197","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13307:16583","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5739:4058":{"id":"5:5739:4058","crate_id":5,"name":"repeat","span":null,"visibility":"public","docs":"Creates a new [`String`] by repeating a string `n` times.\n\n# Panics\n\nThis function will panic if the capacity would overflow.\n\n# Examples\n\nBasic usage:\n\n```\nassert_eq!(\"abc\".repeat(4), String::from(\"abcabcabcabc\"));\n```\n\nA panic upon overflow:\n\n```should_panic\n// this will panic at runtime\nlet huge = \"0123456789abcdef\".repeat(usize::MAX);\n```","links":{"`String`":"5:7801:248"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["n",{"primitive":"usize"}]],"output":{"resolved_path":{"name":"String","id":"5:7801:248","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:964:2405":{"id":"0:964:2405","crate_id":0,"name":"Serialize","span":{"filename":"src/lib.rs","begin":[89,0],"end":[94,1]},"visibility":"public","docs":null,"links":{},"attrs":["#[proc_macro_derive(Serialize, attributes(serde))]"],"deprecation":null,"inner":{"proc_macro":{"kind":"derive","helpers":["serde"]}}},"2:13637:29146":{"id":"2:13637:29146","crate_id":2,"name":"split_at_mut_checked","span":null,"visibility":"public","docs":"Divide one mutable string slice into two at an index.\n\nThe argument, `mid`, should be a valid byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point. The\nmethod returns `None` if that’s not the case.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get immutable string slices instead, see the [`split_at_checked`] method.\n\n[`split_at_checked`]: str::split_at_checked\n\n# Examples\n\n```\nlet mut s = \"Per Martin-Löf\".to_string();\nif let Some((first, last)) = s.split_at_mut_checked(3) {\n    first.make_ascii_uppercase();\n    assert_eq!(\"PER\", first);\n    assert_eq!(\" Martin-Löf\", last);\n}\nassert_eq!(\"PER Martin-Löf\", s);\n\nassert_eq!(None, s.split_at_mut_checked(13));  // Inside “ö”\nassert_eq!(None, s.split_at_mut_checked(16));  // Beyond the string length\n```","links":{"str::split_at_checked":"2:13636:29145"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["mid",{"primitive":"usize"}]],"output":{"resolved_path":{"name":"Option","id":"2:42511:197","args":{"angle_bracketed":{"args":[{"type":{"tuple":[{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13736:28584":{"id":"2:13736:28584","crate_id":2,"name":"eq_ignore_ascii_case","span":null,"visibility":"public","docs":"Checks that two strings are an ASCII case-insensitive match.\n\nSame as `to_ascii_lowercase(a) == to_ascii_lowercase(b)`,\nbut without allocating and copying temporaries.\n\n# Examples\n\n```\nassert!(\"Ferris\".eq_ignore_ascii_case(\"FERRIS\"));\nassert!(\"Ferrös\".eq_ignore_ascii_case(\"FERRöS\"));\nassert!(!\"Ferrös\".eq_ignore_ascii_case(\"FERRÖS\"));\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["other",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13697:35919":{"id":"2:13697:35919","crate_id":2,"name":"match_indices","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within this string\nslice as well as the index that the match starts at.\n\nFor matches of `pat` within `self` that overlap, only the indices\ncorresponding to the first match are returned.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rmatch_indices`] method can be used.\n\n[`rmatch_indices`]: str::rmatch_indices\n\n# Examples\n\n```\nlet v: Vec<_> = \"abcXXXabcYYYabc\".match_indices(\"abc\").collect();\nassert_eq!(v, [(0, \"abc\"), (6, \"abc\"), (12, \"abc\")]);\n\nlet v: Vec<_> = \"1abcabc2\".match_indices(\"abc\").collect();\nassert_eq!(v, [(1, \"abc\"), (4, \"abc\")]);\n\nlet v: Vec<_> = \"ababa\".match_indices(\"aba\").collect();\nassert_eq!(v, [(0, \"aba\")]); // only the first `aba`\n```","links":{"self::pattern":"2:13301:4402","`DoubleEndedIterator`":"2:8451:133","prim@char":"1:12452:482","str::rmatch_indices":"2:13700:35920"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"MatchIndices","id":"2:44531:9574","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13307:16583","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13720:29159":{"id":"2:13720:29159","crate_id":2,"name":"strip_suffix","span":null,"visibility":"public","docs":"Returns a string slice with the suffix removed.\n\nIf the string ends with the pattern `suffix`, returns the substring before the suffix,\nwrapped in `Some`.  Unlike `trim_end_matches`, this method removes the suffix exactly once.\n\nIf the string does not end with `suffix`, returns `None`.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nassert_eq!(\"bar:foo\".strip_suffix(\":foo\"), Some(\"bar\"));\nassert_eq!(\"bar:foo\".strip_suffix(\"bar\"), None);\nassert_eq!(\"foofoo\".strip_suffix(\"foo\"), Some(\"foo\"));\n```","links":{"prim@char":"1:12452:482","self::pattern":"2:13301:4402"},"attrs":["#[must_use =\n\"this returns the remaining substring as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["suffix",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:42511:197","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13307:16583","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:13307:16583","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:13322:16584","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13745:35931":{"id":"2:13745:35931","crate_id":2,"name":"escape_unicode","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_unicode`].\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"❤\\n!\".escape_unicode() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"❤\\n!\".escape_unicode());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"\\\\u{{2764}}\\\\u{{a}}\\\\u{{21}}\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"❤\\n!\".escape_unicode().to_string(), \"\\\\u{2764}\\\\u{a}\\\\u{21}\");\n```","links":{"`char::escape_unicode`":"2:5122:35931"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EscapeUnicode","id":"2:44698:9526","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13705:35922":{"id":"2:13705:35922","crate_id":2,"name":"trim_start","span":null,"visibility":"public","docs":"Returns a string slice with leading whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Text directionality\n\nA string is a sequence of bytes. `start` in this context means the first\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be left side, and for right-to-left languages like\nArabic or Hebrew, this will be the right side.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\nassert_eq!(\"Hello\\tworld\\t\\n\", s.trim_start());\n```\n\nDirectionality:\n\n```\nlet s = \"  English  \";\nassert!(Some('E') == s.trim_start().chars().next());\n\nlet s = \"  עברית  \";\nassert!(Some('ע') == s.trim_start().chars().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_trim_start\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13613:2760":{"id":"2:13613:2760","crate_id":2,"name":"is_empty","span":null,"visibility":"public","docs":"Returns `true` if `self` has a length of zero bytes.\n\n# Examples\n\n```\nlet s = \"\";\nassert!(s.is_empty());\n\nlet s = \"not empty\";\nassert!(!s.is_empty());\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:492-0:1019:2542":{"id":"0:492-0:1019:2542","crate_id":0,"name":null,"span":{"filename":"src/internals/mod.rs","begin":[13,0],"end":[13,25]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"import":{"source":"self::ctxt::Ctxt","name":"Ctxt","id":"0:1019:2542","glob":false}}},"2:13626:29116":{"id":"2:13626:29116","crate_id":2,"name":"get_mut","span":null,"visibility":"public","docs":"Returns a mutable subslice of `str`.\n\nThis is the non-panicking alternative to indexing the `str`. Returns\n[`None`] whenever equivalent indexing operation would panic.\n\n# Examples\n\n```\nlet mut v = String::from(\"hello\");\n// correct length\nassert!(v.get_mut(0..5).is_some());\n// out of bounds\nassert!(v.get_mut(..42).is_none());\nassert_eq!(Some(\"he\"), v.get_mut(0..2).map(|v| &*v));\n\nassert_eq!(\"hello\", v);\n{\n    let s = v.get_mut(0..2);\n    let s = s.map(|s| {\n        s.make_ascii_uppercase();\n        &*s\n    });\n    assert_eq!(Some(\"HE\"), s);\n}\nassert_eq!(\"HEllo\", v);\n```","links":{"`None`":"2:42513:194"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"resolved_path":{"name":"Option","id":"2:42511:197","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"2:11434:243","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"2:11434:243","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13645:35915":{"id":"2:13645:35915","crate_id":2,"name":"lines_any","span":null,"visibility":"public","docs":"An iterator over the lines of a string.","links":{},"attrs":["#[deprecated(since = \"1.4.0\", note = \"use lines() instead now\", suggestion =\n\"lines\")]"],"deprecation":{"since":"1.4.0","note":"use lines() instead now"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"LinesAny","id":"2:44645:9580","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13643:34454":{"id":"2:13643:34454","crate_id":2,"name":"split_ascii_whitespace","span":null,"visibility":"public","docs":"Splits a string slice by ASCII whitespace.\n\nThe iterator returned will return string slices that are sub-slices of\nthe original string slice, separated by any amount of ASCII whitespace.\n\nTo split by Unicode `Whitespace` instead, use [`split_whitespace`].\n\n[`split_whitespace`]: str::split_whitespace\n\n# Examples\n\nBasic usage:\n\n```\nlet mut iter = \"A few words\".split_ascii_whitespace();\n\nassert_eq!(Some(\"A\"), iter.next());\nassert_eq!(Some(\"few\"), iter.next());\nassert_eq!(Some(\"words\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nAll kinds of ASCII whitespace are considered:\n\n```\nlet mut iter = \" Mary   had\\ta little  \\n\\t lamb\".split_ascii_whitespace();\nassert_eq!(Some(\"Mary\"), iter.next());\nassert_eq!(Some(\"had\"), iter.next());\nassert_eq!(Some(\"a\"), iter.next());\nassert_eq!(Some(\"little\"), iter.next());\nassert_eq!(Some(\"lamb\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nIf the string is empty or all ASCII whitespace, the iterator yields no string slices:\n```\nassert_eq!(\"\".split_ascii_whitespace().next(), None);\nassert_eq!(\"   \".split_ascii_whitespace().next(), None);\n```","links":{"str::split_whitespace":"2:13642:34438"},"attrs":["#[must_use =\n\"this returns the split string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"SplitAsciiWhitespace","id":"2:44664:9582","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13639:3003":{"id":"2:13639:3003","crate_id":2,"name":"chars","span":null,"visibility":"public","docs":"Returns an iterator over the [`char`]s of a string slice.\n\nAs a string slice consists of valid UTF-8, we can iterate through a\nstring slice by [`char`]. This method returns such an iterator.\n\nIt's important to remember that [`char`] represents a Unicode Scalar\nValue, and might not match your idea of what a 'character' is. Iteration\nover grapheme clusters may be what you actually want. This functionality\nis not provided by Rust's standard library, check crates.io instead.\n\n# Examples\n\nBasic usage:\n\n```\nlet word = \"goodbye\";\n\nlet count = word.chars().count();\nassert_eq!(7, count);\n\nlet mut chars = word.chars();\n\nassert_eq!(Some('g'), chars.next());\nassert_eq!(Some('o'), chars.next());\nassert_eq!(Some('o'), chars.next());\nassert_eq!(Some('d'), chars.next());\nassert_eq!(Some('b'), chars.next());\nassert_eq!(Some('y'), chars.next());\nassert_eq!(Some('e'), chars.next());\n\nassert_eq!(None, chars.next());\n```\n\nRemember, [`char`]s might not match your intuition about characters:\n\n[`char`]: prim@char\n\n```\nlet y = \"y̆\";\n\nlet mut chars = y.chars();\n\nassert_eq!(Some('y'), chars.next()); // not 'y̆'\nassert_eq!(Some('\\u{0306}'), chars.next());\n\nassert_eq!(None, chars.next());\n```","links":{"prim@char":"1:12452:482"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Chars","id":"2:44351:9562","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13673:35916":{"id":"2:13673:35916","crate_id":2,"name":"split_terminator","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by\ncharacters matched by a pattern.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\nEquivalent to [`split`], except that the trailing substring\nis skipped if empty.\n\n[`split`]: str::split\n\nThis method can be used for string data that is _terminated_,\nrather than _separated_ by a pattern.\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rsplit_terminator`] method can be used.\n\n[`rsplit_terminator`]: str::rsplit_terminator\n\n# Examples\n\n```\nlet v: Vec<&str> = \"A.B.\".split_terminator('.').collect();\nassert_eq!(v, [\"A\", \"B\"]);\n\nlet v: Vec<&str> = \"A..B..\".split_terminator(\".\").collect();\nassert_eq!(v, [\"A\", \"\", \"B\", \"\"]);\n\nlet v: Vec<&str> = \"A.B:C.D\".split_terminator(&['.', ':'][..]).collect();\nassert_eq!(v, [\"A\", \"B\", \"C\", \"D\"]);\n```","links":{"self::pattern":"2:13301:4402","str::split":"2:13664:29147","prim@char":"1:12452:482","`DoubleEndedIterator`":"2:8451:133","str::rsplit_terminator":"2:13676:35917"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"SplitTerminator","id":"2:44431:9568","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13307:16583","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5738:36627":{"id":"5:5738:36627","crate_id":5,"name":"into_string","span":null,"visibility":"public","docs":"Converts a [`Box<str>`] into a [`String`] without copying or allocating.\n\n# Examples\n\n```\nlet string = String::from(\"birthday gift\");\nlet boxed_str = string.clone().into_boxed_str();\n\nassert_eq!(boxed_str.into_string(), string);\n```","links":{"`Box<str>`":"5:296:2606","`String`":"5:7801:248"},"attrs":["#[must_use = \"`self` will be dropped if the result is not used\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"resolved_path":{"name":"Box","id":"5:296:2606","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}]],"output":{"resolved_path":{"name":"String","id":"5:7801:248","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13633:35914":{"id":"2:13633:35914","crate_id":2,"name":"slice_mut_unchecked","span":null,"visibility":"public","docs":"Creates a string slice from another string slice, bypassing safety\nchecks.\nThis is generally not recommended, use with caution! For a safe\nalternative see [`str`] and [`IndexMut`].\n\n[`IndexMut`]: crate::ops::IndexMut\n\nThis new slice goes from `begin` to `end`, including `begin` but\nexcluding `end`.\n\nTo get an immutable string slice instead, see the\n[`slice_unchecked`] method.\n\n[`slice_unchecked`]: str::slice_unchecked\n\n# Safety\n\nCallers of this function are responsible that three preconditions are\nsatisfied:\n\n* `begin` must not exceed `end`.\n* `begin` and `end` must be byte positions within the string slice.\n* `begin` and `end` must lie on UTF-8 sequence boundaries.","links":{"`str`":"1:12458:1754","crate::ops::IndexMut":"2:3583:4001","str::slice_unchecked":"2:13632:35913"},"attrs":["#[deprecated(since = \"1.29.0\", note =\n\"use `get_unchecked_mut(begin..end)` instead\")]"],"deprecation":{"since":"1.29.0","note":"use `get_unchecked_mut(begin..end)` instead"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["begin",{"primitive":"usize"}],["end",{"primitive":"usize"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"2:13741:30358":{"id":"2:13741:30358","crate_id":2,"name":"trim_ascii","span":null,"visibility":"public","docs":"Returns a string slice with leading and trailing ASCII whitespace\nremoved.\n\n'Whitespace' refers to the definition used by\n[`u8::is_ascii_whitespace`].\n\n[`u8::is_ascii_whitespace`]: u8::is_ascii_whitespace\n\n# Examples\n\n```\nassert_eq!(\"\\r hello world\\n \".trim_ascii(), \"hello world\");\nassert_eq!(\"  \".trim_ascii(), \"\");\nassert_eq!(\"\".trim_ascii(), \"\");\n```","links":{"u8::is_ascii_whitespace":"2:1126:40959"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}}},"paths":{"16:8503:7376":{"crate_id":16,"path":["gimli","read","unit","AttrsIter"],"kind":"struct"},"24:5440:2566":{"crate_id":24,"path":["syn","generics","Generics"],"kind":"struct"},"16:2772:7145":{"crate_id":16,"path":["gimli","common","RawRangeListsOffset"],"kind":"struct"},"2:5195:16621":{"crate_id":2,"path":["core","char","REPLACEMENT_CHARACTER"],"kind":"constant"},"17:16656:7083":{"crate_id":17,"path":["object","xcoff","Symbol64"],"kind":"struct"},"5:6930:5801":{"crate_id":5,"path":["alloc","vec","into_iter","drop","DropGuard"],"kind":"struct"},"1:6065:5883":{"crate_id":1,"path":["std","sync","lazy_lock","LazyLock"],"kind":"struct"},"24:3680:259":{"crate_id":24,"path":["syn","token","Try"],"kind":"struct"},"11:835:11133":{"crate_id":11,"path":["hashbrown","map","RawEntryBuilderMut"],"kind":"struct"},"24:3085:2606":{"crate_id":24,"path":["syn","token","Box"],"kind":"struct"},"24:3527:4259":{"crate_id":24,"path":["syn","token","Pub"],"kind":"struct"},"24:5268:3926":{"crate_id":24,"path":["syn","expr","ExprConst"],"kind":"struct"},"24:5619:3955":{"crate_id":24,"path":["syn","lit","LitFloat"],"kind":"struct"},"6:6493:8238":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","mallinfo"],"kind":"struct"},"16:7159:9396":{"crate_id":16,"path":["gimli","read","line","LineInstructions"],"kind":"struct"},"5:2294:9466":{"crate_id":5,"path":["alloc","collections","btree","navigate","LeafRange"],"kind":"struct"},"6:559:7610":{"crate_id":6,"path":["libc","unix","sigval"],"kind":"struct"},"24:3255:4246":{"crate_id":24,"path":["syn","token","Extern"],"kind":"struct"},"24:4875:4314":{"crate_id":24,"path":["syn","token","Tilde"],"kind":"struct"},"2:3542:3106":{"crate_id":2,"path":["core","ops","drop","Drop"],"kind":"trait"},"2:3386:5489":{"crate_id":2,"path":["core","ops","async_function","AsyncFnOnce"],"kind":"trait"},"1:11950:11269":{"crate_id":1,"path":["std","sys_common","net","TcpListener"],"kind":"struct"},"2:42806:87":{"crate_id":2,"path":["core","sync","atomic","AtomicI16"],"kind":"struct"},"17:15753:6833":{"crate_id":17,"path":["object","pe","ImageAuxSymbolCrc"],"kind":"struct"},"2:41316:4093":{"crate_id":2,"path":["core","iter","adapters","peekable","Peekable"],"kind":"struct"},"5:6839:3988":{"crate_id":5,"path":["alloc","vec","into_iter","IntoIter"],"kind":"struct"},"1:9377:28364":{"crate_id":1,"path":["std","sync","mpmc","select","Selected"],"kind":"enum"},"20:815:2625":{"crate_id":20,"path":["proc_macro2","imp","Span"],"kind":"enum"},"16:8598:23959":{"crate_id":16,"path":["gimli","read","unit","EntriesTreeIter"],"kind":"struct"},"24:1812:4115":{"crate_id":24,"path":["syn","parse","StepCursor"],"kind":"struct"},"2:12832:10637":{"crate_id":2,"path":["core","slice","GetManyMutError"],"kind":"struct"},"11:1900:9459":{"crate_id":11,"path":["hashbrown","set","Intersection"],"kind":"struct"},"17:10274:24015":{"crate_id":17,"path":["object","common","SymbolScope"],"kind":"enum"},"11:1907:9460":{"crate_id":11,"path":["hashbrown","set","Difference"],"kind":"struct"},"2:13322:16584":{"crate_id":2,"path":["core","str","pattern","ReverseSearcher"],"kind":"trait"},"6:7539:8539":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","mcontext_t"],"kind":"struct"},"24:4942:2757":{"crate_id":24,"path":["syn","attr","Meta"],"kind":"enum"},"24:5845:2936":{"crate_id":24,"path":["syn","path","AssocType"],"kind":"struct"},"17:12191:9273":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSubsubsectionIterator"],"kind":"struct"},"16:6904:9378":{"crate_id":16,"path":["gimli","read","aranges","ArangeHeaderIter"],"kind":"struct"},"2:34238:6031":{"crate_id":2,"path":["core","ops","arith","RemAssign"],"kind":"trait"},"2:32713:3320":{"crate_id":2,"path":["core","error","tags","Value"],"kind":"struct"},"1:9206:3988":{"crate_id":1,"path":["std","sync","mpsc","IntoIter"],"kind":"struct"},"2:4674:4163":{"crate_id":2,"path":["core","cell","lazy","LazyCell"],"kind":"struct"},"2:42691:3993":{"crate_id":2,"path":["core","result","IterMut"],"kind":"struct"},"17:10097:24009":{"crate_id":17,"path":["object","common","SubArchitecture"],"kind":"enum"},"1:9190:3989":{"crate_id":1,"path":["std","sync","mpsc","Iter"],"kind":"struct"},"2:44645:9580":{"crate_id":2,"path":["core","str","iter","LinesAny"],"kind":"struct"},"21:2279:2950":{"crate_id":21,"path":["proc_macro","bridge","Punct"],"kind":"struct"},"24:1932:2396":{"crate_id":24,"path":["syn","parse_macro_input"],"kind":"macro"},"1:5114:11342":{"crate_id":1,"path":["std","os","net","linux_ext","socket","UnixSocketExt"],"kind":"trait"},"2:41075:9532":{"crate_id":2,"path":["core","ffi","c_str","FromBytesUntilNulError"],"kind":"struct"},"1:9397:9129":{"crate_id":1,"path":["std","sync","mpmc","utils","CachePadded"],"kind":"struct"},"24:349:37881":{"crate_id":24,"path":["syn","buffer","empty","UnsafeSyncEntry"],"kind":"struct"},"5:1523:3989":{"crate_id":5,"path":["alloc","collections","btree","map","Iter"],"kind":"struct"},"23:11:4018":{"crate_id":23,"path":["quote","ext","TokenStreamExt"],"kind":"trait"},"2:11087:5869":{"crate_id":2,"path":["core","slice","sort","unstable","quicksort","GapGuardRaw"],"kind":"struct"},"24:5381:3942":{"crate_id":24,"path":["syn","expr","ExprWhile"],"kind":"struct"},"14:202:2990":{"crate_id":14,"path":["rustc_demangle","v0","ParseError"],"kind":"enum"},"6:5044:7916":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_ff_erase"],"kind":"struct"},"1:4311:32203":{"crate_id":1,"path":["std","os","unix","net","ancillary","AncillaryDataIter"],"kind":"struct"},"16:8000:7172":{"crate_id":16,"path":["gimli","read","rnglists","DebugRanges"],"kind":"struct"},"11:708:10758":{"crate_id":11,"path":["hashbrown","map","IntoKeys"],"kind":"struct"},"2:23441:11286":{"crate_id":2,"path":["core","num","error","IntErrorKind"],"kind":"enum"},"2:22969:11510":{"crate_id":2,"path":["core","core_simd","simd","ptr","mut_ptr","SimdMutPtr"],"kind":"trait"},"2:13261:4013":{"crate_id":2,"path":["core","str","traits","FromStr"],"kind":"trait"},"24:6000:3976":{"crate_id":24,"path":["syn","ty","TypeReference"],"kind":"struct"},"16:5709:23933":{"crate_id":16,"path":["gimli","endianity","RunTimeEndian"],"kind":"enum"},"1:9447:5899":{"crate_id":1,"path":["std","sync","rwlock","MappedRwLockReadGuard"],"kind":"struct"},"2:8422:4071":{"crate_id":2,"path":["core","iter","traits","collect","Extend"],"kind":"trait"},"6:8199:8583":{"crate_id":6,"path":["libc","unix","linux_like","linux","arch","generic","termios2"],"kind":"struct"},"17:13119:6287":{"crate_id":17,"path":["object","read","xcoff","symbol","XcoffSymbol"],"kind":"struct"},"6:5224:7959":{"crate_id":6,"path":["libc","unix","linux_like","linux","in6_pktinfo"],"kind":"struct"},"16:8546:9443":{"crate_id":16,"path":["gimli","read","unit","EntriesCursor"],"kind":"struct"},"2:22546:11215":{"crate_id":2,"path":["core","core_simd","to_bytes","sealed","Sealed"],"kind":"trait"},"16:6731:10717":{"crate_id":16,"path":["gimli","read","dwarf","RangeIter"],"kind":"struct"},"18:548:156":{"crate_id":18,"path":["memchr","memmem","rabinkarp","Hash"],"kind":"struct"},"24:1046:37827":{"crate_id":24,"path":["syn","generics","LifetimesMut"],"kind":"struct"},"6:8014:8571":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","align","clone_args"],"kind":"struct"},"2:4832:4148":{"crate_id":2,"path":["core","cell","BorrowMutError"],"kind":"struct"},"2:15:3384":{"crate_id":2,"path":["core","write"],"kind":"macro"},"17:10784:37633":{"crate_id":17,"path":["object","read","read_cache","ReadCacheInternal"],"kind":"struct"},"1:3405:11255":{"crate_id":1,"path":["std","io","stdio","StdoutLock"],"kind":"struct"},"20:732:2546":{"crate_id":20,"path":["proc_macro2","fallback","Group"],"kind":"struct"},"6:4816:7790":{"crate_id":6,"path":["libc","unix","linux_like","linux","spwd"],"kind":"struct"},"24:4834:4311":{"crate_id":24,"path":["syn","token","SlashEq"],"kind":"struct"},"2:14083:16635":{"crate_id":2,"path":["core","future","poll_fn","PollFn"],"kind":"struct"},"16:8711:7382":{"crate_id":16,"path":["gimli","read","StoreOnHeap"],"kind":"struct"},"2:42732:90":{"crate_id":2,"path":["core","sync","atomic","AtomicI8"],"kind":"struct"},"24:3340:4250":{"crate_id":24,"path":["syn","token","Impl"],"kind":"struct"},"2:47702:9032":{"crate_id":2,"path":["core","core_arch","x86","__m128bh"],"kind":"struct"},"2:23276:8619":{"crate_id":2,"path":["core","num","dec2flt","number","Number"],"kind":"struct"},"17:10534:6187":{"crate_id":17,"path":["object","endian","LittleEndian"],"kind":"struct"},"1:8026:5373":{"crate_id":1,"path":["std","thread","Builder"],"kind":"struct"},"17:13719:6342":{"crate_id":17,"path":["object","archive","AixMemberOffset"],"kind":"struct"},"17:12249:24173":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldSubCache"],"kind":"struct"},"5:7640:3988":{"crate_id":5,"path":["alloc","collections","linked_list","IntoIter"],"kind":"struct"},"17:14886:6582":{"crate_id":17,"path":["object","macho","FilesetEntryCommand"],"kind":"struct"},"2:40129:218":{"crate_id":2,"path":["core","ops","range","RangeTo"],"kind":"struct"},"24:4892:3235":{"crate_id":24,"path":["syn","token","Brace"],"kind":"struct"},"17:15475:6776":{"crate_id":17,"path":["object","pe","ImageRomOptionalHeader"],"kind":"struct"},"16:5198:7205":{"crate_id":16,"path":["gimli","constants","DwOrd"],"kind":"struct"},"16:7350:7277":{"crate_id":16,"path":["gimli","read","lists","ListsHeader"],"kind":"struct"},"24:3221:4245":{"crate_id":24,"path":["syn","token","Else"],"kind":"struct"},"16:6998:9383":{"crate_id":16,"path":["gimli","read","index","UnitIndex"],"kind":"struct"},"16:2467:7126":{"crate_id":16,"path":["gimli","common","LineEncoding"],"kind":"struct"},"2:44549:9575":{"crate_id":2,"path":["core","str","iter","RMatchIndices"],"kind":"struct"},"24:5332:2824":{"crate_id":24,"path":["syn","expr","ExprPath"],"kind":"struct"},"2:44942:9596":{"crate_id":2,"path":["core","str","pattern","StrSearcher"],"kind":"struct"},"2:47649:9023":{"crate_id":2,"path":["core","core_arch","x86","__m512i"],"kind":"struct"},"20:948:2558":{"crate_id":20,"path":["proc_macro2","Ident"],"kind":"struct"},"18:563:6063":{"crate_id":18,"path":["memchr","memmem","rarebytes","RareNeedleBytes"],"kind":"struct"},"2:46898:8965":{"crate_id":2,"path":["core","core_arch","simd","u16x16"],"kind":"struct"},"21:2601:4177":{"crate_id":21,"path":["proc_macro","escape","EscapeOptions"],"kind":"struct"},"2:47524:9014":{"crate_id":2,"path":["core","core_arch","simd","i64x8"],"kind":"struct"},"17:12225:9276":{"crate_id":17,"path":["object","read","elf","attributes","AttributeReader"],"kind":"struct"},"2:47172:8975":{"crate_id":2,"path":["core","core_arch","simd","m32x8"],"kind":"struct"},"17:16187:6962":{"crate_id":17,"path":["object","pe","ImageAlpha64RuntimeFunctionEntry"],"kind":"struct"},"2:4566:111":{"crate_id":2,"path":["core","asserting","Capture"],"kind":"struct"},"20:883:2625":{"crate_id":20,"path":["proc_macro2","Span"],"kind":"struct"},"16:3695:7183":{"crate_id":16,"path":["gimli","arch","RiscV"],"kind":"struct"},"20:358:4007":{"crate_id":20,"path":["proc_macro2","imp","LexError"],"kind":"enum"},"16:7542:9427":{"crate_id":16,"path":["gimli","read","lookup","PubStuffParser"],"kind":"struct"},"24:5995:3975":{"crate_id":24,"path":["syn","ty","TypePtr"],"kind":"struct"},"11:2349:11139":{"crate_id":11,"path":["hashbrown","table","VacantEntry"],"kind":"struct"},"17:16332:7004":{"crate_id":17,"path":["object","pe","ImageFunctionEntry64"],"kind":"struct"},"2:4161:3988":{"crate_id":2,"path":["core","array","iter","IntoIter"],"kind":"struct"},"5:884:102":{"crate_id":5,"path":["alloc","collections","binary_heap","BinaryHeap"],"kind":"struct"},"6:4792:7773":{"crate_id":6,"path":["libc","unix","linux_like","linux","glob_t"],"kind":"struct"},"2:45099:9610":{"crate_id":2,"path":["core","str","CharEscapeDebugContinue"],"kind":"struct"},"2:38819:6035":{"crate_id":2,"path":["core","ops","bit","ShlAssign"],"kind":"trait"},"2:32802:4180":{"crate_id":2,"path":["core","marker","Unpin"],"kind":"trait"},"17:14327:6481":{"crate_id":17,"path":["object","macho","FatHeader"],"kind":"struct"},"18:481:9237":{"crate_id":18,"path":["memchr","cow","CowBytes"],"kind":"struct"},"1:1652:2595":{"crate_id":1,"path":["std","collections","hash","set","Union"],"kind":"struct"},"17:16798:7117":{"crate_id":17,"path":["object","xcoff","DwarfAux32"],"kind":"struct"},"24:5250:3924":{"crate_id":24,"path":["syn","expr","ExprBreak"],"kind":"struct"},"24:5864:3110":{"crate_id":24,"path":["syn","path","QSelf"],"kind":"struct"},"1:3916:11269":{"crate_id":1,"path":["std","net","tcp","TcpListener"],"kind":"struct"},"2:43497:34164":{"crate_id":2,"path":["core","fmt","rt","ArgumentType"],"kind":"enum"},"6:6544:8262":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","rtentry"],"kind":"struct"},"16:8137:7174":{"crate_id":16,"path":["gimli","read","str","DebugStr"],"kind":"struct"},"2:3297:268":{"crate_id":2,"path":["core","marker","Unsize"],"kind":"trait"},"2:42605:4128":{"crate_id":2,"path":["core","panic","unwind_safe","RefUnwindSafe"],"kind":"trait"},"2:42289:8858":{"crate_id":2,"path":["core","net","ip_addr","Ipv6Addr"],"kind":"struct"},"17:11971:24083":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdat"],"kind":"struct"},"17:10843:6197":{"crate_id":17,"path":["object","read","util","StringTable"],"kind":"struct"},"16:546:9299":{"crate_id":16,"path":["gimli","read","cfi","RegisterRuleMap"],"kind":"struct"},"5:7612:213":{"crate_id":5,"path":["alloc","collections","btree","set","Range"],"kind":"struct"},"16:6462:23939":{"crate_id":16,"path":["gimli","read","cfi","RegisterRule"],"kind":"enum"},"1:3659:4141":{"crate_id":1,"path":["std","io","Write"],"kind":"trait"},"6:6723:8349":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_mmap_offsets_v1"],"kind":"struct"},"1:12457:1720":{"crate_id":1,"path":["std","slice"],"kind":"primitive"},"2:40057:3166":{"crate_id":2,"path":["core","ops","index","Index"],"kind":"trait"},"17:10246:24014":{"crate_id":17,"path":["object","common","SymbolKind"],"kind":"enum"},"16:3308:7123":{"crate_id":16,"path":["gimli","arch","AArch64"],"kind":"struct"},"17:12293:24139":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCacheImage"],"kind":"struct"},"6:7341:8447":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","flock64"],"kind":"struct"},"6:6652:8325":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ptrace_peeksiginfo_args"],"kind":"struct"},"17:11465:9256":{"crate_id":17,"path":["object","read","archive","ArchiveSymbolIterator"],"kind":"struct"},"1:12435:28351":{"crate_id":1,"path":["std","backtrace_rs","print","PrintFmt"],"kind":"enum"},"17:15077:6616":{"crate_id":17,"path":["object","macho","DataInCodeEntry"],"kind":"struct"},"2:41044:107":{"crate_id":2,"path":["core","ffi","c_str","CStr"],"kind":"struct"},"16:4694:7191":{"crate_id":16,"path":["gimli","constants","DwAt"],"kind":"struct"},"24:252:10623":{"crate_id":24,"path":["syn","attr","parsing","DisplayAttrStyle"],"kind":"struct"},"17:13838:6371":{"crate_id":17,"path":["object","elf","CompressionHeader32"],"kind":"struct"},"16:155:5790":{"crate_id":16,"path":["gimli","read","util","ArrayVec"],"kind":"struct"},"17:15106:6619":{"crate_id":17,"path":["object","macho","Nlist32"],"kind":"struct"},"5:4369:3989":{"crate_id":5,"path":["alloc","collections","vec_deque","iter","Iter"],"kind":"struct"},"11:854:11135":{"crate_id":11,"path":["hashbrown","map","RawOccupiedEntryMut"],"kind":"struct"},"1:8112:10640":{"crate_id":1,"path":["std","env","JoinPathsError"],"kind":"struct"},"24:5983:3971":{"crate_id":24,"path":["syn","ty","TypeInfer"],"kind":"struct"},"2:23576:8644":{"crate_id":2,"path":["core","num","nonzero","private","NonZeroI16Inner"],"kind":"struct"},"2:4554:34863":{"crate_id":2,"path":["core","asserting","TryCaptureWithDebug"],"kind":"struct"},"1:12451:1196":{"crate_id":1,"path":["std","never"],"kind":"primitive"},"2:23543:8641":{"crate_id":2,"path":["core","num","nonzero","private","NonZeroU128Inner"],"kind":"struct"},"2:7946:4049":{"crate_id":2,"path":["core","iter","range","Step"],"kind":"trait"},"17:14043:6407":{"crate_id":17,"path":["object","elf","Versym"],"kind":"struct"},"6:8308:8596":{"crate_id":6,"path":["libc","unix","linux_like","linux","can_frame"],"kind":"struct"},"2:10535:132":{"crate_id":2,"path":["core","fmt","Display"],"kind":"trait"},"1:11363:9137":{"crate_id":1,"path":["std","sys","personality","dwarf","eh","EHContext"],"kind":"struct"},"16:7372:7167":{"crate_id":16,"path":["gimli","read","loclists","DebugLocLists"],"kind":"struct"},"2:47010:8969":{"crate_id":2,"path":["core","core_arch","simd","i16x16"],"kind":"struct"},"2:11712:16573":{"crate_id":2,"path":["core","slice","iter","SplitMut"],"kind":"struct"},"2:2208:5538":{"crate_id":2,"path":["core","ptr","metadata","Thin"],"kind":"trait_alias"},"1:8091:11126":{"crate_id":1,"path":["std","backtrace","RawFrame"],"kind":"enum"},"2:3339:5135":{"crate_id":2,"path":["core","marker","Freeze"],"kind":"trait"},"1:4815:11292":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt"],"kind":"trait"},"1:2086:200":{"crate_id":1,"path":["std","ffi","os_str","OsStr"],"kind":"struct"},"17:15836:6851":{"crate_id":17,"path":["object","pe","ImageThunkData64"],"kind":"struct"},"2:3366:6037":{"crate_id":2,"path":["core","ops","arith","Neg"],"kind":"trait"},"6:7604:8562":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ucontext_t"],"kind":"struct"},"17:506:6132":{"crate_id":17,"path":["object","read","any","Section"],"kind":"struct"},"18:680:9242":{"crate_id":18,"path":["memchr","memmem","Finder"],"kind":"struct"},"17:11026:37636":{"crate_id":17,"path":["object","read","any","SectionIteratorInternal"],"kind":"enum"},"17:14807:6572":{"crate_id":17,"path":["object","macho","TwolevelHintsCommand"],"kind":"struct"},"2:10796:9492":{"crate_id":2,"path":["core","hash","BuildHasherDefault"],"kind":"struct"},"24:4276:4273":{"crate_id":24,"path":["syn","token","At"],"kind":"struct"},"1:1623:3988":{"crate_id":1,"path":["std","collections","hash","set","IntoIter"],"kind":"struct"},"24:4455:4284":{"crate_id":24,"path":["syn","token","FatArrow"],"kind":"struct"},"20:801:9236":{"crate_id":20,"path":["proc_macro2","imp","DeferredTokenStream"],"kind":"struct"},"11:1580:23001":{"crate_id":11,"path":["hashbrown","rustc_entry","RustcOccupiedEntry"],"kind":"struct"},"17:13921:6386":{"crate_id":17,"path":["object","elf","Syminfo64"],"kind":"struct"},"16:6749:7227":{"crate_id":16,"path":["gimli","read","endian_slice","EndianSlice"],"kind":"struct"},"24:4520:4289":{"crate_id":24,"path":["syn","token","Lt"],"kind":"struct"},"17:15812:6843":{"crate_id":17,"path":["object","pe","ImageExportDirectory"],"kind":"struct"},"9:0:3743":{"crate_id":9,"path":["miniz_oxide"],"kind":"module"},"17:14975:6597":{"crate_id":17,"path":["object","macho","DyldInfoCommand"],"kind":"struct"},"5:7548:9475":{"crate_id":5,"path":["alloc","collections","binary_heap","IntoIterSorted"],"kind":"struct"},"6:7350:8448":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","siginfo_t"],"kind":"struct"},"1:8368:11248":{"crate_id":1,"path":["std","io","error","ErrorKind"],"kind":"enum"},"16:4844:7194":{"crate_id":16,"path":["gimli","constants","DwLle"],"kind":"struct"},"11:842:11134":{"crate_id":11,"path":["hashbrown","map","RawEntryMut"],"kind":"enum"},"24:4356:4278":{"crate_id":24,"path":["syn","token","Dollar"],"kind":"struct"},"1:12466:928":{"crate_id":1,"path":["std","i8"],"kind":"primitive"},"5:3363:2595":{"crate_id":5,"path":["alloc","collections","btree","set","Union"],"kind":"struct"},"2:42699:3988":{"crate_id":2,"path":["core","result","IntoIter"],"kind":"struct"},"6:4990:7888":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_ramp_effect"],"kind":"struct"},"17:15946:6882":{"crate_id":17,"path":["object","pe","ImageResourceDirStringU"],"kind":"struct"},"6:5057:7920":{"crate_id":6,"path":["libc","unix","linux_like","linux","dl_phdr_info"],"kind":"struct"},"1:8566:9579":{"crate_id":1,"path":["std","io","Lines"],"kind":"struct"},"20:825:2546":{"crate_id":20,"path":["proc_macro2","imp","Group"],"kind":"enum"},"17:13871:6377":{"crate_id":17,"path":["object","elf","Sym32"],"kind":"struct"},"2:43742:160":{"crate_id":2,"path":["core","hash","sip","Hasher"],"kind":"struct"},"5:3455:5584":{"crate_id":5,"path":["alloc","collections","btree","set","ExtractIf"],"kind":"struct"},"2:43970:9559":{"crate_id":2,"path":["core","slice","ascii","EscapeByte"],"kind":"struct"},"17:2378:24118":{"crate_id":17,"path":["object","read","elf","relocation","ElfRelaIterator"],"kind":"enum"},"16:6953:9382":{"crate_id":16,"path":["gimli","read","aranges","ArangeEntry"],"kind":"struct"},"2:46640:8937":{"crate_id":2,"path":["core","core_arch","simd","i8x16"],"kind":"struct"},"2:40899:9524":{"crate_id":2,"path":["core","char","decode","DecodeUtf16"],"kind":"struct"},"17:12906:6276":{"crate_id":17,"path":["object","read","pe","relocation","RelocationBlockIterator"],"kind":"struct"},"21:1799:5606":{"crate_id":21,"path":["proc_macro","bridge","Marked"],"kind":"struct"},"17:11527:24063":{"crate_id":17,"path":["object","read","coff","file","CoffFile"],"kind":"struct"},"17:13205:24032":{"crate_id":17,"path":["object","read","traits","NoDynamicRelocationIterator"],"kind":"struct"},"2:42491:8866":{"crate_id":2,"path":["core","net","socket_addr","SocketAddrV6"],"kind":"struct"},"2:22096:11424":{"crate_id":2,"path":["core","core_simd","cast","SimdCast"],"kind":"trait"},"17:10977:37643":{"crate_id":17,"path":["object","read","any","SegmentInternal"],"kind":"enum"},"17:11281:24030":{"crate_id":17,"path":["object","read","any","DynamicRelocationIterator"],"kind":"struct"},"21:959:2625":{"crate_id":21,"path":["proc_macro","bridge","client","Span"],"kind":"struct"},"2:39977:16608":{"crate_id":2,"path":["core","ops","control_flow","ControlFlow"],"kind":"enum"},"17:11319:37629":{"crate_id":17,"path":["object","read","any","SectionRelocationIteratorInternal"],"kind":"enum"},"5:6126:72":{"crate_id":5,"path":["alloc","sync","Arc"],"kind":"struct"},"20:719:4007":{"crate_id":20,"path":["proc_macro2","fallback","LexError"],"kind":"struct"},"16:8528:9440":{"crate_id":16,"path":["gimli","read","unit","EntriesRaw"],"kind":"struct"},"6:465:2547":{"crate_id":6,"path":["libc","unix","group"],"kind":"struct"},"5:3719:3993":{"crate_id":5,"path":["alloc","collections","linked_list","IterMut"],"kind":"struct"},"1:10993:143":{"crate_id":1,"path":["std","sys","pal","unix","fs","FileType"],"kind":"struct"},"5:3799:5801":{"crate_id":5,"path":["alloc","collections","linked_list","drop","DropGuard"],"kind":"struct"},"2:10541:4144":{"crate_id":2,"path":["core","fmt","LowerHex"],"kind":"trait"},"17:15939:6881":{"crate_id":17,"path":["object","pe","ImageResourceDirectoryString"],"kind":"struct"},"17:13451:6310":{"crate_id":17,"path":["object","read","Import"],"kind":"struct"},"2:47077:8972":{"crate_id":2,"path":["core","core_arch","simd","f32x8"],"kind":"struct"},"2:4827:4147":{"crate_id":2,"path":["core","cell","BorrowError"],"kind":"struct"},"17:12941:6279":{"crate_id":17,"path":["object","read","pe","resource","ResourceDirectory"],"kind":"struct"},"6:473:7559":{"crate_id":6,"path":["libc","unix","utimbuf"],"kind":"struct"},"24:2442:3993":{"crate_id":24,"path":["syn","punctuated","IterMut"],"kind":"struct"},"24:2270:3985":{"crate_id":24,"path":["syn","punctuated","Pairs"],"kind":"struct"},"6:1625:7715":{"crate_id":6,"path":["libc","unix","linux_like","in_pktinfo"],"kind":"struct"},"1:1117:10632":{"crate_id":1,"path":["std","collections","hash","map","OccupiedError"],"kind":"struct"},"17:13322:24035":{"crate_id":17,"path":["object","read","SymbolSection"],"kind":"enum"},"1:9305:10764":{"crate_id":1,"path":["std","sync","mpmc","array","ArrayToken"],"kind":"struct"},"2:10533:122":{"crate_id":2,"path":["core","fmt","macros","Debug"],"kind":"proc_derive"},"5:5571:16560":{"crate_id":5,"path":["alloc","slice","Concat"],"kind":"trait"},"17:12992:6281":{"crate_id":17,"path":["object","read","pe","rich","RichHeaderInfo"],"kind":"struct"},"1:3668:32862":{"crate_id":1,"path":["std","io","Write","write_fmt","Adapter"],"kind":"struct"},"1:11298:9130":{"crate_id":1,"path":["std","sys","pal","unix","time","SystemTime"],"kind":"struct"},"17:11124:37632":{"crate_id":17,"path":["object","read","any","ComdatSectionIteratorInternal"],"kind":"enum"},"17:14416:6495":{"crate_id":17,"path":["object","macho","SegmentCommand32"],"kind":"struct"},"16:4184:7187":{"crate_id":16,"path":["gimli","constants","DwUt"],"kind":"struct"},"2:43442:8871":{"crate_id":2,"path":["core","fmt","rt","Placeholder"],"kind":"struct"},"11:1564:23000":{"crate_id":11,"path":["hashbrown","rustc_entry","RustcEntry"],"kind":"enum"},"17:12787:6269":{"crate_id":17,"path":["object","read","pe","data_directory","DataDirectories"],"kind":"struct"},"6:5288:7995":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_j1939"],"kind":"struct"},"17:10696:6193":{"crate_id":17,"path":["object","endian","I32Bytes"],"kind":"struct"},"24:3153:4242":{"crate_id":24,"path":["syn","token","Crate"],"kind":"struct"},"17:11358:24044":{"crate_id":17,"path":["object","read","archive","ArchiveKind"],"kind":"enum"},"2:43104:10763":{"crate_id":2,"path":["core","sync","exclusive","Exclusive"],"kind":"struct"},"17:16822:6387":{"crate_id":17,"path":["object","xcoff","Rel32"],"kind":"struct"},"6:5205:7951":{"crate_id":6,"path":["libc","unix","linux_like","linux","posix_spawnattr_t"],"kind":"struct"},"16:6144:23935":{"crate_id":16,"path":["gimli","read","cfi","CieOffsetEncoding"],"kind":"enum"},"24:5302:3932":{"crate_id":24,"path":["syn","expr","ExprLet"],"kind":"struct"},"2:43223:4145":{"crate_id":2,"path":["core","fmt","num","UpperHex"],"kind":"struct"},"16:2990:7155":{"crate_id":16,"path":["gimli","common","EhFrameOffset"],"kind":"struct"},"2:43717:9553":{"crate_id":2,"path":["core","hash","sip","SipHasher13"],"kind":"struct"},"20:878:257":{"crate_id":20,"path":["proc_macro2","TokenStream"],"kind":"struct"},"6:6917:8417":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","semid_ds"],"kind":"struct"},"11:671:3989":{"crate_id":11,"path":["hashbrown","map","Iter"],"kind":"struct"},"2:41326:4094":{"crate_id":2,"path":["core","iter","adapters","rev","Rev"],"kind":"struct"},"2:13327:16582":{"crate_id":2,"path":["core","str","pattern","DoubleEndedSearcher"],"kind":"trait"},"2:42917:95":{"crate_id":2,"path":["core","sync","atomic","AtomicU32"],"kind":"struct"},"1:4149:11289":{"crate_id":1,"path":["std","os","unix","fs","FileExt"],"kind":"trait"},"6:6765:8362":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_options"],"kind":"struct"},"1:894:3993":{"crate_id":1,"path":["std","collections","hash","map","IterMut"],"kind":"struct"},"6:1514:7638":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr"],"kind":"struct"},"2:3436:4293":{"crate_id":2,"path":["core","ops","bit","Not"],"kind":"trait"},"17:15963:6886":{"crate_id":17,"path":["object","pe","ImageLoadConfigCodeIntegrity"],"kind":"struct"},"2:22047:34588":{"crate_id":2,"path":["core","core_simd","swizzle","interleave","Hi"],"kind":"struct"},"24:5361:3938":{"crate_id":24,"path":["syn","expr","ExprTry"],"kind":"struct"},"24:4964:3892":{"crate_id":24,"path":["syn","attr","MetaNameValue"],"kind":"struct"},"17:11515:24069":{"crate_id":17,"path":["object","read","coff","file","CoffCommon"],"kind":"struct"},"17:11075:37642":{"crate_id":17,"path":["object","read","any","ComdatIteratorInternal"],"kind":"enum"},"6:5641:8152":{"crate_id":6,"path":["libc","unix","linux_like","linux","hwtstamp_config"],"kind":"struct"},"17:12840:9284":{"crate_id":17,"path":["object","read","pe","import","ImportTable"],"kind":"struct"},"1:9169:9119":{"crate_id":1,"path":["std","process","ExitStatusError"],"kind":"struct"},"2:44878:9594":{"crate_id":2,"path":["core","str","pattern","CharSliceSearcher"],"kind":"struct"},"23:46:4019":{"crate_id":23,"path":["quote","ident_fragment","IdentFragment"],"kind":"trait"},"2:41375:4082":{"crate_id":2,"path":["core","iter","adapters","step_by","StepBy"],"kind":"struct"},"24:3476:4256":{"crate_id":24,"path":["syn","token","Mut"],"kind":"struct"},"17:3854:24160":{"crate_id":17,"path":["object","read","macho","relocation","MachORelocationIterator"],"kind":"struct"},"2:43733:9556":{"crate_id":2,"path":["core","hash","sip","SipHasher"],"kind":"struct"},"2:44187:9499":{"crate_id":2,"path":["core","slice","iter","Chunks"],"kind":"struct"},"5:4528:5825":{"crate_id":5,"path":["alloc","collections","vec_deque","write_iter_wrapping","Guard"],"kind":"struct"},"2:22076:34597":{"crate_id":2,"path":["core","core_simd","swizzle","resize","Resize"],"kind":"struct"},"2:42439:9551":{"crate_id":2,"path":["core","net","parser","AddrParseError"],"kind":"struct"},"2:3029:16632":{"crate_id":2,"path":["core","convert","num","FloatToInt"],"kind":"trait"},"1:11141:5909":{"crate_id":1,"path":["std","sys","pal","unix","process","process_inner","posix_spawn","PosixSpawnFileActions"],"kind":"struct"},"24:5879:3963":{"crate_id":24,"path":["syn","restriction","VisRestricted"],"kind":"struct"},"1:9351:10766":{"crate_id":1,"path":["std","sync","mpmc","list","ListToken"],"kind":"struct"},"2:3737:16674":{"crate_id":2,"path":["core","ops","range","OneSidedRange"],"kind":"trait"},"24:138:2552":{"crate_id":24,"path":["syn","Token"],"kind":"macro"},"5:3706:3989":{"crate_id":5,"path":["alloc","collections","linked_list","Iter"],"kind":"struct"},"18:689:9245":{"crate_id":18,"path":["memchr","memmem","FinderRev"],"kind":"struct"},"17:11851:24087":{"crate_id":17,"path":["object","read","elf","section","ElfSectionIterator"],"kind":"struct"},"1:8097:11165":{"crate_id":1,"path":["std","env","VarError"],"kind":"enum"},"1:6434:10767":{"crate_id":1,"path":["std","sync","mpmc","zero","ZeroToken"],"kind":"struct"},"16:5449:7213":{"crate_id":16,"path":["gimli","constants","DwRle"],"kind":"struct"},"16:7282:9411":{"crate_id":16,"path":["gimli","read","line","CompleteLineProgram"],"kind":"struct"},"14:187:23016":{"crate_id":14,"path":["rustc_demangle","SizeLimitedFmtAdapter"],"kind":"struct"},"2:46348:8908":{"crate_id":2,"path":["core","core_arch","simd","u16x2"],"kind":"struct"},"2:13316:9248":{"crate_id":2,"path":["core","str","pattern","Searcher"],"kind":"trait"},"16:2450:7124":{"crate_id":16,"path":["gimli","common","Encoding"],"kind":"struct"},"14:160:10626":{"crate_id":14,"path":["rustc_demangle","Demangle"],"kind":"struct"},"16:6984:7176":{"crate_id":16,"path":["gimli","read","index","DebugTuIndex"],"kind":"struct"},"17:15777:6837":{"crate_id":17,"path":["object","pe","ImageBaseRelocation"],"kind":"struct"},"5:3087:8611":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Immut"],"kind":"struct"},"1:9437:237":{"crate_id":1,"path":["std","sync","rwlock","RwLockReadGuard"],"kind":"struct"},"1:6710:11383":{"crate_id":1,"path":["std","sync","once","OnceState"],"kind":"struct"},"24:5246:3923":{"crate_id":24,"path":["syn","expr","ExprBlock"],"kind":"struct"},"24:4752:4305":{"crate_id":24,"path":["syn","token","Semi"],"kind":"struct"},"24:3561:231":{"crate_id":24,"path":["syn","token","Return"],"kind":"struct"},"5:7814:9485":{"crate_id":5,"path":["alloc","string","FromUtf8Error"],"kind":"struct"},"1:8516:11214":{"crate_id":1,"path":["std","io","SeekFrom"],"kind":"enum"},"2:43511:74":{"crate_id":2,"path":["core","fmt","rt","Argument"],"kind":"struct"},"2:32743:240":{"crate_id":2,"path":["core","marker","Send"],"kind":"trait"},"24:5289:3930":{"crate_id":24,"path":["syn","expr","ExprIf"],"kind":"struct"},"2:42273:8856":{"crate_id":2,"path":["core","net","ip_addr","Ipv4Addr"],"kind":"struct"},"24:5445:3109":{"crate_id":24,"path":["syn","generics","GenericParam"],"kind":"enum"},"1:3687:11234":{"crate_id":1,"path":["std","io","BufRead"],"kind":"trait"},"16:6808:7156":{"crate_id":16,"path":["gimli","read","abbrev","DebugAbbrev"],"kind":"struct"},"1:630:11118":{"crate_id":1,"path":["std","ascii","AsciiExt"],"kind":"trait"},"6:8273:8588":{"crate_id":6,"path":["libc","unix","linux_like","linux","fanotify_event_metadata"],"kind":"struct"},"16:2486:7132":{"crate_id":16,"path":["gimli","common","Register"],"kind":"struct"},"6:5462:8076":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_nxtinfo"],"kind":"struct"},"2:41181:4085":{"crate_id":2,"path":["core","iter","adapters","chain","Chain"],"kind":"struct"},"2:43067:98":{"crate_id":2,"path":["core","sync","atomic","AtomicUsize"],"kind":"struct"},"24:5621:3950":{"crate_id":24,"path":["syn","lit","LitBool"],"kind":"struct"},"1:7428:5902":{"crate_id":1,"path":["std","sys_common","lazy_box","LazyBox"],"kind":"struct"},"5:7590:36920":{"crate_id":5,"path":["alloc","collections","btree","merge_iter","Peeked"],"kind":"enum"},"6:7577:8556":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ptrace_rseq_configuration"],"kind":"struct"},"17:16008:6897":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation64V2"],"kind":"struct"},"24:3663:258":{"crate_id":24,"path":["syn","token","Trait"],"kind":"struct"},"17:12687:24208":{"crate_id":17,"path":["object","read","pe","file","PeComdatIterator"],"kind":"struct"},"17:11291:37634":{"crate_id":17,"path":["object","read","any","DynamicRelocationIteratorInternal"],"kind":"enum"},"24:1693:2630":{"crate_id":24,"path":["syn","meta","ParseNestedMeta"],"kind":"struct"},"17:12306:9277":{"crate_id":17,"path":["object","read","macho","fat","MachOFatFile"],"kind":"struct"},"16:2704:7142":{"crate_id":16,"path":["gimli","common","DebugLocListsIndex"],"kind":"struct"},"16:8626:9447":{"crate_id":16,"path":["gimli","read","unit","DebugTypesUnitHeadersIter"],"kind":"struct"},"2:47717:9033":{"crate_id":2,"path":["core","core_arch","x86","__m256bh"],"kind":"struct"},"24:4235:4270":{"crate_id":24,"path":["syn","token","And"],"kind":"struct"},"1:768:157":{"crate_id":1,"path":["std","collections","hash","map","HashMap"],"kind":"struct"},"1:5682:116":{"crate_id":1,"path":["std","process","Command"],"kind":"struct"},"17:10778:24024":{"crate_id":17,"path":["object","read","read_cache","ReadCache"],"kind":"struct"},"16:6159:9311":{"crate_id":16,"path":["gimli","read","cfi","BaseAddresses"],"kind":"struct"},"2:8369:4072":{"crate_id":2,"path":["core","iter","traits","accum","Product"],"kind":"trait"},"2:41710:9543":{"crate_id":2,"path":["core","iter","sources","from_coroutine","FromCoroutine"],"kind":"struct"},"2:41766:4065":{"crate_id":2,"path":["core","iter","sources","successors","Successors"],"kind":"struct"},"17:10823:6196":{"crate_id":17,"path":["object","read","util","ByteString"],"kind":"struct"},"24:1789:4000":{"crate_id":24,"path":["syn","parse","Parse"],"kind":"trait"},"1:2335:11195":{"crate_id":1,"path":["std","fs","read_to_string"],"kind":"function"},"6:4957:7872":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_mask"],"kind":"struct"},"1:967:11133":{"crate_id":1,"path":["std","collections","hash","map","RawEntryBuilderMut"],"kind":"struct"},"2:31145:4133":{"crate_id":2,"path":["core","ptr","alignment","Alignment"],"kind":"struct"},"17:15418:6738":{"crate_id":17,"path":["object","pe","ImageFileHeader"],"kind":"struct"},"2:13039:9570":{"crate_id":2,"path":["core","str","iter","SplitNInternal"],"kind":"struct"},"6:1675:7745":{"crate_id":6,"path":["libc","unix","linux_like","arphdr"],"kind":"struct"},"2:46500:8921":{"crate_id":2,"path":["core","core_arch","simd","i32x2"],"kind":"struct"},"2:41016:9529":{"crate_id":2,"path":["core","char","ToUppercase"],"kind":"struct"},"11:2539:7469":{"crate_id":11,"path":["hashbrown","raw","bitmask","BitMask"],"kind":"struct"},"1:2521:11209":{"crate_id":1,"path":["std","fs","exists"],"kind":"function"},"24:2640:3245":{"crate_id":24,"path":["syn","spanned","Spanned"],"kind":"trait"},"24:4936:3889":{"crate_id":24,"path":["syn","attr","AttrStyle"],"kind":"enum"},"5:7113:5591":{"crate_id":5,"path":["alloc","vec","in_place_drop","InPlaceDrop"],"kind":"struct"},"1:3403:11254":{"crate_id":1,"path":["std","io","stdio","Stdout"],"kind":"struct"},"18:531:9239":{"crate_id":18,"path":["memchr","memmem","prefilter","PrefilterState"],"kind":"struct"},"1:8668:11345":{"crate_id":1,"path":["std","os","linux","process","PidFd"],"kind":"struct"},"5:3342:36928":{"crate_id":5,"path":["alloc","collections","btree","set","IntersectionInner"],"kind":"enum"},"16:8096:23955":{"crate_id":16,"path":["gimli","read","rnglists","RngListIter"],"kind":"struct"},"21:2668:2625":{"crate_id":21,"path":["proc_macro","Span"],"kind":"struct"},"5:2584:8609":{"crate_id":5,"path":["alloc","collections","btree","node","NodeRef"],"kind":"struct"},"19:0:1315":{"crate_id":19,"path":["panic_unwind"],"kind":"module"},"1:11029:28357":{"crate_id":1,"path":["std","sys","pal","unix","kernel_copy","SpliceMode"],"kind":"enum"},"16:2724:7143":{"crate_id":16,"path":["gimli","common","DebugMacinfoOffset"],"kind":"struct"},"1:11407:2927":{"crate_id":1,"path":["std","sys","os_str","bytes","Slice"],"kind":"struct"},"17:10115:24010":{"crate_id":17,"path":["object","common","AddressSize"],"kind":"enum"},"6:5151:7935":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Shdr"],"kind":"struct"},"16:4929:7197":{"crate_id":16,"path":["gimli","constants","DwAccess"],"kind":"struct"},"17:11733:24078":{"crate_id":17,"path":["object","read","coff","import","ImportName"],"kind":"enum"},"17:13491:6312":{"crate_id":17,"path":["object","read","CodeView"],"kind":"struct"},"1:9433:5825":{"crate_id":1,"path":["std","sync","poison","Guard"],"kind":"struct"},"11:1674:5798":{"crate_id":11,"path":["hashbrown","scopeguard","ScopeGuard"],"kind":"struct"},"24:6026:3111":{"crate_id":24,"path":["syn","ty","ReturnType"],"kind":"enum"},"16:2748:7144":{"crate_id":16,"path":["gimli","common","DebugMacroOffset"],"kind":"struct"},"5:1122:5801":{"crate_id":5,"path":["alloc","collections","binary_heap","drop","DropGuard"],"kind":"struct"},"5:1213:36946":{"crate_id":5,"path":["alloc","collections","btree","append","MergeIter"],"kind":"struct"},"2:45111:9613":{"crate_id":2,"path":["core","str","IsWhitespace"],"kind":"struct"},"1:8223:9627":{"crate_id":1,"path":["std","fs","Permissions"],"kind":"struct"},"2:44763:16597":{"crate_id":2,"path":["core","str","pattern","SearchStep"],"kind":"enum"},"2:24072:239":{"crate_id":2,"path":["core","num","saturating","Saturating"],"kind":"struct"},"5:2367:9471":{"crate_id":5,"path":["alloc","collections","btree","navigate","LazyLeafRange"],"kind":"struct"},"2:13375:16591":{"crate_id":2,"path":["core","str","pattern","MultiCharEqPattern"],"kind":"struct"},"5:3085:37342":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Dying"],"kind":"enum"},"2:13926:34977":{"crate_id":2,"path":["core","future","async_drop","AsyncDropOwning"],"kind":"struct"},"2:23430:9514":{"crate_id":2,"path":["core","num","error","ParseIntError"],"kind":"struct"},"2:22263:11215":{"crate_id":2,"path":["core","core_simd","masks","sealed","Sealed"],"kind":"trait"},"2:41212:4086":{"crate_id":2,"path":["core","iter","adapters","cycle","Cycle"],"kind":"struct"},"2:44655:9581":{"crate_id":2,"path":["core","str","iter","SplitWhitespace"],"kind":"struct"},"5:4483:271":{"crate_id":5,"path":["alloc","collections","vec_deque","VecDeque"],"kind":"struct"},"24:5527:2692":{"crate_id":24,"path":["syn","generics","WherePredicate"],"kind":"enum"},"24:703:3989":{"crate_id":24,"path":["syn","error","Iter"],"kind":"struct"},"16:6440:23938":{"crate_id":16,"path":["gimli","read","cfi","CfaRule"],"kind":"enum"},"17:15641:6806":{"crate_id":17,"path":["object","pe","ImageSymbol"],"kind":"struct"},"17:15090:6617":{"crate_id":17,"path":["object","macho","NoteCommand"],"kind":"struct"},"6:5196:7946":{"crate_id":6,"path":["libc","unix","linux_like","linux","posix_spawn_file_actions_t"],"kind":"struct"},"16:4902:7196":{"crate_id":16,"path":["gimli","constants","DwEnd"],"kind":"struct"},"6:7308:8424":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","sigaction"],"kind":"struct"},"17:10296:24016":{"crate_id":17,"path":["object","common","RelocationKind"],"kind":"enum"},"24:5544:3212":{"crate_id":24,"path":["syn","generics","PredicateType"],"kind":"struct"},"16:7058:9392":{"crate_id":16,"path":["gimli","read","line","LineRows"],"kind":"struct"},"6:6666:8327":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_exit"],"kind":"struct"},"21:2562:129":{"crate_id":21,"path":["proc_macro","diagnostic","Diagnostic"],"kind":"struct"},"16:2550:7135":{"crate_id":16,"path":["gimli","common","DebugAddrIndex"],"kind":"struct"},"6:586:7624":{"crate_id":6,"path":["libc","unix","protoent"],"kind":"struct"},"16:6123:7161":{"crate_id":16,"path":["gimli","read","cfi","EhFrame"],"kind":"struct"},"24:79:2552":{"crate_id":24,"path":["syn","token","Token"],"kind":"trait"},"2:11750:16579":{"crate_id":2,"path":["core","slice","iter","SplitInclusiveMut"],"kind":"struct"},"5:2815:8612":{"crate_id":5,"path":["alloc","collections","btree","node","Handle"],"kind":"struct"},"2:31156:34178":{"crate_id":2,"path":["core","ptr","alignment","AlignmentEnum"],"kind":"enum"},"24:5492:3944":{"crate_id":24,"path":["syn","generics","BoundLifetimes"],"kind":"struct"},"2:32720:34628":{"crate_id":2,"path":["core","error","tags","MaybeSizedValue"],"kind":"struct"},"5:7570:5812":{"crate_id":5,"path":["alloc","collections","binary_heap","DrainSorted"],"kind":"struct"},"11:798:5586":{"crate_id":11,"path":["hashbrown","map","Drain"],"kind":"struct"},"24:85:11215":{"crate_id":24,"path":["syn","token","private","Sealed"],"kind":"trait"},"20:843:3242":{"crate_id":20,"path":["proc_macro2","imp","Literal"],"kind":"enum"},"17:15586:6794":{"crate_id":17,"path":["object","pe","AnonObjectHeaderV2"],"kind":"struct"},"2:45323:210":{"crate_id":2,"path":["core","task","poll","Poll"],"kind":"enum"},"2:42991:96":{"crate_id":2,"path":["core","sync","atomic","AtomicU64"],"kind":"struct"},"2:14294:155":{"crate_id":2,"path":["core","alloc","global","GlobalAlloc"],"kind":"trait"},"0:964:2407":{"crate_id":0,"path":["serde_derive","Serialize"],"kind":"proc_derive"},"6:5635:8149":{"crate_id":6,"path":["libc","unix","linux_like","linux","ifconf"],"kind":"struct"},"17:11222:24029":{"crate_id":17,"path":["object","read","any","SymbolIterator"],"kind":"struct"},"17:15286:6632":{"crate_id":17,"path":["object","pe","ImageDosHeader"],"kind":"struct"},"2:881:11273":{"crate_id":2,"path":["core","num","nonzero","ZeroablePrimitive"],"kind":"trait"},"24:4554:4291":{"crate_id":24,"path":["syn","token","MinusEq"],"kind":"struct"},"24:5298:3931":{"crate_id":24,"path":["syn","expr","ExprInfer"],"kind":"struct"},"16:6111:9309":{"crate_id":16,"path":["gimli","read","cfi","EhHdrTable"],"kind":"struct"},"17:16714:7098":{"crate_id":17,"path":["object","xcoff","CsectAux64"],"kind":"struct"},"5:7721:5377":{"crate_id":5,"path":["alloc","ffi","c_str","CString"],"kind":"struct"},"17:16264:6984":{"crate_id":17,"path":["object","pe","ImageEnclaveImport"],"kind":"struct"},"1:12238:5918":{"crate_id":1,"path":["std","backtrace_rs","symbolize","gimli","mmap","Mmap"],"kind":"struct"},"1:7743:33406":{"crate_id":1,"path":["std","panicking","Hook"],"kind":"enum"},"2:23554:8642":{"crate_id":2,"path":["core","num","nonzero","private","NonZeroUsizeInner"],"kind":"struct"},"16:2820:7147":{"crate_id":16,"path":["gimli","common","DebugRngListsBase"],"kind":"struct"},"2:3747:259":{"crate_id":2,"path":["core","ops","try_trait","Try"],"kind":"trait"},"6:532:7596":{"crate_id":6,"path":["libc","unix","iovec"],"kind":"struct"},"2:45305:222":{"crate_id":2,"path":["core","future","ready","Ready"],"kind":"struct"},"1:12453:1906":{"crate_id":1,"path":["std","unit"],"kind":"primitive"},"2:22064:34585":{"crate_id":2,"path":["core","core_simd","swizzle","deinterleave","Odd"],"kind":"struct"},"5:5142:5825":{"crate_id":5,"path":["alloc","rc","from_iter_exact","Guard"],"kind":"struct"},"11:2366:23003":{"crate_id":11,"path":["hashbrown","table","AbsentEntry"],"kind":"struct"},"1:12070:5916":{"crate_id":1,"path":["std","backtrace_rs","backtrace","libunwind","Bomb"],"kind":"struct"},"17:14438:6502":{"crate_id":17,"path":["object","macho","SegmentCommand64"],"kind":"struct"},"7:0:1936":{"crate_id":7,"path":["unwind"],"kind":"module"},"6:6638:8314":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","seminfo"],"kind":"struct"},"2:44485:9571":{"crate_id":2,"path":["core","str","iter","SplitN"],"kind":"struct"},"16:896:37595":{"crate_id":16,"path":["gimli","read","endian_slice","DebugBytes"],"kind":"struct"},"2:46448:8918":{"crate_id":2,"path":["core","core_arch","simd","u64x1"],"kind":"struct"},"2:44664:9582":{"crate_id":2,"path":["core","str","iter","SplitAsciiWhitespace"],"kind":"struct"},"2:47779:9050":{"crate_id":2,"path":["core","core_arch","x86","cpuid","CpuidResult"],"kind":"struct"},"17:11617:24029":{"crate_id":17,"path":["object","read","coff","symbol","SymbolIterator"],"kind":"struct"},"1:984:11135":{"crate_id":1,"path":["std","collections","hash","map","RawOccupiedEntryMut"],"kind":"struct"},"2:47495:9013":{"crate_id":2,"path":["core","core_arch","simd","f32x16"],"kind":"struct"},"2:41172:4075":{"crate_id":2,"path":["core","iter","adapters","by_ref_sized","ByRefSized"],"kind":"struct"},"17:12108:9267":{"crate_id":17,"path":["object","read","elf","version","VerdauxIterator"],"kind":"struct"},"6:5265:7981":{"crate_id":6,"path":["libc","unix","linux_like","linux","regmatch_t"],"kind":"struct"},"17:16198:6967":{"crate_id":17,"path":["object","pe","ImageAlphaRuntimeFunctionEntry"],"kind":"struct"},"24:4414:4282":{"crate_id":24,"path":["syn","token","DotDotEq"],"kind":"struct"},"6:5658:8156":{"crate_id":6,"path":["libc","unix","linux_like","linux","sched_attr"],"kind":"struct"},"21:1362:2639":{"crate_id":21,"path":["proc_macro","bridge","symbol","Symbol"],"kind":"struct"},"17:15714:6822":{"crate_id":17,"path":["object","pe","ImageAuxSymbolFunctionBeginEnd"],"kind":"struct"},"5:5301:5833":{"crate_id":5,"path":["alloc","rc","Weak"],"kind":"struct"},"5:4207:3993":{"crate_id":5,"path":["alloc","collections","vec_deque","iter_mut","IterMut"],"kind":"struct"},"5:7737:9478":{"crate_id":5,"path":["alloc","ffi","c_str","NulError"],"kind":"struct"},"1:8284:4125":{"crate_id":1,"path":["std","io","cursor","Cursor"],"kind":"struct"},"2:1898:5344":{"crate_id":2,"path":["core","intrinsics","AggregateRawPtr"],"kind":"trait"},"0:965:2414":{"crate_id":0,"path":["serde_derive","Deserialize"],"kind":"proc_derive"},"1:10774:11254":{"crate_id":1,"path":["std","sys","pal","unix","stdio","Stdout"],"kind":"struct"},"17:14708:6539":{"crate_id":17,"path":["object","macho","DysymtabCommand"],"kind":"struct"},"1:575:5367":{"crate_id":1,"path":["std","thread","Packet"],"kind":"struct"},"14:31:10626":{"crate_id":14,"path":["rustc_demangle","v0","Demangle"],"kind":"struct"},"2:26472:273":{"crate_id":2,"path":["core","num","wrapping","Wrapping"],"kind":"struct"},"24:2373:3989":{"crate_id":24,"path":["syn","punctuated","Iter"],"kind":"struct"},"5:5425:5835":{"crate_id":5,"path":["alloc","rc","UniqueRcUninit"],"kind":"struct"},"2:41365:4097":{"crate_id":2,"path":["core","iter","adapters","skip_while","SkipWhile"],"kind":"struct"},"17:12723:24187":{"crate_id":17,"path":["object","read","pe","section","PeSegmentIterator"],"kind":"struct"},"2:22045:34590":{"crate_id":2,"path":["core","core_simd","swizzle","interleave","Lo"],"kind":"struct"},"16:5255:7207":{"crate_id":16,"path":["gimli","constants","DwIdx"],"kind":"struct"},"23:148:4768":{"crate_id":23,"path":["quote","__private","HasIterator"],"kind":"struct"},"24:4322:4276":{"crate_id":24,"path":["syn","token","Colon"],"kind":"struct"},"24:6014:68":{"crate_id":24,"path":["syn","ty","Abi"],"kind":"struct"},"2:46608:8935":{"crate_id":2,"path":["core","core_arch","simd","u32x4"],"kind":"struct"},"2:41060:16712":{"crate_id":2,"path":["core","ffi","c_str","FromBytesWithNulErrorKind"],"kind":"enum"},"2:40111:215":{"crate_id":2,"path":["core","ops","range","RangeFrom"],"kind":"struct"},"6:8353:8607":{"crate_id":6,"path":["libc","unix","align","in6_addr"],"kind":"struct"},"2:47603:9019":{"crate_id":2,"path":["core","core_arch","x86","__m128d"],"kind":"struct"},"24:3799:4267":{"crate_id":24,"path":["syn","token","Virtual"],"kind":"struct"},"16:8585:23958":{"crate_id":16,"path":["gimli","read","unit","EntriesTreeNode"],"kind":"struct"},"1:948:5584":{"crate_id":1,"path":["std","collections","hash","map","ExtractIf"],"kind":"struct"},"2:22062:34599":{"crate_id":2,"path":["core","core_simd","swizzle","deinterleave","Even"],"kind":"struct"},"17:11985:24129":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdatSectionIterator"],"kind":"struct"},"24:3629:2573":{"crate_id":24,"path":["syn","token","Struct"],"kind":"struct"},"5:7580:9476":{"crate_id":5,"path":["alloc","collections","btree","map","UnorderedKeyError"],"kind":"struct"},"2:9548:4748":{"crate_id":2,"path":["core","panic","unwind_safe","AssertUnwindSafe"],"kind":"struct"},"2:2215:5536":{"crate_id":2,"path":["core","ptr","metadata","DynMetadata"],"kind":"struct"},"21:2571:9233":{"crate_id":21,"path":["proc_macro","diagnostic","Children"],"kind":"struct"},"24:2966:4315":{"crate_id":24,"path":["syn","token","Underscore"],"kind":"struct"},"2:41097:11179":{"crate_id":2,"path":["core","ffi","c_char"],"kind":"type_alias"},"24:5018:2773":{"crate_id":24,"path":["syn","derive","DataStruct"],"kind":"struct"},"2:3777:34458":{"crate_id":2,"path":["core","ops","try_trait","NeverShortCircuitResidual"],"kind":"enum"},"1:9452:5900":{"crate_id":1,"path":["std","sync","rwlock","MappedRwLockWriteGuard"],"kind":"struct"},"2:45293:8897":{"crate_id":2,"path":["core","future","async_drop","Noop"],"kind":"struct"},"6:1696:7755":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_un"],"kind":"struct"},"1:6489:5889":{"crate_id":1,"path":["std","sync","mpmc","Sender"],"kind":"struct"},"24:5365:3939":{"crate_id":24,"path":["syn","expr","ExprTryBlock"],"kind":"struct"},"1:10565:33134":{"crate_id":1,"path":["std","sys","pal","unix","process","process_common","Argv"],"kind":"struct"},"21:2305:2558":{"crate_id":21,"path":["proc_macro","bridge","Ident"],"kind":"struct"},"21:2731:2624":{"crate_id":21,"path":["proc_macro","Spacing"],"kind":"enum"},"24:5241:3907":{"crate_id":24,"path":["syn","expr","ExprBinary"],"kind":"struct"},"2:46433:8917":{"crate_id":2,"path":["core","core_arch","simd","u32x2"],"kind":"struct"},"1:954:11132":{"crate_id":1,"path":["std","collections","hash","map","ValuesMut"],"kind":"struct"},"1:9768:130":{"crate_id":1,"path":["std","sys","pal","unix","fs","DirBuilder"],"kind":"struct"},"1:7495:32204":{"crate_id":1,"path":["std","sys_common","wstr","WStrUnits"],"kind":"struct"},"2:3758:16610":{"crate_id":2,"path":["core","ops","try_trait","Residual"],"kind":"trait"},"11:2440:5586":{"crate_id":11,"path":["hashbrown","table","Drain"],"kind":"struct"},"17:14738:6558":{"crate_id":17,"path":["object","macho","DylibTableOfContents"],"kind":"struct"},"1:1491:159":{"crate_id":1,"path":["std","collections","hash","set","HashSet"],"kind":"struct"},"1:990:11136":{"crate_id":1,"path":["std","collections","hash","map","RawVacantEntryMut"],"kind":"struct"},"1:12478:1447":{"crate_id":1,"path":["std","reference"],"kind":"primitive"},"24:1743:28310":{"crate_id":24,"path":["syn","parse","discouraged","Speculative"],"kind":"trait"},"17:16283:6989":{"crate_id":17,"path":["object","pe","ImageDebugDirectory"],"kind":"struct"},"16:5113:7202":{"crate_id":16,"path":["gimli","constants","DwId"],"kind":"struct"},"24:5377:3941":{"crate_id":24,"path":["syn","expr","ExprUnsafe"],"kind":"struct"},"2:47592:9018":{"crate_id":2,"path":["core","core_arch","x86","__m128"],"kind":"struct"},"17:15769:6835":{"crate_id":17,"path":["object","pe","ImageLinenumber"],"kind":"struct"},"24:4443:4283":{"crate_id":24,"path":["syn","token","EqEq"],"kind":"struct"},"2:22273:11421":{"crate_id":2,"path":["core","core_simd","masks","MaskElement"],"kind":"trait"},"21:2608:257":{"crate_id":21,"path":["proc_macro","TokenStream"],"kind":"struct"},"2:3309:3086":{"crate_id":2,"path":["core","marker","PhantomData"],"kind":"struct"},"2:47638:9022":{"crate_id":2,"path":["core","core_arch","x86","__m256d"],"kind":"struct"},"17:1339:24064":{"crate_id":17,"path":["object","read","coff","relocation","CoffRelocationIterator"],"kind":"struct"},"2:44227:8888":{"crate_id":2,"path":["core","slice","iter","ArrayWindows"],"kind":"struct"},"1:4680:11322":{"crate_id":1,"path":["std","os","unix","process","CommandExt"],"kind":"trait"},"1:2496:11201":{"crate_id":1,"path":["std","fs","read_link"],"kind":"function"},"17:15760:6834":{"crate_id":17,"path":["object","pe","ImageRelocation"],"kind":"struct"},"2:47060:8971":{"crate_id":2,"path":["core","core_arch","simd","i64x4"],"kind":"struct"},"20:933:2624":{"crate_id":20,"path":["proc_macro2","Spacing"],"kind":"enum"},"1:8255:5664":{"crate_id":1,"path":["std","hash","random","RandomState"],"kind":"struct"},"11:364:5794":{"crate_id":11,"path":["hashbrown","raw","RawIntoIter"],"kind":"struct"},"16:7980:7171":{"crate_id":16,"path":["gimli","read","pubtypes","DebugPubTypes"],"kind":"struct"},"23:235:5071":{"crate_id":23,"path":["quote","__private","get_span","GetSpan"],"kind":"struct"},"2:11892:16578":{"crate_id":2,"path":["core","slice","iter","SplitNMut"],"kind":"struct"},"24:5884:3962":{"crate_id":24,"path":["syn","restriction","FieldMutability"],"kind":"enum"},"17:13662:6330":{"crate_id":17,"path":["object","archive","AixHeader"],"kind":"struct"},"2:44905:9595":{"crate_id":2,"path":["core","str","pattern","CharPredicateSearcher"],"kind":"struct"},"24:3034:4239":{"crate_id":24,"path":["syn","token","Auto"],"kind":"struct"},"1:2718:5877":{"crate_id":1,"path":["std","io","buffered","bufwriter","BufWriter"],"kind":"struct"},"9:480:22918":{"crate_id":9,"path":["miniz_oxide","DataFormat"],"kind":"enum"},"24:5475:3945":{"crate_id":24,"path":["syn","generics","ConstParam"],"kind":"struct"},"6:5139:7934":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Phdr"],"kind":"struct"},"2:44635:9579":{"crate_id":2,"path":["core","str","iter","Lines"],"kind":"struct"},"6:6449:8216":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","glob64_t"],"kind":"struct"},"2:31130:5445":{"crate_id":2,"path":["core","mem","transmutability","Assume"],"kind":"struct"},"24:2449:3995":{"crate_id":24,"path":["syn","punctuated","PrivateIterMut"],"kind":"struct"},"24:3357:4251":{"crate_id":24,"path":["syn","token","In"],"kind":"struct"},"6:8290:8593":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_mutex_t"],"kind":"struct"},"11:434:37548":{"crate_id":11,"path":["hashbrown","raw","RawIterHashInner"],"kind":"struct"},"17:12952:9294":{"crate_id":17,"path":["object","read","pe","resource","ResourceDirectoryTable"],"kind":"struct"},"24:1005:11215":{"crate_id":24,"path":["syn","ext","private","Sealed"],"kind":"trait"},"17:14284:6472":{"crate_id":17,"path":["object","macho","DyldCacheImageInfo"],"kind":"struct"},"17:12280:24175":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCacheImageIterator"],"kind":"struct"},"17:14140:6436":{"crate_id":17,"path":["object","elf","HashHeader"],"kind":"struct"},"17:667:2639":{"crate_id":17,"path":["object","read","any","Symbol"],"kind":"struct"},"24:5340:3915":{"crate_id":24,"path":["syn","expr","ExprReference"],"kind":"struct"},"2:4962:4158":{"crate_id":2,"path":["core","cell","RefMut"],"kind":"struct"},"24:2983:4236":{"crate_id":24,"path":["syn","token","Abstract"],"kind":"struct"},"24:3289:144":{"crate_id":24,"path":["syn","token","Fn"],"kind":"struct"},"1:11971:11271":{"crate_id":1,"path":["std","sys_common","net","UdpSocket"],"kind":"struct"},"17:16642:7079":{"crate_id":17,"path":["object","xcoff","Symbol32"],"kind":"struct"},"2:46965:8968":{"crate_id":2,"path":["core","core_arch","simd","i8x32"],"kind":"struct"},"16:7075:23945":{"crate_id":16,"path":["gimli","read","line","LineInstruction"],"kind":"enum"},"16:6502:23046":{"crate_id":16,"path":["gimli","read","cfi","CallFrameInstruction"],"kind":"enum"},"1:5630:11364":{"crate_id":1,"path":["std","process","ChildStdin"],"kind":"struct"},"17:13290:6146":{"crate_id":17,"path":["object","read","SectionIndex"],"kind":"struct"},"11:1880:3989":{"crate_id":11,"path":["hashbrown","set","Iter"],"kind":"struct"},"17:10394:24019":{"crate_id":17,"path":["object","common","SegmentFlags"],"kind":"enum"},"18:659:28287":{"crate_id":18,"path":["memchr","memmem","FindIter"],"kind":"struct"},"1:12452:482":{"crate_id":1,"path":["std","char"],"kind":"primitive"},"6:1551:7661":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_ll"],"kind":"struct"},"14:214:9448":{"crate_id":14,"path":["rustc_demangle","TryDemangleError"],"kind":"struct"},"11:1884:3988":{"crate_id":11,"path":["hashbrown","set","IntoIter"],"kind":"struct"},"17:15997:6893":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation32V2"],"kind":"struct"},"16:7495:9421":{"crate_id":16,"path":["gimli","read","lookup","DebugLookup"],"kind":"struct"},"2:10173:10761":{"crate_id":2,"path":["core","fmt","builders","PadAdapterState"],"kind":"struct"},"2:44308:16574":{"crate_id":2,"path":["core","slice","iter","RChunksExactMut"],"kind":"struct"},"18:507:6057":{"crate_id":18,"path":["memchr","memmem","genericsimd","Forward"],"kind":"struct"},"1:5543:132":{"crate_id":1,"path":["std","path","Display"],"kind":"struct"},"17:13890:6382":{"crate_id":17,"path":["object","elf","Sym64"],"kind":"struct"},"1:4177:11292":{"crate_id":1,"path":["std","os","unix","fs","MetadataExt"],"kind":"trait"},"5:281:5801":{"crate_id":5,"path":["alloc","boxed","thin","drop","DropGuard"],"kind":"struct"},"24:5463:3222":{"crate_id":24,"path":["syn","generics","LifetimeParam"],"kind":"struct"},"6:5395:8034":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_ifru_map"],"kind":"struct"},"24:5699:3957":{"crate_id":24,"path":["syn","mac","MacroDelimiter"],"kind":"enum"},"2:42626:5509":{"crate_id":2,"path":["core","panicking","AssertKind"],"kind":"enum"},"10:44:7476":{"crate_id":10,"path":["adler","Adler32"],"kind":"struct"},"17:15981:6890":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation32"],"kind":"struct"},"16:7416:23947":{"crate_id":16,"path":["gimli","read","loclists","RawLocListIter"],"kind":"struct"},"11:830:11132":{"crate_id":11,"path":["hashbrown","map","ValuesMut"],"kind":"struct"},"17:15036:6611":{"crate_id":17,"path":["object","macho","FvmfileCommand"],"kind":"struct"},"24:5264:3925":{"crate_id":24,"path":["syn","expr","ExprClosure"],"kind":"struct"},"1:12472:1866":{"crate_id":1,"path":["std","u16"],"kind":"primitive"},"11:1601:23002":{"crate_id":11,"path":["hashbrown","rustc_entry","RustcVacantEntry"],"kind":"struct"},"5:888:5804":{"crate_id":5,"path":["alloc","collections","binary_heap","PeekMut"],"kind":"struct"},"17:11114:24028":{"crate_id":17,"path":["object","read","any","ComdatSectionIterator"],"kind":"struct"},"1:4333:11315":{"crate_id":1,"path":["std","os","unix","net","ancillary","ScmRights"],"kind":"struct"},"6:6790:8371":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","sifields_sigchld"],"kind":"struct"},"2:41500:4098":{"crate_id":2,"path":["core","iter","adapters","take","Take"],"kind":"struct"},"2:42843:94":{"crate_id":2,"path":["core","sync","atomic","AtomicU16"],"kind":"struct"},"24:3646:4262":{"crate_id":24,"path":["syn","token","Super"],"kind":"struct"},"17:11386:24045":{"crate_id":17,"path":["object","read","archive","Members"],"kind":"enum"},"17:14483:6508":{"crate_id":17,"path":["object","macho","Section64"],"kind":"struct"},"1:3446:11250":{"crate_id":1,"path":["std","io","stdio","Stderr"],"kind":"struct"},"6:8261:8586":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_condattr_t"],"kind":"struct"},"1:7801:10651":{"crate_id":1,"path":["std","panicking","begin_panic_handler","FormatStringPayload"],"kind":"struct"},"2:884:193":{"crate_id":2,"path":["core","num","nonzero","NonZero"],"kind":"struct"},"2:23368:34176":{"crate_id":2,"path":["core","num","flt2dec","Sign"],"kind":"enum"},"21:2352:3242":{"crate_id":21,"path":["proc_macro","bridge","Literal"],"kind":"struct"},"17:16632:7078":{"crate_id":17,"path":["object","xcoff","SymbolBytes"],"kind":"struct"},"16:3441:7181":{"crate_id":16,"path":["gimli","arch","LoongArch"],"kind":"struct"},"1:5362:207":{"crate_id":1,"path":["std","path","PathBuf"],"kind":"struct"},"2:23348:34152":{"crate_id":2,"path":["core","num","flt2dec","decoder","FullDecoded"],"kind":"enum"},"5:3084:2799":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Owned"],"kind":"enum"},"2:45437:9622":{"crate_id":2,"path":["core","escape","EscapeIterInner"],"kind":"struct"},"17:11630:6210":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbolTable"],"kind":"struct"},"16:6640:23940":{"crate_id":16,"path":["gimli","read","dwarf","DwarfSections"],"kind":"struct"},"16:3987:6098":{"crate_id":16,"path":["gimli","arch","PowerPc64"],"kind":"struct"},"1:11085:9120":{"crate_id":1,"path":["std","sys","pal","unix","process","process_common","ExitCode"],"kind":"struct"},"1:9460:165":{"crate_id":1,"path":["std","time","Instant"],"kind":"struct"},"17:15050:6612":{"crate_id":17,"path":["object","macho","EntryPointCommand"],"kind":"struct"},"17:15679:6812":{"crate_id":17,"path":["object","pe","ImageSymbolExBytes"],"kind":"struct"},"1:8583:11264":{"crate_id":1,"path":["std","net","Shutdown"],"kind":"enum"},"17:14152:6439":{"crate_id":17,"path":["object","elf","GnuHashHeader"],"kind":"struct"},"2:44327:8890":{"crate_id":2,"path":["core","str","error","Utf8Error"],"kind":"struct"},"24:1094:3948":{"crate_id":24,"path":["syn","generics","Turbofish"],"kind":"struct"},"1:11794:9144":{"crate_id":1,"path":["std","sys_common","wtf8","CodePoint"],"kind":"struct"},"17:12816:6274":{"crate_id":17,"path":["object","read","pe","export","Export"],"kind":"struct"},"24:3408:2941":{"crate_id":24,"path":["syn","token","Macro"],"kind":"struct"},"17:15064:6615":{"crate_id":17,"path":["object","macho","SourceVersionCommand"],"kind":"struct"},"6:5533:8098":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_nl"],"kind":"struct"},"1:3602:9098":{"crate_id":1,"path":["std","io","Read"],"kind":"trait"},"21:902:5622":{"crate_id":21,"path":["proc_macro","bridge","client","FreeFunctions"],"kind":"struct"},"2:23521:8639":{"crate_id":2,"path":["core","num","nonzero","private","NonZeroU32Inner"],"kind":"struct"},"11:685:3993":{"crate_id":11,"path":["hashbrown","map","IterMut"],"kind":"struct"},"1:1984:10641":{"crate_id":1,"path":["std","error","Report"],"kind":"struct"},"1:4495:11320":{"crate_id":1,"path":["std","os","unix","net","listener","UnixListener"],"kind":"struct"},"1:7335:10650":{"crate_id":1,"path":["std","sys","backtrace","_print","DisplayBacktrace"],"kind":"struct"},"11:1023:11138":{"crate_id":11,"path":["hashbrown","map","OccupiedEntry"],"kind":"struct"},"2:45103:9611":{"crate_id":2,"path":["core","str","CharEscapeUnicode"],"kind":"struct"},"1:4941:11305":{"crate_id":1,"path":["std","os","fd","raw","FromRawFd"],"kind":"trait"},"21:2702:2546":{"crate_id":21,"path":["proc_macro","Group"],"kind":"struct"},"2:4542:34864":{"crate_id":2,"path":["core","asserting","TryCaptureWithoutDebug"],"kind":"struct"},"2:32709:2713":{"crate_id":2,"path":["core","error","private","Internal"],"kind":"struct"},"11:2551:37543":{"crate_id":11,"path":["hashbrown","raw","Fallibility"],"kind":"enum"},"1:9344:30820":{"crate_id":1,"path":["std","sync","mpmc","list","Position"],"kind":"struct"},"17:16520:7034":{"crate_id":17,"path":["object","xcoff","AuxHeader32"],"kind":"struct"},"2:43957:8887":{"crate_id":2,"path":["core","slice","sort","stable","drift","DriftsortRun"],"kind":"struct"},"2:44381:9494":{"crate_id":2,"path":["core","str","iter","Split"],"kind":"struct"},"24:3731:2595":{"crate_id":24,"path":["syn","token","Union"],"kind":"struct"},"17:13169:24251":{"crate_id":17,"path":["object","read","xcoff","comdat","XcoffComdatSectionIterator"],"kind":"struct"},"5:7824:10634":{"crate_id":5,"path":["alloc","string","FromUtf16Error"],"kind":"struct"},"1:11272:28370":{"crate_id":1,"path":["std","sys","pal","unix","thread","cgroups","Cgroup"],"kind":"enum"},"17:13909:6383":{"crate_id":17,"path":["object","elf","Syminfo32"],"kind":"struct"},"17:13554:6315":{"crate_id":17,"path":["object","read","RelocationMapEntry"],"kind":"struct"},"16:8179:7332":{"crate_id":16,"path":["gimli","read","UnitOffset"],"kind":"struct"},"17:12762:24184":{"crate_id":17,"path":["object","read","pe","section","PeSection"],"kind":"struct"},"11:772:9457":{"crate_id":11,"path":["hashbrown","map","Keys"],"kind":"struct"},"2:6185:5825":{"crate_id":2,"path":["core","iter","adapters","filter_map","next_chunk","Guard"],"kind":"struct"},"6:5405:8040":{"crate_id":6,"path":["libc","unix","linux_like","linux","in6_ifreq"],"kind":"struct"},"16:8233:23956":{"crate_id":16,"path":["gimli","read","unit","UnitType"],"kind":"enum"},"2:41222:137":{"crate_id":2,"path":["core","iter","adapters","enumerate","Enumerate"],"kind":"struct"},"17:0:3750":{"crate_id":17,"path":["object"],"kind":"module"},"2:4589:5486":{"crate_id":2,"path":["core","async_iter","async_iter","AsyncIterator"],"kind":"trait"},"6:1657:7738":{"crate_id":6,"path":["libc","unix","linux_like","arpreq"],"kind":"struct"},"16:5417:7212":{"crate_id":16,"path":["gimli","constants","DwMacro"],"kind":"struct"},"17:10564:6189":{"crate_id":17,"path":["object","endian","U16Bytes"],"kind":"struct"},"1:2648:11246":{"crate_id":1,"path":["std","io","buffered","bufreader","BufReader"],"kind":"struct"},"17:13818:6370":{"crate_id":17,"path":["object","elf","SectionHeader64"],"kind":"struct"},"1:3539:4059":{"crate_id":1,"path":["std","io","util","Repeat"],"kind":"struct"},"1:8536:4085":{"crate_id":1,"path":["std","io","Chain"],"kind":"struct"},"2:47612:9020":{"crate_id":2,"path":["core","core_arch","x86","__m256i"],"kind":"struct"},"2:47347:9009":{"crate_id":2,"path":["core","core_arch","simd","i16x32"],"kind":"struct"},"17:16132:6943":{"crate_id":17,"path":["object","pe","ImageHotPatchInfo"],"kind":"struct"},"17:15665:6811":{"crate_id":17,"path":["object","pe","ImageSymbolEx"],"kind":"struct"},"16:8209:7163":{"crate_id":16,"path":["gimli","read","unit","DebugInfo"],"kind":"struct"},"2:43725:9555":{"crate_id":2,"path":["core","hash","sip","SipHasher24"],"kind":"struct"},"2:7829:4083":{"crate_id":2,"path":["core","iter","adapters","zip","TrustedRandomAccess"],"kind":"trait"},"1:925:9458":{"crate_id":1,"path":["std","collections","hash","map","Values"],"kind":"struct"},"2:22880:11508":{"crate_id":2,"path":["core","core_simd","simd","num","uint","SimdUint"],"kind":"trait"},"8:0:3742":{"crate_id":8,"path":["cfg_if"],"kind":"module"},"6:8255:8585":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_rwlockattr_t"],"kind":"struct"},"11:2323:11138":{"crate_id":11,"path":["hashbrown","table","OccupiedEntry"],"kind":"struct"},"5:1615:10759":{"crate_id":5,"path":["alloc","collections","btree","map","IntoValues"],"kind":"struct"},"24:4508:4288":{"crate_id":24,"path":["syn","token","Le"],"kind":"struct"},"17:15010:6609":{"crate_id":17,"path":["object","macho","SymsegCommand"],"kind":"struct"},"2:10545:209":{"crate_id":2,"path":["core","fmt","Pointer"],"kind":"trait"},"17:16026:6900":{"crate_id":17,"path":["object","pe","ImageEpilogueDynamicRelocationHeader"],"kind":"struct"},"1:12027:9145":{"crate_id":1,"path":["std","alloc","System"],"kind":"struct"},"17:16775:7112":{"crate_id":17,"path":["object","xcoff","BlockAux64"],"kind":"struct"},"17:13945:6390":{"crate_id":17,"path":["object","elf","Rela32"],"kind":"struct"},"6:5387:8029":{"crate_id":6,"path":["libc","unix","linux_like","linux","file_clone_range"],"kind":"struct"},"1:3913:11270":{"crate_id":1,"path":["std","net","tcp","TcpStream"],"kind":"struct"},"1:8031:5375":{"crate_id":1,"path":["std","thread","ThreadId"],"kind":"struct"},"2:3055:166":{"crate_id":2,"path":["core","convert","Into"],"kind":"trait"},"17:16323:7000":{"crate_id":17,"path":["object","pe","ImageFunctionEntry"],"kind":"struct"},"2:11581:3989":{"crate_id":2,"path":["core","slice","iter","Iter"],"kind":"struct"},"2:22706:11422":{"crate_id":2,"path":["core","core_simd","vector","SimdElement"],"kind":"trait"},"20:715:257":{"crate_id":20,"path":["proc_macro2","fallback","TokenStream"],"kind":"struct"},"1:4829:8472":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt","st_ctime"],"kind":"function"},"2:31503:199":{"crate_id":2,"path":["core","cmp","Ordering"],"kind":"enum"},"17:14055:6408":{"crate_id":17,"path":["object","elf","Verdef"],"kind":"struct"},"24:4694:4301":{"crate_id":24,"path":["syn","token","PlusEq"],"kind":"struct"},"16:6239:7219":{"crate_id":16,"path":["gimli","read","cfi","Augmentation"],"kind":"struct"},"24:3238:2571":{"crate_id":24,"path":["syn","token","Enum"],"kind":"struct"},"1:9182:9120":{"crate_id":1,"path":["std","process","ExitCode"],"kind":"struct"},"6:8296:8594":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_rwlock_t"],"kind":"struct"},"2:14214:118":{"crate_id":2,"path":["core","task","wake","Context"],"kind":"struct"},"11:1914:9461":{"crate_id":11,"path":["hashbrown","set","SymmetricDifference"],"kind":"struct"},"1:5865:223":{"crate_id":1,"path":["std","sync","mpsc","Receiver"],"kind":"struct"},"2:42305:11265":{"crate_id":2,"path":["core","net","ip_addr","Ipv6MulticastScope"],"kind":"enum"},"17:14773:6569":{"crate_id":17,"path":["object","macho","DylibModule64"],"kind":"struct"},"20:113:9234":{"crate_id":20,"path":["proc_macro2","rcvec","RcVec"],"kind":"struct"},"2:41273:4091":{"crate_id":2,"path":["core","iter","adapters","inspect","Inspect"],"kind":"struct"},"6:4890:7841":{"crate_id":6,"path":["libc","unix","linux_like","linux","cpu_set_t"],"kind":"struct"},"24:5709:3958":{"crate_id":24,"path":["syn","op","BinOp"],"kind":"enum"},"24:5422:63":{"crate_id":24,"path":["syn","expr","parsing","kw","raw"],"kind":"struct"},"11:123:5792":{"crate_id":11,"path":["hashbrown","raw","RawTable"],"kind":"struct"},"24:6021:3966":{"crate_id":24,"path":["syn","ty","BareVariadic"],"kind":"struct"},"2:47193:8976":{"crate_id":2,"path":["core","core_arch","simd","i8x64"],"kind":"struct"},"2:7895:34631":{"crate_id":2,"path":["core","iter","adapters","GenericShunt"],"kind":"struct"},"17:322:37591":{"crate_id":17,"path":["object","read","util","DebugLen"],"kind":"struct"},"2:14349:5495":{"crate_id":2,"path":["core","alloc","Allocator"],"kind":"trait"},"2:23139:9504":{"crate_id":2,"path":["core","num","bignum","Big32x40"],"kind":"struct"},"16:7949:7170":{"crate_id":16,"path":["gimli","read","pubnames","DebugPubNames"],"kind":"struct"},"16:6890:7158":{"crate_id":16,"path":["gimli","read","aranges","DebugAranges"],"kind":"struct"},"16:6822:23943":{"crate_id":16,"path":["gimli","read","abbrev","AbbreviationsCacheStrategy"],"kind":"enum"},"24:1007:6009":{"crate_id":24,"path":["syn","ext","private","PeekFn"],"kind":"struct"},"24:2179:2551":{"crate_id":24,"path":["syn","punctuated","Punctuated"],"kind":"struct"},"6:4929:7861":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_id"],"kind":"struct"},"15:394:23038":{"crate_id":15,"path":["addr2line","DebugFile"],"kind":"enum"},"1:12403:10367":{"crate_id":1,"path":["std","backtrace_rs","symbolize","gimli","parse_running_mmaps","MapsEntry"],"kind":"struct"},"6:6731:8350":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_umem_reg"],"kind":"struct"},"1:2331:5528":{"crate_id":1,"path":["std","fs","read"],"kind":"function"},"6:6740:8353":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_umem_reg_v1"],"kind":"struct"},"1:2020:802":{"crate_id":1,"path":["std","ffi"],"kind":"module"},"24:5276:3910":{"crate_id":24,"path":["syn","expr","ExprField"],"kind":"struct"},"17:13398:6308":{"crate_id":17,"path":["object","read","ObjectMapEntry"],"kind":"struct"},"17:13592:6320":{"crate_id":17,"path":["object","read","CompressedFileRange"],"kind":"struct"},"1:9316:5366":{"crate_id":1,"path":["std","sync","mpmc","context","Inner"],"kind":"struct"},"17:16297:6991":{"crate_id":17,"path":["object","pe","ImageCoffSymbolsHeader"],"kind":"struct"},"2:3185:11178":{"crate_id":2,"path":["core","error","Request"],"kind":"struct"},"2:22147:11215":{"crate_id":2,"path":["core","core_simd","lane_count","sealed","Sealed"],"kind":"trait"},"1:6746:5896":{"crate_id":1,"path":["std","sync","once_lock","OnceLock"],"kind":"struct"},"17:15844:6852":{"crate_id":17,"path":["object","pe","ImageThunkData32"],"kind":"struct"},"5:1626:213":{"crate_id":5,"path":["alloc","collections","btree","map","Range"],"kind":"struct"},"24:5561:2897":{"crate_id":24,"path":["syn","lit","Lit"],"kind":"enum"},"1:11053:11367":{"crate_id":1,"path":["std","sys","pal","unix","process","process_common","Stdio"],"kind":"enum"},"24:4992:3905":{"crate_id":24,"path":["syn","data","FieldsUnnamed"],"kind":"struct"},"6:7586:8559":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user_fpregs_struct"],"kind":"struct"},"24:5989:3974":{"crate_id":24,"path":["syn","ty","TypeParen"],"kind":"struct"},"1:1626:5586":{"crate_id":1,"path":["std","collections","hash","set","Drain"],"kind":"struct"},"24:5860:3961":{"crate_id":24,"path":["syn","path","ParenthesizedGenericArguments"],"kind":"struct"},"2:6262:4089":{"crate_id":2,"path":["core","iter","adapters","flatten","FlatMap"],"kind":"struct"},"16:6658:10718":{"crate_id":16,"path":["gimli","read","dwarf","Dwarf"],"kind":"struct"},"2:46821:8946":{"crate_id":2,"path":["core","core_arch","simd","m32x4"],"kind":"struct"},"17:16171:6958":{"crate_id":17,"path":["object","pe","ImageArmRuntimeFunctionEntry"],"kind":"struct"},"2:40412:5158":{"crate_id":2,"path":["core","ascii","ascii_char","AsciiChar"],"kind":"enum"},"1:2480:5511":{"crate_id":1,"path":["std","fs","metadata"],"kind":"function"},"2:43481:7354":{"crate_id":2,"path":["core","fmt","rt","Flag"],"kind":"enum"},"2:40089:213":{"crate_id":2,"path":["core","ops","range","Range"],"kind":"struct"},"2:23012:11215":{"crate_id":2,"path":["core","core_simd","simd","ptr","sealed","Sealed"],"kind":"trait"},"16:7168:7259":{"crate_id":16,"path":["gimli","read","line","LineRow"],"kind":"struct"},"9:355:22934":{"crate_id":9,"path":["miniz_oxide","inflate","TINFLStatus"],"kind":"enum"},"2:44990:9605":{"crate_id":2,"path":["core","str","lossy","Utf8Chunk"],"kind":"struct"},"2:5468:996":{"crate_id":2,"path":["core","iter"],"kind":"module"},"24:5313:3912":{"crate_id":24,"path":["syn","expr","ExprMacro"],"kind":"struct"},"24:5022:3906":{"crate_id":24,"path":["syn","derive","DataEnum"],"kind":"struct"},"1:327:1806":{"crate_id":1,"path":["std","thread"],"kind":"module"},"2:42417:34579":{"crate_id":2,"path":["core","net","parser","AddrKind"],"kind":"enum"},"17:14917:6588":{"crate_id":17,"path":["object","macho","EncryptionInfoCommand64"],"kind":"struct"},"2:41282:4101":{"crate_id":2,"path":["core","iter","adapters","intersperse","Intersperse"],"kind":"struct"},"24:5293:3911":{"crate_id":24,"path":["syn","expr","ExprIndex"],"kind":"struct"},"21:420:5789":{"crate_id":21,"path":["proc_macro","bridge","server","RunningSameThreadGuard"],"kind":"struct"},"6:538:7599":{"crate_id":6,"path":["libc","unix","pollfd"],"kind":"struct"},"24:5026:2817":{"crate_id":24,"path":["syn","derive","DataUnion"],"kind":"struct"},"1:4943:11306":{"crate_id":1,"path":["std","os","fd","raw","IntoRawFd"],"kind":"trait"},"11:1888:5586":{"crate_id":11,"path":["hashbrown","set","Drain"],"kind":"struct"},"5:2265:9464":{"crate_id":5,"path":["alloc","collections","btree","merge_iter","MergeIterInner"],"kind":"struct"},"16:2640:7139":{"crate_id":16,"path":["gimli","common","DebugLineStrOffset"],"kind":"struct"},"2:41049:9531":{"crate_id":2,"path":["core","ffi","c_str","FromBytesWithNulError"],"kind":"struct"},"24:4805:4309":{"crate_id":24,"path":["syn","token","ShrEq"],"kind":"struct"},"5:7531:5496":{"crate_id":5,"path":["alloc","alloc","Global"],"kind":"struct"},"2:22:834":{"crate_id":2,"path":["core","format_args"],"kind":"macro"},"18:598:6014":{"crate_id":18,"path":["memchr","memmem","twoway","Shift"],"kind":"enum"},"1:7951:5904":{"crate_id":1,"path":["std","backtrace_rs","print","BacktraceFrameFmt"],"kind":"struct"},"2:8866:153":{"crate_id":2,"path":["core","iter","traits","marker","FusedIterator"],"kind":"trait"},"24:5353:3916":{"crate_id":24,"path":["syn","expr","ExprStruct"],"kind":"struct"},"24:3697:2541":{"crate_id":24,"path":["syn","token","Type"],"kind":"struct"},"24:3510:4258":{"crate_id":24,"path":["syn","token","Priv"],"kind":"struct"},"6:5482:8087":{"crate_id":6,"path":["libc","unix","linux_like","linux","rlimit64"],"kind":"struct"},"6:4875:7834":{"crate_id":6,"path":["libc","unix","linux_like","linux","fsid_t"],"kind":"struct"},"24:5980:3970":{"crate_id":24,"path":["syn","ty","TypeImplTrait"],"kind":"struct"},"24:2381:3991":{"crate_id":24,"path":["syn","punctuated","PrivateIter"],"kind":"struct"},"2:22275:8616":{"crate_id":2,"path":["core","core_simd","masks","Mask"],"kind":"struct"},"21:1992:5607":{"crate_id":21,"path":["proc_macro","bridge","LitKind"],"kind":"enum"},"17:14127:6435":{"crate_id":17,"path":["object","elf","NoteHeader64"],"kind":"struct"},"2:40982:9528":{"crate_id":2,"path":["core","char","ToLowercase"],"kind":"struct"},"2:9661:16583":{"crate_id":2,"path":["core","panicking","assert_matches_failed","Pattern"],"kind":"struct"},"17:5305:24228":{"crate_id":17,"path":["object","read","xcoff","relocation","XcoffRelocationIterator"],"kind":"struct"},"5:39:5497":{"crate_id":5,"path":["alloc","raw_vec","RawVec"],"kind":"struct"},"22:0:3873":{"crate_id":22,"path":["unicode_ident"],"kind":"module"},"6:6748:8354":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_statistics"],"kind":"struct"},"16:7938:9429":{"crate_id":16,"path":["gimli","read","pubnames","PubNamesEntry"],"kind":"struct"},"24:53:2634":{"crate_id":24,"path":["syn","token"],"kind":"module"},"2:2105:685":{"crate_id":2,"path":["core","mem","drop"],"kind":"function"},"1:5666:11366":{"crate_id":1,"path":["std","process","ChildStderr"],"kind":"struct"},"24:341:4125":{"crate_id":24,"path":["syn","buffer","Cursor"],"kind":"struct"},"1:9256:11390":{"crate_id":1,"path":["std","sync","mpsc","RecvTimeoutError"],"kind":"enum"},"17:14001:6402":{"crate_id":17,"path":["object","elf","ProgramHeader64"],"kind":"struct"},"2:41087:3531":{"crate_id":2,"path":["core","ffi","c_str","Bytes"],"kind":"struct"},"2:43754:8883":{"crate_id":2,"path":["core","hash","sip","State"],"kind":"struct"},"17:11691:24054":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdat"],"kind":"struct"},"24:5259:3909":{"crate_id":24,"path":["syn","expr","ExprCast"],"kind":"struct"},"17:12886:9290":{"crate_id":17,"path":["object","read","pe","import","DelayLoadImportTable"],"kind":"struct"},"6:5036:7912":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_ff_upload"],"kind":"struct"},"2:11434:243":{"crate_id":2,"path":["core","slice","index","SliceIndex"],"kind":"trait"},"2:22798:11506":{"crate_id":2,"path":["core","core_simd","simd","num","float","SimdFloat"],"kind":"trait"},"24:3017:4238":{"crate_id":24,"path":["syn","token","Async"],"kind":"struct"},"17:15973:6889":{"crate_id":17,"path":["object","pe","ImageDynamicRelocationTable"],"kind":"struct"},"2:41335:4095":{"crate_id":2,"path":["core","iter","adapters","scan","Scan"],"kind":"struct"},"17:10793:6081":{"crate_id":17,"path":["object","read","read_cache","ReadCacheRange"],"kind":"struct"},"1:12476:985":{"crate_id":1,"path":["std","isize"],"kind":"primitive"},"1:8629:11321":{"crate_id":1,"path":["std","os","unix","net","ancillary","AncillaryError"],"kind":"enum"},"16:8151:7175":{"crate_id":16,"path":["gimli","read","str","DebugStrOffsets"],"kind":"struct"},"18:765:28286":{"crate_id":18,"path":["memchr","memmem","SearcherRevKind"],"kind":"enum"},"2:43974:9560":{"crate_id":2,"path":["core","slice","ascii","EscapeAscii"],"kind":"struct"},"11:2121:9428":{"crate_id":11,"path":["hashbrown","set","Entry"],"kind":"enum"},"2:22573:8617":{"crate_id":2,"path":["core","core_simd","vector","Simd"],"kind":"struct"},"2:45173:9618":{"crate_id":2,"path":["core","time","TryFromFloatSecsError"],"kind":"struct"},"6:5271:7984":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_extended_err"],"kind":"struct"},"6:6777:8364":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","iocb"],"kind":"struct"},"2:4906:4156":{"crate_id":2,"path":["core","cell","Ref"],"kind":"struct"},"16:6205:23936":{"crate_id":16,"path":["gimli","read","cfi","CieOrFde"],"kind":"enum"},"2:12462:5534":{"crate_id":2,"path":["core","slice","raw","from_raw_parts"],"kind":"function"},"1:12463:755":{"crate_id":1,"path":["std","f32"],"kind":"primitive"},"24:2356:3988":{"crate_id":24,"path":["syn","punctuated","IntoIter"],"kind":"struct"},"2:46416:8916":{"crate_id":2,"path":["core","core_arch","simd","u16x4"],"kind":"struct"},"24:5518:3217":{"crate_id":24,"path":["syn","generics","TraitBoundModifier"],"kind":"enum"},"1:1085:9428":{"crate_id":1,"path":["std","collections","hash","map","Entry"],"kind":"enum"},"17:13266:24034":{"crate_id":17,"path":["object","read","ObjectKind"],"kind":"enum"},"1:8201:11210":{"crate_id":1,"path":["std","fs","ReadDir"],"kind":"struct"},"16:7030:7236":{"crate_id":16,"path":["gimli","read","index","UnitIndexSection"],"kind":"struct"},"24:3306:4248":{"crate_id":24,"path":["syn","token","For"],"kind":"struct"},"16:3587:7182":{"crate_id":16,"path":["gimli","arch","MIPS"],"kind":"struct"},"24:4578:4293":{"crate_id":24,"path":["syn","token","Not"],"kind":"struct"},"21:0:1372":{"crate_id":21,"path":["proc_macro"],"kind":"module"},"5:3930:5584":{"crate_id":5,"path":["alloc","collections","linked_list","ExtractIf"],"kind":"struct"},"1:8010:11215":{"crate_id":1,"path":["std","sealed","Sealed"],"kind":"trait"},"24:2658:6020":{"crate_id":24,"path":["syn","thread","ThreadBound"],"kind":"struct"},"23:150:4767":{"crate_id":23,"path":["quote","__private","ThereIsNoIteratorInRepetition"],"kind":"struct"},"2:44689:9521":{"crate_id":2,"path":["core","str","iter","EscapeDefault"],"kind":"struct"},"18:670:28288":{"crate_id":18,"path":["memchr","memmem","FindRevIter"],"kind":"struct"},"16:7716:37575":{"crate_id":16,"path":["gimli","read","op","OperationEvaluationResult"],"kind":"enum"},"2:44367:3531":{"crate_id":2,"path":["core","str","iter","Bytes"],"kind":"struct"},"16:6852:9375":{"crate_id":16,"path":["gimli","read","abbrev","Abbreviation"],"kind":"struct"},"1:8572:11268":{"crate_id":1,"path":["std","net","tcp","Incoming"],"kind":"struct"},"6:6882:8392":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","sysinfo"],"kind":"struct"},"5:3337:9459":{"crate_id":5,"path":["alloc","collections","btree","set","Intersection"],"kind":"struct"},"3:0:516":{"crate_id":3,"path":["compiler_builtins"],"kind":"module"},"5:7801:248":{"crate_id":5,"path":["alloc","string","String"],"kind":"struct"},"2:3551:145":{"crate_id":2,"path":["core","ops","function","FnMut"],"kind":"trait"},"5:1249:36942":{"crate_id":5,"path":["alloc","collections","btree","dedup_sorted_iter","DedupSortedIter"],"kind":"struct"},"15:327:10734":{"crate_id":15,"path":["addr2line","RangeAttributes"],"kind":"struct"},"14:165:23009":{"crate_id":14,"path":["rustc_demangle","DemangleStyle"],"kind":"enum"},"17:10861:142":{"crate_id":17,"path":["object","read","any","File"],"kind":"enum"},"17:16179:6961":{"crate_id":17,"path":["object","pe","ImageArm64RuntimeFunctionEntry"],"kind":"struct"},"24:4390:4280":{"crate_id":24,"path":["syn","token","DotDot"],"kind":"struct"},"5:3303:9460":{"crate_id":5,"path":["alloc","collections","btree","set","Difference"],"kind":"struct"},"17:14573:6520":{"crate_id":17,"path":["object","macho","SubClientCommand"],"kind":"struct"},"5:0:315":{"crate_id":5,"path":["alloc"],"kind":"module"},"24:5985:3972":{"crate_id":24,"path":["syn","ty","TypeMacro"],"kind":"struct"},"18:698:9246":{"crate_id":18,"path":["memchr","memmem","FinderBuilder"],"kind":"struct"},"17:14099:6425":{"crate_id":17,"path":["object","elf","Vernaux"],"kind":"struct"},"9:328:7513":{"crate_id":9,"path":["miniz_oxide","inflate","core","LocalVars"],"kind":"struct"},"1:6881:10768":{"crate_id":1,"path":["std","sync","reentrant_lock","ReentrantLock"],"kind":"struct"},"16:8723:141":{"crate_id":16,"path":["gimli","read","Error"],"kind":"enum"},"1:11839:9653":{"crate_id":1,"path":["std","sys_common","wtf8","EncodeWide"],"kind":"struct"},"16:7883:7323":{"crate_id":16,"path":["gimli","read","op","Expression"],"kind":"struct"},"20:792:257":{"crate_id":20,"path":["proc_macro2","imp","TokenStream"],"kind":"enum"},"17:11878:6216":{"crate_id":17,"path":["object","read","elf","symbol","SymbolTable"],"kind":"struct"},"21:2504:5608":{"crate_id":21,"path":["proc_macro","bridge","ExpnGlobals"],"kind":"struct"},"2:3513:127":{"crate_id":2,"path":["core","ops","deref","Deref"],"kind":"trait"},"2:23026:11502":{"crate_id":2,"path":["core","core_simd","simd","cmp","eq","SimdPartialEq"],"kind":"trait"},"24:2329:3987":{"crate_id":24,"path":["syn","punctuated","IntoPairs"],"kind":"struct"},"1:6895:5897":{"crate_id":1,"path":["std","sync","reentrant_lock","ReentrantLockGuard"],"kind":"struct"},"1:2754:10645":{"crate_id":1,"path":["std","io","buffered","bufwriter","WriterPanicked"],"kind":"struct"},"17:11678:24055":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdatIterator"],"kind":"struct"},"16:7508:9423":{"crate_id":16,"path":["gimli","read","lookup","LookupEntryIter"],"kind":"struct"},"24:644:141":{"crate_id":24,"path":["syn","error","Error"],"kind":"struct"},"13:0:3740":{"crate_id":13,"path":["std_detect"],"kind":"module"},"18:113:28277":{"crate_id":18,"path":["memchr","memchr","iter","Memchr3"],"kind":"struct"},"1:9212:9121":{"crate_id":1,"path":["std","sync","mpsc","SendError"],"kind":"struct"},"1:4899:11344":{"crate_id":1,"path":["std","os","linux","process","ChildExt"],"kind":"trait"},"2:42683:3989":{"crate_id":2,"path":["core","result","Iter"],"kind":"struct"},"16:6837:10733":{"crate_id":16,"path":["gimli","read","abbrev","AbbreviationsCache"],"kind":"struct"},"18:718:6076":{"crate_id":18,"path":["memchr","memmem","NeedleInfo"],"kind":"struct"},"17:14507:6509":{"crate_id":17,"path":["object","macho","Fvmlib"],"kind":"struct"},"6:5676:8165":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_can_addr"],"kind":"union"},"21:2621:3988":{"crate_id":21,"path":["proc_macro","token_stream","IntoIter"],"kind":"struct"},"2:22167:8616":{"crate_id":2,"path":["core","core_simd","masks","mask_impl","Mask"],"kind":"struct"},"24:5369:3940":{"crate_id":24,"path":["syn","expr","ExprTuple"],"kind":"struct"},"1:12477:1946":{"crate_id":1,"path":["std","usize"],"kind":"primitive"},"1:1619:3989":{"crate_id":1,"path":["std","collections","hash","set","Iter"],"kind":"struct"},"6:4869:7833":{"crate_id":6,"path":["libc","unix","linux_like","linux","itimerspec"],"kind":"struct"},"1:3307:33948":{"crate_id":1,"path":["std","io","stdio","StdinRaw"],"kind":"struct"},"16:6337:9330":{"crate_id":16,"path":["gimli","read","cfi","FrameDescriptionEntry"],"kind":"struct"},"6:6876:8391":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","sigset_t"],"kind":"struct"},"6:5019:7904":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_rumble_effect"],"kind":"struct"},"2:44784:9584":{"crate_id":2,"path":["core","str","pattern","CharSearcher"],"kind":"struct"},"2:22932:5522":{"crate_id":2,"path":["core","core_simd","simd","ptr","const_ptr","SimdConstPtr","with_exposed_provenance"],"kind":"function"},"1:12471:1884":{"crate_id":1,"path":["std","u8"],"kind":"primitive"},"17:15731:6827":{"crate_id":17,"path":["object","pe","ImageAuxSymbolWeak"],"kind":"struct"},"17:13515:24036":{"crate_id":17,"path":["object","read","RelocationTarget"],"kind":"enum"},"17:15602:6797":{"crate_id":17,"path":["object","pe","AnonObjectHeaderBigobj"],"kind":"struct"},"1:8672:8457":{"crate_id":1,"path":["std","os","linux","raw","arch","stat"],"kind":"struct"},"6:6708:8344":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_mmap_offsets"],"kind":"struct"},"1:11021:28365":{"crate_id":1,"path":["std","sys","pal","unix","kernel_copy","FdHandle"],"kind":"enum"},"17:13692:6334":{"crate_id":17,"path":["object","archive","AixFileHeader"],"kind":"struct"},"17:11432:24047":{"crate_id":17,"path":["object","read","archive","MemberHeader"],"kind":"enum"},"6:6672:8330":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_seccomp"],"kind":"struct"},"1:8358:30843":{"crate_id":1,"path":["std","io","error","SimpleMessage"],"kind":"struct"},"2:42530:176":{"crate_id":2,"path":["core","option","Item"],"kind":"struct"},"1:10700:5907":{"crate_id":1,"path":["std","sys","pal","unix","stack_overflow","Handler"],"kind":"struct"},"17:14560:6518":{"crate_id":17,"path":["object","macho","SubFrameworkCommand"],"kind":"struct"},"24:1346:9196":{"crate_id":24,"path":["syn","lit","LitRepr"],"kind":"struct"},"2:8875:4069":{"crate_id":2,"path":["core","iter","traits","marker","TrustedStep"],"kind":"trait"},"1:9746:11210":{"crate_id":1,"path":["std","sys","pal","unix","fs","ReadDir"],"kind":"struct"},"1:9356:2552":{"crate_id":1,"path":["std","sync","mpmc","select","Token"],"kind":"struct"},"1:4171:11291":{"crate_id":1,"path":["std","os","unix","fs","OpenOptionsExt"],"kind":"trait"},"5:3095:28328":{"crate_id":5,"path":["alloc","collections","btree","node","marker","ValMut"],"kind":"struct"},"2:43772:9558":{"crate_id":2,"path":["core","hash","sip","Sip24Rounds"],"kind":"struct"},"16:6389:23937":{"crate_id":16,"path":["gimli","read","cfi","UnwindTable"],"kind":"struct"},"2:10168:34541":{"crate_id":2,"path":["core","fmt","builders","PadAdapter"],"kind":"struct"},"6:1727:7767":{"crate_id":6,"path":["libc","unix","linux_like","sigevent"],"kind":"struct"},"2:30862:11272":{"crate_id":2,"path":["core","num","FpCategory"],"kind":"enum"},"2:38654:6033":{"crate_id":2,"path":["core","ops","bit","BitAndAssign"],"kind":"trait"},"2:2209:5511":{"crate_id":2,"path":["core","ptr","metadata","metadata"],"kind":"function"},"11:1049:11139":{"crate_id":11,"path":["hashbrown","map","VacantEntry"],"kind":"struct"},"2:10539:3159":{"crate_id":2,"path":["core","fmt","Binary"],"kind":"trait"},"2:22842:11507":{"crate_id":2,"path":["core","core_simd","simd","num","int","SimdInt"],"kind":"trait"},"1:11147:5910":{"crate_id":1,"path":["std","sys","pal","unix","process","process_inner","posix_spawn","PosixSpawnattr"],"kind":"struct"},"16:6028:7157":{"crate_id":16,"path":["gimli","read","addr","DebugAddr"],"kind":"struct"},"1:1635:9459":{"crate_id":1,"path":["std","collections","hash","set","Intersection"],"kind":"struct"},"17:13306:6305":{"crate_id":17,"path":["object","read","SymbolIndex"],"kind":"struct"},"17:12625:6266":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbolTable"],"kind":"struct"},"17:10332:24017":{"crate_id":17,"path":["object","common","RelocationEncoding"],"kind":"enum"},"11:0:3745":{"crate_id":11,"path":["hashbrown"],"kind":"module"},"17:15905:6868":{"crate_id":17,"path":["object","pe","ImageDelayloadDescriptor"],"kind":"struct"},"17:13427:6309":{"crate_id":17,"path":["object","read","ObjectMapFile"],"kind":"struct"},"6:5586:8122":{"crate_id":6,"path":["libc","unix","linux_like","linux","af_alg_iv"],"kind":"struct"},"5:7540:3988":{"crate_id":5,"path":["alloc","collections","binary_heap","IntoIter"],"kind":"struct"},"24:649:6008":{"crate_id":24,"path":["syn","error","SpanRange"],"kind":"struct"},"16:4983:7199":{"crate_id":16,"path":["gimli","constants","DwVirtuality"],"kind":"struct"},"1:9229:9122":{"crate_id":1,"path":["std","sync","mpsc","RecvError"],"kind":"struct"},"6:4829:7800":{"crate_id":6,"path":["libc","unix","linux_like","linux","dqblk"],"kind":"struct"},"1:8235:143":{"crate_id":1,"path":["std","fs","FileType"],"kind":"struct"},"16:6064:7162":{"crate_id":16,"path":["gimli","read","cfi","EhFrameHdr"],"kind":"struct"},"16:4873:7195":{"crate_id":16,"path":["gimli","constants","DwDs"],"kind":"struct"},"24:5399:3918":{"crate_id":24,"path":["syn","expr","FieldValue"],"kind":"struct"},"24:4426:138":{"crate_id":24,"path":["syn","token","Eq"],"kind":"struct"},"2:23054:11503":{"crate_id":2,"path":["core","core_simd","simd","cmp","ord","SimdPartialOrd"],"kind":"trait"},"2:11878:9572":{"crate_id":2,"path":["core","slice","iter","RSplitN"],"kind":"struct"},"2:43030:91":{"crate_id":2,"path":["core","sync","atomic","AtomicIsize"],"kind":"struct"},"24:5607:2764":{"crate_id":24,"path":["syn","lit","LitStr"],"kind":"struct"},"2:22918:11509":{"crate_id":2,"path":["core","core_simd","simd","ptr","const_ptr","SimdConstPtr"],"kind":"trait"},"2:12424:16570":{"crate_id":2,"path":["core","slice","iter","ChunkByMut"],"kind":"struct"},"24:3748:4264":{"crate_id":24,"path":["syn","token","Unsafe"],"kind":"struct"},"2:43202:3159":{"crate_id":2,"path":["core","fmt","num","Binary"],"kind":"struct"},"6:6521:8249":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_pktinfo"],"kind":"struct"},"16:903:37592":{"crate_id":16,"path":["gimli","read","endian_slice","DebugByte"],"kind":"struct"},"17:15549:6787":{"crate_id":17,"path":["object","pe","ImageRomHeaders"],"kind":"struct"},"17:11805:24089":{"crate_id":17,"path":["object","read","elf","segment","ElfSegmentIterator"],"kind":"struct"},"6:6902:8406":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","msqid_ds"],"kind":"struct"},"24:3374:4252":{"crate_id":24,"path":["syn","token","Let"],"kind":"struct"},"2:11785:9497":{"crate_id":2,"path":["core","slice","iter","RSplit"],"kind":"struct"},"24:2154:11064":{"crate_id":24,"path":["syn","print","TokensOrDefault"],"kind":"struct"},"17:11457:6206":{"crate_id":17,"path":["object","read","archive","ArchiveOffset"],"kind":"struct"},"16:6098:23934":{"crate_id":16,"path":["gimli","read","cfi","EhHdrTableIter"],"kind":"struct"},"17:15351:6683":{"crate_id":17,"path":["object","pe","ImageVxdHeader"],"kind":"struct"},"6:6443:8215":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__timeval"],"kind":"struct"},"24:4781:4307":{"crate_id":24,"path":["syn","token","ShlEq"],"kind":"struct"},"17:10630:6191":{"crate_id":17,"path":["object","endian","U64Bytes"],"kind":"struct"},"23:407:4958":{"crate_id":23,"path":["quote","__private","RepInterp"],"kind":"struct"},"17:13193:24221":{"crate_id":17,"path":["object","read","xcoff","segment","XcoffSegment"],"kind":"struct"},"6:5325:8009":{"crate_id":6,"path":["libc","unix","linux_like","linux","seccomp_data"],"kind":"struct"},"24:4846:4312":{"crate_id":24,"path":["syn","token","Star"],"kind":"struct"},"2:44206:9500":{"crate_id":2,"path":["core","slice","iter","ChunksExact"],"kind":"struct"},"17:11958:24084":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdatIterator"],"kind":"struct"},"2:10748:156":{"crate_id":2,"path":["core","hash","Hash"],"kind":"trait"},"5:4998:220":{"crate_id":5,"path":["alloc","rc","Rc"],"kind":"struct"},"17:11864:24086":{"crate_id":17,"path":["object","read","elf","section","ElfSection"],"kind":"struct"},"9:390:22920":{"crate_id":9,"path":["miniz_oxide","MZFlush"],"kind":"enum"},"2:34902:4306":{"crate_id":2,"path":["core","ops","bit","Shl"],"kind":"trait"},"11:1158:10632":{"crate_id":11,"path":["hashbrown","map","OccupiedError"],"kind":"struct"},"17:472:24006":{"crate_id":17,"path":["object","read","any","Segment"],"kind":"struct"},"24:2500:3179":{"crate_id":24,"path":["syn","punctuated","Pair"],"kind":"enum"},"17:13854:6375":{"crate_id":17,"path":["object","elf","CompressionHeader64"],"kind":"struct"},"6:6480:8229":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","termios"],"kind":"struct"},"17:14947:6591":{"crate_id":17,"path":["object","macho","BuildVersionCommand"],"kind":"struct"},"6:5319:8008":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_fprog"],"kind":"struct"},"24:5806:206":{"crate_id":24,"path":["syn","path","Path"],"kind":"struct"},"16:8636:23960":{"crate_id":16,"path":["gimli","read","value","ValueType"],"kind":"enum"},"2:46587:8934":{"crate_id":2,"path":["core","core_arch","simd","u16x8"],"kind":"struct"},"6:5375:8025":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlmsgerr"],"kind":"struct"},"15:306:23029":{"crate_id":15,"path":["addr2line","LocationRangeUnitIter"],"kind":"struct"},"21:2682:4173":{"crate_id":21,"path":["proc_macro","SourceFile"],"kind":"struct"},"17:15410:6735":{"crate_id":17,"path":["object","pe","MaskedRichHeaderEntry"],"kind":"struct"},"24:4793:4308":{"crate_id":24,"path":["syn","token","Shr"],"kind":"struct"},"11:809:5584":{"crate_id":11,"path":["hashbrown","map","ExtractIf"],"kind":"struct"},"1:11782:9647":{"crate_id":1,"path":["std","sys_common","process","CommandEnv"],"kind":"struct"},"2:34104:6029":{"crate_id":2,"path":["core","ops","arith","MulAssign"],"kind":"trait"},"2:40219:16675":{"crate_id":2,"path":["core","ops","try_trait","Yeet"],"kind":"struct"},"1:8553:3531":{"crate_id":1,"path":["std","io","Bytes"],"kind":"struct"},"2:44799:9590":{"crate_id":2,"path":["core","str","pattern","MultiCharEqSearcher"],"kind":"struct"},"17:14796:6570":{"crate_id":17,"path":["object","macho","DylibReference"],"kind":"struct"},"1:8727:4742":{"crate_id":1,"path":["std","panic","PanicHookInfo"],"kind":"struct"},"5:4132:5586":{"crate_id":5,"path":["alloc","collections","vec_deque","drain","Drain"],"kind":"struct"},"21:590:4175":{"crate_id":21,"path":["proc_macro","diagnostic","MultiSpan"],"kind":"trait"},"23:504:5067":{"crate_id":23,"path":["quote","__private","IdentFragmentAdapter"],"kind":"struct"},"17:15496:6781":{"crate_id":17,"path":["object","pe","ImageOptionalHeader64"],"kind":"struct"},"24:1922:4124":{"crate_id":24,"path":["syn","parse","Nothing"],"kind":"struct"},"2:42547:3993":{"crate_id":2,"path":["core","option","IterMut"],"kind":"struct"},"17:13145:24218":{"crate_id":17,"path":["object","read","xcoff","comdat","XcoffComdatIterator"],"kind":"struct"},"16:8669:3320":{"crate_id":16,"path":["gimli","read","value","Value"],"kind":"enum"},"6:7368:8457":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stat"],"kind":"struct"},"1:10771:11252":{"crate_id":1,"path":["std","sys","pal","unix","stdio","Stdin"],"kind":"struct"},"21:2687:2626":{"crate_id":21,"path":["proc_macro","TokenTree"],"kind":"enum"},"17:12135:9269":{"crate_id":17,"path":["object","read","elf","version","VernauxIterator"],"kind":"struct"},"2:14237:5871":{"crate_id":2,"path":["core","task","wake","Waker"],"kind":"struct"},"17:12699:24209":{"crate_id":17,"path":["object","read","pe","file","PeComdat"],"kind":"struct"},"24:88:4454":{"crate_id":24,"path":["syn","token","private","CustomToken"],"kind":"trait"},"5:1229:37341":{"crate_id":5,"path":["alloc","collections","btree","borrow","DormantMutRef"],"kind":"struct"},"24:5233:3921":{"crate_id":24,"path":["syn","expr","ExprAsync"],"kind":"struct"},"17:583:24007":{"crate_id":17,"path":["object","read","any","Comdat"],"kind":"struct"},"14:40:2558":{"crate_id":14,"path":["rustc_demangle","v0","Ident"],"kind":"struct"},"24:2647:11215":{"crate_id":24,"path":["syn","spanned","private","Sealed"],"kind":"trait"},"16:5689:7215":{"crate_id":16,"path":["gimli","constants","DwEhPe"],"kind":"struct"},"17:15829:6850":{"crate_id":17,"path":["object","pe","ImageImportByName"],"kind":"struct"},"16:5742:6188":{"crate_id":16,"path":["gimli","endianity","BigEndian"],"kind":"struct"},"1:4569:11313":{"crate_id":1,"path":["std","os","unix","net","stream","UnixStream"],"kind":"struct"},"17:16341:7006":{"crate_id":17,"path":["object","pe","ImageSeparateDebugHeader"],"kind":"struct"},"5:7765:9481":{"crate_id":5,"path":["alloc","ffi","c_str","FromVecWithNulError"],"kind":"struct"},"17:11566:24057":{"crate_id":17,"path":["object","read","coff","section","CoffSegment"],"kind":"struct"},"20:709:9235":{"crate_id":20,"path":["proc_macro2","rcvec","RcVecIntoIter"],"kind":"struct"},"2:2863:138":{"crate_id":2,"path":["core","cmp","Eq"],"kind":"trait"},"2:3028:11215":{"crate_id":2,"path":["core","convert","num","private","Sealed"],"kind":"trait"},"2:4753:4127":{"crate_id":2,"path":["core","cell","Cell"],"kind":"struct"},"2:4028:5586":{"crate_id":2,"path":["core","array","drain","Drain"],"kind":"struct"},"17:12749:24185":{"crate_id":17,"path":["object","read","pe","section","PeSectionIterator"],"kind":"struct"},"1:2083:201":{"crate_id":1,"path":["std","ffi","os_str","OsString"],"kind":"struct"},"11:1064:22997":{"crate_id":11,"path":["hashbrown","map","EntryRef"],"kind":"enum"},"24:4479:4286":{"crate_id":24,"path":["syn","token","Gt"],"kind":"struct"},"17:10418:24020":{"crate_id":17,"path":["object","common","SectionFlags"],"kind":"enum"},"1:11822:10366":{"crate_id":1,"path":["std","sys_common","wtf8","Wtf8"],"kind":"struct"},"6:1539:7652":{"crate_id":6,"path":["libc","unix","linux_like","addrinfo"],"kind":"struct"},"6:6758:8361":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_statistics_v1"],"kind":"struct"},"16:5727:6187":{"crate_id":16,"path":["gimli","endianity","LittleEndian"],"kind":"struct"},"17:3503:24141":{"crate_id":17,"path":["object","read","macho","section","MachOSectionIterator"],"kind":"struct"},"17:14547:6517":{"crate_id":17,"path":["object","macho","DylibCommand"],"kind":"struct"},"17:10663:6192":{"crate_id":17,"path":["object","endian","I16Bytes"],"kind":"struct"},"1:687:11123":{"crate_id":1,"path":["std","backtrace","BytesOrWide"],"kind":"enum"},"6:6473:8225":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","cmsghdr"],"kind":"struct"},"2:34383:6013":{"crate_id":2,"path":["core","ops","bit","BitAnd"],"kind":"trait"},"2:11424:11215":{"crate_id":2,"path":["core","slice","index","private_slice_index","Sealed"],"kind":"trait"},"24:5272:3927":{"crate_id":24,"path":["syn","expr","ExprContinue"],"kind":"struct"},"2:22018:34594":{"crate_id":2,"path":["core","core_simd","swizzle","rotate_elements_left","Rotate"],"kind":"struct"},"5:6712:5586":{"crate_id":5,"path":["alloc","vec","drain","Drain"],"kind":"struct"},"5:2161:11141":{"crate_id":5,"path":["alloc","collections","btree","map","CursorMut"],"kind":"struct"},"6:6564:8278":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","timex"],"kind":"struct"},"1:3569:5825":{"crate_id":1,"path":["std","io","Guard"],"kind":"struct"},"6:1489:7628":{"crate_id":6,"path":["libc","unix","linux_like","in_addr"],"kind":"struct"},"16:6408:9339":{"crate_id":16,"path":["gimli","read","cfi","RegisterRuleIter"],"kind":"struct"},"11:2400:3993":{"crate_id":11,"path":["hashbrown","table","IterMut"],"kind":"struct"},"16:5282:7208":{"crate_id":16,"path":["gimli","constants","DwDefaulted"],"kind":"struct"},"6:5450:8067":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_rcvinfo"],"kind":"struct"},"2:41031:8852":{"crate_id":2,"path":["core","char","TryFromCharError"],"kind":"struct"},"17:16159:6955":{"crate_id":17,"path":["object","pe","ImageHotPatchHashes"],"kind":"struct"},"6:6437:8212":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__exit_status"],"kind":"struct"},"2:3752:150":{"crate_id":2,"path":["core","ops","try_trait","FromResidual"],"kind":"trait"},"24:4989:3904":{"crate_id":24,"path":["syn","data","FieldsNamed"],"kind":"struct"},"2:10313:4134":{"crate_id":2,"path":["core","fmt","builders","FormatterFn"],"kind":"struct"},"17:16036:6905":{"crate_id":17,"path":["object","pe","ImageLoadConfigDirectory32"],"kind":"struct"},"16:7401:37569":{"crate_id":16,"path":["gimli","read","loclists","LocListsFormat"],"kind":"enum"},"2:23587:8645":{"crate_id":2,"path":["core","num","nonzero","private","NonZeroI32Inner"],"kind":"struct"},"24:1038:37828":{"crate_id":24,"path":["syn","generics","Lifetimes"],"kind":"struct"},"2:47039:8970":{"crate_id":2,"path":["core","core_arch","simd","i32x8"],"kind":"struct"},"1:4902:11322":{"crate_id":1,"path":["std","os","linux","process","CommandExt"],"kind":"trait"},"2:5388:34798":{"crate_id":2,"path":["core","ffi","sealed_trait","VaArgSafe"],"kind":"trait"},"24:5320:3913":{"crate_id":24,"path":["syn","expr","ExprMethodCall"],"kind":"struct"},"17:12931:6277":{"crate_id":17,"path":["object","read","pe","relocation","Relocation"],"kind":"struct"},"6:1530:7646":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_in6"],"kind":"struct"},"2:2029:5825":{"crate_id":2,"path":["core","mem","maybe_uninit","Guard"],"kind":"struct"},"24:0:2394":{"crate_id":24,"path":["syn"],"kind":"module"},"5:5526:5801":{"crate_id":5,"path":["alloc","slice","hack","to_vec","DropGuard"],"kind":"struct"},"2:32803:5138":{"crate_id":2,"path":["core","marker","PhantomPinned"],"kind":"struct"},"17:14019:6403":{"crate_id":17,"path":["object","elf","Dyn32"],"kind":"struct"},"1:8801:8883":{"crate_id":1,"path":["std","path","State"],"kind":"enum"},"17:16555:7064":{"crate_id":17,"path":["object","xcoff","AuxHeader64"],"kind":"struct"},"17:11926:6223":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbol"],"kind":"struct"},"17:13983:6394":{"crate_id":17,"path":["object","elf","ProgramHeader32"],"kind":"struct"},"6:578:7620":{"crate_id":6,"path":["libc","unix","servent"],"kind":"struct"},"24:2302:3986":{"crate_id":24,"path":["syn","punctuated","PairsMut"],"kind":"struct"},"1:11833:9652":{"crate_id":1,"path":["std","sys_common","wtf8","Wtf8CodePoints"],"kind":"struct"},"1:6402:5888":{"crate_id":1,"path":["std","sync","mpmc","waker","SyncWaker"],"kind":"struct"},"24:4665:4299":{"crate_id":24,"path":["syn","token","PercentEq"],"kind":"struct"},"2:46800:8945":{"crate_id":2,"path":["core","core_arch","simd","m16x8"],"kind":"struct"},"2:3378:5487":{"crate_id":2,"path":["core","ops","async_function","AsyncFn"],"kind":"trait"},"1:679:11121":{"crate_id":1,"path":["std","backtrace","BacktraceFrame"],"kind":"struct"},"17:11232:24049":{"crate_id":17,"path":["object","read","any","SymbolIteratorInternal"],"kind":"enum"},"1:3350:11252":{"crate_id":1,"path":["std","io","stdio","Stdin"],"kind":"struct"},"2:42473:8865":{"crate_id":2,"path":["core","net","socket_addr","SocketAddrV4"],"kind":"struct"},"24:5887:2541":{"crate_id":24,"path":["syn","ty","Type"],"kind":"enum"},"17:13547:10716":{"crate_id":17,"path":["object","read","RelocationMap"],"kind":"struct"},"5:1554:3988":{"crate_id":5,"path":["alloc","collections","btree","map","IntoIter"],"kind":"struct"},"17:13635:6324":{"crate_id":17,"path":["object","archive","Header"],"kind":"struct"},"24:1839:3567":{"crate_id":24,"path":["syn","parse","Unexpected"],"kind":"enum"},"2:3133:126":{"crate_id":2,"path":["core","default","Default"],"kind":"trait"},"2:2672:5523":{"crate_id":2,"path":["core","ptr","with_exposed_provenance_mut"],"kind":"function"},"2:10791:11219":{"crate_id":2,"path":["core","hash","BuildHasher"],"kind":"trait"},"1:1099:11138":{"crate_id":1,"path":["std","collections","hash","map","OccupiedEntry"],"kind":"struct"},"1:10974:9646":{"crate_id":1,"path":["std","sys","pal","unix","fs","FilePermissions"],"kind":"struct"},"17:12335:24176":{"crate_id":17,"path":["object","read","macho","file","MachOComdatIterator"],"kind":"struct"},"2:5367:444":{"crate_id":2,"path":["core","ffi","c_void"],"kind":"enum"},"17:11163:6216":{"crate_id":17,"path":["object","read","any","SymbolTable"],"kind":"struct"},"21:127:5788":{"crate_id":21,"path":["proc_macro","bridge","client","state","set","RestoreOnDrop"],"kind":"struct"},"17:14299:6477":{"crate_id":17,"path":["object","macho","DyldSubCacheEntryV1"],"kind":"struct"},"6:6700:8340":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_ring_offset"],"kind":"struct"},"24:3000:4237":{"crate_id":24,"path":["syn","token","As"],"kind":"struct"},"1:2013:11175":{"crate_id":1,"path":["std","error","Indented"],"kind":"struct"},"5:3329:9461":{"crate_id":5,"path":["alloc","collections","btree","set","SymmetricDifference"],"kind":"struct"},"24:5225:3919":{"crate_id":24,"path":["syn","expr","ExprArray"],"kind":"struct"},"24:5840:3223":{"crate_id":24,"path":["syn","path","AngleBracketedGenericArguments"],"kind":"struct"},"1:4211:11293":{"crate_id":1,"path":["std","os","unix","fs","FileTypeExt"],"kind":"trait"},"16:4810:7193":{"crate_id":16,"path":["gimli","constants","DwAte"],"kind":"struct"},"6:8008:8569":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","align","max_align_t"],"kind":"struct"},"24:1054:37830":{"crate_id":24,"path":["syn","generics","TypeParams"],"kind":"struct"},"11:430:37552":{"crate_id":11,"path":["hashbrown","raw","RawIterHash"],"kind":"struct"},"24:5694:2941":{"crate_id":24,"path":["syn","mac","Macro"],"kind":"struct"},"1:6310:5884":{"crate_id":1,"path":["std","sync","mpmc","list","Channel"],"kind":"struct"},"2:44603:9578":{"crate_id":2,"path":["core","str","iter","RMatches"],"kind":"struct"},"17:14612:6525":{"crate_id":17,"path":["object","macho","PreboundDylibCommand"],"kind":"struct"},"2:43557:4135":{"crate_id":2,"path":["core","fmt","Arguments"],"kind":"struct"},"2:41351:4096":{"crate_id":2,"path":["core","iter","adapters","skip","Skip"],"kind":"struct"},"16:4267:7189":{"crate_id":16,"path":["gimli","constants","DwChildren"],"kind":"struct"},"2:13116:9496":{"crate_id":2,"path":["core","str","iter","SplitInclusive"],"kind":"struct"},"6:5186:7939":{"crate_id":6,"path":["libc","unix","linux_like","linux","mntent"],"kind":"struct"},"16:7305:7271":{"crate_id":16,"path":["gimli","read","line","FileEntry"],"kind":"struct"},"1:4362:11318":{"crate_id":1,"path":["std","os","unix","net","ancillary","Messages"],"kind":"struct"},"5:4329:5825":{"crate_id":5,"path":["alloc","collections","vec_deque","into_iter","try_rfold","Guard"],"kind":"struct"},"1:8879:9631":{"crate_id":1,"path":["std","path","Components"],"kind":"struct"},"16:8058:23953":{"crate_id":16,"path":["gimli","read","rnglists","RawRngListIter"],"kind":"struct"},"11:1005:9428":{"crate_id":11,"path":["hashbrown","map","Entry"],"kind":"enum"},"2:43216:4144":{"crate_id":2,"path":["core","fmt","num","LowerHex"],"kind":"struct"},"2:12848:16586":{"crate_id":2,"path":["core","str","converts","from_utf8"],"kind":"function"},"5:3267:101":{"crate_id":5,"path":["alloc","collections","btree","set","BTreeSet"],"kind":"struct"},"2:47466:9012":{"crate_id":2,"path":["core","core_arch","simd","u32x16"],"kind":"struct"},"6:545:7602":{"crate_id":6,"path":["libc","unix","winsize"],"kind":"struct"},"6:1667:7744":{"crate_id":6,"path":["libc","unix","linux_like","arpreq_old"],"kind":"struct"},"5:6560:11513":{"crate_id":5,"path":["alloc","task","Wake"],"kind":"trait"},"2:32744:242":{"crate_id":2,"path":["core","marker","Sized"],"kind":"trait"},"1:10777:11250":{"crate_id":1,"path":["std","sys","pal","unix","stdio","Stderr"],"kind":"struct"},"17:12260:24174":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldSubCacheSlice"],"kind":"enum"},"17:12826:9280":{"crate_id":17,"path":["object","read","pe","export","ExportTable"],"kind":"struct"},"17:12176:9272":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSubsection"],"kind":"struct"},"5:7706:4046":{"crate_id":5,"path":["alloc","collections","TryReserveErrorKind"],"kind":"enum"},"21:364:4837":{"crate_id":21,"path":["proc_macro","bridge","rpc","PanicMessage"],"kind":"enum"},"1:11261:9119":{"crate_id":1,"path":["std","sys","pal","unix","process","process_inner","ExitStatusError"],"kind":"struct"},"20:904:2546":{"crate_id":20,"path":["proc_macro2","Group"],"kind":"struct"},"6:564:7612":{"crate_id":6,"path":["libc","unix","itimerval"],"kind":"struct"},"23:35:11215":{"crate_id":23,"path":["quote","ext","private","Sealed"],"kind":"trait"},"1:8489:4052":{"crate_id":1,"path":["std","io","util","Empty"],"kind":"struct"},"24:5611:3953":{"crate_id":24,"path":["syn","lit","LitCStr"],"kind":"struct"},"16:8165:7165":{"crate_id":16,"path":["gimli","read","str","DebugLineStr"],"kind":"struct"},"16:5085:7201":{"crate_id":16,"path":["gimli","constants","DwAddr"],"kind":"struct"},"1:5020:11302":{"crate_id":1,"path":["std","os","fd","owned","AsFd"],"kind":"trait"},"2:44288:16575":{"crate_id":2,"path":["core","slice","iter","RChunksMut"],"kind":"struct"},"2:11080:5868":{"crate_id":2,"path":["core","slice","sort","unstable","quicksort","GapGuard"],"kind":"struct"},"18:581:5154":{"crate_id":18,"path":["memchr","memmem","twoway","Reverse"],"kind":"struct"},"1:1647:9461":{"crate_id":1,"path":["std","collections","hash","set","SymmetricDifference"],"kind":"struct"},"17:16832:6392":{"crate_id":17,"path":["object","xcoff","Rel64"],"kind":"struct"},"17:14750:6560":{"crate_id":17,"path":["object","macho","DylibModule32"],"kind":"struct"},"2:22094:11215":{"crate_id":2,"path":["core","core_simd","cast","sealed","Sealed"],"kind":"trait"},"2:47270:9008":{"crate_id":2,"path":["core","core_arch","simd","u8x64"],"kind":"struct"},"6:1643:7727":{"crate_id":6,"path":["libc","unix","linux_like","in6_rtmsg"],"kind":"struct"},"18:754:9255":{"crate_id":18,"path":["memchr","memmem","SearcherRev"],"kind":"struct"},"16:4241:7188":{"crate_id":16,"path":["gimli","constants","DwCfa"],"kind":"struct"},"1:4221:11294":{"crate_id":1,"path":["std","os","unix","fs","DirEntryExt"],"kind":"trait"},"1:2732:5876":{"crate_id":1,"path":["std","io","buffered","bufwriter","flush_buf","BufGuard"],"kind":"struct"},"2:45184:16767":{"crate_id":2,"path":["core","time","TryFromFloatSecsErrorKind"],"kind":"enum"},"10:36:7475":{"crate_id":10,"path":["adler","algo","U32X4"],"kind":"struct"},"16:7907:7324":{"crate_id":16,"path":["gimli","read","op","OperationIter"],"kind":"struct"},"1:9145:202":{"crate_id":1,"path":["std","process","Output"],"kind":"struct"},"17:11653:6212":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbol"],"kind":"struct"},"17:10167:24012":{"crate_id":17,"path":["object","common","SectionKind"],"kind":"enum"},"5:1594:11132":{"crate_id":5,"path":["alloc","collections","btree","map","ValuesMut"],"kind":"struct"},"2:46363:8909":{"crate_id":2,"path":["core","core_arch","simd","i8x4"],"kind":"struct"},"17:11998:24101":{"crate_id":17,"path":["object","read","elf","note","NoteIterator"],"kind":"struct"},"1:0:1746":{"crate_id":1,"path":["std"],"kind":"module"},"1:5475:206":{"crate_id":1,"path":["std","path","Path"],"kind":"struct"},"1:12479:13":{"crate_id":1,"path":["std","fn"],"kind":"primitive"},"1:6600:189":{"crate_id":1,"path":["std","sync","mutex","Mutex"],"kind":"struct"},"2:40189:4039":{"crate_id":2,"path":["core","ops","range","Bound"],"kind":"enum"},"21:2397:2626":{"crate_id":21,"path":["proc_macro","bridge","TokenTree"],"kind":"enum"},"17:14640:6529":{"crate_id":17,"path":["object","macho","ThreadCommand"],"kind":"struct"},"24:5963:3967":{"crate_id":24,"path":["syn","ty","TypeArray"],"kind":"struct"},"16:7259:9410":{"crate_id":16,"path":["gimli","read","line","IncompleteLineProgram"],"kind":"struct"},"6:6611:8305":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","regex_t"],"kind":"struct"},"6:5025:7907":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_effect"],"kind":"struct"},"17:14346:6486":{"crate_id":17,"path":["object","macho","FatArch64"],"kind":"struct"},"2:41303:4079":{"crate_id":2,"path":["core","iter","adapters","map_while","MapWhile"],"kind":"struct"},"2:32727:4156":{"crate_id":2,"path":["core","error","tags","Ref"],"kind":"struct"},"2:32745:249":{"crate_id":2,"path":["core","marker","StructuralPartialEq"],"kind":"trait"},"16:908:37591":{"crate_id":16,"path":["gimli","read","endian_slice","DebugLen"],"kind":"struct"},"2:42564:4747":{"crate_id":2,"path":["core","panic","location","Location"],"kind":"struct"},"16:3048:23075":{"crate_id":16,"path":["gimli","common","SectionId"],"kind":"enum"},"1:996:11137":{"crate_id":1,"path":["std","collections","hash","map","RawEntryBuilder"],"kind":"struct"},"17:15024:6610":{"crate_id":17,"path":["object","macho","IdentCommand"],"kind":"struct"},"6:8267:8587":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_barrierattr_t"],"kind":"struct"},"11:328:9454":{"crate_id":11,"path":["hashbrown","raw","RawIter"],"kind":"struct"},"1:963:10759":{"crate_id":1,"path":["std","collections","hash","map","IntoValues"],"kind":"struct"},"11:2420:3988":{"crate_id":11,"path":["hashbrown","table","IntoIter"],"kind":"struct"},"2:40936:9527":{"crate_id":2,"path":["core","char","EscapeDebug"],"kind":"struct"},"1:9478:9130":{"crate_id":1,"path":["std","time","SystemTime"],"kind":"struct"},"6:0:1021":{"crate_id":6,"path":["libc"],"kind":"module"},"24:5373:3917":{"crate_id":24,"path":["syn","expr","ExprUnary"],"kind":"struct"},"6:5520:8097":{"crate_id":6,"path":["libc","unix","linux_like","linux","tls12_crypto_info_chacha20_poly1305"],"kind":"struct"},"1:2793:11247":{"crate_id":1,"path":["std","io","buffered","linewriter","LineWriter"],"kind":"struct"},"16:7765:7306":{"crate_id":16,"path":["gimli","read","op","Piece"],"kind":"struct"},"17:5131:24223":{"crate_id":17,"path":["object","read","xcoff","symbol","XcoffSymbolIterator"],"kind":"struct"},"16:7386:7279":{"crate_id":16,"path":["gimli","read","loclists","LocationLists"],"kind":"struct"},"6:6623:8312":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","Elf64_Chdr"],"kind":"struct"},"16:3014:23074":{"crate_id":16,"path":["gimli","common","UnitSectionOffset"],"kind":"enum"},"6:4921:7859":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_event"],"kind":"struct"},"5:4297:5825":{"crate_id":5,"path":["alloc","collections","vec_deque","into_iter","try_fold","Guard"],"kind":"struct"},"2:40824:9521":{"crate_id":2,"path":["core","ascii","EscapeDefault"],"kind":"struct"},"24:5870:3964":{"crate_id":24,"path":["syn","restriction","Visibility"],"kind":"enum"},"16:3126:23076":{"crate_id":16,"path":["gimli","common","DwarfFileType"],"kind":"enum"},"6:553:7607":{"crate_id":6,"path":["libc","unix","linger"],"kind":"struct"},"1:12424:11127":{"crate_id":1,"path":["std","backtrace_rs","types","BytesOrWideString"],"kind":"enum"},"2:22149:11420":{"crate_id":2,"path":["core","core_simd","lane_count","LaneCount"],"kind":"struct"},"1:386:5385":{"crate_id":1,"path":["std","thread","scoped","ScopedJoinHandle"],"kind":"struct"},"1:8753:6017":{"crate_id":1,"path":["std","path","Prefix"],"kind":"enum"},"6:8249:8584":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_mutexattr_t"],"kind":"struct"},"1:12046:9655":{"crate_id":1,"path":["std","backtrace_rs","backtrace","Frame"],"kind":"struct"},"16:7192:23946":{"crate_id":16,"path":["gimli","read","line","ColumnType"],"kind":"enum"},"1:10934:11346":{"crate_id":1,"path":["std","sys","pal","unix","fd","FileDesc"],"kind":"struct"},"2:14257:5873":{"crate_id":2,"path":["core","task","wake","LocalWaker"],"kind":"struct"},"6:7431:8477":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statvfs64"],"kind":"struct"},"6:7518:8525":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user"],"kind":"struct"},"1:8889:3989":{"crate_id":1,"path":["std","path","Iter"],"kind":"struct"},"17:14220:6443":{"crate_id":17,"path":["object","macho","DyldCacheHeader"],"kind":"struct"},"2:2900:205":{"crate_id":2,"path":["core","cmp","PartialOrd"],"kind":"trait"},"2:3495:5490":{"crate_id":2,"path":["core","ops","coroutine","Coroutine"],"kind":"trait"},"17:11173:37640":{"crate_id":17,"path":["object","read","any","SymbolTableInternal"],"kind":"enum"},"24:5987:3973":{"crate_id":24,"path":["syn","ty","TypeNever"],"kind":"struct"},"18:0:3751":{"crate_id":18,"path":["memchr"],"kind":"module"},"1:12474:1878":{"crate_id":1,"path":["std","u64"],"kind":"primitive"},"2:46690:8939":{"crate_id":2,"path":["core","core_arch","simd","i32x4"],"kind":"struct"},"17:14692:6534":{"crate_id":17,"path":["object","macho","SymtabCommand"],"kind":"struct"},"24:1907:4111":{"crate_id":24,"path":["syn","parse","Parser"],"kind":"trait"},"6:6716:8348":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_ring_offset_v1"],"kind":"struct"},"2:3554:146":{"crate_id":2,"path":["core","ops","function","FnOnce"],"kind":"trait"},"5:2255:5361":{"crate_id":5,"path":["alloc","collections","btree","mem","replace","PanicGuard"],"kind":"struct"},"2:22008:5154":{"crate_id":2,"path":["core","core_simd","swizzle","reverse","Reverse"],"kind":"struct"},"1:10406:30823":{"crate_id":1,"path":["std","sys","pal","unix","os","Env"],"kind":"struct"},"2:3531:4035":{"crate_id":2,"path":["core","ops","deref","DerefPure"],"kind":"trait"},"2:46948:8967":{"crate_id":2,"path":["core","core_arch","simd","u64x4"],"kind":"struct"},"1:12467:910":{"crate_id":1,"path":["std","i16"],"kind":"primitive"},"2:13943:16637":{"crate_id":2,"path":["core","future","async_drop","AsyncDropInPlace"],"kind":"struct"},"1:7896:2639":{"crate_id":1,"path":["std","backtrace_rs","symbolize","Symbol"],"kind":"struct"},"2:22551:11426":{"crate_id":2,"path":["core","core_simd","to_bytes","ToBytes"],"kind":"trait"},"2:45425:5494":{"crate_id":2,"path":["core","alloc","AllocError"],"kind":"struct"},"1:11910:11270":{"crate_id":1,"path":["std","sys_common","net","TcpStream"],"kind":"struct"},"1:11788:11372":{"crate_id":1,"path":["std","sys_common","process","CommandEnvs"],"kind":"struct"},"17:14933:6589":{"crate_id":17,"path":["object","macho","VersionMinCommand"],"kind":"struct"},"2:10549:4143":{"crate_id":2,"path":["core","fmt","UpperExp"],"kind":"trait"},"1:10953:9638":{"crate_id":1,"path":["std","sys","pal","unix","fs","FileAttr"],"kind":"struct"},"17:16684:7090":{"crate_id":17,"path":["object","xcoff","FileAux64"],"kind":"struct"},"2:46529:8923":{"crate_id":2,"path":["core","core_arch","simd","f32x2"],"kind":"struct"},"17:14599:6523":{"crate_id":17,"path":["object","macho","SubLibraryCommand"],"kind":"struct"},"17:12736:24186":{"crate_id":17,"path":["object","read","pe","section","PeSegment"],"kind":"struct"},"1:12455:1340":{"crate_id":1,"path":["std","pointer"],"kind":"primitive"},"24:1612:4131":{"crate_id":24,"path":["syn","lookahead","Peek"],"kind":"trait"},"24:1791:2632":{"crate_id":24,"path":["syn","parse","ParseStream"],"kind":"type_alias"},"6:1711:7762":{"crate_id":6,"path":["libc","unix","linux_like","utsname"],"kind":"struct"},"16:6794:9371":{"crate_id":16,"path":["gimli","read","relocate","RelocateReader"],"kind":"struct"},"6:6770:8363":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_desc"],"kind":"struct"},"16:6876:7234":{"crate_id":16,"path":["gimli","read","abbrev","AttributeSpecification"],"kind":"struct"},"24:5540:3946":{"crate_id":24,"path":["syn","generics","PredicateLifetime"],"kind":"struct"},"5:928:5807":{"crate_id":5,"path":["alloc","collections","binary_heap","RebuildOnDrop"],"kind":"struct"},"11:102:9450":{"crate_id":11,"path":["hashbrown","raw","Bucket"],"kind":"struct"},"2:41194:4076":{"crate_id":2,"path":["core","iter","adapters","cloned","Cloned"],"kind":"struct"},"17:13933:6387":{"crate_id":17,"path":["object","elf","Rel32"],"kind":"struct"},"17:12605:6216":{"crate_id":17,"path":["object","read","macho","symbol","SymbolTable"],"kind":"struct"},"17:11952:10714":{"crate_id":17,"path":["object","read","elf","relocation","RelocationSections"],"kind":"struct"},"16:2506:7133":{"crate_id":16,"path":["gimli","common","DebugAbbrevOffset"],"kind":"struct"},"6:6659:8326":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_entry"],"kind":"struct"},"17:2437:24106":{"crate_id":17,"path":["object","read","elf","relocation","ElfSectionRelocationIterator"],"kind":"struct"},"17:11606:6216":{"crate_id":17,"path":["object","read","coff","symbol","SymbolTable"],"kind":"struct"},"17:12082:9264":{"crate_id":17,"path":["object","read","elf","version","VersionTable"],"kind":"struct"},"6:5334:8012":{"crate_id":6,"path":["libc","unix","linux_like","linux","seccomp_notif_sizes"],"kind":"struct"},"6:5381:8026":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlattr"],"kind":"struct"},"2:40909:9525":{"crate_id":2,"path":["core","char","decode","DecodeUtf16Error"],"kind":"struct"},"2:46301:8901":{"crate_id":2,"path":["core","core_arch","simd","u8x2"],"kind":"struct"},"2:41203:4077":{"crate_id":2,"path":["core","iter","adapters","copied","Copied"],"kind":"struct"},"2:46515:8922":{"crate_id":2,"path":["core","core_arch","simd","i64x1"],"kind":"struct"},"24:4467:4285":{"crate_id":24,"path":["syn","token","Ge"],"kind":"struct"},"2:10537:4136":{"crate_id":2,"path":["core","fmt","Octal"],"kind":"trait"},"17:13028:24220":{"crate_id":17,"path":["object","read","xcoff","section","XcoffSectionIterator"],"kind":"struct"},"2:8869:4068":{"crate_id":2,"path":["core","iter","traits","marker","TrustedLen"],"kind":"trait"},"16:8298:9436":{"crate_id":16,"path":["gimli","read","unit","DebuggingInformationEntry"],"kind":"struct"},"16:7969:9433":{"crate_id":16,"path":["gimli","read","pubtypes","PubTypesEntry"],"kind":"struct"},"6:5366:8019":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlmsghdr"],"kind":"struct"},"1:8635:11312":{"crate_id":1,"path":["std","os","unix","net","ancillary","SocketAncillary"],"kind":"struct"},"2:40830:9522":{"crate_id":2,"path":["core","async_iter","from_iter","FromIter"],"kind":"struct"},"1:1930:5652":{"crate_id":1,"path":["std","env","Args"],"kind":"struct"},"5:1538:3993":{"crate_id":5,"path":["alloc","collections","btree","map","IterMut"],"kind":"struct"},"6:6631:8313":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","Elf32_Chdr"],"kind":"struct"},"1:6827:11386":{"crate_id":1,"path":["std","sync","poison","TryLockError"],"kind":"enum"},"24:5254:3908":{"crate_id":24,"path":["syn","expr","ExprCall"],"kind":"struct"},"24:4905:4635":{"crate_id":24,"path":["syn","token","Bracket"],"kind":"struct"},"2:44698:9526":{"crate_id":2,"path":["core","str","iter","EscapeUnicode"],"kind":"struct"},"2:46771:8944":{"crate_id":2,"path":["core","core_arch","simd","m8x16"],"kind":"struct"},"2:8365:4073":{"crate_id":2,"path":["core","iter","traits","accum","Sum"],"kind":"trait"},"16:6042:7160":{"crate_id":16,"path":["gimli","read","cfi","DebugFrame"],"kind":"struct"},"5:6284:5825":{"crate_id":5,"path":["alloc","sync","from_iter_exact","Guard"],"kind":"struct"},"2:44680:9527":{"crate_id":2,"path":["core","str","iter","EscapeDebug"],"kind":"struct"},"2:40061:9519":{"crate_id":2,"path":["core","ops","index_range","IndexRange"],"kind":"struct"},"2:38764:6032":{"crate_id":2,"path":["core","ops","bit","BitXorAssign"],"kind":"trait"},"17:14084:6419":{"crate_id":17,"path":["object","elf","Verneed"],"kind":"struct"},"17:14902:6584":{"crate_id":17,"path":["object","macho","EncryptionInfoCommand32"],"kind":"struct"},"17:12920:9292":{"crate_id":17,"path":["object","read","pe","relocation","RelocationIterator"],"kind":"struct"},"24:4960:3891":{"crate_id":24,"path":["syn","attr","MetaList"],"kind":"struct"},"9:445:22919":{"crate_id":9,"path":["miniz_oxide","MZError"],"kind":"enum"},"6:1494:7630":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreq"],"kind":"struct"},"17:14533:6236":{"crate_id":17,"path":["object","macho","Dylib"],"kind":"struct"},"24:5002:2397":{"crate_id":24,"path":["syn","derive","DeriveInput"],"kind":"struct"},"17:12204:9274":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSubsubsection"],"kind":"struct"},"6:5127:7933":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Phdr"],"kind":"struct"},"17:11777:9262":{"crate_id":17,"path":["object","read","coff","import","ImportObjectData"],"kind":"struct"},"2:44216:16571":{"crate_id":2,"path":["core","slice","iter","ChunksExactMut"],"kind":"struct"},"2:41115:5860":{"crate_id":2,"path":["core","ffi","VaListImpl"],"kind":"struct"},"14:0:3747":{"crate_id":14,"path":["rustc_demangle"],"kind":"module"},"2:41264:4090":{"crate_id":2,"path":["core","iter","adapters","fuse","Fuse"],"kind":"struct"},"24:3442:4254":{"crate_id":24,"path":["syn","token","Mod"],"kind":"struct"},"24:989:4112":{"crate_id":24,"path":["syn","ext","IdentExt"],"kind":"trait"},"1:2245:132":{"crate_id":1,"path":["std","ffi","os_str","Display"],"kind":"struct"},"2:47098:8973":{"crate_id":2,"path":["core","core_arch","simd","m8x32"],"kind":"struct"},"2:23510:8638":{"crate_id":2,"path":["core","num","nonzero","private","NonZeroU16Inner"],"kind":"struct"},"6:1632:7719":{"crate_id":6,"path":["libc","unix","linux_like","ifaddrs"],"kind":"struct"},"17:15439:6746":{"crate_id":17,"path":["object","pe","ImageOptionalHeader32"],"kind":"struct"},"1:12458:1754":{"crate_id":1,"path":["std","str"],"kind":"primitive"},"1:8824:9112":{"crate_id":1,"path":["std","path","PrefixComponent"],"kind":"struct"},"2:1927:3108":{"crate_id":2,"path":["core","mem"],"kind":"module"},"16:7789:37586":{"crate_id":16,"path":["gimli","read","op","EvaluationState"],"kind":"enum"},"17:12798:24212":{"crate_id":17,"path":["object","read","pe","export","ExportTarget"],"kind":"enum"},"2:42769:97":{"crate_id":2,"path":["core","sync","atomic","AtomicU8"],"kind":"struct"},"6:5165:7936":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Shdr"],"kind":"struct"},"17:16241:6983":{"crate_id":17,"path":["object","pe","ImageEnclaveConfig64"],"kind":"struct"},"1:682:11122":{"crate_id":1,"path":["std","backtrace","BacktraceSymbol"],"kind":"struct"},"16:8320:23957":{"crate_id":16,"path":["gimli","read","unit","AttributeValue"],"kind":"enum"},"2:47437:9011":{"crate_id":2,"path":["core","core_arch","simd","i32x16"],"kind":"struct"},"1:11068:28345":{"crate_id":1,"path":["std","sys","pal","unix","process","process_common","ProgramKind"],"kind":"enum"},"16:5348:7210":{"crate_id":16,"path":["gimli","constants","DwLne"],"kind":"struct"},"5:1414:10632":{"crate_id":5,"path":["alloc","collections","btree","map","entry","OccupiedError"],"kind":"struct"},"2:31124:5143":{"crate_id":2,"path":["core","mem","maybe_uninit","MaybeUninit"],"kind":"union"},"1:9442:238":{"crate_id":1,"path":["std","sync","rwlock","RwLockWriteGuard"],"kind":"struct"},"1:1932:11163":{"crate_id":1,"path":["std","env","ArgsOs"],"kind":"struct"},"6:6813:8377":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_data"],"kind":"union"},"1:4163:11290":{"crate_id":1,"path":["std","os","unix","fs","PermissionsExt"],"kind":"trait"},"5:3296:3989":{"crate_id":5,"path":["alloc","collections","btree","set","Iter"],"kind":"struct"},"1:8249:130":{"crate_id":1,"path":["std","fs","DirBuilder"],"kind":"struct"},"2:8402:149":{"crate_id":2,"path":["core","iter","traits","collect","FromIterator"],"kind":"trait"},"21:2218:4010":{"crate_id":21,"path":["proc_macro","bridge","DelimSpan"],"kind":"struct"},"16:8223:9435":{"crate_id":16,"path":["gimli","read","unit","DebugInfoUnitHeadersIter"],"kind":"struct"},"5:6158:5833":{"crate_id":5,"path":["alloc","sync","Weak"],"kind":"struct"},"2:3526:4162":{"crate_id":2,"path":["core","ops","deref","DerefMut"],"kind":"trait"},"2:44431:9568":{"crate_id":2,"path":["core","str","iter","SplitTerminator"],"kind":"struct"},"1:3851:11266":{"crate_id":1,"path":["std","net","socket_addr","ToSocketAddrs"],"kind":"trait"},"1:507:5874":{"crate_id":1,"path":["std","thread","spawn_unchecked_","MaybeDangling"],"kind":"struct"},"2:0:574":{"crate_id":2,"path":["core"],"kind":"module"},"6:5249:7973":{"crate_id":6,"path":["libc","unix","linux_like","linux","fanotify_response"],"kind":"struct"},"1:8049:5372":{"crate_id":1,"path":["std","thread","Thread"],"kind":"struct"},"18:608:37653":{"crate_id":18,"path":["memchr","memmem","twoway","Suffix"],"kind":"struct"},"2:43519:4133":{"crate_id":2,"path":["core","fmt","Alignment"],"kind":"enum"},"2:33274:6025":{"crate_id":2,"path":["core","ops","arith","Mul"],"kind":"trait"},"2:44531:9574":{"crate_id":2,"path":["core","str","iter","MatchIndices"],"kind":"struct"},"16:2590:7137":{"crate_id":16,"path":["gimli","common","DebugInfoOffset"],"kind":"struct"},"7:32:22906":{"crate_id":7,"path":["unwind","libunwind","_Unwind_Reason_Code"],"kind":"enum"},"17:12056:6224":{"crate_id":17,"path":["object","read","elf","version","VersionIndex"],"kind":"struct"},"2:40920:9526":{"crate_id":2,"path":["core","char","EscapeUnicode"],"kind":"struct"},"5:1784:5801":{"crate_id":5,"path":["alloc","collections","btree","map","drop","DropGuard"],"kind":"struct"},"1:12456:341":{"crate_id":1,"path":["std","array"],"kind":"primitive"},"2:3049:78":{"crate_id":2,"path":["core","convert","AsRef"],"kind":"trait"},"2:42880:88":{"crate_id":2,"path":["core","sync","atomic","AtomicI32"],"kind":"struct"},"2:2894:198":{"crate_id":2,"path":["core","cmp","Ord"],"kind":"trait"},"6:497:7570":{"crate_id":6,"path":["libc","unix","rusage"],"kind":"struct"},"20:927:2950":{"crate_id":20,"path":["proc_macro2","Punct"],"kind":"struct"},"2:42595:4734":{"crate_id":2,"path":["core","panic","panic_info","PanicInfo"],"kind":"struct"},"5:7214:270":{"crate_id":5,"path":["alloc","vec","Vec"],"kind":"struct"},"5:1001:3989":{"crate_id":5,"path":["alloc","collections","binary_heap","Iter"],"kind":"struct"},"6:5507:8096":{"crate_id":6,"path":["libc","unix","linux_like","linux","tls12_crypto_info_aes_gcm_256"],"kind":"struct"},"2:47583:9017":{"crate_id":2,"path":["core","core_arch","x86","__m128i"],"kind":"struct"},"2:43469:8881":{"crate_id":2,"path":["core","fmt","rt","Count"],"kind":"enum"},"5:1385:11139":{"crate_id":5,"path":["alloc","collections","btree","map","entry","VacantEntry"],"kind":"struct"},"9:236:8883":{"crate_id":9,"path":["miniz_oxide","inflate","core","State"],"kind":"enum"},"17:12524:24143":{"crate_id":17,"path":["object","read","macho","segment","MachOSegmentIterator"],"kind":"struct"},"16:6914:9379":{"crate_id":16,"path":["gimli","read","aranges","ArangeHeader"],"kind":"struct"},"24:6008:3978":{"crate_id":24,"path":["syn","ty","TypeTraitObject"],"kind":"struct"},"16:2880:7150":{"crate_id":16,"path":["gimli","common","DebugStrOffsetsBase"],"kind":"struct"},"1:1641:9460":{"crate_id":1,"path":["std","collections","hash","set","Difference"],"kind":"struct"},"2:23565:8643":{"crate_id":2,"path":["core","num","nonzero","private","NonZeroI8Inner"],"kind":"struct"},"17:15689:6813":{"crate_id":17,"path":["object","pe","ImageAuxSymbolTokenDef"],"kind":"struct"},"17:13385:9297":{"crate_id":17,"path":["object","read","ObjectMap"],"kind":"struct"},"6:7414:8476":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statfs64"],"kind":"struct"},"2:7724:3369":{"crate_id":2,"path":["core","iter","adapters","zip","zip"],"kind":"function"},"1:1630:5584":{"crate_id":1,"path":["std","collections","hash","set","ExtractIf"],"kind":"struct"},"6:5069:7929":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Ehdr"],"kind":"struct"},"16:4404:7190":{"crate_id":16,"path":["gimli","constants","DwTag"],"kind":"struct"},"17:14358:6488":{"crate_id":17,"path":["object","macho","MachHeader32"],"kind":"struct"},"1:11563:5911":{"crate_id":1,"path":["std","sys","sync","once","futex","CompletionGuard"],"kind":"struct"},"17:10597:6190":{"crate_id":17,"path":["object","endian","U32Bytes"],"kind":"struct"},"21:53:5609":{"crate_id":21,"path":["proc_macro","bridge","buffer","Buffer"],"kind":"struct"},"6:1690:7754":{"crate_id":6,"path":["libc","unix","linux_like","epoll_event"],"kind":"struct"},"16:6970:7159":{"crate_id":16,"path":["gimli","read","index","DebugCuIndex"],"kind":"struct"},"17:15557:6788":{"crate_id":17,"path":["object","pe","Guid"],"kind":"struct"},"2:40886:8851":{"crate_id":2,"path":["core","char","convert","CharTryFromError"],"kind":"struct"},"16:7554:23950":{"crate_id":16,"path":["gimli","read","op","DieReference"],"kind":"enum"},"24:5992:3113":{"crate_id":24,"path":["syn","ty","TypePath"],"kind":"struct"},"16:5060:7200":{"crate_id":16,"path":["gimli","constants","DwLang"],"kind":"struct"},"24:4677:4300":{"crate_id":24,"path":["syn","token","Plus"],"kind":"struct"},"2:45149:134":{"crate_id":2,"path":["core","time","Duration"],"kind":"struct"},"6:7391:8475":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stat64"],"kind":"struct"},"17:13181:24222":{"crate_id":17,"path":["object","read","xcoff","segment","XcoffSegmentIterator"],"kind":"struct"},"2:13307:16583":{"crate_id":2,"path":["core","str","pattern","Pattern"],"kind":"trait"},"16:7731:4747":{"crate_id":16,"path":["gimli","read","op","Location"],"kind":"enum"},"24:1349:9197":{"crate_id":24,"path":["syn","lit","LitIntRepr"],"kind":"struct"},"24:4969:2572":{"crate_id":24,"path":["syn","data","Variant"],"kind":"struct"},"2:46722:8941":{"crate_id":2,"path":["core","core_arch","simd","f32x4"],"kind":"struct"},"2:5015:4160":{"crate_id":2,"path":["core","cell","SyncUnsafeCell"],"kind":"struct"},"2:7085:5609":{"crate_id":2,"path":["core","iter","adapters","map_windows","Buffer"],"kind":"struct"},"18:521:28289":{"crate_id":18,"path":["memchr","memmem","prefilter","Prefilter"],"kind":"enum"},"17:10487:24022":{"crate_id":17,"path":["object","common","RelocationFlags"],"kind":"enum"},"16:7919:23952":{"crate_id":16,"path":["gimli","read","op","Evaluation"],"kind":"struct"},"17:15919:6875":{"crate_id":17,"path":["object","pe","ImageResourceDirectory"],"kind":"struct"},"1:12053:9655":{"crate_id":1,"path":["std","backtrace_rs","backtrace","libunwind","Frame"],"kind":"enum"},"6:7454:8484":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_fpxreg"],"kind":"struct"},"17:14031:6406":{"crate_id":17,"path":["object","elf","Dyn64"],"kind":"struct"},"24:5285:3929":{"crate_id":24,"path":["syn","expr","ExprGroup"],"kind":"struct"},"16:6368:9336":{"crate_id":16,"path":["gimli","read","cfi","UnwindContext"],"kind":"struct"},"17:15887:6864":{"crate_id":17,"path":["object","pe","ImageBoundImportDescriptor"],"kind":"struct"},"5:4561:5825":{"crate_id":5,"path":["alloc","collections","vec_deque","shrink_to","Guard"],"kind":"struct"},"1:5285:30840":{"crate_id":1,"path":["std","path","fmt","DebugHelper"],"kind":"struct"},"24:5850:2939":{"crate_id":24,"path":["syn","path","AssocConst"],"kind":"struct"},"24:646:9195":{"crate_id":24,"path":["syn","error","ErrorMessage"],"kind":"struct"},"11:2466:5584":{"crate_id":11,"path":["hashbrown","table","ExtractIf"],"kind":"struct"},"1:9364:9126":{"crate_id":1,"path":["std","sync","mpmc","select","Operation"],"kind":"struct"},"6:5007:7898":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_periodic_effect"],"kind":"struct"},"1:11280:8894":{"crate_id":1,"path":["std","sys","pal","unix","time","Nanoseconds"],"kind":"struct"},"24:1353:9199":{"crate_id":24,"path":["syn","lit","LitFloatRepr"],"kind":"struct"},"17:12122:9268":{"crate_id":17,"path":["object","read","elf","version","VerneedIterator"],"kind":"struct"},"16:4152:7186":{"crate_id":16,"path":["gimli","constants","DwSectV2"],"kind":"struct"},"24:4373:4279":{"crate_id":24,"path":["syn","token","Dot"],"kind":"struct"},"11:881:11137":{"crate_id":11,"path":["hashbrown","map","RawEntryBuilder"],"kind":"struct"},"24:86:5213":{"crate_id":24,"path":["syn","token","private","WithSpan"],"kind":"struct"},"1:5650:11365":{"crate_id":1,"path":["std","process","ChildStdout"],"kind":"struct"},"17:15953:6883":{"crate_id":17,"path":["object","pe","ImageResourceDataEntry"],"kind":"struct"},"1:3075:229":{"crate_id":1,"path":["std","io","error","Result"],"kind":"type_alias"},"24:4566:4292":{"crate_id":24,"path":["syn","token","Ne"],"kind":"struct"},"2:23462:11215":{"crate_id":2,"path":["core","num","nonzero","private","Sealed"],"kind":"trait"},"17:10549:6188":{"crate_id":17,"path":["object","endian","BigEndian"],"kind":"struct"},"17:2227:24090":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbolIterator"],"kind":"struct"},"1:8260:9628":{"crate_id":1,"path":["std","hash","random","DefaultHasher"],"kind":"struct"},"2:45356:10358":{"crate_id":2,"path":["core","task","wake","RawWaker"],"kind":"struct"},"1:4997:5881":{"crate_id":1,"path":["std","os","fd","owned","OwnedFd"],"kind":"struct"},"2:46739:8942":{"crate_id":2,"path":["core","core_arch","simd","f64x2"],"kind":"struct"},"21:2613:4007":{"crate_id":21,"path":["proc_macro","LexError"],"kind":"struct"},"23:78:2627":{"crate_id":23,"path":["quote","to_tokens","ToTokens"],"kind":"trait"},"2:5426:11257":{"crate_id":2,"path":["core","io","borrowed_buf","BorrowedBuf"],"kind":"struct"},"24:113:2546":{"crate_id":24,"path":["syn","token","Group"],"kind":"struct"},"17:12409:24179":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandVariant"],"kind":"enum"},"1:8196:5661":{"crate_id":1,"path":["std","fs","Metadata"],"kind":"struct"},"16:6738:37594":{"crate_id":16,"path":["gimli","read","dwarf","RangeIterInner"],"kind":"enum"},"11:2148:11139":{"crate_id":11,"path":["hashbrown","set","VacantEntry"],"kind":"struct"},"16:8565:9446":{"crate_id":16,"path":["gimli","read","unit","EntriesTree"],"kind":"struct"},"2:23609:8647":{"crate_id":2,"path":["core","num","nonzero","private","NonZeroI128Inner"],"kind":"struct"},"11:1725:159":{"crate_id":11,"path":["hashbrown","set","HashSet"],"kind":"struct"},"1:5986:11381":{"crate_id":1,"path":["std","sync","barrier","Barrier"],"kind":"struct"},"17:13958:6392":{"crate_id":17,"path":["object","elf","Rel64"],"kind":"struct"},"24:1618:37821":{"crate_id":24,"path":["syn","lookahead","TokenMarker"],"kind":"enum"},"17:11757:24079":{"crate_id":17,"path":["object","read","coff","import","ImportType"],"kind":"enum"},"1:11808:9650":{"crate_id":1,"path":["std","sys_common","wtf8","Wtf8Buf"],"kind":"struct"},"2:42451:9629":{"crate_id":2,"path":["core","net","socket_addr","SocketAddr"],"kind":"enum"},"24:5385:3943":{"crate_id":24,"path":["syn","expr","ExprYield"],"kind":"struct"},"17:12216:9275":{"crate_id":17,"path":["object","read","elf","attributes","AttributeIndexIterator"],"kind":"struct"},"17:12008:6049":{"crate_id":17,"path":["object","read","elf","note","Note"],"kind":"struct"},"2:47392:9010":{"crate_id":2,"path":["core","core_arch","simd","u16x32"],"kind":"struct"},"1:9271:11392":{"crate_id":1,"path":["std","sync","mpsc","TrySendError"],"kind":"enum"},"24:4402:4281":{"crate_id":24,"path":["syn","token","DotDotDot"],"kind":"struct"},"17:317:37592":{"crate_id":17,"path":["object","read","util","DebugByte"],"kind":"struct"},"17:13361:6307":{"crate_id":17,"path":["object","read","SymbolMapName"],"kind":"struct"},"1:6211:5889":{"crate_id":1,"path":["std","sync","mpmc","counter","Sender"],"kind":"struct"},"17:15148:6626":{"crate_id":17,"path":["object","macho","RelocationInfo"],"kind":"struct"},"5:3865:11141":{"crate_id":5,"path":["alloc","collections","linked_list","CursorMut"],"kind":"struct"},"1:5128:11343":{"crate_id":1,"path":["std","os","net","linux_ext","tcp","TcpStreamExt"],"kind":"trait"},"5:7695:4045":{"crate_id":5,"path":["alloc","collections","TryReserveError"],"kind":"struct"},"2:11864:9571":{"crate_id":2,"path":["core","slice","iter","SplitN"],"kind":"struct"},"2:42954:89":{"crate_id":2,"path":["core","sync","atomic","AtomicI64"],"kind":"struct"},"5:6042:5586":{"crate_id":5,"path":["alloc","string","Drain"],"kind":"struct"},"17:12851:9288":{"crate_id":17,"path":["object","read","pe","import","ImportDescriptorIterator"],"kind":"struct"},"9:176:10749":{"crate_id":9,"path":["miniz_oxide","inflate","stream","InflateState"],"kind":"struct"},"17:11421:24046":{"crate_id":17,"path":["object","read","archive","ArchiveMemberIterator"],"kind":"struct"},"21:2474:129":{"crate_id":21,"path":["proc_macro","bridge","Diagnostic"],"kind":"struct"},"24:4293:4274":{"crate_id":24,"path":["syn","token","Caret"],"kind":"struct"},"2:47623:9021":{"crate_id":2,"path":["core","core_arch","x86","__m256"],"kind":"struct"},"16:8121:213":{"crate_id":16,"path":["gimli","read","rnglists","Range"],"kind":"struct"},"2:3351:4033":{"crate_id":2,"path":["core","ops","arith","Add"],"kind":"trait"},"6:6823:8380":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","utmpx"],"kind":"struct"},"17:14072:6416":{"crate_id":17,"path":["object","elf","Verdaux"],"kind":"struct"},"17:11309:24031":{"crate_id":17,"path":["object","read","any","SectionRelocationIterator"],"kind":"struct"},"1:5195:4737":{"crate_id":1,"path":["std","panic","always_abort"],"kind":"function"},"16:3110:7178":{"crate_id":16,"path":["gimli","common","DwoId"],"kind":"struct"},"2:22704:11215":{"crate_id":2,"path":["core","core_simd","vector","sealed","Sealed"],"kind":"trait"},"24:3544:4156":{"crate_id":24,"path":["syn","token","Ref"],"kind":"struct"},"11:1105:22998":{"crate_id":11,"path":["hashbrown","map","OccupiedEntryRef"],"kind":"struct"},"1:4018:11271":{"crate_id":1,"path":["std","net","udp","UdpSocket"],"kind":"struct"},"16:6084:9305":{"crate_id":16,"path":["gimli","read","cfi","ParsedEhFrameHdr"],"kind":"struct"},"11:2137:11138":{"crate_id":11,"path":["hashbrown","set","OccupiedEntry"],"kind":"struct"},"16:2840:7148":{"crate_id":16,"path":["gimli","common","DebugRngListsIndex"],"kind":"struct"},"2:40149:217":{"crate_id":2,"path":["core","ops","range","RangeInclusive"],"kind":"struct"},"17:12044:24107":{"crate_id":17,"path":["object","read","elf","hash","GnuHashTable"],"kind":"struct"},"6:5241:7969":{"crate_id":6,"path":["libc","unix","linux_like","linux","inotify_event"],"kind":"struct"},"2:14031:35487":{"crate_id":2,"path":["core","future","join","MaybeDone"],"kind":"enum"},"16:7471:7284":{"crate_id":16,"path":["gimli","read","loclists","LocationListEntry"],"kind":"struct"},"24:5968:3968":{"crate_id":24,"path":["syn","ty","TypeBareFn"],"kind":"struct"},"17:13471:6274":{"crate_id":17,"path":["object","read","Export"],"kind":"struct"},"16:5757:7216":{"crate_id":16,"path":["gimli","read","util","sealed","CapacityFull"],"kind":"struct"},"2:40013:5491":{"crate_id":2,"path":["core","ops","coroutine","CoroutineState"],"kind":"enum"},"17:11579:24056":{"crate_id":17,"path":["object","read","coff","section","CoffSectionIterator"],"kind":"struct"},"5:984:5809":{"crate_id":5,"path":["alloc","collections","binary_heap","Hole"],"kind":"struct"},"7:79:22913":{"crate_id":7,"path":["unwind","libunwind","_Unwind_Action"],"kind":"enum"},"5:6758:5801":{"crate_id":5,"path":["alloc","vec","drain","drop","DropGuard"],"kind":"struct"},"1:959:10758":{"crate_id":1,"path":["std","collections","hash","map","IntoKeys"],"kind":"struct"},"17:14460:6503":{"crate_id":17,"path":["object","macho","Section32"],"kind":"struct"},"5:4574:5827":{"crate_id":5,"path":["alloc","collections","vec_deque","truncate","Dropper"],"kind":"struct"},"2:41125:11192":{"crate_id":2,"path":["core","ffi","VaList"],"kind":"struct"},"20:723:2625":{"crate_id":20,"path":["proc_macro2","fallback","Span"],"kind":"struct"},"2:23310:34551":{"crate_id":2,"path":["core","num","dec2flt","FloatErrorKind"],"kind":"enum"},"2:10475:229":{"crate_id":2,"path":["core","fmt","Result"],"kind":"type_alias"},"6:4997:7891":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_condition_effect"],"kind":"struct"},"11:488:157":{"crate_id":11,"path":["hashbrown","map","HashMap"],"kind":"struct"},"21:2707:4009":{"crate_id":21,"path":["proc_macro","Delimiter"],"kind":"enum"},"2:23499:8637":{"crate_id":2,"path":["core","num","nonzero","private","NonZeroU8Inner"],"kind":"struct"},"2:10494:147":{"crate_id":2,"path":["core","fmt","Formatter"],"kind":"struct"},"1:8895:9117":{"crate_id":1,"path":["std","path","Ancestors"],"kind":"struct"},"21:1099:211":{"crate_id":21,"path":["proc_macro","bridge","client","ProcMacro"],"kind":"enum"},"2:38709:6034":{"crate_id":2,"path":["core","ops","bit","BitOrAssign"],"kind":"trait"},"2:4705:4164":{"crate_id":2,"path":["core","cell","once","OnceCell"],"kind":"struct"},"17:15852:6853":{"crate_id":17,"path":["object","pe","ImageTlsDirectory64"],"kind":"struct"},"23:272:2635":{"crate_id":23,"path":["quote","__private","push_lifetime","Lifetime"],"kind":"struct"},"24:5524:3616":{"crate_id":24,"path":["syn","generics","WhereClause"],"kind":"struct"},"6:4881:7836":{"crate_id":6,"path":["libc","unix","linux_like","linux","packet_mreq"],"kind":"struct"},"5:2147:4125":{"crate_id":5,"path":["alloc","collections","btree","map","Cursor"],"kind":"struct"},"2:32667:7472":{"crate_id":2,"path":["core","convert","Infallible"],"kind":"enum"},"2:42708:199":{"crate_id":2,"path":["core","sync","atomic","Ordering"],"kind":"enum"},"1:8363:10772":{"crate_id":1,"path":["std","io","error","Custom"],"kind":"struct"},"24:4931:3890":{"crate_id":24,"path":["syn","attr","Attribute"],"kind":"struct"},"16:2435:23073":{"crate_id":16,"path":["gimli","common","Vendor"],"kind":"enum"},"5:4498:5827":{"crate_id":5,"path":["alloc","collections","vec_deque","drop","Dropper"],"kind":"struct"},"2:42539:3989":{"crate_id":2,"path":["core","option","Iter"],"kind":"struct"},"17:14963:6595":{"crate_id":17,"path":["object","macho","BuildToolVersion"],"kind":"struct"},"5:3850:4125":{"crate_id":5,"path":["alloc","collections","linked_list","Cursor"],"kind":"struct"},"17:3720:24144":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbolIterator"],"kind":"struct"},"2:4:1280":{"crate_id":2,"path":["core","panic"],"kind":"macro"},"17:13157:24217":{"crate_id":17,"path":["object","read","xcoff","comdat","XcoffComdat"],"kind":"struct"},"2:8118:4052":{"crate_id":2,"path":["core","iter","sources","empty","Empty"],"kind":"struct"},"2:47687:9031":{"crate_id":2,"path":["core","core_arch","x86","__m512d"],"kind":"struct"},"17:1220:24059":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbolIterator"],"kind":"struct"},"24:1062:37826":{"crate_id":24,"path":["syn","generics","TypeParamsMut"],"kind":"struct"},"17:12550:6263":{"crate_id":17,"path":["object","read","macho","segment","MachOSegmentInternal"],"kind":"struct"},"24:6005:3977":{"crate_id":24,"path":["syn","ty","TypeSlice"],"kind":"struct"},"2:3792:115":{"crate_id":2,"path":["core","ops","unsize","CoerceUnsized"],"kind":"trait"},"2:22904:11215":{"crate_id":2,"path":["core","core_simd","simd","num","sealed","Sealed"],"kind":"trait"},"1:8077:11125":{"crate_id":1,"path":["std","backtrace","BacktraceStatus"],"kind":"enum"},"5:7648:3988":{"crate_id":5,"path":["alloc","collections","vec_deque","into_iter","IntoIter"],"kind":"struct"},"2:44298:9502":{"crate_id":2,"path":["core","slice","iter","RChunksExact"],"kind":"struct"},"6:1507:7636":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreq_source"],"kind":"struct"},"23:514:3243":{"crate_id":23,"path":["quote","quote_spanned"],"kind":"macro"},"2:41152:4074":{"crate_id":2,"path":["core","iter","adapters","array_chunks","ArrayChunks"],"kind":"struct"},"24:3816:4268":{"crate_id":24,"path":["syn","token","Where"],"kind":"struct"},"1:6537:223":{"crate_id":1,"path":["std","sync","mpmc","Receiver"],"kind":"struct"},"24:5229:3920":{"crate_id":24,"path":["syn","expr","ExprAssign"],"kind":"struct"},"23:322:3245":{"crate_id":23,"path":["quote","spanned","Spanned"],"kind":"trait"},"18:651:6057":{"crate_id":18,"path":["memchr","memmem","x86","sse","Forward"],"kind":"struct"},"6:7548:8542":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ipc_perm"],"kind":"struct"},"6:5471:8082":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_prinfo"],"kind":"struct"},"16:4120:7185":{"crate_id":16,"path":["gimli","constants","DwSect"],"kind":"struct"},"17:15160:6630":{"crate_id":17,"path":["object","macho","ScatteredRelocationInfo"],"kind":"struct"},"17:12028:24131":{"crate_id":17,"path":["object","read","elf","note","GnuProperty"],"kind":"struct"},"17:16750:7107":{"crate_id":17,"path":["object","xcoff","ExpAux"],"kind":"struct"},"2:41739:4059":{"crate_id":2,"path":["core","iter","sources","repeat","Repeat"],"kind":"struct"},"2:45131:8894":{"crate_id":2,"path":["core","time","Nanoseconds"],"kind":"struct"},"17:15785:6839":{"crate_id":17,"path":["object","pe","ImageArchiveMemberHeader"],"kind":"struct"},"17:11553:24058":{"crate_id":17,"path":["object","read","coff","section","CoffSegmentIterator"],"kind":"struct"},"16:2920:7152":{"crate_id":16,"path":["gimli","common","DebugTypesOffset"],"kind":"struct"},"1:6020:4743":{"crate_id":1,"path":["std","sync","condvar","Condvar"],"kind":"struct"},"16:2950:7153":{"crate_id":16,"path":["gimli","common","DebugTypeSignature"],"kind":"struct"},"1:912:9457":{"crate_id":1,"path":["std","collections","hash","map","Keys"],"kind":"struct"},"6:1703:7758":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_storage"],"kind":"struct"},"6:5648:8155":{"crate_id":6,"path":["libc","unix","linux_like","linux","dirent64"],"kind":"struct"},"20:116:37680":{"crate_id":20,"path":["proc_macro2","rcvec","RcVecBuilder"],"kind":"struct"},"16:4766:7192":{"crate_id":16,"path":["gimli","constants","DwForm"],"kind":"struct"},"24:3187:4243":{"crate_id":24,"path":["syn","token","Do"],"kind":"struct"},"6:523:7590":{"crate_id":6,"path":["libc","unix","hostent"],"kind":"struct"},"2:3061:263":{"crate_id":2,"path":["core","convert","TryInto"],"kind":"trait"},"6:5541:8103":{"crate_id":6,"path":["libc","unix","linux_like","linux","dirent"],"kind":"struct"},"17:12537:24142":{"crate_id":17,"path":["object","read","macho","segment","MachOSegment"],"kind":"struct"},"5:7287:5855":{"crate_id":5,"path":["alloc","vec","dedup_by","FillGapOnDrop"],"kind":"struct"},"1:9323:28361":{"crate_id":1,"path":["std","sync","mpmc","error","SendTimeoutError"],"kind":"enum"},"2:46316:8904":{"crate_id":2,"path":["core","core_arch","simd","i8x2"],"kind":"struct"},"24:3850:274":{"crate_id":24,"path":["syn","token","Yield"],"kind":"struct"},"2:2403:5492":{"crate_id":2,"path":["core","ptr","unique","Unique"],"kind":"struct"},"5:6179:16957":{"crate_id":5,"path":["alloc","sync","ArcInner"],"kind":"struct"},"17:12392:6231":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandData"],"kind":"struct"},"17:15136:6277":{"crate_id":17,"path":["object","macho","Relocation"],"kind":"struct"},"1:5616:11363":{"crate_id":1,"path":["std","process","Child"],"kind":"struct"},"5:7089:5590":{"crate_id":5,"path":["alloc","vec","set_len_on_drop","SetLenOnDrop"],"kind":"struct"},"16:7424:23948":{"crate_id":16,"path":["gimli","read","loclists","RawLocListEntry"],"kind":"enum"},"16:7521:9426":{"crate_id":16,"path":["gimli","read","lookup","PubStuffHeader"],"kind":"struct"},"2:11673:9496":{"crate_id":2,"path":["core","slice","iter","SplitInclusive"],"kind":"struct"},"1:6227:223":{"crate_id":1,"path":["std","sync","mpmc","counter","Receiver"],"kind":"struct"},"1:12475:1860":{"crate_id":1,"path":["std","u128"],"kind":"primitive"},"6:8302:8595":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_barrier_t"],"kind":"struct"},"6:5217:7958":{"crate_id":6,"path":["libc","unix","linux_like","linux","genlmsghdr"],"kind":"struct"},"11:299:9451":{"crate_id":11,"path":["hashbrown","raw","RawIterRange"],"kind":"struct"},"24:4723:4303":{"crate_id":24,"path":["syn","token","Question"],"kind":"struct"},"2:23620:8648":{"crate_id":2,"path":["core","num","nonzero","private","NonZeroIsizeInner"],"kind":"struct"},"24:5977:3969":{"crate_id":24,"path":["syn","ty","TypeGroup"],"kind":"struct"},"16:6573:9366":{"crate_id":16,"path":["gimli","read","cfi","CallFrameInstructionIter"],"kind":"struct"},"17:11401:6204":{"crate_id":17,"path":["object","read","archive","ArchiveFile"],"kind":"struct"},"2:3764:16609":{"crate_id":2,"path":["core","ops","try_trait","NeverShortCircuit"],"kind":"struct"},"2:43209:4136":{"crate_id":2,"path":["core","fmt","num","Octal"],"kind":"struct"},"16:7337:7275":{"crate_id":16,"path":["gimli","read","line","FileEntryFormat"],"kind":"struct"},"16:2900:7151":{"crate_id":16,"path":["gimli","common","DebugStrOffsetsIndex"],"kind":"struct"},"1:11129:5908":{"crate_id":1,"path":["std","sys","pal","unix","process","process_inner","do_exec","Reset"],"kind":"struct"},"17:16145:6949":{"crate_id":17,"path":["object","pe","ImageHotPatchBase"],"kind":"struct"},"17:11503:6207":{"crate_id":17,"path":["object","read","archive","ArchiveSymbol"],"kind":"struct"},"1:2498:11202":{"crate_id":1,"path":["std","fs","canonicalize"],"kind":"function"},"6:1597:7690":{"crate_id":6,"path":["libc","unix","linux_like","lconv"],"kind":"struct"},"2:23332:8624":{"crate_id":2,"path":["core","num","flt2dec","decoder","Decoded"],"kind":"struct"},"16:8014:7173":{"crate_id":16,"path":["gimli","read","rnglists","DebugRngLists"],"kind":"struct"},"2:22155:11423":{"crate_id":2,"path":["core","core_simd","lane_count","SupportedLaneCount"],"kind":"trait"},"6:4805:7782":{"crate_id":6,"path":["libc","unix","linux_like","linux","passwd"],"kind":"struct"},"1:663:10639":{"crate_id":1,"path":["std","backtrace","Backtrace"],"kind":"struct"},"3:234:229":{"crate_id":3,"path":["compiler_builtins","float","cmp","Result"],"kind":"enum"},"1:3620:11212":{"crate_id":1,"path":["std","io","IoSliceMut"],"kind":"struct"},"1:11315:9136":{"crate_id":1,"path":["std","sys","pal","unix","time","Timespec"],"kind":"struct"},"17:13070:6216":{"crate_id":17,"path":["object","read","xcoff","symbol","SymbolTable"],"kind":"struct"},"5:2172:11142":{"crate_id":5,"path":["alloc","collections","btree","map","CursorMutKey"],"kind":"struct"},"2:31092:5444":{"crate_id":2,"path":["core","mem","manually_drop","ManuallyDrop"],"kind":"struct"},"1:4939:11303":{"crate_id":1,"path":["std","os","fd","raw","AsRawFd"],"kind":"trait"},"2:46707:8940":{"crate_id":2,"path":["core","core_arch","simd","i64x2"],"kind":"struct"},"20:889:2626":{"crate_id":20,"path":["proc_macro2","TokenTree"],"kind":"enum"},"1:5879:9623":{"crate_id":1,"path":["std","sync","mpsc","SyncSender"],"kind":"struct"},"11:1893:5584":{"crate_id":11,"path":["hashbrown","set","ExtractIf"],"kind":"struct"},"2:10756:160":{"crate_id":2,"path":["core","hash","Hasher"],"kind":"trait"},"6:1589:7685":{"crate_id":6,"path":["libc","unix","linux_like","Dl_info"],"kind":"struct"},"2:10950:5867":{"crate_id":2,"path":["core","slice","sort","stable","merge","MergeState"],"kind":"struct"},"17:14845:6577":{"crate_id":17,"path":["object","macho","UuidCommand"],"kind":"struct"},"1:4825:8468":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt","st_atime"],"kind":"function"},"24:3425:3241":{"crate_id":24,"path":["syn","token","Match"],"kind":"struct"},"2:3583:4001":{"crate_id":2,"path":["core","ops","index","IndexMut"],"kind":"trait"},"2:47566:9016":{"crate_id":2,"path":["core","core_arch","simd","f64x8"],"kind":"struct"},"5:7560:5586":{"crate_id":5,"path":["alloc","collections","binary_heap","Drain"],"kind":"struct"},"16:6302:9328":{"crate_id":16,"path":["gimli","read","cfi","PartialFrameDescriptionEntry"],"kind":"struct"},"2:43452:4133":{"crate_id":2,"path":["core","fmt","rt","Alignment"],"kind":"enum"},"24:5281:3928":{"crate_id":24,"path":["syn","expr","ExprForLoop"],"kind":"struct"},"2:45298:154":{"crate_id":2,"path":["core","future","future","Future"],"kind":"trait"},"2:22030:34594":{"crate_id":2,"path":["core","core_simd","swizzle","rotate_elements_right","Rotate"],"kind":"struct"},"6:5603:8129":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_ifr_ifru"],"kind":"union"},"2:41232:4087":{"crate_id":2,"path":["core","iter","adapters","filter","Filter"],"kind":"struct"},"17:12860:9289":{"crate_id":17,"path":["object","read","pe","import","ImportThunkList"],"kind":"struct"},"2:40226:8722":{"crate_id":2,"path":["core","any","TypeId"],"kind":"struct"},"16:6256:9321":{"crate_id":16,"path":["gimli","read","cfi","AugmentationData"],"kind":"struct"},"1:12469:922":{"crate_id":1,"path":["std","i64"],"kind":"primitive"},"24:3136:119":{"crate_id":24,"path":["syn","token","Continue"],"kind":"struct"},"1:8624:9630":{"crate_id":1,"path":["std","os","unix","net","ancillary","SocketCred"],"kind":"struct"},"2:9982:85":{"crate_id":2,"path":["core","sync","atomic","AtomicBool"],"kind":"struct"},"21:2548:4174":{"crate_id":21,"path":["proc_macro","diagnostic","Level"],"kind":"enum"},"24:5613:3951":{"crate_id":24,"path":["syn","lit","LitByte"],"kind":"struct"},"1:12459:1844":{"crate_id":1,"path":["std","tuple"],"kind":"primitive"},"1:12473:1872":{"crate_id":1,"path":["std","u32"],"kind":"primitive"},"5:1486:100":{"crate_id":5,"path":["alloc","collections","btree","map","BTreeMap"],"kind":"struct"},"2:46754:8943":{"crate_id":2,"path":["core","core_arch","simd","f64x4"],"kind":"struct"},"17:12648:6267":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbol"],"kind":"struct"},"17:15315:6652":{"crate_id":17,"path":["object","pe","ImageOs2Header"],"kind":"struct"},"11:1920:2595":{"crate_id":11,"path":["hashbrown","set","Union"],"kind":"struct"},"1:8839:11358":{"crate_id":1,"path":["std","path","Component"],"kind":"enum"},"1:3352:11253":{"crate_id":1,"path":["std","io","stdio","StdinLock"],"kind":"struct"},"1:9198:11393":{"crate_id":1,"path":["std","sync","mpsc","TryIter"],"kind":"struct"},"17:14586:6521":{"crate_id":17,"path":["object","macho","SubUmbrellaCommand"],"kind":"struct"},"17:11475:24049":{"crate_id":17,"path":["object","read","archive","SymbolIteratorInternal"],"kind":"enum"},"17:12976:6280":{"crate_id":17,"path":["object","read","pe","resource","ResourceName"],"kind":"struct"},"24:3068:4241":{"crate_id":24,"path":["syn","token","Become"],"kind":"struct"},"16:6942:9381":{"crate_id":16,"path":["gimli","read","aranges","ArangeEntryIter"],"kind":"struct"},"16:2796:7146":{"crate_id":16,"path":["gimli","common","RangeListsOffset"],"kind":"struct"},"1:1907:11157":{"crate_id":1,"path":["std","env","SplitPaths"],"kind":"struct"},"6:5107:7931":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Sym"],"kind":"struct"},"2:8559:181":{"crate_id":2,"path":["core","iter","traits","iterator","Iterator"],"kind":"trait"},"2:11630:9494":{"crate_id":2,"path":["core","slice","iter","Split"],"kind":"struct"},"17:12149:9270":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSection"],"kind":"struct"},"17:10031:24008":{"crate_id":17,"path":["object","common","Architecture"],"kind":"enum"},"24:4264:4272":{"crate_id":24,"path":["syn","token","AndEq"],"kind":"struct"},"1:8906:9634":{"crate_id":1,"path":["std","path","StripPrefixError"],"kind":"struct"},"6:5255:7975":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_vm"],"kind":"struct"},"20:834:2558":{"crate_id":20,"path":["proc_macro2","imp","Ident"],"kind":"enum"},"17:10218:24013":{"crate_id":17,"path":["object","common","ComdatKind"],"kind":"enum"},"2:2806:5140":{"crate_id":2,"path":["core","clone","CloneToUninit"],"kind":"trait"},"24:4740:4304":{"crate_id":24,"path":["syn","token","RArrow"],"kind":"struct"},"24:3833:4269":{"crate_id":24,"path":["syn","token","While"],"kind":"struct"},"2:11823:16576":{"crate_id":2,"path":["core","slice","iter","RSplitMut"],"kind":"struct"},"5:3693:185":{"crate_id":5,"path":["alloc","collections","linked_list","LinkedList"],"kind":"struct"},"6:8031:8582":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","align","sem_t"],"kind":"struct"},"17:13014:24227":{"crate_id":17,"path":["object","read","xcoff","file","XcoffFile"],"kind":"struct"},"6:5357:8015":{"crate_id":6,"path":["libc","unix","linux_like","linux","seccomp_notif_addfd"],"kind":"struct"},"2:7080:9490":{"crate_id":2,"path":["core","iter","adapters","map_windows","MapWindowsInner"],"kind":"struct"},"2:46380:8910":{"crate_id":2,"path":["core","core_arch","simd","i16x2"],"kind":"struct"},"1:5105:11341":{"crate_id":1,"path":["std","os","net","linux_ext","addr","SocketAddrExt"],"kind":"trait"},"21:2617:4172":{"crate_id":21,"path":["proc_macro","ExpandError"],"kind":"struct"},"1:439:188":{"crate_id":1,"path":["std","thread","local","LocalKey"],"kind":"struct"},"16:4956:7198":{"crate_id":16,"path":["gimli","constants","DwVis"],"kind":"struct"},"2:42333:2625":{"crate_id":2,"path":["core","net","ip_addr","fmt","Span"],"kind":"struct"},"5:1369:9428":{"crate_id":5,"path":["alloc","collections","btree","map","entry","Entry"],"kind":"enum"},"17:13095:6286":{"crate_id":17,"path":["object","read","xcoff","symbol","XcoffSymbolTable"],"kind":"struct"},"17:16507:6357":{"crate_id":17,"path":["object","xcoff","FileHeader64"],"kind":"struct"},"16:7044:7164":{"crate_id":16,"path":["gimli","read","line","DebugLine"],"kind":"struct"},"17:15621:6798":{"crate_id":17,"path":["object","pe","ImageSectionHeader"],"kind":"struct"},"2:42555:3988":{"crate_id":2,"path":["core","option","IntoIter"],"kind":"struct"},"2:3548:144":{"crate_id":2,"path":["core","ops","function","Fn"],"kind":"trait"},"6:7469:8488":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_fpstate"],"kind":"struct"},"17:14821:6574":{"crate_id":17,"path":["object","macho","TwolevelHint"],"kind":"struct"},"20:982:3988":{"crate_id":20,"path":["proc_macro2","token_stream","IntoIter"],"kind":"struct"},"6:5629:8146":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_ifc_ifcu"],"kind":"union"},"17:13082:24029":{"crate_id":17,"path":["object","read","xcoff","symbol","SymbolIterator"],"kind":"struct"},"16:6781:7230":{"crate_id":16,"path":["gimli","read","reader","ReaderOffsetId"],"kind":"struct"},"2:32834:117":{"crate_id":2,"path":["core","marker","ConstParamTy"],"kind":"trait"},"17:16739:7106":{"crate_id":17,"path":["object","xcoff","FunAux64"],"kind":"struct"},"1:2482:11198":{"crate_id":1,"path":["std","fs","symlink_metadata"],"kind":"function"},"17:16613:6370":{"crate_id":17,"path":["object","xcoff","SectionHeader64"],"kind":"struct"},"24:3714:4263":{"crate_id":24,"path":["syn","token","Typeof"],"kind":"struct"},"17:14405:6494":{"crate_id":17,"path":["object","macho","LcStr"],"kind":"struct"},"2:41145:11211":{"crate_id":2,"path":["core","io","borrowed_buf","BorrowedCursor"],"kind":"struct"},"2:8504:4070":{"crate_id":2,"path":["core","iter","traits","exact_size","ExactSizeIterator"],"kind":"trait"},"17:11016:24026":{"crate_id":17,"path":["object","read","any","SectionIterator"],"kind":"struct"},"24:4595:4294":{"crate_id":24,"path":["syn","token","Or"],"kind":"struct"},"17:12234:6291":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCache"],"kind":"struct"},"2:45119:9615":{"crate_id":2,"path":["core","str","IsNotEmpty"],"kind":"struct"},"17:15896:6867":{"crate_id":17,"path":["object","pe","ImageBoundForwarderRef"],"kind":"struct"},"2:44253:4074":{"crate_id":2,"path":["core","slice","iter","ArrayChunks"],"kind":"struct"},"17:14859:6578":{"crate_id":17,"path":["object","macho","RpathCommand"],"kind":"struct"},"24:642:229":{"crate_id":24,"path":["syn","error","Result"],"kind":"type_alias"},"21:936:4173":{"crate_id":21,"path":["proc_macro","bridge","client","SourceFile"],"kind":"struct"},"1:10657:11369":{"crate_id":1,"path":["std","sys","pal","unix","process","process_common","CommandArgs"],"kind":"struct"},"21:2726:2950":{"crate_id":21,"path":["proc_macro","Punct"],"kind":"struct"},"1:3313:32488":{"crate_id":1,"path":["std","io","stdio","StderrRaw"],"kind":"struct"},"5:779:255":{"crate_id":5,"path":["alloc","borrow","ToOwned"],"kind":"trait"},"20:908:4009":{"crate_id":20,"path":["proc_macro2","Delimiter"],"kind":"enum"},"1:2508:11207":{"crate_id":1,"path":["std","fs","read_dir"],"kind":"function"},"21:2751:3242":{"crate_id":21,"path":["proc_macro","Literal"],"kind":"struct"},"5:6579:11514":{"crate_id":5,"path":["alloc","task","LocalWake"],"kind":"trait"},"17:10141:24011":{"crate_id":17,"path":["object","common","BinaryFormat"],"kind":"enum"},"1:7180:11418":{"crate_id":1,"path":["std","std_float","StdFloat"],"kind":"trait"},"17:10442:24021":{"crate_id":17,"path":["object","common","SymbolFlags"],"kind":"enum"},"17:13570:24037":{"crate_id":17,"path":["object","read","CompressionFormat"],"kind":"enum"},"24:5549:2558":{"crate_id":24,"path":["syn","ident","Ident"],"kind":"function"},"16:6680:23941":{"crate_id":16,"path":["gimli","read","dwarf","DwarfPackageSections"],"kind":"struct"},"5:2347:37274":{"crate_id":5,"path":["alloc","collections","btree","navigate","LazyLeafHandle"],"kind":"enum"},"1:9241:11391":{"crate_id":1,"path":["std","sync","mpsc","TryRecvError"],"kind":"enum"},"16:6713:2588":{"crate_id":16,"path":["gimli","read","dwarf","Unit"],"kind":"struct"},"16:2530:7134":{"crate_id":16,"path":["gimli","common","DebugAddrBase"],"kind":"struct"},"5:7123:5592":{"crate_id":5,"path":["alloc","vec","in_place_drop","InPlaceDstDataSrcBufDrop"],"kind":"struct"},"16:3834:7184":{"crate_id":16,"path":["gimli","arch","X86"],"kind":"struct"},"1:10963:9626":{"crate_id":1,"path":["std","sys","pal","unix","fs","OpenOptions"],"kind":"struct"},"17:14375:6491":{"crate_id":17,"path":["object","macho","MachHeader64"],"kind":"struct"},"17:12035:9462":{"crate_id":17,"path":["object","read","elf","hash","HashTable"],"kind":"struct"},"6:5488:8088":{"crate_id":6,"path":["libc","unix","linux_like","linux","tls_crypto_info"],"kind":"struct"},"1:2326:142":{"crate_id":1,"path":["std","fs","File"],"kind":"struct"},"17:11706:24077":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdatSectionIterator"],"kind":"struct"},"1:9156:9118":{"crate_id":1,"path":["std","process","ExitStatus"],"kind":"struct"},"17:14393:6492":{"crate_id":17,"path":["object","macho","LoadCommand"],"kind":"struct"},"1:10408:30849":{"crate_id":1,"path":["std","sys","pal","unix","os","EnvStrDebug"],"kind":"struct"},"2:41294:4092":{"crate_id":2,"path":["core","iter","adapters","map","Map"],"kind":"struct"},"17:14832:6575":{"crate_id":17,"path":["object","macho","PrebindCksumCommand"],"kind":"struct"},"1:12464:771":{"crate_id":1,"path":["std","f64"],"kind":"primitive"},"16:2660:7140":{"crate_id":16,"path":["gimli","common","LocationListsOffset"],"kind":"struct"},"2:41724:4055":{"crate_id":2,"path":["core","iter","sources","once","Once"],"kind":"struct"},"17:16084:6942":{"crate_id":17,"path":["object","pe","ImageLoadConfigDirectory64"],"kind":"struct"},"1:4233:11297":{"crate_id":1,"path":["std","os","unix","fs","DirBuilderExt"],"kind":"trait"},"0:0:2416":{"crate_id":0,"path":["serde_derive"],"kind":"module"},"16:2684:7141":{"crate_id":16,"path":["gimli","common","DebugLocListsBase"],"kind":"struct"},"16:6269:9322":{"crate_id":16,"path":["gimli","read","cfi","CommonInformationEntry"],"kind":"struct"},"24:3612:3290":{"crate_id":24,"path":["syn","token","Static"],"kind":"struct"},"24:693:3988":{"crate_id":24,"path":["syn","error","IntoIter"],"kind":"struct"},"17:10803:3531":{"crate_id":17,"path":["object","read","util","Bytes"],"kind":"struct"},"24:5617:3956":{"crate_id":24,"path":["syn","lit","LitInt"],"kind":"struct"},"1:9496:9637":{"crate_id":1,"path":["std","time","SystemTimeError"],"kind":"struct"},"6:4896:7843":{"crate_id":6,"path":["libc","unix","linux_like","linux","if_nameindex"],"kind":"struct"},"24:5029:2896":{"crate_id":24,"path":["syn","expr","Expr"],"kind":"enum"},"21:241:37690":{"crate_id":21,"path":["proc_macro","bridge","handle","OwnedStore"],"kind":"struct"},"24:3578:4260":{"crate_id":24,"path":["syn","token","SelfType"],"kind":"struct"},"2:41023:9530":{"crate_id":2,"path":["core","char","CaseMappingIter"],"kind":"struct"},"2:41758:4063":{"crate_id":2,"path":["core","iter","sources","repeat_with","RepeatWith"],"kind":"struct"},"24:4995:2575":{"crate_id":24,"path":["syn","data","Field"],"kind":"struct"},"6:479:7562":{"crate_id":6,"path":["libc","unix","timeval"],"kind":"struct"},"17:12711:24210":{"crate_id":17,"path":["object","read","pe","file","PeComdatSectionIterator"],"kind":"struct"},"2:8451:133":{"crate_id":2,"path":["core","iter","traits","double_ended","DoubleEndedIterator"],"kind":"trait"},"20:953:3242":{"crate_id":20,"path":["proc_macro2","Literal"],"kind":"struct"},"6:7332:8441":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","flock"],"kind":"struct"},"24:2593:11215":{"crate_id":24,"path":["syn","sealed","lookahead","Sealed"],"kind":"trait"},"1:534:5361":{"crate_id":1,"path":["std","thread","PanicGuard"],"kind":"struct"},"5:6526:5839":{"crate_id":5,"path":["alloc","sync","UniqueArcUninit"],"kind":"struct"},"1:12470:903":{"crate_id":1,"path":["std","i128"],"kind":"primitive"},"17:11539:6208":{"crate_id":17,"path":["object","read","coff","section","SectionTable"],"kind":"struct"},"2:46669:8938":{"crate_id":2,"path":["core","core_arch","simd","i16x8"],"kind":"struct"},"16:8267:7340":{"crate_id":16,"path":["gimli","read","unit","UnitHeader"],"kind":"struct"},"24:1078:37825":{"crate_id":24,"path":["syn","generics","ConstParamsMut"],"kind":"struct"},"6:5088:7930":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Ehdr"],"kind":"struct"},"17:12869:6310":{"crate_id":17,"path":["object","read","pe","import","Import"],"kind":"enum"},"24:4624:4296":{"crate_id":24,"path":["syn","token","OrOr"],"kind":"struct"},"2:41717:4053":{"crate_id":2,"path":["core","iter","sources","from_fn","FromFn"],"kind":"struct"},"17:16812:7118":{"crate_id":17,"path":["object","xcoff","DwarfAux64"],"kind":"struct"},"2:46331:8905":{"crate_id":2,"path":["core","core_arch","simd","u8x4"],"kind":"struct"},"17:16377:7010":{"crate_id":17,"path":["object","pe","ImageArchitectureEntry"],"kind":"struct"},"1:4225:11295":{"crate_id":1,"path":["std","os","unix","fs","DirEntryExt2"],"kind":"trait"},"24:1086:3947":{"crate_id":24,"path":["syn","generics","ImplGenerics"],"kind":"struct"},"2:44813:9592":{"crate_id":2,"path":["core","str","pattern","CharArraySearcher"],"kind":"struct"},"2:10547:4142":{"crate_id":2,"path":["core","fmt","LowerExp"],"kind":"trait"},"11:351:37545":{"crate_id":11,"path":["hashbrown","raw","FullBucketsIndices"],"kind":"struct"},"1:8617:9629":{"crate_id":1,"path":["std","os","unix","net","addr","SocketAddr"],"kind":"struct"},"17:11818:24088":{"crate_id":17,"path":["object","read","elf","segment","ElfSegment"],"kind":"struct"},"2:11906:16577":{"crate_id":2,"path":["core","slice","iter","RSplitNMut"],"kind":"struct"},"17:13781:2558":{"crate_id":17,"path":["object","elf","Ident"],"kind":"struct"},"17:12018:24130":{"crate_id":17,"path":["object","read","elf","note","GnuPropertyIterator"],"kind":"struct"},"24:3782:4266":{"crate_id":24,"path":["syn","token","Use"],"kind":"struct"},"1:8578:11267":{"crate_id":1,"path":["std","net","tcp","IntoIncoming"],"kind":"struct"},"1:9739:142":{"crate_id":1,"path":["std","sys","pal","unix","fs","File"],"kind":"struct"},"24:5513:3214":{"crate_id":24,"path":["syn","generics","TraitBound"],"kind":"struct"},"2:33486:6026":{"crate_id":2,"path":["core","ops","arith","Div"],"kind":"trait"},"1:5872:5889":{"crate_id":1,"path":["std","sync","mpsc","Sender"],"kind":"struct"},"24:4769:4306":{"crate_id":24,"path":["syn","token","Shl"],"kind":"struct"},"2:2112:5441":{"crate_id":2,"path":["core","mem","Discriminant"],"kind":"struct"},"1:12419:10774":{"crate_id":1,"path":["std","backtrace_rs","symbolize","gimli","Cache"],"kind":"struct"},"2:13301:4402":{"crate_id":2,"path":["core","str","pattern"],"kind":"module"},"17:14312:6479":{"crate_id":17,"path":["object","macho","DyldSubCacheEntryV2"],"kind":"struct"},"6:1521:7641":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_in"],"kind":"struct"},"24:4918:2889":{"crate_id":24,"path":["syn","token","Paren"],"kind":"struct"},"24:4310:4275":{"crate_id":24,"path":["syn","token","CaretEq"],"kind":"struct"},"17:16218:6970":{"crate_id":17,"path":["object","pe","ImageEnclaveConfig32"],"kind":"struct"},"2:2858:204":{"crate_id":2,"path":["core","cmp","PartialEq"],"kind":"trait"},"1:8694:9101":{"crate_id":1,"path":["std","os","fd","owned","BorrowedFd"],"kind":"struct"},"17:15655:6810":{"crate_id":17,"path":["object","pe","ImageSymbolBytes"],"kind":"struct"},"1:7813:10652":{"crate_id":1,"path":["std","panicking","begin_panic_handler","StaticStrPayload"],"kind":"struct"},"1:10474:11371":{"crate_id":1,"path":["std","sys","pal","unix","pipe","AnonPipe"],"kind":"struct"},"17:10928:24025":{"crate_id":17,"path":["object","read","any","SegmentIterator"],"kind":"struct"},"6:7986:8568":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","not_x32","statvfs"],"kind":"struct"},"17:16786:7114":{"crate_id":17,"path":["object","xcoff","StatAux"],"kind":"struct"},"16:6421:9300":{"crate_id":16,"path":["gimli","read","cfi","UnwindTableRow"],"kind":"struct"},"23:239:5073":{"crate_id":23,"path":["quote","__private","get_span","GetSpanInner"],"kind":"struct"},"6:5179:7937":{"crate_id":6,"path":["libc","unix","linux_like","linux","ucred"],"kind":"struct"},"2:45123:9616":{"crate_id":2,"path":["core","str","BytesIsNotEmpty"],"kind":"struct"},"1:4349:11317":{"crate_id":1,"path":["std","os","unix","net","ancillary","AncillaryData"],"kind":"enum"},"17:15931:6878":{"crate_id":17,"path":["object","pe","ImageResourceDirectoryEntry"],"kind":"struct"},"6:5622:8143":{"crate_id":6,"path":["libc","unix","linux_like","linux","ifreq"],"kind":"struct"},"6:5420:8046":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_initmsg"],"kind":"struct"},"2:2656:686":{"crate_id":2,"path":["core","ptr","drop_in_place"],"kind":"function"},"17:15121:6623":{"crate_id":17,"path":["object","macho","Nlist64"],"kind":"struct"},"18:80:28275":{"crate_id":18,"path":["memchr","memchr","iter","Memchr"],"kind":"struct"},"1:11717:8883":{"crate_id":1,"path":["std","sys","thread_local","native","eager","State"],"kind":"enum"},"10:0:3744":{"crate_id":10,"path":["adler"],"kind":"module"},"2:46544:8924":{"crate_id":2,"path":["core","core_arch","simd","f64x1"],"kind":"struct"},"24:4817:4310":{"crate_id":24,"path":["syn","token","Slash"],"kind":"struct"},"17:11592:6171":{"crate_id":17,"path":["object","read","coff","section","CoffSection"],"kind":"struct"},"20:744:3242":{"crate_id":20,"path":["proc_macro2","fallback","Literal"],"kind":"struct"},"24:4496:4287":{"crate_id":24,"path":["syn","token","LArrow"],"kind":"struct"},"6:1684:7751":{"crate_id":6,"path":["libc","unix","linux_like","mmsghdr"],"kind":"struct"},"18:635:6075":{"crate_id":18,"path":["memchr","memmem","twoway","ApproximateByteSet"],"kind":"struct"},"11:2228:9462":{"crate_id":11,"path":["hashbrown","table","HashTable"],"kind":"struct"},"6:491:7567":{"crate_id":6,"path":["libc","unix","rlimit"],"kind":"struct"},"2:10530:122":{"crate_id":2,"path":["core","fmt","Debug"],"kind":"trait"},"6:4984:7885":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_constant_effect"],"kind":"struct"},"5:1604:10758":{"crate_id":5,"path":["alloc","collections","btree","map","IntoKeys"],"kind":"struct"},"5:1400:11138":{"crate_id":5,"path":["alloc","collections","btree","map","entry","OccupiedEntry"],"kind":"struct"},"6:8343:8605":{"crate_id":6,"path":["libc","unix","linux_like","linux","non_exhaustive","open_how"],"kind":"struct"},"1:8736:4741":{"crate_id":1,"path":["std","panic","BacktraceStyle"],"kind":"enum"},"2:42251:173":{"crate_id":2,"path":["core","net","ip_addr","IpAddr"],"kind":"enum"},"6:5570:8117":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_user_dev"],"kind":"struct"},"11:873:11136":{"crate_id":11,"path":["hashbrown","map","RawVacantEntryMut"],"kind":"struct"},"2:4823:224":{"crate_id":2,"path":["core","cell","RefCell"],"kind":"struct"},"1:881:3989":{"crate_id":1,"path":["std","collections","hash","map","Iter"],"kind":"struct"},"2:46483:8920":{"crate_id":2,"path":["core","core_arch","simd","i16x4"],"kind":"struct"},"17:13970:6393":{"crate_id":17,"path":["object","elf","Rela64"],"kind":"struct"},"24:3765:4265":{"crate_id":24,"path":["syn","token","Unsized"],"kind":"struct"},"1:12465:750":{"crate_id":1,"path":["std","f128"],"kind":"primitive"},"6:5562:8115":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_setup"],"kind":"struct"},"24:5316:3934":{"crate_id":24,"path":["syn","expr","ExprMatch"],"kind":"struct"},"11:396:5796":{"crate_id":11,"path":["hashbrown","raw","RawDrain"],"kind":"struct"},"2:2796:114":{"crate_id":2,"path":["core","clone","Clone"],"kind":"trait"},"18:96:28276":{"crate_id":18,"path":["memchr","memchr","iter","Memchr2"],"kind":"struct"},"17:15864:6859":{"crate_id":17,"path":["object","pe","ImageTlsDirectory32"],"kind":"struct"},"5:1888:5584":{"crate_id":5,"path":["alloc","collections","btree","map","ExtractIf"],"kind":"struct"},"16:7358:7166":{"crate_id":16,"path":["gimli","read","loclists","DebugLoc"],"kind":"struct"},"2:46395:8911":{"crate_id":2,"path":["core","core_arch","simd","u8x8"],"kind":"struct"},"5:7262:5852":{"crate_id":5,"path":["alloc","vec","retain_mut","BackshiftOnDrop"],"kind":"struct"},"16:5224:7206":{"crate_id":16,"path":["gimli","constants","DwDsc"],"kind":"struct"},"1:7839:10654":{"crate_id":1,"path":["std","panicking","rust_panic_without_hook","RewrapBox"],"kind":"struct"},"5:725:10633":{"crate_id":5,"path":["alloc","boxed","from","StringError"],"kind":"struct"},"1:3677:11213":{"crate_id":1,"path":["std","io","Seek"],"kind":"trait"},"24:1279:2635":{"crate_id":24,"path":["syn","lifetime","Lifetime"],"kind":"struct"},"20:781:28296":{"crate_id":20,"path":["proc_macro2","extra","DelimSpanEnum"],"kind":"enum"},"17:16494:6343":{"crate_id":17,"path":["object","xcoff","FileHeader32"],"kind":"struct"},"6:485:7565":{"crate_id":6,"path":["libc","unix","timespec"],"kind":"struct"},"6:6526:8250":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_mmap_req"],"kind":"struct"},"17:12583:6265":{"crate_id":17,"path":["object","read","macho","section","MachOSectionInternal"],"kind":"struct"},"1:1869:11147":{"crate_id":1,"path":["std","env","Vars"],"kind":"struct"},"2:3065:262":{"crate_id":2,"path":["core","convert","TryFrom"],"kind":"trait"},"2:41748:4061":{"crate_id":2,"path":["core","iter","sources","repeat_n","RepeatN"],"kind":"struct"},"1:8206:9626":{"crate_id":1,"path":["std","fs","OpenOptions"],"kind":"struct"},"1:8268:30870":{"crate_id":1,"path":["std","io","buffered","linewritershim","LineWriterShim"],"kind":"struct"},"1:973:11134":{"crate_id":1,"path":["std","collections","hash","map","RawEntryMut"],"kind":"enum"},"2:2770:103":{"crate_id":2,"path":["core","borrow","Borrow"],"kind":"trait"},"2:23532:8640":{"crate_id":2,"path":["core","num","nonzero","private","NonZeroU64Inner"],"kind":"struct"},"20:775:4010":{"crate_id":20,"path":["proc_macro2","extra","DelimSpan"],"kind":"struct"},"17:15739:6830":{"crate_id":17,"path":["object","pe","ImageAuxSymbolSection"],"kind":"struct"},"2:44351:9562":{"crate_id":2,"path":["core","str","iter","Chars"],"kind":"struct"},"1:11012:9096":{"crate_id":1,"path":["std","sys","pal","unix","io","IoSlice"],"kind":"struct"},"5:1585:9458":{"crate_id":5,"path":["alloc","collections","btree","map","Values"],"kind":"struct"},"5:211:5499":{"crate_id":5,"path":["alloc","boxed","thin","ThinBox"],"kind":"struct"},"9:53:10738":{"crate_id":9,"path":["miniz_oxide","inflate","core","DecompressorOxide"],"kind":"struct"},"1:8276:10646":{"crate_id":1,"path":["std","io","buffered","IntoInnerError"],"kind":"struct"},"24:3459:4255":{"crate_id":24,"path":["syn","token","Move"],"kind":"struct"},"2:3304:252":{"crate_id":2,"path":["core","marker","Sync"],"kind":"trait"},"16:2570:7136":{"crate_id":16,"path":["gimli","common","DebugArangesOffset"],"kind":"struct"},"2:45414:9621":{"crate_id":2,"path":["core","alloc","layout","LayoutError"],"kind":"struct"},"16:3889:6090":{"crate_id":16,"path":["gimli","arch","X86_64"],"kind":"struct"},"1:9139:11369":{"crate_id":1,"path":["std","process","CommandArgs"],"kind":"struct"},"17:16362:7009":{"crate_id":17,"path":["object","pe","NonPagedDebugInfo"],"kind":"struct"},"1:904:3988":{"crate_id":1,"path":["std","collections","hash","map","IntoIter"],"kind":"struct"},"6:5051:7918":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_abs_setup"],"kind":"struct"},"17:16595:6360":{"crate_id":17,"path":["object","xcoff","SectionHeader32"],"kind":"struct"},"21:919:257":{"crate_id":21,"path":["proc_macro","bridge","client","TokenStream"],"kind":"struct"},"6:5311:8004":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_filter"],"kind":"struct"},"6:5341:8013":{"crate_id":6,"path":["libc","unix","linux_like","linux","seccomp_notif"],"kind":"struct"},"16:5144:7203":{"crate_id":16,"path":["gimli","constants","DwCc"],"kind":"struct"},"16:7462:23949":{"crate_id":16,"path":["gimli","read","loclists","LocListIter"],"kind":"struct"},"1:1871:11148":{"crate_id":1,"path":["std","env","VarsOs"],"kind":"struct"},"2:4984:4159":{"crate_id":2,"path":["core","cell","UnsafeCell"],"kind":"struct"},"6:4842:7810":{"crate_id":6,"path":["libc","unix","linux_like","linux","signalfd_siginfo"],"kind":"struct"},"6:7563:8547":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","shmid_ds"],"kind":"struct"},"1:6824:10648":{"crate_id":1,"path":["std","sync","poison","PoisonError"],"kind":"struct"},"6:6691:8334":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","sockaddr_xdp"],"kind":"struct"},"2:23059:11501":{"crate_id":2,"path":["core","core_simd","simd","cmp","ord","SimdOrd"],"kind":"trait"},"24:4252:4271":{"crate_id":24,"path":["syn","token","AndAnd"],"kind":"struct"},"6:5682:8168":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_can"],"kind":"struct"},"2:34037:6028":{"crate_id":2,"path":["core","ops","arith","SubAssign"],"kind":"trait"},"2:40860:9523":{"crate_id":2,"path":["core","char","convert","ParseCharError"],"kind":"struct"},"24:1748:28311":{"crate_id":24,"path":["syn","parse","discouraged","AnyDelimiter"],"kind":"trait"},"2:13537:122":{"crate_id":2,"path":["core","str","lossy","Debug"],"kind":"struct"},"1:4113:11288":{"crate_id":1,"path":["std","os","unix","ffi","os_str","OsStringExt"],"kind":"trait"},"2:43536:141":{"crate_id":2,"path":["core","fmt","Error"],"kind":"struct"},"6:517:7587":{"crate_id":6,"path":["libc","unix","ipv6_mreq"],"kind":"struct"},"2:40239:8723":{"crate_id":2,"path":["core","array","TryFromSliceError"],"kind":"struct"},"17:13757:6357":{"crate_id":17,"path":["object","elf","FileHeader64"],"kind":"struct"},"6:7448:8482":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","pthread_attr_t"],"kind":"struct"},"6:8330:8601":{"crate_id":6,"path":["libc","unix","linux_like","linux","canxl_frame"],"kind":"struct"},"17:13055:6208":{"crate_id":17,"path":["object","read","xcoff","section","SectionTable"],"kind":"struct"},"18:613:37645":{"crate_id":18,"path":["memchr","memmem","twoway","SuffixKind"],"kind":"enum"},"17:12319:24155":{"crate_id":17,"path":["object","read","macho","file","MachOFile"],"kind":"struct"},"6:4937:7863":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_absinfo"],"kind":"struct"},"21:141:5616":{"crate_id":21,"path":["proc_macro","bridge","client","Client"],"kind":"struct"},"6:7361:8453":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stack_t"],"kind":"struct"},"2:46625:8936":{"crate_id":2,"path":["core","core_arch","simd","u64x2"],"kind":"struct"},"5:1576:9457":{"crate_id":5,"path":["alloc","collections","btree","map","Keys"],"kind":"struct"},"17:14114:6431":{"crate_id":17,"path":["object","elf","NoteHeader32"],"kind":"struct"},"9:500:7536":{"crate_id":9,"path":["miniz_oxide","StreamResult"],"kind":"struct"},"2:43764:9557":{"crate_id":2,"path":["core","hash","sip","Sip13Rounds"],"kind":"struct"},"24:5609:3952":{"crate_id":24,"path":["syn","lit","LitByteStr"],"kind":"struct"},"5:5972:256":{"crate_id":5,"path":["alloc","string","ToString"],"kind":"trait"},"1:1108:11139":{"crate_id":1,"path":["std","collections","hash","map","VacantEntry"],"kind":"struct"},"2:45301:167":{"crate_id":2,"path":["core","future","into_future","IntoFuture"],"kind":"trait"},"18:735:28285":{"crate_id":18,"path":["memchr","memmem","SearcherKind"],"kind":"enum"},"1:3042:5880":{"crate_id":1,"path":["std","io","error","repr_bitpacked","Repr"],"kind":"struct"},"18:623:37644":{"crate_id":18,"path":["memchr","memmem","twoway","SuffixOrdering"],"kind":"enum"},"24:259:10624":{"crate_id":24,"path":["syn","attr","parsing","DisplayPath"],"kind":"struct"},"6:5282:7992":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_tp"],"kind":"struct"},"2:13966:4090":{"crate_id":2,"path":["core","future","async_drop","Fuse"],"kind":"struct"},"5:5575:16561":{"crate_id":5,"path":["alloc","slice","Join"],"kind":"trait"},"1:4414:11319":{"crate_id":1,"path":["std","os","unix","net","datagram","UnixDatagram"],"kind":"struct"},"2:4464:5825":{"crate_id":2,"path":["core","array","Guard"],"kind":"struct"},"1:11248:9118":{"crate_id":1,"path":["std","sys","pal","unix","process","process_inner","ExitStatus"],"kind":"struct"},"2:44449:9569":{"crate_id":2,"path":["core","str","iter","RSplitTerminator"],"kind":"struct"},"17:16019:6898":{"crate_id":17,"path":["object","pe","ImagePrologueDynamicRelocationHeader"],"kind":"struct"},"16:5379:7211":{"crate_id":16,"path":["gimli","constants","DwLnct"],"kind":"struct"},"1:2554:3756":{"crate_id":1,"path":["std","io"],"kind":"module"},"16:2415:23047":{"crate_id":16,"path":["gimli","common","Format"],"kind":"enum"},"23:281:2635":{"crate_id":23,"path":["quote","__private","push_lifetime_spanned","Lifetime"],"kind":"struct"},"6:5551:8109":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_alg"],"kind":"struct"},"2:44830:9593":{"crate_id":2,"path":["core","str","pattern","CharArrayRefSearcher"],"kind":"struct"},"5:7899:5585":{"crate_id":5,"path":["alloc","vec","splice","Splice"],"kind":"struct"},"2:23192:9505":{"crate_id":2,"path":["core","num","bignum","tests","Big8x3"],"kind":"struct"},"17:12371:6229":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandIterator"],"kind":"struct"},"6:8319:8600":{"crate_id":6,"path":["libc","unix","linux_like","linux","canfd_frame"],"kind":"struct"},"6:4947:7869":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_keymap_entry"],"kind":"struct"},"24:3204:4244":{"crate_id":24,"path":["syn","token","Dyn"],"kind":"struct"},"17:2406:24085":{"crate_id":17,"path":["object","read","elf","relocation","ElfDynamicRelocationIterator"],"kind":"struct"},"2:12391:16569":{"crate_id":2,"path":["core","slice","iter","ChunkBy"],"kind":"struct"},"17:15701:6816":{"crate_id":17,"path":["object","pe","ImageAuxSymbolFunction"],"kind":"struct"},"6:6507:8248":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","mallinfo2"],"kind":"struct"},"2:41241:4088":{"crate_id":2,"path":["core","iter","adapters","filter_map","FilterMap"],"kind":"struct"},"17:10938:37628":{"crate_id":17,"path":["object","read","any","SegmentIteratorInternal"],"kind":"enum"},"11:1140:22999":{"crate_id":11,"path":["hashbrown","map","VacantEntryRef"],"kind":"struct"},"1:8498:9095":{"crate_id":1,"path":["std","io","util","Sink"],"kind":"struct"},"1:5804:8378":{"crate_id":1,"path":["std","process","exit"],"kind":"function"},"6:5230:7962":{"crate_id":6,"path":["libc","unix","linux_like","linux","arpd_request"],"kind":"struct"},"1:380:5384":{"crate_id":1,"path":["std","thread","scoped","Scope"],"kind":"struct"},"1:5316:30840":{"crate_id":1,"path":["std","path","fmt","DebugHelper"],"kind":"struct"},"24:5812:2919":{"crate_id":24,"path":["syn","path","PathArguments"],"kind":"enum"},"2:41733:4057":{"crate_id":2,"path":["core","iter","sources","once_with","OnceWith"],"kind":"struct"},"16:7016:9390":{"crate_id":16,"path":["gimli","read","index","UnitIndexSectionIterator"],"kind":"struct"},"5:7750:16712":{"crate_id":5,"path":["alloc","ffi","c_str","FromBytesWithNulErrorKind"],"kind":"enum"},"1:7906:10655":{"crate_id":1,"path":["std","backtrace_rs","symbolize","SymbolName"],"kind":"struct"},"17:13349:9296":{"crate_id":17,"path":["object","read","SymbolMap"],"kind":"struct"},"24:5468:3181":{"crate_id":24,"path":["syn","generics","TypeParam"],"kind":"struct"},"16:7959:9432":{"crate_id":16,"path":["gimli","read","pubnames","PubNamesEntryIter"],"kind":"struct"},"2:22983:5522":{"crate_id":2,"path":["core","core_simd","simd","ptr","mut_ptr","SimdMutPtr","with_exposed_provenance"],"kind":"function"},"2:10476:4141":{"crate_id":2,"path":["core","fmt","Write"],"kind":"trait"},"2:13062:9573":{"crate_id":2,"path":["core","str","iter","MatchIndicesInternal"],"kind":"struct"},"1:8213:9055":{"crate_id":1,"path":["std","fs","FileTimes"],"kind":"struct"},"2:44585:9577":{"crate_id":2,"path":["core","str","iter","Matches"],"kind":"struct"},"16:6625:9369":{"crate_id":16,"path":["gimli","read","cfi","PointerEncodingParameters"],"kind":"struct"},"2:36778:4308":{"crate_id":2,"path":["core","ops","bit","Shr"],"kind":"trait"},"6:5477:8085":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_authinfo"],"kind":"struct"},"2:42643:229":{"crate_id":2,"path":["core","result","Result"],"kind":"enum"},"1:3496:11241":{"crate_id":1,"path":["std","io","stdio","IsTerminal"],"kind":"trait"},"2:47545:9015":{"crate_id":2,"path":["core","core_arch","simd","u64x8"],"kind":"struct"},"2:9987:92":{"crate_id":2,"path":["core","sync","atomic","AtomicPtr"],"kind":"struct"},"24:5306:2898":{"crate_id":24,"path":["syn","expr","ExprLit"],"kind":"struct"},"2:23299:9509":{"crate_id":2,"path":["core","num","dec2flt","ParseFloatError"],"kind":"struct"},"18:538:6061":{"crate_id":18,"path":["memchr","memmem","rabinkarp","NeedleHash"],"kind":"struct"},"24:3102:105":{"crate_id":24,"path":["syn","token","Break"],"kind":"struct"},"17:11065:24027":{"crate_id":17,"path":["object","read","any","ComdatIterator"],"kind":"struct"},"17:13222:24033":{"crate_id":17,"path":["object","read","FileKind"],"kind":"enum"},"24:5309:3933":{"crate_id":24,"path":["syn","expr","ExprLoop"],"kind":"struct"},"18:726:6079":{"crate_id":18,"path":["memchr","memmem","SearcherConfig"],"kind":"struct"},"20:738:2558":{"crate_id":20,"path":["proc_macro2","fallback","Ident"],"kind":"struct"},"17:15573:6789":{"crate_id":17,"path":["object","pe","AnonObjectHeader"],"kind":"struct"},"1:12462:752":{"crate_id":1,"path":["std","f16"],"kind":"primitive"},"2:2820:5141":{"crate_id":2,"path":["core","clone","InitializingSlice"],"kind":"struct"},"24:5008:2563":{"crate_id":24,"path":["syn","derive","Data"],"kind":"enum"},"2:3919:71":{"crate_id":2,"path":["core","any","Any"],"kind":"trait"},"16:8066:23954":{"crate_id":16,"path":["gimli","read","rnglists","RawRngListEntry"],"kind":"enum"},"6:4914:7855":{"crate_id":6,"path":["libc","unix","linux_like","linux","sembuf"],"kind":"struct"},"20:806:37678":{"crate_id":20,"path":["proc_macro2","imp","TokenTreeIter"],"kind":"enum"},"17:13798:6360":{"crate_id":17,"path":["object","elf","SectionHeader32"],"kind":"struct"},"6:1563:7669":{"crate_id":6,"path":["libc","unix","linux_like","fd_set"],"kind":"struct"},"1:4119:11287":{"crate_id":1,"path":["std","os","unix","ffi","os_str","OsStrExt"],"kind":"trait"},"2:10543:4145":{"crate_id":2,"path":["core","fmt","UpperHex"],"kind":"trait"},"24:5349:3937":{"crate_id":24,"path":["syn","expr","ExprReturn"],"kind":"struct"},"2:32832:2584":{"crate_id":2,"path":["core","marker","Tuple"],"kind":"trait"},"2:42511:197":{"crate_id":2,"path":["core","option","Option"],"kind":"enum"},"18:491:9238":{"crate_id":18,"path":["memchr","cow","Imp"],"kind":"struct"},"2:45008:9607":{"crate_id":2,"path":["core","str","lossy","Utf8Chunks"],"kind":"struct"},"1:10983:9055":{"crate_id":1,"path":["std","sys","pal","unix","fs","FileTimes"],"kind":"struct"},"2:45107:9612":{"crate_id":2,"path":["core","str","CharEscapeDefault"],"kind":"struct"},"2:2670:5522":{"crate_id":2,"path":["core","ptr","with_exposed_provenance"],"kind":"function"},"16:8105:7329":{"crate_id":16,"path":["gimli","read","rnglists","RawRange"],"kind":"struct"},"6:5428:8051":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_sndrcvinfo"],"kind":"struct"},"24:4339:4277":{"crate_id":24,"path":["syn","token","Comma"],"kind":"struct"},"11:2559:7473":{"crate_id":11,"path":["hashbrown","raw","TableLayout"],"kind":"struct"},"24:4612:4295":{"crate_id":24,"path":["syn","token","OrEq"],"kind":"struct"},"2:46838:8947":{"crate_id":2,"path":["core","core_arch","simd","m64x2"],"kind":"struct"},"2:44357:9563":{"crate_id":2,"path":["core","str","iter","CharIndices"],"kind":"struct"},"2:6376:4078":{"crate_id":2,"path":["core","iter","adapters","flatten","Flatten"],"kind":"struct"},"6:5295:7997":{"crate_id":6,"path":["libc","unix","linux_like","linux","can_filter"],"kind":"struct"},"17:13209:141":{"crate_id":17,"path":["object","read","Error"],"kind":"struct"},"2:40169:219":{"crate_id":2,"path":["core","ops","range","RangeToInclusive"],"kind":"struct"},"6:8284:8592":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_cond_t"],"kind":"struct"},"17:13006:6284":{"crate_id":17,"path":["object","read","pe","rich","RichHeaderEntry"],"kind":"struct"},"5:5835:5590":{"crate_id":5,"path":["alloc","string","retain","SetLenOnDrop"],"kind":"struct"},"2:40943:16627":{"crate_id":2,"path":["core","char","EscapeDebugInner"],"kind":"enum"},"17:12897:9291":{"crate_id":17,"path":["object","read","pe","import","DelayLoadDescriptorIterator"],"kind":"struct"},"9:422:22921":{"crate_id":9,"path":["miniz_oxide","MZStatus"],"kind":"enum"},"2:3829:131":{"crate_id":2,"path":["core","ops","unsize","DispatchFromDyn"],"kind":"trait"},"17:12066:6225":{"crate_id":17,"path":["object","read","elf","version","Version"],"kind":"struct"},"2:44279:9501":{"crate_id":2,"path":["core","slice","iter","RChunks"],"kind":"struct"},"1:7397:5901":{"crate_id":1,"path":["std","sys","thread_local","abort_on_dtor_unwind","DtorUnwindGuard"],"kind":"struct"},"24:1934:2633":{"crate_id":24,"path":["syn","parse_quote"],"kind":"macro"},"5:7789:5834":{"crate_id":5,"path":["alloc","rc","UniqueRc"],"kind":"struct"},"2:46853:8948":{"crate_id":2,"path":["core","core_arch","simd","u8x32"],"kind":"struct"},"24:5497:3112":{"crate_id":24,"path":["syn","generics","TypeParamBound"],"kind":"enum"},"17:10729:6194":{"crate_id":17,"path":["object","endian","I64Bytes"],"kind":"struct"},"2:42604:4129":{"crate_id":2,"path":["core","panic","unwind_safe","UnwindSafe"],"kind":"trait"},"2:14058:208":{"crate_id":2,"path":["core","future","pending","Pending"],"kind":"struct"},"17:12359:24178":{"crate_id":17,"path":["object","read","macho","file","MachOComdatSectionIterator"],"kind":"struct"},"16:7807:37608":{"crate_id":16,"path":["gimli","read","op","EvaluationWaiting"],"kind":"enum"},"6:6419:8199":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","aiocb"],"kind":"struct"},"5:7620:9477":{"crate_id":5,"path":["alloc","collections","btree","set_val","SetValZST"],"kind":"struct"},"6:6411:8197":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","statx_timestamp"],"kind":"struct"},"1:4780:11340":{"crate_id":1,"path":["std","os","unix","thread","JoinHandleExt"],"kind":"trait"},"2:45388:11511":{"crate_id":2,"path":["core","task","wake","ContextBuilder"],"kind":"struct"},"21:2246:2546":{"crate_id":21,"path":["proc_macro","bridge","Group"],"kind":"struct"},"11:1085:37542":{"crate_id":11,"path":["hashbrown","map","KeyOrRef"],"kind":"enum"},"16:5172:7204":{"crate_id":16,"path":["gimli","constants","DwInl"],"kind":"struct"},"6:5349:8014":{"crate_id":6,"path":["libc","unix","linux_like","linux","seccomp_notif_resp"],"kind":"struct"},"24:5336:3935":{"crate_id":24,"path":["syn","expr","ExprRange"],"kind":"struct"},"11:785:9458":{"crate_id":11,"path":["hashbrown","map","Values"],"kind":"struct"},"16:8043:37568":{"crate_id":16,"path":["gimli","read","rnglists","RangeListsFormat"],"kind":"enum"},"1:8643:11268":{"crate_id":1,"path":["std","os","unix","net","listener","Incoming"],"kind":"struct"},"5:7604:3988":{"crate_id":5,"path":["alloc","collections","btree","set","IntoIter"],"kind":"struct"},"1:8546:4098":{"crate_id":1,"path":["std","io","Take"],"kind":"struct"},"2:12816:16727":{"crate_id":2,"path":["core","slice","SlicePattern"],"kind":"trait"},"24:1793:4114":{"crate_id":24,"path":["syn","parse","ParseBuffer"],"kind":"struct"},"24:2085:11063":{"crate_id":24,"path":["syn","path","printing","span","QSelfDelimiters"],"kind":"struct"},"2:44178:9498":{"crate_id":2,"path":["core","slice","iter","Windows"],"kind":"struct"},"17:12347:24177":{"crate_id":17,"path":["object","read","macho","file","MachOComdat"],"kind":"struct"},"17:16728:7101":{"crate_id":17,"path":["object","xcoff","FunAux32"],"kind":"struct"},"17:16701:7092":{"crate_id":17,"path":["object","xcoff","CsectAux32"],"kind":"struct"},"1:10387:11157":{"crate_id":1,"path":["std","sys","pal","unix","os","SplitPaths"],"kind":"struct"},"2:3299:120":{"crate_id":2,"path":["core","marker","Copy"],"kind":"trait"},"2:3058:148":{"crate_id":2,"path":["core","convert","From"],"kind":"trait"},"24:6017:3965":{"crate_id":24,"path":["syn","ty","BareFnArg"],"kind":"struct"},"20:0:2393":{"crate_id":20,"path":["proc_macro2"],"kind":"module"},"24:3272:4247":{"crate_id":24,"path":["syn","token","Final"],"kind":"struct"},"2:32734:9518":{"crate_id":2,"path":["core","error","Source"],"kind":"struct"},"2:4608:16612":{"crate_id":2,"path":["core","async_iter","async_iter","IntoAsyncIterator"],"kind":"trait"},"17:15989:6892":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation64"],"kind":"struct"},"16:0:3749":{"crate_id":16,"path":["gimli"],"kind":"module"},"1:11473:7533":{"crate_id":1,"path":["std","sys","os_str","bytes","Buf"],"kind":"struct"},"2:23598:8646":{"crate_id":2,"path":["core","num","nonzero","private","NonZeroI64Inner"],"kind":"struct"},"4:0:3741":{"crate_id":4,"path":["rustc_std_workspace_core"],"kind":"module"},"5:296:2606":{"crate_id":5,"path":["alloc","boxed","Box"],"kind":"struct"},"2:44967:9597":{"crate_id":2,"path":["core","str","pattern","EmptyNeedle"],"kind":"struct"},"17:13537:6277":{"crate_id":17,"path":["object","read","Relocation"],"kind":"struct"},"17:16761:7108":{"crate_id":17,"path":["object","xcoff","BlockAux32"],"kind":"struct"},"2:44977:9601":{"crate_id":2,"path":["core","str","pattern","TwoWaySearcher"],"kind":"struct"},"6:5117:7932":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Sym"],"kind":"struct"},"11:2566:4045":{"crate_id":11,"path":["hashbrown","TryReserveError"],"kind":"enum"},"1:10817:5372":{"crate_id":1,"path":["std","sys","pal","unix","thread","Thread"],"kind":"struct"},"2:44503:9572":{"crate_id":2,"path":["core","str","iter","RSplitN"],"kind":"struct"},"1:10548:116":{"crate_id":1,"path":["std","sys","pal","unix","process","process_common","Command"],"kind":"struct"},"1:9310:118":{"crate_id":1,"path":["std","sync","mpmc","context","Context"],"kind":"struct"},"1:9292:9125":{"crate_id":1,"path":["std","sync","condvar","WaitTimeoutResult"],"kind":"struct"},"16:2966:7154":{"crate_id":16,"path":["gimli","common","DebugFrameOffset"],"kind":"struct"},"2:2282:192":{"crate_id":2,"path":["core","ptr","non_null","NonNull"],"kind":"struct"},"2:23410:9511":{"crate_id":2,"path":["core","num","fmt","Formatted"],"kind":"struct"},"21:213:10713":{"crate_id":21,"path":["proc_macro","bridge","fxhash","FxHasher"],"kind":"struct"},"2:46462:8919":{"crate_id":2,"path":["core","core_arch","simd","i8x8"],"kind":"struct"},"6:4970:7877":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_trigger"],"kind":"struct"},"16:7990:9434":{"crate_id":16,"path":["gimli","read","pubtypes","PubTypesEntryIter"],"kind":"struct"},"2:44399:9497":{"crate_id":2,"path":["core","str","iter","RSplit"],"kind":"struct"},"2:3381:5488":{"crate_id":2,"path":["core","ops","async_function","AsyncFnMut"],"kind":"trait"},"5:4162:5801":{"crate_id":5,"path":["alloc","collections","vec_deque","drain","drop","DropGuard"],"kind":"struct"},"2:45364:8898":{"crate_id":2,"path":["core","task","wake","RawWakerVTable"],"kind":"struct"},"16:2620:7138":{"crate_id":16,"path":["gimli","common","DebugLineOffset"],"kind":"struct"},"24:5821:2922":{"crate_id":24,"path":["syn","path","GenericArgument"],"kind":"enum"},"2:40074:216":{"crate_id":2,"path":["core","ops","range","RangeFull"],"kind":"struct"},"17:13610:6323":{"crate_id":17,"path":["object","read","CompressedData"],"kind":"struct"},"1:11045:10640":{"crate_id":1,"path":["std","sys","pal","unix","os","JoinPathsError"],"kind":"struct"},"2:2142:1385":{"crate_id":2,"path":["core","ptr"],"kind":"module"},"15:288:23028":{"crate_id":15,"path":["addr2line","LocationRangeIter"],"kind":"struct"},"1:4702:11323":{"crate_id":1,"path":["std","os","unix","process","ExitStatusExt"],"kind":"trait"},"2:45115:9614":{"crate_id":2,"path":["core","str","IsAsciiWhitespace"],"kind":"struct"},"6:5593:8124":{"crate_id":6,"path":["libc","unix","linux_like","linux","mq_attr"],"kind":"struct"},"16:6843:9374":{"crate_id":16,"path":["gimli","read","abbrev","Abbreviations"],"kind":"struct"},"16:7578:9126":{"crate_id":16,"path":["gimli","read","op","Operation"],"kind":"enum"},"17:11720:9259":{"crate_id":17,"path":["object","read","coff","import","ImportFile"],"kind":"struct"},"24:5615:3954":{"crate_id":24,"path":["syn","lit","LitChar"],"kind":"struct"},"17:11831:6208":{"crate_id":17,"path":["object","read","elf","section","SectionTable"],"kind":"struct"},"24:3323:4249":{"crate_id":24,"path":["syn","token","If"],"kind":"struct"},"2:41510:4099":{"crate_id":2,"path":["core","iter","adapters","take_while","TakeWhile"],"kind":"struct"},"2:39398:6036":{"crate_id":2,"path":["core","ops","bit","ShrAssign"],"kind":"trait"},"6:6381:8172":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","statx"],"kind":"struct"},"2:23245:8618":{"crate_id":2,"path":["core","num","dec2flt","common","BiasedFp"],"kind":"struct"},"1:5736:11367":{"crate_id":1,"path":["std","process","Stdio"],"kind":"struct"},"2:23324:8623":{"crate_id":2,"path":["core","num","diy_float","Fp"],"kind":"struct"},"2:45127:9617":{"crate_id":2,"path":["core","str","UnsafeBytesToStr"],"kind":"struct"},"1:8559:9494":{"crate_id":1,"path":["std","io","Split"],"kind":"struct"},"1:12468:916":{"crate_id":1,"path":["std","i32"],"kind":"primitive"},"2:46927:8966":{"crate_id":2,"path":["core","core_arch","simd","u32x8"],"kind":"struct"},"2:44673:9583":{"crate_id":2,"path":["core","str","iter","EncodeUtf16"],"kind":"struct"},"2:44956:16598":{"crate_id":2,"path":["core","str","pattern","StrSearcherImpl"],"kind":"enum"},"16:6588:7224":{"crate_id":16,"path":["gimli","read","cfi","UnwindExpression"],"kind":"struct"},"16:2860:7149":{"crate_id":16,"path":["gimli","common","DebugStrOffset"],"kind":"struct"},"16:8028:7325":{"crate_id":16,"path":["gimli","read","rnglists","RangeLists"],"kind":"struct"},"23:38:3620":{"crate_id":23,"path":["quote","format_ident"],"kind":"macro"},"17:11788:24100":{"crate_id":17,"path":["object","read","elf","file","ElfFile"],"kind":"struct"},"17:12776:24211":{"crate_id":17,"path":["object","read","pe","section","PeRelocationIterator"],"kind":"struct"},"24:5389:2581":{"crate_id":24,"path":["syn","expr","Member"],"kind":"enum"},"24:5855:2940":{"crate_id":24,"path":["syn","path","Constraint"],"kind":"struct"},"6:570:7615":{"crate_id":6,"path":["libc","unix","tms"],"kind":"struct"},"2:45377:34989":{"crate_id":2,"path":["core","task","wake","ExtData"],"kind":"enum"},"2:31530:5154":{"crate_id":2,"path":["core","cmp","Reverse"],"kind":"struct"},"2:23260:9506":{"crate_id":2,"path":["core","num","dec2flt","decimal","Decimal"],"kind":"struct"},"2:11605:3993":{"crate_id":2,"path":["core","slice","iter","IterMut"],"kind":"struct"},"1:12039:30866":{"crate_id":1,"path":["std","panicking","panic_count","MustAbort"],"kind":"enum"},"6:1584:7683":{"crate_id":6,"path":["libc","unix","linux_like","sched_param"],"kind":"struct"},"14:7:10626":{"crate_id":14,"path":["rustc_demangle","legacy","Demangle"],"kind":"struct"},"17:14672:6533":{"crate_id":17,"path":["object","macho","RoutinesCommand64"],"kind":"struct"},"24:2107:37813":{"crate_id":24,"path":["syn","precedence","Precedence"],"kind":"enum"},"16:7223:9398":{"crate_id":16,"path":["gimli","read","line","LineProgramHeader"],"kind":"struct"},"2:34729:6012":{"crate_id":2,"path":["core","ops","bit","BitXor"],"kind":"trait"},"1:6706:4055":{"crate_id":1,"path":["std","sync","once","Once"],"kind":"struct"},"5:3091:4256":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Mut"],"kind":"struct"},"1:8011:5386":{"crate_id":1,"path":["std","thread","local","AccessError"],"kind":"struct"},"16:5318:7209":{"crate_id":16,"path":["gimli","constants","DwLns"],"kind":"struct"},"16:6608:209":{"crate_id":16,"path":["gimli","read","cfi","Pointer"],"kind":"enum"},"17:11448:24048":{"crate_id":17,"path":["object","read","archive","ArchiveMember"],"kind":"struct"},"1:11887:5913":{"crate_id":1,"path":["std","sys_common","net","LookupHost"],"kind":"struct"},"2:3674:214":{"crate_id":2,"path":["core","ops","range","RangeBounds"],"kind":"trait"},"17:14627:6528":{"crate_id":17,"path":["object","macho","DylinkerCommand"],"kind":"struct"},"24:4648:4298":{"crate_id":24,"path":["syn","token","Percent"],"kind":"struct"},"16:6188:9316":{"crate_id":16,"path":["gimli","read","cfi","CfiEntriesIter"],"kind":"struct"},"12:0:3746":{"crate_id":12,"path":["rustc_std_workspace_alloc"],"kind":"module"},"2:42635:5378":{"crate_id":2,"path":["core","pin","Pin"],"kind":"struct"},"2:13002:9565":{"crate_id":2,"path":["core","str","iter","SplitInternal"],"kind":"struct"},"6:6680:8332":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ptrace_syscall_info"],"kind":"struct"},"1:11037:11345":{"crate_id":1,"path":["std","sys","pal","unix","linux","pidfd","PidFd"],"kind":"struct"},"1:3077:141":{"crate_id":1,"path":["std","io","error","Error"],"kind":"struct"},"24:4974:2617":{"crate_id":24,"path":["syn","data","Fields"],"kind":"enum"},"16:8612:7177":{"crate_id":16,"path":["gimli","read","unit","DebugTypes"],"kind":"struct"},"11:2533:2546":{"crate_id":11,"path":["hashbrown","raw","sse2","Group"],"kind":"struct"},"2:8178:4054":{"crate_id":2,"path":["core","iter","sources","once","once"],"kind":"function"},"2:4953:4157":{"crate_id":2,"path":["core","cell","BorrowRefMut"],"kind":"struct"},"11:2380:3989":{"crate_id":11,"path":["hashbrown","table","Iter"],"kind":"struct"},"17:15431:6745":{"crate_id":17,"path":["object","pe","ImageDataDirectory"],"kind":"struct"},"2:41524:4100":{"crate_id":2,"path":["core","iter","adapters","zip","Zip"],"kind":"struct"},"6:4964:7875":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_replay"],"kind":"struct"},"2:33698:6027":{"crate_id":2,"path":["core","ops","arith","Rem"],"kind":"trait"},"20:687:4011":{"crate_id":20,"path":["proc_macro2","marker","ProcMacroAutoTraits"],"kind":"struct"},"24:5237:3922":{"crate_id":24,"path":["syn","expr","ExprAwait"],"kind":"struct"},"11:2545:7470":{"crate_id":11,"path":["hashbrown","raw","bitmask","BitMaskIter"],"kind":"struct"},"1:7825:10653":{"crate_id":1,"path":["std","panicking","begin_panic","Payload"],"kind":"struct"},"2:34556:5074":{"crate_id":2,"path":["core","ops","bit","BitOr"],"kind":"trait"},"21:2746:2558":{"crate_id":21,"path":["proc_macro","Ident"],"kind":"struct"},"13:229:7468":{"crate_id":13,"path":["std_detect","detect","cache","Initializer"],"kind":"struct"},"5:4909:819":{"crate_id":5,"path":["alloc","fmt"],"kind":"module"},"5:3308:36938":{"crate_id":5,"path":["alloc","collections","btree","set","DifferenceInner"],"kind":"enum"},"24:592:3998":{"crate_id":24,"path":["syn","drops","NoDrop"],"kind":"struct"},"6:1569:7671":{"crate_id":6,"path":["libc","unix","linux_like","tm"],"kind":"struct"},"1:599:5369":{"crate_id":1,"path":["std","thread","JoinHandle"],"kind":"struct"},"5:788:121":{"crate_id":5,"path":["alloc","borrow","Cow"],"kind":"enum"},"17:14520:6512":{"crate_id":17,"path":["object","macho","FvmlibCommand"],"kind":"struct"},"1:12450:426":{"crate_id":1,"path":["std","bool"],"kind":"primitive"},"24:3391:4253":{"crate_id":24,"path":["syn","token","Loop"],"kind":"struct"},"2:2206:5537":{"crate_id":2,"path":["core","ptr","metadata","Pointee"],"kind":"trait"},"17:15876:6860":{"crate_id":17,"path":["object","pe","ImageImportDescriptor"],"kind":"struct"},"1:4341:11316":{"crate_id":1,"path":["std","os","unix","net","ancillary","ScmCredentials"],"kind":"struct"},"2:9511:4837":{"crate_id":2,"path":["core","panic","panic_info","PanicMessage"],"kind":"struct"},"17:13733:6343":{"crate_id":17,"path":["object","elf","FileHeader32"],"kind":"struct"},"2:3346:5137":{"crate_id":2,"path":["core","marker","FnPtr"],"kind":"trait"},"1:10958:9640":{"crate_id":1,"path":["std","sys","pal","unix","fs","StatxExtraFields"],"kind":"struct"},"11:2301:9428":{"crate_id":11,"path":["hashbrown","table","Entry"],"kind":"enum"},"17:14872:6579":{"crate_id":17,"path":["object","macho","LinkeditDataCommand"],"kind":"struct"},"21:109:5615":{"crate_id":21,"path":["proc_macro","bridge","client","Bridge"],"kind":"struct"},"24:5560:2635":{"crate_id":24,"path":["syn","lifetime","Lifetime"],"kind":"function"},"24:291:37833":{"crate_id":24,"path":["syn","bigint","BigInt"],"kind":"struct"},"21:181:5231":{"crate_id":21,"path":["proc_macro","bridge","closure","Closure"],"kind":"struct"},"24:1070:37829":{"crate_id":24,"path":["syn","generics","ConstParams"],"kind":"struct"},"2:3052:77":{"crate_id":2,"path":["core","convert","AsMut"],"kind":"trait"},"18:573:6057":{"crate_id":18,"path":["memchr","memmem","twoway","Forward"],"kind":"struct"},"1:9751:5906":{"crate_id":1,"path":["std","sys","pal","unix","fs","Dir"],"kind":"struct"},"6:6599:8300":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ntptimeval"],"kind":"struct"},"17:13041:24219":{"crate_id":17,"path":["object","read","xcoff","section","XcoffSection"],"kind":"struct"},"16:3141:6085":{"crate_id":16,"path":["gimli","arch","Arm"],"kind":"struct"},"1:8649:9100":{"crate_id":1,"path":["std","os","unix","net","ucred","UCred"],"kind":"struct"},"2:2773:104":{"crate_id":2,"path":["core","borrow","BorrowMut"],"kind":"trait"},"2:45315:230":{"crate_id":2,"path":["core","future","ResumeTy"],"kind":"struct"},"6:5301:8000":{"crate_id":6,"path":["libc","unix","linux_like","linux","j1939_filter"],"kind":"struct"},"5:1635:11140":{"crate_id":5,"path":["alloc","collections","btree","map","RangeMut"],"kind":"struct"},"24:5345:3936":{"crate_id":24,"path":["syn","expr","ExprRepeat"],"kind":"struct"},"6:4902:7846":{"crate_id":6,"path":["libc","unix","linux_like","linux","msginfo"],"kind":"struct"},"1:5807:11368":{"crate_id":1,"path":["std","process","Termination"],"kind":"trait"},"6:7463:8487":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_xmmreg"],"kind":"struct"},"24:6011:3979":{"crate_id":24,"path":["syn","ty","TypeTuple"],"kind":"struct"},"2:40871:34159":{"crate_id":2,"path":["core","char","convert","CharErrorKind"],"kind":"enum"},"1:4827:8470":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt","st_mtime"],"kind":"function"},"24:5396:3166":{"crate_id":24,"path":["syn","expr","Index"],"kind":"struct"},"2:47664:9024":{"crate_id":2,"path":["core","core_arch","x86","__m512"],"kind":"struct"},"2:23417:8636":{"crate_id":2,"path":["core","num","error","TryFromIntError"],"kind":"struct"},"1:11333:165":{"crate_id":1,"path":["std","sys","pal","unix","time","Instant"],"kind":"struct"},"17:12962:24213":{"crate_id":17,"path":["object","read","pe","resource","ResourceDirectoryEntryData"],"kind":"enum"},"2:23383:34169":{"crate_id":2,"path":["core","num","fmt","Part"],"kind":"enum"},"14:220:7460":{"crate_id":14,"path":["rustc_demangle","SizeLimitExhausted"],"kind":"struct"},"1:938:5586":{"crate_id":1,"path":["std","collections","hash","map","Drain"],"kind":"struct"},"5:7883:5584":{"crate_id":5,"path":["alloc","vec","extract_if","ExtractIf"],"kind":"struct"},"17:14997:6608":{"crate_id":17,"path":["object","macho","LinkerOptionCommand"],"kind":"struct"},"17:16668:7085":{"crate_id":17,"path":["object","xcoff","FileAux32"],"kind":"struct"},"16:6696:23942":{"crate_id":16,"path":["gimli","read","dwarf","DwarfPackage"],"kind":"struct"},"24:4863:4313":{"crate_id":24,"path":["syn","token","StarEq"],"kind":"struct"},"6:5441:8061":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_sndinfo"],"kind":"struct"},"16:5649:7214":{"crate_id":16,"path":["gimli","constants","DwOp"],"kind":"struct"},"1:11000:9133":{"crate_id":1,"path":["std","sys","pal","unix","fs","Mode"],"kind":"struct"},"16:8483:3890":{"crate_id":16,"path":["gimli","read","unit","Attribute"],"kind":"struct"},"6:1500:7633":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreqn"],"kind":"struct"},"2:47143:8974":{"crate_id":2,"path":["core","core_arch","simd","m16x16"],"kind":"struct"},"24:3595:4261":{"crate_id":24,"path":["syn","token","SelfValue"],"kind":"struct"},"16:6866:23944":{"crate_id":16,"path":["gimli","read","abbrev","Attributes"],"kind":"enum"},"23:0:1425":{"crate_id":23,"path":["quote"],"kind":"module"},"6:6462:8217":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","msghdr"],"kind":"struct"},"1:9581:5652":{"crate_id":1,"path":["std","sys","pal","unix","args","Args"],"kind":"struct"},"1:3310:32491":{"crate_id":1,"path":["std","io","stdio","StdoutRaw"],"kind":"struct"},"11:740:10759":{"crate_id":11,"path":["hashbrown","map","IntoValues"],"kind":"struct"},"2:44266:16565":{"crate_id":2,"path":["core","slice","iter","ArrayChunksMut"],"kind":"struct"},"23:513:1425":{"crate_id":23,"path":["quote","quote"],"kind":"macro"},"1:1854:711":{"crate_id":1,"path":["std","env"],"kind":"module"},"13:110:37556":{"crate_id":13,"path":["std_detect","detect","arch","x86","Feature"],"kind":"enum"},"2:45095:9609":{"crate_id":2,"path":["core","str","LinesMap"],"kind":"struct"},"2:4896:4155":{"crate_id":2,"path":["core","cell","BorrowRef"],"kind":"struct"},"6:7487:8499":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user_regs_struct"],"kind":"struct"},"2:13078:9576":{"crate_id":2,"path":["core","str","iter","MatchesInternal"],"kind":"struct"},"20:518:4007":{"crate_id":20,"path":["proc_macro2","LexError"],"kind":"struct"},"18:515:6060":{"crate_id":18,"path":["memchr","memmem","prefilter","PrefilterFn"],"kind":"struct"},"24:3119:2938":{"crate_id":24,"path":["syn","token","Const"],"kind":"struct"},"2:22930:34811":{"crate_id":2,"path":["core","core_simd","simd","ptr","const_ptr","SimdConstPtr","with_addr"],"kind":"function"},"6:5494:8090":{"crate_id":6,"path":["libc","unix","linux_like","linux","tls12_crypto_info_aes_gcm_128"],"kind":"struct"},"17:15540:6786":{"crate_id":17,"path":["object","pe","ImageNtHeaders32"],"kind":"struct"},"1:2328:11194":{"crate_id":1,"path":["std","fs","DirEntry"],"kind":"struct"},"2:41250:9536":{"crate_id":2,"path":["core","iter","adapters","flatten","FlattenCompat"],"kind":"struct"},"17:12163:9271":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSubsectionIterator"],"kind":"struct"},"2:6885:4102":{"crate_id":2,"path":["core","iter","adapters","intersperse","IntersperseWith"],"kind":"struct"},"17:10368:24018":{"crate_id":17,"path":["object","common","FileFlags"],"kind":"enum"},"16:6173:9314":{"crate_id":16,"path":["gimli","read","cfi","SectionBaseAddresses"],"kind":"struct"},"24:5404:58":{"crate_id":24,"path":["syn","expr","parsing","kw","builtin"],"kind":"struct"},"18:643:6057":{"crate_id":18,"path":["memchr","memmem","x86","avx","nostd","Forward"],"kind":"struct"},"24:4706:4302":{"crate_id":24,"path":["syn","token","Pound"],"kind":"struct"},"2:44340:9561":{"crate_id":2,"path":["core","str","error","ParseBoolError"],"kind":"struct"},"17:12983:24214":{"crate_id":17,"path":["object","read","pe","resource","ResourceNameOrId"],"kind":"enum"},"17:16385:7013":{"crate_id":17,"path":["object","pe","ImportObjectHeader"],"kind":"struct"},"17:12570:24140":{"crate_id":17,"path":["object","read","macho","section","MachOSection"],"kind":"struct"},"1:9420:190":{"crate_id":1,"path":["std","sync","mutex","MutexGuard"],"kind":"struct"},"24:4636:4297":{"crate_id":24,"path":["syn","token","PathSep"],"kind":"struct"},"2:22585:34591":{"crate_id":2,"path":["core","core_simd","vector","splat","Splat"],"kind":"struct"},"17:10516:24023":{"crate_id":17,"path":["object","endian","Endianness"],"kind":"enum"},"24:5328:3914":{"crate_id":24,"path":["syn","expr","ExprParen"],"kind":"struct"},"17:12095:9266":{"crate_id":17,"path":["object","read","elf","version","VerdefIterator"],"kind":"struct"},"16:7212:9397":{"crate_id":16,"path":["gimli","read","line","LineSequence"],"kind":"struct"},"6:4976:7880":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_envelope"],"kind":"struct"},"20:693:4125":{"crate_id":20,"path":["proc_macro2","parse","Cursor"],"kind":"struct"},"1:6952:236":{"crate_id":1,"path":["std","sync","rwlock","RwLock"],"kind":"struct"},"1:3448:11251":{"crate_id":1,"path":["std","io","stdio","StderrLock"],"kind":"struct"},"17:15531:6782":{"crate_id":17,"path":["object","pe","ImageNtHeaders64"],"kind":"struct"},"24:1090:3615":{"crate_id":24,"path":["syn","generics","TypeGenerics"],"kind":"struct"},"2:34171:6030":{"crate_id":2,"path":["core","ops","arith","DivAssign"],"kind":"trait"},"24:3170:126":{"crate_id":24,"path":["syn","token","Default"],"kind":"struct"},"16:7838:23951":{"crate_id":16,"path":["gimli","read","op","EvaluationResult"],"kind":"enum"},"2:3144:141":{"crate_id":2,"path":["core","error","Error"],"kind":"trait"},"5:7777:9484":{"crate_id":5,"path":["alloc","ffi","c_str","IntoStringError"],"kind":"struct"},"2:7074:4080":{"crate_id":2,"path":["core","iter","adapters","map_windows","MapWindows"],"kind":"struct"},"17:16399:7016":{"crate_id":17,"path":["object","pe","ImageCor20Header"],"kind":"struct"},"1:5993:11382":{"crate_id":1,"path":["std","sync","barrier","BarrierWaitResult"],"kind":"struct"},"1:6386:5871":{"crate_id":1,"path":["std","sync","mpmc","waker","Waker"],"kind":"struct"},"1:9425:5893":{"crate_id":1,"path":["std","sync","mutex","MappedMutexGuard"],"kind":"struct"},"2:44196:16572":{"crate_id":2,"path":["core","slice","iter","ChunksMut"],"kind":"struct"},"2:45398:183":{"crate_id":2,"path":["core","alloc","layout","Layout"],"kind":"struct"},"18:706:9248":{"crate_id":18,"path":["memchr","memmem","Searcher"],"kind":"struct"},"24:5794:3959":{"crate_id":24,"path":["syn","op","UnOp"],"kind":"enum"},"24:3051:4240":{"crate_id":24,"path":["syn","token","Await"],"kind":"struct"},"17:14652:6530":{"crate_id":17,"path":["object","macho","RoutinesCommand32"],"kind":"struct"},"6:6534:8255":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_mmap_hdr"],"kind":"struct"},"2:3356:6024":{"crate_id":2,"path":["core","ops","arith","Sub"],"kind":"trait"},"2:8913:34540":{"crate_id":2,"path":["core","net","display_buffer","DisplayBuffer"],"kind":"struct"},"1:10280:9548":{"crate_id":1,"path":["std","sys","pal","unix","net","Socket"],"kind":"struct"},"17:12673:24199":{"crate_id":17,"path":["object","read","pe","file","PeFile"],"kind":"struct"},"24:4537:4290":{"crate_id":24,"path":["syn","token","Minus"],"kind":"struct"},"2:40928:9521":{"crate_id":2,"path":["core","char","EscapeDefault"],"kind":"struct"},"24:5809:3206":{"crate_id":24,"path":["syn","path","PathSegment"],"kind":"struct"},"2:11224:5870":{"crate_id":2,"path":["core","slice","sort","shared","smallsort","CopyOnDrop"],"kind":"struct"},"17:11902:6221":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbolTable"],"kind":"struct"},"11:698:3988":{"crate_id":11,"path":["hashbrown","map","IntoIter"],"kind":"struct"},"17:14335:6483":{"crate_id":17,"path":["object","macho","FatArch32"],"kind":"struct"},"24:3493:4257":{"crate_id":24,"path":["syn","token","Override"],"kind":"struct"},"2:46558:8925":{"crate_id":2,"path":["core","core_arch","simd","u8x16"],"kind":"struct"},"2:8413:168":{"crate_id":2,"path":["core","iter","traits","collect","IntoIterator"],"kind":"trait"},"17:16209:6968":{"crate_id":17,"path":["object","pe","ImageRuntimeFunctionEntry"],"kind":"struct"},"2:33970:4034":{"crate_id":2,"path":["core","ops","arith","AddAssign"],"kind":"trait"},"15:0:3748":{"crate_id":15,"path":["addr2line"],"kind":"module"},"2:44127:34753":{"crate_id":2,"path":["core","slice","iter","GenericSplitN"],"kind":"struct"},"17:16311:6998":{"crate_id":17,"path":["object","pe","ImageDebugMisc"],"kind":"struct"},"6:7316:8429":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statfs"],"kind":"struct"},"1:8507:9096":{"crate_id":1,"path":["std","io","IoSlice"],"kind":"struct"},"6:5412:1267":{"crate_id":6,"path":["libc","unix","linux_like","linux","option"],"kind":"struct"},"18:589:6064":{"crate_id":18,"path":["memchr","memmem","twoway","TwoWay"],"kind":"struct"},"2:7830:4084":{"crate_id":2,"path":["core","iter","adapters","zip","TrustedRandomAccessNoCoerce"],"kind":"trait"},"17:14269:6468":{"crate_id":17,"path":["object","macho","DyldCacheMappingInfo"],"kind":"struct"},"6:5670:8163":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_txtime"],"kind":"struct"},"2:47740:9034":{"crate_id":2,"path":["core","core_arch","x86","__m512bh"],"kind":"struct"}},"external_crates":{"23":{"name":"quote","html_root_url":"https://docs.rs/quote/1.0.36/"},"20":{"name":"proc_macro2","html_root_url":"https://docs.rs/proc-macro2/1.0.86/"},"17":{"name":"object","html_root_url":"https://doc.rust-lang.org/nightly/"},"14":{"name":"rustc_demangle","html_root_url":"https://doc.rust-lang.org/nightly/"},"11":{"name":"hashbrown","html_root_url":"https://doc.rust-lang.org/nightly/"},"8":{"name":"cfg_if","html_root_url":"https://docs.rs/cfg-if/"},"5":{"name":"alloc","html_root_url":"https://doc.rust-lang.org/nightly/"},"2":{"name":"core","html_root_url":"https://doc.rust-lang.org/nightly/"},"22":{"name":"unicode_ident","html_root_url":"https://docs.rs/unicode-ident/1.0.12/"},"19":{"name":"panic_unwind","html_root_url":"https://doc.rust-lang.org/nightly/"},"16":{"name":"gimli","html_root_url":"https://doc.rust-lang.org/nightly/"},"13":{"name":"std_detect","html_root_url":"https://doc.rust-lang.org/nightly/"},"10":{"name":"adler","html_root_url":"https://docs.rs/adler/1.0.2/"},"7":{"name":"unwind","html_root_url":"https://doc.rust-lang.org/nightly/"},"4":{"name":"rustc_std_workspace_core","html_root_url":"https://doc.rust-lang.org/nightly/"},"1":{"name":"std","html_root_url":"https://doc.rust-lang.org/nightly/"},"24":{"name":"syn","html_root_url":"https://docs.rs/syn/2.0.68/"},"21":{"name":"proc_macro","html_root_url":"https://doc.rust-lang.org/nightly/"},"18":{"name":"memchr","html_root_url":"https://doc.rust-lang.org/nightly/"},"15":{"name":"addr2line","html_root_url":"https://doc.rust-lang.org/nightly/"},"12":{"name":"rustc_std_workspace_alloc","html_root_url":"https://doc.rust-lang.org/nightly/"},"9":{"name":"miniz_oxide","html_root_url":"https://doc.rust-lang.org/nightly/"},"6":{"name":"libc","html_root_url":"https://doc.rust-lang.org/nightly/"},"3":{"name":"compiler_builtins","html_root_url":"https://doc.rust-lang.org/nightly/"}},"format_version":30}