{"root":"0:0:1853","crate_version":"1.0.192","includes_private":false,"index":{"2:12540:29170":{"id":"2:12540:29170","crate_id":2,"name":"starts_with","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a prefix of this\nstring slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.starts_with(\"bana\"));\nassert!(!bananas.starts_with(\"nana\"));\n```","links":{"prim@char":"1:12021:457","self::pattern":"2:12199:3814"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12204:15640","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12513:2956":{"id":"2:12513:2956","crate_id":2,"name":"as_bytes","span":null,"visibility":"public","docs":"Converts a string slice to a byte slice. To convert the byte slice back\ninto a string slice, use the [`from_utf8`] function.\n\n# Examples\n\n```\nlet bytes = \"bors\".as_bytes();\nassert_eq!(b\"bors\", bytes);\n```","links":{"`from_utf8`":"2:11759:15643"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"primitive":"u8"}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:0:1853":{"id":"0:0:1853","crate_id":0,"name":"serde_derive","span":{"filename":"src/lib.rs","begin":[1,0],"end":[102,1]},"visibility":"public","docs":"This crate provides Serde's two derive macros.\n\n```edition2021\n# use serde_derive::{Deserialize, Serialize};\n#\n#[derive(Serialize, Deserialize)]\n# struct S;\n#\n# fn main() {}\n```\n\nPlease refer to [https://serde.rs/derive.html] for how to set this up.\n\n[https://serde.rs/derive.html]: https://serde.rs/derive.html","links":{},"attrs":["#![doc(html_root_url = \"https://docs.rs/serde_derive/1.0.192\")]","#![allow(clippy :: branches_sharing_code, clippy :: cognitive_complexity,\nclippy :: collapsible_match, clippy :: derive_partial_eq_without_eq, clippy ::\nenum_variant_names, clippy :: manual_map, clippy :: match_like_matches_macro,\nclippy :: needless_pass_by_value, clippy :: too_many_arguments, clippy ::\ntrivially_copy_pass_by_ref, clippy :: used_underscore_binding, clippy ::\nwildcard_in_or_patterns, clippy :: unnested_or_patterns,)]","#![allow(clippy :: cast_possible_truncation, clippy :: checked_conversions,\nclippy :: doc_markdown, clippy :: enum_glob_use, clippy :: indexing_slicing,\nclippy :: items_after_statements, clippy :: let_underscore_untyped, clippy ::\nmanual_assert, clippy :: map_err_ignore, clippy :: match_same_arms, clippy ::\nmatch_wildcard_for_single_variants, clippy :: module_name_repetitions, clippy\n:: must_use_candidate, clippy :: option_if_let_else, clippy :: similar_names,\nclippy :: single_match_else, clippy :: struct_excessive_bools, clippy ::\ntoo_many_lines, clippy :: unseparated_literal_suffix, clippy :: unused_self,\nclippy :: use_self, clippy :: wildcard_imports)]"],"deprecation":null,"inner":{"module":{"is_crate":true,"items":["0:964:1842","0:965:1850"],"is_stripped":false}}},"2:12521:29129":{"id":"2:12521:29129","crate_id":2,"name":"get_unchecked","span":null,"visibility":"public","docs":"Returns an unchecked subslice of `str`.\n\nThis is the unchecked alternative to indexing the `str`.\n\n# Safety\n\nCallers of this function are responsible that these preconditions are\nsatisfied:\n\n* The starting index must not exceed the ending index;\n* Indexes must be within bounds of the original slice;\n* Indexes must lie on UTF-8 sequence boundaries.\n\nFailing that, the returned string slice may reference invalid memory or\nviolate the invariants communicated by the `str` type.\n\n# Examples\n\n```\nlet v = \"üóª‚ààüåè\";\nunsafe {\n    assert_eq!(\"üóª\", v.get_unchecked(0..4));\n    assert_eq!(\"‚àà\", v.get_unchecked(4..7));\n    assert_eq!(\"üåè\", v.get_unchecked(7..11));\n}\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"2:10289:251","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"2:10289:251","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"2:12593:34238":{"id":"2:12593:34238","crate_id":2,"name":"trim","span":null,"visibility":"public","docs":"Returns a string slice with leading and trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Examples\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\n\nassert_eq!(\"Hello\\tworld\", s.trim());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a slice, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_trim\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12622:2064":{"id":"2:12622:2064","crate_id":2,"name":"parse","span":null,"visibility":"public","docs":"Parses this string slice into another type.\n\nBecause `parse` is so general, it can cause problems with type\ninference. As such, `parse` is one of the few times you'll see\nthe syntax affectionately known as the 'turbofish': `::<>`. This\nhelps the inference algorithm understand specifically which type\nyou're trying to parse into.\n\n`parse` can parse into any type that implements the [`FromStr`] trait.\n\n# Errors\n\nWill return [`Err`] if it's not possible to parse this string slice into\nthe desired type.\n\n[`Err`]: FromStr::Err\n\n# Examples\n\nBasic usage\n\n```\nlet four: u32 = \"4\".parse().unwrap();\n\nassert_eq!(4, four);\n```\n\nUsing the 'turbofish' instead of annotating `four`:\n\n```\nlet four = \"4\".parse::<u32>();\n\nassert_eq!(Ok(4), four);\n```\n\nFailing to parse:\n\n```\nlet nope = \"j\".parse::<u32>();\n\nassert!(nope.is_err());\n```","links":{"FromStr::Err":"2:12160:134","`FromStr`":"2:12159:3438"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Result","id":"2:41829:238","args":{"angle_bracketed":{"args":[{"type":{"generic":"F"}},{"type":{"qualified_path":{"name":"Err","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"F"},"trait":{"name":"FromStr","id":"2:12159:3438","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"F"},"bounds":[{"trait_bound":{"trait":{"name":"FromStr","id":"2:12159:3438","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12627:30303":{"id":"2:12627:30303","crate_id":2,"name":"make_ascii_uppercase","span":null,"visibility":"public","docs":"Converts this string to its ASCII upper case equivalent in-place.\n\nASCII letters 'a' to 'z' are mapped to 'A' to 'Z',\nbut non-ASCII letters are unchanged.\n\nTo return a new uppercased value without modifying the existing one, use\n[`to_ascii_uppercase()`].\n\n[`to_ascii_uppercase()`]: #method.to_ascii_uppercase\n\n# Examples\n\n```\nlet mut s = String::from(\"Gr√º√üe, J√ºrgen ‚ù§\");\n\ns.make_ascii_uppercase();\n\nassert_eq!(\"GR√º√üE, J√ºRGEN ‚ù§\", s);\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5520:34904":{"id":"5:5520:34904","crate_id":5,"name":"into_boxed_bytes","span":null,"visibility":"public","docs":"Converts a `Box<str>` into a `Box<[u8]>` without copying or allocating.\n\n# Examples\n\n```\nlet s = \"this is a string\";\nlet boxed_str = s.to_owned().into_boxed_str();\nlet boxed_bytes = boxed_str.into_boxed_bytes();\nassert_eq!(*boxed_bytes, *s.as_bytes());\n```","links":{},"attrs":["#[must_use = \"`self` will be dropped if the result is not used\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"resolved_path":{"name":"Box","id":"5:276:2039","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}]],"output":{"resolved_path":{"name":"Box","id":"5:276:2039","args":{"angle_bracketed":{"args":[{"type":{"slice":{"primitive":"u8"}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12572:29166":{"id":"2:12572:29166","crate_id":2,"name":"rsplitn","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by a\npattern, starting from the end of the string, restricted to returning\nat most `n` items.\n\nIf `n` substrings are returned, the last substring (the `n`th substring)\nwill contain the remainder of the string.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will not be double ended, because it is not\nefficient to support.\n\nFor splitting from the front, the [`splitn`] method can be used.\n\n[`splitn`]: str::splitn\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".rsplitn(3, ' ').collect();\nassert_eq!(v, [\"lamb\", \"little\", \"Mary had a\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".rsplitn(3, 'X').collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"lionX\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".rsplitn(2, \"::\").collect();\nassert_eq!(v, [\"leopard\", \"lion::tiger\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".rsplitn(2, |c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"ghi\", \"abc1def\"]);\n```","links":{"prim@char":"1:12021:457","str::splitn":"2:12569:29164","self::pattern":"2:12199:3814"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["n",{"primitive":"usize"}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RSplitN","id":"2:43768:9675","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12204:15640","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12204:15640","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12219:15641","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12504":{"id":"2:12504","crate_id":2,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":["#[cfg(not(test))]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"primitive":"str"},"items":["2:12505:879","2:12506:2195","2:12507:34226","2:12508:34227","2:12510:34228","2:12513:2956","2:12514:34229","2:12515:349","2:12516:348","2:12517:2084","2:12519:29128","2:12521:29129","2:12523:29130","2:12525:34230","2:12526:34231","2:12527:2844","2:12528:29152","2:12529:2434","2:12530:2428","2:12531:9586","2:12532:32493","2:12533:32487","2:12534:27446","2:12535:34232","2:12536:32488","2:12537:2297","2:12540:29170","2:12543:29171","2:12546:2745","2:12550:4359","2:12554:27445","2:12557:29160","2:12560:29162","2:12563:34233","2:12566:34234","2:12569:29164","2:12572:29166","2:12575:29168","2:12578:29169","2:12581:2191","2:12584:34235","2:12587:34236","2:12590:34237","2:12593:34238","2:12595:34239","2:12597:34240","2:12599:34241","2:12600:34242","2:12601:34243","2:12604:2103","2:12607:26773","2:12610:29172","2:12613:34244","2:12616:34245","2:12619:34246","2:12622:2064","2:12624:30299","2:12625:30300","2:12626:30302","2:12627:30303","2:12628:30304","2:12629:34247","2:12631:10193","2:12632:34248"],"negative":false,"synthetic":false,"blanket_impl":null}}},"5:5519":{"id":"5:5519","crate_id":5,"name":null,"span":null,"visibility":"default","docs":"Methods for string slices.","links":{},"attrs":["#[cfg(not(test))]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"primitive":"str"},"items":["5:5520:34904","5:5521:2225","5:5524:34905","5:5527:34906","5:5535:34907","5:5536:34908","5:5537:3482","5:5538:2425","5:5539:2424"],"negative":false,"synthetic":false,"blanket_impl":null}}},"2:12517:2084":{"id":"2:12517:2084","crate_id":2,"name":"get","span":null,"visibility":"public","docs":"Returns a subslice of `str`.\n\nThis is the non-panicking alternative to indexing the `str`. Returns\n[`None`] whenever equivalent indexing operation would panic.\n\n# Examples\n\n```\nlet v = String::from(\"üóª‚ààüåè\");\n\nassert_eq!(Some(\"üóª\"), v.get(0..4));\n\n// indices not on UTF-8 sequence boundaries\nassert!(v.get(1..).is_none());\nassert!(v.get(..8).is_none());\n\n// out of bounds\nassert!(v.get(..42).is_none());\n```","links":{"`None`":"2:41686:202"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"resolved_path":{"name":"Option","id":"2:41684:205","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"2:10289:251","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"2:10289:251","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5524:34905":{"id":"5:5524:34905","crate_id":5,"name":"replacen","span":null,"visibility":"public","docs":"Replaces first N matches of a pattern with another string.\n\n`replacen` creates a new [`String`], and copies the data from this string slice into it.\nWhile doing so, it attempts to find matches of a pattern. If it finds any, it\nreplaces them with the replacement string slice at most `count` times.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"foo foo 123 foo\";\nassert_eq!(\"new new 123 foo\", s.replacen(\"foo\", \"new\", 2));\nassert_eq!(\"faa fao 123 foo\", s.replacen('o', \"a\", 3));\nassert_eq!(\"foo foo new23 foo\", s.replacen(char::is_numeric, \"new\", 1));\n```\n\nWhen the pattern doesn't match, it returns this string slice as [`String`]:\n\n```\nlet s = \"this is old\";\nassert_eq!(s, s.replacen(\"cookie monster\", \"little lamb\", 10));\n```","links":{"`String`":"5:7490:255"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the replaced string as a new allocation, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}],["to",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}],["count",{"primitive":"usize"}]],"output":{"resolved_path":{"name":"String","id":"5:7490:255","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12204:15640","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:492-0:1019:1975":{"id":"0:492-0:1019:1975","crate_id":0,"name":null,"span":{"filename":"src/internals/mod.rs","begin":[13,0],"end":[13,25]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"import":{"source":"self::ctxt::Ctxt","name":"Ctxt","id":"0:1019:1975","glob":false}}},"2:12625:30300":{"id":"2:12625:30300","crate_id":2,"name":"as_ascii","span":null,"visibility":"public","docs":"If this string slice [`is_ascii`](Self::is_ascii), returns it as a slice\nof [ASCII characters](`ascii::Char`), otherwise returns `None`.","links":{"`ascii::Char`":"2:39633:30295","Self::is_ascii":"2:12624:30299"},"attrs":["#[unstable(feature = \"ascii_char\", issue = \"110998\")]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Option","id":"2:41684:205","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"resolved_path":{"name":"AsciiChar","id":"2:39633:30295","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5535:34907":{"id":"5:5535:34907","crate_id":5,"name":"to_uppercase","span":null,"visibility":"public","docs":"Returns the uppercase equivalent of this string slice, as a new [`String`].\n\n'Uppercase' is defined according to the terms of the Unicode Derived Core Property\n`Uppercase`.\n\nSince some characters can expand into multiple characters when changing\nthe case, this function returns a [`String`] instead of modifying the\nparameter in-place.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"hello\";\n\nassert_eq!(\"HELLO\", s.to_uppercase());\n```\n\nScripts without case are not changed:\n\n```\nlet new_year = \"ÂÜúÂéÜÊñ∞Âπ¥\";\n\nassert_eq!(new_year, new_year.to_uppercase());\n```\n\nOne character can become multiple:\n```\nlet s = \"tsch√º√ü\";\n\nassert_eq!(\"TSCH√úSS\", s.to_uppercase());\n```","links":{"`String`":"5:7490:255"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the uppercase string as a new String, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7490:255","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5521:2225":{"id":"5:5521:2225","crate_id":5,"name":"replace","span":null,"visibility":"public","docs":"Replaces all matches of a pattern with another string.\n\n`replace` creates a new [`String`], and copies the data from this string slice into it.\nWhile doing so, it attempts to find matches of a pattern. If it finds any, it\nreplaces them with the replacement string slice.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"this is old\";\n\nassert_eq!(\"this is new\", s.replace(\"old\", \"new\"));\nassert_eq!(\"than an old\", s.replace(\"is\", \"an\"));\n```\n\nWhen the pattern doesn't match, it returns this string slice as [`String`]:\n\n```\nlet s = \"this is old\";\nassert_eq!(s, s.replace(\"cookie monster\", \"little lamb\"));\n```","links":{"`String`":"5:7490:255"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the replaced string as a new allocation, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["from",{"generic":"P"}],["to",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7490:255","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12204:15640","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12626:30302":{"id":"2:12626:30302","crate_id":2,"name":"eq_ignore_ascii_case","span":null,"visibility":"public","docs":"Checks that two strings are an ASCII case-insensitive match.\n\nSame as `to_ascii_lowercase(a) == to_ascii_lowercase(b)`,\nbut without allocating and copying temporaries.\n\n# Examples\n\n```\nassert!(\"Ferris\".eq_ignore_ascii_case(\"FERRIS\"));\nassert!(\"Ferr√∂s\".eq_ignore_ascii_case(\"FERR√∂S\"));\nassert!(!\"Ferr√∂s\".eq_ignore_ascii_case(\"FERR√ñS\"));\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["other",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12530:2428":{"id":"2:12530:2428","crate_id":2,"name":"char_indices","span":null,"visibility":"public","docs":"Returns an iterator over the [`char`]s of a string slice, and their\npositions.\n\nAs a string slice consists of valid UTF-8, we can iterate through a\nstring slice by [`char`]. This method returns an iterator of both\nthese [`char`]s, as well as their byte positions.\n\nThe iterator yields tuples. The position is first, the [`char`] is\nsecond.\n\n# Examples\n\nBasic usage:\n\n```\nlet word = \"goodbye\";\n\nlet count = word.char_indices().count();\nassert_eq!(7, count);\n\nlet mut char_indices = word.char_indices();\n\nassert_eq!(Some((0, 'g')), char_indices.next());\nassert_eq!(Some((1, 'o')), char_indices.next());\nassert_eq!(Some((2, 'o')), char_indices.next());\nassert_eq!(Some((3, 'd')), char_indices.next());\nassert_eq!(Some((4, 'b')), char_indices.next());\nassert_eq!(Some((5, 'y')), char_indices.next());\nassert_eq!(Some((6, 'e')), char_indices.next());\n\nassert_eq!(None, char_indices.next());\n```\n\nRemember, [`char`]s might not match your intuition about characters:\n\n[`char`]: prim@char\n\n```\nlet yes = \"yÃÜes\";\n\nlet mut char_indices = yes.char_indices();\n\nassert_eq!(Some((0, 'y')), char_indices.next()); // not (0, 'yÃÜ')\nassert_eq!(Some((1, '\\u{0306}')), char_indices.next());\n\n// note the 3 here - the previous character took up two bytes\nassert_eq!(Some((3, 'e')), char_indices.next());\nassert_eq!(Some((4, 's')), char_indices.next());\n\nassert_eq!(None, char_indices.next());\n```","links":{"prim@char":"1:12021:457"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"CharIndices","id":"2:43622:9666","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5538:2425":{"id":"5:5538:2425","crate_id":5,"name":"to_ascii_uppercase","span":null,"visibility":"public","docs":"Returns a copy of this string where each character is mapped to its\nASCII upper case equivalent.\n\nASCII letters 'a' to 'z' are mapped to 'A' to 'Z',\nbut non-ASCII letters are unchanged.\n\nTo uppercase the value in-place, use [`make_ascii_uppercase`].\n\nTo uppercase ASCII characters in addition to non-ASCII characters, use\n[`to_uppercase`].\n\n# Examples\n\n```\nlet s = \"Gr√º√üe, J√ºrgen ‚ù§\";\n\nassert_eq!(\"GR√º√üE, J√ºRGEN ‚ù§\", s.to_ascii_uppercase());\n```\n\n[`make_ascii_uppercase`]: str::make_ascii_uppercase\n[`to_uppercase`]: #method.to_uppercase","links":{"str::make_ascii_uppercase":"2:12627:30303"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use = \"to uppercase the value in-place, use `make_ascii_uppercase()`\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7490:255","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12610:29172":{"id":"2:12610:29172","crate_id":2,"name":"strip_suffix","span":null,"visibility":"public","docs":"Returns a string slice with the suffix removed.\n\nIf the string ends with the pattern `suffix`, returns the substring before the suffix,\nwrapped in `Some`.  Unlike `trim_end_matches`, this method removes the suffix exactly once.\n\nIf the string does not end with `suffix`, returns `None`.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nassert_eq!(\"bar:foo\".strip_suffix(\":foo\"), Some(\"bar\"));\nassert_eq!(\"bar:foo\".strip_suffix(\"bar\"), None);\nassert_eq!(\"foofoo\".strip_suffix(\"foo\"), Some(\"foo\"));\n```","links":{"prim@char":"1:12021:457","self::pattern":"2:12199:3814"},"attrs":["#[must_use =\n\"this returns the remaining substring as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["suffix",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:41684:205","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12204:15640","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12204:15640","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12219:15641","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12528:29152":{"id":"2:12528:29152","crate_id":2,"name":"split_at_mut","span":null,"visibility":"public","docs":"Divide one mutable string slice into two at an index.\n\nThe argument, `mid`, should be a byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get immutable string slices instead, see the [`split_at`] method.\n\n[`split_at`]: str::split_at\n\n# Panics\n\nPanics if `mid` is not on a UTF-8 code point boundary, or if it is\npast the end of the last code point of the string slice.\n\n# Examples\n\n```\nlet mut s = \"Per Martin-L√∂f\".to_string();\n{\n    let (first, last) = s.split_at_mut(3);\n    first.make_ascii_uppercase();\n    assert_eq!(\"PER\", first);\n    assert_eq!(\" Martin-L√∂f\", last);\n}\nassert_eq!(\"PER Martin-L√∂f\", s);\n```","links":{"str::split_at":"2:12527:2844"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["mid",{"primitive":"usize"}]],"output":{"tuple":[{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5539:2424":{"id":"5:5539:2424","crate_id":5,"name":"to_ascii_lowercase","span":null,"visibility":"public","docs":"Returns a copy of this string where each character is mapped to its\nASCII lower case equivalent.\n\nASCII letters 'A' to 'Z' are mapped to 'a' to 'z',\nbut non-ASCII letters are unchanged.\n\nTo lowercase the value in-place, use [`make_ascii_lowercase`].\n\nTo lowercase ASCII characters in addition to non-ASCII characters, use\n[`to_lowercase`].\n\n# Examples\n\n```\nlet s = \"Gr√º√üe, J√ºrgen ‚ù§\";\n\nassert_eq!(\"gr√º√üe, j√ºrgen ‚ù§\", s.to_ascii_lowercase());\n```\n\n[`make_ascii_lowercase`]: str::make_ascii_lowercase\n[`to_lowercase`]: #method.to_lowercase","links":{"str::make_ascii_lowercase":"2:12628:30304"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use = \"to lowercase the value in-place, use `make_ascii_lowercase()`\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7490:255","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12531:9586":{"id":"2:12531:9586","crate_id":2,"name":"bytes","span":null,"visibility":"public","docs":"An iterator over the bytes of a string slice.\n\nAs a string slice consists of a sequence of bytes, we can iterate\nthrough a string slice by byte. This method returns such an iterator.\n\n# Examples\n\n```\nlet mut bytes = \"bors\".bytes();\n\nassert_eq!(Some(b'b'), bytes.next());\nassert_eq!(Some(b'o'), bytes.next());\nassert_eq!(Some(b'r'), bytes.next());\nassert_eq!(Some(b's'), bytes.next());\n\nassert_eq!(None, bytes.next());\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Bytes","id":"2:43632:2966","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12631:10193":{"id":"2:12631:10193","crate_id":2,"name":"escape_default","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_default`].\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"‚ù§\\n!\".escape_default() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"‚ù§\\n!\".escape_default());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"\\\\u{{2764}}\\\\n!\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"‚ù§\\n!\".escape_default().to_string(), \"\\\\u{2764}\\\\n!\");\n```","links":{"`char::escape_default`":"2:4585:10193"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EscapeDefault","id":"2:43954:9623","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:1023:2072":{"id":"0:1023:2072","crate_id":0,"name":"Symbol","span":{"filename":"src/internals/symbol.rs","begin":[5,0],"end":[5,32]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"struct":{"kind":{"tuple":[null]},"generics":{"params":[],"where_predicates":[]},"impls":[]}}},"2:12595:34239":{"id":"2:12595:34239","crate_id":2,"name":"trim_start","span":null,"visibility":"public","docs":"Returns a string slice with leading whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Text directionality\n\nA string is a sequence of bytes. `start` in this context means the first\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be left side, and for right-to-left languages like\nArabic or Hebrew, this will be the right side.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\nassert_eq!(\"Hello\\tworld\\t\\n\", s.trim_start());\n```\n\nDirectionality:\n\n```\nlet s = \"  English  \";\nassert!(Some('E') == s.trim_start().chars().next());\n\nlet s = \"  ◊¢◊ë◊®◊ô◊™  \";\nassert!(Some('◊¢') == s.trim_start().chars().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_trim_start\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12575:29168":{"id":"2:12575:29168","crate_id":2,"name":"split_once","span":null,"visibility":"public","docs":"Splits the string on the first occurrence of the specified delimiter and\nreturns prefix before delimiter and suffix after delimiter.\n\n# Examples\n\n```\nassert_eq!(\"cfg\".split_once('='), None);\nassert_eq!(\"cfg=\".split_once('='), Some((\"cfg\", \"\")));\nassert_eq!(\"cfg=foo\".split_once('='), Some((\"cfg\", \"foo\")));\nassert_eq!(\"cfg=foo=bar\".split_once('='), Some((\"cfg\", \"foo=bar\")));\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["delimiter",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:41684:205","args":{"angle_bracketed":{"args":[{"type":{"tuple":[{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12204:15640","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12601:34243":{"id":"2:12601:34243","crate_id":2,"name":"trim_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes and suffixes that match a\npattern repeatedly removed.\n\nThe [pattern] can be a [`char`], a slice of [`char`]s, or a function\nor closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_matches('1'), \"foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_matches(char::is_numeric), \"foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_matches(x), \"foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1foo1barXX\".trim_matches(|c| c == '1' || c == 'X'), \"foo1bar\");\n```","links":{"prim@char":"1:12021:457","self::pattern":"2:12199:3814"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12204:15640","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12204:15640","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"DoubleEndedSearcher","id":"2:12224:15639","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:8:1968":{"id":"0:8:1968","crate_id":0,"name":"ast","span":{"filename":"src/internals/ast.rs","begin":[1,0],"end":[216,1]},"visibility":"public","docs":"A Serde ast, parsed from the Syn ast and ready to generate Rust code.","links":{},"attrs":[],"deprecation":null,"inner":{"module":{"is_crate":false,"items":[],"is_stripped":false}}},"0:965:1850":{"id":"0:965:1850","crate_id":0,"name":"Deserialize","span":{"filename":"src/lib.rs","begin":[97,0],"end":[102,1]},"visibility":"public","docs":null,"links":{},"attrs":["#[proc_macro_derive(Deserialize, attributes(serde))]"],"deprecation":null,"inner":{"proc_macro":{"kind":"derive","helpers":["serde"]}}},"2:12506:2195":{"id":"2:12506:2195","crate_id":2,"name":"is_empty","span":null,"visibility":"public","docs":"Returns `true` if `self` has a length of zero bytes.\n\n# Examples\n\n```\nlet s = \"\";\nassert!(s.is_empty());\n\nlet s = \"not empty\";\nassert!(!s.is_empty());\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12535:34232":{"id":"2:12535:34232","crate_id":2,"name":"lines_any","span":null,"visibility":"public","docs":"An iterator over the lines of a string.","links":{},"attrs":["#[deprecated(since = \"1.4.0\", note = \"use lines() instead now\", suggestion =\n\"lines\")]"],"deprecation":{"since":"1.4.0","note":"use lines() instead now"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"LinesAny","id":"2:43910:9683","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12537:2297":{"id":"2:12537:2297","crate_id":2,"name":"contains","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a sub-slice of\nthis string slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.contains(\"nana\"));\nassert!(!bananas.contains(\"apples\"));\n```","links":{"prim@char":"1:12021:457","self::pattern":"2:12199:3814"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12204:15640","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12560:29162":{"id":"2:12560:29162","crate_id":2,"name":"rsplit","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by\ncharacters matched by a pattern and yielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`split`] method can be used.\n\n[`split`]: str::split\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".rsplit(' ').collect();\nassert_eq!(v, [\"lamb\", \"little\", \"a\", \"had\", \"Mary\"]);\n\nlet v: Vec<&str> = \"\".rsplit('X').collect();\nassert_eq!(v, [\"\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".rsplit('X').collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"\", \"lion\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".rsplit(\"::\").collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"lion\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".rsplit(|c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"ghi\", \"def\", \"abc\"]);\n```","links":{"self::pattern":"2:12199:3814","`DoubleEndedIterator`":"2:7581:128","prim@char":"1:12021:457","str::split":"2:12554:27445"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RSplit","id":"2:43664:9598","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12204:15640","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12204:15640","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12219:15641","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12569:29164":{"id":"2:12569:29164","crate_id":2,"name":"splitn","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by a\npattern, restricted to returning at most `n` items.\n\nIf `n` substrings are returned, the last substring (the `n`th substring)\nwill contain the remainder of the string.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will not be double ended, because it is\nnot efficient to support.\n\nIf the pattern allows a reverse search, the [`rsplitn`] method can be\nused.\n\n[`rsplitn`]: str::rsplitn\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lambda\".splitn(3, ' ').collect();\nassert_eq!(v, [\"Mary\", \"had\", \"a little lambda\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".splitn(3, \"X\").collect();\nassert_eq!(v, [\"lion\", \"\", \"tigerXleopard\"]);\n\nlet v: Vec<&str> = \"abcXdef\".splitn(1, 'X').collect();\nassert_eq!(v, [\"abcXdef\"]);\n\nlet v: Vec<&str> = \"\".splitn(1, 'X').collect();\nassert_eq!(v, [\"\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".splitn(2, |c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"abc\", \"defXghi\"]);\n```","links":{"prim@char":"1:12021:457","self::pattern":"2:12199:3814","str::rsplitn":"2:12572:29166"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["n",{"primitive":"usize"}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"SplitN","id":"2:43750:9674","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12204:15640","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12597:34240":{"id":"2:12597:34240","crate_id":2,"name":"trim_end","span":null,"visibility":"public","docs":"Returns a string slice with trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Text directionality\n\nA string is a sequence of bytes. `end` in this context means the last\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be right side, and for right-to-left languages like\nArabic or Hebrew, this will be the left side.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\nassert_eq!(\"\\n Hello\\tworld\", s.trim_end());\n```\n\nDirectionality:\n\n```\nlet s = \"  English  \";\nassert!(Some('h') == s.trim_end().chars().rev().next());\n\nlet s = \"  ◊¢◊ë◊®◊ô◊™  \";\nassert!(Some('◊™') == s.trim_end().chars().rev().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_trim_end\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12624:30299":{"id":"2:12624:30299","crate_id":2,"name":"is_ascii","span":null,"visibility":"public","docs":"Checks if all characters in this string are within the ASCII range.\n\n# Examples\n\n```\nlet ascii = \"hello!\\n\";\nlet non_ascii = \"Gr√º√üe, J√ºrgen ‚ù§\";\n\nassert!(ascii.is_ascii());\nassert!(!non_ascii.is_ascii());\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12616:34245":{"id":"2:12616:34245","crate_id":2,"name":"trim_left_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. 'Left' in this context means the first\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _right_ side, not the left.\n\n# Examples\n\n```\nassert_eq!(\"11foo1bar11\".trim_left_matches('1'), \"foo1bar11\");\nassert_eq!(\"123foo1bar123\".trim_left_matches(char::is_numeric), \"foo1bar123\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_left_matches(x), \"foo1bar12\");\n```","links":{"prim@char":"1:12021:457","self::pattern":"2:12199:3814"},"attrs":["#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_start_matches`\",\nsuggestion = \"trim_start_matches\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_start_matches`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12204:15640","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12510:34228":{"id":"2:12510:34228","crate_id":2,"name":"ceil_char_boundary","span":null,"visibility":"public","docs":"Finds the closest `x` not below `index` where `is_char_boundary(x)` is `true`.\n\nIf `index` is greater than the length of the string, this returns the length of the string.\n\nThis method is the natural complement to [`floor_char_boundary`]. See that method\nfor more details.\n\n[`floor_char_boundary`]: str::floor_char_boundary\n\n\n# Examples\n\n```\n#![feature(round_char_boundary)]\nlet s = \"‚ù§Ô∏èüß°üíõüíöüíôüíú\";\nassert_eq!(s.len(), 26);\nassert!(!s.is_char_boundary(13));\n\nlet closest = s.ceil_char_boundary(13);\nassert_eq!(closest, 14);\nassert_eq!(&s[..closest], \"‚ù§Ô∏èüß°üíõ\");\n```","links":{"str::floor_char_boundary":"2:12508:34227"},"attrs":["#[unstable(feature = \"round_char_boundary\", issue = \"93743\")]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["index",{"primitive":"usize"}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12526:34231":{"id":"2:12526:34231","crate_id":2,"name":"slice_mut_unchecked","span":null,"visibility":"public","docs":"Creates a string slice from another string slice, bypassing safety\nchecks.\nThis is generally not recommended, use with caution! For a safe\nalternative see [`str`] and [`IndexMut`].\n\n[`IndexMut`]: crate::ops::IndexMut\n\nThis new slice goes from `begin` to `end`, including `begin` but\nexcluding `end`.\n\nTo get an immutable string slice instead, see the\n[`slice_unchecked`] method.\n\n[`slice_unchecked`]: str::slice_unchecked\n\n# Safety\n\nCallers of this function are responsible that three preconditions are\nsatisfied:\n\n* `begin` must not exceed `end`.\n* `begin` and `end` must be byte positions within the string slice.\n* `begin` and `end` must lie on UTF-8 sequence boundaries.","links":{"`str`":"1:12027:1543","crate::ops::IndexMut":"2:3089:3424","str::slice_unchecked":"2:12525:34230"},"attrs":["#[deprecated(since = \"1.29.0\", note =\n\"use `get_unchecked_mut(begin..end)` instead\")]"],"deprecation":{"since":"1.29.0","note":"use `get_unchecked_mut(begin..end)` instead"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["begin",{"primitive":"usize"}],["end",{"primitive":"usize"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"2:12557:29160":{"id":"2:12557:29160","crate_id":2,"name":"split_inclusive","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by\ncharacters matched by a pattern. Differs from the iterator produced by\n`split` in that `split_inclusive` leaves the matched part as the\nterminator of the substring.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\\nlittle lamb\\nlittle lamb.\"\n    .split_inclusive('\\n').collect();\nassert_eq!(v, [\"Mary had a little lamb\\n\", \"little lamb\\n\", \"little lamb.\"]);\n```\n\nIf the last element of the string is matched,\nthat element will be considered the terminator of the preceding substring.\nThat substring will be the last item returned by the iterator.\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\\nlittle lamb\\nlittle lamb.\\n\"\n    .split_inclusive('\\n').collect();\nassert_eq!(v, [\"Mary had a little lamb\\n\", \"little lamb\\n\", \"little lamb.\\n\"]);\n```","links":{"prim@char":"1:12021:457","self::pattern":"2:12199:3814"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"SplitInclusive","id":"2:12015:9597","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12204:15640","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12600:34242":{"id":"2:12600:34242","crate_id":2,"name":"trim_right","span":null,"visibility":"public","docs":"Returns a string slice with trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`.\n\n# Text directionality\n\nA string is a sequence of bytes. 'Right' in this context means the last\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _left_ side, not the right.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \" Hello\\tworld\\t\";\n\nassert_eq!(\" Hello\\tworld\", s.trim_right());\n```\n\nDirectionality:\n\n```\nlet s = \"English  \";\nassert!(Some('h') == s.trim_right().chars().rev().next());\n\nlet s = \"◊¢◊ë◊®◊ô◊™  \";\nassert!(Some('◊™') == s.trim_right().chars().rev().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_end`\", suggestion =\n\"trim_end\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_end`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:493-0:404:1976":{"id":"0:493-0:404:1976","crate_id":0,"name":null,"span":{"filename":"src/internals/mod.rs","begin":[14,0],"end":[14,41]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"import":{"source":"self::receiver::replace_receiver","name":"replace_receiver","id":"0:404:1976","glob":false}}},"2:12514:34229":{"id":"2:12514:34229","crate_id":2,"name":"as_bytes_mut","span":null,"visibility":"public","docs":"Converts a mutable string slice to a mutable byte slice.\n\n# Safety\n\nThe caller must ensure that the content of the slice is valid UTF-8\nbefore the borrow ends and the underlying `str` is used.\n\nUse of a `str` whose contents are not valid UTF-8 is undefined behavior.\n\n# Examples\n\nBasic usage:\n\n```\nlet mut s = String::from(\"Hello\");\nlet bytes = unsafe { s.as_bytes_mut() };\n\nassert_eq!(b\"Hello\", bytes);\n```\n\nMutability:\n\n```\nlet mut s = String::from(\"üóª‚ààüåè\");\n\nunsafe {\n    let bytes = s.as_bytes_mut();\n\n    bytes[0] = 0xF0;\n    bytes[1] = 0x9F;\n    bytes[2] = 0x8D;\n    bytes[3] = 0x94;\n}\n\nassert_eq!(\"üçî‚ààüåè\", s);\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"slice":{"primitive":"u8"}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"2:12554:27445":{"id":"2:12554:27445","crate_id":2,"name":"split","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by\ncharacters matched by a pattern.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rsplit`] method can be used.\n\n[`rsplit`]: str::rsplit\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".split(' ').collect();\nassert_eq!(v, [\"Mary\", \"had\", \"a\", \"little\", \"lamb\"]);\n\nlet v: Vec<&str> = \"\".split('X').collect();\nassert_eq!(v, [\"\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".split('X').collect();\nassert_eq!(v, [\"lion\", \"\", \"tiger\", \"leopard\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".split(\"::\").collect();\nassert_eq!(v, [\"lion\", \"tiger\", \"leopard\"]);\n\nlet v: Vec<&str> = \"abc1def2ghi\".split(char::is_numeric).collect();\nassert_eq!(v, [\"abc\", \"def\", \"ghi\"]);\n\nlet v: Vec<&str> = \"lionXtigerXleopard\".split(char::is_uppercase).collect();\nassert_eq!(v, [\"lion\", \"tiger\", \"leopard\"]);\n```\n\nIf the pattern is a slice of chars, split on each occurrence of any of the characters:\n\n```\nlet v: Vec<&str> = \"2020-11-03 23:59\".split(&['-', ' ', ':', '@'][..]).collect();\nassert_eq!(v, [\"2020\", \"11\", \"03\", \"23\", \"59\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".split(|c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"abc\", \"def\", \"ghi\"]);\n```\n\nIf a string contains multiple contiguous separators, you will end up\nwith empty strings in the output:\n\n```\nlet x = \"||||a||b|c\".to_string();\nlet d: Vec<_> = x.split('|').collect();\n\nassert_eq!(d, &[\"\", \"\", \"\", \"\", \"a\", \"\", \"b\", \"c\"]);\n```\n\nContiguous separators are separated by the empty string.\n\n```\nlet x = \"(///)\".to_string();\nlet d: Vec<_> = x.split('/').collect();\n\nassert_eq!(d, &[\"(\", \"\", \"\", \")\"]);\n```\n\nSeparators at the start or end of a string are neighbored\nby empty strings.\n\n```\nlet d: Vec<_> = \"010\".split(\"0\").collect();\nassert_eq!(d, &[\"\", \"1\", \"\"]);\n```\n\nWhen the empty string is used as a separator, it separates\nevery character in the string, along with the beginning\nand end of the string.\n\n```\nlet f: Vec<_> = \"rust\".split(\"\").collect();\nassert_eq!(f, &[\"\", \"r\", \"u\", \"s\", \"t\", \"\"]);\n```\n\nContiguous separators can lead to possibly surprising behavior\nwhen whitespace is used as the separator. This code is correct:\n\n```\nlet x = \"    a  b c\".to_string();\nlet d: Vec<_> = x.split(' ').collect();\n\nassert_eq!(d, &[\"\", \"\", \"\", \"\", \"a\", \"\", \"b\", \"c\"]);\n```\n\nIt does _not_ give you:\n\n```,ignore\nassert_eq!(d, &[\"a\", \"b\", \"c\"]);\n```\n\nUse [`split_whitespace`] for this behavior.\n\n[`split_whitespace`]: str::split_whitespace","links":{"self::pattern":"2:12199:3814","`DoubleEndedIterator`":"2:7581:128","prim@char":"1:12021:457","str::split_whitespace":"2:12532:32493","str::rsplit":"2:12560:29162"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Split","id":"2:43646:9595","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12204:15640","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12508:34227":{"id":"2:12508:34227","crate_id":2,"name":"floor_char_boundary","span":null,"visibility":"public","docs":"Finds the closest `x` not exceeding `index` where `is_char_boundary(x)` is `true`.\n\nThis method can help you truncate a string so that it's still valid UTF-8, but doesn't\nexceed a given number of bytes. Note that this is done purely at the character level\nand can still visually split graphemes, even though the underlying characters aren't\nsplit. For example, the emoji üßë‚Äçüî¨ (scientist) could be split so that the string only\nincludes üßë (person) instead.\n\n# Examples\n\n```\n#![feature(round_char_boundary)]\nlet s = \"‚ù§Ô∏èüß°üíõüíöüíôüíú\";\nassert_eq!(s.len(), 26);\nassert!(!s.is_char_boundary(13));\n\nlet closest = s.floor_char_boundary(13);\nassert_eq!(closest, 10);\nassert_eq!(&s[..closest], \"‚ù§Ô∏èüß°\");\n```","links":{},"attrs":["#[unstable(feature = \"round_char_boundary\", issue = \"93743\")]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["index",{"primitive":"usize"}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12590:34237":{"id":"2:12590:34237","crate_id":2,"name":"rmatch_indices","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within `self`,\nyielded in reverse order along with the index of the match.\n\nFor matches of `pat` within `self` that overlap, only the indices\ncorresponding to the last match are returned.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`match_indices`] method can be used.\n\n[`match_indices`]: str::match_indices\n\n# Examples\n\n```\nlet v: Vec<_> = \"abcXXXabcYYYabc\".rmatch_indices(\"abc\").collect();\nassert_eq!(v, [(12, \"abc\"), (6, \"abc\"), (0, \"abc\")]);\n\nlet v: Vec<_> = \"1abcabc2\".rmatch_indices(\"abc\").collect();\nassert_eq!(v, [(4, \"abc\"), (1, \"abc\")]);\n\nlet v: Vec<_> = \"ababa\".rmatch_indices(\"aba\").collect();\nassert_eq!(v, [(2, \"aba\")]); // only the last `aba`\n```","links":{"self::pattern":"2:12199:3814","`DoubleEndedIterator`":"2:7581:128","prim@char":"1:12021:457","str::match_indices":"2:12587:34236"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RMatchIndices","id":"2:43814:9678","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12204:15640","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12204:15640","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12219:15641","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5527:34906":{"id":"5:5527:34906","crate_id":5,"name":"to_lowercase","span":null,"visibility":"public","docs":"Returns the lowercase equivalent of this string slice, as a new [`String`].\n\n'Lowercase' is defined according to the terms of the Unicode Derived Core Property\n`Lowercase`.\n\nSince some characters can expand into multiple characters when changing\nthe case, this function returns a [`String`] instead of modifying the\nparameter in-place.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"HELLO\";\n\nassert_eq!(\"hello\", s.to_lowercase());\n```\n\nA tricky example, with sigma:\n\n```\nlet sigma = \"Œ£\";\n\nassert_eq!(\"œÉ\", sigma.to_lowercase());\n\n// but at the end of a word, it's œÇ, not œÉ:\nlet odysseus = \"·ΩàŒîŒ•Œ£Œ£ŒïŒéŒ£\";\n\nassert_eq!(\"·ΩÄŒ¥œÖœÉœÉŒµœçœÇ\", odysseus.to_lowercase());\n```\n\nLanguages without case are not changed:\n\n```\nlet new_year = \"ÂÜúÂéÜÊñ∞Âπ¥\";\n\nassert_eq!(new_year, new_year.to_lowercase());\n```","links":{"`String`":"5:7490:255"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the lowercase string as a new String, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7490:255","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12629:34247":{"id":"2:12629:34247","crate_id":2,"name":"escape_debug","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_debug`].\n\nNote: only extended grapheme codepoints that begin the string will be\nescaped.\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"‚ù§\\n!\".escape_debug() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"‚ù§\\n!\".escape_debug());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"‚ù§\\\\n!\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"‚ù§\\n!\".escape_debug().to_string(), \"‚ù§\\\\n!\");\n```","links":{"`char::escape_debug`":"2:4584:34247"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EscapeDebug","id":"2:43945:9629","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12550:4359":{"id":"2:12550:4359","crate_id":2,"name":"rfind","span":null,"visibility":"public","docs":"Returns the byte index for the first character of the last match of the pattern in\nthis string slice.\n\nReturns [`None`] if the pattern doesn't match.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nlet s = \"L√∂we ËÄÅËôé L√©opard Gepardi\";\n\nassert_eq!(s.rfind('L'), Some(13));\nassert_eq!(s.rfind('√©'), Some(14));\nassert_eq!(s.rfind(\"pard\"), Some(24));\n```\n\nMore complex patterns with closures:\n\n```\nlet s = \"L√∂we ËÄÅËôé L√©opard\";\n\nassert_eq!(s.rfind(char::is_whitespace), Some(12));\nassert_eq!(s.rfind(char::is_lowercase), Some(20));\n```\n\nNot finding the pattern:\n\n```\nlet s = \"L√∂we ËÄÅËôé L√©opard\";\nlet x: &[_] = &['1', '2'];\n\nassert_eq!(s.rfind(x), None);\n```","links":{"`None`":"2:41686:202","prim@char":"1:12021:457","self::pattern":"2:12199:3814"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:41684:205","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12204:15640","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12204:15640","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12219:15641","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12619:34246":{"id":"2:12619:34246","crate_id":2,"name":"trim_right_matches","span":null,"visibility":"public","docs":"Returns a string slice with all suffixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. 'Right' in this context means the last\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _left_ side, not the right.\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_right_matches('1'), \"11foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_right_matches(char::is_numeric), \"123foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_right_matches(x), \"12foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1fooX\".trim_right_matches(|c| c == '1' || c == 'X'), \"1foo\");\n```","links":{"prim@char":"1:12021:457","self::pattern":"2:12199:3814"},"attrs":["#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_end_matches`\",\nsuggestion = \"trim_end_matches\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_end_matches`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12204:15640","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12204:15640","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12219:15641","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12632:34248":{"id":"2:12632:34248","crate_id":2,"name":"escape_unicode","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_unicode`].\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"‚ù§\\n!\".escape_unicode() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"‚ù§\\n!\".escape_unicode());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"\\\\u{{2764}}\\\\u{{a}}\\\\u{{21}}\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"‚ù§\\n!\".escape_unicode().to_string(), \"\\\\u{2764}\\\\u{a}\\\\u{21}\");\n```","links":{"`char::escape_unicode`":"2:4582:34248"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EscapeUnicode","id":"2:43963:9628","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12543:29171":{"id":"2:12543:29171","crate_id":2,"name":"ends_with","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a suffix of this\nstring slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.ends_with(\"anas\"));\nassert!(!bananas.ends_with(\"nana\"));\n```","links":{"prim@char":"1:12021:457","self::pattern":"2:12199:3814"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12204:15640","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12204:15640","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12219:15641","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12584:34235":{"id":"2:12584:34235","crate_id":2,"name":"rmatches","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within this string slice,\nyielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`matches`] method can be used.\n\n[`matches`]: str::matches\n\n# Examples\n\n```\nlet v: Vec<&str> = \"abcXXXabcYYYabc\".rmatches(\"abc\").collect();\nassert_eq!(v, [\"abc\", \"abc\", \"abc\"]);\n\nlet v: Vec<&str> = \"1abc2abc3\".rmatches(char::is_numeric).collect();\nassert_eq!(v, [\"3\", \"2\", \"1\"]);\n```","links":{"self::pattern":"2:12199:3814","`DoubleEndedIterator`":"2:7581:128","prim@char":"1:12021:457","str::matches":"2:12581:2191"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RMatches","id":"2:43868:9681","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12204:15640","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12204:15640","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12219:15641","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12533:32487":{"id":"2:12533:32487","crate_id":2,"name":"split_ascii_whitespace","span":null,"visibility":"public","docs":"Splits a string slice by ASCII whitespace.\n\nThe iterator returned will return string slices that are sub-slices of\nthe original string slice, separated by any amount of ASCII whitespace.\n\nTo split by Unicode `Whitespace` instead, use [`split_whitespace`].\n\n[`split_whitespace`]: str::split_whitespace\n\n# Examples\n\nBasic usage:\n\n```\nlet mut iter = \"A few words\".split_ascii_whitespace();\n\nassert_eq!(Some(\"A\"), iter.next());\nassert_eq!(Some(\"few\"), iter.next());\nassert_eq!(Some(\"words\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nAll kinds of ASCII whitespace are considered:\n\n```\nlet mut iter = \" Mary   had\\ta little  \\n\\t lamb\".split_ascii_whitespace();\nassert_eq!(Some(\"Mary\"), iter.next());\nassert_eq!(Some(\"had\"), iter.next());\nassert_eq!(Some(\"a\"), iter.next());\nassert_eq!(Some(\"little\"), iter.next());\nassert_eq!(Some(\"lamb\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nIf the string is empty or all ASCII whitespace, the iterator yields no string slices:\n```\nassert_eq!(\"\".split_ascii_whitespace().next(), None);\nassert_eq!(\"   \".split_ascii_whitespace().next(), None);\n```","links":{"str::split_whitespace":"2:12532:32493"},"attrs":["#[must_use =\n\"this returns the split string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"SplitAsciiWhitespace","id":"2:43929:9685","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12519:29128":{"id":"2:12519:29128","crate_id":2,"name":"get_mut","span":null,"visibility":"public","docs":"Returns a mutable subslice of `str`.\n\nThis is the non-panicking alternative to indexing the `str`. Returns\n[`None`] whenever equivalent indexing operation would panic.\n\n# Examples\n\n```\nlet mut v = String::from(\"hello\");\n// correct length\nassert!(v.get_mut(0..5).is_some());\n// out of bounds\nassert!(v.get_mut(..42).is_none());\nassert_eq!(Some(\"he\"), v.get_mut(0..2).map(|v| &*v));\n\nassert_eq!(\"hello\", v);\n{\n    let s = v.get_mut(0..2);\n    let s = s.map(|s| {\n        s.make_ascii_uppercase();\n        &*s\n    });\n    assert_eq!(Some(\"HE\"), s);\n}\nassert_eq!(\"HEllo\", v);\n```","links":{"`None`":"2:41686:202"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"resolved_path":{"name":"Option","id":"2:41684:205","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"2:10289:251","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"2:10289:251","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12599:34241":{"id":"2:12599:34241","crate_id":2,"name":"trim_left","span":null,"visibility":"public","docs":"Returns a string slice with leading whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`.\n\n# Text directionality\n\nA string is a sequence of bytes. 'Left' in this context means the first\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _right_ side, not the left.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \" Hello\\tworld\\t\";\n\nassert_eq!(\"Hello\\tworld\\t\", s.trim_left());\n```\n\nDirectionality:\n\n```\nlet s = \"  English\";\nassert!(Some('E') == s.trim_left().chars().next());\n\nlet s = \"  ◊¢◊ë◊®◊ô◊™\";\nassert!(Some('◊¢') == s.trim_left().chars().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_start`\", suggestion\n= \"trim_start\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_start`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12507:34226":{"id":"2:12507:34226","crate_id":2,"name":"is_char_boundary","span":null,"visibility":"public","docs":"Checks that `index`-th byte is the first byte in a UTF-8 code point\nsequence or the end of the string.\n\nThe start and end of the string (when `index == self.len()`) are\nconsidered to be boundaries.\n\nReturns `false` if `index` is greater than `self.len()`.\n\n# Examples\n\n```\nlet s = \"L√∂we ËÄÅËôé L√©opard\";\nassert!(s.is_char_boundary(0));\n// start of `ËÄÅ`\nassert!(s.is_char_boundary(6));\nassert!(s.is_char_boundary(s.len()));\n\n// second byte of `√∂`\nassert!(!s.is_char_boundary(2));\n\n// third byte of `ËÄÅ`\nassert!(!s.is_char_boundary(8));\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["index",{"primitive":"usize"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:964:1842":{"id":"0:964:1842","crate_id":0,"name":"Serialize","span":{"filename":"src/lib.rs","begin":[89,0],"end":[94,1]},"visibility":"public","docs":null,"links":{},"attrs":["#[proc_macro_derive(Serialize, attributes(serde))]"],"deprecation":null,"inner":{"proc_macro":{"kind":"derive","helpers":["serde"]}}},"2:12536:32488":{"id":"2:12536:32488","crate_id":2,"name":"encode_utf16","span":null,"visibility":"public","docs":"Returns an iterator of `u16` over the string encoded as UTF-16.\n\n# Examples\n\n```\nlet text = \"Za≈º√≥≈Çƒá gƒô≈õlƒÖ ja≈∫≈Ñ\";\n\nlet utf8_len = text.len();\nlet utf16_len = text.encode_utf16().count();\n\nassert!(utf16_len <= utf8_len);\n```","links":{},"attrs":["#[must_use =\n\"this returns the encoded string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EncodeUtf16","id":"2:43938:9686","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12566:34234":{"id":"2:12566:34234","crate_id":2,"name":"rsplit_terminator","span":null,"visibility":"public","docs":"An iterator over substrings of `self`, separated by characters\nmatched by a pattern and yielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\nEquivalent to [`split`], except that the trailing substring is\nskipped if empty.\n\n[`split`]: str::split\n\nThis method can be used for string data that is _terminated_,\nrather than _separated_ by a pattern.\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a\nreverse search, and it will be double ended if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`split_terminator`] method can be\nused.\n\n[`split_terminator`]: str::split_terminator\n\n# Examples\n\n```\nlet v: Vec<&str> = \"A.B.\".rsplit_terminator('.').collect();\nassert_eq!(v, [\"B\", \"A\"]);\n\nlet v: Vec<&str> = \"A..B..\".rsplit_terminator(\".\").collect();\nassert_eq!(v, [\"\", \"B\", \"\", \"A\"]);\n\nlet v: Vec<&str> = \"A.B:C.D\".rsplit_terminator(&['.', ':'][..]).collect();\nassert_eq!(v, [\"D\", \"C\", \"B\", \"A\"]);\n```","links":{"self::pattern":"2:12199:3814","str::split":"2:12554:27445","prim@char":"1:12021:457","str::split_terminator":"2:12563:34233"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RSplitTerminator","id":"2:43714:9672","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12204:15640","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12204:15640","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12219:15641","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5536:34908":{"id":"5:5536:34908","crate_id":5,"name":"into_string","span":null,"visibility":"public","docs":"Converts a [`Box<str>`] into a [`String`] without copying or allocating.\n\n# Examples\n\n```\nlet string = String::from(\"birthday gift\");\nlet boxed_str = string.clone().into_boxed_str();\n\nassert_eq!(boxed_str.into_string(), string);\n```","links":{"`Box<str>`":"5:276:2039","`String`":"5:7490:255"},"attrs":["#[must_use = \"`self` will be dropped if the result is not used\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"resolved_path":{"name":"Box","id":"5:276:2039","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}]],"output":{"resolved_path":{"name":"String","id":"5:7490:255","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12613:34244":{"id":"2:12613:34244","crate_id":2,"name":"trim_end_matches","span":null,"visibility":"public","docs":"Returns a string slice with all suffixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. `end` in this context means the last\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be right side, and for right-to-left languages like\nArabic or Hebrew, this will be the left side.\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_end_matches('1'), \"11foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_end_matches(char::is_numeric), \"123foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_end_matches(x), \"12foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1fooX\".trim_end_matches(|c| c == '1' || c == 'X'), \"1foo\");\n```","links":{"prim@char":"1:12021:457","self::pattern":"2:12199:3814"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12204:15640","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12204:15640","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12219:15641","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12525:34230":{"id":"2:12525:34230","crate_id":2,"name":"slice_unchecked","span":null,"visibility":"public","docs":"Creates a string slice from another string slice, bypassing safety\nchecks.\n\nThis is generally not recommended, use with caution! For a safe\nalternative see [`str`] and [`Index`].\n\n[`Index`]: crate::ops::Index\n\nThis new slice goes from `begin` to `end`, including `begin` but\nexcluding `end`.\n\nTo get a mutable string slice instead, see the\n[`slice_mut_unchecked`] method.\n\n[`slice_mut_unchecked`]: str::slice_mut_unchecked\n\n# Safety\n\nCallers of this function are responsible that three preconditions are\nsatisfied:\n\n* `begin` must not exceed `end`.\n* `begin` and `end` must be byte positions within the string slice.\n* `begin` and `end` must lie on UTF-8 sequence boundaries.\n\n# Examples\n\n```\nlet s = \"L√∂we ËÄÅËôé L√©opard\";\n\nunsafe {\n    assert_eq!(\"L√∂we ËÄÅËôé L√©opard\", s.slice_unchecked(0, 21));\n}\n\nlet s = \"Hello, world!\";\n\nunsafe {\n    assert_eq!(\"world\", s.slice_unchecked(7, 12));\n}\n```","links":{"`str`":"1:12027:1543","str::slice_mut_unchecked":"2:12526:34231","crate::ops::Index":"2:3085:2600"},"attrs":["#[deprecated(since = \"1.29.0\", note =\n\"use `get_unchecked(begin..end)` instead\")]","#[must_use]"],"deprecation":{"since":"1.29.0","note":"use `get_unchecked(begin..end)` instead"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["begin",{"primitive":"usize"}],["end",{"primitive":"usize"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"2:12546:2745":{"id":"2:12546:2745","crate_id":2,"name":"find","span":null,"visibility":"public","docs":"Returns the byte index of the first character of this string slice that\nmatches the pattern.\n\nReturns [`None`] if the pattern doesn't match.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nlet s = \"L√∂we ËÄÅËôé L√©opard Gepardi\";\n\nassert_eq!(s.find('L'), Some(0));\nassert_eq!(s.find('√©'), Some(14));\nassert_eq!(s.find(\"pard\"), Some(17));\n```\n\nMore complex patterns using point-free style and closures:\n\n```\nlet s = \"L√∂we ËÄÅËôé L√©opard\";\n\nassert_eq!(s.find(char::is_whitespace), Some(5));\nassert_eq!(s.find(char::is_lowercase), Some(1));\nassert_eq!(s.find(|c: char| c.is_whitespace() || c.is_lowercase()), Some(1));\nassert_eq!(s.find(|c: char| (c < 'o') && (c > 'a')), Some(4));\n```\n\nNot finding the pattern:\n\n```\nlet s = \"L√∂we ËÄÅËôé L√©opard\";\nlet x: &[_] = &['1', '2'];\n\nassert_eq!(s.find(x), None);\n```","links":{"`None`":"2:41686:202","prim@char":"1:12021:457","self::pattern":"2:12199:3814"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:41684:205","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12204:15640","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12587:34236":{"id":"2:12587:34236","crate_id":2,"name":"match_indices","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within this string\nslice as well as the index that the match starts at.\n\nFor matches of `pat` within `self` that overlap, only the indices\ncorresponding to the first match are returned.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rmatch_indices`] method can be used.\n\n[`rmatch_indices`]: str::rmatch_indices\n\n# Examples\n\n```\nlet v: Vec<_> = \"abcXXXabcYYYabc\".match_indices(\"abc\").collect();\nassert_eq!(v, [(0, \"abc\"), (6, \"abc\"), (12, \"abc\")]);\n\nlet v: Vec<_> = \"1abcabc2\".match_indices(\"abc\").collect();\nassert_eq!(v, [(1, \"abc\"), (4, \"abc\")]);\n\nlet v: Vec<_> = \"ababa\".match_indices(\"aba\").collect();\nassert_eq!(v, [(0, \"aba\")]); // only the first `aba`\n```","links":{"self::pattern":"2:12199:3814","`DoubleEndedIterator`":"2:7581:128","prim@char":"1:12021:457","str::rmatch_indices":"2:12590:34237"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"MatchIndices","id":"2:43796:9677","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12204:15640","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12505:879":{"id":"2:12505:879","crate_id":2,"name":"len","span":null,"visibility":"public","docs":"Returns the length of `self`.\n\nThis length is in bytes, not [`char`]s or graphemes. In other words,\nit might not be what a human considers the length of the string.\n\n[`char`]: prim@char\n\n# Examples\n\n```\nlet len = \"foo\".len();\nassert_eq!(3, len);\n\nassert_eq!(\"∆íoo\".len(), 4); // fancy f!\nassert_eq!(\"∆íoo\".chars().count(), 3);\n```","links":{"prim@char":"1:12021:457"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12527:2844":{"id":"2:12527:2844","crate_id":2,"name":"split_at","span":null,"visibility":"public","docs":"Divide one string slice into two at an index.\n\nThe argument, `mid`, should be a byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get mutable string slices instead, see the [`split_at_mut`]\nmethod.\n\n[`split_at_mut`]: str::split_at_mut\n\n# Panics\n\nPanics if `mid` is not on a UTF-8 code point boundary, or if it is\npast the end of the last code point of the string slice.\n\n# Examples\n\n```\nlet s = \"Per Martin-L√∂f\";\n\nlet (first, last) = s.split_at(3);\n\nassert_eq!(\"Per\", first);\nassert_eq!(\" Martin-L√∂f\", last);\n```","links":{"str::split_at_mut":"2:12528:29152"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["mid",{"primitive":"usize"}]],"output":{"tuple":[{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12532:32493":{"id":"2:12532:32493","crate_id":2,"name":"split_whitespace","span":null,"visibility":"public","docs":"Splits a string slice by whitespace.\n\nThe iterator returned will return string slices that are sub-slices of\nthe original string slice, separated by any amount of whitespace.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`. If you only want to split on ASCII whitespace\ninstead, use [`split_ascii_whitespace`].\n\n[`split_ascii_whitespace`]: str::split_ascii_whitespace\n\n# Examples\n\nBasic usage:\n\n```\nlet mut iter = \"A few words\".split_whitespace();\n\nassert_eq!(Some(\"A\"), iter.next());\nassert_eq!(Some(\"few\"), iter.next());\nassert_eq!(Some(\"words\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nAll kinds of whitespace are considered:\n\n```\nlet mut iter = \" Mary   had\\ta\\u{2009}little  \\n\\t lamb\".split_whitespace();\nassert_eq!(Some(\"Mary\"), iter.next());\nassert_eq!(Some(\"had\"), iter.next());\nassert_eq!(Some(\"a\"), iter.next());\nassert_eq!(Some(\"little\"), iter.next());\nassert_eq!(Some(\"lamb\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nIf the string is empty or all whitespace, the iterator yields no string slices:\n```\nassert_eq!(\"\".split_whitespace().next(), None);\nassert_eq!(\"   \".split_whitespace().next(), None);\n```","links":{"str::split_ascii_whitespace":"2:12533:32487"},"attrs":["#[must_use =\n\"this returns the split string as an iterator, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_split_whitespace\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"SplitWhitespace","id":"2:43920:9684","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12534:27446":{"id":"2:12534:27446","crate_id":2,"name":"lines","span":null,"visibility":"public","docs":"An iterator over the lines of a string, as string slices.\n\nLines are split at line endings that are either newlines (`\\n`) or\nsequences of a carriage return followed by a line feed (`\\r\\n`).\n\nLine terminators are not included in the lines returned by the iterator.\n\nNote that any carriage return (`\\r`) not immediately followed by a\nline feed (`\\n`) does not split a line. These carriage returns are\nthereby included in the produced lines.\n\nThe final line ending is optional. A string that ends with a final line\nending will return the same lines as an otherwise identical string\nwithout a final line ending.\n\n# Examples\n\nBasic usage:\n\n```\nlet text = \"foo\\r\\nbar\\n\\nbaz\\r\";\nlet mut lines = text.lines();\n\nassert_eq!(Some(\"foo\"), lines.next());\nassert_eq!(Some(\"bar\"), lines.next());\nassert_eq!(Some(\"\"), lines.next());\n// Trailing carriage return is included in the last line\nassert_eq!(Some(\"baz\\r\"), lines.next());\n\nassert_eq!(None, lines.next());\n```\n\nThe final line does not require any ending:\n\n```\nlet text = \"foo\\nbar\\n\\r\\nbaz\";\nlet mut lines = text.lines();\n\nassert_eq!(Some(\"foo\"), lines.next());\nassert_eq!(Some(\"bar\"), lines.next());\nassert_eq!(Some(\"\"), lines.next());\nassert_eq!(Some(\"baz\"), lines.next());\n\nassert_eq!(None, lines.next());\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Lines","id":"2:43900:9682","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12604:2103":{"id":"2:12604:2103","crate_id":2,"name":"trim_start_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. `start` in this context means the first\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be left side, and for right-to-left languages like\nArabic or Hebrew, this will be the right side.\n\n# Examples\n\n```\nassert_eq!(\"11foo1bar11\".trim_start_matches('1'), \"foo1bar11\");\nassert_eq!(\"123foo1bar123\".trim_start_matches(char::is_numeric), \"foo1bar123\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_start_matches(x), \"foo1bar12\");\n```","links":{"prim@char":"1:12021:457","self::pattern":"2:12199:3814"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12204:15640","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12515:349":{"id":"2:12515:349","crate_id":2,"name":"as_ptr","span":null,"visibility":"public","docs":"Converts a string slice to a raw pointer.\n\nAs string slices are a slice of bytes, the raw pointer points to a\n[`u8`]. This pointer will be pointing to the first byte of the string\nslice.\n\nThe caller must ensure that the returned pointer is never written to.\nIf you need to mutate the contents of the string slice, use [`as_mut_ptr`].\n\n[`as_mut_ptr`]: str::as_mut_ptr\n\n# Examples\n\n```\nlet s = \"Hello\";\nlet ptr = s.as_ptr();\n```","links":{"str::as_mut_ptr":"2:12516:348","`u8`":"1:12038:1649"},"attrs":["#[rustc_never_returns_null_ptr]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"raw_pointer":{"mutable":false,"type":{"primitive":"u8"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12578:29169":{"id":"2:12578:29169","crate_id":2,"name":"rsplit_once","span":null,"visibility":"public","docs":"Splits the string on the last occurrence of the specified delimiter and\nreturns prefix before delimiter and suffix after delimiter.\n\n# Examples\n\n```\nassert_eq!(\"cfg\".rsplit_once('='), None);\nassert_eq!(\"cfg=foo\".rsplit_once('='), Some((\"cfg\", \"foo\")));\nassert_eq!(\"cfg=foo=bar\".rsplit_once('='), Some((\"cfg=foo\", \"bar\")));\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["delimiter",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:41684:205","args":{"angle_bracketed":{"args":[{"type":{"tuple":[{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12204:15640","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12204:15640","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12219:15641","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12529:2434":{"id":"2:12529:2434","crate_id":2,"name":"chars","span":null,"visibility":"public","docs":"Returns an iterator over the [`char`]s of a string slice.\n\nAs a string slice consists of valid UTF-8, we can iterate through a\nstring slice by [`char`]. This method returns such an iterator.\n\nIt's important to remember that [`char`] represents a Unicode Scalar\nValue, and might not match your idea of what a 'character' is. Iteration\nover grapheme clusters may be what you actually want. This functionality\nis not provided by Rust's standard library, check crates.io instead.\n\n# Examples\n\nBasic usage:\n\n```\nlet word = \"goodbye\";\n\nlet count = word.chars().count();\nassert_eq!(7, count);\n\nlet mut chars = word.chars();\n\nassert_eq!(Some('g'), chars.next());\nassert_eq!(Some('o'), chars.next());\nassert_eq!(Some('o'), chars.next());\nassert_eq!(Some('d'), chars.next());\nassert_eq!(Some('b'), chars.next());\nassert_eq!(Some('y'), chars.next());\nassert_eq!(Some('e'), chars.next());\n\nassert_eq!(None, chars.next());\n```\n\nRemember, [`char`]s might not match your intuition about characters:\n\n[`char`]: prim@char\n\n```\nlet y = \"yÃÜ\";\n\nlet mut chars = y.chars();\n\nassert_eq!(Some('y'), chars.next()); // not 'yÃÜ'\nassert_eq!(Some('\\u{0306}'), chars.next());\n\nassert_eq!(None, chars.next());\n```","links":{"prim@char":"1:12021:457"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Chars","id":"2:43616:9665","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:63:382":{"id":"0:63:382","crate_id":0,"name":"attr","span":{"filename":"src/internals/attr.rs","begin":[1,0],"end":[1878,1]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"module":{"is_crate":false,"items":["0:86-0:994:2069"],"is_stripped":false}}},"2:12516:348":{"id":"2:12516:348","crate_id":2,"name":"as_mut_ptr","span":null,"visibility":"public","docs":"Converts a mutable string slice to a raw pointer.\n\nAs string slices are a slice of bytes, the raw pointer points to a\n[`u8`]. This pointer will be pointing to the first byte of the string\nslice.\n\nIt is your responsibility to make sure that the string slice only gets\nmodified in a way that it remains valid UTF-8.","links":{"`u8`":"1:12038:1649"},"attrs":["#[rustc_never_returns_null_ptr]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"raw_pointer":{"mutable":true,"type":{"primitive":"u8"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5537:3482":{"id":"5:5537:3482","crate_id":5,"name":"repeat","span":null,"visibility":"public","docs":"Creates a new [`String`] by repeating a string `n` times.\n\n# Panics\n\nThis function will panic if the capacity would overflow.\n\n# Examples\n\nBasic usage:\n\n```\nassert_eq!(\"abc\".repeat(4), String::from(\"abcabcabcabc\"));\n```\n\nA panic upon overflow:\n\n```should_panic\n// this will panic at runtime\nlet huge = \"0123456789abcdef\".repeat(usize::MAX);\n```","links":{"`String`":"5:7490:255"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["n",{"primitive":"usize"}]],"output":{"resolved_path":{"name":"String","id":"5:7490:255","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12523:29130":{"id":"2:12523:29130","crate_id":2,"name":"get_unchecked_mut","span":null,"visibility":"public","docs":"Returns a mutable, unchecked subslice of `str`.\n\nThis is the unchecked alternative to indexing the `str`.\n\n# Safety\n\nCallers of this function are responsible that these preconditions are\nsatisfied:\n\n* The starting index must not exceed the ending index;\n* Indexes must be within bounds of the original slice;\n* Indexes must lie on UTF-8 sequence boundaries.\n\nFailing that, the returned string slice may reference invalid memory or\nviolate the invariants communicated by the `str` type.\n\n# Examples\n\n```\nlet mut v = String::from(\"üóª‚ààüåè\");\nunsafe {\n    assert_eq!(\"üóª\", v.get_unchecked_mut(0..4));\n    assert_eq!(\"‚àà\", v.get_unchecked_mut(4..7));\n    assert_eq!(\"üåè\", v.get_unchecked_mut(7..11));\n}\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"2:10289:251","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"2:10289:251","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"2:12563:34233":{"id":"2:12563:34233","crate_id":2,"name":"split_terminator","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by\ncharacters matched by a pattern.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\nEquivalent to [`split`], except that the trailing substring\nis skipped if empty.\n\n[`split`]: str::split\n\nThis method can be used for string data that is _terminated_,\nrather than _separated_ by a pattern.\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rsplit_terminator`] method can be used.\n\n[`rsplit_terminator`]: str::rsplit_terminator\n\n# Examples\n\n```\nlet v: Vec<&str> = \"A.B.\".split_terminator('.').collect();\nassert_eq!(v, [\"A\", \"B\"]);\n\nlet v: Vec<&str> = \"A..B..\".split_terminator(\".\").collect();\nassert_eq!(v, [\"A\", \"\", \"B\", \"\"]);\n\nlet v: Vec<&str> = \"A.B:C.D\".split_terminator(&['.', ':'][..]).collect();\nassert_eq!(v, [\"A\", \"B\", \"C\", \"D\"]);\n```","links":{"self::pattern":"2:12199:3814","str::split":"2:12554:27445","prim@char":"1:12021:457","`DoubleEndedIterator`":"2:7581:128","str::rsplit_terminator":"2:12566:34234"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"SplitTerminator","id":"2:43696:9671","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12204:15640","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:86-0:994:2069":{"id":"0:86-0:994:2069","crate_id":0,"name":null,"span":{"filename":"src/internals/attr.rs","begin":[21,0],"end":[21,43]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"import":{"source":"crate::internals::case::RenameRule","name":"RenameRule","id":"0:994:2069","glob":false}}},"2:12581:2191":{"id":"2:12581:2191","crate_id":2,"name":"matches","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within the given string\nslice.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rmatches`] method can be used.\n\n[`rmatches`]: str::rmatches\n\n# Examples\n\n```\nlet v: Vec<&str> = \"abcXXXabcYYYabc\".matches(\"abc\").collect();\nassert_eq!(v, [\"abc\", \"abc\", \"abc\"]);\n\nlet v: Vec<&str> = \"1abc2abc3\".matches(char::is_numeric).collect();\nassert_eq!(v, [\"1\", \"2\", \"3\"]);\n```","links":{"self::pattern":"2:12199:3814","`DoubleEndedIterator`":"2:7581:128","prim@char":"1:12021:457","str::rmatches":"2:12584:34235"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Matches","id":"2:43850:9680","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12204:15640","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12607:26773":{"id":"2:12607:26773","crate_id":2,"name":"strip_prefix","span":null,"visibility":"public","docs":"Returns a string slice with the prefix removed.\n\nIf the string starts with the pattern `prefix`, returns substring after the prefix, wrapped\nin `Some`.  Unlike `trim_start_matches`, this method removes the prefix exactly once.\n\nIf the string does not start with `prefix`, returns `None`.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nassert_eq!(\"foo:bar\".strip_prefix(\"foo:\"), Some(\"bar\"));\nassert_eq!(\"foo:bar\".strip_prefix(\"bar\"), None);\nassert_eq!(\"foofoo\".strip_prefix(\"foo\"), Some(\"foo\"));\n```","links":{"prim@char":"1:12021:457","self::pattern":"2:12199:3814"},"attrs":["#[must_use =\n\"this returns the remaining substring as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["prefix",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:41684:205","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12204:15640","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12628:30304":{"id":"2:12628:30304","crate_id":2,"name":"make_ascii_lowercase","span":null,"visibility":"public","docs":"Converts this string to its ASCII lower case equivalent in-place.\n\nASCII letters 'A' to 'Z' are mapped to 'a' to 'z',\nbut non-ASCII letters are unchanged.\n\nTo return a new lowercased value without modifying the existing one, use\n[`to_ascii_lowercase()`].\n\n[`to_ascii_lowercase()`]: #method.to_ascii_lowercase\n\n# Examples\n\n```\nlet mut s = String::from(\"GR√ú√üE, J√úRGEN ‚ù§\");\n\ns.make_ascii_lowercase();\n\nassert_eq!(\"gr√ú√üe, j√úrgen ‚ù§\", s);\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}}},"paths":{"24:4025:3706":{"crate_id":24,"path":["syn","token","Ge"],"kind":"struct"},"17:14420:7288":{"crate_id":17,"path":["object","pe","ImageDebugDirectory"],"kind":"struct"},"1:5557:8560":{"crate_id":1,"path":["std","process","exit"],"kind":"function"},"1:4031:10351":{"crate_id":1,"path":["std","os","unix","fs","DirEntryExt2"],"kind":"trait"},"17:12698:6813":{"crate_id":17,"path":["object","macho","SubFrameworkCommand"],"kind":"struct"},"6:4830:8227":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_extended_err"],"kind":"struct"},"1:1758:10218":{"crate_id":1,"path":["std","env","Vars"],"kind":"struct"},"2:46975:9128":{"crate_id":2,"path":["core","core_arch","simd","i64x4"],"kind":"struct"},"17:11910:6654":{"crate_id":17,"path":["object","elf","FileHeader64"],"kind":"struct"},"11:1127:21569":{"crate_id":11,"path":["hashbrown","map","VacantEntryRef"],"kind":"struct"},"24:4433:3735":{"crate_id":24,"path":["syn","token","Tilde"],"kind":"struct"},"5:687:117":{"crate_id":5,"path":["alloc","borrow","Cow"],"kind":"enum"},"21:2303:2381":{"crate_id":21,"path":["proc_macro","bridge","Punct"],"kind":"struct"},"16:8281:7585":{"crate_id":16,"path":["gimli","read","StoreOnHeap"],"kind":"struct"},"6:6819:8670":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_fpstate"],"kind":"struct"},"6:7657:8781":{"crate_id":6,"path":["libc","unix","linux_like","linux","can_frame"],"kind":"struct"},"16:6531:9496":{"crate_id":16,"path":["gimli","read","index","UnitIndexSectionIterator"],"kind":"struct"},"24:1404:2063":{"crate_id":24,"path":["syn","meta","ParseNestedMeta"],"kind":"struct"},"1:3273:10319":{"crate_id":1,"path":["std","io","stdio","Stderr"],"kind":"struct"},"2:40475:3518":{"crate_id":2,"path":["core","iter","adapters","peekable","Peekable"],"kind":"struct"},"1:5628:9725":{"crate_id":1,"path":["std","sync","mpsc","SyncSender"],"kind":"struct"},"5:2961:2234":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Owned"],"kind":"enum"},"17:9564:22588":{"crate_id":17,"path":["object","read","any","ComdatIterator"],"kind":"struct"},"1:3977:10347":{"crate_id":1,"path":["std","os","unix","fs","OpenOptionsExt"],"kind":"trait"},"17:13040:6879":{"crate_id":17,"path":["object","macho","EncryptionInfoCommand32"],"kind":"struct"},"2:2909:3714":{"crate_id":2,"path":["core","ops","bit","Not"],"kind":"trait"},"24:5007:2656":{"crate_id":24,"path":["syn","generics","LifetimeParam"],"kind":"struct"},"2:44445:9720":{"crate_id":2,"path":["core","time","TryFromFloatSecsError"],"kind":"struct"},"6:7365:8754":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","align","max_align_t"],"kind":"struct"},"1:7516:2072":{"crate_id":1,"path":["std","backtrace_rs","symbolize","Symbol"],"kind":"struct"},"1:7834:10281":{"crate_id":1,"path":["std","fs","ReadDir"],"kind":"struct"},"24:3170:2724":{"crate_id":24,"path":["syn","token","Static"],"kind":"struct"},"17:8686:22575":{"crate_id":17,"path":["object","common","BinaryFormat"],"kind":"enum"},"17:8978:22584":{"crate_id":17,"path":["object","common","SectionFlags"],"kind":"enum"},"10:44:7718":{"crate_id":10,"path":["adler","Adler32"],"kind":"struct"},"17:14308:7257":{"crate_id":17,"path":["object","pe","ImageArmRuntimeFunctionEntry"],"kind":"struct"},"1:4372:10369":{"crate_id":1,"path":["std","os","unix","net","stream","UnixStream"],"kind":"struct"},"5:261:6142":{"crate_id":5,"path":["alloc","boxed","thin","drop","DropGuard"],"kind":"struct"},"6:4789:8205":{"crate_id":6,"path":["libc","unix","linux_like","linux","arpd_request"],"kind":"struct"},"2:42314:10136":{"crate_id":2,"path":["core","sync","exclusive","Exclusive"],"kind":"struct"},"24:4918:3366":{"crate_id":24,"path":["syn","expr","ExprTuple"],"kind":"struct"},"14:215:9554":{"crate_id":14,"path":["rustc_demangle","TryDemangleError"],"kind":"struct"},"1:8299:9235":{"crate_id":1,"path":["std","os","unix","ucred","UCred"],"kind":"struct"},"1:2939:238":{"crate_id":1,"path":["std","io","error","Result"],"kind":"type_alias"},"2:42741:70":{"crate_id":2,"path":["core","fmt","Alignment"],"kind":"enum"},"9:52:10111":{"crate_id":9,"path":["miniz_oxide","inflate","core","DecompressorOxide"],"kind":"struct"},"1:8321:8639":{"crate_id":1,"path":["std","os","linux","raw","arch","stat"],"kind":"struct"},"6:7639:8778":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_mutex_t"],"kind":"struct"},"5:1484:10204":{"crate_id":5,"path":["alloc","collections","btree","map","ValuesMut"],"kind":"struct"},"2:43473:9057":{"crate_id":2,"path":["core","slice","iter","ArrayWindows"],"kind":"struct"},"24:601:3414":{"crate_id":24,"path":["syn","error","IntoIter"],"kind":"struct"},"2:42996:9661":{"crate_id":2,"path":["core","hash","sip","Sip24Rounds"],"kind":"struct"},"24:554:5690":{"crate_id":24,"path":["syn","error","ErrorMessage"],"kind":"struct"},"16:5866:9436":{"crate_id":16,"path":["gimli","read","cfi","PartialFrameDescriptionEntry"],"kind":"struct"},"2:41880:3419":{"crate_id":2,"path":["core","result","IterMut"],"kind":"struct"},"1:8148:9231":{"crate_id":1,"path":["std","io","IoSlice"],"kind":"struct"},"6:1596:7928":{"crate_id":6,"path":["libc","unix","linux_like","Dl_info"],"kind":"struct"},"2:46945:9127":{"crate_id":2,"path":["core","core_arch","simd","i32x8"],"kind":"struct"},"16:5816:9429":{"crate_id":16,"path":["gimli","read","cfi","AugmentationData"],"kind":"struct"},"6:4989:8312":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_nxtinfo"],"kind":"struct"},"5:7240:9580":{"crate_id":5,"path":["alloc","collections","binary_heap","IntoIterSorted"],"kind":"struct"},"2:6872:2804":{"crate_id":2,"path":["core","iter","adapters","zip","zip"],"kind":"function"},"17:8825:22579":{"crate_id":17,"path":["object","common","SymbolScope"],"kind":"enum"},"24:3972:3703":{"crate_id":24,"path":["syn","token","DotDotEq"],"kind":"struct"},"24:4867:3354":{"crate_id":24,"path":["syn","expr","ExprLoop"],"kind":"struct"},"24:4078:3710":{"crate_id":24,"path":["syn","token","Lt"],"kind":"struct"},"6:6711:8635":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stack_t"],"kind":"struct"},"24:5301:214":{"crate_id":24,"path":["syn","path","Path"],"kind":"struct"},"1:10313:111":{"crate_id":1,"path":["std","sys","unix","process","process_common","Command"],"kind":"struct"},"2:20976:32499":{"crate_id":2,"path":["core","core_simd","swizzle","rotate_lanes_left","Rotate"],"kind":"struct"},"16:7694:7380":{"crate_id":16,"path":["gimli","read","str","DebugStr"],"kind":"struct"},"1:6151:6221":{"crate_id":1,"path":["std","sync","mpmc","waker","SyncWaker"],"kind":"struct"},"2:43750:9674":{"crate_id":2,"path":["core","str","iter","SplitN"],"kind":"struct"},"2:43963:9628":{"crate_id":2,"path":["core","str","iter","EscapeUnicode"],"kind":"struct"},"17:10616:9384":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSubsubsection"],"kind":"struct"},"2:11980:9679":{"crate_id":2,"path":["core","str","iter","MatchesInternal"],"kind":"struct"},"1:1821:10234":{"crate_id":1,"path":["std","env","ArgsOs"],"kind":"struct"},"24:5521:2543":{"crate_id":24,"path":["syn","ty","ReturnType"],"kind":"enum"},"24:4066:3709":{"crate_id":24,"path":["syn","token","Le"],"kind":"struct"},"2:42686:70":{"crate_id":2,"path":["core","fmt","rt","Alignment"],"kind":"enum"},"16:2526:7345":{"crate_id":16,"path":["gimli","common","DebugLineStrOffset"],"kind":"struct"},"5:1494:10131":{"crate_id":5,"path":["alloc","collections","btree","map","IntoKeys"],"kind":"struct"},"2:22319:32247":{"crate_id":2,"path":["core","num","dec2flt","FloatErrorKind"],"kind":"enum"},"2:42275:96":{"crate_id":2,"path":["core","sync","atomic","AtomicUsize"],"kind":"struct"},"17:12970:6870":{"crate_id":17,"path":["object","macho","PrebindCksumCommand"],"kind":"struct"},"5:1376:98":{"crate_id":5,"path":["alloc","collections","btree","map","BTreeMap"],"kind":"struct"},"2:40136:15683":{"crate_id":2,"path":["core","char","EscapeDebugInner"],"kind":"enum"},"16:8294:135":{"crate_id":16,"path":["gimli","read","Error"],"kind":"enum"},"24:99:3866":{"crate_id":24,"path":["syn","token","private","CustomToken"],"kind":"trait"},"6:7679:8786":{"crate_id":6,"path":["libc","unix","linux_like","linux","canxl_frame"],"kind":"struct"},"16:5588:7366":{"crate_id":16,"path":["gimli","read","cfi","DebugFrame"],"kind":"struct"},"17:8659:22560":{"crate_id":17,"path":["object","common","AddressSize"],"kind":"enum"},"2:47959:9171":{"crate_id":2,"path":["core","core_arch","x86","__m128i"],"kind":"struct"},"18:113:26600":{"crate_id":18,"path":["memchr","memchr","iter","Memchr3"],"kind":"struct"},"2:2510:10286":{"crate_id":2,"path":["core","convert","num","private","Sealed"],"kind":"trait"},"17:10214:22646":{"crate_id":17,"path":["object","read","elf","segment","ElfSegmentIterator"],"kind":"struct"},"11:1862:9564":{"crate_id":11,"path":["hashbrown","set","Intersection"],"kind":"struct"},"17:13148:6904":{"crate_id":17,"path":["object","macho","SymsegCommand"],"kind":"struct"},"2:44052:9687":{"crate_id":2,"path":["core","str","pattern","CharSearcher"],"kind":"struct"},"17:13989:7152":{"crate_id":17,"path":["object","pe","ImageTlsDirectory64"],"kind":"struct"},"21:1196:220":{"crate_id":21,"path":["proc_macro","bridge","client","ProcMacro"],"kind":"enum"},"2:4148:3587":{"crate_id":2,"path":["core","cell","lazy","LazyCell"],"kind":"struct"},"1:6529:10050":{"crate_id":1,"path":["std","sync","poison","PoisonError"],"kind":"struct"},"2:11729:15780":{"crate_id":2,"path":["core","slice","SlicePattern"],"kind":"trait"},"17:11191:6578":{"crate_id":17,"path":["object","read","pe","export","Export"],"kind":"struct"},"17:13966:7149":{"crate_id":17,"path":["object","pe","ImageImportByName"],"kind":"struct"},"18:766:26610":{"crate_id":18,"path":["memchr","memmem","SearcherRevKind"],"kind":"enum"},"2:30316:4635":{"crate_id":2,"path":["core","mem","manually_drop","ManuallyDrop"],"kind":"struct"},"16:6171:218":{"crate_id":16,"path":["gimli","read","cfi","Pointer"],"kind":"enum"},"1:1550:9564":{"crate_id":1,"path":["std","collections","hash","set","Intersection"],"kind":"struct"},"24:4522:3320":{"crate_id":24,"path":["syn","attr","MetaNameValue"],"kind":"struct"},"16:5727:9422":{"crate_id":16,"path":["gimli","read","cfi","SectionBaseAddresses"],"kind":"struct"},"6:5068:8348":{"crate_id":6,"path":["libc","unix","linux_like","linux","af_alg_iv"],"kind":"struct"},"2:45955:9082":{"crate_id":2,"path":["core","core_arch","simd","i64x1"],"kind":"struct"},"24:4264:3723":{"crate_id":24,"path":["syn","token","Pound"],"kind":"struct"},"2:10004:6193":{"crate_id":2,"path":["core","slice","sort","InsertionHole"],"kind":"struct"},"23:345:2677":{"crate_id":23,"path":["quote","quote_spanned"],"kind":"macro"},"1:1760:10219":{"crate_id":1,"path":["std","env","VarsOs"],"kind":"struct"},"17:13162:6905":{"crate_id":17,"path":["object","macho","IdentCommand"],"kind":"struct"},"16:6818:9517":{"crate_id":16,"path":["gimli","read","line","CompleteLineProgram"],"kind":"struct"},"1:2361:10272":{"crate_id":1,"path":["std","fs","read_link"],"kind":"function"},"17:13298:6928":{"crate_id":17,"path":["object","macho","ScatteredRelocationInfo"],"kind":"struct"},"24:4948:58":{"crate_id":24,"path":["syn","expr","parsing","kw","builtin"],"kind":"struct"},"24:3119:240":{"crate_id":24,"path":["syn","token","Return"],"kind":"struct"},"5:4988:6162":{"crate_id":5,"path":["alloc","rc","from_iter_exact","Guard"],"kind":"struct"},"20:728:1979":{"crate_id":20,"path":["proc_macro2","fallback","Group"],"kind":"struct"},"2:2947:6358":{"crate_id":2,"path":["core","ops","bit","BitOrAssign"],"kind":"trait"},"16:7554:7378":{"crate_id":16,"path":["gimli","read","rnglists","DebugRanges"],"kind":"struct"},"18:736:26609":{"crate_id":18,"path":["memchr","memmem","SearcherKind"],"kind":"enum"},"5:7453:9584":{"crate_id":5,"path":["alloc","ffi","c_str","FromVecWithNulError"],"kind":"struct"},"16:6425:9484":{"crate_id":16,"path":["gimli","read","aranges","ArangeHeader"],"kind":"struct"},"2:22773:198":{"crate_id":2,"path":["core","num","nonzero","NonZeroU32"],"kind":"struct"},"24:4560:1834":{"crate_id":24,"path":["syn","derive","DeriveInput"],"kind":"struct"},"16:2969:21644":{"crate_id":16,"path":["gimli","common","SectionId"],"kind":"enum"},"24:4112:3712":{"crate_id":24,"path":["syn","token","MinusEq"],"kind":"struct"},"24:5304:2640":{"crate_id":24,"path":["syn","path","PathSegment"],"kind":"struct"},"2:9627:118":{"crate_id":2,"path":["core","fmt","macros","Debug"],"kind":"proc_derive"},"21:183:4424":{"crate_id":21,"path":["proc_macro","bridge","closure","Closure"],"kind":"struct"},"24:3948:3701":{"crate_id":24,"path":["syn","token","DotDot"],"kind":"struct"},"24:3255:1974":{"crate_id":24,"path":["syn","token","Type"],"kind":"struct"},"2:8039:32727":{"crate_id":2,"path":["core","net","display_buffer","DisplayBuffer"],"kind":"struct"},"2:2888:3459":{"crate_id":2,"path":["core","ops","arith","AddAssign"],"kind":"trait"},"24:5316:2357":{"crate_id":24,"path":["syn","path","GenericArgument"],"kind":"enum"},"24:5495:3402":{"crate_id":24,"path":["syn","ty","TypeReference"],"kind":"struct"},"24:4898:3361":{"crate_id":24,"path":["syn","expr","ExprRepeat"],"kind":"struct"},"17:14469:7303":{"crate_id":17,"path":["object","pe","ImageFunctionEntry64"],"kind":"struct"},"1:4300:10375":{"crate_id":1,"path":["std","os","unix","net","listener","UnixListener"],"kind":"struct"},"1:2347:10269":{"crate_id":1,"path":["std","fs","symlink_metadata"],"kind":"function"},"15:0:3182":{"crate_id":15,"path":["addr2line"],"kind":"module"},"21:1063:2058":{"crate_id":21,"path":["proc_macro","bridge","client","Span"],"kind":"struct"},"9:330:7755":{"crate_id":9,"path":["miniz_oxide","inflate","core","LocalVars"],"kind":"struct"},"2:11280:15630":{"crate_id":2,"path":["core","slice","iter","GroupByMut"],"kind":"struct"},"16:6742:9503":{"crate_id":16,"path":["gimli","read","line","LineSequence"],"kind":"struct"},"18:521:26613":{"crate_id":18,"path":["memchr","memmem","prefilter","Prefilter"],"kind":"enum"},"11:1855:4771":{"crate_id":11,"path":["hashbrown","set","ExtractIf"],"kind":"struct"},"17:12465:6776":{"crate_id":17,"path":["object","macho","FatHeader"],"kind":"struct"},"24:4787:3336":{"crate_id":24,"path":["syn","expr","ExprAssign"],"kind":"struct"},"24:4847:3350":{"crate_id":24,"path":["syn","expr","ExprIf"],"kind":"struct"},"17:10420:6372":{"crate_id":17,"path":["object","read","elf","note","Note"],"kind":"struct"},"1:11594:27415":{"crate_id":1,"path":["std","panicking","panic_count","MustAbort"],"kind":"enum"},"1:12033:805":{"crate_id":1,"path":["std","i8"],"kind":"primitive"},"2:10529:9597":{"crate_id":2,"path":["core","slice","iter","SplitInclusive"],"kind":"struct"},"17:12685:6812":{"crate_id":17,"path":["object","macho","DylibCommand"],"kind":"struct"},"2:2872:6350":{"crate_id":2,"path":["core","ops","arith","Div"],"kind":"trait"},"21:2534:4796":{"crate_id":21,"path":["proc_macro","bridge","ExpnGlobals"],"kind":"struct"},"1:1072:10035":{"crate_id":1,"path":["std","collections","hash","map","OccupiedError"],"kind":"struct"},"6:6059:8524":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","regex_t"],"kind":"struct"},"1:3318:10312":{"crate_id":1,"path":["std","io","stdio","IsTerminal"],"kind":"trait"},"1:9090:246":{"crate_id":1,"path":["std","sync","rwlock","RwLockReadGuard"],"kind":"struct"},"6:6228:8574":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","sysinfo"],"kind":"struct"},"6:4449:8084":{"crate_id":6,"path":["libc","unix","linux_like","linux","cpu_set_t"],"kind":"struct"},"2:39439:15724":{"crate_id":2,"path":["core","ops","try_trait","Yeet"],"kind":"struct"},"2:40912:3485":{"crate_id":2,"path":["core","iter","sources","repeat_n","RepeatN"],"kind":"struct"},"24:5105:2332":{"crate_id":24,"path":["syn","lit","Lit"],"kind":"enum"},"1:4787:6214":{"crate_id":1,"path":["std","os","fd","owned","OwnedFd"],"kind":"struct"},"16:5830:9430":{"crate_id":16,"path":["gimli","read","cfi","CommonInformationEntry"],"kind":"struct"},"5:3219:34186":{"crate_id":5,"path":["alloc","collections","btree","set","IntersectionInner"],"kind":"enum"},"17:14355:7269":{"crate_id":17,"path":["object","pe","ImageEnclaveConfig32"],"kind":"struct"},"16:5798:7424":{"crate_id":16,"path":["gimli","read","cfi","Augmentation"],"kind":"struct"},"21:53:4797":{"crate_id":21,"path":["proc_macro","bridge","buffer","Buffer"],"kind":"struct"},"2:40392:3512":{"crate_id":2,"path":["core","iter","adapters","filter","Filter"],"kind":"struct"},"18:515:6380":{"crate_id":18,"path":["memchr","memmem","prefilter","PrefilterFn"],"kind":"struct"},"17:14134:7192":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation32V2"],"kind":"struct"},"5:3671:6142":{"crate_id":5,"path":["alloc","collections","linked_list","drop","DropGuard"],"kind":"struct"},"24:2094:2613":{"crate_id":24,"path":["syn","punctuated","Pair"],"kind":"enum"},"1:5769:10137":{"crate_id":1,"path":["std","sync","condvar","Condvar"],"kind":"struct"},"16:4613:7403":{"crate_id":16,"path":["gimli","constants","DwVis"],"kind":"struct"},"1:6585:10448":{"crate_id":1,"path":["std","sync","remutex","ReentrantMutex"],"kind":"struct"},"24:1967:3415":{"crate_id":24,"path":["syn","punctuated","Iter"],"kind":"struct"},"17:12645:6804":{"crate_id":17,"path":["object","macho","Fvmlib"],"kind":"struct"},"14:40:1991":{"crate_id":14,"path":["rustc_demangle","v0","Ident"],"kind":"struct"},"24:2711:3663":{"crate_id":24,"path":["syn","token","Crate"],"kind":"struct"},"6:4908:8262":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlattr"],"kind":"struct"},"2:44235:9700":{"crate_id":2,"path":["core","str","pattern","EmptyNeedle"],"kind":"struct"},"24:4795:3338":{"crate_id":24,"path":["syn","expr","ExprAwait"],"kind":"struct"},"17:256:35530":{"crate_id":17,"path":["object","read","util","DebugByte"],"kind":"struct"},"2:22971:192":{"crate_id":2,"path":["core","num","nonzero","NonZeroI32"],"kind":"struct"},"1:6135:6206":{"crate_id":1,"path":["std","sync","mpmc","waker","Waker"],"kind":"struct"},"7:78:21482":{"crate_id":7,"path":["unwind","libunwind","_Unwind_Action"],"kind":"enum"},"17:9711:35515":{"crate_id":17,"path":["object","read","any","SymbolIteratorInternal"],"kind":"enum"},"2:2904:6355":{"crate_id":2,"path":["core","ops","arith","RemAssign"],"kind":"trait"},"2:2960:6360":{"crate_id":2,"path":["core","ops","bit","ShrAssign"],"kind":"trait"},"2:4179:3588":{"crate_id":2,"path":["core","cell","once","OnceCell"],"kind":"struct"},"24:4153:3715":{"crate_id":24,"path":["syn","token","Or"],"kind":"struct"},"6:5015:8324":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_nl"],"kind":"struct"},"16:6243:2021":{"crate_id":16,"path":["gimli","read","dwarf","Unit"],"kind":"struct"},"17:11639:6578":{"crate_id":17,"path":["object","read","Export"],"kind":"struct"},"2:40212:32248":{"crate_id":2,"path":["core","ffi","c_str","FromBytesWithNulErrorKind"],"kind":"enum"},"2:2379:213":{"crate_id":2,"path":["core","cmp","PartialOrd"],"kind":"trait"},"2:43622:9666":{"crate_id":2,"path":["core","str","iter","CharIndices"],"kind":"struct"},"2:42156:87":{"crate_id":2,"path":["core","sync","atomic","AtomicI64"],"kind":"struct"},"2:2511:15689":{"crate_id":2,"path":["core","convert","num","FloatToInt"],"kind":"trait"},"20:771:3436":{"crate_id":20,"path":["proc_macro2","extra","DelimSpan"],"kind":"struct"},"1:7856:9729":{"crate_id":1,"path":["std","fs","Permissions"],"kind":"struct"},"5:1275:10211":{"crate_id":5,"path":["alloc","collections","btree","map","entry","VacantEntry"],"kind":"struct"},"17:9998:6485":{"crate_id":17,"path":["object","read","coff","section","CoffSection"],"kind":"struct"},"2:7552:3495":{"crate_id":2,"path":["core","iter","traits","collect","Extend"],"kind":"trait"},"17:11074:22764":{"crate_id":17,"path":["object","read","pe","file","PeComdat"],"kind":"struct"},"5:7252:4773":{"crate_id":5,"path":["alloc","collections","binary_heap","Drain"],"kind":"struct"},"16:7269:35497":{"crate_id":16,"path":["gimli","read","op","OperationEvaluationResult"],"kind":"enum"},"1:9119:9266":{"crate_id":1,"path":["std","time","SystemTime"],"kind":"struct"},"6:4535:8123":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_envelope"],"kind":"struct"},"1:11036:6239":{"crate_id":1,"path":["std","sys","unix","process","process_inner","posix_spawn","PosixSpawnFileActions"],"kind":"struct"},"11:2286:10211":{"crate_id":11,"path":["hashbrown","table","VacantEntry"],"kind":"struct"},"17:10714:22731":{"crate_id":17,"path":["object","read","macho","file","MachOComdatIterator"],"kind":"struct"},"17:11048:22754":{"crate_id":17,"path":["object","read","pe","file","PeFile"],"kind":"struct"},"2:41769:3985":{"crate_id":2,"path":["core","panic","location","Location"],"kind":"struct"},"16:7342:35480":{"crate_id":16,"path":["gimli","read","op","EvaluationState"],"kind":"enum"},"24:3136:3681":{"crate_id":24,"path":["syn","token","SelfType"],"kind":"struct"},"2:2884:6361":{"crate_id":2,"path":["core","ops","arith","Neg"],"kind":"trait"},"2:43525:9603":{"crate_id":2,"path":["core","slice","iter","RChunks"],"kind":"struct"},"17:8895:22581":{"crate_id":17,"path":["object","common","RelocationEncoding"],"kind":"enum"},"11:841:10207":{"crate_id":11,"path":["hashbrown","map","RawOccupiedEntryMut"],"kind":"struct"},"24:3914:3699":{"crate_id":24,"path":["syn","token","Dollar"],"kind":"struct"},"24:3868:3696":{"crate_id":24,"path":["syn","token","CaretEq"],"kind":"struct"},"6:6934:8741":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ptrace_rseq_configuration"],"kind":"struct"},"17:12237:6716":{"crate_id":17,"path":["object","elf","Verneed"],"kind":"struct"},"17:10980:6521":{"crate_id":17,"path":["object","read","macho","symbol","SymbolTable"],"kind":"struct"},"2:39321:224":{"crate_id":2,"path":["core","ops","range","RangeFrom"],"kind":"struct"},"21:2644:3414":{"crate_id":21,"path":["proc_macro","token_stream","IntoIter"],"kind":"struct"},"16:8167:22525":{"crate_id":16,"path":["gimli","read","unit","EntriesTreeIter"],"kind":"struct"},"2:45730:9073":{"crate_id":2,"path":["core","core_arch","simd","i8x4"],"kind":"struct"},"1:10749:9740":{"crate_id":1,"path":["std","sys","unix","fs","FileAttr"],"kind":"struct"},"1:11608:9757":{"crate_id":1,"path":["std","backtrace_rs","backtrace","libunwind","Frame"],"kind":"enum"},"2:2931:3727":{"crate_id":2,"path":["core","ops","bit","Shl"],"kind":"trait"},"17:10316:6526":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbolTable"],"kind":"struct"},"21:2631:264":{"crate_id":21,"path":["proc_macro","TokenStream"],"kind":"struct"},"24:2609:3661":{"crate_id":24,"path":["syn","token","Await"],"kind":"struct"},"2:40881:3477":{"crate_id":2,"path":["core","iter","sources","from_fn","FromFn"],"kind":"struct"},"16:4835:7409":{"crate_id":16,"path":["gimli","constants","DwInl"],"kind":"struct"},"2:39446:8897":{"crate_id":2,"path":["core","any","TypeId"],"kind":"struct"},"2:43604:9664":{"crate_id":2,"path":["core","str","error","ParseBoolError"],"kind":"struct"},"2:43424:9599":{"crate_id":2,"path":["core","slice","iter","Windows"],"kind":"struct"},"17:10547:9379":{"crate_id":17,"path":["object","read","elf","version","VernauxIterator"],"kind":"struct"},"16:7391:22517":{"crate_id":16,"path":["gimli","read","op","EvaluationResult"],"kind":"enum"},"2:40401:3513":{"crate_id":2,"path":["core","iter","adapters","filter_map","FilterMap"],"kind":"struct"},"2:2796:3583":{"crate_id":2,"path":["core","marker","Unsize"],"kind":"trait"},"18:609:35548":{"crate_id":18,"path":["memchr","memmem","twoway","Suffix"],"kind":"struct"},"5:6915:276":{"crate_id":5,"path":["alloc","vec","Vec"],"kind":"struct"},"24:5084:3373":{"crate_id":24,"path":["syn","generics","PredicateLifetime"],"kind":"struct"},"5:1428:3419":{"crate_id":5,"path":["alloc","collections","btree","map","IterMut"],"kind":"struct"},"2:44030:15654":{"crate_id":2,"path":["core","str","pattern","SearchStep"],"kind":"enum"},"21:404:35625":{"crate_id":21,"path":["proc_macro","bridge","scoped_cell","RefMutL"],"kind":"struct"},"2:43664:9598":{"crate_id":2,"path":["core","str","iter","RSplit"],"kind":"struct"},"17:13274:6581":{"crate_id":17,"path":["object","macho","Relocation"],"kind":"struct"},"17:11327:9402":{"crate_id":17,"path":["object","read","pe","resource","ResourceDirectoryTable"],"kind":"struct"},"16:8050:3318":{"crate_id":16,"path":["gimli","read","unit","Attribute"],"kind":"struct"},"2:44098:9696":{"crate_id":2,"path":["core","str","pattern","CharArrayRefSearcher"],"kind":"struct"},"16:2832:7358":{"crate_id":16,"path":["gimli","common","DebugTypesOffset"],"kind":"struct"},"24:2677:2583":{"crate_id":24,"path":["syn","token","Const"],"kind":"struct"},"1:8137:9230":{"crate_id":1,"path":["std","io","util","Sink"],"kind":"struct"},"24:5509:66":{"crate_id":24,"path":["syn","ty","Abi"],"kind":"struct"},"17:13451:6950":{"crate_id":17,"path":["object","pe","ImageOs2Header"],"kind":"struct"},"5:7466:9587":{"crate_id":5,"path":["alloc","ffi","c_str","IntoStringError"],"kind":"struct"},"2:43181:9056":{"crate_id":2,"path":["core","slice","sort","TimSortRun"],"kind":"struct"},"6:6658:8606":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","sigaction"],"kind":"struct"},"1:8198:2966":{"crate_id":1,"path":["std","io","Bytes"],"kind":"struct"},"1:7704:10200":{"crate_id":1,"path":["std","backtrace","BacktraceStatus"],"kind":"enum"},"6:1501:7873":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreq"],"kind":"struct"},"17:13085:6886":{"crate_id":17,"path":["object","macho","BuildVersionCommand"],"kind":"struct"},"17:12888:6855":{"crate_id":17,"path":["object","macho","DylibModule32"],"kind":"struct"},"1:8277:10376":{"crate_id":1,"path":["std","os","unix","net","ancillary","AncillaryError"],"kind":"enum"},"2:22806:199":{"crate_id":2,"path":["core","num","nonzero","NonZeroU64"],"kind":"struct"},"2:25919:279":{"crate_id":2,"path":["core","num","wrapping","Wrapping"],"kind":"struct"},"1:6286:232":{"crate_id":1,"path":["std","sync","mpmc","Receiver"],"kind":"struct"},"18:719:6396":{"crate_id":18,"path":["memchr","memmem","NeedleInfo"],"kind":"struct"},"11:2467:7711":{"crate_id":11,"path":["hashbrown","raw","bitmask","BitMask"],"kind":"struct"},"17:10126:9369":{"crate_id":17,"path":["object","read","coff","import","ImportFile"],"kind":"struct"},"2:22938:191":{"crate_id":2,"path":["core","num","nonzero","NonZeroI16"],"kind":"struct"},"6:1734:8010":{"crate_id":6,"path":["libc","unix","linux_like","sigevent"],"kind":"struct"},"2:9580:238":{"crate_id":2,"path":["core","fmt","Result"],"kind":"type_alias"},"24:4252:3722":{"crate_id":24,"path":["syn","token","PlusEq"],"kind":"struct"},"1:6599:6227":{"crate_id":1,"path":["std","sync","remutex","ReentrantMutexGuard"],"kind":"struct"},"2:47159:9130":{"crate_id":2,"path":["core","core_arch","simd","i8x64"],"kind":"struct"},"6:6913:8729":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","shmid_ds"],"kind":"struct"},"1:4614:10348":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt"],"kind":"trait"},"24:5458:3393":{"crate_id":24,"path":["syn","ty","TypeArray"],"kind":"struct"},"11:2058:9534":{"crate_id":11,"path":["hashbrown","set","Entry"],"kind":"enum"},"1:9459:136":{"crate_id":1,"path":["std","sys","unix","fs","File"],"kind":"struct"},"1:11987:10144":{"crate_id":1,"path":["std","backtrace_rs","symbolize","gimli","Cache"],"kind":"struct"},"16:7318:7509":{"crate_id":16,"path":["gimli","read","op","Piece"],"kind":"struct"},"2:30089:10341":{"crate_id":2,"path":["core","num","FpCategory"],"kind":"enum"},"24:3960:3702":{"crate_id":24,"path":["syn","token","DotDotDot"],"kind":"struct"},"1:3492:10284":{"crate_id":1,"path":["std","io","Seek"],"kind":"trait"},"16:7492:9535":{"crate_id":16,"path":["gimli","read","pubnames","PubNamesEntry"],"kind":"struct"},"16:4462:7398":{"crate_id":16,"path":["gimli","constants","DwAte"],"kind":"struct"},"17:11951:6657":{"crate_id":17,"path":["object","elf","SectionHeader32"],"kind":"struct"},"6:475:1980":{"crate_id":6,"path":["libc","unix","group"],"kind":"struct"},"2:22145:9606":{"crate_id":2,"path":["core","num","bignum","Big32x40"],"kind":"struct"},"17:12225:6713":{"crate_id":17,"path":["object","elf","Verdaux"],"kind":"struct"},"24:2043:3421":{"crate_id":24,"path":["syn","punctuated","PrivateIterMut"],"kind":"struct"},"17:14335:7266":{"crate_id":17,"path":["object","pe","ImageAlphaRuntimeFunctionEntry"],"kind":"struct"},"2:30386:32227":{"crate_id":2,"path":["core","ptr","alignment","AlignmentEnum16"],"kind":"enum"},"1:8223:10336":{"crate_id":1,"path":["std","net","tcp","IntoIncoming"],"kind":"struct"},"2:41621:9731":{"crate_id":2,"path":["core","net","socket_addr","SocketAddr"],"kind":"enum"},"24:5516:3392":{"crate_id":24,"path":["syn","ty","BareVariadic"],"kind":"struct"},"2:4912:860":{"crate_id":2,"path":["core","iter"],"kind":"module"},"6:4647:8173":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Ehdr"],"kind":"struct"},"6:1691:7994":{"crate_id":6,"path":["libc","unix","linux_like","mmsghdr"],"kind":"struct"},"11:2085:10211":{"crate_id":11,"path":["hashbrown","set","VacantEntry"],"kind":"struct"},"16:7597:35467":{"crate_id":16,"path":["gimli","read","rnglists","RangeListsFormat"],"kind":"enum"},"5:5376:15619":{"crate_id":5,"path":["alloc","slice","Join"],"kind":"trait"},"16:3049:21645":{"crate_id":16,"path":["gimli","common","DwarfFileType"],"kind":"enum"},"17:14156:7197":{"crate_id":17,"path":["object","pe","ImagePrologueDynamicRelocationHeader"],"kind":"struct"},"2:46899:9126":{"crate_id":2,"path":["core","core_arch","simd","i16x16"],"kind":"struct"},"1:8217:10337":{"crate_id":1,"path":["std","net","tcp","Incoming"],"kind":"struct"},"24:4860:3353":{"crate_id":24,"path":["syn","expr","ExprLet"],"kind":"struct"},"21:2242:3436":{"crate_id":21,"path":["proc_macro","bridge","DelimSpan"],"kind":"struct"},"6:5885:8432":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__exit_status"],"kind":"struct"},"16:2644:7350":{"crate_id":16,"path":["gimli","common","DebugMacroOffset"],"kind":"struct"},"5:5372:15618":{"crate_id":5,"path":["alloc","slice","Concat"],"kind":"trait"},"11:357:6135":{"crate_id":11,"path":["hashbrown","raw","RawIntoIter"],"kind":"struct"},"24:129:1979":{"crate_id":24,"path":["syn","token","Group"],"kind":"struct"},"2:3046:2538":{"crate_id":2,"path":["core","ops","drop","Drop"],"kind":"trait"},"5:3173:3415":{"crate_id":5,"path":["alloc","collections","btree","set","Iter"],"kind":"struct"},"1:5614:232":{"crate_id":1,"path":["std","sync","mpsc","Receiver"],"kind":"struct"},"1:8542:9253":{"crate_id":1,"path":["std","path","Ancestors"],"kind":"struct"},"17:9242:6500":{"crate_id":17,"path":["object","endian","I32Bytes"],"kind":"struct"},"2:43920:9684":{"crate_id":2,"path":["core","str","iter","SplitWhitespace"],"kind":"struct"},"5:880:6150":{"crate_id":5,"path":["alloc","collections","binary_heap","Hole"],"kind":"struct"},"2:21157:10286":{"crate_id":2,"path":["core","core_simd","cast","sealed","Sealed"],"kind":"trait"},"1:6633:245":{"crate_id":1,"path":["std","sync","rwlock","RwLock"],"kind":"struct"},"24:4587:2331":{"crate_id":24,"path":["syn","expr","Expr"],"kind":"enum"},"20:15:4978":{"crate_id":20,"path":["proc_macro2","marker","ProcMacroAutoTraits"],"kind":"struct"},"16:7513:9538":{"crate_id":16,"path":["gimli","read","pubnames","PubNamesEntryIter"],"kind":"struct"},"17:10478:6530":{"crate_id":17,"path":["object","read","elf","version","Version"],"kind":"struct"},"16:4641:7404":{"crate_id":16,"path":["gimli","constants","DwVirtuality"],"kind":"struct"},"24:2779:3666":{"crate_id":24,"path":["syn","token","Else"],"kind":"struct"},"21:1020:3596":{"crate_id":21,"path":["proc_macro","bridge","client","SourceFile"],"kind":"struct"},"17:14296:7254":{"crate_id":17,"path":["object","pe","ImageHotPatchHashes"],"kind":"struct"},"24:4518:3319":{"crate_id":24,"path":["syn","attr","MetaList"],"kind":"struct"},"16:2596:7348":{"crate_id":16,"path":["gimli","common","DebugLocListsIndex"],"kind":"struct"},"5:5976:6168":{"crate_id":5,"path":["alloc","sync","Weak"],"kind":"struct"},"1:909:10204":{"crate_id":1,"path":["std","collections","hash","map","ValuesMut"],"kind":"struct"},"17:9086:6495":{"crate_id":17,"path":["object","endian","BigEndian"],"kind":"struct"},"2:40275:6186":{"crate_id":2,"path":["core","ffi","VaListImpl"],"kind":"struct"},"2:46482:9104":{"crate_id":2,"path":["core","core_arch","simd","m32x4"],"kind":"struct"},"21:2270:1979":{"crate_id":21,"path":["proc_macro","bridge","Group"],"kind":"struct"},"17:12830:6829":{"crate_id":17,"path":["object","macho","SymtabCommand"],"kind":"struct"},"24:4783:3335":{"crate_id":24,"path":["syn","expr","ExprArray"],"kind":"struct"},"24:3340:3687":{"crate_id":24,"path":["syn","token","Use"],"kind":"struct"},"24:5158:3376":{"crate_id":24,"path":["syn","lit","LitBool"],"kind":"struct"},"1:8204:9595":{"crate_id":1,"path":["std","io","Split"],"kind":"struct"},"6:4480:8102":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_event"],"kind":"struct"},"16:8239:2755":{"crate_id":16,"path":["gimli","read","value","Value"],"kind":"enum"},"6:4455:8086":{"crate_id":6,"path":["libc","unix","linux_like","linux","if_nameindex"],"kind":"struct"},"2:2559:270":{"crate_id":2,"path":["core","convert","TryInto"],"kind":"trait"},"17:10672:22730":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCacheImageIterator"],"kind":"struct"},"16:7792:22522":{"crate_id":16,"path":["gimli","read","unit","UnitType"],"kind":"enum"},"6:4847:8238":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_j1939"],"kind":"struct"},"16:6499:7382":{"crate_id":16,"path":["gimli","read","index","DebugTuIndex"],"kind":"struct"},"17:9912:22608":{"crate_id":17,"path":["object","read","archive","ArchiveMember"],"kind":"struct"},"17:11295:9400":{"crate_id":17,"path":["object","read","pe","relocation","RelocationIterator"],"kind":"struct"},"1:12031:697":{"crate_id":1,"path":["std","f32"],"kind":"primitive"},"24:2643:2039":{"crate_id":24,"path":["syn","token","Box"],"kind":"struct"},"16:6467:9487":{"crate_id":16,"path":["gimli","read","aranges","ArangeEntry"],"kind":"struct"},"2:40354:3500":{"crate_id":2,"path":["core","iter","adapters","cloned","Cloned"],"kind":"struct"},"1:928:10206":{"crate_id":1,"path":["std","collections","hash","map","RawEntryMut"],"kind":"enum"},"2:21006:32643":{"crate_id":2,"path":["core","core_simd","swizzle","interleave","Hi"],"kind":"struct"},"2:22029:10484":{"crate_id":2,"path":["core","core_simd","vector","SimdElement"],"kind":"trait"},"1:10784:9190":{"crate_id":1,"path":["std","sys","unix","fs","FileTimes"],"kind":"struct"},"2:39633:30295":{"crate_id":2,"path":["core","ascii","ascii_char","AsciiChar"],"kind":"enum"},"1:12037:800":{"crate_id":1,"path":["std","i128"],"kind":"primitive"},"2:22283:8806":{"crate_id":2,"path":["core","num","dec2flt","number","Number"],"kind":"struct"},"2:9426:3555":{"crate_id":2,"path":["core","fmt","builders","FormatterFn"],"kind":"struct"},"1:10960:27229":{"crate_id":1,"path":["std","sys","unix","process","process_common","ProgramKind"],"kind":"enum"},"16:4806:7408":{"crate_id":16,"path":["gimli","constants","DwCc"],"kind":"struct"},"17:10165:22636":{"crate_id":17,"path":["object","read","coff","import","ImportType"],"kind":"enum"},"17:9521:22587":{"crate_id":17,"path":["object","read","any","SectionIterator"],"kind":"struct"},"1:8787:10428":{"crate_id":1,"path":["std","process","CommandArgs"],"kind":"struct"},"24:4830:3346":{"crate_id":24,"path":["syn","expr","ExprContinue"],"kind":"struct"},"11:1687:156":{"crate_id":11,"path":["hashbrown","set","HashSet"],"kind":"struct"},"23:235:4266":{"crate_id":23,"path":["quote","__private","get_span","GetSpan"],"kind":"struct"},"11:1850:4773":{"crate_id":11,"path":["hashbrown","set","Drain"],"kind":"struct"},"1:11159:27238":{"crate_id":1,"path":["std","sys","unix","thread","cgroups","Cgroup"],"kind":"enum"},"24:5382:1974":{"crate_id":24,"path":["syn","ty","Type"],"kind":"enum"},"2:3267:15667":{"crate_id":2,"path":["core","ops","try_trait","Residual"],"kind":"trait"},"2:2867:6349":{"crate_id":2,"path":["core","ops","arith","Mul"],"kind":"trait"},"2:4299:3568":{"crate_id":2,"path":["core","cell","BorrowMutError"],"kind":"struct"},"11:1635:6139":{"crate_id":11,"path":["hashbrown","scopeguard","ScopeGuard"],"kind":"struct"},"17:12007:6672":{"crate_id":17,"path":["object","elf","CompressionHeader64"],"kind":"struct"},"6:7633:8777":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_cond_t"],"kind":"struct"},"6:7645:8779":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_rwlock_t"],"kind":"struct"},"14:202:2421":{"crate_id":14,"path":["rustc_demangle","v0","ParseError"],"kind":"enum"},"17:10588:9382":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSubsection"],"kind":"struct"},"17:10340:6528":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbol"],"kind":"struct"},"1:7725:10236":{"crate_id":1,"path":["std","env","VarError"],"kind":"enum"},"24:2728:123":{"crate_id":24,"path":["syn","token","Default"],"kind":"struct"},"1:8317:10405":{"crate_id":1,"path":["std","os","linux","process","PidFd"],"kind":"struct"},"5:5634:4777":{"crate_id":5,"path":["alloc","string","retain","SetLenOnDrop"],"kind":"struct"},"16:2305:21642":{"crate_id":16,"path":["gimli","common","Vendor"],"kind":"enum"},"16:8097:9546":{"crate_id":16,"path":["gimli","read","unit","EntriesRaw"],"kind":"struct"},"4:0:3175":{"crate_id":4,"path":["rustc_std_workspace_core"],"kind":"module"},"5:2037:3550":{"crate_id":5,"path":["alloc","collections","btree","map","Cursor"],"kind":"struct"},"17:11226:9396":{"crate_id":17,"path":["object","read","pe","import","ImportDescriptorIterator"],"kind":"struct"},"2:9581:3561":{"crate_id":2,"path":["core","fmt","Write"],"kind":"trait"},"16:3915:7394":{"crate_id":16,"path":["gimli","constants","DwChildren"],"kind":"struct"},"2:10087:6197":{"crate_id":2,"path":["core","slice","sort","merge_sort","BufGuard"],"kind":"struct"},"2:9094:83":{"crate_id":2,"path":["core","sync","atomic","AtomicBool"],"kind":"struct"},"24:346:35887":{"crate_id":24,"path":["syn","buffer","empty","UnsafeSyncEntry"],"kind":"struct"},"17:13575:7044":{"crate_id":17,"path":["object","pe","ImageOptionalHeader32"],"kind":"struct"},"1:10089:27362":{"crate_id":1,"path":["std","sys","unix","os","EnvStrDebug"],"kind":"struct"},"1:8863:9257":{"crate_id":1,"path":["std","sync","mpsc","SendError"],"kind":"struct"},"17:11971:6667":{"crate_id":17,"path":["object","elf","SectionHeader64"],"kind":"struct"},"1:9025:9262":{"crate_id":1,"path":["std","sync","mpmc","select","Operation"],"kind":"struct"},"5:3722:3550":{"crate_id":5,"path":["alloc","collections","linked_list","Cursor"],"kind":"struct"},"17:9959:22615":{"crate_id":17,"path":["object","read","coff","section","CoffSegmentIterator"],"kind":"struct"},"1:4731:10361":{"crate_id":1,"path":["std","os","fd","raw","FromRawFd"],"kind":"trait"},"24:4375:3731":{"crate_id":24,"path":["syn","token","Slash"],"kind":"struct"},"1:6346:186":{"crate_id":1,"path":["std","sync","mutex","Mutex"],"kind":"struct"},"1:4169:10373":{"crate_id":1,"path":["std","os","unix","net","ancillary","Messages"],"kind":"struct"},"24:872:35888":{"crate_id":24,"path":["syn","generics","Lifetimes"],"kind":"struct"},"6:4584:8150":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_effect"],"kind":"struct"},"6:5140:8383":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_txtime"],"kind":"struct"},"11:666:3415":{"crate_id":11,"path":["hashbrown","map","Iter"],"kind":"struct"},"6:1558:7904":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_ll"],"kind":"struct"},"2:43499:3498":{"crate_id":2,"path":["core","slice","iter","ArrayChunks"],"kind":"struct"},"2:46185:9095":{"crate_id":2,"path":["core","core_arch","simd","i8x16"],"kind":"struct"},"1:6238:6222":{"crate_id":1,"path":["std","sync","mpmc","Sender"],"kind":"struct"},"12:0:3180":{"crate_id":12,"path":["rustc_std_workspace_alloc"],"kind":"module"},"17:9574:35508":{"crate_id":17,"path":["object","read","any","ComdatIteratorInternal"],"kind":"enum"},"17:11272:9399":{"crate_id":17,"path":["object","read","pe","import","DelayLoadDescriptorIterator"],"kind":"struct"},"24:5104:2068":{"crate_id":24,"path":["syn","lifetime","Lifetime"],"kind":"function"},"2:2878:6351":{"crate_id":2,"path":["core","ops","arith","Rem"],"kind":"trait"},"23:148:4009":{"crate_id":23,"path":["quote","__private","HasIterator"],"kind":"struct"},"2:3338:3586":{"crate_id":2,"path":["core","ops","unsize","DispatchFromDyn"],"kind":"trait"},"1:1054:10210":{"crate_id":1,"path":["std","collections","hash","map","OccupiedEntry"],"kind":"struct"},"2:8779:15640":{"crate_id":2,"path":["core","panicking","assert_matches_failed","Pattern"],"kind":"struct"},"18:481:9350":{"crate_id":18,"path":["memchr","cow","CowBytes"],"kind":"struct"},"24:4500:2192":{"crate_id":24,"path":["syn","attr","Meta"],"kind":"enum"},"2:12432:118":{"crate_id":2,"path":["core","str","lossy","Debug"],"kind":"struct"},"17:14346:7267":{"crate_id":17,"path":["object","pe","ImageRuntimeFunctionEntry"],"kind":"struct"},"23:38:3055":{"crate_id":23,"path":["quote","format_ident"],"kind":"macro"},"2:44373:9713":{"crate_id":2,"path":["core","str","CharEscapeUnicode"],"kind":"struct"},"16:6318:7434":{"crate_id":16,"path":["gimli","read","reader","ReaderOffsetId"],"kind":"struct"},"1:1743:664":{"crate_id":1,"path":["std","env"],"kind":"module"},"17:10370:22641":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdatIterator"],"kind":"struct"},"2:41829:238":{"crate_id":2,"path":["core","result","Result"],"kind":"enum"},"17:12810:6828":{"crate_id":17,"path":["object","macho","RoutinesCommand64"],"kind":"struct"},"2:42450:3564":{"crate_id":2,"path":["core","fmt","num","LowerHex"],"kind":"struct"},"2:4222:3552":{"crate_id":2,"path":["core","cell","Cell"],"kind":"struct"},"16:4053:7395":{"crate_id":16,"path":["gimli","constants","DwTag"],"kind":"struct"},"1:12022:1665":{"crate_id":1,"path":["std","unit"],"kind":"primitive"},"1:2511:10315":{"crate_id":1,"path":["std","io","buffered","bufreader","BufReader"],"kind":"struct"},"2:46404:9102":{"crate_id":2,"path":["core","core_arch","simd","m8x16"],"kind":"struct"},"2:47903:9169":{"crate_id":2,"path":["core","core_arch","simd","u64x8"],"kind":"struct"},"9:0:3177":{"crate_id":9,"path":["miniz_oxide"],"kind":"module"},"2:4373:3576":{"crate_id":2,"path":["core","cell","Ref"],"kind":"struct"},"2:21414:10481":{"crate_id":2,"path":["core","core_simd","eq","SimdPartialEq"],"kind":"trait"},"20:740:2676":{"crate_id":20,"path":["proc_macro2","fallback","Literal"],"kind":"struct"},"5:7323:3414":{"crate_id":5,"path":["alloc","collections","linked_list","IntoIter"],"kind":"struct"},"17:10738:22733":{"crate_id":17,"path":["object","read","macho","file","MachOComdatSectionIterator"],"kind":"struct"},"6:4566:8141":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_periodic_effect"],"kind":"struct"},"17:14013:7159":{"crate_id":17,"path":["object","pe","ImageImportDescriptor"],"kind":"struct"},"5:2245:9576":{"crate_id":5,"path":["alloc","collections","btree","navigate","LazyLeafRange"],"kind":"struct"},"2:22905:194":{"crate_id":2,"path":["core","num","nonzero","NonZeroI8"],"kind":"struct"},"18:564:6383":{"crate_id":18,"path":["memchr","memmem","rarebytes","RareNeedleBytes"],"kind":"struct"},"2:3666:3414":{"crate_id":2,"path":["core","array","iter","IntoIter"],"kind":"struct"},"2:44640:181":{"crate_id":2,"path":["core","alloc","layout","Layout"],"kind":"struct"},"16:6376:22510":{"crate_id":16,"path":["gimli","read","abbrev","Attributes"],"kind":"enum"},"17:12846:6834":{"crate_id":17,"path":["object","macho","DysymtabCommand"],"kind":"struct"},"2:2183:4708":{"crate_id":2,"path":["core","ptr","from_exposed_addr"],"kind":"function"},"6:1507:7876":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreqn"],"kind":"struct"},"24:4851:3351":{"crate_id":24,"path":["syn","expr","ExprIndex"],"kind":"struct"},"1:8819:9255":{"crate_id":1,"path":["std","process","ExitStatusError"],"kind":"struct"},"2:46231:9096":{"crate_id":2,"path":["core","core_arch","simd","i16x8"],"kind":"struct"},"2:42436:2593":{"crate_id":2,"path":["core","fmt","num","Binary"],"kind":"struct"},"1:8444:9052":{"crate_id":1,"path":["std","path","State"],"kind":"enum"},"1:10530:10319":{"crate_id":1,"path":["std","sys","unix","stdio","Stderr"],"kind":"struct"},"13:0:3174":{"crate_id":13,"path":["std_detect"],"kind":"module"},"17:8953:22583":{"crate_id":17,"path":["object","common","SegmentFlags"],"kind":"enum"},"2:43452:9602":{"crate_id":2,"path":["core","slice","iter","ChunksExact"],"kind":"struct"},"24:5154:3381":{"crate_id":24,"path":["syn","lit","LitInt"],"kind":"struct"},"6:6159:8559":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_data"],"kind":"union"},"17:13868:7125":{"crate_id":17,"path":["object","pe","ImageAuxSymbolWeak"],"kind":"struct"},"2:21195:10489":{"crate_id":2,"path":["core","core_simd","elements","const_ptr","SimdConstPtr"],"kind":"trait"},"16:4344:7396":{"crate_id":16,"path":["gimli","constants","DwAt"],"kind":"struct"},"2:10486:9595":{"crate_id":2,"path":["core","slice","iter","Split"],"kind":"struct"},"2:1644:640":{"crate_id":2,"path":["core","mem","drop"],"kind":"function"},"2:12159:3438":{"crate_id":2,"path":["core","str","traits","FromStr"],"kind":"trait"},"24:4206:3719":{"crate_id":24,"path":["syn","token","Percent"],"kind":"struct"},"16:5661:9417":{"crate_id":16,"path":["gimli","read","cfi","EhHdrTable"],"kind":"struct"},"2:40462:3503":{"crate_id":2,"path":["core","iter","adapters","map_while","MapWhile"],"kind":"struct"},"2:47941:9170":{"crate_id":2,"path":["core","core_arch","simd","f64x8"],"kind":"struct"},"17:8765:22577":{"crate_id":17,"path":["object","common","ComdatKind"],"kind":"enum"},"17:9762:35529":{"crate_id":17,"path":["object","read","any","DynamicRelocationIteratorInternal"],"kind":"enum"},"24:2983:2675":{"crate_id":24,"path":["syn","token","Match"],"kind":"struct"},"5:4034:6142":{"crate_id":5,"path":["alloc","collections","vec_deque","drain","drop","DropGuard"],"kind":"struct"},"2:10102:6201":{"crate_id":2,"path":["core","slice","sort","merge_sort","RunVec"],"kind":"struct"},"24:924:3050":{"crate_id":24,"path":["syn","generics","TypeGenerics"],"kind":"struct"},"2:43616:9665":{"crate_id":2,"path":["core","str","iter","Chars"],"kind":"struct"},"1:9060:9265":{"crate_id":1,"path":["std","sync","mpmc","utils","CachePadded"],"kind":"struct"},"2:41812:4697":{"crate_id":2,"path":["core","panicking","AssertKind"],"kind":"enum"},"16:6226:22509":{"crate_id":16,"path":["gimli","read","dwarf","DwarfPackage"],"kind":"struct"},"1:7367:31593":{"crate_id":1,"path":["std","panicking","Hook"],"kind":"enum"},"17:9945:6513":{"crate_id":17,"path":["object","read","coff","section","SectionTable"],"kind":"struct"},"1:12024:1153":{"crate_id":1,"path":["std","pointer"],"kind":"primitive"},"17:11719:22598":{"crate_id":17,"path":["object","read","CompressionFormat"],"kind":"enum"},"18:491:9351":{"crate_id":18,"path":["memchr","cow","Imp"],"kind":"struct"},"2:7581:128":{"crate_id":2,"path":["core","iter","traits","double_ended","DoubleEndedIterator"],"kind":"trait"},"24:5152:3379":{"crate_id":24,"path":["syn","lit","LitChar"],"kind":"struct"},"5:4365:6164":{"crate_id":5,"path":["alloc","collections","vec_deque","drop","Dropper"],"kind":"struct"},"11:389:6137":{"crate_id":11,"path":["hashbrown","raw","RawDrain"],"kind":"struct"},"19:0:1133":{"crate_id":19,"path":["panic_unwind"],"kind":"module"},"1:5621:6222":{"crate_id":1,"path":["std","sync","mpsc","Sender"],"kind":"struct"},"5:1140:34199":{"crate_id":5,"path":["alloc","collections","btree","dedup_sorted_iter","DedupSortedIter"],"kind":"struct"},"24:5512:3391":{"crate_id":24,"path":["syn","ty","BareFnArg"],"kind":"struct"},"2:9281:32724":{"crate_id":2,"path":["core","fmt","builders","PadAdapter"],"kind":"struct"},"23:344:1232":{"crate_id":23,"path":["quote","quote"],"kind":"macro"},"2:2173:641":{"crate_id":2,"path":["core","ptr","drop_in_place"],"kind":"function"},"2:2798:257":{"crate_id":2,"path":["core","marker","StructuralPartialEq"],"kind":"trait"},"24:3897:3698":{"crate_id":24,"path":["syn","token","Comma"],"kind":"struct"},"1:1903:10246":{"crate_id":1,"path":["std","error","Indented"],"kind":"struct"},"17:261:35519":{"crate_id":17,"path":["object","read","util","DebugLen"],"kind":"struct"},"2:41684:205":{"crate_id":2,"path":["core","option","Option"],"kind":"enum"},"10:0:3178":{"crate_id":10,"path":["adler"],"kind":"module"},"16:5743:9424":{"crate_id":16,"path":["gimli","read","cfi","CfiEntriesIter"],"kind":"struct"},"2:7037:32118":{"crate_id":2,"path":["core","iter","adapters","GenericShunt"],"kind":"struct"},"17:12280:6732":{"crate_id":17,"path":["object","elf","NoteHeader64"],"kind":"struct"},"24:3822:3693":{"crate_id":24,"path":["syn","token","AndEq"],"kind":"struct"},"5:6587:3414":{"crate_id":5,"path":["alloc","vec","into_iter","IntoIter"],"kind":"struct"},"2:1773:4722":{"crate_id":2,"path":["core","ptr","metadata","DynMetadata"],"kind":"struct"},"1:1796:10228":{"crate_id":1,"path":["std","env","SplitPaths"],"kind":"struct"},"21:2427:2059":{"crate_id":21,"path":["proc_macro","bridge","TokenTree"],"kind":"enum"},"5:3583:3415":{"crate_id":5,"path":["alloc","collections","linked_list","Iter"],"kind":"struct"},"5:7378:3469":{"crate_id":5,"path":["alloc","collections","TryReserveError"],"kind":"struct"},"5:1505:10132":{"crate_id":5,"path":["alloc","collections","btree","map","IntoValues"],"kind":"struct"},"24:4894:3360":{"crate_id":24,"path":["syn","expr","ExprReference"],"kind":"struct"},"17:9790:35509":{"crate_id":17,"path":["object","read","any","SectionRelocationIteratorInternal"],"kind":"enum"},"21:367:4798":{"crate_id":21,"path":["proc_macro","bridge","rpc","PanicMessage"],"kind":"enum"},"24:4170:3716":{"crate_id":24,"path":["syn","token","OrEq"],"kind":"struct"},"17:13244:6914":{"crate_id":17,"path":["object","macho","Nlist32"],"kind":"struct"},"6:4755:8189":{"crate_id":6,"path":["libc","unix","linux_like","linux","posix_spawn_file_actions_t"],"kind":"struct"},"6:4603:8159":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_ff_erase"],"kind":"struct"},"16:2864:7359":{"crate_id":16,"path":["gimli","common","DebugTypeSignature"],"kind":"struct"},"16:3032:7384":{"crate_id":16,"path":["gimli","common","DwoId"],"kind":"struct"},"11:2461:1979":{"crate_id":11,"path":["hashbrown","raw","sse2","Group"],"kind":"struct"},"24:4532:2050":{"crate_id":24,"path":["syn","data","Fields"],"kind":"enum"},"24:2036:3419":{"crate_id":24,"path":["syn","punctuated","IterMut"],"kind":"struct"},"1:3659:10335":{"crate_id":1,"path":["std","net","socket_addr","ToSocketAddrs"],"kind":"trait"},"2:2810:2518":{"crate_id":2,"path":["core","marker","PhantomData"],"kind":"struct"},"17:10603:9383":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSubsubsectionIterator"],"kind":"struct"},"2:43544:9604":{"crate_id":2,"path":["core","slice","iter","RChunksExact"],"kind":"struct"},"17:10962:6568":{"crate_id":17,"path":["object","read","macho","section","MachOSectionInternal"],"kind":"struct"},"17:10366:22652":{"crate_id":17,"path":["object","read","elf","relocation","RelocationSections"],"kind":"struct"},"21:2705:3596":{"crate_id":21,"path":["proc_macro","SourceFile"],"kind":"struct"},"11:817:10204":{"crate_id":11,"path":["hashbrown","map","ValuesMut"],"kind":"struct"},"24:0:1831":{"crate_id":24,"path":["syn"],"kind":"module"},"24:3306:3685":{"crate_id":24,"path":["syn","token","Unsafe"],"kind":"struct"},"2:8671:3987":{"crate_id":2,"path":["core","panic","unwind_safe","AssertUnwindSafe"],"kind":"struct"},"11:796:4771":{"crate_id":11,"path":["hashbrown","map","ExtractIf"],"kind":"struct"},"14:31:10029":{"crate_id":14,"path":["rustc_demangle","v0","Demangle"],"kind":"struct"},"24:338:3550":{"crate_id":24,"path":["syn","buffer","Cursor"],"kind":"struct"},"17:12750:6820":{"crate_id":17,"path":["object","macho","PreboundDylibCommand"],"kind":"struct"},"2:12213:9361":{"crate_id":2,"path":["core","str","pattern","Searcher"],"kind":"trait"},"17:10661:22729":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldSubCache"],"kind":"struct"},"24:1134:5257":{"crate_id":24,"path":["syn","lit","LitRepr"],"kind":"struct"},"24:4886:2259":{"crate_id":24,"path":["syn","expr","ExprPath"],"kind":"struct"},"2:22267:9608":{"crate_id":2,"path":["core","num","dec2flt","decimal","Decimal"],"kind":"struct"},"6:6169:8562":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","utmpx"],"kind":"struct"},"17:10916:22698":{"crate_id":17,"path":["object","read","macho","segment","MachOSegment"],"kind":"struct"},"1:8964:10138":{"crate_id":1,"path":["std","sync","mpmc","array","ArrayToken"],"kind":"struct"},"24:4864:2333":{"crate_id":24,"path":["syn","expr","ExprLit"],"kind":"struct"},"1:880:9563":{"crate_id":1,"path":["std","collections","hash","map","Values"],"kind":"struct"},"9:357:21504":{"crate_id":9,"path":["miniz_oxide","inflate","TINFLStatus"],"kind":"enum"},"2:39297:222":{"crate_id":2,"path":["core","ops","range","Range"],"kind":"struct"},"6:6898:8724":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ipc_perm"],"kind":"struct"},"2:41744:3415":{"crate_id":2,"path":["core","option","Iter"],"kind":"struct"},"1:12026:1511":{"crate_id":1,"path":["std","slice"],"kind":"primitive"},"24:2847:138":{"crate_id":24,"path":["syn","token","Fn"],"kind":"struct"},"24:4037:3707":{"crate_id":24,"path":["syn","token","Gt"],"kind":"struct"},"1:2419:3190":{"crate_id":1,"path":["std","io"],"kind":"module"},"5:1304:10035":{"crate_id":5,"path":["alloc","collections","btree","map","entry","OccupiedError"],"kind":"struct"},"24:5478:3397":{"crate_id":24,"path":["syn","ty","TypeInfer"],"kind":"struct"},"2:13100:4685":{"crate_id":2,"path":["core","alloc","Allocator"],"kind":"trait"},"24:4310:3726":{"crate_id":24,"path":["syn","token","Semi"],"kind":"struct"},"17:11235:9397":{"crate_id":17,"path":["object","read","pe","import","ImportThunkList"],"kind":"struct"},"6:6868:8707":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user"],"kind":"struct"},"2:44657:9723":{"crate_id":2,"path":["core","alloc","layout","LayoutError"],"kind":"struct"},"1:9963:9651":{"crate_id":1,"path":["std","sys","unix","net","Socket"],"kind":"struct"},"24:3834:3694":{"crate_id":24,"path":["syn","token","At"],"kind":"struct"},"2:41415:171":{"crate_id":2,"path":["core","net","ip_addr","IpAddr"],"kind":"enum"},"6:1632:7958":{"crate_id":6,"path":["libc","unix","linux_like","in_pktinfo"],"kind":"struct"},"24:97:4406":{"crate_id":24,"path":["syn","token","private","WithSpan"],"kind":"struct"},"1:867:9562":{"crate_id":1,"path":["std","collections","hash","map","Keys"],"kind":"struct"},"2:4056:107":{"crate_id":2,"path":["core","asserting","Capture"],"kind":"struct"},"2:4032:32773":{"crate_id":2,"path":["core","asserting","TryCaptureWithoutDebug"],"kind":"struct"},"24:5019:3372":{"crate_id":24,"path":["syn","generics","ConstParam"],"kind":"struct"},"2:3183:223":{"crate_id":2,"path":["core","ops","range","RangeBounds"],"kind":"trait"},"24:4298:3725":{"crate_id":24,"path":["syn","token","RArrow"],"kind":"struct"},"1:9466:10281":{"crate_id":1,"path":["std","sys","unix","fs","ReadDir"],"kind":"struct"},"2:9848:157":{"crate_id":2,"path":["core","hash","Hasher"],"kind":"trait"},"1:8526:9733":{"crate_id":1,"path":["std","path","Components"],"kind":"struct"},"24:5093:1991":{"crate_id":24,"path":["syn","ident","Ident"],"kind":"function"},"2:4447:3579":{"crate_id":2,"path":["core","cell","UnsafeCell"],"kind":"struct"},"16:6915:7373":{"crate_id":16,"path":["gimli","read","loclists","DebugLocLists"],"kind":"struct"},"17:14110:7188":{"crate_id":17,"path":["object","pe","ImageDynamicRelocationTable"],"kind":"struct"},"20:830:1991":{"crate_id":20,"path":["proc_macro2","imp","Ident"],"kind":"enum"},"1:10147:2362":{"crate_id":1,"path":["std","sys","unix","os_str","Slice"],"kind":"struct"},"17:10468:6529":{"crate_id":17,"path":["object","read","elf","version","VersionIndex"],"kind":"struct"},"1:8191:3523":{"crate_id":1,"path":["std","io","Take"],"kind":"struct"},"16:7474:22518":{"crate_id":16,"path":["gimli","read","op","Evaluation"],"kind":"struct"},"18:531:9352":{"crate_id":18,"path":["memchr","memmem","prefilter","PrefilterState"],"kind":"struct"},"1:5040:27350":{"crate_id":1,"path":["std","path","fmt","DebugHelper"],"kind":"struct"},"1:8849:10454":{"crate_id":1,"path":["std","sync","mpsc","TryIter"],"kind":"struct"},"2:10070:6196":{"crate_id":2,"path":["core","slice","sort","merge","MergeHole"],"kind":"struct"},"17:10036:6515":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbolTable"],"kind":"struct"},"6:4496:8106":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_absinfo"],"kind":"struct"},"21:2015:4795":{"crate_id":21,"path":["proc_macro","bridge","LitKind"],"kind":"enum"},"2:40101:9627":{"crate_id":2,"path":["core","char","decode","DecodeUtf16Error"],"kind":"struct"},"1:11344:9752":{"crate_id":1,"path":["std","sys_common","wtf8","Wtf8Buf"],"kind":"struct"},"1:504:4554":{"crate_id":1,"path":["std","thread","PanicGuard"],"kind":"struct"},"16:7660:7532":{"crate_id":16,"path":["gimli","read","rnglists","RawRange"],"kind":"struct"},"24:4822:3344":{"crate_id":24,"path":["syn","expr","ExprClosure"],"kind":"struct"},"24:5156:3380":{"crate_id":24,"path":["syn","lit","LitFloat"],"kind":"struct"},"24:1337:35885":{"crate_id":24,"path":["syn","lookahead","TokenMarker"],"kind":"enum"},"1:8841:3415":{"crate_id":1,"path":["std","sync","mpsc","Iter"],"kind":"struct"},"2:44381:9715":{"crate_id":2,"path":["core","str","IsWhitespace"],"kind":"struct"},"9:450:21489":{"crate_id":9,"path":["miniz_oxide","MZError"],"kind":"enum"},"24:4902:3362":{"crate_id":24,"path":["syn","expr","ExprReturn"],"kind":"struct"},"16:2670:7351":{"crate_id":16,"path":["gimli","common","RawRangeListsOffset"],"kind":"struct"},"17:10646:6594":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCache"],"kind":"struct"},"2:22707:200":{"crate_id":2,"path":["core","num","nonzero","NonZeroU8"],"kind":"struct"},"1:7892:4839":{"crate_id":1,"path":["std","hash","random","RandomState"],"kind":"struct"},"2:22380:32238":{"crate_id":2,"path":["core","num","flt2dec","Sign"],"kind":"enum"},"1:8536:3415":{"crate_id":1,"path":["std","path","Iter"],"kind":"struct"},"2:4812:426":{"crate_id":2,"path":["core","ffi","c_void"],"kind":"enum"},"2:2850:112":{"crate_id":2,"path":["core","marker","ConstParamTy"],"kind":"trait"},"5:2463:8794":{"crate_id":5,"path":["alloc","collections","btree","node","NodeRef"],"kind":"struct"},"22:0:3305":{"crate_id":22,"path":["unicode_ident"],"kind":"module"},"6:596:7867":{"crate_id":6,"path":["libc","unix","protoent"],"kind":"struct"},"2:22425:9613":{"crate_id":2,"path":["core","num","fmt","Formatted"],"kind":"struct"},"5:2225:35431":{"crate_id":5,"path":["alloc","collections","btree","navigate","LazyLeafHandle"],"kind":"enum"},"2:3261:145":{"crate_id":2,"path":["core","ops","try_trait","FromResidual"],"kind":"trait"},"16:6696:7461":{"crate_id":16,"path":["gimli","read","line","LineRow"],"kind":"struct"},"17:13135:6903":{"crate_id":17,"path":["object","macho","LinkerOptionCommand"],"kind":"struct"},"5:2143:9569":{"crate_id":5,"path":["alloc","collections","btree","merge_iter","MergeIterInner"],"kind":"struct"},"1:8982:26780":{"crate_id":1,"path":["std","sync","mpmc","error","SendTimeoutError"],"kind":"enum"},"5:7515:10037":{"crate_id":5,"path":["alloc","string","FromUtf16Error"],"kind":"struct"},"1:7906:27402":{"crate_id":1,"path":["std","io","buffered","linewritershim","LineWriterShim"],"kind":"struct"},"2:5632:3514":{"crate_id":2,"path":["core","iter","adapters","flatten","FlatMap"],"kind":"struct"},"2:21592:8802":{"crate_id":2,"path":["core","core_simd","masks","Mask"],"kind":"struct"},"6:1537:7889":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_in6"],"kind":"struct"},"1:9155:27377":{"crate_id":1,"path":["std","sys","common","thread_local","fast_local","Key"],"kind":"struct"},"11:1842:3415":{"crate_id":11,"path":["hashbrown","set","Iter"],"kind":"struct"},"5:7302:5553":{"crate_id":5,"path":["alloc","collections","btree","set_val","SetValZST"],"kind":"struct"},"17:10265:22644":{"crate_id":17,"path":["object","read","elf","section","ElfSectionIterator"],"kind":"struct"},"16:5760:22505":{"crate_id":16,"path":["gimli","read","cfi","CieOrFde"],"kind":"enum"},"16:2766:7355":{"crate_id":16,"path":["gimli","common","DebugStrOffset"],"kind":"struct"},"16:4889:7411":{"crate_id":16,"path":["gimli","constants","DwDsc"],"kind":"struct"},"16:6279:7431":{"crate_id":16,"path":["gimli","read","endian_slice","EndianSlice"],"kind":"struct"},"5:5328:6142":{"crate_id":5,"path":["alloc","slice","hack","to_vec","DropGuard"],"kind":"struct"},"16:5673:7367":{"crate_id":16,"path":["gimli","read","cfi","EhFrame"],"kind":"struct"},"18:96:26599":{"crate_id":18,"path":["memchr","memchr","iter","Memchr2"],"kind":"struct"},"2:44669:4684":{"crate_id":2,"path":["core","alloc","AllocError"],"kind":"struct"},"6:6128:8551":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ptrace_syscall_info"],"kind":"struct"},"2:47999:9175":{"crate_id":2,"path":["core","core_arch","x86","__m256"],"kind":"struct"},"17:1184:22621":{"crate_id":17,"path":["object","read","coff","relocation","CoffRelocationIterator"],"kind":"struct"},"1:11025:6238":{"crate_id":1,"path":["std","sys","unix","process","process_inner","do_exec","Reset"],"kind":"struct"},"2:2896:6353":{"crate_id":2,"path":["core","ops","arith","MulAssign"],"kind":"trait"},"24:3187:2006":{"crate_id":24,"path":["syn","token","Struct"],"kind":"struct"},"17:11162:6573":{"crate_id":17,"path":["object","read","pe","data_directory","DataDirectories"],"kind":"struct"},"5:1120:35230":{"crate_id":5,"path":["alloc","collections","btree","borrow","DormantMutRef"],"kind":"struct"},"1:7914:10049":{"crate_id":1,"path":["std","io","buffered","IntoInnerError"],"kind":"struct"},"24:4421:3734":{"crate_id":24,"path":["syn","token","StarEq"],"kind":"struct"},"5:7286:3414":{"crate_id":5,"path":["alloc","collections","btree","set","IntoIter"],"kind":"struct"},"6:6263:8599":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","semid_ds"],"kind":"struct"},"20:704:3433":{"crate_id":20,"path":["proc_macro2","fallback","LexError"],"kind":"struct"},"17:11316:6584":{"crate_id":17,"path":["object","read","pe","resource","ResourceDirectory"],"kind":"struct"},"5:6666:6142":{"crate_id":5,"path":["alloc","vec","into_iter","drop","DropGuard"],"kind":"struct"},"1:8291:10337":{"crate_id":1,"path":["std","os","unix","net","listener","Incoming"],"kind":"struct"},"5:897:3415":{"crate_id":5,"path":["alloc","collections","binary_heap","Iter"],"kind":"struct"},"2:42704:116":{"crate_id":2,"path":["core","fmt","rt","Count"],"kind":"enum"},"2:2289:110":{"crate_id":2,"path":["core","clone","Clone"],"kind":"trait"},"6:6071:8531":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","Elf64_Chdr"],"kind":"struct"},"5:6335:10572":{"crate_id":5,"path":["alloc","task","Wake"],"kind":"trait"},"17:11761:6620":{"crate_id":17,"path":["object","read","CompressedData"],"kind":"struct"},"2:40888:3479":{"crate_id":2,"path":["core","iter","sources","once","Once"],"kind":"struct"},"17:12934:6865":{"crate_id":17,"path":["object","macho","DylibReference"],"kind":"struct"},"1:1962:209":{"crate_id":1,"path":["std","ffi","os_str","OsString"],"kind":"struct"},"2:21458:10286":{"crate_id":2,"path":["core","core_simd","lane_count","sealed","Sealed"],"kind":"trait"},"17:12658:6807":{"crate_id":17,"path":["object","macho","FvmlibCommand"],"kind":"struct"},"6:5117:8376":{"crate_id":6,"path":["libc","unix","linux_like","linux","ifconf"],"kind":"struct"},"24:4984:1999":{"crate_id":24,"path":["syn","generics","Generics"],"kind":"struct"},"24:888:35890":{"crate_id":24,"path":["syn","generics","TypeParams"],"kind":"struct"},"24:4182:3717":{"crate_id":24,"path":["syn","token","OrOr"],"kind":"struct"},"17:434:6448":{"crate_id":17,"path":["object","read","any","Section"],"kind":"struct"},"1:3361:3483":{"crate_id":1,"path":["std","io","util","Repeat"],"kind":"struct"},"21:2601:9346":{"crate_id":21,"path":["proc_macro","diagnostic","Children"],"kind":"struct"},"2:41897:207":{"crate_id":2,"path":["core","sync","atomic","Ordering"],"kind":"enum"},"16:5612:7368":{"crate_id":16,"path":["gimli","read","cfi","EhFrameHdr"],"kind":"struct"},"24:3204:3683":{"crate_id":24,"path":["syn","token","Super"],"kind":"struct"},"5:4428:6164":{"crate_id":5,"path":["alloc","collections","vec_deque","truncate","Dropper"],"kind":"struct"},"1:10730:10406":{"crate_id":1,"path":["std","sys","unix","fd","FileDesc"],"kind":"struct"},"2:3273:15666":{"crate_id":2,"path":["core","ops","try_trait","NeverShortCircuit"],"kind":"struct"},"24:1486:3427":{"crate_id":24,"path":["syn","parse","Parse"],"kind":"trait"},"24:3289:2028":{"crate_id":24,"path":["syn","token","Union"],"kind":"struct"},"2:42988:9660":{"crate_id":2,"path":["core","hash","sip","Sip13Rounds"],"kind":"struct"},"2:40285:10264":{"crate_id":2,"path":["core","ffi","VaList"],"kind":"struct"},"5:2962:35357":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Dying"],"kind":"enum"},"17:13546:7033":{"crate_id":17,"path":["object","pe","MaskedRichHeaderEntry"],"kind":"struct"},"2:3422:71":{"crate_id":2,"path":["core","any","Any"],"kind":"trait"},"17:13890:7131":{"crate_id":17,"path":["object","pe","ImageAuxSymbolCrc"],"kind":"struct"},"5:5791:263":{"crate_id":5,"path":["alloc","string","ToString"],"kind":"trait"},"17:12621:6803":{"crate_id":17,"path":["object","macho","Section64"],"kind":"struct"},"6:4388:8043":{"crate_id":6,"path":["libc","unix","linux_like","linux","dqblk"],"kind":"struct"},"15:327:10107":{"crate_id":15,"path":["addr2line","RangeAttributes"],"kind":"struct"},"1:951:10209":{"crate_id":1,"path":["std","collections","hash","map","RawEntryBuilder"],"kind":"struct"},"17:12208:6705":{"crate_id":17,"path":["object","elf","Verdef"],"kind":"struct"},"2:45915:9080":{"crate_id":2,"path":["core","core_arch","simd","i16x4"],"kind":"struct"},"17:12252:6722":{"crate_id":17,"path":["object","elf","Vernaux"],"kind":"struct"},"1:4692:10377":{"crate_id":1,"path":["std","os","linux","process","CommandExt"],"kind":"trait"},"1:3236:10324":{"crate_id":1,"path":["std","io","stdio","StdoutLock"],"kind":"struct"},"17:13554:7036":{"crate_id":17,"path":["object","pe","ImageFileHeader"],"kind":"struct"},"16:5939:9444":{"crate_id":16,"path":["gimli","read","cfi","UnwindContext"],"kind":"struct"},"1:3196:10322":{"crate_id":1,"path":["std","io","stdio","StdinLock"],"kind":"struct"},"5:7574:4771":{"crate_id":5,"path":["alloc","vec","extract_if","ExtractIf"],"kind":"struct"},"24:5345:2584":{"crate_id":24,"path":["syn","path","AssocConst"],"kind":"struct"},"17:8713:22576":{"crate_id":17,"path":["object","common","SectionKind"],"kind":"enum"},"1:8160:10285":{"crate_id":1,"path":["std","io","SeekFrom"],"kind":"enum"},"1:6800:10479":{"crate_id":1,"path":["std","std_float","StdFloat"],"kind":"trait"},"2:40424:3515":{"crate_id":2,"path":["core","iter","adapters","fuse","Fuse"],"kind":"struct"},"2:7998:3492":{"crate_id":2,"path":["core","iter","traits","marker","TrustedLen"],"kind":"trait"},"17:12997:6873":{"crate_id":17,"path":["object","macho","RpathCommand"],"kind":"struct"},"1:8950:9261":{"crate_id":1,"path":["std","sync","condvar","WaitTimeoutResult"],"kind":"struct"},"17:12983:6872":{"crate_id":17,"path":["object","macho","UuidCommand"],"kind":"struct"},"24:2830:3668":{"crate_id":24,"path":["syn","token","Final"],"kind":"struct"},"17:13259:6918":{"crate_id":17,"path":["object","macho","Nlist64"],"kind":"struct"},"24:5500:3403":{"crate_id":24,"path":["syn","ty","TypeSlice"],"kind":"struct"},"2:44258:9708":{"crate_id":2,"path":["core","str","lossy","Utf8Chunk"],"kind":"struct"},"24:1620:1833":{"crate_id":24,"path":["syn","parse_macro_input"],"kind":"macro"},"2:9888:9593":{"crate_id":2,"path":["core","hash","BuildHasherDefault"],"kind":"struct"},"17:11086:22765":{"crate_id":17,"path":["object","read","pe","file","PeComdatSectionIterator"],"kind":"struct"},"1:1874:10045":{"crate_id":1,"path":["std","error","Report"],"kind":"struct"},"24:4463:3875":{"crate_id":24,"path":["syn","token","Bracket"],"kind":"struct"},"6:4870:8247":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_filter"],"kind":"struct"},"17:12136:6691":{"crate_id":17,"path":["object","elf","ProgramHeader32"],"kind":"struct"},"16:7651:22521":{"crate_id":16,"path":["gimli","read","rnglists","RngListIter"],"kind":"struct"},"2:2550:78":{"crate_id":2,"path":["core","convert","AsMut"],"kind":"trait"},"20:879:2058":{"crate_id":20,"path":["proc_macro2","Span"],"kind":"struct"},"0:964:1844":{"crate_id":0,"path":["serde_derive","Serialize"],"kind":"proc_derive"},"5:1475:9563":{"crate_id":5,"path":["alloc","collections","btree","map","Values"],"kind":"struct"},"17:12496:6783":{"crate_id":17,"path":["object","macho","MachHeader32"],"kind":"struct"},"23:272:2068":{"crate_id":23,"path":["quote","__private","push_lifetime","Lifetime"],"kind":"struct"},"1:8272:9732":{"crate_id":1,"path":["std","os","unix","net","ancillary","SocketCred"],"kind":"struct"},"6:4428:8076":{"crate_id":6,"path":["libc","unix","linux_like","linux","itimerspec"],"kind":"struct"},"6:1674:7987":{"crate_id":6,"path":["libc","unix","linux_like","arpreq_old"],"kind":"struct"},"21:2730:3435":{"crate_id":21,"path":["proc_macro","Delimiter"],"kind":"enum"},"20:874:264":{"crate_id":20,"path":["proc_macro2","TokenStream"],"kind":"struct"},"24:2932:3673":{"crate_id":24,"path":["syn","token","Let"],"kind":"struct"},"21:2504:3597":{"crate_id":21,"path":["proc_macro","bridge","Diagnostic"],"kind":"struct"},"17:10771:6534":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandData"],"kind":"struct"},"2:43534:15632":{"crate_id":2,"path":["core","slice","iter","RChunksMut"],"kind":"struct"},"16:3065:6403":{"crate_id":16,"path":["gimli","arch","Arm"],"kind":"struct"},"6:1604:7933":{"crate_id":6,"path":["libc","unix","linux_like","lconv"],"kind":"struct"},"17:9051:22561":{"crate_id":17,"path":["object","endian","Endianness"],"kind":"enum"},"16:6415:9483":{"crate_id":16,"path":["gimli","read","aranges","ArangeHeaderIter"],"kind":"struct"},"2:2845:3603":{"crate_id":2,"path":["core","marker","Unpin"],"kind":"trait"},"18:574:6377":{"crate_id":18,"path":["memchr","memmem","twoway","Forward"],"kind":"struct"},"6:7598:8769":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_mutexattr_t"],"kind":"struct"},"17:13851:7120":{"crate_id":17,"path":["object","pe","ImageAuxSymbolFunctionBeginEnd"],"kind":"struct"},"9:237:9052":{"crate_id":9,"path":["miniz_oxide","inflate","core","State"],"kind":"enum"},"6:6781:8659":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statvfs64"],"kind":"struct"},"2:40129:9629":{"crate_id":2,"path":["core","char","EscapeDebug"],"kind":"struct"},"1:645:10197":{"crate_id":1,"path":["std","backtrace","BytesOrWide"],"kind":"enum"},"2:6091:3527":{"crate_id":2,"path":["core","iter","adapters","intersperse","IntersperseWith"],"kind":"struct"},"2:4:1116":{"crate_id":2,"path":["core","panic"],"kind":"macro"},"6:4841:8235":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_tp"],"kind":"struct"},"23:0:1232":{"crate_id":23,"path":["quote"],"kind":"module"},"2:22359:32239":{"crate_id":2,"path":["core","num","flt2dec","decoder","FullDecoded"],"kind":"enum"},"17:11547:6608":{"crate_id":17,"path":["object","read","SymbolMapName"],"kind":"struct"},"2:40091:9626":{"crate_id":2,"path":["core","char","decode","DecodeUtf16"],"kind":"struct"},"24:5057:2648":{"crate_id":24,"path":["syn","generics","TraitBound"],"kind":"struct"},"24:4799:3339":{"crate_id":24,"path":["syn","expr","ExprBinary"],"kind":"struct"},"20:797:9349":{"crate_id":20,"path":["proc_macro2","imp","DeferredTokenStream"],"kind":"struct"},"17:14221:7241":{"crate_id":17,"path":["object","pe","ImageLoadConfigDirectory64"],"kind":"struct"},"5:1778:4771":{"crate_id":5,"path":["alloc","collections","btree","map","ExtractIf"],"kind":"struct"},"24:5340:2369":{"crate_id":24,"path":["syn","path","AssocType"],"kind":"struct"},"17:12154:6699":{"crate_id":17,"path":["object","elf","ProgramHeader64"],"kind":"struct"},"1:10570:4564":{"crate_id":1,"path":["std","sys","unix","thread","Thread"],"kind":"struct"},"6:1664:7981":{"crate_id":6,"path":["libc","unix","linux_like","arpreq"],"kind":"struct"},"21:2691:2058":{"crate_id":21,"path":["proc_macro","Span"],"kind":"struct"},"6:5928:8449":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","termios"],"kind":"struct"},"15:306:21598":{"crate_id":15,"path":["addr2line","LocationRangeUnitIter"],"kind":"struct"},"16:7736:7535":{"crate_id":16,"path":["gimli","read","UnitOffset"],"kind":"struct"},"1:893:4773":{"crate_id":1,"path":["std","collections","hash","map","Drain"],"kind":"struct"},"17:12576:6797":{"crate_id":17,"path":["object","macho","SegmentCommand64"],"kind":"struct"},"2:46137:9094":{"crate_id":2,"path":["core","core_arch","simd","u64x2"],"kind":"struct"},"1:2579:6210":{"crate_id":1,"path":["std","io","buffered","bufwriter","BufWriter"],"kind":"struct"},"1:4733:10362":{"crate_id":1,"path":["std","os","fd","raw","IntoRawFd"],"kind":"trait"},"16:6268:35482":{"crate_id":16,"path":["gimli","read","dwarf","RangeIterInner"],"kind":"enum"},"16:5088:7417":{"crate_id":16,"path":["gimli","constants","DwMacro"],"kind":"struct"},"24:4580:3334":{"crate_id":24,"path":["syn","derive","DataEnum"],"kind":"struct"},"2:46451:9103":{"crate_id":2,"path":["core","core_arch","simd","m16x8"],"kind":"struct"},"11:1036:10211":{"crate_id":11,"path":["hashbrown","map","VacantEntry"],"kind":"struct"},"2:2342:132":{"crate_id":2,"path":["core","cmp","Eq"],"kind":"trait"},"7:31:21475":{"crate_id":7,"path":["unwind","libunwind","_Unwind_Reason_Code"],"kind":"enum"},"6:5104:8370":{"crate_id":6,"path":["libc","unix","linux_like","linux","ifreq"],"kind":"struct"},"17:0:3184":{"crate_id":17,"path":["object"],"kind":"module"},"2:46505:9105":{"crate_id":2,"path":["core","core_arch","simd","m64x2"],"kind":"struct"},"17:10447:9567":{"crate_id":17,"path":["object","read","elf","hash","HashTable"],"kind":"struct"},"2:44397:9719":{"crate_id":2,"path":["core","str","UnsafeBytesToStr"],"kind":"struct"},"2:40433:3516":{"crate_id":2,"path":["core","iter","adapters","inspect","Inspect"],"kind":"struct"},"17:12196:6704":{"crate_id":17,"path":["object","elf","Versym"],"kind":"struct"},"3:234:238":{"crate_id":3,"path":["compiler_builtins","float","cmp","Result"],"kind":"enum"},"20:734:1991":{"crate_id":20,"path":["proc_macro2","fallback","Ident"],"kind":"struct"},"6:5052:8343":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_user_dev"],"kind":"struct"},"2:40200:9635":{"crate_id":2,"path":["core","ffi","c_str","FromBytesWithNulError"],"kind":"struct"},"17:13487:6981":{"crate_id":17,"path":["object","pe","ImageVxdHeader"],"kind":"struct"},"6:1514:7879":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreq_source"],"kind":"struct"},"2:32165:9620":{"crate_id":2,"path":["core","error","Source"],"kind":"struct"},"6:4666:8174":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Sym"],"kind":"struct"},"6:6047:8519":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ntptimeval"],"kind":"struct"},"1:859:3414":{"crate_id":1,"path":["std","collections","hash","map","IntoIter"],"kind":"struct"},"11:860:10208":{"crate_id":11,"path":["hashbrown","map","RawVacantEntryMut"],"kind":"struct"},"2:2630:123":{"crate_id":2,"path":["core","default","Default"],"kind":"trait"},"24:1137:5262":{"crate_id":24,"path":["syn","lit","LitIntRepr"],"kind":"struct"},"24:2864:3669":{"crate_id":24,"path":["syn","token","For"],"kind":"struct"},"24:4930:3369":{"crate_id":24,"path":["syn","expr","ExprWhile"],"kind":"struct"},"17:14033:7166":{"crate_id":17,"path":["object","pe","ImageBoundForwarderRef"],"kind":"struct"},"2:41585:32253":{"crate_id":2,"path":["core","net","parser","AddrKind"],"kind":"enum"},"17:11742:6617":{"crate_id":17,"path":["object","read","CompressedFileRange"],"kind":"struct"},"2:42039:92":{"crate_id":2,"path":["core","sync","atomic","AtomicU16"],"kind":"struct"},"1:4895:10402":{"crate_id":1,"path":["std","os","net","linux_ext","addr","SocketAddrExt"],"kind":"trait"},"6:4783:8202":{"crate_id":6,"path":["libc","unix","linux_like","linux","in6_pktinfo"],"kind":"struct"},"1:5370:10422":{"crate_id":1,"path":["std","process","Child"],"kind":"struct"},"1:1910:710":{"crate_id":1,"path":["std","ffi"],"kind":"module"},"17:12711:6815":{"crate_id":17,"path":["object","macho","SubClientCommand"],"kind":"struct"},"1:363:4575":{"crate_id":1,"path":["std","thread","scoped","ScopedJoinHandle"],"kind":"struct"},"2:1558:6162":{"crate_id":2,"path":["core","mem","maybe_uninit","write_slice_cloned","Guard"],"kind":"struct"},"11:427:35451":{"crate_id":11,"path":["hashbrown","raw","RawIterHashInner"],"kind":"struct"},"16:8134:9552":{"crate_id":16,"path":["gimli","read","unit","EntriesTree"],"kind":"struct"},"2:46115:9093":{"crate_id":2,"path":["core","core_arch","simd","u32x4"],"kind":"struct"},"2:2955:6359":{"crate_id":2,"path":["core","ops","bit","ShlAssign"],"kind":"trait"},"17:2012:22647":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbolIterator"],"kind":"struct"},"17:13685:7085":{"crate_id":17,"path":["object","pe","ImageRomHeaders"],"kind":"struct"},"2:22:738":{"crate_id":2,"path":["core","format_args"],"kind":"macro"},"1:11601:9757":{"crate_id":1,"path":["std","backtrace_rs","backtrace","Frame"],"kind":"struct"},"2:8669:3989":{"crate_id":2,"path":["core","panic","unwind_safe","UnwindSafe"],"kind":"trait"},"2:23070:195":{"crate_id":2,"path":["core","num","nonzero","NonZeroIsize"],"kind":"struct"},"18:614:35541":{"crate_id":18,"path":["memchr","memmem","twoway","SuffixKind"],"kind":"enum"},"16:6204:10091":{"crate_id":16,"path":["gimli","read","dwarf","Dwarf"],"kind":"struct"},"24:90:1985":{"crate_id":24,"path":["syn","token","Token"],"kind":"trait"},"6:5004:8321":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_authinfo"],"kind":"struct"},"5:1466:9562":{"crate_id":5,"path":["alloc","collections","btree","map","Keys"],"kind":"struct"},"16:6261:10090":{"crate_id":16,"path":["gimli","read","dwarf","RangeIter"],"kind":"struct"},"16:7708:7381":{"crate_id":16,"path":["gimli","read","str","DebugStrOffsets"],"kind":"struct"},"24:5150:3377":{"crate_id":24,"path":["syn","lit","LitByte"],"kind":"struct"},"1:1819:4847":{"crate_id":1,"path":["std","env","Args"],"kind":"struct"},"2:13007:6206":{"crate_id":2,"path":["core","task","wake","Waker"],"kind":"struct"},"1:4458:10377":{"crate_id":1,"path":["std","os","unix","process","CommandExt"],"kind":"trait"},"20:777:26620":{"crate_id":20,"path":["proc_macro2","extra","DelimSpanEnum"],"kind":"enum"},"1:723:154":{"crate_id":1,"path":["std","collections","hash","map","HashMap"],"kind":"struct"},"1:9100:162":{"crate_id":1,"path":["std","time","Instant"],"kind":"struct"},"16:5696:22504":{"crate_id":16,"path":["gimli","read","cfi","CieOffsetEncoding"],"kind":"enum"},"1:7869:137":{"crate_id":1,"path":["std","fs","FileType"],"kind":"struct"},"16:6041:22508":{"crate_id":16,"path":["gimli","read","cfi","RegisterRule"],"kind":"enum"},"16:2810:7357":{"crate_id":16,"path":["gimli","common","DebugStrOffsetsIndex"],"kind":"struct"},"16:6879:7477":{"crate_id":16,"path":["gimli","read","line","FileEntryFormat"],"kind":"struct"},"6:555:7844":{"crate_id":6,"path":["libc","unix","winsize"],"kind":"struct"},"16:6721:22512":{"crate_id":16,"path":["gimli","read","line","ColumnType"],"kind":"enum"},"24:4966:63":{"crate_id":24,"path":["syn","expr","parsing","kw","raw"],"kind":"struct"},"24:2224:2679":{"crate_id":24,"path":["syn","spanned","Spanned"],"kind":"trait"},"24:4926:3368":{"crate_id":24,"path":["syn","expr","ExprUnsafe"],"kind":"struct"},"5:2051:10213":{"crate_id":5,"path":["alloc","collections","btree","map","CursorMut"],"kind":"struct"},"6:4914:8265":{"crate_id":6,"path":["libc","unix","linux_like","linux","file_clone_range"],"kind":"struct"},"23:78:2060":{"crate_id":23,"path":["quote","to_tokens","ToTokens"],"kind":"trait"},"16:8072:7579":{"crate_id":16,"path":["gimli","read","unit","AttrsIter"],"kind":"struct"},"20:946:1991":{"crate_id":20,"path":["proc_macro2","Ident"],"kind":"struct"},"5:4761:725":{"crate_id":5,"path":["alloc","fmt"],"kind":"module"},"18:582:4348":{"crate_id":18,"path":["memchr","memmem","twoway","Reverse"],"kind":"struct"},"17:9972:22614":{"crate_id":17,"path":["object","read","coff","section","CoffSegment"],"kind":"struct"},"2:12996:113":{"crate_id":2,"path":["core","task","wake","Context"],"kind":"struct"},"1:1545:4771":{"crate_id":1,"path":["std","collections","hash","set","ExtractIf"],"kind":"struct"},"6:6813:8669":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_xmmreg"],"kind":"struct"},"16:4527:7400":{"crate_id":16,"path":["gimli","constants","DwDs"],"kind":"struct"},"16:5648:22503":{"crate_id":16,"path":["gimli","read","cfi","EhHdrTableIter"],"kind":"struct"},"6:7651:8780":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_barrier_t"],"kind":"struct"},"21:0:1179":{"crate_id":21,"path":["proc_macro"],"kind":"module"},"2:40305:10282":{"crate_id":2,"path":["core","io","borrowed_buf","BorrowedCursor"],"kind":"struct"},"21:2776:2676":{"crate_id":21,"path":["proc_macro","Literal"],"kind":"struct"},"20:811:2058":{"crate_id":20,"path":["proc_macro2","imp","Span"],"kind":"enum"},"2:11904:9668":{"crate_id":2,"path":["core","str","iter","SplitInternal"],"kind":"struct"},"2:48078:9180":{"crate_id":2,"path":["core","core_arch","x86","__m128bh"],"kind":"struct"},"6:4998:8318":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_prinfo"],"kind":"struct"},"2:46283:9098":{"crate_id":2,"path":["core","core_arch","simd","i64x2"],"kind":"struct"},"24:5036:3371":{"crate_id":24,"path":["syn","generics","BoundLifetimes"],"kind":"struct"},"2:40181:9026":{"crate_id":2,"path":["core","char","TryFromCharError"],"kind":"struct"},"17:13949:7142":{"crate_id":17,"path":["object","pe","ImageExportDirectory"],"kind":"struct"},"11:2303:21573":{"crate_id":11,"path":["hashbrown","table","AbsentEntry"],"kind":"struct"},"2:44584:219":{"crate_id":2,"path":["core","task","poll","Poll"],"kind":"enum"},"16:7054:9529":{"crate_id":16,"path":["gimli","read","lookup","LookupEntryIter"],"kind":"struct"},"2:47979:9173":{"crate_id":2,"path":["core","core_arch","x86","__m128d"],"kind":"struct"},"17:13922:7138":{"crate_id":17,"path":["object","pe","ImageArchiveMemberHeader"],"kind":"struct"},"24:5490:3401":{"crate_id":24,"path":["syn","ty","TypePtr"],"kind":"struct"},"1:8927:10453":{"crate_id":1,"path":["std","sync","mpsc","TrySendError"],"kind":"enum"},"17:13113:6892":{"crate_id":17,"path":["object","macho","DyldInfoCommand"],"kind":"struct"},"17:9172:6498":{"crate_id":17,"path":["object","endian","U64Bytes"],"kind":"struct"},"2:40442:3526":{"crate_id":2,"path":["core","iter","adapters","intersperse","Intersperse"],"kind":"struct"},"2:43714:9672":{"crate_id":2,"path":["core","str","iter","RSplitTerminator"],"kind":"struct"},"24:4392:3732":{"crate_id":24,"path":["syn","token","SlashEq"],"kind":"struct"},"2:47968:9172":{"crate_id":2,"path":["core","core_arch","x86","__m128"],"kind":"struct"},"6:5033:8335":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_alg"],"kind":"struct"},"5:7479:6169":{"crate_id":5,"path":["alloc","rc","UniqueRc"],"kind":"struct"},"24:5041:2544":{"crate_id":24,"path":["syn","generics","TypeParamBound"],"kind":"enum"},"6:6100:8544":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ptrace_peeksiginfo_args"],"kind":"struct"},"2:40363:3501":{"crate_id":2,"path":["core","iter","adapters","copied","Copied"],"kind":"struct"},"16:5403:6494":{"crate_id":16,"path":["gimli","endianity","LittleEndian"],"kind":"struct"},"1:11223:162":{"crate_id":1,"path":["std","sys","unix","time","Instant"],"kind":"struct"},"2:7318:3478":{"crate_id":2,"path":["core","iter","sources","once","once"],"kind":"function"},"17:9886:22606":{"crate_id":17,"path":["object","read","archive","ArchiveMemberIterator"],"kind":"struct"},"6:6120:8549":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_seccomp"],"kind":"struct"},"24:4550:3333":{"crate_id":24,"path":["syn","data","FieldsUnnamed"],"kind":"struct"},"6:7556:8768":{"crate_id":6,"path":["libc","unix","linux_like","linux","arch","generic","termios2"],"kind":"struct"},"17:10023:22590":{"crate_id":17,"path":["object","read","coff","symbol","SymbolIterator"],"kind":"struct"},"16:4774:7407":{"crate_id":16,"path":["gimli","constants","DwId"],"kind":"struct"},"1:4558:10395":{"crate_id":1,"path":["std","os","unix","thread","JoinHandleExt"],"kind":"trait"},"2:20963:4348":{"crate_id":2,"path":["core","core_simd","swizzle","reverse","Reverse"],"kind":"struct"},"11:2368:4773":{"crate_id":11,"path":["hashbrown","table","Drain"],"kind":"struct"},"24:2177:10286":{"crate_id":24,"path":["syn","sealed","lookahead","Sealed"],"kind":"trait"},"1:2345:4699":{"crate_id":1,"path":["std","fs","metadata"],"kind":"function"},"6:5897:8436":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","glob64_t"],"kind":"struct"},"11:1541:21571":{"crate_id":11,"path":["hashbrown","rustc_entry","RustcOccupiedEntry"],"kind":"struct"},"16:7015:7487":{"crate_id":16,"path":["gimli","read","loclists","LocationListEntry"],"kind":"struct"},"5:6798:4777":{"crate_id":5,"path":["alloc","vec","set_len_on_drop","SetLenOnDrop"],"kind":"struct"},"11:759:9562":{"crate_id":11,"path":["hashbrown","map","Keys"],"kind":"struct"},"2:3085:2600":{"crate_id":2,"path":["core","ops","index","Index"],"kind":"trait"},"17:9277:6501":{"crate_id":17,"path":["object","endian","I64Bytes"],"kind":"struct"},"1:3919:10344":{"crate_id":1,"path":["std","os","unix","ffi","os_str","OsStringExt"],"kind":"trait"},"2:43632:2966":{"crate_id":2,"path":["core","str","iter","Bytes"],"kind":"struct"},"6:7692:8790":{"crate_id":6,"path":["libc","unix","linux_like","linux","non_exhaustive","open_how"],"kind":"struct"},"5:6468:4773":{"crate_id":5,"path":["alloc","vec","drain","Drain"],"kind":"struct"},"2:40113:9628":{"crate_id":2,"path":["core","char","EscapeUnicode"],"kind":"struct"},"1:588:10192":{"crate_id":1,"path":["std","ascii","AsciiExt"],"kind":"trait"},"8:0:3176":{"crate_id":8,"path":["cfg_if"],"kind":"module"},"2:43373:32761":{"crate_id":2,"path":["core","slice","iter","GenericSplitN"],"kind":"struct"},"2:9633:2593":{"crate_id":2,"path":["core","fmt","Binary"],"kind":"trait"},"2:41961:95":{"crate_id":2,"path":["core","sync","atomic","AtomicU8"],"kind":"struct"},"21:216:10089":{"crate_id":21,"path":["proc_macro","bridge","fxhash","FxHasher"],"kind":"struct"},"2:22839:196":{"crate_id":2,"path":["core","num","nonzero","NonZeroU128"],"kind":"struct"},"1:12046:13":{"crate_id":1,"path":["std","fn"],"kind":"primitive"},"2:41663:9040":{"crate_id":2,"path":["core","net","socket_addr","SocketAddrV6"],"kind":"struct"},"16:7128:9262":{"crate_id":16,"path":["gimli","read","op","Operation"],"kind":"enum"},"2:7539:144":{"crate_id":2,"path":["core","iter","traits","collect","FromIterator"],"kind":"trait"},"24:4890:3359":{"crate_id":24,"path":["syn","expr","ExprRange"],"kind":"struct"},"17:9207:6499":{"crate_id":17,"path":["object","endian","I16Bytes"],"kind":"struct"},"2:4474:3580":{"crate_id":2,"path":["core","cell","SyncUnsafeCell"],"kind":"struct"},"17:9102:6496":{"crate_id":17,"path":["object","endian","U16Bytes"],"kind":"struct"},"1:11442:6243":{"crate_id":1,"path":["std","sys_common","net","LookupHost"],"kind":"struct"},"17:10929:6566":{"crate_id":17,"path":["object","read","macho","segment","MachOSegmentInternal"],"kind":"struct"},"17:13802:7109":{"crate_id":17,"path":["object","pe","ImageSymbolEx"],"kind":"struct"},"24:2558:3658":{"crate_id":24,"path":["syn","token","As"],"kind":"struct"},"20:718:2058":{"crate_id":20,"path":["proc_macro2","fallback","Span"],"kind":"struct"},"9:393:21490":{"crate_id":9,"path":["miniz_oxide","MZFlush"],"kind":"enum"},"6:1639:7962":{"crate_id":6,"path":["libc","unix","linux_like","ifaddrs"],"kind":"struct"},"24:5335:2657":{"crate_id":24,"path":["syn","path","AngleBracketedGenericArguments"],"kind":"struct"},"1:5976:232":{"crate_id":1,"path":["std","sync","mpmc","counter","Receiver"],"kind":"struct"},"1:2615:10048":{"crate_id":1,"path":["std","io","buffered","bufwriter","WriterPanicked"],"kind":"struct"},"6:6682:8623":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","flock"],"kind":"struct"},"24:3810:3692":{"crate_id":24,"path":["syn","token","AndAnd"],"kind":"struct"},"5:4350:277":{"crate_id":5,"path":["alloc","collections","vec_deque","VecDeque"],"kind":"struct"},"6:7622:8773":{"crate_id":6,"path":["libc","unix","linux_like","linux","fanotify_event_metadata"],"kind":"struct"},"1:4689:10404":{"crate_id":1,"path":["std","os","linux","process","ChildExt"],"kind":"trait"},"1:307:1595":{"crate_id":1,"path":["std","thread"],"kind":"module"},"1:4140:10370":{"crate_id":1,"path":["std","os","unix","net","ancillary","ScmRights"],"kind":"struct"},"24:4826:3345":{"crate_id":24,"path":["syn","expr","ExprConst"],"kind":"struct"},"2:12199:3814":{"crate_id":2,"path":["core","str","pattern"],"kind":"module"},"2:10720:9674":{"crate_id":2,"path":["core","slice","iter","SplitN"],"kind":"struct"},"2:42716:7557":{"crate_id":2,"path":["core","fmt","rt","Flag"],"kind":"enum"},"6:6666:8611":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statfs"],"kind":"struct"},"2:2267:101":{"crate_id":2,"path":["core","borrow","Borrow"],"kind":"trait"},"2:42949:9658":{"crate_id":2,"path":["core","hash","sip","SipHasher24"],"kind":"struct"},"11:2479:35444":{"crate_id":11,"path":["hashbrown","raw","Fallibility"],"kind":"enum"},"2:3004:4679":{"crate_id":2,"path":["core","ops","coroutine","Coroutine"],"kind":"trait"},"6:7371:8756":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","align","clone_args"],"kind":"struct"},"6:4375:8033":{"crate_id":6,"path":["libc","unix","linux_like","linux","spwd"],"kind":"struct"},"2:41752:3419":{"crate_id":2,"path":["core","option","IterMut"],"kind":"struct"},"16:5049:7416":{"crate_id":16,"path":["gimli","constants","DwLnct"],"kind":"struct"},"2:46739:9124":{"crate_id":2,"path":["core","core_arch","simd","u64x4"],"kind":"struct"},"6:483:7801":{"crate_id":6,"path":["libc","unix","utimbuf"],"kind":"struct"},"2:3035:3585":{"crate_id":2,"path":["core","ops","deref","DerefMut"],"kind":"trait"},"6:1710:8001":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_storage"],"kind":"struct"},"6:5921:8445":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","cmsghdr"],"kind":"struct"},"18:690:9358":{"crate_id":18,"path":["memchr","memmem","FinderRev"],"kind":"struct"},"6:4854:8240":{"crate_id":6,"path":["libc","unix","linux_like","linux","can_filter"],"kind":"struct"},"2:21466:10485":{"crate_id":2,"path":["core","core_simd","lane_count","SupportedLaneCount"],"kind":"trait"},"11:298:9557":{"crate_id":11,"path":["hashbrown","raw","RawIterRange"],"kind":"struct"},"17:11124:22740":{"crate_id":17,"path":["object","read","pe","section","PeSectionIterator"],"kind":"struct"},"2:22432:8823":{"crate_id":2,"path":["core","num","error","TryFromIntError"],"kind":"struct"},"11:680:3419":{"crate_id":11,"path":["hashbrown","map","IterMut"],"kind":"struct"},"17:2209:22664":{"crate_id":17,"path":["object","read","elf","relocation","ElfSectionRelocationIterator"],"kind":"struct"},"5:4196:6162":{"crate_id":5,"path":["alloc","collections","vec_deque","into_iter","try_rfold","Guard"],"kind":"struct"},"2:11941:9673":{"crate_id":2,"path":["core","str","iter","SplitNInternal"],"kind":"struct"},"18:671:26612":{"crate_id":18,"path":["memchr","memmem","FindRevIter"],"kind":"struct"},"20:510:3433":{"crate_id":20,"path":["proc_macro2","LexError"],"kind":"struct"},"1:8181:3509":{"crate_id":1,"path":["std","io","Chain"],"kind":"struct"},"2:44369:9712":{"crate_id":2,"path":["core","str","CharEscapeDebugContinue"],"kind":"struct"},"2:48093:9181":{"crate_id":2,"path":["core","core_arch","x86","__m256bh"],"kind":"struct"},"2:46353:9101":{"crate_id":2,"path":["core","core_arch","simd","f64x4"],"kind":"struct"},"1:12035:803":{"crate_id":1,"path":["std","i32"],"kind":"primitive"},"1:5117:215":{"crate_id":1,"path":["std","path","PathBuf"],"kind":"struct"},"17:14001:7158":{"crate_id":17,"path":["object","pe","ImageTlsDirectory32"],"kind":"struct"},"21:2329:1991":{"crate_id":21,"path":["proc_macro","bridge","Ident"],"kind":"struct"},"2:5572:6162":{"crate_id":2,"path":["core","iter","adapters","filter_map","next_chunk","Guard"],"kind":"struct"},"6:4578:8147":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_rumble_effect"],"kind":"struct"},"2:42078:86":{"crate_id":2,"path":["core","sync","atomic","AtomicI32"],"kind":"struct"},"2:41735:174":{"crate_id":2,"path":["core","option","Item"],"kind":"struct"},"1:5560:10427":{"crate_id":1,"path":["std","process","Termination"],"kind":"trait"},"6:5974:8470":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_mmap_req"],"kind":"struct"},"17:11215:9392":{"crate_id":17,"path":["object","read","pe","import","ImportTable"],"kind":"struct"},"6:5982:8475":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_mmap_hdr"],"kind":"struct"},"17:12422:6765":{"crate_id":17,"path":["object","macho","DyldCacheMappingInfo"],"kind":"struct"},"17:13676:7084":{"crate_id":17,"path":["object","pe","ImageNtHeaders32"],"kind":"struct"},"1:5735:10441":{"crate_id":1,"path":["std","sync","barrier","Barrier"],"kind":"struct"},"2:40162:15684":{"crate_id":2,"path":["core","char","CaseMappingIter"],"kind":"enum"},"1:3474:3561":{"crate_id":1,"path":["std","io","Write"],"kind":"trait"},"1:3275:10320":{"crate_id":1,"path":["std","io","stdio","StderrLock"],"kind":"struct"},"1:8793:210":{"crate_id":1,"path":["std","process","Output"],"kind":"struct"},"2:32158:3576":{"crate_id":2,"path":["core","error","tags","Ref"],"kind":"struct"},"2:1651:4632":{"crate_id":2,"path":["core","mem","Discriminant"],"kind":"struct"},"1:5742:10442":{"crate_id":1,"path":["std","sync","barrier","BarrierWaitResult"],"kind":"struct"},"2:9099:90":{"crate_id":2,"path":["core","sync","atomic","AtomicPtr"],"kind":"struct"},"17:11306:6581":{"crate_id":17,"path":["object","read","pe","relocation","Relocation"],"kind":"struct"},"24:2575:3659":{"crate_id":24,"path":["syn","token","Async"],"kind":"struct"},"1:6419:10443":{"crate_id":1,"path":["std","sync","once","OnceState"],"kind":"struct"},"1:8343:9236":{"crate_id":1,"path":["std","os","fd","owned","BorrowedFd"],"kind":"struct"},"17:14434:7290":{"crate_id":17,"path":["object","pe","ImageCoffSymbolsHeader"],"kind":"struct"},"17:13010:6874":{"crate_id":17,"path":["object","macho","LinkeditDataCommand"],"kind":"struct"},"1:7650:4565":{"crate_id":1,"path":["std","thread","Builder"],"kind":"struct"},"23:11:3443":{"crate_id":23,"path":["quote","ext","TokenStreamExt"],"kind":"trait"},"2:4871:10326":{"crate_id":2,"path":["core","io","borrowed_buf","BorrowedBuf"],"kind":"struct"},"2:43554:15631":{"crate_id":2,"path":["core","slice","iter","RChunksExactMut"],"kind":"struct"},"2:47865:9168":{"crate_id":2,"path":["core","core_arch","simd","i64x8"],"kind":"struct"},"24:5463:3394":{"crate_id":24,"path":["syn","ty","TypeBareFn"],"kind":"struct"},"6:4434:8077":{"crate_id":6,"path":["libc","unix","linux_like","linux","fsid_t"],"kind":"struct"},"2:40155:9631":{"crate_id":2,"path":["core","char","ToUppercase"],"kind":"struct"},"2:12802:165":{"crate_id":2,"path":["core","future","into_future","IntoFuture"],"kind":"trait"},"2:40040:9624":{"crate_id":2,"path":["core","async_iter","from_iter","FromIter"],"kind":"struct"},"2:40664:3523":{"crate_id":2,"path":["core","iter","adapters","take","Take"],"kind":"struct"},"2:6275:9591":{"crate_id":2,"path":["core","iter","adapters","map_windows","MapWindowsInner"],"kind":"struct"},"16:7544:9540":{"crate_id":16,"path":["gimli","read","pubtypes","PubTypesEntryIter"],"kind":"struct"},"11:1010:10210":{"crate_id":11,"path":["hashbrown","map","OccupiedEntry"],"kind":"struct"},"2:40195:105":{"crate_id":2,"path":["core","ffi","c_str","CStr"],"kind":"struct"},"16:7862:9542":{"crate_id":16,"path":["gimli","read","unit","DebuggingInformationEntry"],"kind":"struct"},"24:2881:3670":{"crate_id":24,"path":["syn","token","If"],"kind":"struct"},"24:5012:2615":{"crate_id":24,"path":["syn","generics","TypeParam"],"kind":"struct"},"5:6101:6162":{"crate_id":5,"path":["alloc","sync","from_iter_exact","Guard"],"kind":"struct"},"2:40341:3509":{"crate_id":2,"path":["core","iter","adapters","chain","Chain"],"kind":"struct"},"20:980:3414":{"crate_id":20,"path":["proc_macro2","token_stream","IntoIter"],"kind":"struct"},"5:3240:2028":{"crate_id":5,"path":["alloc","collections","btree","set","Union"],"kind":"struct"},"6:5085:8356":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_ifr_ifru"],"kind":"union"},"24:5484:3400":{"crate_id":24,"path":["syn","ty","TypeParen"],"kind":"struct"},"24:2660:103":{"crate_id":24,"path":["syn","token","Break"],"kind":"struct"},"5:7590:4772":{"crate_id":5,"path":["alloc","vec","splice","Splice"],"kind":"struct"},"16:6346:10106":{"crate_id":16,"path":["gimli","read","abbrev","AbbreviationsCache"],"kind":"struct"},"5:3332:4771":{"crate_id":5,"path":["alloc","collections","btree","set","ExtractIf"],"kind":"struct"},"17:9852:22605":{"crate_id":17,"path":["object","read","archive","Members"],"kind":"enum"},"1:1406:156":{"crate_id":1,"path":["std","collections","hash","set","HashSet"],"kind":"struct"},"15:288:21597":{"crate_id":15,"path":["addr2line","LocationRangeIter"],"kind":"struct"},"17:10139:22635":{"crate_id":17,"path":["object","read","coff","import","ImportName"],"kind":"enum"},"2:12789:148":{"crate_id":2,"path":["core","future","future","Future"],"kind":"trait"},"24:2898:3671":{"crate_id":24,"path":["syn","token","Impl"],"kind":"struct"},"17:9823:22604":{"crate_id":17,"path":["object","read","archive","ArchiveKind"],"kind":"enum"},"24:4351:3729":{"crate_id":24,"path":["syn","token","Shr"],"kind":"struct"},"2:44566:231":{"crate_id":2,"path":["core","future","ready","Ready"],"kind":"struct"},"1:4729:10359":{"crate_id":1,"path":["std","os","fd","raw","AsRawFd"],"kind":"trait"},"1:4017:10349":{"crate_id":1,"path":["std","os","unix","fs","FileTypeExt"],"kind":"trait"},"2:41872:3415":{"crate_id":2,"path":["core","result","Iter"],"kind":"struct"},"6:569:7852":{"crate_id":6,"path":["libc","unix","sigval"],"kind":"struct"},"2:21590:10491":{"crate_id":2,"path":["core","core_simd","masks","MaskElement"],"kind":"trait"},"1:10754:9742":{"crate_id":1,"path":["std","sys","unix","fs","StatxExtraFields"],"kind":"struct"},"2:2921:4269":{"crate_id":2,"path":["core","ops","bit","BitOr"],"kind":"trait"},"17:8926:22582":{"crate_id":17,"path":["object","common","FileFlags"],"kind":"enum"},"23:150:4008":{"crate_id":23,"path":["quote","__private","ThereIsNoIteratorInRepetition"],"kind":"struct"},"11:1051:21567":{"crate_id":11,"path":["hashbrown","map","EntryRef"],"kind":"enum"},"5:4395:6162":{"crate_id":5,"path":["alloc","collections","vec_deque","write_iter_wrapping","Guard"],"kind":"struct"},"2:43938:9686":{"crate_id":2,"path":["core","str","iter","EncodeUtf16"],"kind":"struct"},"17:9660:35507":{"crate_id":17,"path":["object","read","any","SymbolTableInternal"],"kind":"enum"},"2:43850:9680":{"crate_id":2,"path":["core","str","iter","Matches"],"kind":"struct"},"2:46307:9099":{"crate_id":2,"path":["core","core_arch","simd","f32x4"],"kind":"struct"},"17:10012:6521":{"crate_id":17,"path":["object","read","coff","symbol","SymbolTable"],"kind":"struct"},"17:9867:6511":{"crate_id":17,"path":["object","read","archive","ArchiveFile"],"kind":"struct"},"2:41760:3414":{"crate_id":2,"path":["core","option","IntoIter"],"kind":"struct"},"5:7232:3414":{"crate_id":5,"path":["alloc","collections","binary_heap","IntoIter"],"kind":"struct"},"16:4949:7413":{"crate_id":16,"path":["gimli","constants","DwDefaulted"],"kind":"struct"},"11:1145:10035":{"crate_id":11,"path":["hashbrown","map","OccupiedError"],"kind":"struct"},"2:39407:3463":{"crate_id":2,"path":["core","ops","range","Bound"],"kind":"enum"},"5:5945:72":{"crate_id":5,"path":["alloc","sync","Arc"],"kind":"struct"},"6:588:7862":{"crate_id":6,"path":["libc","unix","servent"],"kind":"struct"},"16:7884:22523":{"crate_id":16,"path":["gimli","read","unit","AttributeValue"],"kind":"enum"},"1:3969:10346":{"crate_id":1,"path":["std","os","unix","fs","PermissionsExt"],"kind":"trait"},"16:6485:7365":{"crate_id":16,"path":["gimli","read","index","DebugCuIndex"],"kind":"struct"},"5:1290:10210":{"crate_id":5,"path":["alloc","collections","btree","map","entry","OccupiedEntry"],"kind":"struct"},"1:11186:9266":{"crate_id":1,"path":["std","sys","unix","time","SystemTime"],"kind":"struct"},"17:11845:6631":{"crate_id":17,"path":["object","archive","AixFileHeader"],"kind":"struct"},"6:574:7854":{"crate_id":6,"path":["libc","unix","itimerval"],"kind":"struct"},"5:7490:255":{"crate_id":5,"path":["alloc","string","String"],"kind":"struct"},"1:10239:10430":{"crate_id":1,"path":["std","sys","unix","pipe","AnonPipe"],"kind":"struct"},"16:2450:7342":{"crate_id":16,"path":["gimli","common","DebugArangesOffset"],"kind":"struct"},"20:930:2057":{"crate_id":20,"path":["proc_macro2","Spacing"],"kind":"enum"},"24:4812:3342":{"crate_id":24,"path":["syn","expr","ExprCall"],"kind":"struct"},"1:8211:9682":{"crate_id":1,"path":["std","io","Lines"],"kind":"struct"},"16:7568:7379":{"crate_id":16,"path":["gimli","read","rnglists","DebugRngLists"],"kind":"struct"},"2:40903:3483":{"crate_id":2,"path":["core","iter","sources","repeat","Repeat"],"kind":"struct"},"17:13071:6884":{"crate_id":17,"path":["object","macho","VersionMinCommand"],"kind":"struct"},"1:11992:10202":{"crate_id":1,"path":["std","backtrace_rs","types","BytesOrWideString"],"kind":"enum"},"1:849:3419":{"crate_id":1,"path":["std","collections","hash","map","IterMut"],"kind":"struct"},"2:46663:9122":{"crate_id":2,"path":["core","core_arch","simd","u16x16"],"kind":"struct"},"2:43768:9675":{"crate_id":2,"path":["core","str","iter","RSplitN"],"kind":"struct"},"2:44576:239":{"crate_id":2,"path":["core","future","ResumeTy"],"kind":"struct"},"16:7677:222":{"crate_id":16,"path":["gimli","read","rnglists","Range"],"kind":"struct"},"2:47617:9164":{"crate_id":2,"path":["core","core_arch","simd","u16x32"],"kind":"struct"},"5:7294:222":{"crate_id":5,"path":["alloc","collections","btree","set","Range"],"kind":"struct"},"17:12790:6825":{"crate_id":17,"path":["object","macho","RoutinesCommand32"],"kind":"struct"},"17:11337:22768":{"crate_id":17,"path":["object","read","pe","resource","ResourceDirectoryEntryData"],"kind":"enum"},"1:3155:31277":{"crate_id":1,"path":["std","io","stdio","StdinRaw"],"kind":"struct"},"17:14460:7299":{"crate_id":17,"path":["object","pe","ImageFunctionEntry"],"kind":"struct"},"17:582:2072":{"crate_id":17,"path":["object","read","any","Symbol"],"kind":"struct"},"6:501:7809":{"crate_id":6,"path":["libc","unix","rlimit"],"kind":"struct"},"2:45992:9084":{"crate_id":2,"path":["core","core_arch","simd","f64x1"],"kind":"struct"},"2:48116:9182":{"crate_id":2,"path":["core","core_arch","x86","__m512bh"],"kind":"struct"},"2:44245:9704":{"crate_id":2,"path":["core","str","pattern","TwoWaySearcher"],"kind":"struct"},"23:35:10286":{"crate_id":23,"path":["quote","ext","private","Sealed"],"kind":"trait"},"17:9617:35537":{"crate_id":17,"path":["object","read","any","ComdatSectionIteratorInternal"],"kind":"enum"},"2:46329:9100":{"crate_id":2,"path":["core","core_arch","simd","f64x2"],"kind":"struct"},"20:951:2676":{"crate_id":20,"path":["proc_macro2","Literal"],"kind":"struct"},"6:7610:8771":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_condattr_t"],"kind":"struct"},"16:6753:9504":{"crate_id":16,"path":["gimli","read","line","LineProgramHeader"],"kind":"struct"},"1:4118:27590":{"crate_id":1,"path":["std","os","unix","net","ancillary","AncillaryDataIter"],"kind":"struct"},"18:681:9355":{"crate_id":18,"path":["memchr","memmem","Finder"],"kind":"struct"},"11:2473:7712":{"crate_id":11,"path":["hashbrown","raw","bitmask","BitMaskIter"],"kind":"struct"},"5:3185:34174":{"crate_id":5,"path":["alloc","collections","btree","set","DifferenceInner"],"kind":"enum"},"11:785:4773":{"crate_id":11,"path":["hashbrown","map","Drain"],"kind":"struct"},"20:357:3433":{"crate_id":20,"path":["proc_macro2","imp","LexError"],"kind":"enum"},"21:2710:2059":{"crate_id":21,"path":["proc_macro","TokenTree"],"kind":"enum"},"2:10568:15628":{"crate_id":2,"path":["core","slice","iter","SplitMut"],"kind":"struct"},"17:14448:7297":{"crate_id":17,"path":["object","pe","ImageDebugMisc"],"kind":"struct"},"5:1516:222":{"crate_id":5,"path":["alloc","collections","btree","map","Range"],"kind":"struct"},"24:3034:3677":{"crate_id":24,"path":["syn","token","Mut"],"kind":"struct"},"17:12086:6684":{"crate_id":17,"path":["object","elf","Rel32"],"kind":"struct"},"1:3483:31498":{"crate_id":1,"path":["std","io","Write","write_fmt","Adapter"],"kind":"struct"},"1:836:3415":{"crate_id":1,"path":["std","collections","hash","map","Iter"],"kind":"struct"},"24:4327:3727":{"crate_id":24,"path":["syn","token","Shl"],"kind":"struct"},"17:14042:7167":{"crate_id":17,"path":["object","pe","ImageDelayloadDescriptor"],"kind":"struct"},"6:5891:8435":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__timeval"],"kind":"struct"},"2:21808:10488":{"crate_id":2,"path":["core","core_simd","ord","SimdPartialOrd"],"kind":"trait"},"17:12305:6736":{"crate_id":17,"path":["object","elf","GnuHashHeader"],"kind":"struct"},"1:7630:10286":{"crate_id":1,"path":["std","sealed","Sealed"],"kind":"trait"},"2:44365:9711":{"crate_id":2,"path":["core","str","LinesMap"],"kind":"struct"},"17:13286:6921":{"crate_id":17,"path":["object","macho","RelocationInfo"],"kind":"struct"},"17:13816:7110":{"crate_id":17,"path":["object","pe","ImageSymbolExBytes"],"kind":"struct"},"6:4878:8251":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_fprog"],"kind":"struct"},"16:2359:7338":{"crate_id":16,"path":["gimli","common","Register"],"kind":"struct"},"16:6401:7364":{"crate_id":16,"path":["gimli","read","aranges","DebugAranges"],"kind":"struct"},"1:922:10205":{"crate_id":1,"path":["std","collections","hash","map","RawEntryBuilderMut"],"kind":"struct"},"17:9607:22589":{"crate_id":17,"path":["object","read","any","ComdatSectionIterator"],"kind":"struct"},"17:11244:6610":{"crate_id":17,"path":["object","read","pe","import","Import"],"kind":"enum"},"2:40332:3499":{"crate_id":2,"path":["core","iter","adapters","by_ref_sized","ByRefSized"],"kind":"struct"},"17:12554:6790":{"crate_id":17,"path":["object","macho","SegmentCommand32"],"kind":"struct"},"2:20991:32499":{"crate_id":2,"path":["core","core_simd","swizzle","rotate_lanes_right","Rotate"],"kind":"struct"},"17:11448:22595":{"crate_id":17,"path":["object","read","ObjectKind"],"kind":"enum"},"2:40228:9636":{"crate_id":2,"path":["core","ffi","c_str","FromBytesUntilNulError"],"kind":"struct"},"1:6415:3479":{"crate_id":1,"path":["std","sync","once","Once"],"kind":"struct"},"17:14024:7163":{"crate_id":17,"path":["object","pe","ImageBoundImportDescriptor"],"kind":"struct"},"2:5690:3502":{"crate_id":2,"path":["core","iter","adapters","flatten","Flatten"],"kind":"struct"},"16:5435:7421":{"crate_id":16,"path":["gimli","read","util","sealed","CapacityFull"],"kind":"struct"},"16:6545:7438":{"crate_id":16,"path":["gimli","read","index","UnitIndexSection"],"kind":"struct"},"17:11393:135":{"crate_id":17,"path":["object","read","Error"],"kind":"struct"},"17:13897:7133":{"crate_id":17,"path":["object","pe","ImageRelocation"],"kind":"struct"},"16:5982:9447":{"crate_id":16,"path":["gimli","read","cfi","RegisterRuleIter"],"kind":"struct"},"1:8975:4558":{"crate_id":1,"path":["std","sync","mpmc","context","Inner"],"kind":"struct"},"2:43814:9678":{"crate_id":2,"path":["core","str","iter","RMatchIndices"],"kind":"struct"},"13:110:35457":{"crate_id":13,"path":["std_detect","detect","arch","x86","Feature"],"kind":"enum"},"21:107:4804":{"crate_id":21,"path":["proc_macro","bridge","client","Bridge"],"kind":"struct"},"17:10456:22665":{"crate_id":17,"path":["object","read","elf","hash","GnuHashTable"],"kind":"struct"},"17:11573:9405":{"crate_id":17,"path":["object","read","ObjectMap"],"kind":"struct"},"16:7503:7376":{"crate_id":16,"path":["gimli","read","pubnames","DebugPubNames"],"kind":"struct"},"16:6156:9474":{"crate_id":16,"path":["gimli","read","cfi","CallFrameInstructionIter"],"kind":"struct"},"17:14173:7204":{"crate_id":17,"path":["object","pe","ImageLoadConfigDirectory32"],"kind":"struct"},"17:14163:7199":{"crate_id":17,"path":["object","pe","ImageEpilogueDynamicRelocationHeader"],"kind":"struct"},"2:3301:3584":{"crate_id":2,"path":["core","ops","unsize","CoerceUnsized"],"kind":"trait"},"16:7006:22515":{"crate_id":16,"path":["gimli","read","loclists","LocListIter"],"kind":"struct"},"24:2231:10286":{"crate_id":24,"path":["syn","spanned","private","Sealed"],"kind":"trait"},"6:6804:8666":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_fpxreg"],"kind":"struct"},"1:8484:10417":{"crate_id":1,"path":["std","path","Component"],"kind":"enum"},"17:14499:7308":{"crate_id":17,"path":["object","pe","NonPagedDebugInfo"],"kind":"struct"},"17:10084:22612":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdatIterator"],"kind":"struct"},"16:5963:22506":{"crate_id":16,"path":["gimli","read","cfi","UnwindTable"],"kind":"struct"},"1:2373:10278":{"crate_id":1,"path":["std","fs","read_dir"],"kind":"function"},"16:6569:7370":{"crate_id":16,"path":["gimli","read","line","DebugLine"],"kind":"struct"},"24:4945:2600":{"crate_id":24,"path":["syn","expr","Index"],"kind":"struct"},"1:12038:1649":{"crate_id":1,"path":["std","u8"],"kind":"primitive"},"2:42759:135":{"crate_id":2,"path":["core","fmt","Error"],"kind":"struct"},"17:10575:9381":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSubsectionIterator"],"kind":"struct"},"16:2504:7344":{"crate_id":16,"path":["gimli","common","DebugLineOffset"],"kind":"struct"},"1:6059:6217":{"crate_id":1,"path":["std","sync","mpmc","list","Channel"],"kind":"struct"},"24:4339:3728":{"crate_id":24,"path":["syn","token","ShlEq"],"kind":"struct"},"1:9266:4847":{"crate_id":1,"path":["std","sys","unix","args","Args"],"kind":"struct"},"2:12851:216":{"crate_id":2,"path":["core","future","pending","Pending"],"kind":"struct"},"24:829:3536":{"crate_id":24,"path":["syn","ext","IdentExt"],"kind":"trait"},"24:3357:3688":{"crate_id":24,"path":["syn","token","Virtual"],"kind":"struct"},"2:21381:10486":{"crate_id":2,"path":["core","core_simd","elements","uint","SimdUint"],"kind":"trait"},"6:6718:8639":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stat"],"kind":"struct"},"1:2202:10266":{"crate_id":1,"path":["std","fs","read_to_string"],"kind":"function"},"17:9531:35514":{"crate_id":17,"path":["object","read","any","SectionIteratorInternal"],"kind":"enum"},"2:1764:8800":{"crate_id":2,"path":["core","ptr","metadata","PtrComponents"],"kind":"struct"},"17:13228:6912":{"crate_id":17,"path":["object","macho","NoteCommand"],"kind":"struct"},"17:10059:6517":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbol"],"kind":"struct"},"14:165:21578":{"crate_id":14,"path":["rustc_demangle","DemangleStyle"],"kind":"enum"},"24:5350:2585":{"crate_id":24,"path":["syn","path","Constraint"],"kind":"struct"},"5:1259:9534":{"crate_id":5,"path":["alloc","collections","btree","map","entry","Entry"],"kind":"enum"},"17:12043:6679":{"crate_id":17,"path":["object","elf","Sym64"],"kind":"struct"},"1:0:1535":{"crate_id":1,"path":["std"],"kind":"module"},"6:6837:8681":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user_regs_struct"],"kind":"struct"},"17:12724:6816":{"crate_id":17,"path":["object","macho","SubUmbrellaCommand"],"kind":"struct"},"1:557:4561":{"crate_id":1,"path":["std","thread","JoinHandle"],"kind":"struct"},"17:9372:6504":{"crate_id":17,"path":["object","read","util","StringTable"],"kind":"struct"},"5:629:10036":{"crate_id":5,"path":["alloc","boxed","from","StringError"],"kind":"struct"},"1:11805:6246":{"crate_id":1,"path":["std","backtrace_rs","symbolize","gimli","mmap","Mmap"],"kind":"struct"},"17:14090:7182":{"crate_id":17,"path":["object","pe","ImageResourceDataEntry"],"kind":"struct"},"2:42000:85":{"crate_id":2,"path":["core","sync","atomic","AtomicI16"],"kind":"struct"},"2:9641:3562":{"crate_id":2,"path":["core","fmt","LowerExp"],"kind":"trait"},"2:47009:9129":{"crate_id":2,"path":["core","core_arch","simd","f32x8"],"kind":"struct"},"5:7331:3414":{"crate_id":5,"path":["alloc","collections","vec_deque","into_iter","IntoIter"],"kind":"struct"},"1:12034:802":{"crate_id":1,"path":["std","i16"],"kind":"primitive"},"6:4738:8180":{"crate_id":6,"path":["libc","unix","linux_like","linux","ucred"],"kind":"struct"},"24:5503:3404":{"crate_id":24,"path":["syn","ty","TypeTraitObject"],"kind":"struct"},"24:4906:3363":{"crate_id":24,"path":["syn","expr","ExprStruct"],"kind":"struct"},"11:1876:9566":{"crate_id":11,"path":["hashbrown","set","SymmetricDifference"],"kind":"struct"},"11:2260:10210":{"crate_id":11,"path":["hashbrown","table","OccupiedEntry"],"kind":"struct"},"2:40922:3487":{"crate_id":2,"path":["core","iter","sources","repeat_with","RepeatWith"],"kind":"struct"},"1:10422:10428":{"crate_id":1,"path":["std","sys","unix","process","process_common","CommandArgs"],"kind":"struct"},"24:3374:3689":{"crate_id":24,"path":["syn","token","Where"],"kind":"struct"},"2:39460:8898":{"crate_id":2,"path":["core","array","TryFromSliceError"],"kind":"struct"},"16:2696:7352":{"crate_id":16,"path":["gimli","common","RangeListsOffset"],"kind":"struct"},"1:10832:27236":{"crate_id":1,"path":["std","sys","unix","kernel_copy","SpliceMode"],"kind":"enum"},"17:14378:7282":{"crate_id":17,"path":["object","pe","ImageEnclaveConfig64"],"kind":"struct"},"17:400:22573":{"crate_id":17,"path":["object","read","any","Segment"],"kind":"struct"},"6:563:7849":{"crate_id":6,"path":["libc","unix","linger"],"kind":"struct"},"2:45684:9071":{"crate_id":2,"path":["core","core_arch","simd","u8x4"],"kind":"struct"},"24:2949:3674":{"crate_id":24,"path":["syn","token","Loop"],"kind":"struct"},"2:43796:9677":{"crate_id":2,"path":["core","str","iter","MatchIndices"],"kind":"struct"},"16:4417:7397":{"crate_id":16,"path":["gimli","constants","DwForm"],"kind":"struct"},"5:1525:10212":{"crate_id":5,"path":["alloc","collections","btree","map","RangeMut"],"kind":"struct"},"17:3441:22700":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbolIterator"],"kind":"struct"},"2:13045:152":{"crate_id":2,"path":["core","alloc","global","GlobalAlloc"],"kind":"trait"},"6:4808:8216":{"crate_id":6,"path":["libc","unix","linux_like","linux","fanotify_response"],"kind":"struct"},"2:21328:10490":{"crate_id":2,"path":["core","core_simd","elements","mut_ptr","SimdMutPtr"],"kind":"trait"},"2:6269:3504":{"crate_id":2,"path":["core","iter","adapters","map_windows","MapWindows"],"kind":"struct"},"17:12111:6689":{"crate_id":17,"path":["object","elf","Rel64"],"kind":"struct"},"1:7719:10201":{"crate_id":1,"path":["std","backtrace","RawFrame"],"kind":"enum"},"6:6012:8498":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","timex"],"kind":"struct"},"17:14056:7174":{"crate_id":17,"path":["object","pe","ImageResourceDirectory"],"kind":"struct"},"1:7846:9190":{"crate_id":1,"path":["std","fs","FileTimes"],"kind":"struct"},"20:900:1979":{"crate_id":20,"path":["proc_macro2","Group"],"kind":"struct"},"6:4595:8155":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_ff_upload"],"kind":"struct"},"2:41922:88":{"crate_id":2,"path":["core","sync","atomic","AtomicI8"],"kind":"struct"},"24:4476:2324":{"crate_id":24,"path":["syn","token","Paren"],"kind":"struct"},"17:13973:7150":{"crate_id":17,"path":["object","pe","ImageThunkData64"],"kind":"struct"},"5:7504:9588":{"crate_id":5,"path":["alloc","string","FromUtf8Error"],"kind":"struct"},"23:504:4262":{"crate_id":23,"path":["quote","__private","IdentFragmentAdapter"],"kind":"struct"},"2:10734:9675":{"crate_id":2,"path":["core","slice","iter","RSplitN"],"kind":"struct"},"16:6844:7473":{"crate_id":16,"path":["gimli","read","line","FileEntry"],"kind":"struct"},"24:4938:2014":{"crate_id":24,"path":["syn","expr","Member"],"kind":"enum"},"11:324:9560":{"crate_id":11,"path":["hashbrown","raw","RawIter"],"kind":"struct"},"5:6984:6182":{"crate_id":5,"path":["alloc","vec","dedup_by","FillGapOnDrop"],"kind":"struct"},"1:9012:10140":{"crate_id":1,"path":["std","sync","mpmc","list","ListToken"],"kind":"struct"},"16:6687:9502":{"crate_id":16,"path":["gimli","read","line","LineInstructions"],"kind":"struct"},"24:880:35892":{"crate_id":24,"path":["syn","generics","LifetimesMut"],"kind":"struct"},"17:11872:6639":{"crate_id":17,"path":["object","archive","AixMemberOffset"],"kind":"struct"},"16:6017:22507":{"crate_id":16,"path":["gimli","read","cfi","CfaRule"],"kind":"enum"},"24:1748:10150":{"crate_id":24,"path":["syn","print","TokensOrDefault"],"kind":"struct"},"16:5419:6495":{"crate_id":16,"path":["gimli","endianity","BigEndian"],"kind":"struct"},"1:8002:10317":{"crate_id":1,"path":["std","io","error","ErrorKind"],"kind":"enum"},"16:7523:9539":{"crate_id":16,"path":["gimli","read","pubtypes","PubTypesEntry"],"kind":"struct"},"2:47507:9163":{"crate_id":2,"path":["core","core_arch","simd","i16x32"],"kind":"struct"},"21:478:6131":{"crate_id":21,"path":["proc_macro","bridge","server","RunningSameThreadGuard"],"kind":"struct"},"24:2745:3664":{"crate_id":24,"path":["syn","token","Do"],"kind":"struct"},"5:4076:3419":{"crate_id":5,"path":["alloc","collections","vec_deque","iter_mut","IterMut"],"kind":"struct"},"6:4556:8134":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_condition_effect"],"kind":"struct"},"1:2906:6213":{"crate_id":1,"path":["std","io","error","repr_bitpacked","Repr"],"kind":"struct"},"2:10437:3415":{"crate_id":2,"path":["core","slice","iter","Iter"],"kind":"struct"},"2:43442:15627":{"crate_id":2,"path":["core","slice","iter","ChunksMut"],"kind":"struct"},"2:40674:3524":{"crate_id":2,"path":["core","iter","adapters","take_while","TakeWhile"],"kind":"struct"},"2:11745:10041":{"crate_id":2,"path":["core","slice","GetManyMutError"],"kind":"struct"},"1:10330:31276":{"crate_id":1,"path":["std","sys","unix","process","process_common","Argv"],"kind":"struct"},"1:12019:408":{"crate_id":1,"path":["std","bool"],"kind":"primitive"},"5:4004:4773":{"crate_id":5,"path":["alloc","collections","vec_deque","drain","Drain"],"kind":"struct"},"1:9095:247":{"crate_id":1,"path":["std","sync","rwlock","RwLockWriteGuard"],"kind":"struct"},"2:42781:76":{"crate_id":2,"path":["core","fmt","Arguments"],"kind":"struct"},"13:226:7710":{"crate_id":13,"path":["std_detect","detect","cache","Initializer"],"kind":"struct"},"2:2799:256":{"crate_id":2,"path":["core","marker","StructuralEq"],"kind":"trait"},"17:13202:6910":{"crate_id":17,"path":["object","macho","SourceVersionCommand"],"kind":"struct"},"6:4401:8053":{"crate_id":6,"path":["libc","unix","linux_like","linux","signalfd_siginfo"],"kind":"struct"},"16:5574:7363":{"crate_id":16,"path":["gimli","read","addr","DebugAddr"],"kind":"struct"},"6:6889:8721":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","mcontext_t"],"kind":"struct"},"2:22458:10342":{"crate_id":2,"path":["core","num","error","IntErrorKind"],"kind":"enum"},"2:2270:102":{"crate_id":2,"path":["core","borrow","BorrowMut"],"kind":"trait"},"2:9635:3564":{"crate_id":2,"path":["core","fmt","LowerHex"],"kind":"trait"},"24:154:1985":{"crate_id":24,"path":["syn","Token"],"kind":"macro"},"24:847:6343":{"crate_id":24,"path":["syn","ext","private","PeekFn"],"kind":"struct"},"2:4290:233":{"crate_id":2,"path":["core","cell","RefCell"],"kind":"struct"},"21:2771:1991":{"crate_id":21,"path":["proc_macro","Ident"],"kind":"struct"},"2:12219:15641":{"crate_id":2,"path":["core","str","pattern","ReverseSearcher"],"kind":"trait"},"10:36:7717":{"crate_id":10,"path":["adler","algo","U32X4"],"kind":"struct"},"16:2472:7343":{"crate_id":16,"path":["gimli","common","DebugInfoOffset"],"kind":"struct"},"17:14126:7191":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation64"],"kind":"struct"},"5:4166:6162":{"crate_id":5,"path":["alloc","collections","vec_deque","into_iter","try_fold","Guard"],"kind":"struct"},"2:9637:3565":{"crate_id":2,"path":["core","fmt","UpperHex"],"kind":"trait"},"9:426:21491":{"crate_id":9,"path":["miniz_oxide","MZStatus"],"kind":"enum"},"1:6532:10446":{"crate_id":1,"path":["std","sync","poison","TryLockError"],"kind":"enum"},"24:5194:3383":{"crate_id":24,"path":["syn","mac","MacroDelimiter"],"kind":"enum"},"16:7041:9527":{"crate_id":16,"path":["gimli","read","lookup","DebugLookup"],"kind":"struct"},"2:2641:135":{"crate_id":2,"path":["core","error","Error"],"kind":"trait"},"1:9471:6236":{"crate_id":1,"path":["std","sys","unix","fs","Dir"],"kind":"struct"},"6:6248:8588":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","msqid_ds"],"kind":"struct"},"16:5363:7420":{"crate_id":16,"path":["gimli","constants","DwEhPe"],"kind":"struct"},"1:11526:10340":{"crate_id":1,"path":["std","sys_common","net","UdpSocket"],"kind":"struct"},"2:45885:9079":{"crate_id":2,"path":["core","core_arch","simd","i8x8"],"kind":"struct"},"2:32252:4336":{"crate_id":2,"path":["core","marker","PhantomPinned"],"kind":"struct"},"6:4549:8131":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_ramp_effect"],"kind":"struct"},"24:4882:3358":{"crate_id":24,"path":["syn","expr","ExprParen"],"kind":"struct"},"24:4494:3317":{"crate_id":24,"path":["syn","attr","AttrStyle"],"kind":"enum"},"17:10227:22645":{"crate_id":17,"path":["object","read","elf","segment","ElfSegment"],"kind":"struct"},"17:13055:6883":{"crate_id":17,"path":["object","macho","EncryptionInfoCommand64"],"kind":"struct"},"11:703:10131":{"crate_id":11,"path":["hashbrown","map","IntoKeys"],"kind":"struct"},"1:7655:4567":{"crate_id":1,"path":["std","thread","ThreadId"],"kind":"struct"},"6:4776:8201":{"crate_id":6,"path":["libc","unix","linux_like","linux","genlmsghdr"],"kind":"struct"},"24:4223:3720":{"crate_id":24,"path":["syn","token","PercentEq"],"kind":"struct"},"6:6700:8630":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","siginfo_t"],"kind":"struct"},"24:1141:5266":{"crate_id":24,"path":["syn","lit","LitFloatRepr"],"kind":"struct"},"2:40874:9646":{"crate_id":2,"path":["core","iter","sources","from_coroutine","FromCoroutine"],"kind":"struct"},"16:4921:7412":{"crate_id":16,"path":["gimli","constants","DwIdx"],"kind":"struct"},"1:3389:6162":{"crate_id":1,"path":["std","io","Guard"],"kind":"struct"},"2:2937:3729":{"crate_id":2,"path":["core","ops","bit","Shr"],"kind":"trait"},"1:8128:3476":{"crate_id":1,"path":["std","io","util","Empty"],"kind":"struct"},"5:2964:8796":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Immut"],"kind":"struct"},"16:6968:22514":{"crate_id":16,"path":["gimli","read","loclists","RawLocListEntry"],"kind":"enum"},"1:640:10196":{"crate_id":1,"path":["std","backtrace","BacktraceSymbol"],"kind":"struct"},"5:7390:3470":{"crate_id":5,"path":["alloc","collections","TryReserveErrorKind"],"kind":"enum"},"6:5152:8388":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_can"],"kind":"struct"},"1:7741:10044":{"crate_id":1,"path":["std","env","JoinPathsError"],"kind":"struct"},"6:4977:8303":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_rcvinfo"],"kind":"struct"},"24:2524:3736":{"crate_id":24,"path":["syn","token","Underscore"],"kind":"struct"},"24:4989:2541":{"crate_id":24,"path":["syn","generics","GenericParam"],"kind":"enum"},"24:1070:2068":{"crate_id":24,"path":["syn","lifetime","Lifetime"],"kind":"struct"},"2:2951:6356":{"crate_id":2,"path":["core","ops","bit","BitXorAssign"],"kind":"trait"},"1:3161:32029":{"crate_id":1,"path":["std","io","stdio","StderrRaw"],"kind":"struct"},"5:824:6148":{"crate_id":5,"path":["alloc","collections","binary_heap","RebuildOnDrop"],"kind":"struct"},"2:7088:3473":{"crate_id":2,"path":["core","iter","range","Step"],"kind":"trait"},"24:2592:3660":{"crate_id":24,"path":["syn","token","Auto"],"kind":"struct"},"5:3802:4771":{"crate_id":5,"path":["alloc","collections","linked_list","ExtractIf"],"kind":"struct"},"11:868:10209":{"crate_id":11,"path":["hashbrown","map","RawEntryBuilder"],"kind":"struct"},"1:6183:10141":{"crate_id":1,"path":["std","sync","mpmc","zero","ZeroToken"],"kind":"struct"},"1:10804:126":{"crate_id":1,"path":["std","sys","unix","fs","DirBuilder"],"kind":"struct"},"21:2379:2676":{"crate_id":21,"path":["proc_macro","bridge","Literal"],"kind":"struct"},"2:45854:9078":{"crate_id":2,"path":["core","core_arch","simd","u64x1"],"kind":"struct"},"6:1703:7998":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_un"],"kind":"struct"},"16:8195:9553":{"crate_id":16,"path":["gimli","read","unit","DebugTypesUnitHeadersIter"],"kind":"struct"},"1:3983:10348":{"crate_id":1,"path":["std","os","unix","fs","MetadataExt"],"kind":"trait"},"1:11970:9801":{"crate_id":1,"path":["std","backtrace_rs","symbolize","gimli","parse_running_mmaps","MapsEntry"],"kind":"struct"},"6:6222:8573":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","sigset_t"],"kind":"struct"},"21:989:264":{"crate_id":21,"path":["proc_macro","bridge","client","TokenStream"],"kind":"struct"},"24:4804:3340":{"crate_id":24,"path":["syn","expr","ExprBlock"],"kind":"struct"},"24:5480:3398":{"crate_id":24,"path":["syn","ty","TypeMacro"],"kind":"struct"},"6:4932:8276":{"crate_id":6,"path":["libc","unix","linux_like","linux","in6_ifreq"],"kind":"struct"},"1:11042:6240":{"crate_id":1,"path":["std","sys","unix","process","process_inner","posix_spawn","PosixSpawnattr"],"kind":"struct"},"2:10679:15633":{"crate_id":2,"path":["core","slice","iter","RSplitMut"],"kind":"struct"},"18:755:9368":{"crate_id":18,"path":["memchr","memmem","SearcherRev"],"kind":"struct"},"24:3085:3680":{"crate_id":24,"path":["syn","token","Pub"],"kind":"struct"},"1:6455:6226":{"crate_id":1,"path":["std","sync","once_lock","OnceLock"],"kind":"struct"},"24:3102:3576":{"crate_id":24,"path":["syn","token","Ref"],"kind":"struct"},"17:3232:22697":{"crate_id":17,"path":["object","read","macho","section","MachOSectionIterator"],"kind":"struct"},"2:22740:197":{"crate_id":2,"path":["core","num","nonzero","NonZeroU16"],"kind":"struct"},"5:1104:34198":{"crate_id":5,"path":["alloc","collections","btree","append","MergeIter"],"kind":"struct"},"1:10794:137":{"crate_id":1,"path":["std","sys","unix","fs","FileType"],"kind":"struct"},"16:6352:9479":{"crate_id":16,"path":["gimli","read","abbrev","Abbreviations"],"kind":"struct"},"1:7997:10142":{"crate_id":1,"path":["std","io","error","Custom"],"kind":"struct"},"1:8882:9258":{"crate_id":1,"path":["std","sync","mpsc","RecvError"],"kind":"struct"},"1:2193:136":{"crate_id":1,"path":["std","fs","File"],"kind":"struct"},"17:9896:22607":{"crate_id":17,"path":["object","read","archive","MemberHeader"],"kind":"enum"},"11:1525:21570":{"crate_id":11,"path":["hashbrown","rustc_entry","RustcEntry"],"kind":"enum"},"24:1600:3537":{"crate_id":24,"path":["syn","parse","Parser"],"kind":"trait"},"2:2553:163":{"crate_id":2,"path":["core","convert","Into"],"kind":"trait"},"2:9840:153":{"crate_id":2,"path":["core","hash","Hash"],"kind":"trait"},"2:44389:9717":{"crate_id":2,"path":["core","str","IsNotEmpty"],"kind":"struct"},"24:1622:2066":{"crate_id":24,"path":["syn","parse_quote"],"kind":"macro"},"16:3600:7389":{"crate_id":16,"path":["gimli","arch","X86"],"kind":"struct"},"2:21583:10286":{"crate_id":2,"path":["core","core_simd","masks","sealed","Sealed"],"kind":"trait"},"14:221:7663":{"crate_id":14,"path":["rustc_demangle","SizeLimitExhausted"],"kind":"struct"},"1:2655:10316":{"crate_id":1,"path":["std","io","buffered","linewriter","LineWriter"],"kind":"struct"},"24:1505:3540":{"crate_id":24,"path":["syn","parse","StepCursor"],"kind":"struct"},"2:9286:10134":{"crate_id":2,"path":["core","fmt","builders","PadAdapterState"],"kind":"struct"},"1:7014:6230":{"crate_id":1,"path":["std","sys_common","lazy_box","LazyBox"],"kind":"struct"},"1:12020:1036":{"crate_id":1,"path":["std","never"],"kind":"primitive"},"11:2494:3469":{"crate_id":11,"path":["hashbrown","TryReserveError"],"kind":"enum"},"2:4651:15677":{"crate_id":2,"path":["core","char","REPLACEMENT_CHARACTER"],"kind":"constant"},"17:9445:22586":{"crate_id":17,"path":["object","read","any","SegmentIterator"],"kind":"struct"},"2:1681:1192":{"crate_id":2,"path":["core","ptr"],"kind":"module"},"17:1075:22616":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbolIterator"],"kind":"struct"},"17:12267:6728":{"crate_id":17,"path":["object","elf","NoteHeader32"],"kind":"struct"},"24:2626:3662":{"crate_id":24,"path":["syn","token","Become"],"kind":"struct"},"1:7897:9730":{"crate_id":1,"path":["std","hash","random","DefaultHasher"],"kind":"struct"},"17:11062:22763":{"crate_id":17,"path":["object","read","pe","file","PeComdatIterator"],"kind":"struct"},"21:648:3599":{"crate_id":21,"path":["proc_macro","diagnostic","MultiSpan"],"kind":"trait"},"21:2750:2381":{"crate_id":21,"path":["proc_macro","Punct"],"kind":"struct"},"17:13723:7092":{"crate_id":17,"path":["object","pe","AnonObjectHeaderV2"],"kind":"struct"},"1:1538:3414":{"crate_id":1,"path":["std","collections","hash","set","IntoIter"],"kind":"struct"},"24:4553:2008":{"crate_id":24,"path":["syn","data","Field"],"kind":"struct"},"17:10240:6513":{"crate_id":17,"path":["object","read","elf","section","SectionTable"],"kind":"struct"},"17:12671:6539":{"crate_id":17,"path":["object","macho","Dylib"],"kind":"struct"},"5:3570:183":{"crate_id":5,"path":["alloc","collections","linked_list","LinkedList"],"kind":"struct"},"5:784:6145":{"crate_id":5,"path":["alloc","collections","binary_heap","PeekMut"],"kind":"struct"},"17:10520:9377":{"crate_id":17,"path":["object","read","elf","version","VerdauxIterator"],"kind":"struct"},"17:12184:6703":{"crate_id":17,"path":["object","elf","Dyn64"],"kind":"struct"},"6:123:16094":{"crate_id":6,"path":["libc","unix","fpos_t"],"kind":"enum"},"21:2636:3433":{"crate_id":21,"path":["proc_macro","LexError"],"kind":"struct"},"20:676:3550":{"crate_id":20,"path":["proc_macro2","parse","Cursor"],"kind":"struct"},"2:22334:8810":{"crate_id":2,"path":["core","num","diy_float","Fp"],"kind":"struct"},"2:9629:127":{"crate_id":2,"path":["core","fmt","Display"],"kind":"trait"},"16:6189:9477":{"crate_id":16,"path":["gimli","read","cfi","PointerEncodingParameters"],"kind":"struct"},"17:11991:6668":{"crate_id":17,"path":["object","elf","CompressionHeader32"],"kind":"struct"},"2:41608:9654":{"crate_id":2,"path":["core","net","parser","AddrParseError"],"kind":"struct"},"1:12044:1705":{"crate_id":1,"path":["std","usize"],"kind":"primitive"},"1:533:4559":{"crate_id":1,"path":["std","thread","Packet"],"kind":"struct"},"17:9137:6497":{"crate_id":17,"path":["object","endian","U32Bytes"],"kind":"struct"},"17:12543:6789":{"crate_id":17,"path":["object","macho","LcStr"],"kind":"struct"},"17:9003:22585":{"crate_id":17,"path":["object","common","SymbolFlags"],"kind":"enum"},"1:4220:10374":{"crate_id":1,"path":["std","os","unix","net","datagram","UnixDatagram"],"kind":"struct"},"2:43196:9662":{"crate_id":2,"path":["core","slice","ascii","EscapeByte"],"kind":"struct"},"16:7768:7369":{"crate_id":16,"path":["gimli","read","unit","DebugInfo"],"kind":"struct"},"1:5814:6216":{"crate_id":1,"path":["std","sync","lazy_lock","LazyLock"],"kind":"struct"},"1:12021:457":{"crate_id":1,"path":["std","char"],"kind":"primitive"},"2:21480:8802":{"crate_id":2,"path":["core","core_simd","masks","mask_impl","Mask"],"kind":"struct"},"11:1562:21572":{"crate_id":11,"path":["hashbrown","rustc_entry","RustcVacantEntry"],"kind":"struct"},"11:2487:7715":{"crate_id":11,"path":["hashbrown","raw","TableLayout"],"kind":"struct"},"6:6079:8532":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","Elf32_Chdr"],"kind":"struct"},"11:2165:9567":{"crate_id":11,"path":["hashbrown","table","HashTable"],"kind":"struct"},"16:7102:22516":{"crate_id":16,"path":["gimli","read","op","DieReference"],"kind":"enum"},"2:30372:70":{"crate_id":2,"path":["core","ptr","alignment","Alignment"],"kind":"struct"},"6:4488:8104":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_id"],"kind":"struct"},"5:5997:16013":{"crate_id":5,"path":["alloc","sync","ArcInner"],"kind":"struct"},"1:7992:27406":{"crate_id":1,"path":["std","io","error","SimpleMessage"],"kind":"struct"},"2:3960:6162":{"crate_id":2,"path":["core","array","Guard"],"kind":"struct"},"16:6513:9488":{"crate_id":16,"path":["gimli","read","index","UnitIndex"],"kind":"struct"},"17:13739:7095":{"crate_id":17,"path":["object","pe","AnonObjectHeaderBigobj"],"kind":"struct"},"11:423:35450":{"crate_id":11,"path":["hashbrown","raw","RawIterHash"],"kind":"struct"},"2:7690:179":{"crate_id":2,"path":["core","iter","traits","iterator","Iterator"],"kind":"trait"},"17:14324:7261":{"crate_id":17,"path":["object","pe","ImageAlpha64RuntimeFunctionEntry"],"kind":"struct"},"17:11886:6640":{"crate_id":17,"path":["object","elf","FileHeader32"],"kind":"struct"},"6:507:7812":{"crate_id":6,"path":["libc","unix","rusage"],"kind":"struct"},"6:4529:8120":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_trigger"],"kind":"struct"},"6:1496:7871":{"crate_id":6,"path":["libc","unix","linux_like","in_addr"],"kind":"struct"},"5:3737:10213":{"crate_id":5,"path":["alloc","collections","linked_list","CursorMut"],"kind":"struct"},"2:10279:10286":{"crate_id":2,"path":["core","slice","index","private_slice_index","Sealed"],"kind":"trait"},"2:2943:6357":{"crate_id":2,"path":["core","ops","bit","BitAndAssign"],"kind":"trait"},"24:3793:3691":{"crate_id":24,"path":["syn","token","And"],"kind":"struct"},"17:12598:6798":{"crate_id":17,"path":["object","macho","Section32"],"kind":"struct"},"6:4523:8118":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_replay"],"kind":"struct"},"17:10750:6532":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandIterator"],"kind":"struct"},"16:2574:7347":{"crate_id":16,"path":["gimli","common","DebugLocListsBase"],"kind":"struct"},"14:187:21585":{"crate_id":14,"path":["rustc_demangle","SizeLimitedFmtAdapter"],"kind":"struct"},"2:47819:9167":{"crate_id":2,"path":["core","core_arch","simd","f32x16"],"kind":"struct"},"17:13101:6890":{"crate_id":17,"path":["object","macho","BuildToolVersion"],"kind":"struct"},"6:4814:8218":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_vm"],"kind":"struct"},"16:6893:7479":{"crate_id":16,"path":["gimli","read","lists","ListsHeader"],"kind":"struct"},"11:829:10206":{"crate_id":11,"path":["hashbrown","map","RawEntryMut"],"kind":"enum"},"2:32140:2147":{"crate_id":2,"path":["core","error","private","Internal"],"kind":"struct"},"24:4235:3721":{"crate_id":24,"path":["syn","token","Plus"],"kind":"struct"},"1:7631:4576":{"crate_id":1,"path":["std","thread","local","AccessError"],"kind":"struct"},"1:3194:10321":{"crate_id":1,"path":["std","io","stdio","Stdin"],"kind":"struct"},"2:40312:3498":{"crate_id":2,"path":["core","iter","adapters","array_chunks","ArrayChunks"],"kind":"struct"},"1:11371:9754":{"crate_id":1,"path":["std","sys_common","wtf8","Wtf8CodePoints"],"kind":"struct"},"20:904:3435":{"crate_id":20,"path":["proc_macro2","Delimiter"],"kind":"enum"},"5:1013:6142":{"crate_id":5,"path":["alloc","collections","binary_heap","drop","DropGuard"],"kind":"struct"},"9:177:10122":{"crate_id":9,"path":["miniz_oxide","inflate","stream","InflateState"],"kind":"struct"},"5:2972:26658":{"crate_id":5,"path":["alloc","collections","btree","node","marker","ValMut"],"kind":"struct"},"17:10397:22687":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdatSectionIterator"],"kind":"struct"},"16:7462:7527":{"crate_id":16,"path":["gimli","read","op","OperationIter"],"kind":"struct"},"1:2363:10273":{"crate_id":1,"path":["std","fs","canonicalize"],"kind":"function"},"2:45660:9070":{"crate_id":2,"path":["core","core_arch","simd","i8x2"],"kind":"struct"},"17:10383:22640":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdat"],"kind":"struct"},"1:8467:9248":{"crate_id":1,"path":["std","path","PrefixComponent"],"kind":"struct"},"11:122:5982":{"crate_id":11,"path":["hashbrown","raw","RawTable"],"kind":"struct"},"17:12452:6774":{"crate_id":17,"path":["object","macho","DyldSubCacheInfo"],"kind":"struct"},"18:707:9361":{"crate_id":18,"path":["memchr","memmem","Searcher"],"kind":"struct"},"6:6107:8545":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_entry"],"kind":"struct"},"1:903:4771":{"crate_id":1,"path":["std","collections","hash","map","ExtractIf"],"kind":"struct"},"24:4910:3364":{"crate_id":24,"path":["syn","expr","ExprTry"],"kind":"struct"},"21:2592:3597":{"crate_id":21,"path":["proc_macro","diagnostic","Diagnostic"],"kind":"struct"},"16:6960:22513":{"crate_id":16,"path":["gimli","read","loclists","RawLocListIter"],"kind":"struct"},"24:4922:3367":{"crate_id":24,"path":["syn","expr","ExprUnary"],"kind":"struct"},"11:1882:2028":{"crate_id":11,"path":["hashbrown","set","Union"],"kind":"struct"},"2:3256:266":{"crate_id":2,"path":["core","ops","try_trait","Try"],"kind":"trait"},"6:6764:8658":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statfs64"],"kind":"struct"},"2:39385:228":{"crate_id":2,"path":["core","ops","range","RangeToInclusive"],"kind":"struct"},"2:46085:9092":{"crate_id":2,"path":["core","core_arch","simd","u16x8"],"kind":"struct"},"1:7745:2147":{"crate_id":1,"path":["std","error","private","Internal"],"kind":"struct"},"21:2725:1979":{"crate_id":21,"path":["proc_macro","Group"],"kind":"struct"},"24:2242:6345":{"crate_id":24,"path":["syn","thread","ThreadBound"],"kind":"struct"},"17:13710:7087":{"crate_id":17,"path":["object","pe","AnonObjectHeader"],"kind":"struct"},"2:2682:10249":{"crate_id":2,"path":["core","error","Request"],"kind":"struct"},"18:727:6399":{"crate_id":18,"path":["memchr","memmem","SearcherConfig"],"kind":"struct"},"16:2548:7346":{"crate_id":16,"path":["gimli","common","LocationListsOffset"],"kind":"struct"},"1:4148:10371":{"crate_id":1,"path":["std","os","unix","net","ancillary","ScmCredentials"],"kind":"struct"},"2:39341:227":{"crate_id":2,"path":["core","ops","range","RangeTo"],"kind":"struct"},"24:3984:132":{"crate_id":24,"path":["syn","token","Eq"],"kind":"struct"},"6:5992:8482":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","rtentry"],"kind":"struct"},"2:6973:3508":{"crate_id":2,"path":["core","iter","adapters","zip","TrustedRandomAccessNoCoerce"],"kind":"trait"},"1:12032:699":{"crate_id":1,"path":["std","f64"],"kind":"primitive"},"24:3851:3695":{"crate_id":24,"path":["syn","token","Caret"],"kind":"struct"},"16:8181:7383":{"crate_id":16,"path":["gimli","read","unit","DebugTypes"],"kind":"struct"},"6:1913:17442":{"crate_id":6,"path":["libc","unix","linux_like","linux","fpos64_t"],"kind":"enum"},"1:7886:126":{"crate_id":1,"path":["std","fs","DirBuilder"],"kind":"struct"},"2:2373:206":{"crate_id":2,"path":["core","cmp","Ord"],"kind":"trait"},"6:4506:8112":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_keymap_entry"],"kind":"struct"},"24:3391:3690":{"crate_id":24,"path":["syn","token","While"],"kind":"struct"},"17:10949:22696":{"crate_id":17,"path":["object","read","macho","section","MachOSection"],"kind":"struct"},"1:5489:10426":{"crate_id":1,"path":["std","process","Stdio"],"kind":"struct"},"16:7284:3985":{"crate_id":16,"path":["gimli","read","op","Location"],"kind":"enum"},"17:11389:22593":{"crate_id":17,"path":["object","read","traits","NoDynamicRelocationIterator"],"kind":"struct"},"2:42676:9044":{"crate_id":2,"path":["core","fmt","rt","Placeholder"],"kind":"struct"},"1:5404:10424":{"crate_id":1,"path":["std","process","ChildStdout"],"kind":"struct"},"2:11247:15629":{"crate_id":2,"path":["core","slice","iter","GroupBy"],"kind":"struct"},"17:14068:7177":{"crate_id":17,"path":["object","pe","ImageResourceDirectoryEntry"],"kind":"struct"},"1:8394:9245":{"crate_id":1,"path":["std","path","Prefix"],"kind":"enum"},"2:44224:15655":{"crate_id":2,"path":["core","str","pattern","StrSearcherImpl"],"kind":"enum"},"1:3234:10323":{"crate_id":1,"path":["std","io","stdio","Stdout"],"kind":"struct"},"17:14269:7242":{"crate_id":17,"path":["object","pe","ImageHotPatchInfo"],"kind":"struct"},"1:10465:6237":{"crate_id":1,"path":["std","sys","unix","stack_overflow","Handler"],"kind":"struct"},"16:149:6132":{"crate_id":16,"path":["gimli","read","util","ArrayVec"],"kind":"struct"},"6:119:16093":{"crate_id":6,"path":["libc","unix","FILE"],"kind":"enum"},"17:10698:22711":{"crate_id":17,"path":["object","read","macho","file","MachOFile"],"kind":"struct"},"17:10410:22659":{"crate_id":17,"path":["object","read","elf","note","NoteIterator"],"kind":"struct"},"6:7343:8753":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","not_x32","statvfs"],"kind":"struct"},"16:2321:7330":{"crate_id":16,"path":["gimli","common","Encoding"],"kind":"struct"},"11:731:10132":{"crate_id":11,"path":["hashbrown","map","IntoValues"],"kind":"struct"},"5:0:320":{"crate_id":5,"path":["alloc"],"kind":"module"},"17:13906:7134":{"crate_id":17,"path":["object","pe","ImageLinenumber"],"kind":"struct"},"2:9883:10291":{"crate_id":2,"path":["core","hash","BuildHasher"],"kind":"trait"},"1:8265:9731":{"crate_id":1,"path":["std","os","unix","net","addr","SocketAddr"],"kind":"struct"},"2:43590:9059":{"crate_id":2,"path":["core","str","error","Utf8Error"],"kind":"struct"},"23:281:2068":{"crate_id":23,"path":["quote","__private","push_lifetime_spanned","Lifetime"],"kind":"struct"},"2:10289:251":{"crate_id":2,"path":["core","slice","index","SliceIndex"],"kind":"trait"},"1:9039:27109":{"crate_id":1,"path":["std","sync","mpmc","select","Selected"],"kind":"enum"},"5:678:262":{"crate_id":5,"path":["alloc","borrow","ToOwned"],"kind":"trait"},"1:621:10043":{"crate_id":1,"path":["std","backtrace","Backtrace"],"kind":"struct"},"2:40494:3520":{"crate_id":2,"path":["core","iter","adapters","scan","Scan"],"kind":"struct"},"24:4527:2005":{"crate_id":24,"path":["syn","data","Variant"],"kind":"struct"},"2:40372:3510":{"crate_id":2,"path":["core","iter","adapters","cycle","Cycle"],"kind":"struct"},"2:43433:9600":{"crate_id":2,"path":["core","slice","iter","Chunks"],"kind":"struct"},"2:21207:32349":{"crate_id":2,"path":["core","core_simd","elements","const_ptr","SimdConstPtr","with_addr"],"kind":"foreign_type"},"2:21398:10286":{"crate_id":2,"path":["core","core_simd","elements","sealed","Sealed"],"kind":"trait"},"6:4724:8179":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Shdr"],"kind":"struct"},"17:11111:22741":{"crate_id":17,"path":["object","read","pe","section","PeSegment"],"kind":"struct"},"24:1532:3002":{"crate_id":24,"path":["syn","parse","Unexpected"],"kind":"enum"},"17:11535:9404":{"crate_id":17,"path":["object","read","SymbolMap"],"kind":"struct"},"16:2618:7349":{"crate_id":16,"path":["gimli","common","DebugMacinfoOffset"],"kind":"struct"},"2:7258:3476":{"crate_id":2,"path":["core","iter","sources","empty","Empty"],"kind":"struct"},"24:4791:3337":{"crate_id":24,"path":["syn","expr","ExprAsync"],"kind":"struct"},"14:7:10029":{"crate_id":14,"path":["rustc_demangle","legacy","Demangle"],"kind":"struct"},"17:12876:6853":{"crate_id":17,"path":["object","macho","DylibTableOfContents"],"kind":"struct"},"17:11507:22596":{"crate_id":17,"path":["object","read","SymbolSection"],"kind":"enum"},"17:12778:6824":{"crate_id":17,"path":["object","macho","ThreadCommand"],"kind":"struct"},"24:3068:3679":{"crate_id":24,"path":["syn","token","Priv"],"kind":"struct"},"2:10641:9598":{"crate_id":2,"path":["core","slice","iter","RSplit"],"kind":"struct"},"2:44385:9716":{"crate_id":2,"path":["core","str","IsAsciiWhitespace"],"kind":"struct"},"2:39281:225":{"crate_id":2,"path":["core","ops","range","RangeFull"],"kind":"struct"},"2:21159:10487":{"crate_id":2,"path":["core","core_simd","cast","SimdCast"],"kind":"trait"},"24:4874:3356":{"crate_id":24,"path":["syn","expr","ExprMatch"],"kind":"struct"},"24:4871:3355":{"crate_id":24,"path":["syn","expr","ExprMacro"],"kind":"struct"},"5:1674:6142":{"crate_id":5,"path":["alloc","collections","btree","map","drop","DropGuard"],"kind":"struct"},"2:2805:259":{"crate_id":2,"path":["core","marker","Sync"],"kind":"trait"},"2:43945:9629":{"crate_id":2,"path":["core","str","iter","EscapeDebug"],"kind":"struct"},"2:7543:166":{"crate_id":2,"path":["core","iter","traits","collect","IntoIterator"],"kind":"trait"},"5:3180:9565":{"crate_id":5,"path":["alloc","collections","btree","set","Difference"],"kind":"struct"},"2:2563:269":{"crate_id":2,"path":["core","convert","TryFrom"],"kind":"trait"},"17:12484:6781":{"crate_id":17,"path":["object","macho","FatArch64"],"kind":"struct"},"2:39219:4680":{"crate_id":2,"path":["core","ops","coroutine","CoroutineState"],"kind":"enum"},"17:11710:6581":{"crate_id":17,"path":["object","read","Relocation"],"kind":"struct"},"2:7506:3496":{"crate_id":2,"path":["core","iter","traits","accum","Product"],"kind":"trait"},"2:44401:9063":{"crate_id":2,"path":["core","time","Nanoseconds"],"kind":"struct"},"6:4616:8163":{"crate_id":6,"path":["libc","unix","linux_like","linux","dl_phdr_info"],"kind":"struct"},"20:700:264":{"crate_id":20,"path":["proc_macro2","fallback","TokenStream"],"kind":"struct"},"6:5859:8417":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","statx_timestamp"],"kind":"struct"},"17:11281:6580":{"crate_id":17,"path":["object","read","pe","relocation","RelocationBlockIterator"],"kind":"struct"},"2:44067:9693":{"crate_id":2,"path":["core","str","pattern","MultiCharEqSearcher"],"kind":"struct"},"11:483:154":{"crate_id":11,"path":["hashbrown","map","HashMap"],"kind":"struct"},"11:992:9534":{"crate_id":11,"path":["hashbrown","map","Entry"],"kind":"enum"},"17:9921:22626":{"crate_id":17,"path":["object","read","coff","file","CoffCommon"],"kind":"struct"},"6:6961:8747":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ucontext_t"],"kind":"struct"},"1:11582:9280":{"crate_id":1,"path":["std","alloc","System"],"kind":"struct"},"6:4676:8175":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Sym"],"kind":"struct"},"11:772:9563":{"crate_id":11,"path":["hashbrown","map","Values"],"kind":"struct"},"6:548:7841":{"crate_id":6,"path":["libc","unix","pollfd"],"kind":"struct"},"24:5355:3387":{"crate_id":24,"path":["syn","path","ParenthesizedGenericArguments"],"kind":"struct"},"17:12062:6680":{"crate_id":17,"path":["object","elf","Syminfo32"],"kind":"struct"},"24:5472:3395":{"crate_id":24,"path":["syn","ty","TypeGroup"],"kind":"struct"},"17:14522:7312":{"crate_id":17,"path":["object","pe","ImportObjectHeader"],"kind":"struct"},"2:41821:217":{"crate_id":2,"path":["core","pin","Pin"],"kind":"struct"},"5:3596:3419":{"crate_id":5,"path":["alloc","collections","linked_list","IterMut"],"kind":"struct"},"2:43512:15623":{"crate_id":2,"path":["core","slice","iter","ArrayChunksMut"],"kind":"struct"},"1:12027:1543":{"crate_id":1,"path":["std","str"],"kind":"primitive"},"1:3826:10340":{"crate_id":1,"path":["std","net","udp","UdpSocket"],"kind":"struct"},"6:1697:7997":{"crate_id":6,"path":["libc","unix","linux_like","epoll_event"],"kind":"struct"},"16:3315:7387":{"crate_id":16,"path":["gimli","arch","LoongArch"],"kind":"struct"},"1:12041:1648":{"crate_id":1,"path":["std","u64"],"kind":"primitive"},"1:4480:10378":{"crate_id":1,"path":["std","os","unix","process","ExitStatusExt"],"kind":"trait"},"1:11279:6241":{"crate_id":1,"path":["std","sys_common","once","futex","CompletionGuard"],"kind":"struct"},"17:12765:6823":{"crate_id":17,"path":["object","macho","DylinkerCommand"],"kind":"struct"},"1:8969:113":{"crate_id":1,"path":["std","sync","mpmc","context","Context"],"kind":"struct"},"2:9639:218":{"crate_id":2,"path":["core","fmt","Pointer"],"kind":"trait"},"5:5138:6168":{"crate_id":5,"path":["alloc","rc","Weak"],"kind":"struct"},"17:13838:7114":{"crate_id":17,"path":["object","pe","ImageAuxSymbolFunction"],"kind":"struct"},"1:10527:10323":{"crate_id":1,"path":["std","sys","unix","stdio","Stdout"],"kind":"struct"},"24:2966:2371":{"crate_id":24,"path":["syn","token","Macro"],"kind":"struct"},"24:4584:2252":{"crate_id":24,"path":["syn","derive","DataUnion"],"kind":"struct"},"16:5712:9419":{"crate_id":16,"path":["gimli","read","cfi","BaseAddresses"],"kind":"struct"},"2:3531:4773":{"crate_id":2,"path":["core","array","drain","Drain"],"kind":"struct"},"24:3238:266":{"crate_id":24,"path":["syn","token","Try"],"kind":"struct"},"24:4194:3718":{"crate_id":24,"path":["syn","token","PathSep"],"kind":"struct"},"15:394:21607":{"crate_id":15,"path":["addr2line","DebugFile"],"kind":"enum"},"2:42236:89":{"crate_id":2,"path":["core","sync","atomic","AtomicIsize"],"kind":"struct"},"5:4849:229":{"crate_id":5,"path":["alloc","rc","Rc"],"kind":"struct"},"24:1896:3412":{"crate_id":24,"path":["syn","punctuated","PairsMut"],"kind":"struct"},"2:43646:9595":{"crate_id":2,"path":["core","str","iter","Split"],"kind":"struct"},"1:11167:9063":{"crate_id":1,"path":["std","sys","unix","time","Nanoseconds"],"kind":"struct"},"18:652:6377":{"crate_id":18,"path":["memchr","memmem","x86","sse","Forward"],"kind":"struct"},"16:2406:7340":{"crate_id":16,"path":["gimli","common","DebugAddrBase"],"kind":"struct"},"24:3880:3697":{"crate_id":24,"path":["syn","token","Colon"],"kind":"struct"},"24:557:6336":{"crate_id":24,"path":["syn","error","SpanRange"],"kind":"struct"},"17:10186:9372":{"crate_id":17,"path":["object","read","coff","import","ImportObjectData"],"kind":"struct"},"6:5867:8419":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","aiocb"],"kind":"struct"},"24:5062:2651":{"crate_id":24,"path":["syn","generics","TraitBoundModifier"],"kind":"enum"},"17:9455:35531":{"crate_id":17,"path":["object","read","any","SegmentIteratorInternal"],"kind":"enum"},"2:30444:32234":{"crate_id":2,"path":["core","ptr","alignment","AlignmentEnum32"],"kind":"enum"},"17:8594:22562":{"crate_id":17,"path":["object","common","Architecture"],"kind":"enum"},"1:8911:10451":{"crate_id":1,"path":["std","sync","mpsc","RecvTimeoutError"],"kind":"enum"},"6:1570:7912":{"crate_id":6,"path":["libc","unix","linux_like","fd_set"],"kind":"struct"},"16:8115:9549":{"crate_id":16,"path":["gimli","read","unit","EntriesCursor"],"kind":"struct"},"17:11201:9388":{"crate_id":17,"path":["object","read","pe","export","ExportTable"],"kind":"struct"},"6:5941:8458":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","mallinfo"],"kind":"struct"},"1:10772:9748":{"crate_id":1,"path":["std","sys","unix","fs","FilePermissions"],"kind":"struct"},"17:13792:7108":{"crate_id":17,"path":["object","pe","ImageSymbolBytes"],"kind":"struct"},"5:7262:6153":{"crate_id":5,"path":["alloc","collections","binary_heap","DrainSorted"],"kind":"struct"},"6:4745:8182":{"crate_id":6,"path":["libc","unix","linux_like","linux","mntent"],"kind":"struct"},"1:5960:6222":{"crate_id":1,"path":["std","sync","mpmc","counter","Sender"],"kind":"struct"},"5:207:4689":{"crate_id":5,"path":["alloc","boxed","thin","ThinBox"],"kind":"struct"},"18:624:35539":{"crate_id":18,"path":["memchr","memmem","twoway","SuffixOrdering"],"kind":"enum"},"24:4934:3370":{"crate_id":24,"path":["syn","expr","ExprYield"],"kind":"struct"},"2:44146:9697":{"crate_id":2,"path":["core","str","pattern","CharSliceSearcher"],"kind":"struct"},"2:46821:9125":{"crate_id":2,"path":["core","core_arch","simd","i8x32"],"kind":"struct"},"1:3417:9233":{"crate_id":1,"path":["std","io","Read"],"kind":"trait"},"18:599:6340":{"crate_id":18,"path":["memchr","memmem","twoway","Shift"],"kind":"enum"},"2:1750:4723":{"crate_id":2,"path":["core","ptr","metadata","Pointee"],"kind":"trait"},"2:3053:139":{"crate_id":2,"path":["core","ops","function","FnMut"],"kind":"trait"},"1:5071:27350":{"crate_id":1,"path":["std","path","fmt","DebugHelper"],"kind":"struct"},"24:3931:3700":{"crate_id":24,"path":["syn","token","Dot"],"kind":"struct"},"1:2593:6197":{"crate_id":1,"path":["std","io","buffered","bufwriter","flush_buf","BufGuard"],"kind":"struct"},"6:4764:8194":{"crate_id":6,"path":["libc","unix","linux_like","linux","posix_spawnattr_t"],"kind":"struct"},"6:7604:8770":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_rwlockattr_t"],"kind":"struct"},"24:5374:3389":{"crate_id":24,"path":["syn","restriction","VisRestricted"],"kind":"struct"},"24:4843:3349":{"crate_id":24,"path":["syn","expr","ExprGroup"],"kind":"struct"},"5:6959:6179":{"crate_id":5,"path":["alloc","vec","retain_mut","BackshiftOnDrop"],"kind":"struct"},"1:10823:27226":{"crate_id":1,"path":["std","sys","unix","kernel_copy","FdHandle"],"kind":"enum"},"1:11133:9254":{"crate_id":1,"path":["std","sys","unix","process","process_inner","ExitStatus"],"kind":"struct"},"0:0:1853":{"crate_id":0,"path":["serde_derive"],"kind":"module"},"17:11351:6585":{"crate_id":17,"path":["object","read","pe","resource","ResourceName"],"kind":"struct"},"24:4281:3724":{"crate_id":24,"path":["syn","token","Question"],"kind":"struct"},"1:1562:9566":{"crate_id":1,"path":["std","collections","hash","set","SymmetricDifference"],"kind":"struct"},"24:4001:3704":{"crate_id":24,"path":["syn","token","EqEq"],"kind":"struct"},"9:486:21488":{"crate_id":9,"path":["miniz_oxide","DataFormat"],"kind":"enum"},"17:8848:22580":{"crate_id":17,"path":["object","common","RelocationKind"],"kind":"enum"},"16:2744:7354":{"crate_id":16,"path":["gimli","common","DebugRngListsIndex"],"kind":"struct"},"16:4557:7401":{"crate_id":16,"path":["gimli","constants","DwEnd"],"kind":"struct"},"6:4610:8161":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_abs_setup"],"kind":"struct"},"16:8154:22524":{"crate_id":16,"path":["gimli","read","unit","EntriesTreeNode"],"kind":"struct"},"1:1567:2028":{"crate_id":1,"path":["std","collections","hash","set","Union"],"kind":"struct"},"1:8283:10368":{"crate_id":1,"path":["std","os","unix","net","ancillary","SocketAncillary"],"kind":"struct"},"17:9701:22590":{"crate_id":17,"path":["object","read","any","SymbolIterator"],"kind":"struct"},"2:30550:32241":{"crate_id":2,"path":["core","ptr","alignment","AlignmentEnum64"],"kind":"enum"},"16:3232:7329":{"crate_id":16,"path":["gimli","arch","AArch64"],"kind":"struct"},"24:611:3415":{"crate_id":24,"path":["syn","error","Iter"],"kind":"struct"},"2:12204:15640":{"crate_id":2,"path":["core","str","pattern","Pattern"],"kind":"trait"},"16:6456:9486":{"crate_id":16,"path":["gimli","read","aranges","ArangeEntryIter"],"kind":"struct"},"2:43929:9685":{"crate_id":2,"path":["core","str","iter","SplitAsciiWhitespace"],"kind":"struct"},"24:5307:2354":{"crate_id":24,"path":["syn","path","PathArguments"],"kind":"enum"},"17:10788:22734":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandVariant"],"kind":"enum"},"2:40242:10251":{"crate_id":2,"path":["core","ffi","c_char"],"kind":"type_alias"},"17:11473:6462":{"crate_id":17,"path":["object","read","SectionIndex"],"kind":"struct"},"24:254:10027":{"crate_id":24,"path":["syn","attr","parsing","DisplayAttrStyle"],"kind":"struct"},"1:8857:3414":{"crate_id":1,"path":["std","sync","mpsc","IntoIter"],"kind":"struct"},"16:536:9407":{"crate_id":16,"path":["gimli","read","cfi","RegisterRuleMap"],"kind":"struct"},"11:2334:3419":{"crate_id":11,"path":["hashbrown","table","IterMut"],"kind":"struct"},"2:2862:6348":{"crate_id":2,"path":["core","ops","arith","Sub"],"kind":"trait"},"16:7828:7543":{"crate_id":16,"path":["gimli","read","unit","UnitHeader"],"kind":"struct"},"24:912:35893":{"crate_id":24,"path":["syn","generics","ConstParamsMut"],"kind":"struct"},"5:6827:4779":{"crate_id":5,"path":["alloc","vec","in_place_drop","InPlaceDstBufDrop"],"kind":"struct"},"1:8805:9254":{"crate_id":1,"path":["std","process","ExitStatus"],"kind":"struct"},"2:40034:9623":{"crate_id":2,"path":["core","ascii","EscapeDefault"],"kind":"struct"},"2:21559:10286":{"crate_id":2,"path":["core","core_simd","masks","to_bitmask","sealed","Sealed"],"kind":"trait"},"24:1950:3414":{"crate_id":24,"path":["syn","punctuated","IntoIter"],"kind":"struct"},"1:4953:3977":{"crate_id":1,"path":["std","panic","always_abort"],"kind":"function"},"21:433:6130":{"crate_id":21,"path":["proc_macro","bridge","scoped_cell","replace","PutBackOnDrop"],"kind":"struct"},"2:2185:4709":{"crate_id":2,"path":["core","ptr","from_exposed_addr_mut"],"kind":"function"},"1:4624:8650":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt","st_atime"],"kind":"foreign_type"},"2:45814:9076":{"crate_id":2,"path":["core","core_arch","simd","u16x4"],"kind":"struct"},"6:1718:8005":{"crate_id":6,"path":["libc","unix","linux_like","utsname"],"kind":"struct"},"6:6086:8533":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","seminfo"],"kind":"struct"},"16:5121:7418":{"crate_id":16,"path":["gimli","constants","DwRle"],"kind":"struct"},"6:1528:7884":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_in"],"kind":"struct"},"20:885:2059":{"crate_id":20,"path":["proc_macro2","TokenTree"],"kind":"enum"},"18:590:6384":{"crate_id":18,"path":["memchr","memmem","twoway","TwoWay"],"kind":"struct"},"2:22872:201":{"crate_id":2,"path":["core","num","nonzero","NonZeroUsize"],"kind":"struct"},"24:5482:3399":{"crate_id":24,"path":["syn","ty","TypeNever"],"kind":"struct"},"1:8376:3981":{"crate_id":1,"path":["std","panic","BacktraceStyle"],"kind":"enum"},"6:0:884":{"crate_id":6,"path":["libc"],"kind":"module"},"24:5487:2545":{"crate_id":24,"path":["syn","ty","TypePath"],"kind":"struct"},"1:11505:10338":{"crate_id":1,"path":["std","sys_common","net","TcpListener"],"kind":"struct"},"2:49979:10498":{"crate_id":2,"path":["core","core_simd","swizzle","Which"],"kind":"enum"},"2:41472:10334":{"crate_id":2,"path":["core","net","ip_addr","Ipv6MulticastScope"],"kind":"enum"},"1:5435:111":{"crate_id":1,"path":["std","process","Command"],"kind":"struct"},"17:11586:6609":{"crate_id":17,"path":["object","read","ObjectMapEntry"],"kind":"struct"},"1:12039:1646":{"crate_id":1,"path":["std","u16"],"kind":"primitive"},"2:44682:9724":{"crate_id":2,"path":["core","escape","EscapeIterInner"],"kind":"struct"},"16:7613:22519":{"crate_id":16,"path":["gimli","read","rnglists","RawRngListIter"],"kind":"struct"},"2:11321:4720":{"crate_id":2,"path":["core","slice","raw","from_raw_parts"],"kind":"function"},"17:10903:22699":{"crate_id":17,"path":["object","read","macho","segment","MachOSegmentIterator"],"kind":"struct"},"17:13632:7079":{"crate_id":17,"path":["object","pe","ImageOptionalHeader64"],"kind":"struct"},"2:8670:3988":{"crate_id":2,"path":["core","panic","unwind_safe","RefUnwindSafe"],"kind":"trait"},"16:6792:9516":{"crate_id":16,"path":["gimli","read","line","IncompleteLineProgram"],"kind":"struct"},"6:4893:8255":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlmsghdr"],"kind":"struct"},"24:1773:1984":{"crate_id":24,"path":["syn","punctuated","Punctuated"],"kind":"struct"},"16:7782:9541":{"crate_id":16,"path":["gimli","read","unit","DebugInfoUnitHeadersIter"],"kind":"struct"},"11:0:3179":{"crate_id":11,"path":["hashbrown"],"kind":"module"},"17:9650:6521":{"crate_id":17,"path":["object","read","any","SymbolTable"],"kind":"struct"},"1:10978:9256":{"crate_id":1,"path":["std","sys","unix","process","process_common","ExitCode"],"kind":"struct"},"2:47988:9174":{"crate_id":2,"path":["core","core_arch","x86","__m256i"],"kind":"struct"},"24:5379:3388":{"crate_id":24,"path":["syn","restriction","FieldMutability"],"kind":"enum"},"2:11964:9676":{"crate_id":2,"path":["core","str","iter","MatchIndicesInternal"],"kind":"struct"},"24:5071:2126":{"crate_id":24,"path":["syn","generics","WherePredicate"],"kind":"enum"},"6:4698:8177":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Phdr"],"kind":"struct"},"1:1534:3415":{"crate_id":1,"path":["std","collections","hash","set","Iter"],"kind":"struct"},"1:12043:854":{"crate_id":1,"path":["std","isize"],"kind":"primitive"},"2:5484:6162":{"crate_id":2,"path":["core","iter","adapters","filter","next_chunk","Guard"],"kind":"struct"},"16:7090:9533":{"crate_id":16,"path":["gimli","read","lookup","PubStuffParser"],"kind":"struct"},"6:4364:8025":{"crate_id":6,"path":["libc","unix","linux_like","linux","passwd"],"kind":"struct"},"17:14536:7315":{"crate_id":17,"path":["object","pe","ImageCor20Header"],"kind":"struct"},"2:30350:4636":{"crate_id":2,"path":["core","mem","maybe_uninit","MaybeUninit"],"kind":"union"},"6:489:7804":{"crate_id":6,"path":["libc","unix","timeval"],"kind":"struct"},"17:11358:22769":{"crate_id":17,"path":["object","read","pe","resource","ResourceNameOrId"],"kind":"enum"},"2:2795:3602":{"crate_id":2,"path":["core","marker","Sized"],"kind":"trait"},"17:13174:6906":{"crate_id":17,"path":["object","macho","FvmfileCommand"],"kind":"struct"},"11:1846:3414":{"crate_id":11,"path":["hashbrown","set","IntoIter"],"kind":"struct"},"24:5189:2371":{"crate_id":24,"path":["syn","mac","Macro"],"kind":"struct"},"24:2541:3657":{"crate_id":24,"path":["syn","token","Abstract"],"kind":"struct"},"17:14514:7309":{"crate_id":17,"path":["object","pe","ImageArchitectureEntry"],"kind":"struct"},"6:4955:8287":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_sndrcvinfo"],"kind":"struct"},"1:4156:10372":{"crate_id":1,"path":["std","os","unix","net","ancillary","AncillaryData"],"kind":"enum"},"1:4810:10358":{"crate_id":1,"path":["std","os","fd","owned","AsFd"],"kind":"trait"},"6:6927:8738":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","seccomp_notif_sizes"],"kind":"struct"},"17:13876:7128":{"crate_id":17,"path":["object","pe","ImageAuxSymbolSection"],"kind":"struct"},"1:9085:187":{"crate_id":1,"path":["std","sync","mutex","MutexGuard"],"kind":"struct"},"2:1838:189":{"crate_id":2,"path":["core","ptr","non_null","NonNull"],"kind":"struct"},"2:41644:9039":{"crate_id":2,"path":["core","net","socket_addr","SocketAddrV4"],"kind":"struct"},"2:40121:9623":{"crate_id":2,"path":["core","char","EscapeDefault"],"kind":"struct"},"6:4939:1103":{"crate_id":6,"path":["libc","unix","linux_like","linux","option"],"kind":"struct"},"24:4878:3357":{"crate_id":24,"path":["syn","expr","ExprMethodCall"],"kind":"struct"},"17:11617:6610":{"crate_id":17,"path":["object","read","Import"],"kind":"struct"},"2:9599:142":{"crate_id":2,"path":["core","fmt","Formatter"],"kind":"struct"},"17:14145:7196":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation64V2"],"kind":"struct"},"24:5088:2646":{"crate_id":24,"path":["syn","generics","PredicateType"],"kind":"struct"},"17:11173:22767":{"crate_id":17,"path":["object","read","pe","export","ExportTarget"],"kind":"enum"},"2:2788:249":{"crate_id":2,"path":["core","marker","Send"],"kind":"trait"},"1:7829:5334":{"crate_id":1,"path":["std","fs","Metadata"],"kind":"struct"},"1:3724:10338":{"crate_id":1,"path":["std","net","tcp","TcpListener"],"kind":"struct"},"16:7534:7377":{"crate_id":16,"path":["gimli","read","pubtypes","DebugPubTypes"],"kind":"struct"},"2:32104:7714":{"crate_id":2,"path":["core","convert","Infallible"],"kind":"enum"},"24:4817:3343":{"crate_id":24,"path":["syn","expr","ExprCast"],"kind":"struct"},"16:2933:21643":{"crate_id":16,"path":["gimli","common","UnitSectionOffset"],"kind":"enum"},"24:3153:3682":{"crate_id":24,"path":["syn","token","SelfValue"],"kind":"struct"},"24:550:238":{"crate_id":24,"path":["syn","error","Result"],"kind":"type_alias"},"6:7616:8772":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_barrierattr_t"],"kind":"struct"},"1:3721:10339":{"crate_id":1,"path":["std","net","tcp","TcpStream"],"kind":"struct"},"2:30948:4348":{"crate_id":2,"path":["core","cmp","Reverse"],"kind":"struct"},"2:45752:9074":{"crate_id":2,"path":["core","core_arch","simd","i16x2"],"kind":"struct"},"17:9328:2966":{"crate_id":17,"path":["object","read","util","Bytes"],"kind":"struct"},"2:43900:9682":{"crate_id":2,"path":["core","str","iter","Lines"],"kind":"struct"},"24:5506:3405":{"crate_id":24,"path":["syn","ty","TypeTuple"],"kind":"struct"},"2:2857:3458":{"crate_id":2,"path":["core","ops","arith","Add"],"kind":"trait"},"2:40485:3519":{"crate_id":2,"path":["core","iter","adapters","rev","Rev"],"kind":"struct"},"1:1040:9534":{"crate_id":1,"path":["std","collections","hash","map","Entry"],"kind":"enum"},"18:80:26598":{"crate_id":18,"path":["memchr","memchr","iter","Memchr"],"kind":"struct"},"5:2968:3677":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Mut"],"kind":"struct"},"2:21004:32639":{"crate_id":2,"path":["core","core_simd","swizzle","interleave","Lo"],"kind":"struct"},"24:289:35847":{"crate_id":24,"path":["syn","bigint","BigInt"],"kind":"struct"},"16:7067:9532":{"crate_id":16,"path":["gimli","read","lookup","PubStuffHeader"],"kind":"struct"},"6:4902:8261":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlmsgerr"],"kind":"struct"},"17:13422:6930":{"crate_id":17,"path":["object","pe","ImageDosHeader"],"kind":"struct"},"16:0:3183":{"crate_id":16,"path":["gimli"],"kind":"module"},"1:11302:10431":{"crate_id":1,"path":["std","sys_common","process","CommandEnvs"],"kind":"struct"},"24:2813:3667":{"crate_id":24,"path":["syn","token","Extern"],"kind":"struct"},"6:5009:8323":{"crate_id":6,"path":["libc","unix","linux_like","linux","rlimit64"],"kind":"struct"},"2:2916:6339":{"crate_id":2,"path":["core","ops","bit","BitAnd"],"kind":"trait"},"2:48025:9177":{"crate_id":2,"path":["core","core_arch","x86","__m512i"],"kind":"struct"},"24:4489:3318":{"crate_id":24,"path":["syn","attr","Attribute"],"kind":"struct"},"1:1541:4773":{"crate_id":1,"path":["std","collections","hash","set","Drain"],"kind":"struct"},"18:548:153":{"crate_id":18,"path":["memchr","memmem","rabinkarp","Hash"],"kind":"struct"},"2:39180:15665":{"crate_id":2,"path":["core","ops","control_flow","ControlFlow"],"kind":"enum"},"17:13981:7151":{"crate_id":17,"path":["object","pe","ImageThunkData32"],"kind":"struct"},"24:4834:3347":{"crate_id":24,"path":["syn","expr","ExprField"],"kind":"struct"},"1:357:4574":{"crate_id":1,"path":["std","thread","scoped","Scope"],"kind":"struct"},"20:121:35549":{"crate_id":20,"path":["proc_macro2","rcvec","RcVecBuilder"],"kind":"struct"},"20:924:2381":{"crate_id":20,"path":["proc_macro2","Punct"],"kind":"struct"},"2:23037:190":{"crate_id":2,"path":["core","num","nonzero","NonZeroI128"],"kind":"struct"},"17:9933:22620":{"crate_id":17,"path":["object","read","coff","file","CoffFile"],"kind":"struct"},"2:48040:9178":{"crate_id":2,"path":["core","core_arch","x86","__m512"],"kind":"struct"},"5:4236:3415":{"crate_id":5,"path":["alloc","collections","vec_deque","iter","Iter"],"kind":"struct"},"17:13758:7096":{"crate_id":17,"path":["object","pe","ImageSectionHeader"],"kind":"struct"},"2:7502:3497":{"crate_id":2,"path":["core","iter","traits","accum","Sum"],"kind":"trait"},"17:12911:6864":{"crate_id":17,"path":["object","macho","DylibModule64"],"kind":"struct"},"11:344:35445":{"crate_id":11,"path":["hashbrown","raw","FullBucketsIndices"],"kind":"struct"},"1:1965:208":{"crate_id":1,"path":["std","ffi","os_str","OsStr"],"kind":"struct"},"5:2133:4554":{"crate_id":5,"path":["alloc","collections","btree","mem","replace","PanicGuard"],"kind":"struct"},"17:11137:22739":{"crate_id":17,"path":["object","read","pe","section","PeSection"],"kind":"struct"},"24:3017:3676":{"crate_id":24,"path":["syn","token","Move"],"kind":"struct"},"17:11000:6570":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbolTable"],"kind":"struct"},"2:43462:15626":{"crate_id":2,"path":["core","slice","iter","ChunksExactMut"],"kind":"struct"},"24:5148:3378":{"crate_id":24,"path":["syn","lit","LitByteStr"],"kind":"struct"},"2:44377:9714":{"crate_id":2,"path":["core","str","CharEscapeDefault"],"kind":"struct"},"23:322:2679":{"crate_id":23,"path":["quote","spanned","Spanned"],"kind":"trait"},"6:6114:8546":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_exit"],"kind":"struct"},"6:5123:8379":{"crate_id":6,"path":["libc","unix","linux_like","linux","hwtstamp_config"],"kind":"struct"},"1:10936:7775":{"crate_id":1,"path":["std","sys","unix","os_str","Buf"],"kind":"struct"},"21:2640:3595":{"crate_id":21,"path":["proc_macro","ExpandError"],"kind":"struct"},"6:495:7807":{"crate_id":6,"path":["libc","unix","timespec"],"kind":"struct"},"6:5955:8468":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","mallinfo2"],"kind":"struct"},"5:3144:99":{"crate_id":5,"path":["alloc","collections","btree","set","BTreeSet"],"kind":"struct"},"6:527:7829":{"crate_id":6,"path":["libc","unix","ipv6_mreq"],"kind":"struct"},"2:3022:124":{"crate_id":2,"path":["core","ops","deref","Deref"],"kind":"trait"},"2:40510:3521":{"crate_id":2,"path":["core","iter","adapters","skip","Skip"],"kind":"struct"},"24:2694:114":{"crate_id":24,"path":["syn","token","Continue"],"kind":"struct"},"17:14401:7283":{"crate_id":17,"path":["object","pe","ImageEnclaveImport"],"kind":"struct"},"17:10494:9374":{"crate_id":17,"path":["object","read","elf","version","VersionTable"],"kind":"struct"},"11:1092:21568":{"crate_id":11,"path":["hashbrown","map","OccupiedEntryRef"],"kind":"struct"},"6:6691:8629":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","flock64"],"kind":"struct"},"1:9177:31639":{"crate_id":1,"path":["std","sys","common","thread_local","fast_local","DtorState"],"kind":"enum"},"17:10628:9386":{"crate_id":17,"path":["object","read","elf","attributes","AttributeIndexIterator"],"kind":"struct"},"16:6929:7482":{"crate_id":16,"path":["gimli","read","loclists","LocationLists"],"kind":"struct"},"16:6083:21616":{"crate_id":16,"path":["gimli","read","cfi","CallFrameInstruction"],"kind":"enum"},"17:12473:6778":{"crate_id":17,"path":["object","macho","FatArch32"],"kind":"struct"},"16:6560:6134":{"crate_id":16,"path":["gimli","read","lazy","imp","LazyArc"],"kind":"struct"},"17:9070:6494":{"crate_id":17,"path":["object","endian","LittleEndian"],"kind":"struct"},"2:10762:15634":{"crate_id":2,"path":["core","slice","iter","RSplitNMut"],"kind":"struct"},"24:5289:3385":{"crate_id":24,"path":["syn","op","UnOp"],"kind":"enum"},"2:40410:9640":{"crate_id":2,"path":["core","iter","adapters","flatten","FlattenCompat"],"kind":"struct"},"3:0:482":{"crate_id":3,"path":["compiler_builtins"],"kind":"module"},"6:654:16450":{"crate_id":6,"path":["libc","unix","linux_like","timezone"],"kind":"enum"},"2:42957:9659":{"crate_id":2,"path":["core","hash","sip","SipHasher"],"kind":"struct"},"2:7634:3494":{"crate_id":2,"path":["core","iter","traits","exact_size","ExactSizeIterator"],"kind":"trait"},"2:42732:74":{"crate_id":2,"path":["core","fmt","rt","Argument"],"kind":"struct"},"14:0:3181":{"crate_id":14,"path":["rustc_demangle"],"kind":"module"},"11:2317:3415":{"crate_id":11,"path":["hashbrown","table","Iter"],"kind":"struct"},"21:958:4813":{"crate_id":21,"path":["proc_macro","bridge","client","FreeFunctions"],"kind":"struct"},"2:2337:212":{"crate_id":2,"path":["core","cmp","PartialEq"],"kind":"trait"},"17:12293:6733":{"crate_id":17,"path":["object","elf","HashHeader"],"kind":"struct"},"2:30920:207":{"crate_id":2,"path":["core","cmp","Ordering"],"kind":"enum"},"17:11490:6606":{"crate_id":17,"path":["object","read","SymbolIndex"],"kind":"struct"},"17:12959:6869":{"crate_id":17,"path":["object","macho","TwolevelHint"],"kind":"struct"},"1:12045:1252":{"crate_id":1,"path":["std","reference"],"kind":"primitive"},"24:1615:3549":{"crate_id":24,"path":["syn","parse","Nothing"],"kind":"struct"},"24:2796:2004":{"crate_id":24,"path":["syn","token","Enum"],"kind":"struct"},"1:6972:10052":{"crate_id":1,"path":["std","sys_common","backtrace","_print","DisplayBacktrace"],"kind":"struct"},"17:12373:6740":{"crate_id":17,"path":["object","macho","DyldCacheHeader"],"kind":"struct"},"17:504:22574":{"crate_id":17,"path":["object","read","any","Comdat"],"kind":"struct"},"18:507:6377":{"crate_id":18,"path":["memchr","memmem","genericsimd","Forward"],"kind":"struct"},"24:261:10028":{"crate_id":24,"path":["syn","attr","parsing","DisplayPath"],"kind":"struct"},"2:40382:3511":{"crate_id":2,"path":["core","iter","adapters","enumerate","Enumerate"],"kind":"struct"},"17:9985:22613":{"crate_id":17,"path":["object","read","coff","section","CoffSectionIterator"],"kind":"struct"},"6:5130:8382":{"crate_id":6,"path":["libc","unix","linux_like","linux","dirent64"],"kind":"struct"},"2:21021:32641":{"crate_id":2,"path":["core","core_simd","swizzle","deinterleave","Even"],"kind":"struct"},"2:0:538":{"crate_id":2,"path":["core"],"kind":"module"},"24:4013:3705":{"crate_id":24,"path":["syn","token","FatArrow"],"kind":"struct"},"2:12876:15692":{"crate_id":2,"path":["core","future","poll_fn","PollFn"],"kind":"struct"},"1:11204:9278":{"crate_id":1,"path":["std","sys","unix","time","Timespec"],"kind":"struct"},"2:40534:3506":{"crate_id":2,"path":["core","iter","adapters","step_by","StepBy"],"kind":"struct"},"2:44393:9718":{"crate_id":2,"path":["core","str","BytesIsNotEmpty"],"kind":"struct"},"6:6943:8744":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user_fpregs_struct"],"kind":"struct"},"17:13188:6907":{"crate_id":17,"path":["object","macho","EntryPointCommand"],"kind":"struct"},"14:160:10029":{"crate_id":14,"path":["rustc_demangle","Demangle"],"kind":"struct"},"6:4628:8172":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Ehdr"],"kind":"struct"},"17:10534:9378":{"crate_id":17,"path":["object","read","elf","version","VerneedIterator"],"kind":"struct"},"1:8895:10452":{"crate_id":1,"path":["std","sync","mpsc","TryRecvError"],"kind":"enum"},"2:41455:9032":{"crate_id":2,"path":["core","net","ip_addr","Ipv6Addr"],"kind":"struct"},"2:4079:4678":{"crate_id":2,"path":["core","async_iter","async_iter","AsyncIterator"],"kind":"trait"},"2:22396:32231":{"crate_id":2,"path":["core","num","fmt","Part"],"kind":"enum"},"6:4351:8016":{"crate_id":6,"path":["libc","unix","linux_like","linux","glob_t"],"kind":"struct"},"18:538:6381":{"crate_id":18,"path":["memchr","memmem","rabinkarp","NeedleHash"],"kind":"struct"},"20:788:264":{"crate_id":20,"path":["proc_macro2","imp","TokenStream"],"kind":"enum"},"24:5365:3390":{"crate_id":24,"path":["syn","restriction","Visibility"],"kind":"enum"},"24:5204:3384":{"crate_id":24,"path":["syn","op","BinOp"],"kind":"enum"},"2:10748:15635":{"crate_id":2,"path":["core","slice","iter","SplitNMut"],"kind":"struct"},"6:4922:8270":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_ifru_map"],"kind":"struct"},"2:21813:10496":{"crate_id":2,"path":["core","core_simd","ord","SimdOrd"],"kind":"trait"},"2:21905:8804":{"crate_id":2,"path":["core","core_simd","vector","Simd"],"kind":"struct"},"6:4968:8297":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_sndinfo"],"kind":"struct"},"20:821:1979":{"crate_id":20,"path":["proc_macro2","imp","Group"],"kind":"enum"},"5:2172:9571":{"crate_id":5,"path":["alloc","collections","btree","navigate","LeafRange"],"kind":"struct"},"1:12028:1630":{"crate_id":1,"path":["std","tuple"],"kind":"primitive"},"6:4473:8098":{"crate_id":6,"path":["libc","unix","linux_like","linux","sembuf"],"kind":"struct"},"5:2692:8797":{"crate_id":5,"path":["alloc","collections","btree","node","Handle"],"kind":"struct"},"2:40049:9625":{"crate_id":2,"path":["core","char","convert","ParseCharError"],"kind":"struct"},"2:45706:9072":{"crate_id":2,"path":["core","core_arch","simd","u16x2"],"kind":"struct"},"2:47757:9166":{"crate_id":2,"path":["core","core_arch","simd","u32x16"],"kind":"struct"},"21:1394:2072":{"crate_id":21,"path":["proc_macro","bridge","symbol","Symbol"],"kind":"struct"},"2:40148:9630":{"crate_id":2,"path":["core","char","ToLowercase"],"kind":"struct"},"16:5634:9413":{"crate_id":16,"path":["gimli","read","cfi","ParsedEhFrameHdr"],"kind":"struct"},"16:6361:9480":{"crate_id":16,"path":["gimli","read","abbrev","Abbreviation"],"kind":"struct"},"2:42978:9052":{"crate_id":2,"path":["core","hash","sip","State"],"kind":"struct"},"1:8553:9736":{"crate_id":1,"path":["std","path","StripPrefixError"],"kind":"struct"},"16:5017:7415":{"crate_id":16,"path":["gimli","constants","DwLne"],"kind":"struct"},"17:14083:7181":{"crate_id":17,"path":["object","pe","ImageResourceDirStringU"],"kind":"struct"},"17:14478:7305":{"crate_id":17,"path":["object","pe","ImageSeparateDebugHeader"],"kind":"struct"},"2:2926:6338":{"crate_id":2,"path":["core","ops","bit","BitXor"],"kind":"trait"},"5:6817:4778":{"crate_id":5,"path":["alloc","vec","in_place_drop","InPlaceDrop"],"kind":"struct"},"16:8205:22526":{"crate_id":16,"path":["gimli","read","value","ValueType"],"kind":"enum"},"6:4800:8212":{"crate_id":6,"path":["libc","unix","linux_like","linux","inotify_event"],"kind":"struct"},"16:4585:7402":{"crate_id":16,"path":["gimli","constants","DwAccess"],"kind":"struct"},"21:2755:2057":{"crate_id":21,"path":["proc_macro","Spacing"],"kind":"enum"},"1:4626:8652":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt","st_mtime"],"kind":"foreign_type"},"2:1481:2540":{"crate_id":2,"path":["core","mem"],"kind":"module"},"1:415:185":{"crate_id":1,"path":["std","thread","local","LocalKey"],"kind":"struct"},"1:945:10208":{"crate_id":1,"path":["std","collections","hash","map","RawVacantEntryMut"],"kind":"struct"},"1:4904:10403":{"crate_id":1,"path":["std","os","net","linux_ext","tcp","TcpStreamExt"],"kind":"trait"},"5:7223:4686":{"crate_id":5,"path":["alloc","alloc","Global"],"kind":"struct"},"1:8833:9256":{"crate_id":1,"path":["std","process","ExitCode"],"kind":"struct"},"2:47365:9162":{"crate_id":2,"path":["core","core_arch","simd","u8x64"],"kind":"struct"},"1:7527:10053":{"crate_id":1,"path":["std","backtrace_rs","symbolize","SymbolName"],"kind":"struct"},"11:2394:4771":{"crate_id":11,"path":["hashbrown","table","ExtractIf"],"kind":"struct"},"2:46709:9123":{"crate_id":2,"path":["core","core_arch","simd","u32x8"],"kind":"struct"},"2:42941:9656":{"crate_id":2,"path":["core","hash","sip","SipHasher13"],"kind":"struct"},"24:1727:10149":{"crate_id":24,"path":["syn","path","printing","span","QSelfDelimiters"],"kind":"struct"},"17:10507:9376":{"crate_id":17,"path":["object","read","elf","version","VerdefIterator"],"kind":"struct"},"16:3888:7393":{"crate_id":16,"path":["gimli","constants","DwCfa"],"kind":"struct"},"6:533:7832":{"crate_id":6,"path":["libc","unix","hostent"],"kind":"struct"},"1:8228:10333":{"crate_id":1,"path":["std","net","Shutdown"],"kind":"enum"},"1:3500:10304":{"crate_id":1,"path":["std","io","BufRead"],"kind":"trait"},"17:11381:6589":{"crate_id":17,"path":["object","read","pe","rich","RichHeaderEntry"],"kind":"struct"},"5:5861:4773":{"crate_id":5,"path":["alloc","string","Drain"],"kind":"struct"},"16:7436:7526":{"crate_id":16,"path":["gimli","read","op","Expression"],"kind":"struct"},"17:12945:6867":{"crate_id":17,"path":["object","macho","TwolevelHintsCommand"],"kind":"struct"},"2:2842:4332":{"crate_id":2,"path":["core","marker","Freeze"],"kind":"trait"},"5:7272:34164":{"crate_id":5,"path":["alloc","collections","btree","merge_iter","Peeked"],"kind":"enum"},"2:40524:3522":{"crate_id":2,"path":["core","iter","adapters","skip_while","SkipWhile"],"kind":"struct"},"2:10461:3419":{"crate_id":2,"path":["core","slice","iter","IterMut"],"kind":"struct"},"1:10068:10228":{"crate_id":1,"path":["std","sys","unix","os","SplitPaths"],"kind":"struct"},"1:9017:1985":{"crate_id":1,"path":["std","sync","mpmc","select","Token"],"kind":"struct"},"18:644:6377":{"crate_id":18,"path":["memchr","memmem","x86","avx","nostd","Forward"],"kind":"struct"},"20:708:3596":{"crate_id":20,"path":["proc_macro2","fallback","SourceFile"],"kind":"struct"},"0:965:1851":{"crate_id":0,"path":["serde_derive","Deserialize"],"kind":"proc_derive"},"2:45937:9081":{"crate_id":2,"path":["core","core_arch","simd","i32x2"],"kind":"struct"},"2:48063:9179":{"crate_id":2,"path":["core","core_arch","x86","__m512d"],"kind":"struct"},"2:41802:3986":{"crate_id":2,"path":["core","panic","panic_info","PanicInfo"],"kind":"struct"},"17:11687:22597":{"crate_id":17,"path":["object","read","RelocationTarget"],"kind":"enum"},"16:3797:7391":{"crate_id":16,"path":["gimli","constants","DwSectV2"],"kind":"struct"},"24:4808:3341":{"crate_id":24,"path":["syn","expr","ExprBreak"],"kind":"struct"},"16:2788:7356":{"crate_id":16,"path":["gimli","common","DebugStrOffsetsBase"],"kind":"struct"},"2:2853:4335":{"crate_id":2,"path":["core","marker","FnPtr"],"kind":"trait"},"17:11407:22594":{"crate_id":17,"path":["object","read","FileKind"],"kind":"enum"},"5:7437:32248":{"crate_id":5,"path":["alloc","ffi","c_str","FromBytesWithNulErrorKind"],"kind":"enum"},"5:3206:9566":{"crate_id":5,"path":["alloc","collections","btree","set","SymmetricDifference"],"kind":"struct"},"24:4136:3714":{"crate_id":24,"path":["syn","token","Not"],"kind":"struct"},"16:2380:7339":{"crate_id":16,"path":["gimli","common","DebugAbbrevOffset"],"kind":"struct"},"6:1682:7988":{"crate_id":6,"path":["libc","unix","linux_like","arphdr"],"kind":"struct"},"17:12172:6700":{"crate_id":17,"path":["object","elf","Dyn32"],"kind":"struct"},"16:5384:22502":{"crate_id":16,"path":["gimli","endianity","RunTimeEndian"],"kind":"enum"},"6:1546:7895":{"crate_id":6,"path":["libc","unix","linux_like","addrinfo"],"kind":"struct"},"1:939:10207":{"crate_id":1,"path":["std","collections","hash","map","RawOccupiedEntryMut"],"kind":"struct"},"16:3830:7392":{"crate_id":16,"path":["gimli","constants","DwUt"],"kind":"struct"},"2:21295:10495":{"crate_id":2,"path":["core","core_simd","elements","int","SimdInt"],"kind":"trait"},"2:21209:4708":{"crate_id":2,"path":["core","core_simd","elements","const_ptr","SimdConstPtr","from_exposed_addr"],"kind":"foreign_type"},"16:6944:35468":{"crate_id":16,"path":["gimli","read","loclists","LocListsFormat"],"kind":"enum"},"6:5910:8437":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","msghdr"],"kind":"struct"},"6:5111:8373":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_ifc_ifcu"],"kind":"union"},"2:2848:2017":{"crate_id":2,"path":["core","marker","Tuple"],"kind":"trait"},"2:42966:157":{"crate_id":2,"path":["core","hash","sip","Hasher"],"kind":"struct"},"16:4745:7406":{"crate_id":16,"path":["gimli","constants","DwAddr"],"kind":"struct"},"9:507:7778":{"crate_id":9,"path":["miniz_oxide","StreamResult"],"kind":"struct"},"1:10932:10044":{"crate_id":1,"path":["std","sys","unix","os","JoinPathsError"],"kind":"struct"},"2:45974:9083":{"crate_id":2,"path":["core","core_arch","simd","f32x2"],"kind":"struct"},"2:4294:3567":{"crate_id":2,"path":["core","cell","BorrowError"],"kind":"struct"},"1:6885:6229":{"crate_id":1,"path":["std","sys","common","thread_local","abort_on_dtor_unwind","DtorUnwindGuard"],"kind":"struct"},"24:3221:265":{"crate_id":24,"path":["syn","token","Trait"],"kind":"struct"},"1:7586:6234":{"crate_id":1,"path":["std","backtrace_rs","Bomb"],"kind":"struct"},"11:822:10205":{"crate_id":11,"path":["hashbrown","map","RawEntryBuilderMut"],"kind":"struct"},"2:41501:2058":{"crate_id":2,"path":["core","net","ip_addr","fmt","Span"],"kind":"struct"},"6:4543:8128":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_constant_effect"],"kind":"struct"},"17:2150:22676":{"crate_id":17,"path":["object","read","elf","relocation","ElfRelaIterator"],"kind":"enum"},"2:44627:9066":{"crate_id":2,"path":["core","task","wake","RawWakerVTable"],"kind":"struct"},"1:12003:27234":{"crate_id":1,"path":["std","backtrace_rs","print","PrintFmt"],"kind":"enum"},"2:43200:9663":{"crate_id":2,"path":["core","slice","ascii","EscapeAscii"],"kind":"struct"},"17:13215:6911":{"crate_id":17,"path":["object","macho","DataInCodeEntry"],"kind":"struct"},"1:9138:9739":{"crate_id":1,"path":["std","time","SystemTimeError"],"kind":"struct"},"21:140:4807":{"crate_id":21,"path":["proc_macro","bridge","client","Client"],"kind":"struct"},"5:1444:3414":{"crate_id":5,"path":["alloc","collections","btree","map","IntoIter"],"kind":"struct"},"1:7839:9728":{"crate_id":1,"path":["std","fs","OpenOptions"],"kind":"struct"},"17:10637:9387":{"crate_id":17,"path":["object","read","elf","attributes","AttributeReader"],"kind":"struct"},"17:11367:6586":{"crate_id":17,"path":["object","read","pe","rich","RichHeaderInfo"],"kind":"struct"},"11:2238:9534":{"crate_id":11,"path":["hashbrown","table","Entry"],"kind":"enum"},"2:10606:15636":{"crate_id":2,"path":["core","slice","iter","SplitInclusiveMut"],"kind":"struct"},"17:10292:6521":{"crate_id":17,"path":["object","read","elf","symbol","SymbolTable"],"kind":"struct"},"5:7406:106":{"crate_id":5,"path":["alloc","ffi","c_str","CString"],"kind":"struct"},"2:3056:140":{"crate_id":2,"path":["core","ops","function","FnOnce"],"kind":"trait"},"6:7388:8767":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","align","sem_t"],"kind":"struct"},"2:22342:8811":{"crate_id":2,"path":["core","num","flt2dec","decoder","Decoded"],"kind":"struct"},"2:39266:9621":{"crate_id":2,"path":["core","ops","index_range","IndexRange"],"kind":"struct"},"6:4824:8224":{"crate_id":6,"path":["libc","unix","linux_like","linux","regmatch_t"],"kind":"struct"},"6:5044:8341":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_setup"],"kind":"struct"},"6:4860:8243":{"crate_id":6,"path":["libc","unix","linux_like","linux","j1939_filter"],"kind":"struct"},"16:5905:9438":{"crate_id":16,"path":["gimli","read","cfi","FrameDescriptionEntry"],"kind":"struct"},"2:43696:9671":{"crate_id":2,"path":["core","str","iter","SplitTerminator"],"kind":"struct"},"2:41438:9030":{"crate_id":2,"path":["core","net","ip_addr","Ipv4Addr"],"kind":"struct"},"24:4095:3711":{"crate_id":24,"path":["syn","token","Minus"],"kind":"struct"},"11:2074:10210":{"crate_id":11,"path":["hashbrown","set","OccupiedEntry"],"kind":"struct"},"2:22307:9611":{"crate_id":2,"path":["core","num","dec2flt","ParseFloatError"],"kind":"struct"},"21:2578:3598":{"crate_id":21,"path":["proc_macro","diagnostic","Level"],"kind":"enum"},"2:22446:9616":{"crate_id":2,"path":["core","num","error","ParseIntError"],"kind":"struct"},"17:10278:22643":{"crate_id":17,"path":["object","read","elf","section","ElfSection"],"kind":"struct"},"11:101:9556":{"crate_id":11,"path":["hashbrown","raw","Bucket"],"kind":"struct"},"17:10112:22634":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdatSectionIterator"],"kind":"struct"},"1:12040:1647":{"crate_id":1,"path":["std","u32"],"kind":"primitive"},"2:32144:2755":{"crate_id":2,"path":["core","error","tags","Value"],"kind":"struct"},"2:9631:3556":{"crate_id":2,"path":["core","fmt","Octal"],"kind":"trait"},"6:4440:8079":{"crate_id":6,"path":["libc","unix","linux_like","linux","packet_mreq"],"kind":"struct"},"2:9643:3563":{"crate_id":2,"path":["core","fmt","UpperExp"],"kind":"trait"},"2:43954:9623":{"crate_id":2,"path":["core","str","iter","EscapeDefault"],"kind":"struct"},"2:46585:9106":{"crate_id":2,"path":["core","core_arch","simd","u8x32"],"kind":"struct"},"6:542:7838":{"crate_id":6,"path":["libc","unix","iovec"],"kind":"struct"},"17:11934:1991":{"crate_id":17,"path":["object","elf","Ident"],"kind":"struct"},"1:3925:10343":{"crate_id":1,"path":["std","os","unix","ffi","os_str","OsStrExt"],"kind":"trait"},"2:46261:9097":{"crate_id":2,"path":["core","core_arch","simd","i32x4"],"kind":"struct"},"2:11759:15643":{"crate_id":2,"path":["core","str","converts","from_utf8"],"kind":"function"},"2:4833:33849":{"crate_id":2,"path":["core","ffi","sealed_trait","VaArgSafe"],"kind":"trait"},"17:12123:6690":{"crate_id":17,"path":["object","elf","Rela64"],"kind":"struct"},"24:552:135":{"crate_id":24,"path":["syn","error","Error"],"kind":"struct"},"2:22198:9607":{"crate_id":2,"path":["core","num","bignum","tests","Big8x3"],"kind":"struct"},"17:10440:22689":{"crate_id":17,"path":["object","read","elf","note","GnuProperty"],"kind":"struct"},"17:13693:7086":{"crate_id":17,"path":["object","pe","Guid"],"kind":"struct"},"17:11661:6612":{"crate_id":17,"path":["object","read","CodeView"],"kind":"struct"},"1:9005:27376":{"crate_id":1,"path":["std","sync","mpmc","list","Position"],"kind":"struct"},"24:5359:2542":{"crate_id":24,"path":["syn","path","QSelf"],"kind":"struct"},"2:40897:3481":{"crate_id":2,"path":["core","iter","sources","once_with","OnceWith"],"kind":"struct"},"23:46:3444":{"crate_id":23,"path":["quote","ident_fragment","IdentFragment"],"kind":"trait"},"16:2428:7341":{"crate_id":16,"path":["gimli","common","DebugAddrIndex"],"kind":"struct"},"6:62:16039":{"crate_id":6,"path":["libc","unix","DIR"],"kind":"enum"},"6:6741:8657":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stat64"],"kind":"struct"},"1:2198:4714":{"crate_id":1,"path":["std","fs","read"],"kind":"function"},"16:2339:7332":{"crate_id":16,"path":["gimli","common","LineEncoding"],"kind":"struct"},"2:41888:3414":{"crate_id":2,"path":["core","result","IntoIter"],"kind":"struct"},"1:5420:10425":{"crate_id":1,"path":["std","process","ChildStderr"],"kind":"struct"},"1:5297:127":{"crate_id":1,"path":["std","path","Display"],"kind":"struct"},"21:1819:4794":{"crate_id":21,"path":["proc_macro","bridge","Marked"],"kind":"struct"},"16:7582:7528":{"crate_id":16,"path":["gimli","read","rnglists","RangeLists"],"kind":"struct"},"17:14316:7260":{"crate_id":17,"path":["object","pe","ImageArm64RuntimeFunctionEntry"],"kind":"struct"},"24:4914:3365":{"crate_id":24,"path":["syn","expr","ExprTryBlock"],"kind":"struct"},"16:5995:9408":{"crate_id":16,"path":["gimli","read","cfi","UnwindTableRow"],"kind":"struct"},"24:3000:3675":{"crate_id":24,"path":["syn","token","Mod"],"kind":"struct"},"17:14100:7185":{"crate_id":17,"path":["object","pe","ImageLoadConfigCodeIntegrity"],"kind":"struct"},"6:4686:8176":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Phdr"],"kind":"struct"},"2:44278:9709":{"crate_id":2,"path":["core","str","lossy","Utf8Chunks"],"kind":"struct"},"17:12437:6769":{"crate_id":17,"path":["object","macho","DyldCacheImageInfo"],"kind":"struct"},"7:0:1695":{"crate_id":7,"path":["unwind"],"kind":"module"},"24:5475:3396":{"crate_id":24,"path":["syn","ty","TypeImplTrait"],"kind":"struct"},"2:8002:3493":{"crate_id":2,"path":["core","iter","traits","marker","TrustedStep"],"kind":"trait"},"6:5969:8469":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_pktinfo"],"kind":"struct"},"16:6332:7362":{"crate_id":16,"path":["gimli","read","abbrev","DebugAbbrev"],"kind":"struct"},"17:9350:6503":{"crate_id":17,"path":["object","read","util","ByteString"],"kind":"struct"},"6:580:7857":{"crate_id":6,"path":["libc","unix","tms"],"kind":"struct"},"2:21917:32503":{"crate_id":2,"path":["core","core_simd","vector","splat","Splat"],"kind":"struct"},"17:14282:7248":{"crate_id":17,"path":["object","pe","ImageHotPatchBase"],"kind":"struct"},"2:21023:32644":{"crate_id":2,"path":["core","core_simd","swizzle","deinterleave","Odd"],"kind":"struct"},"2:48014:9176":{"crate_id":2,"path":["core","core_arch","x86","__m256d"],"kind":"struct"},"2:2800:115":{"crate_id":2,"path":["core","marker","Copy"],"kind":"trait"},"2:3050:138":{"crate_id":2,"path":["core","ops","function","Fn"],"kind":"trait"},"6:4710:8178":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Shdr"],"kind":"struct"},"1:2941:135":{"crate_id":1,"path":["std","io","error","Error"],"kind":"struct"},"1:12042:1645":{"crate_id":1,"path":["std","u128"],"kind":"primitive"},"17:13667:7080":{"crate_id":17,"path":["object","pe","ImageNtHeaders64"],"kind":"struct"},"24:500:3425":{"crate_id":24,"path":["syn","drops","NoDrop"],"kind":"struct"},"1:11329:9279":{"crate_id":1,"path":["std","sys_common","wtf8","CodePoint"],"kind":"struct"},"17:13611:7074":{"crate_id":17,"path":["object","pe","ImageRomOptionalHeader"],"kind":"struct"},"2:4427:3578":{"crate_id":2,"path":["core","cell","RefMut"],"kind":"struct"},"2:15:2819":{"crate_id":2,"path":["core","write"],"kind":"macro"},"1:7567:6232":{"crate_id":1,"path":["std","backtrace_rs","print","BacktraceFrameFmt"],"kind":"struct"},"2:44081:9695":{"crate_id":2,"path":["core","str","pattern","CharArraySearcher"],"kind":"struct"},"1:11465:10339":{"crate_id":1,"path":["std","sys_common","net","TcpStream"],"kind":"struct"},"2:4418:3577":{"crate_id":2,"path":["core","cell","BorrowRefMut"],"kind":"struct"},"16:4719:7405":{"crate_id":16,"path":["gimli","constants","DwLang"],"kind":"struct"},"5:780:100":{"crate_id":5,"path":["alloc","collections","binary_heap","BinaryHeap"],"kind":"struct"},"2:47695:9165":{"crate_id":2,"path":["core","core_arch","simd","i32x16"],"kind":"struct"},"1:2195:10265":{"crate_id":1,"path":["std","fs","DirEntry"],"kind":"struct"},"20:118:9347":{"crate_id":20,"path":["proc_macro2","rcvec","RcVec"],"kind":"struct"},"18:0:3185":{"crate_id":18,"path":["memchr"],"kind":"module"},"16:6386:7436":{"crate_id":16,"path":["gimli","read","abbrev","AttributeSpecification"],"kind":"struct"},"24:1442:26635":{"crate_id":24,"path":["syn","parse","discouraged","Speculative"],"kind":"trait"},"2:3089:3424":{"crate_id":2,"path":["core","ops","index","IndexMut"],"kind":"trait"},"23:239:4268":{"crate_id":23,"path":["quote","__private","get_span","GetSpanInner"],"kind":"struct"},"6:5023:8329":{"crate_id":6,"path":["libc","unix","linux_like","linux","dirent"],"kind":"struct"},"24:3272:3684":{"crate_id":24,"path":["syn","token","Typeof"],"kind":"struct"},"24:1447:26636":{"crate_id":24,"path":["syn","parse","discouraged","AnyDelimiter"],"kind":"trait"},"2:45640:9069":{"crate_id":2,"path":["core","core_arch","simd","u8x2"],"kind":"struct"},"6:1650:7970":{"crate_id":6,"path":["libc","unix","linux_like","in6_rtmsg"],"kind":"struct"},"2:42443:3556":{"crate_id":2,"path":["core","fmt","num","Octal"],"kind":"struct"},"16:4862:7410":{"crate_id":16,"path":["gimli","constants","DwOrd"],"kind":"struct"},"2:3246:15723":{"crate_id":2,"path":["core","ops","range","OneSidedRange"],"kind":"trait"},"2:44457:15820":{"crate_id":2,"path":["core","time","TryFromFloatSecsErrorKind"],"kind":"enum"},"24:5068:3051":{"crate_id":24,"path":["syn","generics","WhereClause"],"kind":"struct"},"20:694:9348":{"crate_id":20,"path":["proc_macro2","rcvec","RcVecIntoIter"],"kind":"struct"},"1:5229:214":{"crate_id":1,"path":["std","path","Path"],"kind":"struct"},"16:2907:7361":{"crate_id":16,"path":["gimli","common","EhFrameOffset"],"kind":"struct"},"2:44173:9698":{"crate_id":2,"path":["core","str","pattern","CharPredicateSearcher"],"kind":"struct"},"2:46039:9085":{"crate_id":2,"path":["core","core_arch","simd","u8x16"],"kind":"struct"},"24:4363:3730":{"crate_id":24,"path":["syn","token","ShrEq"],"kind":"struct"},"1:10945:10426":{"crate_id":1,"path":["std","sys","unix","process","process_common","Stdio"],"kind":"enum"},"24:4839:3348":{"crate_id":24,"path":["syn","expr","ExprForLoop"],"kind":"struct"},"17:3565:22716":{"crate_id":17,"path":["object","read","macho","relocation","MachORelocationIterator"],"kind":"struct"},"17:10197:22658":{"crate_id":17,"path":["object","read","elf","file","ElfFile"],"kind":"struct"},"17:10685:22695":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCacheImage"],"kind":"struct"},"2:43910:9683":{"crate_id":2,"path":["core","str","iter","LinesAny"],"kind":"struct"},"1:1063:10211":{"crate_id":1,"path":["std","collections","hash","map","VacantEntry"],"kind":"struct"},"6:1591:7926":{"crate_id":6,"path":["libc","unix","linux_like","sched_param"],"kind":"struct"},"24:3323:3686":{"crate_id":24,"path":["syn","token","Unsized"],"kind":"struct"},"17:12074:6683":{"crate_id":17,"path":["object","elf","Syminfo64"],"kind":"struct"},"17:11098:22742":{"crate_id":17,"path":["object","read","pe","section","PeSegmentIterator"],"kind":"struct"},"16:4986:7414":{"crate_id":16,"path":["gimli","constants","DwLns"],"kind":"struct"},"16:3655:6408":{"crate_id":16,"path":["gimli","arch","X86_64"],"kind":"struct"},"18:660:26611":{"crate_id":18,"path":["memchr","memmem","FindIter"],"kind":"struct"},"5:276:2039":{"crate_id":5,"path":["alloc","boxed","Box"],"kind":"struct"},"2:9624:118":{"crate_id":2,"path":["core","fmt","Debug"],"kind":"trait"},"24:5146:2199":{"crate_id":24,"path":["syn","lit","LitStr"],"kind":"struct"},"24:4450:2669":{"crate_id":24,"path":["syn","token","Brace"],"kind":"struct"},"16:7722:7371":{"crate_id":16,"path":["gimli","read","str","DebugLineStr"],"kind":"struct"},"1:4039:10353":{"crate_id":1,"path":["std","os","unix","fs","DirBuilderExt"],"kind":"trait"},"1:3435:10283":{"crate_id":1,"path":["std","io","IoSliceMut"],"kind":"struct"},"24:4124:3713":{"crate_id":24,"path":["syn","token","Ne"],"kind":"struct"},"2:45836:9077":{"crate_id":2,"path":["core","core_arch","simd","u32x2"],"kind":"struct"},"6:6798:8664":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","pthread_attr_t"],"kind":"struct"},"17:10561:9380":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSection"],"kind":"struct"},"20:839:2676":{"crate_id":20,"path":["proc_macro2","imp","Literal"],"kind":"enum"},"6:5829:8392":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","statx"],"kind":"struct"},"17:13567:7043":{"crate_id":17,"path":["object","pe","ImageDataDirectory"],"kind":"struct"},"5:6514:6142":{"crate_id":5,"path":["alloc","vec","drain","drop","DropGuard"],"kind":"struct"},"16:3461:7388":{"crate_id":16,"path":["gimli","arch","RiscV"],"kind":"struct"},"2:42195:94":{"crate_id":2,"path":["core","sync","atomic","AtomicU64"],"kind":"struct"},"16:4497:7399":{"crate_id":16,"path":["gimli","constants","DwLle"],"kind":"struct"},"2:21342:4708":{"crate_id":2,"path":["core","core_simd","elements","mut_ptr","SimdMutPtr","from_exposed_addr"],"kind":"foreign_type"},"6:4884:8252":{"crate_id":6,"path":["libc","unix","linux_like","linux","seccomp_data"],"kind":"struct"},"6:4461:8089":{"crate_id":6,"path":["libc","unix","linux_like","linux","msginfo"],"kind":"struct"},"2:2900:6354":{"crate_id":2,"path":["core","ops","arith","DivAssign"],"kind":"trait"},"2:43868:9681":{"crate_id":2,"path":["core","str","iter","RMatches"],"kind":"struct"},"2:12015:9597":{"crate_id":2,"path":["core","str","iter","SplitInclusive"],"kind":"struct"},"1:11147:9255":{"crate_id":1,"path":["std","sys","unix","process","process_inner","ExitStatusError"],"kind":"struct"},"17:14076:7180":{"crate_id":17,"path":["object","pe","ImageResourceDirectoryString"],"kind":"struct"},"17:11261:9398":{"crate_id":17,"path":["object","read","pe","import","DelayLoadImportTable"],"kind":"struct"},"2:2547:79":{"crate_id":2,"path":["core","convert","AsRef"],"kind":"trait"},"17:11151:22766":{"crate_id":17,"path":["object","read","pe","section","PeRelocationIterator"],"kind":"struct"},"17:11788:6621":{"crate_id":17,"path":["object","archive","Header"],"kind":"struct"},"2:3286:32814":{"crate_id":2,"path":["core","ops","try_trait","NeverShortCircuitResidual"],"kind":"enum"},"24:2762:3665":{"crate_id":24,"path":["syn","token","Dyn"],"kind":"struct"},"2:44210:9699":{"crate_id":2,"path":["core","str","pattern","StrSearcher"],"kind":"struct"},"1:11359:9800":{"crate_id":1,"path":["std","sys_common","wtf8","Wtf8"],"kind":"struct"},"17:12513:6786":{"crate_id":17,"path":["object","macho","MachHeader64"],"kind":"struct"},"24:1490:3539":{"crate_id":24,"path":["syn","parse","ParseBuffer"],"kind":"struct"},"1:1556:9565":{"crate_id":1,"path":["std","collections","hash","set","Difference"],"kind":"struct"},"17:11815:6627":{"crate_id":17,"path":["object","archive","AixHeader"],"kind":"struct"},"1:10524:10321":{"crate_id":1,"path":["std","sys","unix","stdio","Stdin"],"kind":"struct"},"6:5075:8351":{"crate_id":6,"path":["libc","unix","linux_like","linux","mq_attr"],"kind":"struct"},"24:2915:3672":{"crate_id":24,"path":["syn","token","In"],"kind":"struct"},"24:3408:280":{"crate_id":24,"path":["syn","token","Yield"],"kind":"struct"},"16:6901:7372":{"crate_id":16,"path":["gimli","read","loclists","DebugLoc"],"kind":"struct"},"1:7922:3550":{"crate_id":1,"path":["std","io","cursor","Cursor"],"kind":"struct"},"18:636:6395":{"crate_id":18,"path":["memchr","memmem","twoway","ApproximateByteSet"],"kind":"struct"},"24:4404:3733":{"crate_id":24,"path":["syn","token","Star"],"kind":"struct"},"2:7995:3490":{"crate_id":2,"path":["core","iter","traits","marker","FusedIterator"],"kind":"trait"},"1:7676:4564":{"crate_id":1,"path":["std","thread","Thread"],"kind":"struct"},"17:11023:6571":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbol"],"kind":"struct"},"24:676:35745":{"crate_id":24,"path":["syn","expr","parsing","Precedence"],"kind":"enum"},"18:699:9359":{"crate_id":18,"path":["memchr","memmem","FinderBuilder"],"kind":"struct"},"16:7621:22520":{"crate_id":16,"path":["gimli","read","rnglists","RawRngListEntry"],"kind":"enum"},"24:96:10286":{"crate_id":24,"path":["syn","token","private","Sealed"],"kind":"trait"},"2:48155:9183":{"crate_id":2,"path":["core","core_arch","x86","cpuid","CpuidResult"],"kind":"struct"},"1:482:6208":{"crate_id":1,"path":["std","thread","spawn_unchecked_","MaybeDangling"],"kind":"struct"},"17:12737:6818":{"crate_id":17,"path":["object","macho","SubLibraryCommand"],"kind":"struct"},"17:13826:7111":{"crate_id":17,"path":["object","pe","ImageAuxSymbolTokenDef"],"kind":"struct"},"16:2881:7360":{"crate_id":16,"path":["gimli","common","DebugFrameOffset"],"kind":"struct"},"24:1923:3413":{"crate_id":24,"path":["syn","punctuated","IntoPairs"],"kind":"struct"},"17:14118:7189":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation32"],"kind":"struct"},"6:7668:8785":{"crate_id":6,"path":["libc","unix","linux_like","linux","canfd_frame"],"kind":"struct"},"11:1869:9565":{"crate_id":11,"path":["hashbrown","set","Difference"],"kind":"struct"},"2:40688:3525":{"crate_id":2,"path":["core","iter","adapters","zip","Zip"],"kind":"struct"},"17:13778:7104":{"crate_id":17,"path":["object","pe","ImageSymbol"],"kind":"struct"},"5:1413:3415":{"crate_id":5,"path":["alloc","collections","btree","map","Iter"],"kind":"struct"},"1:11296:9749":{"crate_id":1,"path":["std","sys_common","process","CommandEnv"],"kind":"struct"},"1:9187:9270":{"crate_id":1,"path":["std","sys","personality","dwarf","eh","EHContext"],"kind":"struct"},"16:5322:7419":{"crate_id":16,"path":["gimli","constants","DwOp"],"kind":"struct"},"24:4576:2208":{"crate_id":24,"path":["syn","derive","DataStruct"],"kind":"struct"},"2:44619:9790":{"crate_id":2,"path":["core","task","wake","RawWaker"],"kind":"struct"},"6:4947:8282":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_initmsg"],"kind":"struct"},"2:21460:10483":{"crate_id":2,"path":["core","core_simd","lane_count","LaneCount"],"kind":"struct"},"6:1576:7914":{"crate_id":6,"path":["libc","unix","linux_like","tm"],"kind":"struct"},"17:9780:22592":{"crate_id":17,"path":["object","read","any","SectionRelocationIterator"],"kind":"struct"},"2:12224:15639":{"crate_id":2,"path":["core","str","pattern","DoubleEndedSearcher"],"kind":"trait"},"16:2284:21617":{"crate_id":16,"path":["gimli","common","Format"],"kind":"enum"},"16:6600:22511":{"crate_id":16,"path":["gimli","read","line","LineInstruction"],"kind":"enum"},"17:13024:6877":{"crate_id":17,"path":["object","macho","FilesetEntryCommand"],"kind":"struct"},"2:6280:4797":{"crate_id":2,"path":["core","iter","adapters","map_windows","Buffer"],"kind":"struct"},"2:2556:143":{"crate_id":2,"path":["core","convert","From"],"kind":"trait"},"5:7423:9581":{"crate_id":5,"path":["alloc","ffi","c_str","NulError"],"kind":"struct"},"1:3158:32040":{"crate_id":1,"path":["std","io","stdio","StdoutRaw"],"kind":"struct"},"1:7123:28895":{"crate_id":1,"path":["std","sys_common","wstr","WStrUnits"],"kind":"struct"},"17:12098:6687":{"crate_id":17,"path":["object","elf","Rela32"],"kind":"struct"},"11:2351:3414":{"crate_id":11,"path":["hashbrown","table","IntoIter"],"kind":"struct"},"1:4027:10350":{"crate_id":1,"path":["std","os","unix","fs","DirEntryExt"],"kind":"trait"},"17:10726:22732":{"crate_id":17,"path":["object","read","macho","file","MachOComdat"],"kind":"struct"},"24:54:2067":{"crate_id":24,"path":["syn","token"],"kind":"module"},"16:2722:7353":{"crate_id":16,"path":["gimli","common","DebugRngListsBase"],"kind":"struct"},"2:40077:9025":{"crate_id":2,"path":["core","char","convert","CharTryFromError"],"kind":"struct"},"1:3955:10345":{"crate_id":1,"path":["std","os","unix","fs","FileExt"],"kind":"trait"},"1:914:10131":{"crate_id":1,"path":["std","collections","hash","map","IntoKeys"],"kind":"struct"},"2:40453:3517":{"crate_id":2,"path":["core","iter","adapters","map","Map"],"kind":"struct"},"2:1935:4681":{"crate_id":2,"path":["core","ptr","unique","Unique"],"kind":"struct"},"1:637:10195":{"crate_id":1,"path":["std","backtrace","BacktraceFrame"],"kind":"struct"},"6:1521:7881":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr"],"kind":"struct"},"2:21251:10494":{"crate_id":2,"path":["core","core_simd","elements","float","SimdFloat"],"kind":"trait"},"1:10814:9231":{"crate_id":1,"path":["std","sys","unix","io","IoSlice"],"kind":"struct"},"24:4054:3708":{"crate_id":24,"path":["syn","token","LArrow"],"kind":"struct"},"2:23517:248":{"crate_id":2,"path":["core","num","saturating","Saturating"],"kind":"struct"},"17:9390:136":{"crate_id":17,"path":["object","read","any","File"],"kind":"enum"},"5:35:4687":{"crate_id":5,"path":["alloc","raw_vec","RawVec"],"kind":"struct"},"6:5146:8385":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_can_addr"],"kind":"union"},"17:2178:22642":{"crate_id":17,"path":["object","read","elf","relocation","ElfDynamicRelocationIterator"],"kind":"struct"},"24:1975:3417":{"crate_id":24,"path":["syn","punctuated","PrivateIter"],"kind":"struct"},"2:23004:193":{"crate_id":2,"path":["core","num","nonzero","NonZeroI64"],"kind":"struct"},"2:30356:4637":{"crate_id":2,"path":["core","mem","transmutability","Assume"],"kind":"struct"},"23:407:4147":{"crate_id":23,"path":["quote","__private","RepInterp"],"kind":"struct"},"24:928:3375":{"crate_id":24,"path":["syn","generics","Turbofish"],"kind":"struct"},"17:9752:22591":{"crate_id":17,"path":["object","read","any","DynamicRelocationIterator"],"kind":"struct"},"2:42457:3565":{"crate_id":2,"path":["core","fmt","num","UpperHex"],"kind":"struct"},"21:244:35606":{"crate_id":21,"path":["proc_macro","bridge","handle","OwnedStore"],"kind":"struct"},"20:0:1830":{"crate_id":20,"path":["proc_macro2"],"kind":"module"},"2:44420:129":{"crate_id":2,"path":["core","time","Duration"],"kind":"struct"},"11:1072:35449":{"crate_id":11,"path":["hashbrown","map","KeyOrRef"],"kind":"enum"},"24:896:35891":{"crate_id":24,"path":["syn","generics","TypeParamsMut"],"kind":"struct"},"5:3214:9564":{"crate_id":5,"path":["alloc","collections","btree","set","Intersection"],"kind":"struct"},"1:11377:9755":{"crate_id":1,"path":["std","sys_common","wtf8","EncodeWide"],"kind":"struct"},"24:4547:3332":{"crate_id":24,"path":["syn","data","FieldsNamed"],"kind":"struct"},"2:45784:9075":{"crate_id":2,"path":["core","core_arch","simd","u8x8"],"kind":"struct"},"6:7702:8792":{"crate_id":6,"path":["libc","unix","align","in6_addr"],"kind":"struct"},"17:10097:22611":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdat"],"kind":"struct"},"2:4044:32771":{"crate_id":2,"path":["core","asserting","TryCaptureWithDebug"],"kind":"struct"},"24:1864:3411":{"crate_id":24,"path":["syn","punctuated","Pairs"],"kind":"struct"},"2:21564:10482":{"crate_id":2,"path":["core","core_simd","masks","to_bitmask","ToBitMask"],"kind":"trait"},"6:4516:8115":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_mask"],"kind":"struct"},"16:6583:9498":{"crate_id":16,"path":["gimli","read","line","LineRows"],"kind":"struct"},"17:12531:6787":{"crate_id":17,"path":["object","macho","LoadCommand"],"kind":"struct"},"2:2892:6352":{"crate_id":2,"path":["core","ops","arith","SubAssign"],"kind":"trait"},"2:42117:93":{"crate_id":2,"path":["core","sync","atomic","AtomicU32"],"kind":"struct"},"24:845:10286":{"crate_id":24,"path":["syn","ext","private","Sealed"],"kind":"trait"},"2:32151:32770":{"crate_id":2,"path":["core","error","tags","MaybeSizedValue"],"kind":"struct"},"1:10087:27398":{"crate_id":1,"path":["std","sys","unix","os","Env"],"kind":"struct"},"24:3051:3678":{"crate_id":24,"path":["syn","token","Override"],"kind":"struct"},"2:22027:10286":{"crate_id":2,"path":["core","core_simd","vector","sealed","Sealed"],"kind":"trait"},"1:12036:804":{"crate_id":1,"path":["std","i64"],"kind":"primitive"},"24:904:35889":{"crate_id":24,"path":["syn","generics","ConstParams"],"kind":"struct"},"16:7360:35495":{"crate_id":16,"path":["gimli","read","op","EvaluationWaiting"],"kind":"enum"},"24:4856:3352":{"crate_id":24,"path":["syn","expr","ExprInfer"],"kind":"struct"},"24:4566:1996":{"crate_id":24,"path":["syn","derive","Data"],"kind":"enum"},"11:693:3414":{"crate_id":11,"path":["hashbrown","map","IntoIter"],"kind":"struct"},"17:13914:7136":{"crate_id":17,"path":["object","pe","ImageBaseRelocation"],"kind":"struct"},"2:12270:15648":{"crate_id":2,"path":["core","str","pattern","MultiCharEqPattern"],"kind":"struct"},"17:9488:35521":{"crate_id":17,"path":["object","read","any","SegmentInternal"],"kind":"enum"},"2:40930:3489":{"crate_id":2,"path":["core","iter","sources","successors","Successors"],"kind":"struct"},"2:22251:8805":{"crate_id":2,"path":["core","num","dec2flt","common","BiasedFp"],"kind":"struct"},"2:40061:32228":{"crate_id":2,"path":["core","char","convert","CharErrorKind"],"kind":"enum"},"2:12824:33033":{"crate_id":2,"path":["core","future","join","MaybeDone"],"kind":"enum"},"1:4628:8654":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt","st_ctime"],"kind":"foreign_type"},"17:8794:22578":{"crate_id":17,"path":["object","common","SymbolKind"],"kind":"enum"},"1:5384:10423":{"crate_id":1,"path":["std","process","ChildStdin"],"kind":"struct"},"20:802:35558":{"crate_id":20,"path":["proc_macro2","imp","TokenTreeIter"],"kind":"enum"},"24:1331:3554":{"crate_id":24,"path":["syn","lookahead","Peek"],"kind":"trait"},"6:6136:8553":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","sifields_sigchld"],"kind":"struct"},"24:920:3374":{"crate_id":24,"path":["syn","generics","ImplGenerics"],"kind":"struct"},"2:39363:226":{"crate_id":2,"path":["core","ops","range","RangeInclusive"],"kind":"struct"},"16:3764:7390":{"crate_id":16,"path":["gimli","constants","DwSect"],"kind":"struct"},"17:12024:6674":{"crate_id":17,"path":["object","elf","Sym32"],"kind":"struct"},"1:10759:9728":{"crate_id":1,"path":["std","sys","unix","fs","OpenOptions"],"kind":"struct"},"1:918:10132":{"crate_id":1,"path":["std","collections","hash","map","IntoValues"],"kind":"struct"},"17:10430:22688":{"crate_id":17,"path":["object","read","elf","note","GnuPropertyIterator"],"kind":"struct"},"2:4363:3575":{"crate_id":2,"path":["core","cell","BorrowRef"],"kind":"struct"},"24:1488:2065":{"crate_id":24,"path":["syn","parse","ParseStream"],"kind":"type_alias"},"1:12025:346":{"crate_id":1,"path":["std","array"],"kind":"primitive"}},"external_crates":{"23":{"name":"quote","html_root_url":"https://docs.rs/quote/1.0.33/"},"20":{"name":"proc_macro2","html_root_url":"https://docs.rs/proc-macro2/1.0.69/"},"17":{"name":"object","html_root_url":"https://doc.rust-lang.org/nightly/"},"14":{"name":"rustc_demangle","html_root_url":"https://doc.rust-lang.org/nightly/"},"11":{"name":"hashbrown","html_root_url":"https://doc.rust-lang.org/nightly/"},"8":{"name":"cfg_if","html_root_url":"https://docs.rs/cfg-if/"},"5":{"name":"alloc","html_root_url":"https://doc.rust-lang.org/nightly/"},"2":{"name":"core","html_root_url":"https://doc.rust-lang.org/nightly/"},"22":{"name":"unicode_ident","html_root_url":"https://docs.rs/unicode-ident/1.0.12/"},"19":{"name":"panic_unwind","html_root_url":"https://doc.rust-lang.org/nightly/"},"16":{"name":"gimli","html_root_url":"https://doc.rust-lang.org/nightly/"},"13":{"name":"std_detect","html_root_url":"https://doc.rust-lang.org/nightly/"},"10":{"name":"adler","html_root_url":"https://docs.rs/adler/1.0.2/"},"7":{"name":"unwind","html_root_url":"https://doc.rust-lang.org/nightly/"},"4":{"name":"rustc_std_workspace_core","html_root_url":"https://doc.rust-lang.org/nightly/"},"1":{"name":"std","html_root_url":"https://doc.rust-lang.org/nightly/"},"24":{"name":"syn","html_root_url":"https://docs.rs/syn/2.0.39/"},"21":{"name":"proc_macro","html_root_url":"https://doc.rust-lang.org/nightly/"},"18":{"name":"memchr","html_root_url":"https://doc.rust-lang.org/nightly/"},"15":{"name":"addr2line","html_root_url":"https://doc.rust-lang.org/nightly/"},"12":{"name":"rustc_std_workspace_alloc","html_root_url":"https://doc.rust-lang.org/nightly/"},"9":{"name":"miniz_oxide","html_root_url":"https://doc.rust-lang.org/nightly/"},"6":{"name":"libc","html_root_url":"https://doc.rust-lang.org/nightly/"},"3":{"name":"compiler_builtins","html_root_url":"https://doc.rust-lang.org/nightly/"}},"format_version":27}