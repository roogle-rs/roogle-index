{"root":"0:0:1654","crate_version":"1.0.144","includes_private":false,"index":{"2:13792:62951":{"id":"2:13792:62951","crate_id":2,"name":"rmatch_indices","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within `self`,\nyielded in reverse order along with the index of the match.\n\nFor matches of `pat` within `self` that overlap, only the indices\ncorresponding to the last match are returned.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`match_indices`] method can be used.\n\n[`match_indices`]: str::match_indices\n\n# Examples\n\nBasic usage:\n\n```\nlet v: Vec<_> = \"abcXXXabcYYYabc\".rmatch_indices(\"abc\").collect();\nassert_eq!(v, [(12, \"abc\"), (6, \"abc\"), (0, \"abc\")]);\n\nlet v: Vec<_> = \"1abcabc2\".rmatch_indices(\"abc\").collect();\nassert_eq!(v, [(4, \"abc\"), (1, \"abc\")]);\n\nlet v: Vec<_> = \"ababa\".rmatch_indices(\"aba\").collect();\nassert_eq!(v, [(2, \"aba\")]); // only the last `aba`\n```","links":{"`DoubleEndedIterator`":"2:8717:121","prim@char":"1:15883:2999","str::match_indices":"2:13789:62950","self::pattern":"2:13332:5140"},"attrs":["#[stable(feature = \"str_match_indices\", since = \"1.5.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"RMatchIndices","id":"2:49957:5477","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13342:5139","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"2:13342:5139","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:13357:5143","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:5497:4744":{"id":"1:5497:4744","crate_id":1,"name":"FileExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:5498:60595","1:5499:60597","1:5500:60596","1:5501:60598"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"5:5906:5635":{"id":"5:5906:5635","crate_id":5,"name":"Concat","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["5:5908:183","5:5909:438"],"generics":{"params":[{"name":"Item","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"Item"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:3369:3383","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"bounds":[],"implementations":[]}},"2:3522:5086":{"id":"2:3522:5086","crate_id":2,"name":"BitOrAssign","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3524:360"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:3364:215":{"id":"2:3364:215","crate_id":2,"name":"Send","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":true,"is_unsafe":true,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:13797:62953":{"id":"2:13797:62953","crate_id":2,"name":"trim_start","span":null,"visibility":"public","docs":"Returns a string slice with leading whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Text directionality\n\nA string is a sequence of bytes. `start` in this context means the first\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be left side, and for right-to-left languages like\nArabic or Hebrew, this will be the right side.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\nassert_eq!(\"Hello\\tworld\\t\\n\", s.trim_start());\n```\n\nDirectionality:\n\n```\nlet s = \"  English  \";\nassert!(Some('E') == s.trim_start().chars().next());\n\nlet s = \"  עברית  \";\nassert!(Some('ע') == s.trim_start().chars().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[stable(feature = \"trim_direction\", since = \"1.30.0\")]","#[rustc_diagnostic_item = \"str_trim_start\"]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13715:2736":{"id":"2:13715:2736","crate_id":2,"name":"as_bytes","span":null,"visibility":"public","docs":"Converts a string slice to a byte slice. To convert the byte slice back\ninto a string slice, use the [`from_utf8`] function.\n\n# Examples\n\nBasic usage:\n\n```\nlet bytes = \"bors\".as_bytes();\nassert_eq!(b\"bors\", bytes);\n```","links":{"`from_utf8`":"2:12796:5591"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]","#[rustc_const_stable(feature = \"str_as_bytes\", since = \"1.39.0\")]","#[must_use]","#[allow(unused_attributes)]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"slice","inner":{"kind":"primitive","inner":"u8"}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:3453:3470":{"id":"2:3453:3470","crate_id":2,"name":"Rem","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3455:183","2:3456:1110"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:0:1654":{"id":"0:0:1654","crate_id":0,"name":"serde_derive","span":{"filename":"src/lib.rs","begin":[1,0],"end":[109,1]},"visibility":"public","docs":"This crate provides Serde's two derive macros.\n\n```edition2018\n# use serde_derive::{Serialize, Deserialize};\n#\n#[derive(Serialize, Deserialize)]\n# struct S;\n#\n# fn main() {}\n```\n\nPlease refer to [https://serde.rs/derive.html] for how to set this up.\n\n[https://serde.rs/derive.html]: https://serde.rs/derive.html","links":{},"attrs":["#![doc(html_root_url = \"https://docs.rs/serde_derive/1.0.144\")]","#![allow(unknown_lints, bare_trait_objects)]","#![allow(clippy :: branches_sharing_code, clippy :: cognitive_complexity,\nclippy :: collapsible_match, clippy :: derive_partial_eq_without_eq, clippy ::\nenum_variant_names, clippy :: manual_map, clippy :: match_like_matches_macro,\nclippy :: needless_pass_by_value, clippy :: too_many_arguments, clippy ::\ntrivially_copy_pass_by_ref, clippy :: used_underscore_binding, clippy ::\nwildcard_in_or_patterns, clippy :: unnested_or_patterns,)]","#![allow(clippy :: cast_possible_truncation, clippy :: checked_conversions,\nclippy :: doc_markdown, clippy :: enum_glob_use, clippy :: indexing_slicing,\nclippy :: items_after_statements, clippy :: let_underscore_drop, clippy ::\nmanual_assert, clippy :: map_err_ignore, clippy :: match_same_arms, clippy ::\nmatch_wildcard_for_single_variants, clippy :: module_name_repetitions, clippy\n:: must_use_candidate, clippy :: option_if_let_else, clippy :: similar_names,\nclippy :: single_match_else, clippy :: struct_excessive_bools, clippy ::\ntoo_many_lines, clippy :: unseparated_literal_suffix, clippy :: unused_self,\nclippy :: use_self, clippy :: wildcard_imports)]"],"deprecation":null,"kind":"module","inner":{"is_crate":true,"items":["0:1257:1639","0:1258:1648"],"is_stripped":false}},"2:13821:62960":{"id":"2:13821:62960","crate_id":2,"name":"trim_right_matches","span":null,"visibility":"public","docs":"Returns a string slice with all suffixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. 'Right' in this context means the last\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _left_ side, not the right.\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_right_matches('1'), \"11foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_right_matches(char::is_numeric), \"123foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_right_matches(x), \"12foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1fooX\".trim_right_matches(|c| c == '1' || c == 'X'), \"1foo\");\n```","links":{"self::pattern":"2:13332:5140","prim@char":"1:15883:2999"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]","#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_end_matches`\",\nsuggestion = \"trim_end_matches\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_end_matches`"},"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13342:5139","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"2:13342:5139","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:13357:5143","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:5519:4746":{"id":"1:5519:4746","crate_id":1,"name":"MetadataExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:5520:8393","1:5521:58153","1:5522:6966","1:5523:58154","1:5524:5002","1:5525:5003","1:5526:58155","1:5527:1317","1:5528:58156","1:5529:58157","1:5530:58158","1:5531:58159","1:5532:58160","1:5533:58161","1:5534:58162","1:5535:58163"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:10572:3348":{"id":"2:10572:3348","crate_id":2,"name":"Octal","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:10573:664"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:3374:107":{"id":"2:3374:107","crate_id":2,"name":"Copy","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"name":"Clone","id":"2:2884:105","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:13806:62958":{"id":"2:13806:62958","crate_id":2,"name":"trim_start_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. `start` in this context means the first\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be left side, and for right-to-left languages like\nArabic or Hebrew, this will be the right side.\n\n# Examples\n\nBasic usage:\n\n```\nassert_eq!(\"11foo1bar11\".trim_start_matches('1'), \"foo1bar11\");\nassert_eq!(\"123foo1bar123\".trim_start_matches(char::is_numeric), \"foo1bar123\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_start_matches(x), \"foo1bar12\");\n```","links":{"self::pattern":"2:13332:5140","prim@char":"1:15883:2999"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[stable(feature = \"trim_direction\", since = \"1.30.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13342:5139","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:10578:3356":{"id":"2:10578:3356","crate_id":2,"name":"UpperHex","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:10579:664"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:4485:4682":{"id":"1:4485:4682","crate_id":1,"name":"Seek","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:4486:60501","1:4487:40821","1:4488:60502","1:4489:60503"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:3614:131":{"id":"2:3614:131","crate_id":2,"name":"Fn","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3616:382"],"generics":{"params":[{"name":"Args","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"name":"FnMut","id":"2:3617:132","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"Args"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:13752:4089":{"id":"2:13752:4089","crate_id":2,"name":"rfind","span":null,"visibility":"public","docs":"Returns the byte index for the first character of the last match of the pattern in\nthis string slice.\n\nReturns [`None`] if the pattern doesn't match.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nlet s = \"Löwe 老虎 Léopard Gepardi\";\n\nassert_eq!(s.rfind('L'), Some(13));\nassert_eq!(s.rfind('é'), Some(14));\nassert_eq!(s.rfind(\"pard\"), Some(24));\n```\n\nMore complex patterns with closures:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\n\nassert_eq!(s.rfind(char::is_whitespace), Some(12));\nassert_eq!(s.rfind(char::is_lowercase), Some(20));\n```\n\nNot finding the pattern:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\nlet x: &[_] = &['1', '2'];\n\nassert_eq!(s.rfind(x), None);\n```","links":{"self::pattern":"2:13332:5140","`None`":"2:47810:176","prim@char":"1:15883:2999"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:47808:178","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13342:5139","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"2:13342:5139","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:13357:5143","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:3177:233":{"id":"2:3177:233","crate_id":2,"name":"TryInto","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3179:128","2:3180:1431"],"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:13777:62947":{"id":"2:13777:62947","crate_id":2,"name":"split_once","span":null,"visibility":"public","docs":"Splits the string on the first occurrence of the specified delimiter and\nreturns prefix before delimiter and suffix after delimiter.\n\n# Examples\n\n```\nassert_eq!(\"cfg\".split_once('='), None);\nassert_eq!(\"cfg=\".split_once('='), Some((\"cfg\", \"\")));\nassert_eq!(\"cfg=foo\".split_once('='), Some((\"cfg\", \"foo\")));\nassert_eq!(\"cfg=foo=bar\".split_once('='), Some((\"cfg\", \"foo=bar\")));\n```","links":{},"attrs":["#[stable(feature = \"str_split_once\", since = \"1.52.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["delimiter",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:47808:178","args":{"angle_bracketed":{"args":[{"type":{"kind":"tuple","inner":[{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}},{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13342:5139","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:6573:4674":{"id":"1:6573:4674","crate_id":1,"name":"ChildExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:6574:8853","1:6575:57964"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"name":"Sealed","id":"1:10416:4677","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:2963:186":{"id":"2:2963:186","crate_id":2,"name":"PartialOrd","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:2965:1004","2:2966:832","2:2967:797","2:2968:716","2:2969:700"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"Rhs"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:3369:3383","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"bounds":[{"trait_bound":{"trait":{"name":"PartialEq","id":"2:2917:185","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"Rhs"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"1:5505:4743":{"id":"1:5505:4743","crate_id":1,"name":"PermissionsExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:5506:6966","1:5507:57615","1:5508:57616"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:3165:75":{"id":"2:3165:75","crate_id":2,"name":"AsRef","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3167:311"],"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:3369:3383","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"bounds":[],"implementations":[]}},"2:3248:116":{"id":"2:3248:116","crate_id":2,"name":"Default","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3249:59"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:10584:3354":{"id":"2:10584:3354","crate_id":2,"name":"UpperExp","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:10585:664"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:3743:3283":{"id":"2:3743:3283","crate_id":2,"name":"RangeBounds","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3745:61813","2:3746:61814","2:3747:1905"],"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:3369:3383","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"bounds":[],"implementations":[]}},"2:3617:132":{"id":"2:3617:132","crate_id":2,"name":"FnMut","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3619:383"],"generics":{"params":[{"name":"Args","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"name":"FnOnce","id":"2:3620:133","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"Args"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"1:4467:3352":{"id":"1:4467:3352","crate_id":1,"name":"Write","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:4468:2616","1:4469:60651","1:4471:60652","1:4472:5848","1:4473:60653","1:4474:60654","1:4475:58724","1:4484:4106"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:3535:5092":{"id":"2:3535:5092","crate_id":2,"name":"ShrAssign","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3537:1248"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:1258:1648":{"id":"0:1258:1648","crate_id":0,"name":"Deserialize","span":{"filename":"src/lib.rs","begin":[99,0],"end":[104,1]},"visibility":"public","docs":null,"links":{},"attrs":["#[proc_macro_derive(Deserialize, attributes(serde))]"],"deprecation":null,"kind":"proc_macro","inner":{"kind":"derive","helpers":["serde"]}},"2:8717:121":{"id":"2:8717:121","crate_id":2,"name":"DoubleEndedIterator","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:8718:4084","2:8719:4085","2:8720:4086","2:8721:4087","2:8725:4088","2:8728:4089"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"name":"Iterator","id":"2:8874:158","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:13728:62943":{"id":"2:13728:62943","crate_id":2,"name":"slice_mut_unchecked","span":null,"visibility":"public","docs":"Creates a string slice from another string slice, bypassing safety\nchecks.\nThis is generally not recommended, use with caution! For a safe\nalternative see [`str`] and [`IndexMut`].\n\n[`IndexMut`]: crate::ops::IndexMut\n\nThis new slice goes from `begin` to `end`, including `begin` but\nexcluding `end`.\n\nTo get an immutable string slice instead, see the\n[`slice_unchecked`] method.\n\n[`slice_unchecked`]: str::slice_unchecked\n\n# Safety\n\nCallers of this function are responsible that three preconditions are\nsatisfied:\n\n* `begin` must not exceed `end`.\n* `begin` and `end` must be byte positions within the string slice.\n* `begin` and `end` must lie on UTF-8 sequence boundaries.","links":{"str::slice_unchecked":"2:13727:4831","`str`":"1:15889:3004","crate::ops::IndexMut":"2:3676:3271"},"attrs":["#[stable(feature = \"str_slice_mut\", since = \"1.5.0\")]","#[deprecated(since = \"1.29.0\", note =\n\"use `get_unchecked_mut(begin..end)` instead\")]"],"deprecation":{"since":"1.29.0","note":"use `get_unchecked_mut(begin..end)` instead"},"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["begin",{"kind":"primitive","inner":"usize"}],["end",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}},"1:6649:4669":{"id":"1:6649:4669","crate_id":1,"name":"IntoRawFd","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:6650:60640"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:9143:4786":{"id":"1:9143:4786","crate_id":1,"name":"StdFloat","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:9144:57448","1:9145:57449","1:9146:57450","1:9147:57451","1:9148:57452","1:9149:40420","1:9150:57447"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"name":"Sealed","id":"1:10416:4677","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"1:5575:4751":{"id":"1:5575:4751","crate_id":1,"name":"DirBuilderExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:5576:6966"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:13736:5924":{"id":"2:13736:5924","crate_id":2,"name":"lines","span":null,"visibility":"public","docs":"An iterator over the lines of a string, as string slices.\n\nLines are ended with either a newline (`\\n`) or a carriage return with\na line feed (`\\r\\n`).\n\nThe final line ending is optional. A string that ends with a final line\nending will return the same lines as an otherwise identical string\nwithout a final line ending.\n\n# Examples\n\nBasic usage:\n\n```\nlet text = \"foo\\r\\nbar\\n\\nbaz\\n\";\nlet mut lines = text.lines();\n\nassert_eq!(Some(\"foo\"), lines.next());\nassert_eq!(Some(\"bar\"), lines.next());\nassert_eq!(Some(\"\"), lines.next());\nassert_eq!(Some(\"baz\"), lines.next());\n\nassert_eq!(None, lines.next());\n```\n\nThe final line ending isn't required:\n\n```\nlet text = \"foo\\nbar\\n\\r\\nbaz\";\nlet mut lines = text.lines();\n\nassert_eq!(Some(\"foo\"), lines.next());\nassert_eq!(Some(\"bar\"), lines.next());\nassert_eq!(Some(\"\"), lines.next());\nassert_eq!(Some(\"baz\"), lines.next());\n\nassert_eq!(None, lines.next());\n```","links":{},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Lines","id":"2:50043:4707","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"24:2132:6442":{"id":"24:2132:6442","crate_id":24,"name":"IdentExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["24:2133:64135","24:2134:64136","24:2135:1886"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"name":"Sealed","id":"24:2150:4677","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:13727:4831":{"id":"2:13727:4831","crate_id":2,"name":"slice_unchecked","span":null,"visibility":"public","docs":"Creates a string slice from another string slice, bypassing safety\nchecks.\n\nThis is generally not recommended, use with caution! For a safe\nalternative see [`str`] and [`Index`].\n\n[`Index`]: crate::ops::Index\n\nThis new slice goes from `begin` to `end`, including `begin` but\nexcluding `end`.\n\nTo get a mutable string slice instead, see the\n[`slice_mut_unchecked`] method.\n\n[`slice_mut_unchecked`]: str::slice_mut_unchecked\n\n# Safety\n\nCallers of this function are responsible that three preconditions are\nsatisfied:\n\n* `begin` must not exceed `end`.\n* `begin` and `end` must be byte positions within the string slice.\n* `begin` and `end` must lie on UTF-8 sequence boundaries.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\n\nunsafe {\n    assert_eq!(\"Löwe 老虎 Léopard\", s.slice_unchecked(0, 21));\n}\n\nlet s = \"Hello, world!\";\n\nunsafe {\n    assert_eq!(\"world\", s.slice_unchecked(7, 12));\n}\n```","links":{"`str`":"1:15889:3004","crate::ops::Index":"2:3672:2263","str::slice_mut_unchecked":"2:13728:62943"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]","#[deprecated(since = \"1.29.0\", note =\n\"use `get_unchecked(begin..end)` instead\")]","#[must_use]"],"deprecation":{"since":"1.29.0","note":"use `get_unchecked(begin..end)` instead"},"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["begin",{"kind":"primitive","inner":"usize"}],["end",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}},"2:3484:5075":{"id":"2:3484:5075","crate_id":2,"name":"Not","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3485:183","2:3486:958"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:8673:152":{"id":"2:8673:152","crate_id":2,"name":"IntoIterator","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:8674:1824","2:8675:3261","2:8676:773"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:23138:5330":{"id":"2:23138:5330","crate_id":2,"name":"SimdUint","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:23139:60950","2:23140:1238","2:23141:1239","2:23142:60951","2:23143:60952","2:23144:60953","2:23145:60954","2:23146:60955","2:23147:60956","2:23148:60957"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"name":"Copy","id":"2:3374:107","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Sealed","id":"2:23151:4677","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:14057:139":{"id":"2:14057:139","crate_id":2,"name":"Future","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:14058:183","2:14059:1020"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:10570:120":{"id":"2:10570:120","crate_id":2,"name":"Display","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:10571:664"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:3620:133":{"id":"2:3620:133","crate_id":2,"name":"FnOnce","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3622:183","2:3623:384"],"generics":{"params":[{"name":"Args","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:5563:4748":{"id":"1:5563:4748","crate_id":1,"name":"DirEntryExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:5564:58153"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"20:63:3119":{"id":"20:63:3119","crate_id":20,"name":"IdentFragment","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["20:64:664","20:65:2086"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:14072:151":{"id":"2:14072:151","crate_id":2,"name":"IntoFuture","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:14073:183","2:14074:151","2:14075:772"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:3463:3287":{"id":"2:3463:3287","crate_id":2,"name":"AddAssign","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3465:271"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"5:6185:4727":{"id":"5:6185:4727","crate_id":5,"name":"repeat","span":null,"visibility":"public","docs":"Creates a new [`String`] by repeating a string `n` times.\n\n# Panics\n\nThis function will panic if the capacity would overflow.\n\n# Examples\n\nBasic usage:\n\n```\nassert_eq!(\"abc\".repeat(4), String::from(\"abcabcabcabc\"));\n```\n\nA panic upon overflow:\n\n```should_panic\n// this will panic at runtime\nlet huge = \"0123456789abcdef\".repeat(usize::MAX);\n```","links":{"`String`":"5:8472:220"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use]","#[stable(feature = \"repeat_str\", since = \"1.16.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["n",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:8472:220","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:2859:97":{"id":"2:2859:97","crate_id":2,"name":"Borrow","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:2861:1843"],"generics":{"params":[{"name":"Borrowed","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"Borrowed"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:3369:3383","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"bounds":[],"implementations":[]}},"2:3672:2263":{"id":"2:3672:2263","crate_id":2,"name":"Index","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3674:183","2:3675:757"],"generics":{"params":[{"name":"Idx","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"Idx"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:3369:3383","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"bounds":[],"implementations":[]}},"2:13818:1887":{"id":"2:13818:1887","crate_id":2,"name":"trim_left_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. 'Left' in this context means the first\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _right_ side, not the left.\n\n# Examples\n\nBasic usage:\n\n```\nassert_eq!(\"11foo1bar11\".trim_left_matches('1'), \"foo1bar11\");\nassert_eq!(\"123foo1bar123\".trim_left_matches(char::is_numeric), \"foo1bar123\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_left_matches(x), \"foo1bar12\");\n```","links":{"self::pattern":"2:13332:5140","prim@char":"1:15883:2999"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]","#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_start_matches`\",\nsuggestion = \"trim_start_matches\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_start_matches`"},"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13342:5139","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13830:62961":{"id":"2:13830:62961","crate_id":2,"name":"escape_debug","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_debug`].\n\nNote: only extended grapheme codepoints that begin the string will be\nescaped.\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"❤\\n!\".escape_debug() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"❤\\n!\".escape_debug());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"❤\\\\n!\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"❤\\n!\".escape_debug().to_string(), \"❤\\\\n!\");\n```","links":{"`char::escape_debug`":"2:5445:62961"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]","#[stable(feature = \"str_escape\", since = \"1.34.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"EscapeDebug","id":"2:50088:5485","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:10582:3353":{"id":"2:10582:3353","crate_id":2,"name":"LowerExp","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:10583:664"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:23435:5223":{"id":"2:23435:5223","crate_id":2,"name":"MaskElement","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":true,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"name":"SimdElement","id":"2:24072:5100","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Sealed","id":"2:23426:4677","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"5:6186:2304":{"id":"5:6186:2304","crate_id":5,"name":"to_ascii_uppercase","span":null,"visibility":"public","docs":"Returns a copy of this string where each character is mapped to its\nASCII upper case equivalent.\n\nASCII letters 'a' to 'z' are mapped to 'A' to 'Z',\nbut non-ASCII letters are unchanged.\n\nTo uppercase the value in-place, use [`make_ascii_uppercase`].\n\nTo uppercase ASCII characters in addition to non-ASCII characters, use\n[`to_uppercase`].\n\n# Examples\n\n```\nlet s = \"Grüße, Jürgen ❤\";\n\nassert_eq!(\"GRüßE, JüRGEN ❤\", s.to_ascii_uppercase());\n```\n\n[`make_ascii_uppercase`]: str::make_ascii_uppercase\n[`to_uppercase`]: #method.to_uppercase","links":{"str::make_ascii_uppercase":"2:13828:4455"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use = \"to uppercase the value in-place, use `make_ascii_uppercase()`\"]","#[stable(feature = \"ascii_methods_on_intrinsics\", since = \"1.23.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:8472:220","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13716:62942":{"id":"2:13716:62942","crate_id":2,"name":"as_bytes_mut","span":null,"visibility":"public","docs":"Converts a mutable string slice to a mutable byte slice.\n\n# Safety\n\nThe caller must ensure that the content of the slice is valid UTF-8\nbefore the borrow ends and the underlying `str` is used.\n\nUse of a `str` whose contents are not valid UTF-8 is undefined behavior.\n\n# Examples\n\nBasic usage:\n\n```\nlet mut s = String::from(\"Hello\");\nlet bytes = unsafe { s.as_bytes_mut() };\n\nassert_eq!(b\"Hello\", bytes);\n```\n\nMutability:\n\n```\nlet mut s = String::from(\"🗻∈🌏\");\n\nunsafe {\n    let bytes = s.as_bytes_mut();\n\n    bytes[0] = 0xF0;\n    bytes[1] = 0x9F;\n    bytes[2] = 0x8D;\n    bytes[3] = 0x94;\n}\n\nassert_eq!(\"🍔∈🌏\", s);\n```","links":{},"attrs":["#[stable(feature = \"str_mut_extras\", since = \"1.20.0\")]","#[must_use]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"slice","inner":{"kind":"primitive","inner":"u8"}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}},"1:5425:4774":{"id":"1:5425:4774","crate_id":1,"name":"OsStringExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:5426:57485","1:5427:3777"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"name":"Sealed","id":"1:10416:4677","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:13710:62940":{"id":"2:13710:62940","crate_id":2,"name":"floor_char_boundary","span":null,"visibility":"public","docs":"Finds the closest `x` not exceeding `index` where `is_char_boundary(x)` is `true`.\n\nThis method can help you truncate a string so that it's still valid UTF-8, but doesn't\nexceed a given number of bytes. Note that this is done purely at the character level\nand can still visually split graphemes, even though the underlying characters aren't\nsplit. For example, the emoji 🧑‍🔬 (scientist) could be split so that the string only\nincludes 🧑 (person) instead.\n\n# Examples\n\n```\n#![feature(round_char_boundary)]\nlet s = \"❤️🧡💛💚💙💜\";\nassert_eq!(s.len(), 26);\nassert!(!s.is_char_boundary(13));\n\nlet closest = s.floor_char_boundary(13);\nassert_eq!(closest, 10);\nassert_eq!(&s[..closest], \"❤️🧡\");\n```","links":{},"attrs":["#[unstable(feature = \"round_char_boundary\", issue = \"93743\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["index",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"primitive","inner":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:74:340":{"id":"0:74:340","crate_id":0,"name":"attr","span":{"filename":"src/internals/attr.rs","begin":[1,0],"end":[1952,1]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"module","inner":{"is_crate":false,"items":["0:144"],"is_stripped":false}},"2:13762:58825":{"id":"2:13762:58825","crate_id":2,"name":"rsplit","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by\ncharacters matched by a pattern and yielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`split`] method can be used.\n\n[`split`]: str::split\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".rsplit(' ').collect();\nassert_eq!(v, [\"lamb\", \"little\", \"a\", \"had\", \"Mary\"]);\n\nlet v: Vec<&str> = \"\".rsplit('X').collect();\nassert_eq!(v, [\"\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".rsplit('X').collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"\", \"lion\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".rsplit(\"::\").collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"lion\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".rsplit(|c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"ghi\", \"def\", \"abc\"]);\n```","links":{"prim@char":"1:15883:2999","`DoubleEndedIterator`":"2:8717:121","self::pattern":"2:13332:5140","str::split":"2:13756:58822"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"RSplit","id":"2:49807:5444","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13342:5139","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"2:13342:5139","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:13357:5143","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:6645:4667":{"id":"1:6645:4667","crate_id":1,"name":"AsRawFd","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:6646:57660"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:13731:2313":{"id":"2:13731:2313","crate_id":2,"name":"chars","span":null,"visibility":"public","docs":"Returns an iterator over the [`char`]s of a string slice.\n\nAs a string slice consists of valid UTF-8, we can iterate through a\nstring slice by [`char`]. This method returns such an iterator.\n\nIt's important to remember that [`char`] represents a Unicode Scalar\nValue, and might not match your idea of what a 'character' is. Iteration\nover grapheme clusters may be what you actually want. This functionality\nis not provided by Rust's standard library, check crates.io instead.\n\n# Examples\n\nBasic usage:\n\n```\nlet word = \"goodbye\";\n\nlet count = word.chars().count();\nassert_eq!(7, count);\n\nlet mut chars = word.chars();\n\nassert_eq!(Some('g'), chars.next());\nassert_eq!(Some('o'), chars.next());\nassert_eq!(Some('o'), chars.next());\nassert_eq!(Some('d'), chars.next());\nassert_eq!(Some('b'), chars.next());\nassert_eq!(Some('y'), chars.next());\nassert_eq!(Some('e'), chars.next());\n\nassert_eq!(None, chars.next());\n```\n\nRemember, [`char`]s might not match your intuition about characters:\n\n[`char`]: prim@char\n\n```\nlet y = \"y̆\";\n\nlet mut chars = y.chars();\n\nassert_eq!(Some('y'), chars.next()); // not 'y̆'\nassert_eq!(Some('\\u{0306}'), chars.next());\n\nassert_eq!(None, chars.next());\n```","links":{"prim@char":"1:15883:2999"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Chars","id":"2:49759:5467","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:3530:5074":{"id":"2:3530:5074","crate_id":2,"name":"ShlAssign","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3532:1245"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:3512:3476":{"id":"2:3512:3476","crate_id":2,"name":"Shr","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3514:183","2:3515:1247"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"5:6165:2005":{"id":"5:6165:2005","crate_id":5,"name":"replace","span":null,"visibility":"public","docs":"Replaces all matches of a pattern with another string.\n\n`replace` creates a new [`String`], and copies the data from this string slice into it.\nWhile doing so, it attempts to find matches of a pattern. If it finds any, it\nreplaces them with the replacement string slice.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"this is old\";\n\nassert_eq!(\"this is new\", s.replace(\"old\", \"new\"));\nassert_eq!(\"than an old\", s.replace(\"is\", \"an\"));\n```\n\nWhen the pattern doesn't match:\n\n```\nlet s = \"this is old\";\nassert_eq!(s, s.replace(\"cookie monster\", \"little lamb\"));\n```","links":{"`String`":"5:8472:220"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the replaced string as a new allocation, \\\n                  without modifying the original\"]","#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["from",{"kind":"generic","inner":"P"}],["to",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:8472:220","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13342:5139","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"5:5910:5637":{"id":"5:5910:5637","crate_id":5,"name":"Join","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["5:5912:183","5:5913:34334"],"generics":{"params":[{"name":"Separator","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"5:6187:2303":{"id":"5:6187:2303","crate_id":5,"name":"to_ascii_lowercase","span":null,"visibility":"public","docs":"Returns a copy of this string where each character is mapped to its\nASCII lower case equivalent.\n\nASCII letters 'A' to 'Z' are mapped to 'a' to 'z',\nbut non-ASCII letters are unchanged.\n\nTo lowercase the value in-place, use [`make_ascii_lowercase`].\n\nTo lowercase ASCII characters in addition to non-ASCII characters, use\n[`to_lowercase`].\n\n# Examples\n\n```\nlet s = \"Grüße, Jürgen ❤\";\n\nassert_eq!(\"grüße, jürgen ❤\", s.to_ascii_lowercase());\n```\n\n[`make_ascii_lowercase`]: str::make_ascii_lowercase\n[`to_lowercase`]: #method.to_lowercase","links":{"str::make_ascii_lowercase":"2:13829:4456"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use = \"to lowercase the value in-place, use `make_ascii_lowercase()`\"]","#[stable(feature = \"ascii_methods_on_intrinsics\", since = \"1.23.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:8472:220","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:3437:3479":{"id":"2:3437:3479","crate_id":2,"name":"Sub","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3439:183","2:3440:1368"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:13734:33267":{"id":"2:13734:33267","crate_id":2,"name":"split_whitespace","span":null,"visibility":"public","docs":"Splits a string slice by whitespace.\n\nThe iterator returned will return string slices that are sub-slices of\nthe original string slice, separated by any amount of whitespace.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`. If you only want to split on ASCII whitespace\ninstead, use [`split_ascii_whitespace`].\n\n[`split_ascii_whitespace`]: str::split_ascii_whitespace\n\n# Examples\n\nBasic usage:\n\n```\nlet mut iter = \"A few words\".split_whitespace();\n\nassert_eq!(Some(\"A\"), iter.next());\nassert_eq!(Some(\"few\"), iter.next());\nassert_eq!(Some(\"words\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nAll kinds of whitespace are considered:\n\n```\nlet mut iter = \" Mary   had\\ta\\u{2009}little  \\n\\t lamb\".split_whitespace();\nassert_eq!(Some(\"Mary\"), iter.next());\nassert_eq!(Some(\"had\"), iter.next());\nassert_eq!(Some(\"a\"), iter.next());\nassert_eq!(Some(\"little\"), iter.next());\nassert_eq!(Some(\"lamb\"), iter.next());\n\nassert_eq!(None, iter.next());\n```","links":{"str::split_ascii_whitespace":"2:13735:33257"},"attrs":["#[must_use =\n\"this returns the split string as an iterator, \\\n                  without modifying the original\"]","#[stable(feature = \"split_whitespace\", since = \"1.1.0\")]","#[rustc_diagnostic_item = \"str_split_whitespace\"]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"SplitWhitespace","id":"2:50063:5482","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:23763:5101":{"id":"2:23763:5101","crate_id":2,"name":"SimdPartialOrd","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:23764:1283","2:23765:1282","2:23766:1280","2:23767:1279"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"name":"SimdPartialEq","id":"2:23175:5291","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:8636:5218":{"id":"2:8636:5218","crate_id":2,"name":"Product","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:8638:4124"],"generics":{"params":[{"name":"A","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:3829:138":{"id":"2:3829:138","crate_id":2,"name":"FromResidual","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3831:691"],"generics":{"params":[{"name":"R","kind":{"type":{"bounds":[],"default":{"kind":"qualified_path","inner":{"name":"Residual","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"Self"},"trait":{"name":"Try","id":"2:3824:229","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:2917:185":{"id":"2:2917:185","crate_id":2,"name":"PartialEq","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:2919:608","2:2920:913"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"Rhs"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:3369:3383","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"bounds":[],"implementations":[]}},"2:13756:58822":{"id":"2:13756:58822","crate_id":2,"name":"split","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by\ncharacters matched by a pattern.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rsplit`] method can be used.\n\n[`rsplit`]: str::rsplit\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".split(' ').collect();\nassert_eq!(v, [\"Mary\", \"had\", \"a\", \"little\", \"lamb\"]);\n\nlet v: Vec<&str> = \"\".split('X').collect();\nassert_eq!(v, [\"\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".split('X').collect();\nassert_eq!(v, [\"lion\", \"\", \"tiger\", \"leopard\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".split(\"::\").collect();\nassert_eq!(v, [\"lion\", \"tiger\", \"leopard\"]);\n\nlet v: Vec<&str> = \"abc1def2ghi\".split(char::is_numeric).collect();\nassert_eq!(v, [\"abc\", \"def\", \"ghi\"]);\n\nlet v: Vec<&str> = \"lionXtigerXleopard\".split(char::is_uppercase).collect();\nassert_eq!(v, [\"lion\", \"tiger\", \"leopard\"]);\n```\n\nIf the pattern is a slice of chars, split on each occurrence of any of the characters:\n\n```\nlet v: Vec<&str> = \"2020-11-03 23:59\".split(&['-', ' ', ':', '@'][..]).collect();\nassert_eq!(v, [\"2020\", \"11\", \"03\", \"23\", \"59\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".split(|c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"abc\", \"def\", \"ghi\"]);\n```\n\nIf a string contains multiple contiguous separators, you will end up\nwith empty strings in the output:\n\n```\nlet x = \"||||a||b|c\".to_string();\nlet d: Vec<_> = x.split('|').collect();\n\nassert_eq!(d, &[\"\", \"\", \"\", \"\", \"a\", \"\", \"b\", \"c\"]);\n```\n\nContiguous separators are separated by the empty string.\n\n```\nlet x = \"(///)\".to_string();\nlet d: Vec<_> = x.split('/').collect();\n\nassert_eq!(d, &[\"(\", \"\", \"\", \")\"]);\n```\n\nSeparators at the start or end of a string are neighbored\nby empty strings.\n\n```\nlet d: Vec<_> = \"010\".split(\"0\").collect();\nassert_eq!(d, &[\"\", \"1\", \"\"]);\n```\n\nWhen the empty string is used as a separator, it separates\nevery character in the string, along with the beginning\nand end of the string.\n\n```\nlet f: Vec<_> = \"rust\".split(\"\").collect();\nassert_eq!(f, &[\"\", \"r\", \"u\", \"s\", \"t\", \"\"]);\n```\n\nContiguous separators can lead to possibly surprising behavior\nwhen whitespace is used as the separator. This code is correct:\n\n```\nlet x = \"    a  b c\".to_string();\nlet d: Vec<_> = x.split(' ').collect();\n\nassert_eq!(d, &[\"\", \"\", \"\", \"\", \"a\", \"\", \"b\", \"c\"]);\n```\n\nIt does _not_ give you:\n\n```,ignore\nassert_eq!(d, &[\"a\", \"b\", \"c\"]);\n```\n\nUse [`split_whitespace`] for this behavior.\n\n[`split_whitespace`]: str::split_whitespace","links":{"prim@char":"1:15883:2999","`DoubleEndedIterator`":"2:8717:121","str::split_whitespace":"2:13734:33267","str::rsplit":"2:13762:58825","self::pattern":"2:13332:5140"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Split","id":"2:49789:4706","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13342:5139","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:6647:4668":{"id":"1:6647:4668","crate_id":1,"name":"FromRawFd","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:6648:58636"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:3447:3449":{"id":"2:3447:3449","crate_id":2,"name":"Div","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3449:183","2:3450:563"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:3501:4818":{"id":"2:3501:4818","crate_id":2,"name":"BitXor","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3503:183","2:3504:362"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:14540:4471":{"id":"2:14540:4471","crate_id":2,"name":"Allocator","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":true,"items":["2:14541:60346","2:14542:60347","2:14543:60348","2:14544:60349","2:14545:60350","2:14546:60351","2:14547:4106"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:3171:150":{"id":"2:3171:150","crate_id":2,"name":"Into","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3173:1647"],"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"5:6164:63596":{"id":"5:6164:63596","crate_id":5,"name":"into_boxed_bytes","span":null,"visibility":"public","docs":"Converts a `Box<str>` into a `Box<[u8]>` without copying or allocating.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"this is a string\";\nlet boxed_str = s.to_owned().into_boxed_str();\nlet boxed_bytes = boxed_str.into_boxed_bytes();\nassert_eq!(*boxed_bytes, *s.as_bytes());\n```","links":{},"attrs":["#[stable(feature = \"str_box_extras\", since = \"1.20.0\")]","#[must_use = \"`self` will be dropped if the result is not used\"]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"resolved_path","inner":{"name":"Box","id":"5:444:1823","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}},{"type":{"kind":"resolved_path","inner":{"name":"Global","id":"5:8217:4472","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}]],"output":{"kind":"resolved_path","inner":{"name":"Box","id":"5:444:1823","args":{"angle_bracketed":{"args":[{"type":{"kind":"slice","inner":{"kind":"primitive","inner":"u8"}}},{"type":{"kind":"resolved_path","inner":{"name":"Global","id":"5:8217:4472","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:10513:3352":{"id":"2:10513:3352","crate_id":2,"name":"Write","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:10514:1549","2:10515:58723","2:10517:58724"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"21:816:3376":{"id":"21:816:3376","crate_id":21,"name":"MultiSpan","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["21:817:63953"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:13799:62954":{"id":"2:13799:62954","crate_id":2,"name":"trim_end","span":null,"visibility":"public","docs":"Returns a string slice with trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Text directionality\n\nA string is a sequence of bytes. `end` in this context means the last\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be right side, and for right-to-left languages like\nArabic or Hebrew, this will be the left side.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\nassert_eq!(\"\\n Hello\\tworld\", s.trim_end());\n```\n\nDirectionality:\n\n```\nlet s = \"  English  \";\nassert!(Some('h') == s.trim_end().chars().rev().next());\n\nlet s = \"  עברית  \";\nassert!(Some('ת') == s.trim_end().chars().rev().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[stable(feature = \"trim_direction\", since = \"1.30.0\")]","#[rustc_diagnostic_item = \"str_trim_end\"]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13721:58792":{"id":"2:13721:58792","crate_id":2,"name":"get_mut","span":null,"visibility":"public","docs":"Returns a mutable subslice of `str`.\n\nThis is the non-panicking alternative to indexing the `str`. Returns\n[`None`] whenever equivalent indexing operation would panic.\n\n# Examples\n\n```\nlet mut v = String::from(\"hello\");\n// correct length\nassert!(v.get_mut(0..5).is_some());\n// out of bounds\nassert!(v.get_mut(..42).is_none());\nassert_eq!(Some(\"he\"), v.get_mut(0..2).map(|v| &*v));\n\nassert_eq!(\"hello\", v);\n{\n    let s = v.get_mut(0..2);\n    let s = s.map(|s| {\n        s.make_ascii_uppercase();\n        &*s\n    });\n    assert_eq!(Some(\"HE\"), s);\n}\nassert_eq!(\"HEllo\", v);\n```","links":{"`None`":"2:47810:176"},"attrs":["#[stable(feature = \"str_checked_slicing\", since = \"1.20.0\")]","#[rustc_const_unstable(feature = \"const_slice_index\", issue = \"none\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["i",{"kind":"generic","inner":"I"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:47808:178","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"qualified_path","inner":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"I"},"trait":{"name":"SliceIndex","id":"2:11205:218","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}}}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"2:11205:218","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:4095:68":{"id":"2:4095:68","crate_id":2,"name":"Any","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:4096:1443"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"outlives":"'static"}],"implementations":[]}},"2:3475:5127":{"id":"2:3475:5127","crate_id":2,"name":"DivAssign","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3477:564"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:13809:15835":{"id":"2:13809:15835","crate_id":2,"name":"strip_prefix","span":null,"visibility":"public","docs":"Returns a string slice with the prefix removed.\n\nIf the string starts with the pattern `prefix`, returns substring after the prefix, wrapped\nin `Some`.  Unlike `trim_start_matches`, this method removes the prefix exactly once.\n\nIf the string does not start with `prefix`, returns `None`.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nassert_eq!(\"foo:bar\".strip_prefix(\"foo:\"), Some(\"bar\"));\nassert_eq!(\"foo:bar\".strip_prefix(\"bar\"), None);\nassert_eq!(\"foofoo\".strip_prefix(\"foo\"), Some(\"foo\"));\n```","links":{"self::pattern":"2:13332:5140","prim@char":"1:15883:2999"},"attrs":["#[must_use =\n\"this returns the remaining substring as a new slice, \\\n                  without modifying the original\"]","#[stable(feature = \"str_strip\", since = \"1.45.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["prefix",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:47808:178","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13342:5139","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:3587:117":{"id":"2:3587:117","crate_id":2,"name":"Deref","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3588:226","2:3589:548"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:3103:5132":{"id":"2:3103:5132","crate_id":2,"name":"FloatToInt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":[],"generics":{"params":[{"name":"Int","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"name":"Sealed","id":"2:3102:4677","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:23238:4789":{"id":"2:23238:4789","crate_id":2,"name":"SupportedLaneCount","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"name":"Sealed","id":"2:23228:4677","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"1:4410:4696":{"id":"1:4410:4696","crate_id":1,"name":"Read","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:4411:4499","1:4412:58469","1:4414:58470","1:4415:58471","1:4416:4697","1:4417:58472","1:4418:57715","1:4420:58473","1:4421:4106","1:4422:4836","1:4423:2074","1:4425:2201"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:8632:5216":{"id":"2:8632:5216","crate_id":2,"name":"Sum","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:8634:2894"],"generics":{"params":[{"name":"A","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:6841:4680":{"id":"1:6841:4680","crate_id":1,"name":"TcpStreamExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:6842:57917","1:6843:57918"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"name":"Sealed","id":"1:10416:4677","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:13717:310":{"id":"2:13717:310","crate_id":2,"name":"as_ptr","span":null,"visibility":"public","docs":"Converts a string slice to a raw pointer.\n\nAs string slices are a slice of bytes, the raw pointer points to a\n[`u8`]. This pointer will be pointing to the first byte of the string\nslice.\n\nThe caller must ensure that the returned pointer is never written to.\nIf you need to mutate the contents of the string slice, use [`as_mut_ptr`].\n\n[`as_mut_ptr`]: str::as_mut_ptr\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"Hello\";\nlet ptr = s.as_ptr();\n```","links":{"`u8`":"1:15900:3013","str::as_mut_ptr":"2:13718:58795"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]","#[rustc_const_stable(feature = \"rustc_str_as_ptr\", since = \"1.32.0\")]","#[must_use]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"raw_pointer","inner":{"mutable":false,"type":{"kind":"primitive","inner":"u8"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:6219:4676":{"id":"1:6219:4676","crate_id":1,"name":"CommandExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:6220:5002","1:6221:5003","1:6222:57642","1:6223:57782","1:6225:57786","1:6227:57783","1:6228:57784","1:6230:57785"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"name":"Sealed","id":"1:10416:4677","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"5:6184:63600":{"id":"5:6184:63600","crate_id":5,"name":"into_string","span":null,"visibility":"public","docs":"Converts a [`Box<str>`] into a [`String`] without copying or allocating.\n\n# Examples\n\nBasic usage:\n\n```\nlet string = String::from(\"birthday gift\");\nlet boxed_str = string.clone().into_boxed_str();\n\nassert_eq!(boxed_str.into_string(), string);\n```","links":{"`Box<str>`":"5:444:1823","`String`":"5:8472:220"},"attrs":["#[stable(feature = \"box_str\", since = \"1.4.0\")]","#[must_use = \"`self` will be dropped if the result is not used\"]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"resolved_path","inner":{"name":"Box","id":"5:444:1823","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}},{"type":{"kind":"resolved_path","inner":{"name":"Global","id":"5:8217:4472","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:8472:220","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:1311:1856":{"id":"0:1311:1856","crate_id":0,"name":"Symbol","span":{"filename":"src/internals/symbol.rs","begin":[5,0],"end":[5,32]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"struct","inner":{"kind":{"tuple":[null]},"generics":{"params":[],"where_predicates":[]},"impls":[]}},"5:6498:228":{"id":"5:6498:228","crate_id":5,"name":"ToString","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["5:6499:1410"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:10846:4816":{"id":"2:10846:4816","crate_id":2,"name":"BuildHasher","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:10847:147","2:10848:34578","2:10849:57583"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:13737:62944":{"id":"2:13737:62944","crate_id":2,"name":"lines_any","span":null,"visibility":"public","docs":"An iterator over the lines of a string.","links":{},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]","#[deprecated(since = \"1.4.0\", note = \"use lines() instead now\")]","#[allow(deprecated)]"],"deprecation":{"since":"1.4.0","note":"use lines() instead now"},"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"LinesAny","id":"2:50053:5481","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:144":{"id":"0:144","crate_id":0,"name":null,"span":{"filename":"src/internals/attr.rs","begin":[23,0],"end":[23,36]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"import","inner":{"source":"internals::case::RenameRule","name":"RenameRule","id":"0:1286:1853","glob":false}},"2:13812:58833":{"id":"2:13812:58833","crate_id":2,"name":"strip_suffix","span":null,"visibility":"public","docs":"Returns a string slice with the suffix removed.\n\nIf the string ends with the pattern `suffix`, returns the substring before the suffix,\nwrapped in `Some`.  Unlike `trim_end_matches`, this method removes the suffix exactly once.\n\nIf the string does not end with `suffix`, returns `None`.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nassert_eq!(\"bar:foo\".strip_suffix(\":foo\"), Some(\"bar\"));\nassert_eq!(\"bar:foo\".strip_suffix(\"bar\"), None);\nassert_eq!(\"foofoo\".strip_suffix(\"foo\"), Some(\"foo\"));\n```","links":{"prim@char":"1:15883:2999","self::pattern":"2:13332:5140"},"attrs":["#[must_use =\n\"this returns the remaining substring as a new slice, \\\n                  without modifying the original\"]","#[stable(feature = \"str_strip\", since = \"1.45.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["suffix",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:47808:178","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13342:5139","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"2:13342:5139","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:13357:5143","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13801:62955":{"id":"2:13801:62955","crate_id":2,"name":"trim_left","span":null,"visibility":"public","docs":"Returns a string slice with leading whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`.\n\n# Text directionality\n\nA string is a sequence of bytes. 'Left' in this context means the first\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _right_ side, not the left.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \" Hello\\tworld\\t\";\n\nassert_eq!(\"Hello\\tworld\\t\", s.trim_left());\n```\n\nDirectionality:\n\n```\nlet s = \"  English\";\nassert!(Some('E') == s.trim_left().chars().next());\n\nlet s = \"  עברית\";\nassert!(Some('ע') == s.trim_left().chars().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[stable(feature = \"rust1\", since = \"1.0.0\")]","#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_start`\", suggestion\n= \"trim_start\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_start`"},"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:3824:229":{"id":"2:3824:229","crate_id":2,"name":"Try","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3825:183","2:3826:5201","2:3827:690","2:3828:375"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"name":"FromResidual","id":"2:3829:138","args":{"angle_bracketed":{"args":[{"type":{"kind":"qualified_path","inner":{"name":"Residual","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"Self"},"trait":{"name":"Try","id":"2:3824:229","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:13709:62939":{"id":"2:13709:62939","crate_id":2,"name":"is_char_boundary","span":null,"visibility":"public","docs":"Checks that `index`-th byte is the first byte in a UTF-8 code point\nsequence or the end of the string.\n\nThe start and end of the string (when `index == self.len()`) are\nconsidered to be boundaries.\n\nReturns `false` if `index` is greater than `self.len()`.\n\n# Examples\n\n```\nlet s = \"Löwe 老虎 Léopard\";\nassert!(s.is_char_boundary(0));\n// start of `老`\nassert!(s.is_char_boundary(6));\nassert!(s.is_char_boundary(s.len()));\n\n// second byte of `ö`\nassert!(!s.is_char_boundary(2));\n\n// third byte of `老`\nassert!(!s.is_char_boundary(8));\n```","links":{},"attrs":["#[must_use]","#[stable(feature = \"is_char_boundary\", since = \"1.9.0\")]","#[rustc_const_unstable(feature = \"const_is_char_boundary\", issue = \"none\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["index",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13351:5142":{"id":"2:13351:5142","crate_id":2,"name":"Searcher","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":true,"items":["2:13353:5162","2:13354:928","2:13355:62204","2:13356:62205"],"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:13824:1845":{"id":"2:13824:1845","crate_id":2,"name":"parse","span":null,"visibility":"public","docs":"Parses this string slice into another type.\n\nBecause `parse` is so general, it can cause problems with type\ninference. As such, `parse` is one of the few times you'll see\nthe syntax affectionately known as the 'turbofish': `::<>`. This\nhelps the inference algorithm understand specifically which type\nyou're trying to parse into.\n\n`parse` can parse into any type that implements the [`FromStr`] trait.\n\n# Errors\n\nWill return [`Err`] if it's not possible to parse this string slice into\nthe desired type.\n\n[`Err`]: FromStr::Err\n\n# Examples\n\nBasic usage\n\n```\nlet four: u32 = \"4\".parse().unwrap();\n\nassert_eq!(4, four);\n```\n\nUsing the 'turbofish' instead of annotating `four`:\n\n```\nlet four = \"4\".parse::<u32>();\n\nassert_eq!(Ok(4), four);\n```\n\nFailing to parse:\n\n```\nlet nope = \"j\".parse::<u32>();\n\nassert!(nope.is_err());\n```","links":{"FromStr::Err":"2:13272:127","`FromStr`":"2:13271:3284"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Result","id":"2:47933:207","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"F"}},{"type":{"kind":"qualified_path","inner":{"name":"Err","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"F"},"trait":{"name":"FromStr","id":"2:13271:3284","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"F"},"bounds":[{"trait_bound":{"trait":{"name":"FromStr","id":"2:13271:3284","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:3526:5088":{"id":"2:3526:5088","crate_id":2,"name":"BitXorAssign","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3528:363"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:9533:3701":{"id":"2:9533:3701","crate_id":2,"name":"UnwindSafe","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":true,"is_unsafe":false,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:11205:218":{"id":"2:11205:218","crate_id":2,"name":"SliceIndex","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":true,"items":["2:11207:183","2:11208:1868","2:11209:58792","2:11210:58793","2:11211:58794","2:11212:757","2:11213:758"],"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:3369:3383","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"bounds":[{"trait_bound":{"trait":{"name":"Sealed","id":"2:11196:4677","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:23049:5290":{"id":"2:23049:5290","crate_id":2,"name":"SimdFloat","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:23050:5099","2:23051:60950","2:23052:61196","2:23053:61197","2:23054:61198","2:23055:43808","2:23056:61199","2:23057:61200","2:23058:61201","2:23059:61202","2:23060:61203","2:23061:61204","2:23062:61205","2:23063:61206","2:23064:61207","2:23065:61208","2:23066:61000","2:23067:61209","2:23068:61210","2:23069:61211","2:23070:61212","2:23071:60951","2:23072:60952","2:23073:60953","2:23074:60954"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"name":"Copy","id":"2:3374:107","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Sealed","id":"2:23151:4677","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"1:5431:4776":{"id":"1:5431:4776","crate_id":1,"name":"OsStrExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:5432:6290","1:5433:2736"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"name":"Sealed","id":"1:10416:4677","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:8669:137":{"id":"2:8669:137","crate_id":2,"name":"FromIterator","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:8671:688"],"generics":{"params":[{"name":"A","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"24:153:1829":{"id":"24:153:1829","crate_id":24,"name":"Token","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"name":"Sealed","id":"24:160:4677","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:9534:3700":{"id":"2:9534:3700","crate_id":2,"name":"RefUnwindSafe","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":true,"is_unsafe":false,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:2922:125":{"id":"2:2922:125","crate_id":2,"name":"Eq","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"name":"PartialEq","id":"2:2917:185","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"Self"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:3168:74":{"id":"2:3168:74","crate_id":2,"name":"AsMut","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3170:2197"],"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:3369:3383","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"bounds":[],"implementations":[]}},"5:6171:63598":{"id":"5:6171:63598","crate_id":5,"name":"to_lowercase","span":null,"visibility":"public","docs":"Returns the lowercase equivalent of this string slice, as a new [`String`].\n\n'Lowercase' is defined according to the terms of the Unicode Derived Core Property\n`Lowercase`.\n\nSince some characters can expand into multiple characters when changing\nthe case, this function returns a [`String`] instead of modifying the\nparameter in-place.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"HELLO\";\n\nassert_eq!(\"hello\", s.to_lowercase());\n```\n\nA tricky example, with sigma:\n\n```\nlet sigma = \"Σ\";\n\nassert_eq!(\"σ\", sigma.to_lowercase());\n\n// but at the end of a word, it's ς, not σ:\nlet odysseus = \"ὈΔΥΣΣΕΎΣ\";\n\nassert_eq!(\"ὀδυσσεύς\", odysseus.to_lowercase());\n```\n\nLanguages without case are not changed:\n\n```\nlet new_year = \"农历新年\";\n\nassert_eq!(new_year, new_year.to_lowercase());\n```","links":{"`String`":"5:8472:220"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the lowercase string as a new String, \\\n                  without modifying the original\"]","#[stable(feature = \"unicode_case_mapping\", since = \"1.2.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:8472:220","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"20:117:1842":{"id":"20:117:1842","crate_id":20,"name":"ToTokens","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["20:118:2476","20:119:2218","20:120:1863"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:13815:62959":{"id":"2:13815:62959","crate_id":2,"name":"trim_end_matches","span":null,"visibility":"public","docs":"Returns a string slice with all suffixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. `end` in this context means the last\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be right side, and for right-to-left languages like\nArabic or Hebrew, this will be the left side.\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_end_matches('1'), \"11foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_end_matches(char::is_numeric), \"123foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_end_matches(x), \"12foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1fooX\".trim_end_matches(|c| c == '1' || c == 'X'), \"1foo\");\n```","links":{"prim@char":"1:15883:2999","self::pattern":"2:13332:5140"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[stable(feature = \"trim_direction\", since = \"1.30.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13342:5139","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"2:13342:5139","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:13357:5143","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13719:1868":{"id":"2:13719:1868","crate_id":2,"name":"get","span":null,"visibility":"public","docs":"Returns a subslice of `str`.\n\nThis is the non-panicking alternative to indexing the `str`. Returns\n[`None`] whenever equivalent indexing operation would panic.\n\n# Examples\n\n```\nlet v = String::from(\"🗻∈🌏\");\n\nassert_eq!(Some(\"🗻\"), v.get(0..4));\n\n// indices not on UTF-8 sequence boundaries\nassert!(v.get(1..).is_none());\nassert!(v.get(..8).is_none());\n\n// out of bounds\nassert!(v.get(..42).is_none());\n```","links":{"`None`":"2:47810:176"},"attrs":["#[stable(feature = \"str_checked_slicing\", since = \"1.20.0\")]","#[rustc_const_unstable(feature = \"const_slice_index\", issue = \"none\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["i",{"kind":"generic","inner":"I"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:47808:178","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"qualified_path","inner":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"I"},"trait":{"name":"SliceIndex","id":"2:11205:218","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}}}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"2:11205:218","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:3676:3271":{"id":"2:3676:3271","crate_id":2,"name":"IndexMut","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3678:758"],"generics":{"params":[{"name":"Idx","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"Idx"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:3369:3383","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"bounds":[{"trait_bound":{"trait":{"name":"Index","id":"2:3672:2263","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"Idx"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:13768:62946":{"id":"2:13768:62946","crate_id":2,"name":"rsplit_terminator","span":null,"visibility":"public","docs":"An iterator over substrings of `self`, separated by characters\nmatched by a pattern and yielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\nEquivalent to [`split`], except that the trailing substring is\nskipped if empty.\n\n[`split`]: str::split\n\nThis method can be used for string data that is _terminated_,\nrather than _separated_ by a pattern.\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a\nreverse search, and it will be double ended if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`split_terminator`] method can be\nused.\n\n[`split_terminator`]: str::split_terminator\n\n# Examples\n\n```\nlet v: Vec<&str> = \"A.B.\".rsplit_terminator('.').collect();\nassert_eq!(v, [\"B\", \"A\"]);\n\nlet v: Vec<&str> = \"A..B..\".rsplit_terminator(\".\").collect();\nassert_eq!(v, [\"\", \"B\", \"\", \"A\"]);\n\nlet v: Vec<&str> = \"A.B:C.D\".rsplit_terminator(&['.', ':'][..]).collect();\nassert_eq!(v, [\"D\", \"C\", \"B\", \"A\"]);\n```","links":{"self::pattern":"2:13332:5140","prim@char":"1:15883:2999","str::split_terminator":"2:13765:62945","str::split":"2:13756:58822"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"RSplitTerminator","id":"2:49857:5473","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13342:5139","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"2:13342:5139","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:13357:5143","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13723:58793":{"id":"2:13723:58793","crate_id":2,"name":"get_unchecked","span":null,"visibility":"public","docs":"Returns an unchecked subslice of `str`.\n\nThis is the unchecked alternative to indexing the `str`.\n\n# Safety\n\nCallers of this function are responsible that these preconditions are\nsatisfied:\n\n* The starting index must not exceed the ending index;\n* Indexes must be within bounds of the original slice;\n* Indexes must lie on UTF-8 sequence boundaries.\n\nFailing that, the returned string slice may reference invalid memory or\nviolate the invariants communicated by the `str` type.\n\n# Examples\n\n```\nlet v = \"🗻∈🌏\";\nunsafe {\n    assert_eq!(\"🗻\", v.get_unchecked(0..4));\n    assert_eq!(\"∈\", v.get_unchecked(4..7));\n    assert_eq!(\"🌏\", v.get_unchecked(7..11));\n}\n```","links":{},"attrs":["#[stable(feature = \"str_checked_slicing\", since = \"1.20.0\")]","#[rustc_const_unstable(feature = \"const_slice_index\", issue = \"none\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["i",{"kind":"generic","inner":"I"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"qualified_path","inner":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"I"},"trait":{"name":"SliceIndex","id":"2:11205:218","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}}}}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"2:11205:218","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}},"2:13783:3079":{"id":"2:13783:3079","crate_id":2,"name":"matches","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within the given string\nslice.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rmatches`] method can be used.\n\n[`rmatches`]: str::matches\n\n# Examples\n\nBasic usage:\n\n```\nlet v: Vec<&str> = \"abcXXXabcYYYabc\".matches(\"abc\").collect();\nassert_eq!(v, [\"abc\", \"abc\", \"abc\"]);\n\nlet v: Vec<&str> = \"1abc2abc3\".matches(char::is_numeric).collect();\nassert_eq!(v, [\"1\", \"2\", \"3\"]);\n```","links":{"prim@char":"1:15883:2999","self::pattern":"2:13332:5140","`DoubleEndedIterator`":"2:8717:121","str::matches":"2:13783:3079"},"attrs":["#[stable(feature = \"str_matches\", since = \"1.2.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Matches","id":"2:49993:5479","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13342:5139","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13833:62962":{"id":"2:13833:62962","crate_id":2,"name":"escape_unicode","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_unicode`].\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"❤\\n!\".escape_unicode() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"❤\\n!\".escape_unicode());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"\\\\u{{2764}}\\\\u{{a}}\\\\u{{21}}\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"❤\\n!\".escape_unicode().to_string(), \"\\\\u{2764}\\\\u{a}\\\\u{21}\");\n```","links":{"`char::escape_unicode`":"2:5443:62962"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]","#[stable(feature = \"str_escape\", since = \"1.34.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"EscapeUnicode","id":"2:50106:5486","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13829:4456":{"id":"2:13829:4456","crate_id":2,"name":"make_ascii_lowercase","span":null,"visibility":"public","docs":"Converts this string to its ASCII lower case equivalent in-place.\n\nASCII letters 'A' to 'Z' are mapped to 'a' to 'z',\nbut non-ASCII letters are unchanged.\n\nTo return a new lowercased value without modifying the existing one, use\n[`to_ascii_lowercase()`].\n\n[`to_ascii_lowercase()`]: #method.to_ascii_lowercase\n\n# Examples\n\n```\nlet mut s = String::from(\"GRÜßE, JÜRGEN ❤\");\n\ns.make_ascii_lowercase();\n\nassert_eq!(\"grÜße, jÜrgen ❤\", s);\n```","links":{},"attrs":["#[stable(feature = \"ascii_methods_on_intrinsics\", since = \"1.23.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"5:6168:63597":{"id":"5:6168:63597","crate_id":5,"name":"replacen","span":null,"visibility":"public","docs":"Replaces first N matches of a pattern with another string.\n\n`replacen` creates a new [`String`], and copies the data from this string slice into it.\nWhile doing so, it attempts to find matches of a pattern. If it finds any, it\nreplaces them with the replacement string slice at most `count` times.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"foo foo 123 foo\";\nassert_eq!(\"new new 123 foo\", s.replacen(\"foo\", \"new\", 2));\nassert_eq!(\"faa fao 123 foo\", s.replacen('o', \"a\", 3));\nassert_eq!(\"foo foo new23 foo\", s.replacen(char::is_numeric, \"new\", 1));\n```\n\nWhen the pattern doesn't match:\n\n```\nlet s = \"this is old\";\nassert_eq!(s, s.replacen(\"cookie monster\", \"little lamb\", 10));\n```","links":{"`String`":"5:8472:220"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the replaced string as a new allocation, \\\n                  without modifying the original\"]","#[stable(feature = \"str_replacen\", since = \"1.16.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}],["to",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}],["count",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:8472:220","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13342:5139","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:3496:3999":{"id":"2:3496:3999","crate_id":2,"name":"BitOr","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3498:183","2:3499:359"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:4146:5111":{"id":"2:4146:5111","crate_id":2,"name":"Provider","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:4147:57535"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:4896:4461":{"id":"2:4896:4461","crate_id":2,"name":"AsyncIterator","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:4897:1824","2:4898:61942","2:4899:4093"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:10563:110":{"id":"2:10563:110","crate_id":2,"name":"Debug","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:10564:664"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"24:2975:1846":{"id":"24:2975:1846","crate_id":24,"name":"Parse","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["24:2976:1845"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:13789:62950":{"id":"2:13789:62950","crate_id":2,"name":"match_indices","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within this string\nslice as well as the index that the match starts at.\n\nFor matches of `pat` within `self` that overlap, only the indices\ncorresponding to the first match are returned.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rmatch_indices`] method can be used.\n\n[`rmatch_indices`]: str::rmatch_indices\n\n# Examples\n\nBasic usage:\n\n```\nlet v: Vec<_> = \"abcXXXabcYYYabc\".match_indices(\"abc\").collect();\nassert_eq!(v, [(0, \"abc\"), (6, \"abc\"), (12, \"abc\")]);\n\nlet v: Vec<_> = \"1abcabc2\".match_indices(\"abc\").collect();\nassert_eq!(v, [(1, \"abc\"), (4, \"abc\")]);\n\nlet v: Vec<_> = \"ababa\".match_indices(\"aba\").collect();\nassert_eq!(v, [(0, \"aba\")]); // only the first `aba`\n```","links":{"str::rmatch_indices":"2:13792:62951","prim@char":"1:15883:2999","`DoubleEndedIterator`":"2:8717:121","self::pattern":"2:13332:5140"},"attrs":["#[stable(feature = \"str_match_indices\", since = \"1.5.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"MatchIndices","id":"2:49939:5476","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13342:5139","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:3467:4929":{"id":"2:3467:4929","crate_id":2,"name":"SubAssign","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3469:1369"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:8874:158":{"id":"2:8874:158","crate_id":2,"name":"Iterator","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:8875:1824","2:8876:928","2:8877:4092","2:8880:4093","2:8881:500","2:8883:2136","2:8886:4094","2:8887:4095","2:8888:4096","2:8889:2074","2:8891:2601","2:8893:4097","2:8894:4098","2:8896:847","2:8899:4099","2:8906:2434","2:8908:2430","2:8911:1838","2:8912:2889","2:8913:4100","2:8915:4101","2:8917:4102","2:8920:1321","2:8921:2201","2:8922:4103","2:8926:1825","2:8929:1820","2:8930:4104","2:8931:4105","2:8933:4106","2:8934:1831","2:8936:4107","2:8939:4108","2:8941:4109","2:8951:4110","2:8966:4111","2:8968:4112","2:8972:4113","2:8981:2893","2:8984:4114","2:8986:4115","2:8989:282","2:8996:300","2:9003:2547","2:9010:4116","2:9019:4117","2:9029:1021","2:9036:4118","2:9043:4078","2:9044:4075","2:9045:4080","2:9057:4079","2:9064:4077","2:9076:4076","2:9083:4119","2:9084:4120","2:9089:4121","2:9092:2151","2:9095:4122","2:9096:4123","2:9098:2894","2:9100:4124","2:9102:421","2:9105:4125","2:9108:1004","2:9111:4126","2:9114:608","2:9117:4127","2:9120:913","2:9122:832","2:9124:797","2:9126:716","2:9128:700","2:9130:4128","2:9131:4129","2:9139:4130"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:13707:798":{"id":"2:13707:798","crate_id":2,"name":"len","span":null,"visibility":"public","docs":"Returns the length of `self`.\n\nThis length is in bytes, not [`char`]s or graphemes. In other words,\nit might not be what a human considers the length of the string.\n\n[`char`]: prim@char\n\n# Examples\n\nBasic usage:\n\n```\nlet len = \"foo\".len();\nassert_eq!(3, len);\n\nassert_eq!(\"ƒoo\".len(), 4); // fancy f!\nassert_eq!(\"ƒoo\".chars().count(), 3);\n```","links":{"prim@char":"1:15883:2999"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]","#[rustc_const_stable(feature = \"const_str_len\", since = \"1.39.0\")]","#[must_use]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:3835:5201":{"id":"2:3835:5201","crate_id":2,"name":"Residual","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3837:56711"],"generics":{"params":[{"name":"O","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:3442:5115":{"id":"2:3442:5115","crate_id":2,"name":"Mul","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3444:183","2:3445:898"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:10580:191":{"id":"2:10580:191","crate_id":2,"name":"Pointer","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:10581:664"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:13832:3362":{"id":"2:13832:3362","crate_id":2,"name":"escape_default","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_default`].\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"❤\\n!\".escape_default() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"❤\\n!\".escape_default());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"\\\\u{{2764}}\\\\n!\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"❤\\n!\".escape_default().to_string(), \"\\\\u{2764}\\\\n!\");\n```","links":{"`char::escape_default`":"2:5446:3362"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]","#[stable(feature = \"str_escape\", since = \"1.34.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"EscapeDefault","id":"2:50097:3363","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:3870:3342":{"id":"2:3870:3342","crate_id":2,"name":"CoerceUnsized","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":[],"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:3369:3383","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"bounds":[],"implementations":[]}},"2:13708:2082":{"id":"2:13708:2082","crate_id":2,"name":"is_empty","span":null,"visibility":"public","docs":"Returns `true` if `self` has a length of zero bytes.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\";\nassert!(s.is_empty());\n\nlet s = \"not empty\";\nassert!(!s.is_empty());\n```","links":{},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]","#[rustc_const_stable(feature = \"const_str_is_empty\", since = \"1.39.0\")]","#[must_use]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"20:18:3118":{"id":"20:18:3118","crate_id":20,"name":"TokenStreamExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["20:19:9288","20:21:63903","20:23:63904","20:26:63905"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"name":"Sealed","id":"20:44:4677","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:23768:17339":{"id":"2:23768:17339","crate_id":2,"name":"SimdOrd","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:23769:61211","2:23770:61210","2:23771:61212"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"name":"SimdPartialOrd","id":"2:23763:5101","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:13729:58814":{"id":"2:13729:58814","crate_id":2,"name":"split_at","span":null,"visibility":"public","docs":"Divide one string slice into two at an index.\n\nThe argument, `mid`, should be a byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get mutable string slices instead, see the [`split_at_mut`]\nmethod.\n\n[`split_at_mut`]: str::split_at_mut\n\n# Panics\n\nPanics if `mid` is not on a UTF-8 code point boundary, or if it is\npast the end of the last code point of the string slice.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"Per Martin-Löf\";\n\nlet (first, last) = s.split_at(3);\n\nassert_eq!(\"Per\", first);\nassert_eq!(\" Martin-Löf\", last);\n```","links":{"str::split_at_mut":"2:13730:58815"},"attrs":["#[must_use]","#[stable(feature = \"str_split_at\", since = \"1.4.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["mid",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"tuple","inner":[{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:3907:4463":{"id":"2:3907:4463","crate_id":2,"name":"DispatchFromDyn","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":[],"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:13718:58795":{"id":"2:13718:58795","crate_id":2,"name":"as_mut_ptr","span":null,"visibility":"public","docs":"Converts a mutable string slice to a raw pointer.\n\nAs string slices are a slice of bytes, the raw pointer points to a\n[`u8`]. This pointer will be pointing to the first byte of the string\nslice.\n\nIt is your responsibility to make sure that the string slice only gets\nmodified in a way that it remains valid UTF-8.","links":{"`u8`":"1:15900:3013"},"attrs":["#[stable(feature = \"str_as_mut_ptr\", since = \"1.36.0\")]","#[must_use]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"raw_pointer","inner":{"mutable":true,"type":{"kind":"primitive","inner":"u8"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:5567:4749":{"id":"1:5567:4749","crate_id":1,"name":"DirEntryExt2","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:5568:57909"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"name":"Sealed","id":"1:10416:4677","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:2953:179":{"id":"2:2953:179","crate_id":2,"name":"Ord","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:2954:421","2:2955:4078","2:2956:4075","2:2957:4083"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"name":"Eq","id":"2:2922:125","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"PartialOrd","id":"2:2963:186","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"Self"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:13828:4455":{"id":"2:13828:4455","crate_id":2,"name":"make_ascii_uppercase","span":null,"visibility":"public","docs":"Converts this string to its ASCII upper case equivalent in-place.\n\nASCII letters 'a' to 'z' are mapped to 'A' to 'Z',\nbut non-ASCII letters are unchanged.\n\nTo return a new uppercased value without modifying the existing one, use\n[`to_ascii_uppercase()`].\n\n[`to_ascii_uppercase()`]: #method.to_ascii_uppercase\n\n# Examples\n\n```\nlet mut s = String::from(\"Grüße, Jürgen ❤\");\n\ns.make_ascii_uppercase();\n\nassert_eq!(\"GRüßE, JüRGEN ❤\", s);\n```","links":{},"attrs":["#[stable(feature = \"ascii_methods_on_intrinsics\", since = \"1.23.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:8682:3386":{"id":"2:8682:3386","crate_id":2,"name":"Extend","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:8684:2150","2:8686:4090","2:8687:4091"],"generics":{"params":[{"name":"A","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:3611:2202":{"id":"2:3611:2202","crate_id":2,"name":"Drop","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3612:583"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:3376:224":{"id":"2:3376:224","crate_id":2,"name":"Sync","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":true,"is_unsafe":true,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:3272:128":{"id":"2:3272:128","crate_id":2,"name":"Error","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3273:5561","2:3275:57533","2:3276:57534","2:3277:57535"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"name":"Debug","id":"2:10563:110","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Display","id":"2:10570:120","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"1:6241:4780":{"id":"1:6241:4780","crate_id":1,"name":"ExitStatusExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:6242:60775","1:6243:8815","1:6244:60776","1:6245:60777","1:6246:60778","1:6247:60779"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"name":"Sealed","id":"1:10416:4677","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:23102:5095":{"id":"2:23102:5095","crate_id":2,"name":"SimdInt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:23103:5099","2:23104:60950","2:23105:1238","2:23106:1239","2:23107:43808","2:23108:60996","2:23109:60997","2:23110:60998","2:23111:60999","2:23112:61000","2:23113:60951","2:23114:60952","2:23115:60953","2:23116:60954","2:23117:60955","2:23118:60956","2:23119:60957"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"name":"Copy","id":"2:3374:107","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Sealed","id":"2:23151:4677","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:13765:62945":{"id":"2:13765:62945","crate_id":2,"name":"split_terminator","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by\ncharacters matched by a pattern.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\nEquivalent to [`split`], except that the trailing substring\nis skipped if empty.\n\n[`split`]: str::split\n\nThis method can be used for string data that is _terminated_,\nrather than _separated_ by a pattern.\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rsplit_terminator`] method can be used.\n\n[`rsplit_terminator`]: str::rsplit_terminator\n\n# Examples\n\nBasic usage:\n\n```\nlet v: Vec<&str> = \"A.B.\".split_terminator('.').collect();\nassert_eq!(v, [\"A\", \"B\"]);\n\nlet v: Vec<&str> = \"A..B..\".split_terminator(\".\").collect();\nassert_eq!(v, [\"A\", \"\", \"B\", \"\"]);\n\nlet v: Vec<&str> = \"A.B:C.D\".split_terminator(&['.', ':'][..]).collect();\nassert_eq!(v, [\"A\", \"B\", \"C\", \"D\"]);\n```","links":{"str::rsplit_terminator":"2:13768:62946","`DoubleEndedIterator`":"2:8717:121","self::pattern":"2:13332:5140","prim@char":"1:15883:2999","str::split":"2:13756:58822"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"SplitTerminator","id":"2:49839:5472","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13342:5139","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13735:33257":{"id":"2:13735:33257","crate_id":2,"name":"split_ascii_whitespace","span":null,"visibility":"public","docs":"Splits a string slice by ASCII whitespace.\n\nThe iterator returned will return string slices that are sub-slices of\nthe original string slice, separated by any amount of ASCII whitespace.\n\nTo split by Unicode `Whitespace` instead, use [`split_whitespace`].\n\n[`split_whitespace`]: str::split_whitespace\n\n# Examples\n\nBasic usage:\n\n```\nlet mut iter = \"A few words\".split_ascii_whitespace();\n\nassert_eq!(Some(\"A\"), iter.next());\nassert_eq!(Some(\"few\"), iter.next());\nassert_eq!(Some(\"words\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nAll kinds of ASCII whitespace are considered:\n\n```\nlet mut iter = \" Mary   had\\ta little  \\n\\t lamb\".split_ascii_whitespace();\nassert_eq!(Some(\"Mary\"), iter.next());\nassert_eq!(Some(\"had\"), iter.next());\nassert_eq!(Some(\"a\"), iter.next());\nassert_eq!(Some(\"little\"), iter.next());\nassert_eq!(Some(\"lamb\"), iter.next());\n\nassert_eq!(None, iter.next());\n```","links":{"str::split_whitespace":"2:13734:33267"},"attrs":["#[must_use =\n\"this returns the split string as an iterator, \\\n                  without modifying the original\"]","#[stable(feature = \"split_ascii_whitespace\", since = \"1.34.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"SplitAsciiWhitespace","id":"2:50072:5483","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:6467:4746":{"id":"1:6467:4746","crate_id":1,"name":"MetadataExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:6468:57370","1:6469:8738","1:6470:8739","1:6471:8741","1:6472:8740","1:6473:8742","1:6474:8743","1:6475:8745","1:6476:7007","1:6477:8748","1:6478:8749","1:6479:8750","1:6480:8751","1:6481:8752","1:6482:8753","1:6483:8746","1:6484:8747"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:3174:136":{"id":"2:3174:136","crate_id":2,"name":"From","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3176:685"],"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:4492:4702":{"id":"1:4492:4702","crate_id":1,"name":"BufRead","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:4493:60811","1:4494:60812","1:4495:60814","1:4497:4701","1:4498:60813","1:4500:58822","1:4501:5924"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"name":"Read","id":"1:4410:4696","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:3432:3286":{"id":"2:3432:3286","crate_id":2,"name":"Add","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3434:183","2:3435:270"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:3471:5125":{"id":"2:3471:5125","crate_id":2,"name":"MulAssign","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3473:899"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:24072:5100":{"id":"2:24072:5100","crate_id":2,"name":"SimdElement","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":true,"items":["2:24073:5099"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"name":"Sealed","id":"2:24068:4677","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Copy","id":"2:3374:107","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"1:7602:4874":{"id":"1:7602:4874","crate_id":1,"name":"Termination","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:7603:57692"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:3479:5129":{"id":"2:3479:5129","crate_id":2,"name":"RemAssign","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3481:1111"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:3373:221":{"id":"2:3373:221","crate_id":2,"name":"StructuralEq","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:504":{"id":"0:504","crate_id":0,"name":null,"span":{"filename":"src/internals/mod.rs","begin":[8,0],"end":[8,41]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"import","inner":{"source":"self::receiver::replace_receiver","name":"replace_receiver","id":"0:480:1757","glob":false}},"2:3369:3383":{"id":"2:3369:3383","crate_id":2,"name":"Sized","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:3812:5542":{"id":"2:3812:5542","crate_id":2,"name":"OneSidedRange","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":[],"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:3369:3383","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"bounds":[{"trait_bound":{"trait":{"name":"RangeBounds","id":"2:3743:3283","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:23175:5291":{"id":"2:23175:5291","crate_id":2,"name":"SimdPartialEq","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:23176:5099","2:23177:1260","2:23178:1285"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:6339:4782":{"id":"1:6339:4782","crate_id":1,"name":"JoinHandleExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:6340:60940","1:6341:60941"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"24:2881:6443":{"id":"24:2881:6443","crate_id":24,"name":"Speculative","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["24:2882:64009"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:13362:5144":{"id":"2:13362:5144","crate_id":2,"name":"DoubleEndedSearcher","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":[],"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:13357:5143","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:14456:142":{"id":"2:14456:142","crate_id":2,"name":"GlobalAlloc","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":true,"items":["2:14457:283","2:14458:523","2:14459:286","2:14460:1087"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:13759:33134":{"id":"2:13759:33134","crate_id":2,"name":"split_inclusive","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by\ncharacters matched by a pattern. Differs from the iterator produced by\n`split` in that `split_inclusive` leaves the matched part as the\nterminator of the substring.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\\nlittle lamb\\nlittle lamb.\"\n    .split_inclusive('\\n').collect();\nassert_eq!(v, [\"Mary had a little lamb\\n\", \"little lamb\\n\", \"little lamb.\"]);\n```\n\nIf the last element of the string is matched,\nthat element will be considered the terminator of the preceding substring.\nThat substring will be the last item returned by the iterator.\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\\nlittle lamb\\nlittle lamb.\\n\"\n    .split_inclusive('\\n').collect();\nassert_eq!(v, [\"Mary had a little lamb\\n\", \"little lamb\\n\", \"little lamb.\\n\"]);\n```","links":{"prim@char":"1:15883:2999","self::pattern":"2:13332:5140"},"attrs":["#[stable(feature = \"split_inclusive\", since = \"1.51.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"SplitInclusive","id":"2:13124:5441","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13342:5139","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:1257:1639":{"id":"0:1257:1639","crate_id":0,"name":"Serialize","span":{"filename":"src/lib.rs","begin":[91,0],"end":[96,1]},"visibility":"public","docs":null,"links":{},"attrs":["#[proc_macro_derive(Serialize, attributes(serde))]"],"deprecation":null,"kind":"proc_macro","inner":{"kind":"derive","helpers":["serde"]}},"2:10576:3355":{"id":"2:10576:3355","crate_id":2,"name":"LowerHex","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:10577:664"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:5553:4747":{"id":"1:5553:4747","crate_id":1,"name":"FileTypeExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:5554:57467","1:5555:57468","1:5556:57469","1:5557:57470"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"5:844:227":{"id":"5:844:227","crate_id":5,"name":"ToOwned","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["5:845:2016","5:846:1889","5:847:4132"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:3181:232":{"id":"2:3181:232","crate_id":2,"name":"TryFrom","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3183:128","2:3184:1430"],"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:6576:4676":{"id":"1:6576:4676","crate_id":1,"name":"CommandExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:6577:57643"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"name":"Sealed","id":"1:10416:4677","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:8742:3385":{"id":"2:8742:3385","crate_id":2,"name":"ExactSizeIterator","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:8743:798","2:8744:2082"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"name":"Iterator","id":"2:8874:158","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:8197:5108":{"id":"2:8197:5108","crate_id":2,"name":"Step","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:8198:62261","2:8199:62262","2:8200:62259","2:8201:62255","2:8202:62263","2:8203:62260","2:8204:62258"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"name":"Clone","id":"2:2884:105","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"PartialOrd","id":"2:2963:186","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"Self"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:13357:5143":{"id":"2:13357:5143","crate_id":2,"name":"ReverseSearcher","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":true,"items":["2:13359:4084","2:13360:61170","2:13361:61171"],"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"name":"Searcher","id":"2:13351:5142","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:13827:4454":{"id":"2:13827:4454","crate_id":2,"name":"eq_ignore_ascii_case","span":null,"visibility":"public","docs":"Checks that two strings are an ASCII case-insensitive match.\n\nSame as `to_ascii_lowercase(a) == to_ascii_lowercase(b)`,\nbut without allocating and copying temporaries.\n\n# Examples\n\n```\nassert!(\"Ferris\".eq_ignore_ascii_case(\"FERRIS\"));\nassert!(\"Ferrös\".eq_ignore_ascii_case(\"FERRöS\"));\nassert!(!\"Ferrös\".eq_ignore_ascii_case(\"FERRÖS\"));\n```","links":{},"attrs":["#[stable(feature = \"ascii_methods_on_intrinsics\", since = \"1.23.0\")]","#[must_use]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["other",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13771:58827":{"id":"2:13771:58827","crate_id":2,"name":"splitn","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by a\npattern, restricted to returning at most `n` items.\n\nIf `n` substrings are returned, the last substring (the `n`th substring)\nwill contain the remainder of the string.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will not be double ended, because it is\nnot efficient to support.\n\nIf the pattern allows a reverse search, the [`rsplitn`] method can be\nused.\n\n[`rsplitn`]: str::rsplitn\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lambda\".splitn(3, ' ').collect();\nassert_eq!(v, [\"Mary\", \"had\", \"a little lambda\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".splitn(3, \"X\").collect();\nassert_eq!(v, [\"lion\", \"\", \"tigerXleopard\"]);\n\nlet v: Vec<&str> = \"abcXdef\".splitn(1, 'X').collect();\nassert_eq!(v, [\"abcXdef\"]);\n\nlet v: Vec<&str> = \"\".splitn(1, 'X').collect();\nassert_eq!(v, [\"\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".splitn(2, |c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"abc\", \"defXghi\"]);\n```","links":{"prim@char":"1:15883:2999","str::rsplitn":"2:13774:58829","self::pattern":"2:13332:5140"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["n",{"kind":"primitive","inner":"usize"}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"SplitN","id":"2:49893:5447","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13342:5139","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:12772:5626":{"id":"2:12772:5626","crate_id":2,"name":"SlicePattern","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:12773:1824","2:12774:2957"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:13745:58832":{"id":"2:13745:58832","crate_id":2,"name":"ends_with","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a suffix of this\nstring slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nBasic usage:\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.ends_with(\"anas\"));\nassert!(!bananas.ends_with(\"nana\"));\n```","links":{"prim@char":"1:15883:2999","self::pattern":"2:13332:5140"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13342:5139","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"2:13342:5139","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:13357:5143","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:5513:4745":{"id":"1:5513:4745","crate_id":1,"name":"OpenOptionsExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:5514:6966","1:5515:9292"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:9157:5106":{"id":"2:9157:5106","crate_id":2,"name":"TrustedLen","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":true,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"name":"Iterator","id":"2:8874:158","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:13786:62949":{"id":"2:13786:62949","crate_id":2,"name":"rmatches","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within this string slice,\nyielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`matches`] method can be used.\n\n[`matches`]: str::matches\n\n# Examples\n\nBasic usage:\n\n```\nlet v: Vec<&str> = \"abcXXXabcYYYabc\".rmatches(\"abc\").collect();\nassert_eq!(v, [\"abc\", \"abc\", \"abc\"]);\n\nlet v: Vec<&str> = \"1abc2abc3\".rmatches(char::is_numeric).collect();\nassert_eq!(v, [\"3\", \"2\", \"1\"]);\n```","links":{"prim@char":"1:15883:2999","self::pattern":"2:13332:5140","`DoubleEndedIterator`":"2:8717:121","str::matches":"2:13783:3079"},"attrs":["#[stable(feature = \"str_matches\", since = \"1.2.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"RMatches","id":"2:50011:5480","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13342:5139","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"2:13342:5139","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:13357:5143","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13802:62956":{"id":"2:13802:62956","crate_id":2,"name":"trim_right","span":null,"visibility":"public","docs":"Returns a string slice with trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`.\n\n# Text directionality\n\nA string is a sequence of bytes. 'Right' in this context means the last\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _left_ side, not the right.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \" Hello\\tworld\\t\";\n\nassert_eq!(\" Hello\\tworld\", s.trim_right());\n```\n\nDirectionality:\n\n```\nlet s = \"English  \";\nassert!(Some('h') == s.trim_right().chars().rev().next());\n\nlet s = \"עברית  \";\nassert!(Some('ת') == s.trim_right().chars().rev().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[stable(feature = \"rust1\", since = \"1.0.0\")]","#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_end`\", suggestion =\n\"trim_end\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_end`"},"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13706":{"id":"2:13706","crate_id":2,"name":null,"span":null,"visibility":{"restricted":{"parent":"2:12785:1353","path":"::str"}},"docs":null,"links":{},"attrs":["#[cfg(not(test))]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"kind":"primitive","inner":"str"},"items":["2:13707:798","2:13708:2082","2:13709:62939","2:13710:62940","2:13712:62941","2:13715:2736","2:13716:62942","2:13717:310","2:13718:58795","2:13719:1868","2:13721:58792","2:13723:58793","2:13725:58794","2:13727:4831","2:13728:62943","2:13729:58814","2:13730:58815","2:13731:2313","2:13732:2307","2:13733:4836","2:13734:33267","2:13735:33257","2:13736:5924","2:13737:62944","2:13738:33252","2:13739:1905","2:13742:58831","2:13745:58832","2:13748:2547","2:13752:4089","2:13756:58822","2:13759:33134","2:13762:58825","2:13765:62945","2:13768:62946","2:13771:58827","2:13774:58829","2:13777:62947","2:13780:62948","2:13783:3079","2:13786:62949","2:13789:62950","2:13792:62951","2:13795:62952","2:13797:62953","2:13799:62954","2:13801:62955","2:13802:62956","2:13803:62957","2:13806:62958","2:13809:15835","2:13812:58833","2:13815:62959","2:13818:1887","2:13821:62960","2:13824:1845","2:13826:4453","2:13827:4454","2:13828:4455","2:13829:4456","2:13830:62961","2:13832:3362","2:13833:62962"],"negative":false,"synthetic":false,"blanket_impl":null}},"2:3459:5121":{"id":"2:3459:5121","crate_id":2,"name":"Neg","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3460:183","2:3461:919"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:13795:62952":{"id":"2:13795:62952","crate_id":2,"name":"trim","span":null,"visibility":"public","docs":"Returns a string slice with leading and trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\n\nassert_eq!(\"Hello\\tworld\", s.trim());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a slice, \\\n                  without modifying the original\"]","#[stable(feature = \"rust1\", since = \"1.0.0\")]","#[rustc_diagnostic_item = \"str_trim\"]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:3600:3343":{"id":"2:3600:3343","crate_id":2,"name":"DerefMut","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3601:550"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"name":"Deref","id":"2:3587:117","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:10811:147":{"id":"2:10811:147","crate_id":2,"name":"Hasher","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:10812:656","2:10813:2616","2:10814:60402","2:10815:60403","2:10816:60404","2:10817:60405","2:10818:60406","2:10819:60407","2:10820:60408","2:10821:60409","2:10822:60410","2:10823:60411","2:10824:60412","2:10825:60413","2:10826:60414","2:10827:1549"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:9161:5105":{"id":"2:9161:5105","crate_id":2,"name":"TrustedStep","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":true,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"name":"Step","id":"2:8197:5108","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"1:1031:2269":{"id":"1:1031:2269","crate_id":1,"name":"AsciiExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:1032:2016","1:1033:4453","1:1034:2304","1:1035:2303","1:1036:4454","1:1037:4455","1:1038:4456"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:10801:143":{"id":"2:10801:143","crate_id":2,"name":"Hash","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:10802:718","2:10804:58072"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"5:6183:63599":{"id":"5:6183:63599","crate_id":5,"name":"to_uppercase","span":null,"visibility":"public","docs":"Returns the uppercase equivalent of this string slice, as a new [`String`].\n\n'Uppercase' is defined according to the terms of the Unicode Derived Core Property\n`Uppercase`.\n\nSince some characters can expand into multiple characters when changing\nthe case, this function returns a [`String`] instead of modifying the\nparameter in-place.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"hello\";\n\nassert_eq!(\"HELLO\", s.to_uppercase());\n```\n\nScripts without case are not changed:\n\n```\nlet new_year = \"农历新年\";\n\nassert_eq!(new_year, new_year.to_uppercase());\n```\n\nOne character can become multiple:\n```\nlet s = \"tschüß\";\n\nassert_eq!(\"TSCHÜSS\", s.to_uppercase());\n```","links":{"`String`":"5:8472:220"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the uppercase string as a new String, \\\n                  without modifying the original\"]","#[stable(feature = \"unicode_case_mapping\", since = \"1.2.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:8472:220","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13780:62948":{"id":"2:13780:62948","crate_id":2,"name":"rsplit_once","span":null,"visibility":"public","docs":"Splits the string on the last occurrence of the specified delimiter and\nreturns prefix before delimiter and suffix after delimiter.\n\n# Examples\n\n```\nassert_eq!(\"cfg\".rsplit_once('='), None);\nassert_eq!(\"cfg=foo\".rsplit_once('='), Some((\"cfg\", \"foo\")));\nassert_eq!(\"cfg=foo=bar\".rsplit_once('='), Some((\"cfg=foo\", \"bar\")));\n```","links":{},"attrs":["#[stable(feature = \"str_split_once\", since = \"1.52.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["delimiter",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:47808:178","args":{"angle_bracketed":{"args":[{"type":{"kind":"tuple","inner":[{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}},{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13342:5139","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"2:13342:5139","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:13357:5143","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:4752:4758":{"id":"1:4752:4758","crate_id":1,"name":"ToSocketAddrs","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:4753:3262","1:4754:58684"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"5:6163":{"id":"5:6163","crate_id":5,"name":null,"span":null,"visibility":{"restricted":{"parent":"5:5976:1353","path":"::str"}},"docs":"Methods for string slices.","links":{},"attrs":["#[cfg(not(test))]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"kind":"primitive","inner":"str"},"items":["5:6164:63596","5:6165:2005","5:6168:63597","5:6171:63598","5:6183:63599","5:6184:63600","5:6185:4727","5:6186:2304","5:6187:2303"],"negative":false,"synthetic":false,"blanket_impl":null}},"2:13725:58794":{"id":"2:13725:58794","crate_id":2,"name":"get_unchecked_mut","span":null,"visibility":"public","docs":"Returns a mutable, unchecked subslice of `str`.\n\nThis is the unchecked alternative to indexing the `str`.\n\n# Safety\n\nCallers of this function are responsible that these preconditions are\nsatisfied:\n\n* The starting index must not exceed the ending index;\n* Indexes must be within bounds of the original slice;\n* Indexes must lie on UTF-8 sequence boundaries.\n\nFailing that, the returned string slice may reference invalid memory or\nviolate the invariants communicated by the `str` type.\n\n# Examples\n\n```\nlet mut v = String::from(\"🗻∈🌏\");\nunsafe {\n    assert_eq!(\"🗻\", v.get_unchecked_mut(0..4));\n    assert_eq!(\"∈\", v.get_unchecked_mut(4..7));\n    assert_eq!(\"🌏\", v.get_unchecked_mut(7..11));\n}\n```","links":{},"attrs":["#[stable(feature = \"str_checked_slicing\", since = \"1.20.0\")]","#[rustc_const_unstable(feature = \"const_slice_index\", issue = \"none\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["i",{"kind":"generic","inner":"I"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"qualified_path","inner":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"I"},"trait":{"name":"SliceIndex","id":"2:11205:218","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}}}}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"2:11205:218","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}},"24:2634:2486":{"id":"24:2634:2486","crate_id":24,"name":"Spanned","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["24:2635:2086"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:3506:3474":{"id":"2:3506:3474","crate_id":2,"name":"Shl","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3508:183","2:3509:1244"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:2862:98":{"id":"2:2862:98","crate_id":2,"name":"BorrowMut","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:2864:2196"],"generics":{"params":[{"name":"Borrowed","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"Borrowed"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:3369:3383","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"bounds":[{"trait_bound":{"trait":{"name":"Borrow","id":"2:2859:97","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"Borrowed"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:13803:62957":{"id":"2:13803:62957","crate_id":2,"name":"trim_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes and suffixes that match a\npattern repeatedly removed.\n\nThe [pattern] can be a [`char`], a slice of [`char`]s, or a function\nor closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_matches('1'), \"foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_matches(char::is_numeric), \"foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_matches(x), \"foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1foo1barXX\".trim_matches(|c| c == '1' || c == 'X'), \"foo1bar\");\n```","links":{"self::pattern":"2:13332:5140","prim@char":"1:15883:2999"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13342:5139","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"2:13342:5139","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"DoubleEndedSearcher","id":"2:13362:5144","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13271:3284":{"id":"2:13271:3284","crate_id":2,"name":"FromStr","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:13272:127","2:13273:1980"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:13733:4836":{"id":"2:13733:4836","crate_id":2,"name":"bytes","span":null,"visibility":"public","docs":"An iterator over the bytes of a string slice.\n\nAs a string slice consists of a sequence of bytes, we can iterate\nthrough a string slice by byte. This method returns such an iterator.\n\n# Examples\n\nBasic usage:\n\n```\nlet mut bytes = \"bors\".bytes();\n\nassert_eq!(Some(b'b'), bytes.next());\nassert_eq!(Some(b'o'), bytes.next());\nassert_eq!(Some(b'r'), bytes.next());\nassert_eq!(Some(b's'), bytes.next());\n\nassert_eq!(None, bytes.next());\n```","links":{},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Bytes","id":"2:49775:2749","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13342:5139":{"id":"2:13342:5139","crate_id":2,"name":"Pattern","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:13344:5142","2:13345:61760","2:13346:61765","2:13347:61761","2:13348:61763","2:13349:61762","2:13350:61764"],"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:3372:222":{"id":"2:3372:222","crate_id":2,"name":"StructuralPartialEq","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:409":{"id":"0:409","crate_id":0,"name":null,"span":{"filename":"src/internals/mod.rs","begin":[5,0],"end":[5,25]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"import","inner":{"source":"self::ctxt::Ctxt","name":"Ctxt","id":"0:1282:1756","glob":false}},"0:8:1754":{"id":"0:8:1754","crate_id":0,"name":"ast","span":{"filename":"src/internals/ast.rs","begin":[1,0],"end":[202,1]},"visibility":"public","docs":"A Serde ast, parsed from the Syn ast and ready to generate Rust code.","links":{},"attrs":[],"deprecation":null,"kind":"module","inner":{"is_crate":false,"items":[],"is_stripped":false}},"2:13742:58831":{"id":"2:13742:58831","crate_id":2,"name":"starts_with","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a prefix of this\nstring slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nBasic usage:\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.starts_with(\"bana\"));\nassert!(!bananas.starts_with(\"nana\"));\n```","links":{"self::pattern":"2:13332:5140","prim@char":"1:15883:2999"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13342:5139","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13730:58815":{"id":"2:13730:58815","crate_id":2,"name":"split_at_mut","span":null,"visibility":"public","docs":"Divide one mutable string slice into two at an index.\n\nThe argument, `mid`, should be a byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get immutable string slices instead, see the [`split_at`] method.\n\n[`split_at`]: str::split_at\n\n# Panics\n\nPanics if `mid` is not on a UTF-8 code point boundary, or if it is\npast the end of the last code point of the string slice.\n\n# Examples\n\nBasic usage:\n\n```\nlet mut s = \"Per Martin-Löf\".to_string();\n{\n    let (first, last) = s.split_at_mut(3);\n    first.make_ascii_uppercase();\n    assert_eq!(\"PER\", first);\n    assert_eq!(\" Martin-Löf\", last);\n}\nassert_eq!(\"PER Martin-Löf\", s);\n```","links":{"str::split_at":"2:13729:58814"},"attrs":["#[must_use]","#[stable(feature = \"str_split_at\", since = \"1.4.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["mid",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"tuple","inner":[{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"primitive","inner":"str"}}},{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"primitive","inner":"str"}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13732:2307":{"id":"2:13732:2307","crate_id":2,"name":"char_indices","span":null,"visibility":"public","docs":"Returns an iterator over the [`char`]s of a string slice, and their\npositions.\n\nAs a string slice consists of valid UTF-8, we can iterate through a\nstring slice by [`char`]. This method returns an iterator of both\nthese [`char`]s, as well as their byte positions.\n\nThe iterator yields tuples. The position is first, the [`char`] is\nsecond.\n\n# Examples\n\nBasic usage:\n\n```\nlet word = \"goodbye\";\n\nlet count = word.char_indices().count();\nassert_eq!(7, count);\n\nlet mut char_indices = word.char_indices();\n\nassert_eq!(Some((0, 'g')), char_indices.next());\nassert_eq!(Some((1, 'o')), char_indices.next());\nassert_eq!(Some((2, 'o')), char_indices.next());\nassert_eq!(Some((3, 'd')), char_indices.next());\nassert_eq!(Some((4, 'b')), char_indices.next());\nassert_eq!(Some((5, 'y')), char_indices.next());\nassert_eq!(Some((6, 'e')), char_indices.next());\n\nassert_eq!(None, char_indices.next());\n```\n\nRemember, [`char`]s might not match your intuition about characters:\n\n[`char`]: prim@char\n\n```\nlet yes = \"y̆es\";\n\nlet mut char_indices = yes.char_indices();\n\nassert_eq!(Some((0, 'y')), char_indices.next()); // not (0, 'y̆')\nassert_eq!(Some((1, '\\u{0306}')), char_indices.next());\n\n// note the 3 here - the last character took up two bytes\nassert_eq!(Some((3, 'e')), char_indices.next());\nassert_eq!(Some((4, 's')), char_indices.next());\n\nassert_eq!(None, char_indices.next());\n```","links":{"prim@char":"1:15883:2999"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"CharIndices","id":"2:49765:5468","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13774:58829":{"id":"2:13774:58829","crate_id":2,"name":"rsplitn","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by a\npattern, starting from the end of the string, restricted to returning\nat most `n` items.\n\nIf `n` substrings are returned, the last substring (the `n`th substring)\nwill contain the remainder of the string.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will not be double ended, because it is not\nefficient to support.\n\nFor splitting from the front, the [`splitn`] method can be used.\n\n[`splitn`]: str::splitn\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".rsplitn(3, ' ').collect();\nassert_eq!(v, [\"lamb\", \"little\", \"Mary had a\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".rsplitn(3, 'X').collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"lionX\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".rsplitn(2, \"::\").collect();\nassert_eq!(v, [\"leopard\", \"lion::tiger\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".rsplitn(2, |c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"ghi\", \"abc1def\"]);\n```","links":{"str::splitn":"2:13771:58827","self::pattern":"2:13332:5140","prim@char":"1:15883:2999"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["n",{"kind":"primitive","inner":"usize"}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"RSplitN","id":"2:49911:5448","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13342:5139","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"2:13342:5139","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:13357:5143","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13748:2547":{"id":"2:13748:2547","crate_id":2,"name":"find","span":null,"visibility":"public","docs":"Returns the byte index of the first character of this string slice that\nmatches the pattern.\n\nReturns [`None`] if the pattern doesn't match.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nlet s = \"Löwe 老虎 Léopard Gepardi\";\n\nassert_eq!(s.find('L'), Some(0));\nassert_eq!(s.find('é'), Some(14));\nassert_eq!(s.find(\"pard\"), Some(17));\n```\n\nMore complex patterns using point-free style and closures:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\n\nassert_eq!(s.find(char::is_whitespace), Some(5));\nassert_eq!(s.find(char::is_lowercase), Some(1));\nassert_eq!(s.find(|c: char| c.is_whitespace() || c.is_lowercase()), Some(1));\nassert_eq!(s.find(|c: char| (c < 'o') && (c > 'a')), Some(4));\n```\n\nNot finding the pattern:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\nlet x: &[_] = &['1', '2'];\n\nassert_eq!(s.find(x), None);\n```","links":{"prim@char":"1:15883:2999","`None`":"2:47810:176","self::pattern":"2:13332:5140"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:47808:178","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13342:5139","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13738:33252":{"id":"2:13738:33252","crate_id":2,"name":"encode_utf16","span":null,"visibility":"public","docs":"Returns an iterator of `u16` over the string encoded as UTF-16.\n\n# Examples\n\nBasic usage:\n\n```\nlet text = \"Zażółć gęślą jaźń\";\n\nlet utf8_len = text.len();\nlet utf16_len = text.encode_utf16().count();\n\nassert!(utf16_len <= utf8_len);\n```","links":{},"attrs":["#[must_use =\n\"this returns the encoded string as an iterator, \\\n                  without modifying the original\"]","#[stable(feature = \"encode_utf16\", since = \"1.8.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"EncodeUtf16","id":"2:50081:5484","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:3518:5084":{"id":"2:3518:5084","crate_id":2,"name":"BitAndAssign","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3520:358"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:3405:3384":{"id":"2:3405:3384","crate_id":2,"name":"Unpin","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":true,"is_unsafe":false,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:6745:4662":{"id":"1:6745:4662","crate_id":1,"name":"AsFd","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:6746:58674"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:13826:4453":{"id":"2:13826:4453","crate_id":2,"name":"is_ascii","span":null,"visibility":"public","docs":"Checks if all characters in this string are within the ASCII range.\n\n# Examples\n\n```\nlet ascii = \"hello!\\n\";\nlet non_ascii = \"Grüße, Jürgen ❤\";\n\nassert!(ascii.is_ascii());\nassert!(!non_ascii.is_ascii());\n```","links":{},"attrs":["#[stable(feature = \"ascii_methods_on_intrinsics\", since = \"1.23.0\")]","#[must_use]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:10574:2256":{"id":"2:10574:2256","crate_id":2,"name":"Binary","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:10575:664"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:13739:1905":{"id":"2:13739:1905","crate_id":2,"name":"contains","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a sub-slice of\nthis string slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nBasic usage:\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.contains(\"nana\"));\nassert!(!bananas.contains(\"apples\"));\n```","links":{"self::pattern":"2:13332:5140","prim@char":"1:15883:2999"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13342:5139","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:9154:4462":{"id":"2:9154:4462","crate_id":2,"name":"FusedIterator","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"name":"Iterator","id":"2:8874:158","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:3491:4817":{"id":"2:3491:4817","crate_id":2,"name":"BitAnd","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3493:183","2:3494:357"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"24:3089:3313":{"id":"24:3089:3313","crate_id":24,"name":"Parser","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["24:3090:183","24:3091:2177","24:3092:1845","24:3093:2178"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"24:2864:3322":{"id":"24:2864:3322","crate_id":24,"name":"Peek","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"name":"Sealed","id":"24:2746:4677","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:23387:17320":{"id":"2:23387:17320","crate_id":2,"name":"ToBitMask","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:23388:7898","2:23389:62358","2:23390:62359"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"name":"Sealed","id":"2:23380:4677","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:13712:62941":{"id":"2:13712:62941","crate_id":2,"name":"ceil_char_boundary","span":null,"visibility":"public","docs":"Finds the closest `x` not below `index` where `is_char_boundary(x)` is `true`.\n\nThis method is the natural complement to [`floor_char_boundary`]. See that method\nfor more details.\n\n[`floor_char_boundary`]: str::floor_char_boundary\n\n# Panics\n\nPanics if `index > self.len()`.\n\n# Examples\n\n```\n#![feature(round_char_boundary)]\nlet s = \"❤️🧡💛💚💙💜\";\nassert_eq!(s.len(), 26);\nassert!(!s.is_char_boundary(13));\n\nlet closest = s.ceil_char_boundary(13);\nassert_eq!(closest, 14);\nassert_eq!(&s[..closest], \"❤️🧡💛\");\n```","links":{"str::floor_char_boundary":"2:13710:62940"},"attrs":["#[unstable(feature = \"round_char_boundary\", issue = \"93743\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["index",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"primitive","inner":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:2884:105":{"id":"2:2884:105","crate_id":2,"name":"Clone","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:2885:414","2:2886:416"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:3654:4464":{"id":"2:3654:4464","crate_id":2,"name":"Generator","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3656:242","2:3657:208","2:3658:62147"],"generics":{"params":[{"name":"R","kind":{"type":{"bounds":[],"default":{"kind":"tuple","inner":[]},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}}},"paths":{"1:14968:4878":{"crate_id":1,"path":["std","sys_common","process","CommandEnvs"],"kind":"struct"},"17:12527:7198":{"crate_id":17,"path":["object","macho","EncryptionInfoCommand64"],"kind":"struct"},"12:2398:7898":{"crate_id":12,"path":["hashbrown","raw","bitmask","BitMask"],"kind":"struct"},"2:23380:4677":{"crate_id":2,"path":["core","core_simd","masks","to_bitmask","sealed","Sealed"],"kind":"trait"},"2:46275:201":{"crate_id":2,"path":["core","ops","range","RangeToInclusive"],"kind":"struct"},"1:14437:130":{"crate_id":1,"path":["std","sys","unix","fs","FileType"],"kind":"struct"},"6:5210:8533":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__timeval"],"kind":"struct"},"12:979:4848":{"crate_id":12,"path":["hashbrown","map","RawEntryBuilder"],"kind":"struct"},"24:4756:3443":{"crate_id":24,"path":["syn","token","Bang"],"kind":"struct"},"2:50674:203":{"crate_id":2,"path":["core","future","ready","Ready"],"kind":"struct"},"16:7684:6068":{"crate_id":16,"path":["gimli","read","unit","EntriesRaw"],"kind":"struct"},"7:38:45642":{"crate_id":7,"path":["unwind","libunwind","_Unwind_Reason_Code"],"kind":"enum"},"2:46925:5297":{"crate_id":2,"path":["core","iter","adapters","copied","Copied"],"kind":"struct"},"6:634:8056":{"crate_id":6,"path":["libc","unix","protoent"],"kind":"struct"},"2:53535:5227":{"crate_id":2,"path":["core","core_arch","simd","f32x16"],"kind":"struct"},"6:4532:8484":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_can_addr"],"kind":"union"},"22:827:3277":{"crate_id":22,"path":["proc_macro2","fallback","LexError"],"kind":"struct"},"2:2765:584":{"crate_id":2,"path":["core","ptr","drop_in_place"],"kind":"function"},"2:24364:8888":{"crate_id":2,"path":["core","num","dec2flt","number","Number"],"kind":"struct"},"2:24986:170":{"crate_id":2,"path":["core","num","nonzero","NonZeroI8"],"kind":"struct"},"17:13975:7630":{"crate_id":17,"path":["object","pe","ImageCor20Header"],"kind":"struct"},"18:0:2979":{"crate_id":18,"path":["memchr"],"kind":"module"},"2:14:2616":{"crate_id":2,"path":["core","write"],"kind":"macro"},"24:66:2011":{"crate_id":24,"path":["syn","token"],"kind":"module"},"16:7868:128":{"crate_id":16,"path":["gimli","read","Error"],"kind":"enum"},"16:7155:6130":{"crate_id":16,"path":["gimli","read","rnglists","DebugRngLists"],"kind":"struct"},"5:984:5671":{"crate_id":5,"path":["alloc","collections","binary_heap","PeekMut"],"kind":"struct"},"2:22834:4074":{"crate_id":2,"path":["core","core_simd","swizzle","reverse","Reverse"],"kind":"struct"},"1:1113:12067":{"crate_id":1,"path":["std","backtrace","BytesOrWide"],"kind":"enum"},"2:11385:3262":{"crate_id":2,"path":["core","slice","iter","Iter"],"kind":"struct"},"24:6353:3207":{"crate_id":24,"path":["syn","ty","TypeTraitObject"],"kind":"struct"},"24:5058:3463":{"crate_id":24,"path":["syn","token","Or"],"kind":"struct"},"9:234:5770":{"crate_id":9,"path":["miniz_oxide","deflate","core","HuffmanOxide"],"kind":"struct"},"5:5609:5650":{"crate_id":5,"path":["alloc","rc","Weak"],"kind":"struct"},"12:764:3266":{"crate_id":12,"path":["hashbrown","map","IterMut"],"kind":"struct"},"2:51422:5254":{"crate_id":2,"path":["core","core_arch","simd","u16x2"],"kind":"struct"},"24:6416:2155":{"crate_id":24,"path":["syn","path","Constraint"],"kind":"struct"},"1:6100:4999":{"crate_id":1,"path":["std","os","unix","net","stream","UnixStream"],"kind":"struct"},"1:3459:4715":{"crate_id":1,"path":["std","io","buffered","linewriter","LineWriter"],"kind":"struct"},"5:3105:62524":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Dying"],"kind":"enum"},"17:13352:7451":{"crate_id":17,"path":["object","pe","ImageRelocation"],"kind":"struct"},"9:996:5811":{"crate_id":9,"path":["miniz_oxide","MZStatus"],"kind":"enum"},"2:24240:5518":{"crate_id":2,"path":["core","num","bignum","tests","Big8x3"],"kind":"struct"},"2:9533:3701":{"crate_id":2,"path":["core","panic","unwind_safe","UnwindSafe"],"kind":"trait"},"2:49689:5460":{"crate_id":2,"path":["core","slice","iter","RChunksExact"],"kind":"struct"},"5:5910:5637":{"crate_id":5,"path":["alloc","slice","Join"],"kind":"trait"},"17:11381:6964":{"crate_id":17,"path":["object","archive","Header"],"kind":"struct"},"2:50374:5157":{"crate_id":2,"path":["core","str","pattern","EmptyNeedle"],"kind":"struct"},"17:13016:7349":{"crate_id":17,"path":["object","pe","ImageFileHeader"],"kind":"struct"},"2:7159:5306":{"crate_id":2,"path":["core","iter","adapters","intersperse","IntersperseWith"],"kind":"struct"},"24:5034:3461":{"crate_id":24,"path":["syn","token","MulEq"],"kind":"struct"},"2:50397:5557":{"crate_id":2,"path":["core","str","lossy","Utf8Chunk"],"kind":"struct"},"24:3253:3261":{"crate_id":24,"path":["syn","error","IntoIter"],"kind":"struct"},"17:542:5992":{"crate_id":17,"path":["object","read","any","Section"],"kind":"struct"},"1:11501:3262":{"crate_id":1,"path":["std","path","Iter"],"kind":"struct"},"16:2792:5984":{"crate_id":16,"path":["gimli","common","Register"],"kind":"struct"},"1:997:4217":{"crate_id":1,"path":["std","thread","JoinHandle"],"kind":"struct"},"2:3102:4677":{"crate_id":2,"path":["core","convert","num","private","Sealed"],"kind":"trait"},"5:3905:6646":{"crate_id":5,"path":["alloc","collections","linked_list","drop","DropGuard"],"kind":"struct"},"2:14072:151":{"crate_id":2,"path":["core","future","into_future","IntoFuture"],"kind":"trait"},"1:13481:2146":{"crate_id":1,"path":["std","sys","unix","os_str","Slice"],"kind":"struct"},"24:5873:2263":{"crate_id":24,"path":["syn","expr","Index"],"kind":"struct"},"2:24887:174":{"crate_id":2,"path":["core","num","nonzero","NonZeroU64"],"kind":"struct"},"2:47302:9269":{"crate_id":2,"path":["core","iter","sources","once_with","OnceWith"],"kind":"struct"},"1:12567:6699":{"crate_id":1,"path":["std","sys","unix","fs","Dir"],"kind":"struct"},"24:5496:3137":{"crate_id":24,"path":["syn","data","VisPublic"],"kind":"struct"},"1:11432:4906":{"crate_id":1,"path":["std","path","PrefixComponent"],"kind":"struct"},"1:4476:58756":{"crate_id":1,"path":["std","io","Write","write_fmt","Adapter"],"kind":"struct"},"1:7248:187":{"crate_id":1,"path":["std","path","Path"],"kind":"struct"},"17:11653:7021":{"crate_id":17,"path":["object","elf","ProgramHeader32"],"kind":"struct"},"17:12687:7226":{"crate_id":17,"path":["object","macho","DataInCodeEntry"],"kind":"struct"},"24:5876:61":{"crate_id":24,"path":["syn","expr","parsing","raw"],"kind":"struct"},"21:2253:4620":{"crate_id":21,"path":["proc_macro","bridge","LitKind"],"kind":"enum"},"24:4819:3447":{"crate_id":24,"path":["syn","token","Colon2"],"kind":"struct"},"6:4485:8467":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_setup"],"kind":"struct"},"17:11784:7059":{"crate_id":17,"path":["object","elf","NoteHeader32"],"kind":"struct"},"1:15324:57502":{"crate_id":1,"path":["std","panicking","Hook"],"kind":"enum"},"5:3428:4814":{"crate_id":5,"path":["alloc","collections","btree","set","SymmetricDifference"],"kind":"struct"},"2:46356:2556":{"crate_id":2,"path":["core","any","tags","Value"],"kind":"struct"},"24:5470:1793":{"crate_id":24,"path":["syn","data","Field"],"kind":"struct"},"6:4454:8454":{"crate_id":6,"path":["libc","unix","linux_like","linux","dirent"],"kind":"struct"},"24:2069:3318":{"crate_id":24,"path":["syn","buffer","Cursor"],"kind":"struct"},"2:51755:5268":{"crate_id":2,"path":["core","core_arch","simd","u8x16"],"kind":"struct"},"2:51831:5260":{"crate_id":2,"path":["core","core_arch","simd","u32x4"],"kind":"struct"},"16:6949:6272":{"crate_id":16,"path":["gimli","read","op","EvaluationWaiting"],"kind":"enum"},"6:4142:8349":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_abs_setup"],"kind":"struct"},"21:2908:3370":{"crate_id":21,"path":["proc_macro","LineColumn"],"kind":"struct"},"17:9160:6372":{"crate_id":17,"path":["object","common","FileFlags"],"kind":"enum"},"5:8241:4584":{"crate_id":5,"path":["alloc","collections","binary_heap","Drain"],"kind":"struct"},"1:7939:4215":{"crate_id":1,"path":["std","sync","mpsc","shared","Packet"],"kind":"struct"},"1:1441:4582":{"crate_id":1,"path":["std","collections","hash","map","DrainFilter"],"kind":"struct"},"1:3284:4712":{"crate_id":1,"path":["std","io","buffered","bufreader","BufReader"],"kind":"struct"},"17:11530:7002":{"crate_id":17,"path":["object","elf","CompressionHeader64"],"kind":"struct"},"2:5727:5326":{"crate_id":2,"path":["core","ffi","sealed_trait","VaArgSafe"],"kind":"trait"},"17:9706:47976":{"crate_id":17,"path":["object","read","any","SectionIterator"],"kind":"struct"},"22:908:1631":{"crate_id":22,"path":["proc_macro2","imp","TokenStream"],"kind":"enum"},"2:47043:5311":{"crate_id":2,"path":["core","iter","adapters","rev","Rev"],"kind":"struct"},"17:13961:7627":{"crate_id":17,"path":["object","pe","ImportObjectHeader"],"kind":"struct"},"18:720:6814":{"crate_id":18,"path":["memchr","memmem","twoway","TwoWay"],"kind":"struct"},"2:50684:8989":{"crate_id":2,"path":["core","future","ResumeTy"],"kind":"struct"},"2:24539:5534":{"crate_id":2,"path":["core","num","error","IntErrorKind"],"kind":"enum"},"24:5846:3173":{"crate_id":24,"path":["syn","expr","ExprType"],"kind":"struct"},"24:4049:1791":{"crate_id":24,"path":["syn","token","Struct"],"kind":"struct"},"17:12496:7192":{"crate_id":17,"path":["object","macho","FilesetEntryCommand"],"kind":"struct"},"5:7358:6646":{"crate_id":5,"path":["alloc","vec","drain","drop","DropGuard"],"kind":"struct"},"2:47115:5183":{"crate_id":2,"path":["core","iter","adapters","zip","Zip"],"kind":"struct"},"24:5766:3154":{"crate_id":24,"path":["syn","expr","ExprForLoop"],"kind":"struct"},"21:344:63932":{"crate_id":21,"path":["proc_macro","bridge","handle","OwnedStore"],"kind":"struct"},"16:7637:2109":{"crate_id":16,"path":["gimli","read","unit","Attribute"],"kind":"struct"},"1:15897:3010":{"crate_id":1,"path":["std","i32"],"kind":"primitive"},"17:13660:7557":{"crate_id":17,"path":["object","pe","ImageLoadConfigDirectory64"],"kind":"struct"},"1:4146:4969":{"crate_id":1,"path":["std","io","stdio","StderrRaw"],"kind":"struct"},"6:4509:8474":{"crate_id":6,"path":["libc","unix","linux_like","linux","af_alg_iv"],"kind":"struct"},"16:5784:5973":{"crate_id":16,"path":["gimli","read","cfi","CallFrameInstruction"],"kind":"enum"},"24:4193:3433":{"crate_id":24,"path":["syn","token","Unsized"],"kind":"struct"},"2:22879:61757":{"crate_id":2,"path":["core","core_simd","swizzle","interleave","Lo"],"kind":"struct"},"2:23049:5290":{"crate_id":2,"path":["core","core_simd","elements","float","SimdFloat"],"kind":"trait"},"2:46645:5615":{"crate_id":2,"path":["core","char","decode","DecodeUtf16"],"kind":"struct"},"1:13413:57613":{"crate_id":1,"path":["std","sys","unix","os","Env"],"kind":"struct"},"17:10962:48236":{"crate_id":17,"path":["object","read","pe","section","PeSegment"],"kind":"struct"},"22:831:3371":{"crate_id":22,"path":["proc_macro2","fallback","SourceFile"],"kind":"struct"},"24:4848:3449":{"crate_id":24,"path":["syn","token","Div"],"kind":"struct"},"12:1238:5878":{"crate_id":12,"path":["hashbrown","map","VacantEntryRef"],"kind":"struct"},"6:88:40715":{"crate_id":6,"path":["libc","unix","DIR"],"kind":"enum"},"2:3512:3476":{"crate_id":2,"path":["core","ops","bit","Shr"],"kind":"trait"},"2:51356:8990":{"crate_id":2,"path":["core","core_arch","simd","u8x2"],"kind":"struct"},"24:924:64105":{"crate_id":24,"path":["syn","generics","TypeParamsMut"],"kind":"struct"},"5:4665:6649":{"crate_id":5,"path":["alloc","collections","vec_deque","spec_extend","spec_extend","WrapAddOnDrop"],"kind":"struct"},"1:1460:4844":{"crate_id":1,"path":["std","collections","hash","map","RawEntryBuilderMut"],"kind":"struct"},"6:6943:8873":{"crate_id":6,"path":["libc","unix","linux_like","linux","can_frame"],"kind":"struct"},"24:3815:2158":{"crate_id":24,"path":["syn","token","Macro"],"kind":"struct"},"1:14874:4871":{"crate_id":1,"path":["std","sys","unix","process","process_inner","ExitStatusError"],"kind":"struct"},"24:964:3182":{"crate_id":24,"path":["syn","generics","ImplGenerics"],"kind":"struct"},"1:11985:4802":{"crate_id":1,"path":["std","sync","mpsc","RecvError"],"kind":"struct"},"16:7741:6133":{"crate_id":16,"path":["gimli","read","unit","EntriesTreeNode"],"kind":"struct"},"17:4008:48157":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbolIterator"],"kind":"struct"},"15:230:5896":{"crate_id":15,"path":["addr2line","LocationRangeIter"],"kind":"struct"},"2:3467:4929":{"crate_id":2,"path":["core","ops","arith","SubAssign"],"kind":"trait"},"24:6340:3204":{"crate_id":24,"path":["syn","ty","TypePtr"],"kind":"struct"},"6:1606:8103":{"crate_id":6,"path":["libc","unix","linux_like","tm"],"kind":"struct"},"9:1056:5805":{"crate_id":9,"path":["miniz_oxide","DataFormat"],"kind":"enum"},"1:5519:4746":{"crate_id":1,"path":["std","os","unix","fs","MetadataExt"],"kind":"trait"},"17:10489:9191":{"crate_id":17,"path":["object","read","elf","version","VerdauxIterator"],"kind":"struct"},"17:9396:6898":{"crate_id":17,"path":["object","endian","I16Bytes"],"kind":"struct"},"17:13196:7413":{"crate_id":17,"path":["object","pe","AnonObjectHeaderBigobj"],"kind":"struct"},"2:50106:5486":{"crate_id":2,"path":["core","str","iter","EscapeUnicode"],"kind":"struct"},"24:3021:2758":{"crate_id":24,"path":["syn","parse","Unexpected"],"kind":"enum"},"22:871:1776":{"crate_id":22,"path":["proc_macro2","fallback","Ident"],"kind":"struct"},"9:1075:5813":{"crate_id":9,"path":["miniz_oxide","StreamResult"],"kind":"struct"},"2:50765:5289":{"crate_id":2,"path":["core","alloc","layout","LayoutError"],"kind":"struct"},"16:3494:6825":{"crate_id":16,"path":["gimli","arch","Arm"],"kind":"struct"},"2:48589:3356":{"crate_id":2,"path":["core","fmt","num","UpperHex"],"kind":"struct"},"17:9958:63877":{"crate_id":17,"path":["object","read","any","SectionRelocationIteratorInternal"],"kind":"enum"},"21:165:4648":{"crate_id":21,"path":["proc_macro","bridge","client","Bridge"],"kind":"struct"},"16:2861:6224":{"crate_id":16,"path":["gimli","common","DebugAddrIndex"],"kind":"struct"},"16:5923:1806":{"crate_id":16,"path":["gimli","read","dwarf","Unit"],"kind":"struct"},"24:2077:64179":{"crate_id":24,"path":["syn","buffer","empty","UnsafeSyncEntry"],"kind":"struct"},"1:3044:4947":{"crate_id":1,"path":["std","fs","symlink_metadata"],"kind":"function"},"14:231:2300":{"crate_id":14,"path":["rustc_demangle","v0","ParseError"],"kind":"enum"},"2:49807:5444":{"crate_id":2,"path":["core","str","iter","RSplit"],"kind":"struct"},"17:12417:7181":{"crate_id":17,"path":["object","macho","TwolevelHintsCommand"],"kind":"struct"},"12:2040:4584":{"crate_id":12,"path":["hashbrown","set","Drain"],"kind":"struct"},"24:5464:3134":{"crate_id":24,"path":["syn","data","FieldsNamed"],"kind":"struct"},"22:1044:2168":{"crate_id":22,"path":["proc_macro2","Punct"],"kind":"struct"},"5:1055:5672":{"crate_id":5,"path":["alloc","collections","binary_heap","Hole"],"kind":"struct"},"1:15388:5905":{"crate_id":1,"path":["std","backtrace_rs","backtrace","libunwind","Frame"],"kind":"enum"},"24:5498:3136":{"crate_id":24,"path":["syn","data","VisCrate"],"kind":"struct"},"24:6407:2465":{"crate_id":24,"path":["syn","path","AngleBracketedGenericArguments"],"kind":"struct"},"2:24513:5585":{"crate_id":2,"path":["core","num","error","TryFromIntError"],"kind":"struct"},"2:10718:62367":{"crate_id":2,"path":["core","fmt","fmt","BorrowedPlaceholder"],"kind":"struct"},"2:47033:5310":{"crate_id":2,"path":["core","iter","adapters","peekable","Peekable"],"kind":"struct"},"24:5340:3606":{"crate_id":24,"path":["syn","token","Bracket"],"kind":"struct"},"2:52661:5241":{"crate_id":2,"path":["core","core_arch","simd","i32x8"],"kind":"struct"},"16:4495:7661":{"crate_id":16,"path":["gimli","constants","DwVirtuality"],"kind":"struct"},"2:13124:5441":{"crate_id":2,"path":["core","str","iter","SplitInclusive"],"kind":"struct"},"16:3051:6285":{"crate_id":16,"path":["gimli","common","DebugMacinfoOffset"],"kind":"struct"},"2:10846:4816":{"crate_id":2,"path":["core","hash","BuildHasher"],"kind":"trait"},"12:2404:63854":{"crate_id":12,"path":["hashbrown","raw","Fallibility"],"kind":"enum"},"1:11201:4984":{"crate_id":1,"path":["std","net","Shutdown"],"kind":"enum"},"5:3554:4582":{"crate_id":5,"path":["alloc","collections","btree","set","DrainFilter"],"kind":"struct"},"16:4271:7654":{"crate_id":16,"path":["gimli","constants","DwForm"],"kind":"struct"},"20:63:3119":{"crate_id":20,"path":["quote","ident_fragment","IdentFragment"],"kind":"trait"},"22:448:3277":{"crate_id":22,"path":["proc_macro2","imp","LexError"],"kind":"enum"},"2:49747:5329":{"crate_id":2,"path":["core","str","error","ParseBoolError"],"kind":"struct"},"17:13917:7620":{"crate_id":17,"path":["object","pe","ImageSeparateDebugHeader"],"kind":"struct"},"1:7834:4215":{"crate_id":1,"path":["std","sync","mpsc","oneshot","Packet"],"kind":"struct"},"2:24415:8892":{"crate_id":2,"path":["core","num","diy_float","Fp"],"kind":"struct"},"1:7314:120":{"crate_id":1,"path":["std","path","Display"],"kind":"struct"},"24:4988:3458":{"crate_id":24,"path":["syn","token","Gt"],"kind":"struct"},"24:5075:3464":{"crate_id":24,"path":["syn","token","OrEq"],"kind":"struct"},"16:6595:6071":{"crate_id":16,"path":["gimli","read","loclists","LocListIter"],"kind":"struct"},"2:13342:5139":{"crate_id":2,"path":["core","str","pattern","Pattern"],"kind":"trait"},"16:6286:5894":{"crate_id":16,"path":["gimli","read","line","LineRow"],"kind":"struct"},"2:52198:9003":{"crate_id":2,"path":["core","core_arch","simd","m32x4"],"kind":"struct"},"2:50063:5482":{"crate_id":2,"path":["core","str","iter","SplitWhitespace"],"kind":"struct"},"2:2917:185":{"crate_id":2,"path":["core","cmp","PartialEq"],"kind":"trait"},"24:3214:6444":{"crate_id":24,"path":["syn","error","ErrorMessage"],"kind":"struct"},"17:11701:7034":{"crate_id":17,"path":["object","elf","Dyn64"],"kind":"struct"},"18:782:6813":{"crate_id":18,"path":["memchr","memmem","x86","sse","Forward"],"kind":"struct"},"1:11238:4760":{"crate_id":1,"path":["std","os","unix","net","addr","SocketAddr"],"kind":"struct"},"2:3841:5203":{"crate_id":2,"path":["core","ops","try_trait","NeverShortCircuit"],"kind":"struct"},"6:1662:8147":{"crate_id":6,"path":["libc","unix","linux_like","in_pktinfo"],"kind":"struct"},"17:9131:47973":{"crate_id":17,"path":["object","common","RelocationEncoding"],"kind":"enum"},"17:10988:48234":{"crate_id":17,"path":["object","read","pe","section","PeSection"],"kind":"struct"},"2:51977:5240":{"crate_id":2,"path":["core","core_arch","simd","i32x4"],"kind":"struct"},"16:6549:6074":{"crate_id":16,"path":["gimli","read","loclists","RawLocListIter"],"kind":"struct"},"2:23175:5291":{"crate_id":2,"path":["core","core_simd","eq","SimdPartialEq"],"kind":"trait"},"24:5743:3149":{"crate_id":24,"path":["syn","expr","ExprCall"],"kind":"struct"},"2:3812:5542":{"crate_id":2,"path":["core","ops","range","OneSidedRange"],"kind":"trait"},"18:694:6425":{"crate_id":18,"path":["memchr","memmem","rarebytes","RareNeedleBytes"],"kind":"struct"},"17:13899:7614":{"crate_id":17,"path":["object","pe","ImageFunctionEntry"],"kind":"struct"},"24:3109:3317":{"crate_id":24,"path":["syn","parse","Nothing"],"kind":"struct"},"24:5917:2424":{"crate_id":24,"path":["syn","generics","TypeParam"],"kind":"struct"},"18:866:6416":{"crate_id":18,"path":["memchr","memmem","SearcherKind"],"kind":"enum"},"24:5500:3138":{"crate_id":24,"path":["syn","data","VisRestricted"],"kind":"struct"},"17:10068:6340":{"crate_id":17,"path":["object","read","coff","section","SectionTable"],"kind":"struct"},"6:6016:8728":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","siginfo_t"],"kind":"struct"},"24:6345:3205":{"crate_id":24,"path":["syn","ty","TypeReference"],"kind":"struct"},"2:51468:5234":{"crate_id":2,"path":["core","core_arch","simd","i16x2"],"kind":"struct"},"2:47074:5314":{"crate_id":2,"path":["core","iter","adapters","skip_while","SkipWhile"],"kind":"struct"},"1:4492:4702":{"crate_id":1,"path":["std","io","BufRead"],"kind":"trait"},"24:3941:3427":{"crate_id":24,"path":["syn","token","Pub"],"kind":"struct"},"5:8449:5680":{"crate_id":5,"path":["alloc","ffi","c_str","IntoStringError"],"kind":"struct"},"24:2979:3305":{"crate_id":24,"path":["syn","parse","ParseBuffer"],"kind":"struct"},"6:4538:8487":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_can"],"kind":"struct"},"1:7436:4864":{"crate_id":1,"path":["std","process","ChildStdin"],"kind":"struct"},"1:9512:4976":{"crate_id":1,"path":["std","sys_common","remutex","ReentrantMutex"],"kind":"struct"},"24:6130:1986":{"crate_id":24,"path":["syn","derive","DataEnum"],"kind":"struct"},"2:39108:4875":{"crate_id":2,"path":["core","convert","Infallible"],"kind":"enum"},"20:191:3727":{"crate_id":20,"path":["quote","__private","HasIterator"],"kind":"struct"},"24:3725:3417":{"crate_id":24,"path":["syn","token","If"],"kind":"struct"},"6:0:803":{"crate_id":6,"path":["libc"],"kind":"module"},"11:0:2973":{"crate_id":11,"path":["adler"],"kind":"module"},"17:11212:6373":{"crate_id":17,"path":["object","read","Import"],"kind":"struct"},"2:3376:224":{"crate_id":2,"path":["core","marker","Sync"],"kind":"trait"},"2:8673:152":{"crate_id":2,"path":["core","iter","traits","collect","IntoIterator"],"kind":"trait"},"2:6900:62089":{"crate_id":2,"path":["core","iter","adapters","flatten","TrustedConstSize"],"kind":"trait"},"5:2396:5708":{"crate_id":5,"path":["alloc","collections","btree","navigate","LazyLeafRange"],"kind":"struct"},"2:5706:12070":{"crate_id":2,"path":["core","ffi","c_void"],"kind":"enum"},"2:3272:128":{"crate_id":2,"path":["core","error","Error"],"kind":"trait"},"2:50524:5497":{"crate_id":2,"path":["core","str","IsAsciiWhitespace"],"kind":"struct"},"1:5553:4747":{"crate_id":1,"path":["std","os","unix","fs","FileTypeExt"],"kind":"trait"},"1:11912:9137":{"crate_id":1,"path":["std","sync","mpsc","cache_aligned","CacheAligned"],"kind":"struct"},"24:5116:3467":{"crate_id":24,"path":["syn","token","Question"],"kind":"struct"},"5:853:109":{"crate_id":5,"path":["alloc","borrow","Cow"],"kind":"enum"},"18:849:6414":{"crate_id":18,"path":["memchr","memmem","NeedleInfo"],"kind":"struct"},"17:10598:48182":{"crate_id":17,"path":["object","read","macho","file","MachOComdat"],"kind":"struct"},"17:12222:7131":{"crate_id":17,"path":["object","macho","PreboundDylibCommand"],"kind":"struct"},"16:5566:5961":{"crate_id":16,"path":["gimli","read","cfi","PartialFrameDescriptionEntry"],"kind":"struct"},"17:9275:6895":{"crate_id":17,"path":["object","endian","BigEndian"],"kind":"struct"},"1:4351:4337":{"crate_id":1,"path":["std","io","util","Repeat"],"kind":"struct"},"12:940:4845":{"crate_id":12,"path":["hashbrown","map","RawEntryMut"],"kind":"enum"},"17:12431:7183":{"crate_id":17,"path":["object","macho","TwolevelHint"],"kind":"struct"},"2:32626:4294":{"crate_id":2,"path":["core","mem","maybe_uninit","MaybeUninit"],"kind":"union"},"2:4853:5179":{"crate_id":2,"path":["core","asserting","TryCaptureWithDebug"],"kind":"struct"},"17:12634:7220":{"crate_id":17,"path":["object","macho","IdentCommand"],"kind":"struct"},"24:6376:187":{"crate_id":24,"path":["syn","path","Path"],"kind":"struct"},"6:5405:8631":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","seminfo"],"kind":"struct"},"1:10417:4228":{"crate_id":1,"path":["std","thread","local","AccessError"],"kind":"struct"},"17:11457:1776":{"crate_id":17,"path":["object","elf","Ident"],"kind":"struct"},"2:46692:3363":{"crate_id":2,"path":["core","char","EscapeDefault"],"kind":"struct"},"12:114:63850":{"crate_id":12,"path":["hashbrown","raw","bitmask","BitMaskIter"],"kind":"struct"},"9:927:45746":{"crate_id":9,"path":["miniz_oxide","inflate","TINFLStatus"],"kind":"enum"},"1:11944:3262":{"crate_id":1,"path":["std","sync","mpsc","Iter"],"kind":"struct"},"1:6924:3688":{"crate_id":1,"path":["std","panic","always_abort"],"kind":"function"},"1:11264:4982":{"crate_id":1,"path":["std","os","unix","net","listener","Incoming"],"kind":"struct"},"16:7659:6132":{"crate_id":16,"path":["gimli","read","unit","AttrsIter"],"kind":"struct"},"24:2555:2017":{"crate_id":24,"path":["syn","parse_quote"],"kind":"module"},"24:6391:2141":{"crate_id":24,"path":["syn","path","GenericArgument"],"kind":"enum"},"17:10455:6353":{"crate_id":17,"path":["object","read","elf","hash","HashTable"],"kind":"struct"},"17:11769:7053":{"crate_id":17,"path":["object","elf","Vernaux"],"kind":"struct"},"2:23232:4787":{"crate_id":2,"path":["core","core_simd","lane_count","LaneCount"],"kind":"struct"},"2:46986:5302":{"crate_id":2,"path":["core","iter","adapters","fuse","Fuse"],"kind":"struct"},"16:4942:7674":{"crate_id":16,"path":["gimli","constants","DwMacro"],"kind":"struct"},"17:11409:6968":{"crate_id":17,"path":["object","elf","FileHeader32"],"kind":"struct"},"6:5998:8721":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","flock"],"kind":"struct"},"6:6205:8820":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","mcontext_t"],"kind":"struct"},"24:6334:3203":{"crate_id":24,"path":["syn","ty","TypeParen"],"kind":"struct"},"2:23426:4677":{"crate_id":2,"path":["core","core_simd","masks","sealed","Sealed"],"kind":"trait"},"24:3743:3418":{"crate_id":24,"path":["syn","token","Impl"],"kind":"struct"},"18:896:6418":{"crate_id":18,"path":["memchr","memmem","SearcherRevKind"],"kind":"enum"},"2:49569:5451":{"crate_id":2,"path":["core","slice","iter","Windows"],"kind":"struct"},"6:5178:8515":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","statx_timestamp"],"kind":"struct"},"6:4208:8363":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Sym"],"kind":"struct"},"2:51500:5267":{"crate_id":2,"path":["core","core_arch","simd","u8x8"],"kind":"struct"},"17:12482:7189":{"crate_id":17,"path":["object","macho","LinkeditDataCommand"],"kind":"struct"},"2:11696:5449":{"crate_id":2,"path":["core","slice","iter","SplitNMut"],"kind":"struct"},"17:12700:7227":{"crate_id":17,"path":["object","macho","NoteCommand"],"kind":"struct"},"16:6679:6264":{"crate_id":16,"path":["gimli","read","lookup","PubStuffParser"],"kind":"struct"},"17:11922:7079":{"crate_id":17,"path":["object","macho","DyldCacheImageInfo"],"kind":"struct"},"5:6562:4584":{"crate_id":5,"path":["alloc","string","Drain"],"kind":"struct"},"17:13138:7398":{"crate_id":17,"path":["object","pe","ImageNtHeaders32"],"kind":"struct"},"2:3103:5132":{"crate_id":2,"path":["core","convert","num","FloatToInt"],"kind":"trait"},"24:4121:1762":{"crate_id":24,"path":["syn","token","Type"],"kind":"struct"},"6:4218:8364":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Phdr"],"kind":"struct"},"2:3171:150":{"crate_id":2,"path":["core","convert","Into"],"kind":"trait"},"1:6477:8748":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt","st_atime"],"kind":"foreign_type"},"1:7599:4873":{"crate_id":1,"path":["std","process","exit"],"kind":"function"},"2:49957:5477":{"crate_id":2,"path":["core","str","iter","RMatchIndices"],"kind":"struct"},"2:4998:3345":{"crate_id":2,"path":["core","cell","lazy","LazyCell"],"kind":"struct"},"17:10211:48047":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdatSectionIterator"],"kind":"struct"},"1:6573:4674":{"crate_id":1,"path":["std","os","linux","process","ChildExt"],"kind":"trait"},"24:6137:3192":{"crate_id":24,"path":["syn","op","BinOp"],"kind":"enum"},"2:47865:3261":{"crate_id":2,"path":["core","option","IntoIter"],"kind":"struct"},"6:626:8051":{"crate_id":6,"path":["libc","unix","servent"],"kind":"struct"},"17:13271:7429":{"crate_id":17,"path":["object","pe","ImageSymbolExBytes"],"kind":"struct"},"17:13522:7497":{"crate_id":17,"path":["object","pe","ImageResourceDirStringU"],"kind":"struct"},"6:1526:8060":{"crate_id":6,"path":["libc","unix","linux_like","in_addr"],"kind":"struct"},"14:11:9551":{"crate_id":14,"path":["rustc_demangle","legacy","Demangle"],"kind":"struct"},"17:10660:48184":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandVariant"],"kind":"enum"},"24:2881:6443":{"crate_id":24,"path":["syn","parse","discouraged","Speculative"],"kind":"trait"},"1:1447:4841":{"crate_id":1,"path":["std","collections","hash","map","ValuesMut"],"kind":"struct"},"2:25118:166":{"crate_id":2,"path":["core","num","nonzero","NonZeroI128"],"kind":"struct"},"2:46785:5548":{"crate_id":2,"path":["core","ffi","c_str","FromBytesWithNulErrorKind"],"kind":"enum"},"5:6498:228":{"crate_id":5,"path":["alloc","string","ToString"],"kind":"trait"},"5:7048:5633":{"crate_id":5,"path":["alloc","task","Wake"],"kind":"trait"},"2:47331:9270":{"crate_id":2,"path":["core","iter","sources","successors","Successors"],"kind":"struct"},"2:48001:180":{"crate_id":2,"path":["core","sync","atomic","Ordering"],"kind":"enum"},"17:13557:7505":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation32"],"kind":"struct"},"6:4464:8460":{"crate_id":6,"path":["libc","unix","linux_like","linux","dirent64"],"kind":"struct"},"1:1477:4846":{"crate_id":1,"path":["std","collections","hash","map","RawOccupiedEntryMut"],"kind":"struct"},"6:5455:8652":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","sifields_sigchld"],"kind":"struct"},"1:12565:4942":{"crate_id":1,"path":["std","sys","unix","fs","ReadDir"],"kind":"struct"},"16:5460:5956":{"crate_id":16,"path":["gimli","read","cfi","CieOrFde"],"kind":"enum"},"16:6277:6107":{"crate_id":16,"path":["gimli","read","line","LineInstructions"],"kind":"struct"},"18:645:6422":{"crate_id":18,"path":["memchr","memmem","prefilter","PrefilterFn"],"kind":"struct"},"6:6979:8880":{"crate_id":6,"path":["libc","unix","align","in6_addr"],"kind":"struct"},"1:11905:57721":{"crate_id":1,"path":["std","sync","mpsc","sync","Failure"],"kind":"enum"},"6:4392:8428":{"crate_id":6,"path":["libc","unix","linux_like","linux","j1939_filter"],"kind":"struct"},"2:51376:8991":{"crate_id":2,"path":["core","core_arch","simd","i8x2"],"kind":"struct"},"16:7200:6075":{"crate_id":16,"path":["gimli","read","rnglists","RawRngListIter"],"kind":"struct"},"16:7051:6121":{"crate_id":16,"path":["gimli","read","op","OperationIter"],"kind":"struct"},"2:48832:134":{"crate_id":2,"path":["core","fmt","rt","v1","FormatSpec"],"kind":"struct"},"1:10278:6695":{"crate_id":1,"path":["std","backtrace_rs","print","BacktraceFrameFmt"],"kind":"struct"},"24:5850:3174":{"crate_id":24,"path":["syn","expr","ExprUnary"],"kind":"struct"},"17:13369:7454":{"crate_id":17,"path":["object","pe","ImageBaseRelocation"],"kind":"struct"},"17:12646:7221":{"crate_id":17,"path":["object","macho","FvmfileCommand"],"kind":"struct"},"16:6907:6119":{"crate_id":16,"path":["gimli","read","op","Piece"],"kind":"struct"},"17:13180:7410":{"crate_id":17,"path":["object","pe","AnonObjectHeaderV2"],"kind":"struct"},"1:8096:4215":{"crate_id":1,"path":["std","sync","mpsc","stream","Packet"],"kind":"struct"},"2:49679:5459":{"crate_id":2,"path":["core","slice","iter","RChunksMut"],"kind":"struct"},"5:6775:5651":{"crate_id":5,"path":["alloc","sync","ArcInner"],"kind":"struct"},"2:52691:5244":{"crate_id":2,"path":["core","core_arch","simd","i64x4"],"kind":"struct"},"17:12383:7178":{"crate_id":17,"path":["object","macho","DylibModule64"],"kind":"struct"},"1:8281:204":{"crate_id":1,"path":["std","sync","mpsc","Receiver"],"kind":"struct"},"12:2072:1813":{"crate_id":12,"path":["hashbrown","set","Union"],"kind":"struct"},"24:5467:3135":{"crate_id":24,"path":["syn","data","FieldsUnnamed"],"kind":"struct"},"24:5790:3160":{"crate_id":24,"path":["syn","expr","ExprLoop"],"kind":"struct"},"17:12620:7219":{"crate_id":17,"path":["object","macho","SymsegCommand"],"kind":"struct"},"1:10703:4963":{"crate_id":1,"path":["std","io","buffered","linewritershim","LineWriterShim"],"kind":"struct"},"1:12014:4804":{"crate_id":1,"path":["std","sync","mpsc","RecvTimeoutError"],"kind":"enum"},"24:5046:3462":{"crate_id":24,"path":["syn","token","Ne"],"kind":"struct"},"5:1673:3266":{"crate_id":5,"path":["alloc","collections","btree","map","IterMut"],"kind":"struct"},"24:3761:3419":{"crate_id":24,"path":["syn","token","In"],"kind":"struct"},"6:593:8033":{"crate_id":6,"path":["libc","unix","winsize"],"kind":"struct"},"22:959:2484":{"crate_id":22,"path":["proc_macro2","imp","Literal"],"kind":"enum"},"2:46187:196":{"crate_id":2,"path":["core","ops","range","Range"],"kind":"struct"},"24:2339:3260":{"crate_id":24,"path":["syn","punctuated","IntoPairs"],"kind":"struct"},"21:2463:4623":{"crate_id":21,"path":["proc_macro","bridge","DelimSpan"],"kind":"struct"},"6:5390:8629":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","Elf64_Chdr"],"kind":"struct"},"5:8271:3261":{"crate_id":5,"path":["alloc","collections","btree","set","IntoIter"],"kind":"struct"},"16:5530:5960":{"crate_id":16,"path":["gimli","read","cfi","CommonInformationEntry"],"kind":"struct"},"24:4976:3457":{"crate_id":24,"path":["syn","token","Ge"],"kind":"struct"},"1:2510:4938":{"crate_id":1,"path":["std","error","Indented"],"kind":"struct"},"24:3995:3428":{"crate_id":24,"path":["syn","token","SelfType"],"kind":"struct"},"24:5309:3481":{"crate_id":24,"path":["syn","token","Tilde"],"kind":"struct"},"1:8777:4862":{"crate_id":1,"path":["std","sync","once_lock","OnceLock"],"kind":"struct"},"2:22847:61358":{"crate_id":2,"path":["core","core_simd","swizzle","rotate_lanes_left","Rotate"],"kind":"struct"},"24:5757:3152":{"crate_id":24,"path":["syn","expr","ExprContinue"],"kind":"struct"},"1:8939:3693":{"crate_id":1,"path":["std","sync","rwlock","RwLock"],"kind":"struct"},"2:10512:207":{"crate_id":2,"path":["core","fmt","Result"],"kind":"typedef"},"1:8288:4799":{"crate_id":1,"path":["std","sync","mpsc","Sender"],"kind":"struct"},"2:23151:4677":{"crate_id":2,"path":["core","core_simd","elements","sealed","Sealed"],"kind":"trait"},"2:49733:5553":{"crate_id":2,"path":["core","str","error","Utf8Error"],"kind":"struct"},"6:6268:8843":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ucontext_t"],"kind":"struct"},"2:50508:5494":{"crate_id":2,"path":["core","str","CharEscapeDebugContinue"],"kind":"struct"},"6:3960:8265":{"crate_id":6,"path":["libc","unix","linux_like","linux","itimerspec"],"kind":"struct"},"2:32592:4293":{"crate_id":2,"path":["core","mem","manually_drop","ManuallyDrop"],"kind":"struct"},"2:47004:5305":{"crate_id":2,"path":["core","iter","adapters","intersperse","Intersperse"],"kind":"struct"},"1:5708:5053":{"crate_id":1,"path":["std","os","unix","net","ancillary","AncillaryDataIter"],"kind":"struct"},"24:5133:3468":{"crate_id":24,"path":["syn","token","RArrow"],"kind":"struct"},"2:23102:5095":{"crate_id":2,"path":["core","core_simd","elements","int","SimdInt"],"kind":"trait"},"21:609:6640":{"crate_id":21,"path":["proc_macro","bridge","server","RunningSameThreadGuard"],"kind":"struct"},"2:52301:5269":{"crate_id":2,"path":["core","core_arch","simd","u8x32"],"kind":"struct"},"1:1466:4845":{"crate_id":1,"path":["std","collections","hash","map","RawEntryMut"],"kind":"enum"},"2:48152:88":{"crate_id":2,"path":["core","sync","atomic","AtomicU16"],"kind":"struct"},"2:5753:784":{"crate_id":2,"path":["core","iter"],"kind":"module"},"5:1710:4840":{"crate_id":5,"path":["alloc","collections","btree","map","Values"],"kind":"struct"},"6:6184:8806":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user"],"kind":"struct"},"2:51853:5263":{"crate_id":2,"path":["core","core_arch","simd","u64x2"],"kind":"struct"},"1:3381:6674":{"crate_id":1,"path":["std","io","buffered","bufwriter","flush_buf","BufGuard"],"kind":"struct"},"24:6322:3198":{"crate_id":24,"path":["syn","ty","TypeGroup"],"kind":"struct"},"24:5783:3158":{"crate_id":24,"path":["syn","expr","ExprLet"],"kind":"struct"},"17:12183:7126":{"crate_id":17,"path":["object","macho","SubClientCommand"],"kind":"struct"},"17:10874:6945":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbol"],"kind":"struct"},"1:11314:4665":{"crate_id":1,"path":["std","os","fd","owned","BorrowedFd"],"kind":"struct"},"5:6739:69":{"crate_id":5,"path":["alloc","sync","Arc"],"kind":"struct"},"6:1704:8176":{"crate_id":6,"path":["libc","unix","linux_like","arpreq_old"],"kind":"struct"},"17:13938:7623":{"crate_id":17,"path":["object","pe","NonPagedDebugInfo"],"kind":"struct"},"21:2781:3375":{"crate_id":21,"path":["proc_macro","diagnostic","Level"],"kind":"enum"},"2:14183:34337":{"crate_id":2,"path":["core","future","poll_fn","PollFn"],"kind":"struct"},"6:4321:8391":{"crate_id":6,"path":["libc","unix","linux_like","linux","arpd_request"],"kind":"struct"},"17:12117:7116":{"crate_id":17,"path":["object","macho","Fvmlib"],"kind":"struct"},"1:696:4229":{"crate_id":1,"path":["std","thread","local","LocalKey"],"kind":"struct"},"5:2266:6648":{"crate_id":5,"path":["alloc","collections","btree","mem","replace","PanicGuard"],"kind":"struct"},"16:6691:6117":{"crate_id":16,"path":["gimli","read","op","DieReference"],"kind":"enum"},"1:1108:12066":{"crate_id":1,"path":["std","backtrace","BacktraceSymbol"],"kind":"struct"},"2:2963:186":{"crate_id":2,"path":["core","cmp","PartialOrd"],"kind":"trait"},"1:853:4226":{"crate_id":1,"path":["std","thread","scoped","Scope"],"kind":"struct"},"2:4:985":{"crate_id":2,"path":["core","panic"],"kind":"macro"},"5:844:227":{"crate_id":5,"path":["alloc","borrow","ToOwned"],"kind":"trait"},"2:3442:5115":{"crate_id":2,"path":["core","ops","arith","Mul"],"kind":"trait"},"2:47984:3266":{"crate_id":2,"path":["core","result","IterMut"],"kind":"struct"},"6:3877:8204":{"crate_id":6,"path":["libc","unix","linux_like","linux","rlimit64"],"kind":"struct"},"22:1100:3261":{"crate_id":22,"path":["proc_macro2","token_stream","IntoIter"],"kind":"struct"},"6:539:7998":{"crate_id":6,"path":["libc","unix","rlimit"],"kind":"struct"},"2:3870:3342":{"crate_id":2,"path":["core","ops","unsize","CoerceUnsized"],"kind":"trait"},"1:15339:9144":{"crate_id":1,"path":["std","personality","dwarf","eh","EHContext"],"kind":"struct"},"1:6723:4666":{"crate_id":1,"path":["std","os","fd","owned","OwnedFd"],"kind":"struct"},"1:2397:13081":{"crate_id":1,"path":["std","env","SplitPaths"],"kind":"struct"},"24:5854:3175":{"crate_id":24,"path":["syn","expr","ExprUnsafe"],"kind":"struct"},"1:10217:1856":{"crate_id":1,"path":["std","backtrace_rs","symbolize","Symbol"],"kind":"struct"},"16:5326:5946":{"crate_id":16,"path":["gimli","read","cfi","EhFrameHdr"],"kind":"struct"},"6:4296:8380":{"crate_id":6,"path":["libc","unix","linux_like","linux","posix_spawnattr_t"],"kind":"struct"},"17:10093:6392":{"crate_id":17,"path":["object","read","coff","section","CoffSegment"],"kind":"struct"},"17:10028:48031":{"crate_id":17,"path":["object","read","archive","ArchiveMemberIterator"],"kind":"struct"},"24:6060:3188":{"crate_id":24,"path":["syn","lit","LitFloat"],"kind":"struct"},"2:13362:5144":{"crate_id":2,"path":["core","str","pattern","DoubleEndedSearcher"],"kind":"trait"},"24:6056:3187":{"crate_id":24,"path":["syn","lit","LitChar"],"kind":"struct"},"2:46253:199":{"crate_id":2,"path":["core","ops","range","RangeInclusive"],"kind":"struct"},"12:777:3261":{"crate_id":12,"path":["hashbrown","map","IntoIter"],"kind":"struct"},"18:136:54295":{"crate_id":18,"path":["memchr","memchr","iter","Memchr"],"kind":"struct"},"1:3060:4951":{"crate_id":1,"path":["std","fs","canonicalize"],"kind":"function"},"18:651:6419":{"crate_id":18,"path":["memchr","memmem","prefilter","Prefilter"],"kind":"enum"},"6:4440:8446":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlattr"],"kind":"struct"},"2:1926:2204":{"crate_id":2,"path":["core","mem"],"kind":"module"},"2:24068:4677":{"crate_id":2,"path":["core","core_simd","vector","sealed","Sealed"],"kind":"trait"},"16:6490:6113":{"crate_id":16,"path":["gimli","read","loclists","DebugLoc"],"kind":"struct"},"6:521:7990":{"crate_id":6,"path":["libc","unix","utimbuf"],"kind":"struct"},"2:46370:3335":{"crate_id":2,"path":["core","any","tags","Ref"],"kind":"struct"},"17:10166:6908":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbol"],"kind":"struct"},"1:5730:5055":{"crate_id":1,"path":["std","os","unix","net","ancillary","ScmRights"],"kind":"struct"},"12:815:4843":{"crate_id":12,"path":["hashbrown","map","IntoValues"],"kind":"struct"},"2:5224:3335":{"crate_id":2,"path":["core","cell","Ref"],"kind":"struct"},"6:6007:8727":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","flock64"],"kind":"struct"},"17:11130:9193":{"crate_id":17,"path":["object","read","SymbolMap"],"kind":"struct"},"1:1397:3261":{"crate_id":1,"path":["std","collections","hash","map","IntoIter"],"kind":"struct"},"6:1544:8068":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreq_source"],"kind":"struct"},"17:12716:7229":{"crate_id":17,"path":["object","macho","Nlist32"],"kind":"struct"},"24:2746:4677":{"crate_id":24,"path":["syn","sealed","lookahead","Sealed"],"kind":"trait"},"1:5759:5059":{"crate_id":1,"path":["std","os","unix","net","ancillary","Messages"],"kind":"struct"},"5:7207:6659":{"crate_id":5,"path":["alloc","vec","drain_filter","drop","BackshiftOnDrop"],"kind":"struct"},"2:8874:158":{"crate_id":2,"path":["core","iter","traits","iterator","Iterator"],"kind":"trait"},"24:5761:3153":{"crate_id":24,"path":["syn","expr","ExprField"],"kind":"struct"},"2:24953:4220":{"crate_id":2,"path":["core","num","nonzero","NonZeroUsize"],"kind":"struct"},"17:9361:6897":{"crate_id":17,"path":["object","endian","U64Bytes"],"kind":"struct"},"2:11682:5448":{"crate_id":2,"path":["core","slice","iter","RSplitN"],"kind":"struct"},"2:47064:5313":{"crate_id":2,"path":["core","iter","adapters","skip","Skip"],"kind":"struct"},"6:4012:8290":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_event"],"kind":"struct"},"17:11002:48261":{"crate_id":17,"path":["object","read","pe","section","PeRelocationIterator"],"kind":"struct"},"2:3907:4463":{"crate_id":2,"path":["core","ops","unsize","DispatchFromDyn"],"kind":"trait"},"1:10789:4882":{"crate_id":1,"path":["std","io","error","SimpleMessage"],"kind":"struct"},"24:5263:3478":{"crate_id":24,"path":["syn","token","Star"],"kind":"struct"},"9:722:5746":{"crate_id":9,"path":["miniz_oxide","deflate","core","TDEFLFlush"],"kind":"enum"},"24:5818:3166":{"crate_id":24,"path":["syn","expr","ExprReference"],"kind":"struct"},"17:9716:63890":{"crate_id":17,"path":["object","read","any","SectionIteratorInternal"],"kind":"enum"},"17:11514:6998":{"crate_id":17,"path":["object","elf","CompressionHeader32"],"kind":"struct"},"6:4160:8360":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Ehdr"],"kind":"struct"},"6:4446:8449":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_nl"],"kind":"struct"},"1:7139:188":{"crate_id":1,"path":["std","path","PathBuf"],"kind":"struct"},"1:10794:4883":{"crate_id":1,"path":["std","io","error","Custom"],"kind":"struct"},"1:4217:4724":{"crate_id":1,"path":["std","io","stdio","Stdout"],"kind":"struct"},"17:9883:63888":{"crate_id":17,"path":["object","read","any","SymbolIteratorInternal"],"kind":"enum"},"21:2550:1776":{"crate_id":21,"path":["proc_macro","bridge","Ident"],"kind":"struct"},"2:48929:4159":{"crate_id":2,"path":["core","fmt","FlagV1"],"kind":"enum"},"2:53871:9063":{"crate_id":2,"path":["core","core_arch","x86","cpuid","CpuidResult"],"kind":"struct"},"6:672:41113":{"crate_id":6,"path":["libc","unix","linux_like","timezone"],"kind":"enum"},"2:50349:5155":{"crate_id":2,"path":["core","str","pattern","StrSearcher"],"kind":"struct"},"24:5862:3177":{"crate_id":24,"path":["syn","expr","ExprYield"],"kind":"struct"},"2:50088:5485":{"crate_id":2,"path":["core","str","iter","EscapeDebug"],"kind":"struct"},"5:2284:5669":{"crate_id":5,"path":["alloc","collections","btree","merge_iter","MergeIterInner"],"kind":"struct"},"2:50312:5154":{"crate_id":2,"path":["core","str","pattern","CharPredicateSearcher"],"kind":"struct"},"24:5427:3133":{"crate_id":24,"path":["syn","attr","MetaNameValue"],"kind":"struct"},"2:56625:241":{"crate_id":2,"path":["core","core_simd","fmt","fmt","Wrapper"],"kind":"struct"},"2:23962:4788":{"crate_id":2,"path":["core","core_simd","vector","Simd"],"kind":"struct"},"1:1146:12068":{"crate_id":1,"path":["std","backtrace","LazilyResolvedCapture"],"kind":"struct"},"1:2909:129":{"crate_id":1,"path":["std","fs","File"],"kind":"struct"},"2:8376:4729":{"crate_id":2,"path":["core","iter","sources","empty","Empty"],"kind":"struct"},"2:53684:9052":{"crate_id":2,"path":["core","core_arch","x86","__m128"],"kind":"struct"},"1:15886:3001":{"crate_id":1,"path":["std","pointer"],"kind":"primitive"},"6:1567:8078":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_in6"],"kind":"struct"},"1:12053:5014":{"crate_id":1,"path":["std","sync","condvar","WaitTimeoutResult"],"kind":"struct"},"24:5735:3147":{"crate_id":24,"path":["syn","expr","ExprBox"],"kind":"struct"},"1:15894:3007":{"crate_id":1,"path":["std","f64"],"kind":"primitive"},"24:6005:3180":{"crate_id":24,"path":["syn","generics","PredicateEq"],"kind":"struct"},"1:11256:4993":{"crate_id":1,"path":["std","os","unix","net","ancillary","SocketAncillary"],"kind":"struct"},"2:46655:5616":{"crate_id":2,"path":["core","char","decode","DecodeUtf16Error"],"kind":"struct"},"16:5649:5965":{"crate_id":16,"path":["gimli","read","cfi","UnwindContext"],"kind":"struct"},"1:10999:4760":{"crate_id":1,"path":["std","net","addr","SocketAddr"],"kind":"enum"},"16:5176:7676":{"crate_id":16,"path":["gimli","constants","DwOp"],"kind":"struct"},"2:49160:9274":{"crate_id":2,"path":["core","hash","sip","Sip24Rounds"],"kind":"struct"},"1:12228:6467":{"crate_id":1,"path":["std","sys","unix","args","Args"],"kind":"struct"},"6:5229:8535":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","msghdr"],"kind":"struct"},"2:3392:4068":{"crate_id":2,"path":["core","marker","Freeze"],"kind":"trait"},"5:7891:239":{"crate_id":5,"path":["alloc","vec","Vec"],"kind":"struct"},"12:1203:5877":{"crate_id":12,"path":["hashbrown","map","OccupiedEntryRef"],"kind":"struct"},"17:1311:6398":{"crate_id":17,"path":["object","read","coff","relocation","CoffRelocationIterator"],"kind":"struct"},"2:3835:5201":{"crate_id":2,"path":["core","ops","try_trait","Residual"],"kind":"trait"},"2:13073:5475":{"crate_id":2,"path":["core","str","iter","MatchIndicesInternal"],"kind":"struct"},"2:3463:3287":{"crate_id":2,"path":["core","ops","arith","AddAssign"],"kind":"trait"},"24:6094:3191":{"crate_id":24,"path":["syn","mac","MacroDelimiter"],"kind":"enum"},"1:7782:6676":{"crate_id":1,"path":["std","sync","mpsc","mpsc_queue","Queue"],"kind":"struct"},"16:5238:46392":{"crate_id":16,"path":["gimli","endianity","RunTimeEndian"],"kind":"enum"},"1:11250:5057":{"crate_id":1,"path":["std","os","unix","net","ancillary","AncillaryError"],"kind":"enum"},"1:6576:4676":{"crate_id":1,"path":["std","os","linux","process","CommandExt"],"kind":"trait"},"17:3743:6321":{"crate_id":17,"path":["object","read","macho","section","MachOSectionIterator"],"kind":"struct"},"2:49857:5473":{"crate_id":2,"path":["core","str","iter","RSplitTerminator"],"kind":"struct"},"2:48320:90":{"crate_id":2,"path":["core","sync","atomic","AtomicU64"],"kind":"struct"},"6:4116:8338":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_effect"],"kind":"struct"},"17:9004:47969":{"crate_id":17,"path":["object","common","ComdatKind"],"kind":"enum"},"12:2045:4582":{"crate_id":12,"path":["hashbrown","set","DrainFilter"],"kind":"struct"},"1:2126:4584":{"crate_id":1,"path":["std","collections","hash","set","Drain"],"kind":"struct"},"2:49699:5461":{"crate_id":2,"path":["core","slice","iter","RChunksExactMut"],"kind":"struct"},"17:11725:7036":{"crate_id":17,"path":["object","elf","Verdef"],"kind":"struct"},"12:2419:3297":{"crate_id":12,"path":["hashbrown","TryReserveError"],"kind":"enum"},"24:5393:2109":{"crate_id":24,"path":["syn","attr","Attribute"],"kind":"struct"},"1:15023:4825":{"crate_id":1,"path":["std","sys_common","wtf8","CodePoint"],"kind":"struct"},"1:1405:4839":{"crate_id":1,"path":["std","collections","hash","map","Keys"],"kind":"struct"},"14:244:9234":{"crate_id":14,"path":["rustc_demangle","TryDemangleError"],"kind":"struct"},"5:3114:57369":{"crate_id":5,"path":["alloc","collections","btree","node","marker","ValMut"],"kind":"struct"},"24:5239:3476":{"crate_id":24,"path":["syn","token","Shr"],"kind":"struct"},"6:1694:8170":{"crate_id":6,"path":["libc","unix","linux_like","arpreq"],"kind":"struct"},"12:2052:4812":{"crate_id":12,"path":["hashbrown","set","Intersection"],"kind":"struct"},"1:4140:4967":{"crate_id":1,"path":["std","io","stdio","StdinRaw"],"kind":"struct"},"17:10115:6394":{"crate_id":17,"path":["object","read","coff","section","CoffSection"],"kind":"struct"},"16:5685:5969":{"crate_id":16,"path":["gimli","read","cfi","RegisterRuleIter"],"kind":"struct"},"17:13428:7468":{"crate_id":17,"path":["object","pe","ImageTlsDirectory64"],"kind":"struct"},"17:11615:7017":{"crate_id":17,"path":["object","elf","Rela32"],"kind":"struct"},"22:1005:1841":{"crate_id":22,"path":["proc_macro2","TokenTree"],"kind":"enum"},"12:0:2974":{"crate_id":12,"path":["hashbrown"],"kind":"module"},"6:5311:8580":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","rtentry"],"kind":"struct"},"2:46754:5370":{"crate_id":2,"path":["core","char","TryFromCharError"],"kind":"struct"},"24:4157:1813":{"crate_id":24,"path":["syn","token","Union"],"kind":"struct"},"17:10435:6313":{"crate_id":17,"path":["object","read","elf","note","NoteIterator"],"kind":"struct"},"5:8466:8883":{"crate_id":5,"path":["alloc","slice","merge_sort","Run"],"kind":"struct"},"16:3077:6286":{"crate_id":16,"path":["gimli","common","DebugMacroOffset"],"kind":"struct"},"1:14064:4724":{"crate_id":1,"path":["std","sys","unix","stdio","Stdout"],"kind":"struct"},"1:10534:13076":{"crate_id":1,"path":["std","env","VarError"],"kind":"enum"},"2:49113:9272":{"crate_id":2,"path":["core","hash","sip","SipHasher24"],"kind":"struct"},"2:14369:5506":{"crate_id":2,"path":["core","task","wake","Waker"],"kind":"struct"},"24:1160:2064":{"crate_id":24,"path":["syn","lifetime","Lifetime"],"kind":"struct"},"16:4975:7675":{"crate_id":16,"path":["gimli","constants","DwRle"],"kind":"struct"},"24:6134:1988":{"crate_id":24,"path":["syn","derive","DataUnion"],"kind":"struct"},"24:5412:1850":{"crate_id":24,"path":["syn","attr","Meta","NameValue"],"kind":"foreign_type"},"9:157:5762":{"crate_id":9,"path":["miniz_oxide","deflate","core","CompressorOxide"],"kind":"struct"},"24:2455:3268":{"crate_id":24,"path":["syn","punctuated","PrivateIterMut"],"kind":"struct"},"22:922:54527":{"crate_id":22,"path":["proc_macro2","imp","TokenTreeIter"],"kind":"enum"},"2:50777:4470":{"crate_id":2,"path":["core","alloc","AllocError"],"kind":"struct"},"2:22902:61752":{"crate_id":2,"path":["core","core_simd","swizzle","deinterleave","Odd"],"kind":"struct"},"2:3522:5086":{"crate_id":2,"path":["core","ops","bit","BitOrAssign"],"kind":"trait"},"5:4017:4582":{"crate_id":5,"path":["alloc","collections","linked_list","DrainFilter"],"kind":"struct"},"2:46954:5300":{"crate_id":2,"path":["core","iter","adapters","filter","Filter"],"kind":"struct"},"2:23763:5101":{"crate_id":2,"path":["core","core_simd","ord","SimdPartialOrd"],"kind":"trait"},"17:12026:7098":{"crate_id":17,"path":["object","macho","SegmentCommand32"],"kind":"struct"},"17:9291:6896":{"crate_id":17,"path":["object","endian","U16Bytes"],"kind":"struct"},"2:10584:3354":{"crate_id":2,"path":["core","fmt","UpperExp"],"kind":"trait"},"16:5855:5976":{"crate_id":16,"path":["gimli","read","cfi","CallFrameInstructionIter"],"kind":"struct"},"12:1103:4849":{"crate_id":12,"path":["hashbrown","map","Entry"],"kind":"enum"},"2:22862:61358":{"crate_id":2,"path":["core","core_simd","swizzle","rotate_lanes_right","Rotate"],"kind":"struct"},"1:14404:4756":{"crate_id":1,"path":["std","sys","unix","fs","OpenOptions"],"kind":"struct"},"24:3473:1823":{"crate_id":24,"path":["syn","token","Box"],"kind":"struct"},"2:51400:5266":{"crate_id":2,"path":["core","core_arch","simd","u8x4"],"kind":"struct"},"1:11105:4893":{"crate_id":1,"path":["std","net","ip","Ipv6MulticastScope"],"kind":"enum"},"17:13565:7507":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation64"],"kind":"struct"},"5:3104:2016":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Owned"],"kind":"enum"},"21:2843:3365":{"crate_id":21,"path":["proc_macro","ExpandError"],"kind":"struct"},"5:1760:5704":{"crate_id":5,"path":["alloc","collections","btree","map","RangeMut"],"kind":"struct"},"1:5513:4745":{"crate_id":1,"path":["std","os","unix","fs","OpenOptionsExt"],"kind":"trait"},"6:6688:8861":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","align","sem_t"],"kind":"struct"},"21:553:6639":{"crate_id":21,"path":["proc_macro","bridge","scoped_cell","replace","PutBackOnDrop"],"kind":"struct"},"1:1610:4852":{"crate_id":1,"path":["std","collections","hash","map","OccupiedError"],"kind":"struct"},"6:1621:8115":{"crate_id":6,"path":["libc","unix","linux_like","sched_param"],"kind":"struct"},"2:3369:3383":{"crate_id":2,"path":["core","marker","Sized"],"kind":"trait"},"1:15633:6704":{"crate_id":1,"path":["std","backtrace_rs","symbolize","gimli","mmap","Mmap"],"kind":"struct"},"2:52615:5237":{"crate_id":2,"path":["core","core_arch","simd","i16x16"],"kind":"struct"},"5:1751:196":{"crate_id":5,"path":["alloc","collections","btree","map","Range"],"kind":"struct"},"17:12674:7225":{"crate_id":17,"path":["object","macho","SourceVersionCommand"],"kind":"struct"},"17:11985:7094":{"crate_id":17,"path":["object","macho","MachHeader64"],"kind":"struct"},"24:6424:2207":{"crate_id":24,"path":["syn","path","QSelf"],"kind":"struct"},"6:4081:8319":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_ramp_effect"],"kind":"struct"},"1:11292:8737":{"crate_id":1,"path":["std","os","linux","raw","arch","stat"],"kind":"struct"},"12:928:4841":{"crate_id":12,"path":["hashbrown","map","ValuesMut"],"kind":"struct"},"24:2994:3306":{"crate_id":24,"path":["syn","parse","StepCursor"],"kind":"struct"},"24:5739:3148":{"crate_id":24,"path":["syn","expr","ExprBreak"],"kind":"struct"},"2:51947:5236":{"crate_id":2,"path":["core","core_arch","simd","i16x8"],"kind":"struct"},"24:5174:3471":{"crate_id":24,"path":["syn","token","RemEq"],"kind":"struct"},"2:47293:4273":{"crate_id":2,"path":["core","iter","sources","once","Once"],"kind":"struct"},"17:9517:2749":{"crate_id":17,"path":["object","read","util","Bytes"],"kind":"struct"},"12:1666:5887":{"crate_id":12,"path":["hashbrown","rustc_entry","RustcEntry"],"kind":"enum"},"17:9431:6899":{"crate_id":17,"path":["object","endian","I32Bytes"],"kind":"struct"},"2:23768:17339":{"crate_id":2,"path":["core","core_simd","ord","SimdOrd"],"kind":"trait"},"2:8636:5218":{"crate_id":2,"path":["core","iter","traits","accum","Product"],"kind":"trait"},"1:15900:3013":{"crate_id":1,"path":["std","u8"],"kind":"primitive"},"17:13840:7598":{"crate_id":17,"path":["object","pe","ImageEnclaveImport"],"kind":"struct"},"20:431:3881":{"crate_id":20,"path":["quote","__private","RepInterp"],"kind":"struct"},"24:956:64107":{"crate_id":24,"path":["syn","generics","ConstParamsMut"],"kind":"struct"},"17:13595:7513":{"crate_id":17,"path":["object","pe","ImagePrologueDynamicRelocationHeader"],"kind":"struct"},"2:48826:70":{"crate_id":2,"path":["core","fmt","rt","v1","Argument"],"kind":"struct"},"6:533:7996":{"crate_id":6,"path":["libc","unix","timespec"],"kind":"struct"},"17:13440:7474":{"crate_id":17,"path":["object","pe","ImageTlsDirectory32"],"kind":"struct"},"16:2883:6243":{"crate_id":16,"path":["gimli","common","DebugArangesOffset"],"kind":"struct"},"16:5959:5989":{"crate_id":16,"path":["gimli","read","endian_slice","EndianSlice"],"kind":"struct"},"2:3382:2406":{"crate_id":2,"path":["core","marker","PhantomData"],"kind":"struct"},"24:6052:3186":{"crate_id":24,"path":["syn","lit","LitByteStr"],"kind":"struct"},"17:12237:7134":{"crate_id":17,"path":["object","macho","DylinkerCommand"],"kind":"struct"},"1:1088:4939":{"crate_id":1,"path":["std","backtrace","Backtrace"],"kind":"struct"},"2:49356:5630":{"crate_id":2,"path":["core","slice","ascii","EscapeAscii"],"kind":"struct"},"1:13928:6700":{"crate_id":1,"path":["std","sys","unix","stack_overflow","Handler"],"kind":"struct"},"16:3461:6236":{"crate_id":16,"path":["gimli","common","DwoId"],"kind":"struct"},"17:10364:6380":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbol"],"kind":"struct"},"17:12003:7095":{"crate_id":17,"path":["object","macho","LoadCommand"],"kind":"struct"},"5:1256:62377":{"crate_id":5,"path":["alloc","collections","btree","append","MergeIter"],"kind":"struct"},"17:11013:47982":{"crate_id":17,"path":["object","read","traits","NoDynamicRelocationIterator"],"kind":"struct"},"9:900:7953":{"crate_id":9,"path":["miniz_oxide","inflate","core","LocalVars"],"kind":"struct"},"22:1050:1839":{"crate_id":22,"path":["proc_macro2","Spacing"],"kind":"enum"},"1:5567:4749":{"crate_id":1,"path":["std","os","unix","fs","DirEntryExt2"],"kind":"trait"},"24:4211:3434":{"crate_id":24,"path":["syn","token","Use"],"kind":"struct"},"2:47976:3262":{"crate_id":2,"path":["core","result","Iter"],"kind":"struct"},"17:11305:7234":{"crate_id":17,"path":["object","read","Relocation"],"kind":"struct"},"1:15906:3019":{"crate_id":1,"path":["std","usize"],"kind":"primitive"},"9:692:5745":{"crate_id":9,"path":["miniz_oxide","deflate","core","CompressionStrategy"],"kind":"enum"},"6:6937:8872":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_rwlock_t"],"kind":"struct"},"6:4135:8347":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_ff_erase"],"kind":"struct"},"18:820:6412":{"crate_id":18,"path":["memchr","memmem","FinderRev"],"kind":"struct"},"5:3441:5667":{"crate_id":5,"path":["alloc","collections","btree","set","IntersectionInner"],"kind":"enum"},"24:5368:1765":{"crate_id":24,"path":["syn","token","Group"],"kind":"struct"},"21:2993:2484":{"crate_id":21,"path":["proc_macro","Literal"],"kind":"struct"},"24:5423:3132":{"crate_id":24,"path":["syn","attr","MetaList"],"kind":"struct"},"2:12228:5463":{"crate_id":2,"path":["core","slice","iter","GroupByMut"],"kind":"struct"},"12:432:5880":{"crate_id":12,"path":["hashbrown","raw","RawDrain"],"kind":"struct"},"2:47052:5312":{"crate_id":2,"path":["core","iter","adapters","scan","Scan"],"kind":"struct"},"2:56242:5209":{"crate_id":2,"path":["core","core_simd","swizzle","Which"],"kind":"enum"},"17:13361:7452":{"crate_id":17,"path":["object","pe","ImageLinenumber"],"kind":"struct"},"24:161:4143":{"crate_id":24,"path":["syn","token","private","WithSpan"],"kind":"struct"},"17:8849:6369":{"crate_id":17,"path":["object","common","Architecture"],"kind":"enum"},"1:6745:4662":{"crate_id":1,"path":["std","os","fd","owned","AsFd"],"kind":"trait"},"17:12892:7246":{"crate_id":17,"path":["object","pe","ImageDosHeader"],"kind":"struct"},"2:47311:4337":{"crate_id":2,"path":["core","iter","sources","repeat","Repeat"],"kind":"struct"},"1:5425:4774":{"crate_id":1,"path":["std","os","unix","ffi","os_str","OsStringExt"],"kind":"trait"},"17:11068:6330":{"crate_id":17,"path":["object","read","SectionIndex"],"kind":"struct"},"1:8860:5015":{"crate_id":1,"path":["std","sync","poison","PoisonError"],"kind":"struct"},"17:11810:7064":{"crate_id":17,"path":["object","elf","HashHeader"],"kind":"struct"},"2:5529:5607":{"crate_id":2,"path":["core","char","REPLACEMENT_CHARACTER"],"kind":"constant"},"2:39184:4069":{"crate_id":2,"path":["core","marker","PhantomPinned"],"kind":"struct"},"12:1703:5889":{"crate_id":12,"path":["hashbrown","rustc_entry","RustcVacantEntry"],"kind":"struct"},"16:3402:5985":{"crate_id":16,"path":["gimli","common","SectionId"],"kind":"enum"},"5:7753:4589":{"crate_id":5,"path":["alloc","vec","in_place_drop","InPlaceDrop"],"kind":"struct"},"17:13735:7570":{"crate_id":17,"path":["object","pe","ImageHotPatchHashes"],"kind":"struct"},"17:11031:47983":{"crate_id":17,"path":["object","read","FileKind"],"kind":"enum"},"1:11952:4798":{"crate_id":1,"path":["std","sync","mpsc","TryIter"],"kind":"struct"},"2:49759:5467":{"crate_id":2,"path":["core","str","iter","Chars"],"kind":"struct"},"6:3920:8232":{"crate_id":6,"path":["libc","unix","linux_like","linux","dqblk"],"kind":"struct"},"2:10851:5214":{"crate_id":2,"path":["core","hash","BuildHasherDefault"],"kind":"struct"},"2:50528:5498":{"crate_id":2,"path":["core","str","IsNotEmpty"],"kind":"struct"},"2:14359:4467":{"crate_id":2,"path":["core","task","wake","Context"],"kind":"struct"},"17:8954:6331":{"crate_id":17,"path":["object","common","SectionKind"],"kind":"enum"},"2:24423:8893":{"crate_id":2,"path":["core","num","flt2dec","decoder","Decoded"],"kind":"struct"},"24:5946:3178":{"crate_id":24,"path":["syn","generics","BoundLifetimes"],"kind":"struct"},"16:6130:6103":{"crate_id":16,"path":["gimli","read","aranges","ArangeEntryIter"],"kind":"struct"},"12:1881:146":{"crate_id":12,"path":["hashbrown","set","HashSet"],"kind":"struct"},"16:3103:6239":{"crate_id":16,"path":["gimli","common","RawRangeListsOffset"],"kind":"struct"},"17:11890:7069":{"crate_id":17,"path":["object","macho","DyldCacheHeader"],"kind":"struct"},"2:4095:68":{"crate_id":2,"path":["core","any","Any"],"kind":"trait"},"16:5273:6895":{"crate_id":16,"path":["gimli","endianity","BigEndian"],"kind":"struct"},"17:11591:7013":{"crate_id":17,"path":["object","elf","Syminfo64"],"kind":"struct"},"1:11882:4872":{"crate_id":1,"path":["std","process","ExitCode"],"kind":"struct"},"2:13050:5474":{"crate_id":2,"path":["core","str","iter","SplitNInternal"],"kind":"struct"},"24:2807:6447":{"crate_id":24,"path":["syn","thread","ThreadBound"],"kind":"struct"},"5:1663:3262":{"crate_id":5,"path":["alloc","collections","btree","map","Iter"],"kind":"struct"},"5:3407:5666":{"crate_id":5,"path":["alloc","collections","btree","set","DifferenceInner"],"kind":"enum"},"24:5710:3141":{"crate_id":24,"path":["syn","expr","ExprAssign"],"kind":"struct"},"17:11433:6982":{"crate_id":17,"path":["object","elf","FileHeader64"],"kind":"struct"},"2:9161:5105":{"crate_id":2,"path":["core","iter","traits","marker","TrustedStep"],"kind":"trait"},"2:24527:5535":{"crate_id":2,"path":["core","num","error","ParseIntError"],"kind":"struct"},"2:53741:9057":{"crate_id":2,"path":["core","core_arch","x86","__m512i"],"kind":"struct"},"24:3923:3426":{"crate_id":24,"path":["syn","token","Priv"],"kind":"struct"},"17:9587:63889":{"crate_id":17,"path":["object","read","any","FileInternal"],"kind":"enum"},"16:7721:6069":{"crate_id":16,"path":["gimli","read","unit","EntriesTree"],"kind":"struct"},"2:3370:3341":{"crate_id":2,"path":["core","marker","Unsize"],"kind":"trait"},"1:10468:4214":{"crate_id":1,"path":["std","thread","Thread"],"kind":"struct"},"1:9143:4786":{"crate_id":1,"path":["std","std_float","StdFloat"],"kind":"trait"},"2:53756:9058":{"crate_id":2,"path":["core","core_arch","x86","__m512"],"kind":"struct"},"24:6104:1632":{"crate_id":24,"path":["syn","derive","DeriveInput"],"kind":"struct"},"2:13332:5140":{"crate_id":2,"path":["core","str","pattern"],"kind":"module"},"1:10303:6697":{"crate_id":1,"path":["std","backtrace_rs","Bomb"],"kind":"struct"},"1:12125:4927":{"crate_id":1,"path":["std","time","SystemTimeError"],"kind":"struct"},"2:3501:4818":{"crate_id":2,"path":["core","ops","bit","BitXor"],"kind":"trait"},"6:4242:8366":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Shdr"],"kind":"struct"},"21:2600:2484":{"crate_id":21,"path":["proc_macro","bridge","Literal"],"kind":"struct"},"2:13271:3284":{"crate_id":2,"path":["core","str","traits","FromStr"],"kind":"trait"},"1:15065:4833":{"crate_id":1,"path":["std","sys_common","wtf8","Wtf8CodePoints"],"kind":"struct"},"6:4256:8367":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Shdr"],"kind":"struct"},"24:4229:3435":{"crate_id":24,"path":["syn","token","Virtual"],"kind":"struct"},"1:15896:3009":{"crate_id":1,"path":["std","i16"],"kind":"primitive"},"2:3177:233":{"crate_id":2,"path":["core","convert","TryInto"],"kind":"trait"},"5:3838:3266":{"crate_id":5,"path":["alloc","collections","linked_list","IterMut"],"kind":"struct"},"2:9535:3699":{"crate_id":2,"path":["core","panic","unwind_safe","AssertUnwindSafe"],"kind":"struct"},"1:2917:4697":{"crate_id":1,"path":["std","fs","read_to_string"],"kind":"function"},"24:5280:3479":{"crate_id":24,"path":["syn","token","Sub"],"kind":"struct"},"24:3419:3407":{"crate_id":24,"path":["syn","token","Auto"],"kind":"struct"},"1:3803:128":{"crate_id":1,"path":["std","io","error","Error"],"kind":"struct"},"2:12772:5626":{"crate_id":2,"path":["core","slice","SlicePattern"],"kind":"trait"},"17:9836:63884":{"crate_id":17,"path":["object","read","any","SymbolTableInternal"],"kind":"enum"},"18:885:6417":{"crate_id":18,"path":["memchr","memmem","SearcherRev"],"kind":"struct"},"21:2947:3278":{"crate_id":21,"path":["proc_macro","Delimiter"],"kind":"enum"},"20:193:3726":{"crate_id":20,"path":["quote","__private","ThereIsNoIteratorInRepetition"],"kind":"struct"},"2:3453:3470":{"crate_id":2,"path":["core","ops","arith","Rem"],"kind":"trait"},"22:24:9300":{"crate_id":22,"path":["proc_macro2","marker","ProcMacroAutoTraits"],"kind":"struct"},"2:47084:5315":{"crate_id":2,"path":["core","iter","adapters","step_by","StepBy"],"kind":"struct"},"1:1418:4840":{"crate_id":1,"path":["std","collections","hash","map","Values"],"kind":"struct"},"24:6332:3202":{"crate_id":24,"path":["syn","ty","TypeNever"],"kind":"struct"},"2:3824:229":{"crate_id":2,"path":["core","ops","try_trait","Try"],"kind":"trait"},"5:7935:6659":{"crate_id":5,"path":["alloc","vec","retain_mut","BackshiftOnDrop"],"kind":"struct"},"1:15854:12069":{"crate_id":1,"path":["std","backtrace_rs","types","BytesOrWideString"],"kind":"enum"},"19:0:1000":{"crate_id":19,"path":["panic_unwind"],"kind":"module"},"2:49142:4905":{"crate_id":2,"path":["core","hash","sip","State"],"kind":"struct"},"17:13452:7475":{"crate_id":17,"path":["object","pe","ImageImportDescriptor"],"kind":"struct"},"2:5269:3336":{"crate_id":2,"path":["core","cell","BorrowRefMut"],"kind":"struct"},"6:4340:8401":{"crate_id":6,"path":["libc","unix","linux_like","linux","fanotify_response"],"kind":"struct"},"2:46097:5136":{"crate_id":2,"path":["core","ops","control_flow","ControlFlow"],"kind":"enum"},"1:11022:4761":{"crate_id":1,"path":["std","net","addr","SocketAddrV4"],"kind":"struct"},"24:5198:3473":{"crate_id":24,"path":["syn","token","Semi"],"kind":"struct"},"24:5774:3156":{"crate_id":24,"path":["syn","expr","ExprIf"],"kind":"struct"},"2:11627:5445":{"crate_id":2,"path":["core","slice","iter","RSplitMut"],"kind":"struct"},"18:744:63891":{"crate_id":18,"path":["memchr","memmem","twoway","SuffixKind"],"kind":"enum"},"12:353:9236":{"crate_id":12,"path":["hashbrown","raw","RawIterRange"],"kind":"struct"},"1:6479:8750":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt","st_mtime"],"kind":"foreign_type"},"18:857:6415":{"crate_id":18,"path":["memchr","memmem","SearcherConfig"],"kind":"struct"},"24:5449:1832":{"crate_id":24,"path":["syn","data","Fields"],"kind":"enum"},"2:11589:5444":{"crate_id":2,"path":["core","slice","iter","RSplit"],"kind":"struct"},"12:1147:4851":{"crate_id":12,"path":["hashbrown","map","VacantEntry"],"kind":"struct"},"16:5289:6056":{"crate_id":16,"path":["gimli","read","addr","DebugAddr"],"kind":"struct"},"2:56599:241":{"crate_id":2,"path":["core","core_simd","fmt","fmt","Wrapper"],"kind":"struct"},"24:2634:2486":{"crate_id":24,"path":["syn","spanned","Spanned"],"kind":"trait"},"2:48194:82":{"crate_id":2,"path":["core","sync","atomic","AtomicI32"],"kind":"struct"},"1:9439:57739":{"crate_id":1,"path":["std","sys_common","mutex","MovableMutex"],"kind":"struct"},"6:4088:8322":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_condition_effect"],"kind":"struct"},"18:774:6813":{"crate_id":18,"path":["memchr","memmem","x86","avx","nostd","Forward"],"kind":"struct"},"20:296:2064":{"crate_id":20,"path":["quote","__private","push_lifetime","Lifetime"],"kind":"struct"},"2:2953:179":{"crate_id":2,"path":["core","cmp","Ord"],"kind":"trait"},"2:48945:73":{"crate_id":2,"path":["core","fmt","Arguments"],"kind":"struct"},"24:299:1776":{"crate_id":24,"path":["syn","ident","Ident"],"kind":"function"},"2:53794:9060":{"crate_id":2,"path":["core","core_arch","x86","__m128bh"],"kind":"struct"},"2:48808:67":{"crate_id":2,"path":["core","fmt","Alignment"],"kind":"enum"},"2:50097:3363":{"crate_id":2,"path":["core","str","iter","EscapeDefault"],"kind":"struct"},"24:3689:131":{"crate_id":24,"path":["syn","token","Fn"],"kind":"struct"},"2:2277:5133":{"crate_id":2,"path":["core","ptr","metadata","PtrComponents"],"kind":"struct"},"1:8000:6676":{"crate_id":1,"path":["std","sync","mpsc","spsc_queue","Queue"],"kind":"struct"},"17:10775:48156":{"crate_id":17,"path":["object","read","macho","segment","MachOSegmentIterator"],"kind":"struct"},"17:10814:6325":{"crate_id":17,"path":["object","read","macho","section","MachOSectionInternal"],"kind":"struct"},"17:10266:6340":{"crate_id":17,"path":["object","read","elf","section","SectionTable"],"kind":"struct"},"16:4628:7664":{"crate_id":16,"path":["gimli","constants","DwId"],"kind":"struct"},"15:269:5901":{"crate_id":15,"path":["addr2line","RangeAttributes"],"kind":"struct"},"24:3348:3482":{"crate_id":24,"path":["syn","token","Underscore"],"kind":"struct"},"1:15315:9143":{"crate_id":1,"path":["std","alloc","System"],"kind":"struct"},"17:9183:6329":{"crate_id":17,"path":["object","common","SectionFlags"],"kind":"enum"},"1:14453:119":{"crate_id":1,"path":["std","sys","unix","fs","DirBuilder"],"kind":"struct"},"1:5563:4748":{"crate_id":1,"path":["std","os","unix","fs","DirEntryExt"],"kind":"trait"},"2:23228:4677":{"crate_id":2,"path":["core","core_simd","lane_count","sealed","Sealed"],"kind":"trait"},"21:2648:1841":{"crate_id":21,"path":["proc_macro","bridge","TokenTree"],"kind":"enum"},"7:0:1496":{"crate_id":7,"path":["unwind"],"kind":"module"},"21:2839:3277":{"crate_id":21,"path":["proc_macro","LexError"],"kind":"struct"},"24:4715:3440":{"crate_id":24,"path":["syn","token","AndAnd"],"kind":"struct"},"1:5151:4980":{"crate_id":1,"path":["std","net","tcp","TcpStream"],"kind":"struct"},"2:9157:5106":{"crate_id":2,"path":["core","iter","traits","marker","TrustedLen"],"kind":"trait"},"17:12585:7207":{"crate_id":17,"path":["object","macho","DyldInfoCommand"],"kind":"struct"},"2:46124:4465":{"crate_id":2,"path":["core","ops","generator","GeneratorState"],"kind":"enum"},"16:5887:5978":{"crate_id":16,"path":["gimli","read","cfi","PointerEncodingParameters"],"kind":"struct"},"6:3907:8222":{"crate_id":6,"path":["libc","unix","linux_like","linux","spwd"],"kind":"struct"},"16:7295:6063":{"crate_id":16,"path":["gimli","read","str","DebugStrOffsets"],"kind":"struct"},"1:5278:4988":{"crate_id":1,"path":["std","net","udp","UdpSocket"],"kind":"struct"},"2:10245:5427":{"crate_id":2,"path":["core","fmt","builders","PadAdapter"],"kind":"struct"},"17:13873:7605":{"crate_id":17,"path":["object","pe","ImageCoffSymbolsHeader"],"kind":"struct"},"2:53832:9062":{"crate_id":2,"path":["core","core_arch","x86","__m512bh"],"kind":"struct"},"22:994:1631":{"crate_id":22,"path":["proc_macro2","TokenStream"],"kind":"struct"},"6:1551:8070":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr"],"kind":"struct"},"6:6902:8864":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_rwlockattr_t"],"kind":"struct"},"2:11434:4706":{"crate_id":2,"path":["core","slice","iter","Split"],"kind":"struct"},"2:56677:241":{"crate_id":2,"path":["core","core_simd","fmt","fmt","Wrapper"],"kind":"struct"},"1:3042:4484":{"crate_id":1,"path":["std","fs","metadata"],"kind":"function"},"24:2150:4677":{"crate_id":24,"path":["syn","ext","private","Sealed"],"kind":"trait"},"6:612:8043":{"crate_id":6,"path":["libc","unix","itimerval"],"kind":"struct"},"21:1227:1631":{"crate_id":21,"path":["proc_macro","bridge","client","TokenStream"],"kind":"struct"},"1:11154:5046":{"crate_id":1,"path":["std","net","parser","AddrKind"],"kind":"enum"},"6:4038:8301":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_keymap_entry"],"kind":"struct"},"2:3654:4464":{"crate_id":2,"path":["core","ops","generator","Generator"],"kind":"trait"},"24:3617:3413":{"crate_id":24,"path":["syn","token","Else"],"kind":"struct"},"1:14429:4944":{"crate_id":1,"path":["std","sys","unix","fs","FileTimes"],"kind":"struct"},"1:15905:3018":{"crate_id":1,"path":["std","isize"],"kind":"primitive"},"21:2922:3371":{"crate_id":21,"path":["proc_macro","SourceFile"],"kind":"struct"},"1:4428:4698":{"crate_id":1,"path":["std","io","IoSliceMut"],"kind":"struct"},"2:13351:5142":{"crate_id":2,"path":["core","str","pattern","Searcher"],"kind":"trait"},"2:46297:3291":{"crate_id":2,"path":["core","ops","range","Bound"],"kind":"enum"},"1:14630:9557":{"crate_id":1,"path":["std","sys","unix","os","JoinPathsError"],"kind":"struct"},"2:53619:5265":{"crate_id":2,"path":["core","core_arch","simd","u64x8"],"kind":"struct"},"6:6120:8765":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_fpxreg"],"kind":"struct"},"24:3545:3410":{"crate_id":24,"path":["syn","token","Crate"],"kind":"struct"},"1:8497:5009":{"crate_id":1,"path":["std","sync","condvar","Condvar"],"kind":"struct"},"24:6009:1852":{"crate_id":24,"path":["syn","lit","Lit"],"kind":"enum"},"1:3070:4956":{"crate_id":1,"path":["std","fs","read_dir"],"kind":"function"},"16:7309:6061":{"crate_id":16,"path":["gimli","read","str","DebugLineStr"],"kind":"struct"},"24:6001:3181":{"crate_id":24,"path":["syn","generics","PredicateLifetime"],"kind":"struct"},"24:1274:6455":{"crate_id":24,"path":["syn","lit","LitIntRepr"],"kind":"struct"},"24:6420:3210":{"crate_id":24,"path":["syn","path","ParenthesizedGenericArguments"],"kind":"struct"},"17:10104:6393":{"crate_id":17,"path":["object","read","coff","section","CoffSectionIterator"],"kind":"struct"},"16:2772:6249":{"crate_id":16,"path":["gimli","common","LineEncoding"],"kind":"struct"},"2:50191:5145":{"crate_id":2,"path":["core","str","pattern","CharSearcher"],"kind":"struct"},"20:357:2486":{"crate_id":20,"path":["quote","spanned","Spanned"],"kind":"trait"},"24:5951:2209":{"crate_id":24,"path":["syn","generics","TypeParamBound"],"kind":"enum"},"18:712:4074":{"crate_id":18,"path":["memchr","memmem","twoway","Reverse"],"kind":"struct"},"24:5405:1848":{"crate_id":24,"path":["syn","attr","Meta"],"kind":"enum"},"17:11547:7004":{"crate_id":17,"path":["object","elf","Sym32"],"kind":"struct"},"24:5806:3164":{"crate_id":24,"path":["syn","expr","ExprParen"],"kind":"struct"},"17:13495:7490":{"crate_id":17,"path":["object","pe","ImageResourceDirectory"],"kind":"struct"},"2:52537:5249":{"crate_id":2,"path":["core","core_arch","simd","i8x32"],"kind":"struct"},"2:49587:5453":{"crate_id":2,"path":["core","slice","iter","ChunksMut"],"kind":"struct"},"1:15903:3016":{"crate_id":1,"path":["std","u64"],"kind":"primitive"},"1:1592:4850":{"crate_id":1,"path":["std","collections","hash","map","OccupiedEntry"],"kind":"struct"},"16:6433:6111":{"crate_id":16,"path":["gimli","read","line","FileEntry"],"kind":"struct"},"2:46675:5610":{"crate_id":2,"path":["core","char","EscapeUnicodeState"],"kind":"enum"},"17:11234:6371":{"crate_id":17,"path":["object","read","Export"],"kind":"struct"},"5:2005:4582":{"crate_id":5,"path":["alloc","collections","btree","map","DrainFilter"],"kind":"struct"},"6:5433:8645":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_exit"],"kind":"struct"},"1:12072:5020":{"crate_id":1,"path":["std","sync","once","OnceState"],"kind":"struct"},"6:5331:8596":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","timex"],"kind":"struct"},"24:5726:3145":{"crate_id":24,"path":["syn","expr","ExprBinary"],"kind":"struct"},"17:13073:7388":{"crate_id":17,"path":["object","pe","ImageRomOptionalHeader"],"kind":"struct"},"1:8195:4905":{"crate_id":1,"path":["std","sync","mpsc","sync","State"],"kind":"struct"},"2:47286:9268":{"crate_id":2,"path":["core","iter","sources","from_fn","FromFn"],"kind":"struct"},"16:2981:6237":{"crate_id":16,"path":["gimli","common","LocationListsOffset"],"kind":"struct"},"1:10511:12065":{"crate_id":1,"path":["std","backtrace","RawFrame"],"kind":"enum"},"2:46995:5307":{"crate_id":2,"path":["core","iter","adapters","inspect","Inspect"],"kind":"struct"},"2:24311:8886":{"crate_id":2,"path":["core","num","dec2flt","common","AsciiStr"],"kind":"struct"},"24:5964:2456":{"crate_id":24,"path":["syn","generics","TraitBound"],"kind":"struct"},"1:1483:4847":{"crate_id":1,"path":["std","collections","hash","map","RawVacantEntryMut"],"kind":"struct"},"18:811:6411":{"crate_id":18,"path":["memchr","memmem","Finder"],"kind":"struct"},"16:6035:6095":{"crate_id":16,"path":["gimli","read","abbrev","Abbreviation"],"kind":"struct"},"17:2484:48075":{"crate_id":17,"path":["object","read","elf","relocation","ElfRelaIterator"],"kind":"enum"},"21:2834:1631":{"crate_id":21,"path":["proc_macro","TokenStream"],"kind":"struct"},"2:3248:116":{"crate_id":2,"path":["core","default","Default"],"kind":"trait"},"1:1374:3262":{"crate_id":1,"path":["std","collections","hash","map","Iter"],"kind":"struct"},"17:11822:7067":{"crate_id":17,"path":["object","elf","GnuHashHeader"],"kind":"struct"},"21:816:3376":{"crate_id":21,"path":["proc_macro","diagnostic","MultiSpan"],"kind":"trait"},"16:6331:5893":{"crate_id":16,"path":["gimli","read","line","LineSequence"],"kind":"struct"},"6:6896:8863":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_mutexattr_t"],"kind":"struct"},"2:50540:122":{"crate_id":2,"path":["core","time","Duration"],"kind":"struct"},"2:51653:5239":{"crate_id":2,"path":["core","core_arch","simd","i32x2"],"kind":"struct"},"17:13887:7612":{"crate_id":17,"path":["object","pe","ImageDebugMisc"],"kind":"struct"},"13:121:46287":{"crate_id":13,"path":["std_detect","detect","arch","x86","Feature"],"kind":"enum"},"2:14420:203":{"crate_id":2,"path":["core","task","ready","Ready"],"kind":"struct"},"6:5398:8630":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","Elf32_Chdr"],"kind":"struct"},"2:53411:5242":{"crate_id":2,"path":["core","core_arch","simd","i32x16"],"kind":"struct"},"21:2044:4618":{"crate_id":21,"path":["proc_macro","bridge","Marked"],"kind":"struct"},"2:24821:172":{"crate_id":2,"path":["core","num","nonzero","NonZeroU16"],"kind":"struct"},"16:7702:6067":{"crate_id":16,"path":["gimli","read","unit","EntriesCursor"],"kind":"struct"},"1:10643:4942":{"crate_id":1,"path":["std","fs","ReadDir"],"kind":"struct"},"1:15899:3012":{"crate_id":1,"path":["std","i128"],"kind":"primitive"},"24:5753:3151":{"crate_id":24,"path":["syn","expr","ExprClosure"],"kind":"struct"},"1:14886:60807":{"crate_id":1,"path":["std","sys","unix","thread","cgroups","Cgroup"],"kind":"enum"},"2:25052:168":{"crate_id":2,"path":["core","num","nonzero","NonZeroI32"],"kind":"struct"},"12:1784:6644":{"crate_id":12,"path":["hashbrown","scopeguard","ScopeGuard"],"kind":"struct"},"17:9988:48029":{"crate_id":17,"path":["object","read","archive","ArchiveKind"],"kind":"enum"},"6:3933:8242":{"crate_id":6,"path":["libc","unix","linux_like","linux","signalfd_siginfo"],"kind":"struct"},"24:4698:3439":{"crate_id":24,"path":["syn","token","And"],"kind":"struct"},"17:10949:48237":{"crate_id":17,"path":["object","read","pe","section","PeSegmentIterator"],"kind":"struct"},"1:14665:4872":{"crate_id":1,"path":["std","sys","unix","process","process_common","ExitCode"],"kind":"struct"},"16:5668:5966":{"crate_id":16,"path":["gimli","read","cfi","UnwindTable"],"kind":"struct"},"17:9826:6355":{"crate_id":17,"path":["object","read","any","SymbolTable"],"kind":"struct"},"1:10428:57504":{"crate_id":1,"path":["std","thread","local","fast","DtorState"],"kind":"enum"},"1:2147:4814":{"crate_id":1,"path":["std","collections","hash","set","SymmetricDifference"],"kind":"struct"},"16:6643:6261":{"crate_id":16,"path":["gimli","read","lookup","LookupEntryIter"],"kind":"struct"},"1:4485:4682":{"crate_id":1,"path":["std","io","Seek"],"kind":"trait"},"5:3814:161":{"crate_id":5,"path":["alloc","collections","linked_list","LinkedList"],"kind":"struct"},"17:12348:7167":{"crate_id":17,"path":["object","macho","DylibTableOfContents"],"kind":"struct"},"6:1669:8151":{"crate_id":6,"path":["libc","unix","linux_like","ifaddrs"],"kind":"struct"},"16:6310:6108":{"crate_id":16,"path":["gimli","read","line","ColumnType"],"kind":"enum"},"2:12328:6672":{"crate_id":2,"path":["core","slice","sort","CopyOnDrop"],"kind":"struct"},"17:11168:9194":{"crate_id":17,"path":["object","read","ObjectMap"],"kind":"struct"},"2:50735:5505":{"crate_id":2,"path":["core","task","wake","RawWakerVTable"],"kind":"struct"},"1:7422:4863":{"crate_id":1,"path":["std","process","Child"],"kind":"struct"},"1:10550:9557":{"crate_id":1,"path":["std","env","JoinPathsError"],"kind":"struct"},"24:2280:3258":{"crate_id":24,"path":["syn","punctuated","Pairs"],"kind":"struct"},"16:2754:5982":{"crate_id":16,"path":["gimli","common","Encoding"],"kind":"struct"},"2:50512:5496":{"crate_id":2,"path":["core","str","CharEscapeUnicode"],"kind":"struct"},"2:3617:132":{"crate_id":2,"path":["core","ops","function","FnMut"],"kind":"trait"},"17:13129:7394":{"crate_id":17,"path":["object","pe","ImageNtHeaders64"],"kind":"struct"},"5:3395:3262":{"crate_id":5,"path":["alloc","collections","btree","set","Iter"],"kind":"struct"},"6:5293:8568":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_mmap_req"],"kind":"struct"},"1:12596:57716":{"crate_id":1,"path":["std","sys","unix","fs","TimespecDebugAdapter"],"kind":"struct"},"16:4903:7673":{"crate_id":16,"path":["gimli","constants","DwLnct"],"kind":"struct"},"12:843:4839":{"crate_id":12,"path":["hashbrown","map","Keys"],"kind":"struct"},"24:5227:3475":{"crate_id":24,"path":["syn","token","ShlEq"],"kind":"struct"},"16:7131:6128":{"crate_id":16,"path":["gimli","read","pubtypes","PubTypesEntryIter"],"kind":"struct"},"2:10039:86":{"crate_id":2,"path":["core","sync","atomic","AtomicPtr"],"kind":"struct"},"1:15884:3000":{"crate_id":1,"path":["std","unit"],"kind":"primitive"},"16:2839:6223":{"crate_id":16,"path":["gimli","common","DebugAddrBase"],"kind":"struct"},"24:5297:3480":{"crate_id":24,"path":["syn","token","SubEq"],"kind":"struct"},"5:8226:3261":{"crate_id":5,"path":["alloc","collections","binary_heap","IntoIter"],"kind":"struct"},"17:10788:48155":{"crate_id":17,"path":["object","read","macho","segment","MachOSegment"],"kind":"struct"},"5:5388:202":{"crate_id":5,"path":["alloc","rc","Rc"],"kind":"struct"},"2:50206:5148":{"crate_id":2,"path":["core","str","pattern","MultiCharEqSearcher"],"kind":"struct"},"24:658:6794":{"crate_id":24,"path":["syn","expr","parsing","AllowStruct"],"kind":"struct"},"17:2512:6379":{"crate_id":17,"path":["object","read","elf","relocation","ElfDynamicRelocationIterator"],"kind":"struct"},"16:5745:5972":{"crate_id":16,"path":["gimli","read","cfi","RegisterRule"],"kind":"enum"},"2:4865:103":{"crate_id":2,"path":["core","asserting","Capture"],"kind":"struct"},"1:11190:4982":{"crate_id":1,"path":["std","net","tcp","Incoming"],"kind":"struct"},"1:7470:4866":{"crate_id":1,"path":["std","process","ChildStderr"],"kind":"struct"},"1:15893:3006":{"crate_id":1,"path":["std","f32"],"kind":"primitive"},"17:11142:6958":{"crate_id":17,"path":["object","read","SymbolMapName"],"kind":"struct"},"24:3365:3404":{"crate_id":24,"path":["syn","token","Abstract"],"kind":"struct"},"1:10980:2749":{"crate_id":1,"path":["std","io","Bytes"],"kind":"struct"},"2:47874:3697":{"crate_id":2,"path":["core","panic","location","Location"],"kind":"struct"},"17:12048:7107":{"crate_id":17,"path":["object","macho","SegmentCommand64"],"kind":"struct"},"1:14931:4810":{"crate_id":1,"path":["std","sys","unix","time","inner","Instant"],"kind":"struct"},"21:2491:1765":{"crate_id":21,"path":["proc_macro","bridge","Group"],"kind":"struct"},"24:3653:3414":{"crate_id":24,"path":["syn","token","Extern"],"kind":"struct"},"16:4840:7671":{"crate_id":16,"path":["gimli","constants","DwLns"],"kind":"struct"},"1:11245:5054":{"crate_id":1,"path":["std","os","unix","net","ancillary","SocketCred"],"kind":"struct"},"5:8420:5548":{"crate_id":5,"path":["alloc","ffi","c_str","FromBytesWithNulErrorKind"],"kind":"enum"},"2:5078:3320":{"crate_id":2,"path":["core","cell","Cell"],"kind":"struct"},"24:4923:3454":{"crate_id":24,"path":["syn","token","Dot3"],"kind":"struct"},"2:32446:5580":{"crate_id":2,"path":["core","num","FpCategory"],"kind":"enum"},"1:8610:163":{"crate_id":1,"path":["std","sync","mutex","Mutex"],"kind":"struct"},"2:52221:9004":{"crate_id":2,"path":["core","core_arch","simd","m64x2"],"kind":"struct"},"1:14801:6703":{"crate_id":1,"path":["std","sys","unix","process","process_inner","posix_spawn","PosixSpawnattr"],"kind":"struct"},"1:11288:4675":{"crate_id":1,"path":["std","os","linux","process","PidFd"],"kind":"struct"},"17:13708:7558":{"crate_id":17,"path":["object","pe","ImageHotPatchInfo"],"kind":"struct"},"2:3484:5075":{"crate_id":2,"path":["core","ops","bit","Not"],"kind":"trait"},"24:3779:3420":{"crate_id":24,"path":["syn","token","Let"],"kind":"struct"},"16:6190:6106":{"crate_id":16,"path":["gimli","read","line","LineInstruction"],"kind":"enum"},"16:6026:6053":{"crate_id":16,"path":["gimli","read","abbrev","Abbreviations"],"kind":"struct"},"1:14460:4699":{"crate_id":1,"path":["std","sys","unix","io","IoSlice"],"kind":"struct"},"2:24440:40141":{"crate_id":2,"path":["core","num","flt2dec","decoder","FullDecoded"],"kind":"enum"},"5:4281:4584":{"crate_id":5,"path":["alloc","collections","vec_deque","drain","Drain"],"kind":"struct"},"24:5787:3159":{"crate_id":24,"path":["syn","expr","ExprLit"],"kind":"struct"},"5:8373:3298":{"crate_id":5,"path":["alloc","collections","TryReserveErrorKind"],"kind":"enum"},"6:6643:8849":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","not_x32","statvfs"],"kind":"struct"},"1:13783:4869":{"crate_id":1,"path":["std","sys","unix","process","process_common","Stdio"],"kind":"enum"},"2:53779:9059":{"crate_id":2,"path":["core","core_arch","x86","__m512d"],"kind":"struct"},"1:7456:4865":{"crate_id":1,"path":["std","process","ChildStdout"],"kind":"struct"},"24:5858:3176":{"crate_id":24,"path":["syn","expr","ExprWhile"],"kind":"struct"},"17:13507:7493":{"crate_id":17,"path":["object","pe","ImageResourceDirectoryEntry"],"kind":"struct"},"6:586:8030":{"crate_id":6,"path":["libc","unix","pollfd"],"kind":"struct"},"2:3620:133":{"crate_id":2,"path":["core","ops","function","FnOnce"],"kind":"trait"},"2:46594:9256":{"crate_id":2,"path":["core","async_iter","from_iter","FromIter"],"kind":"struct"},"16:0:2977":{"crate_id":16,"path":["gimli"],"kind":"module"},"2:10578:3356":{"crate_id":2,"path":["core","fmt","UpperHex"],"kind":"trait"},"5:3106:8882":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Immut"],"kind":"struct"},"2:2391:3344":{"crate_id":2,"path":["core","ptr","non_null","NonNull"],"kind":"struct"},"16:7281:6062":{"crate_id":16,"path":["gimli","read","str","DebugStr"],"kind":"struct"},"17:10394:6378":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdatIterator"],"kind":"struct"},"1:15888:3003":{"crate_id":1,"path":["std","slice"],"kind":"primitive"},"16:6342:6109":{"crate_id":16,"path":["gimli","read","line","LineProgramHeader"],"kind":"struct"},"24:5929:3179":{"crate_id":24,"path":["syn","generics","ConstParam"],"kind":"struct"},"17:10975:48235":{"crate_id":17,"path":["object","read","pe","section","PeSectionIterator"],"kind":"struct"},"17:12731:7233":{"crate_id":17,"path":["object","macho","Nlist64"],"kind":"struct"},"2:5143:2187":{"crate_id":2,"path":["core","cell","RefCell"],"kind":"struct"},"24:6356:3208":{"crate_id":24,"path":["syn","ty","TypeTuple"],"kind":"struct"},"6:1748:8193":{"crate_id":6,"path":["libc","unix","linux_like","utsname"],"kind":"struct"},"17:12170:7124":{"crate_id":17,"path":["object","macho","SubFrameworkCommand"],"kind":"struct"},"6:6057:8755":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stat64"],"kind":"struct"},"2:5147:3328":{"crate_id":2,"path":["core","cell","BorrowError"],"kind":"struct"},"16:3686:7649":{"crate_id":16,"path":["gimli","constants","DwUt"],"kind":"struct"},"1:859:4227":{"crate_id":1,"path":["std","thread","scoped","ScopedJoinHandle"],"kind":"struct"},"6:5426:8644":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_entry"],"kind":"struct"},"2:23387:17320":{"crate_id":2,"path":["core","core_simd","masks","to_bitmask","ToBitMask"],"kind":"trait"},"1:15889:3004":{"crate_id":1,"path":["std","str"],"kind":"primitive"},"2:48575:3348":{"crate_id":2,"path":["core","fmt","num","Octal"],"kind":"struct"},"2:14057:139":{"crate_id":2,"path":["core","future","future","Future"],"kind":"trait"},"16:7025:5990":{"crate_id":16,"path":["gimli","read","op","Expression"],"kind":"struct"},"1:8646:57706":{"crate_id":1,"path":["std","sync","mutex","fmt","LockedPlaceholder"],"kind":"struct"},"5:444:1823":{"crate_id":5,"path":["alloc","boxed","Box"],"kind":"struct"},"2:49618:5456":{"crate_id":2,"path":["core","slice","iter","ArrayWindows"],"kind":"struct"},"16:3007:6227":{"crate_id":16,"path":["gimli","common","DebugLocListsBase"],"kind":"struct"},"17:10058:6397":{"crate_id":17,"path":["object","read","coff","file","CoffFile"],"kind":"struct"},"6:1727:8186":{"crate_id":6,"path":["libc","unix","linux_like","epoll_event"],"kind":"struct"},"6:4005:8286":{"crate_id":6,"path":["libc","unix","linux_like","linux","sembuf"],"kind":"struct"},"5:777:9556":{"crate_id":5,"path":["alloc","boxed","from","StringError"],"kind":"struct"},"2:46329:5205":{"crate_id":2,"path":["core","ops","try_trait","Yeet"],"kind":"struct"},"2:48841:67":{"crate_id":2,"path":["core","fmt","rt","v1","Alignment"],"kind":"enum"},"12:856:4840":{"crate_id":12,"path":["hashbrown","map","Values"],"kind":"struct"},"16:5516:5959":{"crate_id":16,"path":["gimli","read","cfi","AugmentationData"],"kind":"struct"},"16:6050:6100":{"crate_id":16,"path":["gimli","read","abbrev","Attributes"],"kind":"enum"},"2:37928:180":{"crate_id":2,"path":["core","cmp","Ordering"],"kind":"enum"},"17:13215:7414":{"crate_id":17,"path":["object","pe","ImageSectionHeader"],"kind":"struct"},"6:3883:8205":{"crate_id":6,"path":["libc","unix","linux_like","linux","glob_t"],"kind":"struct"},"5:2843:5710":{"crate_id":5,"path":["alloc","collections","btree","node","Handle"],"kind":"struct"},"2:32792:61854":{"crate_id":2,"path":["core","mem","valid_align","ValidAlignEnum64"],"kind":"enum"},"1:4752:4758":{"crate_id":1,"path":["std","net","addr","ToSocketAddrs"],"kind":"trait"},"17:12015:7097":{"crate_id":17,"path":["object","macho","LcStr"],"kind":"struct"},"2:13408:5147":{"crate_id":2,"path":["core","str","pattern","MultiCharEqPattern"],"kind":"struct"},"2:10250:5428":{"crate_id":2,"path":["core","fmt","builders","PadAdapterState"],"kind":"struct"},"1:15895:3008":{"crate_id":1,"path":["std","i8"],"kind":"primitive"},"24:2864:3322":{"crate_id":24,"path":["syn","lookahead","Peek"],"kind":"trait"},"24:3905:3425":{"crate_id":24,"path":["syn","token","Override"],"kind":"struct"},"2:56638:241":{"crate_id":2,"path":["core","core_simd","fmt","fmt","Wrapper"],"kind":"struct"},"2:6640:5303":{"crate_id":2,"path":["core","iter","adapters","flatten","FlatMap"],"kind":"struct"},"5:3948:3318":{"crate_id":5,"path":["alloc","collections","linked_list","Cursor"],"kind":"struct"},"16:5721:5971":{"crate_id":16,"path":["gimli","read","cfi","CfaRule"],"kind":"enum"},"1:6647:4668":{"crate_id":1,"path":["std","os","fd","raw","FromRawFd"],"kind":"trait"},"2:46735:5614":{"crate_id":2,"path":["core","char","CaseMappingIter"],"kind":"enum"},"24:5251:3477":{"crate_id":24,"path":["syn","token","ShrEq"],"kind":"struct"},"2:8449:3327":{"crate_id":2,"path":["core","iter","sources","once","once"],"kind":"function"},"1:11890:9284":{"crate_id":1,"path":["std","sync","mpsc","blocking","SignalToken"],"kind":"struct"},"5:7731:4588":{"crate_id":5,"path":["alloc","vec","set_len_on_drop","SetLenOnDrop"],"kind":"struct"},"1:10554:1931":{"crate_id":1,"path":["std","error","private","Internal"],"kind":"struct"},"2:14456:142":{"crate_id":2,"path":["core","alloc","global","GlobalAlloc"],"kind":"trait"},"17:11968:7091":{"crate_id":17,"path":["object","macho","MachHeader32"],"kind":"struct"},"21:200:4654":{"crate_id":21,"path":["proc_macro","bridge","client","Client"],"kind":"struct"},"2:50536:5493":{"crate_id":2,"path":["core","str","UnsafeBytesToStr"],"kind":"struct"},"6:1558:8073":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_in"],"kind":"struct"},"16:6381:6070":{"crate_id":16,"path":["gimli","read","line","IncompleteLineProgram"],"kind":"struct"},"6:4493:8469":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_user_dev"],"kind":"struct"},"21:2795:3374":{"crate_id":21,"path":["proc_macro","diagnostic","Diagnostic"],"kind":"struct"},"5:2376:5724":{"crate_id":5,"path":["alloc","collections","btree","navigate","LazyLeafHandle"],"kind":"enum"},"16:5948:6222":{"crate_id":16,"path":["gimli","read","dwarf","RangeIterInner"],"kind":"enum"},"12:399:5881":{"crate_id":12,"path":["hashbrown","raw","RawIntoIter"],"kind":"struct"},"2:25520:5355":{"crate_id":2,"path":["core","num","saturating","Saturating"],"kind":"struct"},"5:1909:6646":{"crate_id":5,"path":["alloc","collections","btree","map","drop","DropGuard"],"kind":"struct"},"6:5247:8547":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","termios"],"kind":"struct"},"2:50285:5153":{"crate_id":2,"path":["core","str","pattern","CharSliceSearcher"],"kind":"struct"},"5:6340:4588":{"crate_id":5,"path":["alloc","string","retain","SetLenOnDrop"],"kind":"struct"},"2:57952:9070":{"crate_id":2,"path":["core","core_simd","vector","ptr","SimdConstPtr"],"kind":"struct"},"1:11088:4766":{"crate_id":1,"path":["std","net","ip","Ipv6Addr"],"kind":"struct"},"17:299:63878":{"crate_id":17,"path":["object","read","util","DebugLen"],"kind":"struct"},"24:6379:2449":{"crate_id":24,"path":["syn","path","PathSegment"],"kind":"struct"},"2:53657:5230":{"crate_id":2,"path":["core","core_arch","simd","f64x8"],"kind":"struct"},"2:12796:5591":{"crate_id":2,"path":["core","str","converts","from_utf8"],"kind":"function"},"16:3297:6287":{"crate_id":16,"path":["gimli","common","DebugTypeSignature"],"kind":"struct"},"24:6058:3189":{"crate_id":24,"path":["syn","lit","LitInt"],"kind":"struct"},"2:46171:198":{"crate_id":2,"path":["core","ops","range","RangeFull"],"kind":"struct"},"16:7782:6065":{"crate_id":16,"path":["gimli","read","unit","DebugTypesUnitHeadersIter"],"kind":"struct"},"1:11960:3261":{"crate_id":1,"path":["std","sync","mpsc","IntoIter"],"kind":"struct"},"2:3587:117":{"crate_id":2,"path":["core","ops","deref","Deref"],"kind":"trait"},"2:46858:13599":{"crate_id":2,"path":["core","ffi","VaList"],"kind":"struct"},"17:12770:7244":{"crate_id":17,"path":["object","macho","ScatteredRelocationInfo"],"kind":"struct"},"2:56664:241":{"crate_id":2,"path":["core","core_simd","fmt","fmt","Wrapper"],"kind":"struct"},"2:32988:4296":{"crate_id":2,"path":["core","mem","transmutability","Assume"],"kind":"struct"},"22:877:2484":{"crate_id":22,"path":["proc_macro2","fallback","Literal"],"kind":"struct"},"6:4198:8362":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Sym"],"kind":"struct"},"1:12558:129":{"crate_id":1,"path":["std","sys","unix","fs","File"],"kind":"struct"},"24:3887:3424":{"crate_id":24,"path":["syn","token","Mut"],"kind":"struct"},"12:895:5867":{"crate_id":12,"path":["hashbrown","map","ConsumeAllOnDrop"],"kind":"struct"},"6:6027:8733":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stack_t"],"kind":"struct"},"17:13763:7577":{"crate_id":17,"path":["object","pe","ImageAlpha64RuntimeFunctionEntry"],"kind":"struct"},"2:24461:40133":{"crate_id":2,"path":["core","num","flt2dec","Sign"],"kind":"enum"},"2:48582:3355":{"crate_id":2,"path":["core","fmt","num","LowerHex"],"kind":"struct"},"6:513:1766":{"crate_id":6,"path":["libc","unix","group"],"kind":"struct"},"16:6141:6104":{"crate_id":16,"path":["gimli","read","aranges","ArangeEntry"],"kind":"struct"},"17:607:47966":{"crate_id":17,"path":["object","read","any","Comdat"],"kind":"struct"},"9:603:9356":{"crate_id":9,"path":["miniz_oxide","inflate","stream","InflateState"],"kind":"struct"},"5:5166:664":{"crate_id":5,"path":["alloc","fmt"],"kind":"module"},"14:47:9551":{"crate_id":14,"path":["rustc_demangle","v0","Demangle"],"kind":"struct"},"22:0:1629":{"crate_id":22,"path":["proc_macro2"],"kind":"module"},"6:5186:8517":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","aiocb"],"kind":"struct"},"16:3221:6232":{"crate_id":16,"path":["gimli","common","DebugStrOffsetsBase"],"kind":"struct"},"2:49644:5295":{"crate_id":2,"path":["core","slice","iter","ArrayChunks"],"kind":"struct"},"22:999:1840":{"crate_id":22,"path":["proc_macro2","Span"],"kind":"struct"},"5:8549:4582":{"crate_id":5,"path":["alloc","vec","drain_filter","DrainFilter"],"kind":"struct"},"2:47907:3698":{"crate_id":2,"path":["core","panic","panic_info","PanicInfo"],"kind":"struct"},"1:13245:4995":{"crate_id":1,"path":["std","sys","unix","net","Socket"],"kind":"struct"},"2:2286:4510":{"crate_id":2,"path":["core","ptr","metadata","DynMetadata"],"kind":"struct"},"6:1733:4994":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_un"],"kind":"struct"},"1:10527:4853":{"crate_id":1,"path":["std","collections","hash","map","DefaultHasher"],"kind":"struct"},"5:1729:4842":{"crate_id":5,"path":["alloc","collections","btree","map","IntoKeys"],"kind":"struct"},"5:981:96":{"crate_id":5,"path":["alloc","collections","binary_heap","BinaryHeap"],"kind":"struct"},"24:6325:3199":{"crate_id":24,"path":["syn","ty","TypeImplTrait"],"kind":"struct"},"1:15890:3005":{"crate_id":1,"path":["std","tuple"],"kind":"primitive"},"2:24388:5342":{"crate_id":2,"path":["core","num","dec2flt","ParseFloatError"],"kind":"struct"},"17:10516:9192":{"crate_id":17,"path":["object","read","elf","version","VernauxIterator"],"kind":"struct"},"16:3199:6231":{"crate_id":16,"path":["gimli","common","DebugStrOffset"],"kind":"struct"},"5:7477:3261":{"crate_id":5,"path":["alloc","vec","into_iter","IntoIter"],"kind":"struct"},"22:1024:3278":{"crate_id":22,"path":["proc_macro2","Delimiter"],"kind":"enum"},"12:2392:1765":{"crate_id":12,"path":["hashbrown","raw","sse2","Group"],"kind":"struct"},"6:3966:8266":{"crate_id":6,"path":["libc","unix","linux_like","linux","fsid_t"],"kind":"struct"},"6:6114:8763":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","pthread_attr_t"],"kind":"struct"},"2:48871:128":{"crate_id":2,"path":["core","fmt","Error"],"kind":"struct"},"17:10127:6355":{"crate_id":17,"path":["object","read","coff","symbol","SymbolTable"],"kind":"struct"},"17:10240:6303":{"crate_id":17,"path":["object","read","elf","segment","ElfSegmentIterator"],"kind":"struct"},"16:2813:6242":{"crate_id":16,"path":["gimli","common","DebugAbbrevOffset"],"kind":"struct"},"17:9636:47975":{"crate_id":17,"path":["object","read","any","SegmentIterator"],"kind":"struct"},"21:478:4626":{"crate_id":21,"path":["proc_macro","bridge","rpc","PanicMessage"],"kind":"enum"},"1:2481:4937":{"crate_id":1,"path":["std","error","Report"],"kind":"struct"},"12:971:4847":{"crate_id":12,"path":["hashbrown","map","RawVacantEntryMut"],"kind":"struct"},"16:4467:7660":{"crate_id":16,"path":["gimli","constants","DwVis"],"kind":"struct"},"1:3405:4708":{"crate_id":1,"path":["std","io","buffered","bufwriter","WriterPanicked"],"kind":"struct"},"24:2383:3262":{"crate_id":24,"path":["syn","punctuated","Iter"],"kind":"struct"},"17:12143:6916":{"crate_id":17,"path":["object","macho","Dylib"],"kind":"struct"},"24:2878:1845":{"crate_id":24,"path":["syn","parse"],"kind":"module"},"1:5746:5058":{"crate_id":1,"path":["std","os","unix","net","ancillary","AncillaryData"],"kind":"enum"},"21:2927:1841":{"crate_id":21,"path":["proc_macro","TokenTree"],"kind":"enum"},"6:4346:8403":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_vm"],"kind":"struct"},"16:5374:5949":{"crate_id":16,"path":["gimli","read","cfi","EhFrame"],"kind":"struct"},"22:941:1765":{"crate_id":22,"path":["proc_macro2","imp","Group"],"kind":"enum"},"2:49775:2749":{"crate_id":2,"path":["core","str","iter","Bytes"],"kind":"struct"},"16:4316:7655":{"crate_id":16,"path":["gimli","constants","DwAte"],"kind":"struct"},"2:3471:5125":{"crate_id":2,"path":["core","ops","arith","MulAssign"],"kind":"trait"},"24:2556:2017":{"crate_id":24,"path":["syn","parse_quote"],"kind":"macro"},"16:3029:6228":{"crate_id":16,"path":["gimli","common","DebugLocListsIndex"],"kind":"struct"},"5:4709:6651":{"crate_id":5,"path":["alloc","collections","vec_deque","drop","Dropper"],"kind":"struct"},"24:5798:3162":{"crate_id":24,"path":["syn","expr","ExprMatch"],"kind":"struct"},"24:3089:3313":{"crate_id":24,"path":["syn","parse","Parser"],"kind":"trait"},"2:46916:5296":{"crate_id":2,"path":["core","iter","adapters","cloned","Cloned"],"kind":"struct"},"24:2870:6440":{"crate_id":24,"path":["syn","lookahead","TokenMarker"],"kind":"enum"},"6:161:40782":{"crate_id":6,"path":["libc","unix","fpos_t"],"kind":"enum"},"24:3212:128":{"crate_id":24,"path":["syn","error","Error"],"kind":"struct"},"17:12360:7169":{"crate_id":17,"path":["object","macho","DylibModule32"],"kind":"struct"},"2:46848:6666":{"crate_id":2,"path":["core","ffi","VaListImpl"],"kind":"struct"},"24:4935:3455":{"crate_id":24,"path":["syn","token","DotDotEq"],"kind":"struct"},"17:9033:47970":{"crate_id":17,"path":["object","common","SymbolKind"],"kind":"enum"},"6:6080:8756":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statfs64"],"kind":"struct"},"2:2862:98":{"crate_id":2,"path":["core","borrow","BorrowMut"],"kind":"trait"},"2:3614:131":{"crate_id":2,"path":["core","ops","function","Fn"],"kind":"trait"},"17:9259:6894":{"crate_id":17,"path":["object","endian","LittleEndian"],"kind":"struct"},"17:10503:6357":{"crate_id":17,"path":["object","read","elf","version","VerneedIterator"],"kind":"struct"},"2:50011:5480":{"crate_id":2,"path":["core","str","iter","RMatches"],"kind":"struct"},"1:15038:4826":{"crate_id":1,"path":["std","sys_common","wtf8","Wtf8Buf"],"kind":"struct"},"2:13357:5143":{"crate_id":2,"path":["core","str","pattern","ReverseSearcher"],"kind":"trait"},"22:841:3370":{"crate_id":22,"path":["proc_macro2","fallback","LineColumn"],"kind":"struct"},"16:6504:6114":{"crate_id":16,"path":["gimli","read","loclists","DebugLocLists"],"kind":"struct"},"16:4599:7663":{"crate_id":16,"path":["gimli","constants","DwAddr"],"kind":"struct"},"2:3506:3474":{"crate_id":2,"path":["core","ops","bit","Shl"],"kind":"trait"},"17:12557:7201":{"crate_id":17,"path":["object","macho","BuildVersionCommand"],"kind":"struct"},"2:52167:9002":{"crate_id":2,"path":["core","core_arch","simd","m16x8"],"kind":"struct"},"2:53695:9053":{"crate_id":2,"path":["core","core_arch","x86","__m128d"],"kind":"struct"},"5:4694:240":{"crate_id":5,"path":["alloc","collections","vec_deque","VecDeque"],"kind":"struct"},"2:8717:121":{"crate_id":2,"path":["core","iter","traits","double_ended","DoubleEndedIterator"],"kind":"trait"},"6:5582:8697":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","semid_ds"],"kind":"struct"},"2:50363:5156":{"crate_id":2,"path":["core","str","pattern","StrSearcherImpl"],"kind":"enum"},"2:49789:4706":{"crate_id":2,"path":["core","str","iter","Split"],"kind":"struct"},"5:8279:196":{"crate_id":5,"path":["alloc","collections","btree","set","Range"],"kind":"struct"},"1:10963:4703":{"crate_id":1,"path":["std","io","Chain"],"kind":"struct"},"16:6173:6105":{"crate_id":16,"path":["gimli","read","line","LineRows"],"kind":"struct"},"2:8632:5216":{"crate_id":2,"path":["core","iter","traits","accum","Sum"],"kind":"trait"},"17:11603:7014":{"crate_id":17,"path":["object","elf","Rel32"],"kind":"struct"},"17:13573:7508":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation32V2"],"kind":"struct"},"16:3366:6240":{"crate_id":16,"path":["gimli","common","UnitSectionOffset"],"kind":"enum"},"20:44:4677":{"crate_id":20,"path":["quote","ext","private","Sealed"],"kind":"trait"},"17:10622:6909":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandIterator"],"kind":"struct"},"1:7093:57712":{"crate_id":1,"path":["std","path","fmt","DebugHelper"],"kind":"struct"},"17:13953:7624":{"crate_id":17,"path":["object","pe","ImageArchitectureEntry"],"kind":"struct"},"17:13755:7576":{"crate_id":17,"path":["object","pe","ImageArm64RuntimeFunctionEntry"],"kind":"struct"},"1:15901:3014":{"crate_id":1,"path":["std","u16"],"kind":"primitive"},"17:11085:6375":{"crate_id":17,"path":["object","read","SymbolIndex"],"kind":"struct"},"6:4434:8445":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlmsgerr"],"kind":"struct"},"6:1764:8198":{"crate_id":6,"path":["libc","unix","linux_like","sigevent"],"kind":"struct"},"16:2937:6248":{"crate_id":16,"path":["gimli","common","DebugLineOffset"],"kind":"struct"},"1:11071:4765":{"crate_id":1,"path":["std","net","ip","Ipv4Addr"],"kind":"struct"},"16:3770:7651":{"crate_id":16,"path":["gimli","constants","DwChildren"],"kind":"struct"},"2:8127:5332":{"crate_id":2,"path":["core","iter","adapters","GenericShunt"],"kind":"struct"},"1:2422:13087":{"crate_id":1,"path":["std","env","ArgsOs"],"kind":"struct"},"5:8314:3261":{"crate_id":5,"path":["alloc","collections","vec_deque","into_iter","IntoIter"],"kind":"struct"},"5:8389:102":{"crate_id":5,"path":["alloc","ffi","c_str","CString"],"kind":"struct"},"1:15053:4827":{"crate_id":1,"path":["std","sys_common","wtf8","Wtf8"],"kind":"struct"},"16:6075:6057":{"crate_id":16,"path":["gimli","read","aranges","DebugAranges"],"kind":"struct"},"22:865:1765":{"crate_id":22,"path":["proc_macro2","fallback","Group"],"kind":"struct"},"16:7238:6076":{"crate_id":16,"path":["gimli","read","rnglists","RngListIter"],"kind":"struct"},"1:2141:4813":{"crate_id":1,"path":["std","collections","hash","set","Difference"],"kind":"struct"},"6:4373:8420":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_tp"],"kind":"struct"},"21:0:1044":{"crate_id":21,"path":["proc_macro"],"kind":"module"},"6:6097:8758":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statvfs64"],"kind":"struct"},"2:49578:5452":{"crate_id":2,"path":["core","slice","iter","Chunks"],"kind":"struct"},"17:10291:6343":{"crate_id":17,"path":["object","read","elf","section","ElfSectionIterator"],"kind":"struct"},"0:0:1654":{"crate_id":0,"path":["serde_derive"],"kind":"module"},"16:4775:7669":{"crate_id":16,"path":["gimli","constants","DwIdx"],"kind":"struct"},"1:15902:3015":{"crate_id":1,"path":["std","u32"],"kind":"primitive"},"17:10558:48180":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCacheImage"],"kind":"struct"},"6:6214:8823":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ipc_perm"],"kind":"struct"},"24:4831:3448":{"crate_id":24,"path":["syn","token","Comma"],"kind":"struct"},"24:3599:3412":{"crate_id":24,"path":["syn","token","Dyn"],"kind":"struct"},"1:11507:4910":{"crate_id":1,"path":["std","path","Ancestors"],"kind":"struct"},"24:4894:3452":{"crate_id":24,"path":["syn","token","Dot"],"kind":"struct"},"1:8732:5028":{"crate_id":1,"path":["std","sync","once","WaiterQueue"],"kind":"struct"},"21:1196:4646":{"crate_id":21,"path":["proc_macro","bridge","client","FreeFunctions"],"kind":"struct"},"17:11102:47984":{"crate_id":17,"path":["object","read","SymbolSection"],"kind":"enum"},"17:13147:7399":{"crate_id":17,"path":["object","pe","ImageRomHeaders"],"kind":"struct"},"1:9434:6691":{"crate_id":1,"path":["std","sys_common","mutex","StaticMutexGuard"],"kind":"struct"},"5:4509:3262":{"crate_id":5,"path":["alloc","collections","vec_deque","iter","Iter"],"kind":"struct"},"6:1537:8065":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreqn"],"kind":"struct"},"18:766:6823":{"crate_id":18,"path":["memchr","memmem","twoway","ApproximateByteSet"],"kind":"struct"},"2:24506:9250":{"crate_id":2,"path":["core","num","fmt","Formatted"],"kind":"struct"},"6:6229:8828":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","shmid_ds"],"kind":"struct"},"17:9796:63887":{"crate_id":17,"path":["object","read","any","ComdatSectionIteratorInternal"],"kind":"enum"},"2:48278:83":{"crate_id":2,"path":["core","sync","atomic","AtomicI64"],"kind":"struct"},"6:4075:8317":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_constant_effect"],"kind":"struct"},"2:53223:5238":{"crate_id":2,"path":["core","core_arch","simd","i16x32"],"kind":"struct"},"5:1533:4850":{"crate_id":5,"path":["alloc","collections","btree","map","entry","OccupiedEntry"],"kind":"struct"},"1:15377:5905":{"crate_id":1,"path":["std","backtrace_rs","backtrace","Frame"],"kind":"struct"},"6:6034:8737":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stat"],"kind":"struct"},"5:4581:5695":{"crate_id":5,"path":["alloc","collections","vec_deque","pair_slices","PairSlices"],"kind":"struct"},"6:571:8021":{"crate_id":6,"path":["libc","unix","hostent"],"kind":"struct"},"2:50727:5504":{"crate_id":2,"path":["core","task","wake","RawWaker"],"kind":"struct"},"24:5866:1799":{"crate_id":24,"path":["syn","expr","Member"],"kind":"enum"},"17:11689:7031":{"crate_id":17,"path":["object","elf","Dyn32"],"kind":"struct"},"2:11196:4677":{"crate_id":2,"path":["core","slice","index","private_slice_index","Sealed"],"kind":"trait"},"7:85:45649":{"crate_id":7,"path":["unwind","libunwind","_Unwind_Action"],"kind":"enum"},"13:0:2968":{"crate_id":13,"path":["std_detect"],"kind":"module"},"21:1627:1856":{"crate_id":21,"path":["proc_macro","bridge","symbol","Symbol"],"kind":"struct"},"5:8257:62432":{"crate_id":5,"path":["alloc","collections","btree","merge_iter","Peeked"],"kind":"enum"},"1:9394:6690":{"crate_id":1,"path":["std","sys_common","lazy_box","LazyBox"],"kind":"struct"},"17:12093:7114":{"crate_id":17,"path":["object","macho","Section64"],"kind":"struct"},"16:3743:7650":{"crate_id":16,"path":["gimli","constants","DwCfa"],"kind":"struct"},"17:12442:7184":{"crate_id":17,"path":["object","macho","PrebindCksumCommand"],"kind":"struct"},"5:1152:6646":{"crate_id":5,"path":["alloc","collections","binary_heap","drop","DropGuard"],"kind":"struct"},"2:4489:3261":{"crate_id":2,"path":["core","array","iter","IntoIter"],"kind":"struct"},"2:24400:5343":{"crate_id":2,"path":["core","num","dec2flt","FloatErrorKind"],"kind":"enum"},"24:5444:1790":{"crate_id":24,"path":["syn","data","Variant"],"kind":"struct"},"2:50532:5492":{"crate_id":2,"path":["core","str","BytesIsNotEmpty"],"kind":"struct"},"1:15253:4988":{"crate_id":1,"path":["std","sys_common","net","UdpSocket"],"kind":"struct"},"5:1072:3262":{"crate_id":5,"path":["alloc","collections","binary_heap","Iter"],"kind":"struct"},"1:4258:4721":{"crate_id":1,"path":["std","io","stdio","StderrLock"],"kind":"struct"},"6:157:40781":{"crate_id":6,"path":["libc","unix","FILE"],"kind":"enum"},"24:5326:2477":{"crate_id":24,"path":["syn","token","Brace"],"kind":"struct"},"2:52120:9001":{"crate_id":2,"path":["core","core_arch","simd","m8x16"],"kind":"struct"},"2:52875:5250":{"crate_id":2,"path":["core","core_arch","simd","i8x64"],"kind":"struct"},"2:49130:147":{"crate_id":2,"path":["core","hash","sip","Hasher"],"kind":"struct"},"10:0:2972":{"crate_id":10,"path":["rustc_std_workspace_alloc"],"kind":"module"},"12:933:4844":{"crate_id":12,"path":["hashbrown","map","RawEntryBuilderMut"],"kind":"struct"},"1:7739:57745":{"crate_id":1,"path":["std","sync","mpsc","blocking","WaitToken"],"kind":"struct"},"2:48068:91":{"crate_id":2,"path":["core","sync","atomic","AtomicU8"],"kind":"struct"},"5:5488:4688":{"crate_id":5,"path":["alloc","rc","from_iter_exact","Guard"],"kind":"struct"},"12:2059:4813":{"crate_id":12,"path":["hashbrown","set","Difference"],"kind":"struct"},"1:15232:4981":{"crate_id":1,"path":["std","sys_common","net","TcpListener"],"kind":"struct"},"12:952:4846":{"crate_id":12,"path":["hashbrown","map","RawOccupiedEntryMut"],"kind":"struct"},"2:48404:92":{"crate_id":2,"path":["core","sync","atomic","AtomicUsize"],"kind":"struct"},"5:4765:6651":{"crate_id":5,"path":["alloc","collections","vec_deque","truncate","Dropper"],"kind":"struct"},"24:6412:2153":{"crate_id":24,"path":["syn","path","Binding"],"kind":"struct"},"6:4287:8375":{"crate_id":6,"path":["libc","unix","linux_like","linux","posix_spawn_file_actions_t"],"kind":"struct"},"6:1626:8117":{"crate_id":6,"path":["libc","unix","linux_like","Dl_info"],"kind":"struct"},"2:57973:9071":{"crate_id":2,"path":["core","core_simd","vector","ptr","SimdMutPtr"],"kind":"struct"},"1:11998:4803":{"crate_id":1,"path":["std","sync","mpsc","TryRecvError"],"kind":"enum"},"5:1547:4852":{"crate_id":5,"path":["alloc","collections","btree","map","entry","OccupiedError"],"kind":"struct"},"17:12607:7218":{"crate_id":17,"path":["object","macho","LinkerOptionCommand"],"kind":"struct"},"2:11205:218":{"crate_id":2,"path":["core","slice","index","SliceIndex"],"kind":"trait"},"1:14912:9142":{"crate_id":1,"path":["std","sys","unix","time","Timespec"],"kind":"struct"},"2:3168:74":{"crate_id":2,"path":["core","convert","AsMut"],"kind":"trait"},"16:6468:6112":{"crate_id":16,"path":["gimli","read","line","FileEntryFormat"],"kind":"struct"},"17:9786:47978":{"crate_id":17,"path":["object","read","any","ComdatSectionIterator"],"kind":"struct"},"17:11797:7063":{"crate_id":17,"path":["object","elf","NoteHeader64"],"kind":"struct"},"16:7369:6059":{"crate_id":16,"path":["gimli","read","unit","DebugInfoUnitHeadersIter"],"kind":"struct"},"16:7063:6122":{"crate_id":16,"path":["gimli","read","op","Evaluation"],"kind":"struct"},"2:14540:4471":{"crate_id":2,"path":["core","alloc","Allocator"],"kind":"trait"},"6:580:8027":{"crate_id":6,"path":["libc","unix","iovec"],"kind":"struct"},"5:1701:4839":{"crate_id":5,"path":["alloc","collections","btree","map","Keys"],"kind":"struct"},"24:4911:3453":{"crate_id":24,"path":["syn","token","Dot2"],"kind":"struct"},"6:4028:8295":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_absinfo"],"kind":"struct"},"2:49105:4856":{"crate_id":2,"path":["core","hash","sip","SipHasher13"],"kind":"struct"},"24:5399:3130":{"crate_id":24,"path":["syn","attr","AttrStyle"],"kind":"enum"},"24:6359:3194":{"crate_id":24,"path":["syn","ty","Abi"],"kind":"struct"},"2:47992:3261":{"crate_id":2,"path":["core","result","IntoIter"],"kind":"struct"},"16:5941:6099":{"crate_id":16,"path":["gimli","read","dwarf","RangeIter"],"kind":"struct"},"5:8361:3297":{"crate_id":5,"path":["alloc","collections","TryReserveError"],"kind":"struct"},"2:52023:5225":{"crate_id":2,"path":["core","core_arch","simd","f32x4"],"kind":"struct"},"24:5830:3169":{"crate_id":24,"path":["syn","expr","ExprStruct"],"kind":"struct"},"6:1576:8084":{"crate_id":6,"path":["libc","unix","linux_like","addrinfo"],"kind":"struct"},"1:11196:4983":{"crate_id":1,"path":["std","net","tcp","IntoIncoming"],"kind":"struct"},"24:5409:1849":{"crate_id":24,"path":["syn","attr","Meta","List"],"kind":"foreign_type"},"14:56:1776":{"crate_id":14,"path":["rustc_demangle","v0","Ident"],"kind":"struct"},"17:10304:6346":{"crate_id":17,"path":["object","read","elf","section","ElfSection"],"kind":"struct"},"17:10340:6382":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbolTable"],"kind":"struct"},"24:5778:3157":{"crate_id":24,"path":["syn","expr","ExprIndex"],"kind":"struct"},"2:50561:4930":{"crate_id":2,"path":["core","time","FromFloatSecsError"],"kind":"struct"},"1:11854:4870":{"crate_id":1,"path":["std","process","ExitStatus"],"kind":"struct"},"1:10942:4700":{"crate_id":1,"path":["std","io","SeekFrom"],"kind":"enum"},"6:1721:8183":{"crate_id":6,"path":["libc","unix","linux_like","mmsghdr"],"kind":"struct"},"17:12130:7119":{"crate_id":17,"path":["object","macho","FvmlibCommand"],"kind":"struct"},"17:11937:7084":{"crate_id":17,"path":["object","macho","FatHeader"],"kind":"struct"},"24:5145:3469":{"crate_id":24,"path":["syn","token","LArrow"],"kind":"struct"},"1:6649:4669":{"crate_id":1,"path":["std","os","fd","raw","IntoRawFd"],"kind":"trait"},"1:1991:146":{"crate_id":1,"path":["std","collections","hash","set","HashSet"],"kind":"struct"},"2:51801:5256":{"crate_id":2,"path":["core","core_arch","simd","u16x8"],"kind":"struct"},"6:4379:8423":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_j1939"],"kind":"struct"},"24:932:64108":{"crate_id":24,"path":["syn","generics","Lifetimes"],"kind":"struct"},"1:13761:57738":{"crate_id":1,"path":["std","sys","unix","process","process_common","Argv"],"kind":"struct"},"2:47925:190":{"crate_id":2,"path":["core","pin","Pin"],"kind":"struct"},"1:3755:4885":{"crate_id":1,"path":["std","io","error","repr_bitpacked","Repr"],"kind":"struct"},"1:2651:182":{"crate_id":1,"path":["std","ffi","os_str","OsString"],"kind":"struct"},"6:4402:8431":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_filter"],"kind":"struct"},"17:11907:7075":{"crate_id":17,"path":["object","macho","DyldCacheMappingInfo"],"kind":"struct"},"20:47:2834":{"crate_id":20,"path":["quote","format_ident"],"kind":"macro"},"17:12157:7123":{"crate_id":17,"path":["object","macho","DylibCommand"],"kind":"struct"},"6:601:8038":{"crate_id":6,"path":["libc","unix","linger"],"kind":"struct"},"1:5575:4751":{"crate_id":1,"path":["std","os","unix","fs","DirBuilderExt"],"kind":"trait"},"1:15071:4834":{"crate_id":1,"path":["std","sys_common","wtf8","EncodeWide"],"kind":"struct"},"16:7792:6093":{"crate_id":16,"path":["gimli","read","value","ValueType"],"kind":"enum"},"16:7100:6125":{"crate_id":16,"path":["gimli","read","pubnames","PubNamesEntryIter"],"kind":"struct"},"6:6914:8866":{"crate_id":6,"path":["libc","unix","linux_like","linux","fanotify_event_metadata"],"kind":"struct"},"17:10082:6391":{"crate_id":17,"path":["object","read","coff","section","CoffSegmentIterator"],"kind":"struct"},"17:13094:7393":{"crate_id":17,"path":["object","pe","ImageOptionalHeader64"],"kind":"struct"},"17:12746:7234":{"crate_id":17,"path":["object","macho","Relocation"],"kind":"struct"},"24:5794:3161":{"crate_id":24,"path":["syn","expr","ExprMacro"],"kind":"struct"},"1:14142:4214":{"crate_id":1,"path":["std","sys","unix","thread","Thread"],"kind":"struct"},"6:6954:8877":{"crate_id":6,"path":["libc","unix","linux_like","linux","canfd_frame"],"kind":"struct"},"22:799:3318":{"crate_id":22,"path":["proc_macro2","parse","Cursor"],"kind":"struct"},"1:11518:4911":{"crate_id":1,"path":["std","path","StripPrefixError"],"kind":"struct"},"16:7184:6273":{"crate_id":16,"path":["gimli","read","rnglists","RangeListsFormat"],"kind":"enum"},"5:1296:5707":{"crate_id":5,"path":["alloc","collections","btree","dedup_sorted_iter","DedupSortedIter"],"kind":"struct"},"6:5478:8658":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_data"],"kind":"union"},"1:14470:60809":{"crate_id":1,"path":["std","sys","unix","kernel_copy","SpliceMode"],"kind":"enum"},"2:5214:3334":{"crate_id":2,"path":["core","cell","BorrowRef"],"kind":"struct"},"17:11640:7020":{"crate_id":17,"path":["object","elf","Rela64"],"kind":"struct"},"17:11314:6348":{"crate_id":17,"path":["object","read","CompressionFormat"],"kind":"enum"},"6:5547:8672":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","sysinfo"],"kind":"struct"},"17:10899:48249":{"crate_id":17,"path":["object","read","pe","file","PeFile"],"kind":"struct"},"16:7110:6126":{"crate_id":16,"path":["gimli","read","pubtypes","PubTypesEntry"],"kind":"struct"},"21:2524:2168":{"crate_id":21,"path":["proc_macro","bridge","Punct"],"kind":"struct"},"5:3402:4813":{"crate_id":5,"path":["alloc","collections","btree","set","Difference"],"kind":"struct"},"17:12512:7194":{"crate_id":17,"path":["object","macho","EncryptionInfoCommand32"],"kind":"struct"},"6:5149:8491":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","statx"],"kind":"struct"},"2:49893:5447":{"crate_id":2,"path":["core","str","iter","SplitN"],"kind":"struct"},"12:2036:3261":{"crate_id":12,"path":["hashbrown","set","IntoIter"],"kind":"struct"},"2:24072:5100":{"crate_id":2,"path":["core","core_simd","vector","SimdElement"],"kind":"trait"},"2:48893:71":{"crate_id":2,"path":["core","fmt","ArgumentV1"],"kind":"struct"},"24:948:64104":{"crate_id":24,"path":["syn","generics","ConstParams"],"kind":"struct"},"1:10914:4729":{"crate_id":1,"path":["std","io","util","Empty"],"kind":"struct"},"2:8682:3386":{"crate_id":2,"path":["core","iter","traits","collect","Extend"],"kind":"trait"},"18:169:54297":{"crate_id":18,"path":["memchr","memchr","iter","Memchr3"],"kind":"struct"},"1:12106:4926":{"crate_id":1,"path":["std","time","SystemTime"],"kind":"struct"},"17:2543:6351":{"crate_id":17,"path":["object","read","elf","relocation","ElfSectionRelocationIterator"],"kind":"struct"},"1:11177:5047":{"crate_id":1,"path":["std","net","parser","AddrParseError"],"kind":"struct"},"1:2123:3261":{"crate_id":1,"path":["std","collections","hash","set","IntoIter"],"kind":"struct"},"1:12087:4810":{"crate_id":1,"path":["std","time","Instant"],"kind":"struct"},"17:13377:7456":{"crate_id":17,"path":["object","pe","ImageArchiveMemberHeader"],"kind":"struct"},"6:4230:8365":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Phdr"],"kind":"struct"},"6:5366:8617":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ntptimeval"],"kind":"struct"},"14:216:46321":{"crate_id":14,"path":["rustc_demangle","SizeLimitedFmtAdapter"],"kind":"struct"},"1:4829:4894":{"crate_id":1,"path":["std","net","ip","display_buffer","IpDisplayBuffer"],"kind":"struct"},"6:4179:8361":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Ehdr"],"kind":"struct"},"2:2263:4511":{"crate_id":2,"path":["core","ptr","metadata","Pointee"],"kind":"trait"},"2:39148:5109":{"crate_id":2,"path":["core","error","Source"],"kind":"struct"},"2:24788:175":{"crate_id":2,"path":["core","num","nonzero","NonZeroU8"],"kind":"struct"},"24:968:2833":{"crate_id":24,"path":["syn","generics","TypeGenerics"],"kind":"struct"},"17:13817:7597":{"crate_id":17,"path":["object","pe","ImageEnclaveConfig64"],"kind":"struct"},"1:7602:4874":{"crate_id":1,"path":["std","process","Termination"],"kind":"trait"},"2:51671:8993":{"crate_id":2,"path":["core","core_arch","simd","i64x1"],"kind":"struct"},"2:10811:147":{"crate_id":2,"path":["core","hash","Hasher"],"kind":"trait"},"17:10925:48259":{"crate_id":17,"path":["object","read","pe","file","PeComdat"],"kind":"struct"},"17:11181:6959":{"crate_id":17,"path":["object","read","ObjectMapEntry"],"kind":"struct"},"2:52425:5261":{"crate_id":2,"path":["core","core_arch","simd","u32x8"],"kind":"struct"},"24:2391:3264":{"crate_id":24,"path":["syn","punctuated","PrivateIter"],"kind":"struct"},"6:6931:8871":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_mutex_t"],"kind":"struct"},"6:6665:8850":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","align","max_align_t"],"kind":"struct"},"2:46615:5366":{"crate_id":2,"path":["core","char","convert","CharErrorKind"],"kind":"enum"},"1:610:1404":{"crate_id":1,"path":["std","thread"],"kind":"module"},"2:50081:5484":{"crate_id":2,"path":["core","str","iter","EncodeUtf16"],"kind":"struct"},"12:2066:4814":{"crate_id":12,"path":["hashbrown","set","SymmetricDifference"],"kind":"struct"},"17:12318:7148":{"crate_id":17,"path":["object","macho","DysymtabCommand"],"kind":"struct"},"1:14795:6702":{"crate_id":1,"path":["std","sys","unix","process","process_inner","posix_spawn","PosixSpawnFileActions"],"kind":"struct"},"24:3635:1789":{"crate_id":24,"path":["syn","token","Enum"],"kind":"struct"},"16:7826:2556":{"crate_id":16,"path":["gimli","read","value","Value"],"kind":"enum"},"24:1271:6454":{"crate_id":24,"path":["syn","lit","LitRepr"],"kind":"struct"},"5:2328:5709":{"crate_id":5,"path":["alloc","collections","btree","navigate","LeafRange"],"kind":"struct"},"3:321:207":{"crate_id":3,"path":["compiler_builtins","float","cmp","Result"],"kind":"enum"},"16:4871:7672":{"crate_id":16,"path":["gimli","constants","DwLne"],"kind":"struct"},"24:5748:3150":{"crate_id":24,"path":["syn","expr","ExprCast"],"kind":"struct"},"2:24854:173":{"crate_id":2,"path":["core","num","nonzero","NonZeroU32"],"kind":"struct"},"6:4110:8335":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_rumble_effect"],"kind":"struct"},"24:2195:1770":{"crate_id":24,"path":["syn","punctuated","Punctuated"],"kind":"struct"},"2:2884:105":{"crate_id":2,"path":["core","clone","Clone"],"kind":"trait"},"6:6250:8840":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user_fpregs_struct"],"kind":"struct"},"2:11554:5443":{"crate_id":2,"path":["core","slice","iter","SplitInclusiveMut"],"kind":"struct"},"2:46631:5368":{"crate_id":2,"path":["core","char","convert","CharTryFromError"],"kind":"struct"},"5:0:283":{"crate_id":5,"path":["alloc"],"kind":"module"},"2:48026:84":{"crate_id":2,"path":["core","sync","atomic","AtomicI8"],"kind":"struct"},"2:46728:5613":{"crate_id":2,"path":["core","char","ToUppercase"],"kind":"struct"},"2:50043:4707":{"crate_id":2,"path":["core","str","iter","Lines"],"kind":"struct"},"5:69:4473":{"crate_id":5,"path":["alloc","raw_vec","RawVec"],"kind":"struct"},"24:5842:3172":{"crate_id":24,"path":["syn","expr","ExprTuple"],"kind":"struct"},"2:51530:5255":{"crate_id":2,"path":["core","core_arch","simd","u16x4"],"kind":"struct"},"1:11449:4907":{"crate_id":1,"path":["std","path","Component"],"kind":"enum"},"2:53704:9054":{"crate_id":2,"path":["core","core_arch","x86","__m256i"],"kind":"struct"},"2:3530:5074":{"crate_id":2,"path":["core","ops","bit","ShlAssign"],"kind":"trait"},"24:5899:2206":{"crate_id":24,"path":["syn","generics","GenericParam"],"kind":"enum"},"2:3479:5129":{"crate_id":2,"path":["core","ops","arith","RemAssign"],"kind":"trait"},"9:686:5743":{"crate_id":9,"path":["miniz_oxide","deflate","core","SymFreq"],"kind":"struct"},"17:9466:6900":{"crate_id":17,"path":["object","endian","I64Bytes"],"kind":"struct"},"1:3371:4713":{"crate_id":1,"path":["std","io","buffered","bufwriter","BufWriter"],"kind":"struct"},"24:4265:3437":{"crate_id":24,"path":["syn","token","While"],"kind":"struct"},"1:1578:4849":{"crate_id":1,"path":["std","collections","hash","map","Entry"],"kind":"enum"},"2:47105:5316":{"crate_id":2,"path":["core","iter","adapters","take_while","TakeWhile"],"kind":"struct"},"2:50072:5483":{"crate_id":2,"path":["core","str","iter","SplitAsciiWhitespace"],"kind":"struct"},"16:6630:6260":{"crate_id":16,"path":["gimli","read","lookup","DebugLookup"],"kind":"struct"},"17:12196:7127":{"crate_id":17,"path":["object","macho","SubUmbrellaCommand"],"kind":"struct"},"16:7754:6134":{"crate_id":16,"path":["gimli","read","unit","EntriesTreeIter"],"kind":"struct"},"1:11894:57701":{"crate_id":1,"path":["std","sync","mpsc","shared","StartResult"],"kind":"enum"},"24:6313:3197":{"crate_id":24,"path":["syn","ty","TypeBareFn"],"kind":"struct"},"17:12957:7297":{"crate_id":17,"path":["object","pe","ImageVxdHeader"],"kind":"struct"},"1:15865:57497":{"crate_id":1,"path":["std","backtrace_rs","print","PrintFmt"],"kind":"enum"},"1:15908:3021":{"crate_id":1,"path":["std","fn"],"kind":"primitive"},"24:5722:3144":{"crate_id":24,"path":["syn","expr","ExprAwait"],"kind":"struct"},"12:379:5882":{"crate_id":12,"path":["hashbrown","raw","RawIter"],"kind":"struct"},"5:1740:4843":{"crate_id":5,"path":["alloc","collections","btree","map","IntoValues"],"kind":"struct"},"2:51446:5246":{"crate_id":2,"path":["core","core_arch","simd","i8x4"],"kind":"struct"},"5:6851:4688":{"crate_id":5,"path":["alloc","sync","from_iter_exact","Guard"],"kind":"struct"},"1:14647:57505":{"crate_id":1,"path":["std","sys","unix","process","process_common","ProgramKind"],"kind":"enum"},"24:5975:2123":{"crate_id":24,"path":["syn","generics","WhereClause"],"kind":"struct"},"24:5718:3143":{"crate_id":24,"path":["syn","expr","ExprAsync"],"kind":"struct"},"17:510:47965":{"crate_id":17,"path":["object","read","any","Segment"],"kind":"struct"},"17:10464:6352":{"crate_id":17,"path":["object","read","elf","hash","GnuHashTable"],"kind":"struct"},"2:24169:5516":{"crate_id":2,"path":["core","num","bignum","Big32x40"],"kind":"struct"},"16:7264:196":{"crate_id":16,"path":["gimli","read","rnglists","Range"],"kind":"struct"},"17:10015:48030":{"crate_id":17,"path":["object","read","archive","ArchiveFile"],"kind":"struct"},"2:51601:5247":{"crate_id":2,"path":["core","core_arch","simd","i8x8"],"kind":"struct"},"17:13345:7449":{"crate_id":17,"path":["object","pe","ImageAuxSymbolCrc"],"kind":"struct"},"6:6243:8837":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","seccomp_notif_sizes"],"kind":"struct"},"24:5005:3459":{"crate_id":24,"path":["syn","token","Le"],"kind":"struct"},"2:24348:9247":{"crate_id":2,"path":["core","num","dec2flt","decimal","Decimal"],"kind":"struct"},"22:817:9184":{"crate_id":22,"path":["proc_macro2","rcvec","RcVecIntoIter"],"kind":"struct"},"5:1276:5706":{"crate_id":5,"path":["alloc","collections","btree","borrow","DormantMutRef"],"kind":"struct"},"17:10801:6324":{"crate_id":17,"path":["object","read","macho","section","MachOSection"],"kind":"struct"},"16:4803:7670":{"crate_id":16,"path":["gimli","constants","DwDefaulted"],"kind":"struct"},"2:10566:110":{"crate_id":2,"path":["core","fmt","macros","Debug"],"kind":"proc_derive"},"16:5217:5987":{"crate_id":16,"path":["gimli","constants","DwEhPe"],"kind":"struct"},"2:50748:159":{"crate_id":2,"path":["core","alloc","layout","Layout"],"kind":"struct"},"2:4783:4688":{"crate_id":2,"path":["core","array","try_collect_into_array","Guard"],"kind":"struct"},"2:10523:135":{"crate_id":2,"path":["core","fmt","Formatter"],"kind":"struct"},"1:10973:4704":{"crate_id":1,"path":["std","io","Take"],"kind":"struct"},"5:8308:3261":{"crate_id":5,"path":["alloc","collections","linked_list","IntoIter"],"kind":"struct"},"1:4410:4696":{"crate_id":1,"path":["std","io","Read"],"kind":"trait"},"1:2152:1813":{"crate_id":1,"path":["std","collections","hash","set","Union"],"kind":"struct"},"2:51690:5224":{"crate_id":2,"path":["core","core_arch","simd","f32x2"],"kind":"struct"},"2:46768:101":{"crate_id":2,"path":["core","ffi","c_str","CStr"],"kind":"struct"},"2:3374:107":{"crate_id":2,"path":["core","marker","Copy"],"kind":"trait"},"24:4727:3441":{"crate_id":24,"path":["syn","token","AndEq"],"kind":"struct"},"5:7551:6646":{"crate_id":5,"path":["alloc","vec","into_iter","drop","DropGuard"],"kind":"struct"},"17:11256:6960":{"crate_id":17,"path":["object","read","CodeView"],"kind":"struct"},"1:15192:4980":{"crate_id":1,"path":["std","sys_common","net","TcpStream"],"kind":"struct"},"1:3058:4950":{"crate_id":1,"path":["std","fs","read_link"],"kind":"function"},"17:10223:6311":{"crate_id":17,"path":["object","read","elf","file","ElfFile"],"kind":"struct"},"18:678:143":{"crate_id":18,"path":["memchr","memmem","rabinkarp","Hash"],"kind":"struct"},"1:10438:4203":{"crate_id":1,"path":["std","thread","Builder"],"kind":"struct"},"2:3447:3449":{"crate_id":2,"path":["core","ops","arith","Div"],"kind":"trait"},"21:2942:1765":{"crate_id":21,"path":["proc_macro","Group"],"kind":"struct"},"5:7312:4584":{"crate_id":5,"path":["alloc","vec","drain","Drain"],"kind":"struct"},"1:9563:6693":{"crate_id":1,"path":["std","sys_common","rwlock","StaticRwLockWriteGuard"],"kind":"struct"},"18:739:63894":{"crate_id":18,"path":["memchr","memmem","twoway","Suffix"],"kind":"struct"},"1:8446:5006":{"crate_id":1,"path":["std","sync","barrier","Barrier"],"kind":"struct"},"2:3491:4817":{"crate_id":2,"path":["core","ops","bit","BitAnd"],"kind":"trait"},"5:1502:4849":{"crate_id":5,"path":["alloc","collections","btree","map","entry","Entry"],"kind":"enum"},"16:4198:7653":{"crate_id":16,"path":["gimli","constants","DwAt"],"kind":"struct"},"2:22900:61754":{"crate_id":2,"path":["core","core_simd","swizzle","deinterleave","Even"],"kind":"struct"},"16:547:5967":{"crate_id":16,"path":["gimli","read","cfi","RegisterRuleMap"],"kind":"struct"},"1:14379:4678":{"crate_id":1,"path":["std","sys","unix","fd","FileDesc"],"kind":"struct"},"16:3908:7652":{"crate_id":16,"path":["gimli","constants","DwTag"],"kind":"struct"},"18:611:6420":{"crate_id":18,"path":["memchr","cow","CowBytes"],"kind":"struct"},"2:51708:8994":{"crate_id":2,"path":["core","core_arch","simd","f64x1"],"kind":"struct"},"1:8715:4273":{"crate_id":1,"path":["std","sync","once","Once"],"kind":"struct"},"16:6089:6101":{"crate_id":16,"path":["gimli","read","aranges","ArangeHeaderIter"],"kind":"struct"},"2:49839:5472":{"crate_id":2,"path":["core","str","iter","SplitTerminator"],"kind":"struct"},"2:5321:3339":{"crate_id":2,"path":["core","cell","SyncUnsafeCell"],"kind":"struct"},"21:2988:1776":{"crate_id":21,"path":["proc_macro","Ident"],"kind":"struct"},"17:9561:6349":{"crate_id":17,"path":["object","read","util","StringTable"],"kind":"struct"},"17:9676:63885":{"crate_id":17,"path":["object","read","any","SegmentInternal"],"kind":"enum"},"6:5216:8534":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","glob64_t"],"kind":"struct"},"24:5354:2157":{"crate_id":24,"path":["syn","token","Paren"],"kind":"struct"},"1:14862:4870":{"crate_id":1,"path":["std","sys","unix","process","process_inner","ExitStatus"],"kind":"struct"},"2:9154:4462":{"crate_id":2,"path":["core","iter","traits","marker","FusedIterator"],"kind":"trait"},"2:56651:241":{"crate_id":2,"path":["core","core_simd","fmt","fmt","Wrapper"],"kind":"struct"},"5:1684:3261":{"crate_id":5,"path":["alloc","collections","btree","map","IntoIter"],"kind":"struct"},"16:5396:5950":{"crate_id":16,"path":["gimli","read","cfi","CieOffsetEncoding"],"kind":"enum"},"24:5432:1848":{"crate_id":24,"path":["syn","attr","NestedMeta","Meta"],"kind":"foreign_type"},"12:2032:3262":{"crate_id":12,"path":["hashbrown","set","Iter"],"kind":"struct"},"2:51999:5243":{"crate_id":2,"path":["core","core_arch","simd","i64x2"],"kind":"struct"},"1:10655:4944":{"crate_id":1,"path":["std","fs","FileTimes"],"kind":"struct"},"17:13549:7504":{"crate_id":17,"path":["object","pe","ImageDynamicRelocationTable"],"kind":"struct"},"20:117:1842":{"crate_id":20,"path":["quote","to_tokens","ToTokens"],"kind":"trait"},"2:46211:197":{"crate_id":2,"path":["core","ops","range","RangeFrom"],"kind":"struct"},"1:9653:6694":{"crate_id":1,"path":["std","sys_common","thread_local_key","Key"],"kind":"struct"},"2:48568:2256":{"crate_id":2,"path":["core","fmt","num","Binary"],"kind":"struct"},"17:9930:63879":{"crate_id":17,"path":["object","read","any","DynamicRelocationIteratorInternal"],"kind":"enum"},"24:2366:3261":{"crate_id":24,"path":["syn","punctuated","IntoIter"],"kind":"struct"},"9:809:4905":{"crate_id":9,"path":["miniz_oxide","inflate","core","State"],"kind":"enum"},"1:2911:4943":{"crate_id":1,"path":["std","fs","DirEntry"],"kind":"struct"},"17:10937:48260":{"crate_id":17,"path":["object","read","pe","file","PeComdatSectionIterator"],"kind":"struct"},"6:5488:8660":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","utmpx"],"kind":"struct"},"1:11868:4871":{"crate_id":1,"path":["std","process","ExitStatusError"],"kind":"struct"},"24:6330:3201":{"crate_id":24,"path":["syn","ty","TypeMacro"],"kind":"struct"},"1:14894:4926":{"crate_id":1,"path":["std","sys","unix","time","SystemTime"],"kind":"struct"},"2:47024:5309":{"crate_id":2,"path":["core","iter","adapters","map_while","MapWhile"],"kind":"struct"},"17:10039:48032":{"crate_id":17,"path":["object","read","archive","ArchiveMember"],"kind":"struct"},"6:4416:8436":{"crate_id":6,"path":["libc","unix","linux_like","linux","seccomp_data"],"kind":"struct"},"6:4362:8412":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_extended_err"],"kind":"struct"},"24:4773:3444":{"crate_id":24,"path":["syn","token","Caret"],"kind":"struct"},"2:52455:5264":{"crate_id":2,"path":["core","core_arch","simd","u64x4"],"kind":"struct"},"1:9267:9559":{"crate_id":1,"path":["std","sys_common","backtrace","_print","DisplayBacktrace"],"kind":"struct"},"21:251:4334":{"crate_id":21,"path":["proc_macro","bridge","closure","Closure"],"kind":"struct"},"17:12573:7205":{"crate_id":17,"path":["object","macho","BuildToolVersion"],"kind":"struct"},"16:3129:6238":{"crate_id":16,"path":["gimli","common","RangeListsOffset"],"kind":"struct"},"16:6060:6096":{"crate_id":16,"path":["gimli","read","abbrev","AttributeSpecification"],"kind":"struct"},"17:9920:47980":{"crate_id":17,"path":["object","read","any","DynamicRelocationIterator"],"kind":"struct"},"17:13257:7428":{"crate_id":17,"path":["object","pe","ImageSymbolEx"],"kind":"struct"},"1:8545:5018":{"crate_id":1,"path":["std","sync","lazy_lock","LazyLock"],"kind":"struct"},"16:6518:6072":{"crate_id":16,"path":["gimli","read","loclists","LocationLists"],"kind":"struct"},"1:5636:5050":{"crate_id":1,"path":["std","os","unix","net","addr","AsciiEscaped"],"kind":"struct"},"1:10930:4699":{"crate_id":1,"path":["std","io","IoSlice"],"kind":"struct"},"20:305:2064":{"crate_id":20,"path":["quote","__private","push_lifetime_spanned","Lifetime"],"kind":"struct"},"1:2326:604":{"crate_id":1,"path":["std","env"],"kind":"module"},"24:5978:1910":{"crate_id":24,"path":["syn","generics","WherePredicate"],"kind":"enum"},"1:10921:4730":{"crate_id":1,"path":["std","io","util","Sink"],"kind":"struct"},"24:940:64106":{"crate_id":24,"path":["syn","generics","LifetimesMut"],"kind":"struct"},"24:5406:187":{"crate_id":24,"path":["syn","attr","Meta","Path"],"kind":"foreign_type"},"2:13013:5471":{"crate_id":2,"path":["core","str","iter","SplitInternal"],"kind":"struct"},"2:14107:61933":{"crate_id":2,"path":["core","future","join","MaybeDone"],"kind":"enum"},"1:11836:4868":{"crate_id":1,"path":["std","process","CommandArgs"],"kind":"struct"},"6:1712:8177":{"crate_id":6,"path":["libc","unix","linux_like","arphdr"],"kind":"struct"},"5:4372:3266":{"crate_id":5,"path":["alloc","collections","vec_deque","iter_mut","IterMut"],"kind":"struct"},"5:4036:6646":{"crate_id":5,"path":["alloc","collections","linked_list","drop","DropGuard"],"kind":"struct"},"2:3181:232":{"crate_id":2,"path":["core","convert","TryFrom"],"kind":"trait"},"2:11516:5442":{"crate_id":2,"path":["core","slice","iter","SplitMut"],"kind":"struct"},"18:152:54296":{"crate_id":18,"path":["memchr","memchr","iter","Memchr2"],"kind":"struct"},"17:11282:47985":{"crate_id":17,"path":["object","read","RelocationTarget"],"kind":"enum"},"18:637:6813":{"crate_id":18,"path":["memchr","memmem","genericsimd","Forward"],"kind":"struct"},"2:53715:9055":{"crate_id":2,"path":["core","core_arch","x86","__m256"],"kind":"struct"},"22:1020:1765":{"crate_id":22,"path":["proc_macro2","Group"],"kind":"struct"},"1:15883:2999":{"crate_id":1,"path":["std","char"],"kind":"primitive"},"2:39144:1931":{"crate_id":2,"path":["core","error","private","Internal"],"kind":"struct"},"2:3829:138":{"crate_id":2,"path":["core","ops","try_trait","FromResidual"],"kind":"trait"},"1:6219:4676":{"crate_id":1,"path":["std","os","unix","process","CommandExt"],"kind":"trait"},"6:6967:8878":{"crate_id":6,"path":["libc","unix","linux_like","linux","non_exhaustive","open_how"],"kind":"struct"},"2:47849:3262":{"crate_id":2,"path":["core","option","Iter"],"kind":"struct"},"2:13089:5478":{"crate_id":2,"path":["core","str","iter","MatchesInternal"],"kind":"struct"},"17:11956:7089":{"crate_id":17,"path":["object","macho","FatArch64"],"kind":"struct"},"24:5087:3465":{"crate_id":24,"path":["syn","token","OrOr"],"kind":"struct"},"14:250:7852":{"crate_id":14,"path":["rustc_demangle","SizeLimitExhausted"],"kind":"struct"},"20:18:3118":{"crate_id":20,"path":["quote","ext","TokenStreamExt"],"kind":"trait"},"24:3437:3408":{"crate_id":24,"path":["syn","token","Await"],"kind":"struct"},"24:3527:106":{"crate_id":24,"path":["syn","token","Continue"],"kind":"struct"},"24:5834:3170":{"crate_id":24,"path":["syn","expr","ExprTry"],"kind":"struct"},"2:3373:221":{"crate_id":2,"path":["core","marker","StructuralEq"],"kind":"trait"},"6:4127:8343":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_ff_upload"],"kind":"struct"},"2:32692:61858":{"crate_id":2,"path":["core","mem","valid_align","ValidAlignEnum32"],"kind":"enum"},"21:523:63926":{"crate_id":21,"path":["proc_macro","bridge","scoped_cell","RefMutL"],"kind":"struct"},"24:4031:2527":{"crate_id":24,"path":["syn","token","Static"],"kind":"struct"},"2:5298:3338":{"crate_id":2,"path":["core","cell","UnsafeCell"],"kind":"struct"},"17:10913:48258":{"crate_id":17,"path":["object","read","pe","file","PeComdatIterator"],"kind":"struct"},"6:5974:8704":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","sigaction"],"kind":"struct"},"18:837:5142":{"crate_id":18,"path":["memchr","memmem","Searcher"],"kind":"struct"},"14:0:2975":{"crate_id":14,"path":["rustc_demangle"],"kind":"module"},"6:1600:8101":{"crate_id":6,"path":["libc","unix","linux_like","fd_set"],"kind":"struct"},"5:383:4475":{"crate_id":5,"path":["alloc","boxed","thin","ThinBox"],"kind":"struct"},"1:10695:119":{"crate_id":1,"path":["std","fs","DirBuilder"],"kind":"struct"},"24:5838:3171":{"crate_id":24,"path":["syn","expr","ExprTryBlock"],"kind":"struct"},"6:4425:8439":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlmsghdr"],"kind":"struct"},"20:528:3995":{"crate_id":20,"path":["quote","__private","IdentFragmentAdapter"],"kind":"struct"},"1:973:4215":{"crate_id":1,"path":["std","thread","Packet"],"kind":"struct"},"2:50573:5568":{"crate_id":2,"path":["core","time","FromFloatSecsErrorKind"],"kind":"enum"},"2:46934:5298":{"crate_id":2,"path":["core","iter","adapters","cycle","Cycle"],"kind":"struct"},"1:5978:4998":{"crate_id":1,"path":["std","os","unix","net","listener","UnixListener"],"kind":"struct"},"6:5447:8650":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ptrace_syscall_info"],"kind":"struct"},"2:49152:9273":{"crate_id":2,"path":["core","hash","sip","Sip13Rounds"],"kind":"struct"},"1:14399:9287":{"crate_id":1,"path":["std","sys","unix","fs","StatxExtraFields"],"kind":"struct"},"2:32640:61855":{"crate_id":2,"path":["core","mem","valid_align","ValidAlignEnum16"],"kind":"enum"},"1:15849:9367":{"crate_id":1,"path":["std","backtrace_rs","symbolize","gimli","Cache"],"kind":"struct"},"17:9746:47977":{"crate_id":17,"path":["object","read","any","ComdatIterator"],"kind":"struct"},"24:5894:1784":{"crate_id":24,"path":["syn","generics","Generics"],"kind":"struct"},"14:194:46315":{"crate_id":14,"path":["rustc_demangle","DemangleStyle"],"kind":"enum"},"16:3576:6829":{"crate_id":16,"path":["gimli","arch","X86_64"],"kind":"struct"},"17:12209:7129":{"crate_id":17,"path":["object","macho","SubLibraryCommand"],"kind":"struct"},"12:750:3262":{"crate_id":12,"path":["hashbrown","map","Iter"],"kind":"struct"},"1:10678:130":{"crate_id":1,"path":["std","fs","FileType"],"kind":"struct"},"1:4143:4968":{"crate_id":1,"path":["std","io","stdio","StdoutRaw"],"kind":"struct"},"17:10530:6948":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCache"],"kind":"struct"},"17:12302:7143":{"crate_id":17,"path":["object","macho","SymtabCommand"],"kind":"struct"},"1:14960:9294":{"crate_id":1,"path":["std","sys_common","process","CommandEnv"],"kind":"struct"},"2:8669:137":{"crate_id":2,"path":["core","iter","traits","collect","FromIterator"],"kind":"trait"},"9:1020:5812":{"crate_id":9,"path":["miniz_oxide","MZError"],"kind":"enum"},"2:3535:5092":{"crate_id":2,"path":["core","ops","bit","ShrAssign"],"kind":"trait"},"17:10643:6911":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandData"],"kind":"struct"},"5:1518:4851":{"crate_id":5,"path":["alloc","collections","btree","map","entry","VacantEntry"],"kind":"struct"},"1:6841:4680":{"crate_id":1,"path":["std","os","net","tcp","TcpStreamExt"],"kind":"trait"},"22:1066:1776":{"crate_id":22,"path":["proc_macro2","Ident"],"kind":"struct"},"24:4139:3431":{"crate_id":24,"path":["syn","token","Typeof"],"kind":"struct"},"17:13859:7603":{"crate_id":17,"path":["object","pe","ImageDebugDirectory"],"kind":"struct"},"2:46698:5611":{"crate_id":2,"path":["core","char","EscapeDefaultState"],"kind":"enum"},"2:22881:61755":{"crate_id":2,"path":["core","core_simd","swizzle","interleave","Hi"],"kind":"struct"},"2:25085:169":{"crate_id":2,"path":["core","num","nonzero","NonZeroI64"],"kind":"struct"},"16:6159:6060":{"crate_id":16,"path":["gimli","read","line","DebugLine"],"kind":"struct"},"16:6099:6102":{"crate_id":16,"path":["gimli","read","aranges","ArangeHeader"],"kind":"struct"},"1:11491:4908":{"crate_id":1,"path":["std","path","Components"],"kind":"struct"},"17:13472:7482":{"crate_id":17,"path":["object","pe","ImageBoundForwarderRef"],"kind":"struct"},"1:14061:4722":{"crate_id":1,"path":["std","sys","unix","stdio","Stdin"],"kind":"struct"},"1:1456:4843":{"crate_id":1,"path":["std","collections","hash","map","IntoValues"],"kind":"struct"},"22:155:9183":{"crate_id":22,"path":["proc_macro2","rcvec","RcVec"],"kind":"struct"},"1:2130:4582":{"crate_id":1,"path":["std","collections","hash","set","DrainFilter"],"kind":"struct"},"1:3801:207":{"crate_id":1,"path":["std","io","error","Result"],"kind":"typedef"},"1:10986:4706":{"crate_id":1,"path":["std","io","Split"],"kind":"struct"},"1:14779:6701":{"crate_id":1,"path":["std","sys","unix","process","process_inner","do_exec","Reset"],"kind":"struct"},"16:6858:6268":{"crate_id":16,"path":["gimli","read","op","OperationEvaluationResult"],"kind":"enum"},"1:12030:4805":{"crate_id":1,"path":["std","sync","mpsc","TrySendError"],"kind":"enum"},"17:13774:7581":{"crate_id":17,"path":["object","pe","ImageAlphaRuntimeFunctionEntry"],"kind":"struct"},"2:56612:241":{"crate_id":2,"path":["core","core_simd","fmt","fmt","Wrapper"],"kind":"struct"},"2:8433:62332":{"crate_id":2,"path":["core","iter","sources","from_generator","FromGenerator"],"kind":"struct"},"24:6126:1984":{"crate_id":24,"path":["syn","derive","DataStruct"],"kind":"struct"},"6:565:8018":{"crate_id":6,"path":["libc","unix","ipv6_mreq"],"kind":"struct"},"17:10147:6906":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbolTable"],"kind":"struct"},"2:13560:110":{"crate_id":2,"path":["core","str","lossy","Debug"],"kind":"struct"},"2:3743:3283":{"crate_id":2,"path":["core","ops","range","RangeBounds"],"kind":"trait"},"16:3155:6229":{"crate_id":16,"path":["gimli","common","DebugRngListsBase"],"kind":"struct"},"2:23138:5330":{"crate_id":2,"path":["core","core_simd","elements","uint","SimdUint"],"kind":"trait"},"2:53473:5262":{"crate_id":2,"path":["core","core_arch","simd","u32x16"],"kind":"struct"},"17:2314:6381":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbolIterator"],"kind":"struct"},"2:50417:5558":{"crate_id":2,"path":["core","str","lossy","Utf8Chunks"],"kind":"struct"},"12:559:144":{"crate_id":12,"path":["hashbrown","map","HashMap"],"kind":"struct"},"17:10198:48043":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdat"],"kind":"struct"},"1:1452:4842":{"crate_id":1,"path":["std","collections","hash","map","IntoKeys"],"kind":"struct"},"17:8902:47967":{"crate_id":17,"path":["object","common","AddressSize"],"kind":"enum"},"2:46773:5547":{"crate_id":2,"path":["core","ffi","c_str","FromBytesWithNulError"],"kind":"struct"},"2:52379:5257":{"crate_id":2,"path":["core","core_arch","simd","u16x16"],"kind":"struct"},"1:9558:6692":{"crate_id":1,"path":["std","sys_common","rwlock","StaticRwLockReadGuard"],"kind":"struct"},"6:4270:5000":{"crate_id":6,"path":["libc","unix","linux_like","linux","ucred"],"kind":"struct"},"2:3372:222":{"crate_id":2,"path":["core","marker","StructuralPartialEq"],"kind":"trait"},"5:4308:6646":{"crate_id":5,"path":["alloc","collections","vec_deque","drain","drop","DropGuard"],"kind":"struct"},"16:7323:6078":{"crate_id":16,"path":["gimli","read","unit","UnitOffset"],"kind":"struct"},"17:12070:7108":{"crate_id":17,"path":["object","macho","Section32"],"kind":"struct"},"24:5714:3142":{"crate_id":24,"path":["syn","expr","ExprAssignOp"],"kind":"struct"},"16:3265:6234":{"crate_id":16,"path":["gimli","common","DebugTypesOffset"],"kind":"struct"},"17:9948:47981":{"crate_id":17,"path":["object","read","any","SectionRelocationIterator"],"kind":"struct"},"24:6369:2208":{"crate_id":24,"path":["syn","ty","ReturnType"],"kind":"enum"},"1:5431:4776":{"crate_id":1,"path":["std","os","unix","ffi","os_str","OsStrExt"],"kind":"trait"},"2:2922:125":{"crate_id":2,"path":["core","cmp","Eq"],"kind":"trait"},"2:11668:5447":{"crate_id":2,"path":["core","slice","iter","SplitN"],"kind":"struct"},"2:10801:143":{"crate_id":2,"path":["core","hash","Hash"],"kind":"trait"},"2:48446:5552":{"crate_id":2,"path":["core","sync","exclusive","Exclusive"],"kind":"struct"},"2:3364:215":{"crate_id":2,"path":["core","marker","Send"],"kind":"trait"},"24:6062:3184":{"crate_id":24,"path":["syn","lit","LitBool"],"kind":"struct"},"24:5215:3474":{"crate_id":24,"path":["syn","token","Shl"],"kind":"struct"},"6:4474:8461":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_alg"],"kind":"struct"},"2:53333:5258":{"crate_id":2,"path":["core","core_arch","simd","u16x32"],"kind":"struct"},"4:0:2969":{"crate_id":4,"path":["rustc_std_workspace_core"],"kind":"module"},"1:10496:12062":{"crate_id":1,"path":["std","backtrace","BacktraceStatus"],"kind":"enum"},"9:469:9346":{"crate_id":9,"path":["miniz_oxide","inflate","core","DecompressorOxide"],"kind":"struct"},"1:4383:4688":{"crate_id":1,"path":["std","io","Guard"],"kind":"struct"},"17:10422:48086":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdatSectionIterator"],"kind":"struct"},"2:3600:3343":{"crate_id":2,"path":["core","ops","deref","DerefMut"],"kind":"trait"},"17:10318:6355":{"crate_id":17,"path":["object","read","elf","symbol","SymbolTable"],"kind":"struct"},"17:13584:7512":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation64V2"],"kind":"struct"},"2:12195:5462":{"crate_id":2,"path":["core","slice","iter","GroupBy"],"kind":"struct"},"2:24920:171":{"crate_id":2,"path":["core","num","nonzero","NonZeroU128"],"kind":"struct"},"2:9655:5139":{"crate_id":2,"path":["core","panicking","assert_matches_failed","Pattern"],"kind":"struct"},"12:2412:7900":{"crate_id":12,"path":["hashbrown","raw","TableLayout"],"kind":"struct"},"2:50384:5158":{"crate_id":2,"path":["core","str","pattern","TwoWaySearcher"],"kind":"struct"},"1:11048:4764":{"crate_id":1,"path":["std","net","ip","IpAddr"],"kind":"enum"},"2:3437:3479":{"crate_id":2,"path":["core","ops","arith","Sub"],"kind":"trait"},"1:10799:4716":{"crate_id":1,"path":["std","io","error","ErrorKind"],"kind":"enum"},"1:10648:4756":{"crate_id":1,"path":["std","fs","OpenOptions"],"kind":"struct"},"16:2733:5983":{"crate_id":16,"path":["gimli","common","Format"],"kind":"enum"},"16:5257:6894":{"crate_id":16,"path":["gimli","endianity","LittleEndian"],"kind":"struct"},"1:2420:6467":{"crate_id":1,"path":["std","env","Args"],"kind":"struct"},"2:53730:9056":{"crate_id":2,"path":["core","core_arch","x86","__m256d"],"kind":"struct"},"1:783:6694":{"crate_id":1,"path":["std","thread","local","fast","Key"],"kind":"struct"},"1:10902:4732":{"crate_id":1,"path":["std","io","readbuf","BorrowedCursor"],"kind":"struct"},"1:11842:183":{"crate_id":1,"path":["std","process","Output"],"kind":"struct"},"1:10711:4714":{"crate_id":1,"path":["std","io","buffered","IntoInnerError"],"kind":"struct"},"5:3436:4812":{"crate_id":5,"path":["alloc","collections","btree","set","Intersection"],"kind":"struct"},"2:3459:5121":{"crate_id":2,"path":["core","ops","arith","Neg"],"kind":"trait"},"5:8249:5674":{"crate_id":5,"path":["alloc","collections","binary_heap","DrainSorted"],"kind":"struct"},"2:47095:4704":{"crate_id":2,"path":["core","iter","adapters","take","Take"],"kind":"struct"},"16:2905:6225":{"crate_id":16,"path":["gimli","common","DebugInfoOffset"],"kind":"struct"},"18:661:6423":{"crate_id":18,"path":["memchr","memmem","prefilter","PrefilterState"],"kind":"struct"},"2:48236:89":{"crate_id":2,"path":["core","sync","atomic","AtomicU32"],"kind":"struct"},"2:3165:75":{"crate_id":2,"path":["core","convert","AsRef"],"kind":"trait"},"2:4161:5110":{"crate_id":2,"path":["core","any","Demand"],"kind":"struct"},"6:1588:8093":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_ll"],"kind":"struct"},"6:5541:8671":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","sigset_t"],"kind":"struct"},"6:4308:8387":{"crate_id":6,"path":["libc","unix","linux_like","linux","genlmsghdr"],"kind":"struct"},"2:10580:191":{"crate_id":2,"path":["core","fmt","Pointer"],"kind":"trait"},"17:11563:7009":{"crate_id":17,"path":["object","elf","Sym64"],"kind":"struct"},"2:50237:5152":{"crate_id":2,"path":["core","str","pattern","CharArrayRefSearcher"],"kind":"struct"},"24:4085:2250":{"crate_id":24,"path":["syn","token","Trait"],"kind":"struct"},"17:10476:6356":{"crate_id":17,"path":["object","read","elf","version","VerdefIterator"],"kind":"struct"},"6:545:8001":{"crate_id":6,"path":["libc","unix","rusage"],"kind":"struct"},"17:13331:7447":{"crate_id":17,"path":["object","pe","ImageAuxSymbolSection"],"kind":"struct"},"6:4356:8409":{"crate_id":6,"path":["libc","unix","linux_like","linux","regmatch_t"],"kind":"struct"},"2:37952:4074":{"crate_id":2,"path":["core","cmp","Reverse"],"kind":"struct"},"2:50053:5481":{"crate_id":2,"path":["core","str","iter","LinesAny"],"kind":"struct"},"16:3521:7648":{"crate_id":16,"path":["gimli","arch","X86"],"kind":"struct"},"18:668:6424":{"crate_id":18,"path":["memchr","memmem","rabinkarp","NeedleHash"],"kind":"struct"},"2:3676:3271":{"crate_id":2,"path":["core","ops","index","IndexMut"],"kind":"trait"},"2:50516:5495":{"crate_id":2,"path":["core","str","CharEscapeDefault"],"kind":"struct"},"16:6533:6255":{"crate_id":16,"path":["gimli","read","loclists","LocListsFormat"],"kind":"enum"},"6:4098:8329":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_periodic_effect"],"kind":"struct"},"2:49121:5215":{"crate_id":2,"path":["core","hash","sip","SipHasher"],"kind":"struct"},"2:4841:5178":{"crate_id":2,"path":["core","asserting","TryCaptureWithoutDebug"],"kind":"struct"},"2:46903:4703":{"crate_id":2,"path":["core","iter","adapters","chain","Chain"],"kind":"struct"},"16:7079:6123":{"crate_id":16,"path":["gimli","read","pubnames","PubNamesEntry"],"kind":"struct"},"17:10407:6377":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdat"],"kind":"struct"},"24:6308:3196":{"crate_id":24,"path":["syn","ty","TypeArray"],"kind":"struct"},"17:11354:6326":{"crate_id":17,"path":["object","read","CompressedData"],"kind":"struct"},"16:7169:6073":{"crate_id":16,"path":["gimli","read","rnglists","RangeLists"],"kind":"struct"},"24:4175:3432":{"crate_id":24,"path":["syn","token","Unsafe"],"kind":"struct"},"1:6241:4780":{"crate_id":1,"path":["std","os","unix","process","ExitStatusExt"],"kind":"trait"},"1:14394:9285":{"crate_id":1,"path":["std","sys","unix","fs","FileAttr"],"kind":"struct"},"5:8494:5646":{"crate_id":5,"path":["alloc","string","FromUtf16Error"],"kind":"struct"},"17:10187:48044":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdatIterator"],"kind":"struct"},"23:0:3101":{"crate_id":23,"path":["unicode_ident"],"kind":"module"},"24:5924:2464":{"crate_id":24,"path":["syn","generics","LifetimeDef"],"kind":"struct"},"6:3993:8277":{"crate_id":6,"path":["libc","unix","linux_like","linux","msginfo"],"kind":"struct"},"24:4964:3456":{"crate_id":24,"path":["syn","token","EqEq"],"kind":"struct"},"2:46721:5612":{"crate_id":2,"path":["core","char","ToLowercase"],"kind":"struct"},"1:8974:57706":{"crate_id":1,"path":["std","sync","rwlock","fmt","LockedPlaceholder"],"kind":"struct"},"20:0:1074":{"crate_id":20,"path":["quote"],"kind":"module"},"2:47808:178":{"crate_id":2,"path":["core","option","Option"],"kind":"enum"},"16:5427:5954":{"crate_id":16,"path":["gimli","read","cfi","SectionBaseAddresses"],"kind":"struct"},"2:2188:4292":{"crate_id":2,"path":["core","mem","Discriminant"],"kind":"struct"},"12:2253:4849":{"crate_id":12,"path":["hashbrown","set","Entry"],"kind":"enum"},"1:4256:4720":{"crate_id":1,"path":["std","io","stdio","Stderr"],"kind":"struct"},"2:47015:5308":{"crate_id":2,"path":["core","iter","adapters","map","Map"],"kind":"struct"},"2:51552:5259":{"crate_id":2,"path":["core","core_arch","simd","u32x2"],"kind":"struct"},"2:10576:3355":{"crate_id":2,"path":["core","fmt","LowerHex"],"kind":"trait"},"1:1105:12064":{"crate_id":1,"path":["std","backtrace","BacktraceFrame"],"kind":"struct"},"24:176:4136":{"crate_id":24,"path":["syn","token","CustomToken"],"kind":"trait"},"2:0:493":{"crate_id":2,"path":["core"],"kind":"module"},"6:3987:8274":{"crate_id":6,"path":["libc","unix","linux_like","linux","if_nameindex"],"kind":"struct"},"22:623:3277":{"crate_id":22,"path":["proc_macro2","LexError"],"kind":"struct"},"24:4669:3286":{"crate_id":24,"path":["syn","token","Add"],"kind":"struct"},"16:6873:3697":{"crate_id":16,"path":["gimli","read","op","Location"],"kind":"enum"},"1:13859:4868":{"crate_id":1,"path":["std","sys","unix","process","process_common","CommandArgs"],"kind":"struct"},"1:6339:4782":{"crate_id":1,"path":["std","os","unix","thread","JoinHandleExt"],"kind":"trait"},"18:729:6796":{"crate_id":18,"path":["memchr","memmem","twoway","Shift"],"kind":"enum"},"1:2135:4812":{"crate_id":1,"path":["std","collections","hash","set","Intersection"],"kind":"struct"},"5:8472:220":{"crate_id":5,"path":["alloc","string","String"],"kind":"struct"},"24:661:64005":{"crate_id":24,"path":["syn","expr","parsing","Precedence"],"kind":"enum"},"6:6908:8865":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_condattr_t"],"kind":"struct"},"5:3366:95":{"crate_id":5,"path":["alloc","collections","btree","set","BTreeSet"],"kind":"struct"},"1:8453:5008":{"crate_id":1,"path":["std","sync","barrier","BarrierWaitResult"],"kind":"struct"},"24:3797:3421":{"crate_id":24,"path":["syn","token","Loop"],"kind":"struct"},"1:15882:2998":{"crate_id":1,"path":["std","never"],"kind":"primitive"},"24:5822:3167":{"crate_id":24,"path":["syn","expr","ExprRepeat"],"kind":"struct"},"6:4410:8435":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_fprog"],"kind":"struct"},"1:12082:214":{"crate_id":1,"path":["std","sync","rwlock","RwLockWriteGuard"],"kind":"struct"},"24:5770:3155":{"crate_id":24,"path":["syn","expr","ExprGroup"],"kind":"struct"},"2:3526:5088":{"crate_id":2,"path":["core","ops","bit","BitXorAssign"],"kind":"trait"},"2:10582:3353":{"crate_id":2,"path":["core","fmt","LowerExp"],"kind":"trait"},"17:9539:6370":{"crate_id":17,"path":["object","read","util","ByteString"],"kind":"struct"},"24:5476:3139":{"crate_id":24,"path":["syn","data","Visibility"],"kind":"enum"},"5:7960:6663":{"crate_id":5,"path":["alloc","vec","dedup_by","FillGapOnDrop"],"kind":"struct"},"2:24477:40142":{"crate_id":2,"path":["core","num","fmt","Part"],"kind":"enum"},"12:162:5879":{"crate_id":12,"path":["hashbrown","raw","Bucket"],"kind":"struct"},"12:869:4584":{"crate_id":12,"path":["hashbrown","map","Drain"],"kind":"struct"},"24:3455:3409":{"crate_id":24,"path":["syn","token","Become"],"kind":"struct"},"24:5810:2039":{"crate_id":24,"path":["syn","expr","ExprPath"],"kind":"struct"},"2:11409:3266":{"crate_id":2,"path":["core","slice","iter","IterMut"],"kind":"struct"},"2:48362:85":{"crate_id":2,"path":["core","sync","atomic","AtomicIsize"],"kind":"struct"},"21:2967:2168":{"crate_id":21,"path":["proc_macro","Punct"],"kind":"struct"},"16:4411:7658":{"crate_id":16,"path":["gimli","constants","DwEnd"],"kind":"struct"},"2:46972:9264":{"crate_id":2,"path":["core","iter","adapters","flatten","FlattenCompat"],"kind":"struct"},"1:7734:4213":{"crate_id":1,"path":["std","sync","mpsc","blocking","Inner"],"kind":"struct"},"13:233:7897":{"crate_id":13,"path":["std_detect","detect","cache","Initializer"],"kind":"struct"},"2:4896:4461":{"crate_id":2,"path":["core","async_iter","async_iter","AsyncIterator"],"kind":"trait"},"2:3518:5084":{"crate_id":2,"path":["core","ops","bit","BitAndAssign"],"kind":"trait"},"1:2654:181":{"crate_id":1,"path":["std","ffi","os_str","OsStr"],"kind":"struct"},"1:4219:4725":{"crate_id":1,"path":["std","io","stdio","StdoutLock"],"kind":"struct"},"6:618:8046":{"crate_id":6,"path":["libc","unix","tms"],"kind":"struct"},"2:50692:192":{"crate_id":2,"path":["core","task","poll","Poll"],"kind":"enum"},"17:1236:48045":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbolIterator"],"kind":"struct"},"16:4351:7656":{"crate_id":16,"path":["gimli","constants","DwLle"],"kind":"struct"},"24:6366:3209":{"crate_id":24,"path":["syn","ty","Variadic"],"kind":"struct"},"24:4947:125":{"crate_id":24,"path":["syn","token","Eq"],"kind":"struct"},"6:4332:8397":{"crate_id":6,"path":["libc","unix","linux_like","linux","inotify_event"],"kind":"struct"},"17:9240:6307":{"crate_id":17,"path":["object","endian","Endianness"],"kind":"enum"},"24:6054:3185":{"crate_id":24,"path":["syn","lit","LitByte"],"kind":"struct"},"2:49657:5457":{"crate_id":2,"path":["core","slice","iter","ArrayChunksMut"],"kind":"struct"},"16:4439:7659":{"crate_id":16,"path":["gimli","constants","DwAccess"],"kind":"struct"},"24:6337:2210":{"crate_id":24,"path":["syn","ty","TypePath"],"kind":"struct"},"24:5099:3466":{"crate_id":24,"path":["syn","token","Pound"],"kind":"struct"},"2:46894:5294":{"crate_id":2,"path":["core","iter","adapters","by_ref_sized","ByRefSized"],"kind":"struct"},"2:5152:3329":{"crate_id":2,"path":["core","cell","BorrowMutError"],"kind":"struct"},"2:47933:207":{"crate_id":2,"path":["core","result","Result"],"kind":"enum"},"24:5505:2205":{"crate_id":24,"path":["syn","expr","Expr"],"kind":"enum"},"2:49939:5476":{"crate_id":2,"path":["core","str","iter","MatchIndices"],"kind":"struct"},"17:9873:47979":{"crate_id":17,"path":["object","read","any","SymbolIterator"],"kind":"struct"},"17:9579:129":{"crate_id":17,"path":["object","read","any","File"],"kind":"struct"},"17:8929:47968":{"crate_id":17,"path":["object","common","BinaryFormat"],"kind":"enum"},"17:12455:7186":{"crate_id":17,"path":["object","macho","UuidCommand"],"kind":"struct"},"21:107:4625":{"crate_id":21,"path":["proc_macro","bridge","buffer","Buffer"],"kind":"struct"},"2:50220:5151":{"crate_id":2,"path":["core","str","pattern","CharArraySearcher"],"kind":"struct"},"5:8483:5645":{"crate_id":5,"path":["alloc","string","FromUtf8Error"],"kind":"struct"},"17:9064:47971":{"crate_id":17,"path":["object","common","SymbolScope"],"kind":"enum"},"1:4178:4722":{"crate_id":1,"path":["std","io","stdio","Stdin"],"kind":"struct"},"6:1740:8189":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_storage"],"kind":"struct"},"2:46801:5549":{"crate_id":2,"path":["core","ffi","c_str","FromBytesUntilNulError"],"kind":"struct"},"0:1257:1641":{"crate_id":0,"path":["serde_derive","Serialize"],"kind":"proc_derive"},"12:2280:4851":{"crate_id":12,"path":["hashbrown","set","VacantEntry"],"kind":"struct"},"17:681:1856":{"crate_id":17,"path":["object","read","any","Symbol"],"kind":"struct"},"5:6759:5650":{"crate_id":5,"path":["alloc","sync","Weak"],"kind":"struct"},"17:12250:7135":{"crate_id":17,"path":["object","macho","ThreadCommand"],"kind":"struct"},"17:9756:63886":{"crate_id":17,"path":["object","read","any","ComdatIteratorInternal"],"kind":"enum"},"2:46944:5299":{"crate_id":2,"path":["core","iter","adapters","enumerate","Enumerate"],"kind":"struct"},"5:8287:5644":{"crate_id":5,"path":["alloc","collections","btree","set_val","SetValZST"],"kind":"struct"},"24:3491:99":{"crate_id":24,"path":["syn","token","Break"],"kind":"struct"},"1:8295:4800":{"crate_id":1,"path":["std","sync","mpsc","SyncSender"],"kind":"struct"},"18:790:6409":{"crate_id":18,"path":["memchr","memmem","FindIter"],"kind":"struct"},"1:14634:4777":{"crate_id":1,"path":["std","sys","unix","os_str","Buf"],"kind":"struct"},"16:7471:6054":{"crate_id":16,"path":["gimli","read","unit","AttributeValue"],"kind":"enum"},"18:754:63893":{"crate_id":18,"path":["memchr","memmem","twoway","SuffixOrdering"],"kind":"enum"},"3:0:436":{"crate_id":3,"path":["compiler_builtins"],"kind":"module"},"6:5982:8709":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statfs"],"kind":"struct"},"5:3462:1813":{"crate_id":5,"path":["alloc","collections","btree","set","Union"],"kind":"struct"},"17:13233:7422":{"crate_id":17,"path":["object","pe","ImageSymbol"],"kind":"struct"},"2:7936:2601":{"crate_id":2,"path":["core","iter","adapters","zip","zip"],"kind":"function"},"9:749:5747":{"crate_id":9,"path":["miniz_oxide","deflate","core","TDEFLStatus"],"kind":"enum"},"6:4315:8388":{"crate_id":6,"path":["libc","unix","linux_like","linux","in6_pktinfo"],"kind":"struct"},"1:13394:13081":{"crate_id":1,"path":["std","sys","unix","os","SplitPaths"],"kind":"struct"},"17:11742:7044":{"crate_id":17,"path":["object","elf","Verdaux"],"kind":"struct"},"6:1680:8159":{"crate_id":6,"path":["libc","unix","linux_like","in6_rtmsg"],"kind":"struct"},"2:32632:4295":{"crate_id":2,"path":["core","mem","valid_align","ValidAlign"],"kind":"struct"},"2:5278:3337":{"crate_id":2,"path":["core","cell","RefMut"],"kind":"struct"},"24:4877:3451":{"crate_id":24,"path":["syn","token","Dollar"],"kind":"struct"},"17:13602:7515":{"crate_id":17,"path":["object","pe","ImageEpilogueDynamicRelocationHeader"],"kind":"struct"},"12:1682:5888":{"crate_id":12,"path":["hashbrown","rustc_entry","RustcOccupiedEntry"],"kind":"struct"},"17:10571:6333":{"crate_id":17,"path":["object","read","macho","file","MachOFile"],"kind":"struct"},"12:787:4842":{"crate_id":12,"path":["hashbrown","map","IntoKeys"],"kind":"struct"},"16:6012:6055":{"crate_id":16,"path":["gimli","read","abbrev","DebugAbbrev"],"kind":"struct"},"1:14067:4720":{"crate_id":1,"path":["std","sys","unix","stdio","Stderr"],"kind":"struct"},"16:3478:6235":{"crate_id":16,"path":["gimli","common","DwarfFileType"],"kind":"enum"},"16:6656:6262":{"crate_id":16,"path":["gimli","read","lookup","PubStuffHeader"],"kind":"struct"},"6:5378:8622":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","regex_t"],"kind":"struct"},"5:5948:6654":{"crate_id":5,"path":["alloc","slice","insert_head","InsertionHole"],"kind":"struct"},"2:48110:81":{"crate_id":2,"path":["core","sync","atomic","AtomicI16"],"kind":"struct"},"2:6717:5304":{"crate_id":2,"path":["core","iter","adapters","flatten","Flatten"],"kind":"struct"},"6:6671:8852":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","align","clone_args"],"kind":"struct"},"18:801:6410":{"crate_id":18,"path":["memchr","memmem","FindRevIter"],"kind":"struct"},"12:183:5883":{"crate_id":12,"path":["hashbrown","raw","RawTable"],"kind":"struct"},"24:2312:3259":{"crate_id":24,"path":["syn","punctuated","PairsMut"],"kind":"struct"},"2:3853:5204":{"crate_id":2,"path":["core","ops","try_trait","NeverShortCircuitResidual"],"kind":"enum"},"1:10993:4707":{"crate_id":1,"path":["std","io","Lines"],"kind":"struct"},"5:8406:5678":{"crate_id":5,"path":["alloc","ffi","c_str","NulError"],"kind":"struct"},"24:6050:1979":{"crate_id":24,"path":["syn","lit","LitStr"],"kind":"struct"},"2:3496:3999":{"crate_id":2,"path":["core","ops","bit","BitOr"],"kind":"trait"},"24:6222:3193":{"crate_id":24,"path":["syn","op","UnOp"],"kind":"enum"},"16:7208:6131":{"crate_id":16,"path":["gimli","read","rnglists","RawRngListEntry"],"kind":"enum"},"24:4283:242":{"crate_id":24,"path":["syn","token","Yield"],"kind":"struct"},"17:13481:7483":{"crate_id":17,"path":["object","pe","ImageDelayloadDescriptor"],"kind":"struct"},"24:972:3183":{"crate_id":24,"path":["syn","generics","Turbofish"],"kind":"struct"},"2:47840:1824":{"crate_id":2,"path":["core","option","Item"],"kind":"struct"},"17:13747:7573":{"crate_id":17,"path":["object","pe","ImageArmRuntimeFunctionEntry"],"kind":"struct"},"17:13463:7479":{"crate_id":17,"path":["object","pe","ImageBoundImportDescriptor"],"kind":"struct"},"2:3475:5127":{"crate_id":2,"path":["core","ops","arith","DivAssign"],"kind":"trait"},"17:9326:6347":{"crate_id":17,"path":["object","endian","U32Bytes"],"kind":"struct"},"1:6645:4667":{"crate_id":1,"path":["std","os","fd","raw","AsRawFd"],"kind":"trait"},"17:12543:7199":{"crate_id":17,"path":["object","macho","VersionMinCommand"],"kind":"struct"},"16:5605:5962":{"crate_id":16,"path":["gimli","read","cfi","FrameDescriptionEntry"],"kind":"struct"},"9:27:5794":{"crate_id":9,"path":["miniz_oxide","deflate","buffer","HashBuffers"],"kind":"struct"},"24:4802:3446":{"crate_id":24,"path":["syn","token","Colon"],"kind":"struct"},"17:11713:7035":{"crate_id":17,"path":["object","elf","Versym"],"kind":"struct"},"1:11270:5001":{"crate_id":1,"path":["std","os","unix","ucred","UCred"],"kind":"struct"},"17:13029:7356":{"crate_id":17,"path":["object","pe","ImageDataDirectory"],"kind":"struct"},"24:6328:3200":{"crate_id":24,"path":["syn","ty","TypeInfer"],"kind":"struct"},"24:1278:6456":{"crate_id":24,"path":["syn","lit","LitFloatRepr"],"kind":"struct"},"22:823:1631":{"crate_id":22,"path":["proc_macro2","fallback","TokenStream"],"kind":"struct"},"24:3401:3406":{"crate_id":24,"path":["syn","token","Async"],"kind":"struct"},"2:46963:5301":{"crate_id":2,"path":["core","iter","adapters","filter_map","FilterMap"],"kind":"struct"},"6:6925:8870":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_cond_t"],"kind":"struct"},"16:6557:6115":{"crate_id":16,"path":["gimli","read","loclists","RawLocListEntry"],"kind":"enum"},"2:46336:5112":{"crate_id":2,"path":["core","any","TypeId"],"kind":"struct"},"17:13167:7405":{"crate_id":17,"path":["object","pe","AnonObjectHeader"],"kind":"struct"},"24:5706:3140":{"crate_id":24,"path":["syn","expr","ExprArray"],"kind":"struct"},"2:5034:3346":{"crate_id":2,"path":["core","cell","once","OnceCell"],"kind":"struct"},"2:3611:2202":{"crate_id":2,"path":["core","ops","drop","Drop"],"kind":"trait"},"17:294:63883":{"crate_id":17,"path":["object","read","util","DebugByte"],"kind":"struct"},"2:47857:3266":{"crate_id":2,"path":["core","option","IterMut"],"kind":"struct"},"2:11710:5450":{"crate_id":2,"path":["core","slice","iter","RSplitNMut"],"kind":"struct"},"1:9427:57740":{"crate_id":1,"path":["std","sys_common","mutex","StaticMutex"],"kind":"struct"},"2:10034:79":{"crate_id":2,"path":["core","sync","atomic","AtomicBool"],"kind":"struct"},"6:3981:8272":{"crate_id":6,"path":["libc","unix","linux_like","linux","cpu_set_t"],"kind":"struct"},"1:7539:4869":{"crate_id":1,"path":["std","process","Stdio"],"kind":"struct"},"1:15887:3002":{"crate_id":1,"path":["std","array"],"kind":"primitive"},"2:52069:5229":{"crate_id":2,"path":["core","core_arch","simd","f64x4"],"kind":"struct"},"17:10136:47979":{"crate_id":17,"path":["object","read","coff","symbol","SymbolIterator"],"kind":"struct"},"2:53675:9051":{"crate_id":2,"path":["core","core_arch","x86","__m128i"],"kind":"struct"},"1:4036:4731":{"crate_id":1,"path":["std","io","readbuf","BorrowedBuf"],"kind":"struct"},"6:6129:8768":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_xmmreg"],"kind":"struct"},"17:11335:6327":{"crate_id":17,"path":["object","read","CompressedFileRange"],"kind":"struct"},"1:1031:2269":{"crate_id":1,"path":["std","ascii","AsciiExt"],"kind":"trait"},"2:3405:3384":{"crate_id":2,"path":["core","marker","Unpin"],"kind":"trait"},"2:14253:61934":{"crate_id":2,"path":["core","future","from_generator","GenFuture"],"kind":"struct"},"24:6362:3195":{"crate_id":24,"path":["syn","ty","BareFnArg"],"kind":"struct"},"16:3340:5981":{"crate_id":16,"path":["gimli","common","EhFrameOffset"],"kind":"struct"},"17:11671:7030":{"crate_id":17,"path":["object","elf","ProgramHeader64"],"kind":"struct"},"17:13721:7564":{"crate_id":17,"path":["object","pe","ImageHotPatchBase"],"kind":"struct"},"1:2361:13071":{"crate_id":1,"path":["std","env","VarsOs"],"kind":"struct"},"5:5906:5635":{"crate_id":5,"path":["alloc","slice","Concat"],"kind":"trait"},"24:6089:2158":{"crate_id":24,"path":["syn","mac","Macro"],"kind":"struct"},"17:13323:7444":{"crate_id":17,"path":["object","pe","ImageAuxSymbolWeak"],"kind":"struct"},"1:11966:4801":{"crate_id":1,"path":["std","sync","mpsc","SendError"],"kind":"struct"},"21:2972:1839":{"crate_id":21,"path":["proc_macro","Spacing"],"kind":"enum"},"16:5998:6041":{"crate_id":16,"path":["gimli","read","reader","ReaderOffsetId"],"kind":"struct"},"2:52725:5226":{"crate_id":2,"path":["core","core_arch","simd","f32x8"],"kind":"struct"},"14:189:9551":{"crate_id":14,"path":["rustc_demangle","Demangle"],"kind":"struct"},"21:2755:4624":{"crate_id":21,"path":["proc_macro","bridge","ExpnGlobals"],"kind":"struct"},"24:5157:3470":{"crate_id":24,"path":["syn","token","Rem"],"kind":"struct"},"6:5260:8556":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","mallinfo"],"kind":"struct"},"6:5274:8566":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","mallinfo2"],"kind":"struct"},"24:6232:1762":{"crate_id":24,"path":["syn","ty","Type"],"kind":"enum"},"5:3825:3262":{"crate_id":5,"path":["alloc","collections","linked_list","Iter"],"kind":"struct"},"16:7379:6079":{"crate_id":16,"path":["gimli","read","unit","UnitType"],"kind":"enum"},"16:3177:6230":{"crate_id":16,"path":["gimli","common","DebugRngListsIndex"],"kind":"struct"},"1:6481:8752":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt","st_ctime"],"kind":"foreign_type"},"22:917:9185":{"crate_id":22,"path":["proc_macro2","imp","DeferredTokenStream"],"kind":"struct"},"24:5996:2454":{"crate_id":24,"path":["syn","generics","PredicateType"],"kind":"struct"},"16:6980:6120":{"crate_id":16,"path":["gimli","read","op","EvaluationResult"],"kind":"enum"},"24:2502:2422":{"crate_id":24,"path":["syn","punctuated","Pair"],"kind":"enum"},"1:11359:4895":{"crate_id":1,"path":["std","path","Prefix"],"kind":"enum"},"15:0:2976":{"crate_id":15,"path":["addr2line"],"kind":"module"},"5:5962:6657":{"crate_id":5,"path":["alloc","slice","merge","MergeHole"],"kind":"struct"},"24:3959:3335":{"crate_id":24,"path":["syn","token","Ref"],"kind":"struct"},"2:53581:5245":{"crate_id":2,"path":["core","core_arch","simd","i64x8"],"kind":"struct"},"2:23974:61356":{"crate_id":2,"path":["core","core_simd","vector","splat","Splat"],"kind":"struct"},"16:5303:5945":{"crate_id":16,"path":["gimli","read","cfi","DebugFrame"],"kind":"struct"},"16:5443:5955":{"crate_id":16,"path":["gimli","read","cfi","CfiEntriesIter"],"kind":"struct"},"2:10570:120":{"crate_id":2,"path":["core","fmt","Display"],"kind":"trait"},"2:2502:4466":{"crate_id":2,"path":["core","ptr","unique","Unique"],"kind":"struct"},"1:5860:4990":{"crate_id":1,"path":["std","os","unix","net","datagram","UnixDatagram"],"kind":"struct"},"17:0:2978":{"crate_id":17,"path":["object"],"kind":"module"},"2:3672:2263":{"crate_id":2,"path":["core","ops","index","Index"],"kind":"trait"},"2:46603:5365":{"crate_id":2,"path":["core","char","convert","ParseCharError"],"kind":"struct"},"2:49993:5479":{"crate_id":2,"path":["core","str","iter","Matches"],"kind":"struct"},"0:1258:1649":{"crate_id":0,"path":["serde_derive","Deserialize"],"kind":"proc_derive"},"17:12406:7179":{"crate_id":17,"path":["object","macho","DylibReference"],"kind":"struct"},"6:4148:8351":{"crate_id":6,"path":["libc","unix","linux_like","linux","dl_phdr_info"],"kind":"struct"},"24:3869:3423":{"crate_id":24,"path":["syn","token","Move"],"kind":"struct"},"17:9646:63880":{"crate_id":17,"path":["object","read","any","SegmentIteratorInternal"],"kind":"enum"},"24:5731:3146":{"crate_id":24,"path":["syn","expr","ExprBlock"],"kind":"struct"},"12:466:63849":{"crate_id":12,"path":["hashbrown","raw","RawIterHash"],"kind":"struct"},"24:160:4677":{"crate_id":24,"path":["syn","token","private","Sealed"],"kind":"trait"},"21:1258:3371":{"crate_id":21,"path":["proc_macro","bridge","client","SourceFile"],"kind":"struct"},"2:2044:4688":{"crate_id":2,"path":["core","mem","maybe_uninit","write_slice_cloned","Guard"],"kind":"struct"},"1:1431:4584":{"crate_id":1,"path":["std","collections","hash","map","Drain"],"kind":"struct"},"16:5362:5948":{"crate_id":16,"path":["gimli","read","cfi","EhHdrTable"],"kind":"struct"},"2:14148:189":{"crate_id":2,"path":["core","future","pending","Pending"],"kind":"struct"},"17:11474:6987":{"crate_id":17,"path":["object","elf","SectionHeader32"],"kind":"struct"},"16:7090:6124":{"crate_id":16,"path":["gimli","read","pubnames","DebugPubNames"],"kind":"struct"},"6:4067:8312":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_envelope"],"kind":"struct"},"2:49765:5468":{"crate_id":2,"path":["core","str","iter","CharIndices"],"kind":"struct"},"12:2269:4850":{"crate_id":12,"path":["hashbrown","set","OccupiedEntry"],"kind":"struct"},"6:1634:8122":{"crate_id":6,"path":["libc","unix","linux_like","lconv"],"kind":"struct"},"24:4865:3450":{"crate_id":24,"path":["syn","token","DivEq"],"kind":"struct"},"2:50504:5491":{"crate_id":2,"path":["core","str","LinesAnyMap"],"kind":"struct"},"1:10416:4677":{"crate_id":1,"path":["std","sealed","Sealed"],"kind":"trait"},"1:15170:4767":{"crate_id":1,"path":["std","sys_common","net","LookupHost"],"kind":"struct"},"1:5505:4743":{"crate_id":1,"path":["std","os","unix","fs","PermissionsExt"],"kind":"trait"},"21:2804:6439":{"crate_id":21,"path":["proc_macro","diagnostic","Children"],"kind":"struct"},"16:7449:6066":{"crate_id":16,"path":["gimli","read","unit","DebuggingInformationEntry"],"kind":"struct"},"2:10563:110":{"crate_id":2,"path":["core","fmt","Debug"],"kind":"trait"},"17:11579:7010":{"crate_id":17,"path":["object","elf","Syminfo32"],"kind":"struct"},"17:13037:7358":{"crate_id":17,"path":["object","pe","ImageOptionalHeader32"],"kind":"struct"},"9:776:5792":{"crate_id":9,"path":["miniz_oxide","deflate","CompressionLevel"],"kind":"enum"},"12:1121:4850":{"crate_id":12,"path":["hashbrown","map","OccupiedEntry"],"kind":"struct"},"9:0:2971":{"crate_id":9,"path":["miniz_oxide"],"kind":"module"},"2:53809:9061":{"crate_id":2,"path":["core","core_arch","x86","__m256bh"],"kind":"struct"},"17:10545:48179":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCacheImageIterator"],"kind":"struct"},"2:47320:8977":{"crate_id":2,"path":["core","iter","sources","repeat_with","RepeatWith"],"kind":"struct"},"1:15898:3011":{"crate_id":1,"path":["std","i64"],"kind":"primitive"},"17:13785:7582":{"crate_id":17,"path":["object","pe","ImageRuntimeFunctionEntry"],"kind":"struct"},"1:10517:4820":{"crate_id":1,"path":["std","collections","hash","map","RandomState"],"kind":"struct"},"12:880:4582":{"crate_id":12,"path":["hashbrown","map","DrainFilter"],"kind":"struct"},"17:10445:6811":{"crate_id":17,"path":["object","read","elf","note","Note"],"kind":"struct"},"16:7355:6058":{"crate_id":16,"path":["gimli","read","unit","DebugInfo"],"kind":"struct"},"16:7141:6129":{"crate_id":16,"path":["gimli","read","rnglists","DebugRanges"],"kind":"struct"},"5:3110:3424":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Mut"],"kind":"struct"},"1:5738:5056":{"crate_id":1,"path":["std","os","unix","net","ancillary","ScmCredentials"],"kind":"struct"},"24:3833:2483":{"crate_id":24,"path":["syn","token","Match"],"kind":"struct"},"5:1719:4841":{"crate_id":5,"path":["alloc","collections","btree","map","ValuesMut"],"kind":"struct"},"2:49607:5455":{"crate_id":2,"path":["core","slice","iter","ChunksExactMut"],"kind":"struct"},"21:2725:3374":{"crate_id":21,"path":["proc_macro","bridge","Diagnostic"],"kind":"struct"},"1:10665:4757":{"crate_id":1,"path":["std","fs","Permissions"],"kind":"struct"},"16:7415:6077":{"crate_id":16,"path":["gimli","read","unit","UnitHeader"],"kind":"struct"},"24:2132:6442":{"crate_id":24,"path":["syn","ext","IdentExt"],"kind":"trait"},"6:5301:8573":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_mmap_hdr"],"kind":"struct"},"17:12469:7188":{"crate_id":17,"path":["object","macho","RpathCommand"],"kind":"struct"},"24:3136:9569":{"crate_id":24,"path":["syn","print","TokensOrDefault"],"kind":"struct"},"2:8197:5108":{"crate_id":2,"path":["core","iter","range","Step"],"kind":"trait"},"16:6482:6257":{"crate_id":16,"path":["gimli","read","lists","ListsHeader"],"kind":"struct"},"24:3977:208":{"crate_id":24,"path":["syn","token","Return"],"kind":"struct"},"6:4526:8482":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_txtime"],"kind":"struct"},"5:1626:94":{"crate_id":5,"path":["alloc","collections","btree","map","BTreeMap"],"kind":"struct"},"8:0:2970":{"crate_id":8,"path":["cfg_if"],"kind":"module"},"12:472:63851":{"crate_id":12,"path":["hashbrown","raw","RawIterHashInner"],"kind":"struct"},"5:8566:4583":{"crate_id":5,"path":["alloc","vec","splice","Splice"],"kind":"struct"},"16:4573:7662":{"crate_id":16,"path":["gimli","constants","DwLang"],"kind":"struct"},"6:607:8041":{"crate_id":6,"path":["libc","unix","sigval"],"kind":"struct"},"1:2119:3262":{"crate_id":1,"path":["std","collections","hash","set","Iter"],"kind":"struct"},"17:11628:7019":{"crate_id":17,"path":["object","elf","Rel64"],"kind":"struct"},"17:10390:6354":{"crate_id":17,"path":["object","read","elf","relocation","RelocationSections"],"kind":"struct"},"12:1183:5876":{"crate_id":12,"path":["hashbrown","map","KeyOrRef"],"kind":"enum"},"16:5902:6098":{"crate_id":16,"path":["gimli","read","dwarf","Dwarf"],"kind":"struct"},"6:527:7993":{"crate_id":6,"path":["libc","unix","timeval"],"kind":"struct"},"16:3314:5980":{"crate_id":16,"path":["gimli","common","DebugFrameOffset"],"kind":"struct"},"24:2059:3319":{"crate_id":24,"path":["syn","buffer","TokenBuffer"],"kind":"struct"},"17:12282:7142":{"crate_id":17,"path":["object","macho","RoutinesCommand64"],"kind":"struct"},"2:4146:5111":{"crate_id":2,"path":["core","any","Provider"],"kind":"trait"},"2:50169:5141":{"crate_id":2,"path":["core","str","pattern","SearchStep"],"kind":"enum"},"17:10048:48046":{"crate_id":17,"path":["object","read","coff","file","CoffCommon"],"kind":"struct"},"24:5017:3460":{"crate_id":24,"path":["syn","token","Lt"],"kind":"struct"},"2:10572:3348":{"crate_id":2,"path":["core","fmt","Octal"],"kind":"trait"},"24:4013:3429":{"crate_id":24,"path":["syn","token","SelfValue"],"kind":"struct"},"18:704:6813":{"crate_id":18,"path":["memchr","memmem","twoway","Forward"],"kind":"struct"},"2:23291:5099":{"crate_id":2,"path":["core","core_simd","masks","mask_impl","Mask"],"kind":"struct"},"24:3581:3411":{"crate_id":24,"path":["syn","token","Do"],"kind":"struct"},"18:621:9186":{"crate_id":18,"path":["memchr","cow","Imp"],"kind":"struct"},"1:13607:4877":{"crate_id":1,"path":["std","sys","unix","pipe","AnonPipe"],"kind":"struct"},"1:2914:4499":{"crate_id":1,"path":["std","fs","read"],"kind":"function"},"24:3383:3405":{"crate_id":24,"path":["syn","token","As"],"kind":"struct"},"2:51631:5235":{"crate_id":2,"path":["core","core_arch","simd","i16x4"],"kind":"struct"},"17:11754:7047":{"crate_id":17,"path":["object","elf","Verneed"],"kind":"struct"},"2:23238:4789":{"crate_id":2,"path":["core","core_simd","lane_count","SupportedLaneCount"],"kind":"trait"},"16:5698:5970":{"crate_id":16,"path":["gimli","read","cfi","UnwindTableRow"],"kind":"struct"},"1:4180:4723":{"crate_id":1,"path":["std","io","stdio","StdinLock"],"kind":"struct"},"6:1531:8062":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreq"],"kind":"struct"},"1:12067:164":{"crate_id":1,"path":["std","sync","mutex","MutexGuard"],"kind":"struct"},"6:3972:8267":{"crate_id":6,"path":["libc","unix","linux_like","linux","packet_mreq"],"kind":"struct"},"5:8232:5673":{"crate_id":5,"path":["alloc","collections","binary_heap","IntoIterSorted"],"kind":"struct"},"1:11409:4905":{"crate_id":1,"path":["std","path","State"],"kind":"enum"},"2:11477:5441":{"crate_id":2,"path":["core","slice","iter","SplitInclusive"],"kind":"struct"},"2:46878:5295":{"crate_id":2,"path":["core","iter","adapters","array_chunks","ArrayChunks"],"kind":"struct"},"16:4381:7657":{"crate_id":16,"path":["gimli","constants","DwDs"],"kind":"struct"},"5:2619:5711":{"crate_id":5,"path":["alloc","collections","btree","node","NodeRef"],"kind":"struct"},"17:11017:128":{"crate_id":17,"path":["object","read","Error"],"kind":"struct"},"16:7247:6090":{"crate_id":16,"path":["gimli","read","rnglists","RawRange"],"kind":"struct"},"1:5154:4981":{"crate_id":1,"path":["std","net","tcp","TcpListener"],"kind":"struct"},"1:10638:4785":{"crate_id":1,"path":["std","fs","Metadata"],"kind":"struct"},"2:46714:5485":{"crate_id":2,"path":["core","char","EscapeDebug"],"kind":"struct"},"24:153:1829":{"crate_id":24,"path":["syn","token","Token"],"kind":"trait"},"17:13515:7496":{"crate_id":17,"path":["object","pe","ImageResourceDirectoryString"],"kind":"struct"},"1:14417:9293":{"crate_id":1,"path":["std","sys","unix","fs","FilePermissions"],"kind":"struct"},"2:25151:5521":{"crate_id":2,"path":["core","num","nonzero","NonZeroIsize"],"kind":"struct"},"2:23435:5223":{"crate_id":2,"path":["core","core_simd","masks","MaskElement"],"kind":"trait"},"2:53081:5270":{"crate_id":2,"path":["core","core_arch","simd","u8x64"],"kind":"struct"},"16:7121:6127":{"crate_id":16,"path":["gimli","read","pubtypes","DebugPubTypes"],"kind":"struct"},"17:13529:7498":{"crate_id":17,"path":["object","pe","ImageResourceDataEntry"],"kind":"struct"},"24:454:64007":{"crate_id":24,"path":["syn","bigint","BigInt"],"kind":"struct"},"16:7768:6064":{"crate_id":16,"path":["gimli","read","unit","DebugTypes"],"kind":"struct"},"21:300:9345":{"crate_id":21,"path":["proc_macro","bridge","fxhash","FxHasher"],"kind":"struct"},"17:12262:7136":{"crate_id":17,"path":["object","macho","RoutinesCommand32"],"kind":"struct"},"17:13539:7501":{"crate_id":17,"path":["object","pe","ImageLoadConfigCodeIntegrity"],"kind":"struct"},"24:3851:3422":{"crate_id":24,"path":["syn","token","Mod"],"kind":"struct"},"2:47916:4479":{"crate_id":2,"path":["core","panicking","AssertKind"],"kind":"enum"},"11:54:5865":{"crate_id":11,"path":["adler","Adler32"],"kind":"struct"},"2:51570:8992":{"crate_id":2,"path":["core","core_arch","simd","u64x1"],"kind":"struct"},"1:11134:1840":{"crate_id":1,"path":["std","net","ip","fmt","Span"],"kind":"struct"},"1:11034:4762":{"crate_id":1,"path":["std","net","addr","SocketAddrV6"],"kind":"struct"},"16:4716:7667":{"crate_id":16,"path":["gimli","constants","DwOrd"],"kind":"struct"},"1:8187:4215":{"crate_id":1,"path":["std","sync","mpsc","sync","Packet"],"kind":"struct"},"1:7062:57712":{"crate_id":1,"path":["std","path","fmt","DebugHelper"],"kind":"struct"},"24:5826:3168":{"crate_id":24,"path":["syn","expr","ExprReturn"],"kind":"struct"},"2:3432:3286":{"crate_id":2,"path":["core","ops","arith","Add"],"kind":"trait"},"24:5814:3165":{"crate_id":24,"path":["syn","expr","ExprRange"],"kind":"struct"},"1:5497:4744":{"crate_id":1,"path":["std","os","unix","fs","FileExt"],"kind":"trait"},"2:10513:3352":{"crate_id":2,"path":["core","fmt","Write"],"kind":"trait"},"1:15881:2997":{"crate_id":1,"path":["std","bool"],"kind":"primitive"},"2:2213:1057":{"crate_id":2,"path":["core","ptr"],"kind":"module"},"24:5969:2459":{"crate_id":24,"path":["syn","generics","TraitBoundModifier"],"kind":"enum"},"24:6382:2138":{"crate_id":24,"path":["syn","path","PathArguments"],"kind":"enum"},"24:4247:3436":{"crate_id":24,"path":["syn","token","Where"],"kind":"struct"},"2:2859:97":{"crate_id":2,"path":["core","borrow","Borrow"],"kind":"trait"},"24:3707:3416":{"crate_id":24,"path":["syn","token","For"],"kind":"struct"},"6:4020:8292":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_id"],"kind":"struct"},"16:4660:7665":{"crate_id":16,"path":["gimli","constants","DwCc"],"kind":"struct"},"6:6135:8769":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_fpstate"],"kind":"struct"},"17:10610:48183":{"crate_id":17,"path":["object","read","macho","file","MachOComdatSectionIterator"],"kind":"struct"},"2:25019:167":{"crate_id":2,"path":["core","num","nonzero","NonZeroI16"],"kind":"struct"},"2:46231:200":{"crate_id":2,"path":["core","ops","range","RangeTo"],"kind":"struct"},"22:158:54534":{"crate_id":22,"path":["proc_macro2","rcvec","RcVecBuilder"],"kind":"struct"},"17:10831:6355":{"crate_id":17,"path":["object","read","macho","symbol","SymbolTable"],"kind":"struct"},"1:1261:144":{"crate_id":1,"path":["std","collections","hash","map","HashMap"],"kind":"struct"},"24:5435:1852":{"crate_id":24,"path":["syn","attr","NestedMeta","Lit"],"kind":"foreign_type"},"6:6856:8862":{"crate_id":6,"path":["libc","unix","linux_like","linux","arch","generic","termios2"],"kind":"struct"},"2:23437:5099":{"crate_id":2,"path":["core","core_simd","masks","Mask"],"kind":"struct"},"2:8022:5181":{"crate_id":2,"path":["core","iter","adapters","zip","TrustedRandomAccessNoCoerce"],"kind":"trait"},"11:46:7902":{"crate_id":11,"path":["adler","algo","U32X4"],"kind":"struct"},"6:5288:8567":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_pktinfo"],"kind":"struct"},"24:916:64109":{"crate_id":24,"path":["syn","generics","TypeParams"],"kind":"struct"},"1:6467:4746":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt"],"kind":"trait"},"1:10719:3318":{"crate_id":1,"path":["std","io","cursor","Cursor"],"kind":"struct"},"2:49911:5448":{"crate_id":2,"path":["core","str","iter","RSplitN"],"kind":"struct"},"24:2975:1846":{"crate_id":24,"path":["syn","parse","Parse"],"kind":"trait"},"21:1301:1840":{"crate_id":21,"path":["proc_macro","bridge","client","Span"],"kind":"struct"},"2:28330:5221":{"crate_id":2,"path":["core","num","wrapping","Wrapping"],"kind":"struct"},"16:4743:7668":{"crate_id":16,"path":["gimli","constants","DwDsc"],"kind":"struct"},"6:3896:8214":{"crate_id":6,"path":["libc","unix","linux_like","linux","passwd"],"kind":"struct"},"18:829:6413":{"crate_id":18,"path":["memchr","memmem","FinderBuilder"],"kind":"struct"},"2:49352:5631":{"crate_id":2,"path":["core","slice","ascii","EscapeByte"],"kind":"struct"},"17:11945:7086":{"crate_id":17,"path":["object","macho","FatArch32"],"kind":"struct"},"1:8863:4888":{"crate_id":1,"path":["std","sync","poison","TryLockError"],"kind":"enum"},"21:2847:3261":{"crate_id":21,"path":["proc_macro","token_stream","IntoIter"],"kind":"struct"},"17:4157:6334":{"crate_id":17,"path":["object","read","macho","relocation","MachORelocationIterator"],"kind":"struct"},"17:13155:7400":{"crate_id":17,"path":["object","pe","Guid"],"kind":"struct"},"17:9206:47974":{"crate_id":17,"path":["object","common","SymbolFlags"],"kind":"enum"},"1:4467:3352":{"crate_id":1,"path":["std","io","Write"],"kind":"trait"},"22:931:1840":{"crate_id":22,"path":["proc_macro2","imp","Span"],"kind":"enum"},"24:5186:3472":{"crate_id":24,"path":["syn","token","FatArrow"],"kind":"struct"},"2:49670:5458":{"crate_id":2,"path":["core","slice","iter","RChunks"],"kind":"struct"},"2:24332:5347":{"crate_id":2,"path":["core","num","dec2flt","common","BiasedFp"],"kind":"struct"},"24:4103:229":{"crate_id":24,"path":["syn","token","Try"],"kind":"struct"},"2:51901:5248":{"crate_id":2,"path":["core","core_arch","simd","i8x16"],"kind":"struct"},"24:6110:1781":{"crate_id":24,"path":["syn","derive","Data"],"kind":"enum"},"24:3563:116":{"crate_id":24,"path":["syn","token","Default"],"kind":"struct"},"9:963:5810":{"crate_id":9,"path":["miniz_oxide","MZFlush"],"kind":"enum"},"24:3509:2156":{"crate_id":24,"path":["syn","token","Const"],"kind":"struct"},"24:2152:6799":{"crate_id":24,"path":["syn","ext","private","PeekFn"],"kind":"struct"},"22:1071:2484":{"crate_id":22,"path":["proc_macro2","Literal"],"kind":"struct"},"1:1601:4851":{"crate_id":1,"path":["std","collections","hash","map","VacantEntry"],"kind":"struct"},"16:2959:6226":{"crate_id":16,"path":["gimli","common","DebugLineStrOffset"],"kind":"struct"},"17:9087:47972":{"crate_id":17,"path":["object","common","RelocationKind"],"kind":"enum"},"6:5439:8648":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_seccomp"],"kind":"struct"},"24:4067:3430":{"crate_id":24,"path":["syn","token","Super"],"kind":"struct"},"6:4055:8307":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_replay"],"kind":"struct"},"21:1431:193":{"crate_id":21,"path":["proc_macro","bridge","client","ProcMacro"],"kind":"enum"},"2:9534:3700":{"crate_id":2,"path":["core","panic","unwind_safe","RefUnwindSafe"],"kind":"trait"},"6:5567:8686":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","msqid_ds"],"kind":"struct"},"24:4686:3438":{"crate_id":24,"path":["syn","token","AddEq"],"kind":"struct"},"2:52045:5228":{"crate_id":2,"path":["core","core_arch","simd","f64x2"],"kind":"struct"},"24:6350:3206":{"crate_id":24,"path":["syn","ty","TypeSlice"],"kind":"struct"},"17:13404:7460":{"crate_id":17,"path":["object","pe","ImageExportDirectory"],"kind":"struct"},"6:6153:8780":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user_regs_struct"],"kind":"struct"},"2:10574:2256":{"crate_id":2,"path":["core","fmt","Binary"],"kind":"trait"},"2:46363:5194":{"crate_id":2,"path":["core","any","tags","MaybeSizedValue"],"kind":"struct"},"1:10443:4212":{"crate_id":1,"path":["std","thread","ThreadId"],"kind":"struct"},"2:21:676":{"crate_id":2,"path":["core","format_args"],"kind":"macro"},"1:13744:4867":{"crate_id":1,"path":["std","sys","unix","process","process_common","Command"],"kind":"struct"},"16:3243:6233":{"crate_id":16,"path":["gimli","common","DebugStrOffsetsIndex"],"kind":"struct"},"6:4386:8425":{"crate_id":6,"path":["libc","unix","linux_like","linux","can_filter"],"kind":"struct"},"2:2181:583":{"crate_id":2,"path":["core","mem","drop"],"kind":"function"},"6:5419:8642":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ptrace_peeksiginfo_args"],"kind":"struct"},"17:13281:7430":{"crate_id":17,"path":["object","pe","ImageAuxSymbolTokenDef"],"kind":"struct"},"16:6717:6118":{"crate_id":16,"path":["gimli","read","op","Operation"],"kind":"enum"},"16:5412:5953":{"crate_id":16,"path":["gimli","read","cfi","BaseAddresses"],"kind":"struct"},"16:5498:5958":{"crate_id":16,"path":["gimli","read","cfi","Augmentation"],"kind":"struct"},"1:2359:13070":{"crate_id":1,"path":["std","env","Vars"],"kind":"struct"},"2:48859:108":{"crate_id":2,"path":["core","fmt","rt","v1","Count"],"kind":"enum"},"1:1387:3266":{"crate_id":1,"path":["std","collections","hash","map","IterMut"],"kind":"struct"},"1:0:1344":{"crate_id":1,"path":["std"],"kind":"module"},"5:3960:5683":{"crate_id":5,"path":["alloc","collections","linked_list","CursorMut"],"kind":"struct"},"9:41:5795":{"crate_id":9,"path":["miniz_oxide","deflate","buffer","LocalBuf"],"kind":"struct"},"5:5861:6646":{"crate_id":5,"path":["alloc","slice","hack","to_vec","DropGuard"],"kind":"struct"},"17:13421:7467":{"crate_id":17,"path":["object","pe","ImageImportByName"],"kind":"struct"},"6:5204:8530":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__exit_status"],"kind":"struct"},"1:10228:9560":{"crate_id":1,"path":["std","backtrace_rs","symbolize","SymbolName"],"kind":"struct"},"1:15904:3017":{"crate_id":1,"path":["std","u128"],"kind":"primitive"},"2:8742:3385":{"crate_id":2,"path":["core","iter","traits","exact_size","ExactSizeIterator"],"kind":"trait"},"2:50520:5499":{"crate_id":2,"path":["core","str","IsWhitespace"],"kind":"struct"},"1:9526:4977":{"crate_id":1,"path":["std","sys_common","remutex","ReentrantMutexGuard"],"kind":"struct"},"6:1912:42087":{"crate_id":6,"path":["libc","unix","linux_like","linux","fpos64_t"],"kind":"enum"},"5:8436:5679":{"crate_id":5,"path":["alloc","ffi","c_str","FromVecWithNulError"],"kind":"struct"},"17:10253:6306":{"crate_id":17,"path":["object","read","elf","segment","ElfSegment"],"kind":"struct"},"17:12758:7237":{"crate_id":17,"path":["object","macho","RelocationInfo"],"kind":"struct"},"24:4790:3445":{"crate_id":24,"path":["syn","token","CaretEq"],"kind":"struct"},"22:855:1840":{"crate_id":22,"path":["proc_macro2","fallback","Span"],"kind":"struct"},"17:13794:7584":{"crate_id":17,"path":["object","pe","ImageEnclaveConfig32"],"kind":"struct"},"24:5431:1851":{"crate_id":24,"path":["syn","attr","NestedMeta"],"kind":"enum"},"2:46588:3363":{"crate_id":2,"path":["core","ascii","EscapeDefault"],"kind":"struct"},"1:15907:3020":{"crate_id":1,"path":["std","reference"],"kind":"primitive"},"17:13612:7520":{"crate_id":17,"path":["object","pe","ImageLoadConfigDirectory32"],"kind":"struct"},"17:12921:7266":{"crate_id":17,"path":["object","pe","ImageOs2Header"],"kind":"struct"},"24:0:1628":{"crate_id":24,"path":["syn"],"kind":"module"},"24:2448:3266":{"crate_id":24,"path":["syn","punctuated","IterMut"],"kind":"struct"},"24:3263:3262":{"crate_id":24,"path":["syn","error","Iter"],"kind":"struct"},"24:5802:3163":{"crate_id":24,"path":["syn","expr","ExprMethodCall"],"kind":"struct"},"17:10851:6944":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbolTable"],"kind":"struct"},"1:12077:213":{"crate_id":1,"path":["std","sync","rwlock","RwLockReadGuard"],"kind":"struct"},"16:6407:6110":{"crate_id":16,"path":["gimli","read","line","CompleteLineProgram"],"kind":"struct"},"16:6604:6116":{"crate_id":16,"path":["gimli","read","loclists","LocationListEntry"],"kind":"struct"},"12:1256:4852":{"crate_id":12,"path":["hashbrown","map","OccupiedError"],"kind":"struct"},"1:1489:4848":{"crate_id":1,"path":["std","collections","hash","map","RawEntryBuilder"],"kind":"struct"},"6:4277:8368":{"crate_id":6,"path":["libc","unix","linux_like","linux","mntent"],"kind":"struct"},"24:4739:3442":{"crate_id":24,"path":["syn","token","At"],"kind":"struct"},"2:46667:5486":{"crate_id":2,"path":["core","char","EscapeUnicode"],"kind":"struct"},"17:13247:7427":{"crate_id":17,"path":["object","pe","ImageSymbolBytes"],"kind":"struct"},"1:8217:5682":{"crate_id":1,"path":["std","sync","mpsc","sync","Node"],"kind":"struct"},"17:13306:7439":{"crate_id":17,"path":["object","pe","ImageAuxSymbolFunctionBeginEnd"],"kind":"struct"},"17:11494:6997":{"crate_id":17,"path":["object","elf","SectionHeader64"],"kind":"struct"},"22:950:1776":{"crate_id":22,"path":["proc_macro2","imp","Ident"],"kind":"enum"},"2:3174:136":{"crate_id":2,"path":["core","convert","From"],"kind":"trait"},"2:49518:5446":{"crate_id":2,"path":["core","slice","iter","GenericSplitN"],"kind":"struct"},"15:248:5897":{"crate_id":15,"path":["addr2line","LocationRangeUnitIter"],"kind":"struct"},"17:13293:7433":{"crate_id":17,"path":["object","pe","ImageAuxSymbolFunction"],"kind":"struct"},"12:1162:5875":{"crate_id":12,"path":["hashbrown","map","EntryRef"],"kind":"enum"},"24:3671:3415":{"crate_id":24,"path":["syn","token","Final"],"kind":"struct"},"17:10586:48181":{"crate_id":17,"path":["object","read","macho","file","MachOComdatIterator"],"kind":"struct"},"17:12660:7222":{"crate_id":17,"path":["object","macho","EntryPointCommand"],"kind":"struct"},"2:46415:5378":{"crate_id":2,"path":["core","array","TryFromSliceError"],"kind":"struct"},"5:8217:4472":{"crate_id":5,"path":["alloc","alloc","Global"],"kind":"struct"},"24:2977:1847":{"crate_id":24,"path":["syn","parse","ParseStream"],"kind":"typedef"},"6:4516:8477":{"crate_id":6,"path":["libc","unix","linux_like","linux","mq_attr"],"kind":"struct"},"16:5348:5947":{"crate_id":16,"path":["gimli","read","cfi","ParsedEhFrameHdr"],"kind":"struct"},"16:6931:6271":{"crate_id":16,"path":["gimli","read","op","EvaluationState"],"kind":"enum"},"6:5240:8543":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","cmsghdr"],"kind":"struct"},"6:4061:8309":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_trigger"],"kind":"struct"},"6:4048:8304":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_mask"],"kind":"struct"},"24:3210:207":{"crate_id":24,"path":["syn","error","Result"],"kind":"typedef"},"21:2894:1840":{"crate_id":21,"path":["proc_macro","Span"],"kind":"struct"},"1:11341:3689":{"crate_id":1,"path":["std","panic","BacktraceStyle"],"kind":"enum"},"17:13908:7618":{"crate_id":17,"path":["object","pe","ImageFunctionEntry64"],"kind":"struct"},"1:7484:4867":{"crate_id":1,"path":["std","process","Command"],"kind":"struct"},"16:4689:7666":{"crate_id":16,"path":["gimli","constants","DwInl"],"kind":"struct"},"16:5639:5963":{"crate_id":16,"path":["gimli","read","cfi","UninitializedUnwindContext"],"kind":"struct"},"16:5869:191":{"crate_id":16,"path":["gimli","read","cfi","Pointer"],"kind":"enum"},"2:49597:5454":{"crate_id":2,"path":["core","slice","iter","ChunksExact"],"kind":"struct"}},"external_crates":{"5":{"name":"alloc","html_root_url":"https://doc.rust-lang.org/nightly/"},"7":{"name":"unwind","html_root_url":"https://doc.rust-lang.org/nightly/"},"24":{"name":"syn","html_root_url":"https://docs.rs/syn/1.0.99/"},"3":{"name":"compiler_builtins","html_root_url":"https://doc.rust-lang.org/nightly/"},"21":{"name":"proc_macro","html_root_url":"https://doc.rust-lang.org/nightly/"},"11":{"name":"adler","html_root_url":"https://docs.rs/adler/0.2.3/"},"6":{"name":"libc","html_root_url":"https://doc.rust-lang.org/nightly/"},"17":{"name":"object","html_root_url":"https://doc.rust-lang.org/nightly/"},"13":{"name":"std_detect","html_root_url":"https://doc.rust-lang.org/nightly/"},"10":{"name":"rustc_std_workspace_alloc","html_root_url":"https://doc.rust-lang.org/nightly/"},"4":{"name":"rustc_std_workspace_core","html_root_url":"https://doc.rust-lang.org/nightly/"},"1":{"name":"std","html_root_url":"https://doc.rust-lang.org/nightly/"},"15":{"name":"addr2line","html_root_url":"https://doc.rust-lang.org/nightly/"},"12":{"name":"hashbrown","html_root_url":"https://doc.rust-lang.org/nightly/"},"9":{"name":"miniz_oxide","html_root_url":"https://doc.rust-lang.org/nightly/"},"18":{"name":"memchr","html_root_url":"https://doc.rust-lang.org/nightly/"},"20":{"name":"quote","html_root_url":"https://docs.rs/quote/1.0.21/"},"22":{"name":"proc_macro2","html_root_url":"https://docs.rs/proc-macro2/1.0.43/"},"19":{"name":"panic_unwind","html_root_url":"https://doc.rust-lang.org/nightly/"},"8":{"name":"cfg_if","html_root_url":"https://docs.rs/cfg-if/"},"16":{"name":"gimli","html_root_url":"https://doc.rust-lang.org/nightly/"},"2":{"name":"core","html_root_url":"https://doc.rust-lang.org/nightly/"},"14":{"name":"rustc_demangle","html_root_url":"https://doc.rust-lang.org/nightly/"},"23":{"name":"unicode_ident","html_root_url":null}},"format_version":21}