{"root":"0:0:1677","crate_version":"1.0.160","includes_private":false,"index":{"2:11877:32999":{"id":"2:11877:32999","crate_id":2,"name":"split_whitespace","span":null,"visibility":"public","docs":"Splits a string slice by whitespace.\n\nThe iterator returned will return string slices that are sub-slices of\nthe original string slice, separated by any amount of whitespace.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`. If you only want to split on ASCII whitespace\ninstead, use [`split_ascii_whitespace`].\n\n[`split_ascii_whitespace`]: str::split_ascii_whitespace\n\n# Examples\n\nBasic usage:\n\n```\nlet mut iter = \"A few words\".split_whitespace();\n\nassert_eq!(Some(\"A\"), iter.next());\nassert_eq!(Some(\"few\"), iter.next());\nassert_eq!(Some(\"words\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nAll kinds of whitespace are considered:\n\n```\nlet mut iter = \" Mary   had\\ta\\u{2009}little  \\n\\t lamb\".split_whitespace();\nassert_eq!(Some(\"Mary\"), iter.next());\nassert_eq!(Some(\"had\"), iter.next());\nassert_eq!(Some(\"a\"), iter.next());\nassert_eq!(Some(\"little\"), iter.next());\nassert_eq!(Some(\"lamb\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nIf the string is empty or all whitespace, the iterator yields no string slices:\n```\nassert_eq!(\"\".split_whitespace().next(), None);\nassert_eq!(\"   \".split_whitespace().next(), None);\n```","links":{"str::split_ascii_whitespace":"2:11878:33003"},"attrs":["#[must_use =\n\"this returns the split string as an iterator, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_split_whitespace\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"SplitWhitespace","id":"2:42924:8190","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:928:1671":{"id":"0:928:1671","crate_id":0,"name":"Deserialize","span":{"filename":"src/lib.rs","begin":[100,0],"end":[105,1]},"visibility":"public","docs":null,"links":{},"attrs":["#[proc_macro_derive(Deserialize, attributes(serde))]"],"deprecation":null,"kind":"proc_macro","inner":{"kind":"derive","helpers":["serde"]}},"2:11938:35799":{"id":"2:11938:35799","crate_id":2,"name":"trim","span":null,"visibility":"public","docs":"Returns a string slice with leading and trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\n\nassert_eq!(\"Hello\\tworld\", s.trim());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a slice, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_trim\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11888:30212":{"id":"2:11888:30212","crate_id":2,"name":"ends_with","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a suffix of this\nstring slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nBasic usage:\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.ends_with(\"anas\"));\nassert!(!bananas.ends_with(\"nana\"));\n```","links":{"prim@char":"1:11896:412","self::pattern":"2:11551:14110"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11556:14107","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"2:11556:14107","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11571:14108","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:84-0:956:1874":{"id":"0:84-0:956:1874","crate_id":0,"name":null,"span":{"filename":"src/internals/attr.rs","begin":[22,0],"end":[22,36]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"import","inner":{"source":"internals::case::RenameRule","name":"RenameRule","id":"0:956:1874","glob":false}},"2:11850:802":{"id":"2:11850:802","crate_id":2,"name":"len","span":null,"visibility":"public","docs":"Returns the length of `self`.\n\nThis length is in bytes, not [`char`]s or graphemes. In other words,\nit might not be what a human considers the length of the string.\n\n[`char`]: prim@char\n\n# Examples\n\nBasic usage:\n\n```\nlet len = \"foo\".len();\nassert_eq!(3, len);\n\nassert_eq!(\"ƒoo\".len(), 4); // fancy f!\nassert_eq!(\"ƒoo\".chars().count(), 3);\n```","links":{"prim@char":"1:11896:412"},"attrs":["#[must_use]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11935:35798":{"id":"2:11935:35798","crate_id":2,"name":"rmatch_indices","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within `self`,\nyielded in reverse order along with the index of the match.\n\nFor matches of `pat` within `self` that overlap, only the indices\ncorresponding to the last match are returned.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`match_indices`] method can be used.\n\n[`match_indices`]: str::match_indices\n\n# Examples\n\nBasic usage:\n\n```\nlet v: Vec<_> = \"abcXXXabcYYYabc\".rmatch_indices(\"abc\").collect();\nassert_eq!(v, [(12, \"abc\"), (6, \"abc\"), (0, \"abc\")]);\n\nlet v: Vec<_> = \"1abcabc2\".rmatch_indices(\"abc\").collect();\nassert_eq!(v, [(4, \"abc\"), (1, \"abc\")]);\n\nlet v: Vec<_> = \"ababa\".rmatch_indices(\"aba\").collect();\nassert_eq!(v, [(2, \"aba\")]); // only the last `aba`\n```","links":{"self::pattern":"2:11551:14110","`DoubleEndedIterator`":"2:7173:120","prim@char":"1:11896:412","str::match_indices":"2:11932:35797"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"RMatchIndices","id":"2:42818:8184","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11556:14107","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"2:11556:14107","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11571:14108","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11859:35788":{"id":"2:11859:35788","crate_id":2,"name":"as_bytes_mut","span":null,"visibility":"public","docs":"Converts a mutable string slice to a mutable byte slice.\n\n# Safety\n\nThe caller must ensure that the content of the slice is valid UTF-8\nbefore the borrow ends and the underlying `str` is used.\n\nUse of a `str` whose contents are not valid UTF-8 is undefined behavior.\n\n# Examples\n\nBasic usage:\n\n```\nlet mut s = String::from(\"Hello\");\nlet bytes = unsafe { s.as_bytes_mut() };\n\nassert_eq!(b\"Hello\", bytes);\n```\n\nMutability:\n\n```\nlet mut s = String::from(\"🗻∈🌏\");\n\nunsafe {\n    let bytes = s.as_bytes_mut();\n\n    bytes[0] = 0xF0;\n    bytes[1] = 0x9F;\n    bytes[2] = 0x8D;\n    bytes[3] = 0x94;\n}\n\nassert_eq!(\"🍔∈🌏\", s);\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"slice","inner":{"kind":"primitive","inner":"u8"}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}},"2:11852:35785":{"id":"2:11852:35785","crate_id":2,"name":"is_char_boundary","span":null,"visibility":"public","docs":"Checks that `index`-th byte is the first byte in a UTF-8 code point\nsequence or the end of the string.\n\nThe start and end of the string (when `index == self.len()`) are\nconsidered to be boundaries.\n\nReturns `false` if `index` is greater than `self.len()`.\n\n# Examples\n\n```\nlet s = \"Löwe 老虎 Léopard\";\nassert!(s.is_char_boundary(0));\n// start of `老`\nassert!(s.is_char_boundary(6));\nassert!(s.is_char_boundary(s.len()));\n\n// second byte of `ö`\nassert!(!s.is_char_boundary(2));\n\n// third byte of `老`\nassert!(!s.is_char_boundary(8));\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["index",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"5:5324:36455":{"id":"5:5324:36455","crate_id":5,"name":"into_boxed_bytes","span":null,"visibility":"public","docs":"Converts a `Box<str>` into a `Box<[u8]>` without copying or allocating.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"this is a string\";\nlet boxed_str = s.to_owned().into_boxed_str();\nlet boxed_bytes = boxed_str.into_boxed_bytes();\nassert_eq!(*boxed_bytes, *s.as_bytes());\n```","links":{},"attrs":["#[must_use = \"`self` will be dropped if the result is not used\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"resolved_path","inner":{"name":"Box","id":"5:286:1847","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}},{"type":{"kind":"resolved_path","inner":{"name":"Global","id":"5:6939:4422","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}]],"output":{"kind":"resolved_path","inner":{"name":"Box","id":"5:286:1847","args":{"angle_bracketed":{"args":[{"type":{"kind":"slice","inner":{"kind":"primitive","inner":"u8"}}},{"type":{"kind":"resolved_path","inner":{"name":"Global","id":"5:6939:4422","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11911:35793":{"id":"2:11911:35793","crate_id":2,"name":"rsplit_terminator","span":null,"visibility":"public","docs":"An iterator over substrings of `self`, separated by characters\nmatched by a pattern and yielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\nEquivalent to [`split`], except that the trailing substring is\nskipped if empty.\n\n[`split`]: str::split\n\nThis method can be used for string data that is _terminated_,\nrather than _separated_ by a pattern.\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a\nreverse search, and it will be double ended if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`split_terminator`] method can be\nused.\n\n[`split_terminator`]: str::split_terminator\n\n# Examples\n\n```\nlet v: Vec<&str> = \"A.B.\".rsplit_terminator('.').collect();\nassert_eq!(v, [\"B\", \"A\"]);\n\nlet v: Vec<&str> = \"A..B..\".rsplit_terminator(\".\").collect();\nassert_eq!(v, [\"\", \"B\", \"\", \"A\"]);\n\nlet v: Vec<&str> = \"A.B:C.D\".rsplit_terminator(&['.', ':'][..]).collect();\nassert_eq!(v, [\"D\", \"C\", \"B\", \"A\"]);\n```","links":{"self::pattern":"2:11551:14110","str::split":"2:11899:28613","prim@char":"1:11896:412","str::split_terminator":"2:11908:35792"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"RSplitTerminator","id":"2:42718:8178","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11556:14107","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"2:11556:14107","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11571:14108","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11908:35792":{"id":"2:11908:35792","crate_id":2,"name":"split_terminator","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by\ncharacters matched by a pattern.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\nEquivalent to [`split`], except that the trailing substring\nis skipped if empty.\n\n[`split`]: str::split\n\nThis method can be used for string data that is _terminated_,\nrather than _separated_ by a pattern.\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rsplit_terminator`] method can be used.\n\n[`rsplit_terminator`]: str::rsplit_terminator\n\n# Examples\n\nBasic usage:\n\n```\nlet v: Vec<&str> = \"A.B.\".split_terminator('.').collect();\nassert_eq!(v, [\"A\", \"B\"]);\n\nlet v: Vec<&str> = \"A..B..\".split_terminator(\".\").collect();\nassert_eq!(v, [\"A\", \"\", \"B\", \"\"]);\n\nlet v: Vec<&str> = \"A.B:C.D\".split_terminator(&['.', ':'][..]).collect();\nassert_eq!(v, [\"A\", \"B\", \"C\", \"D\"]);\n```","links":{"self::pattern":"2:11551:14110","str::split":"2:11899:28613","prim@char":"1:11896:412","`DoubleEndedIterator`":"2:7173:120","str::rsplit_terminator":"2:11911:35793"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"SplitTerminator","id":"2:42700:8177","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11556:14107","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11976:35809":{"id":"2:11976:35809","crate_id":2,"name":"escape_unicode","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_unicode`].\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"❤\\n!\".escape_unicode() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"❤\\n!\".escape_unicode());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"\\\\u{{2764}}\\\\u{{a}}\\\\u{{21}}\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"❤\\n!\".escape_unicode().to_string(), \"\\\\u{2764}\\\\u{a}\\\\u{21}\");\n```","links":{"`char::escape_unicode`":"2:4511:35809"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"EscapeUnicode","id":"2:42967:8129","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"5:5325:2027":{"id":"5:5325:2027","crate_id":5,"name":"replace","span":null,"visibility":"public","docs":"Replaces all matches of a pattern with another string.\n\n`replace` creates a new [`String`], and copies the data from this string slice into it.\nWhile doing so, it attempts to find matches of a pattern. If it finds any, it\nreplaces them with the replacement string slice.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"this is old\";\n\nassert_eq!(\"this is new\", s.replace(\"old\", \"new\"));\nassert_eq!(\"than an old\", s.replace(\"is\", \"an\"));\n```\n\nWhen the pattern doesn't match, it returns this string slice as [`String`]:\n\n```\nlet s = \"this is old\";\nassert_eq!(s, s.replace(\"cookie monster\", \"little lamb\"));\n```","links":{"`String`":"5:7192:222"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the replaced string as a new allocation, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["from",{"kind":"generic","inner":"P"}],["to",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:7192:222","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11556:14107","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11875:2310":{"id":"2:11875:2310","crate_id":2,"name":"char_indices","span":null,"visibility":"public","docs":"Returns an iterator over the [`char`]s of a string slice, and their\npositions.\n\nAs a string slice consists of valid UTF-8, we can iterate through a\nstring slice by [`char`]. This method returns an iterator of both\nthese [`char`]s, as well as their byte positions.\n\nThe iterator yields tuples. The position is first, the [`char`] is\nsecond.\n\n# Examples\n\nBasic usage:\n\n```\nlet word = \"goodbye\";\n\nlet count = word.char_indices().count();\nassert_eq!(7, count);\n\nlet mut char_indices = word.char_indices();\n\nassert_eq!(Some((0, 'g')), char_indices.next());\nassert_eq!(Some((1, 'o')), char_indices.next());\nassert_eq!(Some((2, 'o')), char_indices.next());\nassert_eq!(Some((3, 'd')), char_indices.next());\nassert_eq!(Some((4, 'b')), char_indices.next());\nassert_eq!(Some((5, 'y')), char_indices.next());\nassert_eq!(Some((6, 'e')), char_indices.next());\n\nassert_eq!(None, char_indices.next());\n```\n\nRemember, [`char`]s might not match your intuition about characters:\n\n[`char`]: prim@char\n\n```\nlet yes = \"y̆es\";\n\nlet mut char_indices = yes.char_indices();\n\nassert_eq!(Some((0, 'y')), char_indices.next()); // not (0, 'y̆')\nassert_eq!(Some((1, '\\u{0306}')), char_indices.next());\n\n// note the 3 here - the last character took up two bytes\nassert_eq!(Some((3, 'e')), char_indices.next());\nassert_eq!(Some((4, 's')), char_indices.next());\n\nassert_eq!(None, char_indices.next());\n```","links":{"prim@char":"1:11896:412"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"CharIndices","id":"2:42626:8172","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:0:1677":{"id":"0:0:1677","crate_id":0,"name":"serde_derive","span":{"filename":"src/lib.rs","begin":[1,0],"end":[110,1]},"visibility":"public","docs":"This crate provides Serde's two derive macros.\n\n```edition2018\n# use serde_derive::{Serialize, Deserialize};\n#\n#[derive(Serialize, Deserialize)]\n# struct S;\n#\n# fn main() {}\n```\n\nPlease refer to [https://serde.rs/derive.html] for how to set this up.\n\n[https://serde.rs/derive.html]: https://serde.rs/derive.html","links":{},"attrs":["#![doc(html_root_url = \"https://docs.rs/serde_derive/1.0.160\")]","#![allow(unknown_lints, bare_trait_objects)]","#![allow(clippy :: branches_sharing_code, clippy :: cognitive_complexity,\nclippy :: collapsible_match, clippy :: derive_partial_eq_without_eq, clippy ::\nenum_variant_names, clippy :: manual_map, clippy :: match_like_matches_macro,\nclippy :: needless_pass_by_value, clippy :: too_many_arguments, clippy ::\ntrivially_copy_pass_by_ref, clippy :: used_underscore_binding, clippy ::\nwildcard_in_or_patterns, clippy :: unnested_or_patterns,)]","#![allow(clippy :: cast_possible_truncation, clippy :: checked_conversions,\nclippy :: doc_markdown, clippy :: enum_glob_use, clippy :: indexing_slicing,\nclippy :: items_after_statements, clippy :: let_underscore_untyped, clippy ::\nmanual_assert, clippy :: map_err_ignore, clippy :: match_same_arms, clippy ::\nmatch_wildcard_for_single_variants, clippy :: module_name_repetitions, clippy\n:: must_use_candidate, clippy :: option_if_let_else, clippy :: similar_names,\nclippy :: single_match_else, clippy :: struct_excessive_bools, clippy ::\ntoo_many_lines, clippy :: unseparated_literal_suffix, clippy :: unused_self,\nclippy :: use_self, clippy :: wildcard_imports)]"],"deprecation":null,"kind":"module","inner":{"is_crate":true,"items":["0:927:1662","0:928:1671"],"is_stripped":false}},"2:11969:4405":{"id":"2:11969:4405","crate_id":2,"name":"is_ascii","span":null,"visibility":"public","docs":"Checks if all characters in this string are within the ASCII range.\n\n# Examples\n\n```\nlet ascii = \"hello!\\n\";\nlet non_ascii = \"Grüße, Jürgen ❤\";\n\nassert!(ascii.is_ascii());\nassert!(!non_ascii.is_ascii());\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11971:4407":{"id":"2:11971:4407","crate_id":2,"name":"make_ascii_uppercase","span":null,"visibility":"public","docs":"Converts this string to its ASCII upper case equivalent in-place.\n\nASCII letters 'a' to 'z' are mapped to 'A' to 'Z',\nbut non-ASCII letters are unchanged.\n\nTo return a new uppercased value without modifying the existing one, use\n[`to_ascii_uppercase()`].\n\n[`to_ascii_uppercase()`]: #method.to_ascii_uppercase\n\n# Examples\n\n```\nlet mut s = String::from(\"Grüße, Jürgen ❤\");\n\ns.make_ascii_uppercase();\n\nassert_eq!(\"GRüßE, JüRGEN ❤\", s);\n```","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11853:35786":{"id":"2:11853:35786","crate_id":2,"name":"floor_char_boundary","span":null,"visibility":"public","docs":"Finds the closest `x` not exceeding `index` where `is_char_boundary(x)` is `true`.\n\nThis method can help you truncate a string so that it's still valid UTF-8, but doesn't\nexceed a given number of bytes. Note that this is done purely at the character level\nand can still visually split graphemes, even though the underlying characters aren't\nsplit. For example, the emoji 🧑‍🔬 (scientist) could be split so that the string only\nincludes 🧑 (person) instead.\n\n# Examples\n\n```\n#![feature(round_char_boundary)]\nlet s = \"❤️🧡💛💚💙💜\";\nassert_eq!(s.len(), 26);\nassert!(!s.is_char_boundary(13));\n\nlet closest = s.floor_char_boundary(13);\nassert_eq!(closest, 10);\nassert_eq!(&s[..closest], \"❤️🧡\");\n```","links":{},"attrs":["#[unstable(feature = \"round_char_boundary\", issue = \"93743\")]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["index",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"primitive","inner":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11952:25909":{"id":"2:11952:25909","crate_id":2,"name":"strip_prefix","span":null,"visibility":"public","docs":"Returns a string slice with the prefix removed.\n\nIf the string starts with the pattern `prefix`, returns substring after the prefix, wrapped\nin `Some`.  Unlike `trim_start_matches`, this method removes the prefix exactly once.\n\nIf the string does not start with `prefix`, returns `None`.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nassert_eq!(\"foo:bar\".strip_prefix(\"foo:\"), Some(\"bar\"));\nassert_eq!(\"foo:bar\".strip_prefix(\"bar\"), None);\nassert_eq!(\"foofoo\".strip_prefix(\"foo\"), Some(\"foo\"));\n```","links":{"prim@char":"1:11896:412","self::pattern":"2:11551:14110"},"attrs":["#[must_use =\n\"this returns the remaining substring as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["prefix",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:40658:179","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11556:14107","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11955:30640":{"id":"2:11955:30640","crate_id":2,"name":"strip_suffix","span":null,"visibility":"public","docs":"Returns a string slice with the suffix removed.\n\nIf the string ends with the pattern `suffix`, returns the substring before the suffix,\nwrapped in `Some`.  Unlike `trim_end_matches`, this method removes the suffix exactly once.\n\nIf the string does not end with `suffix`, returns `None`.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nassert_eq!(\"bar:foo\".strip_suffix(\":foo\"), Some(\"bar\"));\nassert_eq!(\"bar:foo\".strip_suffix(\"bar\"), None);\nassert_eq!(\"foofoo\".strip_suffix(\"foo\"), Some(\"foo\"));\n```","links":{"prim@char":"1:11896:412","self::pattern":"2:11551:14110"},"attrs":["#[must_use =\n\"this returns the remaining substring as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["suffix",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:40658:179","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11556:14107","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"2:11556:14107","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11571:14108","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11868:30600":{"id":"2:11868:30600","crate_id":2,"name":"get_unchecked_mut","span":null,"visibility":"public","docs":"Returns a mutable, unchecked subslice of `str`.\n\nThis is the unchecked alternative to indexing the `str`.\n\n# Safety\n\nCallers of this function are responsible that these preconditions are\nsatisfied:\n\n* The starting index must not exceed the ending index;\n* Indexes must be within bounds of the original slice;\n* Indexes must lie on UTF-8 sequence boundaries.\n\nFailing that, the returned string slice may reference invalid memory or\nviolate the invariants communicated by the `str` type.\n\n# Examples\n\n```\nlet mut v = String::from(\"🗻∈🌏\");\nunsafe {\n    assert_eq!(\"🗻\", v.get_unchecked_mut(0..4));\n    assert_eq!(\"∈\", v.get_unchecked_mut(4..7));\n    assert_eq!(\"🌏\", v.get_unchecked_mut(7..11));\n}\n```","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["i",{"kind":"generic","inner":"I"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"qualified_path","inner":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"I"},"trait":{"name":"SliceIndex","id":"2:9732:220","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}}}}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"2:9732:220","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}},"2:11870:35789":{"id":"2:11870:35789","crate_id":2,"name":"slice_unchecked","span":null,"visibility":"public","docs":"Creates a string slice from another string slice, bypassing safety\nchecks.\n\nThis is generally not recommended, use with caution! For a safe\nalternative see [`str`] and [`Index`].\n\n[`Index`]: crate::ops::Index\n\nThis new slice goes from `begin` to `end`, including `begin` but\nexcluding `end`.\n\nTo get a mutable string slice instead, see the\n[`slice_mut_unchecked`] method.\n\n[`slice_mut_unchecked`]: str::slice_mut_unchecked\n\n# Safety\n\nCallers of this function are responsible that three preconditions are\nsatisfied:\n\n* `begin` must not exceed `end`.\n* `begin` and `end` must be byte positions within the string slice.\n* `begin` and `end` must lie on UTF-8 sequence boundaries.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\n\nunsafe {\n    assert_eq!(\"Löwe 老虎 Léopard\", s.slice_unchecked(0, 21));\n}\n\nlet s = \"Hello, world!\";\n\nunsafe {\n    assert_eq!(\"world\", s.slice_unchecked(7, 12));\n}\n```","links":{"`str`":"1:11902:1380","str::slice_mut_unchecked":"2:11871:35790","crate::ops::Index":"2:2988:2266"},"attrs":["#[deprecated(since = \"1.29.0\", note =\n\"use `get_unchecked(begin..end)` instead\")]","#[must_use]"],"deprecation":{"since":"1.29.0","note":"use `get_unchecked(begin..end)` instead"},"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["begin",{"kind":"primitive","inner":"usize"}],["end",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}},"5:5341:3268":{"id":"5:5341:3268","crate_id":5,"name":"repeat","span":null,"visibility":"public","docs":"Creates a new [`String`] by repeating a string `n` times.\n\n# Panics\n\nThis function will panic if the capacity would overflow.\n\n# Examples\n\nBasic usage:\n\n```\nassert_eq!(\"abc\".repeat(4), String::from(\"abcabcabcabc\"));\n```\n\nA panic upon overflow:\n\n```should_panic\n// this will panic at runtime\nlet huge = \"0123456789abcdef\".repeat(usize::MAX);\n```","links":{"`String`":"5:7192:222"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["n",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:7192:222","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:981:1877":{"id":"0:981:1877","crate_id":0,"name":"Symbol","span":{"filename":"src/internals/symbol.rs","begin":[5,0],"end":[5,32]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"struct","inner":{"kind":{"tuple":[null]},"generics":{"params":[],"where_predicates":[]},"impls":[]}},"2:11949:1909":{"id":"2:11949:1909","crate_id":2,"name":"trim_start_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. `start` in this context means the first\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be left side, and for right-to-left languages like\nArabic or Hebrew, this will be the right side.\n\n# Examples\n\nBasic usage:\n\n```\nassert_eq!(\"11foo1bar11\".trim_start_matches('1'), \"foo1bar11\");\nassert_eq!(\"123foo1bar123\".trim_start_matches(char::is_numeric), \"foo1bar123\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_start_matches(x), \"foo1bar12\");\n```","links":{"prim@char":"1:11896:412","self::pattern":"2:11551:14110"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11556:14107","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11946:35804":{"id":"2:11946:35804","crate_id":2,"name":"trim_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes and suffixes that match a\npattern repeatedly removed.\n\nThe [pattern] can be a [`char`], a slice of [`char`]s, or a function\nor closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_matches('1'), \"foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_matches(char::is_numeric), \"foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_matches(x), \"foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1foo1barXX\".trim_matches(|c| c == '1' || c == 'X'), \"foo1bar\");\n```","links":{"prim@char":"1:11896:412","self::pattern":"2:11551:14110"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11556:14107","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"2:11556:14107","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"DoubleEndedSearcher","id":"2:11576:14106","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:62:343":{"id":"0:62:343","crate_id":0,"name":"attr","span":{"filename":"src/internals/attr.rs","begin":[1,0],"end":[1796,1]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"module","inner":{"is_crate":false,"items":["0:84-0:956:1874"],"is_stripped":false}},"2:11914:30636":{"id":"2:11914:30636","crate_id":2,"name":"splitn","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by a\npattern, restricted to returning at most `n` items.\n\nIf `n` substrings are returned, the last substring (the `n`th substring)\nwill contain the remainder of the string.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will not be double ended, because it is\nnot efficient to support.\n\nIf the pattern allows a reverse search, the [`rsplitn`] method can be\nused.\n\n[`rsplitn`]: str::rsplitn\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lambda\".splitn(3, ' ').collect();\nassert_eq!(v, [\"Mary\", \"had\", \"a little lambda\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".splitn(3, \"X\").collect();\nassert_eq!(v, [\"lion\", \"\", \"tigerXleopard\"]);\n\nlet v: Vec<&str> = \"abcXdef\".splitn(1, 'X').collect();\nassert_eq!(v, [\"abcXdef\"]);\n\nlet v: Vec<&str> = \"\".splitn(1, 'X').collect();\nassert_eq!(v, [\"\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".splitn(2, |c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"abc\", \"defXghi\"]);\n```","links":{"prim@char":"1:11896:412","self::pattern":"2:11551:14110","str::rsplitn":"2:11917:30638"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["n",{"kind":"primitive","inner":"usize"}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"SplitN","id":"2:42754:8180","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11556:14107","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11855:35787":{"id":"2:11855:35787","crate_id":2,"name":"ceil_char_boundary","span":null,"visibility":"public","docs":"Finds the closest `x` not below `index` where `is_char_boundary(x)` is `true`.\n\nThis method is the natural complement to [`floor_char_boundary`]. See that method\nfor more details.\n\n[`floor_char_boundary`]: str::floor_char_boundary\n\n# Panics\n\nPanics if `index > self.len()`.\n\n# Examples\n\n```\n#![feature(round_char_boundary)]\nlet s = \"❤️🧡💛💚💙💜\";\nassert_eq!(s.len(), 26);\nassert!(!s.is_char_boundary(13));\n\nlet closest = s.ceil_char_boundary(13);\nassert_eq!(closest, 14);\nassert_eq!(&s[..closest], \"❤️🧡💛\");\n```","links":{"str::floor_char_boundary":"2:11853:35786"},"attrs":["#[unstable(feature = \"round_char_boundary\", issue = \"93743\")]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["index",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"primitive","inner":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11860:312":{"id":"2:11860:312","crate_id":2,"name":"as_ptr","span":null,"visibility":"public","docs":"Converts a string slice to a raw pointer.\n\nAs string slices are a slice of bytes, the raw pointer points to a\n[`u8`]. This pointer will be pointing to the first byte of the string\nslice.\n\nThe caller must ensure that the returned pointer is never written to.\nIf you need to mutate the contents of the string slice, use [`as_mut_ptr`].\n\n[`as_mut_ptr`]: str::as_mut_ptr\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"Hello\";\nlet ptr = s.as_ptr();\n```","links":{"str::as_mut_ptr":"2:11861:30601","`u8`":"1:11913:1477"},"attrs":["#[must_use]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"raw_pointer","inner":{"mutable":false,"type":{"kind":"primitive","inner":"u8"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"5:5331:36457":{"id":"5:5331:36457","crate_id":5,"name":"to_lowercase","span":null,"visibility":"public","docs":"Returns the lowercase equivalent of this string slice, as a new [`String`].\n\n'Lowercase' is defined according to the terms of the Unicode Derived Core Property\n`Lowercase`.\n\nSince some characters can expand into multiple characters when changing\nthe case, this function returns a [`String`] instead of modifying the\nparameter in-place.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"HELLO\";\n\nassert_eq!(\"hello\", s.to_lowercase());\n```\n\nA tricky example, with sigma:\n\n```\nlet sigma = \"Σ\";\n\nassert_eq!(\"σ\", sigma.to_lowercase());\n\n// but at the end of a word, it's ς, not σ:\nlet odysseus = \"ὈΔΥΣΣΕΎΣ\";\n\nassert_eq!(\"ὀδυσσεύς\", odysseus.to_lowercase());\n```\n\nLanguages without case are not changed:\n\n```\nlet new_year = \"农历新年\";\n\nassert_eq!(new_year, new_year.to_lowercase());\n```","links":{"`String`":"5:7192:222"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the lowercase string as a new String, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:7192:222","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11923:35795":{"id":"2:11923:35795","crate_id":2,"name":"rsplit_once","span":null,"visibility":"public","docs":"Splits the string on the last occurrence of the specified delimiter and\nreturns prefix before delimiter and suffix after delimiter.\n\n# Examples\n\n```\nassert_eq!(\"cfg\".rsplit_once('='), None);\nassert_eq!(\"cfg=foo\".rsplit_once('='), Some((\"cfg\", \"foo\")));\nassert_eq!(\"cfg=foo=bar\".rsplit_once('='), Some((\"cfg=foo\", \"bar\")));\n```","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["delimiter",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:40658:179","args":{"angle_bracketed":{"args":[{"type":{"kind":"tuple","inner":[{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}},{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11556:14107","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"2:11556:14107","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11571:14108","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11851:1997":{"id":"2:11851:1997","crate_id":2,"name":"is_empty","span":null,"visibility":"public","docs":"Returns `true` if `self` has a length of zero bytes.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\";\nassert!(s.is_empty());\n\nlet s = \"not empty\";\nassert!(!s.is_empty());\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11961:35806":{"id":"2:11961:35806","crate_id":2,"name":"trim_left_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. 'Left' in this context means the first\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _right_ side, not the left.\n\n# Examples\n\nBasic usage:\n\n```\nassert_eq!(\"11foo1bar11\".trim_left_matches('1'), \"foo1bar11\");\nassert_eq!(\"123foo1bar123\".trim_left_matches(char::is_numeric), \"foo1bar123\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_left_matches(x), \"foo1bar12\");\n```","links":{"prim@char":"1:11896:412","self::pattern":"2:11551:14110"},"attrs":["#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_start_matches`\",\nsuggestion = \"trim_start_matches\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_start_matches`"},"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11556:14107","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:8:1778":{"id":"0:8:1778","crate_id":0,"name":"ast","span":{"filename":"src/internals/ast.rs","begin":[1,0],"end":[202,1]},"visibility":"public","docs":"A Serde ast, parsed from the Syn ast and ready to generate Rust code.","links":{},"attrs":[],"deprecation":null,"kind":"module","inner":{"is_crate":false,"items":[],"is_stripped":false}},"2:11964:35807":{"id":"2:11964:35807","crate_id":2,"name":"trim_right_matches","span":null,"visibility":"public","docs":"Returns a string slice with all suffixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. 'Right' in this context means the last\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _left_ side, not the right.\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_right_matches('1'), \"11foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_right_matches(char::is_numeric), \"123foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_right_matches(x), \"12foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1fooX\".trim_right_matches(|c| c == '1' || c == 'X'), \"1foo\");\n```","links":{"prim@char":"1:11896:412","self::pattern":"2:11551:14110"},"attrs":["#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_end_matches`\",\nsuggestion = \"trim_end_matches\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_end_matches`"},"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11556:14107","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"2:11556:14107","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11571:14108","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11970:4406":{"id":"2:11970:4406","crate_id":2,"name":"eq_ignore_ascii_case","span":null,"visibility":"public","docs":"Checks that two strings are an ASCII case-insensitive match.\n\nSame as `to_ascii_lowercase(a) == to_ascii_lowercase(b)`,\nbut without allocating and copying temporaries.\n\n# Examples\n\n```\nassert!(\"Ferris\".eq_ignore_ascii_case(\"FERRIS\"));\nassert!(\"Ferrös\".eq_ignore_ascii_case(\"FERRöS\"));\nassert!(!\"Ferrös\".eq_ignore_ascii_case(\"FERRÖS\"));\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["other",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"5:5328:36456":{"id":"5:5328:36456","crate_id":5,"name":"replacen","span":null,"visibility":"public","docs":"Replaces first N matches of a pattern with another string.\n\n`replacen` creates a new [`String`], and copies the data from this string slice into it.\nWhile doing so, it attempts to find matches of a pattern. If it finds any, it\nreplaces them with the replacement string slice at most `count` times.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"foo foo 123 foo\";\nassert_eq!(\"new new 123 foo\", s.replacen(\"foo\", \"new\", 2));\nassert_eq!(\"faa fao 123 foo\", s.replacen('o', \"a\", 3));\nassert_eq!(\"foo foo new23 foo\", s.replacen(char::is_numeric, \"new\", 1));\n```\n\nWhen the pattern doesn't match, it returns this string slice as [`String`]:\n\n```\nlet s = \"this is old\";\nassert_eq!(s, s.replacen(\"cookie monster\", \"little lamb\", 10));\n```","links":{"`String`":"5:7192:222"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the replaced string as a new allocation, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}],["to",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}],["count",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:7192:222","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11556:14107","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11864:30598":{"id":"2:11864:30598","crate_id":2,"name":"get_mut","span":null,"visibility":"public","docs":"Returns a mutable subslice of `str`.\n\nThis is the non-panicking alternative to indexing the `str`. Returns\n[`None`] whenever equivalent indexing operation would panic.\n\n# Examples\n\n```\nlet mut v = String::from(\"hello\");\n// correct length\nassert!(v.get_mut(0..5).is_some());\n// out of bounds\nassert!(v.get_mut(..42).is_none());\nassert_eq!(Some(\"he\"), v.get_mut(0..2).map(|v| &*v));\n\nassert_eq!(\"hello\", v);\n{\n    let s = v.get_mut(0..2);\n    let s = s.map(|s| {\n        s.make_ascii_uppercase();\n        &*s\n    });\n    assert_eq!(Some(\"HE\"), s);\n}\nassert_eq!(\"HEllo\", v);\n```","links":{"`None`":"2:40660:177"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["i",{"kind":"generic","inner":"I"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:40658:179","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"qualified_path","inner":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"I"},"trait":{"name":"SliceIndex","id":"2:9732:220","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}}}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"2:9732:220","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11873:30624":{"id":"2:11873:30624","crate_id":2,"name":"split_at_mut","span":null,"visibility":"public","docs":"Divide one mutable string slice into two at an index.\n\nThe argument, `mid`, should be a byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get immutable string slices instead, see the [`split_at`] method.\n\n[`split_at`]: str::split_at\n\n# Panics\n\nPanics if `mid` is not on a UTF-8 code point boundary, or if it is\npast the end of the last code point of the string slice.\n\n# Examples\n\nBasic usage:\n\n```\nlet mut s = \"Per Martin-Löf\".to_string();\n{\n    let (first, last) = s.split_at_mut(3);\n    first.make_ascii_uppercase();\n    assert_eq!(\"PER\", first);\n    assert_eq!(\" Martin-Löf\", last);\n}\nassert_eq!(\"PER Martin-Löf\", s);\n```","links":{"str::split_at":"2:11872:30623"},"attrs":["#[must_use]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["mid",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"tuple","inner":[{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"primitive","inner":"str"}}},{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"primitive","inner":"str"}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11879:28614":{"id":"2:11879:28614","crate_id":2,"name":"lines","span":null,"visibility":"public","docs":"An iterator over the lines of a string, as string slices.\n\nLines are split at line endings that are either newlines (`\\n`) or\nsequences of a carriage return followed by a line feed (`\\r\\n`).\n\nLine terminators are not included in the lines returned by the iterator.\n\nThe final line ending is optional. A string that ends with a final line\nending will return the same lines as an otherwise identical string\nwithout a final line ending.\n\n# Examples\n\nBasic usage:\n\n```\nlet text = \"foo\\r\\nbar\\n\\nbaz\\n\";\nlet mut lines = text.lines();\n\nassert_eq!(Some(\"foo\"), lines.next());\nassert_eq!(Some(\"bar\"), lines.next());\nassert_eq!(Some(\"\"), lines.next());\nassert_eq!(Some(\"baz\"), lines.next());\n\nassert_eq!(None, lines.next());\n```\n\nThe final line ending isn't required:\n\n```\nlet text = \"foo\\nbar\\n\\r\\nbaz\";\nlet mut lines = text.lines();\n\nassert_eq!(Some(\"foo\"), lines.next());\nassert_eq!(Some(\"bar\"), lines.next());\nassert_eq!(Some(\"\"), lines.next());\nassert_eq!(Some(\"baz\"), lines.next());\n\nassert_eq!(None, lines.next());\n```","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Lines","id":"2:42904:8188","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11942:35801":{"id":"2:11942:35801","crate_id":2,"name":"trim_end","span":null,"visibility":"public","docs":"Returns a string slice with trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Text directionality\n\nA string is a sequence of bytes. `end` in this context means the last\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be right side, and for right-to-left languages like\nArabic or Hebrew, this will be the left side.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\nassert_eq!(\"\\n Hello\\tworld\", s.trim_end());\n```\n\nDirectionality:\n\n```\nlet s = \"  English  \";\nassert!(Some('h') == s.trim_end().chars().rev().next());\n\nlet s = \"  עברית  \";\nassert!(Some('ת') == s.trim_end().chars().rev().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_trim_end\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11861:30601":{"id":"2:11861:30601","crate_id":2,"name":"as_mut_ptr","span":null,"visibility":"public","docs":"Converts a mutable string slice to a raw pointer.\n\nAs string slices are a slice of bytes, the raw pointer points to a\n[`u8`]. This pointer will be pointing to the first byte of the string\nslice.\n\nIt is your responsibility to make sure that the string slice only gets\nmodified in a way that it remains valid UTF-8.","links":{"`u8`":"1:11913:1477"},"attrs":["#[must_use]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"raw_pointer","inner":{"mutable":true,"type":{"kind":"primitive","inner":"u8"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11878:33003":{"id":"2:11878:33003","crate_id":2,"name":"split_ascii_whitespace","span":null,"visibility":"public","docs":"Splits a string slice by ASCII whitespace.\n\nThe iterator returned will return string slices that are sub-slices of\nthe original string slice, separated by any amount of ASCII whitespace.\n\nTo split by Unicode `Whitespace` instead, use [`split_whitespace`].\n\n[`split_whitespace`]: str::split_whitespace\n\n# Examples\n\nBasic usage:\n\n```\nlet mut iter = \"A few words\".split_ascii_whitespace();\n\nassert_eq!(Some(\"A\"), iter.next());\nassert_eq!(Some(\"few\"), iter.next());\nassert_eq!(Some(\"words\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nAll kinds of ASCII whitespace are considered:\n\n```\nlet mut iter = \" Mary   had\\ta little  \\n\\t lamb\".split_ascii_whitespace();\nassert_eq!(Some(\"Mary\"), iter.next());\nassert_eq!(Some(\"had\"), iter.next());\nassert_eq!(Some(\"a\"), iter.next());\nassert_eq!(Some(\"little\"), iter.next());\nassert_eq!(Some(\"lamb\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nIf the string is empty or all ASCII whitespace, the iterator yields no string slices:\n```\nassert_eq!(\"\".split_ascii_whitespace().next(), None);\nassert_eq!(\"   \".split_ascii_whitespace().next(), None);\n```","links":{"str::split_whitespace":"2:11877:32999"},"attrs":["#[must_use =\n\"this returns the split string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"SplitAsciiWhitespace","id":"2:42933:8191","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11944:35802":{"id":"2:11944:35802","crate_id":2,"name":"trim_left","span":null,"visibility":"public","docs":"Returns a string slice with leading whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`.\n\n# Text directionality\n\nA string is a sequence of bytes. 'Left' in this context means the first\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _right_ side, not the left.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \" Hello\\tworld\\t\";\n\nassert_eq!(\"Hello\\tworld\\t\", s.trim_left());\n```\n\nDirectionality:\n\n```\nlet s = \"  English\";\nassert!(Some('E') == s.trim_left().chars().next());\n\nlet s = \"  עברית\";\nassert!(Some('ע') == s.trim_left().chars().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_start`\", suggestion\n= \"trim_start\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_start`"},"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11958:35805":{"id":"2:11958:35805","crate_id":2,"name":"trim_end_matches","span":null,"visibility":"public","docs":"Returns a string slice with all suffixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. `end` in this context means the last\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be right side, and for right-to-left languages like\nArabic or Hebrew, this will be the left side.\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_end_matches('1'), \"11foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_end_matches(char::is_numeric), \"123foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_end_matches(x), \"12foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1fooX\".trim_end_matches(|c| c == '1' || c == 'X'), \"1foo\");\n```","links":{"prim@char":"1:11896:412","self::pattern":"2:11551:14110"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11556:14107","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"2:11556:14107","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11571:14108","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"5:5339:36458":{"id":"5:5339:36458","crate_id":5,"name":"to_uppercase","span":null,"visibility":"public","docs":"Returns the uppercase equivalent of this string slice, as a new [`String`].\n\n'Uppercase' is defined according to the terms of the Unicode Derived Core Property\n`Uppercase`.\n\nSince some characters can expand into multiple characters when changing\nthe case, this function returns a [`String`] instead of modifying the\nparameter in-place.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"hello\";\n\nassert_eq!(\"HELLO\", s.to_uppercase());\n```\n\nScripts without case are not changed:\n\n```\nlet new_year = \"农历新年\";\n\nassert_eq!(new_year, new_year.to_uppercase());\n```\n\nOne character can become multiple:\n```\nlet s = \"tschüß\";\n\nassert_eq!(\"TSCHÜSS\", s.to_uppercase());\n```","links":{"`String`":"5:7192:222"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the uppercase string as a new String, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:7192:222","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"5:5342:2307":{"id":"5:5342:2307","crate_id":5,"name":"to_ascii_uppercase","span":null,"visibility":"public","docs":"Returns a copy of this string where each character is mapped to its\nASCII upper case equivalent.\n\nASCII letters 'a' to 'z' are mapped to 'A' to 'Z',\nbut non-ASCII letters are unchanged.\n\nTo uppercase the value in-place, use [`make_ascii_uppercase`].\n\nTo uppercase ASCII characters in addition to non-ASCII characters, use\n[`to_uppercase`].\n\n# Examples\n\n```\nlet s = \"Grüße, Jürgen ❤\";\n\nassert_eq!(\"GRüßE, JüRGEN ❤\", s.to_ascii_uppercase());\n```\n\n[`make_ascii_uppercase`]: str::make_ascii_uppercase\n[`to_uppercase`]: #method.to_uppercase","links":{"str::make_ascii_uppercase":"2:11971:4407"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use = \"to uppercase the value in-place, use `make_ascii_uppercase()`\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:7192:222","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11862:1890":{"id":"2:11862:1890","crate_id":2,"name":"get","span":null,"visibility":"public","docs":"Returns a subslice of `str`.\n\nThis is the non-panicking alternative to indexing the `str`. Returns\n[`None`] whenever equivalent indexing operation would panic.\n\n# Examples\n\n```\nlet v = String::from(\"🗻∈🌏\");\n\nassert_eq!(Some(\"🗻\"), v.get(0..4));\n\n// indices not on UTF-8 sequence boundaries\nassert!(v.get(1..).is_none());\nassert!(v.get(..8).is_none());\n\n// out of bounds\nassert!(v.get(..42).is_none());\n```","links":{"`None`":"2:40660:177"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["i",{"kind":"generic","inner":"I"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:40658:179","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"qualified_path","inner":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"I"},"trait":{"name":"SliceIndex","id":"2:9732:220","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}}}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"2:9732:220","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11882:1927":{"id":"2:11882:1927","crate_id":2,"name":"contains","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a sub-slice of\nthis string slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nBasic usage:\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.contains(\"nana\"));\nassert!(!bananas.contains(\"apples\"));\n```","links":{"prim@char":"1:11896:412","self::pattern":"2:11551:14110"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11556:14107","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11895:4088":{"id":"2:11895:4088","crate_id":2,"name":"rfind","span":null,"visibility":"public","docs":"Returns the byte index for the first character of the last match of the pattern in\nthis string slice.\n\nReturns [`None`] if the pattern doesn't match.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nlet s = \"Löwe 老虎 Léopard Gepardi\";\n\nassert_eq!(s.rfind('L'), Some(13));\nassert_eq!(s.rfind('é'), Some(14));\nassert_eq!(s.rfind(\"pard\"), Some(24));\n```\n\nMore complex patterns with closures:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\n\nassert_eq!(s.rfind(char::is_whitespace), Some(12));\nassert_eq!(s.rfind(char::is_lowercase), Some(20));\n```\n\nNot finding the pattern:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\nlet x: &[_] = &['1', '2'];\n\nassert_eq!(s.rfind(x), None);\n```","links":{"`None`":"2:40660:177","prim@char":"1:11896:412","self::pattern":"2:11551:14110"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:40658:179","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11556:14107","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"2:11556:14107","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11571:14108","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11905:30634":{"id":"2:11905:30634","crate_id":2,"name":"rsplit","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by\ncharacters matched by a pattern and yielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`split`] method can be used.\n\n[`split`]: str::split\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".rsplit(' ').collect();\nassert_eq!(v, [\"lamb\", \"little\", \"a\", \"had\", \"Mary\"]);\n\nlet v: Vec<&str> = \"\".rsplit('X').collect();\nassert_eq!(v, [\"\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".rsplit('X').collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"\", \"lion\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".rsplit(\"::\").collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"lion\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".rsplit(|c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"ghi\", \"def\", \"abc\"]);\n```","links":{"self::pattern":"2:11551:14110","`DoubleEndedIterator`":"2:7173:120","prim@char":"1:11896:412","str::split":"2:11899:28613"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"RSplit","id":"2:42668:8100","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11556:14107","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"2:11556:14107","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11571:14108","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:927:1662":{"id":"0:927:1662","crate_id":0,"name":"Serialize","span":{"filename":"src/lib.rs","begin":[92,0],"end":[97,1]},"visibility":"public","docs":null,"links":{},"attrs":["#[proc_macro_derive(Serialize, attributes(serde))]"],"deprecation":null,"kind":"proc_macro","inner":{"kind":"derive","helpers":["serde"]}},"2:11872:30623":{"id":"2:11872:30623","crate_id":2,"name":"split_at","span":null,"visibility":"public","docs":"Divide one string slice into two at an index.\n\nThe argument, `mid`, should be a byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get mutable string slices instead, see the [`split_at_mut`]\nmethod.\n\n[`split_at_mut`]: str::split_at_mut\n\n# Panics\n\nPanics if `mid` is not on a UTF-8 code point boundary, or if it is\npast the end of the last code point of the string slice.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"Per Martin-Löf\";\n\nlet (first, last) = s.split_at(3);\n\nassert_eq!(\"Per\", first);\nassert_eq!(\" Martin-Löf\", last);\n```","links":{"str::split_at_mut":"2:11873:30624"},"attrs":["#[must_use]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["mid",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"tuple","inner":[{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11917:30638":{"id":"2:11917:30638","crate_id":2,"name":"rsplitn","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by a\npattern, starting from the end of the string, restricted to returning\nat most `n` items.\n\nIf `n` substrings are returned, the last substring (the `n`th substring)\nwill contain the remainder of the string.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will not be double ended, because it is not\nefficient to support.\n\nFor splitting from the front, the [`splitn`] method can be used.\n\n[`splitn`]: str::splitn\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".rsplitn(3, ' ').collect();\nassert_eq!(v, [\"lamb\", \"little\", \"Mary had a\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".rsplitn(3, 'X').collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"lionX\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".rsplitn(2, \"::\").collect();\nassert_eq!(v, [\"leopard\", \"lion::tiger\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".rsplitn(2, |c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"ghi\", \"abc1def\"]);\n```","links":{"prim@char":"1:11896:412","str::splitn":"2:11914:30636","self::pattern":"2:11551:14110"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["n",{"kind":"primitive","inner":"usize"}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"RSplitN","id":"2:42772:8181","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11556:14107","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"2:11556:14107","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11571:14108","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11881:32998":{"id":"2:11881:32998","crate_id":2,"name":"encode_utf16","span":null,"visibility":"public","docs":"Returns an iterator of `u16` over the string encoded as UTF-16.\n\n# Examples\n\nBasic usage:\n\n```\nlet text = \"Zażółć gęślą jaźń\";\n\nlet utf8_len = text.len();\nlet utf16_len = text.encode_utf16().count();\n\nassert!(utf16_len <= utf8_len);\n```","links":{},"attrs":["#[must_use =\n\"this returns the encoded string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"EncodeUtf16","id":"2:42942:8192","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11849":{"id":"2:11849","crate_id":2,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":["#[cfg(not(test))]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"kind":"primitive","inner":"str"},"items":["2:11850:802","2:11851:1997","2:11852:35785","2:11853:35786","2:11855:35787","2:11858:2726","2:11859:35788","2:11860:312","2:11861:30601","2:11862:1890","2:11864:30598","2:11866:30599","2:11868:30600","2:11870:35789","2:11871:35790","2:11872:30623","2:11873:30624","2:11874:2316","2:11875:2310","2:11876:8089","2:11877:32999","2:11878:33003","2:11879:28614","2:11880:35791","2:11881:32998","2:11882:1927","2:11885:30210","2:11888:30212","2:11891:2535","2:11895:4088","2:11899:28613","2:11902:30632","2:11905:30634","2:11908:35792","2:11911:35793","2:11914:30636","2:11917:30638","2:11920:35794","2:11923:35795","2:11926:3068","2:11929:35796","2:11932:35797","2:11935:35798","2:11938:35799","2:11940:35800","2:11942:35801","2:11944:35802","2:11945:35803","2:11946:35804","2:11949:1909","2:11952:25909","2:11955:30640","2:11958:35805","2:11961:35806","2:11964:35807","2:11967:1870","2:11969:4405","2:11970:4406","2:11971:4407","2:11972:4408","2:11973:35808","2:11975:3373","2:11976:35809"],"negative":false,"synthetic":false,"blanket_impl":null}},"2:11899:28613":{"id":"2:11899:28613","crate_id":2,"name":"split","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by\ncharacters matched by a pattern.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rsplit`] method can be used.\n\n[`rsplit`]: str::rsplit\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".split(' ').collect();\nassert_eq!(v, [\"Mary\", \"had\", \"a\", \"little\", \"lamb\"]);\n\nlet v: Vec<&str> = \"\".split('X').collect();\nassert_eq!(v, [\"\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".split('X').collect();\nassert_eq!(v, [\"lion\", \"\", \"tiger\", \"leopard\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".split(\"::\").collect();\nassert_eq!(v, [\"lion\", \"tiger\", \"leopard\"]);\n\nlet v: Vec<&str> = \"abc1def2ghi\".split(char::is_numeric).collect();\nassert_eq!(v, [\"abc\", \"def\", \"ghi\"]);\n\nlet v: Vec<&str> = \"lionXtigerXleopard\".split(char::is_uppercase).collect();\nassert_eq!(v, [\"lion\", \"tiger\", \"leopard\"]);\n```\n\nIf the pattern is a slice of chars, split on each occurrence of any of the characters:\n\n```\nlet v: Vec<&str> = \"2020-11-03 23:59\".split(&['-', ' ', ':', '@'][..]).collect();\nassert_eq!(v, [\"2020\", \"11\", \"03\", \"23\", \"59\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".split(|c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"abc\", \"def\", \"ghi\"]);\n```\n\nIf a string contains multiple contiguous separators, you will end up\nwith empty strings in the output:\n\n```\nlet x = \"||||a||b|c\".to_string();\nlet d: Vec<_> = x.split('|').collect();\n\nassert_eq!(d, &[\"\", \"\", \"\", \"\", \"a\", \"\", \"b\", \"c\"]);\n```\n\nContiguous separators are separated by the empty string.\n\n```\nlet x = \"(///)\".to_string();\nlet d: Vec<_> = x.split('/').collect();\n\nassert_eq!(d, &[\"(\", \"\", \"\", \")\"]);\n```\n\nSeparators at the start or end of a string are neighbored\nby empty strings.\n\n```\nlet d: Vec<_> = \"010\".split(\"0\").collect();\nassert_eq!(d, &[\"\", \"1\", \"\"]);\n```\n\nWhen the empty string is used as a separator, it separates\nevery character in the string, along with the beginning\nand end of the string.\n\n```\nlet f: Vec<_> = \"rust\".split(\"\").collect();\nassert_eq!(f, &[\"\", \"r\", \"u\", \"s\", \"t\", \"\"]);\n```\n\nContiguous separators can lead to possibly surprising behavior\nwhen whitespace is used as the separator. This code is correct:\n\n```\nlet x = \"    a  b c\".to_string();\nlet d: Vec<_> = x.split(' ').collect();\n\nassert_eq!(d, &[\"\", \"\", \"\", \"\", \"a\", \"\", \"b\", \"c\"]);\n```\n\nIt does _not_ give you:\n\n```,ignore\nassert_eq!(d, &[\"a\", \"b\", \"c\"]);\n```\n\nUse [`split_whitespace`] for this behavior.\n\n[`split_whitespace`]: str::split_whitespace","links":{"self::pattern":"2:11551:14110","`DoubleEndedIterator`":"2:7173:120","prim@char":"1:11896:412","str::split_whitespace":"2:11877:32999","str::rsplit":"2:11905:30634"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Split","id":"2:42650:8097","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11556:14107","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"5:5340:36459":{"id":"5:5340:36459","crate_id":5,"name":"into_string","span":null,"visibility":"public","docs":"Converts a [`Box<str>`] into a [`String`] without copying or allocating.\n\n# Examples\n\nBasic usage:\n\n```\nlet string = String::from(\"birthday gift\");\nlet boxed_str = string.clone().into_boxed_str();\n\nassert_eq!(boxed_str.into_string(), string);\n```","links":{"`Box<str>`":"5:286:1847","`String`":"5:7192:222"},"attrs":["#[must_use = \"`self` will be dropped if the result is not used\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"resolved_path","inner":{"name":"Box","id":"5:286:1847","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}},{"type":{"kind":"resolved_path","inner":{"name":"Global","id":"5:6939:4422","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:7192:222","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:372-0:348:1781":{"id":"0:372-0:348:1781","crate_id":0,"name":null,"span":{"filename":"src/internals/mod.rs","begin":[8,0],"end":[8,41]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"import","inner":{"source":"self::receiver::replace_receiver","name":"replace_receiver","id":"0:348:1781","glob":false}},"2:11920:35794":{"id":"2:11920:35794","crate_id":2,"name":"split_once","span":null,"visibility":"public","docs":"Splits the string on the first occurrence of the specified delimiter and\nreturns prefix before delimiter and suffix after delimiter.\n\n# Examples\n\n```\nassert_eq!(\"cfg\".split_once('='), None);\nassert_eq!(\"cfg=\".split_once('='), Some((\"cfg\", \"\")));\nassert_eq!(\"cfg=foo\".split_once('='), Some((\"cfg\", \"foo\")));\nassert_eq!(\"cfg=foo=bar\".split_once('='), Some((\"cfg\", \"foo=bar\")));\n```","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["delimiter",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:40658:179","args":{"angle_bracketed":{"args":[{"type":{"kind":"tuple","inner":[{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}},{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11556:14107","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11891:2535":{"id":"2:11891:2535","crate_id":2,"name":"find","span":null,"visibility":"public","docs":"Returns the byte index of the first character of this string slice that\nmatches the pattern.\n\nReturns [`None`] if the pattern doesn't match.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nlet s = \"Löwe 老虎 Léopard Gepardi\";\n\nassert_eq!(s.find('L'), Some(0));\nassert_eq!(s.find('é'), Some(14));\nassert_eq!(s.find(\"pard\"), Some(17));\n```\n\nMore complex patterns using point-free style and closures:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\n\nassert_eq!(s.find(char::is_whitespace), Some(5));\nassert_eq!(s.find(char::is_lowercase), Some(1));\nassert_eq!(s.find(|c: char| c.is_whitespace() || c.is_lowercase()), Some(1));\nassert_eq!(s.find(|c: char| (c < 'o') && (c > 'a')), Some(4));\n```\n\nNot finding the pattern:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\nlet x: &[_] = &['1', '2'];\n\nassert_eq!(s.find(x), None);\n```","links":{"`None`":"2:40660:177","prim@char":"1:11896:412","self::pattern":"2:11551:14110"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:40658:179","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11556:14107","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11874:2316":{"id":"2:11874:2316","crate_id":2,"name":"chars","span":null,"visibility":"public","docs":"Returns an iterator over the [`char`]s of a string slice.\n\nAs a string slice consists of valid UTF-8, we can iterate through a\nstring slice by [`char`]. This method returns such an iterator.\n\nIt's important to remember that [`char`] represents a Unicode Scalar\nValue, and might not match your idea of what a 'character' is. Iteration\nover grapheme clusters may be what you actually want. This functionality\nis not provided by Rust's standard library, check crates.io instead.\n\n# Examples\n\nBasic usage:\n\n```\nlet word = \"goodbye\";\n\nlet count = word.chars().count();\nassert_eq!(7, count);\n\nlet mut chars = word.chars();\n\nassert_eq!(Some('g'), chars.next());\nassert_eq!(Some('o'), chars.next());\nassert_eq!(Some('o'), chars.next());\nassert_eq!(Some('d'), chars.next());\nassert_eq!(Some('b'), chars.next());\nassert_eq!(Some('y'), chars.next());\nassert_eq!(Some('e'), chars.next());\n\nassert_eq!(None, chars.next());\n```\n\nRemember, [`char`]s might not match your intuition about characters:\n\n[`char`]: prim@char\n\n```\nlet y = \"y̆\";\n\nlet mut chars = y.chars();\n\nassert_eq!(Some('y'), chars.next()); // not 'y̆'\nassert_eq!(Some('\\u{0306}'), chars.next());\n\nassert_eq!(None, chars.next());\n```","links":{"prim@char":"1:11896:412"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Chars","id":"2:42620:8171","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11871:35790":{"id":"2:11871:35790","crate_id":2,"name":"slice_mut_unchecked","span":null,"visibility":"public","docs":"Creates a string slice from another string slice, bypassing safety\nchecks.\nThis is generally not recommended, use with caution! For a safe\nalternative see [`str`] and [`IndexMut`].\n\n[`IndexMut`]: crate::ops::IndexMut\n\nThis new slice goes from `begin` to `end`, including `begin` but\nexcluding `end`.\n\nTo get an immutable string slice instead, see the\n[`slice_unchecked`] method.\n\n[`slice_unchecked`]: str::slice_unchecked\n\n# Safety\n\nCallers of this function are responsible that three preconditions are\nsatisfied:\n\n* `begin` must not exceed `end`.\n* `begin` and `end` must be byte positions within the string slice.\n* `begin` and `end` must lie on UTF-8 sequence boundaries.","links":{"`str`":"1:11902:1380","crate::ops::IndexMut":"2:2992:3226","str::slice_unchecked":"2:11870:35789"},"attrs":["#[deprecated(since = \"1.29.0\", note =\n\"use `get_unchecked_mut(begin..end)` instead\")]"],"deprecation":{"since":"1.29.0","note":"use `get_unchecked_mut(begin..end)` instead"},"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["begin",{"kind":"primitive","inner":"usize"}],["end",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}},"2:11940:35800":{"id":"2:11940:35800","crate_id":2,"name":"trim_start","span":null,"visibility":"public","docs":"Returns a string slice with leading whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Text directionality\n\nA string is a sequence of bytes. `start` in this context means the first\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be left side, and for right-to-left languages like\nArabic or Hebrew, this will be the right side.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\nassert_eq!(\"Hello\\tworld\\t\\n\", s.trim_start());\n```\n\nDirectionality:\n\n```\nlet s = \"  English  \";\nassert!(Some('E') == s.trim_start().chars().next());\n\nlet s = \"  עברית  \";\nassert!(Some('ע') == s.trim_start().chars().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_trim_start\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11972:4408":{"id":"2:11972:4408","crate_id":2,"name":"make_ascii_lowercase","span":null,"visibility":"public","docs":"Converts this string to its ASCII lower case equivalent in-place.\n\nASCII letters 'A' to 'Z' are mapped to 'a' to 'z',\nbut non-ASCII letters are unchanged.\n\nTo return a new lowercased value without modifying the existing one, use\n[`to_ascii_lowercase()`].\n\n[`to_ascii_lowercase()`]: #method.to_ascii_lowercase\n\n# Examples\n\n```\nlet mut s = String::from(\"GRÜßE, JÜRGEN ❤\");\n\ns.make_ascii_lowercase();\n\nassert_eq!(\"grÜße, jÜrgen ❤\", s);\n```","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11885:30210":{"id":"2:11885:30210","crate_id":2,"name":"starts_with","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a prefix of this\nstring slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nBasic usage:\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.starts_with(\"bana\"));\nassert!(!bananas.starts_with(\"nana\"));\n```","links":{"prim@char":"1:11896:412","self::pattern":"2:11551:14110"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11556:14107","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11973:35808":{"id":"2:11973:35808","crate_id":2,"name":"escape_debug","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_debug`].\n\nNote: only extended grapheme codepoints that begin the string will be\nescaped.\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"❤\\n!\".escape_debug() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"❤\\n!\".escape_debug());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"❤\\\\n!\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"❤\\n!\".escape_debug().to_string(), \"❤\\\\n!\");\n```","links":{"`char::escape_debug`":"2:4513:35808"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"EscapeDebug","id":"2:42949:8135","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11866:30599":{"id":"2:11866:30599","crate_id":2,"name":"get_unchecked","span":null,"visibility":"public","docs":"Returns an unchecked subslice of `str`.\n\nThis is the unchecked alternative to indexing the `str`.\n\n# Safety\n\nCallers of this function are responsible that these preconditions are\nsatisfied:\n\n* The starting index must not exceed the ending index;\n* Indexes must be within bounds of the original slice;\n* Indexes must lie on UTF-8 sequence boundaries.\n\nFailing that, the returned string slice may reference invalid memory or\nviolate the invariants communicated by the `str` type.\n\n# Examples\n\n```\nlet v = \"🗻∈🌏\";\nunsafe {\n    assert_eq!(\"🗻\", v.get_unchecked(0..4));\n    assert_eq!(\"∈\", v.get_unchecked(4..7));\n    assert_eq!(\"🌏\", v.get_unchecked(7..11));\n}\n```","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["i",{"kind":"generic","inner":"I"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"qualified_path","inner":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"I"},"trait":{"name":"SliceIndex","id":"2:9732:220","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}}}}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"2:9732:220","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}},"0:323-0:952:1780":{"id":"0:323-0:952:1780","crate_id":0,"name":null,"span":{"filename":"src/internals/mod.rs","begin":[5,0],"end":[5,25]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"import","inner":{"source":"self::ctxt::Ctxt","name":"Ctxt","id":"0:952:1780","glob":false}},"2:11926:3068":{"id":"2:11926:3068","crate_id":2,"name":"matches","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within the given string\nslice.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rmatches`] method can be used.\n\n[`rmatches`]: str::matches\n\n# Examples\n\nBasic usage:\n\n```\nlet v: Vec<&str> = \"abcXXXabcYYYabc\".matches(\"abc\").collect();\nassert_eq!(v, [\"abc\", \"abc\", \"abc\"]);\n\nlet v: Vec<&str> = \"1abc2abc3\".matches(char::is_numeric).collect();\nassert_eq!(v, [\"1\", \"2\", \"3\"]);\n```","links":{"self::pattern":"2:11551:14110","`DoubleEndedIterator`":"2:7173:120","prim@char":"1:11896:412","str::matches":"2:11926:3068"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Matches","id":"2:42854:8186","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11556:14107","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11880:35791":{"id":"2:11880:35791","crate_id":2,"name":"lines_any","span":null,"visibility":"public","docs":"An iterator over the lines of a string.","links":{},"attrs":["#[deprecated(since = \"1.4.0\", note = \"use lines() instead now\")]"],"deprecation":{"since":"1.4.0","note":"use lines() instead now"},"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"LinesAny","id":"2:42914:8189","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11945:35803":{"id":"2:11945:35803","crate_id":2,"name":"trim_right","span":null,"visibility":"public","docs":"Returns a string slice with trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`.\n\n# Text directionality\n\nA string is a sequence of bytes. 'Right' in this context means the last\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _left_ side, not the right.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \" Hello\\tworld\\t\";\n\nassert_eq!(\" Hello\\tworld\", s.trim_right());\n```\n\nDirectionality:\n\n```\nlet s = \"English  \";\nassert!(Some('h') == s.trim_right().chars().rev().next());\n\nlet s = \"עברית  \";\nassert!(Some('ת') == s.trim_right().chars().rev().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_end`\", suggestion =\n\"trim_end\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_end`"},"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11967:1870":{"id":"2:11967:1870","crate_id":2,"name":"parse","span":null,"visibility":"public","docs":"Parses this string slice into another type.\n\nBecause `parse` is so general, it can cause problems with type\ninference. As such, `parse` is one of the few times you'll see\nthe syntax affectionately known as the 'turbofish': `::<>`. This\nhelps the inference algorithm understand specifically which type\nyou're trying to parse into.\n\n`parse` can parse into any type that implements the [`FromStr`] trait.\n\n# Errors\n\nWill return [`Err`] if it's not possible to parse this string slice into\nthe desired type.\n\n[`Err`]: FromStr::Err\n\n# Examples\n\nBasic usage\n\n```\nlet four: u32 = \"4\".parse().unwrap();\n\nassert_eq!(4, four);\n```\n\nUsing the 'turbofish' instead of annotating `four`:\n\n```\nlet four = \"4\".parse::<u32>();\n\nassert_eq!(Ok(4), four);\n```\n\nFailing to parse:\n\n```\nlet nope = \"j\".parse::<u32>();\n\nassert!(nope.is_err());\n```","links":{"FromStr::Err":"2:11513:126","`FromStr`":"2:11512:3241"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Result","id":"2:40802:208","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"F"}},{"type":{"kind":"qualified_path","inner":{"name":"Err","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"F"},"trait":{"name":"FromStr","id":"2:11512:3241","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"F"},"bounds":[{"trait_bound":{"trait":{"name":"FromStr","id":"2:11512:3241","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11975:3373":{"id":"2:11975:3373","crate_id":2,"name":"escape_default","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_default`].\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"❤\\n!\".escape_default() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"❤\\n!\".escape_default());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"\\\\u{{2764}}\\\\n!\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"❤\\n!\".escape_default().to_string(), \"\\\\u{2764}\\\\n!\");\n```","links":{"`char::escape_default`":"2:4514:3373"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"EscapeDefault","id":"2:42958:3374","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"5:5343:2306":{"id":"5:5343:2306","crate_id":5,"name":"to_ascii_lowercase","span":null,"visibility":"public","docs":"Returns a copy of this string where each character is mapped to its\nASCII lower case equivalent.\n\nASCII letters 'A' to 'Z' are mapped to 'a' to 'z',\nbut non-ASCII letters are unchanged.\n\nTo lowercase the value in-place, use [`make_ascii_lowercase`].\n\nTo lowercase ASCII characters in addition to non-ASCII characters, use\n[`to_lowercase`].\n\n# Examples\n\n```\nlet s = \"Grüße, Jürgen ❤\";\n\nassert_eq!(\"grüße, jürgen ❤\", s.to_ascii_lowercase());\n```\n\n[`make_ascii_lowercase`]: str::make_ascii_lowercase\n[`to_lowercase`]: #method.to_lowercase","links":{"str::make_ascii_lowercase":"2:11972:4408"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use = \"to lowercase the value in-place, use `make_ascii_lowercase()`\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:7192:222","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11858:2726":{"id":"2:11858:2726","crate_id":2,"name":"as_bytes","span":null,"visibility":"public","docs":"Converts a string slice to a byte slice. To convert the byte slice back\ninto a string slice, use the [`from_utf8`] function.\n\n# Examples\n\nBasic usage:\n\n```\nlet bytes = \"bors\".as_bytes();\nassert_eq!(b\"bors\", bytes);\n```","links":{"`from_utf8`":"2:11119:14111"},"attrs":["#[must_use]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"slice","inner":{"kind":"primitive","inner":"u8"}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"5:5323":{"id":"5:5323","crate_id":5,"name":null,"span":null,"visibility":"default","docs":"Methods for string slices.","links":{},"attrs":["#[cfg(not(test))]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"kind":"primitive","inner":"str"},"items":["5:5324:36455","5:5325:2027","5:5328:36456","5:5331:36457","5:5339:36458","5:5340:36459","5:5341:3268","5:5342:2307","5:5343:2306"],"negative":false,"synthetic":false,"blanket_impl":null}},"2:11902:30632":{"id":"2:11902:30632","crate_id":2,"name":"split_inclusive","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by\ncharacters matched by a pattern. Differs from the iterator produced by\n`split` in that `split_inclusive` leaves the matched part as the\nterminator of the substring.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\\nlittle lamb\\nlittle lamb.\"\n    .split_inclusive('\\n').collect();\nassert_eq!(v, [\"Mary had a little lamb\\n\", \"little lamb\\n\", \"little lamb.\"]);\n```\n\nIf the last element of the string is matched,\nthat element will be considered the terminator of the preceding substring.\nThat substring will be the last item returned by the iterator.\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\\nlittle lamb\\nlittle lamb.\\n\"\n    .split_inclusive('\\n').collect();\nassert_eq!(v, [\"Mary had a little lamb\\n\", \"little lamb\\n\", \"little lamb.\\n\"]);\n```","links":{"prim@char":"1:11896:412","self::pattern":"2:11551:14110"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"SplitInclusive","id":"2:11375:8099","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11556:14107","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11876:8089":{"id":"2:11876:8089","crate_id":2,"name":"bytes","span":null,"visibility":"public","docs":"An iterator over the bytes of a string slice.\n\nAs a string slice consists of a sequence of bytes, we can iterate\nthrough a string slice by byte. This method returns such an iterator.\n\n# Examples\n\nBasic usage:\n\n```\nlet mut bytes = \"bors\".bytes();\n\nassert_eq!(Some(b'b'), bytes.next());\nassert_eq!(Some(b'o'), bytes.next());\nassert_eq!(Some(b'r'), bytes.next());\nassert_eq!(Some(b's'), bytes.next());\n\nassert_eq!(None, bytes.next());\n```","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Bytes","id":"2:42636:2739","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11932:35797":{"id":"2:11932:35797","crate_id":2,"name":"match_indices","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within this string\nslice as well as the index that the match starts at.\n\nFor matches of `pat` within `self` that overlap, only the indices\ncorresponding to the first match are returned.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rmatch_indices`] method can be used.\n\n[`rmatch_indices`]: str::rmatch_indices\n\n# Examples\n\nBasic usage:\n\n```\nlet v: Vec<_> = \"abcXXXabcYYYabc\".match_indices(\"abc\").collect();\nassert_eq!(v, [(0, \"abc\"), (6, \"abc\"), (12, \"abc\")]);\n\nlet v: Vec<_> = \"1abcabc2\".match_indices(\"abc\").collect();\nassert_eq!(v, [(1, \"abc\"), (4, \"abc\")]);\n\nlet v: Vec<_> = \"ababa\".match_indices(\"aba\").collect();\nassert_eq!(v, [(0, \"aba\")]); // only the first `aba`\n```","links":{"self::pattern":"2:11551:14110","`DoubleEndedIterator`":"2:7173:120","prim@char":"1:11896:412","str::rmatch_indices":"2:11935:35798"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"MatchIndices","id":"2:42800:8183","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11556:14107","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11929:35796":{"id":"2:11929:35796","crate_id":2,"name":"rmatches","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within this string slice,\nyielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`matches`] method can be used.\n\n[`matches`]: str::matches\n\n# Examples\n\nBasic usage:\n\n```\nlet v: Vec<&str> = \"abcXXXabcYYYabc\".rmatches(\"abc\").collect();\nassert_eq!(v, [\"abc\", \"abc\", \"abc\"]);\n\nlet v: Vec<&str> = \"1abc2abc3\".rmatches(char::is_numeric).collect();\nassert_eq!(v, [\"3\", \"2\", \"1\"]);\n```","links":{"self::pattern":"2:11551:14110","`DoubleEndedIterator`":"2:7173:120","prim@char":"1:11896:412","str::matches":"2:11926:3068"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"RMatches","id":"2:42872:8187","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11556:14107","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"2:11556:14107","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11571:14108","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"paths":{"1:8252:7747":{"crate_id":1,"path":["std","os","unix","ucred","UCred"],"kind":"struct"},"2:43657:8229":{"crate_id":2,"path":["core","alloc","layout","LayoutError"],"kind":"struct"},"6:5772:7090":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","mallinfo"],"kind":"struct"},"1:1579:8068":{"crate_id":1,"path":["std","collections","hash","set","Intersection"],"kind":"struct"},"17:9876:5027":{"crate_id":17,"path":["object","read","elf","note","Note"],"kind":"struct"},"24:5436:3197":{"crate_id":24,"path":["syn","ty","TypeGroup"],"kind":"struct"},"17:12006:5448":{"crate_id":17,"path":["object","macho","FvmlibCommand"],"kind":"struct"},"24:4920:3170":{"crate_id":24,"path":["syn","expr","ExprWhile"],"kind":"struct"},"17:9866:20947":{"crate_id":17,"path":["object","read","elf","note","NoteIterator"],"kind":"struct"},"18:515:5032":{"crate_id":18,"path":["memchr","memmem","prefilter","PrefilterFn"],"kind":"struct"},"2:45553:7637":{"crate_id":2,"path":["core","core_arch","simd","i32x8"],"kind":"struct"},"6:6719:7354":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","mcontext_t"],"kind":"struct"},"1:11907:634":{"crate_id":1,"path":["std","f64"],"kind":"primitive"},"11:2069:8731":{"crate_id":11,"path":["hashbrown","set","OccupiedEntry"],"kind":"struct"},"7:79:19798":{"crate_id":7,"path":["unwind","libunwind","_Unwind_Action"],"kind":"enum"},"14:215:8057":{"crate_id":14,"path":["rustc_demangle","TryDemangleError"],"kind":"struct"},"2:43445:8226":{"crate_id":2,"path":["core","time","TryFromFloatSecsError"],"kind":"struct"},"2:41417:2259":{"crate_id":2,"path":["core","fmt","num","Binary"],"kind":"struct"},"24:4777:3137":{"crate_id":24,"path":["syn","expr","ExprAssign"],"kind":"struct"},"24:53:1872":{"crate_id":24,"path":["syn","token"],"kind":"module"},"6:6488:7239":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","sigaction"],"kind":"struct"},"2:3170:14144":{"crate_id":2,"path":["core","ops","try_trait","Residual"],"kind":"trait"},"6:586:6503":{"crate_id":6,"path":["libc","unix","servent"],"kind":"struct"},"2:9058:3371":{"crate_id":2,"path":["core","fmt","LowerHex"],"kind":"trait"},"17:10660:5225":{"crate_id":17,"path":["object","read","pe","relocation","Relocation"],"kind":"struct"},"1:2206:128":{"crate_id":1,"path":["std","fs","File"],"kind":"struct"},"2:2744:1826":{"crate_id":2,"path":["core","marker","Tuple"],"kind":"trait"},"6:1695:6629":{"crate_id":6,"path":["libc","unix","linux_like","arphdr"],"kind":"struct"},"2:10685:14096":{"crate_id":2,"path":["core","slice","iter","GroupBy"],"kind":"struct"},"6:5843:7130":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","timex"],"kind":"struct"},"5:5180:14086":{"crate_id":5,"path":["alloc","slice","Join"],"kind":"trait"},"17:9577:5160":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbolTable"],"kind":"struct"},"1:8113:8804":{"crate_id":1,"path":["std","io","SeekFrom"],"kind":"enum"},"1:5553:204":{"crate_id":1,"path":["std","sync","mpsc","Receiver"],"kind":"struct"},"5:7115:102":{"crate_id":5,"path":["alloc","ffi","c_str","CString"],"kind":"struct"},"2:3204:3356":{"crate_id":2,"path":["core","ops","unsize","CoerceUnsized"],"kind":"trait"},"24:877:36914":{"crate_id":24,"path":["syn","generics","LifetimesMut"],"kind":"struct"},"11:669:8339":{"crate_id":11,"path":["hashbrown","map","IntoKeys"],"kind":"struct"},"17:10452:21030":{"crate_id":17,"path":["object","read","pe","section","PeSegmentIterator"],"kind":"struct"},"1:8928:4174":{"crate_id":1,"path":["std","sync","mpmc","context","Inner"],"kind":"struct"},"2:2296:186":{"crate_id":2,"path":["core","cmp","PartialEq"],"kind":"trait"},"24:4824:3148":{"crate_id":24,"path":["syn","expr","ExprField"],"kind":"struct"},"6:6548:7272":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stat"],"kind":"struct"},"1:5496:7193":{"crate_id":1,"path":["std","process","exit"],"kind":"function"},"6:1514:6514":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreq"],"kind":"struct"},"1:10655:8233":{"crate_id":1,"path":["std","sys","unix","fs","OpenOptions"],"kind":"struct"},"1:9115:25948":{"crate_id":1,"path":["std","sys","common","thread_local","fast_local","fast","DtorState"],"kind":"enum"},"2:39460:4839":{"crate_id":2,"path":["core","ffi","VaListImpl"],"kind":"struct"},"15:198:19906":{"crate_id":15,"path":["addr2line","LocationRangeUnitIter"],"kind":"struct"},"21:141:4544":{"crate_id":21,"path":["proc_macro","bridge","client","Client"],"kind":"struct"},"1:10929:4891":{"crate_id":1,"path":["std","sys","unix","process","process_inner","do_exec","Reset"],"kind":"struct"},"2:41215:85":{"crate_id":2,"path":["core","sync","atomic","AtomicIsize"],"kind":"struct"},"6:4483:6803":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_abs_setup"],"kind":"struct"},"2:2760:3244":{"crate_id":2,"path":["core","ops","arith","Add"],"kind":"trait"},"6:4334:6730":{"crate_id":6,"path":["libc","unix","linux_like","linux","msginfo"],"kind":"struct"},"2:38947:3249":{"crate_id":2,"path":["core","ops","range","Bound"],"kind":"enum"},"17:11234:5281":{"crate_id":17,"path":["object","elf","FileHeader32"],"kind":"struct"},"2:9006:131":{"crate_id":2,"path":["core","fmt","Formatter"],"kind":"struct"},"6:561:6490":{"crate_id":6,"path":["libc","unix","linger"],"kind":"struct"},"24:5255:3186":{"crate_id":24,"path":["syn","op","UnOp"],"kind":"enum"},"24:2599:3410":{"crate_id":24,"path":["syn","token","Await"],"kind":"struct"},"24:4984:2407":{"crate_id":24,"path":["syn","generics","TypeParam"],"kind":"struct"},"2:21248:7434":{"crate_id":2,"path":["core","core_simd","vector","Simd"],"kind":"struct"},"6:1589:6555":{"crate_id":6,"path":["libc","unix","linux_like","tm"],"kind":"struct"},"24:2531:3406":{"crate_id":24,"path":["syn","token","Abstract"],"kind":"struct"},"2:39663:3304":{"crate_id":2,"path":["core","iter","adapters","rev","Rev"],"kind":"struct"},"1:8181:8847":{"crate_id":1,"path":["std","net","Shutdown"],"kind":"enum"},"24:3296:3434":{"crate_id":24,"path":["syn","token","Unsafe"],"kind":"struct"},"2:40718:3217":{"crate_id":2,"path":["core","option","Iter"],"kind":"struct"},"1:2215:8785":{"crate_id":1,"path":["std","fs","read_to_string"],"kind":"function"},"24:2164:8874":{"crate_id":24,"path":["syn","sealed","lookahead","Sealed"],"kind":"trait"},"6:5902:7163":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","Elf64_Chdr"],"kind":"struct"},"6:7452:7406":{"crate_id":6,"path":["libc","unix","linux_like","linux","fanotify_event_metadata"],"kind":"struct"},"24:4394:3482":{"crate_id":24,"path":["syn","token","Star"],"kind":"struct"},"6:1541:6525":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_in"],"kind":"struct"},"16:6390:7986":{"crate_id":16,"path":["gimli","read","aranges","ArangeHeaderIter"],"kind":"struct"},"2:42872:8187":{"crate_id":2,"path":["core","str","iter","RMatches"],"kind":"struct"},"2:39963:3269":{"crate_id":2,"path":["core","iter","sources","repeat","Repeat"],"kind":"struct"},"11:822:8727":{"crate_id":11,"path":["hashbrown","map","RawEntryMut"],"kind":"enum"},"1:10645:8244":{"crate_id":1,"path":["std","sys","unix","fs","FileAttr"],"kind":"struct"},"16:6854:6121":{"crate_id":16,"path":["gimli","read","line","FileEntryFormat"],"kind":"struct"},"6:1723:6642":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_storage"],"kind":"struct"},"2:39550:3295":{"crate_id":2,"path":["core","iter","adapters","cycle","Cycle"],"kind":"struct"},"1:3167:8836":{"crate_id":1,"path":["std","io","stdio","StdinLock"],"kind":"struct"},"2:41773:14239":{"crate_id":2,"path":["core","fmt","FlagV1"],"kind":"enum"},"21:649:3386":{"crate_id":21,"path":["proc_macro","diagnostic","MultiSpan"],"kind":"trait"},"24:5323:2206":{"crate_id":24,"path":["syn","path","QSelf"],"kind":"struct"},"11:1840:4510":{"crate_id":11,"path":["hashbrown","set","Drain"],"kind":"struct"},"16:7572:36585":{"crate_id":16,"path":["gimli","read","rnglists","RangeListsFormat"],"kind":"enum"},"24:599:3216":{"crate_id":24,"path":["syn","error","IntoIter"],"kind":"struct"},"17:11319:5308":{"crate_id":17,"path":["object","elf","SectionHeader64"],"kind":"struct"},"17:13265:5783":{"crate_id":17,"path":["object","pe","ImageArchiveMemberHeader"],"kind":"struct"},"17:8667:5140":{"crate_id":17,"path":["object","endian","BigEndian"],"kind":"struct"},"24:1883:3214":{"crate_id":24,"path":["syn","punctuated","PairsMut"],"kind":"struct"},"17:8598:20889":{"crate_id":17,"path":["object","common","SymbolFlags"],"kind":"enum"},"2:10172:8181":{"crate_id":2,"path":["core","slice","iter","RSplitN"],"kind":"struct"},"2:4163:3338":{"crate_id":2,"path":["core","cell","Cell"],"kind":"struct"},"11:810:8725":{"crate_id":11,"path":["hashbrown","map","ValuesMut"],"kind":"struct"},"18:582:4077":{"crate_id":18,"path":["memchr","memmem","twoway","Reverse"],"kind":"struct"},"17:10015:21016":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldSubCache"],"kind":"struct"},"18:644:5029":{"crate_id":18,"path":["memchr","memmem","x86","avx","nostd","Forward"],"kind":"struct"},"1:504:4170":{"crate_id":1,"path":["std","thread","PanicGuard"],"kind":"struct"},"5:1039:35583":{"crate_id":5,"path":["alloc","collections","btree","append","MergeIter"],"kind":"struct"},"5:2905:7425":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Immut"],"kind":"struct"},"1:533:4175":{"crate_id":1,"path":["std","thread","Packet"],"kind":"struct"},"17:9108:36644":{"crate_id":17,"path":["object","read","any","SectionIteratorInternal"],"kind":"enum"},"1:8479:8237":{"crate_id":1,"path":["std","path","Components"],"kind":"struct"},"1:9018:7777":{"crate_id":1,"path":["std","sync","mpmc","utils","CachePadded"],"kind":"struct"},"1:640:8717":{"crate_id":1,"path":["std","backtrace","BacktraceSymbol"],"kind":"struct"},"11:1628:4788":{"crate_id":11,"path":["hashbrown","scopeguard","ScopeGuard"],"kind":"struct"},"17:12607:5559":{"crate_id":17,"path":["object","macho","Nlist64"],"kind":"struct"},"5:1363:3221":{"crate_id":5,"path":["alloc","collections","btree","map","IterMut"],"kind":"struct"},"17:8420:20883":{"crate_id":17,"path":["object","common","SymbolScope"],"kind":"enum"},"11:2053:8037":{"crate_id":11,"path":["hashbrown","set","Entry"],"kind":"enum"},"17:11556:5346":{"crate_id":17,"path":["object","elf","Verdef"],"kind":"struct"},"17:13612:5887":{"crate_id":17,"path":["object","pe","ImageHotPatchInfo"],"kind":"struct"},"17:13332:5797":{"crate_id":17,"path":["object","pe","ImageTlsDirectory64"],"kind":"struct"},"1:8236:8883":{"crate_id":1,"path":["std","os","unix","net","ancillary","SocketAncillary"],"kind":"struct"},"1:7843:118":{"crate_id":1,"path":["std","fs","DirBuilder"],"kind":"struct"},"1:3436:3368":{"crate_id":1,"path":["std","io","Write"],"kind":"trait"},"1:2341:4433":{"crate_id":1,"path":["std","fs","metadata"],"kind":"function"},"16:5797:7934":{"crate_id":16,"path":["gimli","read","cfi","AugmentationData"],"kind":"struct"},"24:609:3217":{"crate_id":24,"path":["syn","error","Iter"],"kind":"struct"},"1:1050:8037":{"crate_id":1,"path":["std","collections","hash","map","Entry"],"kind":"enum"},"6:4237:6667":{"crate_id":6,"path":["libc","unix","linux_like","linux","passwd"],"kind":"struct"},"11:393:36571":{"crate_id":11,"path":["hashbrown","raw","RawIterHashInner"],"kind":"struct"},"24:4317:3476":{"crate_id":24,"path":["syn","token","Shl"],"kind":"struct"},"22:946:2468":{"crate_id":22,"path":["proc_macro2","Literal"],"kind":"struct"},"16:6488:7991":{"crate_id":16,"path":["gimli","read","index","UnitIndex"],"kind":"struct"},"16:4568:6047":{"crate_id":16,"path":["gimli","constants","DwAccess"],"kind":"struct"},"1:11878:25930":{"crate_id":1,"path":["std","backtrace_rs","print","PrintFmt"],"kind":"enum"},"5:2084:8072":{"crate_id":5,"path":["alloc","collections","btree","merge_iter","MergeIterInner"],"kind":"struct"},"10:36:6359":{"crate_id":10,"path":["adler","algo","U32X4"],"kind":"struct"},"1:11906:633":{"crate_id":1,"path":["std","f32"],"kind":"primitive"},"2:4366:3351":{"crate_id":2,"path":["core","cell","RefMut"],"kind":"struct"},"2:4231:205":{"crate_id":2,"path":["core","cell","RefCell"],"kind":"struct"},"1:8786:7768":{"crate_id":1,"path":["std","process","ExitCode"],"kind":"struct"},"1:6290:164":{"crate_id":1,"path":["std","sync","mutex","Mutex"],"kind":"struct"},"2:4302:3348":{"crate_id":2,"path":["core","cell","BorrowRef"],"kind":"struct"},"21:2539:4533":{"crate_id":21,"path":["proc_macro","bridge","ExpnGlobals"],"kind":"struct"},"2:48977:244":{"crate_id":2,"path":["core","core_simd","fmt","fmt","Wrapper"],"kind":"struct"},"18:699:7876":{"crate_id":18,"path":["memchr","memmem","FinderBuilder"],"kind":"struct"},"16:8129:20828":{"crate_id":16,"path":["gimli","read","unit","EntriesTreeNode"],"kind":"struct"},"1:2571:8648":{"crate_id":1,"path":["std","io","buffered","bufwriter","WriterPanicked"],"kind":"struct"},"18:548:140":{"crate_id":18,"path":["memchr","memmem","rabinkarp","Hash"],"kind":"struct"},"16:6132:7977":{"crate_id":16,"path":["gimli","read","cfi","CallFrameInstructionIter"],"kind":"struct"},"2:22108:175":{"crate_id":2,"path":["core","num","nonzero","NonZeroU64"],"kind":"struct"},"17:1978:20952":{"crate_id":17,"path":["object","read","elf","relocation","ElfSectionRelocationIterator"],"kind":"struct"},"16:6431:7989":{"crate_id":16,"path":["gimli","read","aranges","ArangeEntryIter"],"kind":"struct"},"16:4789:6053":{"crate_id":16,"path":["gimli","constants","DwCc"],"kind":"struct"},"18:507:5029":{"crate_id":18,"path":["memchr","memmem","genericsimd","Forward"],"kind":"struct"},"5:6032:9044":{"crate_id":5,"path":["alloc","task","Wake"],"kind":"trait"},"2:9064:3369":{"crate_id":2,"path":["core","fmt","LowerExp"],"kind":"trait"},"5:5426:4514":{"crate_id":5,"path":["alloc","string","retain","SetLenOnDrop"],"kind":"struct"},"2:42516:14090":{"crate_id":2,"path":["core","slice","iter","ArrayChunksMut"],"kind":"struct"},"17:11060:5225":{"crate_id":17,"path":["object","read","Relocation"],"kind":"struct"},"11:777:4787":{"crate_id":11,"path":["hashbrown","map","ConsumeAllOnDrop"],"kind":"struct"},"1:7595:4182":{"crate_id":1,"path":["std","thread","ThreadId"],"kind":"struct"},"17:10478:21028":{"crate_id":17,"path":["object","read","pe","section","PeSectionIterator"],"kind":"struct"},"1:6546:4881":{"crate_id":1,"path":["std","sync","remutex","ReentrantMutexGuard"],"kind":"struct"},"17:13516:5849":{"crate_id":17,"path":["object","pe","ImageLoadConfigDirectory32"],"kind":"struct"},"18:80:24787":{"crate_id":18,"path":["memchr","memchr","iter","Memchr"],"kind":"struct"},"1:11910:734":{"crate_id":1,"path":["std","i32"],"kind":"primitive"},"1:5716:8348":{"crate_id":1,"path":["std","sync","condvar","Condvar"],"kind":"struct"},"17:8651:5139":{"crate_id":17,"path":["object","endian","LittleEndian"],"kind":"struct"},"16:2357:5982":{"crate_id":16,"path":["gimli","common","Register"],"kind":"struct"},"1:11903:1459":{"crate_id":1,"path":["std","tuple"],"kind":"primitive"},"1:7813:8234":{"crate_id":1,"path":["std","fs","Permissions"],"kind":"struct"},"2:46511:7679":{"crate_id":2,"path":["core","core_arch","simd","u64x8"],"kind":"struct"},"6:1645:6599":{"crate_id":6,"path":["libc","unix","linux_like","in_pktinfo"],"kind":"struct"},"5:6975:4802":{"crate_id":5,"path":["alloc","collections","binary_heap","DrainSorted"],"kind":"struct"},"1:3676:8852":{"crate_id":1,"path":["std","net","tcp","TcpListener"],"kind":"struct"},"24:498:3227":{"crate_id":24,"path":["syn","drops","NoDrop"],"kind":"struct"},"2:4312:3349":{"crate_id":2,"path":["core","cell","Ref"],"kind":"struct"},"5:1440:8340":{"crate_id":5,"path":["alloc","collections","btree","map","IntoValues"],"kind":"struct"},"17:10580:7900":{"crate_id":17,"path":["object","read","pe","import","ImportDescriptorIterator"],"kind":"struct"},"5:3126:35501":{"crate_id":5,"path":["alloc","collections","btree","set","DifferenceInner"],"kind":"enum"},"2:42958:3374":{"crate_id":2,"path":["core","str","iter","EscapeDefault"],"kind":"struct"},"17:1947:20930":{"crate_id":17,"path":["object","read","elf","relocation","ElfDynamicRelocationIterator"],"kind":"struct"},"6:1520:6517":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreqn"],"kind":"struct"},"1:928:8340":{"crate_id":1,"path":["std","collections","hash","map","IntoValues"],"kind":"struct"},"2:12194:190":{"crate_id":2,"path":["core","future","pending","Pending"],"kind":"struct"},"1:6831:4896":{"crate_id":1,"path":["std","sys","common","thread_local","fast_local","fast","Key"],"kind":"struct"},"22:834:2468":{"crate_id":22,"path":["proc_macro2","imp","Literal"],"kind":"enum"},"6:653:14917":{"crate_id":6,"path":["libc","unix","linux_like","timezone"],"kind":"enum"},"1:5920:204":{"crate_id":1,"path":["std","sync","mpmc","counter","Receiver"],"kind":"struct"},"17:8360:20881":{"crate_id":17,"path":["object","common","ComdatKind"],"kind":"enum"},"2:40609:8235":{"crate_id":2,"path":["core","net","socket_addr","SocketAddr"],"kind":"enum"},"11:751:4510":{"crate_id":11,"path":["hashbrown","map","Drain"],"kind":"struct"},"2:2834:3476":{"crate_id":2,"path":["core","ops","bit","Shl"],"kind":"trait"},"24:4979:2448":{"crate_id":24,"path":["syn","generics","LifetimeParam"],"kind":"struct"},"2:39380:101":{"crate_id":2,"path":["core","ffi","c_str","CStr"],"kind":"struct"},"16:7077:20820":{"crate_id":16,"path":["gimli","read","op","DieReference"],"kind":"enum"},"1:360:4191":{"crate_id":1,"path":["std","thread","scoped","ScopedJoinHandle"],"kind":"struct"},"24:4490:1995":{"crate_id":24,"path":["syn","attr","Meta"],"kind":"enum"},"1:7675:8230":{"crate_id":1,"path":["std","collections","hash","map","DefaultHasher"],"kind":"struct"},"2:21609:8113":{"crate_id":2,"path":["core","num","dec2flt","ParseFloatError"],"kind":"struct"},"6:4346:6739":{"crate_id":6,"path":["libc","unix","linux_like","linux","sembuf"],"kind":"struct"},"6:1677:6622":{"crate_id":6,"path":["libc","unix","linux_like","arpreq"],"kind":"struct"},"24:3058:3428":{"crate_id":24,"path":["syn","token","Priv"],"kind":"struct"},"2:41697:67":{"crate_id":2,"path":["core","fmt","Alignment"],"kind":"enum"},"18:727:5051":{"crate_id":18,"path":["memchr","memmem","SearcherConfig"],"kind":"struct"},"2:2799:5006":{"crate_id":2,"path":["core","ops","arith","MulAssign"],"kind":"trait"},"17:11484:5332":{"crate_id":17,"path":["object","elf","ProgramHeader32"],"kind":"struct"},"24:4812:3145":{"crate_id":24,"path":["syn","expr","ExprClosure"],"kind":"struct"},"17:10303:20983":{"crate_id":17,"path":["object","read","macho","section","MachOSection"],"kind":"struct"},"21:2583:3385":{"crate_id":21,"path":["proc_macro","diagnostic","Level"],"kind":"enum"},"10:44:6360":{"crate_id":10,"path":["adler","Adler32"],"kind":"struct"},"2:40794:191":{"crate_id":2,"path":["core","pin","Pin"],"kind":"struct"},"2:20651:9005":{"crate_id":2,"path":["core","core_simd","eq","SimdPartialEq"],"kind":"trait"},"17:8256:20864":{"crate_id":17,"path":["object","common","AddressSize"],"kind":"enum"},"6:7511:7419":{"crate_id":6,"path":["libc","unix","linux_like","linux","non_exhaustive","open_how"],"kind":"struct"},"6:6628:7297":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","pthread_attr_t"],"kind":"struct"},"16:5104:6063":{"crate_id":16,"path":["gimli","constants","DwRle"],"kind":"struct"},"6:7469:7411":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_mutex_t"],"kind":"struct"},"2:42437:8102":{"crate_id":2,"path":["core","slice","iter","Chunks"],"kind":"struct"},"5:6381:4791":{"crate_id":5,"path":["alloc","vec","into_iter","drop","DropGuard"],"kind":"struct"},"24:5265:188":{"crate_id":24,"path":["syn","path","Path"],"kind":"struct"},"17:10857:20900":{"crate_id":17,"path":["object","read","SymbolSection"],"kind":"enum"},"24:2973:2467":{"crate_id":24,"path":["syn","token","Match"],"kind":"struct"},"24:2514:3485":{"crate_id":24,"path":["syn","token","Underscore"],"kind":"struct"},"24:4353:3479":{"crate_id":24,"path":["syn","token","ShrEq"],"kind":"struct"},"1:1848:8756":{"crate_id":1,"path":["std","env","ArgsOs"],"kind":"struct"},"24:4773:3136":{"crate_id":24,"path":["syn","expr","ExprArray"],"kind":"struct"},"1:10047:2161":{"crate_id":1,"path":["std","sys","unix","os_str","Slice"],"kind":"struct"},"24:4833:3150":{"crate_id":24,"path":["syn","expr","ExprGroup"],"kind":"struct"},"2:42854:8186":{"crate_id":2,"path":["core","str","iter","Matches"],"kind":"struct"},"17:13211:5770":{"crate_id":17,"path":["object","pe","ImageAuxSymbolWeak"],"kind":"struct"},"2:29781:8855":{"crate_id":2,"path":["core","num","FpCategory"],"kind":"enum"},"2:21553:7435":{"crate_id":2,"path":["core","num","dec2flt","common","BiasedFp"],"kind":"struct"},"17:10743:20897":{"crate_id":17,"path":["object","read","traits","NoDynamicRelocationIterator"],"kind":"struct"},"2:42377:33006":{"crate_id":2,"path":["core","slice","iter","GenericSplitN"],"kind":"struct"},"2:42700:8177":{"crate_id":2,"path":["core","str","iter","SplitTerminator"],"kind":"struct"},"2:20626:9015":{"crate_id":2,"path":["core","core_simd","elements","uint","SimdUint"],"kind":"trait"},"6:499:6450":{"crate_id":6,"path":["libc","unix","rlimit"],"kind":"struct"},"2:8605:79":{"crate_id":2,"path":["core","sync","atomic","AtomicBool"],"kind":"struct"},"24:3041:3427":{"crate_id":24,"path":["syn","token","Override"],"kind":"struct"},"2:43669:4420":{"crate_id":2,"path":["core","alloc","AllocError"],"kind":"struct"},"6:7440:7404":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_condattr_t"],"kind":"struct"},"2:42620:8171":{"crate_id":2,"path":["core","str","iter","Chars"],"kind":"struct"},"2:7135:150":{"crate_id":2,"path":["core","iter","traits","collect","IntoIterator"],"kind":"trait"},"6:5716:7064":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__exit_status"],"kind":"struct"},"1:3611:8849":{"crate_id":1,"path":["std","net","socket_addr","ToSocketAddrs"],"kind":"trait"},"2:39243:7535":{"crate_id":2,"path":["core","char","convert","CharTryFromError"],"kind":"struct"},"17:10092:21020":{"crate_id":17,"path":["object","read","macho","file","MachOComdatSectionIterator"],"kind":"struct"},"22:825:1800":{"crate_id":22,"path":["proc_macro2","imp","Ident"],"kind":"enum"},"2:40524:8848":{"crate_id":2,"path":["core","net","ip_addr","Ipv6MulticastScope"],"kind":"enum"},"1:11845:8396":{"crate_id":1,"path":["std","backtrace_rs","symbolize","gimli","parse_running_mmaps","MapsEntry"],"kind":"struct"},"1:11921:13":{"crate_id":1,"path":["std","fn"],"kind":"primitive"},"1:3289:8826":{"crate_id":1,"path":["std","io","stdio","IsTerminal"],"kind":"trait"},"2:2130:581":{"crate_id":2,"path":["core","ptr","drop_in_place"],"kind":"function"},"1:8164:8188":{"crate_id":1,"path":["std","io","Lines"],"kind":"struct"},"22:766:3238":{"crate_id":22,"path":["proc_macro2","extra","DelimSpan"],"kind":"struct"},"17:11355:5313":{"crate_id":17,"path":["object","elf","CompressionHeader64"],"kind":"struct"},"20:235:3993":{"crate_id":20,"path":["quote","__private","get_span","GetSpan"],"kind":"struct"},"24:4820:3147":{"crate_id":24,"path":["syn","expr","ExprContinue"],"kind":"struct"},"17:12980:5720":{"crate_id":17,"path":["object","pe","ImageOptionalHeader64"],"kind":"struct"},"7:32:19791":{"crate_id":7,"path":["unwind","libunwind","_Unwind_Reason_Code"],"kind":"enum"},"11:1534:19886":{"crate_id":11,"path":["hashbrown","rustc_entry","RustcOccupiedEntry"],"kind":"struct"},"17:12959:5715":{"crate_id":17,"path":["object","pe","ImageRomOptionalHeader"],"kind":"struct"},"5:4855:4817":{"crate_id":5,"path":["alloc","rc","from_iter_exact","Guard"],"kind":"struct"},"0:927:1664":{"crate_id":0,"path":["serde_derive","Serialize"],"kind":"proc_derive"},"17:10735:5233":{"crate_id":17,"path":["object","read","pe","rich","RichHeaderEntry"],"kind":"struct"},"17:10428:21052":{"crate_id":17,"path":["object","read","pe","file","PeComdat"],"kind":"struct"},"2:20839:9011":{"crate_id":2,"path":["core","core_simd","masks","MaskElement"],"kind":"trait"},"24:3938:3450":{"crate_id":24,"path":["syn","token","DotDot"],"kind":"struct"},"17:13240:5778":{"crate_id":17,"path":["object","pe","ImageRelocation"],"kind":"struct"},"1:6615:27645":{"crate_id":1,"path":["std","sync","rwlock","fmt","LockedPlaceholder"],"kind":"struct"},"17:9653:20946":{"crate_id":17,"path":["object","read","elf","file","ElfFile"],"kind":"struct"},"2:46303:7675":{"crate_id":2,"path":["core","core_arch","simd","i32x16"],"kind":"struct"},"5:7162:8087":{"crate_id":5,"path":["alloc","ffi","c_str","FromVecWithNulError"],"kind":"struct"},"1:8802:8971":{"crate_id":1,"path":["std","sync","mpsc","TryIter"],"kind":"struct"},"17:12835:5622":{"crate_id":17,"path":["object","pe","ImageVxdHeader"],"kind":"struct"},"2:42608:8170":{"crate_id":2,"path":["core","str","error","ParseBoolError"],"kind":"struct"},"2:11556:14107":{"crate_id":2,"path":["core","str","pattern","Pattern"],"kind":"trait"},"17:10712:21057":{"crate_id":17,"path":["object","read","pe","resource","ResourceNameOrId"],"kind":"enum"},"6:4379:6754":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_keymap_entry"],"kind":"struct"},"1:1082:8636":{"crate_id":1,"path":["std","collections","hash","map","OccupiedError"],"kind":"struct"},"24:5043:1932":{"crate_id":24,"path":["syn","generics","WherePredicate"],"kind":"enum"},"2:44582:7593":{"crate_id":2,"path":["core","core_arch","simd","f32x2"],"kind":"struct"},"1:11920:1112":{"crate_id":1,"path":["std","reference"],"kind":"primitive"},"16:5779:6068":{"crate_id":16,"path":["gimli","read","cfi","Augmentation"],"kind":"struct"},"2:40596:8160":{"crate_id":2,"path":["core","net","parser","AddrParseError"],"kind":"struct"},"2:39397:32481":{"crate_id":2,"path":["core","ffi","c_str","FromBytesWithNulErrorKind"],"kind":"enum"},"16:8072:8049":{"crate_id":16,"path":["gimli","read","unit","EntriesRaw"],"kind":"struct"},"24:3075:3429":{"crate_id":24,"path":["syn","token","Pub"],"kind":"struct"},"1:11199:7788":{"crate_id":1,"path":["std","sys_common","wtf8","CodePoint"],"kind":"struct"},"16:2830:6002":{"crate_id":16,"path":["gimli","common","DebugTypesOffset"],"kind":"struct"},"1:9997:27965":{"crate_id":1,"path":["std","sys","unix","os","Env"],"kind":"struct"},"11:1852:8068":{"crate_id":11,"path":["hashbrown","set","Intersection"],"kind":"struct"},"1:8296:7748":{"crate_id":1,"path":["std","os","fd","owned","BorrowedFd"],"kind":"struct"},"6:4871:6960":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_prinfo"],"kind":"struct"},"2:9052:119":{"crate_id":2,"path":["core","fmt","Display"],"kind":"trait"},"2:39385:8141":{"crate_id":2,"path":["core","ffi","c_str","FromBytesWithNulError"],"kind":"struct"},"6:6757:7371":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","seccomp_notif_sizes"],"kind":"struct"},"17:562:1877":{"crate_id":17,"path":["object","read","any","Symbol"],"kind":"struct"},"1:1585:8069":{"crate_id":1,"path":["std","collections","hash","set","Difference"],"kind":"struct"},"2:9047:111":{"crate_id":2,"path":["core","fmt","Debug"],"kind":"trait"},"2:11512:3241":{"crate_id":2,"path":["core","str","traits","FromStr"],"kind":"trait"},"24:4888:3162":{"crate_id":24,"path":["syn","expr","ExprRepeat"],"kind":"struct"},"16:6361:6079":{"crate_id":16,"path":["gimli","read","abbrev","AttributeSpecification"],"kind":"struct"},"2:3639:3216":{"crate_id":2,"path":["core","array","iter","IntoIter"],"kind":"struct"},"16:6919:36584":{"crate_id":16,"path":["gimli","read","loclists","LocListsFormat"],"kind":"enum"},"24:4102:3461":{"crate_id":24,"path":["syn","token","MinusEq"],"kind":"struct"},"17:11520:5341":{"crate_id":17,"path":["object","elf","Dyn32"],"kind":"struct"},"17:10569:7896":{"crate_id":17,"path":["object","read","pe","import","ImportTable"],"kind":"struct"},"24:3812:3442":{"crate_id":24,"path":["syn","token","AndEq"],"kind":"struct"},"17:9228:36647":{"crate_id":17,"path":["object","read","any","SymbolTableInternal"],"kind":"enum"},"2:40975:81":{"crate_id":2,"path":["core","sync","atomic","AtomicI16"],"kind":"struct"},"2:43397:8224":{"crate_id":2,"path":["core","str","BytesIsNotEmpty"],"kind":"struct"},"2:14:2605":{"crate_id":2,"path":["core","write"],"kind":"macro"},"2:39579:3298":{"crate_id":2,"path":["core","iter","adapters","filter_map","FilterMap"],"kind":"struct"},"2:42904:8188":{"crate_id":2,"path":["core","str","iter","Lines"],"kind":"struct"},"17:13135:5753":{"crate_id":17,"path":["object","pe","ImageSymbolBytes"],"kind":"struct"},"2:48964:244":{"crate_id":2,"path":["core","core_simd","fmt","fmt","Wrapper"],"kind":"struct"},"2:39340:8137":{"crate_id":2,"path":["core","char","ToUppercase"],"kind":"struct"},"24:5470:3207":{"crate_id":24,"path":["syn","ty","TypeTuple"],"kind":"struct"},"20:45:3094":{"crate_id":20,"path":["quote","ident_fragment","IdentFragment"],"kind":"trait"},"17:10545:5221":{"crate_id":17,"path":["object","read","pe","export","Export"],"kind":"struct"},"22:941:1800":{"crate_id":22,"path":["proc_macro2","Ident"],"kind":"struct"},"1:3445:26814":{"crate_id":1,"path":["std","io","Write","write_fmt","Adapter"],"kind":"struct"},"2:2863:5013":{"crate_id":2,"path":["core","ops","bit","ShrAssign"],"kind":"trait"},"24:4846:3153":{"crate_id":24,"path":["syn","expr","ExprInfer"],"kind":"struct"},"6:4489:6805":{"crate_id":6,"path":["libc","unix","linux_like","linux","dl_phdr_info"],"kind":"struct"},"5:3653:3336":{"crate_id":5,"path":["alloc","collections","linked_list","Cursor"],"kind":"struct"},"24:336:3336":{"crate_id":24,"path":["syn","buffer","Cursor"],"kind":"struct"},"16:2319:5974":{"crate_id":16,"path":["gimli","common","Encoding"],"kind":"struct"},"5:1225:8731":{"crate_id":5,"path":["alloc","collections","btree","map","entry","OccupiedEntry"],"kind":"struct"},"17:10923:7910":{"crate_id":17,"path":["object","read","ObjectMap"],"kind":"struct"},"2:3375:14125":{"crate_id":2,"path":["core","any","Provider"],"kind":"trait"},"2:3324:68":{"crate_id":2,"path":["core","any","Any"],"kind":"trait"},"17:12449:5531":{"crate_id":17,"path":["object","macho","BuildToolVersion"],"kind":"struct"},"16:6904:6126":{"crate_id":16,"path":["gimli","read","loclists","LocationLists"],"kind":"struct"},"2:43214:8205":{"crate_id":2,"path":["core","str","pattern","StrSearcher"],"kind":"struct"},"9:234:7562":{"crate_id":9,"path":["miniz_oxide","inflate","core","State"],"kind":"enum"},"1:7478:8654":{"crate_id":1,"path":["std","backtrace_rs","symbolize","SymbolName"],"kind":"struct"},"1:5904:4869":{"crate_id":1,"path":["std","sync","mpmc","counter","Sender"],"kind":"struct"},"16:7478:6020":{"crate_id":16,"path":["gimli","read","pubnames","DebugPubNames"],"kind":"struct"},"2:39737:3309":{"crate_id":2,"path":["core","iter","adapters","take_while","TakeWhile"],"kind":"struct"},"2:20688:9009":{"crate_id":2,"path":["core","core_simd","lane_count","SupportedLaneCount"],"kind":"trait"},"2:2765:5001":{"crate_id":2,"path":["core","ops","arith","Sub"],"kind":"trait"},"1:11476:7790":{"crate_id":1,"path":["std","personality","dwarf","eh","EHContext"],"kind":"struct"},"24:4961:2205":{"crate_id":24,"path":["syn","generics","GenericParam"],"kind":"enum"},"1:8092:7742":{"crate_id":1,"path":["std","io","util","Sink"],"kind":"struct"},"6:6649:7303":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_fpstate"],"kind":"struct"},"1:3907:8859":{"crate_id":1,"path":["std","os","unix","fs","FileExt"],"kind":"trait"},"24:4329:3477":{"crate_id":24,"path":["syn","token","ShlEq"],"kind":"struct"},"16:7498:8042":{"crate_id":16,"path":["gimli","read","pubtypes","PubTypesEntry"],"kind":"struct"},"17:8753:5143":{"crate_id":17,"path":["object","endian","U64Bytes"],"kind":"struct"},"24:1962:3219":{"crate_id":24,"path":["syn","punctuated","PrivateIter"],"kind":"struct"},"1:869:3216":{"crate_id":1,"path":["std","collections","hash","map","IntoIter"],"kind":"struct"},"24:3245:1786":{"crate_id":24,"path":["syn","token","Type"],"kind":"struct"},"17:13777:5935":{"crate_id":17,"path":["object","pe","ImageCoffSymbolsHeader"],"kind":"struct"},"6:5931:7176":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ptrace_peeksiginfo_args"],"kind":"struct"},"1:5367:8941":{"crate_id":1,"path":["std","process","ChildStderr"],"kind":"struct"},"16:154:4776":{"crate_id":16,"path":["gimli","read","util","ArrayVec"],"kind":"struct"},"11:1845:4508":{"crate_id":11,"path":["hashbrown","set","DrainFilter"],"kind":"struct"},"17:9917:5173":{"crate_id":17,"path":["object","read","elf","version","Version"],"kind":"struct"},"2:6701:3259":{"crate_id":2,"path":["core","iter","range","Step"],"kind":"trait"},"2:43249:8210":{"crate_id":2,"path":["core","str","pattern","TwoWaySearcher"],"kind":"struct"},"1:3379:7745":{"crate_id":1,"path":["std","io","Read"],"kind":"trait"},"2:41789:73":{"crate_id":2,"path":["core","fmt","Arguments"],"kind":"struct"},"6:6667:7314":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user_regs_struct"],"kind":"struct"},"16:3047:19952":{"crate_id":16,"path":["gimli","common","DwarfFileType"],"kind":"enum"},"17:13399:5819":{"crate_id":17,"path":["object","pe","ImageResourceDirectory"],"kind":"struct"},"1:924:8339":{"crate_id":1,"path":["std","collections","hash","map","IntoKeys"],"kind":"struct"},"6:4402:6762":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_trigger"],"kind":"struct"},"2:42558:14098":{"crate_id":2,"path":["core","slice","iter","RChunksExactMut"],"kind":"struct"},"17:13082:5740":{"crate_id":17,"path":["object","pe","AnonObjectHeaderBigobj"],"kind":"struct"},"22:699:3235":{"crate_id":22,"path":["proc_macro2","fallback","LexError"],"kind":"struct"},"17:9178:20893":{"crate_id":17,"path":["object","read","any","ComdatSectionIterator"],"kind":"struct"},"17:13499:5842":{"crate_id":17,"path":["object","pe","ImagePrologueDynamicRelocationHeader"],"kind":"struct"},"11:1555:19887":{"crate_id":11,"path":["hashbrown","rustc_entry","RustcVacantEntry"],"kind":"struct"},"17:12576:5553":{"crate_id":17,"path":["object","macho","NoteCommand"],"kind":"struct"},"1:961:8730":{"crate_id":1,"path":["std","collections","hash","map","RawEntryBuilder"],"kind":"struct"},"16:7697:6015":{"crate_id":16,"path":["gimli","read","str","DebugLineStr"],"kind":"struct"},"1:10700:118":{"crate_id":1,"path":["std","sys","unix","fs","DirBuilder"],"kind":"struct"},"17:1919:20965":{"crate_id":17,"path":["object","read","elf","relocation","ElfRelaIterator"],"kind":"enum"},"1:5331:8939":{"crate_id":1,"path":["std","process","ChildStdin"],"kind":"struct"},"17:10670:5228":{"crate_id":17,"path":["object","read","pe","resource","ResourceDirectory"],"kind":"struct"},"17:9028:20890":{"crate_id":17,"path":["object","read","any","SegmentIterator"],"kind":"struct"},"2:22807:7455":{"crate_id":2,"path":["core","num","saturating","Saturating"],"kind":"struct"},"2:2807:5008":{"crate_id":2,"path":["core","ops","arith","RemAssign"],"kind":"trait"},"16:5655:6011":{"crate_id":16,"path":["gimli","read","cfi","EhFrame"],"kind":"struct"},"6:4812:990":{"crate_id":6,"path":["libc","unix","linux_like","linux","option"],"kind":"struct"},"1:733:141":{"crate_id":1,"path":["std","collections","hash","map","HashMap"],"kind":"struct"},"6:7475:7412":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_rwlock_t"],"kind":"struct"},"2:46473:7678":{"crate_id":2,"path":["core","core_arch","simd","i64x8"],"kind":"struct"},"11:2205:3255":{"crate_id":11,"path":["hashbrown","TryReserveError"],"kind":"enum"},"2:44563:7592":{"crate_id":2,"path":["core","core_arch","simd","i64x1"],"kind":"struct"},"17:12293:5508":{"crate_id":17,"path":["object","macho","TwolevelHintsCommand"],"kind":"struct"},"1:7786:4700":{"crate_id":1,"path":["std","fs","Metadata"],"kind":"struct"},"17:10039:20982":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCacheImage"],"kind":"struct"},"17:11220:5280":{"crate_id":17,"path":["object","archive","AixMemberOffset"],"kind":"struct"},"17:10840:5248":{"crate_id":17,"path":["object","read","SymbolIndex"],"kind":"struct"},"6:7434:7403":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_rwlockattr_t"],"kind":"struct"},"16:4445:6043":{"crate_id":16,"path":["gimli","constants","DwAte"],"kind":"struct"},"24:4908:3167":{"crate_id":24,"path":["syn","expr","ExprTuple"],"kind":"struct"},"24:2752:3414":{"crate_id":24,"path":["syn","token","Dyn"],"kind":"struct"},"16:5346:6065":{"crate_id":16,"path":["gimli","constants","DwEhPe"],"kind":"struct"},"17:11821:5419":{"crate_id":17,"path":["object","macho","FatArch32"],"kind":"struct"},"17:12236:5496":{"crate_id":17,"path":["object","macho","DylibModule32"],"kind":"struct"},"6:5698:7051":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","aiocb"],"kind":"struct"},"6:1609:6569":{"crate_id":6,"path":["libc","unix","linux_like","Dl_info"],"kind":"struct"},"5:7192:222":{"crate_id":5,"path":["alloc","string","String"],"kind":"struct"},"21:0:1063":{"crate_id":21,"path":["proc_macro"],"kind":"module"},"24:3228:232":{"crate_id":24,"path":["syn","token","Try"],"kind":"struct"},"22:975:3216":{"crate_id":22,"path":["proc_macro2","token_stream","IntoIter"],"kind":"struct"},"24:555:4991":{"crate_id":24,"path":["syn","error","SpanRange"],"kind":"struct"},"5:6948:14071":{"crate_id":5,"path":["alloc","alloc","AllocErrorPanicPayload"],"kind":"struct"},"1:3132:28457":{"crate_id":1,"path":["std","io","stdio","StderrRaw"],"kind":"struct"},"6:4882:6965":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_nl"],"kind":"struct"},"11:60:36569":{"crate_id":11,"path":["hashbrown","raw","bitmask","BitMaskIter"],"kind":"struct"},"6:1731:6646":{"crate_id":6,"path":["libc","unix","linux_like","utsname"],"kind":"struct"},"9:445:19805":{"crate_id":9,"path":["miniz_oxide","MZError"],"kind":"enum"},"18:574:5029":{"crate_id":18,"path":["memchr","memmem","twoway","Forward"],"kind":"struct"},"17:9772:5169":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbolTable"],"kind":"struct"},"5:780:4794":{"crate_id":5,"path":["alloc","collections","binary_heap","PeekMut"],"kind":"struct"},"2:2756:4067":{"crate_id":2,"path":["core","marker","FnPtr"],"kind":"trait"},"17:11628:5373":{"crate_id":17,"path":["object","elf","NoteHeader64"],"kind":"struct"},"2:9054:3362":{"crate_id":2,"path":["core","fmt","Octal"],"kind":"trait"},"2:2970:4415":{"crate_id":2,"path":["core","ops","generator","Generator"],"kind":"trait"},"1:5317:8938":{"crate_id":1,"path":["std","process","Child"],"kind":"struct"},"6:4422:6773":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_ramp_effect"],"kind":"struct"},"17:11573:5354":{"crate_id":17,"path":["object","elf","Verdaux"],"kind":"struct"},"5:6115:4828":{"crate_id":5,"path":["alloc","vec","drain_filter","drop","BackshiftOnDrop"],"kind":"struct"},"24:4196:3468":{"crate_id":24,"path":["syn","token","Percent"],"kind":"struct"},"11:1859:8069":{"crate_id":11,"path":["hashbrown","set","Difference"],"kind":"struct"},"2:2905:116":{"crate_id":2,"path":["core","ops","deref","Deref"],"kind":"trait"},"17:9696:5158":{"crate_id":17,"path":["object","read","elf","section","SectionTable"],"kind":"struct"},"9:325:6396":{"crate_id":9,"path":["miniz_oxide","inflate","core","LocalVars"],"kind":"struct"},"1:8746:184":{"crate_id":1,"path":["std","process","Output"],"kind":"struct"},"17:10142:21021":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandVariant"],"kind":"enum"},"6:6094:7232":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","semid_ds"],"kind":"struct"},"16:6876:6016":{"crate_id":16,"path":["gimli","read","loclists","DebugLoc"],"kind":"struct"},"17:10747:127":{"crate_id":17,"path":["object","read","Error"],"kind":"struct"},"2:30004:4253":{"crate_id":2,"path":["core","mem","maybe_uninit","MaybeUninit"],"kind":"union"},"24:552:7827":{"crate_id":24,"path":["syn","error","ErrorMessage"],"kind":"struct"},"2:21621:32466":{"crate_id":2,"path":["core","num","dec2flt","FloatErrorKind"],"kind":"enum"},"5:2186:8079":{"crate_id":5,"path":["alloc","collections","btree","navigate","LazyLeafRange"],"kind":"struct"},"17:11282:1800":{"crate_id":17,"path":["object","elf","Ident"],"kind":"struct"},"16:6146:192":{"crate_id":16,"path":["gimli","read","cfi","Pointer"],"kind":"enum"},"17:10626:7903":{"crate_id":17,"path":["object","read","pe","import","DelayLoadDescriptorIterator"],"kind":"struct"},"2:45059:7613":{"crate_id":2,"path":["core","core_arch","simd","m16x8"],"kind":"struct"},"17:12646:5569":{"crate_id":17,"path":["object","macho","ScatteredRelocationInfo"],"kind":"struct"},"6:7521:7421":{"crate_id":6,"path":["libc","unix","align","in6_addr"],"kind":"struct"},"17:0:2967":{"crate_id":17,"path":["object"],"kind":"module"},"1:11461:7789":{"crate_id":1,"path":["std","alloc","System"],"kind":"struct"},"17:9822:20940":{"crate_id":17,"path":["object","read","elf","relocation","RelocationSections"],"kind":"struct"},"2:40632:7549":{"crate_id":2,"path":["core","net","socket_addr","SocketAddrV4"],"kind":"struct"},"17:9683:20933":{"crate_id":17,"path":["object","read","elf","segment","ElfSegment"],"kind":"struct"},"1:10412:8835":{"crate_id":1,"path":["std","sys","unix","stdio","Stdin"],"kind":"struct"},"1:8244:8851":{"crate_id":1,"path":["std","os","unix","net","listener","Incoming"],"kind":"struct"},"1:11895:926":{"crate_id":1,"path":["std","never"],"kind":"primitive"},"2:41986:7562":{"crate_id":2,"path":["core","hash","sip","State"],"kind":"struct"},"17:13857:5954":{"crate_id":17,"path":["object","pe","ImageArchitectureEntry"],"kind":"struct"},"24:4522:1856":{"crate_id":24,"path":["syn","data","Fields"],"kind":"enum"},"1:4504:8910":{"crate_id":1,"path":["std","os","unix","thread","JoinHandleExt"],"kind":"trait"},"24:1533:2748":{"crate_id":24,"path":["syn","parse","Unexpected"],"kind":"enum"},"17:13865:5957":{"crate_id":17,"path":["object","pe","ImportObjectHeader"],"kind":"struct"},"6:4910:6977":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_alg"],"kind":"struct"},"5:1429:8339":{"crate_id":5,"path":["alloc","collections","btree","map","IntoKeys"],"kind":"struct"},"2:4357:3350":{"crate_id":2,"path":["core","cell","BorrowRefMut"],"kind":"struct"},"6:7446:7405":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_barrierattr_t"],"kind":"struct"},"1:938:8727":{"crate_id":1,"path":["std","collections","hash","map","RawEntryMut"],"kind":"enum"},"21:2247:3238":{"crate_id":21,"path":["proc_macro","bridge","DelimSpan"],"kind":"struct"},"24:921:2823":{"crate_id":24,"path":["syn","generics","TypeGenerics"],"kind":"struct"},"2:1801:3359":{"crate_id":2,"path":["core","ptr","non_null","NonNull"],"kind":"struct"},"2:43177:8204":{"crate_id":2,"path":["core","str","pattern","CharPredicateSearcher"],"kind":"struct"},"17:3142:20987":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbolIterator"],"kind":"struct"},"17:13821:5950":{"crate_id":17,"path":["object","pe","ImageSeparateDebugHeader"],"kind":"struct"},"21:368:4535":{"crate_id":21,"path":["proc_macro","bridge","rpc","PanicMessage"],"kind":"enum"},"2:22141:172":{"crate_id":2,"path":["core","num","nonzero","NonZeroU128"],"kind":"struct"},"17:8573:20888":{"crate_id":17,"path":["object","common","SectionFlags"],"kind":"enum"},"6:4877:6963":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_authinfo"],"kind":"struct"},"24:5454:3203":{"crate_id":24,"path":["syn","ty","TypePtr"],"kind":"struct"},"2:43262:8214":{"crate_id":2,"path":["core","str","lossy","Utf8Chunk"],"kind":"struct"},"24:901:36916":{"crate_id":24,"path":["syn","generics","ConstParams"],"kind":"struct"},"16:5000:6060":{"crate_id":16,"path":["gimli","constants","DwLne"],"kind":"struct"},"2:40467:153":{"crate_id":2,"path":["core","net","ip_addr","IpAddr"],"kind":"enum"},"18:113:24789":{"crate_id":18,"path":["memchr","memchr","iter","Memchr3"],"kind":"struct"},"2:20563:9013":{"crate_id":2,"path":["core","core_simd","elements","float","SimdFloat"],"kind":"trait"},"1:8489:3217":{"crate_id":1,"path":["std","path","Iter"],"kind":"struct"},"17:12098:5461":{"crate_id":17,"path":["object","macho","PreboundDylibCommand"],"kind":"struct"},"17:12372:5518":{"crate_id":17,"path":["object","macho","FilesetEntryCommand"],"kind":"struct"},"24:4540:3135":{"crate_id":24,"path":["syn","data","FieldsUnnamed"],"kind":"struct"},"1:10845:25955":{"crate_id":1,"path":["std","sys","unix","process","process_common","ProgramKind"],"kind":"enum"},"6:6634:7299":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_fpxreg"],"kind":"struct"},"2:11340:8185":{"crate_id":2,"path":["core","str","iter","MatchesInternal"],"kind":"struct"},"1:11911:735":{"crate_id":1,"path":["std","i64"],"kind":"primitive"},"24:4566:2007":{"crate_id":24,"path":["syn","derive","DataStruct"],"kind":"struct"},"17:9895:20953":{"crate_id":17,"path":["object","read","elf","hash","GnuHashTable"],"kind":"struct"},"17:420:5097":{"crate_id":17,"path":["object","read","any","Section"],"kind":"struct"},"1:8816:7769":{"crate_id":1,"path":["std","sync","mpsc","SendError"],"kind":"struct"},"21:2641:3235":{"crate_id":21,"path":["proc_macro","LexError"],"kind":"struct"},"18:719:5048":{"crate_id":18,"path":["memchr","memmem","NeedleInfo"],"kind":"struct"},"5:7272:4508":{"crate_id":5,"path":["alloc","vec","drain_filter","DrainFilter"],"kind":"struct"},"24:2956:2170":{"crate_id":24,"path":["syn","token","Macro"],"kind":"struct"},"17:10691:21056":{"crate_id":17,"path":["object","read","pe","resource","ResourceDirectoryEntryData"],"kind":"enum"},"2:8995:208":{"crate_id":2,"path":["core","fmt","Result"],"kind":"typedef"},"1:11033:7573":{"crate_id":1,"path":["std","sys","unix","time","Nanoseconds"],"kind":"struct"},"1:10222:27967":{"crate_id":1,"path":["std","sys","unix","process","process_common","Argv"],"kind":"struct"},"6:5752:7077":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","cmsghdr"],"kind":"struct"},"2:39631:3302":{"crate_id":2,"path":["core","iter","adapters","map","Map"],"kind":"struct"},"2:29970:4252":{"crate_id":2,"path":["core","mem","manually_drop","ManuallyDrop"],"kind":"struct"},"24:3330:3436":{"crate_id":24,"path":["syn","token","Use"],"kind":"struct"},"1:0:1372":{"crate_id":1,"path":["std"],"kind":"module"},"1:8397:7562":{"crate_id":1,"path":["std","path","State"],"kind":"enum"},"1:2547:4850":{"crate_id":1,"path":["std","io","buffered","bufwriter","flush_buf","BufGuard"],"kind":"struct"},"24:4341:3478":{"crate_id":24,"path":["syn","token","Shr"],"kind":"struct"},"21:998:231":{"crate_id":21,"path":["proc_macro","bridge","client","TokenStream"],"kind":"struct"},"2:43393:8223":{"crate_id":2,"path":["core","str","IsNotEmpty"],"kind":"struct"},"21:2710:3381":{"crate_id":21,"path":["proc_macro","LineColumn"],"kind":"struct"},"1:4574:7287":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt","st_ctime"],"kind":"foreign_type"},"24:2922:3422":{"crate_id":24,"path":["syn","token","Let"],"kind":"struct"},"16:5557:6007":{"crate_id":16,"path":["gimli","read","addr","DebugAddr"],"kind":"struct"},"24:2888:3420":{"crate_id":24,"path":["syn","token","Impl"],"kind":"struct"},"2:45583:7638":{"crate_id":2,"path":["core","core_arch","simd","i64x4"],"kind":"struct"},"6:531:6473":{"crate_id":6,"path":["libc","unix","hostent"],"kind":"struct"},"2:22372:7454":{"crate_id":2,"path":["core","num","nonzero","NonZeroIsize"],"kind":"struct"},"24:2769:3415":{"crate_id":24,"path":["syn","token","Else"],"kind":"struct"},"9:388:19806":{"crate_id":9,"path":["miniz_oxide","MZFlush"],"kind":"enum"},"21:2384:2468":{"crate_id":21,"path":["proc_macro","bridge","Literal"],"kind":"struct"},"5:3665:8734":{"crate_id":5,"path":["alloc","collections","linked_list","CursorMut"],"kind":"struct"},"1:6479:8963":{"crate_id":1,"path":["std","sync","poison","TryLockError"],"kind":"enum"},"24:4884:3161":{"crate_id":24,"path":["syn","expr","ExprReference"],"kind":"struct"},"17:13506:5844":{"crate_id":17,"path":["object","pe","ImageEpilogueDynamicRelocationHeader"],"kind":"struct"},"24:3143:3431":{"crate_id":24,"path":["syn","token","SelfValue"],"kind":"struct"},"21:54:4534":{"crate_id":21,"path":["proc_macro","bridge","buffer","Buffer"],"kind":"struct"},"17:9734:20931":{"crate_id":17,"path":["object","read","elf","section","ElfSection"],"kind":"struct"},"24:4479:3120":{"crate_id":24,"path":["syn","attr","Attribute"],"kind":"struct"},"1:5560:4869":{"crate_id":1,"path":["std","sync","mpsc","Sender"],"kind":"struct"},"6:540:6479":{"crate_id":6,"path":["libc","unix","iovec"],"kind":"struct"},"24:2854:3418":{"crate_id":24,"path":["syn","token","For"],"kind":"struct"},"2:21734:7453":{"crate_id":2,"path":["core","num","error","TryFromIntError"],"kind":"struct"},"2:38821:198":{"crate_id":2,"path":["core","ops","range","RangeFull"],"kind":"struct"},"6:6053:7206":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","sigset_t"],"kind":"struct"},"17:11069:20902":{"crate_id":17,"path":["object","read","CompressionFormat"],"kind":"enum"},"24:4484:3119":{"crate_id":24,"path":["syn","attr","AttrStyle"],"kind":"enum"},"17:975:20920":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbolIterator"],"kind":"struct"},"22:729:1800":{"crate_id":22,"path":["proc_macro2","fallback","Ident"],"kind":"struct"},"2:20379:34838":{"crate_id":2,"path":["core","core_simd","swizzle","rotate_lanes_left","Rotate"],"kind":"struct"},"1:10458:4180":{"crate_id":1,"path":["std","sys","unix","thread","Thread"],"kind":"struct"},"1:11013:7767":{"crate_id":1,"path":["std","sys","unix","process","process_inner","ExitStatusError"],"kind":"struct"},"6:5722:7067":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__timeval"],"kind":"struct"},"5:6997:3216":{"crate_id":5,"path":["alloc","collections","btree","set","IntoIter"],"kind":"struct"},"1:877:8066":{"crate_id":1,"path":["std","collections","hash","map","Keys"],"kind":"struct"},"16:7803:6188":{"crate_id":16,"path":["gimli","read","unit","UnitHeader"],"kind":"struct"},"6:1559:6536":{"crate_id":6,"path":["libc","unix","linux_like","addrinfo"],"kind":"struct"},"6:493:6448":{"crate_id":6,"path":["libc","unix","timespec"],"kind":"struct"},"24:5060:2438":{"crate_id":24,"path":["syn","generics","PredicateType"],"kind":"struct"},"5:1460:8733":{"crate_id":5,"path":["alloc","collections","btree","map","RangeMut"],"kind":"struct"},"2:31807:4068":{"crate_id":2,"path":["core","marker","PhantomPinned"],"kind":"struct"},"2:42754:8180":{"crate_id":2,"path":["core","str","iter","SplitN"],"kind":"struct"},"22:806:1864":{"crate_id":22,"path":["proc_macro2","imp","Span"],"kind":"enum"},"6:1663:6611":{"crate_id":6,"path":["libc","unix","linux_like","in6_rtmsg"],"kind":"struct"},"2:20813:9006":{"crate_id":2,"path":["core","core_simd","masks","to_bitmask","ToBitMask"],"kind":"trait"},"2:42967:8129":{"crate_id":2,"path":["core","str","iter","EscapeUnicode"],"kind":"struct"},"2:20680:8874":{"crate_id":2,"path":["core","core_simd","lane_count","sealed","Sealed"],"kind":"trait"},"1:3207:8838":{"crate_id":1,"path":["std","io","stdio","StdoutLock"],"kind":"struct"},"16:6767:8019":{"crate_id":16,"path":["gimli","read","line","IncompleteLineProgram"],"kind":"struct"},"1:6079:4859":{"crate_id":1,"path":["std","sync","mpmc","waker","Waker"],"kind":"struct"},"1:3126:27245":{"crate_id":1,"path":["std","io","stdio","StdinRaw"],"kind":"struct"},"2:43085:8201":{"crate_id":2,"path":["core","str","pattern","CharArraySearcher"],"kind":"struct"},"24:4508:3121":{"crate_id":24,"path":["syn","attr","MetaList"],"kind":"struct"},"17:11902:5431":{"crate_id":17,"path":["object","macho","SegmentCommand32"],"kind":"struct"},"1:846:3217":{"crate_id":1,"path":["std","collections","hash","map","Iter"],"kind":"struct"},"2:42477:7567":{"crate_id":2,"path":["core","slice","iter","ArrayWindows"],"kind":"struct"},"1:8506:8240":{"crate_id":1,"path":["std","path","StripPrefixError"],"kind":"struct"},"16:2378:5983":{"crate_id":16,"path":["gimli","common","DebugAbbrevOffset"],"kind":"struct"},"2:46648:7688":{"crate_id":2,"path":["core","core_arch","x86","__m512"],"kind":"struct"},"16:7259:3695":{"crate_id":16,"path":["gimli","read","op","Location"],"kind":"enum"},"6:5938:7178":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_entry"],"kind":"struct"},"2:10079:8100":{"crate_id":2,"path":["core","slice","iter","RSplit"],"kind":"struct"},"2:20729:7432":{"crate_id":2,"path":["core","core_simd","masks","mask_impl","Mask"],"kind":"struct"},"24:5343:3189":{"crate_id":24,"path":["syn","restriction","FieldMutability"],"kind":"enum"},"17:13477:5837":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation32V2"],"kind":"struct"},"17:12126:5465":{"crate_id":17,"path":["object","macho","ThreadCommand"],"kind":"struct"},"16:8269:127":{"crate_id":16,"path":["gimli","read","Error"],"kind":"enum"},"16:3749:6035":{"crate_id":16,"path":["gimli","constants","DwSect"],"kind":"struct"},"1:11229:8395":{"crate_id":1,"path":["std","sys_common","wtf8","Wtf8"],"kind":"struct"},"2:41095:89":{"crate_id":2,"path":["core","sync","atomic","AtomicU32"],"kind":"struct"},"2:42818:8184":{"crate_id":2,"path":["core","str","iter","RMatchIndices"],"kind":"struct"},"24:4423:3484":{"crate_id":24,"path":["syn","token","Tilde"],"kind":"struct"},"2:4235:3342":{"crate_id":2,"path":["core","cell","BorrowError"],"kind":"struct"},"17:12799:5591":{"crate_id":17,"path":["object","pe","ImageOs2Header"],"kind":"struct"},"2:4412:3353":{"crate_id":2,"path":["core","cell","SyncUnsafeCell"],"kind":"struct"},"24:4829:3149":{"crate_id":24,"path":["syn","expr","ExprForLoop"],"kind":"struct"},"2:40853:3221":{"crate_id":2,"path":["core","result","IterMut"],"kind":"struct"},"17:11193:5272":{"crate_id":17,"path":["object","archive","AixFileHeader"],"kind":"struct"},"2:43381:8220":{"crate_id":2,"path":["core","str","CharEscapeDefault"],"kind":"struct"},"24:4789:3140":{"crate_id":24,"path":["syn","expr","ExprBinary"],"kind":"struct"},"2:22042:173":{"crate_id":2,"path":["core","num","nonzero","NonZeroU16"],"kind":"struct"},"2:11324:8182":{"crate_id":2,"path":["core","str","iter","MatchIndicesInternal"],"kind":"struct"},"6:5967:7186":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","sifields_sigchld"],"kind":"struct"},"17:10377:5214":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbol"],"kind":"struct"},"2:40734:3216":{"crate_id":2,"path":["core","option","IntoIter"],"kind":"struct"},"24:1616:3335":{"crate_id":24,"path":["syn","parse","Nothing"],"kind":"struct"},"5:6967:4510":{"crate_id":5,"path":["alloc","collections","binary_heap","Drain"],"kind":"struct"},"16:2546:5990":{"crate_id":16,"path":["gimli","common","LocationListsOffset"],"kind":"struct"},"2:12411:139":{"crate_id":2,"path":["core","alloc","global","GlobalAlloc"],"kind":"trait"},"22:350:3235":{"crate_id":22,"path":["proc_macro2","imp","LexError"],"kind":"enum"},"2:43627:7576":{"crate_id":2,"path":["core","task","wake","RawWakerVTable"],"kind":"struct"},"6:7386:7401":{"crate_id":6,"path":["libc","unix","linux_like","linux","arch","generic","termios2"],"kind":"struct"},"1:8983:7774":{"crate_id":1,"path":["std","sync","mpmc","select","Operation"],"kind":"struct"},"24:4802:3143":{"crate_id":24,"path":["syn","expr","ExprCall"],"kind":"struct"},"6:1704:6635":{"crate_id":6,"path":["libc","unix","linux_like","mmsghdr"],"kind":"struct"},"2:7173:120":{"crate_id":2,"path":["core","iter","traits","double_ended","DoubleEndedIterator"],"kind":"trait"},"1:11089:7778":{"crate_id":1,"path":["std","sys","unix","time","inner","Instant"],"kind":"struct"},"1:4070:30062":{"crate_id":1,"path":["std","os","unix","net","ancillary","AncillaryDataIter"],"kind":"struct"},"2:44545:7591":{"crate_id":2,"path":["core","core_arch","simd","i32x2"],"kind":"struct"},"2:43034:14122":{"crate_id":2,"path":["core","str","pattern","SearchStep"],"kind":"enum"},"6:5878:7151":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ntptimeval"],"kind":"struct"},"1:4850:8918":{"crate_id":1,"path":["std","os","net","linux_ext","tcp","TcpStreamExt"],"kind":"trait"},"24:4365:3480":{"crate_id":24,"path":["syn","token","Slash"],"kind":"struct"},"6:4274:6695":{"crate_id":6,"path":["libc","unix","linux_like","linux","signalfd_siginfo"],"kind":"struct"},"18:671:24801":{"crate_id":18,"path":["memchr","memmem","FindRevIter"],"kind":"struct"},"1:7467:1877":{"crate_id":1,"path":["std","backtrace_rs","symbolize","Symbol"],"kind":"struct"},"17:13639:5899":{"crate_id":17,"path":["object","pe","ImageHotPatchHashes"],"kind":"struct"},"2:20841:7432":{"crate_id":2,"path":["core","core_simd","masks","Mask"],"kind":"struct"},"17:11861:5427":{"crate_id":17,"path":["object","macho","MachHeader64"],"kind":"struct"},"17:9628:20915":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdat"],"kind":"struct"},"6:62:14506":{"crate_id":6,"path":["libc","unix","DIR"],"kind":"enum"},"2:43405:7573":{"crate_id":2,"path":["core","time","Nanoseconds"],"kind":"struct"},"2:41255:92":{"crate_id":2,"path":["core","sync","atomic","AtomicUsize"],"kind":"struct"},"1:9064:217":{"crate_id":1,"path":["std","sync","rwlock","RwLockWriteGuard"],"kind":"struct"},"2:11375:8099":{"crate_id":2,"path":["core","str","iter","SplitInclusive"],"kind":"struct"},"16:5708:7927":{"crate_id":16,"path":["gimli","read","cfi","SectionBaseAddresses"],"kind":"struct"},"2:39326:8135":{"crate_id":2,"path":["core","char","EscapeDebug"],"kind":"struct"},"2:48568:9042":{"crate_id":2,"path":["core","core_simd","swizzle","Which"],"kind":"enum"},"24:4956:1808":{"crate_id":24,"path":["syn","generics","Generics"],"kind":"struct"},"2:20808:8874":{"crate_id":2,"path":["core","core_simd","masks","to_bitmask","sealed","Sealed"],"kind":"trait"},"16:7042:8035":{"crate_id":16,"path":["gimli","read","lookup","PubStuffHeader"],"kind":"struct"},"1:11897:1493":{"crate_id":1,"path":["std","unit"],"kind":"primitive"},"24:4550:1654":{"crate_id":24,"path":["syn","derive","DeriveInput"],"kind":"struct"},"2:2850:5011":{"crate_id":2,"path":["core","ops","bit","BitOrAssign"],"kind":"trait"},"17:11422:5324":{"crate_id":17,"path":["object","elf","Syminfo64"],"kind":"struct"},"5:4108:4817":{"crate_id":5,"path":["alloc","collections","vec_deque","into_iter","try_rfold","Guard"],"kind":"struct"},"22:816:1789":{"crate_id":22,"path":["proc_macro2","imp","Group"],"kind":"enum"},"2:42949:8135":{"crate_id":2,"path":["core","str","iter","EscapeDebug"],"kind":"struct"},"2:39672:3305":{"crate_id":2,"path":["core","iter","adapters","scan","Scan"],"kind":"struct"},"6:5813:7107":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_mmap_hdr"],"kind":"struct"},"5:1451:196":{"crate_id":5,"path":["alloc","collections","btree","map","Range"],"kind":"struct"},"17:10681:7906":{"crate_id":17,"path":["object","read","pe","resource","ResourceDirectoryTable"],"kind":"struct"},"24:5160:3184":{"crate_id":24,"path":["syn","mac","MacroDelimiter"],"kind":"enum"},"2:43576:209":{"crate_id":2,"path":["core","future","ResumeTy"],"kind":"struct"},"2:11301:8179":{"crate_id":2,"path":["core","str","iter","SplitNInternal"],"kind":"struct"},"24:5422:3195":{"crate_id":24,"path":["syn","ty","TypeArray"],"kind":"struct"},"4:0:2958":{"crate_id":4,"path":["rustc_std_workspace_core"],"kind":"module"},"2:1713:4459":{"crate_id":2,"path":["core","ptr","metadata","Pointee"],"kind":"trait"},"16:7065:8036":{"crate_id":16,"path":["gimli","read","lookup","PubStuffParser"],"kind":"struct"},"2:9732:220":{"crate_id":2,"path":["core","slice","index","SliceIndex"],"kind":"trait"},"6:4697:6866":{"crate_id":6,"path":["libc","unix","linux_like","linux","regmatch_t"],"kind":"struct"},"17:13419:5825":{"crate_id":17,"path":["object","pe","ImageResourceDirectoryString"],"kind":"struct"},"2:4121:3361":{"crate_id":2,"path":["core","cell","once","OnceCell"],"kind":"struct"},"2:39532:3286":{"crate_id":2,"path":["core","iter","adapters","cloned","Cloned"],"kind":"struct"},"1:4172:8889":{"crate_id":1,"path":["std","os","unix","net","datagram","UnixDatagram"],"kind":"struct"},"24:1405:1869":{"crate_id":24,"path":["syn","meta","ParseNestedMeta"],"kind":"struct"},"6:5728:7068":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","glob64_t"],"kind":"struct"},"1:11501:8261":{"crate_id":1,"path":["std","backtrace_rs","backtrace","Frame"],"kind":"struct"},"24:5299:2449":{"crate_id":24,"path":["syn","path","AngleBracketedGenericArguments"],"kind":"struct"},"2:40935:91":{"crate_id":2,"path":["core","sync","atomic","AtomicU8"],"kind":"struct"},"2:39304:3374":{"crate_id":2,"path":["core","char","EscapeDefault"],"kind":"struct"},"5:6229:4791":{"crate_id":5,"path":["alloc","vec","drain","drop","DropGuard"],"kind":"struct"},"2:5449:3299":{"crate_id":2,"path":["core","iter","adapters","flatten","FlatMap"],"kind":"struct"},"2:44647:7595":{"crate_id":2,"path":["core","core_arch","simd","u8x16"],"kind":"struct"},"17:9721:20932":{"crate_id":17,"path":["object","read","elf","section","ElfSectionIterator"],"kind":"struct"},"2:20413:34865":{"crate_id":2,"path":["core","core_simd","swizzle","interleave","Hi"],"kind":"struct"},"16:6218:1830":{"crate_id":16,"path":["gimli","read","dwarf","Unit"],"kind":"struct"},"17:10721:5230":{"crate_id":17,"path":["object","read","pe","rich","RichHeaderInfo"],"kind":"struct"},"2:2338:187":{"crate_id":2,"path":["core","cmp","PartialOrd"],"kind":"trait"},"6:4649:6843":{"crate_id":6,"path":["libc","unix","linux_like","linux","genlmsghdr"],"kind":"struct"},"1:1591:8070":{"crate_id":1,"path":["std","collections","hash","set","SymmetricDifference"],"kind":"struct"},"2:2573:115":{"crate_id":2,"path":["core","default","Default"],"kind":"trait"},"17:13316:5795":{"crate_id":17,"path":["object","pe","ImageThunkData64"],"kind":"struct"},"11:1836:3216":{"crate_id":11,"path":["hashbrown","set","IntoIter"],"kind":"struct"},"1:587:2272":{"crate_id":1,"path":["std","ascii","AsciiExt"],"kind":"trait"},"6:4328:6727":{"crate_id":6,"path":["libc","unix","linux_like","linux","if_nameindex"],"kind":"struct"},"16:4510:6045":{"crate_id":16,"path":["gimli","constants","DwDs"],"kind":"struct"},"6:4361:6745":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_id"],"kind":"struct"},"2:8291:14107":{"crate_id":2,"path":["core","panicking","assert_matches_failed","Pattern"],"kind":"struct"},"17:10465:21029":{"crate_id":17,"path":["object","read","pe","section","PeSegment"],"kind":"struct"},"6:4733:6885":{"crate_id":6,"path":["libc","unix","linux_like","linux","j1939_filter"],"kind":"struct"},"15:219:8315":{"crate_id":15,"path":["addr2line","RangeAttributes"],"kind":"struct"},"11:861:8730":{"crate_id":11,"path":["hashbrown","map","RawEntryBuilder"],"kind":"struct"},"6:6611:7292":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statvfs64"],"kind":"struct"},"6:4929:6985":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_user_dev"],"kind":"struct"},"24:1910:3215":{"crate_id":24,"path":["syn","punctuated","IntoPairs"],"kind":"struct"},"17:12072:5457":{"crate_id":17,"path":["object","macho","SubUmbrellaCommand"],"kind":"struct"},"1:3871:8858":{"crate_id":1,"path":["std","os","unix","ffi","os_str","OsStringExt"],"kind":"trait"},"6:1617:6574":{"crate_id":6,"path":["libc","unix","linux_like","lconv"],"kind":"struct"},"5:7087:3255":{"crate_id":5,"path":["alloc","collections","TryReserveError"],"kind":"struct"},"5:1410:8067":{"crate_id":5,"path":["alloc","collections","btree","map","Values"],"kind":"struct"},"17:12085:5459":{"crate_id":17,"path":["object","macho","SubLibraryCommand"],"kind":"struct"},"6:4408:6765":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_envelope"],"kind":"struct"},"2:8184:3699":{"crate_id":2,"path":["core","panic","unwind_safe","UnwindSafe"],"kind":"trait"},"2:39347:14162":{"crate_id":2,"path":["core","char","CaseMappingIter"],"kind":"enum"},"17:9933:7886":{"crate_id":17,"path":["object","read","elf","version","VersionTable"],"kind":"struct"},"6:4301:6718":{"crate_id":6,"path":["libc","unix","linux_like","linux","itimerspec"],"kind":"struct"},"20:0:1092":{"crate_id":20,"path":["quote"],"kind":"module"},"2:9050:111":{"crate_id":2,"path":["core","fmt","macros","Debug"],"kind":"proc_derive"},"24:5485:2207":{"crate_id":24,"path":["syn","ty","ReturnType"],"kind":"enum"},"2:42668:8100":{"crate_id":2,"path":["core","str","iter","RSplit"],"kind":"struct"},"17:13145:5754":{"crate_id":17,"path":["object","pe","ImageSymbolEx"],"kind":"struct"},"20:322:2470":{"crate_id":20,"path":["quote","spanned","Spanned"],"kind":"trait"},"1:8495:7765":{"crate_id":1,"path":["std","path","Ancestors"],"kind":"struct"},"6:4571:6819":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Phdr"],"kind":"struct"},"17:9098:20891":{"crate_id":17,"path":["object","read","any","SectionIterator"],"kind":"struct"},"1:3991:8867":{"crate_id":1,"path":["std","os","unix","fs","DirBuilderExt"],"kind":"trait"},"6:4805:6918":{"crate_id":6,"path":["libc","unix","linux_like","linux","in6_ifreq"],"kind":"struct"},"1:6888:8653":{"crate_id":1,"path":["std","sys_common","backtrace","_print","DisplayBacktrace"],"kind":"struct"},"16:6890:6017":{"crate_id":16,"path":["gimli","read","loclists","DebugLocLists"],"kind":"struct"},"11:646:3221":{"crate_id":11,"path":["hashbrown","map","IterMut"],"kind":"struct"},"17:12138:5466":{"crate_id":17,"path":["object","macho","RoutinesCommand32"],"kind":"struct"},"24:251:8628":{"crate_id":24,"path":["syn","attr","parsing","DisplayAttrStyle"],"kind":"struct"},"5:2166:34987":{"crate_id":5,"path":["alloc","collections","btree","navigate","LazyLeafHandle"],"kind":"enum"},"24:2650:99":{"crate_id":24,"path":["syn","token","Break"],"kind":"struct"},"17:11471:5331":{"crate_id":17,"path":["object","elf","Rela64"],"kind":"struct"},"2:38861:197":{"crate_id":2,"path":["core","ops","range","RangeFrom"],"kind":"struct"},"2:39602:3300":{"crate_id":2,"path":["core","iter","adapters","fuse","Fuse"],"kind":"struct"},"1:8347:7757":{"crate_id":1,"path":["std","path","Prefix"],"kind":"enum"},"22:14:24827":{"crate_id":22,"path":["proc_macro2","marker","ProcMacroAutoTraits"],"kind":"struct"},"5:6183:4510":{"crate_id":5,"path":["alloc","vec","drain","Drain"],"kind":"struct"},"17:8858:5146":{"crate_id":17,"path":["object","endian","I64Bytes"],"kind":"struct"},"2:48990:244":{"crate_id":2,"path":["core","core_simd","fmt","fmt","Wrapper"],"kind":"struct"},"2:1727:7429":{"crate_id":2,"path":["core","ptr","metadata","PtrComponents"],"kind":"struct"},"9:352:19820":{"crate_id":9,"path":["miniz_oxide","inflate","TINFLStatus"],"kind":"enum"},"24:5120:3178":{"crate_id":24,"path":["syn","lit","LitByte"],"kind":"struct"},"16:3640:5059":{"crate_id":16,"path":["gimli","arch","X86_64"],"kind":"struct"},"2:44462:7588":{"crate_id":2,"path":["core","core_arch","simd","u64x1"],"kind":"struct"},"1:11214:8256":{"crate_id":1,"path":["std","sys_common","wtf8","Wtf8Buf"],"kind":"struct"},"1:7535:4887":{"crate_id":1,"path":["std","backtrace_rs","Bomb"],"kind":"struct"},"2:42004:8167":{"crate_id":2,"path":["core","hash","sip","Sip24Rounds"],"kind":"struct"},"2:42204:8168":{"crate_id":2,"path":["core","slice","ascii","EscapeByte"],"kind":"struct"},"1:8970:8351":{"crate_id":1,"path":["std","sync","mpmc","list","ListToken"],"kind":"struct"},"24:3007:3425":{"crate_id":24,"path":["syn","token","Move"],"kind":"struct"},"21:479:4775":{"crate_id":21,"path":["proc_macro","bridge","server","RunningSameThreadGuard"],"kind":"struct"},"17:10416:21051":{"crate_id":17,"path":["object","read","pe","file","PeComdatIterator"],"kind":"struct"},"18:690:7875":{"crate_id":18,"path":["memchr","memmem","FinderRev"],"kind":"struct"},"16:7767:20826":{"crate_id":16,"path":["gimli","read","unit","UnitType"],"kind":"enum"},"6:5660:7024":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","statx"],"kind":"struct"},"16:6793:8020":{"crate_id":16,"path":["gimli","read","line","CompleteLineProgram"],"kind":"struct"},"16:2448:5986":{"crate_id":16,"path":["gimli","common","DebugArangesOffset"],"kind":"struct"},"2:40870:181":{"crate_id":2,"path":["core","sync","atomic","Ordering"],"kind":"enum"},"18:636:5047":{"crate_id":18,"path":["memchr","memmem","twoway","ApproximateByteSet"],"kind":"struct"},"1:6363:3265":{"crate_id":1,"path":["std","sync","once","Once"],"kind":"struct"},"1:5064:189":{"crate_id":1,"path":["std","path","PathBuf"],"kind":"struct"},"1:11915:1475":{"crate_id":1,"path":["std","u32"],"kind":"primitive"},"17:9545:5134":{"crate_id":17,"path":["object","read","coff","section","CoffSection"],"kind":"struct"},"2:44915:7609":{"crate_id":2,"path":["core","core_arch","simd","f32x4"],"kind":"struct"},"17:13309:5794":{"crate_id":17,"path":["object","pe","ImageImportByName"],"kind":"struct"},"2:39427:8770":{"crate_id":2,"path":["core","ffi","c_char"],"kind":"typedef"},"1:8170:8851":{"crate_id":1,"path":["std","net","tcp","Incoming"],"kind":"struct"},"2:2674:3389":{"crate_id":2,"path":["core","marker","Sized"],"kind":"trait"},"2:8778:8342":{"crate_id":2,"path":["core","fmt","builders","PadAdapterState"],"kind":"struct"},"5:3722:4508":{"crate_id":5,"path":["alloc","collections","linked_list","DrainFilter"],"kind":"struct"},"2:45113:7615":{"crate_id":2,"path":["core","core_arch","simd","m64x2"],"kind":"struct"},"2:6607:3293":{"crate_id":2,"path":["core","iter","adapters","zip","TrustedRandomAccessNoCoerce"],"kind":"trait"},"1:8922:106":{"crate_id":1,"path":["std","sync","mpmc","context","Context"],"kind":"struct"},"2:2992:3226":{"crate_id":2,"path":["core","ops","index","IndexMut"],"kind":"trait"},"11:697:8340":{"crate_id":11,"path":["hashbrown","map","IntoValues"],"kind":"struct"},"1:6182:4869":{"crate_id":1,"path":["std","sync","mpmc","Sender"],"kind":"struct"},"2:11105:8641":{"crate_id":2,"path":["core","slice","GetManyMutError"],"kind":"struct"},"2:39570:3297":{"crate_id":2,"path":["core","iter","adapters","filter","Filter"],"kind":"struct"},"17:11434:5325":{"crate_id":17,"path":["object","elf","Rel32"],"kind":"struct"},"17:8788:5144":{"crate_id":17,"path":["object","endian","I16Bytes"],"kind":"struct"},"17:11615:5369":{"crate_id":17,"path":["object","elf","NoteHeader32"],"kind":"struct"},"2:7565:34872":{"crate_id":2,"path":["core","net","display_buffer","DisplayBuffer"],"kind":"struct"},"2:1736:4458":{"crate_id":2,"path":["core","ptr","metadata","DynMetadata"],"kind":"struct"},"6:505:6453":{"crate_id":6,"path":["libc","unix","rusage"],"kind":"struct"},"24:3904:3448":{"crate_id":24,"path":["syn","token","Dollar"],"kind":"struct"},"2:39519:3294":{"crate_id":2,"path":["core","iter","adapters","chain","Chain"],"kind":"struct"},"1:7579:4192":{"crate_id":1,"path":["std","thread","local","AccessError"],"kind":"struct"},"5:4976:4823":{"crate_id":5,"path":["alloc","rc","Weak"],"kind":"struct"},"2:21:672":{"crate_id":2,"path":["core","format_args"],"kind":"macro"},"22:772:24809":{"crate_id":22,"path":["proc_macro2","extra","DelimSpanEnum"],"kind":"enum"},"1:4677:8876":{"crate_id":1,"path":["std","os","fd","raw","FromRawFd"],"kind":"trait"},"24:4512:3122":{"crate_id":24,"path":["syn","attr","MetaNameValue"],"kind":"struct"},"2:2229:98":{"crate_id":2,"path":["core","borrow","BorrowMut"],"kind":"trait"},"17:11339:5309":{"crate_id":17,"path":["object","elf","CompressionHeader32"],"kind":"struct"},"24:5304:2168":{"crate_id":24,"path":["syn","path","AssocType"],"kind":"struct"},"17:11785:5410":{"crate_id":17,"path":["object","macho","DyldCacheImageInfo"],"kind":"struct"},"6:5800:7101":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_pktinfo"],"kind":"struct"},"17:13053:5732":{"crate_id":17,"path":["object","pe","AnonObjectHeader"],"kind":"struct"},"2:2791:3245":{"crate_id":2,"path":["core","ops","arith","AddAssign"],"kind":"trait"},"2:12354:4859":{"crate_id":2,"path":["core","task","wake","Waker"],"kind":"struct"},"17:10516:5216":{"crate_id":17,"path":["object","read","pe","data_directory","DataDirectories"],"kind":"struct"},"2:5696:32873":{"crate_id":2,"path":["core","iter","adapters","flatten","TrustedConstSize"],"kind":"trait"},"24:548:208":{"crate_id":24,"path":["syn","error","Result"],"kind":"typedef"},"1:1574:4508":{"crate_id":1,"path":["std","collections","hash","set","DrainFilter"],"kind":"struct"},"2:48925:244":{"crate_id":2,"path":["core","core_simd","fmt","fmt","Wrapper"],"kind":"struct"},"1:3921:8860":{"crate_id":1,"path":["std","os","unix","fs","PermissionsExt"],"kind":"trait"},"6:6496:7244":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statfs"],"kind":"struct"},"2:1449:2204":{"crate_id":2,"path":["core","mem"],"kind":"module"},"17:12318:5511":{"crate_id":17,"path":["object","macho","PrebindCksumCommand"],"kind":"struct"},"17:10402:21042":{"crate_id":17,"path":["object","read","pe","file","PeFile"],"kind":"struct"},"2:45617:7639":{"crate_id":2,"path":["core","core_arch","simd","f32x8"],"kind":"struct"},"6:6059:7207":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","sysinfo"],"kind":"struct"},"24:5464:3205":{"crate_id":24,"path":["syn","ty","TypeSlice"],"kind":"struct"},"2:39611:3301":{"crate_id":2,"path":["core","iter","adapters","inspect","Inspect"],"kind":"struct"},"1:8085:3262":{"crate_id":1,"path":["std","io","util","Empty"],"kind":"struct"},"2:44869:7607":{"crate_id":2,"path":["core","core_arch","simd","i32x4"],"kind":"struct"},"1:3244:8833":{"crate_id":1,"path":["std","io","stdio","Stderr"],"kind":"struct"},"2:2933:2119":{"crate_id":2,"path":["core","ops","function","Fn"],"kind":"trait"},"1:2864:208":{"crate_id":1,"path":["std","io","error","Result"],"kind":"typedef"},"5:3273:4508":{"crate_id":5,"path":["alloc","collections","btree","set","DrainFilter"],"kind":"struct"},"6:4787:6907":{"crate_id":6,"path":["libc","unix","linux_like","linux","file_clone_range"],"kind":"struct"},"24:1851:3213":{"crate_id":24,"path":["syn","punctuated","Pairs"],"kind":"struct"},"17:9068:36641":{"crate_id":17,"path":["object","read","any","SegmentInternal"],"kind":"enum"},"24:1736:8659":{"crate_id":24,"path":["syn","print","TokensOrDefault"],"kind":"struct"},"6:5951:7182":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_seccomp"],"kind":"struct"},"24:1068:1873":{"crate_id":24,"path":["syn","lifetime","Lifetime"],"kind":"struct"},"5:6952:3216":{"crate_id":5,"path":["alloc","collections","binary_heap","IntoIter"],"kind":"struct"},"2:48951:244":{"crate_id":2,"path":["core","core_simd","fmt","fmt","Wrapper"],"kind":"struct"},"17:9670:20934":{"crate_id":17,"path":["object","read","elf","segment","ElfSegmentIterator"],"kind":"struct"},"5:2909:3426":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Mut"],"kind":"struct"},"5:6514:4514":{"crate_id":5,"path":["alloc","vec","set_len_on_drop","SetLenOnDrop"],"kind":"struct"},"6:5990:7192":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_data"],"kind":"union"},"24:1489:1871":{"crate_id":24,"path":["syn","parse","ParseStream"],"kind":"typedef"},"17:10885:7909":{"crate_id":17,"path":["object","read","SymbolMap"],"kind":"struct"},"17:9138:20892":{"crate_id":17,"path":["object","read","any","ComdatIterator"],"kind":"struct"},"13:226:6353":{"crate_id":13,"path":["std_detect","detect","cache","Initializer"],"kind":"struct"},"16:7244:36598":{"crate_id":16,"path":["gimli","read","op","OperationEvaluationResult"],"kind":"enum"},"24:5459:3204":{"crate_id":24,"path":["syn","ty","TypeReference"],"kind":"struct"},"1:1987:182":{"crate_id":1,"path":["std","ffi","os_str","OsStr"],"kind":"struct"},"11:1029:8732":{"crate_id":11,"path":["hashbrown","map","VacantEntry"],"kind":"struct"},"17:8683:5141":{"crate_id":17,"path":["object","endian","U16Bytes"],"kind":"struct"},"24:5271:2153":{"crate_id":24,"path":["syn","path","PathArguments"],"kind":"enum"},"2:42529:8105":{"crate_id":2,"path":["core","slice","iter","RChunks"],"kind":"struct"},"2:6654:32394":{"crate_id":2,"path":["core","iter","adapters","GenericShunt"],"kind":"struct"},"1:8420:7760":{"crate_id":1,"path":["std","path","PrefixComponent"],"kind":"struct"},"17:11721:5381":{"crate_id":17,"path":["object","macho","DyldCacheHeader"],"kind":"struct"},"9:481:19804":{"crate_id":9,"path":["miniz_oxide","DataFormat"],"kind":"enum"},"5:7034:3216":{"crate_id":5,"path":["alloc","collections","linked_list","IntoIter"],"kind":"struct"},"2:4386:3352":{"crate_id":2,"path":["core","cell","UnsafeCell"],"kind":"struct"},"6:4429:6776":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_condition_effect"],"kind":"struct"},"16:7669:6024":{"crate_id":16,"path":["gimli","read","str","DebugStr"],"kind":"struct"},"2:45317:7633":{"crate_id":2,"path":["core","core_arch","simd","u32x8"],"kind":"struct"},"2:11777:111":{"crate_id":2,"path":["core","str","lossy","Debug"],"kind":"struct"},"17:9498:5158":{"crate_id":17,"path":["object","read","coff","section","SectionTable"],"kind":"struct"},"11:98:8059":{"crate_id":11,"path":["hashbrown","raw","Bucket"],"kind":"struct"},"17:13015:5721":{"crate_id":17,"path":["object","pe","ImageNtHeaders64"],"kind":"struct"},"2:1611:580":{"crate_id":2,"path":["core","mem","drop"],"kind":"function"},"2:49003:244":{"crate_id":2,"path":["core","core_simd","fmt","fmt","Wrapper"],"kind":"struct"},"2:21500:8109":{"crate_id":2,"path":["core","num","bignum","tests","Big8x3"],"kind":"struct"},"24:3991:3453":{"crate_id":24,"path":["syn","token","EqEq"],"kind":"struct"},"16:5571:6010":{"crate_id":16,"path":["gimli","read","cfi","DebugFrame"],"kind":"struct"},"16:6544:6014":{"crate_id":16,"path":["gimli","read","line","DebugLine"],"kind":"struct"},"1:4121:8888":{"crate_id":1,"path":["std","os","unix","net","ancillary","Messages"],"kind":"struct"},"2:21091:9010":{"crate_id":2,"path":["core","core_simd","ord","SimdPartialOrd"],"kind":"trait"},"2:39990:3275":{"crate_id":2,"path":["core","iter","sources","successors","Successors"],"kind":"struct"},"2:2679:108":{"crate_id":2,"path":["core","marker","Copy"],"kind":"trait"},"2:6850:3262":{"crate_id":2,"path":["core","iter","sources","empty","Empty"],"kind":"struct"},"1:4638:8892":{"crate_id":1,"path":["std","os","linux","process","CommandExt"],"kind":"trait"},"16:7449:20822":{"crate_id":16,"path":["gimli","read","op","Evaluation"],"kind":"struct"},"16:5367:19923":{"crate_id":16,"path":["gimli","endianity","RunTimeEndian"],"kind":"enum"},"2:9967:8099":{"crate_id":2,"path":["core","slice","iter","SplitInclusive"],"kind":"struct"},"11:738:8067":{"crate_id":11,"path":["hashbrown","map","Values"],"kind":"struct"},"1:11914:1474":{"crate_id":1,"path":["std","u16"],"kind":"primitive"},"24:2548:3407":{"crate_id":24,"path":["syn","token","As"],"kind":"struct"},"6:4476:6801":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_ff_erase"],"kind":"struct"},"2:7251:157":{"crate_id":2,"path":["core","iter","traits","iterator","Iterator"],"kind":"trait"},"1:11508:8261":{"crate_id":1,"path":["std","backtrace_rs","backtrace","libunwind","Frame"],"kind":"enum"},"24:909:36915":{"crate_id":24,"path":["syn","generics","ConstParamsMut"],"kind":"struct"},"17:12902:5677":{"crate_id":17,"path":["object","pe","ImageFileHeader"],"kind":"struct"},"2:39279:8129":{"crate_id":2,"path":["core","char","EscapeUnicode"],"kind":"struct"},"24:3126:3430":{"crate_id":24,"path":["syn","token","SelfType"],"kind":"struct"},"24:93:8874":{"crate_id":24,"path":["syn","token","private","Sealed"],"kind":"trait"},"2:39588:8145":{"crate_id":2,"path":["core","iter","adapters","flatten","FlattenCompat"],"kind":"struct"},"17:9566:20894":{"crate_id":17,"path":["object","read","coff","symbol","SymbolIterator"],"kind":"struct"},"6:5000:7020":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_can"],"kind":"struct"},"6:4389:6757":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_mask"],"kind":"struct"},"16:7757:8044":{"crate_id":16,"path":["gimli","read","unit","DebugInfoUnitHeadersIter"],"kind":"struct"},"24:5439:3198":{"crate_id":24,"path":["syn","ty","TypeImplTrait"],"kind":"struct"},"1:10680:7702":{"crate_id":1,"path":["std","sys","unix","fs","FileTimes"],"kind":"struct"},"5:1055:35533":{"crate_id":5,"path":["alloc","collections","btree","borrow","DormantMutRef"],"kind":"struct"},"17:8971:128":{"crate_id":17,"path":["object","read","any","File"],"kind":"struct"},"16:5693:7924":{"crate_id":16,"path":["gimli","read","cfi","BaseAddresses"],"kind":"struct"},"6:4656:6844":{"crate_id":6,"path":["libc","unix","linux_like","linux","in6_pktinfo"],"kind":"struct"},"17:9748:5164":{"crate_id":17,"path":["object","read","elf","symbol","SymbolTable"],"kind":"struct"},"16:2572:5991":{"crate_id":16,"path":["gimli","common","DebugLocListsBase"],"kind":"struct"},"17:10823:5111":{"crate_id":17,"path":["object","read","SectionIndex"],"kind":"struct"},"2:8773:34871":{"crate_id":2,"path":["core","fmt","builders","PadAdapter"],"kind":"struct"},"6:6743:7362":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","shmid_ds"],"kind":"struct"},"11:387:36570":{"crate_id":11,"path":["hashbrown","raw","RawIterHash"],"kind":"struct"},"6:4720:6880":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_j1939"],"kind":"struct"},"16:5386:5139":{"crate_id":16,"path":["gimli","endianity","LittleEndian"],"kind":"struct"},"1:10863:7768":{"crate_id":1,"path":["std","sys","unix","process","process_common","ExitCode"],"kind":"struct"},"16:4596:6048":{"crate_id":16,"path":["gimli","constants","DwVis"],"kind":"struct"},"24:673:36878":{"crate_id":24,"path":["syn","expr","parsing","Precedence"],"kind":"enum"},"24:3950:3451":{"crate_id":24,"path":["syn","token","DotDotDot"],"kind":"struct"},"17:13376:5811":{"crate_id":17,"path":["object","pe","ImageBoundForwarderRef"],"kind":"struct"},"6:4751:6893":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_fprog"],"kind":"struct"},"24:4785:3139":{"crate_id":24,"path":["syn","expr","ExprAwait"],"kind":"struct"},"1:412:163":{"crate_id":1,"path":["std","thread","local","LocalKey"],"kind":"struct"},"24:5116:2001":{"crate_id":24,"path":["syn","lit","LitStr"],"kind":"struct"},"6:553:6485":{"crate_id":6,"path":["libc","unix","winsize"],"kind":"struct"},"24:3160:2515":{"crate_id":24,"path":["syn","token","Static"],"kind":"struct"},"1:7867:3336":{"crate_id":1,"path":["std","io","cursor","Cursor"],"kind":"struct"},"17:13121:5749":{"crate_id":17,"path":["object","pe","ImageSymbol"],"kind":"struct"},"2:39712:3291":{"crate_id":2,"path":["core","iter","adapters","step_by","StepBy"],"kind":"struct"},"2:2301:124":{"crate_id":2,"path":["core","cmp","Eq"],"kind":"trait"},"17:11372:5315":{"crate_id":17,"path":["object","elf","Sym32"],"kind":"struct"},"17:13667:5906":{"crate_id":17,"path":["object","pe","ImageAlpha64RuntimeFunctionEntry"],"kind":"struct"},"24:2081:2405":{"crate_id":24,"path":["syn","punctuated","Pair"],"kind":"enum"},"1:8437:8933":{"crate_id":1,"path":["std","path","Component"],"kind":"enum"},"21:2696:1864":{"crate_id":21,"path":["proc_macro","Span"],"kind":"struct"},"24:3800:3441":{"crate_id":24,"path":["syn","token","AndAnd"],"kind":"struct"},"17:10068:21018":{"crate_id":17,"path":["object","read","macho","file","MachOComdatIterator"],"kind":"struct"},"18:531:7869":{"crate_id":18,"path":["memchr","memmem","prefilter","PrefilterState"],"kind":"struct"},"1:949:8728":{"crate_id":1,"path":["std","collections","hash","map","RawOccupiedEntryMut"],"kind":"struct"},"16:4872:6056":{"crate_id":16,"path":["gimli","constants","DwDsc"],"kind":"struct"},"2:11264:8174":{"crate_id":2,"path":["core","str","iter","SplitInternal"],"kind":"struct"},"6:4921:6983":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_setup"],"kind":"struct"},"17:1787:20935":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbolIterator"],"kind":"struct"},"17:9312:20895":{"crate_id":17,"path":["object","read","any","DynamicRelocationIterator"],"kind":"struct"},"16:7411:6171":{"crate_id":16,"path":["gimli","read","op","Expression"],"kind":"struct"},"2:30010:4254":{"crate_id":2,"path":["core","mem","transmutability","Assume"],"kind":"struct"},"1:11919:1530":{"crate_id":1,"path":["std","usize"],"kind":"primitive"},"2:44793:7605":{"crate_id":2,"path":["core","core_arch","simd","i8x16"],"kind":"struct"},"22:735:2468":{"crate_id":22,"path":["proc_macro2","fallback","Literal"],"kind":"struct"},"1:4252:8890":{"crate_id":1,"path":["std","os","unix","net","listener","UnixListener"],"kind":"struct"},"24:5338:3190":{"crate_id":24,"path":["syn","restriction","VisRestricted"],"kind":"struct"},"5:3114:3217":{"crate_id":5,"path":["alloc","collections","btree","set","Iter"],"kind":"struct"},"24:4850:3154":{"crate_id":24,"path":["syn","expr","ExprLet"],"kind":"struct"},"18:538:5033":{"crate_id":18,"path":["memchr","memmem","rabinkarp","NeedleHash"],"kind":"struct"},"16:2524:5989":{"crate_id":16,"path":["gimli","common","DebugLineStrOffset"],"kind":"struct"},"1:10650:8246":{"crate_id":1,"path":["std","sys","unix","fs","StatxExtraFields"],"kind":"struct"},"1:10310:8945":{"crate_id":1,"path":["std","sys","unix","process","process_common","CommandArgs"],"kind":"struct"},"24:2820:3417":{"crate_id":24,"path":["syn","token","Final"],"kind":"struct"},"1:2357:8791":{"crate_id":1,"path":["std","fs","read_link"],"kind":"function"},"1:2537:4863":{"crate_id":1,"path":["std","io","buffered","bufwriter","BufWriter"],"kind":"struct"},"1:4560:8862":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt"],"kind":"trait"},"5:5754:4823":{"crate_id":5,"path":["alloc","sync","Weak"],"kind":"struct"},"5:6543:4516":{"crate_id":5,"path":["alloc","vec","in_place_drop","InPlaceDstBufDrop"],"kind":"struct"},"18:0:2968":{"crate_id":18,"path":["memchr"],"kind":"module"},"1:7644:8720":{"crate_id":1,"path":["std","backtrace","BacktraceStatus"],"kind":"enum"},"5:4673:659":{"crate_id":5,"path":["alloc","fmt"],"kind":"module"},"24:2718:115":{"crate_id":24,"path":["syn","token","Default"],"kind":"struct"},"16:5616:7918":{"crate_id":16,"path":["gimli","read","cfi","ParsedEhFrameHdr"],"kind":"struct"},"2:44961:7611":{"crate_id":2,"path":["core","core_arch","simd","f64x4"],"kind":"struct"},"2:9315:8096":{"crate_id":2,"path":["core","hash","BuildHasherDefault"],"kind":"struct"},"5:0:284":{"crate_id":5,"path":["alloc"],"kind":"module"},"17:11544:5345":{"crate_id":17,"path":["object","elf","Versym"],"kind":"struct"},"16:6442:7990":{"crate_id":16,"path":["gimli","read","aranges","ArangeEntry"],"kind":"struct"},"1:10833:8943":{"crate_id":1,"path":["std","sys","unix","process","process_common","Stdio"],"kind":"enum"},"16:4624:6049":{"crate_id":16,"path":["gimli","constants","DwVirtuality"],"kind":"struct"},"5:271:4791":{"crate_id":5,"path":["alloc","boxed","thin","drop","DropGuard"],"kind":"struct"},"16:6696:20816":{"crate_id":16,"path":["gimli","read","line","ColumnType"],"kind":"enum"},"2:43102:8202":{"crate_id":2,"path":["core","str","pattern","CharArrayRefSearcher"],"kind":"struct"},"2:2840:3478":{"crate_id":2,"path":["core","ops","bit","Shr"],"kind":"trait"},"1:4108:8887":{"crate_id":1,"path":["std","os","unix","net","ancillary","AncillaryData"],"kind":"enum"},"1:2359:8792":{"crate_id":1,"path":["std","fs","canonicalize"],"kind":"function"},"1:8975:1853":{"crate_id":1,"path":["std","sync","mpmc","select","Token"],"kind":"struct"},"2:43150:8203":{"crate_id":2,"path":["core","str","pattern","CharSliceSearcher"],"kind":"struct"},"2:42718:8178":{"crate_id":2,"path":["core","str","iter","RSplitTerminator"],"kind":"struct"},"1:7791:8800":{"crate_id":1,"path":["std","fs","ReadDir"],"kind":"struct"},"0:0:1677":{"crate_id":0,"path":["serde_derive"],"kind":"module"},"16:3446:6033":{"crate_id":16,"path":["gimli","arch","RiscV"],"kind":"struct"},"5:7146:32481":{"crate_id":5,"path":["alloc","ffi","c_str","FromBytesWithNulErrorKind"],"kind":"enum"},"1:7859:8649":{"crate_id":1,"path":["std","io","buffered","IntoInnerError"],"kind":"struct"},"16:7859:20827":{"crate_id":16,"path":["gimli","read","unit","AttributeValue"],"kind":"enum"},"16:4728:6051":{"crate_id":16,"path":["gimli","constants","DwAddr"],"kind":"struct"},"24:5329:3191":{"crate_id":24,"path":["syn","restriction","Visibility"],"kind":"enum"},"17:8310:20880":{"crate_id":17,"path":["object","common","SectionKind"],"kind":"enum"},"17:12033:5453":{"crate_id":17,"path":["object","macho","DylibCommand"],"kind":"struct"},"6:4841:6939":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_sndinfo"],"kind":"struct"},"17:13812:5948":{"crate_id":17,"path":["object","pe","ImageFunctionEntry64"],"kind":"struct"},"5:3916:4510":{"crate_id":5,"path":["alloc","collections","vec_deque","drain","Drain"],"kind":"struct"},"5:6302:3216":{"crate_id":5,"path":["alloc","vec","into_iter","IntoIter"],"kind":"struct"},"2:8185:3698":{"crate_id":2,"path":["core","panic","unwind_safe","RefUnwindSafe"],"kind":"trait"},"6:4396:6760":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_replay"],"kind":"struct"},"6:4781:6904":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlattr"],"kind":"struct"},"11:1120:19884":{"crate_id":11,"path":["hashbrown","map","VacantEntryRef"],"kind":"struct"},"2:40726:3221":{"crate_id":2,"path":["core","option","IterMut"],"kind":"struct"},"5:812:4797":{"crate_id":5,"path":["alloc","collections","binary_heap","RebuildOnDrop"],"kind":"struct"},"17:11446:5328":{"crate_id":17,"path":["object","elf","Rela32"],"kind":"struct"},"1:11070:7787":{"crate_id":1,"path":["std","sys","unix","time","Timespec"],"kind":"struct"},"16:8214:2545":{"crate_id":16,"path":["gimli","read","value","Value"],"kind":"enum"},"6:6764:7374":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ptrace_rseq_configuration"],"kind":"struct"},"17:12388:5520":{"crate_id":17,"path":["object","macho","EncryptionInfoCommand32"],"kind":"struct"},"11:1044:19882":{"crate_id":11,"path":["hashbrown","map","EntryRef"],"kind":"enum"},"15:180:19905":{"crate_id":15,"path":["addr2line","LocationRangeIter"],"kind":"struct"},"1:4733:4867":{"crate_id":1,"path":["std","os","fd","owned","OwnedFd"],"kind":"struct"},"17:12331:5513":{"crate_id":17,"path":["object","macho","UuidCommand"],"kind":"struct"},"16:7635:6177":{"crate_id":16,"path":["gimli","read","rnglists","RawRange"],"kind":"struct"},"24:5008:3172":{"crate_id":24,"path":["syn","generics","BoundLifetimes"],"kind":"struct"},"17:12158:5469":{"crate_id":17,"path":["object","macho","RoutinesCommand64"],"kind":"struct"},"24:4794:3141":{"crate_id":24,"path":["syn","expr","ExprBlock"],"kind":"struct"},"24:4861:3156":{"crate_id":24,"path":["syn","expr","ExprMacro"],"kind":"struct"},"17:10257:20986":{"crate_id":17,"path":["object","read","macho","segment","MachOSegmentIterator"],"kind":"struct"},"11:632:3217":{"crate_id":11,"path":["hashbrown","map","Iter"],"kind":"struct"},"16:8109:8055":{"crate_id":16,"path":["gimli","read","unit","EntriesTree"],"kind":"struct"},"5:3988:3221":{"crate_id":5,"path":["alloc","collections","vec_deque","iter_mut","IterMut"],"kind":"struct"},"2:43584:193":{"crate_id":2,"path":["core","task","poll","Poll"],"kind":"enum"},"5:7005:196":{"crate_id":5,"path":["alloc","collections","btree","set","Range"],"kind":"struct"},"5:1401:8066":{"crate_id":5,"path":["alloc","collections","btree","map","Keys"],"kind":"struct"},"1:8151:2739":{"crate_id":1,"path":["std","io","Bytes"],"kind":"struct"},"17:8283:20879":{"crate_id":17,"path":["object","common","BinaryFormat"],"kind":"enum"},"2:4091:3360":{"crate_id":2,"path":["core","cell","lazy","LazyCell"],"kind":"struct"},"24:1332:3340":{"crate_id":24,"path":["syn","lookahead","Peek"],"kind":"trait"},"1:7796:8233":{"crate_id":1,"path":["std","fs","OpenOptions"],"kind":"struct"},"1:6326:27645":{"crate_id":1,"path":["std","sync","mutex","fmt","LockedPlaceholder"],"kind":"struct"},"2:46701:7691":{"crate_id":2,"path":["core","core_arch","x86","__m256bh"],"kind":"struct"},"2:39227:32477":{"crate_id":2,"path":["core","char","convert","CharErrorKind"],"kind":"enum"},"20:407:3875":{"crate_id":20,"path":["quote","__private","RepInterp"],"kind":"struct"},"17:12536:5548":{"crate_id":17,"path":["object","macho","EntryPointCommand"],"kind":"struct"},"24:4935:2266":{"crate_id":24,"path":["syn","expr","Index"],"kind":"struct"},"24:5056:3174":{"crate_id":24,"path":["syn","generics","PredicateLifetime"],"kind":"struct"},"6:1571:6545":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_ll"],"kind":"struct"},"1:9088:7779":{"crate_id":1,"path":["std","time","SystemTime"],"kind":"struct"},"1:8917:8349":{"crate_id":1,"path":["std","sync","mpmc","array","ArrayToken"],"kind":"struct"},"2:41737:71":{"crate_id":2,"path":["core","fmt","ArgumentV1"],"kind":"struct"},"6:6541:7268":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stack_t"],"kind":"struct"},"1:11867:8722":{"crate_id":1,"path":["std","backtrace_rs","types","BytesOrWideString"],"kind":"enum"},"17:11585:5357":{"crate_id":17,"path":["object","elf","Verneed"],"kind":"struct"},"2:44723:7603":{"crate_id":2,"path":["core","core_arch","simd","u32x4"],"kind":"struct"},"1:3983:8865":{"crate_id":1,"path":["std","os","unix","fs","DirEntryExt2"],"kind":"trait"},"17:8389:20882":{"crate_id":17,"path":["object","common","SymbolKind"],"kind":"enum"},"16:3585:6034":{"crate_id":16,"path":["gimli","arch","X86"],"kind":"struct"},"2:46576:7682":{"crate_id":2,"path":["core","core_arch","x86","__m128"],"kind":"struct"},"6:4416:6770":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_constant_effect"],"kind":"struct"},"2:21585:7436":{"crate_id":2,"path":["core","num","dec2flt","number","Number"],"kind":"struct"},"22:783:231":{"crate_id":22,"path":["proc_macro2","imp","TokenStream"],"kind":"enum"},"24:3092:3349":{"crate_id":24,"path":["syn","token","Ref"],"kind":"struct"},"11:0:2962":{"crate_id":11,"path":["hashbrown"],"kind":"module"},"2:42208:8169":{"crate_id":2,"path":["core","slice","ascii","EscapeAscii"],"kind":"struct"},"16:2931:19950":{"crate_id":16,"path":["gimli","common","UnitSectionOffset"],"kind":"enum"},"6:1604:6567":{"crate_id":6,"path":["libc","unix","linux_like","sched_param"],"kind":"struct"},"1:9378:8800":{"crate_id":1,"path":["std","sys","unix","fs","ReadDir"],"kind":"struct"},"5:3537:3221":{"crate_id":5,"path":["alloc","collections","linked_list","IterMut"],"kind":"struct"},"1:6230:204":{"crate_id":1,"path":["std","sync","mpmc","Receiver"],"kind":"struct"},"24:4015:3455":{"crate_id":24,"path":["syn","token","Ge"],"kind":"struct"},"6:4673:6854":{"crate_id":6,"path":["libc","unix","linux_like","linux","inotify_event"],"kind":"struct"},"1:11862:8355":{"crate_id":1,"path":["std","backtrace_rs","symbolize","gimli","Cache"],"kind":"struct"},"2:1895:4417":{"crate_id":2,"path":["core","ptr","unique","Unique"],"kind":"struct"},"6:5805:7102":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_mmap_req"],"kind":"struct"},"5:3155:8068":{"crate_id":5,"path":["alloc","collections","btree","set","Intersection"],"kind":"struct"},"16:6981:20819":{"crate_id":16,"path":["gimli","read","loclists","LocListIter"],"kind":"struct"},"5:2902:2038":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Owned"],"kind":"enum"},"6:5959:7184":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ptrace_syscall_info"],"kind":"struct"},"16:7711:6180":{"crate_id":16,"path":["gimli","read","UnitOffset"],"kind":"struct"},"17:10283:5209":{"crate_id":17,"path":["object","read","macho","segment","MachOSegmentInternal"],"kind":"struct"},"24:5442:3199":{"crate_id":24,"path":["syn","ty","TypeInfer"],"kind":"struct"},"24:1133:7828":{"crate_id":24,"path":["syn","lit","LitRepr"],"kind":"struct"},"2:43377:8219":{"crate_id":2,"path":["core","str","CharEscapeUnicode"],"kind":"struct"},"6:1583:6553":{"crate_id":6,"path":["libc","unix","linux_like","fd_set"],"kind":"struct"},"21:2772:2180":{"crate_id":21,"path":["proc_macro","Punct"],"kind":"struct"},"17:13169:5756":{"crate_id":17,"path":["object","pe","ImageAuxSymbolTokenDef"],"kind":"struct"},"2:41996:8166":{"crate_id":2,"path":["core","hash","sip","Sip13Rounds"],"kind":"struct"},"6:4757:6894":{"crate_id":6,"path":["libc","unix","linux_like","linux","seccomp_data"],"kind":"struct"},"2:45347:7634":{"crate_id":2,"path":["core","core_arch","simd","u64x4"],"kind":"struct"},"17:12483:5544":{"crate_id":17,"path":["object","macho","LinkerOptionCommand"],"kind":"struct"},"1:3205:8837":{"crate_id":1,"path":["std","io","stdio","Stdout"],"kind":"struct"},"2:3931:4817":{"crate_id":2,"path":["core","array","Guard"],"kind":"struct"},"17:9886:20954":{"crate_id":17,"path":["object","read","elf","hash","HashTable"],"kind":"struct"},"16:3030:6028":{"crate_id":16,"path":["gimli","common","DwoId"],"kind":"struct"},"2:21661:32456":{"crate_id":2,"path":["core","num","flt2dec","decoder","FullDecoded"],"kind":"enum"},"2:30026:67":{"crate_id":2,"path":["core","ptr","alignment","Alignment"],"kind":"struct"},"2:38986:7531":{"crate_id":2,"path":["core","any","TypeId"],"kind":"struct"},"16:2642:5994":{"crate_id":16,"path":["gimli","common","DebugMacroOffset"],"kind":"struct"},"2:45507:7636":{"crate_id":2,"path":["core","core_arch","simd","i16x16"],"kind":"struct"},"2:3976:33007":{"crate_id":2,"path":["core","asserting","TryCaptureWithoutDebug"],"kind":"struct"},"2:8610:86":{"crate_id":2,"path":["core","sync","atomic","AtomicPtr"],"kind":"struct"},"6:4900:6976":{"crate_id":6,"path":["libc","unix","linux_like","linux","dirent64"],"kind":"struct"},"24:4781:3138":{"crate_id":24,"path":["syn","expr","ExprAsync"],"kind":"struct"},"2:10186:14102":{"crate_id":2,"path":["core","slice","iter","SplitNMut"],"kind":"struct"},"2:46587:7683":{"crate_id":2,"path":["core","core_arch","x86","__m128d"],"kind":"struct"},"24:4841:3152":{"crate_id":24,"path":["syn","expr","ExprIndex"],"kind":"struct"},"6:4890:6970":{"crate_id":6,"path":["libc","unix","linux_like","linux","dirent"],"kind":"struct"},"1:8134:3294":{"crate_id":1,"path":["std","io","Chain"],"kind":"struct"},"11:1003:8731":{"crate_id":11,"path":["hashbrown","map","OccupiedEntry"],"kind":"struct"},"2:42538:14099":{"crate_id":2,"path":["core","slice","iter","RChunksMut"],"kind":"struct"},"16:5963:7952":{"crate_id":16,"path":["gimli","read","cfi","RegisterRuleIter"],"kind":"struct"},"2:7094:3283":{"crate_id":2,"path":["core","iter","traits","accum","Sum"],"kind":"trait"},"21:2334:1800":{"crate_id":21,"path":["proc_macro","bridge","Ident"],"kind":"struct"},"2:44292:7581":{"crate_id":2,"path":["core","core_arch","simd","u8x4"],"kind":"struct"},"6:119:14560":{"crate_id":6,"path":["libc","unix","FILE"],"kind":"enum"},"17:9959:7889":{"crate_id":17,"path":["object","read","elf","version","VerdauxIterator"],"kind":"struct"},"24:2633:1847":{"crate_id":24,"path":["syn","token","Box"],"kind":"struct"},"17:12194:5475":{"crate_id":17,"path":["object","macho","DysymtabCommand"],"kind":"struct"},"24:3974:124":{"crate_id":24,"path":["syn","token","Eq"],"kind":"struct"},"21:967:4550":{"crate_id":21,"path":["proc_macro","bridge","client","FreeFunctions"],"kind":"struct"},"1:10205:8942":{"crate_id":1,"path":["std","sys","unix","process","process_common","Command"],"kind":"struct"},"24:869:36912":{"crate_id":24,"path":["syn","generics","Lifetimes"],"kind":"struct"},"17:9409:20909":{"crate_id":17,"path":["object","read","archive","Members"],"kind":"enum"},"17:12046:5454":{"crate_id":17,"path":["object","macho","SubFrameworkCommand"],"kind":"struct"},"24:5280:2156":{"crate_id":24,"path":["syn","path","GenericArgument"],"kind":"enum"},"2:41685:109":{"crate_id":2,"path":["core","fmt","rt","Count"],"kind":"enum"},"17:13181:5759":{"crate_id":17,"path":["object","pe","ImageAuxSymbolFunction"],"kind":"struct"},"24:2939:3423":{"crate_id":24,"path":["syn","token","Loop"],"kind":"struct"},"2:2681:226":{"crate_id":2,"path":["core","marker","Sync"],"kind":"trait"},"16:2786:6000":{"crate_id":16,"path":["gimli","common","DebugStrOffsetsBase"],"kind":"struct"},"2:42456:8104":{"crate_id":2,"path":["core","slice","iter","ChunksExact"],"kind":"struct"},"21:2432:1865":{"crate_id":21,"path":["proc_macro","bridge","TokenTree"],"kind":"enum"},"14:221:6306":{"crate_id":14,"path":["rustc_demangle","SizeLimitExhausted"],"kind":"struct"},"24:1506:3326":{"crate_id":24,"path":["syn","parse","StepCursor"],"kind":"struct"},"9:52:8319":{"crate_id":9,"path":["miniz_oxide","inflate","core","DecompressorOxide"],"kind":"struct"},"16:2720:5997":{"crate_id":16,"path":["gimli","common","DebugRngListsBase"],"kind":"struct"},"11:1872:1837":{"crate_id":11,"path":["hashbrown","set","Union"],"kind":"struct"},"16:8047:6224":{"crate_id":16,"path":["gimli","read","unit","AttrsIter"],"kind":"struct"},"1:11909:733":{"crate_id":1,"path":["std","i16"],"kind":"primitive"},"16:4818:6054":{"crate_id":16,"path":["gimli","constants","DwInl"],"kind":"struct"},"24:3870:3446":{"crate_id":24,"path":["syn","token","Colon"],"kind":"struct"},"18:707:7878":{"crate_id":18,"path":["memchr","memmem","Searcher"],"kind":"struct"},"17:9557:5164":{"crate_id":17,"path":["object","read","coff","symbol","SymbolTable"],"kind":"struct"},"21:1205:194":{"crate_id":21,"path":["proc_macro","bridge","client","ProcMacro"],"kind":"enum"},"16:4480:6044":{"crate_id":16,"path":["gimli","constants","DwLle"],"kind":"struct"},"16:5677:20808":{"crate_id":16,"path":["gimli","read","cfi","CieOffsetEncoding"],"kind":"enum"},"2:9899:3221":{"crate_id":2,"path":["core","slice","iter","IterMut"],"kind":"struct"},"17:13219:5773":{"crate_id":17,"path":["object","pe","ImageAuxSymbolSection"],"kind":"struct"},"17:9839:20928":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdat"],"kind":"struct"},"11:1518:19885":{"crate_id":11,"path":["hashbrown","rustc_entry","RustcEntry"],"kind":"enum"},"17:12923:5685":{"crate_id":17,"path":["object","pe","ImageOptionalHeader32"],"kind":"struct"},"16:8025:3120":{"crate_id":16,"path":["gimli","read","unit","Attribute"],"kind":"struct"},"24:5448:3202":{"crate_id":24,"path":["syn","ty","TypeParen"],"kind":"struct"},"21:1072:1864":{"crate_id":21,"path":["proc_macro","bridge","client","Span"],"kind":"struct"},"9:421:19807":{"crate_id":9,"path":["miniz_oxide","MZStatus"],"kind":"enum"},"1:11917:1473":{"crate_id":1,"path":["std","u128"],"kind":"primitive"},"6:487:6445":{"crate_id":6,"path":["libc","unix","timeval"],"kind":"struct"},"16:5305:6064":{"crate_id":16,"path":["gimli","constants","DwOp"],"kind":"struct"},"2:9722:8874":{"crate_id":2,"path":["core","slice","index","private_slice_index","Sealed"],"kind":"trait"},"1:5683:8958":{"crate_id":1,"path":["std","sync","barrier","Barrier"],"kind":"struct"},"1:10710:7743":{"crate_id":1,"path":["std","sys","unix","io","IoSlice"],"kind":"struct"},"1:4756:8872":{"crate_id":1,"path":["std","os","fd","owned","AsFd"],"kind":"trait"},"6:5890:7156":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","regex_t"],"kind":"struct"},"23:0:3089":{"crate_id":23,"path":["unicode_ident"],"kind":"module"},"6:6594:7291":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statfs64"],"kind":"struct"},"17:9218:5164":{"crate_id":17,"path":["object","read","any","SymbolTable"],"kind":"struct"},"1:6403:4880":{"crate_id":1,"path":["std","sync","once_lock","OnceLock"],"kind":"struct"},"2:22273:169":{"crate_id":2,"path":["core","num","nonzero","NonZeroI32"],"kind":"struct"},"21:405:36730":{"crate_id":21,"path":["proc_macro","bridge","scoped_cell","RefMutL"],"kind":"struct"},"24:4517:1814":{"crate_id":24,"path":["syn","data","Variant"],"kind":"struct"},"2:4240:3343":{"crate_id":2,"path":["core","cell","BorrowMutError"],"kind":"struct"},"16:6460:6009":{"crate_id":16,"path":["gimli","read","index","DebugCuIndex"],"kind":"struct"},"14:0:2964":{"crate_id":14,"path":["rustc_demangle"],"kind":"module"},"14:31:8630":{"crate_id":14,"path":["rustc_demangle","v0","Demangle"],"kind":"struct"},"2:43640:159":{"crate_id":2,"path":["core","alloc","layout","Layout"],"kind":"struct"},"1:678:8719":{"crate_id":1,"path":["std","backtrace","LazilyResolvedCapture"],"kind":"struct"},"6:481:6442":{"crate_id":6,"path":["libc","unix","utimbuf"],"kind":"struct"},"24:4904:3166":{"crate_id":24,"path":["syn","expr","ExprTryBlock"],"kind":"struct"},"5:6533:4515":{"crate_id":5,"path":["alloc","vec","in_place_drop","InPlaceDrop"],"kind":"struct"},"2:41015:88":{"crate_id":2,"path":["core","sync","atomic","AtomicU16"],"kind":"struct"},"2:44600:7594":{"crate_id":2,"path":["core","core_arch","simd","f64x1"],"kind":"struct"},"1:7702:1953":{"crate_id":1,"path":["std","error","private","Internal"],"kind":"struct"},"1:5436:8943":{"crate_id":1,"path":["std","process","Stdio"],"kind":"struct"},"2:43239:8206":{"crate_id":2,"path":["core","str","pattern","EmptyNeedle"],"kind":"struct"},"1:11912:731":{"crate_id":1,"path":["std","i128"],"kind":"primitive"},"21:1828:4531":{"crate_id":21,"path":["proc_macro","bridge","Marked"],"kind":"struct"},"6:1687:6628":{"crate_id":6,"path":["libc","unix","linux_like","arpreq_old"],"kind":"struct"},"16:4904:6057":{"crate_id":16,"path":["gimli","constants","DwIdx"],"kind":"struct"},"16:7529:6022":{"crate_id":16,"path":["gimli","read","rnglists","DebugRanges"],"kind":"struct"},"17:11391:5320":{"crate_id":17,"path":["object","elf","Sym64"],"kind":"struct"},"2:20432:34870":{"crate_id":2,"path":["core","core_simd","swizzle","deinterleave","Even"],"kind":"struct"},"2:6518:2590":{"crate_id":2,"path":["core","iter","adapters","zip","zip"],"kind":"function"},"17:13194:5765":{"crate_id":17,"path":["object","pe","ImageAuxSymbolFunctionBeginEnd"],"kind":"struct"},"6:1509:6512":{"crate_id":6,"path":["libc","unix","linux_like","in_addr"],"kind":"struct"},"2:38806:8123":{"crate_id":2,"path":["core","ops","index_range","IndexRange"],"kind":"struct"},"2:4000:103":{"crate_id":2,"path":["core","asserting","Capture"],"kind":"struct"},"2:9530:4850":{"crate_id":2,"path":["core","slice","sort","merge_sort","BufGuard"],"kind":"struct"},"24:4864:3157":{"crate_id":24,"path":["syn","expr","ExprMatch"],"kind":"struct"},"1:11899:1037":{"crate_id":1,"path":["std","pointer"],"kind":"primitive"},"24:94:4136":{"crate_id":24,"path":["syn","token","private","WithSpan"],"kind":"struct"},"5:7040:3216":{"crate_id":5,"path":["alloc","collections","vec_deque","into_iter","IntoIter"],"kind":"struct"},"17:13488:5841":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation64V2"],"kind":"struct"},"17:9973:7890":{"crate_id":17,"path":["object","read","elf","version","VerneedIterator"],"kind":"struct"},"11:274:8060":{"crate_id":11,"path":["hashbrown","raw","RawIterRange"],"kind":"struct"},"24:2030:3223":{"crate_id":24,"path":["syn","punctuated","PrivateIterMut"],"kind":"struct"},"24:4816:3146":{"crate_id":24,"path":["syn","expr","ExprConst"],"kind":"struct"},"16:5847:7941":{"crate_id":16,"path":["gimli","read","cfi","PartialFrameDescriptionEntry"],"kind":"struct"},"6:4549:6817":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Sym"],"kind":"struct"},"17:11090:5258":{"crate_id":17,"path":["object","read","CompressedFileRange"],"kind":"struct"},"1:7803:7702":{"crate_id":1,"path":["std","fs","FileTimes"],"kind":"struct"},"2:2499:132":{"crate_id":2,"path":["core","convert","From"],"kind":"trait"},"21:2732:1865":{"crate_id":21,"path":["proc_macro","TokenTree"],"kind":"enum"},"17:12622:5225":{"crate_id":17,"path":["object","macho","Relocation"],"kind":"struct"},"17:10705:5229":{"crate_id":17,"path":["object","read","pe","resource","ResourceName"],"kind":"struct"},"1:9978:8750":{"crate_id":1,"path":["std","sys","unix","os","SplitPaths"],"kind":"struct"},"22:919:2180":{"crate_id":22,"path":["proc_macro2","Punct"],"kind":"struct"},"1:913:4508":{"crate_id":1,"path":["std","collections","hash","map","DrainFilter"],"kind":"struct"},"2:3387:14129":{"crate_id":2,"path":["core","any","Demand"],"kind":"struct"},"1:8329:3691":{"crate_id":1,"path":["std","panic","BacktraceStyle"],"kind":"enum"},"2:42636:2739":{"crate_id":2,"path":["core","str","iter","Bytes"],"kind":"struct"},"1:3322:3269":{"crate_id":1,"path":["std","io","util","Repeat"],"kind":"struct"},"2:3241:3358":{"crate_id":2,"path":["core","ops","unsize","DispatchFromDyn"],"kind":"trait"},"17:11410:5321":{"crate_id":17,"path":["object","elf","Syminfo32"],"kind":"struct"},"16:2879:6004":{"crate_id":16,"path":["gimli","common","DebugFrameOffset"],"kind":"struct"},"1:8835:7770":{"crate_id":1,"path":["std","sync","mpsc","RecvError"],"kind":"struct"},"2:2686:2394":{"crate_id":2,"path":["core","marker","PhantomData"],"kind":"struct"},"1:6127:8352":{"crate_id":1,"path":["std","sync","mpmc","zero","ZeroToken"],"kind":"struct"},"18:599:4995":{"crate_id":18,"path":["memchr","memmem","twoway","Shift"],"kind":"enum"},"5:217:4425":{"crate_id":5,"path":["alloc","boxed","thin","ThinBox"],"kind":"struct"},"17:13469:5836":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation64"],"kind":"struct"},"1:5382:8942":{"crate_id":1,"path":["std","process","Command"],"kind":"struct"},"2:10006:14095":{"crate_id":2,"path":["core","slice","iter","SplitMut"],"kind":"struct"},"16:6327:7982":{"crate_id":16,"path":["gimli","read","abbrev","Abbreviations"],"kind":"struct"},"24:4857:3155":{"crate_id":24,"path":["syn","expr","ExprLoop"],"kind":"struct"},"2:9066:3370":{"crate_id":2,"path":["core","fmt","UpperExp"],"kind":"trait"},"2:41295:8344":{"crate_id":2,"path":["core","sync","exclusive","Exclusive"],"kind":"struct"},"16:6293:6077":{"crate_id":16,"path":["gimli","read","reader","ReaderOffsetId"],"kind":"struct"},"7:0:1520":{"crate_id":7,"path":["unwind"],"kind":"module"},"5:5176:14085":{"crate_id":5,"path":["alloc","slice","Concat"],"kind":"trait"},"2:6910:3264":{"crate_id":2,"path":["core","iter","sources","once","once"],"kind":"function"},"1:10690:129":{"crate_id":1,"path":["std","sys","unix","fs","FileType"],"kind":"struct"},"1:2369:8797":{"crate_id":1,"path":["std","fs","read_dir"],"kind":"function"},"17:10897:5250":{"crate_id":17,"path":["object","read","SymbolMapName"],"kind":"struct"},"1:890:8067":{"crate_id":1,"path":["std","collections","hash","map","Values"],"kind":"struct"},"5:2633:7426":{"crate_id":5,"path":["alloc","collections","btree","node","Handle"],"kind":"struct"},"2:41949:8162":{"crate_id":2,"path":["core","hash","sip","SipHasher13"],"kind":"struct"},"24:4872:3159":{"crate_id":24,"path":["syn","expr","ExprParen"],"kind":"struct"},"17:9478:20923":{"crate_id":17,"path":["object","read","coff","file","CoffCommon"],"kind":"struct"},"17:10334:5164":{"crate_id":17,"path":["object","read","macho","symbol","SymbolTable"],"kind":"struct"},"6:6571:7290":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stat64"],"kind":"struct"},"22:505:3235":{"crate_id":22,"path":["proc_macro2","LexError"],"kind":"struct"},"16:2694:5996":{"crate_id":16,"path":["gimli","common","RangeListsOffset"],"kind":"struct"},"17:13411:5822":{"crate_id":17,"path":["object","pe","ImageResourceDirectoryEntry"],"kind":"struct"},"11:762:4508":{"crate_id":11,"path":["hashbrown","map","DrainFilter"],"kind":"struct"},"1:5351:8940":{"crate_id":1,"path":["std","process","ChildStdout"],"kind":"struct"},"17:8632:20865":{"crate_id":17,"path":["object","endian","Endianness"],"kind":"enum"},"17:11844:5424":{"crate_id":17,"path":["object","macho","MachHeader32"],"kind":"struct"},"16:4845:6055":{"crate_id":16,"path":["gimli","constants","DwOrd"],"kind":"struct"},"5:3181:1837":{"crate_id":5,"path":["alloc","collections","btree","set","Union"],"kind":"struct"},"17:13659:5905":{"crate_id":17,"path":["object","pe","ImageArm64RuntimeFunctionEntry"],"kind":"struct"},"16:2808:6001":{"crate_id":16,"path":["gimli","common","DebugStrOffsetsIndex"],"kind":"struct"},"5:2113:8074":{"crate_id":5,"path":["alloc","collections","btree","navigate","LeafRange"],"kind":"struct"},"2:46567:7681":{"crate_id":2,"path":["core","core_arch","x86","__m128i"],"kind":"struct"},"22:925:1863":{"crate_id":22,"path":["proc_macro2","Spacing"],"kind":"enum"},"1:8101:7743":{"crate_id":1,"path":["std","io","IoSlice"],"kind":"struct"},"2:31794:1953":{"crate_id":2,"path":["core","error","private","Internal"],"kind":"struct"},"6:4369:6748":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_absinfo"],"kind":"struct"},"16:6179:8299":{"crate_id":16,"path":["gimli","read","dwarf","Dwarf"],"kind":"struct"},"17:13324:5796":{"crate_id":17,"path":["object","pe","ImageThunkData32"],"kind":"struct"},"1:8864:8968":{"crate_id":1,"path":["std","sync","mpsc","RecvTimeoutError"],"kind":"enum"},"24:5444:3200":{"crate_id":24,"path":["syn","ty","TypeMacro"],"kind":"struct"},"1:8740:8945":{"crate_id":1,"path":["std","process","CommandArgs"],"kind":"struct"},"17:12770:5571":{"crate_id":17,"path":["object","pe","ImageDosHeader"],"kind":"struct"},"6:567:6493":{"crate_id":6,"path":["libc","unix","sigval"],"kind":"struct"},"24:4411:3483":{"crate_id":24,"path":["syn","token","StarEq"],"kind":"struct"},"6:1652:6603":{"crate_id":6,"path":["libc","unix","linux_like","ifaddrs"],"kind":"struct"},"2:22174:4183":{"crate_id":2,"path":["core","num","nonzero","NonZeroUsize"],"kind":"struct"},"16:5920:7949":{"crate_id":16,"path":["gimli","read","cfi","UnwindContext"],"kind":"struct"},"24:3262:3433":{"crate_id":24,"path":["syn","token","Typeof"],"kind":"struct"},"5:5843:4817":{"crate_id":5,"path":["alloc","sync","from_iter_exact","Guard"],"kind":"struct"},"24:4114:3462":{"crate_id":24,"path":["syn","token","Ne"],"kind":"struct"},"6:4988:7015":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_txtime"],"kind":"struct"},"6:4539:6816":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Sym"],"kind":"struct"},"2:20366:4077":{"crate_id":2,"path":["core","core_simd","swizzle","reverse","Reverse"],"kind":"struct"},"2:2678:223":{"crate_id":2,"path":["core","marker","StructuralEq"],"kind":"trait"},"16:8180:20830":{"crate_id":16,"path":["gimli","read","value","ValueType"],"kind":"enum"},"1:2208:8784":{"crate_id":1,"path":["std","fs","DirEntry"],"kind":"struct"},"17:13453:5833":{"crate_id":17,"path":["object","pe","ImageDynamicRelocationTable"],"kind":"struct"},"20:10:3093":{"crate_id":20,"path":["quote","ext","TokenStreamExt"],"kind":"trait"},"1:3979:8864":{"crate_id":1,"path":["std","os","unix","fs","DirEntryExt"],"kind":"trait"},"1:8225:8236":{"crate_id":1,"path":["std","os","unix","net","ancillary","SocketCred"],"kind":"struct"},"1:11263:4896":{"crate_id":1,"path":["std","sys_common","thread_local_key","Key"],"kind":"struct"},"1:5244:119":{"crate_id":1,"path":["std","path","Display"],"kind":"struct"},"21:2606:7866":{"crate_id":21,"path":["proc_macro","diagnostic","Children"],"kind":"struct"},"24:4288:3474":{"crate_id":24,"path":["syn","token","RArrow"],"kind":"struct"},"17:13033:5726":{"crate_id":17,"path":["object","pe","ImageRomHeaders"],"kind":"struct"},"1:3969:8863":{"crate_id":1,"path":["std","os","unix","fs","FileTypeExt"],"kind":"trait"},"24:3313:3435":{"crate_id":24,"path":["syn","token","Unsized"],"kind":"struct"},"2:42924:8190":{"crate_id":2,"path":["core","str","iter","SplitWhitespace"],"kind":"struct"},"3:0:436":{"crate_id":3,"path":["compiler_builtins"],"kind":"module"},"5:4340:4819":{"crate_id":5,"path":["alloc","collections","vec_deque","truncate","Dropper"],"kind":"struct"},"2:21447:8108":{"crate_id":2,"path":["core","num","bignum","Big32x40"],"kind":"struct"},"24:3887:3447":{"crate_id":24,"path":["syn","token","Comma"],"kind":"struct"},"16:535:7912":{"crate_id":16,"path":["gimli","read","cfi","RegisterRuleMap"],"kind":"struct"},"17:8718:5142":{"crate_id":17,"path":["object","endian","U32Bytes"],"kind":"struct"},"1:9069:7778":{"crate_id":1,"path":["std","time","Instant"],"kind":"struct"},"16:6376:6008":{"crate_id":16,"path":["gimli","read","aranges","DebugAranges"],"kind":"struct"},"6:1716:6639":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_un"],"kind":"struct"},"1:8794:3217":{"crate_id":1,"path":["std","sync","mpsc","Iter"],"kind":"struct"},"2:39257:8127":{"crate_id":2,"path":["core","char","decode","DecodeUtf16"],"kind":"struct"},"6:7428:7402":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_mutexattr_t"],"kind":"struct"},"1:3165:8835":{"crate_id":1,"path":["std","io","stdio","Stdin"],"kind":"struct"},"2:46686:7690":{"crate_id":2,"path":["core","core_arch","x86","__m128bh"],"kind":"struct"},"2:9431:4846":{"crate_id":2,"path":["core","slice","sort","InsertionHole"],"kind":"struct"},"2:25617:7456":{"crate_id":2,"path":["core","num","wrapping","Wrapping"],"kind":"struct"},"2:40776:3696":{"crate_id":2,"path":["core","panic","panic_info","PanicInfo"],"kind":"struct"},"24:4225:3470":{"crate_id":24,"path":["syn","token","Plus"],"kind":"struct"},"1:4679:8877":{"crate_id":1,"path":["std","os","fd","raw","IntoRawFd"],"kind":"trait"},"17:10635:5224":{"crate_id":17,"path":["object","read","pe","relocation","RelocationBlockIterator"],"kind":"struct"},"6:4687:6860":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_vm"],"kind":"struct"},"2:2675:3355":{"crate_id":2,"path":["core","marker","Unsize"],"kind":"trait"},"16:6321:8314":{"crate_id":16,"path":["gimli","read","abbrev","AbbreviationsCache"],"kind":"struct"},"17:9512:20919":{"crate_id":17,"path":["object","read","coff","section","CoffSegmentIterator"],"kind":"struct"},"24:3841:3444":{"crate_id":24,"path":["syn","token","Caret"],"kind":"struct"},"2:45193:7616":{"crate_id":2,"path":["core","core_arch","simd","u8x32"],"kind":"struct"},"1:1787:8741":{"crate_id":1,"path":["std","env","VarsOs"],"kind":"struct"},"24:4837:3151":{"crate_id":24,"path":["syn","expr","ExprIf"],"kind":"struct"},"24:2803:3416":{"crate_id":24,"path":["syn","token","Extern"],"kind":"struct"},"21:1403:1877":{"crate_id":21,"path":["proc_macro","bridge","symbol","Symbol"],"kind":"struct"},"1:11166:8948":{"crate_id":1,"path":["std","sys_common","process","CommandEnvs"],"kind":"struct"},"16:7743:6013":{"crate_id":16,"path":["gimli","read","unit","DebugInfo"],"kind":"struct"},"1:3352:4817":{"crate_id":1,"path":["std","io","Guard"],"kind":"struct"},"21:2509:3384":{"crate_id":21,"path":["proc_macro","bridge","Diagnostic"],"kind":"struct"},"16:6474:6026":{"crate_id":16,"path":["gimli","read","index","DebugTuIndex"],"kind":"struct"},"2:39333:8136":{"crate_id":2,"path":["core","char","ToLowercase"],"kind":"struct"},"5:3160:35496":{"crate_id":5,"path":["alloc","collections","btree","set","IntersectionInner"],"kind":"enum"},"1:3129:28456":{"crate_id":1,"path":["std","io","stdio","StdoutRaw"],"kind":"struct"},"24:126:1789":{"crate_id":24,"path":["syn","token","Group"],"kind":"struct"},"2:42772:8181":{"crate_id":2,"path":["core","str","iter","RSplitN"],"kind":"struct"},"1:7659:8721":{"crate_id":1,"path":["std","backtrace","RawFrame"],"kind":"enum"},"18:564:5035":{"crate_id":18,"path":["memchr","memmem","rarebytes","RareNeedleBytes"],"kind":"struct"},"11:353:4783":{"crate_id":11,"path":["hashbrown","raw","RawDrain"],"kind":"struct"},"16:5594:6012":{"crate_id":16,"path":["gimli","read","cfi","EhFrameHdr"],"kind":"struct"},"1:8880:8970":{"crate_id":1,"path":["std","sync","mpsc","TrySendError"],"kind":"enum"},"6:4559:6818":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Phdr"],"kind":"struct"},"2:5526:3288":{"crate_id":2,"path":["core","iter","adapters","flatten","Flatten"],"kind":"struct"},"2:44268:7580":{"crate_id":2,"path":["core","core_arch","simd","i8x2"],"kind":"struct"},"1:8997:25938":{"crate_id":1,"path":["std","sync","mpmc","select","Selected"],"kind":"enum"},"24:3347:3437":{"crate_id":24,"path":["syn","token","Virtual"],"kind":"struct"},"17:9907:5172":{"crate_id":17,"path":["object","read","elf","version","VersionIndex"],"kind":"struct"},"17:11879:5428":{"crate_id":17,"path":["object","macho","LoadCommand"],"kind":"struct"},"2:43401:8225":{"crate_id":2,"path":["core","str","UnsafeBytesToStr"],"kind":"struct"},"17:8521:20886":{"crate_id":17,"path":["object","common","FileFlags"],"kind":"enum"},"24:3177:1815":{"crate_id":24,"path":["syn","token","Struct"],"kind":"struct"},"2:39972:3271":{"crate_id":2,"path":["core","iter","sources","repeat_n","RepeatN"],"kind":"struct"},"2:11551:14110":{"crate_id":2,"path":["core","str","pattern"],"kind":"module"},"2:22306:170":{"crate_id":2,"path":["core","num","nonzero","NonZeroI64"],"kind":"struct"},"16:4757:6052":{"crate_id":16,"path":["gimli","constants","DwId"],"kind":"struct"},"6:4945:6990":{"crate_id":6,"path":["libc","unix","linux_like","linux","af_alg_iv"],"kind":"struct"},"16:2742:5998":{"crate_id":16,"path":["gimli","common","DebugRngListsIndex"],"kind":"struct"},"2:0:489":{"crate_id":2,"path":["core"],"kind":"module"},"16:4932:6058":{"crate_id":16,"path":["gimli","constants","DwDefaulted"],"kind":"struct"},"16:2426:5985":{"crate_id":16,"path":["gimli","common","DebugAddrIndex"],"kind":"struct"},"2:40743:3695":{"crate_id":2,"path":["core","panic","location","Location"],"kind":"struct"},"2:45429:7635":{"crate_id":2,"path":["core","core_arch","simd","i8x32"],"kind":"struct"},"2:40490:7540":{"crate_id":2,"path":["core","net","ip_addr","Ipv4Addr"],"kind":"struct"},"2:2824:3996":{"crate_id":2,"path":["core","ops","bit","BitOr"],"kind":"trait"},"24:4574:2011":{"crate_id":24,"path":["syn","derive","DataUnion"],"kind":"struct"},"24:5075:2133":{"crate_id":24,"path":["syn","lit","Lit"],"kind":"enum"},"24:826:3322":{"crate_id":24,"path":["syn","ext","IdentExt"],"kind":"trait"},"18:521:24802":{"crate_id":18,"path":["memchr","memmem","prefilter","Prefilter"],"kind":"enum"},"16:5886:7943":{"crate_id":16,"path":["gimli","read","cfi","FrameDescriptionEntry"],"kind":"struct"},"2:42914:8189":{"crate_id":2,"path":["core","str","iter","LinesAny"],"kind":"struct"},"2:41965:8165":{"crate_id":2,"path":["core","hash","sip","SipHasher"],"kind":"struct"},"2:21748:8118":{"crate_id":2,"path":["core","num","error","ParseIntError"],"kind":"struct"},"2:46633:7687":{"crate_id":2,"path":["core","core_arch","x86","__m512i"],"kind":"struct"},"2:39751:3310":{"crate_id":2,"path":["core","iter","adapters","zip","Zip"],"kind":"struct"},"2:44392:7585":{"crate_id":2,"path":["core","core_arch","simd","u8x8"],"kind":"struct"},"17:11969:5444":{"crate_id":17,"path":["object","macho","Section64"],"kind":"struct"},"2:41657:7554":{"crate_id":2,"path":["core","fmt","rt","Placeholder"],"kind":"struct"},"17:10104:5175":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandIterator"],"kind":"struct"},"1:1563:3217":{"crate_id":1,"path":["std","collections","hash","set","Iter"],"kind":"struct"},"2:40895:84":{"crate_id":2,"path":["core","sync","atomic","AtomicI8"],"kind":"struct"},"1:3929:8861":{"crate_id":1,"path":["std","os","unix","fs","OpenOptionsExt"],"kind":"trait"},"2:11565:7878":{"crate_id":2,"path":["core","str","pattern","Searcher"],"kind":"trait"},"24:4807:3144":{"crate_id":24,"path":["syn","expr","ExprCast"],"kind":"struct"},"24:3858:3445":{"crate_id":24,"path":["syn","token","CaretEq"],"kind":"struct"},"2:39688:3306":{"crate_id":2,"path":["core","iter","adapters","skip","Skip"],"kind":"struct"},"17:11641:5374":{"crate_id":17,"path":["object","elf","HashHeader"],"kind":"struct"},"17:9488:20921":{"crate_id":17,"path":["object","read","coff","file","CoffFile"],"kind":"struct"},"6:4224:6658":{"crate_id":6,"path":["libc","unix","linux_like","linux","glob_t"],"kind":"struct"},"2:39200:3374":{"crate_id":2,"path":["core","ascii","EscapeDefault"],"kind":"struct"},"9:502:6419":{"crate_id":9,"path":["miniz_oxide","StreamResult"],"kind":"struct"},"18:481:7867":{"crate_id":18,"path":["memchr","cow","CowBytes"],"kind":"struct"},"2:41715:127":{"crate_id":2,"path":["core","fmt","Error"],"kind":"struct"},"17:9853:20976":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdatSectionIterator"],"kind":"struct"},"16:3899:6039":{"crate_id":16,"path":["gimli","constants","DwChildren"],"kind":"struct"},"17:13879:5960":{"crate_id":17,"path":["object","pe","ImageCor20Header"],"kind":"struct"},"2:39723:3308":{"crate_id":2,"path":["core","iter","adapters","take","Take"],"kind":"struct"},"17:11891:5430":{"crate_id":17,"path":["object","macho","LcStr"],"kind":"struct"},"18:96:24788":{"crate_id":18,"path":["memchr","memchr","iter","Memchr2"],"kind":"struct"},"16:5944:20810":{"crate_id":16,"path":["gimli","read","cfi","UnwindTable"],"kind":"struct"},"1:5690:8959":{"crate_id":1,"path":["std","sync","barrier","BarrierWaitResult"],"kind":"struct"},"5:1713:4508":{"crate_id":5,"path":["alloc","collections","btree","map","DrainFilter"],"kind":"struct"},"24:286:36928":{"crate_id":24,"path":["syn","bigint","BigInt"],"kind":"struct"},"22:792:7861":{"crate_id":22,"path":["proc_macro2","imp","DeferredTokenStream"],"kind":"struct"},"2:39948:3265":{"crate_id":2,"path":["core","iter","sources","once","Once"],"kind":"struct"},"1:1770:601":{"crate_id":1,"path":["std","env"],"kind":"module"},"21:2752:3237":{"crate_id":21,"path":["proc_macro","Delimiter"],"kind":"enum"},"21:2308:2180":{"crate_id":21,"path":["proc_macro","bridge","Punct"],"kind":"struct"},"24:4242:3471":{"crate_id":24,"path":["syn","token","PlusEq"],"kind":"struct"},"16:3815:6037":{"crate_id":16,"path":["gimli","constants","DwUt"],"kind":"struct"},"6:4439:6783":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_periodic_effect"],"kind":"struct"},"16:2337:5976":{"crate_id":16,"path":["gimli","common","LineEncoding"],"kind":"struct"},"2:2226:97":{"crate_id":2,"path":["core","borrow","Borrow"],"kind":"trait"},"11:2178:1789":{"crate_id":11,"path":["hashbrown","raw","sse2","Group"],"kind":"struct"},"17:11258:5295":{"crate_id":17,"path":["object","elf","FileHeader64"],"kind":"struct"},"2:42428:8101":{"crate_id":2,"path":["core","slice","iter","Windows"],"kind":"struct"},"2:2332:180":{"crate_id":2,"path":["core","cmp","Ord"],"kind":"trait"},"2:39267:8128":{"crate_id":2,"path":["core","char","decode","DecodeUtf16Error"],"kind":"struct"},"16:4400:6042":{"crate_id":16,"path":["gimli","constants","DwForm"],"kind":"struct"},"2:21569:8110":{"crate_id":2,"path":["core","num","dec2flt","decimal","Decimal"],"kind":"struct"},"22:713:1864":{"crate_id":22,"path":["proc_macro2","fallback","Span"],"kind":"struct"},"2:39702:3307":{"crate_id":2,"path":["core","iter","adapters","skip_while","SkipWhile"],"kind":"struct"},"5:7099:3256":{"crate_id":5,"path":["alloc","collections","TryReserveErrorKind"],"kind":"enum"},"2:21096:9033":{"crate_id":2,"path":["core","core_simd","ord","SimdOrd"],"kind":"trait"},"24:3962:3452":{"crate_id":24,"path":["syn","token","DotDotEq"],"kind":"struct"},"11:659:3216":{"crate_id":11,"path":["hashbrown","map","IntoIter"],"kind":"struct"},"16:8256:6230":{"crate_id":16,"path":["gimli","read","StoreOnHeap"],"kind":"struct"},"2:44314:7582":{"crate_id":2,"path":["core","core_arch","simd","u16x2"],"kind":"struct"},"5:1992:8734":{"crate_id":5,"path":["alloc","collections","btree","map","CursorMut"],"kind":"struct"},"24:4126:3463":{"crate_id":24,"path":["syn","token","Not"],"kind":"struct"},"24:5124:3182":{"crate_id":24,"path":["syn","lit","LitInt"],"kind":"struct"},"1:11247:8259":{"crate_id":1,"path":["std","sys_common","wtf8","EncodeWide"],"kind":"struct"},"24:5268:2432":{"crate_id":24,"path":["syn","path","PathSegment"],"kind":"struct"},"17:12592:5555":{"crate_id":17,"path":["object","macho","Nlist32"],"kind":"struct"},"2:41135:83":{"crate_id":2,"path":["core","sync","atomic","AtomicI64"],"kind":"struct"},"2:11119:14111":{"crate_id":2,"path":["core","str","converts","from_utf8"],"kind":"function"},"1:7268:27354":{"crate_id":1,"path":["std","panicking","Hook"],"kind":"enum"},"1:8940:25907":{"crate_id":1,"path":["std","sync","mpmc","error","SendTimeoutError"],"kind":"enum"},"1:10418:8833":{"crate_id":1,"path":["std","sys","unix","stdio","Stderr"],"kind":"struct"},"2:39653:3303":{"crate_id":2,"path":["core","iter","adapters","peekable","Peekable"],"kind":"struct"},"2:2731:3390":{"crate_id":2,"path":["core","marker","Unpin"],"kind":"trait"},"6:4313:6720":{"crate_id":6,"path":["libc","unix","linux_like","linux","packet_mreq"],"kind":"struct"},"18:681:7872":{"crate_id":18,"path":["memchr","memmem","Finder"],"kind":"struct"},"16:6819:6117":{"crate_id":16,"path":["gimli","read","line","FileEntry"],"kind":"struct"},"24:1448:24826":{"crate_id":24,"path":["syn","parse","discouraged","AnyDelimiter"],"kind":"trait"},"17:9986:7891":{"crate_id":17,"path":["object","read","elf","version","VernauxIterator"],"kind":"struct"},"16:2594:5992":{"crate_id":16,"path":["gimli","common","DebugLocListsIndex"],"kind":"struct"},"24:2667:2247":{"crate_id":24,"path":["syn","token","Const"],"kind":"struct"},"6:123:14561":{"crate_id":6,"path":["libc","unix","fpos_t"],"kind":"enum"},"2:42503:3284":{"crate_id":2,"path":["core","slice","iter","ArrayChunks"],"kind":"struct"},"17:242:36643":{"crate_id":17,"path":["object","read","util","DebugByte"],"kind":"struct"},"24:4044:3457":{"crate_id":24,"path":["syn","token","LArrow"],"kind":"struct"},"2:1618:4249":{"crate_id":2,"path":["core","mem","Discriminant"],"kind":"struct"},"5:1348:3217":{"crate_id":5,"path":["alloc","collections","btree","map","Iter"],"kind":"struct"},"2:38903:199":{"crate_id":2,"path":["core","ops","range","RangeInclusive"],"kind":"struct"},"6:5741:7069":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","msghdr"],"kind":"struct"},"17:9275:36632":{"crate_id":17,"path":["object","read","any","SymbolIteratorInternal"],"kind":"enum"},"16:2764:5999":{"crate_id":16,"path":["gimli","common","DebugStrOffset"],"kind":"struct"},"24:1035:1800":{"crate_id":24,"path":["syn","ident","Ident"],"kind":"function"},"17:11109:5261":{"crate_id":17,"path":["object","read","CompressedData"],"kind":"struct"},"24:4254:3472":{"crate_id":24,"path":["syn","token","Pound"],"kind":"struct"},"24:2990:3424":{"crate_id":24,"path":["syn","token","Mod"],"kind":"struct"},"1:955:8729":{"crate_id":1,"path":["std","collections","hash","map","RawVacantEntryMut"],"kind":"struct"},"17:13678:5911":{"crate_id":17,"path":["object","pe","ImageAlphaRuntimeFunctionEntry"],"kind":"struct"},"2:42933:8191":{"crate_id":2,"path":["core","str","iter","SplitAsciiWhitespace"],"kind":"struct"},"21:184:4155":{"crate_id":21,"path":["proc_macro","bridge","closure","Closure"],"kind":"struct"},"6:4597:6821":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Shdr"],"kind":"struct"},"6:4820:6924":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_initmsg"],"kind":"struct"},"2:12133:135":{"crate_id":2,"path":["core","future","future","Future"],"kind":"trait"},"2:7196:3280":{"crate_id":2,"path":["core","iter","traits","exact_size","ExactSizeIterator"],"kind":"trait"},"1:859:3221":{"crate_id":1,"path":["std","collections","hash","map","IterMut"],"kind":"struct"},"1:620:8643":{"crate_id":1,"path":["std","backtrace","Backtrace"],"kind":"struct"},"6:1550:6530":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_in6"],"kind":"struct"},"2:44937:7610":{"crate_id":2,"path":["core","core_arch","simd","f64x2"],"kind":"struct"},"16:7103:7774":{"crate_id":16,"path":["gimli","read","op","Operation"],"kind":"enum"},"5:7013:8083":{"crate_id":5,"path":["alloc","collections","btree","set_val","SetValZST"],"kind":"struct"},"24:925:3176":{"crate_id":24,"path":["syn","generics","Turbofish"],"kind":"struct"},"1:919:8725":{"crate_id":1,"path":["std","collections","hash","map","ValuesMut"],"kind":"struct"},"5:7132:8084":{"crate_id":5,"path":["alloc","ffi","c_str","NulError"],"kind":"struct"},"1:11901:1350":{"crate_id":1,"path":["std","slice"],"kind":"primitive"},"17:12496:5545":{"crate_id":17,"path":["object","macho","SymsegCommand"],"kind":"struct"},"1:11696:4901":{"crate_id":1,"path":["std","backtrace_rs","symbolize","gimli","mmap","Mmap"],"kind":"struct"},"5:677:229":{"crate_id":5,"path":["alloc","borrow","ToOwned"],"kind":"trait"},"17:11924:5438":{"crate_id":17,"path":["object","macho","SegmentCommand64"],"kind":"struct"},"1:557:4177":{"crate_id":1,"path":["std","thread","JoinHandle"],"kind":"struct"},"16:5998:20811":{"crate_id":16,"path":["gimli","read","cfi","CfaRule"],"kind":"enum"},"1:9383:4889":{"crate_id":1,"path":["std","sys","unix","fs","Dir"],"kind":"struct"},"17:13344:5803":{"crate_id":17,"path":["object","pe","ImageTlsDirectory32"],"kind":"struct"},"2:2939:3392":{"crate_id":2,"path":["core","ops","function","FnOnce"],"kind":"trait"},"2:46549:7680":{"crate_id":2,"path":["core","core_arch","simd","f64x8"],"kind":"struct"},"17:12282:5506":{"crate_id":17,"path":["object","macho","DylibReference"],"kind":"struct"},"2:3176:14143":{"crate_id":2,"path":["core","ops","try_trait","NeverShortCircuit"],"kind":"struct"},"1:4675:8873":{"crate_id":1,"path":["std","os","fd","raw","AsRawFd"],"kind":"trait"},"17:13024:5725":{"crate_id":17,"path":["object","pe","ImageNtHeaders32"],"kind":"struct"},"6:4862:6954":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_nxtinfo"],"kind":"struct"},"6:4218:6657":{"crate_id":6,"path":["libc","unix","linux_like","linux","rlimit64"],"kind":"struct"},"16:2616:5993":{"crate_id":16,"path":["gimli","common","DebugMacinfoOffset"],"kind":"struct"},"11:1832:3217":{"crate_id":11,"path":["hashbrown","set","Iter"],"kind":"struct"},"17:11459:5330":{"crate_id":17,"path":["object","elf","Rel64"],"kind":"struct"},"17:12019:5182":{"crate_id":17,"path":["object","macho","Dylib"],"kind":"struct"},"24:4543:1817":{"crate_id":24,"path":["syn","data","Field"],"kind":"struct"},"21:2636:231":{"crate_id":21,"path":["proc_macro","TokenStream"],"kind":"struct"},"24:885:36913":{"crate_id":24,"path":["syn","generics","TypeParams"],"kind":"struct"},"2:4576:14154":{"crate_id":2,"path":["core","char","REPLACEMENT_CHARACTER"],"kind":"constant"},"17:11770:5406":{"crate_id":17,"path":["object","macho","DyldCacheMappingInfo"],"kind":"struct"},"24:5309:2248":{"crate_id":24,"path":["syn","path","AssocConst"],"kind":"struct"},"6:4743:6889":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_filter"],"kind":"struct"},"17:2933:20984":{"crate_id":17,"path":["object","read","macho","section","MachOSectionIterator"],"kind":"struct"},"6:4775:6903":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlmsgerr"],"kind":"struct"},"2:41431:3371":{"crate_id":2,"path":["core","fmt","num","LowerHex"],"kind":"struct"},"24:258:8629":{"crate_id":24,"path":["syn","attr","parsing","DisplayPath"],"kind":"struct"},"2:21698:32440":{"crate_id":2,"path":["core","num","fmt","Part"],"kind":"enum"},"17:10761:20898":{"crate_id":17,"path":["object","read","FileKind"],"kind":"enum"},"13:110:36574":{"crate_id":13,"path":["std_detect","detect","arch","x86","Feature"],"kind":"enum"},"2:10200:14101":{"crate_id":2,"path":["core","slice","iter","RSplitNMut"],"kind":"struct"},"1:9107:8243":{"crate_id":1,"path":["std","time","SystemTimeError"],"kind":"struct"},"17:11600:5363":{"crate_id":17,"path":["object","elf","Vernaux"],"kind":"struct"},"17:9322:36636":{"crate_id":17,"path":["object","read","any","DynamicRelocationIteratorInternal"],"kind":"enum"},"1:6532:8965":{"crate_id":1,"path":["std","sync","remutex","ReentrantMutex"],"kind":"struct"},"6:4994:7017":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_can_addr"],"kind":"union"},"17:11800:5415":{"crate_id":17,"path":["object","macho","DyldSubCacheInfo"],"kind":"struct"},"1:11143:4894":{"crate_id":1,"path":["std","sys_common","once","futex","CompletionGuard"],"kind":"struct"},"2:2846:5010":{"crate_id":2,"path":["core","ops","bit","BitAndAssign"],"kind":"trait"},"16:5811:7935":{"crate_id":16,"path":["gimli","read","cfi","CommonInformationEntry"],"kind":"struct"},"2:3159:232":{"crate_id":2,"path":["core","ops","try_trait","Try"],"kind":"trait"},"2:43389:8222":{"crate_id":2,"path":["core","str","IsAsciiWhitespace"],"kind":"struct"},"2:39366:7536":{"crate_id":2,"path":["core","char","TryFromCharError"],"kind":"struct"},"2:2248:105":{"crate_id":2,"path":["core","clone","Clone"],"kind":"trait"},"2:2787:5014":{"crate_id":2,"path":["core","ops","arith","Neg"],"kind":"trait"},"17:3266:21003":{"crate_id":17,"path":["object","read","macho","relocation","MachORelocationIterator"],"kind":"struct"},"1:8903:7773":{"crate_id":1,"path":["std","sync","condvar","WaitTimeoutResult"],"kind":"struct"},"17:10354:5213":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbolTable"],"kind":"struct"},"5:7289:4509":{"crate_id":5,"path":["alloc","vec","splice","Splice"],"kind":"struct"},"6:4611:6822":{"crate_id":6,"path":["libc","unix","linux_like","linux","ucred"],"kind":"struct"},"1:645:8718":{"crate_id":1,"path":["std","backtrace","BytesOrWide"],"kind":"enum"},"21:2727:3383":{"crate_id":21,"path":["proc_macro","SourceFile"],"kind":"struct"},"1:11913:1477":{"crate_id":1,"path":["std","u8"],"kind":"primitive"},"6:4501:6814":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Ehdr"],"kind":"struct"},"5:6631:242":{"crate_id":5,"path":["alloc","vec","Vec"],"kind":"struct"},"5:1379:3216":{"crate_id":5,"path":["alloc","collections","btree","map","IntoIter"],"kind":"struct"},"2:3149:14194":{"crate_id":2,"path":["core","ops","range","OneSidedRange"],"kind":"trait"},"14:202:2303":{"crate_id":14,"path":["rustc_demangle","v0","ParseError"],"kind":"enum"},"1:4570:7283":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt","st_atime"],"kind":"foreign_type"},"24:3109:210":{"crate_id":24,"path":["syn","token","Return"],"kind":"struct"},"1:7665:4575":{"crate_id":1,"path":["std","collections","hash","map","RandomState"],"kind":"struct"},"21:2649:3216":{"crate_id":21,"path":["proc_macro","token_stream","IntoIter"],"kind":"struct"},"6:7498:7418":{"crate_id":6,"path":["libc","unix","linux_like","linux","canfd_frame"],"kind":"struct"},"1:6003:4872":{"crate_id":1,"path":["std","sync","mpmc","list","Channel"],"kind":"struct"},"2:4720:8723":{"crate_id":2,"path":["core","ffi","c_void"],"kind":"enum"},"20:239:3995":{"crate_id":20,"path":["quote","__private","get_span","GetSpanInner"],"kind":"struct"},"21:2037:4532":{"crate_id":21,"path":["proc_macro","bridge","LitKind"],"kind":"enum"},"2:44444:7587":{"crate_id":2,"path":["core","core_arch","simd","u32x2"],"kind":"struct"},"17:13066:5737":{"crate_id":17,"path":["object","pe","AnonObjectHeaderV2"],"kind":"struct"},"6:7463:7410":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_cond_t"],"kind":"struct"},"5:6939:4422":{"crate_id":5,"path":["alloc","alloc","Global"],"kind":"struct"},"22:895:1789":{"crate_id":22,"path":["proc_macro2","Group"],"kind":"struct"},"2:20411:34869":{"crate_id":2,"path":["core","core_simd","swizzle","interleave","Lo"],"kind":"struct"},"2:44360:7584":{"crate_id":2,"path":["core","core_arch","simd","i16x2"],"kind":"struct"},"6:6698:7340":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user"],"kind":"struct"},"2:46607:7685":{"crate_id":2,"path":["core","core_arch","x86","__m256"],"kind":"struct"},"17:8909:2739":{"crate_id":17,"path":["object","read","util","Bytes"],"kind":"struct"},"2:21354:8874":{"crate_id":2,"path":["core","core_simd","vector","sealed","Sealed"],"kind":"trait"},"1:7616:4180":{"crate_id":1,"path":["std","thread","Thread"],"kind":"struct"},"17:13689:5912":{"crate_id":17,"path":["object","pe","ImageRuntimeFunctionEntry"],"kind":"struct"},"2:20682:9007":{"crate_id":2,"path":["core","core_simd","lane_count","LaneCount"],"kind":"struct"},"17:8979:36648":{"crate_id":17,"path":["object","read","any","FileInternal"],"kind":"enum"},"17:11813:5417":{"crate_id":17,"path":["object","macho","FatHeader"],"kind":"struct"},"2:39310:14161":{"crate_id":2,"path":["core","char","EscapeDefaultState"],"kind":"enum"},"1:7590:4181":{"crate_id":1,"path":["std","thread","Builder"],"kind":"struct"},"17:10615:7902":{"crate_id":17,"path":["object","read","pe","import","DelayLoadImportTable"],"kind":"struct"},"1:7516:4885":{"crate_id":1,"path":["std","backtrace_rs","print","BacktraceFrameFmt"],"kind":"struct"},"1:6095:4876":{"crate_id":1,"path":["std","sync","mpmc","waker","SyncWaker"],"kind":"struct"},"21:2777:1863":{"crate_id":21,"path":["proc_macro","Spacing"],"kind":"enum"},"2:12167:34618":{"crate_id":2,"path":["core","future","join","MaybeDone"],"kind":"enum"},"6:4322:6725":{"crate_id":6,"path":["libc","unix","linux_like","linux","cpu_set_t"],"kind":"struct"},"24:3279:1837":{"crate_id":24,"path":["syn","token","Union"],"kind":"struct"},"6:6728:7357":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ipc_perm"],"kind":"struct"},"17:9523:20918":{"crate_id":17,"path":["object","read","coff","section","CoffSegment"],"kind":"struct"},"1:11908:736":{"crate_id":1,"path":["std","i8"],"kind":"primitive"},"1:1435:143":{"crate_id":1,"path":["std","collections","hash","set","HashSet"],"kind":"struct"},"1:5176:188":{"crate_id":1,"path":["std","path","Path"],"kind":"struct"},"6:4451:6789":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_rumble_effect"],"kind":"struct"},"16:2298:19925":{"crate_id":16,"path":["gimli","common","Format"],"kind":"enum"},"2:21727:8115":{"crate_id":2,"path":["core","num","fmt","Formatted"],"kind":"struct"},"24:1443:24825":{"crate_id":24,"path":["syn","parse","discouraged","Speculative"],"kind":"trait"},"2:39206:8125":{"crate_id":2,"path":["core","async_iter","from_iter","FromIter"],"kind":"struct"},"16:6254:6074":{"crate_id":16,"path":["gimli","read","endian_slice","EndianSlice"],"kind":"struct"},"16:6164:7980":{"crate_id":16,"path":["gimli","read","cfi","PointerEncodingParameters"],"kind":"struct"},"2:39934:3263":{"crate_id":2,"path":["core","iter","sources","from_fn","FromFn"],"kind":"struct"},"2:40573:32483":{"crate_id":2,"path":["core","net","parser","AddrKind"],"kind":"enum"},"2:46596:7684":{"crate_id":2,"path":["core","core_arch","x86","__m256i"],"kind":"struct"},"2:8996:3368":{"crate_id":2,"path":["core","fmt","Write"],"kind":"trait"},"24:4570:2009":{"crate_id":24,"path":["syn","derive","DataEnum"],"kind":"struct"},"17:12345:5514":{"crate_id":17,"path":["object","macho","RpathCommand"],"kind":"struct"},"2:50278:7700":{"crate_id":2,"path":["core","core_simd","vector","ptr","SimdConstPtr"],"kind":"struct"},"8:0:2959":{"crate_id":8,"path":["cfg_if"],"kind":"module"},"6:7201:7389":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","align","clone_args"],"kind":"struct"},"24:4896:3164":{"crate_id":24,"path":["syn","expr","ExprStruct"],"kind":"struct"},"16:2967:19951":{"crate_id":16,"path":["gimli","common","SectionId"],"kind":"enum"},"6:6791:7380":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ucontext_t"],"kind":"struct"},"2:45271:7632":{"crate_id":2,"path":["core","core_arch","simd","u16x16"],"kind":"struct"},"2:7131:133":{"crate_id":2,"path":["core","iter","traits","collect","FromIterator"],"kind":"trait"},"2:21682:32462":{"crate_id":2,"path":["core","num","flt2dec","Sign"],"kind":"enum"},"5:2903:35536":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Dying"],"kind":"enum"},"17:10000:5236":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCache"],"kind":"struct"},"2:45090:7614":{"crate_id":2,"path":["core","core_arch","simd","m32x4"],"kind":"struct"},"6:6643:7302":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_xmmreg"],"kind":"struct"},"1:2474:8829":{"crate_id":1,"path":["std","io","buffered","bufreader","BufReader"],"kind":"struct"},"2:4023:4414":{"crate_id":2,"path":["core","async_iter","async_iter","AsyncIterator"],"kind":"trait"},"2:21644:7441":{"crate_id":2,"path":["core","num","flt2dec","decoder","Decoded"],"kind":"struct"},"6:4662:6847":{"crate_id":6,"path":["libc","unix","linux_like","linux","arpd_request"],"kind":"struct"},"11:320:4781":{"crate_id":11,"path":["hashbrown","raw","RawIntoIter"],"kind":"struct"},"3:229:208":{"crate_id":3,"path":["compiler_builtins","float","cmp","Result"],"kind":"enum"},"11:2190:36567":{"crate_id":11,"path":["hashbrown","raw","Fallibility"],"kind":"enum"},"22:899:3237":{"crate_id":22,"path":["proc_macro2","Delimiter"],"kind":"enum"},"17:9453:20911":{"crate_id":17,"path":["object","read","archive","MemberHeader"],"kind":"enum"},"16:6717:8006":{"crate_id":16,"path":["gimli","read","line","LineSequence"],"kind":"struct"},"2:43071:8199":{"crate_id":2,"path":["core","str","pattern","MultiCharEqSearcher"],"kind":"struct"},"17:9826:20929":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdatIterator"],"kind":"struct"},"2:2775:5003":{"crate_id":2,"path":["core","ops","arith","Div"],"kind":"trait"},"2:31758:6356":{"crate_id":2,"path":["core","convert","Infallible"],"kind":"enum"},"24:844:4998":{"crate_id":24,"path":["syn","ext","private","PeekFn"],"kind":"struct"},"11:300:8063":{"crate_id":11,"path":["hashbrown","raw","RawIter"],"kind":"struct"},"24:5013:2208":{"crate_id":24,"path":["syn","generics","TypeParamBound"],"kind":"enum"},"24:2023:3221":{"crate_id":24,"path":["syn","punctuated","IterMut"],"kind":"struct"},"2:4741:34676":{"crate_id":2,"path":["core","ffi","sealed_trait","VaArgSafe"],"kind":"trait"},"24:5476:3193":{"crate_id":24,"path":["syn","ty","BareFnArg"],"kind":"struct"},"2:2506:235":{"crate_id":2,"path":["core","convert","TryFrom"],"kind":"trait"},"24:4068:3459":{"crate_id":24,"path":["syn","token","Lt"],"kind":"struct"},"24:5446:3201":{"crate_id":24,"path":["syn","ty","TypeNever"],"kind":"struct"},"21:2798:2468":{"crate_id":21,"path":["proc_macro","Literal"],"kind":"struct"},"24:550:127":{"crate_id":24,"path":["syn","error","Error"],"kind":"struct"},"24:5034:2443":{"crate_id":24,"path":["syn","generics","TraitBoundModifier"],"kind":"enum"},"2:10044:14103":{"crate_id":2,"path":["core","slice","iter","SplitInclusiveMut"],"kind":"struct"},"16:2404:5984":{"crate_id":16,"path":["gimli","common","DebugAddrBase"],"kind":"struct"},"1:1785:8740":{"crate_id":1,"path":["std","env","Vars"],"kind":"struct"},"2:41055:82":{"crate_id":2,"path":["core","sync","atomic","AtomicI32"],"kind":"struct"},"6:546:6482":{"crate_id":6,"path":["libc","unix","pollfd"],"kind":"struct"},"16:7588:20823":{"crate_id":16,"path":["gimli","read","rnglists","RawRngListIter"],"kind":"struct"},"1:5499:8944":{"crate_id":1,"path":["std","process","Termination"],"kind":"trait"},"24:2684:107":{"crate_id":24,"path":["syn","token","Continue"],"kind":"struct"},"2:42548:8106":{"crate_id":2,"path":["core","slice","iter","RChunksExact"],"kind":"struct"},"1:11241:8258":{"crate_id":1,"path":["std","sys_common","wtf8","Wtf8CodePoints"],"kind":"struct"},"2:30098:32439":{"crate_id":2,"path":["core","ptr","alignment","AlignmentEnum32"],"kind":"enum"},"18:766:24799":{"crate_id":18,"path":["memchr","memmem","SearcherRevKind"],"kind":"enum"},"2:44745:7604":{"crate_id":2,"path":["core","core_arch","simd","u64x2"],"kind":"struct"},"24:2565:3408":{"crate_id":24,"path":["syn","token","Async"],"kind":"struct"},"2:41667:67":{"crate_id":2,"path":["core","fmt","rt","Alignment"],"kind":"enum"},"2:1527:4817":{"crate_id":2,"path":["core","mem","maybe_uninit","write_slice_cloned","Guard"],"kind":"struct"},"2:40658:179":{"crate_id":2,"path":["core","option","Option"],"kind":"enum"},"1:483:4861":{"crate_id":1,"path":["std","thread","spawn_unchecked_","MaybeDangling"],"kind":"struct"},"2:42800:8183":{"crate_id":2,"path":["core","str","iter","MatchIndices"],"kind":"struct"},"17:11136:5262":{"crate_id":17,"path":["object","archive","Header"],"kind":"struct"},"17:10125:5177":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandData"],"kind":"struct"},"2:9062:192":{"crate_id":2,"path":["core","fmt","Pointer"],"kind":"trait"},"5:4307:4817":{"crate_id":5,"path":["alloc","collections","vec_deque","write_iter_wrapping","Guard"],"kind":"struct"},"21:2597:3384":{"crate_id":21,"path":["proc_macro","diagnostic","Diagnostic"],"kind":"struct"},"16:2502:5988":{"crate_id":16,"path":["gimli","common","DebugLineOffset"],"kind":"struct"},"24:4160:3465":{"crate_id":24,"path":["syn","token","OrEq"],"kind":"struct"},"2:42594:7569":{"crate_id":2,"path":["core","str","error","Utf8Error"],"kind":"struct"},"2:7528:3279":{"crate_id":2,"path":["core","iter","traits","marker","TrustedStep"],"kind":"trait"},"1:9181:4585":{"crate_id":1,"path":["std","sys","unix","args","Args"],"kind":"struct"},"1:932:8726":{"crate_id":1,"path":["std","collections","hash","map","RawEntryBuilderMut"],"kind":"struct"},"5:1075:35584":{"crate_id":5,"path":["alloc","collections","btree","dedup_sorted_iter","DedupSortedIter"],"kind":"struct"},"16:6201:20813":{"crate_id":16,"path":["gimli","read","dwarf","DwarfPackage"],"kind":"struct"},"1:10940:4892":{"crate_id":1,"path":["std","sys","unix","process","process_inner","posix_spawn","PosixSpawnFileActions"],"kind":"struct"},"2:2490:75":{"crate_id":2,"path":["core","convert","AsRef"],"kind":"trait"},"17:9038:36635":{"crate_id":17,"path":["object","read","any","SegmentIteratorInternal"],"kind":"enum"},"1:4635:8919":{"crate_id":1,"path":["std","os","linux","process","ChildExt"],"kind":"trait"},"1:354:4190":{"crate_id":1,"path":["std","thread","scoped","Scope"],"kind":"struct"},"17:487:20878":{"crate_id":17,"path":["object","read","any","Comdat"],"kind":"struct"},"2:41438:3372":{"crate_id":2,"path":["core","fmt","num","UpperHex"],"kind":"struct"},"24:4916:3169":{"crate_id":24,"path":["syn","expr","ExprUnsafe"],"kind":"struct"},"21:2645:3382":{"crate_id":21,"path":["proc_macro","ExpandError"],"kind":"struct"},"24:4912:3168":{"crate_id":24,"path":["syn","expr","ExprUnary"],"kind":"struct"},"24:4928:1823":{"crate_id":24,"path":["syn","expr","Member"],"kind":"enum"},"16:4540:6046":{"crate_id":16,"path":["gimli","constants","DwEnd"],"kind":"struct"},"17:9596:5162":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbol"],"kind":"struct"},"16:5032:6061":{"crate_id":16,"path":["gimli","constants","DwLnct"],"kind":"struct"},"6:4520:6815":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Ehdr"],"kind":"struct"},"1:8772:7767":{"crate_id":1,"path":["std","process","ExitStatusError"],"kind":"struct"},"2:42650:8097":{"crate_id":2,"path":["core","str","iter","Split"],"kind":"struct"},"1:9371:128":{"crate_id":1,"path":["std","sys","unix","fs","File"],"kind":"struct"},"2:40845:3217":{"crate_id":2,"path":["core","result","Iter"],"kind":"struct"},"5:6675:4828":{"crate_id":5,"path":["alloc","vec","retain_mut","BackshiftOnDrop"],"kind":"struct"},"17:13426:5826":{"crate_id":17,"path":["object","pe","ImageResourceDirStringU"],"kind":"struct"},"1:7038:30063":{"crate_id":1,"path":["std","sys_common","wstr","WStrUnits"],"kind":"struct"},"2:5920:3312":{"crate_id":2,"path":["core","iter","adapters","intersperse","IntersperseWith"],"kind":"struct"},"17:12522:5547":{"crate_id":17,"path":["object","macho","FvmfileCommand"],"kind":"struct"},"11:2184:6354":{"crate_id":11,"path":["hashbrown","raw","bitmask","BitMask"],"kind":"struct"},"2:39640:3289":{"crate_id":2,"path":["core","iter","adapters","map_while","MapWhile"],"kind":"struct"},"17:10527:21055":{"crate_id":17,"path":["object","read","pe","export","ExportTarget"],"kind":"enum"},"1:5567:4870":{"crate_id":1,"path":["std","sync","mpsc","SyncSender"],"kind":"struct"},"1:3935:8862":{"crate_id":1,"path":["std","os","unix","fs","MetadataExt"],"kind":"trait"},"6:1534:6522":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr"],"kind":"struct"},"16:5976:7913":{"crate_id":16,"path":["gimli","read","cfi","UnwindTableRow"],"kind":"struct"},"1:11894:369":{"crate_id":1,"path":["std","bool"],"kind":"primitive"},"2:46427:7677":{"crate_id":2,"path":["core","core_arch","simd","f32x16"],"kind":"struct"},"2:44523:7590":{"crate_id":2,"path":["core","core_arch","simd","i16x4"],"kind":"struct"},"21:108:4541":{"crate_id":21,"path":["proc_macro","bridge","client","Bridge"],"kind":"struct"},"2:44839:7606":{"crate_id":2,"path":["core","core_arch","simd","i16x8"],"kind":"struct"},"16:6351:20814":{"crate_id":16,"path":["gimli","read","abbrev","Attributes"],"kind":"enum"},"1:903:4510":{"crate_id":1,"path":["std","collections","hash","map","Drain"],"kind":"struct"},"17:10989:5221":{"crate_id":17,"path":["object","read","Export"],"kind":"struct"},"16:5071:6062":{"crate_id":16,"path":["gimli","constants","DwMacro"],"kind":"struct"},"24:5467:3206":{"crate_id":24,"path":["syn","ty","TypeTraitObject"],"kind":"struct"},"2:2795:5005":{"crate_id":2,"path":["core","ops","arith","SubAssign"],"kind":"trait"},"16:2862:6003":{"crate_id":16,"path":["gimli","common","DebugTypeSignature"],"kind":"struct"},"11:1065:36568":{"crate_id":11,"path":["hashbrown","map","KeyOrRef"],"kind":"enum"},"6:4248:6675":{"crate_id":6,"path":["libc","unix","linux_like","linux","spwd"],"kind":"struct"},"17:12403:5524":{"crate_id":17,"path":["object","macho","EncryptionInfoCommand64"],"kind":"struct"},"16:6236:8298":{"crate_id":16,"path":["gimli","read","dwarf","RangeIter"],"kind":"struct"},"16:8170:8056":{"crate_id":16,"path":["gimli","read","unit","DebugTypesUnitHeadersIter"],"kind":"struct"},"24:5118:3179":{"crate_id":24,"path":["syn","lit","LitByteStr"],"kind":"struct"},"1:10720:27467":{"crate_id":1,"path":["std","sys","unix","kernel_copy","SpliceMode"],"kind":"enum"},"6:5786:7100":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","mallinfo2"],"kind":"struct"},"1:8963:27632":{"crate_id":1,"path":["std","sync","mpmc","list","Position"],"kind":"struct"},"17:8823:5145":{"crate_id":17,"path":["object","endian","I32Bytes"],"kind":"struct"},"24:2582:3409":{"crate_id":24,"path":["syn","token","Auto"],"kind":"struct"},"17:9380:20908":{"crate_id":17,"path":["object","read","archive","ArchiveKind"],"kind":"enum"},"2:9924:8097":{"crate_id":2,"path":["core","slice","iter","Split"],"kind":"struct"},"0:928:1672":{"crate_id":0,"path":["serde_derive","Deserialize"],"kind":"proc_derive"},"16:3872:6038":{"crate_id":16,"path":["gimli","constants","DwCfa"],"kind":"struct"},"24:3921:3449":{"crate_id":24,"path":["syn","token","Dot"],"kind":"struct"},"17:10052:20998":{"crate_id":17,"path":["object","read","macho","file","MachOFile"],"kind":"struct"},"2:39287:14160":{"crate_id":2,"path":["core","char","EscapeUnicodeState"],"kind":"enum"},"16:2668:5995":{"crate_id":16,"path":["gimli","common","RawRangeListsOffset"],"kind":"struct"},"17:11037:20901":{"crate_id":17,"path":["object","read","RelocationTarget"],"kind":"enum"},"1:11916:1476":{"crate_id":1,"path":["std","u64"],"kind":"primitive"},"24:4003:3454":{"crate_id":24,"path":["syn","token","FatArrow"],"kind":"struct"},"18:590:5036":{"crate_id":18,"path":["memchr","memmem","twoway","TwoWay"],"kind":"struct"},"1:3397:8802":{"crate_id":1,"path":["std","io","IoSliceMut"],"kind":"struct"},"2:2819:4994":{"crate_id":2,"path":["core","ops","bit","BitAnd"],"kind":"trait"},"1:7947:8831":{"crate_id":1,"path":["std","io","error","ErrorKind"],"kind":"enum"},"24:1338:36864":{"crate_id":24,"path":["syn","lookahead","TokenMarker"],"kind":"enum"},"13:0:2957":{"crate_id":13,"path":["std_detect"],"kind":"module"},"18:609:36663":{"crate_id":18,"path":["memchr","memmem","twoway","Suffix"],"kind":"struct"},"2:38979:14195":{"crate_id":2,"path":["core","ops","try_trait","Yeet"],"kind":"struct"},"6:1710:6638":{"crate_id":6,"path":["libc","unix","linux_like","epoll_event"],"kind":"struct"},"16:7437:6172":{"crate_id":16,"path":["gimli","read","op","OperationIter"],"kind":"struct"},"5:5770:14480":{"crate_id":5,"path":["alloc","sync","ArcInner"],"kind":"struct"},"2:2770:5002":{"crate_id":2,"path":["core","ops","arith","Mul"],"kind":"trait"},"1:10626:8921":{"crate_id":1,"path":["std","sys","unix","fd","FileDesc"],"kind":"struct"},"2:41957:8164":{"crate_id":2,"path":["core","hash","sip","SipHasher24"],"kind":"struct"},"2:21636:7440":{"crate_id":2,"path":["core","num","diy_float","Fp"],"kind":"struct"},"2:2496:148":{"crate_id":2,"path":["core","convert","Into"],"kind":"trait"},"17:1034:20922":{"crate_id":17,"path":["object","read","coff","relocation","CoffRelocationIterator"],"kind":"struct"},"17:9265:20894":{"crate_id":17,"path":["object","read","any","SymbolIterator"],"kind":"struct"},"1:11160:8253":{"crate_id":1,"path":["std","sys_common","process","CommandEnv"],"kind":"struct"},"17:12113:5464":{"crate_id":17,"path":["object","macho","DylinkerCommand"],"kind":"struct"},"16:3225:6031":{"crate_id":16,"path":["gimli","arch","AArch64"],"kind":"struct"},"1:8274:7272":{"crate_id":1,"path":["std","os","linux","raw","arch","stat"],"kind":"struct"},"21:2275:1789":{"crate_id":21,"path":["proc_macro","bridge","Group"],"kind":"struct"},"17:12358:5515":{"crate_id":17,"path":["object","macho","LinkeditDataCommand"],"kind":"struct"},"17:12550:5551":{"crate_id":17,"path":["object","macho","SourceVersionCommand"],"kind":"struct"},"5:1194:8037":{"crate_id":5,"path":["alloc","collections","btree","map","entry","Entry"],"kind":"enum"},"1:8810:3216":{"crate_id":1,"path":["std","sync","mpsc","IntoIter"],"kind":"struct"},"11:1138:8636":{"crate_id":11,"path":["hashbrown","map","OccupiedError"],"kind":"struct"},"22:797:36812":{"crate_id":22,"path":["proc_macro2","imp","TokenTreeIter"],"kind":"enum"},"1:7698:8644":{"crate_id":1,"path":["std","env","JoinPathsError"],"kind":"struct"},"1:5018:27649":{"crate_id":1,"path":["std","path","fmt","DebugHelper"],"kind":"struct"},"6:6530:7263":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","siginfo_t"],"kind":"struct"},"16:3063:5055":{"crate_id":16,"path":["gimli","arch","Arm"],"kind":"struct"},"16:5643:7922":{"crate_id":16,"path":["gimli","read","cfi","EhHdrTable"],"kind":"struct"},"16:6061:19924":{"crate_id":16,"path":["gimli","read","cfi","CallFrameInstruction"],"kind":"enum"},"1:6930:4883":{"crate_id":1,"path":["std","sys_common","lazy_box","LazyBox"],"kind":"struct"},"2:2936:3391":{"crate_id":2,"path":["core","ops","function","FnMut"],"kind":"trait"},"15:0:2965":{"crate_id":15,"path":["addr2line"],"kind":"module"},"5:1239:8636":{"crate_id":5,"path":["alloc","collections","btree","map","entry","OccupiedError"],"kind":"struct"},"5:3085:95":{"crate_id":5,"path":["alloc","collections","btree","set","BTreeSet"],"kind":"struct"},"2:20394:34838":{"crate_id":2,"path":["core","core_simd","swizzle","rotate_lanes_right","Rotate"],"kind":"struct"},"24:5451:2209":{"crate_id":24,"path":["syn","ty","TypePath"],"kind":"struct"},"24:1954:3217":{"crate_id":24,"path":["syn","punctuated","Iter"],"kind":"struct"},"21:2747:1789":{"crate_id":21,"path":["proc_macro","Group"],"kind":"struct"},"17:10936:5251":{"crate_id":17,"path":["object","read","ObjectMapEntry"],"kind":"struct"},"2:2493:74":{"crate_id":2,"path":["core","convert","AsMut"],"kind":"trait"},"2:7144:3281":{"crate_id":2,"path":["core","iter","traits","collect","Extend"],"kind":"trait"},"24:5170:3185":{"crate_id":24,"path":["syn","op","BinOp"],"kind":"enum"},"2:2829:4993":{"crate_id":2,"path":["core","ops","bit","BitXor"],"kind":"trait"},"5:3946:4791":{"crate_id":5,"path":["alloc","collections","vec_deque","drain","drop","DropGuard"],"kind":"struct"},"16:0:2966":{"crate_id":16,"path":["gimli"],"kind":"module"},"2:4:1002":{"crate_id":2,"path":["core","panic"],"kind":"macro"},"1:4092:8885":{"crate_id":1,"path":["std","os","unix","net","ancillary","ScmRights"],"kind":"struct"},"6:4795:6912":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_ifru_map"],"kind":"struct"},"2:46622:7686":{"crate_id":2,"path":["core","core_arch","x86","__m256d"],"kind":"struct"},"24:4938:61":{"crate_id":24,"path":["syn","expr","parsing","raw"],"kind":"struct"},"17:10555:7892":{"crate_id":17,"path":["object","read","pe","export","ExportTable"],"kind":"struct"},"5:3513:161":{"crate_id":5,"path":["alloc","collections","linked_list","LinkedList"],"kind":"struct"},"14:187:19899":{"crate_id":14,"path":["rustc_demangle","SizeLimitedFmtAdapter"],"kind":"struct"},"17:12563:5552":{"crate_id":17,"path":["object","macho","DataInCodeEntry"],"kind":"struct"},"24:5480:3194":{"crate_id":24,"path":["syn","ty","BareVariadic"],"kind":"struct"},"1:8052:8801":{"crate_id":1,"path":["std","io","readbuf","BorrowedCursor"],"kind":"struct"},"5:2074:4170":{"crate_id":5,"path":["alloc","collections","btree","mem","replace","PanicGuard"],"kind":"struct"},"6:7195:7387":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","align","max_align_t"],"kind":"struct"},"24:5427:3196":{"crate_id":24,"path":["syn","ty","TypeBareFn"],"kind":"struct"},"6:6079:7221":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","msqid_ds"],"kind":"struct"},"5:5648:4510":{"crate_id":5,"path":["alloc","string","Drain"],"kind":"struct"},"2:43282:8215":{"crate_id":2,"path":["core","str","lossy","Utf8Chunks"],"kind":"struct"},"17:13842:5953":{"crate_id":17,"path":["object","pe","NonPagedDebugInfo"],"kind":"struct"},"1:2611:8830":{"crate_id":1,"path":["std","io","buffered","linewriter","LineWriter"],"kind":"struct"},"16:5418:6066":{"crate_id":16,"path":["gimli","read","util","sealed","CapacityFull"],"kind":"struct"},"2:2587:127":{"crate_id":2,"path":["core","error","Error"],"kind":"trait"},"24:5029:2440":{"crate_id":24,"path":["syn","generics","TraitBound"],"kind":"struct"},"17:10026:21017":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCacheImageIterator"],"kind":"struct"},"22:703:3383":{"crate_id":22,"path":["proc_macro2","fallback","SourceFile"],"kind":"struct"},"22:880:1865":{"crate_id":22,"path":["proc_macro2","TokenTree"],"kind":"enum"},"2:2718:4063":{"crate_id":2,"path":["core","marker","Freeze"],"kind":"trait"},"6:5917:7165":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","seminfo"],"kind":"struct"},"1:8270:8920":{"crate_id":1,"path":["std","os","linux","process","PidFd"],"kind":"struct"},"6:0:807":{"crate_id":6,"path":["libc"],"kind":"module"},"2:12146:14171":{"crate_id":2,"path":["core","future","into_future","IntoFuture"],"kind":"trait"},"24:4577:2132":{"crate_id":24,"path":["syn","expr","Expr"],"kind":"enum"},"5:3604:4791":{"crate_id":5,"path":["alloc","collections","linked_list","drop","DropGuard"],"kind":"struct"},"17:13461:5834":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation32"],"kind":"struct"},"17:12634:5562":{"crate_id":17,"path":["object","macho","RelocationInfo"],"kind":"struct"},"2:7524:3278":{"crate_id":2,"path":["core","iter","traits","marker","TrustedLen"],"kind":"trait"},"2:42446:14094":{"crate_id":2,"path":["core","slice","iter","ChunksMut"],"kind":"struct"},"1:6367:8960":{"crate_id":1,"path":["std","sync","once","OnceState"],"kind":"struct"},"2:39982:3273":{"crate_id":2,"path":["core","iter","sources","repeat_with","RepeatWith"],"kind":"struct"},"1:9874:8157":{"crate_id":1,"path":["std","sys","unix","net","Socket"],"kind":"struct"},"24:4184:3467":{"crate_id":24,"path":["syn","token","PathSep"],"kind":"struct"},"24:5473:3192":{"crate_id":24,"path":["syn","ty","Abi"],"kind":"struct"},"17:12224:5494":{"crate_id":17,"path":["object","macho","DylibTableOfContents"],"kind":"struct"},"24:344:37040":{"crate_id":24,"path":["syn","buffer","empty","UnsafeSyncEntry"],"kind":"struct"},"2:39027:7532":{"crate_id":2,"path":["core","array","TryFromSliceError"],"kind":"struct"},"5:1609:4791":{"crate_id":5,"path":["alloc","collections","btree","map","drop","DropGuard"],"kind":"struct"},"11:2198:6357":{"crate_id":11,"path":["hashbrown","raw","TableLayout"],"kind":"struct"},"2:20434:34867":{"crate_id":2,"path":["core","core_simd","swizzle","deinterleave","Odd"],"kind":"struct"},"20:504:3989":{"crate_id":20,"path":["quote","__private","IdentFragmentAdapter"],"kind":"struct"},"2:9200:34341":{"crate_id":2,"path":["core","fmt","fmt","BorrowedPlaceholder"],"kind":"struct"},"1:11025:27469":{"crate_id":1,"path":["std","sys","unix","thread","cgroups","Cgroup"],"kind":"enum"},"21:1029:3383":{"crate_id":21,"path":["proc_macro","bridge","client","SourceFile"],"kind":"struct"},"22:689:7860":{"crate_id":22,"path":["proc_macro2","rcvec","RcVecIntoIter"],"kind":"struct"},"2:39490:3284":{"crate_id":2,"path":["core","iter","adapters","array_chunks","ArrayChunks"],"kind":"struct"},"1:3778:8854":{"crate_id":1,"path":["std","net","udp","UdpSocket"],"kind":"struct"},"1:4410:8892":{"crate_id":1,"path":["std","os","unix","process","CommandExt"],"kind":"trait"},"11:834:8728":{"crate_id":11,"path":["hashbrown","map","RawOccupiedEntryMut"],"kind":"struct"},"5:4078:4817":{"crate_id":5,"path":["alloc","collections","vec_deque","into_iter","try_fold","Guard"],"kind":"struct"},"6:6512:7256":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","flock"],"kind":"struct"},"5:35:4423":{"crate_id":5,"path":["alloc","raw_vec","RawVec"],"kind":"struct"},"2:9275:144":{"crate_id":2,"path":["core","hash","Hasher"],"kind":"trait"},"2:44693:7602":{"crate_id":2,"path":["core","core_arch","simd","u16x8"],"kind":"struct"},"17:13292:5787":{"crate_id":17,"path":["object","pe","ImageExportDirectory"],"kind":"struct"},"5:1419:8725":{"crate_id":5,"path":["alloc","collections","btree","map","ValuesMut"],"kind":"struct"},"2:3504:4510":{"crate_id":2,"path":["core","array","drain","Drain"],"kind":"struct"},"2:45973:7672":{"crate_id":2,"path":["core","core_arch","simd","u8x64"],"kind":"struct"},"6:6773:7377":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user_fpregs_struct"],"kind":"struct"},"1:11405:8854":{"crate_id":1,"path":["std","sys_common","net","UdpSocket"],"kind":"struct"},"16:6575:20815":{"crate_id":16,"path":["gimli","read","line","LineInstruction"],"kind":"enum"},"1:7937:27637":{"crate_id":1,"path":["std","io","error","SimpleMessage"],"kind":"struct"},"2:39510:3285":{"crate_id":2,"path":["core","iter","adapters","by_ref_sized","ByRefSized"],"kind":"struct"},"1:11902:1380":{"crate_id":1,"path":["std","str"],"kind":"primitive"},"1:4899:3687":{"crate_id":1,"path":["std","panic","always_abort"],"kind":"function"},"2:38925:201":{"crate_id":2,"path":["core","ops","range","RangeToInclusive"],"kind":"struct"},"24:1491:3325":{"crate_id":24,"path":["syn","parse","ParseBuffer"],"kind":"struct"},"2:4767:786":{"crate_id":2,"path":["core","iter"],"kind":"module"},"2:44891:7608":{"crate_id":2,"path":["core","core_arch","simd","i64x2"],"kind":"struct"},"2:30204:32472":{"crate_id":2,"path":["core","ptr","alignment","AlignmentEnum64"],"kind":"enum"},"1:1897:8645":{"crate_id":1,"path":["std","error","Report"],"kind":"struct"},"2:41424:3362":{"crate_id":2,"path":["core","fmt","num","Octal"],"kind":"struct"},"6:7487:7414":{"crate_id":6,"path":["libc","unix","linux_like","linux","can_frame"],"kind":"struct"},"17:12510:5546":{"crate_id":17,"path":["object","macho","IdentCommand"],"kind":"struct"},"16:7519:8043":{"crate_id":16,"path":["gimli","read","pubtypes","PubTypesEntryIter"],"kind":"struct"},"17:13564:5886":{"crate_id":17,"path":["object","pe","ImageLoadConfigDirectory64"],"kind":"struct"},"1:11896:412":{"crate_id":1,"path":["std","char"],"kind":"primitive"},"1:11900:310":{"crate_id":1,"path":["std","array"],"kind":"primitive"},"5:4148:3217":{"crate_id":5,"path":["alloc","collections","vec_deque","iter","Iter"],"kind":"struct"},"1:11001:7766":{"crate_id":1,"path":["std","sys","unix","process","process_inner","ExitStatus"],"kind":"struct"},"24:2211:2470":{"crate_id":24,"path":["syn","spanned","Spanned"],"kind":"trait"},"24:5346:1786":{"crate_id":24,"path":["syn","ty","Type"],"kind":"enum"},"2:2918:3357":{"crate_id":2,"path":["core","ops","deref","DerefMut"],"kind":"trait"},"2:8186:3697":{"crate_id":2,"path":["core","panic","unwind_safe","AssertUnwindSafe"],"kind":"struct"},"24:4143:3464":{"crate_id":24,"path":["syn","token","Or"],"kind":"struct"},"2:2781:5004":{"crate_id":2,"path":["core","ops","arith","Rem"],"kind":"trait"},"2:39006:2545":{"crate_id":2,"path":["core","any","tags","Value"],"kind":"struct"},"2:22240:168":{"crate_id":2,"path":["core","num","nonzero","NonZeroI16"],"kind":"struct"},"24:5314:2249":{"crate_id":24,"path":["syn","path","Constraint"],"kind":"struct"},"2:38881:200":{"crate_id":2,"path":["core","ops","range","RangeTo"],"kind":"struct"},"5:1978:3336":{"crate_id":5,"path":["alloc","collections","btree","map","Cursor"],"kind":"struct"},"17:11163:5268":{"crate_id":17,"path":["object","archive","AixHeader"],"kind":"struct"},"6:4353:6743":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_event"],"kind":"struct"},"16:6935:20817":{"crate_id":16,"path":["gimli","read","loclists","RawLocListIter"],"kind":"struct"},"5:1311:94":{"crate_id":5,"path":["alloc","collections","btree","map","BTreeMap"],"kind":"struct"},"16:6535:4778":{"crate_id":16,"path":["gimli","read","lazy","imp","LazyArc"],"kind":"struct"},"14:7:8630":{"crate_id":14,"path":["rustc_demangle","legacy","Demangle"],"kind":"struct"},"16:7029:8032":{"crate_id":16,"path":["gimli","read","lookup","LookupEntryIter"],"kind":"struct"},"6:594:6508":{"crate_id":6,"path":["libc","unix","protoent"],"kind":"struct"},"1:2829:4866":{"crate_id":1,"path":["std","io","error","repr_bitpacked","Repr"],"kind":"struct"},"6:6000:7195":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","utmpx"],"kind":"struct"},"17:10798:20899":{"crate_id":17,"path":["object","read","ObjectKind"],"kind":"enum"},"17:10505:21054":{"crate_id":17,"path":["object","read","pe","section","PeRelocationIterator"],"kind":"struct"},"2:3164:134":{"crate_id":2,"path":["core","ops","try_trait","FromResidual"],"kind":"trait"},"16:7683:6025":{"crate_id":16,"path":["gimli","read","str","DebugStrOffsets"],"kind":"struct"},"17:11946:5439":{"crate_id":17,"path":["object","macho","Section32"],"kind":"struct"},"17:8931:5148":{"crate_id":17,"path":["object","read","util","ByteString"],"kind":"struct"},"24:3364:3438":{"crate_id":24,"path":["syn","token","Where"],"kind":"struct"},"1:7826:129":{"crate_id":1,"path":["std","fs","FileType"],"kind":"struct"},"6:1747:6651":{"crate_id":6,"path":["libc","unix","linux_like","sigevent"],"kind":"struct"},"22:695:231":{"crate_id":22,"path":["proc_macro2","fallback","TokenStream"],"kind":"struct"},"1:4100:8886":{"crate_id":1,"path":["std","os","unix","net","ancillary","ScmCredentials"],"kind":"struct"},"24:4085:3460":{"crate_id":24,"path":["syn","token","Minus"],"kind":"struct"},"24:4027:3456":{"crate_id":24,"path":["syn","token","Gt"],"kind":"struct"},"2:39541:3287":{"crate_id":2,"path":["core","iter","adapters","copied","Copied"],"kind":"struct"},"2:10718:14097":{"crate_id":2,"path":["core","slice","iter","GroupByMut"],"kind":"struct"},"16:4037:6040":{"crate_id":16,"path":["gimli","constants","DwTag"],"kind":"struct"},"2:43056:8193":{"crate_id":2,"path":["core","str","pattern","CharSearcher"],"kind":"struct"},"2:46115:7673":{"crate_id":2,"path":["core","core_arch","simd","i16x32"],"kind":"struct"},"2:21760:8856":{"crate_id":2,"path":["core","num","error","IntErrorKind"],"kind":"enum"},"17:9424:5156":{"crate_id":17,"path":["object","read","archive","ArchiveFile"],"kind":"struct"},"2:22339:167":{"crate_id":2,"path":["core","num","nonzero","NonZeroI128"],"kind":"struct"},"2:39470:8783":{"crate_id":2,"path":["core","ffi","VaList"],"kind":"struct"},"24:2786:1813":{"crate_id":24,"path":["syn","token","Enum"],"kind":"struct"},"1:3057:8840":{"crate_id":1,"path":["std","io","readbuf","BorrowedBuf"],"kind":"struct"},"24:4924:3171":{"crate_id":24,"path":["syn","expr","ExprYield"],"kind":"struct"},"22:874:1864":{"crate_id":22,"path":["proc_macro2","Span"],"kind":"struct"},"17:9350:36649":{"crate_id":17,"path":["object","read","any","SectionRelocationIteratorInternal"],"kind":"enum"},"24:4537:3134":{"crate_id":24,"path":["syn","data","FieldsNamed"],"kind":"struct"},"16:5402:5140":{"crate_id":16,"path":["gimli","endianity","BigEndian"],"kind":"struct"},"6:4681:6858":{"crate_id":6,"path":["libc","unix","linux_like","linux","fanotify_response"],"kind":"struct"},"9:174:8330":{"crate_id":9,"path":["miniz_oxide","inflate","stream","InflateState"],"kind":"struct"},"1:11384:8852":{"crate_id":1,"path":["std","sys_common","net","TcpListener"],"kind":"struct"},"24:4556:1805":{"crate_id":24,"path":["syn","derive","Data"],"kind":"enum"},"1:4987:27649":{"crate_id":1,"path":["std","path","fmt","DebugHelper"],"kind":"struct"},"16:3300:6032":{"crate_id":16,"path":["gimli","arch","LoongArch"],"kind":"struct"},"24:2735:3413":{"crate_id":24,"path":["syn","token","Do"],"kind":"struct"},"2:20600:9014":{"crate_id":2,"path":["core","core_simd","elements","int","SimdInt"],"kind":"trait"},"17:13625:5893":{"crate_id":17,"path":["object","pe","ImageHotPatchBase"],"kind":"struct"},"1:9059:216":{"crate_id":1,"path":["std","sync","rwlock","RwLockReadGuard"],"kind":"struct"},"1:10668:8252":{"crate_id":1,"path":["std","sys","unix","fs","FilePermissions"],"kind":"struct"},"1:1567:3216":{"crate_id":1,"path":["std","collections","hash","set","IntoIter"],"kind":"struct"},"2:9056:2259":{"crate_id":2,"path":["core","fmt","Binary"],"kind":"trait"},"9:0:2960":{"crate_id":9,"path":["miniz_oxide"],"kind":"module"},"11:444:141":{"crate_id":11,"path":["hashbrown","map","HashMap"],"kind":"struct"},"2:39620:3311":{"crate_id":2,"path":["core","iter","adapters","intersperse","Intersperse"],"kind":"struct"},"5:6958:8082":{"crate_id":5,"path":["alloc","collections","binary_heap","IntoIterSorted"],"kind":"struct"},"24:4271:3473":{"crate_id":24,"path":["syn","token","Question"],"kind":"struct"},"17:13257:5781":{"crate_id":17,"path":["object","pe","ImageBaseRelocation"],"kind":"struct"},"17:13803:5944":{"crate_id":17,"path":["object","pe","ImageFunctionEntry"],"kind":"struct"},"2:3988:32972":{"crate_id":2,"path":["core","asserting","TryCaptureWithDebug"],"kind":"struct"},"24:4213:3469":{"crate_id":24,"path":["syn","token","PercentEq"],"kind":"struct"},"2:39957:3267":{"crate_id":2,"path":["core","iter","sources","once_with","OnceWith"],"kind":"struct"},"1:3454:8803":{"crate_id":1,"path":["std","io","Seek"],"kind":"trait"},"2:12219:14172":{"crate_id":2,"path":["core","future","poll_fn","PollFn"],"kind":"struct"},"5:860:4799":{"crate_id":5,"path":["alloc","collections","binary_heap","Hole"],"kind":"struct"},"1:8230:8891":{"crate_id":1,"path":["std","os","unix","net","ancillary","AncillaryError"],"kind":"enum"},"2:40709:1848":{"crate_id":2,"path":["core","option","Item"],"kind":"struct"},"17:13651:5902":{"crate_id":17,"path":["object","pe","ImageArmRuntimeFunctionEntry"],"kind":"struct"},"17:13385:5812":{"crate_id":17,"path":["object","pe","ImageDelayloadDescriptor"],"kind":"struct"},"6:4727:6882":{"crate_id":6,"path":["libc","unix","linux_like","linux","can_filter"],"kind":"struct"},"1:1596:1837":{"crate_id":1,"path":["std","collections","hash","set","Union"],"kind":"struct"},"1:1570:4510":{"crate_id":1,"path":["std","collections","hash","set","Drain"],"kind":"struct"},"16:6506:7999":{"crate_id":16,"path":["gimli","read","index","UnitIndexSectionIterator"],"kind":"struct"},"1:11343:8853":{"crate_id":1,"path":["std","sys_common","net","TcpStream"],"kind":"struct"},"6:4261:6685":{"crate_id":6,"path":["libc","unix","linux_like","linux","dqblk"],"kind":"struct"},"24:3211:2253":{"crate_id":24,"path":["syn","token","Trait"],"kind":"struct"},"17:10598:5252":{"crate_id":17,"path":["object","read","pe","import","Import"],"kind":"enum"},"6:7481:7413":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_barrier_t"],"kind":"struct"},"14:40:1800":{"crate_id":14,"path":["rustc_demangle","v0","Ident"],"kind":"struct"},"20:281:1873":{"crate_id":20,"path":["quote","__private","push_lifetime_spanned","Lifetime"],"kind":"struct"},"2:42942:8192":{"crate_id":2,"path":["core","str","iter","EncodeUtf16"],"kind":"struct"},"2:41974:144":{"crate_id":2,"path":["core","hash","sip","Hasher"],"kind":"struct"},"2:44338:7583":{"crate_id":2,"path":["core","core_arch","simd","i8x4"],"kind":"struct"},"11:2080:8732":{"crate_id":11,"path":["hashbrown","set","VacantEntry"],"kind":"struct"},"24:0:1651":{"crate_id":24,"path":["syn"],"kind":"module"},"2:22009:176":{"crate_id":2,"path":["core","num","nonzero","NonZeroU8"],"kind":"struct"},"6:5759:7081":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","termios"],"kind":"struct"},"12:0:2963":{"crate_id":12,"path":["rustc_std_workspace_alloc"],"kind":"module"},"24:4798:3142":{"crate_id":24,"path":["syn","expr","ExprBreak"],"kind":"struct"},"2:9060:3372":{"crate_id":2,"path":["core","fmt","UpperHex"],"kind":"trait"},"18:652:5029":{"crate_id":18,"path":["memchr","memmem","x86","sse","Forward"],"kind":"struct"},"1:8848:8969":{"crate_id":1,"path":["std","sync","mpsc","TryRecvError"],"kind":"enum"},"1:8144:3308":{"crate_id":1,"path":["std","io","Take"],"kind":"struct"},"24:3398:245":{"crate_id":24,"path":["syn","token","Yield"],"kind":"struct"},"24:4453:3609":{"crate_id":24,"path":["syn","token","Bracket"],"kind":"struct"},"24:5126:3181":{"crate_id":24,"path":["syn","lit","LitFloat"],"kind":"struct"},"20:148:3718":{"crate_id":20,"path":["quote","__private","HasIterator"],"kind":"struct"},"16:6671:6105":{"crate_id":16,"path":["gimli","read","line","LineRow"],"kind":"struct"},"24:3381:3439":{"crate_id":24,"path":["syn","token","While"],"kind":"struct"},"22:112:36803":{"crate_id":22,"path":["proc_macro2","rcvec","RcVecBuilder"],"kind":"struct"},"2:11576:14106":{"crate_id":2,"path":["core","str","pattern","DoubleEndedSearcher"],"kind":"trait"},"2:38759:4416":{"crate_id":2,"path":["core","ops","generator","GeneratorState"],"kind":"enum"},"1:1926:8768":{"crate_id":1,"path":["std","error","Indented"],"kind":"struct"},"5:286:1847":{"crate_id":5,"path":["alloc","boxed","Box"],"kind":"struct"},"16:7016:8030":{"crate_id":16,"path":["gimli","read","lookup","DebugLookup"],"kind":"struct"},"2:50299:7701":{"crate_id":2,"path":["core","core_simd","vector","ptr","SimdMutPtr"],"kind":"struct"},"17:13356:5804":{"crate_id":17,"path":["object","pe","ImageImportDescriptor"],"kind":"struct"},"6:4952:6993":{"crate_id":6,"path":["libc","unix","linux_like","linux","mq_attr"],"kind":"struct"},"16:6400:7987":{"crate_id":16,"path":["gimli","read","aranges","ArangeHeader"],"kind":"struct"},"16:4969:6059":{"crate_id":16,"path":["gimli","constants","DwLns"],"kind":"struct"},"17:8443:20884":{"crate_id":17,"path":["object","common","RelocationKind"],"kind":"enum"},"2:43369:8217":{"crate_id":2,"path":["core","str","LinesMap"],"kind":"struct"},"2:2854:5009":{"crate_id":2,"path":["core","ops","bit","BitXorAssign"],"kind":"trait"},"17:9443:20910":{"crate_id":17,"path":["object","read","archive","ArchiveMemberIterator"],"kind":"struct"},"24:2228:7833":{"crate_id":24,"path":["syn","thread","ThreadBound"],"kind":"struct"},"2:43385:8221":{"crate_id":2,"path":["core","str","IsWhitespace"],"kind":"struct"},"6:4628:6831":{"crate_id":6,"path":["libc","unix","linux_like","linux","posix_spawn_file_actions_t"],"kind":"struct"},"6:4618:6824":{"crate_id":6,"path":["libc","unix","linux_like","linux","mntent"],"kind":"struct"},"6:1527:6520":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreq_source"],"kind":"struct"},"1:1984:183":{"crate_id":1,"path":["std","ffi","os_str","OsString"],"kind":"struct"},"5:630:8637":{"crate_id":5,"path":["alloc","boxed","from","StringError"],"kind":"struct"},"5:6700:4835":{"crate_id":5,"path":["alloc","vec","dedup_by","FillGapOnDrop"],"kind":"struct"},"2:39941:8152":{"crate_id":2,"path":["core","iter","sources","from_generator","FromGenerator"],"kind":"struct"},"24:3783:3440":{"crate_id":24,"path":["syn","token","And"],"kind":"struct"},"22:0:1652":{"crate_id":22,"path":["proc_macro2"],"kind":"module"},"1:4324:8884":{"crate_id":1,"path":["std","os","unix","net","stream","UnixStream"],"kind":"struct"},"1:306:1428":{"crate_id":1,"path":["std","thread"],"kind":"module"},"17:13698:5914":{"crate_id":17,"path":["object","pe","ImageEnclaveConfig32"],"kind":"struct"},"17:11299:5298":{"crate_id":17,"path":["object","elf","SectionHeader32"],"kind":"struct"},"24:1601:3323":{"crate_id":24,"path":["syn","parse","Parser"],"kind":"trait"},"6:5823:7114":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","rtentry"],"kind":"struct"},"17:13791:5942":{"crate_id":17,"path":["object","pe","ImageDebugMisc"],"kind":"struct"},"2:38720:14142":{"crate_id":2,"path":["core","ops","control_flow","ControlFlow"],"kind":"enum"},"11:815:8726":{"crate_id":11,"path":["hashbrown","map","RawEntryBuilderMut"],"kind":"struct"},"6:473:1790":{"crate_id":6,"path":["libc","unix","group"],"kind":"struct"},"1:8218:8235":{"crate_id":1,"path":["std","os","unix","net","addr","SocketAddr"],"kind":"struct"},"1:1823:8750":{"crate_id":1,"path":["std","env","SplitPaths"],"kind":"struct"},"6:5910:7164":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","Elf32_Chdr"],"kind":"struct"},"17:13041:5727":{"crate_id":17,"path":["object","pe","Guid"],"kind":"struct"},"11:1866:8070":{"crate_id":11,"path":["hashbrown","set","SymmetricDifference"],"kind":"struct"},"6:4981:7012":{"crate_id":6,"path":["libc","unix","linux_like","linux","ifreq"],"kind":"struct"},"6:4637:6836":{"crate_id":6,"path":["libc","unix","linux_like","linux","posix_spawnattr_t"],"kind":"struct"},"11:119:4779":{"crate_id":11,"path":["hashbrown","raw","RawTable"],"kind":"struct"},"2:21260:34842":{"crate_id":2,"path":["core","core_simd","vector","splat","Splat"],"kind":"struct"},"16:7366:20821":{"crate_id":16,"path":["gimli","read","op","EvaluationResult"],"kind":"enum"},"6:525:6470":{"crate_id":6,"path":["libc","unix","ipv6_mreq"],"kind":"struct"},"2:2803:5007":{"crate_id":2,"path":["core","ops","arith","DivAssign"],"kind":"trait"},"17:9534:20917":{"crate_id":17,"path":["object","read","coff","section","CoffSectionIterator"],"kind":"struct"},"2:22075:174":{"crate_id":2,"path":["core","num","nonzero","NonZeroU32"],"kind":"struct"},"21:2793:1800":{"crate_id":21,"path":["proc_macro","Ident"],"kind":"struct"},"6:5945:7179":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_exit"],"kind":"struct"},"1:2211:4450":{"crate_id":1,"path":["std","fs","read"],"kind":"function"},"17:13721:5927":{"crate_id":17,"path":["object","pe","ImageEnclaveConfig64"],"kind":"struct"},"24:2905:3421":{"crate_id":24,"path":["syn","token","In"],"kind":"struct"},"24:1623:2039":{"crate_id":24,"path":["syn","parse_quote"],"kind":"macro"},"11:985:8037":{"crate_id":11,"path":["hashbrown","map","Entry"],"kind":"enum"},"5:6983:35015":{"crate_id":5,"path":["alloc","collections","btree","merge_iter","Peeked"],"kind":"enum"},"17:8490:20885":{"crate_id":17,"path":["object","common","RelocationEncoding"],"kind":"enum"},"24:4854:2134":{"crate_id":24,"path":["syn","expr","ExprLit"],"kind":"struct"},"2:2677:224":{"crate_id":2,"path":["core","marker","StructuralPartialEq"],"kind":"trait"},"6:7218:7400":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","align","sem_t"],"kind":"struct"},"6:4583:6820":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Shdr"],"kind":"struct"},"6:578:6498":{"crate_id":6,"path":["libc","unix","tms"],"kind":"struct"},"6:1899:15898":{"crate_id":6,"path":["libc","unix","linux_like","linux","fpos64_t"],"kind":"enum"},"16:7335:36621":{"crate_id":16,"path":["gimli","read","op","EvaluationWaiting"],"kind":"enum"},"1:3877:8857":{"crate_id":1,"path":["std","os","unix","ffi","os_str","OsStrExt"],"kind":"trait"},"22:869:231":{"crate_id":22,"path":["proc_macro2","TokenStream"],"kind":"struct"},"6:4457:6792":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_effect"],"kind":"struct"},"16:6990:6131":{"crate_id":16,"path":["gimli","read","loclists","LocationListEntry"],"kind":"struct"},"2:46225:7674":{"crate_id":2,"path":["core","core_arch","simd","u16x32"],"kind":"struct"},"16:6558:8001":{"crate_id":16,"path":["gimli","read","line","LineRows"],"kind":"struct"},"24:2837:2119":{"crate_id":24,"path":["syn","token","Fn"],"kind":"struct"},"24:893:36917":{"crate_id":24,"path":["syn","generics","TypeParamsMut"],"kind":"struct"},"6:4962:6998":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_ifr_ifru"],"kind":"union"},"5:686:110":{"crate_id":5,"path":["alloc","borrow","Cow"],"kind":"enum"},"17:11653:5377":{"crate_id":17,"path":["object","elf","GnuHashHeader"],"kind":"struct"},"24:3824:3443":{"crate_id":24,"path":["syn","token","At"],"kind":"struct"},"24:4300:3475":{"crate_id":24,"path":["syn","token","Semi"],"kind":"struct"},"17:386:20877":{"crate_id":17,"path":["object","read","any","Segment"],"kind":"struct"},"2:7521:3276":{"crate_id":2,"path":["core","iter","traits","marker","FusedIterator"],"kind":"trait"},"20:150:3717":{"crate_id":20,"path":["quote","__private","ThereIsNoIteratorInRepetition"],"kind":"struct"},"2:43373:8218":{"crate_id":2,"path":["core","str","CharEscapeDebugContinue"],"kind":"struct"},"17:12307:5510":{"crate_id":17,"path":["object","macho","TwolevelHint"],"kind":"struct"},"17:11011:5254":{"crate_id":17,"path":["object","read","CodeView"],"kind":"struct"},"2:46365:7676":{"crate_id":2,"path":["core","core_arch","simd","u32x16"],"kind":"struct"},"14:160:8630":{"crate_id":14,"path":["rustc_demangle","Demangle"],"kind":"struct"},"17:13433:5827":{"crate_id":17,"path":["object","pe","ImageResourceDataEntry"],"kind":"struct"},"5:3524:3217":{"crate_id":5,"path":["alloc","collections","linked_list","Iter"],"kind":"struct"},"24:2616:3411":{"crate_id":24,"path":["syn","token","Become"],"kind":"struct"},"2:9267:140":{"crate_id":2,"path":["core","hash","Hash"],"kind":"trait"},"17:13367:5808":{"crate_id":17,"path":["object","pe","ImageBoundImportDescriptor"],"kind":"struct"},"1:3246:8834":{"crate_id":1,"path":["std","io","stdio","StderrLock"],"kind":"struct"},"2:39215:8126":{"crate_id":2,"path":["core","char","convert","ParseCharError"],"kind":"struct"},"18:736:24798":{"crate_id":18,"path":["memchr","memmem","SearcherKind"],"kind":"enum"},"1:8157:8097":{"crate_id":1,"path":["std","io","Split"],"kind":"struct"},"2:43566:203":{"crate_id":2,"path":["core","future","ready","Ready"],"kind":"struct"},"17:12894:5674":{"crate_id":17,"path":["object","pe","MaskedRichHeaderEntry"],"kind":"struct"},"2:2929:2202":{"crate_id":2,"path":["core","ops","drop","Drop"],"kind":"trait"},"24:4172:3466":{"crate_id":24,"path":["syn","token","OrOr"],"kind":"struct"},"24:3194:3432":{"crate_id":24,"path":["syn","token","Super"],"kind":"struct"},"2:39560:3296":{"crate_id":2,"path":["core","iter","adapters","enumerate","Enumerate"],"kind":"struct"},"6:572:6495":{"crate_id":6,"path":["libc","unix","itimerval"],"kind":"struct"},"16:4327:6041":{"crate_id":16,"path":["gimli","constants","DwAt"],"kind":"struct"},"2:40507:7542":{"crate_id":2,"path":["core","net","ip_addr","Ipv6Addr"],"kind":"struct"},"17:12178:5470":{"crate_id":17,"path":["object","macho","SymtabCommand"],"kind":"struct"},"17:9641:20924":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdatSectionIterator"],"kind":"struct"},"24:1937:3216":{"crate_id":24,"path":["syn","punctuated","IntoIter"],"kind":"struct"},"2:43619:8388":{"crate_id":2,"path":["core","task","wake","RawWaker"],"kind":"struct"},"2:11571:14108":{"crate_id":2,"path":["core","str","pattern","ReverseSearcher"],"kind":"trait"},"5:4759:202":{"crate_id":5,"path":["alloc","rc","Rc"],"kind":"struct"},"24:1089:1873":{"crate_id":24,"path":["syn","lifetime","Lifetime"],"kind":"function"},"11:1681:143":{"crate_id":11,"path":["hashbrown","set","HashSet"],"kind":"struct"},"2:45012:7612":{"crate_id":2,"path":["core","core_arch","simd","m8x16"],"kind":"struct"},"2:2667:218":{"crate_id":2,"path":["core","marker","Send"],"kind":"trait"},"1:7942:8353":{"crate_id":1,"path":["std","io","error","Custom"],"kind":"struct"},"5:3121:8069":{"crate_id":5,"path":["alloc","collections","btree","set","Difference"],"kind":"struct"},"24:3024:3426":{"crate_id":24,"path":["syn","token","Mut"],"kind":"struct"},"16:7509:6021":{"crate_id":16,"path":["gimli","read","pubtypes","DebugPubTypes"],"kind":"struct"},"24:1761:1794":{"crate_id":24,"path":["syn","punctuated","Punctuated"],"kind":"struct"},"24:4868:3158":{"crate_id":24,"path":["syn","expr","ExprMethodCall"],"kind":"struct"},"1:10946:4893":{"crate_id":1,"path":["std","sys","unix","process","process_inner","posix_spawn","PosixSpawnattr"],"kind":"struct"},"24:151:1853":{"crate_id":24,"path":["syn","Token"],"kind":"macro"},"11:1085:19883":{"crate_id":11,"path":["hashbrown","map","OccupiedEntryRef"],"kind":"struct"},"2:9310:14174":{"crate_id":2,"path":["core","hash","BuildHasher"],"kind":"trait"},"2:30602:4077":{"crate_id":2,"path":["core","cmp","Reverse"],"kind":"struct"},"17:11502:5340":{"crate_id":17,"path":["object","elf","ProgramHeader64"],"kind":"struct"},"17:12259:5505":{"crate_id":17,"path":["object","macho","DylibModule64"],"kind":"struct"},"17:10440:21053":{"crate_id":17,"path":["object","read","pe","file","PeComdatSectionIterator"],"kind":"struct"},"6:4714:6877":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_tp"],"kind":"struct"},"17:12059:5456":{"crate_id":17,"path":["object","macho","SubClientCommand"],"kind":"struct"},"1:6580:215":{"crate_id":1,"path":["std","sync","rwlock","RwLock"],"kind":"struct"},"17:11832:5422":{"crate_id":17,"path":["object","macho","FatArch64"],"kind":"struct"},"16:2470:5987":{"crate_id":16,"path":["gimli","common","DebugInfoOffset"],"kind":"struct"},"2:2858:5012":{"crate_id":2,"path":["core","ops","bit","ShlAssign"],"kind":"trait"},"5:3741:4791":{"crate_id":5,"path":["alloc","collections","linked_list","drop","DropGuard"],"kind":"struct"},"17:247:36638":{"crate_id":17,"path":["object","read","util","DebugLen"],"kind":"struct"},"1:1846:4585":{"crate_id":1,"path":["std","env","Args"],"kind":"struct"},"16:5741:20809":{"crate_id":16,"path":["gimli","read","cfi","CieOrFde"],"kind":"enum"},"17:13249:5779":{"crate_id":17,"path":["object","pe","ImageLinenumber"],"kind":"struct"},"24:4440:2461":{"crate_id":24,"path":["syn","token","Brace"],"kind":"struct"},"24:103:4134":{"crate_id":24,"path":["syn","token","CustomToken"],"kind":"trait"},"24:5128:3177":{"crate_id":24,"path":["syn","lit","LitBool"],"kind":"struct"},"16:6662:8005":{"crate_id":16,"path":["gimli","read","line","LineInstructions"],"kind":"struct"},"1:7682:8758":{"crate_id":1,"path":["std","env","VarError"],"kind":"enum"},"17:13763:5933":{"crate_id":17,"path":["object","pe","ImageDebugDirectory"],"kind":"struct"},"2:7098:3282":{"crate_id":2,"path":["core","iter","traits","accum","Product"],"kind":"trait"},"16:6868:6123":{"crate_id":16,"path":["gimli","read","lists","ListsHeader"],"kind":"struct"},"2:3189:32362":{"crate_id":2,"path":["core","ops","try_trait","NeverShortCircuitResidual"],"kind":"enum"},"5:3147:8070":{"crate_id":5,"path":["alloc","collections","btree","set","SymmetricDifference"],"kind":"struct"},"24:1487:3229":{"crate_id":24,"path":["syn","parse","Parse"],"kind":"trait"},"18:660:24800":{"crate_id":18,"path":["memchr","memmem","FindIter"],"kind":"struct"},"1:11320:4898":{"crate_id":1,"path":["std","sys_common","net","LookupHost"],"kind":"struct"},"10:0:2961":{"crate_id":10,"path":["adler"],"kind":"module"},"2:12343:106":{"crate_id":2,"path":["core","task","wake","Context"],"kind":"struct"},"2:45767:7640":{"crate_id":2,"path":["core","core_arch","simd","i8x64"],"kind":"struct"},"21:217:8297":{"crate_id":21,"path":["proc_macro","bridge","fxhash","FxHasher"],"kind":"struct"},"17:13443:5830":{"crate_id":17,"path":["object","pe","ImageLoadConfigCodeIntegrity"],"kind":"struct"},"16:3782:6036":{"crate_id":16,"path":["gimli","constants","DwSectV2"],"kind":"struct"},"2:43424:121":{"crate_id":2,"path":["core","time","Duration"],"kind":"struct"},"17:13101:5741":{"crate_id":17,"path":["object","pe","ImageSectionHeader"],"kind":"struct"},"5:5582:230":{"crate_id":5,"path":["alloc","string","ToString"],"kind":"trait"},"5:4277:4819":{"crate_id":5,"path":["alloc","collections","vec_deque","drop","Dropper"],"kind":"struct"},"17:9340:20896":{"crate_id":17,"path":["object","read","any","SectionRelocationIterator"],"kind":"struct"},"5:777:96":{"crate_id":5,"path":["alloc","collections","binary_heap","BinaryHeap"],"kind":"struct"},"1:3461:8821":{"crate_id":1,"path":["std","io","BufRead"],"kind":"trait"},"24:4892:3163":{"crate_id":24,"path":["syn","expr","ExprReturn"],"kind":"struct"},"16:7543:6023":{"crate_id":16,"path":["gimli","read","rnglists","DebugRngLists"],"kind":"struct"},"5:7175:8090":{"crate_id":5,"path":["alloc","ffi","c_str","IntoStringError"],"kind":"struct"},"2:11622:14116":{"crate_id":2,"path":["core","str","pattern","MultiCharEqPattern"],"kind":"struct"},"2:9513:4849":{"crate_id":2,"path":["core","slice","sort","merge","MergeHole"],"kind":"struct"},"2:40644:7550":{"crate_id":2,"path":["core","net","socket_addr","SocketAddrV6"],"kind":"struct"},"24:842:8874":{"crate_id":24,"path":["syn","ext","private","Sealed"],"kind":"trait"},"17:9617:20916":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdatIterator"],"kind":"struct"},"20:37:2825":{"crate_id":20,"path":["quote","format_ident"],"kind":"macro"},"18:491:7868":{"crate_id":18,"path":["memchr","cow","Imp"],"kind":"struct"},"24:4880:3160":{"crate_id":24,"path":["syn","expr","ExprRange"],"kind":"struct"},"2:48938:244":{"crate_id":2,"path":["core","core_simd","fmt","fmt","Wrapper"],"kind":"struct"},"24:5319:3188":{"crate_id":24,"path":["syn","path","ParenthesizedGenericArguments"],"kind":"struct"},"5:7217:8638":{"crate_id":5,"path":["alloc","string","FromUtf16Error"],"kind":"struct"},"18:614:36656":{"crate_id":18,"path":["memchr","memmem","twoway","SuffixKind"],"kind":"enum"},"16:55:6215":{"crate_id":16,"path":["gimli","endianity","Endianity"],"kind":"trait"},"1:5759:4871":{"crate_id":1,"path":["std","sync","lazy_lock","LazyLock"],"kind":"struct"},"5:7206:8091":{"crate_id":5,"path":["alloc","string","FromUtf8Error"],"kind":"struct"},"17:13159:5755":{"crate_id":17,"path":["object","pe","ImageSymbolExBytes"],"kind":"struct"},"2:40861:3216":{"crate_id":2,"path":["core","result","IntoIter"],"kind":"struct"},"2:1648:1075":{"crate_id":2,"path":["core","ptr"],"kind":"module"},"6:4850:6945":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_rcvinfo"],"kind":"struct"},"17:12915:5684":{"crate_id":17,"path":["object","pe","ImageDataDirectory"],"kind":"struct"},"2:39020:3349":{"crate_id":2,"path":["core","any","tags","Ref"],"kind":"struct"},"2:10117:14100":{"crate_id":2,"path":["core","slice","iter","RSplitMut"],"kind":"struct"},"6:4828:6929":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_sndrcvinfo"],"kind":"struct"},"16:7557:6173":{"crate_id":16,"path":["gimli","read","rnglists","RangeLists"],"kind":"struct"},"2:2453:8874":{"crate_id":2,"path":["core","convert","num","private","Sealed"],"kind":"trait"},"2:2502:236":{"crate_id":2,"path":["core","convert","TryInto"],"kind":"trait"},"2:42626:8172":{"crate_id":2,"path":["core","str","iter","CharIndices"],"kind":"struct"},"16:7293:6153":{"crate_id":16,"path":["gimli","read","op","Piece"],"kind":"struct"},"16:7467:8038":{"crate_id":16,"path":["gimli","read","pubnames","PubNamesEntry"],"kind":"struct"},"16:2905:6005":{"crate_id":16,"path":["gimli","common","EhFrameOffset"],"kind":"struct"},"1:8758:7766":{"crate_id":1,"path":["std","process","ExitStatus"],"kind":"struct"},"24:5122:3180":{"crate_id":24,"path":["syn","lit","LitChar"],"kind":"struct"},"1:1064:8731":{"crate_id":1,"path":["std","collections","hash","map","OccupiedEntry"],"kind":"struct"},"1:2384:2972":{"crate_id":1,"path":["std","io"],"kind":"module"},"2:12385:203":{"crate_id":2,"path":["core","task","ready","Ready"],"kind":"struct"},"5:4262:243":{"crate_id":5,"path":["alloc","collections","vec_deque","VecDeque"],"kind":"struct"},"24:5155:2170":{"crate_id":24,"path":["syn","mac","Macro"],"kind":"struct"},"24:917:3175":{"crate_id":24,"path":["syn","generics","ImplGenerics"],"kind":"struct"},"16:6243:36595":{"crate_id":16,"path":["gimli","read","dwarf","RangeIterInner"],"kind":"enum"},"24:88:1853":{"crate_id":24,"path":["syn","token","Token"],"kind":"trait"},"16:7837:8045":{"crate_id":16,"path":["gimli","read","unit","DebuggingInformationEntry"],"kind":"struct"},"6:5690:7049":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","statx_timestamp"],"kind":"struct"},"1:4841:8917":{"crate_id":1,"path":["std","os","net","linux_ext","addr","SocketAddrExt"],"kind":"trait"},"2:43457:14287":{"crate_id":2,"path":["core","time","TryFromFloatSecsErrorKind"],"kind":"enum"},"24:4900:3165":{"crate_id":24,"path":["syn","expr","ExprTry"],"kind":"struct"},"16:6022:20812":{"crate_id":16,"path":["gimli","read","cfi","RegisterRule"],"kind":"enum"},"1:637:8716":{"crate_id":1,"path":["std","backtrace","BacktraceFrame"],"kind":"struct"},"16:5630:20807":{"crate_id":16,"path":["gimli","read","cfi","EhHdrTableIter"],"kind":"struct"},"18:624:36654":{"crate_id":18,"path":["memchr","memmem","twoway","SuffixOrdering"],"kind":"enum"},"16:7317:36596":{"crate_id":16,"path":["gimli","read","op","EvaluationState"],"kind":"enum"},"5:960:4791":{"crate_id":5,"path":["alloc","collections","binary_heap","drop","DropGuard"],"kind":"struct"},"17:9469:20912":{"crate_id":17,"path":["object","read","archive","ArchiveMember"],"kind":"struct"},"17:8953:5149":{"crate_id":17,"path":["object","read","util","StringTable"],"kind":"struct"},"16:6728:8007":{"crate_id":16,"path":["gimli","read","line","LineProgramHeader"],"kind":"struct"},"2:2812:3463":{"crate_id":2,"path":["core","ops","bit","Not"],"kind":"trait"},"16:8142:20829":{"crate_id":16,"path":["gimli","read","unit","EntriesTreeIter"],"kind":"struct"},"11:725:8066":{"crate_id":11,"path":["hashbrown","map","Keys"],"kind":"struct"},"1:10415:8837":{"crate_id":1,"path":["std","sys","unix","stdio","Stdout"],"kind":"struct"},"2:9545:4854":{"crate_id":2,"path":["core","slice","sort","merge_sort","RunVec"],"kind":"struct"},"16:6307:6006":{"crate_id":16,"path":["gimli","read","abbrev","DebugAbbrev"],"kind":"struct"},"16:5724:7929":{"crate_id":16,"path":["gimli","read","cfi","CfiEntriesIter"],"kind":"struct"},"2:39013:32561":{"crate_id":2,"path":["core","any","tags","MaybeSizedValue"],"kind":"struct"},"16:6943:20818":{"crate_id":16,"path":["gimli","read","loclists","RawLocListEntry"],"kind":"enum"},"24:4382:3481":{"crate_id":24,"path":["syn","token","SlashEq"],"kind":"struct"},"2:10158:8180":{"crate_id":2,"path":["core","slice","iter","SplitN"],"kind":"struct"},"24:4991:3173":{"crate_id":24,"path":["syn","generics","ConstParam"],"kind":"struct"},"18:755:7885":{"crate_id":18,"path":["memchr","memmem","SearcherRev"],"kind":"struct"},"1:2866:127":{"crate_id":1,"path":["std","io","error","Error"],"kind":"struct"},"2:43228:14123":{"crate_id":2,"path":["core","str","pattern","StrSearcherImpl"],"kind":"enum"},"5:2913:25430":{"crate_id":5,"path":["alloc","collections","btree","node","marker","ValMut"],"kind":"struct"},"2:11089:14246":{"crate_id":2,"path":["core","slice","SlicePattern"],"kind":"trait"},"17:8548:20887":{"crate_id":17,"path":["object","common","SegmentFlags"],"kind":"enum"},"2:30040:32452":{"crate_id":2,"path":["core","ptr","alignment","AlignmentEnum16"],"kind":"enum"},"17:9796:5171":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbol"],"kind":"struct"},"6:4703:6869":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_extended_err"],"kind":"struct"},"17:10491:21027":{"crate_id":17,"path":["object","read","pe","section","PeSection"],"kind":"struct"},"1:3673:8853":{"crate_id":1,"path":["std","net","tcp","TcpStream"],"kind":"struct"},"14:165:19892":{"crate_id":14,"path":["rustc_demangle","DemangleStyle"],"kind":"enum"},"24:2701:3412":{"crate_id":24,"path":["syn","token","Crate"],"kind":"struct"},"16:7626:20825":{"crate_id":16,"path":["gimli","read","rnglists","RngListIter"],"kind":"struct"},"2:2454:14167":{"crate_id":2,"path":["core","convert","num","FloatToInt"],"kind":"trait"},"24:4466:2125":{"crate_id":24,"path":["syn","token","Paren"],"kind":"struct"},"1:7578:8874":{"crate_id":1,"path":["std","sealed","Sealed"],"kind":"trait"},"19:0:1019":{"crate_id":19,"path":["panic_unwind"],"kind":"module"},"1:10134:8947":{"crate_id":1,"path":["std","sys","unix","pipe","AnonPipe"],"kind":"struct"},"24:2218:8874":{"crate_id":24,"path":["syn","spanned","private","Sealed"],"kind":"trait"},"5:1210:8732":{"crate_id":5,"path":["alloc","collections","btree","map","entry","VacantEntry"],"kind":"struct"},"16:7488:8041":{"crate_id":16,"path":["gimli","read","pubnames","PubNamesEntryIter"],"kind":"struct"},"24:1140:7832":{"crate_id":24,"path":["syn","lit","LitFloatRepr"],"kind":"struct"},"20:34:8874":{"crate_id":20,"path":["quote","ext","private","Sealed"],"kind":"trait"},"20:77:1866":{"crate_id":20,"path":["quote","to_tokens","ToTokens"],"kind":"trait"},"2:20639:8874":{"crate_id":2,"path":["core","core_simd","elements","sealed","Sealed"],"kind":"trait"},"1:1073:8732":{"crate_id":1,"path":["std","collections","hash","map","VacantEntry"],"kind":"struct"},"6:7173:7386":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","not_x32","statvfs"],"kind":"struct"},"24:4056:3458":{"crate_id":24,"path":["syn","token","Le"],"kind":"struct"},"2:39413:8142":{"crate_id":2,"path":["core","ffi","c_str","FromBytesUntilNulError"],"kind":"struct"},"2:46763:7693":{"crate_id":2,"path":["core","core_arch","x86","cpuid","CpuidResult"],"kind":"struct"},"6:4766:6897":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlmsghdr"],"kind":"struct"},"17:11993:5445":{"crate_id":17,"path":["object","macho","Fvmlib"],"kind":"struct"},"1:11052:7779":{"crate_id":1,"path":["std","sys","unix","time","SystemTime"],"kind":"struct"},"2:46724:7692":{"crate_id":2,"path":["core","core_arch","x86","__m512bh"],"kind":"struct"},"16:4702:6050":{"crate_id":16,"path":["gimli","constants","DwLang"],"kind":"struct"},"17:11532:5344":{"crate_id":17,"path":["object","elf","Dyn64"],"kind":"struct"},"1:10820:8644":{"crate_id":1,"path":["std","sys","unix","os","JoinPathsError"],"kind":"struct"},"1:6751:9003":{"crate_id":1,"path":["std","std_float","StdFloat"],"kind":"trait"},"17:10649:7904":{"crate_id":17,"path":["object","read","pe","relocation","RelocationIterator"],"kind":"struct"},"16:8090:8052":{"crate_id":16,"path":["gimli","read","unit","EntriesCursor"],"kind":"struct"},"17:10967:5252":{"crate_id":17,"path":["object","read","Import"],"kind":"struct"},"2:38837:196":{"crate_id":2,"path":["core","ops","range","Range"],"kind":"struct"},"17:10080:21019":{"crate_id":17,"path":["object","read","macho","file","MachOComdat"],"kind":"struct"},"16:6336:7983":{"crate_id":16,"path":["gimli","read","abbrev","Abbreviation"],"kind":"struct"},"20:272:1873":{"crate_id":20,"path":["quote","__private","push_lifetime","Lifetime"],"kind":"struct"},"17:9148:36642":{"crate_id":17,"path":["object","read","any","ComdatIteratorInternal"],"kind":"enum"},"2:9875:3217":{"crate_id":2,"path":["core","slice","iter","Iter"],"kind":"struct"},"2:40553:1864":{"crate_id":2,"path":["core","net","ip_addr","fmt","Span"],"kind":"struct"},"17:9188:36652":{"crate_id":17,"path":["object","read","any","ComdatSectionIteratorInternal"],"kind":"enum"},"16:8156:6027":{"crate_id":16,"path":["gimli","read","unit","DebugTypes"],"kind":"struct"},"2:44248:7579":{"crate_id":2,"path":["core","core_arch","simd","u8x2"],"kind":"struct"},"6:4307:6719":{"crate_id":6,"path":["libc","unix","linux_like","linux","fsid_t"],"kind":"struct"},"1:10824:6416":{"crate_id":1,"path":["std","sys","unix","os_str","Buf"],"kind":"struct"},"22:671:3336":{"crate_id":22,"path":["proc_macro2","parse","Cursor"],"kind":"struct"},"17:13233:5776":{"crate_id":17,"path":["object","pe","ImageAuxSymbolCrc"],"kind":"struct"},"2:42189:7566":{"crate_id":2,"path":["core","slice","sort","TimSortRun"],"kind":"struct"},"5:2404:7423":{"crate_id":5,"path":["alloc","collections","btree","node","NodeRef"],"kind":"struct"},"1:10353:4890":{"crate_id":1,"path":["std","sys","unix","stack_overflow","Handler"],"kind":"struct"},"17:10589:7901":{"crate_id":17,"path":["object","read","pe","import","ImportThunkList"],"kind":"struct"},"6:4468:6797":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_ff_upload"],"kind":"struct"},"5:5734:69":{"crate_id":5,"path":["alloc","sync","Arc"],"kind":"struct"},"24:2871:3419":{"crate_id":24,"path":["syn","token","If"],"kind":"struct"},"2:3086:3240":{"crate_id":2,"path":["core","ops","range","RangeBounds"],"kind":"trait"},"17:10316:5211":{"crate_id":17,"path":["object","read","macho","section","MachOSectionInternal"],"kind":"struct"},"2:2988:2266":{"crate_id":2,"path":["core","ops","index","Index"],"kind":"trait"},"2:20832:8874":{"crate_id":2,"path":["core","core_simd","masks","sealed","Sealed"],"kind":"trait"},"17:13744:5928":{"crate_id":17,"path":["object","pe","ImageEnclaveImport"],"kind":"struct"},"2:42466:14093":{"crate_id":2,"path":["core","slice","iter","ChunksExactMut"],"kind":"struct"},"17:10270:20985":{"crate_id":17,"path":["object","read","macho","segment","MachOSegment"],"kind":"struct"},"6:6521:7262":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","flock64"],"kind":"struct"},"21:434:4774":{"crate_id":21,"path":["proc_macro","bridge","scoped_cell","replace","PutBackOnDrop"],"kind":"struct"},"17:12419:5525":{"crate_id":17,"path":["object","macho","VersionMinCommand"],"kind":"struct"},"2:41175:90":{"crate_id":2,"path":["core","sync","atomic","AtomicU64"],"kind":"struct"},"2:44422:7586":{"crate_id":2,"path":["core","core_arch","simd","u16x4"],"kind":"struct"},"21:245:36731":{"crate_id":21,"path":["proc_macro","bridge","handle","OwnedStore"],"kind":"struct"},"2:46671:7689":{"crate_id":2,"path":["core","core_arch","x86","__m512d"],"kind":"struct"},"17:8195:20866":{"crate_id":17,"path":["object","common","Architecture"],"kind":"enum"},"5:877:3217":{"crate_id":5,"path":["alloc","collections","binary_heap","Iter"],"kind":"struct"},"24:1136:7830":{"crate_id":24,"path":["syn","lit","LitIntRepr"],"kind":"struct"},"5:5132:4791":{"crate_id":5,"path":["alloc","slice","hack","to_vec","DropGuard"],"kind":"struct"},"16:7652:196":{"crate_id":16,"path":["gimli","read","rnglists","Range"],"kind":"struct"},"16:7596:20824":{"crate_id":16,"path":["gimli","read","rnglists","RawRngListEntry"],"kind":"enum"},"1:4572:7285":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt","st_mtime"],"kind":"foreign_type"},"2:12466:4421":{"crate_id":2,"path":["core","alloc","Allocator"],"kind":"trait"},"1:8176:8850":{"crate_id":1,"path":["std","net","tcp","IntoIncoming"],"kind":"struct"},"2:21356:9008":{"crate_id":2,"path":["core","core_simd","vector","SimdElement"],"kind":"trait"},"17:12433:5527":{"crate_id":17,"path":["object","macho","BuildVersionCommand"],"kind":"struct"},"16:6520:6082":{"crate_id":16,"path":["gimli","read","index","UnitIndexSection"],"kind":"struct"},"2:40785:4431":{"crate_id":2,"path":["core","panicking","AssertKind"],"kind":"enum"},"2:22207:171":{"crate_id":2,"path":["core","num","nonzero","NonZeroI8"],"kind":"struct"},"24:4876:2061":{"crate_id":24,"path":["syn","expr","ExprPath"],"kind":"struct"},"11:853:8729":{"crate_id":11,"path":["hashbrown","map","RawVacantEntryMut"],"kind":"struct"},"1:11918:780":{"crate_id":1,"path":["std","isize"],"kind":"primitive"},"17:9946:7888":{"crate_id":17,"path":["object","read","elf","version","VerdefIterator"],"kind":"struct"},"1:6476:8650":{"crate_id":1,"path":["std","sync","poison","PoisonError"],"kind":"struct"},"1:9048:165":{"crate_id":1,"path":["std","sync","mutex","MutexGuard"],"kind":"struct"},"2:31798:8122":{"crate_id":2,"path":["core","error","Source"],"kind":"struct"},"1:7851:27661":{"crate_id":1,"path":["std","io","buffered","linewritershim","LineWriterShim"],"kind":"struct"},"1:2343:8788":{"crate_id":1,"path":["std","fs","symlink_metadata"],"kind":"function"},"22:723:1789":{"crate_id":22,"path":["proc_macro2","fallback","Group"],"kind":"struct"},"1:4432:8893":{"crate_id":1,"path":["std","os","unix","process","ExitStatusExt"],"kind":"trait"},"2:30574:181":{"crate_id":2,"path":["core","cmp","Ordering"],"kind":"enum"},"22:109:7859":{"crate_id":22,"path":["proc_macro2","rcvec","RcVec"],"kind":"struct"},"24:5040:2824":{"crate_id":24,"path":["syn","generics","WhereClause"],"kind":"struct"},"2:40802:208":{"crate_id":2,"path":["core","result","Result"],"kind":"enum"},"17:12461:5533":{"crate_id":17,"path":["object","macho","DyldInfoCommand"],"kind":"struct"},"2:44493:7589":{"crate_id":2,"path":["core","core_arch","simd","i8x8"],"kind":"struct"}},"external_crates":{"23":{"name":"unicode_ident","html_root_url":"https://docs.rs/unicode-ident/1.0.8/"},"20":{"name":"quote","html_root_url":"https://docs.rs/quote/1.0.26/"},"17":{"name":"object","html_root_url":"https://doc.rust-lang.org/nightly/"},"14":{"name":"rustc_demangle","html_root_url":"https://doc.rust-lang.org/nightly/"},"11":{"name":"hashbrown","html_root_url":"https://doc.rust-lang.org/nightly/"},"8":{"name":"cfg_if","html_root_url":"https://docs.rs/cfg-if/"},"5":{"name":"alloc","html_root_url":"https://doc.rust-lang.org/nightly/"},"2":{"name":"core","html_root_url":"https://doc.rust-lang.org/nightly/"},"22":{"name":"proc_macro2","html_root_url":"https://docs.rs/proc-macro2/1.0.56/"},"19":{"name":"panic_unwind","html_root_url":"https://doc.rust-lang.org/nightly/"},"16":{"name":"gimli","html_root_url":"https://doc.rust-lang.org/nightly/"},"13":{"name":"std_detect","html_root_url":"https://doc.rust-lang.org/nightly/"},"10":{"name":"adler","html_root_url":"https://docs.rs/adler/1.0.2/"},"7":{"name":"unwind","html_root_url":"https://doc.rust-lang.org/nightly/"},"4":{"name":"rustc_std_workspace_core","html_root_url":"https://doc.rust-lang.org/nightly/"},"1":{"name":"std","html_root_url":"https://doc.rust-lang.org/nightly/"},"24":{"name":"syn","html_root_url":"https://docs.rs/syn/2.0.15/"},"21":{"name":"proc_macro","html_root_url":"https://doc.rust-lang.org/nightly/"},"18":{"name":"memchr","html_root_url":"https://doc.rust-lang.org/nightly/"},"15":{"name":"addr2line","html_root_url":"https://doc.rust-lang.org/nightly/"},"12":{"name":"rustc_std_workspace_alloc","html_root_url":"https://doc.rust-lang.org/nightly/"},"9":{"name":"miniz_oxide","html_root_url":"https://doc.rust-lang.org/nightly/"},"6":{"name":"libc","html_root_url":"https://doc.rust-lang.org/nightly/"},"3":{"name":"compiler_builtins","html_root_url":"https://doc.rust-lang.org/nightly/"}},"format_version":24}