{"root":"0:0:1637","crate_version":"1.0.142","includes_private":false,"index":{"1:1079:2253":{"id":"1:1079:2253","crate_id":1,"name":"AsciiExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:1080:1999","1:1081:4449","1:1082:2288","1:1083:2287","1:1084:4450","1:1085:4451","1:1086:4452"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:13417:793":{"id":"2:13417:793","crate_id":2,"name":"len","span":null,"visibility":"public","docs":"Returns the length of `self`.\n\nThis length is in bytes, not [`char`]s or graphemes. In other words,\nit might not be what a human considers the length of the string.\n\n[`char`]: prim@char\n\n# Examples\n\nBasic usage:\n\n```\nlet len = \"foo\".len();\nassert_eq!(3, len);\n\nassert_eq!(\"ƒoo\".len(), 4); // fancy f!\nassert_eq!(\"ƒoo\".chars().count(), 3);\n```","links":{"prim@char":"1:16005:2982"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]","#[rustc_const_stable(feature = \"const_str_len\", since = \"1.39.0\")]","#[must_use]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:6441:4754":{"id":"1:6441:4754","crate_id":1,"name":"CommandExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:6442:5002","1:6443:5003","1:6444:58195","1:6445:61121","1:6447:61125","1:6449:61122","1:6450:61123","1:6452:61124"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sealed","id":"1:10569:4677","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:10312:3338":{"id":"2:10312:3338","crate_id":2,"name":"UpperExp","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:10313:660"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:74:334":{"id":"0:74:334","crate_id":0,"name":"attr","span":{"filename":"src/internals/attr.rs","begin":[1,0],"end":[1952,1]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"module","inner":{"is_crate":false,"items":["0:144"],"is_stripped":false}},"2:3999:68":{"id":"2:3999:68","crate_id":2,"name":"Any","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:4000:1428"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"outlives":"'static"}],"implementations":[]}},"2:8882:5163":{"id":"2:8882:5163","crate_id":2,"name":"TrustedLen","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":true,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Iterator","id":"2:8601:157","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"1:4745:4697":{"id":"1:4745:4697","crate_id":1,"name":"Seek","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:4746:58791","1:4747:41640","1:4748:58792","1:4749:58793"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"20:18:3101":{"id":"20:18:3101","crate_id":20,"name":"TokenStreamExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["20:19:9263","20:21:64247","20:23:64248","20:26:64249"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sealed","id":"20:44:4677","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:13433:58951":{"id":"2:13433:58951","crate_id":2,"name":"get_unchecked","span":null,"visibility":"public","docs":"Returns an unchecked subslice of `str`.\n\nThis is the unchecked alternative to indexing the `str`.\n\n# Safety\n\nCallers of this function are responsible that these preconditions are\nsatisfied:\n\n* The starting index must not exceed the ending index;\n* Indexes must be within bounds of the original slice;\n* Indexes must lie on UTF-8 sequence boundaries.\n\nFailing that, the returned string slice may reference invalid memory or\nviolate the invariants communicated by the `str` type.\n\n# Examples\n\n```\nlet v = \"🗻∈🌏\";\nunsafe {\n    assert_eq!(\"🗻\", v.get_unchecked(0..4));\n    assert_eq!(\"∈\", v.get_unchecked(4..7));\n    assert_eq!(\"🌏\", v.get_unchecked(7..11));\n}\n```","links":{},"attrs":["#[stable(feature = \"str_checked_slicing\", since = \"1.20.0\")]","#[rustc_const_unstable(feature = \"const_slice_index\", issue = \"none\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["i",{"kind":"generic","inner":"I"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"qualified_path","inner":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"I"},"trait":{"kind":"resolved_path","inner":{"name":"SliceIndex","id":"2:10933:214","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}},"param_names":[]}}}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"I"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"SliceIndex","id":"2:10933:214","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}},"2:3174:135":{"id":"2:3174:135","crate_id":2,"name":"From","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3176:681"],"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:3351:3433":{"id":"2:3351:3433","crate_id":2,"name":"Div","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3353:181","2:3354:558"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"5:6083":{"id":"5:6083","crate_id":5,"name":null,"span":null,"visibility":{"restricted":{"parent":"5:5903:1339","path":"::str"}},"docs":"Methods for string slices.","links":{},"attrs":["#[cfg(not(test))]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"kind":"primitive","inner":"str"},"items":["5:6084:63778","5:6085:1988","5:6088:63779","5:6091:63780","5:6103:63781","5:6104:63782","5:6105:4725","5:6106:2288","5:6107:2287"],"negative":false,"synthetic":false,"blanket_impl":null}},"2:13513:63150":{"id":"2:13513:63150","crate_id":2,"name":"trim_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes and suffixes that match a\npattern repeatedly removed.\n\nThe [pattern] can be a [`char`], a slice of [`char`]s, or a function\nor closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_matches('1'), \"foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_matches(char::is_numeric), \"foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_matches(x), \"foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1foo1barXX\".trim_matches(|c| c == '1' || c == 'X'), \"foo1bar\");\n```","links":{"prim@char":"1:16005:2982","self::pattern":"2:13053:5199"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:13063:5198","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:13063:5198","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}}}},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"DoubleEndedSearcher","id":"2:13083:5203","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13455:58990":{"id":"2:13455:58990","crate_id":2,"name":"ends_with","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a suffix of this\nstring slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nBasic usage:\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.ends_with(\"anas\"));\nassert!(!bananas.ends_with(\"nana\"));\n```","links":{"prim@char":"1:16005:2982","self::pattern":"2:13053:5199"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:13063:5198","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:13063:5198","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}}}},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"ReverseSearcher","id":"2:13078:5202","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"24:2881:6426":{"id":"24:2881:6426","crate_id":24,"name":"Speculative","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["24:2882:64374"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:13487:63140":{"id":"2:13487:63140","crate_id":2,"name":"split_once","span":null,"visibility":"public","docs":"Splits the string on the first occurrence of the specified delimiter and\nreturns prefix before delimiter and suffix after delimiter.\n\n# Examples\n\n```\nassert_eq!(\"cfg\".split_once('='), None);\nassert_eq!(\"cfg=\".split_once('='), Some((\"cfg\", \"\")));\nassert_eq!(\"cfg=foo\".split_once('='), Some((\"cfg\", \"foo\")));\nassert_eq!(\"cfg=foo=bar\".split_once('='), Some((\"cfg\", \"foo=bar\")));\n```","links":{},"attrs":["#[stable(feature = \"str_split_once\", since = \"1.52.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["delimiter",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:47492:176","args":{"angle_bracketed":{"args":[{"type":{"kind":"tuple","inner":[{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}},{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}}]}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:13063:5198","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13445:10496":{"id":"2:13445:10496","crate_id":2,"name":"split_ascii_whitespace","span":null,"visibility":"public","docs":"Splits a string slice by ASCII whitespace.\n\nThe iterator returned will return string slices that are sub-slices of\nthe original string slice, separated by any amount of ASCII whitespace.\n\nTo split by Unicode `Whitespace` instead, use [`split_whitespace`].\n\n[`split_whitespace`]: str::split_whitespace\n\n# Examples\n\nBasic usage:\n\n```\nlet mut iter = \"A few words\".split_ascii_whitespace();\n\nassert_eq!(Some(\"A\"), iter.next());\nassert_eq!(Some(\"few\"), iter.next());\nassert_eq!(Some(\"words\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nAll kinds of ASCII whitespace are considered:\n\n```\nlet mut iter = \" Mary   had\\ta little  \\n\\t lamb\".split_ascii_whitespace();\nassert_eq!(Some(\"Mary\"), iter.next());\nassert_eq!(Some(\"had\"), iter.next());\nassert_eq!(Some(\"a\"), iter.next());\nassert_eq!(Some(\"little\"), iter.next());\nassert_eq!(Some(\"lamb\"), iter.next());\n\nassert_eq!(None, iter.next());\n```","links":{"str::split_whitespace":"1:16011:2987"},"attrs":["#[must_use =\n\"this returns the split string as an iterator, \\\n                  without modifying the original\"]","#[stable(feature = \"split_ascii_whitespace\", since = \"1.34.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"SplitAsciiWhitespace","id":"2:49742:5472","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:23462:5267":{"id":"2:23462:5267","crate_id":2,"name":"SimdPartialOrd","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:23463:1269","2:23464:1268","2:23465:1266","2:23466:1265"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"SimdPartialEq","id":"2:22874:5319","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:13441:2297":{"id":"2:13441:2297","crate_id":2,"name":"chars","span":null,"visibility":"public","docs":"Returns an iterator over the [`char`]s of a string slice.\n\nAs a string slice consists of valid UTF-8, we can iterate through a\nstring slice by [`char`]. This method returns such an iterator.\n\nIt's important to remember that [`char`] represents a Unicode Scalar\nValue, and might not match your idea of what a 'character' is. Iteration\nover grapheme clusters may be what you actually want. This functionality\nis not provided by Rust's standard library, check crates.io instead.\n\n# Examples\n\nBasic usage:\n\n```\nlet word = \"goodbye\";\n\nlet count = word.chars().count();\nassert_eq!(7, count);\n\nlet mut chars = word.chars();\n\nassert_eq!(Some('g'), chars.next());\nassert_eq!(Some('o'), chars.next());\nassert_eq!(Some('o'), chars.next());\nassert_eq!(Some('d'), chars.next());\nassert_eq!(Some('b'), chars.next());\nassert_eq!(Some('y'), chars.next());\nassert_eq!(Some('e'), chars.next());\n\nassert_eq!(None, chars.next());\n```\n\nRemember, [`char`]s might not match your intuition about characters:\n\n[`char`]: prim@char\n\n```\nlet y = \"y̆\";\n\nlet mut chars = y.chars();\n\nassert_eq!(Some('y'), chars.next()); // not 'y̆'\nassert_eq!(Some('\\u{0306}'), chars.next());\n\nassert_eq!(None, chars.next());\n```","links":{"prim@char":"1:16005:2982"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Chars","id":"2:49429:5456","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13542:3346":{"id":"2:13542:3346","crate_id":2,"name":"escape_default","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_default`].\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"❤\\n!\".escape_default() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"❤\\n!\".escape_default());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"\\\\u{{2764}}\\\\n!\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"❤\\n!\".escape_default().to_string(), \"\\\\u{2764}\\\\n!\");\n```","links":{"`char::escape_default`":"1:16005:2982"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]","#[stable(feature = \"str_escape\", since = \"1.34.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"EscapeDefault","id":"2:49767:3347","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:3246:115":{"id":"2:3246:115","crate_id":2,"name":"Default","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3247:59"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:13509:63147":{"id":"2:13509:63147","crate_id":2,"name":"trim_end","span":null,"visibility":"public","docs":"Returns a string slice with trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Text directionality\n\nA string is a sequence of bytes. `end` in this context means the last\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be right side, and for right-to-left languages like\nArabic or Hebrew, this will be the left side.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\nassert_eq!(\"\\n Hello\\tworld\", s.trim_end());\n```\n\nDirectionality:\n\n```\nlet s = \"  English  \";\nassert!(Some('h') == s.trim_end().chars().rev().next());\n\nlet s = \"  עברית  \";\nassert!(Some('ת') == s.trim_end().chars().rev().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[stable(feature = \"trim_direction\", since = \"1.30.0\")]","#[rustc_diagnostic_item = \"str_trim_end\"]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:2865:3271":{"id":"2:2865:3271","crate_id":2,"name":"BorrowMut","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:2867:2180"],"generics":{"params":[{"name":"Borrowed","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"Borrowed"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"2:3273:3367","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Borrow","id":"2:2862:97","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"Borrowed"}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:22874:5319":{"id":"2:22874:5319","crate_id":2,"name":"SimdPartialEq","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:22875:5266","2:22876:1246","2:22877:1271"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:13538:4451":{"id":"2:13538:4451","crate_id":2,"name":"make_ascii_uppercase","span":null,"visibility":"public","docs":"Converts this string to its ASCII upper case equivalent in-place.\n\nASCII letters 'a' to 'z' are mapped to 'A' to 'Z',\nbut non-ASCII letters are unchanged.\n\nTo return a new uppercased value without modifying the existing one, use\n[`to_ascii_uppercase()`].\n\n[`to_ascii_uppercase()`]: #method.to_ascii_uppercase\n\n# Examples\n\n```\nlet mut s = String::from(\"Grüße, Jürgen ❤\");\n\ns.make_ascii_uppercase();\n\nassert_eq!(\"GRüßE, JüRGEN ❤\", s);\n```","links":{},"attrs":["#[stable(feature = \"ascii_methods_on_intrinsics\", since = \"1.23.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:3733:137":{"id":"2:3733:137","crate_id":2,"name":"FromResidual","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3735:687"],"generics":{"params":[{"name":"R","kind":{"type":{"bounds":[],"default":{"kind":"qualified_path","inner":{"name":"Residual","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"Self"},"trait":{"kind":"resolved_path","inner":{"name":"Try","id":"2:3728:224","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:13539:4452":{"id":"2:13539:4452","crate_id":2,"name":"make_ascii_lowercase","span":null,"visibility":"public","docs":"Converts this string to its ASCII lower case equivalent in-place.\n\nASCII letters 'A' to 'Z' are mapped to 'a' to 'z',\nbut non-ASCII letters are unchanged.\n\nTo return a new lowercased value without modifying the existing one, use\n[`to_ascii_lowercase()`].\n\n[`to_ascii_lowercase()`]: #method.to_ascii_lowercase\n\n# Examples\n\n```\nlet mut s = String::from(\"GRÜßE, JÜRGEN ❤\");\n\ns.make_ascii_lowercase();\n\nassert_eq!(\"grÜße, jÜrgen ❤\", s);\n```","links":{},"attrs":["#[stable(feature = \"ascii_methods_on_intrinsics\", since = \"1.23.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:3439:5088":{"id":"2:3439:5088","crate_id":2,"name":"ShrAssign","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3441:1236"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:13499:63143":{"id":"2:13499:63143","crate_id":2,"name":"match_indices","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within this string\nslice as well as the index that the match starts at.\n\nFor matches of `pat` within `self` that overlap, only the indices\ncorresponding to the first match are returned.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rmatch_indices`] method can be used.\n\n[`rmatch_indices`]: str::rmatch_indices\n\n# Examples\n\nBasic usage:\n\n```\nlet v: Vec<_> = \"abcXXXabcYYYabc\".match_indices(\"abc\").collect();\nassert_eq!(v, [(0, \"abc\"), (6, \"abc\"), (12, \"abc\")]);\n\nlet v: Vec<_> = \"1abcabc2\".match_indices(\"abc\").collect();\nassert_eq!(v, [(1, \"abc\"), (4, \"abc\")]);\n\nlet v: Vec<_> = \"ababa\".match_indices(\"aba\").collect();\nassert_eq!(v, [(0, \"aba\")]); // only the first `aba`\n```","links":{"prim@char":"1:16005:2982","str::rmatch_indices":"1:16011:2987","self::pattern":"2:13053:5199","`DoubleEndedIterator`":"2:8447:120"},"attrs":["#[stable(feature = \"str_match_indices\", since = \"1.5.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"MatchIndices","id":"2:49609:5465","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:13063:5198","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:3426:5081":{"id":"2:3426:5081","crate_id":2,"name":"BitOrAssign","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3428:354"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:3371:4825":{"id":"2:3371:4825","crate_id":2,"name":"SubAssign","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3373:1355"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:13446:5909":{"id":"2:13446:5909","crate_id":2,"name":"lines","span":null,"visibility":"public","docs":"An iterator over the lines of a string, as string slices.\n\nLines are ended with either a newline (`\\n`) or a carriage return with\na line feed (`\\r\\n`).\n\nThe final line ending is optional. A string that ends with a final line\nending will return the same lines as an otherwise identical string\nwithout a final line ending.\n\n# Examples\n\nBasic usage:\n\n```\nlet text = \"foo\\r\\nbar\\n\\nbaz\\n\";\nlet mut lines = text.lines();\n\nassert_eq!(Some(\"foo\"), lines.next());\nassert_eq!(Some(\"bar\"), lines.next());\nassert_eq!(Some(\"\"), lines.next());\nassert_eq!(Some(\"baz\"), lines.next());\n\nassert_eq!(None, lines.next());\n```\n\nThe final line ending isn't required:\n\n```\nlet text = \"foo\\nbar\\n\\r\\nbaz\";\nlet mut lines = text.lines();\n\nassert_eq!(Some(\"foo\"), lines.next());\nassert_eq!(Some(\"bar\"), lines.next());\nassert_eq!(Some(\"\"), lines.next());\nassert_eq!(Some(\"baz\"), lines.next());\n\nassert_eq!(None, lines.next());\n```","links":{},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Lines","id":"2:49713:4705","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:8447:120":{"id":"2:8447:120","crate_id":2,"name":"DoubleEndedIterator","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:8448:4066","2:8449:4067","2:8450:4068","2:8451:4069","2:8455:4070","2:8458:4071"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Iterator","id":"2:8601:157","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:3357:3454":{"id":"2:3357:3454","crate_id":2,"name":"Rem","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3359:181","2:3360:1102"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:13511:63148":{"id":"2:13511:63148","crate_id":2,"name":"trim_left","span":null,"visibility":"public","docs":"Returns a string slice with leading whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`.\n\n# Text directionality\n\nA string is a sequence of bytes. 'Left' in this context means the first\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _right_ side, not the left.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \" Hello\\tworld\\t\";\n\nassert_eq!(\"Hello\\tworld\\t\", s.trim_left());\n```\n\nDirectionality:\n\n```\nlet s = \"  English\";\nassert!(Some('E') == s.trim_left().chars().next());\n\nlet s = \"  עברית\";\nassert!(Some('ע') == s.trim_left().chars().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[stable(feature = \"rust1\", since = \"1.0.0\")]","#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_start`\", suggestion\n= \"trim_start\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_start`"},"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:3716:5531":{"id":"2:3716:5531","crate_id":2,"name":"OneSidedRange","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":[],"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"2:3273:3367","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"RangeBounds","id":"2:3647:3266","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:3341:3463":{"id":"2:3341:3463","crate_id":2,"name":"Sub","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3343:181","2:3344:1354"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:13781:150":{"id":"2:13781:150","crate_id":2,"name":"IntoFuture","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:13782:181","2:13783:150","2:13784:767"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:5731:4660":{"id":"1:5731:4660","crate_id":1,"name":"PermissionsExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:5732:6954","1:5733:58561","1:5734:58562"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:12500:5611":{"id":"2:12500:5611","crate_id":2,"name":"SlicePattern","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:12501:1806","2:12502:2941"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:10304:3339":{"id":"2:10304:3339","crate_id":2,"name":"LowerHex","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:10305:660"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:3280:220":{"id":"2:3280:220","crate_id":2,"name":"Sync","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":true,"is_unsafe":true,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:13516:63151":{"id":"2:13516:63151","crate_id":2,"name":"trim_start_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. `start` in this context means the first\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be left side, and for right-to-left languages like\nArabic or Hebrew, this will be the right side.\n\n# Examples\n\nBasic usage:\n\n```\nassert_eq!(\"11foo1bar11\".trim_start_matches('1'), \"foo1bar11\");\nassert_eq!(\"123foo1bar123\".trim_start_matches(char::is_numeric), \"foo1bar123\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_start_matches(x), \"foo1bar12\");\n```","links":{"self::pattern":"2:13053:5199","prim@char":"1:16005:2982"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[stable(feature = \"trim_direction\", since = \"1.30.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:13063:5198","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:3309:3368":{"id":"2:3309:3368","crate_id":2,"name":"Unpin","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":true,"is_unsafe":false,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"24:2132:6429":{"id":"24:2132:6429","crate_id":24,"name":"IdentExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["24:2133:64480","24:2134:64481","24:2135:1869"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sealed","id":"24:2150:4677","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"0:0:1637":{"id":"0:0:1637","crate_id":0,"name":"serde_derive","span":{"filename":"src/lib.rs","begin":[1,0],"end":[109,1]},"visibility":"public","docs":"This crate provides Serde's two derive macros.\n\n```edition2018\n# use serde_derive::{Serialize, Deserialize};\n#\n#[derive(Serialize, Deserialize)]\n# struct S;\n#\n# fn main() {}\n```\n\nPlease refer to [https://serde.rs/derive.html] for how to set this up.\n\n[https://serde.rs/derive.html]: https://serde.rs/derive.html","links":{},"attrs":["#![doc(html_root_url = \"https://docs.rs/serde_derive/1.0.142\")]","#![allow(unknown_lints, bare_trait_objects)]","#![allow(clippy :: branches_sharing_code, clippy :: cognitive_complexity,\nclippy :: collapsible_match, clippy :: derive_partial_eq_without_eq, clippy ::\nenum_variant_names, clippy :: manual_map, clippy :: match_like_matches_macro,\nclippy :: needless_pass_by_value, clippy :: too_many_arguments, clippy ::\ntrivially_copy_pass_by_ref, clippy :: used_underscore_binding, clippy ::\nwildcard_in_or_patterns, clippy :: unnested_or_patterns,)]","#![allow(clippy :: cast_possible_truncation, clippy :: checked_conversions,\nclippy :: doc_markdown, clippy :: enum_glob_use, clippy :: indexing_slicing,\nclippy :: items_after_statements, clippy :: let_underscore_drop, clippy ::\nmanual_assert, clippy :: map_err_ignore, clippy :: match_same_arms, clippy ::\nmatch_wildcard_for_single_variants, clippy :: module_name_repetitions, clippy\n:: must_use_candidate, clippy :: option_if_let_else, clippy :: similar_names,\nclippy :: single_match_else, clippy :: struct_excessive_bools, clippy ::\ntoo_many_lines, clippy :: unseparated_literal_suffix, clippy :: unused_self,\nclippy :: use_self, clippy :: wildcard_imports)]"],"deprecation":null,"kind":"module","inner":{"is_crate":true,"items":["0:1257:1622","0:1258:1631"],"is_stripped":false}},"2:3379:5159":{"id":"2:3379:5159","crate_id":2,"name":"DivAssign","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3381:559"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:13536:4449":{"id":"2:13536:4449","crate_id":2,"name":"is_ascii","span":null,"visibility":"public","docs":"Checks if all characters in this string are within the ASCII range.\n\n# Examples\n\n```\nlet ascii = \"hello!\\n\";\nlet non_ascii = \"Grüße, Jürgen ❤\";\n\nassert!(ascii.is_ascii());\nassert!(!non_ascii.is_ascii());\n```","links":{},"attrs":["#[stable(feature = \"ascii_methods_on_intrinsics\", since = \"1.23.0\")]","#[must_use]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:5801:4666":{"id":"1:5801:4666","crate_id":1,"name":"DirBuilderExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:5802:6954"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:13766:138":{"id":"2:13766:138","crate_id":2,"name":"Future","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:13767:181","2:13768:1013"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:3410:3458":{"id":"2:3410:3458","crate_id":2,"name":"Shl","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3412:181","2:3413:1232"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:3416:3460":{"id":"2:3416:3460","crate_id":2,"name":"Shr","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3418:181","2:3419:1235"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:13438:63136":{"id":"2:13438:63136","crate_id":2,"name":"slice_mut_unchecked","span":null,"visibility":"public","docs":"Creates a string slice from another string slice, bypassing safety\nchecks.\nThis is generally not recommended, use with caution! For a safe\nalternative see [`str`] and [`IndexMut`].\n\n[`IndexMut`]: crate::ops::IndexMut\n\nThis new slice goes from `begin` to `end`, including `begin` but\nexcluding `end`.\n\nTo get an immutable string slice instead, see the\n[`slice_unchecked`] method.\n\n[`slice_unchecked`]: str::slice_unchecked\n\n# Safety\n\nCallers of this function are responsible that three preconditions are\nsatisfied:\n\n* `begin` must not exceed `end`.\n* `begin` and `end` must be byte positions within the string slice.\n* `begin` and `end` must lie on UTF-8 sequence boundaries.","links":{"crate::ops::IndexMut":"2:3580:3254","`str`":"1:16011:2987","str::slice_unchecked":"1:16011:2987"},"attrs":["#[stable(feature = \"str_slice_mut\", since = \"1.5.0\")]","#[deprecated(since = \"1.29.0\", note =\n\"use `get_unchecked_mut(begin..end)` instead\")]"],"deprecation":{"since":"1.29.0","note":"use `get_unchecked_mut(begin..end)` instead"},"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["begin",{"kind":"primitive","inner":"usize"}],["end",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}},"0:1257:1622":{"id":"0:1257:1622","crate_id":0,"name":"Serialize","span":{"filename":"src/lib.rs","begin":[91,0],"end":[96,1]},"visibility":"public","docs":null,"links":{},"attrs":["#[proc_macro_derive(Serialize, attributes(serde))]"],"deprecation":null,"kind":"proc_macro","inner":{"kind":"derive","helpers":["serde"]}},"2:2920:183":{"id":"2:2920:183","crate_id":2,"name":"PartialEq","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:2922:604","2:2923:907"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"Rhs"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"2:3273:3367","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"bounds":[],"implementations":[]}},"0:504":{"id":"0:504","crate_id":0,"name":null,"span":{"filename":"src/internals/mod.rs","begin":[8,0],"end":[8,41]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"import","inner":{"source":"self::receiver::replace_receiver","name":"replace_receiver","id":"0:480:1739","glob":false}},"1:7799:4876":{"id":"1:7799:4876","crate_id":1,"name":"Termination","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:7800:60739"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:5651:4741":{"id":"1:5651:4741","crate_id":1,"name":"OsStringExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:5652:58199","1:5653:3759"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sealed","id":"1:10569:4677","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:8399:136":{"id":"2:8399:136","crate_id":2,"name":"FromIterator","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:8401:684"],"generics":{"params":[{"name":"A","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:3388:5070":{"id":"2:3388:5070","crate_id":2,"name":"Not","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3389:181","2:3390:952"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:13440:58973":{"id":"2:13440:58973","crate_id":2,"name":"split_at_mut","span":null,"visibility":"public","docs":"Divide one mutable string slice into two at an index.\n\nThe argument, `mid`, should be a byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get immutable string slices instead, see the [`split_at`] method.\n\n[`split_at`]: str::split_at\n\n# Panics\n\nPanics if `mid` is not on a UTF-8 code point boundary, or if it is\npast the end of the last code point of the string slice.\n\n# Examples\n\nBasic usage:\n\n```\nlet mut s = \"Per Martin-Löf\".to_string();\n{\n    let (first, last) = s.split_at_mut(3);\n    first.make_ascii_uppercase();\n    assert_eq!(\"PER\", first);\n    assert_eq!(\" Martin-Löf\", last);\n}\nassert_eq!(\"PER Martin-Löf\", s);\n```","links":{"str::split_at":"1:16011:2987"},"attrs":["#[must_use]","#[stable(feature = \"str_split_at\", since = \"1.4.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["mid",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"tuple","inner":[{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"primitive","inner":"str"}}},{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"primitive","inner":"str"}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:3177:228":{"id":"2:3177:228","crate_id":2,"name":"TryInto","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3179:127","2:3180:1416"],"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:23771:5177":{"id":"2:23771:5177","crate_id":2,"name":"SimdElement","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":true,"items":["2:23772:5266"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sealed","id":"2:23767:4677","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Copy","id":"2:3278:106","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"0:144":{"id":"0:144","crate_id":0,"name":null,"span":{"filename":"src/internals/attr.rs","begin":[23,0],"end":[23,36]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"import","inner":{"source":"internals::case::RenameRule","name":"RenameRule","id":"0:1286:1835","glob":false}},"2:10298:119":{"id":"2:10298:119","crate_id":2,"name":"Display","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:10299:660"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:13512:63149":{"id":"2:13512:63149","crate_id":2,"name":"trim_right","span":null,"visibility":"public","docs":"Returns a string slice with trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`.\n\n# Text directionality\n\nA string is a sequence of bytes. 'Right' in this context means the last\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _left_ side, not the right.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \" Hello\\tworld\\t\";\n\nassert_eq!(\" Hello\\tworld\", s.trim_right());\n```\n\nDirectionality:\n\n```\nlet s = \"English  \";\nassert!(Some('h') == s.trim_right().chars().rev().next());\n\nlet s = \"עברית  \";\nassert!(Some('ת') == s.trim_right().chars().rev().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[stable(feature = \"rust1\", since = \"1.0.0\")]","#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_end`\", suggestion =\n\"trim_end\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_end`"},"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13429:1851":{"id":"2:13429:1851","crate_id":2,"name":"get","span":null,"visibility":"public","docs":"Returns a subslice of `str`.\n\nThis is the non-panicking alternative to indexing the `str`. Returns\n[`None`] whenever equivalent indexing operation would panic.\n\n# Examples\n\n```\nlet v = String::from(\"🗻∈🌏\");\n\nassert_eq!(Some(\"🗻\"), v.get(0..4));\n\n// indices not on UTF-8 sequence boundaries\nassert!(v.get(1..).is_none());\nassert!(v.get(..8).is_none());\n\n// out of bounds\nassert!(v.get(..42).is_none());\n```","links":{"`None`":"2:47492:176"},"attrs":["#[stable(feature = \"str_checked_slicing\", since = \"1.20.0\")]","#[rustc_const_unstable(feature = \"const_slice_index\", issue = \"none\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["i",{"kind":"generic","inner":"I"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:47492:176","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"qualified_path","inner":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"I"},"trait":{"kind":"resolved_path","inner":{"name":"SliceIndex","id":"2:10933:214","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}},"param_names":[]}}}}}}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"I"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"SliceIndex","id":"2:10933:214","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:3524:132":{"id":"2:3524:132","crate_id":2,"name":"FnOnce","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3526:181","2:3527:378"],"generics":{"params":[{"name":"Args","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:13478:63139":{"id":"2:13478:63139","crate_id":2,"name":"rsplit_terminator","span":null,"visibility":"public","docs":"An iterator over substrings of `self`, separated by characters\nmatched by a pattern and yielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\nEquivalent to [`split`], except that the trailing substring is\nskipped if empty.\n\n[`split`]: str::split\n\nThis method can be used for string data that is _terminated_,\nrather than _separated_ by a pattern.\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a\nreverse search, and it will be double ended if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`split_terminator`] method can be\nused.\n\n[`split_terminator`]: str::split_terminator\n\n# Examples\n\n```\nlet v: Vec<&str> = \"A.B.\".rsplit_terminator('.').collect();\nassert_eq!(v, [\"B\", \"A\"]);\n\nlet v: Vec<&str> = \"A..B..\".rsplit_terminator(\".\").collect();\nassert_eq!(v, [\"\", \"B\", \"\", \"A\"]);\n\nlet v: Vec<&str> = \"A.B:C.D\".rsplit_terminator(&['.', ':'][..]).collect();\nassert_eq!(v, [\"D\", \"C\", \"B\", \"A\"]);\n```","links":{"self::pattern":"2:13053:5199","str::split_terminator":"1:16011:2987","str::split":"1:16011:2987","prim@char":"1:16005:2982"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"RSplitTerminator","id":"2:49527:5462","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:13063:5198","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:13063:5198","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}}}},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"ReverseSearcher","id":"2:13078:5202","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:3491:116":{"id":"2:3491:116","crate_id":2,"name":"Deref","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3492:221","2:3493:543"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:5723:4659":{"id":"1:5723:4659","crate_id":1,"name":"FileExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:5724:61393","1:5725:61395","1:5726:61394","1:5727:61396"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:3103:5167":{"id":"2:3103:5167","crate_id":2,"name":"FloatToInt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":[],"generics":{"params":[{"name":"Int","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sealed","id":"2:3102:4677","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"5:783:222":{"id":"5:783:222","crate_id":5,"name":"ToOwned","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["5:784:1999","5:785:1872","5:786:4113"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:3504:3327":{"id":"2:3504:3327","crate_id":2,"name":"DerefMut","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3505:545"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Deref","id":"2:3491:116","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:22937:4769":{"id":"2:22937:4769","crate_id":2,"name":"SupportedLaneCount","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sealed","id":"2:22927:4677","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:3728:224":{"id":"2:3728:224","crate_id":2,"name":"Try","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3729:181","2:3730:5102","2:3731:686","2:3732:369"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"FromResidual","id":"2:3733:137","args":{"angle_bracketed":{"args":[{"type":{"kind":"qualified_path","inner":{"name":"Residual","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"Self"},"trait":{"kind":"resolved_path","inner":{"name":"Try","id":"2:3728:224","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:3811:4459":{"id":"2:3811:4459","crate_id":2,"name":"DispatchFromDyn","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":[],"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:6863:4674":{"id":"1:6863:4674","crate_id":1,"name":"AsRawFd","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:6864:61435"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:23134:5269":{"id":"2:23134:5269","crate_id":2,"name":"MaskElement","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":true,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"SimdElement","id":"2:23771:5177","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sealed","id":"2:23125:4677","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"1:4752:4700":{"id":"1:4752:4700","crate_id":1,"name":"BufRead","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:4753:60880","1:4754:60881","1:4755:60883","1:4757:4699","1:4758:60882","1:4760:58980","1:4761:5909"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Read","id":"1:4670:4678","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:13426:63135":{"id":"2:13426:63135","crate_id":2,"name":"as_bytes_mut","span":null,"visibility":"public","docs":"Converts a mutable string slice to a mutable byte slice.\n\n# Safety\n\nThe caller must ensure that the content of the slice is valid UTF-8\nbefore the borrow ends and the underlying `str` is used.\n\nUse of a `str` whose contents are not valid UTF-8 is undefined behavior.\n\n# Examples\n\nBasic usage:\n\n```\nlet mut s = String::from(\"Hello\");\nlet bytes = unsafe { s.as_bytes_mut() };\n\nassert_eq!(b\"Hello\", bytes);\n```\n\nMutability:\n\n```\nlet mut s = String::from(\"🗻∈🌏\");\n\nunsafe {\n    let bytes = s.as_bytes_mut();\n\n    bytes[0] = 0xF0;\n    bytes[1] = 0x9F;\n    bytes[2] = 0x8D;\n    bytes[3] = 0x94;\n}\n\nassert_eq!(\"🍔∈🌏\", s);\n```","links":{},"attrs":["#[stable(feature = \"str_mut_extras\", since = \"1.20.0\")]","#[must_use]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"slice","inner":{"kind":"primitive","inner":"u8"}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}},"2:2956:177":{"id":"2:2956:177","crate_id":2,"name":"Ord","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:2957:415","2:2958:4060","2:2959:4057","2:2960:4065"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Eq","id":"2:2925:124","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"PartialOrd","id":"2:2966:184","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"Self"}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:13496:63142":{"id":"2:13496:63142","crate_id":2,"name":"rmatches","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within this string slice,\nyielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`matches`] method can be used.\n\n[`matches`]: str::matches\n\n# Examples\n\nBasic usage:\n\n```\nlet v: Vec<&str> = \"abcXXXabcYYYabc\".rmatches(\"abc\").collect();\nassert_eq!(v, [\"abc\", \"abc\", \"abc\"]);\n\nlet v: Vec<&str> = \"1abc2abc3\".rmatches(char::is_numeric).collect();\nassert_eq!(v, [\"3\", \"2\", \"1\"]);\n```","links":{"self::pattern":"2:13053:5199","prim@char":"1:16005:2982","`DoubleEndedIterator`":"2:8447:120","str::matches":"1:16011:2987"},"attrs":["#[stable(feature = \"str_matches\", since = \"1.2.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"RMatches","id":"2:49681:5469","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:13063:5198","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:13063:5198","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}}}},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"ReverseSearcher","id":"2:13078:5202","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13437:4814":{"id":"2:13437:4814","crate_id":2,"name":"slice_unchecked","span":null,"visibility":"public","docs":"Creates a string slice from another string slice, bypassing safety\nchecks.\n\nThis is generally not recommended, use with caution! For a safe\nalternative see [`str`] and [`Index`].\n\n[`Index`]: crate::ops::Index\n\nThis new slice goes from `begin` to `end`, including `begin` but\nexcluding `end`.\n\nTo get a mutable string slice instead, see the\n[`slice_mut_unchecked`] method.\n\n[`slice_mut_unchecked`]: str::slice_mut_unchecked\n\n# Safety\n\nCallers of this function are responsible that three preconditions are\nsatisfied:\n\n* `begin` must not exceed `end`.\n* `begin` and `end` must be byte positions within the string slice.\n* `begin` and `end` must lie on UTF-8 sequence boundaries.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\n\nunsafe {\n    assert_eq!(\"Löwe 老虎 Léopard\", s.slice_unchecked(0, 21));\n}\n\nlet s = \"Hello, world!\";\n\nunsafe {\n    assert_eq!(\"world\", s.slice_unchecked(7, 12));\n}\n```","links":{"str::slice_mut_unchecked":"1:16011:2987","crate::ops::Index":"2:3576:2247","`str`":"1:16011:2987"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]","#[deprecated(since = \"1.29.0\", note =\n\"use `get_unchecked(begin..end)` instead\")]","#[must_use]"],"deprecation":{"since":"1.29.0","note":"use `get_unchecked(begin..end)` instead"},"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["begin",{"kind":"primitive","inner":"usize"}],["end",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}},"2:13525:63152":{"id":"2:13525:63152","crate_id":2,"name":"trim_end_matches","span":null,"visibility":"public","docs":"Returns a string slice with all suffixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. `end` in this context means the last\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be right side, and for right-to-left languages like\nArabic or Hebrew, this will be the left side.\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_end_matches('1'), \"11foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_end_matches(char::is_numeric), \"123foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_end_matches(x), \"12foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1fooX\".trim_end_matches(|c| c == '1' || c == 'X'), \"1foo\");\n```","links":{"prim@char":"1:16005:2982","self::pattern":"2:13053:5199"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[stable(feature = \"trim_direction\", since = \"1.30.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:13063:5198","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:13063:5198","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}}}},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"ReverseSearcher","id":"2:13078:5202","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:10241:3336":{"id":"2:10241:3336","crate_id":2,"name":"Write","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:10242:1532","2:10243:58131","2:10245:58132"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:13469:10497":{"id":"2:13469:10497","crate_id":2,"name":"split_inclusive","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by\ncharacters matched by a pattern. Differs from the iterator produced by\n`split` in that `split_inclusive` leaves the matched part as the\nterminator of the substring.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\\nlittle lamb\\nlittle lamb.\"\n    .split_inclusive('\\n').collect();\nassert_eq!(v, [\"Mary had a little lamb\\n\", \"little lamb\\n\", \"little lamb.\"]);\n```\n\nIf the last element of the string is matched,\nthat element will be considered the terminator of the preceding substring.\nThat substring will be the last item returned by the iterator.\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\\nlittle lamb\\nlittle lamb.\\n\"\n    .split_inclusive('\\n').collect();\nassert_eq!(v, [\"Mary had a little lamb\\n\", \"little lamb\\n\", \"little lamb.\\n\"]);\n```","links":{"self::pattern":"2:13053:5199","prim@char":"1:16005:2982"},"attrs":["#[stable(feature = \"split_inclusive\", since = \"1.51.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"SplitInclusive","id":"2:12845:5429","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:13063:5198","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:3363:5153":{"id":"2:3363:5153","crate_id":2,"name":"Neg","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3364:181","2:3365:913"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:13442:2291":{"id":"2:13442:2291","crate_id":2,"name":"char_indices","span":null,"visibility":"public","docs":"Returns an iterator over the [`char`]s of a string slice, and their\npositions.\n\nAs a string slice consists of valid UTF-8, we can iterate through a\nstring slice by [`char`]. This method returns an iterator of both\nthese [`char`]s, as well as their byte positions.\n\nThe iterator yields tuples. The position is first, the [`char`] is\nsecond.\n\n# Examples\n\nBasic usage:\n\n```\nlet word = \"goodbye\";\n\nlet count = word.char_indices().count();\nassert_eq!(7, count);\n\nlet mut char_indices = word.char_indices();\n\nassert_eq!(Some((0, 'g')), char_indices.next());\nassert_eq!(Some((1, 'o')), char_indices.next());\nassert_eq!(Some((2, 'o')), char_indices.next());\nassert_eq!(Some((3, 'd')), char_indices.next());\nassert_eq!(Some((4, 'b')), char_indices.next());\nassert_eq!(Some((5, 'y')), char_indices.next());\nassert_eq!(Some((6, 'e')), char_indices.next());\n\nassert_eq!(None, char_indices.next());\n```\n\nRemember, [`char`]s might not match your intuition about characters:\n\n[`char`]: prim@char\n\n```\nlet yes = \"y̆es\";\n\nlet mut char_indices = yes.char_indices();\n\nassert_eq!(Some((0, 'y')), char_indices.next()); // not (0, 'y̆')\nassert_eq!(Some((1, '\\u{0306}')), char_indices.next());\n\n// note the 3 here - the last character took up two bytes\nassert_eq!(Some((3, 'e')), char_indices.next());\nassert_eq!(Some((4, 's')), char_indices.next());\n\nassert_eq!(None, char_indices.next());\n```","links":{"prim@char":"1:16005:2982"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"CharIndices","id":"2:49435:5457","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:6463:4773":{"id":"1:6463:4773","crate_id":1,"name":"ExitStatusExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:6464:58615","1:6465:8803","1:6466:58616","1:6467:58617","1:6468:58618","1:6469:58619"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sealed","id":"1:10569:4677","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"1:9347:4766":{"id":"1:9347:4766","crate_id":1,"name":"StdFloat","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:9348:60386","1:9349:60387","1:9350:60388","1:9351:60389","1:9352:60390","1:9353:41254","1:9354:60385"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sealed","id":"1:10569:4677","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:8366:5139":{"id":"2:8366:5139","crate_id":2,"name":"Product","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:8368:4105"],"generics":{"params":[{"name":"A","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"5:6104:63782":{"id":"5:6104:63782","crate_id":5,"name":"into_string","span":null,"visibility":"public","docs":"Converts a [`Box<str>`] into a [`String`] without copying or allocating.\n\n# Examples\n\nBasic usage:\n\n```\nlet string = String::from(\"birthday gift\");\nlet boxed_str = string.clone().into_boxed_str();\n\nassert_eq!(boxed_str.into_string(), string);\n```","links":{"`String`":"5:8368:216","`Box<str>`":"5:432:1805"},"attrs":["#[stable(feature = \"box_str\", since = \"1.4.0\")]","#[must_use = \"`self` will be dropped if the result is not used\"]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"resolved_path","inner":{"name":"Box","id":"5:432:1805","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}},{"type":{"kind":"resolved_path","inner":{"name":"Global","id":"5:8106:4468","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}],"bindings":[]}},"param_names":[]}}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:8368:216","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13083:5203":{"id":"2:13083:5203","crate_id":2,"name":"DoubleEndedSearcher","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":[],"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"ReverseSearcher","id":"2:13078:5202","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"24:153:1811":{"id":"24:153:1811","crate_id":24,"name":"Token","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sealed","id":"24:160:4677","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:9258:3683":{"id":"2:9258:3683","crate_id":2,"name":"UnwindSafe","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":true,"is_unsafe":false,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:13522:58991":{"id":"2:13522:58991","crate_id":2,"name":"strip_suffix","span":null,"visibility":"public","docs":"Returns a string slice with the suffix removed.\n\nIf the string ends with the pattern `suffix`, returns the substring before the suffix,\nwrapped in `Some`.  Unlike `trim_end_matches`, this method removes the suffix exactly once.\n\nIf the string does not end with `suffix`, returns `None`.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nassert_eq!(\"bar:foo\".strip_suffix(\":foo\"), Some(\"bar\"));\nassert_eq!(\"bar:foo\".strip_suffix(\"bar\"), None);\nassert_eq!(\"foofoo\".strip_suffix(\"foo\"), Some(\"foo\"));\n```","links":{"prim@char":"1:16005:2982","self::pattern":"2:13053:5199"},"attrs":["#[must_use =\n\"this returns the remaining substring as a new slice, \\\n                  without modifying the original\"]","#[stable(feature = \"str_strip\", since = \"1.45.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["suffix",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:47492:176","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:13063:5198","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:13063:5198","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}}}},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"ReverseSearcher","id":"2:13078:5202","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13443:4819":{"id":"2:13443:4819","crate_id":2,"name":"bytes","span":null,"visibility":"public","docs":"An iterator over the bytes of a string slice.\n\nAs a string slice consists of a sequence of bytes, we can iterate\nthrough a string slice by byte. This method returns such an iterator.\n\n# Examples\n\nBasic usage:\n\n```\nlet mut bytes = \"bors\".bytes();\n\nassert_eq!(Some(b'b'), bytes.next());\nassert_eq!(Some(b'o'), bytes.next());\nassert_eq!(Some(b'r'), bytes.next());\nassert_eq!(Some(b's'), bytes.next());\n\nassert_eq!(None, bytes.next());\n```","links":{},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Bytes","id":"2:49445:2733","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13481:58985":{"id":"2:13481:58985","crate_id":2,"name":"splitn","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by a\npattern, restricted to returning at most `n` items.\n\nIf `n` substrings are returned, the last substring (the `n`th substring)\nwill contain the remainder of the string.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will not be double ended, because it is\nnot efficient to support.\n\nIf the pattern allows a reverse search, the [`rsplitn`] method can be\nused.\n\n[`rsplitn`]: str::rsplitn\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lambda\".splitn(3, ' ').collect();\nassert_eq!(v, [\"Mary\", \"had\", \"a little lambda\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".splitn(3, \"X\").collect();\nassert_eq!(v, [\"lion\", \"\", \"tigerXleopard\"]);\n\nlet v: Vec<&str> = \"abcXdef\".splitn(1, 'X').collect();\nassert_eq!(v, [\"abcXdef\"]);\n\nlet v: Vec<&str> = \"\".splitn(1, 'X').collect();\nassert_eq!(v, [\"\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".splitn(2, |c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"abc\", \"defXghi\"]);\n```","links":{"self::pattern":"2:13053:5199","prim@char":"1:16005:2982","str::rsplitn":"1:16011:2987"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["n",{"kind":"primitive","inner":"usize"}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"SplitN","id":"2:49563:5435","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:13063:5198","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13458:2531":{"id":"2:13458:2531","crate_id":2,"name":"find","span":null,"visibility":"public","docs":"Returns the byte index of the first character of this string slice that\nmatches the pattern.\n\nReturns [`None`] if the pattern doesn't match.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nlet s = \"Löwe 老虎 Léopard Gepardi\";\n\nassert_eq!(s.find('L'), Some(0));\nassert_eq!(s.find('é'), Some(14));\nassert_eq!(s.find(\"pard\"), Some(17));\n```\n\nMore complex patterns using point-free style and closures:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\n\nassert_eq!(s.find(char::is_whitespace), Some(5));\nassert_eq!(s.find(char::is_lowercase), Some(1));\nassert_eq!(s.find(|c: char| c.is_whitespace() || c.is_lowercase()), Some(1));\nassert_eq!(s.find(|c: char| (c < 'o') && (c > 'a')), Some(4));\n```\n\nNot finding the pattern:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\nlet x: &[_] = &['1', '2'];\n\nassert_eq!(s.find(x), None);\n```","links":{"self::pattern":"2:13053:5199","prim@char":"1:16005:2982","`None`":"2:47492:176"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:47492:176","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"usize"}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:13063:5198","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:22801:5264":{"id":"2:22801:5264","crate_id":2,"name":"SimdInt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:22802:5266","2:22803:61562","2:22804:1226","2:22805:1227","2:22806:44611","2:22807:62777","2:22808:10455","2:22809:62778","2:22810:62779","2:22811:61575","2:22812:61579","2:22813:61580","2:22814:61581","2:22815:61582","2:22816:62702","2:22817:62703","2:22818:62704"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Copy","id":"2:3278:106","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sealed","id":"2:22850:4677","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:3277:217":{"id":"2:3277:217","crate_id":2,"name":"StructuralEq","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:23086:18404":{"id":"2:23086:18404","crate_id":2,"name":"ToBitMask","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:23087:7886","2:23088:62621","2:23089:62622"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sealed","id":"2:23079:4677","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:3336:3269":{"id":"2:3336:3269","crate_id":2,"name":"Add","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3338:181","2:3339:265"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:3375:5157":{"id":"2:3375:5157","crate_id":2,"name":"MulAssign","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3377:893"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:8472:3369":{"id":"2:8472:3369","crate_id":2,"name":"ExactSizeIterator","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:8473:793","2:8474:2066"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Iterator","id":"2:8601:157","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:2925:124":{"id":"2:2925:124","crate_id":2,"name":"Eq","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"PartialEq","id":"2:2920:183","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"Self"}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:3400:3981":{"id":"2:3400:3981","crate_id":2,"name":"BitOr","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3402:181","2:3403:353"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:8:1736":{"id":"0:8:1736","crate_id":0,"name":"ast","span":{"filename":"src/internals/ast.rs","begin":[1,0],"end":[202,1]},"visibility":"public","docs":"A Serde ast, parsed from the Syn ast and ready to generate Rust code.","links":{},"attrs":[],"deprecation":null,"kind":"module","inner":{"is_crate":false,"items":[],"is_stripped":false}},"2:3278:106":{"id":"2:3278:106","crate_id":2,"name":"Copy","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Clone","id":"2:2887:104","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"5:6105:4725":{"id":"5:6105:4725","crate_id":5,"name":"repeat","span":null,"visibility":"public","docs":"Creates a new [`String`] by repeating a string `n` times.\n\n# Panics\n\nThis function will panic if the capacity would overflow.\n\n# Examples\n\nBasic usage:\n\n```\nassert_eq!(\"abc\".repeat(4), String::from(\"abcabcabcabc\"));\n```\n\nA panic upon overflow:\n\n```should_panic\n// this will panic at runtime\nlet huge = \"0123456789abcdef\".repeat(usize::MAX);\n```","links":{"`String`":"5:8368:216"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use]","#[stable(feature = \"repeat_str\", since = \"1.16.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["n",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:8368:216","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:2887:104":{"id":"2:2887:104","crate_id":2,"name":"Clone","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:2888:408","2:2889:410"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:8879:4458":{"id":"2:8879:4458","crate_id":2,"name":"FusedIterator","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Iterator","id":"2:8601:157","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:13484:58987":{"id":"2:13484:58987","crate_id":2,"name":"rsplitn","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by a\npattern, starting from the end of the string, restricted to returning\nat most `n` items.\n\nIf `n` substrings are returned, the last substring (the `n`th substring)\nwill contain the remainder of the string.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will not be double ended, because it is not\nefficient to support.\n\nFor splitting from the front, the [`splitn`] method can be used.\n\n[`splitn`]: str::splitn\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".rsplitn(3, ' ').collect();\nassert_eq!(v, [\"lamb\", \"little\", \"Mary had a\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".rsplitn(3, 'X').collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"lionX\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".rsplitn(2, \"::\").collect();\nassert_eq!(v, [\"leopard\", \"lion::tiger\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".rsplitn(2, |c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"ghi\", \"abc1def\"]);\n```","links":{"self::pattern":"2:13053:5199","prim@char":"1:16005:2982","str::splitn":"1:16011:2987"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["n",{"kind":"primitive","inner":"usize"}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"RSplitN","id":"2:49581:5436","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:13063:5198","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:13063:5198","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}}}},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"ReverseSearcher","id":"2:13078:5202","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:7:1613":{"id":"0:7:1613","crate_id":0,"name":"internals","span":{"filename":"src/internals/mod.rs","begin":[1,0],"end":[28,1]},"visibility":"crate","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"module","inner":{"is_crate":false,"items":["0:8:1736","0:74:334","0:409","0:504"],"is_stripped":true}},"2:13531:63153":{"id":"2:13531:63153","crate_id":2,"name":"trim_right_matches","span":null,"visibility":"public","docs":"Returns a string slice with all suffixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. 'Right' in this context means the last\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _left_ side, not the right.\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_right_matches('1'), \"11foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_right_matches(char::is_numeric), \"123foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_right_matches(x), \"12foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1fooX\".trim_right_matches(|c| c == '1' || c == 'X'), \"1foo\");\n```","links":{"self::pattern":"2:13053:5199","prim@char":"1:16005:2982"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]","#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_end_matches`\",\nsuggestion = \"trim_end_matches\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_end_matches`"},"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:13063:5198","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:13063:5198","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}}}},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"ReverseSearcher","id":"2:13078:5202","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:3383:5161":{"id":"2:3383:5161","crate_id":2,"name":"RemAssign","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3385:1103"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:13537:4450":{"id":"2:13537:4450","crate_id":2,"name":"eq_ignore_ascii_case","span":null,"visibility":"public","docs":"Checks that two strings are an ASCII case-insensitive match.\n\nSame as `to_ascii_lowercase(a) == to_ascii_lowercase(b)`,\nbut without allocating and copying temporaries.\n\n# Examples\n\n```\nassert!(\"Ferris\".eq_ignore_ascii_case(\"FERRIS\"));\nassert!(\"Ferrös\".eq_ignore_ascii_case(\"FERRöS\"));\nassert!(!\"Ferrös\".eq_ignore_ascii_case(\"FERRÖS\"));\n```","links":{},"attrs":["#[stable(feature = \"ascii_methods_on_intrinsics\", since = \"1.23.0\")]","#[must_use]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["other",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:4782:4457":{"id":"2:4782:4457","crate_id":2,"name":"AsyncIterator","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:4783:1806","2:4784:61803","2:4785:4075"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:3181:227":{"id":"2:3181:227","crate_id":2,"name":"TryFrom","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3183:127","2:3184:1415"],"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:5012:4779":{"id":"1:5012:4779","crate_id":1,"name":"ToSocketAddrs","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:5013:3245","1:5014:58581"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:22748:5318":{"id":"2:22748:5318","crate_id":2,"name":"SimdFloat","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:22749:5266","2:22750:61562","2:22751:61563","2:22752:61564","2:22753:61565","2:22754:44611","2:22755:61566","2:22756:61567","2:22757:61568","2:22758:61569","2:22759:61570","2:22760:61571","2:22761:61572","2:22762:61573","2:22763:10290","2:22764:61574","2:22765:61575","2:22766:9618","2:22767:61576","2:22768:61577","2:22769:61578","2:22770:61579","2:22771:61580","2:22772:61581","2:22773:61582"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Copy","id":"2:3278:106","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sealed","id":"2:22850:4677","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:13505:63145":{"id":"2:13505:63145","crate_id":2,"name":"trim","span":null,"visibility":"public","docs":"Returns a string slice with leading and trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\n\nassert_eq!(\"Hello\\tworld\", s.trim());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a slice, \\\n                  without modifying the original\"]","#[stable(feature = \"rust1\", since = \"1.0.0\")]","#[rustc_diagnostic_item = \"str_trim\"]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:8362:5141":{"id":"2:8362:5141","crate_id":2,"name":"Sum","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:8364:2878"],"generics":{"params":[{"name":"A","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:4050:4761":{"id":"2:4050:4761","crate_id":2,"name":"Provider","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:4051:60834"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:3422:5079":{"id":"2:3422:5079","crate_id":2,"name":"BitAndAssign","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3424:352"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:13528:1870":{"id":"2:13528:1870","crate_id":2,"name":"trim_left_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. 'Left' in this context means the first\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _right_ side, not the left.\n\n# Examples\n\nBasic usage:\n\n```\nassert_eq!(\"11foo1bar11\".trim_left_matches('1'), \"foo1bar11\");\nassert_eq!(\"123foo1bar123\".trim_left_matches(char::is_numeric), \"foo1bar123\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_left_matches(x), \"foo1bar12\");\n```","links":{"self::pattern":"2:13053:5199","prim@char":"1:16005:2982"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]","#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_start_matches`\",\nsuggestion = \"trim_start_matches\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_start_matches`"},"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:13063:5198","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:12992:3267":{"id":"2:12992:3267","crate_id":2,"name":"FromStr","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:12993:126","2:12994:1963"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:10308:189":{"id":"2:10308:189","crate_id":2,"name":"Pointer","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:10309:660"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:13490:63141":{"id":"2:13490:63141","crate_id":2,"name":"rsplit_once","span":null,"visibility":"public","docs":"Splits the string on the last occurrence of the specified delimiter and\nreturns prefix before delimiter and suffix after delimiter.\n\n# Examples\n\n```\nassert_eq!(\"cfg\".rsplit_once('='), None);\nassert_eq!(\"cfg=foo\".rsplit_once('='), Some((\"cfg\", \"foo\")));\nassert_eq!(\"cfg=foo=bar\".rsplit_once('='), Some((\"cfg=foo\", \"bar\")));\n```","links":{},"attrs":["#[stable(feature = \"str_split_once\", since = \"1.52.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["delimiter",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:47492:176","args":{"angle_bracketed":{"args":[{"type":{"kind":"tuple","inner":[{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}},{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}}]}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:13063:5198","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:13063:5198","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}}}},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"ReverseSearcher","id":"2:13078:5202","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13462:4071":{"id":"2:13462:4071","crate_id":2,"name":"rfind","span":null,"visibility":"public","docs":"Returns the byte index for the first character of the last match of the pattern in\nthis string slice.\n\nReturns [`None`] if the pattern doesn't match.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nlet s = \"Löwe 老虎 Léopard Gepardi\";\n\nassert_eq!(s.rfind('L'), Some(13));\nassert_eq!(s.rfind('é'), Some(14));\nassert_eq!(s.rfind(\"pard\"), Some(24));\n```\n\nMore complex patterns with closures:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\n\nassert_eq!(s.rfind(char::is_whitespace), Some(12));\nassert_eq!(s.rfind(char::is_lowercase), Some(20));\n```\n\nNot finding the pattern:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\nlet x: &[_] = &['1', '2'];\n\nassert_eq!(s.rfind(x), None);\n```","links":{"self::pattern":"2:13053:5199","prim@char":"1:16005:2982","`None`":"2:47492:176"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:47492:176","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"usize"}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:13063:5198","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:13063:5198","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}}}},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"ReverseSearcher","id":"2:13078:5202","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:10306:3340":{"id":"2:10306:3340","crate_id":2,"name":"UpperHex","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:10307:660"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:2862:97":{"id":"2:2862:97","crate_id":2,"name":"Borrow","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:2864:1825"],"generics":{"params":[{"name":"Borrowed","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"Borrowed"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"2:3273:3367","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"bounds":[],"implementations":[]}},"2:13078:5202":{"id":"2:13078:5202","crate_id":2,"name":"ReverseSearcher","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":true,"items":["2:13080:4066","2:13081:62627","2:13082:62628"],"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Searcher","id":"2:13072:5201","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:10529:142":{"id":"2:10529:142","crate_id":2,"name":"Hash","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:10530:715","2:10532:10267"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:10933:214":{"id":"2:10933:214","crate_id":2,"name":"SliceIndex","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":true,"items":["2:10935:181","2:10936:1851","2:10937:58950","2:10938:58951","2:10939:58952","2:10940:753","2:10941:754"],"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"2:3273:3367","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sealed","id":"2:10924:4677","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:13428:58953":{"id":"2:13428:58953","crate_id":2,"name":"as_mut_ptr","span":null,"visibility":"public","docs":"Converts a mutable string slice to a raw pointer.\n\nAs string slices are a slice of bytes, the raw pointer points to a\n[`u8`]. This pointer will be pointing to the first byte of the string\nslice.\n\nIt is your responsibility to make sure that the string slice only gets\nmodified in a way that it remains valid UTF-8.","links":{"`u8`":"1:16022:2996"},"attrs":["#[stable(feature = \"str_as_mut_ptr\", since = \"1.36.0\")]","#[must_use]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"raw_pointer","inner":{"mutable":true,"type":{"kind":"primitive","inner":"u8"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:3558:4460":{"id":"2:3558:4460","crate_id":2,"name":"Generator","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3560:237","2:3561:206","2:3562:62724"],"generics":{"params":[{"name":"R","kind":{"type":{"bounds":[],"default":{"kind":"tuple","inner":[]},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:13427:304":{"id":"2:13427:304","crate_id":2,"name":"as_ptr","span":null,"visibility":"public","docs":"Converts a string slice to a raw pointer.\n\nAs string slices are a slice of bytes, the raw pointer points to a\n[`u8`]. This pointer will be pointing to the first byte of the string\nslice.\n\nThe caller must ensure that the returned pointer is never written to.\nIf you need to mutate the contents of the string slice, use [`as_mut_ptr`].\n\n[`as_mut_ptr`]: str::as_mut_ptr\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"Hello\";\nlet ptr = s.as_ptr();\n```","links":{"`u8`":"1:16022:2996","str::as_mut_ptr":"1:16011:2987"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]","#[rustc_const_stable(feature = \"rustc_str_as_ptr\", since = \"1.32.0\")]","#[must_use]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"raw_pointer","inner":{"mutable":false,"type":{"kind":"primitive","inner":"u8"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:6963:4673":{"id":"1:6963:4673","crate_id":1,"name":"AsFd","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:6964:58650"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:13431:58950":{"id":"2:13431:58950","crate_id":2,"name":"get_mut","span":null,"visibility":"public","docs":"Returns a mutable subslice of `str`.\n\nThis is the non-panicking alternative to indexing the `str`. Returns\n[`None`] whenever equivalent indexing operation would panic.\n\n# Examples\n\n```\nlet mut v = String::from(\"hello\");\n// correct length\nassert!(v.get_mut(0..5).is_some());\n// out of bounds\nassert!(v.get_mut(..42).is_none());\nassert_eq!(Some(\"he\"), v.get_mut(0..2).map(|v| &*v));\n\nassert_eq!(\"hello\", v);\n{\n    let s = v.get_mut(0..2);\n    let s = s.map(|s| {\n        s.make_ascii_uppercase();\n        &*s\n    });\n    assert_eq!(Some(\"HE\"), s);\n}\nassert_eq!(\"HEllo\", v);\n```","links":{"`None`":"2:47492:176"},"attrs":["#[stable(feature = \"str_checked_slicing\", since = \"1.20.0\")]","#[rustc_const_unstable(feature = \"const_slice_index\", issue = \"none\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["i",{"kind":"generic","inner":"I"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:47492:176","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"qualified_path","inner":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"I"},"trait":{"kind":"resolved_path","inner":{"name":"SliceIndex","id":"2:10933:214","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}},"param_names":[]}}}}}}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"I"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"SliceIndex","id":"2:10933:214","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:6867:4748":{"id":"1:6867:4748","crate_id":1,"name":"IntoRawFd","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:6868:60819"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:2576:127":{"id":"1:2576:127","crate_id":1,"name":"Error","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:2577:60831","1:2579:60832","1:2580:60833","1:2581:60834"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Debug","id":"2:10291:109","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Display","id":"2:10298:119","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"5:5837:5618":{"id":"5:5837:5618","crate_id":5,"name":"Join","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["5:5839:181","5:5840:35330"],"generics":{"params":[{"name":"Separator","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"24:2634:2470":{"id":"24:2634:2470","crate_id":24,"name":"Spanned","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["24:2635:2070"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:5793:4664":{"id":"1:5793:4664","crate_id":1,"name":"DirEntryExt2","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:5794:58716"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sealed","id":"1:10569:4677","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:13475:63138":{"id":"2:13475:63138","crate_id":2,"name":"split_terminator","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by\ncharacters matched by a pattern.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\nEquivalent to [`split`], except that the trailing substring\nis skipped if empty.\n\n[`split`]: str::split\n\nThis method can be used for string data that is _terminated_,\nrather than _separated_ by a pattern.\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rsplit_terminator`] method can be used.\n\n[`rsplit_terminator`]: str::rsplit_terminator\n\n# Examples\n\nBasic usage:\n\n```\nlet v: Vec<&str> = \"A.B.\".split_terminator('.').collect();\nassert_eq!(v, [\"A\", \"B\"]);\n\nlet v: Vec<&str> = \"A..B..\".split_terminator(\".\").collect();\nassert_eq!(v, [\"A\", \"\", \"B\", \"\"]);\n\nlet v: Vec<&str> = \"A.B:C.D\".split_terminator(&['.', ':'][..]).collect();\nassert_eq!(v, [\"A\", \"B\", \"C\", \"D\"]);\n```","links":{"prim@char":"1:16005:2982","str::rsplit_terminator":"1:16011:2987","str::split":"1:16011:2987","self::pattern":"2:13053:5199","`DoubleEndedIterator`":"2:8447:120"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"SplitTerminator","id":"2:49509:5461","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:13063:5198","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:5789:4663":{"id":"1:5789:4663","crate_id":1,"name":"DirEntryExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:5790:60742"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:13472:58983":{"id":"2:13472:58983","crate_id":2,"name":"rsplit","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by\ncharacters matched by a pattern and yielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`split`] method can be used.\n\n[`split`]: str::split\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".rsplit(' ').collect();\nassert_eq!(v, [\"lamb\", \"little\", \"a\", \"had\", \"Mary\"]);\n\nlet v: Vec<&str> = \"\".rsplit('X').collect();\nassert_eq!(v, [\"\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".rsplit('X').collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"\", \"lion\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".rsplit(\"::\").collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"lion\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".rsplit(|c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"ghi\", \"def\", \"abc\"]);\n```","links":{"str::split":"1:16011:2987","prim@char":"1:16005:2982","self::pattern":"2:13053:5199","`DoubleEndedIterator`":"2:8447:120"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"RSplit","id":"2:49477:5432","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:13063:5198","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:13063:5198","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}}}},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"ReverseSearcher","id":"2:13078:5202","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:5779:4662":{"id":"1:5779:4662","crate_id":1,"name":"FileTypeExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:5780:58202","1:5781:58203","1:5782:58204","1:5783:58205"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:3515:2186":{"id":"2:3515:2186","crate_id":2,"name":"Drop","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3516:578"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:13502:63144":{"id":"2:13502:63144","crate_id":2,"name":"rmatch_indices","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within `self`,\nyielded in reverse order along with the index of the match.\n\nFor matches of `pat` within `self` that overlap, only the indices\ncorresponding to the last match are returned.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`match_indices`] method can be used.\n\n[`match_indices`]: str::match_indices\n\n# Examples\n\nBasic usage:\n\n```\nlet v: Vec<_> = \"abcXXXabcYYYabc\".rmatch_indices(\"abc\").collect();\nassert_eq!(v, [(12, \"abc\"), (6, \"abc\"), (0, \"abc\")]);\n\nlet v: Vec<_> = \"1abcabc2\".rmatch_indices(\"abc\").collect();\nassert_eq!(v, [(4, \"abc\"), (1, \"abc\")]);\n\nlet v: Vec<_> = \"ababa\".rmatch_indices(\"aba\").collect();\nassert_eq!(v, [(2, \"aba\")]); // only the last `aba`\n```","links":{"`DoubleEndedIterator`":"2:8447:120","str::match_indices":"1:16011:2987","self::pattern":"2:13053:5199","prim@char":"1:16005:2982"},"attrs":["#[stable(feature = \"str_match_indices\", since = \"1.5.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"RMatchIndices","id":"2:49627:5466","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:13063:5198","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:13063:5198","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}}}},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"ReverseSearcher","id":"2:13078:5202","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13435:58952":{"id":"2:13435:58952","crate_id":2,"name":"get_unchecked_mut","span":null,"visibility":"public","docs":"Returns a mutable, unchecked subslice of `str`.\n\nThis is the unchecked alternative to indexing the `str`.\n\n# Safety\n\nCallers of this function are responsible that these preconditions are\nsatisfied:\n\n* The starting index must not exceed the ending index;\n* Indexes must be within bounds of the original slice;\n* Indexes must lie on UTF-8 sequence boundaries.\n\nFailing that, the returned string slice may reference invalid memory or\nviolate the invariants communicated by the `str` type.\n\n# Examples\n\n```\nlet mut v = String::from(\"🗻∈🌏\");\nunsafe {\n    assert_eq!(\"🗻\", v.get_unchecked_mut(0..4));\n    assert_eq!(\"∈\", v.get_unchecked_mut(4..7));\n    assert_eq!(\"🌏\", v.get_unchecked_mut(7..11));\n}\n```","links":{},"attrs":["#[stable(feature = \"str_checked_slicing\", since = \"1.20.0\")]","#[rustc_const_unstable(feature = \"const_slice_index\", issue = \"none\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["i",{"kind":"generic","inner":"I"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"qualified_path","inner":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"I"},"trait":{"kind":"resolved_path","inner":{"name":"SliceIndex","id":"2:10933:214","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}},"param_names":[]}}}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"I"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"SliceIndex","id":"2:10933:214","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}},"20:63:3102":{"id":"20:63:3102","crate_id":20,"name":"IdentFragment","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["20:64:660","20:65:2070"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:3165:75":{"id":"2:3165:75","crate_id":2,"name":"AsRef","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3167:305"],"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"2:3273:3367","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"bounds":[],"implementations":[]}},"2:3346:5147":{"id":"2:3346:5147","crate_id":2,"name":"Mul","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3348:181","2:3349:892"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:4670:4678":{"id":"1:4670:4678","crate_id":1,"name":"Read","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:4671:4495","1:4672:58249","1:4674:58250","1:4675:58251","1:4676:4694","1:4677:9843","1:4678:9842","1:4680:58252","1:4681:4088","1:4682:4819","1:4683:2057","1:4685:2185"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:10302:2240":{"id":"2:10302:2240","crate_id":2,"name":"Binary","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:10303:660"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:8403:151":{"id":"2:8403:151","crate_id":2,"name":"IntoIterator","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:8404:1806","2:8405:3244","2:8406:768"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:2966:184":{"id":"2:2966:184","crate_id":2,"name":"PartialOrd","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:2968:997","2:2969:826","2:2970:792","2:2971:713","2:2972:696"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"Rhs"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"2:3273:3367","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"PartialEq","id":"2:2920:183","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"Rhs"}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:13452:58989":{"id":"2:13452:58989","crate_id":2,"name":"starts_with","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a prefix of this\nstring slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nBasic usage:\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.starts_with(\"bana\"));\nassert!(!bananas.starts_with(\"nana\"));\n```","links":{"self::pattern":"2:13053:5199","prim@char":"1:16005:2982"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:13063:5198","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:6689:4661":{"id":"1:6689:4661","crate_id":1,"name":"MetadataExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:6690:58724","1:6691:8726","1:6692:8727","1:6693:8729","1:6694:8728","1:6695:8730","1:6696:8731","1:6697:8733","1:6698:6995","1:6699:8736","1:6700:8737","1:6701:8738","1:6702:8739","1:6703:8740","1:6704:8741","1:6705:8734","1:6706:8735"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:10300:3332":{"id":"2:10300:3332","crate_id":2,"name":"Octal","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:10301:660"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:14165:141":{"id":"2:14165:141","crate_id":2,"name":"GlobalAlloc","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":true,"items":["2:14166:277","2:14167:518","2:14168:280","2:14169:1079"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:3739:5102":{"id":"2:3739:5102","crate_id":2,"name":"Residual","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3741:57487"],"generics":{"params":[{"name":"O","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"5:6411:223":{"id":"5:6411:223","crate_id":5,"name":"ToString","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["5:6412:1396"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:10291:109":{"id":"2:10291:109","crate_id":2,"name":"Debug","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:10292:660"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:13416":{"id":"2:13416","crate_id":2,"name":null,"span":null,"visibility":{"restricted":{"parent":"2:12513:1339","path":"::str"}},"docs":null,"links":{},"attrs":["#[cfg(not(test))]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"kind":"primitive","inner":"str"},"items":["2:13417:793","2:13418:2066","2:13419:10288","2:13420:63133","2:13422:63134","2:13425:2720","2:13426:63135","2:13427:304","2:13428:58953","2:13429:1851","2:13431:58950","2:13433:58951","2:13435:58952","2:13437:4814","2:13438:63136","2:13439:58972","2:13440:58973","2:13441:2297","2:13442:2291","2:13443:4819","2:13444:10498","2:13445:10496","2:13446:5909","2:13447:63137","2:13448:10237","2:13449:1888","2:13452:58989","2:13455:58990","2:13458:2531","2:13462:4071","2:13466:58980","2:13469:10497","2:13472:58983","2:13475:63138","2:13478:63139","2:13481:58985","2:13484:58987","2:13487:63140","2:13490:63141","2:13493:3062","2:13496:63142","2:13499:63143","2:13502:63144","2:13505:63145","2:13507:63146","2:13509:63147","2:13511:63148","2:13512:63149","2:13513:63150","2:13516:63151","2:13519:9886","2:13522:58991","2:13525:63152","2:13528:1870","2:13531:63153","2:13534:1827","2:13536:4449","2:13537:4450","2:13538:4451","2:13539:4452","2:13540:63154","2:13542:3346","2:13543:63155"],"negative":false,"synthetic":false,"blanket_impl":null}},"1:6794:4754":{"id":"1:6794:4754","crate_id":1,"name":"CommandExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:6795:58196"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sealed","id":"1:10569:4677","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:13447:63137":{"id":"2:13447:63137","crate_id":2,"name":"lines_any","span":null,"visibility":"public","docs":"An iterator over the lines of a string.","links":{},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]","#[deprecated(since = \"1.4.0\", note = \"use lines() instead now\")]","#[allow(deprecated)]"],"deprecation":{"since":"1.4.0","note":"use lines() instead now"},"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"LinesAny","id":"2:49723:5470","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13519:9886":{"id":"2:13519:9886","crate_id":2,"name":"strip_prefix","span":null,"visibility":"public","docs":"Returns a string slice with the prefix removed.\n\nIf the string starts with the pattern `prefix`, returns substring after the prefix, wrapped\nin `Some`.  Unlike `trim_start_matches`, this method removes the prefix exactly once.\n\nIf the string does not start with `prefix`, returns `None`.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nassert_eq!(\"foo:bar\".strip_prefix(\"foo:\"), Some(\"bar\"));\nassert_eq!(\"foo:bar\".strip_prefix(\"bar\"), None);\nassert_eq!(\"foofoo\".strip_prefix(\"foo\"), Some(\"foo\"));\n```","links":{"self::pattern":"2:13053:5199","prim@char":"1:16005:2982"},"attrs":["#[must_use =\n\"this returns the remaining substring as a new slice, \\\n                  without modifying the original\"]","#[stable(feature = \"str_strip\", since = \"1.45.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["prefix",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:47492:176","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:13063:5198","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:3367:3270":{"id":"2:3367:3270","crate_id":2,"name":"AddAssign","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3369:266"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"5:6106:2288":{"id":"5:6106:2288","crate_id":5,"name":"to_ascii_uppercase","span":null,"visibility":"public","docs":"Returns a copy of this string where each character is mapped to its\nASCII upper case equivalent.\n\nASCII letters 'a' to 'z' are mapped to 'A' to 'Z',\nbut non-ASCII letters are unchanged.\n\nTo uppercase the value in-place, use [`make_ascii_uppercase`].\n\nTo uppercase ASCII characters in addition to non-ASCII characters, use\n[`to_uppercase`].\n\n# Examples\n\n```\nlet s = \"Grüße, Jürgen ❤\";\n\nassert_eq!(\"GRüßE, JüRGEN ❤\", s.to_ascii_uppercase());\n```\n\n[`make_ascii_uppercase`]: str::make_ascii_uppercase\n[`to_uppercase`]: #method.to_uppercase","links":{"str::make_ascii_uppercase":"1:16011:2987"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use = \"to uppercase the value in-place, use `make_ascii_uppercase()`\"]","#[stable(feature = \"ascii_methods_on_intrinsics\", since = \"1.23.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:8368:216","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13063:5198":{"id":"2:13063:5198","crate_id":2,"name":"Pattern","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:13065:5201","2:13066:61651","2:13067:61652","2:13068:61653","2:13069:61655","2:13070:61654","2:13071:61656"],"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"24:2864:3306":{"id":"24:2864:3306","crate_id":24,"name":"Peek","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sealed","id":"24:2746:4677","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:13419:10288":{"id":"2:13419:10288","crate_id":2,"name":"is_char_boundary","span":null,"visibility":"public","docs":"Checks that `index`-th byte is the first byte in a UTF-8 code point\nsequence or the end of the string.\n\nThe start and end of the string (when `index == self.len()`) are\nconsidered to be boundaries.\n\nReturns `false` if `index` is greater than `self.len()`.\n\n# Examples\n\n```\nlet s = \"Löwe 老虎 Léopard\";\nassert!(s.is_char_boundary(0));\n// start of `老`\nassert!(s.is_char_boundary(6));\nassert!(s.is_char_boundary(s.len()));\n\n// second byte of `ö`\nassert!(!s.is_char_boundary(2));\n\n// third byte of `老`\nassert!(!s.is_char_boundary(8));\n```","links":{},"attrs":["#[must_use]","#[stable(feature = \"is_char_boundary\", since = \"1.9.0\")]","#[rustc_const_unstable(feature = \"const_is_char_boundary\", issue = \"none\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["index",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13418:2066":{"id":"2:13418:2066","crate_id":2,"name":"is_empty","span":null,"visibility":"public","docs":"Returns `true` if `self` has a length of zero bytes.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\";\nassert!(s.is_empty());\n\nlet s = \"not empty\";\nassert!(!s.is_empty());\n```","links":{},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]","#[rustc_const_stable(feature = \"const_str_is_empty\", since = \"1.39.0\")]","#[must_use]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:3273:3367":{"id":"2:3273:3367","crate_id":2,"name":"Sized","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:10574:4799":{"id":"2:10574:4799","crate_id":2,"name":"BuildHasher","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:10575:146","2:10576:9982","2:10577:58686"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:3168:74":{"id":"2:3168:74","crate_id":2,"name":"AsMut","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3170:2181"],"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"2:3273:3367","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"bounds":[],"implementations":[]}},"0:601:1743":{"id":"0:601:1743","crate_id":0,"name":"symbol","span":{"filename":"src/internals/symbol.rs","begin":[1,0],"end":[68,1]},"visibility":{"restricted":{"parent":"0:7:1613","path":"::internals"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"module","inner":{"is_crate":false,"items":["0:1311:1839"],"is_stripped":true}},"2:3268:211":{"id":"2:3268:211","crate_id":2,"name":"Send","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":true,"is_unsafe":true,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"20:117:1824":{"id":"20:117:1824","crate_id":20,"name":"ToTokens","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["20:118:2460","20:119:2202","20:120:1846"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:409":{"id":"0:409","crate_id":0,"name":null,"span":{"filename":"src/internals/mod.rs","begin":[5,0],"end":[5,25]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"import","inner":{"source":"self::ctxt::Ctxt","name":"Ctxt","id":"0:1282:1738","glob":false}},"2:8886:5164":{"id":"2:8886:5164","crate_id":2,"name":"TrustedStep","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":true,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Step","id":"2:7927:5165","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"5:6103:63781":{"id":"5:6103:63781","crate_id":5,"name":"to_uppercase","span":null,"visibility":"public","docs":"Returns the uppercase equivalent of this string slice, as a new [`String`].\n\n'Uppercase' is defined according to the terms of the Unicode Derived Core Property\n`Uppercase`.\n\nSince some characters can expand into multiple characters when changing\nthe case, this function returns a [`String`] instead of modifying the\nparameter in-place.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"hello\";\n\nassert_eq!(\"HELLO\", s.to_uppercase());\n```\n\nScripts without case are not changed:\n\n```\nlet new_year = \"农历新年\";\n\nassert_eq!(new_year, new_year.to_uppercase());\n```\n\nOne character can become multiple:\n```\nlet s = \"tschüß\";\n\nassert_eq!(\"TSCHÜSS\", s.to_uppercase());\n```","links":{"`String`":"5:8368:216"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the uppercase string as a new String, \\\n                  without modifying the original\"]","#[stable(feature = \"unicode_case_mapping\", since = \"1.2.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:8368:216","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13448:10237":{"id":"2:13448:10237","crate_id":2,"name":"encode_utf16","span":null,"visibility":"public","docs":"Returns an iterator of `u16` over the string encoded as UTF-16.\n\n# Examples\n\nBasic usage:\n\n```\nlet text = \"Zażółć gęślą jaźń\";\n\nlet utf8_len = text.len();\nlet utf16_len = text.encode_utf16().count();\n\nassert!(utf16_len <= utf8_len);\n```","links":{},"attrs":["#[must_use =\n\"this returns the encoded string as an iterator, \\\n                  without modifying the original\"]","#[stable(feature = \"encode_utf16\", since = \"1.8.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"EncodeUtf16","id":"2:49751:5473","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"5:6107:2287":{"id":"5:6107:2287","crate_id":5,"name":"to_ascii_lowercase","span":null,"visibility":"public","docs":"Returns a copy of this string where each character is mapped to its\nASCII lower case equivalent.\n\nASCII letters 'A' to 'Z' are mapped to 'a' to 'z',\nbut non-ASCII letters are unchanged.\n\nTo lowercase the value in-place, use [`make_ascii_lowercase`].\n\nTo lowercase ASCII characters in addition to non-ASCII characters, use\n[`to_lowercase`].\n\n# Examples\n\n```\nlet s = \"Grüße, Jürgen ❤\";\n\nassert_eq!(\"grüße, jürgen ❤\", s.to_ascii_lowercase());\n```\n\n[`make_ascii_lowercase`]: str::make_ascii_lowercase\n[`to_lowercase`]: #method.to_lowercase","links":{"str::make_ascii_lowercase":"1:16011:2987"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use = \"to lowercase the value in-place, use `make_ascii_lowercase()`\"]","#[stable(feature = \"ascii_methods_on_intrinsics\", since = \"1.23.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:8368:216","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:10539:146":{"id":"2:10539:146","crate_id":2,"name":"Hasher","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:10540:652","2:10541:2600","2:10542:58411","2:10543:58412","2:10544:58413","2:10545:58414","2:10546:58415","2:10547:58416","2:10548:58417","2:10549:58418","2:10550:58419","2:10551:58420","2:10552:58421","2:10553:58422","2:10554:58423","2:10555:1532"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"5:6085:1988":{"id":"5:6085:1988","crate_id":5,"name":"replace","span":null,"visibility":"public","docs":"Replaces all matches of a pattern with another string.\n\n`replace` creates a new [`String`], and copies the data from this string slice into it.\nWhile doing so, it attempts to find matches of a pattern. If it finds any, it\nreplaces them with the replacement string slice.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"this is old\";\n\nassert_eq!(\"this is new\", s.replace(\"old\", \"new\"));\nassert_eq!(\"than an old\", s.replace(\"is\", \"an\"));\n```\n\nWhen the pattern doesn't match:\n\n```\nlet s = \"this is old\";\nassert_eq!(s, s.replace(\"cookie monster\", \"little lamb\"));\n```","links":{"`String`":"5:8368:216"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the replaced string as a new allocation, \\\n                  without modifying the original\"]","#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["from",{"kind":"generic","inner":"P"}],["to",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:8368:216","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:13063:5198","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13439:58972":{"id":"2:13439:58972","crate_id":2,"name":"split_at","span":null,"visibility":"public","docs":"Divide one string slice into two at an index.\n\nThe argument, `mid`, should be a byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get mutable string slices instead, see the [`split_at_mut`]\nmethod.\n\n[`split_at_mut`]: str::split_at_mut\n\n# Panics\n\nPanics if `mid` is not on a UTF-8 code point boundary, or if it is\npast the end of the last code point of the string slice.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"Per Martin-Löf\";\n\nlet (first, last) = s.split_at(3);\n\nassert_eq!(\"Per\", first);\nassert_eq!(\" Martin-Löf\", last);\n```","links":{"str::split_at_mut":"1:16011:2987"},"attrs":["#[must_use]","#[stable(feature = \"str_split_at\", since = \"1.4.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["mid",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"tuple","inner":[{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:3434:5085":{"id":"2:3434:5085","crate_id":2,"name":"ShlAssign","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3436:1233"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:13444:10498":{"id":"2:13444:10498","crate_id":2,"name":"split_whitespace","span":null,"visibility":"public","docs":"Splits a string slice by whitespace.\n\nThe iterator returned will return string slices that are sub-slices of\nthe original string slice, separated by any amount of whitespace.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`. If you only want to split on ASCII whitespace\ninstead, use [`split_ascii_whitespace`].\n\n[`split_ascii_whitespace`]: str::split_ascii_whitespace\n\n# Examples\n\nBasic usage:\n\n```\nlet mut iter = \"A few words\".split_whitespace();\n\nassert_eq!(Some(\"A\"), iter.next());\nassert_eq!(Some(\"few\"), iter.next());\nassert_eq!(Some(\"words\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nAll kinds of whitespace are considered:\n\n```\nlet mut iter = \" Mary   had\\ta\\u{2009}little  \\n\\t lamb\".split_whitespace();\nassert_eq!(Some(\"Mary\"), iter.next());\nassert_eq!(Some(\"had\"), iter.next());\nassert_eq!(Some(\"a\"), iter.next());\nassert_eq!(Some(\"little\"), iter.next());\nassert_eq!(Some(\"lamb\"), iter.next());\n\nassert_eq!(None, iter.next());\n```","links":{"str::split_ascii_whitespace":"1:16011:2987"},"attrs":["#[must_use =\n\"this returns the split string as an iterator, \\\n                  without modifying the original\"]","#[stable(feature = \"split_whitespace\", since = \"1.1.0\")]","#[rustc_diagnostic_item = \"str_split_whitespace\"]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"SplitWhitespace","id":"2:49733:5471","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:9259:3682":{"id":"2:9259:3682","crate_id":2,"name":"RefUnwindSafe","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":true,"is_unsafe":false,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:1258:1631":{"id":"0:1258:1631","crate_id":0,"name":"Deserialize","span":{"filename":"src/lib.rs","begin":[99,0],"end":[104,1]},"visibility":"public","docs":null,"links":{},"attrs":["#[proc_macro_derive(Deserialize, attributes(serde))]"],"deprecation":null,"kind":"proc_macro","inner":{"kind":"derive","helpers":["serde"]}},"2:7927:5165":{"id":"2:7927:5165","crate_id":2,"name":"Step","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:7928:62556","2:7929:62557","2:7930:62554","2:7931:62552","2:7932:62558","2:7933:62555","2:7934:62553"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Clone","id":"2:2887:104","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"PartialOrd","id":"2:2966:184","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"Self"}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"1:4727:3336":{"id":"1:4727:3336","crate_id":1,"name":"Write","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:4728:2600","1:4729:60624","1:4731:60625","1:4732:5833","1:4733:60626","1:4734:9930","1:4735:58132","1:4744:4088"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:14239:4467":{"id":"2:14239:4467","crate_id":2,"name":"Allocator","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":true,"items":["2:14240:61059","2:14241:61060","2:14242:61061","2:14243:61062","2:14244:61063","2:14245:61064","2:14246:4088"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:5739:4658":{"id":"1:5739:4658","crate_id":1,"name":"OpenOptionsExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:5740:6954","1:5741:9267"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:13072:5201":{"id":"2:13072:5201","crate_id":2,"name":"Searcher","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":true,"items":["2:13074:5221","2:13075:922","2:13076:61863","2:13077:61864"],"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:3521:131":{"id":"2:3521:131","crate_id":2,"name":"FnMut","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3523:377"],"generics":{"params":[{"name":"Args","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"FnOnce","id":"2:3524:132","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"Args"}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"5:6084:63778":{"id":"5:6084:63778","crate_id":5,"name":"into_boxed_bytes","span":null,"visibility":"public","docs":"Converts a `Box<str>` into a `Box<[u8]>` without copying or allocating.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"this is a string\";\nlet boxed_str = s.to_owned().into_boxed_str();\nlet boxed_bytes = boxed_str.into_boxed_bytes();\nassert_eq!(*boxed_bytes, *s.as_bytes());\n```","links":{},"attrs":["#[stable(feature = \"str_box_extras\", since = \"1.20.0\")]","#[must_use = \"`self` will be dropped if the result is not used\"]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"resolved_path","inner":{"name":"Box","id":"5:432:1805","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}},{"type":{"kind":"resolved_path","inner":{"name":"Global","id":"5:8106:4468","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}],"bindings":[]}},"param_names":[]}}]],"output":{"kind":"resolved_path","inner":{"name":"Box","id":"5:432:1805","args":{"angle_bracketed":{"args":[{"type":{"kind":"slice","inner":{"kind":"primitive","inner":"u8"}}},{"type":{"kind":"resolved_path","inner":{"name":"Global","id":"5:8106:4468","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13540:63154":{"id":"2:13540:63154","crate_id":2,"name":"escape_debug","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_debug`].\n\nNote: only extended grapheme codepoints that begin the string will be\nescaped.\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"❤\\n!\".escape_debug() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"❤\\n!\".escape_debug());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"❤\\\\n!\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"❤\\n!\".escape_debug().to_string(), \"❤\\\\n!\");\n```","links":{"`char::escape_debug`":"1:16005:2982"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]","#[stable(feature = \"str_escape\", since = \"1.34.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"EscapeDebug","id":"2:49758:5474","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13422:63134":{"id":"2:13422:63134","crate_id":2,"name":"ceil_char_boundary","span":null,"visibility":"public","docs":"Finds the closest `x` not below `index` where `is_char_boundary(x)` is `true`.\n\nThis method is the natural complement to [`floor_char_boundary`]. See that method\nfor more details.\n\n[`floor_char_boundary`]: str::floor_char_boundary\n\n# Panics\n\nPanics if `index > self.len()`.\n\n# Examples\n\n```\n#![feature(round_char_boundary)]\nlet s = \"❤️🧡💛💚💙💜\";\nassert_eq!(s.len(), 26);\nassert!(!s.is_char_boundary(13));\n\nlet closest = s.ceil_char_boundary(13);\nassert_eq!(closest, 14);\nassert_eq!(&s[..closest], \"❤️🧡💛\");\n```","links":{"str::floor_char_boundary":"1:16011:2987"},"attrs":["#[unstable(feature = \"round_char_boundary\", issue = \"93743\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["index",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"primitive","inner":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13493:3062":{"id":"2:13493:3062","crate_id":2,"name":"matches","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within the given string\nslice.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rmatches`] method can be used.\n\n[`rmatches`]: str::matches\n\n# Examples\n\nBasic usage:\n\n```\nlet v: Vec<&str> = \"abcXXXabcYYYabc\".matches(\"abc\").collect();\nassert_eq!(v, [\"abc\", \"abc\", \"abc\"]);\n\nlet v: Vec<&str> = \"1abc2abc3\".matches(char::is_numeric).collect();\nassert_eq!(v, [\"1\", \"2\", \"3\"]);\n```","links":{"self::pattern":"2:13053:5199","str::matches":"1:16011:2987","prim@char":"1:16005:2982","`DoubleEndedIterator`":"2:8447:120"},"attrs":["#[stable(feature = \"str_matches\", since = \"1.2.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Matches","id":"2:49663:5468","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:13063:5198","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13425:2720":{"id":"2:13425:2720","crate_id":2,"name":"as_bytes","span":null,"visibility":"public","docs":"Converts a string slice to a byte slice. To convert the byte slice back\ninto a string slice, use the [`from_utf8`] function.\n\n# Examples\n\nBasic usage:\n\n```\nlet bytes = \"bors\".as_bytes();\nassert_eq!(b\"bors\", bytes);\n```","links":{"`from_utf8`":"2:12524:5575"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]","#[rustc_const_stable(feature = \"str_as_bytes\", since = \"1.39.0\")]","#[must_use]","#[allow(unused_attributes)]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"slice","inner":{"kind":"primitive","inner":"u8"}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:3430:5083":{"id":"2:3430:5083","crate_id":2,"name":"BitXorAssign","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3432:357"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"24:2975:1828":{"id":"24:2975:1828","crate_id":24,"name":"Parse","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["24:2976:1827"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"24:3089:3297":{"id":"24:3089:3297","crate_id":24,"name":"Parser","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["24:3090:181","24:3091:2161","24:3092:1827","24:3093:2162"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:13466:58980":{"id":"2:13466:58980","crate_id":2,"name":"split","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by\ncharacters matched by a pattern.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rsplit`] method can be used.\n\n[`rsplit`]: str::rsplit\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".split(' ').collect();\nassert_eq!(v, [\"Mary\", \"had\", \"a\", \"little\", \"lamb\"]);\n\nlet v: Vec<&str> = \"\".split('X').collect();\nassert_eq!(v, [\"\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".split('X').collect();\nassert_eq!(v, [\"lion\", \"\", \"tiger\", \"leopard\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".split(\"::\").collect();\nassert_eq!(v, [\"lion\", \"tiger\", \"leopard\"]);\n\nlet v: Vec<&str> = \"abc1def2ghi\".split(char::is_numeric).collect();\nassert_eq!(v, [\"abc\", \"def\", \"ghi\"]);\n\nlet v: Vec<&str> = \"lionXtigerXleopard\".split(char::is_uppercase).collect();\nassert_eq!(v, [\"lion\", \"tiger\", \"leopard\"]);\n```\n\nIf the pattern is a slice of chars, split on each occurrence of any of the characters:\n\n```\nlet v: Vec<&str> = \"2020-11-03 23:59\".split(&['-', ' ', ':', '@'][..]).collect();\nassert_eq!(v, [\"2020\", \"11\", \"03\", \"23\", \"59\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".split(|c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"abc\", \"def\", \"ghi\"]);\n```\n\nIf a string contains multiple contiguous separators, you will end up\nwith empty strings in the output:\n\n```\nlet x = \"||||a||b|c\".to_string();\nlet d: Vec<_> = x.split('|').collect();\n\nassert_eq!(d, &[\"\", \"\", \"\", \"\", \"a\", \"\", \"b\", \"c\"]);\n```\n\nContiguous separators are separated by the empty string.\n\n```\nlet x = \"(///)\".to_string();\nlet d: Vec<_> = x.split('/').collect();\n\nassert_eq!(d, &[\"(\", \"\", \"\", \")\"]);\n```\n\nSeparators at the start or end of a string are neighbored\nby empty strings.\n\n```\nlet d: Vec<_> = \"010\".split(\"0\").collect();\nassert_eq!(d, &[\"\", \"1\", \"\"]);\n```\n\nWhen the empty string is used as a separator, it separates\nevery character in the string, along with the beginning\nand end of the string.\n\n```\nlet f: Vec<_> = \"rust\".split(\"\").collect();\nassert_eq!(f, &[\"\", \"r\", \"u\", \"s\", \"t\", \"\"]);\n```\n\nContiguous separators can lead to possibly surprising behavior\nwhen whitespace is used as the separator. This code is correct:\n\n```\nlet x = \"    a  b c\".to_string();\nlet d: Vec<_> = x.split(' ').collect();\n\nassert_eq!(d, &[\"\", \"\", \"\", \"\", \"a\", \"\", \"b\", \"c\"]);\n```\n\nIt does _not_ give you:\n\n```,ignore\nassert_eq!(d, &[\"a\", \"b\", \"c\"]);\n```\n\nUse [`split_whitespace`] for this behavior.\n\n[`split_whitespace`]: str::split_whitespace","links":{"prim@char":"1:16005:2982","str::rsplit":"1:16011:2987","str::split_whitespace":"1:16011:2987","self::pattern":"2:13053:5199","`DoubleEndedIterator`":"2:8447:120"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Split","id":"2:49459:4704","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:13063:5198","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"21:808:3360":{"id":"21:808:3360","crate_id":21,"name":"MultiSpan","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["21:809:64284"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:6791:4752":{"id":"1:6791:4752","crate_id":1,"name":"ChildExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:6792:58227","1:6793:58228"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sealed","id":"1:10569:4677","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"0:1311:1839":{"id":"0:1311:1839","crate_id":0,"name":"Symbol","span":{"filename":"src/internals/symbol.rs","begin":[5,0],"end":[5,32]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"struct","inner":{"struct_type":"tuple","generics":{"params":[],"where_predicates":[]},"fields_stripped":true,"fields":[],"impls":[]}},"5:6088:63779":{"id":"5:6088:63779","crate_id":5,"name":"replacen","span":null,"visibility":"public","docs":"Replaces first N matches of a pattern with another string.\n\n`replacen` creates a new [`String`], and copies the data from this string slice into it.\nWhile doing so, it attempts to find matches of a pattern. If it finds any, it\nreplaces them with the replacement string slice at most `count` times.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"foo foo 123 foo\";\nassert_eq!(\"new new 123 foo\", s.replacen(\"foo\", \"new\", 2));\nassert_eq!(\"faa fao 123 foo\", s.replacen('o', \"a\", 3));\nassert_eq!(\"foo foo new23 foo\", s.replacen(char::is_numeric, \"new\", 1));\n```\n\nWhen the pattern doesn't match:\n\n```\nlet s = \"this is old\";\nassert_eq!(s, s.replacen(\"cookie monster\", \"little lamb\", 10));\n```","links":{"`String`":"5:8368:216"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the replaced string as a new allocation, \\\n                  without modifying the original\"]","#[stable(feature = \"str_replacen\", since = \"1.16.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}],["to",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}],["count",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:8368:216","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:13063:5198","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:3405:4801":{"id":"2:3405:4801","crate_id":2,"name":"BitXor","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3407:181","2:3408:356"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:3171:149":{"id":"2:3171:149","crate_id":2,"name":"Into","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3173:1630"],"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"5:5833:5620":{"id":"5:5833:5620","crate_id":5,"name":"Concat","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["5:5835:181","5:5836:432"],"generics":{"params":[{"name":"Item","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"Item"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"2:3273:3367","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"bounds":[],"implementations":[]}},"2:3576:2247":{"id":"2:3576:2247","crate_id":2,"name":"Index","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3578:181","2:3579:753"],"generics":{"params":[{"name":"Idx","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"Idx"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"2:3273:3367","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"bounds":[],"implementations":[]}},"1:6865:4747":{"id":"1:6865:4747","crate_id":1,"name":"FromRawFd","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:6866:58588"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:23467:18423":{"id":"2:23467:18423","crate_id":2,"name":"SimdOrd","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:23468:61577","2:23469:61576","2:23470:61578"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"SimdPartialOrd","id":"2:23462:5267","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"5:6091:63780":{"id":"5:6091:63780","crate_id":5,"name":"to_lowercase","span":null,"visibility":"public","docs":"Returns the lowercase equivalent of this string slice, as a new [`String`].\n\n'Lowercase' is defined according to the terms of the Unicode Derived Core Property\n`Lowercase`.\n\nSince some characters can expand into multiple characters when changing\nthe case, this function returns a [`String`] instead of modifying the\nparameter in-place.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"HELLO\";\n\nassert_eq!(\"hello\", s.to_lowercase());\n```\n\nA tricky example, with sigma:\n\n```\nlet sigma = \"Σ\";\n\nassert_eq!(\"σ\", sigma.to_lowercase());\n\n// but at the end of a word, it's ς, not σ:\nlet odysseus = \"ὈΔΥΣΣΕΎΣ\";\n\nassert_eq!(\"ὀδυσσεύς\", odysseus.to_lowercase());\n```\n\nLanguages without case are not changed:\n\n```\nlet new_year = \"农历新年\";\n\nassert_eq!(new_year, new_year.to_lowercase());\n```","links":{"`String`":"5:8368:216"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the lowercase string as a new String, \\\n                  without modifying the original\"]","#[stable(feature = \"unicode_case_mapping\", since = \"1.2.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:8368:216","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:5657:4743":{"id":"1:5657:4743","crate_id":1,"name":"OsStrExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:5658:6367","1:5659:2720"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sealed","id":"1:10569:4677","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:3395:4800":{"id":"2:3395:4800","crate_id":2,"name":"BitAnd","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3397:181","2:3398:351"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:13543:63155":{"id":"2:13543:63155","crate_id":2,"name":"escape_unicode","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_unicode`].\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"❤\\n!\".escape_unicode() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"❤\\n!\".escape_unicode());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"\\\\u{{2764}}\\\\u{{a}}\\\\u{{21}}\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"❤\\n!\".escape_unicode().to_string(), \"\\\\u{2764}\\\\u{a}\\\\u{21}\");\n```","links":{"`char::escape_unicode`":"1:16005:2982"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]","#[stable(feature = \"str_escape\", since = \"1.34.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"EscapeUnicode","id":"2:49776:5475","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:3647:3266":{"id":"2:3647:3266","crate_id":2,"name":"RangeBounds","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3649:62460","2:3650:62461","2:3651:1888"],"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"2:3273:3367","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"bounds":[],"implementations":[]}},"1:5745:4661":{"id":"1:5745:4661","crate_id":1,"name":"MetadataExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:5746:8381","1:5747:60742","1:5748:6954","1:5749:60743","1:5750:5002","1:5751:5003","1:5752:60744","1:5753:1303","1:5754:60745","1:5755:60746","1:5756:60747","1:5757:60748","1:5758:60749","1:5759:60750","1:5760:60751","1:5761:60752"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:3276:218":{"id":"2:3276:218","crate_id":2,"name":"StructuralPartialEq","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:13449:1888":{"id":"2:13449:1888","crate_id":2,"name":"contains","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a sub-slice of\nthis string slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nBasic usage:\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.contains(\"nana\"));\nassert!(!bananas.contains(\"apples\"));\n```","links":{"prim@char":"1:16005:2982","self::pattern":"2:13053:5199"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:13063:5198","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:6561:4776":{"id":"1:6561:4776","crate_id":1,"name":"JoinHandleExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:6562:58772","1:6563:58773"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:8601:157":{"id":"2:8601:157","crate_id":2,"name":"Iterator","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:8602:1806","2:8603:922","2:8604:4074","2:8607:4075","2:8608:495","2:8610:2120","2:8613:4076","2:8614:4077","2:8615:4078","2:8616:2057","2:8618:2585","2:8620:4079","2:8621:4080","2:8623:841","2:8626:4081","2:8633:2418","2:8635:2414","2:8638:1820","2:8639:2873","2:8640:4082","2:8642:4083","2:8644:4084","2:8647:1307","2:8648:2185","2:8649:4085","2:8653:1807","2:8656:1802","2:8657:4086","2:8658:4087","2:8660:4088","2:8661:1813","2:8663:4089","2:8666:4090","2:8668:4091","2:8678:4092","2:8693:4093","2:8695:4094","2:8699:4095","2:8708:2877","2:8711:4096","2:8713:4097","2:8716:276","2:8723:294","2:8730:2531","2:8737:4098","2:8746:4099","2:8756:1014","2:8763:4100","2:8770:4060","2:8771:4057","2:8772:4062","2:8784:4061","2:8791:4059","2:8803:4058","2:8810:4101","2:8811:4102","2:8816:4103","2:8819:2135","2:8822:4104","2:8823:2878","2:8825:4105","2:8827:415","2:8830:4106","2:8833:997","2:8836:4107","2:8839:604","2:8842:4108","2:8845:907","2:8847:826","2:8849:792","2:8851:713","2:8853:696","2:8855:4109","2:8856:4110","2:8864:4111"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:3774:3326":{"id":"2:3774:3326","crate_id":2,"name":"CoerceUnsized","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":[],"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"2:3273:3367","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"bounds":[],"implementations":[]}},"2:8412:3370":{"id":"2:8412:3370","crate_id":2,"name":"Extend","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:8414:2134","2:8416:4072","2:8417:4073"],"generics":{"params":[{"name":"A","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:13507:63146":{"id":"2:13507:63146","crate_id":2,"name":"trim_start","span":null,"visibility":"public","docs":"Returns a string slice with leading whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Text directionality\n\nA string is a sequence of bytes. `start` in this context means the first\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be left side, and for right-to-left languages like\nArabic or Hebrew, this will be the right side.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\nassert_eq!(\"Hello\\tworld\\t\\n\", s.trim_start());\n```\n\nDirectionality:\n\n```\nlet s = \"  English  \";\nassert!(Some('E') == s.trim_start().chars().next());\n\nlet s = \"  עברית  \";\nassert!(Some('ע') == s.trim_start().chars().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[stable(feature = \"trim_direction\", since = \"1.30.0\")]","#[rustc_diagnostic_item = \"str_trim_start\"]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:10310:3337":{"id":"2:10310:3337","crate_id":2,"name":"LowerExp","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:10311:660"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:22837:5258":{"id":"2:22837:5258","crate_id":2,"name":"SimdUint","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:22838:61562","2:22839:1226","2:22840:1227","2:22841:61579","2:22842:61580","2:22843:61581","2:22844:61582","2:22845:62702","2:22846:62703","2:22847:62704"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Copy","id":"2:3278:106","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sealed","id":"2:22850:4677","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:13534:1827":{"id":"2:13534:1827","crate_id":2,"name":"parse","span":null,"visibility":"public","docs":"Parses this string slice into another type.\n\nBecause `parse` is so general, it can cause problems with type\ninference. As such, `parse` is one of the few times you'll see\nthe syntax affectionately known as the 'turbofish': `::<>`. This\nhelps the inference algorithm understand specifically which type\nyou're trying to parse into.\n\n`parse` can parse into any type that implements the [`FromStr`] trait.\n\n# Errors\n\nWill return [`Err`] if it's not possible to parse this string slice into\nthe desired type.\n\n[`Err`]: FromStr::Err\n\n# Examples\n\nBasic usage\n\n```\nlet four: u32 = \"4\".parse().unwrap();\n\nassert_eq!(4, four);\n```\n\nUsing the 'turbofish' instead of annotating `four`:\n\n```\nlet four = \"4\".parse::<u32>();\n\nassert_eq!(Ok(4), four);\n```\n\nFailing to parse:\n\n```\nlet nope = \"j\".parse::<u32>();\n\nassert!(nope.is_err());\n```","links":{"`FromStr`":"2:12992:3267","FromStr::Err":"2:12992:3267"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Result","id":"2:47619:205","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"F"}},{"type":{"kind":"qualified_path","inner":{"name":"Err","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"F"},"trait":{"kind":"resolved_path","inner":{"name":"FromStr","id":"2:12992:3267","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"F"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"FromStr","id":"2:12992:3267","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:3518:130":{"id":"2:3518:130","crate_id":2,"name":"Fn","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3520:376"],"generics":{"params":[{"name":"Args","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"FnMut","id":"2:3521:131","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"Args"}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:3580:3254":{"id":"2:3580:3254","crate_id":2,"name":"IndexMut","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3582:754"],"generics":{"params":[{"name":"Idx","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"Idx"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"2:3273:3367","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Index","id":"2:3576:2247","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"Idx"}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:13420:63133":{"id":"2:13420:63133","crate_id":2,"name":"floor_char_boundary","span":null,"visibility":"public","docs":"Finds the closest `x` not exceeding `index` where `is_char_boundary(x)` is `true`.\n\nThis method can help you truncate a string so that it's still valid UTF-8, but doesn't\nexceed a given number of bytes. Note that this is done purely at the character level\nand can still visually split graphemes, even though the underlying characters aren't\nsplit. For example, the emoji 🧑‍🔬 (scientist) could be split so that the string only\nincludes 🧑 (person) instead.\n\n# Examples\n\n```\n#![feature(round_char_boundary)]\nlet s = \"❤️🧡💛💚💙💜\";\nassert_eq!(s.len(), 26);\nassert!(!s.is_char_boundary(13));\n\nlet closest = s.floor_char_boundary(13);\nassert_eq!(closest, 10);\nassert_eq!(&s[..closest], \"❤️🧡\");\n```","links":{},"attrs":["#[unstable(feature = \"round_char_boundary\", issue = \"93743\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["index",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"primitive","inner":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"paths":{"16:6413:5878":{"crate_id":16,"path":["gimli","read","line","LineSequence"],"kind":"struct"},"2:13278:9533":{"crate_id":2,"path":["core","str","lossy","Utf8Lossy"],"kind":"struct"},"1:15755:6688":{"crate_id":1,"path":["std","backtrace_rs","symbolize","gimli","mmap","Mmap"],"kind":"struct"},"24:3923:3410":{"crate_id":24,"path":["syn","token","Priv"],"kind":"struct"},"2:9973:5415":{"crate_id":2,"path":["core","fmt","builders","PadAdapter"],"kind":"struct"},"24:5251:3461":{"crate_id":24,"path":["syn","token","ShrEq"],"kind":"struct"},"1:8492:4924":{"crate_id":1,"path":["std","sync","mpsc","SyncSender"],"kind":"struct"},"16:5433:5934":{"crate_id":16,"path":["gimli","read","cfi","EhFrame"],"kind":"struct"},"2:52936:5284":{"crate_id":2,"path":["core","core_arch","simd","i16x32"],"kind":"struct"},"17:12699:7213":{"crate_id":17,"path":["object","macho","SourceVersionCommand"],"kind":"struct"},"6:4331:8391":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_vm"],"kind":"struct"},"17:11678:7009":{"crate_id":17,"path":["object","elf","ProgramHeader32"],"kind":"struct"},"5:3038:1999":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Owned"],"kind":"enum"},"5:8197:3244":{"crate_id":5,"path":["alloc","collections","linked_list","IntoIter"],"kind":"struct"},"1:10673:4903":{"crate_id":1,"path":["std","collections","hash","map","DefaultHasher"],"kind":"struct"},"2:46618:5103":{"crate_id":2,"path":["core","iter","adapters","cycle","Cycle"],"kind":"struct"},"16:7894:6078":{"crate_id":16,"path":["gimli","read","value","ValueType"],"kind":"enum"},"6:3972:8262":{"crate_id":6,"path":["libc","unix","linux_like","linux","if_nameindex"],"kind":"struct"},"2:46500:5538":{"crate_id":2,"path":["core","ffi","c_str","FromBytesUntilNulError"],"kind":"struct"},"17:13582:7493":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation32"],"kind":"struct"},"2:51121:5292":{"crate_id":2,"path":["core","core_arch","simd","i8x4"],"kind":"struct"},"1:14551:4755":{"crate_id":1,"path":["std","sys","unix","fd","FileDesc"],"kind":"struct"},"12:777:3244":{"crate_id":12,"path":["hashbrown","map","IntoIter"],"kind":"struct"},"18:705:6801":{"crate_id":18,"path":["memchr","memmem","twoway","Forward"],"kind":"struct"},"24:2455:3251":{"crate_id":24,"path":["syn","punctuated","PrivateIterMut"],"kind":"struct"},"17:13041:7337":{"crate_id":17,"path":["object","pe","ImageFileHeader"],"kind":"struct"},"12:2392:1747":{"crate_id":12,"path":["hashbrown","raw","sse2","Group"],"kind":"struct"},"2:24564:171":{"crate_id":2,"path":["core","num","nonzero","NonZeroU32"],"kind":"struct"},"16:6424:6094":{"crate_id":16,"path":["gimli","read","line","LineProgramHeader"],"kind":"struct"},"24:5075:3448":{"crate_id":24,"path":["syn","token","OrEq"],"kind":"struct"},"17:9264:6882":{"crate_id":17,"path":["object","endian","LittleEndian"],"kind":"struct"},"2:50179:5484":{"crate_id":2,"path":["core","str","CharEscapeDefault"],"kind":"struct"},"2:50341:201":{"crate_id":2,"path":["core","future","ready","Ready"],"kind":"struct"},"12:971:4897":{"crate_id":12,"path":["hashbrown","map","RawVacantEntryMut"],"kind":"struct"},"5:3362:4797":{"crate_id":5,"path":["alloc","collections","btree","set","SymmetricDifference"],"kind":"struct"},"5:1472:4900":{"crate_id":5,"path":["alloc","collections","btree","map","entry","OccupiedEntry"],"kind":"struct"},"16:6464:6054":{"crate_id":16,"path":["gimli","read","line","IncompleteLineProgram"],"kind":"struct"},"1:11133:2733":{"crate_id":1,"path":["std","io","Bytes"],"kind":"struct"},"21:2687:1747":{"crate_id":21,"path":["proc_macro","bridge","Group"],"kind":"struct"},"17:12568:7187":{"crate_id":17,"path":["object","macho","VersionMinCommand"],"kind":"struct"},"6:3868:8193":{"crate_id":6,"path":["libc","unix","linux_like","linux","glob_t"],"kind":"struct"},"1:3329:4945":{"crate_id":1,"path":["std","fs","symlink_metadata"],"kind":"function"},"5:8130:4580":{"crate_id":5,"path":["alloc","collections","binary_heap","Drain"],"kind":"struct"},"24:5505:2189":{"crate_id":24,"path":["syn","expr","Expr"],"kind":"enum"},"1:1492:4891":{"crate_id":1,"path":["std","collections","hash","map","ValuesMut"],"kind":"struct"},"17:11809:7047":{"crate_id":17,"path":["object","elf","NoteHeader32"],"kind":"struct"},"1:11398:4781":{"crate_id":1,"path":["std","os","unix","net","addr","SocketAddr"],"kind":"struct"},"24:3212:127":{"crate_id":24,"path":["syn","error","Error"],"kind":"struct"},"24:5405:1830":{"crate_id":24,"path":["syn","attr","Meta"],"kind":"enum"},"6:5469:8648":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","utmpx"],"kind":"struct"},"17:9476:6888":{"crate_id":17,"path":["object","endian","I64Bytes"],"kind":"struct"},"19:0:994":{"crate_id":19,"path":["panic_unwind"],"kind":"module"},"1:16010:2986":{"crate_id":1,"path":["std","slice"],"kind":"primitive"},"2:3745:5101":{"crate_id":2,"path":["core","ops","try_trait","NeverShortCircuit"],"kind":"struct"},"17:11186:9168":{"crate_id":17,"path":["object","read","ObjectMap"],"kind":"struct"},"5:7111:6644":{"crate_id":5,"path":["alloc","vec","drain_filter","drop","BackshiftOnDrop"],"kind":"struct"},"17:9659:64233":{"crate_id":17,"path":["object","read","any","SegmentIteratorInternal"],"kind":"enum"},"1:10697:9534":{"crate_id":1,"path":["std","env","JoinPathsError"],"kind":"struct"},"1:8293:4196":{"crate_id":1,"path":["std","sync","mpsc","stream","Packet"],"kind":"struct"},"2:4739:5184":{"crate_id":2,"path":["core","asserting","TryCaptureWithDebug"],"kind":"struct"},"17:13554:7486":{"crate_id":17,"path":["object","pe","ImageResourceDataEntry"],"kind":"struct"},"17:13598:7496":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation32V2"],"kind":"struct"},"1:5801:4666":{"crate_id":1,"path":["std","os","unix","fs","DirBuilderExt"],"kind":"trait"},"17:9245:6282":{"crate_id":17,"path":["object","endian","Endianness"],"kind":"enum"},"2:2925:124":{"crate_id":2,"path":["core","cmp","Eq"],"kind":"trait"},"1:8742:5018":{"crate_id":1,"path":["std","sync","lazy_lock","LazyLock"],"kind":"struct"},"17:10458:6795":{"crate_id":17,"path":["object","read","elf","note","Note"],"kind":"struct"},"2:9762:79":{"crate_id":2,"path":["core","sync","atomic","AtomicBool"],"kind":"struct"},"2:48262:3332":{"crate_id":2,"path":["core","fmt","num","Octal"],"kind":"struct"},"6:4127:8337":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_abs_setup"],"kind":"struct"},"24:5842:3155":{"crate_id":24,"path":["syn","expr","ExprTuple"],"kind":"struct"},"16:7216:6112":{"crate_id":16,"path":["gimli","read","pubtypes","DebugPubTypes"],"kind":"struct"},"12:466:64194":{"crate_id":12,"path":["hashbrown","raw","RawIterHash"],"kind":"struct"},"1:6323:4999":{"crate_id":1,"path":["std","os","unix","net","stream","UnixStream"],"kind":"struct"},"2:46758:5115":{"crate_id":2,"path":["core","iter","adapters","skip_while","SkipWhile"],"kind":"struct"},"2:49509:5461":{"crate_id":2,"path":["core","str","iter","SplitTerminator"],"kind":"struct"},"17:10128:6380":{"crate_id":17,"path":["object","read","coff","section","CoffSection"],"kind":"struct"},"1:1079:2253":{"crate_id":1,"path":["std","ascii","AsciiExt"],"kind":"trait"},"17:9769:64224":{"crate_id":17,"path":["object","read","any","ComdatIteratorInternal"],"kind":"enum"},"2:11282:5431":{"crate_id":2,"path":["core","slice","iter","SplitInclusiveMut"],"kind":"struct"},"16:3549:7636":{"crate_id":16,"path":["gimli","arch","X86"],"kind":"struct"},"16:2843:6209":{"crate_id":16,"path":["gimli","common","DebugAddrBase"],"kind":"struct"},"2:48255:2240":{"crate_id":2,"path":["core","fmt","num","Binary"],"kind":"struct"},"5:3772:3249":{"crate_id":5,"path":["alloc","collections","linked_list","IterMut"],"kind":"struct"},"2:5207:3323":{"crate_id":2,"path":["core","cell","SyncUnsafeCell"],"kind":"struct"},"1:3327:4480":{"crate_id":1,"path":["std","fs","metadata"],"kind":"function"},"2:24734:165":{"crate_id":2,"path":["core","num","nonzero","NonZeroI16"],"kind":"struct"},"1:8650:5008":{"crate_id":1,"path":["std","sync","barrier","BarrierWaitResult"],"kind":"struct"},"16:3522:6813":{"crate_id":16,"path":["gimli","arch","Arm"],"kind":"struct"},"17:11147:9167":{"crate_id":17,"path":["object","read","SymbolMap"],"kind":"struct"},"1:15475:9121":{"crate_id":1,"path":["std","alloc","System"],"kind":"struct"},"2:57675:9049":{"crate_id":2,"path":["core","core_simd","vector","ptr","SimdConstPtr"],"kind":"struct"},"6:591:8021":{"crate_id":6,"path":["libc","unix","winsize"],"kind":"struct"},"2:47550:3244":{"crate_id":2,"path":["core","option","IntoIter"],"kind":"struct"},"5:3375:5634":{"crate_id":5,"path":["alloc","collections","btree","set","IntersectionInner"],"kind":"enum"},"2:46021:5169":{"crate_id":2,"path":["core","ops","try_trait","Yeet"],"kind":"struct"},"16:7571:6038":{"crate_id":16,"path":["gimli","read","unit","AttributeValue"],"kind":"enum"},"24:3995:3412":{"crate_id":24,"path":["syn","token","SelfType"],"kind":"struct"},"2:56374:236":{"crate_id":2,"path":["core","core_simd","fmt","fmt","Wrapper"],"kind":"struct"},"17:13477:7463":{"crate_id":17,"path":["object","pe","ImageImportDescriptor"],"kind":"struct"},"24:3851:3406":{"crate_id":24,"path":["syn","token","Mod"],"kind":"struct"},"17:11628:7002":{"crate_id":17,"path":["object","elf","Rel32"],"kind":"struct"},"17:12010:7082":{"crate_id":17,"path":["object","macho","MachHeader64"],"kind":"struct"},"2:56400:236":{"crate_id":2,"path":["core","core_simd","fmt","fmt","Wrapper"],"kind":"struct"},"22:1002:1822":{"crate_id":22,"path":["proc_macro2","Span"],"kind":"struct"},"17:10938:49047":{"crate_id":17,"path":["object","read","pe","file","PeComdat"],"kind":"struct"},"2:46688:5123":{"crate_id":2,"path":["core","iter","adapters","intersperse","Intersperse"],"kind":"struct"},"24:4121:1744":{"crate_id":24,"path":["syn","token","Type"],"kind":"struct"},"2:8163:61643":{"crate_id":2,"path":["core","iter","sources","from_generator","FromGenerator"],"kind":"struct"},"17:11045:48771":{"crate_id":17,"path":["object","read","FileKind"],"kind":"enum"},"5:6672:5649":{"crate_id":5,"path":["alloc","sync","Weak"],"kind":"struct"},"2:51489:5302":{"crate_id":2,"path":["core","core_arch","simd","u16x8"],"kind":"struct"},"24:3635:1771":{"crate_id":24,"path":["syn","token","Enum"],"kind":"struct"},"1:6701:8738":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt","st_mtime"],"kind":"foreign_type"},"18:812:6397":{"crate_id":18,"path":["memchr","memmem","Finder"],"kind":"struct"},"1:7799:4876":{"crate_id":1,"path":["std","process","Termination"],"kind":"trait"},"2:56387:236":{"crate_id":2,"path":["core","core_simd","fmt","fmt","Wrapper"],"kind":"struct"},"2:24103:5375":{"crate_id":2,"path":["core","num","dec2flt","FloatErrorKind"],"kind":"enum"},"24:5846:3156":{"crate_id":24,"path":["syn","expr","ExprType"],"kind":"struct"},"2:45988:3275":{"crate_id":2,"path":["core","ops","range","Bound"],"kind":"enum"},"2:1944:2188":{"crate_id":2,"path":["core","mem"],"kind":"module"},"12:2280:4901":{"crate_id":12,"path":["hashbrown","set","VacantEntry"],"kind":"struct"},"2:48580:71":{"crate_id":2,"path":["core","fmt","ArgumentV1"],"kind":"struct"},"16:7333:6061":{"crate_id":16,"path":["gimli","read","rnglists","RngListIter"],"kind":"struct"},"14:56:1758":{"crate_id":14,"path":["rustc_demangle","v0","Ident"],"kind":"struct"},"2:3521:131":{"crate_id":2,"path":["core","ops","function","FnMut"],"kind":"trait"},"1:12034:4873":{"crate_id":1,"path":["std","process","ExitStatusError"],"kind":"struct"},"2:2291:4506":{"crate_id":2,"path":["core","ptr","metadata","DynMetadata"],"kind":"struct"},"1:5657:4743":{"crate_id":1,"path":["std","os","unix","ffi","os_str","OsStrExt"],"kind":"trait"},"24:6060:3171":{"crate_id":24,"path":["syn","lit","LitFloat"],"kind":"struct"},"1:8392:4841":{"crate_id":1,"path":["std","sync","mpsc","sync","State"],"kind":"struct"},"17:13054:7344":{"crate_id":17,"path":["object","pe","ImageDataDirectory"],"kind":"struct"},"24:3437:3392":{"crate_id":24,"path":["syn","token","Await"],"kind":"struct"},"17:10912:49037":{"crate_id":17,"path":["object","read","pe","file","PeFile"],"kind":"struct"},"2:53416:9032":{"crate_id":2,"path":["core","core_arch","x86","__m128d"],"kind":"struct"},"24:6340:3187":{"crate_id":24,"path":["syn","ty","TypePtr"],"kind":"struct"},"1:11146:4705":{"crate_id":1,"path":["std","io","Lines"],"kind":"struct"},"24:3653:3398":{"crate_id":24,"path":["syn","token","Extern"],"kind":"struct"},"5:7620:4584":{"crate_id":5,"path":["alloc","vec","set_len_on_drop","SetLenOnDrop"],"kind":"struct"},"21:2963:3358":{"crate_id":21,"path":["proc_macro","diagnostic","Diagnostic"],"kind":"struct"},"2:3286:2390":{"crate_id":2,"path":["core","marker","PhantomData"],"kind":"struct"},"1:11611:4843":{"crate_id":1,"path":["std","path","Component"],"kind":"enum"},"24:4157:1795":{"crate_id":24,"path":["syn","token","Union"],"kind":"struct"},"24:964:3165":{"crate_id":24,"path":["syn","generics","ImplGenerics"],"kind":"struct"},"24:3905:3409":{"crate_id":24,"path":["syn","token","Override"],"kind":"struct"},"2:49336:5446":{"crate_id":2,"path":["core","slice","iter","ArrayChunksMut"],"kind":"struct"},"17:13205:7398":{"crate_id":17,"path":["object","pe","AnonObjectHeaderV2"],"kind":"struct"},"24:6308:3179":{"crate_id":24,"path":["syn","ty","TypeArray"],"kind":"struct"},"1:15332:4788":{"crate_id":1,"path":["std","sys_common","net","LookupHost"],"kind":"struct"},"14:47:9528":{"crate_id":14,"path":["rustc_demangle","v0","Demangle"],"kind":"struct"},"2:11355:5433":{"crate_id":2,"path":["core","slice","iter","RSplitMut"],"kind":"struct"},"24:5309:3465":{"crate_id":24,"path":["syn","token","Tilde"],"kind":"struct"},"2:10933:214":{"crate_id":2,"path":["core","slice","index","SliceIndex"],"kind":"trait"},"24:6062:3167":{"crate_id":24,"path":["syn","lit","LitBool"],"kind":"struct"},"5:783:222":{"crate_id":5,"path":["alloc","borrow","ToOwned"],"kind":"trait"},"2:24182:40988":{"crate_id":2,"path":["core","num","fmt","Part"],"kind":"enum"},"2:3102:4677":{"crate_id":2,"path":["core","convert","num","private","Sealed"],"kind":"trait"},"17:13272:7415":{"crate_id":17,"path":["object","pe","ImageSymbolBytes"],"kind":"struct"},"1:8485:4923":{"crate_id":1,"path":["std","sync","mpsc","Sender"],"kind":"struct"},"2:51866:8981":{"crate_id":2,"path":["core","core_arch","simd","m16x8"],"kind":"struct"},"2:6510:5121":{"crate_id":2,"path":["core","iter","adapters","flatten","Flatten"],"kind":"struct"},"7:38:46432":{"crate_id":7,"path":["unwind","libunwind","_Unwind_Reason_Code"],"kind":"enum"},"2:14239:4467":{"crate_id":2,"path":["core","alloc","Allocator"],"kind":"trait"},"2:23868:5505":{"crate_id":2,"path":["core","num","bignum","Big32x40"],"kind":"struct"},"2:0:488":{"crate_id":2,"path":["core"],"kind":"module"},"1:16011:2987":{"crate_id":1,"path":["std","str"],"kind":"primitive"},"24:5412:1832":{"crate_id":24,"path":["syn","attr","Meta","NameValue"],"kind":"foreign_type"},"1:1528:4897":{"crate_id":1,"path":["std","collections","hash","map","RawVacantEntryMut"],"kind":"struct"},"2:24065:8867":{"crate_id":2,"path":["core","num","dec2flt","number","Number"],"kind":"struct"},"2:2768:579":{"crate_id":2,"path":["core","ptr","drop_in_place"],"kind":"function"},"9:1020:5797":{"crate_id":9,"path":["miniz_oxide","MZError"],"kind":"enum"},"18:838:5201":{"crate_id":18,"path":["memchr","memmem","Searcher"],"kind":"struct"},"16:2889:6229":{"crate_id":16,"path":["gimli","common","DebugArangesOffset"],"kind":"struct"},"24:5263:3462":{"crate_id":24,"path":["syn","token","Star"],"kind":"struct"},"24:4923:3438":{"crate_id":24,"path":["syn","token","Dot3"],"kind":"struct"},"22:832:3355":{"crate_id":22,"path":["proc_macro2","fallback","SourceFile"],"kind":"struct"},"2:46483:5537":{"crate_id":2,"path":["core","ffi","c_str","FromBytesWithNulErrorKind"],"kind":"enum"},"24:4756:3427":{"crate_id":24,"path":["syn","token","Bang"],"kind":"struct"},"1:7936:58123":{"crate_id":1,"path":["std","sync","mpsc","blocking","WaitToken"],"kind":"struct"},"1:3201:4495":{"crate_id":1,"path":["std","fs","read"],"kind":"function"},"24:6379:2433":{"crate_id":24,"path":["syn","path","PathSegment"],"kind":"struct"},"17:13520:7478":{"crate_id":17,"path":["object","pe","ImageResourceDirectory"],"kind":"struct"},"1:15202:4809":{"crate_id":1,"path":["std","sys_common","wtf8","Wtf8Buf"],"kind":"struct"},"24:4103:224":{"crate_id":24,"path":["syn","token","Try"],"kind":"struct"},"6:5185:8518":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__exit_status"],"kind":"struct"},"24:5406:185":{"crate_id":24,"path":["syn","attr","Meta","Path"],"kind":"foreign_type"},"24:2502:2406":{"crate_id":24,"path":["syn","punctuated","Pair"],"kind":"enum"},"6:4066:8307":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_ramp_effect"],"kind":"struct"},"24:5731:3129":{"crate_id":24,"path":["syn","expr","ExprBlock"],"kind":"struct"},"24:3509:2140":{"crate_id":24,"path":["syn","token","Const"],"kind":"struct"},"2:46028:4762":{"crate_id":2,"path":["core","any","TypeId"],"kind":"struct"},"2:49956:5212":{"crate_id":2,"path":["core","str","pattern","CharSliceSearcher"],"kind":"struct"},"12:2419:3281":{"crate_id":12,"path":["hashbrown","TryReserveError"],"kind":"enum"},"1:1194:13171":{"crate_id":1,"path":["std","backtrace","LazilyResolvedCapture"],"kind":"struct"},"2:22931:4767":{"crate_id":2,"path":["core","core_simd","lane_count","LaneCount"],"kind":"struct"},"2:48091:92":{"crate_id":2,"path":["core","sync","atomic","AtomicUsize"],"kind":"struct"},"16:7738:2093":{"crate_id":16,"path":["gimli","read","unit","Attribute"],"kind":"struct"},"2:24144:40987":{"crate_id":2,"path":["core","num","flt2dec","decoder","FullDecoded"],"kind":"enum"},"2:51693:5289":{"crate_id":2,"path":["core","core_arch","simd","i64x2"],"kind":"struct"},"1:13935:58120":{"crate_id":1,"path":["std","sys","unix","process","process_common","Argv"],"kind":"struct"},"17:13356:7435":{"crate_id":17,"path":["object","pe","ImageAuxSymbolSection"],"kind":"struct"},"2:51766:5275":{"crate_id":2,"path":["core","core_arch","simd","f64x4"],"kind":"struct"},"12:1703:5874":{"crate_id":12,"path":["hashbrown","rustc_entry","RustcVacantEntry"],"kind":"struct"},"2:3426:5081":{"crate_id":2,"path":["core","ops","bit","BitOrAssign"],"kind":"trait"},"24:6356:3191":{"crate_id":24,"path":["syn","ty","TypeTuple"],"kind":"struct"},"24:5826:3151":{"crate_id":24,"path":["syn","expr","ExprReturn"],"kind":"struct"},"5:6411:223":{"crate_id":5,"path":["alloc","string","ToString"],"kind":"trait"},"2:7669:2585":{"crate_id":2,"path":["core","iter","adapters","zip","zip"],"kind":"function"},"6:4371:8413":{"crate_id":6,"path":["libc","unix","linux_like","linux","can_filter"],"kind":"struct"},"1:5380:4981":{"crate_id":1,"path":["std","net","tcp","TcpListener"],"kind":"struct"},"5:3970:6631":{"crate_id":5,"path":["alloc","collections","linked_list","drop","DropGuard"],"kind":"struct"},"24:66:1994":{"crate_id":24,"path":["syn","token"],"kind":"module"},"2:2396:3328":{"crate_id":2,"path":["core","ptr","non_null","NonNull"],"kind":"struct"},"16:547:5952":{"crate_id":16,"path":["gimli","read","cfi","RegisterRuleMap"],"kind":"struct"},"17:11794:7041":{"crate_id":17,"path":["object","elf","Vernaux"],"kind":"struct"},"24:3617:3397":{"crate_id":24,"path":["syn","token","Else"],"kind":"struct"},"24:6345:3188":{"crate_id":24,"path":["syn","ty","TypeReference"],"kind":"struct"},"2:9258:3683":{"crate_id":2,"path":["core","panic","unwind_safe","UnwindSafe"],"kind":"trait"},"17:9729:64217":{"crate_id":17,"path":["object","read","any","SectionIteratorInternal"],"kind":"enum"},"14:11:9528":{"crate_id":14,"path":["rustc_demangle","legacy","Demangle"],"kind":"struct"},"5:8391:5631":{"crate_id":5,"path":["alloc","string","FromUtf16Error"],"kind":"struct"},"5:994:5700":{"crate_id":5,"path":["alloc","collections","binary_heap","Hole"],"kind":"struct"},"12:928:4891":{"crate_id":12,"path":["hashbrown","map","ValuesMut"],"kind":"struct"},"1:10642:13165":{"crate_id":1,"path":["std","backtrace","BacktraceStatus"],"kind":"enum"},"1:610:1390":{"crate_id":1,"path":["std","thread"],"kind":"module"},"2:50167:5480":{"crate_id":2,"path":["core","str","LinesAnyMap"],"kind":"struct"},"16:7514:6062":{"crate_id":16,"path":["gimli","read","unit","UnitHeader"],"kind":"struct"},"2:46063:3319":{"crate_id":2,"path":["core","any","tags","Ref"],"kind":"struct"},"17:9809:64218":{"crate_id":17,"path":["object","read","any","ComdatSectionIteratorInternal"],"kind":"enum"},"2:3430:5083":{"crate_id":2,"path":["core","ops","bit","BitXorAssign"],"kind":"trait"},"17:10584:6293":{"crate_id":17,"path":["object","read","macho","file","MachOFile"],"kind":"struct"},"2:12810:5467":{"crate_id":2,"path":["core","str","iter","MatchesInternal"],"kind":"struct"},"1:6699:8736":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt","st_atime"],"kind":"foreign_type"},"9:686:5728":{"crate_id":9,"path":["miniz_oxide","deflate","core","SymFreq"],"kind":"struct"},"5:4699:6636":{"crate_id":5,"path":["alloc","collections","vec_deque","truncate","Dropper"],"kind":"struct"},"2:46600:5119":{"crate_id":2,"path":["core","iter","adapters","cloned","Cloned"],"kind":"struct"},"24:3797:3405":{"crate_id":24,"path":["syn","token","Loop"],"kind":"struct"},"2:45942:197":{"crate_id":2,"path":["core","ops","range","RangeInclusive"],"kind":"struct"},"1:15054:4822":{"crate_id":1,"path":["std","sys","unix","time","SystemTime"],"kind":"struct"},"1:11520:4831":{"crate_id":1,"path":["std","path","Prefix"],"kind":"enum"},"20:357:2470":{"crate_id":20,"path":["quote","spanned","Spanned"],"kind":"trait"},"6:157:41600":{"crate_id":6,"path":["libc","unix","FILE"],"kind":"enum"},"16:6744:6248":{"crate_id":16,"path":["gimli","read","lookup","PubStuffHeader"],"kind":"struct"},"6:1744:8181":{"crate_id":6,"path":["libc","unix","linux_like","utsname"],"kind":"struct"},"17:1311:6384":{"crate_id":17,"path":["object","read","coff","relocation","CoffRelocationIterator"],"kind":"struct"},"5:7379:3244":{"crate_id":5,"path":["alloc","vec","into_iter","IntoIter"],"kind":"struct"},"24:968:2817":{"crate_id":24,"path":["syn","generics","TypeGenerics"],"kind":"struct"},"1:13655:2130":{"crate_id":1,"path":["std","sys","unix","os_str","Slice"],"kind":"struct"},"17:11588:6997":{"crate_id":17,"path":["object","elf","Sym64"],"kind":"struct"},"17:13978:7612":{"crate_id":17,"path":["object","pe","ImageArchitectureEntry"],"kind":"struct"},"6:4395:8423":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_fprog"],"kind":"struct"},"1:7979:6660":{"crate_id":1,"path":["std","sync","mpsc","mpsc_queue","Queue"],"kind":"struct"},"6:4358:8408":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_tp"],"kind":"struct"},"6:4364:8411":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_j1939"],"kind":"struct"},"2:12524:5575":{"crate_id":2,"path":["core","str","converts","from_utf8"],"kind":"function"},"2:46799:5117":{"crate_id":2,"path":["core","iter","adapters","zip","Zip"],"kind":"struct"},"16:6391:6093":{"crate_id":16,"path":["gimli","read","line","ColumnType"],"kind":"enum"},"2:11317:5432":{"crate_id":2,"path":["core","slice","iter","RSplit"],"kind":"struct"},"17:10926:49046":{"crate_id":17,"path":["object","read","pe","file","PeComdatIterator"],"kind":"struct"},"17:12275:7123":{"crate_id":17,"path":["object","macho","ThreadCommand"],"kind":"struct"},"2:46417:5597":{"crate_id":2,"path":["core","char","ToLowercase"],"kind":"struct"},"1:9865:6678":{"crate_id":1,"path":["std","sys_common","thread_local_key","Key"],"kind":"struct"},"1:15413:4988":{"crate_id":1,"path":["std","sys_common","net","UdpSocket"],"kind":"struct"},"16:2773:6235":{"crate_id":16,"path":["gimli","common","LineEncoding"],"kind":"struct"},"6:3951:8254":{"crate_id":6,"path":["libc","unix","linux_like","linux","fsid_t"],"kind":"struct"},"5:5536:5649":{"crate_id":5,"path":["alloc","rc","Weak"],"kind":"struct"},"2:47797:81":{"crate_id":2,"path":["core","sync","atomic","AtomicI16"],"kind":"struct"},"1:11594:4842":{"crate_id":1,"path":["std","path","PrefixComponent"],"kind":"struct"},"2:49297:5444":{"crate_id":2,"path":["core","slice","iter","ArrayWindows"],"kind":"struct"},"2:48829:4841":{"crate_id":2,"path":["core","hash","sip","State"],"kind":"struct"},"22:824:1614":{"crate_id":22,"path":["proc_macro2","fallback","TokenStream"],"kind":"struct"},"24:5449:1814":{"crate_id":24,"path":["syn","data","Fields"],"kind":"enum"},"5:374:4471":{"crate_id":5,"path":["alloc","boxed","thin","ThinBox"],"kind":"struct"},"6:4133:8339":{"crate_id":6,"path":["libc","unix","linux_like","linux","dl_phdr_info"],"kind":"struct"},"6:4494:8462":{"crate_id":6,"path":["libc","unix","linux_like","linux","af_alg_iv"],"kind":"struct"},"16:6605:6056":{"crate_id":16,"path":["gimli","read","loclists","LocationLists"],"kind":"struct"},"12:432:5865":{"crate_id":12,"path":["hashbrown","raw","RawDrain"],"kind":"struct"},"16:6731:6247":{"crate_id":16,"path":["gimli","read","lookup","LookupEntryIter"],"kind":"struct"},"2:49681:5469":{"crate_id":2,"path":["core","str","iter","RMatches"],"kind":"struct"},"24:2746:4677":{"crate_id":24,"path":["syn","sealed","lookahead","Sealed"],"kind":"trait"},"16:5790:5956":{"crate_id":16,"path":["gimli","read","cfi","CfaRule"],"kind":"enum"},"2:32296:4276":{"crate_id":2,"path":["core","mem","manually_drop","ManuallyDrop"],"kind":"struct"},"2:13962:61792":{"crate_id":2,"path":["core","future","from_generator","GenFuture"],"kind":"struct"},"20:296:2047":{"crate_id":20,"path":["quote","__private","push_lifetime","Lifetime"],"kind":"struct"},"5:3300:95":{"crate_id":5,"path":["alloc","collections","btree","set","BTreeSet"],"kind":"struct"},"12:114:64193":{"crate_id":12,"path":["hashbrown","raw","bitmask","BitMaskIter"],"kind":"struct"},"24:2864:3306":{"crate_id":24,"path":["syn","lookahead","Peek"],"kind":"trait"},"2:25240:5356":{"crate_id":2,"path":["core","num","saturating","Saturating"],"kind":"struct"},"17:9005:48757":{"crate_id":17,"path":["object","common","ComdatKind"],"kind":"enum"},"1:10381:9538":{"crate_id":1,"path":["std","backtrace_rs","symbolize","SymbolName"],"kind":"struct"},"16:5707:5948":{"crate_id":16,"path":["gimli","read","cfi","UninitializedUnwindContext"],"kind":"struct"},"16:3800:7639":{"crate_id":16,"path":["gimli","constants","DwChildren"],"kind":"struct"},"1:4036:4888":{"crate_id":1,"path":["std","io","error","repr_bitpacked","Repr"],"kind":"struct"},"16:5595:5945":{"crate_id":16,"path":["gimli","read","cfi","CommonInformationEntry"],"kind":"struct"},"5:5875:6639":{"crate_id":5,"path":["alloc","slice","insert_head","InsertionHole"],"kind":"struct"},"17:10200:48832":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdatIterator"],"kind":"struct"},"1:15484:58780":{"crate_id":1,"path":["std","panicking","Hook"],"kind":"enum"},"6:6106:8757":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_fpstate"],"kind":"struct"},"1:5985:5055":{"crate_id":1,"path":["std","os","unix","net","ancillary","Messages"],"kind":"struct"},"24:2634:2470":{"crate_id":24,"path":["syn","spanned","Spanned"],"kind":"trait"},"5:1607:3249":{"crate_id":5,"path":["alloc","collections","btree","map","IterMut"],"kind":"struct"},"16:6569:6243":{"crate_id":16,"path":["gimli","read","lists","ListsHeader"],"kind":"struct"},"1:12049:4874":{"crate_id":1,"path":["std","process","ExitCode"],"kind":"struct"},"1:6689:4661":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt"],"kind":"trait"},"2:7857:5096":{"crate_id":2,"path":["core","iter","adapters","GenericShunt"],"kind":"struct"},"24:5435:1834":{"crate_id":24,"path":["syn","attr","NestedMeta","Lit"],"kind":"foreign_type"},"1:4643:4686":{"crate_id":1,"path":["std","io","Guard"],"kind":"struct"},"2:22937:4769":{"crate_id":2,"path":["core","core_simd","lane_count","SupportedLaneCount"],"kind":"trait"},"12:933:4894":{"crate_id":12,"path":["hashbrown","map","RawEntryBuilderMut"],"kind":"struct"},"16:7928:2540":{"crate_id":16,"path":["gimli","read","value","Value"],"kind":"enum"},"5:2218:5636":{"crate_id":5,"path":["alloc","collections","btree","merge_iter","MergeIterInner"],"kind":"struct"},"16:4350:7643":{"crate_id":16,"path":["gimli","constants","DwAte"],"kind":"struct"},"1:5934:5049":{"crate_id":1,"path":["std","os","unix","net","ancillary","AncillaryDataIter"],"kind":"struct"},"5:4215:4580":{"crate_id":5,"path":["alloc","collections","vec_deque","drain","Drain"],"kind":"struct"},"17:9034:48758":{"crate_id":17,"path":["object","common","SymbolKind"],"kind":"enum"},"1:13919:4869":{"crate_id":1,"path":["std","sys","unix","process","process_common","Command"],"kind":"struct"},"2:51639:5282":{"crate_id":2,"path":["core","core_arch","simd","i16x8"],"kind":"struct"},"20:18:3101":{"crate_id":20,"path":["quote","ext","TokenStreamExt"],"kind":"trait"},"17:9600:64231":{"crate_id":17,"path":["object","read","any","FileInternal"],"kind":"enum"},"16:3714:7637":{"crate_id":16,"path":["gimli","constants","DwUt"],"kind":"struct"},"1:10870:4712":{"crate_id":1,"path":["std","io","buffered","IntoInnerError"],"kind":"struct"},"1:16024:2998":{"crate_id":1,"path":["std","u32"],"kind":"primitive"},"2:4669:4686":{"crate_id":2,"path":["core","array","try_collect_into_array","Guard"],"kind":"struct"},"0:0:1637":{"crate_id":0,"path":["serde_derive"],"kind":"module"},"6:5436:8640":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","sifields_sigchld"],"kind":"struct"},"12:815:4893":{"crate_id":12,"path":["hashbrown","map","IntoValues"],"kind":"struct"},"2:51336:5285":{"crate_id":2,"path":["core","core_arch","simd","i32x2"],"kind":"struct"},"5:2553:5673":{"crate_id":5,"path":["alloc","collections","btree","node","NodeRef"],"kind":"struct"},"21:3157:1758":{"crate_id":21,"path":["proc_macro","Ident"],"kind":"struct"},"17:11231:6312":{"crate_id":17,"path":["object","read","Import"],"kind":"struct"},"1:16008:2984":{"crate_id":1,"path":["std","pointer"],"kind":"primitive"},"6:4164:8349":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Ehdr"],"kind":"struct"},"24:5814:3148":{"crate_id":24,"path":["syn","expr","ExprRange"],"kind":"struct"},"2:46995:4323":{"crate_id":2,"path":["core","iter","sources","repeat","Repeat"],"kind":"struct"},"2:13129:5206":{"crate_id":2,"path":["core","str","pattern","MultiCharEqPattern"],"kind":"struct"},"17:11616:7001":{"crate_id":17,"path":["object","elf","Syminfo64"],"kind":"struct"},"24:4715:3424":{"crate_id":24,"path":["syn","token","AndAnd"],"kind":"struct"},"2:11396:5435":{"crate_id":2,"path":["core","slice","iter","SplitN"],"kind":"struct"},"1:13957:4871":{"crate_id":1,"path":["std","sys","unix","process","process_common","Stdio"],"kind":"enum"},"17:11358:6285":{"crate_id":17,"path":["object","read","CompressedFileRange"],"kind":"struct"},"6:4262:8356":{"crate_id":6,"path":["libc","unix","linux_like","linux","mntent"],"kind":"struct"},"5:4306:3249":{"crate_id":5,"path":["alloc","collections","vec_deque","iter_mut","IterMut"],"kind":"struct"},"24:5464:3117":{"crate_id":24,"path":["syn","data","FieldsNamed"],"kind":"struct"},"1:1497:4892":{"crate_id":1,"path":["std","collections","hash","map","IntoKeys"],"kind":"struct"},"21:3015:3244":{"crate_id":21,"path":["proc_macro","token_stream","IntoIter"],"kind":"struct"},"2:8362:5141":{"crate_id":2,"path":["core","iter","traits","accum","Sum"],"kind":"trait"},"17:11482:1758":{"crate_id":17,"path":["object","elf","Ident"],"kind":"struct"},"24:3563:115":{"crate_id":24,"path":["syn","token","Default"],"kind":"struct"},"6:563:8006":{"crate_id":6,"path":["libc","unix","ipv6_mreq"],"kind":"struct"},"24:5996:2438":{"crate_id":24,"path":["syn","generics","PredicateType"],"kind":"struct"},"1:4438:4721":{"crate_id":1,"path":["std","io","stdio","StdinLock"],"kind":"struct"},"21:300:9319":{"crate_id":21,"path":["proc_macro","bridge","fxhash","FxHasher"],"kind":"struct"},"16:5960:5963":{"crate_id":16,"path":["gimli","read","cfi","PointerEncodingParameters"],"kind":"struct"},"1:1637:4900":{"crate_id":1,"path":["std","collections","hash","map","OccupiedEntry"],"kind":"struct"},"1:2192:1795":{"crate_id":1,"path":["std","collections","hash","set","Union"],"kind":"struct"},"21:3162:2468":{"crate_id":21,"path":["proc_macro","Literal"],"kind":"struct"},"2:3371:4825":{"crate_id":2,"path":["core","ops","arith","SubAssign"],"kind":"trait"},"17:12741:7217":{"crate_id":17,"path":["object","macho","Nlist32"],"kind":"struct"},"6:5414:8633":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_exit"],"kind":"struct"},"2:47534:3245":{"crate_id":2,"path":["core","option","Iter"],"kind":"struct"},"9:963:5795":{"crate_id":9,"path":["miniz_oxide","MZFlush"],"kind":"enum"},"16:6126:6085":{"crate_id":16,"path":["gimli","read","abbrev","Attributes"],"kind":"enum"},"1:6463:4773":{"crate_id":1,"path":["std","os","unix","process","ExitStatusExt"],"kind":"trait"},"2:46371:5595":{"crate_id":2,"path":["core","char","EscapeUnicodeState"],"kind":"enum"},"24:3689:130":{"crate_id":24,"path":["syn","token","Fn"],"kind":"struct"},"24:6130:1969":{"crate_id":24,"path":["syn","derive","DataEnum"],"kind":"struct"},"16:7250:6115":{"crate_id":16,"path":["gimli","read","rnglists","DebugRngLists"],"kind":"struct"},"2:46789:5116":{"crate_id":2,"path":["core","iter","adapters","take_while","TakeWhile"],"kind":"struct"},"16:0:2961":{"crate_id":16,"path":["gimli"],"kind":"module"},"17:12208:7114":{"crate_id":17,"path":["object","macho","SubClientCommand"],"kind":"struct"},"18:767:6811":{"crate_id":18,"path":["memchr","memmem","twoway","ApproximateByteSet"],"kind":"struct"},"6:6893:8851":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_rwlock_t"],"kind":"struct"},"1:10822:4672":{"crate_id":1,"path":["std","fs","Permissions"],"kind":"struct"},"2:46699:5110":{"crate_id":2,"path":["core","iter","adapters","map","Map"],"kind":"struct"},"1:2576:127":{"crate_id":1,"path":["std","error","Error"],"kind":"trait"},"24:4848:3433":{"crate_id":24,"path":["syn","token","Div"],"kind":"struct"},"5:6688:5650":{"crate_id":5,"path":["alloc","sync","ArcInner"],"kind":"struct"},"17:10279:6334":{"crate_id":17,"path":["object","read","elf","section","SectionTable"],"kind":"struct"},"2:3439:5088":{"crate_id":2,"path":["core","ops","bit","ShrAssign"],"kind":"trait"},"2:3309:3368":{"crate_id":2,"path":["core","marker","Unpin"],"kind":"trait"},"5:8344:5640":{"crate_id":5,"path":["alloc","ffi","c_str","IntoStringError"],"kind":"struct"},"1:16003:2980":{"crate_id":1,"path":["std","bool"],"kind":"primitive"},"17:13609:7500":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation64V2"],"kind":"struct"},"24:940:64372":{"crate_id":24,"path":["syn","generics","LifetimesMut"],"kind":"struct"},"6:1563:8066":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_in6"],"kind":"struct"},"6:4112:8331":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_ff_upload"],"kind":"struct"},"1:13418:4995":{"crate_id":1,"path":["std","sys","unix","net","Socket"],"kind":"struct"},"2:10574:4799":{"crate_id":2,"path":["core","hash","BuildHasher"],"kind":"trait"},"17:10864:6932":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbolTable"],"kind":"struct"},"5:6652:69":{"crate_id":5,"path":["alloc","sync","Arc"],"kind":"struct"},"24:6058:3172":{"crate_id":24,"path":["syn","lit","LitInt"],"kind":"struct"},"2:46394:5596":{"crate_id":2,"path":["core","char","EscapeDefaultState"],"kind":"enum"},"2:50351:8968":{"crate_id":2,"path":["core","future","ResumeTy"],"kind":"struct"},"2:5604:5256":{"crate_id":2,"path":["core","ffi","sealed_trait","VaArgSafe"],"kind":"trait"},"17:12234:7117":{"crate_id":17,"path":["object","macho","SubLibraryCommand"],"kind":"struct"},"24:6407:2449":{"crate_id":24,"path":["syn","path","AngleBracketedGenericArguments"],"kind":"struct"},"2:49713:4705":{"crate_id":2,"path":["core","str","iter","Lines"],"kind":"struct"},"20:528:3977":{"crate_id":20,"path":["quote","__private","IdentFragmentAdapter"],"kind":"struct"},"6:1554:8061":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_in"],"kind":"struct"},"1:9178:58186":{"crate_id":1,"path":["std","sync","rwlock","fmt","LockedPlaceholder"],"kind":"struct"},"16:6166:6086":{"crate_id":16,"path":["gimli","read","aranges","ArangeHeaderIter"],"kind":"struct"},"2:3434:5085":{"crate_id":2,"path":["core","ops","bit","ShlAssign"],"kind":"trait"},"1:11189:4783":{"crate_id":1,"path":["std","net","addr","SocketAddrV6"],"kind":"struct"},"24:3348:3466":{"crate_id":24,"path":["syn","token","Underscore"],"kind":"struct"},"12:869:4580":{"crate_id":12,"path":["hashbrown","map","Drain"],"kind":"struct"},"17:13898:7593":{"crate_id":17,"path":["object","pe","ImageCoffSymbolsHeader"],"kind":"struct"},"24:5894:1766":{"crate_id":24,"path":["syn","generics","Generics"],"kind":"struct"},"2:2268:4507":{"crate_id":2,"path":["core","ptr","metadata","Pointee"],"kind":"trait"},"6:4347:8400":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_extended_err"],"kind":"struct"},"2:32156:5563":{"crate_id":2,"path":["core","num","FpCategory"],"kind":"enum"},"2:22837:5258":{"crate_id":2,"path":["core","core_simd","elements","uint","SimdUint"],"kind":"trait"},"2:50404:5494":{"crate_id":2,"path":["core","task","wake","RawWakerVTable"],"kind":"struct"},"24:5951:2193":{"crate_id":24,"path":["syn","generics","TypeParamBound"],"kind":"enum"},"2:2966:184":{"crate_id":2,"path":["core","cmp","PartialOrd"],"kind":"trait"},"17:13282:7416":{"crate_id":17,"path":["object","pe","ImageSymbolEx"],"kind":"struct"},"1:11502:3671":{"crate_id":1,"path":["std","panic","BacktraceStyle"],"kind":"enum"},"17:11653:7007":{"crate_id":17,"path":["object","elf","Rel64"],"kind":"struct"},"2:48546:107":{"crate_id":2,"path":["core","fmt","rt","v1","Count"],"kind":"enum"},"1:4745:4697":{"crate_id":1,"path":["std","io","Seek"],"kind":"trait"},"2:49877:5207":{"crate_id":2,"path":["core","str","pattern","MultiCharEqSearcher"],"kind":"struct"},"2:10312:3338":{"crate_id":2,"path":["core","fmt","UpperExp"],"kind":"trait"},"17:10529:9166":{"crate_id":17,"path":["object","read","elf","version","VernauxIterator"],"kind":"struct"},"6:5987:8716":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","siginfo_t"],"kind":"struct"},"1:11264:4828":{"crate_id":1,"path":["std","net","ip","Ipv6MulticastScope"],"kind":"enum"},"24:5830:3152":{"crate_id":24,"path":["syn","expr","ExprStruct"],"kind":"struct"},"2:51898:8982":{"crate_id":2,"path":["core","core_arch","simd","m32x4"],"kind":"struct"},"13:120:47075":{"crate_id":13,"path":["std_detect","detect","arch","x86","Feature"],"kind":"enum"},"1:4436:4720":{"crate_id":1,"path":["std","io","stdio","Stdin"],"kind":"struct"},"2:24219:5568":{"crate_id":2,"path":["core","num","error","TryFromIntError"],"kind":"struct"},"24:5186:3456":{"crate_id":24,"path":["syn","token","FatArrow"],"kind":"struct"},"17:13912:7600":{"crate_id":17,"path":["object","pe","ImageDebugMisc"],"kind":"struct"},"5:8106:4468":{"crate_id":5,"path":["alloc","alloc","Global"],"kind":"struct"},"17:11835:7052":{"crate_id":17,"path":["object","elf","HashHeader"],"kind":"struct"},"2:47671:3249":{"crate_id":2,"path":["core","result","IterMut"],"kind":"struct"},"17:13733:7546":{"crate_id":17,"path":["object","pe","ImageHotPatchInfo"],"kind":"struct"},"1:1442:3244":{"crate_id":1,"path":["std","collections","hash","map","IntoIter"],"kind":"struct"},"16:3287:6220":{"crate_id":16,"path":["gimli","common","DebugTypesOffset"],"kind":"struct"},"17:9849:64225":{"crate_id":17,"path":["object","read","any","SymbolTableInternal"],"kind":"enum"},"2:3278:106":{"crate_id":2,"path":["core","marker","Copy"],"kind":"trait"},"24:4865:3434":{"crate_id":24,"path":["syn","token","DivEq"],"kind":"struct"},"1:16026:3000":{"crate_id":1,"path":["std","u128"],"kind":"primitive"},"24:4790:3429":{"crate_id":24,"path":["syn","token","CaretEq"],"kind":"struct"},"24:6330:3184":{"crate_id":24,"path":["syn","ty","TypeMacro"],"kind":"struct"},"17:10468:6359":{"crate_id":17,"path":["object","read","elf","hash","HashTable"],"kind":"struct"},"2:3422:5079":{"crate_id":2,"path":["core","ops","bit","BitAndAssign"],"kind":"trait"},"16:5632:5946":{"crate_id":16,"path":["gimli","read","cfi","PartialFrameDescriptionEntry"],"kind":"struct"},"2:53477:9037":{"crate_id":2,"path":["core","core_arch","x86","__m512"],"kind":"struct"},"1:10370:1839":{"crate_id":1,"path":["std","backtrace_rs","symbolize","Symbol"],"kind":"struct"},"5:432:1805":{"crate_id":5,"path":["alloc","boxed","Box"],"kind":"struct"},"6:5969:8709":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","flock"],"kind":"struct"},"2:24530:170":{"crate_id":2,"path":["core","num","nonzero","NonZeroU16"],"kind":"struct"},"2:24032:5379":{"crate_id":2,"path":["core","num","dec2flt","common","BiasedFp"],"kind":"struct"},"1:9770:6676":{"crate_id":1,"path":["std","sys_common","rwlock","StaticRwLockReadGuard"],"kind":"struct"},"2:3276:218":{"crate_id":2,"path":["core","marker","StructuralPartialEq"],"kind":"trait"},"17:10611:48970":{"crate_id":17,"path":["object","read","macho","file","MachOComdat"],"kind":"struct"},"17:12917:7234":{"crate_id":17,"path":["object","pe","ImageDosHeader"],"kind":"struct"},"24:5099:3450":{"crate_id":24,"path":["syn","token","Pound"],"kind":"struct"},"17:11767:7032":{"crate_id":17,"path":["object","elf","Verdaux"],"kind":"struct"},"16:3392:6226":{"crate_id":16,"path":["gimli","common","UnitSectionOffset"],"kind":"enum"},"1:15123:9269":{"crate_id":1,"path":["std","sys_common","process","CommandEnv"],"kind":"struct"},"24:6005:3163":{"crate_id":24,"path":["syn","generics","PredicateEq"],"kind":"struct"},"5:4242:6631":{"crate_id":5,"path":["alloc","collections","vec_deque","drain","drop","DropGuard"],"kind":"struct"},"2:49349:5447":{"crate_id":2,"path":["core","slice","iter","RChunks"],"kind":"struct"},"1:1522:4896":{"crate_id":1,"path":["std","collections","hash","map","RawOccupiedEntryMut"],"kind":"struct"},"16:5736:5951":{"crate_id":16,"path":["gimli","read","cfi","UnwindTable"],"kind":"struct"},"1:10570:4210":{"crate_id":1,"path":["std","thread","local","AccessError"],"kind":"struct"},"2:49417:5092":{"crate_id":2,"path":["core","str","error","ParseBoolError"],"kind":"struct"},"5:8146:62870":{"crate_id":5,"path":["alloc","collections","btree","merge_iter","Peeked"],"kind":"enum"},"2:13083:5203":{"crate_id":2,"path":["core","str","pattern","DoubleEndedSearcher"],"kind":"trait"},"2:46287:9230":{"crate_id":2,"path":["core","async_iter","from_iter","FromIter"],"kind":"struct"},"24:5215:3458":{"crate_id":24,"path":["syn","token","Shl"],"kind":"struct"},"1:14805:9534":{"crate_id":1,"path":["std","sys","unix","os","JoinPathsError"],"kind":"struct"},"17:9933:48768":{"crate_id":17,"path":["object","read","any","DynamicRelocationIterator"],"kind":"struct"},"6:525:7981":{"crate_id":6,"path":["libc","unix","timeval"],"kind":"struct"},"24:5850:3157":{"crate_id":24,"path":["syn","expr","ExprUnary"],"kind":"struct"},"1:12134:4925":{"crate_id":1,"path":["std","sync","mpsc","SendError"],"kind":"struct"},"24:5761:3136":{"crate_id":24,"path":["syn","expr","ExprField"],"kind":"struct"},"17:9210:48762":{"crate_id":17,"path":["object","common","SymbolFlags"],"kind":"enum"},"2:8412:3370":{"crate_id":2,"path":["core","iter","traits","collect","Extend"],"kind":"trait"},"17:12467:7172":{"crate_id":17,"path":["object","macho","PrebindCksumCommand"],"kind":"struct"},"2:22561:61706":{"crate_id":2,"path":["core","core_simd","swizzle","rotate_lanes_right","Rotate"],"kind":"struct"},"2:24049:9221":{"crate_id":2,"path":["core","num","dec2flt","decimal","Decimal"],"kind":"struct"},"18:713:4056":{"crate_id":18,"path":["memchr","memmem","twoway","Reverse"],"kind":"struct"},"2:3558:4460":{"crate_id":2,"path":["core","ops","generator","Generator"],"kind":"trait"},"22:448:3260":{"crate_id":22,"path":["proc_macro2","imp","LexError"],"kind":"enum"},"1:2462:14170":{"crate_id":1,"path":["std","env","ArgsOs"],"kind":"struct"},"6:5312:8584":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","timex"],"kind":"struct"},"2:52322:5283":{"crate_id":2,"path":["core","core_arch","simd","i16x16"],"kind":"struct"},"16:2794:5969":{"crate_id":16,"path":["gimli","common","Register"],"kind":"struct"},"16:7073:6105":{"crate_id":16,"path":["gimli","read","op","EvaluationResult"],"kind":"enum"},"24:4739:3426":{"crate_id":24,"path":["syn","token","At"],"kind":"struct"},"2:22599:61729":{"crate_id":2,"path":["core","core_simd","swizzle","deinterleave","Even"],"kind":"struct"},"22:1074:2468":{"crate_id":22,"path":["proc_macro2","Literal"],"kind":"struct"},"16:7843:6118":{"crate_id":16,"path":["gimli","read","unit","EntriesTreeNode"],"kind":"struct"},"24:4947:124":{"crate_id":24,"path":["syn","token","Eq"],"kind":"struct"},"24:5046:3446":{"crate_id":24,"path":["syn","token","Ne"],"kind":"struct"},"2:53252:5273":{"crate_id":2,"path":["core","core_arch","simd","f32x16"],"kind":"struct"},"6:3905:8220":{"crate_id":6,"path":["libc","unix","linux_like","linux","dqblk"],"kind":"struct"},"1:4477:4723":{"crate_id":1,"path":["std","io","stdio","StdoutLock"],"kind":"struct"},"1:3686:4706":{"crate_id":1,"path":["std","io","buffered","bufwriter","WriterPanicked"],"kind":"struct"},"2:51282:5293":{"crate_id":2,"path":["core","core_arch","simd","i8x8"],"kind":"struct"},"24:0:1611":{"crate_id":24,"path":["syn"],"kind":"module"},"21:3136:2152":{"crate_id":21,"path":["proc_macro","Punct"],"kind":"struct"},"17:13172:7387":{"crate_id":17,"path":["object","pe","ImageRomHeaders"],"kind":"struct"},"5:1215:5668":{"crate_id":5,"path":["alloc","collections","btree","borrow","DormantMutRef"],"kind":"struct"},"5:5837:5618":{"crate_id":5,"path":["alloc","slice","Join"],"kind":"trait"},"1:15131:4879":{"crate_id":1,"path":["std","sys_common","process","CommandEnvs"],"kind":"struct"},"24:5005:3443":{"crate_id":24,"path":["syn","token","Le"],"kind":"struct"},"1:7931:4194":{"crate_id":1,"path":["std","sync","mpsc","blocking","Inner"],"kind":"struct"},"17:9368:6885":{"crate_id":17,"path":["object","endian","U64Bytes"],"kind":"struct"},"1:14937:6685":{"crate_id":1,"path":["std","sys","unix","process","process_inner","do_exec","Reset"],"kind":"struct"},"6:4193:8351":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Sym"],"kind":"struct"},"22:911:1614":{"crate_id":22,"path":["proc_macro2","imp","TokenStream"],"kind":"enum"},"2:10304:3339":{"crate_id":2,"path":["core","fmt","LowerHex"],"kind":"trait"},"1:12000:4870":{"crate_id":1,"path":["std","process","CommandArgs"],"kind":"struct"},"1:9643:58124":{"crate_id":1,"path":["std","sys_common","mutex","MovableMutex"],"kind":"struct"},"1:1432:3249":{"crate_id":1,"path":["std","collections","hash","map","IterMut"],"kind":"struct"},"24:5822:3150":{"crate_id":24,"path":["syn","expr","ExprRepeat"],"kind":"struct"},"1:1419:3245":{"crate_id":1,"path":["std","collections","hash","map","Iter"],"kind":"struct"},"17:10950:49048":{"crate_id":17,"path":["object","read","pe","file","PeComdatSectionIterator"],"kind":"struct"},"1:15236:4817":{"crate_id":1,"path":["std","sys_common","wtf8","EncodeWide"],"kind":"struct"},"16:5273:5972":{"crate_id":16,"path":["gimli","constants","DwEhPe"],"kind":"struct"},"2:3363:5153":{"crate_id":2,"path":["core","ops","arith","Neg"],"kind":"trait"},"1:12057:9259":{"crate_id":1,"path":["std","sync","mpsc","blocking","SignalToken"],"kind":"struct"},"2:53462:9036":{"crate_id":2,"path":["core","core_arch","x86","__m512i"],"kind":"struct"},"20:431:3863":{"crate_id":20,"path":["quote","__private","RepInterp"],"kind":"struct"},"9:27:5779":{"crate_id":9,"path":["miniz_oxide","deflate","buffer","HashBuffers"],"kind":"struct"},"22:1027:3261":{"crate_id":22,"path":["proc_macro2","Delimiter"],"kind":"enum"},"2:37648:4056":{"crate_id":2,"path":["core","cmp","Reverse"],"kind":"struct"},"2:50418:158":{"crate_id":2,"path":["core","alloc","layout","Layout"],"kind":"struct"},"24:4283:237":{"crate_id":24,"path":["syn","token","Yield"],"kind":"struct"},"2:3524:132":{"crate_id":2,"path":["core","ops","function","FnOnce"],"kind":"trait"},"24:924:64367":{"crate_id":24,"path":["syn","generics","TypeParamsMut"],"kind":"struct"},"2:24212:9224":{"crate_id":2,"path":["core","num","fmt","Formatted"],"kind":"struct"},"1:2755:4756":{"crate_id":1,"path":["std","error","Report"],"kind":"struct"},"16:6591:6099":{"crate_id":16,"path":["gimli","read","loclists","DebugLocLists"],"kind":"struct"},"12:2040:4580":{"crate_id":12,"path":["hashbrown","set","Drain"],"kind":"struct"},"16:3145:6224":{"crate_id":16,"path":["gimli","common","RangeListsOffset"],"kind":"struct"},"2:8886:5164":{"crate_id":2,"path":["core","iter","traits","marker","TrustedStep"],"kind":"trait"},"2:3171:149":{"crate_id":2,"path":["core","convert","Into"],"kind":"trait"},"2:13072:5201":{"crate_id":2,"path":["core","str","pattern","Searcher"],"kind":"trait"},"1:10663:4803":{"crate_id":1,"path":["std","collections","hash","map","RandomState"],"kind":"struct"},"6:5548:8674":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","msqid_ds"],"kind":"struct"},"1:6867:4748":{"crate_id":1,"path":["std","os","fd","raw","IntoRawFd"],"kind":"trait"},"5:4643:6636":{"crate_id":5,"path":["alloc","collections","vec_deque","drop","Dropper"],"kind":"struct"},"6:88:41534":{"crate_id":6,"path":["libc","unix","DIR"],"kind":"enum"},"21:251:4320":{"crate_id":21,"path":["proc_macro","bridge","closure","Closure"],"kind":"struct"},"24:5476:3122":{"crate_id":24,"path":["syn","data","Visibility"],"kind":"enum"},"6:6155:8794":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user"],"kind":"struct"},"12:1183:5861":{"crate_id":12,"path":["hashbrown","map","KeyOrRef"],"kind":"enum"},"16:6072:6060":{"crate_id":16,"path":["gimli","read","reader","ReaderOffsetId"],"kind":"struct"},"16:7420:6063":{"crate_id":16,"path":["gimli","read","unit","UnitOffset"],"kind":"struct"},"16:6949:6254":{"crate_id":16,"path":["gimli","read","op","OperationEvaluationResult"],"kind":"enum"},"1:7511:119":{"crate_id":1,"path":["std","path","Display"],"kind":"struct"},"2:10302:2240":{"crate_id":2,"path":["core","fmt","Binary"],"kind":"trait"},"16:6032:5974":{"crate_id":16,"path":["gimli","read","endian_slice","EndianSlice"],"kind":"struct"},"16:4417:7645":{"crate_id":16,"path":["gimli","constants","DwDs"],"kind":"struct"},"17:12155:7107":{"crate_id":17,"path":["object","macho","FvmlibCommand"],"kind":"struct"},"20:305:2047":{"crate_id":20,"path":["quote","__private","push_lifetime_spanned","Lifetime"],"kind":"struct"},"2:3351:3433":{"crate_id":2,"path":["core","ops","arith","Div"],"kind":"trait"},"1:11228:4786":{"crate_id":1,"path":["std","net","ip","Ipv4Addr"],"kind":"struct"},"5:8203:3244":{"crate_id":5,"path":["alloc","collections","vec_deque","into_iter","IntoIter"],"kind":"struct"},"2:3375:5157":{"crate_id":2,"path":["core","ops","arith","MulAssign"],"kind":"trait"},"2:3280:220":{"crate_id":2,"path":["core","marker","Sync"],"kind":"trait"},"2:2865:3271":{"crate_id":2,"path":["core","borrow","BorrowMut"],"kind":"trait"},"9:900:7941":{"crate_id":9,"path":["miniz_oxide","inflate","core","LocalVars"],"kind":"struct"},"1:8478:202":{"crate_id":1,"path":["std","sync","mpsc","Receiver"],"kind":"struct"},"17:13446:7455":{"crate_id":17,"path":["object","pe","ImageImportByName"],"kind":"struct"},"1:10878:3302":{"crate_id":1,"path":["std","io","cursor","Cursor"],"kind":"struct"},"2:24836:164":{"crate_id":2,"path":["core","num","nonzero","NonZeroI128"],"kind":"struct"},"5:8446:4578":{"crate_id":5,"path":["alloc","vec","drain_filter","DrainFilter"],"kind":"struct"},"24:5975:2107":{"crate_id":24,"path":["syn","generics","WhereClause"],"kind":"struct"},"2:51741:5274":{"crate_id":2,"path":["core","core_arch","simd","f64x2"],"kind":"struct"},"21:2238:4614":{"crate_id":21,"path":["proc_macro","bridge","Marked"],"kind":"struct"},"6:584:8018":{"crate_id":6,"path":["libc","unix","pollfd"],"kind":"struct"},"6:616:8034":{"crate_id":6,"path":["libc","unix","tms"],"kind":"struct"},"16:6357:6092":{"crate_id":16,"path":["gimli","read","line","LineInstructions"],"kind":"struct"},"17:10502:9165":{"crate_id":17,"path":["object","read","elf","version","VerdauxIterator"],"kind":"struct"},"2:56361:236":{"crate_id":2,"path":["core","core_simd","fmt","fmt","Wrapper"],"kind":"struct"},"2:14:2600":{"crate_id":2,"path":["core","write"],"kind":"macro"},"16:5941:189":{"crate_id":16,"path":["gimli","read","cfi","Pointer"],"kind":"enum"},"5:1618:3244":{"crate_id":5,"path":["alloc","collections","btree","map","IntoIter"],"kind":"struct"},"16:5456:5935":{"crate_id":16,"path":["gimli","read","cfi","CieOffsetEncoding"],"kind":"enum"},"24:5735:3130":{"crate_id":24,"path":["syn","expr","ExprBox"],"kind":"struct"},"2:12500:5611":{"crate_id":2,"path":["core","slice","SlicePattern"],"kind":"trait"},"2:3576:2247":{"crate_id":2,"path":["core","ops","index","Index"],"kind":"trait"},"18:821:6398":{"crate_id":18,"path":["memchr","memmem","FinderRev"],"kind":"struct"},"17:607:48754":{"crate_id":17,"path":["object","read","any","Comdat"],"kind":"struct"},"2:38868:4051":{"crate_id":2,"path":["core","marker","PhantomPinned"],"kind":"struct"},"5:1674:4893":{"crate_id":5,"path":["alloc","collections","btree","map","IntoValues"],"kind":"struct"},"5:8298:5638":{"crate_id":5,"path":["alloc","ffi","c_str","NulError"],"kind":"struct"},"2:8879:4458":{"crate_id":2,"path":["core","iter","traits","marker","FusedIterator"],"kind":"trait"},"17:10071:6383":{"crate_id":17,"path":["object","read","coff","file","CoffFile"],"kind":"struct"},"2:14165:141":{"crate_id":2,"path":["core","alloc","global","GlobalAlloc"],"kind":"trait"},"1:11449:4753":{"crate_id":1,"path":["std","os","linux","process","PidFd"],"kind":"struct"},"1:12740:6683":{"crate_id":1,"path":["std","sys","unix","fs","Dir"],"kind":"struct"},"17:13963:7611":{"crate_id":17,"path":["object","pe","NonPagedDebugInfo"],"kind":"struct"},"2:3739:5102":{"crate_id":2,"path":["core","ops","try_trait","Residual"],"kind":"trait"},"17:12040:7085":{"crate_id":17,"path":["object","macho","LcStr"],"kind":"struct"},"24:5862:3160":{"crate_id":24,"path":["syn","expr","ExprYield"],"kind":"struct"},"17:13119:7381":{"crate_id":17,"path":["object","pe","ImageOptionalHeader64"],"kind":"struct"},"17:9162:6311":{"crate_id":17,"path":["object","common","FileFlags"],"kind":"enum"},"17:11572:6992":{"crate_id":17,"path":["object","elf","Sym32"],"kind":"struct"},"1:16005:2982":{"crate_id":1,"path":["std","char"],"kind":"primitive"},"2:46108:5327":{"crate_id":2,"path":["core","array","TryFromSliceError"],"kind":"struct"},"24:2556:2000":{"crate_id":24,"path":["syn","parse_quote"],"kind":"macro"},"17:12182:7111":{"crate_id":17,"path":["object","macho","DylibCommand"],"kind":"struct"},"1:786:6678":{"crate_id":1,"path":["std","thread","local","fast","Key"],"kind":"struct"},"24:3419:3391":{"crate_id":24,"path":["syn","token","Auto"],"kind":"struct"},"1:11204:4785":{"crate_id":1,"path":["std","net","ip","IpAddr"],"kind":"enum"},"2:2887:104":{"crate_id":2,"path":["core","clone","Clone"],"kind":"trait"},"17:10140:6336":{"crate_id":17,"path":["object","read","coff","symbol","SymbolTable"],"kind":"struct"},"2:13078:5202":{"crate_id":2,"path":["core","str","pattern","ReverseSearcher"],"kind":"trait"},"2:46470:5536":{"crate_id":2,"path":["core","ffi","c_str","FromBytesWithNulError"],"kind":"struct"},"2:45898:195":{"crate_id":2,"path":["core","ops","range","RangeFrom"],"kind":"struct"},"2:3383:5161":{"crate_id":2,"path":["core","ops","arith","RemAssign"],"kind":"trait"},"9:927:46536":{"crate_id":9,"path":["miniz_oxide","inflate","TINFLStatus"],"kind":"enum"},"16:7205:6111":{"crate_id":16,"path":["gimli","read","pubtypes","PubTypesEntry"],"kind":"struct"},"17:13788:7565":{"crate_id":17,"path":["object","pe","ImageAlpha64RuntimeFunctionEntry"],"kind":"struct"},"6:5400:8630":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ptrace_peeksiginfo_args"],"kind":"struct"},"1:3343:4948":{"crate_id":1,"path":["std","fs","read_link"],"kind":"function"},"16:3241:6218":{"crate_id":16,"path":["gimli","common","DebugStrOffsetsBase"],"kind":"struct"},"24:3941:3411":{"crate_id":24,"path":["syn","token","Pub"],"kind":"struct"},"16:3218:6217":{"crate_id":16,"path":["gimli","common","DebugStrOffset"],"kind":"struct"},"2:11956:5452":{"crate_id":2,"path":["core","slice","iter","GroupByMut"],"kind":"struct"},"1:1136:4763":{"crate_id":1,"path":["std","backtrace","Backtrace"],"kind":"struct"},"18:721:6802":{"crate_id":18,"path":["memchr","memmem","twoway","TwoWay"],"kind":"struct"},"2:23673:61709":{"crate_id":2,"path":["core","core_simd","vector","splat","Splat"],"kind":"struct"},"1:4688:4695":{"crate_id":1,"path":["std","io","IoSliceMut"],"kind":"struct"},"2:47755:91":{"crate_id":2,"path":["core","sync","atomic","AtomicU8"],"kind":"struct"},"16:4671:7652":{"crate_id":16,"path":["gimli","constants","DwId"],"kind":"struct"},"6:4470:8455":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_setup"],"kind":"struct"},"16:3195:6216":{"crate_id":16,"path":["gimli","common","DebugRngListsIndex"],"kind":"struct"},"2:3177:228":{"crate_id":2,"path":["core","convert","TryInto"],"kind":"trait"},"17:13772:7561":{"crate_id":17,"path":["object","pe","ImageArmRuntimeFunctionEntry"],"kind":"struct"},"6:1690:8158":{"crate_id":6,"path":["libc","unix","linux_like","arpreq"],"kind":"struct"},"2:10446:62483":{"crate_id":2,"path":["core","fmt","fmt","BorrowedPlaceholder"],"kind":"struct"},"17:9839:6336":{"crate_id":17,"path":["object","read","any","SymbolTable"],"kind":"struct"},"2:11137:3249":{"crate_id":2,"path":["core","slice","iter","IterMut"],"kind":"struct"},"17:12247:7119":{"crate_id":17,"path":["object","macho","PreboundDylibCommand"],"kind":"struct"},"5:3882:3302":{"crate_id":5,"path":["alloc","collections","linked_list","Cursor"],"kind":"struct"},"17:9719:48764":{"crate_id":17,"path":["object","read","any","SectionIterator"],"kind":"struct"},"1:14644:61214":{"crate_id":1,"path":["std","sys","unix","kernel_copy","SpliceMode"],"kind":"enum"},"17:3743:6277":{"crate_id":17,"path":["object","read","macho","section","MachOSectionIterator"],"kind":"struct"},"16:4386:7644":{"crate_id":16,"path":["gimli","constants","DwLle"],"kind":"struct"},"12:787:4892":{"crate_id":12,"path":["hashbrown","map","IntoKeys"],"kind":"struct"},"17:9551:6309":{"crate_id":17,"path":["object","read","util","ByteString"],"kind":"struct"},"24:5393:2093":{"crate_id":24,"path":["syn","attr","Attribute"],"kind":"struct"},"24:5368:1747":{"crate_id":24,"path":["syn","token","Group"],"kind":"struct"},"1:16028:3002":{"crate_id":1,"path":["std","usize"],"kind":"primitive"},"2:3400:3981":{"crate_id":2,"path":["core","ops","bit","BitOr"],"kind":"trait"},"1:10614:4195":{"crate_id":1,"path":["std","thread","Thread"],"kind":"struct"},"2:3515:2186":{"crate_id":2,"path":["core","ops","drop","Drop"],"kind":"trait"},"1:1655:4902":{"crate_id":1,"path":["std","collections","hash","map","OccupiedError"],"kind":"struct"},"1:9067:4862":{"crate_id":1,"path":["std","sync","poison","TryLockError"],"kind":"enum"},"1:823:6678":{"crate_id":1,"path":["std","thread","local","os","Key"],"kind":"struct"},"16:6219:6089":{"crate_id":16,"path":["gimli","read","aranges","ArangeEntry"],"kind":"struct"},"1:10569:4677":{"crate_id":1,"path":["std","sealed","Sealed"],"kind":"trait"},"22:818:9158":{"crate_id":22,"path":["proc_macro2","rcvec","RcVecIntoIter"],"kind":"struct"},"1:11082:4696":{"crate_id":1,"path":["std","io","IoSlice"],"kind":"struct"},"5:3039:62853":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Dying"],"kind":"enum"},"1:1505:4894":{"crate_id":1,"path":["std","collections","hash","map","RawEntryBuilderMut"],"kind":"struct"},"24:6350:3189":{"crate_id":24,"path":["syn","ty","TypeSlice"],"kind":"struct"},"12:750:3245":{"crate_id":12,"path":["hashbrown","map","Iter"],"kind":"struct"},"12:1121:4900":{"crate_id":12,"path":["hashbrown","map","OccupiedEntry"],"kind":"struct"},"5:1685:194":{"crate_id":5,"path":["alloc","collections","btree","map","Range"],"kind":"struct"},"2:10300:3332":{"crate_id":2,"path":["core","fmt","Octal"],"kind":"trait"},"2:12734:5460":{"crate_id":2,"path":["core","str","iter","SplitInternal"],"kind":"struct"},"2:22801:5264":{"crate_id":2,"path":["core","core_simd","elements","int","SimdInt"],"kind":"trait"},"24:1278:6442":{"crate_id":24,"path":["syn","lit","LitFloatRepr"],"kind":"struct"},"16:5753:5954":{"crate_id":16,"path":["gimli","read","cfi","RegisterRuleIter"],"kind":"struct"},"2:46670:5108":{"crate_id":2,"path":["core","iter","adapters","fuse","Fuse"],"kind":"struct"},"16:5472:5938":{"crate_id":16,"path":["gimli","read","cfi","BaseAddresses"],"kind":"struct"},"17:10407:6319":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdatIterator"],"kind":"struct"},"2:11205:5429":{"crate_id":2,"path":["core","slice","iter","SplitInclusive"],"kind":"struct"},"17:510:48753":{"crate_id":17,"path":["object","read","any","Segment"],"kind":"struct"},"24:5757:3135":{"crate_id":24,"path":["syn","expr","ExprContinue"],"kind":"struct"},"16:4852:7658":{"crate_id":16,"path":["gimli","constants","DwDefaulted"],"kind":"struct"},"16:4614:7650":{"crate_id":16,"path":["gimli","constants","DwLang"],"kind":"struct"},"16:7392:6047":{"crate_id":16,"path":["gimli","read","str","DebugStrOffsets"],"kind":"struct"},"16:6021:6208":{"crate_id":16,"path":["gimli","read","dwarf","RangeIterInner"],"kind":"enum"},"17:10061:48834":{"crate_id":17,"path":["object","read","coff","file","CoffCommon"],"kind":"struct"},"22:874:1758":{"crate_id":22,"path":["proc_macro2","fallback","Ident"],"kind":"struct"},"2:51096:5300":{"crate_id":2,"path":["core","core_arch","simd","u16x2"],"kind":"struct"},"2:3268:211":{"crate_id":2,"path":["core","marker","Send"],"kind":"trait"},"6:1596:8089":{"crate_id":6,"path":["libc","unix","linux_like","fd_set"],"kind":"struct"},"24:5969:2443":{"crate_id":24,"path":["syn","generics","TraitBoundModifier"],"kind":"enum"},"5:7257:6631":{"crate_id":5,"path":["alloc","vec","drain","drop","DropGuard"],"kind":"struct"},"21:523:64266":{"crate_id":21,"path":["proc_macro","bridge","scoped_cell","RefMutL"],"kind":"struct"},"1:5012:4779":{"crate_id":1,"path":["std","net","addr","ToSocketAddrs"],"kind":"trait"},"16:7303:6116":{"crate_id":16,"path":["gimli","read","rnglists","RawRngListEntry"],"kind":"enum"},"17:13370:7437":{"crate_id":17,"path":["object","pe","ImageAuxSymbolCrc"],"kind":"struct"},"12:353:9210":{"crate_id":12,"path":["hashbrown","raw","RawIterRange"],"kind":"struct"},"2:10240:205":{"crate_id":2,"path":["core","fmt","Result"],"kind":"typedef"},"16:4506:7648":{"crate_id":16,"path":["gimli","constants","DwVis"],"kind":"struct"},"6:1723:8174":{"crate_id":6,"path":["libc","unix","linux_like","epoll_event"],"kind":"struct"},"16:7195:6110":{"crate_id":16,"path":["gimli","read","pubnames","PubNamesEntryIter"],"kind":"struct"},"24:4049:1773":{"crate_id":24,"path":["syn","token","Struct"],"kind":"struct"},"16:7467:6043":{"crate_id":16,"path":["gimli","read","unit","DebugInfoUnitHeadersIter"],"kind":"struct"},"17:11001:49022":{"crate_id":17,"path":["object","read","pe","section","PeSection"],"kind":"struct"},"20:117:1824":{"crate_id":20,"path":["quote","to_tokens","ToTokens"],"kind":"trait"},"9:41:5780":{"crate_id":9,"path":["miniz_oxide","deflate","buffer","LocalBuf"],"kind":"struct"},"17:9689:64229":{"crate_id":17,"path":["object","read","any","SegmentInternal"],"kind":"enum"},"2:3416:3460":{"crate_id":2,"path":["core","ops","bit","Shr"],"kind":"trait"},"1:4611:4323":{"crate_id":1,"path":["std","io","util","Repeat"],"kind":"struct"},"24:5774:3139":{"crate_id":24,"path":["syn","expr","ExprIf"],"kind":"struct"},"1:8384:4196":{"crate_id":1,"path":["std","sync","mpsc","sync","Packet"],"kind":"struct"},"24:5917:2408":{"crate_id":24,"path":["syn","generics","TypeParam"],"kind":"struct"},"2:10924:4677":{"crate_id":2,"path":["core","slice","index","private_slice_index","Sealed"],"kind":"trait"},"1:16025:2999":{"crate_id":1,"path":["std","u64"],"kind":"primitive"},"1:10657:13168":{"crate_id":1,"path":["std","backtrace","RawFrame"],"kind":"enum"},"1:12253:4913":{"crate_id":1,"path":["std","sync","rwlock","RwLockWriteGuard"],"kind":"struct"},"2:51177:5313":{"crate_id":2,"path":["core","core_arch","simd","u8x8"],"kind":"struct"},"24:3707:3400":{"crate_id":24,"path":["syn","token","For"],"kind":"struct"},"1:4670:4678":{"crate_id":1,"path":["std","io","Read"],"kind":"trait"},"2:38805:4758":{"crate_id":2,"path":["core","convert","Infallible"],"kind":"enum"},"6:1736:8177":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_storage"],"kind":"struct"},"12:1682:5873":{"crate_id":12,"path":["hashbrown","rustc_entry","RustcOccupiedEntry"],"kind":"struct"},"1:2797:4757":{"crate_id":1,"path":["std","error","Indented"],"kind":"struct"},"1:6086:4990":{"crate_id":1,"path":["std","os","unix","net","datagram","UnixDatagram"],"kind":"struct"},"5:2777:5672":{"crate_id":5,"path":["alloc","collections","btree","node","Handle"],"kind":"struct"},"24:4175:3416":{"crate_id":24,"path":["syn","token","Unsafe"],"kind":"struct"},"24:5496:3120":{"crate_id":24,"path":["syn","data","VisPublic"],"kind":"struct"},"2:49429:5456":{"crate_id":2,"path":["core","str","iter","Chars"],"kind":"struct"},"6:5359:8610":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","regex_t"],"kind":"struct"},"2:24632:169":{"crate_id":2,"path":["core","num","nonzero","NonZeroU128"],"kind":"struct"},"24:6104:1615":{"crate_id":24,"path":["syn","derive","DeriveInput"],"kind":"struct"},"1:11313:58198":{"crate_id":1,"path":["std","net","parser","AddrKind"],"kind":"enum"},"24:5790:3143":{"crate_id":24,"path":["syn","expr","ExprLoop"],"kind":"struct"},"1:6794:4754":{"crate_id":1,"path":["std","os","linux","process","CommandExt"],"kind":"trait"},"6:1676:8147":{"crate_id":6,"path":["libc","unix","linux_like","in6_rtmsg"],"kind":"struct"},"17:12632:7206":{"crate_id":17,"path":["object","macho","LinkerOptionCommand"],"kind":"struct"},"24:5157:3454":{"crate_id":24,"path":["syn","token","Rem"],"kind":"struct"},"24:6391:2125":{"crate_id":24,"path":["syn","path","GenericArgument"],"kind":"enum"},"2:47881:82":{"crate_id":2,"path":["core","sync","atomic","AtomicI32"],"kind":"struct"},"1:7336:186":{"crate_id":1,"path":["std","path","PathBuf"],"kind":"struct"},"2:46450:5354":{"crate_id":2,"path":["core","char","TryFromCharError"],"kind":"struct"},"2:56335:236":{"crate_id":2,"path":["core","core_simd","fmt","fmt","Wrapper"],"kind":"struct"},"1:11116:4701":{"crate_id":1,"path":["std","io","Chain"],"kind":"struct"},"6:4241:8355":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Shdr"],"kind":"struct"},"17:11696:7018":{"crate_id":17,"path":["object","elf","ProgramHeader64"],"kind":"struct"},"18:169:55085":{"crate_id":18,"path":["memchr","memchr","iter","Memchr3"],"kind":"struct"},"2:8601:157":{"crate_id":2,"path":["core","iter","traits","iterator","Iterator"],"kind":"trait"},"6:4281:8368":{"crate_id":6,"path":["libc","unix","linux_like","linux","posix_spawnattr_t"],"kind":"struct"},"1:5956:5051":{"crate_id":1,"path":["std","os","unix","net","ancillary","ScmRights"],"kind":"struct"},"6:5159:8503":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","statx_timestamp"],"kind":"struct"},"24:6094:3174":{"crate_id":24,"path":["syn","mac","MacroDelimiter"],"kind":"enum"},"17:13574:7492":{"crate_id":17,"path":["object","pe","ImageDynamicRelocationTable"],"kind":"struct"},"17:11328:7222":{"crate_id":17,"path":["object","read","Relocation"],"kind":"struct"},"16:6682:6055":{"crate_id":16,"path":["gimli","read","loclists","LocListIter"],"kind":"struct"},"6:3862:8192":{"crate_id":6,"path":["libc","unix","linux_like","linux","rlimit64"],"kind":"struct"},"6:519:7978":{"crate_id":6,"path":["libc","unix","utimbuf"],"kind":"struct"},"17:10543:6936":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCache"],"kind":"struct"},"6:4401:8424":{"crate_id":6,"path":["libc","unix","linux_like","linux","seccomp_data"],"kind":"struct"},"17:8954:6291":{"crate_id":17,"path":["object","common","SectionKind"],"kind":"enum"},"17:12659:7208":{"crate_id":17,"path":["object","macho","IdentCommand"],"kind":"struct"},"1:1646:4901":{"crate_id":1,"path":["std","collections","hash","map","VacantEntry"],"kind":"struct"},"16:7226:6113":{"crate_id":16,"path":["gimli","read","pubtypes","PubTypesEntryIter"],"kind":"struct"},"20:0:1066":{"crate_id":20,"path":["quote"],"kind":"module"},"1:1511:4895":{"crate_id":1,"path":["std","collections","hash","map","RawEntryMut"],"kind":"enum"},"1:1623:4899":{"crate_id":1,"path":["std","collections","hash","map","Entry"],"kind":"enum"},"6:5221:8531":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","cmsghdr"],"kind":"struct"},"1:15976:13172":{"crate_id":1,"path":["std","backtrace_rs","types","BytesOrWideString"],"kind":"enum"},"6:624:8039":{"crate_id":6,"path":["libc","unix","servent"],"kind":"struct"},"2:8472:3369":{"crate_id":2,"path":["core","iter","traits","exact_size","ExactSizeIterator"],"kind":"trait"},"24:5876:61":{"crate_id":24,"path":["syn","expr","parsing","raw"],"kind":"struct"},"1:6941:4746":{"crate_id":1,"path":["std","os","fd","owned","OwnedFd"],"kind":"struct"},"1:11664:3245":{"crate_id":1,"path":["std","path","Iter"],"kind":"struct"},"24:6325:3182":{"crate_id":24,"path":["syn","ty","TypeImplTrait"],"kind":"struct"},"2:7755:5127":{"crate_id":2,"path":["core","iter","adapters","zip","TrustedRandomAccessNoCoerce"],"kind":"trait"},"2:28051:5144":{"crate_id":2,"path":["core","num","wrapping","Wrapping"],"kind":"struct"},"2:49257:5440":{"crate_id":2,"path":["core","slice","iter","Chunks"],"kind":"struct"},"2:22748:5318":{"crate_id":2,"path":["core","core_simd","elements","float","SimdFloat"],"kind":"trait"},"16:3172:6215":{"crate_id":16,"path":["gimli","common","DebugRngListsBase"],"kind":"struct"},"1:8807:162":{"crate_id":1,"path":["std","sync","mutex","Mutex"],"kind":"struct"},"2:11923:5451":{"crate_id":2,"path":["core","slice","iter","GroupBy"],"kind":"struct"},"1:12238:4858":{"crate_id":1,"path":["std","sync","mutex","MutexGuard"],"kind":"struct"},"6:5563:8685":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","semid_ds"],"kind":"struct"},"17:11434:6956":{"crate_id":17,"path":["object","elf","FileHeader32"],"kind":"struct"},"6:4341:8397":{"crate_id":6,"path":["libc","unix","linux_like","linux","regmatch_t"],"kind":"struct"},"2:22546:61706":{"crate_id":2,"path":["core","core_simd","swizzle","rotate_lanes_left","Rotate"],"kind":"struct"},"1:3740:4713":{"crate_id":1,"path":["std","io","buffered","linewriter","LineWriter"],"kind":"struct"},"24:2312:3242":{"crate_id":24,"path":["syn","punctuated","PairsMut"],"kind":"struct"},"17:9574:6314":{"crate_id":17,"path":["object","read","util","StringTable"],"kind":"struct"},"2:3716:5531":{"crate_id":2,"path":["core","ops","range","OneSidedRange"],"kind":"trait"},"9:809:4841":{"crate_id":9,"path":["miniz_oxide","inflate","core","State"],"kind":"enum"},"5:3748:160":{"crate_id":5,"path":["alloc","collections","linked_list","LinkedList"],"kind":"struct"},"6:1527:8050":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreq"],"kind":"struct"},"1:10812:4942":{"crate_id":1,"path":["std","fs","FileTimes"],"kind":"struct"},"2:24666:4201":{"crate_id":2,"path":["core","num","nonzero","NonZeroUsize"],"kind":"struct"},"2:45919:198":{"crate_id":2,"path":["core","ops","range","RangeTo"],"kind":"struct"},"17:9896:64220":{"crate_id":17,"path":["object","read","any","SymbolIteratorInternal"],"kind":"enum"},"2:51670:5286":{"crate_id":2,"path":["core","core_arch","simd","i32x4"],"kind":"struct"},"17:12783:7225":{"crate_id":17,"path":["object","macho","RelocationInfo"],"kind":"struct"},"24:4265:3421":{"crate_id":24,"path":["syn","token","While"],"kind":"struct"},"1:10795:4775":{"crate_id":1,"path":["std","fs","Metadata"],"kind":"struct"},"17:12795:7232":{"crate_id":17,"path":["object","macho","ScatteredRelocationInfo"],"kind":"struct"},"2:3728:224":{"crate_id":2,"path":["core","ops","try_trait","Try"],"kind":"trait"},"17:12095:7096":{"crate_id":17,"path":["object","macho","Section32"],"kind":"struct"},"1:10706:4701":{"crate_id":1,"path":["std","error","Chain"],"kind":"struct"},"2:32331:4277":{"crate_id":2,"path":["core","mem","maybe_uninit","MaybeUninit"],"kind":"union"},"2:50199:5482":{"crate_id":2,"path":["core","str","UnsafeBytesToStr"],"kind":"struct"},"5:8160:3244":{"crate_id":5,"path":["alloc","collections","btree","set","IntoIter"],"kind":"struct"},"16:3018:6213":{"crate_id":16,"path":["gimli","common","DebugLocListsBase"],"kind":"struct"},"2:49378:5450":{"crate_id":2,"path":["core","slice","iter","RChunksExactMut"],"kind":"struct"},"18:897:6404":{"crate_id":18,"path":["memchr","memmem","SearcherRevKind"],"kind":"enum"},"1:16004:2981":{"crate_id":1,"path":["std","never"],"kind":"primitive"},"24:6412:2137":{"crate_id":24,"path":["syn","path","Binding"],"kind":"struct"},"21:1284:3360":{"crate_id":21,"path":["proc_macro","bridge","client","MultiSpan"],"kind":"struct"},"5:4599:6634":{"crate_id":5,"path":["alloc","collections","vec_deque","spec_extend","spec_extend","WrapAddOnDrop"],"kind":"struct"},"2:12794:5464":{"crate_id":2,"path":["core","str","iter","MatchIndicesInternal"],"kind":"struct"},"24:948:64370":{"crate_id":24,"path":["syn","generics","ConstParams"],"kind":"struct"},"21:2949:3359":{"crate_id":21,"path":["proc_macro","diagnostic","Level"],"kind":"enum"},"16:4955:7661":{"crate_id":16,"path":["gimli","constants","DwLnct"],"kind":"struct"},"24:5714:3125":{"crate_id":24,"path":["syn","expr","ExprAssignOp"],"kind":"struct"},"20:44:4677":{"crate_id":20,"path":["quote","ext","private","Sealed"],"kind":"trait"},"17:10403:6332":{"crate_id":17,"path":["object","read","elf","relocation","RelocationSections"],"kind":"struct"},"17:10558:48967":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCacheImageIterator"],"kind":"struct"},"2:3357:3454":{"crate_id":2,"path":["core","ops","arith","Rem"],"kind":"trait"},"17:12028:7083":{"crate_id":17,"path":["object","macho","LoadCommand"],"kind":"struct"},"17:10304:6322":{"crate_id":17,"path":["object","read","elf","section","ElfSectionIterator"],"kind":"struct"},"5:3951:4578":{"crate_id":5,"path":["alloc","collections","linked_list","DrainFilter"],"kind":"struct"},"2:46056:5263":{"crate_id":2,"path":["core","any","tags","MaybeSizedValue"],"kind":"struct"},"2:23086:18404":{"crate_id":2,"path":["core","core_simd","masks","to_bitmask","ToBitMask"],"kind":"trait"},"24:4976:3441":{"crate_id":24,"path":["syn","token","Ge"],"kind":"struct"},"2:8447:120":{"crate_id":2,"path":["core","iter","traits","double_ended","DoubleEndedIterator"],"kind":"trait"},"1:6963:4673":{"crate_id":1,"path":["std","os","fd","owned","AsFd"],"kind":"trait"},"17:9759:48765":{"crate_id":17,"path":["object","read","any","ComdatIterator"],"kind":"struct"},"16:5855:5958":{"crate_id":16,"path":["gimli","read","cfi","CallFrameInstruction"],"kind":"enum"},"17:13532:7481":{"crate_id":17,"path":["object","pe","ImageResourceDirectoryEntry"],"kind":"struct"},"16:4304:7642":{"crate_id":16,"path":["gimli","constants","DwForm"],"kind":"struct"},"2:48792:4906":{"crate_id":2,"path":["core","hash","sip","SipHasher13"],"kind":"struct"},"2:32497:61898":{"crate_id":2,"path":["core","mem","valid_align","ValidAlignEnum64"],"kind":"enum"},"2:51592:5294":{"crate_id":2,"path":["core","core_arch","simd","i8x16"],"kind":"struct"},"1:5779:4662":{"crate_id":1,"path":["std","os","unix","fs","FileTypeExt"],"kind":"trait"},"1:7736:4871":{"crate_id":1,"path":["std","process","Stdio"],"kind":"struct"},"17:12685:7210":{"crate_id":17,"path":["object","macho","EntryPointCommand"],"kind":"struct"},"2:5184:3322":{"crate_id":2,"path":["core","cell","UnsafeCell"],"kind":"struct"},"17:9404:6886":{"crate_id":17,"path":["object","endian","I16Bytes"],"kind":"struct"},"6:6812:8841":{"crate_id":6,"path":["libc","unix","linux_like","linux","arch","generic","termios2"],"kind":"struct"},"24:5145:3453":{"crate_id":24,"path":["syn","token","LArrow"],"kind":"struct"},"5:2262:5671":{"crate_id":5,"path":["alloc","collections","btree","navigate","LeafRange"],"kind":"struct"},"17:12521:7180":{"crate_id":17,"path":["object","macho","FilesetEntryCommand"],"kind":"struct"},"17:12385:7157":{"crate_id":17,"path":["object","macho","DylibModule32"],"kind":"struct"},"17:10224:48835":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdatSectionIterator"],"kind":"struct"},"12:1784:6629":{"crate_id":12,"path":["hashbrown","scopeguard","ScopeGuard"],"kind":"struct"},"17:11100:6315":{"crate_id":17,"path":["object","read","SymbolIndex"],"kind":"struct"},"1:12072:58181":{"crate_id":1,"path":["std","sync","mpsc","sync","Failure"],"kind":"enum"},"5:8463:4579":{"crate_id":5,"path":["alloc","vec","splice","Splice"],"kind":"struct"},"17:13453:7456":{"crate_id":17,"path":["object","pe","ImageTlsDirectory64"],"kind":"struct"},"1:14566:9260":{"crate_id":1,"path":["std","sys","unix","fs","FileAttr"],"kind":"struct"},"6:4046:8297":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_trigger"],"kind":"struct"},"1:14589:9268":{"crate_id":1,"path":["std","sys","unix","fs","FilePermissions"],"kind":"struct"},"1:16030:3004":{"crate_id":1,"path":["std","fn"],"kind":"primitive"},"1:4514:4718":{"crate_id":1,"path":["std","io","stdio","Stderr"],"kind":"struct"},"2:47679:3244":{"crate_id":2,"path":["core","result","IntoIter"],"kind":"struct"},"21:3007:3260":{"crate_id":21,"path":["proc_macro","LexError"],"kind":"struct"},"17:1236:48833":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbolIterator"],"kind":"struct"},"12:1203:5862":{"crate_id":12,"path":["hashbrown","map","OccupiedEntryRef"],"kind":"struct"},"14:194:47103":{"crate_id":14,"path":["rustc_demangle","DemangleStyle"],"kind":"enum"},"24:5866:1781":{"crate_id":24,"path":["syn","expr","Member"],"kind":"enum"},"17:13637:7508":{"crate_id":17,"path":["object","pe","ImageLoadConfigDirectory32"],"kind":"struct"},"24:4085:2234":{"crate_id":24,"path":["syn","token","Trait"],"kind":"struct"},"24:6353:3190":{"crate_id":24,"path":["syn","ty","TypeTraitObject"],"kind":"struct"},"16:7477:6064":{"crate_id":16,"path":["gimli","read","unit","UnitType"],"kind":"enum"},"2:46656:9238":{"crate_id":2,"path":["core","iter","adapters","flatten","FlattenCompat"],"kind":"struct"},"2:49043:5615":{"crate_id":2,"path":["core","slice","ascii","EscapeAscii"],"kind":"struct"},"6:3966:8260":{"crate_id":6,"path":["libc","unix","linux_like","linux","cpu_set_t"],"kind":"struct"},"2:52082:5303":{"crate_id":2,"path":["core","core_arch","simd","u16x16"],"kind":"struct"},"14:250:7840":{"crate_id":14,"path":["rustc_demangle","SizeLimitExhausted"],"kind":"struct"},"17:13780:7564":{"crate_id":17,"path":["object","pe","ImageArm64RuntimeFunctionEntry"],"kind":"struct"},"17:12982:7285":{"crate_id":17,"path":["object","pe","ImageVxdHeader"],"kind":"struct"},"16:7264:6057":{"crate_id":16,"path":["gimli","read","rnglists","RangeLists"],"kind":"struct"},"1:1306:143":{"crate_id":1,"path":["std","collections","hash","map","HashMap"],"kind":"struct"},"2:24126:8872":{"crate_id":2,"path":["core","num","flt2dec","decoder","Decoded"],"kind":"struct"},"21:2923:4620":{"crate_id":21,"path":["proc_macro","bridge","ExpnGlobals"],"kind":"struct"},"22:158:55322":{"crate_id":22,"path":["proc_macro2","rcvec","RcVecBuilder"],"kind":"struct"},"2:49563:5435":{"crate_id":2,"path":["core","str","iter","SplitN"],"kind":"struct"},"16:7236:6114":{"crate_id":16,"path":["gimli","read","rnglists","DebugRanges"],"kind":"struct"},"21:1253:3355":{"crate_id":21,"path":["proc_macro","bridge","client","SourceFile"],"kind":"struct"},"1:14571:9262":{"crate_id":1,"path":["std","sys","unix","fs","StatxExtraFields"],"kind":"struct"},"1:10805:4671":{"crate_id":1,"path":["std","fs","OpenOptions"],"kind":"struct"},"17:12287:7124":{"crate_id":17,"path":["object","macho","RoutinesCommand32"],"kind":"struct"},"2:47663:3245":{"crate_id":2,"path":["core","result","Iter"],"kind":"struct"},"2:50045:5216":{"crate_id":2,"path":["core","str","pattern","EmptyNeedle"],"kind":"struct"},"6:569:8009":{"crate_id":6,"path":["libc","unix","hostent"],"kind":"struct"},"16:4477:7647":{"crate_id":16,"path":["gimli","constants","DwAccess"],"kind":"struct"},"16:7971:127":{"crate_id":16,"path":["gimli","read","Error"],"kind":"enum"},"2:52003:5315":{"crate_id":2,"path":["core","core_arch","simd","u8x32"],"kind":"struct"},"24:6232:1744":{"crate_id":24,"path":["syn","ty","Type"],"kind":"enum"},"2:3757:5168":{"crate_id":2,"path":["core","ops","try_trait","NeverShortCircuitResidual"],"kind":"enum"},"2:50068:9374":{"crate_id":2,"path":["core","str","lossy","Utf8LossyChunk"],"kind":"struct"},"2:8399:136":{"crate_id":2,"path":["core","iter","traits","collect","FromIterator"],"kind":"trait"},"1:15510:5890":{"crate_id":1,"path":["std","backtrace_rs","backtrace","libunwind","Frame"],"kind":"enum"},"2:2218:1050":{"crate_id":2,"path":["core","ptr"],"kind":"module"},"6:3978:8265":{"crate_id":6,"path":["libc","unix","linux_like","linux","msginfo"],"kind":"struct"},"1:16029:3003":{"crate_id":1,"path":["std","reference"],"kind":"primitive"},"16:7453:6042":{"crate_id":16,"path":["gimli","read","unit","DebugInfo"],"kind":"struct"},"2:49197:5434":{"crate_id":2,"path":["core","slice","iter","GenericSplitN"],"kind":"struct"},"2:4751:102":{"crate_id":2,"path":["core","asserting","Capture"],"kind":"struct"},"24:5818:3149":{"crate_id":24,"path":["syn","expr","ExprReference"],"kind":"struct"},"2:49609:5465":{"crate_id":2,"path":["core","str","iter","MatchIndices"],"kind":"struct"},"24:5498:3119":{"crate_id":24,"path":["syn","data","VisCrate"],"kind":"struct"},"1:2598:9535":{"crate_id":1,"path":["std","error","from","StringError"],"kind":"struct"},"5:1653:4891":{"crate_id":5,"path":["alloc","collections","btree","map","ValuesMut"],"kind":"struct"},"16:3041:6214":{"crate_id":16,"path":["gimli","common","DebugLocListsIndex"],"kind":"struct"},"16:6691:6101":{"crate_id":16,"path":["gimli","read","loclists","LocationListEntry"],"kind":"struct"},"24:5198:3457":{"crate_id":24,"path":["syn","token","Semi"],"kind":"struct"},"16:6807:6103":{"crate_id":16,"path":["gimli","read","op","Operation"],"kind":"enum"},"5:1195:62889":{"crate_id":5,"path":["alloc","collections","btree","append","MergeIter"],"kind":"struct"},"2:46578:5118":{"crate_id":2,"path":["core","iter","adapters","by_ref_sized","ByRefSized"],"kind":"struct"},"2:3811:4459":{"crate_id":2,"path":["core","ops","unsize","DispatchFromDyn"],"kind":"trait"},"16:4922:7660":{"crate_id":16,"path":["gimli","constants","DwLne"],"kind":"struct"},"2:24768:166":{"crate_id":2,"path":["core","num","nonzero","NonZeroI32"],"kind":"struct"},"1:9775:6677":{"crate_id":1,"path":["std","sys_common","rwlock","StaticRwLockWriteGuard"],"kind":"struct"},"1:12401:6453":{"crate_id":1,"path":["std","sys","unix","args","Args"],"kind":"struct"},"9:1056:5790":{"crate_id":9,"path":["miniz_oxide","DataFormat"],"kind":"enum"},"6:5386:8619":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","seminfo"],"kind":"struct"},"2:46638:5105":{"crate_id":2,"path":["core","iter","adapters","filter","Filter"],"kind":"struct"},"1:11424:4982":{"crate_id":1,"path":["std","os","unix","net","listener","Incoming"],"kind":"struct"},"2:47923:89":{"crate_id":2,"path":["core","sync","atomic","AtomicU32"],"kind":"struct"},"1:4727:3336":{"crate_id":1,"path":["std","io","Write"],"kind":"trait"},"1:14236:4720":{"crate_id":1,"path":["std","sys","unix","stdio","Stdin"],"kind":"struct"},"24:5778:3140":{"crate_id":24,"path":["syn","expr","ExprIndex"],"kind":"struct"},"5:2200:6633":{"crate_id":5,"path":["alloc","collections","btree","mem","replace","PanicGuard"],"kind":"struct"},"6:632:8044":{"crate_id":6,"path":["libc","unix","protoent"],"kind":"struct"},"6:511:1748":{"crate_id":6,"path":["libc","unix","group"],"kind":"struct"},"1:2181:4796":{"crate_id":1,"path":["std","collections","hash","set","Difference"],"kind":"struct"},"2:49581:5436":{"crate_id":2,"path":["core","str","iter","RSplitN"],"kind":"struct"},"5:8280:101":{"crate_id":5,"path":["alloc","ffi","c_str","CString"],"kind":"struct"},"2:32397:61899":{"crate_id":2,"path":["core","mem","valid_align","ValidAlignEnum32"],"kind":"enum"},"2:48133:5541":{"crate_id":2,"path":["core","sync","exclusive","Exclusive"],"kind":"struct"},"2:49358:5448":{"crate_id":2,"path":["core","slice","iter","RChunksMut"],"kind":"struct"},"17:12195:7112":{"crate_id":17,"path":["object","macho","SubFrameworkCommand"],"kind":"struct"},"22:155:9157":{"crate_id":22,"path":["proc_macro2","rcvec","RcVec"],"kind":"struct"},"24:5946:3161":{"crate_id":24,"path":["syn","generics","BoundLifetimes"],"kind":"struct"},"1:3565:4710":{"crate_id":1,"path":["std","io","buffered","bufreader","BufReader"],"kind":"struct"},"9:157:5747":{"crate_id":9,"path":["miniz_oxide","deflate","core","CompressorOxide"],"kind":"struct"},"1:15971:9341":{"crate_id":1,"path":["std","backtrace_rs","symbolize","gimli","Cache"],"kind":"struct"},"24:5431:1833":{"crate_id":24,"path":["syn","attr","NestedMeta"],"kind":"enum"},"17:13865:7586":{"crate_id":17,"path":["object","pe","ImageEnclaveImport"],"kind":"struct"},"24:3887:3408":{"crate_id":24,"path":["syn","token","Mut"],"kind":"struct"},"2:53405:9031":{"crate_id":2,"path":["core","core_arch","x86","__m128"],"kind":"struct"},"24:5017:3444":{"crate_id":24,"path":["syn","token","Lt"],"kind":"struct"},"2:14078:5495":{"crate_id":2,"path":["core","task","wake","Waker"],"kind":"struct"},"2:50191:5487":{"crate_id":2,"path":["core","str","IsNotEmpty"],"kind":"struct"},"1:8843:58186":{"crate_id":1,"path":["std","sync","mutex","fmt","LockedPlaceholder"],"kind":"struct"},"6:6100:8756":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_xmmreg"],"kind":"struct"},"24:5297:3464":{"crate_id":24,"path":["syn","token","SubEq"],"kind":"struct"},"2:49742:5472":{"crate_id":2,"path":["core","str","iter","SplitAsciiWhitespace"],"kind":"struct"},"16:2912:6211":{"crate_id":16,"path":["gimli","common","DebugInfoOffset"],"kind":"struct"},"17:12373:7155":{"crate_id":17,"path":["object","macho","DylibTableOfContents"],"kind":"struct"},"12:895:5852":{"crate_id":12,"path":["hashbrown","map","ConsumeAllOnDrop"],"kind":"struct"},"1:12278:4822":{"crate_id":1,"path":["std","time","SystemTime"],"kind":"struct"},"2:50436:4759":{"crate_id":2,"path":["core","alloc","layout","LayoutError"],"kind":"struct"},"2:3103:5167":{"crate_id":2,"path":["core","convert","num","FloatToInt"],"kind":"trait"},"12:952:4896":{"crate_id":12,"path":["hashbrown","map","RawOccupiedEntryMut"],"kind":"struct"},"1:12731:128":{"crate_id":1,"path":["std","sys","unix","fs","File"],"kind":"struct"},"24:6009:1834":{"crate_id":24,"path":["syn","lit","Lit"],"kind":"enum"},"6:6636:8838":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","align","max_align_t"],"kind":"struct"},"2:3246:115":{"crate_id":2,"path":["core","default","Default"],"kind":"trait"},"6:5197:8522":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","glob64_t"],"kind":"struct"},"21:3091:3355":{"crate_id":21,"path":["proc_macro","SourceFile"],"kind":"struct"},"16:2754:5967":{"crate_id":16,"path":["gimli","common","Encoding"],"kind":"struct"},"6:4052:8300":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_envelope"],"kind":"struct"},"1:15354:4980":{"crate_id":1,"path":["std","sys_common","net","TcpStream"],"kind":"struct"},"24:4911:3437":{"crate_id":24,"path":["syn","token","Dot2"],"kind":"struct"},"24:2878:1827":{"crate_id":24,"path":["syn","parse"],"kind":"module"},"17:13819:7572":{"crate_id":17,"path":["object","pe","ImageEnclaveConfig32"],"kind":"struct"},"2:52793:5316":{"crate_id":2,"path":["core","core_arch","simd","u8x64"],"kind":"struct"},"1:16020:2994":{"crate_id":1,"path":["std","i64"],"kind":"primitive"},"18:802:6396":{"crate_id":18,"path":["memchr","memmem","FindRevIter"],"kind":"struct"},"2:11438:5438":{"crate_id":2,"path":["core","slice","iter","RSplitNMut"],"kind":"struct"},"2:10298:119":{"crate_id":2,"path":["core","fmt","Display"],"kind":"trait"},"24:4802:3430":{"crate_id":24,"path":["syn","token","Colon"],"kind":"struct"},"1:15217:4810":{"crate_id":1,"path":["std","sys_common","wtf8","Wtf8"],"kind":"struct"},"16:7786:6052":{"crate_id":16,"path":["gimli","read","unit","EntriesRaw"],"kind":"struct"},"9:749:5732":{"crate_id":9,"path":["miniz_oxide","deflate","core","TDEFLStatus"],"kind":"enum"},"4:0:2953":{"crate_id":4,"path":["rustc_std_workspace_core"],"kind":"module"},"1:11410:5053":{"crate_id":1,"path":["std","os","unix","net","ancillary","AncillaryError"],"kind":"enum"},"1:7259:58182":{"crate_id":1,"path":["std","path","fmt","DebugHelper"],"kind":"struct"},"5:8368:216":{"crate_id":5,"path":["alloc","string","String"],"kind":"struct"},"16:5231:7664":{"crate_id":16,"path":["gimli","constants","DwOp"],"kind":"struct"},"2:52243:5295":{"crate_id":2,"path":["core","core_arch","simd","i8x32"],"kind":"struct"},"1:1156:13169":{"crate_id":1,"path":["std","backtrace","BacktraceSymbol"],"kind":"struct"},"20:191:3709":{"crate_id":20,"path":["quote","__private","HasIterator"],"kind":"struct"},"2:12056:6656":{"crate_id":2,"path":["core","slice","sort","CopyOnDrop"],"kind":"struct"},"17:9088:48760":{"crate_id":17,"path":["object","common","RelocationKind"],"kind":"enum"},"22:0:1612":{"crate_id":22,"path":["proc_macro2"],"kind":"module"},"1:2187:4797":{"crate_id":1,"path":["std","collections","hash","set","SymmetricDifference"],"kind":"struct"},"2:22601:61727":{"crate_id":2,"path":["core","core_simd","swizzle","deinterleave","Odd"],"kind":"struct"},"1:9722:4974":{"crate_id":1,"path":["std","sys_common","remutex","ReentrantMutex"],"kind":"struct"},"9:1075:5798":{"crate_id":9,"path":["miniz_oxide","StreamResult"],"kind":"struct"},"2:53436:9034":{"crate_id":2,"path":["core","core_arch","x86","__m256"],"kind":"struct"},"17:10975:49024":{"crate_id":17,"path":["object","read","pe","section","PeSegment"],"kind":"struct"},"22:1023:1747":{"crate_id":22,"path":["proc_macro2","Group"],"kind":"struct"},"17:10253:6324":{"crate_id":17,"path":["object","read","elf","segment","ElfSegmentIterator"],"kind":"struct"},"12:2032:3245":{"crate_id":12,"path":["hashbrown","set","Iter"],"kind":"struct"},"1:11361:4984":{"crate_id":1,"path":["std","net","Shutdown"],"kind":"enum"},"24:6382:2122":{"crate_id":24,"path":["syn","path","PathArguments"],"kind":"enum"},"6:5998:8721":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stack_t"],"kind":"struct"},"1:2941:179":{"crate_id":1,"path":["std","ffi","os_str","OsStr"],"kind":"struct"},"6:1617:8103":{"crate_id":6,"path":["libc","unix","linux_like","sched_param"],"kind":"struct"},"21:2972:6425":{"crate_id":21,"path":["proc_macro","diagnostic","Children"],"kind":"struct"},"1:8031:4196":{"crate_id":1,"path":["std","sync","mpsc","oneshot","Packet"],"kind":"struct"},"6:6239:8831":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ucontext_t"],"kind":"struct"},"16:3064:6271":{"crate_id":16,"path":["gimli","common","DebugMacinfoOffset"],"kind":"struct"},"17:12598:7193":{"crate_id":17,"path":["object","macho","BuildToolVersion"],"kind":"struct"},"2:4377:3244":{"crate_id":2,"path":["core","array","iter","IntoIter"],"kind":"struct"},"5:5889:6642":{"crate_id":5,"path":["alloc","slice","merge","MergeHole"],"kind":"struct"},"17:10844:6336":{"crate_id":17,"path":["object","read","macho","symbol","SymbolTable"],"kind":"struct"},"24:2807:6433":{"crate_id":24,"path":["syn","thread","ThreadBound"],"kind":"struct"},"1:5789:4663":{"crate_id":1,"path":["std","os","unix","fs","DirEntryExt"],"kind":"trait"},"17:13402:7444":{"crate_id":17,"path":["object","pe","ImageArchiveMemberHeader"],"kind":"struct"},"17:12725:7215":{"crate_id":17,"path":["object","macho","NoteCommand"],"kind":"struct"},"1:10591:4184":{"crate_id":1,"path":["std","thread","Builder"],"kind":"struct"},"16:7870:6048":{"crate_id":16,"path":["gimli","read","unit","DebugTypes"],"kind":"struct"},"24:5924:2448":{"crate_id":24,"path":["syn","generics","LifetimeDef"],"kind":"struct"},"17:11981:7077":{"crate_id":17,"path":["object","macho","FatArch64"],"kind":"struct"},"2:10308:189":{"crate_id":2,"path":["core","fmt","Pointer"],"kind":"trait"},"1:14627:118":{"crate_id":1,"path":["std","sys","unix","fs","DirBuilder"],"kind":"struct"},"18:668:6410":{"crate_id":18,"path":["memchr","memmem","rabinkarp","NeedleHash"],"kind":"struct"},"24:4935:3439":{"crate_id":24,"path":["syn","token","DotDotEq"],"kind":"struct"},"24:4669:3269":{"crate_id":24,"path":["syn","token","Add"],"kind":"struct"},"12:162:5864":{"crate_id":12,"path":["hashbrown","raw","Bucket"],"kind":"struct"},"16:4762:7655":{"crate_id":16,"path":["gimli","constants","DwOrd"],"kind":"struct"},"2:47619:205":{"crate_id":2,"path":["core","result","Result"],"kind":"enum"},"1:7290:58182":{"crate_id":1,"path":["std","path","fmt","DebugHelper"],"kind":"struct"},"5:4628:235":{"crate_id":5,"path":["alloc","collections","vec_deque","VecDeque"],"kind":"struct"},"2:50448:4466":{"crate_id":2,"path":["core","alloc","AllocError"],"kind":"struct"},"1:6561:4776":{"crate_id":1,"path":["std","os","unix","thread","JoinHandleExt"],"kind":"trait"},"6:4095:8323":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_rumble_effect"],"kind":"struct"},"1:9143:3675":{"crate_id":1,"path":["std","sync","rwlock","RwLock"],"kind":"struct"},"16:7158:6107":{"crate_id":16,"path":["gimli","read","op","Evaluation"],"kind":"struct"},"6:6644:8840":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","align","sem_t"],"kind":"struct"},"1:9631:58122":{"crate_id":1,"path":["std","sys_common","mutex","StaticMutex"],"kind":"struct"},"1:6863:4674":{"crate_id":1,"path":["std","os","fd","raw","AsRawFd"],"kind":"trait"},"2:45781:5100":{"crate_id":2,"path":["core","ops","control_flow","ControlFlow"],"kind":"enum"},"2:5155:3320":{"crate_id":2,"path":["core","cell","BorrowRefMut"],"kind":"struct"},"22:828:3260":{"crate_id":22,"path":["proc_macro2","fallback","LexError"],"kind":"struct"},"5:3341:5633":{"crate_id":5,"path":["alloc","collections","btree","set","DifferenceInner"],"kind":"enum"},"22:868:1747":{"crate_id":22,"path":["proc_macro2","fallback","Group"],"kind":"struct"},"6:3997:8278":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_event"],"kind":"struct"},"24:5722:3127":{"crate_id":24,"path":["syn","expr","ExprAwait"],"kind":"struct"},"5:3044:3408":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Mut"],"kind":"struct"},"6:6864:8844":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_condattr_t"],"kind":"struct"},"2:3580:3254":{"crate_id":2,"path":["core","ops","index","IndexMut"],"kind":"trait"},"1:6865:4747":{"crate_id":1,"path":["std","os","fd","raw","FromRawFd"],"kind":"trait"},"16:7279:6259":{"crate_id":16,"path":["gimli","read","rnglists","RangeListsFormat"],"kind":"enum"},"1:2399:14153":{"crate_id":1,"path":["std","env","Vars"],"kind":"struct"},"12:2269:4900":{"crate_id":12,"path":["hashbrown","set","OccupiedEntry"],"kind":"struct"},"17:10041:48819":{"crate_id":17,"path":["object","read","archive","ArchiveMemberIterator"],"kind":"struct"},"17:13540:7484":{"crate_id":17,"path":["object","pe","ImageResourceDirectoryString"],"kind":"struct"},"17:9332:6355":{"crate_id":17,"path":["object","endian","U32Bytes"],"kind":"struct"},"1:16015:2989":{"crate_id":1,"path":["std","f32"],"kind":"primitive"},"1:8929:5028":{"crate_id":1,"path":["std","sync","once","WaiterQueue"],"kind":"struct"},"21:553:6625":{"crate_id":21,"path":["proc_macro","bridge","scoped_cell","replace","PutBackOnDrop"],"kind":"struct"},"1:14576:4671":{"crate_id":1,"path":["std","sys","unix","fs","OpenOptions"],"kind":"struct"},"1:10958:4714":{"crate_id":1,"path":["std","io","error","ErrorKind"],"kind":"enum"},"24:932:64369":{"crate_id":24,"path":["syn","generics","Lifetimes"],"kind":"struct"},"6:5459:8646":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_data"],"kind":"union"},"24:6054:3168":{"crate_id":24,"path":["syn","lit","LitByte"],"kind":"struct"},"1:15093:4821":{"crate_id":1,"path":["std","sys","unix","time","inner","Instant"],"kind":"struct"},"17:13377:7439":{"crate_id":17,"path":["object","pe","ImageRelocation"],"kind":"struct"},"5:3370:4795":{"crate_id":5,"path":["alloc","collections","btree","set","Intersection"],"kind":"struct"},"1:3355:4954":{"crate_id":1,"path":["std","fs","read_dir"],"kind":"function"},"1:4475:4722":{"crate_id":1,"path":["std","io","stdio","Stdout"],"kind":"struct"},"17:10788:48944":{"crate_id":17,"path":["object","read","macho","segment","MachOSegmentIterator"],"kind":"struct"},"18:730:6780":{"crate_id":18,"path":["memchr","memmem","twoway","Shift"],"kind":"enum"},"22:997:1614":{"crate_id":22,"path":["proc_macro2","TokenStream"],"kind":"struct"},"2:53553:9041":{"crate_id":2,"path":["core","core_arch","x86","__m512bh"],"kind":"struct"},"17:10028:48818":{"crate_id":17,"path":["object","read","archive","ArchiveFile"],"kind":"struct"},"2:49767:3347":{"crate_id":2,"path":["core","str","iter","EscapeDefault"],"kind":"struct"},"21:1315:3358":{"crate_id":21,"path":["proc_macro","bridge","client","Diagnostic"],"kind":"struct"},"22:1069:1758":{"crate_id":22,"path":["proc_macro2","Ident"],"kind":"struct"},"17:12946:7254":{"crate_id":17,"path":["object","pe","ImageOs2Header"],"kind":"struct"},"6:6870:8845":{"crate_id":6,"path":["libc","unix","linux_like","linux","fanotify_event_metadata"],"kind":"struct"},"6:1908:42901":{"crate_id":6,"path":["libc","unix","linux_like","linux","fpos64_t"],"kind":"enum"},"2:47965:83":{"crate_id":2,"path":["core","sync","atomic","AtomicI64"],"kind":"struct"},"1:1534:4898":{"crate_id":1,"path":["std","collections","hash","map","RawEntryBuilder"],"kind":"struct"},"18:0:2963":{"crate_id":18,"path":["memchr"],"kind":"module"},"16:6208:6088":{"crate_id":16,"path":["gimli","read","aranges","ArangeEntryIter"],"kind":"struct"},"20:63:3102":{"crate_id":20,"path":["quote","ident_fragment","IdentFragment"],"kind":"trait"},"2:11410:5436":{"crate_id":2,"path":["core","slice","iter","RSplitN"],"kind":"struct"},"6:5528:8660":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","sysinfo"],"kind":"struct"},"16:5522:5941":{"crate_id":16,"path":["gimli","read","cfi","CieOrFde"],"kind":"enum"},"2:24234:5524":{"crate_id":2,"path":["core","num","error","ParseIntError"],"kind":"struct"},"1:12120:4922":{"crate_id":1,"path":["std","sync","mpsc","TryIter"],"kind":"struct"},"6:1708:8165":{"crate_id":6,"path":["libc","unix","linux_like","arphdr"],"kind":"struct"},"6:1717:8171":{"crate_id":6,"path":["libc","unix","linux_like","mmsghdr"],"kind":"struct"},"16:4448:7646":{"crate_id":16,"path":["gimli","constants","DwEnd"],"kind":"struct"},"17:13799:7569":{"crate_id":17,"path":["object","pe","ImageAlphaRuntimeFunctionEntry"],"kind":"struct"},"16:6554:6097":{"crate_id":16,"path":["gimli","read","line","FileEntryFormat"],"kind":"struct"},"1:11293:1822":{"crate_id":1,"path":["std","net","ip","fmt","Span"],"kind":"struct"},"2:14129:201":{"crate_id":2,"path":["core","task","ready","Ready"],"kind":"struct"},"6:599:8026":{"crate_id":6,"path":["libc","unix","linger"],"kind":"struct"},"5:1843:6631":{"crate_id":5,"path":["alloc","collections","btree","map","drop","DropGuard"],"kind":"struct"},"1:11430:5001":{"crate_id":1,"path":["std","os","unix","ucred","UCred"],"kind":"struct"},"22:858:1822":{"crate_id":22,"path":["proc_macro2","fallback","Span"],"kind":"struct"},"6:1760:8186":{"crate_id":6,"path":["libc","unix","linux_like","sigevent"],"kind":"struct"},"16:3604:6817":{"crate_id":16,"path":["gimli","arch","X86_64"],"kind":"struct"},"17:11499:6975":{"crate_id":17,"path":["object","elf","SectionHeader32"],"kind":"struct"},"2:49039:5616":{"crate_id":2,"path":["core","slice","ascii","EscapeByte"],"kind":"struct"},"16:5996:1788":{"crate_id":16,"path":["gimli","read","dwarf","Unit"],"kind":"struct"},"6:6028:8743":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stat64"],"kind":"struct"},"1:4084:127":{"crate_id":1,"path":["std","io","error","Error"],"kind":"struct"},"17:4157:6294":{"crate_id":17,"path":["object","read","macho","relocation","MachORelocationIterator"],"kind":"struct"},"18:775:6801":{"crate_id":18,"path":["memchr","memmem","x86","avx","nostd","Forward"],"kind":"struct"},"2:48269:3339":{"crate_id":2,"path":["core","fmt","num","LowerHex"],"kind":"struct"},"2:51394:8973":{"crate_id":2,"path":["core","core_arch","simd","f64x1"],"kind":"struct"},"21:1509:191":{"crate_id":21,"path":["proc_macro","bridge","client","ProcMacro"],"kind":"enum"},"2:2507:4462":{"crate_id":2,"path":["core","ptr","unique","Unique"],"kind":"struct"},"2:6892:5124":{"crate_id":2,"path":["core","iter","adapters","intersperse","IntersperseWith"],"kind":"struct"},"2:48528:67":{"crate_id":2,"path":["core","fmt","rt","v1","Alignment"],"kind":"enum"},"24:5806:3147":{"crate_id":24,"path":["syn","expr","ExprParen"],"kind":"struct"},"0:1257:1624":{"crate_id":0,"path":["serde_derive","Serialize"],"kind":"proc_derive"},"2:3367:3270":{"crate_id":2,"path":["core","ops","arith","AddAssign"],"kind":"trait"},"6:4005:8280":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_id"],"kind":"struct"},"18:611:6406":{"crate_id":18,"path":["memchr","cow","CowBytes"],"kind":"struct"},"24:4698:3423":{"crate_id":24,"path":["syn","token","And"],"kind":"struct"},"1:16012:2988":{"crate_id":1,"path":["std","tuple"],"kind":"primitive"},"1:11475:4745":{"crate_id":1,"path":["std","os","fd","owned","BorrowedFd"],"kind":"struct"},"1:13583:58125":{"crate_id":1,"path":["std","sys","unix","os","Env"],"kind":"struct"},"6:3918:8230":{"crate_id":6,"path":["libc","unix","linux_like","linux","signalfd_siginfo"],"kind":"struct"},"16:5029:7663":{"crate_id":16,"path":["gimli","constants","DwRle"],"kind":"struct"},"5:7780:234":{"crate_id":5,"path":["alloc","vec","Vec"],"kind":"struct"},"2:47542:3249":{"crate_id":2,"path":["core","option","IterMut"],"kind":"struct"},"5:3839:6631":{"crate_id":5,"path":["alloc","collections","linked_list","drop","DropGuard"],"kind":"struct"},"24:176:4117":{"crate_id":24,"path":["syn","token","CustomToken"],"kind":"trait"},"1:12112:3245":{"crate_id":1,"path":["std","sync","mpsc","Iter"],"kind":"struct"},"17:13429:7448":{"crate_id":17,"path":["object","pe","ImageExportDirectory"],"kind":"struct"},"1:11176:4782":{"crate_id":1,"path":["std","net","addr","SocketAddrV4"],"kind":"struct"},"5:1644:4890":{"crate_id":5,"path":["alloc","collections","btree","map","Values"],"kind":"struct"},"12:1256:4902":{"crate_id":12,"path":["hashbrown","map","OccupiedError"],"kind":"struct"},"16:7342:6075":{"crate_id":16,"path":["gimli","read","rnglists","RawRange"],"kind":"struct"},"17:542:5977":{"crate_id":17,"path":["object","read","any","Section"],"kind":"struct"},"2:10241:3336":{"crate_id":2,"path":["core","fmt","Write"],"kind":"trait"},"17:13318:7421":{"crate_id":17,"path":["object","pe","ImageAuxSymbolFunction"],"kind":"struct"},"24:6366:3192":{"crate_id":24,"path":["syn","ty","Variadic"],"kind":"struct"},"11:46:7890":{"crate_id":11,"path":["adler","algo","U32X4"],"kind":"struct"},"2:3379:5159":{"crate_id":2,"path":["core","ops","arith","DivAssign"],"kind":"trait"},"1:16021:2995":{"crate_id":1,"path":["std","i128"],"kind":"primitive"},"17:10814:6280":{"crate_id":17,"path":["object","read","macho","section","MachOSection"],"kind":"struct"},"17:12671:7209":{"crate_id":17,"path":["object","macho","FvmfileCommand"],"kind":"struct"},"24:4211:3418":{"crate_id":24,"path":["syn","token","Use"],"kind":"struct"},"17:10001:48817":{"crate_id":17,"path":["object","read","archive","ArchiveKind"],"kind":"enum"},"1:13782:4878":{"crate_id":1,"path":["std","sys","unix","pipe","AnonPipe"],"kind":"struct"},"2:49402:5542":{"crate_id":2,"path":["core","str","error","Utf8Error"],"kind":"struct"},"24:5409:1831":{"crate_id":24,"path":["syn","attr","Meta","List"],"kind":"foreign_type"},"17:12712:7214":{"crate_id":17,"path":["object","macho","DataInCodeEntry"],"kind":"struct"},"24:5340:3588":{"crate_id":24,"path":["syn","token","Bracket"],"kind":"struct"},"5:923:5699":{"crate_id":5,"path":["alloc","collections","binary_heap","PeekMut"],"kind":"struct"},"2:49286:5443":{"crate_id":2,"path":["core","slice","iter","ChunksExactMut"],"kind":"struct"},"2:46424:5598":{"crate_id":2,"path":["core","char","ToUppercase"],"kind":"struct"},"6:4459:8449":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_alg"],"kind":"struct"},"24:5873:2247":{"crate_id":24,"path":["syn","expr","Index"],"kind":"struct"},"2:50187:5486":{"crate_id":2,"path":["core","str","IsAsciiWhitespace"],"kind":"struct"},"17:12262:7122":{"crate_id":17,"path":["object","macho","DylinkerCommand"],"kind":"struct"},"24:5718:3126":{"crate_id":24,"path":["syn","expr","ExprAsync"],"kind":"struct"},"2:24700:168":{"crate_id":2,"path":["core","num","nonzero","NonZeroI8"],"kind":"struct"},"17:9961:48769":{"crate_id":17,"path":["object","read","any","SectionRelocationIterator"],"kind":"struct"},"24:2391:3247":{"crate_id":24,"path":["syn","punctuated","PrivateIter"],"kind":"struct"},"2:5583:13173":{"crate_id":2,"path":["core","ffi","c_void"],"kind":"enum"},"1:14103:6684":{"crate_id":1,"path":["std","sys","unix","stack_overflow","Handler"],"kind":"struct"},"2:32345:61897":{"crate_id":2,"path":["core","mem","valid_align","ValidAlignEnum16"],"kind":"enum"},"2:51375:5270":{"crate_id":2,"path":["core","core_arch","simd","f32x2"],"kind":"struct"},"2:3181:227":{"crate_id":2,"path":["core","convert","TryFrom"],"kind":"trait"},"2:46977:4256":{"crate_id":2,"path":["core","iter","sources","once","Once"],"kind":"struct"},"24:4819:3431":{"crate_id":24,"path":["syn","token","Colon2"],"kind":"struct"},"1:12243:5020":{"crate_id":1,"path":["std","sync","once","OnceState"],"kind":"struct"},"5:8168:194":{"crate_id":5,"path":["alloc","collections","btree","set","Range"],"kind":"struct"},"24:4831:3432":{"crate_id":24,"path":["syn","token","Comma"],"kind":"struct"},"12:2059:4796":{"crate_id":12,"path":["hashbrown","set","Difference"],"kind":"struct"},"24:3977:206":{"crate_id":24,"path":["syn","token","Return"],"kind":"struct"},"2:50055:5217":{"crate_id":2,"path":["core","str","pattern","TwoWaySearcher"],"kind":"struct"},"24:661:64470":{"crate_id":24,"path":["syn","expr","parsing","Precedence"],"kind":"enum"},"24:2077:64373":{"crate_id":24,"path":["syn","buffer","empty","UnsafeSyncEntry"],"kind":"struct"},"2:5029:2171":{"crate_id":2,"path":["core","cell","RefCell"],"kind":"struct"},"2:52160:5310":{"crate_id":2,"path":["core","core_arch","simd","u64x4"],"kind":"struct"},"24:5834:3153":{"crate_id":24,"path":["syn","expr","ExprTry"],"kind":"struct"},"17:12073:7095":{"crate_id":17,"path":["object","macho","SegmentCommand64"],"kind":"struct"},"2:49248:5439":{"crate_id":2,"path":["core","slice","iter","Windows"],"kind":"struct"},"2:46779:4702":{"crate_id":2,"path":["core","iter","adapters","take","Take"],"kind":"struct"},"2:23136:5266":{"crate_id":2,"path":["core","core_simd","masks","Mask"],"kind":"struct"},"17:11458:6970":{"crate_id":17,"path":["object","elf","FileHeader64"],"kind":"struct"},"2:48007:90":{"crate_id":2,"path":["core","sync","atomic","AtomicU64"],"kind":"struct"},"14:189:9528":{"crate_id":14,"path":["rustc_demangle","Demangle"],"kind":"struct"},"16:3118:6225":{"crate_id":16,"path":["gimli","common","RawRangeListsOffset"],"kind":"struct"},"24:6337:2194":{"crate_id":24,"path":["syn","ty","TypePath"],"kind":"struct"},"9:692:5730":{"crate_id":9,"path":["miniz_oxide","deflate","core","CompressionStrategy"],"kind":"enum"},"16:7804:6051":{"crate_id":16,"path":["gimli","read","unit","EntriesCursor"],"kind":"struct"},"24:6134:1971":{"crate_id":24,"path":["syn","derive","DataUnion"],"kind":"struct"},"17:12507:7177":{"crate_id":17,"path":["object","macho","LinkeditDataCommand"],"kind":"struct"},"1:11336:9258":{"crate_id":1,"path":["std","net","parser","AddrParseError"],"kind":"struct"},"6:1665:8139":{"crate_id":6,"path":["libc","unix","linux_like","ifaddrs"],"kind":"struct"},"17:9133:48761":{"crate_id":17,"path":["object","common","RelocationEncoding"],"kind":"enum"},"2:47611:188":{"crate_id":2,"path":["core","pin","Pin"],"kind":"struct"},"24:6052:3169":{"crate_id":24,"path":["syn","lit","LitByteStr"],"kind":"struct"},"24:2448:3249":{"crate_id":24,"path":["syn","punctuated","IterMut"],"kind":"struct"},"17:11604:6998":{"crate_id":17,"path":["object","elf","Syminfo32"],"kind":"struct"},"1:9471:9537":{"crate_id":1,"path":["std","sys_common","backtrace","_print","DisplayBacktrace"],"kind":"struct"},"2:46609:5122":{"crate_id":2,"path":["core","iter","adapters","copied","Copied"],"kind":"struct"},"2:3336:3269":{"crate_id":2,"path":["core","ops","arith","Add"],"kind":"trait"},"2:50203:121":{"crate_id":2,"path":["core","time","Duration"],"kind":"struct"},"2:3405:4801":{"crate_id":2,"path":["core","ops","bit","BitXor"],"kind":"trait"},"12:2036:3244":{"crate_id":12,"path":["hashbrown","set","IntoIter"],"kind":"struct"},"16:6636:6058":{"crate_id":16,"path":["gimli","read","loclists","RawLocListIter"],"kind":"struct"},"6:5282:8561":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_mmap_hdr"],"kind":"struct"},"21:3111:1747":{"crate_id":21,"path":["proc_macro","Group"],"kind":"struct"},"17:9886:48767":{"crate_id":17,"path":["object","read","any","SymbolIterator"],"kind":"struct"},"21:808:3360":{"crate_id":21,"path":["proc_macro","diagnostic","MultiSpan"],"kind":"trait"},"24:454:64471":{"crate_id":24,"path":["syn","bigint","BigInt"],"kind":"struct"},"2:10251:134":{"crate_id":2,"path":["core","fmt","Formatter"],"kind":"struct"},"2:49733:5471":{"crate_id":2,"path":["core","str","iter","SplitWhitespace"],"kind":"struct"},"2:3174:135":{"crate_id":2,"path":["core","convert","From"],"kind":"trait"},"1:2175:4795":{"crate_id":1,"path":["std","collections","hash","set","Intersection"],"kind":"struct"},"17:12552:7186":{"crate_id":17,"path":["object","macho","EncryptionInfoCommand64"],"kind":"struct"},"5:5833:5620":{"crate_id":5,"path":["alloc","slice","Concat"],"kind":"trait"},"2:49368:5449":{"crate_id":2,"path":["core","slice","iter","RChunksExact"],"kind":"struct"},"16:6999:6104":{"crate_id":16,"path":["gimli","read","op","Piece"],"kind":"struct"},"16:6014:6084":{"crate_id":16,"path":["gimli","read","dwarf","RangeIter"],"kind":"struct"},"17:13348:7432":{"crate_id":17,"path":["object","pe","ImageAuxSymbolWeak"],"kind":"struct"},"22:799:3302":{"crate_id":22,"path":["proc_macro2","parse","Cursor"],"kind":"struct"},"12:559:143":{"crate_id":12,"path":["hashbrown","map","HashMap"],"kind":"struct"},"2:50034:5215":{"crate_id":2,"path":["core","str","pattern","StrSearcherImpl"],"kind":"enum"},"1:9638:6675":{"crate_id":1,"path":["std","sys_common","mutex","StaticMutexGuard"],"kind":"struct"},"17:2512:6320":{"crate_id":17,"path":["object","read","elf","relocation","ElfDynamicRelocationIterator"],"kind":"struct"},"11:54:5850":{"crate_id":11,"path":["adler","Adler32"],"kind":"struct"},"2:53338:5311":{"crate_id":2,"path":["core","core_arch","simd","u64x8"],"kind":"struct"},"6:578:8015":{"crate_id":6,"path":["libc","unix","iovec"],"kind":"struct"},"24:2383:3245":{"crate_id":24,"path":["syn","punctuated","Iter"],"kind":"struct"},"2:3395:4800":{"crate_id":2,"path":["core","ops","bit","BitAnd"],"kind":"trait"},"18:645:6408":{"crate_id":18,"path":["memchr","memmem","prefilter","PrefilterFn"],"kind":"struct"},"2:57696:9050":{"crate_id":2,"path":["core","core_simd","vector","ptr","SimdMutPtr"],"kind":"struct"},"24:6001:3164":{"crate_id":24,"path":["syn","generics","PredicateLifetime"],"kind":"struct"},"17:10599:48969":{"crate_id":17,"path":["object","read","macho","file","MachOComdatIterator"],"kind":"struct"},"17:13564:7489":{"crate_id":17,"path":["object","pe","ImageLoadConfigCodeIntegrity"],"kind":"struct"},"2:10291:109":{"crate_id":2,"path":["core","fmt","Debug"],"kind":"trait"},"24:5743:3132":{"crate_id":24,"path":["syn","expr","ExprCall"],"kind":"struct"},"1:5964:5052":{"crate_id":1,"path":["std","os","unix","net","ancillary","ScmCredentials"],"kind":"struct"},"2:50183:5488":{"crate_id":2,"path":["core","str","IsWhitespace"],"kind":"struct"},"16:3488:6222":{"crate_id":16,"path":["gimli","common","DwoId"],"kind":"struct"},"17:10117:6379":{"crate_id":17,"path":["object","read","coff","section","CoffSectionIterator"],"kind":"struct"},"2:53396:9030":{"crate_id":2,"path":["core","core_arch","x86","__m128i"],"kind":"struct"},"6:537:7986":{"crate_id":6,"path":["libc","unix","rlimit"],"kind":"struct"},"18:755:64241":{"crate_id":18,"path":["memchr","memmem","twoway","SuffixOrdering"],"kind":"enum"},"2:51922:8983":{"crate_id":2,"path":["core","core_arch","simd","m64x2"],"kind":"struct"},"2:53515:9039":{"crate_id":2,"path":["core","core_arch","x86","__m128bh"],"kind":"struct"},"2:23661:4768":{"crate_id":2,"path":["core","core_simd","vector","Simd"],"kind":"struct"},"2:48558:127":{"crate_id":2,"path":["core","fmt","Error"],"kind":"struct"},"17:11304:48773":{"crate_id":17,"path":["object","read","RelocationTarget"],"kind":"enum"},"21:200:4650":{"crate_id":21,"path":["proc_macro","bridge","client","Client"],"kind":"struct"},"1:8414:5642":{"crate_id":1,"path":["std","sync","mpsc","sync","Node"],"kind":"struct"},"24:5133:3452":{"crate_id":24,"path":["syn","token","RArrow"],"kind":"struct"},"17:10673:48972":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandVariant"],"kind":"enum"},"2:9978:5416":{"crate_id":2,"path":["core","fmt","builders","PadAdapterState"],"kind":"struct"},"24:2555:2000":{"crate_id":24,"path":["syn","parse_quote"],"kind":"module"},"21:1358:1822":{"crate_id":21,"path":["proc_macro","bridge","client","Span"],"kind":"struct"},"16:5815:5957":{"crate_id":16,"path":["gimli","read","cfi","RegisterRule"],"kind":"enum"},"18:850:6400":{"crate_id":18,"path":["memchr","memmem","NeedleInfo"],"kind":"struct"},"1:1476:4580":{"crate_id":1,"path":["std","collections","hash","map","Drain"],"kind":"struct"},"17:13163:7386":{"crate_id":17,"path":["object","pe","ImageNtHeaders32"],"kind":"struct"},"17:12442:7169":{"crate_id":17,"path":["object","macho","TwolevelHintsCommand"],"kind":"struct"},"12:1103:4899":{"crate_id":12,"path":["hashbrown","map","Entry"],"kind":"enum"},"24:6369:2192":{"crate_id":24,"path":["syn","ty","ReturnType"],"kind":"enum"},"24:5239:3460":{"crate_id":24,"path":["syn","token","Shr"],"kind":"struct"},"5:7453:6631":{"crate_id":5,"path":["alloc","vec","into_iter","drop","DropGuard"],"kind":"struct"},"2:4050:4761":{"crate_id":2,"path":["core","any","Provider"],"kind":"trait"},"24:5978:1893":{"crate_id":24,"path":["syn","generics","WherePredicate"],"kind":"enum"},"1:16022:2996":{"crate_id":1,"path":["std","u8"],"kind":"primitive"},"16:7378:6046":{"crate_id":16,"path":["gimli","read","str","DebugStr"],"kind":"struct"},"24:3833:2467":{"crate_id":24,"path":["syn","token","Match"],"kind":"struct"},"6:4293:8375":{"crate_id":6,"path":["libc","unix","linux_like","linux","genlmsghdr"],"kind":"struct"},"2:10310:3337":{"crate_id":2,"path":["core","fmt","LowerExp"],"kind":"trait"},"2:46736:5113":{"crate_id":2,"path":["core","iter","adapters","scan","Scan"],"kind":"struct"},"17:11254:6310":{"crate_id":17,"path":["object","read","Export"],"kind":"struct"},"2:5100:3318":{"crate_id":2,"path":["core","cell","BorrowRef"],"kind":"struct"},"12:2072:1795":{"crate_id":12,"path":["hashbrown","set","Union"],"kind":"struct"},"24:3136:9547":{"crate_id":24,"path":["syn","print","TokensOrDefault"],"kind":"struct"},"1:1021:4196":{"crate_id":1,"path":["std","thread","Packet"],"kind":"struct"},"12:379:5867":{"crate_id":12,"path":["hashbrown","raw","RawIter"],"kind":"struct"},"24:6362:3178":{"crate_id":24,"path":["syn","ty","BareFnArg"],"kind":"struct"},"2:13781:150":{"crate_id":2,"path":["core","future","into_future","IntoFuture"],"kind":"trait"},"17:12221:7115":{"crate_id":17,"path":["object","macho","SubUmbrellaCommand"],"kind":"struct"},"21:478:4622":{"crate_id":21,"path":["proc_macro","bridge","rpc","PanicMessage"],"kind":"enum"},"23:0:3084":{"crate_id":23,"path":["unicode_ident"],"kind":"module"},"17:10179:6896":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbol"],"kind":"struct"},"1:3662:6658":{"crate_id":1,"path":["std","io","buffered","bufwriter","flush_buf","BufGuard"],"kind":"struct"},"24:5326:2461":{"crate_id":24,"path":["syn","token","Brace"],"kind":"struct"},"5:3329:3245":{"crate_id":5,"path":["alloc","collections","btree","set","Iter"],"kind":"struct"},"24:3599:3396":{"crate_id":24,"path":["syn","token","Dyn"],"kind":"struct"},"2:24010:8865":{"crate_id":2,"path":["core","num","dec2flt","common","AsciiStr"],"kind":"struct"},"17:11026:48770":{"crate_id":17,"path":["object","read","traits","NoDynamicRelocationIterator"],"kind":"struct"},"16:6176:6087":{"crate_id":16,"path":["gimli","read","aranges","ArangeHeader"],"kind":"struct"},"24:5787:3142":{"crate_id":24,"path":["syn","expr","ExprLit"],"kind":"struct"},"1:2159:3245":{"crate_id":1,"path":["std","collections","hash","set","Iter"],"kind":"struct"},"20:193:3708":{"crate_id":20,"path":["quote","__private","ThereIsNoIteratorInRepetition"],"kind":"struct"},"16:2816:6228":{"crate_id":16,"path":["gimli","common","DebugAbbrevOffset"],"kind":"struct"},"16:5295:47180":{"crate_id":16,"path":["gimli","endianity","RunTimeEndian"],"kind":"enum"},"1:11405:5050":{"crate_id":1,"path":["std","os","unix","net","ancillary","SocketCred"],"kind":"struct"},"24:5399:3113":{"crate_id":24,"path":["syn","attr","AttrStyle"],"kind":"enum"},"18:136:55083":{"crate_id":18,"path":["memchr","memchr","iter","Memchr"],"kind":"struct"},"5:1457:4901":{"crate_id":5,"path":["alloc","collections","btree","map","entry","VacantEntry"],"kind":"struct"},"1:15186:4808":{"crate_id":1,"path":["std","sys_common","wtf8","CodePoint"],"kind":"struct"},"21:3076:3354":{"crate_id":21,"path":["proc_macro","LineColumn"],"kind":"struct"},"6:4377:8416":{"crate_id":6,"path":["libc","unix","linux_like","linux","j1939_filter"],"kind":"struct"},"5:5315:200":{"crate_id":5,"path":["alloc","rc","Rc"],"kind":"struct"},"22:1047:2152":{"crate_id":22,"path":["proc_macro2","Punct"],"kind":"struct"},"9:996:5796":{"crate_id":9,"path":["miniz_oxide","MZStatus"],"kind":"enum"},"18:651:6405":{"crate_id":18,"path":["memchr","memmem","prefilter","Prefilter"],"kind":"enum"},"6:161:41601":{"crate_id":6,"path":["libc","unix","fpos_t"],"kind":"enum"},"16:6577:6098":{"crate_id":16,"path":["gimli","read","loclists","DebugLoc"],"kind":"struct"},"2:22990:5266":{"crate_id":2,"path":["core","core_simd","masks","mask_impl","Mask"],"kind":"struct"},"2:48800:9246":{"crate_id":2,"path":["core","hash","sip","SipHasher24"],"kind":"struct"},"5:3040:8861":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Immut"],"kind":"struct"},"17:13154:7382":{"crate_id":17,"path":["object","pe","ImageNtHeaders64"],"kind":"struct"},"2:24802:167":{"crate_id":2,"path":["core","num","nonzero","NonZeroI64"],"kind":"struct"},"17:11159:6946":{"crate_id":17,"path":["object","read","SymbolMapName"],"kind":"struct"},"6:1547:8058":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr"],"kind":"struct"},"14:231:2284":{"crate_id":14,"path":["rustc_demangle","v0","ParseError"],"kind":"enum"},"6:6068:8746":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statvfs64"],"kind":"struct"},"6:1700:8164":{"crate_id":6,"path":["libc","unix","linux_like","arpreq_old"],"kind":"struct"},"1:11453:8725":{"crate_id":1,"path":["std","os","linux","raw","arch","stat"],"kind":"struct"},"1:16018:2992":{"crate_id":1,"path":["std","i16"],"kind":"primitive"},"17:11539:6986":{"crate_id":17,"path":["object","elf","CompressionHeader32"],"kind":"struct"},"5:7824:6644":{"crate_id":5,"path":["alloc","vec","retain_mut","BackshiftOnDrop"],"kind":"struct"},"17:9528:2733":{"crate_id":17,"path":["object","read","util","Bytes"],"kind":"struct"},"2:46296:5349":{"crate_id":2,"path":["core","char","convert","ParseCharError"],"kind":"struct"},"6:5428:8638":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ptrace_syscall_info"],"kind":"struct"},"2:53377:5276":{"crate_id":2,"path":["core","core_arch","simd","f64x8"],"kind":"struct"},"2:46748:5114":{"crate_id":2,"path":["core","iter","adapters","skip","Skip"],"kind":"struct"},"2:52369:5287":{"crate_id":2,"path":["core","core_arch","simd","i32x8"],"kind":"struct"},"1:11073:4728":{"crate_id":1,"path":["std","io","util","Sink"],"kind":"struct"},"2:48513:70":{"crate_id":2,"path":["core","fmt","rt","v1","Argument"],"kind":"struct"},"2:3774:3326":{"crate_id":2,"path":["core","ops","unsize","CoerceUnsized"],"kind":"trait"},"6:6214:8825":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","seccomp_notif_sizes"],"kind":"struct"},"21:1730:1839":{"crate_id":21,"path":["proc_macro","bridge","symbol","Symbol"],"kind":"struct"},"2:8882:5163":{"crate_id":2,"path":["core","iter","traits","marker","TrustedLen"],"kind":"trait"},"17:11082:6290":{"crate_id":17,"path":["object","read","SectionIndex"],"kind":"struct"},"17:12142:7104":{"crate_id":17,"path":["object","macho","Fvmlib"],"kind":"struct"},"24:6424:2191":{"crate_id":24,"path":["syn","path","QSelf"],"kind":"struct"},"2:2282:5179":{"crate_id":2,"path":["core","ptr","metadata","PtrComponents"],"kind":"struct"},"24:5929:3162":{"crate_id":24,"path":["syn","generics","ConstParam"],"kind":"struct"},"1:4516:4719":{"crate_id":1,"path":["std","io","stdio","StderrLock"],"kind":"struct"},"24:5706:3123":{"crate_id":24,"path":["syn","expr","ExprArray"],"kind":"struct"},"2:37624:178":{"crate_id":2,"path":["core","cmp","Ordering"],"kind":"enum"},"1:7681:4869":{"crate_id":1,"path":["std","process","Command"],"kind":"struct"},"24:5798:3145":{"crate_id":24,"path":["syn","expr","ExprMatch"],"kind":"struct"},"21:107:4621":{"crate_id":21,"path":["proc_macro","bridge","buffer","Buffer"],"kind":"struct"},"2:49435:5457":{"crate_id":2,"path":["core","str","iter","CharIndices"],"kind":"struct"},"1:2163:3244":{"crate_id":1,"path":["std","collections","hash","set","IntoIter"],"kind":"struct"},"22:1103:3244":{"crate_id":22,"path":["proc_macro2","token_stream","IntoIter"],"kind":"struct"},"2:53189:5308":{"crate_id":2,"path":["core","core_arch","simd","u32x16"],"kind":"struct"},"6:3990:8274":{"crate_id":6,"path":["libc","unix","linux_like","linux","sembuf"],"kind":"struct"},"17:13620:7501":{"crate_id":17,"path":["object","pe","ImagePrologueDynamicRelocationHeader"],"kind":"struct"},"1:5723:4659":{"crate_id":1,"path":["std","os","unix","fs","FileExt"],"kind":"trait"},"5:8138:5702":{"crate_id":5,"path":["alloc","collections","binary_heap","DrainSorted"],"kind":"struct"},"16:3772:7638":{"crate_id":16,"path":["gimli","constants","DwCfa"],"kind":"struct"},"16:6252:6090":{"crate_id":16,"path":["gimli","read","line","LineRows"],"kind":"struct"},"17:13221:7401":{"crate_id":17,"path":["object","pe","AnonObjectHeaderBigobj"],"kind":"struct"},"1:8643:5006":{"crate_id":1,"path":["std","sync","barrier","Barrier"],"kind":"struct"},"6:4272:8363":{"crate_id":6,"path":["libc","unix","linux_like","linux","posix_spawn_file_actions_t"],"kind":"struct"},"2:52586:5296":{"crate_id":2,"path":["core","core_arch","simd","i8x64"],"kind":"struct"},"24:6420:3193":{"crate_id":24,"path":["syn","path","ParenthesizedGenericArguments"],"kind":"struct"},"3:0:430":{"crate_id":3,"path":["compiler_builtins"],"kind":"module"},"2:45873:194":{"crate_id":2,"path":["core","ops","range","Range"],"kind":"struct"},"24:5280:3463":{"crate_id":24,"path":["syn","token","Sub"],"kind":"struct"},"2:12845:5429":{"crate_id":2,"path":["core","str","iter","SplitInclusive"],"kind":"struct"},"17:13465:7462":{"crate_id":17,"path":["object","pe","ImageTlsDirectory32"],"kind":"struct"},"17:13506:7471":{"crate_id":17,"path":["object","pe","ImageDelayloadDescriptor"],"kind":"struct"},"24:5470:1775":{"crate_id":24,"path":["syn","data","Field"],"kind":"struct"},"2:23134:5269":{"crate_id":2,"path":["core","core_simd","masks","MaskElement"],"kind":"trait"},"24:4139:3415":{"crate_id":24,"path":["syn","token","Typeof"],"kind":"struct"},"18:745:64240":{"crate_id":18,"path":["memchr","memmem","twoway","SuffixKind"],"kind":"enum"},"2:46309:5350":{"crate_id":2,"path":["core","char","convert","CharErrorKind"],"kind":"enum"},"24:3089:3297":{"crate_id":24,"path":["syn","parse","Parser"],"kind":"trait"},"1:2938:180":{"crate_id":1,"path":["std","ffi","os_str","OsString"],"kind":"struct"},"5:8121:5701":{"crate_id":5,"path":["alloc","collections","binary_heap","IntoIterSorted"],"kind":"struct"},"24:3581:3395":{"crate_id":24,"path":["syn","token","Do"],"kind":"struct"},"9:234:5755":{"crate_id":9,"path":["miniz_oxide","deflate","core","HuffmanOxide"],"kind":"struct"},"9:776:5777":{"crate_id":9,"path":["miniz_oxide","deflate","CompressionLevel"],"kind":"enum"},"22:1053:1821":{"crate_id":22,"path":["proc_macro2","Spacing"],"kind":"enum"},"5:792:108":{"crate_id":5,"path":["alloc","borrow","Cow"],"kind":"enum"},"1:12079:9116":{"crate_id":1,"path":["std","sync","mpsc","cache_aligned","CacheAligned"],"kind":"struct"},"24:2870:6427":{"crate_id":24,"path":["syn","lookahead","TokenMarker"],"kind":"enum"},"6:4306:8379":{"crate_id":6,"path":["libc","unix","linux_like","linux","arpd_request"],"kind":"struct"},"2:10529:142":{"crate_id":2,"path":["core","hash","Hash"],"kind":"trait"},"24:6050:1962":{"crate_id":24,"path":["syn","lit","LitStr"],"kind":"struct"},"17:12645:7207":{"crate_id":17,"path":["object","macho","SymsegCommand"],"kind":"struct"},"17:10420:6318":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdat"],"kind":"struct"},"2:24166:40979":{"crate_id":2,"path":["core","num","flt2dec","Sign"],"kind":"enum"},"1:12199:4929":{"crate_id":1,"path":["std","sync","mpsc","TrySendError"],"kind":"enum"},"16:3091:6272":{"crate_id":16,"path":["gimli","common","DebugMacroOffset"],"kind":"struct"},"2:4727:5183":{"crate_id":2,"path":["core","asserting","TryCaptureWithoutDebug"],"kind":"struct"},"2:22578:61726":{"crate_id":2,"path":["core","core_simd","swizzle","interleave","Lo"],"kind":"struct"},"2:50225:4826":{"crate_id":2,"path":["core","time","FromFloatSecsError"],"kind":"struct"},"1:2166:4580":{"crate_id":1,"path":["std","collections","hash","set","Drain"],"kind":"struct"},"17:11932:7063":{"crate_id":17,"path":["object","macho","DyldCacheMappingInfo"],"kind":"struct"},"1:11246:4787":{"crate_id":1,"path":["std","net","ip","Ipv6Addr"],"kind":"struct"},"6:4120:8335":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_ff_erase"],"kind":"struct"},"1:11126:4702":{"crate_id":1,"path":["std","io","Take"],"kind":"struct"},"17:9799:48766":{"crate_id":17,"path":["object","read","any","ComdatSectionIterator"],"kind":"struct"},"2:46340:5600":{"crate_id":2,"path":["core","char","decode","DecodeUtf16"],"kind":"struct"},"6:4517:8472":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_can_addr"],"kind":"union"},"17:10623:48971":{"crate_id":17,"path":["object","read","macho","file","MachOComdatSectionIterator"],"kind":"struct"},"1:3198:4941":{"crate_id":1,"path":["std","fs","DirEntry"],"kind":"struct"},"2:52435:5272":{"crate_id":2,"path":["core","core_arch","simd","f32x8"],"kind":"struct"},"6:4033:8292":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_mask"],"kind":"struct"},"24:4964:3440":{"crate_id":24,"path":["syn","token","EqEq"],"kind":"struct"},"1:15033:4873":{"crate_id":1,"path":["std","sys","unix","process","process_inner","ExitStatusError"],"kind":"struct"},"6:5255:8554":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","mallinfo2"],"kind":"struct"},"5:3048:58117":{"crate_id":5,"path":["alloc","collections","btree","node","marker","ValMut"],"kind":"struct"},"24:6089:2142":{"crate_id":24,"path":["syn","mac","Macro"],"kind":"struct"},"6:531:7984":{"crate_id":6,"path":["libc","unix","timespec"],"kind":"struct"},"17:11947:7067":{"crate_id":17,"path":["object","macho","DyldCacheImageInfo"],"kind":"struct"},"16:3365:5966":{"crate_id":16,"path":["gimli","common","EhFrameOffset"],"kind":"struct"},"2:49477:5432":{"crate_id":2,"path":["core","str","iter","RSplit"],"kind":"struct"},"1:13564:14164":{"crate_id":1,"path":["std","sys","unix","os","SplitPaths"],"kind":"struct"},"1:8197:6660":{"crate_id":1,"path":["std","sync","mpsc","spsc_queue","Queue"],"kind":"struct"},"6:670:41930":{"crate_id":6,"path":["libc","unix","linux_like","timezone"],"kind":"enum"},"18:678:142":{"crate_id":18,"path":["memchr","memmem","rabinkarp","Hash"],"kind":"struct"},"2:3346:5147":{"crate_id":2,"path":["core","ops","arith","Mul"],"kind":"trait"},"5:3336:4796":{"crate_id":5,"path":["alloc","collections","btree","set","Difference"],"kind":"struct"},"1:7619:4865":{"crate_id":1,"path":["std","process","Child"],"kind":"struct"},"24:5227:3459":{"crate_id":24,"path":["syn","token","ShlEq"],"kind":"struct"},"2:8179:3311":{"crate_id":2,"path":["core","iter","sources","once","once"],"kind":"function"},"2:46986:9243":{"crate_id":2,"path":["core","iter","sources","once_with","OnceWith"],"kind":"struct"},"6:6852:8842":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_mutexattr_t"],"kind":"struct"},"2:12771:5463":{"crate_id":2,"path":["core","str","iter","SplitNInternal"],"kind":"struct"},"24:3473:1805":{"crate_id":24,"path":["syn","token","Box"],"kind":"struct"},"17:11970:7074":{"crate_id":17,"path":["object","macho","FatArch32"],"kind":"struct"},"1:14822:4874":{"crate_id":1,"path":["std","sys","unix","process","process_common","ExitCode"],"kind":"struct"},"6:4227:8354":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Shdr"],"kind":"struct"},"12:2404:64192":{"crate_id":12,"path":["hashbrown","raw","Fallibility"],"kind":"enum"},"1:1045:4198":{"crate_id":1,"path":["std","thread","JoinHandle"],"kind":"struct"},"16:5407:5932":{"crate_id":16,"path":["gimli","read","cfi","ParsedEhFrameHdr"],"kind":"struct"},"21:2846:1823":{"crate_id":21,"path":["proc_macro","bridge","TokenTree"],"kind":"enum"},"21:3096:1823":{"crate_id":21,"path":["proc_macro","TokenTree"],"kind":"enum"},"17:11337:6356":{"crate_id":17,"path":["object","read","CompressionFormat"],"kind":"enum"},"17:12327:7131":{"crate_id":17,"path":["object","macho","SymtabCommand"],"kind":"struct"},"12:472:64195":{"crate_id":12,"path":["hashbrown","raw","RawIterHashInner"],"kind":"struct"},"1:2170:4578":{"crate_id":1,"path":["std","collections","hash","set","DrainFilter"],"kind":"struct"},"2:47593:3680":{"crate_id":2,"path":["core","panic","panic_info","PanicInfo"],"kind":"struct"},"2:23767:4677":{"crate_id":2,"path":["core","core_simd","vector","sealed","Sealed"],"kind":"trait"},"2:46049:2540":{"crate_id":2,"path":["core","any","tags","Value"],"kind":"struct"},"17:13296:7417":{"crate_id":17,"path":["object","pe","ImageSymbolExBytes"],"kind":"struct"},"2:5407:5592":{"crate_id":2,"path":["core","char","REPLACEMENT_CHARACTER"],"kind":"constant"},"2:5110:3319":{"crate_id":2,"path":["core","cell","Ref"],"kind":"struct"},"1:12183:4928":{"crate_id":1,"path":["std","sync","mpsc","RecvTimeoutError"],"kind":"enum"},"16:4230:7641":{"crate_id":16,"path":["gimli","constants","DwAt"],"kind":"struct"},"24:3779:3404":{"crate_id":24,"path":["syn","token","Let"],"kind":"struct"},"16:5561:5943":{"crate_id":16,"path":["gimli","read","cfi","Augmentation"],"kind":"struct"},"24:4686:3422":{"crate_id":24,"path":["syn","token","AddEq"],"kind":"struct"},"1:7653:4867":{"crate_id":1,"path":["std","process","ChildStdout"],"kind":"struct"},"16:5314:6882":{"crate_id":16,"path":["gimli","endianity","LittleEndian"],"kind":"struct"},"2:52129:5307":{"crate_id":2,"path":["core","core_arch","simd","u32x8"],"kind":"struct"},"2:45965:199":{"crate_id":2,"path":["core","ops","range","RangeToInclusive"],"kind":"struct"},"1:14953:6686":{"crate_id":1,"path":["std","sys","unix","process","process_inner","posix_spawn","PosixSpawnFileActions"],"kind":"struct"},"2:48276:3340":{"crate_id":2,"path":["core","fmt","num","UpperHex"],"kind":"struct"},"17:11779:7035":{"crate_id":17,"path":["object","elf","Verneed"],"kind":"struct"},"5:7642:4585":{"crate_id":5,"path":["alloc","vec","in_place_drop","InPlaceDrop"],"kind":"struct"},"2:23125:4677":{"crate_id":2,"path":["core","core_simd","masks","sealed","Sealed"],"kind":"trait"},"16:6238:6044":{"crate_id":16,"path":["gimli","read","line","DebugLine"],"kind":"struct"},"2:53530:9040":{"crate_id":2,"path":["core","core_arch","x86","__m256bh"],"kind":"struct"},"2:22927:4677":{"crate_id":2,"path":["core","core_simd","lane_count","sealed","Sealed"],"kind":"trait"},"17:11640:7005":{"crate_id":17,"path":["object","elf","Rela32"],"kind":"struct"},"24:658:6778":{"crate_id":24,"path":["syn","expr","parsing","AllowStruct"],"kind":"struct"},"17:10489:6360":{"crate_id":17,"path":["object","read","elf","version","VerdefIterator"],"kind":"struct"},"12:843:4889":{"crate_id":12,"path":["hashbrown","map","Keys"],"kind":"struct"},"17:12051:7086":{"crate_id":17,"path":["object","macho","SegmentCommand32"],"kind":"struct"},"17:11847:7055":{"crate_id":17,"path":["object","elf","GnuHashHeader"],"kind":"struct"},"2:49266:5441":{"crate_id":2,"path":["core","slice","iter","ChunksMut"],"kind":"struct"},"5:69:4469":{"crate_id":5,"path":["alloc","raw_vec","RawVec"],"kind":"struct"},"16:5384:5931":{"crate_id":16,"path":["gimli","read","cfi","EhFrameHdr"],"kind":"struct"},"2:46558:14779":{"crate_id":2,"path":["core","ffi","VaList"],"kind":"struct"},"1:10862:4961":{"crate_id":1,"path":["std","io","buffered","linewritershim","LineWriterShim"],"kind":"struct"},"1:12019:4872":{"crate_id":1,"path":["std","process","ExitStatus"],"kind":"struct"},"2:3296:4050":{"crate_id":2,"path":["core","marker","Freeze"],"kind":"trait"},"17:11378:6284":{"crate_id":17,"path":["object","read","CompressedData"],"kind":"struct"},"1:11571:4841":{"crate_id":1,"path":["std","path","State"],"kind":"enum"},"24:2280:3241":{"crate_id":24,"path":["syn","punctuated","Pairs"],"kind":"struct"},"1:11094:4698":{"crate_id":1,"path":["std","io","SeekFrom"],"kind":"enum"},"18:621:9160":{"crate_id":18,"path":["memchr","cow","Imp"],"kind":"struct"},"2:46628:5104":{"crate_id":2,"path":["core","iter","adapters","enumerate","Enumerate"],"kind":"struct"},"16:6718:6246":{"crate_id":16,"path":["gimli","read","lookup","DebugLookup"],"kind":"struct"},"2:3518:130":{"crate_id":2,"path":["core","ops","function","Fn"],"kind":"trait"},"24:2366:3244":{"crate_id":24,"path":["syn","punctuated","IntoIter"],"kind":"struct"},"17:11555:6990":{"crate_id":17,"path":["object","elf","CompressionHeader64"],"kind":"struct"},"2:14068:4463":{"crate_id":2,"path":["core","task","wake","Context"],"kind":"struct"},"24:6359:3177":{"crate_id":24,"path":["syn","ty","Abi"],"kind":"struct"},"1:8136:4196":{"crate_id":1,"path":["std","sync","mpsc","shared","Packet"],"kind":"struct"},"24:6416:2139":{"crate_id":24,"path":["syn","path","Constraint"],"kind":"struct"},"17:13192:7393":{"crate_id":17,"path":["object","pe","AnonObjectHeader"],"kind":"struct"},"2:51718:5271":{"crate_id":2,"path":["core","core_arch","simd","f32x4"],"kind":"struct"},"2:51073:5312":{"crate_id":2,"path":["core","core_arch","simd","u8x4"],"kind":"struct"},"24:5174:3455":{"crate_id":24,"path":["syn","token","RemEq"],"kind":"struct"},"17:13760:7558":{"crate_id":17,"path":["object","pe","ImageHotPatchHashes"],"kind":"struct"},"2:51313:5281":{"crate_id":2,"path":["core","core_arch","simd","i16x4"],"kind":"struct"},"16:2968:6212":{"crate_id":16,"path":["gimli","common","DebugLineStrOffset"],"kind":"struct"},"24:161:4124":{"crate_id":24,"path":["syn","token","private","WithSpan"],"kind":"struct"},"1:15392:4981":{"crate_id":1,"path":["std","sys_common","net","TcpListener"],"kind":"struct"},"18:867:6402":{"crate_id":18,"path":["memchr","memmem","SearcherKind"],"kind":"enum"},"1:8694:5009":{"crate_id":1,"path":["std","sync","condvar","Condvar"],"kind":"struct"},"2:46325:5352":{"crate_id":2,"path":["core","char","convert","CharTryFromError"],"kind":"struct"},"2:24247:5523":{"crate_id":2,"path":["core","num","error","IntErrorKind"],"kind":"enum"},"12:979:4898":{"crate_id":12,"path":["hashbrown","map","RawEntryBuilder"],"kind":"struct"},"6:4325:8389":{"crate_id":6,"path":["libc","unix","linux_like","linux","fanotify_response"],"kind":"struct"},"24:2069:3302":{"crate_id":24,"path":["syn","buffer","Cursor"],"kind":"struct"},"16:4790:7656":{"crate_id":16,"path":["gimli","constants","DwDsc"],"kind":"struct"},"2:9767:86":{"crate_id":2,"path":["core","sync","atomic","AtomicPtr"],"kind":"struct"},"1:5377:4980":{"crate_id":1,"path":["std","net","tcp","TcpStream"],"kind":"struct"},"6:4255:5000":{"crate_id":6,"path":["libc","unix","linux_like","linux","ucred"],"kind":"struct"},"5:6257:4584":{"crate_id":5,"path":["alloc","string","retain","SetLenOnDrop"],"kind":"struct"},"5:6764:4686":{"crate_id":5,"path":["alloc","sync","from_iter_exact","Guard"],"kind":"struct"},"6:0:798":{"crate_id":6,"path":["libc"],"kind":"module"},"17:11406:6952":{"crate_id":17,"path":["object","archive","Header"],"kind":"struct"},"5:0:277":{"crate_id":5,"path":["alloc"],"kind":"module"},"12:1881:145":{"crate_id":12,"path":["hashbrown","set","HashSet"],"kind":"struct"},"6:4101:8326":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_effect"],"kind":"struct"},"16:3338:5965":{"crate_id":16,"path":["gimli","common","DebugFrameOffset"],"kind":"struct"},"2:51208:5301":{"crate_id":2,"path":["core","core_arch","simd","u16x4"],"kind":"struct"},"17:4008:48945":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbolIterator"],"kind":"struct"},"2:49983:5213":{"crate_id":2,"path":["core","str","pattern","CharPredicateSearcher"],"kind":"struct"},"2:50195:5481":{"crate_id":2,"path":["core","str","BytesIsNotEmpty"],"kind":"struct"},"22:953:1758":{"crate_id":22,"path":["proc_macro2","imp","Ident"],"kind":"enum"},"1:12248:4912":{"crate_id":1,"path":["std","sync","rwlock","RwLockReadGuard"],"kind":"struct"},"1:1161:13170":{"crate_id":1,"path":["std","backtrace","BytesOrWide"],"kind":"enum"},"17:8849:6308":{"crate_id":17,"path":["object","common","Architecture"],"kind":"enum"},"12:1666:5872":{"crate_id":12,"path":["hashbrown","rustc_entry","RustcEntry"],"kind":"enum"},"2:3733:137":{"crate_id":2,"path":["core","ops","try_trait","FromResidual"],"kind":"trait"},"5:1441:4899":{"crate_id":5,"path":["alloc","collections","btree","map","entry","Entry"],"kind":"enum"},"1:6703:8740":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt","st_ctime"],"kind":"foreign_type"},"2:2193:4275":{"crate_id":2,"path":["core","mem","Discriminant"],"kind":"struct"},"6:4431:8437":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_nl"],"kind":"struct"},"1:11654:4844":{"crate_id":1,"path":["std","path","Components"],"kind":"struct"},"6:3881:8202":{"crate_id":6,"path":["libc","unix","linux_like","linux","passwd"],"kind":"struct"},"2:47688:178":{"crate_id":2,"path":["core","sync","atomic","Ordering"],"kind":"enum"},"22:1008:1823":{"crate_id":22,"path":["proc_macro2","TokenTree"],"kind":"enum"},"16:2945:6234":{"crate_id":16,"path":["gimli","common","DebugLineOffset"],"kind":"struct"},"17:13810:7570":{"crate_id":17,"path":["object","pe","ImageRuntimeFunctionEntry"],"kind":"struct"},"6:6923:8857":{"crate_id":6,"path":["libc","unix","linux_like","linux","non_exhaustive","open_how"],"kind":"struct"},"1:10701:1914":{"crate_id":1,"path":["std","error","private","Internal"],"kind":"struct"},"21:2797:2468":{"crate_id":21,"path":["proc_macro","bridge","Literal"],"kind":"struct"},"2:47559:3679":{"crate_id":2,"path":["core","panic","location","Location"],"kind":"struct"},"2:50359:190":{"crate_id":2,"path":["core","task","poll","Poll"],"kind":"enum"},"6:4040:8295":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_replay"],"kind":"struct"},"17:294:64228":{"crate_id":17,"path":["object","read","util","DebugByte"],"kind":"struct"},"6:4013:8283":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_absinfo"],"kind":"struct"},"16:4641:7651":{"crate_id":16,"path":["gimli","constants","DwAddr"],"kind":"struct"},"2:9260:3681":{"crate_id":2,"path":["core","panic","unwind_safe","AssertUnwindSafe"],"kind":"struct"},"1:10948:4885":{"crate_id":1,"path":["std","io","error","SimpleMessage"],"kind":"struct"},"16:2866:6210":{"crate_id":16,"path":["gimli","common","DebugAddrIndex"],"kind":"struct"},"16:6152:6041":{"crate_id":16,"path":["gimli","read","aranges","DebugAranges"],"kind":"struct"},"16:7042:6258":{"crate_id":16,"path":["gimli","read","op","EvaluationWaiting"],"kind":"enum"},"21:165:4644":{"crate_id":21,"path":["proc_macro","bridge","client","Bridge"],"kind":"struct"},"1:14809:4744":{"crate_id":1,"path":["std","sys","unix","os_str","Buf"],"kind":"struct"},"17:0:2962":{"crate_id":17,"path":["object"],"kind":"module"},"21:2746:1758":{"crate_id":21,"path":["proc_macro","bridge","Ident"],"kind":"struct"},"16:7119:5975":{"crate_id":16,"path":["gimli","read","op","Expression"],"kind":"struct"},"17:13386:7440":{"crate_id":17,"path":["object","pe","ImageLinenumber"],"kind":"struct"},"16:3506:6221":{"crate_id":16,"path":["gimli","common","DwarfFileType"],"kind":"enum"},"21:2720:2152":{"crate_id":21,"path":["proc_macro","bridge","Punct"],"kind":"struct"},"16:3429:5970":{"crate_id":16,"path":["gimli","common","SectionId"],"kind":"enum"},"2:11113:3245":{"crate_id":2,"path":["core","slice","iter","Iter"],"kind":"struct"},"6:4300:8376":{"crate_id":6,"path":["libc","unix","linux_like","linux","in6_pktinfo"],"kind":"struct"},"17:10477:6358":{"crate_id":17,"path":["object","read","elf","hash","GnuHashTable"],"kind":"struct"},"2:9259:3682":{"crate_id":2,"path":["core","panic","unwind_safe","RefUnwindSafe"],"kind":"trait"},"18:783:6801":{"crate_id":18,"path":["memchr","memmem","x86","sse","Forward"],"kind":"struct"},"24:3959:3319":{"crate_id":24,"path":["syn","token","Ref"],"kind":"struct"},"5:3894:5643":{"crate_id":5,"path":["alloc","collections","linked_list","CursorMut"],"kind":"struct"},"17:10081:6334":{"crate_id":17,"path":["object","read","coff","section","SectionTable"],"kind":"struct"},"16:6644:6100":{"crate_id":16,"path":["gimli","read","loclists","RawLocListEntry"],"kind":"enum"},"17:12456:7171":{"crate_id":17,"path":["object","macho","TwolevelHint"],"kind":"struct"},"24:2975:1828":{"crate_id":24,"path":["syn","parse","Parse"],"kind":"trait"},"16:4890:7659":{"crate_id":16,"path":["gimli","constants","DwLns"],"kind":"struct"},"2:50171:5483":{"crate_id":2,"path":["core","str","CharEscapeDebugContinue"],"kind":"struct"},"2:11424:5437":{"crate_id":2,"path":["core","slice","iter","SplitNMut"],"kind":"struct"},"1:699:4211":{"crate_id":1,"path":["std","thread","local","LocalKey"],"kind":"struct"},"2:10539:146":{"crate_id":2,"path":["core","hash","Hasher"],"kind":"trait"},"6:6881:8849":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_cond_t"],"kind":"struct"},"6:605:8029":{"crate_id":6,"path":["libc","unix","sigval"],"kind":"struct"},"16:7549:6050":{"crate_id":16,"path":["gimli","read","unit","DebuggingInformationEntry"],"kind":"struct"},"2:48839:9247":{"crate_id":2,"path":["core","hash","sip","Sip13Rounds"],"kind":"struct"},"6:5522:8659":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","sigset_t"],"kind":"struct"},"2:51543:5309":{"crate_id":2,"path":["core","core_arch","simd","u64x2"],"kind":"struct"},"24:6110:1763":{"crate_id":24,"path":["syn","derive","Data"],"kind":"enum"},"21:3116:3261":{"crate_id":21,"path":["proc_macro","Delimiter"],"kind":"enum"},"2:3491:116":{"crate_id":2,"path":["core","ops","deref","Deref"],"kind":"trait"},"22:880:2468":{"crate_id":22,"path":["proc_macro2","fallback","Literal"],"kind":"struct"},"15:230:5881":{"crate_id":15,"path":["addr2line","LocationRangeIter"],"kind":"struct"},"2:53451:9035":{"crate_id":2,"path":["core","core_arch","x86","__m256d"],"kind":"struct"},"16:2733:5968":{"crate_id":16,"path":["gimli","common","Format"],"kind":"enum"},"17:10106:6378":{"crate_id":17,"path":["object","read","coff","section","CoffSegment"],"kind":"struct"},"24:4877:3435":{"crate_id":24,"path":["syn","token","Dollar"],"kind":"struct"},"21:344:64283":{"crate_id":21,"path":["proc_macro","bridge","handle","OwnedStore"],"kind":"struct"},"22:24:9274":{"crate_id":22,"path":["proc_macro2","marker","ProcMacroAutoTraits"],"kind":"struct"},"6:6887:8850":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_mutex_t"],"kind":"struct"},"2:24870:5510":{"crate_id":2,"path":["core","num","nonzero","NonZeroIsize"],"kind":"struct"},"2:46388:3347":{"crate_id":2,"path":["core","char","EscapeDefault"],"kind":"struct"},"24:4013:3413":{"crate_id":24,"path":["syn","token","SelfValue"],"kind":"struct"},"5:6954:5624":{"crate_id":5,"path":["alloc","task","Wake"],"kind":"trait"},"16:7024:6257":{"crate_id":16,"path":["gimli","read","op","EvaluationState"],"kind":"enum"},"16:3264:6219":{"crate_id":16,"path":["gimli","common","DebugStrOffsetsIndex"],"kind":"struct"},"0:1258:1632":{"crate_id":0,"path":["serde_derive","Deserialize"],"kind":"proc_derive"},"18:858:6401":{"crate_id":18,"path":["memchr","memmem","SearcherConfig"],"kind":"struct"},"17:2543:6357":{"crate_id":17,"path":["object","read","elf","relocation","ElfSectionRelocationIterator"],"kind":"struct"},"2:13816:61790":{"crate_id":2,"path":["core","future","join","MaybeDone"],"kind":"enum"},"6:1572:8072":{"crate_id":6,"path":["libc","unix","linux_like","addrinfo"],"kind":"struct"},"17:8929:48756":{"crate_id":17,"path":["object","common","BinaryFormat"],"kind":"enum"},"1:14602:4942":{"crate_id":1,"path":["std","sys","unix","fs","FileTimes"],"kind":"struct"},"16:7823:6053":{"crate_id":16,"path":["gimli","read","unit","EntriesTree"],"kind":"struct"},"17:13258:7410":{"crate_id":17,"path":["object","pe","ImageSymbol"],"kind":"struct"},"2:50238:5551":{"crate_id":2,"path":["core","time","FromFloatSecsErrorKind"],"kind":"enum"},"17:12408:7166":{"crate_id":17,"path":["object","macho","DylibModule64"],"kind":"struct"},"17:12431:7167":{"crate_id":17,"path":["object","macho","DylibReference"],"kind":"struct"},"17:12771:7222":{"crate_id":17,"path":["object","macho","Relocation"],"kind":"struct"},"16:5488:5939":{"crate_id":16,"path":["gimli","read","cfi","SectionBaseAddresses"],"kind":"struct"},"17:13547:7485":{"crate_id":17,"path":["object","pe","ImageResourceDirStringU"],"kind":"struct"},"24:4988:3442":{"crate_id":24,"path":["syn","token","Gt"],"kind":"struct"},"16:5927:5961":{"crate_id":16,"path":["gimli","read","cfi","CallFrameInstructionIter"],"kind":"struct"},"16:6110:6080":{"crate_id":16,"path":["gimli","read","abbrev","Abbreviation"],"kind":"struct"},"2:22850:4677":{"crate_id":2,"path":["core","core_simd","elements","sealed","Sealed"],"kind":"trait"},"1:12167:4927":{"crate_id":1,"path":["std","sync","mpsc","TryRecvError"],"kind":"enum"},"24:5058:3447":{"crate_id":24,"path":["syn","token","Or"],"kind":"struct"},"17:10331:6336":{"crate_id":17,"path":["object","read","elf","symbol","SymbolTable"],"kind":"struct"},"2:48808:5255":{"crate_id":2,"path":["core","hash","sip","SipHasher"],"kind":"struct"},"24:5748:3133":{"crate_id":24,"path":["syn","expr","ExprCast"],"kind":"struct"},"24:3214:6430":{"crate_id":24,"path":["syn","error","ErrorMessage"],"kind":"struct"},"17:10962:49025":{"crate_id":17,"path":["object","read","pe","section","PeSegmentIterator"],"kind":"struct"},"17:10353:6327":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbolTable"],"kind":"struct"},"11:0:2957":{"crate_id":11,"path":["adler"],"kind":"module"},"2:46431:5599":{"crate_id":2,"path":["core","char","CaseMappingIter"],"kind":"enum"},"16:6087:6039":{"crate_id":16,"path":["gimli","read","abbrev","DebugAbbrev"],"kind":"struct"},"2:3999:68":{"crate_id":2,"path":["core","any","Any"],"kind":"trait"},"17:9592:128":{"crate_id":17,"path":["object","read","any","File"],"kind":"struct"},"2:46679:5109":{"crate_id":2,"path":["core","iter","adapters","inspect","Inspect"],"kind":"struct"},"2:2062:4686":{"crate_id":2,"path":["core","mem","maybe_uninit","write_slice_cloned","Guard"],"kind":"struct"},"2:48847:9248":{"crate_id":2,"path":["core","hash","sip","Sip24Rounds"],"kind":"struct"},"21:3002:1614":{"crate_id":21,"path":["proc_macro","TokenStream"],"kind":"struct"},"17:12756:7221":{"crate_id":17,"path":["object","macho","Nlist64"],"kind":"struct"},"2:49627:5466":{"crate_id":2,"path":["core","str","iter","RMatchIndices"],"kind":"struct"},"2:47602:4475":{"crate_id":2,"path":["core","panicking","AssertKind"],"kind":"enum"},"12:940:4895":{"crate_id":12,"path":["hashbrown","map","RawEntryMut"],"kind":"enum"},"1:4398:4965":{"crate_id":1,"path":["std","io","stdio","StdinRaw"],"kind":"struct"},"17:9649:48763":{"crate_id":17,"path":["object","read","any","SegmentIterator"],"kind":"struct"},"24:3401:3390":{"crate_id":24,"path":["syn","token","Async"],"kind":"struct"},"6:6051:8744":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statfs64"],"kind":"struct"},"16:7884:6049":{"crate_id":16,"path":["gimli","read","unit","DebugTypesUnitHeadersIter"],"kind":"struct"},"24:5444:1772":{"crate_id":24,"path":["syn","data","Variant"],"kind":"struct"},"2:4884:3329":{"crate_id":2,"path":["core","cell","lazy","LazyCell"],"kind":"struct"},"24:5838:3154":{"crate_id":24,"path":["syn","expr","ExprTryBlock"],"kind":"struct"},"5:5788:6631":{"crate_id":5,"path":["alloc","slice","hack","to_vec","DropGuard"],"kind":"struct"},"24:2132:6429":{"crate_id":24,"path":["syn","ext","IdentExt"],"kind":"trait"},"24:1271:6440":{"crate_id":24,"path":["syn","lit","LitRepr"],"kind":"struct"},"2:46768:5120":{"crate_id":2,"path":["core","iter","adapters","step_by","StepBy"],"kind":"struct"},"1:1463:4890":{"crate_id":1,"path":["std","collections","hash","map","Values"],"kind":"struct"},"17:11738:7023":{"crate_id":17,"path":["object","elf","Versym"],"kind":"struct"},"22:944:1747":{"crate_id":22,"path":["proc_macro2","imp","Group"],"kind":"enum"},"1:11066:4727":{"crate_id":1,"path":["std","io","util","Empty"],"kind":"struct"},"6:5228:8535":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","termios"],"kind":"struct"},"24:2195:1752":{"crate_id":24,"path":["syn","punctuated","Punctuated"],"kind":"struct"},"2:49891:5210":{"crate_id":2,"path":["core","str","pattern","CharArraySearcher"],"kind":"struct"},"1:4404:4967":{"crate_id":1,"path":["std","io","stdio","StderrRaw"],"kind":"struct"},"17:9296:6884":{"crate_id":17,"path":["object","endian","U16Bytes"],"kind":"struct"},"24:5753:3134":{"crate_id":24,"path":["syn","expr","ExprClosure"],"kind":"struct"},"6:4203:8352":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Phdr"],"kind":"struct"},"1:11356:4983":{"crate_id":1,"path":["std","net","tcp","IntoIncoming"],"kind":"struct"},"16:5672:5947":{"crate_id":16,"path":["gimli","read","cfi","FrameDescriptionEntry"],"kind":"struct"},"5:2330:5670":{"crate_id":5,"path":["alloc","collections","btree","navigate","LazyLeafRange"],"kind":"struct"},"1:2460:6453":{"crate_id":1,"path":["std","env","Args"],"kind":"struct"},"2:2186:578":{"crate_id":2,"path":["core","mem","drop"],"kind":"function"},"2:6633:62450":{"crate_id":2,"path":["core","iter","adapters","flatten","TrustedConstSize"],"kind":"trait"},"1:7633:4866":{"crate_id":1,"path":["std","process","ChildStdin"],"kind":"struct"},"16:7295:6059":{"crate_id":16,"path":["gimli","read","rnglists","RawRngListIter"],"kind":"struct"},"17:299:64226":{"crate_id":17,"path":["object","read","util","DebugLen"],"kind":"struct"},"17:11822:7051":{"crate_id":17,"path":["object","elf","NoteHeader64"],"kind":"struct"},"16:7360:194":{"crate_id":16,"path":["gimli","read","rnglists","Range"],"kind":"struct"},"6:4501:8465":{"crate_id":6,"path":["libc","unix","linux_like","linux","mq_attr"],"kind":"struct"},"22:920:9159":{"crate_id":22,"path":["proc_macro2","imp","DeferredTokenStream"],"kind":"struct"},"1:2401:14154":{"crate_id":1,"path":["std","env","VarsOs"],"kind":"struct"},"6:5191:8521":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__timeval"],"kind":"struct"},"6:5945:8692":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","sigaction"],"kind":"struct"},"16:5330:6883":{"crate_id":16,"path":["gimli","endianity","BigEndian"],"kind":"struct"},"1:10953:4886":{"crate_id":1,"path":["std","io","error","Custom"],"kind":"struct"},"24:5354:2141":{"crate_id":24,"path":["syn","token","Paren"],"kind":"struct"},"2:45809:4461":{"crate_id":2,"path":["core","ops","generator","GeneratorState"],"kind":"enum"},"24:6376:185":{"crate_id":24,"path":["syn","path","Path"],"kind":"struct"},"5:2310:5709":{"crate_id":5,"path":["alloc","collections","btree","navigate","LazyLeafHandle"],"kind":"enum"},"1:903:4209":{"crate_id":1,"path":["std","thread","scoped","ScopedJoinHandle"],"kind":"struct"},"1:1450:4889":{"crate_id":1,"path":["std","collections","hash","map","Keys"],"kind":"struct"},"1:16027:3001":{"crate_id":1,"path":["std","isize"],"kind":"primitive"},"6:4215:8353":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Phdr"],"kind":"struct"},"1:5651:4741":{"crate_id":1,"path":["std","os","unix","ffi","os_str","OsStringExt"],"kind":"trait"},"1:4752:4700":{"crate_id":1,"path":["std","io","BufRead"],"kind":"trait"},"1:12258:4821":{"crate_id":1,"path":["std","time","Instant"],"kind":"struct"},"24:3491:98":{"crate_id":24,"path":["syn","token","Break"],"kind":"struct"},"10:0:2956":{"crate_id":10,"path":["rustc_std_workspace_alloc"],"kind":"module"},"24:5964:2440":{"crate_id":24,"path":["syn","generics","TraitBound"],"kind":"struct"},"2:49862:5204":{"crate_id":2,"path":["core","str","pattern","CharSearcher"],"kind":"struct"},"17:11519:6985":{"crate_id":17,"path":["object","elf","SectionHeader64"],"kind":"struct"},"2:22580:61724":{"crate_id":2,"path":["core","core_simd","swizzle","interleave","Hi"],"kind":"struct"},"1:2031:145":{"crate_id":1,"path":["std","collections","hash","set","HashSet"],"kind":"struct"},"6:6221:8828":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user_fpregs_struct"],"kind":"struct"},"17:10095:6377":{"crate_id":17,"path":["object","read","coff","section","CoffSegmentIterator"],"kind":"struct"},"2:51355:8972":{"crate_id":2,"path":["core","core_arch","simd","i64x1"],"kind":"struct"},"17:13746:7552":{"crate_id":17,"path":["object","pe","ImageHotPatchBase"],"kind":"struct"},"12:1147:4901":{"crate_id":12,"path":["hashbrown","map","VacantEntry"],"kind":"struct"},"24:6137:3175":{"crate_id":24,"path":["syn","op","BinOp"],"kind":"enum"},"24:5783:3141":{"crate_id":24,"path":["syn","expr","ExprLet"],"kind":"struct"},"17:10149:48767":{"crate_id":17,"path":["object","read","coff","symbol","SymbolIterator"],"kind":"struct"},"6:4073:8310":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_condition_effect"],"kind":"struct"},"2:2920:183":{"crate_id":2,"path":["core","cmp","PartialEq"],"kind":"trait"},"2:49527:5462":{"crate_id":2,"path":["core","str","iter","RSplitTerminator"],"kind":"struct"},"6:5371:8617":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","Elf64_Chdr"],"kind":"struct"},"24:5467:3118":{"crate_id":24,"path":["syn","data","FieldsUnnamed"],"kind":"struct"},"16:5346:6040":{"crate_id":16,"path":["gimli","read","addr","DebugAddr"],"kind":"struct"},"1:1153:13167":{"crate_id":1,"path":["std","backtrace","BacktraceFrame"],"kind":"struct"},"17:9186:6289":{"crate_id":17,"path":["object","common","SectionFlags"],"kind":"enum"},"24:5739:3131":{"crate_id":24,"path":["syn","expr","ExprBreak"],"kind":"struct"},"2:21:672":{"crate_id":2,"path":["core","format_args"],"kind":"macro"},"6:6005:8725":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stat"],"kind":"struct"},"6:5978:8715":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","flock64"],"kind":"struct"},"5:1486:4902":{"crate_id":5,"path":["alloc","collections","btree","map","entry","OccupiedError"],"kind":"struct"},"12:2045:4578":{"crate_id":12,"path":["hashbrown","set","DrainFilter"],"kind":"struct"},"6:4425:8434":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlattr"],"kind":"struct"},"24:3021:2742":{"crate_id":24,"path":["syn","parse","Unexpected"],"kind":"enum"},"1:5745:4661":{"crate_id":1,"path":["std","os","unix","fs","MetadataExt"],"kind":"trait"},"2:47492:176":{"crate_id":2,"path":["core","option","Option"],"kind":"enum"},"1:14242:4718":{"crate_id":1,"path":["std","sys","unix","stdio","Stderr"],"kind":"struct"},"1:12006:181":{"crate_id":1,"path":["std","process","Output"],"kind":"struct"},"17:12582:7189":{"crate_id":17,"path":["object","macho","BuildVersionCommand"],"kind":"struct"},"5:6475:4580":{"crate_id":5,"path":["alloc","string","Drain"],"kind":"struct"},"1:10581:58779":{"crate_id":1,"path":["std","thread","local","fast","DtorState"],"kind":"enum"},"17:10801:48943":{"crate_id":17,"path":["object","read","macho","segment","MachOSegment"],"kind":"struct"},"1:897:4208":{"crate_id":1,"path":["std","thread","scoped","Scope"],"kind":"struct"},"2:23079:4677":{"crate_id":2,"path":["core","core_simd","masks","to_bitmask","sealed","Sealed"],"kind":"trait"},"16:4734:7654":{"crate_id":16,"path":["gimli","constants","DwInl"],"kind":"struct"},"2:32337:4278":{"crate_id":2,"path":["core","mem","valid_align","ValidAlign"],"kind":"struct"},"17:11915:7057":{"crate_id":17,"path":["object","macho","DyldCacheHeader"],"kind":"struct"},"16:5717:5950":{"crate_id":16,"path":["gimli","read","cfi","UnwindContext"],"kind":"struct"},"6:4083:8317":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_periodic_effect"],"kind":"struct"},"6:4387:8419":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_filter"],"kind":"struct"},"2:48519:133":{"crate_id":2,"path":["core","fmt","rt","v1","FormatSpec"],"kind":"struct"},"17:11714:7019":{"crate_id":17,"path":["object","elf","Dyn32"],"kind":"struct"},"2:46350:5601":{"crate_id":2,"path":["core","char","decode","DecodeUtf16Error"],"kind":"struct"},"17:8902:48755":{"crate_id":17,"path":["object","common","AddressSize"],"kind":"enum"},"24:2977:1829":{"crate_id":24,"path":["syn","parse","ParseStream"],"kind":"typedef"},"2:3647:3266":{"crate_id":2,"path":["core","ops","range","RangeBounds"],"kind":"trait"},"1:5793:4664":{"crate_id":1,"path":["std","os","unix","fs","DirEntryExt2"],"kind":"trait"},"2:11244:5430":{"crate_id":2,"path":["core","slice","iter","SplitMut"],"kind":"struct"},"2:46281:3347":{"crate_id":2,"path":["core","ascii","EscapeDefault"],"kind":"struct"},"6:4183:8350":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Sym"],"kind":"struct"},"2:46587:4701":{"crate_id":2,"path":["core","iter","adapters","chain","Chain"],"kind":"struct"},"17:9280:6883":{"crate_id":17,"path":["object","endian","BigEndian"],"kind":"struct"},"2:51520:5306":{"crate_id":2,"path":["core","core_arch","simd","u32x4"],"kind":"struct"},"1:7121:3670":{"crate_id":1,"path":["std","panic","always_abort"],"kind":"function"},"17:13685:7545":{"crate_id":17,"path":["object","pe","ImageLoadConfigDirectory64"],"kind":"struct"},"24:1160:2047":{"crate_id":24,"path":["syn","lifetime","Lifetime"],"kind":"struct"},"22:623:3260":{"crate_id":22,"path":["proc_macro2","LexError"],"kind":"struct"},"24:5710:3124":{"crate_id":24,"path":["syn","expr","ExprAssign"],"kind":"struct"},"2:3273:3367":{"crate_id":2,"path":["core","marker","Sized"],"kind":"trait"},"2:3274:3325":{"crate_id":2,"path":["core","marker","Unsize"],"kind":"trait"},"2:2862:97":{"crate_id":2,"path":["core","borrow","Borrow"],"kind":"trait"},"17:13062:7346":{"crate_id":17,"path":["object","pe","ImageOptionalHeader32"],"kind":"struct"},"5:1091:6631":{"crate_id":5,"path":["alloc","collections","binary_heap","drop","DropGuard"],"kind":"struct"},"12:2066:4797":{"crate_id":12,"path":["hashbrown","set","SymmetricDifference"],"kind":"struct"},"1:10854:118":{"crate_id":1,"path":["std","fs","DirBuilder"],"kind":"struct"},"6:6185:8811":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ipc_perm"],"kind":"struct"},"17:13306:7418":{"crate_id":17,"path":["object","pe","ImageAuxSymbolTokenDef"],"kind":"struct"},"2:48616:4140":{"crate_id":2,"path":["core","fmt","FlagV1"],"kind":"enum"},"2:13857:187":{"crate_id":2,"path":["core","future","pending","Pending"],"kind":"struct"},"1:9737:4975":{"crate_id":1,"path":["std","sys_common","remutex","ReentrantMutexGuard"],"kind":"struct"},"2:3168:74":{"crate_id":2,"path":["core","convert","AsMut"],"kind":"trait"},"2:32693:4279":{"crate_id":2,"path":["core","mem","transmutability","Assume"],"kind":"struct"},"6:3892:8210":{"crate_id":6,"path":["libc","unix","linux_like","linux","spwd"],"kind":"struct"},"6:1602:8091":{"crate_id":6,"path":["libc","unix","linux_like","tm"],"kind":"struct"},"24:5432:1830":{"crate_id":24,"path":["syn","attr","NestedMeta","Meta"],"kind":"foreign_type"},"17:10827:6281":{"crate_id":17,"path":["object","read","macho","section","MachOSectionInternal"],"kind":"struct"},"17:12610:7195":{"crate_id":17,"path":["object","macho","DyldInfoCommand"],"kind":"struct"},"2:3388:5070":{"crate_id":2,"path":["core","ops","bit","Not"],"kind":"trait"},"6:6614:8837":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","not_x32","statvfs"],"kind":"struct"},"17:10516:6361":{"crate_id":17,"path":["object","read","elf","version","VerneedIterator"],"kind":"struct"},"24:3815:2142":{"crate_id":24,"path":["syn","token","Macro"],"kind":"struct"},"6:4317:8385":{"crate_id":6,"path":["libc","unix","linux_like","linux","inotify_event"],"kind":"struct"},"1:14239:4722":{"crate_id":1,"path":["std","sys","unix","stdio","Stdout"],"kind":"struct"},"5:7212:4580":{"crate_id":5,"path":["alloc","vec","drain","Drain"],"kind":"struct"},"21:2448:4616":{"crate_id":21,"path":["proc_macro","bridge","LitKind"],"kind":"enum"},"18:661:6409":{"crate_id":18,"path":["memchr","memmem","prefilter","PrefilterState"],"kind":"struct"},"16:6269:6091":{"crate_id":16,"path":["gimli","read","line","LineInstruction"],"kind":"enum"},"24:2059:3303":{"crate_id":24,"path":["syn","buffer","TokenBuffer"],"kind":"struct"},"1:2366:600":{"crate_id":1,"path":["std","env"],"kind":"module"},"1:9598:6674":{"crate_id":1,"path":["std","sys_common","lazy_box","LazyBox"],"kind":"struct"},"5:1235:5669":{"crate_id":5,"path":["alloc","collections","btree","dedup_sorted_iter","DedupSortedIter"],"kind":"struct"},"16:4535:7649":{"crate_id":16,"path":["gimli","constants","DwVirtuality"],"kind":"struct"},"21:0:1037":{"crate_id":21,"path":["proc_macro"],"kind":"module"},"2:3341:3463":{"crate_id":2,"path":["core","ops","arith","Sub"],"kind":"trait"},"24:6334:3186":{"crate_id":24,"path":["syn","ty","TypeParen"],"kind":"struct"},"1:16009:2985":{"crate_id":1,"path":["std","array"],"kind":"primitive"},"1:3345:4949":{"crate_id":1,"path":["std","fs","canonicalize"],"kind":"function"},"1:9064:5015":{"crate_id":1,"path":["std","sync","poison","PoisonError"],"kind":"struct"},"1:12769:58191":{"crate_id":1,"path":["std","sys","unix","fs","TimespecDebugAdapter"],"kind":"struct"},"1:8977:4882":{"crate_id":1,"path":["std","sync","once_lock","OnceLock"],"kind":"struct"},"2:5164:3321":{"crate_id":2,"path":["core","cell","RefMut"],"kind":"struct"},"17:13488:7467":{"crate_id":17,"path":["object","pe","ImageBoundImportDescriptor"],"kind":"struct"},"24:4031:2511":{"crate_id":24,"path":["syn","token","Static"],"kind":"struct"},"2:53425:9033":{"crate_id":2,"path":["core","core_arch","x86","__m256i"],"kind":"struct"},"17:14000:7618":{"crate_id":17,"path":["object","pe","ImageCor20Header"],"kind":"struct"},"2:51144:5280":{"crate_id":2,"path":["core","core_arch","simd","i16x2"],"kind":"struct"},"2:48632:73":{"crate_id":2,"path":["core","fmt","Arguments"],"kind":"struct"},"2:51231:5305":{"crate_id":2,"path":["core","core_arch","simd","u32x2"],"kind":"struct"},"6:6935:8859":{"crate_id":6,"path":["libc","unix","align","in6_addr"],"kind":"struct"},"24:3263:3245":{"crate_id":24,"path":["syn","error","Iter"],"kind":"struct"},"16:6518:6096":{"crate_id":16,"path":["gimli","read","line","FileEntry"],"kind":"struct"},"14:216:47109":{"crate_id":14,"path":["rustc_demangle","SizeLimitedFmtAdapter"],"kind":"struct"},"16:4704:7653":{"crate_id":16,"path":["gimli","constants","DwCc"],"kind":"struct"},"7:0:1480":{"crate_id":7,"path":["unwind"],"kind":"module"},"14:244:9208":{"crate_id":14,"path":["rustc_demangle","TryDemangleError"],"kind":"struct"},"16:4823:7657":{"crate_id":16,"path":["gimli","constants","DwIdx"],"kind":"struct"},"24:6332:3185":{"crate_id":24,"path":["syn","ty","TypeNever"],"kind":"struct"},"1:6791:4752":{"crate_id":1,"path":["std","os","linux","process","ChildExt"],"kind":"trait"},"18:740:64238":{"crate_id":18,"path":["memchr","memmem","twoway","Suffix"],"kind":"struct"},"1:15230:4816":{"crate_id":1,"path":["std","sys_common","wtf8","Wtf8CodePoints"],"kind":"struct"},"1:4304:4729":{"crate_id":1,"path":["std","io","readbuf","ReadBuf"],"kind":"struct"},"1:6441:4754":{"crate_id":1,"path":["std","os","unix","process","CommandExt"],"kind":"trait"},"2:13283:41219":{"crate_id":2,"path":["core","str","lossy","Utf8LossyChunksIter"],"kind":"struct"},"6:5274:8556":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_mmap_req"],"kind":"struct"},"24:5427:3116":{"crate_id":24,"path":["syn","attr","MetaNameValue"],"kind":"struct"},"6:1630:8110":{"crate_id":6,"path":["libc","unix","linux_like","lconv"],"kind":"struct"},"6:1658:8135":{"crate_id":6,"path":["libc","unix","linux_like","in_pktinfo"],"kind":"struct"},"17:11750:7024":{"crate_id":17,"path":["object","elf","Verdef"],"kind":"struct"},"24:5770:3138":{"crate_id":24,"path":["syn","expr","ExprGroup"],"kind":"struct"},"2:5033:3312":{"crate_id":2,"path":["core","cell","BorrowError"],"kind":"struct"},"1:9347:4766":{"crate_id":1,"path":["std","std_float","StdFloat"],"kind":"trait"},"24:5794:3144":{"crate_id":24,"path":["syn","expr","ExprMacro"],"kind":"struct"},"1:16023:2997":{"crate_id":1,"path":["std","u16"],"kind":"primitive"},"17:2314:6326":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbolIterator"],"kind":"struct"},"17:13942:7608":{"crate_id":17,"path":["object","pe","ImageSeparateDebugHeader"],"kind":"struct"},"6:5130:8479":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","statx"],"kind":"struct"},"17:9943:64219":{"crate_id":17,"path":["object","read","any","DynamicRelocationIteratorInternal"],"kind":"enum"},"24:2979:3289":{"crate_id":24,"path":["syn","parse","ParseBuffer"],"kind":"struct"},"24:153:1811":{"crate_id":24,"path":["syn","token","Token"],"kind":"trait"},"24:2994:3290":{"crate_id":24,"path":["syn","parse","StepCursor"],"kind":"struct"},"1:15046:61216":{"crate_id":1,"path":["std","sys","unix","thread","cgroups","Cgroup"],"kind":"enum"},"18:637:6801":{"crate_id":18,"path":["memchr","memmem","genericsimd","Forward"],"kind":"struct"},"5:1694:5666":{"crate_id":5,"path":["alloc","collections","btree","map","RangeMut"],"kind":"struct"},"19:117:6797":{"crate_id":19,"path":["panic_unwind","dwarf","eh","EHContext"],"kind":"struct"},"24:5899:2190":{"crate_id":24,"path":["syn","generics","GenericParam"],"kind":"enum"},"1:3652:4711":{"crate_id":1,"path":["std","io","buffered","bufwriter","BufWriter"],"kind":"struct"},"1:1501:4893":{"crate_id":1,"path":["std","collections","hash","map","IntoValues"],"kind":"struct"},"17:11277:6948":{"crate_id":17,"path":["object","read","CodeView"],"kind":"struct"},"17:10317:6321":{"crate_id":17,"path":["object","read","elf","section","ElfSection"],"kind":"struct"},"6:5292:8568":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","rtentry"],"kind":"struct"},"2:4782:4457":{"crate_id":2,"path":["core","async_iter","async_iter","AsyncIterator"],"kind":"trait"},"24:4773:3428":{"crate_id":24,"path":["syn","token","Caret"],"kind":"struct"},"17:10988:49023":{"crate_id":17,"path":["object","read","pe","section","PeSectionIterator"],"kind":"struct"},"17:11993:7079":{"crate_id":17,"path":["object","macho","MachHeader32"],"kind":"struct"},"16:6780:6102":{"crate_id":16,"path":["gimli","read","op","DieReference"],"kind":"enum"},"17:13933:7606":{"crate_id":17,"path":["object","pe","ImageFunctionEntry64"],"kind":"struct"},"24:2881:6426":{"crate_id":24,"path":["syn","parse","discouraged","Speculative"],"kind":"trait"},"6:5407:8632":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_entry"],"kind":"struct"},"12:0:2958":{"crate_id":12,"path":["hashbrown"],"kind":"module"},"2:10306:3340":{"crate_id":2,"path":["core","fmt","UpperHex"],"kind":"trait"},"2:4065:4760":{"crate_id":2,"path":["core","any","Demand"],"kind":"struct"},"2:2956:177":{"crate_id":2,"path":["core","cmp","Ord"],"kind":"trait"},"17:13842:7585":{"crate_id":17,"path":["object","pe","ImageEnclaveConfig64"],"kind":"struct"},"2:24090:5374":{"crate_id":2,"path":["core","num","dec2flt","ParseFloatError"],"kind":"struct"},"17:13924:7602":{"crate_id":17,"path":["object","pe","ImageFunctionEntry"],"kind":"struct"},"17:12168:6904":{"crate_id":17,"path":["object","macho","Dylib"],"kind":"struct"},"2:52400:5290":{"crate_id":2,"path":["core","core_arch","simd","i64x4"],"kind":"struct"},"12:880:4578":{"crate_id":12,"path":["hashbrown","map","DrainFilter"],"kind":"struct"},"2:46647:5106":{"crate_id":2,"path":["core","iter","adapters","filter_map","FilterMap"],"kind":"struct"},"17:13331:7427":{"crate_id":17,"path":["object","pe","ImageAuxSymbolFunctionBeginEnd"],"kind":"struct"},"7:85:46439":{"crate_id":7,"path":["unwind","libunwind","_Unwind_Action"],"kind":"enum"},"1:5862:5046":{"crate_id":1,"path":["std","os","unix","net","addr","AsciiEscaped"],"kind":"struct"},"24:160:4677":{"crate_id":24,"path":["syn","token","private","Sealed"],"kind":"trait"},"2:45857:196":{"crate_id":2,"path":["core","ops","range","RangeFull"],"kind":"struct"},"12:1162:5860":{"crate_id":12,"path":["hashbrown","map","EntryRef"],"kind":"enum"},"2:23462:5267":{"crate_id":2,"path":["core","core_simd","ord","SimdPartialOrd"],"kind":"trait"},"2:13892:35333":{"crate_id":2,"path":["core","future","poll_fn","PollFn"],"kind":"struct"},"1:14959:6687":{"crate_id":1,"path":["std","sys","unix","process","process_inner","posix_spawn","PosixSpawnattr"],"kind":"struct"},"2:46708:5125":{"crate_id":2,"path":["core","iter","adapters","map_while","MapWhile"],"kind":"struct"},"24:5726:3128":{"crate_id":24,"path":["syn","expr","ExprBinary"],"kind":"struct"},"24:5810:2022":{"crate_id":24,"path":["syn","expr","ExprPath"],"kind":"struct"},"24:6328:3183":{"crate_id":24,"path":["syn","ty","TypeInfer"],"kind":"struct"},"6:6176:8808":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","mcontext_t"],"kind":"struct"},"14:0:2959":{"crate_id":14,"path":["rustc_demangle"],"kind":"module"},"12:183:5868":{"crate_id":12,"path":["hashbrown","raw","RawTable"],"kind":"struct"},"16:4995:7662":{"crate_id":16,"path":["gimli","constants","DwMacro"],"kind":"struct"},"16:3939:7640":{"crate_id":16,"path":["gimli","constants","DwTag"],"kind":"struct"},"13:232:7885":{"crate_id":13,"path":["std_detect","detect","cache","Initializer"],"kind":"struct"},"17:11030:127":{"crate_id":17,"path":["object","read","Error"],"kind":"struct"},"24:299:1758":{"crate_id":24,"path":["syn","ident","Ident"],"kind":"function"},"24:4727:3425":{"crate_id":24,"path":["syn","token","AndEq"],"kind":"struct"},"6:1729:4994":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_un"],"kind":"struct"},"1:16017:2991":{"crate_id":1,"path":["std","i8"],"kind":"primitive"},"9:469:9320":{"crate_id":9,"path":["miniz_oxide","inflate","core","DecompressorOxide"],"kind":"struct"},"1:1486:4578":{"crate_id":1,"path":["std","collections","hash","map","DrainFilter"],"kind":"struct"},"17:12494:7176":{"crate_id":17,"path":["object","macho","RpathCommand"],"kind":"struct"},"1:11416:4993":{"crate_id":1,"path":["std","os","unix","net","ancillary","SocketAncillary"],"kind":"struct"},"2:23771:5177":{"crate_id":2,"path":["core","core_simd","vector","SimdElement"],"kind":"trait"},"24:6222:3176":{"crate_id":24,"path":["syn","op","UnOp"],"kind":"enum"},"24:1274:6441":{"crate_id":24,"path":["syn","lit","LitIntRepr"],"kind":"struct"},"6:1533:8053":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreqn"],"kind":"struct"},"17:12480:7174":{"crate_id":17,"path":["object","macho","UuidCommand"],"kind":"struct"},"24:3383:3389":{"crate_id":24,"path":["syn","token","As"],"kind":"struct"},"1:16006:2983":{"crate_id":1,"path":["std","unit"],"kind":"primitive"},"24:3455:3393":{"crate_id":24,"path":["syn","token","Become"],"kind":"struct"},"2:12992:3267":{"crate_id":2,"path":["core","str","traits","FromStr"],"kind":"trait"},"2:46548:6650":{"crate_id":2,"path":["core","ffi","VaListImpl"],"kind":"struct"},"17:10656:6899":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandData"],"kind":"struct"},"24:5423:3115":{"crate_id":24,"path":["syn","attr","MetaList"],"kind":"struct"},"12:1238:5863":{"crate_id":12,"path":["hashbrown","map","VacantEntryRef"],"kind":"struct"},"6:5167:8505":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","aiocb"],"kind":"struct"},"18:830:6399":{"crate_id":18,"path":["memchr","memmem","FinderBuilder"],"kind":"struct"},"2:8366:5139":{"crate_id":2,"path":["core","iter","traits","accum","Product"],"kind":"trait"},"2:24118:8871":{"crate_id":2,"path":["core","num","diy_float","Fp"],"kind":"struct"},"16:7406:6045":{"crate_id":16,"path":["gimli","read","str","DebugLineStr"],"kind":"struct"},"9:722:5731":{"crate_id":9,"path":["miniz_oxide","deflate","core","TDEFLFlush"],"kind":"enum"},"22:843:3354":{"crate_id":22,"path":["proc_macro2","fallback","LineColumn"],"kind":"struct"},"17:12537:7182":{"crate_id":17,"path":["object","macho","EncryptionInfoCommand32"],"kind":"struct"},"24:3253:3244":{"crate_id":24,"path":["syn","error","IntoIter"],"kind":"struct"},"5:920:96":{"crate_id":5,"path":["alloc","collections","binary_heap","BinaryHeap"],"kind":"struct"},"24:5116:3451":{"crate_id":24,"path":["syn","token","Question"],"kind":"struct"},"2:22533:4056":{"crate_id":2,"path":["core","core_simd","swizzle","reverse","Reverse"],"kind":"struct"},"1:5739:4658":{"crate_id":1,"path":["std","os","unix","fs","OpenOptionsExt"],"kind":"trait"},"5:8330:5639":{"crate_id":5,"path":["alloc","ffi","c_str","FromVecWithNulError"],"kind":"struct"},"1:10800:4940":{"crate_id":1,"path":["std","fs","ReadDir"],"kind":"struct"},"5:3488:4578":{"crate_id":5,"path":["alloc","collections","btree","set","DrainFilter"],"kind":"struct"},"16:7185:6109":{"crate_id":16,"path":["gimli","read","pubnames","DebugPubNames"],"kind":"struct"},"24:6126:1967":{"crate_id":24,"path":["syn","derive","DataStruct"],"kind":"struct"},"1:11139:4704":{"crate_id":1,"path":["std","io","Split"],"kind":"struct"},"1:11350:4982":{"crate_id":1,"path":["std","net","tcp","Incoming"],"kind":"struct"},"2:47004:8956":{"crate_id":2,"path":["core","iter","sources","repeat_with","RepeatWith"],"kind":"struct"},"5:8176:5629":{"crate_id":5,"path":["alloc","collections","btree","set_val","SetValZST"],"kind":"struct"},"17:10236:6307":{"crate_id":17,"path":["object","read","elf","file","ElfFile"],"kind":"struct"},"2:53126:5288":{"crate_id":2,"path":["core","core_arch","simd","i32x16"],"kind":"struct"},"2:5630:779":{"crate_id":2,"path":["core","iter"],"kind":"module"},"2:49758:5474":{"crate_id":2,"path":["core","str","iter","EscapeDebug"],"kind":"struct"},"16:6366:5879":{"crate_id":16,"path":["gimli","read","line","LineRow"],"kind":"struct"},"9:603:9330":{"crate_id":9,"path":["miniz_oxide","inflate","stream","InflateState"],"kind":"struct"},"16:5505:5940":{"crate_id":16,"path":["gimli","read","cfi","CfiEntriesIter"],"kind":"struct"},"1:12738:4940":{"crate_id":1,"path":["std","sys","unix","fs","ReadDir"],"kind":"struct"},"6:5347:8605":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ntptimeval"],"kind":"struct"},"1:10680:14159":{"crate_id":1,"path":["std","env","VarError"],"kind":"enum"},"2:23939:5507":{"crate_id":2,"path":["core","num","bignum","tests","Big8x3"],"kind":"struct"},"24:2339:3243":{"crate_id":24,"path":["syn","punctuated","IntoPairs"],"kind":"struct"},"21:3062:1822":{"crate_id":21,"path":["proc_macro","Span"],"kind":"struct"},"6:4449:8448":{"crate_id":6,"path":["libc","unix","linux_like","linux","dirent64"],"kind":"struct"},"17:11665:7008":{"crate_id":17,"path":["object","elf","Rela64"],"kind":"struct"},"1:6203:4998":{"crate_id":1,"path":["std","os","unix","net","listener","UnixListener"],"kind":"struct"},"6:4478:8457":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_user_dev"],"kind":"struct"},"2:48049:85":{"crate_id":2,"path":["core","sync","atomic","AtomicIsize"],"kind":"struct"},"24:3545:3394":{"crate_id":24,"path":["syn","token","Crate"],"kind":"struct"},"22:962:2468":{"crate_id":22,"path":["proc_macro2","imp","Literal"],"kind":"enum"},"17:10448:6350":{"crate_id":17,"path":["object","read","elf","note","NoteIterator"],"kind":"struct"},"24:916:64368":{"crate_id":24,"path":["syn","generics","TypeParams"],"kind":"struct"},"1:11152:4781":{"crate_id":1,"path":["std","net","addr","SocketAddr"],"kind":"enum"},"2:5038:3313":{"crate_id":2,"path":["core","cell","BorrowMutError"],"kind":"struct"},"17:10211:48831":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdat"],"kind":"struct"},"2:49323:5445":{"crate_id":2,"path":["core","slice","iter","ArrayChunks"],"kind":"struct"},"8:0:2954":{"crate_id":8,"path":["cfg_if"],"kind":"module"},"2:13766:138":{"crate_id":2,"path":["core","future","future","Future"],"kind":"trait"},"3:300:205":{"crate_id":3,"path":["compiler_builtins","float","cmp","Result"],"kind":"enum"},"5:8362:8862":{"crate_id":5,"path":["alloc","slice","merge_sort","Run"],"kind":"struct"},"2:47015:9244":{"crate_id":2,"path":["core","iter","sources","successors","Successors"],"kind":"struct"},"1:14030:4870":{"crate_id":1,"path":["std","sys","unix","process","process_common","CommandArgs"],"kind":"struct"},"6:6899:8852":{"crate_id":6,"path":["libc","unix","linux_like","linux","can_frame"],"kind":"struct"},"17:10571:48968":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCacheImage"],"kind":"struct"},"5:8250:3281":{"crate_id":5,"path":["alloc","collections","TryReserveError"],"kind":"struct"},"1:15073:9120":{"crate_id":1,"path":["std","sys","unix","time","Timespec"],"kind":"struct"},"24:2150:4677":{"crate_id":24,"path":["syn","ext","private","Sealed"],"kind":"trait"},"2:51048:8970":{"crate_id":2,"path":["core","core_arch","simd","i8x2"],"kind":"struct"},"24:5500:3121":{"crate_id":24,"path":["syn","data","VisRestricted"],"kind":"struct"},"6:5241:8544":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","mallinfo"],"kind":"struct"},"16:6136:6081":{"crate_id":16,"path":["gimli","read","abbrev","AttributeSpecification"],"kind":"struct"},"13:0:2952":{"crate_id":13,"path":["std_detect"],"kind":"module"},"16:6491:6095":{"crate_id":16,"path":["gimli","read","line","CompleteLineProgram"],"kind":"struct"},"1:10596:4193":{"crate_id":1,"path":["std","thread","ThreadId"],"kind":"struct"},"5:7849:6648":{"crate_id":5,"path":["alloc","vec","dedup_by","FillGapOnDrop"],"kind":"struct"},"21:1222:1614":{"crate_id":21,"path":["proc_macro","bridge","client","TokenStream"],"kind":"struct"},"2:46465:100":{"crate_id":2,"path":["core","ffi","c_str","CStr"],"kind":"struct"},"2:51027:8969":{"crate_id":2,"path":["core","core_arch","simd","u8x2"],"kind":"struct"},"16:6620:6241":{"crate_id":16,"path":["gimli","read","loclists","LocListsFormat"],"kind":"enum"},"2:47525:1806":{"crate_id":2,"path":["core","option","Item"],"kind":"struct"},"5:8115:3244":{"crate_id":5,"path":["alloc","collections","binary_heap","IntoIter"],"kind":"struct"},"1:7667:4868":{"crate_id":1,"path":["std","process","ChildStderr"],"kind":"struct"},"1:7445:185":{"crate_id":1,"path":["std","path","Path"],"kind":"struct"},"6:5420:8636":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_seccomp"],"kind":"struct"},"16:5360:5930":{"crate_id":16,"path":["gimli","read","cfi","DebugFrame"],"kind":"struct"},"1:0:1330":{"crate_id":1,"path":["std"],"kind":"module"},"2:49751:5473":{"crate_id":2,"path":["core","str","iter","EncodeUtf16"],"kind":"struct"},"6:4511:8470":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_txtime"],"kind":"struct"},"2:46410:5474":{"crate_id":2,"path":["core","char","EscapeDebug"],"kind":"struct"},"2:56348:236":{"crate_id":2,"path":["core","core_simd","fmt","fmt","Wrapper"],"kind":"struct"},"6:4419:8433":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlmsgerr"],"kind":"struct"},"24:3210:205":{"crate_id":24,"path":["syn","error","Result"],"kind":"typedef"},"2:9380:5198":{"crate_id":2,"path":["core","panicking","assert_matches_failed","Pattern"],"kind":"struct"},"1:3196:128":{"crate_id":1,"path":["std","fs","File"],"kind":"struct"},"17:9065:48759":{"crate_id":17,"path":["object","common","SymbolScope"],"kind":"enum"},"2:8403:151":{"crate_id":2,"path":["core","iter","traits","collect","IntoIterator"],"kind":"trait"},"2:7927:5165":{"crate_id":2,"path":["core","iter","range","Step"],"kind":"trait"},"6:4439:8442":{"crate_id":6,"path":["libc","unix","linux_like","linux","dirent"],"kind":"struct"},"5:8379:5630":{"crate_id":5,"path":["alloc","string","FromUtf8Error"],"kind":"struct"},"18:791:6395":{"crate_id":18,"path":["memchr","memmem","FindIter"],"kind":"struct"},"16:6964:3679":{"crate_id":16,"path":["gimli","read","op","Location"],"kind":"enum"},"2:53047:5304":{"crate_id":2,"path":["core","core_arch","simd","u16x32"],"kind":"struct"},"2:51250:8971":{"crate_id":2,"path":["core","core_arch","simd","u64x1"],"kind":"struct"},"17:10435:48874":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdatSectionIterator"],"kind":"struct"},"1:16019:2993":{"crate_id":1,"path":["std","i32"],"kind":"primitive"},"17:13986:7615":{"crate_id":17,"path":["object","pe","ImportObjectHeader"],"kind":"struct"},"6:4023:8289":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_keymap_entry"],"kind":"struct"},"2:50395:5493":{"crate_id":2,"path":["core","task","wake","RawWaker"],"kind":"struct"},"2:4920:3330":{"crate_id":2,"path":["core","cell","once","OnceCell"],"kind":"struct"},"6:6124:8768":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user_regs_struct"],"kind":"struct"},"5:1939:4578":{"crate_id":5,"path":["alloc","collections","btree","map","DrainFilter"],"kind":"struct"},"1:10456:6681":{"crate_id":1,"path":["std","backtrace_rs","Bomb"],"kind":"struct"},"24:956:64371":{"crate_id":24,"path":["syn","generics","ConstParamsMut"],"kind":"struct"},"16:5580:5944":{"crate_id":16,"path":["gimli","read","cfi","AugmentationData"],"kind":"struct"},"2:49445:2733":{"crate_id":2,"path":["core","str","iter","Bytes"],"kind":"struct"},"15:269:5886":{"crate_id":15,"path":["addr2line","RangeAttributes"],"kind":"struct"},"2:49723:5470":{"crate_id":2,"path":["core","str","iter","LinesAny"],"kind":"struct"},"24:3671:3399":{"crate_id":24,"path":["syn","token","Final"],"kind":"struct"},"17:10266:6323":{"crate_id":17,"path":["object","read","elf","segment","ElfSegment"],"kind":"struct"},"2:56322:236":{"crate_id":2,"path":["core","core_simd","fmt","fmt","Wrapper"],"kind":"struct"},"5:5093:660":{"crate_id":5,"path":["alloc","fmt"],"kind":"module"},"21:3141:1821":{"crate_id":21,"path":["proc_macro","Spacing"],"kind":"enum"},"5:8263:3282":{"crate_id":5,"path":["alloc","collections","TryReserveErrorKind"],"kind":"enum"},"18:695:6411":{"crate_id":18,"path":["memchr","memmem","rarebytes","RareNeedleBytes"],"kind":"struct"},"6:4523:8475":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_can"],"kind":"struct"},"17:12307:7130":{"crate_id":17,"path":["object","macho","RoutinesCommand64"],"kind":"struct"},"17:13627:7503":{"crate_id":17,"path":["object","pe","ImageEpilogueDynamicRelocationHeader"],"kind":"struct"},"17:10160:6894":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbolTable"],"kind":"struct"},"1:14610:129":{"crate_id":1,"path":["std","sys","unix","fs","FileType"],"kind":"struct"},"1:12061:61013":{"crate_id":1,"path":["std","sync","mpsc","shared","StartResult"],"kind":"enum"},"5:3396:1795":{"crate_id":5,"path":["alloc","collections","btree","set","Union"],"kind":"struct"},"6:5379:8618":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","Elf32_Chdr"],"kind":"struct"},"17:11962:7072":{"crate_id":17,"path":["object","macho","FatHeader"],"kind":"struct"},"17:10377:6325":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbol"],"kind":"struct"},"17:12118:7102":{"crate_id":17,"path":["object","macho","Section64"],"kind":"struct"},"16:7174:6108":{"crate_id":16,"path":["gimli","read","pubnames","PubNamesEntry"],"kind":"struct"},"6:4145:8348":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Ehdr"],"kind":"struct"},"2:49459:4704":{"crate_id":2,"path":["core","str","iter","Split"],"kind":"struct"},"6:1540:8056":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreq_source"],"kind":"struct"},"1:4401:4966":{"crate_id":1,"path":["std","io","stdio","StdoutRaw"],"kind":"struct"},"6:5953:8697":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statfs"],"kind":"struct"},"1:16016:2990":{"crate_id":1,"path":["std","f64"],"kind":"primitive"},"6:4410:8427":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlmsghdr"],"kind":"struct"},"1:12223:5014":{"crate_id":1,"path":["std","sync","condvar","WaitTimeoutResult"],"kind":"struct"},"2:53299:5291":{"crate_id":2,"path":["core","core_arch","simd","i64x8"],"kind":"struct"},"24:4247:3420":{"crate_id":24,"path":["syn","token","Where"],"kind":"struct"},"1:11670:4846":{"crate_id":1,"path":["std","path","Ancestors"],"kind":"struct"},"2:6437:5107":{"crate_id":2,"path":["core","iter","adapters","flatten","FlatMap"],"kind":"struct"},"15:0:2960":{"crate_id":15,"path":["addr2line"],"kind":"module"},"12:2253:4899":{"crate_id":12,"path":["hashbrown","set","Entry"],"kind":"enum"},"16:7856:6119":{"crate_id":16,"path":["gimli","read","unit","EntriesTreeIter"],"kind":"struct"},"1:5504:4988":{"crate_id":1,"path":["std","net","udp","UdpSocket"],"kind":"struct"},"24:4894:3436":{"crate_id":24,"path":["syn","token","Dot"],"kind":"struct"},"5:8313:5537":{"crate_id":5,"path":["alloc","ffi","c_str","FromBytesWithNulErrorKind"],"kind":"enum"},"2:13063:5198":{"crate_id":2,"path":["core","str","pattern","Pattern"],"kind":"trait"},"1:5972:5054":{"crate_id":1,"path":["std","os","unix","net","ancillary","AncillaryData"],"kind":"enum"},"2:46717:5111":{"crate_id":2,"path":["core","iter","adapters","peekable","Peekable"],"kind":"struct"},"2:23467:18423":{"crate_id":2,"path":["core","core_simd","ord","SimdOrd"],"kind":"trait"},"1:14317:4195":{"crate_id":1,"path":["std","sys","unix","thread","Thread"],"kind":"struct"},"6:610:8031":{"crate_id":6,"path":["libc","unix","itimerval"],"kind":"struct"},"17:9971:64232":{"crate_id":17,"path":["object","read","any","SectionRelocationIteratorInternal"],"kind":"enum"},"5:1560:94":{"crate_id":5,"path":["alloc","collections","btree","map","BTreeMap"],"kind":"struct"},"22:925:55315":{"crate_id":22,"path":["proc_macro2","imp","TokenTreeIter"],"kind":"enum"},"2:24598:172":{"crate_id":2,"path":["core","num","nonzero","NonZeroU64"],"kind":"struct"},"21:3011:3349":{"crate_id":21,"path":["proc_macro","ExpandError"],"kind":"struct"},"24:3761:3403":{"crate_id":24,"path":["syn","token","In"],"kind":"struct"},"2:49276:5442":{"crate_id":2,"path":["core","slice","iter","ChunksExact"],"kind":"struct"},"2:46970:9242":{"crate_id":2,"path":["core","iter","sources","from_fn","FromFn"],"kind":"struct"},"2:50020:5214":{"crate_id":2,"path":["core","str","pattern","StrSearcher"],"kind":"struct"},"18:152:55084":{"crate_id":18,"path":["memchr","memchr","iter","Memchr2"],"kind":"struct"},"17:13497:7470":{"crate_id":17,"path":["object","pe","ImageBoundForwarderRef"],"kind":"struct"},"6:3945:8253":{"crate_id":6,"path":["libc","unix","linux_like","linux","itimerspec"],"kind":"struct"},"2:48817:146":{"crate_id":2,"path":["core","hash","sip","Hasher"],"kind":"struct"},"2:49776:5475":{"crate_id":2,"path":["core","str","iter","EscapeUnicode"],"kind":"struct"},"17:11199:6947":{"crate_id":17,"path":["object","read","ObjectMapEntry"],"kind":"struct"},"17:9440:6887":{"crate_id":17,"path":["object","endian","I32Bytes"],"kind":"struct"},"24:4067:3414":{"crate_id":24,"path":["syn","token","Super"],"kind":"struct"},"24:3109:3301":{"crate_id":24,"path":["syn","parse","Nothing"],"kind":"struct"},"2:3277:217":{"crate_id":2,"path":["core","marker","StructuralEq"],"kind":"trait"},"6:543:7989":{"crate_id":6,"path":["libc","unix","rusage"],"kind":"struct"},"24:5854:3158":{"crate_id":24,"path":["syn","expr","ExprUnsafe"],"kind":"struct"},"16:5975:6083":{"crate_id":16,"path":["gimli","read","dwarf","Dwarf"],"kind":"struct"},"1:8912:4256":{"crate_id":1,"path":["std","sync","once","Once"],"kind":"struct"},"17:681:1839":{"crate_id":17,"path":["object","read","any","Symbol"],"kind":"struct"},"17:13098:7376":{"crate_id":17,"path":["object","pe","ImageRomOptionalHeader"],"kind":"struct"},"1:2437:14164":{"crate_id":1,"path":["std","env","SplitPaths"],"kind":"struct"},"1:12298:4823":{"crate_id":1,"path":["std","time","SystemTimeError"],"kind":"struct"},"24:4193:3417":{"crate_id":24,"path":["syn","token","Unsized"],"kind":"struct"},"2:53500:9038":{"crate_id":2,"path":["core","core_arch","x86","__m512d"],"kind":"struct"},"17:12343:7136":{"crate_id":17,"path":["object","macho","DysymtabCommand"],"kind":"struct"},"17:10887:6933":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbol"],"kind":"struct"},"2:51442:5314":{"crate_id":2,"path":["core","core_arch","simd","u8x16"],"kind":"struct"},"17:13180:7388":{"crate_id":17,"path":["object","pe","Guid"],"kind":"struct"},"16:7761:6117":{"crate_id":16,"path":["gimli","read","unit","AttrsIter"],"kind":"struct"},"1:12128:3244":{"crate_id":1,"path":["std","sync","mpsc","IntoIter"],"kind":"struct"},"21:1191:4642":{"crate_id":21,"path":["proc_macro","bridge","client","FreeFunctions"],"kind":"struct"},"5:1635:4889":{"crate_id":5,"path":["alloc","collections","btree","map","Keys"],"kind":"struct"},"24:6313:3180":{"crate_id":24,"path":["syn","ty","TypeBareFn"],"kind":"struct"},"17:11118:48772":{"crate_id":17,"path":["object","read","SymbolSection"],"kind":"enum"},"2:22874:5319":{"crate_id":2,"path":["core","core_simd","eq","SimdPartialEq"],"kind":"trait"},"1:11681:4847":{"crate_id":1,"path":["std","path","StripPrefixError"],"kind":"struct"},"21:2659:4619":{"crate_id":21,"path":["proc_macro","bridge","DelimSpan"],"kind":"struct"},"17:13590:7495":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation64"],"kind":"struct"},"5:4443:3245":{"crate_id":5,"path":["alloc","collections","vec_deque","iter","Iter"],"kind":"struct"},"6:6091:8753":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_fpxreg"],"kind":"struct"},"1:15020:4872":{"crate_id":1,"path":["std","sys","unix","process","process_inner","ExitStatus"],"kind":"struct"},"1:10836:129":{"crate_id":1,"path":["std","fs","FileType"],"kind":"struct"},"2:47713:84":{"crate_id":2,"path":["core","sync","atomic","AtomicI8"],"kind":"struct"},"5:4515:5691":{"crate_id":5,"path":["alloc","collections","vec_deque","pair_slices","PairSlices"],"kind":"struct"},"1:3204:4694":{"crate_id":1,"path":["std","fs","read_to_string"],"kind":"function"},"2:46727:5112":{"crate_id":2,"path":["core","iter","adapters","rev","Rev"],"kind":"struct"},"1:15987:58781":{"crate_id":1,"path":["std","backtrace_rs","print","PrintFmt"],"kind":"enum"},"2:3165:75":{"crate_id":2,"path":["core","convert","AsRef"],"kind":"trait"},"9:0:2955":{"crate_id":9,"path":["miniz_oxide"],"kind":"module"},"6:1522:8048":{"crate_id":6,"path":["libc","unix","linux_like","in_addr"],"kind":"struct"},"6:1584:8081":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_ll"],"kind":"struct"},"2:48495:67":{"crate_id":2,"path":["core","fmt","Alignment"],"kind":"enum"},"16:2991:6223":{"crate_id":16,"path":["gimli","common","LocationListsOffset"],"kind":"struct"},"18:886:6403":{"crate_id":18,"path":["memchr","memmem","SearcherRev"],"kind":"struct"},"16:6101:6037":{"crate_id":16,"path":["gimli","read","abbrev","Abbreviations"],"kind":"struct"},"2:53592:9042":{"crate_id":2,"path":["core","core_arch","x86","cpuid","CpuidResult"],"kind":"struct"},"17:2484:48863":{"crate_id":17,"path":["object","read","elf","relocation","ElfRelaIterator"],"kind":"enum"},"17:11015:49049":{"crate_id":17,"path":["object","read","pe","section","PeRelocationIterator"],"kind":"struct"},"6:6910:8856":{"crate_id":6,"path":["libc","unix","linux_like","linux","canfd_frame"],"kind":"struct"},"5:1663:4892":{"crate_id":5,"path":["alloc","collections","btree","map","IntoKeys"],"kind":"struct"},"15:248:5882":{"crate_id":15,"path":["addr2line","LocationRangeUnitIter"],"kind":"struct"},"12:399:5866":{"crate_id":12,"path":["hashbrown","raw","RawIntoIter"],"kind":"struct"},"24:5087:3449":{"crate_id":24,"path":["syn","token","OrOr"],"kind":"struct"},"12:764:3249":{"crate_id":12,"path":["hashbrown","map","IterMut"],"kind":"struct"},"2:47839:88":{"crate_id":2,"path":["core","sync","atomic","AtomicU16"],"kind":"struct"},"24:3869:3407":{"crate_id":24,"path":["syn","token","Move"],"kind":"struct"},"2:51818:8980":{"crate_id":2,"path":["core","core_arch","simd","m8x16"],"kind":"struct"},"16:3320:6273":{"crate_id":16,"path":["gimli","common","DebugTypeSignature"],"kind":"struct"},"12:856:4890":{"crate_id":12,"path":["hashbrown","map","Values"],"kind":"struct"},"24:3743:3402":{"crate_id":24,"path":["syn","token","Impl"],"kind":"struct"},"5:3759:3245":{"crate_id":5,"path":["alloc","collections","linked_list","Iter"],"kind":"struct"},"24:2152:6783":{"crate_id":24,"path":["syn","ext","private","PeekFn"],"kind":"struct"},"24:5766:3137":{"crate_id":24,"path":["syn","expr","ExprForLoop"],"kind":"struct"},"2:49908:5211":{"crate_id":2,"path":["core","str","pattern","CharArrayRefSearcher"],"kind":"struct"},"2:13053:5199":{"crate_id":2,"path":["core","str","pattern"],"kind":"module"},"24:6322:3181":{"crate_id":24,"path":["syn","ty","TypeGroup"],"kind":"struct"},"2:24496:173":{"crate_id":2,"path":["core","num","nonzero","NonZeroU8"],"kind":"struct"},"12:2412:7888":{"crate_id":12,"path":["hashbrown","raw","TableLayout"],"kind":"struct"},"17:11726:7022":{"crate_id":17,"path":["object","elf","Dyn64"],"kind":"struct"},"1:14634:4696":{"crate_id":1,"path":["std","sys","unix","io","IoSlice"],"kind":"struct"},"1:15499:5890":{"crate_id":1,"path":["std","backtrace_rs","backtrace","Frame"],"kind":"struct"},"22:934:1822":{"crate_id":22,"path":["proc_macro2","imp","Span"],"kind":"enum"},"6:3957:8255":{"crate_id":6,"path":["libc","unix","linux_like","linux","packet_mreq"],"kind":"struct"},"2:4:979":{"crate_id":2,"path":["core","panic"],"kind":"macro"},"2:50175:5485":{"crate_id":2,"path":["core","str","CharEscapeUnicode"],"kind":"struct"},"2:3504:3327":{"crate_id":2,"path":["core","ops","deref","DerefMut"],"kind":"trait"},"6:5210:8523":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","msghdr"],"kind":"struct"},"17:13884:7591":{"crate_id":17,"path":["object","pe","ImageDebugDirectory"],"kind":"struct"},"1:10431:6679":{"crate_id":1,"path":["std","backtrace_rs","print","BacktraceFrameFmt"],"kind":"struct"},"12:2398:7886":{"crate_id":12,"path":["hashbrown","raw","bitmask","BitMask"],"kind":"struct"},"24:4229:3419":{"crate_id":24,"path":["syn","token","Virtual"],"kind":"struct"},"1:7796:4875":{"crate_id":1,"path":["std","process","exit"],"kind":"function"},"2:8106:4727":{"crate_id":2,"path":["core","iter","sources","empty","Empty"],"kind":"struct"},"1:4082:205":{"crate_id":1,"path":["std","io","error","Result"],"kind":"typedef"},"6:6200:8816":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","shmid_ds"],"kind":"struct"},"24:3365:3388":{"crate_id":24,"path":["syn","token","Abstract"],"kind":"struct"},"6:5269:8555":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_pktinfo"],"kind":"struct"},"12:2052:4795":{"crate_id":12,"path":["hashbrown","set","Intersection"],"kind":"struct"},"5:5415:4686":{"crate_id":5,"path":["alloc","rc","from_iter_exact","Guard"],"kind":"struct"},"6:1622:8105":{"crate_id":6,"path":["libc","unix","linux_like","Dl_info"],"kind":"struct"},"16:5766:5955":{"crate_id":16,"path":["gimli","read","cfi","UnwindTableRow"],"kind":"struct"},"17:13240:7402":{"crate_id":17,"path":["object","pe","ImageSectionHeader"],"kind":"struct"},"5:1597:3245":{"crate_id":5,"path":["alloc","collections","btree","map","Iter"],"kind":"struct"},"17:10052:48820":{"crate_id":17,"path":["object","read","archive","ArchiveMember"],"kind":"struct"},"24:3725:3401":{"crate_id":24,"path":["syn","token","If"],"kind":"struct"},"17:13394:7442":{"crate_id":17,"path":["object","pe","ImageBaseRelocation"],"kind":"struct"},"1:5731:4660":{"crate_id":1,"path":["std","os","unix","fs","PermissionsExt"],"kind":"trait"},"2:10579:5254":{"crate_id":2,"path":["core","hash","BuildHasherDefault"],"kind":"struct"},"2:11162:4704":{"crate_id":2,"path":["core","slice","iter","Split"],"kind":"struct"},"2:49839:5200":{"crate_id":2,"path":["core","str","pattern","SearchStep"],"kind":"enum"},"5:1011:3245":{"crate_id":5,"path":["alloc","collections","binary_heap","Iter"],"kind":"struct"},"24:3527:105":{"crate_id":24,"path":["syn","token","Continue"],"kind":"struct"},"24:972:3166":{"crate_id":24,"path":["syn","generics","Turbofish"],"kind":"struct"},"6:6085:8751":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","pthread_attr_t"],"kind":"struct"},"2:10294:109":{"crate_id":2,"path":["core","fmt","macros","Debug"],"kind":"proc_derive"},"2:55964:5173":{"crate_id":2,"path":["core","core_simd","swizzle","Which"],"kind":"enum"},"16:6768:6250":{"crate_id":16,"path":["gimli","read","lookup","PubStuffParser"],"kind":"struct"},"16:7146:6106":{"crate_id":16,"path":["gimli","read","op","OperationIter"],"kind":"struct"},"24:6056:3170":{"crate_id":24,"path":["syn","lit","LitChar"],"kind":"struct"},"1:12154:4926":{"crate_id":1,"path":["std","sync","mpsc","RecvError"],"kind":"struct"},"2:46363:5475":{"crate_id":2,"path":["core","char","EscapeUnicode"],"kind":"struct"},"24:5858:3159":{"crate_id":24,"path":["syn","expr","ExprWhile"],"kind":"struct"},"2:49663:5468":{"crate_id":2,"path":["core","str","iter","Matches"],"kind":"struct"},"2:3410:3458":{"crate_id":2,"path":["core","ops","bit","Shl"],"kind":"trait"},"2:4964:3304":{"crate_id":2,"path":["core","cell","Cell"],"kind":"struct"},"17:10635:6897":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandIterator"],"kind":"struct"},"6:4060:8305":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_constant_effect"],"kind":"struct"},"24:5802:3146":{"crate_id":24,"path":["syn","expr","ExprMethodCall"],"kind":"struct"},"16:5421:5933":{"crate_id":16,"path":["gimli","read","cfi","EhHdrTable"],"kind":"struct"},"1:4736:58159":{"crate_id":1,"path":["std","io","Write","write_fmt","Adapter"],"kind":"struct"},"24:5034:3445":{"crate_id":24,"path":["syn","token","MulEq"],"kind":"struct"},"6:6858:8843":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_rwlockattr_t"],"kind":"struct"},"20:47:2818":{"crate_id":20,"path":["quote","format_ident"],"kind":"macro"}},"external_crates":{"23":{"name":"unicode_ident","html_root_url":null},"18":{"name":"memchr","html_root_url":"https://doc.rust-lang.org/nightly/"},"2":{"name":"core","html_root_url":"https://doc.rust-lang.org/nightly/"},"11":{"name":"adler","html_root_url":"https://docs.rs/adler/0.2.3/"},"7":{"name":"unwind","html_root_url":"https://doc.rust-lang.org/nightly/"},"4":{"name":"rustc_std_workspace_core","html_root_url":"https://doc.rust-lang.org/nightly/"},"5":{"name":"alloc","html_root_url":"https://doc.rust-lang.org/nightly/"},"1":{"name":"std","html_root_url":"https://doc.rust-lang.org/nightly/"},"24":{"name":"syn","html_root_url":"https://docs.rs/syn/1.0.99/"},"9":{"name":"miniz_oxide","html_root_url":"https://doc.rust-lang.org/nightly/"},"13":{"name":"std_detect","html_root_url":"https://doc.rust-lang.org/nightly/"},"8":{"name":"cfg_if","html_root_url":"https://docs.rs/cfg-if/"},"17":{"name":"object","html_root_url":"https://doc.rust-lang.org/nightly/"},"22":{"name":"proc_macro2","html_root_url":"https://docs.rs/proc-macro2/1.0.43/"},"14":{"name":"rustc_demangle","html_root_url":"https://doc.rust-lang.org/nightly/"},"12":{"name":"hashbrown","html_root_url":"https://doc.rust-lang.org/nightly/"},"21":{"name":"proc_macro","html_root_url":"https://doc.rust-lang.org/nightly/"},"6":{"name":"libc","html_root_url":"https://doc.rust-lang.org/nightly/"},"16":{"name":"gimli","html_root_url":"https://doc.rust-lang.org/nightly/"},"20":{"name":"quote","html_root_url":"https://docs.rs/quote/1.0.21/"},"10":{"name":"rustc_std_workspace_alloc","html_root_url":"https://doc.rust-lang.org/nightly/"},"3":{"name":"compiler_builtins","html_root_url":"https://doc.rust-lang.org/nightly/"},"19":{"name":"panic_unwind","html_root_url":"https://doc.rust-lang.org/nightly/"},"15":{"name":"addr2line","html_root_url":"https://doc.rust-lang.org/nightly/"}},"format_version":16}